File: providers/s3/shedlock-provider-s3/src/main/java/net/javacrumbs/shedlock/provider/s3/S3LockProvider.java
Patch:
@@ -1,4 +1,5 @@
 package net.javacrumbs.shedlock.provider.s3;
+
 import com.amazonaws.services.s3.AmazonS3;
 import net.javacrumbs.shedlock.support.StorageBasedLockProvider;
 
@@ -28,4 +29,3 @@ public S3LockProvider(AmazonS3 s3Client, String bucketName) {
         this(s3Client, bucketName, "shedlock/");
     }
 }
-

File: providers/neo4j/shedlock-provider-neo4j/src/main/java/net/javacrumbs/shedlock/provider/neo4j/Neo4jStorageAccessor.java
Patch:
@@ -84,7 +84,7 @@ private Map<String, Object> createParameterMap(@NonNull LockConfiguration lockCo
     @Override
     public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
         String cypher = String.format(
-                "MATCH (lock:%s) " + "WHERE lock.name = $lockName AND lock.lock_until <= $now "
+                "CYPHER runtime = slotted MATCH (lock:%s) " + "WHERE lock.name = $lockName AND lock.lock_until <= $now "
                         + "SET lock._LOCK_ = true " + "WITH lock as l " + "WHERE l.lock_until <= $now "
                         + "SET l.lock_until = $lockUntil, l.locked_at = $now, l.locked_by = $lockedBy "
                         + "REMOVE l._LOCK_ ",

File: providers/neo4j/shedlock-provider-neo4j/src/main/java/net/javacrumbs/shedlock/provider/neo4j/Neo4jStorageAccessor.java
Patch:
@@ -84,7 +84,7 @@ private Map<String, Object> createParameterMap(@NonNull LockConfiguration lockCo
     @Override
     public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
         String cypher = String.format(
-                "MATCH (lock:%s) " + "WHERE lock.name = $lockName AND lock.lock_until <= $now "
+                "CYPHER runtime = slotted MATCH (lock:%s) " + "WHERE lock.name = $lockName AND lock.lock_until <= $now "
                         + "SET lock._LOCK_ = true " + "WITH lock as l " + "WHERE l.lock_until <= $now "
                         + "SET l.lock_until = $lockUntil, l.locked_at = $now, l.locked_by = $lockedBy "
                         + "REMOVE l._LOCK_ ",

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/util/TrackingLockProviderWrapper.java
Patch:
@@ -59,7 +59,7 @@ private SimpleLockWrapper(SimpleLock wrappedLock, LockConfiguration lockConfigur
         public void unlock() {
             try {
                 // Unlocking only once - unlocking twice is dangerous as it's likely that the second unlock will
-                // unlock a lock heald by another process
+                // unlock a lock held by another process
                 if (locked.compareAndSet(true, false)) {
                     wrappedLock.unlock();
                 }

File: providers/dynamodb/shedlock-provider-dynamodb2/src/test/java/net/javacrumbs/shedlock/provider/dynamodb2/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -31,6 +31,8 @@
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
 import software.amazon.awssdk.regions.Region;
 import software.amazon.awssdk.services.dynamodb.DynamoDbClient;
 import software.amazon.awssdk.services.dynamodb.model.AttributeValue;
@@ -83,6 +85,7 @@ static DynamoDbClient createClient() {
                 .endpointOverride(URI.create(endpoint))
                 // The region is meaningless for local DynamoDb but required for client builder
                 // validation
+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create("dummy", "dummy")))
                 .region(Region.US_EAST_1)
                 .build();
     }

File: providers/neo4j/shedlock-provider-neo4j/src/main/java/net/javacrumbs/shedlock/provider/neo4j/Neo4jStorageAccessor.java
Patch:
@@ -46,7 +46,7 @@ private void createLockNameUniqueConstraint() {
         try (Session session = getSession();
                 Transaction transaction = session.beginTransaction()) {
             transaction.run(String.format(
-                    "CREATE CONSTRAINT UNIQUE_%s_name IF NOT EXISTS ON (lock:%s) ASSERT lock.name IS UNIQUE",
+                    "CREATE CONSTRAINT UNIQUE_%s_name IF NOT EXISTS FOR (lock:%s) REQUIRE lock.name IS UNIQUE",
                     collectionName, collectionName));
             transaction.commit();
         }

File: providers/neo4j/shedlock-provider-neo4j/src/test/java/net/javacrumbs/shedlock/provider/neo4j/Neo4jLockProviderIntegrationTest.java
Patch:
@@ -213,7 +213,7 @@ protected Neo4jTestUtils.LockInfo getLockInfo(String lockName) {
 
     private static class MyNeo4jContainer extends Neo4jContainer<MyNeo4jContainer> {
         MyNeo4jContainer() {
-            super(DockerImageName.parse("neo4j").withTag("4.4.6"));
+            super(DockerImageName.parse("neo4j").withTag("5.17.0"));
             withoutAuthentication();
         }
     }

File: providers/neo4j/shedlock-provider-neo4j/src/main/java/net/javacrumbs/shedlock/provider/neo4j/Neo4jStorageAccessor.java
Patch:
@@ -46,7 +46,7 @@ private void createLockNameUniqueConstraint() {
         try (Session session = getSession();
                 Transaction transaction = session.beginTransaction()) {
             transaction.run(String.format(
-                    "CREATE CONSTRAINT UNIQUE_%s_name IF NOT EXISTS ON (lock:%s) ASSERT lock.name IS UNIQUE",
+                    "CREATE CONSTRAINT UNIQUE_%s_name IF NOT EXISTS FOR (lock:%s) REQUIRE lock.name IS UNIQUE",
                     collectionName, collectionName));
             transaction.commit();
         }

File: providers/neo4j/shedlock-provider-neo4j/src/test/java/net/javacrumbs/shedlock/provider/neo4j/Neo4jLockProviderIntegrationTest.java
Patch:
@@ -213,7 +213,7 @@ protected Neo4jTestUtils.LockInfo getLockInfo(String lockName) {
 
     private static class MyNeo4jContainer extends Neo4jContainer<MyNeo4jContainer> {
         MyNeo4jContainer() {
-            super(DockerImageName.parse("neo4j").withTag("4.4.6"));
+            super(DockerImageName.parse("neo4j").withTag("5.17.0"));
             withoutAuthentication();
         }
     }

File: spring/test/shedlock-springboot-test/src/main/java/net/javacrumbs/shedlock/test/boot/ScheduledTasks.java
Patch:
@@ -23,7 +23,7 @@
 @Component
 public class ScheduledTasks {
     @Scheduled(fixedRate = 100)
-    @SchedulerLock(name = "reportCurrentTime", lockAtMostFor = "${lock.at.most.for}")
+    @SchedulerLock(name = "#{nameSource.getLockName()}", lockAtMostFor = "${lock.at.most.for}")
     public void reportCurrentTime() {
         assertLocked();
         System.out.println(new Date());

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MySqlConfig.java
Patch:
@@ -36,7 +36,7 @@ public String nowExpression() {
 
     static class MyMySQLContainer extends MySQLContainer<MyMySQLContainer> {
         MyMySQLContainer() {
-            super("mysql:8");
+            super("mysql:8.2");
         }
     }
 }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/PostgresConfig.java
Patch:
@@ -30,7 +30,7 @@ public String nowExpression() {
 
     static class MyPostgreSQLContainer extends PostgreSQLContainer<MyPostgreSQLContainer> {
         MyPostgreSQLContainer() {
-            super("postgres:15");
+            super("postgres:16");
         }
     }
 }

File: providers/spanner/shedlock-provider-spanner/src/test/java/net/javacrumbs/shedlock/provider/spanner/AbstractSpannerStorageBasedLockProviderIntegrationTest.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class AbstractSpannerStorageBasedLockProviderIntegrationTest
         extends AbstractStorageBasedLockProviderIntegrationTest {
 
-    private static final String SPANNER_EMULATOR_IMAGE = "gcr.io/cloud-spanner-emulator/emulator:latest";
+    private static final String SPANNER_EMULATOR_IMAGE = "gcr.io/cloud-spanner-emulator/emulator:1.5.12";
     private static final String PROJECT_NAME = "test-project";
     private static final String INSTANCE_NAME = "test-instance";
     private static final String DATABASE_NAME = "test-db";

File: providers/spanner/shedlock-provider-spanner/src/test/java/net/javacrumbs/shedlock/provider/spanner/AbstractSpannerStorageBasedLockProviderIntegrationTest.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class AbstractSpannerStorageBasedLockProviderIntegrationTest
         extends AbstractStorageBasedLockProviderIntegrationTest {
 
-    private static final String SPANNER_EMULATOR_IMAGE = "gcr.io/cloud-spanner-emulator/emulator:latest";
+    private static final String SPANNER_EMULATOR_IMAGE = "gcr.io/cloud-spanner-emulator/emulator:1.5.12";
     private static final String PROJECT_NAME = "test-project";
     private static final String INSTANCE_NAME = "test-instance";
     private static final String DATABASE_NAME = "test-db";

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/LockAssert.java
Patch:
@@ -76,7 +76,9 @@ public static class TestHelper {
          */
         public static void makeAllAssertsPass(boolean pass) {
             if (pass) {
-                LockAssert.startLock(TEST_LOCK_NAME);
+                if (!LockAssert.alreadyLockedBy(TEST_LOCK_NAME)) {
+                    LockAssert.startLock(TEST_LOCK_NAME);
+                }
             } else {
                 if (LockAssert.alreadyLockedBy(TEST_LOCK_NAME)) {
                     LockAssert.endLock();

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/LockAssert.java
Patch:
@@ -76,7 +76,9 @@ public static class TestHelper {
          */
         public static void makeAllAssertsPass(boolean pass) {
             if (pass) {
-                LockAssert.startLock(TEST_LOCK_NAME);
+                if (!LockAssert.alreadyLockedBy(TEST_LOCK_NAME)) {
+                    LockAssert.startLock(TEST_LOCK_NAME);
+                }
             } else {
                 if (LockAssert.alreadyLockedBy(TEST_LOCK_NAME)) {
                     LockAssert.endLock();

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/LockAssert.java
Patch:
@@ -78,7 +78,9 @@ public static void makeAllAssertsPass(boolean pass) {
             if (pass) {
                 LockAssert.startLock(TEST_LOCK_NAME);
             } else {
-                LockAssert.endLock();
+                if (LockAssert.alreadyLockedBy(TEST_LOCK_NAME)) {
+                    LockAssert.endLock();
+                }
             }
         }
     }

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/OracleServerTimeStatementsSource.java
Patch:
@@ -32,7 +32,7 @@ class OracleServerTimeStatementsSource extends SqlStatementsSource {
 
     @Override
     String getInsertStatement() {
-        return "INSERT INTO " + tableName() + "(" + name() + ", " + lockUntil() + ", " + lockedAt() + ", " + lockedBy() + ") VALUES(:name, " + lockAtMostFor + ", " + now + ", :lockedBy)";
+        return "MERGE INTO " + tableName() + " USING (SELECT 1 FROM dual) ON (" + name() + " = :name) WHEN MATCHED THEN UPDATE SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now + " WHEN NOT MATCHED THEN INSERT(" + name() + ", " + lockUntil() + ", " + lockedAt() + ", " + lockedBy() + ") VALUES(:name, " + lockAtMostFor + ", " + now + ", :lockedBy)";
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/OracleServerTimeStatementsSource.java
Patch:
@@ -32,7 +32,7 @@ class OracleServerTimeStatementsSource extends SqlStatementsSource {
 
     @Override
     String getInsertStatement() {
-        return "INSERT INTO " + tableName() + "(" + name() + ", " + lockUntil() + ", " + lockedAt() + ", " + lockedBy() + ") VALUES(:name, " + lockAtMostFor + ", " + now + ", :lockedBy)";
+        return "MERGE INTO " + tableName() + " USING (SELECT 1 FROM dual) ON (" + name() + " = :name) WHEN MATCHED THEN UPDATE SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now + " WHEN NOT MATCHED THEN INSERT(" + name() + ", " + lockUntil() + ", " + lockedAt() + ", " + lockedBy() + ") VALUES(:name, " + lockAtMostFor + ", " + now + ", :lockedBy)";
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateLockProvider.java
Patch:
@@ -200,8 +200,8 @@ public Builder withColumnNames(ColumnNames columnNames) {
                 return this;
             }
 
-            public Builder withDbUpperCase(final boolean dbUppercase) {
-                this.dbUpperCase = dbUppercase;
+            public Builder withDbUpperCase(final boolean dbUpperCase) {
+                this.dbUpperCase = dbUpperCase;
                 return this;
             }
 

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/SqlStatementsSource.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.TimeZone;
 
@@ -81,7 +82,7 @@ static SqlStatementsSource create(Configuration configuration) {
                     throw new UnsupportedOperationException("DB time is not supported for '" + databaseProduct + "'");
             }
         } else {
-            if (DatabaseProduct.PostgresSQL.equals(databaseProduct)) {
+            if (Objects.equals(databaseProduct, DatabaseProduct.PostgresSQL)) {
                 logger.debug("Using PostgresSqlServerTimeStatementsSource");
                 return new PostgresSqlStatementsSource(configuration);
             } else {

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -83,7 +83,7 @@ public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
         } catch (ConcurrencyFailureException e) {
             logger.debug("Serialization exception", e);
             return false;
-        } catch (DataIntegrityViolationException | TransactionSystemException e) {
+        } catch (DataIntegrityViolationException | TransactionSystemException | UncategorizedSQLException e) {
             logger.error("Unexpected exception", e);
             return false;
         }

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -21,6 +21,7 @@
 import net.javacrumbs.shedlock.support.annotation.NonNull;
 import org.springframework.dao.ConcurrencyFailureException;
 import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.dao.DuplicateKeyException;
 import org.springframework.jdbc.BadSqlGrammarException;
 import org.springframework.jdbc.UncategorizedSQLException;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
@@ -65,10 +66,10 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
         try {
             String sql = sqlStatementsSource().getInsertStatement();
             return execute(sql, lockConfiguration);
-        } catch (DataIntegrityViolationException | ConcurrencyFailureException | TransactionSystemException e) {
+        } catch (DuplicateKeyException | ConcurrencyFailureException | TransactionSystemException e) {
             logger.debug("Duplicate key", e);
             return false;
-        } catch (BadSqlGrammarException | UncategorizedSQLException e) {
+        } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException e) {
             logger.error("Unexpected exception", e);
             return false;
         }

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -21,7 +21,6 @@
 import net.javacrumbs.shedlock.support.annotation.NonNull;
 import org.springframework.dao.ConcurrencyFailureException;
 import org.springframework.dao.DataIntegrityViolationException;
-import org.springframework.dao.DuplicateKeyException;
 import org.springframework.jdbc.BadSqlGrammarException;
 import org.springframework.jdbc.UncategorizedSQLException;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
@@ -66,10 +65,10 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
         try {
             String sql = sqlStatementsSource().getInsertStatement();
             return execute(sql, lockConfiguration);
-        } catch (DuplicateKeyException | ConcurrencyFailureException | TransactionSystemException e) {
+        } catch (DataIntegrityViolationException | ConcurrencyFailureException | TransactionSystemException  e) {
             logger.debug("Duplicate key", e);
             return false;
-        } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException e) {
+        } catch (BadSqlGrammarException | UncategorizedSQLException e) {
             logger.error("Unexpected exception", e);
             return false;
         }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MsSqlServerConfig.java
Patch:
@@ -45,7 +45,7 @@ public String nowExpression() {
 
     static class MyMSSQLServerContainer extends MSSQLServerContainer<MyMSSQLServerContainer> {
         MyMSSQLServerContainer() {
-            super("mcr.microsoft.com/mssql/server:2019-latest");
+            super("mcr.microsoft.com/mssql/server:2022-latest");
             withLogConsumer(it -> LOGGER.info(it.getUtf8String()));
             acceptLicense();
         }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/OracleServerConfig.java
Patch:
@@ -19,7 +19,7 @@
 
 public final class OracleServerConfig extends AbstractContainerBasedDbConfig<OracleContainer> {
     public OracleServerConfig() {
-        super(new OracleContainer("gvenzl/oracle-xe:18-slim"));
+        super(new OracleContainer("gvenzl/oracle-xe:21-slim"));
     }
 
     @Override

File: providers/r2dbc/shedlock-provider-r2dbc/src/test/java/net/javacrumbs/shedlock/provider/r2dbc/MsSqlR2dbcLockProviderIntegrationTest.java
Patch:
@@ -17,7 +17,9 @@
 
 import net.javacrumbs.shedlock.test.support.jdbc.DbConfig;
 import net.javacrumbs.shedlock.test.support.jdbc.MsSqlServerConfig;
+import org.junit.jupiter.api.Disabled;
 
+@Disabled
 public class MsSqlR2dbcLockProviderIntegrationTest extends AbstractR2dbcTest {
     private static final DbConfig dbConfig = new MsSqlServerConfig();
 

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -66,10 +66,10 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
         try {
             String sql = sqlStatementsSource().getInsertStatement();
             return execute(sql, lockConfiguration);
-        } catch (DuplicateKeyException | ConcurrencyFailureException e) {
+        } catch (DuplicateKeyException | ConcurrencyFailureException | TransactionSystemException e) {
             logger.debug("Duplicate key", e);
             return false;
-        } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException | TransactionSystemException e) {
+        } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException e) {
             logger.error("Unexpected exception", e);
             return false;
         }
@@ -101,7 +101,7 @@ public boolean extend(@NonNull LockConfiguration lockConfiguration) {
     public void unlock(@NonNull LockConfiguration lockConfiguration) {
         try {
             doUnlock(lockConfiguration);
-        } catch (ConcurrencyFailureException e) {
+        } catch (ConcurrencyFailureException | TransactionSystemException e) {
             logger.info("Unlock failed due to TransactionSystemException - retrying");
             doUnlock(lockConfiguration);
         }

File: providers/jdbc/shedlock-provider-jdbc-internal/src/main/java/net/javacrumbs/shedlock/provider/jdbc/internal/AbstractJdbcStorageAccessor.java
Patch:
@@ -112,6 +112,7 @@ boolean handleInsertionException(String sql, SQLException e) {
     }
 
     boolean handleUpdateException(String sql, SQLException e) {
+        logger.debug("Unexpected exception when updating lock record", e);
         throw new LockException("Unexpected exception when locking", e);
     }
 

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -67,6 +67,7 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
             String sql = sqlStatementsSource().getInsertStatement();
             return execute(sql, lockConfiguration);
         } catch (DuplicateKeyException | ConcurrencyFailureException e) {
+            logger.debug("Duplicate key", e);
             return false;
         } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException | TransactionSystemException e) {
             logger.error("Unexpected exception", e);
@@ -80,6 +81,7 @@ public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
         try {
             return execute(sql, lockConfiguration);
         } catch (ConcurrencyFailureException e) {
+            logger.debug("Serialization exception", e);
             return false;
         } catch (DataIntegrityViolationException | TransactionSystemException e) {
             logger.error("Unexpected exception", e);

File: providers/cassandra/shedlock-provider-cassandra/src/main/java/net/javacrumbs/shedlock/provider/cassandra/CassandraLockProvider.java
Patch:
@@ -106,7 +106,7 @@ public static Configuration.Builder builder() {
          * Convenience builder class to build Configuration
          */
         public static final class Builder {
-            private CqlIdentifier table;
+            private CqlIdentifier table = CqlIdentifier.fromCql(DEFAULT_TABLE);
             private ColumnNames columnNames = new ColumnNames("name", "lockUntil", "lockedAt", "lockedBy");
             private CqlSession cqlSession;
             private ConsistencyLevel consistencyLevel = ConsistencyLevel.QUORUM;

File: providers/cassandra/shedlock-provider-cassandra/src/test/java/net/javacrumbs/shedlock/provider/cassandra/CassandraLockProviderIntegrationTest.java
Patch:
@@ -73,7 +73,6 @@ protected StorageBasedLockProvider getLockProvider() {
             Configuration.builder()
                 .withCqlSession(session)
                 .withKeyspace(KEYSPACE)
-                .withTableName("lock")
                 .build()
         );
     }
@@ -102,6 +101,8 @@ private Lock findLock(String lockName) {
     }
 
     private static class MyCassandraContainer extends CassandraContainer<MyCassandraContainer> {
-
+        public MyCassandraContainer() {
+            super("cassandra:4");
+        }
     }
 }

File: providers/jdbc/shedlock-provider-jdbc-internal/src/main/java/net/javacrumbs/shedlock/provider/jdbc/internal/AbstractJdbcStorageAccessor.java
Patch:
@@ -105,7 +105,7 @@ boolean handleInsertionException(String sql, SQLException e) {
             // lock record already exists
         } else {
             // can not throw exception here, some drivers (Postgres) do not throw SQLIntegrityConstraintViolationException on duplicate key
-            // we will try update in the next step, su if there is another problem, an exception will be thrown there
+            // we will try update in the next step, so if there is another problem, an exception will be thrown there
             logger.debug("Exception thrown when inserting record", e);
         }
         return false;

File: shedlock-test-support/src/test/java/net/javacrumbs/shedlock/support/InMemoryLockProviderIntegrationTest.java
Patch:
@@ -1,6 +1,7 @@
 package net.javacrumbs.shedlock.support;
 
 import net.javacrumbs.shedlock.core.ExtensibleLockProvider;
+import net.javacrumbs.shedlock.provider.inmemory.InMemoryLockProvider;
 import net.javacrumbs.shedlock.test.support.AbstractExtensibleLockProviderIntegrationTest;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: shedlock-test-support/src/test/java/net/javacrumbs/shedlock/support/KeepAliveLockProviderFuzzTest.java
Patch:
@@ -1,5 +1,6 @@
 package net.javacrumbs.shedlock.support;
 
+import net.javacrumbs.shedlock.provider.inmemory.InMemoryLockProvider;
 import net.javacrumbs.shedlock.test.support.FuzzTester;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/OracleServerConfig.java
Patch:
@@ -19,7 +19,7 @@
 
 public final class OracleServerConfig extends AbstractContainerBasedDbConfig<OracleContainer> {
     public OracleServerConfig() {
-        super(new OracleContainer("gvenzl/oracle-xe"));
+        super(new OracleContainer("gvenzl/oracle-xe:18-slim"));
     }
 
     @Override

File: micronaut/shedlock-micronaut/src/test/java/net/javacrumbs/shedlock/micronaut/internal/MethodProxyAopTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 
 
@@ -59,7 +59,7 @@ void prepareMocks() {
     @Test
     void shouldNotCallLockProviderWithNoAnnotation() {
         assertThatThrownBy(() -> testBean.noAnnotation()).hasMessageStartingWith("The task is not locked.");
-        verifyZeroInteractions(lockProvider);
+        verifyNoInteractions(lockProvider);
     }
 
     @Test
@@ -86,7 +86,7 @@ void shouldRethrowDeclaredException() {
     @Test
     void shouldFailOnReturnType() {
         assertThatThrownBy(() -> testBean.returnsValue()).isInstanceOf(LockingNotSupportedException.class);
-        verifyZeroInteractions(lockProvider);
+        verifyNoInteractions(lockProvider);
     }
 
     @Test

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/DeprecatedMethodProxyAopTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 
 
@@ -63,7 +63,7 @@ public void prepareMocks() {
     @Test
     public void shouldNotCollLockProviderWithNoAnnotation() {
         testBean.noAnnotation();
-        verifyZeroInteractions(lockProvider);
+        verifyNoInteractions(lockProvider);
     }
 
     @Test
@@ -97,7 +97,7 @@ public void shouldRethrowDeclaredException() {
     @Test
     public void shouldFailOnReturnType() {
         assertThatThrownBy(() -> testBean.returnsValue()).isInstanceOf(LockingNotSupportedException.class);
-        verifyZeroInteractions(lockProvider);
+        verifyNoInteractions(lockProvider);
     }
 
     @Test

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/MethodProxyAopTest.java
Patch:
@@ -37,7 +37,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 
 
@@ -68,7 +68,7 @@ public void prepareMocks() {
     @Test
     public void shouldNotCollLockProviderWithNoAnnotation() {
         testBean.noAnnotation();
-        verifyZeroInteractions(lockProvider);
+        verifyNoInteractions(lockProvider);
     }
 
     @Test

File: providers/r2dbc/shedlock-provider-r2dbc/src/main/java/net/javacrumbs/shedlock/provider/r2dbc/AbstractR2dbcStorageAccessor.java
Patch:
@@ -74,7 +74,7 @@ public Publisher<Boolean> insertRecordReactive(@NonNull LockConfiguration lockCo
     }
 
     public Publisher<Boolean> updateRecordReactive(@NonNull LockConfiguration lockConfiguration) {
-        String sql = "UPDATE " + tableName + " SET lock_until = " + toParameter(1, "lock_until") + ", locked_at = " + toParameter(2, "locked_at") + ", locked_by = " + toParameter(3, "locked_by") + " WHERE name = " + toParameter(4, "name") + " AND lock_until <= " + toParameter(5, "lock_until");
+        String sql = "UPDATE " + tableName + " SET lock_until = " + toParameter(1, "lock_until") + ", locked_at = " + toParameter(2, "locked_at") + ", locked_by = " + toParameter(3, "locked_by") + " WHERE name = " + toParameter(4, "name") + " AND lock_until <= " + toParameter(5, "now");
         return executeCommand(sql, statement -> {
             Instant now = ClockProvider.now();
             statement.bind(0, toCompatibleDate(lockConfiguration.getLockAtMostUntil()));

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/JdbcTestUtils.java
Patch:
@@ -34,15 +34,15 @@ public JdbcTestUtils(DbConfig dbConfig) {
     }
 
     public Timestamp getLockedUntil(String lockName) {
-        return jdbcTemplate.queryForObject("SELECT lock_until FROM shedlock WHERE name = ?", new Object[]{lockName}, Timestamp.class);
+        return jdbcTemplate.queryForObject("SELECT lock_until FROM shedlock WHERE name = ?", Timestamp.class, lockName);
     }
 
     public LockInfo getLockInfo(String lockName) {
-        return jdbcTemplate.query("SELECT name, lock_until, " + dbConfig.nowExpression() + " as db_time FROM shedlock WHERE name = ?", new Object[]{lockName}, (rs, rowNum) -> new LockInfo(
+        return jdbcTemplate.query("SELECT name, lock_until, " + dbConfig.nowExpression() + " as db_time FROM shedlock WHERE name = ?", (rs, rowNum) -> new LockInfo(
             rs.getString("name"),
             rs.getTimestamp("lock_until").toInstant(),
             rs.getTimestamp("db_time").toInstant()
-        )).get(0);
+        ), lockName).get(0);
     }
 
     public void clean() {

File: micronaut/shedlock-micronaut/src/main/java/net/javacrumbs/shedlock/micronaut/internal/SchedulerLockInterceptor.java
Patch:
@@ -24,7 +24,7 @@
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.core.LockingTaskExecutor;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.time.Duration;
 import java.util.Optional;
 

File: micronaut/shedlock-micronaut/src/test/java/net/javacrumbs/shedlock/micronaut/internal/MethodProxyAopConfig.java
Patch:
@@ -20,7 +20,7 @@
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.micronaut.SchedulerLock;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.io.IOException;
 
 import static net.javacrumbs.shedlock.core.LockAssert.assertLocked;

File: micronaut/test/micronaut-jdbc-template/src/main/java/net/javacrumbs/micronaut/test/Configuration.java
Patch:
@@ -19,7 +19,7 @@
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.provider.jdbctemplate.JdbcTemplateLockProvider;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import javax.sql.DataSource;
 
 @Factory

File: micronaut/test/micronaut-jdbc-template/src/main/java/net/javacrumbs/micronaut/test/ScheduledTasks.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.scheduling.annotation.Scheduled;
 import net.javacrumbs.shedlock.micronaut.SchedulerLock;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.util.Date;
 import java.util.concurrent.atomic.AtomicBoolean;
 

File: micronaut/test/micronaut-jdbc-template/src/test/java/net/javacrumbs/micronaut/test/ApplicationTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package net.javacrumbs.micronaut.test;
 
-import io.micronaut.test.annotation.MicronautTest;
+import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
 import org.junit.jupiter.api.Test;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;

File: micronaut/test/micronaut-jdbc/src/main/java/net/javacrumbs/micronaut/test/Configuration.java
Patch:
@@ -20,7 +20,7 @@
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.provider.jdbc.micronaut.MicronautJdbcLockProvider;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.sql.Connection;
 
 @Factory

File: micronaut/test/micronaut-jdbc/src/main/java/net/javacrumbs/micronaut/test/ScheduledTasks.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.scheduling.annotation.Scheduled;
 import net.javacrumbs.shedlock.micronaut.SchedulerLock;
 
-import javax.inject.Singleton;
+import jakarta.inject.Singleton;
 import java.util.Date;
 import java.util.concurrent.atomic.AtomicBoolean;
 

File: micronaut/test/micronaut-jdbc/src/test/java/net/javacrumbs/micronaut/test/ApplicationTest.java
Patch:
@@ -18,7 +18,7 @@
 import io.micronaut.test.extensions.junit5.annotation.MicronautTest;
 import org.junit.jupiter.api.Test;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.awaitility.Awaitility.await;

File: micronaut/test/micronaut-jdbc-template/src/test/java/net/javacrumbs/micronaut/test/ApplicationTest.java
Patch:
@@ -30,8 +30,6 @@ public class ApplicationTest {
 
     @Test
     void shouldStart() {
-        await().untilAsserted(() -> {
-            assertThat(scheduledTasks.wasCalled()).isTrue();
-        });
+        await().untilAsserted(() -> assertThat(scheduledTasks.wasCalled()).isTrue());
     }
 }

File: micronaut/test/micronaut-jdbc/src/test/java/net/javacrumbs/micronaut/test/ApplicationTest.java
Patch:
@@ -30,8 +30,6 @@ public class ApplicationTest {
 
     @Test
     void shouldStart() {
-        await().untilAsserted(() -> {
-            assertThat(scheduledTasks.wasCalled()).isTrue();
-        });
+        await().untilAsserted(() -> assertThat(scheduledTasks.wasCalled()).isTrue());
     }
 }

File: providers/dynamodb/shedlock-provider-dynamodb/src/test/java/net/javacrumbs/shedlock/provider/dynamodb/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@
 @Testcontainers
 public class DynamoDBLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
     @Container
-    public static DynaliteContainer dynamoDB = new DynaliteContainer();
+    public static final DynaliteContainer dynamoDB = new DynaliteContainer();
 
     private static final String TABLE_NAME = "Shedlock";
     private static Table lockTable;

File: providers/dynamodb/shedlock-provider-dynamodb2/src/test/java/net/javacrumbs/shedlock/provider/dynamodb2/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -50,7 +50,7 @@
 @Testcontainers
 public class DynamoDBLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
     @Container
-    public static DynamoDbContainer dynamoDbContainer =
+    public static final DynamoDbContainer dynamoDbContainer =
         new DynamoDbContainer("quay.io/testcontainers/dynalite:v1.2.1-1")
             .withExposedPorts(4567);
 

File: providers/etcd/shedlock-provider-etcd-jetcd/src/main/java/net/javacrumbs/shedlock/provider/etcd/jetcd/EtcdLockProvider.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Optional;
 
 import static io.etcd.jetcd.options.GetOption.DEFAULT;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static net.javacrumbs.shedlock.support.Utils.getHostname;
 import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 
@@ -201,7 +202,7 @@ public void putWithLeaseId(String key, String value, Long leaseId) {
         }
 
         private ByteSequence toByteSequence(String key) {
-            return ByteSequence.from(key.getBytes());
+            return ByteSequence.from(key.getBytes(UTF_8));
         }
 
         private PutOption putOptionWithLeaseId(Long leaseId) {

File: providers/etcd/shedlock-provider-etcd-jetcd/src/test/java/net/javacrumbs/shedlock/provider/etcd/jetcd/EtcdLockProviderIntegrationTest.java
Patch:
@@ -34,7 +34,7 @@
 public class EtcdLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
 
     @RegisterExtension
-    static EtcdClusterExtension etcdCluster = new EtcdClusterExtension("it-cluster", 1);
+    static final EtcdClusterExtension etcdCluster = new EtcdClusterExtension("it-cluster", 1);
 
     private EtcdLockProvider lockProvider;
     private KV kvClient;

File: providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MultiTenancyLockProviderIntegrationTest.java
Patch:
@@ -108,6 +108,7 @@ private SampleLockProvider(JdbcTemplate jdbcTemplate1, JdbcTemplate jdbcTemplate
         }
 
 
+        @Override
         protected LockProvider createLockProvider(String tenantName) {
             if (TENANT_1.equals(tenantName)) {
                 return new JdbcTemplateLockProvider(builder()
@@ -122,6 +123,7 @@ protected LockProvider createLockProvider(String tenantName) {
             }
         }
 
+        @Override
         protected String getTenantName(LockConfiguration lockConfiguration) {
             // round robin
             // In reality this would use ThreadLocal to figure out the tenant.

File: providers/jdbc/shedlock-provider-jdbc/src/main/java/net/javacrumbs/shedlock/provider/jdbc/JdbcStorageAccessor.java
Patch:
@@ -34,6 +34,7 @@ class JdbcStorageAccessor extends AbstractJdbcStorageAccessor {
         this.dataSource = requireNonNull(dataSource, "dataSource can not be null");
     }
 
+    @Override
     protected <T> T executeCommand(
         String sql,
         SqlFunction<PreparedStatement, T> body,

File: providers/jdbc/shedlock-provider-jdbc/src/test/java/net/javacrumbs/shedlock/provider/jdbc/AbstractJdbcTest.java
Patch:
@@ -25,6 +25,7 @@ protected boolean useDbTime() {
         return false;
     }
 
+    @Override
     protected StorageBasedLockProvider getLockProvider() {
         return new JdbcLockProvider(testUtils.getDatasource());
     }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/AbstractContainerBasedDbConfig.java
Patch:
@@ -25,7 +25,7 @@ abstract class AbstractContainerBasedDbConfig<T extends JdbcDatabaseContainer<T>
 
     public AbstractContainerBasedDbConfig(T container) {
         this.container = container
-            .withLogConsumer(outputFrame -> logger.debug(outputFrame.getUtf8String()));;
+            .withLogConsumer(outputFrame -> logger.debug(outputFrame.getUtf8String()));
     }
 
     @Override
@@ -38,6 +38,7 @@ protected final void doShutdownDb() {
         container.stop();
     }
 
+    @Override
     public String getJdbcUrl() {
         return container.getJdbcUrl();
     }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/Db2ServerConfig.java
Patch:
@@ -37,6 +37,7 @@ protected void doShutdownDb() {
         db2.stop();
     }
 
+    @Override
     public String getJdbcUrl() {
         return db2.getJdbcUrl();
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/DbConfig.java
Patch:
@@ -16,10 +16,9 @@
 package net.javacrumbs.shedlock.test.support.jdbc;
 
 import javax.sql.DataSource;
-import java.io.IOException;
 
 public interface DbConfig {
-    void startDb() throws IOException;
+    void startDb();
 
     void shutdownDb();
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/H2Config.java
Patch:
@@ -17,6 +17,7 @@
 
 public class H2Config extends AbstractDbConfig {
 
+    @Override
     public String getJdbcUrl() {
         return "jdbc:h2:mem:test";
     }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/HsqlConfig.java
Patch:
@@ -16,6 +16,7 @@
 package net.javacrumbs.shedlock.test.support.jdbc;
 
 public class HsqlConfig extends AbstractDbConfig {
+    @Override
     public String getJdbcUrl() {
         return "jdbc:hsqldb:mem:mymemdb";
     }

File: providers/zookeeper/shedlock-provider-zookeeper-curator/src/main/java/net/javacrumbs/shedlock/provider/zookeeper/curator/ZookeeperCuratorLockProvider.java
Patch:
@@ -34,6 +34,7 @@
 import java.time.format.DateTimeParseException;
 import java.util.Optional;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Objects.requireNonNull;
 import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 
@@ -125,11 +126,11 @@ private boolean isLocked(byte[] data) {
     }
 
     private static byte[] serialize(Instant date) {
-        return toIsoString(date).getBytes();
+        return toIsoString(date).getBytes(UTF_8);
     }
 
     private static Instant parse(byte[] data) {
-        return Instant.parse(new String(data));
+        return Instant.parse(new String(data, UTF_8));
     }
 
     String getNodePath(String lockName) {

File: shedlock-test-support/src/main/java/net/javacrumbs/shedlock/test/support/AbstractExtensibleLockProviderIntegrationTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 public abstract class AbstractExtensibleLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
-    private final Duration originalLockDuration = Duration.ofMillis(2_000);
+    private final Duration originalLockDuration = Duration.ofSeconds(2);
 
     @Test
     public void shouldBeAbleToExtendLock() {

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/AopCleanupTest.java
Patch:
@@ -42,7 +42,7 @@ public void shouldCloseTaskExecutor() {
     @EnableScheduling
     @EnableSchedulerLock(defaultLockAtMostFor = "PT30S")
     static class Config {
-        private static LockProvider lockProvider = mock(LockProvider.class);
+        private static final LockProvider lockProvider = mock(LockProvider.class);
 
         @Bean
         public LockProvider lockProvider() {

File: micronaut/test/micronaut-jdbc-template/src/test/java/net/javacrumbs/micronaut/test/ApplicationTest.java
Patch:
@@ -30,8 +30,6 @@ public class ApplicationTest {
 
     @Test
     void shouldStart() {
-        await().untilAsserted(() -> {
-            assertThat(scheduledTasks.wasCalled()).isTrue();
-        });
+        await().untilAsserted(() -> assertThat(scheduledTasks.wasCalled()).isTrue());
     }
 }

File: micronaut/test/micronaut-jdbc/src/test/java/net/javacrumbs/micronaut/test/ApplicationTest.java
Patch:
@@ -30,8 +30,6 @@ public class ApplicationTest {
 
     @Test
     void shouldStart() {
-        await().untilAsserted(() -> {
-            assertThat(scheduledTasks.wasCalled()).isTrue();
-        });
+        await().untilAsserted(() -> assertThat(scheduledTasks.wasCalled()).isTrue());
     }
 }

File: providers/dynamodb/shedlock-provider-dynamodb/src/test/java/net/javacrumbs/shedlock/provider/dynamodb/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@
 @Testcontainers
 public class DynamoDBLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
     @Container
-    public static DynaliteContainer dynamoDB = new DynaliteContainer();
+    public static final DynaliteContainer dynamoDB = new DynaliteContainer();
 
     private static final String TABLE_NAME = "Shedlock";
     private static Table lockTable;

File: providers/dynamodb/shedlock-provider-dynamodb2/src/test/java/net/javacrumbs/shedlock/provider/dynamodb2/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -50,7 +50,7 @@
 @Testcontainers
 public class DynamoDBLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
     @Container
-    public static DynamoDbContainer dynamoDbContainer =
+    public static final DynamoDbContainer dynamoDbContainer =
         new DynamoDbContainer("quay.io/testcontainers/dynalite:v1.2.1-1")
             .withExposedPorts(4567);
 

File: providers/etcd/shedlock-provider-etcd-jetcd/src/test/java/net/javacrumbs/shedlock/provider/etcd/jetcd/EtcdLockProviderIntegrationTest.java
Patch:
@@ -34,7 +34,7 @@
 public class EtcdLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
 
     @RegisterExtension
-    static EtcdClusterExtension etcdCluster = new EtcdClusterExtension("it-cluster", 1);
+    static final EtcdClusterExtension etcdCluster = new EtcdClusterExtension("it-cluster", 1);
 
     private EtcdLockProvider lockProvider;
     private KV kvClient;

File: providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MultiTenancyLockProviderIntegrationTest.java
Patch:
@@ -108,6 +108,7 @@ private SampleLockProvider(JdbcTemplate jdbcTemplate1, JdbcTemplate jdbcTemplate
         }
 
 
+        @Override
         protected LockProvider createLockProvider(String tenantName) {
             if (TENANT_1.equals(tenantName)) {
                 return new JdbcTemplateLockProvider(builder()
@@ -122,6 +123,7 @@ protected LockProvider createLockProvider(String tenantName) {
             }
         }
 
+        @Override
         protected String getTenantName(LockConfiguration lockConfiguration) {
             // round robin
             // In reality this would use ThreadLocal to figure out the tenant.

File: providers/jdbc/shedlock-provider-jdbc/src/main/java/net/javacrumbs/shedlock/provider/jdbc/JdbcStorageAccessor.java
Patch:
@@ -34,6 +34,7 @@ class JdbcStorageAccessor extends AbstractJdbcStorageAccessor {
         this.dataSource = requireNonNull(dataSource, "dataSource can not be null");
     }
 
+    @Override
     protected <T> T executeCommand(
         String sql,
         SqlFunction<PreparedStatement, T> body,

File: providers/jdbc/shedlock-provider-jdbc/src/test/java/net/javacrumbs/shedlock/provider/jdbc/AbstractJdbcTest.java
Patch:
@@ -25,6 +25,7 @@ protected boolean useDbTime() {
         return false;
     }
 
+    @Override
     protected StorageBasedLockProvider getLockProvider() {
         return new JdbcLockProvider(testUtils.getDatasource());
     }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/AbstractContainerBasedDbConfig.java
Patch:
@@ -25,7 +25,7 @@ abstract class AbstractContainerBasedDbConfig<T extends JdbcDatabaseContainer<T>
 
     public AbstractContainerBasedDbConfig(T container) {
         this.container = container
-            .withLogConsumer(outputFrame -> logger.debug(outputFrame.getUtf8String()));;
+            .withLogConsumer(outputFrame -> logger.debug(outputFrame.getUtf8String()));
     }
 
     @Override
@@ -38,6 +38,7 @@ protected final void doShutdownDb() {
         container.stop();
     }
 
+    @Override
     public String getJdbcUrl() {
         return container.getJdbcUrl();
     }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/Db2ServerConfig.java
Patch:
@@ -37,6 +37,7 @@ protected void doShutdownDb() {
         db2.stop();
     }
 
+    @Override
     public String getJdbcUrl() {
         return db2.getJdbcUrl();
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/DbConfig.java
Patch:
@@ -16,10 +16,9 @@
 package net.javacrumbs.shedlock.test.support.jdbc;
 
 import javax.sql.DataSource;
-import java.io.IOException;
 
 public interface DbConfig {
-    void startDb() throws IOException;
+    void startDb();
 
     void shutdownDb();
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/H2Config.java
Patch:
@@ -17,6 +17,7 @@
 
 public class H2Config extends AbstractDbConfig {
 
+    @Override
     public String getJdbcUrl() {
         return "jdbc:h2:mem:test";
     }

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/HsqlConfig.java
Patch:
@@ -16,6 +16,7 @@
 package net.javacrumbs.shedlock.test.support.jdbc;
 
 public class HsqlConfig extends AbstractDbConfig {
+    @Override
     public String getJdbcUrl() {
         return "jdbc:hsqldb:mem:mymemdb";
     }

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/AopCleanupTest.java
Patch:
@@ -42,7 +42,7 @@ public void shouldCloseTaskExecutor() {
     @EnableScheduling
     @EnableSchedulerLock(defaultLockAtMostFor = "PT30S")
     static class Config {
-        private static LockProvider lockProvider = mock(LockProvider.class);
+        private static final LockProvider lockProvider = mock(LockProvider.class);
 
         @Bean
         public LockProvider lockProvider() {

File: providers/etcd/shedlock-provider-etcd-jetcd/src/main/java/net/javacrumbs/shedlock/provider/etcd/jetcd/EtcdLockProvider.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Optional;
 
 import static io.etcd.jetcd.options.GetOption.DEFAULT;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static net.javacrumbs.shedlock.support.Utils.getHostname;
 import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 
@@ -201,7 +202,7 @@ public void putWithLeaseId(String key, String value, Long leaseId) {
         }
 
         private ByteSequence toByteSequence(String key) {
-            return ByteSequence.from(key.getBytes());
+            return ByteSequence.from(key.getBytes(UTF_8));
         }
 
         private PutOption putOptionWithLeaseId(Long leaseId) {

File: providers/zookeeper/shedlock-provider-zookeeper-curator/src/main/java/net/javacrumbs/shedlock/provider/zookeeper/curator/ZookeeperCuratorLockProvider.java
Patch:
@@ -34,6 +34,7 @@
 import java.time.format.DateTimeParseException;
 import java.util.Optional;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Objects.requireNonNull;
 import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 
@@ -125,11 +126,11 @@ private boolean isLocked(byte[] data) {
     }
 
     private static byte[] serialize(Instant date) {
-        return toIsoString(date).getBytes();
+        return toIsoString(date).getBytes(UTF_8);
     }
 
     private static Instant parse(byte[] data) {
-        return Instant.parse(new String(data));
+        return Instant.parse(new String(data, UTF_8));
     }
 
     String getNodePath(String lockName) {

File: shedlock-test-support/src/main/java/net/javacrumbs/shedlock/test/support/AbstractExtensibleLockProviderIntegrationTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 public abstract class AbstractExtensibleLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
-    private final Duration originalLockDuration = Duration.ofMillis(2_000);
+    private final Duration originalLockDuration = Duration.ofSeconds(2);
 
     @Test
     public void shouldBeAbleToExtendLock() {

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.transaction.PlatformTransactionManager;
 import org.springframework.transaction.TransactionDefinition;
 import org.springframework.transaction.TransactionStatus;
+import org.springframework.transaction.TransactionSystemException;
 import org.springframework.transaction.support.TransactionCallbackWithoutResult;
 import org.springframework.transaction.support.TransactionTemplate;
 
@@ -68,7 +69,7 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
             });
         } catch (DuplicateKeyException | CannotSerializeTransactionException e) {
             return false;
-        } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException e) {
+        } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException | TransactionSystemException e) {
             logger.error("Unexpected exception", e);
             return false;
         }
@@ -84,7 +85,7 @@ public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
             });
         } catch (CannotSerializeTransactionException e) {
             return false;
-        } catch (DataIntegrityViolationException e) {
+        } catch (DataIntegrityViolationException | TransactionSystemException e) {
             logger.error("Unexpected exception", e);
             return false;
         }

File: providers/mongo/shedlock-provider-mongo-reactivestreams/src/test/java/net/javacrumbs/shedlock/provider/mongo/reactivestreams/ReactiveStreamsMongoLockProviderIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@
 import de.flapdoodle.embed.mongo.MongodExecutable;
 import de.flapdoodle.embed.mongo.MongodProcess;
 import de.flapdoodle.embed.mongo.MongodStarter;
-import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
+import de.flapdoodle.embed.mongo.config.MongodConfig;
 import de.flapdoodle.embed.mongo.distribution.Version;
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.test.support.AbstractExtensibleLockProviderIntegrationTest;
@@ -57,7 +57,7 @@ public class ReactiveStreamsMongoLockProviderIntegrationTest extends AbstractExt
 
     @BeforeAll
     public static void startMongo() throws IOException {
-        mongodExe = starter.prepare(new MongodConfigBuilder()
+        mongodExe = starter.prepare(MongodConfig.builder()
             .version(Version.Main.V3_6)
             .build());
         mongod = mongodExe.start();

File: providers/mongo/shedlock-provider-mongo/src/test/java/net/javacrumbs/shedlock/provider/mongo/MongoLockProviderIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@
 import de.flapdoodle.embed.mongo.MongodExecutable;
 import de.flapdoodle.embed.mongo.MongodProcess;
 import de.flapdoodle.embed.mongo.MongodStarter;
-import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
+import de.flapdoodle.embed.mongo.config.MongodConfig;
 import de.flapdoodle.embed.mongo.distribution.Version;
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.test.support.AbstractExtensibleLockProviderIntegrationTest;
@@ -56,7 +56,7 @@ public class MongoLockProviderIntegrationTest extends AbstractExtensibleLockProv
 
     @BeforeAll
     public static void startMongo() throws IOException {
-        mongodExe = starter.prepare(new MongodConfigBuilder()
+        mongodExe = starter.prepare(MongodConfig.builder()
             .version(Version.Main.V3_6)
             .build());
         mongod = mongodExe.start();

File: providers/etcd/shedlock-provider-etcd-jetcd/src/test/java/net/javacrumbs/shedlock/provider/etcd/jetcd/EtcdLockProviderIntegrationTest.java
Patch:
@@ -21,7 +21,6 @@
 import io.etcd.jetcd.test.EtcdClusterExtension;
 import net.javacrumbs.shedlock.core.LockProvider;
 import net.javacrumbs.shedlock.test.support.AbstractLockProviderIntegrationTest;
-import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -99,7 +98,6 @@ private void assertKeysFound(String lockName, int expected) {
         }
     }
 
-    @NotNull
     private ByteSequence buildKey(String lockName) {
         return ByteSequence.from(lockProvider.buildKey(lockName).getBytes());
     }

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/Db2ServerTimeStatementsSource.java
Patch:
@@ -8,7 +8,7 @@
 
 class Db2ServerTimeStatementsSource extends SqlStatementsSource {
     private final String now = "(CURRENT TIMESTAMP - CURRENT TIMEZONE)";
-    private final String lockAtMostFor = "ADD_SECONDS(" + now + ", :lockAtMostForSeconds)";
+    private final String lockAtMostFor = "("+ now + " + :lockAtMostForSeconds SECONDS)";
 
     Db2ServerTimeStatementsSource(JdbcTemplateLockProvider.Configuration configuration) {
         super(configuration);
@@ -26,7 +26,7 @@ public String getUpdateStatement() {
 
     @Override
     public String getUnlockStatement() {
-        String lockAtLeastFor = "ADD_SECONDS(" + lockedAt() + ", :lockAtLeastForSeconds)";
+        String lockAtLeastFor = "(" + lockedAt() + "+ :lockAtLeastForSeconds SECONDS)";
         return "UPDATE " + tableName() + " SET " + lockUntil() + " = CASE WHEN " + lockAtLeastFor + " > " + now + " THEN " + lockAtLeastFor + " ELSE " + now + " END WHERE " + name() + " = :name AND " + lockedBy() + " = :lockedBy";
     }
 

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/Db2ServerTimeStatementsSource.java
Patch:
@@ -26,7 +26,7 @@ public String getUpdateStatement() {
 
     @Override
     public String getUnlockStatement() {
-        String lockAtLeastFor = "ADD_SECONDS(" + lockedAt() + ", :lockAtLeastForSeconds)";
+        String lockAtLeastFor = "(" + lockedAt() + "+ :lockAtLeastForSeconds SECONDS)";
         return "UPDATE " + tableName() + " SET " + lockUntil() + " = CASE WHEN " + lockAtLeastFor + " > " + now + " THEN " + lockAtLeastFor + " ELSE " + now + " END WHERE " + name() + " = :name AND " + lockedBy() + " = :lockedBy";
     }
 

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/Db2ServerTimeStatementsSource.java
Patch:
@@ -8,7 +8,7 @@
 
 class Db2ServerTimeStatementsSource extends SqlStatementsSource {
     private final String now = "(CURRENT TIMESTAMP - CURRENT TIMEZONE)";
-    private final String lockAtMostFor = "ADD_SECONDS(" + now + ", :lockAtMostForSeconds)";
+    private final String lockAtMostFor = "("+ now + " + :lockAtMostForSeconds SECONDS)";
 
     Db2ServerTimeStatementsSource(JdbcTemplateLockProvider.Configuration configuration) {
         super(configuration);

File: shedlock-test-support/src/main/java/net/javacrumbs/shedlock/test/support/AbstractExtensibleLockProviderIntegrationTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 public abstract class AbstractExtensibleLockProviderIntegrationTest extends AbstractLockProviderIntegrationTest {
-    private final Duration originalLockDuration = Duration.ofMillis(2_000);
+    private final Duration originalLockDuration = Duration.ofMillis(3_000);
 
     @Test
     public void shouldBeAbleToExtendLock() {

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -68,7 +68,7 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
         } catch (DuplicateKeyException e) {
             return false;
         } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException e) {
-            logger.warn("Unexpected exception", e);
+            logger.error("Unexpected exception", e);
             return false;
         }
     }
@@ -82,7 +82,7 @@ public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
                 return updatedRows > 0;
             });
         } catch (DataIntegrityViolationException e) {
-            logger.warn("Unexpected exception", e);
+            logger.error("Unexpected exception", e);
             return false;
         }
     }

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -68,7 +68,7 @@ public boolean insertRecord(@NonNull LockConfiguration lockConfiguration) {
         } catch (DuplicateKeyException e) {
             return false;
         } catch (DataIntegrityViolationException | BadSqlGrammarException | UncategorizedSQLException e) {
-            logger.warn("Unexpected exception", e);
+            logger.error("Unexpected exception", e);
             return false;
         }
     }
@@ -82,7 +82,7 @@ public boolean updateRecord(@NonNull LockConfiguration lockConfiguration) {
                 return updatedRows > 0;
             });
         } catch (DataIntegrityViolationException e) {
-            logger.warn("Unexpected exception", e);
+            logger.error("Unexpected exception", e);
             return false;
         }
     }

File: providers/consul/shedlock-provider-consul/src/main/java/net/javacrumbs/shedlock/provider/consul/ConsulLockProvider.java
Patch:
@@ -100,6 +100,7 @@ private Optional<SimpleLock> tryLock(String sessionId, LockConfiguration lockCon
         if (isLockSuccessful) {
             return Optional.of(new ConsulSimpleLock(lockConfiguration, this, sessionId));
         }
+        destroy(sessionId);
         return Optional.empty();
     }
 

File: providers/consul/shedlock-provider-consul/src/main/java/net/javacrumbs/shedlock/provider/consul/ConsulLockProvider.java
Patch:
@@ -100,6 +100,7 @@ private Optional<SimpleLock> tryLock(String sessionId, LockConfiguration lockCon
         if (isLockSuccessful) {
             return Optional.of(new ConsulSimpleLock(lockConfiguration, this, sessionId));
         }
+        destroy(sessionId);
         return Optional.empty();
     }
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/AbstractJdbcLockProviderIntegrationTest.java
Patch:
@@ -42,9 +42,7 @@ public void initTestUtils() {
 
     protected abstract DbConfig getDbConfig();
 
-    protected boolean useDbTime() {
-        return false;
-    }
+    protected abstract boolean useDbTime();
 
     @AfterEach
     public void cleanup() {

File: providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MultiTenancyLockProviderIntegrationTest.java
Patch:
@@ -49,14 +49,14 @@ void shouldUseDifferDatabaseForEachTennant() {
 
         Optional<SimpleLock> lock1 = lockProvider.lock(LOCK_CONFIGURATION);
         assertThat(lock1).isNotEmpty();
-        assertThat(h2TestUtils.getLockedUntil(LOCK_NAME).toInstant()).isAfter(ClockProvider.now());
+        assertThat(h2TestUtils.getLockInfo(LOCK_NAME).getLockUntil()).isAfter(ClockProvider.now());
         assertThatThrownBy(() -> hsqlTestUtils.getLockedUntil(LOCK_NAME)).isInstanceOf(EmptyResultDataAccessException.class);
 
         lock1.get().unlock();
 
         Optional<SimpleLock> lock2 = lockProvider.lock(LOCK_CONFIGURATION);
         assertThat(lock2).isNotEmpty();
-        assertThat(hsqlTestUtils.getLockedUntil(LOCK_NAME).toInstant()).isAfter(ClockProvider.now());
+        assertThat(hsqlTestUtils.getLockInfo(LOCK_NAME).getLockUntil()).isAfter(ClockProvider.now());
         lock2.get().unlock();
     }
 

File: providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/ServerTimeTest.java
Patch:
@@ -35,7 +35,6 @@ default void lockUntilShouldBeInUtc() {
         time = Instant.now();
         getLockProvider().lock(new LockConfiguration(LOCK_NAME, Duration.ofSeconds(120), Duration.ZERO));
         assertThat(getTestUtils().getLockedUntil(LOCK_NAME).toLocalDateTime()).isBetween(atUtc(time.plusSeconds(110)), atUtc(time.plusSeconds(130)));
-
     }
 
     static LocalDateTime atUtc(Instant before) {

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/AbstractMariaDbJdbcLockProviderIntegrationTest.java
Patch:
@@ -23,12 +23,12 @@ public abstract class AbstractMariaDbJdbcLockProviderIntegrationTest extends Abs
     private static final MariaDbConfig dbConfig = new MariaDbConfig();
 
     @BeforeAll
-    public static void startMySql() {
+    public static void startDb() {
         dbConfig.startDb();
     }
 
     @AfterAll
-    public static void shutDownMysql() {
+    public static void shutDownDb() {
         dbConfig.shutdownDb();
     }
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/AbstractMySqlJdbcLockProviderIntegrationTest.java
Patch:
@@ -23,12 +23,12 @@ public abstract class AbstractMySqlJdbcLockProviderIntegrationTest extends Abstr
     private static final MySqlConfig dbConfig = new MySqlConfig();
 
     @BeforeAll
-    public static void startMySql() {
+    public static void startDb() {
         dbConfig.startDb();
     }
 
     @AfterAll
-    public static void shutDownMysql() {
+    public static void shutDownDb() {
         dbConfig.shutdownDb();
     }
 

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/DbConfig.java
Patch:
@@ -31,4 +31,6 @@ public interface DbConfig {
     default String getCreateTableStatement() {
         return "CREATE TABLE shedlock(name VARCHAR(64) NOT NULL, lock_until TIMESTAMP  NOT NULL, locked_at TIMESTAMP  NOT NULL, locked_by VARCHAR(255) NOT NULL, PRIMARY KEY (name))";
     }
+
+    String nowExpression();
 }

File: providers/mongo/shedlock-provider-mongo-reactive/src/main/java/net/javacrumbs/shedlock/provider/mongo/reactive/SingleLockableSubscriber.java
Patch:
@@ -65,7 +65,7 @@ void await() {
         try {
             latch.await(10, TimeUnit.SECONDS);
         } catch (InterruptedException e) {
-            // ignore
+            this.error = e;
         }
     }
 }

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/Db2ServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/H2ServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/HsqlServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/MsSqlServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " +  lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " +  lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/MySqlServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/OracleServerTimeStatementsSource.java
Patch:
@@ -24,7 +24,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/PostgresSqlServerTimeStatementsSource.java
Patch:
@@ -22,7 +22,7 @@ String getInsertStatement() {
 
     @NonNull
     private String updateClause() {
-        return " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + tableName() + "." + lockUntil() + " <= " + now;
+        return " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + tableName() + "." + name() + " = :name AND " + tableName() + "." + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MariaDbConfig.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.util.function.Consumer;
 
-class MariaDbConfig implements DbConfig {
+public final class MariaDbConfig implements DbConfig {
 
     private static final String TEST_SCHEMA_NAME = "shedlock_test";
     private static final Logger logger = LoggerFactory.getLogger(PostgresConfig.class);

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MySqlConfig.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.util.function.Consumer;
 
-class MySqlConfig implements DbConfig {
+public final class MySqlConfig implements DbConfig {
 
     private static final String TEST_SCHEMA_NAME = "shedlock_test";
     private static final Logger logger = LoggerFactory.getLogger(PostgresConfig.class);

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/Db2ServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/H2ServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/HsqlServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/MsSqlServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " +  lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " +  lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/MySqlServerTimeStatementsSource.java
Patch:
@@ -21,7 +21,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/OracleServerTimeStatementsSource.java
Patch:
@@ -24,7 +24,7 @@ String getInsertStatement() {
 
     @Override
     public String getUpdateStatement() {
-        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + lockUntil() + " <= " + now;
+        return "UPDATE " + tableName() + " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + name() + " = :name AND " + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/PostgresSqlServerTimeStatementsSource.java
Patch:
@@ -22,7 +22,7 @@ String getInsertStatement() {
 
     @NonNull
     private String updateClause() {
-        return " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + tableName() + "." + lockUntil() + " <= " + now;
+        return " SET " + lockUntil() + " = " + lockAtMostFor + ", " + lockedAt() + " = " + now + ", " + lockedBy() + " = :lockedBy WHERE " + tableName() + "." + name() + " = :name AND " + tableName() + "." + lockUntil() + " <= " + now;
     }
 
     @Override

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MariaDbConfig.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.util.function.Consumer;
 
-class MariaDbConfig implements DbConfig {
+public final class MariaDbConfig implements DbConfig {
 
     private static final String TEST_SCHEMA_NAME = "shedlock_test";
     private static final Logger logger = LoggerFactory.getLogger(PostgresConfig.class);

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MySqlConfig.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.util.function.Consumer;
 
-class MySqlConfig implements DbConfig {
+public final class MySqlConfig implements DbConfig {
 
     private static final String TEST_SCHEMA_NAME = "shedlock_test";
     private static final Logger logger = LoggerFactory.getLogger(PostgresConfig.class);

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/MySqlConfig.java
Patch:
@@ -62,7 +62,7 @@ public String getPassword() {
 
     @Override
     public String getCreateTableStatement() {
-        return "CREATE TABLE shedlock(name VARCHAR(64), lock_until TIMESTAMP(3), locked_at TIMESTAMP(3), locked_by VARCHAR(255), PRIMARY KEY (name))";
+        return "CREATE TABLE shedlock(name VARCHAR(64), lock_until TIMESTAMP(3), locked_at TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP(3), locked_by VARCHAR(255), PRIMARY KEY (name))";
     }
 
     private static class MyMySQLContainer extends MySQLContainer<MyMySQLContainer> {

File: providers/jdbc/shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/PostgresJdbcTemplateStorageAccessorTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
+import java.sql.Timestamp;
 import java.time.Duration;
 import java.time.Instant;
 
@@ -42,7 +43,7 @@ void shouldUpdateOnInsertAfterValidityOfPreviousEnded() throws InterruptedExcept
 
 
         accessor.insertRecord(new LockConfiguration("other", Duration.ofSeconds(5), Duration.ZERO));
-        Instant otherLockValidity = testUtils.getLockedUntil("other").toInstant();
+        Timestamp otherLockValidity = testUtils.getLockedUntil("other");
 
         assertThat(
             accessor.insertRecord(new LockConfiguration(MY_LOCK, Duration.ofMillis(10), Duration.ZERO))
@@ -66,7 +67,7 @@ void shouldNotUpdateOnInsertIfPreviousDidNotEnd() {
             accessor.insertRecord(new LockConfiguration(MY_LOCK, Duration.ofSeconds(10), Duration.ZERO))
         ).isEqualTo(true);
 
-        Instant originalLockValidity = testUtils.getLockedUntil(MY_LOCK).toInstant();
+        Timestamp originalLockValidity = testUtils.getLockedUntil(MY_LOCK);
 
         assertThat(
             accessor.insertRecord(new LockConfiguration(MY_LOCK, Duration.ofSeconds(10), Duration.ZERO))

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/JdbcTestUtils.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 import javax.sql.DataSource;
+import java.sql.Timestamp;
 import java.time.Instant;
 
 public final class JdbcTestUtils {
@@ -38,7 +39,7 @@ public JdbcTestUtils(DbConfig dbConfig) {
 
 
     public Instant getLockedUntil(String lockName) {
-        return jdbcTemplate.queryForObject("SELECT lock_until FROM shedlock WHERE name = ?", new Object[]{lockName}, Instant.class);
+        return jdbcTemplate.queryForObject("SELECT lock_until FROM shedlock WHERE name = ?", new Object[]{lockName}, Timestamp.class).toInstant();
     }
 
     public void clean() {

File: providers/dynamodb/shedlock-provider-dynamodb2/src/main/java/net/javacrumbs/shedlock/provider/dynamodb2/DynamoDBLockProvider.java
Patch:
@@ -112,7 +112,7 @@ public Optional<SimpleLock> lock(@NotNull LockConfiguration lockConfiguration) {
         attributeUpdates.put(":lockedBy", attr(hostname));
 
         UpdateItemRequest request = UpdateItemRequest.builder()
-                .tableName("jobs")
+                .tableName(tableName)
                 .key(key)
                 .updateExpression(OBTAIN_LOCK_QUERY)
                 .conditionExpression(OBTAIN_LOCK_CONDITION)

File: providers/couchbase/shedlock-provider-couchbase-javaclient/src/test/java/net/javacrumbs/shedlock/provider/couchbase/javaclient/CouchbaseLockProviderIntegrationTest.java
Patch:
@@ -80,7 +80,7 @@ protected StorageBasedLockProvider getLockProvider() {
     @Override
     public void assertUnlocked(String lockName) {
         JsonDocument lockDocument = bucket.get(lockName);
-        assertThat(parse((String) lockDocument.content().get(LOCK_UNTIL))).isBefore(now());
+        assertThat(parse((String) lockDocument.content().get(LOCK_UNTIL))).isBeforeOrEqualTo(now());
         assertThat(parse((String) lockDocument.content().get(LOCKED_AT))).isBefore(now());
         assertThat(lockDocument.content().get(LOCKED_BY)).asString().isNotEmpty();
     }

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/DefaultLockingTaskExecutor.java
Patch:
@@ -59,7 +59,7 @@ public void executeWithLock(@NotNull Task task, @NotNull LockConfiguration lockC
 
     @Override
     @NotNull
-    public TaskResult executeWithLock(@NotNull TaskWithResult task, @NotNull LockConfiguration lockConfig) throws Throwable {
+    public <T> TaskResult<T> executeWithLock(@NotNull TaskWithResult<T> task, @NotNull LockConfiguration lockConfig) throws Throwable {
         Optional<SimpleLock> lock = lockProvider.lock(lockConfig);
         String lockName = lockConfig.getName();
 

File: spring/shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/aop/MethodProxyScheduledLockAdvisor.java
Patch:
@@ -73,16 +73,16 @@ public Object invoke(MethodInvocation invocation) throws Throwable {
             }
 
             LockConfiguration lockConfiguration = lockConfigurationExtractor.getLockConfiguration(invocation.getThis(), invocation.getMethod()).get();
-            TaskResult result = lockingTaskExecutor.executeWithLock(invocation::proceed, lockConfiguration);
+            TaskResult<Object> result = lockingTaskExecutor.executeWithLock(invocation::proceed, lockConfiguration);
 
             if (Optional.class.equals(returnType)) {
                 return toOptional(result);
             } else {
                 return result.getResult();
             }
         }
-        
-        private static Object toOptional(TaskResult result) {
+
+        private static Object toOptional(TaskResult<Object> result) {
             if (result.wasExecuted()) {
                 return result.getResult();
             } else {

File: providers/jdbc/shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/AbstractJdbcLockProviderIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@ public void cleanup() {
     @Override
     protected void assertUnlocked(String lockName) {
         Instant lockedUntil = getLockedUntil(lockName);
-        assertThat(lockedUntil).isBefore(Instant.now());
+        assertThat(lockedUntil).isBeforeOrEqualTo(Instant.now());
     }
 
     private Instant getLockedUntil(String lockName) {

File: providers/cassandra/shedlock-provider-cassandra/src/test/java/net/javacrumbs/shedlock/provider/cassandra/CassandraLockProviderIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
  *
  * @see net.javacrumbs.shedlock.provider.cassandra.CassandraLockProvider
  */
-public class CassandraLockProvderIntegrationTest extends AbstractStorageBasedLockProviderIntegrationTest {
+public class CassandraLockProviderIntegrationTest extends AbstractStorageBasedLockProviderIntegrationTest {
 
     private CqlSession cqlSession;
 

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/LockAssert.java
Patch:
@@ -25,7 +25,7 @@
  * broken by Sleuth,.
  */
 public class LockAssert {
-    private static ThreadLocal<String> currentLockName = ThreadLocal.withInitial(() -> null);
+    private static final ThreadLocal<String> currentLockName = ThreadLocal.withInitial(() -> null);
 
     static void startLock(String name) {
         currentLockName.set(name);

File: shedlock-core/src/test/java/net/javacrumbs/shedlock/support/UtilsTest.java
Patch:
@@ -15,18 +15,18 @@
  */
 package net.javacrumbs.shedlock.support;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.time.Instant;
 
 import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 import static org.assertj.core.api.Assertions.assertThat;
 
 
-public class UtilsTest {
+class UtilsTest {
 
     @Test
-    public void testFormatDate() {
+    void testFormatDate() {
         assertThat(toIsoString(Instant.parse("2018-12-07T12:30:37Z"))).isEqualTo("2018-12-07T12:30:37.000Z");
         assertThat(toIsoString(Instant.parse("2018-12-07T12:30:37.81Z"))).isEqualTo("2018-12-07T12:30:37.810Z");
         assertThat(toIsoString(Instant.parse("2018-12-07T12:30:37.811Z"))).isEqualTo("2018-12-07T12:30:37.811Z");

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/SchedulerLock.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Marks locked method
  *
- * @deprecated This annotation has been replaced by {@link net.javacrumbs.shedlock.spring.annotation.SchedulerLock} I am really sorry to do such a step,
+ * @deprecated This annotation has been replaced by 'net.javacrumbs.shedlock.spring.annotation.SchedulerLock' I am really sorry to do such a step,
  * but this annotation is in wrong module and stands in way of non-spring integrations. This class will not be removed before 2022.
  */
 @Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})

File: spring/shedlock-springboot22-sleuth-test/src/main/java/net/javacrumbs/shedlock/test/boot/ScheduledTasks.java
Patch:
@@ -26,9 +26,9 @@
 @Component
 public class ScheduledTasks {
     @Scheduled(fixedRate = 1)
-    @SchedulerLock(name = "reportCurrentTime", lockAtLeastFor = "${lock.at.most.for}")
+    @SchedulerLock(name = "reportCurrentTime", lockAtMostFor = "${lock.at.most.for}")
     public void reportCurrentTime() {
         assertLocked();
         System.out.println(new Date());
     }
-}
\ No newline at end of file
+}

File: spring/shedlock-springboot22-sleuth-test/src/main/java/net/javacrumbs/shedlock/test/boot/Application.java
Patch:
@@ -27,7 +27,7 @@
 
 @SpringBootApplication
 @EnableScheduling
-@EnableSchedulerLock(defaultLockAtMostFor = "PT10M", interceptMode = EnableSchedulerLock.InterceptMode.PROXY_SCHEDULER)
+@EnableSchedulerLock(defaultLockAtMostFor = "PT10M")
 public class Application {
 
     public static void main(String[] args) {

File: spring/shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/annotation/EnableSchedulerLock.java
Patch:
@@ -48,7 +48,7 @@ enum InterceptMode {
      *
      * @see <a href="https://github.com/lukas-krecan/ShedLock#modes-of-spring-integration">Modes of Spring integration</a>
      */
-    InterceptMode interceptMode() default InterceptMode.PROXY_SCHEDULER;
+    InterceptMode interceptMode() default InterceptMode.PROXY_METHOD;
 
 
     /**

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/MethodProxyAopConfig.java
Patch:
@@ -26,12 +26,11 @@
 
 import java.io.IOException;
 
-import static net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock.InterceptMode.PROXY_METHOD;
 import static org.mockito.Mockito.mock;
 
 @Configuration
 @EnableScheduling
-@EnableSchedulerLock(interceptMode = PROXY_METHOD, defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}")
+@EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}")
 @PropertySource("test.properties")
 public class MethodProxyAopConfig {
 

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/SchedulerProxyCglibTest.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.util.concurrent.Executors;
 
+import static net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock.InterceptMode.PROXY_SCHEDULER;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
@@ -51,7 +52,7 @@ protected void assertRightSchedulerUsed() {
 
     @Configuration
     @EnableScheduling
-    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}", proxyTargetClass = true)
+    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}", proxyTargetClass = true, interceptMode = PROXY_SCHEDULER)
     @PropertySource("test.properties")
     static class SchedulerWrapperConfig {
 

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/SchedulerProxyDefaultSchedulerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 
+import static net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock.InterceptMode.PROXY_SCHEDULER;
 import static org.mockito.Mockito.mock;
 
 
@@ -46,7 +47,7 @@ protected void assertRightSchedulerUsed() {
 
     @Configuration
     @EnableScheduling
-    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}")
+    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}", interceptMode = PROXY_SCHEDULER)
     @PropertySource("test.properties")
     static class SchedulerWrapperConfig {
 

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/SchedulerProxyScheduledExecutorServiceSchedulerTest.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 
+import static net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock.InterceptMode.PROXY_SCHEDULER;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
@@ -46,7 +47,7 @@ protected void assertRightSchedulerUsed() {
 
     @Configuration
     @EnableScheduling
-    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}")
+    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}", interceptMode = PROXY_SCHEDULER)
     @PropertySource("test.properties")
     static class SchedulerWrapperConfig {
 

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/SchedulerProxyTest.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.util.concurrent.Executors;
 
+import static net.javacrumbs.shedlock.spring.annotation.EnableSchedulerLock.InterceptMode.PROXY_SCHEDULER;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
@@ -52,7 +53,7 @@ protected void assertRightSchedulerUsed() {
 
     @Configuration
     @EnableScheduling
-    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}")
+    @EnableSchedulerLock(defaultLockAtMostFor = "${default.lock_at_most_for}", defaultLockAtLeastFor = "${default.lock_at_least_for}", interceptMode = PROXY_SCHEDULER)
     @PropertySource("test.properties")
     static class SchedulerWrapperConfig {
 

File: spring/shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/aop/MethodProxyAopConfig.java
Patch:
@@ -40,7 +40,6 @@ public LockProvider lockProvider() {
         return mock(LockProvider.class);
     }
 
-
     @Bean
     public TestBean testBean() {
         return new TestBean();

File: spring/shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/internal/SpringLockConfigurationExtractor.java
Patch:
@@ -115,7 +115,7 @@ private TemporalAmount getValue(long valueFromAnnotation, String stringValueFrom
                 stringValueFromAnnotation = embeddedValueResolver.resolveStringValue(stringValueFromAnnotation);
             }
             try {
-                return Duration.of(Long.valueOf(stringValueFromAnnotation), MILLIS);
+                return Duration.of(Long.parseLong(stringValueFromAnnotation), MILLIS);
             } catch (NumberFormatException nfe) {
                 try {
                     return Duration.parse(stringValueFromAnnotation);

File: spring/shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/annotation/EnableSchedulerLock.java
Patch:
@@ -61,7 +61,7 @@ enum InterceptMode {
      * Since 3.0.0 use {@link #interceptMode()} to configure the intercept mode. Had to be renamed to make it compatible
      * with Spring AOP infrastructure. Sorry.
      *
-     * Indicate how caching advice should be applied.
+     * Indicate how advice should be applied.
      */
     AdviceMode mode() default AdviceMode.PROXY;
 

File: shedlock-core/src/test/java/net/javacrumbs/shedlock/core/ReentrantLockProviderTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.time.Instant;
 import java.util.Optional;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ScheduledFuture;
@@ -36,7 +37,7 @@ public class ReentrantLockProviderTest {
     private final LockProvider lockProvider = new ReentrantLockProvider();
     private final LockConfigurationExtractor lockConfigurationExtractor = mock(LockConfigurationExtractor.class);
     private final LockManager lockManager = new DefaultLockManager(lockProvider, lockConfigurationExtractor);
-    private final LockConfiguration configuration = mock(LockConfiguration.class);
+    private final LockConfiguration configuration = new LockConfiguration("test", Instant.now().plusSeconds(60));
 
     @Before
     public void configureMocks() {

File: providers/jdbc/shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -97,11 +97,11 @@ public boolean updateRecord(LockConfiguration lockConfiguration) {
     }
 
 
-    private void setTimestamp(PreparedStatement preparedStatement, int patameterIndex, Instant time) throws SQLException {
+    private void setTimestamp(PreparedStatement preparedStatement, int parameterIndex, Instant time) throws SQLException {
         if (timeZone == null) {
-            preparedStatement.setTimestamp(patameterIndex, Timestamp.from(time));
+            preparedStatement.setTimestamp(parameterIndex, Timestamp.from(time));
         } else {
-            preparedStatement.setTimestamp(patameterIndex, Timestamp.from(time), Calendar.getInstance(timeZone));
+            preparedStatement.setTimestamp(parameterIndex, Timestamp.from(time), Calendar.getInstance(timeZone));
         }
     }
 

File: spring/shedlock-springboot22-test/src/main/java/net/javacrumbs/shedlock/test/boot/Application.java
Patch:
@@ -22,14 +22,12 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.scheduling.annotation.EnableScheduling;
-import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
 
 import javax.sql.DataSource;
 
 @SpringBootApplication
 @EnableScheduling
 @EnableSchedulerLock(defaultLockAtMostFor = "PT10M")
-@EnableWebSocketMessageBroker
 public class Application {
 
     public static void main(String[] args) {

File: providers/dynamodb/shedlock-provider-dynamodb/src/test/java/net/javacrumbs/shedlock/provider/dynamodb/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -53,7 +53,7 @@ public class DynamoDBLockProviderIntegrationTest extends AbstractLockProviderInt
     @Before
     public void createLockProvider() {
         dynamodb = dynamodbFactory.amazonDynamoDB();
-        DynamoDBLockProvider.createLockTable(dynamodb, TABLE_NAME, new ProvisionedThroughput(1L, 1L));
+        DynamoDBUtils.createLockTable(dynamodb, TABLE_NAME, new ProvisionedThroughput(1L, 1L));
     }
 
     @After
@@ -63,7 +63,8 @@ public void deleteLockTable() {
 
     @Override
     protected LockProvider getLockProvider() {
-        return new DynamoDBLockProvider(dynamodb, TABLE_NAME);
+        Table table = new DynamoDB(dynamodb).getTable(TABLE_NAME);
+        return new DynamoDBLockProvider(table);
     }
 
     @Override

File: providers/dynamodb/shedlock-provider-dynamodb/src/test/java/net/javacrumbs/shedlock/provider/dynamodb/DynamoDBLockProviderIntegrationTest.java
Patch:
@@ -18,9 +18,7 @@
 import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
 import com.amazonaws.services.dynamodbv2.document.DynamoDB;
 import com.amazonaws.services.dynamodbv2.document.Item;
-import com.amazonaws.services.dynamodbv2.document.ScanFilter;
 import com.amazonaws.services.dynamodbv2.document.Table;
-import com.amazonaws.services.dynamodbv2.document.spec.ScanSpec;
 import com.amazonaws.services.dynamodbv2.local.embedded.DynamoDBEmbedded;
 import com.amazonaws.services.dynamodbv2.local.shared.access.AmazonDynamoDBLocal;
 import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;

File: providers/redis/shedlock-provider-redis-jedis/src/main/java/net/javacrumbs/shedlock/provider/redis/jedis/JedisLockProvider.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Optional;
 
 import static net.javacrumbs.shedlock.support.Utils.getHostname;
+import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 
 /**
  * Uses Redis's `SET resource-name anystring NX PX max-lock-ms-time` as locking mechanism.
@@ -124,6 +125,6 @@ static String buildKey(String lockName, String env) {
     }
 
     private static String buildValue() {
-        return String.format("ADDED:%s@%s", Instant.now().toString(), getHostname());
+        return String.format("ADDED:%s@%s", toIsoString(Instant.now()), getHostname());
     }
 }

File: providers/redis/shedlock-provider-redis-spring/src/main/java/net/javacrumbs/shedlock/provider/redis/spring/RedisLockProvider.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static net.javacrumbs.shedlock.support.Utils.getHostname;
+import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 import static org.springframework.data.redis.connection.RedisStringCommands.SetOption.SET_IF_ABSENT;
 
 /**
@@ -122,7 +123,7 @@ private Boolean tryToSetExpiration(String key, Expiration expiration, SetOption
         }
 
         private byte[] buildValue() {
-            return serialize(String.format("ADDED:%s@%s", Instant.now().toString(), getHostname()));
+            return serialize(String.format("ADDED:%s@%s", toIsoString(Instant.now()), getHostname()));
         }
 
         private byte[] serialize(String string) {

File: providers/redis/shedlock-provider-redis-jedis/src/main/java/net/javacrumbs/shedlock/provider/redis/jedis/JedisLockProvider.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Optional;
 
 import static net.javacrumbs.shedlock.support.Utils.getHostname;
+import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 
 /**
  * Uses Redis's `SET resource-name anystring NX PX max-lock-ms-time` as locking mechanism.
@@ -124,6 +125,6 @@ static String buildKey(String lockName, String env) {
     }
 
     private static String buildValue() {
-        return String.format("ADDED:%s@%s", Instant.now().toString(), getHostname());
+        return String.format("ADDED:%s@%s", toIsoString(Instant.now()), getHostname());
     }
 }

File: providers/redis/shedlock-provider-redis-spring/src/main/java/net/javacrumbs/shedlock/provider/redis/spring/RedisLockProvider.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static net.javacrumbs.shedlock.support.Utils.getHostname;
+import static net.javacrumbs.shedlock.support.Utils.toIsoString;
 import static org.springframework.data.redis.connection.RedisStringCommands.SetOption.SET_IF_ABSENT;
 
 /**
@@ -122,7 +123,7 @@ private Boolean tryToSetExpiration(String key, Expiration expiration, SetOption
         }
 
         private byte[] buildValue() {
-            return serialize(String.format("ADDED:%s@%s", Instant.now().toString(), getHostname()));
+            return serialize(String.format("ADDED:%s@%s", toIsoString(Instant.now()), getHostname()));
         }
 
         private byte[] serialize(String string) {

File: shedlock-test-support/src/main/java/net/javacrumbs/shedlock/test/support/AbstractLockProviderIntegrationTest.java
Patch:
@@ -101,10 +101,9 @@ public void shouldTimeout() throws InterruptedException {
     @Test
     public void shouldBeAbleToLockRightAfterUnlock() {
         LockConfiguration lockConfiguration = lockConfig(LOCK_NAME1);
-        LockProvider lockProvider = getLockProvider();
         for (int i = 0; i < 100; i++) {
-            Optional<SimpleLock> lock = lockProvider.lock(lockConfiguration);
-            assertThat(lockProvider.lock(lockConfiguration)).isEmpty();
+            Optional<SimpleLock> lock = getLockProvider().lock(lockConfiguration);
+            assertThat(getLockProvider().lock(lockConfiguration)).isEmpty();
             assertThat(lock).isNotEmpty();
             lock.get().unlock();
         }

File: spring/shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/DefaultScheduledLockConfigurationBuilder.java
Patch:
@@ -27,7 +27,7 @@
 import java.time.temporal.TemporalAmount;
 import java.util.concurrent.ScheduledExecutorService;
 
-import static net.javacrumbs.shedlock.spring.SpringLockConfigurationExtractor.DEFAULT_LOCK_AT_MOST_FOR;
+import static net.javacrumbs.shedlock.spring.internal.ScheduledMethodRunnableSpringLockConfigurationExtractor.DEFAULT_LOCK_AT_MOST_FOR;
 
 class DefaultScheduledLockConfigurationBuilder
     implements ScheduledLockConfigurationBuilder, ScheduledLockConfigurationBuilderWithoutTaskScheduler, ConfiguredScheduledLockConfigurationBuilder, ScheduledLockConfigurationBuilderWithoutDefaultLockAtMostFor {
@@ -39,7 +39,7 @@ class DefaultScheduledLockConfigurationBuilder
 
     private TemporalAmount defaultLockAtLeastFor = Duration.ZERO;
 
-    public DefaultScheduledLockConfigurationBuilder(LockProvider lockProvider) {
+    DefaultScheduledLockConfigurationBuilder(LockProvider lockProvider) {
         this.lockProvider = lockProvider;
     }
 

File: spring/shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/SpringLockableTaskSchedulerFactoryBean.java
Patch:
@@ -17,6 +17,7 @@
 
 import net.javacrumbs.shedlock.core.DefaultLockManager;
 import net.javacrumbs.shedlock.core.LockProvider;
+import net.javacrumbs.shedlock.spring.internal.ScheduledMethodRunnableSpringLockConfigurationExtractor;
 import org.springframework.beans.factory.config.AbstractFactoryBean;
 import org.springframework.context.EmbeddedValueResolverAware;
 import org.springframework.scheduling.TaskScheduler;
@@ -60,7 +61,7 @@ public Class<?> getObjectType() {
     protected LockableTaskScheduler createInstance() {
         return new LockableTaskScheduler(
             taskScheduler,
-            new DefaultLockManager(lockProvider, new SpringLockConfigurationExtractor(defaultLockAtMostFor, defaultLockAtLeastFor, embeddedValueResolver))
+            new DefaultLockManager(lockProvider, new ScheduledMethodRunnableSpringLockConfigurationExtractor(defaultLockAtMostFor, defaultLockAtLeastFor, embeddedValueResolver))
         );
     }
 

File: spring/shedlock-springboot-test/src/main/java/net/javacrumbs/shedlock/test/boot/ScheduledTasks.java
Patch:
@@ -24,5 +24,6 @@ public class ScheduledTasks {
     @Scheduled(fixedRate = 1)
     @SchedulerLock(name = "reportCurrentTime", lockAtLeastForString = "${lock.at.most.for}")
     public void reportCurrentTime() {
+
     }
 }
\ No newline at end of file

File: spring/shedlock-springboot-test/src/test/java/net/javacrumbs/shedlock/test/boot/IntegrationTest.java
Patch:
@@ -43,7 +43,7 @@ public class IntegrationTest {
     private LockProvider lockProvider;
 
     @Test
-    public void testScheduler() throws InterruptedException {
+    public void testScheduler() {
         waitForScheduler();
         ArgumentCaptor<LockConfiguration> configCaptor = ArgumentCaptor.forClass(LockConfiguration.class);
         verify(lockProvider, atLeastOnce()).lock(configCaptor.capture());

File: providers/redis/shedlock-provider-redis-jedis/src/main/java/net/javacrumbs/shedlock/provider/redis/jedis/JedisLockProvider.java
Patch:
@@ -54,7 +54,7 @@ public JedisLockProvider(Pool<Jedis> jedisPool) {
       * Creates JedisLockProvider
       * @param jedisPool Jedis connection pool
       * @param environment environment is part of the key and thus makes sure there is not key conflict between
-      *        multiple ShedLock instances runing on the same Redis
+      *        multiple ShedLock instances running on the same Redis
       */
     public JedisLockProvider(Pool<Jedis> jedisPool, String environment) {
         this.jedisPool = jedisPool;

File: providers/redis/shedlock-provider-redis-spring/src/main/java/net/javacrumbs/shedlock/provider/redis/spring/RedisLockProvider.java
Patch:
@@ -53,7 +53,7 @@ public RedisLockProvider(RedisConnectionFactory redisConn) {
      *
      * @param redisConn   RedisConnectionFactory
      * @param environment environment is part of the key and thus makes sure there is not key conflict between
-     *                    multiple ShedLock instances runing on the same Redis
+     *                    multiple ShedLock instances running on the same Redis
      */
     public RedisLockProvider(RedisConnectionFactory redisConn, String environment) {
         this.redisTemplate = new ShedlockRedisTemplate(redisConn);

File: providers/redis/shedlock-provider-redis-spring/src/main/java/net/javacrumbs/shedlock/provider/redis/spring/RedisLockProvider.java
Patch:
@@ -125,8 +125,8 @@ private ShedlockRedisTemplate(RedisConnectionFactory connectionFactory) {
             super(connectionFactory);
         }
 
-        private Boolean tryToSetExpiration(String key, Expiration expiration, SetOption setIfAbsent) {
-            return execute(connection -> connection.set(serialize(key), buildValue(), expiration, setIfAbsent), false);
+        private Boolean tryToSetExpiration(String key, Expiration expiration, SetOption option) {
+            return execute(connection -> connection.set(serialize(key), buildValue(), expiration, option), false);
         }
 
         private byte[] buildValue() {

File: shedlock-springboot-test/src/main/java/net/javacrumbs/shedlock/test/boot/Application.java
Patch:
@@ -30,7 +30,6 @@
 
 import javax.sql.DataSource;
 import java.time.Duration;
-import java.util.concurrent.ScheduledExecutorService;
 
 @SpringBootApplication
 @EnableScheduling
@@ -41,10 +40,10 @@ public static void main(String[] args) throws Exception {
     }
 
     @Bean
-    public ScheduledLockConfiguration taskScheduler(ScheduledExecutorService executorService, LockProvider lockProvider) {
+    public ScheduledLockConfiguration taskScheduler(LockProvider lockProvider) {
         return ScheduledLockConfigurationBuilder
                 .withLockProvider(lockProvider)
-                .withExecutorService(executorService)
+                .withPoolSize(10)
                 .withDefaultLockAtMostFor(Duration.ofMinutes(10))
                 .build();
     }

File: shedlock-springboot-test/src/main/java/net/javacrumbs/shedlock/test/boot/Application.java
Patch:
@@ -30,6 +30,7 @@
 
 import javax.sql.DataSource;
 import java.time.Duration;
+import java.util.concurrent.ScheduledExecutorService;
 
 @SpringBootApplication
 @EnableScheduling
@@ -40,10 +41,10 @@ public static void main(String[] args) throws Exception {
     }
 
     @Bean
-    public ScheduledLockConfiguration taskScheduler(LockProvider lockProvider) {
+    public ScheduledLockConfiguration taskScheduler(ScheduledExecutorService executorService, LockProvider lockProvider) {
         return ScheduledLockConfigurationBuilder
                 .withLockProvider(lockProvider)
-                .withPoolSize(10)
+                .withExecutorService(executorService)
                 .withDefaultLockAtMostFor(Duration.ofMinutes(10))
                 .build();
     }

File: shedlock-springboot-test/src/test/java/net/javacrumbs/shedlock/test/boot/IntegrationTest.java
Patch:
@@ -30,7 +30,7 @@
 
 import static java.lang.Thread.sleep;
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;

File: shedlock-core/src/test/java/net/javacrumbs/shedlock/core/DefaultLockManagerTest.java
Patch:
@@ -30,7 +30,7 @@
 
 public class DefaultLockManagerTest {
 
-    public static final LockConfiguration LOCK_CONFIGURATION = new LockConfiguration("name", Instant.now());
+    public static final LockConfiguration LOCK_CONFIGURATION = new LockConfiguration("name", Instant.now().plusSeconds(10));
     private final LockProvider lockProvider = mock(LockProvider.class);
     private final LockConfigurationExtractor lockConfigurationExtractor = mock(LockConfigurationExtractor.class);
     private final Runnable task = mock(Runnable.class);

File: shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/DefaultScheduledLockConfigurationBuilder.java
Patch:
@@ -76,7 +76,7 @@ public ConfiguredScheduledLockConfigurationBuilder withDefaultLockAtMostFor(Temp
     }
 
     @Override
-    public ScheduledLockConfigurationBuilder withDefaultLockAtLeastFor(TemporalAmount defaultLockAtLeastFor) {
+    public ConfiguredScheduledLockConfigurationBuilder withDefaultLockAtLeastFor(TemporalAmount defaultLockAtLeastFor) {
         this.defaultLockAtLeastFor = defaultLockAtLeastFor;
         return this;
     }

File: shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/ScheduledLockConfigurationBuilder.java
Patch:
@@ -76,7 +76,7 @@ interface ConfiguredScheduledLockConfigurationBuilder {
         /**
          * Every lock is hold at least for given amount of time.
          */
-        ScheduledLockConfigurationBuilder withDefaultLockAtLeastFor(TemporalAmount defaultLockAtLeastFor);
+        ConfiguredScheduledLockConfigurationBuilder withDefaultLockAtLeastFor(TemporalAmount defaultLockAtLeastFor);
 
         /**
          * Builds the configuration

File: shedlock-provider-hazelcast/src/test/java/net/javacrumbs/shedlock/provider/hazelcast/HazelcastLockProviderIntegrationTest.java
Patch:
@@ -50,7 +50,7 @@ protected void assertUnlocked(final String lockName) {
     private boolean isUnlocked(final String lockName) {
         final Instant now = Instant.now();
         final HazelcastLock lock = lockProvider.getLock(lockName);
-        return lockProvider.isUnlocked(lock) || lockProvider.isExpired(lock, now) || lockProvider.isLockedByUnavailableMemberOfCluster(lock);
+        return lock == null;
     }
 
     @Override

File: shedlock-provider-hazelcast/src/main/java/net/javacrumbs/shedlock/provider/hazelcast/HazelcastLockProvider.java
Patch:
@@ -19,7 +19,7 @@
  * Below, the mechanims :
  * - The Lock, an instance of {@link HazelcastLock}, is obtained / created when :
  * - the lock is not not already locked by other process (lock - referenced by its name - is not present in the Hazelcast locks store OR unlockable)
- * - the lock is expired : {@link Instant#now()} > {@link HazelcastLock#unlockTime} where unlockTime have by default the same value of {@link HazelcastLock#lockAtMostUntil}
+ * - the lock is expired : {@link Instant#now()} &gt; {@link HazelcastLock#unlockTime} where unlockTime have by default the same value of {@link HazelcastLock#lockAtMostUntil}
  * and can have the value of {@link HazelcastLock#lockAtLeastUntil} if unlock action is used
  * - expired object is removed
  * - the lock is owned by not available member of Hazelcast cluster member

File: shedlock-spring/src/main/java/net/javacrumbs/shedlock/spring/ScheduledLockConfigurationBuilder.java
Patch:
@@ -27,7 +27,7 @@
  * <p>
  * * <pre>
  * {@code
- *   @Bean
+ *   {@literal @}Bean
  *   public ScheduledLockConfiguration taskScheduler(LockProvider lockProvider) {
  *       return ScheduledLockConfigurationBuilder
  *           .withLockProvider(lockProvider)

File: shedlock-provider-jedis/src/test/java/net/javacrumbs/shedlock/provider/jedis/JedisLockProviderIntegrationTest.java
Patch:
@@ -82,14 +82,14 @@ protected void assertLocked(String lockName) {
 
     @Override
     public void shouldTimeout() throws InterruptedException {
-        LockConfiguration configWithShortTimeout = lockConfig(LOCK_NAME1, 2, Duration.ZERO);
+        LockConfiguration configWithShortTimeout = lockConfig(LOCK_NAME1, Duration.ofMillis(2), Duration.ZERO);
         Optional<SimpleLock> lock1 = getLockProvider().lock(configWithShortTimeout);
         assertThat(lock1).isNotEmpty();
 
         sleep(5);
 
         // Get new config with updated timeout
-        configWithShortTimeout = lockConfig(LOCK_NAME1, 2, Duration.ZERO);
+        configWithShortTimeout = lockConfig(LOCK_NAME1, Duration.ofMillis(2), Duration.ZERO);
         assertUnlocked(configWithShortTimeout.getName());
     }
 }
\ No newline at end of file

File: shedlock-provider-jedis/src/main/java/net/javacrumbs/shedlock/provider/jedis/JedisLockProvider.java
Patch:
@@ -75,7 +75,7 @@ long getDifference(LockConfiguration lockConfiguration) {
 
         long difference = -1;
         if (mostDiff > 0 && leastDiff > 0) {
-            difference = Math.min(mostDiff, leastDiff);
+            difference = Math.max(mostDiff, leastDiff);
         } else if (mostDiff > 0 && leastDiff <= 0) {
             difference = mostDiff;
         } else if (mostDiff <= 0 && leastDiff > 0) {

File: shedlock-test-support-jdbc/src/main/java/net/javacrumbs/shedlock/test/support/jdbc/TransactionalFuzzTester.java
Patch:
@@ -13,9 +13,9 @@ public class TransactionalFuzzTester {
     public static void fuzzTestShouldWorkWithTransaction(LockProvider lockProvider, DataSource dataSource) throws ExecutionException, InterruptedException {
         new FuzzTester(lockProvider) {
             @Override
-            protected Void task() {
+            protected Void task(int iterations) {
                 TransactionTemplate transactionTemplate = new TransactionTemplate(new DataSourceTransactionManager(dataSource));
-                return transactionTemplate.execute(status -> super.task());
+                return transactionTemplate.execute(status -> super.task(iterations));
             }
 
             @Override

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/core/SchedulerLock.java
Patch:
@@ -30,9 +30,10 @@
 
     /**
      * How long (in ms) the lock should be kept in case the machine which obtained the lock died before releasing it.
-     * This is just a fallback, under normal circumstances the lock is released as soon the tasks finishes.
+     * This is just a fallback, under normal circumstances the lock is released as soon the tasks finishes. Negative
+     * value means default (1 hour)
      *
      * Ignored when using ZooKeeper and other lock providers which are able to detect dead node.
      */
-    long lockAtMostFor() default 60 * 60 * 1000;
+    long lockAtMostFor() default -1;
 }

File: shedlock-spring/src/test/java/net/javacrumbs/shedlock/spring/SpringLockableTaskSchedulerFactoryTest.java
Patch:
@@ -18,10 +18,12 @@
 import net.javacrumbs.shedlock.core.LockProvider;
 import org.junit.Test;
 
+import java.time.Duration;
 import java.util.Date;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
+import static java.time.temporal.ChronoUnit.MINUTES;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.ArgumentMatchers.eq;
@@ -37,7 +39,7 @@ public class SpringLockableTaskSchedulerFactoryTest {
     @Test
     public void shouldWrapScheduledExecutorService() {
         ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class);
-        LockableTaskScheduler lockableTaskScheduler = SpringLockableTaskSchedulerFactory.newLockableTaskScheduler(scheduledExecutorService, lockProvider);
+        LockableTaskScheduler lockableTaskScheduler = SpringLockableTaskSchedulerFactory.newLockableTaskScheduler(scheduledExecutorService, lockProvider, Duration.of(10, MINUTES));
         lockableTaskScheduler.schedule(task, new Date());
         verify(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), eq(TimeUnit.MILLISECONDS));
     }

File: shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateStorageAccessor.java
Patch:
@@ -17,7 +17,7 @@
 
 import net.javacrumbs.shedlock.core.LockConfiguration;
 import net.javacrumbs.shedlock.support.AbstractStorageAccessor;
-import org.springframework.dao.DuplicateKeyException;
+import org.springframework.dao.DataIntegrityViolationException;
 import org.springframework.jdbc.core.namedparam.NamedParameterJdbcOperations;
 
 import java.util.Date;
@@ -44,8 +44,9 @@ public boolean insertRecord(LockConfiguration lockConfiguration) {
             if (insertedRows > 0) {
                 return true;
             }
-        } catch (DuplicateKeyException e) {
+        } catch (DataIntegrityViolationException e) {
             // lock record already exists
+            // DuplicateKeyException is not enough for Vertica
         }
         return false;
     }

File: shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/HsqlJdbcTemplateLockProviderIntegrationTest.java
Patch:
@@ -22,6 +22,6 @@ public class HsqlJdbcTemplateLockProviderIntegrationTest extends AbstractHsqlJdb
 
     @Override
     protected LockProvider getLockProvider() {
-        return new JdbcTemplateLockProvider(testUtils.getDatasource(), "shedlock");
+        return new JdbcTemplateLockProvider(testUtils.getDatasource());
     }
 }
\ No newline at end of file

File: shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MySqlJdbcTemplateLockProviderIntegrationTest.java
Patch:
@@ -21,6 +21,6 @@
 public class MySqlJdbcTemplateLockProviderIntegrationTest extends AbstractMySqlJdbcLockProviderIntegrationTest {
     @Override
     protected LockProvider getLockProvider() {
-        return new JdbcTemplateLockProvider(testUtils.getDatasource(), "shedlock");
+        return new JdbcTemplateLockProvider(testUtils.getDatasource());
     }
 }
\ No newline at end of file

File: shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/PostgresJdbcTemplateLockProviderIntegrationTest.java
Patch:
@@ -21,6 +21,6 @@
 public class PostgresJdbcTemplateLockProviderIntegrationTest extends AbstractPostgresJdbcLockProviderIntegrationTest {
     @Override
     protected LockProvider getLockProvider() {
-        return new JdbcTemplateLockProvider(testUtils.getDatasource(), "shedlock");
+        return new JdbcTemplateLockProvider(testUtils.getDatasource());
     }
 }
\ No newline at end of file

File: shedlock-provider-jdbc/src/main/java/net/javacrumbs/shedlock/provider/jdbc/JdbcLockProvider.java
Patch:
@@ -42,6 +42,9 @@
  * </ol>
  */
 public class JdbcLockProvider extends StorageBasedLockProvider {
+    public JdbcLockProvider(DataSource datasource) {
+        this(datasource, "shedlock");
+    }
     public JdbcLockProvider(DataSource datasource, String tableName) {
         super(new JdbcStorageAccessor(datasource, tableName));
     }

File: shedlock-provider-jdbc/src/test/java/net/javacrumbs/shedlock/provider/jdbc/HsqlJdbcLockProviderIntegrationTest.java
Patch:
@@ -22,6 +22,6 @@ public class HsqlJdbcLockProviderIntegrationTest extends AbstractHsqlJdbcLockPro
 
     @Override
     protected LockProvider getLockProvider() {
-        return new JdbcLockProvider(testUtils.getDatasource(), "shedlock");
+        return new JdbcLockProvider(testUtils.getDatasource());
     }
 }
\ No newline at end of file

File: shedlock-provider-jdbc/src/test/java/net/javacrumbs/shedlock/provider/jdbc/MySqlJdbcLockProviderIntegrationTest.java
Patch:
@@ -21,6 +21,6 @@
 public class MySqlJdbcLockProviderIntegrationTest extends AbstractMySqlJdbcLockProviderIntegrationTest {
     @Override
     protected LockProvider getLockProvider() {
-        return new JdbcLockProvider(testUtils.getDatasource(), "shedlock");
+        return new JdbcLockProvider(testUtils.getDatasource());
     }
 }
\ No newline at end of file

File: shedlock-provider-jdbc/src/test/java/net/javacrumbs/shedlock/provider/jdbc/PostgresJdbcLockProviderIntegrationTest.java
Patch:
@@ -21,6 +21,6 @@
 public class PostgresJdbcLockProviderIntegrationTest extends AbstractPostgresJdbcLockProviderIntegrationTest {
     @Override
     protected LockProvider getLockProvider() {
-        return new JdbcLockProvider(testUtils.getDatasource(), "shedlock");
+        return new JdbcLockProvider(testUtils.getDatasource());
     }
 }
\ No newline at end of file

File: shedlock-provider-jdbc-template/src/test/java/net/javacrumbs/shedlock/provider/jdbctemplate/MySqlConfig.java
Patch:
@@ -27,8 +27,8 @@
 class MySqlConfig implements DbConfig {
 
     private static final String TEST_SCHEMA_NAME = "shedlock_test";
-    public static final String USERNAME = "SA";
-    public static final String PASSWORD = "";
+    private static final String USERNAME = "SA";
+    private static final String PASSWORD = "";
     private static SchemaConfig schemaConfig = aSchemaConfig(TEST_SCHEMA_NAME).build();
     private EmbeddedMysql mysqld;
 

File: shedlock-test-support/src/main/java/net/javacrumbs/shedlock/test/support/AbstractLockProviderIntegrationTest.java
Patch:
@@ -90,7 +90,7 @@ public void shouldBeAbleToLockRightAfterUnlock() {
     }
 
     @Test
-    public void fuzzTestShuldPass() throws ExecutionException, InterruptedException {
+    public void fuzzTestShouldPass() throws ExecutionException, InterruptedException {
         new FuzzTester(getLockProvider()).doFuzzTest();
     }
 

File: shedlock-provider-mongo/src/test/java/net/javacrumbs/shedlock/provider/mongo/MongoLockProviderIntegrationTest.java
Patch:
@@ -42,16 +42,16 @@ protected LockProvider getLockProvider() {
     @Override
     protected void assertUnlocked(String lockName) {
         Document lockDocument = getLockDocument(lockName);
-        assertThat((Date) lockDocument.get(LOCK_UNTIL)).isBefore(new Date());
-        assertThat((Date) lockDocument.get(LOCKED_AT)).isBefore(new Date());
+        assertThat((Date) lockDocument.get(LOCK_UNTIL)).isBeforeOrEqualsTo(new Date());
+        assertThat((Date) lockDocument.get(LOCKED_AT)).isBeforeOrEqualsTo(new Date());
         assertThat((String) lockDocument.get(LOCKED_BY)).isNotEmpty();
     }
 
     @Override
     protected void assertLocked(String lockName) {
         Document lockDocument = getLockDocument(lockName);
         assertThat((Date) lockDocument.get(LOCK_UNTIL)).isAfter(new Date());
-        assertThat((Date) lockDocument.get(LOCKED_AT)).isBefore(new Date());
+        assertThat((Date) lockDocument.get(LOCKED_AT)).isBeforeOrEqualsTo(new Date());
         assertThat((String) lockDocument.get(LOCKED_BY)).isNotEmpty();
     }
 

File: shedlock-test-support/src/main/java/net/javacrumbs/shedlock/test/support/FuzzTester.java
Patch:
@@ -38,7 +38,7 @@
  */
 class FuzzTester {
 
-    private static final int THREADS = 4;
+    private static final int THREADS = 8;
     private static final int ITERATIONS = 100;
 
     private final LockProvider lockProvider;

File: shedlock-core/src/main/java/net/javacrumbs/shedlock/support/StorageBasedLockProvider.java
Patch:
@@ -34,7 +34,7 @@
  * has been inserted, returns lock.
  * </li>
  * <li>
- * We will try to update lock record using filter ID == name AND lock_until <= now
+ * We will try to update lock record using filter ID == name AND lock_until &lt;= now
  * </li>
  * <li>
  * If the update succeeded (1 updated row/document), we have the lock. If the update failed (0 updated documents) somebody else holds the lock

File: shedlock-provider-jdbc-template/src/main/java/net/javacrumbs/shedlock/provider/jdbctemplate/JdbcTemplateLockProvider.java
Patch:
@@ -33,7 +33,7 @@
  * </li>
  * <li>
  * If the insert failed due to duplicate key or we have skipped the insertion, we will try to update lock record using
- * UPDATE tableName SET lock_until = :lockUntil WHERE name = :lockName AND lock_until <= :now
+ * UPDATE tableName SET lock_until = :lockUntil WHERE name = :lockName AND lock_until &lt;= :now
  * </li>
  * <li>
  * If the update succeeded (1 updated row), we have the lock. If the update failed (0 updated rows) somebody else holds the lock

File: shedlock-provider-mongo/src/main/java/net/javacrumbs/shedlock/provider/mongo/MongoLockProvider.java
Patch:
@@ -43,7 +43,7 @@
  * has been inserted, returns lock.
  * </li>
  * <li>
- * We will try to update lock record using filter _id == name AND lock_until <= now
+ * We will try to update lock record using filter _id == name AND lock_until &lt;= now
  * </li>
  * <li>
  * If the update succeeded (1 updated document), we have the lock. If the update failed (0 updated documents) somebody else holds the lock

File: shedlock-core/src/test/java/net/javacrumbs/shedlock/core/support/LockRecordRegistryTest.java
Patch:
@@ -11,7 +11,7 @@ public class LockRecordRegistryTest {
 
     @Test
     public void unusedKeysShouldBeGarbageCollected() {
-        int records = 100_000;
+        int records = 1_000_000;
         for (int i = 0; i < records; i++) {
             lockRecordRegistry.addLockRecord(UUID.randomUUID().toString());
         }

