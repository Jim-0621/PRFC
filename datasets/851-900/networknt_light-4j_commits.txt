File: unified-security/src/main/java/com/networknt/security/AbstractJwtVerifyHandler.java
Patch:
@@ -119,7 +119,7 @@ public Status handleJwt(HttpServerExchange exchange, String pathPrefix, String r
 
                     String clientId = claims.getStringClaimValue(Constants.CLIENT_ID_STRING);
                     String userId = claims.getStringClaimValue(Constants.USER_ID_STRING);
-                    String email = claims.getStringClaimValue(Constants.EMAIL);
+                    String email = claims.getStringClaimValue(Constants.EML);
                     String host = claims.getStringClaimValue(Constants.HOST);
                     String issuer = claims.getStringClaimValue(Constants.ISS);
                     // try to get the cid as some OAuth tokens name it as cid like Okta.

File: token-limit/src/main/java/com/networknt/token/limit/TokenLimitHandler.java
Patch:
@@ -41,7 +41,7 @@ public class TokenLimitHandler implements MiddlewareHandler {
     static final String AUTHORIZATION_CODE = "authorization_code";
     static final String CLIENT_ID = "client_id";
     static final String CLIENT_SECRET = "client_secret";
-    static final String SCOPE = "scope";    
+    static final String SCOPE = "scope";
     static final String CODE = "code";
     static final String TOKEN_LIMIT_ERROR = "ERR10091";
 

File: token-limit/src/test/java/com/networknt/token/limit/TokenLimitHandlerTest.java
Patch:
@@ -77,7 +77,7 @@ public String callNonLegacyClient() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         SimpleConnectionHolder.ConnectionToken connectionToken = null;
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
-        
+
         try {
             if(enableHttps) {
                 connectionToken = client.borrow(new URI(url), Http2Client.WORKER, client.getDefaultXnioSsl(), Http2Client.BUFFER_POOL, enableHttp2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY);

File: http-string/src/main/java/com/networknt/httpstring/AttachmentConstants.java
Patch:
@@ -30,4 +30,5 @@ public class AttachmentConstants {
     public static final AttachmentKey<String> DOWNSTREAM_METRICS_NAME = AttachmentKey.create(String.class);
     public static final AttachmentKey<Long> DOWNSTREAM_METRICS_START = AttachmentKey.create(Long.class);
     public static final AttachmentKey<Object> METRICS_HANDLER = AttachmentKey.create(Object.class);
+    public static final AttachmentKey<CacheTask> RESPONSE_CACHE = AttachmentKey.create(CacheTask.class);
 }

File: response-transformer/src/test/java/com/networknt/restrans/ResponseTransformerInterceptorTest.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 
+@Ignore
 public class ResponseTransformerInterceptorTest {
     static final Logger logger = LoggerFactory.getLogger(ResponseTransformerInterceptorTest.class);
 

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class RequestTransformerInterceptor implements RequestInterceptor {
     static final Logger logger = LoggerFactory.getLogger(RequestTransformerInterceptor.class);
-    static final String REQUEST_TRANSFORM = "request-transform";
+    static final String REQUEST_TRANSFORM = "req-tra";
     static final String GENERIC_EXCEPTION = "ERR10014";
 
     private final RequestTransformerConfig config;

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -50,12 +50,14 @@ public class Constants {
     public static final String ATT = "att";
     public static final String POS = "pos";
     public static final String GRP = "grp";
+    public static final String ROLE = "role";
     public static final String HOST = "host";
     public static final String EML = "eml";
     public static final String EMAIL = "email";
     public static final String GROUPS = "groups";
     public static final String POSITIONS = "positions";
     public static final String ATTRIBUTES = "attributes";
+    public static final String USERS = "users";
 
     // Swagger 2.0 operation header name
     public static final String SWAGGER_OPERATION_STRING = "swagger_operation";
@@ -77,6 +79,7 @@ public class Constants {
     public static final String STACK_TRACE = "StackTrace";
 
     // JWT claims for fine-grained authorization in business context.
+    public static final String AUDIT_INFO = "auditInfo";
     // The key for the subject token claims in auditInfo after security handler
     // This token is passed in from Authorization header
     public static final String SUBJECT_CLAIMS = "subject_claims";

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -97,9 +97,9 @@ protected void pathPrefixService(HttpServerExchange exchange) throws Exception {
             AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, serviceEntry[0] + "@" + exchange.getRequestMethod().toString().toLowerCase());
         } else {
             if (logger.isTraceEnabled())
-                logger.trace("serviceEntry is null and endpoint is set to = '{}@{}'", Constants.UNKOWN_STRING, exchange.getRequestMethod().toString().toLowerCase());
+                logger.trace("serviceEntry is null and endpoint is set to = '{}@{}'", Constants.UNKNOWN, exchange.getRequestMethod().toString().toLowerCase());
             // at this moment, we don't have a way to reliably determine the endpoint.
-            AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, Constants.UNKOWN_STRING + "@" + exchange.getRequestMethod().toString().toLowerCase());
+            AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, Constants.UNKNOWN + "@" + exchange.getRequestMethod().toString().toLowerCase());
         }
     }
 

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java
Patch:
@@ -59,9 +59,9 @@ protected void serviceDict(HttpServerExchange exchange) throws Exception {
             AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, serviceEntry[0]);
         } else {
             if (logger.isTraceEnabled())
-                logger.trace("serviceEntry is null and endpoint is set to = '{}@{}'", Constants.UNKOWN_STRING, exchange.getRequestMethod().toString().toLowerCase());
+                logger.trace("serviceEntry is null and endpoint is set to = '{}@{}'", Constants.UNKNOWN, exchange.getRequestMethod().toString().toLowerCase());
             // at this moment, we don't have a way to reliably determine the endpoint.
-            AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, Constants.UNKOWN_STRING + "@" + exchange.getRequestMethod().toString().toLowerCase());
+            AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, Constants.UNKNOWN + "@" + exchange.getRequestMethod().toString().toLowerCase());
         }
     }
 

File: unified-security/src/main/java/com/networknt/security/AbstractJwtVerifyHandler.java
Patch:
@@ -119,15 +119,15 @@ public Status handleJwt(HttpServerExchange exchange, String pathPrefix, String r
 
                     String clientId = claims.getStringClaimValue(Constants.CLIENT_ID_STRING);
                     String userId = claims.getStringClaimValue(Constants.USER_ID_STRING);
-                    String issuer = claims.getStringClaimValue(Constants.ISS_STRING);
+                    String issuer = claims.getStringClaimValue(Constants.ISS);
                     // try to get the cid as some OAuth tokens name it as cid like Okta.
                     if (clientId == null)
-                        clientId = claims.getStringClaimValue(Constants.CID_STRING);
+                        clientId = claims.getStringClaimValue(Constants.CID);
 
 
                     // try to get the uid as some OAuth tokens name it as uid like Okta.
                     if (userId == null)
-                        userId = claims.getStringClaimValue(Constants.UID_STRING);
+                        userId = claims.getStringClaimValue(Constants.UID);
 
                     auditInfo.put(Constants.USER_ID_STRING, userId);
                     auditInfo.put(Constants.SUBJECT_CLAIMS, claims);

File: unified-security/src/main/java/com/networknt/security/AbstractSimpleJwtVerifyHandler.java
Patch:
@@ -110,15 +110,15 @@ public Status handleJwt(HttpServerExchange exchange, String pathPrefix, String r
 
                     String clientId = claims.getStringClaimValue(Constants.CLIENT_ID_STRING);
                     String userId = claims.getStringClaimValue(Constants.USER_ID_STRING);
-                    String issuer = claims.getStringClaimValue(Constants.ISS_STRING);
+                    String issuer = claims.getStringClaimValue(Constants.ISS);
                     // try to get the cid as some OAuth tokens name it as cid like Okta.
                     if (clientId == null)
-                        clientId = claims.getStringClaimValue(Constants.CID_STRING);
+                        clientId = claims.getStringClaimValue(Constants.CID);
 
 
                     // try to get the uid as some OAuth tokens name it as uid like Okta.
                     if (userId == null)
-                        userId = claims.getStringClaimValue(Constants.UID_STRING);
+                        userId = claims.getStringClaimValue(Constants.UID);
 
                     auditInfo.put(Constants.USER_ID_STRING, userId);
                     auditInfo.put(Constants.SUBJECT_CLAIMS, claims);

File: rule-loader/src/main/java/com/networknt/rule/FineGrainedAuthAction.java
Patch:
@@ -1,13 +1,14 @@
 package com.networknt.rule;
 
+import com.networknt.rule.exception.RuleEngineException;
 import org.jose4j.jwt.JwtClaims;
 
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
 
 public class FineGrainedAuthAction implements IAction {
-    public void performAction(Map<String, Object> objMap, Map<String, Object> resultMap, Collection<RuleActionValue> actionValues) {
+    public void performAction(String ruleId, String actionId, Map<String, Object> objMap, Map<String, Object> resultMap, Collection<RuleActionValue> actionValues) throws RuleEngineException {
         resultMap.put(RuleConstants.RESULT, false);
         // when this action is called, we either have a client credentials token or
         // an authorization code token with roles available.
@@ -69,5 +70,4 @@ public void performAction(Map<String, Object> objMap, Map<String, Object> result
 
         }
     }
-
 }

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -50,6 +50,8 @@ public class Constants {
     public static final String POS_STRING = "pos";
     public static final String GRP_STRING = "grp";
     public static final String HOST_STRING = "host";
+    public static final String EML_STRING = "eml";
+    public static final String EMAIL = "email";
     public static final String GROUPS = "groups";
     public static final String POSITIONS = "positions";
     public static final String ATTRIBUTES = "attributes";

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -50,6 +50,9 @@ public class Constants {
     public static final String POS_STRING = "pos";
     public static final String GRP_STRING = "grp";
     public static final String HOST_STRING = "host";
+    public static final String GROUPS = "groups";
+    public static final String POSITIONS = "positions";
+    public static final String ATTRIBUTES = "attributes";
 
     // Swagger 2.0 operation header name
     public static final String SWAGGER_OPERATION_STRING = "swagger_operation";

File: cors/src/main/java/com/networknt/cors/CorsHttpHandler.java
Patch:
@@ -77,8 +77,6 @@ public CorsHttpHandler(String configName) {
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         if(logger.isDebugEnabled()) logger.debug("CorsHttpHandler.handleRequest starts.");
         HeaderMap headers = exchange.getRequestHeaders();
-        // how to convert the HeaderMap to a Map<String, Object>?
-
         if (isCorsRequest(headers)) {
             // cors headers available in the request. Set the allowedOrigins and allowedMethods based on the
             // path prefix if it is configured. Otherwise, use the global configuration set in the constructor.

File: security-config/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -310,7 +310,9 @@ public JwtClaims verifyJwt(String jwt, boolean ignoreExpiry, boolean isToken, St
      * Check if the claim has scope for the jwt token.
      *
      * @param jwt - jwt token
+     * @param pathPrefix - pathPrefix for the jwt token cache key
      * @return boolean true has scope, false no scope
+     * @throws InvalidJwtException - thrown when the token is malformed/invalid
      */
     public boolean isScopeInJwt(String jwt, String pathPrefix) throws InvalidJwtException {
         JwtClaims claims;

File: cors/src/main/java/com/networknt/cors/CorsUtil.java
Patch:
@@ -130,6 +130,6 @@ public static String sanitizeDefaultPort(String url) {
     }
 
     public static boolean isPreflightedRequest(HttpServerExchange exchange) {
-        return Methods.OPTIONS.equals(exchange.getRequestMethod()) && isCoreRequest(exchange.getRequestHeaders());
+        return Methods.OPTIONS.equals(exchange.getRequestMethod());
     }
 }

File: consul/src/main/java/com/networknt/consul/ConsulRecoveryManager.java
Patch:
@@ -3,7 +3,6 @@
 import com.networknt.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -167,7 +167,7 @@ protected List<URL> doDiscover(URL url) {
      */
     private void startListenerThreadIfNewService(URL url) {
         String serviceName = url.getPath();
-
+        String tag = url.getParameter(Constants.TAG_ENVIRONMENT);
         // Do NOT start a listener thread if serviceName is blank
         if(StringUtils.isBlank(serviceName))
             return;
@@ -176,7 +176,7 @@ private void startListenerThreadIfNewService(URL url) {
         if (!lookupServices.containsKey(serviceName)) {
             Long value = lookupServices.putIfAbsent(serviceName, 0L);
             if (value == null) {
-                ServiceLookupThread lookupThread = new ServiceLookupThread(protocol, serviceName);
+                ServiceLookupThread lookupThread = new ServiceLookupThread(protocol, serviceName, tag);
                 lookupThread.setDaemon(true);
                 lookupThread.start();
             }
@@ -386,7 +386,7 @@ private class ServiceLookupThread extends Thread {
        private String serviceName;
        private String tag;
 
-        public ServiceLookupThread(String protocol, String serviceName) {
+        public ServiceLookupThread(String protocol, String serviceName, String tag) {
             this.protocol = protocol;
             this.serviceName = serviceName;
             this.tag = tag;

File: consul/src/main/java/com/networknt/consul/ConsulResponse.java
Patch:
@@ -60,5 +60,4 @@ public void setConsulLastContact(Long consulLastContact) {
 		this.consulLastContact = consulLastContact;
 	}
 
-
 }

File: consul/src/main/java/com/networknt/consul/ConsulThreadMonitor.java
Patch:
@@ -3,7 +3,6 @@
 import com.networknt.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 

File: security-config/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -456,8 +456,8 @@ private static void checkExpiry(boolean ignoreExpiry, JwtClaims claim, int allow
                     logger.info("Cached jwt token is expired!");
                     throw new ExpiredTokenException("Token is expired");
                 }
-            } catch (MalformedClaimException e) {
-                // This is cached token and it is impossible to have this exception
+            } catch (MalformedClaimException | NullPointerException e) {
+                // The NPE can happen if the token doesn't have exp claim.
                 logger.error("MalformedClaimException:", e);
                 throw new InvalidJwtException("MalformedClaimException", new ErrorCodeValidator.Error(ErrorCodes.MALFORMED_CLAIM, "Invalid ExpirationTime Format"), e, context);
             }

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java
Patch:
@@ -213,7 +213,7 @@ private void updateCacheFromMessage(String message) {
     }
 
     private ConcurrentHashMap<String, List<URL>> convertLisMap2UR(String serviceId, String tag, String protocol, List<Map<String, Object>> services)  {
-        String key = tag == null ? serviceId : serviceId + "|" + tag;
+        String key = serviceKey(serviceId, tag);
         ConcurrentHashMap<String, List<URL>> serviceUrls = new ConcurrentHashMap<>();
         if (services != null && !services.isEmpty()) {
             for (Map<String, Object> service : services) {

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -88,7 +88,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             // check if the path prefix has the second part of encoding to overwrite the defaultBodyEncoding.
             Optional<String> match = findMatchingPrefix(requestPath, config.getAppliedPathPrefixes());
             if(match.isPresent()) {
-                String encoding = StringUtils.getSecondPart(match.get());
+                String encoding = config.getPathPrefixEncoding() == null ?  null : (String)config.getPathPrefixEncoding().get(match.get());
                 if (encoding != null && logger.isTraceEnabled())
                     logger.trace("Customized encoding {} found in the prefix {} for requestPath {}", encoding, match.get(),requestPath);
 

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -107,7 +107,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             // check if the path prefix has the second part of encoding to overwrite the defaultBodyEncoding.
             Optional<String> match = findMatchingPrefix(requestPath, config.getAppliedPathPrefixes());
             if(match.isPresent()) {
-                String encoding = StringUtils.getSecondPart(match.get());
+                String encoding = config.getPathPrefixEncoding() == null ?  null : (String)config.getPathPrefixEncoding().get(match.get());
                 if(encoding != null && logger.isTraceEnabled()) logger.trace("Customized encoding {} found in the prefix {} for requestPath {}", encoding, match.get(), requestPath);
                 String responseBody = BuffersUtils.toString(getBuffer(exchange), encoding != null ? encoding.trim() : config.getDefaultBodyEncoding());
                 if (logger.isTraceEnabled())

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -93,8 +93,7 @@ public static Object getInjectValue(String string, boolean decrypt) {
     // Double check values and exclusions to ensure no dead loop
     public static boolean isExclusionConfigFile(String configName) {
         List<Object> exclusionConfigFileList = (exclusionMap == null) ? new ArrayList<>() : (List<Object>) exclusionMap.get(EXCLUSION_CONFIG_FILE_LIST);
-        return CENTRALIZED_MANAGEMENT.equals(configName)
-                || SCALABLE_CONFIG.equals(configName)
+        return SCALABLE_CONFIG.equals(configName)
                 || exclusionConfigFileList.contains(configName);
     }
 

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -124,6 +124,7 @@ public class Constants {
     public static final String RATELIMIT_LIMIT = "RateLimit-Limit";
     public static final String RATELIMIT_REMAINING = "RateLimit-Remaining";
     public static final String RATELIMIT_RESET = "RateLimit-Reset";
+    public static final String RETRY_AFTER = "Retry-After";
 
     // rule loader
     public static final String RULE_ID = "ruleId";

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -86,7 +86,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         String requestPath = exchange.getRequestPath();
         if (config.getAppliedPathPrefixes() != null) {
             // check if the path prefix has the second part of encoding to overwrite the defaultBodyEncoding.
-            Optional<String> match = config.getAppliedPathPrefixes().stream().filter(requestPath::startsWith).findFirst();
+            Optional<String> match = findMatchingPrefix(requestPath, config.getAppliedPathPrefixes());
             if(match.isPresent()) {
                 String encoding = StringUtils.getSecondPart(match.get());
                 if (encoding != null && logger.isTraceEnabled())

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -105,7 +105,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         String requestPath = exchange.getRequestPath();
         if (config.getAppliedPathPrefixes() != null) {
             // check if the path prefix has the second part of encoding to overwrite the defaultBodyEncoding.
-            Optional<String> match = config.getAppliedPathPrefixes().stream().filter(requestPath::startsWith).findFirst();
+            Optional<String> match = findMatchingPrefix(requestPath, config.getAppliedPathPrefixes());
             if(match.isPresent()) {
                 String encoding = StringUtils.getSecondPart(match.get());
                 if(encoding != null && logger.isTraceEnabled()) logger.trace("Customized encoding {} found in the prefix {} for requestPath {}", encoding, match.get(), requestPath);

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -147,7 +147,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                                     if (shouldAttachBody(exchange.getRequestHeaders())) {
                                         if(logger.isTraceEnabled()) logger.trace("shouldAttachBody is true");
                                         PooledByteBuffer[] requestData = this.getBuffer(exchange);
-                                        String s = BuffersUtils.toString(requestData, encoding != null ? encoding : config.getDefaultBodyEncoding());
+                                        String s = BuffersUtils.toString(requestData, encoding != null ? encoding.trim() : config.getDefaultBodyEncoding());
                                         // Transform the request body with the rule engine.
                                         if(logger.isDebugEnabled()) logger.debug("original request body = {}", s);
                                         objMap.put("requestBody", s);

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -109,7 +109,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             if(match.isPresent()) {
                 String encoding = StringUtils.getSecondPart(match.get());
                 if(encoding != null && logger.isTraceEnabled()) logger.trace("Customized encoding {} found in the prefix {} for requestPath {}", encoding, match.get(), requestPath);
-                String responseBody = BuffersUtils.toString(getBuffer(exchange), encoding != null ? encoding : config.getDefaultBodyEncoding());
+                String responseBody = BuffersUtils.toString(getBuffer(exchange), encoding != null ? encoding.trim() : config.getDefaultBodyEncoding());
                 if (logger.isTraceEnabled())
                     logger.trace("original response body = {}", responseBody);
 

File: security-config/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -740,6 +740,7 @@ private JsonWebKey getJsonWebKeySetForToken(String kid, Object requestPathOrJwkS
                 for(String serviceId: jwkServiceIds) {
                     config = getJwkConfig(clientConfig, serviceId);
                     jwk = retrieveJwk(kid, config);
+                    if(jwk != null) break;
                 }
             } else {
                 throw new ConfigException("requestPathOrJwkServiceIds must be a string or a list of strings");

File: restrans-config/src/main/java/com/networknt/restrans/ResponseTransformerConfig.java
Patch:
@@ -21,7 +21,7 @@ public class ResponseTransformerConfig {
     private static final String APPLIED_PATH_PREFIXES = "appliedPathPrefixes";
 
     private Map<String, Object> mappedConfig;
-    private Config config;
+    private final Config config;
     private boolean enabled;
     private boolean requiredContent;
     private String defaultBodyEncoding;

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -131,4 +131,7 @@ public class Constants {
     // framework
     public static final String LIGHT_4J = "Light4j";
     public static final String SPRING_BOOT = "SpringBoot";
+
+    // plugin error message
+    public static final String ERROR_MESSAGE = "errorMessage";
 }

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -16,7 +16,6 @@
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.server.protocol.http.HttpContinue;
-import io.undertow.util.HeaderMap;
 import io.undertow.util.Headers;
 import io.undertow.util.HttpString;
 import org.slf4j.Logger;
@@ -209,7 +208,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                                         break;
                                     case "requestBody":
                                         String s = (String)result.get("requestBody");
-                                        ByteBuffer overwriteData = ByteBuffer.wrap(s.getBytes());
+                                        ByteBuffer overwriteData = ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));
                                         PooledByteBuffer[] requestData = this.getBuffer(exchange);
                                         // Do the overwrite operation by copying our overwriteData to the source buffer pool.
                                         int pidx = 0;

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -40,6 +40,7 @@
 import java.net.ConnectException;
 import java.net.URI;
 import java.net.http.*;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -51,7 +52,6 @@
 
 import static com.networknt.server.Server.STARTUP_CONFIG_NAME;
 
-
 /**
  * Default Config Loader to fetch and load configs from light config server
  *
@@ -218,7 +218,7 @@ private synchronized void loadConfigs(String queryParameters) {
             }
 
             filePath = Paths.get(targetConfigsDirectory + "/values.yml");
-            Files.write(filePath, new Yaml(options).dump(serviceConfigs).getBytes());
+            Files.write(filePath, new Yaml(options).dump(serviceConfigs).getBytes(StandardCharsets.UTF_8));
         } catch (IOException e) {
             logger.error("Exception while creating " + targetConfigsDirectory, e);
         }
@@ -259,7 +259,7 @@ private void loadFiles(String configPath, String contextRoot) {
             Base64.Decoder decoder = Base64.getMimeDecoder();
             for (String fileName : serviceFiles.keySet()) {
                 filePath=Paths.get(targetConfigsDirectory+"/"+fileName);
-                byte[] ba = decoder.decode(serviceFiles.get(fileName).toString().getBytes());
+                byte[] ba = decoder.decode(serviceFiles.get(fileName).toString().getBytes(StandardCharsets.UTF_8));
                 Files.write(filePath, ba);
             }
         }  catch (IOException e) {

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -129,10 +129,12 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
                 logger.error(e.getMessage(), e);
                 safeCloseBuffers(bufferedData, buffer);
                 setExchangeStatus(httpServerExchange, PAYLOAD_TOO_LARGE);
+                return;
             } catch (Exception | Error e) {
                 logger.error(e.getMessage(), e);
                 safeCloseBuffers(bufferedData, buffer);
                 setExchangeStatus(httpServerExchange, GENERIC_EXCEPTION, e.getMessage());
+                return;
             }
         } else {
             if(logger.isTraceEnabled()) logger.trace("No need to read body");

File: unified-security/src/main/java/com/networknt/security/AbstractJwtVerifyHandler.java
Patch:
@@ -24,7 +24,7 @@ public abstract class AbstractJwtVerifyHandler extends UndertowVerifyHandler imp
     static final Logger logger = LoggerFactory.getLogger(AbstractJwtVerifyHandler.class);
     static final String STATUS_INVALID_AUTH_TOKEN = "ERR10000";
     static final String STATUS_AUTH_TOKEN_EXPIRED = "ERR10001";
-    static final String STATUS_GENERIC_EXCEPTION = "ERR10014";
+    static final String TOKEN_VERIFICATION_EXCEPTION = "ERR10090";
     static final String STATUS_MISSING_AUTH_TOKEN = "ERR10002";
     static final String STATUS_INVALID_SCOPE_TOKEN = "ERR10003";
     static final String STATUS_SCOPE_TOKEN_EXPIRED = "ERR10004";
@@ -198,7 +198,7 @@ public boolean handleJwt(HttpServerExchange exchange, String pathPrefix, String
                     if (logger.isDebugEnabled())
                         logger.debug("JwtVerifyHandler.handleRequest ends with an error.");
 
-                    setExchangeStatus(exchange, STATUS_GENERIC_EXCEPTION, e.getMessage());
+                    setExchangeStatus(exchange, TOKEN_VERIFICATION_EXCEPTION, e.getMessage());
                     exchange.endExchange();
                     return false;
                 }

File: unified-security/src/main/java/com/networknt/security/AbstractSimpleJwtVerifyHandler.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractSimpleJwtVerifyHandler extends UndertowVerifyHandl
     static final Logger logger = LoggerFactory.getLogger(AbstractSimpleJwtVerifyHandler.class);
     static final String STATUS_INVALID_AUTH_TOKEN = "ERR10000";
     static final String STATUS_AUTH_TOKEN_EXPIRED = "ERR10001";
-    static final String STATUS_GENERIC_EXCEPTION = "ERR10014";
+    static final String TOKEN_VERIFICATION_EXCEPTION = "ERR10090";
     static final String STATUS_MISSING_AUTH_TOKEN = "ERR10002";
     static final String STATUS_METHOD_NOT_ALLOWED = "ERR10008";
 
@@ -176,7 +176,7 @@ public boolean handleJwt(HttpServerExchange exchange, String pathPrefix, String
                     if (logger.isDebugEnabled())
                         logger.debug("SimpleJwtVerifyHandler.handleRequest ends with an error.");
 
-                    setExchangeStatus(exchange, STATUS_GENERIC_EXCEPTION, e.getMessage());
+                    setExchangeStatus(exchange, TOKEN_VERIFICATION_EXCEPTION, e.getMessage());
                     exchange.endExchange();
                     return false;
                 }

File: security-config/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -521,7 +521,7 @@ private VerificationKeyResolver getKeyResolver(String kid, Object requestPathOrJ
                 if (jwk == null) {
                     jwk = getJsonWebKeySetForToken(kid, requestPathOrJwkServiceIds);
                     if (jwk == null) {
-                        throw new RuntimeException("no JWK for kid: " + kid);
+                        throw new VerificationException("no JWK for kid: " + kid);
                     }
                     if(requestPathOrJwkServiceIds == null) {
                         // single jwk setup and kid is the key for the jwk cache.

File: security-config/src/main/java/com/networknt/security/VerificationException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.security.inbound;
+package com.networknt.security;
 
 /**
  * Verification Exception is a runtime exception that is thrown during

File: handler/src/main/java/com/networknt/handler/BuffersUtils.java
Patch:
@@ -58,7 +58,7 @@ public static ByteBuffer toByteBuffer(final PooledByteBuffer[] srcs) throws IOEx
                 if (srcBuffer.remaining() > dst.remaining()) {
 
                     if (LOG.isErrorEnabled())
-                        LOG.error("Request content exceeeded {} bytes limit", MAX_CONTENT_SIZE);
+                        LOG.error("Request content exceeded {} bytes limit", MAX_CONTENT_SIZE);
 
                     throw new IOException("Request content exceeded " + MAX_CONTENT_SIZE + " bytes limit");
                 }

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -136,8 +136,9 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                 if (logger.isDebugEnabled())
                     logger.debug("endpointRules iS NULL");
             } else {
-                if (logger.isDebugEnabled())
-                    logger.debug("endpointRules: " + endpointRules.get(RESPONSE_TRANSFORM).size());
+                // chances are there is not response transform rules for this endpoint.
+                if (logger.isDebugEnabled() && endpointRules.get(RESPONSE_TRANSFORM) != null)
+                    logger.debug("endpointRules {}", endpointRules.get(RESPONSE_TRANSFORM).size());
             }
 
             boolean finalResult = true;

File: reqtrans-config/src/test/java/com/networknt/reqtrans/RequestTransformerConfigTest.java
Patch:
@@ -8,5 +8,6 @@ public class RequestTransformerConfigTest {
     public void testConfigLoad() {
         RequestTransformerConfig config = RequestTransformerConfig.load();
         Assert.assertTrue(config.getMappedConfig().size() > 0);
+        Assert.assertEquals(config.getDefaultBodyEncoding(), "UTF-8");
     }
 }

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -132,7 +132,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                                 if (shouldAttachBody(exchange.getRequestHeaders())) {
                                     if(logger.isTraceEnabled()) logger.trace("shouldAttachBody is true");
                                     PooledByteBuffer[] requestData = this.getBuffer(exchange);
-                                    String s = BuffersUtils.toString(requestData, StandardCharsets.UTF_8);
+                                    String s = BuffersUtils.toString(requestData, config.getDefaultBodyEncoding());
                                     // Transform the request body with the rule engine.
                                     if(logger.isDebugEnabled()) logger.debug("original request body = " + s);
                                     objMap.put("requestBody", s);

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -98,7 +98,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         if (logger.isDebugEnabled()) logger.trace("ResponseTransformerInterceptor.handleRequest starts.");
         String requestPath = exchange.getRequestPath();
         if (config.getAppliedPathPrefixes() != null && config.getAppliedPathPrefixes().stream().anyMatch(requestPath::startsWith)) {
-            String responseBody = BuffersUtils.toString(getBuffer(exchange), StandardCharsets.UTF_8);
+            String responseBody = BuffersUtils.toString(getBuffer(exchange), config.getDefaultBodyEncoding());
             if (logger.isTraceEnabled())
                 logger.trace("original response body = " + responseBody);
 

File: restrans-config/src/test/java/com/networknt/restrans/ResponseTransformerConfigTest.java
Patch:
@@ -8,6 +8,7 @@ public class ResponseTransformerConfigTest {
     public void testConfigLoad() {
         ResponseTransformerConfig config = ResponseTransformerConfig.load();
         Assert.assertTrue(config.getMappedConfig().size() > 0);
+        Assert.assertEquals(config.getDefaultBodyEncoding(), "UTF-8");
     }
 
 }

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -47,7 +47,7 @@ public class LimitHandler implements MiddlewareHandler {
 
     public LimitHandler() throws Exception{
         config = LimitConfig.load();
-        logger.info("RateLimit started with key type:" + config.getKey().name());
+        logger.info("RateLimit started with key type {}", config.getKey().name());
         rateLimiter = new RateLimiter(config);
     }
 
@@ -61,7 +61,7 @@ public LimitHandler() throws Exception{
     @Deprecated
     public LimitHandler(LimitConfig cfg) throws Exception{
         config = cfg;
-        logger.info("RateLimit started with key type:" + config.getKey().name());
+        logger.info("RateLimit started with key type {}", config.getKey().name());
         rateLimiter = new RateLimiter(cfg);
     }
 

File: unified-security/src/main/java/com/networknt/security/UnifiedSecurityHandler.java
Patch:
@@ -27,7 +27,6 @@
  */
 public class UnifiedSecurityHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(UnifiedSecurityHandler.class);
-    static final String OPENAPI_SECURITY_CONFIG = "openapi-security";
     static final String BEARER_PREFIX = "BEARER";
     static final String BASIC_PREFIX = "BASIC";
     static final String API_KEY = "apikey";
@@ -46,7 +45,7 @@ public class UnifiedSecurityHandler implements MiddlewareHandler {
     public UnifiedSecurityHandler() {
         logger.info("UnifiedSecurityHandler starts");
         config = UnifiedSecurityConfig.load();
-        jwtVerifier = new JwtVerifier(SecurityConfig.load(OPENAPI_SECURITY_CONFIG));
+        jwtVerifier = new JwtVerifier(SecurityConfig.load());
     }
 
     @Override

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -410,7 +410,7 @@ private static void registerMiddlewareHandler(Object handler) {
      * constructor fields. To note: It could either implement HttpHandler, or
      * HandlerProvider.
      *
-     * @param handler
+     * @param handler handler string
      */
     private static void initStringDefinedHandler(String handler) {
 

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -114,7 +114,7 @@ default void setExchangeStatus(HttpServerExchange ex, Status status) {
         status = statusWrapper == null ? status : statusWrapper.wrap(status, ex);
         ex.setStatusCode(status.getStatusCode());
         ex.getResponseHeaders().put(Headers.CONTENT_TYPE, ContentType.APPLICATION_JSON.value());
-        status.setDescription(status.getDescription().replaceAll("\\\\", "\\\\\\\\"));
+        status.setDescription(status.getDescription().replaceAll("\\\\", "\\\\\\\\").replaceAll("\"", "\\\\\""));
 
         var elements = Thread.currentThread().getStackTrace();
 

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasConfig.java
Patch:
@@ -9,6 +9,7 @@
 
 import java.util.*;
 
+@Deprecated
 public class MrasConfig {
     private static final Logger logger = LoggerFactory.getLogger(MrasConfig.class);
     public static final String CONFIG_NAME = "mras";

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -58,8 +58,11 @@
  * middleware handler. Like the safesforce, we will also invoke the API after the authentication is done in the
  * same context.
  *
+ * This handler is replaced with the token-transformer plugin from yaml-rule-plugin project.
+ *
  * @author Steve Hu
  */
+@Deprecated
 public class MrasHandler implements MiddlewareHandler {
     private static final Logger logger = LoggerFactory.getLogger(MrasHandler.class);
     private static final String TLS_TRUSTSTORE_ERROR = "ERR10055";

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceConfig.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.List;
 import java.util.Map;
 
+@Deprecated
 public class SalesforceConfig {
     private static final Logger logger = LoggerFactory.getLogger(SalesforceConfig.class);
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -64,8 +64,11 @@
  * For the token caching, we only cache the salesforce token. The jwt token we created only last 5 minutes, and it
  * is not cached.
  *
+ * This handler is replaced with the token-transformer plugin from yaml-rule-plugin project.
+ *
  * @author Steve Hu
  */
+@Deprecated
 public class SalesforceHandler implements MiddlewareHandler {
     private static final Logger logger = LoggerFactory.getLogger(SalesforceHandler.class);
     private static final String TLS_TRUSTSTORE_ERROR = "ERR10055";

File: security/src/test/java/com/networknt/security/JwtVerifierJwkBase.java
Patch:
@@ -32,8 +32,8 @@ public class JwtVerifierJwkBase {
     public static String curr_kid = "7pGHLozGRXqv2g47T1HQag";
     public static String curr_key = "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCHbnJ01Wm2twOVSKLE21x2yMNTJNPZmVqvEjJGmw5k1alD+ReOfvbeP1ifJ495CQLzwr4w9ZiFEcqn3D8fBm9a8aBA2TnCUZbc9s4CV1tb/n6PmCLM8Mzx3mZMBOFuOy97nBVbA3nW61CioU12QJDywnmYdtqJJNNQcgOFsquIiUWGw10tkQePTI7drCcfwpjHO9usbOoqx7hsM27tr51hyOYRuZnSoa4ths14c3i9z7VC6QWWecsP1c2ZuH0a6u/nZujH5LHZVxTURj89oVp7anYGBUFuosmFy/Xvq8ikoCcgWfJvVo20/X3A4HcltkOFeFd0b1CESNRjMs6JXkedAgMBAAECggEAMcLTKzp+7TOxjVhy9gHjp4F8wz/01y8RsuHstySh1UrsNp1/mkvsSRzdYx0WClLVUttrJnIW6E3xOFwklTG4GKJPT4SBRHTWCbplV1bhqpuHxRsRLlwL8ZLV43inm+kDOVfQQPC2A9HSfu7ll12B5LCwHOUOxvVQ7230/Vr4y+GacYHDO0aL7tWAC2fH8hXzvgSc+sosg/gIRro7aasP5GMuFZjtPANzwhovE8vq71ZQTCzEEm890NuzOOYLUCmkE+FDL6Fjg9lckcosmfPuBpqMjAMMAhIHLEwmWBX6najTcuxpzDT6H+4cmU8+TyX2OwBlyAWpFNTLp3ta05tAAQKBgQDRgSxGB83hx5IL1u1gvDsEfS2sKgRDE5ZEeNDOrxI+U6dhgKj7ae11as83AZnA+sAQrHPZowoRAnAlqNFTQKMLxQfocs2sl5pG5xkL7DrlteUtG6gDvjsbtL64wiy6WrfTJvcICiAw9skgSFX+ZTy9GhcvQVrrjrHrjMl2b+uHAQKBgQClfN7SdW9hxKbKzHzpJ4G74Vr0JqYmr2JPu5DezL/Mxnx+sKEA2ByqVAEO6pJKGR5GfwPh91BBc1sRA4PzWtLRR5Dve6dm1puhaXKeREwBgIoDnXvGDfsOnwHQcGJzSgqBmycTTDiBmjnYX8AkZkbHN5lIFriy7G063XsuGIh8nQKBgDpEVb7oXr9DlP/L99smnrdh5Tjzupm5Mdq7Sz+ge09wTqYUdWrvDAbS/OyMemmsk4xPmizWZm9SoUQoDoe7+1zDoK5qd39f7p13moSxX7QRgbqo7XKVDrVm8IBMKMpvfp6wQJYw0sErccaTt674Ewt43SfcYmAPILalQka5W+UBAoGAQpom83zf/vEuT6BNBWkpBXyFJo4HgLpFTuGmRIUTDE81+6cKpVRU9Rgp9N7jUX8aeDTWUzM90ZmjpQ1NJbv/7Mpownl5viHRMP1Ha/sAu/oHkbzn+6XUzOWhzUnt1YiPAep3p4SdmUuAzFx88ClZgwQVZLYAT8Jnk7FfygWFqOECgYBOox0DFatEqB/7MNMoLMZCacSrylZ1NYHJYAdWkxOvahrppAMbDVFDlwvH7i8gVvzcfFxQtOxSJBlUKlamDd5i76O2N+fIPO8P+iyqKz2Uh/emVwWCWlijSOnXvKRUOiujVufGP0OGxi1GKSUaIXnvMQqYF9M/Igi0BQiCn+pFzw==";
     public static String curr_pub = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAh25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ/kXjn723j9YnyePeQkC88K+MPWYhRHKp9w/HwZvWvGgQNk5wlGW3PbOAldbW/5+j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a+dYcjmEbmZ0qGuLYbNeHN4vc+1QukFlnnLD9XNmbh9Gurv52box+Sx2VcU1EY/PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQIDAQAB";
-    public static String jsonWebKeySetJsonCurr = "{\"keys\":[{\"kty\":\"RSA\",\"use\":\"sig\",\"kid\":\"7pGHLozGRXqv2g47T1HQag\",\"n\":\"h25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ_kXjn723j9YnyePeQkC88K-MPWYhRHKp9w_HwZvWvGgQNk5wlGW3PbOAldbW_5-j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a-dYcjmEbmZ0qGuLYbNeHN4vc-1QukFlnnLD9XNmbh9Gurv52box-Sx2VcU1EY_PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQ\",\"e\":\"AQAB\"}]}";
-    public static String jsonWebKeySetJsonLong = "{\"keys\":[{\"kty\":\"RSA\",\"use\":\"sig\",\"kid\":\"Tj_l_tIBTginOtQbL0Pv5w\",\"n\":\"0YRbWAb1FGDpPUUcrIpJC6BwlswlKMS-z2wMAobdo0BNxNa7hG_gIHVPkXu14Jfo1JhUhS4wES3DdY3a6olqPcRN1TCCUVHd-1TLd1BBS-yq9tdJ6HCewhe5fXonaRRKwutvoH7i_eR4m3fQ1GoVzVAA3IngpTr4ptnM3Ef3fj-5wZYmitzrRUyQtfARTl3qGaXP_g8pHFAP0zrNVvOnV-jcNMKm8YZNcgcs1SuLSFtUDXpf7Nr2_xOhiNM-biES6Dza1sMLrlxULFuctudO9lykB7yFh3LHMxtIZyIUHuy0RbjuOGC5PmDowLttZpPI_j4ynJHAaAWr8Ddz764WdQ\",\"e\":\"AQAB\"}]}";
+    public static String jsonWebKeySetJsonCurr = "{\"keys\":[{\"kty\":\"RSA\",\"use\":\"sig\",\"alg\":\"RS256\",\"kid\":\"7pGHLozGRXqv2g47T1HQag\",\"n\":\"h25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ_kXjn723j9YnyePeQkC88K-MPWYhRHKp9w_HwZvWvGgQNk5wlGW3PbOAldbW_5-j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a-dYcjmEbmZ0qGuLYbNeHN4vc-1QukFlnnLD9XNmbh9Gurv52box-Sx2VcU1EY_PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQ\",\"e\":\"AQAB\"},{\"kty\":\"RSA\",\"use\":\"enc\",\"alg\":\"RSA-OAEP-256\",\"kid\":\"7pGHLozGRXqv2g47T1HQag\",\"n\":\"h25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ_kXjn723j9YnyePeQkC88K-MPWYhRHKp9w_HwZvWvGgQNk5wlGW3PbOAldbW_5-j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a-dYcjmEbmZ0qGuLYbNeHN4vc-1QukFlnnLD9XNmbh9Gurv52box-Sx2VcU1EY_PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQ\",\"e\":\"AQAB\"}]}";
+    public static String jsonWebKeySetJsonLong = "{\"keys\":[{\"kty\":\"RSA\",\"use\":\"sig\",\"alg\":\"RS256\",\"kid\":\"Tj_l_tIBTginOtQbL0Pv5w\",\"n\":\"0YRbWAb1FGDpPUUcrIpJC6BwlswlKMS-z2wMAobdo0BNxNa7hG_gIHVPkXu14Jfo1JhUhS4wES3DdY3a6olqPcRN1TCCUVHd-1TLd1BBS-yq9tdJ6HCewhe5fXonaRRKwutvoH7i_eR4m3fQ1GoVzVAA3IngpTr4ptnM3Ef3fj-5wZYmitzrRUyQtfARTl3qGaXP_g8pHFAP0zrNVvOnV-jcNMKm8YZNcgcs1SuLSFtUDXpf7Nr2_xOhiNM-biES6Dza1sMLrlxULFuctudO9lykB7yFh3LHMxtIZyIUHuy0RbjuOGC5PmDowLttZpPI_j4ynJHAaAWr8Ddz764WdQ\",\"e\":\"AQAB\"},{\"kty\":\"RSA\",\"use\":\"enc\",\"alg\":\"RSA-OAEP-256\",\"kid\":\"Tj_l_tIBTginOtQbL0Pv5w\",\"n\":\"0YRbWAb1FGDpPUUcrIpJC6BwlswlKMS-z2wMAobdo0BNxNa7hG_gIHVPkXu14Jfo1JhUhS4wES3DdY3a6olqPcRN1TCCUVHd-1TLd1BBS-yq9tdJ6HCewhe5fXonaRRKwutvoH7i_eR4m3fQ1GoVzVAA3IngpTr4ptnM3Ef3fj-5wZYmitzrRUyQtfARTl3qGaXP_g8pHFAP0zrNVvOnV-jcNMKm8YZNcgcs1SuLSFtUDXpf7Nr2_xOhiNM-biES6Dza1sMLrlxULFuctudO9lykB7yFh3LHMxtIZyIUHuy0RbjuOGC5PmDowLttZpPI_j4ynJHAaAWr8Ddz764WdQ\",\"e\":\"AQAB\"}]}";
 
     private static final char[] STORE_PASSWORD = "password".toCharArray();
 

File: security/src/test/java/com/networknt/security/JwtVerifierJwkBase.java
Patch:
@@ -32,8 +32,8 @@ public class JwtVerifierJwkBase {
     public static String curr_kid = "7pGHLozGRXqv2g47T1HQag";
     public static String curr_key = "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCHbnJ01Wm2twOVSKLE21x2yMNTJNPZmVqvEjJGmw5k1alD+ReOfvbeP1ifJ495CQLzwr4w9ZiFEcqn3D8fBm9a8aBA2TnCUZbc9s4CV1tb/n6PmCLM8Mzx3mZMBOFuOy97nBVbA3nW61CioU12QJDywnmYdtqJJNNQcgOFsquIiUWGw10tkQePTI7drCcfwpjHO9usbOoqx7hsM27tr51hyOYRuZnSoa4ths14c3i9z7VC6QWWecsP1c2ZuH0a6u/nZujH5LHZVxTURj89oVp7anYGBUFuosmFy/Xvq8ikoCcgWfJvVo20/X3A4HcltkOFeFd0b1CESNRjMs6JXkedAgMBAAECggEAMcLTKzp+7TOxjVhy9gHjp4F8wz/01y8RsuHstySh1UrsNp1/mkvsSRzdYx0WClLVUttrJnIW6E3xOFwklTG4GKJPT4SBRHTWCbplV1bhqpuHxRsRLlwL8ZLV43inm+kDOVfQQPC2A9HSfu7ll12B5LCwHOUOxvVQ7230/Vr4y+GacYHDO0aL7tWAC2fH8hXzvgSc+sosg/gIRro7aasP5GMuFZjtPANzwhovE8vq71ZQTCzEEm890NuzOOYLUCmkE+FDL6Fjg9lckcosmfPuBpqMjAMMAhIHLEwmWBX6najTcuxpzDT6H+4cmU8+TyX2OwBlyAWpFNTLp3ta05tAAQKBgQDRgSxGB83hx5IL1u1gvDsEfS2sKgRDE5ZEeNDOrxI+U6dhgKj7ae11as83AZnA+sAQrHPZowoRAnAlqNFTQKMLxQfocs2sl5pG5xkL7DrlteUtG6gDvjsbtL64wiy6WrfTJvcICiAw9skgSFX+ZTy9GhcvQVrrjrHrjMl2b+uHAQKBgQClfN7SdW9hxKbKzHzpJ4G74Vr0JqYmr2JPu5DezL/Mxnx+sKEA2ByqVAEO6pJKGR5GfwPh91BBc1sRA4PzWtLRR5Dve6dm1puhaXKeREwBgIoDnXvGDfsOnwHQcGJzSgqBmycTTDiBmjnYX8AkZkbHN5lIFriy7G063XsuGIh8nQKBgDpEVb7oXr9DlP/L99smnrdh5Tjzupm5Mdq7Sz+ge09wTqYUdWrvDAbS/OyMemmsk4xPmizWZm9SoUQoDoe7+1zDoK5qd39f7p13moSxX7QRgbqo7XKVDrVm8IBMKMpvfp6wQJYw0sErccaTt674Ewt43SfcYmAPILalQka5W+UBAoGAQpom83zf/vEuT6BNBWkpBXyFJo4HgLpFTuGmRIUTDE81+6cKpVRU9Rgp9N7jUX8aeDTWUzM90ZmjpQ1NJbv/7Mpownl5viHRMP1Ha/sAu/oHkbzn+6XUzOWhzUnt1YiPAep3p4SdmUuAzFx88ClZgwQVZLYAT8Jnk7FfygWFqOECgYBOox0DFatEqB/7MNMoLMZCacSrylZ1NYHJYAdWkxOvahrppAMbDVFDlwvH7i8gVvzcfFxQtOxSJBlUKlamDd5i76O2N+fIPO8P+iyqKz2Uh/emVwWCWlijSOnXvKRUOiujVufGP0OGxi1GKSUaIXnvMQqYF9M/Igi0BQiCn+pFzw==";
     public static String curr_pub = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAh25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ/kXjn723j9YnyePeQkC88K+MPWYhRHKp9w/HwZvWvGgQNk5wlGW3PbOAldbW/5+j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a+dYcjmEbmZ0qGuLYbNeHN4vc+1QukFlnnLD9XNmbh9Gurv52box+Sx2VcU1EY/PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQIDAQAB";
-    public static String jsonWebKeySetJsonCurr = "{\"keys\":[{\"kty\":\"RSA\",\"kid\":\"7pGHLozGRXqv2g47T1HQag\",\"n\":\"h25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ_kXjn723j9YnyePeQkC88K-MPWYhRHKp9w_HwZvWvGgQNk5wlGW3PbOAldbW_5-j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a-dYcjmEbmZ0qGuLYbNeHN4vc-1QukFlnnLD9XNmbh9Gurv52box-Sx2VcU1EY_PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQ\",\"e\":\"AQAB\"}]}";
-    public static String jsonWebKeySetJsonLong = "{\"keys\":[{\"kty\":\"RSA\",\"kid\":\"Tj_l_tIBTginOtQbL0Pv5w\",\"n\":\"0YRbWAb1FGDpPUUcrIpJC6BwlswlKMS-z2wMAobdo0BNxNa7hG_gIHVPkXu14Jfo1JhUhS4wES3DdY3a6olqPcRN1TCCUVHd-1TLd1BBS-yq9tdJ6HCewhe5fXonaRRKwutvoH7i_eR4m3fQ1GoVzVAA3IngpTr4ptnM3Ef3fj-5wZYmitzrRUyQtfARTl3qGaXP_g8pHFAP0zrNVvOnV-jcNMKm8YZNcgcs1SuLSFtUDXpf7Nr2_xOhiNM-biES6Dza1sMLrlxULFuctudO9lykB7yFh3LHMxtIZyIUHuy0RbjuOGC5PmDowLttZpPI_j4ynJHAaAWr8Ddz764WdQ\",\"e\":\"AQAB\"}]}";
+    public static String jsonWebKeySetJsonCurr = "{\"keys\":[{\"kty\":\"RSA\",\"use\":\"sig\",\"kid\":\"7pGHLozGRXqv2g47T1HQag\",\"n\":\"h25ydNVptrcDlUiixNtcdsjDUyTT2ZlarxIyRpsOZNWpQ_kXjn723j9YnyePeQkC88K-MPWYhRHKp9w_HwZvWvGgQNk5wlGW3PbOAldbW_5-j5gizPDM8d5mTAThbjsve5wVWwN51utQoqFNdkCQ8sJ5mHbaiSTTUHIDhbKriIlFhsNdLZEHj0yO3awnH8KYxzvbrGzqKse4bDNu7a-dYcjmEbmZ0qGuLYbNeHN4vc-1QukFlnnLD9XNmbh9Gurv52box-Sx2VcU1EY_PaFae2p2BgVBbqLJhcv176vIpKAnIFnyb1aNtP19wOB3JbZDhXhXdG9QhEjUYzLOiV5HnQ\",\"e\":\"AQAB\"}]}";
+    public static String jsonWebKeySetJsonLong = "{\"keys\":[{\"kty\":\"RSA\",\"use\":\"sig\",\"kid\":\"Tj_l_tIBTginOtQbL0Pv5w\",\"n\":\"0YRbWAb1FGDpPUUcrIpJC6BwlswlKMS-z2wMAobdo0BNxNa7hG_gIHVPkXu14Jfo1JhUhS4wES3DdY3a6olqPcRN1TCCUVHd-1TLd1BBS-yq9tdJ6HCewhe5fXonaRRKwutvoH7i_eR4m3fQ1GoVzVAA3IngpTr4ptnM3Ef3fj-5wZYmitzrRUyQtfARTl3qGaXP_g8pHFAP0zrNVvOnV-jcNMKm8YZNcgcs1SuLSFtUDXpf7Nr2_xOhiNM-biES6Dza1sMLrlxULFuctudO9lykB7yFh3LHMxtIZyIUHuy0RbjuOGC5PmDowLttZpPI_j4ynJHAaAWr8Ddz764WdQ\",\"e\":\"AQAB\"}]}";
 
     private static final char[] STORE_PASSWORD = "password".toCharArray();
 

File: cache-manager/src/main/java/com/networknt/cache/CacheManager.java
Patch:
@@ -7,6 +7,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.List;
+import java.util.Map;
 
 /**
  * CacheManager is a singleton class that is used to manage all the caches in the system. The underline implementation
@@ -38,6 +39,7 @@ static CacheManager getInstance() {
     }
 
     void addCache(String cacheName, long maxSize, long expiryInMinutes);
+    Map<Object, Object> getCache(String cacheName);
     void put(String cacheName, String key, Object value);
     Object get(String cacheName, String key);
     void delete(String cacheName, String key);

File: security/src/main/java/com/networknt/security/IJwtVerifyHandler.java
Patch:
@@ -23,7 +23,6 @@
  *
  * @author Steve Hu
  */
-
 public interface IJwtVerifyHandler {
     JwtVerifier getJwtVerifier();
 }

File: router-config/src/main/java/com/networknt/router/RouterConfig.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class RouterConfig {
     private static final Logger logger = LoggerFactory.getLogger(RouterConfig.class);
-    static final String CONFIG_NAME = "router";
+    public static final String CONFIG_NAME = "router";
     private static final String HTTP2_ENABLED = "http2Enabled";
     private static final String HTTPS_ENABLED = "httpsEnabled";
     private static final String REWRITE_HOST_HEADER = "rewriteHostHeader";

File: client/src/test/java/com/networknt/client/oauth/TokenResponseTest.java
Patch:
@@ -41,8 +41,7 @@ public void testErrorStatus() throws IOException {
         TokenResponse tokenResponse = Config.getInstance().getMapper().readValue(s, TokenResponse.class);
     }
 
-
-    @Test(expected = UnrecognizedPropertyException.class)
+    @Test
     public void testExtraFields() throws IOException {
         String s = "{\"access_token\":\"access_token\",\"token_type\":\"token_type\",\"expires_in\":3600,\"scope\":\"scope\",\"state\":\"state\",\"refresh_token\":\"refresh_token\",\"example_parameter\":\"example_parameter\",\"extra\":\"extra\"}";
         TokenResponse tokenResponse = Config.getInstance().getMapper().readValue(s, TokenResponse.class);

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -8,13 +8,12 @@
 import com.networknt.config.Config;
 import com.networknt.config.JsonMapper;
 import com.networknt.config.TlsUtil;
+import com.networknt.handler.AuditAttachmentUtil;
 import com.networknt.handler.Handler;
-import com.networknt.handler.HandlerUtils;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.config.UrlRewriteRule;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.common.ContentType;
-import com.networknt.metrics.MetricsConfig;
 import com.networknt.metrics.AbstractMetricsHandler;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
@@ -177,7 +176,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     }
 
                     // Audit log the endpoint info
-                    HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
+                    AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
 
                     invokeApi(exchange, (String)config.getAccessToken().get(config.SERVICE_HOST), requestPath, "Bearer " + accessToken, startTime, endpoint);
                     if(logger.isDebugEnabled()) logger.debug("MrasHandler.handleRequest ends.");

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -7,12 +7,11 @@
 import com.networknt.config.Config;
 import com.networknt.config.JsonMapper;
 import com.networknt.config.TlsUtil;
+import com.networknt.handler.AuditAttachmentUtil;
 import com.networknt.handler.Handler;
-import com.networknt.handler.HandlerUtils;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.config.UrlRewriteRule;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.metrics.MetricsConfig;
 import com.networknt.metrics.AbstractMetricsHandler;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
@@ -377,7 +376,7 @@ private void invokeApi(HttpServerExchange exchange, String authorization, String
         HttpRequest request = null;
 
         // Audit log the endpoint info
-        HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
+        AuditAttachmentUtil.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
 
         if(method.equalsIgnoreCase("GET")) {
             request = HttpRequest.newBuilder()

File: router-config/src/main/java/com/networknt/router/middleware/ServiceDictConfig.java
Patch:
@@ -1,7 +1,8 @@
 package com.networknt.router.middleware;
 
 import com.networknt.config.Config;
-import com.networknt.handler.HandlerUtils;
+import com.networknt.handler.config.HandlerUtils;
+import com.networknt.utility.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -79,7 +79,7 @@ static void initHandlers() {
             // initialize handlers
             for (var handler : config.getHandlers()) {
                 // handler is a fully qualified class name with a default constructor.
-                initStringDefinedHandler((String) handler);
+                initStringDefinedHandler(handler);
             }
         }
     }

File: audit/src/test/java/com/networknt/audit/ParameterHandler.java
Patch:
@@ -2,13 +2,13 @@
 
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.utility.PathTemplateMatcher;
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.server.handlers.Cookie;
 import io.undertow.server.handlers.CookieImpl;
 import io.undertow.util.Headers;
-import io.undertow.util.PathTemplateMatcher;
 
 import java.util.Map;
 
@@ -20,7 +20,7 @@
  *
  */
 public class ParameterHandler implements MiddlewareHandler {
-    private static PathTemplateMatcher<String> pathTemplateMatcher = new PathTemplateMatcher<>();
+    private static final PathTemplateMatcher<String> pathTemplateMatcher = new PathTemplateMatcher<>();
     private volatile HttpHandler next;
 
     static {

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -21,12 +21,12 @@
 import com.networknt.handler.config.HandlerConfig;
 import com.networknt.handler.config.PathChain;
 import com.networknt.utility.ModuleRegistry;
+import com.networknt.utility.PathTemplateMatcher;
 import com.networknt.utility.Tuple;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.AttachmentKey;
 import io.undertow.util.HttpString;
-import io.undertow.util.PathTemplateMatcher;
 import io.undertow.websockets.WebSocketConnectionCallback;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: handler/src/test/java/com/networknt/handler/HandlerTest.java
Patch:
@@ -18,11 +18,11 @@
 
 import com.networknt.handler.config.EndpointSource;
 import com.networknt.handler.config.PathChain;
+import com.networknt.utility.PathTemplateMatcher;
 import com.networknt.utility.Tuple;
 import io.undertow.server.HttpHandler;
 import io.undertow.util.HttpString;
 import io.undertow.util.Methods;
-import io.undertow.util.PathTemplateMatcher;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -106,7 +106,7 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
                 tags.put(Constants.ENDPOINT_STRING, (String) auditInfo.get(Constants.ENDPOINT_STRING));
             }
             String clientId = auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown";
-            if(logger.isTraceEnabled()) logger.trace("clientId = " + clientId);
+            if(logger.isTraceEnabled()) logger.trace("clientId = {}", clientId);
             tags.put("clientId", clientId);
             // scope client id will only be available if two token is used. For example, authorization code flow.
             if (config.isSendScopeClientId()) {
@@ -152,7 +152,8 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
         metricName = metricName.tagged(tags);
         long time = System.nanoTime() - startTime;
         registry.getOrAdd(metricName, MetricRegistry.MetricBuilder.TIMERS).update(time, TimeUnit.NANOSECONDS);
-        if(logger.isTraceEnabled()) logger.trace("metricName = " + metricName  + " commonTags = " + JsonMapper.toJson(commonTags) + " tags = " + JsonMapper.toJson(tags));
+        if(logger.isTraceEnabled())
+            logger.trace("metricName = {} commonTags = {} tags = {}", metricName, JsonMapper.toJson(commonTags), JsonMapper.toJson(tags));
         // the metrics handler will collect the status code metrics and increase the counter. Here we don't want to increase it again.
         // incCounterForStatusCode(httpServerExchange.getStatusCode(), commonTags, tags);
     }

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -69,7 +69,7 @@ public void testMatchPath() {
         path = "/v1/pets/1/name";
         Assert.assertTrue(StringUtils.matchPathToPattern(path, pattern));
         pattern = "/v1/pets/{petId}";
-        Assert.assertFalse(StringUtils.matchPathToPattern(path, pattern));
+        Assert.assertTrue(StringUtils.matchPathToPattern(path, pattern));
 
         pattern = "/foo/bar";
         Assert.assertTrue(StringUtils.matchPathToPattern("/foo/bar", pattern));

File: proxy-handler/src/main/java/com/networknt/handler/ProxyHandler.java
Patch:
@@ -627,9 +627,9 @@ private HttpString createProxyRequestMethod(String target) {
                 if (LOG.isTraceEnabled()) LOG.trace("method rewrite rules size {}", this.methodRewriteRules.size());
                 for (var rule : this.methodRewriteRules) {
                     if(LOG.isTraceEnabled()) LOG.trace("rule sourceMethod {} targetMethod {} requestPath {}", rule.getSourceMethod(), rule.getTargetMethod(), rule.getRequestPath());
-                    if (target.startsWith(rule.getRequestPath()) && m.toString().equals(rule.getSourceMethod())) {
+                    if (StringUtils.matchPathToPattern(target, rule.getRequestPath()) && m.toString().equals(rule.getSourceMethod())) {
                         if (LOG.isDebugEnabled())
-                            LOG.debug("Rewrite HTTP method from {} to {} with path {} and pathPrefix {}", rule.getSourceMethod(), rule.getTargetMethod(), target, rule.getRequestPath());
+                            LOG.debug("Rewrite HTTP method from {} to {} with path {} and pathPattern {}", rule.getSourceMethod(), rule.getTargetMethod(), target, rule.getRequestPath());
                         m = new HttpString(rule.getTargetMethod());
                     }
                 }

File: utility/src/main/java/com/networknt/utility/StringUtils.java
Patch:
@@ -1498,9 +1498,6 @@ public static String maskHalfString(String str) {
     public static boolean matchPathToPattern(String requestPath, String endpointPattern) {
         String[] pathPatternParts = endpointPattern.split("/");
         String[] pathParts = requestPath.split("/");
-        if (pathPatternParts.length != pathParts.length) {
-            return false;
-        }
 
         boolean isMatch = true;
         for (int i = 0; i < pathPatternParts.length; i++) {

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -135,7 +135,7 @@ public class Http2Client {
 
 
     // TokenManager is to manage cached jwt tokens for this client.
-    private TokenManager tokenManager = TokenManager.getInstance();
+    private final TokenManager tokenManager = TokenManager.getInstance();
 
     // This is the old connection pool that is kept for backward compatibility.
     private final Http2ClientConnectionPool http2ClientConnectionPool = Http2ClientConnectionPool.getInstance();

File: config/src/main/java/com/networknt/config/PathPrefixAuth.java
Patch:
@@ -1,6 +1,4 @@
-package com.networknt.proxy;
-
-import com.networknt.config.ConfigInjection;
+package com.networknt.config;
 
 /**
  * This is an object that contains all the authentication info for each path prefix in the pathPrefixAuth config

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceConfig.java
Patch:
@@ -5,7 +5,7 @@
 import com.networknt.config.ConfigException;
 import com.networknt.config.JsonMapper;
 import com.networknt.handler.config.UrlRewriteRule;
-import com.networknt.proxy.PathPrefixAuth;
+import com.networknt.config.PathPrefixAuth;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.proxy.salesforce;
 
-import com.networknt.body.BodyHandler;
 import com.networknt.client.ClientConfig;
 import com.networknt.client.Http2Client;
 import com.networknt.client.oauth.TokenResponse;
@@ -19,7 +18,7 @@
 import com.networknt.monad.Result;
 import com.networknt.monad.Success;
 import com.networknt.proxy.MultiPartBodyPublisher;
-import com.networknt.proxy.PathPrefixAuth;
+import com.networknt.config.PathPrefixAuth;
 import com.networknt.status.Status;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;

File: ingress-proxy/src/test/java/com/networknt/proxy/mras/MrasConfigTest.java
Patch:
@@ -2,8 +2,6 @@
 
 import com.networknt.common.ContentType;
 import com.networknt.handler.config.UrlRewriteRule;
-import com.networknt.proxy.PathPrefixAuth;
-import com.networknt.proxy.salesforce.SalesforceConfig;
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;

File: ingress-proxy/src/test/java/com/networknt/proxy/salesforce/SalesforceConfigTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.networknt.proxy.salesforce;
 
 import com.networknt.handler.config.UrlRewriteRule;
-import com.networknt.proxy.PathPrefixAuth;
+import com.networknt.config.PathPrefixAuth;
 import org.junit.Assert;
 import org.junit.Test;
 

File: client/src/test/java/com/networknt/client/oauth/LongestExpireCacheStrategyTest.java
Patch:
@@ -50,20 +50,20 @@ private static ArrayList<Jwt> createJwts(int num, long expiryTime) {
         ArrayList<Jwt> jwts = new ArrayList<>();
         for(int i = 0; i < num; i++) {
             Jwt jwt = new Jwt();
-            jwt.setScopes(new HashSet<>(Arrays.asList(getScopes(i+1))));
+            jwt.setScopes(getScopes(i+1));
             jwt.setExpire(expiryTime + i);
             jwts.add(jwt);
         }
         return jwts;
     }
 
-    private static String[] getScopes(int numsOfScopes){
+    private static String getScopes(int numsOfScopes){
         String[] scopes = {"eat", "drink", "sleep", "study"};
         int length = numsOfScopes > scopes.length ? numsOfScopes%scopes.length : numsOfScopes;
         String[] result = new String[length];
         for(int i = 1; i <= length; i++) {
             result[i - 1] = scopes[i - 1];
         }
-        return result;
+        return String.join(" ", result);
     }
 }

File: token-config/src/main/java/com/networknt/router/middleware/TokenConfig.java
Patch:
@@ -10,7 +10,7 @@
 
 public class TokenConfig {
     private static final Logger logger = LoggerFactory.getLogger(TokenConfig.class);
-    static final String CONFIG_NAME = "token";
+    public static final String CONFIG_NAME = "token";
     private static final String ENABLED = "enabled";
     private static final String APPLIED_PATH_PREFIXES = "appliedPathPrefixes";
 

File: sidecar-config/src/main/java/com/networknt/router/SidecarConfig.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.router;
 
 import com.networknt.config.Config;
-import com.networknt.config.ConfigException;
 
 import java.util.Map;
 

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -114,7 +114,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         Map<String, Object> objMap = new HashMap<>();
                         objMap.put("auditInfo", auditInfo);
                         objMap.put("requestHeaders", exchange.getRequestHeaders());
-                        objMap.put("responseHeaders", exchange.getRequestHeaders());
+                        objMap.put("responseHeaders", exchange.getResponseHeaders());
                         objMap.put("queryParameters", exchange.getQueryParameters());
                         objMap.put("pathParameters", exchange.getPathParameters());
                         objMap.put("method", method);

File: ldap-util/src/main/java/com/networknt/ldap/LdapSSLSocketFactory.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.ldap;
 
-import com.networknt.client.Http2Client;
+import com.networknt.http.client.HttpClientRequest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -18,7 +18,7 @@ public class LdapSSLSocketFactory extends SSLSocketFactory {
 
     public LdapSSLSocketFactory() {
         try {
-            SSLContext ctx = Http2Client.createSSLContext();
+            SSLContext ctx = HttpClientRequest.createSSLContext();
             socketFactory = ctx.getSocketFactory();
         } catch ( Exception ex ){ throw new IllegalArgumentException(ex); }
     }

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -281,8 +281,6 @@ private boolean createJavaHttpClient() {
         return true;
     }
 
-
-
     /**
      * Builds the request URL for an HttpRequest.
      *

File: limit-config/src/main/java/com/networknt/limit/LimitConfig.java
Patch:
@@ -405,7 +405,7 @@ public static RateLimitSet populateFromMap(Map<String, Object> map) {
     }
 
     public static class RateLimitSet {
-        Map<String, List<LimitQuota>>  directMaps;
+        public Map<String, List<LimitQuota>>  directMaps;
 
         public RateLimitSet() {
 

File: rate-limit/src/main/java/com/networknt/limit/key/JwtHeaderClientIdKeyResolver.java
Patch:
@@ -28,7 +28,7 @@ public String resolve(HttpServerExchange exchange) {
         }
         if(key == null) {
             // try to get the key from the header
-            HeaderMap headerMap = exchange.getResponseHeaders();
+            HeaderMap headerMap = exchange.getRequestHeaders();
             HeaderValues values = headerMap.get("Client-Id");
             if(values != null) key = values.getFirst();
         }

File: sanitizer-config/src/test/java/com/networknt/sanitizer/EncoderWrapperTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.sanitizer;
 
+import org.owasp.encoder.EncoderWrapper;
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.owasp.encoder.*;

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.networknt.sanitizer;
 
-import com.networknt.body.BodyHandler;
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
@@ -27,7 +26,6 @@
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.HeaderMap;
 import io.undertow.util.HeaderValues;
-import io.undertow.util.HttpString;
 import org.owasp.encoder.EncoderWrapper;
 import org.owasp.encoder.Encoders;
 

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -80,7 +80,7 @@ public class TokenHandler implements MiddlewareHandler {
     static Logger logger = LoggerFactory.getLogger(TokenHandler.class);
     protected volatile HttpHandler next;
     // Cached jwt token for this handler on behalf of a client by serviceId as the key
-    public final static Map<String, Jwt> cache = new ConcurrentHashMap();
+    public final static Map<String, Jwt> cache = new ConcurrentHashMap<String, Jwt>();
     public TokenHandler() {
         if(logger.isInfoEnabled()) logger.info("TokenHandler is loaded.");
         config = TokenConfig.load();

File: api-key/src/test/java/com/networknt/apikey/ApiKeyHandlerTest.java
Patch:
@@ -14,7 +14,6 @@
 import io.undertow.util.Headers;
 import io.undertow.util.HttpString;
 import io.undertow.util.Methods;
-import org.apache.commons.codec.binary.Base64;
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -28,8 +27,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
-
 public class ApiKeyHandlerTest {
     static final Logger logger = LoggerFactory.getLogger(ApiKeyHandlerTest.class);
 

File: api-key/src/test/java/com/networknt/apikey/ApiKeyJsonConfigTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.networknt.apikey;
 
 import org.junit.Assert;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: balance/src/main/java/com/networknt/balance/LocalFirstLoadBalance.java
Patch:
@@ -17,11 +17,10 @@
 package com.networknt.balance;
 
 import com.networknt.registry.URL;
+import com.networknt.utility.Util;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.networknt.utility.Util;
-
 import java.net.InetAddress;
 import java.util.ArrayList;
 import java.util.List;

File: balance/src/test/java/com/networknt/balance/RoundRobinLoadBalanceTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.networknt.registry.URL;
 import com.networknt.registry.URLImpl;
-import com.networknt.service.SingletonServiceFactory;
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -1,11 +1,11 @@
 package com.networknt.body;
 
+import com.networknt.common.ContentType;
 import com.networknt.config.Config;
 import com.networknt.handler.BuffersUtils;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.RequestInterceptor;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.common.ContentType;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
 import io.undertow.connector.PooledByteBuffer;

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -1,11 +1,11 @@
 package com.networknt.body;
 
+import com.networknt.common.ContentType;
 import com.networknt.config.Config;
 import com.networknt.handler.BuffersUtils;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.ResponseInterceptor;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.common.ContentType;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;

File: client/src/integration/java/com/networknt/client/Http2ClientPoolIT.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.networknt.config.Config;
 import com.networknt.httpstring.HttpStringConstants;
-import com.networknt.utility.Constants;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
 import io.undertow.client.*;

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -33,7 +33,7 @@
 import com.networknt.client.ssl.TLSConfig;
 import com.networknt.cluster.Cluster;
 import com.networknt.config.Config;
-import com.networknt.httpstring.AttachmentConstants;
+import com.networknt.config.TlsUtil;
 import com.networknt.exception.ClientException;
 import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.monad.Failure;
@@ -42,7 +42,6 @@
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
-import com.networknt.config.TlsUtil;
 import com.networknt.utility.StringUtils;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
@@ -82,6 +81,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
+
 import static io.undertow.client.http.HttpClientProvider.DISABLE_HTTPS_ENDPOINT_IDENTIFICATION_PROPERTY;
 
 /**

File: client/src/main/java/com/networknt/client/http/Http2ServiceRequest.java
Patch:
@@ -5,8 +5,8 @@
 import com.networknt.client.model.HttpVerb;
 import com.networknt.client.model.ServiceDef;
 import com.networknt.cluster.Cluster;
-import com.networknt.config.Config;
 import com.networknt.common.ContentType;
+import com.networknt.config.Config;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
 import com.networknt.monad.Success;

File: client/src/main/java/com/networknt/client/http/HttpRequestValue.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.networknt.common.ContentType;
 
-
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;

File: client/src/main/java/com/networknt/client/simplepool/SimpleConnectionHolder.java
Patch:
@@ -28,9 +28,9 @@
 
 import java.net.InetSocketAddress;
 import java.net.URI;
-import java.util.Set;
-import java.util.List;
 import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 /***

File: client/src/main/java/com/networknt/client/simplepool/SimpleConnectionMaker.java
Patch:
@@ -24,8 +24,8 @@
 import org.xnio.XnioWorker;
 import org.xnio.ssl.XnioSsl;
 
-import java.net.URI;
 import java.net.InetSocketAddress;
+import java.net.URI;
 import java.util.Set;
 
 /***

File: client/src/main/java/com/networknt/client/simplepool/SimpleURIConnectionPool.java
Patch:
@@ -23,13 +23,14 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xnio.OptionMap;
-import org.xnio.XnioIoThread;
 import org.xnio.XnioWorker;
 import org.xnio.ssl.XnioSsl;
 
 import java.net.InetSocketAddress;
 import java.net.URI;
-import java.util.*;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ThreadLocalRandom;
 

File: client/src/main/java/com/networknt/client/simplepool/undertow/SimpleClientConnectionMaker.java
Patch:
@@ -28,13 +28,14 @@
 import io.undertow.client.ClientCallback;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.UndertowClient;
-import io.undertow.protocols.ssl.UndertowXnioSsl;
 import io.undertow.connector.ByteBufferPool;
+import io.undertow.protocols.ssl.UndertowXnioSsl;
 import io.undertow.server.DefaultByteBufferPool;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xnio.*;
 import org.xnio.ssl.XnioSsl;
+
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.URI;

File: client/src/main/java/com/networknt/client/ssl/CompositeX509TrustManager.java
Patch:
@@ -1,13 +1,12 @@
 package com.networknt.client.ssl;
 
+import javax.net.ssl.X509TrustManager;
 import java.security.cert.CertificateException;
 import java.security.cert.X509Certificate;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import javax.net.ssl.X509TrustManager;
-
 /**
  * Represents an ordered list of {@link X509TrustManager}s with additive trust. If any one of the
  * composed managers trusts a certificate chain, then it is trusted by the composite manager.

File: client/src/main/java/org/apache/hc/client5/http/psl/copied/PublicSuffixList.java
Patch:
@@ -26,13 +26,13 @@
  */
 package org.apache.hc.client5.http.psl.copied;
 
-import java.util.Collections;
-import java.util.List;
-
 import org.apache.hc.core5.annotation.copied.Contract;
 import org.apache.hc.core5.annotation.copied.ThreadingBehavior;
 import org.apache.hc.core5.util.copied.Args;
 
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Public suffix is a set of DNS names or wildcards concatenated with dots. It represents
  * the part of a domain name which is not under the control of the individual registrant

File: client/src/main/java/org/apache/hc/core5/http/message/copied/BasicNameValuePair.java
Patch:
@@ -27,15 +27,15 @@
 
 package org.apache.hc.core5.http.message.copied;
 
-import java.io.Serializable;
-import java.util.Locale;
-
 import org.apache.hc.core5.annotation.copied.Contract;
 import org.apache.hc.core5.annotation.copied.ThreadingBehavior;
 import org.apache.hc.core5.http.copied.NameValuePair;
 import org.apache.hc.core5.util.copied.Args;
 import org.apache.hc.core5.util.copied.LangUtils;
 
+import java.io.Serializable;
+import java.util.Locale;
+
 /**
  * Basic implementation of {@link NameValuePair}.
  *

File: client/src/main/java/org/apache/hc/core5/http/message/copied/TokenParser.java
Patch:
@@ -27,12 +27,12 @@
 
 package org.apache.hc.core5.http.message.copied;
 
-import java.util.BitSet;
-
 import org.apache.hc.core5.annotation.copied.Contract;
 import org.apache.hc.core5.annotation.copied.ThreadingBehavior;
 import org.apache.hc.core5.util.copied.Args;
 
+import java.util.BitSet;
+
 /**
  * Low level parser for header field elements. The parsing routines of this class are designed
  * to produce near zero intermediate garbage and make no intermediate copies of input data.

File: client/src/main/java/org/apache/hc/core5/net/copied/InetAddressUtils.java
Patch:
@@ -27,14 +27,14 @@
 
 package org.apache.hc.core5.net.copied;
 
+import org.apache.hc.core5.util.copied.Args;
+
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.net.UnknownHostException;
 import java.util.regex.Pattern;
 
-import org.apache.hc.core5.util.copied.Args;
-
 /**
  * A collection of utilities relating to InetAddresses.
  *

File: client/src/main/java/org/apache/hc/core5/util/copied/Args.java
Patch:
@@ -27,10 +27,10 @@
 
 package org.apache.hc.core5.util.copied;
 
-import java.util.Collection;
-
 import org.apache.hc.core5.http.copied.EntityDetails;
 
+import java.util.Collection;
+
 public class Args {
 
     public static void check(final boolean expression, final String message) {

File: client/src/main/java/org/apache/hc/core5/util/copied/CharArrayBuffer.java
Patch:
@@ -27,11 +27,11 @@
 
 package org.apache.hc.core5.util.copied;
 
+import org.apache.hc.core5.http.copied.Chars;
+
 import java.io.Serializable;
 import java.nio.CharBuffer;
 
-import org.apache.hc.core5.http.copied.Chars;
-
 /**
  * A resizable char array.
  *

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -39,7 +39,7 @@
 import org.xnio.*;
 import org.xnio.ssl.XnioSsl;
 
-import javax.net.ssl.*;
+import javax.net.ssl.SSLContext;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
@@ -50,6 +50,7 @@
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
+
 import static org.junit.Assert.*;
 
 public class Http2ClientTest extends Http2ClientBase {

File: client/src/test/java/com/networknt/client/HttpRequestSSLContextTest.java
Patch:
@@ -14,6 +14,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xnio.OptionMap;
+
 import java.io.IOException;
 import java.net.URI;
 import java.util.Map;

File: client/src/test/java/com/networknt/client/MultipleAuthServerTest.java
Patch:
@@ -1,14 +1,11 @@
 package com.networknt.client;
 
 import com.networknt.client.oauth.TokenKeyRequest;
-import com.networknt.config.Config;
 import com.networknt.config.JsonMapper;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.List;
 import java.util.Map;
 
 import static com.networknt.client.ClientConfig.CLIENT_CREDENTIALS;

File: client/src/test/java/com/networknt/client/SingleAuthServerTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.client;
+
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.IOException;

File: client/src/test/java/com/networknt/client/http/Http2ServiceRequestTest.java
Patch:
@@ -10,7 +10,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static junit.framework.TestCase.*;
+import static junit.framework.TestCase.assertFalse;
+import static junit.framework.TestCase.assertTrue;
 
 
 public class Http2ServiceRequestTest {

File: client/src/test/java/com/networknt/client/http/HttpRequestValueTest.java
Patch:
@@ -4,7 +4,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-
 import static junit.framework.TestCase.assertNotNull;
 import static junit.framework.TestCase.assertTrue;
 

File: client/src/test/java/com/networknt/client/http/HttpResponseValueTest.java
Patch:
@@ -7,7 +7,6 @@
 import java.io.*;
 import java.nio.ByteBuffer;
 
-
 import static junit.framework.TestCase.assertNotNull;
 import static junit.framework.TestCase.assertTrue;
 

File: client/src/test/java/com/networknt/client/oauth/LongestExpireCacheStrategyTest.java
Patch:
@@ -6,7 +6,9 @@
 import org.junit.Test;
 
 import java.lang.reflect.Field;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.PriorityBlockingQueue;
 

File: client/src/test/java/com/networknt/client/oauth/ProxyHostTest.java
Patch:
@@ -3,7 +3,6 @@
 import com.networknt.client.ClientConfig;
 import org.junit.Assert;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.IOException;

File: client/src/test/java/com/networknt/client/rest/RestClientTemplateTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.InputStream;
 import java.security.*;
 import java.security.cert.CertificateException;
+
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 

File: client/src/test/java/com/networknt/client/simplepool/TestRunner.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import java.net.URI;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ThreadLocalRandom;

File: client/src/test/java/com/networknt/client/simplepool/mockexample/MockKeepAliveConnection.java
Patch:
@@ -20,6 +20,7 @@
 package com.networknt.client.simplepool.mockexample;
 
 import com.networknt.client.simplepool.SimpleConnection;
+
 import java.util.concurrent.ThreadLocalRandom;
 
 public class MockKeepAliveConnection implements SimpleConnection {

File: client/src/test/java/com/networknt/client/simplepool/mockexample/MockRandomlyClosingConnection.java
Patch:
@@ -20,6 +20,7 @@
 package com.networknt.client.simplepool.mockexample;
 
 import com.networknt.client.simplepool.SimpleConnection;
+
 import java.util.concurrent.ThreadLocalRandom;
 
 public class MockRandomlyClosingConnection implements SimpleConnection {

File: client/src/test/java/com/networknt/client/simplepool/mockexample/MockTimeoutLeakedConnection.java
Patch:
@@ -20,6 +20,7 @@
 package com.networknt.client.simplepool.mockexample;
 
 import com.networknt.client.simplepool.SimpleConnection;
+
 import java.util.concurrent.ThreadLocalRandom;
 
 public class MockTimeoutLeakedConnection implements SimpleConnection {

File: common/src/main/java/com/networknt/common/DecryptUtil.java
Patch:
@@ -16,8 +16,8 @@
 
 package com.networknt.common;
 
-import com.networknt.service.SingletonServiceFactory;
 import com.networknt.decrypt.Decryptor;
+import com.networknt.service.SingletonServiceFactory;
 
 import java.util.List;
 import java.util.Map;

File: config/src/main/java/com/networknt/config/yml/DecryptConstructor.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.config.yml;
 
 import com.networknt.decrypt.AutoAESSaltDecryptor;
+import com.networknt.decrypt.Decryptor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.yaml.snakeyaml.LoaderOptions;
@@ -9,8 +10,6 @@
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.ScalarNode;
 
-import com.networknt.decrypt.Decryptor;
-
 /**
  * Decrypts values in configuration yml files.
  *

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -1,9 +1,9 @@
 package com.networknt.config.yml;
 
-import java.util.regex.Pattern;
-
 import org.yaml.snakeyaml.nodes.Tag;
 
+import java.util.regex.Pattern;
+
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
 	public static final Pattern CRYPT_PATTERN = Pattern.compile("^CRYPT:.*$");

File: config/src/test/java/com/networknt/config/TlsUtilTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.config;
 
-import com.networknt.config.TlsUtil;
 import org.junit.Assert;
 import org.junit.Test;
 

File: consul/src/main/java/com/networknt/consul/ConsulConfig.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.consul;
 
 import com.networknt.config.Config;
-import com.networknt.config.ConfigException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: consul/src/main/java/com/networknt/consul/ConsulRecoveryManager.java
Patch:
@@ -3,6 +3,7 @@
 import com.networknt.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -21,7 +21,6 @@
 import com.networknt.consul.client.ConsulClient;
 import com.networknt.registry.NotifyListener;
 import com.networknt.registry.URL;
-import com.networknt.registry.URLParamType;
 import com.networknt.registry.support.AbstractRegistry;
 import com.networknt.status.Status;
 import com.networknt.utility.ConcurrentHashSet;

File: consul/src/main/java/com/networknt/consul/ConsulThreadMonitor.java
Patch:
@@ -3,6 +3,7 @@
 import com.networknt.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 

File: consul/src/main/java/com/networknt/consul/client/ConsulClient.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.networknt.consul.client;
 
-import java.util.List;
-
 import com.networknt.consul.ConsulResponse;
 import com.networknt.consul.ConsulService;
 
+import java.util.List;
+
 public interface ConsulClient {
 
 	/**

File: consul/src/test/java/com/networknt/consul/ConsulClientImplTest.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.consul;
 
 import com.networknt.config.Config;
-import com.networknt.consul.client.ConsulClientImpl;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;

File: consul/src/test/java/com/networknt/consul/MockUtils.java
Patch:
@@ -16,9 +16,8 @@
 
 package com.networknt.consul;
 
-import com.networknt.registry.URLImpl;
-import com.networknt.registry.URLParamType;
 import com.networknt.registry.URL;
+import com.networknt.registry.URLImpl;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: content/src/main/java/com/networknt/content/ContentConfig.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.content;
 
 import com.networknt.config.Config;
-import com.networknt.config.ConfigException;
 
 import java.util.Map;
 

File: dump/src/main/java/com/networknt/dump/AbstractDumper.java
Patch:
@@ -17,10 +17,7 @@
 package com.networknt.dump;
 
 import io.undertow.server.HttpServerExchange;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
-import java.util.HashMap;
 import java.util.Map;
 
 /**

File: dump/src/main/java/com/networknt/dump/BodyDumper.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.networknt.dump;
 
-import com.networknt.body.BodyHandler;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.mask.Mask;
 import com.networknt.utility.StringUtils;
@@ -28,7 +27,6 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
 import static java.nio.charset.StandardCharsets.UTF_8;

File: handler/src/main/java/com/networknt/handler/HandlerUtils.java
Patch:
@@ -1,7 +1,6 @@
 package com.networknt.handler;
 
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.utility.Constants;
 import com.networknt.utility.StringUtils;
 import io.undertow.server.HttpServerExchange;
 import org.slf4j.Logger;

File: handler/src/main/java/com/networknt/handler/Interceptor.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;
-import com.networknt.config.Config;
 import com.networknt.common.ContentType;
+import com.networknt.config.Config;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.AttachmentKey;
 import io.undertow.util.HeaderMap;

File: header/src/test/java/com/networknt/header/HeaderHandlerTest.java
Patch:
@@ -39,10 +39,10 @@
 import org.xnio.OptionMap;
 
 import java.net.URI;
+import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Map;
 import java.util.List;
-import java.util.ArrayList;
+import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicReference;
 

File: health/src/test/java/com/networknt/health/HealthGetHandlerTest.java
Patch:
@@ -17,8 +17,6 @@
 package com.networknt.health;
 
 import com.networknt.client.Http2Client;
-import com.networknt.config.Config;
-import com.networknt.config.JsonMapper;
 import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -18,13 +18,13 @@
 
 import com.networknt.config.Config;
 import com.networknt.handler.LightHttpHandler;
-import com.networknt.security.IJwtVerifyHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import java.util.*;
+
+import java.util.Map;
 
 /**
  * This is a server info handler that output the runtime info about the server. For example, how many

File: metrics/src/main/java/io/dropwizard/metrics/EWMA.java
Patch:
@@ -17,9 +17,9 @@
 package io.dropwizard.metrics;
 
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.LongAdder;
 
 import static java.lang.Math.exp;
-import java.util.concurrent.atomic.LongAdder;
 /**
  * An exponentially-weighted moving average.
  *

File: metrics/src/main/java/io/dropwizard/metrics/JmxReporter.java
Patch:
@@ -20,7 +20,6 @@
 import org.slf4j.LoggerFactory;
 
 import javax.management.*;
-
 import java.io.Closeable;
 import java.lang.management.ManagementFactory;
 import java.util.Collections;

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -22,7 +22,9 @@
 import com.networknt.metrics.TimeSeriesDbSender;
 import io.dropwizard.metrics.influxdb.data.InfluxDbPoint;
 import io.dropwizard.metrics.influxdb.data.InfluxDbWriteObject;
-import io.undertow.client.*;
+import io.undertow.client.ClientConnection;
+import io.undertow.client.ClientRequest;
+import io.undertow.client.ClientResponse;
 import io.undertow.util.Headers;
 import io.undertow.util.Methods;
 import org.slf4j.Logger;

File: security/src/main/java/com/networknt/security/JwtIssuer.java
Patch:
@@ -25,8 +25,6 @@
 
 import java.security.KeyStore;
 import java.security.PrivateKey;
-import java.security.interfaces.RSAPrivateKey;
-import java.util.Map;
 
 /**
  * JWT token issuer helper utility that use by light-ouath2 token and code services to

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.networknt.common.SecretConstants;
 import com.networknt.config.Config;
+import com.networknt.config.TlsUtil;
 import com.networknt.handler.Handler;
 import com.networknt.handler.HandlerProvider;
 import com.networknt.handler.MiddlewareHandler;
@@ -31,7 +32,6 @@
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.NetUtils;
-import com.networknt.config.TlsUtil;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;

File: server/src/main/java/com/networknt/server/model/ServerShutdownResponse.java
Patch:
@@ -1,9 +1,9 @@
 package com.networknt.server.model;
 
-import java.util.Objects;
-
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+import java.util.Objects;
+
 /**
  *
  * POJO class for response body of shutdown endpoint.

File: server/src/test/java/com/networknt/server/RegistryTest.java
Patch:
@@ -17,7 +17,9 @@
 package com.networknt.server;
 
 import com.networknt.config.Config;
-import org.junit.*;
+import org.junit.Assert;
+import org.junit.Ignore;
+import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: server/src/test/java/com/networknt/server/TestHandler.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.server;
 
 import com.networknt.handler.LightHttpHandler;
-import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 
 /**

File: status/src/test/java/com/networknt/status/SeparateClassloaderTestRunner.java
Patch:
@@ -25,8 +25,6 @@
 import java.net.URLClassLoader;
 import java.nio.file.Paths;
 
-import static java.lang.ClassLoader.getSystemClassLoader;
-
 public class SeparateClassloaderTestRunner  extends BlockJUnit4ClassRunner {
 
     public SeparateClassloaderTestRunner(Class<?> clazz) throws InitializationError {

File: status/src/test/java/com/networknt/status/StatusSerializerTest.java
Patch:
@@ -23,9 +23,7 @@
 import org.junit.Test;
 
 import java.io.File;
-import java.lang.reflect.Method;
 import java.net.URL;
-import java.net.URLClassLoader;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -69,7 +69,7 @@ public void testMatchPath() {
         path = "/v1/pets/1/name";
         Assert.assertTrue(StringUtils.matchPathToPattern(path, pattern));
         pattern = "/v1/pets/{petId}";
-        Assert.assertTrue(StringUtils.matchPathToPattern(path, pattern));
+        Assert.assertFalse(StringUtils.matchPathToPattern(path, pattern));
 
         pattern = "/foo/bar";
         Assert.assertTrue(StringUtils.matchPathToPattern("/foo/bar", pattern));

File: utility/src/main/java/com/networknt/utility/StringUtils.java
Patch:
@@ -1498,6 +1498,9 @@ public static String maskHalfString(String str) {
     public static boolean matchPathToPattern(String requestPath, String endpointPattern) {
         String[] pathPatternParts = endpointPattern.split("/");
         String[] pathParts = requestPath.split("/");
+        if (pathPatternParts.length != pathParts.length) {
+            return false;
+        }
 
         boolean isMatch = true;
         for (int i = 0; i < pathPatternParts.length; i++) {

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -81,5 +81,7 @@ public void testMatchPath() {
         pattern = "/gateway/dev/ph-l4j-files/file?version=1";
         Assert.assertTrue(StringUtils.matchPathToPattern("/gateway/dev/ph-l4j-files/file?version=1", pattern));
 
+        pattern = "/gateway/dev/ph-l4j-files/file/05048267?version=1";
+        Assert.assertFalse(StringUtils.matchPathToPattern("/gateway/dev/ph-l4j-files/file?version=1", pattern));
     }
 }

File: config-reload/src/main/java/com/networknt/config/reload/handler/ConfigReloadHandler.java
Patch:
@@ -44,7 +44,7 @@ public class ConfigReloadHandler implements LightHttpHandler {
     public ConfigReloadHandler() {
         if(logger.isDebugEnabled()) logger.debug("ConfigReloadHandler is constructed");
         config = ConfigReloadConfig.load();
-        ModuleRegistry.registerModule(ConfigReloadConfig.CONFIG_NAME, ConfigReloadHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ConfigReloadHandler.CONFIG_NAME),null);
+        ModuleRegistry.registerModule(ConfigReloadConfig.CONFIG_NAME, ConfigReloadHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ConfigReloadConfig.CONFIG_NAME),null);
     }
 
     @Override

File: rate-limit/src/main/java/com/networknt/limit/RateLimiter.java
Patch:
@@ -4,7 +4,6 @@
 import com.networknt.limit.key.KeyResolver;
 import com.networknt.status.Status;
 import com.networknt.utility.Constants;
-
 import io.undertow.server.HttpServerExchange;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: handler-config/src/main/java/com/networknt/handler/config/HandlerConfig.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.networknt.config.Config;
 import com.networknt.config.ConfigException;
-import com.networknt.config.JsonMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -212,7 +212,7 @@ private synchronized void loadConfigs(String queryParameters) {
         // pass serviceConfigs through Config.yaml's load method so that it can decrypt any encrypted values
         DumperOptions options = new DumperOptions();
         options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);//to get yaml string without curly brackets and commas
-        serviceConfigs = Config.getInstance().getYaml().load(new Yaml(options).dump(serviceConfigs));
+        // serviceConfigs = Config.getInstance().getYaml().load(new Yaml(options).dump(serviceConfigs));
 
         // save the values.yml to the target folder. This is for the case of reload to overwrite and start without config server.
         try {
@@ -334,7 +334,7 @@ private Map<String, Object> getServiceConfigs(String configServerPath) {
                         configs = JsonMapper.string2Map(body);
                         processNestedMap(configs);
                     } else if(contentType.get().startsWith(ContentType.APPLICATION_YAML.value())) {
-                        configs = Config.getInstance().getYaml().load(body);
+                        configs = Config.getNoneDecryptedInstance().getYaml().load(body);
                     } else {
                         // the content type is not supported, throw an exception.
                         logger.error("The content type {} in the response from the config server is not supported.", contentType.get());

File: common/src/main/java/com/networknt/common/ContentType.java
Patch:
@@ -26,7 +26,7 @@ public enum ContentType {
     APPLICATION_JSON("application/json"),
     XML("text/xml"),
     APPLICATION_XML("application/xml"),
-    APPLICATION_YAML("application/yaml"),
+    APPLICATION_YAML("application/x-yaml"),
     APPLICATION_FORM_URLENCODED("application/x-www-form-urlencoded"),
     APPLICATION_PDF("application/pdf"),
     MULTIPART_MIXED("multipart/mixed"),

File: client/src/test/java/com/networknt/client/http/HttpRequestValueTest.java
Patch:
@@ -25,8 +25,8 @@ public void setUp() {
     @Test
     public void testBuildRequest(){
 
-        HttpRequestValue requestValue = HttpRequestValue.builder(ContentType.MULTIPART_MIXED_VALUE).with("file-info", ContentType.APPLICATION_JSON, fileName)
-        .with("file-body", ContentType.APPLICATION_PDF_VALUE, fileBody).build();
+        HttpRequestValue requestValue = HttpRequestValue.builder(ContentType.MULTIPART_MIXED).with("file-info", ContentType.APPLICATION_JSON, fileName)
+        .with("file-body", ContentType.APPLICATION_PDF, fileBody).build();
         assertTrue(requestValue.hasBody("file-body"));
         assertTrue(requestValue.hasBody("file-info"));
         assertNotNull(requestValue.getBody("file-info"));

File: client/src/test/java/com/networknt/client/http/HttpResponseValueTest.java
Patch:
@@ -31,7 +31,7 @@ public void setUp() {
     public void testBuildResponse() {
 
         HttpResponseValue responseValue = HttpResponseValue.builder().with("file-info", ContentType.APPLICATION_JSON, fileName)
-        .with("file-body", ContentType.APPLICATION_PDF_VALUE, fileBody).build();
+        .with("file-body", ContentType.APPLICATION_PDF, fileBody).build();
         assertTrue(responseValue.hasBody("file-body"));
         assertTrue(responseValue.hasBody("file-info"));
         assertNotNull(responseValue.getBody("file-info"));
@@ -40,7 +40,7 @@ public void testBuildResponse() {
     @Test
     public void testResponseValue() throws Exception {
         HttpResponseValue responseValue = HttpResponseValue.builder().with("file-info", ContentType.APPLICATION_JSON, fileName)
-                .with("file-body", ContentType.APPLICATION_PDF_VALUE, fileBody).build();
+                .with("file-body", ContentType.APPLICATION_PDF, fileBody).build();
 
         //Serialize the response value by sending response as buffer bytes
         //createClientCallback(final AtomicReference<ClientResponse> reference, final CountDownLatch latch, final ByteBuffer requestBody)

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -21,6 +21,7 @@
 import ch.qos.logback.core.joran.spi.JoranException;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.networknt.client.ClientConfig;
 import com.networknt.config.Config;
 import com.networknt.config.ConfigInjection;
 import com.networknt.config.JsonMapper;

File: client/src/test/java/com/networknt/client/MultipleAuthServerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testKeyConfig() {
             // iterate all the configured auth server to get JWK.
             Map<String, Object> tokenConfig = clientConfig.getTokenConfig();
             Map<String, Object> keyConfig = (Map<String, Object>) tokenConfig.get(ClientConfig.KEY);
-            Map<String, Object> serviceIdAuthServers = (Map<String, Object>) keyConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS);
+            Map<String, Object> serviceIdAuthServers = ClientConfig.getServiceIdAuthServers(keyConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS));
             if (serviceIdAuthServers == null) {
                 throw new RuntimeException("serviceIdAuthServers property is missing in the token key configuration");
             }

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -148,7 +148,7 @@ public static Result<Jwt> getJwtToken(String serviceId) {
 
             if(clientConfig.isMultipleAuthServers()) {
                 // get the right client credentials configuration based on the serviceId
-                Map<String, Object> serviceIdAuthServers = (Map<String, Object>)ccConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS);
+                Map<String, Object> serviceIdAuthServers = ClientConfig.getServiceIdAuthServers(ccConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS));
                 if(serviceIdAuthServers == null) {
                     throw new RuntimeException("serviceIdAuthServers property is missing in the token client credentials configuration");
                 }

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -489,7 +489,7 @@ private void getJsonWebKeyMap() {
         Map<String, Object> keyConfig = (Map<String, Object>) tokenConfig.get(ClientConfig.KEY);
         if (clientConfig.isMultipleAuthServers()) {
             // iterate all the configured auth server to get JWK.
-            Map<String, Object> serviceIdAuthServers = (Map<String, Object>) keyConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS);
+            Map<String, Object> serviceIdAuthServers = ClientConfig.getServiceIdAuthServers(keyConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS));
             if (serviceIdAuthServers != null && serviceIdAuthServers.size() > 0) {
                 audienceMap = new HashMap<>();
                 for (Map.Entry<String, Object> entry : serviceIdAuthServers.entrySet()) {

File: security/src/main/java/com/networknt/security/TokenVerifier.java
Patch:
@@ -18,7 +18,7 @@ protected Map<String, Object> getJwkConfig(ClientConfig clientConfig, String ser
         // get the serviceIdAuthServers for key definition
         Map<String, Object> tokenConfig = clientConfig.getTokenConfig();
         Map<String, Object> keyConfig = (Map<String, Object>) tokenConfig.get(ClientConfig.KEY);
-        Map<String, Object> serviceIdAuthServers = (Map<String, Object>) keyConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS);
+        Map<String, Object> serviceIdAuthServers = ClientConfig.getServiceIdAuthServers(keyConfig.get(ClientConfig.SERVICE_ID_AUTH_SERVERS));
         if (serviceIdAuthServers == null) {
             throw new ConfigException("serviceIdAuthServers property is missing in the token key configuration in client.yml");
         }

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -21,6 +21,7 @@
 import ch.qos.logback.core.joran.spi.JoranException;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.networknt.client.ClientConfig;
 import com.networknt.config.Config;
 import com.networknt.config.ConfigInjection;
 import com.networknt.config.JsonMapper;
@@ -100,7 +101,7 @@ private HttpClient createHttpClient() {
         }
         HttpClient.Builder clientBuilder = HttpClient.newBuilder()
                 .followRedirects(HttpClient.Redirect.NORMAL)
-                .connectTimeout(Duration.ofMillis(1000)) // default to 1 second timeout.
+                .connectTimeout(Duration.ofMillis(ClientConfig.get().getTimeout())) // client.timeout from the client.yml
                 .version(HttpClient.Version.HTTP_2)
                 .sslContext(createBootstrapContext());
         return clientBuilder.build();

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -79,7 +79,7 @@ public static Object getInjectValue(String string, boolean decrypt) {
                 return value;
             }
             String valueStr = (String)value;
-            if(valueStr.contains("\\")) {
+            if(valueStr.contains("\\$")) {
                 m.appendReplacement(sb, (String)value);
             } else {
                 m.appendReplacement(sb, Matcher.quoteReplacement((String)value));

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -570,9 +570,9 @@ public void callApiWithHttpConnectionPoolAsync() throws Exception {
         }
         latch.await(5, TimeUnit.SECONDS);
 
-        Assert.assertTrue(Http2ClientConnectionPool.getInstance().numberOfConnections() > 1);
-
         System.out.println("Number of connections: " + Http2ClientConnectionPool.getInstance().numberOfConnections());
+        Assert.assertTrue(Http2ClientConnectionPool.getInstance().numberOfConnections() >= 1);
+
         System.out.println("Completed: " + countComplete.get());
 
         // Reset to default

File: config/src/test/java/com/networknt/config/ConfigEscapeTest.java
Patch:
@@ -11,15 +11,15 @@ public class ConfigEscapeTest {
     @Test
     public void testGetInjectValueWithDollar() {
         String s1 = "${password:abc$defg}";
-        Object obj = getInjectValue(s1);
+        Object obj = getInjectValue(s1, true);
         System.out.println(obj);
 
     }
 
     @Test
     public void testGetInjectValueWithBackSlash() {
         String s2 = "${password:abc\\$defg}";
-        Object obj = getInjectValue(s2);
+        Object obj = getInjectValue(s2, true);
         System.out.println(obj);
     }
 

File: config/src/test/java/com/networknt/config/ConfigInjectionTest.java
Patch:
@@ -28,7 +28,7 @@ public void testGetInjectValueIssue744() {
 
         Object oldConfigValue = null;
         try {
-            oldConfigValue = ConfigInjection.getInjectValue(value);
+            oldConfigValue = ConfigInjection.getInjectValue(value, true);
         } catch (Exception ce) {
             // expected exception since no valuemap defined yet.
             assertTrue(ce instanceof ConfigException);
@@ -39,7 +39,7 @@ public void testGetInjectValueIssue744() {
         newValueMap.put(configKey, configValue);
         Config.getInstance().putInConfigCache(valueMapKey, newValueMap);
 
-        Object newConfigValue = ConfigInjection.getInjectValue(value);
+        Object newConfigValue = ConfigInjection.getInjectValue(value, true);
 
         assertNotNull(newConfigValue);
         assertEquals(configValue, newConfigValue);

File: api-key/src/main/java/com/networknt/apikey/ApiKeyHandler.java
Patch:
@@ -76,7 +76,7 @@ public void register() {
         if(!config.hashEnabled) {
             masks.add("apiKey");
         }
-        ModuleRegistry.registerModule(ApiKeyConfig.CONFIG_NAME, ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(ApiKeyConfig.CONFIG_NAME, ApiKeyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
     }
 
     @Override
@@ -86,7 +86,7 @@ public void reload() {
         if(!config.hashEnabled) {
             masks.add("apiKey");
         }
-        ModuleRegistry.registerModule(ApiKeyConfig.CONFIG_NAME, ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(ApiKeyConfig.CONFIG_NAME, ApiKeyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("ApiKeyHandler is reloaded.");
     }
 

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -362,13 +362,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(AuditConfig.CONFIG_NAME, AuditHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(AuditConfig.CONFIG_NAME, AuditHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(AuditConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(AuditConfig.CONFIG_NAME, AuditHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(AuditConfig.CONFIG_NAME, AuditHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(AuditConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("AuditHandler is reloaded.");
     }
 }

File: audit/src/test/java/com/networknt/audit/ParameterHandler.java
Patch:
@@ -78,4 +78,4 @@ public boolean isEnabled() {
     public void register() {
     }
 
-}
\ No newline at end of file
+}

File: balance/src/test/java/com/networknt/balance/LocalFirstLoadBalanceTest.java
Patch:
@@ -49,8 +49,8 @@ public void testSelect() throws Exception {
         URL url = loadBalance.select(urls, "serviceId", "tag", null);
         Assert.assertEquals(url, URLImpl.valueOf("http://127.0.0.1:8081/v1"));
     }
-    
-    @Test 
+
+    @Test
     public void testSelectFirstThenRoundRobin() throws Exception{
         List<URL> urls = new ArrayList<>();
         urls.add(new URLImpl("http", "127.0.0.10", 8081, "v1", new HashMap<String, String>()));
@@ -62,7 +62,7 @@ public void testSelectFirstThenRoundRobin() throws Exception{
         URL url = loadBalance.select(urls, "serviceId", "tag", null);
         Assert.assertTrue(urls.contains(url));
     }
-    
+
     @Test
     public void testSelectWithEmptyList() throws Exception {
         List<URL> urls = new ArrayList<>();

File: balance/src/test/java/com/networknt/balance/RoundRobinLoadBalanceTest.java
Patch:
@@ -66,7 +66,7 @@ public void testSelectWithEmptyList() throws Exception {
 
     /**
      * There is a chance that both values are the same but it should be very rare. Given this possibility,
-     * ignore this test unless we need it. 
+     * ignore this test unless we need it.
      */
     @Ignore
     @Test

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -332,15 +332,15 @@ public void register() {
         // As passwords are in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("password");
-        ModuleRegistry.registerModule(BasicAuthConfig.CONFIG_NAME, BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(BasicAuthConfig.CONFIG_NAME, BasicAuthHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
     }
 
     @Override
     public void reload() {
         config.reload();
         List<String> masks = new ArrayList<>();
         masks.add("password");
-        ModuleRegistry.registerModule(BasicAuthConfig.CONFIG_NAME, BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(BasicAuthConfig.CONFIG_NAME, BasicAuthHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("BasicAuthHandler is reloaded.");
     }
 }

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -208,13 +208,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, BodyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, BodyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, BodyHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, BodyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("BodyHandler is reloaded.");
     }
 }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.body;
 
+import com.networknt.config.Config;
 import com.networknt.handler.BuffersUtils;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.RequestInterceptor;
@@ -188,13 +189,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, RequestBodyInterceptor.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, RequestBodyInterceptor.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
         if (LOG.isInfoEnabled())
             LOG.info("RequestBodyInterceptor is reloaded.");
     }

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.body;
 
+import com.networknt.config.Config;
 import com.networknt.handler.BuffersUtils;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.ResponseInterceptor;
@@ -46,13 +47,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, ResponseBodyInterceptor.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, ResponseBodyInterceptor.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
         if (LOG.isInfoEnabled())
             LOG.info("ResponseBodyInterceptor is reloaded.");
     }

File: body/src/test/java/com/networknt/body/BodyConverterTest.java
Patch:
@@ -79,4 +79,4 @@ public void shouldToGetConvertedFormDataInAMapGroupedByKey() {
         Assert.assertTrue(aConvertedListvalue.get(1) instanceof String);
         Assert.assertEquals(anotherValue, aConvertedListvalue.get(1));
     }
-}
\ No newline at end of file
+}

File: cache-manager/src/main/java/com/networknt/cache/CacheManager.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.cache;
 
+import com.networknt.config.Config;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.utility.ModuleRegistry;
 import org.slf4j.Logger;
@@ -18,7 +19,7 @@ public interface CacheManager {
     Logger logger = LoggerFactory.getLogger(CacheManager.class);
     static CacheManager getInstance() {
         CacheConfig config = CacheConfig.load();
-        ModuleRegistry.registerModule(CacheConfig.CONFIG_NAME, CacheManager.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(CacheConfig.CONFIG_NAME, CacheManager.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CacheConfig.CONFIG_NAME), null);
         List<CacheItem> caches = config.getCaches();
         if(caches != null && !caches.isEmpty()) {
             CacheManager cacheManager = SingletonServiceFactory.getBean(CacheManager.class);

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -187,7 +187,7 @@ private Http2Client(final ClassLoader classLoader) {
 
         // register module.
         List<String> masks = List.of(MASK_KEY_CLIENT_SECRET, MASK_KEY_TRUST_STORE_PASS, MASK_KEY_KEY_STORE_PASS, MASK_KEY_KEY_PASS);
-        ModuleRegistry.registerModule(ClientConfig.CONFIG_NAME, Http2Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ClientConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(ClientConfig.CONFIG_NAME, Http2Client.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ClientConfig.CONFIG_NAME), masks);
     }
 
     private void addProvider(Map<String, ClientProvider> map, String scheme, ClientProvider provider) {

File: client/src/main/java/com/networknt/client/http/BodyPart.java
Patch:
@@ -22,4 +22,4 @@ public ContentType getContentType() {
     public T getBody() {
         return body;
     }
-}
\ No newline at end of file
+}

File: client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureNoRequest.java
Patch:
@@ -64,4 +64,4 @@ public void failed(IOException e) {
     }
 
 
-}
\ No newline at end of file
+}

File: client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureWithRequest.java
Patch:
@@ -58,4 +58,4 @@ public void failed(IOException e) {
         completeExceptionally(e);
     }
 
-}
\ No newline at end of file
+}

File: client/src/main/java/com/networknt/client/http/Light4jHttp2ClientProvider.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * Customized HttpClientProvider for handling TLS handshake for HTTP2.
  * Created by modifying {@link io.undertow.client.http2.Http2ClientProvider}
- * 
+ *
  *
  */
 public class Light4jHttp2ClientProvider implements ClientProvider {
@@ -193,5 +193,5 @@ public void reset() {
             written = 0;
             requestCount = 0;
         }
-    } 
+    }
 }

File: client/src/main/java/com/networknt/client/listener/ByteBufferWriteChannelListener.java
Patch:
@@ -94,5 +94,3 @@ public void handleEvent(StreamSinkChannel o) {
     }
 
 }
-
-

File: client/src/main/java/com/networknt/client/model/HttpVerb.java
Patch:
@@ -19,4 +19,4 @@ public enum HttpVerb {
     HttpVerb(HttpString verb) {
         this.verbHttpString = verb;
     }
-}
\ No newline at end of file
+}

File: client/src/main/java/com/networknt/client/simplepool/SimpleConnectionHolder.java
Patch:
@@ -320,7 +320,7 @@ public synchronized boolean borrowed() {
 
     /**
      * State Property - isAtMaxBorrows
-     * 
+     *
      * @return true if the connection is at its maximum number of borrows, and false otherwise
      */
     public synchronized boolean maxBorrowed() {

File: client/src/main/java/com/networknt/client/ssl/TLSConfig.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * This class holds configuration values related to server identify check.
- * 
+ *
  * @author Daniel Zhao
  *
  */
@@ -46,5 +46,5 @@ private TLSConfig(boolean checkServerIdentify) {
     public boolean getCheckServerIdentity() {
     	return checkServerIdentify;
     }
-    
+
 }

File: client/src/main/java/org/apache/hc/client5/http/ssl/copied/DistinguishedNameParser.java
Patch:
@@ -128,4 +128,3 @@ public void copyUnquotedContent(
     }
 
 }
-

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -728,9 +728,9 @@ public void server_identity_check_positive_case() throws Exception{
         XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.BUFFER_POOL, context);
 
         final ClientConnection connection = client.connect(new URI("https://localhost:7778"), worker, ssl, Http2Client.BUFFER_POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
-        
+
         assertTrue(connection.isOpen());
-        
+
         IoUtils.safeClose(connection);
     }
 

File: config-reload/src/main/java/com/networknt/config/reload/handler/ConfigReloadHandler.java
Patch:
@@ -44,7 +44,7 @@ public class ConfigReloadHandler implements LightHttpHandler {
     public ConfigReloadHandler() {
         if(logger.isDebugEnabled()) logger.debug("ConfigReloadHandler is constructed");
         config = ConfigReloadConfig.load();
-        ModuleRegistry.registerModule(ConfigReloadConfig.CONFIG_NAME, ConfigReloadHandler.class.getName(), config.getMappedConfig(),null);
+        ModuleRegistry.registerModule(ConfigReloadConfig.CONFIG_NAME, ConfigReloadHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ConfigReloadHandler.CONFIG_NAME),null);
     }
 
     @Override

File: config-reload/src/test/java/com/networknt/config/reload/handler/BaseTest.java
Patch:
@@ -34,7 +34,7 @@ public static void setUp() {
                     .build();
             server.start();
         }
-        ModuleRegistry.registerModule(CONFIG_NAME, BodyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CONFIG_NAME, BodyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @AfterClass

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -7,5 +7,5 @@
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
 	public static final Pattern CRYPT_PATTERN = Pattern.compile("^CRYPT:.*$");
-	public static final String CRYPT_FIRST = "C"; 
+	public static final String CRYPT_FIRST = "C";
 }

File: config/src/test/java/com/networknt/config/ConfigDefaultTest.java
Patch:
@@ -195,7 +195,7 @@ public void testEmptyStringValueJsonMapConfig() {
         Assert.assertEquals("", configMap.get("value"));
     }
 
-    
+
     public void testInjectionExclusionConfig() {
         config.clear();
         Map<String, Object> configMap = config.getJsonMapConfig("test_exclusion");
@@ -233,7 +233,7 @@ public void testObjectMapperZonedDateTime() throws Exception {
         Assert.assertTrue(zonedDateTime2.equals(dm.getTime()));
     }
     */
-    
+
     public void testObjectMapperLocalDateTime() throws Exception {
         ObjectMapper mapper = Config.getInstance().getMapper();
         LocalDateTimeModel dm = mapper.readValue("{\"time\" : \"1999-01-02T04:05:06.700000Z\"}", LocalDateTimeModel.class);
@@ -242,7 +242,7 @@ public void testObjectMapperLocalDateTime() throws Exception {
         System.out.println(dm2);
         Assert.assertTrue(dm2.equals(dm.getTime()));
     }
-    
+
     public void testObjectMapperLocalDate() throws Exception {
         ObjectMapper mapper = Config.getInstance().getMapper();
         LocalDateModel dm = mapper.readValue("{\"date\" : \"1999-02-03T04:05:06.700000Z\"}", LocalDateModel.class);

File: config/src/test/java/com/networknt/config/ConfigInjectionTest.java
Patch:
@@ -108,4 +108,4 @@ public void testDecryptEnvValueWithNullValue() {
         Assert.assertEquals(null, envValue);
     }
 
-}
\ No newline at end of file
+}

File: config/src/test/java/com/networknt/config/ConfigPropertyPathTest.java
Patch:
@@ -31,7 +31,7 @@ public class ConfigPropertyPathTest extends TestCase {
     private static Config config = null;
 
     private static final String homeDir = System.getProperty("user.home");
-    
+
     @Override
     public void setUp() throws Exception {
         super.setUp();
@@ -59,7 +59,7 @@ public void tearDown() throws Exception {
         test3.delete();
         testFolder1.delete();
         testFolder2.delete();
-        
+
         setExternalizedConfigDir("");
     }
 
@@ -109,7 +109,7 @@ public void testGetMapConfigFromMultiPath() throws Exception {
     }
 
     private void setExternalizedConfigDir(String externalizedDir) throws Exception {
-        Field f1 = config.getClass().getDeclaredField("EXTERNALIZED_PROPERTY_DIR");
+        Field f1 = config.getClass().getSuperclass().getDeclaredField("EXTERNALIZED_PROPERTY_DIR");
         f1.setAccessible(true);
         f1.set(config, externalizedDir.split(File.pathSeparator));
     }

File: config/src/test/java/com/networknt/config/SecretConfig.java
Patch:
@@ -16,7 +16,7 @@ public class SecretConfig {
 	private String emailPassword;
 	private Map<String, String> testMap;
 	private List<String> testArray;
-	
+
 	public String getServerKeystorePass() {
 		return serverKeystorePass;
 	}

File: consul/src/main/java/com/networknt/consul/ConsulConstants.java
Patch:
@@ -57,12 +57,12 @@ public class ConsulConstants {
 	 * Heart beat circle，2/3 of ttl
 	 */
 	public static int HEARTBEAT_CIRCLE = (TTL * 1000 * 2) / 3;
-	
+
 	/**
 	 * Maximum continuous switch checks, send heart beat is this number is exceeded.
 	 */
 	public static int MAX_SWITCHER_CHECK_TIMES = 10;
-	
+
 	/**
 	 * Switcher change rate
 	 */
@@ -83,7 +83,7 @@ public class ConsulConstants {
 	 * consul block, max block time in minute
 	 */
 	public static int CONSUL_BLOCK_TIME_MINUTES = 10;
-	
+
 	/**
 	 * consul block max block time in second
 	 */

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -73,7 +73,7 @@ public ConsulRegistry(URL url, ConsulClient client) {
         ArrayBlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<Runnable>(20000);
         notifyExecutor = new ThreadPoolExecutor(10, 30, 30 * 1000, TimeUnit.MILLISECONDS, workQueue);
         logger.info("ConsulRegistry init finish.");
-        ModuleRegistry.registerModule(ConsulConfig.CONFIG_NAME, ConsulRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ConsulConfig.CONFIG_NAME), List.of(MASK_KEY_CONSUL_TOKEN));
+        ModuleRegistry.registerModule(ConsulConfig.CONFIG_NAME, ConsulRegistry.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ConsulConfig.CONFIG_NAME), List.of(MASK_KEY_CONSUL_TOKEN));
     }
 
     public ConcurrentHashMap<String, ConcurrentHashMap<URL, NotifyListener>> getNotifyListeners() {

File: consul/src/main/java/com/networknt/consul/ConsulService.java
Patch:
@@ -37,7 +37,7 @@ public class ConsulService {
 	private Integer port;
 
 	private String checkString;
-	
+
 	public String getId() {
 		return id;
 	}

File: consul/src/test/java/com/networknt/consul/ConsulHeartbeatManagerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.junit.Test;
 
 /**
- * 
+ *
  * @Description ConsulHeartbeatManagerTest
  * @author zhanglei28
  *

File: consul/src/test/java/com/networknt/consul/ConsulRegistryTest.java
Patch:
@@ -113,7 +113,7 @@ public void subAndUnsubService() throws Exception {
         registry.doRegister(serviceUrl2);
         registry.doAvailable(null);
         Thread.sleep(sleepTime);
-        
+
         // unregister
         registry.doUnavailable(null);
         Thread.sleep(sleepTime);
@@ -140,7 +140,7 @@ public void discoverService() throws Exception {
         Thread.sleep(sleepTime);
         urls = registry.discover(serviceUrl);
         Assert.assertTrue(urls.contains(serviceUrl));
-        
+
         // unavailable & unregister
         registry.doUnavailable(null);
         Thread.sleep(sleepTime);

File: content/src/main/java/com/networknt/content/ContentHandler.java
Patch:
@@ -64,7 +64,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ContentConfig.CONFIG_NAME, ContentConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ContentConfig.CONFIG_NAME, ContentConfig.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ContentConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -84,7 +84,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ContentConfig.CONFIG_NAME, ContentConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ContentConfig.CONFIG_NAME, ContentConfig.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ContentConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) {
             logger.info("ContentHandler is enabled.");
         }

File: correlation-config/src/main/java/com/networknt/correlation/CorrelationConfig.java
Patch:
@@ -68,11 +68,11 @@ public boolean isEnabled() {
     public void setEnabled(boolean enabled) {
         this.enabled = enabled;
     }
-    
+
     public boolean isAutogenCorrelationID() {
     	return autogenCorrelationID;
     }
-    
+
     public void setAutogenCorrelationID(boolean autogenCorrelationID) {
     	this.autogenCorrelationID = autogenCorrelationID;
     }

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -73,7 +73,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 	            if(tId != null && logger.isInfoEnabled()) {
 	                logger.info("Associate traceability Id " + tId + " with correlation Id " + cId);
                 }
-        	} 
+        	}
         }
         // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);
@@ -116,13 +116,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(CorrelationConfig.CONFIG_NAME, CorrelationHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CorrelationConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CorrelationConfig.CONFIG_NAME, CorrelationHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CorrelationConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(CorrelationConfig.CONFIG_NAME, CorrelationHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(CorrelationConfig.CONFIG_NAME, CorrelationHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CorrelationConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) {
             logger.info("CorrelationHandler is enabled.");
         }

File: correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java
Patch:
@@ -152,12 +152,12 @@ public void testGetWithoutTid() throws Exception {
         Assert.assertNotNull(body);
         System.out.println("correlationId = " + body);
     }
-    
+
     @Test
     public void testGetWithoutTidNoAutogen() throws Exception {
     	// reset the autogen of the correlation ID
     	CorrelationHandler.config.setAutogenCorrelationID(false);
-    
+
         final Http2Client client = Http2Client.getInstance();
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
@@ -188,5 +188,5 @@ public void testGetWithoutTidNoAutogen() throws Exception {
         Assert.assertNotNull(body);
         Assert.assertEquals("noCID", body);
         System.out.println("correlationId = " + body);
-    }    
+    }
 }

File: cors/src/main/java/com/networknt/cors/CorsHeaders.java
Patch:
@@ -49,4 +49,4 @@ public class CorsHeaders {
     public static final HttpString ACCESS_CONTROL_MAX_AGE = new HttpString("Access-Control-Max-Age");
     public static final HttpString ACCESS_CONTROL_ALLOW_METHODS = new HttpString("Access-Control-Allow-Methods");
     public static final HttpString ACCESS_CONTROL_ALLOW_HEADERS = new HttpString("Access-Control-Allow-Headers");
-}
\ No newline at end of file
+}

File: cors/src/main/java/com/networknt/cors/CorsHttpHandler.java
Patch:
@@ -120,15 +120,15 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(CorsConfig.CONFIG_NAME, CorsHttpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CorsConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CorsConfig.CONFIG_NAME, CorsHttpHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CorsConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(CorsConfig.CONFIG_NAME, CorsHttpHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(CorsConfig.CONFIG_NAME, CorsHttpHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CorsConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) {
             logger.info("CorsHttpHandler is enabled.");
         }
     }
-}
\ No newline at end of file
+}

File: data-source/src/test/java/com/networknt/db/GenericDataSourceTest.java
Patch:
@@ -140,4 +140,3 @@ public void testGetOracleDataSource() {
     }
 
 }
-

File: db-provider/src/main/java/com/networknt/db/provider/SqlDbStartupHook.java
Patch:
@@ -40,7 +40,7 @@ public void onStartup() {
         cacheManager = CacheManager.getInstance();
         List<String> masks = new ArrayList<>();
         masks.add("password");
-        ModuleRegistry.registerModule(DbProviderConfig.CONFIG_NAME, SqlDbStartupHook.class.getName(), config.getMappedConfig(), masks);
+        ModuleRegistry.registerModule(DbProviderConfig.CONFIG_NAME, SqlDbStartupHook.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(DbProviderConfig.CONFIG_NAME), masks);
         logger.info("SqlDbStartupHook ends");
     }
 }

File: deref-token/src/main/java/com/networknt/deref/DerefMiddlewareHandler.java
Patch:
@@ -106,13 +106,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(DerefConfig.CONFIG_NAME, DerefMiddlewareHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DerefConfig.CONFIG_NAME, DerefMiddlewareHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(DerefConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config = (DerefConfig)Config.getInstance().getJsonObjectConfigNoCache(DerefConfig.CONFIG_NAME, DerefConfig.class);
-        ModuleRegistry.registerModule(DerefConfig.CONFIG_NAME, DerefMiddlewareHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DerefConfig.CONFIG_NAME, DerefMiddlewareHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("DerefMiddlewareHandler is reloaded.");
     }
 }

File: dump/src/main/java/com/networknt/dump/DumpHandler.java
Patch:
@@ -61,7 +61,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(DumpConfig.CONFIG_NAME, DumpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DumpConfig.CONFIG_NAME, DumpHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -100,7 +100,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config = (DumpConfig)Config.getInstance().getJsonObjectConfigNoCache(DumpConfig.CONFIG_NAME, DumpConfig.class);
-        ModuleRegistry.registerModule(DumpConfig.CONFIG_NAME, DumpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DumpConfig.CONFIG_NAME, DumpHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("DumpHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/OAuthServerHandler.java
Patch:
@@ -44,7 +44,7 @@ public class OAuthServerHandler implements LightHttpHandler {
     public OAuthServerHandler() {
         config = OAuthServerConfig.load();
         if(logger.isInfoEnabled()) logger.info("OAuthServerHandler is constructed.");
-        ModuleRegistry.registerModule(OAuthServerConfig.CONFIG_NAME, OAuthServerHandler.class.getName(), config.getMappedConfig(),null);
+        ModuleRegistry.registerModule(OAuthServerConfig.CONFIG_NAME, OAuthServerHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(OAuthServerConfig.CONFIG_NAME),null);
     }
 
     @Override

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -54,7 +54,7 @@ public class RouterHandler implements HttpHandler {
     protected static AbstractMetricsHandler metricsHandler;
     public RouterHandler() {
         config = RouterConfig.load();
-        ModuleRegistry.registerModule(RouterConfig.CONFIG_NAME, RouterHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RouterConfig.CONFIG_NAME, RouterHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RouterConfig.CONFIG_NAME), null);
         ClientConfig clientConfig = ClientConfig.get();
         Map<String, Object> tlsMap = clientConfig.getTlsConfig();
         // disable the hostname verification based on the config. We need to do it here as the LoadBalancingRouterProxyClient uses the Undertow HttpClient.
@@ -110,7 +110,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
 
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(RouterConfig.CONFIG_NAME, RouterHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RouterConfig.CONFIG_NAME, RouterHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RouterConfig.CONFIG_NAME), null);
         LoadBalancingRouterProxyClient client = new LoadBalancingRouterProxyClient();
         if(config.httpsEnabled) client.setSsl(Http2Client.getInstance().getDefaultXnioSsl());
         if(config.http2Enabled) {

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.router.middleware;
 
+import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.HandlerUtils;
 import com.networknt.handler.MiddlewareHandler;
@@ -120,13 +121,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(PathPrefixServiceConfig.CONFIG_NAME, PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathPrefixServiceConfig.CONFIG_NAME, PathPrefixServiceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(PathPrefixServiceConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(PathPrefixServiceConfig.CONFIG_NAME, PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathPrefixServiceConfig.CONFIG_NAME, PathPrefixServiceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(PathPrefixServiceConfig.CONFIG_NAME), null);
         if (logger.isInfoEnabled()) logger.info("PathPrefixServiceHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathServiceHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.router.middleware;
 
+import com.networknt.config.Config;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
@@ -114,13 +115,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(PathServiceConfig.CONFIG_NAME, PathServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathServiceConfig.CONFIG_NAME, PathServiceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(PathServiceConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(PathServiceConfig.CONFIG_NAME, PathServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathServiceConfig.CONFIG_NAME, PathServiceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(PathServiceConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("PathServiceHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/SAMLTokenHandler.java
Patch:
@@ -139,13 +139,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, SAMLTokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, SAMLTokenHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TokenConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, SAMLTokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, SAMLTokenHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TokenConfig.CONFIG_NAME), null);
     }
 
     private Result<String> getSAMLBearerToken(String samlAssertion , String jwtAssertion) {
@@ -159,4 +159,4 @@ private Result<String> getSAMLBearerToken(String samlAssertion , String jwtAsser
             return Failure.of(tokenResponse.getError());
         }
     }
-}
\ No newline at end of file
+}

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -200,13 +200,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, TokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, TokenHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TokenConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, TokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, TokenHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TokenConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("TokenHandler is reloaded.");
     }
 }

File: encode-decode/src/main/java/com/networknt/decode/RequestDecodeHandler.java
Patch:
@@ -84,7 +84,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(RequestDecodeConfig.CONFIG_NAME, RequestDecodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(RequestDecodeConfig.CONFIG_NAME, RequestDecodeHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -102,7 +102,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(RequestDecodeConfig.CONFIG_NAME, RequestDecodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(RequestDecodeConfig.CONFIG_NAME, RequestDecodeHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("RequestDecodeHandler is reloaded.");
     }
 }

File: encode-decode/src/main/java/com/networknt/encode/ResponseEncodeHandler.java
Patch:
@@ -81,7 +81,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ResponseEncodeConfig.CONFIG_NAME, ResponseEncodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ResponseEncodeConfig.CONFIG_NAME, ResponseEncodeHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -102,7 +102,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ResponseEncodeConfig.CONFIG_NAME, ResponseEncodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ResponseEncodeConfig.CONFIG_NAME, ResponseEncodeHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("ResponseEncodeHandler is reloaded.");
     }
 }

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -138,13 +138,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ExceptionConfig.CONFIG_NAME, ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ExceptionConfig.CONFIG_NAME, ExceptionHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ExceptionConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config =  (ExceptionConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ExceptionConfig.class);
-        ModuleRegistry.registerModule(ExceptionConfig.CONFIG_NAME, ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ExceptionConfig.CONFIG_NAME, ExceptionHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ExceptionConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("ExceptionHandler is reloaded.");
     }
 }

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -71,7 +71,7 @@ public static void init() {
         initChains();
         initPaths();
         initDefaultHandlers();
-        ModuleRegistry.registerModule(HandlerConfig.CONFIG_NAME, Handler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HandlerConfig.CONFIG_NAME, Handler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(HandlerConfig.CONFIG_NAME), null);
     }
 
     /**

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.handler;
 
+import com.networknt.config.Config;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.utility.ModuleRegistry;
@@ -69,12 +70,12 @@ public void reload() {
         if (LOG.isTraceEnabled())
             LOG.trace("request-injection.yml is reloaded");
 
-        ModuleRegistry.registerModule(RequestInjectionConfig.CONFIG_NAME, RequestInterceptorInjectionHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestInjectionConfig.CONFIG_NAME, RequestInterceptorInjectionHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RequestInjectionConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(RequestInjectionConfig.CONFIG_NAME, RequestInterceptorInjectionHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestInjectionConfig.CONFIG_NAME, RequestInterceptorInjectionHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RequestInjectionConfig.CONFIG_NAME), null);
     }
 
     @Override

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.handler;
 
+import com.networknt.config.Config;
 import com.networknt.handler.conduit.ContentStreamSinkConduit;
 import com.networknt.handler.conduit.ModifiableContentSinkConduit;
 import com.networknt.service.SingletonServiceFactory;
@@ -67,15 +68,15 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ResponseInjectionConfig.CONFIG_NAME, ResponseInterceptorInjectionHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ResponseInjectionConfig.CONFIG_NAME, ResponseInterceptorInjectionHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ResponseInjectionConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
         if (LOG.isTraceEnabled())
             LOG.trace("response-injection.yml is reloaded");
-        ModuleRegistry.registerModule(ResponseInjectionConfig.CONFIG_NAME, ResponseInterceptorInjectionHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ResponseInjectionConfig.CONFIG_NAME, ResponseInterceptorInjectionHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ResponseInjectionConfig.CONFIG_NAME), null);
     }
 
     /**

File: handler/src/main/java/com/networknt/handler/config/EndpointSource.java
Patch:
@@ -69,4 +69,4 @@ public int hashCode() {
 
     Iterable<Endpoint> listEndpoints();
 
-}
\ No newline at end of file
+}

File: header/src/main/java/com/networknt/header/HeaderHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.header;
 
+import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
@@ -159,13 +160,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(HeaderConfig.CONFIG_NAME, HeaderHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HeaderConfig.CONFIG_NAME, HeaderHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(HeaderConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(HeaderConfig.CONFIG_NAME, HeaderHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HeaderConfig.CONFIG_NAME, HeaderHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(HeaderConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("HeaderHandler is reloaded.");
     }
 }

File: header/src/test/java/com/networknt/header/HeaderHandlerTest.java
Patch:
@@ -264,7 +264,7 @@ public void testMarketHeader() throws Exception {
 	List<String> possibleJson = getPossibleJson("keyE", "valueE", "keyF", "valueF", "keyG", "valueG", "keyH", "valueH");
         Assert.assertTrue(possibleJson.contains(body));
     }
-	
+
     List<String> getPossibleJson(String key1, String value1, String key2, String value2, String key3, String value3, String key4, String value4){
         List<String> possibleJson = new ArrayList<>();
         possibleJson.add("{\"requestHeaders\":{\""+key1+"\":\""+value1+"\",\""+key2+"\":\""+value2+"\"},\"responseHeaders\":{\""+key3+"\":\""+value3+"\",\""+key4+"\":\""+value4+"\"}}");

File: health/src/main/java/com/networknt/health/HealthGetHandler.java
Patch:
@@ -52,7 +52,7 @@ public class HealthGetHandler implements LightHttpHandler {
 
     public HealthGetHandler(){
         config = HealthConfig.load();
-        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, HealthGetHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, HealthGetHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(HealthConfig.CONFIG_NAME), null);
         if(logger.isTraceEnabled()) logger.trace("HealthGetHandler is constructed.");
     }
 
@@ -85,7 +85,7 @@ public void setResult(String result) {
 
     public static void reload() {
         config = HealthConfig.load();
-        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, HealthGetHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, HealthGetHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(HealthConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("HealthGetHandler is reloaded.");
     }
-}
\ No newline at end of file
+}

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -53,7 +53,7 @@ public class ServerInfoGetHandler implements LightHttpHandler {
     public ServerInfoGetHandler() {
         if(logger.isDebugEnabled()) logger.debug("ServerInfoGetHandler is constructed");
         config = ServerInfoConfig.load();
-        ModuleRegistry.registerModule(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class.getName(), config.getMappedConfig(),null);
+        ModuleRegistry.registerModule(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ServerInfoConfig.CONFIG_NAME),null);
     }
 
     @Override

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -3,6 +3,7 @@
 import com.networknt.client.ClientConfig;
 import com.networknt.client.Http2Client;
 import com.networknt.client.ssl.TLSConfig;
+import com.networknt.config.Config;
 import com.networknt.handler.BuffersUtils;
 import com.networknt.handler.Handler;
 import com.networknt.handler.HandlerUtils;
@@ -86,7 +87,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ExternalServiceConfig.CONFIG_NAME, ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ExternalServiceConfig.CONFIG_NAME, ExternalServiceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ExternalServiceConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -101,7 +102,7 @@ public void reload() {
                 logger.error("An instance of MetricsHandler is not configured in the handler.yml.");
             }
         }
-        ModuleRegistry.registerModule(ExternalServiceConfig.CONFIG_NAME, ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ExternalServiceConfig.CONFIG_NAME, ExternalServiceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ExternalServiceConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("ExternalServiceHandler is reloaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -68,7 +68,7 @@ public class LightProxyHandler implements HttpHandler {
 
     public LightProxyHandler() {
         config = ProxyConfig.load();
-        ModuleRegistry.registerModule(ProxyConfig.CONFIG_NAME, LightProxyHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ProxyConfig.CONFIG_NAME, LightProxyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ProxyConfig.CONFIG_NAME), null);
         ClientConfig clientConfig = ClientConfig.get();
         Map<String, Object> tlsMap = clientConfig.getTlsConfig();
         // disable the hostname verification based on the config. We need to do it here as the LoadBalancingProxyClient uses the Undertow HttpClient.
@@ -173,7 +173,7 @@ private JwtClaims extractClaimsFromJwt(HeaderMap headerValues) {
 
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ProxyConfig.CONFIG_NAME, LightProxyHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ProxyConfig.CONFIG_NAME, LightProxyHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ProxyConfig.CONFIG_NAME), null);
         List<String> hosts = new ArrayList<>(Arrays.asList(config.getHosts().split(",")));
         if(logger.isTraceEnabled()) logger.trace("hosts = " + JsonMapper.toJson(hosts));
         LoadBalancingProxyClient loadBalancer = new LoadBalancingProxyClient()

File: ingress-proxy/src/main/java/com/networknt/proxy/MultiPartBodyPublisher.java
Patch:
@@ -167,4 +167,4 @@ private byte[] computeNext() throws IOException {
             }
         }
     }
-}
\ No newline at end of file
+}

File: ingress-proxy/src/main/java/com/networknt/proxy/ProxyHealthGetHandler.java
Patch:
@@ -39,7 +39,7 @@ public class ProxyHealthGetHandler implements LightHttpHandler {
 
     public ProxyHealthGetHandler() {
         if(logger.isTraceEnabled()) logger.trace("ProxyHealthGetHandler is constructed.");
-        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, ProxyHealthGetHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, ProxyHealthGetHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(HealthConfig.CONFIG_NAME), null);
     }
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -123,7 +123,7 @@ public void register() {
         masks.add("trustStorePass");
         masks.add("password");
         // use a new no cache instance to avoid the default config to be overwritten.
-        ModuleRegistry.registerModule(MrasConfig.CONFIG_NAME, MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(MrasConfig.CONFIG_NAME, MrasHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
     }
 
     @Override
@@ -144,7 +144,7 @@ public void reload() {
         masks.add("trustStorePass");
         masks.add("password");
         // use a new no cache instance to avoid the default config to be overwritten.
-        ModuleRegistry.registerModule(MrasConfig.CONFIG_NAME, MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(MrasConfig.CONFIG_NAME, MrasHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("MrasHandler is reloaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -120,7 +120,7 @@ public void register() {
         // As certPassword is in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("certPassword");
-        ModuleRegistry.registerModule(SalesforceConfig.CONFIG_NAME, SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(SalesforceConfig.CONFIG_NAME, SalesforceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
     }
 
     @Override
@@ -137,7 +137,7 @@ public void reload() {
         }
         List<String> masks = new ArrayList<>();
         masks.add("certPassword");
-        ModuleRegistry.registerModule(SalesforceConfig.CONFIG_NAME, SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(SalesforceConfig.CONFIG_NAME, SalesforceHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("SalesforceHandler is reloaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/tableau/TableauSimpleAuthHandler.java
Patch:
@@ -180,7 +180,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TableauConfig.CONFIG_NAME, TableauSimpleAuthHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TableauConfig.CONFIG_NAME, TableauSimpleAuthHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TableauConfig.CONFIG_NAME), null);
     }
 
 }

File: ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistHandler.java
Patch:
@@ -92,13 +92,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(WhitelistConfig.CONFIG_NAME, WhitelistHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(WhitelistConfig.CONFIG_NAME, WhitelistHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(WhitelistConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(WhitelistConfig.CONFIG_NAME, WhitelistHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(WhitelistConfig.CONFIG_NAME, WhitelistHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(WhitelistConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("WhitelistHandler is reloaded.");
     }
 

File: jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerHandler.java
Patch:
@@ -143,12 +143,12 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(JaegerConfig.CONFIG_NAME, JaegerHandler.class.getName(), jaegerConfig.getMappedConfig(), null);
+        ModuleRegistry.registerModule(JaegerConfig.CONFIG_NAME, JaegerHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(JaegerConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         jaegerConfig.reload();
-        ModuleRegistry.registerModule(JaegerConfig.CONFIG_NAME, JaegerHandler.class.getName(), jaegerConfig.getMappedConfig(), null);
+        ModuleRegistry.registerModule(JaegerConfig.CONFIG_NAME, JaegerHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(JaegerConfig.CONFIG_NAME), null);
     }
 }

File: ldap-util/src/main/java/com/networknt/ldap/LdapUtil.java
Patch:
@@ -26,7 +26,7 @@ public class LdapUtil {
 
     static {
         config = LdapConfig.load();
-        ModuleRegistry.registerModule(CONFIG_LDAP, LdapUtil.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(CONFIG_LDAP, LdapUtil.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_LDAP), null);
     }
 
     /**

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerGetHandler.java
Patch:
@@ -65,7 +65,7 @@ public class LoggerGetHandler implements LightHttpHandler {
     public LoggerGetHandler() {
         if(logger.isInfoEnabled()) logger.info("LoggerGetHandler is constructed.");
         config = LoggerConfig.load();
-        ModuleRegistry.registerModule(LoggerConfig.CONFIG_NAME, LoggerConfig.class.getName(), config.getMappedConfig(),null);
+        ModuleRegistry.registerModule(LoggerConfig.CONFIG_NAME, LoggerConfig.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(LoggerConfig.CONFIG_NAME),null);
     }
 
     @Override

File: mask/src/main/java/com/networknt/mask/Mask.java
Patch:
@@ -51,7 +51,7 @@ public class Mask {
 
     static {
         config = Config.getInstance().getJsonMapConfigNoCache(MASK_CONFIG);
-        ModuleRegistry.registerModule(MASK_CONFIG, Mask.class.getName(), config, null);
+        ModuleRegistry.registerModule(MASK_CONFIG, Mask.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(MASK_CONFIG), null);
     }
 
     /**

File: mask/src/test/java/com/networknt/mask/MaskTest.java
Patch:
@@ -127,7 +127,7 @@ public void testMaskResponseBody() {
         Assert.assertEquals(JsonPath.parse(output).read("$.list1[2]"), "*****");
         Assert.assertEquals(JsonPath.parse(output).read("$.password"), "******");
     }
-    
+
     @Test
     public void testMaskIssue942()
     {

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -42,7 +42,7 @@ public MetricsHandler() {
         if(config.getIssuerRegex() != null) {
             pattern = Pattern.compile(config.getIssuerRegex());
         }
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), config.getMappedConfig(), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
         if(logger.isDebugEnabled()) logger.debug("MetricsHandler is constructed!");
     }
 
@@ -116,13 +116,13 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
         if(logger.isInfoEnabled()) logger.info("MetricsHandler is reloaded.");
     }
 

File: metrics/src/main/java/io/dropwizard/metrics/InstrumentedExecutors.java
Patch:
@@ -593,4 +593,4 @@ public static InstrumentedThreadFactory privilegedThreadFactory(MetricRegistry r
      */
     private InstrumentedExecutors() {
     }
-}
\ No newline at end of file
+}

File: metrics/src/main/java/io/dropwizard/metrics/MetricRegistry.java
Patch:
@@ -266,7 +266,7 @@ public void removeMatching(MetricFilter filter) {
     /**
      * Adds a {@link MetricRegistryListener} to a collection of listeners that will be notified on
      * metric creation.  Listeners will be notified in the order in which they are added.
-     * 
+     *
      * <b>N.B.:</b> The listener will be notified of all existing metrics when it first registers.
      *
      * @param listener the listener that will be notified

File: metrics/src/main/java/io/dropwizard/metrics/broadcom/EPAgentMetric.java
Patch:
@@ -62,4 +62,4 @@ public void setAdditionalProperty(String name, Object value) {
 		this.additionalProperties.put(name, value);
 	}
 
-}
\ No newline at end of file
+}

File: metrics/src/main/java/io/dropwizard/metrics/broadcom/EPAgentMetricRequest.java
Patch:
@@ -75,4 +75,4 @@ public void setAdditionalProperty(String name, Object value) {
 		this.additionalProperties.put(name, value);
 	}
 
-}
\ No newline at end of file
+}

File: metrics/src/main/java/io/dropwizard/metrics/broadcom/EPAgentMetricResponse.java
Patch:
@@ -87,4 +87,4 @@ public void setAdditionalProperty(String name, Object value) {
 		this.additionalProperties.put(name, value);
 	}
 
-}
\ No newline at end of file
+}

File: metrics/src/main/java/io/dropwizard/metrics/broadcom/MetricError.java
Patch:
@@ -74,4 +74,4 @@ public void setAdditionalProperty(String name, Object value) {
 		this.additionalProperties.put(name, value);
 	}
 
-}
\ No newline at end of file
+}

File: metrics/src/test/java/io/dropwizard/metrics/InstrumentedThreadFactoryTest.java
Patch:
@@ -38,7 +38,7 @@ public class InstrumentedThreadFactoryTest {
     /**
      * Tests all parts of the InstrumentedThreadFactory except for termination since that
      * is currently difficult to do without race conditions.
-     * 
+     *
      * TODO: Try not using real threads in a unit test?
      */
     @Test

File: metrics/src/test/java/io/dropwizard/metrics/ManualClock.java
Patch:
@@ -28,11 +28,11 @@ public synchronized void addNanos(long nanos) {
     public synchronized void addSeconds(long seconds) {
         ticksInNanos += TimeUnit.SECONDS.toNanos(seconds);
     }
-    
+
     public synchronized void addMillis(long millis) {
         ticksInNanos += TimeUnit.MILLISECONDS.toNanos(millis);
     }
-    
+
     public synchronized void addHours(long hours) {
         ticksInNanos += TimeUnit.HOURS.toNanos(hours);
     }
@@ -46,5 +46,5 @@ public synchronized long getTick() {
     public synchronized long getTime() {
         return TimeUnit.NANOSECONDS.toMillis(ticksInNanos);
     }
-    
+
 }

File: metrics/src/test/java/io/dropwizard/metrics/MetricRegistryListenerTest.java
Patch:
@@ -31,7 +31,7 @@
 
 public class MetricRegistryListenerTest {
     private static final MetricName BLAH = MetricName.build("blah");
-    
+
     private final Gauge gauge = mock(Gauge.class);
     private final Counter counter = mock(Counter.class);
     private final Histogram histogram = mock(Histogram.class);

File: metrics/src/test/java/io/dropwizard/metrics/SharedMetricRegistriesTest.java
Patch:
@@ -29,15 +29,15 @@
 import java.lang.reflect.Modifier;
 
 public class SharedMetricRegistriesTest {
-    
+
     @Before
     public void setUp() {
         SharedMetricRegistries.clear();
 
         assertThat(SharedMetricRegistries.names())
                 .isEmpty();
     }
-	
+
     @After
     public void tearDown() {
         SharedMetricRegistries.clear();

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java
Patch:
@@ -59,7 +59,7 @@ public PortalRegistry(URL url, PortalRegistryClient client) {
         }
         lookupInterval = getUrl().getIntParameter(URLParamType.registrySessionTimeout.getName(), PortalRegistryConstants.DEFAULT_LOOKUP_INTERVAL);
         logger.info("PortalRegistry init finish.");
-        ModuleRegistry.registerModule(CONFIG_NAME, PortalRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CONFIG_NAME, PortalRegistry.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryHeartbeatManagerTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.junit.Test;
 
 /**
- * 
+ *
  * @Description ConsulHeartbeatManagerTest
  * @author zhanglei28
  *

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryTest.java
Patch:
@@ -100,7 +100,7 @@ public void subAndUnsubService() throws Exception {
         registry.doRegister(serviceUrl2);
         registry.doAvailable(null);
         Thread.sleep(sleepTime);
-        
+
         // unregistry
         registry.doUnavailable(null);
         Thread.sleep(sleepTime);
@@ -126,7 +126,7 @@ public void discoverService() throws Exception {
             e.printStackTrace();
         }
         Assert.assertTrue(urls.contains(serviceUrl));
-        
+
         // unavailable & unregister
         registry.doUnavailable(null);
         Thread.sleep(sleepTime);

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusHandler.java
Patch:
@@ -131,7 +131,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(PrometheusConfig.CONFIG_NAME, PrometheusHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(PrometheusConfig.CONFIG_NAME, PrometheusHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -104,7 +104,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(LimitConfig.CONFIG_NAME, LimitHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(LimitConfig.CONFIG_NAME, LimitHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(LimitConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -116,7 +116,7 @@ public void reload() {
             logger.error("Failed to recreate RateLimiter with reloaded config.", e);
         }
         // after reload, we need to update the config in the module registry to ensure that server info returns the latest configuration.
-        ModuleRegistry.registerModule(LimitConfig.CONFIG_NAME, LimitHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(LimitConfig.CONFIG_NAME, LimitHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(LimitConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("LimitHandler is reloaded.");
     }
 }

File: registry/src/main/java/com/networknt/registry/DiscoveryService.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 
 /**
- * 
+ *
  * Discovery service.
  *
  * @author fishermen

File: registry/src/main/java/com/networknt/registry/NotifyListener.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 
 /**
- * 
+ *
  * Notify when service changed.
  *
  * @author fishermen

File: registry/src/main/java/com/networknt/registry/Registry.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.registry;
 
 /**
- * 
+ *
  * Used to register and discover.
  *
  * @author fishermen

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -52,7 +52,7 @@ public DirectRegistry(URL url) {
         super(url);
         config = DirectRegistryConfig.load();
         if(config.directUrls != null) {
-            ModuleRegistry.registerModule(DirectRegistryConfig.CONFIG_NAME, DirectRegistry.class.getName(), config.getMappedConfig(), null);
+            ModuleRegistry.registerModule(DirectRegistryConfig.CONFIG_NAME, DirectRegistry.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(DirectRegistryConfig.CONFIG_NAME), null);
         }
         if(url.getParameters() != null && url.getParameters().size() > 0) {
             // The parameters come from the service.yml injection. If it is empty, then load it from the direct-registry.yml
@@ -156,7 +156,7 @@ protected void doUnavailable(URL url) {
     public static void reload() {
         config.reload();
         directUrls = config.getDirectUrls();
-        if(directUrls != null) ModuleRegistry.registerModule(DirectRegistryConfig.CONFIG_NAME, DirectRegistry.class.getName(), config.getMappedConfig(), null);
+        if(directUrls != null) ModuleRegistry.registerModule(DirectRegistryConfig.CONFIG_NAME, DirectRegistry.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(DirectRegistryConfig.CONFIG_NAME), null);
         if(logger.isTraceEnabled()) logger.trace("DirectRegistry is reloaded");
     }
 }

File: registry/src/main/java/com/networknt/registry/support/FailbackRegistry.java
Patch:
@@ -36,9 +36,9 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * 
+ *
  * Failback registry
- * 
+ *
  * @author fishermen
  */
 

File: registry/src/test/java/com/networknt/registry/URLTest.java
Patch:
@@ -30,7 +30,7 @@
 import static org.junit.Assert.fail;
 
 /**
- * 
+ *
  * URL test
  *
  * @author fishermen, stevehu

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java
Patch:
@@ -52,7 +52,7 @@ public class RuleLoaderStartupHook implements StartupHookProvider {
     public void onStartup() {
         config = RuleLoaderConfig.load();
         List<String> masks = List.of(MASK_PORTAL_TOKEN);
-        ModuleRegistry.registerModule(RuleLoaderConfig.CONFIG_NAME, RuleLoaderStartupHook.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RuleLoaderConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(RuleLoaderConfig.CONFIG_NAME, RuleLoaderStartupHook.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(RuleLoaderConfig.CONFIG_NAME), masks);
         if(config.isEnabled()) {
             // by default the rules for the service is loaded from the light-portal; however, it can be configured to loaded from config folder.
             if(RuleLoaderConfig.RULE_SOURCE_CONFIG_FOLDER.equals(config.getRuleSource())) {

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -137,13 +137,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(SanitizerConfig.CONFIG_NAME, SanitizerHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(SanitizerConfig.CONFIG_NAME, SanitizerHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(SanitizerConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config = SanitizerConfig.load();
-        ModuleRegistry.registerModule(SanitizerConfig.CONFIG_NAME, SanitizerHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(SanitizerConfig.CONFIG_NAME, SanitizerHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(SanitizerConfig.CONFIG_NAME), null);
     }
 
 }

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -374,7 +374,7 @@ private VerificationKeyResolver getKeyResolver(String kid, Object requestPathOrJ
         if(logger.isTraceEnabled()) logger.trace("kid = " + kid + " requestPathOrJwkServiceIds = " + requestPathOrJwkServiceIds + " keyResolver = " + keyResolver);
         // get the public key certificate from the cache that is loaded from security.yml. If it is not there,
         // go to the next step to access JWK if it is enabled. We need to update the light-oauth2 and oauth-kafka
-        // to support JWK instead of X509Certificate endpoint. 
+        // to support JWK instead of X509Certificate endpoint.
         X509Certificate certificate = certMap == null ? null : certMap.get(kid);
         if (certificate != null) {
             X509VerificationKeyResolver x509VerificationKeyResolver = new X509VerificationKeyResolver(certificate);

File: server-config/src/main/java/com/networknt/server/ServerConfig.java
Patch:
@@ -81,7 +81,7 @@ public class ServerConfig {
     String truststorePass;
     boolean enableRegistry;
     String serviceId;
-    String serviceName;    
+    String serviceName;
     String environment;
     String buildNumber;
     boolean dynamicPort;
@@ -357,8 +357,8 @@ public String getServiceName() {
 
 	public void setServiceName(String serviceName) {
 		this.serviceName = serviceName;
-	}   
-	
+	}
+
     public boolean isEnableHttp2() {
         return enableHttp2;
     }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -126,7 +126,7 @@ public static void init() {
             masks.add("keyPass");
             masks.add("truststorePass");
             masks.add("bootstrapStorePass");
-            ModuleRegistry.registerModule(ServerConfig.CONFIG_NAME, Server.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ServerConfig.CONFIG_NAME), masks);
+            ModuleRegistry.registerModule(ServerConfig.CONFIG_NAME, Server.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ServerConfig.CONFIG_NAME), masks);
 
             // start the server
             start();
@@ -191,7 +191,7 @@ static public void start() {
                 System.out.println(errMessage);
                 logger.error(errMessage);
                 throw new RuntimeException(errMessage);
-            }          
+            }
             // init usedPort here before starting the loop.
             int capacity = serverConfig.maxPort - serverConfig.minPort + 1;
             usedPorts = new HashSet(capacity);

File: server/src/main/java/com/networknt/server/UrlConfigLoader.java
Patch:
@@ -50,7 +50,7 @@
 /**
  * UrlConfigLoader fetch and load configs from Nginx. The config files share the
  * same structure as FileSystemProviderImpl.
- * 
+ *
  * @author xlongwei
  *
  */

File: server/src/main/java/com/networknt/server/model/ServerShutdownResponse.java
Patch:
@@ -5,7 +5,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 /**
- * 
+ *
  * POJO class for response body of shutdown endpoint.
  *
  *

File: server/src/test/java/com/networknt/server/TestHandler.java
Patch:
@@ -30,4 +30,4 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         System.out.println("Hello World!");
         exchange.getResponseSender().send("Hello World!");
     }
-}
\ No newline at end of file
+}

File: server/src/test/java/com/networknt/server/TestMergeStatusConfig.java
Patch:
@@ -111,7 +111,7 @@ public void testEmptyAppStatus() {
     }
 
     private void setExternalizedConfigDir(String externalizedDir) throws Exception {
-        Field f1 = config.getClass().getDeclaredField("EXTERNALIZED_PROPERTY_DIR");
+        Field f1 = config.getClass().getSuperclass().getDeclaredField("EXTERNALIZED_PROPERTY_DIR");
         f1.setAccessible(true);
         f1.set(config, externalizedDir.split(":"));
     }

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -67,7 +67,7 @@ public class SingletonServiceFactory {
             e.printStackTrace();
             logger.error("Exception:", e);
         }
-        ModuleRegistry.registerModule(ServiceConfig.CONFIG_NAME, SingletonServiceFactory.class.getName(), serviceConfig.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ServiceConfig.CONFIG_NAME, SingletonServiceFactory.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(ServiceConfig.CONFIG_NAME), null);
     }
 
     private static Object handleSingleImpl(List<String> interfaceClasses, List<Object> value) throws Exception {

File: service/src/test/java/com/networknt/service/Pair.java
Patch:
@@ -4,4 +4,3 @@ public interface Pair<K, V> {
     K getKey();
     V getValue();
 }
-

File: sidecar/src/main/java/com/networknt/router/SidecarRouterHandler.java
Patch:
@@ -105,13 +105,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(SidecarConfig.CONFIG_NAME, SidecarRouterHandler.class.getName(), config, null);
+        ModuleRegistry.registerModule(SidecarConfig.CONFIG_NAME, SidecarRouterHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(SidecarConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         sidecarConfig.reload();
-        ModuleRegistry.registerModule(SidecarConfig.CONFIG_NAME, SidecarRouterHandler.class.getName(), sidecarConfig.getMappedConfig(), null);
+        ModuleRegistry.registerModule(SidecarConfig.CONFIG_NAME, SidecarRouterHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(SidecarConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("SidecarRouterHandler is reloaded.");
     }
 }

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -63,7 +63,7 @@ public class Status {
     private static Map<String, Object> config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
 
     static {
-        ModuleRegistry.registerModule(CONFIG_NAME, Status.class.getName(), config, null);
+        ModuleRegistry.registerModule(CONFIG_NAME, Status.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
         try {
             statusSerializer = SingletonServiceFactory.getBean(StatusSerializer.class);
         } catch (ExceptionInInitializerError e) {
@@ -303,7 +303,7 @@ private String toStringConditionally(boolean showMessage, boolean showDescriptio
 
     public static void reload() {
         config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
-        ModuleRegistry.registerModule(CONFIG_NAME, Status.class.getName(), config, null);
+        ModuleRegistry.registerModule(CONFIG_NAME, Status.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     /**

File: status/src/main/java/com/networknt/status/StatusSerializer.java
Patch:
@@ -17,15 +17,15 @@
 
 /**
  * Interface to allow custom serialization for a Status.
- * 
+ *
  * Framework users can define their own format to return an error message to a consumer
- * 
+ *
  * @author Dan Dobrin
  */
 public interface StatusSerializer {
 	/**
 	 * Serialize the status and provide a custom format in the iomplementing class
-	 * 
+	 *
 	 * @param status The status to be serialized
 	 * @return the format Status object, to be serialized and returned to the consumer
 	 */

File: switcher/src/main/java/com/networknt/switcher/Switcher.java
Patch:
@@ -37,7 +37,7 @@ public String getName() {
 
     /**
      * isOn: true，service available; isOn: false, service un-available
-     * 
+     *
      * @return boolean
      */
     public boolean isOn() {

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -91,13 +91,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TraceabilityConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), Config.getNoneDecryptedInstance().getJsonMapConfigNoCache(TraceabilityConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("TraceabilityHandler is reloaded.");
     }
 }

File: utility/src/main/java/com/networknt/utility/ByteUtil.java
Patch:
@@ -39,4 +39,4 @@ public static String randomNumeric(int length) {
                 .toString();
     }
 
-}
\ No newline at end of file
+}

File: utility/src/main/java/com/networknt/utility/CharSequenceUtils.java
Patch:
@@ -303,4 +303,4 @@ static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, fi
 
         return true;
     }
-}
\ No newline at end of file
+}

File: utility/src/main/java/com/networknt/utility/ConfigUtils.java
Patch:
@@ -114,4 +114,4 @@ public static List<?> normalizeList(List<?> list, List<String> keysToNotSort) {
             throw new IllegalArgumentException("Unsupported element type in the list");
         }
     }
-}
\ No newline at end of file
+}

File: utility/src/main/java/com/networknt/utility/RegExUtils.java
Patch:
@@ -455,4 +455,4 @@ public static String replacePattern(final String text, final String regex, final
         return Pattern.compile(regex, Pattern.DOTALL).matcher(text).replaceAll(replacement);
     }
 
-}
\ No newline at end of file
+}

File: utility/src/test/java/com/networknt/utility/CodeVerifierUtilTest.java
Patch:
@@ -36,5 +36,5 @@ public void testCodeVerifier() {
         Assert.assertTrue(c1.equals(c2));
     }
 
-    
+
 }

File: utility/src/test/java/com/networknt/utility/NetUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 
 /**
- * 
+ *
  */
 package com.networknt.utility;
 
@@ -26,7 +26,7 @@
 
 /**
  * @author bozheng
- * 
+ *
  */
 public class NetUtilsTest {
 

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -155,7 +155,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                         for (String name : config.getAuditList()) {
                             Object object = auditInfo1.get(name);
                             if(object != null) {
-                                auditMap.putIfAbsent(name, object);
+                                auditMap.put(name, object);
                             }
                         }
                     }

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -135,7 +135,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         requestPath = exchange.getRequestPath();
                     }
 
-                    HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, requestPath);
+                    HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
                     String method = exchange.getRequestMethod().toString();
                     String requestHost = parts[1];
                     String queryString = exchange.getQueryString();

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -194,7 +194,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     }
 
                     // Audit log the endpoint info
-                    HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, requestPath);
+                    HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
 
                     invokeApi(exchange, (String)config.getAccessToken().get(config.SERVICE_HOST), requestPath, "Bearer " + accessToken, startTime, endpoint);
                     if(logger.isDebugEnabled()) logger.debug("MrasHandler.handleRequest ends.");

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -394,7 +394,7 @@ private void invokeApi(HttpServerExchange exchange, String authorization, String
         HttpRequest request = null;
 
         // Audit log the endpoint info
-        HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, requestPath);
+        HandlerUtils.populateAuditAttachmentField(exchange, Constants.ENDPOINT_STRING, endpoint);
 
         if(method.equalsIgnoreCase("GET")) {
             request = HttpRequest.newBuilder()

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -52,8 +52,8 @@ public class ServerInfoGetHandler implements LightHttpHandler {
     static ServerInfoConfig config;
     public ServerInfoGetHandler() {
         if(logger.isDebugEnabled()) logger.debug("ServerInfoGetHandler is constructed");
-        config = (ServerInfoConfig)Config.getInstance().getJsonObjectConfig(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class);
-        ModuleRegistry.registerModule(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ServerInfoConfig.CONFIG_NAME),null);
+        config = ServerInfoConfig.load();
+        ModuleRegistry.registerModule(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class.getName(), config.getMappedConfig(),null);
     }
 
     @Override
@@ -90,7 +90,7 @@ public static Map<String, Object> updateNormalizeKey (Map<String, Object> module
             newModuleRegistry.put(key, entry.getValue());
         }
         // normalized the key and value for comparison.
-        newModuleRegistry = ConfigUtils.normalizeMap(newModuleRegistry);
+        newModuleRegistry = ConfigUtils.normalizeMap(newModuleRegistry, config.getKeysToNotSort());
         return newModuleRegistry;
     }
     public static Map<String, Object> getDeployment() {

File: handler/src/main/java/com/networknt/handler/HandlerUtils.java
Patch:
@@ -77,7 +77,7 @@ public static void populateAuditAttachmentField(final HttpServerExchange exchang
         if(auditInfo == null) {
             auditInfo = new HashMap<>();
             auditInfo.put(fieldName, fieldValue);
-        } else if (!auditInfo.containsKey(Constants.ENDPOINT_STRING)) {
+        } else if (!auditInfo.containsKey(fieldName)) {
             auditInfo.put(fieldName, fieldValue);
         }
         exchange.putAttachment(AttachmentConstants.AUDIT_INFO, auditInfo);

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -214,13 +214,13 @@ private synchronized void loadConfigs(String queryParameters) {
             Path filePath = Paths.get(targetConfigsDirectory);
             if (!Files.exists(filePath)) {
                 Files.createDirectories(filePath);
-                logger.info("target configs directory created :", targetConfigsDirectory);
+                logger.info("target configs directory {} created", targetConfigsDirectory);
             }
 
             filePath = Paths.get(targetConfigsDirectory + "/values.yml");
             Files.write(filePath, new Yaml(options).dump(serviceConfigs).getBytes());
         } catch (IOException e) {
-            logger.error("Exception while creating {} dir or creating files there:{}",targetConfigsDirectory, e);
+            logger.error("Exception while creating " + targetConfigsDirectory, e);
         }
 
         //clear config cache: this is required just in case other classes have already loaded something in cache

File: handler/src/main/java/com/networknt/handler/conduit/ModifiableContentSinkConduit.java
Patch:
@@ -242,6 +242,7 @@ private void executeHttp2WriteThread(XnioWorker workerThread, final PooledByteBu
 
                 next.terminateWrites();
             } catch (IOException e) {
+                LOG.error("Failed to execute conduit writes on Worker Thread.", e);
                 throw new RuntimeException("Failed to execute conduit writes on Worker Thread. " + e.getMessage(), e);
             }
         });

File: security/src/main/java/com/networknt/security/KeyUtil.java
Patch:
@@ -20,7 +20,8 @@
  * @author Steve Hu
  */
 public class KeyUtil {
-    public  static final Logger logger = LoggerFactory.getLogger(KeyUtil.class);
+    public static final Logger logger = LoggerFactory.getLogger(KeyUtil.class);
+    public static final String RSA = "RSA";
     public static KeyPair generateKeyPair(String algorithm, int keySize) throws Exception {
         // Generate a key pair
         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(algorithm);

File: registry/src/main/java/com/networknt/registry/support/DirectRegistryConfig.java
Patch:
@@ -88,7 +88,8 @@ private void setMap() {
             } else if (getMappedConfig().get(DIRECT_URLS) instanceof Map) {
                 map = (Map<String, String>) getMappedConfig().get(DIRECT_URLS);
             } else {
-                logger.error("mapping is missing or wrong type.");
+                // change this to warning as the service.yml configuration is still supported.
+                logger.warn("mapping is missing or wrong type.");
             }
             // now convert the value of the map to a list of URLs.
             directUrls = new HashMap<>();

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -157,13 +157,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("APMMetricsHandler is reloaded.");
     }
 }

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -116,13 +116,13 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MetricsConfig.CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
         if(logger.isInfoEnabled()) logger.info("MetricsHandler is reloaded.");
     }
 

File: security/src/main/java/com/networknt/security/JwtIssuer.java
Patch:
@@ -37,7 +37,7 @@
 public class JwtIssuer {
     private static final Logger logger = LoggerFactory.getLogger(JwtIssuer.class);
     public static final String JWT_CONFIG = "jwt";
-    private static JwtConfig jwtConfig = (JwtConfig) Config.getInstance().getJsonObjectConfig(JWT_CONFIG, JwtConfig.class);
+    private static final JwtConfig jwtConfig = (JwtConfig) Config.getInstance().getJsonObjectConfig(JWT_CONFIG, JwtConfig.class);
 
     /**
      * A static method that generate JWT token from JWT claims object

File: utility/src/main/java/com/networknt/utility/ModuleRegistry.java
Patch:
@@ -60,7 +60,7 @@ public static Map<String, Object> getModuleRegistry() {
      * @param config The map of the configuration of the plugin.
      * @param masks The list of the properties that need to be masked.
      */
-    public static void registerPlugin(String configName, String pluginClass, String pluginName, String pluginVersion,  Map<String, Object> config, List<String> masks) {
+    public static void registerPlugin(String pluginName, String pluginVersion, String configName, String pluginClass, Map<String, Object> config, List<String> masks) {
         // use plugin name as key for the config map will make api-certification parses this object easily.
         if(config != null) {
             if(ServerConfig.getInstance().isMaskConfigProperties() && masks != null && !masks.isEmpty()) {

File: config-reload/src/main/java/com/networknt/config/reload/handler/ConfigReloadHandler.java
Patch:
@@ -55,7 +55,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 if (modules==null) modules = new ArrayList<>();
                 if (!modules.isEmpty()) modules.clear();
 
-                Map<String, Object> modulesRegistry =  ModuleRegistry.getRegistry();
+                Map<String, Object> modulesRegistry =  ModuleRegistry.getModuleRegistry();
                 for (Map.Entry<String, Object> entry: modulesRegistry.entrySet()) {
                     String key = entry.getKey();
                     if (key.contains(":")) {

File: config-reload/src/main/java/com/networknt/config/reload/handler/ModuleRegistryGetHandler.java
Patch:
@@ -37,7 +37,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
         if (config.isEnabled()) {
             List<String> modules = new ArrayList<>();
-            Map<String, Object> modulesRegistry = ModuleRegistry.getRegistry();
+            Map<String, Object> modulesRegistry = ModuleRegistry.getModuleRegistry();
             for (Map.Entry<String, Object> entry : modulesRegistry.entrySet()) {
                 String key = entry.getKey();
                 if (key.contains(":")) {

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java
Patch:
@@ -98,6 +98,9 @@ public void onStartup() {
                     logger.error("Could not load rule for serviceId = " + serverConfig.getServiceId() + " error = " + result.getError());
                 }
             }
+            // iterate all action classes to initialize them to ensure that the jar file are deployed and configuration is registered.
+            // This is to prevent runtime exception and also ensure that the configuration is part of the server info response.
+
         } else {
             if(logger.isInfoEnabled()) logger.info("Rule Loader is not enabled and skipped loading rules from the portal.");
         }

File: utility/src/main/java/com/networknt/utility/ConfigUtils.java
Patch:
@@ -95,9 +95,8 @@ public static List<?> normalizeList(List<?> list) {
             return stringList;
         } else if(list.get(0) instanceof Map) {
             // Case 2: List of Maps
+            // Do not sort the map in the list. The order is important.
             List<Map<String, Object>> mapList = (List<Map<String, Object>>) list;
-            //mapList.sort(Comparator.comparing(m -> m.entrySet().iterator().next().getKey())); // need to sort by the key only
-            // for each map in the list, we need to normalize the map.
             for(int i = 0; i < mapList.size(); i++) {
                 Map<String, Object> map = mapList.get(i);
                 mapList.set(i, normalizeMap(map));

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -812,7 +812,7 @@ public static SSLContext createSSLContext() throws IOException {
                     }
                     if(logger.isInfoEnabled()) logger.info("Loading trust store from config at " + Encode.forJava(trustStoreName));
                     if (trustStoreName != null && trustStorePass != null) {
-                        KeyStore trustStore = TlsUtil.loadTrustStore(trustStoreName, trustStorePass.toCharArray());
+                        KeyStore trustStore = TlsUtil.loadKeyStore(trustStoreName, trustStorePass.toCharArray());
                         TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
                         trustManagerFactory.init(trustStore);
                         trustManagers = trustManagerFactory.getTrustManagers();

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -537,7 +537,7 @@ private SSLContext createSSLContext() throws IOException {
             String trustStorePass = config.getKeyStorePass();
             if(logger.isTraceEnabled()) logger.trace("trustStoreName = " + trustStoreName + " trustStorePass = " + (trustStorePass == null ? null : trustStorePass.substring(0, 4)));
             if (trustStoreName != null && trustStorePass != null) {
-                KeyStore trustStore = TlsUtil.loadTrustStore(trustStoreName, trustStorePass.toCharArray());
+                KeyStore trustStore = TlsUtil.loadKeyStore(trustStoreName, trustStorePass.toCharArray());
                 TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
                 trustManagerFactory.init(trustStore);
                 trustManagers = trustManagerFactory.getTrustManagers();

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -413,7 +413,7 @@ protected static KeyStore loadTrustStore() {
             Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(SECRET_CONFIG_NAME);
             pass = (String) secretConfig.get(SecretConstants.SERVER_TRUSTSTORE_PASS);
         }
-        return TlsUtil.loadTrustStore(name, pass.toCharArray());
+        return TlsUtil.loadKeyStore(name, pass.toCharArray());
     }
 
     private static TrustManager[] buildTrustManagers(final KeyStore trustStore) {

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -91,7 +91,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -87,7 +87,7 @@ public class AuditHandler implements MiddlewareHandler {
     static final String SERVICE_ID_KEY = "serviceId";
     static final String INVALID_CONFIG_VALUE_CODE = "ERR10060";
 
-    private AuditConfig config;
+    private static AuditConfig config;
 
     private volatile HttpHandler next;
 

File: body-config/src/main/java/com/networknt/body/BodyConfig.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.body;
 
 import com.networknt.config.Config;
-import com.networknt.config.ConfigException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -49,8 +49,7 @@ public class ExceptionHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);
 
     public static final String CONFIG_NAME = "exception";
-    static  ExceptionConfig config =
-            (ExceptionConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ExceptionConfig.class);
+    static  ExceptionConfig config = (ExceptionConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ExceptionConfig.class);
 
     static final String STATUS_RUNTIME_EXCEPTION = "ERR10010";
     static final String STATUS_UNCAUGHT_EXCEPTION = "ERR10011";

File: exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java
Patch:
@@ -19,8 +19,6 @@
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 import com.networknt.status.Status;
-import com.networknt.exception.ApiException;
-import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: limit-config/src/main/java/com/networknt/limit/RequestLimit.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Represents a limit on a number of running requests.
  * <p>
- * This is basically a counter with a configured set of limits, that is used by {@link LimitHandler}.
+ * This is basically a counter with a configured set of limits, that is used by LimitHandler.
  * <p>
  * When the number of active requests goes over the configured max requests then requests will be suspended and queued.
  * <p>
@@ -43,7 +43,6 @@
  * allows for fine grained control of resources.
  *
  * @author Stuart Douglas
- * @see LimitHandler
  */
 public class RequestLimit {
     @SuppressWarnings("unused")

File: security-config/src/main/java/com/networknt/security/SecurityConfig.java
Patch:
@@ -49,7 +49,7 @@ public class SecurityConfig {
 
     private Map<String, Object> mappedConfig;
     private Map<String, Object> certificate;
-    private Config config;
+    private final Config config;
     private boolean enableVerifyJwt;
     private boolean enableVerifySwt;
     private String swtClientIdHeader;

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -232,15 +232,15 @@ public void setMetadata(Map<String, Object> metadata) {
     }
 
     public static boolean shouldShowMetadata() {
-        return config.get(SHOW_METADATA) == null ? false : (boolean)config.get(SHOW_METADATA);
+        return config.get(SHOW_METADATA) == null ? false : Config.loadBooleanValue(SHOW_METADATA, config.get(SHOW_METADATA));
     }
 
     public static boolean shouldShowMessage() {
-        return config.get(SHOW_MESSAGE) == null ? true : (boolean)config.get(SHOW_MESSAGE);
+        return config.get(SHOW_MESSAGE) == null ? true : Config.loadBooleanValue(SHOW_MESSAGE, config.get(SHOW_MESSAGE));
     }
 
     public static boolean shouldShowDescription() {
-        return config.get(SHOW_DESCRIPTION) == null ? true : (boolean)config.get(SHOW_DESCRIPTION);
+        return config.get(SHOW_DESCRIPTION) == null ? true : Config.loadBooleanValue(SHOW_DESCRIPTION, config.get(SHOW_DESCRIPTION));
     }
 
     /**

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -105,8 +105,8 @@ private void forceIdentityEncodingForInterceptors(HttpServerExchange exchange) {
     }
 
     /**
-     * @param exchange
-     * @throws Exception
+     * @param exchange HttpServerExchange
+     * @throws Exception if any exception happens
      */
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {

File: handler/src/main/java/com/networknt/handler/conduit/ContentStreamSinkConduit.java
Patch:
@@ -24,8 +24,8 @@ public class ContentStreamSinkConduit extends AbstractStreamSinkConduit<StreamSi
     /**
      * Construct a new instance.
      *
-     * @param next
-     * @param exchange
+     * @param next     the delegate conduit to set
+     * @param exchange HttpServerExchange
      */
     public ContentStreamSinkConduit(StreamSinkConduit next, HttpServerExchange exchange) {
         super(next);

File: handler/src/main/java/com/networknt/handler/conduit/ModifiableContentSinkConduit.java
Patch:
@@ -37,7 +37,7 @@ public class ModifiableContentSinkConduit extends AbstractStreamSinkConduit<Stre
      * Construct a new instance.
      *
      * @param next     the delegate conduit to set
-     * @param exchange
+     * @param exchange HttpServerExchange
      */
     public ModifiableContentSinkConduit(StreamSinkConduit next, HttpServerExchange exchange) {
         super(next);

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -22,6 +22,7 @@
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.mask.Mask;
+import com.networknt.server.ServerConfig;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.StringUtils;
@@ -83,7 +84,6 @@ public class AuditHandler implements MiddlewareHandler {
     static final String QUERY_PARAMETERS_KEY = "queryParameters";
     static final String PATH_PARAMETERS_KEY = "pathParameters";
     static final String REQUEST_COOKIES_KEY = "requestCookies";
-    static final String SERVER_CONFIG = "server";
     static final String SERVICE_ID_KEY = "serviceId";
     static final String INVALID_CONFIG_VALUE_CODE = "ERR10060";
 
@@ -98,9 +98,9 @@ public class AuditHandler implements MiddlewareHandler {
     public AuditHandler() {
         if (logger.isInfoEnabled()) logger.info("AuditHandler is loaded.");
         config = AuditConfig.load();
-        Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfigNoCache(SERVER_CONFIG);
+        ServerConfig serverConfig = ServerConfig.getInstance();
         if (serverConfig != null) {
-            serviceId = (String) serverConfig.get(SERVICE_ID_KEY);
+            serviceId = serverConfig.getServiceId();
         }
         String timestampFormat = config.getTimestampFormat();
         if (!StringUtils.isBlank(timestampFormat)) {

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -39,6 +39,7 @@
 import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
+import com.networknt.server.ServerConfig;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
@@ -98,7 +99,6 @@ public class Http2Client {
     private static final Logger logger = LoggerFactory.getLogger(Http2Client.class);
     private static final String CONFIG_PROPERTY_MISSING = "ERR10057";
     public static final String CONFIG_NAME = "client";
-    public static final String CONFIG_SERVER = "server";
     public static final OptionMap DEFAULT_OPTIONS = OptionMap.builder()
             .set(Options.WORKER_IO_THREADS, 8)
             .set(Options.TCP_NODELAY, true)
@@ -164,9 +164,9 @@ private Http2Client(final ClassLoader classLoader) {
         }
         boolean injectCallerId = config.isInjectCallerId();
         if(injectCallerId) {
-            Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfigNoCache(CONFIG_SERVER);
+            ServerConfig serverConfig = ServerConfig.getInstance();
             if(serverConfig != null) {
-                callerId = (String)serverConfig.get(SERVICE_ID);
+                callerId = serverConfig.getServiceId();
             }
         }
 

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -63,7 +63,6 @@
 public class Server {
 
     static final Logger logger = LoggerFactory.getLogger(Server.class);
-    public static final String SERVER_CONFIG_NAME = "server";
     public static final String SECRET_CONFIG_NAME = "secret";
     public static final String STARTUP_CONFIG_NAME = "startup";
     public static final String CONFIG_LOADER_CLASS = "configLoaderClass";
@@ -124,7 +123,7 @@ public static void init() {
             masks.add("keyPass");
             masks.add("truststorePass");
             masks.add("bootstrapStorePass");
-            ModuleRegistry.registerModule(ServerConfig.CONFIG_NAME, Server.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SERVER_CONFIG_NAME), masks);
+            ModuleRegistry.registerModule(ServerConfig.CONFIG_NAME, Server.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ServerConfig.CONFIG_NAME), masks);
 
             // start the server
             start();

File: jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerStartupHookProvider.java
Patch:
@@ -26,7 +26,7 @@ public class JaegerStartupHookProvider implements StartupHookProvider {
 
     public static JaegerTracer tracer;
     static JaegerConfig jaegerConfig = (JaegerConfig) Config.getInstance().getJsonObjectConfig(JaegerConfig.CONFIG_NAME, JaegerConfig.class);
-    static ServerConfig serverConfig = (ServerConfig) Config.getInstance().getJsonObjectConfig(ServerConfig.CONFIG_NAME, ServerConfig.class);
+    static ServerConfig serverConfig = ServerConfig.getInstance();
 
     @Override
     public void onStartup() {

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -46,7 +46,7 @@ public APMMetricsHandler() {
         if(config.getIssuerRegex() != null) {
             pattern = Pattern.compile(config.getIssuerRegex());
         }
-        serverConfig = (ServerConfig) Config.getInstance().getJsonObjectConfig(ServerConfig.CONFIG_NAME, ServerConfig.class);
+        serverConfig = ServerConfig.getInstance();
         ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isDebugEnabled()) logger.debug("APMMetricsHandler is constructed!");
     }

File: server/src/integration/java/com/networknt/server/ConsulRegistryIT.java
Patch:
@@ -69,7 +69,7 @@ public static void setUp() throws InterruptedException {
         valueConfig.put("container.port", port);
         Config.getInstance().putInConfigCache("values", valueConfig);
         consulConfig = (ConsulConfig) Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ConsulConfig.class);
-        serverConfig = (ServerConfig) Config.getInstance().getJsonObjectConfig("server", ServerConfig.class);
+        serverConfig = ServerConfig.getInstance();
         serverConfig.setEnableRegistry(true);
         consulConfig.setConsulUrl("http://localhost:" + port);
 

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -540,6 +540,7 @@ static void setConfig(String configName) throws Exception {
         Handler.configName = configName;
         config = (HandlerConfig) Config.getInstance().getJsonObjectConfig(configName, HandlerConfig.class);
         initHandlers();
+        initChains();
         initPaths();
     }
 

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java
Patch:
@@ -62,7 +62,7 @@ public void onStartup() {
                 endpointRules = config.getEndpointRules();
             } else {
                 // by default, load from light-portal
-                ServerConfig serverConfig = (ServerConfig)Config.getInstance().getJsonObjectConfig(ServerConfig.CONFIG_NAME, ServerConfig.class);
+                ServerConfig serverConfig = ServerConfig.getInstance();
                 Result<String> result = getServiceById(config.getPortalHost(), serverConfig.getServiceId());
                 if(result.isSuccess()) {
                     String serviceString = result.getResult();

File: api-key/src/main/java/com/networknt/apikey/ApiKeyHandler.java
Patch:
@@ -72,15 +72,15 @@ public void register() {
         // As apiKeys are in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("apiKey");
-        ModuleRegistry.registerModule(ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(ApiKeyConfig.CONFIG_NAME, ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
     }
 
     @Override
     public void reload() {
         config.reload();
         List<String> masks = new ArrayList<>();
         masks.add("apiKey");
-        ModuleRegistry.registerModule(ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(ApiKeyConfig.CONFIG_NAME, ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("ApiKeyHandler is reloaded.");
     }
 

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -362,13 +362,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(AuditHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(AuditConfig.CONFIG_NAME, AuditHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(AuditHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(AuditConfig.CONFIG_NAME, AuditHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("AuditHandler is reloaded.");
     }
 }

File: audit/src/test/java/com/networknt/audit/ParameterHandler.java
Patch:
@@ -76,7 +76,6 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ParameterHandler.class.getName(), null, null);
     }
 
 }
\ No newline at end of file

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -332,15 +332,15 @@ public void register() {
         // As passwords are in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("password");
-        ModuleRegistry.registerModule(BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(BasicAuthConfig.CONFIG_NAME, BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
     }
 
     @Override
     public void reload() {
         config.reload();
         List<String> masks = new ArrayList<>();
         masks.add("password");
-        ModuleRegistry.registerModule(BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(BasicAuthConfig.CONFIG_NAME, BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("BasicAuthHandler is reloaded.");
     }
 }

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -208,13 +208,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(BodyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, BodyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BodyConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(BodyHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, BodyHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("BodyHandler is reloaded.");
     }
 }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -188,13 +188,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
         if (LOG.isInfoEnabled())
             LOG.info("RequestBodyInterceptor is reloaded.");
     }

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -46,13 +46,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(BodyConfig.CONFIG_NAME, ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
         if (LOG.isInfoEnabled())
             LOG.info("ResponseBodyInterceptor is reloaded.");
     }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -187,7 +187,7 @@ private Http2Client(final ClassLoader classLoader) {
 
         // register module.
         List<String> masks = List.of(MASK_KEY_CLIENT_SECRET, MASK_KEY_TRUST_STORE_PASS, MASK_KEY_KEY_STORE_PASS, MASK_KEY_KEY_PASS);
-        ModuleRegistry.registerModule(Http2Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ClientConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(ClientConfig.CONFIG_NAME, Http2Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ClientConfig.CONFIG_NAME), masks);
     }
 
     private void addProvider(Map<String, ClientProvider> map, String scheme, ClientProvider provider) {

File: config-reload/src/test/java/com/networknt/config/reload/handler/BaseTest.java
Patch:
@@ -34,7 +34,7 @@ public static void setUp() {
                     .build();
             server.start();
         }
-        ModuleRegistry.registerModule(BodyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CONFIG_NAME, BodyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @AfterClass

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -73,7 +73,7 @@ public ConsulRegistry(URL url, ConsulClient client) {
         ArrayBlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<Runnable>(20000);
         notifyExecutor = new ThreadPoolExecutor(10, 30, 30 * 1000, TimeUnit.MILLISECONDS, workQueue);
         logger.info("ConsulRegistry init finish.");
-        ModuleRegistry.registerModule(ConsulRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ConsulConfig.CONFIG_NAME), List.of(MASK_KEY_CONSUL_TOKEN));
+        ModuleRegistry.registerModule(ConsulConfig.CONFIG_NAME, ConsulRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ConsulConfig.CONFIG_NAME), List.of(MASK_KEY_CONSUL_TOKEN));
     }
 
     public ConcurrentHashMap<String, ConcurrentHashMap<URL, NotifyListener>> getNotifyListeners() {

File: content/src/main/java/com/networknt/content/ContentHandler.java
Patch:
@@ -64,7 +64,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ContentConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ContentConfig.CONFIG_NAME, ContentConfig.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
@@ -84,7 +84,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ContentConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ContentConfig.CONFIG_NAME, ContentConfig.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) {
             logger.info("ContentHandler is enabled.");
         }

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -116,13 +116,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(CorrelationHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CorrelationConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CorrelationConfig.CONFIG_NAME, CorrelationHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CorrelationConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(CorrelationHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(CorrelationConfig.CONFIG_NAME, CorrelationHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) {
             logger.info("CorrelationHandler is enabled.");
         }

File: cors/src/main/java/com/networknt/cors/CorsHttpHandler.java
Patch:
@@ -120,13 +120,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(CorsHttpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CorsConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CorsConfig.CONFIG_NAME, CorsHttpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CorsConfig.CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(CorsHttpHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(CorsConfig.CONFIG_NAME, CorsHttpHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) {
             logger.info("CorsHttpHandler is enabled.");
         }

File: deref-token/src/main/java/com/networknt/deref/DerefMiddlewareHandler.java
Patch:
@@ -106,13 +106,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(DerefMiddlewareHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DerefConfig.CONFIG_NAME, DerefMiddlewareHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config = (DerefConfig)Config.getInstance().getJsonObjectConfigNoCache(DerefConfig.CONFIG_NAME, DerefConfig.class);
-        ModuleRegistry.registerModule(DerefMiddlewareHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DerefConfig.CONFIG_NAME, DerefMiddlewareHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("DerefMiddlewareHandler is reloaded.");
     }
 }

File: dump/src/main/java/com/networknt/dump/DumpHandler.java
Patch:
@@ -61,7 +61,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(DumpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DumpConfig.CONFIG_NAME, DumpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -100,7 +100,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config = (DumpConfig)Config.getInstance().getJsonObjectConfigNoCache(DumpConfig.CONFIG_NAME, DumpConfig.class);
-        ModuleRegistry.registerModule(DumpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(DumpConfig.CONFIG_NAME, DumpHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DumpConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("DumpHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/OAuthServerHandler.java
Patch:
@@ -44,7 +44,7 @@ public class OAuthServerHandler implements LightHttpHandler {
     public OAuthServerHandler() {
         config = OAuthServerConfig.load();
         if(logger.isInfoEnabled()) logger.info("OAuthServerHandler is constructed.");
-        ModuleRegistry.registerModule(OAuthServerHandler.class.getName(), config.getMappedConfig(),null);
+        ModuleRegistry.registerModule(OAuthServerConfig.CONFIG_NAME, OAuthServerHandler.class.getName(), config.getMappedConfig(),null);
     }
 
     @Override

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -49,7 +49,7 @@ public class RouterHandler implements HttpHandler {
     protected static AbstractMetricsHandler metricsHandler;
     public RouterHandler() {
         config = RouterConfig.load();
-        ModuleRegistry.registerModule(RouterHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RouterConfig.CONFIG_NAME, RouterHandler.class.getName(), config.getMappedConfig(), null);
         // As we are building a client side router for the light platform, the assumption is the server will
         // be on HTTP 2.0 TSL always. No need to handle HTTP 1.1 case here.
         LoadBalancingRouterProxyClient client = new LoadBalancingRouterProxyClient();
@@ -99,7 +99,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
 
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(RouterHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RouterConfig.CONFIG_NAME, RouterHandler.class.getName(), config.getMappedConfig(), null);
         LoadBalancingRouterProxyClient client = new LoadBalancingRouterProxyClient();
         if(config.httpsEnabled) client.setSsl(Http2Client.getInstance().getDefaultXnioSsl());
         if(config.http2Enabled) {

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -136,13 +136,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathPrefixServiceConfig.CONFIG_NAME, PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathPrefixServiceConfig.CONFIG_NAME, PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("PathPrefixServiceHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathServiceHandler.java
Patch:
@@ -114,13 +114,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(PathServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathServiceConfig.CONFIG_NAME, PathServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(PathServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathServiceConfig.CONFIG_NAME, PathServiceHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("PathServiceHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java
Patch:
@@ -101,13 +101,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ServiceDictHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ServiceDictConfig.CONFIG_NAME, ServiceDictHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ServiceDictHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ServiceDictConfig.CONFIG_NAME, ServiceDictHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("ServiceDictHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/TokenConfig.java
Patch:
@@ -22,7 +22,7 @@ public class TokenConfig {
     boolean enabled;
     List<String> appliedPathPrefixes;
 
-    private Config config;
+    private final Config config;
     private Map<String, Object> mappedConfig;
 
     private TokenConfig() {

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -200,13 +200,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, TokenHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(TokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TokenConfig.CONFIG_NAME, TokenHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("TokenHandler is reloaded.");
     }
 }

File: encode-decode/src/main/java/com/networknt/decode/RequestDecodeHandler.java
Patch:
@@ -84,7 +84,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(RequestDecodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(RequestDecodeConfig.CONFIG_NAME, RequestDecodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -102,7 +102,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(RequestDecodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(RequestDecodeConfig.CONFIG_NAME, RequestDecodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RequestDecodeConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("RequestDecodeHandler is reloaded.");
     }
 }

File: encode-decode/src/main/java/com/networknt/encode/ResponseEncodeHandler.java
Patch:
@@ -81,7 +81,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ResponseEncodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ResponseEncodeConfig.CONFIG_NAME, ResponseEncodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
     }
 
     @Override
@@ -102,7 +102,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(ResponseEncodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ResponseEncodeConfig.CONFIG_NAME, ResponseEncodeHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ResponseEncodeConfig.CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("ResponseEncodeHandler is reloaded.");
     }
 }

File: exception/src/main/java/com/networknt/exception/ExceptionConfig.java
Patch:
@@ -24,6 +24,7 @@
  * @author  Steve Hu
  */
 public class ExceptionConfig {
+    public static final String CONFIG_NAME = "exception";
     boolean enabled;
 
     @JsonIgnore

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -139,13 +139,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ExceptionConfig.CONFIG_NAME, ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config =  (ExceptionConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ExceptionConfig.class);
-        ModuleRegistry.registerModule(ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ExceptionConfig.CONFIG_NAME, ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("ExceptionHandler is reloaded.");
     }
 }

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -75,7 +75,7 @@ public static void init() {
         initChains();
         initPaths();
         initDefaultHandlers();
-        ModuleRegistry.registerModule(Handler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(HandlerConfig.CONFIG_NAME, Handler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     /**

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -69,12 +69,12 @@ public void reload() {
         if (LOG.isTraceEnabled())
             LOG.trace("request-injection.yml is reloaded");
 
-        ModuleRegistry.registerModule(RequestInjectionConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestInjectionConfig.CONFIG_NAME, RequestInterceptorInjectionHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(RequestInjectionConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestInjectionConfig.CONFIG_NAME, RequestInterceptorInjectionHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override

File: handler/src/main/java/com/networknt/handler/config/HandlerConfig.java
Patch:
@@ -24,6 +24,8 @@
  * @author Dan Dobrin
  */
 public class HandlerConfig {
+    public static final String CONFIG_NAME = "handler";
+
     private boolean enabled;
     private List<Object> handlers;
     private Map<String, List<String>> chains;

File: health/src/main/java/com/networknt/health/HealthGetHandler.java
Patch:
@@ -52,7 +52,7 @@ public class HealthGetHandler implements LightHttpHandler {
 
     public HealthGetHandler(){
         config = HealthConfig.load();
-        ModuleRegistry.registerModule(HealthGetHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, HealthGetHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isTraceEnabled()) logger.trace("HealthGetHandler is constructed.");
     }
 
@@ -85,7 +85,7 @@ public void setResult(String result) {
 
     public static void reload() {
         config = HealthConfig.load();
-        ModuleRegistry.registerModule(HealthGetHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(HealthConfig.CONFIG_NAME, HealthGetHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("HealthGetHandler is reloaded.");
     }
 }
\ No newline at end of file

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -52,7 +52,7 @@ public class ServerInfoGetHandler implements LightHttpHandler {
     public ServerInfoGetHandler() {
         if(logger.isDebugEnabled()) logger.debug("ServerInfoGetHandler is constructed");
         config = (ServerInfoConfig)Config.getInstance().getJsonObjectConfig(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class);
-        ModuleRegistry.registerModule(ServerInfoConfig.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ServerInfoConfig.CONFIG_NAME),null);
+        ModuleRegistry.registerModule(ServerInfoConfig.CONFIG_NAME, ServerInfoConfig.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ServerInfoConfig.CONFIG_NAME),null);
     }
 
     @Override

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -87,7 +87,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ExternalServiceConfig.CONFIG_NAME, ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
@@ -102,7 +102,7 @@ public void reload() {
                 logger.error("An instance of MetricsHandler is not configured in the handler.yml.");
             }
         }
-        ModuleRegistry.registerModule(ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ExternalServiceConfig.CONFIG_NAME, ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("ExternalServiceHandler is reloaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -63,7 +63,7 @@ public class LightProxyHandler implements HttpHandler {
 
     public LightProxyHandler() {
         config = ProxyConfig.load();
-        ModuleRegistry.registerModule(LightProxyHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ProxyConfig.CONFIG_NAME, LightProxyHandler.class.getName(), config.getMappedConfig(), null);
         List<String> hosts = new ArrayList<>(Arrays.asList(config.getHosts().split(",")));
         if(logger.isTraceEnabled()) logger.trace("hosts = " + JsonMapper.toJson(hosts));
         LoadBalancingProxyClient loadBalancer = new LoadBalancingProxyClient()
@@ -161,7 +161,7 @@ private JwtClaims extractClaimsFromJwt(HeaderMap headerValues) {
 
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(LightProxyHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ProxyConfig.CONFIG_NAME, LightProxyHandler.class.getName(), config.getMappedConfig(), null);
         List<String> hosts = new ArrayList<>(Arrays.asList(config.getHosts().split(",")));
         if(logger.isTraceEnabled()) logger.trace("hosts = " + JsonMapper.toJson(hosts));
         LoadBalancingProxyClient loadBalancer = new LoadBalancingProxyClient()

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -121,7 +121,7 @@ public void register() {
         masks.add("trustStorePass");
         masks.add("password");
         // use a new no cache instance to avoid the default config to be overwritten.
-        ModuleRegistry.registerModule(MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(MrasConfig.CONFIG_NAME, MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
     }
 
     @Override
@@ -142,7 +142,7 @@ public void reload() {
         masks.add("trustStorePass");
         masks.add("password");
         // use a new no cache instance to avoid the default config to be overwritten.
-        ModuleRegistry.registerModule(MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(MrasConfig.CONFIG_NAME, MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("MrasHandler is reloaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -118,7 +118,7 @@ public void register() {
         // As certPassword is in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("certPassword");
-        ModuleRegistry.registerModule(SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(SalesforceConfig.CONFIG_NAME, SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
     }
 
     @Override
@@ -135,7 +135,7 @@ public void reload() {
         }
         List<String> masks = new ArrayList<>();
         masks.add("certPassword");
-        ModuleRegistry.registerModule(SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(SalesforceConfig.CONFIG_NAME, SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
         if(logger.isInfoEnabled()) logger.info("SalesforceHandler is reloaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/tableau/TableauSimpleAuthHandler.java
Patch:
@@ -68,8 +68,7 @@ public class TableauSimpleAuthHandler implements MiddlewareHandler {
     private static final HttpString TABLEAU_TOKEN = new HttpString("X-Tableau-Auth");
     private static final HttpString TABLEAU_CONTENT_URL = new HttpString("tableauContentUrl");
 
-    private static final TableauConfig config =
-            (TableauConfig) Config.getInstance().getJsonObjectConfig(TABLEAU_CONFIG_NAME, TableauConfig.class);
+    private static final TableauConfig config = TableauConfig.load();
     private static final Map<String, Object> secretConfig;
 
     private volatile HttpHandler next;
@@ -181,7 +180,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TableauSimpleAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(TABLEAU_CONFIG_NAME), null);
+        ModuleRegistry.registerModule(TableauConfig.CONFIG_NAME, TableauSimpleAuthHandler.class.getName(), config.getMappedConfig(), null);
     }
 
 }

File: ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistHandler.java
Patch:
@@ -92,13 +92,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(WhitelistHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(WhitelistConfig.CONFIG_NAME, WhitelistHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(WhitelistHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(WhitelistConfig.CONFIG_NAME, WhitelistHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("WhitelistHandler is reloaded.");
     }
 

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerGetHandler.java
Patch:
@@ -65,7 +65,7 @@ public class LoggerGetHandler implements LightHttpHandler {
     public LoggerGetHandler() {
         if(logger.isInfoEnabled()) logger.info("LoggerGetHandler is constructed.");
         config = LoggerConfig.load();
-        ModuleRegistry.registerModule(LoggerConfig.class.getName(), config.getMappedConfig(),null);
+        ModuleRegistry.registerModule(LoggerConfig.CONFIG_NAME, LoggerConfig.class.getName(), config.getMappedConfig(),null);
     }
 
     @Override

File: mask/src/main/java/com/networknt/mask/Mask.java
Patch:
@@ -47,11 +47,11 @@ public class Mask {
     public static final String MASK_TYPE_JSON = "json";
 
     static final Logger logger = LoggerFactory.getLogger(Mask.class);
-    private static Map<String, Object> config;
+    private static final Map<String, Object> config;
 
     static {
         config = Config.getInstance().getJsonMapConfigNoCache(MASK_CONFIG);
-        ModuleRegistry.registerModule(Mask.class.getName(), config, null);
+        ModuleRegistry.registerModule(MASK_CONFIG, Mask.class.getName(), config, null);
     }
 
     /**

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -47,7 +47,7 @@ public APMMetricsHandler() {
             pattern = Pattern.compile(config.getIssuerRegex());
         }
         serverConfig = (ServerConfig) Config.getInstance().getJsonObjectConfig(ServerConfig.CONFIG_NAME, ServerConfig.class);
-        ModuleRegistry.registerModule(MetricsConfig.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isDebugEnabled()) logger.debug("APMMetricsHandler is constructed!");
     }
 
@@ -157,13 +157,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
         if(logger.isInfoEnabled()) logger.info("APMMetricsHandler is reloaded.");
     }
 }

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -42,7 +42,7 @@ public MetricsHandler() {
         if(config.getIssuerRegex() != null) {
             pattern = Pattern.compile(config.getIssuerRegex());
         }
-        ModuleRegistry.registerModule(MetricsHandler.class.getName(), config.getMappedConfig(), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), config.getMappedConfig(), List.of(MASK_KEY_SERVER_PASS));
         if(logger.isDebugEnabled()) logger.debug("MetricsHandler is constructed!");
     }
 
@@ -116,13 +116,13 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
+        ModuleRegistry.registerModule(MetricsConfig.CONFIG_NAME, MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
         if(logger.isInfoEnabled()) logger.info("MetricsHandler is reloaded.");
     }
 

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java
Patch:
@@ -59,7 +59,7 @@ public PortalRegistry(URL url, PortalRegistryClient client) {
         }
         lookupInterval = getUrl().getIntParameter(URLParamType.registrySessionTimeout.getName(), PortalRegistryConstants.DEFAULT_LOOKUP_INTERVAL);
         logger.info("PortalRegistry init finish.");
-        ModuleRegistry.registerModule(PortalRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(CONFIG_NAME, PortalRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusConfig.java
Patch:
@@ -25,6 +25,7 @@
  * @author Gavin Chen
  */
 public class PrometheusConfig {
+    public static final String CONFIG_NAME = "prometheus";
     boolean enabled;
     boolean enableHotspot;
 

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusHandler.java
Patch:
@@ -131,7 +131,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(PrometheusHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(PrometheusConfig.CONFIG_NAME, PrometheusHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -104,7 +104,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(LimitHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(LimitConfig.CONFIG_NAME, LimitHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
@@ -116,7 +116,7 @@ public void reload() {
             logger.error("Failed to recreate RateLimiter with reloaded config.", e);
         }
         // after reload, we need to update the config in the module registry to ensure that server info returns the latest configuration.
-        ModuleRegistry.registerModule(LimitHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(LimitConfig.CONFIG_NAME, LimitHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("LimitHandler is reloaded.");
     }
 }

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -52,7 +52,7 @@ public DirectRegistry(URL url) {
         super(url);
         config = DirectRegistryConfig.load();
         if(config.directUrls != null) {
-            ModuleRegistry.registerModule(DirectRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DirectRegistryConfig.CONFIG_NAME), null);
+            ModuleRegistry.registerModule(DirectRegistryConfig.CONFIG_NAME, DirectRegistry.class.getName(), config.getMappedConfig(), null);
         }
         if(url.getParameters() != null && url.getParameters().size() > 0) {
             // The parameters come from the service.yml injection. If it is empty, then load it from the direct-registry.yml
@@ -156,7 +156,7 @@ protected void doUnavailable(URL url) {
     public static void reload() {
         config.reload();
         directUrls = config.getDirectUrls();
-        if(directUrls != null) ModuleRegistry.registerModule(DirectRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DirectRegistryConfig.CONFIG_NAME), null);
+        if(directUrls != null) ModuleRegistry.registerModule(DirectRegistryConfig.CONFIG_NAME, DirectRegistry.class.getName(), config.getMappedConfig(), null);
         if(logger.isTraceEnabled()) logger.trace("DirectRegistry is reloaded");
     }
 }

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -47,7 +47,7 @@ public class RequestTransformerInterceptor implements RequestInterceptor {
     public RequestTransformerInterceptor() {
         if(logger.isInfoEnabled()) logger.info("RequestTransformerHandler is loaded");
         config = RequestTransformerConfig.load();
-        ModuleRegistry.registerModule(RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestTransformerConfig.CONFIG_NAME, RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
@@ -69,13 +69,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestTransformerConfig.CONFIG_NAME, RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(RequestTransformerConfig.CONFIG_NAME, RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
         if(logger.isTraceEnabled()) logger.trace("RequestTransformerInterceptor is reloaded.");
 
     }

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java
Patch:
@@ -50,7 +50,7 @@ public class RuleLoaderStartupHook implements StartupHookProvider {
     public void onStartup() {
         config = RuleLoaderConfig.load();
         List<String> masks = List.of(MASK_PORTAL_TOKEN);
-        ModuleRegistry.registerModule(RuleLoaderStartupHook.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RuleLoaderConfig.CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(RuleLoaderConfig.CONFIG_NAME, RuleLoaderStartupHook.class.getName(), Config.getInstance().getJsonMapConfigNoCache(RuleLoaderConfig.CONFIG_NAME), masks);
         if(config.isEnabled()) {
             // by default the rules for the service is loaded from the light-portal; however, it can be configured to loaded from config folder.
             if(RuleLoaderConfig.RULE_SOURCE_CONFIG_FOLDER.equals(config.getRuleSource())) {

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -137,12 +137,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(SanitizerHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SanitizerConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(SanitizerConfig.CONFIG_NAME, SanitizerHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config = SanitizerConfig.load();
+        ModuleRegistry.registerModule(SanitizerConfig.CONFIG_NAME, SanitizerHandler.class.getName(), config.getMappedConfig(), null);
     }
 
 }

File: security/src/main/java/com/networknt/security/SecurityConfig.java
Patch:
@@ -19,6 +19,7 @@
  * @author Steve Hu
  */
 public class SecurityConfig {
+    public static final String CONFIG_NAME = "security";
     private static final Logger logger = LoggerFactory.getLogger(SecurityConfig.class);
 
     private static final String ENABLE_VERIFY_JWT = "enableVerifyJwt";

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -124,7 +124,7 @@ public static void init() {
             masks.add("keyPass");
             masks.add("truststorePass");
             masks.add("bootstrapStorePass");
-            ModuleRegistry.registerModule(Server.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SERVER_CONFIG_NAME), masks);
+            ModuleRegistry.registerModule(ServerConfig.CONFIG_NAME, Server.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SERVER_CONFIG_NAME), masks);
 
             // start the server
             start();

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -67,7 +67,7 @@ public class SingletonServiceFactory {
             e.printStackTrace();
             logger.error("Exception:", e);
         }
-        ModuleRegistry.registerModule(SingletonServiceFactory.class.getName(), serviceConfig.getMappedConfig(), null);
+        ModuleRegistry.registerModule(ServiceConfig.CONFIG_NAME, SingletonServiceFactory.class.getName(), serviceConfig.getMappedConfig(), null);
     }
 
     private static Object handleSingleImpl(List<String> interfaceClasses, List<Object> value) throws Exception {

File: sidecar/src/main/java/com/networknt/router/SidecarRouterHandler.java
Patch:
@@ -51,7 +51,7 @@ public class SidecarRouterHandler extends RouterHandler implements MiddlewareHan
 
     public static Map<String, Object> config = Config.getInstance().getJsonMapConfigNoCache(ROUTER_CONFIG_NAME);
     public static SidecarConfig sidecarConfig;
-    public static ServerConfig serverConfig = (ServerConfig)Config.getInstance().getJsonObjectConfig(ServerConfig.CONFIG_NAME, ServerConfig.class);
+    public static ServerConfig serverConfig = ServerConfig.getInstance();
 
     public SidecarRouterHandler() {
         super();
@@ -105,13 +105,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(SidecarRouterHandler.class.getName(), config, null);
+        ModuleRegistry.registerModule(SidecarConfig.CONFIG_NAME, SidecarRouterHandler.class.getName(), config, null);
     }
 
     @Override
     public void reload() {
         sidecarConfig.reload();
-        ModuleRegistry.registerModule(SidecarRouterHandler.class.getName(), sidecarConfig.getMappedConfig(), null);
+        ModuleRegistry.registerModule(SidecarConfig.CONFIG_NAME, SidecarRouterHandler.class.getName(), sidecarConfig.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("SidecarRouterHandler is reloaded.");
     }
 }

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -63,7 +63,7 @@ public class Status {
     private static Map<String, Object> config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
 
     static {
-        ModuleRegistry.registerModule(Status.class.getName(), config, null);
+        ModuleRegistry.registerModule(CONFIG_NAME, Status.class.getName(), config, null);
         try {
             statusSerializer = SingletonServiceFactory.getBean(StatusSerializer.class);
         } catch (ExceptionInInitializerError e) {
@@ -303,7 +303,7 @@ private String toStringConditionally(boolean showMessage, boolean showDescriptio
 
     public static void reload() {
         config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
-        ModuleRegistry.registerModule(Status.class.getName(), config, null);
+        ModuleRegistry.registerModule(CONFIG_NAME, Status.class.getName(), config, null);
     }
 
     /**

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -91,13 +91,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TraceabilityHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override
     public void reload() {
         config.reload();
-        ModuleRegistry.registerModule(TraceabilityHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(TraceabilityConfig.CONFIG_NAME, TraceabilityHandler.class.getName(), config.getMappedConfig(), null);
         if(logger.isInfoEnabled()) logger.info("TraceabilityHandler is reloaded.");
     }
 }

File: utility/src/main/java/com/networknt/utility/ModuleRegistry.java
Patch:
@@ -31,18 +31,18 @@ public class ModuleRegistry {
 
     private static final Map<String, Object> registry = new HashMap<>();
 
-    public static void registerModule(String moduleName, Map<String, Object> config, List<String> masks) {
+    public static void registerModule(String configName, String moduleClass, Map<String, Object> config, List<String> masks) {
         // use module name as key for the config map will make api-certification parses this object easily.
         if(config != null) {
             if(ServerConfig.getInstance().isMaskConfigProperties() && masks != null && masks.size() > 0) {
                 for (String mask : masks) {
                     maskNode(config, mask);
                 }
             }
-            registry.put(moduleName, config);
+            registry.put(configName + ":" + moduleClass, config);
         } else {
             // we don't have any module without config, but we cannot guarantee user created modules
-            registry.put(moduleName, new HashMap<String, Object>());
+            registry.put(configName + ":" + moduleClass, new HashMap<String, Object>());
         }
     }
 

File: jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerHandler.java
Patch:
@@ -21,6 +21,7 @@
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.server.Server;
+import com.networknt.server.ServerConfig;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.NetUtils;
@@ -102,7 +103,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         Span rootSpan = spanBuilder
                 .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_SERVER)
                 .withTag(Tags.PEER_HOSTNAME.getKey(), NetUtils.getLocalAddressByDatagram())
-                .withTag(Tags.PEER_PORT.getKey(), Server.getServerConfig().getHttpsPort())
+                .withTag(Tags.PEER_PORT.getKey(), ServerConfig.getInstance().getHttpsPort())
                 .start();
         tracer.activateSpan(rootSpan);
         // This can be retrieved in the business handler to add tags and logs for tracing.

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -54,10 +54,10 @@ public APMMetricsHandler() {
 	@Override
 	public void handleRequest(HttpServerExchange exchange) throws Exception {
         if (firstTime) {
-            commonTags.put("api", Server.getServerConfig().getServiceId());
-            commonTags.put("env", Server.getServerConfig().getEnvironment());
+            commonTags.put("api", ServerConfig.getInstance().getServiceId());
+            commonTags.put("env", ServerConfig.getInstance().getEnvironment());
             commonTags.put("addr", Server.currentAddress);
-            commonTags.put("port", "" + (Server.getServerConfig().isEnableHttps() ? Server.currentHttpsPort : Server.currentHttpPort));
+            commonTags.put("port", "" + (ServerConfig.getInstance().isEnableHttps() ? Server.currentHttpsPort : Server.currentHttpPort));
             InetAddress inetAddress = Util.getInetAddress();
             commonTags.put("host", inetAddress == null ? "unknown" : inetAddress.getHostName()); // will be container id if in docker.
             if (logger.isDebugEnabled()) {

File: server-config/src/main/java/com/networknt/server/ServerOption.java
Patch:
@@ -2,8 +2,6 @@
 
 import java.util.Map;
 
-import static com.networknt.server.Server.logger;
-
 /**
  * This enum class is used to set and validate server options.
  * The following server options are supported:
@@ -46,7 +44,7 @@ protected static void serverOptionInit(Map<String, Object> mapConfig, ServerConf
         for (ServerOption serverOption : ServerOption.values()) {
             if (mapConfig.containsKey(serverOption.value())) {
                 if (!setServerOption(serverOption, mapConfig.get(serverOption.value), serverConfig)) {
-                    logger.warn("Server option: " + serverOption.value() + " set in server.yml is invalid, has been reset to default value.");
+                    ServerConfig.logger.warn("Server option: " + serverOption.value() + " set in server.yml is invalid, has been reset to default value.");
                 }
             } else {
                 setToDefaultServerOption(serverOption, serverConfig);

File: server-config/src/test/java/com/networknt/server/ServerConfigEnvTest.java
Patch:
@@ -13,7 +13,7 @@ public class ServerConfigEnvTest {
     public void testStringEnv() {
         config.clear();
         // ensure that env is "0001" instead of "1"
-        ServerConfig serverConfig = (ServerConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ServerConfig.class);
+        ServerConfig serverConfig = ServerConfig.getInstance(CONFIG_NAME);
         Assert.assertEquals("0001", serverConfig.getEnvironment());
     }
 }

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -392,8 +392,8 @@ private static String getConfigServerQueryParameters() {
     private static KeyStore loadBootstrapTrustStore(){
         String truststorePassword = getPropertyOrEnv(CLIENT_TRUSTSTORE_PASS);
         String truststoreLocation = getPropertyOrEnv(CLIENT_TRUSTSTORE_LOC);
-        if(truststoreLocation == null) truststoreLocation = Server.getServerConfig().getBootstrapStoreName();
-        if(truststorePassword == null) truststorePassword = Server.getServerConfig().getBootstrapStorePass();
+        if(truststoreLocation == null) truststoreLocation = ServerConfig.getInstance().getBootstrapStoreName();
+        if(truststorePassword == null) truststorePassword = ServerConfig.getInstance().getBootstrapStorePass();
 
         try (InputStream stream = new FileInputStream(truststoreLocation)) {
             if (stream == null) {

File: server/src/main/java/com/networknt/server/UrlConfigLoader.java
Patch:
@@ -333,9 +333,9 @@ private static TrustManager[] buildTrustManagers(final KeyStore trustStore) {
 	private static KeyStore loadBootstrapTrustStore() {
 		String truststorePassword = System.getenv(CLIENT_TRUSTSTORE_PASS);
 		String truststoreLocation = System.getenv(CLIENT_TRUSTSTORE_LOC);
-		if (truststorePassword == null && truststorePassword == null) {
-			truststorePassword = Server.getServerConfig().getBootstrapStorePass();
-			truststorePassword = Server.getServerConfig().getBootstrapStorePass();
+		if (truststorePassword == null && truststoreLocation == null) {
+			truststorePassword = ServerConfig.getInstance().getBootstrapStorePass();
+			truststoreLocation = ServerConfig.getInstance().getBootstrapStoreName();
 		}
 		if (StringUtils.isBlank(truststoreLocation)) {
 			return null;

File: server/src/test/java/com/networknt/server/TestServer.java
Patch:
@@ -39,7 +39,7 @@ private TestServer() {
     }
 
     public ServerConfig getServerConfig() {
-        return Server.getServerConfig();
+        return ServerConfig.getInstance();
     }
 
     @Override

File: utility/src/main/java/com/networknt/utility/ModuleRegistry.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.networknt.utility;
 
+import com.networknt.server.ServerConfig;
+
 import java.util.*;
 
 /**
@@ -32,7 +34,7 @@ public class ModuleRegistry {
     public static void registerModule(String moduleName, Map<String, Object> config, List<String> masks) {
         // use module name as key for the config map will make api-certification parses this object easily.
         if(config != null) {
-            if(masks != null && masks.size() > 0) {
+            if(ServerConfig.getInstance().isMaskConfigProperties() && masks != null && masks.size() > 0) {
                 for (String mask : masks) {
                     maskNode(config, mask);
                 }

File: api-key/src/main/java/com/networknt/apikey/ApiKeyHandler.java
Patch:
@@ -31,7 +31,7 @@
 public class ApiKeyHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(ApiKeyHandler.class);
     static final String API_KEY_MISMATCH = "ERR10075";
-    ApiKeyConfig config;
+    static ApiKeyConfig config;
 
     private volatile HttpHandler next;
 

File: utility/src/main/java/com/networknt/utility/ModuleRegistry.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ModuleRegistry {
 
-    private static Map<String, Object> registry = new HashMap<>();
+    private static final Map<String, Object> registry = new HashMap<>();
 
     public static void registerModule(String moduleName, Map<String, Object> config, List<String> masks) {
         // use module name as key for the config map will make api-certification parses this object easily.

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -47,6 +47,7 @@ public class RequestTransformerInterceptor implements RequestInterceptor {
     public RequestTransformerInterceptor() {
         if(logger.isInfoEnabled()) logger.info("RequestTransformerHandler is loaded");
         config = RequestTransformerConfig.load();
+        ModuleRegistry.registerModule(RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -62,6 +62,7 @@ public class ResponseTransformerInterceptor implements ResponseInterceptor {
     public ResponseTransformerInterceptor() {
         if (logger.isInfoEnabled()) logger.info("ResponseManipulatorHandler is loaded");
         config = ResponseTransformerConfig.load();
+        ModuleRegistry.registerModule(ResponseTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerGetHandler.java
Patch:
@@ -30,6 +30,7 @@
 import com.networknt.monad.Success;
 import com.networknt.status.Status;
 import com.networknt.utility.Constants;
+import com.networknt.utility.ModuleRegistry;
 import io.undertow.UndertowOptions;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;
@@ -64,6 +65,7 @@ public class LoggerGetHandler implements LightHttpHandler {
     public LoggerGetHandler() {
         if(logger.isInfoEnabled()) logger.info("LoggerGetHandler is constructed.");
         config = LoggerConfig.load();
+        ModuleRegistry.registerModule(LoggerConfig.class.getName(), config.getMappedConfig(),null);
     }
 
     @Override

File: info/src/main/java/com/networknt/info/ServerInfoConfig.java
Patch:
@@ -20,6 +20,7 @@
  * Created by steve on 18/09/16.
  */
 public class ServerInfoConfig {
+    public static final String CONFIG_NAME = "info";
     boolean enableServerInfo;
 
     public ServerInfoConfig() {

File: config-reload/src/test/java/com/networknt/config/reload/handler/ModuleRegistryGetHandlerTest.java
Patch:
@@ -76,7 +76,7 @@ public void testGetRegistryModules() throws Exception {
         ObjectMapper mapper = new ObjectMapper();
         List<String> modules = mapper.readValue(body, new TypeReference<List<String>>(){});
         Assert.assertEquals(200, statusCode);
-        Assert.assertEquals(2, modules.size());
+        Assert.assertEquals(3, modules.size());
     }
 
 }

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderConfig.java
Patch:
@@ -20,7 +20,7 @@ public class RuleLoaderConfig {
     private static final String ENDPOINT_RULES = "endpointRules";
 
     private Map<String, Object> mappedConfig;
-    private Config config;
+    private final Config config;
 
     boolean enabled;
     String ruleSource;

File: config-reload/src/main/java/com/networknt/config/reload/handler/ConfigReloadHandler.java
Patch:
@@ -41,7 +41,7 @@ public class ConfigReloadHandler implements LightHttpHandler {
 
     public ConfigReloadHandler() {
         if(logger.isDebugEnabled()) logger.debug("ConfigReloadHandler is constructed");
-        config = (ConfigReloadConfig) Config.getInstance().getJsonObjectConfig(ConfigReloadConfig.CONFIG_NAME, ConfigReloadConfig.class);
+        config = ConfigReloadConfig.load();
         ModuleRegistry.registerModule(ConfigReloadHandler.class.getName(), config.getMappedConfig(),null);
     }
 

File: cache-manager/src/main/java/com/networknt/cache/CacheManager.java
Patch:
@@ -36,6 +36,7 @@ static CacheManager getInstance() {
     void addCache(String cacheName, long maxSize, long expiryInMinutes);
     void put(String cacheName, String key, Object value);
     Object get(String cacheName, String key);
+    void delete(String cacheName, String key);
     void removeCache(String cacheName);
     int getSize(String cacheName);
 }

File: cache-manager/src/main/java/com/networknt/cache/CacheManager.java
Patch:
@@ -37,4 +37,5 @@ static CacheManager getInstance() {
     void put(String cacheName, String key, Object value);
     Object get(String cacheName, String key);
     void removeCache(String cacheName);
+    int getSize(String cacheName);
 }

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -6,6 +6,6 @@
 
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
-	public static final Pattern CRYPT_PATTERN = Pattern.compile("CRYPT:[a-zA-Z0-9:=/+]+");
+	public static final Pattern CRYPT_PATTERN = Pattern.compile("^CRYPT:.*$");
 	public static final String CRYPT_FIRST = "C"; 
 }

File: handler/src/main/java/com/networknt/handler/BuffersUtils.java
Patch:
@@ -34,7 +34,8 @@
  * @author Andrea Di Cesare {@literal <andrea@softinstigate.com>}
  */
 public class BuffersUtils {
-    public static final int MAX_CONTENT_SIZE = 16 * 1024 * 1024; // 16Mbyte
+    public static final RequestInjectionConfig config = RequestInjectionConfig.load();
+    public static final int MAX_CONTENT_SIZE = 16 * 1024 * config.getMaxBuffers(); // 16KB * maxBuffers
 
     private static final Logger LOG = LoggerFactory.getLogger(BuffersUtils.class);
 

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -85,7 +85,7 @@ public void reload() {
      * header to identity this is required to avoid response interceptors
      * dealing with compressed data
      *
-     * @param exchange
+     * @param exchange the exchange
      */
     private void forceIdentityEncodingForInterceptors(HttpServerExchange exchange) {
 

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -6,6 +6,6 @@
 
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
-	public static final Pattern CRYPT_PATTERN = Pattern.compile("CRYPT:[a-zA-Z0-9:]+");
+	public static final Pattern CRYPT_PATTERN = Pattern.compile("CRYPT:[a-zA-Z0-9:=/+]+");
 	public static final String CRYPT_FIRST = "C"; 
 }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -4,7 +4,7 @@
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.RequestInterceptor;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
 import io.undertow.connector.PooledByteBuffer;

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -4,7 +4,7 @@
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.ResponseInterceptor;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;

File: client-config/src/test/java/com/networknt/client/ClientConfigValueTest.java
Patch:
@@ -9,16 +9,15 @@
 
 
 public class ClientConfigValueTest {
-    public static final String CONFIG_NAME = "client";
     @Test
     public void testLoadConfig() {
-        ClientConfig config = ClientConfig.get(CONFIG_NAME);
+        ClientConfig config = ClientConfig.get();
         assertEquals(config.getConnectionExpireTime(), 1800000);
     }
 
     @Test
     public void testTokenConfig() {
-        ClientConfig config = ClientConfig.get(CONFIG_NAME);
+        ClientConfig config = ClientConfig.get();
         Map<String, Object> tokenConfig = config.getTokenConfig();
         System.out.println("tokenConfig = " + JsonMapper.toJson(tokenConfig));
     }

File: client/src/main/java/com/networknt/client/http/BodyPart.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.client.http;
 
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 
 import java.io.Serializable;
 

File: client/src/main/java/com/networknt/client/http/Http2ServiceRequest.java
Patch:
@@ -6,7 +6,7 @@
 import com.networknt.client.model.ServiceDef;
 import com.networknt.cluster.Cluster;
 import com.networknt.config.Config;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
 import com.networknt.monad.Success;

File: client/src/main/java/com/networknt/client/http/HttpRequestValue.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.client.http;
 
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 
 
 import java.io.Serializable;

File: client/src/main/java/com/networknt/client/http/HttpResponseValue.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.client.http;
 
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.status.HttpStatus;
 
 import java.io.Serializable;

File: client/src/test/java/com/networknt/client/http/HttpRequestValueTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.client.http;
 
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import org.junit.Before;
 import org.junit.Test;
 

File: client/src/test/java/com/networknt/client/http/HttpResponseValueTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.client.http;
 
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import org.junit.Before;
 import org.junit.Test;
 

File: common/src/main/java/com/networknt/common/ContentType.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.httpstring;
+package com.networknt.common;
 
 /**
  * an enum for http Content-Type header

File: handler/src/main/java/com/networknt/handler/Interceptor.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.networknt.config.Config;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.AttachmentKey;
 import io.undertow.util.HeaderMap;

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -19,7 +19,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.config.HandlerConfig;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.status.Status;
 import com.networknt.status.StatusWrapper;

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -1,7 +1,6 @@
 package com.networknt.handler;
 
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.httpstring.ContentType;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.proxy.mras;
 
-import com.networknt.body.BodyHandler;
 import com.networknt.client.ClientConfig;
 import com.networknt.client.Http2Client;
 import com.networknt.client.oauth.TokenResponse;
@@ -13,7 +12,7 @@
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.config.UrlRewriteRule;
 import com.networknt.httpstring.AttachmentConstants;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.metrics.MetricsConfig;
 import com.networknt.metrics.AbstractMetricsHandler;
 import com.networknt.monad.Failure;

File: ingress-proxy/src/test/java/com/networknt/proxy/mras/MrasConfigTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.networknt.proxy.mras;
 
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerGetHandler.java
Patch:
@@ -22,7 +22,7 @@
 import com.networknt.client.simplepool.SimpleConnectionHolder;
 import com.networknt.config.Config;
 import com.networknt.handler.LightHttpHandler;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.logging.model.LoggerConfig;
 import com.networknt.logging.model.LoggerInfo;
 import com.networknt.monad.Failure;

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerGetLogContentsHandler.java
Patch:
@@ -8,7 +8,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.networknt.config.Config;
 import com.networknt.handler.LightHttpHandler;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.logging.model.LoggerConfig;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerGetNameHandler.java
Patch:
@@ -19,7 +19,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.networknt.config.Config;
 import com.networknt.handler.LightHttpHandler;
-import com.networknt.httpstring.ContentType;
+import com.networknt.common.ContentType;
 import com.networknt.logging.model.LoggerConfig;
 import com.networknt.logging.model.LoggerInfo;
 import io.undertow.server.HttpServerExchange;

File: oauth-helper/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -17,9 +17,6 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.ClientConfig;
-import com.networknt.client.Http2Client;
-import com.networknt.common.SecretConstants;
-import com.networknt.config.Config;
 import com.networknt.status.Status;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: oauth-helper/src/main/java/com/networknt/client/oauth/ClientAuthenticatedUserRequest.java
Patch:
@@ -1,9 +1,6 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.ClientConfig;
-import com.networknt.client.Http2Client;
-import com.networknt.common.SecretConstants;
-import com.networknt.config.Config;
 import com.networknt.status.Status;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: oauth-helper/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -17,9 +17,6 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.ClientConfig;
-import com.networknt.client.Http2Client;
-import com.networknt.common.SecretConstants;
-import com.networknt.config.Config;
 import com.networknt.status.Status;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: oauth-helper/src/main/java/com/networknt/client/oauth/DerefRequest.java
Patch:
@@ -17,9 +17,6 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.ClientConfig;
-import com.networknt.client.Http2Client;
-import com.networknt.common.SecretConstants;
-import com.networknt.config.Config;
 import com.networknt.status.Status;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: oauth-helper/src/main/java/com/networknt/client/oauth/RefreshTokenRequest.java
Patch:
@@ -17,9 +17,6 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.ClientConfig;
-import com.networknt.client.Http2Client;
-import com.networknt.common.SecretConstants;
-import com.networknt.config.Config;
 import com.networknt.status.Status;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: oauth-helper/src/main/java/com/networknt/client/oauth/TokenKeyRequest.java
Patch:
@@ -31,7 +31,7 @@
  * @author Steve Hu
  */
 public class TokenKeyRequest extends KeyRequest {
-    private static Logger logger = LoggerFactory.getLogger(TokenKeyRequest.class);
+    private static final Logger logger = LoggerFactory.getLogger(TokenKeyRequest.class);
     private static final String CONFIG_PROPERTY_MISSING = "ERR10057";
 
     private boolean jwk;

File: security/src/test/java/com/networknt/security/JwtVerifierSingleJwkTest.java
Patch:
@@ -126,10 +126,11 @@ public static void beforeClass() throws IOException {
                             .addExactPath(API_MARKET, (exchange) -> {
                                 boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);
                                 Assert.assertTrue(hasScopeToken);
+                                String requestPath = exchange.getRequestPath();
                                 String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);
                                 // verify the jwt token with JWK.
                                 JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);
-                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true);
+                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
                                 exchange.getResponseSender().send(ByteBuffer.wrap(
                                         Config.getInstance().getMapper().writeValueAsBytes(
@@ -317,6 +318,7 @@ public void testSinglePetstoreAsych() throws Exception {
     }
 
     private String callMarketApiAsync() throws Exception {
+        logger.trace("callMarketApiAsync is called");
         final Http2Client client = createClient();
         // get a connection from the connection pool.
         final ClientConnection connection = client.borrowConnection(new URI("https://localhost:7772"), worker, client.getDefaultXnioSsl(), Http2Client.BUFFER_POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();

File: handler/src/main/java/com/networknt/handler/ResponseInjectionConfig.java
Patch:
@@ -74,9 +74,7 @@ Map<String, Object> getMappedConfig() {
 
     private void setConfigData() {
         Object object = getMappedConfig().get(ENABLED);
-
-        if (object != null && (Boolean) object)
-            enabled = true;
+        if (object != null) enabled = Config.loadBooleanValue(ENABLED, object);
     }
 
     private void setConfigList() {

File: api-key/src/main/java/com/networknt/apikey/ApiKeyHandler.java
Patch:
@@ -81,6 +81,7 @@ public void reload() {
         List<String> masks = new ArrayList<>();
         masks.add("apiKey");
         ModuleRegistry.registerModule(ApiKeyHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ApiKeyConfig.CONFIG_NAME), masks);
+        if(logger.isInfoEnabled()) logger.info("ApiKeyHandler is reloaded.");
     }
 
     @Override

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -368,5 +368,7 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(AuditHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("AuditHandler is reloaded.");
     }
 }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -194,6 +194,9 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(RequestBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        if (LOG.isInfoEnabled())
+            LOG.info("RequestBodyInterceptor is reloaded.");
     }
 
     @Override

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -52,6 +52,9 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(ResponseBodyInterceptor.class.getName(), config.getMappedConfig(), null);
+        if (LOG.isInfoEnabled())
+            LOG.info("ResponseBodyInterceptor is reloaded.");
     }
 
     @Override

File: cache-manager/src/main/java/com/networknt/cache/CacheConfig.java
Patch:
@@ -23,7 +23,7 @@ public class CacheConfig {
 
     List<CacheItem> caches;
 
-    private Config config;
+    private final Config config;
     private Map<String, Object> mappedConfig;
 
     private CacheConfig() {

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -62,7 +62,7 @@
  */
 public class ConsulClientImpl implements ConsulClient {
 	private static final Logger logger = LoggerFactory.getLogger(ConsulClientImpl.class);
-	private static final ConsulConfig config = (ConsulConfig)Config.getInstance().getJsonObjectConfig(ConsulConstants.CONFIG_NAME, ConsulConfig.class);
+	private static ConsulConfig config;
 	private static final int UNUSUAL_STATUS_CODE = 300;
 	private final Http2Client client = Http2Client.getInstance();
 
@@ -76,6 +76,7 @@ public class ConsulClientImpl implements ConsulClient {
 	 * just for backward compatibility.
 	 */
 	public ConsulClientImpl() {
+		config = ConsulConfig.load();
 		String consulUrl = config.getConsulUrl().toLowerCase();
 		optionMap =  isHttp2() ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY;
 		if(logger.isDebugEnabled()) logger.debug("consulUrl = {}", consulUrl);

File: deref-token/src/main/java/com/networknt/deref/DerefConfig.java
Patch:
@@ -22,6 +22,7 @@
  * @author Steve Hu
  */
 public class DerefConfig {
+    public static final String CONFIG_NAME = "deref";
     boolean enabled;
 
     public boolean isEnabled() {

File: dump/src/main/java/com/networknt/dump/DumpConfig.java
Patch:
@@ -25,6 +25,7 @@
  * this class is to load dump.yml config file, and map settings to properties of this class.
  */
 public class DumpConfig {
+    public static final String CONFIG_NAME = "dump";
     private boolean enabled = false;
     private boolean mask = false;
     private String logLevel = "INFO";

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -130,6 +130,6 @@ public void reload() {
                 logger.error("An instance of MetricsHandler is not configured in the handler.yml.");
             }
         }
-
+        if(logger.isInfoEnabled()) logger.info("RouterHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceConfig.java
Patch:
@@ -106,8 +106,6 @@ private void setMap() {
 
     private void setConfigData() {
         Object object = getMappedConfig().get(ENABLED);
-        if(object != null && (Boolean) object) {
-            enabled = true;
-        }
+        if(object != null) enabled = Config.loadBooleanValue(ENABLED, object);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -143,5 +143,6 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("PathPrefixServiceHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathServiceConfig.java
Patch:
@@ -103,8 +103,6 @@ private void setMap() {
 
     private void setConfigData() {
         Object object = getMappedConfig().get(ENABLED);
-        if(object != null && (Boolean) object) {
-            enabled = true;
-        }
+        if(object != null) enabled = Config.loadBooleanValue(ENABLED, object);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathServiceHandler.java
Patch:
@@ -121,5 +121,6 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(PathServiceHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("PathServiceHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictConfig.java
Patch:
@@ -112,8 +112,6 @@ private void setMap() {
 
     private void setConfigData() {
         Object object = getMappedConfig().get(ENABLED);
-        if(object != null && (Boolean) object) {
-            enabled = true;
-        }
+        if(object != null) enabled = Config.loadBooleanValue(ENABLED, object);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java
Patch:
@@ -108,5 +108,6 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(ServiceDictHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("ServiceDictHandler is reloaded.");
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/TokenConfig.java
Patch:
@@ -51,9 +51,7 @@ public void reload() {
     }
     public void setConfigData() {
         Object object = getMappedConfig().get(ENABLED);
-        if(object != null && (Boolean) object) {
-            enabled = true;
-        }
+        if(object != null) enabled = Config.loadBooleanValue(ENABLED, object);
     }
 
     public Map<String, Object> getMappedConfig() {

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -207,5 +207,6 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(TokenHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("TokenHandler is reloaded.");
     }
 }

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -145,5 +145,7 @@ public void register() {
     @Override
     public void reload() {
         config =  (ExceptionConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ExceptionConfig.class);
+        ModuleRegistry.registerModule(ExceptionHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        if(logger.isInfoEnabled()) logger.info("ExceptionHandler is reloaded.");
     }
 }

File: handler/src/main/java/com/networknt/handler/RequestInjectionConfig.java
Patch:
@@ -20,7 +20,7 @@ public class RequestInjectionConfig {
     private List<String> appliedBodyInjectionPathPrefixes;
 
     private Map<String, Object> mappedConfig;
-    private Config config;
+    private final Config config;
 
     public RequestInjectionConfig() {
         config = Config.getInstance();

File: handler/src/main/java/com/networknt/handler/ResponseInjectionConfig.java
Patch:
@@ -24,7 +24,7 @@ public class ResponseInjectionConfig {
     private List<String> appliedBodyInjectionPathPrefixes;
 
     private Map<String, Object> mappedConfig;
-    private Config config;
+    private final Config config;
 
     public ResponseInjectionConfig() {
         config = Config.getInstance();

File: header/src/main/java/com/networknt/header/HeaderConfig.java
Patch:
@@ -80,9 +80,7 @@ public void setPathPrefixHeader(Map<String, Object> pathPrefixHeader) {
 
     private void setConfigData() {
         Object object = mappedConfig.get(ENABLED);
-        if (object != null && (Boolean) object) {
-            setEnabled((Boolean)object);
-        }
+        if(object != null) enabled = Config.loadBooleanValue(ENABLED, object);
     }
 
     public List<String> getRequestRemoveList() {

File: header/src/main/java/com/networknt/header/HeaderHandler.java
Patch:
@@ -166,5 +166,6 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(HeaderHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("HeaderHandler is reloaded.");
     }
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -103,6 +103,7 @@ public void reload() {
             }
         }
         ModuleRegistry.registerModule(ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("ExternalServiceHandler is reloaded.");
     }
 
     @Override

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -206,5 +206,6 @@ public void reload() {
                 logger.error("An instance of MetricsHandler is not configured in the handler.yml.");
             }
         }
+        if(logger.isInfoEnabled()) logger.info("LightProxyHandler is reloaded.");
     }
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/ProxyServerInfoHandler.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 public class ProxyServerInfoHandler implements LightHttpHandler {
-    private static Http2Client client = Http2Client.getInstance();
+    private static final Http2Client client = Http2Client.getInstance();
     private static final int UNUSUAL_STATUS_CODE = 300;
     private static OptionMap optionMap = OptionMap.create(UndertowOptions.ENABLE_HTTP2, true);
     private static final String PROXY_INFO_KEY = "proxy_info";

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -144,6 +144,7 @@ public void reload() {
         masks.add("password");
         // use a new no cache instance to avoid the default config to be overwritten.
         ModuleRegistry.registerModule(MrasHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(MrasConfig.CONFIG_NAME), masks);
+        if(logger.isInfoEnabled()) logger.info("MrasHandler is reloaded.");
     }
 
     @Override

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -136,6 +136,7 @@ public void reload() {
         List<String> masks = new ArrayList<>();
         masks.add("certPassword");
         ModuleRegistry.registerModule(SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
+        if(logger.isInfoEnabled()) logger.info("SalesforceHandler is reloaded.");
     }
 
     @Override

File: ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistHandler.java
Patch:
@@ -99,6 +99,7 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(WhitelistHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("WhitelistHandler is reloaded.");
     }
 
     IpAcl findIpAcl(String reqPath) {

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -164,5 +164,6 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(APMMetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        if(logger.isInfoEnabled()) logger.info("APMMetricsHandler is reloaded.");
     }
 }

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -122,7 +122,7 @@ public void register() {
     public void reload() {
         config.reload();
         ModuleRegistry.registerModule(MetricsHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), List.of(MASK_KEY_SERVER_PASS));
-        if(logger.isTraceEnabled()) logger.trace("MetricsHandler is reloaded.");
+        if(logger.isInfoEnabled()) logger.info("MetricsHandler is reloaded.");
     }
 
     @Override

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -41,7 +41,7 @@ public class LimitHandler implements MiddlewareHandler {
 
     private volatile HttpHandler next;
     private static RateLimiter rateLimiter;
-    private LimitConfig config;
+    private final LimitConfig config;
     private static final ObjectMapper mapper = Config.getInstance().getMapper();
 
 
@@ -117,5 +117,6 @@ public void reload() {
         }
         // after reload, we need to update the config in the module registry to ensure that server info returns the latest configuration.
         ModuleRegistry.registerModule(LimitHandler.class.getName(), config.getMappedConfig(), null);
+        if(logger.isInfoEnabled()) logger.info("LimitHandler is reloaded.");
     }
 }

File: rate-limit/src/test/java/com/networknt/limit/LimitHandlerTest.java
Patch:
@@ -165,6 +165,7 @@ public void testMoreRequests() throws Exception {
         long last = (System.currentTimeMillis() - start);
         // make sure that there are at least one element in resultList is :503 or :429
         List<String> errorList = resultList.stream().filter(r->r.contains(":" + config.getErrorCode())).collect(Collectors.toList());
+        logger.info("errorList size = " + errorList.size());
         Assert.assertTrue(errorList.size()>0);
     }
 }

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -157,5 +157,6 @@ public static void reload() {
         config.reload();
         directUrls = config.getDirectUrls();
         if(directUrls != null) ModuleRegistry.registerModule(DirectRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(DirectRegistryConfig.CONFIG_NAME), null);
+        if(logger.isTraceEnabled()) logger.trace("DirectRegistry is reloaded");
     }
 }

File: registry/src/main/java/com/networknt/registry/support/DirectRegistryConfig.java
Patch:
@@ -16,7 +16,7 @@ public class DirectRegistryConfig {
     public static final String CONFIG_NAME = "direct-registry";
     private static final String DIRECT_URLS = "directUrls";
     Map<String, List<URL>> directUrls;
-    private Config config;
+    private final Config config;
     private Map<String, Object> mappedConfig;
 
     public DirectRegistryConfig() {

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -74,6 +74,9 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(RequestTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
+        if(logger.isTraceEnabled()) logger.trace("RequestTransformerInterceptor is reloaded.");
+
     }
 
     @Override

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -89,6 +89,8 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(ResponseTransformerInterceptor.class.getName(), config.getMappedConfig(), null);
+        if(logger.isTraceEnabled()) logger.trace("ResponseTransformerInterceptor is reloaded.");
     }
 
     @SuppressWarnings({"unchecked", "rawtypes"})

File: sidecar/src/main/java/com/networknt/router/middleware/SidecarPathPrefixServiceHandler.java
Patch:
@@ -25,7 +25,7 @@ public class SidecarPathPrefixServiceHandler extends PathPrefixServiceHandler {
     public SidecarPathPrefixServiceHandler() {
         logger.info("SidecarPathPrefixServiceHandler is constructed");
         config = PathPrefixServiceConfig.load();
-        sidecarConfig = (SidecarConfig) Config.getInstance().getJsonObjectConfig(SidecarConfig.CONFIG_NAME, SidecarConfig.class);
+        sidecarConfig = SidecarConfig.load();
     }
 
     @Override

File: sidecar/src/main/java/com/networknt/router/middleware/SidecarServiceDictHandler.java
Patch:
@@ -25,7 +25,7 @@ public class SidecarServiceDictHandler extends ServiceDictHandler {
     public SidecarServiceDictHandler() {
         logger.info("SidecarServiceDictHandler is constructed");
         config = ServiceDictConfig.load();
-        sidecarConfig = (SidecarConfig)Config.getInstance().getJsonObjectConfig(SidecarConfig.CONFIG_NAME, SidecarConfig.class);
+        sidecarConfig = SidecarConfig.load();
     }
 
     @Override

File: config-reload/src/main/java/com/networknt/config/reload/handler/ConfigReloadHandler.java
Patch:
@@ -28,8 +28,6 @@
  *
  */
 public class ConfigReloadHandler implements LightHttpHandler {
-
-    public static final String CONFIG_NAME = "configreload";
     public static final String STARTUP_CONFIG_NAME = "startup";
     public static final String CONFIG_LOADER_CLASS = "configLoaderClass";
     private static final ObjectMapper mapper = Config.getInstance().getMapper();
@@ -44,7 +42,7 @@ public ConfigReloadHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
-        ConfigReloadConfig config = (ConfigReloadConfig) Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ConfigReloadConfig.class);
+        ConfigReloadConfig config = (ConfigReloadConfig) Config.getInstance().getJsonObjectConfig(ConfigReloadConfig.CONFIG_NAME, ConfigReloadConfig.class);
       //  Map<String, Object> bodyMap = (Map<String, Object>)exchange.getAttachment(BodyHandler.REQUEST_BODY);
         List<String> modules =  (List)exchange.getAttachment(AttachmentConstants.REQUEST_BODY);
 

File: config-reload/src/main/java/com/networknt/config/reload/handler/ModuleRegistryGetHandler.java
Patch:
@@ -22,7 +22,6 @@
  */
 public class ModuleRegistryGetHandler implements LightHttpHandler {
 
-    public static final String CONFIG_NAME = "configreload";
     private static final ObjectMapper mapper = Config.getInstance().getMapper();
     private  static final String STATUS_CONFIG_RELOAD_DISABLED = "ERR12217";
 
@@ -34,7 +33,7 @@ public ModuleRegistryGetHandler() {
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
 
-        ConfigReloadConfig config = (ConfigReloadConfig) Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ConfigReloadConfig.class);
+        ConfigReloadConfig config = (ConfigReloadConfig) Config.getInstance().getJsonObjectConfig(ConfigReloadConfig.CONFIG_NAME, ConfigReloadConfig.class);
 
         if (config.isEnabled()) {
             List<String> modules = new ArrayList<>();

File: data-source/src/test/java/com/networknt/db/GenericDataSourceTest.java
Patch:
@@ -30,6 +30,7 @@
 public class GenericDataSourceTest {
 
     @Test
+    @Ignore
     public void testGetDataSource() {
         DataSource ds = SingletonServiceFactory.getBean(DataSource.class);
         assertNotNull(ds);
@@ -48,6 +49,7 @@ public void testGetDataSource() {
     }
 
     @Test
+    @Ignore
     public void testGetH2DataSource() {
         DataSource ds = SingletonServiceFactory.getBean(H2DataSource.class).getDataSource();
         assertNotNull(ds);

File: audit/src/test/java/com/networknt/audit/AuditConfigTest.java
Patch:
@@ -20,9 +20,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import java.util.Arrays;
 import java.util.HashMap;
-import java.util.List;
 
 public class AuditConfigTest {
 

File: status/src/test/java/com/networknt/status/StatusDefaultTest.java
Patch:
@@ -22,9 +22,6 @@
 import com.networknt.config.Config;
 import org.junit.Assert;
 import org.junit.Test;
-import org.mockito.Mockito;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
 
 import java.util.HashMap;
 import java.util.Map;

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -191,6 +191,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
     private void auditHeader(HttpServerExchange exchange, Map<String, Object> auditMap) {
         for (String name : config.getHeaderList()) {
             String value = exchange.getRequestHeaders().getFirst(name);
+            if(logger.isTraceEnabled()) logger.trace("header name = " + name + " header value = " + value);
             auditMap.put(name, config.isMask() ? Mask.maskRegex(value, "requestHeader", name) : value);
         }
     }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -73,7 +73,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             var existing = (PooledByteBuffer[]) exchange.getAttachment(AttachmentConstants.BUFFERED_REQUEST_DATA_KEY);
 
             if(LOG.isTraceEnabled())
-                LOG.trace("if the request body exists = {}", existing == null);
+                LOG.trace("request body exists in exchange attachment = {}", existing != null);
 
             if (existing != null) {
 

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -73,13 +73,13 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 for (HeaderValues values : headerMap) {
                     if (values != null) {
                         // if ignore list exists, it will take the precedence.
-                        if(config.getHeaderAttributesToIgnore() != null && config.getHeaderAttributesToIgnore().contains(values.getHeaderName().toString())) {
+                        if(config.getHeaderAttributesToIgnore() != null && config.getHeaderAttributesToIgnore().stream().anyMatch(values.getHeaderName().toString()::equalsIgnoreCase)) {
                             if(logger.isTraceEnabled()) logger.trace("Ignore header " + values.getHeaderName().toString() + " as it is in the ignore list.");
                             continue;
                         }
 
                         if(config.getHeaderAttributesToEncode() != null) {
-                            if(config.getHeaderAttributesToEncode().contains(values.getHeaderName().toString())) {
+                            if(config.getHeaderAttributesToEncode().stream().anyMatch(values.getHeaderName().toString()::equalsIgnoreCase)) {
                                 if(logger.isTraceEnabled()) logger.trace("Encode header " + values.getHeaderName().toString() + " as it is not in the ignore list and it is in the encode list.");
                                 ListIterator<String> itValues = values.listIterator();
                                 while (itValues.hasNext()) {

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -394,6 +394,7 @@ public static Result<String> getIntrospection(String token, IntrospectionRequest
         if(serverUrl == null) {
             throw new ClientException(new Status(OAUTH_SERVER_URL_ERROR, "key"));
         }
+        if(logger.isTraceEnabled()) logger.trace("introspection service url = " + serverUrl);
         try {
             Map<String, String> parameters = new HashMap<>();
             parameters.put("token", token);

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -40,7 +40,6 @@
 import io.undertow.util.Headers;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.slf4j.MDC;
 import org.xnio.Options;
 import org.xnio.Sequence;
 import org.xnio.SslClientAuthMode;

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -113,8 +113,8 @@ public static void init() {
 
             loadConfigs();
 
-            // this will make sure that all log statement will have serviceId
-            MDC.put(SID, getServerConfig().getServiceId());
+            // comment out as we are using values.yml property file in logback.xml
+            // MDC.put(SID, getServerConfig().getServiceId());
 
             // merge status.yml and app-status.yml if app-status.yml is provided
             mergeStatusConfig();

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -78,8 +78,9 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             exchange.getResponseHeaders().add(new HttpString(Constants.RATELIMIT_RESET), rateLimitResponse.getHeaders().get(Constants.RATELIMIT_RESET));
 
             exchange.getResponseHeaders().add(new HttpString("Content-Type"), "application/json");
-            exchange.setStatusCode(config.getErrorCode()==0 ? HttpStatus.TOO_MANY_REQUESTS.value():config.getErrorCode());
-            if(logger.isDebugEnabled()) logger.debug("LimitHandler.handleRequest ends with an error.");
+            int statusCode = config.getErrorCode()==0 ? HttpStatus.TOO_MANY_REQUESTS.value():config.getErrorCode();
+            exchange.setStatusCode(statusCode);
+            if(logger.isDebugEnabled()) logger.warn("LimitHandler.handleRequest ends with an error code {}", statusCode);
             exchange.getResponseSender().send(mapper.writeValueAsString(rateLimitResponse));
         }
     }

File: sidecar/src/main/java/com/networknt/router/middleware/SidecarPathPrefixServiceHandler.java
Patch:
@@ -33,14 +33,14 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         if(logger.isDebugEnabled()) logger.debug("SidecarPathPrefixServiceHandler.handleRequest starts.");
         if (Constants.HEADER.equalsIgnoreCase(sidecarConfig.getEgressIngressIndicator())) {
             if(logger.isTraceEnabled()) logger.trace("Outgoing request calls PathPrefixServiceHandler with header indicator");
-            pathPrefixService(exchange);
+            super.handleRequest(exchange);
         } else if (Constants.PROTOCOL.equalsIgnoreCase(sidecarConfig.getEgressIngressIndicator()) && HttpURL.PROTOCOL_HTTP.equalsIgnoreCase(exchange.getRequestScheme())){
             if(logger.isTraceEnabled()) logger.trace("Outgoing request calls PathPrefixServiceHandler with protocol indicator and http protocol");
-            pathPrefixService(exchange);
+            super.handleRequest(exchange);
         } else {
             // incoming request, let the proxy handler to handle it.
             if(logger.isDebugEnabled()) logger.debug("SidecarPathPrefixServiceHandler.handleRequest ends for incoming request.");
+            Handler.next(exchange, next);
         }
-        Handler.next(exchange, next);
     }
 }

File: sidecar/src/main/java/com/networknt/router/middleware/SidecarPathPrefixServiceHandler.java
Patch:
@@ -40,7 +40,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         } else {
             // incoming request, let the proxy handler to handle it.
             if(logger.isDebugEnabled()) logger.debug("SidecarPathPrefixServiceHandler.handleRequest ends for incoming request.");
-            Handler.next(exchange, next);
         }
+        Handler.next(exchange, next);
     }
 }

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -298,7 +298,7 @@ public JwtClaims verifyJwt(String jwt, boolean ignoreExpiry, boolean isToken, St
                 cache.put(jwt, claims);
             }
             if(cache.estimatedSize() > config.getJwtCacheFullSize()) {
-                logger.error("JWT cache exceeds the size limit " + config.getJwtCacheFullSize());
+                logger.warn("JWT cache exceeds the size limit " + config.getJwtCacheFullSize());
             }
         }
         return claims;

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -328,7 +328,7 @@ private void validateAudience(JwtClaims claims, String requestPath, List<String>
                 }
             } else if (requestPath != null) {
                 String serviceId = getServiceIdByRequestPath(clientConfig, requestPath);
-                if(serviceId == null && audienceMap != null && audienceMap.size() > 0) {
+                if(serviceId != null && audienceMap != null && audienceMap.size() > 0) {
                     configuredAudience = audienceMap.get(serviceId);
                     boolean r = isJwtAudienceValid(claims, configuredAudience);
                     if(!r) {

File: client/src/main/java/com/networknt/client/oauth/TokenIntrospectionRequest.java
Patch:
@@ -67,9 +67,9 @@ private void setIntrospectionOptions(Map<String, Object> introspectionConfig) {
             Object object = introspectionConfig.get(ClientConfig.ENABLE_HTTP2);
             setEnableHttp2(object != null && (Boolean) object);
         }
-        if(introspectionConfig.get(ClientConfig.URI).toString() != null) {
+        if(introspectionConfig.get(ClientConfig.URI) != null) {
             if(logger.isTraceEnabled()) logger.trace("overwrite old uri {} with new uri {}", getUri(), introspectionConfig.get(ClientConfig.URI));
-            setUri(introspectionConfig.get(ClientConfig.URI).toString());
+            setUri((String)introspectionConfig.get(ClientConfig.URI));
         }
 
         // clientId is optional

File: client/src/main/java/com/networknt/client/ClientConfig.java
Patch:
@@ -19,6 +19,7 @@ public final class ClientConfig {
     public static final String TLS = "tls";
     public static final String CLIENT_ID = "client_id";
     public static final String SCOPE = "scope";
+    public static final String AUDIENCE = "audience";
     public static final String CSRF = "csrf";
     public static final String REDIRECT_URI = "redirect_uri";
     public static final String REFRESH_TOKEN = "refresh_token";

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -6,6 +6,6 @@
 
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
-	public static final Pattern CRYPT_PATTERN = Pattern.compile("^CRYPT:");
+	public static final Pattern CRYPT_PATTERN = Pattern.compile("CRYPT:[a-zA-Z0-9:]+");
 	public static final String CRYPT_FIRST = "C"; 
 }

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -6,6 +6,6 @@
 
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
-	public static final Pattern CRYPT_PATTERN = Pattern.compile("CRYPT:[a-f0-9]+:[a-f0-9]+");
+	public static final Pattern CRYPT_PATTERN = Pattern.compile("^CRYPT:");
 	public static final String CRYPT_FIRST = "C"; 
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -111,7 +111,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         if (config.getPathHostMappings() != null) {
             for(String[] parts: config.getPathHostMappings()) {
                 if(requestPath.startsWith(parts[0])) {
-                    String endpoint = parts[0] + "@" + exchange.getRequestMethod().toString();
+                    String endpoint = parts[0] + "@" + exchange.getRequestMethod().toString().toLowerCase();
                     if(logger.isTraceEnabled()) logger.trace("endpoint = " + endpoint);
                     // handle the url rewrite here. It has to be the right path that applied for external service to do the url rewrite.
                     if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -155,7 +155,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
 
         for(String key: config.getPathPrefixAuth().keySet()) {
             if(requestPath.startsWith(key)) {
-                String endpoint = key + "@" + exchange.getRequestMethod().toString();
+                String endpoint = key + "@" + exchange.getRequestMethod().toString().toLowerCase();
                 if(logger.isTraceEnabled()) logger.trace("endpoint = " + endpoint);
                 // handle the url rewrite here.
                 if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -147,7 +147,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         // make sure that the request path is in the key set. remember that key set only contains prefix not the full request path.
         for(PathPrefixAuth pathPrefixAuth: config.getPathPrefixAuths()) {
             if(requestPath.startsWith(pathPrefixAuth.getPathPrefix())) {
-                String endpoint = pathPrefixAuth.getPathPrefix() + "@" + exchange.getRequestMethod().toString();
+                String endpoint = pathPrefixAuth.getPathPrefix() + "@" + exchange.getRequestMethod().toString().toLowerCase();
                 if(logger.isTraceEnabled()) logger.trace("endpoint = " + endpoint);
                 // handle the url rewrite here.
                 if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -112,6 +112,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             for(String[] parts: config.getPathHostMappings()) {
                 if(requestPath.startsWith(parts[0])) {
                     String endpoint = parts[0] + "@" + exchange.getRequestMethod().toString();
+                    if(logger.isTraceEnabled()) logger.trace("endpoint = " + endpoint);
                     // handle the url rewrite here. It has to be the right path that applied for external service to do the url rewrite.
                     if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {
                         boolean matched = false;

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -156,6 +156,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         for(String key: config.getPathPrefixAuth().keySet()) {
             if(requestPath.startsWith(key)) {
                 String endpoint = key + "@" + exchange.getRequestMethod().toString();
+                if(logger.isTraceEnabled()) logger.trace("endpoint = " + endpoint);
                 // handle the url rewrite here.
                 if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {
                     boolean matched = false;

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -148,6 +148,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         for(PathPrefixAuth pathPrefixAuth: config.getPathPrefixAuths()) {
             if(requestPath.startsWith(pathPrefixAuth.getPathPrefix())) {
                 String endpoint = pathPrefixAuth.getPathPrefix() + "@" + exchange.getRequestMethod().toString();
+                if(logger.isTraceEnabled()) logger.trace("endpoint = " + endpoint);
                 // handle the url rewrite here.
                 if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {
                     boolean matched = false;

File: proxy-handler/src/main/java/com/networknt/handler/ProxyHandler.java
Patch:
@@ -359,6 +359,7 @@ public void couldNotResolveBackend(HttpServerExchange ex) {
                     String metricsName = exchange.getAttachment(AttachmentConstants.DOWNSTREAM_METRICS_NAME);
                     if (metricsName != null) {
                         long startTime = exchange.getAttachment(AttachmentConstants.DOWNSTREAM_METRICS_START);
+                        // do not pass in the endpoint but use the endpoint from AuditInfo
                         metricsHandler.injectMetrics(exchange, startTime, metricsName, null);
                     }
                 }
@@ -388,6 +389,7 @@ void cancel(final HttpServerExchange exchange) {
                     String metricsName = exchange.getAttachment(AttachmentConstants.DOWNSTREAM_METRICS_NAME);
                     if (metricsName != null) {
                         long startTime = exchange.getAttachment(AttachmentConstants.DOWNSTREAM_METRICS_START);
+                        // do not pass in the endpoint but use the endpoint from AuditInfo
                         metricsHandler.injectMetrics(exchange, startTime, metricsName, null);
                     }
                 }
@@ -960,6 +962,7 @@ public void completed(final ClientExchange result) {
                 String metricsName = exchange.getAttachment(AttachmentConstants.DOWNSTREAM_METRICS_NAME);
                 if (metricsName != null) {
                     long startTime = exchange.getAttachment(AttachmentConstants.DOWNSTREAM_METRICS_START);
+                    // do not pass in the endpoint but use the endpoint from AuditInfo
                     metricsHandler.injectMetrics(exchange, startTime, metricsName, null);
                 }
             }

File: http-string/src/main/java/com/networknt/httpstring/AttachmentConstants.java
Patch:
@@ -28,4 +28,7 @@ public class AttachmentConstants {
     public static final AttachmentKey<PooledByteBuffer[]> BUFFERED_RESPONSE_DATA_KEY = AttachmentKey.create(PooledByteBuffer[].class);
     public static final AttachmentKey<PooledByteBuffer[]> BUFFERED_REQUEST_DATA_KEY = AttachmentKey.create(PooledByteBuffer[].class);
 
+    public static final AttachmentKey<String> DOWNSTREAM_METRICS_NAME = AttachmentKey.create(String.class);
+    public static final AttachmentKey<Long> DOWNSTREAM_METRICS_START = AttachmentKey.create(Long.class);
+    public static final AttachmentKey<Object> METRICS_HANDLER = AttachmentKey.create(Object.class);
 }

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -378,7 +378,7 @@ private static String getConfigServerQueryParameters() {
         qs.append("?").append(PRODUCT_ID).append("=").append(startupConfig.get(PRODUCT_ID));
         if(startupConfig.get(PRODUCT_VERSION) != null) qs.append("&").append(PRODUCT_VERSION).append("=").append(startupConfig.get(PRODUCT_VERSION));
         if(startupConfig.get(API_ID) != null) qs.append("&").append(API_ID).append("=").append(startupConfig.get(API_ID));
-        if(startupConfig.get(API_VERSION) != null) qs.append("&").append(API_VERSION).append("=").append(startupConfig.get(API_ID));
+        if(startupConfig.get(API_VERSION) != null) qs.append("&").append(API_VERSION).append("=").append(startupConfig.get(API_VERSION));
         if(lightEnv != null) qs.append("&").append(ENV_TAG).append("=").append(lightEnv);
         if(logger.isDebugEnabled()) logger.debug("configParameters: {}", qs);
         return qs.toString();

File: ingress-proxy/src/main/java/com/networknt/proxy/ProxyHealthGetHandler.java
Patch:
@@ -44,7 +44,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             result = backendHealth();
         }
         // for security reason, we don't output the details about the error. Users can check the log for the failure.
-        if(HEALTH_RESULT_ERROR == result) {
+        if(HEALTH_RESULT_ERROR.equals(result)) {
             exchange.setStatusCode(400);
             if(logger.isDebugEnabled()) logger.debug("ProxyHealthGetHandler.handleRequest ends with an error.");
             exchange.getResponseSender().send(HEALTH_RESULT_ERROR);

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -61,6 +61,8 @@ public class BodyHandler implements MiddlewareHandler {
 
     // request body will be parsed during validation and it is attached to the exchange, in JSON,
     // it could be a map or list. So treat it as Object in the attachment.
+    public static final AttachmentKey<Object> REQUEST_BODY = AttachmentConstants.REQUEST_BODY;
+    public static final AttachmentKey<String> REQUEST_BODY_STRING = AttachmentConstants.REQUEST_BODY_STRING;
 
     public static final String CONFIG_NAME = "body";
 

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -148,6 +148,7 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
         long time = System.nanoTime() - startTime;
         registry.getOrAdd(metricName, MetricRegistry.MetricBuilder.TIMERS).update(time, TimeUnit.NANOSECONDS);
         if(logger.isTraceEnabled()) logger.trace("metricName = " + metricName  + " commonTags = " + JsonMapper.toJson(commonTags) + " tags = " + JsonMapper.toJson(tags));
-        incCounterForStatusCode(httpServerExchange.getStatusCode(), commonTags, tags);
+        // the metrics handler will collect the status code metrics and increase the counter. Here we don't want to increase it again.
+        // incCounterForStatusCode(httpServerExchange.getStatusCode(), commonTags, tags);
     }
 }

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -65,6 +65,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if(tid != null) {
             exchange.getResponseHeaders().put(HttpStringConstants.TRACEABILITY_ID, tid);
             MDC.put(TID, tid);
+        } else {
+            MDC.remove(TID);
         }
         if (logger.isDebugEnabled()) logger.trace("TraceabilityHandler.handleRequest ends.");
         Handler.next(exchange, next);

File: client/src/main/java/com/networknt/client/simplepool/SimpleConnectionHolder.java
Patch:
@@ -355,8 +355,8 @@ public class ConnectionToken {
             this.uri = SimpleConnectionHolder.this.uri;
         }
 
-        SimpleConnectionHolder holder() { return holder; }
-        SimpleConnection connection() { return connection; }
+        public SimpleConnectionHolder holder() { return holder; }
+        public SimpleConnection connection() { return connection; }
         public Object getRawConnection() { return connection.getRawConnection(); }
         public URI uri() { return uri; }
     }

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -785,6 +785,7 @@ public void default_group_key_is_used_in_Http2Client_SSL() throws Exception{
     }
 
     @Test
+    @Ignore
     public void simple_pool_return_null_token_if_api_is_not_available() {
         final Http2Client client = Http2Client.getInstance();
         SimpleConnectionHolder.ConnectionToken connectionToken = null;

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -110,7 +110,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         if (config.getPathHostMappings() != null) {
             for(String[] parts: config.getPathHostMappings()) {
                 if(requestPath.startsWith(parts[0])) {
-                    String endpoint = parts[1] + "@" + exchange.getRequestMethod().toString();
+                    String endpoint = parts[0] + "@" + exchange.getRequestMethod().toString();
                     // handle the url rewrite here. It has to be the right path that applied for external service to do the url rewrite.
                     if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {
                         boolean matched = false;

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -130,7 +130,7 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
             }
         } else {
             // for MRAS and Salesforce handlers that do not have auditInfo in the exchange as they may be called anonymously.
-            tags.put(Constants.ENDPOINT_STRING, httpServerExchange.getRequestPath());
+            tags.put(Constants.ENDPOINT_STRING, endpoint == null ? "unknown" : endpoint);
             tags.put("clientId", "unknown");
             if (config.isSendScopeClientId()) {
                 tags.put("scopeClientId", "unknown");

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -89,7 +89,7 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
         if(logger.isDebugEnabled()) logger.debug("RouterHandler.handleRequest starts.");
         long startTime = System.nanoTime();
         proxyHandler.handleRequest(httpServerExchange);
-        if(config.isMetricsInjection() && metricsHandler != null) metricsHandler.injectMetrics(httpServerExchange, startTime, config.getMetricsName());
+        if(config.isMetricsInjection() && metricsHandler != null) metricsHandler.injectMetrics(httpServerExchange, startTime, config.getMetricsName(), null);
         if(logger.isDebugEnabled()) logger.debug("RouterHandler.handleRequest ends.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -110,6 +110,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         if (config.getPathHostMappings() != null) {
             for(String[] parts: config.getPathHostMappings()) {
                 if(requestPath.startsWith(parts[0])) {
+                    String endpoint = parts[1] + "@" + exchange.getRequestMethod().toString();
                     // handle the url rewrite here. It has to be the right path that applied for external service to do the url rewrite.
                     if(config.getUrlRewriteRules() != null && config.getUrlRewriteRules().size() > 0) {
                         boolean matched = false;
@@ -164,7 +165,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         logger.error("wrong http method " + method + " for request path " + requestPath);
                         setExchangeStatus(exchange, METHOD_NOT_ALLOWED, method, requestPath);
                         if(logger.isDebugEnabled()) logger.debug("ExternalServiceHandler.handleRequest ends with an error.");
-                        if(config.isMetricsInjection() && metricsHandler != null) metricsHandler.injectMetrics(exchange, startTime, config.getMetricsName());
+                        if(config.isMetricsInjection() && metricsHandler != null) metricsHandler.injectMetrics(exchange, startTime, config.getMetricsName(), endpoint);
                         return;
                     }
                     if(client == null) {
@@ -207,7 +208,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     if(logger.isDebugEnabled()) logger.debug("ExternalServiceHandler.handleRequest ends.");
                     if(config.isMetricsInjection() && metricsHandler != null) {
                         if(logger.isTraceEnabled()) logger.trace("injecting metrics for " + config.getMetricsName());
-                        metricsHandler.injectMetrics(exchange, startTime, config.getMetricsName());
+                        metricsHandler.injectMetrics(exchange, startTime, config.getMetricsName(), endpoint);
                     }
                     return;
                 }

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -120,7 +120,7 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
             httpServerExchange.getRequestHeaders().put(HttpString.tryFromString(CLAIMS_KEY), new ObjectMapper().writeValueAsString(jwtClaims.getClaimsMap()));
         }
         proxyHandler.handleRequest(httpServerExchange);
-        if(config.isMetricsInjection() && metricsHandler != null) metricsHandler.injectMetrics(httpServerExchange, startTime, config.getMetricsName());
+        if(config.isMetricsInjection() && metricsHandler != null) metricsHandler.injectMetrics(httpServerExchange, startTime, config.getMetricsName(), null);
         if(logger.isDebugEnabled()) logger.debug("LightProxyHandler.handleRequest ends.");
     }
 

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -79,7 +79,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
                         if(config.getHeaderAttributesToEncode() != null) {
                             if(config.getHeaderAttributesToEncode().contains(values.getHeaderName().toString())) {
-                                if(logger.isTraceEnabled()) logger.trace("Encode header " + values.getHeaderName().toString() + " as is is not in the ignore list and it is in the encode list.");
+                                if(logger.isTraceEnabled()) logger.trace("Encode header " + values.getHeaderName().toString() + " as it is not in the ignore list and it is in the encode list.");
                                 ListIterator<String> itValues = values.listIterator();
                                 while (itValues.hasNext()) {
                                     itValues.set(headerEncoder.applyEncoding(itValues.next()));
@@ -136,7 +136,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(SanitizerHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
+        ModuleRegistry.registerModule(SanitizerHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SanitizerConfig.CONFIG_NAME), null);
     }
 
     @Override

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -74,5 +74,8 @@ public void testMatchPath() {
         pattern = "/foo/bar";
         Assert.assertTrue(StringUtils.matchPathToPattern("/foo/bar", pattern));
         Assert.assertFalse(StringUtils.matchPathToPattern("/foo/bar?abc=123", pattern));
+
+        pattern = "/gateway/dev/ph-l4j-files/file?version=1";
+        Assert.assertFalse(StringUtils.matchPathToPattern("/dev-ph-l4j-files/file?version=1", pattern));
     }
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -376,6 +376,7 @@ private Result<TokenResponse> getAccessToken() throws Exception {
                     .POST(HttpRequest.BodyPublishers.ofString(form))
                     .build();
 
+            if(logger.isTraceEnabled()) logger.trace("request url = " + serverUrl + "request body = " + form + " request headers = " + request.headers().toString());
             HttpResponse<?> response = client.send(request, HttpResponse.BodyHandlers.ofString());
             if(logger.isTraceEnabled()) logger.trace(response.statusCode() + " " + response.body().toString());
             if(response.statusCode() == 200) {

File: sidecar/src/main/java/com/networknt/router/SidecarConfig.java
Patch:
@@ -20,11 +20,11 @@
  * Config class for gateway.
  *
  */
-public class GatewayConfig {
+public class SidecarConfig {
     String egressIngressIndicator;
-    public static final String CONFIG_NAME = "gateway";
+    public static final String CONFIG_NAME = "sidecar";
 
-    public GatewayConfig() {
+    public SidecarConfig() {
     }
 
     public String getEgressIngressIndicator() {

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -84,6 +84,7 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
         // Make sure content is needed by request interceptors before grabbing the data. The process has a lot of overhead.
         String method = httpServerExchange.getRequestMethod().toString();
         this.next = Handler.getNext(httpServerExchange);
+        if(logger.isTraceEnabled()) logger.trace("injectionContentRequired = {} appliedBodyInjectionPathPrefix = {} method = {} requestComplete = {} requiresContinueResponse = {}", this.injectorContentRequired(), this.isAppliedBodyInjectionPathPrefix(httpServerExchange.getRequestPath()), method, httpServerExchange.isRequestComplete(), HttpContinue.requiresContinueResponse(httpServerExchange.getRequestHeaders()));
         if (this.injectorContentRequired()
                 && this.isAppliedBodyInjectionPathPrefix(httpServerExchange.getRequestPath())
                 && ((method.equalsIgnoreCase("post") ||

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import com.networknt.config.JsonMapper;
 import com.networknt.server.ServerConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -86,6 +87,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         long startTime = Clock.defaultClock().getTick();
         exchange.addExchangeCompleteListener((exchange1, nextListener) -> {
             Map<String, Object> auditInfo = exchange1.getAttachment(AttachmentConstants.AUDIT_INFO);
+            if(logger.isTraceEnabled()) logger.trace("auditInfo = " + auditInfo);
             if (auditInfo != null) {
                 Map<String, String> tags = new HashMap<>();
                 tags.put("endpoint", (String) auditInfo.get(Constants.ENDPOINT_STRING));
@@ -123,6 +125,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                 metricName = metricName.tagged(tags);
                 long time = Clock.defaultClock().getTick() - startTime;
                 registry.getOrAdd(metricName, MetricRegistry.MetricBuilder.TIMERS).update(time, TimeUnit.NANOSECONDS);
+                if(logger.isTraceEnabled()) logger.trace("metricName = " + metricName  + " commonTags = " + JsonMapper.toJson(commonTags) + " tags = " + JsonMapper.toJson(tags));
                 incCounterForStatusCode(exchange1.getStatusCode(), commonTags, tags);
             }
             nextListener.proceed();

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.metrics;
 
+import com.networknt.config.JsonMapper;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.utility.Constants;
@@ -94,6 +95,7 @@ public void incCounterForStatusCode(int statusCode, Map<String, String> commonTa
      */
     public void injectMetrics(HttpServerExchange httpServerExchange, long startTime, String metricsName) {
         Map<String, Object> auditInfo = httpServerExchange.getAttachment(AttachmentConstants.AUDIT_INFO);
+        if(logger.isTraceEnabled()) logger.trace("auditInfo = " + auditInfo);
         if (auditInfo != null) {
             Map<String, String> tags = new HashMap<>();
             tags.put(Constants.ENDPOINT_STRING, (String) auditInfo.get(Constants.ENDPOINT_STRING));
@@ -130,6 +132,7 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
             metricName = metricName.tagged(tags);
             long time = System.nanoTime() - startTime;
             registry.getOrAdd(metricName, MetricRegistry.MetricBuilder.TIMERS).update(time, TimeUnit.NANOSECONDS);
+            if(logger.isTraceEnabled()) logger.trace("metricName = " + metricName  + " commonTags = " + JsonMapper.toJson(commonTags) + " tags = " + JsonMapper.toJson(tags));
             incCounterForStatusCode(httpServerExchange.getStatusCode(), commonTags, tags);
         }
     }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -98,7 +98,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                     attached = this.attachFormDataBody(exchange, completeBody.toString());
                 }
             } else {
-                if(logger.isTraceEnabled()) logger.trace("Request body interceptor is skipped due to the request path is not in request-injection.appliedBodyInjectionPathPrefixes configuration");
+                if(logger.isTraceEnabled()) logger.trace("Request body is null or Request body interceptor is skipped due to the request path " + exchange.getRequestPath() + " is not in request-injection.appliedBodyInjectionPathPrefixes configuration");
             }
             if(!attached) {
                 if(logger.isErrorEnabled())

File: egress-router/src/test/java/com/networknt/router/RouterConfigTest.java
Patch:
@@ -53,13 +53,13 @@ public void testConfigList() {
     @Test
     public void testQueryParamRewriteRules() {
         Assert.assertNotNull(routerConfig.getQueryParamRewriteRules());
-        Assert.assertEquals(routerConfig.getQueryParamRewriteRules().size(), 3);
+        Assert.assertEquals(routerConfig.getQueryParamRewriteRules().size(), 4);
     }
 
     @Test
     public void testHeaderRewriteRules() {
         Assert.assertNotNull(routerConfig.getHeaderRewriteRules());
-        Assert.assertEquals(routerConfig.getHeaderRewriteRules().size(), 3);
+        Assert.assertEquals(routerConfig.getHeaderRewriteRules().size(), 4);
     }
 
 

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -96,7 +96,7 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
         Map<String, Object> auditInfo = httpServerExchange.getAttachment(AttachmentConstants.AUDIT_INFO);
         if (auditInfo != null) {
             Map<String, String> tags = new HashMap<>();
-            tags.put("endpoint", (String) auditInfo.get(Constants.ENDPOINT_STRING));
+            tags.put(Constants.ENDPOINT_STRING, (String) auditInfo.get(Constants.ENDPOINT_STRING));
             String clientId = auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown";
             if(logger.isTraceEnabled()) logger.trace("clientId = " + clientId);
             tags.put("clientId", clientId);

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -41,6 +41,7 @@ public class Constants {
     public static final String PRIMARY_SCOPES = "primary_scopes";
     public static final String SECONDARY_SCOPES = "secondary_scopes";
     public static final String ENDPOINT_STRING = "endpoint";
+    public static final String UNKOWN_STRING = "unknown";
     public static final String CSRF_STRING = "csrf";
     public static final String AUTHORIZATION_STRING = "authorization";
 

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -187,10 +187,8 @@ private boolean attachJsonBody(final HttpServerExchange exchange, String string)
                 return false;
             }
             exchange.putAttachment(REQUEST_BODY, body);
-        } else {
-            if(logger.isTraceEnabled()) logger.trace("Input string is null and nothing is attached.");
-            return false;
         }
+        // if this is the get or delete request, the body wil be null, but we still need to go to the next handler.
         return true;
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -407,8 +407,8 @@ private Result<TokenResponse> getMicrosoftToken() throws Exception {
                 HttpClient.Builder clientBuilder = HttpClient.newBuilder()
                         .followRedirects(HttpClient.Redirect.NORMAL)
                         .connectTimeout(Duration.ofMillis(ClientConfig.get().getTimeout()))
-                        // we cannot use the Http2Client SSL Context as we need two-way TLS here.
-                        .sslContext(createSSLContext());
+                        // Token site only need one-way TLS with a public certificate.
+                        .sslContext(Http2Client.createSSLContext());
                 if(config.getProxyHost() != null) clientBuilder.proxy(ProxySelector.of(new InetSocketAddress(config.getProxyHost(), config.getProxyPort() == 0 ? 443 : config.getProxyPort())));
                 if(config.isEnableHttp2()) clientBuilder.version(HttpClient.Version.HTTP_2);
                 // this a workaround to bypass the hostname verification in jdk11 http client.

File: config/src/test/java/com/networknt/config/PluggableConfigLoaderTest.java
Patch:
@@ -28,7 +28,7 @@ public void setUp() throws Exception {
     @Override
     public void tearDown() throws Exception {
         super.tearDown();
-        // Remove the test.json from home directory
+        // Remove the config.yml from home directory
         File test = new File(homeDir + "/config.yml");
         test.delete();
     }

File: client/src/main/java/com/networknt/client/ClientConfig.java
Patch:
@@ -291,7 +291,7 @@ public int getMaxRequestPerConnection() {
         return maxReqPerConn;
     }
 
-    protected void setRequestEnableHttp2(boolean isRequestEnableHttp2) {
+    public void setRequestEnableHttp2(boolean isRequestEnableHttp2) {
         this.requestEnableHttp2 = isRequestEnableHttp2;
     }
 

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -85,8 +85,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReference;
-
-import static com.networknt.client.ssl.TLSConfig.VERIFY_HOSTNAME;
 import static io.undertow.client.http.HttpClientProvider.DISABLE_HTTPS_ENDPOINT_IDENTIFICATION_PROPERTY;
 
 /**

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -273,7 +273,7 @@ public ConsulResponse<List<ConsulService>> lookupHealthService(String serviceNam
 			return null;
 
 		} finally {
-			client.restore(uri, connectionToken);
+			client.restore(connectionToken);
 		}
 
 		return newResponse;

File: client/src/main/java/com/networknt/client/simplepool/SimpleConnectionPool.java
Patch:
@@ -47,7 +47,7 @@ public SimpleConnectionHolder.ConnectionToken borrow(long createConnectionTimeou
                     pools.put(uri, new SimpleURIConnectionPool(uri, expireTime, poolSize, connectionMaker));
             }
         }
-        return pools.get(uri).borrow(createConnectionTimeout, isHttp2);
+        return pools.get(uri).borrow(createConnectionTimeout);
     }
 
     public void restore(SimpleConnectionHolder.ConnectionToken connectionToken) {

File: client/src/main/java/com/networknt/client/simplepool/undertow/SimpleClientConnection.java
Patch:
@@ -24,7 +24,7 @@
 import org.xnio.IoUtils;
 
 public class SimpleClientConnection implements SimpleConnection {
-    private ClientConnection connection;
+    private final ClientConnection connection;
 
     public SimpleClientConnection(ClientConnection connection) {
         this.connection = connection;

File: client/src/test/java/com/networknt/client/simplepool/mockexample/MockKeepAliveConnection.java
Patch:
@@ -17,7 +17,7 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
 import com.networknt.client.simplepool.SimpleConnection;
 import java.util.concurrent.ThreadLocalRandom;

File: client/src/test/java/com/networknt/client/simplepool/mockexample/MockRandomlyClosingConnection.java
Patch:
@@ -17,7 +17,7 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
 import com.networknt.client.simplepool.SimpleConnection;
 import java.util.concurrent.ThreadLocalRandom;

File: client/src/test/java/com/networknt/client/simplepool/mockexample/MockTimeoutLeakedConnection.java
Patch:
@@ -17,7 +17,7 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
 import com.networknt.client.simplepool.SimpleConnection;
 import java.util.concurrent.ThreadLocalRandom;

File: client/src/test/java/com/networknt/client/simplepool/mockexample/TestKeepAliveConnection.java
Patch:
@@ -17,9 +17,9 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
-import com.networknt.client.simplepool.mock.TestRunner;
+import com.networknt.client.simplepool.TestRunner;
 
 public class TestKeepAliveConnection
 {

File: client/src/test/java/com/networknt/client/simplepool/mockexample/TestPoolSizeOverflow.java
Patch:
@@ -17,9 +17,9 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
-import com.networknt.client.simplepool.mock.TestRunner;
+import com.networknt.client.simplepool.TestRunner;
 
 public class TestPoolSizeOverflow
 {

File: client/src/test/java/com/networknt/client/simplepool/mockexample/TestRandomlyClosingConnection.java
Patch:
@@ -17,9 +17,9 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
-import com.networknt.client.simplepool.mock.TestRunner;
+import com.networknt.client.simplepool.TestRunner;
 
 public class TestRandomlyClosingConnection
 {

File: client/src/test/java/com/networknt/client/simplepool/mockexample/TestTimeoutLeakedConnection.java
Patch:
@@ -17,9 +17,9 @@
  *   AkashWorkGit
  *   jaydeepparekh1311
  */
-package com.networknt.client.simplepool.mock.mockexample;
+package com.networknt.client.simplepool.mockexample;
 
-import com.networknt.client.simplepool.mock.TestRunner;
+import com.networknt.client.simplepool.TestRunner;
 
 public class TestTimeoutLeakedConnection
 {

File: config/src/test/java/com/networknt/config/ConfigDecryptTest.java
Patch:
@@ -90,7 +90,7 @@ public void testDecryptObject() {
     public void testDecryptorClass() {
         final Resolver resolver = new Resolver();
         resolver.addImplicitResolver(YmlConstants.CRYPT_TAG, YmlConstants.CRYPT_PATTERN, YmlConstants.CRYPT_FIRST);
-        Yaml yaml = new Yaml(new DecryptConstructor("com.networknt.config.TestDecryptor"), new Representer(new DumperOptions()), new DumperOptions(), resolver);
+        Yaml yaml = new Yaml(DecryptConstructor.getInstance("com.networknt.config.TestDecryptor"), new Representer(new DumperOptions()), new DumperOptions(), resolver);
     	
         Map<String, Object> secret=yaml.load(Config.getInstance().getInputStreamFromFile("secret-map-test2.yml"));
         
@@ -102,7 +102,7 @@ public void testAutoDecryptorClass() throws IOException {
         if (System.getenv("config_password") == null || !System.getenv("config_password").equals("light")) return;
         final Resolver resolver = new Resolver();
         resolver.addImplicitResolver(YmlConstants.CRYPT_TAG, YmlConstants.CRYPT_PATTERN, YmlConstants.CRYPT_FIRST);
-        Yaml yaml = new Yaml(new DecryptConstructor("com.networknt.config.TestAutoDecryptor"), new Representer(new DumperOptions()), new DumperOptions(), resolver);
+        Yaml yaml = new Yaml(DecryptConstructor.getInstance("com.networknt.config.TestAutoDecryptor"), new Representer(new DumperOptions()), new DumperOptions(), resolver);
 
         Map<String, Object> secret=yaml.load(Config.getInstance().getInputStreamFromFile("secret-map-test2.yml"));
 

File: config/src/test/java/com/networknt/config/DecryptConstructorTest.java
Patch:
@@ -7,7 +7,7 @@
 public class DecryptConstructorTest {
     @Test
     public void testConstructor() {
-        DecryptConstructor constructor = new DecryptConstructor();
+        DecryptConstructor constructor = DecryptConstructor.getInstance();
         Assert.assertNotNull(constructor);
     }
 }

File: config/src/main/java/com/networknt/config/yml/DecryptConstructor.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.config.yml;
 
+import com.networknt.decrypt.AutoAESSaltDecryptor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.yaml.snakeyaml.LoaderOptions;
@@ -8,7 +9,6 @@
 import org.yaml.snakeyaml.nodes.Node;
 import org.yaml.snakeyaml.nodes.ScalarNode;
 
-import com.networknt.decrypt.AESDecryptor;
 import com.networknt.decrypt.Decryptor;
 
 /**
@@ -23,7 +23,7 @@ public class DecryptConstructor extends Constructor {
 	private final Decryptor decryptor;
 	
 	public static final String CONFIG_ITEM_DECRYPTOR_CLASS = "decryptorClass";
-	public static final String DEFAULT_DECRYPTOR_CLASS = AESDecryptor.class.getCanonicalName();
+	public static final String DEFAULT_DECRYPTOR_CLASS = AutoAESSaltDecryptor.class.getCanonicalName();
 
 	public DecryptConstructor() {
 		this(DEFAULT_DECRYPTOR_CLASS);

File: config/src/main/java/com/networknt/config/yml/YmlConstants.java
Patch:
@@ -6,6 +6,6 @@
 
 public class YmlConstants {
 	public static final Tag CRYPT_TAG = new Tag(Tag.PREFIX + "crypt");
-	public static final Pattern CRYPT_PATTERN = Pattern.compile("^CRYPT:([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$");
+	public static final Pattern CRYPT_PATTERN = Pattern.compile("CRYPT:[a-f0-9]+:[a-f0-9]+");
 	public static final String CRYPT_FIRST = "C"; 
 }

File: config/src/test/java/com/networknt/config/ConfigInjectionTest.java
Patch:
@@ -80,7 +80,7 @@ public void testConvertEnvVarsUsingEmptyString() {
     public void testDecryptEnvValueWithEncryptedValue() {
 
         Decryptor aesDecryptor = ConfigInjection.getDecryptor();
-        Object envValue = ConfigInjection.decryptEnvValue(aesDecryptor, "CRYPT:EqDVC30YKUDTMLXSIS5OpOqeP+K4w0dPaFfaJPfzIT8=");
+        Object envValue = ConfigInjection.decryptEnvValue(aesDecryptor, "CRYPT:0754fbc37347c136be7725cbf62b6942:71756e13c2400985d0402ed6f49613d0");
         Assert.assertEquals("password", envValue);
     }
 

File: config/src/test/java/com/networknt/config/TestAutoDecryptor.java
Patch:
@@ -1,8 +1,8 @@
 package com.networknt.config;
 
-import com.networknt.decrypt.AutoAESDecryptor;
+import com.networknt.decrypt.AutoAESSaltDecryptor;
 
-public class TestAutoDecryptor extends AutoAESDecryptor {
+public class TestAutoDecryptor extends AutoAESSaltDecryptor {
     @Override
     public String decrypt(String input) {
         return super.decrypt(input) + "-test";

File: config/src/test/java/com/networknt/config/TestDecryptor.java
Patch:
@@ -1,8 +1,8 @@
 package com.networknt.config;
 
-import com.networknt.decrypt.AESDecryptor;
+import com.networknt.decrypt.AESSaltDecryptor;
 
-public class TestDecryptor extends AESDecryptor {
+public class TestDecryptor extends AESSaltDecryptor {
 
     @Override
 	public String decrypt(String input) {

File: decryptor/src/test/java/com/networknt/decrypt/AESDecryptorTest.java
Patch:
@@ -7,13 +7,13 @@ public class AESDecryptorTest {
 
     @Test
     public void testConstructor() {
-        AESDecryptor decryptor = new AESDecryptor();
+        AESSaltDecryptor decryptor = new AESSaltDecryptor();
         Assert.assertNotNull(decryptor);
     }
 
     @Test
     public void testForName() {
-        String decryptorClass = "com.networknt.decrypt.AESDecryptor";
+        String decryptorClass = "com.networknt.decrypt.AESSaltDecryptor";
         try {
             Class<?> typeClass = Class.forName(decryptorClass);
 

File: basic-auth/src/test/java/com/networknt/basicauth/BasicAuthHandlerTest.java
Patch:
@@ -130,8 +130,8 @@ public void testWithRightCredentialsWrongPath() throws Exception {
         }
         int statusCode = reference.get().getResponseCode();
         String responseBody = reference.get().getAttachment(Http2Client.RESPONSE_BODY);
-        Assert.assertEquals(403, statusCode);
-        if(statusCode == 403) {
+        Assert.assertEquals(401, statusCode);
+        if(statusCode == 401) {
             Assert.assertNotNull(responseBody);
         }
     }

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -97,7 +97,9 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
         if (auditInfo != null) {
             Map<String, String> tags = new HashMap<>();
             tags.put("endpoint", (String) auditInfo.get(Constants.ENDPOINT_STRING));
-            tags.put("clientId", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown");
+            String clientId = auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown";
+            if(logger.isTraceEnabled()) logger.trace("clientId = " + clientId);
+            tags.put("clientId", clientId);
             // scope client id will only be available if two token is used. For example, authorization code flow.
             if (config.isSendScopeClientId()) {
                 tags.put("scopeClientId", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String) auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : "unknown");

File: metrics/src/main/java/io/dropwizard/metrics/broadcom/APMEPAgentSender.java
Patch:
@@ -74,7 +74,7 @@ public void appendPoints(final InfluxDbPoint point) {
     public int writeData() throws Exception {
     	
         final String body = convertInfluxDBWriteObjectToJSON(influxDbWriteObject);
-        
+        if(logger.isTraceEnabled()) logger.trace("APMEPAgentSender is sending data to host = {} with body = {}", url, body);
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         final Http2Client client = Http2Client.getInstance();
         final CountDownLatch latch = new CountDownLatch(1);

File: metrics/src/main/java/com/networknt/metrics/AbstractMetricsHandler.java
Patch:
@@ -96,6 +96,7 @@ public void injectMetrics(HttpServerExchange httpServerExchange, long startTime,
             tags.put("clientId", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown");
             tags.put("scopeClientId", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : "unknown");
             tags.put("callerId", auditInfo.get(Constants.CALLER_ID_STRING) != null ? (String)auditInfo.get(Constants.CALLER_ID_STRING) : "unknown");
+            tags.put("issuer", auditInfo.get(Constants.ISSUER_CLAIMS) != null ? (String)auditInfo.get(Constants.ISSUER_CLAIMS) : "unknown");
             MetricName metricName = new MetricName(metricsName);
             metricName = metricName.tagged(commonTags);
             metricName = metricName.tagged(tags);

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -32,6 +32,7 @@ public class Constants {
     public static final String ROLES_STRING = "roles";
     public static final String CLIENT_ID_STRING = "client_id";
     public static final String CID_STRING = "cid";
+    public static final String ISS_STRING = "iss";
     public static final String CALLER_ID_STRING = "caller_id";
     public static final String SCOPE_CLIENT_ID_STRING = "scope_client_id";
     public static final String SCOPE_STRING = "scope";
@@ -65,7 +66,8 @@ public class Constants {
     // The key for the access token claims in auditInfo after security handler
     // This token is passed in from X-Scope-Token and it is optional
     public static final String ACCESS_CLAIMS = "access_claims";
-
+    // The key for the issuer token claims in auditInfo
+    public static final String ISSUER_CLAIMS = "issuer_claims";
 
     // Framework
     public static final String FRAMEWORK_NAME = "light";

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -311,7 +311,7 @@ public static void reload() {
      * status before customizing it. There are several organizations that have their own customized
      * wrapper to translate the status code to something else in order to hide the real error message
      * for security reasons.
-     * @return
+     * @return a map of config entries
      */
     public static Map<String, Object> getConfig() {
         return config;

File: metrics/src/main/java/com/networknt/metrics/JVMMetricsDbReporter.java
Patch:
@@ -33,7 +33,7 @@ public void report(final SortedMap<MetricName, Gauge> gauges, final SortedMap<Me
         
         JVMMetricsUtil.trackAllJVMMetrics(registry, tags);
         
-        if(logger.isDebugEnabled()) logger.debug("InfluxDbReporter report is called with counter size " + counters.size());
+        if(logger.isDebugEnabled()) logger.debug("JVMMetricsDbReporter report is called with counter size " + counters.size());
         try {
             influxDb.flush();
             
@@ -46,7 +46,7 @@ public void report(final SortedMap<MetricName, Gauge> gauges, final SortedMap<Me
                 influxDb.writeData();
             }
         } catch (Exception e) {
-            logger.error("Unable to report to InfluxDB. Discarding data.", e);
+            logger.error("Unable to report to the time series database. Discarding data.", e);
         }
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -12,7 +12,7 @@
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.config.UrlRewriteRule;
 import com.networknt.metrics.MetricsConfig;
-import com.networknt.metrics.MetricsHandler;
+import com.networknt.metrics.AbstractMetricsHandler;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
 import com.networknt.monad.Success;
@@ -73,7 +73,7 @@ public class SalesforceHandler implements MiddlewareHandler {
     private static final String GET_TOKEN_ERROR = "ERR10052";
     private static final String METHOD_NOT_ALLOWED  = "ERR10008";
 
-    private static MetricsHandler metricsHandler;
+    private static AbstractMetricsHandler metricsHandler;
 
     private volatile HttpHandler next;
     private SalesforceConfig config;
@@ -86,7 +86,7 @@ public SalesforceHandler() {
         // get the metrics handler from the handler chain for metrics registration. If we cannot get the
         // metrics handler, then an error message will be logged.
         Map<String, HttpHandler> handlers = Handler.getHandlers();
-        metricsHandler = (MetricsHandler) handlers.get(MetricsConfig.CONFIG_NAME);
+        metricsHandler = (AbstractMetricsHandler) handlers.get(MetricsConfig.CONFIG_NAME);
         if(metricsHandler == null) {
             logger.error("An instance of MetricsHandler is not configured in the handler.yml.");
         }

File: metrics/src/main/java/com/networknt/metrics/APMMetricsHandler.java
Patch:
@@ -29,7 +29,7 @@
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 
-public class APMMetricsHandler extends MetricsHandler {
+public class APMMetricsHandler extends AbstractMetricsHandler {
     static final Logger logger = LoggerFactory.getLogger(APMMetricsHandler.class);
     public static ServerConfig serverConfig;
 

File: metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java
Patch:
@@ -54,7 +54,7 @@ public static void setUp() {
             logger.info("starting server");
             HttpHandler handler = getTestHandler();
 
-            MetricsHandler metricsHandler = new InfluxMetricsHandler();
+            MetricsHandler metricsHandler = new MetricsHandler();
             metricsHandler.setNext(handler);
             handler = metricsHandler;
 

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -154,7 +154,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         logger.error("wrong http method " + method + " for request path " + requestPath);
                         setExchangeStatus(exchange, METHOD_NOT_ALLOWED, method, requestPath);
                         if(logger.isDebugEnabled()) logger.debug("ExternalServiceHandler.handleRequest ends with an error.");
-                        metricsHandler.injectMetrics(exchange, startTime);
+                        if(metricsHandler != null) metricsHandler.injectMetrics(exchange, startTime);
                         return;
                     }
                     if(client == null) {
@@ -195,7 +195,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     }
                     exchange.getResponseSender().send(ByteBuffer.wrap(responseBody));
                     if(logger.isDebugEnabled()) logger.debug("ExternalServiceHandler.handleRequest ends.");
-                    metricsHandler.injectMetrics(exchange, startTime);
+                    if(metricsHandler != null) metricsHandler.injectMetrics(exchange, startTime);
                     return;
                 }
             }

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -317,7 +317,7 @@ private void invokeApi(HttpServerExchange exchange, String serviceHost, String r
             }
         }
         exchange.getResponseSender().send(ByteBuffer.wrap(responseBody));
-        metricsHandler.injectMetrics(exchange, startTime);
+        if(metricsHandler != null) metricsHandler.injectMetrics(exchange, startTime);
     }
 
     private Result<TokenResponse> getAccessToken() throws Exception {

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -422,7 +422,7 @@ private void invokeApi(HttpServerExchange exchange, String authorization, String
         }
         if(logger.isTraceEnabled()) logger.trace("response body = " + responseBody);
         exchange.getResponseSender().send(ByteBuffer.wrap(responseBody));
-        metricsHandler.injectMetrics(exchange, startTime);
+        if(metricsHandler != null) metricsHandler.injectMetrics(exchange, startTime);
     }
 
 }

File: metrics/src/main/java/com/networknt/metrics/InfluxMetricsHandler.java
Patch:
@@ -28,12 +28,10 @@
 
 public class InfluxMetricsHandler extends MetricsHandler {
     static final Logger logger = LoggerFactory.getLogger(InfluxMetricsHandler.class);
-    public static MetricsConfig config;
 
     // this is the indicator to start the reporter and construct the common tags. It cannot be static as
     // the currentPort and currentAddress are not available during the handler initialization.
     private boolean firstTime = true;
-    Map<String, String> commonTags = new HashMap<>();
     static String MASK_KEY_SERVER_PASS= "serverPass";
     private volatile HttpHandler next;
 

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -159,7 +159,7 @@ private static final class FileConfigImpl extends Config {
                 } else {
                     final Resolver resolver = new Resolver();
                     resolver.addImplicitResolver(YmlConstants.CRYPT_TAG, YmlConstants.CRYPT_PATTERN, YmlConstants.CRYPT_FIRST);
-                    yaml = new Yaml(new DecryptConstructor(decryptorClass), new Representer(), new DumperOptions(), resolver);
+                    yaml = new Yaml(new DecryptConstructor(decryptorClass), new Representer(new DumperOptions()), new DumperOptions(), resolver);
                 }
             }
         }

File: config/src/main/java/com/networknt/config/yml/ConfigLoaderConstructor.java
Patch:
@@ -3,6 +3,7 @@
 import com.networknt.config.ConfigLoader;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.constructor.Constructor;
 
 /**
@@ -16,7 +17,7 @@ public class ConfigLoaderConstructor extends Constructor {
     private final ConfigLoader configLoader;
 
     public ConfigLoaderConstructor(String configLoaderClass) {
-        super();
+        super(new LoaderOptions());
         configLoader = createConfigLoader(configLoaderClass);
     }
 

File: config/src/main/java/com/networknt/config/yml/DecryptConstructor.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.constructor.AbstractConstruct;
 import org.yaml.snakeyaml.constructor.Constructor;
 import org.yaml.snakeyaml.nodes.Node;
@@ -29,7 +30,7 @@ public DecryptConstructor() {
 	}
 	
 	public DecryptConstructor(String decryptorClass) {
-		super();
+		super(new LoaderOptions());
 		
 		decryptor= createDecryptor(decryptorClass);
 		

File: config/src/test/java/com/networknt/config/ConfigDecryptTest.java
Patch:
@@ -90,7 +90,7 @@ public void testDecryptObject() {
     public void testDecryptorClass() {
         final Resolver resolver = new Resolver();
         resolver.addImplicitResolver(YmlConstants.CRYPT_TAG, YmlConstants.CRYPT_PATTERN, YmlConstants.CRYPT_FIRST);
-        Yaml yaml = new Yaml(new DecryptConstructor("com.networknt.config.TestDecryptor"), new Representer(), new DumperOptions(), resolver);
+        Yaml yaml = new Yaml(new DecryptConstructor("com.networknt.config.TestDecryptor"), new Representer(new DumperOptions()), new DumperOptions(), resolver);
     	
         Map<String, Object> secret=yaml.load(Config.getInstance().getInputStreamFromFile("secret-map-test2.yml"));
         
@@ -102,7 +102,7 @@ public void testAutoDecryptorClass() throws IOException {
         if (System.getenv("config_password") == null || !System.getenv("config_password").equals("light")) return;
         final Resolver resolver = new Resolver();
         resolver.addImplicitResolver(YmlConstants.CRYPT_TAG, YmlConstants.CRYPT_PATTERN, YmlConstants.CRYPT_FIRST);
-        Yaml yaml = new Yaml(new DecryptConstructor("com.networknt.config.TestAutoDecryptor"), new Representer(), new DumperOptions(), resolver);
+        Yaml yaml = new Yaml(new DecryptConstructor("com.networknt.config.TestAutoDecryptor"), new Representer(new DumperOptions()), new DumperOptions(), resolver);
 
         Map<String, Object> secret=yaml.load(Config.getInstance().getInputStreamFromFile("secret-map-test2.yml"));
 

File: metrics/src/main/java/com/networknt/metrics/TimeSeriesDbSender.java
Patch:
@@ -20,7 +20,7 @@
 
 import io.dropwizard.metrics.influxdb.data.InfluxDbPoint;
 
-public interface InfluxDbSender {
+public interface TimeSeriesDbSender {
     /**
      * Flushes buffer, if applicable.
      */

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * An implementation of InfluxDbSender that writes to InfluxDb via http.
  */
-public class TimeSeriesDbHttpSender implements TimeSeriesDbSender {
+public class InfluxDbHttpSender implements TimeSeriesDbSender {
     private static final Logger logger = LoggerFactory.getLogger(InfluxDbReporter.class);
     private final Http2Client client = Http2Client.getInstance();
 
@@ -61,7 +61,7 @@ public class TimeSeriesDbHttpSender implements TimeSeriesDbSender {
      * @param password   the password used to connect to influxDb
      * @throws Exception exception while creating the influxDb sender(MalformedURLException)
      */
-    public TimeSeriesDbHttpSender(final String protocol, final String hostname, final int port, final String database, final String username, final String password) throws Exception {
+    public InfluxDbHttpSender(final String protocol, final String hostname, final int port, final String database, final String username, final String password) throws Exception {
         this(protocol, hostname, port, database, username, password, TimeUnit.MILLISECONDS);
     }
 
@@ -77,7 +77,7 @@ public TimeSeriesDbHttpSender(final String protocol, final String hostname, fina
      * @param timePrecision the time precision of the metrics
      * @throws Exception exception while creating the influxDb sender(MalformedURLException)
      */
-    public TimeSeriesDbHttpSender(final String protocol, final String hostname, final int port, final String database, final String username, final String password,
+    public InfluxDbHttpSender(final String protocol, final String hostname, final int port, final String database, final String username, final String password,
                                   final TimeUnit timePrecision) throws Exception {
         this.url = new URL(protocol, hostname, port, "");
         String queryDb = String.format("db=%s", URLEncoder.encode(database, "UTF-8"));

File: metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java
Patch:
@@ -54,7 +54,7 @@ public static void setUp() {
             logger.info("starting server");
             HttpHandler handler = getTestHandler();
 
-            MetricsHandler metricsHandler = new MetricsHandler();
+            MetricsHandler metricsHandler = new InfluxMetricsHandler();
             metricsHandler.setNext(handler);
             handler = metricsHandler;
 

File: metrics/src/test/java/io/dropwizard/metrics/influxdb/InfluxDbReporterTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.TreeMap;
 import java.util.concurrent.TimeUnit;
 
+import com.networknt.metrics.TimeSeriesDbSender;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -41,7 +42,7 @@
 
 public class InfluxDbReporterTest {
     @Mock
-    private InfluxDbSender influxDb;
+    private TimeSeriesDbSender influxDb;
     @Mock
     private InfluxDbWriteObject writeObject;
     @Mock

File: client/src/test/java/com/networknt/client/Http2ClientPoolTest.java
Patch:
@@ -290,8 +290,8 @@ public void testResponseTime() throws Exception {
             final AsyncResult<AsyncResponse> ar = reference.get();
             if(ar.succeeded()) {
                 Assert.assertEquals(message, ar.result().getResponseBody());
-                Assert.assertTrue(ar.result().getResponseTime() > 0);
                 System.out.println("responseTime = " + ar.result().getResponseTime());
+                Assert.assertTrue(ar.result().getResponseTime() > 0);
             } else {
                 ar.cause().printStackTrace();
             }

File: handler/src/main/java/com/networknt/handler/config/PathChain.java
Patch:
@@ -76,6 +76,7 @@ public void validate(String origin) {
         if(source == null) {
             if(path == null) {
                 problems.add("You must specify either path or source");
+                problems.add("It is possible that serviceId is missing from the values.yml and it is mandatory.");
             } else if(method == null) {
                 problems.add("You must specify method along with path: " + path);
             }

File: handler/src/test/java/com/networknt/handler/PathChainTest.java
Patch:
@@ -61,7 +61,7 @@ public void validate_BadMethod() {
             Assert.fail("Expected exception");
         } catch (Exception e) {
             System.out.println(e.toString());
-            String ex_message = "Bad paths element in unit test config [ You must specify either path or source ]";
+            String ex_message = "Bad paths element in unit test config [ You must specify either path or source | It is possible that serviceId is missing from the values.yml and it is mandatory. ]";
             Assert.assertEquals(ex_message, e.getMessage());
         }
     }

File: security/src/main/java/com/networknt/security/SecurityConfig.java
Patch:
@@ -287,7 +287,7 @@ private void setSkipPathPrefixes() {
     }
 
     private void setPassThroughClaims() {
-        if(mappedConfig.get(PASS_THROUGH_CLAIMS) != null) {
+        if(mappedConfig != null && mappedConfig.get(PASS_THROUGH_CLAIMS) != null) {
             Object obj = mappedConfig.get(PASS_THROUGH_CLAIMS);
             if(obj instanceof String) {
                 String s = (String)obj;

File: body/src/main/java/com/networknt/body/BodyConverter.java
Patch:
@@ -28,7 +28,7 @@
  * For the same form key, there might be multiple form values, we handle it differently based on the size.
  */
 public class BodyConverter {
-    static Map<String, Object> convert(FormData data) {
+    public static Map<String, Object> convert(FormData data) {
         Map<String, Object> map = new HashMap<>();
         for (String key : data) {
 

File: egress-router/src/main/java/io/undertow/server/handlers/proxy/LoadBalancingRouterProxyClient.java
Patch:
@@ -223,8 +223,8 @@ protected Host selectHost(HttpServerExchange exchange) {
         String serviceUrl = headers.getFirst(HttpStringConstants.SERVICE_URL);
         if(logger.isTraceEnabled()) logger.trace("From headers serviceId = " + serviceId + " serviceUrl = " + serviceUrl);
         // remove the header here in case the downstream service is another light-router instance.
-        if(serviceUrl != null) headers.remove(HttpStringConstants.SERVICE_URL);
-        if(serviceId != null) headers.remove(HttpStringConstants.SERVICE_ID);
+        // if(serviceUrl != null) headers.remove(HttpStringConstants.SERVICE_URL);
+        // if(serviceId != null) headers.remove(HttpStringConstants.SERVICE_ID);
         // if the serviceId doesn't exist in the header, check if there is one in the query parameter.
         // also remove it from the query parameters to ensure that the downstream call doesn't have it.
         // it is for legacy client that is easy to manipulate the query parameters than headers.

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -57,6 +57,7 @@ public RouterHandler() {
         proxyHandler = ProxyHandler.builder()
                 .setProxyClient(client)
                 .setMaxConnectionRetries(config.maxConnectionRetries)
+                .setMaxQueueSize(config.maxQueueSize)
                 .setMaxRequestTime(config.maxRequestTime)
                 .setPathPrefixMaxRequestTime(config.pathPrefixMaxRequestTime)
                 .setReuseXForwarded(config.reuseXForwarded)
@@ -89,6 +90,7 @@ public void reload() {
         proxyHandler = ProxyHandler.builder()
                 .setProxyClient(client)
                 .setMaxConnectionRetries(config.maxConnectionRetries)
+                .setMaxQueueSize(config.maxQueueSize)
                 .setMaxRequestTime(config.maxRequestTime)
                 .setPathPrefixMaxRequestTime(config.pathPrefixMaxRequestTime)
                 .setReuseXForwarded(config.reuseXForwarded)

File: egress-router/src/test/java/com/networknt/router/RouterConfigTest.java
Patch:
@@ -41,6 +41,7 @@ public void testConfig() {
         Assert.assertTrue(routerConfig.isRewriteHostHeader());
         Assert.assertEquals(routerConfig.getMaxRequestTime(), 1000);
         Assert.assertEquals(routerConfig.getMaxConnectionRetries(), 3);
+        Assert.assertEquals(routerConfig.getMaxQueueSize(), 0);
     }
 
     @Test

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -90,6 +90,7 @@ public LightProxyHandler() {
         proxyHandler = ProxyHandler.builder()
                 .setProxyClient(loadBalancer)
                 .setMaxConnectionRetries(config.getMaxConnectionRetries())
+                .setMaxQueueSize(config.getMaxQueueSize())
                 .setMaxRequestTime(config.getMaxRequestTime())
                 .setReuseXForwarded(config.isReuseXForwarded())
                 .setRewriteHostHeader(config.isRewriteHostHeader())
@@ -172,6 +173,7 @@ public void reload() {
         proxyHandler = ProxyHandler.builder()
                 .setProxyClient(loadBalancer)
                 .setMaxConnectionRetries(config.getMaxConnectionRetries())
+                .setMaxQueueSize(config.getMaxQueueSize())
                 .setMaxRequestTime(config.getMaxRequestTime())
                 .setReuseXForwarded(config.isReuseXForwarded())
                 .setRewriteHostHeader(config.isRewriteHostHeader())

File: ingress-proxy/src/test/java/com/networknt/proxy/ProxyConfigTest.java
Patch:
@@ -8,5 +8,6 @@ public class ProxyConfigTest {
     public void testLoadConfig() {
         ProxyConfig config = ProxyConfig.load();
         Assert.assertNotNull(config.getHosts());
+        Assert.assertEquals(config.getMaxQueueSize(), 0);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -78,6 +78,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         String serviceId = serviceIdHeader != null ? serviceIdHeader.peekFirst() : null;
         if(serviceId == null) {
             String requestPath = exchange.getRequestURI();
+            if(logger.isTraceEnabled()) logger.trace("serviceId is null, looking up the serviceEntry...");
             serviceEntry = HandlerUtils.findServiceEntry(HandlerUtils.normalisePath(requestPath), config.getMapping());
             if(serviceEntry != null) {
                 if(logger.isTraceEnabled()) logger.trace("serviceEntry found and header is set for service_id = " + serviceEntry[1]);

File: config/src/main/java/com/networknt/config/yml/DecryptConstructor.java
Patch:
@@ -37,8 +37,8 @@ public DecryptConstructor(String decryptorClass) {
 	}
 	
 	private Decryptor createDecryptor(String decryptorClass) {
-		if (logger.isDebugEnabled()) {
-			logger.debug("creating decryptor {}", decryptorClass);
+		if (logger.isTraceEnabled()) {
+			logger.trace("creating decryptor {}", decryptorClass);
 		}
 		
 		try {

File: config/src/main/java/com/networknt/config/JsonMapper.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.config;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.DeserializationFeature;
@@ -37,6 +38,7 @@ public class JsonMapper {
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
         objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
+        objectMapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
         objectMapper.registerModule(new JavaTimeModule());
         objectMapper.registerModule(new Jdk8Module());
     }

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -58,6 +58,7 @@ public RouterHandler() {
                 .setProxyClient(client)
                 .setMaxConnectionRetries(config.maxConnectionRetries)
                 .setMaxRequestTime(config.maxRequestTime)
+                .setPathPrefixMaxRequestTime(config.pathPrefixMaxRequestTime)
                 .setReuseXForwarded(config.reuseXForwarded)
                 .setRewriteHostHeader(config.rewriteHostHeader)
                 .setUrlRewriteRules(config.urlRewriteRules)
@@ -89,6 +90,7 @@ public void reload() {
                 .setProxyClient(client)
                 .setMaxConnectionRetries(config.maxConnectionRetries)
                 .setMaxRequestTime(config.maxRequestTime)
+                .setPathPrefixMaxRequestTime(config.pathPrefixMaxRequestTime)
                 .setReuseXForwarded(config.reuseXForwarded)
                 .setRewriteHostHeader(config.rewriteHostHeader)
                 .setUrlRewriteRules(config.urlRewriteRules)

File: egress-router/src/test/java/com/networknt/router/middleware/PathServiceConfigTest.java
Patch:
@@ -8,6 +8,6 @@ public class PathServiceConfigTest {
     public void testLoadConfig() {
         PathServiceConfig config = PathServiceConfig.load(PathServiceConfig.CONFIG_NAME);
         Assert.assertTrue(config.isEnabled());
-        Assert.assertEquals(3, config.getMapping().size());
+        Assert.assertNull(config.getMapping());
     }
 }

File: egress-router/src/test/java/com/networknt/router/middleware/ServiceDictConfigTest.java
Patch:
@@ -8,6 +8,6 @@ public class ServiceDictConfigTest {
     public void testLoadConfig() {
         ServiceDictConfig config = ServiceDictConfig.load(ServiceDictConfig.CONFIG_NAME);
         Assert.assertTrue(config.isEnabled());
-        Assert.assertEquals(3, config.getMapping().size());
+        Assert.assertNull(config.getMapping());
     }
 }

File: gateway/src/main/java/com/networknt/router/GatewayRouterHandler.java
Patch:
@@ -51,6 +51,7 @@ public class GatewayRouterHandler extends RouterHandler implements MiddlewareHan
 
     public static Map<String, Object> config = Config.getInstance().getJsonMapConfigNoCache(ROUTER_CONFIG_NAME);
     public static GatewayConfig gatewayConfig = (GatewayConfig)Config.getInstance().getJsonObjectConfig(GatewayConfig.CONFIG_NAME, GatewayConfig.class);
+    public static ServerConfig serverConfig = (ServerConfig)Config.getInstance().getJsonObjectConfig(ServerConfig.CONFIG_NAME, ServerConfig.class);
 
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {
@@ -62,9 +63,8 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
             if (serviceId != null || serviceUrl != null) {
                 proxyHandler.handleRequest(httpServerExchange);
                 // get the serviceId and put it into the request as callerId for metrics
-                Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfigNoCache(ServerConfig.CONFIG_NAME);
                 if(serverConfig != null) {
-                    httpServerExchange.getRequestHeaders().put(HttpStringConstants.CALLER_ID, (String)serverConfig.get(SERVICE_ID));
+                    httpServerExchange.getRequestHeaders().put(HttpStringConstants.CALLER_ID, serverConfig.getServiceId());
                 }
             } else {
                 if(logger.isDebugEnabled()) logger.debug("GatewayRouterHandler.handleRequest ends.");

File: gateway/src/main/java/com/networknt/router/middleware/GatewayPathPrefixServiceHandler.java
Patch:
@@ -26,7 +26,7 @@
 public class GatewayPathPrefixServiceHandler extends PathPrefixServiceHandler {
     private static final Logger logger = LoggerFactory.getLogger(GatewayPathPrefixServiceHandler.class);
 
-    private GatewayConfig gatewayConfig;
+    private static GatewayConfig gatewayConfig;
 
     public GatewayPathPrefixServiceHandler() {
         logger.info("GatewayPathPrefixServiceHandler is constructed");

File: gateway/src/main/java/com/networknt/router/middleware/GatewayServiceDictHandler.java
Patch:
@@ -26,7 +26,7 @@
 public class GatewayServiceDictHandler extends ServiceDictHandler {
     private static final Logger logger = LoggerFactory.getLogger(GatewayServiceDictHandler.class);
 
-    private GatewayConfig gatewayConfig;
+    private static GatewayConfig gatewayConfig;
 
     public GatewayServiceDictHandler() {
         logger.info("GatewayServiceDictHandler is constructed");

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -206,10 +206,11 @@ public void reloadConfig() {
     }
 
     /**
-     * load config properties from light config server
+     * load config properties from light config server. This method should only be accessed by one
+     * thread only as it is synchronized due to the Yaml constructor is not thread safe.
      * @param configPath
      */
-    private void loadConfigs(String configPath) {
+    private synchronized void loadConfigs(String configPath) {
         //config Server Configs Path
         String configServerConfigsPath = CONFIG_SERVER_CONFIGS_CONTEXT_ROOT + configPath;
         //get service configs and put them in config cache

File: server/src/main/java/com/networknt/server/UrlConfigLoader.java
Patch:
@@ -92,8 +92,6 @@ public class UrlConfigLoader implements IConfigLoader {
 	static final String CONFIG_EXT_YAML = ".yaml";
 	static final String CONFIG_EXT_YML = ".yml";
 	static final String[] configExtensionsOrdered = { CONFIG_EXT_YML, CONFIG_EXT_YAML, CONFIG_EXT_JSON };
-
-	final static Yaml yaml = new Yaml();
 	final static ObjectMapper mapper = new ObjectMapper();
 	final static TypeReference<Map<String, Object>> mapType = new TypeReference<Map<String, Object>>() {
 	};
@@ -232,7 +230,7 @@ private Map<String, Object> loadSpecificConfigFileAsMap(String configType, boole
 		if (StringUtils.isNotBlank(respBody)) {
 			try {
 				if (!CONFIG_EXT_JSON.equals(fileExtension)) {
-					respBody = JSONValue.toJSONString(yaml.load(respBody));
+					respBody = JSONValue.toJSONString(Config.getInstance().getYaml().load(respBody));
 				}
 				return mapper.readValue(respBody, mapType);
 			} catch (Exception e) {

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -60,7 +60,7 @@ public class Status {
     private String description;
     private Map<String, Object> metadata;
     // make sure that the status.yml is cached in a static variable to avoid loading everytime.
-    private static Map<String, Object> config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
+    private static Map<String, Object> config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
 
     static {
         ModuleRegistry.registerModule(Status.class.getName(), config, null);

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -60,7 +60,7 @@ public class Status {
     private String description;
     private Map<String, Object> metadata;
     // make sure that the status.yml is cached in a static variable to avoid loading everytime.
-    private static Map<String, Object> config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
+    private static Map<String, Object> config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
 
     static {
         ModuleRegistry.registerModule(Status.class.getName(), config, null);
@@ -302,7 +302,7 @@ private String toStringConditionally(boolean showMessage, boolean showDescriptio
     }
 
     public static void reload() {
-        config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
+        config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
         ModuleRegistry.registerModule(Status.class.getName(), config, null);
     }
 }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -97,6 +97,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                     if(logger.isTraceEnabled()) logger.trace("contentType = " + contentType + " stringBody = " + completeBody);
                     attached = this.attachFormDataBody(exchange, completeBody.toString());
                 }
+            } else {
+                if(logger.isTraceEnabled()) logger.trace("Request body interceptor is skipped due to the request path is not in request-injection.appliedBodyInjectionPathPrefixes configuration");
             }
             if(!attached) {
                 if(logger.isErrorEnabled())

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -129,15 +129,15 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     } else if(method.equalsIgnoreCase("POST")) {
                         // if body handler is in the chain before this handler, we should have it in the exchange attachment.
                         String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
-                        if(logger.isTraceEnabled() && bodyString != null) logger.trace("Get post body from the exchange attachment = " + bodyString);
+                        if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
                         request = builder.POST(bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString)).build();
                     } else if(method.equalsIgnoreCase("PUT")) {
                         String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
-                        if(logger.isTraceEnabled() && bodyString != null) logger.trace("Get put body from the exchange attachment = " + bodyString);
+                        if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
                         request = builder.PUT(bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString)).build();
                     } else if(method.equalsIgnoreCase("PATCH")) {
                         String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
-                        if(logger.isTraceEnabled() && bodyString != null) logger.trace("Get patch body from the exchange attachment = " + bodyString);
+                        if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
                         request = builder.method("PATCH", bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString)).build();
                     } else {
                         logger.error("wrong http method " + method + " for request path " + requestPath);

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -224,6 +224,7 @@ private void invokeApi(HttpServerExchange exchange, String serviceHost, String r
             request = builder.build();
         } else if(method.equalsIgnoreCase("POST")) {
             String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
+            if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
             HttpRequest.Builder builder = HttpRequest.newBuilder()
                     .uri(new URI(serviceHost + requestPath))
                     .POST(bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString));
@@ -235,6 +236,7 @@ private void invokeApi(HttpServerExchange exchange, String serviceHost, String r
             request = builder.build();
         } else if(method.equalsIgnoreCase("PUT")) {
             String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
+            if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
             HttpRequest.Builder builder = HttpRequest.newBuilder()
                     .uri(new URI(serviceHost + requestPath))
                     .PUT(bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString));
@@ -246,6 +248,7 @@ private void invokeApi(HttpServerExchange exchange, String serviceHost, String r
             request = builder.build();
         } else if(method.equalsIgnoreCase("PATCH")) {
             String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
+            if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
             HttpRequest.Builder builder = HttpRequest.newBuilder()
                     .uri(new URI(serviceHost + requestPath))
                     .method("PATCH", bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString));

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -369,23 +369,23 @@ private void invokeApi(HttpServerExchange exchange, String authorization, String
 
         } else if(method.equalsIgnoreCase("POST")) {
             String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
-            if(logger.isTraceEnabled()) logger.trace("Post request body = " + bodyString);
+            if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
             request = HttpRequest.newBuilder()
                     .uri(new URI(requestHost + requestPath))
                     .headers("Authorization", authorization, "Content-Type", contentType)
                     .POST(bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString))
                     .build();
         } else if(method.equalsIgnoreCase("PUT")) {
             String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
-            if(logger.isTraceEnabled()) logger.trace("Put request body = " + bodyString);
+            if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
             request = HttpRequest.newBuilder()
                     .uri(new URI(requestHost + requestPath))
                     .headers("Authorization", authorization, "Content-Type", contentType)
                     .PUT(bodyString == null ? HttpRequest.BodyPublishers.noBody() : HttpRequest.BodyPublishers.ofString(bodyString))
                     .build();
         } else if(method.equalsIgnoreCase("PATCH")) {
             String bodyString = exchange.getAttachment(BodyHandler.REQUEST_BODY_STRING);
-            if(logger.isTraceEnabled()) logger.trace("Patch request body = " + bodyString);
+            if(bodyString == null && logger.isDebugEnabled()) logger.debug("The request body is null and the request path might be missing in request-injection.appliedBodyInjectionPathPrefixes.");
             request = HttpRequest.newBuilder()
                     .uri(new URI(requestHost + requestPath))
                     .headers("Authorization", authorization, "Content-Type", contentType)

File: handler/src/main/java/com/networknt/handler/OrchestrationHandler.java
Patch:
@@ -43,7 +43,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             if(Handler.startDefaultHandlers(exchange)) {
                 Handler.next(exchange);
             } else {
-                setExchangeStatus(exchange, MISSING_HANDlER, exchange.getRequestPath());
+                setExchangeStatus(exchange, MISSING_HANDlER, exchange.getRequestPath(), exchange.getRequestMethod().toString());
             }
         }
     }

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -124,8 +124,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                     exchange.getRequestHeaders().put(Headers.AUTHORIZATION, "Bearer " + cachedJwt.getJwt());
                 } else {
                     if(logger.isTraceEnabled()) {
-                        logger.trace("Authorization header is used with " + token.substring(0, 10));
-                        logger.trace("Adding jwt token to X-Scope-Token header with Bearer " + cachedJwt.getJwt().substring(0, 10));
+                        logger.trace("Authorization header is used with " + (token.length() > 10 ? token.substring(0, 10) : token)); // it could be "Basic "
+                        logger.trace("Adding jwt token to X-Scope-Token header with Bearer " + cachedJwt.getJwt().substring(0, 20));
                     }
                     exchange.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, "Bearer " + cachedJwt.getJwt());
                 }

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -116,10 +116,8 @@ private boolean shouldAttachBody(final HttpServerExchange exchange) {
         HttpString method = exchange.getRequestMethod();
         String requestPath = exchange.getRequestPath();
         boolean hasBody = method.equals(Methods.POST) || method.equals(Methods.PUT) || method.equals(Methods.PATCH);
-        boolean isPathConfigured = config.getAppliedPathPrefixes() == null || config.getAppliedPathPrefixes().stream().anyMatch(requestPath::startsWith);
-        if(logger.isTraceEnabled()) logger.trace("hasBody = " + hasBody +  " isPathConfigured = " + isPathConfigured);
+        if(logger.isTraceEnabled()) logger.trace("hasBody = " + hasBody);
         return hasBody &&
-                isPathConfigured &&
                 exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE) != null;
     }
 

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -85,9 +85,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     }
 
     private boolean shouldParseBody(final HttpServerExchange exchange) {
-        String requestPath = exchange.getRequestPath();
-        boolean isPathConfigured = config.getAppliedPathPrefixes() == null ? true : config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s));
-        return isPathConfigured && isAttachContentType(exchange);
+        return isAttachContentType(exchange);
     }
     private boolean isAttachContentType(final HttpServerExchange exchange) {
         String contentType = exchange.getResponseHeaders().getFirst(Headers.CONTENT_TYPE);

File: body/src/test/java/com/networknt/body/BodyConfigTest.java
Patch:
@@ -12,6 +12,7 @@ public class BodyConfigTest {
     @Test
     public void canLoadPathPrefixes() {
         BodyConfig config = BodyConfig.load();
-        Assert.assertEquals(2, config.getAppliedPathPrefixes().size());
+        Assert.assertFalse(config.isCacheRequestBody());
+        Assert.assertFalse(config.isCacheResponseBody());
     }
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasConfig.java
Patch:
@@ -25,6 +25,8 @@ public class MrasConfig {
     public static final String TOKEN_URL = "tokenUrl";
     public static final String USERNAME = "username";
     public static final String PASSWORD = "password";
+    public static final String CLIENT_ID = "clientId";
+    public static final String CLIENT_SECRET = "clientSecret";
     public static final String RESOURCE = "resource";
     public static final String CACHE_ENABLED = "cacheEnabled";
     public static final String MEM_KEY = "memKey";

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -396,6 +396,8 @@ private Result<TokenResponse> getMicrosoftToken() throws Exception {
             Map<String, String> parameters = new HashMap<>();
             parameters.put("grant_type", "client_credentials");
             parameters.put("resource", (String)config.getMicrosoft().get(config.RESOURCE));
+            parameters.put("client_id", (String)config.getMicrosoft().get(config.CLIENT_ID));
+            parameters.put("client_secret", (String)config.getMicrosoft().get(config.CLIENT_SECRET));
 
             String form = parameters.entrySet()
                     .stream()
@@ -404,7 +406,7 @@ private Result<TokenResponse> getMicrosoftToken() throws Exception {
 
             HttpRequest request = HttpRequest.newBuilder()
                     .uri(URI.create(serverUrl))
-                    .headers("Content-Type", "application/x-www-form-urlencoded", "Authorization", "BASIC " + encodeCredentials((String)config.getMicrosoft().get(config.USERNAME), (String)config.getMicrosoft().get(config.PASSWORD)))
+                    .headers("Content-Type", "application/x-www-form-urlencoded")
                     .POST(HttpRequest.BodyPublishers.ofString(form))
                     .build();
 

File: api-key/src/test/java/com/networknt/apikey/ApiKeyJsonConfigTest.java
Patch:
@@ -13,7 +13,6 @@ public class ApiKeyJsonConfigTest {
     static final ApiKeyConfig config = ApiKeyConfig.load("apikey-json");
 
     @Test
-    @Ignore
     public void testDecryption() {
         logger.debug("apiKey for /test2 = " + config.getPathPrefixAuths().get(1).getApiKey());
         Assert.assertEquals("password", config.getPathPrefixAuths().get(1).getApiKey());

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthConfig.java
Patch:
@@ -158,7 +158,6 @@ private void populateUsers(List<Map<String, Object>> userList) {
         userList.forEach(user -> {
             if (user instanceof Map) {
                 // the password might be encrypted.
-                user = DecryptUtil.decryptMap(user);
                 UserAuth userAuth = new UserAuth();
                 user.forEach((k, v) -> {
                     if (USERNAME.equals(k)) {

File: basic-auth/src/main/java/com/networknt/basicauth/UserAuth.java
Patch:
@@ -1,5 +1,7 @@
 package com.networknt.basicauth;
 
+import com.networknt.config.ConfigInjection;
+
 import java.util.List;
 
 public class UserAuth {
@@ -29,7 +31,7 @@ public String getPassword() {
     }
 
     public void setPassword(String password) {
-        this.password = password;
+        this.password = (String) ConfigInjection.decryptEnvValue(ConfigInjection.getDecryptor(), password);
     }
 
     public List<String> getPaths() {

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -93,7 +93,7 @@ public static boolean isExclusionConfigFile(String configName) {
                 || exclusionConfigFileList.contains(configName);
     }
 
-    static Decryptor getDecryptor() {
+    public static Decryptor getDecryptor() {
         Config myConfig = Config.getInstance();
         if (myConfig == null) {
             throw new RuntimeException("Unable to retrieve the configuration.");
@@ -114,7 +114,7 @@ static String convertEnvVars(String input){
         return input.replaceAll("[^A-Za-z0-9]", "_").toUpperCase();
     }
 
-    static Object decryptEnvValue(Decryptor decryptor, String envVal) {
+    public static Object decryptEnvValue(Decryptor decryptor, String envVal) {
         Object decryptedEnvValue;
         //checking if the value put in env is encrypted. If yes then decrypting it.
         if (envVal != null && envVal.trim().startsWith(Decryptor.CRYPT_PREFIX)) {

File: handler/src/main/java/com/networknt/handler/ProxyHandler.java
Patch:
@@ -145,6 +145,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         }
         if(exchange.isResponseStarted()) {
             //we can't proxy a request that has already started, this is basically a server configuration error
+            logger.error("Cannot proxy a request that has already started.");
             UndertowLogger.REQUEST_LOGGER.cannotProxyStartedRequest(exchange);
             exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR);
             exchange.endExchange();

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasConfig.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.proxy.mras;
 
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.networknt.config.Config;
 import com.networknt.config.ConfigException;
 import com.networknt.config.JsonMapper;

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -108,6 +108,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 return;
             }
         }
+        if(logger.isDebugEnabled()) logger.debug("BasicAuthHandler.handleRequest ends.");
         Handler.next(exchange, next);
 
     }

File: security/src/test/java/com/networknt/security/JwtVerifierMultipleJwkTest.java
Patch:
@@ -88,7 +88,7 @@ public static void beforeClass() throws IOException {
                                 String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);
                                 // verify the jwt token with JWK.
                                 JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);
-                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, requestPath);
+                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
                                 exchange.getResponseSender().send(ByteBuffer.wrap(
                                         Config.getInstance().getMapper().writeValueAsBytes(
@@ -125,7 +125,7 @@ public static void beforeClass() throws IOException {
                                 String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);
                                 // verify the jwt token with JWK.
                                 JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);
-                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, requestPath);
+                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
                                 exchange.getResponseSender().send(ByteBuffer.wrap(
                                         Config.getInstance().getMapper().writeValueAsBytes(

File: security/src/test/java/com/networknt/security/JwtVerifierSingleJwkTest.java
Patch:
@@ -93,7 +93,7 @@ public static void beforeClass() throws IOException {
                                 String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);
                                 // verify the jwt token with JWK.
                                 JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);
-                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, requestPath);
+                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, null, requestPath, null);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
                                 exchange.getResponseSender().send(ByteBuffer.wrap(
                                         Config.getInstance().getMapper().writeValueAsBytes(

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -524,4 +524,7 @@ static void setConfig(String configName) throws Exception {
 		initHandlers();
 		initPaths();
 	}
+	public static Map<String, HttpHandler> getHandlers() {
+		return handlers;
+	}
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -110,6 +110,9 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        List<String> masks = new ArrayList<>();
+        masks.add("certPassword");
+        ModuleRegistry.registerModule(SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
     }
 
     @Override

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -47,7 +47,7 @@ public class BasicAuthHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(BasicAuthHandler.class);
     static final String BEARER_PREFIX = "BEARER";
     static final String BASIC_PREFIX = "BASIC";
-    BasicAuthConfig config;
+    static BasicAuthConfig config;
 
     static final String MISSING_AUTH_TOKEN = "ERR10002";
     static final String INVALID_BASIC_HEADER = "ERR10046";
@@ -152,7 +152,7 @@ private void handleAnonymousAuth(HttpServerExchange exchange, String requestPath
      * @param requestPath - path found within current request.
      * @param auth - auth string
      */
-    private void handleBasicAuth(HttpServerExchange exchange, String requestPath, String auth) {
+    public void handleBasicAuth(HttpServerExchange exchange, String requestPath, String auth) {
         String credentials = auth.substring(6);
         int pos = credentials.indexOf(':');
         if (pos == -1) {

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -103,6 +103,7 @@ public JwtVerifier(SecurityConfig config) {
         this.enableJwtCache = config.isEnableJwtCache();
         if (Boolean.TRUE.equals(enableJwtCache)) {
             cache = Caffeine.newBuilder()
+                    .maximumSize(config.getJwtCacheFullSize())
                     // assuming that the clock screw time is less than 5 minutes
                     .expireAfterWrite(CACHE_EXPIRED_IN_MINUTES, TimeUnit.MINUTES)
                     .build();

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -69,6 +69,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.regex.Pattern;
 
+import static com.networknt.client.Http2Client.TLS_VERSION;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
@@ -873,7 +874,7 @@ private static SSLContext createTestSSLContext(boolean verifyHostName, String tr
             }
 
             try {
-                sslContext = SSLContext.getInstance("TLS");
+                sslContext = SSLContext.getInstance((String)tlsMap.get(TLS_VERSION));
                 sslContext.init(keyManagers, trustManagers, null);
                 
             } catch (NoSuchAlgorithmException | KeyManagementException e) {

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -490,7 +490,7 @@ private SSLContext createSSLContext() throws IOException {
         }
 
         try {
-            sslContext = SSLContext.getInstance("TLS");
+            sslContext = SSLContext.getInstance("TLSv1.2");
             sslContext.init(keyManagers, trustManagers, null);
         } catch (NoSuchAlgorithmException | KeyManagementException e) {
             logger.error("Exception:", e);

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -468,7 +468,7 @@ private static SSLContext createSSLContext() throws RuntimeException {
             }
 
             SSLContext sslContext;
-            sslContext = SSLContext.getInstance("TLSv1");
+            sslContext = SSLContext.getInstance("TLSv1.2");
             sslContext.init(keyManagers, trustManagers, null);
             return sslContext;
         } catch (Exception e) {

File: egress-router/src/main/java/io/undertow/server/handlers/proxy/LoadBalancingRouterProxyClient.java
Patch:
@@ -75,9 +75,9 @@ public class LoadBalancingRouterProxyClient implements ProxyClient {
     /**
      * The number of connections to create per thread
      */
-    private volatile int connectionsPerThread = 10;
+    private volatile int connectionsPerThread = config.getConnectionsPerThread();
     private volatile int maxQueueSize = 0;
-    private volatile int softMaxConnectionsPerThread = 5;
+    private volatile int softMaxConnectionsPerThread = config.getSoftMaxConnectionsPerThread();
     private volatile int ttl = -1;
 
     /**

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -303,6 +303,9 @@ public JwtClaims verifyJwt(String jwt, boolean ignoreExpiry, boolean isToken, St
         claims = jwtContext.getJwtClaims();
         if (Boolean.TRUE.equals(enableJwtCache)) {
             cache.put(jwt, claims);
+            if(cache.estimatedSize() > config.getJwtCacheFullSize()) {
+                logger.error("JWT cache exceeds the size limit " + config.getJwtCacheFullSize());
+            }
         }
         return claims;
     }

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -87,9 +87,9 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         /* contains auth header */
         } else {
             // verify the header with the config file. assuming it is basic authentication first.
-            if (BASIC_PREFIX.startsWith(auth.toUpperCase())) {
+            if (BASIC_PREFIX.equalsIgnoreCase(auth.substring(0, 5))) {
                 this.handleBasicAuth(exchange, requestPath, auth);
-            } else if (BEARER_PREFIX.startsWith(auth.toUpperCase())) {
+            } else if (BEARER_PREFIX.equalsIgnoreCase(auth.substring(0, 6))) {
                 this.handleBearerToken(exchange, requestPath, auth);
             } else {
                 logger.error("Invalid/Unsupported authorization header {}", auth.substring(0, 10));

File: api-key/src/main/java/com/networknt/apikey/ApiKeyHandler.java
Patch:
@@ -82,6 +82,7 @@ public void reload() {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("ApiKeyHandler.handleRequest starts.");
         String requestPath = exchange.getRequestPath();
         if(logger.isTraceEnabled()) logger.trace("requestPath = " + requestPath);
         if (config.getPathPrefixAuths() != null) {
@@ -96,11 +97,13 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     } else {
                         logger.error("APIKEY from header " + apiKey.getHeaderName() + " is not matched for path prefix " + apiKey.getPathPrefix());
                         setExchangeStatus(exchange, API_KEY_MISMATCH, apiKey.getHeaderName(), apiKey.getPathPrefix());
+                        if(logger.isDebugEnabled()) logger.debug("ApiKeyHandler.handleRequest ends with an error.");
                         return;
                     }
                 }
             }
         }
+        if(logger.isDebugEnabled()) logger.debug("ApiKeyHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 }

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -117,6 +117,7 @@ public AuditHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("AuditHandler.handleRequest starts.");
         Map<String, Object> auditInfo = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
         Map<String, Object> auditMap = new LinkedHashMap<>();
         final long start = System.currentTimeMillis();
@@ -180,6 +181,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         } else {
             config.getAuditFunc().accept(config.getConfig().getMapper().writeValueAsString(auditMap));
         }
+        if(logger.isDebugEnabled()) logger.debug("AuditHandler.handleRequest ends.");
         next(exchange);
     }
 

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -97,6 +97,7 @@ public BodyHandler(String configName) {
      */
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("BodyHandler.handleRequest starts.");
         // parse the body to map or list if content type is application/json
         String contentType = exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE);
         if (contentType != null) {
@@ -129,9 +130,11 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             } catch (IOException e) {
                 logger.error("IOException: ", e);
                 setExchangeStatus(exchange, CONTENT_TYPE_MISMATCH, contentType);
+                if(logger.isDebugEnabled()) logger.debug("BodyHandler.handleRequest ends with an error.");
                 return;
             }
         }
+        if(logger.isDebugEnabled()) logger.debug("BodyHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -70,7 +70,7 @@ public RequestBodyInterceptor() {
      */
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
-        if(logger.isTraceEnabled()) logger.trace("RequestBodyInterceptor is called.");
+        if(logger.isDebugEnabled()) logger.debug("RequestBodyInterceptor.handleRequest starts.");
         if (this.shouldAttachBody(exchange)) {
             boolean attached = false;
             var existing = (PooledByteBuffer[])exchange.getAttachment(AttachmentConstants.BUFFERED_REQUEST_DATA_KEY);
@@ -103,6 +103,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                     logger.error("Failed to attached the request body to the exchange");
             }
         }
+        if(logger.isDebugEnabled()) logger.debug("RequestBodyInterceptor.handleRequest ends.");
     }
 
     /**

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -71,6 +71,7 @@ public boolean isRequiredContent() {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("ResponseBodyInterceptor.handleRequest starts.");
         if(shouldParseBody(exchange) && getBuffer(exchange) != null) {
             String s = BuffersUtils.toString(getBuffer(exchange), StandardCharsets.UTF_8);
             if(logger.isTraceEnabled()) logger.trace("original response body = " + s);
@@ -80,6 +81,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                 if(logger.isInfoEnabled()) logger.info("Failed to attached the response body to the exchange");
             }
         }
+        if(logger.isDebugEnabled()) logger.debug("ResponseBodyInterceptor.handleRequest ends.");
     }
 
     private boolean shouldParseBody(final HttpServerExchange exchange) {

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -57,6 +57,7 @@ public CorrelationHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("CorrelationHandler.handleRequest starts.");
         // check if the cid is in the request header
         String cId = exchange.getRequestHeaders().getFirst(HttpStringConstants.CORRELATION_ID);
         if(cId == null) {
@@ -74,6 +75,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);
         //logger.debug("Init cId:" + cId);
+        if(logger.isDebugEnabled()) logger.debug("CorrelationHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: cors/src/main/java/com/networknt/cors/CorsHttpHandler.java
Patch:
@@ -63,6 +63,7 @@ public CorsHttpHandler() {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("CorsHttpHandler.handleRequest starts.");
         HeaderMap headers = exchange.getRequestHeaders();
         if (CorsUtil.isCoreRequest(headers)) {
             if (isPreflightedRequest(exchange)) {
@@ -71,6 +72,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             }
             setCorsResponseHeaders(exchange);
         }
+        if(logger.isDebugEnabled()) logger.debug("CorsHttpHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -71,6 +71,7 @@ public PathPrefixServiceHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("PathPrefixServiceHandler.handleRequest starts.");
         String[] serviceEntry = null;
         // if service URL is in the header, we don't need to do the service discovery with serviceId.
         HeaderValues serviceIdHeader = exchange.getRequestHeaders().get(HttpStringConstants.SERVICE_ID);
@@ -91,6 +92,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             auditInfo.put(Constants.ENDPOINT_STRING, serviceEntry[0] + "@" + exchange.getRequestMethod().toString().toLowerCase());
             exchange.putAttachment(AttachmentConstants.AUDIT_INFO, auditInfo);
         }
+        if(logger.isDebugEnabled()) logger.debug("PathPrefixServiceHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: egress-router/src/main/java/com/networknt/router/middleware/PathServiceHandler.java
Patch:
@@ -65,6 +65,7 @@ public PathServiceHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("PathServiceConfig.handleRequest starts.");
         // if service URL is in the header, we don't need to do the service discovery with serviceId.
         HeaderValues serviceIdHeader = exchange.getRequestHeaders().get(HttpStringConstants.SERVICE_ID);
         String serviceId = serviceIdHeader != null ? serviceIdHeader.peekFirst() : null;
@@ -90,6 +91,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 logger.error("could not find auditInfo object in exchange attachment.");
             }
         }
+        if(logger.isDebugEnabled()) logger.debug("PathServiceConfig.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java
Patch:
@@ -36,6 +36,7 @@ public ServiceDictHandler() {
 
 	@Override
 	public void handleRequest(HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("ServiceDictHandler.handleRequest starts.");
         String[] serviceEntry = null;
         HeaderValues serviceIdHeader = exchange.getRequestHeaders().get(HttpStringConstants.SERVICE_ID);
         String serviceId = serviceIdHeader != null ? serviceIdHeader.peekFirst() : null;
@@ -55,6 +56,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             auditInfo.put(Constants.ENDPOINT_STRING, serviceEntry[0]);
             exchange.putAttachment(AttachmentConstants.AUDIT_INFO, auditInfo);
         }
+        if(logger.isDebugEnabled()) logger.debug("ServiceDictHandler.handleRequest ends.");
         Handler.next(exchange, next);
 	}
 

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -63,6 +63,7 @@ public ExceptionHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("ExceptionHandler.handleRequest starts.");
         // dispatch here to make sure that all exceptions will be capture in this handler
         // otherwise, some of the exceptions will be captured in Connectors class in Undertow
         // As we've updated Server.java to redirect the logs to slf4j but still it make sense
@@ -73,6 +74,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         }
 
         try {
+            if(logger.isDebugEnabled()) logger.debug("ExceptionHandler.handleRequest ends.");
             Handler.next(exchange, next);
         } catch (Throwable e) {
             logger.error("Exception:", e);

File: header/src/main/java/com/networknt/header/HeaderHandler.java
Patch:
@@ -69,6 +69,7 @@ public HeaderHandler(HeaderConfig cfg) {
      */
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("HeaderHandler.handleRequest starts.");
         // handle all request header
         List<String> requestHeaderRemove = config.getRequestRemoveList();
         if(requestHeaderRemove != null) {
@@ -123,7 +124,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 }
             }
         }
-
+        if(logger.isDebugEnabled()) logger.debug("HeaderHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -100,12 +100,14 @@ public LightProxyHandler() {
 
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("LightProxyHandler.handleRequest starts.");
         if(config.isForwardJwtClaims()) {
             HeaderMap headerValues = httpServerExchange.getRequestHeaders();
             JwtClaims jwtClaims = extractClaimsFromJwt(headerValues);
             httpServerExchange.getRequestHeaders().put(HttpString.tryFromString(CLAIMS_KEY), new ObjectMapper().writeValueAsString(jwtClaims.getClaimsMap()));
         }
         proxyHandler.handleRequest(httpServerExchange);
+        if(logger.isDebugEnabled()) logger.debug("LightProxyHandler.handleRequest ends.");
     }
 
     /**

File: ingress-proxy/src/main/java/com/networknt/proxy/ProxyHealthGetHandler.java
Patch:
@@ -37,6 +37,7 @@ public class ProxyHealthGetHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("ProxyHealthGetHandler.handleRequest starts.");
         String result = HEALTH_RESULT_OK;
         // if backend is not connected, then error. Check the configuration to see if it is enabled.
         if(config.isDownstreamEnabled()) {
@@ -45,9 +46,11 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         // for security reason, we don't output the details about the error. Users can check the log for the failure.
         if(HEALTH_RESULT_ERROR == result) {
             exchange.setStatusCode(400);
+            if(logger.isDebugEnabled()) logger.debug("ProxyHealthGetHandler.handleRequest ends with an error.");
             exchange.getResponseSender().send(HEALTH_RESULT_ERROR);
         } else {
             exchange.setStatusCode(200);
+            if(logger.isDebugEnabled()) logger.debug("ProxyHealthGetHandler.handleRequest ends.");
             exchange.getResponseSender().send(HEALTH_RESULT_OK);
         }
     }

File: ingress-proxy/src/main/java/com/networknt/proxy/ProxyServerInfoHandler.java
Patch:
@@ -38,6 +38,7 @@ public ProxyServerInfoHandler() {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("ProxyServerInfoHandler.handleRequest starts.");
         Map<String, Object> result = new HashMap<>();
         Map<String, Object> proxyInfo = ServerInfoGetHandler.getServerInfo(exchange);
         result.put(PROXY_INFO_KEY, proxyInfo);
@@ -55,6 +56,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             }
             result.put(url, serverInfo);
         }
+        if(logger.isDebugEnabled()) logger.debug("ProxyServerInfoHandler.handleRequest ends.");
         exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(result));
 
     }

File: ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistHandler.java
Patch:
@@ -48,12 +48,14 @@ public WhitelistHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("WhitelistHandler.handleRequest starts.");
         InetSocketAddress peer = exchange.getSourceAddress();
         String endpoint = exchange.getRelativePath() + "@" + exchange.getRequestMethod().toString().toLowerCase();
         if (!isAllowed(peer.getAddress(), endpoint)) {
             setExchangeStatus(exchange, INVALID_IP_FOR_PATH, peer.toString(), endpoint);
             return;
         }
+        if(logger.isDebugEnabled()) logger.debug("WhitelistHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -85,6 +85,7 @@ public MiddlewareHandler setNext(final HttpHandler next) {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("MetricsHandler.handleRequest starts.");
         if(firstTime) {
             commonTags.put("api", Server.getServerConfig().getServiceId());
             commonTags.put("env", Server.getServerConfig().getEnvironment());
@@ -137,7 +138,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             }
             nextListener.proceed();
         });
-        
+        if(logger.isDebugEnabled()) logger.debug("MetricsHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -67,10 +67,10 @@ public LimitHandler(LimitConfig cfg) throws Exception{
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if(logger.isDebugEnabled()) logger.debug("LimitHandler.handleRequest starts.");
         RateLimitResponse rateLimitResponse = rateLimiter.handleRequest(exchange, config.getKey());
-
-
         if (rateLimitResponse.allow) {
+            if(logger.isDebugEnabled()) logger.debug("LimitHandler.handleRequest ends.");
             Handler.next(exchange, next);
         } else {
             exchange.getResponseHeaders().add(new HttpString(Constants.RATELIMIT_LIMIT), rateLimitResponse.getHeaders().get(Constants.RATELIMIT_LIMIT));
@@ -79,6 +79,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
             exchange.getResponseHeaders().add(new HttpString("Content-Type"), "application/json");
             exchange.setStatusCode(config.getErrorCode()==0 ? HttpStatus.TOO_MANY_REQUESTS.value():config.getErrorCode());
+            if(logger.isDebugEnabled()) logger.debug("LimitHandler.handleRequest ends with an error.");
             exchange.getResponseSender().send(mapper.writeValueAsString(rateLimitResponse));
         }
     }

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -74,7 +74,7 @@ public void reload() {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
-        if(logger.isTraceEnabled()) logger.trace("RequestTransformerHandler.handleRequest is called.");
+        if(logger.isDebugEnabled()) logger.trace("RequestTransformerInterceptor.handleRequest starts.");
         String requestPath = exchange.getRequestPath();
         if (config.getAppliedPathPrefixes() != null && config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
             if(engine == null) {
@@ -210,6 +210,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                 }
             }
         }
+        if(logger.isDebugEnabled()) logger.trace("RequestTransformerInterceptor.handleRequest ends.");
     }
 
     @Override

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -63,6 +63,7 @@ public SanitizerHandler(String configName) {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if (logger.isDebugEnabled()) logger.trace("SanitizerHandler.handleRequest starts.");
         String method = exchange.getRequestMethod().toString();
         if (config.isHeaderEnabled()) {
             HeaderMap headerMap = exchange.getRequestHeaders();
@@ -93,6 +94,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 }
             }
         }
+        if (logger.isDebugEnabled()) logger.trace("SanitizerHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -60,11 +60,13 @@ public TraceabilityHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        if (logger.isDebugEnabled()) logger.trace("TraceabilityHandler.handleRequest starts.");
         String tid = exchange.getRequestHeaders().getFirst(HttpStringConstants.TRACEABILITY_ID);
         if(tid != null) {
             exchange.getResponseHeaders().put(HttpStringConstants.TRACEABILITY_ID, tid);
             MDC.put(TID, tid);
         }
+        if (logger.isDebugEnabled()) logger.trace("TraceabilityHandler.handleRequest ends.");
         Handler.next(exchange, next);
     }
 

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -102,7 +102,7 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(LimitHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(LimitConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(LimitHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
@@ -114,6 +114,6 @@ public void reload() {
             logger.error("Failed to recreate RateLimiter with reloaded config.", e);
         }
         // after reload, we need to update the config in the module registry to ensure that server info returns the latest configuration.
-        ModuleRegistry.registerModule(LimitHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(LimitConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(LimitHandler.class.getName(), config.getMappedConfig(), null);
     }
 }

File: header/src/main/java/com/networknt/header/HeaderConfig.java
Patch:
@@ -113,6 +113,9 @@ public void setResponseUpdateMap(Map<String, Object> responseUpdateMap) {
         this.responseUpdateMap = responseUpdateMap;
     }
 
+    public Map<String, Object> getMappedConfig() {
+        return mappedConfig;
+    }
     private void setConfigList() {
         if (mappedConfig.get(REQUEST) != null) {
             Map<String, Object> requestMap = (Map<String, Object>)mappedConfig.get(REQUEST);

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -162,7 +162,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     return;
                 } else if(config.getPathPrefixAuth().get(key).equals(config.ANONYMOUS)) {
                     // no authorization header for this type of the request.
-                    invokeApi(exchange, (String)config.getBasicAuth().get(config.SERVICE_HOST), requestPath, null);
+                    invokeApi(exchange, (String)config.getAnonymous().get(config.SERVICE_HOST), requestPath, null);
                     return;
                 } else if(config.getPathPrefixAuth().get(key).equals(config.MICROSOFT)) {
                     // microsoft access token for authentication.

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -119,5 +119,6 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(PathPrefixServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathServiceHandler.java
Patch:
@@ -57,7 +57,7 @@
 public class PathServiceHandler implements MiddlewareHandler {
     static Logger logger = LoggerFactory.getLogger(PathServiceHandler.class);
     private volatile HttpHandler next;
-    private PathServiceConfig config;
+    private static PathServiceConfig config;
     public PathServiceHandler() {
         logger.info("PathServiceHandler is constructed");
         config = PathServiceConfig.load();
@@ -112,11 +112,12 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(TokenHandler.class.getName(), config.getMappedConfig(), null);
+        ModuleRegistry.registerModule(PathServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(PathServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java
Patch:
@@ -27,7 +27,7 @@
 public class ServiceDictHandler implements MiddlewareHandler {
 	private static final Logger logger = LoggerFactory.getLogger(ServiceDictHandler.class);
     protected volatile HttpHandler next;
-    protected ServiceDictConfig config;
+    protected static ServiceDictConfig config;
 
     public ServiceDictHandler() {
         logger.info("ServiceDictHandler is constructed");
@@ -83,5 +83,6 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(ServiceDictHandler.class.getName(), config.getMappedConfig(), null);
     }
 }

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -74,7 +74,7 @@
 public class TokenHandler implements MiddlewareHandler {
     private static final String HANDLER_DEPENDENCY_ERROR = "ERR10074";
 
-    private TokenConfig config;
+    private static TokenConfig config;
     static Logger logger = LoggerFactory.getLogger(TokenHandler.class);
     protected volatile HttpHandler next;
     // Cached jwt token for this handler on behalf of a client by serviceId as the key
@@ -189,5 +189,6 @@ public void register() {
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(TokenHandler.class.getName(), config.getMappedConfig(), null);
     }
 }

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceConfig.java
Patch:
@@ -50,6 +50,9 @@ void reload() {
         setUrlRewriteRules();
         setConfigList();
     }
+    public Map<String, Object> getMappedConfig() {
+        return mappedConfig;
+    }
 
     public boolean isEnabled() {
         return enabled;

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -44,7 +44,7 @@ public class ExternalServiceHandler implements MiddlewareHandler {
     private static final String METHOD_NOT_ALLOWED  = "ERR10008";
 
     private volatile HttpHandler next;
-    private ExternalServiceConfig config;
+    private static ExternalServiceConfig config;
     private HttpClient client;
 
     public ExternalServiceHandler() {
@@ -72,12 +72,13 @@ public boolean isEnabled() {
 
     @Override
     public void register() {
-        ModuleRegistry.registerModule(ExternalServiceConfig.class.getName(), Config.getInstance().getJsonMapConfigNoCache(ExternalServiceConfig.CONFIG_NAME), null);
+        ModuleRegistry.registerModule(ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override
     public void reload() {
         config.reload();
+        ModuleRegistry.registerModule(ExternalServiceHandler.class.getName(), config.getMappedConfig(), null);
     }
 
     @Override

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -113,5 +113,7 @@ public void reload() {
         } catch (Exception e) {
             logger.error("Failed to recreate RateLimiter with reloaded config.", e);
         }
+        // after reload, we need to update the config in the module registry to ensure that server info returns the latest configuration.
+        ModuleRegistry.registerModule(LimitHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(LimitConfig.CONFIG_NAME), null);
     }
 }

File: utility/src/main/java/com/networknt/utility/ModuleRegistry.java
Patch:
@@ -39,7 +39,7 @@ public static void registerModule(String moduleName, Map<String, Object> config,
             }
             registry.put(moduleName, config);
         } else {
-            // we don't have any module without config but we cannot guarantee user created modules
+            // we don't have any module without config, but we cannot guarantee user created modules
             registry.put(moduleName, new HashMap<String, Object>());
         }
     }

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -62,7 +62,7 @@
 public class PathPrefixServiceHandler implements MiddlewareHandler {
     static Logger logger = LoggerFactory.getLogger(PathPrefixServiceHandler.class);
     protected volatile HttpHandler next;
-    protected PathPrefixServiceConfig config;
+    protected static PathPrefixServiceConfig config;
 
     public PathPrefixServiceHandler() {
         logger.info("PathServiceHandler is constructed");

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -40,7 +40,7 @@ public class LimitHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(LimitHandler.class);
 
     private volatile HttpHandler next;
-    private  RateLimiter rateLimiter;
+    private static RateLimiter rateLimiter;
     private LimitConfig config;
     private static final ObjectMapper mapper = Config.getInstance().getMapper();
 

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -135,8 +135,8 @@ private static Object getValue(String content) {
             // Use key of injectionPattern to get value from both environment variables and "values.yaml"
             String envValString = System.getenv(convertEnvVars(injectionPattern.getKey()));
             Object envValue = decryptEnvValue(decryptor, envValString);
-
-            Map<String, Object> valueMap = Config.getInstance().getDefaultJsonMapConfig(CENTRALIZED_MANAGEMENT);
+            // change to no cache method to support config-reload.
+            Map<String, Object> valueMap = Config.getInstance().getDefaultJsonMapConfigNoCache(CENTRALIZED_MANAGEMENT);
             Object fileValue = (valueMap != null) ? valueMap.get(injectionPattern.getKey()) : null;
             // Return different value from different sources based on injection order defined before
             if ((INJECTION_ORDER_CODE.equals("2") && envValue != null) || (INJECTION_ORDER_CODE.equals("1") && fileValue == null)) {

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -64,8 +64,6 @@ public class PathPrefixServiceHandler implements MiddlewareHandler {
     protected volatile HttpHandler next;
     protected PathPrefixServiceConfig config;
 
-    static final String STATUS_INVALID_REQUEST_PATH = "ERR10007";
-
     public PathPrefixServiceHandler() {
         logger.info("PathServiceHandler is constructed");
         config = PathPrefixServiceConfig.load();
@@ -81,7 +79,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             String requestPath = exchange.getRequestURI();
             serviceEntry = HandlerUtils.findServiceEntry(HandlerUtils.normalisePath(requestPath), config.getMapping());
             if(serviceEntry != null) {
-                if(logger.isTraceEnabled()) logger.trace("serviceEntry found and service_id is set in the header.");
+                if(logger.isTraceEnabled()) logger.trace("serviceEntry found and header is set for service_id = " + serviceEntry[1]);
                 exchange.getRequestHeaders().put(HttpStringConstants.SERVICE_ID, serviceEntry[1]);
             }
         }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -124,6 +124,7 @@ public static void init() {
             masks.add("keystorePass");
             masks.add("keyPass");
             masks.add("truststorePass");
+            masks.add("bootstrapStorePass");
             ModuleRegistry.registerModule(Server.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SERVER_CONFIG_NAME), masks);
 
             // start the server

File: ingress-proxy/src/test/java/com/networknt/proxy/salesforce/SalesforceConfigTest.java
Patch:
@@ -10,7 +10,7 @@ public class SalesforceConfigTest {
     @Test
     public void testConfigLoad() {
         SalesforceConfig config = SalesforceConfig.load();
-        Assert.assertEquals(2, config.getPathPrefixAuths().size());
+        Assert.assertEquals(3, config.getPathPrefixAuths().size());
         List<PathPrefixAuth> pathPrefixAuthList = config.getPathPrefixAuths();
         Assert.assertTrue(pathPrefixAuthList.get(0).getAuthAudience() != null);
         Assert.assertTrue(pathPrefixAuthList.get(0).getAuthIssuer() != null);

File: server/src/main/java/com/networknt/server/handler/ServerShutdownHandler.java
Patch:
@@ -13,8 +13,8 @@
 import io.undertow.server.HttpServerExchange;
 
 /**
- * Light-4j handler to shutdown/restart the service.
- * 
+ * Light-4j handler to shut down and force restart the service deployed to the Kubernetes cluster
+ * Or running as a service in Windows Server or Linux.
  *
  */
 public class ServerShutdownHandler implements LightHttpHandler {

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -236,8 +236,7 @@ private ConcurrentHashMap<String, List<URL>> lookupServiceUpdate(String protocol
                 logger.info(serviceName + " no need update, lastIndex:" + lastConsulIndexId);
             }
         } else {
-            serviceUrls.put(serviceName, new ArrayList<>());
-            logger.info("no response for service: {}, set urls to null", serviceName);
+            logger.info("Consul UNRESPONSIVE - Service {}'s local Service Registry Cache potentially out of date", serviceName);
         }
         return serviceUrls;
     }

File: egress-router/src/main/java/com/networknt/router/OAuthServerConfig.java
Patch:
@@ -13,7 +13,7 @@
 
 public class OAuthServerConfig {
     private static final Logger logger = LoggerFactory.getLogger(OAuthServerConfig.class);
-    public static final String CONFIG_NAME = "oauth-server";
+    public static final String CONFIG_NAME = "oauthServer";
 
     private static final String ENABLED = "enabled";
     private static final String CLIENT_CREDENTIALS = "client_credentials";

File: egress-router/src/main/java/com/networknt/router/OAuthServerHandler.java
Patch:
@@ -32,7 +32,7 @@ public class OAuthServerHandler implements LightHttpHandler {
     private static final String INVALID_BASIC_CREDENTIALS = "ERR12004";
 
     OAuthServerConfig config;
-    public void OAuthServerHandler() {
+    public OAuthServerHandler() {
         config = OAuthServerConfig.load();
         if(logger.isInfoEnabled()) logger.info("OAuthServerHandler is loaded.");
     }

File: api-key/src/test/java/com/networknt/apikey/ApiKeyJsonConfigTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.apikey;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -12,6 +13,7 @@ public class ApiKeyJsonConfigTest {
     static final ApiKeyConfig config = ApiKeyConfig.load("apikey-json");
 
     @Test
+    @Ignore
     public void testDecryption() {
         logger.debug("apiKey for /test2 = " + config.getPathPrefixAuths().get(1).getApiKey());
         Assert.assertEquals("password", config.getPathPrefixAuths().get(1).getApiKey());

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -45,7 +45,7 @@
  */
 public class BasicAuthHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(BasicAuthHandler.class);
-    static BasicAuthConfig config = BasicAuthConfig.load();
+    BasicAuthConfig config;
 
     static final String MISSING_AUTH_TOKEN = "ERR10002";
     static final String INVALID_BASIC_HEADER = "ERR10046";
@@ -57,6 +57,7 @@ public class BasicAuthHandler implements MiddlewareHandler {
     private volatile HttpHandler next;
 
     public BasicAuthHandler() {
+        config = BasicAuthConfig.load();
         if(logger.isInfoEnabled()) logger.info("BasicAuthHandler is loaded.");
     }
 
@@ -191,7 +192,7 @@ public void register() {
         // As passwords are in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("password");
-        ModuleRegistry.registerModule(BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(BasicAuthHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(BasicAuthConfig.CONFIG_NAME), masks);
     }
 
     @Override

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -91,7 +91,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if(logger.isTraceEnabled()) logger.trace("TokenHandler.handleRequest is called.");
         String requestPath = exchange.getRequestPath();
         // this handler will only work with a list of applied path prefixes in the token.yml config file.
-        if (config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
+        if (config.getAppliedPathPrefixes() != null && config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
             HeaderValues headerValues = exchange.getRequestHeaders().get(HttpStringConstants.SERVICE_ID);
             String serviceId = null;
             if(headerValues != null) serviceId = headerValues.getFirst();

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -76,7 +76,7 @@ public void reload() {
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         if(logger.isTraceEnabled()) logger.trace("RequestTransformerHandler.handleRequest is called.");
         String requestPath = exchange.getRequestPath();
-        if (config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
+        if (config.getAppliedPathPrefixes() != null && config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
             if(engine == null) {
                 engine = new RuleEngine(RuleLoaderStartupHook.rules, null);
             }

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -78,7 +78,7 @@ public void reload() {
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         if(logger.isTraceEnabled()) logger.trace("ResponseTransformerHandler.handleRequest is called.");
         String requestPath = exchange.getRequestPath();
-        if (config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
+        if (config.getAppliedPathPrefixes() != null && config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
             if(engine == null) {
                 engine = new RuleEngine(RuleLoaderStartupHook.rules, null);
             }

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -135,7 +135,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         // forceIdentityEncodingForInterceptors(exchange);
         // if any of the interceptors send response, don't call other middleware handlers in the chain.
         if(!exchange.isResponseStarted()) {
-            if(logger.isTraceEnabled()) logger.trace("response is not started, calling next handler = " + next.getClass().getName());
+            if(logger.isTraceEnabled()) logger.trace("response is not started, calling next handler.");
             Handler.next(exchange, next);
         } else {
             if(logger.isTraceEnabled()) logger.trace("response is started already, do not call next handler in the chain.");

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -125,6 +125,9 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
                 throw e;
             }
 
+        } else {
+            // no need to inject the content for the body. just call the interceptors here.
+            this.invokeInterceptors(httpServerExchange);
         }
         Handler.next(httpServerExchange, next);
     }

File: request-transformer/src/main/java/com/networknt/reqtrans/RequestTransformerInterceptor.java
Patch:
@@ -155,7 +155,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                                         String requestURI = (String)result.get("requestURI");
                                         exchange.setRequestURI(requestURI);
                                         break;
-                                    case "requestHeader":
+                                    case "requestHeaders":
                                         // if requestHeaders object is null, ignore it.
                                         Map<String, Object> requestHeaders = (Map)result.get("requestHeaders");
                                         if(requestHeaders != null) {

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.networknt.config.Config;
-import com.networknt.config.JsonMapper;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.httpstring.AttachmentConstants;
@@ -328,7 +327,7 @@ private void auditRequestCookies(HttpServerExchange exchange, Map<String, Object
                 String mask = config.isMask() ? Mask.maskRegex(value, REQUEST_COOKIES_KEY, name) : value;
                 res.put(name, mask);
             }
-            auditMap.put(REQUEST_COOKIES_KEY, JsonMapper.toJson(res));
+            auditMap.put(REQUEST_COOKIES_KEY, res.toString());
         }
     }
 

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -17,13 +17,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 
 import static com.networknt.body.BodyHandler.REQUEST_BODY_STRING;
-import static com.networknt.body.BodyHandler.REQUEST_BODY;
 
 /**
  * Note: With RequestInterceptorInjectionHandler implemented, this handler is changed from a
@@ -59,7 +57,7 @@ public class RequestBodyInterceptor implements RequestInterceptor {
     private volatile HttpHandler next;
 
     public RequestBodyInterceptor() {
-        if (logger.isInfoEnabled()) logger.info("ProxyBodyHandler is loaded.");
+        if (logger.isInfoEnabled()) logger.info("RequestBodyInterceptor is loaded.");
         config = BodyConfig.load();
     }
 

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -71,7 +71,7 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
     }
 
     public void reload() {
-        config = RouterConfig.load();
+        config.reload();
     }
 
 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -123,6 +123,6 @@ public void register() {
 
     @Override
     public void reload() {
-        config.reload();;
+        config.reload();
     }
 }

File: egress-router/src/main/java/io/undertow/server/handlers/proxy/LoadBalancingRouterProxyClient.java
Patch:
@@ -21,7 +21,6 @@
 import com.networknt.client.ClientConfig;
 import com.networknt.client.ServerExchangeCarrier;
 import com.networknt.cluster.Cluster;
-import com.networknt.config.Config;
 import com.networknt.config.ConfigException;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.httpstring.HttpStringConstants;
@@ -174,7 +173,6 @@ public synchronized void addHosts(final String serviceId, final String envTag) {
         hosts.remove(key);
         Host[] newHosts = new Host[uris.size()];
         for (int i = 0; i < uris.size(); i++) {
-            // TODO convert the uris to IP address from host if preResolveFQDN2IP is true.
             Host h = null;
             if (config.isPreResolveFQDN2IP()) {
                 h = new Host(serviceId, bindAddress, NetUtils.resolveUriHost2Address(uris.get(i)), ssl, options);

File: handler/src/main/java/com/networknt/handler/RequestInterceptorInjectionHandler.java
Patch:
@@ -40,13 +40,13 @@ public class RequestInterceptorInjectionHandler implements MiddlewareHandler {
 
     public RequestInterceptorInjectionHandler() {
         config = RequestInjectionConfig.load();
-        logger.info("SourceConduitInjectorHandler is loaded!");
+        logger.info("RequestInterceptorInjectionHandler is loaded!");
         interceptors = SingletonServiceFactory.getBeans(RequestInterceptor.class);
     }
 
     public RequestInterceptorInjectionHandler(RequestInjectionConfig cfg) {
         config = cfg;
-        logger.info("SourceConduitInjectorHandler is loaded!");
+        logger.info("RequestInterceptorInjectionHandler is loaded!");
         interceptors = SingletonServiceFactory.getBeans(RequestInterceptor.class);
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -54,11 +54,12 @@ public class LightProxyHandler implements HttpHandler {
     private static final int LONG_CLOCK_SKEW = 1000000;
 
     static final Logger logger = LoggerFactory.getLogger(LightProxyHandler.class);
-    static ProxyConfig config = ProxyConfig.load();
+    ProxyConfig config;
 
     ProxyHandler proxyHandler;
 
     public LightProxyHandler() {
+        config = ProxyConfig.load();
         List<String> hosts = new ArrayList<>(Arrays.asList(config.getHosts().split(",")));
         if(logger.isTraceEnabled()) logger.trace("hosts = " + JsonMapper.toJson(hosts));
         LoadBalancingProxyClient loadBalancer = new LoadBalancingProxyClient()

File: ingress-proxy/src/main/java/com/networknt/proxy/ProxyConfig.java
Patch:
@@ -50,11 +50,11 @@ public class ProxyConfig {
     private Config config;
     private Map<String, Object> mappedConfig;
 
-    public ProxyConfig() {
+    private ProxyConfig() {
         this(CONFIG_NAME);
     }
 
-    public ProxyConfig(String configName) {
+    private ProxyConfig(String configName) {
         config = Config.getInstance();
         mappedConfig = config.getJsonMapConfigNoCache(configName);
         setConfigData();

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -37,11 +37,11 @@
  * @author Steve Hu
  */
 public class LimitHandler implements MiddlewareHandler {
-    public static LimitConfig config;
     static final Logger logger = LoggerFactory.getLogger(LimitHandler.class);
 
     private volatile HttpHandler next;
     private  RateLimiter rateLimiter;
+    private LimitConfig config;
     private static final ObjectMapper mapper = Config.getInstance().getMapper();
 
 
@@ -107,7 +107,6 @@ public void register() {
 
     @Override
     public void reload() {
-        config = LimitConfig.load();
+        config.reload();
     }
-
 }

File: security/src/main/java/com/networknt/security/SecurityConfig.java
Patch:
@@ -222,7 +222,7 @@ private void setConfigData() {
     }
 
     private void setSkipPathPrefixes() {
-        if (mappedConfig.get(SKIP_PATH_PREFIXES) != null) {
+        if (mappedConfig != null && mappedConfig.get(SKIP_PATH_PREFIXES) != null) {
             Object object = mappedConfig.get(SKIP_PATH_PREFIXES);
             skipPathPrefixes = new ArrayList<>();
             if(object instanceof String) {

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceConfig.java
Patch:
@@ -47,6 +47,7 @@ protected ExternalServiceConfig(String configName) {
     void reload() {
         mappedConfig = config.getJsonMapConfigNoCache(CONFIG_NAME);
         setConfigData();
+        setUrlRewriteRules();
         setConfigList();
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasConfig.java
Patch:
@@ -94,6 +94,7 @@ public static MrasConfig load(String configName) {
     void reload() {
         mappedConfig = config.getJsonMapConfigNoCache(CONFIG_NAME);
         setConfigData();
+        setUrlRewriteRules();
         setConfigMap();
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceConfig.java
Patch:
@@ -71,6 +71,7 @@ public static SalesforceConfig load(String configName) {
     void reload() {
         mappedConfig = config.getJsonMapConfigNoCache(CONFIG_NAME);
         setConfigData();
+        setUrlRewriteRules();
         setConfigList();
     }
 

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -71,7 +71,7 @@ public boolean isRequiredContent() {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
-        if(shouldParseBody(exchange)) {
+        if(shouldParseBody(exchange) && getBuffer(exchange) != null) {
             String s = BuffersUtils.toString(getBuffer(exchange), StandardCharsets.UTF_8);
             if(logger.isTraceEnabled()) logger.trace("original response body = " + s);
             // put the response body in the attachment for auditing and validation.

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -79,7 +79,7 @@ public void reload() {
     }
 
     /**
-     * if the ModificableContentSinkConduit is set, set the Accept-Encoding
+     * if the ModifiableContentSinkConduit is set, set the Accept-Encoding
      * header to identity this is required to avoid response interceptors
      * dealing with compressed data
      *

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -171,8 +171,10 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                             if(config.isEnableHttp2()) clientBuilder.version(HttpClient.Version.HTTP_2);
                             // this a workaround to bypass the hostname verification in jdk11 http client.
                             Map<String, Object> tlsMap = (Map<String, Object>)ClientConfig.get().getMappedConfig().get(Http2Client.TLS);
+                            final Properties props = System.getProperties();
+                            props.setProperty("jdk.httpclient.allowRestrictedHeaders", "Host");
+                            props.setProperty("jdk.httpclient.allowRestrictedHeaders", "Connection");
                             if(tlsMap != null && !Boolean.TRUE.equals(tlsMap.get(TLSConfig.VERIFY_HOSTNAME))) {
-                                final Properties props = System.getProperties();
                                 props.setProperty("jdk.internal.httpclient.disableHostnameVerification", Boolean.TRUE.toString());
                             }
                             client = clientBuilder.build();

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -87,7 +87,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 String contentType = exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE);
                 if(contentType.startsWith("application/json")) {
                     attached = this.attachJsonBody(exchange, completeBody.toString());
-                } else if(contentType.startsWith("text")) { // include text/plain and text/xml etc.
+                } else if(contentType.startsWith("text") || contentType.startsWith("application/xml")) { // include text/plain and text/xml etc.
                     if (config.isCacheRequestBody()) {
                         exchange.putAttachment(AttachmentConstants.REQUEST_BODY_STRING, completeBody.toString());
                         attached = true;

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -125,6 +125,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
 
             if (interceptors != null && Arrays.stream(interceptors).anyMatch(ri -> ri.isRequiredContent())) {
                 var mcsc = new ModifiableContentSinkConduit(factory.create(), cexchange);
+                if(logger.isTraceEnabled()) logger.trace("created a ModifiableContentSinkConduit instance " + mcsc);
                 cexchange.putAttachment(MCSC_KEY, mcsc);
                 return mcsc;
             } else {

File: response-transformer/src/main/java/com/networknt/restrans/ResponseTransformerInterceptor.java
Patch:
@@ -75,7 +75,6 @@ public void reload() {
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         if(logger.isTraceEnabled()) logger.trace("ResponseTransformerHandler.handleRequest is called.");
-        exchange.startBlocking();
         String requestPath = exchange.getRequestPath();
         if (config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s))) {
             if(engine == null) {

File: ingress-proxy/src/main/java/com/networknt/proxy/PathPrefixAuth.java
Patch:
@@ -1,4 +1,4 @@
-package com.networknt.proxy.salesforce;
+package com.networknt.proxy;
 
 /**
  * This is an object that contains all the authentication info for each path prefix in the pathPrefixAuth config

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceConfig.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.networknt.config.Config;
 import com.networknt.config.ConfigException;
+import com.networknt.proxy.PathPrefixAuth;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: ingress-proxy/src/test/java/com/networknt/proxy/salesforce/SalesforceConfigTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.proxy.salesforce;
 
+import com.networknt.proxy.PathPrefixAuth;
 import org.junit.Assert;
 import org.junit.Test;
 

File: audit/src/main/java/com/networknt/audit/AuditConfig.java
Patch:
@@ -201,7 +201,6 @@ private void setConfigData() {
         if(object != null && (Boolean) object) {
             responseTime = true;
         }
-
         // audit on error response flag
         object = getMappedConfig().get(AUDIT_ON_ERROR);
         if(object != null && (Boolean) object) {
@@ -213,7 +212,7 @@ private void setConfigData() {
         }
         object = getMappedConfig().get(ENABLED);
         if(object != null && (Boolean) object) {
-
+            enabled = true;
         }
         timestampFormat = (String)getMappedConfig().get(TIMESTAMP_FORMAT);
     }

File: handler/src/main/java/com/networknt/handler/ResponseInterceptorInjectionHandler.java
Patch:
@@ -133,7 +133,8 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         });
 
         forceIdentityEncodingForInterceptors(exchange);
-        Handler.next(exchange, next);
+        // if any of the interceptors send response, don't call other middleware handlers in the chain.
+        if(!exchange.isResponseStarted()) Handler.next(exchange, next);
     }
 
 }

File: handler/src/main/java/com/networknt/handler/ProxyHandler.java
Patch:
@@ -793,8 +793,10 @@ public void handleEvent(StreamSinkChannel channel) {
                     channel.shutdownWrites();
                 }
             } catch (IOException e) {
+                logger.error("IOException: ", e);
                 handleFailure(exchange, proxyClientHandler, idempotentPredicate, e);
             } catch (Exception e) {
+                logger.error("Exception: ", e);
                 handleFailure(exchange, proxyClientHandler, idempotentPredicate, new IOException(e));
             }
 

File: http-string/src/main/java/com/networknt/httpstring/ContentType.java
Patch:
@@ -16,10 +16,8 @@
 
 package com.networknt.httpstring;
 
-import java.io.Serializable;
-
 /**
- * a enum for http Content-Type header
+ * an enum for http Content-Type header
  *
  */
 public enum ContentType {

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -12,6 +12,7 @@
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.handler.config.UrlRewriteRule;
+import com.networknt.httpstring.ContentType;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;
 import com.networknt.monad.Success;
@@ -198,6 +199,7 @@ private void invokeApi(HttpServerExchange exchange, String serviceHost, String r
         String method = exchange.getRequestMethod().toString();
         String queryString = exchange.getQueryString();
         String contentType = exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE);
+        if(contentType == null) contentType = ContentType.APPLICATION_JSON.value();
         if(logger.isTraceEnabled()) logger.trace("Access MRAS API with method = " + method + " requestHost = " + serviceHost + " queryString = " + queryString + " contentType = " + contentType);
         HttpRequest request = null;
         if(method.equalsIgnoreCase("GET")) {

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -37,6 +37,7 @@
 
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -58,7 +59,7 @@ public class LightProxyHandler implements HttpHandler {
     ProxyHandler proxyHandler;
 
     public LightProxyHandler() {
-        List<String> hosts = Arrays.asList(config.getHosts().split(","));
+        List<String> hosts = new ArrayList<>(Arrays.asList(config.getHosts().split(",")));
         if(logger.isTraceEnabled()) logger.trace("hosts = " + JsonMapper.toJson(hosts));
         LoadBalancingProxyClient loadBalancer = new LoadBalancingProxyClient()
                 .setConnectionsPerThread(config.getConnectionsPerThread());

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -88,7 +88,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     private boolean shouldParseBody(final HttpServerExchange exchange) {
         String requestPath = exchange.getRequestPath();
         boolean isPathConfigured = config.getAppliedPathPrefixes() == null ? true : config.getAppliedPathPrefixes().stream().anyMatch(s -> requestPath.startsWith(s));
-        return isPathConfigured &&
+        return !exchange.isResponseStarted() && isPathConfigured &&
                 exchange.getResponseHeaders().getFirst(Headers.CONTENT_TYPE) != null &&
                 exchange.getResponseHeaders().getFirst(Headers.CONTENT_TYPE).startsWith("application/json");
     }

File: body/src/test/java/com/networknt/body/RequestBodyInterceptorTest.java
Patch:
@@ -369,6 +369,7 @@ public void run() {
     }
 
     @Test
+    @Ignore
     public void testPostJsonMapWithoutContentTypeHeader() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         final Http2Client client = Http2Client.getInstance();
@@ -402,6 +403,7 @@ public void run() {
     }
 
     @Test
+    @Ignore
     public void testPostFormWithoutContentTypeHeader() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         final Http2Client client = Http2Client.getInstance();

File: body/src/main/java/com/networknt/body/RequestBodyInterceptor.java
Patch:
@@ -98,7 +98,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 if(logger.isInfoEnabled()) logger.info("Failed to attached the request body to the exchange");
             }
         }
-        Handler.next(exchange, next);
+        // as an interceptor, we don't need to call the next handler in the chain.
+        // Handler.next(exchange, next);
     }
 
     /**

File: body/src/main/java/com/networknt/body/ResponseBodyInterceptor.java
Patch:
@@ -81,7 +81,8 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                 if(logger.isInfoEnabled()) logger.info("Failed to attached the response body to the exchange");
             }
         }
-        Handler.next(exchange, next);
+        // as an interceptor, we don't need to call the next handler in the chain.
+        // Handler.next(exchange, next);
     }
 
     private boolean shouldParseBody(final HttpServerExchange exchange) {

File: handler/src/main/java/com/networknt/handler/conduit/ModifiableContentSinkConduit.java
Patch:
@@ -41,7 +41,7 @@ public ModifiableContentSinkConduit(StreamSinkConduit next, HttpServerExchange e
         super(next);
         this.exchange = exchange;
         // load the interceptors from the service.yml
-        interceptors = SingletonServiceFactory.getBeans(ResponseInterceptor.class);
+        this.interceptors = SingletonServiceFactory.getBeans(ResponseInterceptor.class);
         resetBufferPool(exchange);
     }
 
@@ -101,11 +101,11 @@ public long writeFinal(ByteBuffer[] srcs, int offset, int length) throws IOExcep
 
     @Override
     public void terminateWrites() throws IOException {
-        logger.info("terminating writes");
+        if(logger.isTraceEnabled()) logger.trace("terminating writes with interceptors length = " + (this.interceptors == null ? 0: this.interceptors.length));
         try {
             if (this.interceptors.length > 0) {
                 // iterate all interceptor handlers.
-                for (ResponseInterceptor interceptor : interceptors) {
+                for (ResponseInterceptor interceptor : this.interceptors) {
                     if (logger.isDebugEnabled()) logger.debug("Executing interceptor " + interceptor.getClass());
                     interceptor.handleRequest(exchange);
                 }

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -235,7 +235,7 @@ private void invokeApi(HttpServerExchange exchange, String serviceHost, String a
         String responseBody = response.body();
         exchange.setStatusCode(response.statusCode());
         if(responseHeaders.firstValue(Headers.CONTENT_TYPE.toString()).isPresent()) {
-            exchange.getRequestHeaders().put(Headers.CONTENT_TYPE, responseHeaders.firstValue(Headers.CONTENT_TYPE.toString()).get());
+            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, responseHeaders.firstValue(Headers.CONTENT_TYPE.toString()).get());
         }
         exchange.getResponseSender().send(responseBody);
     }

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceHandler.java
Patch:
@@ -162,7 +162,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                     String responseBody = response.body();
                     exchange.setStatusCode(response.statusCode());
                     if(responseHeaders.firstValue(Headers.CONTENT_TYPE.toString()).isPresent()) {
-                        exchange.getRequestHeaders().put(Headers.CONTENT_TYPE, responseHeaders.firstValue(Headers.CONTENT_TYPE.toString()).get());
+                        exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, responseHeaders.firstValue(Headers.CONTENT_TYPE.toString()).get());
                     }
                     exchange.getResponseSender().send(responseBody);
                     return;

File: rate-limit/src/test/java/com/networknt/limit/LimitOldConfigTest.java
Patch:
@@ -132,6 +132,7 @@ public String callApi() throws Exception {
     }
 
     @Test
+    @Ignore
     // For some reason, travis become really slow or not allow multi-thread anymore and this test fails always.
     // You can run it within the IDE or remove the @Ignore and run it locally with mvn clean install.
     public void testMoreRequests() throws Exception {

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -268,6 +268,7 @@ public void testGetSignKey() throws Exception {
     }
 
     @Test
+    @Ignore
     public void testGetTokenKey() throws Exception {
         TokenKeyRequest request = new TokenKeyRequest("100");
         request.setClientId("test_client");

File: client/src/test/java/com/networknt/client/Http2ClientPoolTest.java
Patch:
@@ -303,6 +303,7 @@ public void testResponseTime() throws Exception {
 
 
     @Test
+    @Ignore
     public void testSingleAsych() throws Exception {
         callApiAsync();
     }

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -534,6 +534,7 @@ public void testResponseTime() throws Exception {
 
 
     @Test
+    @Ignore
     public void testSingleAsych() throws Exception {
         callApiAsync();
     }

File: ingress-proxy/src/test/java/com/networknt/proxy/salesforce/SalesforceHandlerTest.java
Patch:
@@ -24,7 +24,7 @@
 
 public class SalesforceHandlerTest {
     static final Logger logger = LoggerFactory.getLogger(SalesforceHandlerTest.class);
-    static final SalesforceConfig config = new SalesforceConfig();
+    static final SalesforceConfig config = SalesforceConfig.load();
     static Undertow server = null;
 
     @BeforeClass

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasConfig.java
Patch:
@@ -25,6 +25,7 @@ public class MrasConfig {
     public static final String TOKEN_URL = "tokenUrl";
     public static final String USERNAME = "username";
     public static final String PASSWORD = "password";
+    public static final String RESOURCE = "resource";
     public static final String CACHE_ENABLED = "cacheEnabled";
     public static final String MEM_KEY = "memKey";
     public static final String GRACE_PERIOD = "gracePeriod";

File: ingress-proxy/src/main/java/com/networknt/proxy/mras/MrasHandler.java
Patch:
@@ -338,6 +338,7 @@ private Result<TokenResponse> getMicrosoftToken() throws Exception {
 
             Map<String, String> parameters = new HashMap<>();
             parameters.put("grant_type", "client_credentials");
+            parameters.put("resource", (String)config.getMicrosoft().get(config.RESOURCE));
 
             String form = parameters.entrySet()
                     .stream()

File: audit/src/test/java/com/networknt/audit/AuditConfigTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldLoadEmptyConfig() {
         Assert.assertTrue(config.isStatusCode());
         Assert.assertTrue(config.isResponseTime());
         Assert.assertFalse(config.isAuditOnError());
-        Assert.assertFalse(config.isMaskEnabled());
+        Assert.assertFalse(config.isMask());
         Assert.assertNotNull(config.getTimestampFormat());
     }
 

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -59,7 +59,7 @@ public class BodyHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(BodyHandler.class);
     static final String CONTENT_TYPE_MISMATCH = "ERR10015";
 
-    // request body will be parse during validation and it is attached to the exchange, in JSON,
+    // request body will be parsed during validation and it is attached to the exchange, in JSON,
     // it could be a map or list. So treat it as Object in the attachment.
     public static final AttachmentKey<Object> REQUEST_BODY = AttachmentConstants.REQUEST_BODY;
 

File: http-string/src/main/java/com/networknt/httpstring/AttachmentConstants.java
Patch:
@@ -21,6 +21,9 @@ public class AttachmentConstants {
     public static final AttachmentKey<Map> AUDIT_INFO = AttachmentKey.create(Map.class);
     public static final AttachmentKey<Object> REQUEST_BODY = AttachmentKey.create(Object.class);
     public static final AttachmentKey<String> REQUEST_BODY_STRING = AttachmentKey.create(String.class);
+    public static final AttachmentKey<Object> RESPONSE_BODY = AttachmentKey.create(Object.class);
+    public static final AttachmentKey<String> RESPONSE_BODY_STRING = AttachmentKey.create(String.class);
+
     public static final AttachmentKey<PooledByteBuffer[]> BUFFERED_RESPONSE_DATA_KEY = AttachmentKey.create(PooledByteBuffer[].class);
     public static final AttachmentKey<PooledByteBuffer[]> BUFFERED_REQUEST_DATA_KEY = AttachmentKey.create(PooledByteBuffer[].class);
 

File: body/src/test/java/com/networknt/body/ProxyBodyInterceptorTest.java
Patch:
@@ -37,8 +37,8 @@
  *
  * @author Steve Hu
  */
-public class ProxyBodyHandlerTest {
-    static final Logger logger = LoggerFactory.getLogger(ProxyBodyHandlerTest.class);
+public class ProxyBodyInterceptorTest {
+    static final Logger logger = LoggerFactory.getLogger(ProxyBodyInterceptorTest.class);
 
     static Undertow server = null;
 
@@ -47,7 +47,7 @@ public static void setUp() {
         if (server == null) {
             logger.info("starting server");
             HttpHandler handler = getTestHandler();
-            ProxyBodyHandler bodyHandler = new ProxyBodyHandler();
+            ProxyBodyInterceptor bodyHandler = new ProxyBodyInterceptor();
             bodyHandler.setNext(handler);
             handler = bodyHandler;
             server = Undertow.builder()

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.networknt.client.Http2Client;
-import com.networknt.config.Config;
 import com.networknt.config.JsonMapper;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.handler.ProxyHandler;

File: ingress-proxy/src/test/java/com/networknt/proxy/mras/MrasHandlerTest.java
Patch:
@@ -24,7 +24,6 @@
 
 public class MrasHandlerTest {
     static final Logger logger = LoggerFactory.getLogger(MrasHandlerTest.class);
-    static final MrasConfig config = new MrasConfig();
     static Undertow server = null;
 
     @BeforeClass

File: service/src/main/java/com/networknt/service/ServiceConfig.java
Patch:
@@ -74,7 +74,8 @@ public void setConfigData() {
         } else if (mappedConfig.get(SINGLETONS) instanceof List) {
             singletons = (List<Map<String, Object>>)mappedConfig.get(SINGLETONS);
         } else {
-            throw new ConfigException("singletons missing or wrong type.");
+            if(logger.isInfoEnabled()) logger.info("singletons missing or wrong type.");
+            // ignore this situation as a particular application might not have any injections.
         }
     }
 }

File: security/src/test/java/com/networknt/security/JwtVerifierMultipleJwkTest.java
Patch:
@@ -120,11 +120,12 @@ public static void beforeClass() throws IOException {
                     .setHandler(new PathHandler()
                             .addExactPath(API_MARKET, (exchange) -> {
                                 boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);
+                                String requestPath = exchange.getRequestPath();
                                 Assert.assertTrue(hasScopeToken);
                                 String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0).substring(7);
                                 // verify the jwt token with JWK.
                                 JwtVerifier jwtVerifier = new JwtVerifier(securityConfig);
-                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true);
+                                JwtClaims claims = jwtVerifier.verifyJwt(scopeToken, true, true, requestPath);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
                                 exchange.getResponseSender().send(ByteBuffer.wrap(
                                         Config.getInstance().getMapper().writeValueAsBytes(

File: handler/src/main/java/com/networknt/handler/ProxyHandler.java
Patch:
@@ -25,7 +25,6 @@
 import java.nio.charset.StandardCharsets;
 import java.security.cert.Certificate;
 import java.util.*;
-import java.util.concurrent.DelayQueue;
 import java.util.concurrent.TimeUnit;
 import javax.net.ssl.SSLPeerUnverifiedException;
 import java.security.cert.CertificateEncodingException;
@@ -443,6 +442,7 @@ public void run() {
             }
             request.setPath(requestURI.toString())
                     .setMethod(method);
+            if(logger.isTraceEnabled()) logger.trace("targetURI = " + targetURI + " requestURI = " + requestURI + " method = " + method);
             final HeaderMap inboundRequestHeaders = exchange.getRequestHeaders();
             final HeaderMap outboundRequestHeaders = request.getRequestHeaders();
             copyHeaders(outboundRequestHeaders, inboundRequestHeaders, headerRewriteRules == null ? null : headerRewriteRules.get(targetURI));

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
+import com.networknt.config.JsonMapper;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.handler.ProxyHandler;
 import io.undertow.server.HttpHandler;
@@ -61,6 +62,7 @@ public class LightProxyHandler implements HttpHandler {
 
     public LightProxyHandler() {
         List<String> hosts = Arrays.asList(config.getHosts().split(","));
+        if(logger.isTraceEnabled()) logger.trace("hosts = " + JsonMapper.toJson(hosts));
         LoadBalancingProxyClient loadBalancer = new LoadBalancingProxyClient()
                 .setConnectionsPerThread(config.getConnectionsPerThread());
         if(config.isHttpsEnabled()) {

File: gateway/src/main/java/com/networknt/router/middleware/GatewayServiceDictHandler.java
Patch:
@@ -56,7 +56,7 @@ protected void serviceDict(HttpServerExchange exchange) throws Exception {
             if (serviceId == null) {
                 String requestPath = exchange.getRequestURI();
                 String httpMethod = exchange.getRequestMethod().toString().toLowerCase();
-                serviceEntry = HandlerUtils.findServiceEntry(toInternalKey(httpMethod, requestPath), config.getMapping());
+                serviceEntry = HandlerUtils.findServiceEntry(HandlerUtils.toInternalKey(httpMethod, requestPath), config.getMapping());
                 if (serviceEntry != null) {
                     exchange.getRequestHeaders().put(HttpStringConstants.SERVICE_ID, serviceEntry[1]);
                 }

File: egress-router/src/main/java/com/networknt/router/middleware/PathPrefixServiceHandler.java
Patch:
@@ -90,7 +90,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             }
         }
         Map<String, Object> auditInfo = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
-        if(auditInfo == null) {
+        if(auditInfo == null && serviceEntry != null) {
             // AUDIT_INFO is created for light-gateway to populate the endpoint as the OpenAPI handlers might not be available.
             auditInfo = new HashMap<>();
             auditInfo.put(Constants.ENDPOINT_STRING, serviceEntry[0] + "@" + exchange.getRequestMethod().toString().toLowerCase());

File: gateway/src/main/java/com/networknt/router/middleware/GatewayPathPrefixServiceHandler.java
Patch:
@@ -62,7 +62,7 @@ protected void pathPrefixService(HttpServerExchange exchange) throws Exception {
             }
         }
         Map<String, Object> auditInfo = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
-        if(auditInfo == null) {
+        if(auditInfo == null && serviceEntry != null) {
             // AUDIT_INFO is created for light-gateway to populate the endpoint as the OpenAPI handlers might not be available.
             auditInfo = new HashMap<>();
             auditInfo.put(Constants.ENDPOINT_STRING, serviceEntry[0] + "@" + exchange.getRequestMethod().toString().toLowerCase());

File: gateway/src/main/java/com/networknt/router/middleware/GatewayServiceDictHandler.java
Patch:
@@ -63,7 +63,7 @@ protected void serviceDict(HttpServerExchange exchange) throws Exception {
             }
         }
         Map<String, Object> auditInfo = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
-        if(auditInfo == null) {
+        if(auditInfo == null && serviceEntry != null) {
             // AUDIT_INFO is created for light-gateway to populate the endpoint as the OpenAPI handlers might not be available.
             auditInfo = new HashMap<>();
             auditInfo.put(Constants.ENDPOINT_STRING, serviceEntry[0]);

File: security/src/test/java/com/networknt/security/JwtVerifierTest.java
Patch:
@@ -61,7 +61,7 @@ public void testReadCertificate() {
         Assert.assertEquals(2, certMap.size());
     }
 
-    @Test(expected = ConfigException.class)
+    @Test
     public void testReadCertificate2() {
         SecurityConfig config = SecurityConfig.load(CONFIG_NAME_OPENAPI);
         Map<String, X509Certificate> certMap = new HashMap<>();

File: security/src/test/java/com/networknt/security/JwtVerifierMultipleJwkTest.java
Patch:
@@ -45,7 +45,7 @@ public class JwtVerifierMultipleJwkTest extends JwtVerifierJwkBase {
     public static String jsonWebKeySetJson112 = "{\"keys\":[{\"kty\":\"RSA\",\"kid\":\"112\",\"n\":\"uuXEy0NvrQOiASV_hMHPnTi1GF5mKYATR0kv9hvLidpwl2q9zmXjP5ZakN-sj2StDZiL3K-HAA_4-tHqBZwipY_hyk0TtcgBQOCvgK3IjsKm1P-WmO1uTPgMYIyZp4OfSOoeom1J5JkZ_BW7nMAabyfiwdq2OefEEj-JbORMgjdXjG_RZ4rfuzM1MR36XLZqDufYhXnM2diaplN4xCYnYQ1L4jAAbcQ22JW2tVPH_Zsa2q60mO13Gw3nz9xQb-C5HIxPo48jxiLdnN6929FvFp3KESX8prDq8lx3GYkje2niXH6nqwDE5Zrtpqkl7gnG60BCrO_QYp1WOgcpDXAHrQ\",\"e\":\"AQAB\"}]}";
 
     static ClientConfig config;
-    static Map<String, Object> securityConfig;
+    static SecurityConfig securityConfig;
 
     private static XnioWorker worker;
     static Undertow server1 = null;
@@ -57,7 +57,7 @@ public class JwtVerifierMultipleJwkTest extends JwtVerifierJwkBase {
 
     @BeforeClass
     public static void beforeClass() throws IOException {
-        securityConfig = Config.getInstance().getJsonMapConfig(JwtVerifier.SECURITY_CONFIG);
+        securityConfig = SecurityConfig.load(JwtVerifier.SECURITY_CONFIG);
         config = ClientConfig.get();
         // Create xnio worker
         final Xnio xnio = Xnio.getInstance();

File: security/src/test/java/com/networknt/security/JwtVerifierSingleJwkTest.java
Patch:
@@ -50,7 +50,7 @@ public class JwtVerifierSingleJwkTest extends JwtVerifierJwkBase {
 
     public static final String CLIENT_CONFIG_NAME = "client-single-auth";
     static ClientConfig config;
-    static Map<String, Object> securityConfig;
+    static SecurityConfig securityConfig;
 
     private static XnioWorker worker;
     static Undertow server1 = null;
@@ -62,7 +62,7 @@ public class JwtVerifierSingleJwkTest extends JwtVerifierJwkBase {
 
     @BeforeClass
     public static void beforeClass() throws IOException {
-        securityConfig = Config.getInstance().getJsonMapConfig(JwtVerifier.SECURITY_CONFIG);
+        securityConfig = SecurityConfig.load(JwtVerifier.SECURITY_CONFIG);
         config = ClientConfig.get(CLIENT_CONFIG_NAME);
         // Create xnio worker
         final Xnio xnio = Xnio.getInstance();

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.service;
 
 import com.networknt.config.Config;
+import com.networknt.config.JsonMapper;
 import com.networknt.utility.ModuleRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -41,6 +42,7 @@ public class SingletonServiceFactory {
     static {
         ServiceConfig serviceConfig =
                 (ServiceConfig) Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ServiceConfig.class);
+        if(logger.isTraceEnabled()) logger.trace("serviceConfig = " + JsonMapper.toJson(serviceConfig));
         List<Map<String, Object>> singletons = serviceConfig.getSingletons();
         //logger.debug("singletons " + singletons);
         try {
@@ -94,6 +96,7 @@ private static Object handleSingleImpl(List<String> interfaceClasses, List<Objec
      * @throws Exception
      */
     private static List<Object> constructAndAddToServiceMap(List<String> interfaceClasses, Map map) throws Exception {
+        if(logger.isTraceEnabled()) logger.trace("map = " + JsonMapper.toJson(map));
         Iterator it = map.entrySet().iterator();
         List<Object> items = new ArrayList<>();
         if (it.hasNext()) {

File: status/src/test/java/com/networknt/status/StatusSerializerTest.java
Patch:
@@ -69,15 +69,15 @@ public void testToString() {
         Status status = new Status("ERR10001");
         System.out.println(status);
         // test with ErrorStatusRootStatusSerializer
-        Assert.assertEquals("{ \"error\" : {\"statusCode\":401,\"code\":\"ERR10001\",\"message\":\"AUTH_TOKEN_EXPIRED\",\"description\":\"Jwt token in authorization header expired\"} }", status.toString());
+        Assert.assertEquals("{\"statusCode\":401,\"code\":\"ERR10001\",\"message\":\"AUTH_TOKEN_EXPIRED\",\"description\":\"Jwt token in authorization header expired\",\"severity\":\"ERROR\"}", status.toString());
     }
 
     @Test
     public void testToStringWithArgs() {
         Status status = new Status("ERR11000", "parameter name", "original url");
         System.out.println(status);
         // test with ErrorStatusRootStatusSerializer
-        Assert.assertEquals("{ \"error\" : {\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter parameter name is required on path original url but not found in request.\"} }", status.toString());
+        Assert.assertEquals("{\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter parameter name is required on path original url but not found in request.\",\"severity\":\"ERROR\"}", status.toString());
     }
 
 }

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -612,7 +612,7 @@ private static Result<Jwt> getCCTokenRemotely(final Jwt jwt) {
             jwt.setJwt(tokenResponse.getAccessToken());
             // the expiresIn is seconds and it is converted to millisecond in the future.
             jwt.setExpire(System.currentTimeMillis() + tokenResponse.getExpiresIn() * 1000);
-            logger.info("Get client credentials token {} with expire_in {} seconds", jwt, tokenResponse.getExpiresIn());
+            logger.info("Get client credentials token {} with expire_in {} seconds", jwt.getJwt().substring(0, 20), tokenResponse.getExpiresIn());
             //set the scope for future usage.
             jwt.setScopes(tokenResponse.getScope());
             return Success.of(jwt);

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -146,12 +146,12 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         // assume that the subject token has the scope already?)
         String token = exchange.getRequestHeaders().getFirst(Headers.AUTHORIZATION);
         if(token == null) {
-            if(logger.isTraceEnabled()) logger.trace("Adding jwt token to Authorization header with Bearer " + cachedJwt.getJwt().substring(20));
+            if(logger.isTraceEnabled()) logger.trace("Adding jwt token to Authorization header with Bearer " + cachedJwt.getJwt().substring(0, 20));
             exchange.getRequestHeaders().put(Headers.AUTHORIZATION, "Bearer " + cachedJwt.getJwt());
         } else {
             if(logger.isTraceEnabled()) {
-                logger.trace("Authorization header is used with " + token.substring(10));
-                logger.trace("Adding jwt token to X-Scope-Token header with Bearer " + cachedJwt.getJwt().substring(20));
+                logger.trace("Authorization header is used with " + token.substring(0, 20));
+                logger.trace("Adding jwt token to X-Scope-Token header with Bearer " + cachedJwt.getJwt().substring(0, 20));
             }
             exchange.getRequestHeaders().put(HttpStringConstants.SCOPE_TOKEN, "Bearer " + cachedJwt.getJwt());
         }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -28,6 +28,7 @@
 import com.networknt.client.ssl.TLSConfig;
 import com.networknt.cluster.Cluster;
 import com.networknt.config.Config;
+import com.networknt.config.JsonMapper;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.exception.ClientException;
 import com.networknt.httpstring.HttpStringConstants;
@@ -127,7 +128,8 @@ public class Http2Client {
 
     static {
         List<String> masks = List.of(MASK_KEY_CLIENT_SECRET, MASK_KEY_TRUST_STORE_PASS, MASK_KEY_KEY_STORE_PASS, MASK_KEY_KEY_PASS);
-        ModuleRegistry.registerModule(Http2Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);
+        Map<String, Object> config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
+        ModuleRegistry.registerModule(Http2Client.class.getName(), JsonMapper.fromJson(JsonMapper.toJson(config), Map.class), masks);
         // take the best effort to get the serviceId from the server.yml file. It might not exist if this is a standalone client.
         boolean injectCallerId = ClientConfig.get().isInjectCallerId();
         if(injectCallerId) {

File: client/src/main/java/com/networknt/client/oauth/Jwt.java
Patch:
@@ -156,8 +156,8 @@ public Key getKey() {
     }
 
     /**
-     * a inner model tight to Jwt, this key is to represent to a Jwt for caching or other usage
-     * for now it's only identified by scopes and serviceId.
+     * an inner model tight to Jwt, this key is to represent to a Jwt for caching or other usage
+     * for now it's only identified by scopes and serviceId combination or one of them.
      */
     public static class Key {
         /**

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -553,7 +553,7 @@ public static Result<Jwt> populateCCToken(final Jwt jwt) {
     private static Result<Jwt> renewCCTokenSync(final Jwt jwt) {
         // Already expired, try to renew getCCTokenSynchronously but let requests use the old token.
         logger.trace("In renew window and token is already expired.");
-        //the token can be renew when it's not on renewing or current time is lager than retrying interval
+        //the token can be renewed when it's not on renewing or current time is lager than retrying interval
         if (!jwt.isRenewing() || System.currentTimeMillis() > jwt.getExpiredRetryTimeout()) {
             jwt.setRenewing(true);
             jwt.setEarlyRetryTimeout(System.currentTimeMillis() + Jwt.getExpiredRefreshRetryDelay());
@@ -605,6 +605,7 @@ private static Result<Jwt> getCCTokenRemotely(final Jwt jwt) {
         TokenRequest tokenRequest = new ClientCredentialsRequest(jwt.getCcConfig());
         //scopes at this point is may not be set yet when issuing a new token.
         setScope(tokenRequest, jwt);
+        if(logger.isTraceEnabled()) logger.trace("TokenRequest = " + JsonMapper.toJson(tokenRequest));
         Result<TokenResponse> result = OauthHelper.getTokenResult(tokenRequest);
         if(result.isSuccess()) {
             TokenResponse tokenResponse = result.getResult();

File: ingress-proxy/src/main/java/com/networknt/proxy/ExternalServiceConfig.java
Patch:
@@ -121,13 +121,13 @@ private void setConfigList() {
                 pathHostMappings.add(parts);
             } else if (object instanceof List) {
                 List<String> maps = (List<String>)object;
-                maps.forEach(item -> {
-                    String[] parts = item.split(" ");
+                for(String s: maps) {
+                    String[] parts = s.split(" ");
                     if(parts.length != 2) {
                         throw new ConfigException("path host entry must have two elements separated by a space.");
                     }
                     pathHostMappings.add(parts);
-                });
+                }
             } else {
                 throw new ConfigException("pathHostMappings must be a string or a list of strings.");
             }

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -75,7 +75,7 @@ public class SalesforceHandler implements MiddlewareHandler {
     private HttpClient client;
 
     public SalesforceHandler() {
-        config = (SalesforceConfig) Config.getInstance().getJsonObjectConfig(SalesforceConfig.CONFIG_NAME, SalesforceConfig.class);
+        config = new SalesforceConfig();
         if(logger.isInfoEnabled()) logger.info("SalesforceAuthHandler is loaded.");
     }
 

File: ingress-proxy/src/main/java/com/networknt/proxy/salesforce/SalesforceHandler.java
Patch:
@@ -101,7 +101,7 @@ public void register() {
         // As certPassword is in the config file, we need to mask them.
         List<String> masks = new ArrayList<>();
         masks.add("certPassword");
-        ModuleRegistry.registerModule(SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);
+        ModuleRegistry.registerModule(SalesforceHandler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(SalesforceConfig.CONFIG_NAME), masks);
     }
 
     @Override
@@ -131,7 +131,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             String queryString = exchange.getQueryString();
             String contentType = exchange.getRequestHeaders().getFirst(Headers.CONTENT_TYPE);
             HttpRequest request = null;
-            if(method.equalsIgnoreCase("GET") || method.equalsIgnoreCase("DELETE")) {
+            if(method.equalsIgnoreCase("GET")) {
                 request = HttpRequest.newBuilder()
                         .uri(new URI(requestHost + requestPath + "?" + queryString))
                         .headers("Authorization", "Bearer " + accessToken, "Content-Type", contentType)

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -285,6 +285,7 @@ public static Result<TokenResponse> getTokenFromSamlResult(SAMLBearerRequest tok
      * @throws ClientException throw exception if communication with the service fails.
      */
     public static String getKey(KeyRequest keyRequest) throws ClientException {
+        if(logger.isDebugEnabled()) logger.debug("keyRequest = " + keyRequest.toString());
         return getKey(keyRequest, null);
     }
 
@@ -333,6 +334,7 @@ public static String getKey(KeyRequest keyRequest, String envTag) throws ClientE
                     keyClient.sendAsync(request, HttpResponse.BodyHandlers.ofString());
             return response.thenApply(HttpResponse::body).get(ClientConfig.get().getTimeout(), TimeUnit.MILLISECONDS);
         } catch (Exception e) {
+            logger.error("Exception:", e);
             throw new ClientException(e);
         }
     }

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -370,7 +370,7 @@ private Map<String, List<JsonWebKey>> getJsonWebKeyMap() {
                 try {
                     logger.debug("Getting Json Web Key list from {} for serviceId {}", keyRequest.getServerUrl(), entry.getKey());
                     String key = OauthHelper.getKey(keyRequest);
-                    logger.debug("Got Json Web Key list from {} for serviceId {}", keyRequest.getServerUrl(), entry.getKey());
+                    logger.debug("Got Json Web Key = ", key);
                     List<JsonWebKey> jwkList = new JsonWebKeySet(key).getJsonWebKeys();
                     if (jwkList == null || jwkList.isEmpty()) {
                         throw new RuntimeException("cannot get JWK from OAuth server");

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -59,6 +59,8 @@ public RouterHandler() {
                 .setRewriteHostHeader(config.rewriteHostHeader)
                 .setUrlRewriteRules(config.urlRewriteRules)
                 .setMethodRewriteRules(config.methodRewriteRules)
+                .setQueryParamRewriteRules(config.queryParamRewriteRules)
+                .setHeaderRewriteRules(config.headerRewriteRules)
                 .setNext(ResponseCodeHandler.HANDLE_404)
                 .build();
     }

File: rate-limit/src/main/java/com/networknt/limit/LimitConfig.java
Patch:
@@ -91,6 +91,8 @@ static LimitConfig load(String configName) {
 
     void reload() {
         mappedConfig = config.getJsonMapConfigNoCache(CONFIG_NAME);
+        setConfigData();
+        setRateLimitConfig();
     }
 
     public boolean isEnabled() {

File: rate-limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -45,14 +45,14 @@ public class LimitHandler implements MiddlewareHandler {
     private static final ObjectMapper mapper = Config.getInstance().getMapper();
 
 
-    public LimitHandler() {
+    public LimitHandler() throws Exception{
         config = LimitConfig.load();
         logger.info("RateLimit started with key type:" + config.getKey().name());
+        rateLimiter = new RateLimiter(config);
     }
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
-        rateLimiter = new RateLimiter(config);
         RateLimitResponse rateLimitResponse = rateLimiter.handleRequest(exchange, config.getKey());
 
 

File: rate-limit/src/main/java/com/networknt/limit/LimitKey.java
Patch:
@@ -2,7 +2,7 @@
 
 public enum LimitKey {
 
-    SERVER("server"), ADDRESS("address"), CLIENT("client");
+    SERVER("server"), ADDRESS("address"), CLIENT("client"), USER("user");
 
     private String value;
 

File: rate-limit/src/main/java/com/networknt/limit/RequestLimit.java
Patch:
@@ -154,6 +154,7 @@ public int getMaximumConcurrentRequests() {
      * Set the maximum concurrent requests.  The value must be greater than or equal to one.
      *
      * @param newMax the maximum concurrent requests
+     * @return max concurrent requests
      */
     public int setMaximumConcurrentRequests(int newMax) {
         if (newMax < 1) {

File: rate-limit/src/test/java/com/networknt/limit/LimitHandlerTest.java
Patch:
@@ -50,13 +50,13 @@
  */
 public class LimitHandlerTest {
     static final Logger logger = LoggerFactory.getLogger(LimitHandlerTest.class);
-    static final LimitConfig config = (LimitConfig)Config.getInstance().getJsonObjectConfig(LimitConfig.CONFIG_NAME, LimitConfig.class);
+    static final LimitConfig config = LimitConfig.load();
     static Undertow server = null;
 
     @BeforeClass
     public static void setUp() {
         if(server == null) {
-            logger.info("starting server");
+            logger.info("starting serverconfig");
             HttpHandler handler = getTestHandler();
             LimitHandler limitHandler = new LimitHandler();
             limitHandler.setNext(handler);

File: body/src/main/java/com/networknt/body/ProxyBodyHandler.java
Patch:
@@ -54,6 +54,7 @@ public class ProxyBodyHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(ProxyBodyHandler.class);
     static final String CONTENT_TYPE_MISMATCH = "ERR10015";
     static final String PAYLOAD_TOO_LARGE = "ERR10068";
+    static final String GENERIC_EXCEPTION = "ERR10014";
 
     public static final BodyConfig config = (BodyConfig) Config.getInstance().getJsonObjectConfig(BodyConfig.CONFIG_NAME, BodyConfig.class);
 
@@ -104,6 +105,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                     IoUtils.safeClose(buffer);
                 }
                 logger.error(e.getLocalizedMessage(), e);
+                setExchangeStatus(exchange, GENERIC_EXCEPTION, e.getMessage());
                 return;
             }
             String requestBody = StandardCharsets.UTF_8.decode(buffer.getBuffer().duplicate()).toString();

File: egress-router/src/main/java/com/networknt/router/RouterConfig.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.networknt.router;
 
 import com.networknt.config.Config;
 import com.networknt.config.ConfigException;
+import com.networknt.handler.config.MethodRewriteRule;
+import com.networknt.handler.config.UrlRewriteRule;
 import com.networknt.utility.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 import com.networknt.utility.ModuleRegistry;
+import com.networknt.handler.ProxyHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.server.handlers.ResponseCodeHandler;

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -478,7 +478,7 @@ private Map<String, Object> loadSpecificConfigFileAsMap(String configName, Strin
                     }
                 }
             } catch (Exception e) {
-                logger.error("Exception", e);
+                logger.error("Exception on loading " + ymlFilename, e);
                 throw new RuntimeException("Unable to load " + ymlFilename + " as map.", e);
             }
             return config;

File: egress-router/src/main/java/io/undertow/server/handlers/proxy/LoadBalancingRouterProxyClient.java
Patch:
@@ -224,7 +224,6 @@ protected Host selectHost(HttpServerExchange exchange) {
         AttachmentList<Host> attempted = exchange.getAttachment(ATTEMPTED_HOSTS);
         if(logger.isTraceEnabled()) logger.trace("attempted = " + attempted);
         Host[] hostArray = this.hosts.get(key);
-        if(logger.isTraceEnabled()) logger.trace("size = " + hostArray.length + " hostArray = " + hostArray);
         if (hostArray == null || hostArray.length == 0) {
             // this must be the first this service is called since the router is started. discover here.
             if (serviceUrl != null) {

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java
Patch:
@@ -75,7 +75,6 @@ public void onStartup() {
                         }
                     }
                 }
-                System.out.println(ruleString);
                 rules = RuleMapper.string2RuleMap(ruleString);
                 if(logger.isInfoEnabled()) logger.info("Load YAML rules with size = " + rules.size());
             } else {

File: rule-loader/src/main/java/com/networknt/rule/RuleLoaderStartupHook.java
Patch:
@@ -79,7 +79,7 @@ public void onStartup() {
                 rules = RuleMapper.string2RuleMap(ruleString);
                 if(logger.isInfoEnabled()) logger.info("Load YAML rules with size = " + rules.size());
             } else {
-                logger.error("Could not load rule for serviceId = " + serverConfig.getServiceId());
+                logger.error("Could not load rule for serviceId = " + serverConfig.getServiceId() + " error = " + result.getError());
             }
         } else {
             if(logger.isInfoEnabled()) logger.info("Rule Loader is not enabled and skipped loading rules from the portal.");

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -167,13 +167,14 @@ public List<Map<String, Object>> lookupHealthService(String serviceId, String ta
         if (tag != null) {
             path = path + "&tag=" + tag;
         }
-        logger.trace("path = {}", path);
+        if(logger.isTraceEnabled()) logger.trace("path = {}", path);
         try {
             connection = client.borrowConnection(uri, Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, optionMap).get();
             AtomicReference<ClientResponse> reference = send(connection, Methods.GET, path, token, null);
             int statusCode = reference.get().getResponseCode();
             if (statusCode >= UNUSUAL_STATUS_CODE) {
-                throw new Exception("Failed to unregister on Consul: " + statusCode);
+                logger.error("Failed to look up service on Portal with serviceId {} tag {} response code {} and body {}", serviceId, tag, statusCode, reference.get().getAttachment(Http2Client.RESPONSE_BODY));
+                throw new Exception("Failed to lookup service on Portal: " + statusCode);
             } else {
                 String body = reference.get().getAttachment(Http2Client.RESPONSE_BODY);
                 services = JsonMapper.string2List(body);

File: client/src/test/java/com/networknt/client/Http2ClientMultiAuthTest.java
Patch:
@@ -231,7 +231,7 @@ private String callMarketApiAsync() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath(API_MARKET).setMethod(Methods.GET);
-            // this will force the client to get a scope token from the auth server 1 and put into the X-Scope-Token header.
+            // this will force the client to get a scope token from the auth server 2 and put into the X-Scope-Token header.
             client.populateHeader(request, "Bearer token", "cid", "tid");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();

File: client/src/main/java/com/networknt/client/oauth/ClientRequestComposerProvider.java
Patch:
@@ -116,6 +116,7 @@ public HttpRequest composeClientRequest(TokenRequest tokenRequest) {
                     .setHeader(Headers.ACCEPT_STRING, "application/json")
                     .setHeader(Headers.AUTHORIZATION_STRING, OauthHelper.getBasicAuthHeader(tokenRequest.getClientId(), tokenRequest.getClientSecret()))
                     .build();
+            if(logger.isTraceEnabled()) logger.trace("request = " + request.toString());
             return request;
         }
 

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -36,6 +36,9 @@
 public class ClientCredentialsRequest extends TokenRequest {
     private static final Logger logger = LoggerFactory.getLogger(ClientCredentialsRequest.class);
     private static final String CONFIG_PROPERTY_MISSING = "ERR10057";
+    public ClientCredentialsRequest() {
+        this(null);
+    }
 
     public ClientCredentialsRequest(Map<String, Object> ccConfig) {
         setGrantType(ClientConfig.CLIENT_CREDENTIALS);

File: egress-router/src/main/java/io/undertow/server/handlers/proxy/LoadBalancingRouterProxyClient.java
Patch:
@@ -207,6 +207,7 @@ protected Host selectHost(HttpServerExchange exchange) {
         String serviceUrl = headers.getFirst(HttpStringConstants.SERVICE_URL);
         // remove the header here in case the downstream service is another light-router instance.
         if(serviceUrl != null) headers.remove(HttpStringConstants.SERVICE_URL);
+        if(serviceId != null) headers.remove(HttpStringConstants.SERVICE_ID);
         // if the serviceId doesn't exist in the header, check if there is one in the query parameter.
         // also remove it from the query parameters to ensure that the downstream call doesn't have it.
         // it is for legacy client that is easy to manipulate the query parameters than headers.

File: client/src/main/java/com/networknt/client/http/HttpResponseValue.java
Patch:
@@ -52,6 +52,8 @@ public  BodyPart getBody(String key) {
 
     /**
      * Indicates whether this entity has a body part by the key.
+     * @param key String
+     * @return boolean to indicate if body exists
      */
     public boolean hasBody(String key) {
         return (this.bodyPartMap==null? false : this.bodyPartMap.containsKey(key) );

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -596,7 +596,7 @@ private static void renewCCTokenAsync(final Jwt jwt) {
      * @return Jwt when success, it will be the same object as the jwt you passed in; return Status when fail;
      */
     private static Result<Jwt> getCCTokenRemotely(final Jwt jwt) {
-        TokenRequest tokenRequest = new ClientCredentialsRequest();
+        TokenRequest tokenRequest = new ClientCredentialsRequest(jwt.getCcConfig());
         //scopes at this point is may not be set yet when issuing a new token.
         setScope(tokenRequest, jwt);
         Result<TokenResponse> result = OauthHelper.getTokenResult(tokenRequest);
@@ -622,8 +622,8 @@ private static Result<Jwt> getCCTokenRemotely(final Jwt jwt) {
      * @param jwt
      */
     private static void setScope(TokenRequest tokenRequest, Jwt jwt) {
-        if(jwt.getKey() != null && !jwt.getKey().getScopes().isEmpty()) {
-            tokenRequest.setScope(new ArrayList<String>() {{ addAll(jwt.getKey().getScopes()); }});
+        if(jwt.getKey() != null && jwt.getKey().getScopes() != null) {
+            tokenRequest.setScope(new ArrayList<>() {{ addAll(jwt.getKey().getScopes()); }});
         }
     }
 

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerConfig.java
Patch:
@@ -55,6 +55,7 @@ public static SanitizerConfig load() {
         return new SanitizerConfig(CONFIG_NAME);
     }
 
+    @Deprecated
     public static SanitizerConfig load(String configName) {
         return new SanitizerConfig(configName);
     }

File: egress-router/src/test/java/com/networknt/router/HostWhitelistTest.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.networknt.router;
 
-import com.networknt.config.Config;
 import com.networknt.service.SingletonServiceFactory;
 import org.junit.Assert;
 import org.junit.Before;
@@ -25,8 +24,6 @@
 
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.List;
 
 public class HostWhitelistTest {
 

File: sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerWithEncodeType.java
Patch:
@@ -12,7 +12,7 @@ public class SanitizerHandlerWithEncodeType {
 
     private static Undertow server = null;
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void testStartServer() {
         if(server == null) {
             LOGGER.info("starting server");

File: sanitizer/src/main/java/com/networknt/sanitizer/enconding/SourceEncoding.java
Patch:
@@ -2,11 +2,10 @@
 
 import org.owasp.encoder.Encode;
 
-public class DefaultEncoding implements Encoding {
-
+public class SourceEncoding implements Encoding {
     @Override
     public String getId() {
-        return "default";
+        return "javascript-source";
     }
 
     @Override

File: sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerTest.java
Patch:
@@ -191,7 +191,7 @@ public void testEncodeNode() throws Exception {
         String data = "{\"s1\":\"<script>alert('test1')</script>\",\"s2\":[\"abc\",\"<script>alert('test2')</script>\"],\"s3\":{\"s4\":\"def\",\"s5\":\"<script>alert('test5')</script>\"},\"s6\":[{\"s7\":\"<script>alert('test7')</script>\"},{\"s8\":\"ghi\"}],\"s9\":[[\"<script>alert('test9')</script>\"],[\"jkl\"]]}";
         HashMap<String, Object> jsonMap = Config.getInstance().getMapper().readValue(data,new TypeReference<HashMap<String, Object>>(){});
         SanitizerHandler handler = new SanitizerHandler();
-        handler.encoding.encodeNode(jsonMap);
+        handler.bodyEncoder.encodeNode(jsonMap);
         Assert.assertEquals(jsonMap.get("s1"), "<script>alert(\\'test1\\')</script>");
         ArrayList l2 = (ArrayList)jsonMap.get("s2");
         String s2 = (String)l2.get(1);

File: sanitizer/src/test/java/com/networknt/sanitizer/builder/ServerBuilder.java
Patch:
@@ -1,14 +1,15 @@
 package com.networknt.sanitizer.builder;
 
 import com.networknt.body.BodyHandler;
+import com.networknt.sanitizer.SanitizerConfig;
 import com.networknt.sanitizer.SanitizerHandler;
 import io.undertow.Undertow;
 import io.undertow.server.HttpHandler;
 
 public class ServerBuilder {
 
     private static ServerBuilder instance;
-    private String configName = SanitizerHandler.CONFIG_NAME;
+    private String configName = SanitizerConfig.CONFIG_NAME;
 
     public static ServerBuilder newServer() {
         if (instance == null) instance = new ServerBuilder();

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -422,6 +422,7 @@ private static void initStringDefinedHandler(String handler) {
 		try {
 			handlerOrProviderObject = namedClass.second.getDeclaredConstructor().newInstance();
 		} catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
+			logger.error("Could not instantiate handler class " + namedClass.second, e);
 			throw new RuntimeException("Could not instantiate handler class: " + namedClass.second);
 		}
 

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -17,13 +17,11 @@
 package com.networknt.router;
 
 import com.networknt.client.Http2Client;
-import com.networknt.config.Config;
 import io.undertow.UndertowOptions;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.server.handlers.ResponseCodeHandler;
 import io.undertow.server.handlers.proxy.LoadBalancingRouterProxyClient;
-import io.undertow.server.handlers.proxy.ProxyHandler;
 import org.xnio.OptionMap;
 
 /**

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.ServiceLoader;
 import java.util.concurrent.ConcurrentHashMap;
 
+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
 import com.networknt.config.yml.ConfigLoaderConstructor;
 import org.owasp.encoder.Encode;
 import org.slf4j.Logger;
@@ -140,6 +141,7 @@ private static final class FileConfigImpl extends Config {
 
         static {
             mapper.registerModule(new JavaTimeModule());
+            mapper.registerModule(new Jdk8Module());
             mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
         }
         

File: config/src/main/java/com/networknt/config/JsonMapper.java
Patch:
@@ -22,6 +22,7 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
 import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 
 import java.io.IOException;
@@ -37,6 +38,7 @@ public class JsonMapper {
         objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         objectMapper.registerModule(new JavaTimeModule());
+        objectMapper.registerModule(new Jdk8Module());
     }
 
     public static String toJson(Object x) {

File: body/src/test/java/com/networknt/body/ProxyBodyHandlerTest.java
Patch:
@@ -225,7 +225,7 @@ public void run() {
     }
 
     @Test
-    //@Ignore
+    @Ignore
     public void testPostJsonList() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         final Http2Client client = Http2Client.getInstance();

File: body/src/test/java/com/networknt/body/ProxyBodyHandlerTest.java
Patch:
@@ -112,6 +112,7 @@ static RoutingHandler getTestHandler() {
     }
 
     @Test
+    @Ignore
     public void testGet() throws Exception {
         final Http2Client client = Http2Client.getInstance();
         final CountDownLatch latch = new CountDownLatch(1);
@@ -224,7 +225,7 @@ public void run() {
     }
 
     @Test
-    @Ignore
+    //@Ignore
     public void testPostJsonList() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         final Http2Client client = Http2Client.getInstance();

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -221,7 +221,6 @@ private void loadFiles(String configPath, String contextRoot) {
             for (String fileName : serviceFiles.keySet()) {
                 filePath=Paths.get(targetConfigsDirectory+"/"+fileName);
                 byte[] ba = decoder.decode(serviceFiles.get(fileName).toString().getBytes());
-                if(logger.isDebugEnabled()) logger.debug("filename = " + fileName + " content = " + new String(ba, StandardCharsets.UTF_8));
                 Files.write(filePath, ba);
             }
         }  catch (IOException e) {

File: decryptor/src/main/java/com/networknt/decrypt/ManualAESDecryptor.java
Patch:
@@ -9,7 +9,10 @@
  * <p>
  * To use this decryptor, adding the following line into config.yml
  * decryptorClass: com.networknt.decrypt.ManualAESDecryptor
+ *
+ * Please use the ManualAESSaltDescryptor instead.
  */
+@Deprecated
 public class ManualAESDecryptor extends AESDecryptor {
     @Override
     protected char[] getPassword() {

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -84,7 +84,7 @@ public class AuditHandler implements MiddlewareHandler {
     static final String QUERY_PARAMETERS_KEY = "queryParameters";
     static final String PATH_PARAMETERS_KEY = "pathParameters";
     static final String REQUEST_COOKIES_KEY = "requestCookies";
-    static final String STATUS_KEY = "Status";
+    static final String STATUS_KEY = "status";
     static final String SERVER_CONFIG = "server";
     static final String SERVICEID_KEY = "serviceId";
     static final String INVALID_CONFIG_VALUE_CODE = "ERR10060";

File: ip-whitelist/src/test/java/com/networknt/whitelist/WhitelistConfigTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.whitelist;
 
 import com.networknt.config.Config;
+import com.networknt.config.JsonMapper;
 import org.junit.Test;
 
 public class WhitelistConfigTest {

File: security/src/test/java/com/networknt/security/ClaimsUtil.java
Patch:
@@ -67,7 +67,7 @@ public static JwtClaims getTestCcClaimsScopeService(String clientId, String scop
         JwtClaims claims = JwtIssuer.getDefaultJwtClaims();
         claims.setClaim("client_id", clientId);
         claims.setClaim("scope", scope);
-        claims.setClaim("service", serviceId);
+        claims.setClaim("sid", serviceId);
         return claims;
     }
 

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -100,7 +100,7 @@ public class Http2Client {
     public static final AttachmentKey<String> RESPONSE_BODY = AttachmentKey.create(String.class);
     public static AttachmentKey<ByteBuffer> BUFFER_BODY = AttachmentKey.create(ByteBuffer.class);
 
-    static final String TLS = "tls";
+    public static final String TLS = "tls";
     static final String LOAD_TRUST_STORE = "loadTrustStore";
     static final String LOAD_KEY_STORE = "loadKeyStore";
     static final String TRUST_STORE = "trustStore";

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -63,6 +63,7 @@ public void checkPass(PortalRegistryService service, String token) {
         Map<String, Object> map = new HashMap<>();
         map.put("id", checkId);
         map.put("pass", true);
+        map.put("checkInterval", config.getCheckInterval());
         String path = "/services/check";
         ClientConnection connection = null;
         try {
@@ -87,6 +88,7 @@ public void checkFail(PortalRegistryService service, String token) {
         Map<String, Object> map = new HashMap<>();
         map.put("id", checkId);
         map.put("pass", false);
+        map.put("checkInterval", config.getCheckInterval());
         String path = "/services/check";
         ClientConnection connection = null;
         try {

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -127,7 +127,7 @@ public void registerService(PortalRegistryService service, String token) {
 
     @Override
     public void unregisterService(PortalRegistryService service, String token) {
-        String path = "/services?serviceId=" + service.getServiceId() + "&protocol=" + service.getProtocol() + "&address=" + service.getAddress() + "&port=" + service.getPort() + "%checkInterval=" + config.getCheckInterval();
+        String path = "/services?serviceId=" + service.getServiceId() + "&protocol=" + service.getProtocol() + "&address=" + service.getAddress() + "&port=" + service.getPort() + "&checkInterval=" + config.getCheckInterval();
         if(service.getTag() != null) path = path + "&tag=" + service.getTag();
         System.out.println("de-register path = " + path);
         ClientConnection connection = null;

File: config/src/main/java/com/networknt/config/JsonMapper.java
Patch:
@@ -22,6 +22,7 @@
 import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 
 import java.io.IOException;
 import java.util.List;
@@ -35,6 +36,7 @@ public class JsonMapper {
         objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
         objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
+        objectMapper.registerModule(new JavaTimeModule());
     }
 
     public static String toJson(Object x) {

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -127,7 +127,7 @@ public void registerService(PortalRegistryService service, String token) {
 
     @Override
     public void unregisterService(PortalRegistryService service, String token) {
-        String path = "/services?serviceId=" + service.getServiceId() + "&protocol=" + service.getProtocol() + "&address=" + service.getAddress() + "&port=" + service.getPort();
+        String path = "/services?serviceId=" + service.getServiceId() + "&protocol=" + service.getProtocol() + "&address=" + service.getAddress() + "&port=" + service.getPort() + "%checkInterval=" + config.getCheckInterval();
         if(service.getTag() != null) path = path + "&tag=" + service.getTag();
         System.out.println("de-register path = " + path);
         ClientConnection connection = null;

File: egress-router/src/main/java/com/networknt/router/RouterHandler.java
Patch:
@@ -34,12 +34,13 @@
  * @author Steve Hu
  */
 public class RouterHandler implements HttpHandler {
-    static final String CONFIG_NAME = "router";
-    static RouterConfig config = (RouterConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, RouterConfig.class);
+    private RouterConfig config;
 
     protected ProxyHandler proxyHandler;
 
     public RouterHandler() {
+        config = RouterConfig.load();
+
         // As we are building a client side router for the light platform, the assumption is the server will
         // be on HTTP 2.0 TSL always. No need to handle HTTP 1.1 case here.
         LoadBalancingRouterProxyClient client = new LoadBalancingRouterProxyClient();

File: client/src/main/java/com/networknt/client/http/HttpResponseValue.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  * The HttpResponseValue used to set the multipart  http response body
- * This object should only used for content in reponse body, please do not include http headers in it.
+ * This object should only used for content in response body, please do not include http headers in it.
  * For Headers, please use HttpServerExchange to set response  header:
  *  exchange.getResponseHeaders().add(new HttpString("Content-Type"), "application/json");
  *

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -85,9 +85,9 @@ public class DefaultConfigLoader implements IConfigLoader{
     public static final String DEFAULT_TARGET_CONFIGS_DIRECTORY ="src/main/resources/config";
 
     public static final String CONFIG_SERVER_URI = "light-config-server-uri";
-    public static final String CONFIG_SERVER_CONFIGS_CONTEXT_ROOT = "/configs";
-    public static final String CONFIG_SERVER_CERTS_CONTEXT_ROOT = "/certs";
-    public static final String CONFIG_SERVER_FILES_CONTEXT_ROOT = "/files";
+    public static final String CONFIG_SERVER_CONFIGS_CONTEXT_ROOT = "/config-server/configs";
+    public static final String CONFIG_SERVER_CERTS_CONTEXT_ROOT = "/config-server/certs";
+    public static final String CONFIG_SERVER_FILES_CONTEXT_ROOT = "/config-server/files";
     public static final String AUTHORIZATION = "config_server_authorization";
     public static final String CLIENT_TRUSTSTORE_PASS = "config_server_client_truststore_password";
     public static final String CLIENT_TRUSTSTORE_LOC = "config_server_client_truststore_location";

File: ingress-proxy/src/main/java/com/networknt/proxy/LightProxyHandler.java
Patch:
@@ -24,6 +24,7 @@
 import io.undertow.server.handlers.ResponseCodeHandler;
 import io.undertow.server.handlers.proxy.LoadBalancingProxyClient;
 import io.undertow.util.HeaderMap;
+import io.undertow.util.Headers;
 import io.undertow.util.HttpString;
 import org.jose4j.jwt.JwtClaims;
 import org.jose4j.jwt.consumer.InvalidJwtException;
@@ -49,7 +50,6 @@
 public class LightProxyHandler implements HttpHandler {
     static final String CONFIG_NAME = "proxy";
     static final String CLAIMS_KEY = "jwtClaims";
-    private static final String AUTH_HEADER_NAME = "Authorization";
     private static final int LONG_CLOCK_SKEW = 1000000;
 
     static final Logger logger = LoggerFactory.getLogger(LightProxyHandler.class);
@@ -96,9 +96,9 @@ public void handleRequest(HttpServerExchange httpServerExchange) throws Exceptio
     private JwtClaims extractClaimsFromJwt(HeaderMap headerValues) {
 
         // make sure request actually contained authentication header value
-        if(headerValues.get(AUTH_HEADER_NAME) != null)
+        if(headerValues.get(Headers.AUTHORIZATION_STRING) != null)
         {
-            String jwt = String.valueOf(headerValues.get(AUTH_HEADER_NAME)).split(" ")[1];
+            String jwt = String.valueOf(headerValues.get(Headers.AUTHORIZATION_STRING)).split(" ")[1];
             JwtConsumer jwtConsumer = new JwtConsumerBuilder()
                     .setSkipSignatureVerification()
                     .setSkipAllDefaultValidators()

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -173,13 +173,13 @@ public void testAuditWithErrorStatus() throws Exception {
     @Test
     public void testAudit401WithDumpRequest() throws Exception {
         runTest("/error", "post", null, 401);
-        verifyAuditInfo("requestBody", "post");
+        verifyAuditInfo("requestBody", "\"post\"");
     }
 
     @Test
     public void testAudit200WithDumpRequest() throws Exception {
         runTest("/pet", "post", null, 200);
-        verifyAuditInfo("requestBody", "post");
+        verifyAuditInfo("requestBody", "\"post\"");
     }
 
     // response body will only be returned when auditOnError is true

File: egress-router/src/main/java/com/networknt/router/middleware/SAMLTokenHandler.java
Patch:
@@ -58,7 +58,7 @@ public class SAMLTokenHandler implements MiddlewareHandler {
 
     public static Map<String, Object> config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
     static Logger logger = LoggerFactory.getLogger(SAMLTokenHandler.class);
-    private volatile HttpHandler next;
+    protected volatile HttpHandler next;
 
     static final String OAUTH = "oauth";
     static final String TOKEN = "token";

File: egress-router/src/main/java/com/networknt/router/middleware/ServiceDictHandler.java
Patch:
@@ -49,7 +49,7 @@ public class ServiceDictHandler implements MiddlewareHandler {
 	}
 	
     
-    private volatile HttpHandler next;
+    protected volatile HttpHandler next;
 
     static final String STATUS_INVALID_REQUEST_PATH = "ERR10007";
 

File: egress-router/src/main/java/com/networknt/router/middleware/TokenHandler.java
Patch:
@@ -67,7 +67,7 @@ public class TokenHandler implements MiddlewareHandler {
 
     public static Map<String, Object> config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
     static Logger logger = LoggerFactory.getLogger(TokenHandler.class);
-    private volatile HttpHandler next;
+    protected volatile HttpHandler next;
     // Cached jwt token for this handler on behalf of a client.
     private final Jwt cachedJwt = new Jwt();
     public TokenHandler() { }

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -200,7 +200,7 @@ AtomicReference<ClientResponse> send(ClientConnection connection, HttpString met
 
         ClientRequest request = new ClientRequest().setMethod(method).setPath(path);
         request.getRequestHeaders().put(Headers.HOST, "localhost");
-        if (token != null) request.getRequestHeaders().put(Headers.AUTHORIZATION, "Bearer " + token); // token is a JWT.
+        if (token != null) request.getRequestHeaders().put(Headers.AUTHORIZATION, token); // token is a JWT with Bearer prefix
         logger.trace("The request sent to controller: {} = request header: {}, request body is empty", uri.toString(), request.toString());
         if (StringUtils.isBlank(json)) {
             connection.sendRequest(request, client.createClientCallback(reference, latch));

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java
Patch:
@@ -278,8 +278,7 @@ private PortalRegistryConfig getPortalRegistryConfig(){
     }
 
     private String getPortalToken() {
-
-        return null;
+        return config.getPortalToken();
     }
 
 }

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -200,7 +200,7 @@ AtomicReference<ClientResponse> send(ClientConnection connection, HttpString met
 
         ClientRequest request = new ClientRequest().setMethod(method).setPath(path);
         request.getRequestHeaders().put(Headers.HOST, "localhost");
-        if (token != null) request.getRequestHeaders().put(HttpStringConstants.CONSUL_TOKEN, token);
+        if (token != null) request.getRequestHeaders().put(Headers.AUTHORIZATION, "Bearer " + token); // token is a JWT.
         logger.trace("The request sent to controller: {} = request header: {}, request body is empty", uri.toString(), request.toString());
         if (StringUtils.isBlank(json)) {
             connection.sendRequest(request, client.createClientCallback(reference, latch));

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -260,7 +260,7 @@ private Map<String, Object> getServiceConfigs(String configServerPath) {
 
         Map<String, Object> configs = new HashMap<>();
 
-        logger.debug("Calling Config Server endpoint:{}{}", configServerUri, configServerPath);
+        logger.debug("Calling Config Server endpoint:host{}:path{}", configServerUri, configServerPath);
         HttpRequest request = HttpRequest.newBuilder()
                 .uri(URI.create(configServerUri.trim() + configServerPath.trim()))
                 .header(Headers.AUTHORIZATION_STRING, authorization)

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -262,7 +262,7 @@ private Map<String, Object> getServiceConfigs(String configServerPath) {
 
         logger.debug("Calling Config Server endpoint:{}{}", configServerUri, configServerPath);
         HttpRequest request = HttpRequest.newBuilder()
-                .uri(URI.create(configServerUri + configServerPath))
+                .uri(URI.create(configServerUri.trim() + configServerPath.trim()))
                 .header(Headers.AUTHORIZATION_STRING, authorization)
                 .build();
 

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -147,7 +147,8 @@ public void init() {
             try {
                 String configPath = getConfigServerPath();
 
-                loadConfigs(configPath);
+                // This is the method in the future to load values.yml from the config server
+                // loadConfigs(configPath);
 
                 loadFiles(configPath, CONFIG_SERVER_CERTS_CONTEXT_ROOT);
 

File: server/src/integration/java/com/networknt/server/DefaultConfigLoaderIT.java
Patch:
@@ -6,6 +6,7 @@
 public class DefaultConfigLoaderIT {
     @Test
     public void testConfigServerHealth() throws Exception {
-        Assert.assertEquals("OK", DefaultConfigLoader.getConfigServerHealth("https://localhost:8443", "/health/liveness/com.networknt.config-server-1.0.0"));
+        DefaultConfigLoader configLoader = new DefaultConfigLoader();
+        Assert.assertEquals("OK", configLoader.getConfigServerHealth("https://localhost:8443", "/health/liveness/com.networknt.config-server-1.0.0"));
     }
 }

File: server/src/integration/java/com/networknt/server/DefaultConfigLoaderIT.java
Patch:
@@ -6,6 +6,6 @@
 public class DefaultConfigLoaderIT {
     @Test
     public void testConfigServerHealth() throws Exception {
-        Assert.assertEquals("OK", DefaultConfigLoader.getConfigServerHealth("https://localhost:8443", "/config-server/health"));
+        Assert.assertEquals("OK", DefaultConfigLoader.getConfigServerHealth("https://localhost:8443", "/health/liveness/com.networknt.config-server-1.0.0"));
     }
 }

File: jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerHandler.java
Patch:
@@ -103,7 +103,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         Span rootSpan = spanBuilder
                 .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_SERVER)
                 .withTag(Tags.PEER_HOSTNAME.getKey(), NetUtils.getLocalAddressByDatagram())
-                .withTag(Tags.PEER_PORT.getKey(), Server.config.getHttpsPort())
+                .withTag(Tags.PEER_PORT.getKey(), Server.getServerConfig().getHttpsPort())
                 .start();
         tracer.activateSpan(rootSpan);
         // This can be retrieved in the business handler to add tags and logs for tracing.

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -180,8 +180,7 @@ private void loadConfigs(String configPath) {
         //clear config cache: this is required just in case other classes have already loaded something in cache
         Config.getInstance().clear();
         Config.getInstance().putInConfigCache(CENTRALIZED_MANAGEMENT, serviceConfigs);
-        // Reset global pointer to the server.yml object
-        Server.config = Server.getServerConfig();
+        //You can call Server.getServerConfig() now.
     }
 
     /**

File: server/src/main/java/com/networknt/server/UrlConfigLoader.java
Patch:
@@ -148,8 +148,7 @@ private void loadConfigs() {
 		// loaded something in cache
 		Config.getInstance().clear();
 		Config.getInstance().putInConfigCache(CONFIGS_FILE_NAME, serviceConfigs);
-		// Reset global pointer to the server.yml object
-		Server.config = Server.getServerConfig();
+		// You can call Server.getServerConfig() from now.
 	}
 
 	private void loadFiles(String configType) {

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -107,6 +107,7 @@ public Status(final String code, final Object... args) {
      *
      * @param code Error Code
      * @param args A list of arguments that will be populated into the error description
+     * @param metadata a map of metadata attributes
      */
     public Status(final String code, final Map<String, Object> metadata, final Object... args) {
         this.code = code;

File: utility/src/main/java/com/networknt/utility/CollectionUtils.java
Patch:
@@ -84,6 +84,7 @@ public static boolean contains(Enumeration<?> enumeration, Object element) {
      * {@link Collection} implementation specific.
      * @param source the source Collection
      * @param candidates the candidates to search for
+     * @param <E> type
      * @return the first present object, or {@code null} if not found
      */
     @SuppressWarnings("unchecked")
@@ -103,6 +104,7 @@ public static <E> E findFirstMatch(Collection<?> source, Collection<E> candidate
      * Find a single value of the given type in the given Collection.
      * @param collection the Collection to search
      * @param type the type to look for
+     * @param <T> type
      * @return a value of the given type found if there is a clear match,
      * or {@code null} if none or more than one such value found
      */

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -86,10 +86,10 @@ public MiddlewareHandler setNext(final HttpHandler next) {
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if(firstTime) {
-            commonTags.put("api", Server.config.getServiceId());
-            commonTags.put("env", Server.config.getEnvironment());
+            commonTags.put("api", Server.getServerConfig().getServiceId());
+            commonTags.put("env", Server.getServerConfig().getEnvironment());
             commonTags.put("addr", Server.currentAddress);
-            commonTags.put("port", "" + Server.currentPort);
+            commonTags.put("port", "" + (Server.getServerConfig().isEnableHttps() ? Server.currentHttpsPort : Server.currentHttpPort));
             InetAddress inetAddress = Util.getInetAddress();
             commonTags.put("host", inetAddress == null ? "unknown" : inetAddress.getHostName()); // will be container id if in docker.
             if(logger.isDebugEnabled()) {

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -67,6 +67,7 @@ public class SingletonServiceFactory {
             e.printStackTrace();
             logger.error("Exception:", e);
         }
+        ModuleRegistry.registerModule(SingletonServiceFactory.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     private static Object handleSingleImpl(List<String> interfaceClasses, List<Object> value) throws Exception {

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -69,7 +69,8 @@ public static Map<String, Object> getServerInfo(final HttpServerExchange exchang
         infoMap.put("deployment", getDeployment());
         infoMap.put("environment", getEnvironment(exchange));
         infoMap.put("security", getSecurity());
-        infoMap.put("specification", Config.getInstance().getJsonMapConfigNoCache("openapi"));
+        // remove this as it is a rest specific. The specification is loaded in the specific handler.
+        // infoMap.put("specification", Config.getInstance().getJsonMapConfigNoCache("openapi"));
         infoMap.put("component", ModuleRegistry.getRegistry());
         return infoMap;
     }

File: client/src/main/java/com/networknt/client/oauth/ClientRequestComposerProvider.java
Patch:
@@ -113,6 +113,7 @@ public HttpRequest composeClientRequest(TokenRequest tokenRequest) {
                     .POST(HttpRequest.BodyPublishers.ofString(composeRequestBody(tokenRequest)))
                     .uri(URI.create(tokenRequest.getServerUrl() + tokenRequest.getUri()))
                     .setHeader(Headers.CONTENT_TYPE_STRING, "application/x-www-form-urlencoded")
+                    .setHeader(Headers.ACCEPT_STRING, "application/json")
                     .setHeader(Headers.AUTHORIZATION_STRING, OauthHelper.getBasicAuthHeader(tokenRequest.getClientId(), tokenRequest.getClientSecret()))
                     .build();
             return request;

File: client/src/main/java/com/networknt/client/oauth/KeyRequest.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.networknt.client.oauth;
 
-import com.networknt.client.ClientConfig;
-
 /**
  * This is the generic key request with an id as parameter. The static serverUrl will be used if
  * available. Otherwise, the serviceId will be used to lookup the key service. There are two sub

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -99,6 +99,7 @@ public static Result<TokenResponse> getTokenResult(TokenRequest tokenRequest, St
                         .followRedirects(HttpClient.Redirect.NORMAL)
                         .connectTimeout(Duration.ofMillis(ClientConfig.get().getTimeout()))
                         .sslContext(Http2Client.createSSLContext());
+                if(logger.isTraceEnabled()) logger.trace("proxyHost = " + tokenRequest.getProxyHost() + " proxyPort = " + tokenRequest.getProxyPort());
                 if(!StringUtils.isBlank(tokenRequest.getProxyHost())) clientBuilder.proxy(ProxySelector.of(new InetSocketAddress(tokenRequest.getProxyHost(), tokenRequest.getProxyPort() == 0 ? 443 : tokenRequest.getProxyPort())));
                 if(tokenRequest.isEnableHttp2()) clientBuilder.version(HttpClient.Version.HTTP_2);
                 tokenClient = clientBuilder.build();

File: client/src/main/java/com/networknt/client/oauth/TokenKeyRequest.java
Patch:
@@ -59,6 +59,9 @@ public TokenKeyRequest(String kid, boolean jwk) {
                     // there is no key section under oauth. look up in the oauth/token section for key
                     Map<String, Object> tokenConfig = ClientConfig.get().getTokenConfig();
                     if(tokenConfig != null) {
+                        setProxyHost((String)tokenConfig.get(ClientConfig.PROXY_HOST));
+                        int port = tokenConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)tokenConfig.get(ClientConfig.PROXY_PORT);
+                        setProxyPort(port);
                         keyConfig = (Map<String, Object>)tokenConfig.get(ClientConfig.KEY);
                         if(keyConfig != null) {
                             setKeyOptions(keyConfig);
@@ -79,9 +82,6 @@ public TokenKeyRequest(String kid, boolean jwk) {
 
     private void setKeyOptions(Map<String, Object> keyConfig) {
         setServerUrl((String)keyConfig.get(ClientConfig.SERVER_URL));
-        setProxyHost((String)keyConfig.get(ClientConfig.PROXY_HOST));
-        int port = keyConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)keyConfig.get(ClientConfig.PROXY_PORT);
-        setProxyPort(port);
         setServiceId((String)keyConfig.get(ClientConfig.SERVICE_ID));
         Object object = keyConfig.get(ClientConfig.ENABLE_HTTP2);
         setEnableHttp2(object != null && (Boolean) object);

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -92,13 +92,14 @@ public static Result<TokenResponse> getTokenResult(TokenRequest tokenRequest) {
      * @return Result of TokenResponse or error Status.
      */
     public static Result<TokenResponse> getTokenResult(TokenRequest tokenRequest, String envTag) {
+        // As the tokenClient will be reused frequently, we create it once and cache it.
         if(tokenClient == null) {
             try {
                 HttpClient.Builder clientBuilder = HttpClient.newBuilder()
                         .followRedirects(HttpClient.Redirect.NORMAL)
                         .connectTimeout(Duration.ofMillis(ClientConfig.get().getTimeout()))
                         .sslContext(Http2Client.createSSLContext());
-                if(tokenRequest.getProxyHost() != null) clientBuilder.proxy(ProxySelector.of(new InetSocketAddress(tokenRequest.getProxyHost(), tokenRequest.getProxyPort() == 0 ? 443 : tokenRequest.getProxyPort())));
+                if(!StringUtils.isBlank(tokenRequest.getProxyHost())) clientBuilder.proxy(ProxySelector.of(new InetSocketAddress(tokenRequest.getProxyHost(), tokenRequest.getProxyPort() == 0 ? 443 : tokenRequest.getProxyPort())));
                 if(tokenRequest.isEnableHttp2()) clientBuilder.version(HttpClient.Version.HTTP_2);
                 tokenClient = clientBuilder.build();
             } catch (IOException e) {

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryServiceTest.java
Patch:
@@ -37,7 +37,7 @@ public void testToString() {
         String s = service.toString();
         System.out.println("s = " + s);
         if(config.httpCheck) {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"protocol\":\"https\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:https:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":10000}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"protocol\":\"https\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:https:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"healthPath\":\"/health/\",\"tlsSkipVerify\":true,\"interval\":10000}}", s);
         } else {
             Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"protocol\":\"https\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:https:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"interval\":10000}}", s);
         }

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistryService.java
Patch:
@@ -82,7 +82,8 @@ public void setCheckString(String checkString) {
 
     public PortalRegistryService() {
         if(config.httpCheck) {
-            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s:%4$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"http\":\"" + "%2$s://%3$s:%4$s/health/%5$s" + "\",\"tlsSkipVerify\":true,\"interval\":" + config.checkInterval + "}}";
+            String healthPath = "%2$s://%3$s:%4$s" + config.getHealthPath() + "%5$s";
+            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s:%4$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"http\":\"" + healthPath + "\",\"tlsSkipVerify\":true,\"interval\":" + config.checkInterval + "}}";
         } else {
             checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s:%4$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"interval\":" + config.checkInterval + "}}";
         }

File: security/src/test/java/com/networknt/security/JwtIssuerTest.java
Patch:
@@ -79,7 +79,7 @@ public void longLivedReferenceJwt() throws Exception {
         Map<String, String> custom = new HashMap<>();
         custom.put("consumer_application_id", "361");
         custom.put("request_transit", "67");
-        JwtClaims claims = ClaimsUtil.getCustomClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("party.util.reference.read", "server.info.r"), custom, "user");
+        JwtClaims claims = ClaimsUtil.getCustomClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("party.util.reference.read", "server.info.r"), custom, "user admin");
         claims.setExpirationTimeMinutesInTheFuture(5256000);
         String jwt = JwtIssuer.getJwt(claims);
         System.out.println("***LongLived reference JWT***: " + jwt);

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.service;
 
 import com.networknt.config.Config;
+import com.networknt.utility.ModuleRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: consul/src/main/java/com/networknt/consul/ConsulConfig.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.consul;
 
 public class ConsulConfig {
+    public static final String CONFIG_NAME = "consul";
     String consulUrl;
     String consulToken;
     int maxReqPerConn;

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java
Patch:
@@ -26,6 +26,7 @@
 import com.networknt.registry.support.AbstractRegistry;
 import com.networknt.utility.ConcurrentHashSet;
 import com.networknt.utility.Constants;
+import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -58,6 +59,7 @@ public PortalRegistry(URL url, PortalRegistryClient client) {
         }
         lookupInterval = getUrl().getIntParameter(URLParamType.registrySessionTimeout.getName(), PortalRegistryConstants.DEFAULT_LOOKUP_INTERVAL);
         logger.info("PortalRegistry init finish.");
+        ModuleRegistry.registerModule(PortalRegistry.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
     }
 
     @Override

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.handler;
 
+import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.Tuple;
 import com.networknt.config.Config;
 import com.networknt.handler.config.EndpointSource;
@@ -74,6 +75,7 @@ public static void init() {
 		initChains();
 		initPaths();
 		initDefaultHandlers();
+		ModuleRegistry.registerModule(Handler.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), null);
 	}
 
 	/**

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -23,6 +23,7 @@
 import com.networknt.client.oauth.TokenKeyRequest;
 import com.networknt.config.Config;
 import com.networknt.exception.ExpiredTokenException;
+import com.networknt.status.Status;
 import com.networknt.utility.FingerPrintUtil;
 import org.jose4j.jwk.JsonWebKey;
 import org.jose4j.jwk.JsonWebKeySet;
@@ -68,6 +69,7 @@
  */
 public class JwtVerifier {
     static final Logger logger = LoggerFactory.getLogger(JwtVerifier.class);
+    static final String GET_KEY_ERROR = "ERR10066";
 
     public static final String KID = "kid";
     public static final String SECURITY_CONFIG = "security";
@@ -353,6 +355,7 @@ private List<JsonWebKey> getJsonWebKeySetForToken(String kid) {
             return new JsonWebKeySet(key).getJsonWebKeys();
         } catch (Exception e) {
             logger.error("Exception: ", e);
+            logger.error(new Status(GET_KEY_ERROR).toString());
             throw new RuntimeException(e);
         }
     }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -267,6 +267,7 @@ static private boolean bind(HttpHandler handler, int port) {
             server = builder.setBufferSize(serverConfig.getBufferSize()).setIoThreads(serverConfig.getIoThreads())
                     // above seems slightly faster in some configurations
                     .setSocketOption(Options.BACKLOG, serverConfig.getBacklog())
+                    .setServerOption(UndertowOptions.SHUTDOWN_TIMEOUT, serverConfig.getShutdownTimeout())
                     .setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, false) // don't send a keep-alive header for
                     // HTTP/1.1 requests, as it is not required
                     .setServerOption(UndertowOptions.ALWAYS_SET_DATE, serverConfig.isAlwaysSetDate())
@@ -357,7 +358,7 @@ static public void shutdown() {
             logger.info("Starting graceful shutdown.");
             gracefulShutdownHandler.shutdown();
             try {
-                gracefulShutdownHandler.awaitShutdown(60 * 1000);
+                gracefulShutdownHandler.awaitShutdown(getServerConfig().getShutdownGracefulPeriod());
             } catch (InterruptedException e) {
                 logger.error("Error occurred while waiting for pending requests to complete.", e);
             }

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -233,7 +233,7 @@ public static boolean shouldShowMetadata() {
     }
 
     public static boolean shouldShowMessage() {
-        return getConfig().get(SHOW_MESSAGE) == null ? false : (boolean)getConfig().get(SHOW_MESSAGE);
+        return getConfig().get(SHOW_MESSAGE) == null ? true : (boolean)getConfig().get(SHOW_MESSAGE);
     }
 
     public static boolean shouldShowDescription() {

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -23,7 +23,6 @@
 import com.networknt.client.oauth.TokenKeyRequest;
 import com.networknt.config.Config;
 import com.networknt.exception.ExpiredTokenException;
-import com.networknt.status.Status;
 import com.networknt.utility.FingerPrintUtil;
 import org.jose4j.jwk.JsonWebKey;
 import org.jose4j.jwk.JsonWebKeySet;
@@ -69,7 +68,6 @@
  */
 public class JwtVerifier {
     static final Logger logger = LoggerFactory.getLogger(JwtVerifier.class);
-    static final String GET_KEY_ERROR = "ERR10065";
 
     public static final String KID = "kid";
     public static final String SECURITY_CONFIG = "security";
@@ -355,7 +353,6 @@ private List<JsonWebKey> getJsonWebKeySetForToken(String kid) {
             return new JsonWebKeySet(key).getJsonWebKeys();
         } catch (Exception e) {
             logger.error("Exception: ", e);
-            logger.error(new Status(GET_KEY_ERROR).toString());
             throw new RuntimeException(e);
         }
     }

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -23,6 +23,7 @@
 import com.networknt.client.oauth.TokenKeyRequest;
 import com.networknt.config.Config;
 import com.networknt.exception.ExpiredTokenException;
+import com.networknt.status.Status;
 import com.networknt.utility.FingerPrintUtil;
 import org.jose4j.jwk.JsonWebKey;
 import org.jose4j.jwk.JsonWebKeySet;
@@ -68,6 +69,7 @@
  */
 public class JwtVerifier {
     static final Logger logger = LoggerFactory.getLogger(JwtVerifier.class);
+    static final String GET_KEY_ERROR = "ERR10065";
 
     public static final String KID = "kid";
     public static final String SECURITY_CONFIG = "security";
@@ -353,6 +355,7 @@ private List<JsonWebKey> getJsonWebKeySetForToken(String kid) {
             return new JsonWebKeySet(key).getJsonWebKeys();
         } catch (Exception e) {
             logger.error("Exception: ", e);
+            logger.error(new Status(GET_KEY_ERROR).toString());
             throw new RuntimeException(e);
         }
     }

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -136,6 +136,7 @@ default void setExchangeStatus(HttpServerExchange exchange, Status status) {
         if (auditStackTrace) {
             auditInfo.put(Constants.STACK_TRACE, Arrays.toString(elements));
         }
-        exchange.getResponseSender().send(status.toString());
+        exchange.getResponseSender().send(
+                status.toStringConditionally());
     }
 }

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -61,6 +61,9 @@ public class SingletonServiceFactory {
                 }
             }
         } catch (Exception e) {
+            // #883 during the server startup, any exception here will stops the server and there is no chance for the
+            // logback to output anything to the log file or stdout/stderr. That is the reason here to printStackTrace.
+            e.printStackTrace();
             logger.error("Exception:", e);
         }
     }

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -28,6 +28,7 @@
 import com.networknt.monad.Success;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.status.Status;
+import com.networknt.utility.StringUtils;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.*;
 import org.apache.commons.codec.binary.Base64;
@@ -284,7 +285,7 @@ public static String getKey(KeyRequest keyRequest, String envTag) throws ClientE
                     .followRedirects(HttpClient.Redirect.NORMAL)
                     .connectTimeout(Duration.ofMillis(ClientConfig.get().getTimeout()))
                     .sslContext(Http2Client.createSSLContext());
-            if(keyRequest.getProxyHost() != null) clientBuilder.proxy(ProxySelector.of(new InetSocketAddress(keyRequest.getProxyHost(), keyRequest.getProxyPort() == 0 ? 443 : keyRequest.getProxyPort())));
+            if(!StringUtils.isBlank(keyRequest.getProxyHost())) clientBuilder.proxy(ProxySelector.of(new InetSocketAddress(keyRequest.getProxyHost(), keyRequest.getProxyPort() == 0 ? 443 : keyRequest.getProxyPort())));
             if(keyRequest.isEnableHttp2()) clientBuilder.version(HttpClient.Version.HTTP_2);
             HttpClient keyClient = clientBuilder.build();
 

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -36,6 +36,9 @@ public class Constants {
     public static final String SCOPE_CLIENT_ID_STRING = "scope_client_id";
     public static final String SCOPE_STRING = "scope";
     public static final String SCP_STRING = "scp";
+    // use for light-aws-lambda to pass the scopes to the scope verifier from authorizer
+    public static final String PRIMARY_SCOPES = "primary_scopes";
+    public static final String SECONDARY_SCOPES = "secondary_scopes";
     public static final String ENDPOINT_STRING = "endpoint";
     public static final String CSRF_STRING = "csrf";
     public static final String AUTHORIZATION_STRING = "authorization";

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -27,7 +27,6 @@
 import com.networknt.client.ssl.ClientX509ExtendedTrustManager;
 import com.networknt.client.ssl.TLSConfig;
 import com.networknt.cluster.Cluster;
-import com.networknt.common.SecretConstants;
 import com.networknt.config.Config;
 import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.exception.ClientException;
@@ -37,7 +36,7 @@
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
-import com.networknt.utility.TlsUtil;
+import com.networknt.config.TlsUtil;
 import io.opentracing.Tracer;
 import io.opentracing.propagation.Format;
 import io.opentracing.tag.Tags;

File: config/src/main/java/com/networknt/config/TlsUtil.java
Patch:
@@ -1,6 +1,5 @@
-package com.networknt.utility;
+package com.networknt.config;
 
-import com.networknt.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: config/src/test/java/com/networknt/config/TlsUtilTest.java
Patch:
@@ -1,5 +1,6 @@
-package com.networknt.utility;
+package com.networknt.config;
 
+import com.networknt.config.TlsUtil;
 import org.junit.Assert;
 import org.junit.Test;
 

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -30,8 +30,7 @@
 import com.networknt.switcher.SwitcherUtil;
 import com.networknt.utility.Constants;
 import com.networknt.utility.NetUtils;
-import com.networknt.utility.TlsUtil;
-import com.networknt.utility.Util;
+import com.networknt.config.TlsUtil;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.StringUtils;
 import io.undertow.Handlers;
@@ -60,9 +61,9 @@ public class BodyHandler implements MiddlewareHandler {
 
     // request body will be parse during validation and it is attached to the exchange, in JSON,
     // it could be a map or list. So treat it as Object in the attachment.
-    public static final AttachmentKey<Object> REQUEST_BODY = AttachmentKey.create(Object.class);
+    public static final AttachmentKey<Object> REQUEST_BODY = AttachmentConstants.REQUEST_BODY;
 
-    public static final AttachmentKey<String> REQUEST_BODY_STRING = AttachmentKey.create(String.class);
+    public static final AttachmentKey<String> REQUEST_BODY_STRING = AttachmentConstants.REQUEST_BODY_STRING;
 
     public static final String CONFIG_NAME = "body";
 

File: http-string/src/main/java/com/networknt/httpstring/AttachmentConstants.java
Patch:
@@ -18,4 +18,6 @@ public class AttachmentConstants {
     public static final AttachmentKey<Tracer> EXCHANGE_TRACER = AttachmentKey.create(Tracer.class);
     // The key to the audit info attachment in exchange. Allow other handlers to set values.
     public static final AttachmentKey<Map> AUDIT_INFO = AttachmentKey.create(Map.class);
+    public static final AttachmentKey<Object> REQUEST_BODY = AttachmentKey.create(Object.class);
+    public static final AttachmentKey<String> REQUEST_BODY_STRING = AttachmentKey.create(String.class);
 }

File: balance/src/main/java/com/networknt/balance/ConsistentHashLoadBalance.java
Patch:
@@ -51,7 +51,7 @@ public ConsistentHashLoadBalance() {
 
 
     @Override
-    public URL select(List<URL> urls, String requestKey) {
+    public URL select(List<URL> urls, String serviceId, String tag, String requestKey) {
         URL url = null;
         if (urls.size() > 1) {
             url = doSelect(urls, requestKey);

File: balance/src/main/java/com/networknt/balance/LoadBalance.java
Patch:
@@ -27,10 +27,12 @@ public interface LoadBalance {
      * Select one url from a list of url with requestKey as optional.
      *
      * @param urls List
+     * @param serviceId String
+     * @param tag String
      * @param requestKey String
      * @return URL
      */
-    URL select(List<URL> urls, String requestKey);
+    URL select(List<URL> urls, String serviceId, String tag, String requestKey);
 
     /**
      * return positive int value of originValue

File: balance/src/test/java/com/networknt/balance/LocalFirstLoadBalanceTest.java
Patch:
@@ -46,7 +46,7 @@ public void testSelect() throws Exception {
         urls.add(new URLImpl("http", "127.0.0.11", 8082, "v1", new HashMap<String, String>()));
         urls.add(new URLImpl("http", "127.0.0.12", 8083, "v1", new HashMap<String, String>()));
         urls.add(new URLImpl("http", "127.0.0.115", 8084, "v1", new HashMap<String, String>()));
-        URL url = loadBalance.select(urls, null);
+        URL url = loadBalance.select(urls, "serviceId", "tag", null);
         Assert.assertEquals(url, URLImpl.valueOf("http://127.0.0.1:8081/v1"));
     }
     
@@ -59,14 +59,14 @@ public void testSelectFirstThenRoundRobin() throws Exception{
         urls.add(new URLImpl("http", "127.0.0.10", 8084, "v1", new HashMap<String, String>()));
 
         // no local host URL available, go round-robin
-        URL url = loadBalance.select(urls, null);
+        URL url = loadBalance.select(urls, "serviceId", "tag", null);
         Assert.assertTrue(urls.contains(url));
     }
     
     @Test
     public void testSelectWithEmptyList() throws Exception {
         List<URL> urls = new ArrayList<>();
-        URL url = loadBalance.select(urls, null);
+        URL url = loadBalance.select(urls, "serviceId", "tag", null);
         Assert.assertNull(url);
     }
 }

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -57,7 +57,7 @@ public LightCluster() {
      */
     @Override
     public String serviceToUrl(String protocol, String serviceId, String tag, String requestKey) {
-        URL url = loadBalance.select(discovery(protocol, serviceId, tag), requestKey);
+        URL url = loadBalance.select(discovery(protocol, serviceId, tag), serviceId, tag, requestKey);
         if (url != null) {
             logger.debug("Final url after load balance = {}.", url);
             // construct a url in string

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -38,6 +38,7 @@ public class Constants {
     public static final String SCP_STRING = "scp";
     public static final String ENDPOINT_STRING = "endpoint";
     public static final String CSRF_STRING = "csrf";
+    public static final String AUTHORIZATION_STRING = "authorization";
 
     // Swagger 2.0 operation header name
     public static final String SWAGGER_OPERATION_STRING = "swagger_operation";

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -114,11 +114,11 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
 
                 // add additional fields accumulated during the microservice execution
                 // according to the config
-                //Map<String, Object> auditInfo1 = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
-                if(auditInfo != null) {
+                Map<String, Object> auditInfo1 = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
+                if(auditInfo1 != null) {
                     if(auditConfig.getAuditList() != null && auditConfig.getAuditList().size() > 0) {
                         for(String name: auditConfig.getAuditList()) {
-                            auditMap.putIfAbsent(name, auditInfo.get(name));
+                            auditMap.putIfAbsent(name, auditInfo1.get(name));
                         }
                     }
                 }

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -78,7 +78,6 @@ default void setExchangeStatus(HttpServerExchange exchange, Status status) {
         exchange.setStatusCode(status.getStatusCode());
         exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
         status.setDescription(status.getDescription().replaceAll("\\\\", "\\\\\\\\"));
-        exchange.getResponseSender().send(status.toString());
         StackTraceElement[] elements = Thread.currentThread().getStackTrace();
         logger.error(status.toString() + " at " + elements[2].getClassName() + "." + elements[2].getMethodName() + "(" + elements[2].getFileName() + ":" + elements[2].getLineNumber() + ")");
         // In normal case, the auditInfo shouldn't be null as it is created by OpenApiHandler with
@@ -96,5 +95,6 @@ default void setExchangeStatus(HttpServerExchange exchange, Status status) {
         if(auditStackTrace) {
             auditInfo.put(Constants.STACK_TRACE, Arrays.toString(elements));
         }
+        exchange.getResponseSender().send(status.toString());
     }
 }

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -103,13 +103,13 @@ protected void doUnregister(URL url) {
     @Override
     protected void doSubscribe(URL url, NotifyListener listener) {
         subscribeUrls.putIfAbsent(url, 1);
-        listener.notify(this.getUrl(), doDiscover(url));
+        if(listener != null) listener.notify(this.getUrl(), doDiscover(url));
     }
 
     @Override
     protected void doUnsubscribe(URL url, NotifyListener listener) {
         subscribeUrls.remove(url);
-        listener.notify(this.getUrl(), doDiscover(url));
+        if(listener != null) listener.notify(this.getUrl(), doDiscover(url));
     }
 
     @Override

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -27,9 +27,11 @@ public class Constants {
     public static final String CORRELATION_ID_STRING = "X-Correlation-Id";
     public static final String TRACEABILITY_ID_STRING = "X-Traceability-Id";
     public static final String USER_ID_STRING = "user_id";
+    public static final String UID_STRING = "uid";
     public static final String USER_TYPE_STRING = "user_type";
     public static final String ROLES_STRING = "roles";
     public static final String CLIENT_ID_STRING = "client_id";
+    public static final String CID_STRING = "cid";
     public static final String CALLER_ID_STRING = "caller_id";
     public static final String SCOPE_CLIENT_ID_STRING = "scope_client_id";
     public static final String SCOPE_STRING = "scope";

File: cluster/src/test/java/com/networknt/cluster/LightClusterTest.java
Patch:
@@ -40,10 +40,13 @@ public void testServiceToUrl() {
     @Test
     public void testServiceToUrlWithEnvironment() {
         String s = cluster.serviceToUrl("https", "com.networknt.portal.command-1.0.0", "0000", null);
+        System.out.println(s);
         Assert.assertTrue("https://localhost:8440".equals(s));
         s = cluster.serviceToUrl("https", "com.networknt.portal.command-1.0.0", "0001", null);
+        System.out.println(s);
         Assert.assertTrue("https://localhost:8441".equals(s));
         s = cluster.serviceToUrl("https", "com.networknt.portal.command-1.0.0", "0002", null);
+        System.out.println(s);
         Assert.assertTrue("https://localhost:8442".equals(s));
 
     }

File: consul/src/integration/java/com/networknt/consul/ConsulTestIT.java
Patch:
@@ -60,10 +60,10 @@ public void doRegisterAndAvailable() throws Exception {
     @Ignore
     public void discoverService() throws Exception {
         registry.doRegister(serviceUrl);
-        List<URL> urls = registry.discoverService(serviceUrl);
+        List<URL> urls = registry.discover(serviceUrl);
         Assert.assertEquals(urls.size(), 0);
         Thread.sleep(sleepTime);
-        urls = registry.discoverService(serviceUrl);
+        urls = registry.discover(serviceUrl);
         //Assert.assertTrue(urls.contains(serviceUrl));
     }
 

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryTest.java
Patch:
@@ -18,9 +18,7 @@
 
 import com.networknt.config.JsonMapper;
 import com.networknt.portal.registry.client.PortalRegistryClient;
-import com.networknt.registry.NotifyListener;
 import com.networknt.registry.Registry;
-import com.networknt.registry.support.command.ServiceListener;
 import com.networknt.registry.URL;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.utility.StringUtils;

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistry.java
Patch:
@@ -171,7 +171,7 @@ protected List<URL> doDiscover(URL url) {
                 urls = serviceCache.get(key);
                 if (urls == null || urls .isEmpty()) {
                     ConcurrentHashMap<String, List<URL>> serviceUrls = lookupServiceUpdate(protocol, serviceId, tag);
-                    updateServiceCache(serviceId, serviceUrls, false);
+                    updateServiceCache(key, serviceUrls, false);
                     urls = serviceCache.get(key);
                 }
             }

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryWebSocketClient.java
Patch:
@@ -26,6 +26,7 @@ public PortalRegistryWebSocketClient(URI uri) throws IOException {
         UndertowXnioSsl ssl = new UndertowXnioSsl(Xnio.getInstance(), OptionMap.EMPTY, Http2Client.createSSLContext());
         final io.undertow.websockets.client.WebSocketClient.ConnectionBuilder connectionBuilder = io.undertow.websockets.client.WebSocketClient.connectionBuilder(Http2Client.WORKER, Http2Client.BUFFER_POOL, uri).setSsl(ssl);
         IoFuture<WebSocketChannel> future = connectionBuilder.connect();
+        channel = future.get();
         future.addNotifier(futureNotifier, null);
     }
 

File: registry/src/main/java/com/networknt/registry/support/AbstractRegistry.java
Patch:
@@ -38,7 +38,7 @@
  * @author fishermen
  */
 
-abstract class AbstractRegistry implements Registry {
+public abstract class AbstractRegistry implements Registry {
     private static final Logger logger = LoggerFactory.getLogger(AbstractRegistry.class);
 
     private ConcurrentHashMap<URL, Map<String, List<URL>>> subscribedCategoryResponses =
@@ -48,7 +48,7 @@ abstract class AbstractRegistry implements Registry {
     private Set<URL> registeredServiceUrls = new ConcurrentHashSet<>();
     protected String registryClassName = this.getClass().getSimpleName();
 
-    AbstractRegistry(URL url) {
+    public AbstractRegistry(URL url) {
         this.registryUrl = url.createCopy();
         // register a heartbeat switcher to perceive service state change and change available state
         SwitcherUtil.registerSwitcherListener(Constants.REGISTRY_HEARTBEAT_SWITCHER, new SwitcherListener() {

File: portal-registry/src/integration/java/com/networknt/portal/registry/PortalRegistryTestIT.java
Patch:
@@ -60,10 +60,10 @@ public void doRegisterAndAvailable() throws Exception {
     @Ignore
     public void discoverService() throws Exception {
         registry.doRegister(serviceUrl);
-        List<URL> urls = registry.discoverService(serviceUrl);
+        List<URL> urls = registry.doDiscover(serviceUrl);
         Assert.assertEquals(urls.size(), 0);
         Thread.sleep(sleepTime);
-        urls = registry.discoverService(serviceUrl);
+        urls = registry.doDiscover(serviceUrl);
         //Assert.assertTrue(urls.contains(serviceUrl));
     }
 

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClient.java
Patch:
@@ -16,9 +16,8 @@
 package com.networknt.portal.registry.client;
 
 import java.util.List;
+import java.util.Map;
 
-import com.networknt.portal.registry.PortalRegistry;
-import com.networknt.portal.registry.PortalRegistryResponse;
 import com.networknt.portal.registry.PortalRegistryService;
 
 public interface PortalRegistryClient {
@@ -63,6 +62,6 @@ public interface PortalRegistryClient {
 	 * @param token consul token for security
 	 * @return T
 	 */
-	PortalRegistryResponse<List<PortalRegistryService>> lookupHealthService(String serviceId, String tag, String token);
+	List<Map<String, Object>> lookupHealthService(String serviceId, String tag, String token);
 
 }

File: metrics/src/main/java/com/networknt/metrics/JVMMetricsInfluxDbReporter.java
Patch:
@@ -55,7 +55,7 @@ private void reportGauge(MetricName name, Gauge<?> gauge, long now) {
         final String value = format(gauge.getValue());
         if(value != null) {
             Map<String, String> apiTags = new HashMap<>(name.getTags());
-            String apiName = apiTags.remove("apiName");
+            String apiName = apiTags.remove("api");
             Map<String, String> clientTags = new HashMap<>(name.getTags());
             String clientId = clientTags.remove("clientId");
 

File: info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java
Patch:
@@ -102,11 +102,10 @@ public void testServerInfo() throws Exception {
         }
         int statusCode = reference.get().getResponseCode();
         String body = reference.get().getAttachment(Http2Client.RESPONSE_BODY);
+        logger.debug("body = " + body);
         Assert.assertEquals(200, statusCode);
         if(statusCode == 200) {
             Assert.assertNotNull(body);
-            logger.debug(body);
         }
     }
-
 }

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistryUtils.java
Patch:
@@ -58,6 +58,7 @@ public static PortalRegistryService buildService(URL url) {
         service.setAddress(url.getHost());
         service.setServiceId(convertPortalRegistrySerivceId(url));
         service.setName(url.getPath());
+        service.setProtocol(url.getProtocol());
         service.setPort(url.getPort());
         String env = url.getParameter(Constants.TAG_ENVIRONMENT);
         if(env != null) service.setTag(env);

File: portal-registry/src/test/java/com/networknt/portal/registry/MockUtils.java
Patch:
@@ -37,6 +37,7 @@ public static PortalRegistryService getMockService(int port) {
         service.setAddress(address);
         service.setServiceId(path);
         service.setName(group);
+        service.setProtocol(protocol);
         service.setPort(port);
         service.setTag(tag);
         return service;

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryServiceTest.java
Patch:
@@ -29,16 +29,17 @@ public void testToString() {
         PortalRegistryService service = new PortalRegistryService();
         service.setServiceId("com.networknt.apib-1.0.0");
         service.setName("apib");
+        service.setProtocol("https");
         service.setAddress("127.0.0.1");
         service.setPort(7442);
         service.setTag("uat1");
 
         String s = service.toString();
         System.out.println("s = " + s);
         if(config.httpCheck) {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":10000}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"protocol\":\"https\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:https:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":10000}}", s);
         } else {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"interval\":10000}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"protocol\":\"https\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:https:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"interval\":10000}}", s);
         }
     }
 }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -510,7 +510,7 @@ public static URL register(String serviceId, int port) {
             Map parameters = new HashMap<>();
             if (serverConfig.getEnvironment() != null)
                 parameters.put(ENV_PROPERTY_KEY, serverConfig.getEnvironment());
-            URL serviceUrl = new URLImpl("light", ipAddress, port, serviceId, parameters);
+            URL serviceUrl = new URLImpl(serverConfig.enableHttps ? "https" : "http", ipAddress, port, serviceId, parameters);
             if (logger.isInfoEnabled()) logger.info("register service: " + serviceUrl.toFullStr());
             registry.register(serviceUrl);
             return serviceUrl;

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -60,7 +60,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             infoMap.put("deployment", getDeployment());
             infoMap.put("environment", getEnvironment(exchange));
             infoMap.put("security", getSecurity());
-            infoMap.put("specification", Config.getInstance().getJsonMapConfigNoCache("swagger"));
+            infoMap.put("specification", Config.getInstance().getJsonMapConfigNoCache("openapi"));
             infoMap.put("component", ModuleRegistry.getRegistry());
             exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
             exchange.getResponseSender().send(Config.getInstance().getMapper().writeValueAsString(infoMap));
@@ -167,11 +167,11 @@ private String getServerTlsFingerPrint() {
         Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfigNoCache("server");
         // load keystore here based on server config and secret config
         String keystoreName = (String)serverConfig.get("keystoreName");
-        String serverKeystorePass = (String)serverConfig.get("serverKeystorePass");
+        String keystorePass = (String)serverConfig.get("keystorePass");
         if(keystoreName != null) {
             try (InputStream stream = Config.getInstance().getInputStreamFromFile(keystoreName)) {
                 KeyStore loadedKeystore = KeyStore.getInstance("JKS");
-                loadedKeystore.load(stream, serverKeystorePass.toCharArray());
+                loadedKeystore.load(stream, keystorePass.toCharArray());
                 X509Certificate cert = (X509Certificate)loadedKeystore.getCertificate("server");
                 if(cert != null) {
                     fingerPrint = FingerPrintUtil.getCertFingerPrint(cert);

File: client/src/main/java/com/networknt/client/listener/ByteBufferReadChannelListener.java
Patch:
@@ -2,12 +2,10 @@
 
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.connector.PooledByteBuffer;
-import io.undertow.websockets.core.UTF8Output;
 import org.xnio.ChannelListener;
 import org.xnio.IoUtils;
 import org.xnio.channels.StreamSourceChannel;
 
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistryService.java
Patch:
@@ -74,7 +74,7 @@ public PortalRegistryService() {
         if(config.httpCheck) {
             checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"http\":\"" + "https://%2$s:%3$s/health/%4$s" + "\",\"tlsSkipVerify\":true,\"interval\":" + config.checkInterval + "}}";
         } else {
-            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"ttl\":" + config.checkInterval + "}}";
+            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"interval\":" + config.checkInterval + "}}";
         }
     }
 

File: portal-registry/src/main/java/com/networknt/portal/registry/client/PortalRegistryClientImpl.java
Patch:
@@ -116,6 +116,7 @@ public void registerService(PortalRegistryService service, String token) {
             int statusCode = reference.get().getResponseCode();
             if (statusCode >= UNUSUAL_STATUS_CODE) {
                 logger.error("Failed to register on portal controller: {} : {}", statusCode, reference.get().getAttachment(Http2Client.RESPONSE_BODY));
+                System.out.println("Error registerService: " + reference.get().getAttachment(Http2Client.RESPONSE_BODY));
                 throw new Exception("Failed to register on portal controller: " + statusCode);
             }
         } catch (Exception e) {

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryServiceTest.java
Patch:
@@ -38,7 +38,7 @@ public void testToString() {
         if(config.httpCheck) {
             Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":10000}}", s);
         } else {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"ttl\":10000}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"interval\":10000}}", s);
         }
     }
 }

File: portal-registry/src/main/java/com/networknt/portal/registry/PortalRegistryService.java
Patch:
@@ -72,9 +72,9 @@ public void setCheckString(String checkString) {
 
     public PortalRegistryService() {
         if(config.httpCheck) {
-            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"http\":\"" + "https://%2$s:%3$s/health/%1$s" + "\",\"tlsSkipVerify\":true,\"interval\":\"" + config.checkInterval + "\"}}";
+            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"http\":\"" + "https://%2$s:%3$s/health/%4$s" + "\",\"tlsSkipVerify\":true,\"interval\":" + config.checkInterval + "}}";
         } else {
-            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"ttl\":\"" + config.checkInterval + "\"}}";
+            checkString = ",\"check\":{\"id\":\"%1$s:%2$s:%3$s\",\"deregisterCriticalServiceAfter\":" + config.deregisterAfter + ",\"ttl\":" + config.checkInterval + "}}";
         }
     }
 
@@ -91,7 +91,7 @@ public String toString() {
                 + (tag != null ? "\",\"tag\":\"" + tag : "")
                 + "\",\"address\":\"" + address
                 + "\",\"port\":" + port
-                + String.format(checkString, key, address, port);
+                + String.format(checkString, key, address, port, serviceId);
     }
 
 }

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryServiceTest.java
Patch:
@@ -36,9 +36,9 @@ public void testToString() {
         String s = service.toString();
         System.out.println("s = " + s);
         if(config.httpCheck) {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":\"2m\",\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":\"10s\"}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":10000}}", s);
         } else {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":\"2m\",\"ttl\":\"10s\"}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":120000,\"ttl\":10000}}", s);
         }
     }
 }

File: portal-registry/src/test/java/com/networknt/portal/registry/PortalRegistryServiceTest.java
Patch:
@@ -36,9 +36,9 @@ public void testToString() {
         String s = service.toString();
         System.out.println("s = " + s);
         if(config.httpCheck) {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"check-com.networknt.apib-1.0.0:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":\"2m\",\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":\"10s\"}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":\"2m\",\"http\":\"https://127.0.0.1:7442/health/com.networknt.apib-1.0.0\",\"tlsSkipVerify\":true,\"interval\":\"10s\"}}", s);
         } else {
-            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"check-com.networknt.apib-1.0.0:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":\"2m\",\"ttl\":\"10s\"}}", s);
+            Assert.assertEquals("{\"serviceId\":\"com.networknt.apib-1.0.0\",\"name\":\"apib\",\"tag\":\"uat1\",\"address\":\"127.0.0.1\",\"port\":7442,\"check\":{\"id\":\"com.networknt.apib-1.0.0|uat1:127.0.0.1:7442\",\"deregisterCriticalServiceAfter\":\"2m\",\"ttl\":\"10s\"}}", s);
         }
     }
 }

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -997,7 +997,7 @@ private static SSLContext createTestSSLContext(boolean verifyHostName, String tr
                 Boolean loadKeyStore = (Boolean) tlsMap.get(Http2Client.LOAD_KEY_STORE);
                 if (loadKeyStore != null && loadKeyStore) {
                     String keyStoreName = (String)tlsMap.get(Http2Client.KEY_STORE);
-                    String keyPass = (String) ClientConfig.get().getSecretConfig().get(SecretConstants.CLIENT_KEY_PASS);
+                    String keyPass = (String) tlsMap.get(Http2Client.KEY_PASS);
                     KeyStore keyStore = loadKeyStore(keyStoreName);
                     KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
                     keyManagerFactory.init(keyStore, keyPass.toCharArray());
@@ -1019,8 +1019,8 @@ private static SSLContext createTestSSLContext(boolean verifyHostName, String tr
                     if (trustStoreName != null && trustStorePass != null) {
                         if(logger.isInfoEnabled()) logger.info("Loading trust store from system property at " + Encode.forJava(trustStoreName));
                     } else {
-                        trustStoreName = (String) tlsMap.get(Http2Client.TRUST_STORE);
-                        trustStorePass = (String)ClientConfig.get().getSecretConfig().get(SecretConstants.CLIENT_TRUSTSTORE_PASS);
+                        trustStoreName = (String)tlsMap.get(Http2Client.TRUST_STORE);
+                        trustStorePass = (String)tlsMap.get(Http2Client.TRUST_STORE_PASS);
                         if(logger.isInfoEnabled()) logger.info("Loading trust store from config at " + Encode.forJava(trustStoreName));
                     }
                     if (trustStoreName != null && trustStorePass != null) {

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -165,10 +165,9 @@ public String getFrameworkVersion() {
     private String getServerTlsFingerPrint() {
         String fingerPrint = null;
         Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfigNoCache("server");
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfigNoCache("secret");
         // load keystore here based on server config and secret config
         String keystoreName = (String)serverConfig.get("keystoreName");
-        String serverKeystorePass = (String)secretConfig.get("serverKeystorePass");
+        String serverKeystorePass = (String)serverConfig.get("serverKeystorePass");
         if(keystoreName != null) {
             try (InputStream stream = Config.getInstance().getInputStreamFromFile(keystoreName)) {
                 KeyStore loadedKeystore = KeyStore.getInstance("JKS");

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -86,14 +86,13 @@ public void testVerifyJwt() throws Exception {
 
     @Test
     public void testVerifyJwtByJsonWebKeys() throws Exception {
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(JwtIssuer.SECRET_CONFIG);
         JwtConfig jwtConfig = (JwtConfig) Config.getInstance().getJsonObjectConfig(JwtIssuer.JWT_CONFIG, JwtConfig.class);
 
         String fileName = jwtConfig.getKey().getFilename();
         String alias = jwtConfig.getKey().getKeyName();
 
-        KeyStore ks = loadKeystore(fileName, (String)secretConfig.get(JwtIssuer.JWT_PRIVATE_KEY_PASSWORD));
-        Key privateKey = ks.getKey(alias, ((String) secretConfig.get(JwtIssuer.JWT_PRIVATE_KEY_PASSWORD)).toCharArray());
+        KeyStore ks = loadKeystore(fileName, jwtConfig.getKey().getPassword());
+        Key privateKey = ks.getKey(alias, jwtConfig.getKey().getPassword().toCharArray());
 
         JsonWebSignature jws = new JsonWebSignature();
 

File: security/src/test/java/com/networknt/security/JwtVerifierTest.java
Patch:
@@ -108,14 +108,13 @@ public void testVerifyJwt() throws Exception {
 
     @Test
     public void testVerifyJwtByJsonWebKeys() throws Exception {
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(JwtIssuer.SECRET_CONFIG);
         JwtConfig jwtConfig = (JwtConfig) Config.getInstance().getJsonObjectConfig(JwtIssuer.JWT_CONFIG, JwtConfig.class);
 
         String fileName = jwtConfig.getKey().getFilename();
         String alias = jwtConfig.getKey().getKeyName();
 
-        KeyStore ks = loadKeystore(fileName, (String)secretConfig.get(JwtIssuer.JWT_PRIVATE_KEY_PASSWORD));
-        Key privateKey = ks.getKey(alias, ((String) secretConfig.get(JwtIssuer.JWT_PRIVATE_KEY_PASSWORD)).toCharArray());
+        KeyStore ks = loadKeystore(fileName, jwtConfig.getKey().getPassword());
+        Key privateKey = ks.getKey(alias, jwtConfig.getKey().getPassword().toCharArray());
 
         JsonWebSignature jws = new JsonWebSignature();
 

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -213,7 +213,8 @@ private void loadFiles(String configPath, String contextRoot) {
      * This is a public method that is used to test the connectivity in the integration test to ensure that the
      * light-config-server can be connected with the default bootstrap.truststore. There is no real value for
      * this method other than that.
-     *
+     * @param host config server host
+     * @param path config server path
      * @return String of OK
      */
     public static String getConfigServerHealth(String host, String path) {

File: client/src/main/java/com/networknt/client/ClientConfig.java
Patch:
@@ -11,6 +11,8 @@ public final class ClientConfig {
     public static final String CONFIG_SECRET = "secret";
     public static final String REQUEST = "request";
     public static final String SERVER_URL = "server_url";
+    public static final String PROXY_HOST = "proxyHost";
+    public static final String PROXY_PORT = "proxyPort";
     public static final String SERVICE_ID = "serviceId";
     public static final String URI = "uri";
     public static final String CLIENT_ID = "client_id";

File: client/src/main/java/com/networknt/client/http/HttpRequestValue.java
Patch:
@@ -52,6 +52,8 @@ public  BodyPart getBody(String key) {
 
     /**
      * Indicates whether this entity has a body part by the key.
+     * @param key the key
+     * @return true if has body
      */
     public boolean hasBody(String key) {
         return (this.bodyPartMap==null? false : this.bodyPartMap.containsKey(key) );

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -41,6 +41,9 @@ public AuthorizationCodeRequest() {
         Map<String, Object> tokenConfig = ClientConfig.get().getTokenConfig();
         if(tokenConfig != null) {
             setServerUrl((String)tokenConfig.get(ClientConfig.SERVER_URL));
+            setProxyHost((String)tokenConfig.get(ClientConfig.PROXY_HOST));
+            int port = tokenConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)tokenConfig.get(ClientConfig.PROXY_PORT);
+            setProxyPort(port);
             setServiceId((String)tokenConfig.get(ClientConfig.SERVICE_ID));
             Object object = tokenConfig.get(ClientConfig.ENABLE_HTTP2);
             setEnableHttp2(object != null && (Boolean) object);

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -41,6 +41,9 @@ public ClientCredentialsRequest() {
         Map<String, Object> tokenConfig = ClientConfig.get().getTokenConfig();
         if(tokenConfig != null) {
             setServerUrl((String)tokenConfig.get(ClientConfig.SERVER_URL));
+            setProxyHost((String)tokenConfig.get(ClientConfig.PROXY_HOST));
+            int port = tokenConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)tokenConfig.get(ClientConfig.PROXY_PORT);
+            setProxyPort(port);
             setServiceId((String)tokenConfig.get(ClientConfig.SERVICE_ID));
             Object object = tokenConfig.get(ClientConfig.ENABLE_HTTP2);
             setEnableHttp2(object != null && (Boolean) object);

File: client/src/main/java/com/networknt/client/oauth/RefreshTokenRequest.java
Patch:
@@ -32,6 +32,9 @@ public RefreshTokenRequest() {
         Map<String, Object> tokenConfig = ClientConfig.get().getTokenConfig();
         if(tokenConfig != null) {
             setServerUrl((String)tokenConfig.get(ClientConfig.SERVER_URL));
+            setProxyHost((String)tokenConfig.get(ClientConfig.PROXY_HOST));
+            int port = tokenConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)tokenConfig.get(ClientConfig.PROXY_PORT);
+            setProxyPort(port);
             setServiceId((String)tokenConfig.get(ClientConfig.SERVICE_ID));
             Object object = tokenConfig.get(ClientConfig.ENABLE_HTTP2);
             setEnableHttp2(object != null && (Boolean) object);

File: client/src/main/java/com/networknt/client/oauth/SignKeyRequest.java
Patch:
@@ -45,6 +45,9 @@ public SignKeyRequest(String kid) {
             Map<String, Object> keyConfig = (Map<String, Object>)signConfig.get(ClientConfig.KEY);
             if(keyConfig != null) {
                 setServerUrl((String)keyConfig.get(ClientConfig.SERVER_URL));
+                setProxyHost((String)keyConfig.get(ClientConfig.PROXY_HOST));
+                int port = keyConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)keyConfig.get(ClientConfig.PROXY_PORT);
+                setProxyPort(port);
                 setServiceId((String)keyConfig.get(ClientConfig.SERVICE_ID));
                 Object object = keyConfig.get(ClientConfig.ENABLE_HTTP2);
                 setEnableHttp2(object != null && (Boolean) object);

File: client/src/main/java/com/networknt/client/oauth/TokenKeyRequest.java
Patch:
@@ -83,6 +83,9 @@ public TokenKeyRequest(String kid, boolean jwk) {
 
     private void setKeyOptions(Map<String, Object> keyConfig) {
         setServerUrl((String)keyConfig.get(ClientConfig.SERVER_URL));
+        setProxyHost((String)keyConfig.get(ClientConfig.PROXY_HOST));
+        int port = keyConfig.get(ClientConfig.PROXY_PORT) == null ? 443 : (Integer)keyConfig.get(ClientConfig.PROXY_PORT);
+        setProxyPort(port);
         setServiceId((String)keyConfig.get(ClientConfig.SERVICE_ID));
         Object object = keyConfig.get(ClientConfig.ENABLE_HTTP2);
         setEnableHttp2(object != null && (Boolean) object);

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -33,6 +33,7 @@ public class Constants {
     public static final String CALLER_ID_STRING = "caller_id";
     public static final String SCOPE_CLIENT_ID_STRING = "scope_client_id";
     public static final String SCOPE_STRING = "scope";
+    public static final String SCP_STRING = "scp";
     public static final String ENDPOINT_STRING = "endpoint";
     public static final String CSRF_STRING = "csrf";
 

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -351,7 +351,7 @@ private static VerificationKeyResolver getKeyResolver(String kid, boolean isToke
      */
     private static List<JsonWebKey> getJsonWebKeySetForToken(String kid) {
 
-        TokenKeyRequest keyRequest = new TokenKeyRequest(kid);
+        TokenKeyRequest keyRequest = new TokenKeyRequest(kid, true);
         try {
             logger.debug("Getting Json Web Key for kid: {} from {}", kid, keyRequest.getServerUrl());
             String key = OauthHelper.getKey(keyRequest);

File: security/src/main/java/com/networknt/security/JwtVerifier.java
Patch:
@@ -344,8 +344,8 @@ private VerificationKeyResolver getKeyResolver(String kid, boolean isToken) {
      * @return
      */
     private List<JsonWebKey> getJsonWebKeySetForToken(String kid) {
-
-        TokenKeyRequest keyRequest = new TokenKeyRequest(kid);
+        // the jwk indicator will ensure that the kid is not concat to the uri for path parameter.
+        TokenKeyRequest keyRequest = new TokenKeyRequest(kid, true);
         try {
             logger.debug("Getting Json Web Key for kid: {} from {}", kid, keyRequest.getServerUrl());
             String key = OauthHelper.getKey(keyRequest);
@@ -355,7 +355,6 @@ private List<JsonWebKey> getJsonWebKeySetForToken(String kid) {
             logger.error("Exception: ", e);
             throw new RuntimeException(e);
         }
-
     }
 
     public X509Certificate getCertForToken(String kid) {

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -128,7 +128,7 @@ public class Http2Client {
         // take the best effort to get the serviceId from the server.yml file. It might not exist if this is a standalone client.
         boolean injectCallerId = ClientConfig.get().isInjectCallerId();
         if(injectCallerId) {
-            Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfig(CONFIG_SERVER);
+            Map<String, Object> serverConfig = Config.getInstance().getJsonMapConfigNoCache(CONFIG_SERVER);
             if(serverConfig != null) {
                 callerId = (String)serverConfig.get(SERVICE_ID);
             }

File: http-string/src/main/java/com/networknt/httpstring/HttpStringConstants.java
Patch:
@@ -31,6 +31,7 @@ public class HttpStringConstants {
     public static final HttpString TRACEABILITY_ID = new HttpString(Constants.TRACEABILITY_ID_STRING);
     public static final HttpString USER_ID = new HttpString(Constants.USER_ID_STRING);
     public static final HttpString CLIENT_ID = new HttpString(Constants.CLIENT_ID_STRING);
+    public static final HttpString CALLER_ID = new HttpString(Constants.CALLER_ID_STRING);
     public static final HttpString SCOPE_CLIENT_ID = new HttpString(Constants.SCOPE_CLIENT_ID_STRING);
     public static final HttpString SCOPE = new HttpString(Constants.SCOPE_STRING);
     public static final HttpString ENDPOINT = new HttpString(Constants.ENDPOINT_STRING);

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.networknt.metrics;
 
-import com.networknt.audit.AuditHandler;
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
@@ -128,7 +127,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 Map<String, String> tags = new HashMap<>();
                 tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT_STRING));
                 tags.put("clientId", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown");
-                tags.put("scopeClientId", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : "n/a");
+                tags.put("scopeClientId", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : "unknown");
+                tags.put("callerId", auditInfo.get(Constants.CALLER_ID_STRING) != null ? (String)auditInfo.get(Constants.CALLER_ID_STRING) : "unknown");
                 long time = Clock.defaultClock().getTick() - startTime;
                 MetricName metricName = new MetricName("response_time");
                 metricName = metricName.tagged(commonTags);

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -30,6 +30,7 @@ public class Constants {
     public static final String USER_TYPE_STRING = "user_type";
     public static final String ROLES_STRING = "roles";
     public static final String CLIENT_ID_STRING = "client_id";
+    public static final String CALLER_ID_STRING = "caller_id";
     public static final String SCOPE_CLIENT_ID_STRING = "scope_client_id";
     public static final String SCOPE_STRING = "scope";
     public static final String ENDPOINT_STRING = "endpoint";

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -128,7 +128,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 Map<String, String> tags = new HashMap<>();
                 tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT_STRING));
                 tags.put("clientId", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown");
-
+                tags.put("scopeClientId", auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.SCOPE_CLIENT_ID_STRING) : "n/a");
                 long time = Clock.defaultClock().getTick() - startTime;
                 MetricName metricName = new MetricName("response_time");
                 metricName = metricName.tagged(commonTags);

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -71,7 +71,7 @@ public class Server {
     
     public static final String ENV_PROPERTY_KEY = "environment";
 
-    static final String STATUS_HOST_IP = "STATUS_HOST_IP";
+    public static final String STATUS_HOST_IP = "STATUS_HOST_IP";
 
     // service_id in slf4j MDC
     static final String SID = "sId";

File: client/src/main/java/com/networknt/client/ClientConfig.java
Patch:
@@ -21,6 +21,7 @@ public final class ClientConfig {
     public static final String SAML_BEARER = "saml_bearer";
     public static final String CLIENT_CREDENTIALS = "client_credentials";
     public static final String AUTHORIZATION_CODE = "authorization_code";
+    public static final String CLIENT_AUTHENTICATED_USER = "client_authenticated_user";
     public static final String CACHE = "cache";
     public static final String CAPACITY = "capacity";
     public static final String OAUTH = "oauth";

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.exception.ClientException;
+import com.networknt.httpstring.ContentType;
 import com.networknt.mask.Mask;
 import io.dropwizard.metrics.influxdb.data.InfluxDbPoint;
 import io.dropwizard.metrics.influxdb.data.InfluxDbWriteObject;
@@ -124,6 +125,7 @@ public void run() {
                     final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(path);
                     request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, "chunked");
                     request.getRequestHeaders().put(Headers.HOST, "localhost");
+                    request.getRequestHeaders().put(Headers.CONTENT_TYPE, "text/plain");
                     connection.sendRequest(request, client.createClientCallback(reference, latch, body));
                 }
             });

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -106,6 +106,9 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 } else if (contentType.startsWith("multipart/form-data") || contentType.startsWith("application/x-www-form-urlencoded")) {
                     // attach the parsed request body into exchange if the body parser is enabled
                     attachFormDataBody(exchange);
+                } else {
+                    InputStream inputStream = exchange.getInputStream();
+                    exchange.putAttachment(REQUEST_BODY, inputStream);
                 }
             } catch (IOException e) {
                 logger.error("IOException: ", e);

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -269,6 +269,8 @@ static private boolean bind(HttpHandler handler, int port) {
                     .setServerOption(UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL, serverConfig.isAllowUnescapedCharactersInUrl())
                     // This is to overcome a bug in JDK 11.0.1, 11.0.2. For more info https://issues.jboss.org/browse/UNDERTOW-1422
                     .setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of("TLSv1.2"))
+                    .setServerOption(UndertowOptions.MAX_ENTITY_SIZE, serverConfig.getMaxTransferFileSize())
+                    .setServerOption(UndertowOptions.MULTIPART_MAX_ENTITY_SIZE, 10*serverConfig.getMaxTransferFileSize())
                     .setHandler(Handlers.header(handler, Headers.SERVER_STRING, serverConfig.getServerString())).setWorkerThreads(serverConfig.getWorkerThreads()).build();
 
             server.start();

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -50,7 +50,6 @@ public class ConfigInjection {
     private static final String EXCLUSION_CONFIG_FILE_LIST = "exclusionConfigFileList";
 
     private static final Map<String, Object> exclusionMap = Config.getInstance().getJsonMapConfig(SCALABLE_CONFIG);
-    private static final Map<String, Object> valueMap = Config.getInstance().getDefaultJsonMapConfig(CENTRALIZED_MANAGEMENT);
 
     // Define the injection pattern which represents the injection points
     private static Pattern pattern = Pattern.compile("\\$\\{(.*?)\\}");
@@ -98,6 +97,7 @@ private static Object getValue(String content) {
             Boolean containsField = false;
             // Use key of injectionPattern to get value from both environment variables and "values.yaml"
             Object envValue = typeCast(System.getenv(injectionPattern.getKey()));
+            Map<String, Object> valueMap = Config.getInstance().getDefaultJsonMapConfig(CENTRALIZED_MANAGEMENT);
             Object fileValue = (valueMap != null) ? valueMap.get(injectionPattern.getKey()) : null;
             // Return different value from different sources based on injection order defined before
             if ((INJECTION_ORDER_CODE.equals("2") && envValue != null) || (INJECTION_ORDER_CODE.equals("1") && fileValue == null)) {

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -70,7 +70,7 @@ public static Object getInjectValue(String string) {
             if (!(value instanceof String)) {
                 return value;
             }
-            m.appendReplacement(sb, (String) value);
+            m.appendReplacement(sb, m.quoteReplacement((String)value));
         }
         return m.appendTail(sb).toString();
     }

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -130,6 +130,9 @@ private void attachFormDataBody(final HttpServerExchange exchange) throws IOExce
             FormData formData = parser.parseBlocking();
             data = BodyConverter.convert(formData);
             exchange.putAttachment(REQUEST_BODY, data);
+        } else {
+            InputStream inputStream = exchange.getInputStream();
+            exchange.putAttachment(REQUEST_BODY, inputStream);
         }
     }
 

File: consul/src/integration/java/com/networknt/consul/ConsulTestIT.java
Patch:
@@ -61,7 +61,7 @@ public void doRegisterAndAvailable() throws Exception {
     public void discoverService() throws Exception {
         registry.doRegister(serviceUrl);
         List<URL> urls = registry.discoverService(serviceUrl);
-        Assert.assertNull(urls);
+        Assert.assertEquals(urls.size(), 0);
         Thread.sleep(sleepTime);
         urls = registry.discoverService(serviceUrl);
         //Assert.assertTrue(urls.contains(serviceUrl));

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -655,7 +655,6 @@ public void failed(IOException e) {
         }
     }
 
-    @Test
     public String callApiAsync() throws Exception {
         final Http2Client client = createClient();
         final CountDownLatch latch = new CountDownLatch(1);
@@ -677,7 +676,6 @@ public String callApiAsync() throws Exception {
         return reference.get().getAttachment(Http2Client.RESPONSE_BODY);
     }
 
-    @Test
     public ByteBuffer callApiWithByteBuffer() throws Exception {
         final Http2Client client = createClient();
         final CountDownLatch latch = new CountDownLatch(1);

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -106,6 +106,7 @@ private List<URL> discovery(String protocol, String serviceId, String tag) {
             }
             urls = registry.discover(subscribeUrl);
             if(logger.isDebugEnabled()) logger.debug("discovered urls = " + urls);
+            serviceMap.put(serviceId, urls == null ? new ArrayList<>() : urls);
         }
         //if doesn't specify envTag at all, return all the urls
         if(tag == null) {return urls;}

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -376,7 +376,7 @@ public void addAuthTokenTrace(ClientRequest request, String token, Tracer tracer
             }
         }
         request.getRequestHeaders().put(Headers.AUTHORIZATION, token);
-        if(tracer != null) {
+        if(tracer != null && tracer.activeSpan() != null) {
             Tags.SPAN_KIND.set(tracer.activeSpan(), Tags.SPAN_KIND_CLIENT);
             Tags.HTTP_METHOD.set(tracer.activeSpan(), request.getMethod().toString());
             Tags.HTTP_URL.set(tracer.activeSpan(), request.getPath());

File: client/src/main/java/com/networknt/client/ClientRequestCarrier.java
Patch:
@@ -12,7 +12,7 @@ public class ClientRequestCarrier implements io.opentracing.propagation.TextMap
     private final static Logger logger = LoggerFactory.getLogger(ClientRequestCarrier.class);
     private final ClientRequest clientRequest;
 
-    ClientRequestCarrier(ClientRequest clientRequest) {
+    public ClientRequestCarrier(ClientRequest clientRequest) {
         this.clientRequest = clientRequest;
     }
 

File: email-sender/src/main/java/com/networknt/email/EmailConfig.java
Patch:
@@ -22,6 +22,7 @@
  * @author Steve Hu
  */
 public class EmailConfig {
+    public static final String CONFIG_NAME = "email";
     String host;
     String port;
     String user;

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -899,7 +899,7 @@ public CompletableFuture<ClientResponse> callService(URI uri, ClientRequest requ
         addHostHeader(request);
         CompletableFuture<ClientResponse> futureClientResponse;
         AtomicReference<ClientConnection> currentConnection = new AtomicReference<>(http2ClientConnectionPool.getConnection(uri));
-        if (currentConnection.get() != null) {
+        if (currentConnection.get() != null && currentConnection.get().isOpen()) {
             logger.debug("Reusing the connection: {} to {}", currentConnection.toString(), uri.toString());
             futureClientResponse = getFutureClientResponse(currentConnection.get(), uri, request, requestBody);
         } else {

File: client/src/main/java/com/networknt/client/ClientConfig.java
Patch:
@@ -52,7 +52,7 @@ public final class ClientConfig {
 
     private static final String CONNECTION_POOL_SIZE = "connectionPoolSize";
     private static final String MAX_REQUEST_PER_CONNECTION = "maxReqPerConn";
-    private static final String CONNECTION_EXPIRE_TIME = "connectionExpireSize";
+    private static final String CONNECTION_EXPIRE_TIME = "connectionExpireTime";
     private static final String MAX_CONNECTION_NUM_PER_HOST = "maxConnectionNumPerHost";
     private static final String MIN_CONNECTION_NUM_PER_HOST = "minConnectionNumPerHost";
 
@@ -137,7 +137,7 @@ private void setRequestConfig() {
             maxReqPerConn = (int) requestConfig.get(MAX_REQUEST_PER_CONNECTION);
         }
         if (requestConfig.containsKey(CONNECTION_EXPIRE_TIME)) {
-            connectionExpireTime = (long) requestConfig.get(CONNECTION_EXPIRE_TIME);
+            connectionExpireTime = Long.parseLong(requestConfig.get(CONNECTION_EXPIRE_TIME).toString());
         }
         if (requestConfig.containsKey(MAX_CONNECTION_NUM_PER_HOST)) {
             maxConnectionNumPerHost = (int) requestConfig.get(MAX_CONNECTION_NUM_PER_HOST);

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -63,7 +63,7 @@ public void testReadCertificate() {
 
     @Test
     public void testVerifyJwt() throws Exception {
-        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"));
+        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"), "user");
         String jwt = JwtIssuer.getJwt(claims);
         claims = null;
         Assert.assertNotNull(jwt);
@@ -151,7 +151,7 @@ private static KeyStore loadKeystore(String fileName, String keyStorePass) throw
 
     @Test
     public void testVerifyToken() throws Exception {
-        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"));
+        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"), "user");
         String jwt = JwtIssuer.getJwt(claims);
         claims = null;
         Assert.assertNotNull(jwt);
@@ -174,7 +174,7 @@ public void testVerifyToken() throws Exception {
 
     @Test
     public void testVerifySign() throws Exception {
-        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"));
+        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"), "user");
         String jwt = JwtIssuer.getJwt(claims);
         claims = null;
         Assert.assertNotNull(jwt);

File: security/src/test/java/com/networknt/security/JwtVerifierTest.java
Patch:
@@ -61,7 +61,7 @@ public void testReadCertificate() {
 
     @Test
     public void testVerifyJwt() throws Exception {
-        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"));
+        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"), "user");
         String jwt = JwtIssuer.getJwt(claims);
         claims = null;
         Assert.assertNotNull(jwt);
@@ -151,7 +151,7 @@ private static KeyStore loadKeystore(String fileName, String keyStorePass) throw
 
     @Test
     public void testVerifyToken() throws Exception {
-        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"));
+        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"), "user");
         String jwt = JwtIssuer.getJwt(claims);
         claims = null;
         Assert.assertNotNull(jwt);
@@ -175,7 +175,7 @@ public void testVerifyToken() throws Exception {
 
     @Test
     public void testVerifySign() throws Exception {
-        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"));
+        JwtClaims claims = ClaimsUtil.getTestClaims("steve", "EMPLOYEE", "f7d42348-c647-4efb-a52d-4c5787421e72", Arrays.asList("write:pets", "read:pets"), "user");
         String jwt = JwtIssuer.getJwt(claims);
         claims = null;
         Assert.assertNotNull(jwt);

File: cors/src/main/java/com/networknt/cors/CorsUtil.java
Patch:
@@ -60,7 +60,7 @@ public static boolean isCoreRequest(HeaderMap headers) {
     public static String matchOrigin(HttpServerExchange exchange, Collection<String> allowedOrigins) throws Exception {
         HeaderMap headers = exchange.getRequestHeaders();
         String[] origins = headers.get(Headers.ORIGIN).toArray();
-        if(logger.isTraceEnabled()) logger.trace("origins from the request header = " + Arrays.toString(origins) + " allowedOrigins = " + allowedOrigins.toString());
+        if(logger.isTraceEnabled()) logger.trace("origins from the request header = " + Arrays.toString(origins) + " allowedOrigins = " + allowedOrigins);
         if (allowedOrigins != null && !allowedOrigins.isEmpty()) {
             for (String allowedOrigin : allowedOrigins) {
                 for (String origin : origins) {

File: cors/src/main/java/com/networknt/cors/CorsUtil.java
Patch:
@@ -33,6 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.Arrays;
 import java.util.Collection;
 
 /**
@@ -59,6 +60,7 @@ public static boolean isCoreRequest(HeaderMap headers) {
     public static String matchOrigin(HttpServerExchange exchange, Collection<String> allowedOrigins) throws Exception {
         HeaderMap headers = exchange.getRequestHeaders();
         String[] origins = headers.get(Headers.ORIGIN).toArray();
+        if(logger.isTraceEnabled()) logger.trace("origins from the request header = " + Arrays.toString(origins) + " allowedOrigins = " + allowedOrigins.toString());
         if (allowedOrigins != null && !allowedOrigins.isEmpty()) {
             for (String allowedOrigin : allowedOrigins) {
                 for (String origin : origins) {
@@ -69,6 +71,7 @@ public static String matchOrigin(HttpServerExchange exchange, Collection<String>
             }
         }
         String allowedOrigin = defaultOrigin(exchange);
+        if(logger.isTraceEnabled()) logger.trace("allowedOrigin from the exchange = " + allowedOrigin);
         for (String origin : origins) {
             if (allowedOrigin.equalsIgnoreCase(sanitizeDefaultPort(origin))) {
                 return allowedOrigin;

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -176,10 +176,10 @@ protected List<URL> discoverService(URL url) {
         String protocol = url.getProtocol();
         if(logger.isDebugEnabled()) logger.debug("protocol = " + protocol + " serviceName = " + serviceName + " tag = " + tag);
         List<URL> urls = serviceCache.get(serviceName);
-        if (urls == null) {
+        if (urls == null || urls .isEmpty()) {
             synchronized (serviceName.intern()) {
                 urls = serviceCache.get(serviceName);
-                if (urls == null) {
+                if (urls == null || urls .isEmpty()) {
                     ConcurrentHashMap<String, List<URL>> serviceUrls = lookupServiceUpdate(protocol, serviceName);
                     updateServiceCache(serviceName, serviceUrls, false);
                     urls = serviceCache.get(serviceName);

File: consul/src/main/java/com/networknt/consul/ConsulService.java
Patch:
@@ -78,11 +78,11 @@ public Integer getPort() {
 
 	public ConsulService() {
 		if(config.tcpCheck) {
-			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TCP\":\"%s:%s\",\"Interval\":\"" + config.checkInterval + "\"}}";
+			checkString = ",\"Check\":{\"CheckID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TCP\":\"%s:%s\",\"Interval\":\"" + config.checkInterval + "\"}}";
 		} else if(config.httpCheck) {
-			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"HTTP\":\"" + "https://%s:%s/health/%s" + "\",\"TLSSkipVerify\":true,\"Interval\":\"" + config.checkInterval + "\"}}";
+			checkString = ",\"Check\":{\"CheckID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"HTTP\":\"" + "https://%s:%s/health/%s" + "\",\"TLSSkipVerify\":true,\"Interval\":\"" + config.checkInterval + "\"}}";
 		} else {
-			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TTL\":\"" + config.checkInterval + "\"}}";
+			checkString = ",\"Check\":{\"CheckID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TTL\":\"" + config.checkInterval + "\"}}";
 		}
 	}
 

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -102,7 +102,7 @@ public ConsulClientImpl() {
 	@Override
 	public void checkPass(String serviceId, String token) {
 		logger.debug("checkPass serviceId = {}", serviceId);
-		String path = "/v1/agent/check/pass/" + "service:" + serviceId;
+		String path = "/v1/agent/check/pass/" + "check-" + serviceId;
 		try {
 			ConsulConnection consulConnection = getConnection(CHECK_PASS_CONNECTION_KEY);
 			AtomicReference<ClientResponse> reference = consulConnection.send(Methods.PUT, path, token, null);
@@ -119,7 +119,7 @@ public void checkPass(String serviceId, String token) {
 	@Override
 	public void checkFail(String serviceId, String token) {
 		logger.debug("checkFail serviceId = {}", serviceId);
-		String path = "/v1/agent/check/fail/" + "service:" + serviceId;
+		String path = "/v1/agent/check/fail/" + "check-" + serviceId;
 		try {
 			ConsulConnection consulConnection = getConnection(CHECK_FAIL_CONNECTION_KEY);
 			AtomicReference<ClientResponse> reference = consulConnection.send(Methods.PUT, path, token, null);

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -27,6 +27,8 @@ public class Constants {
     public static final String CORRELATION_ID_STRING = "X-Correlation-Id";
     public static final String TRACEABILITY_ID_STRING = "X-Traceability-Id";
     public static final String USER_ID_STRING = "user_id";
+    public static final String USER_TYPE_STRING = "user_type";
+    public static final String ROLES_STRING = "roles";
     public static final String CLIENT_ID_STRING = "client_id";
     public static final String SCOPE_CLIENT_ID_STRING = "scope_client_id";
     public static final String SCOPE_STRING = "scope";

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -655,7 +655,7 @@ public void failed(IOException e) {
         }
     }
 
-
+    @Test
     public String callApiAsync() throws Exception {
         final Http2Client client = createClient();
         final CountDownLatch latch = new CountDownLatch(1);
@@ -677,6 +677,7 @@ public String callApiAsync() throws Exception {
         return reference.get().getAttachment(Http2Client.RESPONSE_BODY);
     }
 
+    @Test
     public ByteBuffer callApiWithByteBuffer() throws Exception {
         final Http2Client client = createClient();
         final CountDownLatch latch = new CountDownLatch(1);

File: registry/src/main/java/com/networknt/registry/support/command/CommandFailbackRegistry.java
Patch:
@@ -72,7 +72,7 @@ protected List<URL> doDiscover(URL url) {
         return finalResult;
     }
 
-    private CommandServiceManager getCommandServiceManager(URL urlCopy) {
+    protected CommandServiceManager getCommandServiceManager(URL urlCopy) {
         CommandServiceManager manager = commandManagerMap.get(urlCopy);
         if (manager == null) {
             manager = new CommandServiceManager(urlCopy);

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -88,7 +88,7 @@ public class Http2Client {
             .set(Options.KEEP_ALIVE, true)
             .set(Options.WORKER_NAME, "Client").getMap();
     public static XnioWorker WORKER;
-    public static XnioSsl SSL;
+    private static XnioSsl SSL;
     public static final AttachmentKey<String> RESPONSE_BODY = AttachmentKey.create(String.class);
 
     static final String TLS = "tls";

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -186,7 +186,7 @@ public IoFuture<ClientConnection> connect(InetSocketAddress bindAddress, final U
         return connect(bindAddress, uri, worker, null, bufferPool, options);
     }
 
-    private XnioSsl getDefaultXnioSsl() {
+    public XnioSsl getDefaultXnioSsl() {
         if(SSL == null) {
             try {
                 SSL = createXnioSsl(createSSLContext());

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -49,7 +49,6 @@
 import io.undertow.util.Headers;
 import io.undertow.util.StringReadChannelListener;
 import io.undertow.util.StringWriteChannelListener;
-import org.omg.SendingContext.RunTime;
 import org.owasp.encoder.Encode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -159,7 +159,7 @@ public void testAuditWithTrace() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: body/src/test/java/com/networknt/body/BodyStringCachingTest.java
Patch:
@@ -79,7 +79,7 @@ public void testEnableCacheRequestBody() throws Exception {
         final ClientConnection connection;
         String post;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }
@@ -115,7 +115,7 @@ public void testDisableCacheRequestBody() throws Exception {
         final ClientConnection connection;
         String post;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java
Patch:
@@ -101,7 +101,7 @@ public void testWithCid() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }
@@ -130,7 +130,7 @@ public void testGetWithoutTid() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }
@@ -162,7 +162,7 @@ public void testGetWithoutTidNoAutogen() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: dump/src/test/java/com/networknt/dump/DumpHandlerTest.java
Patch:
@@ -100,7 +100,7 @@ public void tesLog() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: header/src/test/java/com/networknt/header/HeaderHandlerTest.java
Patch:
@@ -118,7 +118,7 @@ public void testRequestHeader() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: health/src/test/java/com/networknt/health/HealthGetHandlerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testHealth(boolean useJson) throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -110,7 +110,7 @@ public void testServerInfo() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java
Patch:
@@ -84,7 +84,7 @@ public void testServerInfo() throws Exception {
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
+            connection = client.connect(new URI("http://localhost:8080"), Http2Client.WORKER, Http2Client.BUFFER_POOL, OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -38,6 +38,7 @@
 import io.opentracing.Tracer;
 import io.opentracing.propagation.Format;
 import io.opentracing.tag.Tags;
+import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
 import io.undertow.client.*;
 import io.undertow.connector.ByteBufferPool;
@@ -144,7 +145,7 @@ private Http2Client(final ClassLoader classLoader) {
         }
         this.clientProviders = Collections.unmodifiableMap(map);
         try {
-            final Xnio xnio = Xnio.getInstance();
+            final Xnio xnio = Xnio.getInstance(Undertow.class.getClassLoader());
             WORKER = xnio.createWorker(null, Http2Client.DEFAULT_OPTIONS);
             SSL = new UndertowXnioSsl(WORKER.getXnio(), OptionMap.EMPTY, BUFFER_POOL, createSSLContext());
         } catch (Exception e) {

File: jaeger-tracing/src/main/java/com/networknt/jaeger/tracing/JaegerHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import io.opentracing.Span;
@@ -70,7 +71,7 @@ public JaegerHandler() {
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
         // get the path and method to construct the endpoint for the operation of tracing.
-        Map<String, Object> auditInfo = exchange.getAttachment(AuditHandler.AUDIT_INFO);
+        Map<String, Object> auditInfo = exchange.getAttachment(AttachmentConstants.AUDIT_INFO);
         String endpoint = null;
         if(auditInfo != null) {
             endpoint = (String)auditInfo.get(Constants.ENDPOINT_STRING);

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.server.Server;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -118,7 +119,7 @@ public MiddlewareHandler setNext(final HttpHandler next) {
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
         long startTime = Clock.defaultClock().getTick();
         exchange.addExchangeCompleteListener((exchange1, nextListener) -> {
-            Map<String, Object> auditInfo = exchange1.getAttachment(AuditHandler.AUDIT_INFO);
+            Map<String, Object> auditInfo = exchange1.getAttachment(AttachmentConstants.AUDIT_INFO);
             if(auditInfo != null) {
                 Map<String, String> tags = new HashMap<>();
                 tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT_STRING));

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.httpstring.AttachmentConstants;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import io.prometheus.client.CollectorRegistry;
@@ -90,7 +91,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         SimpleTimer respTimer = new SimpleTimer();
 
         exchange.addExchangeCompleteListener((exchange1, nextListener) -> {
-            Map<String, Object> auditInfo = exchange1.getAttachment(AuditHandler.AUDIT_INFO);
+            Map<String, Object> auditInfo = exchange1.getAttachment(AttachmentConstants.AUDIT_INFO);
             if(auditInfo != null) {
                 Map<String, String> tags = new HashMap<>();
                 tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT_STRING));

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -43,8 +43,10 @@ public class Constants {
 
     public static final String CSRF_TOKEN_STRING = "X-CSRF-TOKEN";
 
-    // Logger
+    // Logging and Auditing
     public static final String AUDIT_LOGGER = "Audit";
+    public static final String STATUS = "Status";
+    public static final String STACK_TRACE = "StackTrace";
 
     // JWT claims for fine-grained authorization in business context.
     // The key for the subject token claims in auditInfo after security handler

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -118,7 +118,7 @@ public static void init() {
         } catch (RuntimeException e) {
             // Handle any exception encountered during server start-up
             logger.error("Server is not operational! Failed with exception", e);
-
+            System.out.println("Failed to start server:" + e.getMessage());
             // send a graceful system shutdown
             System.exit(1);
         }

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -41,6 +41,7 @@
 /**
  * Created by steve on 01/09/16.
  */
+@Deprecated
 public class JwtHelperTest {
     @Test
     public void testReadCertificate() {

File: server/src/integration/java/com/networknt/server/ConsulRegistryIT.java
Patch:
@@ -24,6 +24,7 @@
 import com.networknt.switcher.SwitcherUtil;
 import com.networknt.utility.Constants;
 import com.networknt.utility.Util;
+import org.junit.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testcontainers.containers.GenericContainer;

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -92,7 +92,7 @@ private static Object getValue(String content) {
             Boolean containsField = false;
             // Use key of injectionPattern to get value from both environment variables and "values.yaml"
             Object envValue = typeCast(System.getenv(injectionPattern.getKey()));
-            Map<String, Object> valueMap = Config.getInstance().getJsonMapConfig(CENTRALIZED_MANAGEMENT);
+            Map<String, Object> valueMap = Config.getInstance().getDefaultJsonMapConfig(CENTRALIZED_MANAGEMENT);
             Object fileValue = (valueMap != null) ? valueMap.get(injectionPattern.getKey()) : null;
             // Return different value from different sources based on injection order defined before
             if ((INJECTION_ORDER_CODE.equals("2") && envValue != null) || (INJECTION_ORDER_CODE.equals("1") && fileValue == null)) {

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -124,6 +124,7 @@ public static Result<TokenResponse> getTokenResult(TokenRequest tokenRequest, St
             } else if(tokenRequest.getServiceId() != null) {
                 Cluster cluster = SingletonServiceFactory.getBean(Cluster.class);
                 String url = cluster.serviceToUrl("https", tokenRequest.getServiceId(), envTag, null);
+                if(logger.isDebugEnabled()) logger.debug("discovered url = " + url);
                 connection = client.connect(new URI(url), Http2Client.WORKER, Http2Client.SSL, Http2Client.BUFFER_POOL, tokenRequest.isEnableHttp2() ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY).get();
             } else {
                 // both server_url and serviceId are empty in the config.

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -472,7 +472,7 @@ public void run() {
         } finally {
             IoUtils.safeClose(connection);
         }
-        Assert.assertEquals("{key1:[value1],key2:[value2 with space],keylist[]:[1,2]}", reference.get().getAttachment(Http2Client.RESPONSE_BODY));
+        Assert.assertEquals("{key1:value1,key2:value2 with space,keylist[]:[1, 2]}", reference.get().getAttachment(Http2Client.RESPONSE_BODY));
     }
 
     @Test
@@ -513,6 +513,6 @@ public void run() {
         } finally {
             IoUtils.safeClose(connection);
         }
-        Assert.assertEquals("{key1:[value1],key2:[value2]}", reference.get().getAttachment(Http2Client.RESPONSE_BODY));
+        Assert.assertEquals("{key1:value1,key2:value2}", reference.get().getAttachment(Http2Client.RESPONSE_BODY));
     }
 }

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -543,10 +543,11 @@ private static Result<TokenResponse> handleResponse(ContentType contentType, Str
             }
             if (responseBody != null && responseBody.length() > 0) {
                 tokenResponse = Config.getInstance().getMapper().readValue(responseBody, TokenResponse.class);
-                if(tokenResponse != null) {
+                // sometimes, the token response contains an error status instead of the access token.
+                if(tokenResponse != null && tokenResponse.getAccessToken() != null) {
                     result = Success.of(tokenResponse);
                 } else {
-                    result = Failure.of(new Status(GET_TOKEN_ERROR, responseBody));
+                    result = Failure.of(new Status(tokenResponse.getStatusCode(), tokenResponse.getCode(), tokenResponse.getMessage(), tokenResponse.getDescription(), tokenResponse.getSeverity()));
                 }
             } else {
                 result = Failure.of(new Status(GET_TOKEN_ERROR, "no auth server response"));

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -93,7 +93,7 @@ private List<URL> discovery(String protocol, String serviceId, String tag) {
         // lookup in serviceMap first, if not there, then subscribe and discover.
         List<URL> urls = serviceMap.get(serviceId);
         if(logger.isDebugEnabled()) logger.debug("cached serviceId " + serviceId + " urls = " + urls);
-        if(urls == null) {
+        if((urls == null) || (urls.isEmpty())) {
             URL subscribeUrl = URLImpl.valueOf(protocol + "://localhost/" + serviceId);
             if(tag != null) {
                 subscribeUrl.addParameter(Constants.TAG_ENVIRONMENT, tag);

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -30,6 +30,7 @@
 import com.networknt.utility.Constants;
 import com.networknt.utility.NetUtils;
 import com.networknt.utility.TlsUtil;
+import com.networknt.utility.Util;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.networknt.config.Config;
 import com.networknt.httpstring.HttpStringConstants;
-import com.networknt.utility.Constants;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
 import io.undertow.client.*;

File: client/src/main/java/com/networknt/client/AsyncResponse.java
Patch:
@@ -19,9 +19,9 @@
 import io.undertow.client.ClientResponse;
 
 public class AsyncResponse {
-    ClientResponse clientResponse;
-    String responseBody;
-    long responseTime;
+    private ClientResponse clientResponse;
+    private String responseBody;
+    private long responseTime;
 
     public AsyncResponse(ClientResponse clientResponse, String responseBody, long responseTime) {
         this.clientResponse = clientResponse;

File: client/src/main/java/com/networknt/client/circuitbreaker/CircuitBreaker.java
Patch:
@@ -52,7 +52,7 @@ public ClientResponse call() throws TimeoutException, ExecutionException, Interr
             }
 
             ClientResponse clientResponse = supplier.get().get(ClientConfig.get().getTimeout(), TimeUnit.MILLISECONDS);
-            timeoutCount = new AtomicInteger(0);;
+            timeoutCount = new AtomicInteger(0);
 
             return clientResponse;
         } catch (InterruptedException | ExecutionException e) {

File: client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureNoRequest.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.concurrent.CompletableFuture;
 
 public class Http2ClientCompletableFutureNoRequest extends CompletableFuture<ClientResponse> implements ClientCallback<ClientExchange> {
-    Logger logger = LoggerFactory.getLogger(Http2ClientCompletableFutureNoRequest.class);
+    private Logger logger = LoggerFactory.getLogger(Http2ClientCompletableFutureNoRequest.class);
 
     @Override
     public void completed(ClientExchange result) {

File: client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureWithRequest.java
Patch:
@@ -13,9 +13,9 @@
 
 public class Http2ClientCompletableFutureWithRequest extends CompletableFuture<ClientResponse> implements ClientCallback<ClientExchange> {
 
-    Logger logger = LoggerFactory.getLogger(Http2ClientCompletableFutureWithRequest.class);
+    private Logger logger = LoggerFactory.getLogger(Http2ClientCompletableFutureWithRequest.class);
 
-    String requestBody;
+    private String requestBody;
     public Http2ClientCompletableFutureWithRequest(String requestBody) {
         this.requestBody = requestBody;
     }

File: client/src/main/java/com/networknt/client/oauth/ClientRequestComposerProvider.java
Patch:
@@ -54,6 +54,8 @@ private void initDefaultComposer(ClientRequestComposers composerName) {
             case SAML_BEARER_REQUEST_COMPOSER:
                 composersMap.put(SAML_BEARER_REQUEST_COMPOSER, new DefaultSAMLBearerRequestComposer());
                 break;
+            default:
+                break;
         }
     }
 

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -71,7 +71,7 @@ public class JwtHelper {
     public static final String JWT_KEY_RESOLVER = "keyResolver";
     public static final String JWT_KEY_RESOLVER_X509CERT = "X509Certificate";
     public static final String JWT_KEY_RESOLVER_JWKS = "JsonWebKeySet";
-    
+
     static Map<String, X509Certificate> certMap;
     static Map<String, List<JsonWebKey>> jwksMap;
     static List<String> fingerPrints;

File: server/src/integration/java/com/networknt/server/ConsulRegistryIT.java
Patch:
@@ -20,10 +20,8 @@
 import com.networknt.cluster.LightCluster;
 import com.networknt.config.Config;
 import com.networknt.consul.ConsulConfig;
-import com.networknt.service.ServiceConfig;
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.utility.Util;
-import org.junit.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testcontainers.containers.GenericContainer;

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -33,6 +33,7 @@ public class TokenRequest {
     public static String REFRESH_TOKEN = "refresh_token";
     public static String URI = "uri";
     public static String CLIENT_ID = "client_id";
+    public static String CLIENT_SECRET = "client_secret";
     public static String REDIRECT_URI = "redirect_uri";
     public static String SCOPE = "scope";
     public static String CSRF = "csrf";

File: client/src/main/java/com/networknt/client/ssl/ClientX509ExtendedTrustManager.java
Patch:
@@ -186,9 +186,9 @@ private void checkIdentity(SSLSession session, X509Certificate cert) throws Cert
 	/**
 	 * This method converts existing X509TrustManagers to ClientX509ExtendedTrustManagers. 
 	 * 
-	 * @param trustManagers
-	 * @param tlsConfig
-	 * @return
+	 * @param trustManagers array of TrustManagers
+	 * @param tlsConfig TLSConfig
+	 * @return TrustManager array
 	 */
 	public static TrustManager[] decorate(TrustManager[] trustManagers, TLSConfig tlsConfig) {
 		if (null!=trustManagers && trustManagers.length>0) {

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -28,6 +28,7 @@
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.switcher.SwitcherUtil;
 import com.networknt.utility.Constants;
+import com.networknt.utility.NetUtils;
 import com.networknt.utility.TlsUtil;
 import com.networknt.utility.Util;
 import io.undertow.Handlers;
@@ -473,7 +474,7 @@ public static URL register(String serviceId, int port) {
             String ipAddress = System.getenv(STATUS_HOST_IP);
             logger.info("Registry IP from STATUS_HOST_IP is " + ipAddress);
             if (ipAddress == null) {
-                InetAddress inetAddress = Util.getInetAddress();
+                InetAddress inetAddress = NetUtils.getLocalAddress();
                 ipAddress = inetAddress.getHostAddress();
                 logger.info("Could not find IP from STATUS_HOST_IP, use the InetAddress " + ipAddress);
             }

File: utility/src/main/java/com/networknt/utility/Util.java
Patch:
@@ -80,6 +80,7 @@ public static String quote(final String value) {
     /**
      * Get InetAddress
      * @return The InetAddress object
+     * @deprecated
      */
     public static InetAddress getInetAddress() {
         InetAddress inetAddress = null;

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.nio.charset.Charset;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
 import java.util.Iterator;
@@ -61,7 +60,6 @@
  */
 public abstract class Config {
     public static final String LIGHT_4J_CONFIG_DIR = "light-4j-config-dir";
-    public static final String CENTRALIZED_MANAGEMENT = "values";
 
     protected Config() {
     }
@@ -437,7 +435,7 @@ private InputStream getConfigStream(String configFilename, String path) {
                 logger.info("Unable to load config " + Encode.forJava(configFilename) + ". Looking for the same file name with extension yaml...");
             } else if (configFilename.endsWith(CONFIG_EXT_YAML)) {
                 logger.info("Unable to load config " + Encode.forJava(configFilename) + ". Looking for the same file name with extension json...");
-            } else {
+            } else if (configFilename.endsWith(CONFIG_EXT_JSON)) {
                 System.out.println("Unable to load config '" + Encode.forJava(configFilename.substring(0, configFilename.indexOf("."))) + "' with extension yml, yaml and json from external config, application config and module config. Please ignore this message if you are sure that your application is not using this config file.");
             }
             return null;

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -878,6 +878,7 @@ public void server_identity_check_positive_case() throws Exception{
     // For these three tests, the behaviour is different between jdk9 and jdk10/11/12
     // For jdk8 and 9, ClosedChannelException will be thrown.
     // For jdk10 and up, not exception is thrown but the connection is not open.
+    @Ignore
     @Test(expected=ClosedChannelException.class)
     public void server_identity_check_negative_case() throws Exception{
     	final Http2Client client = createClient();
@@ -889,7 +890,7 @@ public void server_identity_check_negative_case() throws Exception{
         //assertFalse(connection.isOpen());
         fail();
     }
-
+    @Ignore
     @Test(expected=ClosedChannelException.class)
     public void standard_https_hostname_check_kicks_in_if_trustednames_are_empty() throws Exception{
     	final Http2Client client = createClient();
@@ -901,7 +902,7 @@ public void standard_https_hostname_check_kicks_in_if_trustednames_are_empty() t
         //assertFalse(connection.isOpen());
         fail();
     }
-
+    @Ignore
     @Test(expected=ClosedChannelException.class)
     public void standard_https_hostname_check_kicks_in_if_trustednames_are_not_used_or_not_provided() throws Exception{
     	final Http2Client client = createClient();

File: content/src/test/java/com/networknt/content/ContentHandlerTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
-import io.undertow.UndertowOptions;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;
 import io.undertow.client.ClientResponse;

File: deref-token/src/test/java/com/networknt/deref/DerefMiddlewareHandlerTest.java
Patch:
@@ -17,14 +17,12 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.exception.ClientException;
-import com.networknt.utility.Constants;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
-import io.undertow.server.RoutingHandler;
 import io.undertow.server.handlers.PathHandler;
 import io.undertow.util.Headers;
 import io.undertow.util.Methods;

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -19,6 +19,9 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.exception.ApiException;
+import com.networknt.exception.FrameworkException;
+import com.networknt.exception.ClientException;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;

File: exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java
Patch:
@@ -19,6 +19,8 @@
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 import com.networknt.status.Status;
+import com.networknt.exception.ApiException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.handler;
 
 import com.networknt.status.Status;
-import com.sun.net.httpserver.HttpServer;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: http-url/src/test/java/com/networknt/url/URLNormalizerTest.java
Patch:
@@ -339,6 +339,7 @@ public void testRemoveFragment() {
     public void testReplaceIPWithDomainName() {
         s = "http://208.80.154.224/wiki/Main_Page";
         t = null;
+//        System.out.println("Result: " + n(s).replaceIPWithDomainName().toString());
         Assert.assertTrue(
                 n(s).replaceIPWithDomainName().toString().contains("wikimedia"));
         s = "http://wikipedia.org/wiki/Main_Page";

File: logger-config/src/main/java/com/networknt/logging/handler/LoggerPostHandler.java
Patch:
@@ -20,7 +20,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.networknt.body.BodyHandler;
 import com.networknt.config.Config;
-import com.networknt.exception.ClientException;
 import com.networknt.handler.LightHttpHandler;
 import com.networknt.httpstring.ContentType;
 import com.networknt.logging.model.LoggerConfig;

File: rate-limit/src/test/java/com/networknt/limit/LimitHandlerTest.java
Patch:
@@ -38,9 +38,6 @@
 import org.xnio.OptionMap;
 
 import java.net.URI;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicReference;
 

File: registry/src/main/java/com/networknt/registry/support/command/CommandServiceManager.java
Patch:
@@ -31,7 +31,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.regex.Pattern;
 
 
 public class CommandServiceManager implements ServiceListener {

File: sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.xnio.IoUtils;
 import org.xnio.OptionMap;
 
-import java.io.IOException;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Deque;

File: service/src/main/java/com/networknt/service/ServiceUtil.java
Patch:
@@ -64,7 +64,7 @@ public static Object construct(Object something) throws Exception {
      * @throws Exception when constructor fails.
      */
     public static Object constructByNamedParams(Class clazz, Map params) throws Exception {
-        Object obj = clazz.getConstructor().newInstance();
+        Object obj = clazz.getDeclaredConstructor().newInstance();
 
         Method[] allMethods = clazz.getMethods();
         for(Method method : allMethods) {
@@ -134,7 +134,7 @@ public static Object constructByParameterizedConstructor(Class clazz, List param
             return instance;
         } else {
             if(hasDefaultConstructor) {
-                return clazz.getConstructor().newInstance();
+                return clazz.getDeclaredConstructor().newInstance();
             } else {
                 // error that no instance can be created.
                 throw new Exception("No instance can be created for class " + clazz);

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -88,7 +88,7 @@ public Status(final String code, final Object... args) {
             try {
                 this.description = format(this.description, args);
             } catch (IllegalFormatException e) {
-                logger.warn(format("Error formatting description of status %s", code), e);
+//                logger.warn(format("Error formatting description of status %s", code), e);
             }
             if ((this.severity = (String) map.get("severity")) == null)
                 this.severity = defaultSeverity;

File: traceability/src/test/java/com/networknt/traceability/TraceabilityHandlerTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.networknt.client.Http2Client;
 import com.networknt.exception.ClientException;
 import com.networknt.httpstring.HttpStringConstants;
-import com.networknt.utility.Constants;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.*;
@@ -36,7 +35,6 @@
 import org.xnio.IoUtils;
 import org.xnio.OptionMap;
 
-import java.io.IOException;
 import java.net.URI;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;

File: zookeeper/src/main/java/com/networknt/zookeeper/ZooKeeperRegistry.java
Patch:
@@ -28,14 +28,12 @@
 import com.networknt.status.Status;
 import com.networknt.zookeeper.client.ZooKeeperClient;
 import org.I0Itec.zkclient.IZkChildListener;
-import org.I0Itec.zkclient.IZkDataListener;
 import org.I0Itec.zkclient.IZkStateListener;
 import org.apache.zookeeper.Watcher;
 
 import com.networknt.utility.Constants;
 import com.networknt.exception.FrameworkException;
 import com.networknt.registry.support.command.CommandFailbackRegistry;
-import com.networknt.registry.support.command.CommandListener;
 import com.networknt.registry.support.command.ServiceListener;
 import com.networknt.registry.URL;
 import com.networknt.utility.ConcurrentHashSet;

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -39,6 +39,7 @@
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
 import org.xnio.Options;
+import org.xnio.Sequence;
 import org.xnio.SslClientAuthMode;
 
 import javax.net.ssl.*;
@@ -252,6 +253,8 @@ static private boolean bind(HttpHandler handler, int port) {
                     .setServerOption(UndertowOptions.ALWAYS_SET_DATE, serverConfig.isAlwaysSetDate())
                     .setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false)
                     .setServerOption(UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL, serverConfig.isAllowUnescapedCharactersInUrl())
+                    // This is to overcome a bug in JDK 11.0.1, 11.0.2. For more info https://issues.jboss.org/browse/UNDERTOW-1422
+                    .setSocketOption(Options.SSL_ENABLED_PROTOCOLS, Sequence.of("TLSv1.2"))
                     .setHandler(Handlers.header(handler, Headers.SERVER_STRING, serverConfig.getServerString())).setWorkerThreads(serverConfig.getWorkerThreads()).build();
 
             server.start();

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.networknt.config.Config;
 import com.networknt.config.JsonMapper;
 import com.networknt.correlation.CorrelationHandler;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.handler.Handler;
 import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.utility.Constants;

File: basic-auth/src/test/java/com/networknt/basicauth/BasicAuthHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.status.Status;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.status.Status;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: body/src/test/java/com/networknt/body/BodyStringCachingTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.networknt.body;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -21,7 +21,7 @@
 import com.networknt.client.Http2Client;
 import com.networknt.cluster.Cluster;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.httpstring.ContentType;
 import com.networknt.monad.Failure;
 import com.networknt.monad.Result;

File: content/src/test/java/com/networknt/content/ContentHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.content;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.correlation;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.httpstring.HttpStringConstants;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: cors/src/test/java/com/networknt/cors/CorsHttpHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 package com.networknt.cors;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;

File: deref-token/src/test/java/com/networknt/deref/DerefMiddlewareHandlerTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.networknt.deref;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: dump/src/test/java/com/networknt/dump/DumpHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.correlation.CorrelationHandler;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.httpstring.HttpStringConstants;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -19,9 +19,9 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
-import com.networknt.status.exception.ApiException;
-import com.networknt.status.exception.FrameworkException;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ApiException;
+import com.networknt.exception.FrameworkException;
+import com.networknt.exception.ClientException;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;

File: exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java
Patch:
@@ -19,8 +19,8 @@
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 import com.networknt.status.Status;
-import com.networknt.status.exception.ApiException;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ApiException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: header/src/test/java/com/networknt/header/HeaderHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: health/src/test/java/com/networknt/health/HealthGetHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.health;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.status.Status;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.info;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: ip-whitelist/src/test/java/com/networknt/whitelist/WhitelistHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.whitelist;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -17,7 +17,7 @@
 package io.dropwizard.metrics.influxdb;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.mask.Mask;
 import io.dropwizard.metrics.influxdb.data.InfluxDbPoint;
 import io.dropwizard.metrics.influxdb.data.InfluxDbWriteObject;

File: metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.metrics;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: prometheus/src/test/java/com/networknt/metrics/prometheus/PrometheusHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.metrics.prometheus;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;

File: rate-limit/src/test/java/com/networknt/limit/LimitHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.limit;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.networknt.registry.URLImpl;
 import com.networknt.status.Status;
-import com.networknt.status.exception.FrameworkException;
+import com.networknt.exception.FrameworkException;
 import com.networknt.registry.NotifyListener;
 import com.networknt.registry.URL;
 import com.networknt.utility.Constants;

File: registry/src/main/java/com/networknt/registry/support/FailbackRegistry.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.TimeUnit;
 
 import com.networknt.registry.URLParamType;
-import com.networknt.status.exception.FrameworkException;
+import com.networknt.exception.FrameworkException;
 import com.networknt.registry.NotifyListener;
 import com.networknt.registry.URL;
 import com.networknt.status.Status;

File: registry/src/main/java/com/networknt/registry/support/command/CommandServiceManager.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.networknt.registry.support.command;
 
-import com.networknt.status.exception.FrameworkException;
+import com.networknt.exception.FrameworkException;
 import com.networknt.registry.NotifyListener;
 import com.networknt.registry.URL;
 import com.networknt.registry.URLImpl;

File: resource/src/test/java/com/networknt/resource/PathResourceConfigHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.resource;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;

File: sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.networknt.body.BodyHandler;
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.client.*;

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -21,7 +21,7 @@
 import com.networknt.client.oauth.SignKeyRequest;
 import com.networknt.client.oauth.TokenKeyRequest;
 import com.networknt.config.Config;
-import com.networknt.status.exception.ExpiredTokenException;
+import com.networknt.exception.ExpiredTokenException;
 import com.networknt.utility.FingerPrintUtil;
 import org.jose4j.jwk.JsonWebKey;
 import org.jose4j.jwk.JsonWebKeySet;

File: server/src/test/java/com/networknt/server/ServerTest.java
Patch:
@@ -17,8 +17,8 @@
 package com.networknt.server;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ApiException;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ApiException;
+import com.networknt.exception.ClientException;
 import io.undertow.UndertowOptions;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;

File: status/src/main/java/com/networknt/exception/ApiException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.status.exception;
+package com.networknt.exception;
 
 import com.networknt.status.Status;
 

File: status/src/main/java/com/networknt/exception/ClientException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.status.exception;
+package com.networknt.exception;
 
 import com.networknt.status.Status;
 

File: status/src/main/java/com/networknt/exception/ExpiredTokenException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.status.exception;
+package com.networknt.exception;
 
 /**
  * This is a checked exception used by JWT verification and it is thrown if

File: status/src/main/java/com/networknt/exception/FrameworkException.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.status.exception;
+package com.networknt.exception;
 
 import com.networknt.status.Status;
 

File: traceability/src/test/java/com/networknt/traceability/TraceabilityHandlerTest.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.traceability;
 
 import com.networknt.client.Http2Client;
-import com.networknt.status.exception.ClientException;
+import com.networknt.exception.ClientException;
 import com.networknt.httpstring.HttpStringConstants;
 import io.undertow.Handlers;
 import io.undertow.Undertow;

File: zookeeper/src/main/java/com/networknt/zookeeper/ZkUtils.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.networknt.status.Status;
 import com.networknt.utility.Constants;
-import com.networknt.status.exception.FrameworkException;
+import com.networknt.exception.FrameworkException;
 import com.networknt.registry.URL;
 
 /**

File: zookeeper/src/main/java/com/networknt/zookeeper/ZooKeeperRegistry.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.zookeeper.Watcher;
 
 import com.networknt.utility.Constants;
-import com.networknt.status.exception.FrameworkException;
+import com.networknt.exception.FrameworkException;
 import com.networknt.registry.support.command.CommandFailbackRegistry;
 import com.networknt.registry.support.command.ServiceListener;
 import com.networknt.registry.URL;

File: metrics/src/main/java/io/dropwizard/metrics/Counter.java
Patch:
@@ -16,14 +16,16 @@
 
 package io.dropwizard.metrics;
 
+import java.util.concurrent.atomic.LongAdder;
+
 /**
  * An incrementing and decrementing counter metric.
  */
 public class Counter implements Metric, Counting {
     private final LongAdder count;
 
     public Counter() {
-        this.count = LongAdderFactory.create();
+        this.count = new LongAdder();
     }
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/EWMA.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static java.lang.Math.exp;
-
+import java.util.concurrent.atomic.LongAdder;
 /**
  * An exponentially-weighted moving average.
  *
@@ -42,7 +42,7 @@ public class EWMA {
     private volatile boolean initialized = false;
     private volatile double rate = 0.0;
 
-    private final LongAdder uncounted = LongAdderFactory.create();
+    private final LongAdder uncounted = new LongAdder();
     private final double alpha, interval;
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/Histogram.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
+import java.util.concurrent.atomic.LongAdder;
 
 /**
  * A metric which calculates the distribution of a value.
@@ -38,7 +39,7 @@ public class Histogram implements Metric, Sampling, Counting {
      */
     public Histogram(Reservoir reservoir) {
         this.reservoir = reservoir;
-        this.count = LongAdderFactory.create();
+        this.count = new LongAdder();
     }
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/Meter.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.LongAdder;
 
 /**
  * A meter metric which measures mean throughput and one-, five-, and fifteen-minute
@@ -32,7 +33,7 @@ public class Meter implements Metered {
     private final EWMA m5Rate = EWMA.fiveMinuteEWMA();
     private final EWMA m15Rate = EWMA.fifteenMinuteEWMA();
 
-    private final LongAdder count = LongAdderFactory.create();
+    private final LongAdder count = new LongAdder();
     private final long startTime;
     private final AtomicLong lastTick;
     private final Clock clock;

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -68,7 +68,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({AuditConfig.class, LoggerFactory.class})
-@PowerMockIgnore({"javax.*", "org.xml.sax.*", "org.apache.log4j.*"})
+@PowerMockIgnore({"javax.*", "org.xml.sax.*", "org.apache.log4j.*", "java.xml.*", "com.sun.*"})
 public class AuditHandlerTest {
     static Logger logger = LoggerFactory.getLogger(AuditHandlerTest.class);
 

File: client/src/main/java/com/networknt/client/oauth/ClientRequestComposerProvider.java
Patch:
@@ -35,7 +35,7 @@ public static ClientRequestComposerProvider getInstance() {
 
     /**
      * get IClientRequestComposable based on ClientRequestComposers composer name
-     * @param composerName
+     * @param composerName composer name
      * @return IClientRequestComposable composer
      */
     public IClientRequestComposable getComposer(ClientRequestComposers composerName) {

File: client/src/main/java/com/networknt/client/oauth/IClientRequestComposable.java
Patch:
@@ -9,14 +9,14 @@
 public interface IClientRequestComposable {
     /**
      * compose an actual ClientRequest based on the given TokenRequest model.
-     * @param tokenRequest
+     * @param tokenRequest token request
      * @return ClientRequest
      */
     ClientRequest composeClientRequest(TokenRequest tokenRequest);
 
     /**
      * compose an actual request body based on the given TokenRequest model.
-     * @param tokenRequest
+     * @param tokenRequest token request
      * @return String
      */
     String composeRequestBody(TokenRequest tokenRequest);

File: client/src/main/java/com/networknt/client/oauth/TokenManager.java
Patch:
@@ -98,8 +98,8 @@ private synchronized Jwt getJwt(ICacheStrategy cacheStrategy, Jwt.Key key) {
      * get a Jwt with a provided clientRequest,
      * it will get token based on Jwt.Key (either scope or service_id)
      * if the user declared both scope and service_id in header, it will get jwt based on scope
-     * @param clientRequest
-     * @return
+     * @param clientRequest client request
+     * @return Result
      */
     public Result<Jwt> getJwt(ClientRequest clientRequest) {
         HeaderValues scope = clientRequest.getRequestHeaders().get(OauthHelper.SCOPE);

File: client/src/main/java/com/networknt/client/ssl/APINameChecker.java
Patch:
@@ -47,9 +47,9 @@ public static void verifyAndThrow(final Set<String> nameSet, final X509Certifica
 	/**
 	 * Perform server identify check using given name and throw CertificateException if the check fails.
 	 * 
-	 * @param name
-	 * @param cert
-	 * @throws CertificateException
+	 * @param name string
+	 * @param cert X509Certificate
+	 * @throws CertificateException CertificateException
 	 */
 	public static void verifyAndThrow(final String name, final X509Certificate cert) throws CertificateException{
 		if (!verify(name, cert)) {

File: client/src/main/java/com/networknt/client/ssl/ClientX509ExtendedTrustManager.java
Patch:
@@ -138,8 +138,8 @@ public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngi
 	 * 
 	 * Notes: this method should only be applied to verify server certificates on the client side.
 	 * 
-	 * @param cert
-	 * @throws CertificateException
+	 * @param cert X509Certificate
+	 * @throws CertificateException CertificateException
 	 */
 	private void doCustomServerIdentityCheck(X509Certificate cert) throws CertificateException{
 		if (EndpointIdentificationAlgorithm.APIS == identityAlg) {

File: config/src/test/java/com/networknt/config/ConfigClassPathTest.java
Patch:
@@ -45,7 +45,9 @@ public void setUp() throws Exception {
         config.getMapper().writeValue(new File(homeDir + "/test.json"), map);
 
         // Add home directory to the classpath of the system class loader.
-        addURL(new File(homeDir).toURI().toURL());
+        AppURLClassLoader classLoader = new AppURLClassLoader(new URL[0], ClassLoader.getSystemClassLoader());
+        classLoader.addURL(new File(homeDir).toURI().toURL());
+        config.setClassLoader(classLoader);
     }
 
     @Override

File: metrics/src/main/java/io/dropwizard/metrics/Counter.java
Patch:
@@ -16,14 +16,16 @@
 
 package io.dropwizard.metrics;
 
+import java.util.concurrent.atomic.LongAdder;
+
 /**
  * An incrementing and decrementing counter metric.
  */
 public class Counter implements Metric, Counting {
     private final LongAdder count;
 
     public Counter() {
-        this.count = LongAdderFactory.create();
+        this.count = new LongAdder();
     }
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/EWMA.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.TimeUnit;
 
 import static java.lang.Math.exp;
-
+import java.util.concurrent.atomic.LongAdder;
 /**
  * An exponentially-weighted moving average.
  *
@@ -42,7 +42,7 @@ public class EWMA {
     private volatile boolean initialized = false;
     private volatile double rate = 0.0;
 
-    private final LongAdder uncounted = LongAdderFactory.create();
+    private final LongAdder uncounted = new LongAdder();
     private final double alpha, interval;
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/Histogram.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
+import java.util.concurrent.atomic.LongAdder;
 
 /**
  * A metric which calculates the distribution of a value.
@@ -38,7 +39,7 @@ public class Histogram implements Metric, Sampling, Counting {
      */
     public Histogram(Reservoir reservoir) {
         this.reservoir = reservoir;
-        this.count = LongAdderFactory.create();
+        this.count = new LongAdder();
     }
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/Meter.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.LongAdder;
 
 /**
  * A meter metric which measures mean throughput and one-, five-, and fifteen-minute
@@ -32,7 +33,7 @@ public class Meter implements Metered {
     private final EWMA m5Rate = EWMA.fiveMinuteEWMA();
     private final EWMA m15Rate = EWMA.fifteenMinuteEWMA();
 
-    private final LongAdder count = LongAdderFactory.create();
+    private final LongAdder count = new LongAdder();
     private final long startTime;
     private final AtomicLong lastTick;
     private final Clock clock;

File: metrics/src/test/java/sandbox/SendToLocalInfluxDB.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String[] args) {
             }
         } catch (Exception exc) {
             exc.printStackTrace();
-            System.exit(1);
+//            System.exit(1);
         } finally {
             if (context != null) {
                 context.stop();

File: audit/src/main/java/module-info.java
Patch:
@@ -7,6 +7,6 @@
     requires com.networknt.mask;
 
     requires com.fasterxml.jackson.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -336,7 +336,7 @@ public void shouldNotAddListenerIfStatusCodeAndResponseTimeAreFalse() throws Exc
         Mockito.verify(objectMapper).writeValueAsString(Mockito.any());
     }
 
-    private class ArgumentMatcherAuditInfo implements ArgumentMatcher<AttachmentKey<Map>> {
+    private static class ArgumentMatcherAuditInfo implements ArgumentMatcher<AttachmentKey<Map>> {
 
         @Override
         public boolean matches(AttachmentKey<Map> attachmentKey) {
@@ -347,7 +347,7 @@ public boolean matches(AttachmentKey<Map> attachmentKey) {
         }
     }
 
-    private class ArgumentMatcherChainId implements ArgumentMatcher<AttachmentKey<String>> {
+    private static class ArgumentMatcherChainId implements ArgumentMatcher<AttachmentKey<String>> {
 
         @Override
         public boolean matches(AttachmentKey<String> attachmentKey) {
@@ -358,7 +358,7 @@ public boolean matches(AttachmentKey<String> attachmentKey) {
         }
     }
 
-    private class ArgumentMatcherChainSeq implements ArgumentMatcher<AttachmentKey<Integer>> {
+    private static class ArgumentMatcherChainSeq implements ArgumentMatcher<AttachmentKey<Integer>> {
 
         @Override
         public boolean matches(AttachmentKey<Integer> attachmentKey) {

File: balance/src/main/java/module-info.java
Patch:
@@ -4,5 +4,5 @@
     requires com.networknt.registry;
     requires com.networknt.utility;
 
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: basic-auth/src/main/java/module-info.java
Patch:
@@ -8,6 +8,6 @@
     requires com.networknt.common;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: body/src/main/java/module-info.java
Patch:
@@ -6,7 +6,7 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
     requires com.fasterxml.jackson.core;
 }
\ No newline at end of file

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -46,6 +46,7 @@ public AuthorizationCodeRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    setServiceId((String)tokenConfig.get(SERVICE_ID));
                     Object object = tokenConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> acConfig = (Map<String, Object>) tokenConfig.get(AUTHORIZATION_CODE);

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -47,6 +47,7 @@ public ClientCredentialsRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    setServiceId((String)tokenConfig.get(SERVICE_ID));
                     Object object = tokenConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> ccConfig = (Map<String, Object>) tokenConfig.get(CLIENT_CREDENTIALS);

File: client/src/main/java/com/networknt/client/oauth/Jwt.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2019 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/RefreshTokenRequest.java
Patch:
@@ -38,6 +38,7 @@ public RefreshTokenRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    setServiceId((String)tokenConfig.get(SERVICE_ID));
                     Object object = tokenConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> rtConfig = (Map<String, Object>) tokenConfig.get(REFRESH_TOKEN);

File: client/src/main/java/module-info.java
Patch:
@@ -9,11 +9,13 @@
     requires com.networknt.utility;
     requires com.networknt.http.string;
     requires com.networknt.monadresult;
+    requires com.networknt.cluster;
+    requires com.networknt.service;
 
     requires java.sql;
     requires com.fasterxml.jackson.annotation;
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires encoder;
     requires org.apache.commons.codec;
     requires xnio.api;

File: cluster/src/main/java/module-info.java
Patch:
@@ -6,5 +6,5 @@
     requires com.networknt.service;
     requires com.networknt.utility;
 
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: config/src/main/java/module-info.java
Patch:
@@ -7,7 +7,7 @@
     requires com.fasterxml.jackson.databind;
     requires com.fasterxml.jackson.datatype.jsr310;
     requires encoder;
-    requires slf4j.api;
+    requires org.slf4j;
     requires snakeyaml;
 
     uses com.networknt.config.Config;

File: config/src/test/java/com/networknt/config/JsonMapperTest.java
Patch:
@@ -33,8 +33,8 @@ public void testLong() {
         map.put("string", "hello");
         map.put("long", 111L);
         map.put("int", 111);
-        map.put("Long", new Long(111));
-        map.put("Integer", new Integer(111));
+        map.put("Long", Long.valueOf(111));
+        map.put("Integer", Integer.valueOf(111));
         String s = JsonMapper.toJson(map);
         System.out.println("s = " + s);
         Map<String, Object> newMap = JsonMapper.string2Map(s);

File: consul/src/main/java/module-info.java
Patch:
@@ -8,5 +8,7 @@
     requires com.networknt.common;
     requires com.networknt.http.string;
 
-    requires slf4j.api;
+    requires org.slf4j;
+    requires undertow.core;
+
 }
\ No newline at end of file

File: correlation/src/main/java/module-info.java
Patch:
@@ -7,6 +7,6 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: cors/src/main/java/module-info.java
Patch:
@@ -6,6 +6,6 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: deref-token/src/main/java/module-info.java
Patch:
@@ -7,5 +7,5 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: dump/src/main/java/module-info.java
Patch:
@@ -9,5 +9,6 @@
     requires com.networknt.body;
 
     requires xnio.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: email-sender/src/main/java/module-info.java
Patch:
@@ -7,5 +7,5 @@
     
     requires java.mail;
     requires activation;
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: exception/src/main/java/module-info.java
Patch:
@@ -7,7 +7,7 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires com.fasterxml.jackson.annotation;
 
     requires java.logging;

File: handler/src/main/java/com/networknt/handler/config/PathChain.java
Patch:
@@ -69,6 +69,7 @@ public String toString() {
     /**
      * Validate the settings and raise Exception on error.
      * The origin is used to help locate problems.
+     * @param origin the origin
      */
     public void validate(String origin) {
         List<String> problems = new ArrayList<>();

File: handler/src/main/java/module-info.java
Patch:
@@ -7,5 +7,5 @@
     requires com.networknt.service;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: header/src/main/java/module-info.java
Patch:
@@ -6,6 +6,6 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: health/src/main/java/module-info.java
Patch:
@@ -4,6 +4,6 @@
     requires com.networknt.handler;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: http-string/src/main/java/com/networknt/httpstring/ContentType.java
Patch:
@@ -25,7 +25,7 @@ public enum ContentType {
     XML("text/xml"),
     ANY_TYPE("*/*");
 
-    private String value;
+    private final String value;
 
     ContentType(String contentType) {
         this.value = contentType;

File: http-url/src/main/java/module-info.java
Patch:
@@ -2,5 +2,5 @@
     exports com.networknt.url;
 
     requires com.networknt.utility;
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: info/src/main/java/module-info.java
Patch:
@@ -8,5 +8,5 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -42,6 +42,7 @@
 import java.io.PrintWriter;
 import java.net.URI;
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
@@ -64,7 +65,7 @@ public static void setUp() throws Exception {
         Config.getInstance().clear();
         Map<String, Object> map = new HashMap<>();
         map.put("enableServerInfo", false);
-        Config.getInstance().getYaml().dump(map, new PrintWriter(new File(homeDir + "/info.yml")));
+        Config.getInstance().getYaml().dump(map, new PrintWriter(new File(homeDir + "/info.yml"), Charset.defaultCharset().name()));
         // Add home directory to the classpath of the system class loader.
         AppURLClassLoader classLoader = new AppURLClassLoader(new URL[0], ClassLoader.getSystemClassLoader());
         classLoader.addURL(new File(homeDir).toURI().toURL());

File: ip-whitelist/src/main/java/module-info.java
Patch:
@@ -7,6 +7,6 @@
 
     requires undertow.core;
     requires xnio.api;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: mask/src/main/java/module-info.java
Patch:
@@ -4,6 +4,6 @@
     requires com.networknt.config;
     requires com.networknt.utility;
 
-    requires slf4j.api;
+    requires org.slf4j;
     requires json.path;
 }
\ No newline at end of file

File: metrics/src/main/java/module-info.java
Patch:
@@ -15,7 +15,7 @@
     requires java.management;
     requires HdrHistogram;
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires jdk.unsupported;
     requires jsr305;
 }
\ No newline at end of file

File: monad-result/src/main/java/module-info.java
Patch:
@@ -6,6 +6,6 @@
     requires com.networknt.utility;
 
     requires java.management;
-    requires slf4j.api;
+    requires org.slf4j;
     requires jdk.unsupported;
 }
\ No newline at end of file

File: prometheus/src/main/java/module-info.java
Patch:
@@ -11,5 +11,5 @@
     requires simpleclient.common;
     requires com.fasterxml.jackson.annotation;
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
 }
\ No newline at end of file

File: registry/src/main/java/com/networknt/registry/support/AbstractRegistry.java
Patch:
@@ -150,6 +150,7 @@ public URL getUrl() {
         return registryUrl;
     }
 
+
     @Override
     public Collection<URL> getRegisteredServiceUrls() {
         return registeredServiceUrls;

File: registry/src/main/java/module-info.java
Patch:
@@ -3,11 +3,10 @@
     exports com.networknt.registry.support;
     exports com.networknt.registry.support.command;
 
-    requires com.networknt.exception;
     requires com.networknt.status;
     requires com.networknt.utility;
     requires com.networknt.switcher;
 
-    requires slf4j.api;
+    requires org.slf4j;
 
 }
\ No newline at end of file

File: registry/src/test/java/com/networknt/registry/URLTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.networknt.utility.Constants;
 import junit.framework.TestCase;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.fail;
@@ -36,7 +37,8 @@
  */
 
 public class URLTest {
-    //@Test
+    @Test
+    @Ignore
     public void testCheckGetMethod() {
         Method[] methods = URL.class.getDeclaredMethods();
         for (Method m : methods) {

File: resource/src/main/java/com/networknt/resource/ResourceHelpers.java
Patch:
@@ -74,7 +74,7 @@ public static boolean isResourcePath(String requestPath, PathResourceProvider[]
         if (pathResourceProviders != null && pathResourceProviders.length > 0) {
             for (PathResourceProvider pathResourceProvider : pathResourceProviders) {
                 if ((pathResourceProvider.isPrefixPath() && requestPath.startsWith(pathResourceProvider.getPath()))
-                        || !pathResourceProvider.isPrefixPath() && requestPath.equals(pathResourceProvider.getPath())) {
+                        || (!pathResourceProvider.isPrefixPath() && requestPath.equals(pathResourceProvider.getPath()))) {
                     isResourcePath = true;
                 }
             }

File: resource/src/main/java/module-info.java
Patch:
@@ -3,6 +3,6 @@
 
     requires com.networknt.config;
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: sanitizer/src/main/java/module-info.java
Patch:
@@ -8,6 +8,6 @@
 
     requires undertow.core;
     requires encoder;
-    requires slf4j.api;
+    requires org.slf4j;
     requires com.fasterxml.jackson.annotation;
 }
\ No newline at end of file

File: security/src/main/java/module-info.java
Patch:
@@ -10,7 +10,7 @@
     requires com.networknt.status;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires jose4j;
     requires com.github.benmanes.caffeine;
 }
\ No newline at end of file

File: server/src/main/java/module-info.java
Patch:
@@ -11,7 +11,7 @@
     requires com.networknt.switcher;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires xnio.api;
     requires json.path;
 }
\ No newline at end of file

File: server/src/test/java/com/networknt/server/ServerConfigTest.java
Patch:
@@ -33,6 +33,7 @@ public void testNullEnv() {
         // ensure that env is null if it is missing in the server.yml
         ServerConfig serverConfig = (ServerConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ServerConfig.class);
         Assert.assertNull(serverConfig.getEnvironment());
+        Assert.assertEquals("petstore", serverConfig.getServiceName());
     }
 
     @Test
@@ -59,6 +60,7 @@ public void testInvalidServerOptions() {
         Assert.assertEquals(10000, serverConfig.getBacklog());
         Assert.assertEquals(false, serverConfig.isAlwaysSetDate());
         Assert.assertEquals("L", serverConfig.getServerString());
+        Assert.assertEquals(false, serverConfig.isAllowUnescapedCharactersInUrl());
     }
 
     @Test
@@ -72,5 +74,6 @@ public void testValidServerOptions() {
         Assert.assertEquals(10000, serverConfig.getBacklog());
         Assert.assertEquals(false, serverConfig.isAlwaysSetDate());
         Assert.assertEquals("TEST", serverConfig.getServerString());
+        Assert.assertEquals(true, serverConfig.isAllowUnescapedCharactersInUrl());
     }
 }

File: server/src/test/java/com/networknt/server/TestServer.java
Patch:
@@ -39,7 +39,7 @@ private TestServer() {
     }
 
     public ServerConfig getServerConfig() {
-        return Server.config;
+        return Server.getServerConfig();
     }
 
     @Override

File: service/src/main/java/module-info.java
Patch:
@@ -1,8 +1,7 @@
 module com.networknt.service {
     exports com.networknt.service;
-
     requires com.networknt.config;
     uses com.networknt.config.Config;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.desktop;
-}
\ No newline at end of file
+}

File: status/src/main/java/module-info.java
Patch:
@@ -5,6 +5,6 @@
     requires com.networknt.config;
     requires com.networknt.service;
     requires com.networknt.utility;
-    requires slf4j.api;
+    requires org.slf4j;
 
 }
\ No newline at end of file

File: traceability/src/main/java/module-info.java
Patch:
@@ -7,6 +7,6 @@
     requires com.networknt.utility;
 
     requires undertow.core;
-    requires slf4j.api;
+    requires org.slf4j;
     requires java.logging;
 }
\ No newline at end of file

File: utility/src/main/java/module-info.java
Patch:
@@ -1,7 +1,7 @@
 module com.networknt.utility {
     exports com.networknt.utility;
 
-    requires slf4j.api;
+    requires org.slf4j;
     requires org.apache.commons.codec;
 
 }
\ No newline at end of file

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.utility;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
@@ -25,7 +26,8 @@
 import java.nio.charset.StandardCharsets;
 
 public class StringUtilsTest {
-    //@Test
+    @Test
+    @Ignore
     public void testExpandEnvVars() {
         String s = "IP=${DOCKER_HOST_IP}";
         Assert.assertEquals("IP=192.168.1.120", StringUtils.expandEnvVars(s));

File: zookeeper/src/main/java/module-info.java
Patch:
@@ -4,9 +4,8 @@
     requires com.networknt.registry;
     requires com.networknt.status;
     requires com.networknt.utility;
-    requires com.networknt.exception;
 
     requires zkclient;
-    requires slf4j.api;
+    requires org.slf4j;
     requires zookeeper;
 }
\ No newline at end of file

File: server/src/test/java/com/networknt/server/ServerConfigTest.java
Patch:
@@ -33,6 +33,7 @@ public void testNullEnv() {
         // ensure that env is null if it is missing in the server.yml
         ServerConfig serverConfig = (ServerConfig)Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ServerConfig.class);
         Assert.assertNull(serverConfig.getEnvironment());
+        Assert.assertEquals("petstore", serverConfig.getServiceName());
     }
 
     @Test

File: client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureNoRequest.java
Patch:
@@ -24,6 +24,9 @@ public void completed(final ClientExchange result) {
 
                     @Override
                     protected void stringDone(String string) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("Service call response = {}", string);
+                        }
                         result.getResponse().putAttachment(com.networknt.client.Http2Client.RESPONSE_BODY, string);
                         Http2ClientCompletableFutureNoRequest.super.complete(result.getResponse());
                     }

File: client/src/main/java/com/networknt/client/http/Http2ClientCompletableFutureWithRequest.java
Patch:
@@ -29,6 +29,9 @@ public void completed(ClientExchange result) {
                 new StringReadChannelListener(com.networknt.client.Http2Client.BUFFER_POOL) {
                     @Override
                     protected void stringDone(String string) {
+                        if (logger.isDebugEnabled()) {
+                            logger.debug("Service call response = {}", string);
+                        }
                         result.getResponse().putAttachment(com.networknt.client.Http2Client.RESPONSE_BODY, string);
                         complete(result.getResponse());
                     }

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -24,7 +24,6 @@
 import com.networknt.consul.ConsulResponse;
 import com.networknt.consul.ConsulService;
 import com.networknt.httpstring.HttpStringConstants;
-import com.networknt.utility.Constants;
 import io.undertow.UndertowOptions;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;
@@ -74,7 +73,7 @@ public class ConsulClientImpl implements ConsulClient {
 	public ConsulClientImpl() {
 		// Will use http/2 connection if tls is enabled as Consul only support HTTP/2 with TLS.
 		String consulUrl = config.getConsulUrl().toLowerCase();
-		optionMap =  consulUrl.startsWith("https") ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY;
+		optionMap =  config.isEnableHttp2() ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true) : OptionMap.EMPTY;
 		if(logger.isDebugEnabled()) logger.debug("url = " + consulUrl);
 		if(config.getWait() != null && config.getWait().length() > 2) wait = config.getWait();
 		if(logger.isDebugEnabled()) logger.debug("wait = " + wait);

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -172,12 +172,12 @@ private String getDecryptorClass() {
         			logger.debug("found decryptorClass={}", decryptorClass);
         		}
         		
-        		return decryptorClass;
+        		return decryptorClass == null ? DecryptConstructor.DEFAULT_DECRYPTOR_CLASS : decryptorClass;
         	}else {
         		logger.warn("config file cannot be found.");
         	}
         	
-        	return null;
+        	return DecryptConstructor.DEFAULT_DECRYPTOR_CLASS;
         }
 
         private static Config initialize() {

File: consul/src/main/java/com/networknt/consul/ConsulUtils.java
Patch:
@@ -67,11 +67,11 @@ public static ConsulService buildService(URL url) {
 
     /**
      * build url from service
-     *
+     * @param protocol the protocol of the service
      * @param service consul service
      * @return URL object
      */
-    public static URL buildUrl(ConsulService service) {
+    public static URL buildUrl(String protocol, ConsulService service) {
         URL url = null;
         if (url == null) {
             Map<String, String> params = new HashMap<String, String>();
@@ -81,7 +81,7 @@ public static URL buildUrl(ConsulService service) {
             if (!service.getTags().isEmpty()) {
                 params.put(URLParamType.environment.getName(), service.getTags().get(0));
             }
-            url = new URLImpl(ConsulConstants.DEFAULT_PROTOCOL, service.getAddress(), service.getPort(),
+            url = new URLImpl(protocol, service.getAddress(), service.getPort(),
                     ConsulUtils.getPathFromServiceId(service.getId()), params);
         }
         return url;

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -46,6 +46,7 @@ public AuthorizationCodeRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    setServiceId((String)tokenConfig.get(SERVICE_ID));
                     Object object = tokenConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> acConfig = (Map<String, Object>) tokenConfig.get(AUTHORIZATION_CODE);

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -47,6 +47,7 @@ public ClientCredentialsRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    setServiceId((String)tokenConfig.get(SERVICE_ID));
                     Object object = tokenConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> ccConfig = (Map<String, Object>) tokenConfig.get(CLIENT_CREDENTIALS);

File: client/src/main/java/com/networknt/client/oauth/RefreshTokenRequest.java
Patch:
@@ -38,6 +38,7 @@ public RefreshTokenRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    setServiceId((String)tokenConfig.get(SERVICE_ID));
                     Object object = tokenConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> rtConfig = (Map<String, Object>) tokenConfig.get(REFRESH_TOKEN);

File: client/src/main/java/com/networknt/client/oauth/SignKeyRequest.java
Patch:
@@ -45,6 +45,7 @@ public SignKeyRequest(String kid) {
                     Map<String, Object> keyConfig = (Map<String, Object>)signConfig.get(KEY);
                     if(keyConfig != null) {
                         setServerUrl((String)keyConfig.get(SERVER_URL));
+                        setServiceId((String)keyConfig.get(SERVICE_ID));
                         Object object = keyConfig.get(ENABLE_HTTP2);
                         setEnableHttp2(object != null && (Boolean) object);
                         setUri(keyConfig.get(URI) + "/" + kid);

File: client/src/main/java/com/networknt/client/oauth/TokenKeyRequest.java
Patch:
@@ -46,6 +46,7 @@ public TokenKeyRequest(String kid) {
                 Map<String, Object> keyConfig = (Map<String, Object>)oauthConfig.get(KEY);
                 if(keyConfig != null) {
                     setServerUrl((String)keyConfig.get(SERVER_URL));
+                    setServiceId((String)keyConfig.get(SERVICE_ID));
                     Object object = keyConfig.get(ENABLE_HTTP2);
                     setEnableHttp2(object != null && (Boolean) object);
                     setUri(keyConfig.get(URI) + "/" + kid);
@@ -59,6 +60,7 @@ public TokenKeyRequest(String kid) {
                         keyConfig = (Map<String, Object>)tokenConfig.get(KEY);
                         if(keyConfig != null) {
                             setServerUrl((String)keyConfig.get(SERVER_URL));
+                            setServiceId((String)keyConfig.get(SERVICE_ID));
                             Object object = keyConfig.get(ENABLE_HTTP2);
                             setEnableHttp2(object != null && (Boolean) object);
                             setUri(keyConfig.get(URI) + "/" + kid);

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.config;
 
 import java.io.ByteArrayInputStream;
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -108,7 +109,7 @@ private static final class FileConfigImpl extends Config {
 
         static final Logger logger = LoggerFactory.getLogger(Config.class);
 
-        public final String[] EXTERNALIZED_PROPERTY_DIR = System.getProperty(LIGHT_4J_CONFIG_DIR, "").split(":");
+        public final String[] EXTERNALIZED_PROPERTY_DIR = System.getProperty(LIGHT_4J_CONFIG_DIR, "").split(File.pathSeparator);
 
         private long cacheExpirationTime = 0L;
 

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -39,6 +39,8 @@
  * Created by stevehu on 2017-01-27.
  */
 public class LightCluster implements Cluster {
+    private final static String GENERAL_TAG = "*";
+
     private static Logger logger = LoggerFactory.getLogger(LightCluster.class);
     private static Registry registry = SingletonServiceFactory.getBean(Registry.class);
     private static LoadBalance loadBalance = SingletonServiceFactory.getBean(LoadBalance.class);
@@ -105,7 +107,7 @@ private List<URL> discovery(String protocol, String serviceId, String tag) {
         if(urls != null) {
             return urls.stream()
                     .filter(url -> url.getParameter(URLParamType.environment.getName()) != null
-                            && url.getParameter(URLParamType.environment.getName()).equals(tag))
+                            && (url.getParameter(URLParamType.environment.getName()).equals(tag) || url.getParameter(URLParamType.environment.getName()).equals(GENERAL_TAG)))
                     .collect(Collectors.toList());
         }
         return urls;

File: registry/src/main/java/com/networknt/registry/support/AbstractRegistry.java
Patch:
@@ -150,6 +150,7 @@ public URL getUrl() {
         return registryUrl;
     }
 
+
     @Override
     public Collection<URL> getRegisteredServiceUrls() {
         return registeredServiceUrls;

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -49,7 +49,7 @@ public DirectRegistry(URL url) {
                 if(entry.getValue().contains(",")) {
                     String[] directUrlArray = entry.getValue().split(",");
                     for (String directUrl : directUrlArray) {
-                        urls.add(URLImpl.valueOf(directUrl + "/" + entry.getKey()));
+                        urls.add(URLImpl.valueOf(directUrl.trim() + "/" + entry.getKey()));
                     }
                 } else {
                     urls.add(URLImpl.valueOf(entry.getValue() + "/" + entry.getKey()));

File: server/src/test/java/com/networknt/server/TestServer.java
Patch:
@@ -39,7 +39,7 @@ private TestServer() {
     }
 
     public ServerConfig getServerConfig() {
-        return Server.config;
+        return Server.getServerConfig();
     }
 
     @Override

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -89,8 +89,8 @@ public class MetricsHandler implements MiddlewareHandler {
     Map<String, String> commonTags = new HashMap<>();
 
     public MetricsHandler() {
-        commonTags.put("apiName", Server.getServerConfig().getServiceId());
-        commonTags.put("environment", Server.getServerConfig().getEnvironment());
+        commonTags.put("apiName", Server.config.getServiceId());
+        commonTags.put("environment", Server.config.getEnvironment());
         InetAddress inetAddress = Util.getInetAddress();
         // On Docker for Mac, inetAddress will be null as there is a bug.
         commonTags.put("ipAddress", inetAddress == null ? "unknown" : inetAddress.getHostAddress());

File: server/src/main/java/com/networknt/server/DefaultConfigLoader.java
Patch:
@@ -73,7 +73,7 @@ public void init() {
                 return;
             }
             String version = Util.getJarVersion();
-            String service = Server.getServerConfig().getServiceId();
+            String service = Server.config.getServiceId();
             String tempDir = System.getProperty("java.io.tmpdir");
             String zipFile = tempDir + "/config.zip";
             // /v1/config/1.2.4/dev/com.networknt.petstore-1.0.0

File: server/src/test/java/com/networknt/server/TestServer.java
Patch:
@@ -39,7 +39,7 @@ private TestServer() {
     }
 
     public ServerConfig getServerConfig() {
-        return Server.getServerConfig();
+        return Server.config;
     }
 
     @Override

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -73,6 +73,8 @@ public class Server {
     // service_id in slf4j MDC
     static final String SID = "sId";
 
+    @Deprecated
+    public static ServerConfig config = getServerConfig(); // there are a lot of users are using the static variable in their code.
     public final static TrustManager[] TRUST_ALL_CERTS = new X509TrustManager[]{new DummyTrustManager()};
 
     static protected boolean shutdownRequested = false;
@@ -161,6 +163,7 @@ static public void start() {
         if (serverConfig.dynamicPort) {
             if (serverConfig.minPort > serverConfig.maxPort) {
                 String errMessage = "No ports available to bind to - the minPort is larger than the maxPort in server.yml";
+                System.out.println(errMessage);
                 logger.error(errMessage);
                 throw new RuntimeException(errMessage);
             }          

File: client/src/main/java/com/networknt/client/oauth/Jwt.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2019 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -49,7 +49,6 @@ public class ConfigInjection {
     private static final String SCALABLE_CONFIG = "config";
     private static final String EXCLUSION_CONFIG_FILE_LIST = "exclusionConfigFileList";
 
-    private static final Map<String, Object> valueMap = Config.getInstance().getJsonMapConfig(CENTRALIZED_MANAGEMENT);
     private static final Map<String, Object> exclusionMap = Config.getInstance().getJsonMapConfig(SCALABLE_CONFIG);
 
     // Define the injection pattern which represents the injection points
@@ -91,6 +90,7 @@ private static Object getValue(String content) {
         if (injectionPattern != null) {
             // Use key of injectionPattern to get value from both environment variables and "values.yaml"
             Object envValue = typeCast(System.getenv(injectionPattern.getKey()));
+            Map<String, Object> valueMap = Config.getInstance().getJsonMapConfig(CENTRALIZED_MANAGEMENT);
             Object fileValue = (valueMap != null) ? valueMap.get(injectionPattern.getKey()) : null;
             // Return different value from different sources based on injection order defined before
             if ((INJECTION_ORDER_CODE.equals("2") && envValue != null) || (INJECTION_ORDER_CODE.equals("1") && fileValue == null)) {

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -89,8 +89,8 @@ public class MetricsHandler implements MiddlewareHandler {
     Map<String, String> commonTags = new HashMap<>();
 
     public MetricsHandler() {
-        commonTags.put("apiName", Server.config.getServiceId());
-        commonTags.put("environment", Server.config.getEnvironment());
+        commonTags.put("apiName", Server.getServerConfig().getServiceId());
+        commonTags.put("environment", Server.getServerConfig().getEnvironment());
         InetAddress inetAddress = Util.getInetAddress();
         // On Docker for Mac, inetAddress will be null as there is a bug.
         commonTags.put("ipAddress", inetAddress == null ? "unknown" : inetAddress.getHostAddress());

File: server/src/test/java/com/networknt/server/TestServer.java
Patch:
@@ -39,7 +39,7 @@ private TestServer() {
     }
 
     public ServerConfig getServerConfig() {
-        return Server.config;
+        return Server.getServerConfig();
     }
 
     @Override

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -244,6 +244,7 @@ static private boolean bind(HttpHandler handler, int port) {
                     // HTTP/1.1 requests, as it is not required
                     .setServerOption(UndertowOptions.ALWAYS_SET_DATE, config.isAlwaysSetDate())
                     .setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false)
+                    .setServerOption(UndertowOptions.ALLOW_UNESCAPED_CHARACTERS_IN_URL, config.isAllowUnescapedCharactersInUrl())
                     .setHandler(Handlers.header(handler, Headers.SERVER_STRING, config.getServerString())).setWorkerThreads(config.getWorkerThreads()).build();
 
             server.start();

File: server/src/test/java/com/networknt/server/ServerConfigTest.java
Patch:
@@ -59,6 +59,7 @@ public void testInvalidServerOptions() {
         Assert.assertEquals(10000, serverConfig.getBacklog());
         Assert.assertEquals(false, serverConfig.isAlwaysSetDate());
         Assert.assertEquals("L", serverConfig.getServerString());
+        Assert.assertEquals(false, serverConfig.isAllowUnescapedCharactersInUrl());
     }
 
     @Test
@@ -72,5 +73,6 @@ public void testValidServerOptions() {
         Assert.assertEquals(10000, serverConfig.getBacklog());
         Assert.assertEquals(false, serverConfig.isAlwaysSetDate());
         Assert.assertEquals("TEST", serverConfig.getServerString());
+        Assert.assertEquals(true, serverConfig.isAllowUnescapedCharactersInUrl());
     }
 }

File: registry/src/test/java/com/networknt/registry/URLTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.networknt.utility.Constants;
 import junit.framework.TestCase;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.fail;
@@ -36,7 +37,8 @@
  */
 
 public class URLTest {
-    //@Test
+    @Test
+    @Ignore
     public void testCheckGetMethod() {
         Method[] methods = URL.class.getDeclaredMethods();
         for (Method m : methods) {

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.utility.Constants;
 import org.jose4j.jwt.JwtClaims;
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.security.cert.X509Certificate;
@@ -77,7 +78,8 @@ public void testVerifyJwt() throws Exception {
      * This test needs light-oauth2 service to be up and running in order to test it
      * to start the light-oauth2 please refer to https://networknt.github.io/light-oauth2/tutorials/enterprise/
      */
-    //@Test
+    @Test
+    @Ignore
     public void testGetCertFromOauth() {
         X509Certificate certificate = JwtHelper.getCertFromOauth("100");
         System.out.println("certificate = " + certificate);

File: service/src/test/java/com/networknt/service/SingletonServiceFactoryTest.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.junit.Assert;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.Arrays;
@@ -80,7 +81,8 @@ public void testSingleWithProperties() {
 
     }
 
-    //@Test
+    @Test
+    @Ignore
     public void testMultipleWithProperties() {
         J[] j = SingletonServiceFactory.getBeans(J.class);
         Arrays.stream(j).forEach(o -> System.out.println(o.getJack()));

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.utility;
 
 import org.junit.Assert;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
@@ -25,7 +26,8 @@
 import java.nio.charset.StandardCharsets;
 
 public class StringUtilsTest {
-    //@Test
+    @Test
+    @Ignore
     public void testExpandEnvVars() {
         String s = "IP=${DOCKER_HOST_IP}";
         Assert.assertEquals("IP=192.168.1.120", StringUtils.expandEnvVars(s));

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -336,7 +336,7 @@ public void shouldNotAddListenerIfStatusCodeAndResponseTimeAreFalse() throws Exc
         Mockito.verify(objectMapper).writeValueAsString(Mockito.any());
     }
 
-    private class ArgumentMatcherAuditInfo implements ArgumentMatcher<AttachmentKey<Map>> {
+    private static class ArgumentMatcherAuditInfo implements ArgumentMatcher<AttachmentKey<Map>> {
 
         @Override
         public boolean matches(AttachmentKey<Map> attachmentKey) {
@@ -347,7 +347,7 @@ public boolean matches(AttachmentKey<Map> attachmentKey) {
         }
     }
 
-    private class ArgumentMatcherChainId implements ArgumentMatcher<AttachmentKey<String>> {
+    private static class ArgumentMatcherChainId implements ArgumentMatcher<AttachmentKey<String>> {
 
         @Override
         public boolean matches(AttachmentKey<String> attachmentKey) {
@@ -358,7 +358,7 @@ public boolean matches(AttachmentKey<String> attachmentKey) {
         }
     }
 
-    private class ArgumentMatcherChainSeq implements ArgumentMatcher<AttachmentKey<Integer>> {
+    private static class ArgumentMatcherChainSeq implements ArgumentMatcher<AttachmentKey<Integer>> {
 
         @Override
         public boolean matches(AttachmentKey<Integer> attachmentKey) {

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -232,6 +232,7 @@ public void testGetTokenResult() throws Exception {
     }
 
     @Test
+    @Deprecated
     public void testGetToken() throws Exception {
         AuthorizationCodeRequest tokenRequest = new AuthorizationCodeRequest();
         tokenRequest.setClientId("test_client");

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -93,7 +93,7 @@ private static Object getValue(String content) {
             Object envValue = typeCast(System.getenv(injectionPattern.getKey()));
             Object fileValue = (valueMap != null) ? valueMap.get(injectionPattern.getKey()) : null;
             // Return different value from different sources based on injection order defined before
-            if (INJECTION_ORDER_CODE.equals("2") && envValue != null || (INJECTION_ORDER_CODE.equals("1") && fileValue == null)) {
+            if ((INJECTION_ORDER_CODE.equals("2") && envValue != null) || (INJECTION_ORDER_CODE.equals("1") && fileValue == null)) {
                 value = envValue;
             } else {
                 value = fileValue;

File: config/src/test/java/com/networknt/config/ConfigClassPathTest.java
Patch:
@@ -62,6 +62,7 @@ public void testGetConfigFromClassPath() {
         Assert.assertEquals("classpath", configMap.get("value"));
     }
 
+    @SuppressWarnings("unchecked")
     private void addURL(URL url) throws Exception {
         URLClassLoader classLoader
                 = (URLClassLoader) ClassLoader.getSystemClassLoader();

File: config/src/test/java/com/networknt/config/ConfigDefaultTest.java
Patch:
@@ -192,7 +192,7 @@ public void testGetNullValueJsonMapConfig() throws Exception {
         Assert.assertEquals(null, configMap.get("value"));
     }
 
-    @Test
+    
     public void testInjectionExclusionConfig() {
         config.clear();
         Map<String, Object> configMap = config.getJsonMapConfig("test_exclusion");

File: config/src/test/java/com/networknt/config/JsonMapperTest.java
Patch:
@@ -33,8 +33,8 @@ public void testLong() {
         map.put("string", "hello");
         map.put("long", 111L);
         map.put("int", 111);
-        map.put("Long", new Long(111));
-        map.put("Integer", new Integer(111));
+        map.put("Long", Long.valueOf(111));
+        map.put("Integer", Integer.valueOf(111));
         String s = JsonMapper.toJson(map);
         System.out.println("s = " + s);
         Map<String, Object> newMap = JsonMapper.string2Map(s);

File: config/src/test/java/com/networknt/config/TestCentralizedManagement.java
Patch:
@@ -23,10 +23,12 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import static org.junit.Assert.fail;
+
 /**
  * Created by Nicholas Azar (@NicholasAzar)
  */
-public class TestCentralizedManagement extends TestCase {
+public class TestCentralizedManagement {
 
     @Test
     public void testMap_mergeApplied_mutatesInPlaceCorrectly() {

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -412,7 +412,8 @@ private static void initStringDefinedHandler(String handler) {
 		Object handlerOrProviderObject = null;
 		try {
 			handlerOrProviderObject = namedClass.second.newInstance();
-		} catch (InstantiationException | IllegalAccessException e) {
+		} catch (Exception e) {
+			logger.error("Exception:", e);
 			throw new RuntimeException("Could not instantiate handler class: " + namedClass.second);
 		}
 

File: handler/src/main/java/com/networknt/handler/config/PathChain.java
Patch:
@@ -69,6 +69,7 @@ public String toString() {
     /**
      * Validate the settings and raise Exception on error.
      * The origin is used to help locate problems.
+     * @param origin the origin
      */
     public void validate(String origin) {
         List<String> problems = new ArrayList<>();

File: http-string/src/main/java/com/networknt/httpstring/ContentType.java
Patch:
@@ -25,7 +25,7 @@ public enum ContentType {
     XML("text/xml"),
     ANY_TYPE("*/*");
 
-    private String value;
+    private final String value;
 
     ContentType(String contentType) {
         this.value = contentType;

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -44,6 +44,7 @@
 import java.net.URI;
 import java.net.URL;
 import java.net.URLClassLoader;
+import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
@@ -64,7 +65,7 @@ public static void setUp() throws Exception {
         Config.getInstance().clear();
         Map<String, Object> map = new HashMap<>();
         map.put("enableServerInfo", false);
-        Config.getInstance().getYaml().dump(map, new PrintWriter(new File(homeDir + "/info.yml")));
+        Config.getInstance().getYaml().dump(map, new PrintWriter(new File(homeDir + "/info.yml"), Charset.defaultCharset().name()));
         // Add home directory to the classpath of the system class loader.
         addURL(new File(homeDir).toURI().toURL());
 

File: resource/src/main/java/com/networknt/resource/ResourceHelpers.java
Patch:
@@ -74,7 +74,7 @@ public static boolean isResourcePath(String requestPath, PathResourceProvider[]
         if (pathResourceProviders != null && pathResourceProviders.length > 0) {
             for (PathResourceProvider pathResourceProvider : pathResourceProviders) {
                 if ((pathResourceProvider.isPrefixPath() && requestPath.startsWith(pathResourceProvider.getPath()))
-                        || !pathResourceProvider.isPrefixPath() && requestPath.equals(pathResourceProvider.getPath())) {
+                        || (!pathResourceProvider.isPrefixPath() && requestPath.equals(pathResourceProvider.getPath()))) {
                     isResourcePath = true;
                 }
             }

File: utility/src/main/java/com/networknt/utility/StringUtils.java
Patch:
@@ -998,7 +998,7 @@ private static String[] splitWorker(final String str, final String separatorChar
                 i++;
             }
         }
-        if (match || preserveAllTokens && lastMatch) {
+        if (match || (preserveAllTokens && lastMatch)) {
             list.add(str.substring(start, i));
         }
         return list.toArray(new String[list.size()]);
@@ -1044,7 +1044,7 @@ private static String[] splitWorker(final String str, final char separatorChar,
             match = true;
             i++;
         }
-        if (match || preserveAllTokens && lastMatch) {
+        if (match || (preserveAllTokens && lastMatch)) {
             list.add(str.substring(start, i));
         }
         return list.toArray(new String[list.size()]);

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -68,7 +68,7 @@
  */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({AuditConfig.class, LoggerFactory.class})
-@PowerMockIgnore({"javax.xml.*", "org.xml.sax.*", "org.apache.log4j.*"})
+@PowerMockIgnore({"javax.*", "org.xml.sax.*", "org.apache.log4j.*"})
 public class AuditHandlerTest {
     static Logger logger = LoggerFactory.getLogger(AuditHandlerTest.class);
 

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -54,6 +54,7 @@ public ClientCredentialsRequest() {
                         setClientId((String)ccConfig.get(CLIENT_ID));
                         setClientSecret((String)secret.get(SecretConstants.CLIENT_CREDENTIALS_CLIENT_SECRET));
                         setUri((String)ccConfig.get(URI));
+                        //set default scope from config.
                         setScope((List<String>)ccConfig.get(SCOPE));
                     }
                 }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -79,8 +79,6 @@
 import io.undertow.client.ClientProvider;
 import io.undertow.client.ClientRequest;
 import io.undertow.client.ClientResponse;
-import io.undertow.client.http.Light4jHttp2ClientProvider;
-import io.undertow.client.http.Light4jHttpClientProvider;
 import io.undertow.connector.ByteBufferPool;
 import io.undertow.protocols.ssl.UndertowXnioSsl;
 import io.undertow.server.DefaultByteBufferPool;

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -60,6 +60,8 @@
 import org.xnio.channels.StreamSinkChannel;
 import org.xnio.ssl.XnioSsl;
 
+import com.networknt.client.http.Light4jHttp2ClientProvider;
+import com.networknt.client.http.Light4jHttpClientProvider;
 import com.networknt.client.oauth.Jwt;
 import com.networknt.client.oauth.OauthHelper;
 import com.networknt.client.ssl.ClientX509ExtendedTrustManager;

File: client/src/main/java/com/networknt/client/http/Light4jHttp2ClientProvider.java
Patch:
@@ -16,7 +16,7 @@
  *  limitations under the License.
  */
 
-package io.undertow.client.http;
+package com.networknt.client.http;
 
 import java.net.InetSocketAddress;
 import java.net.URI;

File: http-string/src/main/java/com/networknt/httpstring/HttpStringConstants.java
Patch:
@@ -40,6 +40,7 @@ public class HttpStringConstants {
     public static final HttpString CSRF_TOKEN = new HttpString(Constants.CSRF_TOKEN_STRING);
 
     public static final HttpString SERVICE_ID = new HttpString(Constants.SERVICE_ID_STRING);
+    public static final HttpString SERVICE_URL = new HttpString(Constants.SERVICE_URL_STRING);
     public static final HttpString ENV_TAG = new HttpString(Constants.ENV_TAG_STRING);
     public static final HttpString HASH_KEY = new HttpString(Constants.HASH_KEY_STRING);
 }

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -88,6 +88,7 @@ public class Constants {
 
     // Headers for light-router
     public static final String SERVICE_ID_STRING = "service_id";
+    public static final String SERVICE_URL_STRING = "service_url";
     public static final String ENV_TAG_STRING = "env_tag";
     public static final String HASH_KEY_STRING = "hash_key";
     public static final String HTTPS = "https";

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/main/java/com/networknt/balance/ConsistentHashLoadBalance.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/main/java/com/networknt/balance/LoadBalance.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/main/java/com/networknt/balance/LocalFirstLoadBalance.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/main/java/com/networknt/balance/RoundRobinLoadBalance.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/test/java/com/networknt/balance/ConsitentHashLoadBalanceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/test/java/com/networknt/balance/LocalFirstLoadBalanceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: balance/src/test/java/com/networknt/balance/RoundRobinLoadBalanceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: basic-auth/src/main/java/com/networknt/basicauth/BasicAuthHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: basic-auth/src/test/java/com/networknt/basicauth/BasicAuthConfigTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: basic-auth/src/test/java/com/networknt/basicauth/BasicAuthHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: body/src/main/java/com/networknt/body/BodyConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: body/src/main/java/com/networknt/body/BodyConverter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/AsyncResponse.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/AsyncResult.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/DefaultAsyncResult.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/DerefRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/Jwt.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/KeyRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/RefreshTokenRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/SAMLBearerRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/oauth/TokenResponse.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/ssl/APINameChecker.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/ssl/ClientX509ExtendedTrustManager.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/ssl/EndpointIdentificationAlgorithm.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/ssl/Light4jALPNClientSelector.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/ssl/SSLUtils.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/main/java/com/networknt/client/ssl/TLSConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/test/java/com/networknt/client/oauth/TokenResponseTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/test/java/com/networknt/client/ssl/APINameCheckerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: client/src/test/java/com/networknt/client/ssl/TLSConfigTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: cluster/src/main/java/com/networknt/cluster/Cluster.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: cluster/src/test/java/com/networknt/cluster/LightClusterTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: common/src/main/java/com/networknt/common/DecryptUtil.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: common/src/main/java/com/networknt/common/SecretConstants.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: common/src/test/java/com/networknt/common/AESEncryptor.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: common/src/test/java/com/networknt/common/DecryptUtilTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/main/java/com/networknt/config/CentralizedManagement.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/main/java/com/networknt/config/ConfigException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/main/java/com/networknt/config/JsonMapper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/ConfigClassPathTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/ConfigDefaultTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/ConfigPropertyPathTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/JsonMapperTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/LocalDateModel.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/LocalDateTimeModel.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/TestCentralizedManagement.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/TestConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: config/src/test/java/com/networknt/config/ZonedDateTimeModel.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/integration/java/com/networknt/consul/ConsulTestIT.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulConstants.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulHeartbeatManager.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulResponse.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulService.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulUtils.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/client/ConsulClient.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/ConsulClientImplTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/ConsulHeartbeatManagerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/ConsulRegistryTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/ConsulServiceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/ConsulUtilsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/MockConsulClient.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/test/java/com/networknt/consul/MockUtils.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: content/src/main/java/com/networknt/content/ContentConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: content/src/main/java/com/networknt/content/ContentHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: content/src/test/java/com/networknt/content/ContentHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: correlation/src/main/java/com/networknt/correlation/CorrelationConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: cors/src/main/java/com/networknt/cors/CorsConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/GenericDataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/H2DataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/MariaDataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/MysqlDataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/OracleDataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/PostgresDataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/main/java/com/networknt/db/SqlServerDataSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: data-source/src/test/java/com/networknt/db/GenericDataSourceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: decryptor/src/main/java/com/networknt/decrypt/AESDecryptor.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: deref-token/src/main/java/com/networknt/deref/DerefConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: deref-token/src/main/java/com/networknt/deref/DerefMiddlewareHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/AbstractDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/BodyDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/CookiesDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/DumpConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/DumpConstants.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/DumpHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/DumpHelper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/DumperFactory.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/HeadersDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/IRequestDumpable.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/IResponseDumpable.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/QueryParametersDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/RootDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/StatusCodeDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/StoreResponseStreamSinkConduit.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/main/java/com/networknt/dump/UrlDumper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: dump/src/test/java/com/networknt/dump/DumpHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: email-sender/src/main/java/com/networknt/email/EmailConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: email-sender/src/main/java/com/networknt/email/EmailSender.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: email-sender/src/test/java/com/networknt/email/EmailSenderTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/main/java/com/networknt/decode/RequestDecodeConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/main/java/com/networknt/decode/RequestDecodeHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/main/java/com/networknt/encode/ResponseEncodeConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/main/java/com/networknt/encode/ResponseEncodeHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/test/java/com/networknt/EncodeDecodeHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/test/java/com/networknt/HttpClientUtils.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/test/java/com/networknt/decode/RequestDecodeConfigTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: encode-decode/src/test/java/com/networknt/encode/ResponseEncodeConfigTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: exception/src/main/java/com/networknt/exception/ExceptionConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/HandlerProvider.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/MiddlewareHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/OrchestrationHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/config/EndpointSource.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/config/HandlerConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/config/HandlerPath.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/config/NamedMiddlewareChain.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/config/PathChain.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/main/java/com/networknt/handler/config/PathHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/test/java/com/networknt/handler/HandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/test/java/com/networknt/handler/PathChainTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/test/java/com/networknt/handler/sample/SampleHttpHandler1.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/test/java/com/networknt/handler/sample/SampleHttpHandler2.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: handler/src/test/java/com/networknt/handler/sample/SampleHttpHandler3.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: header/src/main/java/com/networknt/header/HeaderHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: header/src/test/java/com/networknt/header/HeaderHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: health/src/main/java/com/networknt/health/HealthConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: health/src/main/java/com/networknt/health/HealthGetHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: health/src/test/java/com/networknt/health/HealthGetHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: http-string/src/main/java/com/networknt/httpstring/ContentType.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: http-string/src/main/java/com/networknt/httpstring/HttpStringConstants.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: info/src/main/java/com/networknt/info/ServerInfoConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: ip-whitelist/src/main/java/com/networknt/whitelist/IpAcl.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: ip-whitelist/src/main/java/com/networknt/whitelist/WhitelistHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: ip-whitelist/src/test/java/com/networknt/whitelist/WhitelistConfigTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: ip-whitelist/src/test/java/com/networknt/whitelist/WhitelistHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: mask/src/main/java/com/networknt/mask/Mask.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: mask/src/test/java/com/networknt/mask/MaskTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/com/networknt/metrics/MetricsConfig.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/CachedGauge.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Clock.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/ConsoleReporter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Counter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Counting.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/DefaultObjectNameFactory.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/DerivativeGauge.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/EWMA.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/ExponentiallyDecayingReservoir.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Gauge.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Histogram.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/InstrumentedExecutorService.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/InstrumentedExecutors.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/InstrumentedScheduledExecutorService.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/InstrumentedThreadFactory.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/JmxAttributeGauge.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/JmxReporter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/JvmAttributeGaugeSet.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Meter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Metered.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Metric.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/MetricFilter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/MetricName.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/MetricRegistry.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/MetricRegistryListener.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/MetricSet.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/ObjectNameFactory.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/RatioGauge.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Reporter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Reservoir.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Sampling.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/ScheduledReporter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/SharedMetricRegistries.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Slf4jReporter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/SlidingTimeWindowReservoir.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/SlidingWindowReservoir.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Snapshot.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/Timer.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/UniformReservoir.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/UniformSnapshot.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/WeightedSnapshot.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -1,6 +1,8 @@
 /*
+ * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbReporter.java
Patch:
@@ -1,6 +1,8 @@
 /*
+ * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbSender.java
Patch:
@@ -1,6 +1,8 @@
 /*
+ * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/TimeUtils.java
Patch:
@@ -1,8 +1,8 @@
 /*
- * Copyright (c) 2016 Network New Technologies Inc.
+ * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/data/InfluxDbPoint.java
Patch:
@@ -1,6 +1,8 @@
 /*
+ * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/data/InfluxDbWriteObject.java
Patch:
@@ -1,6 +1,8 @@
 /*
+ * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
+ *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Network New Technologies Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/CachedGaugeTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/ClockTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/ConsoleReporterTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/CounterTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/DefaultObjectNameFactoryTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/DerivativeGaugeTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/EWMATest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/ExponentiallyDecayingReservoirTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/HistogramTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/InstrumentedExecutorServiceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/InstrumentedExecutorsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/InstrumentedScheduledExecutorServiceTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/InstrumentedThreadFactoryTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/JmxAttributeGaugeTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/JmxReporterTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/JvmAttributeGaugeSetTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/ManualClock.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/MeterApproximationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/MeterTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/MetricFilterTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: metrics/src/test/java/io/dropwizard/metrics/MetricNameTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright 2010-2013 Coda Hale and Yammer, Inc., 2014-2017 Dropwizard Team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
- * You may not use this file except in compliance with the License.
+ * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0

File: consul/src/main/java/com/networknt/consul/ConsulConfig.java
Patch:
@@ -20,13 +20,13 @@ public class ConsulConfig {
     String consulUrl;
     int maxReqPerConn;
     String deregisterAfter;
+    //the time period that consul determines health status of the server.
     String checkInterval;
     boolean tcpCheck;
     boolean httpCheck;
     boolean ttlCheck;
     String wait;
 
-
     public String getConsulUrl() {
         return consulUrl;
     }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -461,7 +461,9 @@ private static KeyStore loadKeyStore(final String name, final char[] password) t
      * @throws IOException
      */
     public static SSLContext createSSLContext() throws IOException {
-    	return createSSLContext(null);
+    	Map<String, Object> tlsMap = (Map<String, Object>)config.get(TLS);
+    	
+    	return null==tlsMap?null:createSSLContext((String)tlsMap.get(TLSConfig.DEFAULT_GROUP_KEY));
     }
 
     /**

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -558,7 +558,8 @@ protected static void mergeStatusConfig() {
             return;
         }
         Map<String, Object> statusConfig = Config.getInstance().getJsonMapConfig(STATUS_CONFIG_NAME[0]);
-        Set<String> duplicatedStatusSet = statusConfig.keySet();
+        // clone the default status config key set
+        Set<String> duplicatedStatusSet = new HashSet<>(statusConfig.keySet());
         duplicatedStatusSet.retainAll(appStatusConfig.keySet());
         if (!duplicatedStatusSet.isEmpty()) {
             logger.error("The status code(s): " + duplicatedStatusSet.toString() + " is already in use by light-4j and cannot be overwritten," +

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -461,7 +461,9 @@ private static KeyStore loadKeyStore(final String name, final char[] password) t
      * @throws IOException
      */
     public static SSLContext createSSLContext() throws IOException {
-    	return createSSLContext(null);
+    	Map<String, Object> tlsMap = (Map<String, Object>)config.get(TLS);
+    	
+    	return null==tlsMap?null:createSSLContext((String)tlsMap.get(TLSConfig.DEFAULT_GROUP_KEY));
     }
 
     /**

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -27,6 +27,7 @@
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.AttachmentKey;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.util.LinkedHashMap;
@@ -69,6 +70,7 @@
  * Created by steve on 17/09/16.
  */
 public class AuditHandler implements MiddlewareHandler {
+    static final Logger logger = LoggerFactory.getLogger(AuditHandler.class);
     public static final String CONFIG_NAME = "audit";
 
     public static final String ENABLED = "enabled";
@@ -130,9 +132,7 @@ public class AuditHandler implements MiddlewareHandler {
         }
     }
 
-    public AuditHandler() {
-
-    }
+    public AuditHandler() { if(logger.isInfoEnabled()) logger.info("AuditHandler is loaded."); }
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -126,12 +126,12 @@ private static InjectionPattern getInjectionPattern(String contents) {
                 // Skip this injection when "$" is only character found after the ":"
                 if (array[1].length() == 1) {
                     injectionPattern.setDefaultValue("\\$\\{" + array[0] + "\\}");
-                // Otherwise, treat as a default value
-                // Add "\\" since $ is a special character
+                    // Otherwise, treat as a default value
+                    // Add "\\" since $ is a special character
                 } else {
                     injectionPattern.setDefaultValue("\\" + array[1]);
                 }
-            // Set default value
+                // Set default value
             } else {
                 injectionPattern.setDefaultValue(array[1]);
             }

File: config/src/main/java/com/networknt/config/ConfigInjection.java
Patch:
@@ -126,12 +126,12 @@ private static InjectionPattern getInjectionPattern(String contents) {
                 // Skip this injection when "$" is only character found after the ":"
                 if (array[1].length() == 1) {
                     injectionPattern.setDefaultValue("\\$\\{" + array[0] + "\\}");
-                    // Otherwise, treat as a default value
-                    // Add "\\" since $ is a special character
+                // Otherwise, treat as a default value
+                // Add "\\" since $ is a special character
                 } else {
                     injectionPattern.setDefaultValue("\\" + array[1]);
                 }
-                // Set default value
+            // Set default value
             } else {
                 injectionPattern.setDefaultValue(array[1]);
             }

File: config/src/test/java/com/networknt/config/ConfigClassPathTest.java
Patch:
@@ -37,7 +37,6 @@ public class ConfigClassPathTest extends TestCase {
     @Override
     public void setUp() throws Exception {
         super.setUp();
-
         config = Config.getInstance();
 
         // write a config file into the user home directory.

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -213,7 +213,7 @@ private <T> Object loadSpecificConfigFileAsObject(String configName, String file
             String fileName = configName + fileExtension;
             try (InputStream inStream = getConfigStream(fileName)) {
                 if (inStream != null) {
-                    // The config file specified in the exclusions.yml shouldn't be injected
+                    // The config file specified in the config.yml shouldn't be injected
                     if (ConfigInjection.isExclusionConfigFile(configName)) {
                         config = yaml.loadAs(inStream, clazz);
                     } else {

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -219,7 +219,7 @@ static private boolean bind(HttpHandler handler, int port) {
 
             if (config.isEnableTwoWayTls()) {
                builder.setSocketOption(Options.SSL_CLIENT_AUTH_MODE, SslClientAuthMode.REQUIRED);
-            }            
+            }
 
             server = builder.setBufferSize(1024 * 16).setIoThreads(Runtime.getRuntime().availableProcessors() * 2)
                     // above seems slightly faster in some configurations

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -151,6 +151,7 @@ public void registerService(ConsulService service, String token) {
 			}
 		} catch (Exception e) {
 			logger.error("Exception:", e);
+			throw new RuntimeException(e.getMessage());
 		}
 	}
 

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -286,8 +286,9 @@ static private boolean bind(HttpHandler handler, int port) {
             return true;
         } catch (Exception e) {
             System.out.println("Failed to bind to port " + port);
+            e.printStackTrace(System.out);
             if (logger.isInfoEnabled())
-                logger.info("Failed to bind to port " + port);
+                logger.info("Failed to bind to port " + port, e);
             return false;
         }
     }

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -574,7 +574,7 @@ public void testMultipleHttp2PostSsl() throws Exception {
 
         final List<String> responses = new CopyOnWriteArrayList<>();
         final CountDownLatch latch = new CountDownLatch(10);
-        SSLContext context = client.createSSLContext();
+        SSLContext context = Http2Client.createSSLContext();
         XnioSsl ssl = new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, Http2Client.BUFFER_POOL, context);
 
         final ClientConnection connection = client.connect(new URI("https://localhost:7778"), worker, ssl, Http2Client.BUFFER_POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();

File: mask/src/main/java/com/networknt/mask/Mask.java
Patch:
@@ -21,7 +21,6 @@
 import com.networknt.config.Config;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.StringUtils;
-import net.minidev.json.JSONArray;
 import org.owasp.encoder.Encode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -225,7 +224,7 @@ private static void maskList(DocumentContext ctx, String jsonPath, String expres
         if(pathList != null && pathList.size() == 1) {
             String path = pathList.get(0);
             List values = ctx.read(path);
-            JSONArray maskedValue = new JSONArray();
+            List maskedValue = new ArrayList();
             //mask each value in the list of the same path
             values.forEach(o -> maskedValue.add(replaceWithMask(o.toString(), MASK_REPLACEMENT_CHAR.charAt(0), expression)));
             ctx.set(path, maskedValue);

File: config/src/main/java/com/networknt/config/CentralizedManagement.java
Patch:
@@ -31,9 +31,10 @@ public static Object mergeObject(Object config, Class clazz) {
     // Search the config map recursively, expand List and Map level by level util no further expand
     private static void merge(Object m1) {
         if (m1 instanceof Map) {
-            Iterator<String> fieldNames = ((Map<String, Object>) m1).keySet().iterator();
+            Iterator<Object> fieldNames = ((Map<Object, Object>) m1).keySet().iterator();
+            String fieldName = null;
             while (fieldNames.hasNext()) {
-                String fieldName = fieldNames.next();
+                fieldName = String.valueOf(fieldNames.next());
                 Object field1 = ((Map<String, Object>) m1).get(fieldName);
                 if (field1 != null) {
                     if (field1 instanceof Map || field1 instanceof List) {

File: dump/src/main/java/com/networknt/dump/AbstractDumper.java
Patch:
@@ -21,7 +21,7 @@ abstract class AbstractDumper{
 
     /**
      * each dumper should finally put http info to a result passed in. should be called when dump request/response
-     * @param result a Map<String, Object> you want to put dumping info to.
+     * @param result a Map you want to put dumping info to.
      */
     abstract protected void putDumpInfoTo(Map<String, Object> result);
 }

File: dump/src/main/java/com/networknt/dump/CookiesDumper.java
Patch:
@@ -59,7 +59,7 @@ private void dumpCookies(Map<String, Cookie> cookiesMap, String maskKey) {
 
     /**
      * put cookieMap to result
-     * @param result a Map<String, Object> you want to put dumping info to.
+     * @param result a Map you want to put dumping info to.
      */
     @Override
     protected void putDumpInfoTo(Map<String, Object> result) {

File: dump/src/main/java/com/networknt/dump/HeadersDumper.java
Patch:
@@ -18,7 +18,7 @@ public HeadersDumper(DumpConfig config, HttpServerExchange exchange) {
 
     /**
      * put headerMap to result.
-     * @param result a Map<String, Object> you want to put dumping info to.
+     * @param result a Map you want to put dumping info to.
      */
     @Override
     protected void putDumpInfoTo(Map<String, Object> result) {

File: dump/src/main/java/com/networknt/dump/QueryParametersDumper.java
Patch:
@@ -34,7 +34,7 @@ public void dumpRequest(Map<String, Object> result) {
 
     /**
      * put queryParametersMap to result.
-     * @param result a Map<String, Object> you want to put dumping info to.
+     * @param result a Map you want to put dumping info to.
      */
     @Override
     protected void putDumpInfoTo(Map<String, Object> result) {

File: dump/src/main/java/com/networknt/dump/StatusCodeDumper.java
Patch:
@@ -27,7 +27,7 @@ public void dumpResponse(Map<String, Object> result) {
 
     /**
      * put this.statusCodeResult to result
-     * @param result a Map<String, Object> you want to put dumping info to.
+     * @param result a Map you want to put dumping info to.
      */
     @Override
     protected void putDumpInfoTo(Map<String, Object> result) {

File: dump/src/main/java/com/networknt/dump/UrlDumper.java
Patch:
@@ -27,7 +27,7 @@ public void dumpRequest(Map<String, Object> result) {
 
     /**
      * put this.url to result
-     * @param result a Map<String, Object> you want to put dumping info to.
+     * @param result a Map you want to put dumping info to.
      */
     @Override
     protected void putDumpInfoTo(Map<String, Object> result) {

File: dump/src/main/java/com/networknt/dump/HeadersDumper.java
Patch:
@@ -46,6 +46,9 @@ public void dumpResponse(Map<String, Object> result) {
         }
         HeaderMap headers = exchange.getResponseHeaders();
         dumpHeaders(headers);
+        if(isMaskEnabled()) {
+            this.headerMap.forEach((s, o) -> headerMap.put(s, Mask.maskRegex((String) o, "responseHeader", s)));
+        }
         this.putDumpInfoTo(result);
     }
 

File: dump/src/main/java/com/networknt/dump/AbstractFilterableDumper.java
Patch:
@@ -10,8 +10,8 @@ public abstract class AbstractFilterableDumper extends AbstractDumper {
     //after loadFilterConfig(), filter won't be empty
     protected List<String> filter;
 
-    public AbstractFilterableDumper(Object parentConfig, HttpServerExchange exchange) {
-        super(parentConfig, exchange);
+    public AbstractFilterableDumper(Object parentConfig, HttpServerExchange exchange, Boolean maskEnabled) {
+        super(parentConfig, exchange, maskEnabled);
     }
 
     protected void loadFilterConfig(String filterOptionName) {

File: dump/src/main/java/com/networknt/dump/CookiesDumper.java
Patch:
@@ -8,8 +8,8 @@
 public class CookiesDumper extends AbstractFilterableDumper implements IRequestDumpable, IResponseDumpable{
     private Map<String, Object> cookieMap = new LinkedHashMap<>();
 
-    CookiesDumper(Object parentConfig, HttpServerExchange exchange) {
-        super(parentConfig, exchange);
+    CookiesDumper(Object parentConfig, HttpServerExchange exchange, Boolean maskEnabled) {
+        super(parentConfig, exchange, maskEnabled);
     }
 
     @Override

File: dump/src/main/java/com/networknt/dump/QueryParametersDumper.java
Patch:
@@ -8,8 +8,8 @@
 public class QueryParametersDumper extends AbstractFilterableDumper implements IRequestDumpable {
     private Map<String, Object> queryParametersMap = new LinkedHashMap<>();
 
-    public QueryParametersDumper(Object parentConfig, HttpServerExchange exchange) {
-        super(parentConfig, exchange);
+    public QueryParametersDumper(Object parentConfig, HttpServerExchange exchange, Boolean maskEnabled) {
+        super(parentConfig, exchange, maskEnabled);
     }
 
     @Override

File: dump/src/main/java/com/networknt/dump/StatusCodeDumper.java
Patch:
@@ -8,8 +8,8 @@
 public class StatusCodeDumper extends AbstractDumper implements IResponseDumpable{
     private String statusCodeResult = "";
 
-    public StatusCodeDumper(Object parentConfig, HttpServerExchange exchange) {
-        super(parentConfig, exchange);
+    public StatusCodeDumper(Object parentConfig, HttpServerExchange exchange, Boolean maskEnabled) {
+        super(parentConfig, exchange, maskEnabled);
     }
 
     @Override

File: consul/src/test/java/com/networknt/consul/ConsulClientImplTest.java
Patch:
@@ -12,8 +12,7 @@ public class ConsulClientImplTest {
 
    @Test
     public void testWaitProperty() {
-        ConsulClientImpl consulClientImpl= new ConsulClientImpl();
-        assertEquals(config.getWait(),consulClientImpl.getWait());
+        assertEquals("600s", config.getWait());
 
     }
 }

File: dump/src/main/java/com/networknt/dump/AbstractFilterableDumper.java
Patch:
@@ -10,8 +10,8 @@ public abstract class AbstractFilterableDumper extends AbstractDumper {
     //after loadFilterConfig(), filter won't be empty
     protected List<String> filter;
 
-    public AbstractFilterableDumper(Object parentConfig, HttpServerExchange exchange, HttpMessageType type) {
-        super(parentConfig, exchange, type);
+    public AbstractFilterableDumper(Object parentConfig, HttpServerExchange exchange) {
+        super(parentConfig, exchange);
     }
 
     protected void loadFilterConfig(String filterOptionName) {
@@ -20,7 +20,7 @@ protected void loadFilterConfig(String filterOptionName) {
         if (parentConfig instanceof Map) {
             Object filterList = ((Map) parentConfig).get(filterOptionName);
             if(filterList instanceof List<?>) {
-                this.filter = (List<String>) filterList;
+                this.filter = (List) filterList;
             }
         }
     }

File: balance/src/main/java/com/networknt/balance/RoundRobinLoadBalance.java
Patch:
@@ -28,7 +28,7 @@ public RoundRobinLoadBalance() {
         if(logger.isInfoEnabled()) logger.info("A RoundRobinLoadBalance instance is started");
     }
 
-    private AtomicInteger idx = new AtomicInteger(0);
+    private AtomicInteger idx = new AtomicInteger((int)(Math.random()*10));
 
     /**
      * Round robin requestKey is not used as it should be null, the url will

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -51,7 +51,7 @@ public String serviceToUrl(String protocol, String serviceName, String tag, Stri
         List<URL> urls = serviceMap.get(serviceName);
         if(logger.isDebugEnabled()) logger.debug("cached serviceName " + serviceName + " urls = " + urls);
         if(urls == null) {
-            URL subscribeUrl = URLImpl.valueOf("light://localhost/" + serviceName);
+            URL subscribeUrl = URLImpl.valueOf(protocol + "://localhost/" + serviceName);
             if(tag != null) {
                 subscribeUrl.addParameter(Constants.TAG_ENVIRONMENT, tag);
             }

File: handler/src/main/java/com/networknt/handler/config/PathChain.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.handler.config;
 
 import com.networknt.utility.NetUtils;
+import com.networknt.utility.Util;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -69,7 +70,7 @@ public void validate(String origin) {
                 problems.add("Conflicting source: " + source + " and method: " + method);
             }
         }
-        if(method != null && !NetUtils.METHODS.contains(method.toUpperCase())) {
+        if(method != null && !Util.METHODS.contains(method.toUpperCase())) {
             problems.add("Invalid HTTP method: " + method);
         }
         if(!problems.isEmpty()) {

File: config/src/main/java/module-info.java
Patch:
@@ -1,4 +1,4 @@
-open module com.networknt.config {
+module com.networknt.config {
     requires com.fasterxml.jackson.annotation;
     requires com.fasterxml.jackson.core;
     requires com.fasterxml.jackson.databind;

File: resource/src/main/java/module-info.java
Patch:
@@ -1,5 +1,8 @@
 module com.networknt.resource {
     exports com.networknt.resource;
 
+    requires com.networknt.config;
     requires undertow.core;
+    requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: resource/src/test/java/com/networknt/resource/PathResourceConfigHandlerTest.java
Patch:
@@ -1,7 +1,7 @@
 package com.networknt.resource;
 
 import com.networknt.client.Http2Client;
-import com.networknt.exception.ClientException;
+import com.networknt.status.exception.ClientException;
 import io.undertow.Undertow;
 import io.undertow.client.ClientConnection;
 import io.undertow.client.ClientRequest;

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -1,7 +1,6 @@
 package com.networknt.handler;
 
 import com.networknt.status.Status;
-import com.sun.net.httpserver.HttpServer;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;

File: handler/src/main/java/module-info.java
Patch:
@@ -1,8 +1,6 @@
 module com.networknt.handler {
     exports com.networknt.handler;
     exports com.networknt.handler.config;
-    exports com.networknt.handler.util;
-    
     requires com.networknt.status;
     requires com.networknt.utility;
     requires com.networknt.config;

File: encode-decode/src/main/java/com/networknt/decode/RequestDecodeHandler.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.decode;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -79,6 +80,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             // Since the data is no longer encoded, we remove the encoding header.
             exchange.getRequestHeaders().remove(Headers.CONTENT_ENCODING);
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 }

File: encode-decode/src/main/java/com/networknt/encode/ResponseEncodeHandler.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.encode;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -71,14 +72,14 @@ public void register() {
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         AllowedContentEncodings encodings = contentEncodingRepository.getContentEncodings(exchange);
         if (encodings == null || !exchange.isResponseChannelAvailable()) {
-            next.handleRequest(exchange);
+            Handler.next(exchange, next);
         } else if (encodings.isNoEncodingsAllowed()) {
             setExchangeStatus(exchange, NO_ENCODING_HANDLER);
             return;
         } else {
             exchange.addResponseWrapper(encodings);
             exchange.putAttachment(AllowedContentEncodings.ATTACHMENT_KEY, encodings);
-            next.handleRequest(exchange);
+            Handler.next(exchange, next);
         }
     }
 }

File: server/src/main/java/com/networknt/server/ServerConfig.java
Patch:
@@ -22,6 +22,7 @@
  * @author Steve Hu
  */
 public class ServerConfig {
+    public static final String CONFIG_NAME = "server";
     String ip;
     int httpPort;
     boolean enableHttp;

File: audit/src/main/java/module-info.java
Patch:
@@ -8,4 +8,5 @@
     requires undertow.core;
     requires com.fasterxml.jackson.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: basic-auth/src/main/java/module-info.java
Patch:
@@ -9,4 +9,5 @@
 
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: body/src/main/java/module-info.java
Patch:
@@ -7,4 +7,5 @@
 
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: content/src/main/java/module-info.java
Patch:
@@ -6,4 +6,5 @@
     requires com.networknt.utility;
 
     requires undertow.core;
+    requires java.logging;
 }
\ No newline at end of file

File: correlation/src/main/java/module-info.java
Patch:
@@ -6,7 +6,7 @@
     requires com.networknt.http.string;
     requires com.networknt.utility;
 
-
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: cors/src/main/java/module-info.java
Patch:
@@ -7,4 +7,5 @@
 
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: exception/src/main/java/module-info.java
Patch:
@@ -9,4 +9,6 @@
     requires undertow.core;
     requires slf4j.api;
     requires com.fasterxml.jackson.annotation;
+
+    requires java.logging;
 }
\ No newline at end of file

File: header/src/main/java/module-info.java
Patch:
@@ -7,4 +7,5 @@
 
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: health/src/main/java/module-info.java
Patch:
@@ -5,4 +5,5 @@
 
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: ip-whitelist/src/main/java/module-info.java
Patch:
@@ -8,4 +8,5 @@
     requires undertow.core;
     requires xnio.api;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: rate-limit/src/main/java/module-info.java
Patch:
@@ -6,4 +6,5 @@
     requires com.networknt.utility;
 
     requires undertow.core;
+    requires java.logging;
 }
\ No newline at end of file

File: traceability/src/main/java/module-info.java
Patch:
@@ -8,4 +8,5 @@
 
     requires undertow.core;
     requires slf4j.api;
+    requires java.logging;
 }
\ No newline at end of file

File: service/src/main/java/com/networknt/service/ServiceUtil.java
Patch:
@@ -23,7 +23,7 @@ public class ServiceUtil {
      */
     public static Object construct(Object something) throws Exception {
         if (something instanceof String) {
-            return Class.forName((String)something).newInstance();
+            return Class.forName((String)something).getConstructor().newInstance();
         } else if (something instanceof Map) {
             // keys are the class name, values are the parameters.
             for (Map.Entry<String, Object> entry : ((Map<String, Object>) something).entrySet()) {
@@ -45,7 +45,7 @@ public static Object construct(Object something) throws Exception {
      * @throws Exception
      */
     public static Object constructByNamedParams(Class clazz, Map params) throws Exception {
-        Object obj = clazz.newInstance();
+        Object obj = clazz.getDeclaredConstructor().newInstance();
 
         Method[] allMethods = clazz.getMethods();
         for(Method method : allMethods) {
@@ -115,7 +115,7 @@ public static Object constructByParameterizedConstructor(Class clazz, List param
             return instance;
         } else {
             if(hasDefaultConstructor) {
-                return clazz.getConstructor().newInstance();
+                return clazz.getDeclaredConstructor().newInstance();
             } else {
                 // error that no instance can be created.
                 throw new Exception("No instance can be created for class " + clazz);

File: status/src/main/java/com/networknt/status/Status.java
Patch:
@@ -89,7 +89,7 @@ public Status(final String code, final Object... args) {
             try {
                 this.description = format(this.description, args);
             } catch (IllegalFormatException e) {
-                logger.warn(format("Error formatting description of status %s", code), e);
+//                logger.warn(format("Error formatting description of status %s", code), e);
             }
             if((this.severity = (String)map.get("severity")) == null)
                 this.severity = defaultSeverity;

File: utility/src/main/java/com/networknt/utility/StringUtils.java
Patch:
@@ -998,7 +998,7 @@ private static String[] splitWorker(final String str, final String separatorChar
                 i++;
             }
         }
-        if (match || preserveAllTokens && lastMatch) {
+        if (match || (preserveAllTokens && lastMatch)) {
             list.add(str.substring(start, i));
         }
         return list.toArray(new String[list.size()]);
@@ -1044,7 +1044,7 @@ private static String[] splitWorker(final String str, final char separatorChar,
             match = true;
             i++;
         }
-        if (match || preserveAllTokens && lastMatch) {
+        if (match || (preserveAllTokens && lastMatch)) {
             list.add(str.substring(start, i));
         }
         return list.toArray(new String[list.size()]);

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -25,6 +25,7 @@ default void setExchangeStatus(HttpServerExchange exchange, String code, final O
         }
         exchange.setStatusCode(status.getStatusCode());
         exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
+        status.setDescription(status.getDescription().replaceAll("\\\\", "\\\\\\\\"));
         exchange.getResponseSender().send(status.toString());
         StackTraceElement[] elements = Thread.currentThread().getStackTrace();
         logger.error(status.toString() + " at " + elements[2].getClassName() + "." + elements[2].getMethodName() + "(" + elements[2].getFileName() + ":" + elements[2].getLineNumber() + ")");

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -310,7 +310,7 @@ private InputStream getConfigStream(String configFilename) {
             } else if(configFilename.endsWith(CONFIG_EXT_YAML)) {
                 logger.info("Unable to load config " + Encode.forJava(configFilename ) + ". Looking for the same file name with extension json...");
             } else {
-                logger.error("Unable to load config '" + Encode.forJava(configFilename.substring(0, configFilename.indexOf("."))) + "' with extension yml, yaml and json from external config, application config and module config");
+                System.out.println("Unable to load config '" + Encode.forJava(configFilename.substring(0, configFilename.indexOf("."))) + "' with extension yml, yaml and json from external config, application config and module config. Please ignore this message if you are sure that your application is not using this config file.");
             }
             return null;
         }

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -58,7 +58,6 @@ public class JwtHelper {
     public static final String JWT_CERTIFICATE = "certificate";
     public static final String JWT_CLOCK_SKEW_IN_SECONDS = "clockSkewInSeconds";
     public static final String ENABLE_VERIFY_JWT = "enableVerifyJwt";
-    public static final String OAUTH_HTTP2_SUPPORT = "oauthHttp2Support";
     private static final String ENABLE_JWT_CACHE = "enableJwtCache";
     private static final String BOOTSTRAP_FROM_KEY_SERVICE = "bootstrapFromKeyService";
     private static final int CACHE_EXPIRED_IN_MINUTES = 15;

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -68,6 +68,8 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 /**
  * This is the entry point of the framework. It wrapped Undertow Core HTTP
  * server and controls the lifecycle of the server. It also orchestrate
@@ -463,7 +465,7 @@ private static void loadConfig() {
 				} else {
 					// TODO test it out
 					FileOutputStream fos = new FileOutputStream(zipFile);
-					fos.write(reference.get().getAttachment(Http2Client.RESPONSE_BODY).getBytes());
+					fos.write(reference.get().getAttachment(Http2Client.RESPONSE_BODY).getBytes(UTF_8));
 					fos.close();
 					unzipFile(zipFile, targetMergeDirectory);
 				}

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -28,6 +28,7 @@ public class TokenRequest {
     public static String ENABLE_HTTP2 = "enableHttp2";
     public static String AUTHORIZATION_CODE = "authorization_code";
     public static String CLIENT_CREDENTIALS = "client_credentials";
+    public static String SAML_BEARER = "saml_bearer";
     public static String REFRESH_TOKEN = "refresh_token";
     public static String URI = "uri";
     public static String CLIENT_ID = "client_id";

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -125,7 +125,7 @@ public static TokenResponse getTokenFromSaml(SAMLBearerRequest tokenRequest) thr
             postBody.put(SAMLBearerRequest.CLIENT_ASSERTION_TYPE_KEY, SAMLBearerRequest.CLIENT_ASSERTION_TYPE_VALUE);
             postBody.put(SAMLBearerRequest.CLIENT_ASSERTION_KEY, tokenRequest.getJwtClientAssertion());
             String requestBody = Http2Client.getFormDataString(postBody);
-            System.out.println(requestBody);
+            logger.debug(requestBody);
 
             connection.getIoThread().execute(new Runnable() {
 

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -28,6 +28,7 @@ public class TokenRequest {
     public static String ENABLE_HTTP2 = "enableHttp2";
     public static String AUTHORIZATION_CODE = "authorization_code";
     public static String CLIENT_CREDENTIALS = "client_credentials";
+    public static String SAML_BEARER = "saml_bearer";
     public static String REFRESH_TOKEN = "refresh_token";
     public static String URI = "uri";
     public static String CLIENT_ID = "client_id";

File: utility/src/main/java/com/networknt/utility/HashUtil.java
Patch:
@@ -76,7 +76,7 @@ public static String md5Hex (String message) {
         return null;
     }
 
-    public static String generateStorngPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException
+    public static String generateStrongPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException
     {
         int iterations = 1000;
         char[] chars = password.toCharArray();

File: utility/src/test/java/com/networknt/utility/HashUtilTest.java
Patch:
@@ -15,15 +15,15 @@ public void testMd5Hex() {
     @Test
     public void testPasswordHash() throws Exception {
         String p = "123456";
-        String hashedPass = HashUtil.generateStorngPasswordHash(p);
+        String hashedPass = HashUtil.generateStrongPasswordHash(p);
         System.out.println("hashedPass = " + hashedPass);
         Assert.assertTrue(HashUtil.validatePassword(p.toCharArray(), hashedPass));
     }
 
     @Test
     public void testClientSecretHash() throws Exception {
         String s = "f6h1FTI8Q3-7UScPZDzfXA";
-        String hashedPass = HashUtil.generateStorngPasswordHash(s);
+        String hashedPass = HashUtil.generateStrongPasswordHash(s);
         System.out.println("hashedSecret = " + hashedPass);
         Assert.assertTrue(HashUtil.validatePassword(s.toCharArray(), hashedPass));
     }

File: email-sender/src/test/java/com/networknt/email/EmailSenderTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.io.File;
 
 public class EmailSenderTest {
-    @Test
+    //@Test
     public void testEmail() {
         EmailSender sender = new EmailSender();
         try {
@@ -16,7 +16,7 @@ public void testEmail() {
         }
     }
 
-    @Test
+    //@Test
     public void testEmailWithAttachment() {
         EmailSender sender = new EmailSender();
         try {

File: email-sender/src/test/java/com/networknt/email/EmailSenderTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.io.File;
 
 public class EmailSenderTest {
-    //@Test
+    @Test
     public void testEmail() {
         EmailSender sender = new EmailSender();
         try {
@@ -16,7 +16,7 @@ public void testEmail() {
         }
     }
 
-    //@Test
+    @Test
     public void testEmailWithAttachment() {
         EmailSender sender = new EmailSender();
         try {

File: utility/src/test/java/com/networknt/utility/StringUtilsTest.java
Patch:
@@ -8,18 +8,18 @@
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
 
-public class StringUtilTest {
+public class StringUtilsTest {
     //@Test
     public void testExpandEnvVars() {
         String s = "IP=${DOCKER_HOST_IP}";
-        Assert.assertEquals("IP=192.168.1.120", StringUtil.expandEnvVars(s));
+        Assert.assertEquals("IP=192.168.1.120", StringUtils.expandEnvVars(s));
     }
 
     @Test
     public void testInputStreamToString_withExpected() throws IOException {
         String expected = "test data";
         InputStream anyInputStream = new ByteArrayInputStream(expected.getBytes(StandardCharsets.UTF_8));
-        String actual = StringUtil.inputStreamToString(anyInputStream, StandardCharsets.UTF_8);
+        String actual = StringUtils.inputStreamToString(anyInputStream, StandardCharsets.UTF_8);
         Assert.assertEquals(expected, actual);
     }
 }

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.client;
 
 import com.networknt.config.Config;
+import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.utility.Constants;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
@@ -112,9 +113,9 @@ public static void beforeClass() throws IOException {
                             .addExactPath(MESSAGE, exchange -> sendMessage(exchange))
                             .addExactPath(KEY, exchange -> sendMessage(exchange))
                             .addExactPath(API, (exchange) -> {
-                                boolean hasScopeToken = exchange.getRequestHeaders().contains(Constants.SCOPE_TOKEN);
+                                boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);
                                 Assert.assertTrue(hasScopeToken);
-                                String scopeToken = exchange.getRequestHeaders().get(Constants.SCOPE_TOKEN, 0);
+                                String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);
                                 boolean expired = isTokenExpired(scopeToken);
                                 Assert.assertFalse(expired);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.client;
 
 import com.networknt.config.Config;
+import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.utility.Constants;
 import io.undertow.Undertow;
 import io.undertow.UndertowOptions;
@@ -113,9 +114,9 @@ public static void beforeClass() throws IOException {
                             .addExactPath(MESSAGE, exchange -> sendMessage(exchange))
                             .addExactPath(KEY, exchange -> sendMessage(exchange))
                             .addExactPath(API, (exchange) -> {
-                                boolean hasScopeToken = exchange.getRequestHeaders().contains(Constants.SCOPE_TOKEN);
+                                boolean hasScopeToken = exchange.getRequestHeaders().contains(HttpStringConstants.SCOPE_TOKEN);
                                 Assert.assertTrue(hasScopeToken);
-                                String scopeToken = exchange.getRequestHeaders().get(Constants.SCOPE_TOKEN, 0);
+                                String scopeToken = exchange.getRequestHeaders().get(HttpStringConstants.SCOPE_TOKEN, 0);
                                 boolean expired = isTokenExpired(scopeToken);
                                 Assert.assertFalse(expired);
                                 exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -19,6 +19,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.Util;
@@ -58,11 +59,11 @@ public CorrelationHandler() {
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
         // check if the cid is in the request header
-        String cId = exchange.getRequestHeaders().getFirst(Constants.CORRELATION_ID);
+        String cId = exchange.getRequestHeaders().getFirst(HttpStringConstants.CORRELATION_ID);
         if(cId == null) {
             // if not, generate a UUID and put it into the request header
             cId = Util.getUUID();
-            exchange.getRequestHeaders().put(Constants.CORRELATION_ID, cId);
+            exchange.getRequestHeaders().put(HttpStringConstants.CORRELATION_ID, cId);
         }
         // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -19,6 +19,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
+import com.networknt.httpstring.HttpStringConstants;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -58,9 +59,9 @@ public TraceabilityHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
-        String tid = exchange.getRequestHeaders().getFirst(Constants.TRACEABILITY_ID);
+        String tid = exchange.getRequestHeaders().getFirst(HttpStringConstants.TRACEABILITY_ID);
         if(tid != null) {
-            exchange.getResponseHeaders().put(Constants.TRACEABILITY_ID, tid);
+            exchange.getResponseHeaders().put(HttpStringConstants.TRACEABILITY_ID, tid);
         }
         Handler.next(exchange, next);
     }

File: registry/src/test/java/com/networknt/registry/support/command/DirectRegistryTest.java
Patch:
@@ -15,7 +15,7 @@
 public class DirectRegistryTest {
     @Test
     public void testDirectRegistry() {
-        Registry registry = (Registry)SingletonServiceFactory.getBean(Registry.class);
+        Registry registry = SingletonServiceFactory.getBean(Registry.class);
 
         URL subscribeUrl = URLImpl.valueOf("light://localhost:8080/token");
         List<URL> urls = registry.discover(subscribeUrl);
@@ -24,5 +24,7 @@ public void testDirectRegistry() {
         subscribeUrl = URLImpl.valueOf("light://localhost:8080/code");
         urls = registry.discover(subscribeUrl);
         Assert.assertEquals(2, urls.size());
+
+
     }
 }

File: consul/src/main/java/com/networknt/consul/ConsulConstants.java
Patch:
@@ -46,7 +46,7 @@ public class ConsulConstants {
 	/**
 	 * Service TCP Check Deregister After
 	 */
-	public static String DEREGISTER_AFTER = "90m";
+	public static String DEREGISTER_AFTER = "2m";
 
 	/**
 	 * Heart beat circle，2/3 of ttl

File: handler/src/main/java/com/networknt/handler/Handler.java
Patch:
@@ -116,7 +116,9 @@ static void initPaths() {
 					PathTemplateMatcher<String> pathTemplateMatcher = methodToMatcherMap.containsKey(method)
 							? methodToMatcherMap.get(method)
 							: new PathTemplateMatcher<>();
-					pathTemplateMatcher.add(pathChain.getPath(), randInt.toString());
+							
+					if(pathTemplateMatcher.get(pathChain.getPath()) == null)
+						pathTemplateMatcher.add(pathChain.getPath(), randInt.toString());
 					methodToMatcherMap.put(method, pathTemplateMatcher);
 					handlerListById.put(randInt.toString(), handlers);
 				}

File: consul/src/main/java/com/networknt/consul/ConsulService.java
Patch:
@@ -62,9 +62,9 @@ public Integer getPort() {
 
 	public ConsulService() {
 		if(config.tcpCheck) {
-			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TCP\":\"%s" + ":%s\",\"Interval\":\"" + config.checkInterval + "\"}}";
+			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TCP\":\"%s:%s\",\"Interval\":\"" + config.checkInterval + "\"}}";
 		} else if(config.httpCheck) {
-			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"HTTP\":\"" + "https://%s:%s/health" + "\",\"Interval\":\"" + config.checkInterval + "\"}}";
+			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"HTTP\":\"" + "https://%s:%s/health/%s" + "\",\"TLSSkipVerify\":true,\"Interval\":\"" + config.checkInterval + "\"}}";
 		} else {
 			checkString = ",\"Check\":{\"ID\":\"check-%s\",\"DeregisterCriticalServiceAfter\":\"" + config.deregisterAfter + "\",\"TTL\":\"" + config.checkInterval + "\"}}";
 		}
@@ -83,6 +83,6 @@ public String toString() {
 				+ "\",\"Tags\":[\"" + s
 				+ "\"],\"Address\":\"" + address
 				+ "\",\"Port\":" + port
-				+ String.format(checkString, name, address, port);
+				+ String.format(checkString, id, address, port, name);
 	}
 }

File: handler/src/test/java/com/networknt/handler/HandlerTest.java
Patch:
@@ -26,6 +26,7 @@ public void validClassNameWithAt_split_returnsCorrect() throws Exception {
 
     @Test
     public void validConfig_init_handlersCreated() {
+    	Handler.init();
         Map<String, List<HttpHandler>> handlers = Handler.handlerListById;
         Assert.assertEquals(1, handlers.get("third").size());
         Assert.assertEquals(2, handlers.get("secondBeforeFirst").size());

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -146,7 +146,7 @@ public static String getJwt(JwtClaims claims) throws JoseException {
         String jwt;
 
         RSAPrivateKey privateKey = (RSAPrivateKey) getPrivateKey(
-                "/config/oauth/primary.jks", "password", "selfsigned");
+                "/config/primary.jks", "password", "selfsigned");
 
         // A JWT is a JWS and/or a JWE with JSON claims as the payload.
         // In this example it is a JWS nested inside a JWE

File: server/src/test/java/com/networknt/server/RegistryTest.java
Patch:
@@ -43,7 +43,7 @@ public static void setUp() throws Exception {
         map.put("httpPort", 8080);
         map.put("enableHttps", true);
         map.put("httpsPort", 8443);
-        map.put("keystoreName", "tls/server.keystore");
+        map.put("keystoreName", "server.keystore");
         map.put("keystorePass", "secret");
         map.put("keyPass", "secret");
         map.put("serviceId", "com.networknt.apia-1.0.0");

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -25,7 +25,6 @@
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
-import io.undertow.util.HttpString;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;
@@ -53,7 +52,7 @@ public class CorrelationHandler implements MiddlewareHandler {
     private volatile HttpHandler next;
 
     public CorrelationHandler() {
-
+        if(logger.isInfoEnabled()) logger.info("CorrelationHandler is loaded.");
     }
 
     @Override

File: consul/src/main/java/com/networknt/consul/ConsulUtils.java
Patch:
@@ -42,8 +42,6 @@ public static ConsulService buildService(URL url) {
         service.setId(ConsulUtils.convertConsulSerivceId(url));
         service.setName(url.getPath());
         service.setPort(url.getPort());
-        service.setTtl(ConsulConstants.TTL);
-
         List<String> tags = new ArrayList<String>();
         String env = url.getParameter(Constants.TAG_ENVIRONMENT);
         if(env != null) tags.add(env);

File: consul/src/test/java/com/networknt/consul/ConsulServiceTest.java
Patch:
@@ -21,7 +21,7 @@ public void testToStringSingleTag() {
 
         String s = service.toString();
         System.out.println("s = " + s);
-        Assert.assertEquals("{\"ID\":\"127.0.0.1:com.networknt.apib-1.0.0:7442\",\"Name\":\"com.networknt.apib-1.0.0\",\"Tags\":[\"protocol_light\"],\"Address\":\"127.0.0.1\",\"Port\":7442,\"Check\":{\"TTL\":\"30s\"}}", s);
+        Assert.assertEquals("{\"ID\":\"127.0.0.1:com.networknt.apib-1.0.0:7442\",\"Name\":\"com.networknt.apib-1.0.0\",\"Tags\":[\"protocol_light\"],\"Address\":\"127.0.0.1\",\"Port\":7442,\"Check\":{\"DeregisterCriticalServiceAfter\":\"1m\",\"TTL\":\"30s\"}}", s);
     }
 
     @Test
@@ -39,7 +39,7 @@ public void testToStringMultipleTag() {
 
         String s = service.toString();
         System.out.println("s = " + s);
-        Assert.assertEquals("{\"ID\":\"127.0.0.1:com.networknt.apib-1.0.0:7442\",\"Name\":\"com.networknt.apib-1.0.0\",\"Tags\":[\"protocol_light\",\"second_tag\"],\"Address\":\"127.0.0.1\",\"Port\":7442,\"Check\":{\"TTL\":\"30s\"}}", s);
+        Assert.assertEquals("{\"ID\":\"127.0.0.1:com.networknt.apib-1.0.0:7442\",\"Name\":\"com.networknt.apib-1.0.0\",\"Tags\":[\"protocol_light\",\"second_tag\"],\"Address\":\"127.0.0.1\",\"Port\":7442,\"Check\":{\"DeregisterCriticalServiceAfter\":\"1m\",\"TTL\":\"30s\"}}", s);
     }
 
 }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -251,6 +251,8 @@ static public void shutdown() {
         // need to unregister the service
         if(config.enableRegistry && registry != null) {
             registry.unregister(serviceUrl);
+            // Please don't remove the following line. When server is killed, the logback won't work anymore.
+            // Even debugger won't reach this point; however, the logic is executed successfully here.
             System.out.println("unregister serviceUrl " + serviceUrl);
             if(logger.isInfoEnabled()) logger.info("unregister serviceUrl " + serviceUrl);
         }

File: handler/src/main/java/com/networknt/handler/OrchestrationHandler.java
Patch:
@@ -12,7 +12,8 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
         if (Handler.start(exchange)) {
             Handler.next(exchange);
         } else {
-            setExchangeStatus(exchange, "ERR10048");
+            String methodPath = String.format("%s %s", exchange.getRequestMethod(), exchange.getRequestPath());
+            setExchangeStatus(exchange, "ERR10048", methodPath);
         }
     }
 }

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -117,6 +117,7 @@ public void testGet() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/get").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java
Patch:
@@ -26,6 +26,7 @@
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
+import io.undertow.util.Headers;
 import io.undertow.util.HttpString;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
@@ -104,6 +105,7 @@ public void testWithCid() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/with").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(Constants.CORRELATION_ID, "cid");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
@@ -132,6 +134,7 @@ public void testGetWithoutTid() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/without").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: cors/src/test/java/com/networknt/cors/CorsHttpHandlerTest.java
Patch:
@@ -11,6 +11,7 @@
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
 import io.undertow.util.HeaderMap;
+import io.undertow.util.Headers;
 import io.undertow.util.HttpString;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
@@ -87,6 +88,7 @@ public void testOptionsWrongOrigin() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/").setMethod(Methods.OPTIONS);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(new HttpString("Origin"), "http://example.com");
             request.getRequestHeaders().put(new HttpString("Access-Control-Request-Method"), "POST");
             request.getRequestHeaders().put(new HttpString("Access-Control-Request-Headers"), "X-Requested-With");
@@ -122,6 +124,7 @@ public void testOptionsCorrectOrigin() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/").setMethod(Methods.OPTIONS);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(new HttpString("Origin"), "http://localhost");
             request.getRequestHeaders().put(new HttpString("Access-Control-Request-Method"), "POST");
             request.getRequestHeaders().put(new HttpString("Access-Control-Request-Headers"), "X-Requested-With");

File: deref/src/test/java/com/networknt/deref/DerefMiddlewareHandlerTest.java
Patch:
@@ -126,6 +126,7 @@ public void testDerefJwt() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/api").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(Headers.AUTHORIZATION, "access-token");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();

File: header/src/test/java/com/networknt/header/HeaderHandlerTest.java
Patch:
@@ -26,6 +26,7 @@
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
+import io.undertow.util.Headers;
 import io.undertow.util.HttpString;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
@@ -124,6 +125,7 @@ public void testRequestHeader() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/get").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(new HttpString("header1"), "header1");
             request.getRequestHeaders().put(new HttpString("header2"), "header2");
             request.getRequestHeaders().put(new HttpString("key1"), "old1");

File: health/src/test/java/com/networknt/health/HealthGetHandlerTest.java
Patch:
@@ -25,6 +25,7 @@
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
+import io.undertow.util.Headers;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -90,6 +91,7 @@ public void testHealth() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/server/health").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -27,6 +27,7 @@
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
+import io.undertow.util.Headers;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -123,6 +124,7 @@ public void testServerInfo() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/v1/server/info").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java
Patch:
@@ -25,6 +25,7 @@
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
+import io.undertow.util.Headers;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -90,6 +91,7 @@ public void testServerInfo() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/server/info").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: limit/src/test/java/com/networknt/limit/LimitHandlerTest.java
Patch:
@@ -26,6 +26,7 @@
 import io.undertow.client.ClientResponse;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.RoutingHandler;
+import io.undertow.util.Headers;
 import io.undertow.util.Methods;
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -107,6 +108,7 @@ public void testOneRequest() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {
@@ -135,6 +137,7 @@ public String callApi() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java
Patch:
@@ -97,6 +97,7 @@ public void testMetrics() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/v2/pet/111").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(Headers.AUTHORIZATION, "Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();

File: prometheus/src/test/java/com/networknt/metrics/prometheus/PrometheusHandlerTest.java
Patch:
@@ -97,6 +97,7 @@ public void testMetrics() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/v2/pet/111").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(Headers.AUTHORIZATION, "Bearer eyJraWQiOiIxMDAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJ1cm46Y29tOm5ldHdvcmtudDpvYXV0aDI6djEiLCJhdWQiOiJ1cm46Y29tLm5ldHdvcmtudCIsImV4cCI6MTc5MDAzNTcwOSwianRpIjoiSTJnSmdBSHN6NzJEV2JWdUFMdUU2QSIsImlhdCI6MTQ3NDY3NTcwOSwibmJmIjoxNDc0Njc1NTg5LCJ2ZXJzaW9uIjoiMS4wIiwidXNlcl9pZCI6InN0ZXZlIiwidXNlcl90eXBlIjoiRU1QTE9ZRUUiLCJjbGllbnRfaWQiOiJmN2Q0MjM0OC1jNjQ3LTRlZmItYTUyZC00YzU3ODc0MjFlNzIiLCJzY29wZSI6WyJ3cml0ZTpwZXRzIiwicmVhZDpwZXRzIl19.mue6eh70kGS3Nt2BCYz7ViqwO7lh_4JSFwcHYdJMY6VfgKTHhsIGKq2uEDt3zwT56JFAePwAxENMGUTGvgceVneQzyfQsJeVGbqw55E9IfM_uSM-YcHwTfR7eSLExN4pbqzVDI353sSOvXxA98ZtJlUZKgXNE1Ngun3XFORCRIB_eH8B0FY_nT_D1Dq2WJrR-re-fbR6_va95vwoUdCofLRa4IpDfXXx19ZlAtfiVO44nw6CS8O87eGfAm7rCMZIzkWlCOFWjNHnCeRsh7CVdEH34LF-B48beiG5lM7h4N12-EME8_VDefgMjZ8eqs1ICvJMxdIut58oYbdnkwTjkA");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();

File: sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerTest.java
Patch:
@@ -116,6 +116,7 @@ public void testGetHeader() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/header").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(new HttpString("param"), "<script>alert('header test')</script>");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();

File: traceability/src/test/java/com/networknt/traceability/TraceabilityHandlerTest.java
Patch:
@@ -100,6 +100,7 @@ public void testGetWithTid() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/get").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             request.getRequestHeaders().put(Constants.TRACEABILITY_ID, "12345");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
@@ -133,6 +134,7 @@ public void testGetWithoutTid() throws Exception {
         final AtomicReference<ClientResponse> reference = new AtomicReference<>();
         try {
             ClientRequest request = new ClientRequest().setPath("/get").setMethod(Methods.GET);
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             //request.getRequestHeaders().put(Constants.TRACEABILITY_ID, "12345");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();

File: registry/src/main/java/com/networknt/registry/support/command/CommandFailbackRegistry.java
Patch:
@@ -68,7 +68,7 @@ protected List<URL> doDiscover(URL url) {
         if(logger.isInfoEnabled()) logger.info("CommandFailbackRegistry discover. url: " + url.toSimpleString());
         List<URL> finalResult = discoverService(url.createCopy());
         if(logger.isInfoEnabled()) logger.info("CommandFailbackRegistry discover size: " +
-                finalResult.size() + ", result:" + finalResult.toString());
+                (finalResult==null ? 0 : finalResult.size()) + ", result:" + (finalResult==null ? null: finalResult.toString()));
         return finalResult;
     }
 

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -147,7 +148,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         } else {
             audit.info(Config.getInstance().getMapper().writeValueAsString(auditMap));
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
@@ -108,7 +109,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 return;
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     /*

File: client/src/main/java/com/networknt/client/oauth/KeyRequest.java
Patch:
@@ -42,6 +42,8 @@ public KeyRequest(String kid) {
         }
     }
 
+    public KeyRequest() { }
+
     public String getUri() {
         return uri;
     }

File: content/src/main/java/com/networknt/content/ContentHandler.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.content;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -65,7 +66,6 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         .getResponseHeaders()
         .put(Headers.CONTENT_TYPE, contentType);
     }
-
-    next.handleRequest(exchange);
+    Handler.next(exchange, next);
   }
 }

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.correlation;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -67,7 +68,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);
         //logger.debug("Init cId:" + cId);
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: cors/src/main/java/com/networknt/cors/CorsHttpHandler.java
Patch:
@@ -21,6 +21,7 @@
 package com.networknt.cors;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -70,7 +71,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             }
             setCorsResponseHeaders(exchange);
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     private void handlePreflightRequest(HttpServerExchange exchange) throws Exception {

File: deref/src/main/java/com/networknt/deref/DerefMiddlewareHandler.java
Patch:
@@ -3,6 +3,7 @@
 import com.networknt.client.oauth.DerefRequest;
 import com.networknt.client.oauth.OauthHelper;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -67,7 +68,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 }
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.exception;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
@@ -70,7 +71,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         }
 
         try {
-            next.handleRequest(exchange);
+            Handler.next(exchange, next);
         } catch (Throwable e) {
             logger.error("Exception:", e);
             if(exchange.isResponseChannelAvailable()) {

File: header/src/main/java/com/networknt/header/HeaderHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.header;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -91,7 +92,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 responseHeaderUpdate.forEach((k, v) -> exchange.getResponseHeaders().put(new HttpString(k), v));
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.limit;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -45,7 +46,7 @@ public LimitHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
-        requestLimit.handleRequest(exchange, this.next);
+        requestLimit.handleRequest(exchange, Handler.getNext(exchange, next));
     }
 
     @Override

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.networknt.audit.AuditHandler;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.server.Server;
 import com.networknt.utility.Constants;
@@ -128,7 +129,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             nextListener.proceed();
         });
 
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.networknt.audit.AuditHandler;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -98,7 +99,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             nextListener.proceed();
         });
 
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.networknt.body.BodyHandler;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -84,7 +85,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 }
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: server/src/test/java/com/networknt/server/Test2MiddlewareHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.server;
 
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
@@ -32,6 +33,7 @@ public void register() {
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {
         System.out.println("Test2MiddlewareHandler is called");
-        next.handleRequest(httpServerExchange);
+//        next.handleRequest(httpServerExchange);
+        Handler.next(httpServerExchange);
     }
 }

File: server/src/test/java/com/networknt/server/TestHandler.java
Patch:
@@ -11,6 +11,7 @@ public class TestHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        System.out.println("Hello World!");
         exchange.getResponseSender().send("Hello World!");
     }
 }
\ No newline at end of file

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.traceability;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -61,7 +62,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if(tid != null) {
             exchange.getResponseHeaders().put(Constants.TRACEABILITY_ID, tid);
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: handler/src/main/java/com/networknt/handler/HandlerProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.server;
+package com.networknt.handler;
 
 import io.undertow.server.HttpHandler;
 

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.common.DecryptUtil;
 import com.networknt.common.SecretConstants;
 import com.networknt.config.Config;
+import com.networknt.handler.HandlerProvider;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.registry.Registry;
 import com.networknt.registry.URL;
@@ -50,7 +51,6 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.BindException;
 import java.net.InetAddress;
 import java.net.URI;
 import java.nio.file.*;

File: server/src/test/java/com/networknt/server/TestHandlerProvider.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.server;
 
+import com.networknt.handler.HandlerProvider;
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;
 import io.undertow.util.Methods;

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -147,7 +148,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         } else {
             audit.info(Config.getInstance().getMapper().writeValueAsString(auditMap));
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
@@ -108,7 +109,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 return;
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     /*

File: content/src/main/java/com/networknt/content/ContentHandler.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.content;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -65,7 +66,6 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         .getResponseHeaders()
         .put(Headers.CONTENT_TYPE, contentType);
     }
-
-    next.handleRequest(exchange);
+    Handler.next(exchange, next);
   }
 }

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.correlation;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -67,7 +68,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);
         //logger.debug("Init cId:" + cId);
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: cors/src/main/java/com/networknt/cors/CorsHttpHandler.java
Patch:
@@ -21,6 +21,7 @@
 package com.networknt.cors;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -70,7 +71,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
             }
             setCorsResponseHeaders(exchange);
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     private void handlePreflightRequest(HttpServerExchange exchange) throws Exception {

File: deref/src/main/java/com/networknt/deref/DerefMiddlewareHandler.java
Patch:
@@ -3,6 +3,7 @@
 import com.networknt.client.oauth.DerefRequest;
 import com.networknt.client.oauth.OauthHelper;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -67,7 +68,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 }
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.exception;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.status.Status;
 import com.networknt.utility.ModuleRegistry;
@@ -70,7 +71,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         }
 
         try {
-            next.handleRequest(exchange);
+            Handler.next(exchange, next);
         } catch (Throwable e) {
             logger.error("Exception:", e);
             if(exchange.isResponseChannelAvailable()) {

File: header/src/main/java/com/networknt/header/HeaderHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.header;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -91,7 +92,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 responseHeaderUpdate.forEach((k, v) -> exchange.getResponseHeaders().put(new HttpString(k), v));
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.limit;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -45,7 +46,7 @@ public LimitHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
-        requestLimit.handleRequest(exchange, this.next);
+        requestLimit.handleRequest(exchange, Handler.getNext(exchange, next));
     }
 
     @Override

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.networknt.audit.AuditHandler;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.server.Server;
 import com.networknt.utility.Constants;
@@ -128,7 +129,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             nextListener.proceed();
         });
 
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusHandler.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.networknt.audit.AuditHandler;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -98,7 +99,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             nextListener.proceed();
         });
 
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.networknt.body.BodyHandler;
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.ModuleRegistry;
 import io.undertow.Handlers;
@@ -84,7 +85,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                 }
             }
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: server/src/test/java/com/networknt/server/Test2MiddlewareHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.server;
 
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
@@ -32,6 +33,7 @@ public void register() {
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {
         System.out.println("Test2MiddlewareHandler is called");
-        next.handleRequest(httpServerExchange);
+//        next.handleRequest(httpServerExchange);
+        Handler.next(httpServerExchange);
     }
 }

File: server/src/test/java/com/networknt/server/TestHandler.java
Patch:
@@ -11,6 +11,7 @@ public class TestHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
+        System.out.println("Hello World!");
         exchange.getResponseSender().send("Hello World!");
     }
 }
\ No newline at end of file

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.traceability;
 
 import com.networknt.config.Config;
+import com.networknt.handler.Handler;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
@@ -61,7 +62,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if(tid != null) {
             exchange.getResponseHeaders().put(Constants.TRACEABILITY_ID, tid);
         }
-        next.handleRequest(exchange);
+        Handler.next(exchange, next);
     }
 
     @Override

File: deref/src/main/java/com/networknt/deref/DerefConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.networknt.security;
+package com.networknt.deref;
 
 /**
  * The config class that maps to deref.yml

File: handler/src/main/java/com/networknt/handler/LightHttpHandler.java
Patch:
@@ -26,6 +26,7 @@ default void setExchangeStatus(HttpServerExchange exchange, String code, final O
         exchange.setStatusCode(status.getStatusCode());
         exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
         exchange.getResponseSender().send(status.toString());
-        logger.error(status.toString());
+        StackTraceElement[] elements = Thread.currentThread().getStackTrace();
+        logger.error(status.toString() + " at " + elements[2].getClassName() + "." + elements[2].getMethodName() + "(" + elements[2].getFileName() + ":" + elements[2].getLineNumber() + ")");
     }
 }

File: utility/src/test/java/com/networknt/utility/StringUtilTest.java
Patch:
@@ -18,7 +18,7 @@ public void testExpandEnvVars() {
     @Test
     public void testInputStreamToString_withExpected() throws IOException {
         String expected = "test data";
-        InputStream anyInputStream = new ByteArrayInputStream(expected.getBytes());
+        InputStream anyInputStream = new ByteArrayInputStream(expected.getBytes(StandardCharsets.UTF_8));
         String actual = StringUtil.inputStreamToString(anyInputStream, StandardCharsets.UTF_8);
         Assert.assertEquals(expected, actual);
     }

File: common/src/main/java/com/networknt/common/SecretConstants.java
Patch:
@@ -12,6 +12,8 @@ public class SecretConstants {
     public static final String CLIENT_CREDENTIALS_CLIENT_SECRET = "clientCredentialsClientSecret";
     public static final String REFRESH_TOKEN_CLIENT_SECRET = "refreshTokenClientSecret";
     public static final String KEY_CLIENT_SECRET = "keyClientSecret";
+    public static final String DEREF_CLIENT_SECRET = "derefClientSecret";
+
     public static final String CONSUL_TOKEN = "consulToken";
     public static final String EMAIL_PASSWORD = "emailPassword";
 

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -305,9 +305,7 @@ private InputStream getConfigStream(String configFilename) {
                 }
                 return inStream;
             }
-            if(logger.isInfoEnabled()) {
-                logger.error("Unable to load config " + Encode.forJava(configFilename));
-            }
+            logger.error("*****Unable to load config " + Encode.forJava(configFilename));
             return null;
         }
 

File: health/src/main/java/com/networknt/health/HealthGetHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.health;
 
+import com.networknt.handler.LightHttpHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import org.slf4j.Logger;
@@ -38,7 +39,7 @@
  *
  * @author Steve Hu
  */
-public class HealthGetHandler implements HttpHandler {
+public class HealthGetHandler implements LightHttpHandler {
     public static final String CONFIG_NAME = "health";
 
     static final Logger logger = LoggerFactory.getLogger(HealthGetHandler.class);

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusGetHandler.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.metrics.prometheus;
 
+import com.networknt.handler.LightHttpHandler;
 import io.prometheus.client.CollectorRegistry;
 import io.prometheus.client.exporter.common.TextFormat;
 import io.undertow.server.HttpHandler;
@@ -32,7 +33,7 @@
  * The default path for the handler should be /v1/prometheus
  * @author Gavin Chen
  */
-public class PrometheusGetHandler implements HttpHandler {
+public class PrometheusGetHandler implements LightHttpHandler {
 
 
     static final Logger logger = LoggerFactory.getLogger(PrometheusGetHandler.class);

File: security/src/main/java/com/networknt/security/JwtMockHandler.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.security;
 
 import com.networknt.config.Config;
+import com.networknt.handler.LightHttpHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;
@@ -35,7 +36,7 @@
  *
  * @author Steve Hu
  */
-public class JwtMockHandler implements HttpHandler {
+public class JwtMockHandler implements LightHttpHandler {
 
     public static final String ENABLE_MOCK_JWT = "enableMockJwt";
 

File: security/src/main/java/com/networknt/security/inbound/RequestFilterHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.security.inbound;
 
+import com.networknt.handler.LightHttpHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 
@@ -11,7 +12,7 @@
  * @author Steve Hu
  *
  */
-public class RequestFilterHandler implements HttpHandler {
+public class RequestFilterHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {

File: security/src/main/java/com/networknt/security/inbound/RoleBasedAuthHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.security.inbound;
 
+import com.networknt.handler.LightHttpHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 
@@ -12,7 +13,7 @@
  *
  * @author Steve Hu
  */
-public abstract class RoleBasedAuthHandler implements HttpHandler {
+public abstract class RoleBasedAuthHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {

File: security/src/main/java/com/networknt/security/outbound/ResponseFilterHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.security.outbound;
 
+import com.networknt.handler.LightHttpHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 
@@ -11,7 +12,7 @@
  * @author Steve Hu
  *
  */
-public class ResponseFilterHandler implements HttpHandler {
+public class ResponseFilterHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange httpServerExchange) throws Exception {

File: server/src/test/java/com/networknt/server/TestHandler.java
Patch:
@@ -1,12 +1,13 @@
 package com.networknt.server;
 
+import com.networknt.handler.LightHttpHandler;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 
 /**
  * Created by steve on 03/02/17.
  */
-public class TestHandler implements HttpHandler {
+public class TestHandler implements LightHttpHandler {
 
     @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -69,7 +69,9 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         } else {
             Status status = new Status(STATUS_SERVER_INFO_DISABLED);
             exchange.setStatusCode(status.getStatusCode());
+            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
             exchange.getResponseSender().send(status.toString());
+            logger.error(status.toString());
         }
     }
 

File: prometheus/src/main/java/com/networknt/metrics/prometheus/PrometheusGetHandler.java
Patch:
@@ -47,7 +47,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         try {
             TextFormat.write004(writer, registry.metricFamilySamples());
         } catch (IOException e) {
-            logger.error("error on put result:" + e);
+            logger.error("error on put result:", e);
         }
         exchange.getResponseSender().send(writer.toString());
 

File: handler/src/main/java/com/networknt/handler/MiddlewareHandler.java
Patch:
@@ -18,6 +18,7 @@
 import com.networknt.status.Status;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
+import io.undertow.util.Headers;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -70,6 +71,7 @@ default void setExchangeStatus(HttpServerExchange exchange, String code, final O
             status = new Status(ERROR_NOT_DEFINED, code);
         }
         exchange.setStatusCode(status.getStatusCode());
+        exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/json");
         exchange.getResponseSender().send(status.toString());
         logger.error(status.toString());
     }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -155,11 +155,11 @@ static private boolean bind(HttpHandler handler, int port) {
         try {
             Undertow.Builder builder = Undertow.builder();
             if(config.enableHttps) {
-                port = port < 0 ? config.httpsPort : port;
+                port = port < 0 ? config.getHttpsPort() : port;
                 sslContext = createSSLContext();
                 builder.addHttpsListener(port, config.getIp(), sslContext);
             } else if(config.enableHttp) {
-                port = port < 0 ? config.httpPort : port;
+                port = port < 0 ? config.getHttpPort() : port;
                 builder.addHttpListener(port, config.getIp());
             } else {
                 throw new RuntimeException("Unable to start the server as both http and https are disabled in server.yml");

File: resource/src/main/java/com/networknt/resource/PathResourceProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.networknt.resources;
+package com.networknt.resource;
 
 import io.undertow.server.handlers.resource.ResourceManager;
 

File: resource/src/main/java/com/networknt/resource/PredicatedHandlersProvider.java
Patch:
@@ -1,4 +1,4 @@
-package com.networknt.resources;
+package com.networknt.resource;
 
 import io.undertow.server.handlers.builder.PredicatedHandler;
 

File: resource/src/main/java/com/networknt/resource/ResourceHelpers.java
Patch:
@@ -1,4 +1,4 @@
-package com.networknt.resources;
+package com.networknt.resource;
 
 import io.undertow.server.handlers.PathHandler;
 import io.undertow.server.handlers.builder.PredicatedHandler;

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -48,6 +48,8 @@ public ClientCredentialsRequest() {
                 Map<String, Object> tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);
                 if(tokenConfig != null) {
                     setServerUrl((String)tokenConfig.get(SERVER_URL));
+                    Object object = tokenConfig.get(ENABLE_HTTP2);
+                    setEnableHttp2(object != null && (Boolean) object);
                     Map<String, Object> ccConfig = (Map<String, Object>) tokenConfig.get(CLIENT_CREDENTIALS);
                     if(ccConfig != null) {
                         setClientId((String)ccConfig.get(CLIENT_ID));

File: common/src/main/java/com/networknt/common/SecretConstants.java
Patch:
@@ -10,6 +10,7 @@ public class SecretConstants {
 
     public static final String AUTHORIZATION_CODE_CLIENT_SECRET = "authorizationCodeClientSecret";
     public static final String CLIENT_CREDENTIALS_CLIENT_SECRET = "clientCredentialsClientSecret";
+    public static final String REFRESH_TOKEN_CLIENT_SECRET = "refreshTokenClientSecret";
     public static final String KEY_CLIENT_SECRET = "keyClientSecret";
     public static final String CONSUL_TOKEN = "consulToken";
     public static final String EMAIL_PASSWORD = "emailPassword";

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -57,15 +57,15 @@ public void testVerifyJwt() throws Exception {
         claims = null;
         Assert.assertNotNull(jwt);
         try {
-            claims = JwtHelper.verifyJwt(jwt);
+            claims = JwtHelper.verifyJwt(jwt, false);
         } catch (Exception e) {
             e.printStackTrace();
         }
         Assert.assertNotNull(claims);
         Assert.assertEquals("steve", claims.getStringClaimValue(Constants.USER_ID_STRING));
 
         try {
-            claims = JwtHelper.verifyJwt(jwt);
+            claims = JwtHelper.verifyJwt(jwt, false);
         } catch (Exception e) {
             e.printStackTrace();
         }

File: security/src/main/java/com/networknt/security/JwtMockHandler.java
Patch:
@@ -47,7 +47,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                 Headers.CONTENT_TYPE, "application/json");
 
         Map<String, Object> resMap = new HashMap<>();
-        resMap.put("access_token", JwtHelper.getJwt(mockClaims()));
+        resMap.put("access_token", JwtIssuer.getJwt(mockClaims()));
         resMap.put("token_type", "bearer");
         resMap.put("expires_in", 600);
         exchange.getResponseSender().send(ByteBuffer.wrap(
@@ -56,7 +56,7 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
     }
 
     public JwtClaims mockClaims() {
-        JwtClaims claims = JwtHelper.getDefaultJwtClaims();
+        JwtClaims claims = JwtIssuer.getDefaultJwtClaims();
         claims.setClaim("user_id", "steve");
         claims.setClaim("user_type", "EMPLOYEE");
         claims.setClaim("client_id", "aaaaaaaa-1234-1234-1234-bbbbbbbb");

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -156,11 +156,12 @@ public static JwtClaims getDefaultJwtClaims() {
      * @return A PrivateKey object
      */
     private static PrivateKey getPrivateKey(String filename, String password, String key) {
+        if(logger.isDebugEnabled()) logger.debug("filename = " + filename + " key = " + key);
         PrivateKey privateKey = null;
 
         try {
             KeyStore keystore = KeyStore.getInstance("JKS");
-            keystore.load(JwtHelper.class.getResourceAsStream(filename),
+            keystore.load(Config.getInstance().getInputStreamFromFile(filename),
                     password.toCharArray());
 
             privateKey = (PrivateKey) keystore.getKey(key,

File: server/src/main/java/com/networknt/server/ShutdownHookProvider.java
Patch:
@@ -4,7 +4,7 @@
  * If you want close database connections, release the resources allocated
  * in the application before server shutdown, please implement this interface
  * with a class and put it into your API project
- * /src/main/resources/META-INF/services/com.networknt.server.ShutdownHookProvider
+ * /src/main/resources/config/service.yml com.networknt.server.ShutdownHookProvider
  *
  * All shutdown hooks will be called during server shutdown so that resources can
  * be released completely.

File: server/src/main/java/com/networknt/server/StartupHookProvider.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * If you want initialize database connections, load some resources or cached data
  * during server startup, please implement this interface with a class and put
- * it into your API project /src/main/resources/META-INF/services/com.networknt.server.StartupHookProvider
+ * it into your API project /src/main/resources/config/service.yml com.networknt.server.StartupHookProvider
  * During server startup, these startup hooks will be called to initialize the server
  * state.
  *

File: client/src/integration/java/com/networknt/client/Http2ClientIT.java
Patch:
@@ -711,7 +711,8 @@ private void callApiAsyncMultiThread(final int threadCount) throws InterruptedEx
         List<Future<String>> futures = executorService.invokeAll(tasks);
         List<String> resultList = new ArrayList<>(futures.size());
         for (Future<String> future : futures) {
-            resultList.add(future.get());
+            logger.debug("future = " + future);
+            resultList.add(future.get());  // We have NPE here once. Need to reproduce.
         }
         System.out.println("resultList = " + resultList);
     }

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.jose4j.jwt.consumer.JwtConsumer;
 import org.jose4j.jwt.consumer.JwtConsumerBuilder;
 import org.jose4j.jwt.consumer.JwtContext;
-import org.jose4j.jwx.JsonWebStructure;
 import org.jose4j.lang.JoseException;
 import org.junit.AfterClass;
 import org.junit.Assert;

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -8,13 +8,10 @@
 import org.jose4j.jws.AlgorithmIdentifiers;
 import org.jose4j.jws.JsonWebSignature;
 import org.jose4j.jwt.JwtClaims;
-import org.jose4j.jwt.MalformedClaimException;
 import org.jose4j.jwt.NumericDate;
 import org.jose4j.jwt.consumer.InvalidJwtException;
 import org.jose4j.jwt.consumer.JwtConsumer;
 import org.jose4j.jwt.consumer.JwtConsumerBuilder;
-import org.jose4j.jwt.consumer.JwtContext;
-import org.jose4j.jwx.JsonWebStructure;
 import org.jose4j.lang.JoseException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;

File: utility/src/main/java/com/networknt/utility/NioUtils.java
Patch:
@@ -1,13 +1,13 @@
 package com.networknt.utility;
 
-import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.*;
 import java.net.URI;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.FileSystem;
 import java.nio.file.*;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.text.DateFormat;
@@ -247,7 +247,7 @@ public static ByteBuffer toByteBuffer(String s) {
     public static ByteBuffer toByteBuffer(File file) {
         ByteBuffer buffer = ByteBuffer.allocateDirect((int) file.length());
         try {
-            buffer.put(IOUtils.toByteArray(new FileInputStream(file)));
+            buffer.put(toByteArray(new FileInputStream(file)));
         } catch (IOException e) {
             logger.error("Failed to write file to byte array: " + e.getMessage());
         }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -531,7 +531,7 @@ public static String getFormDataString(Map<String, String> params) throws Unsupp
                 result.append("&");
             result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
             result.append("=");
-            result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
+            result.append(URLEncoder.encode(entry.getValue(), "UTF-8").replaceAll("\\+", "%20"));
         }
         return result.toString();
     }

File: common/src/main/java/com/networknt/common/DecryptUtil.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.networknt.service.SingletonServiceFactory;
 import com.networknt.utility.Decryptor;
-import org.owasp.encoder.Encode;
 
 import java.util.List;
 import java.util.Map;

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -75,7 +75,7 @@ public class Server {
     public static final String CONFIG_NAME = "server";
     public static final String CONFIG_SECRET = "secret";
 
-    static final String DEFAULT_ENV = "dev";
+    static final String DEFAULT_ENV = "test";
     static final String LIGHT_ENV = "light-env";
     static final String LIGHT_CONFIG_SERVER_URI = "light-config-server-uri";
 
@@ -347,7 +347,7 @@ private static void loadConfig() {
             Http2Client client = Http2Client.getInstance();
             ClientConnection connection = null;
             try {
-                connection = client.connect(new URI(configUri), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, OptionMap.EMPTY).get();
+                connection = client.connect(new URI(configUri), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
             } catch (Exception e) {
                 logger.error("Exeption:", e);
             }

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -64,7 +64,7 @@ public class JwtHelper {
     public static final String KID = "kid";
     public static final String SECURITY_CONFIG = "security";
     public static final String JWT_CERTIFICATE = "certificate";
-    public static final String JwT_CLOCK_SKEW_IN_SECONDS = "clockSkewInSeconds";
+    public static final String JWT_CLOCK_SKEW_IN_SECONDS = "clockSkewInSeconds";
     public static final String ENABLE_VERIFY_JWT = "enableVerifyJwt";
     public static final String OAUTH_HTTP2_SUPPORT = "oauthHttp2Support";
     public static final String ENABLE_JWT_CACHE = "enableJwtCache";
@@ -77,7 +77,7 @@ public class JwtHelper {
     static Map<String, Object> securityConfig = (Map)Config.getInstance().getJsonMapConfig(SECURITY_CONFIG);
     static Map<String, Object> securityJwtConfig = (Map)securityConfig.get(JWT_CONFIG);
     static JwtConfig jwtConfig = (JwtConfig) Config.getInstance().getJsonObjectConfig(JWT_CONFIG, JwtConfig.class);
-    static int secondsOfAllowedClockSkew = (Integer) securityJwtConfig.get(JwT_CLOCK_SKEW_IN_SECONDS);
+    static int secondsOfAllowedClockSkew = (Integer) securityJwtConfig.get(JWT_CLOCK_SKEW_IN_SECONDS);
     static Boolean enableJwtCache = (Boolean)securityConfig.get(ENABLE_JWT_CACHE);
     static Boolean bootstrapFromKeyService = (Boolean)securityConfig.get(BOOTSTRAP_FROM_KEY_SERVICE);
 

File: body/src/main/java/com/networknt/body/BodyHandler.java
Patch:
@@ -92,7 +92,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
                             body = Config.getInstance().getMapper().readValue(s, new TypeReference<HashMap<String, Object>>() {
                             });
                         } else if (s.startsWith("[")) {
-                            body = Config.getInstance().getMapper().readValue(s, new TypeReference<List<HashMap<String, Object>>>() {
+                            body = Config.getInstance().getMapper().readValue(s, new TypeReference<List<Object>>() {
                             });
                         } else {
                             // error here. The content type in head doesn't match the body.

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -66,7 +66,7 @@ public void checkPass(String serviceId, String token) {
 		final CountDownLatch latch = new CountDownLatch(1);
 		final AtomicReference<ClientResponse> reference = new AtomicReference<>();
 		try {
-			ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(path);
+			ClientRequest request = new ClientRequest().setMethod(Methods.PUT).setPath(path);
 			request.getRequestHeaders().put(Headers.HOST, "localhost");
 			if(token != null) request.getRequestHeaders().put(Constants.CONSUL_TOKEN, token);
 			connection.sendRequest(request, client.createClientCallback(reference, latch));
@@ -97,7 +97,7 @@ public void checkFail(String serviceId, String token) {
 		final CountDownLatch latch = new CountDownLatch(1);
 		final AtomicReference<ClientResponse> reference = new AtomicReference<>();
 		try {
-			ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(path);
+			ClientRequest request = new ClientRequest().setMethod(Methods.PUT).setPath(path);
 			request.getRequestHeaders().put(Headers.HOST, "localhost");
 			if(token != null) request.getRequestHeaders().put(Constants.CONSUL_TOKEN, token);
 			connection.sendRequest(request, client.createClientCallback(reference, latch));
@@ -156,7 +156,7 @@ public void unregisterService(String serviceId, String token) {
 		final CountDownLatch latch = new CountDownLatch(1);
 		final AtomicReference<ClientResponse> reference = new AtomicReference<>();
 		try {
-			ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(path);
+			ClientRequest request = new ClientRequest().setMethod(Methods.PUT).setPath(path);
             request.getRequestHeaders().put(Headers.HOST, "localhost");
 			if(token != null) request.getRequestHeaders().put(Constants.CONSUL_TOKEN, token);
 			connection.sendRequest(request, client.createClientCallback(reference, latch));

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -66,7 +66,7 @@ public void checkPass(String serviceId, String token) {
 		final CountDownLatch latch = new CountDownLatch(1);
 		final AtomicReference<ClientResponse> reference = new AtomicReference<>();
 		try {
-			ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(path);
+			ClientRequest request = new ClientRequest().setMethod(Methods.PUT).setPath(path);
 			request.getRequestHeaders().put(Headers.HOST, "localhost");
 			if(token != null) request.getRequestHeaders().put(Constants.CONSUL_TOKEN, token);
 			connection.sendRequest(request, client.createClientCallback(reference, latch));
@@ -97,7 +97,7 @@ public void checkFail(String serviceId, String token) {
 		final CountDownLatch latch = new CountDownLatch(1);
 		final AtomicReference<ClientResponse> reference = new AtomicReference<>();
 		try {
-			ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(path);
+			ClientRequest request = new ClientRequest().setMethod(Methods.PUT).setPath(path);
 			request.getRequestHeaders().put(Headers.HOST, "localhost");
 			if(token != null) request.getRequestHeaders().put(Constants.CONSUL_TOKEN, token);
 			connection.sendRequest(request, client.createClientCallback(reference, latch));
@@ -156,7 +156,7 @@ public void unregisterService(String serviceId, String token) {
 		final CountDownLatch latch = new CountDownLatch(1);
 		final AtomicReference<ClientResponse> reference = new AtomicReference<>();
 		try {
-			ClientRequest request = new ClientRequest().setMethod(Methods.GET).setPath(path);
+			ClientRequest request = new ClientRequest().setMethod(Methods.PUT).setPath(path);
             request.getRequestHeaders().put(Headers.HOST, "localhost");
 			if(token != null) request.getRequestHeaders().put(Constants.CONSUL_TOKEN, token);
 			connection.sendRequest(request, client.createClientCallback(reference, latch));

File: common/src/test/java/com/networknt/common/AESEncryptor.java
Patch:
@@ -1,4 +1,4 @@
-package com.networknt.decrypt;
+package com.networknt.common;
 
 import com.networknt.utility.Constants;
 import sun.misc.BASE64Encoder;

File: handler/src/main/java/com/networknt/handler/MiddlewareHandler.java
Patch:
@@ -48,7 +48,7 @@ public interface MiddlewareHandler extends HttpHandler {
     /**
      * Indicate if this handler is enabled or not.
      *
-     * @return
+     * @return boolean true if enabled
      */
     boolean isEnabled();
 

File: metrics/src/main/java/io/dropwizard/metrics/MetricRegistry.java
Patch:
@@ -84,6 +84,7 @@ protected MetricRegistry(ConcurrentMap<MetricName, Metric> metricsMap) {
     /**
      * @param name name
      * @param metric metric
+     * @param <T> type of metrics
      * @return T git s{@code metric}
      * @see #register(MetricName, Metric)
      */

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -326,6 +326,7 @@ private static Object constructWithParameters(Class clazz, List parameters) thro
      * to implementation mapping.
      *
      * @param interfaceClass Interface class
+     * @param <T> class type
      * @param typeClass Generic type class
      * @return The implementation object
      */
@@ -347,6 +348,7 @@ public static <T> T getBean(Class<T> interfaceClass, Class typeClass) {
      * the case for this method to get the first one only if there are multiple.
      *
      * @param interfaceClass Interface class
+     * @param <T> class type
      * @return The implementation object
      */
     public static <T> T getBean(Class<T> interfaceClass) {
@@ -364,6 +366,7 @@ public static <T> T getBean(Class<T> interfaceClass) {
      * is only one object in the serviceMap, then construct the list with this only object.
      *
      * @param interfaceClass Interface class
+     * @param <T> class type
      * @return The array of implementation objects
      */
     public static <T> T[] getBeans(Class<T> interfaceClass) {

File: utility/src/main/java/com/networknt/utility/ConcurrentHashSet.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * ConcurrentHashSet implementation
  *
- * @param <E>
+ * @param <E> element
  */
 public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E>, java.io.Serializable {
 

File: utility/src/main/java/com/networknt/utility/NioUtils.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.utility;
 
-import com.networknt.config.Config;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -16,7 +15,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static java.io.File.separator;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**

File: utility/src/main/java/com/networknt/utility/ModuleRegistry.java
Patch:
@@ -48,6 +48,7 @@ public static Map<String, Object> getRegistry() {
         return registry;
     }
 
+    @SuppressWarnings("unchecked")
     private static void maskNode(Map<String, Object> map, String mask) {
         for (Map.Entry<String, Object> entry : map.entrySet()) {
             String key = entry.getKey();
@@ -62,6 +63,7 @@ else if (value instanceof List) {
         }
     }
 
+    @SuppressWarnings("unchecked")
     private static void maskList(List list, String mask) {
         for (int i = 0; i < list.size(); i++) {
             if (list.get(i) instanceof String && list.get(i).equals(mask)) {

File: decryptor/src/main/java/com/networknt/decrypt/AESDecryptor.java
Patch:
@@ -57,6 +57,7 @@ public AESDecryptor() {
         }
     }
 
+    @Override
     public String decrypt(String input) {
         if (!input.startsWith(CRYPT_PREFIX))
         {

File: email/src/main/java/com/networknt/email/EmailSender.java
Patch:
@@ -92,7 +92,7 @@ public void sendMailWithAttachment (String to, String subject, String content, S
         Transport.send(message);
     }
 
-    private class SMTPAuthenticator extends Authenticator {
+    private static class SMTPAuthenticator extends Authenticator {
         public  String user;
         public  String password;
 
@@ -101,6 +101,7 @@ public SMTPAuthenticator(String user, String password) {
             this.password = password ;
         }
 
+        @Override
         public PasswordAuthentication getPasswordAuthentication()
         {
             return new PasswordAuthentication(this.user, this.password);

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -125,6 +125,7 @@ public static String getKey(KeyRequest keyRequest, boolean http2) throws ClientE
         try {
             ClientRequest request = new ClientRequest().setPath(keyRequest.getUri()).setMethod(Methods.GET);
             request.getRequestHeaders().put(Headers.AUTHORIZATION, getBasicAuthHeader(keyRequest.getClientId(), keyRequest.getClientSecret()));
+            request.getRequestHeaders().put(Headers.HOST, "localhost");
             connection.sendRequest(request, client.createClientCallback(reference, latch));
             latch.await();
         } catch (Exception e) {

File: decryptor/src/main/java/com/networknt/decrypt/AESDecryptor.java
Patch:
@@ -31,8 +31,6 @@ public class AESDecryptor implements Decryptor {
 
     private Cipher cipher;
 
-    private BASE64Encoder base64Encoder;
-
     private BASE64Decoder base64Decoder;
 
     public AESDecryptor() {
@@ -52,7 +50,6 @@ public AESDecryptor() {
 
             // For production use commons base64 encoder
             base64Decoder = new BASE64Decoder();
-            base64Encoder = new BASE64Encoder();
         }
         catch (Exception e)
         {

File: decryptor/src/test/java/com/networknt/decrypt/AESEncryptor.java
Patch:
@@ -10,7 +10,6 @@
 import java.io.UnsupportedEncodingException;
 import java.security.AlgorithmParameters;
 import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
 import java.security.spec.InvalidParameterSpecException;
 import java.security.spec.KeySpec;
 

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -211,7 +211,7 @@ static public X509Certificate readCertificate(String filename)
 
     static {
         // load local public key certificates only if bootstrapFromKeyService is false
-        if(Boolean.FALSE.equals(bootstrapFromKeyService)) {
+        if(bootstrapFromKeyService == null || Boolean.FALSE.equals(bootstrapFromKeyService)) {
             certMap = new HashMap<>();
             fingerPrints = new ArrayList<>();
             Map<String, Object> keyMap = (Map<String, Object>) securityJwtConfig.get(JwtHelper.JWT_CERTIFICATE);

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -90,7 +90,9 @@ public Map<String, Object> getEnvironment(HttpServerExchange exchange) {
 
     public Map<String, Object> getSecurity() {
         Map<String, Object> secMap = new LinkedHashMap<>();
-        secMap.put("oauth2FingerPrints", JwtHelper.getFingerPrints());
+        if(JwtHelper.getFingerPrints() != null) {
+            secMap.put("oauth2FingerPrints", JwtHelper.getFingerPrints());
+        }
         secMap.put("serverFingerPrint", getServerTlsFingerPrint());
         return secMap;
     }

File: service/src/main/java/com/networknt/service/ServiceConfig.java
Patch:
@@ -9,16 +9,16 @@
  * @author Steve Hu
  */
 public class ServiceConfig {
-    List<Map<String, List<Object>>> singletons;
+    List<Map<String, Object>> singletons;
 
     public ServiceConfig() {
     }
 
-    public List<Map<String, List<Object>>> getSingletons() {
+    public List<Map<String, Object>> getSingletons() {
         return singletons;
     }
 
-    public void setSingletons(List<Map<String, List<Object>>> singletons) {
+    public void setSingletons(List<Map<String, Object>> singletons) {
         this.singletons = singletons;
     }
 }

File: service/src/test/java/com/networknt/service/ServiceConfigTest.java
Patch:
@@ -16,7 +16,7 @@ public class ServiceConfigTest {
     public void testServiceConfig() {
 
         ServiceConfig serviceConfig = (ServiceConfig) Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ServiceConfig.class);
-        List<Map<String, List<Object>>> singletons = serviceConfig.getSingletons();
+        List<Map<String, Object>> singletons = serviceConfig.getSingletons();
         Assert.assertTrue(singletons.size() > 0);
     }
 }

File: client/src/main/java/com/networknt/client/oauth/OauthHelper.java
Patch:
@@ -102,7 +102,7 @@ public void failed(IOException e) {
                 }
             });
 
-            latch.await(1, TimeUnit.SECONDS);
+            latch.await(4, TimeUnit.SECONDS);
         } catch (Exception e) {
             logger.error("IOException: ", e);
             throw new ClientException(e);

File: utility/src/main/java/com/networknt/utility/HashUtil.java
Patch:
@@ -52,7 +52,7 @@ public static String md5(String input) {
             md5 = new BigInteger(1, digest.digest()).toString(16);
 
         } catch (NoSuchAlgorithmException e) {
-            e.printStackTrace();
+            throw new RuntimeException(e);
         }
         return md5;
     }

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -303,6 +303,7 @@ private static Object constructWithParameters(Class clazz, List parameters) thro
      */
     public static <T> T getBean(Class<T> interfaceClass, Class typeClass) {
         Object object = serviceMap.get(interfaceClass.getName() + "<" + typeClass.getName() + ">");
+        if(object == null) return null;
         if(object instanceof Object[]) {
             return (T)Array.get(object, 0);
         } else {
@@ -322,6 +323,7 @@ public static <T> T getBean(Class<T> interfaceClass, Class typeClass) {
      */
     public static <T> T getBean(Class<T> interfaceClass) {
         Object object = serviceMap.get(interfaceClass.getName());
+        if(object == null) return null;
         if(object instanceof Object[]) {
             return (T)Array.get(object, 0);
         } else {
@@ -338,6 +340,7 @@ public static <T> T getBean(Class<T> interfaceClass) {
      */
     public static <T> T[] getBeans(Class<T> interfaceClass) {
         Object object = serviceMap.get(interfaceClass.getName());
+        if(object == null) return null;
         if(object instanceof Object[]) {
             return (T[])object;
         } else {

File: limit/src/main/java/com/networknt/limit/LimitHandler.java
Patch:
@@ -25,7 +25,7 @@
 import io.undertow.server.handlers.RequestLimit;
 
 /**
- A handler which limits the maximum number of concurrent requests.  Requests beyond the limit will
+ * A handler which limits the maximum number of concurrent requests.  Requests beyond the limit will
  * be queued with limited size of queue. If the queue is full, then request will be dropped.
  *
  * @author Steve Hu

File: server/src/test/java/com/networknt/server/TestHandlerProvider.java
Patch:
@@ -11,6 +11,6 @@ public class TestHandlerProvider implements HandlerProvider {
     @Override
     public HttpHandler getHandler() {
         return Handlers.routing()
-                .add(Methods.GET, "/", new TestHandler());
+                .add(Methods.GET, "/test", new TestHandler());
     }
 }

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -81,7 +81,7 @@ private static void handleSingleImpl(List<String> interfaceClasses, List<Object>
                             if(v == null) {
                                 // it is not primitive type, so find the object in service map.
                                 Class<?>[] pType  = method.getParameterTypes();
-                                v = serviceMap.get(pType[0]);
+                                v = serviceMap.get(pType[0].getName());
                             }
                             if(v != null) {
                                 o[0] = v;

File: status/src/test/java/com/networknt/status/ErrorRootStatusSerializer.java
Patch:
@@ -15,7 +15,7 @@ public class ErrorRootStatusSerializer implements StatusSerializer {
 
 	@Override
 	public String serializeStatus(Status status) {
-		return "{ error : {\"statusCode\":" + status.getStatusCode()
+		return "{ \"error\" : {\"statusCode\":" + status.getStatusCode()
         + ",\"code\":\"" + status.getCode()
         + "\",\"message\":\""
         + status.getMessage() + "\",\"description\":\""

File: status/src/test/java/com/networknt/status/StatusTest.java
Patch:
@@ -42,7 +42,7 @@ public void testToString() {
         //Assert.assertEquals("{\"statusCode\":401,\"code\":\"ERR10001\",\"message\":\"AUTH_TOKEN_EXPIRED\",\"description\":\"Jwt token in authorization header expired\"}", status.toString());
         
         // test with ErrorStatusRootStatusSerializer
-        Assert.assertEquals("{ error : {\"statusCode\":401,\"code\":\"ERR10001\",\"message\":\"AUTH_TOKEN_EXPIRED\",\"description\":\"Jwt token in authorization header expired\"} }", status.toString());
+        Assert.assertEquals("{ \"error\" : {\"statusCode\":401,\"code\":\"ERR10001\",\"message\":\"AUTH_TOKEN_EXPIRED\",\"description\":\"Jwt token in authorization header expired\"} }", status.toString());
     }
 
     @Test
@@ -54,7 +54,7 @@ public void testToStringWithArgs() {
         //Assert.assertEquals("{\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter parameter name is required on path original url but not found in request.\"}", status.toString());
         
         // test with ErrorStatusRootStatusSerializer
-        Assert.assertEquals("{ error : {\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter parameter name is required on path original url but not found in request.\"} }", status.toString());
+        Assert.assertEquals("{ \"error\" : {\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter parameter name is required on path original url but not found in request.\"} }", status.toString());
     }
 
     @Test

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -39,6 +39,7 @@ public class ConsulClientImpl implements ConsulClient {
 	 */
 	public ConsulClientImpl(String protocol, String host, int port) {
 		url = protocol + "://" + host + ":" + port;
+		if(logger.isDebugEnabled()) logger.debug("url = " + url);
 	}
 
 	/**
@@ -49,6 +50,7 @@ public ConsulClientImpl(String protocol, String host, int port) {
 	 */
 	public ConsulClientImpl(String protocol, String host) {
 		url = protocol + "://" + host;
+		if(logger.isDebugEnabled()) logger.debug("url = " + url);
 	}
 
 	@Override

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -87,7 +87,6 @@ public class Server {
     public static ServerConfig config = (ServerConfig) Config.getInstance().getJsonObjectConfig(CONFIG_NAME, ServerConfig.class);
     public static SecretConfig secret = (SecretConfig) Config.getInstance().getJsonObjectConfig(CONFIG_SECRET, SecretConfig.class);
     public final static TrustManager[] TRUST_ALL_CERTS = new X509TrustManager[] { new DummyTrustManager() };
-    static Http2Client client = Http2Client.getInstance();
 
     static protected boolean shutdownRequested = false;
     static Undertow server = null;
@@ -352,6 +351,7 @@ private static void loadConfig() {
             // /v1/config/1.2.4/dev/com.networknt.petstore-1.0.0
 
             String path = "/v1/config/" + version + "/" + env + "/" + service;
+            Http2Client client = Http2Client.getInstance();
             ClientConnection connection = null;
             try {
                 connection = client.connect(new URI(configUri), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, OptionMap.EMPTY).get();

File: cluster/src/test/java/com/networknt/cluster/LightClusterTest.java
Patch:
@@ -14,10 +14,10 @@ public class LightClusterTest {
 
     @Test
     public void testLightCluster() {
-        String s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0", null);
+        String s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0", null, null);
         Assert.assertEquals(s, "http://localhost:7005");
 
-        s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0", null);
+        s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0", null, null);
         Assert.assertEquals(s, "http://localhost:7002");
     }
 }

File: consul/src/main/java/com/networknt/consul/client/ConsulClientImpl.java
Patch:
@@ -179,7 +179,7 @@ public ConsulResponse<List<ConsulService>> lookupHealthService(String serviceNam
 		if(tag != null) {
 			path = path + "&tag=" + tag;
 		}
-
+		if(logger.isDebugEnabled()) logger.debug("path = " + path);
 		ClientConnection connection = null;
 		try {
 			connection = client.connect(new URI(url), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, OptionMap.EMPTY).get();

File: e2e-test/src/test/java/com/networknt/consul/ConsulTest.java
Patch:
@@ -33,7 +33,7 @@ public void tearDown() throws Exception {
         registry = null;
     }
 
-    @Test
+    //@Test
     public void doRegisterAndAvailable() throws Exception {
         // register
         registry.doRegister(serviceUrl);
@@ -42,7 +42,7 @@ public void doRegisterAndAvailable() throws Exception {
         registry.doUnregister(serviceUrl);
     }
 
-    @Test
+    //@Test
     public void discoverService() throws Exception {
         registry.doRegister(serviceUrl);
         List<URL> urls = registry.discoverService(serviceUrl);

File: consul/src/main/java/com/networknt/consul/ConsulUtils.java
Patch:
@@ -45,7 +45,8 @@ public static ConsulService buildService(URL url) {
         service.setTtl(ConsulConstants.TTL);
 
         List<String> tags = new ArrayList<String>();
-        tags.add(ConsulConstants.CONSUL_TAG_LIGHT_PROTOCOL + url.getProtocol());
+        String env = url.getParameter(Constants.TAG_ENVIRONMENT);
+        if(env != null) tags.add(env);
         service.setTags(tags);
 
         return service;

File: consul/src/test/java/com/networknt/consul/ConsulHeartbeatManagerTest.java
Patch:
@@ -19,11 +19,12 @@
 public class ConsulHeartbeatManagerTest {
     private ConsulHeartbeatManager heartbeatManager;
     private MockConsulClient client;
+    private String token;
 
     @Before
     public void setUp() throws Exception {
         client = new MockConsulClient("localhost", 8500);
-        heartbeatManager = new ConsulHeartbeatManager(client);
+        heartbeatManager = new ConsulHeartbeatManager(client, null);
 
         ConsulConstants.HEARTBEAT_CIRCLE = 200;
         ConsulConstants.SWITCHER_CHECK_CIRCLE = 20;

File: consul/src/main/java/com/networknt/consul/client/ConsulClient.java
Patch:
@@ -44,9 +44,9 @@ public interface ConsulClient {
 	 */
 	ConsulResponse<List<ConsulService>> lookupHealthService(String serviceName, long lastConsulIndex);
 
-	ConsulResponse<List<ConsulService>> lookupHealthService(String serviceName, String tag, long lasConsulIndex);
+	//ConsulResponse<List<ConsulService>> lookupHealthService(String serviceName, String tag, long lasConsulIndex);
 
-	ConsulResponse<List<ConsulService>> lookupHealthService(String serviceName, String tag, long lasConsulIndex, String token);
+	//ConsulResponse<List<ConsulService>> lookupHealthService(String serviceName, String tag, long lasConsulIndex, String token);
 
 
 

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.Http2Client;
+import com.networknt.common.SecretConfig;
 import com.networknt.config.Config;
 
 import java.util.List;
@@ -38,7 +39,7 @@ public AuthorizationCodeRequest() {
         setGrantType(AUTHORIZATION_CODE);
         Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_NAME);
         // client_secret is in secret.yml instead of client.yml
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_SECRET);
+        SecretConfig secretConfig = (SecretConfig)Config.getInstance().getJsonObjectConfig(Http2Client.CONFIG_SECRET, SecretConfig.class);
         if(clientConfig != null) {
             Map<String, Object> oauthConfig = (Map<String, Object>)clientConfig.get(OAUTH);
             if(oauthConfig != null) {
@@ -48,7 +49,7 @@ public AuthorizationCodeRequest() {
                     Map<String, Object> acConfig = (Map<String, Object>) tokenConfig.get(AUTHORIZATION_CODE);
                     if(acConfig != null) {
                         setClientId((String)acConfig.get(CLIENT_ID));
-                        setClientSecret((String)secretConfig.get(AUTHORIZATION_CODE_CLIENT_SECRET));
+                        setClientSecret(secretConfig.getAuthorizationCodeClientSecret());
                         setUri((String)acConfig.get(URI));
                         setScope((List<String>)acConfig.get(SCOPE));
                         setRedirectUri((String)acConfig.get(REDIRECT_URI));

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -17,6 +17,7 @@
 package com.networknt.client.oauth;
 
 import com.networknt.client.Http2Client;
+import com.networknt.common.SecretConfig;
 import com.networknt.config.Config;
 
 import java.util.List;
@@ -38,7 +39,7 @@ public ClientCredentialsRequest() {
         setGrantType(CLIENT_CREDENTIALS);
         Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_NAME);
         // client_secret is in secret.yml instead of client.yml
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_SECRET);
+        SecretConfig secretConfig = (SecretConfig)Config.getInstance().getJsonObjectConfig(Http2Client.CONFIG_SECRET, SecretConfig.class);
         if(clientConfig != null) {
             Map<String, Object> oauthConfig = (Map<String, Object>)clientConfig.get(OAUTH);
             if(oauthConfig != null) {
@@ -48,7 +49,7 @@ public ClientCredentialsRequest() {
                     Map<String, Object> ccConfig = (Map<String, Object>) tokenConfig.get(CLIENT_CREDENTIALS);
                     if(ccConfig != null) {
                         setClientId((String)ccConfig.get(CLIENT_ID));
-                        setClientSecret((String)secretConfig.get(CLIENT_CREDENTIALS_CLIENT_SECRET));
+                        setClientSecret(secretConfig.getClientCredentialsClientSecret());
                         setUri((String)ccConfig.get(URI));
                         setScope((List<String>)ccConfig.get(SCOPE));
                     }

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -29,8 +29,6 @@ public class TokenRequest {
     public static String CLIENT_CREDENTIALS = "client_credentials";
     public static String URI = "uri";
     public static String CLIENT_ID = "client_id";
-    public static String AUTHORIZATION_CODE_CLIENT_SECRET = "authorizationCodeClientSecret";
-    public static String CLIENT_CREDENTIALS_CLIENT_SECRET = "clientCredentialsClientSecret";
     public static String REDIRECT_URI = "redirect_uri";
     public static String SCOPE = "scope";
 

File: registry/src/main/java/com/networknt/registry/URLParamType.java
Patch:
@@ -27,6 +27,8 @@
  *
  */
 public enum URLParamType {
+    /** environment **/
+    environment("environment", "production"),
     /** version **/
     version("version", Constants.DEFAULT_VERSION),
     /** request timeout **/

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -994,7 +994,6 @@ private static SSLContext createSSLContext(final KeyStore keyStore, final KeySto
         return sslContext;
     }
 
-
     private static int randInt(int min, int max) {
         Random rand = new Random();
         return rand.nextInt((max-min) + 1) + min;
@@ -1013,15 +1012,13 @@ private static boolean isTokenExpired(String authorization) {
 
                 JwtContext jwtContext = consumer.process(jwt);
                 JwtClaims jwtClaims = jwtContext.getJwtClaims();
-                JsonWebStructure structure = jwtContext.getJoseObjects().get(0);
 
                 try {
                     if ((NumericDate.now().getValue() - 60) >= jwtClaims.getExpirationTime().getValue()) {
                         expired = true;
                     }
                 } catch (MalformedClaimException e) {
                     logger.error("MalformedClaimException:", e);
-                    throw new InvalidJwtException("MalformedClaimException", e);
                 }
             } catch(InvalidJwtException e) {
                 e.printStackTrace();

File: utility/src/main/java/com/networknt/utility/Util.java
Patch:
@@ -17,7 +17,6 @@
 package com.networknt.utility;
 
 import org.apache.commons.codec.binary.Base64;
-import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -124,7 +123,7 @@ public static int parseInteger(String intStr) {
     }
 
     public static String urlEncode(String value) {
-        if (StringUtils.isEmpty(value)) {
+        if (value == null || value.length() == 0) {
             return "";
         }
         try {
@@ -135,7 +134,7 @@ public static String urlEncode(String value) {
     }
 
     public static String urlDecode(String value) {
-        if (StringUtils.isBlank(value)) {
+        if (value == null || value.length() == 0) {
             return "";
         }
         try {

File: handler/src/main/java/com/networknt/handler/util/ContentTypeSenders.java
Patch:
@@ -1,4 +1,4 @@
-package utils;
+package com.networknt.handler.util;
 
 /**
  * A interface for rendering content with appropriate mime settings.

File: handler/src/main/java/com/networknt/handler/util/Exchange.java
Patch:
@@ -1,4 +1,4 @@
-package utils;
+package com.networknt.handler.util;
 
 /**
  * A container class for providing implementations of utility interfaces for boilerplate tasks such as

File: handler/src/main/java/com/networknt/handler/util/Headers.java
Patch:
@@ -1,4 +1,4 @@
-package utils;
+package com.networknt.handler.util;
 
 /**
  * A utility interface with default implementation for extracting headers from the request.

File: handler/src/main/java/com/networknt/handler/util/PathParams.java
Patch:
@@ -1,4 +1,4 @@
-package utils;
+package com.networknt.handler.util;
 
 /**
  * A utility interface with default implementations for extracting path variables from the URL.

File: handler/src/main/java/com/networknt/handler/util/QueryParams.java
Patch:
@@ -1,4 +1,4 @@
-package utils;
+package com.networknt.handler.util;
 
 /**
  * A utility interface with default implementations for extracting query parameters from the URL.

File: handler/src/main/java/com/networknt/handler/util/RedirectSenders.java
Patch:
@@ -1,4 +1,4 @@
-package utils;
+package com.networknt.handler.util;
 
 /**
  * A utility interface with default implementations for handling temporary and permanent redirects.

File: limit/src/test/java/com/networknt/limit/LimitHandlerTest.java
Patch:
@@ -155,11 +155,12 @@ public void testMoreRequests() throws Exception {
         // Check for exceptions
         for (Future<String> future : futures) {
             // Throws an exception if an exception was thrown by the task.
-            resultList.add(future.get());
+            String s = future.get();
+            logger.info("future = " + s);
+            resultList.add(s);
         }
         long last = (System.currentTimeMillis() - start);
         // make sure that there are at least one element in resultList is :513
         Assert.assertTrue(resultList.contains(":513"));
-        System.out.println("resultList = " + resultList + " response time = " + last);
     }
 }

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -163,6 +163,7 @@ public void run() {
             IoUtils.safeClose(connection);
         }
         int statusCode = reference.get().getResponseCode();
+        // as content type and body is mismatched, the body will be ignored.
         Assert.assertEquals(400, statusCode);
         if(statusCode == 400) {
             Status status = Config.getInstance().getMapper().readValue(reference.get().getAttachment(Http2Client.RESPONSE_BODY), Status.class);

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -27,8 +27,6 @@
 import io.undertow.server.RoutingHandler;
 import io.undertow.util.Headers;
 import io.undertow.util.Methods;
-import io.undertow.util.StringReadChannelListener;
-import io.undertow.util.StringWriteChannelListener;
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -38,7 +36,6 @@
 import org.xnio.IoUtils;
 import org.xnio.OptionMap;
 
-import java.io.IOException;
 import java.net.URI;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;

File: consul/src/main/java/com/networknt/consul/client/ConsulClient.java
Patch:
@@ -45,6 +45,4 @@ public interface ConsulClient {
 	ConsulResponse<List<ConsulService>> lookupHealthService(
 			String serviceName, long lastConsulIndex);
 
-	String lookupCommand(String group);
-
 }

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -292,7 +292,7 @@ private static Object constructWithParameters(Class clazz, List parameters) thro
      * @param interfaceClass Interface class
      * @return The implementation object
      */
-    public static <T> T getBean(Class<T> interfaceClass) {
-       return (T) serviceMap.get(interfaceClass);
+    public static Object getBean(Class interfaceClass) {
+       return serviceMap.get(interfaceClass);
     }
 }

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -68,7 +68,7 @@ public InfluxDbHttpSender(final String protocol, final String hostname, final in
      */
     public InfluxDbHttpSender(final String protocol, final String hostname, final int port, final String database, final String username, final String password,
                               final TimeUnit timePrecision) throws Exception {
-        this.url = new URL(protocol, hostname, port, null);
+        this.url = new URL(protocol, hostname, port, "");
         String queryDb = String.format("db=%s", URLEncoder.encode(database, "UTF-8"));
         String queryCredential = String.format("u=%s&p=%s", URLEncoder.encode(username, "UTF8"), URLEncoder.encode(password, "UTF8"));
         String queryPrecision = String.format("precision=%s", TimeUtils.toTimePrecision(timePrecision));
@@ -113,6 +113,7 @@ public int writeData() throws Exception {
                 public void run() {
                     final ClientRequest request = new ClientRequest().setMethod(Methods.POST).setPath(path);
                     request.getRequestHeaders().put(Headers.TRANSFER_ENCODING, "chunked");
+                    request.getRequestHeaders().put(Headers.HOST, "localhost");
                     connection.sendRequest(request, client.createClientCallback(reference, latch, body));
                 }
             });

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -64,7 +64,6 @@ public class Http2Client {
 
     public static final AttachmentKey<String> RESPONSE_BODY = AttachmentKey.create(String.class);
 
-    static final String ENABLE_HTTP2 = "enableHttp2";
     static final String TLS = "tls";
     static final String LOAD_TRUST_STORE = "loadTrustStore";
     static final String LOAD_KEY_STORE = "loadKeyStore";
@@ -86,7 +85,6 @@ public class Http2Client {
 
     static Map<String, Object> config;
     static Map<String, Object> tokenConfig;
-    public static boolean enableHttp2;
 
     // Cached jwt token for this client.
     private String jwt;
@@ -102,7 +100,6 @@ public class Http2Client {
         ModuleRegistry.registerModule(Http2Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);
         config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
         if(config != null) {
-            enableHttp2 = (boolean)config.get(ENABLE_HTTP2);
             Map<String, Object> oauthConfig = (Map<String, Object>)config.get(OAUTH);
             if(oauthConfig != null) {
                 tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -64,7 +64,7 @@ public class Http2Client {
 
     public static final AttachmentKey<String> RESPONSE_BODY = AttachmentKey.create(String.class);
 
-    static final String TIMEOUT = "timeout";
+    static final String ENABLE_HTTP2 = "enableHttp2";
     static final String TLS = "tls";
     static final String LOAD_TRUST_STORE = "loadTrustStore";
     static final String LOAD_KEY_STORE = "loadKeyStore";
@@ -86,6 +86,7 @@ public class Http2Client {
 
     static Map<String, Object> config;
     static Map<String, Object> tokenConfig;
+    public static boolean enableHttp2;
 
     // Cached jwt token for this client.
     private String jwt;
@@ -101,6 +102,7 @@ public class Http2Client {
         ModuleRegistry.registerModule(Http2Client.class.getName(), Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME), masks);
         config = Config.getInstance().getJsonMapConfig(CONFIG_NAME);
         if(config != null) {
+            enableHttp2 = (boolean)config.get(ENABLE_HTTP2);
             Map<String, Object> oauthConfig = (Map<String, Object>)config.get(OAUTH);
             if(oauthConfig != null) {
                 tokenConfig = (Map<String, Object>)oauthConfig.get(TOKEN);

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.networknt.client.oauth;
 
-import com.networknt.client.Client;
+import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 
 import java.util.List;
@@ -36,9 +36,9 @@ public class AuthorizationCodeRequest extends TokenRequest {
      */
     public AuthorizationCodeRequest() {
         setGrantType(AUTHORIZATION_CODE);
-        Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Client.CONFIG_NAME);
+        Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_NAME);
         // client_secret is in secret.yml instead of client.yml
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Client.CONFIG_SECRET);
+        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_SECRET);
         if(clientConfig != null) {
             Map<String, Object> oauthConfig = (Map<String, Object>)clientConfig.get(OAUTH);
             if(oauthConfig != null) {

File: client/src/main/java/com/networknt/client/oauth/ClientCredentialsRequest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.networknt.client.oauth;
 
-import com.networknt.client.Client;
+import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 
 import java.util.List;
@@ -36,9 +36,9 @@ public class ClientCredentialsRequest extends TokenRequest {
 
     public ClientCredentialsRequest() {
         setGrantType(CLIENT_CREDENTIALS);
-        Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Client.CONFIG_NAME);
+        Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_NAME);
         // client_secret is in secret.yml instead of client.yml
-        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Client.CONFIG_SECRET);
+        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_SECRET);
         if(clientConfig != null) {
             Map<String, Object> oauthConfig = (Map<String, Object>)clientConfig.get(OAUTH);
             if(oauthConfig != null) {

File: client/src/main/java/com/networknt/client/oauth/KeyRequest.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.client.oauth;
 
-import com.networknt.client.Client;
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.networknt.client.oauth;
 
-import com.networknt.client.ClientTest;
 import com.networknt.client.Http2Client;
 import com.networknt.config.Config;
 import io.undertow.Handlers;
@@ -36,7 +35,7 @@
  *
  */
 public class OauthHelperTest {
-    static final Logger logger = LoggerFactory.getLogger(ClientTest.class);
+    static final Logger logger = LoggerFactory.getLogger(OauthHelperTest.class);
 
     static Undertow server = null;
 

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -62,7 +62,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
         if(cId == null) {
             // if not, generate a UUID and put it into the request header
             cId = Util.getUUID();
-            exchange.getRequestHeaders().put(new HttpString(Constants.CORRELATION_ID), cId);
+            exchange.getRequestHeaders().put(Constants.CORRELATION_ID, cId);
         }
         // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);

File: exception/src/main/java/com/networknt/exception/ExceptionHandler.java
Patch:
@@ -23,7 +23,6 @@
 import io.undertow.Handlers;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
-import io.undertow.server.protocol.framed.FrameHeaderData;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.slf4j.MDC;

File: health/src/main/java/com/networknt/health/HealthConfig.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.networknt.health;
 
-import com.fasterxml.jackson.annotation.JsonIgnore;
-
 /**
  * Config class for Health Handler
  *

File: info/src/main/java/com/networknt/info/ServerInfoConfig.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.networknt.info;
 
-import com.fasterxml.jackson.annotation.JsonIgnore;
-
 /**
  * Created by steve on 18/09/16.
  */

File: limit/src/main/java/com/networknt/limit/LimitConfig.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.networknt.limit;
 
-import com.fasterxml.jackson.annotation.JsonIgnore;
-
 /**
  * Config class for limit module
  *

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -115,8 +115,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             Map<String, Object> auditInfo = exchange1.getAttachment(AuditHandler.AUDIT_INFO);
             if(auditInfo != null) {
                 Map<String, String> tags = new HashMap<>();
-                tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT));
-                tags.put("clientId", auditInfo.get(Constants.CLIENT_ID) != null ? (String)auditInfo.get(Constants.CLIENT_ID) : "unknown");
+                tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT_STRING));
+                tags.put("clientId", auditInfo.get(Constants.CLIENT_ID_STRING) != null ? (String)auditInfo.get(Constants.CLIENT_ID_STRING) : "unknown");
 
                 long time = Clock.defaultClock().getTick() - startTime;
                 MetricName metricName = new MetricName("response_time");

File: metrics/src/test/java/io/dropwizard/metrics/MetricNameTest.java
Patch:
@@ -4,8 +4,6 @@
 
 import org.junit.Test;
 
-import io.dropwizard.metrics.MetricName;
-
 import java.util.HashMap;
 import java.util.Map;
 

File: registry/src/main/java/com/networknt/registry/support/DirectRegistry.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.networknt.registry.URLImpl;
 import com.networknt.status.Status;
-import com.networknt.utility.Constants;
 import com.networknt.exception.FrameworkException;
 import com.networknt.registry.NotifyListener;
 import com.networknt.registry.URL;

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -129,7 +129,7 @@ public void testVerifyJwt() throws Exception {
             e.printStackTrace();
         }
         Assert.assertNotNull(claims);
-        Assert.assertEquals("steve", claims.getStringClaimValue(Constants.USER_ID));
+        Assert.assertEquals("steve", claims.getStringClaimValue(Constants.USER_ID_STRING));
 
         try {
             claims = JwtHelper.verifyJwt(jwt);

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -59,7 +59,7 @@ public TraceabilityHandler() {
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
         String tid = exchange.getRequestHeaders().getFirst(Constants.TRACEABILITY_ID);
         if(tid != null) {
-            exchange.getResponseHeaders().put(new HttpString(Constants.TRACEABILITY_ID), tid);
+            exchange.getResponseHeaders().put(Constants.TRACEABILITY_ID, tid);
         }
         next.handleRequest(exchange);
     }

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -294,7 +294,8 @@ public static JwtClaims verifyJwt(String jwt) throws InvalidJwtException, Expire
         // go to OAuth2 server /oauth2/key endpoint to get the public key certificate with kid as parameter.
         X509Certificate certificate = certMap.get(kid);
         if(certificate == null) {
-            getCertFromOauth(kid);
+            certificate = getCertFromOauth(kid);
+            certMap.put(kid, certificate);
         }
         X509VerificationKeyResolver x509VerificationKeyResolver = new X509VerificationKeyResolver(certificate);
 

File: client/src/main/java/com/networknt/client/oauth/KeyRequest.java
Patch:
@@ -19,7 +19,7 @@ public class KeyRequest {
     String clientId;
     String clientSecret;
 
-    public KeyRequest() {
+    public KeyRequest(String kid) {
         Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_NAME);
         // client_secret is in secret.yml instead of client.yml
         Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Http2Client.CONFIG_SECRET);
@@ -29,7 +29,7 @@ public KeyRequest() {
                 Map<String, Object> keyConfig = (Map<String, Object>)oauthConfig.get(KEY);
                 if(keyConfig != null) {
                     setServerUrl((String)keyConfig.get(SERVER_URL));
-                    setUri((String)keyConfig.get(URI));
+                    setUri((String)keyConfig.get(URI) + "/" + kid);
                     setClientId((String)keyConfig.get(CLIENT_ID));
                     setClientSecret((String)secretConfig.get(CLIENT_SECRET));
                 }

File: client/src/test/java/com/networknt/client/oauth/OauthHelperTest.java
Patch:
@@ -225,7 +225,7 @@ public void testGetToken() throws Exception {
 
     @Test
     public void testGetKey() throws Exception {
-        KeyRequest keyRequest = new KeyRequest();
+        KeyRequest keyRequest = new KeyRequest("100");
         keyRequest.setClientId("test_client");
         keyRequest.setClientSecret("test_secret");
         keyRequest.setServerUrl("http://localhost:8887");

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -315,7 +315,7 @@ public static JwtClaims verifyJwt(String jwt) throws InvalidJwtException, Expire
 
     public static X509Certificate getCertFromOauth(String kid) {
         X509Certificate certificate = null;
-        KeyRequest keyRequest = new KeyRequest();
+        KeyRequest keyRequest = new KeyRequest(kid);
         try {
             Boolean http2 = (Boolean)securityConfig.get(OAUTH_HTTP2_SUPPORT);
             String key = OauthHelper.getKey(keyRequest, http2);

File: client/src/main/java/com/networknt/client/Client.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.client;
 
 import com.networknt.client.oauth.ClientCredentialsRequest;
-import com.networknt.client.oauth.TokenHelper;
+import com.networknt.client.oauth.OauthHelper;
 import com.networknt.client.oauth.TokenRequest;
 import com.networknt.client.oauth.TokenResponse;
 import com.networknt.config.Config;
@@ -293,7 +293,7 @@ public void populateHeader(HttpRequest request, String authToken, String correla
 
     private void getCCToken() throws ClientException {
         TokenRequest tokenRequest = new ClientCredentialsRequest();
-        TokenResponse tokenResponse = TokenHelper.getToken(tokenRequest, false);
+        TokenResponse tokenResponse = OauthHelper.getToken(tokenRequest, false);
         synchronized (lock) {
             jwt = tokenResponse.getAccessToken();
             // the expiresIn is seconds and it is converted to millisecond in the future.

File: client/src/main/java/com/networknt/client/oauth/TokenHelper.java
Patch:
@@ -41,13 +41,13 @@ public class TokenHelper {
 
     static final Logger logger = LoggerFactory.getLogger(TokenHelper.class);
 
-    public static TokenResponse getToken(TokenRequest tokenRequest) throws ClientException {
+    public static TokenResponse getToken(TokenRequest tokenRequest, boolean http2) throws ClientException {
         final AtomicReference<TokenResponse> reference = new AtomicReference<>();
         final Http2Client client = Http2Client.getInstance();
         final CountDownLatch latch = new CountDownLatch(1);
         final ClientConnection connection;
         try {
-            connection = client.connect(new URI(tokenRequest.getServerUrl()), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();
+            connection = client.connect(new URI(tokenRequest.getServerUrl()), Http2Client.WORKER, Http2Client.SSL, Http2Client.POOL, http2 ? OptionMap.create(UndertowOptions.ENABLE_HTTP2, true): OptionMap.EMPTY).get();
         } catch (Exception e) {
             throw new ClientException(e);
         }

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -23,6 +23,7 @@
  */
 public class TokenRequest {
     public static String OAUTH = "oauth";
+    public static String TOKEN = "token";
     public static String SERVER_URL = "server_url";
     public static String AUTHORIZATION_CODE = "authorization_code";
     public static String CLIENT_CREDENTIALS = "client_credentials";

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -1029,6 +1029,4 @@ private static JwtClaims getTestClaims() {
         claims.setStringListClaim("scope", scope); // multi-valued claims work too and will end up as a JSON array
         return claims;
     }
-
-
 }

File: client/src/test/java/com/networknt/client/oauth/TokenHelperTest.java
Patch:
@@ -103,7 +103,7 @@ public void testGetToken() throws Exception {
         tokenRequest.setRedirectUri("https://localhost:8443/authorize");
         tokenRequest.setAuthCode("test_code");
 
-        TokenResponse tokenResponse = TokenHelper.getToken(tokenRequest);
+        TokenResponse tokenResponse = TokenHelper.getToken(tokenRequest, true);
         System.out.println("tokenResponse = " + tokenResponse);
     }
 }

File: client/src/main/java/com/networknt/client/Http2Client.java
Patch:
@@ -500,7 +500,7 @@ public static SSLContext createSSLContext() throws IOException {
         return sslContext;
     }
 
-    public String getFormDataString(Map<String, String> params) throws UnsupportedEncodingException {
+    public static String getFormDataString(Map<String, String> params) throws UnsupportedEncodingException {
         StringBuilder result = new StringBuilder();
         boolean first = true;
         for(Map.Entry<String, String> entry : params.entrySet()){

File: client/src/test/java/com/networknt/client/Http2ClientTest.java
Patch:
@@ -109,7 +109,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                                     exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {
                                         @Override
                                         public void handle(HttpServerExchange exchange, String message) {
-                                            System.out.println("message = " + message);
                                             exchange.getResponseSender().send(message);
                                         }
                                     });
@@ -704,6 +703,7 @@ public void completed(ClientExchange result) {
 
                                         @Override
                                         protected void stringDone(String string) {
+                                            System.out.println("string = " + string);
                                             responses.add(string);
                                             latch.countDown();
                                         }

File: utility/src/test/java/com/networknt/utility/NioUtilsTest.java
Patch:
@@ -19,13 +19,13 @@ public void testTempDir() {
     @Test
     public void testList() throws IOException {
         URL url = Thread.currentThread().getContextClassLoader().getResource("rest.zip");
-        NioUtils.list(url.getPath());
+        NioUtils.list(url.getPath().toString().replace("/C:/","C:\\"));
     }
 
     @Test
     public void testUnzip() throws IOException {
         URL url = Thread.currentThread().getContextClassLoader().getResource("rest.zip");
-        NioUtils.unzip(url.getPath(), NioUtils.getTempDir());
+        NioUtils.unzip(url.getPath().toString().replace("/C:/","C:\\"), NioUtils.getTempDir());
     }
 
 }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -34,7 +34,6 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: mask/src/test/java/com/networknt/mask/MaskTest.java
Patch:
@@ -16,9 +16,7 @@
 
 package com.networknt.mask;
 
-import com.jsoniter.any.Any;
 import org.junit.Assert;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 public class MaskTest {

File: utility/src/test/java/com/networknt/utility/HashUtilTest.java
Patch:
@@ -17,15 +17,15 @@ public void testPasswordHash() throws Exception {
         String p = "123456";
         String hashedPass = HashUtil.generateStorngPasswordHash(p);
         System.out.println("hashedPass = " + hashedPass);
-        Assert.assertTrue(HashUtil.validatePassword(p, hashedPass));
+        Assert.assertTrue(HashUtil.validatePassword(p.toCharArray(), hashedPass));
     }
 
     @Test
     public void testClientSecretHash() throws Exception {
         String s = "f6h1FTI8Q3-7UScPZDzfXA";
         String hashedPass = HashUtil.generateStorngPasswordHash(s);
         System.out.println("hashedSecret = " + hashedPass);
-        Assert.assertTrue(HashUtil.validatePassword(s, hashedPass));
+        Assert.assertTrue(HashUtil.validatePassword(s.toCharArray(), hashedPass));
     }
 
 }

File: utility/src/main/java/com/networknt/utility/HashUtil.java
Patch:
@@ -109,14 +109,14 @@ private static String toHex(byte[] array) throws NoSuchAlgorithmException
         }
     }
 
-    public static boolean validatePassword(String originalPassword, String storedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException
+    public static boolean validatePassword(char[] originalPassword, String storedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException
     {
         String[] parts = storedPassword.split(":");
         int iterations = Integer.parseInt(parts[0]);
         byte[] salt = fromHex(parts[1]);
         byte[] hash = fromHex(parts[2]);
 
-        PBEKeySpec spec = new PBEKeySpec(originalPassword.toCharArray(), salt, iterations, hash.length * 8);
+        PBEKeySpec spec = new PBEKeySpec(originalPassword, salt, iterations, hash.length * 8);
         SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
         byte[] testHash = skf.generateSecret(spec).getEncoded();
 

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -64,7 +64,8 @@ public class JwtHelper {
     public static final String SECURITY_CONFIG = "security";
     public static final String JWT_CERTIFICATE = "certificate";
     public static final String JwT_CLOCK_SKEW_IN_SECONDS = "clockSkewInSeconds";
-
+    public static final String ENABLE_VERIFY_JWT = "enableVerifyJwt";
+    
     static Map<String, X509Certificate> certMap;
 
     static Map<String, Object> securityConfig = (Map)Config.getInstance().getJsonMapConfig(SECURITY_CONFIG);

File: consul/src/test/java/com/networknt/consul/ConsulRegistryTest.java
Patch:
@@ -136,7 +136,7 @@ public void notifyCommand(URL refUrl, String commandString) {
     public void discoverService() throws Exception {
         registry.doRegister(serviceUrl);
         List<URL> urls = registry.discoverService(serviceUrl);
-        Assert.assertFalse(urls.contains(serviceUrl));
+        Assert.assertNull(urls);
 
         registry.doAvailable(null);
         Thread.sleep(sleepTime);

File: utility/src/main/java/com/networknt/utility/CodeVerifierUtil.java
Patch:
@@ -78,9 +78,7 @@ public class CodeVerifierUtil {
      * @see "Proof Key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1
      * <https://tools.ietf.org/html/rfc7636#section-4.1>"
      */
-    private static final Pattern REGEX_CODE_VERIFIER =
-            Pattern.compile("^[0-9a-zA-Z\\-\\.\\_\\~]{43,128}$");
-
+    public static final Pattern VALID_CODE_CHALLENGE_PATTERN = Pattern.compile("^[0-9a-zA-Z\\-\\.~_]+$");
 
 
     /**

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -92,8 +92,8 @@ public MetricsHandler() {
         InetAddress inetAddress = Util.getInetAddress();
         commonTags.put("ipAddress", inetAddress.getHostAddress());
         commonTags.put("hostname", inetAddress.getHostName()); // will be container id if in docker.
-        commonTags.put("version", Util.getJarVersion());
 
+        //commonTags.put("version", Util.getJarVersion());
         //commonTags.put("frameworkVersion", Util.getFrameworkVersion());
         // TODO need to find a way to get env to put into the metrics.
     }
@@ -119,7 +119,7 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             if(auditInfo != null) {
                 Map<String, String> tags = new HashMap<>();
                 tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT));
-                tags.put("clientId", (String)auditInfo.get(Constants.CLIENT_ID));
+                tags.put("clientId", auditInfo.get(Constants.CLIENT_ID) != null ? (String)auditInfo.get(Constants.CLIENT_ID) : "unknown");
 
                 long time = Clock.defaultClock().getTick() - startTime;
                 MetricName metricName = new MetricName("response_time");

File: metrics/src/main/java/com/networknt/metrics/MetricsHandler.java
Patch:
@@ -20,6 +20,7 @@
 import com.networknt.config.Config;
 import com.networknt.handler.MiddlewareHandler;
 import com.networknt.server.Server;
+import com.networknt.utility.Constants;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.utility.Util;
 import io.dropwizard.metrics.Clock;
@@ -117,8 +118,8 @@ public void handleRequest(final HttpServerExchange exchange) throws Exception {
             Map<String, Object> auditInfo = exchange1.getAttachment(AuditHandler.AUDIT_INFO);
             if(auditInfo != null) {
                 Map<String, String> tags = new HashMap<>();
-                tags.put("endpoint", (String)auditInfo.get("endpoint"));
-                tags.put("clientId", (String)auditInfo.get("client_id"));
+                tags.put("endpoint", (String)auditInfo.get(Constants.ENDPOINT));
+                tags.put("clientId", (String)auditInfo.get(Constants.CLIENT_ID));
 
                 long time = Clock.defaultClock().getTick() - startTime;
                 MetricName metricName = new MetricName("response_time");

File: metrics/src/main/java/io/dropwizard/metrics/UnsafeLongAdderImpl.java
Patch:
@@ -48,7 +48,7 @@ final long fn(long v, long x) {
     /**
      * Creates a new adder with initial sum of zero.
      */
-    UnsafeLongAdderImpl() {
+    public UnsafeLongAdderImpl() {
     }
 
     /**

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbReporter.java
Patch:
@@ -119,6 +119,7 @@ public static Builder forRegistry(MetricRegistry registry) {
     public void report(final SortedMap<MetricName, Gauge> gauges, final SortedMap<MetricName, Counter> counters,
                        final SortedMap<MetricName, Histogram> histograms, final SortedMap<MetricName, Meter> meters, final SortedMap<MetricName, Timer> timers) {
         final long now = System.currentTimeMillis();
+        if(logger.isDebugEnabled()) logger.debug("InfluxDbReporter report is called with counter size " + counters.size());
         try {
             influxDb.flush();
 

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -30,6 +30,7 @@ public class Constants {
     public static final String SCOPE_CLIENT_ID = "scope_client_id";
     public static final String SCOPE = "scope";
     public static final String ENDPOINT = "endpoint";
+    public static final String SWAGGER_OPERATION = "swagger_operation";
 
     public static final String SCOPE_TOKEN = "X-Scope-Token";
     public static final String AUTHORIZATION = "Authorization";

File: client/src/main/java/com/networknt/client/oauth/AuthorizationCodeRequest.java
Patch:
@@ -37,14 +37,16 @@ public class AuthorizationCodeRequest extends TokenRequest {
     public AuthorizationCodeRequest() {
         setGrantType(AUTHORIZATION_CODE);
         Map<String, Object> clientConfig = Config.getInstance().getJsonMapConfig(Client.CONFIG_NAME);
+        // client_secret is in secret.yml instead of client.yml
+        Map<String, Object> secretConfig = Config.getInstance().getJsonMapConfig(Client.CONFIG_SECRET);
         if(clientConfig != null) {
             Map<String, Object> oauthConfig = (Map<String, Object>)clientConfig.get(OAUTH);
             if(oauthConfig != null) {
                 setServerUrl((String)oauthConfig.get(SERVER_URL));
                 Map<String, Object> acConfig = (Map<String, Object>) oauthConfig.get(AUTHORIZATION_CODE);
                 if(acConfig != null) {
                     setClientId((String)acConfig.get(CLIENT_ID));
-                    setClientSecret((String)acConfig.get(CLIENT_SECRET));
+                    setClientSecret((String)secretConfig.get(AUTHORIZATION_CODE_CLIENT_SECRET));
                     setUri((String)acConfig.get(URI));
                     setScope((List<String>)acConfig.get(SCOPE));
                     setRedirectUri((String)acConfig.get(REDIRECT_URI));

File: client/src/main/java/com/networknt/client/oauth/TokenRequest.java
Patch:
@@ -28,7 +28,8 @@ public class TokenRequest {
     public static String CLIENT_CREDENTIALS = "client_credentials";
     public static String URI = "uri";
     public static String CLIENT_ID = "client_id";
-    public static String CLIENT_SECRET = "client_secret";
+    public static String AUTHORIZATION_CODE_CLIENT_SECRET = "authorizationCodeClientSecret";
+    public static String CLIENT_CREDENTIALS_CLIENT_SECRET = "clientCredentialsClientSecret";
     public static String REDIRECT_URI = "redirect_uri";
     public static String SCOPE = "scope";
 

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -234,7 +234,7 @@ private static KeyStore loadKeyStore() {
         String name = config.getKeystoreName();
         try (InputStream stream = Config.getInstance().getInputStreamFromFile(name)) {
             KeyStore loadedKeystore = KeyStore.getInstance("JKS");
-            loadedKeystore.load(stream, ((String)secret.get("keystorePass")).toCharArray());
+            loadedKeystore.load(stream, ((String)secret.get("serverKeystorePass")).toCharArray());
             return loadedKeystore;
         } catch (Exception e) {
             logger.error("Unable to load keystore " + name, e);
@@ -246,7 +246,7 @@ protected static KeyStore loadTrustStore() {
         String name = config.getTruststoreName();
         try (InputStream stream = Config.getInstance().getInputStreamFromFile(name)) {
             KeyStore loadedKeystore = KeyStore.getInstance("JKS");
-            loadedKeystore.load(stream, ((String)secret.get("truststorePass")).toCharArray());
+            loadedKeystore.load(stream, ((String)secret.get("serverTruststorePass")).toCharArray());
             return loadedKeystore;
         } catch (Exception e) {
             logger.error("Unable to load truststore " + name, e);
@@ -291,7 +291,7 @@ private static KeyManager[] buildKeyManagers(final KeyStore keyStore, char[] key
 
     private static SSLContext createSSLContext() throws RuntimeException {
         try {
-            KeyManager[] keyManagers = buildKeyManagers(loadKeyStore(), ((String)secret.get("keyPass")).toCharArray());
+            KeyManager[] keyManagers = buildKeyManagers(loadKeyStore(), ((String)secret.get("serverKeyPass")).toCharArray());
             TrustManager[] trustManagers;
             if(config.isEnableTwoWayTls()) {
                 trustManagers = buildTrustManagers(loadTrustStore());

File: health/src/main/java/com/networknt/health/HealthGetHandler.java
Patch:
@@ -38,12 +38,12 @@
  *
  * @author Steve Hu
  */
-public class HealthHandler implements HttpHandler {
+public class HealthGetHandler implements HttpHandler {
     public static final String CONFIG_NAME = "health";
 
-    static final Logger logger = LoggerFactory.getLogger(HealthHandler.class);
+    static final Logger logger = LoggerFactory.getLogger(HealthGetHandler.class);
 
-    public HealthHandler(){}
+    public HealthGetHandler(){}
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {

File: health/src/test/java/com/networknt/health/HealthGetHandlerTest.java
Patch:
@@ -36,8 +36,8 @@
 /**
  * Created by steve on 01/09/16.
  */
-public class HealthHandlerTest {
-    static final Logger logger = LoggerFactory.getLogger(HealthHandlerTest.class);
+public class HealthGetHandlerTest {
+    static final Logger logger = LoggerFactory.getLogger(HealthGetHandlerTest.class);
 
     static Undertow server = null;
 
@@ -68,7 +68,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        return Handlers.routing().add(Methods.GET, "/server/health", new HealthHandler());
+        return Handlers.routing().add(Methods.GET, "/server/health", new HealthGetHandler());
     }
 
     @Test

File: mask/src/main/java/com/networknt/mask/Mask.java
Patch:
@@ -35,6 +35,8 @@
 
 /**
  * A utility to mask sensitive data based on regex pattern before logging
+ *
+ * @author Steve Hu
  */
 public class Mask {
 

File: registry/src/main/java/com/networknt/registry/DiscoveryService.java
Patch:
@@ -22,7 +22,6 @@
  * Discovery service.
  *
  * @author fishermen
- * @version V1.0 created at: 2013-5-16
  */
 
 public interface DiscoveryService {

File: registry/src/main/java/com/networknt/registry/NotifyListener.java
Patch:
@@ -22,7 +22,6 @@
  * Notify when service changed.
  *
  * @author fishermen
- * @version V1.0 created at: 2013-5-16
  */
 
 public interface NotifyListener {

File: registry/src/main/java/com/networknt/registry/Registry.java
Patch:
@@ -21,7 +21,6 @@
  * Used to register and discover.
  *
  * @author fishermen
- * @version V1.0 created at: 2013-5-28
  */
 public interface Registry extends RegistryService, DiscoveryService {
 

File: registry/src/main/java/com/networknt/registry/RegistryService.java
Patch:
@@ -22,7 +22,6 @@
  * Register service to Registry center.
  *
  * @author fishermen
- * @version V1.0 created at: 2013-5-16
  */
 
 public interface RegistryService {

File: registry/src/main/java/com/networknt/registry/URLImpl.java
Patch:
@@ -8,7 +8,9 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * Created by stevehu on 2017-01-17.
+ * Implementation of URL interface.
+ *
+ * @author Steve Hu
  */
 public class URLImpl implements URL {
     private String protocol;

File: registry/src/main/java/com/networknt/registry/support/AbstractRegistry.java
Patch:
@@ -31,13 +31,10 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * <pre>
  * Abstract registry。
  *
  * Use url createCopy to prevent object modification in multi-thread env
  *
- * </pre>
- *
  * @author fishermen
  */
 

File: sanitizer/src/main/java/com/networknt/sanitizer/SanitizerHandler.java
Patch:
@@ -19,7 +19,7 @@
  * This is a middleware component that sanitize cross site scripting tags in request. As potentially
  * sanitizing body of the request, this middleware must be plugged into the chain after body parser.
  *
- * Created by steve on 22/10/16.
+ * @author Steve Hu
  */
 public class SanitizerHandler implements MiddlewareHandler {
     public static final String CONFIG_NAME = "sanitizer";

File: security/src/main/java/com/networknt/security/JwtConfig.java
Patch:
@@ -17,7 +17,9 @@
 package com.networknt.security;
 
 /**
- * Created by steve on 01/09/16.
+ * Jwt Config class
+ *
+ * @author Steve Hu
  */
 public class JwtConfig {
     String issuer;

File: security/src/main/java/com/networknt/security/JwtMockHandler.java
Patch:
@@ -33,7 +33,7 @@
  * after it is started. Do not use it on production runtime. If you need an external
  * OAuth2 server, please take a look at https://github.com/networknt/light-oauth2
  *
- * Created by steve on 18/09/16.
+ * @author Steve Hu
  */
 public class JwtMockHandler implements HttpHandler {
 

File: security/src/main/java/com/networknt/security/inbound/MessageVerifier.java
Patch:
@@ -3,7 +3,9 @@
 import com.networknt.security.outbound.SignedMessage;
 
 /**
- * Created by steve on 10/04/17.
+ * Message Verifier interface
+ *
+ * @author Steve Hu
  */
 public interface MessageVerifier {
     VerifiedMessage verify(SignedMessage message);

File: security/src/main/java/com/networknt/security/inbound/VerifiedMessage.java
Patch:
@@ -1,7 +1,9 @@
 package com.networknt.security.inbound;
 
 /**
- * Created by steve on 10/04/17.
+ * Verified message
+ *
+ * @author Steve Hu
  */
 public interface VerifiedMessage {
 

File: security/src/main/java/com/networknt/security/outbound/Message.java
Patch:
@@ -1,7 +1,9 @@
 package com.networknt.security.outbound;
 
 /**
- * Created by steve on 10/04/17.
+ * Message interface
+ *
+ * @author Steve Hu
  */
 public interface Message {
     String getIssuer();

File: security/src/main/java/com/networknt/security/outbound/MessageSigner.java
Patch:
@@ -1,7 +1,9 @@
 package com.networknt.security.outbound;
 
 /**
- * Created by steve on 10/04/17.
+ * Message Signer
+ *
+ * @author Steve Hu
  */
 public interface MessageSigner {
     SignedMessage sign(Message message);

File: security/src/main/java/com/networknt/security/outbound/SignedMessage.java
Patch:
@@ -1,7 +1,9 @@
 package com.networknt.security.outbound;
 
 /**
- * Created by steve on 10/04/17.
+ * Signed Message
+ *
+ * @author Steve Hu
  */
 public interface SignedMessage {
     String getEnvelope();

File: server/src/main/java/com/networknt/server/JsonPathStartupHookProvider.java
Patch:
@@ -11,9 +11,10 @@
 import java.util.Set;
 
 /**
- * This is one of the startup hook to config JsonPath to use Jackson Parser
+ * This is one of the startup hook to config JsonPath to use Jackson Parser, if you are planning
+ * to use JsonPath, then you can put this into the startup hook config file.
  *
- * Created by steve on 2016-10-19.
+ * @author Steve Hu
  */
 public class JsonPathStartupHookProvider implements StartupHookProvider {
     @Override

File: switcher/src/main/java/com/networknt/switcher/LocalSwitcherService.java
Patch:
@@ -24,8 +24,9 @@
 import java.util.concurrent.ConcurrentMap;
 
 /**
+ * Local switcher service implementation
+ *
  * @author maijunsheng
- * @version 创建时间：2013-6-14
  *
  */
 public class LocalSwitcherService implements SwitcherService {

File: switcher/src/main/java/com/networknt/switcher/SwitcherListener.java
Patch:
@@ -1,7 +1,9 @@
 package com.networknt.switcher;
 
 /**
- * Created by axb on 16/4/25.
+ * A listener interface to get notified if switcher state is changed.
+ *
+ * @author axb
  */
 public interface SwitcherListener {
 

File: switcher/src/test/java/com/networknt/switcher/LocalSwitcherServiceTest.java
Patch:
@@ -22,9 +22,10 @@
 
 
 /**
+ * LocalSwitcherService test case.
+ *
  * @author maijunsheng
- * @version 创建时间：2013-6-17
- * 
+ *
  */
 public class LocalSwitcherServiceTest extends TestCase {
 

File: traceability/src/main/java/com/networknt/traceability/TraceabilityHandler.java
Patch:
@@ -32,12 +32,12 @@
  * response header if it exists.
  *
  * The traceability-id is set by the consumer and it will be passed to all services and returned
- * to the consumer eventually if there is no error. The SimpleAuditHandler will log it in audit log
+ * to the consumer eventually if there is no error. The AuditHandler will log it in audit log
  * and Client will pass it to the next service.
  *
- * Dependencies: SimpleAuditHandler/FullAuditHandler, Client
+ * Dependencies: AuditHandler, Client
  *
- * Created by steve on 05/11/16.
+ * @author Steve Hu
  */
 public class TraceabilityHandler implements MiddlewareHandler {
     static final Logger logger = LoggerFactory.getLogger(TraceabilityHandler.class);

File: utility/src/main/java/com/networknt/utility/CollectionUtil.java
Patch:
@@ -3,7 +3,9 @@
 import java.util.Collection;
 
 /**
- * Created by stevehu on 2017-01-09.
+ * Utility to deal with collection
+ *
+ * @author Steve Hu
  */
 public class CollectionUtil {
     @SuppressWarnings("rawtypes")

File: utility/src/main/java/com/networknt/utility/HashUtil.java
Patch:
@@ -17,7 +17,9 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
- * Created by stevehu on 2016-12-23.
+ * Utility to calculate hash values.
+ *
+ * @author Steve Hu
  */
 public class HashUtil {
     public static void main(String[] args) throws Exception

File: utility/src/main/java/com/networknt/utility/NioUtils.java
Patch:
@@ -22,7 +22,9 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
- * Created by steve on 26/04/17.
+ * NIO utility
+ *
+ * @author Steve Hu
  */
 public class NioUtils {
 

File: zookeeper/src/main/java/com/networknt/zookeeper/client/ZooKeeperClient.java
Patch:
@@ -9,7 +9,9 @@
 import java.util.List;
 
 /**
- * Created by stevehu on 2017-01-18.
+ * ZooKeeperClient interface
+ *
+ * @author Steve Hu
  */
 public interface ZooKeeperClient {
 

File: zookeeper/src/main/java/com/networknt/zookeeper/client/ZooKeeperClientImpl.java
Patch:
@@ -10,7 +10,9 @@
 import java.util.List;
 
 /**
- * Created by stevehu on 2017-01-18.
+ * ZooKeeperClient implementation.
+ *
+ * @author Steve Hu
  */
 public class ZooKeeperClientImpl implements ZooKeeperClient {
 

File: zookeeper/src/test/java/com/networknt/zookeeper/ZooKeeperRegistryTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 /**
- * Created by stevehu on 2017-01-11.
+ * @author Steve Hu
  */
 public class ZooKeeperRegistryTest {
     private static ZooKeeperRegistry registry;

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -34,12 +34,12 @@
 
 /**
  * This is a server info handler that output the runtime info about the server. For example, how many
- * components are installed and what is the cofiguration of each component. For handlers, it is registered
+ * components are installed and what is the configuration of each component. For handlers, it is registered
  * when injecting into the handler chain during server startup. For other utilities, it should have a
  * static block to register itself during server startup. Additional info is gathered from environment
  * variable and JVM.
  *
- * Created by steve on 17/09/16.
+ * @author Steve Hu
  */
 public class ServerInfoGetHandler implements HttpHandler {
     public static final String CONFIG_NAME = "info";

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -54,7 +54,6 @@ public static void setUp() throws Exception {
         // inject in memory constructed info.json to homeDir as classpath
         Config.getInstance().clear();
         Map<String, Object> map = new HashMap<>();
-        map.put("description", "server info config");
         map.put("enableServerInfo", false);
         Config.getInstance().getYaml().dump(map, new PrintWriter(new File(homeDir + "/info.yml")));
         // Add home directory to the classpath of the system class loader.

File: exception/src/main/java/com/networknt/exception/ClientException.java
Patch:
@@ -17,7 +17,9 @@
 package com.networknt.exception;
 
 /**
- * Created by steve on 02/09/16.
+ * This is a checked exception used by Client module.
+ *
+ * @author Steve Hu
  */
 public class ClientException extends Exception {
     private static final long serialVersionUID = 1L;

File: exception/src/main/java/com/networknt/exception/ExceptionConfig.java
Patch:
@@ -19,7 +19,9 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 
 /**
- * Created by steve on 29/09/16.
+ * Config class for Exception module to control the behavior
+ *
+ * @author  Steve Hu
  */
 public class ExceptionConfig {
     boolean enabled;

File: exception/src/main/java/com/networknt/exception/FrameworkException.java
Patch:
@@ -10,7 +10,7 @@
  * The FrameworkException will be handled by ExceptionHandler before the
  * exchange ends and a meaningful status will be returned to the consumer.
  *
- * Created by stevehu on 2017-01-09.
+ * @author Steve Hu
  */
 public class FrameworkException extends RuntimeException {
     private static final long serialVersionUID = 1L;

File: correlation/src/main/java/com/networknt/correlation/CorrelationHandler.java
Patch:
@@ -57,11 +57,14 @@ public CorrelationHandler() {
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {
+        // check if the cid is in the request header
         String cId = exchange.getRequestHeaders().getFirst(Constants.CORRELATION_ID);
         if(cId == null) {
+            // if not, generate a UUID and put it into the request header
             cId = Util.getUUID();
             exchange.getRequestHeaders().put(new HttpString(Constants.CORRELATION_ID), cId);
         }
+        // Add the cId into MDC so that all log statement will have cId as part of it.
         MDC.put(CID, cId);
         //logger.debug("Init cId:" + cId);
         next.handleRequest(exchange);

File: balance/src/main/java/com/networknt/balance/ConsistentHashLoadBalance.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.List;
 
 /**
- * To archive maximum scalability, microservices allow Y-Axis scale to break up big
- * monolithic application to small functional unit. However, for some of the heavy
+ * To obstain maximum scalability, microservices allow Y-Axis scale to break up big
+ * monolithic application to small functional units. However, for some of the heavy
  * load services, we can use data sharding for Z-Axis scale. This load balance is
  * designed for that.
  *

File: balance/src/main/java/com/networknt/balance/RoundRobinLoadBalance.java
Patch:
@@ -17,7 +17,7 @@
  *
  * The assumption for round robin is based on all service will have the same
  * hardware/cloud resource configuration so that they can be treated as the
- * same priority.
+ * same priority without any weight.
  *
  * Created by steve on 2016-12-07.
  */

File: body/src/main/java/com/networknt/body/BodyConfig.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.networknt.body;
 
-import com.fasterxml.jackson.annotation.JsonIgnore;
-
 /**
  * Created by steve on 29/09/16.
  */

File: balance/src/test/java/com/networknt/balance/LocalFirstLoadBalanceTest.java
Patch:
@@ -23,7 +23,7 @@ public void testSelect() throws Exception {
         urls.add(new URLImpl("http", "127.0.0.11", 8082, "v1", new HashMap<String, String>()));
         urls.add(new URLImpl("http", "127.0.0.12", 8083, "v1", new HashMap<String, String>()));
         urls.add(new URLImpl("http", "127.0.0.115", 8084, "v1", new HashMap<String, String>()));
-        URL url = loadBalance.select(urls);
+        URL url = loadBalance.select(urls, null);
         Assert.assertEquals(url, URLImpl.valueOf("http://127.0.0.1:8081/v1"));
     }
     
@@ -36,14 +36,14 @@ public void testSelectFirstThenRoundRobin() throws Exception{
         urls.add(new URLImpl("http", "127.0.0.10", 8084, "v1", new HashMap<String, String>()));
 
         // no local host URL available, go round-robin
-        URL url = loadBalance.select(urls);
+        URL url = loadBalance.select(urls, null);
         Assert.assertEquals(url, URLImpl.valueOf("http://127.0.0.10:8082/v1"));
     }
     
     @Test
     public void testSelectWithEmptyList() throws Exception {
         List<URL> urls = new ArrayList<>();
-        URL url = loadBalance.select(urls);
+        URL url = loadBalance.select(urls, null);
         Assert.assertNull(url);
     }
 }

File: cluster/src/test/java/com/networknt/cluster/LightClusterTest.java
Patch:
@@ -14,10 +14,10 @@ public class LightClusterTest {
 
     @Test
     public void testLightCluster() {
-        String s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0");
+        String s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0", null);
         Assert.assertEquals(s, "http://localhost:7005");
 
-        s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0");
+        s = cluster.serviceToUrl("http", "com.networknt.apib-1.0.0", null);
         Assert.assertEquals(s, "http://localhost:7002");
     }
 }

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -40,15 +40,15 @@
  *
  * Config files are loaded in the following sequence:
  * 1. resources/config folder for the default
- * 2. externalized directory specified by light-java-config-dir
+ * 2. externalized directory specified by light-4j-config-dir
  *
  * In docker, the config files should be in volume and any update will
  * be picked up the next day morning.
  *
  *
  */
 public abstract class Config {
-    public static final String LIGHT_JAVA_CONFIG_DIR = "light-java-config-dir";
+    public static final String LIGHT_4J_CONFIG_DIR = "light-4j-config-dir";
 
     protected Config() {
     }
@@ -83,7 +83,7 @@ private static final class FileConfigImpl extends Config {
 
         static final XLogger logger = XLoggerFactory.getXLogger(Config.class);
 
-        public final String EXTERNALIZED_PROPERTY_DIR = System.getProperty(LIGHT_JAVA_CONFIG_DIR, "");
+        public final String EXTERNALIZED_PROPERTY_DIR = System.getProperty(LIGHT_4J_CONFIG_DIR, "");
 
         private long cacheExpirationTime = 0L;
 

File: config/src/test/java/com/networknt/config/ConfigPropertyPathTest.java
Patch:
@@ -29,7 +29,7 @@ public class ConfigPropertyPathTest extends TestCase {
     @Override
     public void setUp() throws Exception {
         super.setUp();
-        System.setProperty("light-java-config-dir", homeDir);
+        System.setProperty("light-4j-config-dir", homeDir);
 
         Config config = Config.getInstance();
 

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -314,9 +314,9 @@ private static void loadConfig() {
         String configUri = System.getProperty(LIGHT_CONFIG_SERVER_URI);
         if(configUri != null) {
             // try to get config files from the server.
-            String targetMergeDirectory = System.getProperty(Config.LIGHT_JAVA_CONFIG_DIR);
+            String targetMergeDirectory = System.getProperty(Config.LIGHT_4J_CONFIG_DIR);
             if(targetMergeDirectory == null) {
-                logger.warn("Warning! No light-java-config-dir has been passed in from command line.");
+                logger.warn("Warning! No light-4j-config-dir has been passed in from command line.");
                 return;
             }
             String version = Util.getJarVersion();

File: utility/src/main/java/com/networknt/utility/Util.java
Patch:
@@ -85,7 +85,7 @@ public static InetAddress getInetAddress() {
 
     public static String getJarVersion() {
         String path = Util.class.getProtectionDomain().getCodeSource().getLocation().getPath();
-        //String path = "/Users/stevehu/project/light-java-example/petstore/target/swagger-light-server-1.0.0.jar";
+        //String path = "/Users/stevehu/project/light-example-4j/petstore/target/swagger-light-server-1.0.0.jar";
         logger.debug("path = " + path);
         String ver = null;
         if(path.endsWith(".jar")) {
@@ -103,7 +103,7 @@ public static String getFrameworkVersion() {
         Class clazz = Util.class;
         URL location = clazz.getResource('/' + clazz.getName().replace('.', '/') + ".class");
         System.out.println("location = " + location);
-        //location = jar:file:/Users/stevehu/project/light-java-example/petstore/target/swagger-light-server-1.0.0.jar!/com/networknt/utility/Util.class
+        //location = jar:file:/Users/stevehu/project/light-example-4j/petstore/target/swagger-light-server-1.0.0.jar!/com/networknt/utility/Util.class
         return location.toString();
     }
 

File: status/src/test/java/com/networknt/status/StatusTest.java
Patch:
@@ -44,7 +44,7 @@ public void testToString() {
     public void testToStringWithArgs() {
         Status status = new Status("ERR11000", "parameter name", "original url");
         System.out.println(status);
-        Assert.assertEquals("{\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter 'parameter name' is required on path 'original url' but not found in request.\"}", status.toString());
+        Assert.assertEquals("{\"statusCode\":400,\"code\":\"ERR11000\",\"message\":\"VALIDATOR_REQUEST_PARAMETER_QUERY_MISSING\",\"description\":\"Query parameter parameter name is required on path original url but not found in request.\"}", status.toString());
     }
 
     @Test

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -87,7 +87,7 @@ public static String getJwt(JwtClaims claims) throws JoseException {
 
         // Set the signature algorithm on the JWT/JWS that will integrity protect the claims
         jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);
-        jws.setHeader(KID, jwtConfig.getKey().getKid());
+
         // Sign the JWS and produce the compact serialization, which will be the inner JWT/JWS
         // representation, which is a string consisting of three dot ('.') separated
         // base64url-encoded parts in the form Header.Payload.Signature

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -87,7 +87,7 @@ public static String getJwt(JwtClaims claims) throws JoseException {
 
         // Set the signature algorithm on the JWT/JWS that will integrity protect the claims
         jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);
-
+        jws.setHeader(KID, jwtConfig.getKey().getKid());
         // Sign the JWS and produce the compact serialization, which will be the inner JWT/JWS
         // representation, which is a string consisting of three dot ('.') separated
         // base64url-encoded parts in the form Header.Payload.Signature

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.http.impl.client.HttpClientBuilder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.slf4j.MDC;
 import org.xnio.Options;
 
 import javax.net.ssl.*;
@@ -158,12 +159,12 @@ static public void start() {
         server = builder
                 .setBufferSize(1024 * 16)
                 .setIoThreads(Runtime.getRuntime().availableProcessors() * 2) //this seems slightly faster in some configurations
+                .setServerOption(UndertowOptions.ENABLE_HTTP2, true)
                 .setSocketOption(Options.BACKLOG, 10000)
                 .setServerOption(UndertowOptions.ALWAYS_SET_KEEP_ALIVE, false) //don't send a keep-alive header for HTTP/1.1 requests, as it is not required
                 .setServerOption(UndertowOptions.ALWAYS_SET_DATE, true)
                 .setServerOption(UndertowOptions.RECORD_REQUEST_START_TIME, false)
-                .setHandler(Handlers.header(handler,
-                        Headers.SERVER_STRING, "L"))
+                .setHandler(Handlers.header(handler, Headers.SERVER_STRING, "L"))
                 .setWorkerThreads(200)
                 .build();
         server.start();

File: info/src/main/java/com/networknt/info/ServerInfoGetHandler.java
Patch:
@@ -41,14 +41,14 @@
  *
  * Created by steve on 17/09/16.
  */
-public class ServerInfoHandler implements HttpHandler {
+public class ServerInfoGetHandler implements HttpHandler {
     public static final String CONFIG_NAME = "info";
 
     static final String STATUS_SERVER_INFO_DISABLED = "ERR10013";
 
-    static final Logger logger = LoggerFactory.getLogger(ServerInfoHandler.class);
+    static final Logger logger = LoggerFactory.getLogger(ServerInfoGetHandler.class);
 
-    public ServerInfoHandler(){}
+    public ServerInfoGetHandler(){}
 
     @Override
     public void handleRequest(final HttpServerExchange exchange) throws Exception {

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -42,7 +42,7 @@
  * Created by steve on 01/10/16.
  */
 public class ServerInfoDisabledTest {
-    static final Logger logger = LoggerFactory.getLogger(ServerInfoHandlerTest.class);
+    static final Logger logger = LoggerFactory.getLogger(ServerInfoGetHandlerTest.class);
 
     static Undertow server = null;
     static String homeDir = System.getProperty("user.home");
@@ -98,7 +98,7 @@ static void addURL(URL url) throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        return Handlers.routing().add(Methods.GET, "/v1/server/info", new ServerInfoHandler());
+        return Handlers.routing().add(Methods.GET, "/v1/server/info", new ServerInfoGetHandler());
     }
 
     @Test

File: info/src/test/java/com/networknt/info/ServerInfoGetHandlerTest.java
Patch:
@@ -36,8 +36,8 @@
 /**
  * Created by steve on 01/09/16.
  */
-public class ServerInfoHandlerTest {
-    static final Logger logger = LoggerFactory.getLogger(ServerInfoHandlerTest.class);
+public class ServerInfoGetHandlerTest {
+    static final Logger logger = LoggerFactory.getLogger(ServerInfoGetHandlerTest.class);
 
     static Undertow server = null;
 
@@ -68,7 +68,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        return Handlers.routing().add(Methods.GET, "/server/info", new ServerInfoHandler());
+        return Handlers.routing().add(Methods.GET, "/server/info", new ServerInfoGetHandler());
     }
 
     @Test

File: cors/src/test/main/java/com/networknt/cors/CorsHttpHandlerTest.java
Patch:
@@ -113,6 +113,7 @@ public void testOptionsCorrectOrigin() throws Exception {
             CloseableHttpResponse response = client.execute(httpOptions);
             int statusCode = response.getStatusLine().getStatusCode();
             String body = IOUtils.toString(response.getEntity().getContent(), "utf8");
+            Header[] headers = response.getAllHeaders();
             Header header = response.getFirstHeader("Access-Control-Allow-Origin");
             Assert.assertEquals(200, statusCode);
             if(statusCode == 200) {

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -65,7 +65,7 @@ public class Server {
 
     public static void main(final String[] args) {
         logger.info("server starts");
-        // setup system property to redirect logs to logback.
+        // setup system property to redirect logs to slf4j/logback.
         System.setProperty("org.jboss.logging.provider", "slf4j");
         start();
     }

File: metrics/src/main/java/io/dropwizard/metrics/MetricRegistry.java
Patch:
@@ -85,7 +85,6 @@ protected MetricRegistry(ConcurrentMap<MetricName, Metric> metricsMap) {
      * @param name name
      * @param metric metric
      * @return {@code metric}
-     * @exception IllegalAccessException illegal access exception
      * @see #register(MetricName, Metric)
      */
     @SuppressWarnings("unchecked")

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -65,6 +65,8 @@ public class Server {
 
     public static void main(final String[] args) {
         logger.info("server starts");
+        // setup system property to redirect logs to logback.
+        System.setProperty("org.jboss.logging.provider", "slf4j");
         start();
     }
 

File: cluster/src/main/java/com/networknt/cluster/LightCluster.java
Patch:
@@ -53,7 +53,7 @@ public String serviceToUrl(String protocol, String serviceName) {
         return protocol + "://" + url.getHost() + ":" + url.getPort();
     }
 
-    class ClusterNotifyListener implements NotifyListener {
+    static class ClusterNotifyListener implements NotifyListener {
         @Override
         public void notify(URL registryUrl, List<URL> urls) {
             if(logger.isDebugEnabled()) logger.debug("notify is called in ClusterNotifyListener registryUrl = " + registryUrl + " urls = " + urls);

File: cors/src/main/java/com/networknt/cors/CorsUtil.java
Patch:
@@ -54,7 +54,7 @@ public static boolean isCoreRequest(HeaderMap headers) {
      * @param exchange the current HttpExchange.
      * @param allowedOrigins list of sanitized allowed origins.
      * @return the first matching origin, null otherwise.
-     * @throws Exception
+     * @throws Exception the checked exception
      */
     public static String matchOrigin(HttpServerExchange exchange, Collection<String> allowedOrigins) throws Exception {
         HeaderMap headers = exchange.getRequestHeaders();

File: metrics/src/main/java/io/dropwizard/metrics/MetricRegistry.java
Patch:
@@ -85,6 +85,7 @@ protected MetricRegistry(ConcurrentMap<MetricName, Metric> metricsMap) {
      * @param name name
      * @param metric metric
      * @return {@code metric}
+     * @exception IllegalAccessException illegal access exception
      * @see #register(MetricName, Metric)
      */
     @SuppressWarnings("unchecked")

File: server/src/main/java/com/networknt/server/DummyTrustManager.java
Patch:
@@ -8,13 +8,16 @@
  */
 public class DummyTrustManager implements X509TrustManager {
 
+    @Override
     public X509Certificate[] getAcceptedIssuers() {
         return new X509Certificate[] {};
     }
 
+    @Override
     public void checkClientTrusted(X509Certificate[] certs, String authType) {
     }
 
+    @Override
     public void checkServerTrusted(X509Certificate[] certs, String authType) {
     }
 }

File: service/src/test/java/com/networknt/service/MImpl.java
Patch:
@@ -11,7 +11,7 @@ public MImpl(String name, int v1, int v2) {
         this.name = name;
         value = v1 + v2;
     }
-
+    @Override
     public int getValue() {
         return value;
     }

File: zookeeper/src/main/java/com/networknt/zookeeper/client/ZooKeeperClient.java
Patch:
@@ -27,8 +27,10 @@ public interface ZooKeeperClient {
 
     List<String> getChildren(String path);
 
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     <T> T readData(String path);
 
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     <T> T readData(String path, boolean returnNullIfPathNotExists);
 
     void writeData(String path, Object object);

File: zookeeper/src/main/java/com/networknt/zookeeper/client/ZooKeeperClientImpl.java
Patch:
@@ -84,11 +84,13 @@ public List<String> getChildren(String path) {
     }
 
     @Override
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     public <T> T readData(String path) {
         return zkClient.readData(path);
     }
 
     @Override
+    @SuppressWarnings("TypeParameterUnusedInFormals")
     public <T> T readData(String path, boolean returnNullIfPathNotExists) {
         return zkClient.readData(path, returnNullIfPathNotExists);
     }

File: consul/src/main/java/com/networknt/consul/ConsulRegistry.java
Patch:
@@ -184,7 +184,7 @@ protected void unsubscribeCommand(URL url, CommandListener listener) {
     protected List<URL> discoverService(URL url) {
         String service = ConsulUtils.getUrlClusterInfo(url);
         String group = url.getGroup();
-        List<URL> serviceUrls = new ArrayList<URL>();
+        List<URL> serviceUrls = new ArrayList<>();
         ConcurrentHashMap<String, List<URL>> serviceMap = serviceCache.get(group);
         if (serviceMap == null) {
             synchronized (group.intern()) {

File: consul/src/main/java/com/networknt/consul/ConsulUtils.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.consul;
 
+import com.networknt.registry.URLImpl;
 import com.networknt.utility.Constants;
 import com.networknt.registry.URLParamType;
 import com.networknt.registry.URL;
@@ -62,7 +63,7 @@ public static URL buildUrl(ConsulService service) {
         for (String tag : service.getTags()) {
             if (tag.startsWith(ConsulConstants.CONSUL_TAG_LIGHT_URL)) {
                 String encodeUrl = tag.substring(tag.indexOf("_") + 1);
-                url = URL.valueOf(Util.urlDecode(encodeUrl));
+                url = URLImpl.valueOf(Util.urlDecode(encodeUrl));
             }
         }
         if (url == null) {
@@ -71,7 +72,7 @@ public static URL buildUrl(ConsulService service) {
             params.put(URLParamType.group.getName(), group);
             params.put(URLParamType.nodeType.getName(), Constants.NODE_TYPE_SERVICE);
             String protocol = ConsulUtils.getProtocolFromTag(service.getTags().get(0));
-            url = new URL(protocol, service.getAddress(), service.getPort(),
+            url = new URLImpl(protocol, service.getAddress(), service.getPort(),
                     ConsulUtils.getPathFromServiceId(service.getId()), params);
         }
         return url;

File: consul/src/test/java/com/networknt/consul/ConsulRegistryTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.consul;
 
+import com.networknt.registry.URLImpl;
 import com.networknt.registry.URLParamType;
 import com.networknt.registry.support.command.CommandListener;
 import com.networknt.registry.support.command.ServiceListener;
@@ -23,7 +24,7 @@ public class ConsulRegistryTest {
     @Before
     public void setUp() throws Exception {
         client = new MockConsulClient("localhost", 8500);
-        registerUrl = new URL("light", "localhost", 8500, "");
+        registerUrl = new URLImpl("light", "localhost", 8500, "");
         registerUrl.addParameter(URLParamType.registrySessionTimeout.getName(), "" + interval);
         registry = new ConsulRegistry(registerUrl, client);
 

File: consul/src/test/java/com/networknt/consul/ConsulUtilsTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.networknt.consul;
 
 import com.networknt.registry.URL;
+import com.networknt.registry.URLImpl;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -32,7 +33,7 @@ public void setUp() throws Exception {
         testHost = "127.0.0.1";
         testPort = 8888;
         testProtocol = "light";
-        url = new URL(testProtocol, testHost, testPort, testPath);
+        url = new URLImpl(testProtocol, testHost, testPort, testPath);
         testServiceId = testHost + ":" + testPort + "-" + testPath;
         testServiceTag = ConsulConstants.CONSUL_TAG_LIGHT_PROTOCOL + ":" + testProtocol;
     }

File: consul/src/test/java/com/networknt/consul/MockUtils.java
Patch:
@@ -1,5 +1,6 @@
 package com.networknt.consul;
 
+import com.networknt.registry.URLImpl;
 import com.networknt.registry.URLParamType;
 import com.networknt.registry.URL;
 
@@ -46,7 +47,7 @@ public static URL getMockUrl(String address, int port) {
         Map<String, String> params = new HashMap<>();
         params.put(URLParamType.group.getName(), group);
         params.put(URLParamType.protocol.getName(), protocol);
-        URL url = new URL(protocol, address, port, path, params);
+        URL url = new URLImpl(protocol, address, port, path, params);
         return url;
     }
 

File: registry/src/main/java/com/networknt/registry/support/command/CommandServiceManager.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Pattern;
 
+import com.networknt.registry.URLImpl;
 import com.networknt.status.Status;
 import org.apache.commons.lang3.StringUtils;
 
@@ -291,7 +292,7 @@ private List<URL> mergeResult(URL url, Map<String, Integer> weights) {
 
         if (weights.size() > 1) {
             // construct a rule url with all groups and added as first
-            URL ruleUrl = new URL("rule", url.getHost(), url.getPort(), url.getPath());
+            URL ruleUrl = new URLImpl("rule", url.getHost(), url.getPort(), url.getPath());
             StringBuilder weightsBuilder = new StringBuilder(64);
             for (Map.Entry<String, Integer> entry : weights.entrySet()) {
                 weightsBuilder.append(entry.getKey()).append(':').append(entry.getValue()).append(',');

File: client/src/main/java/com/networknt/client/Client.java
Patch:
@@ -273,7 +273,7 @@ public void propagateHeaders(HttpRequest request, final HttpServerExchange excha
      * @param correlationId the correlation id
      * @param traceabilityId the traceability id
      * @throws ClientException client exception
-     * @throws ApiException api exception 
+     * @throws ApiException api exception
      */
     public void populateHeader(HttpRequest request, String authToken, String correlationId, String traceabilityId) throws ClientException, ApiException {
         if(traceabilityId != null) {

File: balance/src/main/java/com/networknt/balance/LocalFirstLoadBalance.java
Patch:
@@ -24,7 +24,7 @@ public class LocalFirstLoadBalance extends RoundRobinLoadBalance {
         // get hostname for this IP address
         hostname = inetAddress.getHostName();
     }
-    
+    @Override
     protected URL doSelect(List<URL> urls) {
     	// search for a URL in the same host first
     	for(URL url : urls){

File: balance/src/main/java/com/networknt/balance/RoundRobinLoadBalance.java
Patch:
@@ -15,6 +15,7 @@ public class RoundRobinLoadBalance implements LoadBalance {
 
     private AtomicInteger idx = new AtomicInteger(0);
 
+    @Override
     public URL select(List<URL> urls) {
         URL url = null;
         if (urls.size() > 1) {

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -100,6 +100,7 @@ public ObjectMapper getMapper() {
             return mapper;
         }
 
+        @Override
         public void clear() {
             configCache.clear();
         }

File: config/src/test/java/com/networknt/config/ConfigClassPathTest.java
Patch:
@@ -34,6 +34,7 @@ public class ConfigClassPathTest extends TestCase {
     Config config = null;
     final String homeDir = System.getProperty("user.home");
 
+    @Override
     public void setUp() throws Exception {
         super.setUp();
 
@@ -48,6 +49,7 @@ public void setUp() throws Exception {
         addURL(new File(homeDir).toURI().toURL());
     }
 
+    @Override
     public void tearDown() throws Exception {
         // Remove the test.json from home directory
         File test = new File(homeDir + "/test.json");

File: config/src/test/java/com/networknt/config/ConfigDefaultTest.java
Patch:
@@ -28,11 +28,14 @@
  */
 public class ConfigDefaultTest extends TestCase {
     Config config = null;
+
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         config = Config.getInstance();
     }
 
+    @Override
     public void tearDown() throws Exception {
         super.tearDown();
     }

File: config/src/test/java/com/networknt/config/ConfigPropertyPathTest.java
Patch:
@@ -26,6 +26,7 @@
 public class ConfigPropertyPathTest extends TestCase {
     final String homeDir = System.getProperty("user.home");
 
+    @Override
     public void setUp() throws Exception {
         super.setUp();
         System.setProperty("light-java-config-dir", homeDir);
@@ -38,6 +39,7 @@ public void setUp() throws Exception {
         config.getMapper().writeValue(new File(homeDir + "/test.json"), map);
     }
 
+    @Override
     public void tearDown() throws Exception {
         File test = new File(homeDir + "/test.json");
         test.delete();

File: metrics/src/main/java/io/dropwizard/metrics/EWMA.java
Patch:
@@ -83,7 +83,7 @@ public void update(long n) {
     /**
      * Mark the passage of time and decay the current rate accordingly.
      */
-    public void tick() {
+    public synchronized void tick() {
         final long count = uncounted.sumThenReset();
         final double instantRate = count / interval;
         if (initialized) {

File: metrics/src/main/java/io/dropwizard/metrics/LongAdderFactory.java
Patch:
@@ -45,7 +45,7 @@ private static boolean isClassLoaded(String className, boolean canInitialize) {
 
         if (canInitialize) {
             try {
-                clazz.newInstance();
+                clazz.getConstructor().newInstance();
             } catch (Throwable t) {
                 LOG.info("Unable to instantiate class {}", className, t);
                 return false;

File: metrics/src/main/java/io/dropwizard/metrics/ScheduledReporter.java
Patch:
@@ -17,7 +17,6 @@
  * metrics periodically).
  *
  * @see ConsoleReporter
- * @see CsvReporter
  * @see Slf4jReporter
  */
 public abstract class ScheduledReporter implements Closeable, Reporter {
@@ -85,6 +84,8 @@ protected ScheduledReporter(MetricRegistry registry,
      * @param registry the {@link io.dropwizard.metrics.MetricRegistry} containing the metrics this
      *                 reporter will report
      * @param filter   the filter for which metrics to report
+     * @param rateUnit the rate unit
+     * @param durationUnit the duration unit
      * @param executor the executor to use while scheduling reporting of metrics.
      */
     protected ScheduledReporter(MetricRegistry registry,

File: metrics/src/main/java/io/dropwizard/metrics/Slf4jReporter.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * A reporter class for logging metrics values to a SLF4J {@link Logger} periodically, similar to
- * {@link ConsoleReporter} or {@link CsvReporter}, but using the SLF4J framework instead. It also
+ * {@link ConsoleReporter}, but using the SLF4J framework instead. It also
  * supports specifying a {@link Marker} instance that can be used by custom appenders and filters
  * for the bound logging toolkit to further process metrics reports.
  */

File: security/src/main/java/com/networknt/security/JwtConfig.java
Patch:
@@ -81,7 +81,7 @@ public void setKey(Key key) {
         this.key = key;
     }
 
-    public class Key {
+    public static class Key {
         String kid;
         String filename;
         String password;

File: security/src/main/java/com/networknt/security/JwtMockHandler.java
Patch:
@@ -41,6 +41,7 @@ public class JwtMockHandler implements HttpHandler {
 
     public JwtMockHandler() {}
 
+    @Override
     public void handleRequest(HttpServerExchange exchange) throws Exception {
         exchange.getResponseHeaders().put(
                 Headers.CONTENT_TYPE, "application/json");

File: server/src/main/java/com/networknt/server/JsonPathStartupHookProvider.java
Patch:
@@ -16,6 +16,7 @@
  * Created by steve on 2016-10-19.
  */
 public class JsonPathStartupHookProvider implements StartupHookProvider {
+    @Override
     public void onStartup() {
         configJsonPath();
     }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -115,6 +115,7 @@ static public void shutdown() {
 
     static protected void addDaemonShutdownHook() {
         Runtime.getRuntime().addShutdownHook(new Thread() {
+            @Override
             public void run() {
                 Server.shutdown();
             }

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -210,7 +210,7 @@ public static Object construct(Class clazz) throws Exception {
             return instance;
         } else {
             if(hasDefaultConstructor) {
-                return clazz.newInstance();
+                return clazz.getConstructor().newInstance();
             } else {
                 // error that no instance can be created.
                 throw new Exception("No instance can be created for class " + clazz);

File: service/src/test/java/com/networknt/service/AImpl.java
Patch:
@@ -4,6 +4,7 @@
  * Created by steve on 2016-11-26.
  */
 public class AImpl implements A {
+    @Override
     public String a() {
         return "a real";
     }

File: service/src/test/java/com/networknt/service/BImpl.java
Patch:
@@ -4,6 +4,7 @@
  * Created by steve on 2016-11-26.
  */
 public class BImpl implements B {
+    @Override
     public String b() {
         return "b real";
     }

File: service/src/test/java/com/networknt/service/BTestImpl.java
Patch:
@@ -4,6 +4,7 @@
  * Created by steve on 2016-11-26.
  */
 public class BTestImpl implements B {
+    @Override
     public String b() {
         return "b test";
     }

File: service/src/test/java/com/networknt/service/CImpl.java
Patch:
@@ -12,6 +12,7 @@ public CImpl(A a, B b) {
         this.b = b;
     }
 
+    @Override
     public String c() {
         return a.a() + b.b();
     }

File: service/src/test/java/com/networknt/service/DImpl.java
Patch:
@@ -4,8 +4,10 @@
  * Created by steve on 2016-11-28.
  */
 public class DImpl implements D1, D2 {
+    @Override
     public String d1() {
         return "d1";
     }
+    @Override
     public String d2() { return "d2"; }
 }

File: service/src/test/java/com/networknt/service/EF1Impl.java
Patch:
@@ -4,9 +4,11 @@
  * Created by steve on 2016-11-28.
  */
 public class EF1Impl implements E, F {
+    @Override
     public String e() {
         return "e1";
     }
+    @Override
     public String f() {
         return "f1";
     }

File: service/src/test/java/com/networknt/service/EF2Impl.java
Patch:
@@ -4,9 +4,11 @@
  * Created by steve on 2016-11-28.
  */
 public class EF2Impl implements E, F {
+    @Override
     public String e() {
         return "e2";
     }
+    @Override
     public String f() {
         return "f2";
     }

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -29,13 +29,15 @@
 import org.jose4j.jwt.consumer.JwtContext;
 import org.jose4j.jwx.JsonWebStructure;
 import org.jose4j.keys.resolvers.X509VerificationKeyResolver;
+import org.jose4j.lang.JoseException;
 import org.owasp.encoder.Encode;
 import org.slf4j.ext.XLogger;
 import org.slf4j.ext.XLoggerFactory;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.security.KeyStore;
+import java.security.NoSuchAlgorithmException;
 import java.security.PrivateKey;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
@@ -66,7 +68,7 @@ public class JwtHelper {
     static Map<String, Object> securityJwtConfig = (Map)securityConfig.get(JWT_CONFIG);
     static JwtConfig jwtConfig = (JwtConfig) Config.getInstance().getJsonObjectConfig(JWT_CONFIG, JwtConfig.class);
 
-    public static String getJwt(JwtClaims claims) throws Exception {
+    public static String getJwt(JwtClaims claims) throws JoseException {
         String jwt;
         RSAPrivateKey privateKey = (RSAPrivateKey) getPrivateKey(
                 jwtConfig.getKey().getFilename(), jwtConfig.getKey().getPassword(), jwtConfig.getKey().getKeyName());

File: metrics/src/main/java/io/dropwizard/metrics/JmxReporter.java
Patch:
@@ -501,7 +501,7 @@ private JmxListener(MBeanServer mBeanServer, String name, MetricFilter filter, M
             this.objectNameFactory = objectNameFactory;
         }
 
-        private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {
+        private void registerMBean(Object mBean, ObjectName objectName) throws JMException {
             ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);
             if (objectInstance != null) {
                 // the websphere mbeanserver rewrites the objectname to include

File: service/src/main/java/com/networknt/service/SingletonServiceFactory.java
Patch:
@@ -42,7 +42,7 @@ public class SingletonServiceFactory {
         }
     }
 
-    public static void handleSingleImpl(List<Class> interfaceClasses, List<Object> value) throws ClassNotFoundException, Exception {
+    public static void handleSingleImpl(List<Class> interfaceClasses, List<Object> value) throws Exception {
         Object object = value.get(0);
         if(object instanceof String) {
             Class implClass = Class.forName((String)object);
@@ -91,7 +91,7 @@ public static void handleSingleImpl(List<Class> interfaceClasses, List<Object> v
         }
     }
 
-    public static void handleMultipleImpl(List<Class> interfaceClasses, List<Object> value) throws ClassNotFoundException, Exception {
+    public static void handleMultipleImpl(List<Class> interfaceClasses, List<Object> value) throws Exception {
 
         List<Object> arrays = interfaceClasses.stream().map(c -> Array.newInstance(c, value.size())).collect(Collectors.toList());
         for(int i = 0; i < value.size(); i++) {

File: exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java
Patch:
@@ -72,7 +72,7 @@ public static void tearDown() throws Exception {
         }
     }
 
-    @SuppressWarnings("NumericOverflow")
+    @SuppressWarnings("ConstantOverflow")
     static RoutingHandler getTestHandler() {
         return Handlers.routing()
                 .add(Methods.GET, "/normal", exchange -> exchange.getResponseSender().send("normal"))

File: metrics/src/test/java/io/dropwizard/metrics/MetricNameTest.java
Patch:
@@ -84,7 +84,6 @@ public void testCompareTo() {
 
         assertThat(a.compareTo(b)).isLessThan(0);
         assertThat(b.compareTo(a)).isGreaterThan(0);
-        assertThat(b.compareTo(b)).isEqualTo(0);
         assertThat(b.resolve("key").compareTo(b)).isLessThan(0);
         assertThat(b.compareTo(b.resolve("key"))).isGreaterThan(0);
     }

File: audit/src/main/java/com/networknt/audit/AuditHandler.java
Patch:
@@ -70,11 +70,11 @@ public class AuditHandler implements MiddlewareHandler {
         config = Config.getInstance().getJsonMapConfigNoCache(CONFIG_NAME);
         headerList = (List<String>)config.get(HEADERS);
         Object object = config.get(STATUS_CODE);
-        if(object != null && (Boolean)object == true) {
+        if(object != null && (Boolean) object) {
             statusCode = true;
         }
         object = config.get(RESPONSE_TIME);
-        if(object != null && (Boolean)object == true) {
+        if(object != null && (Boolean) object) {
             responseTime = true;
         }
     }
@@ -127,7 +127,7 @@ public MiddlewareHandler setNext(final HttpHandler next) {
     @Override
     public boolean isEnabled() {
         Object object = config.get(ENABLED);
-        return object != null && (Boolean)object == true;
+        return object != null && (Boolean) object;
     }
 
     @Override

File: audit/src/test/java/com/networknt/audit/AuditHandlerTest.java
Patch:
@@ -92,13 +92,12 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.POST, "/pet", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("OK");
                     }
                 });
-        return handler;
     }
 
     @Test

File: body/src/test/java/com/networknt/body/BodyHandlerTest.java
Patch:
@@ -80,7 +80,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/get", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         Object body = exchange.getAttachment(BodyHandler.REQUEST_BODY);
@@ -105,7 +105,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         }
                     }
                 });
-        return handler;
     }
 
     @Test

File: client/src/main/java/com/networknt/client/Client.java
Patch:
@@ -515,7 +515,7 @@ private SSLContext sslContext() throws ClientException, IOException, NoSuchAlgor
             // first check if javax.net.ssl.trustStore system properties is set. It is only necessary if the server
             // certificate doesn't have the entire chain.
             Boolean loadTrustStore = (Boolean) tlsMap.get(LOAD_TRUST_STORE);
-            if (loadTrustStore != null && loadTrustStore == true) {
+            if (loadTrustStore != null && loadTrustStore) {
                 String trustStoreName = System.getProperty(TRUST_STORE_PROPERTY);
                 String trustStorePass = System.getProperty(TRUST_STORE_PASSWORD_PROPERTY);
                 if(trustStoreName != null && trustStorePass != null) {
@@ -549,7 +549,7 @@ private SSLContext sslContext() throws ClientException, IOException, NoSuchAlgor
 
             // load key store for client certificate if two way ssl is used.
             Boolean loadKeyStore = (Boolean) tlsMap.get(LOAD_KEY_STORE);
-            if (loadKeyStore != null && loadKeyStore == true) {
+            if (loadKeyStore != null && loadKeyStore) {
                 String keyStoreName = (String)tlsMap.get(KEY_STORE);
                 String keyStorePass = (String)tlsMap.get(KEY_PASS);
                 KeyStore keyStore = null;
@@ -585,7 +585,7 @@ private HostnameVerifier hostnameVerifier() {
         HostnameVerifier verifier = null;
         if(tlsMap != null) {
             Boolean verifyHostname = (Boolean) tlsMap.get(VERIFY_HOSTNAME);
-            if (verifyHostname != null && verifyHostname == false) {
+            if (verifyHostname != null && !verifyHostname) {
                 verifier = new NoopHostnameVerifier();
             } else {
                 verifier = new DefaultHostnameVerifier();

File: client/src/main/java/com/networknt/client/oauth/TokenHelper.java
Patch:
@@ -122,7 +122,7 @@ private static TokenResponse handleResponse(HttpResponse response) throws Client
         int statusCode = response.getStatusLine().getStatusCode();
         try {
             if (statusCode == HTTP_OK) {
-                tokenResponse = (TokenResponse) Config.getInstance().getMapper()
+                tokenResponse = Config.getInstance().getMapper()
                         .readValue(response.getEntity().getContent(),
                                 TokenResponse.class);
             } else {

File: config/src/main/java/com/networknt/config/Config.java
Patch:
@@ -128,10 +128,10 @@ public InputStream getInputStreamFromFile(String filename) {
         @Override
         public Object getJsonObjectConfig(String configName, Class clazz) {
             checkCacheExpiration();
-            Object config = (Object)configCache.get(configName);
+            Object config = configCache.get(configName);
             if(config == null) {
                 synchronized (FileConfigImpl.class) {
-                    config = (Object)configCache.get(configName);
+                    config = configCache.get(configName);
                     if(config == null) {
                         config = loadJsonObjectConfig(configName, clazz);
                         if(config != null) configCache.put(configName, config);

File: config/src/test/java/com/networknt/config/ConfigClassPathTest.java
Patch:
@@ -46,7 +46,7 @@ public void setUp() throws Exception {
         config.getMapper().writeValue(new File(homeDir + "/test.json"), map);
 
         // Add home directory to the classpath of the system class loader.
-        addURL(new File(homeDir).toURL());
+        addURL(new File(homeDir).toURI().toURL());
     }
 
     public void tearDown() throws Exception {
@@ -68,8 +68,8 @@ public void addURL(URL url) throws Exception {
         Class clazz= URLClassLoader.class;
 
         // Use reflection
-        Method method= clazz.getDeclaredMethod("addURL", new Class[] { URL.class });
+        Method method= clazz.getDeclaredMethod("addURL", URL.class);
         method.setAccessible(true);
-        method.invoke(classLoader, new Object[]{url});
+        method.invoke(classLoader, url);
     }
 }

File: correlation/src/test/java/com/networknt/correlation/CorrelationHandlerTest.java
Patch:
@@ -75,7 +75,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/with", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         String cid = exchange.getRequestHeaders().getFirst(Constants.CORRELATION_ID);
@@ -88,7 +88,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send(cid);
                     }
                 });
-        return handler;
     }
 
     @Test

File: dump/src/main/java/com/networknt/dump/DumpHandler.java
Patch:
@@ -83,7 +83,7 @@ public MiddlewareHandler setNext(final HttpHandler next) {
     @Override
     public boolean isEnabled() {
         Object object = config.get(ENABLED);
-        return object != null && (Boolean)object == true;
+        return object != null && (Boolean) object;
     }
 
     @Override

File: exception/src/test/java/com/networknt/exception/ExceptionHandlerTest.java
Patch:
@@ -77,7 +77,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/normal", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("normal");
@@ -99,7 +99,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         String content = new Scanner(new File("djfkjoiwejjhh9032d")).useDelimiter("\\Z").next();
                     }
                 });
-        return handler;
     }
 
     @Test

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -56,7 +56,7 @@ public static void setUp() throws Exception {
         map.put("enableServerInfo", false);
         Config.getInstance().getMapper().writeValue(new File(homeDir + "/info.json"), map);
         // Add home directory to the classpath of the system class loader.
-        addURL(new File(homeDir).toURL());
+        addURL(new File(homeDir).toURI().toURL());
 
         if(server == null) {
             logger.info("starting server");
@@ -92,9 +92,9 @@ static void addURL(URL url) throws Exception {
                 = (URLClassLoader) ClassLoader.getSystemClassLoader();
         Class clazz = URLClassLoader.class;
         // Use reflection
-        Method method = clazz.getDeclaredMethod("addURL", new Class[]{URL.class});
+        Method method = clazz.getDeclaredMethod("addURL", URL.class);
         method.setAccessible(true);
-        method.invoke(classLoader, new Object[]{url});
+        method.invoke(classLoader, url);
     }
 
     static RoutingHandler getTestHandler() {

File: metrics/src/main/java/io/dropwizard/metrics/FixedNameCsvFileProvider.java
Patch:
@@ -15,7 +15,6 @@ public File getFile(File directory, MetricName metricName) {
     private String sanitize(MetricName metricName) {
         //Forward slash character is definitely illegal in both Windows and Linux
         //https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx
-        final String sanitizedName = metricName.getKey().replaceFirst("^/","").replaceAll("/",".");
-        return sanitizedName;
+        return metricName.getKey().replaceFirst("^/","").replaceAll("/",".");
     }
 }

File: metrics/src/main/java/io/dropwizard/metrics/MetricName.java
Patch:
@@ -224,10 +224,8 @@ public boolean equals(Object obj) {
         } else if (!key.equals(other.key))
             return false;
 
-        if (!tags.equals(other.tags))
-            return false;
+        return tags.equals(other.tags);
 
-        return true;
     }
 
     @Override

File: metrics/src/main/java/io/dropwizard/metrics/influxdb/InfluxDbHttpSender.java
Patch:
@@ -124,7 +124,7 @@ public int writeData() throws Exception {
 
         httpPost.setConfig(getRequestConfig());
 
-        Integer responseCode = closeableHttpClient.execute(httpPost, new ResponseHandler<Integer>()
+        return closeableHttpClient.execute(httpPost, new ResponseHandler<Integer>()
         {
             @Override
             public Integer handleResponse(HttpResponse httpResponse)
@@ -149,8 +149,6 @@ public Integer handleResponse(HttpResponse httpResponse)
 
             }
         }, getHttpClientContext());
-
-        return responseCode;
     }
 
     @Override

File: metrics/src/test/java/com/networknt/metrics/MetricsHandlerTest.java
Patch:
@@ -87,13 +87,12 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/v2/pet/{petId}", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("test");
                     }
                 });
-        return handler;
     }
 
     @Test

File: metrics/src/test/java/io/dropwizard/metrics/InstrumentedScheduledExecutorServiceTest.java
Patch:
@@ -238,7 +238,6 @@ public void run() {
                     Thread.currentThread().interrupt();
                 }
 
-                return;
             }
         }, 10L, 10L, TimeUnit.MILLISECONDS);
 

File: sanitizer/src/test/java/com/networknt/sanitizer/SanitizerHandlerTest.java
Patch:
@@ -75,7 +75,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/parameter", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         Map<String, Deque<String>> parameter = exchange.getQueryParameters();
@@ -108,7 +108,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         }
                     }
                 });
-        return handler;
     }
 
     /*

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -34,7 +34,7 @@
 public class JwtHelperTest {
     @Test
     public void testReadCertificate() {
-        Map<String, Object> securityConfig = (Map<String, Object>) Config.getInstance().getJsonMapConfig(JwtHelper.SECURITY_CONFIG);
+        Map<String, Object> securityConfig = Config.getInstance().getJsonMapConfig(JwtHelper.SECURITY_CONFIG);
         Map<String, Object> jwtConfig = (Map<String, Object>)securityConfig.get(JwtHelper.JWT_CONFIG);
         Map<String, Object> keyMap = (Map<String, Object>) jwtConfig.get(JwtHelper.JWT_CERTIFICATE);
         Map<String, X509Certificate> certMap = new HashMap<String, X509Certificate>();

File: server/src/test/java/com/networknt/server/ServerTest.java
Patch:
@@ -35,7 +35,7 @@ public class ServerTest {
     public static void setUp() {
         if (server == null) {
             logger.info("starting server");
-            server.start();
+            Server.start();
         }
     }
 
@@ -47,7 +47,7 @@ public static void tearDown() throws Exception {
             } catch (InterruptedException ie) {
 
             }
-            server.stop();
+            Server.stop();
             logger.info("The server is stopped.");
         }
     }
@@ -56,7 +56,6 @@ public static void tearDown() throws Exception {
     public void testServer() {
         // server cannot be started as there is no spi routing handler provider
         Assert.assertNull(server);
-        return;
     }
 
 }

File: swagger/src/test/java/com/networknt/swagger/SwaggerHandlerTest.java
Patch:
@@ -76,7 +76,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/get", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("get");
@@ -97,7 +97,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("get");
                     }
                 });
-        return handler;
     }
 
     @Test

File: traceability/src/test/java/com/networknt/traceability/TraceabilityHandlerTest.java
Patch:
@@ -79,7 +79,7 @@ public static void tearDown() throws Exception {
     }
 
     static RoutingHandler getTestHandler() {
-        RoutingHandler handler = Handlers.routing()
+        return Handlers.routing()
                 .add(Methods.GET, "/get", new HttpHandler() {
                     public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("get");
@@ -90,7 +90,6 @@ public void handleRequest(HttpServerExchange exchange) throws Exception {
                         exchange.getResponseSender().send("post");
                     }
                 });
-        return handler;
     }
 
     @Test

File: utility/src/test/java/com/networknt/utility/UtilTest.java
Patch:
@@ -24,6 +24,8 @@ public class UtilTest {
     public void testGetUUID() {
         String id1 = Util.getUUID();
         String id2 = Util.getUUID();
+        System.out.println("uuid = " + id1);
+        System.out.println("uuid = " + id2);
         Assert.assertNotEquals(id1, id2);
     }
 }

File: info/src/test/java/com/networknt/info/ServerInfoDisabledTest.java
Patch:
@@ -84,6 +84,8 @@ public static void tearDown() throws Exception {
         // Remove the test.json from home directory
         File configFile = new File(homeDir + "/info.json");
         configFile.delete();
+        // this is very important as it impacts subsequent test case if it is not cleared.
+        Config.getInstance().clear();
     }
 
     static void addURL(URL url) throws Exception {

File: validator/src/main/java/com/networknt/validator/RequestValidator.java
Patch:
@@ -154,7 +154,7 @@ private ValidationReport validateQueryParameter(final HttpServerExchange exchang
 
         final Collection<String> queryParameterValues = exchange.getQueryParameters().get(queryParameter.getName());
 
-        if (queryParameterValues.isEmpty() && queryParameter.getRequired()) {
+        if ((queryParameterValues == null || queryParameterValues.isEmpty()) && queryParameter.getRequired()) {
             return ValidationReport.singleton(
                     messages.get("validation.request.parameter.query.missing",
                             queryParameter.getName(), swaggerOperation.getPathString().original())

File: client/src/test/java/com/networknt/client/ClientTest.java
Patch:
@@ -19,13 +19,12 @@
 import com.networknt.config.Config;
 import com.networknt.security.JwtHelper;
 import com.networknt.utility.Constants;
-import com.networknt.utility.ExpiredTokenException;
+import com.networknt.status.ExpiredTokenException;
 import io.undertow.Handlers;
 import io.undertow.Undertow;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.util.Headers;
-import junit.framework.TestCase;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.ClientProtocolException;
@@ -48,7 +47,6 @@
 import java.nio.ByteBuffer;
 import java.util.*;
 import java.util.concurrent.*;
-import java.util.regex.Pattern;
 
 public class ClientTest {
     static final Logger logger = LoggerFactory.getLogger(ClientTest.class);

File: security/src/main/java/com/networknt/security/JwtHelper.java
Patch:
@@ -17,7 +17,7 @@
 package com.networknt.security;
 
 import com.networknt.config.Config;
-import com.networknt.utility.ExpiredTokenException;
+import com.networknt.status.ExpiredTokenException;
 import org.jose4j.jws.AlgorithmIdentifiers;
 import org.jose4j.jws.JsonWebSignature;
 import org.jose4j.jwt.JwtClaims;

File: security/src/test/java/com/networknt/security/JwtHelperTest.java
Patch:
@@ -62,8 +62,8 @@ private JwtClaims getTestClaims() {
         JwtClaims claims = JwtHelper.getDefaultJwtClaims();
         claims.setClaim("user_id", "steve");
         claims.setClaim("user_type", "EMPLOYEE");
-        claims.setClaim("client_id", "aaaaaaaa-1234-1234-1234-bbbbbbbb");
-        List<String> scope = Arrays.asList("api.r", "api.w");
+        claims.setClaim("client_id", "f7d42348-c647-4efb-a52d-4c5787421e72");
+        List<String> scope = Arrays.asList("write:pets", "read:pets");
         claims.setStringListClaim("scope", scope); // multi-valued claims work too and will end up as a JSON array
         return claims;
     }

File: server/src/main/java/com/networknt/server/Server.java
Patch:
@@ -28,9 +28,8 @@
 import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;
 import com.jayway.jsonpath.spi.mapper.MappingProvider;
 import com.networknt.security.JwtHelper;
-import com.networknt.security.JwtMockHandler;
 import com.networknt.security.JwtVerifyHandler;
-import com.networknt.security.SwaggerHelper;
+import com.networknt.utility.path.SwaggerHelper;
 import com.networknt.utility.ModuleRegistry;
 import com.networknt.validator.ValidatorConfig;
 import com.networknt.validator.ValidatorHandler;

File: status/src/test/java/com/networknt/status/StatusTest.java
Patch:
@@ -26,7 +26,7 @@ public class StatusTest {
 
     @Test
     public void tsetConstructor() {
-        Status status = new Status("ERR1001");
+        Status status = new Status("ERR10001");
         Assert.assertEquals(401, status.getStatusCode());
     }
 }

File: utility/src/main/java/com/networknt/utility/Constants.java
Patch:
@@ -26,7 +26,7 @@ public class Constants {
     public static final String SCOPE = "scope";
     public static final String ENDPOINT = "endpoint";
 
-    public static final String SCOPE_TOKEN = "scope_token";
+    public static final String SCOPE_TOKEN = "X-Scope-Token";
     public static final String AUTHORIZATION = "Authorization";
 
     public static final String AUDIT_LOGGER = "Audit";

File: utility/src/main/java/com/networknt/utility/path/NormalisedPath.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.networknt.validator;
+package com.networknt.utility.path;
 
 import java.util.List;
 

File: validator/src/main/java/com/networknt/validator/RequestValidator.java
Patch:
@@ -16,14 +16,13 @@
 
 package com.networknt.validator;
 
+import com.networknt.utility.path.NormalisedPath;
 import com.networknt.validator.parameter.ParameterValidators;
 import com.networknt.validator.report.MessageResolver;
 import com.networknt.validator.report.ValidationReport;
 import io.swagger.models.parameters.BodyParameter;
 import io.swagger.models.parameters.Parameter;
 import io.undertow.server.HttpServerExchange;
-import io.undertow.util.AttachmentKey;
-import org.apache.commons.io.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: validator/src/main/java/com/networknt/validator/SwaggerOperation.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.networknt.validator;
 
+import com.networknt.utility.path.NormalisedPath;
 import io.swagger.models.HttpMethod;
 import io.swagger.models.Operation;
 import io.swagger.models.Path;

File: validator/src/test/java/com/networknt/validator/ValidatorHandlerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.networknt.client.Client;
 import com.networknt.security.JwtMockHandler;
-import com.networknt.security.SwaggerHelper;
+import com.networknt.utility.path.SwaggerHelper;
 import io.swagger.models.Operation;
 import io.swagger.models.Path;
 import io.swagger.models.Swagger;

