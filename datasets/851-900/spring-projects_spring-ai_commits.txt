File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/opensearch/OpenSearchVectorStore.java
Patch:
@@ -222,6 +222,9 @@ public void doDelete(List<String> idList) {
 		for (String id : idList) {
 			bulkRequestBuilder.operations(op -> op.delete(idx -> idx.index(this.index).id(id)));
 		}
+		if (bulkRequest(bulkRequestBuilder.build()).errors()) {
+			throw new IllegalStateException("Delete operation failed");
+		}
 	}
 
 	private BulkResponse bulkRequest(BulkRequest bulkRequest) {

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStore.java
Patch:
@@ -219,6 +219,9 @@ public void doDelete(List<String> idList) {
 		for (String id : idList) {
 			bulkRequestBuilder.operations(op -> op.delete(idx -> idx.index(this.options.getIndexName()).id(id)));
 		}
+		if (bulkRequest(bulkRequestBuilder.build()).errors()) {
+			throw new IllegalStateException("Delete operation failed");
+		}
 	}
 
 	@Override

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseChatClientIT.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.converter.BeanOutputConverter;
 import org.springframework.ai.converter.ListOutputConverter;
+import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.ai.model.tool.ToolCallingChatOptions;
 import org.springframework.ai.tool.function.FunctionToolCallback;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -366,7 +367,7 @@ void multiModalityEmbeddedImage(String modelName) throws IOException {
 
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
-				.options(ToolCallingChatOptions.builder().model(modelName).build())
+				.options(FunctionCallingOptions.builder().model(modelName).build())
 				.user(u -> u.text("Explain what do you see on this picture?")
 						.media(MimeTypeUtils.IMAGE_PNG, new ClassPathResource("/test.png")))
 				.call()
@@ -387,7 +388,7 @@ void multiModalityImageUrl(String modelName) throws IOException {
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
 		// TODO consider adding model(...) method to ChatClient as a shortcut to
-		.options(ToolCallingChatOptions.builder().model(modelName).build())
+		.options(FunctionCallingOptions.builder().model(modelName).build())
 		.user(u -> u.text("Explain what do you see on this picture?").media(MimeTypeUtils.IMAGE_PNG, url))
 		.call()
 		.content();

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/client/BedrockNovaChatClientIT.java
Patch:
@@ -31,6 +31,7 @@
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.model.Media;
+import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.ai.model.tool.ToolCallingChatOptions;
 import org.springframework.ai.tool.function.FunctionToolCallback;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -183,7 +184,7 @@ public BedrockProxyChatModel bedrockConverseChatModel() {
 				.withCredentialsProvider(EnvironmentVariableCredentialsProvider.create())
 				.withRegion(Region.US_EAST_1)
 				.withTimeout(Duration.ofSeconds(120))
-				.withDefaultOptions(ToolCallingChatOptions.builder().model(modelId).build())
+				.withDefaultOptions(FunctionCallingOptions.builder().model(modelId).build())
 				.build();
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SimpleVectorStore.java
Patch:
@@ -106,11 +106,10 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		for (String id : idList) {
 			this.store.remove(id);
 		}
-		return Optional.of(true);
 	}
 
 	@Override

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/VectorStore.java
Patch:
@@ -59,10 +59,8 @@ default void accept(List<Document> documents) {
 	/**
 	 * Deletes documents from the vector store.
 	 * @param idList list of document ids for which documents will be removed.
-	 * @return Returns true if the documents were successfully deleted.
 	 */
-	@Nullable
-	Optional<Boolean> delete(List<String> idList);
+	void delete(List<String> idList);
 
 	/**
 	 * Deletes documents from the vector store based on filter criteria.

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/SimpleVectorStoreTests.java
Patch:
@@ -38,6 +38,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -112,8 +113,8 @@ void shouldDeleteDocuments() {
 	@Test
 	void shouldHandleDeleteOfNonexistentDocument() {
 		this.vectorStore.delete(List.of("nonexistent-id"));
-		// Should not throw exception and return true
-		assertThat(this.vectorStore.delete(List.of("nonexistent-id")).get()).isTrue();
+		// Should not throw exception
+		assertDoesNotThrow(() -> this.vectorStore.delete(List.of("nonexistent-id")));
 	}
 
 	@Test

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/chroma/vectorstore/ChromaVectorStore.java
Patch:
@@ -158,10 +158,9 @@ public void doAdd(@NonNull List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(@NonNull List<String> idList) {
+	public void doDelete(List<String> idList) {
 		Assert.notNull(idList, "Document id list must not be null");
-		int status = this.chromaApi.deleteEmbeddings(this.collectionId, new DeleteEmbeddingsRequest(idList));
-		return Optional.of(status == 200);
+		this.chromaApi.deleteEmbeddings(this.collectionId, new DeleteEmbeddingsRequest(idList));
 	}
 
 	@Override

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/chroma/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -88,8 +88,7 @@ public void addAndSearch() {
 			assertThat(resultDoc.getMetadata()).containsKeys("meta2", DocumentMetadata.DISTANCE.value());
 
 			// Remove all documents from the store
-			assertThat(vectorStore.delete(this.documents.stream().map(doc -> doc.getId()).toList()))
-				.isEqualTo(Optional.of(Boolean.TRUE));
+			vectorStore.delete(this.documents.stream().map(doc -> doc.getId()).toList());
 
 			List<Document> results2 = vectorStore
 				.similaritySearch(SearchRequest.builder().query("Great").topK(1).build());
@@ -118,7 +117,7 @@ public void simpleSearch() {
 			assertThat(resultDoc.getText()).isEqualTo("The sky is blue because of Rayleigh scattering.");
 
 			// Remove all documents from the store
-			assertThat(vectorStore.delete(List.of(document.getId()))).isEqualTo(Optional.of(Boolean.TRUE));
+			vectorStore.delete(List.of(document.getId()));
 
 			results = vectorStore.similaritySearch(SearchRequest.builder().query("Why is the sky blue?").build());
 			assertThat(results).hasSize(0);

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStore.java
Patch:
@@ -209,7 +209,7 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		BulkRequest.Builder bulkRequestBuilder = new BulkRequest.Builder();
 		// For the index to be present, either it must be pre-created or set the
 		// initializeSchema to true.
@@ -219,7 +219,6 @@ public Optional<Boolean> doDelete(List<String> idList) {
 		for (String id : idList) {
 			bulkRequestBuilder.operations(op -> op.delete(idx -> idx.index(this.options.getIndexName()).id(id)));
 		}
-		return Optional.of(bulkRequest(bulkRequestBuilder.build()).errors());
 	}
 
 	@Override

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/gemfire/GemFireVectorStore.java
Patch:
@@ -231,7 +231,7 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		try {
 			this.client.method(HttpMethod.DELETE)
 				.uri("/" + this.indexName + EMBEDDINGS)
@@ -242,9 +242,7 @@ public Optional<Boolean> doDelete(List<String> idList) {
 		}
 		catch (Exception e) {
 			logger.warn("Error removing embedding: {}", e.getMessage(), e);
-			return Optional.of(false);
 		}
-		return Optional.of(true);
 	}
 
 	@Override

File: vector-stores/spring-ai-hanadb-store/src/main/java/org/springframework/ai/vectorstore/hanadb/HanaCloudVectorStore.java
Patch:
@@ -126,10 +126,9 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		int deleteCount = this.repository.deleteEmbeddingsById(this.tableName, idList);
 		logger.info("{} embeddings deleted", deleteCount);
-		return Optional.of(deleteCount == idList.size());
 	}
 
 	public int purgeEmbeddings() {

File: vector-stores/spring-ai-mariadb-store/src/main/java/org/springframework/ai/vectorstore/mariadb/MariaDBVectorStore.java
Patch:
@@ -318,15 +318,13 @@ private String toJson(Map<String, Object> map) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		int updateCount = 0;
 		for (String id : idList) {
 			int count = this.jdbcTemplate.update(
 					String.format("DELETE FROM %s WHERE %s = ?", getFullyQualifiedTableName(), this.idFieldName), id);
 			updateCount = updateCount + count;
 		}
-
-		return Optional.of(updateCount == idList.size());
 	}
 
 	@Override

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/milvus/MilvusVectorStore.java
Patch:
@@ -274,7 +274,7 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		Assert.notNull(idList, "Document id list must not be null");
 
 		String deleteExpression = String.format("%s in [%s]", this.idFieldName,
@@ -290,8 +290,6 @@ public Optional<Boolean> doDelete(List<String> idList) {
 		if (deleteCount != idList.size()) {
 			logger.warn(String.format("Deleted only %s entries from requested %s ", deleteCount, idList.size()));
 		}
-
-		return Optional.of(status.getStatus() == Status.Success.getCode());
 	}
 
 	@Override

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/neo4j/Neo4jVectorStore.java
Patch:
@@ -221,20 +221,19 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 
 		try (var session = this.driver.session(this.sessionConfig)) {
 
 			// Those queries with internal, cypher based transaction management cannot be
 			// run with executeWrite
-			var summary = session
+			session
 				.run("""
 						MATCH (n:%s) WHERE n.%s IN $ids
 						CALL { WITH n DETACH DELETE n } IN TRANSACTIONS OF $transactionSize ROWS
 						""".formatted(this.label, this.idProperty),
 						Map.of("ids", idList, "transactionSize", DEFAULT_TRANSACTION_SIZE))
 				.consume();
-			return Optional.of(idList.size() == summary.counters().nodesDeleted());
 		}
 	}
 

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/opensearch/OpenSearchVectorStore.java
Patch:
@@ -217,12 +217,11 @@ public void doAdd(List<Document> documents) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		BulkRequest.Builder bulkRequestBuilder = new BulkRequest.Builder();
 		for (String id : idList) {
 			bulkRequestBuilder.operations(op -> op.delete(idx -> idx.index(this.index).id(id)));
 		}
-		return Optional.of(bulkRequest(bulkRequestBuilder.build()).errors());
 	}
 
 	private BulkResponse bulkRequest(BulkRequest bulkRequest) {

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/pgvector/PgVectorStore.java
Patch:
@@ -318,15 +318,13 @@ private Object convertIdToPgType(String id) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		int updateCount = 0;
 		for (String id : idList) {
 			int count = this.jdbcTemplate.update("DELETE FROM " + getFullyQualifiedTableName() + " WHERE id = ?",
 					UUID.fromString(id));
 			updateCount = updateCount + count;
 		}
-
-		return Optional.of(updateCount == idList.size());
 	}
 
 	@Override

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/pgvector/PgVectorStoreIT.java
Patch:
@@ -449,9 +449,7 @@ public void deleteByIds() {
 				assertThat(results).hasSize(3);
 
 				// Delete two documents by ID
-				Optional<Boolean> deleteResult = vectorStore.delete(List.of(bgDocument.getId(), nlDocument.getId()));
-
-				assertThat(deleteResult).isPresent().contains(true);
+				vectorStore.delete(List.of(bgDocument.getId(), nlDocument.getId()));
 
 				// Verify deletion
 				results = vectorStore.similaritySearch(searchRequest);

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/redis/RedisVectorStore.java
Patch:
@@ -280,7 +280,7 @@ private String key(String id) {
 	}
 
 	@Override
-	public Optional<Boolean> doDelete(List<String> idList) {
+	public void doDelete(List<String> idList) {
 		try (Pipeline pipeline = this.jedis.pipelined()) {
 			for (String id : idList) {
 				pipeline.jsonDel(key(id));
@@ -291,9 +291,7 @@ public Optional<Boolean> doDelete(List<String> idList) {
 				if (logger.isErrorEnabled()) {
 					logger.error("Could not delete document: {}", errResponse.get());
 				}
-				return Optional.of(false);
 			}
-			return Optional.of(true);
 		}
 	}
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaOptions.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -331,7 +332,7 @@ public class OllamaOptions implements ToolCallingChatOptions, EmbeddingOptions {
 	private Set<String> toolNames = new HashSet<>();
 
 	@JsonIgnore
-	private Map<String, Object> toolContext;
+	private Map<String, Object> toolContext = new HashMap<>();
 
 	public static Builder builder() {
 		return new Builder();

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStore.java
Patch:
@@ -263,9 +263,9 @@ public List<Document> doSimilaritySearch(SearchRequest searchRequest) {
 			SearchResponse<Document> res = this.elasticsearchClient.search(sr -> sr.index(this.options.getIndexName())
 				.knn(knn -> knn.queryVector(EmbeddingUtils.toList(vectors))
 					.similarity(finalThreshold)
-					.k((long) searchRequest.getTopK())
+					.k(searchRequest.getTopK())
 					.field("embedding")
-					.numCandidates((long) (1.5 * searchRequest.getTopK()))
+					.numCandidates((int) (1.5 * searchRequest.getTopK()))
 					.filter(fl -> fl
 						.queryString(qs -> qs.query(getElasticsearchQueryString(searchRequest.getFilterExpression())))))
 				.size(searchRequest.getTopK()), Document.class);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfiguration.java
Patch:
@@ -64,6 +64,7 @@ public PgVectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embed
 
 		return PgVectorStore.builder(jdbcTemplate, embeddingModel)
 			.schemaName(properties.getSchemaName())
+			.idType(properties.getIdType())
 			.vectorTableName(properties.getTableName())
 			.vectorTableValidationsEnabled(properties.isSchemaValidation())
 			.dimensions(properties.getDimensions())

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiChatModelFunctionCallingIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 the original author or authors.
+ * Copyright 2023-2025 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.tool.function.FunctionToolCallback;
-import org.springframework.ai.util.json.JsonSchemaGenerator;
+import org.springframework.ai.util.json.schema.JsonSchemaGenerator;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-ai-core/src/main/java/org/springframework/ai/model/tool/ToolCallingManager.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.ai.model.tool;
 
-import org.springframework.ai.chat.messages.Message;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.tool.definition.ToolDefinition;
@@ -39,7 +38,7 @@ public interface ToolCallingManager {
 	/**
 	 * Execute the tool calls requested by the model.
 	 */
-	List<Message> executeToolCalls(Prompt prompt, ChatResponse chatResponse);
+	ToolExecutionResult executeToolCalls(Prompt prompt, ChatResponse chatResponse);
 
 	/**
 	 * Create a default {@link ToolCallingManager} builder.

File: spring-ai-core/src/main/java/org/springframework/ai/tool/definition/ToolDefinition.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.tool.definition;
 
 import org.springframework.ai.tool.util.ToolUtils;
-import org.springframework.ai.util.json.JsonSchemaGenerator;
+import org.springframework.ai.util.json.schema.JsonSchemaGenerator;
 import org.springframework.util.Assert;
 
 import java.lang.reflect.Method;

File: spring-ai-core/src/main/java/org/springframework/ai/tool/function/FunctionToolCallback.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.ai.tool.metadata.ToolMetadata;
 import org.springframework.ai.tool.util.ToolUtils;
 import org.springframework.ai.util.json.JsonParser;
-import org.springframework.ai.util.json.JsonSchemaGenerator;
+import org.springframework.ai.util.json.schema.JsonSchemaGenerator;
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;

File: spring-ai-core/src/main/java/org/springframework/ai/tool/resolution/SpringBeanToolCallbackResolver.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.ai.tool.ToolCallback;
 import org.springframework.ai.tool.function.FunctionToolCallback;
 import org.springframework.ai.tool.util.ToolUtils;
-import org.springframework.ai.util.json.JsonSchemaGenerator;
-import org.springframework.ai.util.json.SchemaType;
+import org.springframework.ai.util.json.schema.JsonSchemaGenerator;
+import org.springframework.ai.util.json.schema.SchemaType;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Description;
 import org.springframework.context.support.GenericApplicationContext;

File: spring-ai-core/src/main/java/org/springframework/ai/util/json/schema/SchemaType.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.util.json;
+package org.springframework.ai.util.json.schema;
 
 /**
  * The type of schema to generate for a given Java type.

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/DefaultChatClientTests.java
Patch:
@@ -1375,7 +1375,7 @@ void whenToolCallbacksElementIsNullThenThrow() {
 		ChatClient.ChatClientRequestSpec spec = chatClient.prompt();
 		assertThatThrownBy(() -> spec.tools(mock(ToolCallback.class), null))
 			.isInstanceOf(IllegalArgumentException.class)
-			.hasMessage("toolObjects cannot contain null elements");
+			.hasMessage("toolCallbacks cannot contain null elements");
 	}
 
 	@Test

File: spring-ai-core/src/test/java/org/springframework/ai/tool/function/FunctionToolCallbackTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.ai.tool.definition.ToolDefinition;
 import org.springframework.ai.tool.execution.ToolCallResultConverter;
 import org.springframework.ai.tool.metadata.ToolMetadata;
-import org.springframework.ai.util.json.JsonSchemaGenerator;
+import org.springframework.ai.util.json.schema.JsonSchemaGenerator;
 import org.springframework.core.ParameterizedTypeReference;
 
 import java.util.List;

File: spring-ai-core/src/test/java/org/springframework/ai/tool/resolution/SpringBeanToolCallbackResolverTests.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.tool.ToolCallback;
-import org.springframework.ai.util.json.SchemaType;
+import org.springframework.ai.util.json.schema.SchemaType;
 import org.springframework.context.annotation.AnnotationConfigApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 the original author or authors.
+ * Copyright 2023-2025 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -96,7 +96,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 						"What's the weather like in San Francisco, Paris and in Tokyo? Use Multi-turn function calling.");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						ToolCallingChatOptions.builder().tools("weatherFunction").build()));
+						ToolCallingChatOptions.builder().toolNames("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/OllamaFunctionCallbackIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 the original author or authors.
+ * Copyright 2023-2025 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -119,7 +119,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 			UserMessage userMessage = new UserMessage(
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
-			ToolCallingChatOptions functionOptions = ToolCallingChatOptions.builder().tools("WeatherInfo").build();
+			ToolCallingChatOptions functionOptions = ToolCallingChatOptions.builder().toolNames("WeatherInfo").build();
 
 			ChatResponse response = chatModel.call(new Prompt(List.of(userMessage), functionOptions));
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/OllamaFunctionToolBeanIT.java
Patch:
@@ -103,7 +103,7 @@ void functionCallTest() {
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
 			ChatResponse response = chatModel
-				.call(new Prompt(List.of(userMessage), OllamaOptions.builder().tools("weatherInfo").build()));
+				.call(new Prompt(List.of(userMessage), OllamaOptions.builder().toolNames("weatherInfo").build()));
 
 			logger.info("Response: {}", response);
 
@@ -147,7 +147,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 			UserMessage userMessage = new UserMessage(
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
-			ToolCallingChatOptions functionOptions = ToolCallingChatOptions.builder().tools("weatherInfo").build();
+			ToolCallingChatOptions functionOptions = ToolCallingChatOptions.builder().toolNames("weatherInfo").build();
 
 			ChatResponse response = chatModel.call(new Prompt(List.of(userMessage), functionOptions));
 

File: spring-ai-spring-boot-docker-compose/src/test/java/org/springframework/ai/docker/compose/service/connection/weaviate/WeaviateDockerComposeConnectionDetailsFactoryIT.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.ai.docker.compose.service.connection.weaviate;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.utility.DockerImageName;
 
@@ -32,7 +31,6 @@ class WeaviateDockerComposeConnectionDetailsFactoryIT extends AbstractDockerComp
 	}
 
 	@Test
-	@Disabled("GH-2026")
 	void runCreatesConnectionDetails() {
 		WeaviateConnectionDetails connectionDetails = run(WeaviateConnectionDetails.class);
 		assertThat(connectionDetails.getHost()).isNotNull();

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelIT.java
Patch:
@@ -246,7 +246,8 @@ void multiModalityTest() throws IOException {
 		var response = this.chatModel.call(new Prompt(List.of(userMessage)));
 
 		logger.info(response.getResult().getOutput().getText());
-		assertThat(response.getResult().getOutput().getText()).contains("banan", "apple", "basket");
+		assertThat(response.getResult().getOutput().getText()).containsAnyOf("bananas", "apple", "bowl", "basket",
+				"fruit stand");
 	}
 
 	@Test

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelIT.java
Patch:
@@ -228,8 +228,7 @@ void multiModalityImageUrl() throws IOException {
 		// @formatter:on
 
 		logger.info(response);
-		assertThat(response).contains("bananas", "apple");
-		assertThat(response).containsAnyOf("bowl", "basket");
+		assertThat(response).containsAnyOf("bananas", "apple", "bowl", "basket", "fruit stand");
 	}
 
 	@Test
@@ -245,7 +244,7 @@ void multiModalityImageResource() {
 				.content();
 		// @formatter:on
 
-		assertThat(response).containsAnyOf("bananas", "apple", "apples");
+		assertThat(response).containsAnyOf("bananas", "apple", "bowl", "basket", "fruit stand");
 	}
 
 	record ActorsFilms(String actor, List<String> movies) {

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModelIT.java
Patch:
@@ -240,7 +240,8 @@ void multiModalityTest() throws IOException {
 		var response = this.chatModel.call(new Prompt(List.of(userMessage)));
 
 		logger.info(response.getResult().getOutput().getText());
-		assertThat(response.getResult().getOutput().getText()).contains("banan", "apple", "basket");
+		assertThat(response.getResult().getOutput().getText()).containsAnyOf("bananas", "apple", "bowl", "basket",
+				"fruit stand");
 	}
 
 	@Test

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/client/BedrockNovaChatClientIT.java
Patch:
@@ -81,7 +81,7 @@ void imageMultiModalityTest() throws IOException {
 			.content();
 
 		logger.info(response);
-		assertThat(response).containsAnyOf("banan", "apple", "basket");
+		assertThat(response).containsAnyOf("bananas", "apple", "bowl", "basket", "fruit stand");
 	}
 
 	@Test

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelMultimodalIT.java
Patch:
@@ -68,7 +68,8 @@ void multiModalityTest() {
 		var response = this.chatModel.call(new Prompt(List.of(userMessage)));
 
 		logger.info(response.getResult().getOutput().getText());
-		assertThat(response.getResult().getOutput().getText()).containsAnyOf("bananas", "apple");
+		assertThat(response.getResult().getOutput().getText()).containsAnyOf("bananas", "apple", "bowl", "basket",
+				"fruit stand");
 	}
 
 	@SpringBootConfiguration

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelIT.java
Patch:
@@ -478,8 +478,8 @@ void multiModalityImageUrl(String modelName) throws IOException {
 			.call(new Prompt(List.of(userMessage), OpenAiChatOptions.builder().model(modelName).build()));
 
 		logger.info(response.getResult().getOutput().getText());
-		assertThat(response.getResult().getOutput().getText()).contains("bananas", "apple");
-		assertThat(response.getResult().getOutput().getText()).containsAnyOf("bowl", "basket", "fruit stand");
+		assertThat(response.getResult().getOutput().getText()).containsAnyOf("bananas", "apple", "bowl", "basket",
+				"fruit stand");
 	}
 
 	@Test

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModelIT.java
Patch:
@@ -254,8 +254,8 @@ void multiModalityTest() throws IOException {
 		// List.of(new Media(MimeTypeDetector.getMimeType(imageUrl), imageUrl)));
 		// response = client.call(new Prompt(List.of(userMessage)));
 
-		// assertThat(response.getResult().getOutput().getContent()).contains("bananas",
-		// "apple", "basket");
+		// assertThat(response.getResult().getOutput().getContent())..containsAnyOf("bananas",
+		// "apple", "bowl", "basket", "fruit stand");
 
 		// https://github.com/GoogleCloudPlatform/generative-ai/blob/main/gemini/use-cases/intro_multimodal_use_cases.ipynb
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -56,7 +56,7 @@ void defaultEmbedding() {
 		assertThat(embeddingResponse.getResults()).hasSize(1);
 		assertThat(embeddingResponse.getResults().get(0)).isNotNull();
 		assertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1536);
-		assertThat(embeddingResponse.getMetadata().getModel()).isEqualTo("text-embedding-ada-002");
+		assertThat(embeddingResponse.getMetadata().getModel()).isEqualTo("text-embedding-ada-002-v2");
 		assertThat(embeddingResponse.getMetadata().getUsage().getTotalTokens()).isEqualTo(2);
 		assertThat(embeddingResponse.getMetadata().getUsage().getPromptTokens()).isEqualTo(2);
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelIT.java
Patch:
@@ -217,7 +217,7 @@ void functionCallTest() {
 		assertThat(response.getResult().getOutput().getText()).containsAnyOf("30.0", "30");
 		assertThat(response.getMetadata()).isNotNull();
 		assertThat(response.getMetadata().getUsage()).isNotNull();
-		assertThat(response.getMetadata().getUsage().getTotalTokens()).isLessThan(1050).isGreaterThan(800);
+		assertThat(response.getMetadata().getUsage().getTotalTokens()).isLessThan(1050).isGreaterThan(750);
 	}
 
 	@Test
@@ -328,7 +328,7 @@ void streamFunctionCallUsageTest() {
 		logger.info("Response: " + chatResponse);
 		assertThat(chatResponse.getMetadata()).isNotNull();
 		assertThat(chatResponse.getMetadata().getUsage()).isNotNull();
-		assertThat(chatResponse.getMetadata().getUsage().getTotalTokens()).isLessThan(1050).isGreaterThan(800);
+		assertThat(chatResponse.getMetadata().getUsage().getTotalTokens()).isLessThan(1050).isGreaterThan(750);
 	}
 
 	record ActorsFilmsRecord(String actor, List<String> movies) {

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/client/AnthropicChatClientMethodInvokingFunctionCallbackIT.java
Patch:
@@ -256,7 +256,7 @@ void toolAnnotation() {
 				.content();
 		// @formatter:on
 
-		logger.info("Response: {}", response);
+		logger.info("Response:" + response);
 
 		assertThat(arguments).containsEntry("roomName", "living room")
 			.containsEntry("color", TestFunctionClass.LightColor.RED);
@@ -335,7 +335,7 @@ enum LightColor {
 		public void changeRoomLightColor(String roomName, LightColor color) {
 			arguments.put("roomName", roomName);
 			arguments.put("color", color);
-			logger.info("Change light colur in room: {} to color: {}", roomName, color);
+			logger.info("Change light colur in room: " + roomName + " to color: " + color);
 		}
 
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/AbstractToolCallSupport.java
Patch:
@@ -32,6 +32,7 @@
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallbackResolver;
 import org.springframework.ai.model.function.FunctionCallingOptions;
+import org.springframework.ai.model.tool.ToolCallingManager;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
 
@@ -44,7 +45,9 @@
  * @author Thomas Vitale
  * @author Jihoon Kim
  * @since 1.0.0
+ * @deprecated Use {@link ToolCallingManager} instead.
  */
+@Deprecated
 public abstract class AbstractToolCallSupport {
 
 	protected static final boolean IS_RUNTIME_CALL = true;

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallbackResolver.java
Patch:
@@ -16,14 +16,17 @@
 
 package org.springframework.ai.model.function;
 
+import org.springframework.ai.tool.resolution.ToolCallbackResolver;
 import org.springframework.lang.NonNull;
 
 /**
  * Strategy interface for resolving {@link FunctionCallback} instances.
  *
  * @author Christian Tzolov
  * @since 1.0.0
+ * @deprecated Use {@link ToolCallbackResolver} instead.
  */
+@Deprecated
 public interface FunctionCallbackResolver {
 
 	/**

File: spring-ai-core/src/main/java/org/springframework/ai/tool/definition/DefaultToolDefinition.java
Patch:
@@ -64,9 +64,9 @@ public Builder inputSchema(String inputSchema) {
 			return this;
 		}
 
-		public DefaultToolDefinition build() {
+		public ToolDefinition build() {
 			if (!StringUtils.hasText(description)) {
-				description = ToolUtils.getToolDescriptionFromName(description);
+				description = ToolUtils.getToolDescriptionFromName(name);
 			}
 			return new DefaultToolDefinition(name, description, inputSchema);
 		}

File: spring-ai-core/src/main/java/org/springframework/ai/tool/metadata/DefaultToolMetadata.java
Patch:
@@ -40,7 +40,7 @@ public Builder returnDirect(boolean returnDirect) {
 			return this;
 		}
 
-		public DefaultToolMetadata build() {
+		public ToolMetadata build() {
 			return new DefaultToolMetadata(returnDirect);
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/tool/resolution/TypeResolverHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 the original author or authors.
+ * Copyright 2023-2025 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.model.function;
+package org.springframework.ai.tool.resolution;
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -45,7 +45,7 @@
  * @author Christian Tzolov
  * @author Sebastien Dekeuze
  */
-public abstract class TypeResolverHelper {
+public final class TypeResolverHelper {
 
 	/**
 	 * Returns the input class of a given Consumer class.

File: spring-ai-core/src/test/java/org/springframework/ai/tool/resolution/config/TypeResolverHelperConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2024 the original author or authors.
+ * Copyright 2023-2025 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.model.function.config;
+package org.springframework.ai.tool.resolution.config;
 
-import org.springframework.ai.model.function.StandaloneWeatherFunction;
+import org.springframework.ai.tool.resolution.StandaloneWeatherFunction;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 

File: spring-ai-integration-tests/src/test/java/org/springframework/ai/integration/tests/rag/preretrieval/query/transformation/RewriteQueryTransformerIT.java
Patch:
@@ -52,7 +52,7 @@ void whenTransformerWithDefaults() {
 
 		assertThat(transformedQuery).isNotNull();
 		System.out.println(transformedQuery);
-		assertThat(transformedQuery.text()).containsIgnoringCase("Large Language Model");
+		assertThat(transformedQuery.text()).containsIgnoringCase("model");
 	}
 
 }

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -181,7 +181,7 @@ public class OpenAiChatOptions implements FunctionCallingOptions {
 	/**
 	 * Developer-defined tags and values used for filtering completions in the <a href="https://platform.openai.com/chat-completions">dashboard</a>.
 	 */
-	private @JsonProperty("metadata") Map<String, String> metadata = new HashMap<>();
+	private @JsonProperty("metadata") Map<String, String> metadata;
 	/**
 	 * OpenAI Tool Function Callbacks to register with the ChatModel.
 	 * For Prompt Options the functionCallbacks are automatically enabled for the duration of the prompt execution.

File: vector-stores/spring-ai-mariadb-store/src/main/java/org/springframework/ai/vectorstore/mariadb/MariaDBVectorStore.java
Patch:
@@ -336,12 +336,12 @@ protected void doDelete(Filter.Expression filterExpression) {
 
 			String sql = String.format("DELETE FROM %s WHERE %s", getFullyQualifiedTableName(), nativeFilterExpression);
 
-			logger.debug("Executing delete with filter: {}", sql);
+			logger.debug("Executing delete with filter: " + sql);
 
 			this.jdbcTemplate.update(sql);
 		}
 		catch (Exception e) {
-			logger.error("Failed to delete documents by filter: {}", e.getMessage(), e);
+			logger.error(e, "Failed to delete documents by filter: " + e.getMessage());
 			throw new IllegalStateException("Failed to delete documents by filter", e);
 		}
 	}

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/milvus/MilvusVectorStore.java
Patch:
@@ -310,10 +310,10 @@ protected void doDelete(Filter.Expression filterExpression) {
 			}
 
 			long deleteCount = status.getData().getDeleteCnt();
-			logger.debug("Deleted {} documents matching filter expression", deleteCount);
+			logger.debug("Deleted " + deleteCount + " documents matching filter expression");
 		}
 		catch (Exception e) {
-			logger.error("Failed to delete documents by filter: {}", e.getMessage(), e);
+			logger.error(e, "Failed to delete documents by filter: " + e.getMessage());
 			throw new IllegalStateException("Failed to delete documents by filter", e);
 		}
 	}

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelObservationIT.java
Patch:
@@ -147,7 +147,7 @@ private void validate(ChatResponseMetadata responseMetadata, String finishReason
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelObservationIT.java
Patch:
@@ -166,7 +166,7 @@ private void validate(ChatResponseMetadata responseMetadata, boolean checkModel)
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(
 					ChatModelObservationDocumentation.HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(
 					ChatModelObservationDocumentation.HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatModelMetadataTests.java
Patch:
@@ -115,7 +115,7 @@ private void assertGenerationMetadata(ChatResponse response) {
 
 		assertThat(usage).isNotNull();
 		assertThat(usage.getPromptTokens()).isEqualTo(58);
-		assertThat(usage.getGenerationTokens()).isEqualTo(68);
+		assertThat(usage.getCompletionTokens()).isEqualTo(68);
 		assertThat(usage.getTotalTokens()).isEqualTo(126);
 	}
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseUsageAggregationTests.java
Patch:
@@ -85,7 +85,7 @@ public void call() {
 		assertThat(result.getResult().getOutput().getText()).isSameAs("Response Content Block");
 
 		assertThat(result.getMetadata().getUsage().getPromptTokens()).isEqualTo(16);
-		assertThat(result.getMetadata().getUsage().getGenerationTokens()).isEqualTo(14);
+		assertThat(result.getMetadata().getUsage().getCompletionTokens()).isEqualTo(14);
 		assertThat(result.getMetadata().getUsage().getTotalTokens()).isEqualTo(30);
 	}
 
@@ -151,7 +151,7 @@ public void callWithToolUse() {
 			.isSameAs(converseResponseFinal.output().message().content().get(0).text());
 
 		assertThat(result.getMetadata().getUsage().getPromptTokens()).isEqualTo(445 + 540);
-		assertThat(result.getMetadata().getUsage().getGenerationTokens()).isEqualTo(119 + 106);
+		assertThat(result.getMetadata().getUsage().getCompletionTokens()).isEqualTo(119 + 106);
 		assertThat(result.getMetadata().getUsage().getTotalTokens()).isEqualTo(564 + 646);
 	}
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModelObservationIT.java
Patch:
@@ -149,7 +149,7 @@ private void validate(ChatResponseMetadata responseMetadata, String finishReason
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3ChatModel.java
Patch:
@@ -132,8 +132,7 @@ public Flux<ChatResponse> stream(Prompt prompt) {
 	}
 
 	protected Usage extractUsage(AnthropicChatResponse response) {
-		return new DefaultUsage(response.usage().inputTokens().longValue(),
-				response.usage().outputTokens().longValue());
+		return new DefaultUsage(response.usage().inputTokens(), response.usage().outputTokens());
 	}
 
 	/**

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/chat/MiniMaxChatModelObservationIT.java
Patch:
@@ -148,7 +148,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java
Patch:
@@ -305,7 +305,7 @@ void validateCallResponseMetadata() {
 		assertThat(response.getMetadata().getId()).isNotEmpty();
 		assertThat(response.getMetadata().getModel()).containsIgnoringCase(model);
 		assertThat(response.getMetadata().getUsage().getPromptTokens()).isPositive();
-		assertThat(response.getMetadata().getUsage().getGenerationTokens()).isPositive();
+		assertThat(response.getMetadata().getUsage().getCompletionTokens()).isPositive();
 		assertThat(response.getMetadata().getUsage().getTotalTokens()).isPositive();
 	}
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelObservationIT.java
Patch:
@@ -158,7 +158,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/chat/MoonshotChatModelObservationIT.java
Patch:
@@ -150,7 +150,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelIT.java
Patch:
@@ -139,7 +139,7 @@ void usageTest() {
 
 		assertThat(usage).isNotNull();
 		assertThat(usage.getPromptTokens()).isPositive();
-		assertThat(usage.getGenerationTokens()).isPositive();
+		assertThat(usage.getCompletionTokens()).isPositive();
 		assertThat(usage.getTotalTokens()).isPositive();
 	}
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelObservationIT.java
Patch:
@@ -147,7 +147,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelTests.java
Patch:
@@ -100,15 +100,15 @@ public void buildChatResponseMetadataAggregationWithNonEmptyMetadata() {
 		ChatResponse previousChatResponse = ChatResponse.builder()
 			.generations(List.of())
 			.metadata(ChatResponseMetadata.builder()
-				.usage(new DefaultUsage(66L, 99L))
+				.usage(new DefaultUsage(66, 99))
 				.keyValue("eval-duration", Duration.ofSeconds(2))
 				.keyValue("prompt-eval-duration", Duration.ofSeconds(2))
 				.build())
 			.build();
 
 		ChatResponseMetadata metadata = OllamaChatModel.from(response, previousChatResponse);
 
-		assertThat(metadata.getUsage()).isEqualTo(new DefaultUsage(808L + 66L, 101L + 99L));
+		assertThat(metadata.getUsage()).isEqualTo(new DefaultUsage(808 + 66, 101 + 99));
 
 		assertEquals(Duration.ofNanos(evalDuration).plus(Duration.ofSeconds(2)), metadata.get("eval-duration"));
 		assertEquals((evalCount + 99), (Integer) metadata.get("eval-count"));

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelObservationIT.java
Patch:
@@ -152,7 +152,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelWithChatResponseMetadataTests.java
Patch:
@@ -88,7 +88,7 @@ void aiResponseContainsAiMetadata() {
 
 		assertThat(usage).isNotNull();
 		assertThat(usage.getPromptTokens()).isEqualTo(9L);
-		assertThat(usage.getGenerationTokens()).isEqualTo(12L);
+		assertThat(usage.getCompletionTokens()).isEqualTo(12L);
 		assertThat(usage.getTotalTokens()).isEqualTo(21L);
 
 		RateLimit rateLimit = chatResponseMetadata.getRateLimit();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java
Patch:
@@ -126,11 +126,11 @@ void streamingWithTokenUsage() {
 		var referenceTokenUsage = this.chatModel.call(prompt).getMetadata().getUsage();
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isGreaterThan(0);
-		assertThat(streamingTokenUsage.getGenerationTokens()).isGreaterThan(0);
+		assertThat(streamingTokenUsage.getCompletionTokens()).isGreaterThan(0);
 		assertThat(streamingTokenUsage.getTotalTokens()).isGreaterThan(0);
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isEqualTo(referenceTokenUsage.getPromptTokens());
-		assertThat(streamingTokenUsage.getGenerationTokens()).isEqualTo(referenceTokenUsage.getGenerationTokens());
+		assertThat(streamingTokenUsage.getCompletionTokens()).isEqualTo(referenceTokenUsage.getCompletionTokens());
 		assertThat(streamingTokenUsage.getTotalTokens()).isEqualTo(referenceTokenUsage.getTotalTokens());
 
 	}
@@ -371,7 +371,7 @@ void validateCallResponseMetadata(String model) {
 		assertThat(response.getMetadata().getId()).isNotEmpty();
 		assertThat(response.getMetadata().getModel()).containsIgnoringCase(model);
 		assertThat(response.getMetadata().getUsage().getPromptTokens()).isPositive();
-		assertThat(response.getMetadata().getUsage().getGenerationTokens()).isPositive();
+		assertThat(response.getMetadata().getUsage().getCompletionTokens()).isPositive();
 		assertThat(response.getMetadata().getUsage().getTotalTokens()).isPositive();
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/MistralWithOpenAiChatModelIT.java
Patch:
@@ -125,11 +125,11 @@ void streamingWithTokenUsage() {
 		var referenceTokenUsage = this.chatModel.call(prompt).getMetadata().getUsage();
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isGreaterThan(0);
-		assertThat(streamingTokenUsage.getGenerationTokens()).isGreaterThan(0);
+		assertThat(streamingTokenUsage.getCompletionTokens()).isGreaterThan(0);
 		assertThat(streamingTokenUsage.getTotalTokens()).isGreaterThan(0);
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isEqualTo(referenceTokenUsage.getPromptTokens());
-		assertThat(streamingTokenUsage.getGenerationTokens()).isEqualTo(referenceTokenUsage.getGenerationTokens());
+		assertThat(streamingTokenUsage.getCompletionTokens()).isEqualTo(referenceTokenUsage.getCompletionTokens());
 		assertThat(streamingTokenUsage.getTotalTokens()).isEqualTo(referenceTokenUsage.getTotalTokens());
 
 	}
@@ -376,7 +376,7 @@ void validateCallResponseMetadata(String model) {
 		assertThat(response.getMetadata().getId()).isNotEmpty();
 		assertThat(response.getMetadata().getModel()).containsIgnoringCase(model);
 		assertThat(response.getMetadata().getUsage().getPromptTokens()).isPositive();
-		assertThat(response.getMetadata().getUsage().getGenerationTokens()).isPositive();
+		assertThat(response.getMetadata().getUsage().getCompletionTokens()).isPositive();
 		assertThat(response.getMetadata().getUsage().getTotalTokens()).isPositive();
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java
Patch:
@@ -122,11 +122,11 @@ void streamingWithTokenUsage() {
 		var referenceTokenUsage = this.chatModel.call(prompt).getMetadata().getUsage();
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isGreaterThan(0);
-		assertThat(streamingTokenUsage.getGenerationTokens()).isGreaterThan(0);
+		assertThat(streamingTokenUsage.getCompletionTokens()).isGreaterThan(0);
 		assertThat(streamingTokenUsage.getTotalTokens()).isGreaterThan(0);
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isEqualTo(referenceTokenUsage.getPromptTokens());
-		assertThat(streamingTokenUsage.getGenerationTokens()).isEqualTo(referenceTokenUsage.getGenerationTokens());
+		assertThat(streamingTokenUsage.getCompletionTokens()).isEqualTo(referenceTokenUsage.getCompletionTokens());
 		assertThat(streamingTokenUsage.getTotalTokens()).isEqualTo(referenceTokenUsage.getTotalTokens());
 
 	}
@@ -305,7 +305,7 @@ void validateCallResponseMetadata() {
 		assertThat(response.getMetadata().getId()).isNotEmpty();
 		assertThat(response.getMetadata().getModel()).containsIgnoringCase(DEFAULT_NVIDIA_MODEL);
 		assertThat(response.getMetadata().getUsage().getPromptTokens()).isPositive();
-		assertThat(response.getMetadata().getUsage().getGenerationTokens()).isPositive();
+		assertThat(response.getMetadata().getUsage().getCompletionTokens()).isPositive();
 		assertThat(response.getMetadata().getUsage().getTotalTokens()).isPositive();
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/OllamaWithOpenAiChatModelIT.java
Patch:
@@ -143,11 +143,11 @@ void streamingWithTokenUsage() {
 		var referenceTokenUsage = this.chatModel.call(prompt).getMetadata().getUsage();
 
 		// assertThat(streamingTokenUsage.getPromptTokens()).isGreaterThan(0);
-		assertThat(streamingTokenUsage.getGenerationTokens()).isGreaterThan(0);
+		assertThat(streamingTokenUsage.getCompletionTokens()).isGreaterThan(0);
 		assertThat(streamingTokenUsage.getTotalTokens()).isGreaterThan(0);
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isEqualTo(referenceTokenUsage.getPromptTokens());
-		assertThat(streamingTokenUsage.getGenerationTokens()).isEqualTo(referenceTokenUsage.getGenerationTokens());
+		assertThat(streamingTokenUsage.getCompletionTokens()).isEqualTo(referenceTokenUsage.getCompletionTokens());
 		assertThat(streamingTokenUsage.getTotalTokens()).isEqualTo(referenceTokenUsage.getTotalTokens());
 
 	}
@@ -400,7 +400,7 @@ void validateCallResponseMetadata(String model) {
 		assertThat(response.getMetadata().getId()).isNotEmpty();
 		assertThat(response.getMetadata().getModel()).containsIgnoringCase(model);
 		assertThat(response.getMetadata().getUsage().getPromptTokens()).isPositive();
-		assertThat(response.getMetadata().getUsage().getGenerationTokens()).isPositive();
+		assertThat(response.getMetadata().getUsage().getCompletionTokens()).isPositive();
 		assertThat(response.getMetadata().getUsage().getTotalTokens()).isPositive();
 	}
 

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/chat/QianFanChatModelObservationIT.java
Patch:
@@ -148,7 +148,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiChatModelObservationIT.java
Patch:
@@ -148,7 +148,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(
 					ChatModelObservationDocumentation.HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(
 					ChatModelObservationDocumentation.HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/chat/ZhiPuAiChatModelObservationIT.java
Patch:
@@ -143,7 +143,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(responseMetadata.getUsage().getGenerationTokens()))
+					String.valueOf(responseMetadata.getUsage().getCompletionTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getTotalTokens()))
 			.hasBeenStarted()

File: spring-ai-core/src/main/java/org/springframework/ai/chat/observation/DefaultChatModelObservationConvention.java
Patch:
@@ -222,10 +222,10 @@ protected KeyValues usageInputTokens(KeyValues keyValues, ChatModelObservationCo
 	protected KeyValues usageOutputTokens(KeyValues keyValues, ChatModelObservationContext context) {
 		if (context.getResponse() != null && context.getResponse().getMetadata() != null
 				&& context.getResponse().getMetadata().getUsage() != null
-				&& context.getResponse().getMetadata().getUsage().getGenerationTokens() != null) {
+				&& context.getResponse().getMetadata().getUsage().getCompletionTokens() != null) {
 			return keyValues.and(
 					ChatModelObservationDocumentation.HighCardinalityKeyNames.USAGE_OUTPUT_TOKENS.asString(),
-					String.valueOf(context.getResponse().getMetadata().getUsage().getGenerationTokens()));
+					String.valueOf(context.getResponse().getMetadata().getUsage().getCompletionTokens()));
 		}
 		return keyValues;
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/model/observation/ModelUsageMetricsGenerator.java
Patch:
@@ -54,13 +54,13 @@ public static void generate(Usage usage, Observation.Context context, MeterRegis
 				.increment(usage.getPromptTokens());
 		}
 
-		if (usage.getGenerationTokens() != null) {
+		if (usage.getCompletionTokens() != null) {
 			Counter.builder(AiObservationMetricNames.TOKEN_USAGE.value())
 				.tag(AiObservationMetricAttributes.TOKEN_TYPE.value(), AiTokenType.OUTPUT.value())
 				.description(DESCRIPTION)
 				.tags(createTags(context))
 				.register(meterRegistry)
-				.increment(usage.getGenerationTokens());
+				.increment(usage.getCompletionTokens());
 		}
 
 		if (usage.getTotalTokens() != null) {

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/QuestionAnswerAdvisorTests.java
Patch:
@@ -104,7 +104,7 @@ public Long getTokensRemaining() {
 						public Duration getTokensReset() {
 							return Duration.ofSeconds(9);
 						}
-					}).usage(new DefaultUsage(6L, 7L))
+					}).usage(new DefaultUsage(6, 7))
 					.build()));
 		// @formatter:on
 
@@ -137,7 +137,7 @@ public Duration getTokensReset() {
 		assertThat(response.getMetadata().getRateLimit().getTokensRemaining()).isEqualTo(8L);
 		assertThat(response.getMetadata().getRateLimit().getTokensReset()).isEqualTo(Duration.ofSeconds(9));
 		assertThat(response.getMetadata().getUsage().getPromptTokens()).isEqualTo(6L);
-		assertThat(response.getMetadata().getUsage().getGenerationTokens()).isEqualTo(7L);
+		assertThat(response.getMetadata().getUsage().getCompletionTokens()).isEqualTo(7L);
 		assertThat(response.getMetadata().getUsage().getTotalTokens()).isEqualTo(6L + 7L);
 		assertThat(response.getMetadata().get("key6").toString()).isEqualTo("value6");
 		assertThat(response.getMetadata().get("key1").toString()).isEqualTo("value1");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java
Patch:
@@ -151,7 +151,7 @@ void streamingWithTokenUsage() {
 			}).collect(Collectors.joining());
 
 			assertThat(streamingTokenUsage[0].getPromptTokens()).isGreaterThan(0);
-			assertThat(streamingTokenUsage[0].getGenerationTokens()).isGreaterThan(0);
+			assertThat(streamingTokenUsage[0].getCompletionTokens()).isGreaterThan(0);
 			assertThat(streamingTokenUsage[0].getTotalTokens()).isGreaterThan(0);
 
 			assertThat(response).isNotEmpty();

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/AbstractObservationVectorStore.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.List;
 import java.util.Optional;
-import java.util.stream.Collectors;
 
 import io.micrometer.observation.ObservationRegistry;
 
@@ -150,7 +149,6 @@ public List<Document> similaritySearch(SearchRequest request) {
 	 * logic.
 	 * @param filterExpression Filter expression to identify documents to delete
 	 */
-	@Nullable
 	protected void doDelete(Filter.Expression filterExpression) {
 		// this is temporary until we implement this method in all concrete vector stores,
 		// at which point

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/chroma/vectorstore/ChromaApi.java
Patch:
@@ -338,7 +338,7 @@ public AddEmbeddingsRequest(String id, float[] embedding, Map<String, Object> me
 	 */
 	@JsonInclude(JsonInclude.Include.NON_NULL)
 	public record DeleteEmbeddingsRequest(// @formatter:off
-		@JsonProperty("ids") List<String> ids,
+		@Nullable @JsonProperty("ids") List<String> ids,
 		@Nullable @JsonProperty("where") Map<String, Object> where) { // @formatter:on
 
 		public DeleteEmbeddingsRequest(List<String> ids) {

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/pgvector/PgVectorStore.java
Patch:
@@ -495,14 +495,14 @@ public enum PgIndexType {
 	 */
 	public enum PgDistanceType {
 
-		// NOTE: works only if If vectors are normalized to length 1 (like OpenAI
+		// NOTE: works only if vectors are normalized to length 1 (like OpenAI
 		// embeddings), use inner product for best performance.
 		// The Sentence transformers are NOT normalized:
 		// https://github.com/UKPLab/sentence-transformers/issues/233
 		EUCLIDEAN_DISTANCE("<->", "vector_l2_ops",
 				"SELECT *, embedding <-> ? AS distance FROM %s WHERE embedding <-> ? < ? %s ORDER BY distance LIMIT ? "),
 
-		// NOTE: works only if If vectors are normalized to length 1 (like OpenAI
+		// NOTE: works only if vectors are normalized to length 1 (like OpenAI
 		// embeddings), use inner product for best performance.
 		// The Sentence transformers are NOT normalized:
 		// https://github.com/UKPLab/sentence-transformers/issues/233

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/api/MoonshotApi.java
Patch:
@@ -532,7 +532,8 @@ public record Choice(
 		// @formatter:off
 			@JsonProperty("index") Integer index,
 			@JsonProperty("message") ChatCompletionMessage message,
-			@JsonProperty("finish_reason") ChatCompletionFinishReason finishReason) {
+			@JsonProperty("finish_reason") ChatCompletionFinishReason finishReason,
+			@JsonProperty("usage") Usage usage) {
 			 // @formatter:on
 		}
 

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/api/MoonshotStreamFunctionCallingHelper.java
Patch:
@@ -64,8 +64,10 @@ private ChunkChoice merge(ChunkChoice previous, ChunkChoice current) {
 				: previous.finishReason());
 		Integer index = (current.index() != null ? current.index() : previous.index());
 
+		MoonshotApi.Usage usage = current.usage() != null ? current.usage() : previous.usage();
+
 		ChatCompletionMessage message = merge(previous.delta(), current.delta());
-		return new ChunkChoice(index, message, finishReason, null);
+		return new ChunkChoice(index, message, finishReason, usage);
 	}
 
 	private ChatCompletionMessage merge(ChatCompletionMessage previous, ChatCompletionMessage current) {

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotRetryTests.java
Patch:
@@ -80,7 +80,7 @@ public void beforeEach() {
 	public void moonshotChatTransientError() {
 
 		var choice = new ChatCompletion.Choice(0, new ChatCompletionMessage("Response", Role.ASSISTANT),
-				ChatCompletionFinishReason.STOP);
+				ChatCompletionFinishReason.STOP, null);
 		ChatCompletion expectedChatCompletion = new ChatCompletion("id", "chat.completion", 789L, "model",
 				List.of(choice), new MoonshotApi.Usage(10, 10, 10));
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/DefaultFunctionCallbackBuilder.java
Patch:
@@ -144,9 +144,9 @@ public FunctionCallback build() {
 			BiFunction<I, ToolContext, O> finalBiFunction = (this.biFunction != null) ? this.biFunction
 					: (request, context) -> this.function.apply(request);
 
-			return new FunctionInvokingFunctionCallback(this.name, this.getDescriptionExt(), this.getInputTypeSchema(),
-					this.inputType, (Function<I, String>) this.getResponseConverter(), this.getObjectMapper(),
-					finalBiFunction);
+			return new FunctionInvokingFunctionCallback<>(this.name, this.getDescriptionExt(),
+					this.getInputTypeSchema(), this.inputType, (Function<O, String>) this.getResponseConverter(),
+					this.getObjectMapper(), finalBiFunction);
 		}
 
 		private String getDescriptionExt() {

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SimpleVectorStore.java
Patch:
@@ -38,7 +38,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectWriter;
 import com.fasterxml.jackson.databind.json.JsonMapper;
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,7 +48,6 @@
 import org.springframework.ai.util.JacksonUtils;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.core.io.Resource;
 
 /**

File: vector-stores/spring-ai-azure-cosmos-db-store/src/main/java/org/springframework/ai/vectorstore/cosmosdb/CosmosDBVectorStore.java
Patch:
@@ -381,7 +381,7 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 	 *
 	 * @since 1.0.0
 	 */
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final CosmosAsyncClient cosmosClient;
 

File: vector-stores/spring-ai-coherence-store/src/main/java/org/springframework/ai/vectorstore/coherence/CoherenceVectorStore.java
Patch:
@@ -283,7 +283,7 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 	 *
 	 * @since 1.0.0
 	 */
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final Session session;
 

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/gemfire/GemFireVectorStore.java
Patch:
@@ -559,7 +559,7 @@ public void setDeleteData(boolean deleteData) {
 	 *
 	 * @since 1.0.0
 	 */
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private String host = GemFireVectorStore.DEFAULT_HOST;
 

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDBAtlasVectorStore.java
Patch:
@@ -318,7 +318,7 @@ public static Builder builder(MongoTemplate mongoTemplate, EmbeddingModel embedd
 		return new Builder(mongoTemplate, embeddingModel);
 	}
 
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final MongoTemplate mongoTemplate;
 

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/neo4j/Neo4jVectorStore.java
Patch:
@@ -366,7 +366,7 @@ public static Builder builder(Driver driver, EmbeddingModel embeddingModel) {
 		return new Builder(driver, embeddingModel);
 	}
 
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final Driver driver;
 

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/opensearch/OpenSearchVectorStore.java
Patch:
@@ -365,7 +365,7 @@ public record OpenSearchDocument(String id, String content, Map<String, Object>
 	/**
 	 * Builder class for creating OpenSearchVectorStore instances.
 	 */
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final OpenSearchClient openSearchClient;
 

File: vector-stores/spring-ai-typesense-store/src/test/java/org/springframework/ai/vectorstore/typesense/TypesenseVectorStoreBuilderTests.java
Patch:
@@ -109,7 +109,7 @@ void nullBatchingStrategyShouldThrowException() {
 		assertThatThrownBy(
 				() -> TypesenseVectorStore.builder(this.client, this.embeddingModel).batchingStrategy(null).build())
 			.isInstanceOf(IllegalArgumentException.class)
-			.hasMessage("batchingStrategy must not be null");
+			.hasMessage("BatchingStrategy must not be null");
 	}
 
 }

File: vector-stores/spring-ai-azure-store/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -42,7 +42,6 @@
 import com.azure.search.documents.models.SearchOptions;
 import com.azure.search.documents.models.VectorSearchOptions;
 import com.azure.search.documents.models.VectorizedQuery;
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -60,7 +59,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/cassandra/CassandraVectorStore.java
Patch:
@@ -60,7 +60,6 @@
 import com.datastax.oss.driver.api.querybuilder.schema.CreateTableStart;
 import com.datastax.oss.driver.shaded.guava.common.annotations.VisibleForTesting;
 import com.datastax.oss.driver.shaded.guava.common.base.Preconditions;
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -80,7 +79,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.util.Assert;
 
 /**

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/chroma/vectorstore/ChromaVectorStore.java
Patch:
@@ -25,7 +25,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
-import io.micrometer.observation.ObservationRegistry;
 
 import org.springframework.ai.chroma.vectorstore.ChromaApi.AddEmbeddingsRequest;
 import org.springframework.ai.chroma.vectorstore.ChromaApi.DeleteEmbeddingsRequest;
@@ -44,7 +43,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;

File: vector-stores/spring-ai-coherence-store/src/main/java/org/springframework/ai/vectorstore/coherence/CoherenceVectorStore.java
Patch:
@@ -283,7 +283,7 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 	 *
 	 * @since 1.0.0
 	 */
-	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final Session session;
 

File: vector-stores/spring-ai-elasticsearch-store/src/test/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStoreIT.java
Patch:
@@ -42,12 +42,12 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.elasticsearch.ElasticsearchContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;

File: vector-stores/spring-ai-hanadb-store/src/main/java/org/springframework/ai/vectorstore/hanadb/HanaCloudVectorStore.java
Patch:
@@ -24,7 +24,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -38,7 +37,6 @@
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 

File: vector-stores/spring-ai-mariadb-store/src/main/java/org/springframework/ai/vectorstore/mariadb/MariaDBVectorStore.java
Patch:
@@ -28,7 +28,6 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -45,7 +44,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.jdbc.core.BatchPreparedStatementSetter;
 import org.springframework.jdbc.core.JdbcTemplate;

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/milvus/MilvusVectorStore.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.stream.Collectors;
 
 import com.alibaba.fastjson.JSONObject;
-import io.micrometer.observation.ObservationRegistry;
 import io.milvus.client.MilvusServiceClient;
 import io.milvus.common.clientenum.ConsistencyLevelEnum;
 import io.milvus.exception.ParamException;
@@ -68,7 +67,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDBAtlasVectorStore.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.Optional;
 
 import com.mongodb.MongoCommandException;
-import io.micrometer.observation.ObservationRegistry;
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.document.DocumentMetadata;
@@ -37,7 +36,6 @@
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.data.mongodb.UncategorizedMongoDbException;
 import org.springframework.data.mongodb.core.MongoTemplate;
@@ -323,7 +321,7 @@ public static Builder builder(MongoTemplate mongoTemplate, EmbeddingModel embedd
 		return new Builder(mongoTemplate, embeddingModel);
 	}
 
-	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final MongoTemplate mongoTemplate;
 

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/neo4j/Neo4jVectorStoreIT.java
Patch:
@@ -28,12 +28,12 @@
 import org.neo4j.driver.AuthTokens;
 import org.neo4j.driver.Driver;
 import org.neo4j.driver.GraphDatabase;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.containers.Neo4jContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/opensearch/OpenSearchVectorStoreIT.java
Patch:
@@ -39,11 +39,11 @@
 import org.opensearch.client.opensearch.OpenSearchClient;
 import org.opensearch.client.transport.httpclient5.ApacheHttpClient5TransportBuilder;
 import org.opensearch.testcontainers.OpensearchContainer;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;

File: vector-stores/spring-ai-oracle-store/src/main/java/org/springframework/ai/vectorstore/oracle/OracleVectorStore.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Map;
 import java.util.Optional;
 
-import io.micrometer.observation.ObservationRegistry;
 import oracle.jdbc.OracleType;
 import oracle.sql.VECTOR;
 import oracle.sql.json.OracleJsonFactory;
@@ -51,7 +50,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.jdbc.core.BatchPreparedStatementSetter;
 import org.springframework.jdbc.core.JdbcTemplate;

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/pgvector/PgVectorStore.java
Patch:
@@ -29,7 +29,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.json.JsonMapper;
 import com.pgvector.PGvector;
-import io.micrometer.observation.ObservationRegistry;
 import org.postgresql.util.PGobject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -49,14 +48,12 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.jdbc.core.BatchPreparedStatementSetter;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
 import org.springframework.jdbc.core.SqlTypeValue;
 import org.springframework.jdbc.core.StatementCreatorUtils;
-import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;
 

File: vector-stores/spring-ai-pinecone-store/src/main/java/org/springframework/ai/vectorstore/pinecone/PineconeVectorStore.java
Patch:
@@ -26,7 +26,6 @@
 import com.google.protobuf.Struct;
 import com.google.protobuf.Value;
 import com.google.protobuf.util.JsonFormat;
-import io.micrometer.observation.ObservationRegistry;
 import io.pinecone.PineconeClient;
 import io.pinecone.PineconeClientConfig;
 import io.pinecone.PineconeConnection;
@@ -51,7 +50,6 @@
 import org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;

File: vector-stores/spring-ai-qdrant-store/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -45,7 +45,6 @@
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
 

File: vector-stores/spring-ai-typesense-store/src/main/java/org/springframework/ai/vectorstore/typesense/TypesenseVectorStore.java
Patch:
@@ -23,10 +23,8 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.ai.document.DocumentMetadata;
 import org.typesense.api.Client;
 import org.typesense.api.FieldTypes;
 import org.typesense.model.CollectionResponse;
@@ -39,6 +37,7 @@
 import org.typesense.model.MultiSearchSearchesParameter;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.BatchingStrategy;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
@@ -50,7 +49,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;

File: vector-stores/spring-ai-typesense-store/src/test/java/org/springframework/ai/vectorstore/typesense/TypesenseVectorStoreIT.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.UUID;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
@@ -35,6 +34,7 @@
 import org.typesense.resources.Node;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;

File: vector-stores/spring-ai-weaviate-store/src/main/java/org/springframework/ai/vectorstore/weaviate/WeaviateVectorStore.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import io.micrometer.observation.ObservationRegistry;
 import io.weaviate.client.WeaviateClient;
 import io.weaviate.client.base.Result;
 import io.weaviate.client.base.WeaviateErrorMessage;
@@ -58,7 +57,6 @@
 import org.springframework.ai.vectorstore.filter.Filter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.StringUtils;

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/redis/RedisVectorStore.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
-import io.micrometer.observation.ObservationRegistry;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import redis.clients.jedis.JedisPooled;
@@ -60,7 +59,6 @@
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
-import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;
@@ -179,7 +177,6 @@
  * @author Soby Chacko
  * @author Jihoon Kim
  * @see VectorStore
- * @see RedisVectorStoreConfig
  * @see EmbeddingModel
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/client/ChatClientAutoConfiguration.java
Patch:
@@ -46,6 +46,7 @@
  * @author Mark Pollack
  * @author Josh Long
  * @author Arjen Poutsma
+ * @author Thomas Vitale
  * @since 1.0.0
  */
 @AutoConfiguration
@@ -67,6 +68,7 @@ ChatClientBuilderConfigurer chatClientBuilderConfigurer(ObjectProvider<ChatClien
 
 	@Bean
 	@Scope("prototype")
+	@ConditionalOnMissingBean
 	ChatClient.Builder chatClientBuilder(ChatClientBuilderConfigurer chatClientBuilderConfigurer, ChatModel chatModel,
 			ObjectProvider<ObservationRegistry> observationRegistry,
 			ObjectProvider<ChatClientObservationConvention> observationConvention) {

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallbackWrapper.java
Patch:
@@ -40,7 +40,7 @@
  * @param <O> the output type
  * @author Christian Tzolov
  * @author Sebastien Deleuze
- * @deprecated in favor of {@link FunctionCallbackWrapper.Builder}
+ * @deprecated in favor of {@link FunctionCallback.Builder}
  */
 @Deprecated
 public final class FunctionCallbackWrapper<I, O> extends AbstractFunctionCallback<I, O> {

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatModel.java
Patch:
@@ -29,8 +29,6 @@
 import io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.ai.model.Media;
-import org.springframework.util.MimeType;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
@@ -62,6 +60,7 @@
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;
 import org.springframework.ai.mistralai.metadata.MistralAiUsage;
+import org.springframework.ai.model.Media;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallbackResolver;
@@ -71,6 +70,7 @@
 import org.springframework.retry.support.RetryTemplate;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
+import org.springframework.util.MimeType;
 
 /**
  * Represents a Mistral AI Chat Model.

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/PaymentStatusFunctionCallingIT.java
Patch:
@@ -24,7 +24,6 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.slf4j.Logger;

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java
Patch:
@@ -672,15 +672,15 @@ public record ChatResponse(
 		}
 
 		public Duration getTotalDuration() {
-			return (this.totalDuration() != null)? Duration.ofNanos(this.totalDuration()) : null;
+			return (this.totalDuration() != null) ? Duration.ofNanos(this.totalDuration()) : null;
 		}
 
 		public Duration getLoadDuration() {
-			return (this.loadDuration() != null)? Duration.ofNanos(this.loadDuration()) : null;
+			return (this.loadDuration() != null) ? Duration.ofNanos(this.loadDuration()) : null;
 		}
 
 		public Duration getPromptEvalDuration() {
-			return (this.promptEvalDuration() != null)? Duration.ofNanos(this.promptEvalDuration()) : null;
+			return (this.promptEvalDuration() != null) ? Duration.ofNanos(this.promptEvalDuration()) : null;
 		}
 
 		public Duration getEvalDuration() {

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/management/OllamaModelManager.java
Patch:
@@ -117,7 +117,7 @@ public void pullModel(String modelName, PullModelStrategy pullModelStrategy) {
 						logger.info("Pulling the '{}' model - Status: {}", modelName, progressResponses.get(progressResponses.size() - 1).status());
 					}
 				})
-				.takeUntil(progressResponses -> 
+				.takeUntil(progressResponses ->
 					progressResponses.get(0) != null && "success".equals(progressResponses.get(0).status()))
 				.timeout(this.options.timeout())
 				.retryWhen(Retry.backoff(this.options.maxRetries(), Duration.ofSeconds(5)))

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -325,15 +325,15 @@ public void setN(Integer n) {
 	}
 
 	public List<String> getOutputModalities() {
-		return outputModalities;
+		return this.outputModalities;
 	}
 
 	public void setOutputModalities(List<String> modalities) {
 		this.outputModalities = modalities;
 	}
 
 	public AudioParameters getOutputAudio() {
-		return outputAudio;
+		return this.outputAudio;
 	}
 
 	public void setOutputAudio(AudioParameters audio) {

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageOptions.java
Patch:
@@ -16,11 +16,12 @@
 
 package org.springframework.ai.openai;
 
+import java.util.Objects;
+
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import org.springframework.ai.image.ImageOptions;
 
-import java.util.Objects;
+import org.springframework.ai.image.ImageOptions;
 
 /**
  * OpenAI Image API options. OpenAiImageOptions.java

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -960,7 +960,7 @@ public enum AudioResponseFormat {
 				@JsonProperty("mp3") MP3,
 				/** FLAC format */
 				@JsonProperty("flac") FLAC,
-				/** OPUS format */	
+				/** OPUS format */
 				@JsonProperty("opus") OPUS,
 				/** PCM16 format */
 				@JsonProperty("pcm16") PCM16,

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 the original author or authors.
+ * Copyright 2024-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -47,7 +47,6 @@
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationRegistry;
 import io.micrometer.observation.contextpropagation.ObservationThreadLocalAccessor;
-import org.springframework.ai.vertexai.gemini.common.VertexAiGeminiSafetySetting;
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.chat.messages.AssistantMessage;
@@ -77,6 +76,7 @@
 import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.ai.vertexai.gemini.common.VertexAiGeminiConstants;
+import org.springframework.ai.vertexai.gemini.common.VertexAiGeminiSafetySetting;
 import org.springframework.ai.vertexai.gemini.metadata.VertexAiUsage;
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.lang.NonNull;

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatOptions.java
Patch:
@@ -273,7 +273,7 @@ public void setGoogleSearchRetrieval(boolean googleSearchRetrieval) {
 	}
 
 	public List<VertexAiGeminiSafetySetting> getSafetySettings() {
-		return safetySettings;
+		return this.safetySettings;
 	}
 
 	public void setSafetySettings(List<VertexAiGeminiSafetySetting> safetySettings) {

File: models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/WatsonxAiEmbeddingModelTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.embedding.EmbeddingOptions;
 import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.watsonx.api.WatsonxAiApi;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/RetrievalAugmentationAdvisor.java
Patch:
@@ -140,7 +140,7 @@ public AdvisedRequest before(AdvisedRequest request) {
 	 * documents.
 	 */
 	private Map.Entry<Query, List<Document>> getDocumentsForQuery(Query query) {
-		List<Document> documents = documentRetriever.retrieve(query);
+		List<Document> documents = this.documentRetriever.retrieve(query);
 		return Map.entry(query, documents);
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/AdvisedResponse.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Map;
 import java.util.function.Function;
 
-import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.lang.Nullable;
 import org.springframework.util.Assert;

File: spring-ai-core/src/main/java/org/springframework/ai/document/DocumentMetadata.java
Patch:
@@ -49,7 +49,7 @@ public String value() {
 
 	@Override
 	public String toString() {
-		return value;
+		return this.value;
 	}
 
 }

File: spring-ai-core/src/main/java/org/springframework/ai/evaluation/EvaluationRequest.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Objects;
 
 import org.springframework.ai.document.Document;
-import org.springframework.ai.model.Content;
 
 /**
  * Represents an evaluation request, which includes the user's text, a list of content

File: spring-ai-core/src/main/java/org/springframework/ai/evaluation/Evaluator.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.stream.Collectors;
 
 import org.springframework.ai.document.Document;
-import org.springframework.ai.model.Content;
 import org.springframework.util.StringUtils;
 
 @FunctionalInterface

File: spring-ai-core/src/main/java/org/springframework/ai/evaluation/FactCheckingEvaluator.java
Patch:
@@ -127,7 +127,7 @@ public EvaluationResponse evaluate(EvaluationRequest evaluationRequest) {
 
 		String evaluationResponse = this.chatClientBuilder.build()
 			.prompt()
-			.user(userSpec -> userSpec.text(evaluationPrompt).param("document", context).param("claim", response))
+			.user(userSpec -> userSpec.text(this.evaluationPrompt).param("document", context).param("claim", response))
 			.call()
 			.content();
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/Media.java
Patch:
@@ -161,7 +161,7 @@ public Media(MimeType mimeType, Resource resource, String id) {
 	 * Creates a new Media builder.
 	 * @return a new Media builder instance
 	 */
-	public static Builder builder() {
+	public static final Builder builder() {
 		return new Builder();
 	}
 
@@ -228,7 +228,7 @@ public String getName() {
 	/**
 	 * Builder class for Media.
 	 */
-	public static class Builder {
+	public static final class Builder {
 
 		private String id;
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/MediaContent.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.ai.model;
 
-import java.util.Collection;
 import java.util.List;
 
 public interface MediaContent extends Content {

File: spring-ai-core/src/main/java/org/springframework/ai/moderation/ModerationOptionsBuilder.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.ai.moderation;
 
-import java.util.List;
-
 /**
  * A builder class for creating instances of ModerationOptions. Use the builder() method
  * to obtain a new instance of ModerationOptionsBuilder. Use the withModel() method to set

File: spring-ai-core/src/main/java/org/springframework/ai/rag/generation/augmentation/ContextualQueryAugmenter.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.document.Document;
-import org.springframework.ai.model.Content;
 import org.springframework.ai.rag.Query;
 import org.springframework.ai.util.PromptAssert;
 import org.springframework.lang.Nullable;

File: spring-ai-core/src/main/java/org/springframework/ai/rag/preretrieval/query/transformation/RewriteQueryTransformer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.PromptTemplate;
@@ -79,7 +80,7 @@ public Query transform(Query query) {
 
 		var rewrittenQueryText = this.chatClient.prompt()
 			.user(user -> user.text(this.promptTemplate.getTemplate())
-				.param("target", targetSearchSystem)
+				.param("target", this.targetSearchSystem)
 				.param("query", query.text()))
 			.options(ChatOptions.builder().temperature(0.0).build())
 			.call()
@@ -126,7 +127,7 @@ public Builder targetSearchSystem(String targetSearchSystem) {
 		}
 
 		public RewriteQueryTransformer build() {
-			return new RewriteQueryTransformer(chatClientBuilder, promptTemplate, targetSearchSystem);
+			return new RewriteQueryTransformer(this.chatClientBuilder, this.promptTemplate, this.targetSearchSystem);
 		}
 
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/rag/preretrieval/query/transformation/TranslationQueryTransformer.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.PromptTemplate;

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/RetrievalAugmentationAdvisorTests.java
Patch:
@@ -16,8 +16,11 @@
 
 package org.springframework.ai.chat.client.advisor;
 
+import java.util.List;
+
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.model.ChatModel;
@@ -29,8 +32,6 @@
 import org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;
 import org.springframework.ai.rag.retrieval.search.DocumentRetriever;
 
-import java.util.List;
-
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.BDDMockito.given;

File: spring-ai-core/src/test/java/org/springframework/ai/rag/preretrieval/query/transformation/CompressionQueryTransformerTests.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.ai.rag.preretrieval.query.transformation;
 
 import org.junit.jupiter.api.Test;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 

File: spring-ai-core/src/test/java/org/springframework/ai/rag/preretrieval/query/transformation/RewriteQueryTransformerTests.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.ai.rag.preretrieval.query.transformation;
 
 import org.junit.jupiter.api.Test;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 

File: spring-ai-core/src/test/java/org/springframework/ai/rag/retrieval/join/ConcatenationDocumentJoinerTests.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import org.junit.jupiter.api.Test;
+
 import org.springframework.ai.document.Document;
 import org.springframework.ai.rag.Query;
 

File: vector-stores/spring-ai-azure-store/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -203,7 +203,7 @@ protected AzureVectorStore(Builder builder) {
 		this.defaultTopK = builder.defaultTopK;
 		this.defaultSimilarityThreshold = builder.defaultSimilarityThreshold;
 		this.indexName = builder.indexName;
-		this.filterExpressionConverter = new AzureAiSearchFilterExpressionConverter(filterMetadataFields);
+		this.filterExpressionConverter = new AzureAiSearchFilterExpressionConverter(this.filterMetadataFields);
 	}
 
 	public static Builder builder(SearchIndexClient searchIndexClient, EmbeddingModel embeddingModel) {

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/cassandra/CassandraRichSchemaVectorStoreIT.java
Patch:
@@ -37,14 +37,14 @@
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.containers.CassandraContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.shaded.org.apache.commons.lang3.RandomStringUtils;
 
 import org.springframework.ai.cassandra.CassandraImage;
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/cassandra/CassandraVectorStoreIT.java
Patch:
@@ -30,13 +30,13 @@
 import com.datastax.oss.driver.api.core.type.DataTypes;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.containers.CassandraContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
 import org.springframework.ai.cassandra.CassandraImage;
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;

File: vector-stores/spring-ai-mariadb-store/src/test/java/org/springframework/ai/vectorstore/mariadb/MariaDBStoreTests.java
Patch:
@@ -26,8 +26,6 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
-import org.springframework.ai.vectorstore.mariadb.MariaDBSchemaValidator;
-import org.springframework.ai.vectorstore.mariadb.MariaDBVectorStore;
 import org.springframework.jdbc.core.BatchPreparedStatementSetter;
 import org.springframework.jdbc.core.JdbcTemplate;
 

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/milvus/MilvusVectorStore.java
Patch:
@@ -572,7 +572,7 @@ private String getSimilarityMetric() {
 		return SIMILARITY_TYPE_MAPPING.get(this.metricType).value();
 	}
 
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final MilvusServiceClient milvusClient;
 

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/milvus/MilvusVectorStoreIT.java
Patch:
@@ -30,12 +30,12 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.milvus.MilvusContainer;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;

File: vector-stores/spring-ai-oracle-store/src/test/java/org/springframework/ai/vectorstore/oracle/OracleVectorStoreIT.java
Patch:
@@ -32,13 +32,13 @@
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.CsvSource;
 import org.junit.jupiter.params.provider.ValueSource;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.oracle.OracleContainer;
 import org.testcontainers.utility.MountableFile;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;
@@ -328,9 +328,9 @@ public VectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embeddi
 			return OracleVectorStore.builder(jdbcTemplate, embeddingModel)
 				.tableName(OracleVectorStore.DEFAULT_TABLE_NAME)
 				.indexType(OracleVectorStore.OracleVectorStoreIndexType.IVF)
-				.distanceType(distanceType)
+				.distanceType(this.distanceType)
 				.dimensions(384)
-				.searchAccuracy(searchAccuracy)
+				.searchAccuracy(this.searchAccuracy)
 				.initializeSchema(true)
 				.removeExistingVectorStoreTable(true)
 				.forcedNormalization(true)

File: vector-stores/spring-ai-oracle-store/src/test/java/org/springframework/ai/vectorstore/oracle/OracleVectorStoreObservationIT.java
Patch:
@@ -42,10 +42,10 @@
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
-import org.springframework.ai.vectorstore.oracle.OracleVectorStore.OracleVectorStoreDistanceType;
 import org.springframework.ai.vectorstore.observation.DefaultVectorStoreObservationConvention;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.HighCardinalityKeyNames;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.LowCardinalityKeyNames;
+import org.springframework.ai.vectorstore.oracle.OracleVectorStore.OracleVectorStoreDistanceType;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/pgvector/PgVectorStore.java
Patch:
@@ -617,7 +617,7 @@ private Map<String, Object> toMap(PGobject pgObject) {
 
 	}
 
-	public static class PgVectorStoreBuilder extends AbstractVectorStoreBuilder<PgVectorStoreBuilder> {
+	public static final class PgVectorStoreBuilder extends AbstractVectorStoreBuilder<PgVectorStoreBuilder> {
 
 		private final JdbcTemplate jdbcTemplate;
 

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/pgvector/PgVectorStoreCustomNamesIT.java
Patch:
@@ -30,8 +30,8 @@
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.vectorstore.pgvector.PgVectorStore.PgIndexType;
 import org.springframework.ai.vectorstore.VectorStore;
+import org.springframework.ai.vectorstore.pgvector.PgVectorStore.PgIndexType;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/pgvector/PgVectorStoreIT.java
Patch:
@@ -34,19 +34,19 @@
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
 import org.junit.jupiter.params.provider.ValueSource;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.containers.PostgreSQLContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.vectorstore.pgvector.PgVectorStore.PgIndexType;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.filter.FilterExpressionTextParser.FilterExpressionParseException;
+import org.springframework.ai.vectorstore.pgvector.PgVectorStore.PgIndexType;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/pgvector/PgVectorStoreObservationIT.java
Patch:
@@ -41,12 +41,12 @@
 import org.springframework.ai.openai.OpenAiChatModel;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.vectorstore.pgvector.PgVectorStore.PgIndexType;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.observation.DefaultVectorStoreObservationConvention;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.HighCardinalityKeyNames;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.LowCardinalityKeyNames;
+import org.springframework.ai.vectorstore.pgvector.PgVectorStore.PgIndexType;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/pgvector/PgVectorStoreWithChatMemoryAdvisorIT.java
Patch:
@@ -146,9 +146,9 @@ void advisedChatShouldHaveSimilarMessagesFromVectorStore() throws Exception {
 	private @NotNull EmbeddingModel embeddingNModelShouldAlwaysReturnFakedEmbed() {
 		EmbeddingModel embeddingModel = mock(EmbeddingModel.class);
 
-		Mockito.doAnswer(invocationOnMock -> {
-			return List.of(this.embed, this.embed);
-		}).when(embeddingModel).embed(ArgumentMatchers.any(), any(), any());
+		Mockito.doAnswer(invocationOnMock -> List.of(this.embed, this.embed))
+			.when(embeddingModel)
+			.embed(ArgumentMatchers.any(), any(), any());
 		given(embeddingModel.embed(any(String.class))).willReturn(this.embed);
 		return embeddingModel;
 	}

File: vector-stores/spring-ai-pinecone-store/src/test/java/org/springframework/ai/vectorstore/pinecone/PineconeVectorStoreIT.java
Patch:
@@ -36,7 +36,6 @@
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
-import org.springframework.ai.vectorstore.pinecone.PineconeVectorStore.PineconeVectorStoreConfig;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: vector-stores/spring-ai-pinecone-store/src/test/java/org/springframework/ai/vectorstore/pinecone/PineconeVectorStoreObservationIT.java
Patch:
@@ -39,7 +39,6 @@
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
-import org.springframework.ai.vectorstore.pinecone.PineconeVectorStore.PineconeVectorStoreConfig;
 import org.springframework.ai.vectorstore.observation.DefaultVectorStoreObservationConvention;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.HighCardinalityKeyNames;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.LowCardinalityKeyNames;

File: vector-stores/spring-ai-qdrant-store/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -368,7 +368,7 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 	 *
 	 * @since 1.0.0
 	 */
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private final QdrantClient qdrantClient;
 

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/redis/RedisFilterExpressionConverter.java
Patch:
@@ -22,13 +22,13 @@
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
 import org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;
+import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 
 /**
  * Converts {@link Expression} into Redis search filter expression format.

File: vector-stores/spring-ai-redis-store/src/test/java/org/springframework/ai/vectorstore/redis/RedisFilterExpressionConverterTests.java
Patch:
@@ -21,11 +21,11 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
+import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;

File: vector-stores/spring-ai-redis-store/src/test/java/org/springframework/ai/vectorstore/redis/RedisVectorStoreIT.java
Patch:
@@ -26,17 +26,17 @@
 import com.redis.testcontainers.RedisStackContainer;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import redis.clients.jedis.JedisPooled;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
-import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
+import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: vector-stores/spring-ai-redis-store/src/test/java/org/springframework/ai/vectorstore/redis/RedisVectorStoreObservationIT.java
Patch:
@@ -38,12 +38,12 @@
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.observation.conventions.VectorStoreSimilarityMetric;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
-import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.observation.DefaultVectorStoreObservationConvention;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.HighCardinalityKeyNames;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationDocumentation.LowCardinalityKeyNames;
+import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: vector-stores/spring-ai-typesense-store/src/main/java/org/springframework/ai/vectorstore/typesense/TypesenseVectorStore.java
Patch:
@@ -393,7 +393,7 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 			.similarityMetric(VectorStoreSimilarityMetric.COSINE.value());
 	}
 
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private String collectionName = DEFAULT_COLLECTION_NAME;
 

File: vector-stores/spring-ai-weaviate-store/src/main/java/org/springframework/ai/vectorstore/weaviate/WeaviateVectorStore.java
Patch:
@@ -531,7 +531,7 @@ public enum Type {
 		}
 	}
 
-	public static final class Builder extends AbstractVectorStoreBuilder<Builder> {
+	public static class Builder extends AbstractVectorStoreBuilder<Builder> {
 
 		private String weaviateObjectClass = "SpringAiWeaviate";
 

File: vector-stores/spring-ai-weaviate-store/src/test/java/org/springframework/ai/vectorstore/weaviate/WeaviateVectorStoreIT.java
Patch:
@@ -26,13 +26,13 @@
 import io.weaviate.client.Config;
 import io.weaviate.client.WeaviateClient;
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.document.DocumentMetadata;
 import org.testcontainers.containers.wait.strategy.Wait;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.weaviate.WeaviateContainer;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;

File: spring-ai-spring-boot-docker-compose/src/test/java/org/springframework/ai/docker/compose/service/connection/weaviate/WeaviateDockerComposeConnectionDetailsFactoryIT.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.springframework.ai.docker.compose.service.connection.weaviate;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.testcontainers.utility.DockerImageName;
 
@@ -31,6 +32,7 @@ class WeaviateDockerComposeConnectionDetailsFactoryIT extends AbstractDockerComp
 	}
 
 	@Test
+	@Disabled("GH-2026")
 	void runCreatesConnectionDetails() {
 		WeaviateConnectionDetails connectionDetails = run(WeaviateConnectionDetails.class);
 		assertThat(connectionDetails.getHost()).isNotNull();

File: vector-stores/spring-ai-coherence-store/src/main/java/org/springframework/ai/vectorstore/coherence/CoherenceVectorStore.java
Patch:
@@ -323,8 +323,8 @@ String getMapName() {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.NEO4J.value(), operationName)
-			.withCollectionName(this.mapName)
-			.withDimensions(this.embeddingModel.dimensions());
+			.collectionName(this.mapName)
+			.dimensions(this.embeddingModel.dimensions());
 	}
 
 	/**

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/CreateGeminiRequestTests.java
Patch:
@@ -203,7 +203,7 @@ public void createRequestWithGenerationConfigOptions() {
 					.model("DEFAULT_MODEL")
 					.temperature(66.6)
 					.maxOutputTokens(100)
-					.topK(10.0f)
+					.topK(10)
 					.topP(5.0)
 					.stopSequences(List.of("stop1", "stop2"))
 					.candidateCount(1)
@@ -218,7 +218,7 @@ public void createRequestWithGenerationConfigOptions() {
 		assertThat(request.model().getModelName()).isEqualTo("DEFAULT_MODEL");
 		assertThat(request.model().getGenerationConfig().getTemperature()).isEqualTo(66.6f);
 		assertThat(request.model().getGenerationConfig().getMaxOutputTokens()).isEqualTo(100);
-		assertThat(request.model().getGenerationConfig().getTopK()).isEqualTo(10.0f);
+		assertThat(request.model().getGenerationConfig().getTopK()).isEqualTo(10);
 		assertThat(request.model().getGenerationConfig().getTopP()).isEqualTo(5.0f);
 		assertThat(request.model().getGenerationConfig().getCandidateCount()).isEqualTo(1);
 		assertThat(request.model().getGenerationConfig().getStopSequences(0)).isEqualTo("stop1");

File: models/spring-ai-bedrock-converse/src/main/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModel.java
Patch:
@@ -129,6 +129,7 @@
  * @author Christian Tzolov
  * @author Wei Jiang
  * @author Alexandros Pappas
+ * @author Jihoon Kim
  * @since 1.0.0
  */
 public class BedrockProxyChatModel extends AbstractToolCallSupport implements ChatModel {
@@ -606,6 +607,7 @@ private Flux<ChatResponse> internalStream(Prompt prompt, ChatResponse perviousCh
 
 			ConverseStreamRequest converseStreamRequest = ConverseStreamRequest.builder()
 				.modelId(converseRequest.modelId())
+				.inferenceConfig(converseRequest.inferenceConfig())
 				.messages(converseRequest.messages())
 				.system(converseRequest.system())
 				.additionalModelRequestFields(converseRequest.additionalModelRequestFields())

File: document-readers/pdf-reader/src/test/java/org/springframework/ai/reader/pdf/PagePdfDocumentReaderTests.java
Patch:
@@ -44,6 +44,7 @@ void classpathRead() {
 						.withNumberOfTopTextLinesToDelete(0)
 						.withNumberOfBottomTextLinesToDelete(3)
 						.withNumberOfTopPagesToSkipBeforeDelete(0)
+						.overrideLineSeparator("\n")
 						.build())
 					.withPagesPerDocument(1)
 					.build());

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SearchRequest.java
Patch:
@@ -85,7 +85,7 @@ public static SearchRequest query(String query) {
 	 * string. Use the {@link Builder#query(String query)} to set/update the embedding
 	 * query text.
 	 * @return Returns new {@link SearchRequest} builder instance.
-	 * @deprecated use {@link Builder#builder().build()} instead.
+	 * @deprecated use {@link Builder#builder()} instead.
 	 */
 	@Deprecated(forRemoval = true, since = "1.0.0-M5")
 	public static Builder defaults() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfiguration.java
Patch:
@@ -25,10 +25,8 @@
 import org.springframework.ai.embedding.BatchingStrategy;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.embedding.TokenCountBatchingStrategy;
-import org.springframework.ai.vectorstore.weaviate.WeaviateVectorStore;
-import org.springframework.ai.vectorstore.weaviate.WeaviateVectorStore.WeaviateVectorStoreConfig;
-import org.springframework.ai.vectorstore.weaviate.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
+import org.springframework.ai.vectorstore.weaviate.WeaviateVectorStore;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/cassandra/CassandraVectorStoreConfig.java
Patch:
@@ -48,6 +48,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.cassandra.SchemaUtil;
+import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.lang.Nullable;
 
 /**
@@ -65,7 +66,8 @@
  *
  * @author Mick Semb Wever
  * @since 1.0.0
- * @deprecated since 1.0.0-M5, use {@link CassandraVectorStore#builder()} instead
+ * @deprecated since 1.0.0-M5, use {@link CassandraVectorStore#builder(EmbeddingModel)}
+ * instead.
  */
 @Deprecated(since = "1.0.0-M5", forRemoval = true)
 public final class CassandraVectorStoreConfig implements AutoCloseable {

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStore.java
Patch:
@@ -406,8 +406,7 @@ public static class ElasticsearchBuilder extends AbstractVectorStoreBuilder<Elas
 		/**
 		 * Sets the Elasticsearch REST client.
 		 * @param restClient the Elasticsearch REST client
-		 * @return the builder instance
-		 * @throws IllegalArgumentException if restClient is null
+		 * @param embeddingModel the Embedding Model to be used
 		 */
 		public ElasticsearchBuilder(RestClient restClient, EmbeddingModel embeddingModel) {
 			super(embeddingModel);

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/gemfire/GemFireVectorStore.java
Patch:
@@ -603,7 +603,8 @@ public void setDeleteData(boolean deleteData) {
 	/**
 	 * Configuration class for GemFire Vector Store.
 	 *
-	 * @deprecated Since 1.0.0-M5, use {@link GemFireVectorStore#builder()} instead
+	 * @deprecated Since 1.0.0-M5, use {@link GemFireVectorStore#builder(EmbeddingModel)}
+	 * instead
 	 */
 	@Deprecated(since = "1.0.0-M5", forRemoval = true)
 	public static final class GemFireVectorStoreConfig {

File: vector-stores/spring-ai-oracle-store/src/main/java/org/springframework/ai/vectorstore/oracle/OracleVectorStore.java
Patch:
@@ -772,8 +772,7 @@ public static class OracleBuilder extends AbstractVectorStoreBuilder<OracleBuild
 		/**
 		 * Sets the JdbcTemplate to be used for database operations.
 		 * @param jdbcTemplate the JdbcTemplate instance
-		 * @return the builder instance
-		 * @throws IllegalArgumentException if jdbcTemplate is null
+		 * @param embeddingModel the Embedding Model to be used
 		 */
 		public OracleBuilder(JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel) {
 			super(embeddingModel);

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/cassandra/CassandraVectorStore.java
Patch:
@@ -828,7 +828,6 @@ public static class CassandraBuilder extends AbstractVectorStoreBuilder<Cassandr
 
 		private CassandraBuilder(EmbeddingModel embeddingModel) {
 			super(embeddingModel);
-			Assert.notNull(session, "Session must not be null");
 		}
 
 		/**

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/pgvector/PgVectorStoreWithChatMemoryAdvisorIT.java
Patch:
@@ -84,9 +84,10 @@ private static void initStore(PgVectorStore store) throws Exception {
 
 	private static PgVectorStore createPgVectorStoreUsingTestcontainer(EmbeddingModel embeddingModel) throws Exception {
 		JdbcTemplate jdbcTemplate = createJdbcTemplateWithConnectionToTestcontainer();
-		PgVectorStore vectorStore = new PgVectorStore.Builder(jdbcTemplate, embeddingModel).withDimensions(3) // match
+		PgVectorStore vectorStore = PgVectorStore.builder(jdbcTemplate, embeddingModel)
+			.dimensions(3) // match
 			// embeddings
-			.withInitializeSchema(true)
+			.initializeSchema(true)
 			.build();
 		initStore(vectorStore);
 		return vectorStore;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/acme/AcmeIT.java
Patch:
@@ -82,7 +82,7 @@ void acmeChain() {
 		// Step 2 - Create embeddings and save to vector store
 
 		logger.info("Creating Embeddings...");
-		VectorStore vectorStore = new SimpleVectorStore(this.embeddingModel);
+		VectorStore vectorStore = SimpleVectorStore.builder(this.embeddingModel).build();
 
 		vectorStore.accept(textSplitter.apply(jsonReader.get()));
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/vectorstore/SimplePersistentVectorStoreIT.java
Patch:
@@ -56,14 +56,14 @@ void persist() {
 		JsonReader jsonReader = new JsonReader(this.bikesJsonResource, new ProductMetadataGenerator(), "price", "name",
 				"shortDescription", "description", "tags");
 		List<Document> documents = jsonReader.get();
-		SimpleVectorStore vectorStore = new SimpleVectorStore(this.embeddingModel);
+		SimpleVectorStore vectorStore = SimpleVectorStore.builder(this.embeddingModel).build();
 		vectorStore.add(documents);
 
 		File tempFile = new File(this.workingDir.toFile(), "temp.txt");
 		vectorStore.save(tempFile);
 		assertThat(tempFile).isNotEmpty();
 		assertThat(tempFile).content().contains("Velo 99 XR1 AXS");
-		SimpleVectorStore vectorStore2 = new SimpleVectorStore(this.embeddingModel);
+		SimpleVectorStore vectorStore2 = SimpleVectorStore.builder(this.embeddingModel).build();
 
 		vectorStore2.load(tempFile);
 		List<Document> similaritySearch = vectorStore2.similaritySearch("Velo 99 XR1 AXS");

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/SimpleVectorStoreTests.java
Patch:
@@ -144,7 +144,7 @@ void shouldSaveAndLoadVectorStore() throws IOException {
 		File saveFile = this.tempDir.resolve("vector-store.json").toFile();
 		this.vectorStore.save(saveFile);
 
-		SimpleVectorStore loadedStore = new SimpleVectorStore(this.mockEmbeddingModel);
+		SimpleVectorStore loadedStore = SimpleVectorStore.builder(this.mockEmbeddingModel).build();
 		loadedStore.load(saveFile);
 
 		List<Document> results = loadedStore.similaritySearch("test content");

File: spring-ai-integration-tests/src/test/java/org/springframework/ai/integration/tests/TestApplication.java
Patch:
@@ -33,7 +33,7 @@ public class TestApplication {
 
 	@Bean
 	SimpleVectorStore simpleVectorStore(EmbeddingModel embeddingModel) {
-		return new SimpleVectorStore(embeddingModel);
+		return SimpleVectorStore.builder(embeddingModel).build();
 	}
 
 }

File: spring-ai-core/src/main/java/org/springframework/ai/rag/package-info.java
Patch:
@@ -23,6 +23,7 @@
  *
  * @see <a href="http://export.arxiv.org/abs/2407.21059">arXiv:2407.21059</a>
  * @see <a href="https://export.arxiv.org/abs/2312.10997">arXiv:2312.10997</a>
+ * @see <a href="https://export.arxiv.org/abs/2410.20878">arXiv:2410.20878</a>
  */
 @NonNullApi
 @NonNullFields

File: spring-ai-core/src/main/java/org/springframework/ai/rag/preretrieval/query/expansion/QueryExpander.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A component for expanding the input query into a list of queries, addressing challenges
  * such as poorly formed queries by providing alternative query formulations, or by
- * breaking down complex problems into simpler sub-queries,
+ * breaking down complex problems into simpler sub-queries.
  *
  * @author Thomas Vitale
  * @since 1.0.0

File: vector-stores/spring-ai-qdrant-store/src/test/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStoreBuilderTests.java
Patch:
@@ -70,14 +70,14 @@ void customConfiguration() {
 	@Test
 	void nullQdrantClientInConstructorShouldThrowException() {
 		assertThatThrownBy(() -> QdrantVectorStore.builder(null, null)).isInstanceOf(IllegalArgumentException.class)
-			.hasMessage("QdrantClient must not be null");
+			.hasMessage("EmbeddingModel must be configured");
 	}
 
 	@Test
 	void nullEmbeddingModelShouldThrowException() {
 		assertThatThrownBy(() -> QdrantVectorStore.builder(qdrantClient, null).build())
 			.isInstanceOf(IllegalArgumentException.class)
-			.hasMessage("EmbeddingModel must not be null");
+			.hasMessage("EmbeddingModel must be configured");
 	}
 
 	@Test

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/cassandra/CassandraVectorStore.java
Patch:
@@ -235,15 +235,15 @@ public class CassandraVectorStore extends AbstractObservationVectorStore impleme
 	private final boolean returnEmbeddings;
 
 	/**
-	 * @deprecated since 1.0.0-M5, use {@link #builder()} instead
+	 * @deprecated since 1.0.0-M5, use {@link #builder(EmbeddingModel)} ()} instead
 	 */
 	@Deprecated(since = "1.0.0-M5", forRemoval = true)
 	public CassandraVectorStore(CassandraVectorStoreConfig conf, EmbeddingModel embeddingModel) {
 		this(conf, embeddingModel, ObservationRegistry.NOOP, null, new TokenCountBatchingStrategy());
 	}
 
 	/**
-	 * @deprecated since 1.0.0-M5, use {@link #builder()} instead
+	 * @deprecated since 1.0.0-M5, use {@link #builder(EmbeddingModel)} ()} instead
 	 */
 	@Deprecated(since = "1.0.0-M5", forRemoval = true)
 	public CassandraVectorStore(CassandraVectorStoreConfig conf, EmbeddingModel embeddingModel,
@@ -319,7 +319,7 @@ public void doAdd(List<Document> documents) {
 					builder = builder.set(keyColumn.name(), primaryKeyValues.get(k), keyColumn.javaType());
 				}
 
-				builder = builder.setString(this.schema.content(), d.getContent())
+				builder = builder.setString(this.schema.content(), d.getText())
 					.setVector(this.schema.embedding(),
 							CqlVector.newInstance(EmbeddingUtils.toList(embeddings.get(documents.indexOf(d)))),
 							Float.class);

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStore.java
Patch:
@@ -156,7 +156,7 @@ public class ElasticsearchVectorStore extends AbstractObservationVectorStore imp
 
 	private static final Logger logger = LoggerFactory.getLogger(ElasticsearchVectorStore.class);
 
-	private static Map<SimilarityFunction, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(
+	private static final Map<SimilarityFunction, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(
 			SimilarityFunction.cosine, VectorStoreSimilarityMetric.COSINE, SimilarityFunction.l2_norm,
 			VectorStoreSimilarityMetric.EUCLIDEAN, SimilarityFunction.dot_product, VectorStoreSimilarityMetric.DOT);
 
@@ -224,7 +224,7 @@ public void doAdd(List<Document> documents) {
 				this.batchingStrategy);
 
 		for (Document document : documents) {
-			ElasticSearchDocument doc = new ElasticSearchDocument(document.getId(), document.getContent(),
+			ElasticSearchDocument doc = new ElasticSearchDocument(document.getId(), document.getText(),
 					document.getMetadata(), embeddings.get(documents.indexOf(document)));
 			bulkRequestBuilder.operations(
 					op -> op.index(idx -> idx.index(this.options.getIndexName()).id(document.getId()).document(doc)));

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDBAtlasVectorStore.java
Patch:
@@ -294,7 +294,7 @@ public void doAdd(List<Document> documents) {
 		List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
 				this.batchingStrategy);
 		for (Document document : documents) {
-			MongoDBDocument mdbDocument = new MongoDBDocument(document.getId(), document.getContent(),
+			MongoDBDocument mdbDocument = new MongoDBDocument(document.getId(), document.getText(),
 					document.getMetadata(), embeddings.get(documents.indexOf(document)));
 			this.mongoTemplate.save(mdbDocument, this.collectionName);
 		}
@@ -379,7 +379,7 @@ public static class MongoDBBuilder extends AbstractVectorStoreBuilder<MongoDBBui
 		/**
 		 * @throws IllegalArgumentException if mongoTemplate is null
 		 */
-		public MongoDBBuilder(MongoTemplate mongoTemplate, EmbeddingModel embeddingModel) {
+		private MongoDBBuilder(MongoTemplate mongoTemplate, EmbeddingModel embeddingModel) {
 			super(embeddingModel);
 			Assert.notNull(mongoTemplate, "MongoTemplate must not be null");
 			this.mongoTemplate = mongoTemplate;

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/neo4j/Neo4jVectorStore.java
Patch:
@@ -154,7 +154,7 @@ public class Neo4jVectorStore extends AbstractObservationVectorStore implements
 
 	public static final String DEFAULT_CONSTRAINT_NAME = DEFAULT_LABEL + "_unique_idx";
 
-	private static Map<Neo4jDistanceType, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(
+	private static final Map<Neo4jDistanceType, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(
 			Neo4jDistanceType.COSINE, VectorStoreSimilarityMetric.COSINE, Neo4jDistanceType.EUCLIDEAN,
 			VectorStoreSimilarityMetric.EUCLIDEAN);
 
@@ -339,7 +339,7 @@ private Map<String, Object> documentToRecord(Document document, float[] embeddin
 		row.put("id", document.getId());
 
 		var properties = new HashMap<String, Object>();
-		properties.put("text", document.getContent());
+		properties.put("text", document.getText());
 
 		document.getMetadata().forEach((k, v) -> properties.put("metadata." + k, Values.value(v)));
 		row.put("properties", properties);
@@ -426,7 +426,7 @@ public static class Neo4jBuilder extends AbstractVectorStoreBuilder<Neo4jBuilder
 
 		private BatchingStrategy batchingStrategy = new TokenCountBatchingStrategy();
 
-		public Neo4jBuilder(Driver driver, EmbeddingModel embeddingModel) {
+		private Neo4jBuilder(Driver driver, EmbeddingModel embeddingModel) {
 			super(embeddingModel);
 			Assert.notNull(driver, "Neo4j driver must not be null");
 			this.driver = driver;

File: vector-stores/spring-ai-qdrant-store/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -320,7 +320,7 @@ private Document toDocument(ScoredPoint point) {
 	private Map<String, Value> toPayload(Document document) {
 		try {
 			var payload = QdrantValueFactory.toValueMap(document.getMetadata());
-			payload.put(CONTENT_FIELD_NAME, io.qdrant.client.ValueFactory.value(document.getContent()));
+			payload.put(CONTENT_FIELD_NAME, io.qdrant.client.ValueFactory.value(document.getText()));
 			return payload;
 		}
 		catch (Exception e) {

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/PaymentStatusFunctionCallingIT.java
Patch:
@@ -53,7 +53,7 @@
  * @author Christian Tzolov
  * @since 0.8.1
  */
-@Disabled("See https://github.com/spring-projects/spring-ai/issues/1853")
+// @Disabled("See https://github.com/spring-projects/spring-ai/issues/1853")
 @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+")
 public class PaymentStatusFunctionCallingIT {
 
@@ -131,7 +131,7 @@ public void toolFunctionCall() throws JsonProcessingException {
 
 			// Extend conversation with function response.
 			// The functionName is used to identify the function response!
-			messages.add(new ChatCompletionMessage(result.toString(), Role.TOOL, functionName, null));
+			messages.add(new ChatCompletionMessage(result.toString(), Role.TOOL, functionName, null, toolCall.id()));
 		}
 
 		response = mistralApi

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/DefaultChatOptionsBuilder.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class DefaultChatOptionsBuilder<T extends DefaultChatOptionsBuilder<T>> implements ChatOptions.Builder<T> {
 
-	private final DefaultChatOptions options = new DefaultChatOptions();
+	protected DefaultChatOptions options = new DefaultChatOptions();
 
 	protected T self() {
 		return (T) this;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingModel.java
Patch:
@@ -130,7 +130,7 @@ BedrockCohereEmbeddingOptions mergeOptions(EmbeddingOptions requestOptions) {
 					.truncate(CohereEmbeddingRequest.Truncate.NONE)
 					.build();
 
-		if (requestOptions != null && !EmbeddingOptions.EMPTY.equals(requestOptions)) {
+		if (requestOptions != null) {
 			options = ModelOptionsUtils.merge(requestOptions, options, BedrockCohereEmbeddingOptions.class);
 		}
 

File: models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingModel.java
Patch:
@@ -151,7 +151,7 @@ PostgresMlEmbeddingOptions mergeOptions(EmbeddingOptions requestOptions) {
 		PostgresMlEmbeddingOptions options = (this.defaultOptions != null) ? this.defaultOptions
 				: PostgresMlEmbeddingOptions.builder().build();
 
-		if (requestOptions != null && !EmbeddingOptions.EMPTY.equals(requestOptions)) {
+		if (requestOptions != null) {
 			options = ModelOptionsUtils.merge(requestOptions, options, PostgresMlEmbeddingOptions.class);
 		}
 

File: models/spring-ai-postgresml/src/test/java/org/springframework/ai/postgresml/PostgresMlEmbeddingModelIT.java
Patch:
@@ -33,7 +33,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.document.MetadataMode;
-import org.springframework.ai.embedding.EmbeddingOptions;
+import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.embedding.EmbeddingResponseMetadata;
@@ -179,7 +179,8 @@ void embedCallWithRequestOptionsOverride() {
 				true);
 		embeddingModel.afterPropertiesSet();
 
-		var request1 = new EmbeddingRequest(List.of("Hello World!", "Spring AI!", "LLM!"), EmbeddingOptions.EMPTY);
+		var request1 = new EmbeddingRequest(List.of("Hello World!", "Spring AI!", "LLM!"),
+				EmbeddingOptionsBuilder.builder().build());
 
 		EmbeddingResponse embeddingResponse = embeddingModel.call(request1);
 

File: models/spring-ai-postgresml/src/test/java/org/springframework/ai/postgresml/PostgresMlEmbeddingOptionsTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
-import org.springframework.ai.embedding.EmbeddingOptions;
+import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.jdbc.core.JdbcTemplate;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -62,7 +62,7 @@ public void mergeOptions() {
 		var jdbcTemplate = Mockito.mock(JdbcTemplate.class);
 		PostgresMlEmbeddingModel embeddingModel = new PostgresMlEmbeddingModel(jdbcTemplate);
 
-		PostgresMlEmbeddingOptions options = embeddingModel.mergeOptions(EmbeddingOptions.EMPTY);
+		PostgresMlEmbeddingOptions options = embeddingModel.mergeOptions(EmbeddingOptionsBuilder.builder().build());
 
 		// Default options
 		assertThat(options.getTransformer()).isEqualTo(PostgresMlEmbeddingModel.DEFAULT_TRANSFORMER_MODEL);

File: models/spring-ai-vertex-ai-embedding/src/main/java/org/springframework/ai/vertexai/embedding/multimodal/VertexAiMultimodalEmbeddingModel.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.ai.embedding.DocumentEmbeddingModel;
 import org.springframework.ai.embedding.DocumentEmbeddingRequest;
 import org.springframework.ai.embedding.Embedding;
-import org.springframework.ai.embedding.EmbeddingOptions;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.embedding.EmbeddingResponseMetadata;
 import org.springframework.ai.embedding.EmbeddingResultMetadata;
@@ -101,7 +100,7 @@ public EmbeddingResponse call(DocumentEmbeddingRequest request) {
 		// merge the runtime and default vertex ai options.
 		VertexAiMultimodalEmbeddingOptions mergedOptions = this.defaultOptions;
 
-		if (request.getOptions() != null && request.getOptions() != EmbeddingOptions.EMPTY) {
+		if (request.getOptions() != null) {
 			var defaultOptionsCopy = VertexAiMultimodalEmbeddingOptions.builder().from(this.defaultOptions).build();
 			mergedOptions = ModelOptionsUtils.merge(request.getOptions(), defaultOptionsCopy,
 					VertexAiMultimodalEmbeddingOptions.class);

File: models/spring-ai-vertex-ai-embedding/src/main/java/org/springframework/ai/vertexai/embedding/text/VertexAiTextEmbeddingModel.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.AbstractEmbeddingModel;
 import org.springframework.ai.embedding.Embedding;
-import org.springframework.ai.embedding.EmbeddingOptions;
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.embedding.EmbeddingResponseMetadata;
@@ -167,7 +166,7 @@ private VertexAiTextEmbeddingOptions mergedOptions(EmbeddingRequest request) {
 
 		VertexAiTextEmbeddingOptions mergedOptions = this.defaultOptions;
 
-		if (request.getOptions() != null && request.getOptions() != EmbeddingOptions.EMPTY) {
+		if (request.getOptions() != null) {
 			var defaultOptionsCopy = VertexAiTextEmbeddingOptions.builder().from(this.defaultOptions).build();
 			mergedOptions = ModelOptionsUtils.merge(request.getOptions(), defaultOptionsCopy,
 					VertexAiTextEmbeddingOptions.class);

File: models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/WatsonxAiEmbeddingModelTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.embedding.EmbeddingOptions;
+import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.watsonx.api.WatsonxAiApi;
 import org.springframework.ai.watsonx.api.WatsonxAiEmbeddingRequest;
@@ -73,7 +74,7 @@ void createRequestWithOptionsAndInvalidModel() {
 	void createRequestWithNoOptions() {
 		List<String> inputs = List.of("test");
 		WatsonxAiEmbeddingRequest request = this.embeddingModel.watsonxAiEmbeddingRequest(inputs,
-				EmbeddingOptions.EMPTY);
+				EmbeddingOptionsBuilder.builder().build());
 
 		assertThat(request.getModel()).isEqualTo(WatsonxAiEmbeddingOptions.DEFAULT_MODEL);
 		assertThat(request.getInputs().size()).isEqualTo(inputs.size());

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/embedding/VertexAiTextEmbeddingModelAutoConfigurationIT.java
Patch:
@@ -25,7 +25,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.DocumentEmbeddingRequest;
-import org.springframework.ai.embedding.EmbeddingOptions;
+import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.embedding.EmbeddingResultMetadata;
 import org.springframework.ai.vertexai.embedding.multimodal.VertexAiMultimodalEmbeddingModel;
@@ -105,7 +105,7 @@ public void multimodalEmbedding() {
 			var document = new Document("Hello World");
 
 			DocumentEmbeddingRequest embeddingRequest = new DocumentEmbeddingRequest(List.of(document),
-					EmbeddingOptions.EMPTY);
+					EmbeddingOptionsBuilder.builder().build());
 
 			EmbeddingResponse embeddingResponse = multiModelEmbeddingModel.call(embeddingRequest);
 			assertThat(embeddingResponse.getResults()).hasSize(1);

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiModerationModel.java
Patch:
@@ -147,9 +147,9 @@ private ModerationResponse convertResponse(
 						.build();
 				}
 				ModerationResult moderationResult = ModerationResult.builder()
-					.withCategories(categories)
-					.withCategoryScores(categoryScores)
-					.withFlagged(result.flagged())
+					.categories(categories)
+					.categoryScores(categoryScores)
+					.flagged(result.flagged())
 					.build();
 				moderationResults.add(moderationResult);
 			}

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaOptions.java
Patch:
@@ -438,7 +438,7 @@ public OllamaOptions withFormat(Object format) {
 	}
 
 	/**
-	 * @deprecated use {@link Builder#keepAlive instead.
+	 * @deprecated use {@link Builder#keepAlive} instead.
 	 */
 	@Deprecated(forRemoval = true, since = "1.0.0-M5")
 	public OllamaOptions withKeepAlive(String keepAlive) {

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -1342,7 +1342,6 @@ public record PromptTokensDetails(// @formatter:off
 		/**
 		 * Breakdown of tokens used in a completion.
 		 *
-		 * @param audioTokens Audio input tokens generated by the model.
 		 * @param reasoningTokens Number of tokens generated by the model for reasoning.
 		 * @param acceptedPredictionTokens Number of tokens generated by the model for
 		 * accepted predictions.

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/BaseOllamaIT.java
Patch:
@@ -93,8 +93,8 @@ private static OllamaApi buildOllamaApiWithModel(final String model) {
 
 	private static void ensureModelIsPresent(final OllamaApi ollamaApi, final String model) {
 		final var modelManagementOptions = ModelManagementOptions.builder()
-			.withMaxRetries(DEFAULT_MAX_RETRIES)
-			.withTimeout(DEFAULT_TIMEOUT)
+			.maxRetries(DEFAULT_MAX_RETRIES)
+			.timeout(DEFAULT_TIMEOUT)
 			.build();
 		final var ollamaModelManager = new OllamaModelManager(ollamaApi, modelManagementOptions);
 		ollamaModelManager.pullModel(model, PullModelStrategy.WHEN_MISSING);

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelMultimodalIT.java
Patch:
@@ -82,8 +82,8 @@ public OllamaApi ollamaApi() {
 		@Bean
 		public OllamaChatModel ollamaChat(OllamaApi ollamaApi) {
 			return OllamaChatModel.builder()
-				.withOllamaApi(ollamaApi)
-				.withDefaultOptions(OllamaOptions.create().withModel(MODEL).withTemperature(0.9))
+				.ollamaApi(ollamaApi)
+				.defaultOptions(OllamaOptions.builder().model(MODEL).temperature(0.9).build())
 				.build();
 		}
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelTests.java
Patch:
@@ -52,9 +52,9 @@ public class OllamaChatModelTests {
 	public void buildOllamaChatModel() {
 		Exception exception = assertThrows(IllegalArgumentException.class,
 				() -> OllamaChatModel.builder()
-					.withOllamaApi(this.ollamaApi)
-					.withDefaultOptions(OllamaOptions.create().withModel(OllamaModel.LLAMA2))
-					.withModelManagementOptions(null)
+					.ollamaApi(this.ollamaApi)
+					.defaultOptions(OllamaOptions.builder().model(OllamaModel.LLAMA2).build())
+					.modelManagementOptions(null)
 					.build());
 		assertEquals("modelManagementOptions must not be null", exception.getMessage());
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaChatProperties.java
Patch:
@@ -43,7 +43,7 @@ public class OllamaChatProperties {
 	 * generative's defaults.
 	 */
 	@NestedConfigurationProperty
-	private OllamaOptions options = OllamaOptions.create().withModel(OllamaModel.MISTRAL.id());
+	private OllamaOptions options = OllamaOptions.builder().model(OllamaModel.MISTRAL.id()).build();
 
 	public String getModel() {
 		return this.options.getModel();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingProperties.java
Patch:
@@ -43,7 +43,7 @@ public class OllamaEmbeddingProperties {
 	 * generative's defaults.
 	 */
 	@NestedConfigurationProperty
-	private OllamaOptions options = OllamaOptions.create().withModel(OllamaModel.MXBAI_EMBED_LARGE.id());
+	private OllamaOptions options = OllamaOptions.builder().model(OllamaModel.MXBAI_EMBED_LARGE.id()).build();
 
 	public String getModel() {
 		return this.options.getModel();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/BaseOllamaIT.java
Patch:
@@ -105,8 +105,8 @@ public String getBaseUrl() {
 
 	private static void ensureModelIsPresent(final OllamaApi ollamaApi, final String model) {
 		final var modelManagementOptions = ModelManagementOptions.builder()
-			.withMaxRetries(DEFAULT_MAX_RETRIES)
-			.withTimeout(DEFAULT_TIMEOUT)
+			.maxRetries(DEFAULT_MAX_RETRIES)
+			.timeout(DEFAULT_TIMEOUT)
 			.build();
 		final var ollamaModelManager = new OllamaModelManager(ollamaApi, modelManagementOptions);
 		ollamaModelManager.pullModel(model, PullModelStrategy.WHEN_MISSING);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -70,7 +70,7 @@ void functionCallTest() {
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
 			var promptOptions = OllamaOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description(
 							"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")
@@ -96,7 +96,7 @@ void streamingFunctionCallTest() {
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
 			var promptOptions = OllamaOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description(
 							"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/OllamaFunctionCallbackIT.java
Patch:
@@ -74,7 +74,7 @@ void functionCallTest() {
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
 			ChatResponse response = chatModel
-				.call(new Prompt(List.of(userMessage), OllamaOptions.builder().withFunction("WeatherInfo").build()));
+				.call(new Prompt(List.of(userMessage), OllamaOptions.builder().function("WeatherInfo").build()));
 
 			logger.info("Response: " + response);
 
@@ -92,7 +92,7 @@ void streamFunctionCallTest() {
 					"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");
 
 			Flux<ChatResponse> response = chatModel
-				.stream(new Prompt(List.of(userMessage), OllamaOptions.builder().withFunction("WeatherInfo").build()));
+				.stream(new Prompt(List.of(userMessage), OllamaOptions.builder().function("WeatherInfo").build()));
 
 			String content = response.collectList()
 				.block()

File: vector-stores/spring-ai-qdrant-store/src/test/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStoreBuilderTests.java
Patch:
@@ -17,9 +17,9 @@
 package org.springframework.ai.vectorstore.qdrant;
 
 import io.qdrant.client.QdrantClient;
-import io.qdrant.client.QdrantGrpcClient;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SimpleVectorStore.java
Patch:
@@ -246,9 +246,9 @@ private float[] getUserQueryEmbedding(String query) {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.SIMPLE.value(), operationName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withCollectionName("in-memory-map")
-			.withSimilarityMetric(VectorStoreSimilarityMetric.COSINE.value());
+			.dimensions(this.embeddingModel.dimensions())
+			.collectionName("in-memory-map")
+			.similarityMetric(VectorStoreSimilarityMetric.COSINE.value());
 	}
 
 	public static final class EmbeddingMath {

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/AbstractObservationVectorStore.java
Patch:
@@ -111,7 +111,7 @@ public List<Document> similaritySearch(SearchRequest request) {
 
 		VectorStoreObservationContext searchObservationContext = this
 			.createObservationContextBuilder(VectorStoreObservationContext.Operation.QUERY.value())
-			.withQueryRequest(request)
+			.queryRequest(request)
 			.build();
 
 		return VectorStoreObservationDocumentation.AI_VECTOR_STORE

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/observation/VectorStoreQueryResponseObservationHandlerTests.java
Patch:
@@ -44,7 +44,7 @@ class VectorStoreQueryResponseObservationHandlerTests {
 	void whenCompletionWithTextThenSpanEvent() {
 		var observationContext = VectorStoreObservationContext
 			.builder("db", VectorStoreObservationContext.Operation.ADD)
-			.withQueryResponse(List.of(new Document("hello"), new Document("other-side")))
+			.queryResponse(List.of(new Document("hello"), new Document("other-side")))
 			.build();
 		var sdkTracer = SdkTracerProvider.builder().build().get("test");
 		var otelTracer = new OtelTracer(sdkTracer, new OtelCurrentTraceContext(), null);

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/chroma/vectorstore/ChromaVectorStore.java
Patch:
@@ -272,8 +272,8 @@ public void setFilterExpressionConverter(FilterExpressionConverter filterExpress
 	@Override
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.CHROMA.value(), operationName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withCollectionName(this.collectionName + ":" + this.collectionId);
+			.dimensions(this.embeddingModel.dimensions())
+			.collectionName(this.collectionName + ":" + this.collectionId);
 	}
 
 	public static class ChromaBuilder extends AbstractVectorStoreBuilder<ChromaBuilder> {

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/elasticsearch/ElasticsearchVectorStore.java
Patch:
@@ -362,9 +362,9 @@ public void afterPropertiesSet() {
 	@Override
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.ELASTICSEARCH.value(), operationName)
-			.withCollectionName(this.options.getIndexName())
-			.withDimensions(this.embeddingModel.dimensions())
-			.withSimilarityMetric(getSimilarityMetric());
+			.collectionName(this.options.getIndexName())
+			.dimensions(this.embeddingModel.dimensions())
+			.similarityMetric(getSimilarityMetric());
 	}
 
 	private String getSimilarityMetric() {

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/GemFireVectorStore.java
Patch:
@@ -340,9 +340,9 @@ else if (clientException.getStatusCode().equals(org.springframework.http.HttpSta
 	@Override
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.GEMFIRE.value(), operationName)
-			.withCollectionName(this.indexName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withFieldName(EMBEDDINGS);
+			.collectionName(this.indexName)
+			.dimensions(this.embeddingModel.dimensions())
+			.fieldName(EMBEDDINGS);
 	}
 
 	public static class CreateRequest {

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDBAtlasVectorStore.java
Patch:
@@ -345,9 +345,9 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.MONGODB.value(), operationName)
-			.withCollectionName(this.collectionName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withFieldName(this.pathName);
+			.collectionName(this.collectionName)
+			.dimensions(this.embeddingModel.dimensions())
+			.fieldName(this.pathName);
 	}
 
 	/**

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/neo4j/Neo4jVectorStore.java
Patch:
@@ -373,9 +373,9 @@ private Document recordToDocument(org.neo4j.driver.Record neoRecord) {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.NEO4J.value(), operationName)
-			.withCollectionName(this.indexName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withSimilarityMetric(getSimilarityMetric());
+			.collectionName(this.indexName)
+			.dimensions(this.embeddingModel.dimensions())
+			.similarityMetric(getSimilarityMetric());
 	}
 
 	private String getSimilarityMetric() {

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/opensearch/OpenSearchVectorStore.java
Patch:
@@ -418,9 +418,9 @@ public void afterPropertiesSet() {
 	@Override
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.OPENSEARCH.value(), operationName)
-			.withCollectionName(this.index)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withSimilarityMetric(getSimilarityFunction());
+			.collectionName(this.index)
+			.dimensions(this.embeddingModel.dimensions())
+			.similarityMetric(getSimilarityFunction());
 	}
 
 	private String getSimilarityFunction() {

File: vector-stores/spring-ai-qdrant-store/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -359,8 +359,8 @@ private boolean isCollectionExists() {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.QDRANT.value(), operationName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withCollectionName(this.collectionName);
+			.dimensions(this.embeddingModel.dimensions())
+			.collectionName(this.collectionName);
 
 	}
 

File: vector-stores/spring-ai-weaviate-store/src/main/java/org/springframework/ai/vectorstore/weaviate/WeaviateVectorStore.java
Patch:
@@ -448,8 +448,8 @@ private Document toDocument(Map<String, ?> item) {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.WEAVIATE.value(), operationName)
-			.withDimensions(this.embeddingModel.dimensions())
-			.withCollectionName(this.weaviateObjectClass);
+			.dimensions(this.embeddingModel.dimensions())
+			.collectionName(this.weaviateObjectClass);
 	}
 
 	/**

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/SimpleVectorStoreTests.java
Patch:
@@ -57,7 +57,7 @@ void setUp() {
 		when(this.mockEmbeddingModel.dimensions()).thenReturn(3);
 		when(this.mockEmbeddingModel.embed(any(String.class))).thenReturn(new float[] { 0.1f, 0.2f, 0.3f });
 		when(this.mockEmbeddingModel.embed(any(Document.class))).thenReturn(new float[] { 0.1f, 0.2f, 0.3f });
-		this.vectorStore = new SimpleVectorStore(this.mockEmbeddingModel);
+		this.vectorStore = new SimpleVectorStore(SimpleVectorStore.builder().embeddingModel(this.mockEmbeddingModel));
 	}
 
 	@Test

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelIT.java
Patch:
@@ -337,8 +337,8 @@ void streamFunctionCallUsageTest() {
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 
 		var promptOptions = AnthropicChatOptions.builder()
-			.withModel(AnthropicApi.ChatModel.CLAUDE_3_5_SONNET.getName())
-			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+			.model(AnthropicApi.ChatModel.CLAUDE_3_5_SONNET.getName())
+			.functionCallbacks(List.of(FunctionCallback.builder()
 				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Get the weather in location. Return temperature in 36°F or 36°C format. Use multi-turn if needed.")

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/function/AzureOpenAiChatModelFunctionCallIT.java
Patch:
@@ -158,13 +158,13 @@ void streamFunctionCallUsageTest() {
 		streamOptions.setIncludeUsage(true);
 
 		var promptOptions = AzureOpenAiChatOptions.builder()
-			.withDeploymentName(this.selectedModel)
-			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+			.deploymentName(this.selectedModel)
+			.functionCallbacks(List.of(FunctionCallback.builder()
 				.function("getCurrentWeather", new MockWeatherService())
 				.description("Get the current weather in a given location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
-			.withStreamOptions(streamOptions)
+			.streamOptions(streamOptions)
 			.build();
 
 		Flux<ChatResponse> response = this.chatModel.stream(new Prompt(messages, promptOptions));

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelIT.java
Patch:
@@ -251,8 +251,8 @@ void streamFunctionCallUsageTest() {
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 
 		var promptOptions = MistralAiChatOptions.builder()
-			.withModel(MistralAiApi.ChatModel.SMALL.getValue())
-			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+			.model(MistralAiApi.ChatModel.SMALL.getValue())
+			.functionCallbacks(List.of(FunctionCallback.builder()
 				.function("getCurrentWeather", new MockWeatherService())
 				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiModerationOptions.java
Patch:
@@ -67,6 +67,7 @@ public Builder model(String model) {
 		/**
 		 * @deprecated use {@link #model(String)} instead.
 		 */
+		@Deprecated(forRemoval = true, since = "1.0.0-M5")
 		public Builder withModel(String model) {
 			this.options.setModel(model);
 			return this;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/moderation/OpenAiModerationModelIT.java
Patch:
@@ -43,7 +43,7 @@ public class OpenAiModerationModelIT extends AbstractIT {
 
 	@Test
 	void moderationAsUrlTestPositive() {
-		var options = ModerationOptionsBuilder.builder().withModel("text-moderation-stable").build();
+		var options = ModerationOptionsBuilder.builder().model("text-moderation-stable").build();
 
 		var instructions = """
 				I want to kill them.!".""";
@@ -97,7 +97,7 @@ void moderationAsUrlTestPositive() {
 
 	@Test
 	void moderationAsUrlTestNegative() {
-		var options = ModerationOptionsBuilder.builder().withModel("text-moderation-stable").build();
+		var options = ModerationOptionsBuilder.builder().model("text-moderation-stable").build();
 
 		var instructions = """
 				A light cream colored mini golden doodle with a sign that contains the message "I'm on my way to BARCADE!".""";

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModelIT.java
Patch:
@@ -100,7 +100,7 @@ void testSafetySettings() {
 			.withThreshold(VertexAiGeminiSafetySetting.HarmBlockThreshold.BLOCK_LOW_AND_ABOVE)
 			.build());
 		Prompt prompt = new Prompt("What are common digital attack vectors?",
-				VertexAiGeminiChatOptions.builder().withSafetySettings(safetySettings).build());
+				VertexAiGeminiChatOptions.builder().safetySettings(safetySettings).build());
 		ChatResponse response = this.chatModel.call(prompt);
 		assertThat(response.getResult().getMetadata().getFinishReason()).isEqualTo("SAFETY");
 	}

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatModel.java
Patch:
@@ -128,9 +128,9 @@ public class AnthropicChatModel extends AbstractToolCallSupport implements ChatM
 	public AnthropicChatModel(AnthropicApi anthropicApi) {
 		this(anthropicApi,
 				AnthropicChatOptions.builder()
-					.withModel(DEFAULT_MODEL_NAME)
-					.withMaxTokens(DEFAULT_MAX_TOKENS)
-					.withTemperature(DEFAULT_TEMPERATURE)
+					.model(DEFAULT_MODEL_NAME)
+					.maxTokens(DEFAULT_MAX_TOKENS)
+					.temperature(DEFAULT_TEMPERATURE)
 					.build());
 	}
 

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/ChatCompletionRequestTests.java
Patch:
@@ -25,14 +25,15 @@
 
 /**
  * @author Christian Tzolov
+ * @author Alexandros Pappas
  */
 public class ChatCompletionRequestTests {
 
 	@Test
 	public void createRequestWithChatOptions() {
 
 		var client = new AnthropicChatModel(new AnthropicApi("TEST"),
-				AnthropicChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6).build());
+				AnthropicChatOptions.builder().model("DEFAULT_MODEL").temperature(66.6).build());
 
 		var request = client.createRequest(new Prompt("Test message content"), false);
 
@@ -43,7 +44,7 @@ public void createRequestWithChatOptions() {
 		assertThat(request.temperature()).isEqualTo(66.6);
 
 		request = client.createRequest(new Prompt("Test message content",
-				AnthropicChatOptions.builder().withModel("PROMPT_MODEL").withTemperature(99.9).build()), true);
+				AnthropicChatOptions.builder().model("PROMPT_MODEL").temperature(99.9).build()), true);
 
 		assertThat(request.messages()).hasSize(1);
 		assertThat(request.stream()).isTrue();

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/client/AnthropicChatClientIT.java
Patch:
@@ -294,7 +294,7 @@ void multiModalityEmbeddedImage(String modelName) throws IOException {
 
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
-				.options(AnthropicChatOptions.builder().withModel(modelName).build())
+				.options(AnthropicChatOptions.builder().model(modelName).build())
 				.user(u -> u.text("Explain what do you see on this picture?")
 						.media(MimeTypeUtils.IMAGE_PNG, new ClassPathResource("/test.png")))
 				.call()
@@ -318,7 +318,7 @@ void multiModalityImageUrl(String modelName) throws IOException {
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
 				// TODO consider adding model(...) method to ChatClient as a shortcut to
-				.options(AnthropicChatOptions.builder().withModel(modelName).build())
+				.options(AnthropicChatOptions.builder().model(modelName).build())
 				.user(u -> u.text("Explain what do you see on this picture?").media(MimeTypeUtils.IMAGE_PNG, url))
 				.call()
 				.content();
@@ -334,7 +334,7 @@ void streamingMultiModality() throws IOException {
 
 		// @formatter:off
 		Flux<String> response = ChatClient.create(this.chatModel).prompt()
-				.options(AnthropicChatOptions.builder().withModel(AnthropicApi.ChatModel.CLAUDE_3_5_SONNET)
+				.options(AnthropicChatOptions.builder().model(AnthropicApi.ChatModel.CLAUDE_3_5_SONNET)
 						.build())
 				.user(u -> u.text("Explain what do you see on this picture?")
 						.media(MimeTypeUtils.IMAGE_PNG, new ClassPathResource("/test.png")))

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfigurationIT.java
Patch:
@@ -64,7 +64,7 @@ void callWith8KResponseContext() {
 					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_5_SONNET.getValue())
 			.run(context -> {
 				AnthropicChatModel chatModel = context.getBean(AnthropicChatModel.class);
-				var optoins = AnthropicChatOptions.builder().withMaxTokens(8192).build();
+				var optoins = AnthropicChatOptions.builder().maxTokens(8192).build();
 				var response = chatModel.call(new Prompt("Tell me a joke", optoins));
 				assertThat(response.getResult().getOutput().getText()).isNotEmpty();
 				logger.info("Response: " + response);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -66,14 +66,14 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, in Paris, France and in Tokyo, Japan? Return the temperature in Celsius.");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						AnthropicChatOptions.builder().withFunction("weatherFunction").build()));
+						AnthropicChatOptions.builder().function("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 
 				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
-						AnthropicChatOptions.builder().withFunction("weatherFunction3").build()));
+						AnthropicChatOptions.builder().function("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -58,7 +58,7 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, in Paris and in Tokyo? Return the temperature in Celsius.");
 
 				var promptOptions = AnthropicChatOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MockWeatherService())
 						.description("Get the weather in location. Return temperature in 36°F or 36°C format.")
 						.inputType(MockWeatherService.Request.class)

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatCompletionRequestTest.java
Patch:
@@ -27,6 +27,7 @@
 
 /**
  * @author Ricken Bazolo
+ * @author Alexandros Pappas
  * @since 0.8.1
  */
 @SpringBootTest(classes = MistralAiTestConfiguration.class)
@@ -51,7 +52,7 @@ void chatCompletionDefaultRequestTest() {
 	@Test
 	void chatCompletionRequestWithOptionsTest() {
 
-		var options = MistralAiChatOptions.builder().withTemperature(0.5).withTopP(0.8).build();
+		var options = MistralAiChatOptions.builder().temperature(0.5).topP(0.8).build();
 
 		var request = this.chatModel.createRequest(new Prompt("test content", options), true);
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiTestConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public EmbeddingModel mistralAiEmbeddingModel(MistralAiApi api) {
 	@Bean
 	public MistralAiChatModel mistralAiChatModel(MistralAiApi mistralAiApi) {
 		return new MistralAiChatModel(mistralAiApi,
-				MistralAiChatOptions.builder().withModel(MistralAiApi.ChatModel.OPEN_MIXTRAL_7B.getValue()).build());
+				MistralAiChatOptions.builder().model(MistralAiApi.ChatModel.OPEN_MIXTRAL_7B.getValue()).build());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanIT.java
Patch:
@@ -68,8 +68,8 @@ void functionCallTest() {
 				ChatResponse response = chatModel
 					.call(new Prompt(List.of(new UserMessage("What's the status of my transaction with id T1001?")),
 							MistralAiChatOptions.builder()
-								.withFunction("retrievePaymentStatus")
-								.withFunction("retrievePaymentDate")
+								.function("retrievePaymentStatus")
+								.function("retrievePaymentDate")
 								.build()));
 
 				logger.info("Response: {}", response);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java
Patch:
@@ -64,7 +64,7 @@ void functionCallTest() {
 				UserMessage userMessage = new UserMessage("What's the status of my transaction with id T1001?");
 
 				var promptOptions = MistralAiChatOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("retrievePaymentStatus",
 								(Transaction transaction) -> new Status(DATA.get(transaction).status()))
 						.description("Get payment status of a transaction")

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java
Patch:
@@ -46,6 +46,7 @@
 
 /**
  * @author Christian Tzolov
+ * @author Alexandros Pappas
  * @since 0.8.1
  */
 @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".*")
@@ -71,8 +72,8 @@ void promptFunctionCall() {
 				// Paris?");
 
 				var promptOptions = MistralAiChatOptions.builder()
-					.withToolChoice(ToolChoice.AUTO)
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.toolChoice(ToolChoice.AUTO)
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MyWeatherService())
 						.description("Get the current weather in requested location")
 						.inputType(MyWeatherService.Request.class)

File: models/spring-ai-bedrock-converse/src/main/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModel.java
Patch:
@@ -128,6 +128,7 @@
  *
  * @author Christian Tzolov
  * @author Wei Jiang
+ * @author Alexandros Pappas
  * @since 1.0.0
  */
 public class BedrockProxyChatModel extends AbstractToolCallSupport implements ChatModel {
@@ -564,8 +565,8 @@ private ChatResponse toChatResponse(ConverseResponse response, ChatResponse perv
 		ConverseMetrics metrics = response.metrics();
 
 		var chatResponseMetaData = ChatResponseMetadata.builder()
-			.withId(response.responseMetadata() != null ? response.responseMetadata().requestId() : "Unknown")
-			.withUsage(usage)
+			.id(response.responseMetadata() != null ? response.responseMetadata().requestId() : "Unknown")
+			.usage(usage)
 			.build();
 
 		return new ChatResponse(allGenerations, chatResponseMetaData);

File: models/spring-ai-oci-genai/src/main/java/org/springframework/ai/oci/cohere/OCICohereChatModel.java
Patch:
@@ -62,6 +62,7 @@
  * {@link ChatModel} implementation that uses the OCI GenAI Chat API.
  *
  * @author Anders Swanson
+ * @author Alexandros Pappas
  * @since 1.0.0
  */
 public class OCICohereChatModel implements ChatModel {
@@ -138,8 +139,8 @@ private ChatResponse doChatRequest(Prompt prompt) {
 		validateChatOptions(options);
 
 		ChatResponseMetadata metadata = ChatResponseMetadata.builder()
-			.withModel(options.getModel())
-			.withKeyValue("compartment", options.getCompartment())
+			.model(options.getModel())
+			.keyValue("compartment", options.getCompartment())
 			.build();
 		return new ChatResponse(getGenerations(prompt, options), metadata);
 

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -95,6 +95,7 @@
  * @author Mark Pollack
  * @author Soby Chacko
  * @author Jihoon Kim
+ * @author Alexandros Pappas
  * @since 0.8.1
  */
 public class VertexAiGeminiChatModel extends AbstractToolCallSupport implements ChatModel, DisposableBean {
@@ -427,7 +428,7 @@ protected List<Generation> responseCandidateToGeneration(Candidate candidate) {
 	}
 
 	private ChatResponseMetadata toChatResponseMetadata(GenerateContentResponse response) {
-		return ChatResponseMetadata.builder().withUsage(new VertexAiUsage(response.getUsageMetadata())).build();
+		return ChatResponseMetadata.builder().usage(new VertexAiUsage(response.getUsageMetadata())).build();
 	}
 
 	private VertexAiGeminiChatOptions vertexAiGeminiChatOptions(Prompt prompt) {

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/ChatClientResponseEntityTests.java
Patch:
@@ -42,6 +42,7 @@
 
 /**
  * @author Christian Tzolov
+ * @author Alexandros Pappas
  */
 @ExtendWith(MockitoExtension.class)
 public class ChatClientResponseEntityTests {
@@ -55,7 +56,7 @@ public class ChatClientResponseEntityTests {
 	@Test
 	public void responseEntityTest() {
 
-		ChatResponseMetadata metadata = ChatResponseMetadata.builder().withKeyValue("key1", "value1").build();
+		ChatResponseMetadata metadata = ChatResponseMetadata.builder().keyValue("key1", "value1").build();
 
 		var chatResponse = new ChatResponse(List.of(new Generation(new AssistantMessage("""
 				{"name":"John", "age":30}

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelMeterObservationHandlerTests.java
Patch:
@@ -44,6 +44,7 @@
  * Unit tests for {@link ChatModelMeterObservationHandler}.
  *
  * @author Thomas Vitale
+ * @author Alexandros Pappas
  */
 class ChatModelMeterObservationHandlerTests {
 
@@ -68,7 +69,7 @@ void shouldCreateAllMetersDuringAnObservation() {
 			.start();
 
 		observationContext.setResponse(new ChatResponse(List.of(new Generation(new AssistantMessage("test"))),
-				ChatResponseMetadata.builder().withModel("mistral-42").withUsage(new TestUsage()).build()));
+				ChatResponseMetadata.builder().model("mistral-42").usage(new TestUsage()).build()));
 
 		observation.stop();
 

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/MoonshotChatModel.java
Patch:
@@ -74,6 +74,7 @@
  * MoonshotChatModel is a {@link ChatModel} implementation that uses the Moonshot
  *
  * @author Geng Rong
+ * @author Alexandros Pappas
  */
 public class MoonshotChatModel extends AbstractToolCallSupport implements ChatModel, StreamingChatModel {
 
@@ -109,7 +110,7 @@ public class MoonshotChatModel extends AbstractToolCallSupport implements ChatMo
 	 * Moonshot Chat API.
 	 */
 	public MoonshotChatModel(MoonshotApi moonshotApi) {
-		this(moonshotApi, MoonshotChatOptions.builder().withModel(MoonshotApi.DEFAULT_CHAT_MODEL).build());
+		this(moonshotApi, MoonshotChatOptions.builder().model(MoonshotApi.DEFAULT_CHAT_MODEL).build());
 	}
 
 	/**
@@ -411,7 +412,7 @@ else if (message.getMessageType() == MessageType.TOOL) {
 		if (!CollectionUtils.isEmpty(enabledToolsToUse)) {
 
 			request = ModelOptionsUtils.merge(
-					MoonshotChatOptions.builder().withTools(this.getFunctionTools(enabledToolsToUse)).build(), request,
+					MoonshotChatOptions.builder().tools(this.getFunctionTools(enabledToolsToUse)).build(), request,
 					ChatCompletionRequest.class);
 		}
 

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotChatCompletionRequestTest.java
Patch:
@@ -27,6 +27,7 @@
 
 /**
  * @author Geng Rong
+ * @author Alexandros Pappas
  */
 @SpringBootTest
 @EnabledIfEnvironmentVariable(named = "MOONSHOT_API_KEY", matches = ".+")
@@ -47,7 +48,7 @@ void chatCompletionDefaultRequestTest() {
 
 	@Test
 	void chatCompletionRequestWithOptionsTest() {
-		var options = MoonshotChatOptions.builder().withTemperature(0.5).withTopP(0.8).build();
+		var options = MoonshotChatOptions.builder().temperature(0.5).topP(0.8).build();
 		var request = this.chatModel.createRequest(new Prompt("test content", options), true);
 
 		assertThat(request.messages().size()).isEqualTo(1);

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/chat/MoonshotChatModelFunctionCallingIT.java
Patch:
@@ -62,8 +62,8 @@ void functionCallTest() {
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 
 		var promptOptions = MoonshotChatOptions.builder()
-			.withModel(MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue())
-			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+			.model(MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue())
+			.functionCallbacks(List.of(FunctionCallback.builder()
 				.function("getCurrentWeather", new MockWeatherService())
 				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
@@ -86,7 +86,7 @@ void streamFunctionCallTest() {
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 
 		var promptOptions = MoonshotChatOptions.builder()
-			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+			.functionCallbacks(List.of(FunctionCallback.builder()
 				.function("getCurrentWeather", new MockWeatherService())
 				.description("Get the weather in location")
 				.build()))

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/moonshot/MoonshotChatProperties.java
Patch:
@@ -25,6 +25,7 @@
  * Configuration properties for Moonshot chat client.
  *
  * @author Geng Rong
+ * @author Alexandros Pappas
  */
 @ConfigurationProperties(MoonshotChatProperties.CONFIG_PREFIX)
 public class MoonshotChatProperties extends MoonshotParentProperties {
@@ -42,8 +43,8 @@ public class MoonshotChatProperties extends MoonshotParentProperties {
 
 	@NestedConfigurationProperty
 	private MoonshotChatOptions options = MoonshotChatOptions.builder()
-		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.model(DEFAULT_CHAT_MODEL)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public MoonshotChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -43,6 +43,7 @@
 
 /**
  * @author Geng Rong
+ * @author Alexandros Pappas
  */
 @EnabledIfEnvironmentVariable(named = "MOONSHOT_API_KEY", matches = ".*")
 public class FunctionCallbackInPromptIT {
@@ -64,7 +65,7 @@ void functionCallTest() {
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius");
 
 			var promptOptions = MoonshotChatOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
@@ -90,7 +91,7 @@ void streamingFunctionCallTest() {
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius");
 
 			var promptOptions = MoonshotChatOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)

File: vector-stores/spring-ai-mariadb-store/src/test/java/org/springframework/ai/vectorstore/mariadb/MariaDBStoreTests.java
Patch:
@@ -70,8 +70,9 @@ void shouldAddDocumentsInBatchesAndEmbedOnce() {
 		// Given
 		var jdbcTemplate = mock(JdbcTemplate.class);
 		var embeddingModel = mock(EmbeddingModel.class);
-		var mariadbVectorStore = new MariaDBVectorStore.Builder(jdbcTemplate, embeddingModel)
-			.withMaxDocumentBatchSize(1000)
+		var mariadbVectorStore = MariaDBVectorStore.builder(jdbcTemplate)
+			.embeddingModel(embeddingModel)
+			.maxDocumentBatchSize(1000)
 			.build();
 
 		// Testing with 9989 documents

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseVectorStoreProperties.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.autoconfigure.vectorstore.typesense;
 
 import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
-import org.springframework.ai.vectorstore.TypesenseVectorStore;
+import org.springframework.ai.vectorstore.typesense.TypesenseVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**

File: vector-stores/spring-ai-typesense-store/src/main/java/org/springframework/ai/vectorstore/typesense/TypesenseFilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.typesense;
 
 import org.springframework.ai.vectorstore.filter.Filter;
 import org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;

File: vector-stores/spring-ai-typesense-store/src/test/java/org/springframework/ai/vectorstore/typesense/TypesenseImage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.typesense;
 
 import org.testcontainers.utility.DockerImageName;
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseChatClientIT.java
Patch:
@@ -372,7 +372,7 @@ void multiModalityEmbeddedImage(String modelName) throws IOException {
 
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
-				.options(FunctionCallingOptions.builder().withModel(modelName).build())
+				.options(FunctionCallingOptions.builder().model(modelName).build())
 				.user(u -> u.text("Explain what do you see on this picture?")
 						.media(MimeTypeUtils.IMAGE_PNG, new ClassPathResource("/test.png")))
 				.call()
@@ -394,7 +394,7 @@ void multiModalityImageUrl(String modelName) throws IOException {
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
 		// TODO consider adding model(...) method to ChatClient as a shortcut to
-		.options(FunctionCallingOptions.builder().withModel(modelName).build())
+		.options(FunctionCallingOptions.builder().model(modelName).build())
 		.user(u -> u.text("Explain what do you see on this picture?").media(MimeTypeUtils.IMAGE_PNG, url))
 		.call()
 		.content();

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseTestConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public BedrockProxyChatModel bedrockConverseChatModel() {
 			.withRegion(Region.US_EAST_1)
 			.withTimeout(Duration.ofSeconds(120))
 			// .withRegion(Region.US_EAST_1)
-			.withDefaultOptions(FunctionCallingOptions.builder().withModel(modelId).build())
+			.withDefaultOptions(FunctionCallingOptions.builder().model(modelId).build())
 			.build();
 	}
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseUsageAggregationTests.java
Patch:
@@ -41,7 +41,6 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallingOptions;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.isA;
@@ -145,7 +144,7 @@ public void callWithToolUse() {
 			.build();
 
 		var result = this.chatModel.call(new Prompt("What is the weather in Paris?",
-				PortableFunctionCallingOptions.builder().withFunctionCallbacks(functionCallback).build()));
+				FunctionCallingOptions.builder().functionCallbacks(functionCallback).build()));
 
 		assertThat(result).isNotNull();
 		assertThat(result.getResult().getOutput().getText())

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/client/BedrockNovaChatClientIT.java
Patch:
@@ -184,7 +184,7 @@ public BedrockProxyChatModel bedrockConverseChatModel() {
 				.withCredentialsProvider(EnvironmentVariableCredentialsProvider.create())
 				.withRegion(Region.US_EAST_1)
 				.withTimeout(Duration.ofSeconds(120))
-				.withDefaultOptions(FunctionCallingOptions.builder().withModel(modelId).build())
+				.withDefaultOptions(FunctionCallingOptions.builder().model(modelId).build())
 				.build();
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingHelper.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.ModelOptionsUtils;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
 import org.springframework.util.CollectionUtils;
 
 /**
@@ -45,7 +44,7 @@
 public class FunctionCallingHelper extends AbstractToolCallSupport {
 
 	public FunctionCallingHelper() {
-		this(null, PortableFunctionCallingOptions.builder().build(), List.of());
+		this(null, FunctionCallingOptions.builder().build(), List.of());
 	}
 
 	public FunctionCallingHelper(FunctionCallbackResolver functionCallbackResolver,

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
+import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
@@ -96,7 +96,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 						"What's the weather like in San Francisco, in Paris, France and in Tokyo, Japan? Return the temperature in Celsius.");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						PortableFunctionCallingOptions.builder().withFunction("weatherFunction").build()));
+						FunctionCallingOptions.builder().function("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
+import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
@@ -96,7 +96,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 						"What's the weather like in San Francisco, Paris and in Tokyo? Use Multi-turn function calling.");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						PortableFunctionCallingOptions.builder().withFunction("weatherFunction").build()));
+						FunctionCallingOptions.builder().function("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/converse/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -57,7 +57,7 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, in Paris and in Tokyo? Return the temperature in Celsius.");
 
 				var promptOptions = FunctionCallingOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MockWeatherService())
 						.description("Get the weather in location. Return temperature in 36°F or 36°C format.")
 						.inputType(MockWeatherService.Request.class)

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/FunctionCallbackWithPlainFunctionBeanIT.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.ai.minimax.MiniMaxChatModel;
 import org.springframework.ai.minimax.MiniMaxChatOptions;
 import org.springframework.ai.model.function.FunctionCallingOptions;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
@@ -98,8 +97,8 @@ void functionCallWithPortableFunctionCallingOptions() {
 			UserMessage userMessage = new UserMessage(
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius.");
 
-			PortableFunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
-				.withFunction("weatherFunction")
+			FunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
+				.function("weatherFunction")
 				.build();
 
 			ChatResponse response = chatModel.call(new Prompt(List.of(userMessage), functionOptions));

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java
Patch:
@@ -39,7 +39,6 @@
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest.ToolChoice;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallingOptions;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 
@@ -98,8 +97,8 @@ void functionCallWithPortableFunctionCallingOptions() {
 
 				UserMessage userMessage = new UserMessage("What's the weather like in Paris? Use Celsius.");
 
-				PortableFunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				FunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MyWeatherService())
 						.description("Get the current weather in requested location")
 						.inputType(MyWeatherService.Request.class)

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/tool/FunctionCallbackWithPlainFunctionBeanIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallingOptions;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
 import org.springframework.ai.moonshot.MoonshotChatModel;
 import org.springframework.ai.moonshot.MoonshotChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
@@ -98,8 +97,8 @@ void functionCallWithPortableFunctionCallingOptions() {
 			UserMessage userMessage = new UserMessage(
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius");
 
-			PortableFunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
-				.withFunction("weatherFunction")
+			FunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
+				.function("weatherFunction")
 				.build();
 
 			ChatResponse response = chatModel.call(new Prompt(List.of(userMessage), functionOptions));

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
+import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
@@ -109,7 +109,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 						""");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						PortableFunctionCallingOptions.builder().withFunction("weatherFunction").build()));
+						FunctionCallingOptions.builder().function("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/tool/FunctionCallbackWithPlainFunctionBeanIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallingOptions;
-import org.springframework.ai.model.function.FunctionCallingOptionsBuilder.PortableFunctionCallingOptions;
 import org.springframework.ai.zhipuai.ZhiPuAiChatModel;
 import org.springframework.ai.zhipuai.ZhiPuAiChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
@@ -98,8 +97,8 @@ void functionCallWithPortableFunctionCallingOptions() {
 			UserMessage userMessage = new UserMessage(
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius.");
 
-			PortableFunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
-				.withFunction("weatherFunction")
+			FunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
+				.function("weatherFunction")
 				.build();
 
 			ChatResponse response = chatModel.call(new Prompt(List.of(userMessage), functionOptions));

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/image/AzureOpenAiImageModelIT.java
Patch:
@@ -53,7 +53,7 @@ public class AzureOpenAiImageModelIT {
 
 	@Test
 	void imageAsUrlTest() {
-		var options = ImageOptionsBuilder.builder().withHeight(1024).withWidth(1024).build();
+		var options = ImageOptionsBuilder.builder().height(1024).width(1024).build();
 
 		var instructions = """
 				A light cream colored mini golden doodle with a sign that contains the message "I'm on my way to BARCADE!".""";

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageModelIT.java
Patch:
@@ -38,7 +38,7 @@ public class OpenAiImageModelIT extends AbstractIT {
 
 	@Test
 	void imageAsUrlTest() {
-		var options = ImageOptionsBuilder.builder().withHeight(1024).withWidth(1024).build();
+		var options = ImageOptionsBuilder.builder().height(1024).width(1024).build();
 
 		var instructions = """
 				A light cream colored mini golden doodle with a sign that contains the message "I'm on my way to BARCADE!".""";

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/image/QianFanImageModelIT.java
Patch:
@@ -45,7 +45,7 @@ public class QianFanImageModelIT {
 
 	@Test
 	void imageTest() {
-		var options = ImageOptionsBuilder.builder().withHeight(1024).withWidth(1024).build();
+		var options = ImageOptionsBuilder.builder().height(1024).width(1024).build();
 
 		var instructions = """
 				A light cream colored mini golden doodle with a sign that contains the message "I'm on my way to BARCADE!".""";

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/image/ZhiPuAiImageModelIT.java
Patch:
@@ -40,7 +40,7 @@ public class ZhiPuAiImageModelIT {
 
 	@Test
 	void imageAsUrlTest() {
-		var options = ImageOptionsBuilder.builder().withHeight(1024).withWidth(1024).build();
+		var options = ImageOptionsBuilder.builder().height(1024).width(1024).build();
 
 		var instructions = """
 				A light cream colored mini golden doodle with a sign that contains the message "I'm on my way to BARCADE!".""";

File: spring-ai-core/src/test/java/org/springframework/ai/image/observation/ImageModelObservationContextTests.java
Patch:
@@ -36,7 +36,7 @@ void whenMandatoryRequestOptionsThenReturn() {
 		var observationContext = ImageModelObservationContext.builder()
 			.imagePrompt(generateImagePrompt())
 			.provider("superprovider")
-			.requestOptions(ImageOptionsBuilder.builder().withModel("supersun").build())
+			.requestOptions(ImageOptionsBuilder.builder().model("supersun").build())
 			.build();
 
 		assertThat(observationContext).isNotNull();

File: spring-ai-core/src/test/java/org/springframework/ai/image/observation/ImageModelPromptContentObservationFilterTests.java
Patch:
@@ -51,7 +51,7 @@ void whenEmptyPromptThenReturnOriginalContext() {
 		var expectedContext = ImageModelObservationContext.builder()
 			.imagePrompt(new ImagePrompt(""))
 			.provider("superprovider")
-			.requestOptions(ImageOptionsBuilder.builder().withModel("mistral").build())
+			.requestOptions(ImageOptionsBuilder.builder().model("mistral").build())
 			.build();
 		var actualContext = this.observationFilter.map(expectedContext);
 
@@ -63,7 +63,7 @@ void whenPromptWithTextThenAugmentContext() {
 		var originalContext = ImageModelObservationContext.builder()
 			.imagePrompt(new ImagePrompt("supercalifragilisticexpialidocious"))
 			.provider("superprovider")
-			.requestOptions(ImageOptionsBuilder.builder().withModel("mistral").build())
+			.requestOptions(ImageOptionsBuilder.builder().model("mistral").build())
 			.build();
 		var augmentedContext = this.observationFilter.map(originalContext);
 
@@ -77,7 +77,7 @@ void whenPromptWithMessagesThenAugmentContext() {
 			.imagePrompt(new ImagePrompt(List.of(new ImageMessage("you're a chimney sweep"),
 					new ImageMessage("supercalifragilisticexpialidocious"))))
 			.provider("superprovider")
-			.requestOptions(ImageOptionsBuilder.builder().withModel("mistral").build())
+			.requestOptions(ImageOptionsBuilder.builder().model("mistral").build())
 			.build();
 		var augmentedContext = this.observationFilter.map(originalContext);
 

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanChatModel.java
Patch:
@@ -104,8 +104,7 @@ public class QianFanChatModel implements ChatModel, StreamingChatModel {
 	 * @throws IllegalArgumentException if QianFanApi is null
 	 */
 	public QianFanChatModel(QianFanApi qianFanApi) {
-		this(qianFanApi,
-				QianFanChatOptions.builder().withModel(QianFanApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
+		this(qianFanApi, QianFanChatOptions.builder().model(QianFanApi.DEFAULT_CHAT_MODEL).temperature(0.7).build());
 	}
 
 	/**

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanEmbeddingModel.java
Patch:
@@ -90,7 +90,7 @@ public QianFanEmbeddingModel(QianFanApi qianFanApi) {
 	 */
 	public QianFanEmbeddingModel(QianFanApi qianFanApi, MetadataMode metadataMode) {
 		this(qianFanApi, metadataMode,
-				QianFanEmbeddingOptions.builder().withModel(QianFanApi.DEFAULT_EMBEDDING_MODEL).build());
+				QianFanEmbeddingOptions.builder().model(QianFanApi.DEFAULT_EMBEDDING_MODEL).build());
 	}
 
 	/**
@@ -206,8 +206,8 @@ private QianFanEmbeddingOptions mergeOptions(@Nullable EmbeddingOptions runtimeO
 		}
 
 		return QianFanEmbeddingOptions.builder()
-			.withModel(ModelOptionsUtils.mergeOption(runtimeOptionsForProvider.getModel(), defaultOptions.getModel()))
-			.withUser(ModelOptionsUtils.mergeOption(runtimeOptionsForProvider.getUser(), defaultOptions.getUser()))
+			.model(ModelOptionsUtils.mergeOption(runtimeOptionsForProvider.getModel(), defaultOptions.getModel()))
+			.user(ModelOptionsUtils.mergeOption(runtimeOptionsForProvider.getUser(), defaultOptions.getUser()))
 			.build();
 	}
 

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/ChatCompletionRequestTests.java
Patch:
@@ -32,7 +32,7 @@ public class ChatCompletionRequestTests {
 	public void createRequestWithChatOptions() {
 
 		var client = new QianFanChatModel(new QianFanApi("TEST", "TEST"),
-				QianFanChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6).build());
+				QianFanChatOptions.builder().model("DEFAULT_MODEL").temperature(66.6).build());
 
 		var request = client.createRequest(new Prompt("Test message content"), false);
 
@@ -43,7 +43,7 @@ public void createRequestWithChatOptions() {
 		assertThat(request.temperature()).isEqualTo(66.6);
 
 		request = client.createRequest(new Prompt("Test message content",
-				QianFanChatOptions.builder().withModel("PROMPT_MODEL").withTemperature(99.9).build()), true);
+				QianFanChatOptions.builder().model("PROMPT_MODEL").temperature(99.9).build()), true);
 
 		assertThat(request.messages()).hasSize(1);
 		assertThat(request.stream()).isTrue();

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/embedding/QianFanEmbeddingModelObservationIT.java
Patch:
@@ -63,7 +63,7 @@ public class QianFanEmbeddingModelObservationIT {
 	@Test
 	void observationForEmbeddingOperation() {
 		var options = QianFanEmbeddingOptions.builder()
-			.withModel(QianFanApi.EmbeddingModel.BGE_LARGE_ZH.getValue())
+			.model(QianFanApi.EmbeddingModel.BGE_LARGE_ZH.getValue())
 			.build();
 
 		EmbeddingRequest embeddingRequest = new EmbeddingRequest(List.of("Here comes the sun"), options);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanChatProperties.java
Patch:
@@ -42,8 +42,8 @@ public class QianFanChatProperties extends QianFanParentProperties {
 
 	@NestedConfigurationProperty
 	private QianFanChatOptions options = QianFanChatOptions.builder()
-		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.model(DEFAULT_CHAT_MODEL)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public QianFanChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanEmbeddingProperties.java
Patch:
@@ -41,7 +41,7 @@ public class QianFanEmbeddingProperties extends QianFanParentProperties {
 
 	@NestedConfigurationProperty
 	private QianFanEmbeddingOptions options = QianFanEmbeddingOptions.builder()
-		.withModel(QianFanApi.DEFAULT_EMBEDDING_MODEL)
+		.model(QianFanApi.DEFAULT_EMBEDDING_MODEL)
 		.build();
 
 	public QianFanEmbeddingOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanImageProperties.java
Patch:
@@ -42,7 +42,7 @@ public class QianFanImageProperties extends QianFanParentProperties {
 	 * Options for QianFan Image API.
 	 */
 	@NestedConfigurationProperty
-	private QianFanImageOptions options = QianFanImageOptions.builder().withModel(DEFAULT_IMAGE_MODEL).build();
+	private QianFanImageOptions options = QianFanImageOptions.builder().model(DEFAULT_IMAGE_MODEL).build();
 
 	public QianFanImageOptions getOptions() {
 		return this.options;

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiChatModel.java
Patch:
@@ -123,8 +123,7 @@ public class ZhiPuAiChatModel extends AbstractToolCallSupport implements ChatMod
 	 * @throws IllegalArgumentException if zhiPuAiApi is null
 	 */
 	public ZhiPuAiChatModel(ZhiPuAiApi zhiPuAiApi) {
-		this(zhiPuAiApi,
-				ZhiPuAiChatOptions.builder().withModel(ZhiPuAiApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
+		this(zhiPuAiApi, ZhiPuAiChatOptions.builder().model(ZhiPuAiApi.DEFAULT_CHAT_MODEL).temperature(0.7).build());
 	}
 
 	/**
@@ -434,7 +433,7 @@ else if (message.getMessageType() == MessageType.TOOL) {
 		if (!CollectionUtils.isEmpty(enabledToolsToUse)) {
 
 			request = ModelOptionsUtils.merge(
-					ZhiPuAiChatOptions.builder().withTools(this.getFunctionTools(enabledToolsToUse)).build(), request,
+					ZhiPuAiChatOptions.builder().tools(this.getFunctionTools(enabledToolsToUse)).build(), request,
 					ChatCompletionRequest.class);
 		}
 

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiEmbeddingModel.java
Patch:
@@ -90,7 +90,7 @@ public ZhiPuAiEmbeddingModel(ZhiPuAiApi zhiPuAiApi) {
 	 */
 	public ZhiPuAiEmbeddingModel(ZhiPuAiApi zhiPuAiApi, MetadataMode metadataMode) {
 		this(zhiPuAiApi, metadataMode,
-				ZhiPuAiEmbeddingOptions.builder().withModel(ZhiPuAiApi.DEFAULT_EMBEDDING_MODEL).build(),
+				ZhiPuAiEmbeddingOptions.builder().model(ZhiPuAiApi.DEFAULT_EMBEDDING_MODEL).build(),
 				RetryUtils.DEFAULT_RETRY_TEMPLATE);
 	}
 
@@ -220,7 +220,7 @@ private ZhiPuAiEmbeddingOptions mergeOptions(@Nullable EmbeddingOptions runtimeO
 		}
 
 		return ZhiPuAiEmbeddingOptions.builder()
-			.withModel(ModelOptionsUtils.mergeOption(runtimeOptionsForProvider.getModel(), defaultOptions.getModel()))
+			.model(ModelOptionsUtils.mergeOption(runtimeOptionsForProvider.getModel(), defaultOptions.getModel()))
 			.build();
 	}
 

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiImageModel.java
Patch:
@@ -122,11 +122,11 @@ private ZhiPuAiImageOptions toZhiPuAiImageOptions(ImageOptions runtimeImageOptio
 		ZhiPuAiImageOptions.Builder zhiPuAiImageOptionsBuilder = ZhiPuAiImageOptions.builder();
 		if (runtimeImageOptions != null) {
 			if (runtimeImageOptions.getModel() != null) {
-				zhiPuAiImageOptionsBuilder.withModel(runtimeImageOptions.getModel());
+				zhiPuAiImageOptionsBuilder.model(runtimeImageOptions.getModel());
 			}
 			if (runtimeImageOptions instanceof ZhiPuAiImageOptions runtimeZhiPuAiImageOptions) {
 				if (runtimeZhiPuAiImageOptions.getUser() != null) {
-					zhiPuAiImageOptionsBuilder.withUser(runtimeZhiPuAiImageOptions.getUser());
+					zhiPuAiImageOptionsBuilder.user(runtimeZhiPuAiImageOptions.getUser());
 				}
 			}
 		}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiChatProperties.java
Patch:
@@ -42,8 +42,8 @@ public class ZhiPuAiChatProperties extends ZhiPuAiParentProperties {
 
 	@NestedConfigurationProperty
 	private ZhiPuAiChatOptions options = ZhiPuAiChatOptions.builder()
-		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.model(DEFAULT_CHAT_MODEL)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public ZhiPuAiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiEmbeddingProperties.java
Patch:
@@ -42,9 +42,7 @@ public class ZhiPuAiEmbeddingProperties extends ZhiPuAiParentProperties {
 	private MetadataMode metadataMode = MetadataMode.EMBED;
 
 	@NestedConfigurationProperty
-	private ZhiPuAiEmbeddingOptions options = ZhiPuAiEmbeddingOptions.builder()
-		.withModel(DEFAULT_EMBEDDING_MODEL)
-		.build();
+	private ZhiPuAiEmbeddingOptions options = ZhiPuAiEmbeddingOptions.builder().model(DEFAULT_EMBEDDING_MODEL).build();
 
 	public ZhiPuAiEmbeddingOptions getOptions() {
 		return this.options;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -64,7 +64,7 @@ void functionCallTest() {
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius.");
 
 			var promptOptions = ZhiPuAiChatOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
@@ -92,7 +92,7 @@ void streamingFunctionCallTest() {
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius.");
 
 			var promptOptions = ZhiPuAiChatOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)

File: models/spring-ai-vertex-ai-embedding/src/test/java/org/springframework/ai/vertexai/embedding/multimodal/VertexAiMultimodalEmbeddingModelIT.java
Patch:
@@ -225,8 +225,8 @@ static class Config {
 		@Bean
 		public VertexAiEmbeddingConnectionDetails connectionDetails() {
 			return VertexAiEmbeddingConnectionDetails.builder()
-				.withProjectId(System.getenv("VERTEX_AI_GEMINI_PROJECT_ID"))
-				.withLocation(System.getenv("VERTEX_AI_GEMINI_LOCATION"))
+				.projectId(System.getenv("VERTEX_AI_GEMINI_PROJECT_ID"))
+				.location(System.getenv("VERTEX_AI_GEMINI_LOCATION"))
 				.build();
 		}
 
@@ -235,7 +235,7 @@ public VertexAiMultimodalEmbeddingModel vertexAiEmbeddingModel(
 				VertexAiEmbeddingConnectionDetails connectionDetails) {
 
 			VertexAiMultimodalEmbeddingOptions options = VertexAiMultimodalEmbeddingOptions.builder()
-				.withModel(VertexAiMultimodalEmbeddingModelName.MULTIMODAL_EMBEDDING_001)
+				.model(VertexAiMultimodalEmbeddingModelName.MULTIMODAL_EMBEDDING_001)
 				.build();
 
 			return new VertexAiMultimodalEmbeddingModel(connectionDetails, options);

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -123,8 +123,7 @@ public class VertexAiGeminiChatModel extends AbstractToolCallSupport implements
 	private ChatModelObservationConvention observationConvention = DEFAULT_OBSERVATION_CONVENTION;
 
 	public VertexAiGeminiChatModel(VertexAI vertexAI) {
-		this(vertexAI,
-				VertexAiGeminiChatOptions.builder().withModel(ChatModel.GEMINI_1_5_PRO).withTemperature(0.8).build());
+		this(vertexAI, VertexAiGeminiChatOptions.builder().model(ChatModel.GEMINI_1_5_PRO).temperature(0.8).build());
 	}
 
 	public VertexAiGeminiChatModel(VertexAI vertexAI, VertexAiGeminiChatOptions options) {

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModelIT.java
Patch:
@@ -88,7 +88,7 @@ void testMessageHistory() {
 
 	@Test
 	void googleSearchTool() {
-		Prompt prompt = createPrompt(VertexAiGeminiChatOptions.builder().withGoogleSearchRetrieval(true).build());
+		Prompt prompt = createPrompt(VertexAiGeminiChatOptions.builder().googleSearchRetrieval(true).build());
 		ChatResponse response = this.chatModel.call(prompt);
 		assertThat(response.getResult().getOutput().getText()).containsAnyOf("Blackbeard", "Bartholomew");
 	}
@@ -295,7 +295,7 @@ public VertexAI vertexAiApi() {
 		public VertexAiGeminiChatModel vertexAiEmbedding(VertexAI vertexAi) {
 			return new VertexAiGeminiChatModel(vertexAi,
 					VertexAiGeminiChatOptions.builder()
-						.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_PRO)
+						.model(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_PRO)
 						.build());
 		}
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiRetryTests.java
Patch:
@@ -73,9 +73,9 @@ public void setUp() {
 
 		this.chatModel = new TestVertexAiGeminiChatModel(this.vertexAI,
 				VertexAiGeminiChatOptions.builder()
-					.withTemperature(0.7)
-					.withTopP(1.0)
-					.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_PRO.getValue())
+					.temperature(0.7)
+					.topP(1.0)
+					.model(VertexAiGeminiChatModel.ChatModel.GEMINI_PRO.getValue())
 					.build(),
 				null, Collections.emptyList(), this.retryTemplate);
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiPaymentTransactionIT.java
Patch:
@@ -212,8 +212,8 @@ public VertexAiGeminiChatModel vertexAiChatModel(VertexAI vertexAi, ApplicationC
 
 			return new VertexAiGeminiChatModel(vertexAi,
 					VertexAiGeminiChatOptions.builder()
-							.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_FLASH)
-							.withTemperature(0.1)
+							.model(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_FLASH)
+							.temperature(0.1)
 							.build(),
 					functionCallbackResolver);
 		}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/embedding/VertexAiEmbeddingAutoConfiguration.java
Patch:
@@ -61,11 +61,11 @@ public VertexAiEmbeddingConnectionDetails connectionDetails(
 		Assert.hasText(connectionProperties.getLocation(), "Vertex AI location must be set!");
 
 		var connectionBuilder = VertexAiEmbeddingConnectionDetails.builder()
-			.withProjectId(connectionProperties.getProjectId())
-			.withLocation(connectionProperties.getLocation());
+			.projectId(connectionProperties.getProjectId())
+			.location(connectionProperties.getLocation());
 
 		if (StringUtils.hasText(connectionProperties.getApiEndpoint())) {
-			connectionBuilder.withApiEndpoint(connectionProperties.getApiEndpoint());
+			connectionBuilder.apiEndpoint(connectionProperties.getApiEndpoint());
 		}
 
 		return connectionBuilder.build();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/embedding/VertexAiMultimodalEmbeddingProperties.java
Patch:
@@ -36,7 +36,7 @@ public class VertexAiMultimodalEmbeddingProperties {
 	 * Vertex AI Text Embedding API options.
 	 */
 	private VertexAiMultimodalEmbeddingOptions options = VertexAiMultimodalEmbeddingOptions.builder()
-		.withModel(VertexAiMultimodalEmbeddingOptions.DEFAULT_MODEL_NAME)
+		.model(VertexAiMultimodalEmbeddingOptions.DEFAULT_MODEL_NAME)
 		.build();
 
 	public VertexAiMultimodalEmbeddingOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/embedding/VertexAiTextEmbeddingProperties.java
Patch:
@@ -36,8 +36,8 @@ public class VertexAiTextEmbeddingProperties {
 	 * Vertex AI Text Embedding API options.
 	 */
 	private VertexAiTextEmbeddingOptions options = VertexAiTextEmbeddingOptions.builder()
-		.withTaskType(VertexAiTextEmbeddingOptions.TaskType.RETRIEVAL_DOCUMENT)
-		.withModel(VertexAiTextEmbeddingOptions.DEFAULT_MODEL_NAME)
+		.taskType(VertexAiTextEmbeddingOptions.TaskType.RETRIEVAL_DOCUMENT)
+		.model(VertexAiTextEmbeddingOptions.DEFAULT_MODEL_NAME)
 		.build();
 
 	public VertexAiTextEmbeddingOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiChatProperties.java
Patch:
@@ -37,9 +37,9 @@ public class VertexAiGeminiChatProperties {
 	 * Vertex AI Gemini API generative options.
 	 */
 	private VertexAiGeminiChatOptions options = VertexAiGeminiChatOptions.builder()
-		.withTemperature(0.7)
-		.withCandidateCount(1)
-		.withModel(DEFAULT_MODEL)
+		.temperature(0.7)
+		.candidateCount(1)
+		.model(DEFAULT_MODEL)
 		.build();
 
 	public VertexAiGeminiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -69,14 +69,14 @@ void functionCallTest() {
 						""");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						VertexAiGeminiChatOptions.builder().withFunction("weatherFunction").build()));
+						VertexAiGeminiChatOptions.builder().function("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 
 				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
-						VertexAiGeminiChatOptions.builder().withFunction("weatherFunction3").build()));
+						VertexAiGeminiChatOptions.builder().function("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 
@@ -116,7 +116,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
-						VertexAiGeminiChatOptions.builder().withFunction("weatherFunction3").build()));
+						VertexAiGeminiChatOptions.builder().function("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -65,7 +65,7 @@ void functionCallTest() {
 						""");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						VertexAiGeminiChatOptions.builder().withFunction("WeatherInfo").build()));
+						VertexAiGeminiChatOptions.builder().function("WeatherInfo").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -68,7 +68,7 @@ void functionCallTest() {
 						""");
 
 				var promptOptions = VertexAiGeminiChatOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MockWeatherService())
 						.schemaType(SchemaType.OPEN_API_SCHEMA) // IMPORTANT!!
 						.description("Get the weather in location")

File: models/spring-ai-stability-ai/src/test/java/org/springframework/ai/stabilityai/StabilityAiImageModelIT.java
Patch:
@@ -56,7 +56,7 @@ private static void writeFile(Image image) throws IOException {
 	void imageAsBase64Test() throws IOException {
 
 		StabilityAiImageOptions imageOptions = StabilityAiImageOptions.builder()
-			.withStylePreset(StyleEnum.PHOTOGRAPHIC)
+			.stylePreset(StyleEnum.PHOTOGRAPHIC)
 			.build();
 
 		var instructions = """

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiAutoConfigurationIT.java
Patch:
@@ -43,7 +43,7 @@ void generate() {
 		this.contextRunner.run(context -> {
 			ImageModel imageModel = context.getBean(ImageModel.class);
 			StabilityAiImageOptions imageOptions = StabilityAiImageOptions.builder()
-				.withStylePreset(StyleEnum.PHOTOGRAPHIC)
+				.stylePreset(StyleEnum.PHOTOGRAPHIC)
 				.build();
 
 			var instructions = """

File: models/spring-ai-oci-genai/src/test/java/org/springframework/ai/oci/BaseEmbeddingModelTest.java
Patch:
@@ -28,9 +28,9 @@ public class BaseEmbeddingModelTest extends BaseOCIGenAITest {
 	 */
 	public static OCIEmbeddingModel getEmbeddingModel() {
 		OCIEmbeddingOptions options = OCIEmbeddingOptions.builder()
-			.withModel(EMBEDDING_MODEL_V2)
-			.withCompartment(COMPARTMENT_ID)
-			.withServingMode("on-demand")
+			.model(EMBEDDING_MODEL_V2)
+			.compartment(COMPARTMENT_ID)
+			.servingMode("on-demand")
 			.build();
 		return new OCIEmbeddingModel(getGenerativeAIClient(), options);
 	}

File: models/spring-ai-oci-genai/src/test/java/org/springframework/ai/oci/OCIEmbeddingModelIT.java
Patch:
@@ -51,8 +51,8 @@ void call() {
 
 	@Test
 	void callWithOptions() {
-		EmbeddingResponse response = this.embeddingModel.call(new EmbeddingRequest(this.content,
-				OCIEmbeddingOptions.builder().withModel(EMBEDDING_MODEL_V3).build()));
+		EmbeddingResponse response = this.embeddingModel
+			.call(new EmbeddingRequest(this.content, OCIEmbeddingOptions.builder().model(EMBEDDING_MODEL_V3).build()));
 		assertThat(response).isNotNull();
 		assertThat(response.getResults()).hasSize(2);
 		assertThat(response.getMetadata().getModel()).isEqualTo(EMBEDDING_MODEL_V3);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/oci/genai/OCICohereChatModelProperties.java
Patch:
@@ -38,8 +38,8 @@ public class OCICohereChatModelProperties {
 
 	@NestedConfigurationProperty
 	private OCICohereChatOptions options = OCICohereChatOptions.builder()
-		.withServingMode(DEFAULT_SERVING_MODE)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.servingMode(DEFAULT_SERVING_MODE)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public boolean isEnabled() {

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/ReReadingAdvisor.java
Patch:
@@ -67,8 +67,8 @@ private AdvisedRequest before(AdvisedRequest advisedRequest) {
 		advisedUserParams.put("re2_input_query", advisedRequest.userText());
 
 		return AdvisedRequest.from(advisedRequest)
-			.withUserText(this.re2AdviseTemplate)
-			.withUserParams(advisedUserParams)
+			.userText(this.re2AdviseTemplate)
+			.userParams(advisedUserParams)
 			.build();
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/RequestResponseAdvisor.java
Patch:
@@ -67,9 +67,7 @@ default Flux<ChatResponse> adviseResponse(Flux<ChatResponse> fluxResponse, Map<S
 	default AdvisedResponse aroundCall(AdvisedRequest advisedRequest, CallAroundAdvisorChain chain) {
 		var context = new HashMap<>(advisedRequest.adviseContext());
 		var requestPrim = adviseRequest(advisedRequest, context);
-		advisedRequest = AdvisedRequest.from(requestPrim)
-			.withAdviseContext(Collections.unmodifiableMap(context))
-			.build();
+		advisedRequest = AdvisedRequest.from(requestPrim).adviseContext(Collections.unmodifiableMap(context)).build();
 
 		var advisedResponse = chain.nextAroundCall(advisedRequest);
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/MessageChatMemoryAdvisor.java
Patch:
@@ -91,7 +91,7 @@ private AdvisedRequest before(AdvisedRequest request) {
 		advisedMessages.addAll(memoryMessages);
 
 		// 3. Create a new request with the advised messages.
-		AdvisedRequest advisedRequest = AdvisedRequest.from(request).withMessages(advisedMessages).build();
+		AdvisedRequest advisedRequest = AdvisedRequest.from(request).messages(advisedMessages).build();
 
 		// 4. Add the new user input to the conversation memory.
 		UserMessage userMessage = new UserMessage(request.userText(), request.media());

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/RetrievalAugmentationAdvisor.java
Patch:
@@ -133,7 +133,7 @@ public AdvisedRequest before(AdvisedRequest request) {
 		Query augmentedQuery = this.queryAugmenter.augment(originalQuery, documents);
 
 		// 6. Update advised request with augmented prompt.
-		return AdvisedRequest.from(request).withUserText(augmentedQuery.text()).withAdviseContext(context).build();
+		return AdvisedRequest.from(request).userText(augmentedQuery.text()).adviseContext(context).build();
 	}
 
 	/**

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/MessageAggregator.java
Patch:
@@ -59,8 +59,8 @@ public Flux<AdvisedResponse> aggregateAdvisedResponse(Flux<AdvisedResponse> advi
 		}), aggregatedChatResponse -> {
 
 			AdvisedResponse aggregatedAdvisedResponse = AdvisedResponse.builder()
-				.withResponse(aggregatedChatResponse)
-				.withAdviseContext(adviseContext.get())
+				.response(aggregatedChatResponse)
+				.adviseContext(adviseContext.get())
 				.build();
 
 			aggregationHandler.accept(aggregatedAdvisedResponse);

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatModel.java
Patch:
@@ -148,8 +148,8 @@ public class AzureOpenAiChatModel extends AbstractToolCallSupport implements Cha
 	public AzureOpenAiChatModel(OpenAIClientBuilder openAIClientBuilder) {
 		this(openAIClientBuilder,
 				AzureOpenAiChatOptions.builder()
-					.withDeploymentName(DEFAULT_DEPLOYMENT_NAME)
-					.withTemperature(DEFAULT_TEMPERATURE)
+					.deploymentName(DEFAULT_DEPLOYMENT_NAME)
+					.temperature(DEFAULT_TEMPERATURE)
 					.build());
 	}
 

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModel.java
Patch:
@@ -80,7 +80,7 @@ public AzureOpenAiEmbeddingModel(OpenAIClient azureOpenAiClient) {
 
 	public AzureOpenAiEmbeddingModel(OpenAIClient azureOpenAiClient, MetadataMode metadataMode) {
 		this(azureOpenAiClient, metadataMode,
-				AzureOpenAiEmbeddingOptions.builder().withDeploymentName("text-embedding-ada-002").build());
+				AzureOpenAiEmbeddingOptions.builder().deploymentName("text-embedding-ada-002").build());
 	}
 
 	public AzureOpenAiEmbeddingModel(OpenAIClient azureOpenAiClient, MetadataMode metadataMode,

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiImageModel.java
Patch:
@@ -67,7 +67,7 @@ public class AzureOpenAiImageModel implements ImageModel {
 	private final ObjectMapper objectMapper;
 
 	public AzureOpenAiImageModel(OpenAIClient openAIClient) {
-		this(openAIClient, AzureOpenAiImageOptions.builder().withDeploymentName(DEFAULT_DEPLOYMENT_NAME).build());
+		this(openAIClient, AzureOpenAiImageOptions.builder().deploymentName(DEFAULT_DEPLOYMENT_NAME).build());
 	}
 
 	public AzureOpenAiImageModel(OpenAIClient microsoftOpenAiClient, AzureOpenAiImageOptions options) {

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatClientIT.java
Patch:
@@ -162,7 +162,7 @@ public OpenAIClientBuilder openAIClient() {
 		@Bean
 		public AzureOpenAiChatModel azureOpenAiChatModel(OpenAIClientBuilder openAIClientBuilder) {
 			return new AzureOpenAiChatModel(openAIClientBuilder,
-					AzureOpenAiChatOptions.builder().withDeploymentName("gpt-4o").withMaxTokens(1000).build());
+					AzureOpenAiChatOptions.builder().deploymentName("gpt-4o").maxTokens(1000).build());
 
 		}
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelIT.java
Patch:
@@ -221,7 +221,7 @@ void multiModalityImageUrl() throws IOException {
 
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
-				.options(AzureOpenAiChatOptions.builder().withDeploymentName("gpt-4o").build())
+				.options(AzureOpenAiChatOptions.builder().deploymentName("gpt-4o").build())
 				.user(u -> u.text("Explain what do you see on this picture?").media(MimeTypeUtils.IMAGE_PNG, url))
 				.call()
 				.content();
@@ -239,7 +239,7 @@ void multiModalityImageResource() {
 
 		// @formatter:off
 		String response = ChatClient.create(this.chatModel).prompt()
-				.options(AzureOpenAiChatOptions.builder().withDeploymentName("gpt-4o").build())
+				.options(AzureOpenAiChatOptions.builder().deploymentName("gpt-4o").build())
 				.user(u -> u.text("Explain what do you see on this picture?").media(MimeTypeUtils.IMAGE_PNG, resource))
 				.call()
 				.content();
@@ -271,7 +271,7 @@ public OpenAIClientBuilder openAIClientBuilder() {
 		@Bean
 		public AzureOpenAiChatModel azureOpenAiChatModel(OpenAIClientBuilder openAIClientBuilder) {
 			return new AzureOpenAiChatModel(openAIClientBuilder,
-					AzureOpenAiChatOptions.builder().withDeploymentName("gpt-4o").withMaxTokens(1000).build());
+					AzureOpenAiChatOptions.builder().deploymentName("gpt-4o").maxTokens(1000).build());
 
 		}
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelTests.java
Patch:
@@ -45,7 +45,7 @@ public void createAzureOpenAiChatModelTest() {
 		String callbackFromConstructorParam = "callbackFromConstructorParam";
 
 		AzureOpenAiChatOptions chatOptions = AzureOpenAiChatOptions.builder()
-			.withFunctionCallbacks(List.of(new TestFunctionCallback(callbackFromChatOptions)))
+			.functionCallbacks(List.of(new TestFunctionCallback(callbackFromChatOptions)))
 			.build();
 
 		List<FunctionCallback> functionCallbacks = List.of(new TestFunctionCallback(callbackFromConstructorParam));

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModelIT.java
Patch:
@@ -76,7 +76,7 @@ public OpenAIClient openAIClient() {
 		@Bean
 		public AzureOpenAiEmbeddingModel azureEmbeddingModel(OpenAIClient openAIClient) {
 			return new AzureOpenAiEmbeddingModel(openAIClient, MetadataMode.EMBED,
-					AzureOpenAiEmbeddingOptions.builder().withDeploymentName("text-embedding-ada-002").build());
+					AzureOpenAiEmbeddingOptions.builder().deploymentName("text-embedding-ada-002").build());
 		}
 
 	}

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModelObservationIT.java
Patch:
@@ -59,7 +59,7 @@ public class AzureOpenAiEmbeddingModelObservationIT {
 	@Test
 	void observationForEmbeddingOperation() {
 		var options = AzureOpenAiEmbeddingOptions.builder()
-			.withDeploymentName("text-embedding-ada-002")
+			.deploymentName("text-embedding-ada-002")
 			// should not send dimension value?
 			// https://github.com/SciPhi-AI/R2R/issues/354
 			// .withDimensions(1536)
@@ -111,7 +111,7 @@ public OpenAIClient openAIClient() {
 		public AzureOpenAiEmbeddingModel azureEmbeddingModel(OpenAIClient openAIClient,
 				TestObservationRegistry observationRegistry) {
 			return new AzureOpenAiEmbeddingModel(openAIClient, MetadataMode.EMBED,
-					AzureOpenAiEmbeddingOptions.builder().withDeploymentName("text-embedding-ada-002").build(),
+					AzureOpenAiEmbeddingOptions.builder().deploymentName("text-embedding-ada-002").build(),
 					observationRegistry);
 		}
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/image/AzureOpenAiImageModelIT.java
Patch:
@@ -101,7 +101,7 @@ public OpenAIClient openAIClient() {
 		@Bean
 		public AzureOpenAiImageModel azureOpenAiImageModel(OpenAIClient openAIClient) {
 			return new AzureOpenAiImageModel(openAIClient,
-					AzureOpenAiImageOptions.builder().withDeploymentName("dall-e-3").build());
+					AzureOpenAiImageOptions.builder().deploymentName("dall-e-3").build());
 
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiChatProperties.java
Patch:
@@ -36,8 +36,8 @@ public class AzureOpenAiChatProperties {
 
 	@NestedConfigurationProperty
 	private AzureOpenAiChatOptions options = AzureOpenAiChatOptions.builder()
-		.withDeploymentName(DEFAULT_DEPLOYMENT_NAME)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.deploymentName(DEFAULT_DEPLOYMENT_NAME)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public AzureOpenAiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiEmbeddingProperties.java
Patch:
@@ -34,7 +34,7 @@ public class AzureOpenAiEmbeddingProperties {
 
 	@NestedConfigurationProperty
 	private AzureOpenAiEmbeddingOptions options = AzureOpenAiEmbeddingOptions.builder()
-		.withDeploymentName("text-embedding-ada-002")
+		.deploymentName("text-embedding-ada-002")
 		.build();
 
 	private MetadataMode metadataMode = MetadataMode.EMBED;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -67,14 +67,14 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, Paris and in Tokyo? Use Multi-turn function calling.");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						AzureOpenAiChatOptions.builder().withFunction("weatherFunction").build()));
+						AzureOpenAiChatOptions.builder().function("weatherFunction").build()));
 
 				logger.info("Response: {}", response);
 
 				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
-						AzureOpenAiChatOptions.builder().withFunction("weatherFunction3").build()));
+						AzureOpenAiChatOptions.builder().function("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -64,7 +64,7 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, Paris and in Tokyo?");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(userMessage),
-						AzureOpenAiChatOptions.builder().withFunction("WeatherInfo").build()));
+						AzureOpenAiChatOptions.builder().function("WeatherInfo").build()));
 
 				logger.info("Response: {}", response);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -61,7 +61,7 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, in Paris and in Tokyo? Use Multi-turn function calling.");
 
 				var promptOptions = AzureOpenAiChatOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MockWeatherService())
 						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/MiniMaxChatModel.java
Patch:
@@ -119,8 +119,7 @@ public class MiniMaxChatModel extends AbstractToolCallSupport implements ChatMod
 	 * @throws IllegalArgumentException if MiniMaxApi is null
 	 */
 	public MiniMaxChatModel(MiniMaxApi miniMaxApi) {
-		this(miniMaxApi,
-				MiniMaxChatOptions.builder().withModel(MiniMaxApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
+		this(miniMaxApi, MiniMaxChatOptions.builder().model(MiniMaxApi.DEFAULT_CHAT_MODEL).temperature(0.7).build());
 	}
 
 	/**
@@ -501,7 +500,7 @@ else if (message.getMessageType() == MessageType.TOOL) {
 		if (!CollectionUtils.isEmpty(enabledToolsToUse)) {
 
 			request = ModelOptionsUtils.merge(
-					MiniMaxChatOptions.builder().withTools(this.getFunctionTools(enabledToolsToUse)).build(), request,
+					MiniMaxChatOptions.builder().tools(this.getFunctionTools(enabledToolsToUse)).build(), request,
 					ChatCompletionRequest.class);
 		}
 

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/embedding/MiniMaxEmbeddingModelObservationIT.java
Patch:
@@ -60,7 +60,7 @@ public class MiniMaxEmbeddingModelObservationIT {
 
 	@Test
 	void observationForEmbeddingOperation() {
-		var options = MiniMaxEmbeddingOptions.builder().withModel(MiniMaxApi.EmbeddingModel.Embo_01.getValue()).build();
+		var options = MiniMaxEmbeddingOptions.builder().model(MiniMaxApi.EmbeddingModel.Embo_01.getValue()).build();
 
 		EmbeddingRequest embeddingRequest = new EmbeddingRequest(List.of("Here comes the sun"), options);
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxChatProperties.java
Patch:
@@ -42,8 +42,8 @@ public class MiniMaxChatProperties extends MiniMaxParentProperties {
 
 	@NestedConfigurationProperty
 	private MiniMaxChatOptions options = MiniMaxChatOptions.builder()
-		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.model(DEFAULT_CHAT_MODEL)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public MiniMaxChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxEmbeddingProperties.java
Patch:
@@ -42,9 +42,7 @@ public class MiniMaxEmbeddingProperties extends MiniMaxParentProperties {
 	private MetadataMode metadataMode = MetadataMode.EMBED;
 
 	@NestedConfigurationProperty
-	private MiniMaxEmbeddingOptions options = MiniMaxEmbeddingOptions.builder()
-		.withModel(DEFAULT_EMBEDDING_MODEL)
-		.build();
+	private MiniMaxEmbeddingOptions options = MiniMaxEmbeddingOptions.builder().model(DEFAULT_EMBEDDING_MODEL).build();
 
 	public MiniMaxEmbeddingOptions getOptions() {
 		return this.options;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/FunctionCallbackInPromptIT.java
Patch:
@@ -63,7 +63,7 @@ void functionCallTest() {
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius.");
 
 			var promptOptions = MiniMaxChatOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
@@ -89,7 +89,7 @@ void streamingFunctionCallTest() {
 					"What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius.");
 
 			var promptOptions = MiniMaxChatOptions.builder()
-				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.functionCallbacks(List.of(FunctionCallback.builder()
 					.function("CurrentWeatherService", new MockWeatherService())
 					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama/BedrockLlamaChatModel.java
Patch:
@@ -51,7 +51,7 @@ public class BedrockLlamaChatModel implements ChatModel, StreamingChatModel {
 	private final BedrockLlamaChatOptions defaultOptions;
 
 	public BedrockLlamaChatModel(LlamaChatBedrockApi chatApi) {
-		this(chatApi, BedrockLlamaChatOptions.builder().withTemperature(0.8).withTopP(0.9).withMaxGenLen(100).build());
+		this(chatApi, BedrockLlamaChatOptions.builder().temperature(0.8).topP(0.9).maxGenLen(100).build());
 	}
 
 	public BedrockLlamaChatModel(LlamaChatBedrockApi chatApi, BedrockLlamaChatOptions options) {

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingModel.java
Patch:
@@ -100,8 +100,8 @@ private TitanEmbeddingRequest createTitanEmbeddingRequest(String inputContent, E
 			inputType = bedrockTitanEmbeddingOptions.getInputType();
 		}
 
-		return (inputType == InputType.IMAGE) ? new TitanEmbeddingRequest.Builder().withInputImage(inputContent).build()
-				: new TitanEmbeddingRequest.Builder().withInputText(inputContent).build();
+		return (inputType == InputType.IMAGE) ? new TitanEmbeddingRequest.Builder().inputImage(inputContent).build()
+				: new TitanEmbeddingRequest.Builder().inputText(inputContent).build();
 	}
 
 	@Override

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/BedrockLlamaChatModelIT.java
Patch:
@@ -218,7 +218,7 @@ public LlamaChatBedrockApi llamaApi() {
 		@Bean
 		public BedrockLlamaChatModel llamaChatModel(LlamaChatBedrockApi llamaApi) {
 			return new BedrockLlamaChatModel(llamaApi,
-					BedrockLlamaChatOptions.builder().withTemperature(0.5).withMaxGenLen(100).withTopP(0.9).build());
+					BedrockLlamaChatOptions.builder().temperature(0.5).maxGenLen(100).topP(0.9).build());
 		}
 
 	}

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/BedrockLlamaCreateRequestTests.java
Patch:
@@ -45,7 +45,7 @@ public class BedrockLlamaCreateRequestTests {
 	public void createRequestWithChatOptions() {
 
 		var client = new BedrockLlamaChatModel(this.api,
-				BedrockLlamaChatOptions.builder().withTemperature(66.6).withMaxGenLen(666).withTopP(0.66).build());
+				BedrockLlamaChatOptions.builder().temperature(66.6).maxGenLen(666).topP(0.66).build());
 
 		var request = client.createRequest(new Prompt("Test message content"));
 
@@ -55,7 +55,7 @@ public void createRequestWithChatOptions() {
 		assertThat(request.maxGenLen()).isEqualTo(666);
 
 		request = client.createRequest(new Prompt("Test message content",
-				BedrockLlamaChatOptions.builder().withTemperature(99.9).withMaxGenLen(999).withTopP(0.99).build()));
+				BedrockLlamaChatOptions.builder().temperature(99.9).maxGenLen(999).topP(0.99).build()));
 
 		assertThat(request.prompt()).isNotEmpty();
 		assertThat(request.temperature()).isEqualTo(99.9);

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/api/LlamaChatBedrockApiIT.java
Patch:
@@ -47,9 +47,9 @@ public class LlamaChatBedrockApiIT {
 	public void chatCompletion() {
 
 		LlamaChatRequest request = LlamaChatRequest.builder("Hello, my name is")
-			.withTemperature(0.9)
-			.withTopP(0.9)
-			.withMaxGenLen(20)
+			.temperature(0.9)
+			.topP(0.9)
+			.maxGenLen(20)
 			.build();
 
 		LlamaChatResponse response = this.llamaChatApi.chatCompletion(request);

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanEmbeddingBedrockApiIT.java
Patch:
@@ -47,7 +47,7 @@ public void embedTextV1() {
 				TitanEmbeddingModel.TITAN_EMBED_TEXT_V1.id(), EnvironmentVariableCredentialsProvider.create(),
 				Region.US_EAST_1.id(), new ObjectMapper(), Duration.ofMinutes(2));
 
-		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().withInputText("I like to eat apples.").build();
+		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().inputText("I like to eat apples.").build();
 
 		TitanEmbeddingResponse response = titanEmbedApi.embedding(request);
 
@@ -63,7 +63,7 @@ public void embedTextV2() {
 				TitanEmbeddingModel.TITAN_EMBED_TEXT_V2.id(), EnvironmentVariableCredentialsProvider.create(),
 				Region.US_EAST_1.id(), new ObjectMapper(), Duration.ofMinutes(2));
 
-		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().withInputText("I like to eat apples.").build();
+		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().inputText("I like to eat apples.").build();
 
 		TitanEmbeddingResponse response = titanEmbedApi.embedding(request);
 
@@ -85,7 +85,7 @@ public void embedImage() throws IOException {
 		String imageBase64 = Base64.getEncoder().encodeToString(image);
 		System.out.println(imageBase64.length());
 
-		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().withInputImage(imageBase64).build();
+		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().inputImage(imageBase64).build();
 
 		TitanEmbeddingResponse response = titanEmbedApi.embedding(request);
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingProperties.java
Patch:
@@ -47,8 +47,8 @@ public class BedrockCohereEmbeddingProperties {
 
 	@NestedConfigurationProperty
 	private BedrockCohereEmbeddingOptions options = BedrockCohereEmbeddingOptions.builder()
-		.withInputType(InputType.SEARCH_DOCUMENT)
-		.withTruncate(CohereEmbeddingRequest.Truncate.NONE)
+		.inputType(InputType.SEARCH_DOCUMENT)
+		.truncate(CohereEmbeddingRequest.Truncate.NONE)
 		.build();
 
 	public boolean isEnabled() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatProperties.java
Patch:
@@ -45,8 +45,8 @@ public class BedrockAi21Jurassic2ChatProperties {
 
 	@NestedConfigurationProperty
 	private BedrockAi21Jurassic2ChatOptions options = BedrockAi21Jurassic2ChatOptions.builder()
-		.withTemperature(0.7)
-		.withMaxTokens(500)
+		.temperature(0.7)
+		.maxTokens(500)
 		.build();
 
 	public boolean isEnabled() {

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionModel.java
Patch:
@@ -63,9 +63,9 @@ public class OpenAiAudioTranscriptionModel implements Model<AudioTranscriptionPr
 	public OpenAiAudioTranscriptionModel(OpenAiAudioApi audioApi) {
 		this(audioApi,
 				OpenAiAudioTranscriptionOptions.builder()
-					.withModel(OpenAiAudioApi.WhisperModel.WHISPER_1.getValue())
-					.withResponseFormat(OpenAiAudioApi.TranscriptResponseFormat.JSON)
-					.withTemperature(0.7f)
+					.model(OpenAiAudioApi.WhisperModel.WHISPER_1.getValue())
+					.responseFormat(OpenAiAudioApi.TranscriptResponseFormat.JSON)
+					.temperature(0.7f)
 					.build());
 	}
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiModerationModel.java
Patch:
@@ -173,7 +173,7 @@ private OpenAiModerationOptions toOpenAiModerationOptions(ModerationOptions runt
 		OpenAiModerationOptions.Builder openAiModerationOptionsBuilder = OpenAiModerationOptions.builder();
 		// Handle portable moderation options
 		if (runtimeModerationOptions != null && runtimeModerationOptions.getModel() != null) {
-			openAiModerationOptionsBuilder.withModel(runtimeModerationOptions.getModel());
+			openAiModerationOptionsBuilder.model(runtimeModerationOptions.getModel());
 		}
 		return openAiModerationOptionsBuilder.build();
 	}

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -896,7 +896,7 @@ public ChatCompletionRequest(List<ChatCompletionMessage> messages, Boolean strea
 		 * @param streamOptions The new stream options to use.
 		 * @return A new {@link ChatCompletionRequest} with the specified stream options.
 		 */
-		public ChatCompletionRequest withStreamOptions(StreamOptions streamOptions) {
+		public ChatCompletionRequest streamOptions(StreamOptions streamOptions) {
 			return new ChatCompletionRequest(this.messages, this.model, this.store, this.metadata, this.frequencyPenalty, this.logitBias, this.logprobs,
 			this.topLogprobs, this.maxTokens, this.maxCompletionTokens, this.n, this.outputModalities, this.audioParameters, this.presencePenalty,
 			this.responseFormat, this.seed, this.serviceTier, this.stop, this.stream, streamOptions, this.temperature, this.topP,

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java
Patch:
@@ -60,7 +60,7 @@ private String getApiKey() {
 	@Bean
 	public OpenAiChatModel openAiChatModel(OpenAiApi api) {
 		OpenAiChatModel openAiChatModel = new OpenAiChatModel(api,
-				OpenAiChatOptions.builder().withModel(ChatModel.GPT_4_O_MINI).build());
+				OpenAiChatOptions.builder().model(ChatModel.GPT_4_O_MINI).build());
 		return openAiChatModel;
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModeAdditionalHttpHeadersIT.java
Patch:
@@ -54,7 +54,7 @@ void additionalApiKeyHeader() {
 		// Use the additional headers to override the Api Key.
 		// Mind that you have to prefix the Api Key with the "Bearer " prefix.
 		OpenAiChatOptions options = OpenAiChatOptions.builder()
-			.withHttpHeaders(Map.of("Authorization", "Bearer " + System.getenv("OPENAI_API_KEY")))
+			.httpHeaders(Map.of("Authorization", "Bearer " + System.getenv("OPENAI_API_KEY")))
 			.build();
 
 		ChatResponse response = this.openAiChatModel.call(new Prompt("Tell me a joke", options));

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiCompatibleChatModelIT.java
Patch:
@@ -49,7 +49,7 @@ public class OpenAiCompatibleChatModelIT {
 			new UserMessage("Tell me about 3 most famous ones."));
 
 	static OpenAiChatOptions forModelName(String modelName) {
-		return OpenAiChatOptions.builder().withModel(modelName).build();
+		return OpenAiChatOptions.builder().model(modelName).build();
 	}
 
 	static Stream<ChatModel> openAiCompatibleApis() {

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java
Patch:
@@ -116,8 +116,8 @@ public void beforeEach() {
 				OpenAiEmbeddingOptions.builder().build(), this.retryTemplate);
 		this.audioTranscriptionModel = new OpenAiAudioTranscriptionModel(this.openAiAudioApi,
 				OpenAiAudioTranscriptionOptions.builder()
-					.withModel("model")
-					.withResponseFormat(TranscriptResponseFormat.JSON)
+					.model("model")
+					.responseFormat(TranscriptResponseFormat.JSON)
 					.build(),
 				this.retryTemplate);
 		this.imageModel = new OpenAiImageModel(this.openAiImageApi, OpenAiImageOptions.builder().build(),

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientProxyFunctionCallsIT.java
Patch:
@@ -124,7 +124,7 @@ void toolProxyFunctionCall() throws JsonMappingException, JsonProcessingExceptio
 			chatResponse = chatClient.prompt()
 				.messages(messages)
 				.functions(this.functionDefinition)
-				.options(OpenAiChatOptions.builder().withProxyToolCalls(true).build())
+				.options(OpenAiChatOptions.builder().proxyToolCalls(true).build())
 				.call()
 				.chatResponse();
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/OpenAiEmbeddingModelObservationIT.java
Patch:
@@ -61,9 +61,9 @@ public class OpenAiEmbeddingModelObservationIT {
 	@Test
 	void observationForEmbeddingOperation() {
 		var options = OpenAiEmbeddingOptions.builder()
-			.withModel(OpenAiApi.EmbeddingModel.TEXT_EMBEDDING_3_SMALL.getValue())
-			.withDimensions(1536)
-			.withEncodingFormat("float")
+			.model(OpenAiApi.EmbeddingModel.TEXT_EMBEDDING_3_SMALL.getValue())
+			.dimensions(1536)
+			.encodingFormat("float")
 			.build();
 
 		EmbeddingRequest embeddingRequest = new EmbeddingRequest(List.of("Here comes the sun"), options);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAudioTranscriptionProperties.java
Patch:
@@ -39,9 +39,9 @@ public class OpenAiAudioTranscriptionProperties extends OpenAiParentProperties {
 
 	@NestedConfigurationProperty
 	private OpenAiAudioTranscriptionOptions options = OpenAiAudioTranscriptionOptions.builder()
-		.withModel(DEFAULT_TRANSCRIPTION_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
-		.withResponseFormat(DEFAULT_RESPONSE_FORMAT)
+		.model(DEFAULT_TRANSCRIPTION_MODEL)
+		.temperature(DEFAULT_TEMPERATURE.floatValue())
+		.responseFormat(DEFAULT_RESPONSE_FORMAT)
 		.build();
 
 	public OpenAiAudioTranscriptionOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiChatProperties.java
Patch:
@@ -40,8 +40,8 @@ public class OpenAiChatProperties extends OpenAiParentProperties {
 
 	@NestedConfigurationProperty
 	private OpenAiChatOptions options = OpenAiChatOptions.builder()
-		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE)
+		.model(DEFAULT_CHAT_MODEL)
+		.temperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public OpenAiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiEmbeddingProperties.java
Patch:
@@ -40,9 +40,7 @@ public class OpenAiEmbeddingProperties extends OpenAiParentProperties {
 	private String embeddingsPath = DEFAULT_EMBEDDINGS_PATH;
 
 	@NestedConfigurationProperty
-	private OpenAiEmbeddingOptions options = OpenAiEmbeddingOptions.builder()
-		.withModel(DEFAULT_EMBEDDING_MODEL)
-		.build();
+	private OpenAiEmbeddingOptions options = OpenAiEmbeddingOptions.builder().model(DEFAULT_EMBEDDING_MODEL).build();
 
 	public OpenAiEmbeddingOptions getOptions() {
 		return this.options;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiImageProperties.java
Patch:
@@ -43,7 +43,7 @@ public class OpenAiImageProperties extends OpenAiParentProperties {
 	 * Options for OpenAI Image API.
 	 */
 	@NestedConfigurationProperty
-	private OpenAiImageOptions options = OpenAiImageOptions.builder().withModel(DEFAULT_IMAGE_MODEL).build();
+	private OpenAiImageOptions options = OpenAiImageOptions.builder().model(DEFAULT_IMAGE_MODEL).build();
 
 	public OpenAiImageOptions getOptions() {
 		return this.options;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanOpenAiIT.java
Patch:
@@ -75,8 +75,8 @@ void functionCallTest() {
 				ChatResponse response = chatModel
 					.call(new Prompt(List.of(new UserMessage("What's the status of my transaction with id T1001?")),
 							OpenAiChatOptions.builder()
-								.withFunction("retrievePaymentStatus")
-								.withFunction("retrievePaymentDate")
+								.function("retrievePaymentStatus")
+								.function("retrievePaymentDate")
 								.build()));
 
 				logger.info("Response: {}", response);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -62,7 +62,7 @@ void functionCallTest() {
 						"What's the weather like in San Francisco, Tokyo, and Paris?");
 
 				var promptOptions = OpenAiChatOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MockWeatherService())
 						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
@@ -91,7 +91,7 @@ void streamingFunctionCallTest() {
 						"What's the weather like in San Francisco, Tokyo, and Paris?");
 
 				var promptOptions = OpenAiChatOptions.builder()
-					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.functionCallbacks(List.of(FunctionCallback.builder()
 						.function("CurrentWeatherService", new MockWeatherService())
 						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -57,7 +57,7 @@ void functionCallTest() {
 
 		this.contextRunner
 			.withPropertyValues(
-					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())
+					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_5_HAIKU.getValue())
 			.run(context -> {
 
 				AnthropicChatModel chatModel = context.getBean(AnthropicChatModel.class);
@@ -87,7 +87,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 
 		this.contextRunner
 			.withPropertyValues(
-					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())
+					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_5_HAIKU.getValue())
 			.run(context -> {
 
 				AnthropicChatModel chatModel = context.getBean(AnthropicChatModel.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -49,7 +49,7 @@ public class FunctionCallWithPromptFunctionIT {
 	void functionCallTest() {
 		this.contextRunner
 			.withPropertyValues(
-					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())
+					"spring.ai.anthropic.chat.options.model=" + AnthropicApi.ChatModel.CLAUDE_3_5_HAIKU.getValue())
 			.run(context -> {
 
 				AnthropicChatModel chatModel = context.getBean(AnthropicChatModel.class);

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiStreamFunctionCallingHelper.java
Patch:
@@ -63,7 +63,9 @@ public ChatCompletionChunk merge(ChatCompletionChunk previous, ChatCompletionChu
 
 		ChunkChoice choice = merge(previousChoice0, currentChoice0);
 
-		return new ChatCompletionChunk(id, object, created, model, List.of(choice));
+		MistralAiApi.Usage usage = (current.usage() != null ? current.usage() : previous.usage());
+
+		return new ChatCompletionChunk(id, object, created, model, List.of(choice), usage);
 	}
 
 	private ChunkChoice merge(ChunkChoice previous, ChunkChoice current) {

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiRetryTests.java
Patch:
@@ -124,7 +124,7 @@ public void mistralAiChatStreamTransientError() {
 		var choice = new ChatCompletionChunk.ChunkChoice(0, new ChatCompletionMessage("Response", Role.ASSISTANT),
 				ChatCompletionFinishReason.STOP, null);
 		ChatCompletionChunk expectedChatCompletion = new ChatCompletionChunk("id", "chat.completion.chunk", 789L,
-				"model", List.of(choice));
+				"model", List.of(choice), null);
 
 		given(this.mistralAiApi.chatCompletionStream(isA(ChatCompletionRequest.class)))
 			.willThrow(new TransientAiException("Transient Error 1"))

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiPropertiesTests.java
Patch:
@@ -420,7 +420,7 @@ public void chatOptionsTest() {
 				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56);
 
 				JSONAssert.assertEquals("{\"type\":\"function\",\"function\":{\"name\":\"toolChoiceFunctionName\"}}",
-						chatProperties.getOptions().getToolChoice(), JSONCompareMode.LENIENT);
+						"" + chatProperties.getOptions().getToolChoice(), JSONCompareMode.LENIENT);
 
 				assertThat(chatProperties.getOptions().getUser()).isEqualTo("userXYZ");
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfigurationIT.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
-import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;
+import org.springframework.ai.vectorstore.weaviate.WeaviateVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/weaviate/WeaviateContainerConnectionDetailsFactoryIT.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
-import org.springframework.ai.vectorstore.WeaviateVectorStore;
+import org.springframework.ai.vectorstore.weaviate.WeaviateVectorStore;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.testcontainers.service.connection.ServiceConnection;

File: vector-stores/spring-ai-weaviate-store/src/main/java/org/springframework/ai/vectorstore/weaviate/WeaviateFilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.weaviate;
 
 import java.util.Date;
 import java.util.List;

File: vector-stores/spring-ai-weaviate-store/src/test/java/org/springframework/ai/vectorstore/weaviate/WeaviateFilterExpressionConverterTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.weaviate;
 
 import java.util.List;
 

File: vector-stores/spring-ai-weaviate-store/src/test/java/org/springframework/ai/vectorstore/weaviate/WeaviateImage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.weaviate;
 
 import org.testcontainers.utility.DockerImageName;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryAutoConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 
 import com.datastax.oss.driver.api.core.CqlSession;
 
-import org.springframework.ai.chat.memory.CassandraChatMemory;
-import org.springframework.ai.chat.memory.CassandraChatMemoryConfig;
+import org.springframework.ai.chat.memory.cassandra.CassandraChatMemory;
+import org.springframework.ai.chat.memory.cassandra.CassandraChatMemoryConfig;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryProperties.java
Patch:
@@ -22,7 +22,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.chat.memory.CommonChatMemoryProperties;
-import org.springframework.ai.chat.memory.CassandraChatMemoryConfig;
+import org.springframework.ai.chat.memory.cassandra.CassandraChatMemoryConfig;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.lang.Nullable;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryAutoConfigurationIT.java
Patch:
@@ -26,7 +26,7 @@
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.utility.DockerImageName;
 
-import org.springframework.ai.chat.memory.CassandraChatMemory;
+import org.springframework.ai.chat.memory.cassandra.CassandraChatMemory;
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.messages.MessageType;
 import org.springframework.ai.chat.messages.UserMessage;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryPropertiesTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.chat.memory.CassandraChatMemoryConfig;
+import org.springframework.ai.chat.memory.cassandra.CassandraChatMemoryConfig;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/chat/memory/cassandra/CassandraChatMemoryConfig.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.chat.memory;
+package org.springframework.ai.chat.memory.cassandra;
 
 import java.net.InetSocketAddress;
 import java.time.Duration;

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/cassandra/CassandraFilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.cassandra;
 
 import java.util.Collection;
 import java.util.Map;

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/cassandra/CassandraImage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai;
+package org.springframework.ai.cassandra;
 
 import org.testcontainers.utility.DockerImageName;
 

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/chat/memory/cassandra/CassandraChatMemoryIT.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.chat.memory;
+package org.springframework.ai.chat.memory.cassandra;
 
 import java.time.Duration;
 
@@ -26,7 +26,7 @@
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
-import org.springframework.ai.CassandraImage;
+import org.springframework.ai.cassandra.CassandraImage;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/cassandra/CassandraFilterExpressionConverterTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.cassandra;
 
 import java.util.Collection;
 import java.util.HashSet;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/AwsOpenSearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
-import org.springframework.ai.vectorstore.OpenSearchVectorStore;
+import org.springframework.ai.vectorstore.opensearch.OpenSearchVectorStore;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
-import org.springframework.ai.vectorstore.OpenSearchVectorStore;
+import org.springframework.ai.vectorstore.opensearch.OpenSearchVectorStore;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/opensearch/OpenSearchAiSearchFilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.opensearch;
 
 import java.text.ParseException;
 import java.text.SimpleDateFormat;

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/opensearch/OpenSearchAiSearchFilterExpressionConverterTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.opensearch;
 
 import java.util.Date;
 import java.util.List;

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/opensearch/OpenSearchImage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.opensearch;
 
 import org.testcontainers.utility.DockerImageName;
 

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/redis/RedisFilterExpressionConverter.java
Patch:
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.redis;
 
 import java.text.MessageFormat;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
-import org.springframework.ai.vectorstore.RedisVectorStore.MetadataField;
+import org.springframework.ai.vectorstore.redis.RedisVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;
 import org.springframework.ai.vectorstore.filter.Filter.Group;

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDBAtlasFilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.mongodb.atlas;
 
 import org.springframework.ai.vectorstore.filter.Filter;
 import org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/mongodb/atlas/VectorSearchAggregation.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.mongodb.atlas;
 
 import java.util.List;
 

File: vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDBAtlasFilterConverterTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.mongodb.atlas;
 
 import java.util.List;
 

File: vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/mongodb/atlas/MongoDbImage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.mongodb.atlas;
 
 import org.testcontainers.utility.DockerImageName;
 

File: vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/mongodb/atlas/VectorSearchAggregationTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.vectorstore.mongodb.atlas;
 
 import java.util.List;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreProperties.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.autoconfigure.vectorstore.milvus;
 
 import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
-import org.springframework.ai.vectorstore.MilvusVectorStore;
+import org.springframework.ai.milvus.vectorstore.MilvusVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.util.Assert;
 

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/milvus/vectorstore/MilvusFilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.milvus.vectorstore;
 
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/milvus/vectorstore/MilvusFilterExpressionConverterTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.milvus.vectorstore;
 
 import java.util.List;
 

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/milvus/vectorstore/MilvusImage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore;
+package org.springframework.ai.milvus.vectorstore;
 
 import org.testcontainers.utility.DockerImageName;
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/experiments/BedrockConverseChatModelMain.java
Patch:
@@ -20,7 +20,7 @@
 import software.amazon.awssdk.regions.Region;
 
 import org.springframework.ai.bedrock.converse.BedrockProxyChatModel;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 
 /**
@@ -40,7 +40,7 @@ public static void main(String[] args) {
 
 		// String modelId = "anthropic.claude-3-5-sonnet-20240620-v1:0";
 		String modelId = "ai21.jamba-1-5-large-v1:0";
-		var prompt = new Prompt("Tell me a joke?", ChatOptionsBuilder.builder().withModel(modelId).build());
+		var prompt = new Prompt("Tell me a joke?", ChatOptions.builder().model(modelId).build());
 
 		var chatModel = BedrockProxyChatModel.builder()
 			.withCredentialsProvider(EnvironmentVariableCredentialsProvider.create())

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelIT.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.ai.chat.metadata.Usage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.chat.prompt.SystemPromptTemplate;
@@ -91,7 +91,7 @@ void roleTest() {
 		UserMessage userMessage = new UserMessage("Tell me about 5 famous pirates from the Golden Age of Piracy.");
 
 		// portable/generic options
-		var portableOptions = ChatOptionsBuilder.builder().withTemperature(0.7).build();
+		var portableOptions = ChatOptions.builder().temperature(0.7).build();
 
 		Prompt prompt = new Prompt(List.of(systemMessage, userMessage), portableOptions);
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelIT.java
Patch:
@@ -44,7 +44,7 @@
 import org.springframework.ai.chat.metadata.Usage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.chat.prompt.SystemPromptTemplate;
@@ -549,7 +549,7 @@ void multiModalityInputAudio(String modelName) {
 				List.of(new Media(MimeTypeUtils.parseMimeType("audio/mp3"), audioResource)));
 
 		ChatResponse response = chatModel
-			.call(new Prompt(List.of(userMessage), ChatOptionsBuilder.builder().withModel(modelName).build()));
+			.call(new Prompt(List.of(userMessage), ChatOptions.builder().model(modelName).build()));
 
 		logger.info(response.getResult().getOutput().getText());
 		assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("hobbits");

File: models/spring-ai-watsonx-ai/src/test/java/org/springframework/ai/watsonx/WatsonxAiChatModelTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.watsonx.api.WatsonxAiApi;
 import org.springframework.ai.watsonx.api.WatsonxAiChatRequest;
@@ -54,7 +54,7 @@ public class WatsonxAiChatModelTest {
 
 	@Test
 	public void testCreateRequestWithNoModelId() {
-		var options = ChatOptionsBuilder.builder().withTemperature(0.9).withTopK(100).withTopP(0.6).build();
+		var options = ChatOptions.builder().temperature(0.9).topK(100).topP(0.6).build();
 
 		Prompt prompt = new Prompt("Test message", options);
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/ChatModel.java
Patch:
@@ -43,7 +43,9 @@ default String call(Message... messages) {
 	@Override
 	ChatResponse call(Prompt prompt);
 
-	ChatOptions getDefaultOptions();
+	default ChatOptions getDefaultOptions() {
+		return ChatOptions.builder().build();
+	}
 
 	default Flux<ChatResponse> stream(Prompt prompt) {
 		throw new UnsupportedOperationException("streaming is not supported");

File: spring-ai-core/src/main/java/org/springframework/ai/rag/preretrieval/query/transformation/TranslationQueryTransformer.java
Patch:
@@ -20,7 +20,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.chat.client.ChatClient;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.rag.Query;
 import org.springframework.ai.util.PromptAssert;
@@ -91,7 +91,7 @@ public Query transform(Query query) {
 			.user(user -> user.text(this.promptTemplate.getTemplate())
 				.param("targetLanguage", this.targetLanguage)
 				.param("query", query.text()))
-			.options(ChatOptionsBuilder.builder().withTemperature(0.0).build())
+			.options(ChatOptions.builder().temperature(0.0).build())
 			.call()
 			.content();
 
@@ -111,6 +111,7 @@ public static final class Builder {
 
 		private ChatClient.Builder chatClientBuilder;
 
+		@Nullable
 		private PromptTemplate promptTemplate;
 
 		private String targetLanguage;

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/DefaultChatClientTests.java
Patch:
@@ -43,7 +43,6 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.ChatOptions;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.converter.ListOutputConverter;
 import org.springframework.ai.converter.StructuredOutputConverter;
@@ -115,7 +114,7 @@ void whenPromptWithMessagesThenReturn() {
 	@Test
 	void whenPromptWithOptionsThenReturn() {
 		ChatClient chatClient = new DefaultChatClientBuilder(mock(ChatModel.class)).build();
-		ChatOptions chatOptions = ChatOptionsBuilder.builder().build();
+		ChatOptions chatOptions = ChatOptions.builder().build();
 		Prompt prompt = new Prompt(List.of(), chatOptions);
 		DefaultChatClient.DefaultChatClientRequestSpec spec = (DefaultChatClient.DefaultChatClientRequestSpec) chatClient
 			.prompt(prompt);
@@ -1345,7 +1344,7 @@ void whenOptionsIsNullThenThrow() {
 	void whenOptionsThenReturn() {
 		ChatClient chatClient = new DefaultChatClientBuilder(mock(ChatModel.class)).build();
 		ChatClient.ChatClientRequestSpec spec = chatClient.prompt();
-		ChatOptions options = ChatOptionsBuilder.builder().build();
+		ChatOptions options = ChatOptions.builder().build();
 		spec = spec.options(options);
 		DefaultChatClient.DefaultChatClientRequestSpec defaultSpec = (DefaultChatClient.DefaultChatClientRequestSpec) spec;
 		assertThat(defaultSpec.getChatOptions()).isEqualTo(options);

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelCompletionObservationHandlerTests.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.observation.conventions.AiObservationAttributes;
 import org.springframework.ai.observation.conventions.AiObservationEventNames;
@@ -49,7 +49,7 @@ void whenCompletionWithTextThenSpanEvent() {
 		var observationContext = ChatModelObservationContext.builder()
 			.prompt(new Prompt("supercalifragilisticexpialidocious"))
 			.provider("mary-poppins")
-			.requestOptions(ChatOptionsBuilder.builder().withModel("spoonful-of-sugar").build())
+			.requestOptions(ChatOptions.builder().model("spoonful-of-sugar").build())
 			.build();
 		observationContext.setResponse(new ChatResponse(List.of(new Generation(new AssistantMessage("say please")),
 				new Generation(new AssistantMessage("seriously, say please")))));

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelMeterObservationHandlerTests.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.ai.chat.metadata.Usage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.observation.conventions.AiObservationMetricAttributes;
 import org.springframework.ai.observation.conventions.AiObservationMetricNames;
@@ -94,7 +94,7 @@ private ChatModelObservationContext generateObservationContext() {
 		return ChatModelObservationContext.builder()
 			.prompt(generatePrompt())
 			.provider("superprovider")
-			.requestOptions(ChatOptionsBuilder.builder().withModel("mistral").build())
+			.requestOptions(ChatOptions.builder().model("mistral").build())
 			.build();
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelObservationContextTests.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -36,7 +36,7 @@ void whenMandatoryRequestOptionsThenReturn() {
 		var observationContext = ChatModelObservationContext.builder()
 			.prompt(generatePrompt())
 			.provider("superprovider")
-			.requestOptions(ChatOptionsBuilder.builder().withModel("supermodel").build())
+			.requestOptions(ChatOptions.builder().model("supermodel").build())
 			.build();
 
 		assertThat(observationContext).isNotNull();

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelPromptContentObservationHandlerTests.java
Patch:
@@ -24,7 +24,7 @@
 import io.opentelemetry.sdk.trace.SdkTracerProvider;
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.observation.conventions.AiObservationAttributes;
 import org.springframework.ai.observation.conventions.AiObservationEventNames;
@@ -44,7 +44,7 @@ void whenPromptWithTextThenSpanEvent() {
 		var observationContext = ChatModelObservationContext.builder()
 			.prompt(new Prompt("supercalifragilisticexpialidocious"))
 			.provider("mary-poppins")
-			.requestOptions(ChatOptionsBuilder.builder().withModel("spoonful-of-sugar").build())
+			.requestOptions(ChatOptions.builder().model("spoonful-of-sugar").build())
 			.build();
 		var sdkTracer = SdkTracerProvider.builder().build().get("test");
 		var otelTracer = new OtelTracer(sdkTracer, new OtelCurrentTraceContext(), null);

File: spring-ai-core/src/test/java/org/springframework/ai/prompt/PromptTests.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.chat.prompt.ChatOptions;
-import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.chat.prompt.SystemPromptTemplate;
@@ -139,7 +138,7 @@ public void testPromptCopy() {
 		model.put("name", "Alice");
 		model.put("age", 30);
 		PromptTemplate promptTemplate = new PromptTemplate(template, model);
-		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.5).withMaxTokens(100).build();
+		ChatOptions chatOptions = ChatOptions.builder().temperature(0.5).maxTokens(100).build();
 
 		Prompt prompt = promptTemplate.create(model, chatOptions);
 

File: spring-ai-core/src/main/java/org/springframework/ai/evaluation/Evaluator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
+import org.springframework.ai.document.Document;
 import org.springframework.ai.model.Content;
 import org.springframework.util.StringUtils;
 
@@ -28,9 +29,9 @@ public interface Evaluator {
 	EvaluationResponse evaluate(EvaluationRequest evaluationRequest);
 
 	default String doGetSupportingData(EvaluationRequest evaluationRequest) {
-		List<Content> data = evaluationRequest.getDataList();
+		List<Document> data = evaluationRequest.getDataList();
 		return data.stream()
-			.map(Content::getText)
+			.map(Document::getText)
 			.filter(StringUtils::hasText)
 			.collect(Collectors.joining(System.lineSeparator()));
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java
Patch:
@@ -185,7 +185,6 @@ void mapOutputConverter() {
 		assertThat(result.get("numbers")).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9));
 	}
 
-	@Disabled()
 	@Test
 	@Disabled("Perplexity gets confused with the 'Generate the filmography for a random actor.' prompt")
 	void beanOutputConverter() {

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java
Patch:
@@ -74,7 +74,7 @@
  */
 @SpringBootTest(classes = PerplexityWithOpenAiChatModelIT.Config.class)
 @EnabledIfEnvironmentVariable(named = "PERPLEXITY_API_KEY", matches = ".+")
-// @Disabled("Requires Perplexity credits")
+@Disabled("Requires Perplexity credits")
 class PerplexityWithOpenAiChatModelIT {
 
 	private static final Logger logger = LoggerFactory.getLogger(PerplexityWithOpenAiChatModelIT.class);
@@ -187,6 +187,7 @@ void mapOutputConverter() {
 
 	@Disabled()
 	@Test
+	@Disabled("Perplexity gets confused with the 'Generate the filmography for a random actor.' prompt")
 	void beanOutputConverter() {
 		BeanOutputConverter<ActorsFilms> outputConverter = new BeanOutputConverter<>(ActorsFilms.class);
 

File: document-readers/markdown-reader/src/main/java/org/springframework/ai/reader/markdown/MarkdownDocumentReader.java
Patch:
@@ -226,7 +226,7 @@ private void buildAndFlush() {
 			if (!this.currentParagraphs.isEmpty()) {
 				String content = String.join("", this.currentParagraphs);
 
-				Document.Builder builder = this.currentDocumentBuilder.content(content);
+				Document.Builder builder = this.currentDocumentBuilder.text(content);
 
 				this.config.additionalMetadata.forEach(builder::metadata);
 

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelObservationIT.java
Patch:
@@ -79,7 +79,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -109,7 +109,7 @@ void observationForStreamingChatOperation() {
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
 			.filter(r -> r.getResult() != null)
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/client/AnthropicChatClientIT.java
Patch:
@@ -84,7 +84,7 @@ void call() {
 
 		logger.info("" + response);
 		assertThat(response.getResults()).hasSize(1);
-		assertThat(response.getResults().get(0).getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResults().get(0).getOutput().getText()).contains("Blackbeard");
 	}
 
 	@Test

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatModel.java
Patch:
@@ -402,7 +402,7 @@ private List<ChatRequestMessage> fromSpringAiMessage(Message message) {
 			case USER:
 				// https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/openai/azure-ai-openai/README.md#text-completions-with-images
 				List<ChatMessageContentItem> items = new ArrayList<>();
-				items.add(new ChatMessageTextContentItem(message.getContent()));
+				items.add(new ChatMessageTextContentItem(message.getText()));
 				if (message instanceof UserMessage userMessage) {
 					if (!CollectionUtils.isEmpty(userMessage.getMedia())) {
 						items.addAll(userMessage.getMedia()
@@ -413,7 +413,7 @@ private List<ChatRequestMessage> fromSpringAiMessage(Message message) {
 				}
 				return List.of(new ChatRequestUserMessage(items));
 			case SYSTEM:
-				return List.of(new ChatRequestSystemMessage(message.getContent()));
+				return List.of(new ChatRequestSystemMessage(message.getText()));
 			case ASSISTANT:
 				AssistantMessage assistantMessage = (AssistantMessage) message;
 				List<ChatCompletionsToolCall> toolCalls = null;
@@ -425,7 +425,7 @@ private List<ChatRequestMessage> fromSpringAiMessage(Message message) {
 						.map(tc -> ((ChatCompletionsToolCall) tc)) // !!!
 						.toList();
 				}
-				var azureAssistantMessage = new ChatRequestAssistantMessage(message.getContent());
+				var azureAssistantMessage = new ChatRequestAssistantMessage(message.getText());
 				azureAssistantMessage.setToolCalls(toolCalls);
 				return List.of(azureAssistantMessage);
 			case TOOL:

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatClientIT.java
Patch:
@@ -68,7 +68,7 @@ void call() {
 		// @formatter:on
 
 		assertThat(response.getResults()).hasSize(1);
-		assertThat(response.getResults().get(0).getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResults().get(0).getOutput().getText()).contains("Blackbeard");
 	}
 
 	@Test
@@ -94,7 +94,7 @@ void beanStreamOutputConverterRecords() {
 
 		String generationTextFromStream = chatResponses
 				.stream()
-				.map(cr -> cr.getResult().getOutput().getContent())
+				.map(cr -> cr.getResult().getOutput().getText())
 				.collect(Collectors.joining());
 		// @formatter:on
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelObservationIT.java
Patch:
@@ -76,7 +76,7 @@ void observationForImperativeChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -106,7 +106,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatModelMetadataTests.java
Patch:
@@ -84,7 +84,7 @@ void azureOpenAiMetadataCapturedDuringGeneration() {
 
 		assertThat(generation).isNotNull()
 			.extracting(Generation::getOutput)
-			.extracting(AssistantMessage::getContent)
+			.extracting(AssistantMessage::getText)
 			.isEqualTo("No! You will actually land with a resounding thud. This is the way!");
 
 		// assertPromptMetadata(response);

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseUsageAggregationTests.java
Patch:
@@ -83,7 +83,7 @@ public void call() {
 		var result = this.chatModel.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response Content Block");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response Content Block");
 
 		assertThat(result.getMetadata().getUsage().getPromptTokens()).isEqualTo(16);
 		assertThat(result.getMetadata().getUsage().getGenerationTokens()).isEqualTo(14);
@@ -148,7 +148,7 @@ public void callWithToolUse() {
 				PortableFunctionCallingOptions.builder().withFunctionCallbacks(functionCallback).build()));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent())
+		assertThat(result.getResult().getOutput().getText())
 			.isSameAs(converseResponseFinal.output().message().content().get(0).text());
 
 		assertThat(result.getMetadata().getUsage().getPromptTokens()).isEqualTo(445 + 540);

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModelObservationIT.java
Patch:
@@ -80,7 +80,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -109,7 +109,7 @@ void observationForStreamingChatOperation() {
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
 			.filter(r -> r.getResult() != null)
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3ChatModel.java
Patch:
@@ -164,7 +164,7 @@ private String toAnthropicSystemContext(Prompt prompt) {
 		return prompt.getInstructions()
 			.stream()
 			.filter(m -> m.getMessageType() == MessageType.SYSTEM)
-			.map(Message::getContent)
+			.map(Message::getText)
 			.collect(Collectors.joining(System.lineSeparator()));
 	}
 
@@ -179,7 +179,7 @@ private List<ChatCompletionMessage> toAnthropicMessages(Prompt prompt) {
 			.stream()
 			.filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT)
 			.map(message -> {
-				List<MediaContent> contents = new ArrayList<>(List.of(new MediaContent(message.getContent())));
+				List<MediaContent> contents = new ArrayList<>(List.of(new MediaContent(message.getText())));
 				if (message instanceof UserMessage userMessage) {
 					if (!CollectionUtils.isEmpty(userMessage.getMedia())) {
 						List<MediaContent> mediaContent = userMessage.getMedia()

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/client/ClientIT.java
Patch:
@@ -51,14 +51,14 @@ void helloWorldCompletion() {
 				""";
 		Prompt prompt = new Prompt(mistral7bInstruct);
 		ChatResponse chatResponse = this.huggingfaceChatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 		String expectedResponse = """
 				{
 				  "name": "John",
 				  "lastname": "Smith",
 				  "address": "#1 Samuel St."
 				}""";
-		assertThat(chatResponse.getResult().getOutput().getContent()).isEqualTo(expectedResponse);
+		assertThat(chatResponse.getResult().getOutput().getText()).isEqualTo(expectedResponse);
 		assertThat(chatResponse.getResult().getOutput().getMetadata()).containsKey("generated_tokens");
 		assertThat(chatResponse.getResult().getOutput().getMetadata()).containsEntry("generated_tokens", 32);
 

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/MiniMaxChatModel.java
Patch:
@@ -439,7 +439,7 @@ ChatCompletionRequest createRequest(Prompt prompt, boolean stream) {
 
 		List<ChatCompletionMessage> chatCompletionMessages = prompt.getInstructions().stream().map(message -> {
 			if (message.getMessageType() == MessageType.USER || message.getMessageType() == MessageType.SYSTEM) {
-				Object content = message.getContent();
+				Object content = message.getText();
 				return List.of(new ChatCompletionMessage(content,
 						ChatCompletionMessage.Role.valueOf(message.getMessageType().name())));
 			}
@@ -452,7 +452,7 @@ else if (message.getMessageType() == MessageType.ASSISTANT) {
 						return new ToolCall(toolCall.id(), toolCall.type(), function);
 					}).toList();
 				}
-				return List.of(new ChatCompletionMessage(assistantMessage.getContent(),
+				return List.of(new ChatCompletionMessage(assistantMessage.getText(),
 						ChatCompletionMessage.Role.ASSISTANT, null, null, toolCalls));
 			}
 			else if (message.getMessageType() == MessageType.TOOL) {

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/api/MiniMaxRetryTests.java
Patch:
@@ -98,7 +98,7 @@ public void miniMaxChatTransientError() {
 		var result = this.chatModel.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}
@@ -126,7 +126,7 @@ public void miniMaxChatStreamTransientError() {
 		var result = this.chatModel.stream(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.collectList().block().get(0).getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/chat/MiniMaxChatModelObservationIT.java
Patch:
@@ -82,7 +82,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -111,7 +111,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatModel.java
Patch:
@@ -326,11 +326,11 @@ MistralAiApi.ChatCompletionRequest createRequest(Prompt prompt, boolean stream)
 
 		List<ChatCompletionMessage> chatCompletionMessages = prompt.getInstructions().stream().map(message -> {
 			if (message instanceof UserMessage userMessage) {
-				return List.of(new MistralAiApi.ChatCompletionMessage(userMessage.getContent(),
+				return List.of(new MistralAiApi.ChatCompletionMessage(userMessage.getText(),
 						MistralAiApi.ChatCompletionMessage.Role.USER));
 			}
 			else if (message instanceof SystemMessage systemMessage) {
-				return List.of(new MistralAiApi.ChatCompletionMessage(systemMessage.getContent(),
+				return List.of(new MistralAiApi.ChatCompletionMessage(systemMessage.getText(),
 						MistralAiApi.ChatCompletionMessage.Role.SYSTEM));
 			}
 			else if (message instanceof AssistantMessage assistantMessage) {
@@ -342,7 +342,7 @@ else if (message instanceof AssistantMessage assistantMessage) {
 					}).toList();
 				}
 
-				return List.of(new MistralAiApi.ChatCompletionMessage(assistantMessage.getContent(),
+				return List.of(new MistralAiApi.ChatCompletionMessage(assistantMessage.getText(),
 						MistralAiApi.ChatCompletionMessage.Role.ASSISTANT, null, toolCalls, null));
 			}
 			else if (message instanceof ToolResponseMessage toolResponseMessage) {

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java
Patch:
@@ -70,7 +70,7 @@ void call() {
 
 		logger.info("" + response);
 		assertThat(response.getResults()).hasSize(1);
-		assertThat(response.getResults().get(0).getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResults().get(0).getOutput().getText()).contains("Blackbeard");
 	}
 
 	@Test
@@ -85,7 +85,7 @@ void testMessageHistory() {
 				.call()
 				.chatResponse();
 		// @formatter:on
-		assertThat(response.getResult().getOutput().getContent()).containsAnyOf("Blackbeard");
+		assertThat(response.getResult().getOutput().getText()).containsAnyOf("Blackbeard");
 
 		// @formatter:off
 		response = ChatClient.create(this.chatModel).prompt()
@@ -96,7 +96,7 @@ void testMessageHistory() {
 		// @formatter:on
 
 		logger.info("" + response);
-		assertThat(response.getResult().getOutput().getContent().toLowerCase()).containsAnyOf("blackbeard",
+		assertThat(response.getResult().getOutput().getText().toLowerCase()).containsAnyOf("blackbeard",
 				"bartholomew roberts");
 	}
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelObservationIT.java
Patch:
@@ -79,7 +79,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -107,7 +107,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiRetryTests.java
Patch:
@@ -105,7 +105,7 @@ public void mistralAiChatTransientError() {
 		var result = this.chatModel.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}
@@ -134,7 +134,7 @@ public void mistralAiChatStreamTransientError() {
 		var result = this.chatModel.stream(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.collectList().block().get(0).getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/MoonshotChatModel.java
Patch:
@@ -349,7 +349,7 @@ public MoonshotApi.ChatCompletionRequest createRequest(Prompt prompt, boolean st
 
 		List<ChatCompletionMessage> chatCompletionMessages = prompt.getInstructions().stream().map(message -> {
 			if (message.getMessageType() == MessageType.USER || message.getMessageType() == MessageType.SYSTEM) {
-				Object content = message.getContent();
+				Object content = message.getText();
 				return List.of(new ChatCompletionMessage(content,
 						ChatCompletionMessage.Role.valueOf(message.getMessageType().name())));
 			}
@@ -362,7 +362,7 @@ else if (message.getMessageType() == MessageType.ASSISTANT) {
 						return new ToolCall(toolCall.id(), toolCall.type(), function);
 					}).toList();
 				}
-				return List.of(new ChatCompletionMessage(assistantMessage.getContent(),
+				return List.of(new ChatCompletionMessage(assistantMessage.getText(),
 						ChatCompletionMessage.Role.ASSISTANT, null, null, toolCalls));
 			}
 			else if (message.getMessageType() == MessageType.TOOL) {

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotRetryTests.java
Patch:
@@ -91,7 +91,7 @@ public void moonshotChatTransientError() {
 		var result = this.chatModel.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}
@@ -119,7 +119,7 @@ public void moonshotChatStreamTransientError() {
 		var result = this.chatModel.stream(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.collectList().block().get(0).getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/chat/MoonshotChatModelFunctionCallingIT.java
Patch:
@@ -74,7 +74,7 @@ void functionCallTest() {
 
 		logger.info("Response: {}", response);
 
-		assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+		assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 	}
 
 	@Test
@@ -100,7 +100,7 @@ void streamFunctionCallTest() {
 			.map(ChatResponse::getResults)
 			.flatMap(List::stream)
 			.map(Generation::getOutput)
-			.map(AssistantMessage::getContent)
+			.map(AssistantMessage::getText)
 			.filter(Objects::nonNull)
 			.collect(Collectors.joining());
 		logger.info("Response: {}", content);

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/chat/MoonshotChatModelObservationIT.java
Patch:
@@ -82,7 +82,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -112,7 +112,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-oci-genai/src/test/java/org/springframework/ai/oci/cohere/OCICohereChatModelIT.java
Patch:
@@ -54,7 +54,7 @@ void chatPrompt() {
 		assertThat(response).isNotNull();
 		assertThat(response.getMetadata().getModel()).isEqualTo(CHAT_MODEL_ID);
 		assertThat(response.getResult()).isNotNull();
-		assertThat(response.getResult().getOutput().getContent()).isNotBlank();
+		assertThat(response.getResult().getOutput().getText()).isNotBlank();
 	}
 
 }

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelFunctionCallingIT.java
Patch:
@@ -75,7 +75,7 @@ void functionCallTest() {
 
 		logger.info("Response: {}", response);
 
-		assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+		assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 	}
 
 	@Test
@@ -103,7 +103,7 @@ void streamFunctionCallTest() {
 			.map(ChatResponse::getResults)
 			.flatMap(List::stream)
 			.map(Generation::getOutput)
-			.map(AssistantMessage::getContent)
+			.map(AssistantMessage::getText)
 			.collect(Collectors.joining());
 		logger.info("Response: {}", content);
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelMultimodalIT.java
Patch:
@@ -67,8 +67,8 @@ void multiModalityTest() {
 
 		var response = this.chatModel.call(new Prompt(List.of(userMessage)));
 
-		logger.info(response.getResult().getOutput().getContent());
-		assertThat(response.getResult().getOutput().getContent()).containsAnyOf("bananas", "apple");
+		logger.info(response.getResult().getOutput().getText());
+		assertThat(response.getResult().getOutput().getText()).contains("bananas", "apple");
 	}
 
 	@SpringBootConfiguration

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelObservationIT.java
Patch:
@@ -80,7 +80,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -111,7 +111,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelFunctionCallingIT.java
Patch:
@@ -139,7 +139,7 @@ void functionCallTest(OpenAiChatOptions promptOptions) {
 
 		logger.info("Response: {}", response);
 
-		assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+		assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 	}
 
 	@Test
@@ -207,7 +207,7 @@ void streamFunctionCallTest(OpenAiChatOptions promptOptions) {
 			.map(ChatResponse::getResults)
 			.flatMap(List::stream)
 			.map(Generation::getOutput)
-			.map(AssistantMessage::getContent)
+			.map(AssistantMessage::getText)
 			.collect(Collectors.joining());
 		logger.info("Response: {}", content);
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelObservationIT.java
Patch:
@@ -82,7 +82,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -113,7 +113,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelResponseFormatIT.java
Patch:
@@ -89,7 +89,7 @@ void jsonObject() throws JsonMappingException, JsonProcessingException {
 
 		assertThat(response).isNotNull();
 
-		String content = response.getResult().getOutput().getContent();
+		String content = response.getResult().getOutput().getText();
 
 		logger.info("Response content: {}", content);
 
@@ -132,7 +132,7 @@ void jsonSchema() throws JsonMappingException, JsonProcessingException {
 
 		assertThat(response).isNotNull();
 
-		String content = response.getResult().getOutput().getContent();
+		String content = response.getResult().getOutput().getText();
 
 		logger.info("Response content: {}", content);
 
@@ -213,7 +213,7 @@ record Items(@JsonProperty(required = true, value = "explanation") String explan
 
 		assertThat(response).isNotNull();
 
-		String content = response.getResult().getOutput().getContent();
+		String content = response.getResult().getOutput().getText();
 
 		logger.info("Response content: {}", content);
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelTypeReferenceBeanOutputConverterIT.java
Patch:
@@ -62,7 +62,7 @@ void typeRefOutputConverterRecords() {
 		Prompt prompt = new Prompt(promptTemplate.createMessage());
 		Generation generation = this.chatModel.call(prompt).getResult();
 
-		List<ActorsFilmsRecord> actorsFilms = outputConverter.convert(generation.getOutput().getContent());
+		List<ActorsFilmsRecord> actorsFilms = outputConverter.convert(generation.getOutput().getText());
 		logger.info("" + actorsFilms);
 		assertThat(actorsFilms).hasSize(2);
 		assertThat(actorsFilms.get(0).actor()).isEqualTo("Tom Hanks");
@@ -94,7 +94,7 @@ void typeRefStreamOutputConverterRecords() {
 			.map(ChatResponse::getResults)
 			.flatMap(List::stream)
 			.map(Generation::getOutput)
-			.map(AssistantMessage::getContent)
+			.map(AssistantMessage::getText)
 			.collect(Collectors.joining());
 
 		List<ActorsFilmsRecord> actorsFilms = outputConverter.convert(generationTextFromStream);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiCompatibleChatModelIT.java
Patch:
@@ -78,7 +78,7 @@ void chatCompletion(ChatModel chatModel) {
 		ChatResponse response = chatModel.call(prompt);
 
 		assertThat(response.getResults()).hasSize(1);
-		assertThat(response.getResults().get(0).getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResults().get(0).getOutput().getText()).contains("Blackbeard");
 	}
 
 	@ParameterizedTest
@@ -94,7 +94,7 @@ void streamCompletion(StreamingChatModel streamingChatModel) {
 			.map(ChatResponse::getResults)
 			.flatMap(List::stream)
 			.map(Generation::getOutput)
-			.map(AssistantMessage::getContent)
+			.map(AssistantMessage::getText)
 			.collect(Collectors.joining());
 
 		assertThat(stitchedResponseContent).contains("Blackbeard");

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java
Patch:
@@ -140,7 +140,7 @@ public void openAiChatTransientError() {
 		var result = this.chatModel.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}
@@ -169,7 +169,7 @@ public void openAiChatStreamTransientError() {
 		var result = this.chatModel.stream(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.collectList().block().get(0).getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientIT.java
Patch:
@@ -113,7 +113,7 @@ void call() {
 
 		logger.info("" + response);
 		assertThat(response.getResults()).hasSize(1);
-		assertThat(response.getResults().get(0).getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResults().get(0).getOutput().getText()).contains("Blackbeard");
 	}
 
 	@Test
@@ -232,7 +232,7 @@ void beanStreamOutputConverterRecords() {
 		String generationTextFromStream = chatResponses
 				.stream()
 				.filter(cr -> cr.getResult() != null)
-				.map(cr -> cr.getResult().getOutput().getContent())
+				.map(cr -> cr.getResult().getOutput().getText())
 				.collect(Collectors.joining());
 		// @formatter:on
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientProxyFunctionCallsIT.java
Patch:
@@ -179,7 +179,7 @@ void toolProxyFunctionCall() throws JsonMappingException, JsonProcessingExceptio
 
 		logger.info("Response: {}", chatResponse);
 
-		assertThat(chatResponse.getResult().getOutput().getContent()).contains("30", "10", "15");
+		assertThat(chatResponse.getResult().getOutput().getText()).contains("30", "10", "15");
 	}
 
 }

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/testutils/AbstractIT.java
Patch:
@@ -84,7 +84,7 @@ public abstract class AbstractIT {
 
 	protected void evaluateQuestionAndAnswer(String question, ChatResponse response, boolean factBased) {
 		assertThat(response).isNotNull();
-		String answer = response.getResult().getOutput().getContent();
+		String answer = response.getResult().getOutput().getText();
 		logger.info("Question: " + question);
 		logger.info("Answer:" + answer);
 		PromptTemplate userPromptTemplate = new PromptTemplate(this.userEvaluatorResource,
@@ -98,12 +98,12 @@ protected void evaluateQuestionAndAnswer(String question, ChatResponse response,
 		}
 		Message userMessage = userPromptTemplate.createMessage();
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
-		String yesOrNo = this.chatModel.call(prompt).getResult().getOutput().getContent();
+		String yesOrNo = this.chatModel.call(prompt).getResult().getOutput().getText();
 		logger.info("Is Answer related to question: " + yesOrNo);
 		if (yesOrNo.equalsIgnoreCase("no")) {
 			SystemMessage notRelatedSystemMessage = new SystemMessage(this.qaEvaluatorNotRelatedResource);
 			prompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));
-			String reasonForFailure = this.chatModel.call(prompt).getResult().getOutput().getContent();
+			String reasonForFailure = this.chatModel.call(prompt).getResult().getOutput().getText();
 			fail(reasonForFailure);
 		}
 		else {

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanChatModel.java
Patch:
@@ -246,7 +246,7 @@ private ChatCompletion toChatCompletion(ChatCompletionChunk chunk) {
 	public ChatCompletionRequest createRequest(Prompt prompt, boolean stream) {
 		var chatCompletionMessages = prompt.getInstructions()
 			.stream()
-			.map(m -> new ChatCompletionMessage(m.getContent(),
+			.map(m -> new ChatCompletionMessage(m.getText(),
 					ChatCompletionMessage.Role.valueOf(m.getMessageType().name())))
 			.toList();
 		var systemMessageList = chatCompletionMessages.stream().filter(msg -> msg.role() == Role.SYSTEM).toList();

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/api/QianFanRetryTests.java
Patch:
@@ -104,7 +104,7 @@ public void qianFanChatTransientError() {
 		var result = this.chatClient.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}
@@ -130,7 +130,7 @@ public void qianFanChatStreamTransientError() {
 		var result = this.chatClient.stream(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(Objects.requireNonNull(result.collectList().block()).get(0).getResult().getOutput().getContent())
+		assertThat(Objects.requireNonNull(result.collectList().block()).get(0).getResult().getOutput().getText())
 			.isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/chat/QianFanChatModelIT.java
Patch:
@@ -68,7 +68,7 @@ void roleTest() {
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
 		ChatResponse response = this.chatModel.call(prompt);
 		assertThat(response.getResults()).hasSize(1);
-		assertThat(response.getResults().get(0).getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResults().get(0).getOutput().getText()).contains("Blackbeard");
 	}
 
 	@Test
@@ -87,7 +87,7 @@ void streamRoleTest() {
 			.map(ChatResponse::getResults)
 			.flatMap(List::stream)
 			.map(Generation::getOutput)
-			.map(AssistantMessage::getContent)
+			.map(AssistantMessage::getText)
 			.collect(Collectors.joining());
 
 		assertThat(stitchedResponseContent).contains("Blackbeard");

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/chat/QianFanChatModelObservationIT.java
Patch:
@@ -83,7 +83,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -112,7 +112,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-vertex-ai-embedding/src/test/java/org/springframework/ai/vertexai/embedding/multimodal/VertexAiMultimodalEmbeddingModelIT.java
Patch:
@@ -189,7 +189,7 @@ void videoEmbedding() {
 	void textImageAndVideoEmbedding() {
 
 		var document = Document.builder()
-			.content("Hello World")
+			.text("Hello World")
 			.media(new Media(MimeTypeUtils.IMAGE_PNG, new ClassPathResource("/test.image.png")))
 			.media(new Media(new MimeType("video", "mp4"), new ClassPathResource("/test.video.mp4")))
 			.build();

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiChatModelObservationIT.java
Patch:
@@ -76,7 +76,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -104,7 +104,7 @@ void observationForStreamingOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiRetryTests.java
Patch:
@@ -101,7 +101,7 @@ public void vertexAiGeminiChatTransientError() throws IOException {
 
 		// Assertions
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isEqualTo("Response");
+		assertThat(result.getResult().getOutput().getText()).isEqualTo("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/api/ZhiPuAiRetryTests.java
Patch:
@@ -112,7 +112,7 @@ public void zhiPuAiChatTransientError() {
 		var result = this.chatModel.call(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}
@@ -140,7 +140,7 @@ public void zhiPuAiChatStreamTransientError() {
 		var result = this.chatModel.stream(new Prompt("text"));
 
 		assertThat(result).isNotNull();
-		assertThat(result.collectList().block().get(0).getResult().getOutput().getContent()).isSameAs("Response");
+		assertThat(result.collectList().block().get(0).getResult().getOutput().getText()).isSameAs("Response");
 		assertThat(this.retryListener.onSuccessRetryCount).isEqualTo(2);
 		assertThat(this.retryListener.onErrorRetryCount).isEqualTo(2);
 	}

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/chat/ZhiPuAiChatModelObservationIT.java
Patch:
@@ -80,7 +80,7 @@ void observationForChatOperation() {
 		Prompt prompt = new Prompt("Why does a raven look like a desk?", options);
 
 		ChatResponse chatResponse = this.chatModel.call(prompt);
-		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
+		assertThat(chatResponse.getResult().getOutput().getText()).isNotEmpty();
 
 		ChatResponseMetadata responseMetadata = chatResponse.getMetadata();
 		assertThat(responseMetadata).isNotNull();
@@ -108,7 +108,7 @@ void observationForStreamingChatOperation() {
 
 		String aggregatedResponse = responses.subList(0, responses.size() - 1)
 			.stream()
-			.map(r -> r.getResult().getOutput().getContent())
+			.map(r -> r.getResult().getOutput().getText())
 			.collect(Collectors.joining());
 		assertThat(aggregatedResponse).isNotEmpty();
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/PromptChatMemoryAdvisor.java
Patch:
@@ -111,7 +111,7 @@ private AdvisedRequest before(AdvisedRequest request) {
 
 		String memory = (memoryMessages != null) ? memoryMessages.stream()
 			.filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT)
-			.map(m -> m.getMessageType() + ":" + ((Content) m).getContent())
+			.map(m -> m.getMessageType() + ":" + ((Content) m).getText())
 			.collect(Collectors.joining(System.lineSeparator())) : "";
 
 		Map<String, Object> advisedSystemParams = new HashMap<>(request.systemParams());

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/QuestionAnswerAdvisor.java
Patch:
@@ -227,7 +227,7 @@ private AdvisedRequest before(AdvisedRequest request) {
 		context.put(RETRIEVED_DOCUMENTS, documents);
 
 		String documentContext = documents.stream()
-			.map(Content::getContent)
+			.map(Document::getText)
 			.collect(Collectors.joining(System.lineSeparator()));
 
 		// 4. Advise the user parameters.

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/SystemMessage.java
Patch:
@@ -39,7 +39,7 @@ public SystemMessage(Resource resource) {
 	}
 
 	@Override
-	public String getContent() {
+	public String getText() {
 		return this.textContent;
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/UserMessage.java
Patch:
@@ -66,17 +66,17 @@ public UserMessage(MessageType messageType, String textContent, Collection<Media
 
 	@Override
 	public String toString() {
-		return "UserMessage{" + "content='" + getContent() + '\'' + ", properties=" + this.metadata + ", messageType="
+		return "UserMessage{" + "content='" + getText() + '\'' + ", properties=" + this.metadata + ", messageType="
 				+ this.messageType + '}';
 	}
 
 	@Override
-	public Collection<Media> getMedia() {
+	public List<Media> getMedia() {
 		return this.media;
 	}
 
 	@Override
-	public String getContent() {
+	public String getText() {
 		return this.textContent;
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/AbstractToolCallSupport.java
Patch:
@@ -147,7 +147,7 @@ protected List<Message> handleToolCalls(Prompt prompt, ChatResponse response) {
 			toolContextMap = new HashMap<>(functionCallOptions.getToolContext());
 
 			List<Message> toolCallHistory = new ArrayList<>(prompt.copy().getInstructions());
-			toolCallHistory.add(new AssistantMessage(assistantMessage.getContent(), assistantMessage.getMetadata(),
+			toolCallHistory.add(new AssistantMessage(assistantMessage.getText(), assistantMessage.getMetadata(),
 					assistantMessage.getToolCalls()));
 
 			toolContextMap.put(ToolContext.TOOL_CALL_HISTORY, toolCallHistory);

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/ChatModel.java
Patch:
@@ -31,13 +31,13 @@ public interface ChatModel extends Model<Prompt, ChatResponse>, StreamingChatMod
 	default String call(String message) {
 		Prompt prompt = new Prompt(new UserMessage(message));
 		Generation generation = call(prompt).getResult();
-		return (generation != null) ? generation.getOutput().getContent() : "";
+		return (generation != null) ? generation.getOutput().getText() : "";
 	}
 
 	default String call(Message... messages) {
 		Prompt prompt = new Prompt(Arrays.asList(messages));
 		Generation generation = call(prompt).getResult();
-		return (generation != null) ? generation.getOutput().getContent() : "";
+		return (generation != null) ? generation.getOutput().getText() : "";
 	}
 
 	@Override

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/MessageAggregator.java
Patch:
@@ -108,8 +108,8 @@ public Flux<ChatResponse> aggregate(Flux<ChatResponse> fluxChatResponse,
 						&& chatResponse.getResult().getMetadata() != ChatGenerationMetadata.NULL) {
 					generationMetadataRef.set(chatResponse.getResult().getMetadata());
 				}
-				if (chatResponse.getResult().getOutput().getContent() != null) {
-					messageTextContentRef.get().append(chatResponse.getResult().getOutput().getContent());
+				if (chatResponse.getResult().getOutput().getText() != null) {
+					messageTextContentRef.get().append(chatResponse.getResult().getOutput().getText());
 				}
 				if (chatResponse.getResult().getOutput().getMetadata() != null) {
 					messageMetadataMapRef.get().putAll(chatResponse.getResult().getOutput().getMetadata());

File: spring-ai-core/src/main/java/org/springframework/ai/evaluation/Evaluator.java
Patch:
@@ -30,7 +30,7 @@ public interface Evaluator {
 	default String doGetSupportingData(EvaluationRequest evaluationRequest) {
 		List<Content> data = evaluationRequest.getDataList();
 		return data.stream()
-			.map(Content::getContent)
+			.map(Content::getText)
 			.filter(StringUtils::hasText)
 			.collect(Collectors.joining(System.lineSeparator()));
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/model/MediaContent.java
Patch:
@@ -17,12 +17,13 @@
 package org.springframework.ai.model;
 
 import java.util.Collection;
+import java.util.List;
 
 public interface MediaContent extends Content {
 
 	/**
 	 * Get the media associated with the content.
 	 */
-	Collection<Media> getMedia();
+	List<Media> getMedia();
 
 }

File: spring-ai-core/src/main/java/org/springframework/ai/rag/generation/augmentation/ContextualQueryAugmenter.java
Patch:
@@ -104,7 +104,7 @@ public Query augment(Query query, List<Document> documents) {
 
 		// 1. Collect content from documents.
 		String documentContext = documents.stream()
-			.map(Content::getContent)
+			.map(Document::getText)
 			.collect(Collectors.joining(System.lineSeparator()));
 
 		// 2. Define prompt parameters.

File: spring-ai-core/src/main/java/org/springframework/ai/tokenizer/JTokkitTokenCountEstimator.java
Patch:
@@ -56,8 +56,8 @@ public int estimate(String text) {
 	public int estimate(MediaContent content) {
 		int tokenCount = 0;
 
-		if (content.getContent() != null) {
-			tokenCount += this.estimate(content.getContent());
+		if (content.getText() != null) {
+			tokenCount += this.estimate(content.getText());
 		}
 
 		if (!CollectionUtils.isEmpty(content.getMedia())) {

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/KeywordMetadataEnricher.java
Patch:
@@ -65,7 +65,7 @@ public List<Document> apply(List<Document> documents) {
 
 			var template = new PromptTemplate(String.format(KEYWORDS_TEMPLATE, this.keywordCount));
 			Prompt prompt = template.create(Map.of(CONTEXT_STR_PLACEHOLDER, document.getContent()));
-			String keywords = this.chatModel.call(prompt).getResult().getOutput().getContent();
+			String keywords = this.chatModel.call(prompt).getResult().getOutput().getText();
 			document.getMetadata().putAll(Map.of(EXCERPT_KEYWORDS_METADATA_KEY, keywords));
 		}
 		return documents;

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/SummaryMetadataEnricher.java
Patch:
@@ -97,7 +97,7 @@ public List<Document> apply(List<Document> documents) {
 
 			Prompt prompt = new PromptTemplate(this.summaryTemplate)
 				.create(Map.of(CONTEXT_STR_PLACEHOLDER, documentContext));
-			documentSummaries.add(this.chatModel.call(prompt).getResult().getOutput().getContent());
+			documentSummaries.add(this.chatModel.call(prompt).getResult().getOutput().getText());
 		}
 
 		for (int i = 0; i < documentSummaries.size(); i++) {

File: spring-ai-core/src/test/java/org/springframework/ai/chat/ChatModelTests.java
Patch:
@@ -53,7 +53,7 @@ void generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly() {
 		ChatModel mockClient = Mockito.mock(ChatModel.class);
 
 		AssistantMessage mockAssistantMessage = Mockito.mock(AssistantMessage.class);
-		given(mockAssistantMessage.getContent()).willReturn(responseMessage);
+		given(mockAssistantMessage.getText()).willReturn(responseMessage);
 
 		// Create a mock Generation
 		Generation generation = Mockito.mock(Generation.class);
@@ -84,7 +84,7 @@ void generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly() {
 		verify(mockClient, times(1)).call(isA(Prompt.class));
 		verify(response, times(1)).getResult();
 		verify(generation, times(1)).getOutput();
-		verify(mockAssistantMessage, times(1)).getContent();
+		verify(mockAssistantMessage, times(1)).getText();
 		verifyNoMoreInteractions(mockClient, generation, response);
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/ChatClientResponseEntityTests.java
Patch:
@@ -77,7 +77,7 @@ public void responseEntityTest() {
 
 		Message userMessage = this.promptCaptor.getValue().getInstructions().get(0);
 		assertThat(userMessage.getMessageType()).isEqualTo(MessageType.USER);
-		assertThat(userMessage.getContent()).contains("Tell me about John");
+		assertThat(userMessage.getText()).contains("Tell me about John");
 	}
 
 	@Test
@@ -107,7 +107,7 @@ public void parametrizedResponseEntityTest() {
 
 		Message userMessage = this.promptCaptor.getValue().getInstructions().get(0);
 		assertThat(userMessage.getMessageType()).isEqualTo(MessageType.USER);
-		assertThat(userMessage.getContent()).contains("Tell me about them");
+		assertThat(userMessage.getText()).contains("Tell me about them");
 	}
 
 	@Test
@@ -132,7 +132,7 @@ public void customSoCResponseEntityTest() {
 
 		Message userMessage = this.promptCaptor.getValue().getInstructions().get(0);
 		assertThat(userMessage.getMessageType()).isEqualTo(MessageType.USER);
-		assertThat(userMessage.getContent()).contains("Tell me about Max");
+		assertThat(userMessage.getText()).contains("Tell me about Max");
 	}
 
 	record MyBean(String name, int age) {

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/RetrievalAugmentationAdvisorTests.java
Patch:
@@ -70,8 +70,8 @@ void theOneWithTheDocumentRetriever() {
 			.build());
 
 		// Document Retriever
-		var documentContext = List.of(Document.builder().id("1").content("doc1").build(),
-				Document.builder().id("2").content("doc2").build());
+		var documentContext = List.of(Document.builder().id("1").text("doc1").build(),
+				Document.builder().id("2").text("doc2").build());
 		var documentRetriever = mock(DocumentRetriever.class);
 		var queryCaptor = ArgumentCaptor.forClass(Query.class);
 		given(documentRetriever.retrieve(queryCaptor.capture())).willReturn(documentContext);
@@ -94,7 +94,7 @@ void theOneWithTheDocumentRetriever() {
 			.chatResponse();
 
 		// Verify
-		assertThat(chatResponse.getResult().getOutput().getContent()).isEqualTo("Felix Felicis");
+		assertThat(chatResponse.getResult().getOutput().getText()).isEqualTo("Felix Felicis");
 		assertThat(chatResponse.getMetadata().<List<Document>>get(RetrievalAugmentationAdvisor.DOCUMENT_CONTEXT))
 			.containsAll(documentContext);
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/SimpleLoggerAdvisorTests.java
Patch:
@@ -101,7 +101,7 @@ private void validate(String content, CapturedOutput output) {
 		assertThat(content).isEqualTo("Your answer is ZXY");
 
 		UserMessage userMessage = (UserMessage) this.promptCaptor.getValue().getInstructions().get(0);
-		assertThat(userMessage.getContent()).isEqualToIgnoringWhitespace("Please answer my question XYZ");
+		assertThat(userMessage.getText()).isEqualToIgnoringWhitespace("Please answer my question XYZ");
 
 		assertThat(output.getOut()).contains("request: AdvisedRequest", "userText=Please answer my question XYZ");
 		assertThat(output.getOut()).contains("response:", "finishReason");

File: spring-ai-core/src/test/java/org/springframework/ai/chat/model/GenerationTests.java
Patch:
@@ -52,7 +52,7 @@ void testGetOutput() {
 		AssistantMessage assistantMessage = new AssistantMessage(expectedText);
 		Generation generation = new Generation(assistantMessage);
 
-		assertEquals(expectedText, generation.getOutput().getContent());
+		assertEquals(expectedText, generation.getOutput().getText());
 	}
 
 	@Test

File: spring-ai-core/src/test/java/org/springframework/ai/prompt/PromptTemplateTest.java
Patch:
@@ -115,7 +115,7 @@ public void testRenderWithList() {
 		// don't normalize EOLs.
 		// It should be fine on Unix systems. In addition, Git will replace CRLF by LF by
 		// default.
-		assertEqualsWithNormalizedEOLs(expected, message.getContent());
+		assertEqualsWithNormalizedEOLs(expected, message.getText());
 
 		PromptTemplate unfilledPromptTemplate = new PromptTemplate(templateString);
 		assertThatExceptionOfType(IllegalStateException.class).isThrownBy(unfilledPromptTemplate::render)

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfigurationIT.java
Patch:
@@ -66,7 +66,7 @@ void callWith8KResponseContext() {
 				AnthropicChatModel chatModel = context.getBean(AnthropicChatModel.class);
 				var optoins = AnthropicChatOptions.builder().withMaxTokens(8192).build();
 				var response = chatModel.call(new Prompt("Tell me a joke", optoins));
-				assertThat(response.getResult().getOutput().getContent()).isNotEmpty();
+				assertThat(response.getResult().getOutput().getText()).isNotEmpty();
 				logger.info("Response: " + response);
 			});
 	}
@@ -83,7 +83,7 @@ void stream() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -70,14 +70,14 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
 						AnthropicChatOptions.builder().withFunction("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 			});
 	}
@@ -100,7 +100,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -69,7 +69,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationIT.java
Patch:
@@ -98,7 +98,7 @@ void chatCompletion() {
 		this.contextRunner.run(context -> {
 			AzureOpenAiChatModel chatModel = context.getBean(AzureOpenAiChatModel.class);
 			ChatResponse response = chatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -144,7 +144,7 @@ void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiDirectOpenAiAutoConfigurationIT.java
Patch:
@@ -77,7 +77,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			AzureOpenAiChatModel chatModel = context.getBean(AzureOpenAiChatModel.class);
 			ChatResponse response = chatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -96,7 +96,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -71,14 +71,14 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
 						AzureOpenAiChatOptions.builder().withFunction("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 			});
 	}
@@ -100,7 +100,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 			});
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -68,7 +68,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).containsAnyOf("30", "10", "15");
 
 			});
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -72,7 +72,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatAutoConfigurationIT.java
Patch:
@@ -71,7 +71,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			BedrockAnthropicChatModel anthropicChatModel = context.getBean(BedrockAnthropicChatModel.class);
 			ChatResponse response = anthropicChatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -91,7 +91,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfigurationIT.java
Patch:
@@ -70,7 +70,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			BedrockAnthropic3ChatModel anthropicChatModel = context.getBean(BedrockAnthropic3ChatModel.class);
 			ChatResponse response = anthropicChatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -90,7 +90,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfigurationIT.java
Patch:
@@ -74,7 +74,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			BedrockCohereChatModel cohereChatModel = context.getBean(BedrockCohereChatModel.class);
 			ChatResponse response = cohereChatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -94,7 +94,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/converse/BedrockConverseProxyChatAutoConfigurationIT.java
Patch:
@@ -70,7 +70,7 @@ void stream() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/converse/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -69,14 +69,14 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				response = chatModel.call(new Prompt(List.of(userMessage),
 						FunctionCallingOptions.builder().withFunction("weatherFunction3").build()));
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 
@@ -100,7 +100,7 @@ void functionStreamTest() {
 					.block()
 					.stream()
 					.filter(cr -> cr.getResult() != null)
-					.map(cr -> cr.getResult().getOutput().getContent())
+					.map(cr -> cr.getResult().getOutput().getText())
 					.collect(Collectors.joining());
 
 				logger.info("Response: {}", content);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/converse/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -68,7 +68,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/jurassic2/BedrockAi21Jurassic2ChatAutoConfigurationIT.java
Patch:
@@ -71,7 +71,7 @@ public void chatCompletion() {
 			BedrockAi21Jurassic2ChatModel ai21Jurassic2ChatModel = context.getBean(BedrockAi21Jurassic2ChatModel.class);
 			ChatResponse response = ai21Jurassic2ChatModel
 				.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/llama/BedrockLlamaChatAutoConfigurationIT.java
Patch:
@@ -73,7 +73,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			BedrockLlamaChatModel llamaChatModel = context.getBean(BedrockLlamaChatModel.class);
 			ChatResponse response = llamaChatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -93,7 +93,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfigurationIT.java
Patch:
@@ -72,7 +72,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			BedrockTitanChatModel chatModel = context.getBean(BedrockTitanChatModel.class);
 			ChatResponse response = chatModel.call(new Prompt(List.of(this.userMessage, this.systemMessage)));
-			assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+			assertThat(response.getResult().getOutput().getText()).contains("Blackbeard");
 		});
 	}
 
@@ -91,7 +91,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Blackbeard");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryAutoConfigurationIT.java
Patch:
@@ -71,7 +71,7 @@ void addAndGet() {
 				assertThat(memory.get(sessionId, Integer.MAX_VALUE)).hasSize(1);
 				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(0).getMessageType())
 					.isEqualTo(MessageType.USER);
-				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(0).getContent()).isEqualTo("test question");
+				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(0).getText()).isEqualTo("test question");
 
 				memory.clear(sessionId);
 				assertThat(memory.get(sessionId, Integer.MAX_VALUE)).isEmpty();
@@ -81,10 +81,10 @@ void addAndGet() {
 				assertThat(memory.get(sessionId, Integer.MAX_VALUE)).hasSize(2);
 				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(1).getMessageType())
 					.isEqualTo(MessageType.USER);
-				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(1).getContent()).isEqualTo("test question");
+				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(1).getText()).isEqualTo("test question");
 				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(0).getMessageType())
 					.isEqualTo(MessageType.ASSISTANT);
-				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(0).getContent()).isEqualTo("test answer");
+				assertThat(memory.get(sessionId, Integer.MAX_VALUE).get(0).getText()).isEqualTo("test answer");
 
 				CassandraChatMemoryProperties properties = context.getBean(CassandraChatMemoryProperties.class);
 				assertThat(properties.getTimeToLive()).isEqualTo(getTimeToLive());

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatAutoConfigurationIT.java
Patch:
@@ -73,7 +73,7 @@ void generateStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/FunctionCallbackInPromptIT.java
Patch:
@@ -74,7 +74,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 		});
 	}
 
@@ -104,7 +104,7 @@ void streamingFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/MiniMaxAutoConfigurationIT.java
Patch:
@@ -69,7 +69,7 @@ void generateStreaming() {
 			String response = responseFlux.collectList()
 				.block()
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/MiniMaxFunctionCallbackIT.java
Patch:
@@ -70,7 +70,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 		});
 	}
@@ -93,7 +93,7 @@ void streamFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/MistralAiAutoConfigurationIT.java
Patch:
@@ -67,7 +67,7 @@ void generateStreaming() {
 			String response = responseFlux.collectList()
 				.block()
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanIT.java
Patch:
@@ -74,8 +74,8 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsIgnoringCase("T1001");
-				assertThat(response.getResult().getOutput().getContent()).containsIgnoringCase("paid");
+				assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("T1001");
+				assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("paid");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanOpenAiIT.java
Patch:
@@ -81,8 +81,8 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsIgnoringCase("T1001");
-				assertThat(response.getResult().getOutput().getContent()).containsIgnoringCase("paid");
+				assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("T1001");
+				assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("paid");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java
Patch:
@@ -76,8 +76,8 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsIgnoringCase("T1001");
-				assertThat(response.getResult().getOutput().getContent()).containsIgnoringCase("paid");
+				assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("T1001");
+				assertThat(response.getResult().getOutput().getText()).containsIgnoringCase("paid");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java
Patch:
@@ -84,7 +84,7 @@ void promptFunctionCall() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("15", "15.0");
+				assertThat(response.getResult().getOutput().getText()).containsAnyOf("15", "15.0");
 			});
 	}
 
@@ -111,7 +111,7 @@ void functionCallWithPortableFunctionCallingOptions() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("15", "15.0");
+				assertThat(response.getResult().getOutput().getText()).containsAnyOf("15", "15.0");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/MoonshotAutoConfigurationIT.java
Patch:
@@ -66,7 +66,7 @@ void generateStreaming() {
 			Flux<ChatResponse> responseFlux = client.stream(new Prompt(new UserMessage("Hello")));
 			String response = Objects.requireNonNull(responseFlux.collectList().block())
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -75,7 +75,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 		});
 	}
 
@@ -105,7 +105,7 @@ void streamingFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/tool/MoonshotFunctionCallbackIT.java
Patch:
@@ -72,7 +72,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 		});
 	}
@@ -95,7 +95,7 @@ void streamFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.filter(Objects::nonNull)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationIT.java
Patch:
@@ -69,7 +69,7 @@ public void chatCompletion() {
 		this.contextRunner.run(context -> {
 			OllamaChatModel chatModel = context.getBean(OllamaChatModel.class);
 			ChatResponse response = chatModel.call(new Prompt(this.userMessage));
-			assertThat(response.getResult().getOutput().getContent()).contains("Copenhagen");
+			assertThat(response.getResult().getOutput().getText()).contains("Copenhagen");
 		});
 	}
 
@@ -88,7 +88,7 @@ public void chatCompletionStreaming() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 
 			assertThat(stitchedResponseContent).contains("Copenhagen");
@@ -107,7 +107,7 @@ public void chatCompletionWithPull() {
 
 				OllamaChatModel chatModel = context.getBean(OllamaChatModel.class);
 				ChatResponse response = chatModel.call(new Prompt(this.userMessage));
-				assertThat(response.getResult().getOutput().getContent()).contains("Copenhagen");
+				assertThat(response.getResult().getOutput().getText()).contains("Copenhagen");
 				modelManager.deleteModel(model);
 			});
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -82,7 +82,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 		});
 	}
 
@@ -112,7 +112,7 @@ void streamingFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java
Patch:
@@ -129,7 +129,7 @@ void generateStreaming() {
 			String response = responseFlux.collectList()
 				.block()
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();
@@ -147,7 +147,7 @@ void streamingWithTokenUsage() {
 			Usage[] streamingTokenUsage = new Usage[1];
 			String response = responseFlux.collectList().block().stream().map(chatResponse -> {
 				streamingTokenUsage[0] = chatResponse.getMetadata().getUsage();
-				return (chatResponse.getResult() != null) ? chatResponse.getResult().getOutput().getContent() : "";
+				return (chatResponse.getResult() != null) ? chatResponse.getResult().getOutput().getText() : "";
 			}).collect(Collectors.joining());
 
 			assertThat(streamingTokenUsage[0].getPromptTokens()).isGreaterThan(0);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -73,7 +73,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 
@@ -106,7 +106,7 @@ void streamingFunctionCallTest() {
 					.map(ChatResponse::getResults)
 					.flatMap(List::stream)
 					.map(Generation::getOutput)
-					.map(AssistantMessage::getContent)
+					.map(AssistantMessage::getText)
 					.collect(Collectors.joining());
 				logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/OpenAiFunctionCallbackIT.java
Patch:
@@ -66,7 +66,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 		});
 	}
@@ -89,7 +89,7 @@ void streamFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/qianfan/QianFanAutoConfigurationIT.java
Patch:
@@ -75,7 +75,7 @@ void generateStreaming() {
 			Flux<ChatResponse> responseFlux = client.stream(new Prompt(new UserMessage("Hello")));
 			String response = Objects.requireNonNull(responseFlux.collectList().block())
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 			assertThat(response).isNotEmpty();
 			logger.info("Response: " + response);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiAutoConfigurationIT.java
Patch:
@@ -62,7 +62,7 @@ void generateStreaming() {
 			String response = responseFlux.collectList()
 				.block()
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -69,7 +69,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 			});
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -80,15 +80,15 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 				// Verify that no function call is made.
 				response = chatModel
 					.call(new Prompt(List.of(userMessage), VertexAiGeminiChatOptions.builder().build()));
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).doesNotContain("30", "10", "15");
+				assertThat(response.getResult().getOutput().getText()).doesNotContain("30", "10", "15");
 
 			});
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiAutoConfigurationIT.java
Patch:
@@ -72,7 +72,7 @@ void generateStreaming() {
 			String response = responseFlux.collectList()
 				.block()
 				.stream()
-				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getContent())
+				.map(chatResponse -> chatResponse.getResults().get(0).getOutput().getText())
 				.collect(Collectors.joining());
 
 			assertThat(response).isNotEmpty();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -77,7 +77,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 		});
 	}
 
@@ -107,7 +107,7 @@ void streamingFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/tool/ZhipuAiFunctionCallbackIT.java
Patch:
@@ -71,7 +71,7 @@ void functionCallTest() {
 
 			logger.info("Response: {}", response);
 
-			assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
+			assertThat(response.getResult().getOutput().getText()).contains("30", "10", "15");
 
 		});
 	}
@@ -94,7 +94,7 @@ void streamFunctionCallTest() {
 				.map(ChatResponse::getResults)
 				.flatMap(List::stream)
 				.map(Generation::getOutput)
-				.map(AssistantMessage::getContent)
+				.map(AssistantMessage::getText)
 				.collect(Collectors.joining());
 			logger.info("Response: {}", content);
 

File: spring-ai-test/src/main/java/org/springframework/ai/evaluation/BasicEvaluationTest.java
Patch:
@@ -69,12 +69,12 @@ protected void evaluateQuestionAndAnswer(String question, String answer, boolean
 		}
 		Message userMessage = userPromptTemplate.createMessage();
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
-		String yesOrNo = this.openAiChatModel.call(prompt).getResult().getOutput().getContent();
+		String yesOrNo = this.openAiChatModel.call(prompt).getResult().getOutput().getText();
 		logger.info("Is Answer related to question: " + yesOrNo);
 		if (yesOrNo.equalsIgnoreCase("no")) {
 			SystemMessage notRelatedSystemMessage = new SystemMessage(this.qaEvaluatorNotRelatedResource);
 			prompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));
-			String reasonForFailure = this.openAiChatModel.call(prompt).getResult().getOutput().getContent();
+			String reasonForFailure = this.openAiChatModel.call(prompt).getResult().getOutput().getText();
 			fail(reasonForFailure);
 		}
 		else {

File: vector-stores/spring-ai-azure-cosmos-db-store/src/main/java/org/springframework/ai/vectorstore/CosmosDBVectorStore.java
Patch:
@@ -340,7 +340,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 				.block();
 			// Convert JsonNode to Document
 			List<Document> docs = documents.stream()
-				.map(doc -> Document.builder().id(doc.get("id").asText()).content(doc.get("content").asText()).build())
+				.map(doc -> Document.builder().id(doc.get("id").asText()).text(doc.get("content").asText()).build())
 				.collect(Collectors.toList());
 
 			return docs != null ? docs : List.of();

File: vector-stores/spring-ai-azure-store/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -325,7 +325,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 
 				return Document.builder()
 					.id(entry.id())
-					.content(entry.content)
+					.text(entry.content)
 					.metadata(metadata)
 					.score(result.getScore())
 					.build();

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/chat/memory/CassandraChatMemory.java
Patch:
@@ -108,7 +108,7 @@ public void add(String sessionId, Message msg) {
 		Instant instant = (Instant) msg.getMetadata().get(CONVERSATION_TS);
 
 		builder = builder.setInstant(CassandraChatMemoryConfig.DEFAULT_EXCHANGE_ID_NAME, instant)
-			.setString("message", msg.getContent());
+			.setString("message", msg.getText());
 
 		this.conf.session.execute(builder.build());
 	}

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStore.java
Patch:
@@ -262,7 +262,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 			}
 			Document doc = Document.builder()
 				.id(getDocumentId(row))
-				.content(row.getString(this.conf.schema.content()))
+				.text(row.getString(this.conf.schema.content()))
 				.metadata(docFields)
 				.score((double) score)
 				.build();

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/chroma/vectorstore/ChromaVectorStore.java
Patch:
@@ -218,7 +218,7 @@ public Optional<Boolean> doDelete(@NonNull List<String> idList) {
 				metadata.put(DocumentMetadata.DISTANCE.value(), distance);
 				Document document = Document.builder()
 					.id(id)
-					.content(content)
+					.text(content)
 					.metadata(metadata)
 					.score(1.0 - distance)
 					.build();

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/chroma/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -102,7 +102,7 @@ public void simpleSearch() {
 
 			var document = Document.builder()
 				.id("simpleDoc")
-				.content("The sky is blue because of Rayleigh scattering.")
+				.text("The sky is blue because of Rayleigh scattering.")
 				.build();
 
 			vectorStore.add(List.of(document));

File: vector-stores/spring-ai-coherence-store/src/main/java/org/springframework/ai/vectorstore/CoherenceVectorStore.java
Patch:
@@ -216,7 +216,7 @@ public List<Document> similaritySearch(SearchRequest request) {
 				chunk.metadata().put(DocumentMetadata.DISTANCE.value(), r.getDistance());
 				documents.add(Document.builder()
 					.id(id.docId())
-					.content(chunk.text())
+					.text(chunk.text())
 					.metadata(chunk.metadata())
 					.score(1 - r.getDistance())
 					.build());

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/GemFireVectorStore.java
Patch:
@@ -273,7 +273,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 				}
 				metadata.put(DocumentMetadata.DISTANCE.value(), 1 - r.score);
 				String content = (String) metadata.remove(DOCUMENT_FIELD);
-				return Document.builder().id(r.key).content(content).metadata(metadata).score((double) r.score).build();
+				return Document.builder().id(r.key).text(content).metadata(metadata).score((double) r.score).build();
 			})
 			.collectList()
 			.onErrorMap(WebClientException.class, this::handleHttpClientException)

File: vector-stores/spring-ai-hanadb-store/src/test/java/org/springframework/ai/vectorstore/CricketWorldCupHanaController.java
Patch:
@@ -90,7 +90,7 @@ public Map<String, String> hanaVectorStoreSearch(@RequestParam("message") String
 
 		var userMessage = new UserMessage(message);
 		Prompt prompt = new Prompt(List.of(similarDocsMessage, userMessage));
-		String generation = this.chatModel.call(prompt).getResult().getOutput().getContent();
+		String generation = this.chatModel.call(prompt).getResult().getOutput().getText();
 		logger.info("Generation: {}", generation);
 		return Map.of("generation", generation);
 	}

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -268,7 +268,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 				}
 				return Document.builder()
 					.id(docId)
-					.content(content)
+					.text(content)
 					.metadata((metadata != null) ? metadata.getInnerMap() : Map.of())
 					.score((double) getResultSimilarity(rowRecord))
 					.build();

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/MongoDBAtlasVectorStore.java
Patch:
@@ -182,7 +182,7 @@ private Document mapMongoDocument(org.bson.Document mongoDocument, float[] query
 		// @formatter:off
 		return Document.builder()
 			.id(id)
-			.content(content)
+			.text(content)
 			.metadata(metadata)
 			.score(score)
 			.build(); // @formatter:on

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java
Patch:
@@ -236,7 +236,7 @@ private Document recordToDocument(org.neo4j.driver.Record neoRecord) {
 
 		return Document.builder()
 			.id(node.get(this.config.idProperty).asString())
-			.content(node.get("text").asString())
+			.text(node.get("text").asString())
 			.metadata(Map.copyOf(metaData))
 			.score((double) score)
 			.build();

File: vector-stores/spring-ai-oracle-store/src/main/java/org/springframework/ai/vectorstore/OracleVectorStore.java
Patch:
@@ -656,7 +656,7 @@ public Document mapRow(ResultSet rs, int rowNum) throws SQLException {
 
 			return Document.builder()
 				.id(rs.getString(1))
-				.content(rs.getString(2))
+				.text(rs.getString(2))
 				.metadata(metadata)
 				.score(1 - rs.getDouble(5))
 				.build();

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorStore.java
Patch:
@@ -508,7 +508,7 @@ public Document mapRow(ResultSet rs, int rowNum) throws SQLException {
 			// @formatter:off
 			return Document.builder()
 				.id(id)
-				.content(content)
+				.text(content)
 				.metadata(metadata)
 				.score(1.0 - distance)
 				.build(); // @formatter:on

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorStoreWithChatMemoryAdvisorIT.java
Patch:
@@ -104,7 +104,7 @@ private static void verifyRequestHasBeenAdvisedWithMessagesFromVectorStore(ChatM
 		ArgumentCaptor<Prompt> promptCaptor = ArgumentCaptor.forClass(Prompt.class);
 		verify(chatModel).call(promptCaptor.capture());
 		assertThat(promptCaptor.getValue().getInstructions().get(0)).isInstanceOf(SystemMessage.class);
-		assertThat(promptCaptor.getValue().getInstructions().get(0).getContent()).isEqualTo("""
+		assertThat(promptCaptor.getValue().getInstructions().get(0).getText()).isEqualTo("""
 
 				Use the long term conversation memory from the LONG_TERM_MEMORY section to provide accurate answers.
 

File: vector-stores/spring-ai-pinecone-store/src/main/java/org/springframework/ai/vectorstore/PineconeVectorStore.java
Patch:
@@ -239,7 +239,7 @@ public List<Document> similaritySearch(SearchRequest request, String namespace)
 				metadata.put(this.pineconeDistanceMetadataFieldName, 1 - scoredVector.getScore());
 				return Document.builder()
 					.id(id)
-					.content(content)
+					.text(content)
 					.metadata(metadata)
 					.score((double) scoredVector.getScore())
 					.build();

File: vector-stores/spring-ai-typesense-store/src/main/java/org/springframework/ai/vectorstore/TypesenseVectorStore.java
Patch:
@@ -218,7 +218,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 					metadata.put(DocumentMetadata.DISTANCE.value(), hit.getVectorDistance());
 					return Document.builder()
 						.id(docId)
-						.content(content)
+						.text(content)
 						.metadata(metadata)
 						.score(1.0 - hit.getVectorDistance())
 						.build();

File: vector-stores/spring-ai-weaviate-store/src/main/java/org/springframework/ai/vectorstore/WeaviateVectorStore.java
Patch:
@@ -387,7 +387,7 @@ private Document toDocument(Map<String, ?> item) {
 		// @formatter:off
 		return Document.builder()
 			.id(id)
-			.content(content)
+			.text(content)
 			.metadata(metadata)
 			.score(certainty)
 			.build(); // @formatter:on

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/management/OllamaModelManager.java
Patch:
@@ -117,7 +117,8 @@ public void pullModel(String modelName, PullModelStrategy pullModelStrategy) {
 						logger.info("Pulling the '{}' model - Status: {}", modelName, progressResponses.get(progressResponses.size() - 1).status());
 					}
 				})
-				.takeUntil(progressResponses -> progressResponses.get(0) != null && progressResponses.get(0).status().equals("success"))
+				.takeUntil(progressResponses -> 
+					progressResponses.get(0) != null && "success".equals(progressResponses.get(0).status()))
 				.timeout(this.options.timeout())
 				.retryWhen(Retry.backoff(this.options.maxRetries(), Duration.ofSeconds(5)))
 				.blockLast();

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelFunctionCallingIT.java
Patch:
@@ -79,7 +79,6 @@ void functionCallTest() {
 	}
 
 	@Test
-	@Disabled("https://github.com/spring-projects/spring-ai/issues/1891")
 	void streamFunctionCallTest() {
 		UserMessage userMessage = new UserMessage(
 				"What are the weather conditions in San Francisco, Tokyo, and Paris? Find the temperature in Celsius for each of the three locations.");

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelMultimodalIT.java
Patch:
@@ -68,7 +68,7 @@ void multiModalityTest() {
 		var response = this.chatModel.call(new Prompt(List.of(userMessage)));
 
 		logger.info(response.getResult().getOutput().getContent());
-		assertThat(response.getResult().getOutput().getContent()).contains("bananas", "apple");
+		assertThat(response.getResult().getOutput().getContent()).containsAnyOf("bananas", "apple");
 	}
 
 	@SpringBootConfiguration

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaImage.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class OllamaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.14");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.5.1");
 
 	private OllamaImage() {
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/OllamaWithOpenAiChatModelIT.java
Patch:
@@ -77,7 +77,7 @@ class OllamaWithOpenAiChatModelIT {
 	private static final String DEFAULT_OLLAMA_MODEL = "mistral";
 
 	@Container
-	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.3.14");
+	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.5.1");
 
 	static String baseUrl = "http://localhost:11434";
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaImage.java
Patch:
@@ -18,7 +18,7 @@
 
 public final class OllamaImage {
 
-	public static final String DEFAULT_IMAGE = "ollama/ollama:0.3.14";
+	public static final String DEFAULT_IMAGE = "ollama/ollama:0.5.1";
 
 	private OllamaImage() {
 

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaImage.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class OllamaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.14");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.5.1");
 
 	private OllamaImage() {
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelFunctionCallingIT.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -78,7 +77,6 @@ void functionCallTest() {
 		assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
 	}
 
-	@Disabled("Ollama API does not support streaming function calls yet")
 	@Test
 	void streamFunctionCallTest() {
 		UserMessage userMessage = new UserMessage(

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/OllamaWithOpenAiChatModelIT.java
Patch:
@@ -142,7 +142,7 @@ void streamingWithTokenUsage() {
 		var streamingTokenUsage = this.chatModel.stream(prompt).blockLast().getMetadata().getUsage();
 		var referenceTokenUsage = this.chatModel.call(prompt).getMetadata().getUsage();
 
-		assertThat(streamingTokenUsage.getPromptTokens()).isGreaterThan(0);
+		// assertThat(streamingTokenUsage.getPromptTokens()).isGreaterThan(0);
 		assertThat(streamingTokenUsage.getGenerationTokens()).isGreaterThan(0);
 		assertThat(streamingTokenUsage.getTotalTokens()).isGreaterThan(0);
 
@@ -282,7 +282,6 @@ void functionCallTest(String modelName) {
 		assertThat(response.getResult().getOutput().getContent()).contains("30", "10", "15");
 	}
 
-	@Disabled("Ollama API does not support streaming function calls yet")
 	@Test
 	void streamFunctionCallTest() {
 
@@ -295,6 +294,7 @@ void streamFunctionCallTest() {
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
 				.function("getCurrentWeather", new MockWeatherService())
 				.description("Get the weather in location")
+				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.stream.Collectors;
 
 import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -87,7 +86,6 @@ void functionCallTest() {
 		});
 	}
 
-	@Disabled("Ollama API does not support streaming function calls yet")
 	@Test
 	void streamingFunctionCallTest() {
 		this.contextRunner.run(context -> {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/OllamaFunctionCallbackIT.java
Patch:
@@ -84,7 +84,6 @@ void functionCallTest() {
 		});
 	}
 
-	@Disabled("Ollama API does not support streaming function calls yet")
 	@Test
 	void streamFunctionCallTest() {
 		this.contextRunner.run(context -> {

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/AbstractVectorStoreBuilder.java
Patch:
@@ -72,7 +72,6 @@ public T observationRegistry(ObservationRegistry observationRegistry) {
 
 	@Override
 	public T customObservationConvention(VectorStoreObservationConvention convention) {
-		Assert.notNull(convention, "VectorStoreObservationConvention must not be null");
 		this.customObservationConvention = convention;
 		return self();
 	}

File: vector-stores/spring-ai-mariadb-store/src/test/java/org/springframework/ai/vectorstore/mariadb/MariaDBStoreIT.java
Patch:
@@ -65,7 +65,6 @@
  */
 @Testcontainers
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
-@Disabled("Failing after commit ebd29e0")
 public class MariaDBStoreIT {
 
 	private static String schemaName = "testdb";

File: vector-stores/spring-ai-mariadb-store/src/test/java/org/springframework/ai/vectorstore/mariadb/MariaDBStoreObservationIT.java
Patch:
@@ -64,7 +64,6 @@
  */
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
 @Testcontainers
-@Disabled("Failing after commit ebd29e0")
 public class MariaDBStoreObservationIT {
 
 	private static String schemaName = "testdb";

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -66,12 +66,12 @@ void defaultEmbedding() {
 	@Test
 	void embeddingBatchDocuments() throws Exception {
 		assertThat(this.embeddingModel).isNotNull();
-		List<float[]> embedded = this.embeddingModel.embed(
+		List<float[]> embeddings = this.embeddingModel.embed(
 				List.of(new Document("Hello world"), new Document("Hello Spring"), new Document("Hello Spring AI!")),
 				OpenAiEmbeddingOptions.builder().withModel(OpenAiApi.DEFAULT_EMBEDDING_MODEL).build(),
 				new TokenCountBatchingStrategy());
-		assertThat(embedded.size()).isEqualTo(3);
-		embedded.forEach(embedding -> assertThat(embedding.length).isEqualTo(this.embeddingModel.dimensions()));
+		assertThat(embeddings.size()).isEqualTo(3);
+		embeddings.forEach(embedding -> assertThat(embedding.length).isEqualTo(this.embeddingModel.dimensions()));
 	}
 
 	@Test

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/BatchingStrategy.java
Patch:
@@ -31,7 +31,9 @@ public interface BatchingStrategy {
 
 	/**
 	 * {@link EmbeddingModel} implementations can call this method to optimize embedding
-	 * tokens. The incoming collection of {@link Document}s are split into su-batches.
+	 * tokens. The incoming collection of {@link Document}s are split into sub-batches. It
+	 * is important to preserve the order of the list of {@link Document}s when batching
+	 * as they are mapped to their corresponding embeddings by their order.
 	 * @param documents to batch
 	 * @return a list of sub-batches that contain {@link Document}s.
 	 */

File: vector-stores/spring-ai-azure-store/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -223,12 +223,13 @@ public void doAdd(List<Document> documents) {
 			return; // nothing to do;
 		}
 
-		this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(), this.batchingStrategy);
+		List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
+				this.batchingStrategy);
 
 		final var searchDocuments = documents.stream().map(document -> {
 			SearchDocument searchDocument = new SearchDocument();
 			searchDocument.put(ID_FIELD_NAME, document.getId());
-			searchDocument.put(EMBEDDING_FIELD_NAME, document.getEmbedding());
+			searchDocument.put(EMBEDDING_FIELD_NAME, embeddings.get(documents.indexOf(document)));
 			searchDocument.put(CONTENT_FIELD_NAME, document.getContent());
 			searchDocument.put(METADATA_FIELD_NAME, new JSONObject(document.getMetadata()).toJSONString());
 
@@ -327,7 +328,6 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 					.content(entry.content)
 					.metadata(metadata)
 					.score(result.getScore())
-					.embedding(EmbeddingUtils.toPrimitive(entry.embedding))
 					.build();
 			})
 			.collect(Collectors.toList());

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStoreConfig.java
Patch:
@@ -90,6 +90,8 @@ public final class CassandraVectorStoreConfig implements AutoCloseable {
 
 	final boolean disallowSchemaChanges;
 
+	// TODO: Remove this flag as the document no longer holds embeddings.
+	@Deprecated(since = "1.0.0-M5", forRemoval = true)
 	final boolean returnEmbeddings;
 
 	final DocumentIdTranslator documentIdTranslator;

File: vector-stores/spring-ai-coherence-store/src/main/java/org/springframework/ai/vectorstore/CoherenceVectorStore.java
Patch:
@@ -167,9 +167,9 @@ public CoherenceVectorStore setForcedNormalization(boolean forcedNormalization)
 	public void add(final List<Document> documents) {
 		Map<DocumentChunk.Id, DocumentChunk> chunks = new HashMap<>((int) Math.ceil(documents.size() / 0.75f));
 		for (Document doc : documents) {
-			doc.setEmbedding(this.embeddingModel.embed(doc));
 			var id = toChunkId(doc.getId());
-			var chunk = new DocumentChunk(doc.getContent(), doc.getMetadata(), toFloat32Vector(doc.getEmbedding()));
+			var chunk = new DocumentChunk(doc.getContent(), doc.getMetadata(),
+					toFloat32Vector(this.embeddingModel.embed(doc)));
 			chunks.put(id, chunk);
 		}
 		this.documentChunks.putAll(chunks);

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -161,15 +161,16 @@ public void doAdd(List<Document> documents) {
 		List<List<Float>> embeddingArray = new ArrayList<>();
 
 		// TODO: Need to customize how we pass the embedding options
-		this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(), this.batchingStrategy);
+		List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
+				this.batchingStrategy);
 
 		for (Document document : documents) {
 			docIdArray.add(document.getId());
 			// Use a (future) DocumentTextLayoutFormatter instance to extract
 			// the content used to compute the embeddings
 			contentArray.add(document.getContent());
 			metadataArray.add(new JSONObject(document.getMetadata()));
-			embeddingArray.add(EmbeddingUtils.toList(document.getEmbedding()));
+			embeddingArray.add(EmbeddingUtils.toList(embeddings.get(documents.indexOf(document))));
 		}
 
 		List<InsertParam.Field> fields = new ArrayList<>();

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorStoreWithChatMemoryAdvisorIT.java
Patch:
@@ -146,9 +146,6 @@ void advisedChatShouldHaveSimilarMessagesFromVectorStore() throws Exception {
 		EmbeddingModel embeddingModel = mock(EmbeddingModel.class);
 
 		Mockito.doAnswer(invocationOnMock -> {
-			Object[] arguments = invocationOnMock.getArguments();
-			List<Document> documents = (List<Document>) arguments[0];
-			documents.forEach(d -> d.setEmbedding(this.embed));
 			return List.of(this.embed, this.embed);
 		}).when(embeddingModel).embed(ArgumentMatchers.any(), any(), any());
 		given(embeddingModel.embed(any(String.class))).willReturn(this.embed);

File: vector-stores/spring-ai-pinecone-store/src/main/java/org/springframework/ai/vectorstore/PineconeVectorStore.java
Patch:
@@ -124,11 +124,12 @@ public PineconeVectorStore(PineconeVectorStoreConfig config, EmbeddingModel embe
 	 * @param namespace The namespace to add the documents to
 	 */
 	public void add(List<Document> documents, String namespace) {
-		this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(), this.batchingStrategy);
+		List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
+				this.batchingStrategy);
 		List<Vector> upsertVectors = documents.stream()
 			.map(document -> Vector.newBuilder()
 				.setId(document.getId())
-				.addAllValues(EmbeddingUtils.toList(document.getEmbedding()))
+				.addAllValues(EmbeddingUtils.toList(embeddings.get(documents.indexOf(document))))
 				.setMetadata(metadataToStruct(document))
 				.build())
 			.toList();

File: vector-stores/spring-ai-qdrant-store/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -127,12 +127,13 @@ public void doAdd(List<Document> documents) {
 		try {
 
 			// Compute and assign an embedding to the document.
-			this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(), this.batchingStrategy);
+			List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
+					this.batchingStrategy);
 
 			List<PointStruct> points = documents.stream()
 				.map(document -> PointStruct.newBuilder()
 					.setId(io.qdrant.client.PointIdFactory.id(UUID.fromString(document.getId())))
-					.setVectors(io.qdrant.client.VectorsFactory.vectors(document.getEmbedding()))
+					.setVectors(io.qdrant.client.VectorsFactory.vectors(embeddings.get(documents.indexOf(document))))
 					.putAllPayload(toPayload(document))
 					.build())
 				.toList();

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/RedisVectorStore.java
Patch:
@@ -163,12 +163,12 @@ public JedisPooled getJedis() {
 	public void doAdd(List<Document> documents) {
 		try (Pipeline pipeline = this.jedis.pipelined()) {
 
-			this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(), this.batchingStrategy);
+			List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
+					this.batchingStrategy);
 
 			for (Document document : documents) {
-				document.setEmbedding(document.getEmbedding());
 				var fields = new HashMap<String, Object>();
-				fields.put(this.config.embeddingFieldName, document.getEmbedding());
+				fields.put(this.config.embeddingFieldName, embeddings.get(documents.indexOf(document)));
 				fields.put(this.config.contentFieldName, document.getContent());
 				fields.putAll(document.getMetadata());
 				pipeline.jsonSetWithEscape(key(document.getId()), JSON_SET_PATH, fields);

File: vector-stores/spring-ai-typesense-store/src/main/java/org/springframework/ai/vectorstore/TypesenseVectorStore.java
Patch:
@@ -125,14 +125,15 @@ public TypesenseVectorStore(Client client, EmbeddingModel embeddingModel, Typese
 	public void doAdd(List<Document> documents) {
 		Assert.notNull(documents, "Documents must not be null");
 
-		this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(), this.batchingStrategy);
+		List<float[]> embeddings = this.embeddingModel.embed(documents, EmbeddingOptionsBuilder.builder().build(),
+				this.batchingStrategy);
 
 		List<HashMap<String, Object>> documentList = documents.stream().map(document -> {
 			HashMap<String, Object> typesenseDoc = new HashMap<>();
 			typesenseDoc.put(DOC_ID_FIELD_NAME, document.getId());
 			typesenseDoc.put(CONTENT_FIELD_NAME, document.getContent());
 			typesenseDoc.put(METADATA_FIELD_NAME, document.getMetadata());
-			typesenseDoc.put(EMBEDDING_FIELD_NAME, document.getEmbedding());
+			typesenseDoc.put(EMBEDDING_FIELD_NAME, embeddings.get(documents.indexOf(document)));
 
 			return typesenseDoc;
 		}).toList();

File: spring-ai-core/src/main/java/org/springframework/ai/document/Document.java
Patch:
@@ -291,6 +291,7 @@ public Builder content(String content) {
 		}
 
 		public Builder media(List<Media> media) {
+			Assert.notNull(media, "media cannot be null");
 			this.media.addAll(media);
 			return this;
 		}

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/PaymentStatusFunctionCallingIT.java
Patch:
@@ -24,6 +24,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.slf4j.Logger;
@@ -52,6 +53,7 @@
  * @author Christian Tzolov
  * @since 0.8.1
  */
+@Disabled("See https://github.com/spring-projects/spring-ai/issues/1853")
 @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+")
 public class PaymentStatusFunctionCallingIT {
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/RetrievalAugmentationAdvisorTests.java
Patch:
@@ -70,8 +70,8 @@ void theOneWithTheDocumentRetriever() {
 			.build());
 
 		// Document Retriever
-		var documentContext = List.of(Document.builder().withId("1").withContent("doc1").build(),
-				Document.builder().withId("2").withContent("doc2").build());
+		var documentContext = List.of(Document.builder().id("1").content("doc1").build(),
+				Document.builder().id("2").content("doc2").build());
 		var documentRetriever = mock(DocumentRetriever.class);
 		var queryCaptor = ArgumentCaptor.forClass(Query.class);
 		given(documentRetriever.retrieve(queryCaptor.capture())).willReturn(documentContext);

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/SimpleVectorStoreSimilarityTests.java
Patch:
@@ -27,6 +27,7 @@
 
 /**
  * @author Ilayaperumal Gopinathan
+ * @author Thomas Vitale
  */
 public class SimpleVectorStoreSimilarityTests {
 
@@ -38,8 +39,7 @@ public void testSimilarity() {
 
 		SimpleVectorStoreContent storeContent = new SimpleVectorStoreContent("1", "hello, how are you?", metadata,
 				testEmbedding);
-		SimpleVectorStore.Similarity similarity = new SimpleVectorStore.Similarity(storeContent, 0.6d);
-		Document document = similarity.getDocument();
+		Document document = storeContent.toDocument(0.6);
 		assertThat(document).isNotNull();
 		assertThat(document.getId()).isEqualTo("1");
 		assertThat(document.getContent()).isEqualTo("hello, how are you?");

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreProperties.java
Patch:
@@ -18,13 +18,15 @@
 
 import java.time.Duration;
 
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.vectorstore.PineconeVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * Configuration properties for Pinecone Vector Store.
  *
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 @ConfigurationProperties(PineconeVectorStoreProperties.CONFIG_PREFIX)
 public class PineconeVectorStoreProperties {
@@ -43,7 +45,7 @@ public class PineconeVectorStoreProperties {
 
 	private String contentFieldName = PineconeVectorStore.CONTENT_FIELD_NAME;
 
-	private String distanceMetadataFieldName = PineconeVectorStore.DISTANCE_METADATA_FIELD_NAME;
+	private String distanceMetadataFieldName = DocumentMetadata.DISTANCE.value();
 
 	private Duration serverSideTimeout = Duration.ofSeconds(20);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStorePropertiesTests.java
Patch:
@@ -20,12 +20,14 @@
 
 import org.junit.jupiter.api.Test;
 
+import org.springframework.ai.document.DocumentMetadata;
 import org.springframework.ai.vectorstore.PineconeVectorStore;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 public class PineconeVectorStorePropertiesTests {
 
@@ -39,7 +41,7 @@ public void defaultValues() {
 		assertThat(props.getIndexName()).isNull();
 		assertThat(props.getServerSideTimeout()).isEqualTo(Duration.ofSeconds(20));
 		assertThat(props.getContentFieldName()).isEqualTo(PineconeVectorStore.CONTENT_FIELD_NAME);
-		assertThat(props.getDistanceMetadataFieldName()).isEqualTo(PineconeVectorStore.DISTANCE_METADATA_FIELD_NAME);
+		assertThat(props.getDistanceMetadataFieldName()).isEqualTo(DocumentMetadata.DISTANCE.value());
 	}
 
 	@Test

File: vector-stores/spring-ai-azure-cosmos-db-store/src/main/java/org/springframework/ai/vectorstore/CosmosDBVectorStore.java
Patch:
@@ -74,6 +74,7 @@
  *
  * @author Theo van Kraay
  * @author Soby Chacko
+ * @author Thomas Vitale
  * @since 1.0.0
  */
 public class CosmosDBVectorStore extends AbstractObservationVectorStore implements AutoCloseable {
@@ -338,7 +339,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 				.block();
 			// Convert JsonNode to Document
 			List<Document> docs = documents.stream()
-				.map(doc -> new Document(doc.get("id").asText(), doc.get("content").asText(), new HashMap<>()))
+				.map(doc -> Document.builder().id(doc.get("id").asText()).content(doc.get("content").asText()).build())
 				.collect(Collectors.toList());
 
 			return docs != null ? docs : List.of();

File: vector-stores/spring-ai-azure-cosmos-db-store/src/test/java/org/springframework/ai/vectorstore/CosmosDBVectorStoreIT.java
Patch:
@@ -42,6 +42,7 @@
 
 /**
  * @author Theo van Kraay
+ * @author Thomas Vitale
  * @since 1.0.0
  */
 @EnabledIfEnvironmentVariable(named = "AZURE_COSMOSDB_ENDPOINT", matches = ".+")

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreObservationIT.java
Patch:
@@ -107,7 +107,6 @@ void observationVectorStoreAddAndQueryOperations() {
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.DB_COLLECTION_NAME.asString(),
 						"TestCollection:" + vectorStore.getCollectionId())
 				.doesNotHaveHighCardinalityKeyValueWithKey(HighCardinalityKeyNames.DB_NAMESPACE.asString())
-				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.DB_VECTOR_FIELD_NAME.asString(), "distance")
 				.doesNotHaveHighCardinalityKeyValueWithKey(
 						HighCardinalityKeyNames.DB_SEARCH_SIMILARITY_METRIC.asString())
 				.doesNotHaveHighCardinalityKeyValueWithKey(HighCardinalityKeyNames.DB_VECTOR_QUERY_TOP_K.asString())
@@ -141,7 +140,6 @@ void observationVectorStoreAddAndQueryOperations() {
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.DB_COLLECTION_NAME.asString(),
 						"TestCollection:" + vectorStore.getCollectionId())
 				.doesNotHaveHighCardinalityKeyValueWithKey(HighCardinalityKeyNames.DB_NAMESPACE.asString())
-				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.DB_VECTOR_FIELD_NAME.asString(), "distance")
 				.doesNotHaveHighCardinalityKeyValueWithKey(
 						HighCardinalityKeyNames.DB_SEARCH_SIMILARITY_METRIC.asString())
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.DB_VECTOR_QUERY_TOP_K.asString(), "1")

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelIT.java
Patch:
@@ -276,9 +276,9 @@ void functionCallTest() {
 		var promptOptions = AnthropicChatOptions.builder()
 			.withModel(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getName())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Get the weather in location. Return temperature in 36°F or 36°C format. Use multi-turn if needed.")
-				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -304,9 +304,9 @@ void streamFunctionCallTest() {
 		var promptOptions = AnthropicChatOptions.builder()
 			.withModel(AnthropicApi.ChatModel.CLAUDE_3_5_SONNET.getName())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Get the weather in location. Return temperature in 36°F or 36°C format. Use multi-turn if needed.")
-				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/client/AnthropicChatClientIT.java
Patch:
@@ -250,8 +250,8 @@ void defaultFunctionCallTest() {
 		// @formatter:off
 		String response = ChatClient.builder(this.chatModel)
 				.defaultFunctions(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build())
 				.defaultUser(u -> u.text("What's the weather like in San Francisco, Tokyo, and Paris? Use Celsius."))
@@ -273,8 +273,8 @@ void streamFunctionCallTest() {
 		Flux<String> response = ChatClient.create(this.chatModel).prompt()
 				.user("What's the weather like in San Francisco, Tokyo, and Paris? Use Celsius.")
 				.functions(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build())
 				.stream()

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseUsageAggregationTests.java
Patch:
@@ -139,8 +139,8 @@ public void callWithToolUse() {
 			.willReturn(converseResponseFinal);
 
 		FunctionCallback functionCallback = FunctionCallback.builder()
-			.description("Gets the weather in location")
 			.function("getCurrentWeather", (Request request) -> "15.0°C")
+			.description("Gets the weather in location")
 			.inputType(Request.class)
 			.build();
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModelIT.java
Patch:
@@ -255,9 +255,9 @@ void functionCallTest() {
 
 		var promptOptions = FunctionCallingOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Get the weather in location. Return temperature in 36°F or 36°C format. Use multi-turn if needed.")
-				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -283,9 +283,9 @@ void streamFunctionCallTest() {
 		var promptOptions = FunctionCallingOptions.builder()
 			.withModel("anthropic.claude-3-5-sonnet-20240620-v1:0")
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Get the weather in location. Return temperature in 36°F or 36°C format. Use multi-turn if needed.")
-				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/experiments/BedrockConverseChatModelMain2.java
Patch:
@@ -53,8 +53,8 @@ public static void main(String[] args) {
 				PortableFunctionCallingOptions.builder()
 					.withModel(modelId)
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function("getCurrentWeather", new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build());

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/experiments/BedrockConverseChatModelMain3.java
Patch:
@@ -51,8 +51,8 @@ public static void main(String[] args) {
 				PortableFunctionCallingOptions.builder()
 					.withModel(modelId)
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function("getCurrentWeather", new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build());

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/ChatCompletionRequestTests.java
Patch:
@@ -68,8 +68,8 @@ public void promptOptionsTools() {
 				MiniMaxChatOptions.builder()
 					.withModel("PROMPT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),
@@ -95,8 +95,8 @@ public void defaultOptionsTools() {
 				MiniMaxChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build());
@@ -127,8 +127,8 @@ public void defaultOptionsTools() {
 		request = client.createRequest(new Prompt("Test message content",
 				MiniMaxChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Overridden function description")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Overridden function description")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelIT.java
Patch:
@@ -194,8 +194,8 @@ void functionCallTest() {
 		var promptOptions = MistralAiChatOptions.builder()
 			.withModel(MistralAiApi.ChatModel.SMALL.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -217,8 +217,8 @@ void streamFunctionCallTest() {
 		var promptOptions = MistralAiChatOptions.builder()
 			.withModel(MistralAiApi.ChatModel.SMALL.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/chat/MoonshotChatModelFunctionCallingIT.java
Patch:
@@ -64,8 +64,8 @@ void functionCallTest() {
 		var promptOptions = MoonshotChatOptions.builder()
 			.withModel(MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -87,8 +87,8 @@ void streamFunctionCallTest() {
 
 		var promptOptions = MoonshotChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.build()))
 			.build();
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelFunctionCallingIT.java
Patch:
@@ -64,9 +64,9 @@ void functionCallTest() {
 		var promptOptions = OllamaOptions.builder()
 			.withModel(MODEL)
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")
-				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -89,9 +89,9 @@ void streamFunctionCallTest() {
 		var promptOptions = OllamaOptions.builder()
 			.withModel(MODEL)
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
+				.function("getCurrentWeather", new MockWeatherService())
 				.description(
 						"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")
-				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -68,8 +68,8 @@ public void promptOptionsTools() {
 				OpenAiChatOptions.builder()
 					.withModel("PROMPT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),
@@ -95,8 +95,8 @@ public void defaultOptionsTools() {
 				OpenAiChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build());
@@ -127,8 +127,8 @@ public void defaultOptionsTools() {
 		request = client.createRequest(new Prompt("Test message content",
 				OpenAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Overridden function description")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Overridden function description")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelIT.java
Patch:
@@ -330,8 +330,8 @@ void functionCallTest() {
 		var promptOptions = OpenAiChatOptions.builder()
 			.withModel(OpenAiApi.ChatModel.GPT_4_O.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -355,8 +355,8 @@ void streamFunctionCallTest() {
 		var promptOptions = OpenAiChatOptions.builder()
 			// .withModel(OpenAiApi.ChatModel.GPT_4_TURBO_PREVIEW.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientIT.java
Patch:
@@ -246,8 +246,8 @@ void beanStreamOutputConverterRecords() {
 	void functionCallTest() {
 
 		FunctionCallback functionCallback = FunctionCallback.builder()
-			.description("Get the weather in location")
 			.function("getCurrentWeather", new MockWeatherService())
+			.description("Get the weather in location")
 			.inputType(MockWeatherService.Request.class)
 			.build();
 
@@ -270,8 +270,8 @@ void defaultFunctionCallTest() {
 		// @formatter:off
 		String response = ChatClient.builder(this.chatModel)
 				.defaultFunctions(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build())
 				.defaultUser(u -> u.text("What's the weather like in San Francisco, Tokyo, and Paris?"))
@@ -291,8 +291,8 @@ void streamFunctionCallTest() {
 		Flux<String> response = ChatClient.create(this.chatModel).prompt()
 				.user("What's the weather like in San Francisco, Tokyo, and Paris?")
 				.functions(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build())
 				.stream()

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java
Patch:
@@ -250,8 +250,8 @@ void functionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -273,8 +273,8 @@ void streamFunctionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/MistralWithOpenAiChatModelIT.java
Patch:
@@ -252,8 +252,8 @@ void functionCallTest(String modelName) {
 		var promptOptions = OpenAiChatOptions.builder()
 			.withModel(modelName)
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -277,8 +277,8 @@ void streamFunctionCallTest(String modelName) {
 		var promptOptions = OpenAiChatOptions.builder()
 			.withModel(modelName)
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java
Patch:
@@ -247,8 +247,8 @@ void functionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -270,8 +270,8 @@ void streamFunctionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/OllamaWithOpenAiChatModelIT.java
Patch:
@@ -269,8 +269,8 @@ void functionCallTest(String modelName) {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -293,8 +293,8 @@ void streamFunctionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.build()))
 			.build();
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/PerplexityWithOpenAiChatModelIT.java
Patch:
@@ -257,8 +257,8 @@ void functionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -279,8 +279,8 @@ void streamFunctionCallTest() {
 
 		var promptOptions = OpenAiChatOptions.builder()
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/CreateGeminiRequestTests.java
Patch:
@@ -118,8 +118,8 @@ public void promptOptionsTools() {
 				VertexAiGeminiChatOptions.builder()
 					.withModel("PROMPT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),
@@ -146,8 +146,8 @@ public void defaultOptionsTools() {
 				VertexAiGeminiChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build());
@@ -179,8 +179,8 @@ public void defaultOptionsTools() {
 		request = client.createGeminiRequest(new Prompt("Test message content",
 				VertexAiGeminiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Overridden function description")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Overridden function description")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/ChatCompletionRequestTests.java
Patch:
@@ -68,8 +68,8 @@ public void promptOptionsTools() {
 				ZhiPuAiChatOptions.builder()
 					.withModel("PROMPT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),
@@ -95,8 +95,8 @@ public void defaultOptionsTools() {
 				ZhiPuAiChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build());
@@ -127,8 +127,8 @@ public void defaultOptionsTools() {
 		request = client.createRequest(new Prompt("Test message content",
 				ZhiPuAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Overridden function description")
 						.function(TOOL_FUNCTION_NAME, new MockWeatherService())
+						.description("Overridden function description")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build()),

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/chat/ZhiPuAiChatModelIT.java
Patch:
@@ -231,8 +231,8 @@ void functionCallTest() {
 		var promptOptions = ZhiPuAiChatOptions.builder()
 			.withModel(ZhiPuAiApi.ChatModel.GLM_4.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();
@@ -257,8 +257,8 @@ void streamFunctionCallTest() {
 		var promptOptions = ZhiPuAiChatOptions.builder()
 			.withModel(ZhiPuAiApi.ChatModel.GLM_4.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build()))
 			.build();

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/DefaultChatClient.java
Patch:
@@ -878,9 +878,9 @@ public <I, O> ChatClientRequestSpec function(String name, String description, @N
 			Assert.notNull(function, "function cannot be null");
 
 			var fcw = FunctionCallback.builder()
+				.function(name, function)
 				.description(description)
 				.responseConverter(Object::toString)
-				.function(name, function)
 				.inputType(inputType)
 				.build();
 			this.functionCallbacks.add(fcw);

File: spring-ai-core/src/test/java/org/springframework/ai/chat/ChatBuilderTests.java
Patch:
@@ -80,8 +80,8 @@ void createFunctionCallingOptionTest() {
 
 		String func = "func";
 		FunctionCallback cb = FunctionCallback.builder()
-			.description("cb")
 			.function("cb", i -> i)
+			.description("cb")
 			.inputType(Integer.class)
 			.build();
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/ChatClientTest.java
Patch:
@@ -219,8 +219,8 @@ void mutateDefaults() {
 						.param("param2", "value2"))
 				.defaultFunctions("fun1", "fun2")
 				.defaultFunctions(FunctionCallback.builder()
-						.description("fun3description")
 						.function("fun3", mockFunction)
+						.description("fun3description")
 						.inputType(String.class)
 						.build())
 				.defaultUser(u -> u.text("Default user text {uparam1}, {uparam2}")
@@ -350,8 +350,8 @@ void mutatePrompt() {
 						.param("param2", "value2"))
 				.defaultFunctions("fun1", "fun2")
 				.defaultFunctions(FunctionCallback.builder()
-						.description("fun3description")
 						.function("fun3", mockFunction)
+						.description("fun3description")
 						.inputType(String.class)
 						.build())
 				.defaultUser(u -> u.text("Default user text {uparam1}, {uparam2}")

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/DefaultChatClientTests.java
Patch:
@@ -1357,8 +1357,8 @@ void whenFunctionNameIsNullThenThrow() {
 		ChatClient chatClient = new DefaultChatClientBuilder(mock(ChatModel.class)).build();
 		ChatClient.ChatClientRequestSpec spec = chatClient.prompt();
 		assertThatThrownBy(() -> spec.functions(FunctionCallback.builder()
-			.description("description")
 			.function(null, input -> "hello")
+			.description("description")
 			.inputType(String.class)
 			.build())).isInstanceOf(IllegalArgumentException.class).hasMessage("Name must not be empty");
 	}
@@ -1368,8 +1368,8 @@ void whenFunctionNameIsEmptyThenThrow() {
 		ChatClient chatClient = new DefaultChatClientBuilder(mock(ChatModel.class)).build();
 		ChatClient.ChatClientRequestSpec spec = chatClient.prompt();
 		assertThatThrownBy(() -> spec.functions(FunctionCallback.builder()
-			.description("description")
 			.function("", input -> "hello")
+			.description("description")
 			.inputType(String.class)
 			.build())).isInstanceOf(IllegalArgumentException.class).hasMessage("Name must not be empty");
 	}
@@ -1379,8 +1379,8 @@ void whenFunctionDescriptionIsNullThenThrow() {
 		ChatClient chatClient = new DefaultChatClientBuilder(mock(ChatModel.class)).build();
 		ChatClient.ChatClientRequestSpec spec = chatClient.prompt();
 		assertThatThrownBy(() -> spec.functions(FunctionCallback.builder()
+			.function("name", input -> "hello")
 			.description(null)
-			.function("", input -> "hello")
 			.inputType(String.class)
 			.build())).isInstanceOf(IllegalArgumentException.class).hasMessage("Description must not be empty");
 	}

File: spring-ai-core/src/test/java/org/springframework/ai/model/function/MethodInvokingFunctionCallbackTests.java
Patch:
@@ -56,9 +56,9 @@ public void beforeEach() {
 	public void staticMethod() throws NoSuchMethodException, SecurityException {
 
 		var functionCallback = FunctionCallback.builder()
+			.method("myStaticMethod", String.class, Unit.class, int.class, MyRecord.class, List.class)
 			.description("weather at location")
 			.objectMapper(new ObjectMapper())
-			.method("myStaticMethod", String.class, Unit.class, int.class, MyRecord.class, List.class)
 			.targetClass(TestClassWithFunctionMethods.class)
 			.build();
 
@@ -80,8 +80,8 @@ public void nonStaticMethod() throws NoSuchMethodException, SecurityException {
 		var object = new TestClassWithFunctionMethods();
 
 		var functionCallback = FunctionCallback.builder()
-			.description("weather at location")
 			.method("myNonStaticMethod", String.class, Unit.class, int.class, MyRecord.class, List.class)
+			.description("weather at location")
 			.targetObject(object)
 			.build();
 
@@ -101,9 +101,9 @@ public void nonStaticMethod() throws NoSuchMethodException, SecurityException {
 	public void noArgsNoReturnMethod() throws NoSuchMethodException, SecurityException {
 
 		var functionCallback = FunctionCallback.builder()
+			.method("argumentLessReturnVoid")
 			.description("weather at location")
 			.objectMapper(new ObjectMapper())
-			.method("argumentLessReturnVoid")
 			.targetClass(TestClassWithFunctionMethods.class)
 			.build();
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -59,8 +59,8 @@ void functionCallTest() {
 
 				var promptOptions = AnthropicChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location. Return temperature in 36°F or 36°C format.")
 						.function("CurrentWeatherService", new MockWeatherService())
+						.description("Get the weather in location. Return temperature in 36°F or 36°C format.")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -80,8 +80,8 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
-				.description("Get the current weather in a given location")
 				.function("WeatherInfo", new MockWeatherService())
+				.description("Get the current weather in a given location")
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -62,8 +62,8 @@ void functionCallTest() {
 
 				var promptOptions = AzureOpenAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function("CurrentWeatherService", new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/converse/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -58,8 +58,8 @@ void functionCallTest() {
 
 				var promptOptions = FunctionCallingOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location. Return temperature in 36°F or 36°C format.")
 						.function("CurrentWeatherService", new MockWeatherService())
+						.description("Get the weather in location. Return temperature in 36°F or 36°C format.")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/FunctionCallbackInPromptIT.java
Patch:
@@ -64,8 +64,8 @@ void functionCallTest() {
 
 			var promptOptions = MiniMaxChatOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("CurrentWeatherService", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();
@@ -90,8 +90,8 @@ void streamingFunctionCallTest() {
 
 			var promptOptions = MiniMaxChatOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("CurrentWeatherService", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/MiniMaxFunctionCallbackIT.java
Patch:
@@ -111,8 +111,8 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("WeatherInfo", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java
Patch:
@@ -65,9 +65,9 @@ void functionCallTest() {
 
 				var promptOptions = MistralAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get payment status of a transaction")
 						.function("retrievePaymentStatus",
 								(Transaction transaction) -> new Status(DATA.get(transaction).status()))
+						.description("Get payment status of a transaction")
 						.inputType(Transaction.class)
 						.build()))
 					.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java
Patch:
@@ -74,8 +74,8 @@ void promptFunctionCall() {
 				var promptOptions = MistralAiChatOptions.builder()
 					.withToolChoice(ToolChoice.AUTO)
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the current weather in requested location")
 						.function("CurrentWeatherService", new MyWeatherService())
+						.description("Get the current weather in requested location")
 						.inputType(MyWeatherService.Request.class)
 						.build()))
 					.build();
@@ -100,8 +100,8 @@ void functionCallWithPortableFunctionCallingOptions() {
 
 				PortableFunctionCallingOptions functionOptions = FunctionCallingOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the current weather in requested location")
 						.function("CurrentWeatherService", new MyWeatherService())
+						.description("Get the current weather in requested location")
 						.inputType(MyWeatherService.Request.class)
 						.build()))
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -65,8 +65,8 @@ void functionCallTest() {
 
 			var promptOptions = MoonshotChatOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("CurrentWeatherService", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();
@@ -91,8 +91,8 @@ void streamingFunctionCallTest() {
 
 			var promptOptions = MoonshotChatOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("CurrentWeatherService", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/moonshot/tool/MoonshotFunctionCallbackIT.java
Patch:
@@ -114,8 +114,8 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("WeatherInfo", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -72,9 +72,9 @@ void functionCallTest() {
 
 			var promptOptions = OllamaOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.function("CurrentWeatherService", new MockWeatherService())
 					.description(
 							"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")
-					.function("CurrentWeatherService", new MockWeatherService())
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();
@@ -99,9 +99,9 @@ void streamingFunctionCallTest() {
 
 			var promptOptions = OllamaOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
+					.function("CurrentWeatherService", new MockWeatherService())
 					.description(
 							"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")
-					.function("CurrentWeatherService", new MockWeatherService())
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/tool/OllamaFunctionCallbackIT.java
Patch:
@@ -140,9 +140,9 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
+				.function("WeatherInfo", new MockWeatherService())
 				.description(
 						"Find the weather conditions, forecasts, and temperatures for a location, like a city or state.")
-				.function("WeatherInfo", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackInPrompt2IT.java
Patch:
@@ -61,8 +61,8 @@ void functionCallTest() {
 			String content = ChatClient.builder(chatModel).build().prompt()
 					.user("What's the weather like in San Francisco, Tokyo, and Paris?")
 					.functions(FunctionCallback.builder()
-							.description("Get the weather in location")
 							.function("CurrentWeatherService", new MockWeatherService())
+							.description("Get the weather in location")
 							.inputType(MockWeatherService.Request.class)
 							.build())
 					.call().content();
@@ -89,11 +89,11 @@ record LightInfo(String roomName, boolean isOn) {
 			String content = ChatClient.builder(chatModel).build().prompt()
 					.user("Turn the light on in the kitchen and in the living room!")
 					.functions(FunctionCallback.builder()
-						.description("Turn light on or off in a room")
 						.function("turnLight", (LightInfo lightInfo) -> {
 							logger.info("Turning light to [" + lightInfo.isOn + "] in " + lightInfo.roomName());
 							state.put(lightInfo.roomName(), lightInfo.isOn());
 						})
+						.description("Turn light on or off in a room")
 						.inputType(LightInfo.class)
 						.build())
 					.call().content();
@@ -115,8 +115,8 @@ void functionCallTest2() {
 			String content = ChatClient.builder(chatModel).build().prompt()
 					.user("What's the weather like in Amsterdam?")
 					.functions(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function("CurrentWeatherService", input -> "18 degrees Celsius")
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 					.build())
 					.call().content();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -63,8 +63,8 @@ void functionCallTest() {
 
 				var promptOptions = OpenAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function("CurrentWeatherService", new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build();
@@ -92,8 +92,8 @@ void streamingFunctionCallTest() {
 
 				var promptOptions = OpenAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
-						.description("Get the weather in location")
 						.function("CurrentWeatherService", new MockWeatherService())
+						.description("Get the weather in location")
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/OpenAiFunctionCallback2IT.java
Patch:
@@ -96,8 +96,8 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("WeatherInfo", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/OpenAiFunctionCallbackIT.java
Patch:
@@ -107,8 +107,8 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("WeatherInfo", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -80,9 +80,9 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
+				.function("WeatherInfo", new MockWeatherService())
 				.description("Get the current weather in a given location")
 				.schemaType(SchemaType.OPEN_API_SCHEMA)
-				.function("WeatherInfo", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
 				.build();
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -69,9 +69,9 @@ void functionCallTest() {
 
 				var promptOptions = VertexAiGeminiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
+						.function("CurrentWeatherService", new MockWeatherService())
 						.schemaType(SchemaType.OPEN_API_SCHEMA) // IMPORTANT!!
 						.description("Get the weather in location")
-						.function("CurrentWeatherService", new MockWeatherService())
 						.inputType(MockWeatherService.Request.class)
 						.build()))
 					.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -65,8 +65,8 @@ void functionCallTest() {
 
 			var promptOptions = ZhiPuAiChatOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("CurrentWeatherService", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					// .responseConverter(response -> "" + response.temp() +
 					// response.unit())
@@ -93,8 +93,8 @@ void streamingFunctionCallTest() {
 
 			var promptOptions = ZhiPuAiChatOptions.builder()
 				.withFunctionCallbacks(List.of(FunctionCallback.builder()
-					.description("Get the weather in location")
 					.function("CurrentWeatherService", new MockWeatherService())
+					.description("Get the weather in location")
 					.inputType(MockWeatherService.Request.class)
 					.build()))
 				.build();

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/tool/ZhipuAiFunctionCallbackIT.java
Patch:
@@ -112,8 +112,8 @@ static class Config {
 		public FunctionCallback weatherFunctionInfo() {
 
 			return FunctionCallback.builder()
-				.description("Get the weather in location")
 				.function("WeatherInfo", new MockWeatherService())
+				.description("Get the weather in location")
 				.inputType(MockWeatherService.Request.class)
 				// .responseConverter(response -> "" + response.temp() + response.unit())
 				.build();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/MessageTypeContentTests.java
Patch:
@@ -66,7 +66,7 @@ public class MessageTypeContentTests {
 	ArgumentCaptor<MultiValueMap<String, String>> headersCaptor;
 
 	Flux<ChatCompletionChunk> fluxResponse = Flux.generate(
-			() -> new ChatCompletionChunk("id", List.of(), 0l, "model", null, "fp", "object", null), (state, sink) -> {
+			() -> new ChatCompletionChunk("id", List.of(), 0L, "model", null, "fp", "object", null), (state, sink) -> {
 				sink.next(state);
 				sink.complete();
 				return state;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java
Patch:
@@ -129,7 +129,7 @@ public void openAiChatTransientError() {
 
 		var choice = new ChatCompletion.Choice(ChatCompletionFinishReason.STOP, 0,
 				new ChatCompletionMessage("Response", Role.ASSISTANT), null);
-		ChatCompletion expectedChatCompletion = new ChatCompletion("id", List.of(choice), 666l, "model", null, null,
+		ChatCompletion expectedChatCompletion = new ChatCompletion("id", List.of(choice), 666L, "model", null, null,
 				null, new OpenAiApi.Usage(10, 10, 10));
 
 		given(this.openAiApi.chatCompletionEntity(isA(ChatCompletionRequest.class), any()))
@@ -158,7 +158,7 @@ public void openAiChatStreamTransientError() {
 
 		var choice = new ChatCompletionChunk.ChunkChoice(ChatCompletionFinishReason.STOP, 0,
 				new ChatCompletionMessage("Response", Role.ASSISTANT), null);
-		ChatCompletionChunk expectedChatCompletion = new ChatCompletionChunk("id", List.of(choice), 666l, "model", null,
+		ChatCompletionChunk expectedChatCompletion = new ChatCompletionChunk("id", List.of(choice), 666L, "model", null,
 				null, null, null);
 
 		given(this.openAiApi.chatCompletionStream(isA(ChatCompletionRequest.class), any()))

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiPaymentTransactionIT.java
Patch:
@@ -36,8 +36,8 @@
 import org.springframework.ai.chat.client.advisor.api.CallAroundAdvisor;
 import org.springframework.ai.chat.client.advisor.api.CallAroundAdvisorChain;
 import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
-import org.springframework.ai.model.function.FunctionCallbackResolver;
 import org.springframework.ai.model.function.FunctionCallback.SchemaType;
+import org.springframework.ai.model.function.FunctionCallbackResolver;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-ai-core/src/main/java/org/springframework/ai/aot/SpringAiCoreRuntimeHints.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.ai.chat.messages.SystemMessage;
 import org.springframework.ai.chat.messages.ToolResponseMessage;
 import org.springframework.ai.chat.messages.UserMessage;
-import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
+import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.aot.hint.ExecutableMode;
 import org.springframework.aot.hint.RuntimeHints;

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/DefaultFunctionCallbackResolver.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.core.ResolvableType;
 import org.springframework.lang.NonNull;
-import org.springframework.lang.Nullable;
 import org.springframework.util.StringUtils;
 
 /**

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallback.java
Patch:
@@ -94,7 +94,7 @@ static FunctionCallback.Builder builder() {
 	 * Describes the type of the schema used to describe the input parameters of the
 	 * function.
 	 */
-	public enum SchemaType {
+	enum SchemaType {
 
 		/**
 		 * JSON schema

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/FilterExpressionTextParserTests.java
Patch:
@@ -194,7 +194,7 @@ public void testIdentifiers() {
 
 	@Test
 	public void testUnescapedIdentifierWithUnderscores() {
-		Expression exp = parser.parse("file_name == 'medicaid-wa-faqs.pdf'");
+		Expression exp = this.parser.parse("file_name == 'medicaid-wa-faqs.pdf'");
 		assertThat(exp).isEqualTo(new Expression(EQ, new Key("file_name"), new Value("medicaid-wa-faqs.pdf")));
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxAutoConfiguration.java
Patch:
@@ -26,9 +26,9 @@
 import org.springframework.ai.minimax.MiniMaxChatModel;
 import org.springframework.ai.minimax.MiniMaxEmbeddingModel;
 import org.springframework.ai.minimax.api.MiniMaxApi;
+import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallbackResolver;
-import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiAutoConfiguration.java
Patch:
@@ -25,10 +25,10 @@
 
 import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.observation.ChatModelObservationConvention;
+import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallback.SchemaType;
 import org.springframework.ai.model.function.FunctionCallbackResolver;
-import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.boot.autoconfigure.AutoConfiguration;

File: vector-stores/spring-ai-qdrant-store/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -200,9 +200,9 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 	}
 
 	/**
-	 * Extracts metadata from a Protobuf Struct.
-	 * @param metadataStruct The Protobuf Struct containing metadata.
-	 * @return The metadata as a map.
+	 * Returns {@link Document} using the {@link ScoredPoint}
+	 * @param point ScoredPoint containing the query response.
+	 * @return the {@link Document} representing the response.
 	 */
 	private Document toDocument(ScoredPoint point) {
 		try {

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -43,6 +43,7 @@
  * https://platform.openai.com/docs/guides/function-calling/parallel-function-calling
  *
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
 public class OpenAiApiToolFunctionCallIT {
@@ -95,7 +96,7 @@ public void toolFunctionCall() {
 									},
 									"required": ["location", "lat", "lon", "unit"]
 								}
-								""")));
+								"""), null));
 
 		List<ChatCompletionMessage> messages = new ArrayList<>(List.of(message));
 
@@ -128,7 +129,7 @@ public void toolFunctionCall() {
 
 				// extend conversation with function response.
 				messages.add(new ChatCompletionMessage("" + weatherResponse.temp() + weatherRequest.unit(), Role.TOOL,
-						functionName, toolCall.id(), null, null));
+						functionName, toolCall.id(), null, null, null));
 			}
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfiguration.java
Patch:
@@ -74,7 +74,7 @@ public AnthropicApi anthropicApi(AnthropicConnectionProperties connectionPropert
 	@Bean
 	@ConditionalOnMissingBean
 	public AnthropicChatModel anthropicChatModel(AnthropicApi anthropicApi, AnthropicChatProperties chatProperties,
-			RetryTemplate retryTemplate, DefaultFunctionCallbackResolver functionCallbackResolver,
+			RetryTemplate retryTemplate, FunctionCallbackResolver functionCallbackResolver,
 			List<FunctionCallback> toolFunctionCallbacks, ObjectProvider<ObservationRegistry> observationRegistry,
 			ObjectProvider<ChatModelObservationConvention> observationConvention) {
 

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelObservationIT.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.ai.chat.observation.ChatModelObservationDocumentation.LowCardinalityKeyNames;
 import org.springframework.ai.chat.observation.DefaultChatModelObservationConvention;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.function.FunctionCallbackContext;
+import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.observation.conventions.AiOperationType;
 import org.springframework.ai.observation.conventions.AiProvider;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -170,7 +170,8 @@ public AnthropicApi anthropicApi() {
 		public AnthropicChatModel anthropicChatModel(AnthropicApi anthropicApi,
 				TestObservationRegistry observationRegistry) {
 			return new AnthropicChatModel(anthropicApi, AnthropicChatOptions.builder().build(),
-					RetryTemplate.defaultInstance(), new FunctionCallbackContext(), List.of(), observationRegistry);
+					RetryTemplate.defaultInstance(), new DefaultFunctionCallbackResolver(), List.of(),
+					observationRegistry);
 		}
 
 	}

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelTests.java
Patch:
@@ -25,7 +25,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 
 import org.springframework.ai.model.function.FunctionCallback;
-import org.springframework.ai.model.function.FunctionCallbackContext;
+import org.springframework.ai.model.function.FunctionCallbackResolver;
 
 /**
  * @author Jihoon Kim
@@ -37,7 +37,7 @@ public class AzureOpenAiChatModelTests {
 	OpenAIClientBuilder mockClient;
 
 	@Mock
-	FunctionCallbackContext functionCallbackContext;
+	FunctionCallbackResolver functionCallbackResolver;
 
 	@Test
 	public void createAzureOpenAiChatModelTest() {
@@ -51,7 +51,7 @@ public void createAzureOpenAiChatModelTest() {
 		List<FunctionCallback> functionCallbacks = List.of(new TestFunctionCallback(callbackFromConstructorParam));
 
 		AzureOpenAiChatModel openAiChatModel = new AzureOpenAiChatModel(this.mockClient, chatOptions,
-				this.functionCallbackContext, functionCallbacks);
+				this.functionCallbackResolver, functionCallbacks);
 
 		assert 2 == openAiChatModel.getFunctionCallbackRegister().size();
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelObservationIT.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.ai.chat.observation.DefaultChatModelObservationConvention;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.mistralai.api.MistralAiApi;
-import org.springframework.ai.model.function.FunctionCallbackContext;
+import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.observation.conventions.AiOperationType;
 import org.springframework.ai.observation.conventions.AiProvider;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -181,7 +181,8 @@ public MistralAiApi mistralAiApi() {
 		public MistralAiChatModel openAiChatModel(MistralAiApi mistralAiApi,
 				TestObservationRegistry observationRegistry) {
 			return new MistralAiChatModel(mistralAiApi, MistralAiChatOptions.builder().build(),
-					new FunctionCallbackContext(), List.of(), RetryTemplate.defaultInstance(), observationRegistry);
+					new DefaultFunctionCallbackResolver(), List.of(), RetryTemplate.defaultInstance(),
+					observationRegistry);
 		}
 
 	}

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/chat/MoonshotChatModelObservationIT.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.observation.DefaultChatModelObservationConvention;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.function.FunctionCallbackContext;
+import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.moonshot.MoonshotChatModel;
 import org.springframework.ai.moonshot.MoonshotChatOptions;
 import org.springframework.ai.moonshot.api.MoonshotApi;
@@ -173,7 +173,8 @@ public MoonshotApi moonshotApi() {
 		public MoonshotChatModel moonshotChatModel(MoonshotApi moonshotApi,
 				TestObservationRegistry observationRegistry) {
 			return new MoonshotChatModel(moonshotApi, MoonshotChatOptions.builder().build(),
-					new FunctionCallbackContext(), List.of(), RetryTemplate.defaultInstance(), observationRegistry);
+					new DefaultFunctionCallbackResolver(), List.of(), RetryTemplate.defaultInstance(),
+					observationRegistry);
 		}
 
 	}

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/TestVertexAiGeminiChatModel.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.cloud.vertexai.generativeai.GenerativeModel;
 
 import org.springframework.ai.model.function.FunctionCallback;
-import org.springframework.ai.model.function.FunctionCallbackContext;
+import org.springframework.ai.model.function.FunctionCallbackResolver;
 import org.springframework.retry.support.RetryTemplate;
 
 /**
@@ -35,9 +35,9 @@ public class TestVertexAiGeminiChatModel extends VertexAiGeminiChatModel {
 	private GenerativeModel mockGenerativeModel;
 
 	public TestVertexAiGeminiChatModel(VertexAI vertexAI, VertexAiGeminiChatOptions options,
-			FunctionCallbackContext functionCallbackContext, List<FunctionCallback> toolFunctionCallbacks,
+			FunctionCallbackResolver functionCallbackResolver, List<FunctionCallback> toolFunctionCallbacks,
 			RetryTemplate retryTemplate) {
-		super(vertexAI, options, functionCallbackContext, toolFunctionCallbacks, retryTemplate);
+		super(vertexAI, options, functionCallbackResolver, toolFunctionCallbacks, retryTemplate);
 	}
 
 	@Override

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiChatModelFunctionCallingIT.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallback;
-import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
+import org.springframework.ai.model.function.FunctionCallback.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-ai-core/src/main/java/org/springframework/ai/aot/SpringAiCoreRuntimeHints.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.ai.chat.messages.ToolResponseMessage;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.model.function.FunctionCallback;
-import org.springframework.ai.model.function.FunctionCallbackContext;
+import org.springframework.ai.model.function.DefaultFunctionCallbackResolver;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.aot.hint.ExecutableMode;
 import org.springframework.aot.hint.RuntimeHints;
@@ -43,7 +43,7 @@ public class SpringAiCoreRuntimeHints implements RuntimeHintsRegistrar {
 	public void registerHints(@NonNull RuntimeHints hints, @Nullable ClassLoader classLoader) {
 
 		var chatTypes = Set.of(AbstractMessage.class, AssistantMessage.class, ToolResponseMessage.class, Message.class,
-				MessageType.class, UserMessage.class, SystemMessage.class, FunctionCallbackContext.class,
+				MessageType.class, UserMessage.class, SystemMessage.class, DefaultFunctionCallbackResolver.class,
 				FunctionCallback.class, FunctionCallbackWrapper.class);
 		for (var c : chatTypes) {
 			hints.reflection().registerType(c);

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/DefaultFunctionCallbackBuilder.java
Patch:
@@ -36,7 +36,7 @@
 import org.springframework.ai.model.function.FunctionCallback.Builder;
 import org.springframework.ai.model.function.FunctionCallback.FunctionInvokingSpec;
 import org.springframework.ai.model.function.FunctionCallback.MethodInvokingSpec;
-import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
+import org.springframework.ai.model.function.FunctionCallback.SchemaType;
 import org.springframework.ai.util.JacksonUtils;
 import org.springframework.ai.util.ParsingUtils;
 import org.springframework.core.ParameterizedTypeReference;

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallbackWrapper.java
Patch:
@@ -27,7 +27,6 @@
 
 import org.springframework.ai.chat.model.ToolContext;
 import org.springframework.ai.model.ModelOptionsUtils;
-import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
 import org.springframework.ai.util.JacksonUtils;
 import org.springframework.util.Assert;
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingHelper.java
Patch:
@@ -48,9 +48,9 @@ public FunctionCallingHelper() {
 		this(null, PortableFunctionCallingOptions.builder().build(), List.of());
 	}
 
-	public FunctionCallingHelper(FunctionCallbackContext functionCallbackContext,
+	public FunctionCallingHelper(FunctionCallbackResolver functionCallbackResolver,
 			FunctionCallingOptions functionCallingOptions, List<FunctionCallback> toolFunctionCallbacks) {
-		super(functionCallbackContext, functionCallingOptions, toolFunctionCallbacks);
+		super(functionCallbackResolver, functionCallingOptions, toolFunctionCallbacks);
 	}
 
 	@Override

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallback;
-import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
+import org.springframework.ai.model.function.FunctionCallback.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallback;
-import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
+import org.springframework.ai.model.function.FunctionCallback.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/api/ZhiPuAiApi.java
Patch:
@@ -329,11 +329,11 @@ public static class FunctionTool {
 
 		// The type of the tool. Currently, only 'function' is supported.
 		@JsonProperty("type")
-		private Function function;
+		private Type type = Type.FUNCTION;
 
 		//	The function definition.
 		@JsonProperty("function")
-		private Type type = Type.FUNCTION;
+		private Function function;
 
 		public FunctionTool() {
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiAudioTranscriptionModelIT.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.azure.ai.openai.OpenAIClient;
 import com.azure.ai.openai.OpenAIClientBuilder;
-import com.azure.ai.openai.OpenAIServiceVersion;
 import com.azure.core.credential.AzureKeyCredential;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;

File: models/spring-ai-bedrock-converse/src/main/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModel.java
Patch:
@@ -529,7 +529,6 @@ private Flux<ChatResponse> internalStream(Prompt prompt, ChatResponse perviousCh
 			Flux<ChatResponse> chatResponseFlux = chatResponses.switchMap(chatResponse -> {
 				if (!this.isProxyToolCalls(prompt, this.defaultOptions) && chatResponse != null
 						&& this.isToolCall(chatResponse, Set.of(StopReason.TOOL_USE.toString()))) {
-					
 					var toolCallConversation = this.handleToolCalls(prompt, chatResponse);
 					return this.internalStream(new Prompt(toolCallConversation, prompt.getOptions()), chatResponse);
 				}

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingModelIT.java
Patch:
@@ -97,9 +97,9 @@ void verifyExactTruncationLength() {
 		ArgumentCaptor<CohereEmbeddingBedrockApi.CohereEmbeddingRequest> requestCaptor = ArgumentCaptor
 			.forClass(CohereEmbeddingBedrockApi.CohereEmbeddingRequest.class);
 
-		EmbeddingResponse embeddingResponse = embeddingModel.embedForResponse(List.of(longText));
+		EmbeddingResponse embeddingResponse = this.embeddingModel.embedForResponse(List.of(longText));
 
-		verify(embeddingApi).embedding(requestCaptor.capture());
+		verify(this.embeddingApi).embedding(requestCaptor.capture());
 		CohereEmbeddingBedrockApi.CohereEmbeddingRequest capturedRequest = requestCaptor.getValue();
 
 		assertThat(capturedRequest.texts()).hasSize(1);
@@ -124,7 +124,7 @@ void truncatesLongTextFromStart() {
 		EmbeddingResponse embeddingResponse = this.embeddingModelStartTruncate.embedForResponse(List.of(longText));
 
 		// Verify truncation behavior
-		verify(embeddingApi).embedding(requestCaptor.capture());
+		verify(this.embeddingApi).embedding(requestCaptor.capture());
 		String truncatedText = requestCaptor.getValue().texts().get(0);
 		assertThat(truncatedText.length()).isLessThanOrEqualTo(2048);
 		assertThat(truncatedText).doesNotContain(startMarker);

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/RetrievalAugmentationAdvisorTests.java
Patch:
@@ -16,8 +16,11 @@
 
 package org.springframework.ai.chat.client.advisor;
 
+import java.util.List;
+
 import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentCaptor;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.model.ChatModel;
@@ -29,8 +32,6 @@
 import org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;
 import org.springframework.ai.rag.retrieval.search.DocumentRetriever;
 
-import java.util.List;
-
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.BDDMockito.given;

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatModel.java
Patch:
@@ -293,14 +293,14 @@ private ChatResponse toChatResponse(ChatCompletionResponse chatCompletion) {
 			.stream()
 			.filter(content -> content.type() != ContentBlock.Type.TOOL_USE)
 			.map(content -> new Generation(new AssistantMessage(content.text(), Map.of()),
-					ChatGenerationMetadata.from(chatCompletion.stopReason(), null)))
+					ChatGenerationMetadata.builder().finishReason(chatCompletion.stopReason()).build()))
 			.toList();
 
 		List<Generation> allGenerations = new ArrayList<>(generations);
 
 		if (chatCompletion.stopReason() != null && generations.isEmpty()) {
 			Generation generation = new Generation(new AssistantMessage(null, Map.of()),
-					ChatGenerationMetadata.from(chatCompletion.stopReason(), null));
+					ChatGenerationMetadata.builder().finishReason(chatCompletion.stopReason()).build());
 			allGenerations.add(generation);
 		}
 
@@ -324,7 +324,7 @@ private ChatResponse toChatResponse(ChatCompletionResponse chatCompletion) {
 
 			AssistantMessage assistantMessage = new AssistantMessage("", Map.of(), toolCalls);
 			Generation toolCallGeneration = new Generation(assistantMessage,
-					ChatGenerationMetadata.from(chatCompletion.stopReason(), null));
+					ChatGenerationMetadata.builder().finishReason(chatCompletion.stopReason()).build());
 			allGenerations.add(toolCallGeneration);
 		}
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatModelMetadataTests.java
Patch:
@@ -128,7 +128,7 @@ private void assertChoiceMetadata(Generation generation) {
 
 		assertThat(chatGenerationMetadata).isNotNull();
 		assertThat(chatGenerationMetadata.getFinishReason()).isEqualTo("stop");
-		assertContentFilterResults(chatGenerationMetadata.getContentFilterMetadata());
+		assertContentFilterResults(chatGenerationMetadata.get("contentFilterResults"));
 	}
 
 	private void assertContentFilterResultsForPrompt(ContentFilterResultDetailsForPrompt contentFilterResultForPrompt,

File: models/spring-ai-bedrock-converse/src/main/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModel.java
Patch:
@@ -419,14 +419,14 @@ private ChatResponse toChatResponse(ConverseResponse response, ChatResponse perv
 			.stream()
 			.filter(content -> content.type() != ContentBlock.Type.TOOL_USE)
 			.map(content -> new Generation(new AssistantMessage(content.text(), Map.of()),
-					ChatGenerationMetadata.from(response.stopReasonAsString(), null)))
+					ChatGenerationMetadata.builder().finishReason(response.stopReasonAsString()).build()))
 			.toList();
 
 		List<Generation> allGenerations = new ArrayList<>(generations);
 
 		if (response.stopReasonAsString() != null && generations.isEmpty()) {
 			Generation generation = new Generation(new AssistantMessage(null, Map.of()),
-					ChatGenerationMetadata.from(response.stopReasonAsString(), null));
+					ChatGenerationMetadata.builder().finishReason(response.stopReasonAsString()).build());
 			allGenerations.add(generation);
 		}
 
@@ -451,7 +451,7 @@ private ChatResponse toChatResponse(ConverseResponse response, ChatResponse perv
 
 			AssistantMessage assistantMessage = new AssistantMessage("", Map.of(), toolCalls);
 			Generation toolCallGeneration = new Generation(assistantMessage,
-					ChatGenerationMetadata.from(response.stopReasonAsString(), null));
+					ChatGenerationMetadata.builder().finishReason(response.stopReasonAsString()).build());
 			allGenerations.add(toolCallGeneration);
 		}
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatModel.java
Patch:
@@ -78,8 +78,8 @@ public Flux<ChatResponse> stream(Prompt prompt) {
 			if (g.isFinished()) {
 				String finishReason = g.finishReason().name();
 				Usage usage = BedrockUsage.from(g.amazonBedrockInvocationMetrics());
-				return new ChatResponse(List
-					.of(new Generation(new AssistantMessage(""), ChatGenerationMetadata.from(finishReason, usage))));
+				return new ChatResponse(List.of(new Generation(new AssistantMessage(""),
+						ChatGenerationMetadata.builder().finishReason(finishReason).metadata("usage", usage).build())));
 			}
 			return new ChatResponse(List.of(new Generation(new AssistantMessage(g.text()))));
 		});

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModel.java
Patch:
@@ -70,7 +70,7 @@ public ChatResponse call(Prompt prompt) {
 		return new ChatResponse(response.completions()
 			.stream()
 			.map(completion -> new Generation(new AssistantMessage(completion.data().text()),
-					ChatGenerationMetadata.from(completion.finishReason().reason(), null)))
+					ChatGenerationMetadata.builder().finishReason(completion.finishReason().reason()).build()))
 			.toList());
 	}
 

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/MiniMaxChatModel.java
Patch:
@@ -203,7 +203,7 @@ private static Generation buildGeneration(Choice choice, Map<String, Object> met
 					});
 		var assistantMessage = new AssistantMessage(choice.message().content(), metadata, toolCalls);
 		String finishReason = (choice.finishReason() != null ? choice.finishReason().name() : "");
-		var generationMetadata = ChatGenerationMetadata.from(finishReason, null);
+		var generationMetadata = ChatGenerationMetadata.builder().finishReason(finishReason).build();
 		return new Generation(assistantMessage, generationMetadata);
 	}
 
@@ -408,7 +408,7 @@ private Generation buildGeneration(ChatCompletionMessage message, ChatCompletion
 
 		var assistantMessage = new AssistantMessage(message.content(), metadata, toolCalls);
 		String finishReason = (completionFinishReason != null ? completionFinishReason.name() : "");
-		var generationMetadata = ChatGenerationMetadata.from(finishReason, null);
+		var generationMetadata = ChatGenerationMetadata.builder().finishReason(finishReason).build();
 		return new Generation(assistantMessage, generationMetadata);
 	}
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatModel.java
Patch:
@@ -304,7 +304,7 @@ private Generation buildGeneration(Choice choice, Map<String, Object> metadata)
 
 		var assistantMessage = new AssistantMessage(choice.message().content(), metadata, toolCalls);
 		String finishReason = (choice.finishReason() != null ? choice.finishReason().name() : "");
-		var generationMetadata = ChatGenerationMetadata.from(finishReason, null);
+		var generationMetadata = ChatGenerationMetadata.builder().finishReason(finishReason).build();
 		return new Generation(assistantMessage, generationMetadata);
 	}
 

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/MoonshotChatModel.java
Patch:
@@ -173,7 +173,7 @@ private static Generation buildGeneration(Choice choice, Map<String, Object> met
 
 		var assistantMessage = new AssistantMessage(choice.message().content(), metadata, toolCalls);
 		String finishReason = (choice.finishReason() != null ? choice.finishReason().name() : "");
-		var generationMetadata = ChatGenerationMetadata.from(finishReason, null);
+		var generationMetadata = ChatGenerationMetadata.builder().finishReason(finishReason).build();
 		return new Generation(assistantMessage, generationMetadata);
 	}
 

File: models/spring-ai-oci-genai/src/main/java/org/springframework/ai/oci/cohere/OCICohereChatModel.java
Patch:
@@ -181,7 +181,9 @@ private List<Generation> toGenerations(com.oracle.bmc.generativeaiinference.resp
 		BaseChatResponse cr = ociChatResponse.getChatResult().getChatResponse();
 		if (cr instanceof CohereChatResponse resp) {
 			List<Generation> generations = new ArrayList<>();
-			ChatGenerationMetadata metadata = ChatGenerationMetadata.from(resp.getFinishReason().getValue(), null);
+			ChatGenerationMetadata metadata = ChatGenerationMetadata.builder()
+				.finishReason(resp.getFinishReason().getValue())
+				.build();
 			AssistantMessage message = new AssistantMessage(resp.getText(), Map.of());
 			generations.add(new Generation(message, metadata));
 			return generations;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatModel.java
Patch:
@@ -376,7 +376,7 @@ private Generation buildGeneration(Choice choice, Map<String, Object> metadata)
 
 		var assistantMessage = new AssistantMessage(choice.message().content(), metadata, toolCalls);
 		String finishReason = (choice.finishReason() != null ? choice.finishReason().name() : "");
-		var generationMetadata = ChatGenerationMetadata.from(finishReason, null);
+		var generationMetadata = ChatGenerationMetadata.builder().finishReason(finishReason).build();
 		return new Generation(assistantMessage, generationMetadata);
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelWithChatResponseMetadataTests.java
Patch:
@@ -119,7 +119,7 @@ void aiResponseContainsAiMetadata() {
 			ChatGenerationMetadata chatGenerationMetadata = generation.getMetadata();
 			assertThat(chatGenerationMetadata).isNotNull();
 			assertThat(chatGenerationMetadata.getFinishReason()).isEqualTo("STOP");
-			assertThat(chatGenerationMetadata.<Object>getContentFilterMetadata()).isNull();
+			assertThat(chatGenerationMetadata.getContentFilters()).isEmpty();
 		});
 	}
 

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -390,7 +390,9 @@ protected List<Generation> responseCandidateToGeneration(Candidate candidate) {
 		Map<String, Object> messageMetadata = Map.of("candidateIndex", candidateIndex, "finishReason",
 				candidateFinishReason);
 
-		ChatGenerationMetadata chatGenerationMetadata = ChatGenerationMetadata.from(candidateFinishReason.name(), null);
+		ChatGenerationMetadata chatGenerationMetadata = ChatGenerationMetadata.builder()
+			.finishReason(candidateFinishReason.name())
+			.build();
 
 		boolean isFunctionCall = candidate.getContent().getPartsList().stream().allMatch(Part::hasFunctionCall);
 

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiChatModel.java
Patch:
@@ -188,7 +188,7 @@ private static Generation buildGeneration(Choice choice, Map<String, Object> met
 
 		var assistantMessage = new AssistantMessage(choice.message().content(), metadata, toolCalls);
 		String finishReason = (choice.finishReason() != null ? choice.finishReason().name() : "");
-		var generationMetadata = ChatGenerationMetadata.from(finishReason, null);
+		var generationMetadata = ChatGenerationMetadata.builder().finishReason(finishReason).build();
 		return new Generation(assistantMessage, generationMetadata);
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/DefaultChatModelObservationConventionTests.java
Patch:
@@ -111,7 +111,7 @@ void shouldHaveKeyValuesWhenDefinedAndResponse() {
 			.build();
 		observationContext.setResponse(new ChatResponse(
 				List.of(new Generation(new AssistantMessage("response"),
-						ChatGenerationMetadata.from("this-is-the-end", null))),
+						ChatGenerationMetadata.builder().finishReason("this-is-the-end").build())),
 				ChatResponseMetadata.builder()
 					.withId("say33")
 					.withModel("mistral-42")
@@ -168,7 +168,8 @@ void shouldNotHaveKeyValuesWhenEmptyValues() {
 			.requestOptions(ChatOptionsBuilder.builder().withStopSequences(List.of()).build())
 			.build();
 		observationContext.setResponse(new ChatResponse(
-				List.of(new Generation(new AssistantMessage("response"), ChatGenerationMetadata.from("", null))),
+				List.of(new Generation(new AssistantMessage("response"),
+						ChatGenerationMetadata.builder().finishReason("").build())),
 				ChatResponseMetadata.builder().withId("").build()));
 		assertThat(this.observationConvention.getHighCardinalityKeyValues(observationContext)
 			.stream()

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModelIT.java
Patch:
@@ -258,8 +258,6 @@ void multiModalityPdfTest() throws IOException {
 
 		var response = this.chatModel.call(new Prompt(List.of(userMessage)));
 
-		System.out.println(response.getResult().getOutput().getContent());
-
 		assertThat(response.getResult().getOutput().getContent()).containsAnyOf("Spring AI", "portable API");
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -55,7 +55,7 @@
 public class ChromaVectorStoreAutoConfigurationIT {
 
 	@Container
-	static ChromaDBContainer chroma = new ChromaDBContainer("ghcr.io/chroma-core/chroma:0.5.0");
+	static ChromaDBContainer chroma = new ChromaDBContainer("ghcr.io/chroma-core/chroma:0.5.20");
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withConfiguration(AutoConfigurations.of(ChromaVectorStoreAutoConfiguration.class))

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaImage.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class ChromaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ghcr.io/chroma-core/chroma:0.5.11");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ghcr.io/chroma-core/chroma:0.5.20");
 
 	private ChromaImage() {
 

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/ChromaImage.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class ChromaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ghcr.io/chroma-core/chroma:0.5.16");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ghcr.io/chroma-core/chroma:0.5.20");
 
 	private ChromaImage() {
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseChatClientIT.java
Patch:
@@ -49,7 +49,6 @@
 import org.springframework.util.MimeTypeUtils;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.ArgumentMatchers.matches;
 
 @SpringBootTest(classes = BedrockConverseTestConfiguration.class)
 @EnabledIfEnvironmentVariable(named = "AWS_ACCESS_KEY_ID", matches = ".*")

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/experiments/BedrockConverseChatModelMain.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.bedrock.converse.experiements;
+package org.springframework.ai.bedrock.converse.experiments;
 
 import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
 import software.amazon.awssdk.regions.Region;

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/experiments/BedrockConverseChatModelMain2.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.bedrock.converse.experiements;
+package org.springframework.ai.bedrock.converse.experiments;
 
 import java.util.List;
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptionsBuilder.java
Patch:
@@ -51,9 +51,9 @@ public FunctionCallingOptionsBuilder withFunctionCallbacks(List<FunctionCallback
 		return this;
 	}
 
-	public FunctionCallingOptionsBuilder withFunctionCallback(FunctionCallback functionCallback) {
-		Assert.notNull(functionCallback, "FunctionCallback must not be null");
-		this.options.getFunctionCallbacks().add(functionCallback);
+	public FunctionCallingOptionsBuilder withFunctionCallbacks(FunctionCallback... functionCallbacks) {
+		Assert.notNull(functionCallbacks, "FunctionCallbacks must not be null");
+		this.options.setFunctionCallbacks(List.of(functionCallbacks));
 		return this;
 	}
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/experiements/BedrockConverseChatModelMain2.java
Patch:
@@ -69,6 +69,8 @@ public static void main(String[] args) {
 		Flux<ConverseStreamOutput> responses = chatModel.converseStream(streamRequest);
 		List<ConverseStreamOutput> responseList = responses.collectList().block();
 		System.out.println(responseList);
+		System.out.println("Response count: " + responseList.size());
+		responseList.forEach(System.out::println);
 	}
 
 }

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/api/AnthropicApi.java
Patch:
@@ -261,7 +261,8 @@ public enum ChatModel implements ChatModelDescription {
 		/**
 		 * The CLAUDE_INSTANT_1_2
 		 */
-		@Deprecated CLAUDE_INSTANT_1_2("claude-instant-1.2");
+		@Deprecated
+		CLAUDE_INSTANT_1_2("claude-instant-1.2");
 		// @formatter:on
 
 		private final String value;

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModelObservationIT.java
Patch:
@@ -24,7 +24,6 @@
 import io.micrometer.observation.tck.TestObservationRegistry;
 import io.micrometer.observation.tck.TestObservationRegistryAssert;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.embedding.EmbeddingRequest;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreAutoConfiguration.java
Patch:
@@ -30,7 +30,6 @@
 import org.opensearch.client.transport.aws.AwsSdk2Transport;
 import org.opensearch.client.transport.aws.AwsSdk2TransportOptions;
 import org.opensearch.client.transport.httpclient5.ApacheHttpClient5TransportBuilder;
-import org.springframework.util.StringUtils;
 import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
 import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
@@ -51,6 +50,7 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.util.StringUtils;
 
 @AutoConfiguration
 @ConditionalOnClass({ OpenSearchVectorStore.class, EmbeddingModel.class, OpenSearchClient.class })
@@ -188,7 +188,7 @@ static class PropertiesAwsOpenSearchConnectionDetails implements AwsOpenSearchCo
 
 		private final OpenSearchVectorStoreProperties.Aws aws;
 
-		public PropertiesAwsOpenSearchConnectionDetails(OpenSearchVectorStoreProperties properties) {
+		PropertiesAwsOpenSearchConnectionDetails(OpenSearchVectorStoreProperties properties) {
 			this.aws = properties.getAws();
 		}
 

File: spring-ai-spring-boot-docker-compose/src/test/java/org/springframework/ai/docker/compose/service/connection/opensearch/AwsOpenSearchDockerComposeConnectionDetailsFactoryTests.java
Patch:
@@ -17,9 +17,10 @@
 package org.springframework.ai.docker.compose.service.connection.opensearch;
 
 import org.junit.jupiter.api.Test;
+import org.testcontainers.utility.DockerImageName;
+
 import org.springframework.ai.autoconfigure.vectorstore.opensearch.AwsOpenSearchConnectionDetails;
 import org.springframework.boot.docker.compose.service.connection.test.AbstractDockerComposeIntegrationTests;
-import org.testcontainers.utility.DockerImageName;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: spring-ai-spring-boot-testcontainers/src/main/java/org/springframework/ai/testcontainers/service/connection/opensearch/AwsOpenSearchContainerConnectionDetailsFactory.java
Patch:
@@ -16,10 +16,11 @@
 
 package org.springframework.ai.testcontainers.service.connection.opensearch;
 
+import org.testcontainers.containers.localstack.LocalStackContainer;
+
 import org.springframework.ai.autoconfigure.vectorstore.opensearch.AwsOpenSearchConnectionDetails;
 import org.springframework.boot.testcontainers.service.connection.ContainerConnectionDetailsFactory;
 import org.springframework.boot.testcontainers.service.connection.ContainerConnectionSource;
-import org.testcontainers.containers.localstack.LocalStackContainer;
 
 /**
  * @author Eddú Meléndez

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatOptions.java
Patch:
@@ -32,7 +32,6 @@
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallingOptions;
-import org.springframework.boot.context.properties.NestedConfigurationProperty;
 import org.springframework.util.Assert;
 
 /**
@@ -61,7 +60,6 @@ public class AnthropicChatOptions implements ChatOptions, FunctionCallingOptions
 	 * disabled by default. Use the enableFunctions to set the functions from the registry
 	 * to be used by the ChatModel chat completion requests.
 	 */
-	@NestedConfigurationProperty
 	@JsonIgnore
 	private List<FunctionCallback> functionCallbacks = new ArrayList<>();
 
@@ -76,7 +74,6 @@ public class AnthropicChatOptions implements ChatOptions, FunctionCallingOptions
 	 * functions is set in a prompt options, then the enabled functions are only active
 	 * for the duration of this prompt execution.
 	 */
-	@NestedConfigurationProperty
 	@JsonIgnore
 	private Set<String> functions = new HashSet<>();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreAutoConfiguration.java
Patch:
@@ -77,7 +77,7 @@ OpenSearchVectorStore vectorStore(OpenSearchVectorStoreProperties properties, Op
 			BatchingStrategy batchingStrategy) {
 		var indexName = Optional.ofNullable(properties.getIndexName()).orElse(OpenSearchVectorStore.DEFAULT_INDEX_NAME);
 		var mappingJson = Optional.ofNullable(properties.getMappingJson())
-			.orElse(OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION_1536);
+			.orElse(OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION);
 		return new OpenSearchVectorStore(indexName, openSearchClient, embeddingModel, mappingJson,
 				properties.isInitializeSchema(), observationRegistry.getIfUnique(() -> ObservationRegistry.NOOP),
 				customObservationConvention.getIfAvailable(() -> null), batchingStrategy);

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/OpenSearchVectorStoreIT.java
Patch:
@@ -411,7 +411,7 @@ public OpenSearchVectorStore anotherVectorStore(EmbeddingModel embeddingModel) {
 						new OpenSearchClient(ApacheHttpClient5TransportBuilder
 							.builder(HttpHost.create(opensearchContainer.getHttpHostAddress()))
 							.build()),
-						embeddingModel, OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION_1536,
+						embeddingModel, OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION,
 						true);
 			}
 			catch (URISyntaxException e) {

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/OpenSearchVectorStoreObservationIT.java
Patch:
@@ -209,8 +209,8 @@ public OpenSearchVectorStore vectorStore(EmbeddingModel embeddingModel,
 						new OpenSearchClient(ApacheHttpClient5TransportBuilder
 							.builder(HttpHost.create(opensearchContainer.getHttpHostAddress()))
 							.build()),
-						embeddingModel, OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION_1536,
-						true, observationRegistry, null, new TokenCountBatchingStrategy());
+						embeddingModel, OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION, true,
+						observationRegistry, null, new TokenCountBatchingStrategy());
 			}
 			catch (URISyntaxException e) {
 				throw new RuntimeException(e);

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatClientIT.java
Patch:
@@ -25,7 +25,6 @@
 import com.azure.core.credential.AzureKeyCredential;
 import com.azure.core.http.policy.HttpLogOptions;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.chat.client.ChatClient;
@@ -45,8 +44,7 @@
  * @author Soby Chacko
  */
 @SpringBootTest(classes = AzureOpenAiChatClientIT.TestConfiguration.class)
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
+@RequiresAzureCredentials
 public class AzureOpenAiChatClientIT {
 
 	@Autowired

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatModelObservationIT.java
Patch:
@@ -27,7 +27,6 @@
 import io.micrometer.observation.tck.TestObservationRegistryAssert;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.chat.metadata.ChatResponseMetadata;
@@ -48,8 +47,7 @@
  * @author Soby Chacko
  */
 @SpringBootTest(classes = AzureOpenAiChatModelObservationIT.TestConfiguration.class)
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
+@RequiresAzureCredentials
 class AzureOpenAiChatModelObservationIT {
 
 	@Autowired

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModelIT.java
Patch:
@@ -22,7 +22,6 @@
 import com.azure.ai.openai.OpenAIClientBuilder;
 import com.azure.core.credential.AzureKeyCredential;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.embedding.EmbeddingResponse;
@@ -34,8 +33,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SpringBootTest
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
+@RequiresAzureCredentials
 class AzureOpenAiEmbeddingModelIT {
 
 	@Autowired

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModelObservationIT.java
Patch:
@@ -48,8 +48,7 @@
  * @author Christian Tzolov
  */
 @SpringBootTest(classes = AzureOpenAiEmbeddingModelObservationIT.Config.class)
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
+@RequiresAzureCredentials
 public class AzureOpenAiEmbeddingModelObservationIT {
 
 	@Autowired

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/function/AzureOpenAiChatModelFunctionCallIT.java
Patch:
@@ -26,13 +26,13 @@
 import com.azure.ai.openai.OpenAIClientBuilder;
 import com.azure.core.credential.AzureKeyCredential;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.azure.openai.AzureOpenAiChatModel;
 import org.springframework.ai.azure.openai.AzureOpenAiChatOptions;
+import org.springframework.ai.azure.openai.RequiresAzureCredentials;
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.messages.Message;
 import org.springframework.ai.chat.messages.UserMessage;
@@ -49,8 +49,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 @SpringBootTest(classes = AzureOpenAiChatModelFunctionCallIT.TestConfiguration.class)
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
-@EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
+@RequiresAzureCredentials
 class AzureOpenAiChatModelFunctionCallIT {
 
 	private static final Logger logger = LoggerFactory.getLogger(AzureOpenAiChatModelFunctionCallIT.class);

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/Prompt.java
Patch:
@@ -112,7 +112,7 @@ public int hashCode() {
 	}
 
 	public Prompt copy() {
-		return new Prompt(instructionsCopy(), this.chatOptions);
+		return new Prompt(instructionsCopy(), null == this.chatOptions ? null : this.chatOptions.copy());
 	}
 
 	private List<Message> instructionsCopy() {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/AbstractToolCallSupport.java
Patch:
@@ -41,6 +41,7 @@
  * @author Christian Tzolov
  * @author Grogdunn
  * @author Thomas Vitale
+ * @author Jihoon Kim
  * @since 1.0.0
  */
 public abstract class AbstractToolCallSupport {
@@ -85,7 +86,7 @@ private static List<FunctionCallback> merge(FunctionCallingOptions functionOptio
 
 		if (!CollectionUtils.isEmpty(functionOptions.getFunctionCallbacks())) {
 			toolFunctionCallbacksCopy.addAll(functionOptions.getFunctionCallbacks());
-			// Make sure that that function callbacks are are registered directly to the
+			// Make sure that that function callbacks are registered directly to the
 			// functionCallbackRegister and not passed in the default options.
 			functionOptions.setFunctionCallbacks(List.of());
 		}

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/AnthropicApiIT.java
Patch:
@@ -28,8 +28,9 @@
 import org.springframework.ai.anthropic.api.AnthropicApi.ContentBlock;
 import org.springframework.ai.anthropic.api.AnthropicApi.Role;
 import org.springframework.http.ResponseEntity;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
+
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 /**
  * @author Christian Tzolov

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/client/AnthropicChatClientMethodInvokingFunctionCallbackIT.java
Patch:
@@ -124,7 +124,7 @@ void methodGetWeatherNonStatic() {
 				.user("What's the weather like in San Francisco, Tokyo, and Paris?  Use Celsius.")
 				.functions(FunctionCallback.builder()
 					.description("Get the weather in location")
-					.method("getWeatherNonStatic",String.class, Unit.class)
+					.method("getWeatherNonStatic", String.class, Unit.class)
 					.targetObject(targetObject)
 					.build())
 				.call()
@@ -148,7 +148,7 @@ void methodGetWeatherToolContext() {
 					.description("Get the weather in location")
 					.method("getWeatherWithContext", String.class, Unit.class, ToolContext.class)
 					.targetObject(targetObject)
-					.build())				
+					.build())
 				.toolContext(Map.of("tool", "value"))
 				.call()
 				.content();

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseChatClientIT.java
Patch:
@@ -257,7 +257,7 @@ void defaultFunctionCallTest() {
 				.description("Get the weather in location")
 				.function("getCurrentWeather", new MockWeatherService())
 				.inputType(MockWeatherService.Request.class)
-				.build())			
+				.build())
 			.defaultUser(u -> u.text("What's the weather like in San Francisco, Tokyo, and Paris? Return the temperature in Celsius."))
 			.build()
 			.prompt()
@@ -280,7 +280,7 @@ void streamFunctionCallTest() {
 					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
 					.inputType(MockWeatherService.Request.class)
-					.build())				
+					.build())
 				.stream()
 				.content();
 		// @formatter:on

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApi.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * Anthropic Chat API.
- * 
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  * @author Wei Jiang

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/Anthropic3ChatOptions.java
Patch:
@@ -244,7 +244,7 @@ public Anthropic3ChatOptions copy() {
 	/**
 	 * Builder for {@link Anthropic3ChatOptions}.
 	 */
-	public static class Builder {
+	public static final class Builder {
 
 		private final Anthropic3ChatOptions options = new Anthropic3ChatOptions();
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/api/Anthropic3ChatBedrockApi.java
Patch:
@@ -248,7 +248,7 @@ public static final class Builder {
 			private Double topP;
 			private List<String> stopSequences;
 			private String anthropicVersion;
-			
+
 			private Builder(List<ChatCompletionMessage> messages) {
 				this.messages = messages;
 			}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApi.java
Patch:
@@ -249,7 +249,7 @@ public record FloatScalePenalty(@JsonProperty("scale") Float scale,
 		/**
 		 * Builder for {@link Ai21Jurassic2ChatRequest}.
 		 */
-		public static class Builder {
+		public static final class Builder {
 			private String prompt;
 			private Double temperature;
 			private Double topP;

File: models/spring-ai-huggingface/src/main/java/org/springframework/ai/huggingface/HuggingfaceChatModel.java
Patch:
@@ -24,7 +24,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import org.springframework.ai.chat.messages.AssistantMessage;
-import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java
Patch:
@@ -229,7 +229,7 @@ void functionCallTest() {
 						.description("Get the weather in location")
 						.function("getCurrentWeather", new MockWeatherService())
 						.inputType(MockWeatherService.Request.class)
-						.build())				
+						.build())
 				.call()
 				.content();
 		// @formatter:on
@@ -275,7 +275,7 @@ void streamFunctionCallTest() {
 					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
 					.inputType(MockWeatherService.Request.class)
-					.build())				
+					.build())
 				.stream()
 				.content();
 		// @formatter:on

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaApiIT.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.jupiter.api.Test;
 import reactor.core.publisher.Flux;
 
-import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.ollama.BaseOllamaIT;
 import org.springframework.ai.ollama.api.OllamaApi.ChatRequest;
 import org.springframework.ai.ollama.api.OllamaApi.ChatResponse;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientMultipleFunctionCallsIT.java
Patch:
@@ -88,7 +88,7 @@ void turnFunctionsOnAndOffTest() {
 					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
 					.inputType(MockWeatherService.Request.class)
-					.build())				
+					.build())
 				.call()
 				.content();
 		// @formatter:on
@@ -229,7 +229,7 @@ void streamFunctionCallTest() {
 					.description("Get the weather in location")
 					.function("getCurrentWeather", new MockWeatherService())
 					.inputType(MockWeatherService.Request.class)
-					.build())				
+					.build())
 				.stream()
 				.content();
 		// @formatter:on

File: models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingModel.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.springframework.ai.chat.metadata.EmptyUsage;
 import org.springframework.ai.document.Document;
-import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.embedding.AbstractEmbeddingModel;
 import org.springframework.ai.embedding.Embedding;
 import org.springframework.ai.embedding.EmbeddingOptions;

File: models/spring-ai-vertex-ai-embedding/src/main/java/org/springframework/ai/vertexai/embedding/VertexAiEmbeddingConnectionDetails.java
Patch:
@@ -168,7 +168,7 @@ public VertexAiEmbeddingConnectionDetails build() {
 			if (this.predictionServiceSettings == null) {
 				try {
 					this.predictionServiceSettings = PredictionServiceSettings.newBuilder()
-						.setEndpoint(endpoint)
+						.setEndpoint(this.endpoint)
 						.build();
 				}
 				catch (IOException e) {

File: models/spring-ai-vertex-ai-embedding/src/test/java/org/springframework/ai/vertexai/embedding/multimodal/VertexAiMultimodalEmbeddingModelIT.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.net.MalformedURLException;
 import java.net.URI;
-import java.net.URL;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/api/ZhiPuAiApi.java
Patch:
@@ -948,7 +948,7 @@ public String toString() {
 
 	/**
 	 * Creates an embedding vector representing the input text.
-	 * 
+	 *
 	 * @param <T> Type of the input.
 	 * @param input Input text to embed, encoded as a string or array of tokens.
 	 * @param model ID of the model to use.

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/AbstractChatMemoryAdvisor.java
Patch:
@@ -235,7 +235,7 @@ protected AbstractBuilder(T chatMemory) {
 
 		/**
 		 * Set the conversation id.
-		 * @param conversationId the conversation id	
+		 * @param conversationId the conversation id
 		 * @return the builder
 		 */
 		public AbstractBuilder withConversationId(String conversationId) {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/StreamAroundAdvisor.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Around advisor that runs around stream based requests.
- * 
+ *
  * @author Christian Tzolov
  * @author Dariusz Jedrzejczyk
  * @since 1.0.0

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Provides the API for chat client advisors.
  */

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/AdvisorObservationContext.java
Patch:
@@ -199,7 +199,7 @@ public enum Type {
 	/**
 	 * Builder for {@link AdvisorObservationContext}.
 	 */
-	public static class Builder {
+	public static final class Builder {
 
 		private String advisorName;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/AdvisorObservationDocumentation.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * AI Advisor observation documentation.
- * 
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Provides the API for chat client advisors observations.
  */

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/observation/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Provides classes for observing chat data.
  */

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Chat client.
  */

File: spring-ai-core/src/main/java/org/springframework/ai/converter/BeanOutputConverter.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Objects;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.core.util.DefaultIndenter;
 import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
 import com.fasterxml.jackson.databind.DeserializationFeature;

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/observation/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Provides the API for embedding observations.
  */

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallbackWrapper.java
Patch:
@@ -85,7 +85,7 @@ public static <I, O> Builder<I, O> builder(Function<I, O> function) {
 	 * @deprecated in favor of {@link DefaultFunctionCallbackBuilder}
 	 */
 	@Deprecated
-	public static class Builder<I, O> {
+	public static final class Builder<I, O> {
 
 		private final BiFunction<I, ToolContext, O> biFunction;
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionInvokingFunctionCallback.java
Patch:
@@ -30,7 +30,7 @@
  * that can be consumed by the Model. The default implementation converts the output into
  * String before sending it to the Model. Provide a custom function responseConverter
  * implementation to override this.
- * 
+ *
  * @param <I> the input type
  * @param <O> the output type
  * @author Christian Tzolov

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/MethodInvokingFunctionCallback.java
Patch:
@@ -182,7 +182,7 @@ else if (returnType == Class.class || returnType.isRecord() || returnType == Lis
 				return ModelOptionsUtils.toJsonString(response);
 			}
 
-			return responseConverter.apply(response);
+			return this.responseConverter.apply(response);
 		}
 		catch (Exception e) {
 			ReflectionUtils.handleReflectionException(e);

File: spring-ai-core/src/main/java/org/springframework/ai/observation/package-info.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 /**
  * Provides classes for observing events in the system.
  */

File: spring-ai-core/src/test/java/org/springframework/ai/model/function/DefaultFunctionCallbackBuilderTests.java
Patch:
@@ -275,7 +275,7 @@ public static class GenericsRequest<T> {
 		private T datum;
 
 		public T getDatum() {
-			return datum;
+			return this.datum;
 		}
 
 		public void setDatum(T value) {

File: spring-ai-core/src/test/java/org/springframework/ai/model/function/TypeResolverHelperIT.java
Patch:
@@ -92,9 +92,7 @@ StandaloneWeatherFunction standaloneWeatherFunction() {
 
 		@Bean
 		Consumer<WeatherRequest> weatherConsumer() {
-			return (weatherRequest) -> {
-				System.out.println(weatherRequest);
-			};
+			return System.out::println;
 		}
 
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryAutoConfiguration.java
Patch:
@@ -31,6 +31,7 @@
  * {@link AutoConfiguration Auto-configuration} for {@link CassandraChatMemory}.
  *
  * @author Mick Semb Wever
+ * @author Jihoon Kim
  * @since 1.0.0
  */
 @AutoConfiguration(after = CassandraAutoConfiguration.class)
@@ -52,8 +53,8 @@ public CassandraChatMemory chatMemory(CassandraChatMemoryProperties properties,
 		if (!properties.isInitializeSchema()) {
 			builder = builder.disallowSchemaChanges();
 		}
-		if (null != properties.getTimeToLiveSeconds()) {
-			builder = builder.withTimeToLive(properties.getTimeToLiveSeconds());
+		if (null != properties.getTimeToLive()) {
+			builder = builder.withTimeToLive(properties.getTimeToLive());
 		}
 
 		return CassandraChatMemory.create(builder.build());

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/speech/OpenAiSpeechModelIT.java
Patch:
@@ -106,7 +106,8 @@ void shouldStreamNonEmptyResponsesForValidSpeechPrompts() {
 		List<SpeechResponse> responses = responseFlux.collectList().block();
 		assertThat(responses).isNotNull();
 		responses.forEach(response -> {
-			System.out.println("Audio data chunk size: " + response.getResult().getOutput().length);
+			// System.out.println("Audio data chunk size: " +
+			// response.getResult().getOutput().length);
 			assertThat(response.getResult().getOutput()).isNotEmpty();
 		});
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java
Patch:
@@ -66,7 +66,8 @@ void functionCallTest() {
 				var promptOptions = MistralAiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallback.builder()
 						.description("Get payment status of a transaction")
-						.function("retrievePaymentStatus", transaction -> new Status(DATA.get(transaction).status()))
+						.function("retrievePaymentStatus",
+								(Transaction transaction) -> new Status(DATA.get(transaction).status()))
 						.inputType(Transaction.class)
 						.build()))
 					.build();

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/ChatClient.java
Patch:
@@ -115,6 +115,9 @@ interface PromptUserSpec {
 
 	}
 
+	/**
+	 * Specification for a prompt system.
+	 */
 	interface PromptSystemSpec {
 
 		PromptSystemSpec text(String text);

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/VectorStore.java
Patch:
@@ -51,7 +51,7 @@ default void accept(List<Document> documents) {
 	/**
 	 * Deletes documents from the vector store.
 	 * @param idList list of document ids for which documents will be removed.
-	 * @return
+	 * @return Returns true if the documents were successfully deleted.
 	 */
 	Optional<Boolean> delete(List<String> idList);
 

File: document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/aot/PdfReaderRuntimeHints.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.aot.hint.RuntimeHints;
 import org.springframework.aot.hint.RuntimeHintsRegistrar;
 import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
+import org.springframework.lang.NonNull;
 
 /**
  * The PdfReaderRuntimeHints class is responsible for registering runtime hints for PDFBox
@@ -34,7 +35,7 @@
 public class PdfReaderRuntimeHints implements RuntimeHintsRegistrar {
 
 	@Override
-	public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
+	public void registerHints(@NonNull RuntimeHints hints, ClassLoader classLoader) {
 		try {
 
 			var resolver = new PathMatchingResourcePatternResolver();

File: document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/config/ParagraphManager.java
Patch:
@@ -184,6 +184,7 @@ else if (paragraph.level() == level) {
 	 * @param level The TOC deepness level for this paragraph. The root is at level 0.
 	 * @param startPageNumber The page number in the PDF where this paragraph begins.
 	 * @param endPageNumber The page number in the PDF where this paragraph ends.
+	 * @param position The vertical position of the paragraph on the page.
 	 * @param children Sub-paragraphs for this paragraph.
 	 */
 	public record Paragraph(Paragraph parent, String title, int level, int startPageNumber, int endPageNumber,

File: document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/layout/ForkPDFLayoutTextStripper.java
Patch:
@@ -100,7 +100,6 @@ private void writeToOutputStream(final List<TextLine> textLineList) throws IOExc
 	 * In order to get rid of the warning: TextPositionComparator class should implement
 	 * Comparator<TextPosition> instead of Comparator
 	 */
-	@SuppressWarnings("unchecked")
 	private void sortTextPositionList(final List<TextPosition> textList) {
 		TextPositionComparator comparator = new TextPositionComparator();
 		Collections.sort(textList, comparator);

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/aot/AzureOpenAiRuntimeHints.java
Patch:
@@ -29,6 +29,8 @@
 import org.springframework.lang.Nullable;
 
 /**
+ * {@link RuntimeHintsRegistrar} for Azure OpenAI.
+ *
  * @author Christian Tzolov
  */
 public class AzureOpenAiRuntimeHints implements RuntimeHintsRegistrar {

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/AnthropicChatOptions.java
Patch:
@@ -26,6 +26,8 @@
 import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
+ * Options for the Anthropic Chat API.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApi.java
Patch:
@@ -34,6 +34,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Anthropic Chat API.
+ * 
  * @author Christian Tzolov
  * @author Thomas Vitale
  * @author Wei Jiang
@@ -260,6 +262,7 @@ public AnthropicChatRequest build() {
 	/**
 	 * AnthropicChatResponse encapsulates the response parameters for the Anthropic chat model.
 	 *
+	 * @param type The type of the response.
 	 * @param completion The generated text.
 	 * @param stopReason The reason the model stopped generating text.
 	 * @param stop The stop sequence that caused the model to stop generating text.

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatModel.java
Patch:
@@ -38,6 +38,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * A {@link ChatModel} implementation that uses the Cohere Chat API.
+ *
  * @author Christian Tzolov
  * @since 0.8.0
  */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatOptions.java
Patch:
@@ -29,6 +29,8 @@
 import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
+ * Options for the Bedrock Cohere chat API.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  * @since 0.8.0

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingOptions.java
Patch:
@@ -26,6 +26,8 @@
 import org.springframework.ai.embedding.EmbeddingOptions;
 
 /**
+ * Options for the Bedrock Cohere embedding API.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/api/CohereChatBedrockApi.java
Patch:
@@ -354,6 +354,7 @@ public record CohereChatResponse(
 		 * Generated result along with the likelihoods for tokens requested.
 		 *
 		 * @param id An identifier for the generation. (Always returned).
+		 * @param eventType The type of event that occurred. (Always returned).
 		 * @param likelihood The likelihood of the output. The value is the average of the token likelihoods in
 		 * token_likelihoods. Returned if you specify the return_likelihoods input parameter.
 		 * @param tokenLikelihoods An array of per token likelihoods. Returned if you specify the return_likelihoods
@@ -370,7 +371,7 @@ public record CohereChatResponse(
 		@JsonInclude(Include.NON_NULL)
 		public record Generation(
 				@JsonProperty("id") String id,
-				@JsonProperty("event_type") String event_type,
+				@JsonProperty("event_type") String eventType,
 				@JsonProperty("likelihood") Float likelihood,
 				@JsonProperty("token_likelihoods") List<TokenLikelihood> tokenLikelihoods,
 				@JsonProperty("finish_reason") FinishReason finishReason,
@@ -403,6 +404,7 @@ public enum FinishReason {
 			}
 
 			/**
+			 * Token likelihood.
 			 * @param token The token.
 			 * @param likelihood The likelihood of the token.
 			 */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/api/CohereEmbeddingBedrockApi.java
Patch:
@@ -216,6 +216,7 @@ public enum Truncate {
 	 * @param embeddings An array of embeddings, where each embedding is an array of floats with 1024 elements. The
 	 * length of the embeddings array will be the same as the length of the original texts array.
 	 * @param texts An array containing the text entries for which embeddings were returned.
+	 * @param responseType The type of the response. The value is always embeddings.
 	 * @param amazonBedrockInvocationMetrics Bedrock invocation metrics. Currently bedrock doesn't return
 	 * invocationMetrics for the cohere embedding model.
 	 */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama/BedrockLlamaChatOptions.java
Patch:
@@ -26,6 +26,8 @@
 import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
+ * Options for the Bedrock Llama Chat API.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama/api/LlamaChatBedrockApi.java
Patch:
@@ -271,6 +271,7 @@ public LlamaChatRequest build() {
 	 * has finished generating text for the input prompt. (2) length – The length of the tokens for the generated text
 	 * exceeds the value of max_gen_len in the call. The response is truncated to max_gen_len tokens. Consider
 	 * increasing the value of max_gen_len and trying again.
+	 * @param amazonBedrockInvocationMetrics The Amazon Bedrock invocation metrics.
 	 */
 	@JsonInclude(Include.NON_NULL)
 	public record LlamaChatResponse(

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatModel.java
Patch:
@@ -38,6 +38,9 @@
 import org.springframework.util.Assert;
 
 /**
+ * Implementation of the {@link ChatModel} and {@link StreamingChatModel} interfaces that
+ * uses the Titan Chat API.
+ *
  * @author Christian Tzolov
  * @since 0.8.0
  */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatOptions.java
Patch:
@@ -26,6 +26,8 @@
 import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
+ * Options for the Titan Chat API.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  * @since 0.8.0

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingOptions.java
Patch:
@@ -25,6 +25,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Options for the Titan Embedding API.
+ *
  * @author Wei Jiang
  * @author Thomas Vitale
  */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApi.java
Patch:
@@ -304,6 +304,7 @@ public record Result(
 	 * @param inputTextTokenCount The number of tokens in the prompt.
 	 * @param totalOutputTextTokenCount The number of tokens in the response.
 	 * @param completionReason The reason the response finished being generated.
+	 * @param amazonBedrockInvocationMetrics The metrics for the invocation.
 	 */
 	@JsonInclude(Include.NON_NULL)
 	public record TitanChatResponseChunk(

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/api/TitanEmbeddingBedrockApi.java
Patch:
@@ -170,6 +170,7 @@ public TitanEmbeddingRequest build() {
 	 *
 	 * @param embedding The embedding vector.
 	 * @param inputTextTokenCount The number of tokens in the input text.
+	 * @param embeddingsByType The embeddings by type.
 	 * @param message No idea what this is.
 	 */
 	@JsonInclude(Include.NON_NULL)

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatOptions.java
Patch:
@@ -37,6 +37,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Options for the Mistral AI Chat API.
+ *
  * @author Ricken Bazolo
  * @author Christian Tzolov
  * @author Thomas Vitale

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiEmbeddingOptions.java
Patch:
@@ -24,6 +24,8 @@
 import org.springframework.ai.embedding.EmbeddingOptions;
 
 /**
+ * Options for the Mistral AI Embedding API.
+ *
  * @author Ricken Bazolo
  * @author Thomas Vitale
  * @since 0.8.1

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/MoonshotChatModel.java
Patch:
@@ -72,6 +72,8 @@
 import org.springframework.util.CollectionUtils;
 
 /**
+ * MoonshotChatModel is a {@link ChatModel} implementation that uses the Moonshot
+ *
  * @author Geng Rong
  */
 public class MoonshotChatModel extends AbstractToolCallSupport implements ChatModel, StreamingChatModel {

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/MoonshotChatOptions.java
Patch:
@@ -33,6 +33,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Options for Moonshot chat completions.
+ *
  * @author Geng Rong
  * @author Thomas Vitale
  */

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/api/MoonshotConstants.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.ai.observation.conventions.AiProvider;
 
 /**
+ * Constants for Moonshot API.
+ *
  * @author Geng Rong
  */
 public final class MoonshotConstants {

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/metadata/MoonshotUsage.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Represents the usage of a Moonshot model.
+ *
  * @author Geng Rong
  */
 public class MoonshotUsage implements Usage {

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/management/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Management support for Ollama.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.ollama.management;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionOptions.java
Patch:
@@ -25,6 +25,8 @@
 import org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptionRequest.GranularityType;
 
 /**
+ * OpenAI Audio Transcription Options.
+ *
  * @author Michael Lavelle
  * @author Christian Tzolov
  * @author Piotr Olaszewski

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -40,6 +40,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Options for the OpenAI Chat API.
+ *
  * @author Christian Tzolov
  * @author Mariusz Bernacki
  * @author Thomas Vitale

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingOptions.java
Patch:
@@ -23,6 +23,8 @@
 import org.springframework.ai.embedding.EmbeddingOptions;
 
 /**
+ * OpenAI Embedding Options.
+ *
  * @author Christian Tzolov
  * @since 0.8.0
  */

File: models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingOptions.java
Patch:
@@ -29,6 +29,8 @@
 import org.springframework.ai.postgresml.PostgresMlEmbeddingModel.VectorType;
 
 /**
+ * PostgresML Embedding Options.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  */

File: models/spring-ai-vertex-ai-embedding/src/main/java/org/springframework/ai/vertexai/embedding/text/VertexAiTextEmbeddingOptions.java
Patch:
@@ -24,6 +24,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * Options for the Vertex AI Text Embedding service.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -84,6 +84,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * Vertex AI Gemini Chat Model implementation.
+ *
  * @author Christian Tzolov
  * @author Grogdunn
  * @author luocongqiu

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatOptions.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Options for the Vertex AI Gemini Chat API.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  * @author Grogdunn

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/common/VertexAiGeminiConstants.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.ai.observation.conventions.AiProvider;
 
 /**
+ * Constants for Vertex AI Gemini.
+ *
  * @author Soby Chacko
  */
 public final class VertexAiGeminiConstants {

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/metadata/VertexAiUsage.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Represents the usage of a Vertex AI model.
+ *
  * @author Christian Tzolov
  * @since 0.8.1
  *

File: models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/api/WatsonxAiEmbeddingResults.java
Patch:
@@ -22,6 +22,7 @@
 /**
  * Java class for Watsonx.ai Embedding Results object.
  *
+ * @param embedding the embedding
  * @author Pablo Sanchidrian Herrera
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/audio/transcription/AudioTranscriptionMetadata.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.ai.model.ResultMetadata;
 
 /**
+ * Metadata associated with an audio transcription result.
+ *
  * @author Michael Lavelle
  * @author Piotr Olaszewski
  * @since 0.8.1

File: spring-ai-core/src/main/java/org/springframework/ai/audio/transcription/AudioTranscriptionOptions.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.ai.model.ModelOptions;
 
 /**
+ * Options for audio transcription.
+ *
  * @author Piotr Olaszewski
  */
 public interface AudioTranscriptionOptions extends ModelOptions {

File: spring-ai-core/src/main/java/org/springframework/ai/audio/transcription/AudioTranscriptionResponse.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.ai.model.ModelResponse;
 
 /**
+ * A response containing an audio transcription result.
+ *
  * @author Michael Lavelle
  * @author Piotr Olaszewski
  * @since 0.8.1

File: spring-ai-core/src/main/java/org/springframework/ai/audio/transcription/AudioTranscriptionResponseMetadata.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.ai.model.MutableResponseMetadata;
 
 /**
+ * Metadata associated with an audio transcription response.
+ *
  * @author Piotr Olaszewski
  */
 public class AudioTranscriptionResponseMetadata extends MutableResponseMetadata {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/Advisor.java
Patch:
@@ -39,6 +39,7 @@ public interface Advisor extends Ordered {
 	int DEFAULT_CHAT_MEMORY_PRECEDENCE_ORDER = Ordered.HIGHEST_PRECEDENCE + 1000;
 
 	/**
+	 * Return the name of the advisor.
 	 * @return the advisor name.
 	 */
 	String getName();

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/CallAroundAdvisor.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.chat.client.advisor.api;
 
 /**
+ * Around advisor that wraps the ChatModel#call(Prompt) method.
+ *
  * @author Christian Tzolov
  * @author Dariusz Jedrzejczyk
  * @since 1.0.0

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/StreamAroundAdvisor.java
Patch:
@@ -19,6 +19,8 @@
 import reactor.core.publisher.Flux;
 
 /**
+ * Around advisor that runs around stream based requests.
+ * 
  * @author Christian Tzolov
  * @author Dariusz Jedrzejczyk
  * @since 1.0.0

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/package-info.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Provides the API for chat client advisors.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.chat.client.advisor.api;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/DefaultAdvisorObservationConvention.java
Patch:
@@ -26,6 +26,8 @@
 import org.springframework.lang.Nullable;
 
 /**
+ * Default implementation of the {@link AdvisorObservationConvention}.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/package-info.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Provides the API for chat client advisors observations.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.chat.client.advisor.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Provides classes for advising chat clients.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.chat.client.advisor;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/observation/package-info.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Provides classes for observing chat data.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.chat.client.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/package-info.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Chat client.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.chat.client;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Provides the API for chat observations.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.chat.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/converter/FormatProvider.java
Patch:
@@ -25,6 +25,7 @@
 public interface FormatProvider {
 
 	/**
+	 * Get the format of the output of a language generative.
 	 * @return Returns a string containing instructions for how the output of a language
 	 * generative should be formatted.
 	 */

File: spring-ai-core/src/main/java/org/springframework/ai/document/DefaultContentFormatter.java
Patch:
@@ -29,6 +29,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Default implementation of {@link ContentFormatter}.
+ *
  * @author Christian Tzolov
  */
 public final class DefaultContentFormatter implements ContentFormatter {

File: spring-ai-core/src/main/java/org/springframework/ai/document/DocumentWriter.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.function.Consumer;
 
 /**
+ * Write a list of {@link Document} instances.
+ *
  * @author Christian Tzolov
  */
 public interface DocumentWriter extends Consumer<List<Document>> {

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingOptions.java
Patch:
@@ -20,6 +20,8 @@
 import org.springframework.lang.Nullable;
 
 /**
+ * Options for embedding models.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  */

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingOptionsBuilder.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.embedding;
 
 /**
+ * Builder for {@link EmbeddingOptions}.
+ *
  * @author Thomas Vitale
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingRequest.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.ai.model.ModelRequest;
 
 /**
+ * Request to embed a list of input instructions.
+ *
  * @author Christian Tzolov
  */
 public class EmbeddingRequest implements ModelRequest<List<String>> {

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingResultMetadata.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.util.MimeTypeUtils;
 
 /**
+ * Metadata associated with the embedding result.
+ *
  * @author Christian Tzolov
  * @author Jihoon Kim
  */

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/observation/package-info.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Provides the API for embedding observations.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.embedding.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/image/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Provides classes for observing image data.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.image.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/model/Content.java
Patch:
@@ -31,11 +31,13 @@ public interface Content {
 
 	/**
 	 * Get the content of the message.
+	 * @return the content of the message
 	 */
 	String getContent(); // TODO consider getText
 
 	/**
-	 * return Get the metadata associated with the content.
+	 * Get the metadata associated with the content.
+	 * @return the metadata associated with the content
 	 */
 	Map<String, Object> getMetadata();
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/EmbeddingModelDescription.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.model;
 
 /**
+ * Description of an embedding model.
+ *
  * @author Christian Tzolov
  */
 public interface EmbeddingModelDescription extends ModelDescription {

File: spring-ai-core/src/main/java/org/springframework/ai/model/EmbeddingUtils.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.List;
 
 /**
+ * Utility methods for embedding related operations.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/DefaultFunctionCallbackBuilder.java
Patch:
@@ -42,6 +42,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * Default implementation of the {@link FunctionCallback.Builder}.
+ * 
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptions.java
Patch:
@@ -23,6 +23,9 @@
 import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
+ * FunctionCallingOptions is a set of options that can be used to configure the function
+ * calling behavior of the ChatModel.
+ *
  * @author Christian Tzolov
  */
 public interface FunctionCallingOptions extends ChatOptions {

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionInvokingFunctionCallback.java
Patch:
@@ -30,7 +30,9 @@
  * that can be consumed by the Model. The default implementation converts the output into
  * String before sending it to the Model. Provide a custom function responseConverter
  * implementation to override this.
- *
+ * 
+ * @param <I> the input type
+ * @param <O> the output type
  * @author Christian Tzolov
  */
 public final class FunctionInvokingFunctionCallback<I, O> extends AbstractFunctionCallback<I, O> {

File: spring-ai-core/src/main/java/org/springframework/ai/model/observation/ErrorLoggingObservationHandler.java
Patch:
@@ -30,6 +30,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * An {@link ObservationHandler} that logs errors using a {@link Tracer}.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/model/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Provides classes for observing model data.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.model.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Conventions for observation-based AI.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.observation.conventions;

File: spring-ai-core/src/main/java/org/springframework/ai/observation/package-info.java
Patch:
@@ -13,7 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
+/**
+ * Provides classes for observing events in the system.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.observation;

File: spring-ai-core/src/main/java/org/springframework/ai/rag/Query.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * Represents a query in the context of a Retrieval Augmented Generation (RAG) flow.
  *
+ * @param text the text of the query
  * @author Thomas Vitale
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/reader/TextReader.java
Patch:
@@ -33,6 +33,8 @@
 import org.springframework.util.StreamUtils;
 
 /**
+ * A {@link DocumentReader} that reads text from a {@link Resource}.
+ *
  * @author Craig Walls
  * @author Christian Tzolov
  */

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/splitter/TokenTextSplitter.java
Patch:
@@ -28,6 +28,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * A {@link TextSplitter} that splits text into chunks of a target size in tokens.
+ *
  * @author Raphael Yu
  * @author Christian Tzolov
  * @author Ricken Bazolo

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/VectorStoreObservationConvention.java
Patch:
@@ -20,6 +20,8 @@
 import io.micrometer.observation.ObservationConvention;
 
 /**
+ * A {@link ObservationConvention} for {@link VectorStoreObservationContext}.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Provides classes for observing and storing vector data.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.vectorstore.observation;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfiguration.java
Patch:
@@ -43,6 +43,8 @@
 import org.springframework.web.reactive.function.client.WebClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Anthropic Chat Model.
+ *
  * @author Christian Tzolov
  * @author Thomas Vitale
  * @since 1.0.0

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiAudioTranscriptionProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for Azure OpenAI audio transcription.
+ *
  * @author Piotr Olaszewski
  */
 @ConfigurationProperties(AzureOpenAiAudioTranscriptionProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiAutoConfiguration.java
Patch:
@@ -49,6 +49,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Azure OpenAI.
+ *
  * @author Piotr Olaszewski
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/BedrockAwsConnectionConfiguration.java
Patch:
@@ -32,6 +32,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * {@link Configuration} for AWS connection.
+ *
  * @author Christian Tzolov
  * @author Wei Jiang
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/memory/CommonChatMemoryProperties.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.autoconfigure.chat.memory;
 
 /**
+ * Configuration properties for the common chat memory.
+ *
  * @author Mick Semb Wever
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryAutoConfiguration.java
Patch:
@@ -28,6 +28,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for {@link CassandraChatMemory}.
+ *
  * @author Mick Semb Wever
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/memory/cassandra/CassandraChatMemoryProperties.java
Patch:
@@ -27,6 +27,8 @@
 import org.springframework.lang.Nullable;
 
 /**
+ * Configuration properties for Cassandra chat memory.
+ *
  * @author Mick Semb Wever
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Auto-configuration for chat observation.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.autoconfigure.chat.observation;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/embedding/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Auto-configuration for embedding observation.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.autoconfigure.embedding.observation;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Hugging Face chat model.
+ *
  * @author Christian Tzolov
  * @author Josh Long
  * @author Mark Pollack

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/image/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Auto-configuration for image observation.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.autoconfigure.image.observation;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxAutoConfiguration.java
Patch:
@@ -44,6 +44,8 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for MiniMax Chat and Embedding Models.
+ *
  * @author Geng Rong
  */
 @AutoConfiguration(after = { RestClientAutoConfiguration.class, SpringAiRetryAutoConfiguration.class })

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxChatProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for MiniMax chat model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(MiniMaxChatProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxEmbeddingProperties.java
Patch:
@@ -23,6 +23,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for MiniMax embedding model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(MiniMaxEmbeddingProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiAutoConfiguration.java
Patch:
@@ -46,6 +46,8 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Mistral AI.
+ *
  * @author Ricken Bazolo
  * @author Christian Tzolov
  * @author Thomas Vitale

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiChatProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for Mistral AI chat.
+ *
  * @author Ricken Bazolo
  * @author Christian Tzolov
  * @author Thomas Vitale

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiCommonProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Common properties for Mistral AI.
+ *
  * @author Ricken Bazolo
  * @author Christian Tzolov
  * @since 0.8.1

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiEmbeddingProperties.java
Patch:
@@ -23,6 +23,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for MistralAI embedding model.
+ *
  * @author Ricken Bazolo
  * @since 0.8.1
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiParentProperties.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.autoconfigure.mistralai;
 
 /**
+ * Parent properties for Mistral AI.
+ *
  * @author Ricken Bazolo
  * @since 0.8.1
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/moonshot/MoonshotAutoConfiguration.java
Patch:
@@ -42,6 +42,8 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Moonshot Chat Model.
+ *
  * @author Geng Rong
  */
 @AutoConfiguration(after = { RestClientAutoConfiguration.class, SpringAiRetryAutoConfiguration.class })

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/moonshot/MoonshotChatProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for Moonshot chat client.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(MoonshotChatProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/moonshot/MoonshotCommonProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Parent properties for Moonshot.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(MoonshotCommonProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/moonshot/MoonshotParentProperties.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.autoconfigure.moonshot;
 
 /**
+ * Parent properties for Moonshot.
+ *
  * @author Geng Rong
  */
 public class MoonshotParentProperties {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/oci/genai/OCICohereChatModelProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for OCI Cohere chat model.
+ *
  * @author Anders Swanson
  */
 @ConfigurationProperties(OCICohereChatModelProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/oci/genai/OCIConnectionProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * Configuration properties for OCI connection.
+ *
  * @author Anders Swanson
  */
 @ConfigurationProperties(OCIConnectionProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/oci/genai/OCIEmbeddingModelProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for OCI embedding model.
+ *
  * @author Anders Swanson
  */
 @ConfigurationProperties(OCIEmbeddingModelProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/oci/genai/OCIGenAiAutoConfiguration.java
Patch:
@@ -43,6 +43,9 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Oracle Cloud Infrastructure Generative
+ * AI.
+ *
  * @author Anders Swanson
  */
 @AutoConfiguration

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/oci/genai/ServingMode.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.autoconfigure.oci.genai;
 
 /**
+ * OCI serving mode.
+ *
  * @author Anders Swanson
  */
 public enum ServingMode {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaConnectionDetails.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;
 
 /**
+ * Connection details for an Ollama service.
+ *
  * @author Eddú Meléndez
  */
 public interface OllamaConnectionDetails extends ConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -60,6 +60,8 @@
 import org.springframework.web.reactive.function.client.WebClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for OpenAI.
+ *
  * @author Christian Tzolov
  * @author Stefan Vassilev
  * @author Thomas Vitale

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanAutoConfiguration.java
Patch:
@@ -44,6 +44,9 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for QianFan Chat, Embedding, and Image
+ * Models.
+ *
  * @author Geng Rong
  */
 @AutoConfiguration(after = { RestClientAutoConfiguration.class, SpringAiRetryAutoConfiguration.class })

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanChatProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for QianFan chat model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(QianFanChatProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanEmbeddingProperties.java
Patch:
@@ -23,6 +23,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for QianFan embedding model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(QianFanEmbeddingProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryAutoConfiguration.java
Patch:
@@ -41,6 +41,8 @@
 import org.springframework.web.client.ResponseErrorHandler;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for AI Retry.
+ *
  * @author Christian Tzolov
  */
 @AutoConfiguration

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryProperties.java
Patch:
@@ -24,6 +24,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Properties for AI Retry.
+ *
  * @author Christian Tzolov
  */
 @ConfigurationProperties(SpringAiRetryProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImageAutoConfiguration.java
Patch:
@@ -31,6 +31,8 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for StabilityAI Image Model.
+ *
  * @author Mark Pollack
  * @author Christian Tzolov
  * @since 0.8.0

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImageProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for Stability AI image model.
+ *
  * @author Mark Pollack
  * @author Christian Tzolov
  * @since 0.8.0

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingModelAutoConfiguration.java
Patch:
@@ -31,6 +31,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Transformers Embedding Model.
+ *
  * @author Christian Tzolov
  */
 @AutoConfiguration

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingModelProperties.java
Patch:
@@ -30,6 +30,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for the Transformer Embedding model.
+ *
  * @author Christian Tzolov
  */
 @ConfigurationProperties(org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingModelProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/CommonVectorStoreProperties.java
Patch:
@@ -17,6 +17,8 @@
 package org.springframework.ai.autoconfigure.vectorstore;
 
 /**
+ * Common properties for vector stores.
+ *
  * @author Josh Long
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreAutoConfiguration.java
Patch:
@@ -38,6 +38,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Azure Vector Store.
+ *
  * @author Christian Tzolov
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Azure Vector Store.
+ *
  * @author Christian Tzolov
  */
 @ConfigurationProperties(AzureVectorStoreProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfiguration.java
Patch:
@@ -38,6 +38,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Cassandra Vector Store.
+ *
  * @author Mick Semb Wever
  * @author Christian Tzolov
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreProperties.java
Patch:
@@ -25,6 +25,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Cassandra Vector Store.
+ *
  * @author Mick Semb Wever
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaApiProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Chroma API client.
+ *
  * @author Christian Tzolov
  */
 @ConfigurationProperties(ChromaApiProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaConnectionDetails.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;
 
 /**
+ * Connection details for a Chroma service.
+ *
  * @author Eddú Meléndez
  */
 public interface ChromaConnectionDetails extends ConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfiguration.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Chroma Vector Store.
+ *
  * @author Christian Tzolov
  * @author Eddú Meléndez
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Chroma Vector Store.
+ *
  * @author Christian Tzolov
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cosmosdb/CosmosDBVectorStoreAutoConfiguration.java
Patch:
@@ -34,6 +34,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for CosmosDB Vector Store.
+ *
  * @author Theo van Kraay
  * @author Soby Chacko
  * @since 1.0.0

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cosmosdb/CosmosDBVectorStoreProperties.java
Patch:
@@ -20,6 +20,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for CosmosDB Vector Store.
+ *
  * @author Theo van Kraay
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreAutoConfiguration.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Elasticsearch Vector Store.
+ *
  * @author Eddú Meléndez
  * @author Wei Jiang
  * @author Josh Long

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Elasticsearch Vector Store.
+ *
  * @author Eddú Meléndez
  * @author Wei Jiang
  * @author Josh Long

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/gemfire/GemFireConnectionDetails.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;
 
 /**
+ * Connection details for a GemFire service.
+ *
  * @author Geet Rawat
  */
 public interface GemFireConnectionDetails extends ConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/gemfire/GemFireVectorStoreAutoConfiguration.java
Patch:
@@ -32,6 +32,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for GemFire Vector Store.
+ *
  * @author Geet Rawat
  * @author Christian Tzolov
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/gemfire/GemFireVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for GemFire Vector Store.
+ *
  * @author Geet Rawat
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfiguration.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Hana Cloud Vector Store.
+ *
  * @author Rahul Mittal
  * @author Christian Tzolov
  * @since 1.0.0

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Hana Cloud Vector Store.
+ *
  * @author Rahul Mittal
  * @since 1.0.0
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusServiceClientConnectionDetails.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;
 
 /**
+ * Connection details for a Milvus service client.
+ *
  * @author Eddú Meléndez
  */
 public interface MilvusServiceClientConnectionDetails extends ConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfiguration.java
Patch:
@@ -39,6 +39,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Milvus Vector Store.
+ *
  * @author Christian Tzolov
  * @author Eddú Meléndez
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * Configuration properties for Milvus Vector Store.
+ *
  * @author Christian Tzolov
  * @author Ilayaperumal Gopinathan
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfiguration.java
Patch:
@@ -38,6 +38,8 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for MongoDB Atlas Vector Store.
+ *
  * @author Eddú Meléndez
  * @author Christian Tzolov
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for MongoDB Atlas Vector Store.
+ *
  * @author Eddú Meléndez
  * @author Christian Tzolov
  * @author Ignacio López

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.java
Patch:
@@ -33,6 +33,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Neo4j Vector Store.
+ *
  * @author Jingzhou Ou
  * @author Josh Long
  * @author Christian Tzolov

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Neo4j Vector Store.
+ *
  * @author Jingzhou Ou
  * @author Josh Long
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/observation/package-info.java
Patch:
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 
+/**
+ * Auto-configuration for observation vector store.
+ */
 @NonNullApi
 @NonNullFields
 package org.springframework.ai.autoconfigure.vectorstore.observation;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/oracle/OracleVectorStoreAutoConfiguration.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Oracle Vector Store.
+ *
  * @author Loïc Lefèvre
  * @author Eddú Meléndez
  * @author Christian Tzolov

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/oracle/OracleVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Oracle Vector Store.
+ *
  * @author Loïc Lefèvre
  */
 @ConfigurationProperties(OracleVectorStoreProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfiguration.java
Patch:
@@ -35,6 +35,8 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for PostgreSQL Vector Store.
+ *
  * @author Christian Tzolov
  * @author Josh Long
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreProperties.java
Patch:
@@ -23,6 +23,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for PostgreSQL Vector Store.
+ *
  * @author Christian Tzolov
  * @author Muthukumaran Navaneethakrishnan
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfiguration.java
Patch:
@@ -32,6 +32,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Pinecone Vector Store.
+ *
  * @author Christian Tzolov
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Pinecone Vector Store.
+ *
  * @author Christian Tzolov
  */
 @ConfigurationProperties(PineconeVectorStoreProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantConnectionDetails.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;
 
 /**
+ * Connection details for a Qdrant service client.
+ *
  * @author Eddú Meléndez
  */
 public interface QdrantConnectionDetails extends ConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreAutoConfiguration.java
Patch:
@@ -33,6 +33,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Qdrant Vector Store.
+ *
  * @author Anush Shetty
  * @author Eddú Meléndez
  * @author Christian Tzolov

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Qdrant Vector Store.
+ *
  * @author Anush Shetty
  * @author Josh Long
  * @since 0.8.1

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfiguration.java
Patch:
@@ -36,6 +36,8 @@
 import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Redis Vector Store.
+ *
  * @author Christian Tzolov
  * @author Eddú Meléndez
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreProperties.java
Patch:
@@ -20,6 +20,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Redis Vector Store.
+ *
  * @author Julien Ruaux
  * @author Eddú Meléndez
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseConnectionDetails.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.autoconfigure.service.connection.ConnectionDetails;
 
 /**
+ * Connection details for a Typesense service client.
+ *
  * @author Pablo Sanchidrian Herrera
  */
 public interface TypesenseConnectionDetails extends ConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseServiceClientProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Typesense service client.
+ *
  * @author Pablo Sanchidrian Herrera
  */
 @ConfigurationProperties(TypesenseServiceClientProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseVectorStoreAutoConfiguration.java
Patch:
@@ -39,6 +39,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Typesense Vector Store.
+ *
  * @author Pablo Sanchidrian Herrera
  * @author Eddú Meléndez
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseVectorStoreProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Typesense Vector Store.
+ *
  * @author Pablo Sanchidrian Herrera
  * @author Soby Chacko
  */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfiguration.java
Patch:
@@ -37,6 +37,8 @@
 import org.springframework.context.annotation.Bean;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for Weaviate Vector Store.
+ *
  * @author Christian Tzolov
  * @author Eddú Meléndez
  * @author Soby Chacko

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreProperties.java
Patch:
@@ -24,6 +24,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
+ * Configuration properties for Weaviate Vector Store.
+ *
  * @author Christian Tzolov
  */
 @ConfigurationProperties(WeaviateVectorStoreProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiAutoConfiguration.java
Patch:
@@ -46,6 +46,8 @@
 import org.springframework.web.client.RestClient;
 
 /**
+ * {@link AutoConfiguration Auto-configuration} for ZhiPuAI.
+ *
  * @author Geng Rong
  */
 @AutoConfiguration(after = { RestClientAutoConfiguration.class, SpringAiRetryAutoConfiguration.class })

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiChatProperties.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for ZhiPuAI chat model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(ZhiPuAiChatProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiEmbeddingProperties.java
Patch:
@@ -23,6 +23,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for ZhiPuAI embedding model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(ZhiPuAiEmbeddingProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiImageProperties.java
Patch:
@@ -21,6 +21,8 @@
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
+ * Configuration properties for ZhiPuAI chat model.
+ *
  * @author Geng Rong
  */
 @ConfigurationProperties(ZhiPuAiImageProperties.CONFIG_PREFIX)

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/typesense/TypesenseDockerComposeConnectionDetailsFactory.java
Patch:
@@ -22,6 +22,8 @@
 import org.springframework.boot.docker.compose.service.connection.DockerComposeConnectionSource;
 
 /**
+ * {@link DockerComposeConnectionDetailsFactory} for {@link TypesenseConnectionDetails}.
+ *
  * @author Eddú Meléndez
  */
 public class TypesenseDockerComposeConnectionDetailsFactory

File: vector-stores/spring-ai-azure-cosmos-db-store/src/main/java/org/springframework/ai/vectorstore/CosmosDBVectorStore.java
Patch:
@@ -70,6 +70,8 @@
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationConvention;
 
 /**
+ * Cosmos DB implementation.
+ *
  * @author Theo van Kraay
  * @author Soby Chacko
  * @since 1.0.0

File: vector-stores/spring-ai-azure-cosmos-db-store/src/main/java/org/springframework/ai/vectorstore/CosmosDBVectorStoreConfig.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.List;
 
 /**
+ * Configuration properties for a CosmosDB vector store.
+ *
  * @author Theo van Kraay
  * @since 1.0.0
  */

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/cassandra/SchemaUtil.java
Patch:
@@ -25,6 +25,8 @@
 import org.slf4j.LoggerFactory;
 
 /**
+ * Utility class for working with Cassandra schema.
+ *
  * @author Mick Semb Wever
  * @since 1.0.0
  */

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/chat/memory/CassandraChatMemoryConfig.java
Patch:
@@ -46,6 +46,8 @@
 import org.springframework.ai.cassandra.SchemaUtil;
 
 /**
+ * Configuration for the Cassandra Chat Memory store.
+ *
  * @author Mick Semb Wever
  * @since 1.0.0
  */

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -70,6 +70,9 @@
 import org.springframework.util.StringUtils;
 
 /**
+ * Milvus based implementation of the
+ * {@link org.springframework.ai.vectorstore.VectorStore}.
+ *
  * @author Christian Tzolov
  * @author Soby Chacko
  * @author Thomas Vitale

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/MongoDBAtlasVectorStore.java
Patch:
@@ -44,6 +44,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * A {@link VectorStore} implementation that uses MongoDB Atlas for storing and
+ *
  * @author Chris Smith
  * @author Soby Chacko
  * @author Christian Tzolov

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java
Patch:
@@ -43,6 +43,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * A vector store implementation that stores and retrieves vectors in a Neo4j database.
+ *
  * @author Gerrit Meier
  * @author Michael Simons
  * @author Christian Tzolov

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/OpenSearchAiSearchFilterExpressionConverter.java
Patch:
@@ -29,6 +29,8 @@
 import org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;
 
 /**
+ * A FilterExpressionConverter implementation for OpenSearch AI search filter expressions.
+ *
  * @author Jemin Huh
  * @since 1.0.0
  */

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/OpenSearchVectorStore.java
Patch:
@@ -56,6 +56,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * An ObservationVectorStore implementation that stores vectors in OpenSearch.
+ *
  * @author Jemin Huh
  * @author Soby Chacko
  * @author Christian Tzolov

File: vector-stores/spring-ai-oracle-store/src/main/java/org/springframework/ai/vectorstore/SqlJsonPathFilterExpressionConverter.java
Patch:
@@ -20,6 +20,8 @@
 import org.springframework.ai.vectorstore.filter.converter.AbstractFilterExpressionConverter;
 
 /**
+ * Converts a {@link Filter} into a JSON Path expression.
+ *
  * @author Loïc Lefèvre
  * @see <a href=
  * "https://docs.oracle.com/en/database/oracle/oracle-database/23/adjsn/json-path-expressions.html#GUID-8656CAB9-C293-4A99-BB62-F38F3CFC4C13">JSON

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorSchemaValidator.java
Patch:
@@ -27,6 +27,8 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 /**
+ * Validates the schema of a PostgreSQL table used as a PGVectorStore.
+ *
  * @author Muthukumaran Navaneethakrishnan
  * @author Christian Tzolov
  * @since 1.0.0

File: vector-stores/spring-ai-typesense-store/src/main/java/org/springframework/ai/vectorstore/TypesenseVectorStore.java
Patch:
@@ -52,6 +52,8 @@
 import org.springframework.util.Assert;
 
 /**
+ * A ObservationVectorStore implementation that uses Typesense as the underlying storage.
+ *
  * @author Pablo Sanchidrian Herrera
  * @author Soby Chacko
  * @author Christian Tzolov

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingHelper.java
Patch:
@@ -42,13 +42,13 @@
  * call handling logic on the client side. Used when the withProxyToolCalls(true) option
  * is enabled.
  */
-public class ToolCallHelper extends AbstractToolCallSupport {
+public class FunctionCallingHelper extends AbstractToolCallSupport {
 
-	public ToolCallHelper() {
+	public FunctionCallingHelper() {
 		this(null, PortableFunctionCallingOptions.builder().build(), List.of());
 	}
 
-	public ToolCallHelper(FunctionCallbackContext functionCallbackContext,
+	public FunctionCallingHelper(FunctionCallbackContext functionCallbackContext,
 			FunctionCallingOptions functionCallingOptions, List<FunctionCallback> toolFunctionCallbacks) {
 		super(functionCallbackContext, functionCallingOptions, toolFunctionCallbacks);
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModel.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.ai.bedrock.MessageToPromptConverter;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatRequest;
+import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.model.ChatResponse;
@@ -68,8 +69,8 @@ public ChatResponse call(Prompt prompt) {
 
 		return new ChatResponse(response.completions()
 			.stream()
-			.map(completion -> new Generation(completion.data().text())
-				.withGenerationMetadata(ChatGenerationMetadata.from(completion.finishReason().reason(), null)))
+			.map(completion -> new Generation(new AssistantMessage(completion.data().text()),
+					ChatGenerationMetadata.from(completion.finishReason().reason(), null)))
 			.toList());
 	}
 

File: models/spring-ai-huggingface/src/main/java/org/springframework/ai/huggingface/HuggingfaceChatModel.java
Patch:
@@ -23,6 +23,8 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
+import org.springframework.ai.chat.messages.AssistantMessage;
+import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
@@ -105,7 +107,7 @@ public ChatResponse call(Prompt prompt) {
 					new TypeReference<Map<String, Object>>() {
 
 					});
-			Generation generation = new Generation(generatedText, detailsMap);
+			Generation generation = new Generation(new AssistantMessage(generatedText, detailsMap));
 			generations.add(generation);
 		}
 		return new ChatResponse(generations);

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/MethodFunctionCallback.java
Patch:
@@ -167,6 +167,7 @@ else if (returnType == Class.class || returnType.isRecord() || returnType == Lis
 				return ModelOptionsUtils.toJsonString(response);
 
 			}
+
 			return "" + response;
 		}
 		catch (Exception e) {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStorePropertiesTests.java
Patch:
@@ -36,7 +36,6 @@ void defaultValues() {
 		assertThat(props.getContentColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_CONTENT_COLUMN_NAME);
 		assertThat(props.getEmbeddingColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_EMBEDDING_COLUMN_NAME);
 		assertThat(props.getIndexName()).isNull();
-		assertThat(props.getDisallowSchemaCreation()).isTrue();
 		assertThat(props.getFixedThreadPoolExecutorSize())
 			.isEqualTo(CassandraVectorStoreConfig.DEFAULT_ADD_CONCURRENCY);
 	}
@@ -49,15 +48,13 @@ void customValues() {
 		props.setContentColumnName("my_content");
 		props.setEmbeddingColumnName("my_vector");
 		props.setIndexName("my_sai");
-		props.setDisallowSchemaCreation(true);
 		props.setFixedThreadPoolExecutorSize(10);
 
 		assertThat(props.getKeyspace()).isEqualTo("my_keyspace");
 		assertThat(props.getTable()).isEqualTo("my_table");
 		assertThat(props.getContentColumnName()).isEqualTo("my_content");
 		assertThat(props.getEmbeddingColumnName()).isEqualTo("my_vector");
 		assertThat(props.getIndexName()).isEqualTo("my_sai");
-		assertThat(props.getDisallowSchemaCreation()).isTrue();
 		assertThat(props.getFixedThreadPoolExecutorSize()).isEqualTo(10);
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfigurationIT.java
Patch:
@@ -52,8 +52,6 @@
 @Testcontainers
 public class Neo4jVectorStoreAutoConfigurationIT {
 
-	// Needs to be Neo4j 5.15+, because Neo4j 5.15 deprecated the used embedding storing
-	// function.
 	@Container
 	static Neo4jContainer<?> neo4jContainer = new Neo4jContainer<>(DockerImageName.parse("neo4j:5.18"))
 		.withRandomPassword();

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/Neo4jImage.java
Patch:
@@ -23,8 +23,6 @@
  */
 public final class Neo4jImage {
 
-	// Needs to be Neo4j 5.15+ because Neo4j 5.15 deprecated the old vector index creation
-	// function.
 	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("neo4j:5.24");
 
 	private Neo4jImage() {

File: vector-stores/spring-ai-qdrant-store/src/test/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStoreIT.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
+import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariables;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.qdrant.QdrantContainer;
@@ -53,8 +54,8 @@
  * @since 0.8.1
  */
 @Testcontainers
-@EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+")
-@EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
+@EnabledIfEnvironmentVariables({ @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+"),
+		@EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+") })
 public class QdrantVectorStoreIT {
 
 	private static final String COLLECTION_NAME = "test_collection";

File: vector-stores/spring-ai-azure-store/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -349,6 +349,7 @@ public void afterPropertiesSet() throws Exception {
 			.setSortable(true));
 		fields.add(new SearchField(EMBEDDING_FIELD_NAME, SearchFieldDataType.collection(SearchFieldDataType.SINGLE))
 			.setSearchable(true)
+			.setHidden(false)
 			.setVectorSearchDimensions(dimensions)
 			// This must match a vector search configuration name.
 			.setVectorSearchProfileName(SPRING_AI_VECTOR_PROFILE));

File: spring-ai-core/src/main/java/org/springframework/ai/rag/analysis/query/expansion/MultiQueryExpander.java
Patch:
@@ -102,7 +102,7 @@ public List<Query> expand(Query query) {
 
 		var response = this.chatClient.prompt()
 			.user(user -> user.text(this.promptTemplate.getTemplate())
-				.param("number", numberOfQueries)
+				.param("number", this.numberOfQueries)
 				.param("query", query.text()))
 			.call()
 			.content();

File: spring-ai-core/src/main/java/org/springframework/ai/rag/analysis/query/transformation/TranslationQueryTransformer.java
Patch:
@@ -86,7 +86,7 @@ public Query transform(Query query) {
 
 		var translatedQuery = this.chatClient.prompt()
 			.user(user -> user.text(this.promptTemplate.getTemplate())
-				.param("targetLanguage", targetLanguage)
+				.param("targetLanguage", this.targetLanguage)
 				.param("query", query.text()))
 			.options(ChatOptionsBuilder.builder().withTemperature(0.0).build())
 			.call()

File: spring-ai-core/src/test/java/org/springframework/ai/rag/analysis/query/expansion/MultiQueryExpanderTests.java
Patch:
@@ -13,9 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.rag.analysis.query.expansion;
 
 import org.junit.jupiter.api.Test;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 

File: spring-ai-core/src/test/java/org/springframework/ai/rag/analysis/query/transformation/TranslationQueryTransformerTests.java
Patch:
@@ -13,9 +13,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.rag.analysis.query.transformation;
 
 import org.junit.jupiter.api.Test;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 

File: spring-ai-integration-tests/src/test/java/org/springframework/ai/integration/tests/TestApplication.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.integration.tests;
 
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: spring-ai-integration-tests/src/test/java/org/springframework/ai/integration/tests/TestcontainersConfiguration.java
Patch:
@@ -13,12 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.integration.tests;
 
+import org.testcontainers.containers.PostgreSQLContainer;
+
 import org.springframework.boot.test.context.TestConfiguration;
 import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
 import org.springframework.context.annotation.Bean;
-import org.testcontainers.containers.PostgreSQLContainer;
 
 /**
  * Test configuration for Testcontainers-based Dev Services.

File: spring-ai-integration-tests/src/test/java/org/springframework/ai/integration/tests/rag/analysis/query/transformation/TranslationQueryTransformerIT.java
Patch:
@@ -13,10 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.integration.tests.rag.analysis.query.transformation;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.integration.tests.TestApplication;
 import org.springframework.ai.openai.OpenAiChatModel;
@@ -44,7 +46,7 @@ class TranslationQueryTransformerIT {
 	void whenTransformerWithDefaults() {
 		Query query = new Query("Hvad er Danmarks hovedstad?");
 		QueryTransformer queryTransformer = TranslationQueryTransformer.builder()
-			.chatClientBuilder(ChatClient.builder(openAiChatModel))
+			.chatClientBuilder(ChatClient.builder(this.openAiChatModel))
 			.targetLanguage("english")
 			.build();
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/BaseOllamaIT.java
Patch:
@@ -19,7 +19,6 @@
 import java.time.Duration;
 
 import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.ollama.OllamaContainer;
 

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/vectorstore/ChromaVectorStore.java
Patch:
@@ -162,9 +162,8 @@ public void doAdd(List<Document> documents) {
 	@Override
 	public Optional<Boolean> doDelete(List<String> idList) {
 		Assert.notNull(idList, "Document id list must not be null");
-		List<String> deletedIds = this.chromaApi.deleteEmbeddings(this.collectionId,
-				new DeleteEmbeddingsRequest(idList));
-		return Optional.of(deletedIds.size() == idList.size());
+		int status = this.chromaApi.deleteEmbeddings(this.collectionId, new DeleteEmbeddingsRequest(idList));
+		return Optional.of(status == 200);
 	}
 
 	@Override

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/ChromaImage.java
Patch:
@@ -23,7 +23,7 @@
  */
 public final class ChromaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ghcr.io/chroma-core/chroma:0.5.11");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ghcr.io/chroma-core/chroma:0.5.16");
 
 	private ChromaImage() {
 

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.UUID;
 
 import org.junit.jupiter.api.Test;
@@ -83,7 +84,8 @@ public void addAndSearch() {
 			assertThat(resultDoc.getMetadata()).containsKeys("meta2", "distance");
 
 			// Remove all documents from the store
-			vectorStore.delete(this.documents.stream().map(doc -> doc.getId()).toList());
+			assertThat(vectorStore.delete(this.documents.stream().map(doc -> doc.getId()).toList()))
+				.isEqualTo(Optional.of(Boolean.TRUE));
 
 			List<Document> results2 = vectorStore.similaritySearch(SearchRequest.query("Great").withTopK(1));
 			assertThat(results2).hasSize(0);

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelIT.java
Patch:
@@ -140,8 +140,8 @@ void streamingWithTokenUsage() {
 		assertThat(streamingTokenUsage.getTotalTokens()).isGreaterThan(0);
 
 		assertThat(streamingTokenUsage.getPromptTokens()).isEqualTo(referenceTokenUsage.getPromptTokens());
-		assertThat(streamingTokenUsage.getGenerationTokens()).isEqualTo(referenceTokenUsage.getGenerationTokens());
-		assertThat(streamingTokenUsage.getTotalTokens()).isEqualTo(referenceTokenUsage.getTotalTokens());
+		// assertThat(streamingTokenUsage.getGenerationTokens()).isEqualTo(referenceTokenUsage.getGenerationTokens());
+		// assertThat(streamingTokenUsage.getTotalTokens()).isEqualTo(referenceTokenUsage.getTotalTokens());
 
 	}
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelObservationIT.java
Patch:
@@ -23,7 +23,6 @@
 import io.micrometer.observation.tck.TestObservationRegistryAssert;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIf;
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.chat.metadata.ChatResponseMetadata;
@@ -50,7 +49,6 @@
  * @author Thomas Vitale
  */
 @SpringBootTest(classes = OllamaChatModelObservationIT.Config.class)
-@DisabledIf("isDisabled")
 public class OllamaChatModelObservationIT extends BaseOllamaIT {
 
 	private static final String MODEL = OllamaModel.LLAMA3_2.getName();
@@ -166,7 +164,7 @@ public TestObservationRegistry observationRegistry() {
 
 		@Bean
 		public OllamaApi openAiApi() {
-			return buildOllamaApiWithModel(MODEL);
+			return initializeOllama(MODEL);
 		}
 
 		@Bean

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingModelObservationIT.java
Patch:
@@ -21,7 +21,6 @@
 import io.micrometer.observation.tck.TestObservationRegistry;
 import io.micrometer.observation.tck.TestObservationRegistryAssert;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledIf;
 
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.embedding.EmbeddingResponse;
@@ -47,7 +46,6 @@
  * @author Thomas Vitale
  */
 @SpringBootTest(classes = OllamaEmbeddingModelObservationIT.Config.class)
-@DisabledIf("isDisabled")
 public class OllamaEmbeddingModelObservationIT extends BaseOllamaIT {
 
 	private static final String MODEL = OllamaModel.NOMIC_EMBED_TEXT.getName();
@@ -100,7 +98,7 @@ public TestObservationRegistry observationRegistry() {
 
 		@Bean
 		public OllamaApi openAiApi() {
-			return buildOllamaApiWithModel(MODEL);
+			return initializeOllama(MODEL);
 		}
 
 		@Bean

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaImage.java
Patch:
@@ -18,7 +18,7 @@
 
 public final class OllamaImage {
 
-	public static final String IMAGE = "ollama/ollama:0.3.14";
+	public static final String DEFAULT_IMAGE = "ollama/ollama:0.3.14";
 
 	private OllamaImage() {
 

File: spring-ai-core/src/main/java/org/springframework/ai/converter/BeanOutputConverter.java
Patch:
@@ -54,6 +54,7 @@
  * @author Kirk Lund
  * @author Josh Long
  * @author Sebastien Deleuze
+ * @author Soby Chacko
  */
 public class BeanOutputConverter<T> implements StructuredOutputConverter<T> {
 
@@ -125,7 +126,8 @@ private BeanOutputConverter(TypeReference<T> typeRef, ObjectMapper objectMapper)
 	 * Generates the JSON schema for the target type.
 	 */
 	private void generateSchema() {
-		JacksonModule jacksonModule = new JacksonModule(JacksonOption.RESPECT_JSONPROPERTY_REQUIRED);
+		JacksonModule jacksonModule = new JacksonModule(JacksonOption.RESPECT_JSONPROPERTY_REQUIRED,
+				JacksonOption.RESPECT_JSONPROPERTY_ORDER);
 		SchemaGeneratorConfigBuilder configBuilder = new SchemaGeneratorConfigBuilder(
 				com.github.victools.jsonschema.generator.SchemaVersion.DRAFT_2020_12,
 				com.github.victools.jsonschema.generator.OptionPreset.PLAIN_JSON)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatModelIT.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.stream.Collectors;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
@@ -55,6 +56,7 @@
 @SpringBootTest
 @EnabledIfEnvironmentVariable(named = "AWS_ACCESS_KEY_ID", matches = ".*")
 @EnabledIfEnvironmentVariable(named = "AWS_SECRET_ACCESS_KEY", matches = ".*")
+@Disabled("COHERE_COMMAND_V14 is not supported anymore")
 class BedrockCohereChatModelIT {
 
 	@Autowired

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/api/CohereChatBedrockApiIT.java
Patch:
@@ -19,6 +19,7 @@
 import java.time.Duration;
 import java.util.List;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
@@ -71,6 +72,7 @@ public void requestBuilder() {
 	}
 
 	@Test
+	@Disabled("Due to model version has reached the end of its life")
 	public void chatCompletion() {
 
 		var request = CohereChatRequest
@@ -95,6 +97,7 @@ public void chatCompletion() {
 		assertThat(response.generations().get(0).text()).isNotEmpty();
 	}
 
+	@Disabled("Due to model version has reached the end of its life")
 	@Test
 	public void chatCompletionStream() {
 

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModelIT.java
Patch:
@@ -158,8 +158,8 @@ public BedrockAi21Jurassic2ChatModel bedrockAi21Jurassic2ChatModel(
 			return new BedrockAi21Jurassic2ChatModel(jurassic2ChatBedrockApi,
 					BedrockAi21Jurassic2ChatOptions.builder()
 						.withTemperature(0.5)
-						.withMaxTokens(100)
-						.withTopP(0.9)
+						.withMaxTokens(500)
+						// .withTopP(0.9)
 						.build());
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/converse/BedrockConverseProxyChatAutoConfiguration.java
Patch:
@@ -51,7 +51,7 @@
  */
 @AutoConfiguration
 @EnableConfigurationProperties({ BedrockConverseProxyChatProperties.class, BedrockAwsConnectionConfiguration.class })
-@ConditionalOnClass({ BedrockRuntimeClient.class, BedrockRuntimeAsyncClient.class })
+@ConditionalOnClass({ BedrockProxyChatModel.class, BedrockRuntimeClient.class, BedrockRuntimeAsyncClient.class })
 @ConditionalOnProperty(prefix = BedrockConverseProxyChatProperties.CONFIG_PREFIX, name = "enabled",
 		havingValue = "true", matchIfMissing = true)
 @Import(BedrockAwsConnectionConfiguration.class)

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/ResponseFormat.java
Patch:
@@ -32,7 +32,7 @@
  * Setting the type to JSON_SCHEMA, enables Structured Outputs which ensures the model
  * will match your supplied JSON schema. Learn more in the
  * <a href="https://platform.openai.com/docs/guides/structured-outputs"> Structured
- * Outputs guide.</a <br/>
+ * Outputs guide.</a> <br/>
  *
  * References: <a href=
  * "https://platform.openai.com/docs/api-reference/chat/create#chat-create-response_format">OpenAi

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/OpenSearchVectorStoreIT.java
Patch:
@@ -31,6 +31,7 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -356,6 +357,7 @@ public void searchThresholdTest(String similarityFunction) {
 	}
 
 	@Test
+	@Disabled("GH-1645")
 	public void searchDocumentsInTwoIndicesTest() {
 		getContextRunner().run(context -> {
 			// given

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/Generation.java
Patch:
@@ -34,15 +34,15 @@ public class Generation implements ModelResult<AssistantMessage> {
 	private ChatGenerationMetadata chatGenerationMetadata;
 
 	/**
-	 * @deprecated Use {@link #Generation(AssitantMessage)} constructor instead.
+	 * @deprecated Use {@link #Generation(AssistantMessage)} constructor instead.
 	 */
 	@Deprecated
 	public Generation(String text) {
 		this(text, Map.of());
 	}
 
 	/**
-	 * @deprecated Use {@link #Generation(AssitantMessage)} constructor instead.
+	 * @deprecated Use {@link #Generation(AssistantMessage)} constructor instead.
 	 */
 	@Deprecated
 	public Generation(String text, Map<String, Object> properties) {
@@ -70,7 +70,7 @@ public ChatGenerationMetadata getMetadata() {
 	}
 
 	/**
-	 * @deprecated Use {@link #Generation(AssitantMessage, ChatGenerationMetadata)}
+	 * @deprecated Use {@link #Generation(AssistantMessage, ChatGenerationMetadata)}
 	 * constructor instead.
 	 * @param chatGenerationMetadata
 	 * @return

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingModel.java
Patch:
@@ -30,6 +30,7 @@
  * @author Christian Tzolov
  * @author Josh Long
  * @author Soby Chacko
+ * @author Jihoon Kim
  * @since 1.0.0
  *
  */
@@ -59,7 +60,7 @@ default float[] embed(String text) {
 	/**
 	 * Embeds a batch of texts into vectors.
 	 * @param texts list of texts to embed.
-	 * @return list of list of embedded vectors.
+	 * @return list of embedded vectors.
 	 */
 	default List<float[]> embed(List<String> texts) {
 		Assert.notNull(texts, "Texts must not be null");

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingResultMetadata.java
Patch:
@@ -23,13 +23,14 @@
 
 /**
  * @author Christian Tzolov
+ * @author Jihoon Kim
  */
 public class EmbeddingResultMetadata implements ResultMetadata {
 
 	public static EmbeddingResultMetadata EMPTY = new EmbeddingResultMetadata();
 
 	/**
-	 * The {@link MimeType} of the source data used to generate the embedding.
+	 * The {@link ModalityType} of the source data used to generate the embedding.
 	 */
 	private final ModalityType modalityType;
 
@@ -80,7 +81,7 @@ public static class ModalityUtils {
 
 		private static MimeType TEXT_MIME_TYPE = MimeTypeUtils.parseMimeType("text/*");
 
-		private static MimeType IMAGE_MIME_TYPE = MimeTypeUtils.parseMimeType("text/*");
+		private static MimeType IMAGE_MIME_TYPE = MimeTypeUtils.parseMimeType("image/*");
 
 		private static MimeType VIDEO_MIME_TYPE = MimeTypeUtils.parseMimeType("video/*");
 

File: vector-stores/spring-ai-opensearch-store/src/test/java/org/springframework/ai/vectorstore/OpenSearchVectorStoreIT.java
Patch:
@@ -31,7 +31,6 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -357,7 +356,6 @@ public void searchThresholdTest(String similarityFunction) {
 	}
 
 	@Test
-	@Disabled("GH-1645")
 	public void searchDocumentsInTwoIndicesTest() {
 		getContextRunner().run(context -> {
 			// given

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -34,9 +34,9 @@
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ResponseFormat;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.StreamOptions;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoiceBuilder;
+import org.springframework.ai.openai.api.ResponseFormat;
 import org.springframework.util.Assert;
 
 /**

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelResponseFormatIT.java
Patch:
@@ -33,8 +33,8 @@
 import org.springframework.ai.openai.OpenAiChatModel;
 import org.springframework.ai.openai.OpenAiChatOptions;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ResponseFormat;
 import org.springframework.ai.openai.api.OpenAiApi.ChatModel;
+import org.springframework.ai.openai.api.ResponseFormat;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -80,7 +80,7 @@ void jsonObject() throws JsonMappingException, JsonProcessingException {
 
 		Prompt prompt = new Prompt("List 8 planets. Use JSON response",
 				OpenAiChatOptions.builder()
-					.withResponseFormat(new ResponseFormat(ResponseFormat.Type.JSON_OBJECT))
+					.withResponseFormat(ResponseFormat.builder().type(ResponseFormat.Type.JSON_OBJECT).build())
 					.build());
 
 		ChatResponse response = this.openAiChatModel.call(prompt);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.ai.openai.chat;
 
-import java.time.Duration;
 import java.util.List;
 import java.util.Optional;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryAutoConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.retry.NonTransientAiException;
+import org.springframework.ai.retry.RetryUtils;
 import org.springframework.ai.retry.TransientAiException;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -43,7 +44,7 @@
  * @author Christian Tzolov
  */
 @AutoConfiguration
-@ConditionalOnClass(RetryTemplate.class)
+@ConditionalOnClass(RetryUtils.class)
 @EnableConfigurationProperties({ SpringAiRetryProperties.class })
 public class SpringAiRetryAutoConfiguration {
 

File: models/spring-ai-vertex-ai-embedding/src/test/java/org/springframework/ai/vertexai/embedding/text/VertexAiTextEmbeddingRetryTests.java
Patch:
@@ -73,7 +73,7 @@ public class VertexAiTextEmbeddingRetryTests {
 
 	@BeforeEach
 	public void setUp() {
-		this.retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		this.retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		this.retryTemplate.registerListener(this.retryListener);
 

File: spring-ai-retry/src/main/java/org/springframework/ai/retry/RetryUtils.java
Patch:
@@ -84,7 +84,8 @@ public <T extends Object, E extends Throwable> void onError(RetryContext context
 		.build();
 
 	/**
-	 * Useful in testing scenarios where you don't want to wait long for retry.
+	 * Useful in testing scenarios where you don't want to wait long for retry and now
+	 * show stack trace
 	 */
 	public static final RetryTemplate SHORT_RETRY_TEMPLATE = RetryTemplate.builder()
 		.maxAttempts(10)
@@ -95,7 +96,7 @@ public <T extends Object, E extends Throwable> void onError(RetryContext context
 			@Override
 			public <T extends Object, E extends Throwable> void onError(RetryContext context,
 					RetryCallback<T, E> callback, Throwable throwable) {
-				logger.warn("Retry error. Retry count:" + context.getRetryCount(), throwable);
+				logger.warn("Retry error. Retry count:" + context.getRetryCount());
 			}
 		})
 		.build();

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/api/MiniMaxRetryTests.java
Patch:
@@ -72,7 +72,7 @@ public class MiniMaxRetryTests {
 
 	@BeforeEach
 	public void beforeEach() {
-		this.retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		this.retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		this.retryTemplate.registerListener(this.retryListener);
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiRetryTests.java
Patch:
@@ -72,7 +72,7 @@ public class MistralAiRetryTests {
 
 	@BeforeEach
 	public void beforeEach() {
-		this.retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		this.retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		this.retryTemplate.registerListener(this.retryListener);
 

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotRetryTests.java
Patch:
@@ -62,7 +62,7 @@ public class MoonshotRetryTests {
 
 	@BeforeEach
 	public void beforeEach() {
-		RetryTemplate retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		RetryTemplate retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		retryTemplate.registerListener(this.retryListener);
 

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/api/QianFanRetryTests.java
Patch:
@@ -80,7 +80,7 @@ public class QianFanRetryTests {
 
 	@BeforeEach
 	public void beforeEach() {
-		RetryTemplate retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		RetryTemplate retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		retryTemplate.registerListener(this.retryListener);
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiRetryTests.java
Patch:
@@ -67,7 +67,7 @@ public class VertexAiGeminiRetryTests {
 
 	@BeforeEach
 	public void setUp() {
-		this.retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		this.retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		this.retryTemplate.registerListener(this.retryListener);
 

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/api/ZhiPuAiRetryTests.java
Patch:
@@ -84,7 +84,7 @@ public class ZhiPuAiRetryTests {
 
 	@BeforeEach
 	public void beforeEach() {
-		this.retryTemplate = RetryUtils.DEFAULT_RETRY_TEMPLATE;
+		this.retryTemplate = RetryUtils.SHORT_RETRY_TEMPLATE;
 		this.retryListener = new TestRetryListener();
 		this.retryTemplate.registerListener(this.retryListener);
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptions.java
Patch:
@@ -53,7 +53,7 @@ static FunctionCallingOptionsBuilder builder() {
 	void setFunctionCallbacks(List<FunctionCallback> functionCallbacks);
 
 	/**
-	 * @return <@link Set> of function names from the ChatModel registry to be used in the
+	 * @return {@link Set} of function names from the ChatModel registry to be used in the
 	 * next chat completion requests.
 	 */
 	Set<String> getFunctions();

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/AiObservationMetricNames.java
Patch:
@@ -18,7 +18,7 @@
 
 /**
  * Enumeration of metric names used in AI observations.
- * <p/>
+ * <p>
  * Based on OpenTelemetry's Semantic Conventions for AI systems.
  *
  * @author Thomas Vitale

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatOptions.java
Patch:
@@ -22,7 +22,8 @@
 import org.springframework.lang.Nullable;
 
 /**
- * The ChatOptions represent the common options, portable across different chat models.
+ * {@link ModelOptions} representing the common options that are portable across different
+ * chat models.
  */
 public interface ChatOptions extends ModelOptions {
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptions.java
Patch:
@@ -53,8 +53,8 @@ static FunctionCallingOptionsBuilder builder() {
 	void setFunctionCallbacks(List<FunctionCallback> functionCallbacks);
 
 	/**
-	 * @return List of function names from the ChatModel registry to be used in the next
-	 * chat completion requests.
+	 * @return <@link Set> of function names from the ChatModel registry to be used in the
+	 * next chat completion requests.
 	 */
 	Set<String> getFunctions();
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/VectorStoreObservationContext.java
Patch:
@@ -152,11 +152,11 @@ public void setQueryResponse(@Nullable List<Document> queryResponse) {
 	public enum Operation {
 
 		/**
-		 * VectorStore delete operation.
+		 * VectorStore add operation.
 		 */
 		ADD("add"),
 		/**
-		 * VectorStore add operation.
+		 * VectorStore delete operation.
 		 */
 		DELETE("delete"),
 		/**

File: document-readers/markdown-reader/src/main/java/org/springframework/ai/reader/markdown/MarkdownDocumentReader.java
Patch:
@@ -111,7 +111,7 @@ static class DocumentVisitor extends AbstractVisitor {
 
 		private Document.Builder currentDocumentBuilder;
 
-		public DocumentVisitor(MarkdownDocumentReaderConfig config) {
+		DocumentVisitor(MarkdownDocumentReaderConfig config) {
 			this.config = config;
 		}
 

File: document-readers/markdown-reader/src/main/java/org/springframework/ai/reader/markdown/config/MarkdownDocumentReaderConfig.java
Patch:
@@ -56,7 +56,7 @@ public static Builder builder() {
 		return new Builder();
 	}
 
-	public static class Builder {
+	public static final class Builder {
 
 		private boolean horizontalRuleCreateDocument = false;
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockConverseTestConfiguration.java
Patch:
@@ -18,13 +18,13 @@
 
 import java.time.Duration;
 
+import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
+import software.amazon.awssdk.regions.Region;
+
 import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.context.annotation.Bean;
 
-import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
-import software.amazon.awssdk.regions.Region;
-
 @SpringBootConfiguration
 public class BedrockConverseTestConfiguration {
 

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModelIT.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.ai.bedrock.converse;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -32,6 +30,8 @@
 import org.junit.jupiter.params.provider.ValueSource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import reactor.core.publisher.Flux;
+
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.springframework.ai.chat.messages.Message;
@@ -57,7 +57,7 @@
 import org.springframework.core.io.Resource;
 import org.springframework.util.MimeTypeUtils;
 
-import reactor.core.publisher.Flux;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @SpringBootTest(classes = BedrockConverseTestConfiguration.class, properties = "spring.ai.retry.on-http-codes=429")
 @EnabledIfEnvironmentVariable(named = "AWS_ACCESS_KEY_ID", matches = ".*")

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModelObservationIT.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.ai.bedrock.converse;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -45,6 +43,8 @@
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Bean;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 /**
  * Integration tests for observation instrumentation in {@link BedrockProxyChatModel}.
  *

File: models/spring-ai-bedrock-converse/src/test/java/org/springframework/ai/bedrock/converse/MockWeatherService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024-2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -65,7 +65,7 @@ public enum Unit {
 		 */
 		public final String unitName;
 
-		private Unit(String text) {
+		Unit(String text) {
 			this.unitName = text;
 		}
 

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				MiniMaxChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				OpenAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoiceBuilder;
-import org.springframework.ai.openai.api.OpenAiApi.FunctionTool.Type;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -71,7 +70,7 @@ public void toolFunctionCall() {
 		var message = new ChatCompletionMessage("What's the weather like in San Francisco, Tokyo, and Paris?",
 				Role.USER);
 
-		var functionTool = new OpenAiApi.FunctionTool(Type.FUNCTION,
+		var functionTool = new OpenAiApi.FunctionTool(OpenAiApi.FunctionTool.Type.FUNCTION,
 				new OpenAiApi.FunctionTool.Function("Get the weather in location. Return temperature in Celsius.",
 						"getCurrentWeather", ModelOptionsUtils.jsonToMap("""
 								{

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				ZhiPuAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/api/ZhiPuAiApiToolFunctionCallIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionRequest;
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionRequest.ToolChoiceBuilder;
-import org.springframework.ai.zhipuai.api.ZhiPuAiApi.FunctionTool.Type;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -68,7 +67,7 @@ public void toolFunctionCall() {
 		var message = new ChatCompletionMessage(
 				"What's the weather like in San Francisco? Return the temperature in Celsius.", Role.USER);
 
-		var functionTool = new ZhiPuAiApi.FunctionTool(Type.FUNCTION,
+		var functionTool = new ZhiPuAiApi.FunctionTool(ZhiPuAiApi.FunctionTool.Type.FUNCTION,
 				new ZhiPuAiApi.FunctionTool.Function(
 						"Get the weather in location. Return temperature in 30°F or 30°C format.", "getCurrentWeather",
 						ModelOptionsUtils.jsonToMap("""

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfigurationIT.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.List;
 
-import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				MiniMaxChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				OpenAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -34,6 +34,7 @@
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoiceBuilder;
+import org.springframework.ai.openai.api.OpenAiApi.FunctionTool.Type;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -70,7 +71,7 @@ public void toolFunctionCall() {
 		var message = new ChatCompletionMessage("What's the weather like in San Francisco, Tokyo, and Paris?",
 				Role.USER);
 
-		var functionTool = new OpenAiApi.FunctionTool(OpenAiApi.FunctionTool.Type.FUNCTION,
+		var functionTool = new OpenAiApi.FunctionTool(Type.FUNCTION,
 				new OpenAiApi.FunctionTool.Function("Get the weather in location. Return temperature in Celsius.",
 						"getCurrentWeather", ModelOptionsUtils.jsonToMap("""
 								{

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				ZhiPuAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/api/ZhiPuAiApiToolFunctionCallIT.java
Patch:
@@ -34,6 +34,7 @@
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionRequest;
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionRequest.ToolChoiceBuilder;
+import org.springframework.ai.zhipuai.api.ZhiPuAiApi.FunctionTool.Type;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -67,7 +68,7 @@ public void toolFunctionCall() {
 		var message = new ChatCompletionMessage(
 				"What's the weather like in San Francisco? Return the temperature in Celsius.", Role.USER);
 
-		var functionTool = new ZhiPuAiApi.FunctionTool(ZhiPuAiApi.FunctionTool.Type.FUNCTION,
+		var functionTool = new ZhiPuAiApi.FunctionTool(Type.FUNCTION,
 				new ZhiPuAiApi.FunctionTool.Function(
 						"Get the weather in location. Return temperature in 30°F or 30°C format.", "getCurrentWeather",
 						ModelOptionsUtils.jsonToMap("""

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfigurationIT.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.List;
 
+import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -224,6 +224,7 @@ public List<Document> doSimilaritySearch(SearchRequest request) {
 		float[] embedding = this.embeddingModel.embed(request.getQuery());
 
 		var searchParamBuilder = SearchParam.newBuilder()
+			.withDatabaseName(this.config.databaseName)
 			.withCollectionName(this.config.collectionName)
 			.withConsistencyLevel(ConsistencyLevelEnum.STRONG)
 			.withMetricType(this.config.metricType)

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/AnthropicApiToolIT.java
Patch:
@@ -56,7 +56,7 @@ public class AnthropicApiToolIT {
 
 	public static final ConcurrentHashMap<String, Function> FUNCTIONS = new ConcurrentHashMap<>();
 
-	private static final Logger logger = LoggerFactory.getLogger(AnthropicApiLegacyToolIT.class);
+	private static final Logger logger = LoggerFactory.getLogger(AnthropicApiToolIT.class);
 
 	AnthropicApi anthropicApi = new AnthropicApi(System.getenv("ANTHROPIC_API_KEY"));
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelProxyToolCallsIT.java
Patch:
@@ -60,7 +60,7 @@
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
 class OpenAiChatModelProxyToolCallsIT {
 
-	private static final Logger logger = LoggerFactory.getLogger(OpenAiChatModelIT.class);
+	private static final Logger logger = LoggerFactory.getLogger(OpenAiChatModelProxyToolCallsIT.class);
 
 	private static final String DEFAULT_MODEL = "gpt-4o-mini";
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java
Patch:
@@ -52,7 +52,6 @@
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.tool.MockWeatherService;
 import org.springframework.ai.openai.chat.ActorsFilms;
-import org.springframework.ai.openai.chat.OpenAiChatModelIT;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringBootConfiguration;
@@ -70,7 +69,7 @@
 @Disabled("Due to rate limiting it is hard to run it in one go")
 class GroqWithOpenAiChatModelIT {
 
-	private static final Logger logger = LoggerFactory.getLogger(OpenAiChatModelIT.class);
+	private static final Logger logger = LoggerFactory.getLogger(GroqWithOpenAiChatModelIT.class);
 
 	private static final String GROQ_BASE_URL = "https://api.groq.com/openai";
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/OllamaWithOpenAiChatModelIT.java
Patch:
@@ -55,7 +55,6 @@
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.tool.MockWeatherService;
 import org.springframework.ai.openai.chat.ActorsFilms;
-import org.springframework.ai.openai.chat.OpenAiChatModelIT;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringBootConfiguration;
@@ -73,7 +72,7 @@
 @SpringBootTest(classes = OllamaWithOpenAiChatModelIT.Config.class)
 class OllamaWithOpenAiChatModelIT {
 
-	private static final Logger logger = LoggerFactory.getLogger(OpenAiChatModelIT.class);
+	private static final Logger logger = LoggerFactory.getLogger(OllamaWithOpenAiChatModelIT.class);
 
 	private static final String DEFAULT_OLLAMA_MODEL = "mistral";
 

File: models/spring-ai-bedrock-converse/src/main/java/org/springframework/ai/bedrock/converse/BedrockProxyChatModel.java
Patch:
@@ -165,7 +165,6 @@ public BedrockProxyChatModel(BedrockRuntimeClient bedrockRuntimeClient,
 	 * https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html
 	 * https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_Converse.html
 	 * https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/bedrockruntime/BedrockRuntimeClient.html#converse
-	 * @param bedrockConverseRequest Model invocation request.
 	 * @return The model invocation response.
 	 */
 	@Override
@@ -472,7 +471,6 @@ private ChatResponse toChatResponse(ConverseResponse response) {
 	 * https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html
 	 * https://docs.aws.amazon.com/bedrock/latest/APIReference/API_runtime_Converse.html
 	 * https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/services/bedrockruntime/BedrockRuntimeAsyncClient.html#converseStream
-	 * @param bedrockConverseRequest Model invocation request.
 	 * @return The model invocation response stream.
 	 */
 	@Override

File: vector-stores/spring-ai-gemfire-store/src/test/java/org/springframework/ai/vectorstore/GemFireVectorStoreIT.java
Patch:
@@ -30,6 +30,7 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.document.Document;
@@ -50,6 +51,7 @@
  * @author Thomas Vitale
  * @since 1.0.0
  */
+@Disabled
 public class GemFireVectorStoreIT {
 
 	public static final String INDEX_NAME = "spring-ai-index1";

File: vector-stores/spring-ai-gemfire-store/src/test/java/org/springframework/ai/vectorstore/GemFireVectorStoreObservationIT.java
Patch:
@@ -31,6 +31,7 @@
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.document.Document;
@@ -56,6 +57,7 @@
  * @author Thomas Vitale
  * @author Soby Chacko
  */
+@Disabled
 public class GemFireVectorStoreObservationIT {
 
 	public static final String TEST_INDEX_NAME = "spring-ai-index1";

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3CreateRequestTests.java
Patch:
@@ -34,7 +34,7 @@
 public class BedrockAnthropic3CreateRequestTests {
 
 	private Anthropic3ChatBedrockApi anthropicChatApi = new Anthropic3ChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),
-			Region.EU_CENTRAL_1.id(), Duration.ofMillis(1000L));
+			Region.US_EAST_1.id(), Duration.ofMillis(1000L));
 
 	@Test
 	public void createRequestWithChatOptions() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApiIT.java
Patch:
@@ -42,7 +42,7 @@
 public class TitanChatBedrockApiIT {
 
 	TitanChatBedrockApi titanBedrockApi = new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),
-			EnvironmentVariableCredentialsProvider.create(), Region.EU_CENTRAL_1.id(), ModelOptionsUtils.OBJECT_MAPPER,
+			EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), ModelOptionsUtils.OBJECT_MAPPER,
 			Duration.ofMinutes(2));
 
 	TitanChatRequest titanChatRequest = TitanChatRequest.builder("Give me the names of 3 famous pirates?")

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/AiProvider.java
Patch:
@@ -43,6 +43,7 @@ public enum AiProvider {
 	ZHIPUAI("zhipuai"),
 	SPRING_AI("spring_ai"),
 	VERTEX_AI("vertex_ai"),
+	BEDROCK_CONVERSE("bedrock_converse"),
 	ONNX("onnx");
 
 	private final String value;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPaLm2AutoConfigurationIT.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
@@ -33,6 +34,7 @@
 
 // NOTE: works only with US location. Use VPN if you are outside US.
 @EnabledIfEnvironmentVariable(named = "PALM_API_KEY", matches = ".*")
+@Disabled("Disabled due to the PALM API being decommissioned by Google.")
 public class VertexAiPaLm2AutoConfigurationIT {
 
 	private static final Log logger = LogFactory.getLog(VertexAiPaLm2AutoConfigurationIT.class);

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				MiniMaxChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				OpenAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoiceBuilder;
-import org.springframework.ai.openai.api.OpenAiApi.FunctionTool.Type;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -71,7 +70,7 @@ public void toolFunctionCall() {
 		var message = new ChatCompletionMessage("What's the weather like in San Francisco, Tokyo, and Paris?",
 				Role.USER);
 
-		var functionTool = new OpenAiApi.FunctionTool(Type.FUNCTION,
+		var functionTool = new OpenAiApi.FunctionTool(OpenAiApi.FunctionTool.Type.FUNCTION,
 				new OpenAiApi.FunctionTool.Function("Get the weather in location. Return temperature in Celsius.",
 						"getCurrentWeather", ModelOptionsUtils.jsonToMap("""
 								{

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/ChatCompletionRequestTests.java
Patch:
@@ -83,7 +83,7 @@ public void promptOptionsTools() {
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).isEqualTo(TOOL_FUNCTION_NAME);
+		assertThat(request.tools().get(0).getFunction().getName()).isEqualTo(TOOL_FUNCTION_NAME);
 	}
 
 	@Test
@@ -120,7 +120,7 @@ public void defaultOptionsTools() {
 				ZhiPuAiChatOptions.builder().withFunction(TOOL_FUNCTION_NAME).build()), false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		// Override the default options function with one from the prompt
@@ -134,7 +134,7 @@ public void defaultOptionsTools() {
 				false);
 
 		assertThat(request.tools()).hasSize(1);
-		assertThat(request.tools().get(0).function().name()).as("Explicitly enabled function")
+		assertThat(request.tools().get(0).getFunction().getName()).as("Explicitly enabled function")
 			.isEqualTo(TOOL_FUNCTION_NAME);
 
 		assertThat(client.getFunctionCallbackRegister()).hasSize(1);

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/api/ZhiPuAiApiToolFunctionCallIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionRequest;
 import org.springframework.ai.zhipuai.api.ZhiPuAiApi.ChatCompletionRequest.ToolChoiceBuilder;
-import org.springframework.ai.zhipuai.api.ZhiPuAiApi.FunctionTool.Type;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -68,7 +67,7 @@ public void toolFunctionCall() {
 		var message = new ChatCompletionMessage(
 				"What's the weather like in San Francisco? Return the temperature in Celsius.", Role.USER);
 
-		var functionTool = new ZhiPuAiApi.FunctionTool(Type.FUNCTION,
+		var functionTool = new ZhiPuAiApi.FunctionTool(ZhiPuAiApi.FunctionTool.Type.FUNCTION,
 				new ZhiPuAiApi.FunctionTool.Function(
 						"Get the weather in location. Return temperature in 30°F or 30°C format.", "getCurrentWeather",
 						ModelOptionsUtils.jsonToMap("""

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfigurationIT.java
Patch:
@@ -18,9 +18,9 @@
 
 import java.util.List;
 
-import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/RedisVectorStore.java
Patch:
@@ -81,6 +81,7 @@
  * @author Eddú Meléndez
  * @author Thomas Vitale
  * @author Soby Chacko
+ * @author Jihoon Kim
  * @see VectorStore
  * @see RedisVectorStoreConfig
  * @see EmbeddingModel
@@ -335,8 +336,7 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 			.withCollectionName(this.config.indexName)
 			.withDimensions(this.embeddingModel.dimensions())
 			.withFieldName(this.config.embeddingFieldName)
-			.withSimilarityMetric(
-					"COSINE".equals(DEFAULT_DISTANCE_METRIC) ? VectorStoreSimilarityMetric.COSINE.value() : "");
+			.withSimilarityMetric(VectorStoreSimilarityMetric.COSINE.value());
 
 	}
 
@@ -467,7 +467,7 @@ public Builder withEmbeddingFieldName(String name) {
 			}
 
 			/**
-			 * Configures the Redis vector algorithmto use.
+			 * Configures the Redis vector algorithm to use.
 			 * @param algorithm the vector algorithm to use
 			 * @return this builder
 			 */

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -197,6 +197,7 @@ public Optional<Boolean> doDelete(List<String> idList) {
 				idList.stream().map(id -> "'" + id + "'").collect(Collectors.joining(",")));
 
 		R<MutationResult> status = this.milvusClient.delete(DeleteParam.newBuilder()
+			.withDatabaseName(this.config.databaseName)
 			.withCollectionName(this.config.collectionName)
 			.withExpr(deleteExpression)
 			.build());

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApi.java
Patch:
@@ -32,7 +32,6 @@
 import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
-import org.springframework.boot.context.properties.bind.ConstructorBinding;
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
@@ -339,7 +338,6 @@ public record FunctionTool(
 		 * Create a tool of type 'function' and the given function definition.
 		 * @param function function definition.
 		 */
-		@ConstructorBinding
 		public FunctionTool(Function function) {
 			this(Type.FUNCTION, function);
 		}
@@ -381,7 +379,6 @@ public record Function(
 			 * @param name tool function name.
 			 * @param parameters tool function schema.
 			 */
-			@ConstructorBinding
 			public Function(String description, String name, Map<String, Object> parameters) {
 				this(description, name, ModelOptionsUtils.toJsonString(parameters));
 			}

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiApi.java
Patch:
@@ -34,7 +34,6 @@
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.observation.conventions.AiProvider;
 import org.springframework.ai.retry.RetryUtils;
-import org.springframework.boot.context.properties.bind.ConstructorBinding;
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
@@ -324,7 +323,6 @@ public record FunctionTool(@JsonProperty("type") Type type, @JsonProperty("funct
 		 * Create a tool of type 'function' and the given function definition.
 		 * @param function function definition.
 		 */
-		@ConstructorBinding
 		public FunctionTool(Function function) {
 			this(Type.FUNCTION, function);
 		}
@@ -362,7 +360,6 @@ public record Function(@JsonProperty("description") String description, @JsonPro
 			 * @param name tool function name.
 			 * @param jsonSchema tool function schema as json.
 			 */
-			@ConstructorBinding
 			public Function(String description, String name, String jsonSchema) {
 				this(description, name, ModelOptionsUtils.jsonToMap(jsonSchema));
 			}

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/api/MoonshotApi.java
Patch:
@@ -31,7 +31,6 @@
 import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
-import org.springframework.boot.context.properties.bind.ConstructorBinding;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
@@ -600,7 +599,6 @@ public record FunctionTool(@JsonProperty("type") Type type, @JsonProperty("funct
 		 * Create a tool of type 'function' and the given function definition.
 		 * @param function function definition.
 		 */
-		@ConstructorBinding
 		public FunctionTool(Function function) {
 			this(Type.FUNCTION, function);
 		}
@@ -638,7 +636,6 @@ public record Function(@JsonProperty("description") String description, @JsonPro
 			 * @param name tool function name.
 			 * @param jsonSchema tool function schema as json.
 			 */
-			@ConstructorBinding
 			public Function(String description, String name, String jsonSchema) {
 				this(description, name, ModelOptionsUtils.jsonToMap(jsonSchema));
 			}

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java
Patch:
@@ -34,7 +34,6 @@
 
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.observation.conventions.AiProvider;
-import org.springframework.boot.context.properties.bind.ConstructorBinding;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
@@ -654,7 +653,6 @@ public record Tool(
 			 * Create a tool of type 'function' and the given function definition.
 			 * @param function function definition.
 			 */
-			@ConstructorBinding
 			public Tool(Function function) {
 				this(Type.FUNCTION, function);
 			}
@@ -690,7 +688,6 @@ public record Function(
 				 * @param name tool function name.
 				 * @param jsonSchema tool function schema as json.
 				 */
-				@ConstructorBinding
 				public Function(String description, String name, String jsonSchema) {
 					this(description, name, ModelOptionsUtils.jsonToMap(jsonSchema));
 				}

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanChatOptions.java
Patch:
@@ -25,7 +25,6 @@
 
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.qianfan.api.QianFanApi;
-import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
  * QianFanChatOptions represents the options for performing chat completion using the
@@ -67,7 +66,6 @@ public class QianFanChatOptions implements ChatOptions {
 	/**
 	 * Up to 4 sequences where the API will stop generating further tokens.
 	 */
-	@NestedConfigurationProperty
 	private @JsonProperty("stop") List<String> stop;
 	/**
 	 * What sampling temperature to use, between 0 and 1. Higher values like 0.8 will make the output

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/api/ZhiPuAiApi.java
Patch:
@@ -33,7 +33,6 @@
 import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
-import org.springframework.boot.context.properties.bind.ConstructorBinding;
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
@@ -322,7 +321,6 @@ public record FunctionTool(
 		 * Create a tool of type 'function' and the given function definition.
 		 * @param function function definition.
 		 */
-		@ConstructorBinding
 		public FunctionTool(Function function) {
 			this(Type.FUNCTION, function);
 		}
@@ -359,7 +357,6 @@ public record Function(
 			 * @param name tool function name.
 			 * @param jsonSchema tool function schema as json.
 			 */
-			@ConstructorBinding
 			public Function(String description, String name, String jsonSchema) {
 				this(description, name, ModelOptionsUtils.jsonToMap(jsonSchema));
 			}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlAutoConfiguration.java
Patch:
@@ -44,7 +44,8 @@ public class PostgresMlAutoConfiguration {
 	public PostgresMlEmbeddingModel postgresMlEmbeddingModel(JdbcTemplate jdbcTemplate,
 			PostgresMlEmbeddingProperties embeddingProperties) {
 
-		return new PostgresMlEmbeddingModel(jdbcTemplate, embeddingProperties.getOptions());
+		return new PostgresMlEmbeddingModel(jdbcTemplate, embeddingProperties.getOptions(),
+				embeddingProperties.isCreateExtension());
 	}
 
 }

File: models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingModel.java
Patch:
@@ -135,7 +135,7 @@ public float[] embed(String text) {
 		return this.jdbcTemplate.queryForObject(
 				"SELECT pgml.embed(?, ?, ?::JSONB)" + this.defaultOptions.getVectorType().cast + " AS embedding",
 				this.defaultOptions.getVectorType().rowMapper, this.defaultOptions.getTransformer(), text,
-				this.defaultOptions.getKwargs());
+				ModelOptionsUtils.toJsonString(this.defaultOptions.getKwargs()));
 	}
 
 	@Override
@@ -203,7 +203,6 @@ PostgresMlEmbeddingOptions mergeOptions(EmbeddingOptions requestOptions) {
 	@Override
 	public void afterPropertiesSet() {
 		this.jdbcTemplate.execute("CREATE EXTENSION IF NOT EXISTS pgml");
-		this.jdbcTemplate.execute("CREATE EXTENSION IF NOT EXISTS hstore");
 		if (StringUtils.hasText(this.defaultOptions.getVectorType().extensionName)) {
 			this.jdbcTemplate
 				.execute("CREATE EXTENSION IF NOT EXISTS " + this.defaultOptions.getVectorType().extensionName);

File: models/spring-ai-postgresml/src/test/java/org/springframework/ai/postgresml/PostgresMlEmbeddingModelIT.java
Patch:
@@ -55,7 +55,7 @@
 @JdbcTest(properties = "logging.level.sql=TRACE")
 @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
 @Testcontainers
-@Disabled("Disabled from automatic execution, as it requires an excessive amount of memory (over 9GB)!")
+@Disabled("Disabled from automatic execution, as it pulls a very large image file (over 9GB)!")
 class PostgresMlEmbeddingModelIT {
 
 	@Container

File: models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/api/StabilityAiApi.java
Patch:
@@ -100,7 +100,7 @@ public record GenerateImageRequest(@JsonProperty("text_prompts") List<TextPrompt
 			@JsonProperty("cfg_scale") Float cfgScale, @JsonProperty("clip_guidance_preset") String clipGuidancePreset,
 			@JsonProperty("sampler") String sampler, @JsonProperty("samples") Integer samples,
 			@JsonProperty("seed") Long seed, @JsonProperty("steps") Integer steps,
-			@JsonProperty("style_present") String stylePreset) {
+			@JsonProperty("style_preset") String stylePreset) {
 
 		public static Builder builder() {
 			return new Builder();

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallback.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.springframework.ai.model.function;
 
-import java.util.Map;
-
 import org.springframework.ai.chat.model.ToolContext;
 
 /**

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cosmosdb/CosmosDBVectorStoreAutoConfiguration.java
Patch:
@@ -73,7 +73,7 @@ public CosmosDBVectorStore cosmosDBVectorStore(ObservationRegistry observationRe
 		config.setDatabaseName(properties.getDatabaseName());
 		config.setContainerName(properties.getContainerName());
 		config.setMetadataFields(properties.getMetadataFields());
-		config.setVectorStoreThoughput(properties.getVectorStoreThoughput());
+		config.setVectorStoreThroughput(properties.getVectorStoreThroughput());
 		config.setVectorDimensions(properties.getVectorDimensions());
 		return new CosmosDBVectorStore(observationRegistry, customObservationConvention.getIfAvailable(),
 				cosmosAsyncClient, config, embeddingModel, batchingStrategy);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cosmosdb/CosmosDBVectorStoreAutoConfigurationIT.java
Patch:
@@ -51,7 +51,7 @@ public class CosmosDBVectorStoreAutoConfigurationIT {
 		.withPropertyValues("spring.ai.vectorstore.cosmosdb.containerName=test-container")
 		.withPropertyValues("spring.ai.vectorstore.cosmosdb.partitionKeyPath=/id")
 		.withPropertyValues("spring.ai.vectorstore.cosmosdb.metadataFields=country,year,city")
-		.withPropertyValues("spring.ai.vectorstore.cosmosdb.vectorStoreThoughput=1000")
+		.withPropertyValues("spring.ai.vectorstore.cosmosdb.vectorStoreThroughput=1000")
 		.withPropertyValues("spring.ai.vectorstore.cosmosdb.vectorDimensions=384")
 		.withPropertyValues("spring.ai.vectorstore.cosmosdb.endpoint=" + System.getenv("AZURE_COSMOSDB_ENDPOINT"))
 		.withPropertyValues("spring.ai.vectorstore.cosmosdb.key=" + System.getenv("AZURE_COSMOSDB_KEY"))

File: vector-stores/spring-ai-azure-cosmos-db-store/src/test/java/org/springframework/ai/vectorstore/CosmosDBVectorStoreIT.java
Patch:
@@ -168,7 +168,7 @@ public VectorStore vectorStore(CosmosAsyncClient cosmosClient, EmbeddingModel em
 			config.setDatabaseName("test-database");
 			config.setContainerName("test-container");
 			config.setMetadataFields("country,year,city");
-			config.setVectorStoreThoughput(1000);
+			config.setVectorStoreThroughput(1000);
 			return new CosmosDBVectorStore(null, convention, cosmosClient, config, embeddingModel);
 
 		}

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaImage.java
Patch:
@@ -22,6 +22,6 @@
  */
 public class OllamaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.13");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.14");
 
 }

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaImage.java
Patch:
@@ -17,6 +17,6 @@
 
 public class OllamaImage {
 
-	public static final String IMAGE = "ollama/ollama:0.3.13";
+	public static final String IMAGE = "ollama/ollama:0.3.14";
 
 }

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaImage.java
Patch:
@@ -22,6 +22,6 @@
  */
 public class OllamaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.13");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.14");
 
 }

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/client/AnthropicChatClientIT.java
Patch:
@@ -284,7 +284,7 @@ void multiModalityEmbeddedImage(String modelName) throws IOException {
 	void multiModalityImageUrl(String modelName) throws IOException {
 
 		// TODO: add url method that wrapps the checked exception.
-		URL url = new URL("https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png");
+		URL url = new URL("https://docs.spring.io/spring-ai/reference/1.0.0-SNAPSHOT/_images/multimodal.test.png");
 
 		// @formatter:off
 		String response = ChatClient.create(chatModel).prompt()

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientIT.java
Patch:
@@ -314,7 +314,7 @@ void multiModalityEmbeddedImage(String modelName) throws IOException {
 	void multiModalityImageUrl(String modelName) throws IOException {
 
 		// TODO: add url method that wrapps the checked exception.
-		URL url = new URL("https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png");
+		URL url = new URL("https://docs.spring.io/spring-ai/reference/_images/multimodal.test.png");
 
 		// @formatter:off
 		String response = ChatClient.create(chatModel).prompt()
@@ -334,7 +334,7 @@ void multiModalityImageUrl(String modelName) throws IOException {
 	void streamingMultiModalityImageUrl() throws IOException {
 
 		// TODO: add url method that wrapps the checked exception.
-		URL url = new URL("https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png");
+		URL url = new URL("https://docs.spring.io/spring-ai/reference/_images/multimodal.test.png");
 
 		// @formatter:off
 		Flux<String> response = ChatClient.create(chatModel).prompt()

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/ChatClientTest.java
Patch:
@@ -506,7 +506,7 @@ public void complexCall() throws MalformedURLException {
 		var options = FunctionCallingOptions.builder().build();
 		when(chatModel.getDefaultOptions()).thenReturn(options);
 
-		var url = new URL("https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png");
+		var url = new URL("https://docs.spring.io/spring-ai/reference/_images/multimodal.test.png");
 
 		// @formatter:off
 		ChatClient client = ChatClient.builder(chatModel)
@@ -533,7 +533,7 @@ public void complexCall() throws MalformedURLException {
 		assertThat(userMessage.getMedia()).hasSize(1);
 		assertThat(userMessage.getMedia().iterator().next().getMimeType()).isEqualTo(MimeTypeUtils.IMAGE_PNG);
 		assertThat(userMessage.getMedia().iterator().next().getData())
-			.isEqualTo("https://docs.spring.io/spring-ai/reference/1.0-SNAPSHOT/_images/multimodal.test.png");
+			.isEqualTo("https://docs.spring.io/spring-ai/reference/_images/multimodal.test.png");
 
 		FunctionCallingOptions runtieOptions = (FunctionCallingOptions) promptCaptor.getValue().getOptions();
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaChatModel.java
Patch:
@@ -43,6 +43,7 @@
 import org.springframework.ai.model.function.FunctionCallbackContext;
 import org.springframework.ai.model.function.FunctionCallingOptions;
 import org.springframework.ai.ollama.api.OllamaApi;
+import org.springframework.ai.ollama.api.OllamaModel;
 import org.springframework.ai.ollama.api.OllamaApi.ChatRequest;
 import org.springframework.ai.ollama.api.OllamaApi.Message.Role;
 import org.springframework.ai.ollama.api.OllamaApi.Message.ToolCall;
@@ -379,7 +380,7 @@ public ChatOptions getDefaultOptions() {
 	 * Pull the given model into Ollama based on the specified strategy.
 	 */
 	private void initializeModelIfEnabled(String model, PullModelStrategy pullModelStrategy) {
-		if (!PullModelStrategy.NEVER.equals(pullModelStrategy)) {
+		if (pullModelStrategy != null && !PullModelStrategy.NEVER.equals(pullModelStrategy)) {
 			this.modelManager.pullModel(model, pullModelStrategy);
 		}
 	}
@@ -397,7 +398,7 @@ public static class Builder {
 
 		private OllamaApi ollamaApi;
 
-		private OllamaOptions defaultOptions = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);
+		private OllamaOptions defaultOptions = OllamaOptions.create().withModel(OllamaModel.MISTRAL.id());
 
 		private FunctionCallbackContext functionCallbackContext;
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaEmbeddingModel.java
Patch:
@@ -30,6 +30,7 @@
 import org.springframework.ai.embedding.observation.EmbeddingModelObservationDocumentation;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.ollama.api.OllamaApi;
+import org.springframework.ai.ollama.api.OllamaModel;
 import org.springframework.ai.ollama.api.OllamaApi.EmbeddingsResponse;
 import org.springframework.ai.ollama.management.ModelManagementOptions;
 import org.springframework.ai.ollama.management.OllamaModelManager;
@@ -163,7 +164,7 @@ private EmbeddingOptions buildRequestOptions(OllamaApi.EmbeddingsRequest request
 	 * Pull the given model into Ollama based on the specified strategy.
 	 */
 	private void initializeModelIfEnabled(String model, PullModelStrategy pullModelStrategy) {
-		if (!PullModelStrategy.NEVER.equals(pullModelStrategy)) {
+		if (pullModelStrategy != null && !PullModelStrategy.NEVER.equals(pullModelStrategy)) {
 			this.modelManager.pullModel(model, pullModelStrategy);
 		}
 	}
@@ -212,7 +213,7 @@ public static class Builder {
 
 		private OllamaApi ollamaApi;
 
-		private OllamaOptions defaultOptions = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);
+		private OllamaOptions defaultOptions = OllamaOptions.create().withModel(OllamaModel.MXBAI_EMBED_LARGE.id());
 
 		private ObservationRegistry observationRegistry = ObservationRegistry.NOOP;
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaOptions.java
Patch:
@@ -51,8 +51,6 @@
 @JsonInclude(Include.NON_NULL)
 public class OllamaOptions implements FunctionCallingOptions, ChatOptions, EmbeddingOptions {
 
-	public static final String DEFAULT_MODEL = OllamaModel.MISTRAL.id();
-
 	private static final List<String> NON_SUPPORTED_FIELDS = List.of("model", "format", "keep_alive", "truncate");
 
 	// Following fields are options which must be set when the model is loaded into
@@ -309,7 +307,7 @@ public class OllamaOptions implements FunctionCallingOptions, ChatOptions, Embed
 	 * Strategy for pulling models at run-time.
 	 */
 	@JsonIgnore
-	private PullModelStrategy pullModelStrategy = PullModelStrategy.NEVER;
+	private PullModelStrategy pullModelStrategy;
 
 	public static OllamaOptions builder() {
 		return new OllamaOptions();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaChatProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.ollama;
 
+import org.springframework.ai.ollama.api.OllamaModel;
 import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
@@ -41,7 +42,7 @@ public class OllamaChatProperties {
 	 * generative's defaults.
 	 */
 	@NestedConfigurationProperty
-	private OllamaOptions options = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);
+	private OllamaOptions options = OllamaOptions.create().withModel(OllamaModel.MISTRAL.id());
 
 	public String getModel() {
 		return this.options.getModel();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.ollama;
 
+import org.springframework.ai.ollama.api.OllamaModel;
 import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
@@ -41,7 +42,7 @@ public class OllamaEmbeddingProperties {
 	 * generative's defaults.
 	 */
 	@NestedConfigurationProperty
-	private OllamaOptions options = OllamaOptions.create().withModel(OllamaOptions.DEFAULT_MODEL);
+	private OllamaOptions options = OllamaOptions.create().withModel(OllamaModel.MXBAI_EMBED_LARGE.id());
 
 	public String getModel() {
 		return this.options.getModel();

File: vector-stores/spring-ai-chroma-store/src/main/java/org/springframework/ai/chroma/ChromaApi.java
Patch:
@@ -106,7 +106,7 @@ public ChromaApi withBasicAuthCredentials(String username, String password) {
 	 * @param name The name of the collection.
 	 * @param metadata Metadata associated with the collection.
 	 */
-	public record Collection(String id, String name, Map<String, String> metadata) {
+	public record Collection(String id, String name, Map<String, Object> metadata) {
 	}
 
 	/**
@@ -115,7 +115,7 @@ public record Collection(String id, String name, Map<String, String> metadata) {
 	 * @param name The name of the collection to create.
 	 * @param metadata Optional metadata to associate with the collection.
 	 */
-	public record CreateCollectionRequest(String name, Map<String, String> metadata) {
+	public record CreateCollectionRequest(String name, Map<String, Object> metadata) {
 		public CreateCollectionRequest(String name) {
 			this(name, new HashMap<>(Map.of("hnsw:space", "cosine")));
 		}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiAutoConfiguration.java
Patch:
@@ -40,6 +40,7 @@
 
 import com.google.auth.oauth2.GoogleCredentials;
 import com.google.cloud.vertexai.VertexAI;
+
 import io.micrometer.observation.ObservationRegistry;
 
 /**

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/mongo/MongoDbAtlasLocalContainerConnectionDetailsFactoryIt.java
Patch:
@@ -48,7 +48,7 @@
 		"spring.ai.vectorstore.mongodb.initialize-schema=true",
 		"spring.ai.vectorstore.mongodb.collection-name=test_collection",
 		"spring.ai.vectorstore.mongodb.index-name=text_index" })
-class MongoDbAtlasLocalContainerConnectionDetailsFactoryTest {
+class MongoDbAtlasLocalContainerConnectionDetailsFactoryIT {
 
 	@Container
 	@ServiceConnection

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/BaseOllamaIT.java
Patch:
@@ -10,7 +10,7 @@ public class BaseOllamaIT {
 	private static final Logger logger = LoggerFactory.getLogger(BaseOllamaIT.class);
 
 	// Toggle for running tests locally on native Ollama for a faster feedback loop.
-	private static final boolean useTestcontainers = false;
+	private static final boolean useTestcontainers = true;
 
 	public static final OllamaContainer ollamaContainer;
 
@@ -30,13 +30,13 @@ public class BaseOllamaIT {
 	 * to the file ".testcontainers.properties" located in your home directory
 	 */
 	public static boolean isDisabled() {
-		return false;
+		return true;
 	}
 
 	public static OllamaApi buildOllamaApiWithModel(String model) {
 		var baseUrl = "http://localhost:11434";
 		if (useTestcontainers) {
-			baseUrl = "http://" + ollamaContainer.getHost() + ":" + ollamaContainer.getMappedPort(11434);
+			baseUrl = ollamaContainer.getEndpoint();
 		}
 		var ollamaApi = new OllamaApi(baseUrl);
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/BaseOllamaIT.java
Patch:
@@ -37,7 +37,7 @@ public static boolean isDisabled() {
 	public static String buildConnectionWithModel(String model) throws IOException, InterruptedException {
 		var baseUrl = "http://localhost:11434";
 		if (useTestcontainers) {
-			baseUrl = "http://" + ollamaContainer.getHost() + ":" + ollamaContainer.getMappedPort(11434);
+			baseUrl = ollamaContainer.getEndpoint();
 
 			logger.info("Start pulling the '{}' model. The operation can take several minutes...", model);
 			ollamaContainer.execInContainer("ollama", "pull", model);

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java
Patch:
@@ -100,7 +100,8 @@ void testMessageHistory() {
 		// @formatter:on
 
 		logger.info("" + response);
-		assertThat(response.getResult().getOutput().getContent()).containsAnyOf("Blackbeard");
+		assertThat(response.getResult().getOutput().getContent().toLowerCase()).containsAnyOf("blackbeard",
+				"bartholomew roberts");
 	}
 
 	@Test

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/BaseOllamaIT.java
Patch:
@@ -12,8 +12,8 @@ public class BaseOllamaIT {
 	}
 
 	/**
-	 * Change the value to false in order to run multiple Ollama IT tests locally reusing
-	 * the same container image Also add the entry
+	 * Change the return value to false in order to run multiple Ollama IT tests locally
+	 * reusing the same container image Also add the entry
 	 *
 	 * testcontainers.reuse.enable=true
 	 *

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelObservationIT.java
Patch:
@@ -34,6 +34,7 @@
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.annotation.Bean;
+import org.testcontainers.junit.jupiter.Testcontainers;
 import reactor.core.publisher.Flux;
 
 import java.util.List;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/transformer/MetadataTransformerIT.java
Patch:
@@ -84,7 +84,8 @@ public void testKeywordExtractor() {
 		assertThat(keywords2).containsKeys("excerpt_keywords");
 
 		assertThat((String) keywords1.get("excerpt_keywords")).contains("Andes", "Aymara");
-		assertThat((String) keywords2.get("excerpt_keywords")).contains("Spring MVC", "Dependency Injection");
+		assertThat(((String) keywords2.get("excerpt_keywords")).toLowerCase()).containsAnyOf("spring mvc",
+				"dependency injection");
 	}
 
 	@Test

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/api/MiniMaxRetryTests.java
Patch:
@@ -151,7 +151,7 @@ public void miniMaxChatStreamTransientError() {
     public void miniMaxChatStreamNonTransientError() {
         when(miniMaxApi.chatCompletionStream(isA(ChatCompletionRequest.class)))
                 .thenThrow(new RuntimeException("Non Transient Error"));
-        assertThrows(RuntimeException.class, () -> chatModel.stream(new Prompt("text")));
+        assertThrows(RuntimeException.class, () -> chatModel.stream(new Prompt("text")).collectList().block());
     }
 
 	@Test

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/embedding/EmbeddingIT.java
Patch:
@@ -13,11 +13,12 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.minimax;
+package org.springframework.ai.minimax.embedding;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.springframework.ai.embedding.EmbeddingResponse;
+import org.springframework.ai.minimax.MiniMaxEmbeddingModel;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/AiProvider.java
Patch:
@@ -36,6 +36,7 @@ public enum AiProvider {
 	OCI_GENAI("oci_genai"),
 	OLLAMA("ollama"),
 	OPENAI("openai"),
+	MINIMAX("minimax"),
 	SPRING_AI("spring_ai"),
 	VERTEX_AI("vertex_ai");
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientIT.java
Patch:
@@ -230,6 +230,7 @@ void beanStreamOutputConverterRecords() {
 
 		String generationTextFromStream = chatResponses
 				.stream()
+				.filter(cr -> cr.getResult() != null)
 				.map(cr -> cr.getResult().getOutput().getContent())
 				.collect(Collectors.joining());
 		// @formatter:on

File: spring-ai-core/src/main/java/org/springframework/ai/converter/ListOutputConverter.java
Patch:
@@ -37,8 +37,8 @@ public ListOutputConverter(DefaultConversionService defaultConversionService) {
 	@Override
 	public String getFormat() {
 		return """
-				Your response should be a list of comma separated values
-				eg: `foo, bar, baz`
+				Respond with only a list of comma-separated values, without any leading or trailing text.
+				Example format: foo, bar, baz
 				""";
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/observation/ChatClientInputContentObservationFilterTests.java
Patch:
@@ -60,7 +60,8 @@ void whenEmptyInputContentThenReturnOriginalContext() {
 		ChatClientObservationConvention customObservationConvention = null;
 
 		var request = new DefaultChatClientRequestSpec(chatModel, "", Map.of(), "", Map.of(), List.of(), List.of(),
-				List.of(), List.of(), null, List.of(), Map.of(), observationRegistry, customObservationConvention);
+				List.of(), List.of(), null, List.of(), Map.of(), observationRegistry, customObservationConvention,
+				Map.of());
 
 		var expectedContext = ChatClientObservationContext.builder().withRequest(request).build();
 
@@ -76,7 +77,7 @@ void whenWithTextThenAugmentContext() {
 
 		var request = new DefaultChatClientRequestSpec(chatModel, "sample user text", Map.of("up1", "upv1"),
 				"sample system text", Map.of("sp1", "sp1v"), List.of(), List.of(), List.of(), List.of(), null,
-				List.of(), Map.of(), observationRegistry, customObservationConvention);
+				List.of(), Map.of(), observationRegistry, customObservationConvention, Map.of());
 
 		var originalContext = ChatClientObservationContext.builder().withRequest(request).build();
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/observation/ChatClientObservationContextTests.java
Patch:
@@ -45,7 +45,7 @@ class ChatClientObservationContextTests {
 	void whenMandatoryRequestOptionsThenReturn() {
 
 		var request = new DefaultChatClientRequestSpec(chatModel, "", Map.of(), "", Map.of(), List.of(), List.of(),
-				List.of(), List.of(), null, List.of(), Map.of(), ObservationRegistry.NOOP, null);
+				List.of(), List.of(), null, List.of(), Map.of(), ObservationRegistry.NOOP, null, Map.of());
 
 		var observationContext = ChatClientObservationContext.builder().withRequest(request).withStream(true).build();
 

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatModel.java
Patch:
@@ -89,7 +89,7 @@ public class AnthropicChatModel extends AbstractToolCallSupport implements ChatM
 	/**
 	 * The lower-level API for the Anthropic service.
 	 */
-	public final AnthropicApi anthropicApi;
+	private final AnthropicApi anthropicApi;
 
 	/**
 	 * The default options used for the chat completion requests.

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/OpenSearchVectorStore.java
Patch:
@@ -60,6 +60,7 @@
  * @author Soby Chacko
  * @author Christian Tzolov
  * @author Thomas Vitale
+ * @author inpink
  * @since 1.0.0
  */
 public class OpenSearchVectorStore extends AbstractObservationVectorStore implements InitializingBean {
@@ -178,6 +179,7 @@ public List<Document> similaritySearch(float[] embedding, int topK, double simil
 			Filter.Expression filterExpression) {
 		return similaritySearch(new org.opensearch.client.opensearch.core.SearchRequest.Builder()
 			.query(getOpenSearchSimilarityQuery(embedding, filterExpression))
+			.index(this.index)
 			.sort(sortOptionsBuilder -> sortOptionsBuilder
 				.score(scoreSortBuilder -> scoreSortBuilder.order(SortOrder.Desc)))
 			.size(topK)

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/DefaultAroundAdvisorChain.java
Patch:
@@ -85,6 +85,7 @@ public AdvisedResponse nextAroundCall(AdvisedRequest advisedRequest) {
 			.withAdvisorType(AdvisorObservationContext.Type.AROUND)
 			.withAdvisedRequest(advisedRequest)
 			.withAdvisorRequestContext(advisedRequest.adviseContext())
+			.withOrder(advisor.getOrder())
 			.build();
 
 		return AdvisorObservationDocumentation.AI_ADVISOR
@@ -106,6 +107,7 @@ public Flux<AdvisedResponse> nextAroundStream(AdvisedRequest advisedRequest) {
 				.withAdvisorType(AdvisorObservationContext.Type.AROUND)
 				.withAdvisedRequest(advisedRequest)
 				.withAdvisorRequestContext(advisedRequest.adviseContext())
+				.withOrder(advisor.getOrder())
 				.build();
 
 			var observation = AdvisorObservationDocumentation.AI_ADVISOR.observation(null,

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/AdvisorObservationConvention.java
Patch:
@@ -19,6 +19,8 @@
 import io.micrometer.observation.ObservationConvention;
 
 /**
+ * Interface for an {@link ObservationConvention} for chat client advisors.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/observation/ChatClientObservationConvention.java
Patch:
@@ -19,10 +19,11 @@
 import io.micrometer.observation.ObservationConvention;
 
 /**
+ * Interface for an {@link ObservationConvention} for chat client workflows.
+ *
  * @author Christian Tzolov
  * @since 1.0.0
  */
-
 public interface ChatClientObservationConvention extends ObservationConvention<ChatClientObservationContext> {
 
 	@Override

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/SpringAiKind.java
Patch:
@@ -25,8 +25,9 @@ public enum SpringAiKind {
 
 	// @formatter:off
 
+	// Please, keep the alphabetical sorting.
+	ADVISOR("advisor"),
 	CHAT_CLIENT("chat_client"),
-	CHAT_CLIENT_ADVISOR("chat_client_advisor"),
 	VECTOR_STORE("vector_store");
 
 	private final String value;

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/observation/AdvisorObservationContextTests.java
Patch:
@@ -24,6 +24,7 @@
  * Unit tests for {@link AdvisorObservationContext}.
  *
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 class AdvisorObservationContextTests {
 
@@ -42,14 +43,14 @@ void missingAdvisorName() {
 		assertThatThrownBy(() -> AdvisorObservationContext.builder()
 			.withAdvisorType(AdvisorObservationContext.Type.BEFORE)
 			.build()).isInstanceOf(IllegalArgumentException.class)
-			.hasMessageContaining("The advisorName must not be empty!");
+			.hasMessageContaining("advisorName must not be null or empty");
 	}
 
 	@Test
 	void missingAdvisorType() {
 		assertThatThrownBy(() -> AdvisorObservationContext.builder().withAdvisorName("MyName").build())
 			.isInstanceOf(IllegalArgumentException.class)
-			.hasMessageContaining("The advisorType must not be null!");
+			.hasMessageContaining("advisorType must not be null");
 	}
 
 }

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/observation/ChatClientObservationContextTests.java
Patch:
@@ -33,6 +33,7 @@
  * Unit tests for {@link ChatClientObservationContext}.
  *
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 @ExtendWith(MockitoExtension.class)
 class ChatClientObservationContextTests {
@@ -46,7 +47,7 @@ void whenMandatoryRequestOptionsThenReturn() {
 		var request = new DefaultChatClientRequestSpec(chatModel, "", Map.of(), "", Map.of(), List.of(), List.of(),
 				List.of(), List.of(), null, List.of(), Map.of(), ObservationRegistry.NOOP, null);
 
-		var observationContext = new ChatClientObservationContext(request, "", true);
+		var observationContext = ChatClientObservationContext.builder().withRequest(request).withStream(true).build();
 
 		assertThat(observationContext).isNotNull();
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -118,7 +118,6 @@ public void addAndSearchWithFilters() {
 				.hasObservationWithNameEqualTo(DefaultVectorStoreObservationConvention.DEFAULT_NAME)
 				.that()
 				.hasContextualNameEqualTo("chroma delete")
-				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.DB_VECTOR_QUERY_FILTER.asString(), "none")
 				.hasBeenStarted()
 				.hasBeenStopped();
 			observationRegistry.clear();

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/DefaultChatModelObservationConventionTests.java
Patch:
@@ -140,9 +140,8 @@ void shouldNotHaveKeyValuesWhenMissing() {
 			.requestOptions(ChatOptionsBuilder.builder().build())
 			.build();
 		assertThat(this.observationConvention.getLowCardinalityKeyValues(observationContext))
-			.contains(KeyValue.of(LowCardinalityKeyNames.REQUEST_MODEL.asString(), KeyValue.NONE_VALUE));
-		assertThat(this.observationConvention.getLowCardinalityKeyValues(observationContext))
-			.noneMatch(keyValue -> keyValue.getKey().equals(LowCardinalityKeyNames.RESPONSE_MODEL.asString()));
+			.contains(KeyValue.of(LowCardinalityKeyNames.REQUEST_MODEL.asString(), KeyValue.NONE_VALUE))
+			.contains(KeyValue.of(LowCardinalityKeyNames.RESPONSE_MODEL.asString(), KeyValue.NONE_VALUE));
 		assertThat(this.observationConvention.getHighCardinalityKeyValues(observationContext)
 			.stream()
 			.map(KeyValue::getKey)

File: spring-ai-core/src/test/java/org/springframework/ai/embedding/observation/DefaultEmbeddingModelObservationConventionTests.java
Patch:
@@ -115,9 +115,8 @@ void shouldNotHaveKeyValuesWhenMissing() {
 			.requestOptions(EmbeddingOptionsBuilder.builder().build())
 			.build();
 		assertThat(this.observationConvention.getLowCardinalityKeyValues(observationContext))
-			.contains(KeyValue.of(LowCardinalityKeyNames.REQUEST_MODEL.asString(), KeyValue.NONE_VALUE));
-		assertThat(this.observationConvention.getLowCardinalityKeyValues(observationContext))
-			.noneMatch(keyValue -> keyValue.getKey().equals(LowCardinalityKeyNames.RESPONSE_MODEL.asString()));
+			.contains(KeyValue.of(LowCardinalityKeyNames.REQUEST_MODEL.asString(), KeyValue.NONE_VALUE))
+			.contains(KeyValue.of(LowCardinalityKeyNames.RESPONSE_MODEL.asString(), KeyValue.NONE_VALUE));
 		assertThat(this.observationConvention.getHighCardinalityKeyValues(observationContext)
 			.stream()
 			.map(KeyValue::getKey)

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/RedisVectorStore.java
Patch:
@@ -35,6 +35,7 @@
 import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
+import org.springframework.ai.observation.conventions.VectorStoreSimilarityMetric;
 import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.observation.AbstractObservationVectorStore;
 import org.springframework.ai.vectorstore.observation.VectorStoreObservationContext;
@@ -491,7 +492,8 @@ public VectorStoreObservationContext.Builder createObservationContextBuilder(Str
 			.withCollectionName(this.config.indexName)
 			.withDimensions(this.embeddingModel.dimensions())
 			.withFieldName(this.config.embeddingFieldName)
-			.withSimilarityMetric(vectorAlgorithm().name());
+			.withSimilarityMetric(
+					"COSINE".equals(DEFAULT_DISTANCE_METRIC) ? VectorStoreSimilarityMetric.COSINE.value() : "");
 
 	}
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiEmbeddingModelObservationIT.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.ai.mistralai;
 
-import io.micrometer.common.KeyValue;
 import io.micrometer.observation.tck.TestObservationRegistry;
 import io.micrometer.observation.tck.TestObservationRegistryAssert;
 import org.junit.jupiter.api.Test;
@@ -81,8 +80,7 @@ void observationForEmbeddingOperation() {
 			.hasLowCardinalityKeyValue(LowCardinalityKeyNames.REQUEST_MODEL.asString(),
 					MistralAiApi.EmbeddingModel.EMBED.getValue())
 			.hasLowCardinalityKeyValue(LowCardinalityKeyNames.RESPONSE_MODEL.asString(), responseMetadata.getModel())
-			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_EMBEDDING_DIMENSIONS.asString(),
-					KeyValue.NONE_VALUE)
+			.doesNotHaveHighCardinalityKeyValueWithKey(HighCardinalityKeyNames.REQUEST_EMBEDDING_DIMENSIONS.asString())
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelObservationIT.java
Patch:
@@ -141,8 +141,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TEMPERATURE.asString(), "0.7")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_K.asString(), "1")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_P.asString(), "1.0")
-			// .hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_ID.asString(),
-			// responseMetadata.getId())
+			.doesNotHaveHighCardinalityKeyValueWithKey(HighCardinalityKeyNames.RESPONSE_ID.asString())
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_FINISH_REASONS.asString(), "[\"stop\"]")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaImage.java
Patch:
@@ -22,6 +22,6 @@
  */
 public class OllamaImage {
 
-	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.6");
+	public static final DockerImageName DEFAULT_IMAGE = DockerImageName.parse("ollama/ollama:0.3.9");
 
 }

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelObservationIT.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.ai.openai.chat;
 
-import io.micrometer.common.KeyValue;
 import io.micrometer.observation.tck.TestObservationRegistry;
 import io.micrometer.observation.tck.TestObservationRegistryAssert;
 import reactor.core.publisher.Flux;
@@ -143,7 +142,7 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_STOP_SEQUENCES.asString(),
 					"[\"this-is-the-end\"]")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TEMPERATURE.asString(), "0.7")
-			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_K.asString(), KeyValue.NONE_VALUE)
+			.doesNotHaveHighCardinalityKeyValueWithKey(HighCardinalityKeyNames.REQUEST_TOP_K.asString())
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_P.asString(), "1.0")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_ID.asString(), responseMetadata.getId())
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_FINISH_REASONS.asString(), "[\"STOP\"]")

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/OllamaWithOpenAiChatModelIT.java
Patch:
@@ -77,7 +77,7 @@ class OllamaWithOpenAiChatModelIT {
 	private static final String DEFAULT_OLLAMA_MODEL = "mistral";
 
 	@Container
-	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.3.6");
+	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.3.9");
 
 	static String baseUrl = "http://localhost:11434";
 

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/AiOperationType.java
Patch:
@@ -29,6 +29,7 @@ public enum AiOperationType {
 
 	// @formatter:off
 
+	// Please, keep the alphabetical sorting.
 	CHAT("chat"),
 	EMBEDDING("embedding"),
 	FRAMEWORK("framework"),

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaImage.java
Patch:
@@ -17,6 +17,6 @@
 
 public class OllamaImage {
 
-	public static final String IMAGE = "ollama/ollama:0.3.6";
+	public static final String IMAGE = "ollama/ollama:0.3.9";
 
 }

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaContainerConnectionDetailsFactoryTest.java
Patch:
@@ -55,7 +55,7 @@ class OllamaContainerConnectionDetailsFactoryTest {
 
 	@Container
 	@ServiceConnection
-	static OllamaContainer ollama = new OllamaContainer("ollama/ollama:0.3.6");
+	static OllamaContainer ollama = new OllamaContainer("ollama/ollama:0.3.9");
 
 	@Autowired
 	private OllamaEmbeddingModel embeddingModel;

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiChatModelFunctionCallingIT.java
Patch:
@@ -32,8 +32,8 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.prompt.Prompt;
+import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
-import org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.beans.factory.annotation.Autowired;

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiPaymentTransactionIT.java
Patch:
@@ -34,7 +34,7 @@
 import org.springframework.ai.chat.client.advisor.api.CallAroundAdvisorChain;
 import org.springframework.ai.chat.client.advisor.api.CallAroundAdvisor;
 import org.springframework.ai.model.function.FunctionCallbackContext;
-import org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;
+import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiAutoConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.model.function.FunctionCallbackContext;
-import org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;
+import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/MockWeatherService.java
Patch:
@@ -37,6 +37,7 @@ public class MockWeatherService implements Function<MockWeatherService.Request,
 	@JsonClassDescription("Weather API request")
 	public record Request(@JsonProperty(required = true,
 			value = "location") @JsonPropertyDescription("The city and state e.g. San Francisco, CA") String location,
+
 			@JsonProperty(required = true, value = "unit") @JsonPropertyDescription("Temperature unit") Unit unit) {
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -28,8 +28,8 @@
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallback;
+import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
-import org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -27,8 +27,8 @@
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
+import org.springframework.ai.model.function.FunctionCallbackContext.SchemaType;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
-import org.springframework.ai.model.function.FunctionCallbackWrapper.Builder.SchemaType;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatOptions;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/FunctionCallingOptions.java
Patch:
@@ -18,10 +18,12 @@
 import java.util.List;
 import java.util.Set;
 
+import org.springframework.ai.chat.prompt.ChatOptions;
+
 /**
  * @author Christian Tzolov
  */
-public interface FunctionCallingOptions {
+public interface FunctionCallingOptions extends ChatOptions {
 
 	/**
 	 * Function Callbacks to be registered with the ChatModel. For Prompt Options the

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/observation/DefaultAdvisorObservationConvention.java
Patch:
@@ -58,9 +58,9 @@ public String getName() {
 	@Override
 	@Nullable
 	public String getContextualName(AdvisorObservationContext context) {
-		return "%s %s_%s".formatted(CHAT_CLIENT_ADVISOR_SPRING_AI_KIND,
-				ParsingUtils.reconcatenateCamelCase(context.getAdvisorName(), "_"),
-				context.getAdvisorType().name().toLowerCase());
+		return ParsingUtils.reConcatenateCamelCase(context.getAdvisorName(), "_")
+			.replace("_around_advisor", "")
+			.replace("_advisor", "");
 	}
 
 	// ------------------------

File: spring-ai-core/src/main/java/org/springframework/ai/util/ParsingUtils.java
Patch:
@@ -69,7 +69,7 @@ public static List<String> splitCamelCaseToLower(String source) {
 	 * @param delimiter must not be {@literal null}.
 	 * @return
 	 */
-	public static String reconcatenateCamelCase(String source, String delimiter) {
+	public static String reConcatenateCamelCase(String source, String delimiter) {
 
 		Assert.notNull(source, "Source string must not be null");
 		Assert.notNull(delimiter, "Delimiter must not be null");

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/advisor/observation/DefaultAdvisorObservationConventionTests.java
Patch:
@@ -44,8 +44,7 @@ void contextualName() {
 			.withAdvisorName("MyName")
 			.withAdvisorType(AdvisorObservationContext.Type.AROUND)
 			.build();
-		assertThat(this.observationConvention.getContextualName(observationContext))
-			.isEqualTo("chat_client_advisor my_name_around");
+		assertThat(this.observationConvention.getContextualName(observationContext)).isEqualTo("my_name");
 	}
 
 	@Test

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/VectorStoreObservationContext.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Context used to store metadata for vector store operations.
  *
- * @author Christian Tzolo
+ * @author Christian Tzolov
  * @author Thomas Vitale
  * @since 1.0.0
  */

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiImageModel.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.ai.image.ImageResponse;
 import org.springframework.ai.image.ImageResponseMetadata;
 import org.springframework.ai.model.ModelOptionsUtils;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.util.Assert;
 
 import java.util.List;
@@ -36,15 +35,14 @@
  * @author Benoit Moussaud
  * @see ImageModel
  * @see com.azure.ai.openai.OpenAIClient
- * @since 1.0.0 M1
+ * @since 1.0.0
  */
 public class AzureOpenAiImageModel implements ImageModel {
 
 	private static final String DEFAULT_DEPLOYMENT_NAME = AzureOpenAiImageOptions.DEFAULT_IMAGE_MODEL;
 
 	private final Logger logger = LoggerFactory.getLogger(getClass());
 
-	@Autowired
 	private final OpenAIClient openAIClient;
 
 	private final AzureOpenAiImageOptions defaultOptions;

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureChatCompletionsOptionsTests.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.ai.azure.openai;
 
 import com.azure.ai.openai.OpenAIClient;
+import com.azure.ai.openai.OpenAIClientBuilder;
 import com.azure.ai.openai.models.AzureChatEnhancementConfiguration;
 import com.azure.ai.openai.models.AzureChatOCREnhancementConfiguration;
 import com.azure.ai.openai.models.ChatCompletionsJsonResponseFormat;
@@ -44,7 +45,7 @@ public class AzureChatCompletionsOptionsTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		OpenAIClient mockClient = Mockito.mock(OpenAIClient.class);
+		OpenAIClientBuilder mockClient = Mockito.mock(OpenAIClientBuilder.class);
 
 		AzureChatEnhancementConfiguration mockAzureChatEnhancementConfiguration = Mockito
 			.mock(AzureChatEnhancementConfiguration.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationIT.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.ai.autoconfigure.azure;
 
 import com.azure.ai.openai.OpenAIClient;
+import com.azure.ai.openai.OpenAIClientBuilder;
 import com.azure.ai.openai.implementation.OpenAIClientImpl;
 import com.azure.core.http.*;
 import org.junit.jupiter.api.Test;
@@ -101,7 +102,8 @@ void httpRequestContainsUserAgentAndCustomHeaders() {
 			.withPropertyValues("spring.ai.azure.openai.custom-headers.foo=bar",
 					"spring.ai.azure.openai.custom-headers.fizz=buzz")
 			.run(context -> {
-				OpenAIClient openAIClient = context.getBean(OpenAIClient.class);
+				OpenAIClientBuilder openAIClientBuilder = context.getBean(OpenAIClientBuilder.class);
+				OpenAIClient openAIClient = openAIClientBuilder.buildClient();
 				Field serviceClientField = ReflectionUtils.findField(OpenAIClient.class, "serviceClient");
 				assertThat(serviceClientField).isNotNull();
 				ReflectionUtils.makeAccessible(serviceClientField);

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/LastMaxTokenSizeContentPurger.java
Patch:
@@ -26,7 +26,6 @@
 /**
  * Returns a new list of content (e.g list of messages of list of documents) that is a
  * subset of the input list of contents and complies with the max token size constraint.
- *
  * The token estimator is used to estimate the token count of the datum.
  *
  * @author Christian Tzolov

File: spring-ai-core/src/main/java/org/springframework/ai/chat/memory/ChatMemory.java
Patch:
@@ -30,6 +30,8 @@
  */
 public interface ChatMemory {
 
+	// TODO: consider a non-blocking interface for streaming usages
+
 	default void add(String conversationId, Message message) {
 		this.add(conversationId, List.of(message));
 	}

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaContainerConnectionDetailsFactoryTest.java
Patch:
@@ -40,7 +40,7 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.store.collectionName=TestCollection",
+@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.collectionName=TestCollection",
 		"spring.ai.vectorstore.chroma.initialize-schema=true" })
 class ChromaContainerConnectionDetailsFactoryTest {
 

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaWithToken2ContainerConnectionDetailsFactoryTest.java
Patch:
@@ -40,7 +40,7 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.store.collectionName=TestCollection",
+@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.collectionName=TestCollection",
 		"spring.ai.vectorstore.chroma.initialize-schema=true" })
 class ChromaWithToken2ContainerConnectionDetailsFactoryTest {
 

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaWithTokenContainerConnectionDetailsFactoryTest.java
Patch:
@@ -40,7 +40,7 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.store.collectionName=TestCollection",
+@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.collectionName=TestCollection",
 		"spring.ai.vectorstore.chroma.initialize-schema=true" })
 class ChromaWithTokenContainerConnectionDetailsFactoryTest {
 

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/chroma/ChromaDockerComposeConnectionDetailsFactory.java
Patch:
@@ -60,7 +60,7 @@ static class ChromaDockerComposeConnectionDetails extends DockerComposeConnectio
 
 		@Override
 		public String getHost() {
-			return this.host;
+			return "http://%s".formatted(this.host);
 		}
 
 		@Override

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfiguration.java
Patch:
@@ -71,6 +71,7 @@ public PgVectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embed
 			.withObservationRegistry(observationRegistry.getIfUnique(() -> ObservationRegistry.NOOP))
 			.withSearchObservationConvention(customObservationConvention.getIfAvailable(() -> null))
 			.withBatchingStrategy(batchingStrategy)
+			.withMaxDocumentBatchSize(properties.getMaxDocumentBatchSize())
 			.build();
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/GroqWithOpenAiChatModelIT.java
Patch:
@@ -66,6 +66,7 @@
 
 @SpringBootTest(classes = GroqWithOpenAiChatModelIT.Config.class)
 @EnabledIfEnvironmentVariable(named = "GROQ_API_KEY", matches = ".+")
+@Disabled("Due to rate limiting it is hard to run it in one go")
 class GroqWithOpenAiChatModelIT {
 
 	private static final Logger logger = LoggerFactory.getLogger(OpenAiChatModelIT.class);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/proxy/NvidiaWithOpenAiChatModelIT.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.slf4j.Logger;
@@ -61,6 +62,7 @@
  */
 @SpringBootTest(classes = NvidiaWithOpenAiChatModelIT.Config.class)
 @EnabledIfEnvironmentVariable(named = "NVIDIA_API_KEY", matches = ".+")
+@Disabled("Requires NVIDIA credits")
 class NvidiaWithOpenAiChatModelIT {
 
 	private static final Logger logger = LoggerFactory.getLogger(NvidiaWithOpenAiChatModelIT.class);

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/AbstractToolCallSupport.java
Patch:
@@ -230,7 +230,7 @@ protected boolean isToolCall(ChatResponse chatResponse, Set<String> toolCallFini
 	protected boolean isToolCall(Generation generation, Set<String> toolCallFinishReasons) {
 		var finishReason = (generation.getMetadata().getFinishReason() != null)
 				? generation.getMetadata().getFinishReason() : "";
-		return !CollectionUtils.isEmpty(generation.getOutput().getToolCalls()) && toolCallFinishReasons.stream()
+		return generation.getOutput().hasToolCalls() && toolCallFinishReasons.stream()
 			.map(s -> s.toLowerCase())
 			.toList()
 			.contains(finishReason.toLowerCase());

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelObservationIT.java
Patch:
@@ -141,7 +141,8 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TEMPERATURE.asString(), "0.7")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_K.asString(), "1")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_P.asString(), "1.0")
-			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_ID.asString(), responseMetadata.getId())
+			// .hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_ID.asString(),
+			// responseMetadata.getId())
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_FINISH_REASONS.asString(), "[\"stop\"]")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotChatCompletionRequestTest.java
Patch:
@@ -38,7 +38,7 @@ void chatCompletionDefaultRequestTest() {
 
 		assertThat(request.messages()).hasSize(1);
 		assertThat(request.topP()).isEqualTo(1);
-		assertThat(request.temperature()).isEqualTo(0.7f);
+		assertThat(request.temperature()).isEqualTo(0.7);
 		assertThat(request.maxTokens()).isNull();
 		assertThat(request.stream()).isFalse();
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/ChatClient.java
Patch:
@@ -74,6 +74,8 @@ static Builder builder(ChatModel chatModel, ObservationRegistry observationRegis
 
 	ChatClientRequestSpec prompt();
 
+	ChatClientPromptRequestSpec prompt(String content);
+
 	ChatClientPromptRequestSpec prompt(Prompt prompt);
 
 	/**

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/BedrockUsage.java
Patch:
@@ -34,7 +34,7 @@ public static BedrockUsage from(AmazonBedrockInvocationMetrics usage) {
 	private final AmazonBedrockInvocationMetrics usage;
 
 	protected BedrockUsage(AmazonBedrockInvocationMetrics usage) {
-		Assert.notNull(usage, "OpenAI Usage must not be null");
+		Assert.notNull(usage, "Bedrock Usage must not be null");
 		this.usage = usage;
 	}
 

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/metadata/MoonshotUsage.java
Patch:
@@ -16,7 +16,7 @@ public static MoonshotUsage from(MoonshotApi.Usage usage) {
 	}
 
 	protected MoonshotUsage(MoonshotApi.Usage usage) {
-		Assert.notNull(usage, "OpenAI Usage must not be null");
+		Assert.notNull(usage, "Moonshot Usage must not be null");
 		this.usage = usage;
 	}
 

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatModel.java
Patch:
@@ -82,7 +82,7 @@ public class AnthropicChatModel extends AbstractToolCallSupport implements ChatM
 
 	public static final Integer DEFAULT_MAX_TOKENS = 500;
 
-	public static final Float DEFAULT_TEMPERATURE = 0.8f;
+	public static final Double DEFAULT_TEMPERATURE = 0.8;
 
 	/**
 	 * The lower-level API for the Anthropic service.

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatModelIT.java
Patch:
@@ -120,7 +120,7 @@ void testMessageHistory() {
 
 	@Test
 	void streamingWithTokenUsage() {
-		var promptOptions = AnthropicChatOptions.builder().withTemperature(0f).build();
+		var promptOptions = AnthropicChatOptions.builder().withTemperature(0.0).build();
 
 		var prompt = new Prompt("List two colors of the Polish flag. Be brief.", promptOptions);
 		var streamingTokenUsage = this.chatModel.stream(prompt).blockLast().getMetadata().getUsage();

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/AnthropicApiLegacyToolIT.java
Patch:
@@ -107,8 +107,8 @@ void toolCalls() {
 				Role.USER);
 
 		ChatCompletionRequest chatCompletionRequest = new ChatCompletionRequest(
-				AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(), List.of(chatCompletionMessage), systemPrompt, 500,
-				0.8f, false);
+				AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(), List.of(chatCompletionMessage), systemPrompt, 500, 0.8,
+				false);
 
 		ResponseEntity<ChatCompletionResponse> chatCompletion = doCall(chatCompletionRequest);
 
@@ -147,7 +147,7 @@ private ResponseEntity<ChatCompletionResponse> doCall(ChatCompletionRequest chat
 		AnthropicMessage chatCompletionMessage2 = new AnthropicMessage(List.of(new ContentBlock(content)), Role.USER);
 
 		return doCall(new ChatCompletionRequest(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue(),
-				List.of(chatCompletionMessage2), null, 500, 0.8f, false));
+				List.of(chatCompletionMessage2), null, 500, 0.8, false));
 	}
 
 }

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/AnthropicApiToolIT.java
Patch:
@@ -108,7 +108,7 @@ private ResponseEntity<ChatCompletionResponse> doCall(List<AnthropicMessage> mes
 			.withModel(AnthropicApi.ChatModel.CLAUDE_3_OPUS)
 			.withMessages(messageConversation)
 			.withMaxTokens(1500)
-			.withTemperature(0.8f)
+			.withTemperature(0.8)
 			.withTools(tools)
 			.build();
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicChatModel.java
Patch:
@@ -48,7 +48,7 @@ public class BedrockAnthropicChatModel implements ChatModel, StreamingChatModel
 	public BedrockAnthropicChatModel(AnthropicChatBedrockApi chatApi) {
 		this(chatApi,
 				AnthropicChatOptions.builder()
-					.withTemperature(0.8f)
+					.withTemperature(0.8)
 					.withMaxTokensToSample(500)
 					.withTopK(10)
 					.withAnthropicVersion(AnthropicChatBedrockApi.DEFAULT_ANTHROPIC_VERSION)

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3ChatModel.java
Patch:
@@ -62,7 +62,7 @@ public class BedrockAnthropic3ChatModel implements ChatModel, StreamingChatModel
 	public BedrockAnthropic3ChatModel(Anthropic3ChatBedrockApi chatApi) {
 		this(chatApi,
 				Anthropic3ChatOptions.builder()
-					.withTemperature(0.8f)
+					.withTemperature(0.8)
 					.withMaxTokens(500)
 					.withTopK(10)
 					.withAnthropicVersion(Anthropic3ChatBedrockApi.DEFAULT_ANTHROPIC_VERSION)

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModel.java
Patch:
@@ -51,8 +51,8 @@ public BedrockAi21Jurassic2ChatModel(Ai21Jurassic2ChatBedrockApi chatApi, Bedroc
 	public BedrockAi21Jurassic2ChatModel(Ai21Jurassic2ChatBedrockApi chatApi) {
 		this(chatApi,
 				BedrockAi21Jurassic2ChatOptions.builder()
-					.withTemperature(0.8f)
-					.withTopP(0.9f)
+					.withTemperature(0.8)
+					.withTopP(0.9)
 					.withMaxTokens(100)
 					.build());
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama/BedrockLlamaChatModel.java
Patch:
@@ -49,8 +49,7 @@ public class BedrockLlamaChatModel implements ChatModel, StreamingChatModel {
 	private final BedrockLlamaChatOptions defaultOptions;
 
 	public BedrockLlamaChatModel(LlamaChatBedrockApi chatApi) {
-		this(chatApi,
-				BedrockLlamaChatOptions.builder().withTemperature(0.8f).withTopP(0.9f).withMaxGenLen(100).build());
+		this(chatApi, BedrockLlamaChatOptions.builder().withTemperature(0.8).withTopP(0.9).withMaxGenLen(100).build());
 	}
 
 	public BedrockLlamaChatModel(LlamaChatBedrockApi chatApi, BedrockLlamaChatOptions options) {

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatModel.java
Patch:
@@ -46,7 +46,7 @@ public class BedrockTitanChatModel implements ChatModel, StreamingChatModel {
 	private final BedrockTitanChatOptions defaultOptions;
 
 	public BedrockTitanChatModel(TitanChatBedrockApi chatApi) {
-		this(chatApi, BedrockTitanChatOptions.builder().withTemperature(0.8f).build());
+		this(chatApi, BedrockTitanChatOptions.builder().withTemperature(0.8).build());
 	}
 
 	public BedrockTitanChatModel(TitanChatBedrockApi chatApi, BedrockTitanChatOptions defaultOptions) {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApiIT.java
Patch:
@@ -52,7 +52,7 @@ public void chatCompletion() {
 
 		AnthropicChatRequest request = AnthropicChatRequest
 			.builder(String.format(AnthropicChatBedrockApi.PROMPT_TEMPLATE, "Name 3 famous pirates"))
-			.withTemperature(0.8f)
+			.withTemperature(0.8)
 			.withMaxTokensToSample(300)
 			.withTopK(10)
 			.build();
@@ -75,7 +75,7 @@ public void chatCompletionStream() {
 
 		AnthropicChatRequest request = AnthropicChatRequest
 			.builder(String.format(AnthropicChatBedrockApi.PROMPT_TEMPLATE, "Name 3 famous pirates"))
-			.withTemperature(0.8f)
+			.withTemperature(0.8)
 			.withMaxTokensToSample(300)
 			.withTopK(10)
 			.withStopSequences(List.of("\n\nHuman:"))

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/api/Anthropic3ChatBedrockApiIT.java
Patch:
@@ -57,7 +57,7 @@ public void chatCompletion() {
 		MediaContent anthropicMessage = new MediaContent("Name 3 famous pirates");
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(List.of(anthropicMessage), Role.USER);
 		AnthropicChatRequest request = AnthropicChatRequest.builder(List.of(chatCompletionMessage))
-			.withTemperature(0.8f)
+			.withTemperature(0.8)
 			.withMaxTokens(300)
 			.withTopK(10)
 			.withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION)
@@ -97,7 +97,7 @@ public void chatMultiCompletion() {
 		AnthropicChatRequest request = AnthropicChatRequest
 			.builder(List.of(chatCompletionInitialMessage, chatCompletionAssistantMessage,
 					chatCompletionFollowupMessage))
-			.withTemperature(0.8f)
+			.withTemperature(0.8)
 			.withMaxTokens(400)
 			.withTopK(10)
 			.withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION)
@@ -123,7 +123,7 @@ public void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage(List.of(anthropicMessage), Role.USER);
 
 		AnthropicChatRequest request = AnthropicChatRequest.builder(List.of(chatCompletionMessage))
-			.withTemperature(0.8f)
+			.withTemperature(0.8)
 			.withMaxTokens(300)
 			.withTopK(10)
 			.withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModelIT.java
Patch:
@@ -157,9 +157,9 @@ public BedrockAi21Jurassic2ChatModel bedrockAi21Jurassic2ChatModel(
 				Ai21Jurassic2ChatBedrockApi jurassic2ChatBedrockApi) {
 			return new BedrockAi21Jurassic2ChatModel(jurassic2ChatBedrockApi,
 					BedrockAi21Jurassic2ChatOptions.builder()
-						.withTemperature(0.5f)
+						.withTemperature(0.5)
 						.withMaxTokens(100)
-						.withTopP(0.9f)
+						.withTopP(0.9)
 						.build());
 		}
 

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApiIT.java
Patch:
@@ -44,8 +44,8 @@ public class Ai21Jurassic2ChatBedrockApiIT {
 
 	@Test
 	public void chatCompletion() {
-		Ai21Jurassic2ChatRequest request = new Ai21Jurassic2ChatRequest("Give me the names of 3 famous pirates?", 0.9f,
-				0.9f, 100, null, // List.of("END"),
+		Ai21Jurassic2ChatRequest request = new Ai21Jurassic2ChatRequest("Give me the names of 3 famous pirates?", 0.9,
+				0.9, 100, null, // List.of("END"),
 				new Ai21Jurassic2ChatRequest.IntegerScalePenalty(1, true, true, true, true, true),
 				new Ai21Jurassic2ChatRequest.FloatScalePenalty(0.5f, true, true, true, true, true),
 				new Ai21Jurassic2ChatRequest.IntegerScalePenalty(1, true, true, true, true, true));

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/BedrockLlamaChatModelIT.java
Patch:
@@ -208,7 +208,7 @@ public LlamaChatBedrockApi llamaApi() {
 		@Bean
 		public BedrockLlamaChatModel llamaChatModel(LlamaChatBedrockApi llamaApi) {
 			return new BedrockLlamaChatModel(llamaApi,
-					BedrockLlamaChatOptions.builder().withTemperature(0.5f).withMaxGenLen(100).withTopP(0.9f).build());
+					BedrockLlamaChatOptions.builder().withTemperature(0.5).withMaxGenLen(100).withTopP(0.9).build());
 		}
 
 	}

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/BedrockLlamaCreateRequestTests.java
Patch:
@@ -46,7 +46,7 @@ public class BedrockLlamaCreateRequestTests {
 	public void createRequestWithChatOptions() {
 
 		var client = new BedrockLlamaChatModel(api,
-				BedrockLlamaChatOptions.builder().withTemperature(66.6f).withMaxGenLen(666).withTopP(0.66f).build());
+				BedrockLlamaChatOptions.builder().withTemperature(66.6).withMaxGenLen(666).withTopP(0.66).build());
 
 		var request = client.createRequest(new Prompt("Test message content"));
 
@@ -56,7 +56,7 @@ public void createRequestWithChatOptions() {
 		assertThat(request.maxGenLen()).isEqualTo(666);
 
 		request = client.createRequest(new Prompt("Test message content",
-				BedrockLlamaChatOptions.builder().withTemperature(99.9f).withMaxGenLen(999).withTopP(0.99f).build()));
+				BedrockLlamaChatOptions.builder().withTemperature(99.9).withMaxGenLen(999).withTopP(0.99).build()));
 
 		assertThat(request.prompt()).isNotEmpty();
 		assertThat(request.temperature()).isEqualTo(99.9f);

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/api/LlamaChatBedrockApiIT.java
Patch:
@@ -48,8 +48,8 @@ public class LlamaChatBedrockApiIT {
 	public void chatCompletion() {
 
 		LlamaChatRequest request = LlamaChatRequest.builder("Hello, my name is")
-			.withTemperature(0.9f)
-			.withTopP(0.9f)
+			.withTemperature(0.9)
+			.withTopP(0.9)
 			.withMaxGenLen(20)
 			.build();
 
@@ -67,7 +67,7 @@ public void chatCompletion() {
 	@Test
 	public void chatCompletionStream() {
 
-		LlamaChatRequest request = new LlamaChatRequest("Hello, my name is", 0.9f, 0.9f, 20);
+		LlamaChatRequest request = new LlamaChatRequest("Hello, my name is", 0.9, 0.9, 20);
 		Flux<LlamaChatResponse> responseStream = llamaChatApi.chatCompletionStream(request);
 		List<LlamaChatResponse> responses = responseStream.collectList().block();
 

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApiIT.java
Patch:
@@ -45,8 +45,8 @@ public class TitanChatBedrockApiIT {
 			Duration.ofMinutes(2));
 
 	TitanChatRequest titanChatRequest = TitanChatRequest.builder("Give me the names of 3 famous pirates?")
-		.withTemperature(0.5f)
-		.withTopP(0.9f)
+		.withTemperature(0.5)
+		.withTopP(0.9)
 		.withMaxTokenCount(100)
 		.withStopSequences(List.of("|"))
 		.build();

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/MiniMaxChatModel.java
Patch:
@@ -99,7 +99,7 @@ public class MiniMaxChatModel extends AbstractToolCallSupport implements ChatMod
 	 */
 	public MiniMaxChatModel(MiniMaxApi miniMaxApi) {
 		this(miniMaxApi,
-				MiniMaxChatOptions.builder().withModel(MiniMaxApi.DEFAULT_CHAT_MODEL).withTemperature(0.7f).build());
+				MiniMaxChatOptions.builder().withModel(MiniMaxApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
 	}
 
 	/**

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/api/MiniMaxApiIT.java
Patch:
@@ -43,7 +43,7 @@ public class MiniMaxApiIT {
 	void chatCompletionEntity() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		ResponseEntity<ChatCompletion> response = miniMaxApi
-			.chatCompletionEntity(new ChatCompletionRequest(List.of(chatCompletionMessage), "glm-4-air", 0.7f, false));
+			.chatCompletionEntity(new ChatCompletionRequest(List.of(chatCompletionMessage), "glm-4-air", 0.7, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -53,7 +53,7 @@ void chatCompletionEntity() {
 	void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		Flux<ChatCompletionChunk> response = miniMaxApi
-			.chatCompletionStream(new ChatCompletionRequest(List.of(chatCompletionMessage), "glm-4-air", 0.7f, true));
+			.chatCompletionStream(new ChatCompletionRequest(List.of(chatCompletionMessage), "glm-4-air", 0.7, true));
 
 		assertThat(response).isNotNull();
 		assertThat(response.collectList().block()).isNotNull();

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/api/MiniMaxApiToolFunctionCallIT.java
Patch:
@@ -117,7 +117,7 @@ public void toolFunctionCall() {
 		}
 
 		var functionResponseRequest = new ChatCompletionRequest(messages,
-				org.springframework.ai.minimax.api.MiniMaxApi.ChatModel.ABAB_6_5_Chat.getValue(), 0.5F);
+				org.springframework.ai.minimax.api.MiniMaxApi.ChatModel.ABAB_6_5_Chat.getValue(), 0.5);
 
 		ResponseEntity<ChatCompletion> chatCompletion2 = miniMaxApi.chatCompletionEntity(functionResponseRequest);
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatModel.java
Patch:
@@ -102,8 +102,8 @@ public class MistralAiChatModel extends AbstractToolCallSupport implements ChatM
 	public MistralAiChatModel(MistralAiApi mistralAiApi) {
 		this(mistralAiApi,
 				MistralAiChatOptions.builder()
-					.withTemperature(0.7f)
-					.withTopP(1f)
+					.withTemperature(0.7)
+					.withTopP(1.0)
 					.withSafePrompt(false)
 					.withModel(MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue())
 					.build());

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiRetryTests.java
Patch:
@@ -96,8 +96,8 @@ public void beforeEach() {
 
 		chatModel = new MistralAiChatModel(mistralAiApi,
 				MistralAiChatOptions.builder()
-					.withTemperature(0.7f)
-					.withTopP(1f)
+					.withTemperature(0.7)
+					.withTopP(1.0)
 					.withSafePrompt(false)
 					.withModel(MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue())
 					.build(),

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/MistralAiApiIT.java
Patch:
@@ -46,7 +46,7 @@ public class MistralAiApiIT {
 	void chatCompletionEntity() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		ResponseEntity<ChatCompletion> response = mistralAiApi.chatCompletionEntity(new ChatCompletionRequest(
-				List.of(chatCompletionMessage), MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue(), 0.8f, false));
+				List.of(chatCompletionMessage), MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue(), 0.8, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -63,7 +63,7 @@ void chatCompletionEntityWithSystemMessage() {
 					""", Role.SYSTEM);
 
 		ResponseEntity<ChatCompletion> response = mistralAiApi.chatCompletionEntity(new ChatCompletionRequest(
-				List.of(systemMessage, userMessage), MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue(), 0.8f, false));
+				List.of(systemMessage, userMessage), MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue(), 0.8, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -73,7 +73,7 @@ void chatCompletionEntityWithSystemMessage() {
 	void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		Flux<ChatCompletionChunk> response = mistralAiApi.chatCompletionStream(new ChatCompletionRequest(
-				List.of(chatCompletionMessage), MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue(), 0.8f, true));
+				List.of(chatCompletionMessage), MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getValue(), 0.8, true));
 
 		assertThat(response).isNotNull();
 		assertThat(response.collectList().block()).isNotNull();

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/tool/MistralAiApiToolFunctionCallIT.java
Patch:
@@ -131,7 +131,7 @@ public void toolFunctionCall() throws JsonProcessingException {
 				}
 			}
 
-			var functionResponseRequest = new ChatCompletionRequest(messages, MISTRAL_AI_CHAT_MODEL, 0.8f);
+			var functionResponseRequest = new ChatCompletionRequest(messages, MISTRAL_AI_CHAT_MODEL, 0.8);
 
 			ResponseEntity<ChatCompletion> chatCompletion2 = completionApi
 				.chatCompletionEntity(functionResponseRequest);

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotChatCompletionRequestTest.java
Patch:
@@ -45,12 +45,12 @@ void chatCompletionDefaultRequestTest() {
 
 	@Test
 	void chatCompletionRequestWithOptionsTest() {
-		var options = MoonshotChatOptions.builder().withTemperature(0.5f).withTopP(0.8f).build();
+		var options = MoonshotChatOptions.builder().withTemperature(0.5).withTopP(0.8).build();
 		var request = chatModel.createRequest(new Prompt("test content", options), true);
 
 		assertThat(request.messages().size()).isEqualTo(1);
-		assertThat(request.topP()).isEqualTo(0.8f);
-		assertThat(request.temperature()).isEqualTo(0.5f);
+		assertThat(request.topP()).isEqualTo(0.8);
+		assertThat(request.temperature()).isEqualTo(0.5);
 		assertThat(request.stream()).isTrue();
 	}
 

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/MoonshotRetryTests.java
Patch:
@@ -85,8 +85,8 @@ public void beforeEach() {
 
 		chatModel = new MoonshotChatModel(moonshotApi,
 				MoonshotChatOptions.builder()
-					.withTemperature(0.7f)
-					.withTopP(1f)
+					.withTemperature(0.7)
+					.withTopP(1.0)
 					.withModel(MoonshotApi.ChatModel.MOONSHOT_V1_32K.getValue())
 					.build(),
 				null, retryTemplate);

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/api/MoonshotApiIT.java
Patch:
@@ -41,7 +41,7 @@ public class MoonshotApiIT {
 	void chatCompletionEntity() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		ResponseEntity<ChatCompletion> response = moonshotApi.chatCompletionEntity(new ChatCompletionRequest(
-				List.of(chatCompletionMessage), MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.8f, false));
+				List.of(chatCompletionMessage), MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.8, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -58,7 +58,7 @@ void chatCompletionEntityWithSystemMessage() {
 					""", Role.SYSTEM);
 
 		ResponseEntity<ChatCompletion> response = moonshotApi.chatCompletionEntity(new ChatCompletionRequest(
-				List.of(systemMessage, userMessage), MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.8f, false));
+				List.of(systemMessage, userMessage), MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.8, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -68,7 +68,7 @@ void chatCompletionEntityWithSystemMessage() {
 	void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		Flux<ChatCompletionChunk> response = moonshotApi.chatCompletionStream(new ChatCompletionRequest(
-				List.of(chatCompletionMessage), MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.8f, true));
+				List.of(chatCompletionMessage), MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.8, true));
 
 		assertThat(response).isNotNull();
 		assertThat(response.collectList().block()).isNotNull();

File: models/spring-ai-moonshot/src/test/java/org/springframework/ai/moonshot/api/MoonshotApiToolFunctionCallIT.java
Patch:
@@ -125,7 +125,7 @@ private void toolFunctionCall(String userMessage, String cityName) {
 		}
 
 		var functionResponseRequest = new ChatCompletionRequest(messages,
-				MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.5F);
+				MoonshotApi.ChatModel.MOONSHOT_V1_8K.getValue(), 0.5);
 
 		ResponseEntity<ChatCompletion> chatCompletion2 = moonshotApi.chatCompletionEntity(functionResponseRequest);
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelFunctionCallingIT.java
Patch:
@@ -137,7 +137,7 @@ public OllamaApi ollamaApi() {
 
 		@Bean
 		public OllamaChatModel ollamaChat(OllamaApi ollamaApi) {
-			return new OllamaChatModel(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9f));
+			return new OllamaChatModel(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9));
 		}
 
 	}

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelIT.java
Patch:
@@ -86,7 +86,7 @@ void roleTest() {
 		UserMessage userMessage = new UserMessage("Tell me about 5 famous pirates from the Golden Age of Piracy.");
 
 		// portable/generic options
-		var portableOptions = ChatOptionsBuilder.builder().withTemperature(0.7f).build();
+		var portableOptions = ChatOptionsBuilder.builder().withTemperature(0.7).build();
 
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage), portableOptions);
 
@@ -240,7 +240,7 @@ public OllamaApi ollamaApi() {
 
 		@Bean
 		public OllamaChatModel ollamaChat(OllamaApi ollamaApi) {
-			return new OllamaChatModel(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9f));
+			return new OllamaChatModel(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9));
 		}
 
 	}

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelMultimodalIT.java
Patch:
@@ -91,7 +91,7 @@ public OllamaApi ollamaApi() {
 
 		@Bean
 		public OllamaChatModel ollamaChat(OllamaApi ollamaApi) {
-			return new OllamaChatModel(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9f));
+			return new OllamaChatModel(ollamaApi, OllamaOptions.create().withModel(MODEL).withTemperature(0.9));
 		}
 
 	}

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaModelOptionsTests.java
Patch:
@@ -28,7 +28,7 @@ public class OllamaModelOptionsTests {
 
 	@Test
 	public void testOptions() {
-		var options = OllamaOptions.create().withTemperature(3.14f).withTopK(30).withStop(List.of("a", "b", "c"));
+		var options = OllamaOptions.create().withTemperature(3.14).withTopK(30).withStop(List.of("a", "b", "c"));
 
 		var optionsMap = options.toMap();
 		System.out.println(optionsMap);

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatModel.java
Patch:
@@ -134,7 +134,7 @@ public class OpenAiChatModel extends AbstractToolCallSupport implements ChatMode
 	 */
 	public OpenAiChatModel(OpenAiApi openAiApi) {
 		this(openAiApi,
-				OpenAiChatOptions.builder().withModel(OpenAiApi.DEFAULT_CHAT_MODEL).withTemperature(0.7f).build());
+				OpenAiChatOptions.builder().withModel(OpenAiApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
 	}
 
 	/**

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/OpenAiApiIT.java
Patch:
@@ -44,7 +44,7 @@ public class OpenAiApiIT {
 	void chatCompletionEntity() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		ResponseEntity<ChatCompletion> response = openAiApi.chatCompletionEntity(
-				new ChatCompletionRequest(List.of(chatCompletionMessage), "gpt-3.5-turbo", 0.8f, false));
+				new ChatCompletionRequest(List.of(chatCompletionMessage), "gpt-3.5-turbo", 0.8, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -54,7 +54,7 @@ void chatCompletionEntity() {
 	void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		Flux<ChatCompletionChunk> response = openAiApi.chatCompletionStream(
-				new ChatCompletionRequest(List.of(chatCompletionMessage), "gpt-3.5-turbo", 0.8f, true));
+				new ChatCompletionRequest(List.of(chatCompletionMessage), "gpt-3.5-turbo", 0.8, true));
 
 		assertThat(response).isNotNull();
 		assertThat(response.collectList().block()).isNotNull();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -124,7 +124,7 @@ public void toolFunctionCall() {
 			}
 		}
 
-		var functionResponseRequest = new ChatCompletionRequest(messages, "gpt-4o", 0.5f);
+		var functionResponseRequest = new ChatCompletionRequest(messages, "gpt-4o", 0.5);
 
 		ResponseEntity<ChatCompletion> chatCompletion2 = completionApi.chatCompletionEntity(functionResponseRequest);
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiPaymentTransactionIT.java
Patch:
@@ -203,7 +203,7 @@ public OpenAiChatModel openAiClient(OpenAiApi openAiApi, FunctionCallbackContext
 			return new OpenAiChatModel(openAiApi,
 					OpenAiChatOptions.builder()
 						.withModel(ChatModel.GPT_4_O_MINI.getName())
-						.withTemperature(0.1f)
+						.withTemperature(0.1)
 						.build(),
 					functionCallbackContext, RetryUtils.DEFAULT_RETRY_TEMPLATE);
 		}

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanChatModel.java
Patch:
@@ -77,7 +77,7 @@ public class QianFanChatModel implements ChatModel, StreamingChatModel {
 	 */
 	public QianFanChatModel(QianFanApi qianFanApi) {
 		this(qianFanApi,
-				QianFanChatOptions.builder().withModel(QianFanApi.DEFAULT_CHAT_MODEL).withTemperature(0.7f).build());
+				QianFanChatOptions.builder().withModel(QianFanApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
 	}
 
 	/**

File: models/spring-ai-qianfan/src/test/java/org/springframework/ai/qianfan/api/QianFanApiIT.java
Patch:
@@ -47,7 +47,7 @@ public class QianFanApiIT {
 	void chatCompletionEntity() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		ResponseEntity<ChatCompletion> response = qianFanApi.chatCompletionEntity(new ChatCompletionRequest(
-				List.of(chatCompletionMessage), buildSystemMessage(), "ernie_speed", 0.7f, false));
+				List.of(chatCompletionMessage), buildSystemMessage(), "ernie_speed", 0.7, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -57,7 +57,7 @@ void chatCompletionEntity() {
 	void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		Flux<ChatCompletionChunk> response = qianFanApi.chatCompletionStream(new ChatCompletionRequest(
-				List.of(chatCompletionMessage), buildSystemMessage(), "ernie_speed", 0.7f, true));
+				List.of(chatCompletionMessage), buildSystemMessage(), "ernie_speed", 0.7, true));
 
 		assertThat(response).isNotNull();
 		assertThat(response.collectList().block()).isNotNull();

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -138,7 +138,7 @@ public String getName() {
 
 	public VertexAiGeminiChatModel(VertexAI vertexAI) {
 		this(vertexAI,
-				VertexAiGeminiChatOptions.builder().withModel(ChatModel.GEMINI_1_5_PRO).withTemperature(0.8f).build());
+				VertexAiGeminiChatOptions.builder().withModel(ChatModel.GEMINI_1_5_PRO).withTemperature(0.8).build());
 	}
 
 	public VertexAiGeminiChatModel(VertexAI vertexAI, VertexAiGeminiChatOptions options) {
@@ -354,7 +354,7 @@ private GenerationConfig toGenerationConfig(VertexAiGeminiChatOptions options) {
 		GenerationConfig.Builder generationConfigBuilder = GenerationConfig.newBuilder();
 
 		if (options.getTemperature() != null) {
-			generationConfigBuilder.setTemperature(options.getTemperature());
+			generationConfigBuilder.setTemperature(options.getTemperature().floatValue());
 		}
 		if (options.getMaxOutputTokens() != null) {
 			generationConfigBuilder.setMaxOutputTokens(options.getMaxOutputTokens());
@@ -363,7 +363,7 @@ private GenerationConfig toGenerationConfig(VertexAiGeminiChatOptions options) {
 			generationConfigBuilder.setTopK(options.getTopK());
 		}
 		if (options.getTopP() != null) {
-			generationConfigBuilder.setTopP(options.getTopP());
+			generationConfigBuilder.setTopP(options.getTopP().floatValue());
 		}
 		if (options.getCandidateCount() != null) {
 			generationConfigBuilder.setCandidateCount(options.getCandidateCount());

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiChatModelFunctionCallingIT.java
Patch:
@@ -242,7 +242,7 @@ public VertexAiGeminiChatModel vertexAiEmbedding(VertexAI vertexAi) {
 			return new VertexAiGeminiChatModel(vertexAi,
 					VertexAiGeminiChatOptions.builder()
 						.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_PRO)
-						.withTemperature(0.9f)
+						.withTemperature(0.9)
 						.build());
 		}
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiPaymentTransactionIT.java
Patch:
@@ -202,7 +202,7 @@ public VertexAiGeminiChatModel vertexAiChatModel(VertexAI vertexAi, ApplicationC
 			return new VertexAiGeminiChatModel(vertexAi,
 					VertexAiGeminiChatOptions.builder()
 							.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_FLASH)
-							.withTemperature(0.1f)
+							.withTemperature(0.1)
 							.build(),
 					functionCallbackContext);
 		}

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2ChatModel.java
Patch:
@@ -43,7 +43,7 @@ public class VertexAiPaLm2ChatModel implements ChatModel {
 
 	public VertexAiPaLm2ChatModel(VertexAiPaLm2Api vertexAiApi) {
 		this(vertexAiApi,
-				VertexAiPaLm2ChatOptions.builder().withTemperature(0.7f).withCandidateCount(1).withTopK(20).build());
+				VertexAiPaLm2ChatOptions.builder().withTemperature(0.7).withCandidateCount(1).withTopK(20).build());
 	}
 
 	public VertexAiPaLm2ChatModel(VertexAiPaLm2Api vertexAiApi, VertexAiPaLm2ChatOptions defaultOptions) {

File: models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/WatsonxAiChatModel.java
Patch:
@@ -57,13 +57,13 @@ public class WatsonxAiChatModel implements ChatModel, StreamingChatModel {
 	public WatsonxAiChatModel(WatsonxAiApi watsonxAiApi) {
 		this(watsonxAiApi,
 				WatsonxAiChatOptions.builder()
-					.withTemperature(0.7f)
-					.withTopP(1.0f)
+					.withTemperature(0.7)
+					.withTopP(1.0)
 					.withTopK(50)
 					.withDecodingMethod("greedy")
 					.withMaxNewTokens(20)
 					.withMinNewTokens(0)
-					.withRepetitionPenalty(1.0f)
+					.withRepetitionPenalty(1.0)
 					.withStopSequences(List.of())
 					.build());
 	}

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiChatModel.java
Patch:
@@ -100,7 +100,7 @@ public class ZhiPuAiChatModel extends AbstractToolCallSupport implements ChatMod
 	 */
 	public ZhiPuAiChatModel(ZhiPuAiApi zhiPuAiApi) {
 		this(zhiPuAiApi,
-				ZhiPuAiChatOptions.builder().withModel(ZhiPuAiApi.DEFAULT_CHAT_MODEL).withTemperature(0.7f).build());
+				ZhiPuAiChatOptions.builder().withModel(ZhiPuAiApi.DEFAULT_CHAT_MODEL).withTemperature(0.7).build());
 	}
 
 	/**

File: spring-ai-core/src/test/java/org/springframework/ai/prompt/PromptTemplateTest.java
Patch:
@@ -44,7 +44,7 @@ public class PromptTemplateTest {
 	public void testCreateWithEmptyModelAndChatOptions() {
 		String template = "This is a test prompt with no variables";
 		PromptTemplate promptTemplate = new PromptTemplate(template);
-		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.7f).withTopK(3).build();
+		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.7).withTopK(3).build();
 
 		Prompt prompt = promptTemplate.create(chatOptions);
 
@@ -60,7 +60,7 @@ public void testCreateWithModelAndChatOptions() {
 		model.put("name", "Alice");
 		model.put("age", 30);
 		PromptTemplate promptTemplate = new PromptTemplate(template, model);
-		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.5f).withMaxTokens(100).build();
+		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.5).withMaxTokens(100).build();
 
 		Prompt prompt = promptTemplate.create(model, chatOptions);
 
@@ -79,7 +79,7 @@ public void testCreateWithOverriddenModelAndChatOptions() {
 
 		Map<String, Object> overriddenModel = new HashMap<>();
 		overriddenModel.put("color", "red");
-		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.8f).build();
+		ChatOptions chatOptions = ChatOptionsBuilder.builder().withTemperature(0.8).build();
 
 		Prompt prompt = promptTemplate.create(overriddenModel, chatOptions);
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiChatProperties.java
Patch:
@@ -36,7 +36,7 @@ public class AzureOpenAiChatProperties {
 	@NestedConfigurationProperty
 	private AzureOpenAiChatOptions options = AzureOpenAiChatOptions.builder()
 		.withDeploymentName(DEFAULT_DEPLOYMENT_NAME)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public AzureOpenAiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatProperties.java
Patch:
@@ -47,7 +47,7 @@ public class BedrockAnthropicChatProperties {
 
 	@NestedConfigurationProperty
 	private AnthropicChatOptions options = AnthropicChatOptions.builder()
-		.withTemperature(0.7f)
+		.withTemperature(0.7)
 		.withMaxTokensToSample(300)
 		.withTopK(10)
 		.withStopSequences(List.of("\n\nHuman:"))

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatProperties.java
Patch:
@@ -46,7 +46,7 @@ public class BedrockAnthropic3ChatProperties {
 
 	@NestedConfigurationProperty
 	private Anthropic3ChatOptions options = Anthropic3ChatOptions.builder()
-		.withTemperature(0.7f)
+		.withTemperature(0.7)
 		.withMaxTokens(300)
 		.withTopK(10)
 		.withAnthropicVersion(Anthropic3ChatBedrockApi.DEFAULT_ANTHROPIC_VERSION)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatProperties.java
Patch:
@@ -45,7 +45,7 @@ public class BedrockAi21Jurassic2ChatProperties {
 
 	@NestedConfigurationProperty
 	private BedrockAi21Jurassic2ChatOptions options = BedrockAi21Jurassic2ChatOptions.builder()
-		.withTemperature(0.7f)
+		.withTemperature(0.7)
 		.withMaxTokens(500)
 		.build();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama/BedrockLlamaChatProperties.java
Patch:
@@ -43,7 +43,7 @@ public class BedrockLlamaChatProperties {
 
 	@NestedConfigurationProperty
 	private BedrockLlamaChatOptions options = BedrockLlamaChatOptions.builder()
-		.withTemperature(0.7f)
+		.withTemperature(0.7)
 		.withMaxGenLen(300)
 		.build();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatProperties.java
Patch:
@@ -42,7 +42,7 @@ public class BedrockTitanChatProperties {
 	private String model = TitanChatModel.TITAN_TEXT_EXPRESS_V1.id();
 
 	@NestedConfigurationProperty
-	private BedrockTitanChatOptions options = BedrockTitanChatOptions.builder().withTemperature(0.7f).build();
+	private BedrockTitanChatOptions options = BedrockTitanChatOptions.builder().withTemperature(0.7).build();
 
 	public boolean isEnabled() {
 		return enabled;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxChatProperties.java
Patch:
@@ -40,7 +40,7 @@ public class MiniMaxChatProperties extends MiniMaxParentProperties {
 	@NestedConfigurationProperty
 	private MiniMaxChatOptions options = MiniMaxChatOptions.builder()
 		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public MiniMaxChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiChatProperties.java
Patch:
@@ -35,7 +35,7 @@ public class MistralAiChatProperties extends MistralAiParentProperties {
 
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 
-	private static final Float DEFAULT_TOP_P = 1.0f;
+	private static final Double DEFAULT_TOP_P = 1.0;
 
 	private static final Boolean IS_ENABLED = false;
 
@@ -51,7 +51,7 @@ public MistralAiChatProperties() {
 	@NestedConfigurationProperty
 	private MistralAiChatOptions options = MistralAiChatOptions.builder()
 		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.withSafePrompt(!IS_ENABLED)
 		.withTopP(DEFAULT_TOP_P)
 		.build();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/moonshot/MoonshotChatProperties.java
Patch:
@@ -40,7 +40,7 @@ public class MoonshotChatProperties extends MoonshotParentProperties {
 	@NestedConfigurationProperty
 	private MoonshotChatOptions options = MoonshotChatOptions.builder()
 		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public MoonshotChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiChatProperties.java
Patch:
@@ -40,7 +40,7 @@ public class OpenAiChatProperties extends OpenAiParentProperties {
 	@NestedConfigurationProperty
 	private OpenAiChatOptions options = OpenAiChatOptions.builder()
 		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public OpenAiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/qianfan/QianFanChatProperties.java
Patch:
@@ -40,7 +40,7 @@ public class QianFanChatProperties extends QianFanParentProperties {
 	@NestedConfigurationProperty
 	private QianFanChatOptions options = QianFanChatOptions.builder()
 		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public QianFanChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiChatProperties.java
Patch:
@@ -36,7 +36,7 @@ public class VertexAiGeminiChatProperties {
 	 * Vertex AI Gemini API generative options.
 	 */
 	private VertexAiGeminiChatOptions options = VertexAiGeminiChatOptions.builder()
-		.withTemperature(0.7f)
+		.withTemperature(0.7)
 		.withCandidateCount(1)
 		.withModel(DEFAULT_MODEL)
 		.build();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/palm2/VertexAiPlam2ChatProperties.java
Patch:
@@ -38,7 +38,7 @@ public class VertexAiPlam2ChatProperties {
 	 * Vertex AI PaLM API generative options.
 	 */
 	private VertexAiPaLm2ChatOptions options = VertexAiPaLm2ChatOptions.builder()
-		.withTemperature(0.7f)
+		.withTemperature(0.7)
 		.withTopP(null)
 		.withCandidateCount(1)
 		.withTopK(20)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiChatProperties.java
Patch:
@@ -43,13 +43,13 @@ public class WatsonxAiChatProperties {
 	@NestedConfigurationProperty
 	private WatsonxAiChatOptions options = WatsonxAiChatOptions.builder()
 		.withModel("google/flan-ul2")
-		.withTemperature(0.7f)
-		.withTopP(1.0f)
+		.withTemperature(0.7)
+		.withTopP(1.0)
 		.withTopK(50)
 		.withDecodingMethod("greedy")
 		.withMaxNewTokens(20)
 		.withMinNewTokens(0)
-		.withRepetitionPenalty(1.0f)
+		.withRepetitionPenalty(1.0)
 		.withStopSequences(List.of())
 		.build();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiChatProperties.java
Patch:
@@ -40,7 +40,7 @@ public class ZhiPuAiChatProperties extends ZhiPuAiParentProperties {
 	@NestedConfigurationProperty
 	private ZhiPuAiChatOptions options = ZhiPuAiChatOptions.builder()
 		.withModel(DEFAULT_CHAT_MODEL)
-		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
+		.withTemperature(DEFAULT_TEMPERATURE)
 		.build();
 
 	public ZhiPuAiChatOptions getOptions() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/anthropic/AnthropicPropertiesTests.java
Patch:
@@ -54,7 +54,7 @@ public void connectionProperties() {
 				assertThat(connectionProperties.getBetaVersion()).isEqualTo("7777");
 
 				assertThat(chatProperties.getOptions().getModel()).isEqualTo("MODEL_XYZ");
-				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);
+				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55);
 				// enabled is true by default
 				assertThat(chatProperties.isEnabled()).isTrue();
 			});
@@ -89,8 +89,8 @@ public void chatOptionsTest() {
 				assertThat(chatProperties.getOptions().getModel()).isEqualTo("MODEL_XYZ");
 				assertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);
 				assertThat(chatProperties.getOptions().getStopSequences()).contains("boza", "koza");
-				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);
-				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);
+				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55);
+				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56);
 				assertThat(chatProperties.getOptions().getTopK()).isEqualTo(100);
 
 				assertThat(chatProperties.getOptions().getMetadata().userId()).isEqualTo("MyUserId");

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationPropertyTests.java
Patch:
@@ -83,14 +83,14 @@ public void chatPropertiesTest() {
 				assertThat(embeddingProperties.getOptions().getDeploymentName()).isEqualTo("text-embedding-ada-002");
 
 				assertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo("MODEL_XYZ");
-				assertThat(chatProperties.getOptions().getFrequencyPenalty()).isEqualTo(-1.5f);
+				assertThat(chatProperties.getOptions().getFrequencyPenalty()).isEqualTo(-1.5);
 				assertThat(chatProperties.getOptions().getLogitBias().get("myTokenId")).isEqualTo(-5);
 				assertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);
 				assertThat(chatProperties.getOptions().getN()).isEqualTo(10);
 				assertThat(chatProperties.getOptions().getPresencePenalty()).isEqualTo(0);
 				assertThat(chatProperties.getOptions().getStop()).contains("boza", "koza");
-				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);
-				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);
+				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55);
+				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56);
 
 				assertThat(chatProperties.getOptions().getUser()).isEqualTo("userXYZ");
 			});

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationTests.java
Patch:
@@ -49,8 +49,8 @@ public void propertiesTest() {
 
 				assertThat(chatProperties.getModel()).isEqualTo("MODEL_XYZ");
 
-				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55f);
-				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56f);
+				assertThat(chatProperties.getOptions().getTemperature()).isEqualTo(0.55);
+				assertThat(chatProperties.getOptions().getTopP()).isEqualTo(0.56);
 
 				assertThat(chatProperties.getOptions().getTopK()).isEqualTo(123);
 			});

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/ResponseAdvisor.java
Patch:
@@ -78,7 +78,7 @@ public enum StreamResponseMode {
 	}
 
 	default StreamResponseMode getStreamResponseMode() {
-		return StreamResponseMode.AGGREGATE;
+		return StreamResponseMode.ON_FINISH_ELEMENT;
 	}
 
 	/**

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/TokenCountBatchingStrategy.java
Patch:
@@ -46,6 +46,7 @@
  *
  * @author Soby Chacko
  * @author Mark Pollack
+ * @author Laura Trotta
  * @since 1.0.0
  */
 public class TokenCountBatchingStrategy implements BatchingStrategy {
@@ -122,7 +123,7 @@ public List<List<Document>> batch(List<Document> documents) {
 			Integer tokenCount = documentTokens.get(document);
 			if (currentSize + tokenCount > maxInputTokenCount) {
 				batches.add(currentBatch);
-				currentBatch.clear();
+				currentBatch = new ArrayList<>();
 				currentSize = 0;
 			}
 			currentBatch.add(document);

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -431,7 +431,7 @@ else if (message instanceof UserMessage userMessage) {
 		else if (message instanceof AssistantMessage assistantMessage) {
 			List<Part> parts = new ArrayList<>();
 			if (StringUtils.hasText(assistantMessage.getContent())) {
-				List.of(Part.newBuilder().setText(assistantMessage.getContent()).build());
+				parts.add(Part.newBuilder().setText(assistantMessage.getContent()).build());
 			}
 			if (!CollectionUtils.isEmpty(assistantMessage.getToolCalls())) {
 				parts.addAll(assistantMessage.getToolCalls()

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApiConstants.java
Patch:
@@ -10,4 +10,6 @@ public final class MiniMaxApiConstants {
 
 	public static final String DEFAULT_BASE_URL = "https://api.minimax.chat";
 
+	public static final String TOOL_CALL_FUNCTION_TYPE = "function";
+
 }

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiAudioApi.java
Patch:
@@ -62,7 +62,7 @@ public OpenAiAudioApi(String openAiToken) {
 	}
 
 	/**
-	 * Create an new chat completion api.
+	 * Create a new audio api.
 	 * @param baseUrl api base URL.
 	 * @param openAiToken OpenAI apiKey.
 	 * @param restClientBuilder RestClient builder.
@@ -81,7 +81,7 @@ public OpenAiAudioApi(String baseUrl, String openAiToken, RestClient.Builder res
 	}
 
 	/**
-	 * Create an new chat completion api.
+	 * Create a new audio api.
 	 * @param baseUrl api base URL.
 	 * @param apiKey OpenAI apiKey.
 	 * @param restClientBuilder RestClient builder.
@@ -96,7 +96,7 @@ public OpenAiAudioApi(String baseUrl, String apiKey, RestClient.Builder restClie
 	}
 
 	/**
-	 * Create an new chat completion api.
+	 * Create a new audio api.
 	 * @param baseUrl api base URL.
 	 * @param apiKey OpenAI apiKey.
 	 * @param headers the http headers to use.

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreObservationIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.ai.chroma.ChromaApi;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.SpringAiKind;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
@@ -169,7 +170,8 @@ public ChromaApi chromaApi(RestClient.Builder builder) {
 		@Bean
 		public VectorStore chromaVectorStore(EmbeddingModel embeddingModel, ChromaApi chromaApi,
 				ObservationRegistry observationRegistry) {
-			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection", true, observationRegistry, null);
+			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection", true, observationRegistry, null,
+					new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-elasticsearch-store/src/test/java/org/springframework/ai/vectorstore/ElasticsearchVectorStoreObservationIT.java
Patch:
@@ -33,6 +33,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.SpringAiKind;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
@@ -202,7 +203,7 @@ public TestObservationRegistry observationRegistry() {
 		public ElasticsearchVectorStore vectorStoreDefault(EmbeddingModel embeddingModel, RestClient restClient,
 				ObservationRegistry observationRegistry) {
 			return new ElasticsearchVectorStore(new ElasticsearchVectorStoreOptions(), restClient, embeddingModel, true,
-					observationRegistry, null);
+					observationRegistry, null, new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/Neo4jVectorStoreObservationIT.java
Patch:
@@ -31,6 +31,7 @@
 import org.neo4j.driver.GraphDatabase;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.SpringAiKind;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
@@ -174,7 +175,7 @@ public VectorStore vectorStore(Driver driver, EmbeddingModel embeddingModel,
 				ObservationRegistry observationRegistry) {
 
 			return new Neo4jVectorStore(driver, embeddingModel, Neo4jVectorStore.Neo4jVectorStoreConfig.defaultConfig(),
-					true, observationRegistry, null);
+					true, observationRegistry, null, new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-qdrant-store/src/test/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStoreObservationIT.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.mistralai.MistralAiEmbeddingModel;
 import org.springframework.ai.mistralai.api.MistralAiApi;
 import org.springframework.ai.observation.conventions.SpringAiKind;
@@ -191,8 +192,8 @@ public QdrantClient qdrantClient() {
 		@Bean
 		public VectorStore qdrantVectorStore(EmbeddingModel embeddingModel, QdrantClient qdrantClient,
 				ObservationRegistry observationRegistry) {
-			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel, true, observationRegistry,
-					null);
+			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel, true, observationRegistry, null,
+					new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-redis-store/src/test/java/org/springframework/ai/vectorstore/RedisVectorStoreObservationIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.SpringAiKind;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
@@ -178,7 +179,7 @@ public RedisVectorStore vectorStore(EmbeddingModel embeddingModel,
 						.build(),
 					embeddingModel,
 					new JedisPooled(jedisConnectionFactory.getHostName(), jedisConnectionFactory.getPort()), true,
-					observationRegistry, null);
+					observationRegistry, null, new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-typesense-store/src/test/java/org/springframework/ai/vectorstore/TypesenseVectorStoreObservationIT.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.SpringAiKind;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
@@ -169,7 +170,8 @@ public VectorStore vectorStore(Client client, EmbeddingModel embeddingModel,
 				.withEmbeddingDimension(embeddingModel.dimensions())
 				.build();
 
-			return new TypesenseVectorStore(client, embeddingModel, config, true, observationRegistry, null);
+			return new TypesenseVectorStore(client, embeddingModel, config, true, observationRegistry, null,
+					new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-weaviate-store/src/test/java/org/springframework/ai/vectorstore/WeaviateVectorStoreObservationIT.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.SpringAiKind;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.transformers.TransformersEmbeddingModel;
@@ -165,7 +166,8 @@ public WeaviateVectorStore vectorStore(EmbeddingModel embeddingModel, Observatio
 				.withConsistencyLevel(WeaviateVectorStoreConfig.ConsistentLevel.ONE)
 				.build();
 
-			return new WeaviateVectorStore(config, embeddingModel, weaviateClient, observationRegistry, null);
+			return new WeaviateVectorStore(config, embeddingModel, weaviateClient, observationRegistry, null,
+					new TokenCountBatchingStrategy());
 
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/api/CallAroundAdvisor.java
Patch:
@@ -28,7 +28,7 @@
 public interface CallAroundAdvisor extends Advisor {
 
 	/**
-	 * Around advice that wraps the {@link ChatModel#call(Prompt)} method.
+	 * Around advice that wraps the ChatModel#call(Prompt) method.
 	 * @param advisedRequest the advised request
 	 * @param adviceContext the advice context
 	 * @param chain the advisor chain

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/GroqWithOpenAiChatModelIT.java
Patch:
@@ -34,7 +34,6 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.ai.chat.client.ChatClient;
 import org.springframework.ai.chat.messages.AssistantMessage;
-import org.springframework.ai.model.Media;
 import org.springframework.ai.chat.messages.Message;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.model.ChatResponse;
@@ -45,6 +44,7 @@
 import org.springframework.ai.converter.BeanOutputConverter;
 import org.springframework.ai.converter.ListOutputConverter;
 import org.springframework.ai.converter.MapOutputConverter;
+import org.springframework.ai.model.Media;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.ai.openai.OpenAiChatModel;
 import org.springframework.ai.openai.OpenAiChatOptions;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/DefaultChatClientBuilder.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.ai.chat.client.ChatClient.PromptSystemSpec;
 import org.springframework.ai.chat.client.ChatClient.PromptUserSpec;
 import org.springframework.ai.chat.client.DefaultChatClient.DefaultChatClientRequestSpec;
+import org.springframework.ai.chat.client.advisor.api.Advisor;
 import org.springframework.ai.chat.client.observation.ChatClientObservationConvention;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.prompt.ChatOptions;
@@ -69,7 +70,7 @@ public ChatClient build() {
 		return new DefaultChatClient(this.chatModel, this.defaultRequest);
 	}
 
-	public Builder defaultAdvisors(RequestResponseAdvisor... advisor) {
+	public Builder defaultAdvisors(Advisor... advisor) {
 		this.defaultRequest.advisors(advisor);
 		return this;
 	}
@@ -79,7 +80,7 @@ public Builder defaultAdvisors(Consumer<ChatClient.AdvisorSpec> advisorSpecConsu
 		return this;
 	}
 
-	public Builder defaultAdvisors(List<RequestResponseAdvisor> advisors) {
+	public Builder defaultAdvisors(List<Advisor> advisors) {
 		this.defaultRequest.advisors(advisors);
 		return this;
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/VectorStoreChatMemoryAdvisor.java
Patch:
@@ -84,8 +84,7 @@ public AdvisedRequest adviseRequest(AdvisedRequest request, Map<String, Object>
 
 		var searchRequest = SearchRequest.query(request.userText())
 			.withTopK(this.doGetChatMemoryRetrieveSize(context))
-			.withFilterExpression(
-					"'" + DOCUMENT_METADATA_CONVERSATION_ID + "'=='" + this.doGetConversationId(context) + "'");
+			.withFilterExpression(DOCUMENT_METADATA_CONVERSATION_ID + "=='" + this.doGetConversationId(context) + "'");
 
 		List<Document> documents = this.getChatMemoryStore().similaritySearch(searchRequest);
 

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApi.java
Patch:
@@ -714,7 +714,7 @@ public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chat
 				.takeUntil(SSE_DONE_PREDICATE)
 				.filter(SSE_DONE_PREDICATE.negate())
 				.map(content -> ModelOptionsUtils.jsonToObject(content, ChatCompletionChunk.class))
- 				.map(chunk -> {
+				.map(chunk -> {
 					if (this.chunkMerger.isStreamingToolFunctionCall(chunk)) {
 						isInsideTool.set(true);
 					}
@@ -730,7 +730,7 @@ public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chat
 				.concatMapIterable(window -> {
 					Mono<ChatCompletionChunk> monoChunk = window.reduce(
 							new ChatCompletionChunk(null, null, null, null, null, null),
-							this.chunkMerger::merge);
+							(previous, current) -> this.chunkMerger.merge(previous, current));
 					return List.of(monoChunk);
 				})
 				.flatMap(mono -> mono);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/MiniMaxAutoConfigurationIT.java
Patch:
@@ -20,8 +20,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
-import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
+import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.minimax.MiniMaxChatModel;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/MockWeatherService.java
Patch:
@@ -34,7 +34,7 @@ public class MockWeatherService implements Function<MockWeatherService.Request,
 	 * Weather Function request.
 	 */
 	@JsonInclude(Include.NON_NULL)
-	@JsonClassDescription("Weather API request")
+	@JsonClassDescription("Get the weather in location")
 	public record Request(@JsonProperty(required = true,
 			value = "location") @JsonPropertyDescription("The city and state e.g. San Francisco, CA") String location,
 			@JsonProperty(required = true, value = "lat") @JsonPropertyDescription("The city latitude") double lat,

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -359,6 +359,9 @@ private GenerationConfig toGenerationConfig(VertexAiGeminiChatOptions options) {
 		if (options.getStopSequences() != null) {
 			generationConfigBuilder.addAllStopSequences(options.getStopSequences());
 		}
+		if (options.getResponseMimeType() != null) {
+			generationConfigBuilder.setResponseMimeType(options.getResponseMimeType());
+		}
 
 		return generationConfigBuilder.build();
 	}

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelObservationIT.java
Patch:
@@ -139,7 +139,8 @@ private void validate(ChatResponseMetadata responseMetadata) {
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TEMPERATURE.asString(), "0.7")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_K.asString(), KeyValue.NONE_VALUE)
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_TOP_P.asString(), "1.0")
-			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_ID.asString(), responseMetadata.getId())
+			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_ID.asString(),
+					StringUtils.hasText(responseMetadata.getId()) ? responseMetadata.getId() : KeyValue.NONE_VALUE)
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.RESPONSE_FINISH_REASONS.asString(), "[\"STOP\"]")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))

File: spring-ai-core/src/main/java/org/springframework/ai/chat/observation/ChatModelCompletionObservationFilter.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationFilter;
+import org.springframework.ai.observation.tracing.TracingHelper;
 
 /**
  * An {@link ObservationFilter} to include the chat completion content in the observation.
@@ -36,7 +37,7 @@ public Observation.Context map(Observation.Context context) {
 
 		chatModelObservationContext
 			.addHighCardinalityKeyValue(ChatModelObservationDocumentation.HighCardinalityKeyNames.COMPLETION
-				.withValue(ChatModelObservationContentProcessor.concatenateStrings(completions)));
+				.withValue(TracingHelper.concatenateStrings(completions)));
 
 		return chatModelObservationContext;
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/chat/observation/ChatModelCompletionObservationHandler.java
Patch:
@@ -23,6 +23,7 @@
 import io.opentelemetry.api.trace.Span;
 import org.springframework.ai.observation.conventions.AiObservationAttributes;
 import org.springframework.ai.observation.conventions.AiObservationEventNames;
+import org.springframework.ai.observation.tracing.TracingHelper;
 
 /**
  * Handler for including the chat completion content in the observation as a span event.
@@ -36,7 +37,7 @@ public class ChatModelCompletionObservationHandler implements ObservationHandler
 	public void onStop(ChatModelObservationContext context) {
 		TracingObservationHandler.TracingContext tracingContext = context
 			.get(TracingObservationHandler.TracingContext.class);
-		Span otelSpan = ChatModelObservationContentProcessor.extractOtelSpan(tracingContext);
+		Span otelSpan = TracingHelper.extractOtelSpan(tracingContext);
 
 		if (otelSpan != null) {
 			otelSpan.addEvent(AiObservationEventNames.CONTENT_COMPLETION.value(),

File: spring-ai-core/src/main/java/org/springframework/ai/chat/observation/ChatModelPromptContentObservationFilter.java
Patch:
@@ -17,6 +17,7 @@
 
 import io.micrometer.observation.Observation;
 import io.micrometer.observation.ObservationFilter;
+import org.springframework.ai.observation.tracing.TracingHelper;
 
 /**
  * An {@link ObservationFilter} to include the chat prompt content in the observation.
@@ -36,7 +37,7 @@ public Observation.Context map(Observation.Context context) {
 
 		chatModelObservationContext
 			.addHighCardinalityKeyValue(ChatModelObservationDocumentation.HighCardinalityKeyNames.PROMPT
-				.withValue(ChatModelObservationContentProcessor.concatenateStrings(prompts)));
+				.withValue(TracingHelper.concatenateStrings(prompts)));
 
 		return chatModelObservationContext;
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/chat/observation/ChatModelPromptContentObservationHandler.java
Patch:
@@ -23,6 +23,7 @@
 import io.opentelemetry.api.trace.Span;
 import org.springframework.ai.observation.conventions.AiObservationAttributes;
 import org.springframework.ai.observation.conventions.AiObservationEventNames;
+import org.springframework.ai.observation.tracing.TracingHelper;
 
 /**
  * Handler for including the chat prompt content in the observation as a span event.
@@ -36,7 +37,7 @@ public class ChatModelPromptContentObservationHandler implements ObservationHand
 	public void onStop(ChatModelObservationContext context) {
 		TracingObservationHandler.TracingContext tracingContext = context
 			.get(TracingObservationHandler.TracingContext.class);
-		Span otelSpan = ChatModelObservationContentProcessor.extractOtelSpan(tracingContext);
+		Span otelSpan = TracingHelper.extractOtelSpan(tracingContext);
 
 		if (otelSpan != null) {
 			otelSpan.addEvent(AiObservationEventNames.CONTENT_PROMPT.value(),

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelCompletionObservationHandlerTests.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.observation.conventions.AiObservationAttributes;
 import org.springframework.ai.observation.conventions.AiObservationEventNames;
+import org.springframework.ai.observation.tracing.TracingHelper;
 
 import java.util.List;
 
@@ -59,7 +60,7 @@ void whenCompletionWithTextThenSpanEvent() {
 
 		new ChatModelCompletionObservationHandler().onStop(observationContext);
 
-		var otelSpan = ChatModelObservationContentProcessor.extractOtelSpan(tracingContext);
+		var otelSpan = TracingHelper.extractOtelSpan(tracingContext);
 		assertThat(otelSpan).isNotNull();
 		var spanData = ((ReadableSpan) otelSpan).toSpanData();
 		assertThat(spanData.getEvents().size()).isEqualTo(1);

File: spring-ai-core/src/test/java/org/springframework/ai/chat/observation/ChatModelPromptContentObservationHandlerTests.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.observation.conventions.AiObservationAttributes;
 import org.springframework.ai.observation.conventions.AiObservationEventNames;
+import org.springframework.ai.observation.tracing.TracingHelper;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -52,7 +53,7 @@ void whenPromptWithTextThenSpanEvent() {
 
 		new ChatModelPromptContentObservationHandler().onStop(observationContext);
 
-		var otelSpan = ChatModelObservationContentProcessor.extractOtelSpan(tracingContext);
+		var otelSpan = TracingHelper.extractOtelSpan(tracingContext);
 		assertThat(otelSpan).isNotNull();
 		var spanData = ((ReadableSpan) otelSpan).toSpanData();
 		assertThat(spanData.getEvents().size()).isEqualTo(1);

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/observation/VectorStoreQueryResponseObservationFilterTests.java
Patch:
@@ -30,6 +30,7 @@
  * Unit tests for {@link VectorStoreQueryResponseObservationFilter}.
  *
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 class VectorStoreQueryResponseObservationFilterTests {
 
@@ -64,8 +65,8 @@ void whenNonEmptyQueryResponseThenAugmentContext() {
 
 		var augmentedContext = observationFilter.map(expectedContext);
 
-		assertThat(augmentedContext.getHighCardinalityKeyValues())
-			.contains(KeyValue.of(HighCardinalityKeyNames.QUERY_RESPONSE.asString(), "[\"doc1\", \"doc2\"]"));
+		assertThat(augmentedContext.getHighCardinalityKeyValues()).contains(KeyValue
+			.of(HighCardinalityKeyNames.DB_VECTOR_QUERY_RESPONSE_DOCUMENTS.asString(), "[\"doc1\", \"doc2\"]"));
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -82,7 +82,7 @@ public void addAndSearchTest() {
 
 			vectorStore.add(documents);
 
-			assertObservationRegistry(observationRegistry, "vector_store", VectorStoreProvider.ELASTICSEARCH,
+			assertObservationRegistry(observationRegistry, VectorStoreProvider.ELASTICSEARCH,
 					VectorStoreObservationContext.Operation.ADD);
 			observationRegistry.clear();
 
@@ -104,14 +104,14 @@ public void addAndSearchTest() {
 			assertThat(resultDoc.getMetadata()).containsKey("meta2");
 			assertThat(resultDoc.getMetadata()).containsKey("distance");
 
-			assertObservationRegistry(observationRegistry, "vector_store", VectorStoreProvider.ELASTICSEARCH,
+			assertObservationRegistry(observationRegistry, VectorStoreProvider.ELASTICSEARCH,
 					VectorStoreObservationContext.Operation.QUERY);
 			observationRegistry.clear();
 
 			// Remove all documents from the store
 			vectorStore.delete(documents.stream().map(Document::getId).toList());
 
-			assertObservationRegistry(observationRegistry, "vector_store", VectorStoreProvider.ELASTICSEARCH,
+			assertObservationRegistry(observationRegistry, VectorStoreProvider.ELASTICSEARCH,
 					VectorStoreObservationContext.Operation.DELETE);
 			observationRegistry.clear();
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/observation/ObservationTestUtil.java
Patch:
@@ -29,13 +29,13 @@
 
 public class ObservationTestUtil {
 
-	public static void assertObservationRegistry(TestObservationRegistry observationRegistry, String kind,
+	public static void assertObservationRegistry(TestObservationRegistry observationRegistry,
 			VectorStoreProvider vectorStoreProvider, VectorStoreObservationContext.Operation operation) {
 		TestObservationRegistryAssert.assertThat(observationRegistry)
 			.doesNotHaveAnyRemainingCurrentObservation()
 			.hasObservationWithNameEqualTo(DefaultVectorStoreObservationConvention.DEFAULT_NAME)
 			.that()
-			.hasContextualNameEqualTo(kind + " " + vectorStoreProvider.value() + " " + operation.value())
+			.hasContextualNameEqualTo(vectorStoreProvider.value() + " " + operation.value())
 			.hasBeenStarted()
 			.hasBeenStopped();
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -91,7 +91,7 @@ public void addAndSearchTest() {
 
 			vectorStore.add(documents);
 
-			assertObservationRegistry(observationRegistry, "vector_store", VectorStoreProvider.OPENSEARCH,
+			assertObservationRegistry(observationRegistry, VectorStoreProvider.OPENSEARCH,
 					VectorStoreObservationContext.Operation.ADD);
 
 			Awaitility.await()
@@ -104,7 +104,7 @@ public void addAndSearchTest() {
 			List<Document> results = vectorStore
 				.similaritySearch(SearchRequest.query("Great Depression").withTopK(1).withSimilarityThreshold(0));
 
-			assertObservationRegistry(observationRegistry, "vector_store", VectorStoreProvider.OPENSEARCH,
+			assertObservationRegistry(observationRegistry, VectorStoreProvider.OPENSEARCH,
 					VectorStoreObservationContext.Operation.QUERY);
 
 			observationRegistry.clear();
@@ -120,7 +120,7 @@ public void addAndSearchTest() {
 			// Remove all documents from the store
 			vectorStore.delete(documents.stream().map(Document::getId).toList());
 
-			assertObservationRegistry(observationRegistry, "vector_store", VectorStoreProvider.OPENSEARCH,
+			assertObservationRegistry(observationRegistry, VectorStoreProvider.OPENSEARCH,
 					VectorStoreObservationContext.Operation.DELETE);
 			observationRegistry.clear();
 

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStore.java
Patch:
@@ -95,6 +95,7 @@
  *
  * @author Mick Semb Wever
  * @author Christian Tzolov
+ * @author Thomas Vitale
  * @see VectorStore
  * @see org.springframework.ai.vectorstore.CassandraVectorStoreConfig
  * @see EmbeddingModel
@@ -381,11 +382,10 @@ private static Float[] toFloatArray(float[] embedding) {
 	@Override
 	public Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.CASSANDRA.value(), operationName)
-			.withDimensions(this.embeddingModel.dimensions())
 			.withCollectionName(this.conf.schema.table())
+			.withDimensions(this.embeddingModel.dimensions())
 			.withNamespace(this.conf.schema.keyspace())
-			.withSimilarityMetric(getSimilarityMetric())
-			.withIndexName(this.conf.schema.index());
+			.withSimilarityMetric(getSimilarityMetric());
 	}
 
 	private static Map<Similarity, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(Similarity.COSINE,

File: vector-stores/spring-ai-elasticsearch-store/src/main/java/org/springframework/ai/vectorstore/ElasticsearchVectorStore.java
Patch:
@@ -68,6 +68,7 @@
  * @author Laura Trotta
  * @author Soby Chacko
  * @author Christian Tzolov
+ * @author Thomas Vitale
  * @since 1.0.0
  */
 public class ElasticsearchVectorStore extends AbstractObservationVectorStore implements InitializingBean {
@@ -252,10 +253,9 @@ public void afterPropertiesSet() {
 	@Override
 	public Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.ELASTICSEARCH.value(), operationName)
+			.withCollectionName(this.options.getIndexName())
 			.withDimensions(this.embeddingModel.dimensions())
-			.withIndexName(this.options.getIndexName())
 			.withSimilarityMetric(getSimilarityMetric());
-
 	}
 
 	private static Map<SimilarityFunction, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/GemFireVectorStore.java
Patch:
@@ -57,6 +57,7 @@
  *
  * @author Geet Rawat
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 public class GemFireVectorStore extends AbstractObservationVectorStore implements InitializingBean {
 
@@ -538,8 +539,8 @@ else if (clientException.getStatusCode().equals(BAD_REQUEST)) {
 	@Override
 	public Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.GEMFIRE.value(), operationName)
+			.withCollectionName(this.indexName)
 			.withDimensions(this.embeddingModel.dimensions())
-			.withIndexName(this.indexName)
 			.withFieldName(EMBEDDINGS);
 	}
 

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -69,6 +69,7 @@
 /**
  * @author Christian Tzolov
  * @author Soby Chacko
+ * @author Thomas Vitale
  */
 public class MilvusVectorStore extends AbstractObservationVectorStore implements InitializingBean {
 
@@ -551,9 +552,8 @@ public org.springframework.ai.vectorstore.observation.VectorStoreObservationCont
 			String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.MILVUS.value(), operationName)
-			.withDimensions(this.embeddingModel.dimensions())
 			.withCollectionName(this.config.collectionName)
-			.withIndexName(this.config.indexType.name())
+			.withDimensions(this.embeddingModel.dimensions())
 			.withSimilarityMetric(getSimilarityMetric())
 			.withNamespace(this.config.databaseName);
 	}

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java
Patch:
@@ -42,6 +42,7 @@
  * @author Gerrit Meier
  * @author Michael Simons
  * @author Christian Tzolov
+ * @author Thomas Vitale
  */
 public class Neo4jVectorStore extends AbstractObservationVectorStore implements InitializingBean {
 
@@ -433,8 +434,8 @@ private Document recordToDocument(org.neo4j.driver.Record neoRecord) {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.NEO4J.value(), operationName)
+			.withCollectionName(this.config.indexName)
 			.withDimensions(this.embeddingModel.dimensions())
-			.withIndexName(this.config.indexName)
 			.withSimilarityMetric(getSimilarityMetric());
 	}
 

File: vector-stores/spring-ai-opensearch-store/src/main/java/org/springframework/ai/vectorstore/OpenSearchVectorStore.java
Patch:
@@ -55,6 +55,7 @@
  * @author Jemin Huh
  * @author Soby Chacko
  * @author Christian Tzolov
+ * @author Thomas Vitale
  * @since 1.0.0
  */
 public class OpenSearchVectorStore extends AbstractObservationVectorStore implements InitializingBean {
@@ -261,9 +262,9 @@ public void afterPropertiesSet() {
 	@Override
 	public Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.OPENSEARCH.value(), operationName)
+			.withCollectionName(this.index)
 			.withDimensions(this.embeddingModel.dimensions())
-			.withSimilarityMetric(getSimilarityFunction())
-			.withIndexName(this.index);
+			.withSimilarityMetric(getSimilarityFunction());
 	}
 
 	private String getSimilarityFunction() {

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorStore.java
Patch:
@@ -56,6 +56,7 @@
  * @author Christian Tzolov
  * @author Josh Long
  * @author Muthukumaran Navaneethakrishnan
+ * @author Thomas Vitale
  */
 public class PgVectorStore extends AbstractObservationVectorStore implements InitializingBean {
 
@@ -570,11 +571,10 @@ public PgVectorStore build() {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.PG_VECTOR.value(), operationName)
-			.withDimensions(this.embeddingDimensions())
 			.withCollectionName(this.vectorTableName)
+			.withDimensions(this.embeddingDimensions())
 			.withNamespace(this.schemaName)
-			.withSimilarityMetric(getSimilarityMetric())
-			.withIndexName(this.createIndexMethod.name());
+			.withSimilarityMetric(getSimilarityMetric());
 	}
 
 	private static Map<PgDistanceType, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(

File: vector-stores/spring-ai-redis-store/src/main/java/org/springframework/ai/vectorstore/RedisVectorStore.java
Patch:
@@ -74,6 +74,7 @@
  * @author Julien Ruaux
  * @author Christian Tzolov
  * @author Eddú Meléndez
+ * @author Thomas Vitale
  * @see VectorStore
  * @see RedisVectorStoreConfig
  * @see EmbeddingModel
@@ -476,10 +477,10 @@ private String jsonPath(String field) {
 	public VectorStoreObservationContext.Builder createObservationContextBuilder(String operationName) {
 
 		return VectorStoreObservationContext.builder(VectorStoreProvider.REDIS.value(), operationName)
+			.withCollectionName(this.config.indexName)
 			.withDimensions(this.embeddingModel.dimensions())
 			.withFieldName(this.config.embeddingFieldName)
-			.withSimilarityMetric(vectorAlgorithm().name())
-			.withIndexName(this.config.indexName);
+			.withSimilarityMetric(vectorAlgorithm().name());
 
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -53,7 +53,6 @@
  */
 @Testcontainers
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
-@Disabled("Disabled due to https://github.com/spring-projects/spring-ai/issues/698")
 class MongoDBAtlasVectorStoreAutoConfigurationIT {
 
 	@Container

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusVectorStoreIT.java
Patch:
@@ -34,6 +34,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.vectorstore.MilvusVectorStore.MilvusVectorStoreConfig;
@@ -265,7 +266,7 @@ public VectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingModel
 				.withIndexType(IndexType.IVF_FLAT)
 				.withMetricType(metricType)
 				.build();
-			return new MilvusVectorStore(milvusClient, embeddingModel, config, true);
+			return new MilvusVectorStore(milvusClient, embeddingModel, config, true, new TokenCountBatchingStrategy());
 		}
 
 		@Bean

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusVectorStoreObservationIT.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingModel;
+import org.springframework.ai.embedding.TokenCountBatchingStrategy;
 import org.springframework.ai.observation.conventions.VectorStoreProvider;
 import org.springframework.ai.openai.OpenAiEmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;
@@ -158,7 +159,8 @@ public VectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingModel
 				.withIndexType(IndexType.IVF_FLAT)
 				.withMetricType(MetricType.COSINE)
 				.build();
-			return new MilvusVectorStore(milvusClient, embeddingModel, config, true, observationRegistry, null);
+			return new MilvusVectorStore(milvusClient, embeddingModel, config, true, new TokenCountBatchingStrategy(),
+					observationRegistry, null);
 		}
 
 		@Bean

File: vector-stores/spring-ai-oracle-store/src/test/java/org/springframework/ai/vectorstore/OracleVectorStoreObservationIT.java
Patch:
@@ -120,9 +120,9 @@ void observationVectorStoreAddAndQueryOperations() {
 						OracleVectorStore.DEFAULT_TABLE_NAME)
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.NAMESPACE.asString(), "none")
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.FIELD_NAME.asString(), "none")
-				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_METRIC.asString(), "none")
+				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_METRIC.asString(), "cosine")
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.TOP_K.asString(), "none")
-				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_THRESHOLD.asString(), "cosine")
+				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_THRESHOLD.asString(), "none")
 
 				.hasBeenStarted()
 				.hasBeenStopped();

File: vector-stores/spring-ai-oracle-store/src/main/java/org/springframework/ai/vectorstore/OracleVectorStore.java
Patch:
@@ -625,7 +625,7 @@ public Builder createObservationContextBuilder(String operationName) {
 		return VectorStoreObservationContext.builder(VectorStoreProvider.ORACLE.value(), operationName)
 			.withDimensions(this.embeddingModel.dimensions())
 			.withCollectionName(this.getTableName())
-			.withFieldName(getSimilarityMetric());
+			.withSimilarityMetric(getSimilarityMetric());
 	}
 
 	private static Map<OracleVectorStoreDistanceType, VectorStoreSimilarityMetric> SIMILARITY_TYPE_MAPPING = Map.of(

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/observation/VectorStoreObservationContext.java
Patch:
@@ -27,7 +27,6 @@
  * @author Christian Tzolov
  * @since 1.0.0
  */
-
 public class VectorStoreObservationContext extends Observation.Context {
 
 	public enum Operation {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class PgVectorStoreAutoConfiguration {
 	@ConditionalOnMissingBean
 	public PgVectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel,
 			PgVectorStoreProperties properties, ObjectProvider<ObservationRegistry> observationRegistry,
-			ObjectProvider<VectorStoreObservationConvention> customSearchObservationConvention) {
+			ObjectProvider<VectorStoreObservationConvention> customObservationConvention) {
 
 		var initializeSchema = properties.isInitializeSchema();
 
@@ -57,7 +57,7 @@ public PgVectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embed
 			.withIndexType(properties.getIndexType())
 			.withInitializeSchema(initializeSchema)
 			.withObservationRegistry(observationRegistry.getIfUnique(() -> ObservationRegistry.NOOP))
-			.withSearchObservationConvention(customSearchObservationConvention.getIfAvailable(() -> null))
+			.withSearchObservationConvention(customObservationConvention.getIfAvailable(() -> null))
 			.build();
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/AwsOpenSearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -47,7 +47,7 @@
 import static org.hamcrest.Matchers.hasSize;
 
 @Testcontainers
-class a {
+class AwsOpenSearchVectorStoreAutoConfigurationIT {
 
 	@Container
 	private static final LocalStackContainer localstack = new LocalStackContainer(

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaContainerConnectionDetailsFactoryTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.autoconfigure.ollama.OllamaAutoConfiguration;
 import org.springframework.ai.embedding.EmbeddingResponse;
@@ -42,6 +43,7 @@
  * @author Eddú Meléndez
  */
 @SpringJUnitConfig
+@Disabled("requires more memory than is often available on dev machines")
 @Testcontainers
 @TestPropertySource(properties = "spring.ai.ollama.embedding.options.model="
 		+ OllamaContainerConnectionDetailsFactoryTest.MODEL_NAME)

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/CassandraRichSchemaVectorStoreIT.java
Patch:
@@ -195,7 +195,7 @@ void addAndSearchPoormansBench() {
 
 		contextRunner.run(context -> {
 
-			try (CassandraVectorStore store = CassandraVectorStore.create(
+			try (CassandraVectorStore store = new CassandraVectorStore(
 					storeBuilder(context, List.of()).withFixedThreadPoolExecutorSize(nThreads).build(),
 					context.getBean(EmbeddingModel.class))) {
 

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/CassandraVectorStoreIT.java
Patch:
@@ -396,7 +396,7 @@ public CassandraVectorStore store(CqlSession cqlSession, EmbeddingModel embeddin
 				.build();
 
 			conf.dropKeyspace();
-			return CassandraVectorStore.create(conf, embeddingModel);
+			return new CassandraVectorStore(conf, embeddingModel);
 		}
 
 		@Bean
@@ -432,7 +432,7 @@ private static CassandraVectorStore createTestStore(ApplicationContext context,
 			CassandraVectorStoreConfig.Builder builder) {
 		CassandraVectorStoreConfig conf = builder.build();
 		conf.dropKeyspace();
-		return CassandraVectorStore.create(conf, context.getBean(EmbeddingModel.class));
+		return new CassandraVectorStore(conf, context.getBean(EmbeddingModel.class));
 	}
 
 }

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/WikiVectorStoreExample.java
Patch:
@@ -119,7 +119,7 @@ public CassandraVectorStore store(CqlSession cqlSession, EmbeddingModel embeddin
 				})
 				.build();
 
-			return CassandraVectorStore.create(conf, embeddingModel());
+			return new CassandraVectorStore(conf, embeddingModel());
 		}
 
 		@Bean

File: vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/MongoDBAtlasVectorStoreIT.java
Patch:
@@ -44,7 +44,7 @@
  * @author Chris Smith
  */
 @Testcontainers
-@Disabled("Disabled due to https://github.com/spring-projects/spring-ai/issues/698")
+// @Disabled("Disabled due to https://github.com/spring-projects/spring-ai/issues/698")
 class MongoDBAtlasVectorStoreIT {
 
 	@Container

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorObservationIT.java
Patch:
@@ -122,6 +122,7 @@ void observationVectorStoreAddAndQueryOperations() {
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.FIELD_NAME.asString(), "none")
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_METRIC.asString(), "cosine")
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.TOP_K.asString(), "none")
+				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_THRESHOLD.asString(), "none")
 
 				.hasBeenStarted()
 				.hasBeenStopped();
@@ -149,6 +150,7 @@ void observationVectorStoreAddAndQueryOperations() {
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.FIELD_NAME.asString(), "none")
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_METRIC.asString(), "cosine")
 				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.TOP_K.asString(), "1")
+				.hasHighCardinalityKeyValue(HighCardinalityKeyNames.SIMILARITY_THRESHOLD.asString(), "0.0")
 
 				.hasBeenStarted()
 				.hasBeenStopped();

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioSpeechOptions.java
Patch:
@@ -60,8 +60,8 @@ public class OpenAiAudioSpeechOptions implements ModelOptions {
 	private AudioResponseFormat responseFormat;
 
 	/**
-	 * The speed of the voice synthesis. The acceptable range is from 0.0 (slowest) to 1.0
-	 * (fastest). Defaults to 1
+	 * The speed of the voice synthesis. The acceptable range is from 0.25 (slowest) to
+	 * 4.0 (fastest). Defaults to 1 (normal)
 	 */
 	@JsonProperty("speed")
 	private Float speed;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiAudioApi.java
Patch:
@@ -171,8 +171,8 @@ public String getValue() {
 	 * chosen model: 'alloy', 'echo', 'fable', 'onyx', 'nova', and 'shimmer'.
 	 * @param responseFormat The format to audio in. Supported formats are mp3, opus, aac,
 	 * and flac. Defaults to mp3.
-	 * @param speed The speed of the voice synthesis. The acceptable range is from 0.0
-	 * (slowest) to 1.0 (fastest).
+	 * @param speed The speed of the voice synthesis. The acceptable range is from 0.25
+	 * (slowest) to 4.0 (fastest).
 	 */
 	@JsonInclude(Include.NON_NULL)
 	public record SpeechRequest(

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/api/AnthropicApi.java
Patch:
@@ -882,7 +882,7 @@ public record PingEvent(// @formatter:off
 	public ResponseEntity<ChatCompletionResponse> chatCompletionEntity(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 
 		return this.restClient.post()
 			.uri("/v1/messages")
@@ -902,7 +902,7 @@ public ResponseEntity<ChatCompletionResponse> chatCompletionEntity(ChatCompletio
 	public Flux<ChatCompletionResponse> chatCompletionStream(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		AtomicBoolean isInsideTool = new AtomicBoolean(false);
 

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApi.java
Patch:
@@ -678,7 +678,7 @@ public record ChunkChoice(
 	public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 
 		return this.restClient.post()
 				.uri("/v1/text/chatcompletion_v2")
@@ -698,7 +698,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 	public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		AtomicBoolean isInsideTool = new AtomicBoolean(false);
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiApi.java
Patch:
@@ -765,7 +765,7 @@ public String getValue() {
 	public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 
 		return this.restClient.post()
 			.uri("/v1/chat/completions")
@@ -785,7 +785,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 	public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		AtomicBoolean isInsideTool = new AtomicBoolean(false);
 

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/api/MoonshotApi.java
Patch:
@@ -572,7 +572,7 @@ public Function(String description, String name, String jsonSchema) {
 	public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 
 		return this.restClient.post()
 			.uri("/v1/chat/completions")
@@ -589,7 +589,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 	 */
 	public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chatRequest) {
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		return this.webClient.post()
 			.uri("/v1/chat/completions")

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java
Patch:
@@ -336,7 +336,7 @@ public GenerateResponse generate(GenerateRequest completionRequest) {
 	@Deprecated(since = "1.0.0-M2", forRemoval = true)
 	public Flux<GenerateResponse> generateStreaming(GenerateRequest completionRequest) {
 		Assert.notNull(completionRequest, REQUEST_BODY_NULL_ERROR);
-		Assert.isTrue(completionRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(completionRequest.stream(), "Request must set the stream property to true.");
 
 		return webClient.post()
 			.uri("/api/generate")
@@ -669,7 +669,7 @@ public ChatResponse chat(ChatRequest chatRequest) {
 	 */
 	public Flux<ChatResponse> streamingChat(ChatRequest chatRequest) {
 		Assert.notNull(chatRequest, REQUEST_BODY_NULL_ERROR);
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		return webClient.post()
 			.uri("/api/chat")

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -974,7 +974,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 			MultiValueMap<String, String> additionalHttpHeader) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 		Assert.notNull(additionalHttpHeader, "The additional HTTP headers can not be null.");
 
 		return this.restClient.post()
@@ -1009,7 +1009,7 @@ public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chat
 			MultiValueMap<String, String> additionalHttpHeader) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		AtomicBoolean isInsideTool = new AtomicBoolean(false);
 

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/api/QianFanApi.java
Patch:
@@ -353,7 +353,7 @@ public record ChatCompletionChunk(
 	public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 
 		return this.restClient.post()
 				.uri("/v1/wenxinworkshop/chat/{model}?access_token={token}",chatRequest.model, getAccessToken())
@@ -370,7 +370,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 	 */
 	public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chatRequest) {
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		return this.webClient.post()
 				.uri("/v1/wenxinworkshop/chat/{model}?access_token={token}",chatRequest.model, getAccessToken())

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/api/ZhiPuAiApi.java
Patch:
@@ -652,7 +652,7 @@ public record ChunkChoice(
 	public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(!chatRequest.stream(), "Request must set the steam property to false.");
+		Assert.isTrue(!chatRequest.stream(), "Request must set the stream property to false.");
 
 		return this.restClient.post()
 				.uri("/v4/chat/completions")
@@ -672,7 +672,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 	public Flux<ChatCompletionChunk> chatCompletionStream(ChatCompletionRequest chatRequest) {
 
 		Assert.notNull(chatRequest, "The request body can not be null.");
-		Assert.isTrue(chatRequest.stream(), "Request must set the steam property to true.");
+		Assert.isTrue(chatRequest.stream(), "Request must set the stream property to true.");
 
 		AtomicBoolean isInsideTool = new AtomicBoolean(false);
 

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/AiOperationType.java
Patch:
@@ -31,6 +31,7 @@ public enum AiOperationType {
 
 	CHAT("chat"),
 	EMBEDDING("embedding"),
+	FRAMEWORK("framework"),
 	IMAGE("image"),
 	TEXT_COMPLETION("text_completion");
 

File: spring-ai-core/src/main/java/org/springframework/ai/observation/conventions/AiProvider.java
Patch:
@@ -33,6 +33,7 @@ public enum AiProvider {
 	MISTRAL_AI("mistral_ai"),
 	OLLAMA("ollama"),
 	OPENAI("openai"),
+	SPRING_AI("spring_ai"),
 	VERTEX_AI("vertex_ai");
 
 	private final String value;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.cohere;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -88,11 +89,13 @@ public void setTruncate(Truncate truncate) {
 	}
 
 	@Override
+	@JsonIgnore
 	public String getModel() {
 		return null;
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.titan;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 
@@ -64,11 +65,13 @@ public void setInputType(InputType inputType) {
 	}
 
 	@Override
+	@JsonIgnore
 	public String getModel() {
 		return null;
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModelIT.java
Patch:
@@ -77,7 +77,7 @@ void testEmojiPenaltyFalse() {
 			.applyToEmojis(false)
 			.build();
 		BedrockAi21Jurassic2ChatOptions options = new BedrockAi21Jurassic2ChatOptions.Builder()
-			.withPresencePenalty(penalty)
+			.withPresencePenaltyOptions(penalty)
 			.build();
 
 		UserMessage userMessage = new UserMessage("Can you express happiness using an emoji like 😄 ?");
@@ -94,7 +94,7 @@ void emojiPenaltyWhenTrueByDefaultApplyPenaltyTest() {
 		// applyToEmojis is by default true
 		BedrockAi21Jurassic2ChatOptions.Penalty penalty = new BedrockAi21Jurassic2ChatOptions.Penalty.Builder().build();
 		BedrockAi21Jurassic2ChatOptions options = new BedrockAi21Jurassic2ChatOptions.Builder()
-			.withPresencePenalty(penalty)
+			.withPresencePenaltyOptions(penalty)
 			.build();
 
 		UserMessage userMessage = new UserMessage("Can you express happiness using an emoji like 😄?");

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/MiniMaxEmbeddingOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.minimax;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -70,6 +71,7 @@ public void setModel(String model) {
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiEmbeddingOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.mistralai;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -60,6 +61,7 @@ public void setEncodingFormat(String encodingFormat) {
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingOptions.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.Map;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -132,11 +133,13 @@ public void setMetadataMode(MetadataMode metadataMode) {
 	}
 
 	@Override
+	@JsonIgnore
 	public String getModel() {
 		return null;
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanEmbeddingOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.qianfan;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -89,6 +90,7 @@ public void setUser(String user) {
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanImageOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.qianfan;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import org.springframework.ai.image.ImageOptions;
@@ -170,6 +171,7 @@ public void setHeight(Integer height) {
 	}
 
 	@Override
+	@JsonIgnore
 	public String getResponseFormat() {
 		return null;
 	}

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiEmbeddingOptions.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.zhipuai;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -70,6 +71,7 @@ public void setModel(String model) {
 	}
 
 	@Override
+	@JsonIgnore
 	public Integer getDimensions() {
 		return null;
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/observation/DefaultEmbeddingModelObservationConvention.java
Patch:
@@ -67,7 +67,7 @@ public KeyValues getLowCardinalityKeyValues(EmbeddingModelObservationContext con
 
 	protected KeyValue aiOperationType(EmbeddingModelObservationContext context) {
 		return KeyValue.of(EmbeddingModelObservationDocumentation.LowCardinalityKeyNames.AI_OPERATION_TYPE,
-				context.getOperationType());
+				context.getOperationMetadata().operationType());
 	}
 
 	protected KeyValue aiProvider(EmbeddingModelObservationContext context) {

File: spring-ai-core/src/main/java/org/springframework/ai/image/observation/DefaultImageModelObservationConvention.java
Patch:
@@ -63,7 +63,7 @@ public KeyValues getLowCardinalityKeyValues(ImageModelObservationContext context
 
 	protected KeyValue aiOperationType(ImageModelObservationContext context) {
 		return KeyValue.of(ImageModelObservationDocumentation.LowCardinalityKeyNames.AI_OPERATION_TYPE,
-				context.getOperationType());
+				context.getOperationMetadata().operationType());
 	}
 
 	protected KeyValue aiProvider(ImageModelObservationContext context) {

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiPaymentTransactionIT.java
Patch:
@@ -53,8 +53,7 @@
  * @author Christian Tzolov
  */
 @SpringBootTest
-@EnabledIfEnvironmentVariable(named = "VERTEX_AI_GEMINI_PROJECT_ID", matches = ".*")
-@EnabledIfEnvironmentVariable(named = "VERTEX_AI_GEMINI_LOCATION", matches = ".*")
+@EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".*")
 public class OpenAiPaymentTransactionIT {
 
 	private final static Logger logger = LoggerFactory.getLogger(OpenAiPaymentTransactionIT.class);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientMultipleFunctionCallsIT.java
Patch:
@@ -27,7 +27,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.ai.chat.client.ChatClient;
-import org.springframework.ai.chat.client.DefaultChatClient;
 import org.springframework.ai.openai.OpenAiTestConfiguration;
 import org.springframework.ai.openai.api.tool.MockWeatherService;
 import org.springframework.ai.openai.testutils.AbstractIT;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingOptions.java
Patch:
@@ -85,6 +85,7 @@ public OpenAiEmbeddingOptions build() {
 
 	}
 
+	@Override
 	public String getModel() {
 		return this.model;
 	}
@@ -101,6 +102,7 @@ public void setEncodingFormat(String encodingFormat) {
 		this.encodingFormat = encodingFormat;
 	}
 
+	@Override
 	public Integer getDimensions() {
 		return this.dimensions;
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/OpenAiEmbeddingModelObservationIT.java
Patch:
@@ -84,7 +84,6 @@ void observationForEmbeddingOperation() {
 					OpenAiApi.EmbeddingModel.TEXT_EMBEDDING_3_SMALL.getValue())
 			.hasLowCardinalityKeyValue(LowCardinalityKeyNames.RESPONSE_MODEL.asString(), responseMetadata.getModel())
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_EMBEDDING_DIMENSIONS.asString(), "1536")
-			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.REQUEST_EMBEDDING_ENCODING_FORMAT.asString(), "float")
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_INPUT_TOKENS.asString(),
 					String.valueOf(responseMetadata.getUsage().getPromptTokens()))
 			.hasHighCardinalityKeyValue(HighCardinalityKeyNames.USAGE_TOTAL_TOKENS.asString(),

File: models/spring-ai-vertex-ai-embedding/src/main/java/org/springframework/ai/vertexai/embedding/multimodal/VertexAiMultimodalEmbeddingOptions.java
Patch:
@@ -168,6 +168,7 @@ public VertexAiMultimodalEmbeddingOptions build() {
 
 	}
 
+	@Override
 	public String getModel() {
 		return this.model;
 	}
@@ -176,6 +177,7 @@ public void setModel(String model) {
 		this.model = model;
 	}
 
+	@Override
 	public Integer getDimensions() {
 		return this.dimensions;
 	}

File: models/spring-ai-vertex-ai-embedding/src/main/java/org/springframework/ai/vertexai/embedding/text/VertexAiTextEmbeddingOptions.java
Patch:
@@ -183,6 +183,7 @@ public VertexAiTextEmbeddingOptions initializeDefaults() {
 		return this;
 	}
 
+	@Override
 	public String getModel() {
 		return this.model;
 	}
@@ -199,6 +200,7 @@ public void setTaskType(TaskType taskType) {
 		this.taskType = taskType;
 	}
 
+	@Override
 	public Integer getDimensions() {
 		return this.dimensions;
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/DocumentEmbeddingRequest.java
Patch:
@@ -25,6 +25,7 @@
  * Represents a request to embed a list of documents.
  *
  * @author Christian Tzolov
+ * @author Thomas Vitale
  * @since 1.0.0
  */
 public class DocumentEmbeddingRequest implements ModelRequest<List<Document>> {
@@ -34,11 +35,11 @@ public class DocumentEmbeddingRequest implements ModelRequest<List<Document>> {
 	private final EmbeddingOptions options;
 
 	public DocumentEmbeddingRequest(Document... inputs) {
-		this(Arrays.asList(inputs), EmbeddingOptions.EMPTY);
+		this(Arrays.asList(inputs), EmbeddingOptionsBuilder.builder().build());
 	}
 
 	public DocumentEmbeddingRequest(List<Document> inputs) {
-		this(inputs, EmbeddingOptions.EMPTY);
+		this(inputs, EmbeddingOptionsBuilder.builder().build());
 	}
 
 	public DocumentEmbeddingRequest(List<Document> inputs, EmbeddingOptions options) {

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingModel.java
Patch:
@@ -53,7 +53,7 @@ default List<Double> embed(String text) {
 	 */
 	default List<List<Double>> embed(List<String> texts) {
 		Assert.notNull(texts, "Texts must not be null");
-		return this.call(new EmbeddingRequest(texts, EmbeddingOptions.EMPTY))
+		return this.call(new EmbeddingRequest(texts, EmbeddingOptionsBuilder.builder().build()))
 			.getResults()
 			.stream()
 			.map(Embedding::getOutput)
@@ -67,7 +67,7 @@ default List<List<Double>> embed(List<String> texts) {
 	 */
 	default EmbeddingResponse embedForResponse(List<String> texts) {
 		Assert.notNull(texts, "Texts must not be null");
-		return this.call(new EmbeddingRequest(texts, EmbeddingOptions.EMPTY));
+		return this.call(new EmbeddingRequest(texts, EmbeddingOptionsBuilder.builder().build()));
 	}
 
 	/**

File: spring-ai-core/src/test/java/org/springframework/ai/embedding/observation/EmbeddingModelMeterObservationHandlerTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.chat.metadata.Usage;
-import org.springframework.ai.embedding.EmbeddingOptions;
+import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.embedding.EmbeddingResponseMetadata;
@@ -89,12 +89,12 @@ private EmbeddingModelObservationContext generateObservationContext() {
 		return EmbeddingModelObservationContext.builder()
 			.embeddingRequest(generateEmbeddingRequest())
 			.operationMetadata(generateOperationMetadata())
-			.requestOptions(EmbeddingModelRequestOptions.builder().model("mistral").build())
+			.requestOptions(EmbeddingOptionsBuilder.builder().withModel("mistral").build())
 			.build();
 	}
 
 	private EmbeddingRequest generateEmbeddingRequest() {
-		return new EmbeddingRequest(List.of(), EmbeddingOptions.EMPTY);
+		return new EmbeddingRequest(List.of(), EmbeddingOptionsBuilder.builder().build());
 	}
 
 	private AiOperationMetadata generateOperationMetadata() {

File: spring-ai-core/src/test/java/org/springframework/ai/embedding/observation/EmbeddingModelObservationContextTests.java
Patch:
@@ -16,7 +16,7 @@
 package org.springframework.ai.embedding.observation;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.embedding.EmbeddingOptions;
+import org.springframework.ai.embedding.EmbeddingOptionsBuilder;
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.observation.AiOperationMetadata;
 import org.springframework.ai.observation.conventions.AiOperationType;
@@ -39,7 +39,7 @@ void whenMandatoryRequestOptionsThenReturn() {
 		var observationContext = EmbeddingModelObservationContext.builder()
 			.embeddingRequest(generateEmbeddingRequest())
 			.operationMetadata(generateOperationMetadata())
-			.requestOptions(EmbeddingModelRequestOptions.builder().model("supermodel").build())
+			.requestOptions(EmbeddingOptionsBuilder.builder().withModel("supermodel").build())
 			.build();
 
 		assertThat(observationContext).isNotNull();
@@ -56,7 +56,7 @@ void whenRequestOptionsIsNullThenThrow() {
 	}
 
 	private EmbeddingRequest generateEmbeddingRequest() {
-		return new EmbeddingRequest(List.of(), EmbeddingOptions.EMPTY);
+		return new EmbeddingRequest(List.of(), EmbeddingOptionsBuilder.builder().build());
 	}
 
 	private AiOperationMetadata generateOperationMetadata() {

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageOptions.java
Patch:
@@ -208,6 +208,7 @@ public void setHeight(Integer height) {
 		this.size = this.width + "x" + this.height;
 	}
 
+	@Override
 	public String getStyle() {
 		return this.style;
 	}

File: spring-ai-core/src/test/java/org/springframework/ai/image/observation/ImageModelObservationContextTests.java
Patch:
@@ -16,6 +16,7 @@
 package org.springframework.ai.image.observation;
 
 import org.junit.jupiter.api.Test;
+import org.springframework.ai.image.ImageOptionsBuilder;
 import org.springframework.ai.image.ImagePrompt;
 import org.springframework.ai.observation.AiOperationMetadata;
 import org.springframework.ai.observation.conventions.AiOperationType;
@@ -36,7 +37,7 @@ void whenMandatoryRequestOptionsThenReturn() {
 		var observationContext = ImageModelObservationContext.builder()
 			.imagePrompt(generateImagePrompt())
 			.operationMetadata(generateOperationMetadata())
-			.requestOptions(ImageModelRequestOptions.builder().model("supersun").build())
+			.requestOptions(ImageOptionsBuilder.builder().withModel("supersun").build())
 			.build();
 
 		assertThat(observationContext).isNotNull();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/observation/ChatObservationAutoConfiguration.java
Patch:
@@ -38,7 +38,7 @@
  * @since 1.0.0
  */
 @AutoConfiguration(
-		afterName = "org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration.class")
+		afterName = { "org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration" })
 @ConditionalOnClass(ChatModel.class)
 @EnableConfigurationProperties({ ChatObservationProperties.class })
 public class ChatObservationAutoConfiguration {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/embedding/observation/EmbeddingObservationAutoConfiguration.java
Patch:
@@ -32,7 +32,7 @@
  * @since 1.0.0
  */
 @AutoConfiguration(
-		afterName = "org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration.class")
+		afterName = "org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration")
 @ConditionalOnClass(EmbeddingModel.class)
 public class EmbeddingObservationAutoConfiguration {
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.ai.openai;
 
-import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiAudioApi;
 import org.springframework.ai.openai.api.OpenAiImageApi;
@@ -78,7 +77,7 @@ public OpenAiImageModel openAiImageModel(OpenAiImageApi imageApi) {
 	}
 
 	@Bean
-	public EmbeddingModel openAiEmbeddingModel(OpenAiApi api) {
+	public OpenAiEmbeddingModel openAiEmbeddingModel(OpenAiApi api) {
 		return new OpenAiEmbeddingModel(api);
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiAudioApi;
 import org.springframework.ai.openai.api.OpenAiImageApi;
+import org.springframework.ai.openai.api.OpenAiApi.ChatModel;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.util.StringUtils;
@@ -52,7 +53,8 @@ private String getApiKey() {
 
 	@Bean
 	public OpenAiChatModel openAiChatModel(OpenAiApi api) {
-		OpenAiChatModel openAiChatModel = new OpenAiChatModel(api);
+		OpenAiChatModel openAiChatModel = new OpenAiChatModel(api,
+				OpenAiChatOptions.builder().withModel(ChatModel.GPT_4_O_MINI).build());
 		return openAiChatModel;
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiPaymentTransactionIT.java
Patch:
@@ -198,7 +198,7 @@ public OpenAiApi chatCompletionApi() {
 		public OpenAiChatModel openAiClient(OpenAiApi openAiApi, FunctionCallbackContext functionCallbackContext) {
 			return new OpenAiChatModel(openAiApi,
 					OpenAiChatOptions.builder()
-						.withModel(ChatModel.GPT_4_TURBO.getName())
+						.withModel(ChatModel.GPT_4_O_MINI.getName())
 						.withTemperature(0.1f)
 						.build(),
 					functionCallbackContext, RetryUtils.DEFAULT_RETRY_TEMPLATE);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -67,9 +67,7 @@ void functionCallTest() {
 
 				logger.info("Response: {}", response);
 
-				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("30.0", "30");
-				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("10.0", "10");
-				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("15", "15.0");
+				assertThat(response.getResult().getOutput().getContent()).containsAnyOf("30", "10", "15");
 
 			});
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationIT.java
Patch:
@@ -72,7 +72,7 @@ public class OllamaChatAutoConfigurationIT {
 		createImage(ollamaContainer, OLLAMA_WITH_MODEL);
 	}
 
-	static String baseUrl;
+	static String baseUrl = "http://localhost:11434";
 
 	@BeforeAll
 	public static void beforeAll() throws IOException, InterruptedException {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackWrapperIT.java
Patch:
@@ -34,6 +34,7 @@
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.ai.openai.OpenAiChatModel;
 import org.springframework.ai.openai.OpenAiChatOptions;
+import org.springframework.ai.openai.api.OpenAiApi.ChatModel;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
@@ -47,7 +48,8 @@ public class FunctionCallbackWrapperIT {
 	private final Logger logger = LoggerFactory.getLogger(FunctionCallbackWrapperIT.class);
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
-		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"))
+		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"),
+				"spring.ai.openai.chat.options.model=" + ChatModel.GPT_4_O_MINI.getName())
 		.withConfiguration(AutoConfigurations.of(OpenAiAutoConfiguration.class))
 		.withUserConfiguration(Config.class);
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,6 +58,7 @@ public AnthropicChatBedrockApi anthropicApi(AwsCredentialsProvider credentialsPr
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	@ConditionalOnBean(AnthropicChatBedrockApi.class)
 	public BedrockAnthropicChatModel anthropicChatModel(AnthropicChatBedrockApi anthropicApi,
 			BedrockAnthropicChatProperties properties) {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,6 +58,7 @@ public Anthropic3ChatBedrockApi anthropic3Api(AwsCredentialsProvider credentials
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	@ConditionalOnBean(Anthropic3ChatBedrockApi.class)
 	public BedrockAnthropic3ChatModel anthropic3ChatModel(Anthropic3ChatBedrockApi anthropicApi,
 			BedrockAnthropic3ChatProperties properties) {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -56,6 +56,7 @@ public CohereChatBedrockApi cohereChatApi(AwsCredentialsProvider credentialsProv
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	@ConditionalOnBean(CohereChatBedrockApi.class)
 	public BedrockCohereChatModel cohereChatModel(CohereChatBedrockApi cohereChatApi,
 			BedrockCohereChatProperties properties) {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -58,6 +58,7 @@ public Ai21Jurassic2ChatBedrockApi ai21Jurassic2ChatBedrockApi(AwsCredentialsPro
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	@ConditionalOnBean(Ai21Jurassic2ChatBedrockApi.class)
 	public BedrockAi21Jurassic2ChatModel jurassic2ChatModel(Ai21Jurassic2ChatBedrockApi ai21Jurassic2ChatBedrockApi,
 			BedrockAi21Jurassic2ChatProperties properties) {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama/BedrockLlamaChatAutoConfiguration.java
Patch:
@@ -58,6 +58,7 @@ public LlamaChatBedrockApi llamaApi(AwsCredentialsProvider credentialsProvider,
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	@ConditionalOnBean(LlamaChatBedrockApi.class)
 	public BedrockLlamaChatModel llamaChatModel(LlamaChatBedrockApi llamaApi, BedrockLlamaChatProperties properties) {
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/ChatClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -162,7 +162,7 @@ interface StreamPromptResponseSpec {
 
 		Flux<ChatResponse> chatResponse();
 
-		public Flux<String> content();
+		Flux<String> content();
 
 	}
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelFunctionCallingIT.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.ai.ollama.api.OllamaApi;
+import org.springframework.ai.ollama.api.OllamaModel;
 import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.ai.ollama.api.tool.MockWeatherService;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -55,10 +56,10 @@ class OllamaChatModelFunctionCallingIT {
 
 	private static final Logger logger = LoggerFactory.getLogger(OllamaChatModelFunctionCallingIT.class);
 
-	private static String MODEL = "mistral";
+	private static final String MODEL = OllamaModel.MISTRAL.getName();
 
 	@Container
-	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.2.8");
+	static OllamaContainer ollamaContainer = new OllamaContainer(OllamaImage.DEFAULT_IMAGE);
 
 	static String baseUrl = "http://localhost:11434";
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelIT.java
Patch:
@@ -63,7 +63,7 @@ class OllamaChatModelIT {
 	private static final Log logger = LogFactory.getLog(OllamaChatModelIT.class);
 
 	@Container
-	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.2.8");
+	static OllamaContainer ollamaContainer = new OllamaContainer(OllamaImage.DEFAULT_IMAGE);
 
 	static String baseUrl = "http://localhost:11434";
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatModelMultimodalIT.java
Patch:
@@ -47,12 +47,12 @@
 @Disabled("For manual smoke testing only.")
 class OllamaChatModelMultimodalIT {
 
-	private static final String MODEL = OllamaModel.MISTRAL.getName();
+	private static final String MODEL = OllamaModel.MOONDREAM.getName();
 
 	private static final Log logger = LogFactory.getLog(OllamaChatModelIT.class);
 
 	@Container
-	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.2.8");
+	static OllamaContainer ollamaContainer = new OllamaContainer(OllamaImage.DEFAULT_IMAGE);
 
 	static String baseUrl = "http://localhost:11434";
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/tool/OllamaApiToolFunctionCallIT.java
Patch:
@@ -29,6 +29,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.ai.model.ModelOptionsUtils;
+import org.springframework.ai.ollama.OllamaImage;
 import org.springframework.ai.ollama.api.OllamaApi;
 import org.springframework.ai.ollama.api.OllamaApi.ChatResponse;
 import org.springframework.ai.ollama.api.OllamaApi.Message;
@@ -53,7 +54,7 @@ public class OllamaApiToolFunctionCallIT {
 	MockWeatherService weatherService = new MockWeatherService();
 
 	@Container
-	static OllamaContainer ollamaContainer = new OllamaContainer("ollama/ollama:0.2.8");
+	static OllamaContainer ollamaContainer = new OllamaContainer(OllamaImage.DEFAULT_IMAGE);
 
 	static String baseUrl = "http://localhost:11434";
 

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/api/tool/AnthropicApiToolIT.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionResponse;
 import org.springframework.ai.anthropic.api.AnthropicApi.ChatCompletionRequest;
 import org.springframework.ai.anthropic.api.AnthropicApi.ContentBlock;
-import org.springframework.ai.anthropic.api.AnthropicApi.ContentBlock.ContentBlockType;
+import org.springframework.ai.anthropic.api.AnthropicApi.ContentBlock.Type;
 import org.springframework.ai.anthropic.api.AnthropicApi.AnthropicMessage;
 import org.springframework.ai.anthropic.api.AnthropicApi.Role;
 import org.springframework.ai.anthropic.api.AnthropicApi.Tool;
@@ -117,7 +117,7 @@ private ResponseEntity<ChatCompletionResponse> doCall(List<AnthropicMessage> mes
 		List<ContentBlock> toolToUseList = response.getBody()
 			.content()
 			.stream()
-			.filter(c -> c.type() == ContentBlock.ContentBlockType.TOOL_USE)
+			.filter(c -> c.type() == ContentBlock.Type.TOOL_USE)
 			.toList();
 
 		if (CollectionUtils.isEmpty(toolToUseList)) {
@@ -146,7 +146,7 @@ private ResponseEntity<ChatCompletionResponse> doCall(List<AnthropicMessage> mes
 
 			logger.info("Function response : " + content);
 
-			toolResults.add(new ContentBlock(ContentBlockType.TOOL_RESULT, id, content));
+			toolResults.add(new ContentBlock(Type.TOOL_RESULT, id, content));
 		}
 
 		// Add function response message to the conversation history

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/AnthropicChatModel.java
Patch:
@@ -208,7 +208,7 @@ private List<Message> handleToolCallRequests(List<Message> previousMessages,
 		}
 
 		AssistantMessage assistantMessage = new AssistantMessage("", Map.of(), toolCalls);
-		ToolResponseMessage toolResponseMessage = this.executeFuncitons(assistantMessage);
+		ToolResponseMessage toolResponseMessage = this.executeFunctions(assistantMessage);
 
 		// History
 		List<Message> toolCallMessageConversation = new ArrayList<>(previousMessages);

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatModel.java
Patch:
@@ -233,7 +233,7 @@ private List<Message> handleToolCallRequests(List<Message> previousMessages, Cha
 		AssistantMessage assistantMessage = new AssistantMessage(nativeAssistantMessage.getContent(), Map.of(),
 				assistantToolCalls);
 
-		ToolResponseMessage toolResponseMessage = this.executeFuncitons(assistantMessage);
+		ToolResponseMessage toolResponseMessage = this.executeFunctions(assistantMessage);
 
 		// History
 		List<Message> messages = new ArrayList<>(previousMessages);

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatModel.java
Patch:
@@ -221,7 +221,7 @@ private List<Message> handleToolCallRequests(List<Message> previousMessages, Cha
 		AssistantMessage assistantMessage = new AssistantMessage(nativeAssistantMessage.content(), Map.of(),
 				assistantToolCalls);
 
-		ToolResponseMessage toolResponseMessage = this.executeFuncitons(assistantMessage);
+		ToolResponseMessage toolResponseMessage = this.executeFunctions(assistantMessage);
 
 		// History
 		List<Message> messages = new ArrayList<>(previousMessages);
@@ -241,7 +241,7 @@ private ChatCompletionMessage extractAssistantMessage(ChatCompletion chatComplet
 		return msg;
 	}
 
-	protected ToolResponseMessage executeFuncitons(AssistantMessage assistantMessage) {
+	protected ToolResponseMessage executeFunctions(AssistantMessage assistantMessage) {
 
 		List<ToolResponseMessage.ToolResponse> toolResponses = new ArrayList<>();
 

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -195,7 +195,7 @@ public List<Message> handleToolCallRequests(List<Message> previousMessages, Gene
 
 		AssistantMessage assistantMessage = new AssistantMessage("", Map.of(), assistantToolCalls);
 
-		ToolResponseMessage toolResponseMessage = this.executeFuncitons(assistantMessage);
+		ToolResponseMessage toolResponseMessage = this.executeFunctions(assistantMessage);
 
 		// History
 		List<Message> toolCallMessageConversation = new ArrayList<>(previousMessages);

File: spring-ai-core/src/main/java/org/springframework/ai/chat/model/AbstractToolCallSupport.java
Patch:
@@ -99,7 +99,7 @@ protected Set<String> handleFunctionCallbackConfigurations(FunctionCallingOption
 
 	protected List<Message> handleToolCalls(Prompt prompt, ChatResponse response) {
 		AssistantMessage assistantMessage = response.getResult().getOutput();
-		ToolResponseMessage toolMessageResponse = this.executeFuncitons(assistantMessage);
+		ToolResponseMessage toolMessageResponse = this.executeFunctions(assistantMessage);
 		return this.buildToolCallConversation(prompt.getInstructions(), assistantMessage, toolMessageResponse);
 	}
 
@@ -147,7 +147,7 @@ protected List<FunctionCallback> resolveFunctionCallbacks(Set<String> functionNa
 		return retrievedFunctionCallbacks;
 	}
 
-	protected ToolResponseMessage executeFuncitons(AssistantMessage assistantMessage) {
+	protected ToolResponseMessage executeFunctions(AssistantMessage assistantMessage) {
 
 		List<ToolResponseMessage.ToolResponse> toolResponses = new ArrayList<>();
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/transformer/MetadataTransformerIT.java
Patch:
@@ -189,7 +189,7 @@ public DefaultContentFormatter defaultContentFormatter() {
 
 		@Bean
 		public ContentFormatTransformer contentFormatTransformer(DefaultContentFormatter defaultContentFormatter) {
-			return new ContentFormatTransformer(defaultContentFormatter, false);
+			return new ContentFormatTransformer(defaultContentFormatter);
 		}
 
 	}

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java
Patch:
@@ -453,7 +453,7 @@ public Message build() {
 	 * @param stream Whether to stream the response.
 	 * @param format The format to return the response in. Currently, the only accepted
 	 * value is "json".
-	 * @param keepAlive The duration to keep the model loaded in ollama while idle. {@link <a href="https://pkg.go.dev/time#ParseDuration">https://pkg.go.dev/time#ParseDuration</a>}
+	 * @param keepAlive The duration to keep the model loaded in ollama while idle.
 	 * @param options Additional model parameters. You can use the {@link OllamaOptions} builder
 	 * to create the options then {@link OllamaOptions#toMap()} to convert the options into a
 	 * map.

File: models/spring-ai-qianfan/src/main/java/org/springframework/ai/qianfan/QianFanChatModel.java
Patch:
@@ -166,14 +166,15 @@ public ChatCompletionRequest createRequest(Prompt prompt, boolean stream) {
 					ChatCompletionMessage.Role.valueOf(m.getMessageType().name())))
 			.toList();
 		var systemMessageList = chatCompletionMessages.stream().filter(msg -> msg.role() == Role.SYSTEM).toList();
+		var userMessageList = chatCompletionMessages.stream().filter(msg -> msg.role() != Role.SYSTEM).toList();
 
 		if (systemMessageList.size() > 1) {
 			throw new IllegalArgumentException("Only one system message is allowed in the prompt");
 		}
 
 		var systemMessage = systemMessageList.isEmpty() ? null : systemMessageList.get(0).content();
 
-		var request = new ChatCompletionRequest(chatCompletionMessages, systemMessage, stream);
+		var request = new ChatCompletionRequest(userMessageList, systemMessage, stream);
 
 		if (this.defaultOptions != null) {
 			request = ModelOptionsUtils.merge(this.defaultOptions, request, ChatCompletionRequest.class);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;
+import org.springframework.boot.autoconfigure.data.redis.RedisProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
@@ -41,16 +42,15 @@ public class RedisVectorStoreAutoConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public RedisVectorStore vectorStore(EmbeddingModel embeddingModel, RedisVectorStoreProperties properties,
-			JedisConnectionFactory jedisConnectionFactory) {
+			RedisProperties redisProperties) {
 
 		var config = RedisVectorStoreConfig.builder()
 			.withIndexName(properties.getIndex())
 			.withPrefix(properties.getPrefix())
 			.build();
 
 		return new RedisVectorStore(config, embeddingModel,
-				new JedisPooled(jedisConnectionFactory.getHostName(), jedisConnectionFactory.getPort()),
-				properties.isInitializeSchema());
+				new JedisPooled(redisProperties.getHost(), redisProperties.getPort()), properties.isInitializeSchema());
 	}
 
 }

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/ChatClient.java
Patch:
@@ -189,6 +189,9 @@ interface ChatClientRequestSpec {
 		<I, O> ChatClientRequestSpec function(String name, String description,
 				java.util.function.Function<I, O> function);
 
+		<I, O> ChatClientRequestSpec function(String name, String description, Class<I> inputType,
+				java.util.function.Function<I, O> function);
+
 		ChatClientRequestSpec functions(String... functionBeanNames);
 
 		ChatClientRequestSpec system(String text);

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatModel.java
Patch:
@@ -89,7 +89,7 @@
  */
 public class AzureOpenAiChatModel extends AbstractToolCallSupport implements ChatModel {
 
-	private static final String DEFAULT_DEPLOYMENT_NAME = "gpt-35-turbo";
+	private static final String DEFAULT_DEPLOYMENT_NAME = "gpt-4o";
 
 	private static final Float DEFAULT_TEMPERATURE = 0.7f;
 

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingOptions.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.springframework.ai.azure.openai;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
-
 import java.util.List;
 
 import org.springframework.ai.embedding.EmbeddingOptions;

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingModelIT.java
Patch:
@@ -22,7 +22,7 @@
 import com.azure.core.credential.AzureKeyCredential;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
-
+import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringBootConfiguration;
@@ -75,7 +75,8 @@ public OpenAIClient openAIClient() {
 
 		@Bean
 		public AzureOpenAiEmbeddingModel azureEmbeddingModel(OpenAIClient openAIClient) {
-			return new AzureOpenAiEmbeddingModel(openAIClient);
+			return new AzureOpenAiEmbeddingModel(openAIClient, MetadataMode.EMBED,
+					AzureOpenAiEmbeddingOptions.builder().withDeploymentName("text-embedding-ada-002").build());
 		}
 
 	}

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatModelMetadataTests.java
Patch:
@@ -240,7 +240,7 @@ private String getJson() {
 								"completion_tokens":68,
 								"total_tokens":126
 							},
-							"prompt_annotations" : [{
+							"prompt_filter_results" : [{
 								"prompt_index" : 0,
 								"content_filter_results" : {
 										"error" : null,

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/TranscriptionRequestTests.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.ai.openai.api.OpenAiAudioApi;
 import org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptResponseFormat;
 import org.springframework.ai.openai.api.OpenAiAudioApi.TranscriptionRequest.GranularityType;
-import org.springframework.ai.openai.audio.transcription.AudioTranscriptionPrompt;
+import org.springframework.ai.audio.transcription.AudioTranscriptionPrompt;
 import org.springframework.core.io.DefaultResourceLoader;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/OpenAiTranscriptionModelIT.java
Patch:
@@ -18,6 +18,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
+import org.springframework.ai.audio.transcription.AudioTranscriptionPrompt;
+import org.springframework.ai.audio.transcription.AudioTranscriptionResponse;
 import org.springframework.ai.openai.OpenAiAudioTranscriptionOptions;
 import org.springframework.ai.openai.OpenAiTestConfiguration;
 import org.springframework.ai.openai.api.OpenAiAudioApi;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/TranscriptionModelTests.java
Patch:
@@ -18,6 +18,9 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
+import org.springframework.ai.audio.transcription.AudioTranscription;
+import org.springframework.ai.audio.transcription.AudioTranscriptionPrompt;
+import org.springframework.ai.audio.transcription.AudioTranscriptionResponse;
 import org.springframework.ai.openai.OpenAiAudioTranscriptionModel;
 import org.springframework.core.io.Resource;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java
Patch:
@@ -55,8 +55,8 @@
 import org.springframework.ai.openai.api.OpenAiImageApi.Data;
 import org.springframework.ai.openai.api.OpenAiImageApi.OpenAiImageRequest;
 import org.springframework.ai.openai.api.OpenAiImageApi.OpenAiImageResponse;
-import org.springframework.ai.openai.audio.transcription.AudioTranscriptionPrompt;
-import org.springframework.ai.openai.audio.transcription.AudioTranscriptionResponse;
+import org.springframework.ai.audio.transcription.AudioTranscriptionPrompt;
+import org.springframework.ai.audio.transcription.AudioTranscriptionResponse;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.ai.retry.TransientAiException;
 import org.springframework.core.io.ClassPathResource;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/gemfire/GemFireVectorStoreAutoConfiguration.java
Patch:
@@ -57,7 +57,7 @@ public GemFireVectorStore gemfireVectorStore(EmbeddingModel embeddingModel, GemF
 			.setVectorSimilarityFunction(properties.getVectorSimilarityFunction())
 			.setFields(properties.getFields())
 			.setSslEnabled(properties.isSslEnabled());
-		return new GemFireVectorStore(config, embeddingModel);
+		return new GemFireVectorStore(config, embeddingModel, properties.isInitializeSchema());
 	}
 
 	private static class PropertiesGemFireConnectionDetails implements GemFireConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/gemfire/GemFireVectorStoreProperties.java
Patch:
@@ -16,14 +16,15 @@
 
 package org.springframework.ai.autoconfigure.vectorstore.gemfire;
 
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.GemFireVectorStoreConfig;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Geet Rawat
  */
 @ConfigurationProperties(GemFireVectorStoreProperties.CONFIG_PREFIX)
-public class GemFireVectorStoreProperties {
+public class GemFireVectorStoreProperties extends CommonVectorStoreProperties {
 
 	/**
 	 * Configuration prefix for Spring AI VectorStore GemFire.

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreAutoConfiguration.java
Patch:
@@ -61,7 +61,8 @@ OpenSearchVectorStore vectorStore(OpenSearchVectorStoreProperties properties, Op
 		var indexName = Optional.ofNullable(properties.getIndexName()).orElse(OpenSearchVectorStore.DEFAULT_INDEX_NAME);
 		var mappingJson = Optional.ofNullable(properties.getMappingJson())
 			.orElse(OpenSearchVectorStore.DEFAULT_MAPPING_EMBEDDING_TYPE_KNN_VECTOR_DIMENSION_1536);
-		return new OpenSearchVectorStore(indexName, openSearchClient, embeddingModel, mappingJson);
+		return new OpenSearchVectorStore(indexName, openSearchClient, embeddingModel, mappingJson,
+				properties.isInitializeSchema());
 	}
 
 	@Configuration(proxyBeanMethods = false)

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreProperties.java
Patch:
@@ -15,12 +15,13 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.opensearch;
 
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 import java.util.List;
 
 @ConfigurationProperties(prefix = OpenSearchVectorStoreProperties.CONFIG_PREFIX)
-public class OpenSearchVectorStoreProperties {
+public class OpenSearchVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.opensearch";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseVectorStoreAutoConfiguration.java
Patch:
@@ -57,7 +57,7 @@ public TypesenseVectorStore vectorStore(Client typesenseClient, EmbeddingModel e
 			.withEmbeddingDimension(properties.getEmbeddingDimension())
 			.build();
 
-		return new TypesenseVectorStore(typesenseClient, embeddingModel, config);
+		return new TypesenseVectorStore(typesenseClient, embeddingModel, config, properties.isInitializeSchema());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -32,6 +32,7 @@
 /**
  * @author Christian Tzolov
  * @author Eddú Meléndez
+ * @author Soby Chacko
  */
 @AutoConfiguration
 @ConditionalOnClass({ EmbeddingModel.class, WeaviateVectorStore.class })
@@ -72,8 +73,7 @@ public WeaviateVectorStore vectorStore(EmbeddingModel embeddingModel, WeaviateCl
 				.toList())
 			.withConsistencyLevel(properties.getConsistencyLevel());
 
-		return new WeaviateVectorStore(configBuilder.build(), embeddingModel, weaviateClient,
-				properties.isInitializeSchema());
+		return new WeaviateVectorStore(configBuilder.build(), embeddingModel, weaviateClient);
 	}
 
 	static class PropertiesWeaviateConnectionDetails implements WeaviateConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreProperties.java
Patch:
@@ -27,7 +27,7 @@
  * @author Christian Tzolov
  */
 @ConfigurationProperties(WeaviateVectorStoreProperties.CONFIG_PREFIX)
-public class WeaviateVectorStoreProperties extends CommonVectorStoreProperties {
+public class WeaviateVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.weaviate";
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfigurationIT.java
Patch:
@@ -59,6 +59,7 @@ class CassandraVectorStoreAutoConfigurationIT {
 		.withConfiguration(
 				AutoConfigurations.of(CassandraVectorStoreAutoConfiguration.class, CassandraAutoConfiguration.class))
 		.withUserConfiguration(Config.class)
+		.withPropertyValues("spring.ai.vectorstore.cassandra.initialize-schema=true")
 		.withPropertyValues("spring.ai.vectorstore.cassandra.keyspace=test_autoconfigure")
 		.withPropertyValues("spring.ai.vectorstore.cassandra.contentColumnName=doc_chunk");
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStorePropertiesTests.java
Patch:
@@ -35,7 +35,7 @@ void defaultValues() {
 		assertThat(props.getContentColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_CONTENT_COLUMN_NAME);
 		assertThat(props.getEmbeddingColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_EMBEDDING_COLUMN_NAME);
 		assertThat(props.getIndexName()).isNull();
-		assertThat(props.getDisallowSchemaCreation()).isFalse();
+		assertThat(props.getDisallowSchemaCreation()).isTrue();
 		assertThat(props.getFixedThreadPoolExecutorSize())
 			.isEqualTo(CassandraVectorStoreConfig.DEFAULT_ADD_CONCURRENCY);
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -38,6 +38,7 @@
 /**
  * @author Christian Tzolov
  * @author Eddú Meléndez
+ * @author Soby Chacko
  */
 @Testcontainers
 public class ChromaVectorStoreAutoConfigurationIT {
@@ -50,6 +51,7 @@ public class ChromaVectorStoreAutoConfigurationIT {
 		.withUserConfiguration(Config.class)
 		.withPropertyValues("spring.ai.vectorstore.chroma.client.host=http://" + chroma.getHost(),
 				"spring.ai.vectorstore.chroma.client.port=" + chroma.getMappedPort(8000),
+				"spring.ai.vectorstore.chroma.initializeSchema=true",
 				"spring.ai.vectorstore.chroma.collectionName=TestCollection");
 
 	@Test

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -60,6 +60,7 @@ class ElasticsearchVectorStoreAutoConfigurationIT {
 				ElasticsearchVectorStoreAutoConfiguration.class, RestClientAutoConfiguration.class,
 				SpringAiRetryAutoConfiguration.class, OpenAiAutoConfiguration.class))
 		.withPropertyValues("spring.elasticsearch.uris=" + elasticsearchContainer.getHttpHostAddress(),
+				"spring.ai.vectorstore.elasticsearch.initializeSchema=true",
 				"spring.ai.openai.api-key=" + System.getenv("OPENAI_API_KEY"));
 
 	// No parametrized test based on similarity function,

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/gemfire/GemFireVectorStoreAutoConfigurationIT.java
Patch:
@@ -92,7 +92,8 @@ public static void stopGemFireCluster() {
 		.withPropertyValues("spring.ai.vectorstore.gemfire.buckets=" + BUCKET_COUNT)
 		.withPropertyValues("spring.ai.vectorstore.gemfire.fields=someField1,someField2")
 		.withPropertyValues("spring.ai.vectorstore.gemfire.host=localhost")
-		.withPropertyValues("spring.ai.vectorstore.gemfire.port=" + HTTP_SERVICE_PORT);
+		.withPropertyValues("spring.ai.vectorstore.gemfire.port=" + HTTP_SERVICE_PORT)
+		.withPropertyValues("spring.ai.vectorstore.gemfire.initialize-schema=true");
 
 	@BeforeAll
 	public static void startGemFireCluster() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,6 +39,7 @@
 /**
  * @author Christian Tzolov
  * @author Eddú Meléndez
+ * @author Soby Chacko
  */
 @Testcontainers
 public class MilvusVectorStoreAutoConfigurationIT {
@@ -62,7 +63,7 @@ public void addAndSearch() {
 					"spring.ai.vectorstore.milvus.indexType=IVF_FLAT",
 					"spring.ai.vectorstore.milvus.embeddingDimension=384",
 					"spring.ai.vectorstore.milvus.collectionName=myTestCollection",
-
+					"spring.ai.vectorstore.milvus.initializeSchema=true",
 					"spring.ai.vectorstore.milvus.client.host=" + milvus.getHost(),
 					"spring.ai.vectorstore.milvus.client.port=" + milvus.getMappedPort(19530))
 			.run(context -> {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfigurationIT.java
Patch:
@@ -65,6 +65,7 @@ class MongoDBAtlasVectorStoreAutoConfigurationIT {
 				MongoDBAtlasVectorStoreAutoConfiguration.class, RestClientAutoConfiguration.class,
 				SpringAiRetryAutoConfiguration.class, OpenAiAutoConfiguration.class))
 		.withPropertyValues("spring.data.mongodb.database=springaisample",
+				"spring.ai.vectorstore.mongodb.initialize-schema=true",
 				"spring.ai.vectorstore.mongodb.collection-name=test_collection",
 				// "spring.ai.vectorstore.mongodb.path-name=testembedding",
 				"spring.ai.vectorstore.mongodb.index-name=text_index",

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,6 +40,7 @@
 
 /**
  * @author Jingzhou Ou
+ * @author Soby Chacko
  */
 @Testcontainers
 public class Neo4jVectorStoreAutoConfigurationIT {
@@ -59,7 +60,7 @@ public class Neo4jVectorStoreAutoConfigurationIT {
 		.withConfiguration(AutoConfigurations.of(Neo4jAutoConfiguration.class, Neo4jVectorStoreAutoConfiguration.class))
 		.withUserConfiguration(Config.class)
 		.withPropertyValues("spring.neo4j.uri=" + neo4jContainer.getBoltUrl(),
-				"spring.neo4j.authentication.username=" + "neo4j",
+				"spring.ai.vectorstore.neo4j.initialize-schema=true", "spring.neo4j.authentication.username=" + "neo4j",
 				"spring.neo4j.authentication.password=" + neo4jContainer.getAdminPassword());
 
 	@Test

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/AwsOpenSearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -47,7 +47,7 @@
 import static org.hamcrest.Matchers.hasSize;
 
 @Testcontainers
-class AwsOpenSearchVectorStoreAutoConfigurationIT {
+class a {
 
 	@Container
 	private static final LocalStackContainer localstack = new LocalStackContainer(
@@ -65,6 +65,7 @@ class AwsOpenSearchVectorStoreAutoConfigurationIT {
 		.withConfiguration(AutoConfigurations.of(OpenSearchVectorStoreAutoConfiguration.class,
 				SpringAiRetryAutoConfiguration.class))
 		.withUserConfiguration(Config.class)
+		.withPropertyValues("spring.ai.vectorstore.opensearch.initialize-schema=true")
 		.withPropertyValues(
 				OpenSearchVectorStoreProperties.CONFIG_PREFIX + ".aws.host="
 						+ String.format("testcontainers-domain.%s.opensearch.localhost.localstack.cloud:%s",

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -63,7 +63,7 @@ class OpenSearchVectorStoreAutoConfigurationIT {
 				SpringAiRetryAutoConfiguration.class))
 		.withClassLoader(new FilteredClassLoader(Region.class, ApacheHttpClient.class))
 		.withUserConfiguration(Config.class)
-		.withPropertyValues(
+		.withPropertyValues("spring.ai.vectorstore.opensearch.initialize-schema=true",
 				OpenSearchVectorStoreProperties.CONFIG_PREFIX + ".uris=" + opensearchContainer.getHttpHostAddress(),
 				OpenSearchVectorStoreProperties.CONFIG_PREFIX + ".indexName=" + DOCUMENT_INDEX,
 				OpenSearchVectorStoreProperties.CONFIG_PREFIX + ".mappingJson=" + """

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/oracle/OracleVectorStoreAutoConfigurationIT.java
Patch:
@@ -63,6 +63,7 @@ public class OracleVectorStoreAutoConfigurationIT {
 				JdbcTemplateAutoConfiguration.class, DataSourceAutoConfiguration.class))
 		.withUserConfiguration(Config.class)
 		.withPropertyValues("test.spring.ai.vectorstore.oracle.distanceType=COSINE",
+				"spring.ai.vectorstore.oracle.initialize-schema=true",
 				"test.spring.ai.vectorstore.oracle.dimensions=384",
 				// JdbcTemplate configuration
 				String.format("spring.datasource.url=%s", oracle23aiContainer.getJdbcUrl()),

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@
 /**
  * @author Christian Tzolov
  * @author Muthukumaran Navaneethakrishnan
+ * @author Soby Chacko
  */
 @Testcontainers
 public class PgVectorStoreAutoConfigurationIT {
@@ -75,6 +76,7 @@ public static String getText(String uri) {
 		.withUserConfiguration(Config.class)
 		.withPropertyValues("spring.ai.vectorstore.pgvector.distanceType=COSINE_DISTANCE",
 				"spring.ai.vectorstore.pgvector.initialize-schema=true",
+				// JdbcTemplate configuration
 				String.format("spring.datasource.url=jdbc:postgresql://%s:%d/%s", postgresContainer.getHost(),
 						postgresContainer.getMappedPort(5432), postgresContainer.getDatabaseName()),
 				"spring.datasource.username=" + postgresContainer.getUsername(),

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfigurationIT.java
Patch:
@@ -42,6 +42,7 @@
 
 /**
  * @author Christian Tzolov
+ * @author Soby Chacko
  */
 @EnabledIfEnvironmentVariable(named = "PINECONE_API_KEY", matches = ".+")
 public class PineconeVectorStoreAutoConfigurationIT {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,6 +41,7 @@
 /**
  * @author Christian Tzolov
  * @author Eddú Meléndez
+ * @author Soby Chacko
  * @since 0.8.1
  */
 @Testcontainers
@@ -58,6 +59,7 @@ public class QdrantVectorStoreAutoConfigurationIT {
 		.withConfiguration(AutoConfigurations.of(QdrantVectorStoreAutoConfiguration.class))
 		.withUserConfiguration(Config.class)
 		.withPropertyValues("spring.ai.vectorstore.qdrant.port=" + qdrantContainer.getGrpcPort(),
+				"spring.ai.vectorstore.qdrant.initialize-schema=true",
 				"spring.ai.vectorstore.qdrant.host=" + qdrantContainer.getHost());
 
 	@Test

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreCloudAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@
  * Test using a free tier Qdrant Cloud instance: https://cloud.qdrant.io
  *
  * @author Christian Tzolov
+ * @author Soby Chacko
  * @since 0.8.1
  */
 // NOTE: The free Qdrant Cluster and the QDRANT_API_KEY expire after 4 weeks of
@@ -98,7 +99,7 @@ static void setup() throws InterruptedException, ExecutionException {
 				"spring.ai.vectorstore.qdrant.host=" + CLOUD_HOST,
 				"spring.ai.vectorstore.qdrant.api-key=" + CLOUD_API_KEY,
 				"spring.ai.vectorstore.qdrant.collection-name=" + COLLECTION_NAME,
-				"spring.ai.vectorstore.qdrant.use-tls=true");
+				"spring.ai.vectorstore.qdrant.initializeSchema=true", "spring.ai.vectorstore.qdrant.use-tls=true");
 
 	@Test
 	public void addAndSearch() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseVectorStoreAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -39,6 +39,7 @@
 /**
  * @author Pablo Sanchidrian Herrera
  * @author Eddú Meléndez
+ * @author Soby Chacko
  */
 @Testcontainers
 public class TypesenseVectorStoreAutoConfigurationIT {
@@ -63,6 +64,7 @@ public void addAndSearch() {
 		contextRunner
 			.withPropertyValues("spring.ai.vectorstore.typesense.embeddingDimension=384",
 					"spring.ai.vectorstore.typesense.collectionName=myTestCollection",
+					"spring.ai.vectorstore.typesense.initialize-schema=true",
 					"spring.ai.vectorstore.typesense.client.apiKey=xyz",
 					"spring.ai.vectorstore.typesense.client.protocol=http",
 					"spring.ai.vectorstore.typesense.client.host=" + typesenseContainer.getHost(),

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaContainerConnectionDetailsFactoryTest.java
Patch:
@@ -40,7 +40,8 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = "spring.ai.vectorstore.chroma.store.collectionName=TestCollection")
+@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.store.collectionName=TestCollection",
+		"spring.ai.vectorstore.chroma.initialize-schema=true" })
 class ChromaContainerConnectionDetailsFactoryTest {
 
 	@Container

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaWithToken2ContainerConnectionDetailsFactoryTest.java
Patch:
@@ -40,7 +40,8 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = "spring.ai.vectorstore.chroma.store.collectionName=TestCollection")
+@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.store.collectionName=TestCollection",
+		"spring.ai.vectorstore.chroma.initialize-schema=true" })
 class ChromaWithToken2ContainerConnectionDetailsFactoryTest {
 
 	@Container

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/chroma/ChromaWithTokenContainerConnectionDetailsFactoryTest.java
Patch:
@@ -40,7 +40,8 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = "spring.ai.vectorstore.chroma.store.collectionName=TestCollection")
+@TestPropertySource(properties = { "spring.ai.vectorstore.chroma.store.collectionName=TestCollection",
+		"spring.ai.vectorstore.chroma.initialize-schema=true" })
 class ChromaWithTokenContainerConnectionDetailsFactoryTest {
 
 	@Container

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/milvus/MilvusContainerConnectionDetailsFactoryTest.java
Patch:
@@ -45,7 +45,8 @@
 @Testcontainers
 @TestPropertySource(properties = { "spring.ai.vectorstore.milvus.metricType=COSINE",
 		"spring.ai.vectorstore.milvus.indexType=IVF_FLAT", "spring.ai.vectorstore.milvus.embeddingDimension=384",
-		"spring.ai.vectorstore.milvus.collectionName=myTestCollection" })
+		"spring.ai.vectorstore.milvus.collectionName=myTestCollection",
+		"spring.ai.vectorstore.milvus.initialize-schema=true" })
 class MilvusContainerConnectionDetailsFactoryTest {
 
 	@Container

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/opensearch/OpenSearchContainerConnectionDetailsFactoryTest.java
Patch:
@@ -44,6 +44,7 @@
 
 @SpringBootTest(properties = {
 		"spring.ai.vectorstore.opensearch.index-name=" + OpenSearchContainerConnectionDetailsFactoryTest.DOCUMENT_INDEX,
+		"spring.ai.vectorstore.opensearch.initialize-schema=true",
 		"spring.ai.vectorstore.opensearch.mapping-json="
 				+ OpenSearchContainerConnectionDetailsFactoryTest.MAPPING_JSON })
 @Testcontainers

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/qdrant/QdrantContainerConnectionDetailsFactoryTest.java
Patch:
@@ -43,7 +43,8 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = "spring.ai.vectorstore.qdrant.collectionName=test_collection")
+@TestPropertySource(properties = { "spring.ai.vectorstore.qdrant.collectionName=test_collection",
+		"spring.ai.vectorstore.qdrant.initialize-schema=true" })
 public class QdrantContainerConnectionDetailsFactoryTest {
 
 	@Container

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/qdrant/QdrantContainerWithApiKeyConnectionDetailsFactoryTest.java
Patch:
@@ -43,7 +43,8 @@
 
 @SpringJUnitConfig
 @Testcontainers
-@TestPropertySource(properties = "spring.ai.vectorstore.qdrant.collectionName=test_collection")
+@TestPropertySource(properties = { "spring.ai.vectorstore.qdrant.collectionName=test_collection",
+		"spring.ai.vectorstore.qdrant.initialize-schema=true" })
 public class QdrantContainerWithApiKeyConnectionDetailsFactoryTest {
 
 	@Container

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/typesense/TypesenseContainerConnectionDetailsFactoryTest.java
Patch:
@@ -29,6 +29,7 @@
 
 @SpringJUnitConfig
 @TestPropertySource(properties = { "spring.ai.vectorstore.typesense.embeddingDimension=384",
+		"spring.ai.vectorstore.typesense.initialize-schema=true",
 		"spring.ai.vectorstore.typesense.collectionName=myTestCollection" })
 @Testcontainers
 class TypesenseContainerConnectionDetailsFactoryTest {

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/weaviate/WeaviateContainerConnectionDetailsFactoryTest.java
Patch:
@@ -46,7 +46,8 @@
 @TestPropertySource(properties = { "spring.ai.vectorstore.weaviate.filter-field.country=TEXT",
 		"spring.ai.vectorstore.weaviate.filter-field.year=NUMBER",
 		"spring.ai.vectorstore.weaviate.filter-field.active=BOOLEAN",
-		"spring.ai.vectorstore.weaviate.filter-field.price=NUMBER" })
+		"spring.ai.vectorstore.weaviate.filter-field.price=NUMBER",
+		"spring.ai.vectorstore.weaviate.initialize-schema=true" })
 class WeaviateContainerConnectionDetailsFactoryTest {
 
 	@Container

File: vector-stores/spring-ai-gemfire-store/src/test/java/org/springframework/ai/vectorstore/GemFireVectorStoreIT.java
Patch:
@@ -216,7 +216,7 @@ public GemFireVectorStoreConfig gemfireVectorStoreConfig() {
 
 		@Bean
 		public GemFireVectorStore vectorStore(GemFireVectorStoreConfig config, EmbeddingModel embeddingModel) {
-			return new GemFireVectorStore(config, embeddingModel);
+			return new GemFireVectorStore(config, embeddingModel, true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-pinecone-store/src/main/java/org/springframework/ai/vectorstore/PineconeVectorStore.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.vectorstore;
 
 import java.time.Duration;

File: vector-stores/spring-ai-weaviate-store/src/test/java/org/springframework/ai/vectorstore/WeaviateVectorStoreIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@
 /**
  * @author Christian Tzolov
  * @author Eddú Meléndez
+ * @author Soby Chacko
  */
 @Testcontainers
 public class WeaviateVectorStoreIT {
@@ -256,7 +257,7 @@ public VectorStore vectorStore(EmbeddingModel embeddingModel) {
 				.withConsistencyLevel(WeaviateVectorStoreConfig.ConsistentLevel.ONE)
 				.build();
 
-			return new WeaviateVectorStore(config, embeddingModel, weaviateClient, true);
+			return new WeaviateVectorStore(config, embeddingModel, weaviateClient);
 
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/DefaultChatClient.java
Patch:
@@ -533,7 +533,7 @@ public DefaultChatClientRequestSpec(ChatModel chatModel, String userText, Map<St
 				List<RequestResponseAdvisor> advisors, Map<String, Object> advisorParams) {
 
 			this.chatModel = chatModel;
-			this.chatOptions = chatOptions != null ? chatOptions : chatModel.getDefaultOptions();
+			this.chatOptions = chatOptions != null ? chatOptions.copy() : chatModel.getDefaultOptions().copy();
 
 			this.userText = userText;
 			this.userParams.putAll(userParams);

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatOptions.java
Patch:
@@ -28,4 +28,6 @@ public interface ChatOptions extends ModelOptions {
 
 	Integer getTopK();
 
+	ChatOptions copy();
+
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/retry/SpringAiRetryAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public class SpringAiRetryAutoConfiguration {
 	public RetryTemplate retryTemplate(SpringAiRetryProperties properties) {
 		return RetryTemplate.builder()
 			.maxAttempts(properties.getMaxAttempts())
-			.retryOn(NonTransientAiException.class)
+			.retryOn(TransientAiException.class)
 			.exponentialBackoff(properties.getBackoff().getInitialInterval(), properties.getBackoff().getMultiplier(),
 					properties.getBackoff().getMaxInterval())
 			.withListener(new RetryListener() {

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiImageResponseMetadata.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.azure.ai.openai.models.ImageGenerations;
 import org.springframework.ai.image.ImageResponseMetadata;
+import org.springframework.ai.model.MutableResponseMetadata;
 import org.springframework.util.Assert;
 
 import java.util.HashMap;
@@ -15,7 +16,7 @@
  * @author Benoit Moussaud
  * @since 1.0.0 M1
  */
-public class AzureOpenAiImageResponseMetadata extends HashMap<String, Object> implements ImageResponseMetadata {
+public class AzureOpenAiImageResponseMetadata extends ImageResponseMetadata {
 
 	private final Long created;
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/ImageResponseMetadata.java
Patch:
@@ -1,5 +1,5 @@
 package org.springframework.ai.openai;
 
-public class ImageResponseMetadata {
+public interface ImageResponseMetadata {
 
 }

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/audio/OpenAiAudioSpeechResponseMetadata.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.ai.chat.metadata.EmptyRateLimit;
 import org.springframework.ai.chat.metadata.RateLimit;
+import org.springframework.ai.model.MutableResponseMetadata;
 import org.springframework.ai.model.ResponseMetadata;
 import org.springframework.ai.openai.api.OpenAiAudioApi;
 import org.springframework.lang.Nullable;
@@ -31,7 +32,7 @@
  * @author Ahmed Yousri
  * @see RateLimit
  */
-public class OpenAiAudioSpeechResponseMetadata extends HashMap<String, Object> implements ResponseMetadata {
+public class OpenAiAudioSpeechResponseMetadata extends MutableResponseMetadata {
 
 	protected static final String AI_METADATA_STRING = "{ @type: %1$s, requestsLimit: %2$s }";
 

File: models/spring-ai-stability-ai/src/main/java/org/springframework/ai/stabilityai/StabilityAiImageModel.java
Patch:
@@ -119,7 +119,7 @@ private ImageResponse convertResponse(StabilityAiApi.GenerateImageResponse gener
 					new StabilityAiImageGenerationMetadata(entry.finishReason(), entry.seed()));
 		}).toList();
 
-		return new ImageResponse(imageGenerationList, ImageResponseMetadata.NULL);
+		return new ImageResponse(imageGenerationList, new ImageResponseMetadata());
 	}
 
 	private StabilityAiImageOptions convertOptions(ImageOptions runtimeOptions) {

File: models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/TransformersEmbeddingModelTests.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.ai.embedding.EmbeddingResponse;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * @author Christian Tzolov
@@ -76,7 +77,7 @@ void embedForResponse() throws Exception {
 		embeddingModel.afterPropertiesSet();
 		EmbeddingResponse embed = embeddingModel.embedForResponse(List.of("Hello world", "World is big"));
 		assertThat(embed.getResults()).hasSize(2);
-		assertThat(embed.getMetadata()).isEmpty();
+		assertTrue(embed.getMetadata().isEmpty(), "Expected embed metadata to be empty, but it was not.");
 
 		assertThat(embed.getResults().get(0).getOutput()).hasSize(384);
 		assertThat(DF.format(embed.getResults().get(0).getOutput().get(0))).isEqualTo(DF.format(-0.19744634628295898));

File: spring-ai-core/src/main/java/org/springframework/ai/image/ImageResponse.java
Patch:
@@ -43,7 +43,7 @@ public class ImageResponse implements ModelResponse<ImageGeneration> {
 	 * provider.
 	 */
 	public ImageResponse(List<ImageGeneration> generations) {
-		this(generations, ImageResponseMetadata.NULL);
+		this(generations, new ImageResponseMetadata());
 	}
 
 	/**

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/embedding/VertexAiTextEmbeddingModelAutoConfigurationIT.java
Patch:
@@ -112,8 +112,8 @@ public void multimodalEmbedding() {
 				.isEqualTo(EmbeddingResultMetadata.ModalityType.TEXT);
 			assertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1408);
 
-			assertThat(embeddingResponse.getMetadata()).containsEntry("model", "multimodalembedding@001");
-			assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 0);
+			assertThat(embeddingResponse.getMetadata().getModel()).isEqualTo("multimodalembedding@001");
+			assertThat(embeddingResponse.getMetadata().getUsage()).isEqualTo(0);
 
 			assertThat(multiModelEmbeddingModel.dimensions()).isEqualTo(1408);
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/memory/ChatMemory.java
Patch:
@@ -26,7 +26,7 @@
  * conversation, and clear the conversation history.
  *
  * @author Christian Tzolov
- * @since 1.0.0 M1
+ * @since 1.0.0
  */
 public interface ChatMemory {
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/CommonVectorStoreProperties.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.autoconfigure;
+package org.springframework.ai.autoconfigure.vectorstore;
 
 /**
  * @author Josh Long

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.azure;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.azure.AzureVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfiguration.java
Patch:
@@ -54,14 +54,14 @@ public CassandraVectorStore vectorStore(EmbeddingModel embeddingModel, Cassandra
 			.withIndexName(properties.getIndexName())
 			.withFixedThreadPoolExecutorSize(properties.getFixedThreadPoolExecutorSize());
 
-		if (properties.getDisallowSchemaCreation()) {
+		if (!properties.isInitializeSchema()) {
 			builder = builder.disallowSchemaChanges();
 		}
 		if (properties.getReturnEmbeddings()) {
 			builder = builder.returnEmbeddings();
 		}
 
-		return new CassandraVectorStore(builder.build(), embeddingModel);
+		return CassandraVectorStore.create(builder.build(), embeddingModel);
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.chroma;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.elasticsearch;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.SimilarityFunction;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.milvus;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.MilvusVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.util.Assert;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.mongo;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.neo4j;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.Neo4jVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/oracle/OracleVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.oracle;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.OracleVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.pgvector;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.PgVectorStore;
 import org.springframework.ai.vectorstore.PgVectorStore.PgDistanceType;
 import org.springframework.ai.vectorstore.PgVectorStore.PgIndexType;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.qdrant;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.redis;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreProperties.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Map;
 
-import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
+import org.springframework.ai.autoconfigure.vectorstore.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.ConsistentLevel;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;

File: vector-stores/spring-ai-cassandra-store/src/main/java/org/springframework/ai/vectorstore/CassandraFilterExpressionConverter.java
Patch:
@@ -19,6 +19,7 @@
 import com.datastax.oss.driver.api.core.type.DataTypes;
 import com.datastax.oss.driver.api.core.type.codec.registry.CodecRegistry;
 import com.datastax.oss.driver.shaded.guava.common.base.Preconditions;
+
 import org.springframework.ai.vectorstore.filter.Filter;
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;
 import org.springframework.ai.vectorstore.filter.Filter.Key;

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/CassandraRichSchemaVectorStoreIT.java
Patch:
@@ -195,7 +195,7 @@ void addAndSearchPoormansBench() {
 
 		contextRunner.run(context -> {
 
-			try (CassandraVectorStore store = new CassandraVectorStore(
+			try (CassandraVectorStore store = CassandraVectorStore.create(
 					storeBuilder(context, List.of()).withFixedThreadPoolExecutorSize(nThreads).build(),
 					context.getBean(EmbeddingModel.class))) {
 

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/CassandraVectorStoreIT.java
Patch:
@@ -396,7 +396,7 @@ public CassandraVectorStore store(CqlSession cqlSession, EmbeddingModel embeddin
 				.build();
 
 			conf.dropKeyspace();
-			return new CassandraVectorStore(conf, embeddingModel);
+			return CassandraVectorStore.create(conf, embeddingModel);
 		}
 
 		@Bean
@@ -432,7 +432,7 @@ private static CassandraVectorStore createTestStore(ApplicationContext context,
 			CassandraVectorStoreConfig.Builder builder) {
 		CassandraVectorStoreConfig conf = builder.build();
 		conf.dropKeyspace();
-		return new CassandraVectorStore(conf, context.getBean(EmbeddingModel.class));
+		return CassandraVectorStore.create(conf, context.getBean(EmbeddingModel.class));
 	}
 
 }

File: vector-stores/spring-ai-cassandra-store/src/test/java/org/springframework/ai/vectorstore/WikiVectorStoreExample.java
Patch:
@@ -119,7 +119,7 @@ public CassandraVectorStore store(CqlSession cqlSession, EmbeddingModel embeddin
 				})
 				.build();
 
-			return new CassandraVectorStore(conf, embeddingModel());
+			return CassandraVectorStore.create(conf, embeddingModel());
 		}
 
 		@Bean

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicTestConfiguration.java
Patch:
@@ -38,7 +38,7 @@ private String getApiKey() {
 	}
 
 	@Bean
-	public AnthropicChatModel openAiChatModel(AnthropicApi api) {
+	public AnthropicChatModel anthropicChatModel(AnthropicApi api) {
 		AnthropicChatModel anthropicChatModel = new AnthropicChatModel(api);
 		return anthropicChatModel;
 	}

File: document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/config/PdfDocumentReaderConfig.java
Patch:
@@ -86,7 +86,7 @@ private Builder() {
 		 */
 		public PdfDocumentReaderConfig.Builder withPageExtractedTextFormatter(
 				ExtractedTextFormatter pageExtractedTextFormatter) {
-			Assert.notNull(pagesPerDocument >= 0, "PageExtractedTextFormatter must not be null.");
+			Assert.notNull(pageExtractedTextFormatter, "PageExtractedTextFormatter must not be null.");
 			this.pageExtractedTextFormatter = pageExtractedTextFormatter;
 			return this;
 		}

File: spring-ai-core/src/test/java/org/springframework/ai/chat/ChatBuilderTests.java
Patch:
@@ -97,12 +97,12 @@ void createFunctionCallingOptionTest() {
 		// Callback Functions
 		assertThat(options.getFunctionCallbacks()).isNotNull();
 		assertThat(options.getFunctionCallbacks().size()).isEqualTo(1);
-		assertThat(options.getFunctionCallbacks().contains(cb));
+		assertThat(options.getFunctionCallbacks()).contains(cb);
 
 		// Functions
 		assertThat(options.getFunctions()).isNotNull();
 		assertThat(options.getFunctions().size()).isEqualTo(1);
-		assertThat(options.getFunctions().contains(func));
+		assertThat(options.getFunctions()).contains(func);
 
 	}
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModelIT.java
Patch:
@@ -71,7 +71,7 @@ void roleTest() {
 		Message systemMessage = systemPromptTemplate.createMessage(Map.of("name", name, "voice", voice));
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
 		ChatResponse response = chatModel.call(prompt);
-		assertThat(response.getResult().getOutput().getContent()).contains("Blackbeard");
+		assertThat(response.getResult().getOutput().getContent()).containsAnyOf("Blackbeard", "Bartholomew");
 	}
 
 	@Test
@@ -100,7 +100,6 @@ void mapOutputConverter() {
 		String format = outputConverter.getFormat();
 		String template = """
 				Provide me a List of {subject}
-				Remove the ```json outer brackets.
 				{format}
 				""";
 		PromptTemplate promptTemplate = new PromptTemplate(template,
@@ -234,7 +233,7 @@ public VertexAI vertexAiApi() {
 		public VertexAiGeminiChatModel vertexAiEmbedding(VertexAI vertexAi) {
 			return new VertexAiGeminiChatModel(vertexAi,
 					VertexAiGeminiChatOptions.builder()
-						.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_PRO_VISION)
+						.withModel(VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_PRO)
 						.build());
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/converter/MapOutputConverter.java
Patch:
@@ -54,7 +54,7 @@ public String getFormat() {
 				Your response should be in JSON format.
 				The data structure for the JSON should match this Java class: %s
 				Do not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation.
-				Remove the ```json markdown from the output.
+				Remove the ```json markdown surrounding the output including the trailing "```".
 				""";
 		return String.format(raw, HashMap.class.getName());
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/gemini/VertexAiGeminiChatProperties.java
Patch:
@@ -30,7 +30,7 @@ public class VertexAiGeminiChatProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vertex.ai.gemini.chat";
 
-	public static final String DEFAULT_MODEL = VertexAiGeminiChatModel.ChatModel.GEMINI_PRO_VISION.getValue();
+	public static final String DEFAULT_MODEL = VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_PRO.getValue();
 
 	/**
 	 * Vertex AI Gemini API generative options.

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -198,12 +198,12 @@ public List<Message> handleToolCallRequests(List<Message> previousMessages, Gene
 
 		AssistantMessage assistantMessage = new AssistantMessage("", Map.of(), assistantToolCalls);
 
-		List<ToolResponseMessage> toolResponseMessages = this.executeFuncitons(assistantMessage, true);
+		ToolResponseMessage toolResponseMessage = this.executeFuncitons(assistantMessage);
 
 		// History
 		List<Message> toolCallMessageConversation = new ArrayList<>(previousMessages);
 		toolCallMessageConversation.add(assistantMessage);
-		toolCallMessageConversation.addAll(toolResponseMessages);
+		toolCallMessageConversation.add(toolResponseMessage);
 		return toolCallMessageConversation;
 	}
 
@@ -420,7 +420,7 @@ else if (message instanceof ToolResponseMessage toolResponseMessage) {
 				.map(response -> Part.newBuilder()
 					.setFunctionResponse(FunctionResponse.newBuilder()
 						.setName(response.name())
-						.setResponse(jsonToStruct(response.respoinse()))
+						.setResponse(jsonToStruct(response.responseData()))
 						.build())
 					.build())
 				.toList();

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/ToolResponseMessage.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class ToolResponseMessage extends AbstractMessage {
 
-	public record ToolResponse(String id, String name, String respoinse) {
+	public record ToolResponse(String id, String name, String responseData) {
 	};
 
 	private List<ToolResponse> responses = new ArrayList<>();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/embedding/VertexAiEmbeddingAutoConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import org.springframework.ai.vertexai.embedding.VertexAiEmbeddigConnectionDetails;
 import org.springframework.ai.vertexai.embedding.multimodal.VertexAiMultimodalEmbeddingModel;
 import org.springframework.ai.vertexai.embedding.text.VertexAiTextEmbeddingModel;
-import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -37,7 +36,7 @@
  * @author Christian Tzolov
  * @since 1.0.0
  */
-@ConditionalOnClass({ VertexAI.class, VertexAiGeminiChatModel.class })
+@ConditionalOnClass({ VertexAI.class, VertexAiTextEmbeddingModel.class })
 @EnableConfigurationProperties({ VertexAiEmbeddingConnectionProperties.class, VertexAiTextEmbeddingProperties.class,
 		VertexAiMultimodalEmbeddingProperties.class, })
 public class VertexAiEmbeddingAutoConfiguration {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiPropertiesTests.java
Patch:
@@ -215,7 +215,7 @@ public void chatOptionsTest() {
 				"spring.ai.zhipuai.chat.options.stop=boza,koza",
 				"spring.ai.zhipuai.chat.options.temperature=0.55",
 				"spring.ai.zhipuai.chat.options.topP=0.56",
-				"spring.ai.zhipuai.chat.options.getRequestId=RequestId",
+				"spring.ai.zhipuai.chat.options.requestId=RequestId",
 				"spring.ai.zhipuai.chat.options.doSample=true",
 
 				// "spring.ai.zhipuai.chat.options.toolChoice.functionName=toolChoiceFunctionName",

File: models/spring-ai-anthropic/src/main/java/org/springframework/ai/anthropic/api/AnthropicApi.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.function.Predicate;
 
 import org.springframework.ai.anthropic.api.StreamHelper.ChatCompletionResponseBuilder;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.http.HttpHeaders;
@@ -126,7 +126,7 @@ public AnthropicApi(String baseUrl, String anthropicApiKey, String anthropicVers
 	 * "https://docs.anthropic.com/claude/docs/models-overview#model-comparison">model
 	 * comparison</a> for additional details and options.
 	 */
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 
 		// @formatter:off
 		CLAUDE_3_5_SONNET("claude-3-5-sonnet-20240620"),
@@ -153,7 +153,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApi.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatRequest;
 import org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi.AnthropicChatResponse;
 import org.springframework.ai.bedrock.api.AbstractBedrockApi;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.util.Assert;
 
 /**
@@ -227,7 +227,7 @@ public record AnthropicChatResponse(
 	/**
 	 * Anthropic models version.
 	 */
-	public enum AnthropicChatModel implements ModelDescription {
+	public enum AnthropicChatModel implements ChatModelDescription {
 		/**
 		 * anthropic.claude-instant-v1
 		 */
@@ -255,7 +255,7 @@ public String id() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.id;
 		}
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic3/api/Anthropic3ChatBedrockApi.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatResponse;
 import org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse;
 import org.springframework.ai.bedrock.api.AbstractBedrockApi;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.util.Assert;
 import reactor.core.publisher.Flux;
 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
@@ -437,7 +437,7 @@ public record Delta(@JsonProperty("type") String type, @JsonProperty("text") Str
 	/**
 	 * Anthropic models version.
 	 */
-	public enum AnthropicChatModel implements ModelDescription {
+	public enum AnthropicChatModel implements ChatModelDescription {
 
 		/**
 		 * anthropic.claude-instant-v1
@@ -482,7 +482,7 @@ public String id() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.id;
 		}
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/api/CohereChatBedrockApi.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.ai.bedrock.api.AbstractBedrockApi;
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest;
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatResponse;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.util.Assert;
 
 /**
@@ -367,7 +367,7 @@ public enum FinishReason {
 	/**
 	 * Cohere models version.
 	 */
-	public enum CohereChatModel implements ModelDescription {
+	public enum CohereChatModel implements ChatModelDescription {
 
 		/**
 		 * cohere.command-light-text-v14
@@ -393,7 +393,7 @@ public String id() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.id;
 		}
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApi.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.ai.bedrock.api.AbstractBedrockApi;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatRequest;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatResponse;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 
 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
 import software.amazon.awssdk.regions.Region;
@@ -372,7 +372,7 @@ public record FinishReason(
 	/**
 	 * Ai21 Jurassic2 models version.
 	 */
-	public enum Ai21Jurassic2ChatModel implements ModelDescription {
+	public enum Ai21Jurassic2ChatModel implements ChatModelDescription {
 
 		/**
 		 * ai21.j2-mid-v1
@@ -398,7 +398,7 @@ public String id() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.id;
 		}
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama/api/LlamaChatBedrockApi.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.ai.bedrock.api.AbstractBedrockApi;
 import org.springframework.ai.bedrock.llama.api.LlamaChatBedrockApi.LlamaChatRequest;
 import org.springframework.ai.bedrock.llama.api.LlamaChatBedrockApi.LlamaChatResponse;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 
 import java.time.Duration;
 
@@ -205,7 +205,7 @@ public enum StopReason {
 	/**
 	 * Llama models version.
 	 */
-	public enum LlamaChatModel implements ModelDescription {
+	public enum LlamaChatModel implements ChatModelDescription {
 
 		/**
 		 * meta.llama2-13b-chat-v1
@@ -241,7 +241,7 @@ public String id() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.id;
 		}
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApi.java
Patch:
@@ -31,7 +31,7 @@
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse;
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse.CompletionReason;
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponseChunk;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 
 /**
  * Java client for the Bedrock Titan chat model.
@@ -266,7 +266,7 @@ public record TitanChatResponseChunk(
 	/**
 	 * Titan models version.
 	 */
-	public enum TitanChatModel implements ModelDescription {
+	public enum TitanChatModel implements ChatModelDescription {
 
 		/**
 		 * amazon.titan-text-lite-v1
@@ -297,7 +297,7 @@ public String id() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.id;
 		}
 	}

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApi.java
Patch:
@@ -19,7 +19,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonValue;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.ai.util.api.ApiUtils;
@@ -113,7 +113,7 @@ public MiniMaxApi(String baseUrl, String miniMaxToken, RestClient.Builder restCl
 	 * MiniMax Chat Completion Models:
 	 * <a href="https://www.minimaxi.com/document/algorithm-concept">MiniMax Model</a>.
 	 */
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 		ABAB_6_5_Chat("abab6.5-chat"),
 		ABAB_6_5_S_Chat("abab6.5s-chat"),
 		ABAB_6_5_T_Chat("abab6.5t-chat"),
@@ -135,7 +135,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 	}

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatOptions.java
Patch:
@@ -141,7 +141,7 @@ public Builder withModel(String model) {
 		}
 
 		public Builder withModel(MistralAiApi.ChatModel chatModel) {
-			this.options.setModel(chatModel.getModelName());
+			this.options.setModel(chatModel.getName());
 			return this;
 		}
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiApi.java
Patch:
@@ -27,7 +27,7 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.boot.context.properties.bind.ConstructorBinding;
@@ -701,7 +701,7 @@ public record ChunkChoice(
 	 * 8x7B, Mixtral 8x22B) and optimized commercial models (Mistral Small, Mistral
 	 * Medium, Mistral Large, and Mistral Embeddings).
 	 */
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 
 		// @formatter:off
 		 @Deprecated(since = "1.0.0-M1", forRemoval = true) // Replaced by OPEN_MISTRAL_7B
@@ -728,7 +728,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java
Patch:
@@ -251,7 +251,7 @@ void streamFunctionCallTest() {
 
 	@Test
 	void validateCallResponseMetadata() {
-		String model = MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getModelName();
+		String model = MistralAiApi.ChatModel.OPEN_MISTRAL_7B.getName();
 		// @formatter:off
 		ChatResponse response = ChatClient.create(chatModel).prompt()
 				.options(MistralAiChatOptions.builder().withModel(model).build())

File: models/spring-ai-moonshot/src/main/java/org/springframework/ai/moonshot/api/MoonshotApi.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.boot.context.properties.bind.ConstructorBinding;
@@ -479,7 +479,7 @@ public record ChunkChoice(
 	 * <li><b>MOONSHOT_V1_128K</b> - moonshot-v1-128k</li>
 	 * </ul>
 	 */
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 
 		// @formatter:off
         MOONSHOT_V1_8K("moonshot-v1-8k"),
@@ -498,7 +498,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaModel.java
Patch:
@@ -15,15 +15,15 @@
  */
 package org.springframework.ai.ollama.api;
 
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 
 /**
  * Helper class for common Ollama models.
  *
  * @author Siarhei Blashuk
  * @since 0.8.1
  */
-public enum OllamaModel implements ModelDescription {
+public enum OllamaModel implements ChatModelDescription {
 
 	/**
 	 * Llama 2 is a collection of language models ranging from 7B to 70B parameters.
@@ -102,7 +102,7 @@ public String id() {
 	}
 
 	@Override
-	public String getModelName() {
+	public String getName() {
 		return this.id;
 	}
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -188,7 +188,7 @@ public Builder withModel(String model) {
 		}
 
 		public Builder withModel(OpenAiApi.ChatModel openAiChatModel) {
-			this.options.model = openAiChatModel.getModelName();
+			this.options.model = openAiChatModel.getName();
 			return this;
 		}
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -26,7 +26,7 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.openai.api.common.OpenAiApiConstants;
 import org.springframework.ai.retry.RetryUtils;
@@ -118,7 +118,7 @@ public OpenAiApi(String baseUrl, String openAiToken, RestClient.Builder restClie
 	 * - <a href="https://platform.openai.com/docs/models/gpt-4-and-gpt-4-turbo">GPT-4 and GPT-4 Turbo</a>
 	 * - <a href="https://platform.openai.com/docs/models/gpt-3-5-turbo">GPT-3.5 Turbo</a>.
 	 */
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 		/**
 		 * Multimodal flagship model that’s cheaper and faster than GPT-4 Turbo.
 		 * Currently points to gpt-4o-2024-05-13.
@@ -221,7 +221,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelIT.java
Patch:
@@ -346,7 +346,7 @@ void streamingMultiModalityImageUrl() throws IOException {
 
 	@Test
 	void validateCallResponseMetadata() {
-		String model = OpenAiApi.ChatModel.GPT_3_5_TURBO.getModelName();
+		String model = OpenAiApi.ChatModel.GPT_3_5_TURBO.getName();
 		// @formatter:off
 		ChatResponse response = ChatClient.create(chatModel).prompt()
 				.options(OpenAiChatOptions.builder().withModel(model).build())

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiPaymentTransactionIT.java
Patch:
@@ -198,7 +198,7 @@ public OpenAiApi chatCompletionApi() {
 		public OpenAiChatModel openAiClient(OpenAiApi openAiApi, FunctionCallbackContext functionCallbackContext) {
 			return new OpenAiChatModel(openAiApi,
 					OpenAiChatOptions.builder()
-						.withModel(ChatModel.GPT_4_TURBO.getModelName())
+						.withModel(ChatModel.GPT_4_TURBO.getName())
 						.withTemperature(0.1f)
 						.build(),
 					functionCallbackContext, RetryUtils.DEFAULT_RETRY_TEMPLATE);

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -43,7 +43,7 @@
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.model.function.AbstractFunctionCallSupport;
 import org.springframework.ai.model.function.FunctionCallbackContext;
@@ -98,7 +98,7 @@ public String getValue() {
 
 	}
 
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 
 		GEMINI_PRO_VISION("gemini-pro-vision"),
 
@@ -119,7 +119,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/api/ZhiPuAiApi.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import org.springframework.ai.model.ModelDescription;
+import org.springframework.ai.model.ChatModelDescription;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.retry.RetryUtils;
 import org.springframework.ai.util.api.ApiUtils;
@@ -112,7 +112,7 @@ public ZhiPuAiApi(String baseUrl, String zhiPuAiToken, RestClient.Builder restCl
 	 * ZhiPuAI Chat Completion Models:
 	 * <a href="https://open.bigmodel.cn/dev/howuse/model">ZhiPuAI Model</a>.
 	 */
-	public enum ChatModel implements ModelDescription {
+	public enum ChatModel implements ChatModelDescription {
 		GLM_4("GLM-4"),
 		GLM_4V("glm-4v"),
 		GLM_4_Air("glm-4-air"),
@@ -131,7 +131,7 @@ public String getValue() {
 		}
 
 		@Override
-		public String getModelName() {
+		public String getName() {
 			return this.value;
 		}
 	}

File: models/spring-ai-transformers/src/main/java/org/springframework/ai/transformers/TransformersEmbeddingModel.java
Patch:
@@ -200,7 +200,9 @@ public void afterPropertiesSet() throws Exception {
 		logger.info("Model output names: " + onnxModelOutputs.stream().collect(Collectors.joining(", ")));
 
 		Assert.isTrue(onnxModelOutputs.contains(this.modelOutputName),
-				"The generative output names doesn't contain expected: " + this.modelOutputName);
+				"The generative output names doesn't contain expected: " + this.modelOutputName
+						+ ". Consider one of the available model outputs: "
+						+ onnxModelOutputs.stream().collect(Collectors.joining(", ")));
 	}
 
 	private Resource getCachedResource(Resource resource) {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingModelAutoConfiguration.java
Patch:
@@ -52,6 +52,8 @@ public TransformersEmbeddingModel embeddingModel(TransformersEmbeddingModelPrope
 
 		embeddingModel.setGpuDeviceId(properties.getOnnx().getGpuDeviceId());
 
+		embeddingModel.setModelOutputName(properties.getOnnx().getModelOutputName());
+
 		return embeddingModel;
 	}
 

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -225,8 +225,8 @@ public Builder withCollectionName(String collectionName) {
 			 */
 			public Builder withEmbeddingDimension(int newEmbeddingDimension) {
 
-				Assert.isTrue(newEmbeddingDimension >= 1 && newEmbeddingDimension <= 2048,
-						"Dimension has to be withing the boundaries 1 and 2048 (inclusively)");
+				Assert.isTrue(newEmbeddingDimension >= 1 && newEmbeddingDimension <= 32768,
+						"Dimension has to be withing the boundaries 1 and 32768 (inclusively)");
 
 				this.embeddingDimension = newEmbeddingDimension;
 				return this;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfigurationIT.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.mongo;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;
 import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
@@ -43,11 +42,10 @@
  * @author Eddú Meléndez
  */
 @Testcontainers
-@Disabled("Disabled due to https://github.com/spring-projects/spring-ai/issues/698")
 class MongoDBAtlasVectorStoreAutoConfigurationIT {
 
 	@Container
-	static GenericContainer<?> mongo = new GenericContainer<>("mongodb/atlas:v1.15.1").withPrivilegedMode(true)
+	static GenericContainer<?> mongo = new GenericContainer<>("mongodb/atlas:v1.24.0").withPrivilegedMode(true)
 		.withCommand("/bin/bash", "-c",
 				"atlas deployments setup local-test --type local --port 27778 --bindIpAll --username root --password root --force && tail -f /dev/null")
 		.withExposedPorts(27778)

File: spring-ai-core/src/main/java/org/springframework/ai/document/Document.java
Patch:
@@ -92,8 +92,8 @@ public Document(String id, String content, Map<String, Object> metadata) {
 	}
 
 	public Document(String id, String content, List<Media> media, Map<String, Object> metadata) {
-		Assert.hasText(id, "id must not be null");
-		Assert.hasText(content, "content must not be null");
+		Assert.hasText(id, "id must not be null or empty");
+		Assert.hasText(content, "content must not be null or empty");
 		Assert.notNull(metadata, "metadata must not be null");
 
 		this.id = id;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatModel.java
Patch:
@@ -215,7 +215,7 @@ public Flux<ChatResponse> stream(Prompt prompt) {
 							}
 							String finish = (choice.finishReason() != null ? choice.finishReason().name() : "");
 							var generation = new Generation(choice.message().content(),
-									Map.of("id", id, "role", roleMap.get(id), "finishReason", finish));
+									Map.of("id", id, "role", roleMap.getOrDefault(id, ""), "finishReason", finish));
 							if (choice.finishReason() != null) {
 								generation = generation.withGenerationMetadata(
 										ChatGenerationMetadata.from(choice.finishReason().name(), null));

File: vector-stores/spring-ai-mongodb-atlas-store/src/main/java/org/springframework/ai/vectorstore/MongoDBAtlasFilterExpressionConverter.java
Patch:
@@ -22,7 +22,8 @@
 import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.OR;
 
 /**
- * Converts {@link Filter.Expression} into MongoDB Atlas metadata filter expression format.
+ * Converts {@link Filter.Expression} into MongoDB Atlas metadata filter expression
+ * format.
  * (https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/#std-label-vectorSearch-agg-pipeline-filter)
  *
  * @author Chris Smith

File: vector-stores/spring-ai-azure-store/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -332,8 +332,10 @@ private record AzureSearchDocument(String id, String content, List<Double> embed
 	@Override
 	public void afterPropertiesSet() throws Exception {
 
-		if (!this.initializeSchema)
+		if (!this.initializeSchema) {
+			this.searchClient = this.searchIndexClient.getSearchClient(this.indexName);
 			return;
+		}
 
 		int dimensions = this.embeddingModel.dimensions();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 - 2024 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,11 +21,12 @@
 
 /**
  * @author Christian Tzolov
+ * @author Soby Chacko
  */
 @ConfigurationProperties(ChromaVectorStoreProperties.CONFIG_PREFIX)
 public class ChromaVectorStoreProperties extends CommonVectorStoreProperties {
 
-	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.chroma.store";
+	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.chroma";
 
 	private String collectionName = ChromaVectorStore.DEFAULT_COLLECTION_NAME;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -50,7 +50,7 @@ public class ChromaVectorStoreAutoConfigurationIT {
 		.withUserConfiguration(Config.class)
 		.withPropertyValues("spring.ai.vectorstore.chroma.client.host=http://" + chroma.getHost(),
 				"spring.ai.vectorstore.chroma.client.port=" + chroma.getMappedPort(8000),
-				"spring.ai.vectorstore.chroma.store.collectionName=TestCollection");
+				"spring.ai.vectorstore.chroma.collectionName=TestCollection");
 
 	@Test
 	public void addAndSearchWithFilters() {

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiChatResponseMetadata.java
Patch:
@@ -29,6 +29,7 @@
  * {@literal Microsoft Azure OpenAI Service}.
  *
  * @author John Blum
+ * @author Thomas Vitale
  * @see ChatResponseMetadata
  * @since 0.7.1
  */
@@ -59,6 +60,7 @@ protected AzureOpenAiChatResponseMetadata(String id, AzureOpenAiUsage usage, Pro
 		this.promptMetadata = promptMetadata;
 	}
 
+	@Override
 	public String getId() {
 		return this.id;
 	}

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatModel.java
Patch:
@@ -30,6 +30,7 @@
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.ToolCall;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;
+import org.springframework.ai.mistralai.metadata.MistralAiChatResponseMetadata;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.model.function.AbstractFunctionCallSupport;
 import org.springframework.ai.model.function.FunctionCallbackContext;
@@ -119,7 +120,7 @@ public ChatResponse call(Prompt prompt) {
 					.withGenerationMetadata(ChatGenerationMetadata.from(choice.finishReason().name(), null)))
 				.toList();
 
-			return new ChatResponse(generations);
+			return new ChatResponse(generations, MistralAiChatResponseMetadata.from(chatCompletion));
 		});
 	}
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatModel.java
Patch:
@@ -72,6 +72,7 @@
  * @author Hyunjoon Choi
  * @author Mariusz Bernacki
  * @author luocongqiu
+ * @author Thomas Vitale
  * @see ChatModel
  * @see StreamingChatModel
  * @see OpenAiApi

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -41,6 +41,7 @@
 /**
  * @author Christian Tzolov
  * @author Mariusz Bernacki
+ * @author Thomas Vitale
  * @since 0.8.0
  */
 @JsonInclude(Include.NON_NULL)
@@ -66,8 +67,7 @@ public class OpenAiChatOptions implements FunctionCallingOptions, ChatOptions {
 	private @JsonProperty("logit_bias") Map<String, Integer> logitBias;
 	/**
 	 * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities
-	 * of each output token returned in the 'content' of 'message'. This option is currently not available
-	 * on the 'gpt-4-vision-preview' model.
+	 * of each output token returned in the 'content' of 'message'.
 	 */
 	private @JsonProperty("logprobs") Boolean logprobs;
 	/**

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/api/OpenAiAudioApiIT.java
Patch:
@@ -78,7 +78,8 @@ void speechTranscriptionAndTranslation() throws IOException {
 					StructuredResponse.class)
 			.getBody();
 
-		assertThat(transcriptionDutch.text()).isEqualTo("Hallo, mijn naam is Chris en ik hou van Spring AI.");
+		assertThat(transcriptionDutch.text()).containsAnyOf("Hallo, mijn naam is Chris en ik hou van Spring AI.",
+				"Hallo, mijn naam is Chris en ik houd van Spring AI.");
 	}
 
 }

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientIT.java
Patch:
@@ -258,7 +258,7 @@ void streamFunctionCallTest() {
 	}
 
 	@ParameterizedTest(name = "{0} : {displayName} ")
-	@ValueSource(strings = { "gpt-4-vision-preview", "gpt-4o" })
+	@ValueSource(strings = { "gpt-4o" })
 	void multiModalityEmbeddedImage(String modelName) throws IOException {
 
 		// @formatter:off
@@ -276,7 +276,7 @@ void multiModalityEmbeddedImage(String modelName) throws IOException {
 	}
 
 	@ParameterizedTest(name = "{0} : {displayName} ")
-	@ValueSource(strings = { "gpt-4-vision-preview", "gpt-4o" })
+	@ValueSource(strings = { "gpt-4o" })
 	void multiModalityImageUrl(String modelName) throws IOException {
 
 		// TODO: add url method that wrapps the checked exception.
@@ -304,7 +304,7 @@ void streamingMultiModalityImageUrl() throws IOException {
 
 		// @formatter:off
 		Flux<String> response = ChatClient.create(chatModel).prompt()
-				.options(OpenAiChatOptions.builder().withModel(OpenAiApi.ChatModel.GPT_4_VISION_PREVIEW.getValue())
+				.options(OpenAiChatOptions.builder().withModel(OpenAiApi.ChatModel.GPT_4_O.getValue())
 						.build())
 				.user(u -> u.text("Explain what do you see on this picture?")
 						.media(MimeTypeUtils.IMAGE_PNG, url))

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/opensearch/OpenSearchVectorStoreProperties.java
Patch:
@@ -27,7 +27,7 @@ public class OpenSearchVectorStoreProperties {
 	/**
 	 * Comma-separated list of the OpenSearch instances to use.
 	 */
-	private List<String> uris;
+	private List<String> uris = List.of();
 
 	private String indexName;
 

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/BedrockAi21Jurassic2ChatModelIT.java
Patch:
@@ -127,6 +127,7 @@ void mapOutputConverter() {
 
 	}
 
+	@Disabled("Jurrasic2 is very unstable")
 	@Test
 	void simpleChatResponse() {
 		UserMessage userMessage = new UserMessage("Tell me a joke about AI.");
@@ -146,7 +147,7 @@ public static class TestConfiguration {
 		@Bean
 		public Ai21Jurassic2ChatBedrockApi jurassic2ChatBedrockApi() {
 			return new Ai21Jurassic2ChatBedrockApi(
-					Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel.AI21_J2_MID_V1.id(),
+					Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel.AI21_J2_ULTRA_V1.id(),
 					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
 					Duration.ofMinutes(2));
 		}

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/api/MiniMaxApiIT.java
Patch:
@@ -43,7 +43,7 @@ public class MiniMaxApiIT {
 	void chatCompletionEntity() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		ResponseEntity<ChatCompletion> response = miniMaxApi
-			.chatCompletionEntity(new ChatCompletionRequest(List.of(chatCompletionMessage), "abab6.5g", 0.7f, false));
+			.chatCompletionEntity(new ChatCompletionRequest(List.of(chatCompletionMessage), "glm-4-air", 0.7f, false));
 
 		assertThat(response).isNotNull();
 		assertThat(response.getBody()).isNotNull();
@@ -53,7 +53,7 @@ void chatCompletionEntity() {
 	void chatCompletionStream() {
 		ChatCompletionMessage chatCompletionMessage = new ChatCompletionMessage("Hello world", Role.USER);
 		Flux<ChatCompletionChunk> response = miniMaxApi
-			.chatCompletionStream(new ChatCompletionRequest(List.of(chatCompletionMessage), "abab6.5g", 0.7f, true));
+			.chatCompletionStream(new ChatCompletionRequest(List.of(chatCompletionMessage), "glm-4-air", 0.7f, true));
 
 		assertThat(response).isNotNull();
 		assertThat(response.collectList().block()).isNotNull();

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiChatModel.java
Patch:
@@ -17,12 +17,11 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
+import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.Generation;
 import org.springframework.ai.chat.model.StreamingChatModel;
-import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.ModelOptionsUtils;
@@ -287,7 +286,7 @@ private String fromMediaData(MimeType mimeType, Object mediaContentData) {
 		if (mediaContentData instanceof byte[] bytes) {
 			// Assume the bytes are an image. So, convert the bytes to a base64 encoded
 			// following the prefix pattern.
-			return String.format("data:%s;base64,%s", mimeType.toString(), Base64.getEncoder().encodeToString(bytes));
+			return Base64.getEncoder().encodeToString(bytes);
 		}
 		else if (mediaContentData instanceof String text) {
 			// Assume the text is a URLs or a base64 encoded image prefixed by the user.

File: models/spring-ai-zhipuai/src/main/java/org/springframework/ai/zhipuai/ZhiPuAiImageModel.java
Patch:
@@ -17,10 +17,9 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import org.springframework.ai.image.Image;
-import org.springframework.ai.image.ImageModel;
 import org.springframework.ai.image.ImageGeneration;
+import org.springframework.ai.image.ImageModel;
 import org.springframework.ai.image.ImageOptions;
 import org.springframework.ai.image.ImagePrompt;
 import org.springframework.ai.image.ImageResponse;

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/embedding/EmbeddingIT.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
-
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.zhipuai.ZhiPuAiEmbeddingModel;
 import org.springframework.beans.factory.annotation.Autowired;

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/image/ZhiPuAiImageModelIT.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
-
 import org.springframework.ai.image.Image;
 import org.springframework.ai.image.ImageModel;
 import org.springframework.ai.image.ImageOptionsBuilder;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/zhipuai/ZhiPuAiChatProperties.java
Patch:
@@ -28,7 +28,7 @@ public class ZhiPuAiChatProperties extends ZhiPuAiParentProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.zhipuai.chat";
 
-	public static final String DEFAULT_CHAT_MODEL = ZhiPuAiApi.ChatModel.GLM_3_Turbo.value;
+	public static final String DEFAULT_CHAT_MODEL = ZhiPuAiApi.ChatModel.GLM_4_Air.value;
 
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/QuestionAnswerAdvisor.java
Patch:
@@ -141,7 +141,8 @@ public Flux<ChatResponse> adviseResponse(Flux<ChatResponse> fluxResponse, Map<St
 
 	protected Filter.Expression doGetFilterExpression(Map<String, Object> context) {
 
-		if (!context.containsKey(FILTER_EXPRESSION) || !StringUtils.hasText(context.get(FILTER_EXPRESSION).toString())) {
+		if (!context.containsKey(FILTER_EXPRESSION)
+				|| !StringUtils.hasText(context.get(FILTER_EXPRESSION).toString())) {
 			return this.searchRequest.getFilterExpression();
 		}
 		return new FilterExpressionTextParser().parse(context.get(FILTER_EXPRESSION).toString());

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/advisor/QuestionAnswerAdvisor.java
Patch:
@@ -62,7 +62,7 @@ public class QuestionAnswerAdvisor implements RequestResponseAdvisor {
 
 	public static final String RETRIEVED_DOCUMENTS = "qa_retrieved_documents";
 
-	public static final String FILTER_EXRESSION = "qa_filter_expression";
+	public static final String FILTER_EXPRESSION = "qa_filter_expression";
 
 	public QuestionAnswerAdvisor(VectorStore vectorStore) {
 		this(vectorStore, SearchRequest.defaults(), DEFAULT_USER_TEXT_ADVISE);
@@ -141,10 +141,10 @@ public Flux<ChatResponse> adviseResponse(Flux<ChatResponse> fluxResponse, Map<St
 
 	protected Filter.Expression doGetFilterExpression(Map<String, Object> context) {
 
-		if (!context.containsKey(FILTER_EXRESSION) || !StringUtils.hasText(context.get(FILTER_EXRESSION).toString())) {
+		if (!context.containsKey(FILTER_EXPRESSION) || !StringUtils.hasText(context.get(FILTER_EXPRESSION).toString())) {
 			return this.searchRequest.getFilterExpression();
 		}
-		return new FilterExpressionTextParser().parse(context.get(FILTER_EXRESSION).toString());
+		return new FilterExpressionTextParser().parse(context.get(FILTER_EXPRESSION).toString());
 
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/chat/client/QuestionAnswerAdvisorTests.java
Patch:
@@ -77,7 +77,7 @@ public void qaAdvisorWithDynamicFilterExpressions() {
 		// @formatter:off
 		var content = chatClient.prompt()
 			.user("Please answer my question XYZ")
-			.advisors(a -> a.param(QuestionAnswerAdvisor.FILTER_EXRESSION, "type == 'Spring'"))
+			.advisors(a -> a.param(QuestionAnswerAdvisor.FILTER_EXPRESSION, "type == 'Spring'"))
 			.call()
 			.content();
 		//formatter:on

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/typesense/TypesenseServiceClientProperties.java
Patch:
@@ -14,7 +14,7 @@ public class TypesenseServiceClientProperties {
 
 	private String host = "localhost";
 
-	private String port = "8108";
+	private int port = 8108;
 
 	/**
 	 * Typesense API key. This is the default api key when the user follows the Typesense
@@ -38,11 +38,11 @@ public void setHost(String host) {
 		this.host = host;
 	}
 
-	public String getPort() {
+	public int getPort() {
 		return port;
 	}
 
-	public void setPort(String port) {
+	public void setPort(int port) {
 		this.port = port;
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfiguration.java
Patch:
@@ -42,6 +42,8 @@ public PineconeVectorStore vectorStore(EmbeddingModel embeddingModel, PineconeVe
 			.withProjectId(properties.getProjectId())
 			.withIndexName(properties.getIndexName())
 			.withNamespace(properties.getNamespace())
+			.withContentFieldName(properties.getContentFieldName())
+			.withDistanceMetadataFieldName(properties.getDistanceMetadataFieldName())
 			.withServerSideTimeout(properties.getServerSideTimeout())
 			.build();
 

File: vector-stores/spring-ai-pinecone-store/src/test/java/org/springframework/ai/vectorstore/PineconeVectorStoreIT.java
Patch:
@@ -60,6 +60,8 @@ public class PineconeVectorStoreIT {
 	// NOTE: Leave it empty as for free tier as later doesn't support namespaces.
 	private static final String PINECONE_NAMESPACE = "";
 
+	private static final String CUSTOM_CONTENT_FIELD_NAME = "article";
+
 	List<Document> documents = List.of(
 			new Document("1", getText("classpath:/test/data/spring.ai.txt"), Map.of("meta1", "meta1")),
 			new Document("2", getText("classpath:/test/data/time.shelter.txt"), Map.of()),
@@ -283,6 +285,7 @@ public PineconeVectorStoreConfig pineconeVectorStoreConfig() {
 				.withProjectId(PINECONE_PROJECT_ID)
 				.withIndexName(PINECONE_INDEX_NAME)
 				.withNamespace(PINECONE_NAMESPACE)
+				.withContentFieldName(CUSTOM_CONTENT_FIELD_NAME)
 				.build();
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -43,7 +43,7 @@
 public class ChromaVectorStoreAutoConfigurationIT {
 
 	@Container
-	static ChromaDBContainer chroma = new ChromaDBContainer("ghcr.io/chroma-core/chroma:0.4.15");
+	static ChromaDBContainer chroma = new ChromaDBContainer("ghcr.io/chroma-core/chroma:0.5.0");
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withConfiguration(AutoConfigurations.of(ChromaVectorStoreAutoConfiguration.class))

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatModel.java
Patch:
@@ -143,8 +143,7 @@ public ChatResponse call(Prompt prompt) {
 		ChatCompletions chatCompletions = this.callWithFunctionSupport(options);
 		logger.trace("Azure ChatCompletions: {}", chatCompletions);
 
-		List<Generation> generations = chatCompletions.getChoices()
-			.stream()
+		List<Generation> generations = nullSafeList(chatCompletions.getChoices()).stream()
 			.map(choice -> new Generation(choice.getMessage().getContent())
 				.withGenerationMetadata(generateChoiceMetadata(choice)))
 			.toList();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaAutoConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public OllamaEmbeddingModel ollamaEmbeddingModel(OllamaApi ollamaApi, OllamaEmbe
 		return new OllamaEmbeddingModel(ollamaApi, properties.getOptions());
 	}
 
-	private static class PropertiesOllamaConnectionDetails implements OllamaConnectionDetails {
+	static class PropertiesOllamaConnectionDetails implements OllamaConnectionDetails {
 
 		private final OllamaConnectionProperties properties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfiguration.java
Patch:
@@ -76,7 +76,7 @@ public ChromaVectorStore vectorStore(EmbeddingModel embeddingModel, ChromaApi ch
 				storeProperties.isInitializeSchema());
 	}
 
-	private static class PropertiesChromaConnectionDetails implements ChromaConnectionDetails {
+	static class PropertiesChromaConnectionDetails implements ChromaConnectionDetails {
 
 		private final ChromaApiProperties properties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfiguration.java
Patch:
@@ -113,8 +113,7 @@ public MilvusServiceClient milvusClient(MilvusVectorStoreProperties serverProper
 		return new MilvusServiceClient(builder.build());
 	}
 
-	private static class PropertiesMilvusServiceClientConnectionDetails
-			implements MilvusServiceClientConnectionDetails {
+	static class PropertiesMilvusServiceClientConnectionDetails implements MilvusServiceClientConnectionDetails {
 
 		private final MilvusServiceClientProperties properties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public RedisVectorStore vectorStore(EmbeddingModel embeddingModel, RedisVectorSt
 		return new RedisVectorStore(config, embeddingModel, properties.isInitializeSchema());
 	}
 
-	private static class PropertiesRedisConnectionDetails implements RedisConnectionDetails {
+	static class PropertiesRedisConnectionDetails implements RedisConnectionDetails {
 
 		private final RedisVectorStoreProperties properties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/oracle/OracleVectorStoreAutoConfiguration.java
Patch:
@@ -32,13 +32,13 @@
  */
 @AutoConfiguration(after = JdbcTemplateAutoConfiguration.class)
 @ConditionalOnClass({ OracleVectorStore.class, DataSource.class, JdbcTemplate.class })
-@EnableConfigurationProperties(OracleAIVectorSearchStoreProperties.class)
-public class OracleAIVectorSearchStoreAutoConfiguration {
+@EnableConfigurationProperties(OracleVectorStoreProperties.class)
+public class OracleVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
 	public OracleVectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel,
-			OracleAIVectorSearchStoreProperties properties) {
+			OracleVectorStoreProperties properties) {
 		return new OracleVectorStore(jdbcTemplate, embeddingModel, properties.getTableName(), properties.getIndexType(),
 				properties.getDistanceType(), properties.getDimensions(), properties.getSearchAccuracy(),
 				properties.isInitializeSchema(), properties.isRemoveExistingVectorStoreTable(),

File: vector-stores/spring-ai-oracle-store/src/test/java/org/springframework/ai/vectorstore/OracleVectorStoreIT.java
Patch:
@@ -63,7 +63,7 @@ public static String getText(final String uri) {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withUserConfiguration(TestClient.class)
-		.withPropertyValues("test.spring.ai.vectorstore.oracle.distanceType=COSINE_DISTANCE",
+		.withPropertyValues("test.spring.ai.vectorstore.oracle.distanceType=COSINE",
 				"test.spring.ai.vectorstore.oracle.dimensions=384",
 				// JdbcTemplate configuration
 				String.format("app.datasource.url=%s", oracle23aiContainer.getJdbcUrl()),
@@ -76,15 +76,15 @@ public static String getText(final String uri) {
 	public static class TestClient {
 
 		@Value("${test.spring.ai.vectorstore.oracle.distanceType}")
-		OracleVectorStore.OracleAIVectorSearchDistanceType distanceType;
+		OracleVectorStore.OracleVectorStoreDistanceType distanceType;
 
 		@Value("${test.spring.ai.vectorstore.oracle.searchAccuracy}")
 		int searchAccuracy;
 
 		@Bean
 		public VectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel) {
 			return new OracleVectorStore(jdbcTemplate, embeddingModel, OracleVectorStore.DEFAULT_TABLE_NAME,
-					OracleVectorStore.OracleAIVectorSearchIndexType.IVF, distanceType, 384, searchAccuracy, true, true,
+					OracleVectorStore.OracleVectorStoreIndexType.IVF, distanceType, 384, searchAccuracy, true, true,
 					true);
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/MockWeatherService.java
Patch:
@@ -28,6 +28,7 @@
  *
  * @author Christian Tzolov
  */
+@JsonClassDescription("Get the weather in location")
 public class MockWeatherService implements Function<MockWeatherService.Request, MockWeatherService.Response> {
 
 	/**

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatModel.java
Patch:
@@ -102,9 +102,9 @@ public enum ChatModel implements ModelDescription {
 
 		GEMINI_PRO("gemini-pro"),
 
-		GEMINI_PRO_1_5_PRO("gemini-1.5-pro-preview-0514"),
+		GEMINI_1_5_PRO("gemini-1.5-pro-preview-0514"),
 
-		GEMINI_PRO_1_5_FLASH("gemini-1.5-flash-preview-0514");
+		GEMINI_1_5_FLASH("gemini-1.5-flash-preview-0514");
 
 		ChatModel(String value) {
 			this.value = value;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -55,7 +55,7 @@ public class FunctionCallWithFunctionWrapperIT {
 	void functionCallTest() {
 		contextRunner
 			.withPropertyValues("spring.ai.vertex.ai.gemini.chat.options.model="
-					+ VertexAiGeminiChatModel.ChatModel.GEMINI_PRO_1_5_FLASH.getValue())
+					+ VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_FLASH.getValue())
 			.run(context -> {
 
 				VertexAiGeminiChatModel chatModel = context.getBean(VertexAiGeminiChatModel.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -51,7 +51,7 @@ public class FunctionCallWithPromptFunctionIT {
 	void functionCallTest() {
 		contextRunner
 			.withPropertyValues("spring.ai.vertex.ai.gemini.chat.options.model="
-					+ VertexAiGeminiChatModel.ChatModel.GEMINI_PRO_1_5_FLASH.getValue())
+					+ VertexAiGeminiChatModel.ChatModel.GEMINI_1_5_FLASH.getValue())
 			.run(context -> {
 
 				VertexAiGeminiChatModel chatModel = context.getBean(VertexAiGeminiChatModel.class);

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatModelIT.java
Patch:
@@ -188,7 +188,7 @@ void beanStreamOutputConverterRecords() {
 	@Test
 	void functionCallTest() {
 
-		UserMessage userMessage = new UserMessage("What's the weather like in San Francisco?");
+		UserMessage userMessage = new UserMessage("What's the weather like in San Francisco? Response in Celsius");
 
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 
@@ -211,7 +211,7 @@ void functionCallTest() {
 	@Test
 	void streamFunctionCallTest() {
 
-		UserMessage userMessage = new UserMessage("What's the weather like in Tokyo, Japan?");
+		UserMessage userMessage = new UserMessage("What's the weather like in Tokyo, Japan? Response in Celsius");
 
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -48,7 +48,7 @@
  */
 public class OpenAiApi {
 
-	public static final String DEFAULT_CHAT_MODEL = ChatModel.GPT_3_5_TURBO.getValue();
+	public static final OpenAiApi.ChatModel DEFAULT_CHAT_MODEL = ChatModel.GPT_4_O;
 	public static final String DEFAULT_EMBEDDING_MODEL = EmbeddingModel.TEXT_EMBEDDING_ADA_002.getValue();
 	private static final Predicate<String> SSE_DONE_PREDICATE = "[DONE]"::equals;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelIT.java
Patch:
@@ -219,7 +219,7 @@ void functionCallTest() {
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 
 		var promptOptions = OpenAiChatOptions.builder()
-			.withModel(OpenAiApi.ChatModel.GPT_4_TURBO_PREVIEW.getValue())
+			.withModel(OpenAiApi.ChatModel.GPT_4_O.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())
 				.withName("getCurrentWeather")
 				.withDescription("Get the weather in location")

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/chat/client/ChatClientAutoConfiguration.java
Patch:
@@ -40,7 +40,7 @@
  * @author Mark Pollack
  * @author Josh Long
  * @author Arjen Poutsma
- * @since 1.0.0 M1
+ * @since 1.0.0
  */
 @AutoConfiguration
 @ConditionalOnClass(ChatClient.class)
@@ -59,7 +59,6 @@ ChatClientBuilderConfigurer chatClientBuilderConfigurer(ObjectProvider<ChatClien
 
 	@Bean
 	@Scope("prototype")
-	@ConditionalOnMissingBean
 	ChatClient.Builder chatClientBuilder(ChatClientBuilderConfigurer chatClientBuilderConfigurer, ChatModel chatModel) {
 		ChatClient.Builder builder = ChatClient.builder(chatModel);
 		return chatClientBuilderConfigurer.configure(builder);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaAutoConfiguration.java
Patch:
@@ -19,10 +19,12 @@
 import org.springframework.ai.ollama.OllamaEmbeddingModel;
 import org.springframework.ai.ollama.api.OllamaApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
+import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration;
+import org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 import org.springframework.web.client.RestClient;
@@ -38,6 +40,7 @@
 @ConditionalOnClass(OllamaApi.class)
 @EnableConfigurationProperties({ OllamaChatProperties.class, OllamaEmbeddingProperties.class,
 		OllamaConnectionProperties.class })
+@ImportAutoConfiguration(classes = { RestClientAutoConfiguration.class, WebClientAutoConfiguration.class })
 public class OllamaAutoConfiguration {
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiChatProperties.java
Patch:
@@ -24,7 +24,7 @@ public class OpenAiChatProperties extends OpenAiParentProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.openai.chat";
 
-	public static final String DEFAULT_CHAT_MODEL = "gpt-3.5-turbo";
+	public static final String DEFAULT_CHAT_MODEL = "gpt-4o";
 
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationIT.java
Patch:
@@ -47,7 +47,7 @@
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
 public class AzureOpenAiAutoConfigurationIT {
 
-	private static String CHAT_MODEL_NAME = "gpt-35-turbo";
+	private static String CHAT_MODEL_NAME = "gpt-4o";
 
 	private static String EMBEDDING_MODEL_NAME = "text-embedding-ada-002";
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/chat/client/ChatClientAutoConfigurationIT.java
Patch:
@@ -44,7 +44,7 @@ public class ChatClientAutoConfigurationIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"),
-				"spring.ai.openai.chat.options.model=gpt-4-turbo")
+				"spring.ai.openai.chat.options.model=gpt-4o")
 		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
 				RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class, ChatClientAutoConfiguration.class));
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -55,7 +55,7 @@ public class FunctionCallWithFunctionWrapperIT {
 	void functionCallTest() {
 		contextRunner
 			.withPropertyValues("spring.ai.vertex.ai.gemini.chat.options.model="
-					+ VertexAiGeminiChatModel.ChatModel.GEMINI_PRO.getValue())
+					+ VertexAiGeminiChatModel.ChatModel.GEMINI_PRO_1_5_FLASH.getValue())
 			.run(context -> {
 
 				VertexAiGeminiChatModel chatModel = context.getBean(VertexAiGeminiChatModel.class);
@@ -65,7 +65,8 @@ void functionCallTest() {
 						Answer for all listed locations.
 						If the information was not fetched call the function again. Repeat at most 3 times.
 						""");
-				var userMessage = new UserMessage("What's the weather like in San Francisco, Paris and in Tokyo?");
+				var userMessage = new UserMessage(
+						"What's the weather like in San Francisco, Paris and in Tokyo? Perform multiple funciton execution if necessary. Return the temperature in Celsius.");
 
 				ChatResponse response = chatModel.call(new Prompt(List.of(systemMessage, userMessage),
 						VertexAiGeminiChatOptions.builder().withFunction("WeatherInfo").build()));

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -51,7 +51,7 @@ public class FunctionCallWithPromptFunctionIT {
 	void functionCallTest() {
 		contextRunner
 			.withPropertyValues("spring.ai.vertex.ai.gemini.chat.options.model="
-					+ VertexAiGeminiChatModel.ChatModel.GEMINI_PRO.getValue())
+					+ VertexAiGeminiChatModel.ChatModel.GEMINI_PRO_1_5_FLASH.getValue())
 			.run(context -> {
 
 				VertexAiGeminiChatModel chatModel = context.getBean(VertexAiGeminiChatModel.class);
@@ -62,7 +62,7 @@ void functionCallTest() {
 						If the information was not fetched call the function again. Repeat at most 3 times.
 						""");
 				UserMessage userMessage = new UserMessage(
-						"What's the weather like in San Francisco, in Paris and in Tokyo?");
+						"What's the weather like in San Francisco, in Paris and in Tokyo? Perform multiple funciton execution if necessary. Return the temperature in Celsius.");
 
 				var promptOptions = VertexAiGeminiChatOptions.builder()
 					.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/client/OpenAiChatClientIT.java
Patch:
@@ -280,7 +280,6 @@ void multiModalityImageUrl(String modelName) throws IOException {
 		// @formatter:off
 		String response = ChatClient.create(chatModel).prompt()
 				// TODO consider adding model(...) method to ChatClient as a shortcut to
-				// OpenAiChatOptions.builder().withModel(modelName).build()
 				.options(OpenAiChatOptions.builder().withModel(modelName).build())
 				.user(u -> u.text("Explain what do you see on this picture?").media(MimeTypeUtils.IMAGE_PNG, url))
 				.call()

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/RequestResponseAdvisor.java
Patch:
@@ -36,7 +36,7 @@ public interface RequestResponseAdvisor {
 
 	/**
 	 * @param request the {@link AdvisedRequest} data to be advised. Represents the row
-	 * {@link ChatClientRequest} data before sealed into a {@link Prompt}.
+	 * {@link ChatClient.ChatClientRequestSpec} data before sealed into a {@link Prompt}.
 	 * @param context the shared data between the advisors in the chain. It is shared
 	 * between all request and response advising points of all advisors in the chain.
 	 * @return the advised {@link AdvisedRequest}.

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/chroma/ChromaDockerComposeConnectionDetailsFactory.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Eddú Meléndez
  */
-class ChromaDockerComposeConnectionDetailsFactory
+public class ChromaDockerComposeConnectionDetailsFactory
 		extends DockerComposeConnectionDetailsFactory<ChromaConnectionDetails> {
 
 	private static final String[] CHROMA_IMAGE_NAMES = { "chromadb/chroma", "ghcr.io/chroma-core/chroma" };

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/ollama/OllamaDockerComposeConnectionDetailsFactory.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Eddú Meléndez
  */
-class OllamaDockerComposeConnectionDetailsFactory
+public class OllamaDockerComposeConnectionDetailsFactory
 		extends DockerComposeConnectionDetailsFactory<OllamaConnectionDetails> {
 
 	private static final int OLLAMA_PORT = 11434;

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/qdrant/QdrantDockerComposeConnectionDetailsFactory.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Eddú Meléndez
  */
-class QdrantDockerComposeConnectionDetailsFactory
+public class QdrantDockerComposeConnectionDetailsFactory
 		extends DockerComposeConnectionDetailsFactory<QdrantConnectionDetails> {
 
 	private static final int QDRANT_GRPC_PORT = 6334;

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/redis/RedisDockerComposeConnectionDetailsFactory.java
Patch:
@@ -23,7 +23,8 @@
 /**
  * @author Eddú Meléndez
  */
-class RedisDockerComposeConnectionDetailsFactory extends DockerComposeConnectionDetailsFactory<RedisConnectionDetails> {
+public class RedisDockerComposeConnectionDetailsFactory
+		extends DockerComposeConnectionDetailsFactory<RedisConnectionDetails> {
 
 	private static final int REDIS_PORT = 6379;
 

File: spring-ai-spring-boot-docker-compose/src/main/java/org/springframework/ai/docker/compose/service/connection/weaviate/WeaviateDockerComposeConnectionDetailsFactory.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Eddú Meléndez
  */
-class WeaviateDockerComposeConnectionDetailsFactory
+public class WeaviateDockerComposeConnectionDetailsFactory
 		extends DockerComposeConnectionDetailsFactory<WeaviateConnectionDetails> {
 
 	private static final String[] WEAVIATE_IMAGE_NAMES = { "semitechnologies/weaviate",

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/RequestResponseAdvisor.java
Patch:
@@ -20,7 +20,6 @@
 
 import reactor.core.publisher.Flux;
 
-import org.springframework.ai.chat.client.ChatClient.ChatClientRequest;
 import org.springframework.ai.chat.model.ChatResponse;
 import org.springframework.ai.chat.model.ChatModel;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -31,7 +30,7 @@
  * chain of advisors with chared execution context.
  *
  * @author Christian Tzolov
- * @since 1.0.0 M1
+ * @since 1.0.0
  */
 public interface RequestResponseAdvisor {
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/AdvisedRequest.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.ai.model.function.FunctionCallback;
 
 /**
- * The data of the chat client request that can be modifed before the execution of the
+ * The data of the chat client request that can be modified before the execution of the
  * ChatClient's call method
  *
  * @author Christian Tzolov

File: vector-stores/spring-ai-gemfire-store/src/main/java/org/springframework/ai/vectorstore/GemFireVectorStore.java
Patch:
@@ -122,7 +122,7 @@ public Builder withHost(String host) {
 			}
 
 			public Builder withPort(int port) {
-				Assert.isTrue(port > 0, "port must be postive");
+				Assert.isTrue(port > 0, "port must be positive");
 				this.port = port;
 				return this;
 			}

File: vector-stores/spring-ai-weaviate-store/src/main/java/org/springframework/ai/vectorstore/WeaviateVectorStore.java
Patch:
@@ -115,7 +115,7 @@ public class WeaviateVectorStore implements VectorStore, InitializingBean {
 	 * Used to serialize/deserialize the document metadata when stored/retrieved from the
 	 * weaviate vector store.
 	 */
-	private final ObjectMapper objetMapper = new ObjectMapper();
+	private final ObjectMapper objectMapper = new ObjectMapper();
 
 	/**
 	 * Configuration class for the WeaviateVectorStore.
@@ -370,7 +370,7 @@ private WeaviateObject toWeaviateObject(Document document) {
 		Map<String, Object> fields = new HashMap<>();
 		fields.put(CONTENT_FIELD_NAME, document.getContent());
 		try {
-			String metadataString = this.objetMapper.writeValueAsString(document.getMetadata());
+			String metadataString = this.objectMapper.writeValueAsString(document.getMetadata());
 			fields.put(METADATA_FIELD_NAME, metadataString);
 		}
 		catch (JsonProcessingException e) {
@@ -501,7 +501,7 @@ private Document toDocument(Map<String, ?> item) {
 		try {
 			String metadataJson = (String) item.get(METADATA_FIELD_NAME);
 			if (StringUtils.hasText(metadataJson)) {
-				metadata.putAll(this.objetMapper.readValue(metadataJson, Map.class));
+				metadata.putAll(this.objectMapper.readValue(metadataJson, Map.class));
 			}
 		}
 		catch (Exception e) {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/ChatClient.java
Patch:
@@ -92,7 +92,7 @@ interface PromptSpec<T> {
 
 		T params(Map<String, Object> p);
 
-		T param(String k, String v);
+		T param(String k, Object v);
 
 	}
 
@@ -126,7 +126,7 @@ public T text(Resource text) {
 		}
 
 		@Override
-		public T param(String k, String v) {
+		public T param(String k, Object v) {
 			this.params.put(k, v);
 			return self();
 		}

File: spring-ai-core/src/main/java/org/springframework/ai/chat/client/ChatClient.java
Patch:
@@ -742,7 +742,7 @@ class Builder {
 					List.of(), List.of(), null, List.of(), Map.of());
 		}
 
-		public Builder defaultAdvisors(RequestResponseAdvisor advisor) {
+		public Builder defaultAdvisors(RequestResponseAdvisor... advisor) {
 			this.defaultRequest.advisors(advisor);
 			return this;
 		}

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatModel.java
Patch:
@@ -183,8 +183,8 @@ public Flux<ChatResponse> stream(Prompt prompt) {
 					isFunctionCall.set(false);
 					return true;
 				}
-				return false;
-			}, false)
+				return !isFunctionCall.get();
+			})
 			.concatMapIterable(window -> {
 				final var reduce = window.reduce(MergeUtils.emptyChatCompletions(), MergeUtils::mergeChatCompletions);
 				return List.of(reduce);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationIT.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.springframework.ai.azure.openai.AzureOpenAiChatModel;
@@ -44,7 +43,6 @@
  * @author Christian Tzolov
  * @since 0.8.0
  */
-@Disabled("streaming response on mark p machine is not returning a list of size > 1")
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
 public class AzureOpenAiAutoConfigurationIT {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -35,7 +35,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Description;
-import org.springframework.util.StringUtils;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.ai.autoconfigure.azure.tool.DeploymentNameUtil.getDeploymentName;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -35,8 +35,10 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Description;
+import org.springframework.util.StringUtils;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.springframework.ai.autoconfigure.azure.tool.DeploymentNameUtil.getDeploymentName;
 
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
@@ -54,7 +56,7 @@ class FunctionCallWithFunctionBeanIT {
 
 	@Test
 	void functionCallTest() {
-		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options..deployment-name=gpt-4-0125-preview")
+		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options..deployment-name=" + getDeploymentName())
 			.run(context -> {
 
 				ChatModel chatModel = context.getBean(AzureOpenAiChatModel.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.context.annotation.Configuration;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.springframework.ai.autoconfigure.azure.tool.DeploymentNameUtil.getDeploymentName;
 
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
@@ -53,7 +54,7 @@ public class FunctionCallWithFunctionWrapperIT {
 
 	@Test
 	void functionCallTest() {
-		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.deployment-name=gpt-4-0125-preview")
+		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.deployment-name=" + getDeploymentName())
 			.run(context -> {
 
 				AzureOpenAiChatModel chatModel = context.getBean(AzureOpenAiChatModel.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.springframework.ai.autoconfigure.azure.tool.DeploymentNameUtil.getDeploymentName;
 
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_API_KEY", matches = ".+")
 @EnabledIfEnvironmentVariable(named = "AZURE_OPENAI_ENDPOINT", matches = ".+")
@@ -49,7 +50,7 @@ public class FunctionCallWithPromptFunctionIT {
 
 	@Test
 	void functionCallTest() {
-		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.deployment-name=gpt-4-0125-preview")
+		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.deployment-name=" + getDeploymentName())
 			.run(context -> {
 
 				AzureOpenAiChatModel chatModel = context.getBean(AzureOpenAiChatModel.class);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/CommonVectorStoreProperties.java
Patch:
@@ -5,7 +5,7 @@
  */
 public class CommonVectorStoreProperties {
 
-	private boolean initializeSchema = false;
+	private boolean initializeSchema = true;
 
 	public boolean isInitializeSchema() {
 		return initializeSchema;

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaEmbeddingModel.java
Patch:
@@ -105,13 +105,13 @@ public EmbeddingResponse call(org.springframework.ai.embedding.EmbeddingRequest
 		List<List<Double>> embeddingList = new ArrayList<>();
 		for (String inputContent : request.getInstructions()) {
 
-			var ollamaEmbeddingRequest = ollamaEmbeddingRequest(inputContent, request.getOptions());
+			EmbeddingRequest ollamaEmbeddingRequest = ollamaEmbeddingRequest(inputContent, request.getOptions());
 
 			OllamaApi.EmbeddingResponse response = this.ollamaApi.embeddings(ollamaEmbeddingRequest);
 
 			embeddingList.add(response.embedding());
 		}
-		var indexCounter = new AtomicInteger(0);
+		AtomicInteger indexCounter = new AtomicInteger(0);
 
 		List<Embedding> embeddings = embeddingList.stream()
 			.map(e -> new Embedding(e, indexCounter.getAndIncrement()))

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiRetryTests.java
Patch:
@@ -78,7 +78,7 @@
 @ExtendWith(MockitoExtension.class)
 public class OpenAiRetryTests {
 
-	private class TestRetryListener implements RetryListener {
+	private static class TestRetryListener implements RetryListener {
 
 		int onErrorRetryCount = 0;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/service/ChatMemoryLongTermSystemPromptIT.java
Patch:
@@ -89,7 +89,7 @@ public VectorStore qdrantVectorStore(EmbeddingModel embeddingModel) {
 			QdrantClient qdrantClient = new QdrantClient(QdrantGrpcClient
 				.newBuilder(qdrantContainer.getHost(), qdrantContainer.getMappedPort(QDRANT_GRPC_PORT), false)
 				.build());
-			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel);
+			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel, true);
 		}
 
 		@Bean

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/service/LongShortTermChatMemoryWithRagIT.java
Patch:
@@ -177,7 +177,7 @@ public VectorStore qdrantVectorStore(EmbeddingModel embeddingModel) {
 			QdrantClient qdrantClient = new QdrantClient(QdrantGrpcClient
 				.newBuilder(qdrantContainer.getHost(), qdrantContainer.getMappedPort(QDRANT_GRPC_PORT), false)
 				.build());
-			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel);
+			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel, true);
 		}
 
 		@Bean

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/service/OpenAiPromptTransformingChatServiceIT.java
Patch:
@@ -159,7 +159,7 @@ public VectorStore qdrantVectorStore(EmbeddingModel embeddingModel) {
 			QdrantClient qdrantClient = new QdrantClient(QdrantGrpcClient
 				.newBuilder(qdrantContainer.getHost(), qdrantContainer.getMappedPort(QDRANT_GRPC_PORT), false)
 				.build());
-			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel);
+			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel, true);
 		}
 
 		@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreAutoConfiguration.java
Patch:
@@ -50,7 +50,7 @@ public SearchIndexClient searchIndexClient(AzureVectorStoreProperties properties
 	public AzureVectorStore vectorStore(SearchIndexClient searchIndexClient, EmbeddingModel embeddingModel,
 			AzureVectorStoreProperties properties) {
 
-		var vectorStore = new AzureVectorStore(searchIndexClient, embeddingModel);
+		var vectorStore = new AzureVectorStore(searchIndexClient, embeddingModel, properties.isInitializeSchema());
 
 		vectorStore.setIndexName(properties.getIndexName());
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreProperties.java
Patch:
@@ -15,14 +15,15 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.azure;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.azure.AzureVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Christian Tzolov
  */
 @ConfigurationProperties(AzureVectorStoreProperties.CONFIG_PREFIX)
-public class AzureVectorStoreProperties {
+public class AzureVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.azure";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfiguration.java
Patch:
@@ -72,7 +72,8 @@ else if (StringUtils.hasText(apiProperties.getUsername()) && StringUtils.hasText
 	@ConditionalOnMissingBean
 	public ChromaVectorStore vectorStore(EmbeddingModel embeddingModel, ChromaApi chromaApi,
 			ChromaVectorStoreProperties storeProperties) {
-		return new ChromaVectorStore(embeddingModel, chromaApi, storeProperties.getCollectionName());
+		return new ChromaVectorStore(embeddingModel, chromaApi, storeProperties.getCollectionName(),
+				storeProperties.isInitializeSchema());
 	}
 
 	private static class PropertiesChromaConnectionDetails implements ChromaConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreProperties.java
Patch:
@@ -15,14 +15,15 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.chroma;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Christian Tzolov
  */
 @ConfigurationProperties(ChromaVectorStoreProperties.CONFIG_PREFIX)
-public class ChromaVectorStoreProperties {
+public class ChromaVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.chroma.store";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreAutoConfiguration.java
Patch:
@@ -31,6 +31,7 @@
 /**
  * @author Eddú Meléndez
  * @author Wei Jiang
+ * @author Josh Long
  * @since 1.0.0
  */
 
@@ -58,7 +59,8 @@ ElasticsearchVectorStore vectorStore(ElasticsearchVectorStoreProperties properti
 			elasticsearchVectorStoreOptions.setSimilarity(properties.getSimilarity());
 		}
 
-		return new ElasticsearchVectorStore(elasticsearchVectorStoreOptions, restClient, embeddingModel);
+		return new ElasticsearchVectorStore(elasticsearchVectorStoreOptions, restClient, embeddingModel,
+				properties.isInitializeSchema());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/elasticsearch/ElasticsearchVectorStoreProperties.java
Patch:
@@ -15,15 +15,17 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.elasticsearch;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Eddú Meléndez
  * @author Wei Jiang
+ * @author Josh Long
  * @since 1.0.0
  */
 @ConfigurationProperties(prefix = "spring.ai.vectorstore.elasticsearch")
-public class ElasticsearchVectorStoreProperties {
+public class ElasticsearchVectorStoreProperties extends CommonVectorStoreProperties {
 
 	/**
 	 * The name of the index to store the vectors.

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfiguration.java
Patch:
@@ -62,7 +62,7 @@ public MilvusVectorStore vectorStore(MilvusServiceClient milvusClient, Embedding
 			.withEmbeddingDimension(properties.getEmbeddingDimension())
 			.build();
 
-		return new MilvusVectorStore(milvusClient, embeddingModel, config);
+		return new MilvusVectorStore(milvusClient, embeddingModel, config, properties.isInitializeSchema());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.milvus;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.MilvusVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.util.Assert;
@@ -23,7 +24,7 @@
  * @author Christian Tzolov
  */
 @ConfigurationProperties(MilvusVectorStoreProperties.CONFIG_PREFIX)
-public class MilvusVectorStoreProperties {
+public class MilvusVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.milvus";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreAutoConfiguration.java
Patch:
@@ -54,7 +54,7 @@ MongoDBAtlasVectorStore vectorStore(MongoTemplate mongoTemplate, EmbeddingModel
 		}
 		MongoDBAtlasVectorStore.MongoDBVectorStoreConfig config = builder.build();
 
-		return new MongoDBAtlasVectorStore(mongoTemplate, embeddingModel, config);
+		return new MongoDBAtlasVectorStore(mongoTemplate, embeddingModel, config, properties.isInitializeSchema());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/mongo/MongoDBAtlasVectorStoreProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.mongo;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
@@ -23,7 +24,7 @@
  * @since 1.0.0
  */
 @ConfigurationProperties(MongoDBAtlasVectorStoreProperties.CONFIG_PREFIX)
-public class MongoDBAtlasVectorStoreProperties {
+public class MongoDBAtlasVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.mongodb";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.java
Patch:
@@ -28,6 +28,7 @@
 
 /**
  * @author Jingzhou Ou
+ * @author Josh Long
  */
 @AutoConfiguration(after = Neo4jAutoConfiguration.class)
 @ConditionalOnClass({ Neo4jVectorStore.class, EmbeddingModel.class, Driver.class })
@@ -49,7 +50,7 @@ public Neo4jVectorStore vectorStore(Driver driver, EmbeddingModel embeddingModel
 			.withConstraintName(properties.getConstraintName())
 			.build();
 
-		return new Neo4jVectorStore(driver, embeddingModel, config);
+		return new Neo4jVectorStore(driver, embeddingModel, config, properties.isInitializeSchema());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreProperties.java
Patch:
@@ -15,14 +15,16 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.neo4j;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.Neo4jVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Jingzhou Ou
+ * @author Josh Long
  */
 @ConfigurationProperties(Neo4jVectorStoreProperties.CONFIG_PREFIX)
-public class Neo4jVectorStoreProperties {
+public class Neo4jVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.neo4j";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.pgvector;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.PgVectorStore;
 import org.springframework.ai.vectorstore.PgVectorStore.PgDistanceType;
 import org.springframework.ai.vectorstore.PgVectorStore.PgIndexType;
@@ -24,7 +25,7 @@
  * @author Christian Tzolov
  */
 @ConfigurationProperties(PgVectorStoreProperties.CONFIG_PREFIX)
-public class PgVectorStoreProperties {
+public class PgVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.pgvector";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreAutoConfiguration.java
Patch:
@@ -58,7 +58,8 @@ public QdrantClient qdrantClient(QdrantVectorStoreProperties properties,
 	@ConditionalOnMissingBean
 	public QdrantVectorStore vectorStore(EmbeddingModel embeddingModel, QdrantVectorStoreProperties properties,
 			QdrantClient qdrantClient) {
-		return new QdrantVectorStore(qdrantClient, properties.getCollectionName(), embeddingModel);
+		return new QdrantVectorStore(qdrantClient, properties.getCollectionName(), embeddingModel,
+				properties.isInitializeSchema());
 	}
 
 	static class PropertiesQdrantConnectionDetails implements QdrantConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreProperties.java
Patch:
@@ -15,15 +15,17 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.qdrant;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Anush Shetty
+ * @author Josh Long
  * @since 0.8.1
  */
 @ConfigurationProperties(QdrantVectorStoreProperties.CONFIG_PREFIX)
-public class QdrantVectorStoreProperties {
+public class QdrantVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.qdrant";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfiguration.java
Patch:
@@ -50,7 +50,7 @@ public RedisVectorStore vectorStore(EmbeddingModel embeddingModel, RedisVectorSt
 			.withPrefix(properties.getPrefix())
 			.build();
 
-		return new RedisVectorStore(config, embeddingModel);
+		return new RedisVectorStore(config, embeddingModel, properties.isInitializeSchema());
 	}
 
 	private static class PropertiesRedisConnectionDetails implements RedisConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreProperties.java
Patch:
@@ -15,13 +15,14 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.redis;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
  * @author Julien Ruaux
  */
 @ConfigurationProperties(RedisVectorStoreProperties.CONFIG_PREFIX)
-public class RedisVectorStoreProperties {
+public class RedisVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.redis";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfiguration.java
Patch:
@@ -72,7 +72,8 @@ public WeaviateVectorStore vectorStore(EmbeddingModel embeddingModel, WeaviateCl
 				.toList())
 			.withConsistencyLevel(properties.getConsistencyLevel());
 
-		return new WeaviateVectorStore(configBuilder.build(), embeddingModel, weaviateClient);
+		return new WeaviateVectorStore(configBuilder.build(), embeddingModel, weaviateClient,
+				properties.isInitializeSchema());
 	}
 
 	static class PropertiesWeaviateConnectionDetails implements WeaviateConnectionDetails {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreProperties.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.Map;
 
+import org.springframework.ai.autoconfigure.CommonVectorStoreProperties;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.ConsistentLevel;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;
@@ -26,7 +27,7 @@
  * @author Christian Tzolov
  */
 @ConfigurationProperties(WeaviateVectorStoreProperties.CONFIG_PREFIX)
-public class WeaviateVectorStoreProperties {
+public class WeaviateVectorStoreProperties extends CommonVectorStoreProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.vectorstore.weaviate";
 

File: vector-stores/spring-ai-azure-store/src/test/java/org/springframework/ai/vectorstore/azure/AzureVectorStoreIT.java
Patch:
@@ -305,7 +305,7 @@ public SearchIndexClient searchIndexClient() {
 		public VectorStore vectorStore(SearchIndexClient searchIndexClient, EmbeddingModel embeddingModel) {
 			var filterableMetaFields = List.of(MetadataField.text("country"), MetadataField.int64("year"),
 					MetadataField.date("activationDate"));
-			return new AzureVectorStore(searchIndexClient, embeddingModel, filterableMetaFields);
+			return new AzureVectorStore(searchIndexClient, embeddingModel, true, filterableMetaFields);
 		}
 
 		@Bean

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/vectorstore/BasicAuthChromaWhereIT.java
Patch:
@@ -108,7 +108,7 @@ public ChromaApi chromaApi(RestTemplate restTemplate) {
 
 		@Bean
 		public VectorStore chromaVectorStore(EmbeddingModel embeddingModel, ChromaApi chromaApi) {
-			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection");
+			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection", true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -213,7 +213,7 @@ public ChromaApi chromaApi(RestTemplate restTemplate) {
 
 		@Bean
 		public VectorStore chromaVectorStore(EmbeddingModel embeddingModel, ChromaApi chromaApi) {
-			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection");
+			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection", true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-chroma-store/src/test/java/org/springframework/ai/vectorstore/TokenSecuredChromaWhereIT.java
Patch:
@@ -140,7 +140,7 @@ public ChromaApi chromaApi(RestTemplate restTemplate) {
 
 		@Bean
 		public VectorStore chromaVectorStore(EmbeddingModel embeddingModel, ChromaApi chromaApi) {
-			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection");
+			return new ChromaVectorStore(embeddingModel, chromaApi, "TestCollection", true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-elasticsearch-store/src/test/java/org/springframework/ai/vectorstore/ElasticsearchVectorStoreIT.java
Patch:
@@ -363,7 +363,7 @@ public static class TestApplication {
 		public ElasticsearchVectorStore vectorStore(EmbeddingModel embeddingModel) {
 			return new ElasticsearchVectorStore(
 					RestClient.builder(HttpHost.create(elasticsearchContainer.getHttpHostAddress())).build(),
-					embeddingModel);
+					embeddingModel, true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusVectorStoreIT.java
Patch:
@@ -265,7 +265,7 @@ public VectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingModel
 				.withIndexType(IndexType.IVF_FLAT)
 				.withMetricType(metricType)
 				.build();
-			return new MilvusVectorStore(milvusClient, embeddingModel, config);
+			return new MilvusVectorStore(milvusClient, embeddingModel, config, true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-mongodb-atlas-store/src/test/java/org/springframework/ai/vectorstore/MongoDBAtlasVectorStoreIT.java
Patch:
@@ -196,7 +196,8 @@ public VectorStore vectorStore(MongoTemplate mongoTemplate, EmbeddingModel embed
 			return new MongoDBAtlasVectorStore(mongoTemplate, embeddingModel,
 					MongoDBAtlasVectorStore.MongoDBVectorStoreConfig.builder()
 						.withMetadataFieldsToFilter(List.of("country", "year"))
-						.build());
+						.build(),
+					true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/Neo4jVectorStoreIT.java
Patch:
@@ -295,8 +295,8 @@ public static class TestApplication {
 		@Bean
 		public VectorStore vectorStore(Driver driver, EmbeddingModel embeddingModel) {
 
-			return new Neo4jVectorStore(driver, embeddingModel,
-					Neo4jVectorStore.Neo4jVectorStoreConfig.defaultConfig());
+			return new Neo4jVectorStore(driver, embeddingModel, Neo4jVectorStore.Neo4jVectorStoreConfig.defaultConfig(),
+					true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorStoreIT.java
Patch:
@@ -308,7 +308,7 @@ public static class TestApplication {
 		@Bean
 		public VectorStore vectorStore(JdbcTemplate jdbcTemplate, EmbeddingModel embeddingModel) {
 			return new PgVectorStore(jdbcTemplate, embeddingModel, PgVectorStore.INVALID_EMBEDDING_DIMENSION,
-					distanceType, true, PgIndexType.HNSW);
+					distanceType, true, PgIndexType.HNSW, true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-qdrant-store/src/test/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStoreIT.java
Patch:
@@ -48,6 +48,7 @@
 
 /**
  * @author Anush Shetty
+ * @author Josh Long
  * @since 0.8.1
  */
 @Testcontainers
@@ -251,7 +252,7 @@ public QdrantClient qdrantClient() {
 
 		@Bean
 		public VectorStore qdrantVectorStore(EmbeddingModel embeddingModel, QdrantClient qdrantClient) {
-			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel);
+			return new QdrantVectorStore(qdrantClient, COLLECTION_NAME, embeddingModel, true);
 		}
 
 		@Bean

File: vector-stores/spring-ai-redis-store/src/test/java/org/springframework/ai/vectorstore/RedisVectorStoreIT.java
Patch:
@@ -250,7 +250,7 @@ public RedisVectorStore vectorStore(EmbeddingModel embeddingModel) {
 				.withURI(redisContainer.getRedisURI())
 				.withMetadataFields(MetadataField.tag("meta1"), MetadataField.tag("meta2"),
 						MetadataField.tag("country"), MetadataField.numeric("year"))
-				.build(), embeddingModel);
+				.build(), embeddingModel, true);
 		}
 
 		@Bean

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiImageResponseMetadata.java
Patch:
@@ -35,7 +35,7 @@ protected OpenAiImageResponseMetadata(Long created) {
 	}
 
 	@Override
-	public Long created() {
+	public Long getCreated() {
 		return this.created;
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageModelIT.java
Patch:
@@ -49,7 +49,7 @@ void imageAsUrlTest() {
 		assertThat(imageResponse.getResults()).hasSize(1);
 
 		ImageResponseMetadata imageResponseMetadata = imageResponse.getMetadata();
-		assertThat(imageResponseMetadata.created()).isPositive();
+		assertThat(imageResponseMetadata.getCreated()).isPositive();
 
 		var generation = imageResponse.getResult();
 		Image image = generation.getOutput();

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageModelWithImageResponseMetadataTests.java
Patch:
@@ -81,7 +81,7 @@ void aiResponseContainsImageResponseMetadata() {
 
 		assertThat(imageResponseMetadata).isNotNull();
 
-		Long created = imageResponseMetadata.created();
+		Long created = imageResponseMetadata.getCreated();
 
 		assertThat(created).isNotNull();
 		assertThat(created).isEqualTo(1589478378);

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/image/ZhiPuAiImageModelIT.java
Patch:
@@ -51,7 +51,7 @@ void imageAsUrlTest() {
 		assertThat(imageResponse.getResults()).hasSize(1);
 
 		ImageResponseMetadata imageResponseMetadata = imageResponse.getMetadata();
-		assertThat(imageResponseMetadata.created()).isPositive();
+		assertThat(imageResponseMetadata.getCreated()).isPositive();
 
 		var generation = imageResponse.getResult();
 		Image image = generation.getOutput();

File: spring-ai-core/src/main/java/org/springframework/ai/image/ImageResponseMetadata.java
Patch:
@@ -22,7 +22,7 @@ public interface ImageResponseMetadata extends ResponseMetadata {
 	ImageResponseMetadata NULL = new ImageResponseMetadata() {
 	};
 
-	default Long created() {
+	default Long getCreated() {
 		return System.currentTimeMillis();
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatModelWithChatResponseMetadataTests.java
Patch:
@@ -39,6 +39,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.test.web.client.MockRestServiceServer;
 import org.springframework.web.client.RestClient;
+import org.springframework.web.reactive.function.client.WebClient;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.test.web.client.match.MockRestRequestMatchers.header;
@@ -166,8 +167,8 @@ private String getJson() {
 	static class Config {
 
 		@Bean
-		public OpenAiApi chatCompletionApi(RestClient.Builder builder) {
-			return new OpenAiApi("", TEST_API_KEY, builder);
+		public OpenAiApi chatCompletionApi(RestClient.Builder builder, WebClient.Builder webClientBuilder) {
+			return new OpenAiApi("", TEST_API_KEY, builder, webClientBuilder);
 		}
 
 		@Bean

File: spring-ai-core/src/test/java/org/springframework/ai/prompt/PromptTemplateTest.java
Patch:
@@ -49,7 +49,7 @@ public void testRenderWithList() {
 
 		PromptTemplate unfilledPromptTemplate = new PromptTemplate(templateString);
 		assertThatExceptionOfType(IllegalStateException.class).isThrownBy(unfilledPromptTemplate::render)
-			.withMessage("All template variables were not replaced. Missing variable names are [items]");
+			.withMessage("Not all template variables were replaced. Missing variable names are [items]");
 	}
 
 	@Test

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicTestConfiguration.java
Patch:
@@ -38,9 +38,9 @@ private String getApiKey() {
 	}
 
 	@Bean
-	public AnthropicChatClient openAiChatClient(AnthropicApi api) {
-		AnthropicChatClient anthropicChatClient = new AnthropicChatClient(api);
-		return anthropicChatClient;
+	public AnthropicChatModel openAiChatModel(AnthropicApi api) {
+		AnthropicChatModel anthropicChatModel = new AnthropicChatModel(api);
+		return anthropicChatModel;
 	}
 
 }

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/ChatCompletionRequestTests.java
Patch:
@@ -30,7 +30,7 @@ public class ChatCompletionRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new AnthropicChatClient(new AnthropicApi("TEST"),
+		var client = new AnthropicChatModel(new AnthropicApi("TEST"),
 				AnthropicChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6f).build());
 
 		var request = client.createRequest(new Prompt("Test message content"), false);

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureChatCompletionsOptionsTests.java
Patch:
@@ -53,7 +53,7 @@ public void createRequestWithChatOptions() {
 			.withUser("user")
 			.build();
 
-		var client = new AzureOpenAiChatClient(mockClient, defaultOptions);
+		var client = new AzureOpenAiChatModel(mockClient, defaultOptions);
 
 		var requestOptions = client.toAzureChatCompletionsOptions(new Prompt("Test message content"));
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureEmbeddingsOptionsTests.java
Patch:
@@ -36,7 +36,7 @@ public class AzureEmbeddingsOptionsTests {
 	public void createRequestWithChatOptions() {
 
 		OpenAIClient mockClient = Mockito.mock(OpenAIClient.class);
-		var client = new AzureOpenAiEmbeddingClient(mockClient, MetadataMode.EMBED,
+		var client = new AzureOpenAiEmbeddingModel(mockClient, MetadataMode.EMBED,
 				AzureOpenAiEmbeddingOptions.builder()
 					.withDeploymentName("DEFAULT_MODEL")
 					.withUser("USER_TEST")

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/MockAzureOpenAiTestConfiguration.java
Patch:
@@ -59,8 +59,8 @@ OpenAIClient microsoftAzureOpenAiClient(MockWebServer webServer) {
 	}
 
 	@Bean
-	AzureOpenAiChatClient azureOpenAiChatClient(OpenAIClient microsoftAzureOpenAiClient) {
-		return new AzureOpenAiChatClient(microsoftAzureOpenAiClient);
+	AzureOpenAiChatModel azureOpenAiChatModel(OpenAIClient microsoftAzureOpenAiClient) {
+		return new AzureOpenAiChatModel(microsoftAzureOpenAiClient);
 	}
 
 }

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingOptions.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 
-import org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient.InputType;
+import org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingModel.InputType;
 import org.springframework.ai.embedding.EmbeddingOptions;
 import org.springframework.util.Assert;
 

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicCreateRequestTests.java
Patch:
@@ -38,7 +38,7 @@ public class BedrockAnthropicCreateRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new BedrockAnthropicChatClient(anthropicChatApi,
+		var client = new BedrockAnthropicChatModel(anthropicChatApi,
 				AnthropicChatOptions.builder()
 					.withTemperature(66.6f)
 					.withTopK(66)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3CreateRequestTests.java
Patch:
@@ -37,7 +37,7 @@ public class BedrockAnthropic3CreateRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new BedrockAnthropic3ChatClient(anthropicChatApi,
+		var client = new BedrockAnthropic3ChatModel(anthropicChatApi,
 				Anthropic3ChatOptions.builder()
 					.withTemperature(66.6f)
 					.withTopK(66)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatCreateRequestTests.java
Patch:
@@ -45,7 +45,7 @@ public class BedrockCohereChatCreateRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new BedrockCohereChatClient(chatApi,
+		var client = new BedrockCohereChatModel(chatApi,
 				BedrockCohereChatOptions.builder()
 					.withTemperature(66.6f)
 					.withTopK(66)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama/BedrockLlamaCreateRequestTests.java
Patch:
@@ -45,7 +45,7 @@ public class BedrockLlamaCreateRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new BedrockLlamaChatClient(api,
+		var client = new BedrockLlamaChatModel(api,
 				BedrockLlamaChatOptions.builder().withTemperature(66.6f).withMaxGenLen(666).withTopP(0.66f).build());
 
 		var request = client.createRequest(new Prompt("Test message content"));

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanChatCreateRequestTests.java
Patch:
@@ -41,7 +41,7 @@ public class BedrockTitanChatCreateRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new BedrockTitanChatClient(api,
+		var client = new BedrockTitanChatModel(api,
 				BedrockTitanChatOptions.builder()
 					.withTemperature(66.6f)
 					.withTopP(0.66f)

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/HuggingfaceTestConfiguration.java
Patch:
@@ -23,17 +23,17 @@
 public class HuggingfaceTestConfiguration {
 
 	@Bean
-	public HuggingfaceChatClient huggingfaceChatClient() {
+	public HuggingfaceChatModel huggingfaceChatModel() {
 		String apiKey = System.getenv("HUGGINGFACE_API_KEY");
 		if (!StringUtils.hasText(apiKey)) {
 			throw new IllegalArgumentException(
 					"You must provide an API key.  Put it in an environment variable under the name HUGGINGFACE_API_KEY");
 		}
 		// Created aws-mistral-7b-instruct-v0-1-805 via
 		// https://ui.endpoints.huggingface.co/
-		HuggingfaceChatClient huggingfaceChatClient = new HuggingfaceChatClient(apiKey,
+		HuggingfaceChatModel huggingfaceChatModel = new HuggingfaceChatModel(apiKey,
 				"https://f6hg7b3cvlmntp5i.us-east-1.aws.endpoints.huggingface.cloud");
-		return huggingfaceChatClient;
+		return huggingfaceChatModel;
 	}
 
 }

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/client/ClientIT.java
Patch:
@@ -20,7 +20,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.chat.ChatResponse;
-import org.springframework.ai.huggingface.HuggingfaceChatClient;
+import org.springframework.ai.huggingface.HuggingfaceChatModel;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
@@ -33,7 +33,7 @@
 public class ClientIT {
 
 	@Autowired
-	protected HuggingfaceChatClient huggingfaceChatClient;
+	protected HuggingfaceChatModel huggingfaceChatModel;
 
 	@Test
 	void helloWorldCompletion() {
@@ -46,7 +46,7 @@ void helloWorldCompletion() {
 				[/INST]
 				 """;
 		Prompt prompt = new Prompt(mistral7bInstruct);
-		ChatResponse chatResponse = huggingfaceChatClient.call(prompt);
+		ChatResponse chatResponse = huggingfaceChatModel.call(prompt);
 		assertThat(chatResponse.getResult().getOutput().getContent()).isNotEmpty();
 		String expectedResponse = """
 				```json

File: models/spring-ai-minimax/src/test/java/org/springframework/ai/minimax/ChatCompletionRequestTests.java
Patch:
@@ -33,7 +33,7 @@ public class ChatCompletionRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new MiniMaxChatClient(new MiniMaxApi("TEST"),
+		var client = new MiniMaxChatModel(new MiniMaxApi("TEST"),
 				MiniMaxChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6f).build());
 
 		var request = client.createRequest(new Prompt("Test message content"), false);
@@ -59,7 +59,7 @@ public void promptOptionsTools() {
 
 		final String TOOL_FUNCTION_NAME = "CurrentWeather";
 
-		var client = new MiniMaxChatClient(new MiniMaxApi("TEST"),
+		var client = new MiniMaxChatModel(new MiniMaxApi("TEST"),
 				MiniMaxChatOptions.builder().withModel("DEFAULT_MODEL").build());
 
 		var request = client.createRequest(new Prompt("Test message content",
@@ -89,7 +89,7 @@ public void defaultOptionsTools() {
 
 		final String TOOL_FUNCTION_NAME = "CurrentWeather";
 
-		var client = new MiniMaxChatClient(new MiniMaxApi("TEST"),
+		var client = new MiniMaxChatModel(new MiniMaxApi("TEST"),
 				MiniMaxChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatCompletionRequestTest.java
Patch:
@@ -32,12 +32,12 @@
 @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+")
 public class MistralAiChatCompletionRequestTest {
 
-	MistralAiChatClient chatClient = new MistralAiChatClient(new MistralAiApi("test"));
+	MistralAiChatModel chatModel = new MistralAiChatModel(new MistralAiApi("test"));
 
 	@Test
 	void chatCompletionDefaultRequestTest() {
 
-		var request = chatClient.createRequest(new Prompt("test content"), false);
+		var request = chatModel.createRequest(new Prompt("test content"), false);
 
 		assertThat(request.messages()).hasSize(1);
 		assertThat(request.topP()).isEqualTo(1);
@@ -52,7 +52,7 @@ void chatCompletionRequestWithOptionsTest() {
 
 		var options = MistralAiChatOptions.builder().withTemperature(0.5f).withTopP(0.8f).build();
 
-		var request = chatClient.createRequest(new Prompt("test content", options), true);
+		var request = chatModel.createRequest(new Prompt("test content", options), true);
 
 		assertThat(request.messages().size()).isEqualTo(1);
 		assertThat(request.topP()).isEqualTo(0.8f);

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingRequestTests.java
Patch:
@@ -28,13 +28,13 @@
  */
 public class OllamaEmbeddingRequestTests {
 
-	OllamaEmbeddingClient client = new OllamaEmbeddingClient(new OllamaApi()).withDefaultOptions(
+	OllamaEmbeddingModel chatModel = new OllamaEmbeddingModel(new OllamaApi()).withDefaultOptions(
 			new OllamaOptions().withModel("DEFAULT_MODEL").withMainGPU(11).withUseMMap(true).withNumGPU(1));
 
 	@Test
 	public void ollamaEmbeddingRequestDefaultOptions() {
 
-		var request = client.ollamaEmbeddingRequest("Hello", null);
+		var request = chatModel.ollamaEmbeddingRequest("Hello", null);
 
 		assertThat(request.model()).isEqualTo("DEFAULT_MODEL");
 		assertThat(request.options().get("num_gpu")).isEqualTo(1);
@@ -51,7 +51,7 @@ public void ollamaEmbeddingRequestRequestOptions() {
 			.withUseMMap(true)
 			.withNumGPU(2);
 
-		var request = client.ollamaEmbeddingRequest("Hello", promptOptions);
+		var request = chatModel.ollamaEmbeddingRequest("Hello", promptOptions);
 
 		assertThat(request.model()).isEqualTo("PROMPT_MODEL");
 		assertThat(request.options().get("num_gpu")).isEqualTo(2);

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/SpeechModel.java
Patch:
@@ -16,18 +16,18 @@
 
 package org.springframework.ai.openai.audio.speech;
 
-import org.springframework.ai.model.ModelClient;
+import org.springframework.ai.model.Model;
 
 /**
- * The {@link SpeechClient} interface provides a way to interact with the OpenAI
+ * The {@link SpeechModel} interface provides a way to interact with the OpenAI
  * Text-to-Speech (TTS) API. It allows you to convert text input into lifelike spoken
  * audio.
  *
  * @author Ahmed Yousri
  * @since 1.0.0-M1
  */
 @FunctionalInterface
-public interface SpeechClient extends ModelClient<SpeechPrompt, SpeechResponse> {
+public interface SpeechModel extends Model<SpeechPrompt, SpeechResponse> {
 
 	/**
 	 * Generates spoken audio from the provided text message.

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/audio/speech/StreamingSpeechModel.java
Patch:
@@ -16,19 +16,19 @@
 
 package org.springframework.ai.openai.audio.speech;
 
-import org.springframework.ai.model.StreamingModelClient;
+import org.springframework.ai.model.StreamingModel;
 import reactor.core.publisher.Flux;
 
 /**
- * The {@link StreamingSpeechClient} interface provides a way to interact with the OpenAI
+ * The {@link StreamingSpeechModel} interface provides a way to interact with the OpenAI
  * Text-to-Speech (TTS) API using a streaming approach, allowing you to receive the
  * generated audio in a real-time fashion.
  *
  * @author Ahmed Yousri
  * @since 1.0.0-M1
  */
 @FunctionalInterface
-public interface StreamingSpeechClient extends StreamingModelClient<SpeechPrompt, SpeechResponse> {
+public interface StreamingSpeechModel extends StreamingModel<SpeechPrompt, SpeechResponse> {
 
 	/**
 	 * Generates a stream of audio bytes from the provided text message.

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -34,7 +34,7 @@ public class ChatCompletionRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new OpenAiChatClient(new OpenAiApi("TEST"),
+		var client = new OpenAiChatModel(new OpenAiApi("TEST"),
 				OpenAiChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6f).build());
 
 		var request = client.createRequest(new Prompt("Test message content"), false);
@@ -60,7 +60,7 @@ public void promptOptionsTools() {
 
 		final String TOOL_FUNCTION_NAME = "CurrentWeather";
 
-		var client = new OpenAiChatClient(new OpenAiApi("TEST"),
+		var client = new OpenAiChatModel(new OpenAiApi("TEST"),
 				OpenAiChatOptions.builder().withModel("DEFAULT_MODEL").build());
 
 		var request = client.createRequest(new Prompt("Test message content",
@@ -90,7 +90,7 @@ public void defaultOptionsTools() {
 
 		final String TOOL_FUNCTION_NAME = "CurrentWeather";
 
-		var client = new OpenAiChatClient(new OpenAiApi("TEST"),
+		var client = new OpenAiChatModel(new OpenAiApi("TEST"),
 				OpenAiChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/TranscriptionRequestTests.java
Patch:
@@ -34,7 +34,7 @@ public class TranscriptionRequestTests {
 	@Test
 	public void defaultOptions() {
 
-		var client = new OpenAiAudioTranscriptionClient(new OpenAiAudioApi("TEST"),
+		var client = new OpenAiAudioTranscriptionModel(new OpenAiAudioApi("TEST"),
 				OpenAiAudioTranscriptionOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withResponseFormat(TranscriptResponseFormat.TEXT)
@@ -58,7 +58,7 @@ public void defaultOptions() {
 	@Test
 	public void runtimeOptions() {
 
-		var client = new OpenAiAudioTranscriptionClient(new OpenAiAudioApi("TEST"),
+		var client = new OpenAiAudioTranscriptionModel(new OpenAiAudioApi("TEST"),
 				OpenAiAudioTranscriptionOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withResponseFormat(TranscriptResponseFormat.TEXT)

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/OpenAiTranscriptionModelIT.java
Patch:
@@ -31,7 +31,7 @@
 
 @SpringBootTest(classes = OpenAiTestConfiguration.class)
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
-class OpenAiTranscriptionClientIT extends AbstractIT {
+class OpenAiTranscriptionModelIT extends AbstractIT {
 
 	@Value("classpath:/speech/jfk.flac")
 	private Resource audioFile;
@@ -43,7 +43,7 @@ void transcriptionTest() {
 			.withTemperature(0f)
 			.build();
 		AudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile, transcriptionOptions);
-		AudioTranscriptionResponse response = transcriptionClient.call(transcriptionRequest);
+		AudioTranscriptionResponse response = transcriptionModel.call(transcriptionRequest);
 		assertThat(response.getResults()).hasSize(1);
 		assertThat(response.getResults().get(0).getOutput().toLowerCase().contains("fellow")).isTrue();
 	}
@@ -59,7 +59,7 @@ void transcriptionTestWithOptions() {
 			.withResponseFormat(responseFormat)
 			.build();
 		AudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile, transcriptionOptions);
-		AudioTranscriptionResponse response = transcriptionClient.call(transcriptionRequest);
+		AudioTranscriptionResponse response = transcriptionModel.call(transcriptionRequest);
 		assertThat(response.getResults()).hasSize(1);
 		assertThat(response.getResults().get(0).getOutput().toLowerCase().contains("fellow")).isTrue();
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageModelIT.java
Patch:
@@ -33,7 +33,7 @@
 
 @SpringBootTest(classes = OpenAiTestConfiguration.class)
 @EnabledIfEnvironmentVariable(named = "OPENAI_API_KEY", matches = ".+")
-public class OpenAiImageClientIT extends AbstractIT {
+public class OpenAiImageModelIT extends AbstractIT {
 
 	@Test
 	void imageAsUrlTest() {
@@ -44,7 +44,7 @@ void imageAsUrlTest() {
 
 		ImagePrompt imagePrompt = new ImagePrompt(instructions, options);
 
-		ImageResponse imageResponse = imageClient.call(imagePrompt);
+		ImageResponse imageResponse = imageModel.call(imagePrompt);
 
 		assertThat(imageResponse.getResults()).hasSize(1);
 

File: models/spring-ai-postgresml/src/main/java/org/springframework/ai/postgresml/PostgresMlEmbeddingOptions.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.embedding.EmbeddingOptions;
 import org.springframework.ai.model.ModelOptionsUtils;
-import org.springframework.ai.postgresml.PostgresMlEmbeddingClient.VectorType;
+import org.springframework.ai.postgresml.PostgresMlEmbeddingModel.VectorType;
 
 /**
  * @author Christian Tzolov
@@ -36,7 +36,7 @@ public class PostgresMlEmbeddingOptions implements EmbeddingOptions {
 	/**
 	 * The Huggingface transformer model to use for the embedding.
 	 */
-	private @JsonProperty("transformer") String transformer = PostgresMlEmbeddingClient.DEFAULT_TRANSFORMER_MODEL;
+	private @JsonProperty("transformer") String transformer = PostgresMlEmbeddingModel.DEFAULT_TRANSFORMER_MODEL;
 
 	/**
 	 * PostgresML vector type to use for the embedding.

File: models/spring-ai-stability-ai/src/test/java/org/springframework/ai/stabilityai/StabilityAiImageTestConfiguration.java
Patch:
@@ -29,8 +29,8 @@ public StabilityAiApi stabilityAiApi() {
 	}
 
 	@Bean
-	StabilityAiImageClient stabilityAiImageClient(StabilityAiApi stabilityAiApi) {
-		return new StabilityAiImageClient(stabilityAiApi);
+	StabilityAiImageModel stabilityAiImageModel(StabilityAiApi stabilityAiApi) {
+		return new StabilityAiImageModel(stabilityAiApi);
 	}
 
 	private String getApiKey() {

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/aot/VertexAiGeminiRuntimeHints.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.vertexai.gemini.aot;
 
-import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;
+import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.aot.hint.MemberCategory;
 import org.springframework.aot.hint.RuntimeHints;
 import org.springframework.aot.hint.RuntimeHintsRegistrar;
@@ -34,7 +34,7 @@ public class VertexAiGeminiRuntimeHints implements RuntimeHintsRegistrar {
 	@Override
 	public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
 		var mcs = MemberCategory.values();
-		for (var tr : findJsonAnnotatedClassesInPackage(VertexAiGeminiChatClient.class))
+		for (var tr : findJsonAnnotatedClassesInPackage(VertexAiGeminiChatModel.class))
 			hints.reflection().registerType(tr, mcs);
 	}
 

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/aot/VertexAiGeminiRuntimeHintsTests.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatClient;
+import org.springframework.ai.vertexai.gemini.VertexAiGeminiChatModel;
 import org.springframework.aot.hint.RuntimeHints;
 import org.springframework.aot.hint.TypeReference;
 
@@ -38,7 +38,7 @@ void registerHints() {
 		RuntimeHints runtimeHints = new RuntimeHints();
 		VertexAiGeminiRuntimeHints vertexAiGeminiRuntimeHints = new VertexAiGeminiRuntimeHints();
 		vertexAiGeminiRuntimeHints.registerHints(runtimeHints, null);
-		Set<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(VertexAiGeminiChatClient.class);
+		Set<TypeReference> jsonAnnotatedClasses = findJsonAnnotatedClassesInPackage(VertexAiGeminiChatModel.class);
 		for (TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {
 			assertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));
 		}

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiPaLm2EmbeddingModel.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import org.springframework.ai.document.Document;
-import org.springframework.ai.embedding.AbstractEmbeddingClient;
+import org.springframework.ai.embedding.AbstractEmbeddingModel;
 import org.springframework.ai.embedding.Embedding;
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.embedding.EmbeddingResponse;
@@ -28,11 +28,11 @@
 /**
  * @author Christian Tzolov
  */
-public class VertexAiPaLm2EmbeddingClient extends AbstractEmbeddingClient {
+public class VertexAiPaLm2EmbeddingModel extends AbstractEmbeddingModel {
 
 	private final VertexAiPaLm2Api vertexAiApi;
 
-	public VertexAiPaLm2EmbeddingClient(VertexAiPaLm2Api vertexAiApi) {
+	public VertexAiPaLm2EmbeddingModel(VertexAiPaLm2Api vertexAiApi) {
 		this.vertexAiApi = vertexAiApi;
 	}
 

File: models/spring-ai-zhipuai/src/test/java/org/springframework/ai/zhipuai/ChatCompletionRequestTests.java
Patch:
@@ -33,7 +33,7 @@ public class ChatCompletionRequestTests {
 	@Test
 	public void createRequestWithChatOptions() {
 
-		var client = new ZhiPuAiChatClient(new ZhiPuAiApi("TEST"),
+		var client = new ZhiPuAiChatModel(new ZhiPuAiApi("TEST"),
 				ZhiPuAiChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6f).build());
 
 		var request = client.createRequest(new Prompt("Test message content"), false);
@@ -59,7 +59,7 @@ public void promptOptionsTools() {
 
 		final String TOOL_FUNCTION_NAME = "CurrentWeather";
 
-		var client = new ZhiPuAiChatClient(new ZhiPuAiApi("TEST"),
+		var client = new ZhiPuAiChatModel(new ZhiPuAiApi("TEST"),
 				ZhiPuAiChatOptions.builder().withModel("DEFAULT_MODEL").build());
 
 		var request = client.createRequest(new Prompt("Test message content",
@@ -89,7 +89,7 @@ public void defaultOptionsTools() {
 
 		final String TOOL_FUNCTION_NAME = "CurrentWeather";
 
-		var client = new ZhiPuAiChatClient(new ZhiPuAiApi("TEST"),
+		var client = new ZhiPuAiChatModel(new ZhiPuAiApi("TEST"),
 				ZhiPuAiChatOptions.builder()
 					.withModel("DEFAULT_MODEL")
 					.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())

File: spring-ai-core/src/main/java/org/springframework/ai/chat/StreamingChatModel.java
Patch:
@@ -21,10 +21,10 @@
 
 import org.springframework.ai.chat.messages.Message;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.StreamingModelClient;
+import org.springframework.ai.model.StreamingModel;
 
 @FunctionalInterface
-public interface StreamingChatClient extends StreamingModelClient<Prompt, ChatResponse> {
+public interface StreamingChatModel extends StreamingModel<Prompt, ChatResponse> {
 
 	default Flux<String> stream(String message) {
 		Prompt prompt = new Prompt(message);

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingModel.java
Patch:
@@ -16,15 +16,15 @@
 package org.springframework.ai.embedding;
 
 import org.springframework.ai.document.Document;
-import org.springframework.ai.model.ModelClient;
+import org.springframework.ai.model.Model;
 import org.springframework.util.Assert;
 
 import java.util.List;
 
 /**
- * EmbeddingClient is a generic interface for embedding clients.
+ * EmbeddingModel is a generic interface for embedding models.
  */
-public interface EmbeddingClient extends ModelClient<EmbeddingRequest, EmbeddingResponse> {
+public interface EmbeddingModel extends Model<EmbeddingRequest, EmbeddingResponse> {
 
 	@Override
 	EmbeddingResponse call(EmbeddingRequest request);

File: spring-ai-core/src/main/java/org/springframework/ai/image/ImageModel.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.springframework.ai.image;
 
-import org.springframework.ai.model.ModelClient;
+import org.springframework.ai.model.Model;
 
 @FunctionalInterface
-public interface ImageClient extends ModelClient<ImagePrompt, ImageResponse> {
+public interface ImageModel extends Model<ImagePrompt, ImageResponse> {
 
 	ImageResponse call(ImagePrompt request);
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/Model.java
Patch:
@@ -16,8 +16,8 @@
 package org.springframework.ai.model;
 
 /**
- * The ModelClient interface provides a generic API for invoking AI models. It is designed
- * to handle the interaction with various types of AI models by abstracting the process of
+ * The Model interface provides a generic API for invoking AI models. It is designed to
+ * handle the interaction with various types of AI models by abstracting the process of
  * sending requests and receiving responses. The interface uses Java generics to
  * accommodate different types of requests and responses, enhancing flexibility and
  * adaptability across different AI model implementations.
@@ -27,7 +27,7 @@
  * @author Mark Pollack
  * @since 0.8.0
  */
-public interface ModelClient<TReq extends ModelRequest<?>, TRes extends ModelResponse<?>> {
+public interface Model<TReq extends ModelRequest<?>, TRes extends ModelResponse<?>> {
 
 	/**
 	 * Executes a method call to the AI model.

File: spring-ai-core/src/main/java/org/springframework/ai/model/StreamingModel.java
Patch:
@@ -18,8 +18,8 @@
 import reactor.core.publisher.Flux;
 
 /**
- * The StreamingModelClient interface provides a generic API for invoking an AI models
- * with streaming response. It abstracts the process of sending requests and receiving a
+ * The StreamingModel interface provides a generic API for invoking an AI models with
+ * streaming response. It abstracts the process of sending requests and receiving a
  * streaming responses. The interface uses Java generics to accommodate different types of
  * requests and responses, enhancing flexibility and adaptability across different AI
  * model implementations.
@@ -30,7 +30,7 @@
  * @author Christian Tzolov
  * @since 0.8.0
  */
-public interface StreamingModelClient<TReq extends ModelRequest<?>, TResChunk extends ModelResponse<?>> {
+public interface StreamingModel<TReq extends ModelRequest<?>, TResChunk extends ModelResponse<?>> {
 
 	/**
 	 * Executes a method call to the AI model.

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/AbstractFunctionCallback.java
Patch:
@@ -54,7 +54,7 @@ abstract class AbstractFunctionCallback<I, O> implements Function<I, O>, Functio
 	/**
 	 * Constructs a new {@link AbstractFunctionCallback} with the given name, description,
 	 * input type and default object mapper.
-	 * @param name Function name. Should be unique within the ChatClient's function
+	 * @param name Function name. Should be unique within the ChatModel's function
 	 * registry.
 	 * @param description Function description. Used as a "system prompt" by the model to
 	 * decide if the function should be called.

File: spring-ai-core/src/test/java/org/springframework/ai/chat/ChatModelTests.java
Patch:
@@ -34,20 +34,20 @@
 import org.springframework.ai.chat.prompt.Prompt;
 
 /**
- * Unit Tests for {@link ChatClient}.
+ * Unit Tests for {@link ChatModel}.
  *
  * @author John Blum
  * @since 0.2.0
  */
-class ChatClientTests {
+class ChatModelTests {
 
 	@Test
 	void generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly() {
 
 		String userMessage = "Zero Wing";
 		String responseMessage = "All your bases are belong to us";
 
-		ChatClient mockClient = Mockito.mock(ChatClient.class);
+		ChatModel mockClient = Mockito.mock(ChatModel.class);
 
 		AssistantMessage mockAssistantMessage = Mockito.mock(AssistantMessage.class);
 		when(mockAssistantMessage.getContent()).thenReturn(responseMessage);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/anthropic/AnthropicAutoConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import org.springframework.ai.anthropic.AnthropicChatClient;
+import org.springframework.ai.anthropic.AnthropicChatModel;
 import org.springframework.ai.anthropic.api.AnthropicApi;
 import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.model.function.FunctionCallback;
@@ -57,15 +57,15 @@ public AnthropicApi anthropicApi(AnthropicConnectionProperties connectionPropert
 
 	@Bean
 	@ConditionalOnMissingBean
-	public AnthropicChatClient anthropicChatClient(AnthropicApi anthropicApi, AnthropicChatProperties chatProperties,
+	public AnthropicChatModel anthropicChatModel(AnthropicApi anthropicApi, AnthropicChatProperties chatProperties,
 			RetryTemplate retryTemplate, FunctionCallbackContext functionCallbackContext,
 			List<FunctionCallback> toolFunctionCallbacks) {
 
 		if (!CollectionUtils.isEmpty(toolFunctionCallbacks)) {
 			chatProperties.getOptions().getFunctionCallbacks().addAll(toolFunctionCallbacks);
 		}
 
-		return new AnthropicChatClient(anthropicApi, chatProperties.getOptions(), retryTemplate,
+		return new AnthropicChatModel(anthropicApi, chatProperties.getOptions(), retryTemplate,
 				functionCallbackContext);
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiChatProperties.java
Patch:
@@ -29,7 +29,7 @@ public class AzureOpenAiChatProperties {
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 
 	/**
-	 * Enable Azure OpenAI chat client.
+	 * Enable Azure OpenAI chat model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiEmbeddingProperties.java
Patch:
@@ -27,7 +27,7 @@ public class AzureOpenAiEmbeddingProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.azure.openai.embedding";
 
 	/**
-	 * Enable Azure OpenAI embedding client.
+	 * Enable Azure OpenAI embedding model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatAutoConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatClient;
+import org.springframework.ai.bedrock.anthropic.BedrockAnthropicChatModel;
 import org.springframework.ai.bedrock.anthropic.api.AnthropicChatBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -59,9 +59,9 @@ public AnthropicChatBedrockApi anthropicApi(AwsCredentialsProvider credentialsPr
 
 	@Bean
 	@ConditionalOnBean(AnthropicChatBedrockApi.class)
-	public BedrockAnthropicChatClient anthropicChatClient(AnthropicChatBedrockApi anthropicApi,
+	public BedrockAnthropicChatModel anthropicChatModel(AnthropicChatBedrockApi anthropicApi,
 			BedrockAnthropicChatProperties properties) {
-		return new BedrockAnthropicChatClient(anthropicApi, properties.getOptions());
+		return new BedrockAnthropicChatModel(anthropicApi, properties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatProperties.java
Patch:
@@ -35,7 +35,7 @@ public class BedrockAnthropicChatProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.bedrock.anthropic.chat";
 
 	/**
-	 * Enable Bedrock Anthropic chat client. Disabled by default.
+	 * Enable Bedrock Anthropic chat model. Disabled by default.
 	 */
 	private boolean enabled = false;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatClient;
+import org.springframework.ai.bedrock.anthropic3.BedrockAnthropic3ChatModel;
 import org.springframework.ai.bedrock.anthropic3.api.Anthropic3ChatBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -59,9 +59,9 @@ public Anthropic3ChatBedrockApi anthropic3Api(AwsCredentialsProvider credentials
 
 	@Bean
 	@ConditionalOnBean(Anthropic3ChatBedrockApi.class)
-	public BedrockAnthropic3ChatClient anthropic3ChatClient(Anthropic3ChatBedrockApi anthropicApi,
+	public BedrockAnthropic3ChatModel anthropic3ChatModel(Anthropic3ChatBedrockApi anthropicApi,
 			BedrockAnthropic3ChatProperties properties) {
-		return new BedrockAnthropic3ChatClient(anthropicApi, properties.getOptions());
+		return new BedrockAnthropic3ChatModel(anthropicApi, properties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatProperties.java
Patch:
@@ -34,7 +34,7 @@ public class BedrockAnthropic3ChatProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.bedrock.anthropic3.chat";
 
 	/**
-	 * Enable Bedrock Anthropic chat client. Disabled by default.
+	 * Enable Bedrock Anthropic chat model. Disabled by default.
 	 */
 	private boolean enabled = false;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.cohere.BedrockCohereChatClient;
+import org.springframework.ai.bedrock.cohere.BedrockCohereChatModel;
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -57,10 +57,10 @@ public CohereChatBedrockApi cohereChatApi(AwsCredentialsProvider credentialsProv
 
 	@Bean
 	@ConditionalOnBean(CohereChatBedrockApi.class)
-	public BedrockCohereChatClient cohereChatClient(CohereChatBedrockApi cohereChatApi,
+	public BedrockCohereChatModel cohereChatModel(CohereChatBedrockApi cohereChatApi,
 			BedrockCohereChatProperties properties) {
 
-		return new BedrockCohereChatClient(cohereChatApi, properties.getOptions());
+		return new BedrockCohereChatModel(cohereChatApi, properties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingClient;
+import org.springframework.ai.bedrock.cohere.BedrockCohereEmbeddingModel;
 import org.springframework.ai.bedrock.cohere.api.CohereEmbeddingBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -59,10 +59,10 @@ public CohereEmbeddingBedrockApi cohereEmbeddingApi(AwsCredentialsProvider crede
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnBean(CohereEmbeddingBedrockApi.class)
-	public BedrockCohereEmbeddingClient cohereEmbeddingClient(CohereEmbeddingBedrockApi cohereEmbeddingApi,
+	public BedrockCohereEmbeddingModel cohereEmbeddingModel(CohereEmbeddingBedrockApi cohereEmbeddingApi,
 			BedrockCohereEmbeddingProperties properties) {
 
-		return new BedrockCohereEmbeddingClient(cohereEmbeddingApi, properties.getOptions());
+		return new BedrockCohereEmbeddingModel(cohereEmbeddingApi, properties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatAutoConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatClient;
+import org.springframework.ai.bedrock.jurassic2.BedrockAi21Jurassic2ChatModel;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -59,10 +59,10 @@ public Ai21Jurassic2ChatBedrockApi ai21Jurassic2ChatBedrockApi(AwsCredentialsPro
 
 	@Bean
 	@ConditionalOnBean(Ai21Jurassic2ChatBedrockApi.class)
-	public BedrockAi21Jurassic2ChatClient jurassic2ChatClient(Ai21Jurassic2ChatBedrockApi ai21Jurassic2ChatBedrockApi,
+	public BedrockAi21Jurassic2ChatModel jurassic2ChatModel(Ai21Jurassic2ChatBedrockApi ai21Jurassic2ChatBedrockApi,
 			BedrockAi21Jurassic2ChatProperties properties) {
 
-		return BedrockAi21Jurassic2ChatClient.builder(ai21Jurassic2ChatBedrockApi)
+		return BedrockAi21Jurassic2ChatModel.builder(ai21Jurassic2ChatBedrockApi)
 			.withOptions(properties.getOptions())
 			.build();
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatProperties.java
Patch:
@@ -33,7 +33,7 @@ public class BedrockAi21Jurassic2ChatProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.bedrock.jurassic2.chat";
 
 	/**
-	 * Enable Bedrock Ai21Jurassic2 chat client. Disabled by default.
+	 * Enable Bedrock Ai21Jurassic2 chat model. Disabled by default.
 	 */
 	private boolean enabled = false;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama/BedrockLlamaChatAutoConfiguration.java
Patch:
@@ -16,12 +16,12 @@
 package org.springframework.ai.autoconfigure.bedrock.llama;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.springframework.ai.bedrock.llama.BedrockLlamaChatModel;
 import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
 import software.amazon.awssdk.regions.providers.AwsRegionProvider;
 
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.llama.BedrockLlamaChatClient;
 import org.springframework.ai.bedrock.llama.api.LlamaChatBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -59,9 +59,9 @@ public LlamaChatBedrockApi llamaApi(AwsCredentialsProvider credentialsProvider,
 
 	@Bean
 	@ConditionalOnBean(LlamaChatBedrockApi.class)
-	public BedrockLlamaChatClient llamaChatClient(LlamaChatBedrockApi llamaApi, BedrockLlamaChatProperties properties) {
+	public BedrockLlamaChatModel llamaChatModel(LlamaChatBedrockApi llamaApi, BedrockLlamaChatProperties properties) {
 
-		return new BedrockLlamaChatClient(llamaApi, properties.getOptions());
+		return new BedrockLlamaChatModel(llamaApi, properties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama/BedrockLlamaChatProperties.java
Patch:
@@ -32,7 +32,7 @@ public class BedrockLlamaChatProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.bedrock.llama.chat";
 
 	/**
-	 * Enable Bedrock Llama chat client. Disabled by default.
+	 * Enable Bedrock Llama chat model. Disabled by default.
 	 */
 	private boolean enabled = false;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.titan.BedrockTitanChatClient;
+import org.springframework.ai.bedrock.titan.BedrockTitanChatModel;
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -57,10 +57,10 @@ public TitanChatBedrockApi titanChatBedrockApi(AwsCredentialsProvider credential
 
 	@Bean
 	@ConditionalOnBean(TitanChatBedrockApi.class)
-	public BedrockTitanChatClient titanChatClient(TitanChatBedrockApi titanChatApi,
+	public BedrockTitanChatModel titanChatModel(TitanChatBedrockApi titanChatApi,
 			BedrockTitanChatProperties properties) {
 
-		return new BedrockTitanChatClient(titanChatApi, properties.getOptions());
+		return new BedrockTitanChatModel(titanChatApi, properties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingAutoConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionConfiguration;
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
-import org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient;
+import org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingModel;
 import org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -59,10 +59,10 @@ public TitanEmbeddingBedrockApi titanEmbeddingBedrockApi(AwsCredentialsProvider
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnBean(TitanEmbeddingBedrockApi.class)
-	public BedrockTitanEmbeddingClient titanEmbeddingClient(TitanEmbeddingBedrockApi titanEmbeddingApi,
+	public BedrockTitanEmbeddingModel titanEmbeddingModel(TitanEmbeddingBedrockApi titanEmbeddingApi,
 			BedrockTitanEmbeddingProperties properties) {
 
-		return new BedrockTitanEmbeddingClient(titanEmbeddingApi).withInputType(properties.getInputType());
+		return new BedrockTitanEmbeddingModel(titanEmbeddingApi).withInputType(properties.getInputType());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingProperties.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.bedrock.titan;
 
-import org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingClient.InputType;
+import org.springframework.ai.bedrock.titan.BedrockTitanEmbeddingModel.InputType;
 import org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi.TitanEmbeddingModel;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatProperties.java
Patch:
@@ -27,7 +27,7 @@ public class HuggingfaceChatProperties {
 	private String url;
 
 	/**
-	 * Enable Huggingface chat client.
+	 * Enable Huggingface chat model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxChatProperties.java
Patch:
@@ -33,7 +33,7 @@ public class MiniMaxChatProperties extends MiniMaxParentProperties {
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 
 	/**
-	 * Enable MiniMax chat client.
+	 * Enable MiniMax chat model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/minimax/MiniMaxEmbeddingProperties.java
Patch:
@@ -32,7 +32,7 @@ public class MiniMaxEmbeddingProperties extends MiniMaxParentProperties {
 	public static final String DEFAULT_EMBEDDING_MODEL = MiniMaxApi.EmbeddingModel.Embo_01.value;
 
 	/**
-	 * Enable MiniMax embedding client.
+	 * Enable MiniMax embedding model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiChatProperties.java
Patch:
@@ -43,7 +43,7 @@ public MistralAiChatProperties() {
 	}
 
 	/**
-	 * Enable OpenAI chat client.
+	 * Enable OpenAI chat model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiEmbeddingProperties.java
Patch:
@@ -35,7 +35,7 @@ public class MistralAiEmbeddingProperties extends MistralAiParentProperties {
 	public static final String DEFAULT_ENCODING_FORMAT = "float";
 
 	/**
-	 * Enable MistralAI embedding client.
+	 * Enable MistralAI embedding model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaChatProperties.java
Patch:
@@ -31,7 +31,7 @@ public class OllamaChatProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.ollama.chat";
 
 	/**
-	 * Enable Ollama chat client.
+	 * Enable Ollama chat model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingProperties.java
Patch:
@@ -31,7 +31,7 @@ public class OllamaEmbeddingProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.ollama.embedding";
 
 	/**
-	 * Enable Ollama embedding client.
+	 * Enable Ollama embedding model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiChatProperties.java
Patch:
@@ -29,7 +29,7 @@ public class OpenAiChatProperties extends OpenAiParentProperties {
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 
 	/**
-	 * Enable OpenAI chat client.
+	 * Enable OpenAI chat model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiEmbeddingProperties.java
Patch:
@@ -28,7 +28,7 @@ public class OpenAiEmbeddingProperties extends OpenAiParentProperties {
 	public static final String DEFAULT_EMBEDDING_MODEL = "text-embedding-ada-002";
 
 	/**
-	 * Enable OpenAI embedding client.
+	 * Enable OpenAI embedding model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiImageProperties.java
Patch:
@@ -34,7 +34,7 @@ public class OpenAiImageProperties extends OpenAiParentProperties {
 	public static final String DEFAULT_IMAGE_MODEL = OpenAiImageApi.ImageModel.DALL_E_3.getValue();
 
 	/**
-	 * Enable OpenAI Image client.
+	 * Enable OpenAI image model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImageAutoConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.stabilityai;
 
-import org.springframework.ai.stabilityai.StabilityAiImageClient;
+import org.springframework.ai.stabilityai.StabilityAiImageModel;
 import org.springframework.ai.stabilityai.api.StabilityAiApi;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -58,9 +58,9 @@ public StabilityAiApi stabilityAiApi(StabilityAiConnectionProperties commonPrope
 	@ConditionalOnMissingBean
 	@ConditionalOnProperty(prefix = StabilityAiImageProperties.CONFIG_PREFIX, name = "enabled", havingValue = "true",
 			matchIfMissing = true)
-	public StabilityAiImageClient stabilityAiImageClient(StabilityAiApi stabilityAiApi,
+	public StabilityAiImageModel stabilityAiImageModel(StabilityAiApi stabilityAiApi,
 			StabilityAiImageProperties stabilityAiImageProperties) {
-		return new StabilityAiImageClient(stabilityAiApi, stabilityAiImageProperties.getOptions());
+		return new StabilityAiImageModel(stabilityAiApi, stabilityAiImageProperties.getOptions());
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/stabilityai/StabilityAiImageProperties.java
Patch:
@@ -30,7 +30,7 @@ public class StabilityAiImageProperties extends StabilityAiParentProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.stabilityai.image";
 
 	/**
-	 * Enable Stability Image client.
+	 * Enable Stability image model.
 	 */
 	private boolean enabled = true;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import com.datastax.oss.driver.api.core.CqlSession;
 import com.datastax.oss.driver.api.core.config.DefaultDriverOption;
 
-import org.springframework.ai.embedding.EmbeddingClient;
+import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.vectorstore.CassandraVectorStore;
 import org.springframework.ai.vectorstore.CassandraVectorStoreConfig;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
@@ -42,7 +42,7 @@ public class CassandraVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public CassandraVectorStore vectorStore(EmbeddingClient embeddingClient, CassandraVectorStoreProperties properties,
+	public CassandraVectorStore vectorStore(EmbeddingModel embeddingModel, CassandraVectorStoreProperties properties,
 			CqlSession cqlSession) {
 
 		var builder = CassandraVectorStoreConfig.builder().withCqlSession(cqlSession);
@@ -61,7 +61,7 @@ public CassandraVectorStore vectorStore(EmbeddingClient embeddingClient, Cassand
 			builder = builder.returnEmbeddings();
 		}
 
-		return new CassandraVectorStore(builder.build(), embeddingClient);
+		return new CassandraVectorStore(builder.build(), embeddingModel);
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/hanadb/HanaCloudVectorStoreAutoConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 
 import javax.sql.DataSource;
 
-import org.springframework.ai.embedding.EmbeddingClient;
+import org.springframework.ai.embedding.EmbeddingModel;
 import org.springframework.ai.vectorstore.HanaCloudVectorStore;
 import org.springframework.ai.vectorstore.HanaCloudVectorStoreConfig;
 import org.springframework.ai.vectorstore.HanaVectorEntity;
@@ -41,9 +41,9 @@ public class HanaCloudVectorStoreAutoConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public HanaCloudVectorStore vectorStore(HanaVectorRepository<? extends HanaVectorEntity> repository,
-			EmbeddingClient embeddingClient, HanaCloudVectorStoreProperties properties) {
+			EmbeddingModel embeddingModel, HanaCloudVectorStoreProperties properties) {
 
-		return new HanaCloudVectorStore(repository, embeddingClient,
+		return new HanaCloudVectorStore(repository, embeddingModel,
 				HanaCloudVectorStoreConfig.builder()
 					.tableName(properties.getTableName())
 					.topK(properties.getTopK())

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApi.java
Patch:
@@ -313,7 +313,7 @@ public static class ToolChoiceBuilder {
 			/**
 			 * Specifying a particular function forces the model to call that function.
 			 */
-			public static Object FUNCTION(String functionName) {
+			public static Object function(String functionName) {
 				return Map.of("type", "function", "function", Map.of("name", functionName));
 			}
 		}
@@ -864,7 +864,6 @@ public record EmbeddingList(
 	 * @param embeddingRequest The embedding request.
 	 * @return Returns {@link EmbeddingList}.
 	 *
-	 * <pre>{@code List.of("text1", "text2", "text3") or List.of(List.of(1, 2, 3), List.of(3, 4, 5))} </pre>
 	 */
 	public ResponseEntity<EmbeddingList> embeddings(EmbeddingRequest embeddingRequest) {
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/minimax/MiniMaxPropertiesTests.java
Patch:
@@ -168,7 +168,7 @@ public void chatOptionsTest() {
 				"spring.ai.minimax.chat.options.topP=0.56",
 
 				// "spring.ai.minimax.chat.options.toolChoice.functionName=toolChoiceFunctionName",
-				"spring.ai.minimax.chat.options.toolChoice=" + ModelOptionsUtils.toJsonString(MiniMaxApi.ChatCompletionRequest.ToolChoiceBuilder.FUNCTION("toolChoiceFunctionName")),
+				"spring.ai.minimax.chat.options.toolChoice=" + ModelOptionsUtils.toJsonString(MiniMaxApi.ChatCompletionRequest.ToolChoiceBuilder.function("toolChoiceFunctionName")),
 
 				"spring.ai.minimax.chat.options.tools[0].function.name=myFunction1",
 				"spring.ai.minimax.chat.options.tools[0].function.description=function description",

File: models/spring-ai-minimax/src/main/java/org/springframework/ai/minimax/api/MiniMaxApi.java
Patch:
@@ -863,9 +863,6 @@ public record EmbeddingList(
 	 *
 	 * @param embeddingRequest The embedding request.
 	 * @return Returns {@link EmbeddingList}.
-	 * @param <T> Type of the entity in the data list. Can be a {@link String} or {@link List} of tokens (e.g.
-	 * Integers). For embedding multiple inputs in a single request, You can pass a {@link List} of {@link String} or
-	 * {@link List} of {@link List} of tokens. For example:
 	 *
 	 * <pre>{@code List.of("text1", "text2", "text3") or List.of(List.of(1, 2, 3), List.of(3, 4, 5))} </pre>
 	 */

File: spring-ai-core/src/main/java/org/springframework/ai/converter/BeanOutputConverter.java
Patch:
@@ -69,8 +69,8 @@ public class BeanOutputConverter<T> implements StructuredOutputConverter<T> {
 	 * Constructor to initialize with the target type's class.
 	 * @param clazz The target type's class.
 	 */
-	public BeanOutputConverter(Class<T> typeClass) {
-		this(ParameterizedTypeReference.forType(typeClass));
+	public BeanOutputConverter(Class<T> clazz) {
+		this(ParameterizedTypeReference.forType(clazz));
 	}
 
 	/**

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientIT.java
Patch:
@@ -298,7 +298,8 @@ void streamingMultiModalityImageUrl() throws IOException {
 			.map(AssistantMessage::getContent)
 			.collect(Collectors.joining());
 		logger.info("Response: {}", content);
-		assertThat(content).contains("bananas", "apple", "bowl");
+		assertThat(content).contains("bananas", "apple");
+		assertThat(content).containsAnyOf("bowl", "basket");
 	}
 
 }
\ No newline at end of file

File: models/spring-ai-vertex-ai-gemini/src/main/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatClient.java
Patch:
@@ -120,7 +120,7 @@ public String getValue() {
 	public VertexAiGeminiChatClient(VertexAI vertexAI) {
 		this(vertexAI,
 				VertexAiGeminiChatOptions.builder()
-					.withModel(ChatModel.GEMINI_PRO_VISION.getValue())
+					.withModel(ChatModel.GEMINI_PRO_VISION)
 					.withTemperature(0.8f)
 					.build());
 	}

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/VertexAiGeminiChatClientIT.java
Patch:
@@ -234,7 +234,7 @@ public VertexAI vertexAiApi() {
 		public VertexAiGeminiChatClient vertexAiEmbedding(VertexAI vertexAi) {
 			return new VertexAiGeminiChatClient(vertexAi,
 					VertexAiGeminiChatOptions.builder()
-						.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO_VISION.getValue())
+						.withModel(VertexAiGeminiChatClient.ChatModel.GEMINI_PRO_VISION)
 						.build());
 		}
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaChatClient.java
Patch:
@@ -87,6 +87,7 @@ public OllamaChatClient withModel(String model) {
 	/**
 	 * @deprecated Use {@link OllamaOptions} constructor instead.
 	 */
+	@Deprecated
 	public OllamaChatClient withDefaultOptions(OllamaOptions options) {
 		this.defaultOptions = options;
 		return this;

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatClientMultimodalIT.java
Patch:
@@ -25,8 +25,8 @@
 import org.junit.jupiter.api.Test;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
+import org.testcontainers.ollama.OllamaContainer;
 
-import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.Media;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -38,7 +38,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.util.MimeTypeUtils;
-import org.testcontainers.ollama.OllamaContainer;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatRequestTests.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class OllamaChatRequestTests {
 
-	OllamaChatClient client = new OllamaChatClient(new OllamaApi()).withDefaultOptions(
+	OllamaChatClient client = new OllamaChatClient(new OllamaApi(),
 			new OllamaOptions().withModel("MODEL_NAME").withTopK(99).withTemperature(66.6f).withNumGPU(1));
 
 	@Test
@@ -105,8 +105,8 @@ public void createRequestWithPromptOptionsModelOverride() {
 	@Test
 	public void createRequestWithDefaultOptionsModelOverride() {
 
-		OllamaChatClient client2 = new OllamaChatClient(new OllamaApi())
-			.withDefaultOptions(new OllamaOptions().withModel("DEFAULT_OPTIONS_MODEL"));
+		OllamaChatClient client2 = new OllamaChatClient(new OllamaApi(),
+				new OllamaOptions().withModel("DEFAULT_OPTIONS_MODEL"));
 
 		var request = client2.ollamaChatRequest(new Prompt("Test message content"), true);
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/transformer/ChatServiceContext.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.ai.chat.prompt.transformer;
 
 import org.springframework.ai.chat.prompt.Prompt;
+import org.springframework.ai.chat.service.ChatService;
 import org.springframework.ai.model.Content;
 
 import java.util.*;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/memory/ChatMemory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.chat.history;
+package org.springframework.ai.chat.memory;
 
 import java.util.List;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/memory/InMemoryChatMemory.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.chat.history;
+package org.springframework.ai.chat.memory;
 
 import java.util.ArrayList;
 import java.util.List;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/transformer/TransformerContentType.java
Patch:
@@ -17,7 +17,10 @@
 package org.springframework.ai.chat.prompt.transformer;
 
 /**
+ * This class provides constants for different content types used by transformers.
+ *
  * @author Christian Tzolov
+ * @since 1.0.0 M1
  */
 public class TransformerContentType {
 

File: spring-ai-core/src/main/java/org/springframework/ai/model/Content.java
Patch:
@@ -19,7 +19,7 @@ public interface Content {
 	/**
 	 * Get the content of the message.
 	 */
-	String getContent();
+	String getContent(); // TODO consider getText
 
 	/**
 	 * Get the media associated with the content.

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreProperties.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.qdrant;
 
+import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
@@ -29,7 +30,7 @@ public class QdrantVectorStoreProperties {
 	/**
 	 * The name of the collection to use in Qdrant.
 	 */
-	private String collectionName;
+	private String collectionName = QdrantVectorStore.DEFAULT_COLLECTION_NAME;
 
 	/**
 	 * The host of the Qdrant server.

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStorePropertiesTests.java
Patch:
@@ -16,19 +16,21 @@
 package org.springframework.ai.autoconfigure.vectorstore.qdrant;
 
 import org.junit.jupiter.api.Test;
+import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
  * @author Christian Tzolov
+ * @author Eddú Meléndez
  */
 public class QdrantVectorStorePropertiesTests {
 
 	@Test
 	public void defaultValues() {
 		var props = new QdrantVectorStoreProperties();
 
-		assertThat(props.getCollectionName()).isNull();
+		assertThat(props.getCollectionName()).isEqualTo(QdrantVectorStore.DEFAULT_COLLECTION_NAME);
 		assertThat(props.getHost()).isEqualTo("localhost");
 		assertThat(props.getPort()).isEqualTo(6334);
 		assertThat(props.isUseTls()).isFalse();

File: vector-stores/spring-ai-qdrant/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantVectorStore.java
Patch:
@@ -59,6 +59,8 @@ public class QdrantVectorStore implements VectorStore, InitializingBean {
 
 	private static final String DISTANCE_FIELD_NAME = "distance";
 
+	public static final String DEFAULT_COLLECTION_NAME = "vector_store";
+
 	private final EmbeddingClient embeddingClient;
 
 	private final QdrantClient qdrantClient;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/chatbot/OpenAiDefaultChatBotIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.ai.chat.prompt.transformer.TransformerContentType;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.openai.OpenAiChatOptions;
+import org.testcontainers.containers.wait.strategy.Wait;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 import org.testcontainers.qdrant.QdrantContainer;
@@ -91,7 +92,7 @@ public OpenAiDefaultChatBotIT(ChatClient chatClient, ChatBot chatBot, VectorStor
 	void simpleChat() {
 		loadData();
 
-		var prompt = new Prompt(new UserMessage("What bike is good for city commuting?"));
+		var prompt = new Prompt(new UserMessage("What reliable road bike?"));
 		var chatBotResponse = this.chatBot.call(new PromptContext(prompt));
 		String answer = chatBotResponse.getChatResponse().getResult().getOutput().getContent();
 		assertTrue(answer.contains("Celerity"), "Response does not include 'Celerity'");

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/transformer/VectorStoreRetriever.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
+import org.springframework.ai.vectorstore.filter.Filter;
 
 import java.util.List;
 import java.util.Objects;
@@ -60,8 +61,7 @@ public PromptContext transform(PromptContext promptContext) {
 			.map(m -> m.getContent())
 			.collect(Collectors.joining(System.lineSeparator()));
 
-		List<Document> documents = vectorStore.similaritySearch(searchRequest.withQuery(userMessage)
-			.withFilterExpression(TransformerContentType.EXTERNAL_KNOWLEDGE + "=='true'"));
+		List<Document> documents = vectorStore.similaritySearch(searchRequest.withQuery(userMessage));
 
 		logger.info("Retrieved {} documents for user message {}", documents.size(), userMessage);
 		for (Document document : documents) {

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatClientIT.java
Patch:
@@ -205,15 +205,15 @@ void functionCallTest() {
 			.withModel(AnthropicApi.ChatModel.CLAUDE_3_OPUS.getValue())
 			.withFunctionCallbacks(List.of(FunctionCallbackWrapper.builder(new MockWeatherService())
 				.withName("getCurrentWeather")
-				.withDescription("Get the weather in location")
+				.withDescription("Get the weather in location. Return temperature in 36°F or 36°C format.")
 				.build()))
 			.build();
 
 		ChatResponse response = chatClient.call(new Prompt(messages, promptOptions));
 
 		logger.info("Response: {}", response);
 
-		Generation generation = response.getResults().get(0);
+		Generation generation = response.getResult();
 		assertThat(generation.getOutput().getContent()).containsAnyOf("30.0", "30");
 		assertThat(generation.getOutput().getContent()).containsAnyOf("10.0", "10");
 		assertThat(generation.getOutput().getContent()).containsAnyOf("15.0", "15");

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/function/MockWeatherService.java
Patch:
@@ -15,14 +15,14 @@
  */
 package org.springframework.ai.azure.openai.function;
 
-import java.util.function.Function;
-
 import com.fasterxml.jackson.annotation.JsonClassDescription;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonPropertyDescription;
 
+import java.util.function.Function;
+
 /**
  * @author Christian Tzolov
  */
@@ -87,4 +87,4 @@ else if (request.location().contains("San Francisco")) {
 		return new Response(temperature, 15, 20, 2, 53, 45, Unit.C);
 	}
 
-}
\ No newline at end of file
+}

File: vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/chroma/ChromaApi.java
Patch:
@@ -82,7 +82,7 @@ public ChromaApi withKeyToken(String keyToken) {
 	 * @param password Credentials password.
 	 */
 	public ChromaApi withBasicAuthCredentials(String username, String password) {
-		this.restTemplate.getInterceptors().add(new BasicAuthenticationInterceptor(username, username));
+		this.restTemplate.getInterceptors().add(new BasicAuthenticationInterceptor(username, password));
 		return this;
 	}
 

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/TokenSecuredChromaWhereIT.java
Patch:
@@ -27,7 +27,6 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfigurationIT.java
Patch:
@@ -90,7 +90,7 @@ public void propertiesTest() {
 					"spring.ai.bedrock.aws.region=" + Region.EU_CENTRAL_1.id(),
 					"spring.ai.bedrock.cohere.embedding.model=MODEL_XYZ",
 					"spring.ai.bedrock.cohere.embedding.options.inputType=CLASSIFICATION",
-					"spring.ai.bedrock.cohere.embedding.options.truncate=RIGHT")
+					"spring.ai.bedrock.cohere.embedding.options.truncate=START")
 			.withConfiguration(AutoConfigurations.of(BedrockCohereEmbeddingAutoConfiguration.class))
 			.run(context -> {
 				var properties = context.getBean(BedrockCohereEmbeddingProperties.class);
@@ -101,7 +101,7 @@ public void propertiesTest() {
 				assertThat(properties.getModel()).isEqualTo("MODEL_XYZ");
 
 				assertThat(properties.getOptions().getInputType()).isEqualTo(InputType.CLASSIFICATION);
-				assertThat(properties.getOptions().getTruncate()).isEqualTo(CohereEmbeddingRequest.Truncate.RIGHT);
+				assertThat(properties.getOptions().getTruncate()).isEqualTo(CohereEmbeddingRequest.Truncate.START);
 
 				assertThat(awsProperties.getAccessKey()).isEqualTo("ACCESS_KEY");
 				assertThat(awsProperties.getSecretKey()).isEqualTo("SECRET_KEY");

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/client/ClientIT.java
Patch:
@@ -57,8 +57,8 @@ void helloWorldCompletion() {
 				}
 				```""";
 		assertThat(chatResponse.getResult().getOutput().getContent()).isEqualTo(expectedResponse);
-		assertThat(chatResponse.getResult().getOutput().getProperties()).containsKey("generated_tokens");
-		assertThat(chatResponse.getResult().getOutput().getProperties()).containsEntry("generated_tokens", 39);
+		assertThat(chatResponse.getResult().getOutput().getMetadata()).containsKey("generated_tokens");
+		assertThat(chatResponse.getResult().getOutput().getMetadata()).containsEntry("generated_tokens", 39);
 
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/AssistantMessage.java
Patch:
@@ -35,7 +35,7 @@ public AssistantMessage(String content, Map<String, Object> properties) {
 
 	@Override
 	public String toString() {
-		return "AssistantMessage{" + "content='" + getContent() + '\'' + ", properties=" + properties + ", messageType="
+		return "AssistantMessage{" + "content='" + getContent() + '\'' + ", properties=" + metadata + ", messageType="
 				+ messageType + '}';
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/FunctionMessage.java
Patch:
@@ -33,7 +33,7 @@ public FunctionMessage(String content, Map<String, Object> properties) {
 
 	@Override
 	public String toString() {
-		return "FunctionMessage{" + "content='" + getContent() + '\'' + ", properties=" + properties + ", messageType="
+		return "FunctionMessage{" + "content='" + getContent() + '\'' + ", properties=" + metadata + ", messageType="
 				+ messageType + '}';
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/SystemMessage.java
Patch:
@@ -36,7 +36,7 @@ public SystemMessage(Resource resource) {
 
 	@Override
 	public String toString() {
-		return "SystemMessage{" + "content='" + getContent() + '\'' + ", properties=" + properties + ", messageType="
+		return "SystemMessage{" + "content='" + getContent() + '\'' + ", properties=" + metadata + ", messageType="
 				+ messageType + '}';
 	}
 

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java
Patch:
@@ -176,7 +176,7 @@ public Builder withDistanceType(Neo4jDistanceType newDistanceType) {
 			 */
 			public Builder withLabel(String newLabel) {
 
-				Assert.hasText(newLabel, "Node label may not be null or blank");
+				Assert.hasText(newLabel, "Content label may not be null or blank");
 
 				this.label = newLabel;
 				return this;

File: vector-stores/spring-ai-pinecone/src/test/java/org/springframework/ai/vectorstore/PineconeVectorStoreIT.java
Patch:
@@ -292,7 +292,7 @@ public VectorStore vectorStore(PineconeVectorStoreConfig config, EmbeddingClient
 		}
 
 		@Bean
-		public EmbeddingClient embeddingClient() {
+		public TransformersEmbeddingClient embeddingClient() {
 			return new TransformersEmbeddingClient();
 		}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplate.java
Patch:
@@ -122,8 +122,7 @@ public OutputParser getOutputParser() {
 	}
 
 	/**
-	 * @deprecated Use {@link #setOutputConverter(StructuredOutputConverter)}
-	 * instead.
+	 * @deprecated Use {@link #setOutputConverter(StructuredOutputConverter)} instead.
 	 */
 	public void setOutputParser(OutputParser outputParser) {
 		Objects.requireNonNull(outputParser, "Output Parser can not be null");

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageOptions.java
Patch:
@@ -19,7 +19,6 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 import org.springframework.ai.image.ImageOptions;
-import org.springframework.ai.openai.api.OpenAiImageApi;
 
 import java.util.Objects;
 
@@ -44,7 +43,7 @@ public class OpenAiImageOptions implements ImageOptions {
 	 * The model to use for image generation.
 	 */
 	@JsonProperty("model")
-	private String model = OpenAiImageApi.DEFAULT_IMAGE_MODEL;
+	private String model;
 
 	/**
 	 * The width of the generated images. Must be one of 256, 512, or 1024 for dall-e-2.

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingClient.java
Patch:
@@ -112,9 +112,10 @@ private EmbeddingResponse generateEmbeddingResponse(Embeddings embeddings) {
 	private List<Embedding> generateEmbeddingList(List<EmbeddingItem> nativeData) {
 		List<Embedding> data = new ArrayList<>();
 		for (EmbeddingItem nativeDatum : nativeData) {
-			List<Double> nativeDatumEmbedding = nativeDatum.getEmbedding();
+			List<Float> nativeDatumEmbedding = nativeDatum.getEmbedding();
 			int nativeIndex = nativeDatum.getPromptIndex();
-			Embedding embedding = new Embedding(nativeDatumEmbedding, nativeIndex);
+			Embedding embedding = new Embedding(nativeDatumEmbedding.stream().map(f -> f.doubleValue()).toList(),
+					nativeIndex);
 			data.add(embedding);
 		}
 		return data;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -54,7 +54,7 @@ class FunctionCallWithFunctionBeanIT {
 
 	@Test
 	void functionCallTest() {
-		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.model=gpt-4-0125-preview")
+		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options..deployment-name=gpt-4-0125-preview")
 			.run(context -> {
 
 				ChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithFunctionWrapperIT.java
Patch:
@@ -53,7 +53,7 @@ public class FunctionCallWithFunctionWrapperIT {
 
 	@Test
 	void functionCallTest() {
-		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.model=gpt-4-0125-preview")
+		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.deployment-name=gpt-4-0125-preview")
 			.run(context -> {
 
 				AzureOpenAiChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/tool/FunctionCallWithPromptFunctionIT.java
Patch:
@@ -49,7 +49,7 @@ public class FunctionCallWithPromptFunctionIT {
 
 	@Test
 	void functionCallTest() {
-		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.model=gpt-4-0125-preview")
+		contextRunner.withPropertyValues("spring.ai.azure.openai.chat.options.deployment-name=gpt-4-0125-preview")
 			.run(context -> {
 
 				AzureOpenAiChatClient chatClient = context.getBean(AzureOpenAiChatClient.class);

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionClient.java
Patch:
@@ -193,6 +193,7 @@ OpenAiAudioApi.TranscriptionRequest createRequestBody(AudioTranscriptionPrompt r
 			.withTemperature(options.getTemperature())
 			.withLanguage(options.getLanguage())
 			.withModel(options.getModel())
+			.withGranularityType(options.getGranularityType())
 			.build();
 
 		return audioTranscriptionRequest;
@@ -221,6 +222,8 @@ private OpenAiAudioTranscriptionOptions merge(OpenAiAudioTranscriptionOptions so
 		merged.setResponseFormat(
 				source.getResponseFormat() != null ? source.getResponseFormat() : target.getResponseFormat());
 		merged.setTemperature(source.getTemperature() != null ? source.getTemperature() : target.getTemperature());
+		merged.setGranularityType(
+				source.getGranularityType() != null ? source.getGranularityType() : target.getGranularityType());
 		return merged;
 	}
 

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java
Patch:
@@ -149,8 +149,7 @@ public Builder withDatabaseName(String databaseName) {
 			 */
 			public Builder withEmbeddingDimension(int newEmbeddingDimension) {
 
-				Assert.isTrue(newEmbeddingDimension >= 1 && newEmbeddingDimension <= 2048,
-						"Dimension has to be withing the boundaries 1 and 2048 (inclusively)");
+				Assert.isTrue(newEmbeddingDimension >= 1, "Dimension has to be positive.");
 
 				this.embeddingDimension = newEmbeddingDimension;
 				return this;

File: vector-stores/spring-ai-cassandra/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStoreConfig.java
Patch:
@@ -260,7 +260,9 @@ public Builder withClusteringKeys(List<SchemaColumn> clusteringKeys) {
 			return this;
 		}
 
-		/** defaults (if null) to '<table_name>_<embedding_column_name>_idx' **/
+		/**
+		 * defaults (if null) to '&lt;table_name&gt;_&lt;embedding_column_name&gt;_idx'
+		 **/
 		@Nullable
 		public Builder withIndexName(String name) {
 			this.indexName = name;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreProperties.java
Patch:
@@ -33,7 +33,7 @@ public class CassandraVectorStoreProperties {
 
 	private String table = CassandraVectorStoreConfig.DEFAULT_TABLE_NAME;
 
-	private String indexName = CassandraVectorStoreConfig.DEFAULT_INDEX_NAME;
+	private String indexName = null;
 
 	private String contentColumnName = CassandraVectorStoreConfig.DEFAULT_CONTENT_COLUMN_NAME;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStorePropertiesTests.java
Patch:
@@ -34,7 +34,7 @@ void defaultValues() {
 		assertThat(props.getTable()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_TABLE_NAME);
 		assertThat(props.getContentColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_CONTENT_COLUMN_NAME);
 		assertThat(props.getEmbeddingColumnName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_EMBEDDING_COLUMN_NAME);
-		assertThat(props.getIndexName()).isEqualTo(CassandraVectorStoreConfig.DEFAULT_INDEX_NAME);
+		assertThat(props.getIndexName()).isNull();
 		assertThat(props.getDisallowSchemaCreation()).isFalse();
 		assertThat(props.getFixedThreadPoolExecutorSize())
 			.isEqualTo(CassandraVectorStoreConfig.DEFAULT_ADD_CONCURRENCY);

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/MistralAiChatClient.java
Patch:
@@ -177,7 +177,7 @@ public Flux<ChatResponse> stream(Prompt prompt) {
 	private ChatCompletion toChatCompletion(ChatCompletionChunk chunk) {
 		List<Choice> choices = chunk.choices()
 			.stream()
-			.map(cc -> new Choice(cc.index(), cc.delta(), cc.finishReason()))
+			.map(cc -> new Choice(cc.index(), cc.delta(), cc.finishReason(), cc.logprobs()))
 			.toList();
 
 		return new ChatCompletion(chunk.id(), "chat.completion", chunk.created(), chunk.model(), choices, null);

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiRetryTests.java
Patch:
@@ -109,7 +109,7 @@ public void beforeEach() {
 	public void mistralAiChatTransientError() {
 
 		var choice = new ChatCompletion.Choice(0, new ChatCompletionMessage("Response", Role.ASSISTANT),
-				ChatCompletionFinishReason.STOP);
+				ChatCompletionFinishReason.STOP, null);
 		ChatCompletion expectedChatCompletion = new ChatCompletion("id", "chat.completion", 789l, "model",
 				List.of(choice), new MistralAiApi.Usage(10, 10, 10));
 
@@ -137,7 +137,7 @@ public void mistralAiChatNonTransientError() {
 	public void mistralAiChatStreamTransientError() {
 
 		var choice = new ChatCompletionChunk.ChunkChoice(0, new ChatCompletionMessage("Response", Role.ASSISTANT),
-				ChatCompletionFinishReason.STOP);
+				ChatCompletionFinishReason.STOP, null);
 		ChatCompletionChunk expectedChatCompletion = new ChatCompletionChunk("id", "chat.completion.chunk", 789l,
 				"model", List.of(choice));
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiStreamFunctionCallingHelper.java
Patch:
@@ -190,8 +190,7 @@ public boolean isStreamingToolFunctionCallFinish(ChatCompletionChunk chatComplet
 		}
 
 		var choice = choices.get(0);
-		return choice.finishReason() == ChatCompletionFinishReason.TOOL_CALL
-				|| choice.finishReason() == ChatCompletionFinishReason.TOOL_CALLS;
+		return choice.finishReason() == ChatCompletionFinishReason.TOOL_CALLS;
 	}
 
 }

File: vector-stores/spring-ai-azure/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -320,7 +320,7 @@ private List<Float> toFloatList(List<Double> doubleList) {
 	}
 
 	/**
-	 * Internal data structure for retrieving and and storing documents.
+	 * Internal data structure for retrieving and storing documents.
 	 */
 	private record AzureSearchDocument(String id, String content, List<Double> embedding, String metadata) {
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/cassandra/CassandraVectorStoreAutoConfiguration.java
Patch:
@@ -36,7 +36,7 @@
  * @since 1.0.0
  */
 @AutoConfiguration(after = CassandraAutoConfiguration.class)
-@ConditionalOnClass({ CassandraVectorStore.class, EmbeddingClient.class, CqlSession.class })
+@ConditionalOnClass({ CassandraVectorStore.class, CqlSession.class })
 @EnableConfigurationProperties(CassandraVectorStoreProperties.class)
 public class CassandraVectorStoreAutoConfiguration {
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfiguration.java
Patch:
@@ -35,6 +35,7 @@
  * Leverages the Spring Cloud AWS to resolve the {@link AwsCredentialsProvider}.
  *
  * @author Christian Tzolov
+ * @author Wei Jiang
  * @since 0.8.0
  */
 @AutoConfiguration
@@ -46,14 +47,14 @@ public class BedrockAnthropic3ChatAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public Anthropic3ChatBedrockApi anthropicApi(AwsCredentialsProvider credentialsProvider,
+	public Anthropic3ChatBedrockApi anthropic3Api(AwsCredentialsProvider credentialsProvider,
 			BedrockAnthropic3ChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new Anthropic3ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
 				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean
-	public BedrockAnthropic3ChatClient anthropicChatClient(Anthropic3ChatBedrockApi anthropicApi,
+	public BedrockAnthropic3ChatClient anthropic3ChatClient(Anthropic3ChatBedrockApi anthropicApi,
 			BedrockAnthropic3ChatProperties properties) {
 		return new BedrockAnthropic3ChatClient(anthropicApi, properties.getOptions());
 	}

File: vector-stores/spring-ai-cassandra/src/main/java/org/springframework/ai/vectorstore/CassandraVectorStoreConfig.java
Patch:
@@ -79,7 +79,7 @@ public final class CassandraVectorStoreConfig implements AutoCloseable {
 
 	public static final int DEFAULT_ADD_CONCURRENCY = 16;
 
-	private static final Logger logger = LoggerFactory.getLogger(CassandraVectorStore.class);
+	private static final Logger logger = LoggerFactory.getLogger(CassandraVectorStoreConfig.class);
 
 	record Schema(String keyspace, String table, List<SchemaColumn> partitionKeys, List<SchemaColumn> clusteringKeys,
 			String content, String embedding, String index, Set<SchemaColumn> metadataColumns) {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/StreamingChatClient.java
Patch:
@@ -33,7 +33,7 @@ default Flux<String> stream(String message) {
 						: response.getResult().getOutput().getContent());
 	}
 
-	default Flux<String> call(Message... messages) {
+	default Flux<String> stream(Message... messages) {
 		Prompt prompt = new Prompt(Arrays.asList(messages));
 		return stream(prompt).map(response -> (response.getResult() == null || response.getResult().getOutput() == null
 				|| response.getResult().getOutput().getContent() == null) ? ""

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioSpeechClient.java
Patch:
@@ -133,7 +133,7 @@ private OpenAiAudioApi.SpeechRequest createRequestBody(SpeechPrompt request) {
 
 		if (request.getOptions() != null) {
 			if (request.getOptions() instanceof OpenAiAudioSpeechOptions runtimeOptions) {
-				options = this.merge(options, runtimeOptions);
+				options = this.merge(runtimeOptions, options);
 			}
 			else {
 				throw new IllegalArgumentException("Prompt options are not of type SpeechOptions: "

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionClient.java
Patch:
@@ -178,7 +178,7 @@ OpenAiAudioApi.TranscriptionRequest createRequestBody(AudioTranscriptionPrompt r
 
 		if (request.getOptions() != null) {
 			if (request.getOptions() instanceof OpenAiAudioTranscriptionOptions runtimeOptions) {
-				options = this.merge(options, runtimeOptions);
+				options = this.merge(runtimeOptions, options);
 			}
 			else {
 				throw new IllegalArgumentException("Prompt options are not of type TranscriptionOptions: "

File: vector-stores/spring-ai-cassandra/src/main/java/org/springframework/ai/vectorstore/CassandraFilterExpressionConverter.java
Patch:
@@ -79,7 +79,7 @@ private static void doOperand(ExpressionType type, StringBuilder context) {
 			// TODO SAI supports collections
 			// reach out to mck@apache.org if you'd like these implemented
 			// case CONTAINS -> context.append(" CONTAINS ");
-			// case CONTAINS_KEY -> context.append(" CONTAINS KEY ");
+			// case CONTAINS_KEY -> context.append(" CONTAINS_KEY ");
 			default -> throw new UnsupportedOperationException(
 					String.format("Expression type %s not yet implemented. Patches welcome.", type));
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStorePropertiesTests.java
Patch:
@@ -28,8 +28,8 @@ class RedisVectorStorePropertiesTests {
 	void defaultValues() {
 		var props = new RedisVectorStoreProperties();
 		assertThat(props.getUri()).isEqualTo("redis://localhost:6379");
-		assertThat(props.getIndex()).isNull();
-		assertThat(props.getPrefix()).isNull();
+		assertThat(props.getIndex()).isEqualTo("default-index");
+		assertThat(props.getPrefix()).isEqualTo("default:");
 	}
 
 	@Test

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicChatClientIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.anthropic;
 
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -204,7 +205,8 @@ public static class TestConfiguration {
 		@Bean
 		public AnthropicChatBedrockApi anthropicApi() {
 			return new AnthropicChatBedrockApi(AnthropicChatBedrockApi.AnthropicChatModel.CLAUDE_V2.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicCreateRequestTests.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.anthropic;
 
+import java.time.Duration;
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
@@ -32,7 +33,7 @@
 public class BedrockAnthropicCreateRequestTests {
 
 	private AnthropicChatBedrockApi anthropicChatApi = new AnthropicChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),
-			Region.US_EAST_1.id());
+			Region.US_EAST_1.id(), Duration.ofMillis(1000L));
 
 	@Test
 	public void createRequestWithChatOptions() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/api/AnthropicChatBedrockApiIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.anthropic.api;
 
+import java.time.Duration;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -43,7 +44,8 @@ public class AnthropicChatBedrockApiIT {
 	private final Logger logger = LoggerFactory.getLogger(AnthropicChatBedrockApiIT.class);
 
 	private AnthropicChatBedrockApi anthropicChatApi = new AnthropicChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),
-			EnvironmentVariableCredentialsProvider.create(), Region.US_WEST_2.id(), new ObjectMapper());
+			EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+			Duration.ofMinutes(2));
 
 	@Test
 	public void chatCompletion() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3ChatClientIT.java
Patch:
@@ -49,6 +49,7 @@
 import software.amazon.awssdk.regions.Region;
 
 import java.io.IOException;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -223,7 +224,8 @@ public static class TestConfiguration {
 		@Bean
 		public Anthropic3ChatBedrockApi anthropicApi() {
 			return new Anthropic3ChatBedrockApi(Anthropic3ChatBedrockApi.AnthropicChatModel.CLAUDE_V3_SONNET.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(5));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic3/BedrockAnthropic3CreateRequestTests.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import software.amazon.awssdk.regions.Region;
 
+import java.time.Duration;
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -31,7 +32,7 @@
 public class BedrockAnthropic3CreateRequestTests {
 
 	private Anthropic3ChatBedrockApi anthropicChatApi = new Anthropic3ChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),
-			Region.EU_CENTRAL_1.id());
+			Region.EU_CENTRAL_1.id(), Duration.ofMillis(1000L));
 
 	@Test
 	public void createRequestWithChatOptions() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatClientIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.cohere;
 
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -200,7 +201,8 @@ public static class TestConfiguration {
 		@Bean
 		public CohereChatBedrockApi cohereApi() {
 			return new CohereChatBedrockApi(CohereChatModel.COHERE_COMMAND_V14.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatCreateRequestTests.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.cohere;
 
+import java.time.Duration;
 import java.util.List;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -38,7 +39,8 @@
 public class BedrockCohereChatCreateRequestTests {
 
 	private CohereChatBedrockApi chatApi = new CohereChatBedrockApi(CohereChatModel.COHERE_COMMAND_V14.id(),
-			EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+			EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+			Duration.ofMinutes(2));
 
 	@Test
 	public void createRequestWithChatOptions() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingClientIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.cohere;
 
+import java.time.Duration;
 import java.util.List;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -87,7 +88,8 @@ public static class TestConfiguration {
 		@Bean
 		public CohereEmbeddingBedrockApi cohereEmbeddingApi() {
 			return new CohereEmbeddingBedrockApi(CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/api/CohereChatBedrockApiIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.cohere.api;
 
+import java.time.Duration;
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
@@ -39,7 +40,7 @@
 public class CohereChatBedrockApiIT {
 
 	private CohereChatBedrockApi cohereChatApi = new CohereChatBedrockApi(CohereChatModel.COHERE_COMMAND_V14.id(),
-			Region.US_EAST_1.id());
+			Region.US_EAST_1.id(), Duration.ofMinutes(2));
 
 	@Test
 	public void requestBuilder() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/cohere/api/CohereEmbeddingBedrockApiIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.cohere.api;
 
+import java.time.Duration;
 import java.util.List;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -38,7 +39,7 @@ public class CohereEmbeddingBedrockApiIT {
 
 	CohereEmbeddingBedrockApi api = new CohereEmbeddingBedrockApi(
 			CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id(), EnvironmentVariableCredentialsProvider.create(),
-			Region.US_EAST_1.id(), new ObjectMapper());
+			Region.US_EAST_1.id(), new ObjectMapper(), Duration.ofMinutes(2));
 
 	@Test
 	public void embedText() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApiIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.jurassic2.api;
 
+import java.time.Duration;
 import java.util.stream.Collectors;
 
 import org.junit.jupiter.api.Test;
@@ -35,7 +36,7 @@
 public class Ai21Jurassic2ChatBedrockApiIT {
 
 	Ai21Jurassic2ChatBedrockApi api = new Ai21Jurassic2ChatBedrockApi(Ai21Jurassic2ChatModel.AI21_J2_ULTRA_V1.id(),
-			Region.US_EAST_1.id());
+			Region.US_EAST_1.id(), Duration.ofMinutes(2));
 
 	@Test
 	public void chatCompletion() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/api/BedrockAi21Jurassic2ChatClientIT.java
Patch:
@@ -39,6 +39,7 @@
 import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
 import software.amazon.awssdk.regions.Region;
 
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -146,7 +147,8 @@ public static class TestConfiguration {
 		public Ai21Jurassic2ChatBedrockApi jurassic2ChatBedrockApi() {
 			return new Ai21Jurassic2ChatBedrockApi(
 					Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel.AI21_J2_MID_V1.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatClientIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.llama2;
 
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -205,7 +206,8 @@ public static class TestConfiguration {
 		@Bean
 		public Llama2ChatBedrockApi llama2Api() {
 			return new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/api/Llama2ChatBedrockApiIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.llama2.api;
 
+import java.time.Duration;
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
@@ -36,7 +37,7 @@
 public class Llama2ChatBedrockApiIT {
 
 	private Llama2ChatBedrockApi llama2ChatApi = new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),
-			Region.US_EAST_1.id());
+			Region.US_EAST_1.id(), Duration.ofMinutes(2));
 
 	@Test
 	public void chatCompletion() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanChatClientIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.titan;
 
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
@@ -206,7 +207,8 @@ public static class TestConfiguration {
 		@Bean
 		public TitanChatBedrockApi titanApi() {
 			return new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),
-					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanChatCreateRequestTests.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.titan;
 
+import java.time.Duration;
 import java.util.List;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -34,7 +35,8 @@
 public class BedrockTitanChatCreateRequestTests {
 
 	private TitanChatBedrockApi api = new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),
-			EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
+			EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper(),
+			Duration.ofMinutes(2));
 
 	@Test
 	public void createRequestWithChatOptions() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/BedrockTitanEmbeddingClientIT.java
Patch:
@@ -16,6 +16,7 @@
 package org.springframework.ai.bedrock.titan;
 
 import java.io.IOException;
+import java.time.Duration;
 import java.util.Base64;
 import java.util.List;
 
@@ -69,7 +70,8 @@ public static class TestConfiguration {
 
 		@Bean
 		public TitanEmbeddingBedrockApi titanEmbeddingApi() {
-			return new TitanEmbeddingBedrockApi(TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(), Region.US_EAST_1.id());
+			return new TitanEmbeddingBedrockApi(TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(), Region.US_EAST_1.id(),
+					Duration.ofMinutes(2));
 		}
 
 		@Bean

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApiIT.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.springframework.ai.bedrock.titan.api;
 
+import java.time.Duration;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -38,7 +39,7 @@
 public class TitanChatBedrockApiIT {
 
 	TitanChatBedrockApi titanBedrockApi = new TitanChatBedrockApi(TitanChatModel.TITAN_TEXT_EXPRESS_V1.id(),
-			Region.EU_CENTRAL_1.id());
+			Region.EU_CENTRAL_1.id(), Duration.ofMinutes(2));
 
 	TitanChatRequest titanChatRequest = TitanChatRequest.builder("Give me the names of 3 famous pirates?")
 		.withTemperature(0.5f)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/titan/api/TitanEmbeddingBedrockApiIT.java
Patch:
@@ -16,6 +16,7 @@
 package org.springframework.ai.bedrock.titan.api;
 
 import java.io.IOException;
+import java.time.Duration;
 import java.util.Base64;
 
 import org.junit.jupiter.api.Test;
@@ -40,7 +41,7 @@ public class TitanEmbeddingBedrockApiIT {
 	public void embedText() {
 
 		TitanEmbeddingBedrockApi titanEmbedApi = new TitanEmbeddingBedrockApi(
-				TitanEmbeddingModel.TITAN_EMBED_TEXT_V1.id(), Region.US_EAST_1.id());
+				TitanEmbeddingModel.TITAN_EMBED_TEXT_V1.id(), Region.US_EAST_1.id(), Duration.ofMinutes(2));
 
 		TitanEmbeddingRequest request = TitanEmbeddingRequest.builder().withInputText("I like to eat apples.").build();
 
@@ -55,7 +56,7 @@ public void embedText() {
 	public void embedImage() throws IOException {
 
 		TitanEmbeddingBedrockApi titanEmbedApi = new TitanEmbeddingBedrockApi(
-				TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(), Region.US_EAST_1.id());
+				TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(), Region.US_EAST_1.id(), Duration.ofMinutes(2));
 
 		byte[] image = new DefaultResourceLoader().getResource("classpath:/spring_framework.png")
 			.getContentAsByteArray();

File: spring-ai-core/src/main/java/org/springframework/ai/model/ModelOptionsUtils.java
Patch:
@@ -59,7 +59,7 @@
  */
 public final class ModelOptionsUtils {
 
-	private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper()
+	public final static ObjectMapper OBJECT_MAPPER = new ObjectMapper()
 		.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
 		.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS)
 		.registerModule(new JavaTimeModule());

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic/BedrockAnthropicChatAutoConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class BedrockAnthropicChatAutoConfiguration {
 	public AnthropicChatBedrockApi anthropicApi(AwsCredentialsProvider credentialsProvider,
 			BedrockAnthropicChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new AnthropicChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/anthropic3/BedrockAnthropic3ChatAutoConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class BedrockAnthropic3ChatAutoConfiguration {
 	public Anthropic3ChatBedrockApi anthropicApi(AwsCredentialsProvider credentialsProvider,
 			BedrockAnthropic3ChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new Anthropic3ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfiguration.java
Patch:
@@ -47,7 +47,7 @@ public class BedrockCohereChatAutoConfiguration {
 	public CohereChatBedrockApi cohereChatApi(AwsCredentialsProvider credentialsProvider,
 			BedrockCohereChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new CohereChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class BedrockCohereEmbeddingAutoConfiguration {
 	public CohereEmbeddingBedrockApi cohereEmbeddingApi(AwsCredentialsProvider credentialsProvider,
 			BedrockCohereEmbeddingProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new CohereEmbeddingBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/jurrasic2/BedrockAi21Jurassic2ChatAutoConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class BedrockAi21Jurassic2ChatAutoConfiguration {
 	public Ai21Jurassic2ChatBedrockApi ai21Jurassic2ChatBedrockApi(AwsCredentialsProvider credentialsProvider,
 			BedrockAi21Jurassic2ChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new Ai21Jurassic2ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/llama2/BedrockLlama2ChatAutoConfiguration.java
Patch:
@@ -50,7 +50,7 @@ public class BedrockLlama2ChatAutoConfiguration {
 	public Llama2ChatBedrockApi llama2Api(AwsCredentialsProvider credentialsProvider,
 			BedrockLlama2ChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new Llama2ChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public TitanChatBedrockApi titanChatBedrockApi(AwsCredentialsProvider credential
 			BedrockTitanChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 
 		return new TitanChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingAutoConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class BedrockTitanEmbeddingAutoConfiguration {
 	public TitanEmbeddingBedrockApi titanEmbeddingBedrockApi(AwsCredentialsProvider credentialsProvider,
 			BedrockTitanEmbeddingProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new TitanEmbeddingBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
-				new ObjectMapper());
+				new ObjectMapper(), awsProperties.getTimeout());
 	}
 
 	@Bean

File: models/spring-ai-vertex-ai-gemini/src/test/java/org/springframework/ai/vertexai/gemini/function/VertexAiGeminiChatClientFunctionCallingIT.java
Patch:
@@ -146,7 +146,7 @@ public void functionCallTestInferredOpenApiSchema() {
 	public void functionCallTestInferredOpenApiSchemaStream() {
 
 		UserMessage userMessage = new UserMessage(
-				"What's the weather like in San Francisco, in Paris and in Tokyo? Use Multi-turn function calling.");
+				"What's the weather like in San Francisco, in Paris and in Tokyo, Japan? Use Multi-turn function calling. Provide answer for all requested locations.");
 
 		List<Message> messages = new ArrayList<>(List.of(userMessage));
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.springframework.ai.chroma.ChromaApi;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorsore.ChromaVectorStore;
+import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreProperties.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.springframework.ai.autoconfigure.vectorstore.chroma;
 
+import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.boot.context.properties.ConfigurationProperties;
-import org.springframework.ai.vectorsore.ChromaVectorStore;
 
 /**
  * @author Christian Tzolov

File: vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/vectorstore/JsonUtils.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.vectorsore;
+package org.springframework.ai.vectorstore;
 
 import java.util.List;
 import java.util.Map;

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/BasicAuthChromaWhereIT.java
Patch:
@@ -28,8 +28,8 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
+import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.ai.openai.OpenAiEmbeddingClient;
-import org.springframework.ai.vectorsore.ChromaVectorStore;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -29,8 +29,8 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
+import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.ai.openai.OpenAiEmbeddingClient;
-import org.springframework.ai.vectorsore.ChromaVectorStore;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/TokenSecuredChromaWhereIT.java
Patch:
@@ -27,8 +27,8 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
+import org.springframework.ai.vectorstore.ChromaVectorStore;
 import org.springframework.ai.openai.OpenAiEmbeddingClient;
-import org.springframework.ai.vectorsore.ChromaVectorStore;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiPropertiesTests.java
Patch:
@@ -20,6 +20,7 @@
 import org.skyscreamer.jsonassert.JSONCompareMode;
 
 import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
+import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.openai.OpenAiChatClient;
 import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.ai.openai.OpenAiImageClient;
@@ -377,7 +378,7 @@ public void chatOptionsTest() {
 				"spring.ai.openai.chat.options.topP=0.56",
 
 				// "spring.ai.openai.chat.options.toolChoice.functionName=toolChoiceFunctionName",
-				"spring.ai.openai.chat.options.toolChoice=" + ToolChoiceBuilder.FUNCTION("toolChoiceFunctionName"),
+				"spring.ai.openai.chat.options.toolChoice=" + ModelOptionsUtils.toJsonString(ToolChoiceBuilder.FUNCTION("toolChoiceFunctionName")),
 
 				"spring.ai.openai.chat.options.tools[0].function.name=myFunction1",
 				"spring.ai.openai.chat.options.tools[0].function.description=function description",

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaEmbeddingClient.java
Patch:
@@ -135,7 +135,8 @@ OllamaApi.EmbeddingRequest ollamaEmbeddingRequest(String inputContent, Embedding
 			throw new IllegalArgumentException("Model is not set!");
 		}
 		String model = mergedOptions.getModel();
-		return new EmbeddingRequest(model, inputContent, OllamaOptions.filterNonSupportedFields(mergedOptions.toMap()));
+		return new EmbeddingRequest(model, inputContent, null,
+				OllamaOptions.filterNonSupportedFields(mergedOptions.toMap()));
 	}
 
 }
\ No newline at end of file

File: models/spring-ai-watsonx-ai/src/main/java/org/springframework/ai/watsonx/api/WatsonxAiRequest.java
Patch:
@@ -21,6 +21,7 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 import org.springframework.ai.watsonx.WatsonxAiChatOptions;
+import org.springframework.util.Assert;
 
 // @formatter:off
 @JsonInclude(JsonInclude.Include.NON_NULL)
@@ -62,6 +63,7 @@ public WatsonxAiRequest withProjectId(String projectId) {
     public static Builder builder(String input) { return new Builder(input); }
 
     public static class Builder {
+        public static final String MODEL_PARAMETER_IS_REQUIRED = "Model parameter is required";
         private final String input;
         private Map<String, Object> parameters;
         private String model = "";
@@ -71,6 +73,7 @@ public Builder(String input) {
         }
 
         public Builder withParameters(Map<String, Object> parameters) {
+            Assert.notNull(parameters.get("model"), MODEL_PARAMETER_IS_REQUIRED);
             this.model = parameters.get("model").toString();
             this.parameters = WatsonxAiChatOptions.filterNonSupportedFields(parameters);
             return this;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiChatProperties.java
Patch:
@@ -19,6 +19,8 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
+import java.util.List;
+
 /**
  * Chat properties for Watsonx.AI Chat.
  *
@@ -48,6 +50,7 @@ public class WatsonxAiChatProperties {
 		.withMaxNewTokens(20)
 		.withMinNewTokens(0)
 		.withRepetitionPenalty(1.0f)
+		.withStopSequences(List.of())
 		.build();
 
 	public boolean isEnabled() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/watsonxai/WatsonxAiChatProperties.java
Patch:
@@ -40,6 +40,7 @@ public class WatsonxAiChatProperties {
 	 */
 	@NestedConfigurationProperty
 	private WatsonxAiChatOptions options = WatsonxAiChatOptions.builder()
+		.withModel("google/flan-ul2")
 		.withTemperature(0.7f)
 		.withTopP(1.0f)
 		.withTopK(50)

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicCreateRequestTests.java
Patch:
@@ -32,7 +32,7 @@
 public class BedrockAnthropicCreateRequestTests {
 
 	private AnthropicChatBedrockApi anthropicChatApi = new AnthropicChatBedrockApi(AnthropicChatModel.CLAUDE_V2.id(),
-			Region.EU_CENTRAL_1.id());
+			Region.US_EAST_1.id());
 
 	@Test
 	public void createRequestWithChatOptions() {

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatClientIT.java
Patch:
@@ -62,7 +62,7 @@ class OllamaChatClientIT {
 	private static final Log logger = LogFactory.getLog(OllamaChatClientIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.23").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.29").withExposedPorts(11434);
 
 	static String baseUrl;
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingClientIT.java
Patch:
@@ -45,7 +45,7 @@ class OllamaEmbeddingClientIT {
 	private static final Log logger = LogFactory.getLog(OllamaApiIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.23").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.29").withExposedPorts(11434);
 
 	static String baseUrl;
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaApiIT.java
Patch:
@@ -50,7 +50,7 @@ public class OllamaApiIT {
 	private static final Log logger = LogFactory.getLog(OllamaApiIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.23").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.29").withExposedPorts(11434);
 
 	static OllamaApi ollamaApi;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationIT.java
Patch:
@@ -48,7 +48,7 @@ public class OllamaEmbeddingAutoConfigurationIT {
 	private static String MODEL_NAME = "orca-mini";
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.23").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.29").withExposedPorts(11434);
 
 	static String baseUrl;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaImage.java
Patch:
@@ -17,6 +17,6 @@
 
 public class OllamaImage {
 
-	static final String IMAGE = "ollama/ollama:0.1.23";
+	static final String IMAGE = "ollama/ollama:0.1.29";
 
 }

File: spring-ai-spring-boot-testcontainers/src/test/java/org/springframework/ai/testcontainers/service/connection/ollama/OllamaContainerConnectionDetailsFactoryTest.java
Patch:
@@ -53,7 +53,7 @@ class OllamaContainerConnectionDetailsFactoryTest {
 
 	@Container
 	@ServiceConnection
-	static OllamaContainer ollama = new OllamaContainer("ollama/ollama:0.1.23");
+	static OllamaContainer ollama = new OllamaContainer("ollama/ollama:0.1.29");
 
 	@Autowired
 	private OllamaEmbeddingClient embeddingClient;

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaModelOptionsTests.java
Patch:
@@ -33,7 +33,6 @@ public void testOptions() {
 		var optionsMap = options.toMap();
 		System.out.println(optionsMap);
 		assertThat(optionsMap).containsEntry("temperature", 3.14);
-		assertThat(optionsMap).containsEntry("embedding_only", false);
 		assertThat(optionsMap).containsEntry("top_k", 30);
 		assertThat(optionsMap).containsEntry("stop", List.of("a", "b", "c"));
 	}

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/api/TitanChatBedrockApi.java
Patch:
@@ -43,7 +43,7 @@
 public class TitanChatBedrockApi extends
 		AbstractBedrockApi<TitanChatRequest, TitanChatResponse, TitanChatResponseChunk> {
 
-	TitanChatBedrockApi(String modelId, String region) {
+	public TitanChatBedrockApi(String modelId, String region) {
 		super(modelId, region);
 	}
 
@@ -253,4 +253,4 @@ public Flux<TitanChatResponseChunk> chatCompletionStream(TitanChatRequest reques
 		return this.internalInvocationStream(request, TitanChatResponseChunk.class);
 	}
 }
-// @formatter:on
\ No newline at end of file
+// @formatter:on

File: models/spring-ai-anthropic/src/test/java/org/springframework/ai/anthropic/AnthropicChatClientIT.java
Patch:
@@ -180,7 +180,7 @@ void multiModalityTest() throws IOException {
 
 		byte[] imageData = new ClassPathResource("/test.png").getContentAsByteArray();
 
-		var userMessage = new UserMessage("Explain what do you see o this picture?",
+		var userMessage = new UserMessage("Explain what do you see on this picture?",
 				List.of(new Media(MimeTypeUtils.IMAGE_PNG, imageData)));
 
 		ChatResponse response = chatClient.call(new Prompt(List.of(userMessage)));

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/OpenAiApiIT.java
Patch:
@@ -21,7 +21,6 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
 
-import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionChunk;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/OpenAiTranscriptionClientIT.java
Patch:
@@ -43,7 +43,7 @@ void transcriptionTest() {
 			.withTemperature(0f)
 			.build();
 		AudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile, transcriptionOptions);
-		AudioTranscriptionResponse response = openAiTranscriptionClient.call(transcriptionRequest);
+		AudioTranscriptionResponse response = transcriptionClient.call(transcriptionRequest);
 		assertThat(response.getResults()).hasSize(1);
 		assertThat(response.getResults().get(0).getOutput().toLowerCase().contains("fellow")).isTrue();
 	}
@@ -59,7 +59,7 @@ void transcriptionTestWithOptions() {
 			.withResponseFormat(responseFormat)
 			.build();
 		AudioTranscriptionPrompt transcriptionRequest = new AudioTranscriptionPrompt(audioFile, transcriptionOptions);
-		AudioTranscriptionResponse response = openAiTranscriptionClient.call(transcriptionRequest);
+		AudioTranscriptionResponse response = transcriptionClient.call(transcriptionRequest);
 		assertThat(response.getResults()).hasSize(1);
 		assertThat(response.getResults().get(0).getOutput().toLowerCase().contains("fellow")).isTrue();
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageClientIT.java
Patch:
@@ -39,7 +39,7 @@ void imageAsUrlTest() {
 
 		ImagePrompt imagePrompt = new ImagePrompt(instructions, options);
 
-		ImageResponse imageResponse = openaiImageClient.call(imagePrompt);
+		ImageResponse imageResponse = imageClient.call(imagePrompt);
 
 		assertThat(imageResponse.getResults()).hasSize(1);
 

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiApi.java
Patch:
@@ -705,7 +705,7 @@ public ResponseEntity<ChatCompletion> chatCompletionEntity(ChatCompletionRequest
 			.toEntity(ChatCompletion.class);
 	}
 
-	private MIstralAiStreamFunctionCallingHelper chunkMerger = new MIstralAiStreamFunctionCallingHelper();
+	private MistralAiStreamFunctionCallingHelper chunkMerger = new MistralAiStreamFunctionCallingHelper();
 
 	/**
 	 * Creates a streaming chat response for the given chat conversation.

File: models/spring-ai-mistral-ai/src/main/java/org/springframework/ai/mistralai/api/MistralAiStreamFunctionCallingHelper.java
Patch:
@@ -37,7 +37,7 @@
  * @author Christian Tzolov
  * @since 0.8.1
  */
-public class MIstralAiStreamFunctionCallingHelper {
+public class MistralAiStreamFunctionCallingHelper {
 
 	/**
 	 * Merge the previous and current ChatCompletionChunk into a single one.

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -380,7 +380,7 @@ public static class ToolChoiceBuilder {
 			/**
 			 * Model can pick between generating a message or calling a function.
 			 */
-			public static final String AUTO = "none";
+			public static final String AUTO = "auto";
 			/**
 			 * Model will not call a function and instead generates a message
 			 */

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterExpressionConverter.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.springframework.ai.vectorstore.filter;
 
-import org.springframework.ai.vectorstore.filter.Filter;
-
 /**
  * Converters a generic, portable {@link Filter.Expression} into a
  * {@link org.springframework.ai.vectorstore.VectorStore} specific expression language

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -253,7 +253,7 @@ public Function(String description, String name, String jsonSchema) {
 		}
 	}
 
-/**
+        /**
 	 * Creates a model response for the given chat conversation.
 	 *
 	 * @param messages A list of messages comprising the conversation so far.

File: spring-ai-core/src/main/java/org/springframework/ai/document/ContentFormatter.java
Patch:
@@ -16,7 +16,8 @@
 package org.springframework.ai.document;
 
 /**
- * Converts the Document text and metadata into an AI, prompt-friendly text representation.
+ * Converts the Document text and metadata into an AI, prompt-friendly text
+ * representation.
  *
  * @author Christian Tzolov
  */

File: spring-ai-core/src/main/java/org/springframework/ai/model/StreamingModelClient.java
Patch:
@@ -18,8 +18,8 @@
 import reactor.core.publisher.Flux;
 
 /**
- * The StreamingModelClient interface provides a generic API for invoking an AI models with
- * streaming response. It abstracts the process of sending requests and receiving a
+ * The StreamingModelClient interface provides a generic API for invoking an AI models
+ * with streaming response. It abstracts the process of sending requests and receiving a
  * streaming responses. The interface uses Java generics to accommodate different types of
  * requests and responses, enhancing flexibility and adaptability across different AI
  * model implementations.

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereEmbeddingOptions.java
Patch:
@@ -32,7 +32,7 @@ public class BedrockCohereEmbeddingOptions implements EmbeddingOptions {
 	// @formatter:off
 	/**
 	 * Prepends special tokens to differentiate each type from one another. You should not mix
-	 * different types together, except when mixing types for for search and retrieval.
+	 * different types together, except when mixing types for search and retrieval.
 	 * In this case, embed your corpus with the search_document type and embedded queries with
 	 * type search_query type.
 	 */

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/api/CohereEmbeddingBedrockApi.java
Patch:
@@ -69,7 +69,7 @@ public CohereEmbeddingBedrockApi(String modelId, AwsCredentialsProvider credenti
 	 * @param texts An array of strings for the model to embed. For optimal performance, we recommend reducing the
 	 * length of each text to less than 512 tokens. 1 token is about 4 characters.
 	 * @param inputType Prepends special tokens to differentiate each type from one another. You should not mix
-	 * different types together, except when mixing types for for search and retrieval. In this case, embed your corpus
+	 * different types together, except when mixing types for search and retrieval. In this case, embed your corpus
 	 * with the search_document type and embedded queries with type search_query type.
 	 * @param truncate Specifies how the API handles inputs longer than the maximum token length. If you specify LEFT or
 	 * RIGHT, the model discards the input until the remaining input is exactly the maximum input token length for the

File: spring-ai-core/src/main/java/org/springframework/ai/document/ContentFormatter.java
Patch:
@@ -16,7 +16,7 @@
 package org.springframework.ai.document;
 
 /**
- * Converts the Document text and metadata into a AI, prompt-friendly text representation.
+ * Converts the Document text and metadata into an AI, prompt-friendly text representation.
  *
  * @author Christian Tzolov
  */

File: spring-ai-core/src/main/java/org/springframework/ai/model/StreamingModelClient.java
Patch:
@@ -18,7 +18,7 @@
 import reactor.core.publisher.Flux;
 
 /**
- * The StreamingModelClient interface provides a generic API for invoking a AI models with
+ * The StreamingModelClient interface provides a generic API for invoking an AI models with
  * streaming response. It abstracts the process of sending requests and receiving a
  * streaming responses. The interface uses Java generics to accommodate different types of
  * requests and responses, enhancing flexibility and adaptability across different AI

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatOptions.java
Patch:
@@ -121,11 +121,11 @@ public void setStopSequences(List<String> stopSequences) {
 
 	@Override
 	public Integer getTopK() {
-		throw new UnsupportedOperationException("Bedrock Titian Chat does not support the 'TopK' option.");
+		throw new UnsupportedOperationException("Bedrock Titan Chat does not support the 'TopK' option.");
 	}
 
 	public void setTopK(Integer topK) {
-		throw new UnsupportedOperationException("Bedrock Titian Chat does not support the 'TopK' option.'");
+		throw new UnsupportedOperationException("Bedrock Titan Chat does not support the 'TopK' option.'");
 	}
 
 }

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiAudioTranscriptionOptions.java
Patch:
@@ -38,8 +38,7 @@ public class OpenAiAudioTranscriptionOptions implements ModelOptions {
 	private @JsonProperty("model") String model;
 
 	/**
-	 * An object specifying the format that the model must output. Setting to { "type":
-	 * "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON.
+	 * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
 	 */
 	private @JsonProperty("response_format") TranscriptResponseFormat responseFormat;
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageClient.java
Patch:
@@ -119,7 +119,7 @@ private ImageResponse convertResponse(ResponseEntity<OpenAiImageApi.OpenAiImageR
 
 	/**
 	 * Convert the {@link ImageOptions} into {@link OpenAiImageOptions}.
-	 * @param defaultOptions the image options to use.
+	 * @param runtimeImageOptions the image options to use.
 	 * @return the converted {@link OpenAiImageOptions}.
 	 */
 	private OpenAiImageOptions toOpenAiImageOptions(ImageOptions runtimeImageOptions) {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationIT.java
Patch:
@@ -56,11 +56,11 @@ public class AzureOpenAiAutoConfigurationIT {
 			"spring.ai.azure.openai.api-key=" + System.getenv("AZURE_OPENAI_API_KEY"),
 			"spring.ai.azure.openai.endpoint=" + System.getenv("AZURE_OPENAI_ENDPOINT"),
 
-			"spring.ai.azure.openai.chat.options.model=" + CHAT_MODEL_NAME,
+			"spring.ai.azure.openai.chat.options.deployment-name=" + CHAT_MODEL_NAME,
 			"spring.ai.azure.openai.chat.options.temperature=0.8",
 			"spring.ai.azure.openai.chat.options.maxTokens=123",
 
-			"spring.ai.azure.openai.embedding.options.model=" + EMBEDDING_MODEL_NAME
+			"spring.ai.azure.openai.embedding.options.deployment-name=" + EMBEDDING_MODEL_NAME
 			// @formatter:on
 	).withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class));
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationPropertyTests.java
Patch:
@@ -38,7 +38,7 @@ public void embeddingPropertiesTest() {
 		new ApplicationContextRunner()
 			.withPropertyValues("spring.ai.azure.openai.api-key=TEST_API_KEY",
 					"spring.ai.azure.openai.endpoint=TEST_ENDPOINT",
-					"spring.ai.azure.openai.embedding.options.model=MODEL_XYZ")
+					"spring.ai.azure.openai.embedding.options.deployment-name=MODEL_XYZ")
 			.withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class))
 			.run(context -> {
 				var chatProperties = context.getBean(AzureOpenAiEmbeddingProperties.class);
@@ -59,7 +59,7 @@ public void chatPropertiesTest() {
 				"spring.ai.azure.openai.api-key=API_KEY",
 				"spring.ai.azure.openai.endpoint=ENDPOINT",
 
-				"spring.ai.azure.openai.chat.options.model=MODEL_XYZ",
+				"spring.ai.azure.openai.chat.options.deployment-name=MODEL_XYZ",
 				"spring.ai.azure.openai.chat.options.frequencyPenalty=-1.5",
 				"spring.ai.azure.openai.chat.options.logitBias.myTokenId=-5",
 				"spring.ai.azure.openai.chat.options.maxTokens=123",

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingClient.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.ai.embedding.EmbeddingResponseMetadata;
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.util.Assert;
+import org.springframework.util.StringUtils;
 
 public class AzureOpenAiEmbeddingClient extends AbstractEmbeddingClient {
 
@@ -53,7 +54,7 @@ public AzureOpenAiEmbeddingClient(OpenAIClient azureOpenAiClient) {
 
 	public AzureOpenAiEmbeddingClient(OpenAIClient azureOpenAiClient, MetadataMode metadataMode) {
 		this(azureOpenAiClient, metadataMode,
-				AzureOpenAiEmbeddingOptions.builder().withModel("text-embedding-ada-002").build());
+				AzureOpenAiEmbeddingOptions.builder().withDeploymentName("text-embedding-ada-002").build());
 	}
 
 	public AzureOpenAiEmbeddingClient(OpenAIClient azureOpenAiClient, MetadataMode metadataMode,
@@ -93,7 +94,7 @@ public EmbeddingResponse call(EmbeddingRequest embeddingRequest) {
 	EmbeddingsOptions toEmbeddingOptions(EmbeddingRequest embeddingRequest) {
 		var azureOptions = new EmbeddingsOptions(embeddingRequest.getInstructions());
 		if (this.defaultOptions != null) {
-			azureOptions.setModel(this.defaultOptions.getModel());
+			azureOptions.setModel(this.defaultOptions.getDeploymentName());
 			azureOptions.setUser(this.defaultOptions.getUser());
 		}
 		if (embeddingRequest.getOptions() != null && !EmbeddingOptions.EMPTY.equals(embeddingRequest.getOptions())) {

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureChatCompletionsOptionsTests.java
Patch:
@@ -33,7 +33,7 @@ public void createRequestWithChatOptions() {
 
 		OpenAIClient mockClient = Mockito.mock(OpenAIClient.class);
 		var client = new AzureOpenAiChatClient(mockClient,
-				AzureOpenAiChatOptions.builder().withModel("DEFAULT_MODEL").withTemperature(66.6f).build());
+				AzureOpenAiChatOptions.builder().withDeploymentName("DEFAULT_MODEL").withTemperature(66.6f).build());
 
 		var requestOptions = client.toAzureChatCompletionsOptions(new Prompt("Test message content"));
 
@@ -43,7 +43,7 @@ public void createRequestWithChatOptions() {
 		assertThat(requestOptions.getTemperature()).isEqualTo(66.6f);
 
 		requestOptions = client.toAzureChatCompletionsOptions(new Prompt("Test message content",
-				AzureOpenAiChatOptions.builder().withModel("PROMPT_MODEL").withTemperature(99.9f).build()));
+				AzureOpenAiChatOptions.builder().withDeploymentName("PROMPT_MODEL").withTemperature(99.9f).build()));
 
 		assertThat(requestOptions.getMessages()).hasSize(1);
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatClientIT.java
Patch:
@@ -196,7 +196,7 @@ public OpenAIClient openAIClient() {
 		@Bean
 		public AzureOpenAiChatClient azureOpenAiChatClient(OpenAIClient openAIClient) {
 			return new AzureOpenAiChatClient(openAIClient,
-					AzureOpenAiChatOptions.builder().withModel("gpt-35-turbo").withMaxTokens(200).build());
+					AzureOpenAiChatOptions.builder().withDeploymentName("gpt-35-turbo").withMaxTokens(200).build());
 
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiChatProperties.java
Patch:
@@ -24,7 +24,7 @@ public class AzureOpenAiChatProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.azure.openai.chat";
 
-	public static final String DEFAULT_CHAT_MODEL = "gpt-35-turbo";
+	public static final String DEFAULT_DEPLOYMENT_NAME = "gpt-35-turbo";
 
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 
@@ -35,7 +35,7 @@ public class AzureOpenAiChatProperties {
 
 	@NestedConfigurationProperty
 	private AzureOpenAiChatOptions options = AzureOpenAiChatOptions.builder()
-		.withModel(DEFAULT_CHAT_MODEL)
+		.withDeploymentName(DEFAULT_DEPLOYMENT_NAME)
 		.withTemperature(DEFAULT_TEMPERATURE.floatValue())
 		.build();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiEmbeddingProperties.java
Patch:
@@ -33,7 +33,7 @@ public class AzureOpenAiEmbeddingProperties {
 
 	@NestedConfigurationProperty
 	private AzureOpenAiEmbeddingOptions options = AzureOpenAiEmbeddingOptions.builder()
-		.withModel("text-embedding-ada-002")
+		.withDeploymentName("text-embedding-ada-002")
 		.build();
 
 	private MetadataMode metadataMode = MetadataMode.EMBED;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/azure/AzureOpenAiAutoConfigurationPropertyTests.java
Patch:
@@ -47,7 +47,7 @@ public void embeddingPropertiesTest() {
 				assertThat(connectionProperties.getApiKey()).isEqualTo("TEST_API_KEY");
 				assertThat(connectionProperties.getEndpoint()).isEqualTo("TEST_ENDPOINT");
 
-				assertThat(chatProperties.getOptions().getModel()).isEqualTo("MODEL_XYZ");
+				assertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo("MODEL_XYZ");
 			});
 	}
 
@@ -80,9 +80,9 @@ public void chatPropertiesTest() {
 				assertThat(connectionProperties.getEndpoint()).isEqualTo("ENDPOINT");
 				assertThat(connectionProperties.getApiKey()).isEqualTo("API_KEY");
 
-				assertThat(embeddingProperties.getOptions().getModel()).isEqualTo("text-embedding-ada-002");
+				assertThat(embeddingProperties.getOptions().getDeploymentName()).isEqualTo("text-embedding-ada-002");
 
-				assertThat(chatProperties.getOptions().getModel()).isEqualTo("MODEL_XYZ");
+				assertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo("MODEL_XYZ");
 				assertThat(chatProperties.getOptions().getFrequencyPenalty()).isEqualTo(-1.5f);
 				assertThat(chatProperties.getOptions().getLogitBias().get("myTokenId")).isEqualTo(-5);
 				assertThat(chatProperties.getOptions().getMaxTokens()).isEqualTo(123);

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicChatClient.java
Patch:
@@ -93,7 +93,8 @@ public Flux<ChatResponse> stream(Prompt prompt) {
 	 */
 	AnthropicChatRequest createRequest(Prompt prompt) {
 
-		final String promptValue = MessageToPromptConverter.create().toPrompt(prompt.getInstructions());
+		// Related to: https://github.com/spring-projects/spring-ai/issues/404
+		final String promptValue = MessageToPromptConverter.create("\n").toPrompt(prompt.getInstructions());
 
 		AnthropicChatRequest request = AnthropicChatRequest.builder(promptValue).build();
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/FunctionMessage.java
Patch:
@@ -20,11 +20,11 @@
 public class FunctionMessage extends AbstractMessage {
 
 	public FunctionMessage(String content) {
-		super(MessageType.SYSTEM, content);
+		super(MessageType.FUNCTION, content);
 	}
 
 	public FunctionMessage(String content, Map<String, Object> properties) {
-		super(MessageType.SYSTEM, content, properties);
+		super(MessageType.FUNCTION, content, properties);
 	}
 
 	@Override

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationTests.java
Patch:
@@ -35,7 +35,7 @@ public void propertiesTest() {
 		new ApplicationContextRunner().withPropertyValues(
 		// @formatter:off
 				"spring.ai.ollama.base-url=TEST_BASE_URL",
-				"spring.ai.ollama.chat.model=MODEL_XYZ",
+				"spring.ai.ollama.chat.options.model=MODEL_XYZ",
 				"spring.ai.ollama.chat.options.temperature=0.55",
 				"spring.ai.ollama.chat.options.topP=0.56",
 				"spring.ai.ollama.chat.options.topK=123")

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/gemini/tool/FunctionCallWithFunctionBeanIT.java
Patch:
@@ -37,7 +37,6 @@
 import org.springframework.context.annotation.Description;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertThat;
 
 @EnabledIfEnvironmentVariable(named = "VERTEX_AI_GEMINI_PROJECT_ID", matches = ".*")
 @EnabledIfEnvironmentVariable(named = "VERTEX_AI_GEMINI_LOCATION", matches = ".*")

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -75,7 +75,7 @@ public OpenAiChatClient openAiChatClient(OpenAiConnectionProperties commonProper
 	@ConditionalOnMissingBean
 	@ConditionalOnProperty(prefix = OpenAiEmbeddingProperties.CONFIG_PREFIX, name = "enabled", havingValue = "true",
 			matchIfMissing = true)
-	public EmbeddingClient openAiEmbeddingClient(OpenAiConnectionProperties commonProperties,
+	public OpenAiEmbeddingClient openAiEmbeddingClient(OpenAiConnectionProperties commonProperties,
 			OpenAiEmbeddingProperties embeddingProperties, RestClient.Builder restClientBuilder,
 			RetryTemplate retryTemplate, ResponseErrorHandler responseErrorHandler) {
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlAutoConfiguration.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.ai.autoconfigure.postgresml;
 
-import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.postgresml.PostgresMlEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -41,7 +40,7 @@ public class PostgresMlAutoConfiguration {
 	@ConditionalOnMissingBean
 	@ConditionalOnProperty(prefix = PostgresMlEmbeddingProperties.CONFIG_PREFIX, name = "enabled", havingValue = "true",
 			matchIfMissing = true)
-	public EmbeddingClient postgresMlEmbeddingClient(JdbcTemplate jdbcTemplate,
+	public PostgresMlEmbeddingClient postgresMlEmbeddingClient(JdbcTemplate jdbcTemplate,
 			PostgresMlEmbeddingProperties embeddingProperties) {
 
 		return new PostgresMlEmbeddingClient(jdbcTemplate, embeddingProperties.getOptions());

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreAutoConfiguration.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.azure.AzureVectorStore;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -48,7 +47,7 @@ public SearchIndexClient searchIndexClient(AzureVectorStoreProperties properties
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(SearchIndexClient searchIndexClient, EmbeddingClient embeddingClient,
+	public AzureVectorStore vectorStore(SearchIndexClient searchIndexClient, EmbeddingClient embeddingClient,
 			AzureVectorStoreProperties properties) {
 
 		var vectorStore = new AzureVectorStore(searchIndexClient, embeddingClient);

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfiguration.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.MilvusVectorStore;
 import org.springframework.ai.vectorstore.MilvusVectorStore.MilvusVectorStoreConfig;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -43,7 +42,7 @@ public class MilvusVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingClient embeddingClient,
+	public MilvusVectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingClient embeddingClient,
 			MilvusVectorStoreProperties properties) {
 
 		MilvusVectorStoreConfig config = MilvusVectorStoreConfig.builder()

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfiguration.java
Patch:
@@ -16,9 +16,9 @@
 package org.springframework.ai.autoconfigure.vectorstore.neo4j;
 
 import org.neo4j.driver.Driver;
+
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.Neo4jVectorStore;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -36,7 +36,7 @@ public class Neo4jVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(Driver driver, EmbeddingClient embeddingClient,
+	public Neo4jVectorStore vectorStore(Driver driver, EmbeddingClient embeddingClient,
 			Neo4jVectorStoreProperties properties) {
 		Neo4jVectorStore.Neo4jVectorStoreConfig config = Neo4jVectorStore.Neo4jVectorStoreConfig.builder()
 			.withDatabaseName(properties.getDatabaseName())

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.PineconeVectorStore;
 import org.springframework.ai.vectorstore.PineconeVectorStore.PineconeVectorStoreConfig;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -35,7 +34,7 @@ public class PineconeVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(EmbeddingClient embeddingClient, PineconeVectorStoreProperties properties) {
+	public PineconeVectorStore vectorStore(EmbeddingClient embeddingClient, PineconeVectorStoreProperties properties) {
 
 		var config = PineconeVectorStoreConfig.builder()
 			.withApiKey(properties.getApiKey())

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStoreAutoConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 package org.springframework.ai.autoconfigure.vectorstore.qdrant;
 
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore;
 import org.springframework.ai.vectorstore.qdrant.QdrantVectorStore.QdrantVectorStoreConfig;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
@@ -36,7 +35,7 @@ public class QdrantVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(EmbeddingClient embeddingClient, QdrantVectorStoreProperties properties) {
+	public QdrantVectorStore vectorStore(EmbeddingClient embeddingClient, QdrantVectorStoreProperties properties) {
 
 		var config = QdrantVectorStoreConfig.builder()
 			.withCollectionName(properties.getCollectionName())

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfiguration.java
Patch:
@@ -18,7 +18,6 @@
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.RedisVectorStore;
 import org.springframework.ai.vectorstore.RedisVectorStore.RedisVectorStoreConfig;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -35,7 +34,7 @@ public class RedisVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(EmbeddingClient embeddingClient, RedisVectorStoreProperties properties) {
+	public RedisVectorStore vectorStore(EmbeddingClient embeddingClient, RedisVectorStoreProperties properties) {
 
 		var config = RedisVectorStoreConfig.builder()
 			.withURI(properties.getUri())

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 package org.springframework.ai.autoconfigure.vectorstore.weaviate;
 
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.WeaviateVectorStore;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;
@@ -36,7 +35,7 @@ public class WeaviateVectorStoreAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VectorStore vectorStore(EmbeddingClient embeddingClient, WeaviateVectorStoreProperties properties) {
+	public WeaviateVectorStore vectorStore(EmbeddingClient embeddingClient, WeaviateVectorStoreProperties properties) {
 
 		WeaviateVectorStoreConfig.Builder configBuilder = WeaviateVectorStore.WeaviateVectorStoreConfig.builder()
 			.withScheme(properties.getScheme())

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -97,7 +97,7 @@ public OpenAiApi(String baseUrl, String openAiToken, RestClient.Builder restClie
 		this.restClient = restClientBuilder
 				.baseUrl(baseUrl)
 				.defaultHeaders(ApiUtils.getJsonContentHeaders(openAiToken))
-				.defaultStatusHandler(RetryUtils.DEFAULT_RESPONSE_ERROR_HANDLER)
+				.defaultStatusHandler(responseErrorHandler)
 				.build();
 
 		this.webClient = WebClient.builder()

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatCompletionRequestTest.java
Patch:
@@ -30,7 +30,7 @@
  */
 @SpringBootTest
 @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+")
-public class MistralChatCompletionRequestTest {
+public class MistralAiChatCompletionRequestTest {
 
 	MistralAiChatClient chatClient = new MistralAiChatClient(new MistralAiApi("test"));
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiEmbeddingIT.java
Patch:
@@ -28,7 +28,7 @@
 
 @SpringBootTest
 @EnabledIfEnvironmentVariable(named = "MISTRAL_AI_API_KEY", matches = ".+")
-class MistralEmbeddingIT {
+class MistralAiEmbeddingIT {
 
 	@Autowired
 	private MistralAiEmbeddingClient mistralAiEmbeddingClient;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.chat.api.tool.MockWeatherService;
+import org.springframework.ai.openai.api.tool.MockWeatherService;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/OpenAiApiIT.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.openai.chat.api;
+package org.springframework.ai.openai.api;
 
 import java.util.List;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/RestClientBuilderTests.java
Patch:
@@ -13,9 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.openai.chat.api;
+package org.springframework.ai.openai.api;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.springframework.http.client.SimpleClientHttpRequestFactory;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/MockWeatherService.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.openai.chat.api.tool;
+package org.springframework.ai.openai.api.tool;
 
 import java.util.function.Function;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -13,7 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.openai.chat.api.tool;
+
+package org.springframework.ai.openai.api.tool;
 
 import java.util.ArrayList;
 import java.util.List;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/transcription/OpenAiTranscriptionClientWithTranscriptionResponseMetadataTests.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionMetadata;
 import org.springframework.ai.openai.metadata.audio.OpenAiAudioTranscriptionResponseMetadata;
 import org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;
+import org.springframework.ai.retry.RetryUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.autoconfigure.web.client.RestClientTest;
@@ -151,7 +152,7 @@ static class Config {
 
 		@Bean
 		public OpenAiAudioApi chatCompletionApi(RestClient.Builder builder) {
-			return new OpenAiAudioApi("", TEST_API_KEY, builder);
+			return new OpenAiAudioApi("", TEST_API_KEY, builder, RetryUtils.DEFAULT_RESPONSE_ERROR_HANDLER);
 		}
 
 		@Bean

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientIT.java
Patch:
@@ -37,7 +37,7 @@
 import org.springframework.ai.model.function.FunctionCallbackWrapper;
 import org.springframework.ai.openai.OpenAiChatOptions;
 import org.springframework.ai.openai.OpenAiTestConfiguration;
-import org.springframework.ai.openai.chat.api.tool.MockWeatherService;
+import org.springframework.ai.openai.api.tool.MockWeatherService;
 import org.springframework.ai.openai.testutils.AbstractIT;
 import org.springframework.ai.parser.BeanOutputParser;
 import org.springframework.ai.parser.ListOutputParser;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/MistralAiAutoConfigurationIT.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
 
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -47,7 +48,8 @@ public class MistralAiAutoConfigurationIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.mistralai.apiKey=" + System.getenv("MISTRAL_AI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));
 
 	@Test
 	void generate() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -48,7 +49,8 @@ class PaymentStatusBeanIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.mistralai.apiKey=" + System.getenv("MISTRAL_AI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class))
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class))
 		.withUserConfiguration(Config.class);
 
 	@Test

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanOpenAiIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -55,7 +56,8 @@ class PaymentStatusBeanOpenAiIT {
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("MISTRAL_AI_API_KEY"),
 				"spring.ai.openai.chat.base-url=https://api.mistral.ai")
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))
 		.withUserConfiguration(Config.class);
 
 	@Test

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -46,7 +47,8 @@ public class PaymentStatusPromptIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.mistralai.apiKey=" + System.getenv("MISTRAL_AI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));
 
 	public record Transaction(@JsonProperty(required = true, value = "transaction_id") String id) {
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.ai.autoconfigure.mistralai.MistralAiAutoConfiguration;
 import org.springframework.ai.autoconfigure.mistralai.tool.WeatherServicePromptIT.MyWeatherService.Request;
 import org.springframework.ai.autoconfigure.mistralai.tool.WeatherServicePromptIT.MyWeatherService.Response;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -54,7 +55,8 @@ public class WeatherServicePromptIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.mistralai.api-key=" + System.getenv("MISTRAL_AI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, MistralAiAutoConfiguration.class));
 
 	@Test
 	void promptFunctionCall() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java
Patch:
@@ -31,6 +31,7 @@
 import org.springframework.core.io.Resource;
 import reactor.core.publisher.Flux;
 
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.openai.OpenAiAudioTranscriptionClient;
@@ -49,7 +50,8 @@ public class OpenAiAutoConfigurationIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class));
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class));
 
 	@Test
 	void generate() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackInPromptIT.java
Patch:
@@ -23,6 +23,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -42,7 +43,8 @@ public class FunctionCallbackInPromptIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class));
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class));
 
 	@Test
 	void functionCallTest() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackWithPlainFunctionBeanIT.java
Patch:
@@ -24,6 +24,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -47,7 +48,8 @@ class FunctionCallbackWithPlainFunctionBeanIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))
 		.withUserConfiguration(Config.class);
 
 	@Test

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/FunctionCallbackWrapperIT.java
Patch:
@@ -23,6 +23,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.ai.autoconfigure.openai.OpenAiAutoConfiguration;
+import org.springframework.ai.autoconfigure.retry.SpringAiRetryAutoConfiguration;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.messages.UserMessage;
 import org.springframework.ai.chat.prompt.Prompt;
@@ -45,7 +46,8 @@ public class FunctionCallbackWrapperIT {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.openai.apiKey=" + System.getenv("OPENAI_API_KEY"))
-		.withConfiguration(AutoConfigurations.of(RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))
+		.withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,
+				RestClientAutoConfiguration.class, OpenAiAutoConfiguration.class))
 		.withUserConfiguration(Config.class);
 
 	@Test

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/support/OpenAiResponseHeaderExtractor.java
Patch:
@@ -52,7 +52,7 @@ public class OpenAiResponseHeaderExtractor {
 
 	private static final Logger logger = LoggerFactory.getLogger(OpenAiResponseHeaderExtractor.class);
 
-	public static RateLimit extractAiResponseHeaders(ResponseEntity<ChatCompletion> response) {
+	public static RateLimit extractAiResponseHeaders(ResponseEntity<?> response) {
 
 		Long requestsLimit = getHeaderAsLong(response, REQUESTS_LIMIT_HEADER.getName());
 		Long requestsRemaining = getHeaderAsLong(response, REQUESTS_REMAINING_HEADER.getName());
@@ -66,7 +66,7 @@ public static RateLimit extractAiResponseHeaders(ResponseEntity<ChatCompletion>
 				tokensReset);
 	}
 
-	private static Duration getHeaderAsDuration(ResponseEntity<ChatCompletion> response, String headerName) {
+	private static Duration getHeaderAsDuration(ResponseEntity<?> response, String headerName) {
 		var headers = response.getHeaders();
 		if (headers.containsKey(headerName)) {
 			var values = headers.get(headerName);
@@ -77,7 +77,7 @@ private static Duration getHeaderAsDuration(ResponseEntity<ChatCompletion> respo
 		return null;
 	}
 
-	private static Long getHeaderAsLong(ResponseEntity<ChatCompletion> response, String headerName) {
+	private static Long getHeaderAsLong(ResponseEntity<?> response, String headerName) {
 		var headers = response.getHeaders();
 		if (headers.containsKey(headerName)) {
 			var values = headers.get(headerName);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/audio/api/OpenAiAudioApiIT.java
Patch:
@@ -59,13 +59,14 @@ void speechTranscriptionAndTranslation() throws IOException {
 				TranslationRequest.builder().withModel(WhisperModel.WHISPER_1.getValue()).withFile(speech).build(),
 				StructuredResponse.class);
 
-		assertThat(translation.text()).isEqualTo("Hello, my name is Chris, and I love Spring AI.");
+		assertThat(translation.text().replaceAll(",", "")).isEqualTo("Hello my name is Chris and I love Spring AI.");
 
 		StructuredResponse transcriptionEnglish = audioApi.createTranscription(
 				TranscriptionRequest.builder().withModel(WhisperModel.WHISPER_1.getValue()).withFile(speech).build(),
 				StructuredResponse.class);
 
-		assertThat(transcriptionEnglish.text()).isEqualTo("Hello, my name is Chris, and I love Spring AI.");
+		assertThat(transcriptionEnglish.text().replaceAll(",", ""))
+			.isEqualTo("Hello my name is Chris and I love Spring AI.");
 
 		StructuredResponse transcriptionDutch = audioApi.createTranscription(
 				TranscriptionRequest.builder().withFile(speech).withLanguage("nl").build(), StructuredResponse.class);

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/image/OpenAiImageClientIT.java
Patch:
@@ -58,7 +58,7 @@ void imageAsUrlTest() {
 		OpenAiImageGenerationMetadata openAiImageGenerationMetadata = (OpenAiImageGenerationMetadata) imageGenerationMetadata;
 
 		assertThat(openAiImageGenerationMetadata).isNotNull();
-		assertThat(openAiImageGenerationMetadata.getRevisedPrompt()).isNull();
+		assertThat(openAiImageGenerationMetadata.getRevisedPrompt()).isNotBlank();
 	}
 
 }

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java
Patch:
@@ -92,7 +92,7 @@ void embedding() {
 
 	@Test
 	void generateImage() {
-		contextRunner.withPropertyValues("spring.ai.openai.image.options.size=256x256").run(context -> {
+		contextRunner.withPropertyValues("spring.ai.openai.image.options.size=1024x1024").run(context -> {
 			OpenAiImageClient client = context.getBean(OpenAiImageClient.class);
 			ImageResponse imageResponse = client.call(new ImagePrompt("forest"));
 			assertThat(imageResponse.getResults()).hasSize(1);

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -43,8 +43,8 @@
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.Role;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage.ToolCall;
+import org.springframework.ai.openai.api.common.OpenAiApiException;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest;
-import org.springframework.ai.openai.api.OpenAiApi.OpenAiApiException;
 import org.springframework.ai.openai.metadata.OpenAiChatResponseMetadata;
 import org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor;
 import org.springframework.http.ResponseEntity;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingClient.java
Patch:
@@ -33,8 +33,8 @@
 import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiApi.EmbeddingList;
-import org.springframework.ai.openai.api.OpenAiApi.OpenAiApiException;
 import org.springframework.ai.openai.api.OpenAiApi.Usage;
+import org.springframework.ai.openai.api.common.OpenAiApiException;
 import org.springframework.retry.RetryCallback;
 import org.springframework.retry.RetryContext;
 import org.springframework.retry.RetryListener;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiImageClient.java
Patch:
@@ -30,8 +30,8 @@
 import org.springframework.ai.image.ImageResponse;
 import org.springframework.ai.image.ImageResponseMetadata;
 import org.springframework.ai.model.ModelOptionsUtils;
-import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiImageApi;
+import org.springframework.ai.openai.api.common.OpenAiApiException;
 import org.springframework.ai.openai.metadata.OpenAiImageGenerationMetadata;
 import org.springframework.ai.openai.metadata.OpenAiImageResponseMetadata;
 import org.springframework.http.ResponseEntity;
@@ -59,7 +59,7 @@ public class OpenAiImageClient implements ImageClient {
 
 	public final RetryTemplate retryTemplate = RetryTemplate.builder()
 		.maxAttempts(10)
-		.retryOn(OpenAiApi.OpenAiApiException.class)
+		.retryOn(OpenAiApiException.class)
 		.exponentialBackoff(Duration.ofMillis(2000), 5, Duration.ofMillis(3 * 60000))
 		.withListener(new RetryListener() {
 			public <T extends Object, E extends Throwable> void onError(RetryContext context,

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/api/VertexAiPaLm2Api.java
Patch:
@@ -84,6 +84,8 @@
  *
  * https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models
  *
+ * https://ai.google.dev/api/rest#rest-resource:-v1.models
+ *
  * @author Christian Tzolov
  */
 public class VertexAiPaLm2Api {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/qdrant/QdrantVectorStorePropertiesTests.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * @author Christian Tzolov
  */
-public class PgVectorStorePropertiesTests {
+public class QdrantVectorStorePropertiesTests {
 
 	@Test
 	public void defaultValues() {

File: vector-stores/spring-ai-qdrant/src/main/java/org/springframework/ai/vectorstore/qdrant/QdrantObjectFactory.java
Patch:
@@ -58,13 +58,14 @@ private static Object object(Value value) {
 			case DOUBLE_VALUE:
 				return value.getDoubleValue();
 			case BOOL_VALUE:
-				return value.hasBoolValue();
+				return value.getBoolValue();
 			case LIST_VALUE:
 				return object(value.getListValue());
 			case STRUCT_VALUE:
 				return toObjectMap(value.getStructValue().getFieldsMap());
-			case KIND_NOT_SET:
 			case NULL_VALUE:
+				return null;
+			case KIND_NOT_SET:
 			default:
 				logger.warn("Unsupported value type: " + value.getKindCase());
 				return null;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiChatProperties.java
Patch:
@@ -29,7 +29,7 @@
 @ConfigurationProperties(MistralAiChatProperties.CONFIG_PREFIX)
 public class MistralAiChatProperties extends MistralAiParentProperties {
 
-	public static final String CONFIG_PREFIX = "spring.ai.mistral.chat";
+	public static final String CONFIG_PREFIX = "spring.ai.mistralai.chat";
 
 	public static final String DEFAULT_CHAT_MODEL = MistralAiApi.ChatModel.TINY.getValue();
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusBeanIT.java
Patch:
@@ -56,7 +56,7 @@ class PaymentStatusBeanIT {
 	void functionCallTest() {
 
 		contextRunner
-			.withPropertyValues("spring.ai.mistral.chat.options.model=" + MistralAiApi.ChatModel.LARGE.getValue())
+			.withPropertyValues("spring.ai.mistralai.chat.options.model=" + MistralAiApi.ChatModel.LARGE.getValue())
 			.run(context -> {
 
 				MistralAiChatClient chatClient = context.getBean(MistralAiChatClient.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/PaymentStatusPromptIT.java
Patch:
@@ -67,7 +67,7 @@ record StatusDate(String status, String date) {
 	@Test
 	void functionCallTest() {
 		contextRunner
-			.withPropertyValues("spring.ai.mistral.chat.options.model=" + MistralAiApi.ChatModel.SMALL.getValue())
+			.withPropertyValues("spring.ai.mistralai.chat.options.model=" + MistralAiApi.ChatModel.SMALL.getValue())
 			.run(context -> {
 
 				MistralAiChatClient chatClient = context.getBean(MistralAiChatClient.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/tool/WeatherServicePromptIT.java
Patch:
@@ -60,7 +60,7 @@ public class WeatherServicePromptIT {
 	@Test
 	void promptFunctionCall() {
 		contextRunner
-			.withPropertyValues("spring.ai.mistral.chat.options.model=" + MistralAiApi.ChatModel.LARGE.getValue())
+			.withPropertyValues("spring.ai.mistralai.chat.options.model=" + MistralAiApi.ChatModel.LARGE.getValue())
 			.run(context -> {
 
 				MistralAiChatClient chatClient = context.getBean(MistralAiChatClient.class);

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiTestConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public EmbeddingClient mistralAiEmbeddingClient(MistralAiApi api) {
 	@Bean
 	public MistralAiChatClient mistralAiChatClient(MistralAiApi mistralAiApi) {
 		return new MistralAiChatClient(mistralAiApi,
-				MistralAiChatOptions.builder().withModel(MistralAiApi.ChatModel.SMALL.getValue()).build());
+				MistralAiChatOptions.builder().withModel(MistralAiApi.ChatModel.MIXTRAL.getValue()).build());
 	}
 
 }

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralChatCompletionRequestTest.java
Patch:
@@ -20,8 +20,6 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.mistralai.MistralAiChatClient;
-import org.springframework.ai.mistralai.MistralAiChatOptions;
 import org.springframework.ai.mistralai.api.MistralAiApi;
 import org.springframework.boot.test.context.SpringBootTest;
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -277,7 +277,8 @@ protected ChatCompletionRequest doCreateToolResponseRequest(ChatCompletionReques
 			String functionResponse = this.functionCallbackRegister.get(functionName).call(functionArguments);
 
 			// Add the function response to the conversation.
-			conversationHistory.add(new ChatCompletionMessage(functionResponse, Role.TOOL, null, toolCall.id(), null));
+			conversationHistory
+				.add(new ChatCompletionMessage(functionResponse, Role.TOOL, functionName, toolCall.id(), null));
 		}
 
 		// Recursively call chatCompletionWithTools until the model doesn't call a
@@ -291,7 +292,6 @@ protected ChatCompletionRequest doCreateToolResponseRequest(ChatCompletionReques
 	@Override
 	protected List<ChatCompletionMessage> doGetUserMessages(ChatCompletionRequest request) {
 		return request.messages();
-
 	}
 
 	@Override
@@ -316,7 +316,7 @@ protected boolean isToolFunctionCall(ResponseEntity<ChatCompletion> chatCompleti
 			return false;
 		}
 
-		return choices.get(0).message().toolCalls() != null;
+		return !CollectionUtils.isEmpty(choices.get(0).message().toolCalls());
 	}
 
 }

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/api/tool/OpenAiApiToolFunctionCallIT.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import org.springframework.ai.model.ModelOptionsUtils;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;
@@ -63,7 +64,7 @@ public void toolFunctionCall() {
 		var functionTool = new OpenAiApi.FunctionTool(Type.FUNCTION,
 				new OpenAiApi.FunctionTool.Function(
 						"Get the weather in location. Return temperature in 30°F or 30°C format.", "getCurrentWeather",
-						OpenAiApi.parseJson("""
+						ModelOptionsUtils.jsonToMap("""
 								{
 									"type": "object",
 									"properties": {
@@ -129,7 +130,7 @@ public void toolFunctionCall() {
 
 					// extend conversation with function response.
 					messages.add(new ChatCompletionMessage("" + weatherResponse.temp() + weatherRequest.unit(),
-							Role.TOOL, null, toolCall.id(), null));
+							Role.TOOL, functionName, toolCall.id(), null));
 				}
 			}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiChatProperties.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.ai.autoconfigure.mistralai;
 
 import org.springframework.ai.mistralai.MistralAiChatOptions;
+import org.springframework.ai.mistralai.api.MistralAiApi;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
@@ -30,7 +31,7 @@ public class MistralAiChatProperties extends MistralAiParentProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.mistral.chat";
 
-	public static final String DEFAULT_CHAT_MODEL = "mistral-tiny";
+	public static final String DEFAULT_CHAT_MODEL = MistralAiApi.ChatModel.TINY.getValue();
 
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/mistralai/MistralAiEmbeddingProperties.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.mistralai.MistralAiEmbeddingOptions;
+import org.springframework.ai.mistralai.api.MistralAiApi;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
@@ -30,7 +31,7 @@ public class MistralAiEmbeddingProperties extends MistralAiParentProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.mistralai.embedding";
 
-	public static final String DEFAULT_EMBEDDING_MODEL = "mistral-embed";
+	public static final String DEFAULT_EMBEDDING_MODEL = MistralAiApi.EmbeddingModel.EMBED.getValue();
 
 	public static final String DEFAULT_ENCODING_FORMAT = "float";
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/MistralAiApiIT.java
Patch:
@@ -22,14 +22,13 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import reactor.core.publisher.Flux;
 
-import org.springframework.ai.mistralai.api.MistralAiApi;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletion;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionChunk;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage;
+import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;
 import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionRequest;
 import org.springframework.ai.mistralai.api.MistralAiApi.Embedding;
 import org.springframework.ai.mistralai.api.MistralAiApi.EmbeddingList;
-import org.springframework.ai.mistralai.api.MistralAiApi.ChatCompletionMessage.Role;
 import org.springframework.http.ResponseEntity;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -83,10 +83,10 @@ private OpenAiApi openAiApi(String baseUrl, String commonBaseUrl, String apiKey,
 			RestClient.Builder restClientBuilder) {
 
 		String resolvedBaseUrl = StringUtils.hasText(baseUrl) ? baseUrl : commonBaseUrl;
-		Assert.hasText(baseUrl, "OpenAI base URL must be set");
+		Assert.hasText(resolvedBaseUrl, "OpenAI base URL must be set");
 
 		String resolvedApiKey = StringUtils.hasText(apiKey) ? apiKey : commonApiKey;
-		Assert.hasText(apiKey, "OpenAI API key must be set");
+		Assert.hasText(resolvedApiKey, "OpenAI API key must be set");
 
 		return new OpenAiApi(resolvedBaseUrl, resolvedApiKey, restClientBuilder);
 	}

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiChatOptions.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vertex;
+package org.springframework.ai.vertexai.palm2;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/VertexAiEmbeddingClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2023 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vertex;
+package org.springframework.ai.vertexai.palm2;
 
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -24,7 +24,7 @@
 import org.springframework.ai.embedding.Embedding;
 import org.springframework.ai.embedding.EmbeddingRequest;
 import org.springframework.ai.embedding.EmbeddingResponse;
-import org.springframework.ai.vertex.api.VertexAiApi;
+import org.springframework.ai.vertexai.palm2.api.VertexAiApi;
 
 /**
  * @author Christian Tzolov

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/aot/VertexRuntimeHints.java
Patch:
@@ -1,6 +1,6 @@
-package org.springframework.ai.vertex.aot;
+package org.springframework.ai.vertexai.palm2.aot;
 
-import org.springframework.ai.vertex.api.VertexAiApi;
+import org.springframework.ai.vertexai.palm2.api.VertexAiApi;
 import org.springframework.aot.hint.MemberCategory;
 import org.springframework.aot.hint.RuntimeHints;
 import org.springframework.aot.hint.RuntimeHintsRegistrar;

File: models/spring-ai-vertex-ai-palm2/src/main/java/org/springframework/ai/vertexai/palm2/api/VertexAiApi.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vertex.api;
+package org.springframework.ai.vertexai.palm2.api;
 
 import java.io.IOException;
 import java.util.List;

File: models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/VertexAiChatGenerationClientIT.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.vertex;
+package org.springframework.ai.vertexai.palm2;
 
 import java.util.Arrays;
 import java.util.List;
@@ -17,7 +17,8 @@
 import org.springframework.ai.parser.BeanOutputParser;
 import org.springframework.ai.parser.ListOutputParser;
 import org.springframework.ai.parser.MapOutputParser;
-import org.springframework.ai.vertex.api.VertexAiApi;
+import org.springframework.ai.vertexai.palm2.VertexAiChatClient;
+import org.springframework.ai.vertexai.palm2.api.VertexAiApi;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringBootConfiguration;

File: models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/VertexAiChatRequestTests.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vertex;
+package org.springframework.ai.vertexai.palm2;
 
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.vertex.api.VertexAiApi;
+import org.springframework.ai.vertexai.palm2.api.VertexAiApi;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/VertexAiEmbeddingClientIT.java
Patch:
@@ -1,12 +1,12 @@
-package org.springframework.ai.vertex;
+package org.springframework.ai.vertexai.palm2;
 
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.embedding.EmbeddingResponse;
-import org.springframework.ai.vertex.api.VertexAiApi;
+import org.springframework.ai.vertexai.palm2.api.VertexAiApi;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;

File: models/spring-ai-vertex-ai-palm2/src/test/java/org/springframework/ai/vertexai/palm2/aot/VertexRuntimeHintsTests.java
Patch:
@@ -1,7 +1,8 @@
-package org.springframework.ai.vertex.aot;
+package org.springframework.ai.vertexai.palm2.aot;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.vertex.api.VertexAiApi;
+
+import org.springframework.ai.vertexai.palm2.api.VertexAiApi;
 import org.springframework.aot.hint.RuntimeHints;
 import org.springframework.aot.hint.TypeReference;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/ChatClient.java
Patch:
@@ -25,7 +25,8 @@ public interface ChatClient extends ModelClient<Prompt, ChatResponse> {
 
 	default String call(String message) {
 		Prompt prompt = new Prompt(new UserMessage(message));
-		return call(prompt).getResult().getOutput().getContent();
+		Generation generation = call(prompt).getResult();
+		return (generation != null) ? generation.getOutput().getContent() : "";
 	}
 
 	@Override

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/AssistantMessage.java
Patch:
@@ -36,7 +36,7 @@ public AssistantMessage(String content, Map<String, Object> properties) {
 
 	@Override
 	public String toString() {
-		return "AssistantMessage{" + "content='" + content + '\'' + ", properties=" + properties + ", messageType="
+		return "AssistantMessage{" + "content='" + getContent() + '\'' + ", properties=" + properties + ", messageType="
 				+ messageType + '}';
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/FunctionMessage.java
Patch:
@@ -30,7 +30,7 @@ public FunctionMessage(String content, Map<String, Object> properties) {
 
 	@Override
 	public String toString() {
-		return "FunctionMessage{" + "content='" + content + '\'' + ", properties=" + properties + ", messageType="
+		return "FunctionMessage{" + "content='" + getContent() + '\'' + ", properties=" + properties + ", messageType="
 				+ messageType + '}';
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/Message.java
Patch:
@@ -16,12 +16,15 @@
 
 package org.springframework.ai.chat.messages;
 
+import java.util.List;
 import java.util.Map;
 
 public interface Message {
 
 	String getContent();
 
+	List<MediaData> getMediaData();
+
 	Map<String, Object> getProperties();
 
 	MessageType getMessageType();

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/SystemMessage.java
Patch:
@@ -37,7 +37,7 @@ public SystemMessage(Resource resource) {
 
 	@Override
 	public String toString() {
-		return "SystemMessage{" + "content='" + content + '\'' + ", properties=" + properties + ", messageType="
+		return "SystemMessage{" + "content='" + getContent() + '\'' + ", properties=" + properties + ", messageType="
 				+ messageType + '}';
 	}
 

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralAiChatClientIT.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.mistralai.chat;
+package org.springframework.ai.mistralai;
 
 import java.util.Arrays;
 import java.util.List;
@@ -36,7 +36,6 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.chat.prompt.SystemPromptTemplate;
-import org.springframework.ai.mistralai.MistralAiTestConfiguration;
 import org.springframework.ai.parser.BeanOutputParser;
 import org.springframework.ai.parser.ListOutputParser;
 import org.springframework.ai.parser.MapOutputParser;

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralChatCompletionRequestTest.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.mistralai.chat;
+package org.springframework.ai.mistralai;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
@@ -47,14 +47,15 @@ void chatCompletionDefaultRequestTest() {
 		assertThat(request.temperature()).isEqualTo(0.7f);
 		assertThat(request.safePrompt()).isFalse();
 		assertThat(request.maxTokens()).isNull();
+		assertThat(request.stream()).isFalse();
 	}
 
 	@Test
 	void chatCompletionRequestWithOptionsTest() {
 
 		var options = MistralAiChatOptions.builder().withTemperature(0.5f).withTopP(0.8f).build();
 
-		var request = chatClient.createRequest(new Prompt("test content", options), false);
+		var request = chatClient.createRequest(new Prompt("test content", options), true);
 
 		assertThat(request.messages().size()).isEqualTo(1);
 		assertThat(request.topP()).isEqualTo(0.8f);

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/MistralEmbeddingIT.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.mistralai.embedding;
+package org.springframework.ai.mistralai;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;

File: models/spring-ai-mistral-ai/src/test/java/org/springframework/ai/mistralai/api/MistralAiApiIT.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.mistralai.chat.api;
+package org.springframework.ai.mistralai.api;
 
 import java.util.List;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/mistralai/MistralAiPropertiesTests.java
Patch:
@@ -44,7 +44,7 @@ public void embeddingProperties() {
 				assertThat(connectionProperties.getBaseUrl()).isEqualTo("TEST_BASE_URL");
 
 				assertThat(embeddingProperties.getApiKey()).isNull();
-				assertThat(embeddingProperties.getBaseUrl()).isNull();
+				assertThat(embeddingProperties.getBaseUrl()).isEqualTo(MistralAiCommonProperties.DEFAULT_BASE_URL);
 
 				assertThat(embeddingProperties.getOptions().getModel()).isEqualTo("MODEL_XYZ");
 			});

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiEmbeddingProperties.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.ai.azure.openai.AzureOpenAiEmbeddingOptions;
 import org.springframework.ai.document.MetadataMode;
 import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.NestedConfigurationProperty;
 import org.springframework.util.Assert;
 
 @ConfigurationProperties(AzureOpenAiEmbeddingProperties.CONFIG_PREFIX)
@@ -31,6 +32,7 @@ public class AzureOpenAiEmbeddingProperties {
 	 */
 	private boolean enabled = true;
 
+	@NestedConfigurationProperty
 	private AzureOpenAiEmbeddingOptions options = AzureOpenAiEmbeddingOptions.builder()
 		.withModel("text-embedding-ada-002")
 		.build();

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereChatAutoConfiguration.java
Patch:
@@ -44,7 +44,7 @@ public class BedrockCohereChatAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public CohereChatBedrockApi cohereApi(AwsCredentialsProvider credentialsProvider,
+	public CohereChatBedrockApi cohereChatApi(AwsCredentialsProvider credentialsProvider,
 			BedrockCohereChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new CohereChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
 				new ObjectMapper());

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingAutoConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public class BedrockCohereEmbeddingAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public CohereEmbeddingBedrockApi cohereApi(AwsCredentialsProvider credentialsProvider,
+	public CohereEmbeddingBedrockApi cohereEmbeddingApi(AwsCredentialsProvider credentialsProvider,
 			BedrockCohereEmbeddingProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new CohereEmbeddingBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
 				new ObjectMapper());

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfiguration.java
Patch:
@@ -40,7 +40,7 @@ public class TransformersEmbeddingClientAutoConfiguration {
 	@ConditionalOnMissingBean
 	@ConditionalOnProperty(prefix = TransformersEmbeddingClientProperties.CONFIG_PREFIX, name = "enabled",
 			havingValue = "true", matchIfMissing = true)
-	public EmbeddingClient embeddingClient(TransformersEmbeddingClientProperties properties) {
+	public TransformersEmbeddingClient embeddingClient(TransformersEmbeddingClientProperties properties) {
 
 		TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient(properties.getMetadataMode());
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
 
@@ -37,6 +38,8 @@ public class TransformersEmbeddingClientAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
+	@ConditionalOnProperty(prefix = TransformersEmbeddingClientProperties.CONFIG_PREFIX, name = "enabled",
+			havingValue = "true", matchIfMissing = true)
 	public EmbeddingClient embeddingClient(TransformersEmbeddingClientProperties properties) {
 
 		TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient(properties.getMetadataMode());

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationTests.java
Patch:
@@ -28,7 +28,7 @@
  * @author Christian Tzolov
  * @since 0.8.0
  */
-public class OllamaAutoConfigurationTests {
+public class OllamaChatAutoConfigurationTests {
 
 	@Test
 	public void propertiesTest() {

File: spring-ai-core/src/main/java/org/springframework/ai/model/ModelOptions.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.model;
 
 /**
- * Interface representing the customizable options for AI model interactions. This
+ * Interface representing the customizable options for AI model interactions. This marker
  * interface allows for the specification of various settings and parameters that can
  * influence the behavior and output of AI models. It is designed to provide flexibility
  * and adaptability in different AI scenarios, ensuring that the AI models can be

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiChatProperties.java
Patch:
@@ -25,7 +25,7 @@ public class AzureOpenAiChatProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.azure.openai.chat";
 
-	public static final String DEFAULT_CHAT_MODEL = "gpt-3.5-turbo";
+	public static final String DEFAULT_CHAT_MODEL = "gpt-35-turbo";
 
 	private static final Double DEFAULT_TEMPERATURE = 0.7;
 

File: document-readers/tika-reader/src/test/java/org/springframework/ai/reader/tika/TikaDocumentReaderTests.java
Patch:
@@ -33,7 +33,7 @@ public class TikaDocumentReaderTests {
 			"classpath:/sample2.pdf,sample2.pdf,Consult doc/pdftex/manual.pdf from your tetex distribution for more",
 			"classpath:/sample.ppt,sample.ppt,Sed ipsum tortor, fringilla a consectetur eget, cursus posuere sem.",
 			"classpath:/sample.pptx,sample.pptx,Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
-			"https://docs.spring.io/spring-ai/reference/,https://docs.spring.io/spring-ai/reference/,help set up essential dependencies and classes." })
+			"https://docs.spring.io/spring-ai/reference/,https://docs.spring.io/spring-ai/reference/,project aims to streamline the development of applications" })
 	public void testDocx(String resourceUri, String resourceName, String contentSnipped) {
 
 		var docs = new TikaDocumentReader(resourceUri).get();

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatClient.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.Collections;
 import java.util.List;
-import java.util.Objects;
 
 import com.azure.ai.openai.OpenAIClient;
 import com.azure.ai.openai.models.ChatChoice;
@@ -36,7 +35,7 @@
 
 import org.springframework.ai.azure.openai.metadata.AzureOpenAiChatResponseMetadata;
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.StreamingChatClient;

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiChatOptions.java
Patch:
@@ -24,7 +24,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
  * The configuration information for a chat completions request. Completions support a

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/AnthropicChatOptions.java
Patch:
@@ -21,7 +21,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/anthropic/BedrockAnthropicChatClient.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.metadata.ChatGenerationMetadata;
 import reactor.core.publisher.Flux;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatClient.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest;
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatResponse;
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.StreamingChatClient;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/cohere/BedrockCohereChatOptions.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.LogitBias;
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.ReturnLikelihoods;
 import org.springframework.ai.bedrock.cohere.api.CohereChatBedrockApi.CohereChatRequest.Truncate;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
  * @author Christian Tzolov

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatClient.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatRequest;
 import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatResponse;
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.StreamingChatClient;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatOptions.java
Patch:
@@ -21,7 +21,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
  * @author Christian Tzolov

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatClient.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponse;
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi.TitanChatResponseChunk;
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.StreamingChatClient;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/titan/BedrockTitanChatOptions.java
Patch:
@@ -21,7 +21,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaChatClient.java
Patch:
@@ -21,7 +21,7 @@
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.StreamingChatClient;

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaOptions.java
Patch:
@@ -27,7 +27,7 @@
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.embedding.EmbeddingOptions;
 
 /**

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatClientIT.java
Patch:
@@ -26,7 +26,7 @@
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.chat.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
 import org.springframework.ai.chat.messages.AssistantMessage;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.junit.jupiter.Container;

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatRequestTests.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.chat.ChatOptions;
-import org.springframework.ai.chat.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.ollama.api.OllamaApi;
 import org.springframework.ai.ollama.api.OllamaOptions;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -29,7 +29,7 @@
 import reactor.core.publisher.Flux;
 
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.StreamingChatClient;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatOptions.java
Patch:
@@ -27,7 +27,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.model.function.FunctionCallback;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ResponseFormat;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionRequest.ToolChoice;

File: models/spring-ai-vertex-ai/src/main/java/org/springframework/ai/vertex/VertexAiChatClient.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.stream.Collectors;
 
 import org.springframework.ai.chat.ChatClient;
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.chat.prompt.Prompt;

File: models/spring-ai-vertex-ai/src/main/java/org/springframework/ai/vertex/VertexAiChatOptions.java
Patch:
@@ -20,7 +20,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude.Include;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-import org.springframework.ai.chat.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptions;
 
 /**
  * @author Christian Tzolov

File: models/spring-ai-vertex-ai/src/test/java/org/springframework/ai/vertex/VertexAiChatRequestTests.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.chat.ChatOptions;
-import org.springframework.ai.chat.ChatOptionsBuilder;
+import org.springframework.ai.chat.prompt.ChatOptions;
+import org.springframework.ai.chat.prompt.ChatOptionsBuilder;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.vertex.api.VertexAiApi;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/ChatResponseMetadata.java
Patch:
@@ -36,7 +36,7 @@ public interface ChatResponseMetadata extends ResponseMetadata {
 	 * @see RateLimit
 	 */
 	default RateLimit getRateLimit() {
-		return RateLimit.NULL;
+		return new EmptyRateLimit();
 	}
 
 	/**
@@ -45,7 +45,7 @@ default RateLimit getRateLimit() {
 	 * @see Usage
 	 */
 	default Usage getUsage() {
-		return Usage.NULL;
+		return new EmptyUsage();
 	}
 
 	default PromptMetadata getPromptMetadata() {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/EmptyRateLimit.java
Patch:
@@ -19,12 +19,12 @@
 import java.time.Duration;
 
 /**
- * Abstract base class used as a foundation for implementing {@link RateLimit}.
+ * A RateLimit implementation that returns zero for all property getters
  *
  * @author John Blum
  * @since 0.7.0
  */
-public abstract class AbstractRateLimit implements RateLimit {
+public class EmptyRateLimit implements RateLimit {
 
 	@Override
 	public Long getRequestsLimit() {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/EmptyUsage.java
Patch:
@@ -17,12 +17,12 @@
 package org.springframework.ai.chat.metadata;
 
 /**
- * Abstract base class used as a foundation for implementing {@link Usage}.
+ * A EmpytUsage implementation that returns zero for all property getters
  *
  * @author John Blum
  * @since 0.7.0
  */
-public abstract class AbstractUsage implements Usage {
+public class EmptyUsage implements Usage {
 
 	@Override
 	public Long getPromptTokens() {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/RateLimit.java
Patch:
@@ -27,9 +27,6 @@
  */
 public interface RateLimit {
 
-	RateLimit NULL = new AbstractRateLimit() {
-	};
-
 	/**
 	 * Returns the maximum number of requests that are permitted before exhausting the
 	 * rate limit.

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/Usage.java
Patch:
@@ -25,9 +25,6 @@
  */
 public interface Usage {
 
-	Usage NULL = new AbstractUsage() {
-	};
-
 	/**
 	 * Returns the number of tokens used in the {@literal prompt} of the AI request.
 	 * @return an {@link Long} with the number of tokens used in the {@literal prompt} of

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatOptions.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.chat;
+package org.springframework.ai.chat.prompt;
 
 import org.springframework.ai.model.ModelOptions;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatOptionsBuilder.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.chat;
+package org.springframework.ai.chat.prompt;
 
 public class ChatOptionsBuilder {
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/Prompt.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.springframework.ai.model.ModelOptions;
 import org.springframework.ai.model.ModelRequest;
-import org.springframework.ai.chat.ChatOptions;
 import org.springframework.ai.chat.messages.Message;
 import org.springframework.ai.chat.messages.UserMessage;
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SearchRequest.java
Patch:
@@ -226,7 +226,8 @@ public SearchRequest withFilterExpression(Filter.Expression expression) {
 	 * @return this.builder
 	 */
 	public SearchRequest withFilterExpression(String textExpression) {
-		this.filterExpression = (textExpression != null) ? Filter.parser().parse(textExpression) : null;
+		this.filterExpression = (textExpression != null) ? new FilterExpressionTextParser().parse(textExpression)
+				: null;
 		return this;
 	}
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterExpressionConverter.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vectorstore.filter.converter;
+package org.springframework.ai.vectorstore.filter;
 
 import org.springframework.ai.vectorstore.filter.Filter;
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterHelper.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;
 import org.springframework.ai.vectorstore.filter.Filter.Operand;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
 import org.springframework.util.Assert;
 
 /**

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/AbstractFilterExpressionConverter.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import org.springframework.ai.vectorstore.filter.Filter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.FilterHelper;
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/SearchRequestTests.java
Patch:
@@ -116,7 +116,7 @@ public void withFilterExpression() {
 				new Filter.Expression(Filter.ExpressionType.EQ, new Filter.Key("active"), new Filter.Value(true)));
 		assertThat(request.hasFilterExpression()).isTrue();
 
-		request.withFilterExpression(Filter.builder().eq("country", "NL").build());
+		request.withFilterExpression(new FilterExpressionBuilder().eq("country", "NL").build());
 		assertThat(request.getFilterExpression()).isEqualTo(
 				new Filter.Expression(Filter.ExpressionType.EQ, new Filter.Key("country"), new Filter.Value("NL")));
 		assertThat(request.hasFilterExpression()).isTrue();

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/converter/MilvusFilterExpressionConverterTests.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/converter/PgVectorFilterExpressionConverterTests.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/converter/PineconeFilterExpressionConverterTests.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;

File: vector-stores/spring-ai-azure/src/main/java/org/springframework/ai/vectorstore/azure/AzureVectorStore.java
Patch:
@@ -49,7 +49,7 @@
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;

File: vector-stores/spring-ai-azure/src/test/java/org/springframework/ai/vectorstore/azure/AzureAiSearchFilterExpressionConverterTests.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;

File: vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/vectorsore/ChromaVectorStore.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.filter.converter.ChromaFilterExpressionConverter;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.ai.chroma.ChromaApi;
 import org.springframework.ai.chroma.ChromaApi.AddEmbeddingsRequest;

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -54,7 +54,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/filter/Neo4jVectorFilterExpressionConverterTests.java
Patch:
@@ -24,7 +24,6 @@
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.ai.vectorstore.filter.Filter.ExpressionType.AND;
@@ -130,7 +129,8 @@ public void testComplexIdentifiers() {
 
 	@Test
 	public void testComplexIdentifiers2() {
-		Filter.Expression expr = Filter.parser().parse("author in ['john', 'jill'] && 'article_type' == 'blog'");
+		Filter.Expression expr = new FilterExpressionTextParser()
+			.parse("author in ['john', 'jill'] && 'article_type' == 'blog'");
 		String vectorExpr = converter.convertExpression(expr);
 		assertThat(vectorExpr)
 			.isEqualTo("node.`metadata.author` IN [\"john\",\"jill\"] AND node.`metadata.'article_type'` = \"blog\"");

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorStore.java
Patch:
@@ -34,7 +34,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.jdbc.core.BatchPreparedStatementSetter;

File: vector-stores/spring-ai-pinecone/src/main/java/org/springframework/ai/vectorstore/PineconeVectorStore.java
Patch:
@@ -36,7 +36,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverter;
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;

File: vector-stores/spring-ai-redis/src/main/java/org/springframework/ai/vectorstore/RedisVectorStore.java
Patch:
@@ -31,7 +31,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;

File: vector-stores/spring-ai-weaviate/src/test/java/org/springframework/ai/vectorstore/WeaviateFilterExpressionConverterTests.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;
 import org.springframework.ai.vectorstore.filter.Filter.Value;
-import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
+import org.springframework.ai.vectorstore.filter.FilterExpressionConverter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -54,7 +54,7 @@ public class OpenAiApi {
 
 	private static final String DEFAULT_BASE_URL = "https://api.openai.com";
 	public static final String DEFAULT_CHAT_MODEL = "gpt-3.5-turbo";
-	public static final String DEFAULT_EMBEDDING_MODEL = "text-embedding-3-small";
+	public static final String DEFAULT_EMBEDDING_MODEL = "text-embedding-ada-002";
 	private static final Predicate<String> SSE_DONE_PREDICATE = "[DONE]"::equals;
 
 	private final RestClient restClient;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -42,7 +42,7 @@ void defaultEmbedding() {
 		assertThat(embeddingResponse.getResults()).hasSize(1);
 		assertThat(embeddingResponse.getResults().get(0)).isNotNull();
 		assertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1536);
-		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-3-small");
+		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-ada-002");
 		assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 2);
 		assertThat(embeddingResponse.getMetadata()).containsEntry("prompt-tokens", 2);
 
@@ -68,12 +68,12 @@ void embedding3Large() {
 	void textEmbeddingAda002() {
 
 		EmbeddingResponse embeddingResponse = embeddingClient.call(new EmbeddingRequest(List.of("Hello World"),
-				OpenAiEmbeddingOptions.builder().withModel("text-embedding-ada-002").build()));
+				OpenAiEmbeddingOptions.builder().withModel("text-embedding-3-small").build()));
 		assertThat(embeddingResponse.getResults()).hasSize(1);
 		assertThat(embeddingResponse.getResults().get(0)).isNotNull();
 		assertThat(embeddingResponse.getResults().get(0).getOutput()).hasSize(1536);
 
-		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-ada-002");
+		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-3-small");
 		assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 2);
 		assertThat(embeddingResponse.getMetadata()).containsEntry("prompt-tokens", 2);
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -54,7 +54,7 @@ public class OpenAiApi {
 
 	private static final String DEFAULT_BASE_URL = "https://api.openai.com";
 	public static final String DEFAULT_CHAT_MODEL = "gpt-3.5-turbo";
-	public static final String DEFAULT_EMBEDDING_MODEL = "text-embedding-ada-002";
+	public static final String DEFAULT_EMBEDDING_MODEL = "text-embedding-3-small";
 	private static final Predicate<String> SSE_DONE_PREDICATE = "[DONE]"::equals;
 
 	private final RestClient restClient;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -37,7 +37,7 @@
 import org.springframework.ai.chat.metadata.RateLimit;
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.model.ModelOptionsUtils;
-import org.springframework.ai.model.ToolFunctionCallback;
+import org.springframework.ai.model.function.ToolFunctionCallback;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/ChatCompletionRequestTests.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.chat.prompt.Prompt;
-import org.springframework.ai.model.AbstractToolFunctionCallback;
+import org.springframework.ai.model.function.AbstractToolFunctionCallback;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.chat.api.tool.MockWeatherService;
 import org.springframework.ai.openai.chat.api.tool.MockWeatherService.Request;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientIT.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.ai.chat.prompt.Prompt;
 import org.springframework.ai.chat.prompt.PromptTemplate;
 import org.springframework.ai.chat.prompt.SystemPromptTemplate;
-import org.springframework.ai.model.AbstractToolFunctionCallback;
+import org.springframework.ai.model.function.AbstractToolFunctionCallback;
 import org.springframework.ai.openai.OpenAiChatOptions;
 import org.springframework.ai.openai.OpenAiTestConfiguration;
 import org.springframework.ai.openai.chat.api.tool.MockWeatherService;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/ChatOptions.java
Patch:
@@ -16,10 +16,7 @@
 
 package org.springframework.ai.chat;
 
-import java.util.List;
-
 import org.springframework.ai.model.ModelOptions;
-import org.springframework.ai.model.ToolFunctionCallback;
 
 /**
  * The ChatOptions represent the common options, portable across different chat models.

File: spring-ai-core/src/main/java/org/springframework/ai/model/function/ToolFunctionCallback.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.model;
+package org.springframework.ai.model.function;
 
 /**
  * Represents a model function call handler. Implementations are registered with the

File: spring-ai-core/src/main/java/org/springframework/ai/document/Document.java
Patch:
@@ -33,7 +33,6 @@
 /**
  * A document is a container for the content and metadata of a document. It also contains
  * the document's unique ID and an optional embedding.
- * <p>
  */
 @JsonIgnoreProperties({ "contentFormatter" })
 public class Document {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/common/function/SpringAiFunctionAnnotationManager.java
Patch:
@@ -47,7 +47,7 @@ public void setApplicationContext(@NonNull ApplicationContext applicationContext
 	}
 
 	/**
-	 * @return a list of all the {@link java.util.Function}s annotated with
+	 * @return a list of all the java.util.Functions annotated with
 	 * {@link SpringAiFunction}.
 	 */
 	public List<ToolFunctionCallback> getAnnotatedToolFunctionCallbacks() {
@@ -79,8 +79,8 @@ public List<ToolFunctionCallback> getAnnotatedToolFunctionCallbacks() {
 	/**
 	 * Note that the underlying function is responsible for converting the output into
 	 * format that can be consumed by the Model. The default implementation converts the
-	 * output into String before sending it to the Model. Provide a custom Function<O,
-	 * String> responseConverter implementation to override this.
+	 * output into String before sending it to the Model. Provide a custom function
+	 * responseConverter implementation to override this.
 	 *
 	 */
 	public static class SpringAiFunctionToolFunctionCallback<I, O> extends AbstractToolFunctionCallback<I, O> {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/tool/ToolCallWithSpringAIFunctionAnnotationIT.java
Patch:
@@ -68,6 +68,7 @@ void functionCallTest() {
 
 	@Configuration
 	static class Config {
+
 		@SpringAiFunction(name = "WeatherInfo", description = "Get the weather in location",
 				classType = MockWeatherService.Request.class)
 		public Function<MockWeatherService.Request, MockWeatherService.Response> weatherFunction() {

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/filter/Neo4jVectorFilterExpressionConverterTests.java
Patch:
@@ -132,8 +132,8 @@ public void testComplexIdentifiers() {
 	public void testComplexIdentifiers2() {
 		Filter.Expression expr = Filter.parser().parse("author in ['john', 'jill'] && 'article_type' == 'blog'");
 		String vectorExpr = converter.convertExpression(expr);
-		System.out.println(vectorExpr);
-		assertThat(vectorExpr).isEqualTo("node.`metadata.country 1 2 3` = \"BG\"");
+		assertThat(vectorExpr)
+			.isEqualTo("node.`metadata.author` IN [\"john\",\"jill\"] AND node.`metadata.'article_type'` = \"blog\"");
 	}
 
 }

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureEmbeddingsOptionsTests.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
 
+import org.springframework.ai.document.MetadataMode;
 import org.springframework.ai.embedding.EmbeddingRequest;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -36,7 +37,7 @@ public class AzureEmbeddingsOptionsTests {
 	public void createRequestWithChatOptions() {
 
 		OpenAIClient mockClient = Mockito.mock(OpenAIClient.class);
-		var client = new AzureOpenAiEmbeddingClient(mockClient).withDefaultOptions(
+		var client = new AzureOpenAiEmbeddingClient(mockClient, MetadataMode.EMBED,
 				AzureOpenAiEmbeddingOptions.builder().withModel("DEFAULT_MODEL").withUser("USER_TEST").build());
 
 		var requestOptions = client.toEmbeddingOptions(new EmbeddingRequest(List.of("Test message content"), null));

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiAutoConfiguration.java
Patch:
@@ -60,7 +60,8 @@ public AzureOpenAiChatClient azureOpenAiChatClient(OpenAIClient openAIClient,
 	@Bean
 	public AzureOpenAiEmbeddingClient azureOpenAiEmbeddingClient(OpenAIClient openAIClient,
 			AzureOpenAiEmbeddingProperties embeddingProperties) {
-		return new AzureOpenAiEmbeddingClient(openAIClient).withDefaultOptions(embeddingProperties.getOptions());
+		return new AzureOpenAiEmbeddingClient(openAIClient, embeddingProperties.getMetadataMode(),
+				embeddingProperties.getOptions());
 	}
 
 }

File: models/spring-ai-transformers/src/main/java/org/springframework/ai/transformers/TransformersEmbeddingClient.java
Patch:
@@ -340,4 +340,4 @@ private static Resource toResource(String uri) {
 		return new DefaultResourceLoader().getResource(uri);
 	}
 
-}
+}
\ No newline at end of file

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/postgresml/PostgresMlAutoConfigurationIT.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2024 the original author or authors.
+ * Copyright 2024 - 2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -52,7 +52,7 @@ public class PostgresMlAutoConfigurationIT {
 	@Container
 	@ServiceConnection
 	static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(
-			DockerImageName.parse("ghcr.io/postgresml/postgresml:2.7.3").asCompatibleSubstituteFor("postgres"))
+			DockerImageName.parse("ghcr.io/postgresml/postgresml:2.8.1").asCompatibleSubstituteFor("postgres"))
 		.withCommand("sleep", "infinity")
 		.withLabel("org.springframework.boot.service-connection", "postgres")
 		.withUsername("postgresml")

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiChatClientIT.java
Patch:
@@ -180,7 +180,9 @@ public OpenAIClient openAIClient() {
 
 		@Bean
 		public AzureOpenAiChatClient azureOpenAiChatClient(OpenAIClient openAIClient) {
-			return new AzureOpenAiChatClient(openAIClient).withModel("gpt-35-turbo").withMaxTokens(200);
+			return new AzureOpenAiChatClient(openAIClient).withDefaultOptions(
+					AzureOpenAiChatOptions.builder().withModel("gpt-35-turbo").withMaxTokens(200).build());
+
 		}
 
 	}

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingClientIT.java
Patch:
@@ -60,7 +60,7 @@ public OpenAIClient openAIClient() {
 
 		@Bean
 		public AzureOpenAiEmbeddingClient azureEmbeddingClient(OpenAIClient openAIClient) {
-			return new AzureOpenAiEmbeddingClient(openAIClient, "text-embedding-ada-002");
+			return new AzureOpenAiEmbeddingClient(openAIClient);
 		}
 
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -38,6 +38,9 @@
 @EnableConfigurationProperties({ OpenAiConnectionProperties.class, OpenAiChatProperties.class,
 		OpenAiEmbeddingProperties.class, OpenAiImageProperties.class })
 @ImportRuntimeHints(NativeHints.class)
+/**
+ * @author Christian Tzolov
+ */
 public class OpenAiAutoConfiguration {
 
 	@Bean

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaApiIT.java
Patch:
@@ -51,7 +51,7 @@ public class OllamaApiIT {
 	private static final Log logger = LogFactory.getLog(OllamaApiIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.21").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.23").withExposedPorts(11434);
 
 	static OllamaApi ollamaApi;
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -173,7 +173,7 @@ ChatCompletionRequest createRequest(Prompt prompt, boolean stream) {
 				request = ModelOptionsUtils.merge(updatedRuntimeOptions, request, ChatCompletionRequest.class);
 			}
 			else {
-				throw new IllegalArgumentException("Prompt options are not of type ChatCompletionRequest:"
+				throw new IllegalArgumentException("Prompt options are not of type ChatOptions: "
 						+ prompt.getOptions().getClass().getSimpleName());
 			}
 		}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationIT.java
Patch:
@@ -47,7 +47,7 @@ public class OllamaEmbeddingAutoConfigurationIT {
 	private static String MODEL_NAME = "orca-mini";
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.16").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.23").withExposedPorts(11434);
 
 	static String baseUrl;
 
@@ -61,7 +61,8 @@ public static void beforeAll() throws IOException, InterruptedException {
 	}
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
-		.withPropertyValues("spring.ai.ollama.embedding.model=" + MODEL_NAME, "spring.ai.ollama.base-url=" + baseUrl)
+		.withPropertyValues("spring.ai.ollama.embedding.options.model=" + MODEL_NAME,
+				"spring.ai.ollama.base-url=" + baseUrl)
 		.withConfiguration(AutoConfigurations.of(OllamaAutoConfiguration.class));
 
 	@Test

File: spring-ai-core/src/main/java/org/springframework/ai/chat/ChatOptions.java
Patch:
@@ -19,12 +19,10 @@
 import org.springframework.ai.model.ModelOptions;
 
 /**
- * portable options
+ * The ChatOptions represent the common options, portable across different chat models.
  */
 public interface ChatOptions extends ModelOptions {
 
-	// determine portable optionsb
-
 	Float getTemperature();
 
 	void setTemperature(Float temperature);

File: vector-stores/spring-ai-redis/src/main/java/org/springframework/ai/vectorstore/RedisFilterExpressionConverter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023-2023 the original author or authors.
+ * Copyright 2023-2024 the original author or authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -104,7 +104,7 @@ private void doBinaryOperation(String delimiter, Expression expression, StringBu
 	private void doField(Expression expression, StringBuilder context) {
 		Key key = (Key) expression.left();
 		doKey(key, context);
-		MetadataField field = metadataFields.getOrDefault(key.key(), MetadataField.tag(key.key()));
+		MetadataField field = this.metadataFields.getOrDefault(key.key(), MetadataField.tag(key.key()));
 		Value value = (Value) expression.right();
 		switch (field.fieldType()) {
 			case NUMERIC:

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java
Patch:
@@ -32,7 +32,6 @@ private String getApiKey() {
 	@Bean
 	public OpenAiChatClient openAiChatClient(OpenAiApi api) {
 		OpenAiChatClient openAiChatClient = new OpenAiChatClient(api);
-		openAiChatClient.setTemperature(0.3);
 		return openAiChatClient;
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/transformer/MetadataTransformerIT.java
Patch:
@@ -166,7 +166,6 @@ public OpenAiApi openAiApi() throws IOException {
 		@Bean
 		public OpenAiChatClient openAiChatClient(OpenAiApi openAiApi) {
 			OpenAiChatClient openAiChatClient = new OpenAiChatClient(openAiApi);
-			openAiChatClient.setTemperature(0.3);
 			return openAiChatClient;
 		}
 

File: spring-ai-core/src/test/java/org/springframework/ai/parser/BeanOutputParserTest.java
Patch:
@@ -69,6 +69,7 @@ public void shouldReturnFormatContainingResponseInstructionsAndJsonSchema() {
 					"""
 							Your response should be in JSON format.
 							Do not include any explanations, only provide a RFC8259 compliant JSON response following this format without deviation.
+							Do not include markdown code blocks in your response.
 							Here is the JSON Schema instance your output must adhere to:
 							```{
 							  "$schema" : "https://json-schema.org/draft/2020-12/schema",

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingClientIT.java
Patch:
@@ -30,7 +30,7 @@ class OllamaEmbeddingClientIT {
 	private static final Log logger = LogFactory.getLog(OllamaApiIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.16").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.21").withExposedPorts(11434);
 
 	static String baseUrl;
 

File: vector-stores/spring-ai-chroma/src/main/java/org/springframework/ai/chroma/ChromaApi.java
Patch:
@@ -316,9 +316,9 @@ public List<Collection> listCollections() {
 	// Chroma Collection API (https://docs.trychroma.com/js_reference/Collection)
 	//
 
-	public Boolean upsertEmbeddings(String collectionId, AddEmbeddingsRequest embedding) {
+	public void upsertEmbeddings(String collectionId, AddEmbeddingsRequest embedding) {
 
-		return this.restTemplate
+		this.restTemplate
 			.exchange(this.baseUrl + "/api/v1/collections/{collection_id}/upsert", HttpMethod.POST,
 					this.getHttpEntityFor(embedding), Boolean.class, collectionId)
 			.getBody();

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/BasicAuthChromaWhereIT.java
Patch:
@@ -55,7 +55,7 @@ public class BasicAuthChromaWhereIT {
 	 * https://docs.trychroma.com/usage-guide#basic-authentication
 	 */
 	@Container
-	static GenericContainer<?> chromaContainer = new GenericContainer<>("ghcr.io/chroma-core/chroma:0.4.15")
+	static GenericContainer<?> chromaContainer = new GenericContainer<>("ghcr.io/chroma-core/chroma:0.4.22")
 		.withEnv("CHROMA_SERVER_AUTH_CREDENTIALS_FILE", "server.htpasswd")
 		.withEnv("CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER",
 				"chromadb.auth.providers.HtpasswdFileServerAuthCredentialsProvider")

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -46,7 +46,7 @@
 public class ChromaVectorStoreIT {
 
 	@Container
-	static GenericContainer<?> chromaContainer = new GenericContainer<>("ghcr.io/chroma-core/chroma:0.4.15")
+	static GenericContainer<?> chromaContainer = new GenericContainer<>("ghcr.io/chroma-core/chroma:0.4.22")
 		.withExposedPorts(8000);
 
 	List<Document> documents = List.of(

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/TokenSecuredChromaWhereIT.java
Patch:
@@ -57,7 +57,7 @@ public class TokenSecuredChromaWhereIT {
 	 * https://docs.trychroma.com/usage-guide#static-api-token-authentication
 	 */
 	@Container
-	static GenericContainer<?> chromaContainer = new GenericContainer<>("ghcr.io/chroma-core/chroma:0.4.15")
+	static GenericContainer<?> chromaContainer = new GenericContainer<>("ghcr.io/chroma-core/chroma:0.4.22")
 		.withEnv("CHROMA_SERVER_AUTH_CREDENTIALS", CHROMA_SERVER_AUTH_CREDENTIALS)
 		.withEnv("CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER",
 				"chromadb.auth.token.TokenConfigServerAuthCredentialsProvider")

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingClientIT.java
Patch:
@@ -50,8 +50,8 @@ public static void beforeAll() throws IOException, InterruptedException {
 	void singleEmbedding() {
 		assertThat(embeddingClient).isNotNull();
 		EmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of("Hello World"));
-		assertThat(embeddingResponse.getData()).hasSize(1);
-		assertThat(embeddingResponse.getData().get(0).getEmbedding()).isNotEmpty();
+		assertThat(embeddingResponse.getResults()).hasSize(1);
+		assertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();
 		assertThat(embeddingClient.dimensions()).isEqualTo(3200);
 	}
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -36,8 +36,8 @@ void simpleEmbedding() {
 		assertThat(embeddingClient).isNotNull();
 
 		EmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of("Hello World"));
-		assertThat(embeddingResponse.getData()).hasSize(1);
-		assertThat(embeddingResponse.getData().get(0).getEmbedding()).isNotEmpty();
+		assertThat(embeddingResponse.getResults()).hasSize(1);
+		assertThat(embeddingResponse.getResults().get(0)).isNotNull();
 		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-ada-002");
 		assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 2);
 		assertThat(embeddingResponse.getMetadata()).containsEntry("prompt-tokens", 2);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationIT.java
Patch:
@@ -70,8 +70,8 @@ public void singleTextEmbedding() {
 			OllamaEmbeddingClient embeddingClient = context.getBean(OllamaEmbeddingClient.class);
 			assertThat(embeddingClient).isNotNull();
 			EmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of("Hello World"));
-			assertThat(embeddingResponse.getData()).hasSize(1);
-			assertThat(embeddingResponse.getData().get(0).getEmbedding()).isNotEmpty();
+			assertThat(embeddingResponse.getResults()).hasSize(1);
+			assertThat(embeddingResponse.getResults().get(0).getOutput()).isNotEmpty();
 			assertThat(embeddingClient.dimensions()).isEqualTo(3200);
 		});
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaChatProperties.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
  * Ollama Chat autoconfiguration properties.
@@ -40,6 +41,7 @@ public class OllamaChatProperties {
 	 * topK and topP and alike parameters. The null values are ignored defaulting to the
 	 * generative's defaults.
 	 */
+	@NestedConfigurationProperty
 	private OllamaOptions options = new OllamaOptions();
 
 	public String getModel() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingProperties.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.boot.context.properties.ConfigurationProperties;
+import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 /**
  * Ollama Embedding autoconfiguration properties.
@@ -40,6 +41,7 @@ public class OllamaEmbeddingProperties {
 	 * topK and topP and alike parameters. The null values are ignored defaulting to the
 	 * generative's defaults.
 	 */
+	@NestedConfigurationProperty
 	private OllamaOptions options = new OllamaOptions();
 
 	public String getModel() {

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -96,10 +96,10 @@ public void handleError(ClientHttpResponse response) throws IOException {
 				if (response.getStatusCode().isError()) {
 					if (response.getStatusCode().is4xxClientError()) {
 						throw new OpenAiApiClientErrorException(String.format("%s - %s", response.getStatusCode().value(),
-							new ObjectMapper().readValue(response.getBody(), ResponseError.class)));
+							OpenAiApi.this.objectMapper.readValue(response.getBody(), ResponseError.class)));
 					}
 					throw new OpenAiApiException(String.format("%s - %s", response.getStatusCode().value(),
-							new ObjectMapper().readValue(response.getBody(), ResponseError.class)));
+							OpenAiApi.this.objectMapper.readValue(response.getBody(), ResponseError.class)));
 				}
 			}
 		};

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -38,7 +38,7 @@ void simpleEmbedding() {
 		EmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of("Hello World"));
 		assertThat(embeddingResponse.getData()).hasSize(1);
 		assertThat(embeddingResponse.getData().get(0).getEmbedding()).isNotEmpty();
-		assertThat(embeddingResponse.getMetadata()).containsEntry("generative", "text-embedding-ada-002-v2");
+		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-ada-002");
 		assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 2);
 		assertThat(embeddingResponse.getMetadata()).containsEntry("prompt-tokens", 2);
 

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/metadata/AzureOpenAiUsage.java
Patch:
@@ -19,7 +19,7 @@
 import com.azure.ai.openai.models.ChatCompletions;
 import com.azure.ai.openai.models.CompletionsUsage;
 
-import org.springframework.ai.metadata.Usage;
+import org.springframework.ai.chat.metadata.Usage;
 import org.springframework.util.Assert;
 
 /**

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/BedrockUsage.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.bedrock;
 
 import org.springframework.ai.bedrock.api.AbstractBedrockApi.AmazonBedrockInvocationMetrics;
-import org.springframework.ai.metadata.Usage;
+import org.springframework.ai.chat.metadata.Usage;
 import org.springframework.util.Assert;
 
 /**

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/MessageToPromptConverter.java
Patch:
@@ -19,8 +19,8 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import org.springframework.ai.prompt.messages.Message;
-import org.springframework.ai.prompt.messages.MessageType;
+import org.springframework.ai.chat.messages.Message;
+import org.springframework.ai.chat.messages.MessageType;
 
 /**
  * Converts a list of messages to a prompt for bedrock models.

File: models/spring-ai-huggingface/src/main/java/org/springframework/ai/huggingface/HuggingfaceChatClient.java
Patch:
@@ -32,7 +32,7 @@
 import org.springframework.ai.huggingface.model.GenerateParameters;
 import org.springframework.ai.huggingface.model.GenerateRequest;
 import org.springframework.ai.huggingface.model.GenerateResponse;
-import org.springframework.ai.prompt.Prompt;
+import org.springframework.ai.chat.prompt.Prompt;
 
 /**
  * An implementation of {@link ChatClient} that interfaces with HuggingFace Inference
@@ -86,7 +86,7 @@ public HuggingfaceChatClient(final String apiToken, String basePath) {
 	 * @return ChatResponse containing the generated text and other related details.
 	 */
 	@Override
-	public ChatResponse generate(Prompt prompt) {
+	public ChatResponse call(Prompt prompt) {
 		GenerateRequest generateRequest = new GenerateRequest();
 		generateRequest.setInputs(prompt.getContents());
 		GenerateParameters generateParameters = new GenerateParameters();

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaOptions.java
Patch:
@@ -25,6 +25,7 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.springframework.ai.chat.ChatOptions;
 
 /**
  * Helper class for creating strongly-typed Ollama options.
@@ -38,7 +39,7 @@
  * Types</a>
  */
 @JsonInclude(Include.NON_NULL)
-public class OllamaOptions {
+public class OllamaOptions implements ChatOptions {
 
 	// @formatter:off
 	/**

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingClientIT.java
Patch:
@@ -36,7 +36,7 @@ class OllamaEmbeddingClientIT {
 
 	@BeforeAll
 	public static void beforeAll() throws IOException, InterruptedException {
-		logger.info("Start pulling the 'orca-mini' model (3GB) ... would take several minutes ...");
+		logger.info("Start pulling the 'orca-mini' generative (3GB) ... would take several minutes ...");
 		ollamaContainer.execInContainer("ollama", "pull", "orca-mini");
 		logger.info("orca-mini pulling competed!");
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaApiIT.java
Patch:
@@ -57,7 +57,7 @@ public class OllamaApiIT {
 
 	@BeforeAll
 	public static void beforeAll() throws IOException, InterruptedException {
-		logger.info("Start pulling the 'orca-mini' model (3GB) ... would take several minutes ...");
+		logger.info("Start pulling the 'orca-mini' generative (3GB) ... would take several minutes ...");
 		ollamaContainer.execInContainer("ollama", "pull", "orca-mini");
 		logger.info("orca-mini pulling competed!");
 

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/api/OllamaModelOptionsTests.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * @author Christian Tzolov
  */
-public class OllamaOptionsTests {
+public class OllamaModelOptionsTests {
 
 	@Test
 	public void testOptions() {

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingClient.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package org.springframework.ai.openai;
 
 import java.time.Duration;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/api/OpenAiApi.java
Patch:
@@ -69,7 +69,7 @@ public OpenAiApi(String openAiToken) {
 	}
 
 	/**
-	 * Create an new chat completion api.
+	 * Create a new chat completion api.
 	 *
 	 * @param baseUrl api base URL.
 	 * @param openAiToken OpenAI apiKey.

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiRateLimit.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.time.Duration;
 
-import org.springframework.ai.metadata.RateLimit;
+import org.springframework.ai.chat.metadata.RateLimit;
 
 /**
  * {@link RateLimit} implementation for {@literal OpenAI}.

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/OpenAiUsage.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.ai.openai.metadata;
 
-import org.springframework.ai.metadata.Usage;
+import org.springframework.ai.chat.metadata.Usage;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.util.Assert;
 

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/metadata/support/OpenAiResponseHeaderExtractor.java
Patch:
@@ -26,7 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.springframework.ai.metadata.RateLimit;
+import org.springframework.ai.chat.metadata.RateLimit;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;
 import org.springframework.ai.openai.metadata.OpenAiRateLimit;
 import org.springframework.http.ResponseEntity;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -38,7 +38,7 @@ void simpleEmbedding() {
 		EmbeddingResponse embeddingResponse = embeddingClient.embedForResponse(List.of("Hello World"));
 		assertThat(embeddingResponse.getData()).hasSize(1);
 		assertThat(embeddingResponse.getData().get(0).getEmbedding()).isNotEmpty();
-		assertThat(embeddingResponse.getMetadata()).containsEntry("model", "text-embedding-ada-002-v2");
+		assertThat(embeddingResponse.getMetadata()).containsEntry("generative", "text-embedding-ada-002-v2");
 		assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 2);
 		assertThat(embeddingResponse.getMetadata()).containsEntry("prompt-tokens", 2);
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/transformer/MetadataTransformerIT.java
Patch:
@@ -65,7 +65,7 @@ public class MetadataTransformerIT {
 
 	Document document2 = new Document(
 			"The Spring Framework is divided into modules. Applications can choose which modules"
-					+ " they need. At the heart are the modules of the core container, including a configuration model and a "
+					+ " they need. At the heart are the modules of the core container, including a configuration generative and a "
 					+ "dependency injection mechanism. Beyond that, the Spring Framework provides foundational support "
 					+ " for different application architectures, including messaging, transactional data and persistence, "
 					+ "and web. It also includes the Servlet-based Spring MVC web framework and, in parallel, the Spring "

File: models/spring-ai-transformers/src/main/java/org/springframework/ai/transformers/ResourceCacheService.java
Patch:
@@ -56,7 +56,7 @@ public class ResourceCacheService {
 	private List<String> excludedUriSchemas = new ArrayList<>(List.of("file", "classpath"));
 
 	public ResourceCacheService() {
-		this(new File(System.getProperty("java.io.tmpdir"), "spring-ai-onnx-model").getAbsolutePath());
+		this(new File(System.getProperty("java.io.tmpdir"), "spring-ai-onnx-generative").getAbsolutePath());
 	}
 
 	public ResourceCacheService(String rootCacheDirectory) {

File: models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/samples/ONNXSample.java
Patch:
@@ -58,7 +58,7 @@ public static NDArray meanPooling(NDArray tokenEmbeddings, NDArray attentionMask
 
 	public static void main(String[] args) throws Exception {
 		String TOKENIZER_URI = "classpath:/onnx/tokenizer.json";
-		String MODEL_URI = "classpath:/onnx/model.onnx";
+		String MODEL_URI = "classpath:/onnx/generative.onnx";
 
 		var tokenizerResource = new DefaultResourceLoader().getResource(TOKENIZER_URI);
 		var modelResource = new DefaultResourceLoader().getResource(MODEL_URI);

File: models/spring-ai-vertex-ai/src/main/java/org/springframework/ai/vertex/api/VertexAiApi.java
Patch:
@@ -112,15 +112,15 @@ public class VertexAiApi {
 	private final String embeddingModel;
 
 	/**
-	 * Create an new chat completion api.
+	 * Create a new chat completion api.
 	 * @param apiKey vertex apiKey.
 	 */
 	public VertexAiApi(String apiKey) {
 		this(DEFAULT_BASE_URL, apiKey, DEFAULT_GENERATE_MODEL, DEFAULT_EMBEDDING_MODEL, RestClient.builder());
 	}
 
 	/**
-	 * Create an new chat completion api.
+	 * Create a new chat completion api.
 	 * @param baseUrl api base URL.
 	 * @param apiKey vertex apiKey.
 	 * @param model vertex model.

File: spring-ai-core/src/main/java/org/springframework/ai/chat/StreamingChatClient.java
Patch:
@@ -18,7 +18,7 @@
 
 import reactor.core.publisher.Flux;
 
-import org.springframework.ai.prompt.Prompt;
+import org.springframework.ai.chat.prompt.Prompt;
 
 @FunctionalInterface
 public interface StreamingChatClient {

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/AbstractMessage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt.messages;
+package org.springframework.ai.chat.messages;
 
 import org.springframework.core.io.Resource;
 import org.springframework.util.StreamUtils;
@@ -31,7 +31,7 @@ public abstract class AbstractMessage implements Message {
 	protected String content;
 
 	/**
-	 * Additional options for the message to influence the response, not a model map.
+	 * Additional options for the message to influence the response, not a generative map.
 	 */
 	protected Map<String, Object> properties = new HashMap<>();
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/ChatMessage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt.messages;
+package org.springframework.ai.chat.messages;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/FunctionMessage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt.messages;
+package org.springframework.ai.chat.messages;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/Message.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt.messages;
+package org.springframework.ai.chat.messages;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/MessageType.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.prompt.messages;
+package org.springframework.ai.chat.messages;
 
 public enum MessageType {
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/messages/UserMessage.java
Patch:
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt.messages;
+package org.springframework.ai.chat.messages;
 
 import org.springframework.core.io.Resource;
 
 /**
  * A message of the type 'user' passed as input Messages with the user role are from the
  * end-user or developer. They represent questions, prompts, or any input that you want
- * the model to respond to.
+ * the generative to respond to.
  */
 public class UserMessage extends AbstractMessage {
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/AbstractRateLimit.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.metadata;
+package org.springframework.ai.chat.metadata;
 
 import java.time.Duration;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/AbstractUsage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.metadata;
+package org.springframework.ai.chat.metadata;
 
 /**
  * Abstract base class used as a foundation for implementing {@link Usage}.

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/PromptMetadata.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.metadata;
+package org.springframework.ai.chat.metadata;
 
 import java.util.Arrays;
 import java.util.Optional;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/RateLimit.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.metadata;
+package org.springframework.ai.chat.metadata;
 
 import java.time.Duration;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/metadata/Usage.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.metadata;
+package org.springframework.ai.chat.metadata;
 
 /**
  * Abstract Data Type (ADT) encapsulating metadata on the usage of an AI provider's API

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/AssistantPromptTemplate.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
-import org.springframework.ai.prompt.messages.AssistantMessage;
+import org.springframework.ai.chat.messages.AssistantMessage;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/ChatPromptTemplate.java
Patch:
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
-import org.springframework.ai.prompt.messages.Message;
+import org.springframework.ai.chat.messages.Message;
 
 import java.util.ArrayList;
 import java.util.List;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/FunctionPromptTemplate.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
 public class FunctionPromptTemplate extends PromptTemplate {
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateActions.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateChatActions.java
Patch:
@@ -1,6 +1,6 @@
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
-import org.springframework.ai.prompt.messages.Message;
+import org.springframework.ai.chat.messages.Message;
 
 import java.util.List;
 import java.util.Map;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateMessageActions.java
Patch:
@@ -1,6 +1,6 @@
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
-import org.springframework.ai.prompt.messages.Message;
+import org.springframework.ai.chat.messages.Message;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/PromptTemplateStringActions.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/SystemPromptTemplate.java
Patch:
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
-import org.springframework.ai.prompt.messages.Message;
-import org.springframework.ai.prompt.messages.SystemMessage;
+import org.springframework.ai.chat.messages.Message;
+import org.springframework.ai.chat.messages.SystemMessage;
 import org.springframework.core.io.Resource;
 
 import java.util.Map;

File: spring-ai-core/src/main/java/org/springframework/ai/chat/prompt/TemplateFormat.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
+package org.springframework.ai.chat.prompt;
 
 public enum TemplateFormat {
 

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/EmbeddingClient.java
Patch:
@@ -38,7 +38,8 @@ public interface EmbeddingClient {
 	EmbeddingResponse embedForResponse(List<String> texts);
 
 	/**
-	 * @return the number of dimensions of the embedded vectors. It is model specific.
+	 * @return the number of dimensions of the embedded vectors. It is generative
+	 * specific.
 	 */
 	default int dimensions() {
 		return embed("Test String").size();

File: spring-ai-core/src/main/java/org/springframework/ai/parser/FormatProvider.java
Patch:
@@ -18,15 +18,15 @@
 
 /**
  * Implementations of this interface provides instructions for how the output of a
- * language model should be formatted.
+ * language generative should be formatted.
  *
  * @author Mark Pollack
  */
 public interface FormatProvider {
 
 	/**
 	 * @return Returns a string containing instructions for how the output of a language
-	 * model should be formatted.
+	 * generative should be formatted.
 	 */
 	String getFormat();
 

File: spring-ai-core/src/test/java/org/springframework/ai/embedding/EmbeddingUtilTests.java
Patch:
@@ -18,6 +18,7 @@
 
 import java.util.List;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.junit.jupiter.params.ParameterizedTest;

File: spring-ai-core/src/test/java/org/springframework/ai/metadata/PromptMetadataTests.java
Patch:
@@ -22,7 +22,8 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.metadata.PromptMetadata.PromptFilterMetadata;
+import org.springframework.ai.chat.metadata.PromptMetadata;
+import org.springframework.ai.chat.metadata.PromptMetadata.PromptFilterMetadata;
 
 /**
  * Unit Tests for {@link PromptMetadata}.

File: spring-ai-core/src/test/java/org/springframework/ai/metadata/UsageTests.java
Patch:
@@ -25,6 +25,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.jupiter.api.Test;
+import org.springframework.ai.chat.metadata.Usage;
 
 /**
  * Unit Tests for {@link Usage}.

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiEmbeddingProperties.java
Patch:
@@ -24,7 +24,7 @@ public class AzureOpenAiEmbeddingProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.azure.openai.embedding";
 
 	/**
-	 * The text embedding model to use for the embedding client.
+	 * The text embedding generative to use for the embedding client.
 	 */
 	private String model = "text-embedding-ada-002";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/cohere/BedrockCohereEmbeddingProperties.java
Patch:
@@ -38,7 +38,8 @@ public class BedrockCohereEmbeddingProperties {
 	private boolean enabled = false;
 
 	/**
-	 * Bedrock Cohere Embedding model name. Defaults to 'cohere.embed-multilingual-v3'.
+	 * Bedrock Cohere Embedding generative name. Defaults to
+	 * 'cohere.embed-multilingual-v3'.
 	 */
 	private String model = CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingProperties.java
Patch:
@@ -37,7 +37,7 @@ public class BedrockTitanEmbeddingProperties {
 	private boolean enabled = false;
 
 	/**
-	 * Bedrock Titan Embedding model name. Defaults to 'amazon.titan-embed-image-v1'.
+	 * Bedrock Titan Embedding generative name. Defaults to 'amazon.titan-embed-image-v1'.
 	 */
 	private String model = TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientProperties.java
Patch:
@@ -39,7 +39,7 @@ public class TransformersEmbeddingClientProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.embedding.transformer";
 
 	public static final String DEFAULT_CACHE_DIRECTORY = new File(System.getProperty("java.io.tmpdir"),
-			"spring-ai-onnx-model")
+			"spring-ai-onnx-generative")
 		.getAbsolutePath();
 
 	/**
@@ -91,7 +91,7 @@ public static class Cache {
 		/**
 		 * Resource cache directory. Used to cache remote resources, such as the ONNX
 		 * models, to the local file system. Applicable only for cache.enabled == true.
-		 * Defaults to {java.io.tmpdir}/spring-ai-onnx-model.
+		 * Defaults to {java.io.tmpdir}/spring-ai-onnx-generative.
 		 */
 		private String directory = DEFAULT_CACHE_DIRECTORY;
 
@@ -125,7 +125,7 @@ public Cache getCache() {
 	public static class Onnx {
 
 		/**
-		 * Existing, pre-trained ONNX model. Commonly exported from
+		 * Existing, pre-trained ONNX generative. Commonly exported from
 		 * https://sbert.net/docs/pretrained_models.html. Defaults to
 		 * sentence-transformers/all-MiniLM-L6-v2.
 		 */

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/VertexAiEmbeddingProperties.java
Patch:
@@ -25,7 +25,7 @@ public class VertexAiEmbeddingProperties {
 	public static final String CONFIG_PREFIX = "spring.ai.vertex.ai.embedding";
 
 	/**
-	 * Vertex AI PaLM API embedding model name. Defaults to embedding-gecko-001.
+	 * Vertex AI PaLM API embedding generative name. Defaults to embedding-gecko-001.
 	 */
 	private String model = VertexAiApi.DEFAULT_EMBEDDING_MODEL;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaAutoConfigurationTests.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.autoconfigure.ollama;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.ollama.OllamaChatClient;
+
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationIT.java
Patch:
@@ -53,7 +53,7 @@ public class OllamaEmbeddingAutoConfigurationIT {
 
 	@BeforeAll
 	public static void beforeAll() throws IOException, InterruptedException {
-		logger.info("Start pulling the '" + MODEL_NAME + " ' model ... would take several minutes ...");
+		logger.info("Start pulling the '" + MODEL_NAME + " ' generative ... would take several minutes ...");
 		ollamaContainer.execInContainer("ollama", "pull", MODEL_NAME);
 		logger.info(MODEL_NAME + " pulling competed!");
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationTests.java
Patch:
@@ -17,7 +17,7 @@
 package org.springframework.ai.autoconfigure.ollama;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.ai.ollama.OllamaEmbeddingClient;
+
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfigurationIT.java
Patch:
@@ -45,8 +45,8 @@ public void embedding() {
 		contextRunner.run(context -> {
 			var properties = context.getBean(TransformersEmbeddingClientProperties.class);
 			assertThat(properties.getCache().isEnabled()).isTrue();
-			assertThat(properties.getCache().getDirectory())
-				.isEqualTo(new File(System.getProperty("java.io.tmpdir"), "spring-ai-onnx-model").getAbsolutePath());
+			assertThat(properties.getCache().getDirectory()).isEqualTo(
+					new File(System.getProperty("java.io.tmpdir"), "spring-ai-onnx-generative").getAbsolutePath());
 
 			EmbeddingClient embeddingClient = context.getBean(EmbeddingClient.class);
 			assertThat(embeddingClient).isInstanceOf(TransformersEmbeddingClient.class);

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/VertexAiAutoConfigurationIT.java
Patch:
@@ -48,7 +48,7 @@ void generate() {
 		contextRunner.run(context -> {
 			VertexAiChatClient client = context.getBean(VertexAiChatClient.class);
 
-			String response = client.generate("Hello");
+			String response = client.call("Hello");
 
 			assertThat(response).isNotEmpty();
 			logger.info("Response: " + response);

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletion;
 import org.springframework.ai.openai.api.OpenAiApi.ChatCompletionMessage;
+import org.springframework.ai.openai.api.OpenAiApi.OpenAiApiClientErrorException;
 import org.springframework.ai.openai.api.OpenAiApi.OpenAiApiException;
 import org.springframework.ai.openai.metadata.OpenAiGenerationMetadata;
 import org.springframework.ai.openai.metadata.support.OpenAiResponseHeaderExtractor;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientWithGenerationMetadataTests.java
Patch:
@@ -117,7 +117,7 @@ void aiResponseContainsAiMetadata() {
 		response.getGenerations().forEach(generation -> {
 			ChoiceMetadata choiceMetadata = generation.getChoiceMetadata();
 			assertThat(choiceMetadata).isNotNull();
-			assertThat(choiceMetadata.getFinishReason()).isEqualTo("stop");
+			assertThat(choiceMetadata.getFinishReason()).isEqualTo("STOP");
 			assertThat(choiceMetadata.<Object>getContentFilterMetadata()).isNull();
 		});
 	}

File: models/spring-ai-huggingface/src/main/java/org/springframework/ai/huggingface/HuggingfaceChatClient.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.huggingface.client;
+package org.springframework.ai.huggingface;
 
 import java.util.ArrayList;
 import java.util.List;

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/HuggingfaceTestConfiguration.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.springframework.ai.huggingface;
 
-import org.springframework.ai.huggingface.client.HuggingfaceChatClient;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.util.StringUtils;

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/client/ClientIT.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.chat.ChatResponse;
+import org.springframework.ai.huggingface.HuggingfaceChatClient;
 import org.springframework.ai.prompt.Prompt;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiChatClient.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.openai.client;
+package org.springframework.ai.openai;
 
 import java.time.Duration;
 import java.util.List;

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/OpenAiEmbeddingClient.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.springframework.ai.openai.embedding;
+package org.springframework.ai.openai;
 
 import java.time.Duration;
 import java.util.HashMap;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java
Patch:
@@ -2,8 +2,6 @@
 
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.client.OpenAiChatClient;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.util.StringUtils;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/acme/AcmeIT.java
Patch:
@@ -12,8 +12,8 @@
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.openai.OpenAiTestConfiguration;
-import org.springframework.ai.openai.client.OpenAiChatClient;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiChatClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.ai.openai.testutils.AbstractIT;
 import org.springframework.ai.prompt.Prompt;
 import org.springframework.ai.prompt.SystemPromptTemplate;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientWithGenerationMetadataTests.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.ai.metadata.RateLimit;
 import org.springframework.ai.metadata.Usage;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.client.OpenAiChatClient;
+import org.springframework.ai.openai.OpenAiChatClient;
 import org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;
 import org.springframework.ai.prompt.Prompt;
 import org.springframework.beans.factory.annotation.Autowired;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.embedding.EmbeddingResponse;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/transformer/MetadataTransformerIT.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.ai.document.DefaultContentFormatter;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.client.OpenAiChatClient;
+import org.springframework.ai.openai.OpenAiChatClient;
 import org.springframework.ai.transformer.ContentFormatTransformer;
 import org.springframework.ai.transformer.KeywordMetadataEnricher;
 import org.springframework.ai.transformer.SummaryMetadataEnricher;

File: models/spring-ai-vertex-ai/src/main/java/org/springframework/ai/vertex/VertexAiChatClient.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vertex.generation;
+package org.springframework.ai.vertex;
 
 import java.util.List;
 import java.util.stream.Collectors;

File: models/spring-ai-vertex-ai/src/main/java/org/springframework/ai/vertex/VertexAiEmbeddingClient.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.vertex.embedding;
+package org.springframework.ai.vertex;
 
 import java.util.List;
 import java.util.Map;

File: models/spring-ai-vertex-ai/src/test/java/org/springframework/ai/vertex/embedding/VertexAiEmbeddingClientIT.java
Patch:
@@ -4,6 +4,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.embedding.EmbeddingResponse;
+import org.springframework.ai.vertex.VertexAiEmbeddingClient;
 import org.springframework.ai.vertex.api.VertexAiApi;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringBootConfiguration;

File: models/spring-ai-vertex-ai/src/test/java/org/springframework/ai/vertex/generation/VertexAiChatGenerationClientIT.java
Patch:
@@ -17,6 +17,7 @@
 import org.springframework.ai.prompt.SystemPromptTemplate;
 import org.springframework.ai.prompt.messages.Message;
 import org.springframework.ai.prompt.messages.UserMessage;
+import org.springframework.ai.vertex.VertexAiChatClient;
 import org.springframework.ai.vertex.api.VertexAiApi;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public class BedrockTitanChatAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public TitanChatBedrockApi titanApi(AwsCredentialsProvider credentialsProvider,
+	public TitanChatBedrockApi titanChatBedrockApi(AwsCredentialsProvider credentialsProvider,
 			BedrockTitanChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 
 		return new TitanChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingAutoConfiguration.java
Patch:
@@ -49,7 +49,7 @@ public class BedrockTitanEmbeddingAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public TitanEmbeddingBedrockApi titanApi(AwsCredentialsProvider credentialsProvider,
+	public TitanEmbeddingBedrockApi titanEmbeddingBedrockApi(AwsCredentialsProvider credentialsProvider,
 			BedrockTitanEmbeddingProperties properties, BedrockAwsConnectionProperties awsProperties) {
 		return new TitanEmbeddingBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
 				new ObjectMapper());

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.springframework.ai.autoconfigure.huggingface;
 
-import org.springframework.ai.huggingface.client.HuggingfaceChatClient;
+import org.springframework.ai.huggingface.HuggingfaceChatClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -25,11 +25,11 @@
 @AutoConfiguration
 @ConditionalOnClass(HuggingfaceChatClient.class)
 @EnableConfigurationProperties(HuggingfaceChatProperties.class)
-public class HuggingfaceAutoConfiguration {
+public class HuggingfaceChatAutoConfiguration {
 
 	private final HuggingfaceChatProperties huggingfaceChatProperties;
 
-	public HuggingfaceAutoConfiguration(HuggingfaceChatProperties huggingfaceChatProperties) {
+	public HuggingfaceChatAutoConfiguration(HuggingfaceChatProperties huggingfaceChatProperties) {
 		this.huggingfaceChatProperties = huggingfaceChatProperties;
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceChatProperties.java
Patch:
@@ -2,10 +2,10 @@
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-@ConfigurationProperties(HuggingfaceProperties.CONFIG_PREFIX)
-public class HuggingfaceProperties {
+@ConfigurationProperties(HuggingfaceChatProperties.CONFIG_PREFIX)
+public class HuggingfaceChatProperties {
 
-	public static final String CONFIG_PREFIX = "spring.ai.huggingface";
+	public static final String CONFIG_PREFIX = "spring.ai.huggingface.chat";
 
 	private String apiKey;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -19,8 +19,8 @@
 import org.springframework.ai.autoconfigure.NativeHints;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.client.OpenAiChatClient;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiChatClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/VertexAiAutoConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.springframework.ai.autoconfigure.NativeHints;
 import org.springframework.ai.vertex.api.VertexAiApi;
-import org.springframework.ai.vertex.embedding.VertexAiEmbeddingClient;
-import org.springframework.ai.vertex.generation.VertexAiChatClient;
+import org.springframework.ai.vertex.VertexAiEmbeddingClient;
+import org.springframework.ai.vertex.VertexAiChatClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.embedding.EmbeddingResponse;
-import org.springframework.ai.openai.client.OpenAiChatClient;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiChatClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vertexai/VertexAiAutoConfigurationIT.java
Patch:
@@ -24,8 +24,8 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.embedding.EmbeddingResponse;
-import org.springframework.ai.vertex.embedding.VertexAiEmbeddingClient;
-import org.springframework.ai.vertex.generation.VertexAiChatClient;
+import org.springframework.ai.vertex.VertexAiEmbeddingClient;
+import org.springframework.ai.vertex.VertexAiChatClient;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/BasicAuthChromaWhereIT.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.ai.vectorsore.ChromaVectorStore;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/ChromaVectorStoreIT.java
Patch:
@@ -30,7 +30,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.ai.vectorsore.ChromaVectorStore;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: vector-stores/spring-ai-chroma/src/test/java/org/springframework/ai/vectorstore/TokenSecuredChromaWhereIT.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.ai.vectorsore.ChromaVectorStore;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusVectorStoreIT.java
Patch:
@@ -42,7 +42,7 @@
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.vectorstore.MilvusVectorStore.MilvusVectorStoreConfig;
 import org.springframework.ai.vertex.api.VertexAiApi;
-import org.springframework.ai.vertex.embedding.VertexAiEmbeddingClient;
+import org.springframework.ai.vertex.VertexAiEmbeddingClient;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: vector-stores/spring-ai-neo4j-store/src/test/java/org/springframework/ai/vectorstore/Neo4jVectorStoreIT.java
Patch:
@@ -18,7 +18,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorStoreIT.java
Patch:
@@ -28,7 +28,6 @@
 
 import com.zaxxer.hikari.HikariDataSource;
 import org.junit.Assert;
-import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;
@@ -39,7 +38,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.api.OpenAiApi;
-import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
+import org.springframework.ai.openai.OpenAiEmbeddingClient;
 import org.springframework.ai.vectorstore.PgVectorStore.PgIndexType;
 import org.springframework.ai.vectorstore.filter.FilterExpressionTextParser.FilterExpressionParseException;
 import org.springframework.beans.factory.annotation.Value;

File: spring-ai-core/src/main/java/org/springframework/ai/parser/FormatProvider.java
Patch:
@@ -14,9 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.prompt;
-
-//TODO: Shouldn't the FormatProvider be inside the parser package?
+package org.springframework.ai.parser;
 
 /**
  * Implementations of this interface provides instructions for how the output of a

File: spring-ai-core/src/main/java/org/springframework/ai/parser/OutputParser.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.ai.parser;
 
-import org.springframework.ai.prompt.FormatProvider;
-
 /**
  * Converts the (raw) LLM output into a structured responses of type. The
  * {@link FormatProvider#getFormat()} method should provide the LLM prompt description of

File: models/spring-ai-transformers/src/main/java/org/springframework/ai/transformers/ResourceCacheService.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.embedding;
+package org.springframework.ai.transformers;
 
 import java.io.File;
 import java.io.IOException;

File: models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/ResourceCacheServiceTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.embedding;
+package org.springframework.ai.transformers;
 
 import java.io.File;
 import java.io.IOException;

File: models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/TransformersEmbeddingClientTests.java
Patch:
@@ -14,14 +14,15 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.embedding;
+package org.springframework.ai.transformers;
 
 import java.text.DecimalFormat;
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.document.Document;
+import org.springframework.ai.embedding.EmbeddingResponse;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: models/spring-ai-transformers/src/test/java/org/springframework/ai/transformers/samples/ONNXSample.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.embedding.samples;
+package org.springframework.ai.transformers.samples;
 
 import java.nio.FloatBuffer;
 import java.util.HashMap;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfiguration.java
Patch:
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.autoconfigure.embedding.transformer;
+package org.springframework.ai.autoconfigure.transformers;
 
 import ai.djl.huggingface.tokenizers.HuggingFaceTokenizer;
 import ai.onnxruntime.OrtSession;
 
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientProperties.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.autoconfigure.embedding.transformer;
+package org.springframework.ai.autoconfigure.transformers;
 
 import java.io.File;
 import java.util.HashMap;
@@ -25,10 +25,10 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.document.MetadataMode;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-import static org.springframework.ai.autoconfigure.embedding.transformer.TransformersEmbeddingClientProperties.CONFIG_PREFIX;
+import static org.springframework.ai.autoconfigure.transformers.TransformersEmbeddingClientProperties.CONFIG_PREFIX;
 
 /**
  * @author Christian Tzolov

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfigurationIT.java
Patch:
@@ -22,10 +22,8 @@
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 
-import org.springframework.ai.autoconfigure.embedding.transformer.TransformersEmbeddingClientAutoConfiguration;
-import org.springframework.ai.autoconfigure.embedding.transformer.TransformersEmbeddingClientProperties;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/azure/AzureVectorStoreAutoConfigurationIT.java
Patch:
@@ -30,7 +30,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.azure.AzureVectorStore;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfigurationIT.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.ai.ResourceUtils;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/neo4j/Neo4jVectorStoreAutoConfigurationIT.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.ai.ResourceUtils;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfigurationIT.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pinecone/PineconeVectorStoreAutoConfigurationIT.java
Patch:
@@ -30,7 +30,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/redis/RedisVectorStoreAutoConfigurationIT.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.ai.ResourceUtils;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfigurationTests.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;

File: vector-stores/spring-ai-azure/src/test/java/org/springframework/ai/vectorstore/azure/AzureVectorStoreIT.java
Patch:
@@ -36,7 +36,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.SearchRequest;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.ai.vectorstore.azure.AzureVectorStore.MetadataField;

File: vector-stores/spring-ai-pinecone/src/test/java/org/springframework/ai/vectorstore/PineconeVectorStoreIT.java
Patch:
@@ -32,7 +32,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.PineconeVectorStore.PineconeVectorStoreConfig;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;

File: vector-stores/spring-ai-redis/src/test/java/org/springframework/ai/vectorstore/RedisVectorStoreIT.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.RedisVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.RedisVectorStore.RedisVectorStoreConfig;
 import org.springframework.boot.SpringBootConfiguration;

File: vector-stores/spring-ai-weaviate/src/test/java/org/springframework/ai/vectorstore/WeaviateVectorStoreIT.java
Patch:
@@ -30,7 +30,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.embedding.TransformersEmbeddingClient;
+import org.springframework.ai.transformers.TransformersEmbeddingClient;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig;
 import org.springframework.ai.vectorstore.WeaviateVectorStore.WeaviateVectorStoreConfig.MetadataField;
 import org.springframework.boot.SpringBootConfiguration;

File: models/spring-ai-bedrock/src/main/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApi.java
Patch:
@@ -41,7 +41,7 @@ public class Ai21Jurassic2ChatBedrockApi extends
 	 * Create a new Ai21Jurassic2ChatBedrockApi instance using the default credentials provider chain, the default
 	 * object mapper, default temperature and topP values.
 	 *
-	 * @param modelId The model id to use. See the {@link Ai21Jurassic2ChatCompletionModel} for the supported models.
+	 * @param modelId The model id to use. See the {@link Ai21Jurassic2ChatModel} for the supported models.
 	 * @param region The AWS region to use.
 	 */
 	public Ai21Jurassic2ChatBedrockApi(String modelId, String region) {
@@ -243,7 +243,7 @@ public record FinishReason(
 	/**
 	 * Ai21 Jurassic2 models version.
 	 */
-	public enum Ai21Jurassic2ChatCompletionModel {
+	public enum Ai21Jurassic2ChatModel {
 
 		/**
 		 * ai21.j2-mid-v1
@@ -264,7 +264,7 @@ public String id() {
 			return id;
 		}
 
-		Ai21Jurassic2ChatCompletionModel(String value) {
+		Ai21Jurassic2ChatModel(String value) {
 			this.id = value;
 		}
 	}

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/jurassic2/api/Ai21Jurassic2ChatBedrockApiIT.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import software.amazon.awssdk.regions.Region;
 
-import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatCompletionModel;
+import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatModel;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatRequest;
 import org.springframework.ai.bedrock.jurassic2.api.Ai21Jurassic2ChatBedrockApi.Ai21Jurassic2ChatResponse;
 
@@ -35,8 +35,8 @@
 @EnabledIfEnvironmentVariable(named = "AWS_SECRET_ACCESS_KEY", matches = ".*")
 public class Ai21Jurassic2ChatBedrockApiIT {
 
-	Ai21Jurassic2ChatBedrockApi api = new Ai21Jurassic2ChatBedrockApi(
-			Ai21Jurassic2ChatCompletionModel.AI21_J2_ULTRA_V1.id(), Region.US_EAST_1.id());
+	Ai21Jurassic2ChatBedrockApi api = new Ai21Jurassic2ChatBedrockApi(Ai21Jurassic2ChatModel.AI21_J2_ULTRA_V1.id(),
+			Region.US_EAST_1.id());
 
 	@Test
 	public void chatCompletion() {

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/BedrockLlama2ChatClientIT.java
Patch:
@@ -14,7 +14,7 @@
 import software.amazon.awssdk.regions.Region;
 
 import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi;
-import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatCompletionModel;
+import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.parser.BeanOutputParser;
 import org.springframework.ai.parser.ListOutputParser;
@@ -158,7 +158,7 @@ public static class TestConfiguration {
 
 		@Bean
 		public Llama2ChatBedrockApi llama2Api() {
-			return new Llama2ChatBedrockApi(Llama2ChatCompletionModel.LLAMA2_70B_CHAT_V1.id(),
+			return new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),
 					EnvironmentVariableCredentialsProvider.create(), Region.US_EAST_1.id(), new ObjectMapper());
 		}
 

File: models/spring-ai-bedrock/src/test/java/org/springframework/ai/bedrock/llama2/api/Llama2ChatBedrockApiIT.java
Patch:
@@ -23,7 +23,7 @@
 import reactor.core.publisher.Flux;
 import software.amazon.awssdk.regions.Region;
 
-import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatCompletionModel;
+import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;
 import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatRequest;
 import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatResponse;
 
@@ -36,8 +36,8 @@
 @EnabledIfEnvironmentVariable(named = "AWS_SECRET_ACCESS_KEY", matches = ".*")
 public class Llama2ChatBedrockApiIT {
 
-	private Llama2ChatBedrockApi llama2ChatApi = new Llama2ChatBedrockApi(
-			Llama2ChatCompletionModel.LLAMA2_70B_CHAT_V1.id(), Region.US_EAST_1.id());
+	private Llama2ChatBedrockApi llama2ChatApi = new Llama2ChatBedrockApi(Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),
+			Region.US_EAST_1.id());
 
 	@Test
 	public void chatCompletion() {

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/bedrock/llama2/BedrockLlama2ChatAutoConfigurationIT.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.springframework.ai.autoconfigure.bedrock.BedrockAwsConnectionProperties;
 import org.springframework.ai.bedrock.llama2.BedrockLlama2ChatClient;
-import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatCompletionModel;
+import org.springframework.ai.bedrock.llama2.api.Llama2ChatBedrockApi.Llama2ChatModel;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.prompt.Prompt;
 import org.springframework.ai.prompt.SystemPromptTemplate;
@@ -52,7 +52,7 @@ public class BedrockLlama2ChatAutoConfigurationIT {
 				"spring.ai.bedrock.aws.access-key=" + System.getenv("AWS_ACCESS_KEY_ID"),
 				"spring.ai.bedrock.aws.secret-key=" + System.getenv("AWS_SECRET_ACCESS_KEY"),
 				"spring.ai.bedrock.aws.region=" + Region.US_EAST_1.id(),
-				"spring.ai.bedrock.llama2.chat.model=" + Llama2ChatCompletionModel.LLAMA2_70B_CHAT_V1.id(),
+				"spring.ai.bedrock.llama2.chat.model=" + Llama2ChatModel.LLAMA2_70B_CHAT_V1.id(),
 				"spring.ai.bedrock.llama2.chat.temperature=0.5", "spring.ai.bedrock.llama2.chat.maxGenLen=500")
 		.withConfiguration(AutoConfigurations.of(BedrockLlama2ChatAutoConfiguration.class));
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vectorstore/milvus/MilvusVectorStoreAutoConfiguration.java
Patch:
@@ -53,6 +53,7 @@ public VectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingClient
 			.withIndexType(IndexType.valueOf(properties.getIndexType().name()))
 			.withMetricType(MetricType.valueOf(properties.getMetricType().name()))
 			.withIndexParameters(properties.getIndexParameters())
+			.withEmbeddingDimension(properties.getEmbeddingDimension())
 			.build();
 
 		return new MilvusVectorStore(milvusClient, embeddingClient, config);

File: models/spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/AzureOpenAiEmbeddingClient.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.azure.openai.embedding;
+package org.springframework.ai.azure.openai;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/MockAzureOpenAiTestConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 import com.azure.ai.openai.OpenAIClient;
 import com.azure.ai.openai.OpenAIClientBuilder;
 
-import org.springframework.ai.azure.openai.client.AzureOpenAiChatClient;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Import;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/ActorsFilms.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.openai.client;
+package org.springframework.ai.openai.chat;
 
 import java.util.List;
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientIT.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.openai.client;
+package org.springframework.ai.openai.chat;
 
 import java.util.Arrays;
 import java.util.List;

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/chat/OpenAiChatClientWithGenerationMetadataTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.openai.client;
+package org.springframework.ai.openai.chat;
 
 import java.time.Duration;
 
@@ -28,6 +28,7 @@
 import org.springframework.ai.metadata.RateLimit;
 import org.springframework.ai.metadata.Usage;
 import org.springframework.ai.openai.api.OpenAiApi;
+import org.springframework.ai.openai.client.OpenAiChatClient;
 import org.springframework.ai.openai.metadata.support.OpenAiApiResponseHeaders;
 import org.springframework.ai.prompt.Prompt;
 import org.springframework.beans.factory.annotation.Autowired;

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/transformers/TransformersEmbeddingClientAutoConfigurationIT.java
Patch:
@@ -14,14 +14,16 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.autoconfigure.embedding.transformer;
+package org.springframework.ai.autoconfigure.transformers;
 
 import java.io.File;
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 
+import org.springframework.ai.autoconfigure.embedding.transformer.TransformersEmbeddingClientAutoConfiguration;
+import org.springframework.ai.autoconfigure.embedding.transformer.TransformersEmbeddingClientProperties;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.embedding.TransformersEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfigurations;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/huggingface/HuggingfaceProperties.java
Patch:
@@ -2,9 +2,7 @@
 
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
-import static org.springframework.ai.autoconfigure.openai.OpenAiProperties.CONFIG_PREFIX;
-
-@ConfigurationProperties(CONFIG_PREFIX)
+@ConfigurationProperties(HuggingfaceProperties.CONFIG_PREFIX)
 public class HuggingfaceProperties {
 
 	public static final String CONFIG_PREFIX = "spring.ai.huggingface";

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/MockAiTestConfiguration.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.test.config;
+package org.springframework.ai.azure.openai;
 
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 

File: models/spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/MockAzureOpenAiTestConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import com.azure.ai.openai.OpenAIClient;
 import com.azure.ai.openai.OpenAIClientBuilder;
 
-import org.springframework.ai.azure.openai.client.AzureOpenAiClient;
+import org.springframework.ai.azure.openai.client.AzureOpenAiChatClient;
 import org.springframework.ai.test.config.MockAiTestConfiguration;
 import org.springframework.boot.SpringBootConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -64,8 +64,8 @@ OpenAIClient microsoftAzureOpenAiClient(MockWebServer webServer) {
 	}
 
 	@Bean
-	AzureOpenAiClient azureOpenAiClient(OpenAIClient microsoftAzureOpenAiClient) {
-		return new AzureOpenAiClient(microsoftAzureOpenAiClient);
+	AzureOpenAiChatClient azureOpenAiChatClient(OpenAIClient microsoftAzureOpenAiClient) {
+		return new AzureOpenAiChatClient(microsoftAzureOpenAiClient);
 	}
 
 }

File: models/spring-ai-huggingface/src/main/java/org/springframework/ai/huggingface/client/HuggingfaceChatClient.java
Patch:
@@ -40,7 +40,7 @@
  *
  * @author Mark Pollack
  */
-public class HuggingfaceAiClient implements ChatClient {
+public class HuggingfaceChatClient implements ChatClient {
 
 	/**
 	 * Token required for authenticating with the HuggingFace Inference API.
@@ -69,11 +69,11 @@ public class HuggingfaceAiClient implements ChatClient {
 	private int maxNewTokens = 1000;
 
 	/**
-	 * Constructs a new HuggingfaceAiClient with the specified API token and base path.
+	 * Constructs a new HuggingfaceChatClient with the specified API token and base path.
 	 * @param apiToken The API token for HuggingFace.
 	 * @param basePath The base path for API requests.
 	 */
-	public HuggingfaceAiClient(final String apiToken, String basePath) {
+	public HuggingfaceChatClient(final String apiToken, String basePath) {
 		this.apiToken = apiToken;
 		this.apiClient.setBasePath(basePath);
 		this.apiClient.addDefaultHeader("Authorization", "Bearer " + this.apiToken);

File: models/spring-ai-huggingface/src/test/java/org/springframework/ai/huggingface/client/ClientIT.java
Patch:
@@ -33,7 +33,7 @@
 public class ClientIT {
 
 	@Autowired
-	protected HuggingfaceAiClient huggingfaceAiClient;
+	protected HuggingfaceChatClient huggingfaceChatClient;
 
 	@Test
 	void helloWorldCompletion() {
@@ -46,7 +46,7 @@ void helloWorldCompletion() {
 				[/INST]
 				 """;
 		Prompt prompt = new Prompt(mistral7bInstruct);
-		ChatResponse chatResponse = huggingfaceAiClient.generate(prompt);
+		ChatResponse chatResponse = huggingfaceChatClient.generate(prompt);
 		assertThat(chatResponse.getGeneration().getContent()).isNotEmpty();
 		String expectedResponse = """
 				```json

File: models/spring-ai-openai/src/main/java/org/springframework/ai/openai/client/OpenAiChatClient.java
Patch:
@@ -55,7 +55,7 @@
  * @see StreamingChatClient
  * @see OpenAiApi
  */
-public class OpenAiClient implements ChatClient, StreamingChatClient {
+public class OpenAiChatClient implements ChatClient, StreamingChatClient {
 
 	private Double temperature = 0.7;
 
@@ -71,7 +71,7 @@ public class OpenAiClient implements ChatClient, StreamingChatClient {
 
 	private final OpenAiApi openAiApi;
 
-	public OpenAiClient(OpenAiApi openAiApi) {
+	public OpenAiChatClient(OpenAiApi openAiApi) {
 		Assert.notNull(openAiApi, "OpenAiApi must not be null");
 		this.openAiApi = openAiApi;
 	}

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/testutils/AbstractIT.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractIT {
 	private static final Logger logger = LoggerFactory.getLogger(AbstractIT.class);
 
 	@Autowired
-	protected ChatClient openAiClient;
+	protected ChatClient openAiChatClient;
 
 	@Autowired
 	protected StreamingChatClient openStreamingChatClient;
@@ -58,12 +58,12 @@ protected void evaluateQuestionAndAnswer(String question, ChatResponse response,
 		}
 		Message userMessage = userPromptTemplate.createMessage();
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
-		String yesOrNo = openAiClient.generate(prompt).getGeneration().getContent();
+		String yesOrNo = openAiChatClient.generate(prompt).getGeneration().getContent();
 		logger.info("Is Answer related to question: " + yesOrNo);
 		if (yesOrNo.equalsIgnoreCase("no")) {
 			SystemMessage notRelatedSystemMessage = new SystemMessage(qaEvaluatorNotRelatedResource);
 			prompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));
-			String reasonForFailure = openAiClient.generate(prompt).getGeneration().getContent();
+			String reasonForFailure = openAiChatClient.generate(prompt).getGeneration().getContent();
 			fail(reasonForFailure);
 		}
 		else {

File: spring-ai-core/src/test/java/org/springframework/ai/chat/ChatClientTests.java
Patch:
@@ -42,7 +42,7 @@
  * @author John Blum
  * @since 0.2.0
  */
-class AiClientTests {
+class ChatClientTests {
 
 	@Test
 	void generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly() {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/VertexAiAutoConfiguration.java
Patch:
@@ -37,7 +37,7 @@ public class VertexAiAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public VertexAiChatClient vertexAiClient(VertexAiApi vertexAiApi, VertexAiChatProperties chatProperties) {
+	public VertexAiChatClient vertexAiChatClient(VertexAiApi vertexAiApi, VertexAiChatProperties chatProperties) {
 
 		VertexAiChatClient client = new VertexAiChatClient(vertexAiApi).withTemperature(chatProperties.getTemperature())
 			.withTopP(chatProperties.getTopP())

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfigurationIT.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 
 import org.springframework.ai.embedding.EmbeddingResponse;
-import org.springframework.ai.openai.client.OpenAiClient;
+import org.springframework.ai.openai.client.OpenAiChatClient;
 import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
@@ -43,7 +43,7 @@ public class OpenAiAutoConfigurationIT {
 	@Test
 	void generate() {
 		contextRunner.run(context -> {
-			OpenAiClient client = context.getBean(OpenAiClient.class);
+			OpenAiChatClient client = context.getBean(OpenAiChatClient.class);
 			String response = client.generate("Hello");
 			assertThat(response).isNotEmpty();
 			logger.info("Response: " + response);

File: spring-ai-test/src/main/java/org/springframework/ai/evaluation/BasicEvaluationTest.java
Patch:
@@ -39,7 +39,7 @@ public class BasicEvaluationTest {
 	private static final Logger logger = LoggerFactory.getLogger(BasicEvaluationTest.class);
 
 	@Autowired
-	protected ChatClient openAiClient;
+	protected ChatClient openAiChatClient;
 
 	@Value("classpath:/prompts/spring/test/evaluation/qa-evaluator-accurate-answer.st")
 	protected Resource qaEvaluatorAccurateAnswerResource;
@@ -69,12 +69,12 @@ protected void evaluateQuestionAndAnswer(String question, ChatResponse response,
 		}
 		Message userMessage = userPromptTemplate.createMessage();
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
-		String yesOrNo = openAiClient.generate(prompt).getGeneration().getContent();
+		String yesOrNo = openAiChatClient.generate(prompt).getGeneration().getContent();
 		logger.info("Is Answer related to question: " + yesOrNo);
 		if (yesOrNo.equalsIgnoreCase("no")) {
 			SystemMessage notRelatedSystemMessage = new SystemMessage(qaEvaluatorNotRelatedResource);
 			prompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));
-			String reasonForFailure = openAiClient.generate(prompt).getGeneration().getContent();
+			String reasonForFailure = openAiChatClient.generate(prompt).getGeneration().getContent();
 			fail(reasonForFailure);
 		}
 		else {

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java
Patch:
@@ -400,8 +400,8 @@ public Message build() {
 	 * @param stream Whether to stream the response.
 	 * @param format The format to return the response in. Currently the only accepted
 	 * value is "json".
-	 * @param options Additional model parameters. You can use the {@link Options} builder
-	 * to create the options then {@link Options#toMap()} to convert the options into a
+	 * @param options Additional model parameters. You can use the {@link OllamaOptions} builder
+	 * to create the options then {@link OllamaOptions#toMap()} to convert the options into a
 	 * map.
 	 */
 	@JsonInclude(Include.NON_NULL)

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaChatClient.java
Patch:
@@ -28,9 +28,10 @@
 import org.springframework.ai.metadata.ChoiceMetadata;
 import org.springframework.ai.metadata.Usage;
 import org.springframework.ai.ollama.api.OllamaApi;
+import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.ai.ollama.api.OllamaApi.ChatRequest;
 import org.springframework.ai.ollama.api.OllamaApi.Message.Role;
-import org.springframework.ai.ollama.api.OllamaApiOptions;
+
 import org.springframework.ai.prompt.Prompt;
 import org.springframework.ai.prompt.messages.Message;
 import org.springframework.ai.prompt.messages.MessageType;
@@ -71,7 +72,7 @@ public OllamaChatClient withOptions(Map<String, Object> options) {
 		return this;
 	}
 
-	public OllamaChatClient withOptions(OllamaApiOptions.Options options) {
+	public OllamaChatClient withOptions(OllamaOptions options) {
 		this.clientOptions = options.toMap();
 		return this;
 	}

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/OllamaEmbeddingClient.java
Patch:
@@ -20,15 +20,14 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.springframework.ai.chat.ChatClient;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.AbstractEmbeddingClient;
 import org.springframework.ai.embedding.Embedding;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.embedding.EmbeddingResponse;
 import org.springframework.ai.ollama.api.OllamaApi;
 import org.springframework.ai.ollama.api.OllamaApi.EmbeddingRequest;
-import org.springframework.ai.ollama.api.OllamaApiOptions;
+import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.util.Assert;
 
 /**
@@ -70,7 +69,7 @@ public OllamaEmbeddingClient withOptions(Map<String, Object> options) {
 		return this;
 	}
 
-	public OllamaEmbeddingClient withOptions(OllamaApiOptions.Options options) {
+	public OllamaEmbeddingClient withOptions(OllamaOptions options) {
 		this.clientOptions = options.toMap();
 		return this;
 	}

File: models/spring-ai-ollama/src/main/java/org/springframework/ai/ollama/api/OllamaApi.java
Patch:
@@ -31,7 +31,6 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 
-import org.springframework.ai.ollama.api.OllamaApiOptions.Options;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.client.ClientHttpResponse;
@@ -213,7 +212,7 @@ public Builder withOptions(Map<String, Object> options) {
 				return this;
 			}
 
-			public Builder withOptions(Options options) {
+			public Builder withOptions(OllamaOptions options) {
 				this.options = options.toMap();
 				return this;
 			}
@@ -450,7 +449,7 @@ public Builder withOptions(Map<String, Object> options) {
 				return this;
 			}
 
-			public Builder withOptions(Options options) {
+			public Builder withOptions(OllamaOptions options) {
 				this.options = options.toMap();
 				return this;
 			}

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaChatClientIT.java
Patch:
@@ -18,7 +18,7 @@
 import org.springframework.ai.chat.ChatResponse;
 import org.springframework.ai.chat.Generation;
 import org.springframework.ai.ollama.api.OllamaApi;
-import org.springframework.ai.ollama.api.OllamaApiOptions;
+import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.ai.parser.BeanOutputParser;
 import org.springframework.ai.parser.ListOutputParser;
 import org.springframework.ai.parser.MapOutputParser;
@@ -45,7 +45,7 @@ class OllamaChatClientIT {
 	private static final Log logger = LogFactory.getLog(OllamaChatClientIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.15").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.16").withExposedPorts(11434);
 
 	static String baseUrl;
 
@@ -184,7 +184,7 @@ public OllamaApi ollamaApi() {
 		@Bean
 		public OllamaChatClient ollamaChat(OllamaApi ollamaApi) {
 			return new OllamaChatClient(ollamaApi).withModel(MODEL)
-				.withOptions(OllamaApiOptions.Options.builder().withTemperature(0.9f).build());
+				.withOptions(OllamaOptions.create().withTemperature(0.9f));
 		}
 
 	}

File: models/spring-ai-ollama/src/test/java/org/springframework/ai/ollama/OllamaEmbeddingClientIT.java
Patch:
@@ -31,7 +31,7 @@ class OllamaEmbeddingClientIT {
 	private static final Log logger = LogFactory.getLog(OllamaApiIT.class);
 
 	@Container
-	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.15").withExposedPorts(11434);
+	static GenericContainer<?> ollamaContainer = new GenericContainer<>("ollama/ollama:0.1.16").withExposedPorts(11434);
 
 	static String baseUrl;
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/NativeHints.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.ai.bedrock.titan.api.TitanChatBedrockApi;
 import org.springframework.ai.bedrock.titan.api.TitanEmbeddingBedrockApi;
 import org.springframework.ai.ollama.api.OllamaApi;
-import org.springframework.ai.ollama.api.OllamaApiOptions;
+import org.springframework.ai.ollama.api.OllamaOptions;
 import org.springframework.ai.openai.api.OpenAiApi;
 import org.springframework.ai.vertex.api.VertexAiApi;
 import org.springframework.aot.hint.MemberCategory;
@@ -80,7 +80,7 @@ public void registerHints(RuntimeHints hints, ClassLoader classLoader) {
 			var mcs = MemberCategory.values();
 			for (var tr : findJsonAnnotatedClasses(OllamaApi.class))
 				hints.reflection().registerType(tr, mcs);
-			for (var tr : findJsonAnnotatedClasses(OllamaApiOptions.class))
+			for (var tr : findJsonAnnotatedClasses(OllamaOptions.class))
 				hints.reflection().registerType(tr, mcs);
 		}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfiguration.java
Patch:
@@ -35,15 +35,15 @@
  */
 @AutoConfiguration
 @ConditionalOnClass(OllamaApi.class)
-@EnableConfigurationProperties({ OllamaEmbeddingProperties.class })
+@EnableConfigurationProperties({ OllamaEmbeddingProperties.class, OllamaConnectionProperties.class })
 @ConditionalOnProperty(prefix = OllamaEmbeddingProperties.CONFIG_PREFIX, name = "enabled", havingValue = "true",
 		matchIfMissing = true)
 @ImportRuntimeHints(NativeHints.class)
 public class OllamaEmbeddingAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public OllamaApi ollamaApi(OllamaEmbeddingProperties properties) {
+	public OllamaApi ollamaApi(OllamaConnectionProperties properties) {
 		return new OllamaApi(properties.getBaseUrl());
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaChatAutoConfigurationIT.java
Patch:
@@ -71,8 +71,8 @@ public static void beforeAll() throws IOException, InterruptedException {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.ollama.chat.enabled=true", "spring.ai.ollama.chat.model=" + MODEL_NAME,
-				"spring.ai.ollama.chat.baseUrl=" + baseUrl, "spring.ai.ollama.chat.temperature=0.5",
-				"spring.ai.ollama.chat.topK=500")
+				"spring.ai.ollama.baseUrl=" + baseUrl, "spring.ai.ollama.chat.temperature=0.5",
+				"spring.ai.ollama.chat.topK=10")
 		.withConfiguration(AutoConfigurations.of(OllamaChatAutoConfiguration.class));
 
 	private final Message systemMessage = new SystemPromptTemplate("""

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/ollama/OllamaEmbeddingAutoConfigurationIT.java
Patch:
@@ -63,7 +63,7 @@ public static void beforeAll() throws IOException, InterruptedException {
 
 	private final ApplicationContextRunner contextRunner = new ApplicationContextRunner()
 		.withPropertyValues("spring.ai.ollama.embedding.enabled=true", "spring.ai.ollama.embedding.model=" + MODEL_NAME,
-				"spring.ai.ollama.embedding.base-url=" + baseUrl)
+				"spring.ai.ollama.base-url=" + baseUrl)
 		.withConfiguration(AutoConfigurations.of(OllamaEmbeddingAutoConfiguration.class));
 
 	@Test

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/acme/AcmeIT.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.ai.reader.JsonReader;
 import org.springframework.ai.retriever.VectorStoreRetriever;
 import org.springframework.ai.transformer.splitter.TokenTextSplitter;
-import org.springframework.ai.vectorstore.InMemoryVectorStore;
+import org.springframework.ai.vectorstore.SimpleVectorStore;
 import org.springframework.ai.vectorstore.VectorStore;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
@@ -67,7 +67,7 @@ void acmeChain() {
 		// Step 2 - Create embeddings and save to vector store
 
 		logger.info("Creating Embeddings...");
-		VectorStore vectorStore = new InMemoryVectorStore(embeddingClient);
+		VectorStore vectorStore = new SimpleVectorStore(embeddingClient);
 
 		vectorStore.accept(textSplitter.apply(jsonReader.get()));
 

File: models/spring-ai-openai/src/test/java/org/springframework/ai/openai/vectorstore/SimplePersistentVectorStoreIT.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.reader.JsonReader;
-import org.springframework.ai.vectorstore.SimplePersistentVectorStore;
+import org.springframework.ai.vectorstore.SimpleVectorStore;
 import org.springframework.ai.reader.JsonMetadataGenerator;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
@@ -34,14 +34,14 @@ void persist(@TempDir(cleanup = CleanupMode.ON_SUCCESS) Path workingDir) {
 		JsonReader jsonReader = new JsonReader(bikesJsonResource, new ProductMetadataGenerator(), "price", "name",
 				"shortDescription", "description", "tags");
 		List<Document> documents = jsonReader.get();
-		SimplePersistentVectorStore vectorStore = new SimplePersistentVectorStore(this.embeddingClient);
+		SimpleVectorStore vectorStore = new SimpleVectorStore(this.embeddingClient);
 		vectorStore.add(documents);
 
 		File tempFile = new File(workingDir.toFile(), "temp.txt");
 		vectorStore.save(tempFile);
 		assertThat(tempFile).isNotEmpty();
 		assertThat(tempFile).content().contains("Velo 99 XR1 AXS");
-		SimplePersistentVectorStore vectorStore2 = new SimplePersistentVectorStore(this.embeddingClient);
+		SimpleVectorStore vectorStore2 = new SimpleVectorStore(this.embeddingClient);
 
 		vectorStore2.load(tempFile);
 		List<Document> similaritySearch = vectorStore2.similaritySearch("Velo 99 XR1 AXS");

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanChatAutoConfiguration.java
Patch:
@@ -48,15 +48,15 @@ public class BedrockTitanChatAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public TitanChatBedrockApi cohereApi(AwsCredentialsProvider credentialsProvider,
+	public TitanChatBedrockApi titanApi(AwsCredentialsProvider credentialsProvider,
 			BedrockTitanChatProperties properties, BedrockAwsConnectionProperties awsProperties) {
 
 		return new TitanChatBedrockApi(properties.getModel(), credentialsProvider, awsProperties.getRegion(),
 				new ObjectMapper());
 	}
 
 	@Bean
-	public BedrockTitanChatClient cohereChatClient(TitanChatBedrockApi titanChatApi,
+	public BedrockTitanChatClient titanChatClient(TitanChatBedrockApi titanChatApi,
 			BedrockTitanChatProperties properties) {
 
 		return new BedrockTitanChatClient(titanChatApi).withTemperature(properties.getTemperature())

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/bedrock/titan/BedrockTitanEmbeddingAutoConfiguration.java
Patch:
@@ -57,7 +57,7 @@ public TitanEmbeddingBedrockApi titanApi(AwsCredentialsProvider credentialsProvi
 
 	@Bean
 	@ConditionalOnMissingBean
-	public BedrockTitanEmbeddingClient cohereEmbeddingClient(TitanEmbeddingBedrockApi titanEmbeddingApi,
+	public BedrockTitanEmbeddingClient titanEmbeddingClient(TitanEmbeddingBedrockApi titanEmbeddingApi,
 			BedrockTitanEmbeddingProperties properties) {
 
 		return new BedrockTitanEmbeddingClient(titanEmbeddingApi).withInputType(properties.getInputType());

File: models/spring-ai-transformers/src/main/java/org/springframework/ai/embedding/TransformersEmbeddingClient.java
Patch:
@@ -39,11 +39,11 @@ public class TransformersEmbeddingClient extends AbstractEmbeddingClient impleme
 	private static final Log logger = LogFactory.getLog(TransformersEmbeddingClient.class);
 
 	// ONNX tokenizer for the all-MiniLM-L6-v2 model
-	public final static String DEFAULT_ONNX_TOKENIZER_URI = "https://raw.githubusercontent.com/spring-projects/spring-ai/main/embedding-clients/transformers-embedding/src/main/resources/onnx/all-MiniLM-L6-v2/tokenizer.json";
+	public final static String DEFAULT_ONNX_TOKENIZER_URI = "https://raw.githubusercontent.com/spring-projects/spring-ai/main/models/spring-ai-transformers/src/main/resources/onnx/all-MiniLM-L6-v2/tokenizer.json";
 
 	// ONNX model for all-MiniLM-L6-v2 pre-trained transformer:
 	// https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2
-	public final static String DEFAULT_ONNX_MODEL_URI = "https://github.com/spring-projects/spring-ai/raw/main/embedding-clients/transformers-embedding/src/main/resources/onnx/all-MiniLM-L6-v2/model.onnx";
+	public final static String DEFAULT_ONNX_MODEL_URI = "https://github.com/spring-projects/spring-ai/raw/main/models/spring-ai-transformers/src/main/resources/onnx/all-MiniLM-L6-v2/model.onnx";
 
 	public final static String DEFAULT_MODEL_OUTPUT_NAME = "last_hidden_state";
 

File: spring-ai-core/src/test/java/org/springframework/ai/embedding/EmbeddingUtilTests.java
Patch:
@@ -83,7 +83,7 @@ public void testKnownEmbeddingModelDimensions(String model, String dimension) {
 
 	@Test
 	public void testUnknownModelDimension() {
-		when(embeddingClient.embed(eq("Test String"))).thenReturn(List.of(0.1, 0.1, 0.1));
+		when(embeddingClient.embed(eq("Hello world!"))).thenReturn(List.of(0.1, 0.1, 0.1));
 		assertThat(EmbeddingUtil.dimensions(embeddingClient, "unknown_model", "Hello world!")).isEqualTo(3);
 	}
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/vertexai/VertexAiAutoConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.springframework.ai.autoconfigure.vertexai;
 
+import org.springframework.ai.autoconfigure.NativeHints;
 import org.springframework.ai.vertex.api.VertexAiApi;
 import org.springframework.ai.vertex.embedding.VertexAiEmbeddingClient;
 import org.springframework.ai.vertex.generation.VertexAiChatClient;
@@ -24,10 +25,12 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ImportRuntimeHints;
 import org.springframework.web.client.RestClient;
 
 @AutoConfiguration
 @ConditionalOnClass(VertexAiApi.class)
+@ImportRuntimeHints(NativeHints.class)
 @EnableConfigurationProperties({ VertexAiConnectionProperties.class, VertexAiChatProperties.class,
 		VertexAiEmbeddingProperties.class })
 public class VertexAiAutoConfiguration {

File: spring-ai-vertex-ai/src/test/java/org/springframework/ai/vertex/api/VertexAiApiIT.java
Patch:
@@ -119,7 +119,7 @@ public void getModel() {
 
 		System.out.println(model);
 		assertThat(model).isNotNull();
-		assertThat(model.displayName()).isEqualTo("Chat Bison");
+		assertThat(model.displayName()).isEqualTo("PaLM 2 Chat (Legacy)");
 	}
 
 }

File: spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/client/AzureOpenAiClientMetadataTests.java
Patch:
@@ -17,7 +17,6 @@
 package org.springframework.ai.azure.openai.client;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.springframework.ai.test.config.MockAiTestConfiguration.SPRING_AI_API_PATH;
 
 import java.nio.charset.StandardCharsets;
 
@@ -170,7 +169,7 @@ MockMvc mockMvc() {
 	}
 
 	@RestController
-	@RequestMapping(SPRING_AI_API_PATH)
+	@RequestMapping("/spring-ai/api")
 	@SuppressWarnings("all")
 	static class SpringAzureOpenAiChatCompletionsController {
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/openai/OpenAiPropertiesTests.java
Patch:
@@ -50,7 +50,6 @@ void openAiPropertiesAreCorrect() {
 		assertThat(this.openAiProperties.getModel()).isEqualTo("claudia-shiffer-5");
 		assertThat(this.openAiProperties.getBaseUrl()).isEqualTo("https://api.openai.spring.io/eieioh");
 		assertThat(this.openAiProperties.getTemperature()).isEqualTo(0.5d);
-		assertThat(this.openAiProperties.getDuration()).isEqualTo(Duration.ofSeconds(30L));
 
 		OpenAiProperties.Embedding embedding = this.openAiProperties.getEmbedding();
 

File: embedding-clients/transformers-embedding/src/main/java/org/springframework/ai/embedding/ResourceCacheService.java
Patch:
@@ -50,7 +50,7 @@ public class ResourceCacheService {
 
 	/**
 	 * Resources with URI schemas belonging to the excludedUriSchemas are not cached. By
-	 * default the file and classpath resources are not cached as they are already in the
+	 * default, the file and classpath resources are not cached as they are already in the
 	 * local file system.
 	 */
 	private List<String> excludedUriSchemas = new ArrayList<>(List.of("file", "classpath"));

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SearchRequest.java
Patch:
@@ -112,7 +112,7 @@ public SearchRequest withTopK(int topK) {
 	/**
 	 * Similarity threshold score to filter the search response by. Only documents with
 	 * similarity score equal or greater than the 'threshold' will be returned. Note that
-	 * this is a post processing step performed on the client not the server side. A
+	 * this is a post-processing step performed on the client not the server side. A
 	 * threshold value of 0.0 means any similarity is accepted or disable the similarity
 	 * threshold filtering. A threshold value of 1.0 means an exact match is required.
 	 * @param threshold The lower bound of the similarity score.

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersLexer.java
Patch:
@@ -23,12 +23,9 @@
 
 import org.antlr.v4.runtime.Lexer;
 import org.antlr.v4.runtime.CharStream;
-import org.antlr.v4.runtime.Token;
-import org.antlr.v4.runtime.TokenStream;
 import org.antlr.v4.runtime.*;
 import org.antlr.v4.runtime.atn.*;
 import org.antlr.v4.runtime.dfa.DFA;
-import org.antlr.v4.runtime.misc.*;
 
 @SuppressWarnings({ "all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape" })
 public class FiltersLexer extends Lexer {

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/antlr4/FiltersParser.java
Patch:
@@ -24,11 +24,8 @@
 import org.antlr.v4.runtime.atn.*;
 import org.antlr.v4.runtime.dfa.DFA;
 import org.antlr.v4.runtime.*;
-import org.antlr.v4.runtime.misc.*;
 import org.antlr.v4.runtime.tree.*;
 import java.util.List;
-import java.util.Iterator;
-import java.util.ArrayList;
 
 @SuppressWarnings({ "all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue" })
 public class FiltersParser extends Parser {

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/embedding/transformer/TransformersEmbeddingClientProperties.java
Patch:
@@ -57,7 +57,7 @@ public static class Tokenizer {
 		/**
 		 * HuggingFaceTokenizer options such as 'addSpecialTokens', 'modelMaxLength',
 		 * 'truncation', 'padding', 'maxLength', 'stride' and 'padToMultipleOf'. Leave
-		 * empty to fallback to the defaults.
+		 * empty to fall back to the defaults.
 		 */
 		private Map<String, String> options = new HashMap<>();
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -41,7 +41,6 @@
 import retrofit2.Retrofit;
 import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
 import retrofit2.converter.jackson.JacksonConverterFactory;
-import retrofit2.http.HEAD;
 
 @AutoConfiguration
 @ConditionalOnClass(OpenAiService.class)

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/chroma/ChromaVectorStoreAutoConfigurationIT.java
Patch:
@@ -63,7 +63,7 @@ public void addAndSearchWithFilters() {
 			var bgDocument = new Document("The World is Big and Salvation Lurks Around the Corner",
 					Map.of("country", "Bulgaria"));
 			var nlDocument = new Document("The World is Big and Salvation Lurks Around the Corner",
-					Map.of("country", "Netherland"));
+					Map.of("country", "Netherlands"));
 
 			vectorStore.add(List.of(bgDocument, nlDocument));
 
@@ -77,8 +77,8 @@ public void addAndSearchWithFilters() {
 			assertThat(results).hasSize(1);
 			assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
 
-			results = vectorStore
-				.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression("country == 'Netherland'"));
+			results = vectorStore.similaritySearch(
+					request.withSimilarityThresholdAll().withFilterExpression("country == 'Netherlands'"));
 			assertThat(results).hasSize(1);
 			assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
 

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/weaviate/WeaviateVectorStoreAutoConfigurationTests.java
Patch:
@@ -81,7 +81,7 @@ public void addAndSearchWithFilters() {
 			var bgDocument = new Document("The World is Big and Salvation Lurks Around the Corner",
 					Map.of("country", "Bulgaria", "price", 3.14, "active", true, "year", 2020));
 			var nlDocument = new Document("The World is Big and Salvation Lurks Around the Corner",
-					Map.of("country", "Netherland", "price", 1.57, "active", false, "year", 2023));
+					Map.of("country", "Netherlands", "price", 1.57, "active", false, "year", 2023));
 
 			vectorStore.add(List.of(bgDocument, nlDocument));
 
@@ -95,8 +95,8 @@ public void addAndSearchWithFilters() {
 			assertThat(results).hasSize(1);
 			assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
 
-			results = vectorStore
-				.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression("country == 'Netherland'"));
+			results = vectorStore.similaritySearch(
+					request.withSimilarityThresholdAll().withFilterExpression("country == 'Netherlands'"));
 			assertThat(results).hasSize(1);
 			assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
 

File: vector-stores/spring-ai-pgvector-store/src/test/java/org/springframework/ai/vectorstore/PgVectorStoreIT.java
Patch:
@@ -31,6 +31,7 @@
 import com.theokanning.openai.service.OpenAiService;
 import com.zaxxer.hikari.HikariDataSource;
 import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.ValueSource;

File: vector-stores/spring-ai-pinecone/src/main/java/org/springframework/ai/vectorstore/PineconeVectorStore.java
Patch:
@@ -36,7 +36,6 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.filter.Filter;
 import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.converter.PineconeFilterExpressionConverter;
 import org.springframework.util.Assert;

File: vector-stores/spring-ai-pinecone/src/test/java/org/springframework/ai/vectorstore/PineconeVectorStoreIT.java
Patch:
@@ -131,7 +131,7 @@ public void addAndSearchWithFilters() {
 			var bgDocument = new Document("The World is Big and Salvation Lurks Around the Corner",
 					Map.of("country", "Bulgaria"));
 			var nlDocument = new Document("The World is Big and Salvation Lurks Around the Corner",
-					Map.of("country", "Netherland"));
+					Map.of("country", "Netherlands"));
 
 			vectorStore.add(List.of(bgDocument, nlDocument));
 
@@ -152,13 +152,13 @@ public void addAndSearchWithFilters() {
 
 			results = vectorStore.similaritySearch(searchRequest.withTopK(5)
 				.withSimilarityThresholdAll()
-				.withFilterExpression("country == 'Netherland'"));
+				.withFilterExpression("country == 'Netherlands'"));
 			assertThat(results).hasSize(1);
 			assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
 
 			results = vectorStore.similaritySearch(searchRequest.withTopK(5)
 				.withSimilarityThresholdAll()
-				.withFilterExpression("NOT(country == 'Netherland')"));
+				.withFilterExpression("NOT(country == 'Netherlands')"));
 
 			assertThat(results).hasSize(1);
 			assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());

File: vector-stores/spring-ai-weaviate/src/main/java/org/springframework/ai/vectorstore/WeaviateVectorStore.java
Patch:
@@ -577,7 +577,7 @@ private Document toDocument(Map<String, ?> item) {
 	}
 
 	/**
-	 * Converts a list of doubles to a array of floats.
+	 * Converts a list of doubles to an array of floats.
 	 * @param doubleList The list of doubles.
 	 * @return The converted array of floats.
 	 */

File: vector-stores/spring-ai-weaviate/src/main/java/org/springframework/ai/vectorstore/WeaviateVectorStore.java
Patch:
@@ -243,7 +243,7 @@ private Builder() {
 			}
 
 			/**
-			 * Pinecone api key.
+			 * Weaviate api key.
 			 * @param apiKey key to use.
 			 * @return this builder.
 			 */

File: spring-ai-openai/src/test/java/org/springframework/ai/openai/acme/AcmeIT.java
Patch:
@@ -73,7 +73,6 @@ void acmeChain() {
 
 		// Now user query
 
-		// This will be wrapped up in a chain
 		VectorStoreRetriever vectorStoreRetriever = new VectorStoreRetriever(vectorStore);
 
 		logger.info("Retrieving relevant documents");

File: vector-stores/spring-ai-milvus-store/src/test/java/org/springframework/ai/vectorstore/MilvusVectorStoreIT.java
Patch:
@@ -300,6 +300,7 @@ public VectorStore vectorStore(MilvusServiceClient milvusClient, EmbeddingClient
 		@Bean
 		public MilvusServiceClient milvusClient() {
 			return new MilvusServiceClient(ConnectParam.newBuilder()
+				.withAuthorization("minioadmin", "minioadmin")
 				.withHost(milvusContainer.getServiceHost("standalone", 19530))
 				.withPort(milvusContainer.getServicePort("standalone", 19530))
 				.build());

File: spring-ai-azure-openai/src/test/java/org/springframework/ai/azure/openai/client/AzureOpenAiClientMetadataTests.java
Patch:
@@ -81,7 +81,7 @@ void azureOpenAiMetadataCapturedDuringGeneration() {
 		Generation generation = response.getGeneration();
 
 		assertThat(generation).isNotNull()
-			.extracting(Generation::getText)
+			.extracting(Generation::getContent)
 			.isEqualTo("No! You will actually land with a resounding thud. This is the way!");
 
 		assertPromptMetadata(response);

File: spring-ai-core/src/main/java/org/springframework/ai/client/AiClient.java
Patch:
@@ -24,7 +24,7 @@ public interface AiClient {
 
 	default String generate(String message) {
 		Prompt prompt = new Prompt(new UserMessage(message));
-		return generate(prompt).getGeneration().getText();
+		return generate(prompt).getGeneration().getContent();
 	}
 
 	AiResponse generate(Prompt prompt);

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/KeywordMetadataEnricher.java
Patch:
@@ -65,7 +65,7 @@ public List<Document> apply(List<Document> documents) {
 
 			var template = new PromptTemplate(String.format(KEYWORDS_TEMPLATE, keywordCount));
 			Prompt prompt = template.create(Map.of(CONTEXT_STR_PLACEHOLDER, document.getContent()));
-			String keywords = this.aiClient.generate(prompt).getGeneration().getText();
+			String keywords = this.aiClient.generate(prompt).getGeneration().getContent();
 			document.getMetadata().putAll(Map.of(EXCERPT_KEYWORDS_METADATA_KEY, keywords));
 		}
 		return documents;

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/SummaryMetadataEnricher.java
Patch:
@@ -102,7 +102,7 @@ public List<Document> apply(List<Document> documents) {
 
 			Prompt prompt = new PromptTemplate(this.summaryTemplate)
 				.create(Map.of(CONTEXT_STR_PLACEHOLDER, documentContext));
-			documentSummaries.add(this.aiClient.generate(prompt).getGeneration().getText());
+			documentSummaries.add(this.aiClient.generate(prompt).getGeneration().getContent());
 		}
 
 		for (int i = 0; i < documentSummaries.size(); i++) {

File: spring-ai-core/src/test/java/org/springframework/ai/client/AiClientTests.java
Patch:
@@ -71,7 +71,7 @@ void generateWithStringCallsGenerateWithPromptAndReturnsResponseCorrectly() {
 		verify(mockClient, times(1)).generate(eq(userMessage));
 		verify(mockClient, times(1)).generate(isA(Prompt.class));
 		verify(response, times(1)).getGeneration();
-		verify(generation, times(1)).getText();
+		verify(generation, times(1)).getContent();
 		verifyNoMoreInteractions(mockClient, generation, response);
 	}
 

File: spring-ai-ollama/src/test/java/org/springframework/ai/ollama/client/OllamaClientTests.java
Patch:
@@ -21,7 +21,7 @@ public void smokeTest() {
 		Assertions.assertNotNull(aiResponse);
 		Assertions.assertFalse(CollectionUtils.isEmpty(aiResponse.getGenerations()));
 		Assertions.assertNotNull(aiResponse.getGeneration());
-		Assertions.assertNotNull(aiResponse.getGeneration().getText());
+		Assertions.assertNotNull(aiResponse.getGeneration().getContent());
 	}
 
 	private static OllamaClient getOllamaClient() {

File: spring-ai-openai/src/test/java/org/springframework/ai/openai/testutils/AbstractIT.java
Patch:
@@ -39,7 +39,7 @@ public abstract class AbstractIT {
 
 	protected void evaluateQuestionAndAnswer(String question, AiResponse response, boolean factBased) {
 		assertThat(response).isNotNull();
-		String answer = response.getGeneration().getText();
+		String answer = response.getGeneration().getContent();
 		logger.info("Question: " + question);
 		logger.info("Answer:" + answer);
 		PromptTemplate userPromptTemplate = new PromptTemplate(userEvaluatorResource,
@@ -53,12 +53,12 @@ protected void evaluateQuestionAndAnswer(String question, AiResponse response, b
 		}
 		Message userMessage = userPromptTemplate.createMessage();
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
-		String yesOrNo = openAiClient.generate(prompt).getGeneration().getText();
+		String yesOrNo = openAiClient.generate(prompt).getGeneration().getContent();
 		logger.info("Is Answer related to question: " + yesOrNo);
 		if (yesOrNo.equalsIgnoreCase("no")) {
 			SystemMessage notRelatedSystemMessage = new SystemMessage(qaEvaluatorNotRelatedResource);
 			prompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));
-			String reasonForFailure = openAiClient.generate(prompt).getGeneration().getText();
+			String reasonForFailure = openAiClient.generate(prompt).getGeneration().getContent();
 			fail(reasonForFailure);
 		}
 		else {

File: spring-ai-test/src/main/java/org/springframework/ai/evaluation/BasicEvaluationTest.java
Patch:
@@ -55,7 +55,7 @@ public class BasicEvaluationTest {
 
 	protected void evaluateQuestionAndAnswer(String question, AiResponse response, boolean factBased) {
 		assertThat(response).isNotNull();
-		String answer = response.getGeneration().getText();
+		String answer = response.getGeneration().getContent();
 		logger.info("Question: " + question);
 		logger.info("Answer:" + answer);
 		PromptTemplate userPromptTemplate = new PromptTemplate(userEvaluatorResource,
@@ -69,12 +69,12 @@ protected void evaluateQuestionAndAnswer(String question, AiResponse response, b
 		}
 		Message userMessage = userPromptTemplate.createMessage();
 		Prompt prompt = new Prompt(List.of(userMessage, systemMessage));
-		String yesOrNo = openAiClient.generate(prompt).getGeneration().getText();
+		String yesOrNo = openAiClient.generate(prompt).getGeneration().getContent();
 		logger.info("Is Answer related to question: " + yesOrNo);
 		if (yesOrNo.equalsIgnoreCase("no")) {
 			SystemMessage notRelatedSystemMessage = new SystemMessage(qaEvaluatorNotRelatedResource);
 			prompt = new Prompt(List.of(userMessage, notRelatedSystemMessage));
-			String reasonForFailure = openAiClient.generate(prompt).getGeneration().getText();
+			String reasonForFailure = openAiClient.generate(prompt).getGeneration().getContent();
 			fail(reasonForFailure);
 		}
 		else {

File: vector-stores/spring-ai-weaviate/src/test/java/org/springframework/ai/vectorstore/WeaviateFilterExpressionConverterTests.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.vectorstore.filter.Filter;
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Key;

File: spring-ai-openai/src/test/java/org/springframework/ai/openai/OpenAiTestConfiguration.java
Patch:
@@ -1,6 +1,8 @@
 package org.springframework.ai.openai;
 
 import com.theokanning.openai.service.OpenAiService;
+
+import org.springframework.ai.client.AiClient;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.openai.client.OpenAiClient;
 import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
@@ -25,7 +27,7 @@ public OpenAiService theoOpenAiService() {
 	}
 
 	@Bean
-	public OpenAiClient openAiClient(OpenAiService theoOpenAiService) {
+	public AiClient openAiClient(OpenAiService theoOpenAiService) {
 		OpenAiClient openAiClient = new OpenAiClient(theoOpenAiService);
 		openAiClient.setTemperature(0.3);
 		return openAiClient;

File: vector-stores/spring-ai-azure/src/test/java/org/springframework/ai/vectorstore/azure/AzureAiSearchFilterExpressionConverterTests.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.junit.jupiter.api.Test;
 
-import org.springframework.ai.vectorstore.azure.AzureAiSearchFilterExpressionConverter;
 import org.springframework.ai.vectorstore.azure.AzureVectorStore.MetadataField;
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
 import org.springframework.ai.vectorstore.filter.Filter.Group;

File: spring-ai-ollama/src/main/java/org/springframework/ai/ollama/client/OllamaClient.java
Patch:
@@ -211,9 +211,7 @@ protected AiResponse getAiResponse(List<OllamaGenerateResult> results) {
 		var generation = new Generation(ollamaResponse);
 
 		// TODO investigate mapping of additional metadata/runtime info to the response.
-		// Determine if should be top
-		// level map vs. nested map
-		return new AiResponse(Collections.singletonList(generation), Map.of("ollama-generate-results", results));
+		return new AiResponse(Collections.singletonList(generation));
 	}
 
 	/**

File: spring-ai-ollama/src/test/java/org/springframework/ai/ollama/client/OllamaClientTests.java
Patch:
@@ -20,8 +20,6 @@ public void smokeTest() {
 		AiResponse aiResponse = ollama2.generate(prompt);
 		Assertions.assertNotNull(aiResponse);
 		Assertions.assertFalse(CollectionUtils.isEmpty(aiResponse.getGenerations()));
-		Assertions.assertFalse(CollectionUtils.isEmpty(aiResponse.getProviderOutput()));
-		Assertions.assertNotNull(aiResponse.getProviderOutput().get("ollama-generate-results"));
 		Assertions.assertNotNull(aiResponse.getGeneration());
 		Assertions.assertNotNull(aiResponse.getGeneration().getText());
 	}

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/PgVectorFilterExpressionConverter.java
Patch:
@@ -30,9 +30,9 @@ public class PgVectorFilterExpressionConverter extends AbstractFilterExpressionC
 
 	@Override
 	protected void doExpression(Expression expression, StringBuilder context) {
-		this.convert(expression.left(), context);
+		this.convertOperand(expression.left(), context);
 		context.append(getOperationSymbol(expression));
-		this.convert(expression.right(), context);
+		this.convertOperand(expression.right(), context);
 	}
 
 	private String getOperationSymbol(Expression exp) {

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/PrintFilterExpressionConverter.java
Patch:
@@ -28,9 +28,9 @@
 public class PrintFilterExpressionConverter extends AbstractFilterExpressionConverter {
 
 	public void doExpression(Expression expression, StringBuilder context) {
-		this.convert(expression.left(), context);
+		this.convertOperand(expression.left(), context);
 		context.append(" " + expression.type() + " ");
-		this.convert(expression.right(), context);
+		this.convertOperand(expression.right(), context);
 
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/FilterExpressionBuilderTests.java
Patch:
@@ -18,7 +18,6 @@
 
 import java.util.List;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import org.springframework.ai.vectorstore.filter.Filter.Expression;
@@ -44,7 +43,6 @@ public class FilterExpressionBuilderTests {
 
 	@Test
 	public void testEQ() {
-		Expression expression = b.eq("country", "BG").build();
 		// country == "BG"
 		assertThat(b.eq("country", "BG").build()).isEqualTo(new Expression(EQ, new Key("country"), new Value("BG")));
 	}

File: spring-ai-spring-boot-autoconfigure/src/test/java/org/springframework/ai/autoconfigure/vectorstore/pgvector/PgVectorStoreAutoConfigurationIT.java
Patch:
@@ -22,12 +22,10 @@
 import java.util.Map;
 
 import org.junit.jupiter.api.Test;
-import org.springframework.core.io.DefaultResourceLoader;
 import org.testcontainers.containers.GenericContainer;
 import org.testcontainers.junit.jupiter.Container;
 import org.testcontainers.junit.jupiter.Testcontainers;
 
-import org.springframework.ai.ResourceUtils;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
 import org.springframework.ai.embedding.TransformersEmbeddingClient;
@@ -39,6 +37,7 @@
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.core.io.DefaultResourceLoader;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -54,6 +54,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
+import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.converter.MilvusFilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.util.Assert;
@@ -88,7 +89,7 @@ public class MilvusVectorStore implements VectorStore, InitializingBean {
 	public static final List<String> SEARCH_OUTPUT_FIELDS = Arrays.asList(DOC_ID_FIELD_NAME, CONTENT_FIELD_NAME,
 			METADATA_FIELD_NAME);
 
-	public final MilvusFilterExpressionConverter filterExpressionConverter = new MilvusFilterExpressionConverter();
+	public final FilterExpressionConverter filterExpressionConverter = new MilvusFilterExpressionConverter();
 
 	private final MilvusServiceClient milvusClient;
 
@@ -324,7 +325,7 @@ public Optional<Boolean> delete(List<String> idList) {
 	public List<Document> similaritySearch(SearchRequest request) {
 
 		String nativeFilterExpressions = (request.getFilterExpression() != null)
-				? this.filterExpressionConverter.convert(request.getFilterExpression()) : "";
+				? this.filterExpressionConverter.convertExpression(request.getFilterExpression()) : "";
 
 		Assert.notNull(request.getQuery(), "Query string must not be null");
 

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorStore.java
Patch:
@@ -33,6 +33,7 @@
 
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
+import org.springframework.ai.vectorstore.filter.converter.FilterExpressionConverter;
 import org.springframework.ai.vectorstore.filter.converter.PgVectorFilterExpressionConverter;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.jdbc.core.JdbcTemplate;
@@ -56,7 +57,7 @@ public class PgVectorStore implements VectorStore, InitializingBean {
 
 	public static final String VECTOR_TABLE_NAME = "vector_store";
 
-	public final PgVectorFilterExpressionConverter filterExpressionConverter = new PgVectorFilterExpressionConverter();
+	public final FilterExpressionConverter filterExpressionConverter = new PgVectorFilterExpressionConverter();
 
 	private final JdbcTemplate jdbcTemplate;
 
@@ -273,7 +274,7 @@ public Optional<Boolean> delete(List<String> idList) {
 	public List<Document> similaritySearch(SearchRequest request) {
 
 		String nativeFilterExpression = (request.getFilterExpression() != null)
-				? this.filterExpressionConverter.convert(request.getFilterExpression()) : "";
+				? this.filterExpressionConverter.convertExpression(request.getFilterExpression()) : "";
 
 		String jsonPathFilter = "";
 

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/FilterExpressionTextParser.java
Patch:
@@ -40,7 +40,7 @@
 
 /**
  *
- * Parse a text, vector-store agnostic, filter expression language into
+ * Parse a textual, vector-store agnostic, filter expression language into
  * {@link Filter.Expression}.
  *
  * The vector-store agnostic, filter expression language is defined by a formal ANTLR4

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/filter/converter/AbstractFilterExpressionConverter.java
Patch:
@@ -22,13 +22,15 @@
 import org.springframework.ai.vectorstore.filter.Filter.ExpressionType;
 import org.springframework.ai.vectorstore.filter.Filter.Group;
 import org.springframework.ai.vectorstore.filter.Filter.Operand;
+import org.springframework.util.Assert;
 
 /**
  * @author Christian Tzolov
  */
 public abstract class AbstractFilterExpressionConverter {
 
 	public String convert(Operand operand) {
+		Assert.notNull(operand, "Operand can't be null");
 		var context = new StringBuilder();
 		this.convert(operand, context);
 		return context.toString();

File: spring-ai-core/src/test/java/org/springframework/ai/vectorstore/filter/FilterExpressionBuilderTests.java
Patch:
@@ -58,10 +58,9 @@ public void tesEqAndGte() {
 	}
 
 	@Test
-	@Disabled("investigate")
-	public void tesIn() {
+	public void testIn() {
 		// genre in ["comedy", "documentary", "drama"]
-		Expression exp = b.and(b.eq("genre", "drama"), b.gte("year", 2020)).build();
+		var exp = b.in("genre", "comedy", "documentary", "drama").build();
 		assertThat(exp)
 			.isEqualTo(new Expression(IN, new Key("genre"), new Value(List.of("comedy", "documentary", "drama"))));
 	}

File: embedding-clients/transformers-embedding/src/main/java/org/springframework/ai/embedding/TransformersEmbeddingClient.java
Patch:
@@ -38,7 +38,7 @@ public class TransformersEmbeddingClient implements EmbeddingClient, Initializin
 
 	// ONNX model for all-MiniLM-L6-v2 pre-trained transformer:
 	// https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2
-	private final static String DEFAULT_ONNX_MODEL_URI = "https://raw.githubusercontent.com/spring-projects-experimental/spring-ai/main/embedding-clients/transformers-embedding/src/main/resources/onnx/all-MiniLM-L6-v2/model.onnx";
+	private final static String DEFAULT_ONNX_MODEL_URI = "https://github.com/spring-projects-experimental/spring-ai/raw/main/embedding-clients/transformers-embedding/src/main/resources/onnx/all-MiniLM-L6-v2/model.onnx";
 
 	private final static int EMBEDDING_AXIS = 1;
 

File: embedding-clients/transformers-embedding/src/test/java/org/springframework/ai/embedding/TransformersEmbeddingClientTests.java
Patch:
@@ -16,9 +16,11 @@
 
 package org.springframework.ai.embedding;
 
+import java.io.File;
 import java.util.List;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
 
 import org.springframework.ai.document.Document;
 
@@ -32,7 +34,6 @@ public class TransformersEmbeddingClientTests {
 	@Test
 	void embed() throws Exception {
 		TransformersEmbeddingClient embeddingClient = new TransformersEmbeddingClient();
-		embeddingClient.setResourceCacheDirectory("/tmp/onnx-zoo");
 		embeddingClient.afterPropertiesSet();
 		List<Double> embed = embeddingClient.embed("Hello world");
 		assertThat(embed).hasSize(384);

File: document-readers/pdf-reader/src/main/java/org/springframework/ai/reader/pdf/config/PdfDocumentReaderConfig.java
Patch:
@@ -78,7 +78,7 @@ public PdfDocumentReaderConfig.Builder withPageExtractedTextFormatter(
 
 		/**
 		 * How many pages to put in a single Document instance. 0 stands for all pages.
-		 * Defaults to 0.
+		 * Defaults to 1.
 		 * @param pagesPerDocument Number of page's content to group in single Document.
 		 * @return this builder
 		 */
@@ -130,4 +130,4 @@ public PdfDocumentReaderConfig build() {
 
 	}
 
-}
\ No newline at end of file
+}

File: spring-ai-core/src/main/java/org/springframework/ai/reader/EmptyJsonMetadataGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.loader.impl;
+package org.springframework.ai.reader;
 
 import java.util.Collections;
 import java.util.Map;

File: spring-ai-core/src/main/java/org/springframework/ai/reader/JsonMetadataGenerator.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.loader.impl;
+package org.springframework.ai.reader;
 
 import java.util.Map;
 

File: spring-ai-core/src/main/java/org/springframework/ai/retriever/VectorStoreRetriever.java
Patch:
@@ -1,14 +1,14 @@
-package org.springframework.ai.retriever.impl;
+package org.springframework.ai.retriever;
 
 import org.springframework.ai.document.Document;
-import org.springframework.ai.retriever.Retriever;
+import org.springframework.ai.document.DocumentRetriever;
 import org.springframework.ai.vectorstore.VectorStore;
 
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 
-public class VectorStoreRetriever implements Retriever {
+public class VectorStoreRetriever implements DocumentRetriever {
 
 	private VectorStore vectorStore;
 

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/KeywordMetadataEnricher.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.loader.extractor;
+package org.springframework.ai.transformer;
 
 import java.util.List;
 import java.util.Map;
@@ -31,7 +31,7 @@
  *
  * @author Christian Tzolov
  */
-public class KeywordExtractor implements DocumentTransformer {
+public class KeywordMetadataEnricher implements DocumentTransformer {
 
 	private static final String EXCERPT_KEYWORDS_METADATA_KEY = "excerpt_keywords";
 
@@ -51,7 +51,7 @@ public class KeywordExtractor implements DocumentTransformer {
 	 */
 	private final int keywordCount;
 
-	public KeywordExtractor(AiClient aiClient, int keywordCount) {
+	public KeywordMetadataEnricher(AiClient aiClient, int keywordCount) {
 		Assert.notNull(aiClient, "AiClient must not be null");
 		Assert.isTrue(keywordCount >= 1, "Document count must be >= 1");
 

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/splitter/TextSplitter.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.splitter;
+package org.springframework.ai.transformer.splitter;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: spring-ai-core/src/main/java/org/springframework/ai/transformer/splitter/TokenTextSplitter.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.splitter;
+package org.springframework.ai.transformer.splitter;
 
 import com.knuddels.jtokkit.Encodings;
 import com.knuddels.jtokkit.api.Encoding;

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/InMemoryVectorStore.java
Patch:
@@ -1,10 +1,9 @@
-package org.springframework.ai.vectorstore.impl;
+package org.springframework.ai.vectorstore;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.ai.document.Document;
 import org.springframework.ai.embedding.EmbeddingClient;
-import org.springframework.ai.vectorstore.VectorStore;
 
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/SimplePersistentVectorStore.java
Patch:
@@ -1,4 +1,4 @@
-package org.springframework.ai.vectorstore.impl;
+package org.springframework.ai.vectorstore;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.type.TypeReference;

File: spring-ai-core/src/test/java/org/springframework/ai/transformer/splitter/TextSplitterTests.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.springframework.ai.splitter;
+package org.springframework.ai.transformer.splitter;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -25,6 +25,7 @@
 
 import org.springframework.ai.document.DefaultContentFormatter;
 import org.springframework.ai.document.Document;
+import org.springframework.ai.transformer.splitter.TextSplitter;
 
 /**
  * @author Christian Tzolov

File: spring-ai-core/src/main/java/org/springframework/ai/client/AiResponse.java
Patch:
@@ -55,7 +55,7 @@ public Generation getGeneration() {
 	}
 
 	/**
-	 * Arbitrary LLM-provider specific output
+	 * Arbitrary model provider specific output
 	 */
 	public Map<String, Object> getProviderOutput() {
 		return Collections.unmodifiableMap(providerOutput);

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/VectorStore.java
Patch:
@@ -1,10 +1,10 @@
 package org.springframework.ai.vectorstore;
 
-import org.springframework.ai.document.Document;
-
 import java.util.List;
 import java.util.Optional;
 
+import org.springframework.ai.document.Document;
+
 public interface VectorStore {
 
 	/**

File: spring-ai-core/src/test/java/org/springframework/ai/loader/JsonLoaderTests.java
Patch:
@@ -40,7 +40,7 @@ void loadJson() {
 		List<Document> documents = jsonLoader.load();
 		assertThat(documents).isNotEmpty();
 		for (Document document : documents) {
-			assertThat(document.getText()).isNotEmpty();
+			assertThat(document.getContent()).isNotEmpty();
 		}
 	}
 

File: spring-ai-core/src/test/java/org/springframework/ai/loader/TextLoaderTests.java
Patch:
@@ -48,7 +48,7 @@ void loadText() {
 			assertThat(document.getMetadata().get("customKey")).isEqualTo("Value");
 			assertThat(document.getMetadata().get(TextLoader.SOURCE_METADATA)).isEqualTo("text_source.txt");
 			assertThat(document.getMetadata().get(TextLoader.CHARSET_METADATA)).isEqualTo("UTF-8");
-			assertThat(document.getText()).isNotEmpty();
+			assertThat(document.getContent()).isNotEmpty();
 		}
 	}
 

File: spring-ai-openai/src/test/java/org/springframework/ai/openai/vectorstore/SimplePersistentVectorStoreIT.java
Patch:
@@ -23,7 +23,7 @@
 @SpringBootTest
 public class SimplePersistentVectorStoreIT {
 
-	@Value("classpath:/data/acme/bikes.json")
+	@Value("file:src/test/resources/data/acme/bikes.json")
 	private Resource bikesJsonResource;
 
 	@Autowired

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -269,7 +269,7 @@ public void add(List<Document> documents) {
 			docIdArray.add(document.getId());
 			// Use a (future) DocumentTextLayoutFormatter instance to extract
 			// the content used to compute the embeddings
-			contentArray.add(document.getText());
+			contentArray.add(document.getContent());
 			metadataArray.add(new JSONObject(document.getMetadata()));
 			embeddingArray.add(toFloatList(embedding));
 		}

File: vector-stores/spring-ai-neo4j-store/src/main/java/org/springframework/ai/vectorstore/Neo4jVectorStore.java
Patch:
@@ -325,7 +325,7 @@ private Map<String, Object> documentToRecord(Document document) {
 		row.put("id", document.getId());
 
 		var properties = new HashMap<String, Object>();
-		properties.put("text", document.getText());
+		properties.put("text", document.getContent());
 
 		document.getMetadata().forEach((k, v) -> properties.put("metadata." + k, Values.value(v)));
 		row.put("properties", properties);

File: vector-stores/spring-ai-pgvector-store/src/main/java/org/springframework/ai/vectorstore/PgVectorStore.java
Patch:
@@ -213,7 +213,7 @@ public void add(List<Document> documents) {
 			document.setEmbedding(embedding);
 
 			UUID id = UUID.fromString(document.getId());
-			String content = document.getText();
+			String content = document.getContent();
 			Map<String, Object> metadata = document.getMetadata();
 			PGvector pgEmbedding = new PGvector(toFloatArray(embedding));
 

File: vector-stores/spring-ai-milvus-store/src/main/java/org/springframework/ai/vectorstore/MilvusVectorStore.java
Patch:
@@ -48,8 +48,8 @@
 import io.milvus.param.index.CreateIndexParam;
 import io.milvus.param.index.DescribeIndexParam;
 import io.milvus.param.index.DropIndexParam;
-import io.milvus.response.SearchResultsWrapper;
 import io.milvus.response.QueryResultsWrapper.RowRecord;
+import io.milvus.response.SearchResultsWrapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -359,7 +359,7 @@ public List<Document> similaritySearch(String query, int topK, double similarity
 				metadata.put(DISTANCE_FIELD_NAME, 1 - getResultSimilarity(rowRecord));
 				return new Document(docId, content, metadata.getInnerMap());
 			})
-			.collect(Collectors.toList());
+			.toList();
 	}
 
 	private float getResultSimilarity(RowRecord rowRecord) {
@@ -368,7 +368,7 @@ private float getResultSimilarity(RowRecord rowRecord) {
 	}
 
 	private List<Float> toFloatList(List<Double> embeddingDouble) {
-		return embeddingDouble.stream().map(Number::floatValue).collect(Collectors.toList());
+		return embeddingDouble.stream().map(Number::floatValue).toList();
 	}
 
 	// ---------------------------------------------------------------------------------

File: spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/client/AzureOpenAiClient.java
Patch:
@@ -73,7 +73,7 @@ public AiResponse generate(Prompt prompt) {
 		List<Message> messages = prompt.getMessages();
 		List<ChatMessage> azureMessages = new ArrayList<>();
 		for (Message message : messages) {
-			String messageType = message.getMessageType().getValue();
+			String messageType = message.getMessageTypeValue();
 			ChatRole chatRole = ChatRole.fromString(messageType);
 			azureMessages.add(new ChatMessage(chatRole, message.getContent()));
 		}

File: spring-ai-core/src/main/java/org/springframework/ai/prompt/messages/Message.java
Patch:
@@ -26,4 +26,6 @@ public interface Message {
 
 	MessageType getMessageType();
 
+	String getMessageTypeValue();
+
 }

File: spring-ai-openai/src/test/java/org/springframework/ai/openai/embedding/EmbeddingIT.java
Patch:
@@ -28,6 +28,7 @@ void simpleEmbedding() {
 		assertThat(embeddingResponse.getMetadata()).containsEntry("total-tokens", 2L);
 		assertThat(embeddingResponse.getMetadata()).containsEntry("prompt-tokens", 2L);
 
+		assertThat(embeddingClient.dimensions()).isEqualTo(1536);
 	}
 
 }

File: spring-ai-core/src/main/java/org/springframework/ai/embedding/Embedding.java
Patch:
@@ -39,8 +39,8 @@ public int hashCode() {
 
 	@Override
 	public String toString() {
-		String messsage = this.embedding.size() == 0 ? "<empty>" : "<has data>";
-		return "Embedding{" + "embedding=" + messsage + ", index=" + index + '}';
+		String message = this.embedding.size() == 0 ? "<empty>" : "<has data>";
+		return "Embedding{" + "embedding=" + message + ", index=" + index + '}';
 	}
 
 }

File: spring-ai-core/src/main/java/org/springframework/ai/prompt/messages/AbstractMessage.java
Patch:
@@ -61,9 +61,9 @@ protected AbstractMessage(MessageType messageType, Resource resource) {
 		}
 	}
 
-	protected AbstractMessage(MessageType messageType, Resource resource, Map<String, Object> messagePropertiets) {
+	protected AbstractMessage(MessageType messageType, Resource resource, Map<String, Object> messageProperties) {
 		this.messageType = messageType;
-		this.properties = messagePropertiets;
+		this.properties = messageProperties;
 		try (InputStream inputStream = resource.getInputStream()) {
 			this.content = StreamUtils.copyToString(inputStream, Charset.defaultCharset());
 		}

File: spring-ai-core/src/main/java/org/springframework/ai/vectorstore/VectorStore.java
Patch:
@@ -21,7 +21,7 @@ public interface VectorStore {
 	List<Document> similaritySearch(String query, int k);
 
 	/**
-	 * @param query The query to send, it will be converted to an embeddeing based on the
+	 * @param query The query to send, it will be converted to an embedding based on the
 	 * configuration of the vector store.
 	 * @param k the top 'k' similar results
 	 * @param threshold the lower bound of the similarity score

File: spring-ai-openai/src/test/java/org/springframework/ai/openai/acme/AcmeIntegrationTest.java
Patch:
@@ -81,7 +81,7 @@ void acmeChain() {
 		logger.info(String.format("Found %s relevant documents.", similarDocuments.size()));
 
 		// Try the case where not product was specified, so query over whatever docs might
-		// be releveant.
+		// be relevant.
 
 		Message systemMessage = getSystemMessage(similarDocuments);
 		UserMessage userMessage = new UserMessage(userQuery);

File: spring-ai-core/src/main/java/org/springframework/ai/prompt/PromptTemplate.java
Patch:
@@ -33,7 +33,8 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-public class PromptTemplate implements PromptTemplateActions, PromptTemplateStringActions, PromptTemplateMessageActions {
+public class PromptTemplate
+		implements PromptTemplateActions, PromptTemplateStringActions, PromptTemplateMessageActions {
 
 	private ST st;
 

File: spring-ai-core/src/main/java/org/springframework/ai/prompt/ChatPromptTemplate.java
Patch:
@@ -26,7 +26,7 @@
  * A PromptTemplate that lets you specify the role as a string should the current
  * implementations and their roles not suffice for your needs.
  */
-public class ChatPromptTemplate implements PromptTemplateActions {
+public class ChatPromptTemplate implements PromptTemplateActions, PromptTemplateChatActions {
 
 	private final List<PromptTemplate> promptTemplates;
 
@@ -56,7 +56,7 @@ public String render(Map<String, Object> model) {
 	public List<Message> createMessages() {
 		List<Message> messages = new ArrayList<>();
 		for (PromptTemplate promptTemplate : promptTemplates) {
-			messages.addAll(promptTemplate.createMessages());
+			messages.add(promptTemplate.createMessage());
 		}
 		return messages;
 	}
@@ -65,7 +65,7 @@ public List<Message> createMessages() {
 	public List<Message> createMessages(Map<String, Object> model) {
 		List<Message> messages = new ArrayList<>();
 		for (PromptTemplate promptTemplate : promptTemplates) {
-			messages.addAll(promptTemplate.createMessages(model));
+			messages.add(promptTemplate.createMessage(model));
 		}
 		return messages;
 	}

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiAutoConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import com.azure.ai.openai.OpenAIClientBuilder;
 import com.azure.core.credential.AzureKeyCredential;
 
-import org.springframework.ai.azure.openai.llm.AzureOpenAiClient;
+import org.springframework.ai.azure.openai.client.AzureOpenAiClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/openai/OpenAiAutoConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import com.theokanning.openai.service.OpenAiService;
 
 import org.springframework.ai.openai.embedding.OpenAiEmbeddingClient;
-import org.springframework.ai.openai.llm.OpenAiClient;
+import org.springframework.ai.openai.client.OpenAiClient;
 import org.springframework.boot.autoconfigure.AutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: spring-ai-core/src/main/java/org/springframework/ai/core/embedding/EmbeddingResponse.java
Patch:
@@ -5,13 +5,13 @@
 import java.util.Map;
 import java.util.Objects;
 
-public class EmbeddingResult {
+public class EmbeddingResponse {
 
 	private List<Embedding> data;
 
 	private Map<String, Object> metadata = new HashMap<>();
 
-	public EmbeddingResult(List<Embedding> data, Map<String, Object> metadata) {
+	public EmbeddingResponse(List<Embedding> data, Map<String, Object> metadata) {
 		this.data = data;
 		this.metadata = metadata;
 	}
@@ -30,7 +30,7 @@ public boolean equals(Object o) {
 			return true;
 		if (o == null || getClass() != o.getClass())
 			return false;
-		EmbeddingResult that = (EmbeddingResult) o;
+		EmbeddingResponse that = (EmbeddingResponse) o;
 		return Objects.equals(data, that.data) && Objects.equals(metadata, that.metadata);
 	}
 

File: spring-ai-azure-openai/src/main/java/org/springframework/ai/azure/openai/llm/AzureOpenAiClient.java
Patch:
@@ -39,7 +39,7 @@ public class AzureOpenAiClient implements LlmClient {
 
 	private final OpenAIClient msoftOpenAiClient;
 
-	private Double temperature = 0.5;
+	private Double temperature = 0.7;
 
 	private String model = "gpt-35-turbo";
 

File: spring-ai-spring-boot-autoconfigure/src/main/java/org/springframework/ai/autoconfigure/azure/openai/AzureOpenAiProperties.java
Patch:
@@ -31,7 +31,7 @@ public class AzureOpenAiProperties {
 
 	private String endpoint;
 
-	private Double temperature = 0.5;
+	private Double temperature = 0.7;
 
 	private String model = "gpt-35-turbo";
 

