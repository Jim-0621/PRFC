File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -81,6 +81,8 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
             for (Animator animatorChild : animators) {
                 Animator animatorCopy = animatorChild.clone();
                 animatorCopy.setTarget(childView.getView());
+                // Seeks to the initial position
+                animatorCopy.end();
                 // Core logic of the interpolation.
                 animatorCopy.setStartDelay((long) (maxTimeOffset
                         * interpolator.getInterpolation(childView.getTimeOffset() / maxTimeOffset)));

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -81,6 +81,8 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
             for (Animator animatorChild : animators) {
                 Animator animatorCopy = animatorChild.clone();
                 animatorCopy.setTarget(childView.getView());
+                // Seeks to the initial position
+                animatorCopy.end();
                 // Core logic of the interpolation.
                 animatorCopy.setStartDelay((long) (maxTimeOffset
                         * interpolator.getInterpolation(childView.getTimeOffset() / maxTimeOffset)));

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -29,15 +29,15 @@
 import android.view.animation.Interpolator;
 import android.view.animation.LinearInterpolator;
 
-import androidx.annotation.NonNull;
-
 import com.willowtreeapps.spruce.exclusion.ExclusionHelper;
 import com.willowtreeapps.spruce.sort.SortFunction;
 import com.willowtreeapps.spruce.sort.SpruceTimedView;
 
 import java.util.ArrayList;
 import java.util.List;
 
+import androidx.annotation.NonNull;
+
 public class Spruce {
 
     private final ViewGroup viewGroup;
@@ -124,7 +124,7 @@ public SpruceBuilder sortWith(SortFunction function) {
         }
 
         /**
-         * excludeViews to exclude the view with Ids {@link List<Integer>}
+         * excludeViews to exclude the view with Ids as a list of integers
          *
          * @param exclusionList list of ids that are excluded from the choreographed spruce animation.
          * @param mode          there are two modes for exclusion

File: lib/src/main/java/com/willowtreeapps/spruce/exclusion/ExclusionHelper.java
Patch:
@@ -78,7 +78,7 @@ public boolean isToBeIncluded(View view, int index) {
      * filterViews function will filter out the {@link HashMap} exclusionMap from the parent view group.
      *
      * @param viewGroup parent view group
-     * @return returns filtered {@link List<View>}
+     * @return returns filtered list of type view
      */
     public List<View> filterViews(ViewGroup viewGroup) {
         List<View> children = new ArrayList<>();

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -71,9 +71,10 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
             for (Animator animatorChild : animators) {
                 Animator animatorCopy = animatorChild.clone();
                 animatorCopy.setTarget(childView.getView());
+                animatorCopy.setStartDelay(childView.getTimeOffset());
+                animatorCopy.setDuration(animatorChild.getDuration());
                 animatorCopy.start();
                 animatorCopy.cancel();
-                animatorCopy.setDuration((childView.getTimeOffset() + animatorChild.getDuration()));
                 animatorsList.add(animatorCopy);
             }
         }
@@ -85,9 +86,9 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
     public static class SpruceBuilder {
 
         private final ViewGroup viewGroup;
+        private final ExclusionHelper exclusionHelper = new ExclusionHelper();
         private Animator[] animators;
         private SortFunction sortFunction;
-        private final ExclusionHelper exclusionHelper = new ExclusionHelper();
 
         /**
          * SpruceBuilder constructor that takes a ViewGroup

File: app/src/main/java/com/willowtreeapps/spurceexampleapp/pager/VerticalViewPager.java
Patch:
@@ -23,11 +23,12 @@
 package com.willowtreeapps.spurceexampleapp.pager;
 
 import android.content.Context;
-import android.support.v4.view.ViewPager;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
 
+import androidx.viewpager.widget.ViewPager;
+
 public class VerticalViewPager extends ViewPager {
 
     public VerticalViewPager(Context context) {

File: app/src/main/java/com/willowtreeapps/spurceexampleapp/widgets/CardLayout.java
Patch:
@@ -23,13 +23,14 @@
 package com.willowtreeapps.spurceexampleapp.widgets;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
 import android.widget.LinearLayout;
 
 import com.willowtreeapps.spurceexampleapp.R;
 
+import androidx.annotation.Nullable;
+
 public class CardLayout extends LinearLayout {
 
     public CardLayout(Context context) {

File: app/src/main/java/com/willowtreeapps/spurceexampleapp/widgets/RadioGroupGridLayout.java
Patch:
@@ -23,7 +23,6 @@
 package com.willowtreeapps.spurceexampleapp.widgets;
 
 import android.content.Context;
-import android.support.v7.widget.AppCompatRadioButton;
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
@@ -33,6 +32,8 @@
 import com.willowtreeapps.spruce.sort.RadialSort;
 import com.willowtreeapps.spurceexampleapp.R;
 
+import androidx.appcompat.widget.AppCompatRadioButton;
+
 
 public class RadioGroupGridLayout extends GridLayout implements View.OnClickListener {
 

File: lib/src/main/java/com/willowtreeapps/spruce/sort/ContinuousWeightedSort.java
Patch:
@@ -23,8 +23,6 @@
 package com.willowtreeapps.spruce.sort;
 
 import android.graphics.PointF;
-import android.support.annotation.FloatRange;
-import android.support.annotation.VisibleForTesting;
 import android.view.View;
 import android.view.ViewGroup;
 
@@ -33,6 +31,9 @@
 import java.util.Comparator;
 import java.util.List;
 
+import androidx.annotation.FloatRange;
+import androidx.annotation.VisibleForTesting;
+
 public class ContinuousWeightedSort extends ContinuousSort {
 
     public static final double LIGHT_WEIGHT = 0.5;

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -71,7 +71,7 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
                 animatorCopy.setTarget(childView.getView());
                 animatorCopy.start();
                 animatorCopy.cancel();
-                animatorCopy.setStartDelay(childView.getTimeOffset());
+                animatorCopy.setDuration((childView.getTimeOffset()+animatorChild.getDuration()));
                 animatorsList.add(animatorCopy);
             }
         }

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -71,7 +71,7 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
                 animatorCopy.setTarget(childView.getView());
                 animatorCopy.start();
                 animatorCopy.cancel();
-                animatorCopy.setStartDelay(childView.getTimeOffset());
+                animatorCopy.setDuration((childView.getTimeOffset()+animatorChild.getDuration()));
                 animatorsList.add(animatorCopy);
             }
         }

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -71,7 +71,7 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
                 animatorCopy.setTarget(childView.getView());
                 animatorCopy.start();
                 animatorCopy.cancel();
-                animatorCopy.setStartDelay(childView.getTimeOffset());
+                animatorCopy.setDuration((childView.getTimeOffset()+animatorChild.getDuration()));
                 animatorsList.add(animatorCopy);
             }
         }

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -68,6 +68,8 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
             for (Animator animatorChild : animators) {
                 Animator animatorCopy = animatorChild.clone();
                 animatorCopy.setTarget(childView.getView());
+                animatorCopy.start();
+                animatorCopy.cancel();
                 animatorCopy.setStartDelay(childView.getTimeOffset());
                 animatorsList.add(animatorCopy);
             }

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -68,6 +68,8 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
             for (Animator animatorChild : animators) {
                 Animator animatorCopy = animatorChild.clone();
                 animatorCopy.setTarget(childView.getView());
+                animatorCopy.start();
+                animatorCopy.cancel();
                 animatorCopy.setStartDelay(childView.getTimeOffset());
                 animatorsList.add(animatorCopy);
             }

File: lib/src/main/java/com/willowtreeapps/spruce/sort/ContinuousSort.java
Patch:
@@ -39,7 +39,7 @@ public class ContinuousSort extends RadialSort {
 
     /**
      * Establishes the delay between object animations and their starting position based on distance,
-     * delay, and a value from the SprucePosition enum
+     * delay, and a value from the Position enum
      *
      * @param interObjectDelay delay between object animations
      * @param reversed flag to indicate if the animation should be reversed

File: lib/src/main/java/com/willowtreeapps/spruce/sort/Utils.java
Patch:
@@ -49,7 +49,7 @@ public static float euclideanDistance(PointF firstPoint, PointF secondPoint) {
      * @return float value representing the horizontal (or x) distance between two points
      */
     public static float horizontalDistance(PointF firstPoint, PointF secondPoint) {
-        return secondPoint.x - firstPoint.x;
+        return Math.abs(secondPoint.x - firstPoint.x);
     }
 
     /**
@@ -60,7 +60,7 @@ public static float horizontalDistance(PointF firstPoint, PointF secondPoint) {
      * @return float value representing the vertical (or y) distance between two points
      */
     public static float verticalDistance(PointF firstPoint, PointF secondPoint) {
-        return secondPoint.y - firstPoint.y;
+        return Math.abs(secondPoint.y - firstPoint.y);
     }
 
     /**

File: lib/src/main/java/com/willowtreeapps/spruce/Spruce.java
Patch:
@@ -60,7 +60,7 @@ private AnimatorSet getAnimatorSetForSort(Animator[] animators, SortFunction sor
             children.add(viewGroup.getChildAt(i));
         }
 
-        childrenWithTime = sortFunction.getViewListWithTimeOffsets(children);
+        childrenWithTime = sortFunction.getViewListWithTimeOffsets(viewGroup, children);
         animatorSet = new AnimatorSet();
         List<Animator> animatorsList = new ArrayList<>();
 

File: lib/src/main/java/com/willowtreeapps/spruce/sort/DefaultSort.java
Patch:
@@ -23,6 +23,7 @@
 package com.willowtreeapps.spruce.sort;
 
 import android.view.View;
+import android.view.ViewGroup;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -40,7 +41,7 @@ public DefaultSort(long interObjectDelay) {
     }
 
     @Override
-    public List<SpruceTimedView> getViewListWithTimeOffsets(List<View> children) {
+    public List<SpruceTimedView> getViewListWithTimeOffsets(ViewGroup parent, List<View> children) {
         List<SpruceTimedView> childTimedViews = new ArrayList<>();
         long currentTimeOffset = 0L;
 

File: lib/src/main/java/com/willowtreeapps/spruce/sort/SortFunction.java
Patch:
@@ -23,6 +23,7 @@
 package com.willowtreeapps.spruce.sort;
 
 import android.view.View;
+import android.view.ViewGroup;
 
 import java.util.List;
 
@@ -31,9 +32,10 @@ public abstract class SortFunction {
     /**
      * Get a list of SpruceTimedView
      *
+     * @param parent ViewGroup parent of the collection of child views
      * @param children List of views to be animated
      * @return List of SpruceTimedView objects that contain the view and it's offset
      */
-    public abstract List<SpruceTimedView> getViewListWithTimeOffsets(List<View> children);
+    public abstract List<SpruceTimedView> getViewListWithTimeOffsets(ViewGroup parent, List<View> children);
 
 }

File: lib/src/main/java/com/willowtreeapps/spruce/sort/DistancedSort.java
Patch:
@@ -51,7 +51,7 @@ public DistancedSort(long interObjectDelay, boolean reversed) {
     }
 
     @Override
-    public List<SpruceTimedView> getTimeOffsets(List<View> children, long timeOffset) {
+    public List<SpruceTimedView> getViewListWithTimeOffsets(List<View> children) {
         final PointF comparisonPoint = getDistancePoint(children);
 
         Collections.sort(children, new Comparator<View>() {

File: lib/src/main/java/com/willowtreeapps/spruce/sort/SortFunction.java
Patch:
@@ -32,9 +32,8 @@ public abstract class SortFunction {
      * Get a list of SpruceTimedView
      *
      * @param children List of views to be animated
-     * @param timeOffset (long) time offset in milliseconds
      * @return List of SpruceTimedView objects that contain the view and it's offset
      */
-    public abstract List<SpruceTimedView> getTimeOffsets(List<View> children, long timeOffset);
+    public abstract List<SpruceTimedView> getViewListWithTimeOffsets(List<View> children);
 
 }

File: lib/src/main/java/com/willowtreeapps/spruce/sort/DistancedSort.java
Patch:
@@ -51,7 +51,7 @@ public DistancedSort(long interObjectDelay, boolean reversed) {
     }
 
     @Override
-    public List<SpruceTimedView> getTimeOffsets(List<View> children, long timeOffset) {
+    public List<SpruceTimedView> getViewListWithTimeOffsets(List<View> children) {
         final PointF comparisonPoint = getDistancePoint(children);
 
         Collections.sort(children, new Comparator<View>() {

File: lib/src/main/java/com/willowtreeapps/spruce/sort/SortFunction.java
Patch:
@@ -32,9 +32,8 @@ public abstract class SortFunction {
      * Get a list of SpruceTimedView
      *
      * @param children List of views to be animated
-     * @param timeOffset (long) time offset in milliseconds
      * @return List of SpruceTimedView objects that contain the view and it's offset
      */
-    public abstract List<SpruceTimedView> getTimeOffsets(List<View> children, long timeOffset);
+    public abstract List<SpruceTimedView> getViewListWithTimeOffsets(List<View> children);
 
 }

