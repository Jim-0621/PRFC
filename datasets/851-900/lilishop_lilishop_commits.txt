File: consumer/src/main/java/cn/lili/event/impl/VerificationOrderExecute.java
Patch:
@@ -43,7 +43,7 @@ public void orderChange(OrderMessage orderMessage) {
             //修改虚拟订单货物可以进行售后、投诉
             orderItemService.update(new LambdaUpdateWrapper<OrderItem>().eq(OrderItem::getOrderSn, orderMessage.getOrderSn())
                     .set(OrderItem::getAfterSaleStatus, OrderItemAfterSaleStatusEnum.NOT_APPLIED)
-                    .set(OrderItem::getComplainStatus, OrderComplaintStatusEnum.COMPLETE));
+                    .set(OrderItem::getComplainStatus, OrderComplaintStatusEnum.NO_APPLY));
         }
     }
 

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -233,7 +233,7 @@ private Token checkMemberStore(Member member) {
     private Member findMember(String userName) {
         QueryWrapper<Member> queryWrapper = new QueryWrapper<>();
         queryWrapper.eq("username", userName).or().eq("mobile", userName);
-        return this.getOne(queryWrapper);
+        return this.getOne(queryWrapper, false);
     }
 
     @Override

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
             cache.incrementScore(CachePrefix.HOT_WORD.getPrefix(), searchDTO.getKeyword());
         }
         NativeSearchQueryBuilder searchQueryBuilder = createSearchQueryBuilder(searchDTO, pageVo);
-//        searchQueryBuilder.withCollapseField("goodsId");
+//        searchQueryBuilder.withCollapseField("goodsId.keyword");
         NativeSearchQuery searchQuery = searchQueryBuilder.build();
         searchQuery.setTrackTotalHits(true);
         log.debug("searchGoods DSL:{}", searchQuery.getQuery());

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -233,7 +233,7 @@ private Token checkMemberStore(Member member) {
     private Member findMember(String userName) {
         QueryWrapper<Member> queryWrapper = new QueryWrapper<>();
         queryWrapper.eq("username", userName).or().eq("mobile", userName);
-        return this.getOne(queryWrapper);
+        return this.getOne(queryWrapper, false);
     }
 
     @Override

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
             cache.incrementScore(CachePrefix.HOT_WORD.getPrefix(), searchDTO.getKeyword());
         }
         NativeSearchQueryBuilder searchQueryBuilder = createSearchQueryBuilder(searchDTO, pageVo);
-//        searchQueryBuilder.withCollapseField("goodsId");
+//        searchQueryBuilder.withCollapseField("goodsId.keyword");
         NativeSearchQuery searchQuery = searchQueryBuilder.build();
         searchQuery.setTrackTotalHits(true);
         log.debug("searchGoods DSL:{}", searchQuery.getQuery());

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/Order.java
Patch:
@@ -243,7 +243,7 @@ public Order(CartVO cartVO, TradeDTO tradeDTO) {
         this.setDeliverStatus(DeliverStatusEnum.UNDELIVERED.name());
         this.setTradeSn(tradeDTO.getSn());
         this.setRemark(cartVO.getRemark());
-        this.setFreightPrice(tradeDTO.getPriceDetailDTO().getFreightPrice());
+        this.setFreightPrice(cartVO.getPriceDetailDTO().getFreightPrice());
         //会员收件信息
         if (tradeDTO.getMemberAddress() != null && DeliveryMethodEnum.LOGISTICS.name().equals(cartVO.getDeliveryMethod())) {
             this.setConsigneeAddressIdPath(tradeDTO.getMemberAddress().getConsigneeAddressIdPath());

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -437,6 +437,7 @@ public Boolean freight(List<String> goodsIds, String templateId) {
         lambdaUpdateWrapper.in(Goods::getId, goodsIds);
         List<String> goodsCache = goodsIds.stream().map(item -> CachePrefix.GOODS.getPrefix() + item).collect(Collectors.toList());
         cache.multiDel(goodsCache);
+        goodsSkuService.freight(goodsIds, templateId);
         return this.update(lambdaUpdateWrapper);
     }
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -437,6 +437,7 @@ public Boolean freight(List<String> goodsIds, String templateId) {
         lambdaUpdateWrapper.in(Goods::getId, goodsIds);
         List<String> goodsCache = goodsIds.stream().map(item -> CachePrefix.GOODS.getPrefix() + item).collect(Collectors.toList());
         cache.multiDel(goodsCache);
+        goodsSkuService.freight(goodsIds, templateId);
         return this.update(lambdaUpdateWrapper);
     }
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillApplyServiceImpl.java
Patch:
@@ -176,7 +176,7 @@ public void addSeckillApply(String seckillId, String storeId, List<SeckillApplyV
                 continue;
             }
             //获取秒杀活动时间段
-            DateTime startTime = DateUtil.offsetHour(seckill.getStartTime(), seckillApply.getTimeLine());
+            DateTime startTime = DateUtil.offsetHour(DateUtil.beginOfDay(seckill.getStartTime()), seckillApply.getTimeLine());
             //检测是否可以发布促销商品
             checkSeckillGoodsSku(seckill, seckillApply, goodsSku, startTime);
             //设置秒杀申请默认内容

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillApplyServiceImpl.java
Patch:
@@ -176,7 +176,7 @@ public void addSeckillApply(String seckillId, String storeId, List<SeckillApplyV
                 continue;
             }
             //获取秒杀活动时间段
-            DateTime startTime = DateUtil.offsetHour(seckill.getStartTime(), seckillApply.getTimeLine());
+            DateTime startTime = DateUtil.offsetHour(DateUtil.beginOfDay(seckill.getStartTime()), seckillApply.getTimeLine());
             //检测是否可以发布促销商品
             checkSeckillGoodsSku(seckill, seckillApply, goodsSku, startTime);
             //设置秒杀申请默认内容

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -286,7 +286,7 @@ public Token refreshStoreToken(String refreshToken) {
     public Token mobilePhoneLogin(String mobilePhone) {
         QueryWrapper<Member> queryWrapper = new QueryWrapper<>();
         queryWrapper.eq("mobile", mobilePhone);
-        Member member = this.baseMapper.selectOne(queryWrapper);
+        Member member = this.baseMapper.selectOne(queryWrapper, false);
         //如果手机号不存在则自动注册用户
         if (member == null) {
             member = new Member(mobilePhone, UuidUtils.getUUID(), mobilePhone);

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -286,7 +286,7 @@ public Token refreshStoreToken(String refreshToken) {
     public Token mobilePhoneLogin(String mobilePhone) {
         QueryWrapper<Member> queryWrapper = new QueryWrapper<>();
         queryWrapper.eq("mobile", mobilePhone);
-        Member member = this.baseMapper.selectOne(queryWrapper);
+        Member member = this.baseMapper.selectOne(queryWrapper, false);
         //如果手机号不存在则自动注册用户
         if (member == null) {
             member = new Member(mobilePhone, UuidUtils.getUUID(), mobilePhone);

File: framework/src/main/java/cn/lili/modules/promotion/service/PromotionGoodsService.java
Patch:
@@ -4,7 +4,6 @@
 import cn.lili.common.enums.PromotionTypeEnum;
 import cn.lili.common.vo.PageVO;
 import cn.lili.modules.goods.entity.dos.GoodsSku;
-import cn.lili.modules.goods.entity.dto.GoodsSkuDTO;
 import cn.lili.modules.promotion.entity.dos.PromotionGoods;
 import cn.lili.modules.promotion.entity.dto.search.PromotionGoodsSearchParams;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
@@ -52,7 +51,7 @@ static String getPromotionGoodsStockCacheKey(PromotionTypeEnum typeEnum, String
      * @param skus 商品skuId
      * @return 促销商品集合
      */
-    List<PromotionGoods> findSkuValidPromotions(List<GoodsSkuDTO> skus);
+    List<PromotionGoods> findSkuValidPromotions(List<String> skus);
 
     /**
      * 分页获取促销商品信息

File: framework/src/main/java/cn/lili/modules/promotion/service/PromotionGoodsService.java
Patch:
@@ -4,7 +4,6 @@
 import cn.lili.common.enums.PromotionTypeEnum;
 import cn.lili.common.vo.PageVO;
 import cn.lili.modules.goods.entity.dos.GoodsSku;
-import cn.lili.modules.goods.entity.dto.GoodsSkuDTO;
 import cn.lili.modules.promotion.entity.dos.PromotionGoods;
 import cn.lili.modules.promotion.entity.dto.search.PromotionGoodsSearchParams;
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
@@ -52,7 +51,7 @@ static String getPromotionGoodsStockCacheKey(PromotionTypeEnum typeEnum, String
      * @param skus 商品skuId
      * @return 促销商品集合
      */
-    List<PromotionGoods> findSkuValidPromotions(List<GoodsSkuDTO> skus);
+    List<PromotionGoods> findSkuValidPromotions(List<String> skus);
 
     /**
      * 分页获取促销商品信息

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -292,6 +292,9 @@ private void updateGoodsIndexPromotions(String promotionsJsonStr) {
                     searchParams.setCategoryPath(promotions.getScopeId());
                     searchParams.setPageNumber(i);
                     searchParams.setPageSize(BATCH_SIZE);
+                    if (CharSequenceUtil.isNotEmpty(promotions.getStoreId()) && !"0".equals(promotions.getStoreId())){
+                        searchParams.setStoreId(promotions.getStoreId());
+                    }
                     IPage<GoodsSku> goodsSkuByPage = this.goodsSkuService.getGoodsSkuByPage(searchParams);
                     if (goodsSkuByPage == null || goodsSkuByPage.getRecords().isEmpty()) {
                         break;

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -292,6 +292,9 @@ private void updateGoodsIndexPromotions(String promotionsJsonStr) {
                     searchParams.setCategoryPath(promotions.getScopeId());
                     searchParams.setPageNumber(i);
                     searchParams.setPageSize(BATCH_SIZE);
+                    if (CharSequenceUtil.isNotEmpty(promotions.getStoreId()) && !"0".equals(promotions.getStoreId())){
+                        searchParams.setStoreId(promotions.getStoreId());
+                    }
                     IPage<GoodsSku> goodsSkuByPage = this.goodsSkuService.getGoodsSkuByPage(searchParams);
                     if (goodsSkuByPage == null || goodsSkuByPage.getRecords().isEmpty()) {
                         break;

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -743,6 +743,9 @@ private void extendOldSkuValue(GoodsSku goodsSku) {
      * @param goodsSku sku
      */
     void renderImages(GoodsSku goodsSku, List<String> goodsImages) {
+        if (goodsImages == null || goodsImages.isEmpty()) {
+            return;
+        }
         JSONObject jsonObject = JSONUtil.parseObj(goodsSku.getSpecs());
         List<String> images = jsonObject.getBeanList("images", String.class);
         GoodsGallery goodsGallery;

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PintuanServiceImpl.java
Patch:
@@ -107,7 +107,9 @@ public List<PintuanMemberVO> getPintuanMember(String pintuanId) {
             //获取已参团人数
             this.setMemberVONum(memberVO, pintuan.getRequiredNum(), order.getSn());
             memberVO.setOrderSn(order.getSn());
-            members.add(memberVO);
+            if (memberVO.getToBeGroupedNum() > 0) {
+                members.add(memberVO);
+            }
         }
         return members;
     }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -743,6 +743,9 @@ private void extendOldSkuValue(GoodsSku goodsSku) {
      * @param goodsSku sku
      */
     void renderImages(GoodsSku goodsSku, List<String> goodsImages) {
+        if (goodsImages == null || goodsImages.isEmpty()) {
+            return;
+        }
         JSONObject jsonObject = JSONUtil.parseObj(goodsSku.getSpecs());
         List<String> images = jsonObject.getBeanList("images", String.class);
         GoodsGallery goodsGallery;

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PintuanServiceImpl.java
Patch:
@@ -107,7 +107,9 @@ public List<PintuanMemberVO> getPintuanMember(String pintuanId) {
             //获取已参团人数
             this.setMemberVONum(memberVO, pintuan.getRequiredNum(), order.getSn());
             memberVO.setOrderSn(order.getSn());
-            members.add(memberVO);
+            if (memberVO.getToBeGroupedNum() > 0) {
+                members.add(memberVO);
+            }
         }
         return members;
     }

File: framework/src/main/java/cn/lili/modules/file/serviceimpl/FileServiceImpl.java
Patch:
@@ -42,7 +42,9 @@ public void batchDelete(List<String> ids) {
         List<File> files = this.list(queryWrapper);
         List<String> keys = new ArrayList<>();
         files.forEach(item -> keys.add(item.getFileKey()));
-        filePluginFactory.filePlugin().deleteFile(keys);
+        if(!keys.isEmpty()) {
+            filePluginFactory.filePlugin().deleteFile(keys);
+        }
         this.remove(queryWrapper);
     }
 

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/OrderItem.java
Patch:
@@ -189,7 +189,7 @@ public void setPriceDetailDTO(PriceDetailDTO priceDetail) {
     }
 
     public String getAfterSaleStatus() {
-        if (PromotionTypeEnum.isAfterSale(this.getPromotionType())) {
+        if (!PromotionTypeEnum.isCanAfterSale(this.promotionType)) {
             return OrderItemAfterSaleStatusEnum.EXPIRED.name();
         }
         return afterSaleStatus;

File: framework/src/main/java/cn/lili/modules/order/order/entity/vo/OrderSimpleVO.java
Patch:
@@ -188,7 +188,7 @@ private OrderItemVO getOrderItemVO(int i) {
             orderItemVO.setImage(groupImages.split(",")[i]);
         }
         if (CharSequenceUtil.isNotEmpty(groupAfterSaleStatus) && groupAfterSaleStatus.split(",").length == groupGoodsId.split(",").length) {
-            if (OrderPromotionTypeEnum.isAfterSale(this.orderPromotionType)) {
+            if (!OrderPromotionTypeEnum.isCanAfterSale(this.orderPromotionType)) {
                 orderItemVO.setAfterSaleStatus(OrderItemAfterSaleStatusEnum.EXPIRED.name());
             } else {
                 orderItemVO.setAfterSaleStatus(groupAfterSaleStatus.split(",")[i]);
@@ -222,7 +222,7 @@ public AllowOperation getAllowOperationVO() {
 
     public String getGroupAfterSaleStatus() {
         // 不可售后的订单类型集合
-        if (OrderPromotionTypeEnum.isAfterSale(this.orderPromotionType)) {
+        if (!OrderPromotionTypeEnum.isCanAfterSale(this.orderPromotionType)) {
             return OrderItemAfterSaleStatusEnum.EXPIRED.name();
         }
         return groupAfterSaleStatus;

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -88,6 +88,7 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
             cache.incrementScore(CachePrefix.HOT_WORD.getPrefix(), searchDTO.getKeyword());
         }
         NativeSearchQueryBuilder searchQueryBuilder = createSearchQueryBuilder(searchDTO, pageVo);
+//        searchQueryBuilder.withCollapseField("goodsId");
         NativeSearchQuery searchQuery = searchQueryBuilder.build();
         searchQuery.setTrackTotalHits(true);
         log.debug("searchGoods DSL:{}", searchQuery.getQuery());
@@ -130,6 +131,7 @@ public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageV
         //品牌
         AggregationBuilder brandNameBuilder = AggregationBuilders.terms(ATTR_BRAND_NAME).field("brandName.keyword");
         builder.addAggregation(AggregationBuilders.terms("brandIdNameAgg").field(ATTR_BRAND_ID).size(Integer.MAX_VALUE).subAggregation(brandNameBuilder));
+
         AggregationBuilder brandUrlBuilder = AggregationBuilders.terms(ATTR_BRAND_URL).field("brandUrl.keyword");
         builder.addAggregation(AggregationBuilders.terms("brandIdUrlAgg").field(ATTR_BRAND_ID).size(Integer.MAX_VALUE).subAggregation(brandUrlBuilder));
         //参数

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -88,6 +88,7 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
             cache.incrementScore(CachePrefix.HOT_WORD.getPrefix(), searchDTO.getKeyword());
         }
         NativeSearchQueryBuilder searchQueryBuilder = createSearchQueryBuilder(searchDTO, pageVo);
+//        searchQueryBuilder.withCollapseField("goodsId");
         NativeSearchQuery searchQuery = searchQueryBuilder.build();
         searchQuery.setTrackTotalHits(true);
         log.debug("searchGoods DSL:{}", searchQuery.getQuery());
@@ -130,6 +131,7 @@ public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageV
         //品牌
         AggregationBuilder brandNameBuilder = AggregationBuilders.terms(ATTR_BRAND_NAME).field("brandName.keyword");
         builder.addAggregation(AggregationBuilders.terms("brandIdNameAgg").field(ATTR_BRAND_ID).size(Integer.MAX_VALUE).subAggregation(brandNameBuilder));
+
         AggregationBuilder brandUrlBuilder = AggregationBuilders.terms(ATTR_BRAND_URL).field("brandUrl.keyword");
         builder.addAggregation(AggregationBuilders.terms("brandIdUrlAgg").field(ATTR_BRAND_ID).size(Integer.MAX_VALUE).subAggregation(brandUrlBuilder));
         //参数

File: common-api/src/main/java/cn/lili/controller/common/UploadController.java
Patch:
@@ -55,6 +55,9 @@ public ResultMessage<Object> upload(MultipartFile file,
                                         String base64,
                                         @RequestHeader String accessToken, @RequestParam String directoryPath) {
 
+        if(StrUtil.isBlank(directoryPath)){
+            directoryPath = "default";
+        }
 
         AuthUser authUser = UserContext.getAuthUser(cache, accessToken);
         //如果用户未登录，则无法上传图片

File: common-api/src/main/java/cn/lili/controller/common/UploadController.java
Patch:
@@ -55,6 +55,9 @@ public ResultMessage<Object> upload(MultipartFile file,
                                         String base64,
                                         @RequestHeader String accessToken, @RequestParam String directoryPath) {
 
+        if(StrUtil.isBlank(directoryPath)){
+            directoryPath = "default";
+        }
 
         AuthUser authUser = UserContext.getAuthUser(cache, accessToken);
         //如果用户未登录，则无法上传图片

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -399,7 +399,7 @@ public void cancellation() {
      */
     private void confusionMember(Member member) {
         member.setUsername(UuidUtils.getUUID());
-        member.setMobile(member.getMobile());
+        member.setMobile(UuidUtils.getUUID() + member.getMobile());
         member.setNickName("用户已注销");
         member.setDisabled(false);
         this.updateById(member);

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -395,7 +395,7 @@ public void cancellation() {
      */
     private void confusionMember(Member member) {
         member.setUsername(UuidUtils.getUUID());
-        member.setMobile(UuidUtils.getUUID() + member.getMobile());
+        member.setMobile(member.getMobile());
         member.setNickName("用户已注销");
         member.setDisabled(false);
         this.updateById(member);

File: framework/src/main/java/cn/lili/modules/member/service/MemberService.java
Patch:
@@ -135,10 +135,9 @@ public interface MemberService extends IService<Member> {
     /**
      * 注销账号
      *
-     * @param password 密码
      * @return 操作结果
      */
-    void cancellation(String password);
+    void cancellation();
     /**
      * 修改当前会员的手机号
      *

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/Order.java
Patch:
@@ -148,6 +148,9 @@ public class Order extends BaseEntity {
     @ApiModelProperty(value = "买家订单备注")
     private String remark;
 
+    @ApiModelProperty(value = "卖家订单备注")
+    private String sellerRemark;
+
     @ApiModelProperty(value = "订单取消原因")
     private String cancelReason;
 

File: framework/src/main/java/cn/lili/modules/order/order/entity/vo/OrderSimpleVO.java
Patch:
@@ -148,6 +148,9 @@ public class OrderSimpleVO {
     @ApiModelProperty(value = "退款金额")
     private String groupRefundPrice;
 
+    @ApiModelProperty(value = "卖家订单备注")
+    private String sellerRemark;
+
     public List<OrderItemVO> getOrderItems() {
         if (CharSequenceUtil.isEmpty(groupGoodsId)) {
             return new ArrayList<>();

File: framework/src/main/java/cn/lili/modules/order/order/mapper/OrderMapper.java
Patch:
@@ -60,7 +60,8 @@ public interface OrderMapper extends BaseMapper<Order> {
      * @param queryWrapper 查询条件
      * @return 简短订单分页
      */
-    @Select("select o.sn,o.flow_price,o.create_time,o.order_status,o.pay_status,o.payment_method,o.payment_time,o.member_name,o.store_name as store_name,o.store_id as store_id,o.client_type,o.order_type,o.deliver_status,o.order_promotion_type " +
+    @Select("select o.sn,o.flow_price,o.create_time,o.order_status,o.pay_status,o.payment_method,o.payment_time,o.member_name,o.store_name as " +
+            "store_name,o.store_id as store_id,o.client_type,o.order_type,o.deliver_status,o.order_promotion_type,o.seller_remark " +
             ",GROUP_CONCAT(oi.goods_id) as group_goods_id," +
             " GROUP_CONCAT(oi.sku_id) as group_sku_id," +
             " GROUP_CONCAT(oi.num) as group_num" +

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsService.java
Patch:
@@ -153,9 +153,8 @@ public interface GoodsService extends IService<Goods> {
      * 修改商品库存数量
      *
      * @param goodsId  商品ID
-     * @param quantity 库存数量
      */
-    void updateStock(String goodsId, Integer quantity);
+    void updateStock(String goodsId);
 
     /**
      * 更新商品评价数量

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/IndexStatisticsServiceImpl.java
Patch:
@@ -135,9 +135,9 @@ public IndexStatisticsVO indexStatistics() {
         //下单统计
         Map<String, Object> map = storeFlowStatisticsService.getOrderStatisticsPrice();
         //今日下单数
-        indexStatisticsVO.setTodayOrderNum(map.get("num") == null ? 0L : (Long) map.get("num"));
+        indexStatisticsVO.setTodayOrderNum(map.get("num") == null ? 0L : Long.parseLong(map.get("num").toString()));
         //今日下单金额
-        indexStatisticsVO.setTodayOrderPrice(map.get("price") == null ? 0D : (Double) map.get("price"));
+        indexStatisticsVO.setTodayOrderPrice(map.get("price") == null ? 0D : Double.parseDouble(map.get("price").toString()));
 
         //今日新增会员数量
         indexStatisticsVO.setTodayMemberNum(memberStatisticsService.todayMemberNum());

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/RefundOrderStatisticsServiceImpl.java
Patch:
@@ -37,7 +37,7 @@ public Double getRefundOrderStatisticsPrice(StatisticsQueryParam statisticsQuery
 
         QueryWrapper queryWrapper = getQueryWrapper(statisticsQueryParam);
         queryWrapper.select("SUM(final_price) AS price");
-        return (Double) this.getMap(queryWrapper).get("price");
+        return Double.parseDouble(this.getMap(queryWrapper).get("price").toString());
     }
 
 

File: framework/src/main/java/cn/lili/modules/order/order/service/OrderItemService.java
Patch:
@@ -77,5 +77,5 @@ public interface OrderItemService extends IService<OrderItem> {
 
     List<OrderItem> waitOperationOrderItem(OrderItemOperationDTO orderItemOperationDTO);
 
-    void expiredAfterSaleStatusExecuteByAfterSale(DateTime receiveTime);
+    void expiredAfterSaleStatus(DateTime expiredTime);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/service/OrderItemService.java
Patch:
@@ -77,5 +77,5 @@ public interface OrderItemService extends IService<OrderItem> {
 
     List<OrderItem> waitOperationOrderItem(OrderItemOperationDTO orderItemOperationDTO);
 
-    void expiredAfterSaleStatusExecuteByAfterSale(DateTime receiveTime);
+    void expiredAfterSaleStatus(DateTime expiredTime);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -496,6 +496,9 @@ public enum ResultCode {
     WECHAT_MP_MESSAGE_TMPL_ERROR(80306, "未能获取到微信模版消息id"),
     WECHAT_ERROR(80307, "微信接口异常"),
     APP_VERSION_EXIST(80307, "APP版本已存在"),
+    APP_VERSION_PARAM_ERROR(80308, "添加APP版本参数异常"),
+    // 未选择APP类型
+    APP_VERSION_TYPE_ERROR(80308, "请选择有效的APP类型"),
 
     /**
      * IM

File: manager-api/src/main/java/cn/lili/controller/other/AppVersionManagerController.java
Patch:
@@ -63,7 +63,6 @@ public ResultMessage<Object> add(@Valid AppVersion appVersion) {
             @ApiImplicitParam(name = "id", value = "主键", required = true, dataType = "String", paramType = "path")
     })
     public ResultMessage<Object> edit(@Valid AppVersion appVersion, @PathVariable String id) {
-
         if(this.appVersionService.checkAppVersion(appVersion)){
             if(this.appVersionService.updateById(appVersion)){
                 return ResultUtil.success();

File: common-api/src/main/java/cn/lili/controller/common/UploadController.java
Patch:
@@ -108,6 +108,7 @@ public ResultMessage<Object> upload(MultipartFile file,
                 newFile.setOwnerName(authUser.getStoreName());
             } else {
                 newFile.setOwnerId(authUser.getId());
+                newFile.setOwnerName(authUser.getNickName());
             }
 
             //存储文件目录

File: framework/src/main/java/cn/lili/modules/file/entity/dto/FileOwnerDTO.java
Patch:
@@ -25,6 +25,9 @@ public class FileOwnerDTO extends PageVO {
     @ApiModelProperty(value = "拥有者id")
     private String ownerId;
 
+    @ApiModelProperty(value = "拥有者名称")
+    private String ownerName;
+
     @ApiModelProperty(value = "用户类型")
     private String userEnums;
 

File: framework/src/main/java/cn/lili/modules/file/serviceimpl/FileServiceImpl.java
Patch:
@@ -88,6 +88,7 @@ public void batchDelete(List<String> ids, AuthUser authUser) {
     public IPage<File> customerPage(FileOwnerDTO fileOwnerDTO) {
         LambdaQueryWrapper<File> queryWrapper = new LambdaQueryWrapper<>();
         queryWrapper.like(CharSequenceUtil.isNotEmpty(fileOwnerDTO.getName()), File::getName, fileOwnerDTO.getName())
+                .like(CharSequenceUtil.isNotEmpty(fileOwnerDTO.getOwnerName()), File::getOwnerName, fileOwnerDTO.getOwnerName())
                 .eq(CharSequenceUtil.isNotEmpty(fileOwnerDTO.getFileDirectoryId()),File::getFileDirectoryId, fileOwnerDTO.getFileDirectoryId())
                 .like(CharSequenceUtil.isNotEmpty(fileOwnerDTO.getFileKey()), File::getFileKey, fileOwnerDTO.getFileKey())
                 .like(CharSequenceUtil.isNotEmpty(fileOwnerDTO.getFileType()), File::getFileType, fileOwnerDTO.getFileType())

File: common-api/src/main/java/cn/lili/controller/common/UploadController.java
Patch:
@@ -105,6 +105,7 @@ public ResultMessage<Object> upload(MultipartFile file,
             //如果是店铺，则记录店铺id
             if (authUser.getRole().equals(UserEnums.STORE)) {
                 newFile.setOwnerId(authUser.getStoreId());
+                newFile.setOwnerName(authUser.getStoreName());
             } else {
                 newFile.setOwnerId(authUser.getId());
             }

File: framework/src/main/java/cn/lili/modules/file/entity/File.java
Patch:
@@ -41,6 +41,9 @@ public class File extends BaseEntity {
     @ApiModelProperty(value = "拥有者id")
     private String ownerId;
 
+    @ApiModelProperty(value = "拥有者名称")
+    private String ownerName;
+
     @ApiModelProperty(value = "用户类型")
     private String userEnums;
 

File: consumer/src/main/java/cn/lili/event/impl/VerificationOrderExecute.java
Patch:
@@ -43,7 +43,7 @@ public void orderChange(OrderMessage orderMessage) {
             //修改虚拟订单货物可以进行售后、投诉
             orderItemService.update(new LambdaUpdateWrapper<OrderItem>().eq(OrderItem::getOrderSn, orderMessage.getOrderSn())
                     .set(OrderItem::getAfterSaleStatus, OrderItemAfterSaleStatusEnum.ALREADY_APPLIED)
-                    .set(OrderItem::getCommentStatus, OrderComplaintStatusEnum.COMPLETE));
+                    .set(OrderItem::getComplainStatus, OrderComplaintStatusEnum.COMPLETE));
         }
     }
 

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -419,7 +419,7 @@ public enum ResultCode {
     STORE_CLOSE_ERROR(50006, "店铺关闭，请联系管理员"),
     STORE_DELIVER_GOODS_ADDRESS(50007,"请填写商家发货地址"),
     FREIGHT_TEMPLATE_NOT_EXIST(50010, "当前模版不存在"),
-    STORE_STATUS_ERROR(50011, "店铺状态异常，无法申请"),
+    STORE_STATUS_ERROR(50011, "店铺在申请中或审核中，请勿重复操作"),
     STORE_DELIVER_ADDRESS_EXIST(50012,"请填写发货地址"),
 
     /**

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -271,6 +271,7 @@ public List<Order> queryListByPromotion(String pintuanId) {
         queryWrapper.eq(Order::getPromotionId, pintuanId);
         queryWrapper.nested(i -> i.eq(Order::getPayStatus, PayStatusEnum.PAID.name()).or(j -> j.eq(Order::getOrderStatus,
                 OrderStatusEnum.PAID.name())));
+        queryWrapper.ne(Order::getOrderStatus, OrderStatusEnum.CANCELLED.name());
         return this.list(queryWrapper);
     }
 
@@ -302,7 +303,7 @@ public Order cancel(String orderSn, String reason) {
         Order order = OperationalJudgment.judgment(this.getBySn(orderSn));
         //如果订单促销类型不为空&&订单是拼团订单，并且订单未成团，则抛出异常
         if (OrderPromotionTypeEnum.PINTUAN.name().equals(order.getOrderPromotionType())
-                && !CharSequenceUtil.equalsAny(order.getOrderStatus(), OrderStatusEnum.UNDELIVERED.name(), OrderStatusEnum.STAY_PICKED_UP.name())) {
+                && !CharSequenceUtil.equalsAny(order.getOrderStatus(), OrderStatusEnum.TAKE.name(), OrderStatusEnum.UNDELIVERED.name(), OrderStatusEnum.STAY_PICKED_UP.name())) {
             throw new ServiceException(ResultCode.ORDER_CAN_NOT_CANCEL);
         }
         if (CharSequenceUtil.equalsAny(order.getOrderStatus(),
@@ -1011,6 +1012,7 @@ private List<Order> getPintuanOrder(String pintuanId, String parentOrderSn) {
         //拼团sn=开团订单sn 或者 参团订单的开团订单sn
         queryWrapper.and(i -> i.eq(Order::getSn, parentOrderSn)
                 .or(j -> j.eq(Order::getParentOrderSn, parentOrderSn)));
+        queryWrapper.ne(Order::getOrderStatus, OrderStatusEnum.CANCELLED.name());
         //参团后的订单数（人数）
         return this.list(queryWrapper);
     }

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -271,6 +271,7 @@ public List<Order> queryListByPromotion(String pintuanId) {
         queryWrapper.eq(Order::getPromotionId, pintuanId);
         queryWrapper.nested(i -> i.eq(Order::getPayStatus, PayStatusEnum.PAID.name()).or(j -> j.eq(Order::getOrderStatus,
                 OrderStatusEnum.PAID.name())));
+        queryWrapper.ne(Order::getOrderStatus, OrderStatusEnum.CANCELLED.name());
         return this.list(queryWrapper);
     }
 
@@ -302,7 +303,7 @@ public Order cancel(String orderSn, String reason) {
         Order order = OperationalJudgment.judgment(this.getBySn(orderSn));
         //如果订单促销类型不为空&&订单是拼团订单，并且订单未成团，则抛出异常
         if (OrderPromotionTypeEnum.PINTUAN.name().equals(order.getOrderPromotionType())
-                && !CharSequenceUtil.equalsAny(order.getOrderStatus(), OrderStatusEnum.UNDELIVERED.name(), OrderStatusEnum.STAY_PICKED_UP.name())) {
+                && !CharSequenceUtil.equalsAny(order.getOrderStatus(), OrderStatusEnum.TAKE.name(), OrderStatusEnum.UNDELIVERED.name(), OrderStatusEnum.STAY_PICKED_UP.name())) {
             throw new ServiceException(ResultCode.ORDER_CAN_NOT_CANCEL);
         }
         if (CharSequenceUtil.equalsAny(order.getOrderStatus(),
@@ -1011,6 +1012,7 @@ private List<Order> getPintuanOrder(String pintuanId, String parentOrderSn) {
         //拼团sn=开团订单sn 或者 参团订单的开团订单sn
         queryWrapper.and(i -> i.eq(Order::getSn, parentOrderSn)
                 .or(j -> j.eq(Order::getParentOrderSn, parentOrderSn)));
+        queryWrapper.ne(Order::getOrderStatus, OrderStatusEnum.CANCELLED.name());
         //参团后的订单数（人数）
         return this.list(queryWrapper);
     }

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsSalesModeEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
+import cn.lili.modules.goods.entity.enums.GoodsTypeEnum;
 import cn.lili.modules.goods.service.GoodsSkuService;
 import cn.lili.modules.goods.service.WholesaleService;
 import cn.lili.modules.member.entity.dos.Member;
@@ -568,7 +569,7 @@ public Trade createTrade(TradeParams tradeParams) {
         tradeDTO.setStoreRemark(tradeParams.getRemark());
         tradeDTO.setParentOrderSn(tradeParams.getParentOrderSn());
         //订单无收货地址校验
-        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null && tradeDTO.getMemberAddress() == null) {
+        if (tradeDTO.getStoreAddress() == null && tradeDTO.getMemberAddress() == null && !GoodsTypeEnum.VIRTUAL_GOODS.name().equals(tradeDTO.getCheckedSkuList().get(0).getGoodsSku().getGoodsType())) {
             throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);
         }
         //构建交易

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.event.TransactionCommitSendMQEvent;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationEventPublisher;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Autowired    private ApplicationEventPublisher applicationEventPublisher;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("订单创建消息", rocketmqCustomProperties.getOrderTopic(),                OrderTagsEnum.ORDER_CREATE.name(), key));        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(),                    tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.event.TransactionCommitSendMQEvent;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.goods.entity.enums.GoodsTypeEnum;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationEventPublisher;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Autowired    private ApplicationEventPublisher applicationEventPublisher;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("订单创建消息", rocketmqCustomProperties.getOrderTopic(),                OrderTagsEnum.ORDER_CREATE.name(), key));        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null && !GoodsTypeEnum.VIRTUAL_GOODS.name().equals(tradeDTO.getCheckedSkuList().get(0).getGoodsSku().getGoodsType())) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(),                    tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsSalesModeEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
+import cn.lili.modules.goods.entity.enums.GoodsTypeEnum;
 import cn.lili.modules.goods.service.GoodsSkuService;
 import cn.lili.modules.goods.service.WholesaleService;
 import cn.lili.modules.member.entity.dos.Member;
@@ -568,7 +569,7 @@ public Trade createTrade(TradeParams tradeParams) {
         tradeDTO.setStoreRemark(tradeParams.getRemark());
         tradeDTO.setParentOrderSn(tradeParams.getParentOrderSn());
         //订单无收货地址校验
-        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null && tradeDTO.getMemberAddress() == null) {
+        if (tradeDTO.getStoreAddress() == null && tradeDTO.getMemberAddress() == null && !GoodsTypeEnum.VIRTUAL_GOODS.name().equals(tradeDTO.getCheckedSkuList().get(0).getGoodsSku().getGoodsType())) {
             throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);
         }
         //构建交易

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.event.TransactionCommitSendMQEvent;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationEventPublisher;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Autowired    private ApplicationEventPublisher applicationEventPublisher;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("订单创建消息", rocketmqCustomProperties.getOrderTopic(),                OrderTagsEnum.ORDER_CREATE.name(), key));        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(),                    tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.event.TransactionCommitSendMQEvent;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.goods.entity.enums.GoodsTypeEnum;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationEventPublisher;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Autowired    private ApplicationEventPublisher applicationEventPublisher;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("订单创建消息", rocketmqCustomProperties.getOrderTopic(),                OrderTagsEnum.ORDER_CREATE.name(), key));        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null && !GoodsTypeEnum.VIRTUAL_GOODS.name().equals(tradeDTO.getCheckedSkuList().get(0).getGoodsSku().getGoodsType())) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(),                    tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/common/enums/PromotionTypeEnum.java
Patch:
@@ -23,7 +23,7 @@ public enum PromotionTypeEnum {
     /**
      * 有促销库存的活动类型
      */
-    static final PromotionTypeEnum[] haveStockPromotion = new PromotionTypeEnum[]{PINTUAN, SECKILL, KANJIA, POINTS_GOODS};
+    public static final PromotionTypeEnum[] haveStockPromotion = new PromotionTypeEnum[]{PINTUAN, SECKILL, KANJIA, POINTS_GOODS};
 
     private final String description;
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillApplyServiceImpl.java
Patch:
@@ -399,6 +399,8 @@ private List<SeckillGoodsVO> wrapperSeckillGoods(Integer startTimeline, String s
                     Object quantity = cache.get(promotionGoodsStockCacheKey);
                     if (quantity != null) {
                         goodsVO.setQuantity((Integer) quantity);
+                    } else {
+                        cache.put(promotionGoodsStockCacheKey, seckillApply.getQuantity());
                     }
                     seckillGoodsVoS.add(goodsVO);
                 }

File: framework/src/main/java/cn/lili/common/enums/PromotionTypeEnum.java
Patch:
@@ -23,7 +23,7 @@ public enum PromotionTypeEnum {
     /**
      * 有促销库存的活动类型
      */
-    static final PromotionTypeEnum[] haveStockPromotion = new PromotionTypeEnum[]{PINTUAN, SECKILL, KANJIA, POINTS_GOODS};
+    public static final PromotionTypeEnum[] haveStockPromotion = new PromotionTypeEnum[]{PINTUAN, SECKILL, KANJIA, POINTS_GOODS};
 
     private final String description;
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillApplyServiceImpl.java
Patch:
@@ -399,6 +399,8 @@ private List<SeckillGoodsVO> wrapperSeckillGoods(Integer startTimeline, String s
                     Object quantity = cache.get(promotionGoodsStockCacheKey);
                     if (quantity != null) {
                         goodsVO.setQuantity((Integer) quantity);
+                    } else {
+                        cache.put(promotionGoodsStockCacheKey, seckillApply.getQuantity());
                     }
                     seckillGoodsVoS.add(goodsVO);
                 }

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsImportDTO.java
Patch:
@@ -7,7 +7,6 @@
 import lombok.NoArgsConstructor;
 
 import java.util.List;
-import java.util.Map;
 
 /**
  * 商品导入DTO
@@ -36,7 +35,7 @@ public class GoodsImportDTO {
     private Boolean release;
 
     @ApiModelProperty(value = "商品图片")
-    private List<Map<String, String>> images;
+    private List<String> images;
     private List<String> goodsGalleryList;
 
     @ApiModelProperty(value = "成本价")

File: framework/src/main/java/cn/lili/mybatis/mybatisplus/external/SpiceSqlInjector.java
Patch:
@@ -28,7 +28,7 @@ public List<AbstractMethod> getMethodList(Class<?> mapperClass, TableInfo tableI
         // methodList.add(new InsertBatchSomeColumn(t -> !t.isLogicDelete() && !"update_time".equals(t.getColumn())));
         // 要逻辑删除 t.isLogicDelete() 默认不要
         methodList.add(new InsertBatchSomeColumn(t -> !t.isLogicDelete()));
-        methodList.add(new InsertIgnoreBatchAllColumn());
+        methodList.add(new InsertIgnoreBatchAllColumn("insertIgnoreBatchAllColumn"));
         return methodList;
     }
 }

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsImportDTO.java
Patch:
@@ -7,7 +7,6 @@
 import lombok.NoArgsConstructor;
 
 import java.util.List;
-import java.util.Map;
 
 /**
  * 商品导入DTO
@@ -36,7 +35,7 @@ public class GoodsImportDTO {
     private Boolean release;
 
     @ApiModelProperty(value = "商品图片")
-    private List<Map<String, String>> images;
+    private List<String> images;
     private List<String> goodsGalleryList;
 
     @ApiModelProperty(value = "成本价")

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -409,9 +409,8 @@ public void afterOrderConfirm(String orderSn) {
         }
     }
 
-
     @Override
-    @SystemLogPoint(description = "修改订单", customerLog = "'订单[' + #orderSn + ']收货信息修改，修改为'+#memberAddressDTO.consigneeDetail+'")
+    @SystemLogPoint(description = "修改订单", customerLog = "'订单[' + #orderSn + ']收货信息修改，修改为'+#memberAddressDTO.consigneeDetail")
     @Transactional(rollbackFor = Exception.class)
     public Order updateConsignee(String orderSn, MemberAddressDTO memberAddressDTO) {
         Order order = OperationalJudgment.judgment(this.getBySn(orderSn));

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -274,7 +274,7 @@ public void updatePromotionGoodsStock(List<PromotionGoods> promotionGoodsList) {
     }
 
     @Override
-    @SystemLogPoint(description = "更新促销活动商品库存", customerLog = "操作的skuId:['+#skuId+']', 修改后的库存:['+#quantity+']'")
+    @SystemLogPoint(description = "更新促销活动商品库存", customerLog = "'操作的skuId:['+#skuId+']，修改后的库存:['+#quantity+']'")
     public void updatePromotionGoodsStock(String skuId, Integer quantity) {
         LambdaQueryWrapper<PromotionGoods> queryWrapper = new LambdaQueryWrapper<>();
         queryWrapper.eq(PromotionGoods::getSkuId, skuId);
@@ -308,6 +308,7 @@ public void updatePromotionGoodsByPromotions(PromotionGoods promotionGoods) {
      * @param skuIds      skuId
      */
     @Override
+    @SystemLogPoint(description = "删除促销商品", customerLog = "'删除的skuId:['+#skuIds+']，促销活动ID:['+#promotionId+']'")
     public void deletePromotionGoods(String promotionId, List<String> skuIds) {
         LambdaQueryWrapper<PromotionGoods> queryWrapper = new LambdaQueryWrapper<PromotionGoods>()
                 .eq(PromotionGoods::getPromotionId, promotionId).in(PromotionGoods::getSkuId, skuIds);

File: manager-api/src/main/java/cn/lili/controller/passport/MemberManagerController.java
Patch:
@@ -52,7 +52,7 @@ public ResultMessage<MemberVO> get(@PathVariable String id) {
     }
 
     @ApiOperation(value = "添加会员")
-    @SystemLogPoint(description = "添加会员", customerLog = "'新增会员名称: ['+#member.username+']'")
+    @SystemLogPoint(description = "添加会员", customerLog = "'新增用户名称: ['+#member.username+']'")
     @PostMapping
     public ResultMessage<Member> save(@Valid MemberAddDTO member) {
 
@@ -61,7 +61,7 @@ public ResultMessage<Member> save(@Valid MemberAddDTO member) {
 
     @DemoSite
     @PreventDuplicateSubmissions
-    @SystemLogPoint(description = "修改会员信息", customerLog = "'修改的会员名称: ['+#managerMemberEditDTO.username+']'")
+    @SystemLogPoint(description = "修改会员信息", customerLog = "'修改的用户名称: ['+#managerMemberEditDTO.username+']'")
     @ApiOperation(value = "修改会员基本信息")
     @PutMapping
     public ResultMessage<Member> update(@Valid ManagerMemberEditDTO managerMemberEditDTO) {
@@ -70,7 +70,7 @@ public ResultMessage<Member> update(@Valid ManagerMemberEditDTO managerMemberEdi
 
     @DemoSite
     @PreventDuplicateSubmissions
-    @SystemLogPoint(description = "修改会员状态", customerLog = "'修改的会员名称: ['+#memberIds+']', '是否开启: ['+#disabled+']'")
+    @SystemLogPoint(description = "修改会员状态", customerLog = "'修改的会员名称: ['+#memberIds+']，是否开启: ['+#disabled+']'")
     @ApiOperation(value = "修改会员状态,开启关闭会员")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "memberIds", value = "会员ID", required = true, dataType = "String", allowMultiple = true, paramType = "query"),

File: framework/src/main/java/cn/lili/modules/order/aftersale/serviceimpl/AfterSaleServiceImpl.java
Patch:
@@ -215,7 +215,7 @@ public AfterSale review(String afterSaleSn, String serviceStatus, String remark,
                     afterSaleStatusEnum = AfterSaleStatusEnum.WAIT_REFUND;
                 }
             } else {
-                afterSaleStatusEnum = AfterSaleStatusEnum.COMPLETE;
+                afterSaleStatusEnum = AfterSaleStatusEnum.PASS;
             }
         } else {
             afterSaleStatusEnum = AfterSaleStatusEnum.REFUSE;
@@ -290,7 +290,7 @@ public AfterSale storeConfirm(String afterSaleSn, String serviceStatus, String r
             throw new ServiceException(ResultCode.AFTER_STATUS_ERROR);
         }
         AfterSaleStatusEnum afterSaleStatusEnum;
-        String pass = "PASS";
+        String pass = AfterSaleStatusEnum.PASS.name();
         //判断审核状态
         //在线支付 则直接进行退款
         if (pass.equals(serviceStatus) &&

File: framework/src/main/java/cn/lili/modules/order/aftersale/serviceimpl/AfterSaleServiceImpl.java
Patch:
@@ -215,7 +215,7 @@ public AfterSale review(String afterSaleSn, String serviceStatus, String remark,
                     afterSaleStatusEnum = AfterSaleStatusEnum.WAIT_REFUND;
                 }
             } else {
-                afterSaleStatusEnum = AfterSaleStatusEnum.PASS;
+                afterSaleStatusEnum = AfterSaleStatusEnum.COMPLETE;
             }
         } else {
             afterSaleStatusEnum = AfterSaleStatusEnum.REFUSE;

File: framework/src/main/java/cn/lili/modules/order/order/mapper/OrderMapper.java
Patch:
@@ -71,6 +71,8 @@ public interface OrderMapper extends BaseMapper<Order> {
             ",GROUP_CONCAT(oi.comment_status) as group_comment_status" +
             ",GROUP_CONCAT(oi.sn) as group_order_items_sn " +
             ",GROUP_CONCAT(oi.goods_price) as group_goods_price " +
+            ",GROUP_CONCAT(oi.is_refund) as group_is_refund " +
+            ",GROUP_CONCAT(oi.refund_price) as group_refund_price " +
             " FROM li_order o LEFT JOIN li_order_item AS oi on o.sn = oi.order_sn ${ew.customSqlSegment} ")
     IPage<OrderSimpleVO> queryByParams(IPage<OrderSimpleVO> page, @Param(Constants.WRAPPER) Wrapper<OrderSimpleVO> queryWrapper);
 

File: common-api/src/main/java/cn/lili/controller/common/FileDirectoryController.java
Patch:
@@ -40,6 +40,7 @@ public ResultMessage<List<FileDirectoryDTO>> getSceneFileList() {
     @PostMapping
     public ResultMessage<FileDirectory> addSceneFileList(@RequestBody @Valid FileDirectory fileDirectory) {
         fileDirectory.setDirectoryType(UserContext.getCurrentUser().getRole().name());
+        fileDirectory.setOwnerId(UserContext.getCurrentUser().getId());
         fileDirectoryService.save(fileDirectory);
         return ResultUtil.data(fileDirectory);
     }
@@ -48,6 +49,7 @@ public ResultMessage<FileDirectory> addSceneFileList(@RequestBody @Valid FileDir
     @PutMapping
     public ResultMessage<FileDirectory> editSceneFileList(@RequestBody @Valid FileDirectory fileDirectory) {
         fileDirectory.setDirectoryType(UserContext.getCurrentUser().getRole().name());
+        fileDirectory.setOwnerId(UserContext.getCurrentUser().getId());
         fileDirectoryService.updateById(fileDirectory);
         return ResultUtil.data(fileDirectory);
     }

File: framework/src/main/java/cn/lili/modules/file/serviceimpl/FileDirectoryServiceImpl.java
Patch:
@@ -1,10 +1,12 @@
 package cn.lili.modules.file.serviceimpl;
 
 import cn.lili.common.security.enums.UserEnums;
+import cn.lili.modules.distribution.entity.dos.DistributionOrder;
 import cn.lili.modules.file.entity.FileDirectory;
 import cn.lili.modules.file.entity.dto.FileDirectoryDTO;
 import cn.lili.modules.file.mapper.FileDirectoryMapper;
 import cn.lili.modules.file.service.FileDirectoryService;
+import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
@@ -34,8 +36,7 @@ public void addFileDirectory(UserEnums userEnum, String id, String ownerName) {
 
     @Override
     public List<FileDirectoryDTO> getFileDirectoryList(String scene) {
-
-        List<FileDirectory> fileDirectoryList = this.list();
+        List<FileDirectory> fileDirectoryList = this.list(new LambdaQueryWrapper<FileDirectory>().eq(FileDirectory::getOwnerId, scene));
         List<FileDirectoryDTO> fileDirectoryDTOList = new ArrayList<>();
 
         fileDirectoryList.forEach(item -> {

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -205,6 +205,7 @@ public enum ResultCode {
     POINT_NOT_ENOUGH(31015, "当前会员积分不足购买当前积分商品！"),
     ORDER_LABEL_ORDER_ERROR(31016, "订单不能打印电子面单"),
     ORDER_PRICE_ERROR(31017,"订单金额不能小于等于0"),
+    ORDER_PACKAGE_NOT_EXIST(31017, "当前订单包裹不存在！"),
 
 
     /**

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/GoodsSku.java
Patch:
@@ -7,6 +7,7 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
+import io.swagger.models.auth.In;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -536,6 +536,7 @@ public void updateStocks(List<GoodsSkuStockDTO> goodsSkuStockDTOS) {
         }
     }
 
+
     @Override
     @Transactional(rollbackFor = Exception.class)
     public void updateStock(String skuId, Integer quantity) {

File: framework/src/main/java/cn/lili/modules/statistics/entity/vo/StoreIndexStatisticsVO.java
Patch:
@@ -50,5 +50,8 @@ public class StoreIndexStatisticsVO {
     @ApiModelProperty(value = "待自提数量")
     private Long selfPickNum;
 
+    @ApiModelProperty(value = "警告库存")
+    private Long alertQuantityNum;
+
 
 }

File: framework/src/main/java/cn/lili/modules/statistics/service/GoodsStatisticsService.java
Patch:
@@ -21,7 +21,6 @@ public interface GoodsStatisticsService extends IService<Goods> {
      * @return 所有的已上架的商品数量
      */
     long goodsNum(GoodsStatusEnum goodsStatusEnum, GoodsAuthEnum goodsAuthEnum);
-
     /**
      * 获取今天的已上架的商品数量
      *

File: seller-api/src/main/java/cn/lili/controller/goods/GoodsStoreController.java
Patch:
@@ -181,7 +181,6 @@ public ResultMessage<Object> updateStocks(@RequestBody List<GoodsSkuStockDTO> up
         goodsSkuService.updateStocks(collect);
         return ResultUtil.success();
     }
-
     @ApiOperation(value = "通过id获取商品信息")
     @ApiImplicitParams({
             @ApiImplicitParam(name = "goodsId", value = "商品ID", required = true, paramType = "path"),

File: manager-api/src/main/java/cn/lili/controller/setting/RegionManagerController.java
Patch:
@@ -49,6 +49,7 @@ public ResultMessage<List<Region>> getItem(@PathVariable String id) {
         return ResultUtil.data(regionService.getItem(id));
     }
 
+    @DemoSite
     @PutMapping(value = "/{id}")
     @ApiImplicitParam(name = "id", value = "地区ID", required = true, dataType = "String", paramType = "path")
     @ApiOperation(value = "更新地区")
@@ -59,13 +60,15 @@ public ResultMessage<Region> update(@PathVariable String id, @Valid Region regio
     }
 
 
+    @DemoSite
     @PostMapping
     @ApiOperation(value = "增加地区")
     public ResultMessage<Region> save(@Valid Region region) {
         regionService.save(region);
         return ResultUtil.data(region);
     }
 
+    @DemoSite
     @DeleteMapping(value = "{ids}")
     @ApiImplicitParam(name = "id", value = "地区ID", required = true, dataType = "String", allowMultiple = true, paramType = "path")
     @ApiOperation(value = "批量通过id删除")

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -7,7 +7,6 @@
 import cn.lili.cache.CachePrefix;
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.vo.PageVO;
-import cn.lili.elasticsearch.EmptyPage;
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
 import cn.lili.modules.search.entity.dos.EsGoodsIndex;
@@ -138,8 +137,8 @@ public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageV
         AggregationBuilder sortBuilder = AggregationBuilders.sum("sortAgg").field(ATTR_SORT);
         AggregationBuilder paramsNameBuilder = AggregationBuilders.terms("nameAgg").field(ATTR_NAME).subAggregation(sortBuilder).order(BucketOrder.aggregation("sortAgg", false)).subAggregation(valuesBuilder);
         builder.addAggregation(AggregationBuilders.nested("attrAgg", ATTR_PATH).subAggregation(paramsNameBuilder));
-        builder.withPageable(new EmptyPage());
         NativeSearchQuery searchQuery = builder.build();
+        searchQuery.setMaxResults(0);
         SearchHits<EsGoodsIndex> search = restTemplate.search(searchQuery, EsGoodsIndex.class);
 
         log.debug("getSelector DSL:{}", searchQuery.getQuery());

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -7,7 +7,6 @@
 import cn.lili.cache.CachePrefix;
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.vo.PageVO;
-import cn.lili.elasticsearch.EmptyPage;
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
 import cn.lili.modules.search.entity.dos.EsGoodsIndex;
@@ -138,8 +137,8 @@ public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageV
         AggregationBuilder sortBuilder = AggregationBuilders.sum("sortAgg").field(ATTR_SORT);
         AggregationBuilder paramsNameBuilder = AggregationBuilders.terms("nameAgg").field(ATTR_NAME).subAggregation(sortBuilder).order(BucketOrder.aggregation("sortAgg", false)).subAggregation(valuesBuilder);
         builder.addAggregation(AggregationBuilders.nested("attrAgg", ATTR_PATH).subAggregation(paramsNameBuilder));
-        builder.withPageable(new EmptyPage());
         NativeSearchQuery searchQuery = builder.build();
+        searchQuery.setMaxResults(0);
         SearchHits<EsGoodsIndex> search = restTemplate.search(searchQuery, EsGoodsIndex.class);
 
         log.debug("getSelector DSL:{}", searchQuery.getQuery());

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsSkuService.java
Patch:
@@ -255,9 +255,8 @@ static String getStockCacheKey(String id) {
      * 更新商品sku评分
      *
      * @param goodsId goodsId
-     * @param skuId   skuId
      * @param grade   评分
      * @param commentNum 评论数量
      */
-    void updateGoodsSkuGrade(String goodsId, String skuId, double grade,int commentNum);
+    void updateGoodsSkuGrade(String goodsId, double grade,int commentNum);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -474,7 +474,7 @@ public void updateGoodsCommentNum(String goodsId, String skuId) {
 
 
         // 修改商品sku评价数量
-        this.goodsSkuService.updateGoodsSkuGrade(goodsId, skuId, grade, goods.getCommentNum());
+        this.goodsSkuService.updateGoodsSkuGrade(goodsId, grade, goods.getCommentNum());
 
         Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(MapUtil.builder(new HashMap<String, Object>()).put("goodsId", goodsId).build(), MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goods.getCommentNum()).put("highPraiseNum", highPraiseNum).put("grade", grade).build());
         applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("更新商品索引信息", rocketmqCustomProperties.getGoodsTopic(), GoodsTagsEnum.UPDATE_GOODS_INDEX_FIELD.name(), JSONUtil.toJsonStr(updateIndexFieldsMap)));

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -659,13 +659,13 @@ public void updateGoodsSkuBuyCount(String skuId, int buyCount) {
     }
 
     @Override
-    public void updateGoodsSkuGrade(String goodsId, String skuId, double grade, int commentNum) {
+    public void updateGoodsSkuGrade(String goodsId, double grade, int commentNum) {
         LambdaUpdateWrapper<GoodsSku> updateWrapper = new LambdaUpdateWrapper<>();
         updateWrapper.eq(GoodsSku::getGoodsId, goodsId);
         updateWrapper.set(GoodsSku::getGrade, grade);
         updateWrapper.set(GoodsSku::getCommentNum, commentNum);
         this.update(updateWrapper);
-        clearCache(skuId);
+        this.getSkuIdsByGoodsId(goodsId).forEach(this::clearCache);
     }
 
     /**

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberEvaluationServiceImpl.java
Patch:
@@ -194,6 +194,7 @@ public EvaluationNumberVO getEvaluationNumber(String goodsId) {
         evaluationNumberVO.setWorse(worse);
         evaluationNumberVO.setHaveImage(this.count(new QueryWrapper<MemberEvaluation>()
                 .eq("have_image", 1)
+                .eq("status", SwitchEnum.OPEN.name())
                 .eq("goods_id", goodsId)));
 
         return evaluationNumberVO;

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.event.TransactionCommitSendMQEvent;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationEventPublisher;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Autowired    private ApplicationEventPublisher applicationEventPublisher;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("订单创建消息", rocketmqCustomProperties.getOrderTopic(),                OrderTagsEnum.ORDER_CREATE.name(), key));        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(),                    tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsSkuService.java
Patch:
@@ -255,9 +255,8 @@ static String getStockCacheKey(String id) {
      * 更新商品sku评分
      *
      * @param goodsId goodsId
-     * @param skuId   skuId
      * @param grade   评分
      * @param commentNum 评论数量
      */
-    void updateGoodsSkuGrade(String goodsId, String skuId, double grade,int commentNum);
+    void updateGoodsSkuGrade(String goodsId, double grade,int commentNum);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -474,7 +474,7 @@ public void updateGoodsCommentNum(String goodsId, String skuId) {
 
 
         // 修改商品sku评价数量
-        this.goodsSkuService.updateGoodsSkuGrade(goodsId, skuId, grade, goods.getCommentNum());
+        this.goodsSkuService.updateGoodsSkuGrade(goodsId, grade, goods.getCommentNum());
 
         Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(MapUtil.builder(new HashMap<String, Object>()).put("goodsId", goodsId).build(), MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goods.getCommentNum()).put("highPraiseNum", highPraiseNum).put("grade", grade).build());
         applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("更新商品索引信息", rocketmqCustomProperties.getGoodsTopic(), GoodsTagsEnum.UPDATE_GOODS_INDEX_FIELD.name(), JSONUtil.toJsonStr(updateIndexFieldsMap)));

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -659,13 +659,13 @@ public void updateGoodsSkuBuyCount(String skuId, int buyCount) {
     }
 
     @Override
-    public void updateGoodsSkuGrade(String goodsId, String skuId, double grade, int commentNum) {
+    public void updateGoodsSkuGrade(String goodsId, double grade, int commentNum) {
         LambdaUpdateWrapper<GoodsSku> updateWrapper = new LambdaUpdateWrapper<>();
         updateWrapper.eq(GoodsSku::getGoodsId, goodsId);
         updateWrapper.set(GoodsSku::getGrade, grade);
         updateWrapper.set(GoodsSku::getCommentNum, commentNum);
         this.update(updateWrapper);
-        clearCache(skuId);
+        this.getSkuIdsByGoodsId(goodsId).forEach(this::clearCache);
     }
 
     /**

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberEvaluationServiceImpl.java
Patch:
@@ -194,6 +194,7 @@ public EvaluationNumberVO getEvaluationNumber(String goodsId) {
         evaluationNumberVO.setWorse(worse);
         evaluationNumberVO.setHaveImage(this.count(new QueryWrapper<MemberEvaluation>()
                 .eq("have_image", 1)
+                .eq("status", SwitchEnum.OPEN.name())
                 .eq("goods_id", goodsId)));
 
         return evaluationNumberVO;

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/CustomWordsServiceImpl.java
Patch:
@@ -102,7 +102,7 @@ public boolean deleteBathByName(List<String> names) {
     @Override
     @Transactional(rollbackFor = Exception.class)
     public long insertBatchCustomWords(List<CustomWords> customWordsList) {
-        return this.baseMapper.insertBatchSomeColumn(customWordsList);
+        return this.baseMapper.insertIgnoreBatchAllColumn(customWordsList);
     }
 
     /**

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -368,7 +368,6 @@ private void analyzeAndSaveWords(EsGoodsIndex goods) {
             keywordsList.forEach(item -> customWordsArrayList.add(new CustomWords(item)));
             //这里采用先批量删除再插入的方法，故意这么做。否则需要挨个匹配是否存在，性能消耗更大
             if (CollUtil.isNotEmpty(customWordsArrayList)) {
-                customWordsService.deleteBathByName(keywordsList);
                 customWordsService.insertBatchCustomWords(customWordsArrayList);
             }
         } catch (Exception e) {

File: framework/src/main/java/cn/lili/mybatis/mybatisplus/external/SpiceBaseMapper.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.mybatis.mybatisplus.external;
 
+
 import java.util.List;
 
 /**
@@ -16,4 +17,6 @@ public interface SpiceBaseMapper<T> {
      * @return 成功插入的数据条数
      */
     long insertBatchSomeColumn(List<T> entityList);
+
+    int insertIgnoreBatchAllColumn(List<T> list);
 }

File: framework/src/main/java/cn/lili/mybatis/mybatisplus/external/SpiceSqlInjector.java
Patch:
@@ -28,6 +28,7 @@ public List<AbstractMethod> getMethodList(Class<?> mapperClass, TableInfo tableI
         // methodList.add(new InsertBatchSomeColumn(t -> !t.isLogicDelete() && !"update_time".equals(t.getColumn())));
         // 要逻辑删除 t.isLogicDelete() 默认不要
         methodList.add(new InsertBatchSomeColumn(t -> !t.isLogicDelete()));
+        methodList.add(new InsertIgnoreBatchAllColumn());
         return methodList;
     }
 }

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/CustomWordsServiceImpl.java
Patch:
@@ -102,7 +102,7 @@ public boolean deleteBathByName(List<String> names) {
     @Override
     @Transactional(rollbackFor = Exception.class)
     public long insertBatchCustomWords(List<CustomWords> customWordsList) {
-        return this.baseMapper.insertBatchSomeColumn(customWordsList);
+        return this.baseMapper.insertIgnoreBatchAllColumn(customWordsList);
     }
 
     /**

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -368,7 +368,6 @@ private void analyzeAndSaveWords(EsGoodsIndex goods) {
             keywordsList.forEach(item -> customWordsArrayList.add(new CustomWords(item)));
             //这里采用先批量删除再插入的方法，故意这么做。否则需要挨个匹配是否存在，性能消耗更大
             if (CollUtil.isNotEmpty(customWordsArrayList)) {
-                customWordsService.deleteBathByName(keywordsList);
                 customWordsService.insertBatchCustomWords(customWordsArrayList);
             }
         } catch (Exception e) {

File: framework/src/main/java/cn/lili/mybatis/mybatisplus/external/SpiceBaseMapper.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.mybatis.mybatisplus.external;
 
+
 import java.util.List;
 
 /**
@@ -16,4 +17,6 @@ public interface SpiceBaseMapper<T> {
      * @return 成功插入的数据条数
      */
     long insertBatchSomeColumn(List<T> entityList);
+
+    int insertIgnoreBatchAllColumn(List<T> list);
 }

File: framework/src/main/java/cn/lili/mybatis/mybatisplus/external/SpiceSqlInjector.java
Patch:
@@ -28,6 +28,7 @@ public List<AbstractMethod> getMethodList(Class<?> mapperClass, TableInfo tableI
         // methodList.add(new InsertBatchSomeColumn(t -> !t.isLogicDelete() && !"update_time".equals(t.getColumn())));
         // 要逻辑删除 t.isLogicDelete() 默认不要
         methodList.add(new InsertBatchSomeColumn(t -> !t.isLogicDelete()));
+        methodList.add(new InsertIgnoreBatchAllColumn());
         return methodList;
     }
 }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -476,7 +476,7 @@ public void updateGoodsCommentNum(String goodsId, String skuId) {
         // 修改商品sku评价数量
         this.goodsSkuService.updateGoodsSkuGrade(goodsId, skuId, grade, goods.getCommentNum());
 
-        Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(MapUtil.builder(new HashMap<String, Object>()).put("id", skuId).build(), MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goods.getCommentNum()).put("highPraiseNum", highPraiseNum).put("grade", grade).build());
+        Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(MapUtil.builder(new HashMap<String, Object>()).put("goodsId", goodsId).build(), MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goods.getCommentNum()).put("highPraiseNum", highPraiseNum).put("grade", grade).build());
         applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("更新商品索引信息", rocketmqCustomProperties.getGoodsTopic(), GoodsTagsEnum.UPDATE_GOODS_INDEX_FIELD.name(), JSONUtil.toJsonStr(updateIndexFieldsMap)));
     }
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -476,7 +476,7 @@ public void updateGoodsCommentNum(String goodsId, String skuId) {
         // 修改商品sku评价数量
         this.goodsSkuService.updateGoodsSkuGrade(goodsId, skuId, grade, goods.getCommentNum());
 
-        Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(MapUtil.builder(new HashMap<String, Object>()).put("id", skuId).build(), MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goods.getCommentNum()).put("highPraiseNum", highPraiseNum).put("grade", grade).build());
+        Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(MapUtil.builder(new HashMap<String, Object>()).put("goodsId", goodsId).build(), MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goods.getCommentNum()).put("highPraiseNum", highPraiseNum).put("grade", grade).build());
         applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("更新商品索引信息", rocketmqCustomProperties.getGoodsTopic(), GoodsTagsEnum.UPDATE_GOODS_INDEX_FIELD.name(), JSONUtil.toJsonStr(updateIndexFieldsMap)));
     }
 

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsSearchParams.java
Patch:
@@ -101,6 +101,9 @@ public <T> QueryWrapper<T> queryWrapper() {
         if (CharSequenceUtil.isNotEmpty(id)) {
             queryWrapper.in("id", Arrays.asList(id.split(",")));
         }
+        if (CollUtil.isNotEmpty(ids)) {
+            queryWrapper.in("id", ids);
+        }
         if (CharSequenceUtil.isNotEmpty(storeId)) {
             queryWrapper.eq("store_id", storeId);
         }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.promotion.serviceimpl;
 
+import cn.hutool.core.collection.CollUtil;
 import cn.hutool.core.convert.Convert;
 import cn.hutool.core.text.CharSequenceUtil;
 import cn.hutool.json.JSONObject;
@@ -109,7 +110,7 @@ public List<PromotionGoods> findSkuValidPromotions(List<GoodsSkuDTO> skus) {
         queryWrapper.and(i -> i.or(j -> j.in(SKU_ID_COLUMN, skuIds))
                 .or(n -> n.eq("scope_type", PromotionsScopeTypeEnum.ALL.name()))
                 .or(n -> n.and(k -> k.eq("scope_type", PromotionsScopeTypeEnum.PORTION_GOODS_CATEGORY.name())
-                        .and(l -> l.in("scope_id", categoriesPath)))));
+                        .and(l -> l.in(CollUtil.isNotEmpty(categoriesPath), "scope_id", categoriesPath)))));
         queryWrapper.and(i -> i.or(PromotionTools.queryPromotionStatus(PromotionsStatusEnum.START)).or(PromotionTools.queryPromotionStatus(PromotionsStatusEnum.NEW)));
         return this.list(queryWrapper);
     }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.promotion.serviceimpl;
 
+import cn.hutool.core.collection.CollUtil;
 import cn.hutool.core.convert.Convert;
 import cn.hutool.core.text.CharSequenceUtil;
 import cn.hutool.json.JSONObject;
@@ -109,7 +110,7 @@ public List<PromotionGoods> findSkuValidPromotions(List<GoodsSkuDTO> skus) {
         queryWrapper.and(i -> i.or(j -> j.in(SKU_ID_COLUMN, skuIds))
                 .or(n -> n.eq("scope_type", PromotionsScopeTypeEnum.ALL.name()))
                 .or(n -> n.and(k -> k.eq("scope_type", PromotionsScopeTypeEnum.PORTION_GOODS_CATEGORY.name())
-                        .and(l -> l.in("scope_id", categoriesPath)))));
+                        .and(l -> l.in(CollUtil.isNotEmpty(categoriesPath), "scope_id", categoriesPath)))));
         queryWrapper.and(i -> i.or(PromotionTools.queryPromotionStatus(PromotionsStatusEnum.START)).or(PromotionTools.queryPromotionStatus(PromotionsStatusEnum.NEW)));
         return this.list(queryWrapper);
     }

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsSearchParams.java
Patch:
@@ -101,6 +101,9 @@ public <T> QueryWrapper<T> queryWrapper() {
         if (CharSequenceUtil.isNotEmpty(id)) {
             queryWrapper.in("id", Arrays.asList(id.split(",")));
         }
+        if (CollUtil.isNotEmpty(ids)) {
+            queryWrapper.in("id", ids);
+        }
         if (CharSequenceUtil.isNotEmpty(storeId)) {
             queryWrapper.eq("store_id", storeId);
         }

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/Order.java
Patch:
@@ -84,7 +84,7 @@ public class Order extends BaseEntity {
     private String receivableNo;
 
     /**
-     * @see  PaymentMethodEnum
+     * @see PaymentMethodEnum
      */
     @ApiModelProperty(value = "支付方式")
     private String paymentMethod;
@@ -242,15 +242,15 @@ public Order(CartVO cartVO, TradeDTO tradeDTO) {
         this.setRemark(cartVO.getRemark());
         this.setFreightPrice(tradeDTO.getPriceDetailDTO().getFreightPrice());
         //会员收件信息
-        if(DeliveryMethodEnum.LOGISTICS.name().equals(cartVO.getDeliveryMethod())){
+        if (tradeDTO.getMemberAddress() != null && DeliveryMethodEnum.LOGISTICS.name().equals(cartVO.getDeliveryMethod())) {
             this.setConsigneeAddressIdPath(tradeDTO.getMemberAddress().getConsigneeAddressIdPath());
             this.setConsigneeAddressPath(tradeDTO.getMemberAddress().getConsigneeAddressPath());
             this.setConsigneeDetail(tradeDTO.getMemberAddress().getDetail());
             this.setConsigneeMobile(tradeDTO.getMemberAddress().getMobile());
             this.setConsigneeName(tradeDTO.getMemberAddress().getName());
         }
         //自提点信息
-        if(DeliveryMethodEnum.SELF_PICK_UP.name().equals(cartVO.getDeliveryMethod())){
+        if (tradeDTO.getStoreAddress() != null && DeliveryMethodEnum.SELF_PICK_UP.name().equals(cartVO.getDeliveryMethod())) {
             this.setStoreAddressPath(tradeDTO.getStoreAddress().getAddress());
             this.setStoreAddressMobile(tradeDTO.getStoreAddress().getMobile());
             this.setStoreAddressCenter(tradeDTO.getStoreAddress().getCenter());

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/Order.java
Patch:
@@ -84,7 +84,7 @@ public class Order extends BaseEntity {
     private String receivableNo;
 
     /**
-     * @see  PaymentMethodEnum
+     * @see PaymentMethodEnum
      */
     @ApiModelProperty(value = "支付方式")
     private String paymentMethod;
@@ -242,15 +242,15 @@ public Order(CartVO cartVO, TradeDTO tradeDTO) {
         this.setRemark(cartVO.getRemark());
         this.setFreightPrice(tradeDTO.getPriceDetailDTO().getFreightPrice());
         //会员收件信息
-        if(DeliveryMethodEnum.LOGISTICS.name().equals(cartVO.getDeliveryMethod())){
+        if (tradeDTO.getMemberAddress() != null && DeliveryMethodEnum.LOGISTICS.name().equals(cartVO.getDeliveryMethod())) {
             this.setConsigneeAddressIdPath(tradeDTO.getMemberAddress().getConsigneeAddressIdPath());
             this.setConsigneeAddressPath(tradeDTO.getMemberAddress().getConsigneeAddressPath());
             this.setConsigneeDetail(tradeDTO.getMemberAddress().getDetail());
             this.setConsigneeMobile(tradeDTO.getMemberAddress().getMobile());
             this.setConsigneeName(tradeDTO.getMemberAddress().getName());
         }
         //自提点信息
-        if(DeliveryMethodEnum.SELF_PICK_UP.name().equals(cartVO.getDeliveryMethod())){
+        if (tradeDTO.getStoreAddress() != null && DeliveryMethodEnum.SELF_PICK_UP.name().equals(cartVO.getDeliveryMethod())) {
             this.setStoreAddressPath(tradeDTO.getStoreAddress().getAddress());
             this.setStoreAddressMobile(tradeDTO.getStoreAddress().getMobile());
             this.setStoreAddressCenter(tradeDTO.getStoreAddress().getCenter());

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        // 购物车选择状态判断        if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {            throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);        }        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/SkuFreightRender.java
Patch:
@@ -50,7 +50,7 @@ public void render(TradeDTO tradeDTO) {
             return;
         }
         //选择物流的时候计算价格
-        if(DeliveryMethodEnum.LOGISTICS.name().equals(tradeDTO.getCartList().get(0).getDeliveryMethod())){
+        if (DeliveryMethodEnum.LOGISTICS.name().equals(tradeDTO.getCartList().get(0).getDeliveryMethod())) {
             if (memberAddress != null) {
                 //运费分组信息
                 Map<String, List<String>> freightGroups = freightTemplateGrouping(cartSkuVOS);
@@ -116,7 +116,7 @@ public void render(TradeDTO tradeDTO) {
                     }
                 }
             }
-        }else{
+        } else {
             //自提清空不配送商品
             tradeDTO.setNotSupportFreight(null);
         }

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/SkuFreightRender.java
Patch:
@@ -50,7 +50,7 @@ public void render(TradeDTO tradeDTO) {
             return;
         }
         //选择物流的时候计算价格
-        if(DeliveryMethodEnum.LOGISTICS.name().equals(tradeDTO.getCartList().get(0).getDeliveryMethod())){
+        if (DeliveryMethodEnum.LOGISTICS.name().equals(tradeDTO.getCartList().get(0).getDeliveryMethod())) {
             if (memberAddress != null) {
                 //运费分组信息
                 Map<String, List<String>> freightGroups = freightTemplateGrouping(cartSkuVOS);
@@ -116,7 +116,7 @@ public void render(TradeDTO tradeDTO) {
                     }
                 }
             }
-        }else{
+        } else {
             //自提清空不配送商品
             tradeDTO.setNotSupportFreight(null);
         }

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && tradeDTO.getStoreAddress() == null) {            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if (tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))) {                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (!tradeDTO.getCartTypeEnum().equals(CartTypeEnum.VIRTUAL) && memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/wechat/util/WechatMpCodeUtil.java
Patch:
@@ -109,7 +109,7 @@ public String createCode(String page, String scene) {
                 shortLink = shortLinkService.queryShortLinks(shortLink).get(0);
             }
             String accessToken = wechatAccessTokenUtil.cgiAccessToken(ClientTypeEnum.WECHAT_MP);
-            Map<String, String> params = new HashMap<>(4);
+            Map<String, Object> params = new HashMap<>(4);
             params.put("page", page);
             params.put("scene", shortLink.getId());
             params.put("width", "280");

File: consumer/src/main/java/cn/lili/event/impl/MemberPointExecute.java
Patch:
@@ -15,6 +15,7 @@
 import cn.lili.modules.order.order.entity.dos.Order;
 import cn.lili.modules.order.order.entity.dto.OrderMessage;
 import cn.lili.modules.order.order.entity.enums.OrderPromotionTypeEnum;
+import cn.lili.modules.order.order.entity.enums.OrderStatusEnum;
 import cn.lili.modules.order.order.entity.enums.PayStatusEnum;
 import cn.lili.modules.order.order.service.OrderService;
 import cn.lili.modules.order.trade.entity.enums.AfterSaleStatusEnum;
@@ -134,9 +135,10 @@ public void orderChange(OrderMessage orderMessage) {
     @Override
     public void afterSaleStatusChange(AfterSale afterSale) {
         if (afterSale.getServiceStatus().equals(AfterSaleStatusEnum.COMPLETE.name())) {
+            Order order = orderService.getBySn(afterSale.getOrderSn());
             //获取积分设置
             PointSetting pointSetting = getPointSetting();
-            if (pointSetting.getConsumer() == 0) {
+            if (pointSetting.getConsumer() == 0 || !OrderStatusEnum.COMPLETED.name().equals(order.getOrderStatus())) {
                 return;
             }
             //计算扣除积分数量

File: consumer/src/main/java/cn/lili/event/impl/MemberPointExecute.java
Patch:
@@ -15,6 +15,7 @@
 import cn.lili.modules.order.order.entity.dos.Order;
 import cn.lili.modules.order.order.entity.dto.OrderMessage;
 import cn.lili.modules.order.order.entity.enums.OrderPromotionTypeEnum;
+import cn.lili.modules.order.order.entity.enums.OrderStatusEnum;
 import cn.lili.modules.order.order.entity.enums.PayStatusEnum;
 import cn.lili.modules.order.order.service.OrderService;
 import cn.lili.modules.order.trade.entity.enums.AfterSaleStatusEnum;
@@ -134,9 +135,10 @@ public void orderChange(OrderMessage orderMessage) {
     @Override
     public void afterSaleStatusChange(AfterSale afterSale) {
         if (afterSale.getServiceStatus().equals(AfterSaleStatusEnum.COMPLETE.name())) {
+            Order order = orderService.getBySn(afterSale.getOrderSn());
             //获取积分设置
             PointSetting pointSetting = getPointSetting();
-            if (pointSetting.getConsumer() == 0) {
+            if (pointSetting.getConsumer() == 0 || !OrderStatusEnum.COMPLETED.name().equals(order.getOrderStatus())) {
                 return;
             }
             //计算扣除积分数量

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -450,11 +450,11 @@ public void updateGoodsCommentNum(String goodsId, String skuId) {
         Goods goods = this.getById(goodsId);
 
         //修改商品评价数量
-        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).build());
+        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).status("OPEN").build());
         goods.setCommentNum((int) (commentNum));
 
         //好评数量
-        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).grade(EvaluationGradeEnum.GOOD.name()).build());
+        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).status("OPEN").grade(EvaluationGradeEnum.GOOD.name()).build());
         //好评率
         double grade = NumberUtil.mul(NumberUtil.div(highPraiseNum, goods.getCommentNum().doubleValue(), 2), 100);
         goods.setGrade(grade);

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -611,10 +611,10 @@ public void updateGoodsSkuCommentNum(String skuId) {
         GoodsSku goodsSku = this.getGoodsSkuByIdFromCache(skuId);
 
         //好评数量
-        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().grade(EvaluationGradeEnum.GOOD.name()).skuId(skuId).build());
+        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().status("OPEN").grade(EvaluationGradeEnum.GOOD.name()).skuId(skuId).build());
 
         //更新商品评价数量
-        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().skuId(skuId).build());
+        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().status("OPEN").skuId(skuId).build());
         goodsSku.setCommentNum((int) commentNum);
 
         //好评率

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -450,11 +450,11 @@ public void updateGoodsCommentNum(String goodsId, String skuId) {
         Goods goods = this.getById(goodsId);
 
         //修改商品评价数量
-        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).build());
+        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).status("OPEN").build());
         goods.setCommentNum((int) (commentNum));
 
         //好评数量
-        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).grade(EvaluationGradeEnum.GOOD.name()).build());
+        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().goodsId(goodsId).status("OPEN").grade(EvaluationGradeEnum.GOOD.name()).build());
         //好评率
         double grade = NumberUtil.mul(NumberUtil.div(highPraiseNum, goods.getCommentNum().doubleValue(), 2), 100);
         goods.setGrade(grade);

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -611,10 +611,10 @@ public void updateGoodsSkuCommentNum(String skuId) {
         GoodsSku goodsSku = this.getGoodsSkuByIdFromCache(skuId);
 
         //好评数量
-        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().grade(EvaluationGradeEnum.GOOD.name()).skuId(skuId).build());
+        long highPraiseNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().status("OPEN").grade(EvaluationGradeEnum.GOOD.name()).skuId(skuId).build());
 
         //更新商品评价数量
-        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().skuId(skuId).build());
+        long commentNum = memberEvaluationService.getEvaluationCount(EvaluationQueryParams.builder().status("OPEN").skuId(skuId).build());
         goodsSku.setCommentNum((int) commentNum);
 
         //好评率

File: consumer/src/main/java/cn/lili/timetask/handler/impl/promotion/PromotionEverydayExecute.java
Patch:
@@ -72,6 +72,7 @@ private void addSeckill() {
         log.info("生成秒杀活动设置：{}", seckillSetting);
         for (int i = 1; i <= SeckillService.PRE_CREATION; i++) {
             Seckill seckill = new Seckill(i, seckillSetting.getHours(), seckillSetting.getSeckillRule());
+            seckill.setApplyEndTime(null);
 
             //如果已经存在促销，则不再次保存
             if (seckillService.list(

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsService.java
Patch:
@@ -161,8 +161,9 @@ public interface GoodsService extends IService<Goods> {
      * 更新商品评价数量
      *
      * @param goodsId 商品ID
+     * @param skuId skuID
      */
-    void updateGoodsCommentNum(String goodsId);
+    void updateGoodsCommentNum(String goodsId, String skuId);
 
     /**
      * 更新商品的购买数量

File: consumer/src/main/java/cn/lili/timetask/handler/impl/promotion/PromotionEverydayExecute.java
Patch:
@@ -72,6 +72,7 @@ private void addSeckill() {
         log.info("生成秒杀活动设置：{}", seckillSetting);
         for (int i = 1; i <= SeckillService.PRE_CREATION; i++) {
             Seckill seckill = new Seckill(i, seckillSetting.getHours(), seckillSetting.getSeckillRule());
+            seckill.setApplyEndTime(null);
 
             //如果已经存在促销，则不再次保存
             if (seckillService.list(

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsService.java
Patch:
@@ -161,8 +161,9 @@ public interface GoodsService extends IService<Goods> {
      * 更新商品评价数量
      *
      * @param goodsId 商品ID
+     * @param skuId skuID
      */
-    void updateGoodsCommentNum(String goodsId);
+    void updateGoodsCommentNum(String goodsId, String skuId);
 
     /**
      * 更新商品的购买数量

File: buyer-api/src/main/java/cn/lili/controller/passport/MemberBuyerController.java
Patch:
@@ -28,7 +28,6 @@
 
 import javax.validation.constraints.NotNull;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
 
@@ -96,7 +95,7 @@ public Object loginWithSession(@PathVariable("token") String token, Integer befo
                 deferredResult.setResult(new ResponseEntity<>(ResultUtil.error(ResultCode.ERROR), HttpStatus.OK));
                 Thread.currentThread().interrupt();
             }
-        }, Executors.newCachedThreadPool());
+        });
         return deferredResult;
     }
 

File: buyer-api/src/main/java/cn/lili/controller/promotion/CouponBuyerController.java
Patch:
@@ -64,6 +64,9 @@ public class CouponBuyerController {
     @GetMapping("/activity")
     @ApiOperation(value = "自动领取优惠券")
     public ResultMessage<List<MemberCoupon>> activity() {
+        if (UserContext.getCurrentUser() == null) {
+            return ResultUtil.success();
+        }
         return ResultUtil.data(couponActivityService.trigger(
                 CouponActivityTrigger.builder()
                         .couponActivityTypeEnum(CouponActivityTypeEnum.AUTO_COUPON)

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -492,7 +492,7 @@ private void goodsBuyComplete(MessageExt messageExt) {
                 }
                 int buyCount = goodsSku.getBuyCount() + goodsCompleteMessage.getBuyNum();
                 goodsSku.setBuyCount(buyCount);
-                goodsSkuService.update(goodsSku);
+                goodsSkuService.updateGoodsSkuBuyCount(goodsSku.getId(), buyCount);
 
                 this.goodsIndexService.updateIndex(MapUtil.builder(new HashMap<String, Object>()).put("id", goodsCompleteMessage.getSkuId()).build(), MapUtil.builder(new HashMap<String, Object>()).put("buyCount", buyCount).build());
 

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsOperationDTO.java
Patch:
@@ -2,7 +2,6 @@
 
 import cn.lili.common.validation.EnumValue;
 import cn.lili.modules.goods.entity.enums.GoodsSalesModeEnum;
-import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
 import cn.lili.modules.goods.entity.enums.GoodsTypeEnum;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.*;
@@ -96,7 +95,8 @@ public class GoodsOperationDTO implements Serializable {
     @ApiModelProperty(value = "是否有规格", hidden = true)
     private String haveSpec;
 
-    @ApiModelProperty(value = "销售模式", required = true)
+    @ApiModelProperty(value = "商品单位", required = true)
+    @NotEmpty(message = "商品单位不能为空")
     private String goodsUnit;
 
     @ApiModelProperty(value = "商品描述")

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsSkuStockDTO.java
Patch:
@@ -12,6 +12,9 @@
 @Data
 public class GoodsSkuStockDTO {
 
+    @ApiModelProperty(value = "商品id")
+    private String goodsId;
+
     @ApiModelProperty(value = "商品skuId")
     private String skuId;
 

File: framework/src/main/java/cn/lili/modules/goods/mapper/GoodsSkuMapper.java
Patch:
@@ -2,6 +2,7 @@
 
 import cn.lili.modules.goods.entity.dos.GoodsSku;
 import cn.lili.modules.goods.entity.dto.GoodsSkuDTO;
+import cn.lili.modules.goods.entity.dto.GoodsSkuStockDTO;
 import com.baomidou.mybatisplus.core.conditions.Wrapper;
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
@@ -114,4 +115,6 @@ public interface GoodsSkuMapper extends BaseMapper<GoodsSku> {
     @Select("SELECT *,g.params as params FROM li_goods_sku gs inner join li_goods g on gs.goods_id = g.id ${ew.customSqlSegment}")
     IPage<GoodsSkuDTO> queryByParams(IPage<GoodsSkuDTO> page, @Param(Constants.WRAPPER) Wrapper<GoodsSkuDTO> queryWrapper);
 
+    @Select("SELECT id as sku_id, quantity, goods_id FROM li_goods_sku ${ew.customSqlSegment}")
+    List<GoodsSkuStockDTO> queryStocks(@Param(Constants.WRAPPER) Wrapper<GoodsSku> queryWrapper);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/goods/service/CategoryService.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import cn.lili.modules.goods.entity.dos.Category;
+import cn.lili.modules.goods.entity.dto.CategorySearchParams;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import com.baomidou.mybatisplus.extension.service.IService;
 
@@ -69,9 +70,10 @@ public interface CategoryService extends IService<Category> {
      * 查询所有的分类，父子关系
      * 数据库获取
      *
+     * @param categorySearchParams 查询参数
      * @return 所有的分类，父子关系
      */
-    List<CategoryVO> listAllChildren();
+    List<CategoryVO> listAllChildren(CategorySearchParams categorySearchParams);
 
     /**
      * 获取指定分类的分类名称

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/CategoryServiceImpl.java
Patch:
@@ -8,6 +8,7 @@
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.properties.RocketmqCustomProperties;
 import cn.lili.modules.goods.entity.dos.Category;
+import cn.lili.modules.goods.entity.dto.CategorySearchParams;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.goods.mapper.CategoryMapper;
 import cn.lili.modules.goods.service.CategoryBrandService;
@@ -165,10 +166,10 @@ public List<CategoryVO> listAllChildren(String parentId) {
     }
 
     @Override
-    public List<CategoryVO> listAllChildren() {
+    public List<CategoryVO> listAllChildren(CategorySearchParams categorySearchParams) {
 
         //获取全部分类
-        List<Category> list = this.list();
+        List<Category> list = this.list(categorySearchParams.queryWrapper());
 
         //构造分类树
         List<CategoryVO> categoryVOList = new ArrayList<>();

File: framework/src/main/java/cn/lili/modules/page/mapper/PageDataMapper.java
Patch:
@@ -34,7 +34,7 @@ public interface PageDataMapper extends BaseMapper<PageData> {
      * @return 页面数量
      */
     @Select("SELECT COUNT(id) FROM li_page_data ${ew.customSqlSegment}")
-    Integer getPageDataNum(@Param(Constants.WRAPPER) Wrapper<Integer> queryWrapper);
+    Integer getPageDataNum(@Param(Constants.WRAPPER) Wrapper<PageData> queryWrapper);
 
     /**
      * 获取页面数据分页

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PintuanServiceImpl.java
Patch:
@@ -213,6 +213,9 @@ public PromotionTypeEnum getPromotionType() {
      */
     private void setPintuanOrderInfo(List<Order> orders, PintuanShareVO pintuanShareVO, String skuId) {
         for (Order order : orders) {
+            if (pintuanShareVO.getPintuanMemberVOS().stream().anyMatch(i -> i.getMemberId().equals(order.getMemberId()))) {
+                continue;
+            }
             Member member = memberService.getById(order.getMemberId());
             PintuanMemberVO memberVO = new PintuanMemberVO(member);
             if (CharSequenceUtil.isEmpty(order.getParentOrderSn())) {

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -245,6 +245,9 @@ public void initPromotion(Seckill promotions) {
         if (promotions.getStartTime() != null && promotions.getEndTime() == null) {
             promotions.setEndTime(DateUtil.endOfDay(promotions.getStartTime()));
         }
+        if (promotions.getApplyEndTime() == null && promotions.getStartTime() != null) {
+            promotions.setApplyEndTime(promotions.getStartTime());
+        }
     }
 
     /**

File: framework/src/main/java/cn/lili/modules/promotion/tools/PromotionTools.java
Patch:
@@ -55,9 +55,9 @@ public static void checkPromotionTime(Date startTime, Date endTime) {
         DateTime now = DateUtil.date();
 
         //如果活动起始时间小于现在时间
-        if (now.after(startTime)) {
-            throw new ServiceException(ResultCode.PROMOTION_START_TIME_ERROR);
-        }
+//        if (now.after(startTime)) {
+//            throw new ServiceException(ResultCode.PROMOTION_START_TIME_ERROR);
+//        }
         //如果活动结束时间小于现在时间
         if (endTime != null && now.after(endTime)) {
             throw new ServiceException(ResultCode.PROMOTION_END_TIME_ERROR);

File: framework/src/main/java/cn/lili/modules/store/entity/dto/StoreSettingDTO.java
Patch:
@@ -3,8 +3,6 @@
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
 
-import javax.validation.constraints.NotEmpty;
-
 /**
  * 店铺设置
  *
@@ -29,7 +27,6 @@ public class StoreSettingDTO {
     @ApiModelProperty(value = "详细地址")
     private String storeAddressDetail;
 
-    @NotEmpty
     @ApiModelProperty(value = "经纬度")
     private String storeCenter;
 

File: manager-api/src/main/java/cn/lili/controller/goods/CategoryManagerController.java
Patch:
@@ -6,6 +6,7 @@
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.goods.entity.dos.Category;
+import cn.lili.modules.goods.entity.dto.CategorySearchParams;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.goods.service.CategoryService;
 import cn.lili.modules.goods.service.GoodsService;
@@ -54,8 +55,8 @@ public ResultMessage<List<Category>> list(@PathVariable String parentId) {
 
     @ApiOperation(value = "查询全部分类列表")
     @GetMapping(value = "/allChildren")
-    public ResultMessage<List<CategoryVO>> list() {
-        return ResultUtil.data(this.categoryService.listAllChildren());
+    public ResultMessage<List<CategoryVO>> list(CategorySearchParams categorySearchParams) {
+        return ResultUtil.data(this.categoryService.listAllChildren(categorySearchParams));
     }
 
     @PostMapping

File: seller-api/src/main/java/cn/lili/controller/goods/GoodsStoreController.java
Patch:
@@ -117,7 +117,7 @@ public ResultMessage<GoodsOperationDTO> save(@Valid @RequestBody GoodsOperationD
 
     @ApiOperation(value = "修改商品")
     @PutMapping(value = "/update/{goodsId}", consumes = "application/json", produces = "application/json")
-    public ResultMessage<GoodsOperationDTO> update(@RequestBody GoodsOperationDTO goodsOperationDTO, @PathVariable String goodsId) {
+    public ResultMessage<GoodsOperationDTO> update(@Valid @RequestBody GoodsOperationDTO goodsOperationDTO, @PathVariable String goodsId) {
         goodsService.editGoods(goodsOperationDTO, goodsId);
         return ResultUtil.success();
     }

File: buyer-api/src/main/java/cn/lili/controller/promotion/CouponBuyerController.java
Patch:
@@ -64,6 +64,9 @@ public class CouponBuyerController {
     @GetMapping("/activity")
     @ApiOperation(value = "自动领取优惠券")
     public ResultMessage<List<MemberCoupon>> activity() {
+        if (UserContext.getCurrentUser() == null) {
+            return ResultUtil.success();
+        }
         return ResultUtil.data(couponActivityService.trigger(
                 CouponActivityTrigger.builder()
                         .couponActivityTypeEnum(CouponActivityTypeEnum.AUTO_COUPON)

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -245,6 +245,9 @@ public void initPromotion(Seckill promotions) {
         if (promotions.getStartTime() != null && promotions.getEndTime() == null) {
             promotions.setEndTime(DateUtil.endOfDay(promotions.getStartTime()));
         }
+        if (promotions.getApplyEndTime() == null && promotions.getStartTime() != null) {
+            promotions.setApplyEndTime(promotions.getStartTime());
+        }
     }
 
     /**

File: framework/src/main/java/cn/lili/modules/page/mapper/PageDataMapper.java
Patch:
@@ -34,7 +34,7 @@ public interface PageDataMapper extends BaseMapper<PageData> {
      * @return 页面数量
      */
     @Select("SELECT COUNT(id) FROM li_page_data ${ew.customSqlSegment}")
-    Integer getPageDataNum(@Param(Constants.WRAPPER) Wrapper<Integer> queryWrapper);
+    Integer getPageDataNum(@Param(Constants.WRAPPER) Wrapper<PageData> queryWrapper);
 
     /**
      * 获取页面数据分页

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -492,7 +492,7 @@ private void goodsBuyComplete(MessageExt messageExt) {
                 }
                 int buyCount = goodsSku.getBuyCount() + goodsCompleteMessage.getBuyNum();
                 goodsSku.setBuyCount(buyCount);
-                goodsSkuService.update(goodsSku);
+                goodsSkuService.updateGoodsSkuBuyCount(goodsSku.getId(), buyCount);
 
                 this.goodsIndexService.updateIndex(MapUtil.builder(new HashMap<String, Object>()).put("id", goodsCompleteMessage.getSkuId()).build(), MapUtil.builder(new HashMap<String, Object>()).put("buyCount", buyCount).build());
 

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsSkuStockDTO.java
Patch:
@@ -12,6 +12,9 @@
 @Data
 public class GoodsSkuStockDTO {
 
+    @ApiModelProperty(value = "商品id")
+    private String goodsId;
+
     @ApiModelProperty(value = "商品skuId")
     private String skuId;
 

File: framework/src/main/java/cn/lili/modules/goods/mapper/GoodsSkuMapper.java
Patch:
@@ -2,6 +2,7 @@
 
 import cn.lili.modules.goods.entity.dos.GoodsSku;
 import cn.lili.modules.goods.entity.dto.GoodsSkuDTO;
+import cn.lili.modules.goods.entity.dto.GoodsSkuStockDTO;
 import com.baomidou.mybatisplus.core.conditions.Wrapper;
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
@@ -114,4 +115,6 @@ public interface GoodsSkuMapper extends BaseMapper<GoodsSku> {
     @Select("SELECT *,g.params as params FROM li_goods_sku gs inner join li_goods g on gs.goods_id = g.id ${ew.customSqlSegment}")
     IPage<GoodsSkuDTO> queryByParams(IPage<GoodsSkuDTO> page, @Param(Constants.WRAPPER) Wrapper<GoodsSkuDTO> queryWrapper);
 
+    @Select("SELECT id as sku_id, quantity, goods_id FROM li_goods_sku ${ew.customSqlSegment}")
+    List<GoodsSkuStockDTO> queryStocks(@Param(Constants.WRAPPER) Wrapper<GoodsSku> queryWrapper);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponFrequencyEnum.java
Patch:
@@ -24,6 +24,9 @@ public String description() {
     }
 
     public static boolean exist(String name) {
+        if (name == null) {
+            return false;
+        }
         try {
             CouponFrequencyEnum.valueOf(name);
         } catch (IllegalArgumentException e) {

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/StoreFlowStatisticsServiceImpl.java
Patch:
@@ -134,7 +134,7 @@ private void initOrder(Date[] dates, OrderOverviewVO orderOverviewVO, Statistics
         //查询下单人数的sql
         queryWrapper.select("count(DISTINCT member_id) AS num");
         //获取查询结果
-        Map memberNum = this.getMap(queryWrapper);
+        Map memberNum = orderStatisticsService.getMap(queryWrapper);
         //写入下单人数
         orderOverviewVO.setOrderMemberNum(memberNum != null && memberNum.containsKey("num") ? (Long) memberNum.get("num") : 0L);
     }

File: framework/src/main/java/cn/lili/modules/goods/service/CategoryService.java
Patch:
@@ -2,6 +2,7 @@
 
 
 import cn.lili.modules.goods.entity.dos.Category;
+import cn.lili.modules.goods.entity.dto.CategorySearchParams;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import com.baomidou.mybatisplus.extension.service.IService;
 
@@ -69,9 +70,10 @@ public interface CategoryService extends IService<Category> {
      * 查询所有的分类，父子关系
      * 数据库获取
      *
+     * @param categorySearchParams 查询参数
      * @return 所有的分类，父子关系
      */
-    List<CategoryVO> listAllChildren();
+    List<CategoryVO> listAllChildren(CategorySearchParams categorySearchParams);
 
     /**
      * 获取指定分类的分类名称

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/CategoryServiceImpl.java
Patch:
@@ -8,6 +8,7 @@
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.properties.RocketmqCustomProperties;
 import cn.lili.modules.goods.entity.dos.Category;
+import cn.lili.modules.goods.entity.dto.CategorySearchParams;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.goods.mapper.CategoryMapper;
 import cn.lili.modules.goods.service.CategoryBrandService;
@@ -165,10 +166,10 @@ public List<CategoryVO> listAllChildren(String parentId) {
     }
 
     @Override
-    public List<CategoryVO> listAllChildren() {
+    public List<CategoryVO> listAllChildren(CategorySearchParams categorySearchParams) {
 
         //获取全部分类
-        List<Category> list = this.list();
+        List<Category> list = this.list(categorySearchParams.queryWrapper());
 
         //构造分类树
         List<CategoryVO> categoryVOList = new ArrayList<>();

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PintuanServiceImpl.java
Patch:
@@ -213,6 +213,9 @@ public PromotionTypeEnum getPromotionType() {
      */
     private void setPintuanOrderInfo(List<Order> orders, PintuanShareVO pintuanShareVO, String skuId) {
         for (Order order : orders) {
+            if (pintuanShareVO.getPintuanMemberVOS().stream().anyMatch(i -> i.getMemberId().equals(order.getMemberId()))) {
+                continue;
+            }
             Member member = memberService.getById(order.getMemberId());
             PintuanMemberVO memberVO = new PintuanMemberVO(member);
             if (CharSequenceUtil.isEmpty(order.getParentOrderSn())) {

File: framework/src/main/java/cn/lili/modules/store/entity/dto/StoreSettingDTO.java
Patch:
@@ -3,8 +3,6 @@
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
 
-import javax.validation.constraints.NotEmpty;
-
 /**
  * 店铺设置
  *
@@ -29,7 +27,6 @@ public class StoreSettingDTO {
     @ApiModelProperty(value = "详细地址")
     private String storeAddressDetail;
 
-    @NotEmpty
     @ApiModelProperty(value = "经纬度")
     private String storeCenter;
 

File: manager-api/src/main/java/cn/lili/controller/goods/CategoryManagerController.java
Patch:
@@ -6,6 +6,7 @@
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.goods.entity.dos.Category;
+import cn.lili.modules.goods.entity.dto.CategorySearchParams;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.goods.service.CategoryService;
 import cn.lili.modules.goods.service.GoodsService;
@@ -54,8 +55,8 @@ public ResultMessage<List<Category>> list(@PathVariable String parentId) {
 
     @ApiOperation(value = "查询全部分类列表")
     @GetMapping(value = "/allChildren")
-    public ResultMessage<List<CategoryVO>> list() {
-        return ResultUtil.data(this.categoryService.listAllChildren());
+    public ResultMessage<List<CategoryVO>> list(CategorySearchParams categorySearchParams) {
+        return ResultUtil.data(this.categoryService.listAllChildren(categorySearchParams));
     }
 
     @PostMapping

File: seller-api/src/main/java/cn/lili/controller/goods/GoodsStoreController.java
Patch:
@@ -117,7 +117,7 @@ public ResultMessage<GoodsOperationDTO> save(@Valid @RequestBody GoodsOperationD
 
     @ApiOperation(value = "修改商品")
     @PutMapping(value = "/update/{goodsId}", consumes = "application/json", produces = "application/json")
-    public ResultMessage<GoodsOperationDTO> update(@RequestBody GoodsOperationDTO goodsOperationDTO, @PathVariable String goodsId) {
+    public ResultMessage<GoodsOperationDTO> update(@Valid @RequestBody GoodsOperationDTO goodsOperationDTO, @PathVariable String goodsId) {
         goodsService.editGoods(goodsOperationDTO, goodsId);
         return ResultUtil.success();
     }

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsOperationDTO.java
Patch:
@@ -2,7 +2,6 @@
 
 import cn.lili.common.validation.EnumValue;
 import cn.lili.modules.goods.entity.enums.GoodsSalesModeEnum;
-import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
 import cn.lili.modules.goods.entity.enums.GoodsTypeEnum;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.*;
@@ -96,7 +95,8 @@ public class GoodsOperationDTO implements Serializable {
     @ApiModelProperty(value = "是否有规格", hidden = true)
     private String haveSpec;
 
-    @ApiModelProperty(value = "销售模式", required = true)
+    @ApiModelProperty(value = "商品单位", required = true)
+    @NotEmpty(message = "商品单位不能为空")
     private String goodsUnit;
 
     @ApiModelProperty(value = "商品描述")

File: framework/src/main/java/cn/lili/modules/promotion/tools/PromotionTools.java
Patch:
@@ -55,9 +55,9 @@ public static void checkPromotionTime(Date startTime, Date endTime) {
         DateTime now = DateUtil.date();
 
         //如果活动起始时间小于现在时间
-        if (now.after(startTime)) {
-            throw new ServiceException(ResultCode.PROMOTION_START_TIME_ERROR);
-        }
+//        if (now.after(startTime)) {
+//            throw new ServiceException(ResultCode.PROMOTION_START_TIME_ERROR);
+//        }
         //如果活动结束时间小于现在时间
         if (endTime != null && now.after(endTime)) {
             throw new ServiceException(ResultCode.PROMOTION_END_TIME_ERROR);

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsGalleryServiceImpl.java
Patch:
@@ -101,7 +101,7 @@ private String getUrl(String url, Integer width, Integer height) {
         switch (OssEnum.valueOf(ossSetting.getType())) {
             case MINIO:
                 //缩略图全路径
-                return url + "?x-oss-process=style/" + width + "X" + height;
+                return url;
             case ALI_OSS:
                 //缩略图全路径
                 return url + "?x-oss-process=style/" + width + "X" + height;

File: buyer-api/src/main/java/cn/lili/controller/passport/MemberBuyerController.java
Patch:
@@ -28,7 +28,6 @@
 
 import javax.validation.constraints.NotNull;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
 
@@ -96,7 +95,7 @@ public Object loginWithSession(@PathVariable("token") String token, Integer befo
                 deferredResult.setResult(new ResponseEntity<>(ResultUtil.error(ResultCode.ERROR), HttpStatus.OK));
                 Thread.currentThread().interrupt();
             }
-        }, Executors.newCachedThreadPool());
+        });
         return deferredResult;
     }
 

File: framework/src/main/java/cn/lili/modules/connect/serviceimpl/ConnectServiceImpl.java
Patch:
@@ -276,7 +276,7 @@ private Token unionLoginCallback(ConnectAuthUser authUser, boolean longTerm) {
             if(member==null){
                 LambdaQueryWrapper<Connect> queryWrapper = new LambdaQueryWrapper<Connect>();
                 //使用UnionId登录
-                if (StrUtil.isNotBlank(authUser.getToken().getUnionId())) {
+                if (authUser.getToken() != null && StrUtil.isNotBlank(authUser.getToken().getUnionId())) {
                     queryWrapper.eq(Connect::getUnionId, authUser.getToken().getUnionId())
                             .eq(Connect::getUnionType, authUser.getSource());
                 } else {

File: framework/src/main/java/cn/lili/modules/connect/serviceimpl/ConnectServiceImpl.java
Patch:
@@ -373,7 +373,7 @@ public JSONObject getUserInfo(String encryptedData, String sessionKey, String iv
             }
             //初始化
             Security.addProvider(new BouncyCastleProvider());
-            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding", "BC");
+            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS7Padding");
             SecretKeySpec spec = new SecretKeySpec(keyByte, "AES");
             AlgorithmParameters parameters = AlgorithmParameters.getInstance("AES");
             parameters.init(new IvParameterSpec(ivByte));

File: consumer/src/main/java/cn/lili/event/impl/NoticeMessageExecute.java
Patch:
@@ -58,7 +58,7 @@ public void orderChange(OrderMessage orderMessage) {
         OrderDetailVO orderDetailVO = orderService.queryDetail(orderMessage.getOrderSn());
         NoticeMessageDTO noticeMessageDTO = new NoticeMessageDTO();
         //如果订单状态不为空
-        if (orderDetailVO != null) {
+        if (orderDetailVO != null && orderDetailVO.getOrderItems() != null && !orderDetailVO.getOrderItems().isEmpty()) {
             Map<String, String> params = new HashMap<>(2);
             switch (orderMessage.getNewStatus()) {
                 //如果订单新的状态为已取消 则发送取消订单站内信

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/CustomWordsServiceImpl.java
Patch:
@@ -92,13 +92,15 @@ public boolean deleteCustomWords(String id) {
     }
 
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public boolean deleteBathByName(List<String> names) {
         LambdaQueryWrapper<CustomWords> queryWrapper = new LambdaQueryWrapper<>();
         queryWrapper.in(CustomWords::getName, names);
         return this.remove(queryWrapper);
     }
 
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public long insertBatchCustomWords(List<CustomWords> customWordsList) {
         return this.baseMapper.insertBatchSomeColumn(customWordsList);
     }

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -455,10 +455,8 @@ public void updateBulkIndex(List<EsGoodsIndex> goodsIndices) {
         this.client.bulkAsync(request, RequestOptions.DEFAULT, new ActionListener<BulkResponse>() {
             @Override
             public void onResponse(BulkResponse bulkItemResponses) {
+                // 判断索引如果不存在的处理
                 log.info("批量更新商品索引结果：{}", bulkItemResponses.buildFailureMessage());
-                if (bulkItemResponses.hasFailures() && bulkItemResponses.getItems().length > 0) {
-                    throw new RetryException("批量更新商品索引失败，" + bulkItemResponses.buildFailureMessage());
-                }
             }
 
             @Override

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/CustomWordsServiceImpl.java
Patch:
@@ -92,13 +92,15 @@ public boolean deleteCustomWords(String id) {
     }
 
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public boolean deleteBathByName(List<String> names) {
         LambdaQueryWrapper<CustomWords> queryWrapper = new LambdaQueryWrapper<>();
         queryWrapper.in(CustomWords::getName, names);
         return this.remove(queryWrapper);
     }
 
     @Override
+    @Transactional(rollbackFor = Exception.class)
     public long insertBatchCustomWords(List<CustomWords> customWordsList) {
         return this.baseMapper.insertBatchSomeColumn(customWordsList);
     }

File: consumer/src/main/java/cn/lili/event/impl/NoticeMessageExecute.java
Patch:
@@ -58,7 +58,7 @@ public void orderChange(OrderMessage orderMessage) {
         OrderDetailVO orderDetailVO = orderService.queryDetail(orderMessage.getOrderSn());
         NoticeMessageDTO noticeMessageDTO = new NoticeMessageDTO();
         //如果订单状态不为空
-        if (orderDetailVO != null) {
+        if (orderDetailVO != null && orderDetailVO.getOrderItems() != null && !orderDetailVO.getOrderItems().isEmpty()) {
             Map<String, String> params = new HashMap<>(2);
             switch (orderMessage.getNewStatus()) {
                 //如果订单新的状态为已取消 则发送取消订单站内信

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -455,10 +455,8 @@ public void updateBulkIndex(List<EsGoodsIndex> goodsIndices) {
         this.client.bulkAsync(request, RequestOptions.DEFAULT, new ActionListener<BulkResponse>() {
             @Override
             public void onResponse(BulkResponse bulkItemResponses) {
+                // 判断索引如果不存在的处理
                 log.info("批量更新商品索引结果：{}", bulkItemResponses.buildFailureMessage());
-                if (bulkItemResponses.hasFailures() && bulkItemResponses.getItems().length > 0) {
-                    throw new RetryException("批量更新商品索引失败，" + bulkItemResponses.buildFailureMessage());
-                }
             }
 
             @Override

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -455,8 +455,9 @@ public void updateBulkIndex(List<EsGoodsIndex> goodsIndices) {
         this.client.bulkAsync(request, RequestOptions.DEFAULT, new ActionListener<BulkResponse>() {
             @Override
             public void onResponse(BulkResponse bulkItemResponses) {
-                if (bulkItemResponses.hasFailures()) {
-                    throw new RetryException("批量更新商品索引失败，es内容版本冲突");
+                log.info("批量更新商品索引结果：{}", bulkItemResponses.buildFailureMessage());
+                if (bulkItemResponses.hasFailures() && bulkItemResponses.getItems().length > 0) {
+                    throw new RetryException("批量更新商品索引失败，" + bulkItemResponses.buildFailureMessage());
                 }
             }
 

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -455,8 +455,9 @@ public void updateBulkIndex(List<EsGoodsIndex> goodsIndices) {
         this.client.bulkAsync(request, RequestOptions.DEFAULT, new ActionListener<BulkResponse>() {
             @Override
             public void onResponse(BulkResponse bulkItemResponses) {
-                if (bulkItemResponses.hasFailures()) {
-                    throw new RetryException("批量更新商品索引失败，es内容版本冲突");
+                log.info("批量更新商品索引结果：{}", bulkItemResponses.buildFailureMessage());
+                if (bulkItemResponses.hasFailures() && bulkItemResponses.getItems().length > 0) {
+                    throw new RetryException("批量更新商品索引失败，" + bulkItemResponses.buildFailureMessage());
                 }
             }
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -153,7 +153,7 @@ public boolean updatePromotions(Seckill promotions) {
         this.checkPromotions(promotions);
         //如果申请结束时间在当前时间之前
         if (promotions.getApplyEndTime().before(new Date()) || promotions.getApplyEndTime().after(promotions.getStartTime())) {
-            throw new ServiceException(ResultCode.STORE_NAME_EXIST_ERROR);
+            throw new ServiceException(ResultCode.APPLY_END_TIME_ERROR);
         }
         boolean result = this.updateById(promotions);
         seckillApplyService.updateSeckillApplyTime(promotions);

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/GoodsSku.java
Patch:
@@ -189,7 +189,7 @@ public GoodsSku(Goods goods) {
         this.goodsId = goods.getId();
         this.goodsName = goods.getGoodsName();
         this.goodsType = goods.getGoodsType();
-
+        this.goodsVideo = goods.getGoodsVideo();
         this.selfOperated = goods.getSelfOperated();
         this.sellingPoint = goods.getSellingPoint();
         this.categoryPath = goods.getCategoryPath();

File: common-api/src/main/java/cn/lili/controller/common/UploadController.java
Patch:
@@ -75,7 +75,7 @@ public ResultMessage<Object> upload(MultipartFile file,
         }
 
 
-        if (!CharSequenceUtil.containsAny(file.getContentType().toLowerCase(), "image")) {
+        if (!CharSequenceUtil.containsAny(Objects.requireNonNull(file.getContentType()).toLowerCase(), "image", "video")) {
             throw new ServiceException(ResultCode.FILE_TYPE_NOT_SUPPORT);
         }
 

File: common-api/src/main/java/cn/lili/controller/common/UploadController.java
Patch:
@@ -75,7 +75,7 @@ public ResultMessage<Object> upload(MultipartFile file,
         }
 
 
-        if (!CharSequenceUtil.containsAny(file.getContentType().toLowerCase(), "image")) {
+        if (!CharSequenceUtil.containsAny(Objects.requireNonNull(file.getContentType()).toLowerCase(), "image", "video")) {
             throw new ServiceException(ResultCode.FILE_TYPE_NOT_SUPPORT);
         }
 

File: framework/src/main/java/cn/lili/modules/file/plugin/impl/TencentFilePlugin.java
Patch:
@@ -14,7 +14,6 @@
 import com.qcloud.cos.http.HttpProtocol;
 import com.qcloud.cos.model.DeleteObjectsRequest;
 import com.qcloud.cos.model.ObjectMetadata;
-import com.qcloud.cos.model.PutObjectRequest;
 import com.qcloud.cos.region.Region;
 import lombok.extern.slf4j.Slf4j;
 
@@ -66,7 +65,6 @@ private COSClient getCOSClient() {
      * @return
      */
     private String getUrlPrefix() {
-//        return "https://" + ossSetting.getTencentCOSBucket() + "." + ossSetting.getTencentCOSEndPoint() + "/";
         return "https://" + ossSetting.getTencentCOSBucket() + ".cos" + ossSetting.getTencentCOSEndPoint() + ".myqcloud.com/";
     }
 
@@ -108,7 +106,7 @@ public void deleteFile(List<String> keys) {
 
         try {
             List<DeleteObjectsRequest.KeyVersion> delObjects = new ArrayList<>();
-            for (String key:keys) {
+            for (String key : keys) {
                 delObjects.add(new DeleteObjectsRequest.KeyVersion(key));
             }
             cosClient.deleteObjects(new DeleteObjectsRequest(ossSetting.getTencentCOSBucket()).withKeys(delObjects));

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsGalleryServiceImpl.java
Patch:
@@ -2,7 +2,6 @@
 
 import cn.hutool.json.JSONUtil;
 import cn.lili.modules.file.entity.enums.OssEnum;
-import cn.lili.modules.file.util.FileUtil;
 import cn.lili.modules.goods.entity.dos.GoodsGallery;
 import cn.lili.modules.goods.mapper.GoodsGalleryMapper;
 import cn.lili.modules.goods.service.GoodsGalleryService;
@@ -108,7 +107,7 @@ private String getUrl(String url, Integer width, Integer height) {
                 return url + "?x-oss-process=style/" + width + "X" + height;
             case HUAWEI_OBS:
                 //缩略图全路径
-                return url + "?image/resize,m_fixed,h_"+height+",w_"+width;
+                return url + "?image/resize,m_fixed,h_" + height + ",w_" + width;
             case TENCENT_COS:
                 //缩略图全路径
                 return url + "?imageMogr2/thumbnail/" + width + "x" + height;

File: framework/src/main/java/cn/lili/modules/logistics/plugin/kdniao/KdniaoPlugin.java
Patch:
@@ -112,9 +112,9 @@ public Traces pollMapTrack(Logistics logistics, String expNo, String phone, Stri
     }
 
     @Override
-    public Map<String,Object> labelOrder(LabelOrderDTO labelOrderDTO) {
+    public Map<String, Object> labelOrder(LabelOrderDTO labelOrderDTO) {
         try {
-            Map<String,Object> resultMap = new HashMap();
+            Map<String, Object> resultMap = new HashMap();
             //订单
             Order order = labelOrderDTO.getOrder();
             //订单货物
@@ -206,7 +206,7 @@ public Map<String,Object> labelOrder(LabelOrderDTO labelOrderDTO) {
             }
 
             JSONObject orderJson = JSONObject.parseObject(obj.getString("Order"));
-            resultMap.put("printTemplate",obj.getString("PrintTemplate"));
+            resultMap.put("printTemplate", obj.getString("PrintTemplate"));
             return resultMap;
         } catch (Exception e) {
             e.printStackTrace();

File: framework/src/main/java/cn/lili/modules/logistics/plugin/kuaidi100/Kuaidi100Plugin.java
Patch:
@@ -122,7 +122,7 @@ public Traces pollMapTrack(Logistics logistics, String expNo, String phone, Stri
     }
 
     @Override
-    public Map<String,Object> labelOrder(LabelOrderDTO labelOrderDTO) {
+    public Map<String, Object> labelOrder(LabelOrderDTO labelOrderDTO) {
         try {
             //订单
             Order order = labelOrderDTO.getOrder();

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -511,6 +511,7 @@ public enum ResultCode {
     CONNECT_NOT_EXIST(90000, "登录方式不存在！"),
     ELASTICSEARCH_INDEX_INIT_ERROR(90003, "索引初始化失败！"),
     PURCHASE_ORDER_DEADLINE_ERROR(90004, "供求单，已超过报名截止时间"),
+    USER_ADD_ERROR(90005, "用户添加失败"),
     INDEX_BUILDING(90005, "索引正在生成");
 
 

File: manager-api/src/main/java/cn/lili/controller/passport/AdminUserManagerController.java
Patch:
@@ -168,10 +168,11 @@ public ResultMessage<Object> register(@Valid AdminUserDTO adminUser,
                 throw new ServiceException(ResultCode.PERMISSION_BEYOND_TEN);
             }
             adminUserService.saveAdminUser(adminUser, roles);
+            return ResultUtil.success();
         } catch (Exception e) {
             log.error("添加用户错误", e);
+            return ResultUtil.error(ResultCode.USER_ADD_ERROR);
         }
-        return ResultUtil.success();
     }
 
     @PutMapping(value = "/enable/{userId}")

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -511,6 +511,7 @@ public enum ResultCode {
     CONNECT_NOT_EXIST(90000, "登录方式不存在！"),
     ELASTICSEARCH_INDEX_INIT_ERROR(90003, "索引初始化失败！"),
     PURCHASE_ORDER_DEADLINE_ERROR(90004, "供求单，已超过报名截止时间"),
+    USER_ADD_ERROR(90005, "用户添加失败"),
     INDEX_BUILDING(90005, "索引正在生成");
 
 

File: manager-api/src/main/java/cn/lili/controller/passport/AdminUserManagerController.java
Patch:
@@ -168,10 +168,11 @@ public ResultMessage<Object> register(@Valid AdminUserDTO adminUser,
                 throw new ServiceException(ResultCode.PERMISSION_BEYOND_TEN);
             }
             adminUserService.saveAdminUser(adminUser, roles);
+            return ResultUtil.success();
         } catch (Exception e) {
             log.error("添加用户错误", e);
+            return ResultUtil.error(ResultCode.USER_ADD_ERROR);
         }
-        return ResultUtil.success();
     }
 
     @PutMapping(value = "/enable/{userId}")

File: framework/src/main/java/cn/lili/modules/order/order/service/OrderItemService.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.modules.order.order.service;
 
-import cn.hutool.core.date.DateTime;
 import cn.lili.modules.order.order.entity.dos.OrderItem;
+import cn.lili.modules.order.order.entity.dto.OrderItemOperationDTO;
 import cn.lili.modules.order.order.entity.enums.CommentStatusEnum;
 import cn.lili.modules.order.order.entity.enums.OrderComplaintStatusEnum;
 import cn.lili.modules.order.order.entity.enums.OrderItemAfterSaleStatusEnum;
@@ -68,5 +68,5 @@ public interface OrderItemService extends IService<OrderItem> {
      */
     OrderItem getByOrderSnAndSkuId(String orderSn, String skuId);
 
-    List<OrderItem> waitOperationOrderItem(DateTime receiveTime, String commentStatus);
+    List<OrderItem> waitOperationOrderItem(OrderItemOperationDTO orderItemOperationDTO);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/service/OrderItemService.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.modules.order.order.service;
 
-import cn.hutool.core.date.DateTime;
 import cn.lili.modules.order.order.entity.dos.OrderItem;
+import cn.lili.modules.order.order.entity.dto.OrderItemOperationDTO;
 import cn.lili.modules.order.order.entity.enums.CommentStatusEnum;
 import cn.lili.modules.order.order.entity.enums.OrderComplaintStatusEnum;
 import cn.lili.modules.order.order.entity.enums.OrderItemAfterSaleStatusEnum;
@@ -68,5 +68,5 @@ public interface OrderItemService extends IService<OrderItem> {
      */
     OrderItem getByOrderSnAndSkuId(String orderSn, String skuId);
 
-    List<OrderItem> waitOperationOrderItem(DateTime receiveTime, String commentStatus);
+    List<OrderItem> waitOperationOrderItem(OrderItemOperationDTO orderItemOperationDTO);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/member/mapper/FootprintMapper.java
Patch:
@@ -3,7 +3,6 @@
 import cn.lili.modules.member.entity.dos.FootPrint;
 import com.baomidou.mybatisplus.core.mapper.BaseMapper;
 import org.apache.ibatis.annotations.Delete;
-import org.springframework.transaction.annotation.Transactional;
 
 /**
  * 浏览历史数据处理层
@@ -17,7 +16,6 @@ public interface FootprintMapper extends BaseMapper<FootPrint> {
      *
      * @param memberId 会员ID
      */
-    @Transactional(rollbackFor = Exception.class)
     @Delete("DELETE li_foot_print " +
             "FROM li_foot_print " +
             "LEFT JOIN ( " +

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/FootprintServiceImpl.java
Patch:
@@ -16,7 +16,6 @@
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
 
 import java.util.Date;
 import java.util.List;
@@ -39,7 +38,6 @@ public class FootprintServiceImpl extends ServiceImpl<FootprintMapper, FootPrint
     private GoodsSkuService goodsSkuService;
 
     @Override
-    @Transactional(rollbackFor = Exception.class)
     public FootPrint saveFootprint(FootPrint footPrint) {
         LambdaQueryWrapper<FootPrint> queryWrapper = Wrappers.lambdaQuery();
         queryWrapper.eq(FootPrint::getMemberId, footPrint.getMemberId());

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/StoreMenuServiceImpl.java
Patch:
@@ -86,9 +86,9 @@ public List<StoreMenuVO> findUserTree() {
 
     @Override
     public List<StoreMenu> findUserList(String userId, String clerkId) {
-        String cacheKey = CachePrefix.STORE_USER_MENU.getPrefix() + clerkId;
+        String cacheKey = CachePrefix.STORE_USER_MENU.getPrefix() + userId;
         List<StoreMenu> menuList = (List<StoreMenu>) cache.get(cacheKey);
-        if (menuList == null) {
+        if (menuList == null || menuList.isEmpty()) {
             menuList = this.baseMapper.findByUserId(clerkId);
             cache.put(cacheKey, menuList);
         }

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/StoreMenuServiceImpl.java
Patch:
@@ -86,9 +86,9 @@ public List<StoreMenuVO> findUserTree() {
 
     @Override
     public List<StoreMenu> findUserList(String userId, String clerkId) {
-        String cacheKey = CachePrefix.STORE_USER_MENU.getPrefix() + clerkId;
+        String cacheKey = CachePrefix.STORE_USER_MENU.getPrefix() + userId;
         List<StoreMenu> menuList = (List<StoreMenu>) cache.get(cacheKey);
-        if (menuList == null) {
+        if (menuList == null || menuList.isEmpty()) {
             menuList = this.baseMapper.findByUserId(clerkId);
             cache.put(cacheKey, menuList);
         }

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsService.java
Patch:
@@ -190,4 +190,7 @@ public interface GoodsService extends IService<Goods> {
      * @param categoryId 分类ID
      */
     void categoryGoodsName(String categoryId);
+
+
+    void addGoodsCommentNum(Integer commentNum, String goodsId);
 }

File: framework/src/main/java/cn/lili/modules/member/token/StoreTokenGenerate.java
Patch:
@@ -57,7 +57,7 @@ public Token createToken(Member member, Boolean longTerm) {
         if (clerk == null) {
             throw new ServiceException(ResultCode.CLERK_NOT_FOUND_ERROR);
         }
-        if (!clerk.getStatus()) {
+        if (Boolean.FALSE.equals(clerk.getStatus())) {
             throw new ServiceException(ResultCode.CLERK_DISABLED_ERROR);
         }
         //获取当前用户权限
@@ -96,7 +96,7 @@ public Token refreshToken(String refreshToken) {
      * @param userMenuVOList
      * @return
      */
-    private Map<String, List<String>> permissionList(List<StoreUserMenuVO> userMenuVOList) {
+    public Map<String, List<String>> permissionList(List<StoreUserMenuVO> userMenuVOList) {
         Map<String, List<String>> permission = new HashMap<>(2);
 
         List<String> superPermissions = new ArrayList<>();

File: framework/src/main/java/cn/lili/modules/order/order/service/OrderItemService.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.order.order.service;
 
+import cn.hutool.core.date.DateTime;
 import cn.lili.modules.order.order.entity.dos.OrderItem;
 import cn.lili.modules.order.order.entity.enums.CommentStatusEnum;
 import cn.lili.modules.order.order.entity.enums.OrderComplaintStatusEnum;
@@ -66,4 +67,6 @@ public interface OrderItemService extends IService<OrderItem> {
      * @return 子订单
      */
     OrderItem getByOrderSnAndSkuId(String orderSn, String skuId);
+
+    List<OrderItem> waitOperationOrderItem(DateTime receiveTime, String commentStatus);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/service/TradeService.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.modules.order.order.service;
 
-import cn.lili.modules.order.order.entity.dos.Trade;
 import cn.lili.modules.order.cart.entity.dto.TradeDTO;
+import cn.lili.modules.order.order.entity.dos.Trade;
 import com.baomidou.mybatisplus.extension.service.IService;
 
 /**
@@ -44,4 +44,6 @@ public interface TradeService extends IService<Trade> {
      */
     void payTrade(String tradeSn, String paymentName, String receivableNo);
 
+    void updateTradePrice(String tradeSn);
+
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: seller-api/src/main/java/cn/lili/security/StoreAuthenticationFilter.java
Patch:
@@ -123,7 +123,7 @@ private void customAuthentication(HttpServletRequest request, HttpServletRespons
 
 
         //如果不是超级管理员， 则鉴权
-        if (!authUser.getIsSuper()) {
+        if (Boolean.FALSE.equals(authUser.getIsSuper())) {
             //获取缓存中的权限
             Map<String, List<String>> permission =
                     (Map<String, List<String>>) cache.get(CachePrefix.PERMISSION_LIST.getPrefix(UserEnums.STORE) + authUser.getId());

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsService.java
Patch:
@@ -190,4 +190,7 @@ public interface GoodsService extends IService<Goods> {
      * @param categoryId 分类ID
      */
     void categoryGoodsName(String categoryId);
+
+
+    void addGoodsCommentNum(Integer commentNum, String goodsId);
 }

File: framework/src/main/java/cn/lili/modules/member/token/StoreTokenGenerate.java
Patch:
@@ -57,7 +57,7 @@ public Token createToken(Member member, Boolean longTerm) {
         if (clerk == null) {
             throw new ServiceException(ResultCode.CLERK_NOT_FOUND_ERROR);
         }
-        if (!clerk.getStatus()) {
+        if (Boolean.FALSE.equals(clerk.getStatus())) {
             throw new ServiceException(ResultCode.CLERK_DISABLED_ERROR);
         }
         //获取当前用户权限
@@ -96,7 +96,7 @@ public Token refreshToken(String refreshToken) {
      * @param userMenuVOList
      * @return
      */
-    private Map<String, List<String>> permissionList(List<StoreUserMenuVO> userMenuVOList) {
+    public Map<String, List<String>> permissionList(List<StoreUserMenuVO> userMenuVOList) {
         Map<String, List<String>> permission = new HashMap<>(2);
 
         List<String> superPermissions = new ArrayList<>();

File: framework/src/main/java/cn/lili/modules/order/order/service/OrderItemService.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.order.order.service;
 
+import cn.hutool.core.date.DateTime;
 import cn.lili.modules.order.order.entity.dos.OrderItem;
 import cn.lili.modules.order.order.entity.enums.CommentStatusEnum;
 import cn.lili.modules.order.order.entity.enums.OrderComplaintStatusEnum;
@@ -66,4 +67,6 @@ public interface OrderItemService extends IService<OrderItem> {
      * @return 子订单
      */
     OrderItem getByOrderSnAndSkuId(String orderSn, String skuId);
+
+    List<OrderItem> waitOperationOrderItem(DateTime receiveTime, String commentStatus);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/service/TradeService.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.modules.order.order.service;
 
-import cn.lili.modules.order.order.entity.dos.Trade;
 import cn.lili.modules.order.cart.entity.dto.TradeDTO;
+import cn.lili.modules.order.order.entity.dos.Trade;
 import com.baomidou.mybatisplus.extension.service.IService;
 
 /**
@@ -44,4 +44,6 @@ public interface TradeService extends IService<Trade> {
      */
     void payTrade(String tradeSn, String paymentName, String receivableNo);
 
+    void updateTradePrice(String tradeSn);
+
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/TradeServiceImpl.java
Patch:
@@ -1 +1 @@
-package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file
+package cn.lili.modules.order.order.serviceimpl;import cn.hutool.json.JSONUtil;import cn.lili.cache.Cache;import cn.lili.cache.CachePrefix;import cn.lili.common.enums.ResultCode;import cn.lili.common.exception.ServiceException;import cn.lili.common.properties.RocketmqCustomProperties;import cn.lili.modules.member.entity.dos.MemberAddress;import cn.lili.modules.member.entity.enums.PointTypeEnum;import cn.lili.modules.member.service.MemberService;import cn.lili.modules.order.cart.entity.dto.MemberCouponDTO;import cn.lili.modules.order.cart.entity.dto.TradeDTO;import cn.lili.modules.order.cart.entity.enums.CartTypeEnum;import cn.lili.modules.order.cart.entity.enums.DeliveryMethodEnum;import cn.lili.modules.order.cart.entity.vo.CartVO;import cn.lili.modules.order.order.entity.dos.Order;import cn.lili.modules.order.order.entity.dos.Trade;import cn.lili.modules.order.order.entity.enums.PayStatusEnum;import cn.lili.modules.order.order.mapper.TradeMapper;import cn.lili.modules.order.order.service.OrderService;import cn.lili.modules.order.order.service.TradeService;import cn.lili.modules.promotion.service.CouponService;import cn.lili.modules.promotion.service.KanjiaActivityService;import cn.lili.modules.promotion.service.MemberCouponService;import cn.lili.rocketmq.RocketmqSendCallbackBuilder;import cn.lili.rocketmq.tags.OrderTagsEnum;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import org.apache.rocketmq.spring.core.RocketMQTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;/** * 交易业务层实现 * * @author Chopper * @since 2020/11/17 7:39 下午 */@Servicepublic class TradeServiceImpl extends ServiceImpl<TradeMapper, Trade> implements TradeService {    /**     * 缓存     */    @Autowired    private Cache<Object> cache;    /**     * 订单     */    @Autowired    private OrderService orderService;    /**     * 会员     */    @Autowired    private MemberService memberService;    /**     * 优惠券     */    @Autowired    private CouponService couponService;    /**     * 会员优惠券     */    @Autowired    private MemberCouponService memberCouponService;    /**     * 砍价     */    @Autowired    private KanjiaActivityService kanjiaActivityService;    /**     * RocketMQ     */    @Autowired    private RocketMQTemplate rocketMQTemplate;    /**     * RocketMQ 配置     */    @Autowired    private RocketmqCustomProperties rocketmqCustomProperties;    @Override    @Transactional(rollbackFor = Exception.class)    public Trade createTrade(TradeDTO tradeDTO) {        //创建订单预校验        createTradeCheck(tradeDTO);        Trade trade = new Trade(tradeDTO);        String key = CachePrefix.TRADE.getPrefix() + trade.getSn();        //优惠券预处理        couponPretreatment(tradeDTO);        //积分预处理        pointPretreatment(tradeDTO);        //添加交易        this.save(trade);        //添加订单        orderService.intoDB(tradeDTO);        //砍价订单处理        kanjiaPretreatment(tradeDTO);        //写入缓存，给消费者调用        cache.put(key, JSONUtil.toJsonStr(tradeDTO));        //构建订单创建消息        String destination = rocketmqCustomProperties.getOrderTopic() + ":" + OrderTagsEnum.ORDER_CREATE.name();        //发送订单创建消息        rocketMQTemplate.asyncSend(destination, key, RocketmqSendCallbackBuilder.commonCallback());        return trade;    }    /**     * 创建订单最后一步校验     *     * @param tradeDTO 购物车视图     */    private void createTradeCheck(TradeDTO tradeDTO) {        if(tradeDTO.getStoreAddress() == null){            //创建订单如果没有收获地址，            MemberAddress memberAddress = tradeDTO.getMemberAddress();            if (memberAddress == null) {                throw new ServiceException(ResultCode.MEMBER_ADDRESS_NOT_EXIST);            }            //订单配送区域校验            if (tradeDTO.getNotSupportFreight() != null && !tradeDTO.getNotSupportFreight().isEmpty()) {                StringBuilder stringBuilder = new StringBuilder("包含商品有-");                tradeDTO.getNotSupportFreight().forEach(sku -> stringBuilder.append(sku.getGoodsSku().getGoodsName()));                throw new ServiceException(ResultCode.ORDER_NOT_SUPPORT_DISTRIBUTION, stringBuilder.toString());            }            if (tradeDTO.getCartList().stream().noneMatch(CartVO::getChecked)) {                throw new ServiceException(ResultCode.ORDER_NOT_EXIST_VALID);            }            if(tradeDTO.getCartList().stream().allMatch(item -> item.getDeliveryMethod().equals(DeliveryMethodEnum.SELF_PICK_UP.name()))){                throw new ServiceException(ResultCode.STORE_ADDRESS_NOT_EXIST);            }        }    }    @Override    public Trade getBySn(String sn) {        LambdaQueryWrapper<Trade> queryWrapper = new LambdaQueryWrapper<>();        queryWrapper.eq(Trade::getSn, sn);        return this.getOne(queryWrapper);    }    @Override    @Transactional(rollbackFor = Exception.class)    public void payTrade(String tradeSn, String paymentName, String receivableNo) {        LambdaQueryWrapper<Order> orderQueryWrapper = new LambdaQueryWrapper<>();        orderQueryWrapper.eq(Order::getTradeSn, tradeSn);        List<Order> orders = orderService.list(orderQueryWrapper);        for (Order order : orders) {            orderService.payOrder(order.getSn(), paymentName, receivableNo);        }        Trade trade = this.getBySn(tradeSn);        trade.setPayStatus(PayStatusEnum.PAID.name());        this.saveOrUpdate(trade);    }    @Override    public void updateTradePrice(String tradeSn) {        this.baseMapper.updateTradePrice(tradeSn);    }    /**     * 优惠券预处理     * 下单同时，扣除优惠券     *     * @param tradeDTO 购物车视图     */    private void couponPretreatment(TradeDTO tradeDTO) {        List<MemberCouponDTO> memberCouponDTOList = new ArrayList<>();        if (null != tradeDTO.getPlatformCoupon()) {            memberCouponDTOList.add(tradeDTO.getPlatformCoupon());        }        Collection<MemberCouponDTO> storeCoupons = tradeDTO.getStoreCoupons().values();        if (!storeCoupons.isEmpty()) {            memberCouponDTOList.addAll(storeCoupons);        }        List<String> ids = memberCouponDTOList.stream().map(e -> e.getMemberCoupon().getId()).collect(Collectors.toList());        memberCouponService.used(tradeDTO.getMemberId(), ids);        memberCouponDTOList.forEach(e -> couponService.usedCoupon(e.getMemberCoupon().getCouponId(), 1));    }    /**     * 创建交易，积分处理     *     * @param tradeDTO 购物车视图     */    private void pointPretreatment(TradeDTO tradeDTO) {        //需要支付积分        if (tradeDTO.getPriceDetailDTO() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() != null                && tradeDTO.getPriceDetailDTO().getPayPoint() > 0) {            StringBuilder orderSns = new StringBuilder();            for (CartVO item : tradeDTO.getCartList()) {                orderSns.append(item.getSn());            }            boolean result = memberService.updateMemberPoint(tradeDTO.getPriceDetailDTO().getPayPoint(), PointTypeEnum.REDUCE.name(), tradeDTO.getMemberId(),                    "订单【" + orderSns + "】创建，积分扣减");            if (!result) {                throw new ServiceException(ResultCode.PAY_POINT_ENOUGH);            }        }    }    /**     * 创建交易、砍价处理     *     * @param tradeDTO 购物车视图     */    private void kanjiaPretreatment(TradeDTO tradeDTO) {        if (tradeDTO.getCartTypeEnum().equals(CartTypeEnum.KANJIA)) {            String kanjiaId = tradeDTO.getSkuList().get(0).getKanjiaId();            kanjiaActivityService.endKanjiaActivity(kanjiaId);        }    }}
\ No newline at end of file

File: seller-api/src/main/java/cn/lili/security/StoreAuthenticationFilter.java
Patch:
@@ -123,7 +123,7 @@ private void customAuthentication(HttpServletRequest request, HttpServletRespons
 
 
         //如果不是超级管理员， 则鉴权
-        if (!authUser.getIsSuper()) {
+        if (Boolean.FALSE.equals(authUser.getIsSuper())) {
             //获取缓存中的权限
             Map<String, List<String>> permission =
                     (Map<String, List<String>>) cache.get(CachePrefix.PERMISSION_LIST.getPrefix(UserEnums.STORE) + authUser.getId());

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -249,7 +249,7 @@ public Member autoRegister(ConnectAuthUser authUser) {
         try {
 //            String username = UuidUtils.getUUID();
             Member member = new Member(authUser.getUsername(), UuidUtils.getUUID(), authUser.getAvatar(), authUser.getNickname(),
-                    authUser.getGender() != null ? Convert.toInt(authUser.getGender().getCode()) : 0,authUser.getPhone());
+                    authUser.getGender() != null ? Convert.toInt(authUser.getGender().getCode()) : 0, authUser.getPhone());
             member.setPassword(DEFAULT_PASSWORD);
             // 发送会员注册信息
             registerHandler(member);
@@ -306,7 +306,7 @@ public void registerHandler(Member member) {
         member.setId(SnowFlake.getIdStr());
         //保存会员
         this.save(member);
-
+        UserContext.settingInviter(member.getId(), cache);
         // 发送会员注册信息
         applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("new member register", rocketmqCustomProperties.getMemberTopic(),
                 MemberTagsEnum.MEMBER_REGISTER.name(), member));
@@ -700,7 +700,7 @@ public void logout(UserEnums userEnums) {
 
         if (CharSequenceUtil.isNotEmpty(currentUserToken)) {
             cache.remove(CachePrefix.ACCESS_TOKEN.getPrefix(userEnums, authUser.getId()) + currentUserToken);
-            cache.vagueDel(CachePrefix.REFRESH_TOKEN.getPrefix(userEnums, authUser.getId()) );
+            cache.vagueDel(CachePrefix.REFRESH_TOKEN.getPrefix(userEnums, authUser.getId()));
         }
     }
 

File: consumer/src/main/java/cn/lili/trigger/executor/PromotionTimeTriggerExecutor.java
Patch:
@@ -3,6 +3,7 @@
 import cn.hutool.json.JSONUtil;
 import cn.lili.modules.order.order.service.OrderService;
 import cn.lili.modules.promotion.entity.dos.Pintuan;
+import cn.lili.modules.promotion.service.PintuanService;
 import cn.lili.trigger.TimeTriggerExecutor;
 import cn.lili.trigger.message.PintuanOrderMessage;
 import cn.lili.trigger.model.TimeExecuteConstant;

File: framework/src/main/java/cn/lili/modules/order/order/entity/enums/OrderItemAfterSaleStatusEnum.java
Patch:
@@ -13,9 +13,9 @@ public enum OrderItemAfterSaleStatusEnum {
      */
     NEW("新订单，不能申请售后"),
     NOT_APPLIED("未申请"),
-    ALREADY_APPLIED("已申请"),
-    EXPIRED("已失效不允许申请售后"),
-    PART_AFTER_SALE("部分售后");
+    PART_AFTER_SALE("部分售后"),
+    ALREADY_APPLIED("全部售后"),
+    EXPIRED("已失效不允许申请售后");
 
 
 

File: framework/src/main/java/cn/lili/modules/distribution/entity/vos/DistributionOrderSearchParams.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.distribution.entity.vos;
 
+import cn.lili.common.utils.DateUtil;
 import cn.lili.common.utils.StringUtils;
 import cn.lili.common.vo.PageVO;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

File: framework/src/main/java/cn/lili/modules/order/cart/render/util/PromotionPriceUtil.java
Patch:
@@ -172,7 +172,7 @@ private static void calculateCartSkuPromotionsPrice(CartSkuVO cartSkuVO, Double
     }
 
     /**
-     * 特殊情况处理，如参与多个促销活动，部分商品在其他促销计算后的金额不足以满足与当前参与的促销活动的优惠金额
+     * 特殊情况处理，如参与多个促销活动，部分商品在其他促销计算后的金额不足以满足与当前参与的促销活动的优惠金额（只计算使用优惠券不足的情况）
      *
      * @param skuVOList          获取购物车信息
      * @param skuPromotionDetail 参与活动的商品，以及商品总金额
@@ -202,7 +202,7 @@ private static void calculateNotEnoughPromotionsPrice(List<CartSkuVO> skuVOList,
                 double point = CurrencyUtil.div(k.getPriceDetailDTO().getGoodsPrice(), totalPrice, 4);
                 //商品优惠金额
                 Double skuDiscountPrice = CurrencyUtil.mul(discountPrice, point);
-                return skuDiscountPrice > k.getPriceDetailDTO().getCouponPrice();
+                return k.getPriceDetailDTO().getCouponPrice() > 0 && skuDiscountPrice > k.getPriceDetailDTO().getCouponPrice();
             }
             return false;
         }).collect(Collectors.toList());

File: framework/src/main/java/cn/lili/modules/order/cart/render/util/PromotionPriceUtil.java
Patch:
@@ -172,7 +172,7 @@ private static void calculateCartSkuPromotionsPrice(CartSkuVO cartSkuVO, Double
     }
 
     /**
-     * 特殊情况处理，如参与多个促销活动，部分商品在其他促销计算后的金额不足以满足与当前参与的促销活动的优惠金额
+     * 特殊情况处理，如参与多个促销活动，部分商品在其他促销计算后的金额不足以满足与当前参与的促销活动的优惠金额（只计算使用优惠券不足的情况）
      *
      * @param skuVOList          获取购物车信息
      * @param skuPromotionDetail 参与活动的商品，以及商品总金额
@@ -202,7 +202,7 @@ private static void calculateNotEnoughPromotionsPrice(List<CartSkuVO> skuVOList,
                 double point = CurrencyUtil.div(k.getPriceDetailDTO().getGoodsPrice(), totalPrice, 4);
                 //商品优惠金额
                 Double skuDiscountPrice = CurrencyUtil.mul(discountPrice, point);
-                return skuDiscountPrice > k.getPriceDetailDTO().getCouponPrice();
+                return k.getPriceDetailDTO().getCouponPrice() > 0 && skuDiscountPrice > k.getPriceDetailDTO().getCouponPrice();
             }
             return false;
         }).collect(Collectors.toList());

File: framework/src/main/java/cn/lili/common/properties/RocketmqCustomProperties.java
Patch:
@@ -19,6 +19,7 @@
 @ConfigurationProperties(prefix = "lili.data.rocketmq")
 public class RocketmqCustomProperties {
 
+
     private String promotionTopic;
 
     private String promotionGroup;

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberEvaluationServiceImpl.java
Patch:
@@ -122,6 +122,9 @@ public MemberEvaluationDTO addMemberEvaluation(MemberEvaluationDTO memberEvaluat
         } else {
             //获取用户信息 非自己评价时，读取数据库
             member = memberService.getById(order.getMemberId());
+            if (member == null) {
+                throw new ServiceException(ResultCode.USER_NOT_EXIST);
+            }
         }
         //获取商品信息
         GoodsSku goodsSku = goodsSkuService.getGoodsSkuByIdFromCache(memberEvaluationDTO.getSkuId());

File: framework/src/main/java/cn/lili/elasticsearch/BaseElasticsearchService.java
Patch:
@@ -90,6 +90,7 @@ protected void createIndexRequest(String index) {
             request.settings(Settings.builder()
                     .put("index.number_of_shards", elasticsearchProperties.getIndex().getNumberOfShards())
                     .put("index.number_of_replicas", elasticsearchProperties.getIndex().getNumberOfReplicas())
+                    .put("index.max_result_window", 100000) //最大查询结果数
                     .put("index.mapping.total_fields.limit", 2000));
 
             //创建索引

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -84,11 +84,12 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
 
         //如果搜索词不为空，且明显不是sql注入，那么就将搜索词加入热搜词
         //PS:线上环境运行很多客户反馈被sql攻击，写在了搜索热词里，这里控制命中关键字就不做热词统计，如果线上比较严格可以调用关键词替换，不过不建议这么做
-        if (CharSequenceUtil.isNotBlank(searchDTO.getKeyword()) && !SqlFilter.hit(searchDTO.getKeyword())) {
+        if (CharSequenceUtil.isNotBlank(searchDTO.getKeyword()) && Boolean.FALSE.equals(SqlFilter.hit(searchDTO.getKeyword()))) {
             cache.incrementScore(CachePrefix.HOT_WORD.getPrefix(), searchDTO.getKeyword());
         }
         NativeSearchQueryBuilder searchQueryBuilder = createSearchQueryBuilder(searchDTO, pageVo);
         NativeSearchQuery searchQuery = searchQueryBuilder.build();
+        searchQuery.setTrackTotalHits(true);
         log.debug("searchGoods DSL:{}", searchQuery.getQuery());
         SearchHits<EsGoodsIndex> search = restTemplate.search(searchQuery, EsGoodsIndex.class);
         return SearchHitSupport.searchPageFor(search, searchQuery.getPageable());

File: framework/src/main/java/cn/lili/elasticsearch/BaseElasticsearchService.java
Patch:
@@ -90,6 +90,7 @@ protected void createIndexRequest(String index) {
             request.settings(Settings.builder()
                     .put("index.number_of_shards", elasticsearchProperties.getIndex().getNumberOfShards())
                     .put("index.number_of_replicas", elasticsearchProperties.getIndex().getNumberOfReplicas())
+                    .put("index.max_result_window", 100000) //最大查询结果数
                     .put("index.mapping.total_fields.limit", 2000));
 
             //创建索引

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -84,11 +84,12 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
 
         //如果搜索词不为空，且明显不是sql注入，那么就将搜索词加入热搜词
         //PS:线上环境运行很多客户反馈被sql攻击，写在了搜索热词里，这里控制命中关键字就不做热词统计，如果线上比较严格可以调用关键词替换，不过不建议这么做
-        if (CharSequenceUtil.isNotBlank(searchDTO.getKeyword()) && !SqlFilter.hit(searchDTO.getKeyword())) {
+        if (CharSequenceUtil.isNotBlank(searchDTO.getKeyword()) && Boolean.FALSE.equals(SqlFilter.hit(searchDTO.getKeyword()))) {
             cache.incrementScore(CachePrefix.HOT_WORD.getPrefix(), searchDTO.getKeyword());
         }
         NativeSearchQueryBuilder searchQueryBuilder = createSearchQueryBuilder(searchDTO, pageVo);
         NativeSearchQuery searchQuery = searchQueryBuilder.build();
+        searchQuery.setTrackTotalHits(true);
         log.debug("searchGoods DSL:{}", searchQuery.getQuery());
         SearchHits<EsGoodsIndex> search = restTemplate.search(searchQuery, EsGoodsIndex.class);
         return SearchHitSupport.searchPageFor(search, searchQuery.getPageable());

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/AbstractPromotionsServiceImpl.java
Patch:
@@ -112,9 +112,9 @@ public boolean updateStatus(List<String> ids, Long startTime, Long endTime) {
         List<T> promotionsList = this.list(new QueryWrapper<T>().in("id", ids));
         for (T t : promotionsList) {
             if (startTime != null && endTime != null) {
-                this.checkPromotions(t);
                 t.setStartTime(new Date(startTime));
                 t.setEndTime(new Date(endTime));
+                this.checkPromotions(t);
             } else {
                 t.setStartTime(null);
                 t.setEndTime(null);

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/AbstractPromotionsServiceImpl.java
Patch:
@@ -112,9 +112,9 @@ public boolean updateStatus(List<String> ids, Long startTime, Long endTime) {
         List<T> promotionsList = this.list(new QueryWrapper<T>().in("id", ids));
         for (T t : promotionsList) {
             if (startTime != null && endTime != null) {
-                this.checkPromotions(t);
                 t.setStartTime(new Date(startTime));
                 t.setEndTime(new Date(endTime));
+                this.checkPromotions(t);
             } else {
                 t.setStartTime(null);
                 t.setEndTime(null);

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -235,6 +235,9 @@ public void init() {
                         if (count >= 1) {
                             skuSource -= count;
                         }
+                        if (skuSource <= 0) {
+                            skuSource = 1;
+                        }
                         esGoodsIndex.setSkuSource(skuSource);
 
 

File: framework/src/main/java/cn/lili/modules/logistics/plugin/kdniao/KdniaoPlugin.java
Patch:
@@ -200,8 +200,9 @@ public Map<String,Object> labelOrder(LabelOrderDTO labelOrderDTO) {
             JSONObject obj = JSONObject.parseObject(result);
             log.info("电子面单响应：{}", result);
             if (!"100".equals(obj.getString("ResultCode"))) {
-                resultMap.put("Reason",obj.getString("Reason"));
-                return resultMap;
+//                resultMap.put("Reason",obj.getString("Reason"));
+                throw new ServiceException(obj.getString("Reason"));
+//                return resultMap;
             }
 
             JSONObject orderJson = JSONObject.parseObject(obj.getString("Order"));

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -247,9 +247,9 @@ public Member autoRegister(ConnectAuthUser authUser) {
             authUser.setAvatar("https://i.loli.net/2020/11/19/LyN6JF7zZRskdIe.png");
         }
         try {
-            String username = UuidUtils.getUUID();
-            Member member = new Member(username, UuidUtils.getUUID(), authUser.getAvatar(), authUser.getNickname(),
-                    authUser.getGender() != null ? Convert.toInt(authUser.getGender().getCode()) : 0);
+//            String username = UuidUtils.getUUID();
+            Member member = new Member(authUser.getUsername(), UuidUtils.getUUID(), authUser.getAvatar(), authUser.getNickname(),
+                    authUser.getGender() != null ? Convert.toInt(authUser.getGender().getCode()) : 0,authUser.getPhone());
             member.setPassword(DEFAULT_PASSWORD);
             // 发送会员注册信息
             registerHandler(member);

File: framework/src/main/java/cn/lili/modules/connect/request/BaseAuthAlipayRequest.java
Patch:
@@ -12,6 +12,8 @@
 import cn.lili.modules.connect.entity.dto.ConnectAuthUser;
 import cn.lili.modules.connect.entity.enums.AuthResponseStatus;
 import cn.lili.modules.connect.entity.enums.AuthUserGender;
+import cn.lili.modules.connect.entity.enums.ConnectEnum;
+import cn.lili.modules.connect.entity.enums.SourceEnum;
 import cn.lili.modules.connect.exception.AuthException;
 import com.alibaba.fastjson.JSONObject;
 import com.alipay.api.AlipayApiException;
@@ -119,7 +121,7 @@ protected ConnectAuthUser getUserInfo(AuthToken authToken) {
             .location(location)
             .gender(AuthUserGender.getRealGender(response.getGender()))
             .token(authToken)
-            .source(source.toString())
+            .source(ConnectEnum.ALIPAY)
             .build();
     }
 

File: framework/src/main/java/cn/lili/modules/connect/serviceimpl/ConnectServiceImpl.java
Patch:
@@ -281,7 +281,7 @@ private Token unionLoginCallback(ConnectAuthUser authUser, boolean longTerm) {
                 //使用OpenID登录
                 SourceEnum sourceEnum = SourceEnum.getSourceEnum(ConnectEnum.valueOf(authUser.getType()),
                         ClientTypeEnum.valueOf(authUser.getSource()));
-                queryWrapper.eq(Connect::getUnionId, authUser.getToken().getUnionId())
+                queryWrapper.eq(Connect::getUnionId, authUser.getUuid())
                         .eq(Connect::getUnionType, sourceEnum.name());
             }
 

File: buyer-api/src/main/java/cn/lili/security/BuyerAuthenticationFilter.java
Patch:
@@ -99,7 +99,7 @@ private UsernamePasswordAuthenticationToken getAuthentication(String jwt, HttpSe
             AuthUser authUser = new Gson().fromJson(json, AuthUser.class);
 
             //校验redis中是否有权限
-            if (cache.hasKey(CachePrefix.ACCESS_TOKEN.getPrefix(UserEnums.MEMBER) + jwt)) {
+            if (cache.hasKey(CachePrefix.ACCESS_TOKEN.getPrefix(UserEnums.MEMBER,authUser.getId()) + jwt)) {
                 //构造返回信息
                 List<GrantedAuthority> auths = new ArrayList<>();
                 auths.add(new SimpleGrantedAuthority("ROLE_" + authUser.getRole().name()));

File: consumer/src/main/java/cn/lili/timetask/handler/impl/statistics/OnlineMemberStatistics.java
Patch:
@@ -72,7 +72,8 @@ public void execute() {
         calendar.set(Calendar.MINUTE, 0);
         calendar.set(Calendar.SECOND, 0);
         calendar.set(Calendar.MILLISECOND, 0);
-        onlineMemberVOS.add(new OnlineMemberVO(calendar.getTime(), cache.keys(CachePrefix.ACCESS_TOKEN.getPrefix(UserEnums.MEMBER) + "*").size(), lastNum.get()));
+        onlineMemberVOS.add(new OnlineMemberVO(calendar.getTime(), cache.keys(CachePrefix.ACCESS_TOKEN.getPrefix(UserEnums.MEMBER) + "*").size(),
+                lastNum.get()));
 
         //写入缓存
         cache.put(CachePrefix.ONLINE_MEMBER.getPrefix(), onlineMemberVOS);

File: framework/src/main/java/cn/lili/common/security/context/UserContext.java
Patch:
@@ -65,7 +65,7 @@ public static AuthUser getAuthUser(Cache cache, String accessToken) {
             AuthUser authUser = getAuthUser(accessToken);
             assert authUser != null;
 
-            if (!cache.hasKey(CachePrefix.ACCESS_TOKEN.getPrefix(authUser.getRole()) + accessToken)) {
+            if (!cache.hasKey(CachePrefix.ACCESS_TOKEN.getPrefix(authUser.getRole(), authUser.getId()) + accessToken)) {
                 throw new ServiceException(ResultCode.USER_AUTHORITY_ERROR);
             }
             return authUser;

File: manager-api/src/main/java/cn/lili/security/ManagerAuthenticationFilter.java
Patch:
@@ -86,7 +86,8 @@ private void customAuthentication(HttpServletRequest request, HttpServletRespons
         //如果不是超级管理员， 则鉴权
         if (Boolean.FALSE.equals(authUser.getIsSuper())) {
             //获取缓存中的权限
-            Map<String, List<String>> permission = (Map<String, List<String>>) cache.get(CachePrefix.PERMISSION_LIST.getPrefix(UserEnums.MANAGER) + authUser.getId());
+            Map<String, List<String>> permission =
+                    (Map<String, List<String>>) cache.get(CachePrefix.PERMISSION_LIST.getPrefix(UserEnums.MANAGER) + authUser.getId());
 
             //获取数据(GET 请求)权限
             if (request.getMethod().equals(RequestMethod.GET.name())) {
@@ -143,7 +144,7 @@ private UsernamePasswordAuthenticationToken getAuthentication(String jwt, HttpSe
             AuthUser authUser = new Gson().fromJson(json, AuthUser.class);
 
             //校验redis中是否有权限
-            if (cache.hasKey(CachePrefix.ACCESS_TOKEN.getPrefix(UserEnums.MANAGER) + jwt)) {
+            if (cache.hasKey(CachePrefix.ACCESS_TOKEN.getPrefix(UserEnums.MANAGER, authUser.getId()) + jwt)) {
                 //用户角色
                 List<GrantedAuthority> auths = new ArrayList<>();
                 auths.add(new SimpleGrantedAuthority("ROLE_" + authUser.getRole().name()));

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/FootprintServiceImpl.java
Patch:
@@ -88,6 +88,9 @@ public IPage<EsGoodsIndex> footPrintPage(FootPrintQueryParams params) {
                     .mapToObj(i -> {
                         if (goodsSkuByIdFromCache.get(i) == null) {
                             EsGoodsIndex esGoodsIndex = new EsGoodsIndex();
+                            FootPrint footPrint = footPrintPages.getRecords().get(i);
+                            esGoodsIndex.setGoodsId(footPrint.getGoodsId());
+                            esGoodsIndex.setId(footPrint.getSkuId());
                             esGoodsIndex.setReleaseTime(footPrintPages.getRecords().get(i).getCreateTime().getTime());
                             return esGoodsIndex;
                         }

File: framework/src/main/java/cn/lili/modules/file/plugin/impl/TencentFilePlugin.java
Patch:
@@ -52,7 +52,7 @@ private COSClient getCOSClient() {
         // 1 初始化用户身份信息（secretId, secretKey）。
         COSCredentials cred = new BasicCOSCredentials(ossSetting.getTencentCOSSecretId(), ossSetting.getTencentCOSSecretKey());
         // 2 设置 bucket 的地域, COS 地域的简称请参见 https://cloud.tencent.com/document/product/436/6224
-        ClientConfig clientConfig = new ClientConfig(new Region("COS_REGION"));
+        ClientConfig clientConfig = new ClientConfig(new Region(ossSetting.getTencentCOSRegion()));
         // 这里建议设置使用 https 协议
         clientConfig.setHttpProtocol(HttpProtocol.https);
         // 3 生成 cos 客户端。
@@ -66,7 +66,8 @@ private COSClient getCOSClient() {
      * @return
      */
     private String getUrlPrefix() {
-        return "https://" + ossSetting.getTencentCOSBucket() + "." + ossSetting.getTencentCOSEndPoint() + "/";
+//        return "https://" + ossSetting.getTencentCOSBucket() + "." + ossSetting.getTencentCOSEndPoint() + "/";
+        return "https://" + ossSetting.getTencentCOSBucket() + ".cos" + ossSetting.getTencentCOSEndPoint() + ".myqcloud.com/";
     }
 
     @Override

File: im-api/src/main/java/cn/lili/controller/im/ImMessageController.java
Patch:
@@ -75,7 +75,7 @@ public ResultMessage<Boolean> hasNewMessage(String accessToken) {
         return ResultUtil.data(imMessageService.hasNewMessage(accessToken));
     }
 
-    @GetMapping(value = "/unredMessage")
+    @GetMapping(value = "/unreadMessage")
     @ApiOperation(value = "获取所有未读消息")
     public ResultMessage<Long> getUnreadMessageCount() {
         return ResultUtil.data(imMessageService.unreadMessageCount());

File: framework/src/main/java/cn/lili/modules/order/cart/entity/vo/CartSkuVO.java
Patch:
@@ -102,6 +102,9 @@ public class CartSkuVO extends CartBase implements Serializable {
      */
     public CartSkuVO(GoodsSku goodsSku) {
         this.goodsSku = goodsSku;
+        if (goodsSku.getUpdateTime() == null) {
+            this.goodsSku.setUpdateTime(goodsSku.getCreateTime());
+        }
         this.checked = true;
         this.invalid = false;
         //默认时间为0，让系统为此商品更新缓存

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/AbstractPromotionsServiceImpl.java
Patch:
@@ -112,6 +112,7 @@ public boolean updateStatus(List<String> ids, Long startTime, Long endTime) {
         List<T> promotionsList = this.list(new QueryWrapper<T>().in("id", ids));
         for (T t : promotionsList) {
             if (startTime != null && endTime != null) {
+                this.checkPromotions(t);
                 t.setStartTime(new Date(startTime));
                 t.setEndTime(new Date(endTime));
             } else {

File: framework/src/main/java/cn/lili/modules/store/serviceimpl/StoreServiceImpl.java
Patch:
@@ -227,7 +227,7 @@ public boolean audit(String id, Integer passed) {
         } else {
             store.setStoreDisable(StoreStatusEnum.REFUSED.value());
         }
-
+        cache.remove(CachePrefix.STORE.getPrefix()+store.getId());
         return this.updateById(store);
     }
 

File: framework/src/main/java/cn/lili/modules/order/cart/entity/vo/CartSkuVO.java
Patch:
@@ -102,6 +102,9 @@ public class CartSkuVO extends CartBase implements Serializable {
      */
     public CartSkuVO(GoodsSku goodsSku) {
         this.goodsSku = goodsSku;
+        if (goodsSku.getUpdateTime() == null) {
+            this.goodsSku.setUpdateTime(goodsSku.getCreateTime());
+        }
         this.checked = true;
         this.invalid = false;
         //默认时间为0，让系统为此商品更新缓存

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/AbstractPromotionsServiceImpl.java
Patch:
@@ -112,6 +112,7 @@ public boolean updateStatus(List<String> ids, Long startTime, Long endTime) {
         List<T> promotionsList = this.list(new QueryWrapper<T>().in("id", ids));
         for (T t : promotionsList) {
             if (startTime != null && endTime != null) {
+                this.checkPromotions(t);
                 t.setStartTime(new Date(startTime));
                 t.setEndTime(new Date(endTime));
             } else {

File: framework/src/main/java/cn/lili/modules/member/mapper/FootprintMapper.java
Patch:
@@ -27,7 +27,7 @@ public interface FootprintMapper extends BaseMapper<FootPrint> {
             "    FROM li_foot_print " +
             "    WHERE member_id = ${memberId} " +
             "    ORDER BY create_time DESC " +
-            "    LIMIT 1 " +
+            "    LIMIT 100 " +
             "  ) AS keep " +
             ") AS latest_footprints " +
             "ON li_foot_print.id = latest_footprints.id " +

File: buyer-api/src/main/java/cn/lili/controller/member/MemberAddressBuyerController.java
Patch:
@@ -68,6 +68,8 @@ public ResultMessage<MemberAddress> addShippingAddress(@Valid MemberAddress ship
     @ApiOperation(value = "修改会员收件地址")
     @PutMapping
     public ResultMessage<MemberAddress> editShippingAddress(@Valid MemberAddress shippingAddress) {
+        OperationalJudgment.judgment(memberAddressService.getById(shippingAddress.getId()));
+        shippingAddress.setMemberId(Objects.requireNonNull(UserContext.getCurrentUser()).getId());
         return ResultUtil.data(memberAddressService.updateMemberAddress(shippingAddress));
     }
 

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -82,6 +82,7 @@ public enum ResultCode {
     HAVE_INVALID_SALES_MODEL(11023, "批发规则存在小于等于0的无效数据！"),
     MUST_HAVE_GOODS_SKU_VALUE(11024, "规格值不能为空！"),
     DO_NOT_MATCH_WHOLESALE(11025, "批发商品购买数量不能低于起拍量！"),
+    GOODS_NOT_ERROR(11026, "商品不存在"),
 
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberAddressServiceImpl.java
Patch:
@@ -69,9 +69,7 @@ public MemberAddress saveMemberAddress(MemberAddress memberAddress) {
     @Transactional(rollbackFor = Exception.class)
     public MemberAddress updateMemberAddress(MemberAddress memberAddress) {
         MemberAddress originalMemberAddress = this.getMemberAddress(memberAddress.getId());
-        if (originalMemberAddress != null &&
-                originalMemberAddress.getMemberId().equals(Objects.requireNonNull(UserContext.getCurrentUser()).getId())) {
-
+        if (originalMemberAddress != null) {
             if (memberAddress.getIsDefault() == null) {
                 memberAddress.setIsDefault(false);
             }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/CouponServiceImpl.java
Patch:
@@ -310,11 +310,11 @@ private void checkCouponScope(CouponVO coupon) {
      */
     private void checkCouponPortionGoods(CouponVO coupon) {
         String[] split = coupon.getScopeId().split(",");
-        if (split.length <= 0) {
+        if (split.length == 0) {
             throw new ServiceException(ResultCode.COUPON_SCOPE_ERROR);
         }
         for (String id : split) {
-            GoodsSku goodsSku = goodsSkuService.getCanPromotionGoodsSkuByIdFromCache(id);
+            GoodsSku goodsSku = goodsSkuService.getGoodsSkuByIdFromCache(id);
             if (goodsSku == null) {
                 throw new ServiceException(ResultCode.GOODS_NOT_EXIST);
             }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PointsGoodsServiceImpl.java
Patch:
@@ -74,7 +74,8 @@ public boolean savePointsGoodsBatch(List<PointsGoods> promotionsList) {
             if (this.checkSkuDuplicate(pointsGoods.getSkuId(), null) == null) {
                 pointsGoods.setPromotionName("积分商品活动");
             } else {
-                throw new ServiceException("商品id为" + pointsGoods.getSkuId() + "的商品已参加积分商品活动！");
+                throw new ServiceException(ResultCode.PROMOTION_LOG_EXIST, "商品id为" + pointsGoods.getSkuId() +
+                        "的商品已参加积分商品活动！");
             }
             GoodsSku goodsSku = this.checkSkuExist(pointsGoods.getSkuId());
             pointsGoods.setStoreId(goodsSku.getStoreId());

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -82,6 +82,7 @@ public enum ResultCode {
     HAVE_INVALID_SALES_MODEL(11023, "批发规则存在小于等于0的无效数据！"),
     MUST_HAVE_GOODS_SKU_VALUE(11024, "规格值不能为空！"),
     DO_NOT_MATCH_WHOLESALE(11025, "批发商品购买数量不能低于起拍量！"),
+    GOODS_NOT_ERROR(11026, "商品不存在"),
 
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/CouponServiceImpl.java
Patch:
@@ -310,11 +310,11 @@ private void checkCouponScope(CouponVO coupon) {
      */
     private void checkCouponPortionGoods(CouponVO coupon) {
         String[] split = coupon.getScopeId().split(",");
-        if (split.length <= 0) {
+        if (split.length == 0) {
             throw new ServiceException(ResultCode.COUPON_SCOPE_ERROR);
         }
         for (String id : split) {
-            GoodsSku goodsSku = goodsSkuService.getCanPromotionGoodsSkuByIdFromCache(id);
+            GoodsSku goodsSku = goodsSkuService.getGoodsSkuByIdFromCache(id);
             if (goodsSku == null) {
                 throw new ServiceException(ResultCode.GOODS_NOT_EXIST);
             }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PointsGoodsServiceImpl.java
Patch:
@@ -74,7 +74,8 @@ public boolean savePointsGoodsBatch(List<PointsGoods> promotionsList) {
             if (this.checkSkuDuplicate(pointsGoods.getSkuId(), null) == null) {
                 pointsGoods.setPromotionName("积分商品活动");
             } else {
-                throw new ServiceException("商品id为" + pointsGoods.getSkuId() + "的商品已参加积分商品活动！");
+                throw new ServiceException(ResultCode.PROMOTION_LOG_EXIST, "商品id为" + pointsGoods.getSkuId() +
+                        "的商品已参加积分商品活动！");
             }
             GoodsSku goodsSku = this.checkSkuExist(pointsGoods.getSkuId());
             pointsGoods.setStoreId(goodsSku.getStoreId());

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -176,8 +176,8 @@ public void update(Goods goods, GoodsOperationDTO goodsOperationDTO) {
                 //如果商品状态值不对，则es索引移除
                 if (goods.getAuthFlag().equals(GoodsAuthEnum.PASS.name()) && goods.getMarketEnable().equals(GoodsStatusEnum.UPPER.name())) {
                     goodsIndexService.deleteIndexById(sku.getId());
-                    this.clearCache(sku.getId());
                 }
+                this.clearCache(sku.getId());
             }
         }
         if (!skuList.isEmpty()) {

File: buyer-api/src/main/java/cn/lili/controller/member/MemberAddressBuyerController.java
Patch:
@@ -68,6 +68,8 @@ public ResultMessage<MemberAddress> addShippingAddress(@Valid MemberAddress ship
     @ApiOperation(value = "修改会员收件地址")
     @PutMapping
     public ResultMessage<MemberAddress> editShippingAddress(@Valid MemberAddress shippingAddress) {
+        OperationalJudgment.judgment(memberAddressService.getById(shippingAddress.getId()));
+        shippingAddress.setMemberId(Objects.requireNonNull(UserContext.getCurrentUser()).getId());
         return ResultUtil.data(memberAddressService.updateMemberAddress(shippingAddress));
     }
 

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberAddressServiceImpl.java
Patch:
@@ -69,9 +69,7 @@ public MemberAddress saveMemberAddress(MemberAddress memberAddress) {
     @Transactional(rollbackFor = Exception.class)
     public MemberAddress updateMemberAddress(MemberAddress memberAddress) {
         MemberAddress originalMemberAddress = this.getMemberAddress(memberAddress.getId());
-        if (originalMemberAddress != null &&
-                originalMemberAddress.getMemberId().equals(Objects.requireNonNull(UserContext.getCurrentUser()).getId())) {
-
+        if (originalMemberAddress != null) {
             if (memberAddress.getIsDefault() == null) {
                 memberAddress.setIsDefault(false);
             }

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -608,7 +608,7 @@ public void updateEsGoodsIndexAllByList(BasePromotions promotion, String key) {
     }
 
     private void executeUpdateEsGoodsIndexAll(BasePromotions promotion, String key) {
-        for (int i = 1; ; i++) {
+        for (int i = 0; ; i++) {
             List<String> skuIds;
             //如果storeId不为空，则表示是店铺活动
             if (promotion.getStoreId() != null && !promotion.getStoreId().equals(PromotionTools.PLATFORM_ID)) {

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -608,7 +608,7 @@ public void updateEsGoodsIndexAllByList(BasePromotions promotion, String key) {
     }
 
     private void executeUpdateEsGoodsIndexAll(BasePromotions promotion, String key) {
-        for (int i = 1; ; i++) {
+        for (int i = 0; ; i++) {
             List<String> skuIds;
             //如果storeId不为空，则表示是店铺活动
             if (promotion.getStoreId() != null && !promotion.getStoreId().equals(PromotionTools.PLATFORM_ID)) {

File: framework/src/main/java/cn/lili/modules/promotion/entity/dto/search/CouponSearchParams.java
Patch:
@@ -103,7 +103,7 @@ public <T> QueryWrapper<T> queryWrapper() {
 
         }
         if (this.getStartTime() != null) {
-            queryWrapper.ge("start_time", new Date(this.getEndTime()));
+            queryWrapper.ge("start_time", new Date(this.getStartTime()));
         }
         if (this.getEndTime() != null) {
             queryWrapper.le("end_time", new Date(this.getEndTime()));

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -167,7 +167,7 @@ public void init() {
                 skuQueryWrapper.eq("gs.auth_flag", GoodsAuthEnum.PASS.name());
                 skuQueryWrapper.eq("gs.market_enable", GoodsStatusEnum.UPPER.name());
                 skuQueryWrapper.eq("gs.delete_flag", false);
-                skuQueryWrapper.ge("gs.quantity", 0);
+                skuQueryWrapper.gt("gs.quantity", 0);
 
 
                 Map<String, Long> resultMap = (Map<String, Long>) cache.get(CachePrefix.INIT_INDEX_PROCESS.getPrefix());

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -167,7 +167,7 @@ public void init() {
                 skuQueryWrapper.eq("gs.auth_flag", GoodsAuthEnum.PASS.name());
                 skuQueryWrapper.eq("gs.market_enable", GoodsStatusEnum.UPPER.name());
                 skuQueryWrapper.eq("gs.delete_flag", false);
-                skuQueryWrapper.ge("gs.quantity", 0);
+                skuQueryWrapper.gt("gs.quantity", 0);
 
 
                 Map<String, Long> resultMap = (Map<String, Long>) cache.get(CachePrefix.INIT_INDEX_PROCESS.getPrefix());

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -343,6 +343,7 @@ private void updateGoodsIndex(Goods goods) {
             searchParams.setGoodsId(goods.getId());
             searchParams.setPageNumber(i);
             searchParams.setPageSize(BATCH_SIZE);
+            searchParams.setGeQuantity(0);
             IPage<GoodsSku> goodsSkuByPage = this.goodsSkuService.getGoodsSkuByPage(searchParams);
             if (goodsSkuByPage == null || goodsSkuByPage.getRecords().isEmpty()) {
                 break;

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -167,6 +167,7 @@ public void init() {
                 skuQueryWrapper.eq("gs.auth_flag", GoodsAuthEnum.PASS.name());
                 skuQueryWrapper.eq("gs.market_enable", GoodsStatusEnum.UPPER.name());
                 skuQueryWrapper.eq("gs.delete_flag", false);
+                skuQueryWrapper.ge("gs.quantity", 0);
 
 
                 Map<String, Long> resultMap = (Map<String, Long>) cache.get(CachePrefix.INIT_INDEX_PROCESS.getPrefix());
@@ -176,6 +177,7 @@ public void init() {
                     skuCountQueryWrapper.eq("auth_flag", GoodsAuthEnum.PASS.name());
                     skuCountQueryWrapper.eq("market_enable", GoodsStatusEnum.UPPER.name());
                     skuCountQueryWrapper.eq("delete_flag", false);
+                    skuCountQueryWrapper.ge("gs.quantity", 0);
                     resultMap = new HashMap<>();
                     resultMap.put(KEY_SUCCESS, 0L);
                     resultMap.put(KEY_FAIL, 0L);

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -343,6 +343,7 @@ private void updateGoodsIndex(Goods goods) {
             searchParams.setGoodsId(goods.getId());
             searchParams.setPageNumber(i);
             searchParams.setPageSize(BATCH_SIZE);
+            searchParams.setGeQuantity(0);
             IPage<GoodsSku> goodsSkuByPage = this.goodsSkuService.getGoodsSkuByPage(searchParams);
             if (goodsSkuByPage == null || goodsSkuByPage.getRecords().isEmpty()) {
                 break;

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -167,6 +167,7 @@ public void init() {
                 skuQueryWrapper.eq("gs.auth_flag", GoodsAuthEnum.PASS.name());
                 skuQueryWrapper.eq("gs.market_enable", GoodsStatusEnum.UPPER.name());
                 skuQueryWrapper.eq("gs.delete_flag", false);
+                skuQueryWrapper.ge("gs.quantity", 0);
 
 
                 Map<String, Long> resultMap = (Map<String, Long>) cache.get(CachePrefix.INIT_INDEX_PROCESS.getPrefix());
@@ -176,6 +177,7 @@ public void init() {
                     skuCountQueryWrapper.eq("auth_flag", GoodsAuthEnum.PASS.name());
                     skuCountQueryWrapper.eq("market_enable", GoodsStatusEnum.UPPER.name());
                     skuCountQueryWrapper.eq("delete_flag", false);
+                    skuCountQueryWrapper.ge("gs.quantity", 0);
                     resultMap = new HashMap<>();
                     resultMap.put(KEY_SUCCESS, 0L);
                     resultMap.put(KEY_FAIL, 0L);

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -98,7 +98,7 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
 
     @Override
     public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageVo) {
-        NativeSearchQueryBuilder builder = createSearchQueryBuilder(goodsSearch, null);
+        NativeSearchQueryBuilder builder = createSearchQueryBuilder(goodsSearch, pageVo);
         //分类
         AggregationBuilder categoryNameBuilder = AggregationBuilders.terms("categoryNameAgg").field("categoryNamePath.keyword");
         builder.addAggregation(AggregationBuilders.terms("categoryAgg").field("categoryPath").subAggregation(categoryNameBuilder));

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -98,7 +98,7 @@ public SearchPage<EsGoodsIndex> searchGoods(EsGoodsSearchDTO searchDTO, PageVO p
 
     @Override
     public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageVo) {
-        NativeSearchQueryBuilder builder = createSearchQueryBuilder(goodsSearch, null);
+        NativeSearchQueryBuilder builder = createSearchQueryBuilder(goodsSearch, pageVo);
         //分类
         AggregationBuilder categoryNameBuilder = AggregationBuilders.terms("categoryNameAgg").field("categoryNamePath.keyword");
         builder.addAggregation(AggregationBuilders.terms("categoryAgg").field("categoryPath").subAggregation(categoryNameBuilder));

File: framework/src/main/java/cn/lili/modules/store/entity/dos/Store.java
Patch:
@@ -82,7 +82,7 @@ public class Store extends BaseEntity {
     @ApiModelProperty(value = "服务评分")
     private Double serviceScore;
 
-    @ApiModelProperty(value = "物流描述")
+    @ApiModelProperty(value = "物流评分")
     private Double deliveryScore;
 
     @ApiModelProperty(value = "商品数量")

File: framework/src/main/java/cn/lili/modules/store/serviceimpl/StoreServiceImpl.java
Patch:
@@ -189,7 +189,7 @@ private Store updateStore(StoreEditDTO storeEditDTO) {
     }
 
     /**
-     * 修改店铺详细细腻
+     * 修改店铺详细信息
      *
      * @param storeEditDTO 修改店铺信息
      */
@@ -304,7 +304,7 @@ public boolean applySecondStep(StoreBankDTO storeBankDTO) {
 
         //获取当前操作的店铺
         Store store = getStoreByMember();
-        //校验迪纳普状态
+        //校验店铺状态
         checkStoreStatus(store);
         StoreDetail storeDetail = storeDetailService.getStoreDetail(store.getId());
         //设置店铺的银行信息
@@ -317,7 +317,7 @@ public boolean applyThirdStep(StoreOtherInfoDTO storeOtherInfoDTO) {
         //获取当前操作的店铺
         Store store = getStoreByMember();
 
-        //校验迪纳普状态
+        //校验店铺状态
         checkStoreStatus(store);
         BeanUtil.copyProperties(storeOtherInfoDTO, store);
 

File: seller-api/src/main/java/cn/lili/controller/other/LogisticsStoreController.java
Patch:
@@ -82,7 +82,7 @@ public ResultMessage<StoreLogistics> checked(@PathVariable String logisticsId,@R
     @DeleteMapping(value = "/{id}")
     public ResultMessage<Object> cancel(@PathVariable String id) {
         String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
-        boolean remove = storeLogisticsService.remove(new LambdaQueryWrapper<StoreLogistics>().eq(StoreLogistics::getId, id).eq(StoreLogistics::getStoreId, storeId));
+        boolean remove = storeLogisticsService.remove(new LambdaQueryWrapper<StoreLogistics>().eq(StoreLogistics::getLogisticsId, id).eq(StoreLogistics::getStoreId, storeId));
         return ResultUtil.data(remove);
     }
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/MemberCouponServiceImpl.java
Patch:
@@ -293,6 +293,7 @@ public boolean recoveryMemberCoupon(List<String> memberCouponIds) {
         LambdaUpdateWrapper<MemberCoupon> updateWrapper = new LambdaUpdateWrapper<>();
         updateWrapper.in(MemberCoupon::getId, memberCouponIds);
         updateWrapper.set(MemberCoupon::getMemberCouponStatus, MemberCouponStatusEnum.NEW.name());
+        updateWrapper.set(MemberCoupon::getConsumptionTime, null);
         return this.update(updateWrapper);
     }
 

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -455,7 +455,7 @@ public void updateBulkIndex(List<EsGoodsIndex> goodsIndices) {
     public void deleteIndex(Map<String, Object> queryFields) {
         BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
         for (Map.Entry<String, Object> entry : queryFields.entrySet()) {
-            boolQueryBuilder.filter(QueryBuilders.termsQuery(entry.getKey(), entry.getValue()));
+            boolQueryBuilder.filter(QueryBuilders.termsQuery(entry.getKey(), entry.getValue().toString()));
         }
 
         DeleteByQueryRequest deleteByQueryRequest = new DeleteByQueryRequest();

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -312,9 +312,8 @@ public Map<String, Object> getGoodsSkuDetail(String goodsId, String skuId) {
         map.put("data", goodsSkuDetail);
 
         //获取分类
-        String[] split = goodsSkuDetail.getCategoryPath().split(",");
-        map.put("wholesaleList", wholesaleService.findByGoodsId(goodsSkuDetail.getGoodsId()));
-        map.put("categoryName", categoryService.getCategoryNameByIds(Arrays.asList(split)));
+        map.put("wholesaleList", GoodsSalesModeEnum.WHOLESALE.name().equals(goodsVO.getSalesModel()) ? wholesaleService.findByGoodsId(goodsSkuDetail.getGoodsId()) : Collections.emptyList());
+        map.put("categoryName", CharSequenceUtil.isNotEmpty(goodsIndex.getCategoryNamePath()) ? goodsIndex.getCategoryNamePath().split(",") : null);
 
         //获取规格信息
         map.put("specs", this.groupBySkuAndSpec(goodsVO.getSkuList()));

File: im-api/src/main/java/cn/lili/controller/im/ImTalkController.java
Patch:
@@ -46,7 +46,7 @@ public ResultMessage<ImTalk> getUser(@PathVariable String uid) {
     @GetMapping(value = "/by/user/{userId}")
     @ApiOperation(value = "查看与某人聊天详情")
     public ResultMessage<ImTalkVO> getByUser(@PathVariable String userId) {
-        return ResultUtil.data(new ImTalkVO(imTalkService.getTalkByUser(userId),userId));
+        return ResultUtil.data(imTalkService.getTalkByUserId(userId));
     }
 
     @GetMapping(value = "/top")

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -148,6 +148,7 @@ public enum ResultCode {
     CLERK_ALREADY_EXIT_ERROR(20030, "店员已经存在"),
     CLERK_DISABLED_ERROR(20031, "店员已禁用"),
     CLERK_CURRENT_SUPPER(20032, "无法删除当前登录店员"),
+    CANT_EDIT_CLERK_SHOPKEEPER(20033, "无法在店员管理编辑店员信息"),
     /**
      * 权限
      */

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -133,7 +133,7 @@ public void underStoreGoods(String storeId) {
         //获取商品ID列表
         List<String> list = this.baseMapper.getGoodsIdByStoreId(storeId);
         //下架店铺下的商品
-        updateGoodsMarketAble(list, GoodsStatusEnum.DOWN, "店铺关闭");
+        this.updateGoodsMarketAbleByStoreId(storeId, GoodsStatusEnum.DOWN, "店铺关闭");
 
         applicationEventPublisher.publishEvent(new TransactionCommitSendMQEvent("下架商品",
                 rocketmqCustomProperties.getGoodsTopic(), GoodsTagsEnum.DOWN.name(), JSONUtil.toJsonStr(list)));

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/CheckDataRender.java
Patch:
@@ -259,7 +259,7 @@ private void preCalibration(TradeDTO tradeDTO) {
      */
     private void preSaleModel(TradeDTO tradeDTO) {
         // 寻找同goods下销售模式为批发的商品
-        Map<String, List<CartSkuVO>> goodsGroup = tradeDTO.getSkuList().stream().filter(i -> i.getGoodsSku().getSalesModel().equals(GoodsSalesModeEnum.WHOLESALE.name())).collect(Collectors.groupingBy(i -> i.getGoodsSku().getGoodsId()));
+        Map<String, List<CartSkuVO>> goodsGroup = tradeDTO.getCheckedSkuList().stream().filter(i -> i.getGoodsSku().getSalesModel().equals(GoodsSalesModeEnum.WHOLESALE.name())).collect(Collectors.groupingBy(i -> i.getGoodsSku().getGoodsId()));
         if (CollUtil.isNotEmpty(goodsGroup)) {
             goodsGroup.forEach((k, v) -> {
                 // 获取购买总数

File: framework/src/main/java/cn/lili/common/utils/HttpClientUtils.java
Patch:
@@ -183,7 +183,6 @@ public static String doGet(String url, Map<String, String> param) {
                 if (response != null) {
                     response.close();
                 }
-                httpClient.close();
             } catch (IOException e) {
                 log.error("Get错误", e);
             }

File: framework/src/main/java/cn/lili/modules/wechat/serviceimpl/WechatMessageServiceImpl.java
Patch:
@@ -138,13 +138,13 @@ private List<WechatMessageData> initData() {
         List<WechatMessageData> msg = new ArrayList<>();
         //新订单消息提示
         msg.add(new WechatMessageData(
-                "待支付",
-                "您有新订单需要支付",
+                "订单支付成功通知",
+                "订单支付成功通知",
                 "如有问题，请联系在线客服",
                 "OPENTM207498902",
                 WechatMessageItemEnums.MEMBER_NAME.name() + "," + WechatMessageItemEnums.ORDER_SN.name() + "," +
                         WechatMessageItemEnums.PRICE.name() + "," + WechatMessageItemEnums.GOODS_INFO.name(),
-                OrderStatusEnum.UNPAID));
+                OrderStatusEnum.UNDELIVERED));
         //已发货
         msg.add(new WechatMessageData(
                 "订单发货",

File: framework/src/main/java/cn/lili/modules/wechat/util/WechatMessageData.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.modules.wechat.util;
 
-import cn.hutool.json.JSONUtil;
 import lombok.Data;
 
 import java.util.HashMap;
@@ -48,7 +47,7 @@ public class WechatMessageData {
      *
      * @return
      */
-    public String createData() {
+    public Map<String, Map<String, String>> createData() {
 
         Map<String, Map<String, String>> dataMap = new LinkedHashMap<>();
 
@@ -62,7 +61,7 @@ public String createData() {
         //拼接备注
         dataMap.put("remark", createValue(this.remark));
 
-        return JSONUtil.toJsonStr(dataMap);
+        return dataMap;
     }
 
 

File: manager-api/src/main/java/cn/lili/controller/wechat/WechatMessageManageController.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.controller.wechat;
 
+import cn.lili.common.aop.annotation.DemoSite;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
@@ -31,6 +32,7 @@ public class WechatMessageManageController {
 
     @GetMapping(value = "/init")
     @ApiOperation(value = "初始化微信消息")
+    @DemoSite
     public ResultMessage init() {
         wechatMessageService.init();
         return ResultUtil.success();

File: framework/src/main/java/cn/lili/modules/wechat/util/WechatMessageUtil.java
Patch:
@@ -7,7 +7,6 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.utils.DateUtil;
-import cn.lili.common.utils.HttpUtils;
 import cn.lili.common.utils.StringUtils;
 import cn.lili.modules.connect.entity.Connect;
 import cn.lili.modules.connect.entity.enums.ConnectEnum;
@@ -111,7 +110,7 @@ public void wechatMessage(String sn) {
         map.put("data", postParams);
 
         log.info("参数内容：" + JSONUtil.toJsonStr(map));
-        String content = HttpUtils.doPostWithJson(url, map);
+        String content = HttpUtil.post(url, JSONUtil.toJsonStr(map));
         JSONObject json = new JSONObject(content);
         log.info("微信消息发送结果：" + content);
         String errorMessage = json.getStr("errmsg");

File: framework/src/main/java/cn/lili/modules/logistics/plugin/shunfeng/ShunfengPlugin.java
Patch:
@@ -32,7 +32,6 @@
  * @author admin
  */
 @Slf4j
-@Component
 public class ShunfengPlugin implements LogisticsPlugin {
 
     /**

File: framework/src/main/java/cn/lili/modules/im/service/ImTalkService.java
Patch:
@@ -17,10 +17,9 @@ public interface ImTalkService extends IService<ImTalk> {
      * 获取与某人的聊天框
      *
      * @param userId1
-     * @param userId2
      * @return
      */
-    ImTalk getTalkByUser(String userId1, String userId2);
+    ImTalk getTalkByUser(String userId1);
 
     /**
      * 置顶消息
@@ -41,7 +40,7 @@ public interface ImTalkService extends IService<ImTalk> {
      * 获取用户聊天列表
      * @return
      */
-    List<ImTalkVO> getUserTalkList(String userName);
+    List<ImTalkVO> getUserTalkList();
 
     /**
      * 获取商家聊天列表

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -221,7 +221,7 @@ public enum ResultCode {
     PAY_POINT_ENOUGH(32010, "积分不足，不能兑换"),
     PAY_NOT_EXIST_ORDER(32011, "支付订单不存在"),
     CAN_NOT_RECHARGE_WALLET(32012, "不能使用余额进行充值"),
-
+    RECHARGE_PRICE_ERROR(32013, "充值金额错误"),
 
     /**
      * 售后
@@ -259,7 +259,7 @@ public enum ResultCode {
     WALLET_REMARK_ERROR(34004, "请填写审核备注！"),
     WALLET_EXIT_ERROR(34000, "钱包已存在，无法重复创建"),
     WALLET_APPLY_ERROR(34005, "提现申请异常！"),
-
+    WALLET_WITHDRAWAL_AMOUNT_ERROR(34006, "申请提现金额异常！"),
     /**
      * 评价
      */
@@ -502,6 +502,7 @@ public enum ResultCode {
     PURCHASE_ORDER_DEADLINE_ERROR(90004, "供求单，已超过报名截止时间"),
     INDEX_BUILDING(90005, "索引正在生成");
 
+
     private final Integer code;
     private final String message;
 

File: im-api/src/main/java/cn/lili/controller/security/AnnotationExample.java
Patch:
@@ -1,3 +0,0 @@
-package cn.lili.controller.security;
-public class AnnotationExample {
-}

File: im-api/src/main/java/cn/lili/controller/security/AnnotationExample.java
Patch:
@@ -0,0 +1,2 @@
+package cn.lili.controller.security;public class Cop {
+}

File: consumer/src/main/java/cn/lili/event/impl/RegisteredCouponActivityExecute.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.event.impl;
 
+import cn.hutool.core.text.CharSequenceUtil;
 import cn.lili.cache.Cache;
 import cn.lili.cache.CachePrefix;
-import cn.lili.common.utils.StringUtils;
 import cn.lili.event.MemberRegisterEvent;
 import cn.lili.modules.member.entity.dos.Member;
 import cn.lili.modules.member.service.MemberService;
@@ -46,7 +46,7 @@ public void memberRegister(Member member) {
                 .build());
         //邀请人赠券
         String memberId = (String) cache.get(CachePrefix.INVITER.getPrefix() + member.getId());
-        if (StringUtils.isNotEmpty(memberId)) {
+        if (CharSequenceUtil.isNotEmpty(memberId)) {
             //邀请人
             Member inviter = memberService.getById(memberId);
             couponActivityService.trigger(CouponActivityTrigger.builder()

File: framework/src/main/java/cn/lili/modules/goods/entity/vos/DraftGoodsVO.java
Patch:
@@ -5,6 +5,7 @@
 import cn.lili.modules.goods.entity.dto.GoodsParamsDTO;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 
 import java.util.List;
 
@@ -14,6 +15,7 @@
  * @author pikachu
  * @since 2020-02-26 23:24:13
  */
+@EqualsAndHashCode(callSuper = true)
 @Data
 public class DraftGoodsVO extends DraftGoods {
 

File: framework/src/main/java/cn/lili/modules/member/entity/dos/FootPrint.java
Patch:
@@ -6,6 +6,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 
 
@@ -15,6 +16,7 @@
  * @author Chopper
  * @since 2020/11/17 7:22 下午
  */
+@EqualsAndHashCode(callSuper = true)
 @Data
 @TableName("li_foot_print")
 @ApiModel(value = "浏览历史")

File: framework/src/main/java/cn/lili/modules/member/entity/dos/MemberEvaluation.java
Patch:
@@ -1,9 +1,9 @@
 package cn.lili.modules.member.entity.dos;
 
+import cn.hutool.core.text.CharSequenceUtil;
 import cn.lili.common.enums.SwitchEnum;
 import cn.lili.common.security.sensitive.Sensitive;
 import cn.lili.common.security.sensitive.enums.SensitiveStrategy;
-import cn.lili.common.utils.StringUtils;
 import cn.lili.modules.goods.entity.dos.GoodsSku;
 import cn.lili.modules.member.entity.dto.MemberEvaluationDTO;
 import cn.lili.modules.order.order.entity.dos.Order;
@@ -131,7 +131,7 @@ public MemberEvaluation(MemberEvaluationDTO memberEvaluationDTO, GoodsSku goodsS
         //设置订单编号
         this.orderNo = order.getSn();
         //是否包含图片
-        this.haveImage = StringUtils.isNotEmpty(memberEvaluationDTO.getImages());
+        this.haveImage = CharSequenceUtil.isNotEmpty(memberEvaluationDTO.getImages());
         //默认开启评价
         this.status = SwitchEnum.OPEN.name();
     }

File: framework/src/main/java/cn/lili/modules/member/service/StoreLogisticsService.java
Patch:
@@ -89,5 +89,4 @@ public interface StoreLogisticsService extends IService<StoreLogistics> {
      */
     List<StoreLogisticsVO> getCloseStoreLogistics(String storeId);
 
-
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -42,7 +42,6 @@
 import cn.lili.mybatis.util.PageUtil;
 import cn.lili.rocketmq.RocketmqSendCallbackBuilder;
 import cn.lili.rocketmq.tags.MemberTagsEnum;
-import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
@@ -715,7 +714,6 @@ public boolean updateMemberLoginTime(String memberId) {
 
     @Override
     public MemberVO getMember(String id) {
-        Member byId = this.getById(id);
         return new MemberVO(this.getById(id));
     }
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/dos/CouponActivity.java
Patch:
@@ -23,6 +23,7 @@
 @ApiModel(value = "优惠券活动实体类")
 public class CouponActivity extends BasePromotions {
 
+    private static final long serialVersionUID = 4230258450334305951L;
     /**
      * @see CouponActivityTypeEnum
      */

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/MemberCouponVO.java
Patch:
@@ -5,6 +5,7 @@
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
 
 /**
  * MemberCouponVO
@@ -15,6 +16,7 @@
  */
 @EqualsAndHashCode(callSuper = true)
 @Data
+@NoArgsConstructor
 public class MemberCouponVO extends MemberCoupon {
 
     private static final long serialVersionUID = -5533168813075444962L;
@@ -30,7 +32,4 @@ public MemberCouponVO(MemberCoupon memberCoupon, String reason) {
         this.reason = reason;
     }
 
-    public MemberCouponVO(){
-
-    }
 }

File: framework/src/main/java/cn/lili/modules/promotion/service/PromotionGoodsService.java
Patch:
@@ -7,7 +7,7 @@
 import cn.lili.modules.goods.entity.dto.GoodsSkuDTO;
 import cn.lili.modules.promotion.entity.dos.PromotionGoods;
 import cn.lili.modules.promotion.entity.dto.search.PromotionGoodsSearchParams;
-import com.baomidou.mybatisplus.core.metadata.IPage;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.baomidou.mybatisplus.extension.service.IService;
 
 import java.util.Date;
@@ -60,7 +60,7 @@ static String getPromotionGoodsStockCacheKey(PromotionTypeEnum typeEnum, String
      * @param pageVo       分页参数
      * @return 促销商品列表
      */
-    IPage<PromotionGoods> pageFindAll(PromotionGoodsSearchParams searchParams, PageVO pageVo);
+    Page<PromotionGoods> pageFindAll(PromotionGoodsSearchParams searchParams, PageVO pageVo);
 
     /**
      * 获取促销商品信息

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
-import com.baomidou.mybatisplus.core.metadata.IPage;
+import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.redis.core.StringRedisTemplate;
@@ -115,7 +115,7 @@ public List<PromotionGoods> findSkuValidPromotions(List<GoodsSkuDTO> skus) {
     }
 
     @Override
-    public IPage<PromotionGoods> pageFindAll(PromotionGoodsSearchParams searchParams, PageVO pageVo) {
+    public Page<PromotionGoods> pageFindAll(PromotionGoodsSearchParams searchParams, PageVO pageVo) {
         return this.page(PageUtil.initPage(pageVo), searchParams.queryWrapper());
     }
 

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsSearchServiceImpl.java
Patch:
@@ -120,8 +120,6 @@ public EsGoodsRelatedInfo getSelector(EsGoodsSearchDTO goodsSearch, PageVO pageV
     @Override
     public List<EsGoodsIndex> getEsGoodsBySkuIds(List<String> skuIds, PageVO pageVo) {
         NativeSearchQueryBuilder searchQueryBuilder = new NativeSearchQueryBuilder();
-        NativeSearchQuery build = searchQueryBuilder.build();
-        build.setIds(skuIds);
         if (pageVo != null) {
             int pageNumber = pageVo.getPageNumber() - 1;
             if (pageNumber < 0) {
@@ -131,6 +129,8 @@ public List<EsGoodsIndex> getEsGoodsBySkuIds(List<String> skuIds, PageVO pageVo)
             //分页
             searchQueryBuilder.withPageable(pageable);
         }
+        NativeSearchQuery build = searchQueryBuilder.build();
+        build.setIds(skuIds);
         return restTemplate.multiGet(build, EsGoodsIndex.class, restTemplate.getIndexCoordinatesFor(EsGoodsIndex.class));
     }
 

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberSignServiceImpl.java
Patch:
@@ -73,7 +73,7 @@ public Boolean memberSign() {
             LambdaQueryWrapper<MemberSign> queryWrapper = new LambdaQueryWrapper<>();
             queryWrapper.eq(MemberSign::getMemberId, authUser.getId());
             List<MemberSign> signSize = this.baseMapper.getTodayMemberSign(queryWrapper);
-            if (signSize.size() > 0) {
+            if (signSize.isEmpty()) {
                 throw new ServiceException(ResultCode.MEMBER_SIGN_REPEAT);
             }
             //当前签到天数的前一天日期

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/CheckDataRender.java
Patch:
@@ -111,7 +111,7 @@ private void checkData(TradeDTO tradeDTO) {
             Map<String, Object> promotionMap = promotionGoodsService.getCurrentGoodsPromotion(dataSku, tradeDTO.getCartTypeEnum().name());
             //商品有效性判定
             log.info("dataSku: {}, goodsSku: {}", dataSku, cartSkuVO.getGoodsSku());
-            if (dataSku == null || cartSkuVO.getGoodsSku() == null || dataSku.getUpdateTime().after(cartSkuVO.getGoodsSku().getUpdateTime())) {
+            if (dataSku == null || (dataSku.getUpdateTime() != null && dataSku.getUpdateTime().after(cartSkuVO.getGoodsSku().getUpdateTime()))) {
                 //商品失效,将商品移除并重新填充商品
                 cartSkuVOS.remove(cartSkuVO);
                 //设置新商品

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/CheckDataRender.java
Patch:
@@ -110,7 +110,8 @@ private void checkData(TradeDTO tradeDTO) {
             GoodsSku dataSku = goodsSkuService.getGoodsSkuByIdFromCache(cartSkuVO.getGoodsSku().getId());
             Map<String, Object> promotionMap = promotionGoodsService.getCurrentGoodsPromotion(dataSku, tradeDTO.getCartTypeEnum().name());
             //商品有效性判定
-            if (dataSku == null || dataSku.getUpdateTime().after(cartSkuVO.getGoodsSku().getUpdateTime())) {
+            log.info("dataSku: {}, goodsSku: {}", dataSku, cartSkuVO.getGoodsSku());
+            if (dataSku == null || cartSkuVO.getGoodsSku() == null || dataSku.getUpdateTime().after(cartSkuVO.getGoodsSku().getUpdateTime())) {
                 //商品失效,将商品移除并重新填充商品
                 cartSkuVOS.remove(cartSkuVO);
                 //设置新商品

File: framework/src/main/java/cn/lili/elasticsearch/BaseElasticsearchService.java
Patch:
@@ -325,7 +325,7 @@ public void createMapping(String index) throws Exception {
                         "        }\n" +
                         "      },\n" +
                         "      \"promotionMapJson\": {\n" +
-                        "        \"type\": \"text\"\n" +
+                        "        \"type\": \"keyword\"\n" +
                         "      },\n" +
                         "      \"thumbnail\": {\n" +
                         "        \"type\": \"text\",\n" +

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -508,6 +508,7 @@ public void updateStock(String skuId, Integer quantity) {
             List<GoodsSku> goodsSkus = new ArrayList<>();
             goodsSkus.add(goodsSku);
             this.updateGoodsStuck(goodsSkus);
+            this.promotionGoodsService.updatePromotionGoodsStock(goodsSku.getId(), quantity);
         }
     }
 

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -239,7 +239,8 @@ public void init() {
                         List<PromotionGoods> promotionGoods = skuValidPromotions.stream()
                                 .filter(j ->
                                         (CharSequenceUtil.isNotEmpty(j.getSkuId()) && j.getSkuId().equals(goodsSku.getId())) ||
-                                                j.getScopeType().equals(PromotionsScopeTypeEnum.ALL.name()) ||
+                                                (j.getScopeType().equals(PromotionsScopeTypeEnum.ALL.name()) && j.getStoreId().equals("0")) ||
+                                                (j.getScopeType().equals(PromotionsScopeTypeEnum.ALL.name()) && j.getStoreId().equals(esGoodsIndex.getStoreId())) ||
                                                 (j.getScopeType().equals(PromotionsScopeTypeEnum.PORTION_GOODS_CATEGORY.name()) && j.getScopeId().contains(goodsSku.getCategoryPath())))
                                 .collect(Collectors.toList());
                         if (CollUtil.isNotEmpty(promotionGoods)) {

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -6,7 +6,6 @@
 import cn.hutool.json.JSONUtil;
 import cn.lili.cache.Cache;
 import cn.lili.common.enums.PromotionTypeEnum;
-import cn.lili.common.utils.StringUtils;
 import cn.lili.common.vo.PageVO;
 import cn.lili.modules.goods.entity.dos.GoodsSku;
 import cn.lili.modules.goods.entity.dto.GoodsSkuDTO;
@@ -100,7 +99,7 @@ public List<PromotionGoods> findSkuValidPromotions(List<GoodsSkuDTO> skus) {
         List<String> skuIds = skus.stream().map(GoodsSku::getId).collect(Collectors.toList());
         List<String> categoriesPath = new ArrayList<>();
         categories.forEach(i -> {
-                    if (StringUtils.isNotEmpty(i)) {
+                    if (CharSequenceUtil.isNotEmpty(i)) {
                         categoriesPath.addAll(Arrays.asList(i.split(",")));
                     }
                 }

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -239,7 +239,8 @@ public void init() {
                         List<PromotionGoods> promotionGoods = skuValidPromotions.stream()
                                 .filter(j ->
                                         (CharSequenceUtil.isNotEmpty(j.getSkuId()) && j.getSkuId().equals(goodsSku.getId())) ||
-                                                j.getScopeType().equals(PromotionsScopeTypeEnum.ALL.name()) ||
+                                                (j.getScopeType().equals(PromotionsScopeTypeEnum.ALL.name()) && j.getStoreId().equals("0")) ||
+                                                (j.getScopeType().equals(PromotionsScopeTypeEnum.ALL.name()) && j.getStoreId().equals(esGoodsIndex.getStoreId())) ||
                                                 (j.getScopeType().equals(PromotionsScopeTypeEnum.PORTION_GOODS_CATEGORY.name()) && j.getScopeId().contains(goodsSku.getCategoryPath())))
                                 .collect(Collectors.toList());
                         if (CollUtil.isNotEmpty(promotionGoods)) {

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/MemberCouponServiceImpl.java
Patch:
@@ -316,10 +316,10 @@ public Page<MemberCouponVO> getMemberCouponsPage(Page<MemberCoupon> page, Member
         queryWrapper.eq(CharSequenceUtil.isNotEmpty(param.getCouponType()), "mc.coupon_type", param.getCouponType());
         queryWrapper.eq(CharSequenceUtil.isNotEmpty(param.getMemberCouponStatus()), "mc.member_coupon_status", param.getMemberCouponStatus());
         if (param.getStartTime() != null) {
-            queryWrapper.ge("start_time", new Date(param.getStartTime()));
+            queryWrapper.ge("mc.start_time", new Date(param.getStartTime()));
         }
         if (param.getEndTime() != null) {
-            queryWrapper.le("end_time", new Date(param.getEndTime()));
+            queryWrapper.le("mc.end_time", new Date(param.getEndTime()));
         }
         return this.baseMapper.getMemberCoupons(page, queryWrapper);
     }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -508,6 +508,7 @@ public void updateStock(String skuId, Integer quantity) {
             List<GoodsSku> goodsSkus = new ArrayList<>();
             goodsSkus.add(goodsSku);
             this.updateGoodsStuck(goodsSkus);
+            this.promotionGoodsService.updatePromotionGoodsStock(goodsSku.getId(), quantity);
         }
     }
 

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -37,6 +37,7 @@ public enum ResultCode {
     LIMIT_ERROR(1003, "访问过于频繁，请稍后再试"),
     ILLEGAL_REQUEST_ERROR(1004, "非法请求，请重新刷新页面操作"),
     IMAGE_FILE_EXT_ERROR(1005, "不支持图片格式"),
+    FILE_NOT_EXIST_ERROR(1011, "上传文件不能为空"),
     FILE_TYPE_NOT_SUPPORT(1010, "不支持上传的文件类型！"),
     PLATFORM_NOT_SUPPORTED_IM(1006, "平台未开启IM"),
     STORE_NOT_SUPPORTED_IM(1007, "店铺未开启IM"),
@@ -80,6 +81,7 @@ public enum ResultCode {
 
     HAVE_INVALID_SALES_MODEL(11023, "批发规则存在小于等于0的无效数据！"),
     MUST_HAVE_GOODS_SKU_VALUE(11024, "规格值不能为空！"),
+    DO_NOT_MATCH_WHOLESALE(11025, "批发商品购买数量不能低于起拍量！"),
 
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/WholesaleServiceImpl.java
Patch:
@@ -2,6 +2,8 @@
 
 import cn.hutool.core.collection.CollUtil;
 import cn.lili.cache.Cache;
+import cn.lili.common.enums.ResultCode;
+import cn.lili.common.exception.ServiceException;
 import cn.lili.modules.goods.entity.dos.Wholesale;
 import cn.lili.modules.goods.mapper.WholesaleMapper;
 import cn.lili.modules.goods.service.WholesaleService;
@@ -75,7 +77,7 @@ public Wholesale match(String goodsId, Integer num) {
         if (CollUtil.isNotEmpty(matchList)) {
             return matchList.get(matchList.size() - 1);
         } else if (CollUtil.isNotEmpty(wholesaleList) && CollUtil.isEmpty(matchList)) {
-            return wholesaleList.get(0);
+            throw new ServiceException(ResultCode.DO_NOT_MATCH_WHOLESALE);
         }
         return null;
     }

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -81,7 +81,7 @@ public enum ResultCode {
 
     HAVE_INVALID_SALES_MODEL(11023, "批发规则存在小于等于0的无效数据！"),
     MUST_HAVE_GOODS_SKU_VALUE(11024, "规格值不能为空！"),
-    DO_NOT_MATCH_WHOLESALE(11025, "没有匹配的批发规则！"),
+    DO_NOT_MATCH_WHOLESALE(11025, "批发商品购买数量不能低于起拍量！"),
 
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -81,6 +81,7 @@ public enum ResultCode {
 
     HAVE_INVALID_SALES_MODEL(11023, "批发规则存在小于等于0的无效数据！"),
     MUST_HAVE_GOODS_SKU_VALUE(11024, "规格值不能为空！"),
+    DO_NOT_MATCH_WHOLESALE(11025, "没有匹配的批发规则！"),
 
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/WholesaleServiceImpl.java
Patch:
@@ -2,6 +2,8 @@
 
 import cn.hutool.core.collection.CollUtil;
 import cn.lili.cache.Cache;
+import cn.lili.common.enums.ResultCode;
+import cn.lili.common.exception.ServiceException;
 import cn.lili.modules.goods.entity.dos.Wholesale;
 import cn.lili.modules.goods.mapper.WholesaleMapper;
 import cn.lili.modules.goods.service.WholesaleService;
@@ -75,7 +77,7 @@ public Wholesale match(String goodsId, Integer num) {
         if (CollUtil.isNotEmpty(matchList)) {
             return matchList.get(matchList.size() - 1);
         } else if (CollUtil.isNotEmpty(wholesaleList) && CollUtil.isEmpty(matchList)) {
-            return wholesaleList.get(0);
+            throw new ServiceException(ResultCode.DO_NOT_MATCH_WHOLESALE);
         }
         return null;
     }

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -37,6 +37,7 @@ public enum ResultCode {
     LIMIT_ERROR(1003, "访问过于频繁，请稍后再试"),
     ILLEGAL_REQUEST_ERROR(1004, "非法请求，请重新刷新页面操作"),
     IMAGE_FILE_EXT_ERROR(1005, "不支持图片格式"),
+    FILE_NOT_EXIST_ERROR(1011, "上传文件不能为空"),
     FILE_TYPE_NOT_SUPPORT(1010, "不支持上传的文件类型！"),
     PLATFORM_NOT_SUPPORTED_IM(1006, "平台未开启IM"),
     STORE_NOT_SUPPORTED_IM(1007, "店铺未开启IM"),

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsImportServiceImpl.java
Patch:
@@ -10,9 +10,9 @@
 import cn.lili.modules.goods.entity.dto.GoodsOperationDTO;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.goods.service.CategoryService;
+import cn.lili.modules.goods.service.GoodsImportService;
 import cn.lili.modules.goods.service.GoodsService;
 import cn.lili.modules.goods.service.GoodsUnitService;
-import cn.lili.modules.goods.service.GoodsImportService;
 import cn.lili.modules.store.entity.vos.FreightTemplateVO;
 import cn.lili.modules.store.service.FreightTemplateService;
 import cn.lili.modules.store.service.StoreDetailService;
@@ -263,7 +263,7 @@ private void excelTo255(Workbook workbook, String sheetName, int sheetNameIndex,
         Name namedCell = workbook.createName();
         namedCell.setNameName(sheetName);
         // 设置名称引用的公式
-        namedCell.setRefersToFormula(sheetName + "!$A$1:$A$" + sheetData.length);
+        namedCell.setRefersToFormula(sheetName + "!$A$1:$A$" + (sheetData.length > 0 ? sheetData.length : 1));
         //加载数据,将名称为hidden的sheet中的数据转换为List形式
         DVConstraint constraint = DVConstraint.createFormulaListConstraint(sheetName);
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsImportServiceImpl.java
Patch:
@@ -10,9 +10,9 @@
 import cn.lili.modules.goods.entity.dto.GoodsOperationDTO;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.goods.service.CategoryService;
+import cn.lili.modules.goods.service.GoodsImportService;
 import cn.lili.modules.goods.service.GoodsService;
 import cn.lili.modules.goods.service.GoodsUnitService;
-import cn.lili.modules.goods.service.GoodsImportService;
 import cn.lili.modules.store.entity.vos.FreightTemplateVO;
 import cn.lili.modules.store.service.FreightTemplateService;
 import cn.lili.modules.store.service.StoreDetailService;
@@ -263,7 +263,7 @@ private void excelTo255(Workbook workbook, String sheetName, int sheetNameIndex,
         Name namedCell = workbook.createName();
         namedCell.setNameName(sheetName);
         // 设置名称引用的公式
-        namedCell.setRefersToFormula(sheetName + "!$A$1:$A$" + sheetData.length);
+        namedCell.setRefersToFormula(sheetName + "!$A$1:$A$" + (sheetData.length > 0 ? sheetData.length : 1));
         //加载数据,将名称为hidden的sheet中的数据转换为List形式
         DVConstraint constraint = DVConstraint.createFormulaListConstraint(sheetName);
 

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Goods.java
Patch:
@@ -8,7 +8,6 @@
 import cn.lili.common.exception.ServiceException;
 import cn.lili.modules.goods.entity.dto.DraftGoodsDTO;
 import cn.lili.modules.goods.entity.dto.GoodsOperationDTO;
-import cn.lili.modules.goods.entity.dto.GoodsOperationFuLuDTO;
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsSalesModeEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsService.java
Patch:
@@ -2,7 +2,6 @@
 
 import cn.lili.modules.goods.entity.dos.Goods;
 import cn.lili.modules.goods.entity.dto.GoodsOperationDTO;
-import cn.lili.modules.goods.entity.dto.GoodsOperationFuLuDTO;
 import cn.lili.modules.goods.entity.dto.GoodsSearchParams;
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 import cn.lili.modules.goods.entity.dos.GoodsGallery;
 import cn.lili.modules.goods.entity.dos.Wholesale;
 import cn.lili.modules.goods.entity.dto.GoodsOperationDTO;
-import cn.lili.modules.goods.entity.dto.GoodsOperationFuLuDTO;
 import cn.lili.modules.goods.entity.dto.GoodsParamsDTO;
 import cn.lili.modules.goods.entity.dto.GoodsSearchParams;
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;

File: seller-api/src/main/java/cn/lili/controller/settings/StoreSettingsController.java
Patch:
@@ -3,7 +3,6 @@
 
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.ResultMessage;
-import cn.lili.modules.store.entity.dto.FuLuConfigureDTO;
 import cn.lili.modules.store.entity.dto.StoreAfterSaleAddressDTO;
 import cn.lili.modules.store.entity.dto.StoreDeliverGoodsAddressDTO;
 import cn.lili.modules.store.entity.dto.StoreSettingDTO;

File: framework/src/main/java/cn/lili/modules/distribution/mapper/DistributionOrderMapper.java
Patch:
@@ -20,8 +20,8 @@ public interface DistributionOrderMapper extends BaseMapper<DistributionOrder> {
      * @param settleCycle             时间
      */
     @Update("UPDATE li_distribution AS d " +
-            "SET d.can_rebate =(d.can_rebate +(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ))" +
-            ",d.commission_frozen =(d.commission_frozen -(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ) )")
+            "SET d.can_rebate =(ifnull(d.can_rebate,0) +(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ))" +
+            ",d.commission_frozen =(ifnull(d.commission_frozen,0) -(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ) )")
     void rebate(String distributionOrderStatus, DateTime settleCycle);
 
-}
\ No newline at end of file
+}

File: framework/src/main/java/cn/lili/cache/limit/interceptor/LimitInterceptor.java
Patch:
@@ -61,7 +61,7 @@ public void interceptor(LimitPoint limitPointAnnotation) {
             assert count != null;
             log.info("限制请求{}, 当前请求{},缓存key{}", limitCount, count.intValue(), key);
             //如果缓存里没有值，或者他的值小于限制频率
-            if (count.intValue() >= limitCount) {
+            if (count.intValue() > limitCount) {
                 throw new ServiceException(ResultCode.LIMIT_ERROR);
             }
         }

File: framework/src/main/java/cn/lili/modules/distribution/mapper/DistributionOrderMapper.java
Patch:
@@ -20,8 +20,8 @@ public interface DistributionOrderMapper extends BaseMapper<DistributionOrder> {
      * @param settleCycle             时间
      */
     @Update("UPDATE li_distribution AS d " +
-            "SET d.can_rebate =(d.can_rebate +(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ))" +
-            ",d.commission_frozen =(d.commission_frozen -(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ) )")
+            "SET d.can_rebate =(ifnull(d.can_rebate,0) +(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ))" +
+            ",d.commission_frozen =(ifnull(d.commission_frozen,0) -(SELECT SUM( dorder.rebate ) FROM li_distribution_order AS dorder WHERE dorder.distribution_order_status = #{distributionOrderStatus} AND dorder.settle_cycle< #{settleCycle} AND dorder.distribution_id = d.id ) )")
     void rebate(String distributionOrderStatus, DateTime settleCycle);
 
-}
\ No newline at end of file
+}

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/FootprintServiceImpl.java
Patch:
@@ -90,9 +90,7 @@ public IPage<EsGoodsIndex> footPrintPage(PageVO pageVO) {
             return esGoodsIndexIPage;
         } else {
             List<EsGoodsIndex> list = esGoodsSearchService.getEsGoodsBySkuIds(
-                    footPrintPages.getRecords().stream().map(FootPrint::getSkuId).collect(Collectors.toList()));
-            //去除为空的商品数据
-            list.removeIf(Objects::isNull);
+                    footPrintPages.getRecords().stream().map(FootPrint::getSkuId).collect(Collectors.toList()), pageVO);
 
             esGoodsIndexIPage.setPages(footPrintPages.getPages());
             esGoodsIndexIPage.setRecords(list);

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -348,7 +348,7 @@ public Long getCanUseCoupon(CartTypeEnum checkedWay) {
         if (tradeDTO.getSkuList() != null && !tradeDTO.getSkuList().isEmpty()) {
             List<String> ids = tradeDTO.getSkuList().stream().filter(i -> Boolean.TRUE.equals(i.getChecked())).map(i -> i.getGoodsSku().getId()).collect(Collectors.toList());
 
-            List<EsGoodsIndex> esGoodsList = esGoodsSearchService.getEsGoodsBySkuIds(ids);
+            List<EsGoodsIndex> esGoodsList = esGoodsSearchService.getEsGoodsBySkuIds(ids, null);
             for (EsGoodsIndex esGoodsIndex : esGoodsList) {
                 if (esGoodsIndex != null && esGoodsIndex.getPromotionMap() != null && !esGoodsIndex.getPromotionMap().isEmpty()) {
                     List<String> couponIds = esGoodsIndex.getPromotionMap().keySet().stream().filter(i -> i.contains(PromotionTypeEnum.COUPON.name())).map(i -> i.substring(i.lastIndexOf("-") + 1)).collect(Collectors.toList());

File: framework/src/main/java/cn/lili/modules/search/service/EsGoodsSearchService.java
Patch:
@@ -40,7 +40,7 @@ public interface EsGoodsSearchService {
      * @param skuIds SkuId列表
      * @return ES商品列表
      */
-    List<EsGoodsIndex> getEsGoodsBySkuIds(List<String> skuIds);
+    List<EsGoodsIndex> getEsGoodsBySkuIds(List<String> skuIds, PageVO pageVo);
 
     /**
      * 根据id获取商品索引

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/FootprintServiceImpl.java
Patch:
@@ -90,9 +90,7 @@ public IPage<EsGoodsIndex> footPrintPage(PageVO pageVO) {
             return esGoodsIndexIPage;
         } else {
             List<EsGoodsIndex> list = esGoodsSearchService.getEsGoodsBySkuIds(
-                    footPrintPages.getRecords().stream().map(FootPrint::getSkuId).collect(Collectors.toList()));
-            //去除为空的商品数据
-            list.removeIf(Objects::isNull);
+                    footPrintPages.getRecords().stream().map(FootPrint::getSkuId).collect(Collectors.toList()), pageVO);
 
             esGoodsIndexIPage.setPages(footPrintPages.getPages());
             esGoodsIndexIPage.setRecords(list);

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -348,7 +348,7 @@ public Long getCanUseCoupon(CartTypeEnum checkedWay) {
         if (tradeDTO.getSkuList() != null && !tradeDTO.getSkuList().isEmpty()) {
             List<String> ids = tradeDTO.getSkuList().stream().filter(i -> Boolean.TRUE.equals(i.getChecked())).map(i -> i.getGoodsSku().getId()).collect(Collectors.toList());
 
-            List<EsGoodsIndex> esGoodsList = esGoodsSearchService.getEsGoodsBySkuIds(ids);
+            List<EsGoodsIndex> esGoodsList = esGoodsSearchService.getEsGoodsBySkuIds(ids, null);
             for (EsGoodsIndex esGoodsIndex : esGoodsList) {
                 if (esGoodsIndex != null && esGoodsIndex.getPromotionMap() != null && !esGoodsIndex.getPromotionMap().isEmpty()) {
                     List<String> couponIds = esGoodsIndex.getPromotionMap().keySet().stream().filter(i -> i.contains(PromotionTypeEnum.COUPON.name())).map(i -> i.substring(i.lastIndexOf("-") + 1)).collect(Collectors.toList());

File: framework/src/main/java/cn/lili/modules/search/service/EsGoodsSearchService.java
Patch:
@@ -40,7 +40,7 @@ public interface EsGoodsSearchService {
      * @param skuIds SkuId列表
      * @return ES商品列表
      */
-    List<EsGoodsIndex> getEsGoodsBySkuIds(List<String> skuIds);
+    List<EsGoodsIndex> getEsGoodsBySkuIds(List<String> skuIds, PageVO pageVo);
 
     /**
      * 根据id获取商品索引

File: framework/src/main/java/cn/lili/cache/limit/interceptor/LimitInterceptor.java
Patch:
@@ -61,7 +61,7 @@ public void interceptor(LimitPoint limitPointAnnotation) {
             assert count != null;
             log.info("限制请求{}, 当前请求{},缓存key{}", limitCount, count.intValue(), key);
             //如果缓存里没有值，或者他的值小于限制频率
-            if (count.intValue() >= limitCount) {
+            if (count.intValue() > limitCount) {
                 throw new ServiceException(ResultCode.LIMIT_ERROR);
             }
         }

File: framework/src/main/java/cn/lili/modules/goods/sku/render/impl/WholesaleSaleModelRenderImpl.java
Patch:
@@ -55,7 +55,9 @@ public void renderBatch(List<GoodsSku> goodsSkus, GoodsOperationDTO goodsOperati
             skus.setPrice(collect.get(0).getPrice());
             skus.setCost(collect.get(0).getPrice());
         }
-        if (Boolean.FALSE.equals(goodsOperationDTO.getGoodsTemplateFlag())) {
+        if (Boolean.TRUE.equals(goodsOperationDTO.getGoodsTemplateFlag())) {
+            wholesaleService.removeByTemplateId(goodsSkus.get(0).getGoodsId());
+        } else {
             wholesaleService.removeByGoodsId(goodsSkus.get(0).getGoodsId());
         }
         wholesaleService.saveOrUpdateBatch(collect);

File: framework/src/main/java/cn/lili/modules/goods/sku/render/impl/WholesaleSaleModelRenderImpl.java
Patch:
@@ -55,7 +55,9 @@ public void renderBatch(List<GoodsSku> goodsSkus, GoodsOperationDTO goodsOperati
             skus.setPrice(collect.get(0).getPrice());
             skus.setCost(collect.get(0).getPrice());
         }
-        if (Boolean.FALSE.equals(goodsOperationDTO.getGoodsTemplateFlag())) {
+        if (Boolean.TRUE.equals(goodsOperationDTO.getGoodsTemplateFlag())) {
+            wholesaleService.removeByTemplateId(goodsSkus.get(0).getGoodsId());
+        } else {
             wholesaleService.removeByGoodsId(goodsSkus.get(0).getGoodsId());
         }
         wholesaleService.saveOrUpdateBatch(collect);

File: consumer/src/main/java/cn/lili/event/impl/MemberCouponExecute.java
Patch:
@@ -36,7 +36,8 @@ public void orderChange(OrderMessage orderMessage) {
             Order order = orderService.getBySn(orderMessage.getOrderSn());
             if (CharSequenceUtil.isNotEmpty(order.getUseStoreMemberCouponIds())) {
                 memberCouponService.recoveryMemberCoupon(ListUtil.toList(order.getUseStoreMemberCouponIds().split(",")));
-            } else if (CharSequenceUtil.isNotEmpty(order.getUsePlatformMemberCouponId())) {
+            }
+            if (CharSequenceUtil.isNotEmpty(order.getUsePlatformMemberCouponId())) {
                 memberCouponService.recoveryMemberCoupon(ListUtil.toList(order.getUsePlatformMemberCouponId().split(",")));
             }
         }

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/DraftGoods.java
Patch:
@@ -111,7 +111,7 @@ public class DraftGoods extends BaseEntity {
     private String goodsVideo;
 
     @ApiModelProperty(value = "是否为推荐商品")
-    private boolean recommend;
+    private Boolean recommend;
 
     /**
      * @see cn.lili.modules.goods.entity.enums.GoodsSalesModeEnum

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Wholesale.java
Patch:
@@ -23,6 +23,8 @@ public class Wholesale extends BaseIdEntity {
     private String goodsId;
     @ApiModelProperty(value = "SkuID")
     private String skuId;
+    @ApiModelProperty(value = "模版id")
+    private String templateId;
     @ApiModelProperty(value = "数量")
     private Integer num;
     @ApiModelProperty(value = "金额")

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/DraftGoodsSearchParams.java
Patch:
@@ -1,6 +1,6 @@
 package cn.lili.modules.goods.entity.dto;
 
-import cn.hutool.core.util.StrUtil;
+import cn.hutool.core.text.CharSequenceUtil;
 import cn.lili.modules.goods.entity.enums.DraftGoodsSaveType;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import io.swagger.annotations.ApiModelProperty;
@@ -26,7 +26,7 @@ public class DraftGoodsSearchParams extends GoodsSearchParams {
     @Override
     public <T> QueryWrapper<T> queryWrapper() {
         QueryWrapper<T> queryWrapper = super.queryWrapper();
-        if (StrUtil.isNotEmpty(saveType)) {
+        if (CharSequenceUtil.isNotEmpty(saveType)) {
             queryWrapper.eq("save_type", saveType);
         }
         return queryWrapper;

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StoreGoodsLabelServiceImpl.java
Patch:
@@ -58,6 +58,7 @@ public List<StoreGoodsLabelVO> listByStoreId(String storeId) {
                     list.stream()
                             .filter(label -> label.getParentId() != null && label.getParentId().equals(storeGoodsLabel.getId()))
                             .forEach(storeGoodsLabelChild -> storeGoodsLabelVOChildList.add(new StoreGoodsLabelVO(storeGoodsLabelChild.getId(), storeGoodsLabelChild.getLabelName(), storeGoodsLabelChild.getLevel(), storeGoodsLabelChild.getSortOrder())));
+                    storeGoodsLabelVOChildList.sort(Comparator.comparing(StoreGoodsLabelVO::getSortOrder));
                     storeGoodsLabelVO.setChildren(storeGoodsLabelVOChildList);
                     storeGoodsLabelVOList.add(storeGoodsLabelVO);
                 });

File: framework/src/main/java/cn/lili/modules/goods/sku/render/impl/WholesaleSaleModelRenderImpl.java
Patch:
@@ -55,7 +55,9 @@ public void renderBatch(List<GoodsSku> goodsSkus, GoodsOperationDTO goodsOperati
             skus.setPrice(collect.get(0).getPrice());
             skus.setCost(collect.get(0).getPrice());
         }
-        wholesaleService.removeByGoodsId(goodsSkus.get(0).getGoodsId());
+        if (Boolean.FALSE.equals(goodsOperationDTO.getGoodsTemplateFlag())) {
+            wholesaleService.removeByGoodsId(goodsSkus.get(0).getGoodsId());
+        }
         wholesaleService.saveOrUpdateBatch(collect);
     }
 

File: framework/src/main/java/cn/lili/modules/order/aftersale/serviceimpl/AfterSaleServiceImpl.java
Patch:
@@ -179,7 +179,7 @@ public AfterSale saveAfterSale(AfterSaleDTO afterSaleDTO) {
         return addAfterSale(afterSaleDTO);
     }
 
-    @AfterSaleLogPoint(sn = "#afterSaleSn", description = "'审核售后:售后编号['+#afterSaleSn+']，'+ #serviceStatus")
+    @AfterSaleLogPoint(sn = "#afterSaleSn", description = "'审核售后:售后编号['+#afterSaleSn+']' ", serviceStatus = "#serviceStatus")
     @SystemLogPoint(description = "售后-审核售后", customerLog = "'审核售后:售后编号['+#afterSaleSn+']，'+ #serviceStatus")
     @Transactional(rollbackFor = Exception.class)
     @Override

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StoreGoodsLabelServiceImpl.java
Patch:
@@ -58,6 +58,7 @@ public List<StoreGoodsLabelVO> listByStoreId(String storeId) {
                     list.stream()
                             .filter(label -> label.getParentId() != null && label.getParentId().equals(storeGoodsLabel.getId()))
                             .forEach(storeGoodsLabelChild -> storeGoodsLabelVOChildList.add(new StoreGoodsLabelVO(storeGoodsLabelChild.getId(), storeGoodsLabelChild.getLabelName(), storeGoodsLabelChild.getLevel(), storeGoodsLabelChild.getSortOrder())));
+                    storeGoodsLabelVOChildList.sort(Comparator.comparing(StoreGoodsLabelVO::getSortOrder));
                     storeGoodsLabelVO.setChildren(storeGoodsLabelVOChildList);
                     storeGoodsLabelVOList.add(storeGoodsLabelVO);
                 });

File: consumer/src/main/java/cn/lili/event/impl/MemberCouponExecute.java
Patch:
@@ -36,7 +36,8 @@ public void orderChange(OrderMessage orderMessage) {
             Order order = orderService.getBySn(orderMessage.getOrderSn());
             if (CharSequenceUtil.isNotEmpty(order.getUseStoreMemberCouponIds())) {
                 memberCouponService.recoveryMemberCoupon(ListUtil.toList(order.getUseStoreMemberCouponIds().split(",")));
-            } else if (CharSequenceUtil.isNotEmpty(order.getUsePlatformMemberCouponId())) {
+            }
+            if (CharSequenceUtil.isNotEmpty(order.getUsePlatformMemberCouponId())) {
                 memberCouponService.recoveryMemberCoupon(ListUtil.toList(order.getUsePlatformMemberCouponId().split(",")));
             }
         }

File: framework/src/main/java/cn/lili/modules/order/order/mapper/OrderMapper.java
Patch:
@@ -38,7 +38,7 @@ public interface OrderMapper extends BaseMapper<Order> {
      * @return 导出订单DTO列表
      */
     @Select("SELECT o.sn,o.create_time,o.member_name,o.consignee_name,o.consignee_mobile,o.consignee_address_path,o.consignee_detail," +
-            "o.payment_method, o.logistics_name,o.freight_price,o.goods_price,o.discount_price,o.flow_price,oi.goods_name,oi.num," +
+            "o.payment_method, o.logistics_name,o.freight_price,oi.goods_price,o.discount_price,o.flow_price,oi.goods_name,oi.num," +
             "o.remark,o.order_status,o.pay_status,o.deliver_status,o.need_receipt,o.store_name FROM li_order o LEFT JOIN li_order_item oi " +
             "ON oi.order_sn=o.sn ${ew.customSqlSegment}")
     List<OrderExportDTO> queryExportOrder(@Param(Constants.WRAPPER) Wrapper<OrderSimpleVO> queryWrapper);

File: framework/src/main/java/cn/lili/common/security/filter/XssHttpServletRequestWrapper.java
Patch:
@@ -181,7 +181,7 @@ public ServletInputStream getInputStream() throws IOException {
                 //将resultMap转换为json字符串
                 String resultStr = JSONUtil.toJsonStr(resultMap);
                 //将json字符串转换为字节
-                final ByteArrayInputStream resultBIS = new ByteArrayInputStream(resultStr.getBytes());
+                final ByteArrayInputStream resultBIS = new ByteArrayInputStream(resultStr.getBytes(StandardCharsets.UTF_8));
 
                 //实现接口
                 return new ServletInputStream() {

File: framework/src/main/java/cn/lili/common/security/filter/XssHttpServletRequestWrapper.java
Patch:
@@ -181,7 +181,7 @@ public ServletInputStream getInputStream() throws IOException {
                 //将resultMap转换为json字符串
                 String resultStr = JSONUtil.toJsonStr(resultMap);
                 //将json字符串转换为字节
-                final ByteArrayInputStream resultBIS = new ByteArrayInputStream(resultStr.getBytes());
+                final ByteArrayInputStream resultBIS = new ByteArrayInputStream(resultStr.getBytes(StandardCharsets.UTF_8));
 
                 //实现接口
                 return new ServletInputStream() {

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -319,7 +319,7 @@ private void updateGoodsIndex(List<Goods> goodsList) {
                 }
             }
         }
-        goodsIndexService.updateBulkIndex(goodsIndices);
+        goodsIndexService.addIndex(goodsIndices);
     }
 
 

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -319,7 +319,7 @@ private void updateGoodsIndex(List<Goods> goodsList) {
                 }
             }
         }
-        goodsIndexService.updateBulkIndex(goodsIndices);
+        goodsIndexService.addIndex(goodsIndices);
     }
 
 

File: framework/src/main/java/cn/lili/modules/goods/service/StudioService.java
Patch:
@@ -53,7 +53,7 @@ public interface StudioService extends IService<Studio> {
      * @param storeId 店铺ID
      * @return 操作结果
      */
-    Boolean push(Integer roomId,Integer goodsId, String storeId);
+    Boolean push(Integer roomId,Integer liveGoodsId, String storeId, String goodsId);
 
     /**
      * 删除商品

File: framework/src/main/java/cn/lili/modules/permission/entity/vo/SystemLogVO.java
Patch:
@@ -9,7 +9,6 @@
 import lombok.ToString;
 import lombok.experimental.Accessors;
 import org.springframework.data.annotation.Id;
-import org.springframework.data.elasticsearch.annotations.DateFormat;
 import org.springframework.data.elasticsearch.annotations.Document;
 import org.springframework.data.elasticsearch.annotations.Field;
 import org.springframework.data.elasticsearch.annotations.FieldType;
@@ -42,7 +41,7 @@ public class SystemLogVO implements Serializable {
 
     @ApiModelProperty(value = "日志记录时间")
     @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")
-    @Field(type = FieldType.Date, format = DateFormat.basic_date_time, fielddata = true)
+    @Field(type = FieldType.Date, fielddata = true)
     private Date createTime = new Date();
 
     @ApiModelProperty(value = "请求用户")

File: seller-api/src/main/java/cn/lili/controller/other/broadcast/StudioStoreController.java
Patch:
@@ -74,9 +74,9 @@ public ResultMessage<Object> edit(Studio studio) {
             @ApiImplicitParam(name = "liveGoodsId", value = "直播商品ID", required = true, dataType = "Integer", paramType = "path")
     })
     @PutMapping(value = "/push/{roomId}/{liveGoodsId}")
-    public ResultMessage<Studio> push(@PathVariable Integer roomId, @PathVariable Integer liveGoodsId) {
+    public ResultMessage<Studio> push(@PathVariable Integer roomId, @PathVariable Integer liveGoodsId, @RequestParam String goodsId) {
         String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
-        if (Boolean.TRUE.equals(studioService.push(roomId, liveGoodsId, storeId))) {
+        if (Boolean.TRUE.equals(studioService.push(roomId, liveGoodsId, storeId, goodsId))) {
             return ResultUtil.success(ResultCode.SUCCESS);
         }
         throw new ServiceException(ResultCode.ERROR);

File: framework/src/main/java/cn/lili/modules/goods/service/StudioService.java
Patch:
@@ -53,7 +53,7 @@ public interface StudioService extends IService<Studio> {
      * @param storeId 店铺ID
      * @return 操作结果
      */
-    Boolean push(Integer roomId,Integer goodsId, String storeId);
+    Boolean push(Integer roomId,Integer liveGoodsId, String storeId, String goodsId);
 
     /**
      * 删除商品

File: framework/src/main/java/cn/lili/modules/permission/entity/vo/SystemLogVO.java
Patch:
@@ -9,7 +9,6 @@
 import lombok.ToString;
 import lombok.experimental.Accessors;
 import org.springframework.data.annotation.Id;
-import org.springframework.data.elasticsearch.annotations.DateFormat;
 import org.springframework.data.elasticsearch.annotations.Document;
 import org.springframework.data.elasticsearch.annotations.Field;
 import org.springframework.data.elasticsearch.annotations.FieldType;
@@ -42,7 +41,7 @@ public class SystemLogVO implements Serializable {
 
     @ApiModelProperty(value = "日志记录时间")
     @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")
-    @Field(type = FieldType.Date, format = DateFormat.basic_date_time, fielddata = true)
+    @Field(type = FieldType.Date, fielddata = true)
     private Date createTime = new Date();
 
     @ApiModelProperty(value = "请求用户")

File: seller-api/src/main/java/cn/lili/controller/other/broadcast/StudioStoreController.java
Patch:
@@ -74,9 +74,9 @@ public ResultMessage<Object> edit(Studio studio) {
             @ApiImplicitParam(name = "liveGoodsId", value = "直播商品ID", required = true, dataType = "Integer", paramType = "path")
     })
     @PutMapping(value = "/push/{roomId}/{liveGoodsId}")
-    public ResultMessage<Studio> push(@PathVariable Integer roomId, @PathVariable Integer liveGoodsId) {
+    public ResultMessage<Studio> push(@PathVariable Integer roomId, @PathVariable Integer liveGoodsId, @RequestParam String goodsId) {
         String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
-        if (Boolean.TRUE.equals(studioService.push(roomId, liveGoodsId, storeId))) {
+        if (Boolean.TRUE.equals(studioService.push(roomId, liveGoodsId, storeId, goodsId))) {
             return ResultUtil.success(ResultCode.SUCCESS);
         }
         throw new ServiceException(ResultCode.ERROR);

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -431,6 +431,7 @@ public void updateStock(String goodsId, Integer quantity) {
         LambdaUpdateWrapper<Goods> lambdaUpdateWrapper = Wrappers.lambdaUpdate();
         lambdaUpdateWrapper.set(Goods::getQuantity, quantity);
         lambdaUpdateWrapper.eq(Goods::getId, goodsId);
+        cache.remove(CachePrefix.GOODS.getPrefix() + goodsId);
         this.update(lambdaUpdateWrapper);
     }
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsServiceImpl.java
Patch:
@@ -431,6 +431,7 @@ public void updateStock(String goodsId, Integer quantity) {
         LambdaUpdateWrapper<Goods> lambdaUpdateWrapper = Wrappers.lambdaUpdate();
         lambdaUpdateWrapper.set(Goods::getQuantity, quantity);
         lambdaUpdateWrapper.eq(Goods::getId, goodsId);
+        cache.remove(CachePrefix.GOODS.getPrefix() + goodsId);
         this.update(lambdaUpdateWrapper);
     }
 

File: manager-api/src/main/java/cn/lili/controller/promotion/FullDiscountManagerController.java
Patch:
@@ -35,7 +35,6 @@ public class FullDiscountManagerController {
     @ApiOperation(value = "获取满优惠列表")
     @GetMapping
     public ResultMessage<IPage<FullDiscount>> getCouponList(FullDiscountSearchParams searchParams, PageVO page) {
-        page.setNotConvert(true);
         return ResultUtil.data(fullDiscountService.pageFindAll(searchParams, page));
     }
 

File: seller-api/src/main/java/cn/lili/controller/promotion/CouponStoreController.java
Patch:
@@ -41,7 +41,6 @@ public class CouponStoreController {
     @GetMapping
     @ApiOperation(value = "获取优惠券列表")
     public ResultMessage<IPage<CouponVO>> getCouponList(CouponSearchParams queryParam, PageVO page) {
-        page.setNotConvert(true);
         String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
         queryParam.setStoreId(storeId);
         IPage<CouponVO> coupons = couponService.pageVOFindAll(queryParam, page);

File: framework/src/main/java/cn/lili/modules/order/order/mapper/OrderMapper.java
Patch:
@@ -38,7 +38,7 @@ public interface OrderMapper extends BaseMapper<Order> {
      * @return 导出订单DTO列表
      */
     @Select("SELECT o.sn,o.create_time,o.member_name,o.consignee_name,o.consignee_mobile,o.consignee_address_path,o.consignee_detail," +
-            "o.payment_method, o.logistics_name,o.freight_price,o.goods_price,o.discount_price,o.flow_price,oi.goods_name,oi.num," +
+            "o.payment_method, o.logistics_name,o.freight_price,oi.goods_price,o.discount_price,o.flow_price,oi.goods_name,oi.num," +
             "o.remark,o.order_status,o.pay_status,o.deliver_status,o.need_receipt,o.store_name FROM li_order o LEFT JOIN li_order_item oi " +
             "ON oi.order_sn=o.sn ${ew.customSqlSegment}")
     List<OrderExportDTO> queryExportOrder(@Param(Constants.WRAPPER) Wrapper<OrderSimpleVO> queryWrapper);

File: framework/src/main/java/cn/lili/common/aop/interceptor/PreventDuplicateSubmissionsInterceptor.java
Patch:
@@ -47,6 +47,7 @@ public void interceptor(PreventDuplicateSubmissions preventDuplicateSubmissions)
         } catch (ServiceException e) {
             throw e;
         } catch (Exception e) {
+            log.error("防重复提交拦截器异常", e);
             throw new ServiceException(ResultCode.ERROR);
         }
     }

File: framework/src/main/java/cn/lili/modules/verification/service/impl/VerificationServiceImpl.java
Patch:
@@ -96,6 +96,7 @@ public Map<String, Object> createVerification(VerificationEnums verificationEnum
         } catch (ServiceException e) {
             throw e;
         } catch (Exception e) {
+            log.error("生成验证码失败", e);
             throw new ServiceException(ResultCode.ERROR);
         }
     }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -403,7 +403,7 @@ public List<GoodsSku> getGoodsSkuByIdFromCache(List<String> ids) {
 
     @Override
     public List<GoodsSkuVO> getGoodsListByGoodsId(String goodsId) {
-        List<GoodsSku> list = this.list(new LambdaQueryWrapper<GoodsSku>().eq(GoodsSku::getGoodsId, goodsId).orderByAsc(GoodsSku::getGoodsName));
+        List<GoodsSku> list = this.list(new LambdaQueryWrapper<GoodsSku>().eq(GoodsSku::getGoodsId, goodsId));
         return this.getGoodsSkuVOList(list);
     }
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -403,7 +403,7 @@ public List<GoodsSku> getGoodsSkuByIdFromCache(List<String> ids) {
 
     @Override
     public List<GoodsSkuVO> getGoodsListByGoodsId(String goodsId) {
-        List<GoodsSku> list = this.list(new LambdaQueryWrapper<GoodsSku>().eq(GoodsSku::getGoodsId, goodsId).orderByAsc(GoodsSku::getGoodsName));
+        List<GoodsSku> list = this.list(new LambdaQueryWrapper<GoodsSku>().eq(GoodsSku::getGoodsId, goodsId));
         return this.getGoodsSkuVOList(list);
     }
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/DraftGoodsServiceImpl.java
Patch:
@@ -128,7 +128,7 @@ private List<GoodsSku> getGoodsSkuList(List<Map<String, Object>> skuList) {
     }
 
     private GoodsSku add(Map<String, Object> map) {
-        Map<String, Object> specMap = new HashMap<>(2);
+        Map<String, Object> specMap = new LinkedHashMap<>();
         GoodsSku sku = new GoodsSku();
         for (Map.Entry<String, Object> m : map.entrySet()) {
             switch (m.getKey()) {

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/DraftGoodsServiceImpl.java
Patch:
@@ -128,7 +128,7 @@ private List<GoodsSku> getGoodsSkuList(List<Map<String, Object>> skuList) {
     }
 
     private GoodsSku add(Map<String, Object> map) {
-        Map<String, Object> specMap = new HashMap<>(2);
+        Map<String, Object> specMap = new LinkedHashMap<>();
         GoodsSku sku = new GoodsSku();
         for (Map.Entry<String, Object> m : map.entrySet()) {
             switch (m.getKey()) {

File: framework/src/main/java/cn/lili/modules/statistics/mapper/StoreFlowStatisticsMapper.java
Patch:
@@ -63,7 +63,7 @@ public interface StoreFlowStatisticsMapper extends BaseMapper<StoreFlow> {
     @Select("SELECT count(0) AS num FROM (SELECT count(0) FROM li_store_flow " +
             " where store_id = #{storeId} and flow_type='PAY' and create_time >=#{startTime} and create_time < #{endTime}" +
             " GROUP BY member_id) t")
-    Long countPayers(@Param("storeId") String storeId, @Param("startTime") Date startTime, @Param("endTime") Date endTime);
+    Long countPayersByStore(String storeId, Date startTime, Date endTime);
 
     /**
      * 统计付款人数
@@ -75,7 +75,7 @@ public interface StoreFlowStatisticsMapper extends BaseMapper<StoreFlow> {
     @Select("SELECT count(0) AS num FROM (SELECT count(0) FROM li_store_flow " +
             " where  flow_type='PAY' and create_time >=#{startTime} and create_time < #{endTime}" +
             " GROUP BY member_id) t")
-    Long countPayers(@Param("startTime") Date startTime, @Param("endTime") Date endTime);
+    Long countPayers(Date startTime, Date endTime);
 
 
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/StoreFlowStatisticsServiceImpl.java
Patch:
@@ -163,7 +163,7 @@ private void initPayment(Date[] dates, OrderOverviewVO orderOverviewVO, Statisti
 
         //如果有店铺id传入，则查询店铺
         if (StringUtils.isNotEmpty(statisticsQueryParam.getStoreId())) {
-            orderOverviewVO.setPaymentsNum(baseMapper.countPayers(statisticsQueryParam.getStoreId(), dates[0], dates[1]));
+            orderOverviewVO.setPaymentsNum(baseMapper.countPayersByStore(statisticsQueryParam.getStoreId(), dates[0], dates[1]));
         } else {
             orderOverviewVO.setPaymentsNum(baseMapper.countPayers(dates[0], dates[1]));
         }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/CouponActivityServiceImpl.java
Patch:
@@ -218,7 +218,7 @@ void sendCoupon(List<Map<String, Object>> memberList, List<CouponActivityItem> c
                 //批量添加优惠券
                 memberCouponService.saveBatch(memberCouponList);
                 //添加优惠券已领取数量
-                couponService.receiveCoupon(couponActivityItem.getCouponId(), memberCouponList.size() * couponActivityItem.getNum());
+                couponService.receiveCoupon(couponActivityItem.getCouponId(), memberCouponList.size());
             } else {
                 log.error("赠送优惠券失败,当前优惠券不存在:" + couponActivityItem.getCouponId());
             }

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/CouponActivityServiceImpl.java
Patch:
@@ -218,7 +218,7 @@ void sendCoupon(List<Map<String, Object>> memberList, List<CouponActivityItem> c
                 //批量添加优惠券
                 memberCouponService.saveBatch(memberCouponList);
                 //添加优惠券已领取数量
-                couponService.receiveCoupon(couponActivityItem.getCouponId(), memberCouponList.size() * couponActivityItem.getNum());
+                couponService.receiveCoupon(couponActivityItem.getCouponId(), memberCouponList.size());
             } else {
                 log.error("赠送优惠券失败,当前优惠券不存在:" + couponActivityItem.getCouponId());
             }

File: buyer-api/src/main/java/cn/lili/controller/passport/MemberBuyerController.java
Patch:
@@ -3,6 +3,7 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.exception.ServiceException;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.security.enums.UserEnums;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.Member;
@@ -70,7 +71,7 @@ public Object loginWithSession(@PathVariable("token") String token,Integer befor
         log.info("receive login with session key {}", token);
         ResponseEntity<ResultMessage> timeoutResponseEntity =
                 new ResponseEntity<>(ResultUtil.error(ResultCode.ERROR), HttpStatus.OK);
-        int timeoutSecond = 10;
+        int timeoutSecond = 20;
         DeferredResult<ResponseEntity> deferredResult = new DeferredResult<>(timeoutSecond * 1000L, timeoutResponseEntity);
         CompletableFuture.runAsync(() -> {
             try {

File: framework/src/main/java/cn/lili/modules/file/plugin/impl/MinioFilePlugin.java
Patch:
@@ -99,7 +99,7 @@ public void deleteFile(List<String> key) {
         }
         MinioClient ossClient = getOssClient();
         List<DeleteObject> objectList = key.stream().map(DeleteObject::new).collect(Collectors.toList());
-        ossClient.removeObjects(RemoveObjectsArgs.builder().objects(objectList).build());
+        ossClient.removeObjects(RemoveObjectsArgs.builder().objects(objectList).bucket(ossSetting.getM_bucketName()).build());
     }
 
 

File: framework/src/main/java/cn/lili/modules/permission/serviceimpl/MenuServiceImpl.java
Patch:
@@ -88,6 +88,7 @@ public boolean saveOrUpdateMenu(Menu menu) {
         if (CharSequenceUtil.isNotEmpty(menu.getId())) {
 
         }
+        cache.vagueDel(CachePrefix.USER_MENU.getPrefix(UserEnums.MANAGER));
         return this.saveOrUpdate(menu);
     }
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -314,7 +314,7 @@ public Map<String, Object> getCurrentGoodsPromotion(GoodsSku dataSku, String car
     }
 
     private void setGoodsPromotionInfo(GoodsSku dataSku, Map.Entry<String, Object> promotionInfo) {
-        JSONObject promotionsObj = JSONUtil.parseObj(promotionInfo);
+        JSONObject promotionsObj = JSONUtil.parseObj(promotionInfo.getValue());
         PromotionGoodsSearchParams searchParams = new PromotionGoodsSearchParams();
         searchParams.setSkuId(dataSku.getId());
         searchParams.setPromotionId(promotionsObj.get("id").toString());

File: manager-api/src/main/java/cn/lili/controller/permission/MenuManagerController.java
Patch:
@@ -53,7 +53,6 @@ public ResultMessage<Menu> add(Menu menu) {
     @ApiImplicitParam(name = "id", value = "菜单ID", required = true, paramType = "path", dataType = "String")
     @ApiOperation(value = "编辑")
     @PutMapping(value = "/{id}")
-
     @DemoSite
     public ResultMessage<Menu> edit(@PathVariable String id, Menu menu) {
         menu.setId(id);

File: manager-api/src/main/java/cn/lili/security/ManagerAuthenticationFilter.java
Patch:
@@ -84,7 +84,7 @@ private void customAuthentication(HttpServletRequest request, HttpServletRespons
 
 
         //如果不是超级管理员， 则鉴权
-        if (!authUser.getIsSuper()) {
+        if (Boolean.FALSE.equals(authUser.getIsSuper())) {
             //获取缓存中的权限
             Map<String, List<String>> permission = (Map<String, List<String>>) cache.get(CachePrefix.PERMISSION_LIST.getPrefix(UserEnums.MANAGER) + authUser.getId());
 

File: framework/src/main/java/cn/lili/modules/permission/serviceimpl/MenuServiceImpl.java
Patch:
@@ -88,6 +88,7 @@ public boolean saveOrUpdateMenu(Menu menu) {
         if (CharSequenceUtil.isNotEmpty(menu.getId())) {
 
         }
+        cache.vagueDel(CachePrefix.USER_MENU.getPrefix(UserEnums.MANAGER));
         return this.saveOrUpdate(menu);
     }
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -314,7 +314,7 @@ public Map<String, Object> getCurrentGoodsPromotion(GoodsSku dataSku, String car
     }
 
     private void setGoodsPromotionInfo(GoodsSku dataSku, Map.Entry<String, Object> promotionInfo) {
-        JSONObject promotionsObj = JSONUtil.parseObj(promotionInfo);
+        JSONObject promotionsObj = JSONUtil.parseObj(promotionInfo.getValue());
         PromotionGoodsSearchParams searchParams = new PromotionGoodsSearchParams();
         searchParams.setSkuId(dataSku.getId());
         searchParams.setPromotionId(promotionsObj.get("id").toString());

File: manager-api/src/main/java/cn/lili/controller/permission/MenuManagerController.java
Patch:
@@ -53,7 +53,6 @@ public ResultMessage<Menu> add(Menu menu) {
     @ApiImplicitParam(name = "id", value = "菜单ID", required = true, paramType = "path", dataType = "String")
     @ApiOperation(value = "编辑")
     @PutMapping(value = "/{id}")
-
     @DemoSite
     public ResultMessage<Menu> edit(@PathVariable String id, Menu menu) {
         menu.setId(id);

File: manager-api/src/main/java/cn/lili/security/ManagerAuthenticationFilter.java
Patch:
@@ -84,7 +84,7 @@ private void customAuthentication(HttpServletRequest request, HttpServletRespons
 
 
         //如果不是超级管理员， 则鉴权
-        if (!authUser.getIsSuper()) {
+        if (Boolean.FALSE.equals(authUser.getIsSuper())) {
             //获取缓存中的权限
             Map<String, List<String>> permission = (Map<String, List<String>>) cache.get(CachePrefix.PERMISSION_LIST.getPrefix(UserEnums.MANAGER) + authUser.getId());
 

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/GoodsSku.java
Patch:
@@ -171,11 +171,11 @@ public Double getWeight() {
     }
 
     @Override
-    public Date getUpdateTime() {
-        if (super.getUpdateTime() == null) {
+    public Date getCreateTime() {
+        if (super.getCreateTime() == null) {
             return new Date(1593571928);
         } else {
-            return super.getUpdateTime();
+            return super.getCreateTime();
         }
     }
 

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StoreGoodsLabelServiceImpl.java
Patch:
@@ -56,7 +56,7 @@ public List<StoreGoodsLabelVO> listByStoreId(String storeId) {
                     StoreGoodsLabelVO storeGoodsLabelVO = new StoreGoodsLabelVO(storeGoodsLabel.getId(), storeGoodsLabel.getLabelName(), storeGoodsLabel.getLevel(), storeGoodsLabel.getSortOrder());
                     List<StoreGoodsLabelVO> storeGoodsLabelVOChildList = new ArrayList<>();
                     list.stream()
-                            .filter(label -> label.getParentId().equals(storeGoodsLabel.getId()))
+                            .filter(label -> label.getParentId() != null && label.getParentId().equals(storeGoodsLabel.getId()))
                             .forEach(storeGoodsLabelChild -> storeGoodsLabelVOChildList.add(new StoreGoodsLabelVO(storeGoodsLabelChild.getId(), storeGoodsLabelChild.getLabelName(), storeGoodsLabelChild.getLevel(), storeGoodsLabelChild.getSortOrder())));
                     storeGoodsLabelVO.setChildren(storeGoodsLabelVOChildList);
                     storeGoodsLabelVOList.add(storeGoodsLabelVO);

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -681,7 +681,7 @@ public MemberVO getMember(String id) {
      */
     private void checkMember(String userName, String mobilePhone) {
         //判断手机号是否存在
-        if (findMember(userName, mobilePhone) > 0) {
+        if (findMember(mobilePhone, userName) > 0) {
             throw new ServiceException(ResultCode.USER_EXIST);
         }
     }

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/CheckDataRender.java
Patch:
@@ -107,7 +107,7 @@ private void checkData(TradeDTO tradeDTO) {
             //缓存中的商品信息
             GoodsSku dataSku = goodsSkuService.getGoodsSkuByIdFromCache(cartSkuVO.getGoodsSku().getId());
             //商品有效性判定
-            if (dataSku == null || dataSku.getUpdateTime().before(cartSkuVO.getGoodsSku().getUpdateTime())) {
+            if (dataSku == null || dataSku.getCreateTime().after(cartSkuVO.getGoodsSku().getCreateTime())) {
                 //设置购物车未选中
                 cartSkuVO.setChecked(false);
                 //设置购物车此sku商品已失效

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -150,7 +150,7 @@ public void add(String skuId, Integer num, String cartType, Boolean cover) {
 
 
                 //购物车中已经存在，更新数量
-                if (cartSkuVO != null && dataSku.getUpdateTime().equals(cartSkuVO.getGoodsSku().getUpdateTime())) {
+                if (cartSkuVO != null && dataSku.getCreateTime().equals(cartSkuVO.getGoodsSku().getCreateTime())) {
 
                     //如果覆盖购物车中商品数量
                     if (Boolean.TRUE.equals(cover)) {

File: framework/src/main/java/cn/lili/mybatis/BaseEntity.java
Patch:
@@ -64,7 +64,7 @@ public abstract class BaseEntity implements Serializable {
     @LastModifiedDate
     @JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")
     @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
-    @TableField(fill = FieldFill.UPDATE)
+    @TableField(fill = FieldFill.INSERT_UPDATE)
     @ApiModelProperty(value = "更新时间", hidden = true)
     @Field(type = FieldType.Date, format = DateFormat.custom, pattern = "yyyy-MM-dd HH:mm:ss || yyyy-MM-dd || yyyy/MM/dd HH:mm:ss|| yyyy/MM/dd ||epoch_millis")
     private Date updateTime;

File: framework/src/main/java/cn/lili/modules/promotion/tools/PromotionTools.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.promotion.tools;
 
+import cn.hutool.core.collection.CollUtil;
 import cn.hutool.core.date.DateTime;
 import cn.hutool.core.date.DateUtil;
 import cn.hutool.core.text.CharSequenceUtil;
@@ -159,7 +160,7 @@ public static int nextHour(String[] totalHours, Integer timeline) {
     }
 
     public static Map<String, Object> filterInvalidPromotionsMap(Map<String, Object> map) {
-        if (map == null) {
+        if (CollUtil.isEmpty(map)) {
             return new HashMap<>();
         }
         //移除无效促销活动
@@ -173,7 +174,7 @@ public static Map<String, Object> filterInvalidPromotionsMap(Map<String, Object>
             }
 
             return true;
-        }).collect(Collectors.toMap(stringObjectEntry -> stringObjectEntry != null ? stringObjectEntry.getKey() : null, stringObjectEntry1 -> stringObjectEntry1 != null ? stringObjectEntry1.getValue() : new BasePromotions()));
+        }).collect(Collectors.toMap(stringObjectEntry -> stringObjectEntry != null ? stringObjectEntry.getKey() : null, stringObjectEntry1 -> stringObjectEntry1 != null ? stringObjectEntry1.getValue() : new BasePromotions(), (oldValue, newValue) -> newValue));
     }
 
 }

File: framework/src/main/java/cn/lili/modules/promotion/tools/PromotionTools.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.promotion.tools;
 
+import cn.hutool.core.collection.CollUtil;
 import cn.hutool.core.date.DateTime;
 import cn.hutool.core.date.DateUtil;
 import cn.hutool.core.text.CharSequenceUtil;
@@ -159,7 +160,7 @@ public static int nextHour(String[] totalHours, Integer timeline) {
     }
 
     public static Map<String, Object> filterInvalidPromotionsMap(Map<String, Object> map) {
-        if (map == null) {
+        if (CollUtil.isEmpty(map)) {
             return new HashMap<>();
         }
         //移除无效促销活动
@@ -173,7 +174,7 @@ public static Map<String, Object> filterInvalidPromotionsMap(Map<String, Object>
             }
 
             return true;
-        }).collect(Collectors.toMap(stringObjectEntry -> stringObjectEntry != null ? stringObjectEntry.getKey() : null, stringObjectEntry1 -> stringObjectEntry1 != null ? stringObjectEntry1.getValue() : new BasePromotions()));
+        }).collect(Collectors.toMap(stringObjectEntry -> stringObjectEntry != null ? stringObjectEntry.getKey() : null, stringObjectEntry1 -> stringObjectEntry1 != null ? stringObjectEntry1.getValue() : new BasePromotions(), (oldValue, newValue) -> newValue));
     }
 
 }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StudioServiceImpl.java
Patch:
@@ -121,7 +121,7 @@ public Boolean edit(Studio studio) {
                     rocketmqCustomProperties.getPromotionTopic());
 
             //直播间结束
-            broadcastMessage = new BroadcastMessage(studio.getId(), StudioStatusEnum.START.name());
+            broadcastMessage = new BroadcastMessage(studio.getId(), StudioStatusEnum.END.name());
             this.timeTrigger.edit(
                     TimeExecuteConstant.BROADCAST_EXECUTOR,
                     broadcastMessage,

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StudioServiceImpl.java
Patch:
@@ -121,7 +121,7 @@ public Boolean edit(Studio studio) {
                     rocketmqCustomProperties.getPromotionTopic());
 
             //直播间结束
-            broadcastMessage = new BroadcastMessage(studio.getId(), StudioStatusEnum.START.name());
+            broadcastMessage = new BroadcastMessage(studio.getId(), StudioStatusEnum.END.name());
             this.timeTrigger.edit(
                     TimeExecuteConstant.BROADCAST_EXECUTOR,
                     broadcastMessage,

File: framework/src/main/java/cn/lili/common/aop/interceptor/PreventDuplicateSubmissionsInterceptor.java
Patch:
@@ -38,7 +38,7 @@ public void interceptor(PreventDuplicateSubmissions preventDuplicateSubmissions)
         try {
             Long count = cache.incr(getParams(), preventDuplicateSubmissions.expire());
             //如果超过1或者设置的参数，则表示重复提交了
-            if (count.intValue() >= preventDuplicateSubmissions.expire()) {
+            if (count.intValue() >= 1) {
                 throw new ServiceException(ResultCode.LIMIT_ERROR);
             }
         }

File: framework/src/main/java/cn/lili/common/aop/interceptor/PreventDuplicateSubmissionsInterceptor.java
Patch:
@@ -38,7 +38,7 @@ public void interceptor(PreventDuplicateSubmissions preventDuplicateSubmissions)
         try {
             Long count = cache.incr(getParams(), preventDuplicateSubmissions.expire());
             //如果超过1或者设置的参数，则表示重复提交了
-            if (count.intValue() >= preventDuplicateSubmissions.expire()) {
+            if (count.intValue() >= 1) {
                 throw new ServiceException(ResultCode.LIMIT_ERROR);
             }
         }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StoreGoodsLabelServiceImpl.java
Patch:
@@ -66,7 +66,7 @@ public List<StoreGoodsLabelVO> listByStoreId(String storeId) {
         storeGoodsLabelVOList.sort(Comparator.comparing(StoreGoodsLabelVO::getSortOrder));
 
         if (!storeGoodsLabelVOList.isEmpty()) {
-            cache.put(CachePrefix.CATEGORY.getPrefix() + storeId + "tree", storeGoodsLabelVOList);
+            cache.put(CachePrefix.CATEGORY.getPrefix() + storeId, storeGoodsLabelVOList);
         }
         return storeGoodsLabelVOList;
     }

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -77,7 +77,7 @@ public enum ResultCode {
     MUST_HAVE_GOODS_SKU(11012, "规格必须要有一个！"),
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),
-    VIRTUAL_GOODS_NOT_NEED_TEMP(11015, "实物商品需选择配送模板"),
+    VIRTUAL_GOODS_NOT_NEED_TEMP(11015, "虚拟商品无需选择配送模板"),
     GOODS_NOT_EXIST_STORE(11017, "当前用户无权操作此商品"),
     GOODS_TYPE_ERROR(11016, "需选择商品类型"),
 

File: framework/src/main/java/cn/lili/modules/member/entity/dos/Clerk.java
Patch:
@@ -6,6 +6,7 @@
 import com.baomidou.mybatisplus.annotation.TableName;
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
+import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
@@ -21,6 +22,7 @@
 @TableName("li_clerk")
 @ApiModel(value = "店员")
 @NoArgsConstructor
+@AllArgsConstructor
 public class Clerk extends BaseEntity {
 
     private static final long serialVersionUID = 1L;
@@ -56,7 +58,7 @@ public class Clerk extends BaseEntity {
      * @param clerkAddDTO
      */
     public Clerk(ClerkAddDTO clerkAddDTO) {
-        if (!clerkAddDTO.getRoles().isEmpty()) {
+        if (clerkAddDTO.getRoles()!=null && !clerkAddDTO.getRoles().isEmpty()) {
             this.roleIds = CharSequenceUtil.join(",", clerkAddDTO.getRoles());
         }
         this.memberId = clerkAddDTO.getMemberId();

File: framework/src/main/java/cn/lili/modules/member/mapper/ClerkMapper.java
Patch:
@@ -27,8 +27,8 @@ public interface ClerkMapper extends BaseMapper<Clerk> {
      * @param ew 店铺ID
      * @return
      */
-    @Select("select li_clerk.*,m.id from li_clerk inner join li_member as m on li_clerk.member_id = m.id ${ew.customSqlSegment}")
-    IPage<Clerk> selectClerkPage(Page page, @Param(Constants.WRAPPER) QueryWrapper ew);
+    @Select("select li_clerk.*,m.id,m.mobile as mobile from li_clerk inner join li_member as m on li_clerk.member_id = m.id ${ew.customSqlSegment}")
+    IPage<ClerkVO> selectClerkPage(Page page, @Param(Constants.WRAPPER) QueryWrapper ew);
 
 
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/member/mapper/StoreMenuMapper.java
Patch:
@@ -25,7 +25,7 @@ public interface StoreMenuMapper extends BaseMapper<StoreMenu> {
      */
     @Select("SELECT menu.* FROM li_store_menu AS menu WHERE menu.id IN (" +
             "SELECT rm.menu_id FROM li_store_menu_role AS rm WHERE rm.role_id IN (" +
-            "SELECT ur.role_id FROM li_clerk_role AS ur WHERE ur.user_id=#{userId}) OR rm.role_id IN (" +
+            "SELECT ur.role_id FROM li_clerk_role AS ur WHERE ur.clerk_id=#{userId}) OR rm.role_id IN (" +
             "SELECT dr.role_id FROM li_store_department_role AS dr WHERE dr.id=(" +
             "SELECT department_id FROM li_clerk AS au WHERE au.id = #{userId})))")
     List<StoreMenu> findByUserId(String userId);

File: framework/src/main/java/cn/lili/modules/member/service/StoreMenuRoleService.java
Patch:
@@ -26,10 +26,10 @@ public interface StoreMenuRoleService extends IService<StoreMenuRole> {
     /**
      * 根据角色集合获取拥有的菜单具体权限
      *
-     * @param userId
+     * @param clerkId
      * @return
      */
-    List<StoreUserMenuVO> findAllMenu(String userId);
+    List<StoreUserMenuVO> findAllMenu(String clerkId,String memberId);
 
 
     /**

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -426,10 +426,10 @@ public Boolean updateMemberStatus(List<String> memberIds, Boolean status) {
      * @param mobilePhone 手机号
      * @return 会员
      */
-    private Long findMember(String mobilePhone, String userName) {
+    private Long findMember(String userName,String mobilePhone) {
         QueryWrapper<Member> queryWrapper = new QueryWrapper<>();
         queryWrapper.eq("mobile", mobilePhone)
-                .or().eq("username", userName);
+                .eq("username", userName);
         return this.baseMapper.selectCount(queryWrapper);
     }
 

File: manager-api/src/main/java/cn/lili/controller/permission/MenuManagerController.java
Patch:
@@ -75,7 +75,7 @@ public ResultMessage<List<MenuVO>> getAllMenuList() {
         return ResultUtil.data(menuService.tree());
     }
 
-    @ApiOperation(value = "获取所有菜单")
+    @ApiOperation(value = "获取所有菜单--根据当前用户角色")
     @GetMapping("/memberMenu")
     public ResultMessage<List<MenuVO>> memberMenu() {
         return ResultUtil.data(menuService.findUserTree());

File: seller-api/src/main/java/cn/lili/controller/permission/StoreMenuController.java
Patch:
@@ -41,7 +41,7 @@ public ResultMessage<List<StoreMenuVO>> getAllMenuList() {
         return ResultUtil.data(storeMenuService.tree());
     }
 
-    @ApiOperation(value = "获取所有菜单")
+    @ApiOperation(value = "获取所有菜单---根据当前用户角色")
     @GetMapping("/memberMenu")
     public ResultMessage<List<StoreMenuVO>> memberMenu() {
         return ResultUtil.data(storeMenuService.findUserTree());

File: seller-api/src/main/java/cn/lili/security/StoreAuthenticationFilter.java
Patch:
@@ -129,8 +129,8 @@ private void customAuthentication(HttpServletRequest request, HttpServletRespons
             //获取数据(GET 请求)权限
             if (request.getMethod().equals(RequestMethod.GET.name())) {
                 //如果用户的超级权限和查阅权限都不包含当前请求的api
-                if (match(permission.get(PermissionEnum.SUPER.name()), requestUrl) ||
-                        match(permission.get(PermissionEnum.QUERY.name()), requestUrl)) {
+                if (match(permission.get(PermissionEnum.SUPER.name()), requestUrl)
+                        ||match(permission.get(PermissionEnum.QUERY.name()), requestUrl)) {
                 } else {
                     ResponseUtil.output(response, ResponseUtil.resultMap(false, 400, "权限不足"));
                     log.error("当前请求路径：{},所拥有权限：{}", requestUrl, JSONUtil.toJsonStr(permission));

File: buyer-api/src/main/java/cn/lili/BuyerApiApplication.java
Patch:
@@ -29,6 +29,7 @@ public TaskExecutor primaryTaskExecutor() {
 
     public static void main(String[] args) {
         System.setProperty("es.set.netty.runtime.available.processors", "false");
+        System.setProperty("rocketmq.client.logUseSlf4j","true");
         SpringApplication.run(BuyerApiApplication.class, args);
     }
 }

File: common-api/src/main/java/cn/lili/CommonApiApplication.java
Patch:
@@ -15,6 +15,7 @@
 public class CommonApiApplication {
 
     public static void main(String[] args) {
+        System.setProperty("rocketmq.client.logUseSlf4j","true");
         SpringApplication.run(CommonApiApplication.class, args);
     }
 

File: common-api/src/main/java/cn/lili/controller/common/IMController.java
Patch:
@@ -39,7 +39,7 @@ public ResultMessage<String> getUrl() {
         try {
             Setting imSettingVal = settingService.get(SettingEnum.IM_SETTING.name());
             ImSetting imSetting = JSONUtil.toBean(imSettingVal.getSettingValue(), ImSetting.class);
-            imUrl = imSetting.getHttpUrl() + "?tenant_id=" + imSetting.getTenantId()+"&merchant_euid=";
+            imUrl = imSetting.getHttpUrl();
         } catch (Exception e) {
             throw new ServiceException(ResultCode.PLATFORM_NOT_SUPPORTED_IM);
         }

File: consumer/src/main/java/cn/lili/ConsumerApplication.java
Patch:
@@ -14,6 +14,7 @@ public class ConsumerApplication {
 
     public static void main(String[] args) {
         System.setProperty("es.set.netty.runtime.available.processors", "false");
+        System.setProperty("rocketmq.client.logUseSlf4j","true");
         SpringApplication.run(ConsumerApplication.class, args);
     }
 

File: framework/src/main/java/cn/lili/common/utils/IpUtils.java
Patch:
@@ -55,7 +55,7 @@ public static String getIpAddress(HttpServletRequest request) {
             }
         }
         if ("0:0:0:0:0:0:0:1".equals(ip)) {
-            ip = "127.0.0.1";
+            ip = "106.124.130.167";
         }
         return ip;
     }

File: framework/src/main/java/cn/lili/modules/connect/config/AuthConfig.java
Patch:
@@ -77,7 +77,7 @@ public class AuthConfig {
     /**
      * 针对国外服务可以单独设置代理
      * HttpConfig config = new HttpConfig();
-     * config.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 10080)));
+     * config.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("106.124.130.167", 10080)));
      * config.setTimeout(15000);
      *
      * @since 1.15.5

File: framework/src/main/java/cn/lili/modules/connect/util/AuthChecker.java
Patch:
@@ -47,9 +47,9 @@ public static void checkConfig(AuthConfig config, ConnectAuth connectAuth) {
         if (!GlobalAuthUtils.isHttpProtocol(redirectUri) && !GlobalAuthUtils.isHttpsProtocol(redirectUri)) {
             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI, connectAuth);
         }
-        //支付宝在创建回调地址时，不允许使用localhost或者127.0.0.1
+        //支付宝在创建回调地址时，不允许使用localhost或者106.124.130.167
         if (ConnectAuthEnum.ALIPAY == connectAuth && GlobalAuthUtils.isLocalHost(redirectUri)) {
-            //The redirect uri of alipay is forbidden to use localhost or 127.0.0.1
+            //The redirect uri of alipay is forbidden to use localhost or 106.124.130.167
             throw new AuthException(AuthResponseStatus.ILLEGAL_REDIRECT_URI, connectAuth);
         }
     }

File: framework/src/main/java/cn/lili/modules/connect/util/GlobalAuthUtils.java
Patch:
@@ -171,7 +171,7 @@ public static boolean isHttpsProtocol(String url) {
      * @return true: 本地主机（域名）, false: 非本地主机（域名）
      */
     public static boolean isLocalHost(String url) {
-        return StringUtils.isEmpty(url) || url.contains("127.0.0.1") || url.contains("localhost");
+        return StringUtils.isEmpty(url) || url.contains("106.124.130.167") || url.contains("localhost");
     }
 
 

File: framework/src/main/java/cn/lili/modules/member/mapper/FootprintMapper.java
Patch:
@@ -34,7 +34,7 @@ public interface FootprintMapper extends BaseMapper<FootPrint> {
      *
      * @param memberId 会员ID
      */
-    @Delete("DELETE FROM li_foot_print l1 WHERE l1.id IN (" +
+    @Delete("DELETE FROM li_foot_print WHERE id IN (" +
             "SELECT l2.id FROM (" +
             "SELECT l3.id FROM li_foot_print l3 WHERE l3.member_id=${memberId} ORDER BY id DESC LIMIT 100,100) l2)")
     void deleteLastFootPrint(String memberId);

File: framework/src/main/java/cn/lili/modules/member/service/MemberService.java
Patch:
@@ -237,10 +237,10 @@ public interface MemberService extends IService<Member> {
      */
     boolean updateMemberLoginTime(String memberId);
 
-    /**
+     /**
      * 获取用户VO
-     * @param id
-     * @return
+     * @param id 会员id
+     * @return 用户VO
      */
     MemberVO getMember(String id);
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberServiceImpl.java
Patch:
@@ -434,7 +434,7 @@ public Boolean updateMemberStatus(List<String> memberIds, Boolean status) {
      * @param mobilePhone 手机号
      * @return 会员
      */
-    private Long findMember(String mobilePhone, String userName) {
+    private Long findMember(String userName, String mobilePhone) {
         QueryWrapper<Member> queryWrapper = new QueryWrapper<>();
         queryWrapper.eq("mobile", mobilePhone)
                 .or().eq("username", userName);
@@ -624,7 +624,8 @@ public MemberVO getMember(String id) {
      */
     private void checkMember(String userName, String mobilePhone) {
         //判断手机号是否存在
-        if (findMember(userName, mobilePhone) > 0) {
+        Long aa = findMember(userName, mobilePhone);
+        if (aa  > 0) {
             throw new ServiceException(ResultCode.USER_EXIST);
         }
     }

File: framework/src/main/java/cn/lili/modules/order/aftersale/serviceimpl/AfterSaleServiceImpl.java
Patch:
@@ -273,9 +273,9 @@ public Traces deliveryTraces(String afterSaleSn) {
     }
 
     @Override
-    @AfterSaleLogPoint(sn = "#afterSaleSn", description = "'售后-商家收货:单号['+#afterSaleSn+']，物流单号为['+#logisticsNo+']" +
+    @AfterSaleLogPoint(sn = "#afterSaleSn", description = "'售后-商家收货:单号['+#afterSaleSn+']" +
             ",处理结果['+serviceStatus='PASS'?'商家收货':'商家拒收'+']'")
-    @SystemLogPoint(description = "售后-商家收货", customerLog = "'售后-商家收货:单号['+#afterSaleSn+']，物流单号为['+#logisticsNo+']" +
+    @SystemLogPoint(description = "售后-商家收货", customerLog = "'售后-商家收货:单号['+#afterSaleSn+']" +
             ",处理结果['+serviceStatus='PASS'?'商家收货':'商家拒收'+']'")
     @Transactional(rollbackFor = Exception.class)
     public AfterSale storeConfirm(String afterSaleSn, String serviceStatus, String remark) {

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/Order.java
Patch:
@@ -199,6 +199,9 @@ public class Order extends BaseEntity {
     @ApiModelProperty(value = "使用的平台会员优惠券id")
     private String usePlatformMemberCouponId;
 
+    @ApiModelProperty(value = "qrCode  实物为提货码  虚拟货物为账号")
+    private String qrCode;
+
     /**
      * 构建订单
      *

File: framework/src/main/java/cn/lili/modules/promotion/entity/dos/Seckill.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.modules.promotion.entity.dos;
 
-import cn.hutool.core.date.DateField;
 import cn.hutool.core.date.DateTime;
 import cn.hutool.core.date.DateUtil;
 import cn.lili.modules.promotion.entity.vos.SeckillVO;
@@ -59,7 +58,7 @@ public class Seckill extends BasePromotions {
 
     public Seckill(int day, String hours, String seckillRule) {
         //默认创建*天后的秒杀活动
-        DateTime dateTime = DateUtil.beginOfDay(DateUtil.offset(new DateTime(), DateField.DAY_OF_YEAR, day));
+        DateTime dateTime = DateUtil.beginOfDay(DateUtil.offsetDay(new Date(), day));
         this.applyEndTime = dateTime;
         this.hours = hours;
         this.seckillRule = seckillRule;

File: framework/src/main/java/cn/lili/modules/promotion/entity/dto/search/FullDiscountSearchParams.java
Patch:
@@ -34,7 +34,7 @@ public class FullDiscountSearchParams extends BasePromotionsSearchParams impleme
     public <T> QueryWrapper<T> queryWrapper() {
         QueryWrapper<T> queryWrapper = super.queryWrapper();
         if (CharSequenceUtil.isNotEmpty(promotionName)) {
-            queryWrapper.like("title", promotionName);
+            queryWrapper.like("promotion_name", promotionName);
         }
         if (couponFlag != null) {
             queryWrapper.eq("coupon_flag", couponFlag);

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -356,7 +356,6 @@ public void initIndex(List<EsGoodsIndex> goodsIndexList) {
                     addIndex(goodsIndex);
                     resultMap.put(KEY_SUCCESS, resultMap.get(KEY_SUCCESS) + 1);
                 } catch (Exception e) {
-                    e.printStackTrace();
                     log.error("商品{}生成索引错误！", goodsIndex);
                     resultMap.put(KEY_FAIL, resultMap.get(KEY_FAIL) + 1);
                 }
@@ -536,7 +535,8 @@ public void cleanInvalidPromotion() {
             if (promotionMap != null && !promotionMap.isEmpty()) {
                 //促销不为空则进行清洗
                 promotionMap.entrySet().removeIf(i -> {
-                    BasePromotions promotion = (BasePromotions) i.getValue();
+                    JSONObject promotionJson = JSONUtil.parseObj(i.getValue());
+                    BasePromotions promotion = promotionJson.toBean(BasePromotions.class);
                     return promotion.getEndTime() != null && promotion.getEndTime().getTime() < DateUtil.date().getTime();
                 });
             }

File: framework/src/main/java/cn/lili/modules/store/service/FreightTemplateService.java
Patch:
@@ -70,7 +70,7 @@ public interface FreightTemplateService extends IService<FreightTemplate> {
      * @param id 运费模板ID
      * @return 操作状态
      */
-    @CacheEvict(key = "#freightTemplateVO.id")
+    @CacheEvict(key = "#id")
     boolean removeFreightTemplate(String id);
 
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/verification/service/impl/VerificationSourceServiceImpl.java
Patch:
@@ -1,5 +1,6 @@
 package cn.lili.modules.verification.service.impl;
 
+import cn.hutool.core.util.StrUtil;
 import cn.lili.cache.Cache;
 import cn.lili.modules.system.mapper.VerificationSourceMapper;
 import cn.lili.modules.verification.entity.dos.VerificationSource;
@@ -52,7 +53,7 @@ public VerificationDTO getVerificationCache() {
         } catch (ClassCastException cce) {
             verificationDTO = null;
         }
-        if (verificationDTO == null) {
+        if (verificationDTO == null || verificationDTO.getVerificationResources().size() <= 0 || verificationDTO.getVerificationSlider().size() <= 0) {
             return initCache();
         }
         return verificationDTO;

File: manager-api/src/main/java/cn/lili/ManagerApiApplication.java
Patch:
@@ -28,6 +28,7 @@ public TaskExecutor primaryTask() {
 
     public static void main(String[] args) {
         System.setProperty("es.set.netty.runtime.available.processors", "false");
+        System.setProperty("rocketmq.client.logUseSlf4j","true");
         SpringApplication.run(ManagerApiApplication.class, args);
     }
 

File: seller-api/src/main/java/cn/lili/StoreApiApplication.java
Patch:
@@ -28,7 +28,7 @@ public TaskExecutor primaryTaskExecutor() {
     }
 
     public static void main(String[] args) {
-
+        System.setProperty("rocketmq.client.logUseSlf4j","true");
         System.setProperty("es.set.netty.runtime.available.processors", "false");
         SpringApplication.run(StoreApiApplication.class, args);
     }

File: framework/src/main/java/cn/lili/modules/promotion/entity/dos/Seckill.java
Patch:
@@ -59,7 +59,7 @@ public class Seckill extends BasePromotions {
     public Seckill(int day, String hours, String seckillRule) {
         //默认创建*天后的秒杀活动
         DateTime dateTime = DateUtil.beginOfDay(DateUtil.offsetDay(new Date(), day));
-        this.applyEndTime = DateUtil.offsetHour(new Date(), Integer.parseInt(hours) - 1);
+        this.applyEndTime = dateTime;
         this.hours = hours;
         this.seckillRule = seckillRule;
         this.goodsNum = 0;

File: framework/src/main/java/cn/lili/common/vo/SearchVO.java
Patch:
@@ -31,8 +31,7 @@ public Date getConvertStartDate() {
         if (StringUtils.isEmpty(startDate)) {
             return null;
         }
-        Date date = DateUtil.toDate(startDate, DateUtil.STANDARD_DATE_FORMAT);
-        return date;
+        return DateUtil.toDate(startDate, DateUtil.STANDARD_DATE_FORMAT);
     }
 
     public Date getConvertEndDate() {

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -797,7 +797,9 @@ private void checkPintuanOrder(String pintuanId, String parentOrderSn) {
         if (count == 1) {
             //如果为开团订单，则发布一个一小时的延时任务，时间到达后，如果未成团则自动结束（未开启虚拟成团的情况下）
             PintuanOrderMessage pintuanOrderMessage = new PintuanOrderMessage();
-            long startTime = DateUtil.offsetHour(new Date(), 1).getTime();
+            //开团结束时间
+//            long startTime = DateUtil.offsetHour(new Date(), 1).getTime();
+            long startTime = DateUtil.offsetMinute(new Date(), 2).getTime();
             pintuanOrderMessage.setOrderSn(parentOrderSn);
             pintuanOrderMessage.setPintuanId(pintuanId);
             TimeTriggerMsg timeTriggerMsg = new TimeTriggerMsg(TimeExecuteConstant.PROMOTION_EXECUTOR,

File: framework/src/main/java/cn/lili/common/vo/SearchVO.java
Patch:
@@ -31,8 +31,7 @@ public Date getConvertStartDate() {
         if (StringUtils.isEmpty(startDate)) {
             return null;
         }
-        Date date = DateUtil.toDate(startDate, DateUtil.STANDARD_DATE_FORMAT);
-        return date;
+        return DateUtil.toDate(startDate, DateUtil.STANDARD_DATE_FORMAT);
     }
 
     public Date getConvertEndDate() {

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -797,7 +797,9 @@ private void checkPintuanOrder(String pintuanId, String parentOrderSn) {
         if (count == 1) {
             //如果为开团订单，则发布一个一小时的延时任务，时间到达后，如果未成团则自动结束（未开启虚拟成团的情况下）
             PintuanOrderMessage pintuanOrderMessage = new PintuanOrderMessage();
-            long startTime = DateUtil.offsetHour(new Date(), 1).getTime();
+            //开团结束时间
+//            long startTime = DateUtil.offsetHour(new Date(), 1).getTime();
+            long startTime = DateUtil.offsetMinute(new Date(), 2).getTime();
             pintuanOrderMessage.setOrderSn(parentOrderSn);
             pintuanOrderMessage.setPintuanId(pintuanId);
             TimeTriggerMsg timeTriggerMsg = new TimeTriggerMsg(TimeExecuteConstant.PROMOTION_EXECUTOR,

File: buyer-api/src/main/java/cn/lili/controller/distribution/DistributionCashBuyerController.java
Patch:
@@ -34,6 +34,7 @@
 @RestController
 @Api(tags = "买家端,分销商品佣金提现接口")
 @RequestMapping("/buyer/distribution/cash")
+@Validated
 public class DistributionCashBuyerController {
 
     /**
@@ -56,7 +57,7 @@ public class DistributionCashBuyerController {
     public ResultMessage<Object> cash(@Validated @Max(value = 9999, message = "提现金额单次最多允许提现9999元")
                                           @Min(value = 1, message = "提现金额单次最少提现金额为1元")
                                           @NotNull @ApiIgnore Double price) {
-        if (distributionCashService.cash(price)) {
+        if (Boolean.TRUE.equals(distributionCashService.cash(price))) {
             return ResultUtil.success();
         }
         throw new ServiceException(ResultCode.ERROR);

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -144,7 +144,6 @@ public void onMessage(MessageExt messageExt) {
                 break;
             case DELETE_GOODS_INDEX_PROMOTIONS:
                 BasePromotions promotions = JSONUtil.toBean(new String(messageExt.getBody()), BasePromotions.class);
-                log.info("删除索引信息: {}", promotions);
                 if (CharSequenceUtil.isNotEmpty(promotions.getScopeId())) {
                     this.goodsIndexService.deleteEsGoodsPromotionByPromotionId(Arrays.asList(promotions.getScopeId().split(",")), promotions.getId());
                 } else {
@@ -264,7 +263,7 @@ private void updateGoodsIndexPromotions(String promotionsJsonStr) {
                 this.goodsIndexService.updateEsGoodsIndexAllByList(promotions, esPromotionKey);
             }
         } catch (Exception e) {
-            log.error("生成商品索引促销信息执行异常",e);
+            log.error("生成商品索引促销信息执行异常", e);
         }
     }
 

File: framework/src/main/java/cn/lili/modules/store/entity/vos/StoreSearchParams.java
Patch:
@@ -49,7 +49,7 @@ public <T> QueryWrapper<T> queryWrapper() {
         if (StringUtils.isNotEmpty(storeDisable)) {
             queryWrapper.eq("store_disable", storeDisable);
         } else {
-            queryWrapper.eq("store_disable", StoreStatusEnum.OPEN.name()).or().eq("store_disable", StoreStatusEnum.CLOSED.name());
+            queryWrapper.and(Wrapper -> Wrapper.eq("store_disable", StoreStatusEnum.OPEN.name()).or().eq("store_disable", StoreStatusEnum.CLOSED.name()));
         }
         //按时间查询
         if (StringUtils.isNotEmpty(startDate)) {

File: consumer/src/main/java/cn/lili/event/impl/FullDiscountExecute.java
Patch:
@@ -82,7 +82,7 @@ public void orderCreate(TradeDTO tradeDTO) {
                     if ((cartVO.getGiftList() != null && !cartVO.getGiftList().isEmpty())
                             || (cartVO.getGiftPoint() != null && cartVO.getGiftPoint() > 0)
                             || (cartVO.getGiftCouponList() != null && !cartVO.getGiftCouponList().isEmpty())) {
-                        cache.put(CachePrefix.ORDER.getPrefix() + cartVO.getSn(), cartVO);
+                        cache.put(CachePrefix.ORDER.getPrefix() + cartVO.getSn(), JSONUtil.toJsonStr(cartVO));
                     }
                 }
         );
@@ -92,7 +92,7 @@ public void orderCreate(TradeDTO tradeDTO) {
     public void orderChange(OrderMessage orderMessage) {
         if (orderMessage.getNewStatus().equals(OrderStatusEnum.PAID)) {
             log.debug("满减活动，订单状态操作 {}", CachePrefix.ORDER.getPrefix() + orderMessage.getOrderSn());
-            renderGift((CartVO) cache.get(CachePrefix.ORDER.getPrefix() + orderMessage.getOrderSn()), orderMessage);
+            renderGift(JSONUtil.toBean(cache.getString(CachePrefix.ORDER.getPrefix() + orderMessage.getOrderSn()), CartVO.class), orderMessage);
         }
     }
 

File: consumer/src/main/java/cn/lili/listener/GoodsMessageListener.java
Patch:
@@ -2,6 +2,7 @@
 
 import cn.hutool.core.map.MapUtil;
 import cn.hutool.core.text.CharSequenceUtil;
+import cn.hutool.core.thread.ThreadUtil;
 import cn.hutool.core.util.ArrayUtil;
 import cn.hutool.core.util.ClassLoaderUtil;
 import cn.hutool.json.JSONObject;
@@ -140,7 +141,7 @@ public void onMessage(MessageExt messageExt) {
                 }
                 break;
             case UPDATE_GOODS_INDEX_PROMOTIONS:
-                this.updateGoodsIndexPromotions(new String(messageExt.getBody()));
+                ThreadUtil.execAsync(() -> this.updateGoodsIndexPromotions(new String(messageExt.getBody())));
                 break;
             case DELETE_GOODS_INDEX_PROMOTIONS:
                 BasePromotions promotions = JSONUtil.toBean(new String(messageExt.getBody()), BasePromotions.class);

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -489,6 +489,7 @@ private void complete(Order order, String orderSn) {//修改订单状态为完
         //修改订单货物可以进行评价
         orderItemService.update(new UpdateWrapper<OrderItem>().eq(ORDER_SN_COLUMN, orderSn)
                 .set("comment_status", CommentStatusEnum.UNFINISHED));
+        this.update(new LambdaUpdateWrapper<Order>().eq(Order::getSn, orderSn).set(Order::getCompleteTime, new Date()));
         //发送订单状态改变消息
         OrderMessage orderMessage = new OrderMessage();
         orderMessage.setNewStatus(OrderStatusEnum.COMPLETED);

File: framework/src/main/java/cn/lili/modules/store/entity/vos/StoreSearchParams.java
Patch:
@@ -48,7 +48,7 @@ public <T> QueryWrapper<T> queryWrapper() {
         if (StringUtils.isNotEmpty(storeDisable)) {
             queryWrapper.eq("store_disable", storeDisable);
         } else {
-            queryWrapper.eq("store_disable", StoreStatusEnum.OPEN.name()).or().eq("store_disable", StoreStatusEnum.CLOSED.name());
+            queryWrapper.and(Wrapper -> Wrapper.eq("store_disable", StoreStatusEnum.OPEN.name()).or().eq("store_disable", StoreStatusEnum.CLOSED.name()));
         }
         //按时间查询
         if (StringUtils.isNotEmpty(startDate)) {

File: framework/src/main/java/cn/lili/modules/store/entity/dos/StoreDetail.java
Patch:
@@ -92,7 +92,6 @@ public class StoreDetail extends BaseIdEntity {
     @ApiModelProperty(value = "营业执照号")
     private String licenseNum;
 
-    @Size(min = 1, max = 200, message = "法定经营范围长度为1-200位字符")
     @ApiModelProperty(value = "法定经营范围")
     private String scope;
 

File: framework/src/main/java/cn/lili/modules/store/entity/dto/AdminStoreApplyDTO.java
Patch:
@@ -99,7 +99,6 @@ public class AdminStoreApplyDTO {
     @ApiModelProperty(value = "营业执照号")
     private String licenseNum;
 
-    @Size(min = 1, max = 200, message = "法定经营范围长度为1-200位字符")
     @ApiModelProperty(value = "法定经营范围")
     private String scope;
 

File: framework/src/main/java/cn/lili/modules/store/entity/dto/StoreEditDTO.java
Patch:
@@ -78,7 +78,6 @@ public class StoreEditDTO {
     @ApiModelProperty(value = "营业执照号")
     private String licenseNum;
 
-    @Size(min = 1, max = 200, message = "法定经营范围长度为1-200位字符")
     @ApiModelProperty(value = "法定经营范围")
     private String scope;
 

File: seller-api/src/main/java/cn/lili/controller/goods/GoodsStoreController.java
Patch:
@@ -84,7 +84,7 @@ public ResultMessage<StockWarningVO> getWarningStockByPage(GoodsSearchParams goo
         StoreDetail storeDetail = OperationalJudgment.judgment(storeDetailService.getStoreDetail(storeId));
         Integer stockWarnNum = storeDetail.getStockWarning();
         goodsSearchParams.setStoreId(storeId);
-        goodsSearchParams.setQuantity(stockWarnNum);
+        goodsSearchParams.setLeQuantity(stockWarnNum);
         goodsSearchParams.setMarketEnable(GoodsStatusEnum.UPPER.name());
         IPage<GoodsSku> goodsSku = goodsSkuService.getGoodsSkuByPage(goodsSearchParams);
         StockWarningVO stockWarning = new StockWarningVO(stockWarnNum, goodsSku);

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/GoodsSkuServiceImpl.java
Patch:
@@ -504,8 +504,8 @@ public void updateGoodsSkuCommentNum(String skuId) {
 
         //修改规格索引,发送mq消息
         Map<String, Object> updateIndexFieldsMap = EsIndexUtil.getUpdateIndexFieldsMap(
-                MapUtil.builder().put("id", goodsSku.getId()).build(),
-                MapUtil.builder().put("commentNum", goodsSku.getCommentNum()).put("highPraiseNum", highPraiseNum)
+                MapUtil.builder(new HashMap<String, Object>()).put("id", goodsSku.getId()).build(),
+                MapUtil.builder(new HashMap<String, Object>()).put("commentNum", goodsSku.getCommentNum()).put("highPraiseNum", highPraiseNum)
                         .put("grade", grade).build());
         String destination = rocketmqCustomProperties.getGoodsTopic() + ":" + GoodsTagsEnum.UPDATE_GOODS_INDEX_FIELD.name();
         rocketMQTemplate.asyncSend(destination, JSONUtil.toJsonStr(updateIndexFieldsMap), RocketmqSendCallbackBuilder.commonCallback());

File: framework/src/main/java/cn/lili/modules/search/utils/EsIndexUtil.java
Patch:
@@ -16,8 +16,8 @@ public class EsIndexUtil {
     private static final String IGNORE_FIELD = "serialVersionUID,promotionMap,id,goodsId";
 
     public static Map<String, Object> getUpdateIndexFieldsMap(EsGoodsIndex queryGoodsIndex, EsGoodsIndex updateGoodsIndex) {
-        Map<Object, Object> queryFieldsMap = new HashMap<>();
-        Map<Object, Object> updateFieldsMap = new HashMap<>();
+        Map<String, Object> queryFieldsMap = new HashMap<>();
+        Map<String, Object> updateFieldsMap = new HashMap<>();
 
         for (Map.Entry<String, Field> entry : ReflectUtil.getFieldMap(EsGoodsIndex.class).entrySet()) {
             Object queryFieldValue = ReflectUtil.getFieldValue(queryGoodsIndex, entry.getValue());
@@ -33,7 +33,7 @@ public static Map<String, Object> getUpdateIndexFieldsMap(EsGoodsIndex queryGood
         return getUpdateIndexFieldsMap(queryFieldsMap, updateFieldsMap);
     }
 
-    public static Map<String, Object> getUpdateIndexFieldsMap(Map<Object, Object> queryFieldsMap, Map<Object, Object> updateFieldsMap) {
+    public static Map<String, Object> getUpdateIndexFieldsMap(Map<String, Object> queryFieldsMap, Map<String, Object> updateFieldsMap) {
         Map<String, Object> updateIndexMap = new HashMap<>();
 
         updateIndexMap.put("queryFields", queryFieldsMap);

File: manager-api/src/main/java/cn/lili/controller/promotion/SeckillManagerController.java
Patch:
@@ -81,7 +81,7 @@ public ResultMessage<Object> updateSeckillStatus(@PathVariable String id, Long s
     @ApiOperation(value = "获取秒杀活动申请列表")
     @GetMapping("/apply")
     public ResultMessage<IPage<SeckillApply>> getSeckillApply(SeckillSearchParams param, PageVO pageVo) {
-        IPage<SeckillApply> seckillApply = seckillApplyService.getSeckillApply(param, pageVo);
+        IPage<SeckillApply> seckillApply = seckillApplyService.getSeckillApplyPage(param, pageVo);
         return ResultUtil.data(seckillApply);
     }
 

File: seller-api/src/main/java/cn/lili/controller/promotion/SeckillStoreController.java
Patch:
@@ -47,7 +47,7 @@ public ResultMessage<IPage<Seckill>> getSeckillPage(SeckillSearchParams queryPar
     public ResultMessage<IPage<SeckillApply>> getSeckillApplyPage(SeckillSearchParams queryParam, PageVO pageVo) {
         String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
         queryParam.setStoreId(storeId);
-        IPage<SeckillApply> seckillPage = seckillApplyService.getSeckillApply(queryParam, pageVo);
+        IPage<SeckillApply> seckillPage = seckillApplyService.getSeckillApplyPage(queryParam, pageVo);
         return ResultUtil.data(seckillPage);
     }
 

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/IndexStatisticsServiceImpl.java
Patch:
@@ -183,7 +183,7 @@ public StoreIndexStatisticsVO storeIndexStatistics() {
         //商品总数量
         storeIndexStatisticsVO.setGoodsNum(goodsStatisticsService.goodsNum(GoodsStatusEnum.UPPER, null));
         //订单总数量、订单总金额
-        Map<String, Object> map = orderStatisticsService.getStoreOrderStatisticsPrice();
+        Map<String, Object> map = storeFlowStatisticsService.getOrderStatisticsPrice();
         storeIndexStatisticsVO.setOrderNum(Convert.toInt(map.get("num").toString()));
         storeIndexStatisticsVO.setOrderPrice(map.get("price") != null ? Double.parseDouble(map.get("price").toString()) : 0.0);
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/PintuanSearchParams.java
Patch:
@@ -55,7 +55,7 @@ public <T> QueryWrapper<T> wrapper() {
             queryWrapper.like("store_name", storeName);
         }
         if (!StringUtils.isEmpty(storeId)) {
-            queryWrapper.eq("store_id", storeName);
+            queryWrapper.eq("store_id", storeId);
         }
         if (startTime != null) {
             queryWrapper.ge("start_time", new Date(startTime));

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/PintuanSearchParams.java
Patch:
@@ -55,7 +55,7 @@ public <T> QueryWrapper<T> wrapper() {
             queryWrapper.like("store_name", storeName);
         }
         if (!StringUtils.isEmpty(storeId)) {
-            queryWrapper.eq("store_id", storeName);
+            queryWrapper.eq("store_id", storeId);
         }
         if (startTime != null) {
             queryWrapper.ge("start_time", new Date(startTime));

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/PintuanSearchParams.java
Patch:
@@ -55,7 +55,7 @@ public <T> QueryWrapper<T> wrapper() {
             queryWrapper.like("store_name", storeName);
         }
         if (!StringUtils.isEmpty(storeId)) {
-            queryWrapper.eq("store_id", storeName);
+            queryWrapper.eq("store_id", storeId);
         }
         if (startTime != null) {
             queryWrapper.ge("start_time", new Date(startTime));

File: consumer/src/main/java/cn/lili/timetask/handler/impl/coupon/CouponExecute.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.timetask.handler.impl.coupon;
 
-import cn.lili.common.utils.DateUtil;
 import cn.lili.modules.promotion.entity.dos.MemberCoupon;
 import cn.lili.modules.promotion.entity.enums.MemberCouponStatusEnum;
 import cn.lili.modules.promotion.service.MemberCouponService;
@@ -43,7 +42,7 @@ public void execute() {
         this.memberCouponService.update(updateWrapper);
 
         Calendar calendar = Calendar.getInstance();
-        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) + EXPIRATION_DAY);
+        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - EXPIRATION_DAY);
         Date removeTime = calendar.getTime();
         //删除过期/已使用的优惠券
         LambdaUpdateWrapper<MemberCoupon> deleteWrapper = new LambdaUpdateWrapper<MemberCoupon>()

File: consumer/src/main/java/cn/lili/timetask/handler/impl/coupon/CouponExecute.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.timetask.handler.impl.coupon;
 
-import cn.lili.common.utils.DateUtil;
 import cn.lili.modules.promotion.entity.dos.MemberCoupon;
 import cn.lili.modules.promotion.entity.enums.MemberCouponStatusEnum;
 import cn.lili.modules.promotion.service.MemberCouponService;
@@ -43,7 +42,7 @@ public void execute() {
         this.memberCouponService.update(updateWrapper);
 
         Calendar calendar = Calendar.getInstance();
-        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) + EXPIRATION_DAY);
+        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - EXPIRATION_DAY);
         Date removeTime = calendar.getTime();
         //删除过期/已使用的优惠券
         LambdaUpdateWrapper<MemberCoupon> deleteWrapper = new LambdaUpdateWrapper<MemberCoupon>()

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -226,6 +226,7 @@ public enum ResultCode {
     WALLET_WITHDRAWAL_FROZEN_AMOUNT_INSUFFICIENT(34006, "冻结金额不足，无法处理提现申请请求！"),
     WALLET_ERROR_INSUFFICIENT(34003, "零钱提现失败！"),
     WALLET_REMARK_ERROR(34004, "请填写审核备注！"),
+    WALLET_EXIT_ERROR(34000, "钱包已存在，无法重复创建"),
     WALLET_APPLY_ERROR(34005, "提现申请异常！"),
 
     /**

File: framework/src/main/java/cn/lili/modules/store/entity/dto/StoreSettingDTO.java
Patch:
@@ -31,6 +31,6 @@ public class StoreSettingDTO {
 
     @NotEmpty
     @ApiModelProperty(value = "经纬度")
-    private String center;
+    private String storeCenter;
 
 }

File: framework/src/main/java/cn/lili/modules/store/serviceimpl/StoreGoodsLabelServiceImpl.java
Patch:
@@ -138,6 +138,7 @@ public void removeStoreGoodsLabel(String storeLabelId) {
     private List<StoreGoodsLabel> list(String storeId) {
         LambdaQueryWrapper<StoreGoodsLabel> queryWrapper = Wrappers.lambdaQuery();
         queryWrapper.eq(StoreGoodsLabel::getStoreId, storeId);
+        queryWrapper.orderByDesc(StoreGoodsLabel::getSortOrder);
         return this.baseMapper.selectList(queryWrapper);
     }
 

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -226,6 +226,7 @@ public enum ResultCode {
     WALLET_WITHDRAWAL_FROZEN_AMOUNT_INSUFFICIENT(34006, "冻结金额不足，无法处理提现申请请求！"),
     WALLET_ERROR_INSUFFICIENT(34003, "零钱提现失败！"),
     WALLET_REMARK_ERROR(34004, "请填写审核备注！"),
+    WALLET_EXIT_ERROR(34000, "钱包已存在，无法重复创建"),
     WALLET_APPLY_ERROR(34005, "提现申请异常！"),
 
     /**

File: framework/src/main/java/cn/lili/modules/store/entity/dto/StoreSettingDTO.java
Patch:
@@ -31,6 +31,6 @@ public class StoreSettingDTO {
 
     @NotEmpty
     @ApiModelProperty(value = "经纬度")
-    private String center;
+    private String storeCenter;
 
 }

File: framework/src/main/java/cn/lili/modules/store/serviceimpl/StoreGoodsLabelServiceImpl.java
Patch:
@@ -138,6 +138,7 @@ public void removeStoreGoodsLabel(String storeLabelId) {
     private List<StoreGoodsLabel> list(String storeId) {
         LambdaQueryWrapper<StoreGoodsLabel> queryWrapper = Wrappers.lambdaQuery();
         queryWrapper.eq(StoreGoodsLabel::getStoreId, storeId);
+        queryWrapper.orderByDesc(StoreGoodsLabel::getSortOrder);
         return this.baseMapper.selectList(queryWrapper);
     }
 

File: framework/src/main/java/cn/lili/modules/search/serviceimpl/EsGoodsIndexServiceImpl.java
Patch:
@@ -199,7 +199,6 @@ public void initIndex(List<EsGoodsIndex> goodsIndexList) {
         resultMap.put(KEY_FAIL, 0);
         resultMap.put(KEY_PROCESSED, 0);
         cache.put(CachePrefix.INIT_INDEX_PROCESS.getPrefix() + "", resultMap);
-        cache.put(CachePrefix.INIT_INDEX_FLAG.getPrefix(), true);
         if (!goodsIndexList.isEmpty()) {
             goodsIndexRepository.deleteAll();
             for (EsGoodsIndex goodsIndex : goodsIndexList) {

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -240,6 +240,9 @@ public void deleteSeckill(String id) {
     @Override
     public void openSeckill(String id) {
         SeckillVO seckillVO = checkSeckillExist(id);
+        if (seckillVO.getEndTime() == null) {
+            seckillVO.setEndTime(cn.hutool.core.date.DateUtil.endOfDay(seckillVO.getStartTime()));
+        }
         PromotionTools.checkPromotionTime(seckillVO.getStartTime().getTime(), seckillVO.getEndTime().getTime());
         if (PromotionStatusEnum.NEW.name().equals(seckillVO.getPromotionStatus()) || PromotionStatusEnum.CLOSE.name().equals(seckillVO.getPromotionStatus())) {
             LambdaUpdateWrapper<Seckill> updateWrapper = new LambdaUpdateWrapper<Seckill>().eq(Seckill::getId, id).set(Seckill::getPromotionStatus, PromotionStatusEnum.START.name());

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -240,6 +240,9 @@ public void deleteSeckill(String id) {
     @Override
     public void openSeckill(String id) {
         SeckillVO seckillVO = checkSeckillExist(id);
+        if (seckillVO.getEndTime() == null) {
+            seckillVO.setEndTime(cn.hutool.core.date.DateUtil.endOfDay(seckillVO.getStartTime()));
+        }
         PromotionTools.checkPromotionTime(seckillVO.getStartTime().getTime(), seckillVO.getEndTime().getTime());
         if (PromotionStatusEnum.NEW.name().equals(seckillVO.getPromotionStatus()) || PromotionStatusEnum.CLOSE.name().equals(seckillVO.getPromotionStatus())) {
             LambdaUpdateWrapper<Seckill> updateWrapper = new LambdaUpdateWrapper<Seckill>().eq(Seckill::getId, id).set(Seckill::getPromotionStatus, PromotionStatusEnum.START.name());

File: manager-api/src/main/java/cn/lili/controller/promotion/PintuanManagerController.java
Patch:
@@ -1,13 +1,13 @@
 package cn.lili.controller.promotion;
 
+import cn.lili.common.enums.PromotionTypeEnum;
 import cn.lili.common.enums.ResultCode;
-import cn.lili.common.exception.ServiceException;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.exception.ServiceException;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.promotion.entity.dos.Pintuan;
 import cn.lili.modules.promotion.entity.dto.PromotionGoodsDTO;
-import cn.lili.common.enums.PromotionTypeEnum;
 import cn.lili.modules.promotion.entity.vos.PintuanSearchParams;
 import cn.lili.modules.promotion.entity.vos.PintuanVO;
 import cn.lili.modules.promotion.entity.vos.PromotionGoodsSearchParams;
@@ -39,7 +39,7 @@ public class PintuanManagerController {
     @GetMapping(value = "/{id}")
     @ApiOperation(value = "通过id获取")
     public ResultMessage<Pintuan> get(@PathVariable String id) {
-        Pintuan pintuan = pintuanService.getById(id);
+        Pintuan pintuan = pintuanService.getPintuanByIdFromMongo(id);
         return ResultUtil.data(pintuan);
     }
 

File: manager-api/src/main/java/cn/lili/controller/promotion/SeckillManagerController.java
Patch:
@@ -50,14 +50,14 @@ public ResultMessage<Seckill> updateSeckill(SeckillVO seckillVO) {
     @ApiImplicitParam(name = "id", value = "秒杀活动ID", required = true, dataType = "String", paramType = "path")
     @GetMapping(value = "/{id}")
     public ResultMessage<Seckill> get(@PathVariable String id) {
-        Seckill seckill = seckillService.getById(id);
+        Seckill seckill = seckillService.getSeckillByIdFromMongo(id);
         return ResultUtil.data(seckill);
     }
 
     @ApiOperation(value = "分页查询秒杀活动列表")
     @GetMapping
-    public ResultMessage<IPage<Seckill>> getAll(SeckillSearchParams param, PageVO pageVo) {
-        return ResultUtil.data(seckillService.getSeckillByPageFromMysql(param, pageVo));
+    public ResultMessage<IPage<SeckillVO>> getAll(SeckillSearchParams param, PageVO pageVo) {
+        return ResultUtil.data(seckillService.getSeckillByPageFromMongo(param, pageVo));
     }
 
     @ApiOperation(value = "删除一个秒杀活动")

File: manager-api/src/main/java/cn/lili/controller/promotion/PintuanManagerController.java
Patch:
@@ -1,13 +1,13 @@
 package cn.lili.controller.promotion;
 
+import cn.lili.common.enums.PromotionTypeEnum;
 import cn.lili.common.enums.ResultCode;
-import cn.lili.common.exception.ServiceException;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.exception.ServiceException;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.promotion.entity.dos.Pintuan;
 import cn.lili.modules.promotion.entity.dto.PromotionGoodsDTO;
-import cn.lili.common.enums.PromotionTypeEnum;
 import cn.lili.modules.promotion.entity.vos.PintuanSearchParams;
 import cn.lili.modules.promotion.entity.vos.PintuanVO;
 import cn.lili.modules.promotion.entity.vos.PromotionGoodsSearchParams;
@@ -39,7 +39,7 @@ public class PintuanManagerController {
     @GetMapping(value = "/{id}")
     @ApiOperation(value = "通过id获取")
     public ResultMessage<Pintuan> get(@PathVariable String id) {
-        Pintuan pintuan = pintuanService.getById(id);
+        Pintuan pintuan = pintuanService.getPintuanByIdFromMongo(id);
         return ResultUtil.data(pintuan);
     }
 

File: manager-api/src/main/java/cn/lili/controller/promotion/SeckillManagerController.java
Patch:
@@ -50,14 +50,14 @@ public ResultMessage<Seckill> updateSeckill(SeckillVO seckillVO) {
     @ApiImplicitParam(name = "id", value = "秒杀活动ID", required = true, dataType = "String", paramType = "path")
     @GetMapping(value = "/{id}")
     public ResultMessage<Seckill> get(@PathVariable String id) {
-        Seckill seckill = seckillService.getById(id);
+        Seckill seckill = seckillService.getSeckillByIdFromMongo(id);
         return ResultUtil.data(seckill);
     }
 
     @ApiOperation(value = "分页查询秒杀活动列表")
     @GetMapping
-    public ResultMessage<IPage<Seckill>> getAll(SeckillSearchParams param, PageVO pageVo) {
-        return ResultUtil.data(seckillService.getSeckillByPageFromMysql(param, pageVo));
+    public ResultMessage<IPage<SeckillVO>> getAll(SeckillSearchParams param, PageVO pageVo) {
+        return ResultUtil.data(seckillService.getSeckillByPageFromMongo(param, pageVo));
     }
 
     @ApiOperation(value = "删除一个秒杀活动")

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -188,6 +188,7 @@ public boolean modifySeckill(SeckillVO seckillVO) {
         if (PromotionStatusEnum.START.name().equals(seckillVO.getPromotionStatus())) {
             throw new ServiceException(ResultCode.PROMOTION_UPDATE_ERROR);
         }
+        PromotionTools.checkPromotionTime(seckillVO.getStartTime().getTime(), seckillVO.getEndTime().getTime());
         //更新到MYSQL中
         boolean result = this.updateById(seckillVO);
         //保存到MONGO中

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/SeckillServiceImpl.java
Patch:
@@ -188,6 +188,7 @@ public boolean modifySeckill(SeckillVO seckillVO) {
         if (PromotionStatusEnum.START.name().equals(seckillVO.getPromotionStatus())) {
             throw new ServiceException(ResultCode.PROMOTION_UPDATE_ERROR);
         }
+        PromotionTools.checkPromotionTime(seckillVO.getStartTime().getTime(), seckillVO.getEndTime().getTime());
         //更新到MYSQL中
         boolean result = this.updateById(seckillVO);
         //保存到MONGO中

File: buyer-api/src/main/java/cn/lili/controller/goods/CategoryBuyerController.java
Patch:
@@ -21,7 +21,7 @@
  * 买家端,商品分类接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:05 下午
+ * @since 2020/11/16 10:05 下午
  */
 @RestController
 @Api(tags = "买家端,商品分类接口")

File: buyer-api/src/main/java/cn/lili/controller/member/FootprintController.java
Patch:
@@ -19,7 +19,7 @@
  * 买家端,浏览历史接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @RestController
 @Api(tags = "买家端,浏览历史接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberAddressBuyerController.java
Patch:
@@ -20,7 +20,7 @@
  * 买家端,会员地址接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,会员地址接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberCollectionController.java
Patch:
@@ -18,7 +18,7 @@
  * 买家端,会员收藏接口
  *
  * @author Chopper
- * @since: 2020/11/17 2:32 下午
+ * @since 2020/11/17 2:32 下午
  */
 @RestController
 @Api(tags = "买家端,会员收藏接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberEvaluationBuyerController.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.controller.member;
 
+import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.enums.SwitchEnum;
 import cn.lili.common.security.context.UserContext;
-import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberEvaluation;
 import cn.lili.modules.member.entity.dto.EvaluationQueryParams;
@@ -24,7 +24,7 @@
  * 买家端,会员商品评价接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:08 下午
+ * @since 2020/11/16 10:08 下午
  */
 @RestController
 @Api(tags = "买家端,会员商品评价接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberMessageBuyerController.java
Patch:
@@ -4,8 +4,8 @@
 import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
-import cn.lili.modules.message.entity.enums.MessageStatusEnum;
 import cn.lili.modules.message.entity.dos.MemberMessage;
+import cn.lili.modules.message.entity.enums.MessageStatusEnum;
 import cn.lili.modules.message.entity.vos.MemberMessageQueryVO;
 import cn.lili.modules.message.service.MemberMessageService;
 import com.baomidou.mybatisplus.core.metadata.IPage;
@@ -19,7 +19,7 @@
  * 买家端,会员站内消息接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,会员站内消息接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberReceiptController.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.controller.member;
 
 
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.vo.MemberReceiptAddVO;
@@ -19,7 +19,7 @@
  * 买家端,会员发票接口
  *
  * @author paulG
- * @since: 2021-03-29 14:10:16
+ * @since 2021-03-29 14:10:16
  */
 @RestController
 @Api(tags = "买家端,会员发票接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberSignBuyerController.java
Patch:
@@ -18,7 +18,7 @@
  * 会员签到控制器
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端，会员签到API")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberWithdrawApplyBuyerController.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.controller.member;
 
 
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberWithdrawApply;
@@ -22,7 +22,7 @@
  * 买家端,余额提现记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,余额提现记录接口")

File: buyer-api/src/main/java/cn/lili/controller/member/RechargeBuyerController.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.controller.member;
 
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.order.trade.entity.dos.Recharge;
@@ -20,7 +20,7 @@
  * 买家端,预存款充值记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,预存款充值记录接口")

File: buyer-api/src/main/java/cn/lili/controller/member/ServiceNoticeBuyerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.member;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.ServiceNotice;
 import cn.lili.modules.system.service.ServiceNoticeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -21,7 +21,7 @@
  * 买家端,会员站服务消息接口
  *
  * @author Chopper
- * @since: 2020/11/17 2:31 下午
+ * @since 2020/11/17 2:31 下午
  */
 @RestController
 @RequestMapping("/service/notice")

File: buyer-api/src/main/java/cn/lili/controller/other/AppVersionBuyerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.other;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.AppVersion;
 import cn.lili.modules.system.service.AppVersionService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -21,7 +21,7 @@
  * 买家端,APP版本
  *
  * @author Bulbasaur
- * @since: 2021/5/21 11:15 上午
+ * @since 2021/5/21 11:15 上午
  */
 @RestController
 @Api(tags = "买家端,APP版本")

File: buyer-api/src/main/java/cn/lili/controller/other/ArticleBuyerController.java
Patch:
@@ -25,7 +25,7 @@
  * 买家端,文章接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:02 下午
+ * @since 2020/11/16 10:02 下午
  */
 @RestController
 @Api(tags = "买家端,文章接口")

File: buyer-api/src/main/java/cn/lili/controller/other/broadcast/StudioController.java
Patch:
@@ -19,7 +19,7 @@
  * 买家端,直播间接口
  *
  * @author Bulbasaur
- * @since: 2021/5/20 12:03 下午
+ * @since 2021/5/20 12:03 下午
  */
 @RestController
 @Api(tags = "买家端,直播间接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionBuyerController.java
Patch:
@@ -1,7 +1,6 @@
 package cn.lili.controller.other.distribution;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.distribution.entity.dos.Distribution;
 import cn.lili.modules.distribution.entity.dos.DistributionOrder;
@@ -12,7 +11,6 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
-import io.swagger.annotations.ApiImplicitParams;
 import io.swagger.annotations.ApiOperation;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
@@ -22,7 +20,7 @@
  * 买家端,分销员接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:03 下午
+ * @since 2020/11/16 10:03 下午
  */
 @RestController
 @Api(tags = "买家端,分销员接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionCashBuyerController.java
Patch:
@@ -28,7 +28,7 @@
  * 买家端,分销商品佣金提现接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:03 下午
+ * @since 2020/11/16 10:03 下午
  */
 @RestController
 @Api(tags = "买家端,分销商品佣金提现接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionGoodsBuyerController.java
Patch:
@@ -25,7 +25,7 @@
  * 买家端,分销商品接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @RestController
 @Api(tags = "买家端,分销商品接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionOrderBuyerController.java
Patch:
@@ -19,7 +19,7 @@
  * 买家端,分销商品佣金提现接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:03 下午
+ * @since 2020/11/16 10:03 下午
  */
 @RestController
 @Api(tags = "买家端,分销订单接口")

File: buyer-api/src/main/java/cn/lili/controller/purchase/PurchaseBuyerController.java
Patch:
@@ -20,7 +20,7 @@
  * 买家端,采购接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @Api(tags = "买家端,采购接口")
 @RestController

File: buyer-api/src/main/java/cn/lili/controller/purchase/PurchaseQuotedController.java
Patch:
@@ -18,7 +18,7 @@
  * 买家端,采购报价接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @Api(tags = "买家端,采购报价接口")
 @RestController

File: buyer-api/src/main/java/cn/lili/controller/store/StoreBuyerController.java
Patch:
@@ -27,7 +27,7 @@
  * 买家端,店铺接口
  *
  * @author Bulbasaur
- * @since: 2020/11/17 2:32 下午
+ * @since 2020/11/17 2:32 下午
  */
 @RestController
 @RequestMapping("/buyer/store")

File: buyer-api/src/main/java/cn/lili/controller/trade/RechargeTradeBuyerController.java
Patch:
@@ -21,7 +21,7 @@
  * 买家端,预存款充值记录接口
  *
  * @author paulG
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,预存款充值记录接口")

File: buyer-api/src/main/java/cn/lili/controller/trade/WalletLogBuyerController.java
Patch:
@@ -1,13 +1,13 @@
 package cn.lili.controller.trade;
 
+import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.security.AuthUser;
 import cn.lili.common.security.context.UserContext;
-import cn.lili.mybatis.util.PageUtil;
-import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.order.trade.entity.dos.WalletLog;
 import cn.lili.modules.order.trade.service.WalletLogService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -21,7 +21,7 @@
  * 买家端,预存款变动日志记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,预存款变动日志记录接口")

File: consumer/src/main/java/cn/lili/event/impl/MemberExperienceExecute.java
Patch:
@@ -24,7 +24,7 @@
  * 会员经验值
  *
  * @author Bulbasaur
- * @since: 2021/5/16 11:16 下午
+ * @since 2021/5/16 11:16 下午
  */
 //@Service
 public class MemberExperienceExecute implements MemberRegisterEvent, GoodsCommentCompleteEvent, OrderStatusChangeEvent {

File: consumer/src/main/java/cn/lili/event/impl/RegisteredCouponActivityExecute.java
Patch:
@@ -16,7 +16,7 @@
  * 注册赠券活动
  *
  * @author Bulbasaur
- * @since: 2021/5/24 10:48 上午
+ * @since 2021/5/24 10:48 上午
  */
 @Component
 public class RegisteredCouponActivityExecute implements MemberRegisterEvent {

File: consumer/src/main/java/cn/lili/event/impl/VerificationOrderExecute.java
Patch:
@@ -1,7 +1,6 @@
 package cn.lili.event.impl;
 
 import cn.hutool.core.util.RandomUtil;
-import cn.lili.common.utils.CommonUtil;
 import cn.lili.event.OrderStatusChangeEvent;
 import cn.lili.modules.order.order.entity.dos.Order;
 import cn.lili.modules.order.order.entity.dos.OrderItem;
@@ -13,15 +12,14 @@
 import cn.lili.modules.order.order.service.OrderService;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
-import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 /**
  * 虚拟商品
  *
  * @author Bulbasaur
- * @since: 2021/5/29 9:17 上午
+ * @since 2021/5/29 9:17 上午
  */
 @Component
 public class VerificationOrderExecute implements OrderStatusChangeEvent {

File: consumer/src/main/java/cn/lili/timetask/handler/impl/broadcast/BroadcastExecute.java
Patch:
@@ -9,7 +9,7 @@
  * 小程序直播状态获取
  *
  * @author Bulbasaur
- * @since: 2021/5/20 2:52 下午
+ * @since 2021/5/20 2:52 下午
  */
 @Component
 public class BroadcastExecute implements EveryHourExecute {

File: consumer/src/main/java/cn/lili/timetask/handler/impl/coupon/CouponExecute.java
Patch:
@@ -12,7 +12,7 @@
  * 优惠券状态监测
  *
  * @author Bulbasaur
- * @since: 2021/5/24 10:08 上午
+ * @since 2021/5/24 10:08 上午
  */
 @Component
 public class CouponExecute implements EveryDayExecute {

File: consumer/src/main/java/cn/lili/trigger/executor/BroadcastTimeTriggerExecutor.java
Patch:
@@ -1,10 +1,10 @@
 package cn.lili.trigger.executor;
 
 import cn.hutool.json.JSONUtil;
-import cn.lili.trigger.message.BroadcastMessage;
-import cn.lili.trigger.model.TimeExecuteConstant;
 import cn.lili.modules.goods.service.StudioService;
 import cn.lili.trigger.TimeTriggerExecutor;
+import cn.lili.trigger.message.BroadcastMessage;
+import cn.lili.trigger.model.TimeExecuteConstant;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
@@ -13,7 +13,7 @@
  * 直播间事件触发
  *
  * @author Bulbasaur
- * @since: 2021/6/1 5:02 下午
+ * @since 2021/6/1 5:02 下午
  */
 @Slf4j
 @Component(TimeExecuteConstant.BROADCAST_EXECUTOR)

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -47,6 +47,7 @@ public enum ResultCode {
     CATEGORY_HAS_CHILDREN(10005, "此类别下存在子类别不能删除"),
     CATEGORY_HAS_GOODS(10006, "此类别下存在商品不能删除"),
     CATEGORY_SAVE_ERROR(10007, "此类别下存在商品不能删除"),
+    CATEGORY_PARAMETER_NOT_EXIST(10012, "分类绑定参数组不存在"),
     CATEGORY_PARAMETER_SAVE_ERROR(10008, "分类绑定参数组添加失败"),
     CATEGORY_PARAMETER_UPDATE_ERROR(10009, "分类绑定参数组添加失败"),
     CATEGORY_DELETE_FLAG_ERROR(10010, "子类状态不能与父类不一致！"),
@@ -72,6 +73,7 @@ public enum ResultCode {
     GOODS_PARAMS_ERROR(11013, "商品参数错误，刷新后重试"),
     PHYSICAL_GOODS_NEED_TEMP(11014, "实物商品需选择配送模板"),
     VIRTUAL_GOODS_NOT_NEED_TEMP(11015, "实物商品需选择配送模板"),
+    GOODS_NOT_EXIST_STORE(11017, "当前用户无权操作此商品"),
     GOODS_TYPE_ERROR(11016, "需选择商品类型"),
 
     /**
@@ -358,6 +360,7 @@ public enum ResultCode {
     STORE_NOT_OPEN(50004, "该会员未开通店铺"),
     STORE_NOT_LOGIN_ERROR(50005, "未登录店铺"),
     STORE_CLOSE_ERROR(50006, "店铺关闭，请联系管理员"),
+    FREIGHT_TEMPLATE_NOT_EXIST(50010, "当前模版不存在"),
 
     /**
      * 结算单

File: framework/src/main/java/cn/lili/common/security/AuthUser.java
Patch:
@@ -13,6 +13,8 @@
 @AllArgsConstructor
 public class AuthUser implements Serializable {
 
+    private static final long serialVersionUID = 582441893336003319L;
+
     /**
      * 用户名
      */

File: framework/src/main/java/cn/lili/common/utils/CurrencyUtil.java
Patch:
@@ -6,7 +6,7 @@
  * 金额计算工具
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:40 上午
+ * @since 2021/7/9 1:40 上午
  */
 public final class CurrencyUtil {
     /**

File: framework/src/main/java/cn/lili/common/utils/HttpClientUtils.java
Patch:
@@ -35,7 +35,7 @@
  * HttpClientUtils
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:40 上午
+ * @since 2021/7/9 1:40 上午
  */
 @Slf4j
 public class HttpClientUtils {

File: framework/src/main/java/cn/lili/common/validation/impl/MobileValidator.java
Patch:
@@ -12,7 +12,7 @@
  * 支持手机号+电话同时校验
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:41 上午
+ * @since 2021/7/9 1:41 上午
  */
 public class MobileValidator implements ConstraintValidator<Mobile, String> {
 
@@ -23,7 +23,6 @@ public class MobileValidator implements ConstraintValidator<Mobile, String> {
     @Override
     public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {
         Matcher m = null;
-        Pattern pattern = null;
         // 验证手机号
         if (value.length() == 11) {
             m = PHONE.matcher(value);

File: framework/src/main/java/cn/lili/common/validation/impl/PhoneValidator.java
Patch:
@@ -11,11 +11,11 @@
  * 手机号校验
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:42 上午
+ * @since 2021/7/9 1:42 上午
  */
 public class PhoneValidator implements ConstraintValidator<Phone, String> {
 
-    private static Pattern pattern = Pattern.compile("^0?(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])[0-9]{8}$");
+    private static final Pattern pattern = Pattern.compile("^0?(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])[0-9]{8}$");
 
     @Override
     public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {

File: framework/src/main/java/cn/lili/modules/distribution/entity/dto/DistributionApplyDTO.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 分销员申请DTO
  * @author Bulbasaur
- * @since: 2021/6/30 11:07 上午
+ * @since 2021/6/30 11:07 上午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/distribution/service/DistributionGoodsService.java
Patch:
@@ -54,8 +54,9 @@ public interface DistributionGoodsService extends IService<DistributionGoods> {
      *
      * @param skuId      SKU ID
      * @param commission 佣金
+     * @param storeId 店铺id
      * @return
      */
-    DistributionGoods checked(String skuId, Double commission);
+    DistributionGoods checked(String skuId, Double commission, String storeId);
 
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/CategoryParameterGroup.java
Patch:
@@ -5,6 +5,7 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 import org.hibernate.validator.constraints.Length;
 
 import javax.validation.constraints.NotEmpty;
@@ -16,6 +17,7 @@
  * @author pikachu
  * @since 2020-02-26 10:34:02
  */
+@EqualsAndHashCode(callSuper = true)
 @Data
 @TableName("li_category_parameter_group")
 @ApiModel(value = "分类绑定参数组")

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Commodity.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * 小程序直播商品
  * @author Bulbasaur
- * @since: 2021/5/17 9:34 上午
+ * @since 2021/5/17 9:34 上午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/GoodsUnit.java
Patch:
@@ -12,7 +12,7 @@
  * 商品计量单位
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:08
+ * @since 2020/11/26 16:08
  */
 @Data
 @TableName("li_goods_unit")

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Parameters.java
Patch:
@@ -5,6 +5,7 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 import org.hibernate.validator.constraints.Length;
 
 import javax.validation.constraints.Max;
@@ -18,6 +19,7 @@
  * @author pikachu
  * @since 2020-02-23 9:14:33
  */
+@EqualsAndHashCode(callSuper = true)
 @Data
 @TableName("li_parameters")
 @ApiModel(value = "商品参数")

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Studio.java
Patch:
@@ -11,7 +11,7 @@
  * 小程序直播间
  *
  * @author Bulbasaur
- * @since: 2021/5/17 9:47 上午
+ * @since 2021/5/17 9:47 上午
  */
 @Data
 @ApiModel(value = "直播间")

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/StudioCommodity.java
Patch:
@@ -12,7 +12,7 @@
  * 直播商品
  *
  * @author Bulbasaur
- * @since: 2021/5/18 5:42 下午
+ * @since 2021/5/18 5:42 下午
  */
 @Data
 @ApiModel(value = "直播商品")

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/CommodityDTO.java
Patch:
@@ -7,7 +7,7 @@
  * 用于获取直播商品状态时使用
  *
  * @author Bulbasaur
- * @since: 2021/5/25 12:12 下午
+ * @since 2021/5/25 12:12 下午
  */
 @Data
 public class CommodityDTO {

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsInfo.java
Patch:
@@ -10,7 +10,7 @@
  * 微信小程序直播商品DTO
  *
  * @author Bulbasaur
- * @since: 2021/5/17 11:03 上午
+ * @since 2021/5/17 11:03 上午
  */
 @Data
 @NoArgsConstructor

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/SimpleCommodity.java
Patch:
@@ -6,7 +6,7 @@
  * 用于直播间前台使用的直播间商品DTO
  *
  * @author Bulbasaur
- * @since: 2021/5/20 2:34 下午
+ * @since 2021/5/20 2:34 下午
  */
 public class SimpleCommodity {
 

File: framework/src/main/java/cn/lili/modules/goods/entity/enums/GoodsTypeEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 商品类型
  *
  * @author Bulbasaur
- * @since: 2021/5/28 4:23 下午
+ * @since 2021/5/28 4:23 下午
  */
 public enum GoodsTypeEnum {
 

File: framework/src/main/java/cn/lili/modules/goods/entity/enums/StudioStatusEnum.java
Patch:
@@ -5,7 +5,7 @@
  * 直播间状态
  *
  * @author Bulbasaur
- * @since: 2021/5/31 10:32 上午
+ * @since 2021/5/31 10:32 上午
  */
 public enum StudioStatusEnum {
 

File: framework/src/main/java/cn/lili/modules/goods/entity/vos/CommodityVO.java
Patch:
@@ -8,7 +8,7 @@
  * 直播商品VO
  *
  * @author Bulbasaur
- * @since: 2021/5/26 6:09 下午
+ * @since 2021/5/26 6:09 下午
  */
 @Data
 public class CommodityVO extends Commodity {

File: framework/src/main/java/cn/lili/modules/goods/entity/vos/StudioVO.java
Patch:
@@ -11,7 +11,7 @@
  * 直播间VO
  *
  * @author Bulbasaur
- * @since: 2021/5/31 11:58 上午
+ * @since 2021/5/31 11:58 上午
  */
 @Data
 public class StudioVO extends Studio {

File: framework/src/main/java/cn/lili/modules/goods/mapper/CommodityMapper.java
Patch:
@@ -15,7 +15,7 @@
  * 直播商品数据层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 9:56 上午
+ * @since 2021/5/17 9:56 上午
  */
 public interface CommodityMapper extends BaseMapper<Commodity> {
 

File: framework/src/main/java/cn/lili/modules/goods/mapper/StudioCommodityMapper.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 直播间-商品关联持久层
  * @author Bulbasaur
- * @since: 2021/5/17 3:14 下午
+ * @since 2021/5/17 3:14 下午
  *
  */
 public interface StudioCommodityMapper extends BaseMapper<StudioCommodity> {

File: framework/src/main/java/cn/lili/modules/goods/mapper/StudioMapper.java
Patch:
@@ -7,7 +7,7 @@
  * 直播间数据层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 9:56 上午
+ * @since 2021/5/17 9:56 上午
  */
 public interface StudioMapper extends BaseMapper<Studio> {
 

File: framework/src/main/java/cn/lili/modules/goods/service/CommodityService.java
Patch:
@@ -12,7 +12,7 @@
  * 直播商品业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 10:39 上午
+ * @since 2021/5/17 10:39 上午
  */
 public interface CommodityService extends IService<Commodity> {
 

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsUnitService.java
Patch:
@@ -8,7 +8,7 @@
  * 商品计量单位业务层
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:12
+ * @since 2020/11/26 16:12
  */
 public interface GoodsUnitService extends IService<GoodsUnit> {
 

File: framework/src/main/java/cn/lili/modules/goods/service/StudioCommodityService.java
Patch:
@@ -7,7 +7,7 @@
  * 直播间-商品关联业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 3:19 下午
+ * @since 2021/5/17 3:19 下午
  */
 public interface StudioCommodityService extends IService<StudioCommodity> {
 }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StudioCommodityServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * 直播间-商品关联业务层实现
  *
  * @author Bulbasaur
- * @since: 2021/5/17 3:20 下午
+ * @since 2021/5/17 3:20 下午
  */
 @Service
 public class StudioCommodityServiceImpl extends ServiceImpl<StudioCommodityMapper, StudioCommodity> implements StudioCommodityService {

File: framework/src/main/java/cn/lili/modules/goods/util/WechatLivePlayerUtil.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.modules.goods.util;
 
 import cn.hutool.json.JSONObject;
-import cn.lili.common.exception.ServiceException;
 import cn.lili.common.enums.ClientTypeEnum;
+import cn.lili.common.exception.ServiceException;
 import cn.lili.modules.goods.entity.dos.Commodity;
 import cn.lili.modules.goods.entity.dos.Studio;
 import cn.lili.modules.goods.entity.dto.GoodsInfo;
@@ -20,7 +20,7 @@
  * 微信小程序直播工具类
  *
  * @author Bulbasaur
- * @since: 2021/5/17 10:16 上午
+ * @since 2021/5/17 10:16 上午
  */
 @Slf4j
 @Component

File: framework/src/main/java/cn/lili/modules/goods/util/WechatMediaUtil.java
Patch:
@@ -1,9 +1,9 @@
 package cn.lili.modules.goods.util;
 
 import cn.hutool.json.JSONObject;
+import cn.lili.common.enums.ClientTypeEnum;
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.exception.ServiceException;
-import cn.lili.common.enums.ClientTypeEnum;
 import cn.lili.modules.message.util.WechatAccessTokenUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -17,7 +17,7 @@
  * 微信媒体工具
  *
  * @author Bulbasaur
- * @since: 2021/5/19 8:02 下午
+ * @since 2021/5/19 8:02 下午
  */
 @Slf4j
 @Component

File: framework/src/main/java/cn/lili/modules/member/mapper/MemberGradeMapper.java
Patch:
@@ -7,7 +7,7 @@
  * 会员等级数据层
  *
  * @author Bulbasaur
- * @since: 2021/5/14 5:57 下午
+ * @since 2021/5/14 5:57 下午
  */
 public interface MemberGradeMapper extends BaseMapper<MemberGrade> {
 

File: framework/src/main/java/cn/lili/modules/member/service/MemberGradeService.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 会员等级业务层
  * @author Bulbasaur
- * @since: 2021/5/14 5:57 下午
+ * @since 2021/5/14 5:57 下午
  *
  */
 public interface MemberGradeService extends IService<MemberGrade> {

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberGradeServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * 会员等级业务层实现
  *
  * @author Bulbasaur
- * @since: 2021/5/14 5:58 下午
+ * @since 2021/5/14 5:58 下午
  */
 @Service
 public class MemberGradeServiceImpl extends ServiceImpl<MemberGradeMapper, MemberGrade> implements MemberGradeService {

File: framework/src/main/java/cn/lili/modules/order/order/aop/OrderOperationLogAspect.java
Patch:
@@ -21,7 +21,7 @@
  * 订单操作日志
  *
  * @author Chopper
- * @since: 2020/11/17 7:22 下午
+ * @since 2020/11/17 7:22 下午
  */
 @Slf4j
 @Aspect

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/AfterSaleReason.java
Patch:
@@ -12,7 +12,7 @@
  * 售后原因
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:39 上午
+ * @since 2021/7/9 1:39 上午
  */
 @Data
 @TableName("li_after_sale_reason")

File: framework/src/main/java/cn/lili/modules/order/order/entity/dto/OrderBatchDeliverDTO.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 订单批量发货DTO
  * @author Bulbasaur
- * @since: 2021/5/26 4:21 下午
+ * @since 2021/5/26 4:21 下午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/order/order/entity/dto/OrderExportDTO.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * 订单导出DTO
  * @author Bulbasaur
- * @since: 2021/6/3 6:36 下午
+ * @since 2021/6/3 6:36 下午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -80,6 +80,7 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
+import java.util.Objects;
 
 /**
  * 子订单业务层实现
@@ -396,9 +397,10 @@ public Order take(String orderSn, String verificationCode) {
 
     @Override
     public Order getOrderByVerificationCode(String verificationCode) {
+        String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
         return this.getOne(new LambdaQueryWrapper<Order>()
                 .eq(Order::getOrderStatus, OrderStatusEnum.TAKE.name())
-                .eq(Order::getStoreId, UserContext.getCurrentUser().getStoreId())
+                .eq(Order::getStoreId, storeId)
                 .eq(Order::getVerificationCode, verificationCode));
     }
 

File: framework/src/main/java/cn/lili/modules/page/serviceimpl/PageDataServiceImpl.java
Patch:
@@ -58,7 +58,7 @@ public void addStorePageData(String storeId) {
     public PageData addPageData(PageData pageData) {
         //如果页面为发布，则关闭其他页面，开启此页面
         //演示站点不可以开启楼层
-        if (!systemSettingProperties.getIsDemoSite() && pageData.getPageShow().equals(SwitchEnum.OPEN.name())) {
+        if (!Boolean.TRUE.equals(systemSettingProperties.getIsDemoSite()) && pageData.getPageShow().equals(SwitchEnum.OPEN.name())) {
             LambdaUpdateWrapper<PageData> lambdaUpdateWrapper = Wrappers.lambdaUpdate();
             lambdaUpdateWrapper.eq(PageData::getPageType, pageData.getPageType());
             lambdaUpdateWrapper.eq(PageData::getPageClientType, pageData.getPageClientType());
@@ -123,7 +123,7 @@ public PageData releasePageData(String id) {
     public boolean removePageData(String id) {
         PageData pageData = this.getById(id);
         //专题则直接进行删除
-        if (pageData.getPageType().equals(PageEnum.SPECIAL)) {
+        if (pageData.getPageType().equals(PageEnum.SPECIAL.name())) {
             return this.removeById(id);
         }
         //店铺、平台首页需要判断是否开启，开启则无法删除
@@ -135,7 +135,7 @@ public boolean removePageData(String id) {
         queryWrapper.eq(pageData.getPageType() != null, "page_type", pageData.getPageType());
         queryWrapper.eq(pageData.getPageClientType() != null, "page_client_type", pageData.getPageClientType());
         //如果为店铺页面需要设置店铺ID
-        if (pageData.getPageType().equals(PageEnum.STORE)) {
+        if (pageData.getPageType().equals(PageEnum.STORE.name())) {
             queryWrapper.eq(pageData.getNum() != null, "num", pageData.getNum());
         }
         //判断是否为唯一的页面

File: framework/src/main/java/cn/lili/modules/promotion/entity/dto/CouponActivityDTO.java
Patch:
@@ -11,7 +11,7 @@
  * 优惠券活动DTO
  *
  * @author Bulbasaur
- * @since: 2021/5/21 7:16 下午
+ * @since 2021/5/21 7:16 下午
  */
 @Data
 public class CouponActivityDTO extends CouponActivity {

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponActivitySendTypeEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 优惠券活动发送类型枚举
  *
  * @author Bulbasaur
- * @since: 2021/5/20 5:47 下午
+ * @since 2021/5/20 5:47 下午
  */
 public enum CouponActivitySendTypeEnum {
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponActivityTypeEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 优惠券活动类型枚举
  *
  * @author Bulbasaur
- * @since: 2021/5/20 5:47 下午
+ * @since 2021/5/20 5:47 下午
  */
 public enum CouponActivityTypeEnum {
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponRangeDayEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 优惠券时间范围枚举
  *
  * @author Bulbasaur
- * @since: 2021/5/24 8:31 上午
+ * @since 2021/5/24 8:31 上午
  */
 public enum CouponRangeDayEnum {
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/CouponActivityItemVO.java
Patch:
@@ -8,7 +8,7 @@
  * 优惠券活动的优惠券VO
  *
  * @author Bulbasaur
- * @since: 2021/6/18 11:00 上午
+ * @since 2021/6/18 11:00 上午
  */
 @Data
 public class CouponActivityItemVO extends CouponActivityItem {

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/CouponActivityVO.java
Patch:
@@ -12,7 +12,7 @@
  * 优惠券活动VO
  *
  * @author Bulbasaur
- * @since: 2021/5/21 7:01 下午
+ * @since 2021/5/21 7:01 下午
  */
 @Data
 @NoArgsConstructor

File: framework/src/main/java/cn/lili/modules/promotion/mapper/CouponActivityItemMapper.java
Patch:
@@ -11,7 +11,7 @@
  * 优惠券活动
  *
  * @author Bulbasaur
- * @since: 2021/5/20 6:11 下午
+ * @since 2021/5/20 6:11 下午
  */
 public interface CouponActivityItemMapper extends BaseMapper<CouponActivityItem> {
 

File: framework/src/main/java/cn/lili/modules/promotion/mapper/CouponActivityMapper.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 优惠券活动
  * @author Bulbasaur
- * @since: 2021/5/20 6:11 下午
+ * @since 2021/5/20 6:11 下午
  *
  */
 public interface CouponActivityMapper extends BaseMapper<CouponActivity> {

File: framework/src/main/java/cn/lili/modules/promotion/service/CouponActivityItemService.java
Patch:
@@ -10,7 +10,7 @@
  * 优惠券活动-优惠券业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/20 6:10 下午
+ * @since 2021/5/20 6:10 下午
  */
 public interface CouponActivityItemService extends IService<CouponActivityItem> {
 

File: framework/src/main/java/cn/lili/modules/promotion/service/CouponActivityService.java
Patch:
@@ -13,7 +13,7 @@
  * 优惠券活动业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/20 6:10 下午
+ * @since 2021/5/20 6:10 下午
  */
 public interface CouponActivityService extends IService<CouponActivity> {
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/CouponActivityItemServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
  * 优惠券活动关联优惠券业务层实现
  *
  * @author Bulbasaur
- * @since: 2021/5/21 6:42 下午
+ * @since 2021/5/21 6:42 下午
  */
 @Service
 public class CouponActivityItemServiceImpl extends ServiceImpl<CouponActivityItemMapper, CouponActivityItem> implements CouponActivityItemService {

File: framework/src/main/java/cn/lili/modules/statistics/aop/PageViewPoint.java
Patch:
@@ -8,7 +8,7 @@
  * 埋点统计
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:47 上午
+ * @since 2021/7/9 1:47 上午
  */
 @Target({ElementType.PARAMETER, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/IndexStatisticsServiceImpl.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * 首页统计数据业务层实现
@@ -190,6 +191,7 @@ public IndexStatisticsVO indexStatistics() {
     @Override
     public StoreIndexStatisticsVO storeIndexStatistics() {
 
+        String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
         StoreIndexStatisticsVO storeIndexStatisticsVO = new StoreIndexStatisticsVO();
 
         //商品总数量
@@ -202,7 +204,7 @@ public StoreIndexStatisticsVO storeIndexStatistics() {
         //访问量
         StatisticsQueryParam queryParam = new StatisticsQueryParam();
         queryParam.setSearchType(SearchTypeEnum.TODAY.name());
-        queryParam.setStoreId(UserContext.getCurrentUser().getStoreId());
+        queryParam.setStoreId(storeId);
         PlatformViewVO platformViewVO = platformViewDataService.list(queryParam).get(0);
         storeIndexStatisticsVO.setStoreUV(platformViewVO.getUvNum().intValue());
 

File: framework/src/main/java/cn/lili/modules/store/service/StoreAddressService.java
Patch:
@@ -19,23 +19,23 @@ public interface StoreAddressService extends IService<StoreAddress> {
      * @param pageVo 分页
      * @return 自提点列表
      */
-    IPage<StoreAddress> getStoreAddress(PageVO pageVo);
+    IPage<StoreAddress> getStoreAddress(String storeId, PageVO pageVo);
 
     /**
      * 添加商家自提点
      *
      * @param storeAddress 自提点
      * @return 自提点
      */
-    StoreAddress addStoreAddress(StoreAddress storeAddress);
+    StoreAddress addStoreAddress(String storeId, StoreAddress storeAddress);
 
     /**
      * 修改商家自提点
      *
      * @param storeAddress 自提点
      * @return 自提点
      */
-    StoreAddress editStoreAddress(StoreAddress storeAddress);
+    StoreAddress editStoreAddress(String storeId, StoreAddress storeAddress);
 
     /**
      * 删除商家自提点

File: framework/src/main/java/cn/lili/modules/store/serviceimpl/FreightTemplateServiceImpl.java
Patch:
@@ -7,14 +7,14 @@
 import cn.lili.common.security.AuthUser;
 import cn.lili.common.security.context.UserContext;
 import cn.lili.common.utils.BeanUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.modules.store.entity.dos.FreightTemplate;
 import cn.lili.modules.store.entity.dos.FreightTemplateChild;
 import cn.lili.modules.store.entity.vos.FreightTemplateVO;
 import cn.lili.modules.store.mapper.FreightTemplateMapper;
 import cn.lili.modules.store.service.FreightTemplateChildService;
 import cn.lili.modules.store.service.FreightTemplateService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.core.toolkit.Wrappers;
@@ -58,7 +58,7 @@ public List<FreightTemplateVO> getFreightTemplateList(String storeId) {
         list = new ArrayList<>();
         //查询运费模板
         LambdaQueryWrapper<FreightTemplate> lambdaQueryWrapper = Wrappers.lambdaQuery();
-        lambdaQueryWrapper.eq(FreightTemplate::getStoreId, UserContext.getCurrentUser().getStoreId());
+        lambdaQueryWrapper.eq(FreightTemplate::getStoreId, storeId);
         List<FreightTemplate> freightTemplates = this.baseMapper.selectList(lambdaQueryWrapper);
         if (!freightTemplates.isEmpty()) {
             //如果模板不为空则查询子模板信息

File: framework/src/main/java/cn/lili/modules/system/aspect/annotation/DemoSite.java
Patch:
@@ -6,7 +6,7 @@
  * 演示站点注解
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:40 上午
+ * @since 2021/7/9 1:40 上午
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)

File: framework/src/main/java/cn/lili/modules/system/entity/dto/ExperienceSetting.java
Patch:
@@ -9,7 +9,7 @@
  * 经验值设置
  *
  * @author Bulbasaur
- * @since: 2021/5/16 11:10 下午
+ * @since 2021/5/16 11:10 下午
  */
 @Data
 public class ExperienceSetting implements Serializable {

File: framework/src/main/java/cn/lili/modules/system/entity/dto/SeckillSetting.java
Patch:
@@ -10,7 +10,7 @@
  * 秒杀活动设置
  *
  * @author Bulbasaur
- * @since: 2021/5/24 3:27 下午
+ * @since 2021/5/24 3:27 下午
  */
 @Data
 public class SeckillSetting implements Serializable {

File: framework/src/main/java/cn/lili/modules/verification/service/VerificationService.java
Patch:
@@ -9,7 +9,7 @@
  * 验证码模块
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:42 上午
+ * @since 2021/7/9 1:42 上午
  */
 public interface VerificationService {
     /**

File: framework/src/main/java/cn/lili/trigger/message/BroadcastMessage.java
Patch:
@@ -7,7 +7,7 @@
  * 直播消息实体
  *
  * @author Bulbasaur
- * @since: 2021/6/1 4:48 下午
+ * @since 2021/6/1 4:48 下午
  */
 @Data
 @NoArgsConstructor

File: manager-api/src/main/java/cn/lili/controller/goods/GoodsUnitManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.goods;
 
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.goods.entity.dos.GoodsUnit;
 import cn.lili.modules.goods.service.GoodsUnitService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -22,7 +22,7 @@
  * 管理端,商品计量单位接口
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:15
+ * @since 2020/11/26 16:15
  */
 @RestController
 @Api(tags = "管理端,商品计量单位接口")

File: manager-api/src/main/java/cn/lili/controller/goods/ParameterManagerController.java
Patch:
@@ -18,7 +18,7 @@
  * 管理端,分类绑定参数组管理接口
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:15
+ * @since 2020/11/26 16:15
  */
 @RestController
 @Api(tags = "管理端,分类绑定参数组管理接口")

File: manager-api/src/main/java/cn/lili/controller/member/MemberGradeManagerController.java
Patch:
@@ -3,11 +3,11 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.exception.ServiceException;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberGrade;
 import cn.lili.modules.member.service.MemberGradeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -21,7 +21,7 @@
  * 管理端,会员等级接口
  *
  * @author Bulbasaur
- * @since: 2021/5/16 11:29 下午
+ * @since 2021/5/16 11:29 下午
  */
 @RestController
 @Api(tags = "管理端,会员等级接口")

File: manager-api/src/main/java/cn/lili/controller/member/MemberMessageManagerController.java
Patch:
@@ -20,7 +20,7 @@
  * 管理端,会员消息消息管理接口
  *
  * @author pikachu
- * @since: 2020/12/6 16:09
+ * @since 2020/12/6 16:09
  */
 @RestController
 @Transactional(rollbackFor = Exception.class)

File: manager-api/src/main/java/cn/lili/controller/member/MemberWalletManagerController.java
Patch:
@@ -17,7 +17,7 @@
  * 管理端,预存款接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,预存款接口")

File: manager-api/src/main/java/cn/lili/controller/member/MemberWithdrawApplyManagerController.java
Patch:
@@ -24,7 +24,7 @@
  * 管理端,余额提现记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,余额提现记录接口")

File: manager-api/src/main/java/cn/lili/controller/other/SpecialManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.other;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.page.entity.dos.Special;
 import cn.lili.modules.page.service.SpecialService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -20,7 +20,7 @@
  * 管理端,专题活动接口
  *
  * @author Bulbasaur
- * @since: 2020/12/7 11:33
+ * @since 2020/12/7 11:33
  */
 @RestController
 @Api(tags = "管理端,专题活动接口")

File: manager-api/src/main/java/cn/lili/controller/other/VerificationSourceController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.other;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.common.vo.SearchVO;
 import cn.lili.modules.system.entity.dos.VerificationSource;
 import cn.lili.modules.system.service.VerificationSourceService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -21,7 +21,7 @@
  * 管理端,验证码资源维护接口
  *
  * @author Chopper
- * @since: 2020/12/7 11:33
+ * @since 2020/12/7 11:33
  */
 @RestController
 @Api(tags = "管理端,验证码资源维护接口")

File: manager-api/src/main/java/cn/lili/controller/other/broadcast/CommodityManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,直播间管理接口
  *
  * @author Bulbasaur
- * @since: 2021/5/28 11:56 上午
+ * @since 2021/5/28 11:56 上午
  */
 @RestController
 @Api(tags = "店铺端,直播商品接口")

File: manager-api/src/main/java/cn/lili/controller/other/broadcast/StudioManagerController.java
Patch:
@@ -23,7 +23,7 @@
  * 管理端,直播间接口
  *
  * @author Bulbasaur
- * @since: 2021/5/28 11:56 上午
+ * @since 2021/5/28 11:56 上午
  */
 @RestController
 @Api(tags = "店铺端,直播间接口")

File: manager-api/src/main/java/cn/lili/controller/promotion/CouponActivityManagerController.java
Patch:
@@ -3,14 +3,14 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.exception.ServiceException;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.promotion.entity.dos.CouponActivity;
 import cn.lili.modules.promotion.entity.dto.CouponActivityDTO;
 import cn.lili.modules.promotion.entity.enums.PromotionStatusEnum;
 import cn.lili.modules.promotion.entity.vos.CouponActivityVO;
 import cn.lili.modules.promotion.service.CouponActivityService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -23,7 +23,7 @@
  * 优惠券活动
  *
  * @author Bulbasaur
- * @since: 2021/5/21 7:11 下午
+ * @since 2021/5/21 7:11 下午
  */
 @RestController
 @Api(tags = "管理端,优惠券活动接口")

File: manager-api/src/main/java/cn/lili/controller/purchase/PurchaseManagerController.java
Patch:
@@ -23,7 +23,7 @@
  * 管理端,采购接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @Api(tags = "管理端,采购接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/setting/InstantDeliveryManagerController.java
Patch:
@@ -1,13 +1,13 @@
 package cn.lili.controller.setting;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.InstantDelivery;
 import cn.lili.modules.system.entity.plugin.ConfigItem;
 import cn.lili.modules.system.entity.vo.InstantDeliveryVO;
 import cn.lili.modules.system.service.InstantDeliveryService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -23,7 +23,7 @@
  * 管理端,即时配送接口
  *
  * @author pikachu
- * @since: 2020/11/17 7:56 下午
+ * @since 2020/11/17 7:56 下午
  */
 @RestController
 @Api(tags = "管理端,即时配送接口")

File: manager-api/src/main/java/cn/lili/controller/setting/LogManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,日志管理接口
  *
  * @author Chopper
- * @since: 2020/11/17 7:56 下午
+ * @since 2020/11/17 7:56 下午
  */
 @Slf4j
 @RestController

File: manager-api/src/main/java/cn/lili/controller/setting/LogisticsManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.setting;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.Logistics;
 import cn.lili.modules.system.service.LogisticsService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -20,7 +20,7 @@
  * 管理端,物流公司接口
  *
  * @author Chopper
- * @since: 2020/11/17 7:56 下午
+ * @since 2020/11/17 7:56 下午
  */
 @RestController
 @Api(tags = "管理端,物流公司接口")

File: manager-api/src/main/java/cn/lili/controller/setting/MemberNoticeManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.setting;
 
-import cn.lili.common.security.context.UserContext;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberNotice;
 import cn.lili.modules.member.service.MemberNoticeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
@@ -21,7 +21,7 @@
  * 管理端,会员站内信管理接口
  *
  * @author Chopper
- * @since: 2020/11/17 4:31 下午
+ * @since 2020/11/17 4:31 下午
  */
 @RestController
 @Api(tags = "管理端,会员站内信管理API")

File: manager-api/src/main/java/cn/lili/controller/setting/NoticeMessageManagerController.java
Patch:
@@ -1,10 +1,10 @@
 package cn.lili.controller.setting;
 
 import cn.lili.common.enums.ResultCode;
+import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.enums.SwitchEnum;
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.utils.BeanUtil;
-import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.message.entity.dos.NoticeMessage;
@@ -30,7 +30,7 @@
  * 管理端,会员站内信管理接口
  *
  * @author Chopper
- * @since: 2020/11/17 4:31 下午
+ * @since 2020/11/17 4:31 下午
  */
 @Slf4j
 @RestController

File: manager-api/src/main/java/cn/lili/controller/setting/ServiceNoticeManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.setting;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.common.vo.SearchVO;
 import cn.lili.modules.system.entity.dos.ServiceNotice;
 import cn.lili.modules.system.service.ServiceNoticeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -20,7 +20,7 @@
  * 管理端,服务订阅消息接口
  *
  * @author Chopper
- * @since: 2020/11/17 4:33 下午
+ * @since 2020/11/17 4:33 下午
  */
 @RestController
 @Api(tags = "管理端,服务订阅消息接口")

File: manager-api/src/main/java/cn/lili/controller/setting/SmsManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.setting;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.message.entity.dos.SmsReach;
 import cn.lili.modules.message.service.SmsReachService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -19,7 +19,7 @@
  * 管理端,短信接口
  *
  * @author Bulbasaur
- * @since: 2021/1/30 4:09 下午
+ * @since 2021/1/30 4:09 下午
  */
 @RestController
 @Api(tags = "管理端,短信接口")

File: manager-api/src/main/java/cn/lili/controller/setting/SmsSignManagerController.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.controller.setting;
 
-import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
@@ -19,7 +18,7 @@
  * 管理端,短信签名接口
  *
  * @author Chopper
- * @since: 2021/1/30 4:09 下午
+ * @since 2021/1/30 4:09 下午
  */
 @RestController
 @Api(tags = "管理端,短信签名接口")

File: manager-api/src/main/java/cn/lili/controller/setting/SmsTemplateManagerController.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.controller.setting;
 
-import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
@@ -19,7 +18,7 @@
  * 管理端,短信模板接口
  *
  * @author Bulbasaur
- * @since: 2021/1/30 4:09 下午
+ * @since 2021/1/30 4:09 下午
  */
 @RestController
 @Api(tags = "管理端,短信模板接口")

File: manager-api/src/main/java/cn/lili/controller/statistics/GoodsStatisticsManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,商品统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Api(tags = "管理端,商品统计接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/statistics/IndexStatisticsManagerController.java
Patch:
@@ -24,7 +24,7 @@
  * 管理端,首页统计数据接口
  *
  * @author Bulbasaur
- * @since: 2020/12/15 17:53
+ * @since 2020/12/15 17:53
  */
 @Slf4j
 @Api(tags = "管理端,首页统计数据接口")

File: manager-api/src/main/java/cn/lili/controller/statistics/MemberStatisticsManagerController.java
Patch:
@@ -18,7 +18,7 @@
  * 管理端,会员统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Api(tags = "管理端,会员统计接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/statistics/OrderStatisticsManagerController.java
Patch:
@@ -26,7 +26,7 @@
  * 管理端,订单统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Slf4j
 @Api(tags = "管理端,订单统计接口")

File: manager-api/src/main/java/cn/lili/controller/statistics/RefundOrderStatisticsManagerController.java
Patch:
@@ -18,7 +18,7 @@
  * 管理端,退款统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Api(tags = "管理端,退款统计接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/store/BillManagerController.java
Patch:
@@ -22,7 +22,7 @@
  * 管理端,商家结算单接口
  *
  * @author Chopper
- * @since: 2020/11/17 7:23 下午
+ * @since 2020/11/17 7:23 下午
  */
 @RestController
 @Api(tags = "管理端,商家结算单接口")

File: manager-api/src/main/java/cn/lili/controller/store/StoreManagerController.java
Patch:
@@ -3,7 +3,6 @@
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
-import cn.lili.modules.system.aspect.annotation.DemoSite;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.store.entity.dos.Store;
 import cn.lili.modules.store.entity.dto.AdminStoreApplyDTO;
@@ -30,7 +29,7 @@
  * 管理端,店铺管理接口
  *
  * @author Bulbasaur
- * @since: 2020/12/6 16:09
+ * @since 2020/12/6 16:09
  */
 @Api(tags = "管理端,店铺管理接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/store/StoreMessageManagerController.java
Patch:
@@ -20,7 +20,7 @@
  * 管理端,店铺消息消息管理接口
  *
  * @author pikachu
- * @since: 2020/12/6 16:09
+ * @since 2020/12/6 16:09
  */
 @RestController
 @Transactional(rollbackFor = Exception.class)

File: manager-api/src/main/java/cn/lili/controller/trade/AfterSaleManagerController.java
Patch:
@@ -23,7 +23,7 @@
  * 管理端,售后接口
  *
  * @author Bulbasaur
- * @since: 2021/1/6 14:11
+ * @since 2021/1/6 14:11
  */
 @RestController
 @RequestMapping("/manager/afterSale")

File: manager-api/src/main/java/cn/lili/controller/trade/AfterSaleReasonManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.trade;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.order.order.entity.dos.AfterSaleReason;
 import cn.lili.modules.order.order.service.AfterSaleReasonService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -20,7 +20,7 @@
  * 管理端,售后原因接口
  *
  * @author Bulbasaur
- * @since: 2021/1/6 14:11
+ * @since 2021/1/6 14:11
  */
 @RestController
 @RequestMapping("/manager/afterSaleReason")

File: manager-api/src/main/java/cn/lili/controller/trade/OrderComplaintManagerController.java
Patch:
@@ -26,7 +26,7 @@
  * 管理端,交易投诉接口
  *
  * @author paulG
- * @since: 2020/12/5
+ * @since 2020/12/5
  */
 @RestController
 @Api(tags = "管理端,交易投诉接口")

File: manager-api/src/main/java/cn/lili/controller/trade/RefundLogManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.trade;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.common.vo.SearchVO;
 import cn.lili.modules.payment.entity.RefundLog;
 import cn.lili.modules.payment.service.RefundLogService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -21,7 +21,7 @@
  * 管理端,退款日志接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,退款日志接口")

File: manager-api/src/main/java/cn/lili/controller/trade/WalletLogManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,预存款充值记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,预存款充值记录接口")

File: seller-api/src/main/java/cn/lili/controller/other/broadcast/CommodityStoreController.java
Patch:
@@ -22,7 +22,7 @@
  * 店铺端,直播商品接口
  *
  * @author Bulbasaur
- * @since: 2021/5/17 2:05 下午
+ * @since 2021/5/17 2:05 下午
  */
 @RestController
 @Api(tags = "店铺端,直播商品接口")

File: buyer-api/src/main/java/cn/lili/controller/goods/CategoryBuyerController.java
Patch:
@@ -21,7 +21,7 @@
  * 买家端,商品分类接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:05 下午
+ * @since 2020/11/16 10:05 下午
  */
 @RestController
 @Api(tags = "买家端,商品分类接口")

File: buyer-api/src/main/java/cn/lili/controller/member/FootprintController.java
Patch:
@@ -19,7 +19,7 @@
  * 买家端,浏览历史接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @RestController
 @Api(tags = "买家端,浏览历史接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberAddressBuyerController.java
Patch:
@@ -20,7 +20,7 @@
  * 买家端,会员地址接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,会员地址接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberCollectionController.java
Patch:
@@ -18,7 +18,7 @@
  * 买家端,会员收藏接口
  *
  * @author Chopper
- * @since: 2020/11/17 2:32 下午
+ * @since 2020/11/17 2:32 下午
  */
 @RestController
 @Api(tags = "买家端,会员收藏接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberEvaluationBuyerController.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.controller.member;
 
+import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.enums.SwitchEnum;
 import cn.lili.common.security.context.UserContext;
-import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberEvaluation;
 import cn.lili.modules.member.entity.dto.EvaluationQueryParams;
@@ -24,7 +24,7 @@
  * 买家端,会员商品评价接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:08 下午
+ * @since 2020/11/16 10:08 下午
  */
 @RestController
 @Api(tags = "买家端,会员商品评价接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberMessageBuyerController.java
Patch:
@@ -4,8 +4,8 @@
 import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
-import cn.lili.modules.message.entity.enums.MessageStatusEnum;
 import cn.lili.modules.message.entity.dos.MemberMessage;
+import cn.lili.modules.message.entity.enums.MessageStatusEnum;
 import cn.lili.modules.message.entity.vos.MemberMessageQueryVO;
 import cn.lili.modules.message.service.MemberMessageService;
 import com.baomidou.mybatisplus.core.metadata.IPage;
@@ -19,7 +19,7 @@
  * 买家端,会员站内消息接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,会员站内消息接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberReceiptController.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.controller.member;
 
 
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.vo.MemberReceiptAddVO;
@@ -19,7 +19,7 @@
  * 买家端,会员发票接口
  *
  * @author paulG
- * @since: 2021-03-29 14:10:16
+ * @since 2021-03-29 14:10:16
  */
 @RestController
 @Api(tags = "买家端,会员发票接口")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberSignBuyerController.java
Patch:
@@ -18,7 +18,7 @@
  * 会员签到控制器
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端，会员签到API")

File: buyer-api/src/main/java/cn/lili/controller/member/MemberWithdrawApplyBuyerController.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.controller.member;
 
 
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberWithdrawApply;
@@ -22,7 +22,7 @@
  * 买家端,余额提现记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,余额提现记录接口")

File: buyer-api/src/main/java/cn/lili/controller/member/RechargeBuyerController.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.controller.member;
 
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.order.trade.entity.dos.Recharge;
@@ -20,7 +20,7 @@
  * 买家端,预存款充值记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,预存款充值记录接口")

File: buyer-api/src/main/java/cn/lili/controller/member/ServiceNoticeBuyerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.member;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.ServiceNotice;
 import cn.lili.modules.system.service.ServiceNoticeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -21,7 +21,7 @@
  * 买家端,会员站服务消息接口
  *
  * @author Chopper
- * @since: 2020/11/17 2:31 下午
+ * @since 2020/11/17 2:31 下午
  */
 @RestController
 @RequestMapping("/service/notice")

File: buyer-api/src/main/java/cn/lili/controller/other/AppVersionBuyerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.other;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.AppVersion;
 import cn.lili.modules.system.service.AppVersionService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -21,7 +21,7 @@
  * 买家端,APP版本
  *
  * @author Bulbasaur
- * @since: 2021/5/21 11:15 上午
+ * @since 2021/5/21 11:15 上午
  */
 @RestController
 @Api(tags = "买家端,APP版本")

File: buyer-api/src/main/java/cn/lili/controller/other/ArticleBuyerController.java
Patch:
@@ -25,7 +25,7 @@
  * 买家端,文章接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:02 下午
+ * @since 2020/11/16 10:02 下午
  */
 @RestController
 @Api(tags = "买家端,文章接口")

File: buyer-api/src/main/java/cn/lili/controller/other/broadcast/StudioController.java
Patch:
@@ -19,7 +19,7 @@
  * 买家端,直播间接口
  *
  * @author Bulbasaur
- * @since: 2021/5/20 12:03 下午
+ * @since 2021/5/20 12:03 下午
  */
 @RestController
 @Api(tags = "买家端,直播间接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionBuyerController.java
Patch:
@@ -1,7 +1,6 @@
 package cn.lili.controller.other.distribution;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.distribution.entity.dos.Distribution;
 import cn.lili.modules.distribution.entity.dos.DistributionOrder;
@@ -12,7 +11,6 @@
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
-import io.swagger.annotations.ApiImplicitParams;
 import io.swagger.annotations.ApiOperation;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.*;
@@ -22,7 +20,7 @@
  * 买家端,分销员接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:03 下午
+ * @since 2020/11/16 10:03 下午
  */
 @RestController
 @Api(tags = "买家端,分销员接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionCashBuyerController.java
Patch:
@@ -28,7 +28,7 @@
  * 买家端,分销商品佣金提现接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:03 下午
+ * @since 2020/11/16 10:03 下午
  */
 @RestController
 @Api(tags = "买家端,分销商品佣金提现接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionGoodsBuyerController.java
Patch:
@@ -25,7 +25,7 @@
  * 买家端,分销商品接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @RestController
 @Api(tags = "买家端,分销商品接口")

File: buyer-api/src/main/java/cn/lili/controller/other/distribution/DistributionOrderBuyerController.java
Patch:
@@ -19,7 +19,7 @@
  * 买家端,分销商品佣金提现接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:03 下午
+ * @since 2020/11/16 10:03 下午
  */
 @RestController
 @Api(tags = "买家端,分销订单接口")

File: buyer-api/src/main/java/cn/lili/controller/purchase/PurchaseBuyerController.java
Patch:
@@ -20,7 +20,7 @@
  * 买家端,采购接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @Api(tags = "买家端,采购接口")
 @RestController

File: buyer-api/src/main/java/cn/lili/controller/purchase/PurchaseQuotedController.java
Patch:
@@ -18,7 +18,7 @@
  * 买家端,采购报价接口
  *
  * @author Bulbasaur
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @Api(tags = "买家端,采购报价接口")
 @RestController

File: buyer-api/src/main/java/cn/lili/controller/store/StoreBuyerController.java
Patch:
@@ -27,7 +27,7 @@
  * 买家端,店铺接口
  *
  * @author Bulbasaur
- * @since: 2020/11/17 2:32 下午
+ * @since 2020/11/17 2:32 下午
  */
 @RestController
 @RequestMapping("/buyer/store")

File: buyer-api/src/main/java/cn/lili/controller/trade/RechargeTradeBuyerController.java
Patch:
@@ -21,7 +21,7 @@
  * 买家端,预存款充值记录接口
  *
  * @author paulG
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,预存款充值记录接口")

File: buyer-api/src/main/java/cn/lili/controller/trade/WalletLogBuyerController.java
Patch:
@@ -1,13 +1,13 @@
 package cn.lili.controller.trade;
 
+import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.security.AuthUser;
 import cn.lili.common.security.context.UserContext;
-import cn.lili.mybatis.util.PageUtil;
-import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.order.trade.entity.dos.WalletLog;
 import cn.lili.modules.order.trade.service.WalletLogService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -21,7 +21,7 @@
  * 买家端,预存款变动日志记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "买家端,预存款变动日志记录接口")

File: consumer/src/main/java/cn/lili/event/impl/MemberExperienceExecute.java
Patch:
@@ -24,7 +24,7 @@
  * 会员经验值
  *
  * @author Bulbasaur
- * @since: 2021/5/16 11:16 下午
+ * @since 2021/5/16 11:16 下午
  */
 //@Service
 public class MemberExperienceExecute implements MemberRegisterEvent, GoodsCommentCompleteEvent, OrderStatusChangeEvent {

File: consumer/src/main/java/cn/lili/event/impl/RegisteredCouponActivityExecute.java
Patch:
@@ -16,7 +16,7 @@
  * 注册赠券活动
  *
  * @author Bulbasaur
- * @since: 2021/5/24 10:48 上午
+ * @since 2021/5/24 10:48 上午
  */
 @Component
 public class RegisteredCouponActivityExecute implements MemberRegisterEvent {

File: consumer/src/main/java/cn/lili/event/impl/VerificationOrderExecute.java
Patch:
@@ -1,7 +1,6 @@
 package cn.lili.event.impl;
 
 import cn.hutool.core.util.RandomUtil;
-import cn.lili.common.utils.CommonUtil;
 import cn.lili.event.OrderStatusChangeEvent;
 import cn.lili.modules.order.order.entity.dos.Order;
 import cn.lili.modules.order.order.entity.dos.OrderItem;
@@ -13,15 +12,14 @@
 import cn.lili.modules.order.order.service.OrderService;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
-import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 /**
  * 虚拟商品
  *
  * @author Bulbasaur
- * @since: 2021/5/29 9:17 上午
+ * @since 2021/5/29 9:17 上午
  */
 @Component
 public class VerificationOrderExecute implements OrderStatusChangeEvent {

File: consumer/src/main/java/cn/lili/timetask/handler/impl/broadcast/BroadcastExecute.java
Patch:
@@ -9,7 +9,7 @@
  * 小程序直播状态获取
  *
  * @author Bulbasaur
- * @since: 2021/5/20 2:52 下午
+ * @since 2021/5/20 2:52 下午
  */
 @Component
 public class BroadcastExecute implements EveryHourExecute {

File: consumer/src/main/java/cn/lili/timetask/handler/impl/coupon/CouponExecute.java
Patch:
@@ -12,7 +12,7 @@
  * 优惠券状态监测
  *
  * @author Bulbasaur
- * @since: 2021/5/24 10:08 上午
+ * @since 2021/5/24 10:08 上午
  */
 @Component
 public class CouponExecute implements EveryDayExecute {

File: consumer/src/main/java/cn/lili/trigger/executor/BroadcastTimeTriggerExecutor.java
Patch:
@@ -1,10 +1,10 @@
 package cn.lili.trigger.executor;
 
 import cn.hutool.json.JSONUtil;
-import cn.lili.trigger.message.BroadcastMessage;
-import cn.lili.trigger.model.TimeExecuteConstant;
 import cn.lili.modules.goods.service.StudioService;
 import cn.lili.trigger.TimeTriggerExecutor;
+import cn.lili.trigger.message.BroadcastMessage;
+import cn.lili.trigger.model.TimeExecuteConstant;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
@@ -13,7 +13,7 @@
  * 直播间事件触发
  *
  * @author Bulbasaur
- * @since: 2021/6/1 5:02 下午
+ * @since 2021/6/1 5:02 下午
  */
 @Slf4j
 @Component(TimeExecuteConstant.BROADCAST_EXECUTOR)

File: framework/src/main/java/cn/lili/common/enums/ResultCode.java
Patch:
@@ -360,6 +360,7 @@ public enum ResultCode {
     STORE_NOT_OPEN(50004, "该会员未开通店铺"),
     STORE_NOT_LOGIN_ERROR(50005, "未登录店铺"),
     STORE_CLOSE_ERROR(50006, "店铺关闭，请联系管理员"),
+    FREIGHT_TEMPLATE_NOT_EXIST(50010, "当前模版不存在"),
 
     /**
      * 结算单

File: framework/src/main/java/cn/lili/common/utils/CurrencyUtil.java
Patch:
@@ -6,7 +6,7 @@
  * 金额计算工具
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:40 上午
+ * @since 2021/7/9 1:40 上午
  */
 public final class CurrencyUtil {
     /**

File: framework/src/main/java/cn/lili/common/utils/HttpClientUtils.java
Patch:
@@ -35,7 +35,7 @@
  * HttpClientUtils
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:40 上午
+ * @since 2021/7/9 1:40 上午
  */
 @Slf4j
 public class HttpClientUtils {

File: framework/src/main/java/cn/lili/common/validation/impl/MobileValidator.java
Patch:
@@ -12,7 +12,7 @@
  * 支持手机号+电话同时校验
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:41 上午
+ * @since 2021/7/9 1:41 上午
  */
 public class MobileValidator implements ConstraintValidator<Mobile, String> {
 
@@ -23,7 +23,6 @@ public class MobileValidator implements ConstraintValidator<Mobile, String> {
     @Override
     public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {
         Matcher m = null;
-        Pattern pattern = null;
         // 验证手机号
         if (value.length() == 11) {
             m = PHONE.matcher(value);

File: framework/src/main/java/cn/lili/common/validation/impl/PhoneValidator.java
Patch:
@@ -11,11 +11,11 @@
  * 手机号校验
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:42 上午
+ * @since 2021/7/9 1:42 上午
  */
 public class PhoneValidator implements ConstraintValidator<Phone, String> {
 
-    private static Pattern pattern = Pattern.compile("^0?(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])[0-9]{8}$");
+    private static final Pattern pattern = Pattern.compile("^0?(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9])[0-9]{8}$");
 
     @Override
     public boolean isValid(String value, ConstraintValidatorContext constraintValidatorContext) {

File: framework/src/main/java/cn/lili/modules/distribution/entity/dto/DistributionApplyDTO.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 分销员申请DTO
  * @author Bulbasaur
- * @since: 2021/6/30 11:07 上午
+ * @since 2021/6/30 11:07 上午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/distribution/service/DistributionGoodsService.java
Patch:
@@ -54,8 +54,9 @@ public interface DistributionGoodsService extends IService<DistributionGoods> {
      *
      * @param skuId      SKU ID
      * @param commission 佣金
+     * @param storeId 店铺id
      * @return
      */
-    DistributionGoods checked(String skuId, Double commission);
+    DistributionGoods checked(String skuId, Double commission, String storeId);
 
 }
\ No newline at end of file

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Commodity.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * 小程序直播商品
  * @author Bulbasaur
- * @since: 2021/5/17 9:34 上午
+ * @since 2021/5/17 9:34 上午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/GoodsUnit.java
Patch:
@@ -12,7 +12,7 @@
  * 商品计量单位
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:08
+ * @since 2020/11/26 16:08
  */
 @Data
 @TableName("li_goods_unit")

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/Studio.java
Patch:
@@ -11,7 +11,7 @@
  * 小程序直播间
  *
  * @author Bulbasaur
- * @since: 2021/5/17 9:47 上午
+ * @since 2021/5/17 9:47 上午
  */
 @Data
 @ApiModel(value = "直播间")

File: framework/src/main/java/cn/lili/modules/goods/entity/dos/StudioCommodity.java
Patch:
@@ -12,7 +12,7 @@
  * 直播商品
  *
  * @author Bulbasaur
- * @since: 2021/5/18 5:42 下午
+ * @since 2021/5/18 5:42 下午
  */
 @Data
 @ApiModel(value = "直播商品")

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/CommodityDTO.java
Patch:
@@ -7,7 +7,7 @@
  * 用于获取直播商品状态时使用
  *
  * @author Bulbasaur
- * @since: 2021/5/25 12:12 下午
+ * @since 2021/5/25 12:12 下午
  */
 @Data
 public class CommodityDTO {

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/GoodsInfo.java
Patch:
@@ -10,7 +10,7 @@
  * 微信小程序直播商品DTO
  *
  * @author Bulbasaur
- * @since: 2021/5/17 11:03 上午
+ * @since 2021/5/17 11:03 上午
  */
 @Data
 @NoArgsConstructor

File: framework/src/main/java/cn/lili/modules/goods/entity/dto/SimpleCommodity.java
Patch:
@@ -6,7 +6,7 @@
  * 用于直播间前台使用的直播间商品DTO
  *
  * @author Bulbasaur
- * @since: 2021/5/20 2:34 下午
+ * @since 2021/5/20 2:34 下午
  */
 public class SimpleCommodity {
 

File: framework/src/main/java/cn/lili/modules/goods/entity/enums/GoodsTypeEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 商品类型
  *
  * @author Bulbasaur
- * @since: 2021/5/28 4:23 下午
+ * @since 2021/5/28 4:23 下午
  */
 public enum GoodsTypeEnum {
 

File: framework/src/main/java/cn/lili/modules/goods/entity/enums/StudioStatusEnum.java
Patch:
@@ -5,7 +5,7 @@
  * 直播间状态
  *
  * @author Bulbasaur
- * @since: 2021/5/31 10:32 上午
+ * @since 2021/5/31 10:32 上午
  */
 public enum StudioStatusEnum {
 

File: framework/src/main/java/cn/lili/modules/goods/entity/vos/CommodityVO.java
Patch:
@@ -8,7 +8,7 @@
  * 直播商品VO
  *
  * @author Bulbasaur
- * @since: 2021/5/26 6:09 下午
+ * @since 2021/5/26 6:09 下午
  */
 @Data
 public class CommodityVO extends Commodity {

File: framework/src/main/java/cn/lili/modules/goods/entity/vos/StudioVO.java
Patch:
@@ -11,7 +11,7 @@
  * 直播间VO
  *
  * @author Bulbasaur
- * @since: 2021/5/31 11:58 上午
+ * @since 2021/5/31 11:58 上午
  */
 @Data
 public class StudioVO extends Studio {

File: framework/src/main/java/cn/lili/modules/goods/mapper/CommodityMapper.java
Patch:
@@ -15,7 +15,7 @@
  * 直播商品数据层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 9:56 上午
+ * @since 2021/5/17 9:56 上午
  */
 public interface CommodityMapper extends BaseMapper<Commodity> {
 

File: framework/src/main/java/cn/lili/modules/goods/mapper/StudioCommodityMapper.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 直播间-商品关联持久层
  * @author Bulbasaur
- * @since: 2021/5/17 3:14 下午
+ * @since 2021/5/17 3:14 下午
  *
  */
 public interface StudioCommodityMapper extends BaseMapper<StudioCommodity> {

File: framework/src/main/java/cn/lili/modules/goods/mapper/StudioMapper.java
Patch:
@@ -7,7 +7,7 @@
  * 直播间数据层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 9:56 上午
+ * @since 2021/5/17 9:56 上午
  */
 public interface StudioMapper extends BaseMapper<Studio> {
 

File: framework/src/main/java/cn/lili/modules/goods/service/CommodityService.java
Patch:
@@ -12,7 +12,7 @@
  * 直播商品业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 10:39 上午
+ * @since 2021/5/17 10:39 上午
  */
 public interface CommodityService extends IService<Commodity> {
 

File: framework/src/main/java/cn/lili/modules/goods/service/GoodsUnitService.java
Patch:
@@ -8,7 +8,7 @@
  * 商品计量单位业务层
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:12
+ * @since 2020/11/26 16:12
  */
 public interface GoodsUnitService extends IService<GoodsUnit> {
 

File: framework/src/main/java/cn/lili/modules/goods/service/StudioCommodityService.java
Patch:
@@ -7,7 +7,7 @@
  * 直播间-商品关联业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/17 3:19 下午
+ * @since 2021/5/17 3:19 下午
  */
 public interface StudioCommodityService extends IService<StudioCommodity> {
 }

File: framework/src/main/java/cn/lili/modules/goods/serviceimpl/StudioCommodityServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * 直播间-商品关联业务层实现
  *
  * @author Bulbasaur
- * @since: 2021/5/17 3:20 下午
+ * @since 2021/5/17 3:20 下午
  */
 @Service
 public class StudioCommodityServiceImpl extends ServiceImpl<StudioCommodityMapper, StudioCommodity> implements StudioCommodityService {

File: framework/src/main/java/cn/lili/modules/goods/util/WechatLivePlayerUtil.java
Patch:
@@ -1,8 +1,8 @@
 package cn.lili.modules.goods.util;
 
 import cn.hutool.json.JSONObject;
-import cn.lili.common.exception.ServiceException;
 import cn.lili.common.enums.ClientTypeEnum;
+import cn.lili.common.exception.ServiceException;
 import cn.lili.modules.goods.entity.dos.Commodity;
 import cn.lili.modules.goods.entity.dos.Studio;
 import cn.lili.modules.goods.entity.dto.GoodsInfo;
@@ -20,7 +20,7 @@
  * 微信小程序直播工具类
  *
  * @author Bulbasaur
- * @since: 2021/5/17 10:16 上午
+ * @since 2021/5/17 10:16 上午
  */
 @Slf4j
 @Component

File: framework/src/main/java/cn/lili/modules/goods/util/WechatMediaUtil.java
Patch:
@@ -1,9 +1,9 @@
 package cn.lili.modules.goods.util;
 
 import cn.hutool.json.JSONObject;
+import cn.lili.common.enums.ClientTypeEnum;
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.exception.ServiceException;
-import cn.lili.common.enums.ClientTypeEnum;
 import cn.lili.modules.message.util.WechatAccessTokenUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -17,7 +17,7 @@
  * 微信媒体工具
  *
  * @author Bulbasaur
- * @since: 2021/5/19 8:02 下午
+ * @since 2021/5/19 8:02 下午
  */
 @Slf4j
 @Component

File: framework/src/main/java/cn/lili/modules/member/mapper/MemberGradeMapper.java
Patch:
@@ -7,7 +7,7 @@
  * 会员等级数据层
  *
  * @author Bulbasaur
- * @since: 2021/5/14 5:57 下午
+ * @since 2021/5/14 5:57 下午
  */
 public interface MemberGradeMapper extends BaseMapper<MemberGrade> {
 

File: framework/src/main/java/cn/lili/modules/member/service/MemberGradeService.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 会员等级业务层
  * @author Bulbasaur
- * @since: 2021/5/14 5:57 下午
+ * @since 2021/5/14 5:57 下午
  *
  */
 public interface MemberGradeService extends IService<MemberGrade> {

File: framework/src/main/java/cn/lili/modules/member/serviceimpl/MemberGradeServiceImpl.java
Patch:
@@ -10,7 +10,7 @@
  * 会员等级业务层实现
  *
  * @author Bulbasaur
- * @since: 2021/5/14 5:58 下午
+ * @since 2021/5/14 5:58 下午
  */
 @Service
 public class MemberGradeServiceImpl extends ServiceImpl<MemberGradeMapper, MemberGrade> implements MemberGradeService {

File: framework/src/main/java/cn/lili/modules/order/order/aop/OrderOperationLogAspect.java
Patch:
@@ -21,7 +21,7 @@
  * 订单操作日志
  *
  * @author Chopper
- * @since: 2020/11/17 7:22 下午
+ * @since 2020/11/17 7:22 下午
  */
 @Slf4j
 @Aspect

File: framework/src/main/java/cn/lili/modules/order/order/entity/dos/AfterSaleReason.java
Patch:
@@ -12,7 +12,7 @@
  * 售后原因
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:39 上午
+ * @since 2021/7/9 1:39 上午
  */
 @Data
 @TableName("li_after_sale_reason")

File: framework/src/main/java/cn/lili/modules/order/order/entity/dto/OrderBatchDeliverDTO.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 订单批量发货DTO
  * @author Bulbasaur
- * @since: 2021/5/26 4:21 下午
+ * @since 2021/5/26 4:21 下午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/order/order/entity/dto/OrderExportDTO.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * 订单导出DTO
  * @author Bulbasaur
- * @since: 2021/6/3 6:36 下午
+ * @since 2021/6/3 6:36 下午
  *
  */
 @Data

File: framework/src/main/java/cn/lili/modules/order/order/serviceimpl/OrderServiceImpl.java
Patch:
@@ -80,6 +80,7 @@
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
+import java.util.Objects;
 
 /**
  * 子订单业务层实现
@@ -396,9 +397,10 @@ public Order take(String orderSn, String verificationCode) {
 
     @Override
     public Order getOrderByVerificationCode(String verificationCode) {
+        String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
         return this.getOne(new LambdaQueryWrapper<Order>()
                 .eq(Order::getOrderStatus, OrderStatusEnum.TAKE.name())
-                .eq(Order::getStoreId, UserContext.getCurrentUser().getStoreId())
+                .eq(Order::getStoreId, storeId)
                 .eq(Order::getVerificationCode, verificationCode));
     }
 

File: framework/src/main/java/cn/lili/modules/page/serviceimpl/PageDataServiceImpl.java
Patch:
@@ -58,7 +58,7 @@ public void addStorePageData(String storeId) {
     public PageData addPageData(PageData pageData) {
         //如果页面为发布，则关闭其他页面，开启此页面
         //演示站点不可以开启楼层
-        if (!systemSettingProperties.getIsDemoSite() && pageData.getPageShow().equals(SwitchEnum.OPEN.name())) {
+        if (!Boolean.TRUE.equals(systemSettingProperties.getIsDemoSite()) && pageData.getPageShow().equals(SwitchEnum.OPEN.name())) {
             LambdaUpdateWrapper<PageData> lambdaUpdateWrapper = Wrappers.lambdaUpdate();
             lambdaUpdateWrapper.eq(PageData::getPageType, pageData.getPageType());
             lambdaUpdateWrapper.eq(PageData::getPageClientType, pageData.getPageClientType());
@@ -123,7 +123,7 @@ public PageData releasePageData(String id) {
     public boolean removePageData(String id) {
         PageData pageData = this.getById(id);
         //专题则直接进行删除
-        if (pageData.getPageType().equals(PageEnum.SPECIAL)) {
+        if (pageData.getPageType().equals(PageEnum.SPECIAL.name())) {
             return this.removeById(id);
         }
         //店铺、平台首页需要判断是否开启，开启则无法删除
@@ -135,7 +135,7 @@ public boolean removePageData(String id) {
         queryWrapper.eq(pageData.getPageType() != null, "page_type", pageData.getPageType());
         queryWrapper.eq(pageData.getPageClientType() != null, "page_client_type", pageData.getPageClientType());
         //如果为店铺页面需要设置店铺ID
-        if (pageData.getPageType().equals(PageEnum.STORE)) {
+        if (pageData.getPageType().equals(PageEnum.STORE.name())) {
             queryWrapper.eq(pageData.getNum() != null, "num", pageData.getNum());
         }
         //判断是否为唯一的页面

File: framework/src/main/java/cn/lili/modules/promotion/entity/dto/CouponActivityDTO.java
Patch:
@@ -11,7 +11,7 @@
  * 优惠券活动DTO
  *
  * @author Bulbasaur
- * @since: 2021/5/21 7:16 下午
+ * @since 2021/5/21 7:16 下午
  */
 @Data
 public class CouponActivityDTO extends CouponActivity {

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponActivitySendTypeEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 优惠券活动发送类型枚举
  *
  * @author Bulbasaur
- * @since: 2021/5/20 5:47 下午
+ * @since 2021/5/20 5:47 下午
  */
 public enum CouponActivitySendTypeEnum {
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponActivityTypeEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 优惠券活动类型枚举
  *
  * @author Bulbasaur
- * @since: 2021/5/20 5:47 下午
+ * @since 2021/5/20 5:47 下午
  */
 public enum CouponActivityTypeEnum {
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/enums/CouponRangeDayEnum.java
Patch:
@@ -4,7 +4,7 @@
  * 优惠券时间范围枚举
  *
  * @author Bulbasaur
- * @since: 2021/5/24 8:31 上午
+ * @since 2021/5/24 8:31 上午
  */
 public enum CouponRangeDayEnum {
 

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/CouponActivityItemVO.java
Patch:
@@ -8,7 +8,7 @@
  * 优惠券活动的优惠券VO
  *
  * @author Bulbasaur
- * @since: 2021/6/18 11:00 上午
+ * @since 2021/6/18 11:00 上午
  */
 @Data
 public class CouponActivityItemVO extends CouponActivityItem {

File: framework/src/main/java/cn/lili/modules/promotion/entity/vos/CouponActivityVO.java
Patch:
@@ -12,7 +12,7 @@
  * 优惠券活动VO
  *
  * @author Bulbasaur
- * @since: 2021/5/21 7:01 下午
+ * @since 2021/5/21 7:01 下午
  */
 @Data
 @NoArgsConstructor

File: framework/src/main/java/cn/lili/modules/promotion/mapper/CouponActivityItemMapper.java
Patch:
@@ -11,7 +11,7 @@
  * 优惠券活动
  *
  * @author Bulbasaur
- * @since: 2021/5/20 6:11 下午
+ * @since 2021/5/20 6:11 下午
  */
 public interface CouponActivityItemMapper extends BaseMapper<CouponActivityItem> {
 

File: framework/src/main/java/cn/lili/modules/promotion/mapper/CouponActivityMapper.java
Patch:
@@ -6,7 +6,7 @@
 /**
  * 优惠券活动
  * @author Bulbasaur
- * @since: 2021/5/20 6:11 下午
+ * @since 2021/5/20 6:11 下午
  *
  */
 public interface CouponActivityMapper extends BaseMapper<CouponActivity> {

File: framework/src/main/java/cn/lili/modules/promotion/service/CouponActivityItemService.java
Patch:
@@ -10,7 +10,7 @@
  * 优惠券活动-优惠券业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/20 6:10 下午
+ * @since 2021/5/20 6:10 下午
  */
 public interface CouponActivityItemService extends IService<CouponActivityItem> {
 

File: framework/src/main/java/cn/lili/modules/promotion/service/CouponActivityService.java
Patch:
@@ -13,7 +13,7 @@
  * 优惠券活动业务层
  *
  * @author Bulbasaur
- * @since: 2021/5/20 6:10 下午
+ * @since 2021/5/20 6:10 下午
  */
 public interface CouponActivityService extends IService<CouponActivity> {
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/CouponActivityItemServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
  * 优惠券活动关联优惠券业务层实现
  *
  * @author Bulbasaur
- * @since: 2021/5/21 6:42 下午
+ * @since 2021/5/21 6:42 下午
  */
 @Service
 public class CouponActivityItemServiceImpl extends ServiceImpl<CouponActivityItemMapper, CouponActivityItem> implements CouponActivityItemService {

File: framework/src/main/java/cn/lili/modules/statistics/aop/PageViewPoint.java
Patch:
@@ -8,7 +8,7 @@
  * 埋点统计
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:47 上午
+ * @since 2021/7/9 1:47 上午
  */
 @Target({ElementType.PARAMETER, ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)

File: framework/src/main/java/cn/lili/modules/statistics/serviceimpl/IndexStatisticsServiceImpl.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * 首页统计数据业务层实现
@@ -190,6 +191,7 @@ public IndexStatisticsVO indexStatistics() {
     @Override
     public StoreIndexStatisticsVO storeIndexStatistics() {
 
+        String storeId = Objects.requireNonNull(UserContext.getCurrentUser()).getStoreId();
         StoreIndexStatisticsVO storeIndexStatisticsVO = new StoreIndexStatisticsVO();
 
         //商品总数量
@@ -202,7 +204,7 @@ public StoreIndexStatisticsVO storeIndexStatistics() {
         //访问量
         StatisticsQueryParam queryParam = new StatisticsQueryParam();
         queryParam.setSearchType(SearchTypeEnum.TODAY.name());
-        queryParam.setStoreId(UserContext.getCurrentUser().getStoreId());
+        queryParam.setStoreId(storeId);
         PlatformViewVO platformViewVO = platformViewDataService.list(queryParam).get(0);
         storeIndexStatisticsVO.setStoreUV(platformViewVO.getUvNum().intValue());
 

File: framework/src/main/java/cn/lili/modules/store/service/StoreAddressService.java
Patch:
@@ -19,23 +19,23 @@ public interface StoreAddressService extends IService<StoreAddress> {
      * @param pageVo 分页
      * @return 自提点列表
      */
-    IPage<StoreAddress> getStoreAddress(PageVO pageVo);
+    IPage<StoreAddress> getStoreAddress(String storeId, PageVO pageVo);
 
     /**
      * 添加商家自提点
      *
      * @param storeAddress 自提点
      * @return 自提点
      */
-    StoreAddress addStoreAddress(StoreAddress storeAddress);
+    StoreAddress addStoreAddress(String storeId, StoreAddress storeAddress);
 
     /**
      * 修改商家自提点
      *
      * @param storeAddress 自提点
      * @return 自提点
      */
-    StoreAddress editStoreAddress(StoreAddress storeAddress);
+    StoreAddress editStoreAddress(String storeId, StoreAddress storeAddress);
 
     /**
      * 删除商家自提点

File: framework/src/main/java/cn/lili/modules/store/serviceimpl/FreightTemplateServiceImpl.java
Patch:
@@ -7,14 +7,14 @@
 import cn.lili.common.security.AuthUser;
 import cn.lili.common.security.context.UserContext;
 import cn.lili.common.utils.BeanUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.modules.store.entity.dos.FreightTemplate;
 import cn.lili.modules.store.entity.dos.FreightTemplateChild;
 import cn.lili.modules.store.entity.vos.FreightTemplateVO;
 import cn.lili.modules.store.mapper.FreightTemplateMapper;
 import cn.lili.modules.store.service.FreightTemplateChildService;
 import cn.lili.modules.store.service.FreightTemplateService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.core.toolkit.Wrappers;
@@ -58,7 +58,7 @@ public List<FreightTemplateVO> getFreightTemplateList(String storeId) {
         list = new ArrayList<>();
         //查询运费模板
         LambdaQueryWrapper<FreightTemplate> lambdaQueryWrapper = Wrappers.lambdaQuery();
-        lambdaQueryWrapper.eq(FreightTemplate::getStoreId, UserContext.getCurrentUser().getStoreId());
+        lambdaQueryWrapper.eq(FreightTemplate::getStoreId, storeId);
         List<FreightTemplate> freightTemplates = this.baseMapper.selectList(lambdaQueryWrapper);
         if (!freightTemplates.isEmpty()) {
             //如果模板不为空则查询子模板信息

File: framework/src/main/java/cn/lili/modules/system/aspect/annotation/DemoSite.java
Patch:
@@ -6,7 +6,7 @@
  * 演示站点注解
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:40 上午
+ * @since 2021/7/9 1:40 上午
  */
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)

File: framework/src/main/java/cn/lili/modules/system/entity/dto/ExperienceSetting.java
Patch:
@@ -9,7 +9,7 @@
  * 经验值设置
  *
  * @author Bulbasaur
- * @since: 2021/5/16 11:10 下午
+ * @since 2021/5/16 11:10 下午
  */
 @Data
 public class ExperienceSetting implements Serializable {

File: framework/src/main/java/cn/lili/modules/system/entity/dto/SeckillSetting.java
Patch:
@@ -10,7 +10,7 @@
  * 秒杀活动设置
  *
  * @author Bulbasaur
- * @since: 2021/5/24 3:27 下午
+ * @since 2021/5/24 3:27 下午
  */
 @Data
 public class SeckillSetting implements Serializable {

File: framework/src/main/java/cn/lili/modules/verification/service/VerificationService.java
Patch:
@@ -9,7 +9,7 @@
  * 验证码模块
  *
  * @author Bulbasaur
- * @since: 2021/7/9 1:42 上午
+ * @since 2021/7/9 1:42 上午
  */
 public interface VerificationService {
     /**

File: framework/src/main/java/cn/lili/trigger/message/BroadcastMessage.java
Patch:
@@ -7,7 +7,7 @@
  * 直播消息实体
  *
  * @author Bulbasaur
- * @since: 2021/6/1 4:48 下午
+ * @since 2021/6/1 4:48 下午
  */
 @Data
 @NoArgsConstructor

File: manager-api/src/main/java/cn/lili/controller/goods/GoodsUnitManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.goods;
 
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.goods.entity.dos.GoodsUnit;
 import cn.lili.modules.goods.service.GoodsUnitService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -22,7 +22,7 @@
  * 管理端,商品计量单位接口
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:15
+ * @since 2020/11/26 16:15
  */
 @RestController
 @Api(tags = "管理端,商品计量单位接口")

File: manager-api/src/main/java/cn/lili/controller/goods/ParameterManagerController.java
Patch:
@@ -18,7 +18,7 @@
  * 管理端,分类绑定参数组管理接口
  *
  * @author Bulbasaur
- * @since: 2020/11/26 16:15
+ * @since 2020/11/26 16:15
  */
 @RestController
 @Api(tags = "管理端,分类绑定参数组管理接口")

File: manager-api/src/main/java/cn/lili/controller/member/MemberGradeManagerController.java
Patch:
@@ -3,11 +3,11 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.exception.ServiceException;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberGrade;
 import cn.lili.modules.member.service.MemberGradeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -21,7 +21,7 @@
  * 管理端,会员等级接口
  *
  * @author Bulbasaur
- * @since: 2021/5/16 11:29 下午
+ * @since 2021/5/16 11:29 下午
  */
 @RestController
 @Api(tags = "管理端,会员等级接口")

File: manager-api/src/main/java/cn/lili/controller/member/MemberMessageManagerController.java
Patch:
@@ -20,7 +20,7 @@
  * 管理端,会员消息消息管理接口
  *
  * @author pikachu
- * @since: 2020/12/6 16:09
+ * @since 2020/12/6 16:09
  */
 @RestController
 @Transactional(rollbackFor = Exception.class)

File: manager-api/src/main/java/cn/lili/controller/member/MemberWalletManagerController.java
Patch:
@@ -17,7 +17,7 @@
  * 管理端,预存款接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,预存款接口")

File: manager-api/src/main/java/cn/lili/controller/member/MemberWithdrawApplyManagerController.java
Patch:
@@ -24,7 +24,7 @@
  * 管理端,余额提现记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,余额提现记录接口")

File: manager-api/src/main/java/cn/lili/controller/other/SpecialManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.other;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.page.entity.dos.Special;
 import cn.lili.modules.page.service.SpecialService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -20,7 +20,7 @@
  * 管理端,专题活动接口
  *
  * @author Bulbasaur
- * @since: 2020/12/7 11:33
+ * @since 2020/12/7 11:33
  */
 @RestController
 @Api(tags = "管理端,专题活动接口")

File: manager-api/src/main/java/cn/lili/controller/other/VerificationSourceController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.other;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.common.vo.SearchVO;
 import cn.lili.modules.system.entity.dos.VerificationSource;
 import cn.lili.modules.system.service.VerificationSourceService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -21,7 +21,7 @@
  * 管理端,验证码资源维护接口
  *
  * @author Chopper
- * @since: 2020/12/7 11:33
+ * @since 2020/12/7 11:33
  */
 @RestController
 @Api(tags = "管理端,验证码资源维护接口")

File: manager-api/src/main/java/cn/lili/controller/other/broadcast/CommodityManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,直播间管理接口
  *
  * @author Bulbasaur
- * @since: 2021/5/28 11:56 上午
+ * @since 2021/5/28 11:56 上午
  */
 @RestController
 @Api(tags = "店铺端,直播商品接口")

File: manager-api/src/main/java/cn/lili/controller/other/broadcast/StudioManagerController.java
Patch:
@@ -23,7 +23,7 @@
  * 管理端,直播间接口
  *
  * @author Bulbasaur
- * @since: 2021/5/28 11:56 上午
+ * @since 2021/5/28 11:56 上午
  */
 @RestController
 @Api(tags = "店铺端,直播间接口")

File: manager-api/src/main/java/cn/lili/controller/promotion/CouponActivityManagerController.java
Patch:
@@ -3,14 +3,14 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.exception.ServiceException;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.promotion.entity.dos.CouponActivity;
 import cn.lili.modules.promotion.entity.dto.CouponActivityDTO;
 import cn.lili.modules.promotion.entity.enums.PromotionStatusEnum;
 import cn.lili.modules.promotion.entity.vos.CouponActivityVO;
 import cn.lili.modules.promotion.service.CouponActivityService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -23,7 +23,7 @@
  * 优惠券活动
  *
  * @author Bulbasaur
- * @since: 2021/5/21 7:11 下午
+ * @since 2021/5/21 7:11 下午
  */
 @RestController
 @Api(tags = "管理端,优惠券活动接口")

File: manager-api/src/main/java/cn/lili/controller/purchase/PurchaseManagerController.java
Patch:
@@ -23,7 +23,7 @@
  * 管理端,采购接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:06 下午
+ * @since 2020/11/16 10:06 下午
  */
 @Api(tags = "管理端,采购接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/setting/InstantDeliveryManagerController.java
Patch:
@@ -1,13 +1,13 @@
 package cn.lili.controller.setting;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.InstantDelivery;
 import cn.lili.modules.system.entity.plugin.ConfigItem;
 import cn.lili.modules.system.entity.vo.InstantDeliveryVO;
 import cn.lili.modules.system.service.InstantDeliveryService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -23,7 +23,7 @@
  * 管理端,即时配送接口
  *
  * @author pikachu
- * @since: 2020/11/17 7:56 下午
+ * @since 2020/11/17 7:56 下午
  */
 @RestController
 @Api(tags = "管理端,即时配送接口")

File: manager-api/src/main/java/cn/lili/controller/setting/LogManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,日志管理接口
  *
  * @author Chopper
- * @since: 2020/11/17 7:56 下午
+ * @since 2020/11/17 7:56 下午
  */
 @Slf4j
 @RestController

File: manager-api/src/main/java/cn/lili/controller/setting/LogisticsManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.setting;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.system.entity.dos.Logistics;
 import cn.lili.modules.system.service.LogisticsService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -20,7 +20,7 @@
  * 管理端,物流公司接口
  *
  * @author Chopper
- * @since: 2020/11/17 7:56 下午
+ * @since 2020/11/17 7:56 下午
  */
 @RestController
 @Api(tags = "管理端,物流公司接口")

File: manager-api/src/main/java/cn/lili/controller/setting/MemberNoticeManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.setting;
 
-import cn.lili.common.security.context.UserContext;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
+import cn.lili.common.security.context.UserContext;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.member.entity.dos.MemberNotice;
 import cn.lili.modules.member.service.MemberNoticeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
@@ -21,7 +21,7 @@
  * 管理端,会员站内信管理接口
  *
  * @author Chopper
- * @since: 2020/11/17 4:31 下午
+ * @since 2020/11/17 4:31 下午
  */
 @RestController
 @Api(tags = "管理端,会员站内信管理API")

File: manager-api/src/main/java/cn/lili/controller/setting/NoticeMessageManagerController.java
Patch:
@@ -1,10 +1,10 @@
 package cn.lili.controller.setting;
 
 import cn.lili.common.enums.ResultCode;
+import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.enums.SwitchEnum;
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.utils.BeanUtil;
-import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.message.entity.dos.NoticeMessage;
@@ -30,7 +30,7 @@
  * 管理端,会员站内信管理接口
  *
  * @author Chopper
- * @since: 2020/11/17 4:31 下午
+ * @since 2020/11/17 4:31 下午
  */
 @Slf4j
 @RestController

File: manager-api/src/main/java/cn/lili/controller/setting/ServiceNoticeManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.setting;
 
 import cn.lili.common.enums.ResultUtil;
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.common.vo.SearchVO;
 import cn.lili.modules.system.entity.dos.ServiceNotice;
 import cn.lili.modules.system.service.ServiceNoticeService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -20,7 +20,7 @@
  * 管理端,服务订阅消息接口
  *
  * @author Chopper
- * @since: 2020/11/17 4:33 下午
+ * @since 2020/11/17 4:33 下午
  */
 @RestController
 @Api(tags = "管理端,服务订阅消息接口")

File: manager-api/src/main/java/cn/lili/controller/setting/SmsManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.setting;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.message.entity.dos.SmsReach;
 import cn.lili.modules.message.service.SmsReachService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
@@ -19,7 +19,7 @@
  * 管理端,短信接口
  *
  * @author Bulbasaur
- * @since: 2021/1/30 4:09 下午
+ * @since 2021/1/30 4:09 下午
  */
 @RestController
 @Api(tags = "管理端,短信接口")

File: manager-api/src/main/java/cn/lili/controller/setting/SmsSignManagerController.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.controller.setting;
 
-import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
@@ -19,7 +18,7 @@
  * 管理端,短信签名接口
  *
  * @author Chopper
- * @since: 2021/1/30 4:09 下午
+ * @since 2021/1/30 4:09 下午
  */
 @RestController
 @Api(tags = "管理端,短信签名接口")

File: manager-api/src/main/java/cn/lili/controller/setting/SmsTemplateManagerController.java
Patch:
@@ -1,6 +1,5 @@
 package cn.lili.controller.setting;
 
-import cn.lili.common.enums.ResultCode;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
@@ -19,7 +18,7 @@
  * 管理端,短信模板接口
  *
  * @author Bulbasaur
- * @since: 2021/1/30 4:09 下午
+ * @since 2021/1/30 4:09 下午
  */
 @RestController
 @Api(tags = "管理端,短信模板接口")

File: manager-api/src/main/java/cn/lili/controller/statistics/GoodsStatisticsManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,商品统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Api(tags = "管理端,商品统计接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/statistics/IndexStatisticsManagerController.java
Patch:
@@ -24,7 +24,7 @@
  * 管理端,首页统计数据接口
  *
  * @author Bulbasaur
- * @since: 2020/12/15 17:53
+ * @since 2020/12/15 17:53
  */
 @Slf4j
 @Api(tags = "管理端,首页统计数据接口")

File: manager-api/src/main/java/cn/lili/controller/statistics/MemberStatisticsManagerController.java
Patch:
@@ -18,7 +18,7 @@
  * 管理端,会员统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Api(tags = "管理端,会员统计接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/statistics/OrderStatisticsManagerController.java
Patch:
@@ -26,7 +26,7 @@
  * 管理端,订单统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Slf4j
 @Api(tags = "管理端,订单统计接口")

File: manager-api/src/main/java/cn/lili/controller/statistics/RefundOrderStatisticsManagerController.java
Patch:
@@ -18,7 +18,7 @@
  * 管理端,退款统计接口
  *
  * @author Bulbasaur
- * @since: 2020/12/9 19:04
+ * @since 2020/12/9 19:04
  */
 @Api(tags = "管理端,退款统计接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/store/BillManagerController.java
Patch:
@@ -22,7 +22,7 @@
  * 管理端,商家结算单接口
  *
  * @author Chopper
- * @since: 2020/11/17 7:23 下午
+ * @since 2020/11/17 7:23 下午
  */
 @RestController
 @Api(tags = "管理端,商家结算单接口")

File: manager-api/src/main/java/cn/lili/controller/store/StoreManagerController.java
Patch:
@@ -3,7 +3,6 @@
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
-import cn.lili.modules.system.aspect.annotation.DemoSite;
 import cn.lili.modules.goods.entity.vos.CategoryVO;
 import cn.lili.modules.store.entity.dos.Store;
 import cn.lili.modules.store.entity.dto.AdminStoreApplyDTO;
@@ -30,7 +29,7 @@
  * 管理端,店铺管理接口
  *
  * @author Bulbasaur
- * @since: 2020/12/6 16:09
+ * @since 2020/12/6 16:09
  */
 @Api(tags = "管理端,店铺管理接口")
 @RestController

File: manager-api/src/main/java/cn/lili/controller/store/StoreMessageManagerController.java
Patch:
@@ -20,7 +20,7 @@
  * 管理端,店铺消息消息管理接口
  *
  * @author pikachu
- * @since: 2020/12/6 16:09
+ * @since 2020/12/6 16:09
  */
 @RestController
 @Transactional(rollbackFor = Exception.class)

File: manager-api/src/main/java/cn/lili/controller/trade/AfterSaleManagerController.java
Patch:
@@ -23,7 +23,7 @@
  * 管理端,售后接口
  *
  * @author Bulbasaur
- * @since: 2021/1/6 14:11
+ * @since 2021/1/6 14:11
  */
 @RestController
 @RequestMapping("/manager/afterSale")

File: manager-api/src/main/java/cn/lili/controller/trade/AfterSaleReasonManagerController.java
Patch:
@@ -1,11 +1,11 @@
 package cn.lili.controller.trade;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.modules.order.order.entity.dos.AfterSaleReason;
 import cn.lili.modules.order.order.service.AfterSaleReasonService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
@@ -20,7 +20,7 @@
  * 管理端,售后原因接口
  *
  * @author Bulbasaur
- * @since: 2021/1/6 14:11
+ * @since 2021/1/6 14:11
  */
 @RestController
 @RequestMapping("/manager/afterSaleReason")

File: manager-api/src/main/java/cn/lili/controller/trade/OrderComplaintManagerController.java
Patch:
@@ -26,7 +26,7 @@
  * 管理端,交易投诉接口
  *
  * @author paulG
- * @since: 2020/12/5
+ * @since 2020/12/5
  */
 @RestController
 @Api(tags = "管理端,交易投诉接口")

File: manager-api/src/main/java/cn/lili/controller/trade/RefundLogManagerController.java
Patch:
@@ -1,12 +1,12 @@
 package cn.lili.controller.trade;
 
-import cn.lili.mybatis.util.PageUtil;
 import cn.lili.common.enums.ResultUtil;
 import cn.lili.common.vo.PageVO;
 import cn.lili.common.vo.ResultMessage;
 import cn.lili.common.vo.SearchVO;
 import cn.lili.modules.payment.entity.RefundLog;
 import cn.lili.modules.payment.service.RefundLogService;
+import cn.lili.mybatis.util.PageUtil;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
@@ -21,7 +21,7 @@
  * 管理端,退款日志接口
  *
  * @author Chopper
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,退款日志接口")

File: manager-api/src/main/java/cn/lili/controller/trade/WalletLogManagerController.java
Patch:
@@ -19,7 +19,7 @@
  * 管理端,预存款充值记录接口
  *
  * @author pikachu
- * @since: 2020/11/16 10:07 下午
+ * @since 2020/11/16 10:07 下午
  */
 @RestController
 @Api(tags = "管理端,预存款充值记录接口")

File: seller-api/src/main/java/cn/lili/controller/other/broadcast/CommodityStoreController.java
Patch:
@@ -22,7 +22,7 @@
  * 店铺端,直播商品接口
  *
  * @author Bulbasaur
- * @since: 2021/5/17 2:05 下午
+ * @since 2021/5/17 2:05 下午
  */
 @RestController
 @Api(tags = "店铺端,直播商品接口")

File: framework/src/main/java/cn/lili/common/security/SecurityBean.java
Patch:
@@ -7,7 +7,6 @@
 import org.springframework.web.cors.CorsConfigurationSource;
 import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
 
-import java.util.Arrays;
 import java.util.Collections;
 
 /**
@@ -35,7 +34,6 @@ CorsConfigurationSource corsConfigurationSource() {
         UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
         CorsConfiguration config = new CorsConfiguration();
         config.setAllowCredentials(true);
-//        config.addAllowedOrigin(CorsConfiguration.ALL);
         config.setAllowedOriginPatterns(Collections.singletonList(CorsConfiguration.ALL));
         config.addAllowedHeader(CorsConfiguration.ALL);
         config.addAllowedMethod(CorsConfiguration.ALL);

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -129,7 +129,7 @@ public void add(String skuId, Integer num, String cartType, Boolean cover) {
                 if (cartSkuVO != null && dataSku.getUpdateTime().equals(cartSkuVO.getGoodsSku().getUpdateTime())) {
 
                     //如果覆盖购物车中商品数量
-                    if (cover) {
+                    if (Boolean.TRUE.equals(cover)) {
                         cartSkuVO.setNum(num);
                         this.checkSetGoodsQuantity(cartSkuVO, skuId, num);
                     } else {

File: framework/src/main/java/cn/lili/modules/order/order/entity/vo/OrderSimpleVO.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.modules.order.order.entity.vo;
 
-import cn.lili.common.utils.StringUtils;
 import cn.lili.common.enums.ClientTypeEnum;
+import cn.lili.common.utils.StringUtils;
 import cn.lili.modules.order.order.entity.enums.*;
 import com.fasterxml.jackson.annotation.JsonFormat;
 import io.swagger.annotations.ApiModelProperty;
@@ -149,7 +149,7 @@ public List<OrderItemVO> getOrderItems() {
         String[] complainStatus = groupComplainStatus.split(",");
         String[] commentStatus = groupCommentStatus.split(",");
         String[] goodsPrice = groupGoodsPrice.split(",");
-//       String goodsId, String skuId, Integer num, String image, String name, String afterSaleStatus
+
         for (int i = 0; i < goodsId.length; i++) {
             orderItemVOS.add(new OrderItemVO(orderItemsSn[i], goodsId[i], skuId[i], num[i], image[i], name[i], afterSaleStatus[i], complainStatus[i], commentStatus[i], Double.parseDouble(goodsPrice[i])));
         }

File: manager-api/src/main/java/cn/lili/controller/goods/ParameterManagerController.java
Patch:
@@ -44,7 +44,7 @@ public ResultMessage<Parameters> save(@Valid Parameters parameters) {
     @PutMapping
     public ResultMessage<Parameters> update(@Valid Parameters parameters) {
 
-        if (parametersService.updateById(parameters)) {
+        if (parametersService.updateParameter(parameters)) {
             return ResultUtil.data(parameters);
         }
         throw new ServiceException(ResultCode.PARAMETER_UPDATE_ERROR);

File: framework/src/main/java/cn/lili/modules/order/cart/service/CartServiceImpl.java
Patch:
@@ -129,7 +129,7 @@ public void add(String skuId, Integer num, String cartType, Boolean cover) {
                 if (cartSkuVO != null && dataSku.getUpdateTime().equals(cartSkuVO.getGoodsSku().getUpdateTime())) {
 
                     //如果覆盖购物车中商品数量
-                    if (cover) {
+                    if (Boolean.TRUE.equals(cover)) {
                         cartSkuVO.setNum(num);
                         this.checkSetGoodsQuantity(cartSkuVO, skuId, num);
                     } else {

File: framework/src/main/java/cn/lili/modules/order/order/entity/vo/OrderSimpleVO.java
Patch:
@@ -1,7 +1,7 @@
 package cn.lili.modules.order.order.entity.vo;
 
-import cn.lili.common.utils.StringUtils;
 import cn.lili.common.enums.ClientTypeEnum;
+import cn.lili.common.utils.StringUtils;
 import cn.lili.modules.order.order.entity.enums.*;
 import com.fasterxml.jackson.annotation.JsonFormat;
 import io.swagger.annotations.ApiModelProperty;
@@ -149,7 +149,7 @@ public List<OrderItemVO> getOrderItems() {
         String[] complainStatus = groupComplainStatus.split(",");
         String[] commentStatus = groupCommentStatus.split(",");
         String[] goodsPrice = groupGoodsPrice.split(",");
-//       String goodsId, String skuId, Integer num, String image, String name, String afterSaleStatus
+
         for (int i = 0; i < goodsId.length; i++) {
             orderItemVOS.add(new OrderItemVO(orderItemsSn[i], goodsId[i], skuId[i], num[i], image[i], name[i], afterSaleStatus[i], complainStatus[i], commentStatus[i], Double.parseDouble(goodsPrice[i])));
         }

File: framework/src/main/java/cn/lili/elasticsearch/config/ElasticsearchConfig.java
Patch:
@@ -31,10 +31,10 @@
  **/
 @Slf4j
 @Configuration
-@RequiredArgsConstructor(onConstructor_ = @Autowired)
 public class ElasticsearchConfig extends AbstractElasticsearchConfiguration {
 
-    private final ElasticsearchProperties elasticsearchProperties;
+    @Autowired
+    private ElasticsearchProperties elasticsearchProperties;
 
     private RestHighLevelClient client;
 

File: framework/src/main/java/cn/lili/modules/order/cart/render/impl/CheckDataRender.java
Patch:
@@ -5,7 +5,6 @@
 import cn.lili.common.enums.ResultCode;
 import cn.lili.common.exception.ServiceException;
 import cn.lili.common.security.context.UserContext;
-import cn.lili.common.utils.CurrencyUtil;
 import cn.lili.modules.goods.entity.dos.GoodsSku;
 import cn.lili.modules.goods.entity.enums.GoodsAuthEnum;
 import cn.lili.modules.goods.entity.enums.GoodsStatusEnum;
@@ -109,8 +108,6 @@ private void checkData(TradeDTO tradeDTO) {
                 //设置失效消息
                 cartSkuVO.setErrorMessage("商品库存不足,现有库存数量[" + dataSku.getQuantity() + "]");
             }
-            //写入初始价格
-            cartSkuVO.getPriceDetailDTO().setGoodsPrice(CurrencyUtil.mul(cartSkuVO.getPurchasePrice(), cartSkuVO.getNum()));
         }
     }
 

File: framework/src/main/java/cn/lili/modules/promotion/serviceimpl/PromotionGoodsServiceImpl.java
Patch:
@@ -17,7 +17,6 @@
 import cn.lili.modules.goods.service.GoodsSkuService;
 import cn.lili.modules.order.cart.entity.vo.CartSkuVO;
 import cn.lili.modules.order.cart.entity.vo.FullDiscountVO;
-import cn.lili.modules.promotion.entity.dos.PointsGoods;
 import cn.lili.modules.promotion.entity.dos.PromotionGoods;
 import cn.lili.modules.promotion.entity.dos.SeckillApply;
 import cn.lili.modules.promotion.entity.dto.BasePromotion;

File: seller-api/src/main/java/cn/lili/controller/goods/GoodsStoreController.java
Patch:
@@ -94,7 +94,8 @@ public ResultMessage<StockWarningVO> getWarningStockByPage(GoodsSearchParams goo
     @GetMapping(value = "/get/{id}")
     public ResultMessage<GoodsVO> get(@PathVariable String id) {
         AuthUser tokenUser = UserContext.getCurrentUser();
-        GoodsVO goods = goodsService.getGoodsVO(id);
+        GoodsVO goods = goodsService.getGoodsVOFromDB(id);
+        assert tokenUser != null;
         if (tokenUser.getStoreId().equals(goods.getStoreId())) {
             return ResultUtil.data(goods);
         }

