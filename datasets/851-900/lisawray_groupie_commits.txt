File: library/src/main/java/com/xwray/groupie/GroupDataObserver.java
Patch:
@@ -22,4 +22,6 @@ public interface GroupDataObserver {
     void onItemRangeRemoved(@NonNull Group group, int positionStart, int itemCount);
 
     void onItemMoved(@NonNull Group group, int fromPosition, int toPosition);
+
+    void onDataSetInvalidated();
 }

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/CarouselGroup.java
Patch:
@@ -4,8 +4,8 @@
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.xwray.groupie.Group;
-import com.xwray.groupie.GroupAdapter;
 import com.xwray.groupie.GroupDataObserver;
+import com.xwray.groupie.GroupieAdapter;
 import com.xwray.groupie.Item;
 import com.xwray.groupie.example.databinding.item.CarouselItem;
 
@@ -40,7 +40,7 @@ public void onItemRangeInserted(int positionStart, int itemCount) {
         }
     };
 
-    public CarouselGroup(RecyclerView.ItemDecoration itemDecoration, GroupAdapter adapter) {
+    public CarouselGroup(RecyclerView.ItemDecoration itemDecoration, GroupieAdapter adapter) {
         this.adapter = adapter;
         carouselItem = new CarouselItem(itemDecoration, adapter);
         isEmpty = adapter.getItemCount() == 0;

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/item/CarouselItem.java
Patch:
@@ -5,7 +5,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 import android.view.View;
 
-import com.xwray.groupie.GroupAdapter;
+import com.xwray.groupie.GroupieAdapter;
 import com.xwray.groupie.Item;
 import com.xwray.groupie.OnItemClickListener;
 import com.xwray.groupie.databinding.BindableItem;
@@ -18,10 +18,10 @@
  */
 public class CarouselItem extends BindableItem<ItemCarouselBinding> implements OnItemClickListener {
 
-    private GroupAdapter adapter;
+    private GroupieAdapter adapter;
     private RecyclerView.ItemDecoration carouselDecoration;
 
-    public CarouselItem(RecyclerView.ItemDecoration itemDecoration, GroupAdapter adapter) {
+    public CarouselItem(RecyclerView.ItemDecoration itemDecoration, GroupieAdapter adapter) {
         this.carouselDecoration = itemDecoration;
         this.adapter = adapter;
         adapter.setOnItemClickListener(this);

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/CarouselGroup.java
Patch:
@@ -4,8 +4,8 @@
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.xwray.groupie.Group;
-import com.xwray.groupie.GroupAdapter;
 import com.xwray.groupie.GroupDataObserver;
+import com.xwray.groupie.GroupieAdapter;
 import com.xwray.groupie.Item;
 import com.xwray.groupie.example.databinding.item.CarouselItem;
 
@@ -40,7 +40,7 @@ public void onItemRangeInserted(int positionStart, int itemCount) {
         }
     };
 
-    public CarouselGroup(RecyclerView.ItemDecoration itemDecoration, GroupAdapter adapter) {
+    public CarouselGroup(RecyclerView.ItemDecoration itemDecoration, GroupieAdapter adapter) {
         this.adapter = adapter;
         carouselItem = new CarouselItem(itemDecoration, adapter);
         isEmpty = adapter.getItemCount() == 0;

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/item/CarouselItem.java
Patch:
@@ -5,7 +5,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 import android.view.View;
 
-import com.xwray.groupie.GroupAdapter;
+import com.xwray.groupie.GroupieAdapter;
 import com.xwray.groupie.Item;
 import com.xwray.groupie.OnItemClickListener;
 import com.xwray.groupie.databinding.BindableItem;
@@ -18,10 +18,10 @@
  */
 public class CarouselItem extends BindableItem<ItemCarouselBinding> implements OnItemClickListener {
 
-    private GroupAdapter adapter;
+    private GroupieAdapter adapter;
     private RecyclerView.ItemDecoration carouselDecoration;
 
-    public CarouselItem(RecyclerView.ItemDecoration itemDecoration, GroupAdapter adapter) {
+    public CarouselItem(RecyclerView.ItemDecoration itemDecoration, GroupieAdapter adapter) {
         this.carouselDecoration = itemDecoration;
         this.adapter = adapter;
         adapter.setOnItemClickListener(this);

File: library-viewbinding/src/main/java/com/xwray/groupie/viewbinding/BindableItem.java
Patch:
@@ -53,7 +53,7 @@ public void bind(@NonNull GroupieViewHolder<T> viewHolder, int position, @NonNul
     /**
      * Perform any actions required to set up the view for display.
      *
-     * @param viewBinding The ViewDataBinding to bind
+     * @param viewBinding The ViewBinding to bind
      * @param position The adapter position
      */
     public abstract void bind(@NonNull T viewBinding, int position);
@@ -64,7 +64,7 @@ public void bind(@NonNull GroupieViewHolder<T> viewHolder, int position, @NonNul
      * If you don't specify how to handle payloads in your implementation, they'll be ignored and
      * the adapter will do a full rebind.
      *
-     * @param viewBinding The ViewDataBinding to bind
+     * @param viewBinding The ViewBinding to bind
      * @param position The adapter position
      * @param payloads A list of payloads (may be empty)
      */

File: library/src/main/java/com/xwray/groupie/ExpandableGroup.java
Patch:
@@ -7,7 +7,7 @@
 import androidx.annotation.NonNull;
 
 /**
- * An ExpandableContentItem is one "base" content item with a list of children (any of which
+ * An ExpandableGroup is one "base" content item with a list of children (any of which
  * may themselves be a group.)
  **/
 

File: library/src/test/java/com/xwray/groupie/ItemTest.java
Patch:
@@ -83,7 +83,7 @@ private static class DataItem extends Item {
         }
 
         @Override
-        public void bind(@NonNull ViewHolder viewHolder, int position) {
+        public void bind(@NonNull GroupieViewHolder viewHolder, int position) {
 
         }
 

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/item/CarouselItem.java
Patch:
@@ -9,7 +9,7 @@
 import com.xwray.groupie.Item;
 import com.xwray.groupie.OnItemClickListener;
 import com.xwray.groupie.databinding.BindableItem;
-import com.xwray.groupie.databinding.ViewHolder;
+import com.xwray.groupie.databinding.GroupieViewHolder;
 import com.xwray.groupie.example.databinding.R;
 import com.xwray.groupie.example.databinding.databinding.ItemCarouselBinding;
 
@@ -28,8 +28,8 @@ public CarouselItem(RecyclerView.ItemDecoration itemDecoration, GroupAdapter ada
     }
 
     @Override
-    public ViewHolder<ItemCarouselBinding> createViewHolder(@NonNull View itemView) {
-        ViewHolder<ItemCarouselBinding> viewHolder = super.createViewHolder(itemView);
+    public GroupieViewHolder<ItemCarouselBinding> createViewHolder(@NonNull View itemView) {
+        GroupieViewHolder<ItemCarouselBinding> viewHolder = super.createViewHolder(itemView);
         RecyclerView recyclerView = viewHolder.binding.recyclerView;
         recyclerView.addItemDecoration(carouselDecoration);
         recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext(), LinearLayoutManager.HORIZONTAL, false));

File: example-shared/src/main/java/com/xwray/groupie/example/core/decoration/InsetItemDecoration.java
Patch:
@@ -9,7 +9,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 import android.view.View;
 
-import com.xwray.groupie.ViewHolder;
+import com.xwray.groupie.GroupieViewHolder;
 
 /**
  * An ItemDecoration which applies an even visual padding on the left and right edges of a grid and
@@ -35,7 +35,7 @@ public InsetItemDecoration(@ColorInt int backgroundColor, @Dimension int padding
     }
 
     private boolean isInset(View view, RecyclerView parent) {
-        ViewHolder viewHolder = (ViewHolder) parent.getChildViewHolder(view);
+        GroupieViewHolder viewHolder = (GroupieViewHolder) parent.getChildViewHolder(view);
         if (viewHolder.getExtras().containsKey(key)) {
             return viewHolder.getExtras().get(key).equals(value);
         } else {

File: library-databinding/src/main/java/com/xwray/groupie/databinding/GroupieViewHolder.java
Patch:
@@ -3,10 +3,10 @@
 import androidx.databinding.ViewDataBinding;
 import androidx.annotation.NonNull;
 
-public class ViewHolder<T extends ViewDataBinding> extends com.xwray.groupie.ViewHolder {
+public class GroupieViewHolder<T extends ViewDataBinding> extends com.xwray.groupie.GroupieViewHolder {
     public final T binding;
 
-    public ViewHolder(@NonNull T binding) {
+    public GroupieViewHolder(@NonNull T binding) {
         super(binding.getRoot());
         this.binding = binding;
     }

File: library/src/main/java/com/xwray/groupie/GroupAdapter.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * An adapter that holds a list of Groups.
  */
-public class GroupAdapter<VH extends ViewHolder> extends RecyclerView.Adapter<VH> implements GroupDataObserver {
+public class GroupAdapter<VH extends GroupieViewHolder> extends RecyclerView.Adapter<VH> implements GroupDataObserver {
 
     private final List<Group> groups = new ArrayList<>();
     private OnItemClickListener onItemClickListener;

File: library/src/main/java/com/xwray/groupie/GroupieViewHolder.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.Map;
 
-public class ViewHolder extends RecyclerView.ViewHolder {
+public class GroupieViewHolder extends RecyclerView.ViewHolder {
     private Item item;
     private OnItemClickListener onItemClickListener;
     private OnItemLongClickListener onItemLongClickListener;
@@ -35,7 +35,7 @@ public boolean onLongClick(@NonNull View v) {
         }
     };
 
-    public ViewHolder(@NonNull View rootView) {
+    public GroupieViewHolder(@NonNull View rootView) {
         super(rootView);
     }
 

File: library/src/main/java/com/xwray/groupie/Item.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
 
-public abstract class Item<VH extends ViewHolder> implements Group, SpanSizeProvider {
+public abstract class Item<VH extends GroupieViewHolder> implements Group, SpanSizeProvider {
 
     private static AtomicLong ID_COUNTER = new AtomicLong(0);
     protected GroupDataObserver parentDataObserver;
@@ -29,7 +29,7 @@ protected Item(long id) {
 
     @NonNull
     public VH createViewHolder(@NonNull View itemView) {
-        return (VH) new ViewHolder(itemView);
+        return (VH) new GroupieViewHolder(itemView);
     }
 
     /**

File: library/src/main/java/com/xwray/groupie/TouchCallback.java
Patch:
@@ -11,10 +11,10 @@ public TouchCallback() {
     }
 
     @Override public int getSwipeDirs(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
-        return ((ViewHolder) viewHolder).getSwipeDirs();
+        return ((GroupieViewHolder) viewHolder).getSwipeDirs();
     }
 
     @Override public int getDragDirs(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
-        return ((ViewHolder) viewHolder).getDragDirs();
+        return ((GroupieViewHolder) viewHolder).getDragDirs();
     }
 }

File: library/src/test/java/com/xwray/groupie/DummyItem.java
Patch:
@@ -17,12 +17,12 @@ protected DummyItem(long id) {
     }
 
     @Override
-    public ViewHolder createViewHolder(View itemView) {
+    public GroupieViewHolder createViewHolder(View itemView) {
         return null;
     }
 
     @Override
-    public void bind(ViewHolder viewHolder, int position) {
+    public void bind(GroupieViewHolder viewHolder, int position) {
 
     }
 }

File: library/src/main/java/com/xwray/groupie/DiffCallback.java
Patch:
@@ -39,7 +39,7 @@ public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
     public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
         Item oldItem = GroupUtils.getItem(oldGroups, oldItemPosition);
         Item newItem = GroupUtils.getItem(newGroups, newItemPosition);
-        return newItem.equals(oldItem);
+        return newItem.hasSameContentAs(oldItem);
     }
 
     @Nullable

File: library/src/main/java/com/xwray/groupie/UpdatingGroup.java
Patch:
@@ -16,8 +16,8 @@
  * <p>
  * Item comparisons are made using:
  * - Item.getId() (are items the same?)
- * - Item.equals() (are contents the same?)
- * If you don't customize getId() or equals(), the default implementations will return false,
+ * - Item.hasSameContentAs() (are contents the same?)
+ * If you don't customize getId() or hasSameContentAs(), the default implementations will return false,
  * meaning your Group will consider every update a complete change of everything.
  */
 @Deprecated
@@ -108,7 +108,7 @@ public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
         public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
             Item oldItem = items.get(oldItemPosition);
             Item newItem = newList.get(newItemPosition);
-            return oldItem.equals(newItem);
+            return oldItem.hasSameContentAs(newItem);
         }
     }
 }

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/item/CarouselItem.java
Patch:
@@ -9,7 +9,7 @@
 import com.xwray.groupie.Item;
 import com.xwray.groupie.OnItemClickListener;
 import com.xwray.groupie.databinding.BindableItem;
-import com.xwray.groupie.databinding.ViewHolder;
+import com.xwray.groupie.databinding.GroupieViewHolder;
 import com.xwray.groupie.example.databinding.R;
 import com.xwray.groupie.example.databinding.databinding.ItemCarouselBinding;
 
@@ -28,8 +28,8 @@ public CarouselItem(RecyclerView.ItemDecoration itemDecoration, GroupAdapter ada
     }
 
     @Override
-    public ViewHolder<ItemCarouselBinding> createViewHolder(@NonNull View itemView) {
-        ViewHolder<ItemCarouselBinding> viewHolder = super.createViewHolder(itemView);
+    public GroupieViewHolder<ItemCarouselBinding> createViewHolder(@NonNull View itemView) {
+        GroupieViewHolder<ItemCarouselBinding> viewHolder = super.createViewHolder(itemView);
         RecyclerView recyclerView = viewHolder.binding.recyclerView;
         recyclerView.addItemDecoration(carouselDecoration);
         recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext(), LinearLayoutManager.HORIZONTAL, false));

File: example-shared/src/main/java/com/xwray/groupie/example/core/decoration/InsetItemDecoration.java
Patch:
@@ -9,7 +9,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 import android.view.View;
 
-import com.xwray.groupie.ViewHolder;
+import com.xwray.groupie.GroupieViewHolder;
 
 /**
  * An ItemDecoration which applies an even visual padding on the left and right edges of a grid and
@@ -35,7 +35,7 @@ public InsetItemDecoration(@ColorInt int backgroundColor, @Dimension int padding
     }
 
     private boolean isInset(View view, RecyclerView parent) {
-        ViewHolder viewHolder = (ViewHolder) parent.getChildViewHolder(view);
+        GroupieViewHolder viewHolder = (GroupieViewHolder) parent.getChildViewHolder(view);
         if (viewHolder.getExtras().containsKey(key)) {
             return viewHolder.getExtras().get(key).equals(value);
         } else {

File: library-databinding/src/main/java/com/xwray/groupie/databinding/GroupieViewHolder.java
Patch:
@@ -3,10 +3,10 @@
 import androidx.databinding.ViewDataBinding;
 import androidx.annotation.NonNull;
 
-public class ViewHolder<T extends ViewDataBinding> extends com.xwray.groupie.ViewHolder {
+public class GroupieViewHolder<T extends ViewDataBinding> extends com.xwray.groupie.GroupieViewHolder {
     public final T binding;
 
-    public ViewHolder(@NonNull T binding) {
+    public GroupieViewHolder(@NonNull T binding) {
         super(binding.getRoot());
         this.binding = binding;
     }

File: library/src/main/java/com/xwray/groupie/GroupAdapter.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * An adapter that holds a list of Groups.
  */
-public class GroupAdapter<VH extends ViewHolder> extends RecyclerView.Adapter<VH> implements GroupDataObserver {
+public class GroupAdapter<VH extends GroupieViewHolder> extends RecyclerView.Adapter<VH> implements GroupDataObserver {
 
     private final List<Group> groups = new ArrayList<>();
     private OnItemClickListener onItemClickListener;

File: library/src/main/java/com/xwray/groupie/GroupieViewHolder.java
Patch:
@@ -7,7 +7,7 @@
 
 import java.util.Map;
 
-public class ViewHolder extends RecyclerView.ViewHolder {
+public class GroupieViewHolder extends RecyclerView.ViewHolder {
     private Item item;
     private OnItemClickListener onItemClickListener;
     private OnItemLongClickListener onItemLongClickListener;
@@ -35,7 +35,7 @@ public boolean onLongClick(@NonNull View v) {
         }
     };
 
-    public ViewHolder(@NonNull View rootView) {
+    public GroupieViewHolder(@NonNull View rootView) {
         super(rootView);
     }
 

File: library/src/main/java/com/xwray/groupie/Item.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicLong;
 
-public abstract class Item<VH extends ViewHolder> implements Group, SpanSizeProvider {
+public abstract class Item<VH extends GroupieViewHolder> implements Group, SpanSizeProvider {
 
     private static AtomicLong ID_COUNTER = new AtomicLong(0);
     protected GroupDataObserver parentDataObserver;
@@ -29,7 +29,7 @@ protected Item(long id) {
 
     @NonNull
     public VH createViewHolder(@NonNull View itemView) {
-        return (VH) new ViewHolder(itemView);
+        return (VH) new GroupieViewHolder(itemView);
     }
 
     /**

File: library/src/main/java/com/xwray/groupie/TouchCallback.java
Patch:
@@ -11,10 +11,10 @@ public TouchCallback() {
     }
 
     @Override public int getSwipeDirs(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
-        return ((ViewHolder) viewHolder).getSwipeDirs();
+        return ((GroupieViewHolder) viewHolder).getSwipeDirs();
     }
 
     @Override public int getDragDirs(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder) {
-        return ((ViewHolder) viewHolder).getDragDirs();
+        return ((GroupieViewHolder) viewHolder).getDragDirs();
     }
 }

File: library/src/test/java/com/xwray/groupie/DummyItem.java
Patch:
@@ -17,12 +17,12 @@ protected DummyItem(long id) {
     }
 
     @Override
-    public ViewHolder createViewHolder(View itemView) {
+    public GroupieViewHolder createViewHolder(View itemView) {
         return null;
     }
 
     @Override
-    public void bind(ViewHolder viewHolder, int position) {
+    public void bind(GroupieViewHolder viewHolder, int position) {
 
     }
 }

File: library/src/main/java/com/xwray/groupie/DiffCallback.java
Patch:
@@ -39,7 +39,7 @@ public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
     public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
         Item oldItem = GroupUtils.getItem(oldGroups, oldItemPosition);
         Item newItem = GroupUtils.getItem(newGroups, newItemPosition);
-        return newItem.equals(oldItem);
+        return newItem.hasSameContentAs(oldItem);
     }
 
     @Nullable

File: library/src/main/java/com/xwray/groupie/UpdatingGroup.java
Patch:
@@ -16,8 +16,8 @@
  * <p>
  * Item comparisons are made using:
  * - Item.getId() (are items the same?)
- * - Item.equals() (are contents the same?)
- * If you don't customize getId() or equals(), the default implementations will return false,
+ * - Item.hasSameContentAs() (are contents the same?)
+ * If you don't customize getId() or hasSameContentAs(), the default implementations will return false,
  * meaning your Group will consider every update a complete change of everything.
  */
 @Deprecated
@@ -108,7 +108,7 @@ public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
         public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
             Item oldItem = items.get(oldItemPosition);
             Item newItem = newList.get(newItemPosition);
-            return oldItem.equals(newItem);
+            return oldItem.hasSameContentAs(newItem);
         }
     }
 }

File: library/src/main/java/com/xwray/groupie/DiffTask.java
Patch:
@@ -13,7 +13,7 @@
  * in a background thread. This task will call {@link AsyncDiffUtil.Callback#onDispatchAsyncResult(Collection)}
  * passing the new list just before dispatching the diff result to the provided
  * {@link DiffUtil.Callback} so that the new list.
- * <p>This task is executed via {@link AsyncDiffUtil#calculateDiff(Collection, DiffUtil.Callback, OnAsyncUpdateListener)}.
+ * <p>This task is executed via {@link AsyncDiffUtil#calculateDiff(Collection, DiffUtil.Callback, OnAsyncUpdateListener, boolean)}.
  */
 class DiffTask extends AsyncTask<Void, Void, DiffUtil.DiffResult> {
     @NonNull private final DiffUtil.Callback diffCallback;

File: library/src/main/java/com/xwray/groupie/AsyncDiffUtil.java
Patch:
@@ -17,7 +17,7 @@ interface Callback extends ListUpdateCallback {
          * Called on the main thread before DiffUtil dispatches the result
          */
         @MainThread
-        void onDispatchResult(@NonNull Collection<? extends Group> newGroups);
+        void onDispatchAsyncResult(@NonNull Collection<? extends Group> newGroups);
     }
 
     private final Callback asyncDiffUtilCallback;

File: library/src/main/java/com/xwray/groupie/DiffTask.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * An async task implementation that runs {@link DiffUtil#calculateDiff(DiffUtil.Callback)}
- * in a background thread. This task will call {@link AsyncDiffUtil.Callback#onDispatchResult(Collection)}
+ * in a background thread. This task will call {@link AsyncDiffUtil.Callback#onDispatchAsyncResult(Collection)}
  * passing the new list just before dispatching the diff result to the provided
  * {@link DiffUtil.Callback} so that the new list.
  * <p>This task is executed via {@link AsyncDiffUtil#calculateDiff(Collection, DiffUtil.Callback, OnAsyncUpdateListener)}.
@@ -52,7 +52,7 @@ protected void onPostExecute(@Nullable DiffUtil.DiffResult diffResult) {
         }
         AsyncDiffUtil async = asyncListDiffer.get();
         if (shouldDispatchResult(diffResult, async)) {
-            async.getAsyncDiffUtilCallback().onDispatchResult(async.getGroups());
+            async.getAsyncDiffUtilCallback().onDispatchAsyncResult(async.getGroups());
             diffResult.dispatchUpdatesTo(async.getAsyncDiffUtilCallback());
             if (onAsyncUpdateListener != null && onAsyncUpdateListener.get() != null) {
                 onAsyncUpdateListener.get().onUpdateComplete();

File: library/src/main/java/com/xwray/groupie/UpdatingGroup.java
Patch:
@@ -98,7 +98,7 @@ public int getNewListSize() {
         public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
             Item oldItem = items.get(oldItemPosition);
             Item newItem = newList.get(newItemPosition);
-            if (oldItem.getLayout() != newItem.getLayout()) {
+            if (oldItem.getViewType() != newItem.getViewType()) {
                 return false;
             }
             return oldItem.getId() == newItem.getId();

File: library/src/main/java/com/xwray/groupie/AsyncDiffUtil.java
Patch:
@@ -2,6 +2,7 @@
 
 import androidx.annotation.MainThread;
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.recyclerview.widget.DiffUtil;
 import androidx.recyclerview.widget.ListUpdateCallback;
 
@@ -41,10 +42,10 @@ int getMaxScheduledGeneration() {
         return maxScheduledGeneration;
     }
 
-    void calculateDiff(@NonNull Collection<? extends Group> newGroups, @NonNull DiffUtil.Callback diffUtilCallback) {
+    void calculateDiff(@NonNull Collection<? extends Group> newGroups, @NonNull DiffUtil.Callback diffUtilCallback, @Nullable OnAsyncUpdateListener onAsyncUpdateListener) {
         groups = newGroups;
         // incrementing generation means any currently-running diffs are discarded when they finish
         final int runGeneration = ++maxScheduledGeneration;
-        new DiffTask(this, diffUtilCallback, runGeneration).execute();
+        new DiffTask(this, diffUtilCallback, runGeneration, onAsyncUpdateListener).execute();
     }
 }

File: library/src/main/java/com/xwray/groupie/UpdatingGroup.java
Patch:
@@ -98,7 +98,7 @@ public int getNewListSize() {
         public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
             Item oldItem = items.get(oldItemPosition);
             Item newItem = newList.get(newItemPosition);
-            if (oldItem.getLayout() != newItem.getLayout()) {
+            if (oldItem.getViewType() != newItem.getViewType()) {
                 return false;
             }
             return oldItem.getId() == newItem.getId();

File: library/src/main/java/com/xwray/groupie/GroupAdapter.java
Patch:
@@ -225,6 +225,7 @@ public int getAdapterPosition(@NonNull Item contentItem) {
      */
     public int getAdapterPosition(@NonNull Group group) {
         int index = groups.indexOf(group);
+        if (index == -1) return -1;
         int position = 0;
         for (int i = 0; i < index; i++) {
             position += groups.get(i).getItemCount();

File: library/src/main/java/com/xwray/groupie/Section.java
Patch:
@@ -155,7 +155,7 @@ public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
             }
         });
 
-        super.removeAll(groups);
+        super.removeAll(children);
         children.clear();
         children.addAll(groups);
         super.addAll(groups);

File: example-databinding/src/main/java/com/xwray/groupie/example/databinding/item/FullBleedCardItem.java
Patch:
@@ -8,6 +8,6 @@ public class FullBleedCardItem extends CardItem {
 
     public FullBleedCardItem(@ColorRes int colorRes) {
         super(colorRes);
-        getExtras().put(MainActivity.INSET_TYPE_KEY, MainActivity.INSET);
+        getExtras().remove(MainActivity.INSET_TYPE_KEY);
     }
 }

File: example-shared/src/main/java/com/xwray/groupie/example/core/SettingsActivity.java
Patch:
@@ -20,8 +20,8 @@ protected void onCreate(Bundle savedInstanceState) {
         TextView showBoundsText = (TextView) showBoundsContainer.findViewById(R.id.text);
 
         ViewGroup showOffsetsContainer = (ViewGroup) findViewById(R.id.show_offsets);
-        SwitchCompat showOffsetsSwitch =  (SwitchCompat) showBoundsContainer.findViewById(R.id.the_switch);
-        TextView showOffsetsText = (TextView) showBoundsContainer.findViewById(R.id.text);
+        SwitchCompat showOffsetsSwitch =  (SwitchCompat) showOffsetsContainer.findViewById(R.id.the_switch);
+        TextView showOffsetsText = (TextView) showOffsetsContainer.findViewById(R.id.text);
 
         showBoundsText.setText(R.string.show_bounds);
         showOffsetsText.setText(R.string.show_offsets);

File: library/src/main/java/com/xwray/groupie/Section.java
Patch:
@@ -100,9 +100,10 @@ public void removeAll(@NonNull Collection<? extends Group> groups) {
         if (groups.isEmpty()) {
             return;
         }
+
         super.removeAll(groups);
         for (Group group : groups) {
-            int position = getPosition(group);
+            int position = getItemCountBeforeGroup(group);
             children.remove(group);
             notifyItemRangeRemoved(position, group.getItemCount());
         }

File: groupie/src/main/java/com/xwray/groupie/GroupAdapter.java
Patch:
@@ -189,10 +189,10 @@ public void addAll(@NonNull Collection<? extends Group> groups) {
     public void remove(@NonNull Group group) {
         if (group == null) throw new RuntimeException("Group cannot be null");
         int position = groups.indexOf(group);
-        int count = groups.get(position).getItemCount();
+        int itemCountBeforeGroup = getItemCountBeforeGroup(position);
         group.setGroupDataObserver(null);
         groups.remove(position);
-        notifyItemRangeRemoved(position, count);
+        notifyItemRangeRemoved(itemCountBeforeGroup, group.getItemCount());
     }
 
     public void add(@NonNull int index, Group group) {

File: groupie/src/main/java/com/xwray/groupie/GroupAdapter.java
Patch:
@@ -190,9 +190,10 @@ public void remove(@NonNull Group group) {
         if (group == null) throw new RuntimeException("Group cannot be null");
         int position = groups.indexOf(group);
         int count = groups.get(position).getItemCount();
+        int itemCountBeforeGroup = getItemCountBeforeGroup(position);
         group.setGroupDataObserver(null);
         groups.remove(position);
-        notifyItemRangeRemoved(position, count);
+        notifyItemRangeRemoved(itemCountBeforeGroup, count);
     }
 
     public void add(@NonNull int index, Group group) {

File: groupie/src/main/java/com/genius/groupie/GroupAdapter.java
Patch:
@@ -180,9 +180,10 @@ public void remove(@NonNull Group group) {
         if (group == null) throw new RuntimeException("Group cannot be null");
         int position = groups.indexOf(group);
         int count = groups.get(position).getItemCount();
+        int itemCountBeforeGroup = getItemCountBeforeGroup(position);
         group.setGroupDataObserver(null);
         groups.remove(position);
-        notifyItemRangeRemoved(position, count);
+        notifyItemRangeRemoved(itemCountBeforeGroup, count);
     }
 
     public void add(@NonNull int index, Group group) {

File: groupie/src/main/java/com/genius/groupie/Section.java
Patch:
@@ -77,14 +77,14 @@ public void add(Group group) {
         super.add(group);
         int position = getItemCountWithoutFooter();
         children.add(group);
-        notifyItemRangeInserted(getHeaderItemCount() + position, group.getItemCount());
+        notifyItemRangeInserted(position, group.getItemCount());
         refreshEmptyState();
     }
 
     @Override
     public void remove(Group group) {
         super.remove(group);
-        int position = getPosition(group);
+        int position = getItemCountBeforeGroup(group);
         children.remove(group);
         notifyItemRangeRemoved(position, group.getItemCount());
         refreshEmptyState();

File: groupie/src/main/java/com/genius/groupie/GroupAdapter.java
Patch:
@@ -147,7 +147,7 @@ public void add(@NonNull Group group) {
      * All groups in the list must be non-null.
      * @param groups
      */
-    public void addAll(@NonNull List<Group> groups) {
+    public void addAll(@NonNull List<? extends Group> groups) {
         if (groups.contains(null)) throw new RuntimeException("List of groups can't contain null!");
         int itemCountBeforeGroup = getItemCount();
         int additionalSize = 0;

File: groupie/src/main/java/com/genius/groupie/NestedGroup.java
Patch:
@@ -23,7 +23,7 @@ public int getItemCount() {
         return size;
     }
 
-    protected final int getItemCount(List<Group> groups) {
+    protected final int getItemCount(List<? extends Group> groups) {
         int size = 0;
         for (Group group : groups) {
             size += group.getItemCount();
@@ -98,7 +98,7 @@ public void add(Group group) {
     }
 
     @CallSuper
-    public void addAll(List<Group> groups) {
+    public void addAll(List<? extends Group> groups) {
         for (Group group : groups) {
             group.setGroupDataObserver(this);
         }
@@ -110,7 +110,7 @@ public void add(int position, Group group) {
     }
 
     @CallSuper
-    public void addAll(int position, List<Group> groups) {
+    public void addAll(int position, List<? extends Group> groups) {
         for (Group group : groups) {
             group.setGroupDataObserver(this);
         }

File: groupie/src/test/java/com/genius/groupie/GroupAdapterTest.java
Patch:
@@ -25,7 +25,7 @@ public void addItemMustBeNonNull() {
 
     @Test(expected=RuntimeException.class)
     public void addAllItemsMustBeNonNull() {
-        List<Group> groups = new ArrayList<>();
+        List<Item> groups = new ArrayList<>();
         groups.add(null);
         groupAdapter.addAll(groups);
     }

File: groupie/src/main/java/com/genius/groupie/NestedGroup.java
Patch:
@@ -223,7 +223,7 @@ public void notifyItemRemoved(int position) {
 
     public void notifyItemRangeChanged(int positionStart, int itemCount) {
         if (parentDataObserver != null) {
-            parentDataObserver.onItemRangeRemoved(this, positionStart, itemCount);
+            parentDataObserver.onItemRangeChanged(this, positionStart, itemCount);
         }
     }
 }

File: example/src/main/java/com/genius/groupie/example/MainActivity.java
Patch:
@@ -59,7 +59,7 @@ public class MainActivity extends AppCompatActivity implements View.OnClickListe
     private ArrayList<UpdatableItem> updatableItems;
 
     // Hold a reference to the updating group, so we can, well, update it
-    private UpdatingGroup<UpdatableItem> updatingGroup;
+    private UpdatingGroup updatingGroup;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -131,7 +131,7 @@ private void populateAdapter() {
                 R.drawable.shuffle,
                 onShuffleClicked);
         updatingSection.setHeader(updatingHeader);
-        updatingGroup = new UpdatingGroup<>();
+        updatingGroup = new UpdatingGroup();
         updatableItems = new ArrayList<>();
         for (int i = 1; i <= 12; i++) {
             updatableItems.add(new UpdatableItem(R.color.blue_200, i));

