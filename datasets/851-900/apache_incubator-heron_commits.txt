File: heron/healthmgr/src/java/org/apache/heron/healthmgr/HealthManager.java
Patch:
@@ -48,7 +48,6 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.cli.ParseException;
-import org.apache.heron.api.utils.Slf4jUtils;
 import org.apache.heron.classification.InterfaceStability.Evolving;
 import org.apache.heron.classification.InterfaceStability.Unstable;
 import org.apache.heron.common.basics.SingletonRegistry;
@@ -153,7 +152,6 @@ public HealthManager(Config config, AbstractModule baseModule) {
   }
 
   public static void main(String[] args) throws Exception {
-    Slf4jUtils.installSLF4JBridge();
     CommandLineParser parser = new DefaultParser();
     Options slaManagerCliOptions = constructCliOptions();
 

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/sensors/TrackerMetricsProvider.java
Patch:
@@ -63,7 +63,7 @@ public TrackerMetricsProvider(@Named(CONF_METRICS_SOURCE_URL) String trackerURL,
     Client client = ClientBuilder.newClient();
 
     this.baseTarget = client.target(trackerURL)
-        .path("topologies/metricstimeline")
+        .path("topologies/metrics/timeline")
         .queryParam("cluster", cluster)
         .queryParam("environ", environ)
         .queryParam("topology", topologyName);

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/V1Controller.java
Patch:
@@ -461,7 +461,7 @@ private V1Service createTopologyService() {
    * @param containerResource Passed down to configure the <code>executor</code> resource limits.
    * @param numberOfInstances Used to configure the execution command and ports for the <code>executor</code>.
    * @param isExecutor Flag used to configure components specific to <code>executor</code> and <code>manager</code>.
-   * @return A fully configured <code>StatefulSet</code> for the topology's <code>executors</code>.
+   * @return A fully configured <code>V1StatefulSet</code> for the topology's <code>executors</code>.
    */
   private V1StatefulSet createStatefulSet(Resource containerResource, int numberOfInstances,
                                           boolean isExecutor) {
@@ -1466,7 +1466,7 @@ protected static Map<String, String> getPersistentVolumeClaimLabels(String topol
    */
   private String getStatefulSetName(boolean isExecutor) {
     return String.format("%s-%s", getTopologyName(),
-        isExecutor ? KubernetesConstants.EXECUTOR_NAME + "s" : KubernetesConstants.MANAGER_NAME);
+        isExecutor ? KubernetesConstants.EXECUTOR_NAME : KubernetesConstants.MANAGER_NAME);
   }
 
   /**

File: tools/java/src/org/apache/bazel/cppcheck/CppCheck.java
Patch:
@@ -135,6 +135,7 @@ private static Collection<String> getSourceFiles(String extraActionFile) {
                     Predicates.not(Predicates.containsPattern("external/")),
                     Predicates.not(Predicates.containsPattern("third_party/")),
                     Predicates.not(Predicates.containsPattern("config/heron-config.h")),
+                    Predicates.not(Predicates.containsPattern(".*cppmap")),
                     Predicates.not(Predicates.containsPattern(".*pb.h$")),
                     Predicates.not(Predicates.containsPattern(".*cc_wrapper.sh$")),
                     Predicates.not(Predicates.containsPattern(".*pb.cc$"))

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/KubernetesConstants.java
Patch:
@@ -35,6 +35,8 @@ private KubernetesConstants() {
   public static final String MEMORY = "memory";
   public static final String CPU = "cpu";
 
+  public static final String EXECUTOR_NAME = "executor";
+
   // container env constants
   public static final String ENV_HOST = "HOST";
   public static final String POD_IP = "status.podIP";
@@ -102,8 +104,7 @@ private KubernetesConstants() {
   static final List<String> TOLERATIONS = Collections.unmodifiableList(
       Arrays.asList(
           "node.kubernetes.io/not-ready",
-          "node.alpha.kubernetes.io/notReady",
-          "node.alpha.kubernetes.io/unreachable"
+          "node.kubernetes.io/unreachable"
       )
   );
 }

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/KubernetesConstants.java
Patch:
@@ -68,7 +68,7 @@ private KubernetesConstants() {
   public static final int CHECKPOINT_MGR_PORT = 6009;
   // port number the start with when more than one port needed for remote debugging
   public static final int JVM_REMOTE_DEBUGGER_PORT = 6010;
-  public static final String JVM_REMOTE_DEBUGGER_PORT_NAME = "remote-debugger";
+  public static final String JVM_REMOTE_DEBUGGER_PORT_NAME = "rmt-debug";
 
   public static final Map<ExecutorPort, Integer> EXECUTOR_PORTS = new HashMap<>();
   static {

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/resources/TopologyResource.java
Patch:
@@ -61,7 +61,6 @@
 import org.apache.heron.apiserver.actions.Keys;
 import org.apache.heron.apiserver.utils.ConfigUtils;
 import org.apache.heron.apiserver.utils.FileHelper;
-import org.apache.heron.apiserver.utils.Logging;
 import org.apache.heron.apiserver.utils.Utils;
 import org.apache.heron.common.basics.DryRunFormatType;
 import org.apache.heron.common.basics.FileUtils;

File: tools/java/src/org/apache/bazel/checkstyle/CppCheckstyle.java
Patch:
@@ -91,7 +91,7 @@ public static void main(String[] args) throws IOException {
       // Remove "runtime/references" when we fix all non-const references in our codebase.
       // TODO: https://github.com/apache/incubator-heron/issues/467,
       // Remove "runtime/threadsafe_fn" when we fix all non-threadsafe libc functions
-      commandBuilder.add("--filter=-build/header_guard,-runtime/references,-runtime/threadsafe_fn");
+      commandBuilder.add("--filter=-build/header_guard,-runtime/references,-runtime/threadsafe_fn,-whitespace,-readability,-build/include_what_you_use,-build/c++11,-runtime/string");
       commandBuilder.addAll(sourceFiles);
       runLinter(commandBuilder);
 

File: eco/src/java/org/apache/heron/eco/builder/ObjectBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import org.slf4j.Logger;
@@ -220,7 +221,7 @@ private Method findCompatibleMethod(List<Object> args, Class target, String meth
     }
     if (eligibleCount > 1) {
       LOG.warn("Found multiple invokable methods for class, method, given arguments {} "
-          + new Object[]{target, methodName, args});
+          + Arrays.toString(new Object[]{target, methodName, args}));
     }
     return retval;
   }

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/KubernetesScheduler.java
Patch:
@@ -50,7 +50,7 @@ public class KubernetesScheduler implements IScheduler, IScalable {
   private UpdateTopologyManager updateTopologyManager;
 
   protected KubernetesController getController() {
-    return new AppsV1Controller(configuration, runtimeConfiguration);
+    return new V1Controller(configuration, runtimeConfiguration);
   }
 
   @Override

File: storm-compatibility/v2.2.0/src/java/org/apache/storm/spout/ISpout.java
Patch:
@@ -57,8 +57,7 @@ public interface ISpout extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this spout. Tuples can be emitted at any time, including the open and close methods. The collector is thread-safe and should be saved as an instance variable of this spout object.
    */
-  @SuppressWarnings("rawtypes")
-  void open(Map conf, TopologyContext context, SpoutOutputCollector collector);
+  void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector);
 
   /**
    * Called when an ISpout is going to be shutdown. There is no guarentee that close

File: storm-compatibility/v2.2.0/src/java/org/apache/storm/topology/IBasicBolt.java
Patch:
@@ -25,8 +25,7 @@
 import org.apache.storm.tuple.Tuple;
 
 public interface IBasicBolt extends IComponent {
-  @SuppressWarnings("rawtypes")
-  void prepare(Map stormConf, TopologyContext context);
+  void prepare(Map<String, Object> topoConf, TopologyContext context);
 
   /**
    * Process the input tuple and optionally emit new tuples based on the input tuple.

File: storm-compatibility/v2.2.0/src/java/org/apache/storm/topology/base/BaseBasicBolt.java
Patch:
@@ -29,8 +29,7 @@ public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt
   private static final long serialVersionUID = 1464223135325402830L;
 
   @Override
-  @SuppressWarnings("rawtypes")
-  public void prepare(Map stormConf, TopologyContext context) {
+  public void prepare(Map<String, Object> topoConf, TopologyContext context) {
   }
 
   @Override

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/utils/ConfigUtils.java
Patch:
@@ -139,7 +139,8 @@ public static void applyOverridesToStateManagerConfig(Path overridesPath,
     ) {
       stateManagerReader = Files.newBufferedReader(stateManagerPath);
 
-      final Map<String, Object> overrides = (Map<String, Object>) new Yaml(new SafeConstructor()).load(overrideReader);
+      final Map<String, Object> overrides =
+          (Map<String, Object>) new Yaml(new SafeConstructor()).load(overrideReader);
       final Map<String, Object> stateMangerConfig =
           (Map<String, Object>) new Yaml(new SafeConstructor()).load(stateManagerReader);
       // update the state manager config with the overrides

File: heron/api/src/java/org/apache/heron/api/metric/MultiAssignableMetric.java
Patch:
@@ -21,9 +21,10 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class MultiAssignableMetric<T extends Number> implements IMetric<Map<String, T>> {
-  private final Map<String, AssignableMetric<T>> value = new HashMap<>();
+  private final Map<String, AssignableMetric<T>> value = new ConcurrentHashMap<>();
   private T initialValue;
 
   public MultiAssignableMetric(T initialValue) {

File: heron/api/src/java/org/apache/heron/api/metric/MultiCountMetric.java
Patch:
@@ -21,9 +21,10 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class MultiCountMetric implements IMetric<Map<String, Long>> {
-  private Map<String, CountMetric> value = new HashMap<>();
+  private Map<String, CountMetric> value = new ConcurrentHashMap<>();
 
   public MultiCountMetric() {
   }

File: heron/api/src/java/org/apache/heron/api/metric/MultiReducedMetric.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 /*
  * A reduce metric that can hold multiple scoped values.
@@ -29,7 +30,7 @@
  * @param <V> type of reduced value
  */
 public class MultiReducedMetric<T, U, V> implements IMetric<Map<String, V>> {
-  private Map<String, ReducedMetric<T, U, V>> value = new HashMap<>();
+  private Map<String, ReducedMetric<T, U, V>> value = new ConcurrentHashMap<>();
   private IReducer<T, U, V> reducer;
 
   public MultiReducedMetric(IReducer<T, U, V> reducer) {

File: heron/api/src/java/org/apache/heron/api/tuple/Fields.java
Patch:
@@ -22,16 +22,16 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class Fields implements Iterable<String>, Serializable {
   private static final long serialVersionUID = -1045737418722082345L;
 
   private List<String> fields;
-  private Map<String, Integer> mIndex = new HashMap<String, Integer>();
+  private Map<String, Integer> mIndex = new ConcurrentHashMap<String, Integer>();
 
   public Fields(String... pFields) {
     this(Arrays.asList(pFields));

File: heron/common/src/java/org/apache/heron/common/utils/metrics/MetricsCollector.java
Patch:
@@ -22,10 +22,10 @@
 
 import java.time.Duration;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Logger;
 
 import org.apache.heron.api.metric.CumulativeCountMetric;
@@ -53,8 +53,8 @@ public class MetricsCollector implements IMetricsRegister {
 
   public MetricsCollector(WakeableLooper runnableToGatherMetrics,
                           Communicator<Metrics.MetricPublisherPublishMessage> queue) {
-    metrics = new HashMap<>();
-    timeBucketToMetricNames = new HashMap<>();
+    metrics = new ConcurrentHashMap<>();
+    timeBucketToMetricNames = new ConcurrentHashMap<>();
     this.queue = queue;
     this.runnableToGatherMetrics = runnableToGatherMetrics;
     metricCollectionCount = new CumulativeCountMetric();

File: heron/common/src/java/org/apache/heron/common/utils/misc/PhysicalPlanHelper.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Logger;
 
 import org.apache.heron.api.Config;
@@ -101,7 +102,7 @@ public PhysicalPlanHelper(PhysicalPlans.PhysicalPlan pplan, String instanceId) {
     }
 
     // setup outputSchema
-    outputSchema = new HashMap<String, Integer>();
+    outputSchema = new ConcurrentHashMap<String, Integer>();
     List<TopologyAPI.OutputStream> outputs;
     if (mySpout != null) {
       outputs = mySpout.getOutputsList();

File: heron/common/src/java/org/apache/heron/common/utils/topology/GeneralTopologyContextImpl.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.heron.api.Config;
 import org.apache.heron.api.generated.TopologyAPI;
@@ -63,8 +64,8 @@ public GeneralTopologyContextImpl(Map<String, Object> clusterConfig,
     this.topology = topology;
     this.topologyConfig = new HashMap<>(clusterConfig);
     this.taskToComponentMap = taskToComponentMap;
-    this.inputs = new HashMap<>();
-    this.outputs = new HashMap<>();
+    this.inputs = new ConcurrentHashMap<>();
+    this.outputs = new ConcurrentHashMap<>();
     this.componentsOutputFields = new HashMap<>();
 
     for (int i = 0; i < this.topology.getSpoutsCount(); ++i) {

File: storm-compatibility/src/java/backtype/storm/metric/api/MultiCountMetric.java
Patch:
@@ -20,9 +20,10 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class MultiCountMetric implements IMetric {
-  private Map<String, CountMetric> value = new HashMap<>();
+  private Map<String, CountMetric> value = new ConcurrentHashMap<>();
 
   public MultiCountMetric() {
   }

File: storm-compatibility/src/java/backtype/storm/metric/api/MultiReducedMetric.java
Patch:
@@ -20,10 +20,11 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 @SuppressWarnings("rawtypes")
 public class MultiReducedMetric implements IMetric {
-  private Map<String, ReducedMetric> value = new HashMap<>();
+  private Map<String, ReducedMetric> value = new ConcurrentHashMap<>();
   private IReducer reducer;
 
   public MultiReducedMetric(IReducer reducer) {

File: storm-compatibility/src/java/org/apache/storm/metric/api/MultiCountMetric.java
Patch:
@@ -20,9 +20,10 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class MultiCountMetric implements IMetric {
-  private Map<String, CountMetric> value = new HashMap<>();
+  private Map<String, CountMetric> value = new ConcurrentHashMap<>();
 
   public MultiCountMetric() {
   }

File: storm-compatibility/src/java/org/apache/storm/metric/api/MultiReducedMetric.java
Patch:
@@ -20,10 +20,11 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 @SuppressWarnings("rawtypes")
 public class MultiReducedMetric implements IMetric {
-  private Map<String, ReducedMetric> value = new HashMap<>();
+  private Map<String, ReducedMetric> value = new ConcurrentHashMap<>();
   private IReducer reducer;
 
   public MultiReducedMetric(IReducer reducer) {

File: eco/tests/java/org/apache/heron/eco/submit/EcoSubmitterTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -37,6 +38,7 @@
 import static org.mockito.internal.verification.VerificationModeFactory.times;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({StormSubmitter.class, HeronSubmitter.class})
 public class EcoSubmitterTest {
 

File: heron/api/tests/java/org/apache/heron/api/HeronSubmitterTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -49,6 +50,7 @@
  * This class covers HeronSubmitter Unit Tests for both positive and negative cases
  */
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 public class HeronSubmitterTest {
 
   @Rule

File: heron/common/tests/java/org/apache/heron/common/basics/FileUtilsTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Matchers;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -39,6 +40,7 @@
  * FileUtils Tester.
  */
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(FileUtils.class)
 public class FileUtilsTest {
 

File: heron/downloaders/tests/java/org/apache/heron/downloader/DLDownloaderTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -52,6 +53,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(Extractor.class)
 public class DLDownloaderTest {
 

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/LaunchRunnerTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -69,6 +70,7 @@
 
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(LauncherUtils.class)
 public class LaunchRunnerTest {
   private static final String TOPOLOGY_NAME = "testTopology";

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/RuntimeManagerMainTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -56,6 +57,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore({"jdk.internal.reflect.*", "jdk.internal.loader.*"})
 public class RuntimeManagerMainTest {
   private static final String TOPOLOGY_NAME = "topologyName";
   private static final String TOPOLOGY_ID = "topologyId";

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/RuntimeManagerRunnerTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -57,6 +58,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 public class RuntimeManagerRunnerTest {
   private static final String TOPOLOGY_NAME = "testTopology";
   private final Config config = mock(Config.class);

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.rules.ExpectedException;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -68,6 +69,7 @@
 
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({
     TopologyUtils.class, ReflectionUtils.class, SchedulerUtils.class, TopologyAPI.Topology.class})
 public class SchedulerMainTest {

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/SubmitterMainTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -59,6 +60,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({LauncherUtils.class, ReflectionUtils.class})
 public class SubmitterMainTest {
   private static final String TOPOLOGY_NAME = "topologyName";

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/UpdateTopologyManagerTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -66,6 +67,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 public class UpdateTopologyManagerTest {
 
   private static final String TOPOLOGY_NAME = "topologyName";

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/client/HttpServiceSchedulerClientTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -36,6 +37,7 @@
 import org.apache.heron.spi.utils.NetworkUtils;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(NetworkUtils.class)
 public class HttpServiceSchedulerClientTest {
   private static final String TOPOLOGY_NAME = "topologyName";

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/client/SchedulerClientFactoryTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -36,6 +37,7 @@
 import org.apache.heron.spi.utils.ReflectionUtils;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 public class SchedulerClientFactoryTest {
   private static final String TOPOLOGY_NAME = "shiwei_0924_jiayou";
 

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/dryrun/SubmitDryRunRenderTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -44,6 +45,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(TopologyAPI.Topology.class)
 public class SubmitDryRunRenderTest {
 

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/dryrun/UpdateDryRunRenderTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -45,6 +46,7 @@
 import static org.junit.Assert.assertEquals;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(TopologyAPI.Topology.class)
 public class UpdateDryRunRenderTest {
 

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/utils/LauncherUtilsTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -40,6 +41,7 @@
 import org.apache.heron.spi.utils.ReflectionUtils;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({ReflectionUtils.class, TopologyUtils.class, TopologyAPI.Topology.class})
 public class LauncherUtilsTest {
   @Test

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/utils/SchedulerUtilsTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -44,6 +45,7 @@
 import static org.mockito.Mockito.eq;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({FileUtils.class, ShellUtils.class, SchedulerUtils.class})
 public class SchedulerUtilsTest {
   private static final String WORKING_DIR = "home";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/aurora/AuroraLauncherTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -33,6 +34,7 @@
 import org.apache.heron.spi.scheduler.IScheduler;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(LauncherUtils.class)
 public class AuroraLauncherTest {
   @Test

File: heron/schedulers/tests/java/org/apache/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.mockito.Matchers;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -66,6 +67,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({TokenSub.class, Config.class})
 public class AuroraSchedulerTest {
   private static final String AURORA_PATH = "path.aurora";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/kubernetes/KubernetesLauncherTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -33,6 +34,7 @@
 import org.apache.heron.spi.scheduler.IScheduler;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(LauncherUtils.class)
 public class KubernetesLauncherTest {
 

File: heron/schedulers/tests/java/org/apache/heron/scheduler/local/LocalLauncherTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -34,6 +35,7 @@
 import org.apache.heron.spi.packing.PackingPlan;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(LocalContext.class)
 public class LocalLauncherTest {
   private static final String TOPOLOGY_NAME = "testTopology";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/marathon/MarathonControllerTest.java
Patch:
@@ -30,13 +30,15 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import org.apache.heron.spi.utils.NetworkUtils;
 
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(NetworkUtils.class)
 public class MarathonControllerTest {
   private static final String MARATHON_URI = "http://marathon.uri:8080";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/marathon/MarathonLauncherTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -33,6 +34,7 @@
 import org.apache.heron.spi.scheduler.IScheduler;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(LauncherUtils.class)
 public class MarathonLauncherTest {
 

File: heron/schedulers/tests/java/org/apache/heron/scheduler/nomad/NomadSchedulerTest.java
Patch:
@@ -58,8 +58,8 @@
 import static org.mockito.Matchers.anyVararg;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore({"javax.net.ssl.*", "jdk.internal.reflect.*"})
 @PrepareForTest({NomadScheduler.class, Job.class, SchedulerUtils.class})
-@PowerMockIgnore("javax.net.ssl.*")
 public class NomadSchedulerTest {
   private static final Logger LOG = Logger.getLogger(NomadSchedulerTest.class.getName());
 

File: heron/schedulers/tests/java/org/apache/heron/scheduler/slurm/SlurmControllerTest.java
Patch:
@@ -32,12 +32,14 @@
 import org.junit.runner.RunWith;
 import org.mockito.Matchers;
 import org.mockito.Mockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import org.apache.heron.spi.utils.ShellUtils;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({SlurmContext.class, ShellUtils.class})
 public class SlurmControllerTest {
   private static final String WORKING_DIRECTORY = "workingDirectory";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/slurm/SlurmLauncherTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -37,6 +38,7 @@
 import org.apache.heron.spi.scheduler.IScheduler;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({SlurmContext.class, LauncherUtils.class})
 public class SlurmLauncherTest {
   private static final String TOPOLOGY_NAME = "testTopology";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/slurm/SlurmSchedulerTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.mockito.Matchers;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -42,6 +43,7 @@
 import org.apache.heron.spi.packing.PackingPlan;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({SlurmContext.class, SchedulerUtils.class})
 public class SlurmSchedulerTest {
   private static final String SLURM_PATH = "path.heron";

File: heron/schedulers/tests/java/org/apache/heron/scheduler/yarn/HeronExecutorTaskTest.java
Patch:
@@ -48,7 +48,7 @@
 import org.apache.reef.runtime.common.files.REEFFileNames;
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.swing.*")
+@PowerMockIgnore({"javax.swing.*", "jdk.internal.reflect.*"})
 public class HeronExecutorTaskTest {
   @Test
   public void providesConfigsNeededForExecutorCmd() throws Exception {

File: heron/schedulers/tests/java/org/apache/heron/scheduler/yarn/HeronMasterDriverTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -74,6 +75,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 public class HeronMasterDriverTest {
   private EvaluatorRequestor mockRequestor;
   private HeronMasterDriver driver;

File: heron/spi/tests/java/org/apache/heron/spi/common/ConfigLoaderTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -40,6 +41,7 @@
 import static org.mockito.Mockito.times;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(ConfigLoader.class)
 public class ConfigLoaderTest {
   private static final String TEST_DATA_PATH =

File: heron/spi/tests/java/org/apache/heron/spi/common/ConfigTest.java
Patch:
@@ -25,15 +25,16 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(ConfigLoader.class)
-
 public class ConfigTest {
   private static final String TEST_DATA_PATH =
       "/__main__/heron/spi/tests/java/org/apache/heron/spi/common/testdata";

File: heron/spi/tests/java/org/apache/heron/spi/utils/NetworkUtilsTest.java
Patch:
@@ -42,15 +42,16 @@
 import org.mockito.Matchers;
 import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import org.apache.heron.common.basics.Pair;
 import org.apache.heron.common.basics.SysUtils;
 
 @RunWith(PowerMockRunner.class)
-@PrepareForTest({
-    SysUtils.class, NetworkUtils.class, ShellUtils.class})
+@PowerMockIgnore("jdk.internal.reflect.*")
+@PrepareForTest({SysUtils.class, NetworkUtils.class, ShellUtils.class})
 public class NetworkUtilsTest {
   private static final Logger LOG = Logger.getLogger(NetworkUtilsTest.class.getName());
 

File: heron/statefulstorages/tests/java/org/apache/heron/statefulstorage/dlog/DlogStorageTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -58,6 +59,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({Namespace.class, CheckpointManager.InstanceStateCheckpoint.class})
 public class DlogStorageTest {
 

File: heron/statefulstorages/tests/java/org/apache/heron/statefulstorage/hdfs/HDFSStorageTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -56,6 +57,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest({FileSystem.class, CheckpointManager.InstanceStateCheckpoint.class})
 public class HDFSStorageTest {
 

File: heron/statefulstorages/tests/java/org/apache/heron/statefulstorage/localfs/LocalFileSystemStorageTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -49,6 +50,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(FileUtils.class)
 public class LocalFileSystemStorageTest {
   private PhysicalPlans.Instance instance;

File: heron/statemgrs/tests/java/org/apache/heron/statemgr/localfs/LocalFileSystemStateManagerTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -62,6 +63,7 @@
  * LocalFileSystemStateManager Tester.
  */
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(FileUtils.class)
 public class LocalFileSystemStateManagerTest {
 

File: heron/statemgrs/tests/java/org/apache/heron/statemgr/zookeeper/ZkUtilsTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
@@ -43,6 +44,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(PowerMockRunner.class)
+@PowerMockIgnore("jdk.internal.reflect.*")
 @PrepareForTest(NetworkUtils.class)
 public class ZkUtilsTest {
 

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/KubernetesScheduler.java
Patch:
@@ -50,7 +50,7 @@ public class KubernetesScheduler implements IScheduler, IScalable {
   private UpdateTopologyManager updateTopologyManager;
 
   protected KubernetesController getController() {
-    return new AppsV1beta1Controller(configuration, runtimeConfiguration);
+    return new AppsV1Controller(configuration, runtimeConfiguration);
   }
 
   @Override

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/KubernetesUtils.java
Patch:
@@ -23,15 +23,15 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.squareup.okhttp.Response;
-
 import org.apache.heron.common.basics.ByteAmount;
 import org.apache.heron.common.basics.SysUtils;
 import org.apache.heron.scheduler.utils.Runtime;
 import org.apache.heron.spi.common.Config;
 import org.apache.heron.spi.common.Context;
 
-import io.kubernetes.client.ApiException;
+import io.kubernetes.client.openapi.ApiException;
+
+import okhttp3.Response;
 
 final class KubernetesUtils {
 

File: heron/schedulers/tests/java/org/apache/heron/scheduler/kubernetes/VolumesTests.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.apache.heron.spi.common.Config;
 
-import io.kubernetes.client.models.V1Volume;
+import io.kubernetes.client.openapi.models.V1Volume;
 
 public class VolumesTests {
 

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/utils/Logging.java
Patch:
@@ -44,7 +44,7 @@ public static void configure(boolean verbose) {
 
     final Level level = verbose ? Level.ALL : Level.INFO;
     // configure the root heron logger and it's handlers
-    Logger logger = Logger.getLogger("org.apache");
+    Logger logger = Logger.getLogger("");
     for (Handler handler : logger.getHandlers()) {
       handler.setLevel(level);
     }

File: heron/metricscachemgr/src/java/org/apache/heron/metricscachemgr/MetricsCacheManager.java
Patch:
@@ -342,7 +342,8 @@ public static void main(String[] args) throws Exception {
     LOG.info("System Config: " + systemConfig);
 
     // read sink config file
-    MetricsSinksConfig sinksConfig = new MetricsSinksConfig(metricsSinksConfigFilename);
+    MetricsSinksConfig sinksConfig = new MetricsSinksConfig(metricsSinksConfigFilename,
+                                                            overrideConfigFilename);
     LOG.info("Sinks Config: " + sinksConfig.toString());
 
     // build config from cli

File: heron/metricscachemgr/tests/java/org/apache/heron/metricscachemgr/metricscache/MetricsCacheTest.java
Patch:
@@ -42,7 +42,7 @@ public void testMetricCache() throws IOException {
     SystemConfig systemConfig = SystemConfig.newBuilder(true)
         .putAll(CONFIG_SYSTEM_PATH, true)
         .build();
-    MetricsSinksConfig sinksConfig = new MetricsSinksConfig(CONFIG_SINK_PATH);
+    MetricsSinksConfig sinksConfig = new MetricsSinksConfig(CONFIG_SINK_PATH, null);
 
     // initialize metric cache, except looper
     MetricsCache mc = new MetricsCache(systemConfig, sinksConfig, new NIOLooper());

File: heron/metricsmgr/src/java/org/apache/heron/metricsmgr/MetricsManager.java
Patch:
@@ -382,14 +382,15 @@ public static void main(String[] args) throws Exception {
     LoggingHelper.addLoggingHandler(new ErrorReportLoggingHandler());
 
     LOG.info(String.format("Starting Metrics Manager for topology %s with topologyId %s with "
-            + "Metrics Manager Id %s, Merics Manager Port: %d, for cluster/role/env %s.",
+            + "Metrics Manager Id %s, Metrics Manager Port: %d, for cluster/role/env %s.",
         topologyName, topologyId, metricsmgrId, metricsPort,
         String.format("%s/%s/%s", cluster, role, environment)));
 
     LOG.info("System Config: " + systemConfig);
 
     // Populate the config
-    MetricsSinksConfig sinksConfig = new MetricsSinksConfig(metricsSinksConfigFilename);
+    MetricsSinksConfig sinksConfig = new MetricsSinksConfig(metricsSinksConfigFilename,
+                                                            overrideConfigFilename);
 
     LOG.info("Sinks Config:" + sinksConfig.toString());
 

File: heron/schedulers/src/java/org/apache/heron/scheduler/nomad/NomadScheduler.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.heron.scheduler.nomad;
 
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
@@ -581,8 +580,9 @@ Resource getHomogeneousContainerResource(PackingPlan homogeneousPackingPlan) {
   static String getPrometheusMetricsFile(Config config) {
     MetricsSinksConfig metricsSinksConfig;
     try {
-      metricsSinksConfig = new MetricsSinksConfig(Context.metricsSinksFile(config));
-    } catch (FileNotFoundException e) {
+      metricsSinksConfig = new MetricsSinksConfig(Context.metricsSinksFile(config),
+                                                  Context.overrideFile(config));
+    } catch (IOException e) {
       return null;
     }
 

File: storm-compatibility/src/java/backtype/storm/utils/ConfigUtils.java
Patch:
@@ -78,6 +78,9 @@ public static Config translateComponentConfig(Map stormConfig) {
   }
 
   private static void doSerializationTranslation(Config heronConfig) {
+    // Serialization config is handled by HeronPluggableSerializerDelegate therefore the storm
+    // configs are used here instead of translating to the Heron configs. Storm relies on Kryo but
+    // Heron abstracts serailizers differently. KryoSerializer is one of the PluggableSerializer.
     if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_FALL_BACK_ON_JAVA_SERIALIZATION)
         && (heronConfig.get(backtype.storm.Config.TOPOLOGY_FALL_BACK_ON_JAVA_SERIALIZATION)
         instanceof Boolean)

File: storm-compatibility/src/java/org/apache/storm/utils/ConfigUtils.java
Patch:
@@ -77,6 +77,9 @@ public static Config translateComponentConfig(Map stormConfig) {
   }
 
   private static void doSerializationTranslation(Config heronConfig) {
+    // Serialization config is handled by HeronPluggableSerializerDelegate therefore the storm
+    // configs are used here instead of translating to the Heron configs. Storm relies on Kryo but
+    // Heron abstracts serailizers differently. KryoSerializer is one of the PluggableSerializer.
     if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_FALL_BACK_ON_JAVA_SERIALIZATION)
         && (heronConfig.get(org.apache.storm.Config.TOPOLOGY_FALL_BACK_ON_JAVA_SERIALIZATION)
         instanceof Boolean)

File: eco/tests/java/org/apache/heron/eco/builder/heron/HeronStreamBuilderTest.java
Patch:
@@ -307,7 +307,8 @@ public void buildStreams_SpoutToIStatefulWindowedBolt() throws ClassNotFoundExce
     verify(mockContext).getTopologyDefinition();
     verify(mockContext).getBolt(eq(to));
     verify(mockDefinition).parallelismForBolt(eq(to));
-    verify(mockTopologyBuilder).setBolt(eq(to), eq(mockIStatefulWindowedBolt), eq(iRichBoltParallelism));
+    verify(mockTopologyBuilder).setBolt(eq(to), eq(mockIStatefulWindowedBolt),
+        eq(iRichBoltParallelism));
     verify(mockBoltDeclarer).customGrouping(eq(from), eq(streamId), eq(mockCustomStreamGrouping));
     verify(mockContext).setStreams(anyMap());
     verify(mockDefinition).getStreams();

File: heron/packing/src/java/org/apache/heron/packing/roundrobin/RoundRobinPacking.java
Patch:
@@ -365,7 +365,9 @@ private Map<Integer, List<InstanceId>> getRoundRobinAllocation(
     Map<Integer, List<InstanceId>> allocation = new HashMap<>();
     int totalInstance = TopologyUtils.getTotalInstance(parallelismMap);
     if (numContainer > totalInstance) {
-      throw new RuntimeException("More containers allocated than instance.");
+      throw new RuntimeException(
+          String.format("More containers (%d) allocated than instances (%d).",
+              numContainer, totalInstance));
     }
 
     for (int i = 1; i <= numContainer; ++i) {

File: tools/java/src/org/apache/bazel/cppcheck/CppCheck.java
Patch:
@@ -86,7 +86,8 @@ public static void main(String[] args) throws IOException {
       commandBuilder.add("--std=c++11");
       commandBuilder.add("--language=c++");
       commandBuilder.add("--error-exitcode=1"); // exit with 1 on error
-      commandBuilder.add("--library=googletest"); // use googletest cfg so that TEST_F is not considered syntax error
+      // use googletest cfg so that TEST_F is not considered syntax error
+      commandBuilder.add("--library=googletest");
       commandBuilder.addAll(sourceFiles);
       runChecker(commandBuilder);
 
@@ -113,7 +114,7 @@ private static void runChecker(List<String> command) throws IOException {
 
     if (cppcheck.exitValue() == 1) {
       LOG.warning("cppcheck detected bad cpp files.");
-      System.exit(1);
+      throw new RuntimeException("cppcheck detected bad cpp files.");
     }
 
     if (cppcheck.exitValue() != 0) {

File: heron/io/dlog/tests/java/org/apache/heron/dlog/DLInputStreamTest.java
Patch:
@@ -54,7 +54,7 @@ public void testReadEos() throws Exception {
     byte[] b = new byte[1];
     DLInputStream in = new DLInputStream(dlm);
     assertEquals("Should return 0 when reading an empty eos stream",
-        0, in.read(b, 0, 1));
+        -1, in.read(b, 0, 1));
     assertEquals("Should return -1 when reading an empty eos stream",
         -1, in.read(b, 0, 1));
   }

File: heron/statefulstorages/tests/java/org/apache/heron/statefulstorage/dlog/DlogStorageTest.java
Patch:
@@ -19,7 +19,6 @@
 
 package org.apache.heron.statefulstorage.dlog;
 
-import java.io.InputStream;
 import java.net.URI;
 import java.util.HashMap;
 import java.util.List;
@@ -40,6 +39,7 @@
 import org.apache.distributedlog.api.DistributedLogManager;
 import org.apache.distributedlog.api.namespace.Namespace;
 import org.apache.distributedlog.api.namespace.NamespaceBuilder;
+import org.apache.heron.dlog.DLInputStream;
 import org.apache.heron.proto.ckptmgr.CheckpointManager;
 import org.apache.heron.proto.system.PhysicalPlans;
 import org.apache.heron.spi.statefulstorage.Checkpoint;
@@ -118,7 +118,7 @@ public void testStore() throws Exception {
 
   @Test
   public void testRestore() throws Exception {
-    InputStream mockInputStream = mock(InputStream.class);
+    DLInputStream mockInputStream = mock(DLInputStream.class);
     doReturn(mockInputStream).when(dlogStorage).openInputStream(anyString());
 
     PowerMockito.spy(CheckpointManager.InstanceStateCheckpoint.class);

File: eco/src/java/org/apache/heron/eco/Eco.java
Patch:
@@ -65,7 +65,7 @@ public Eco(EcoParser ecoParser, EcoSubmitter ecoSubmitter) {
    * @param fileInputStream  The input stream associated with ECO topology definition file
    * @param propertiesFile  The optional key-value property file for optional property substitution.
    * @param envFilter The optional flag to tell ECO to perform environment variable substitution
-   * @throws Exception
+   * @throws Exception the exception thrown
    */
   public void submit(FileInputStream fileInputStream,
                      FileInputStream propertiesFile, boolean envFilter)

File: heron/api/src/java/org/apache/heron/streamlet/Builder.java
Patch:
@@ -43,15 +43,15 @@ static Builder newBuilder() {
    * Creates a new Streamlet using the underlying generator
    * @param generator The generator that generates the tuples of the streamlet
    * @param <R>
-   * @return
+   * @return the new streamlet
    */
   <R> Streamlet<R> newSource(Source<R> generator);
 
   /**
    * Creates a new Streamlet using the provided spout
    * @param spout The spout that emits the tuples of the streamlet
    * @param <R>
-   * @return
+   * @return the new streamlet
    */
   <R> Streamlet<R> newSource(IRichSpout spout);
 }

File: heron/api/src/java/org/apache/heron/streamlet/impl/StreamletShadow.java
Patch:
@@ -44,7 +44,7 @@
  * object(stream):
  *
  * StreamletImpl shadow = new StreamletShadow(stream) {
- *   @Override
+ *   Override
  *   public String getStreamId() {
  *     return "test";
  *   }

File: heron/metricsmgr/src/java/org/apache/heron/metricsmgr/MetricsUtil.java
Patch:
@@ -36,7 +36,7 @@ static String createSource(String host, int port, String component, String insta
    * So splitting the source would be an array with 3 elements:
    * ["host:port", componentName, instanceId]
    * @param record
-   * @return
+   * @return the split record source
    */
   public static String[] splitRecordSource(MetricsRecord record) {
     return record.getSource().split(SOURCE_DELIMITER);

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/SchedulerMain.java
Patch:
@@ -316,9 +316,9 @@ private static void setupLogging(Config config) throws IOException {
   /**
    * Get the http server for receiving scheduler requests
    *
-   * @param runtime, the runtime configuration
-   * @param scheduler, an instance of the scheduler
-   * @param port, the port for scheduler to listen on
+   * @param runtime the runtime configuration
+   * @param scheduler an instance of the scheduler
+   * @param port the port for scheduler to listen on
    * @return an instance of the http server
    */
   protected SchedulerServer getServer(

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/dryrun/DryRunRender.java
Patch:
@@ -31,7 +31,7 @@ public interface DryRunRender {
 
   /**
    * Render dry-run response
-   * @return
+   * @return the string
    */
   String render();
 }

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/dryrun/FormatterUtils.java
Patch:
@@ -148,7 +148,7 @@ public final int getLength() {
     /**
      * Convert Cell to String
      * @param rich if render in rich format
-     * @return
+     * @return the cell string
      */
     public String toString(boolean rich) {
       StringBuilder builder = new StringBuilder();

File: heron/schedulers/src/java/org/apache/heron/scheduler/aurora/AuroraController.java
Patch:
@@ -35,6 +35,7 @@ public interface AuroraController {
   /**
    * Restarts a given container, or the entire job if containerId is null
    * @param containerId ID of container to restart, or entire job if null
+   * @return the boolean return value
    */
   boolean restart(Integer containerId);
 

File: heron/spi/src/java/org/apache/heron/spi/scheduler/ILauncher.java
Patch:
@@ -35,6 +35,8 @@ public interface ILauncher extends AutoCloseable {
    * will be passed from submitter main. Config will contain information that launcher may use
    * to setup scheduler and other parameters required by launcher to contact
    * services which will launch scheduler.
+   * @param config the config
+   * @param runtime the runtime
    */
   void initialize(Config config, Config runtime);
 

File: storm-compatibility/src/java/backtype/storm/task/SpoutTopologyContext.java
Patch:
@@ -30,13 +30,15 @@ public SpoutTopologyContext(org.apache.heron.api.topology.TopologyContext delega
 
   /**
    * Gets the Maximum Spout Pending value for this instance of spout.
+   * @return Maximum Spout Pending value for this instance of spout
    */
   public Long getMaxSpoutPending() {
     throw new RuntimeException("Heron does not support Auto MSP");
   }
 
   /**
    * Sets the Maximum Spout Pending value for this instance of spout
+   * @param maxSpoutPending the max spout pending value
    */
   public void setMaxSpoutPending(Long maxSpoutPending) {
     throw new RuntimeException("Heron does not support Auto MSP");

File: heron/downloaders/src/java/org/apache/heron/downloader/DLDownloader.java
Patch:
@@ -64,6 +64,9 @@ public void download(URI uri, Path destination) throws Exception {
         parentName,
         uri.getQuery(),
         uri.getFragment());
+
+    CONF.addProperty("bkc.allowShadedLedgerManagerFactoryClass", true);
+
     Namespace ns = builder
         .clientId("heron-downloader")
         .conf(CONF)

File: heron/io/dlog/src/java/org/apache/heron/dlog/Util.java
Patch:
@@ -126,10 +126,12 @@ private static Pair<URI, String> getParentURI(URI uri) throws URISyntaxException
   }
 
   private static Namespace openNamespace(URI uri) throws IOException {
+    DistributedLogConfiguration distributedLogConfiguration = new DistributedLogConfiguration();
+    distributedLogConfiguration.addProperty("bkc.allowShadedLedgerManagerFactoryClass", true);
     return NamespaceBuilder.newBuilder()
         .uri(uri)
         .clientId("dlog-util")
-        .conf(new DistributedLogConfiguration())
+        .conf(distributedLogConfiguration)
         .build();
   }
 

File: heron/statefulstorages/src/java/org/apache/heron/statefulstorage/dlog/DlogStorage.java
Patch:
@@ -105,6 +105,8 @@ Namespace initializeNamespace(URI uri) throws IOException {
         .setNumWorkerThreads(1)                           // use 1 worker thread
         .setBKClientNumberIOThreads(1);
 
+    conf.addProperty("bkc.allowShadedLedgerManagerFactoryClass", true);
+
     return this.nsBuilderSupplier.get()
         .clientId("heron-stateful-storage")
         .conf(conf)

File: heron/uploaders/src/java/org/apache/heron/uploader/dlog/DLUploader.java
Patch:
@@ -130,6 +130,8 @@ private void initializeNamespace(Config upConfig) throws IOException {
         .setAckQuorumSize(numReplicas)
         .setUseDaemonThread(true);                        // use daemon thread
 
+    conf.addProperty("bkc.allowShadedLedgerManagerFactoryClass", true);
+
     URI uri = URI.create(DLContext.dlTopologiesNamespaceURI(this.config));
     LOG.info(String.format(
         "Initializing distributedlog namespace for uploading topologies : %s",

File: heron/statemgrs/src/java/org/apache/heron/statemgr/FileSystemStateManager.java
Patch:
@@ -295,7 +295,7 @@ protected void doMain(String[] args, Config config)
     if (isTopologyRunning(topologyName).get()) {
       print("==> Topology %s found", topologyName);
       try {
-        print("==> Topology %s:", getTopology(null, topologyName).get());
+        print("==> Topology:\n%s", getTopology(null, topologyName).get());
       } catch (ExecutionException e) {
         print("Topology node not found %s", e.getMessage());
       }

File: heron/packing/src/java/org/apache/heron/packing/utils/PackingUtils.java
Patch:
@@ -40,7 +40,7 @@ public final class PackingUtils {
   public static final ByteAmount DEFAULT_CONTAINER_RAM_PADDING = ByteAmount.fromGigabytes(1);
   public static final ByteAmount DEFAULT_CONTAINER_DISK_PADDING = ByteAmount.fromGigabytes(1);
   public static final double DEFAULT_CONTAINER_CPU_PADDING = 1.0;
-  public static final int DEFAULT_MAX_NUM_INSTANCES_PER_CONTAINER = 4;
+  public static final int DEFAULT_MAX_NUM_INSTANCES_PER_CONTAINER = 10;
 
   private PackingUtils() {
   }

File: heron/packing/tests/java/org/apache/heron/packing/CommonPackingTests.java
Patch:
@@ -71,6 +71,7 @@ public void setUp() {
     // object Config and Topology objects. This is typically fine for packing tests since they don't
     // access the protobuf values.
     this.topologyConfig = new org.apache.heron.api.Config();
+    this.topologyConfig.setTopologyContainerMaxNumInstances(4);
     this.topology = getTopology(spoutParallelism, boltParallelism, topologyConfig);
 
     Config config = PackingTestUtils.newTestConfig(this.topology);

File: examples/src/java/org/apache/heron/examples/api/AckingTopology.java
Patch:
@@ -81,7 +81,8 @@ public static void main(String[] args) throws Exception {
         ExampleResources.getContainerDisk(spouts + bolts, 2));
     conf.setContainerRamRequested(
         ExampleResources.getContainerRam(spouts + bolts, 2));
-    conf.setContainerCpuRequested(1);
+    conf.setContainerCpuRequested(
+        ExampleResources.getContainerCpu(spouts + bolts, 2));
 
     // Set the number of workers or stream managers
     conf.setNumStmgrs(2);

File: examples/src/java/org/apache/heron/examples/api/ComponentJVMOptionsTopology.java
Patch:
@@ -75,7 +75,7 @@ public static void main(String[] args) throws Exception {
 
     // container resource configuration
     conf.setContainerDiskRequested(ByteAmount.fromGigabytes(2));
-    conf.setContainerRamRequested(ByteAmount.fromGigabytes(2));
+    conf.setContainerRamRequested(ByteAmount.fromGigabytes(3));
     conf.setContainerCpuRequested(2);
 
     // Specify the size of RAM padding to per container.

File: examples/src/java/org/apache/heron/examples/api/CustomGroupingTopology.java
Patch:
@@ -58,7 +58,7 @@ public static void main(String[] args) throws Exception {
 
     // container resource configuration
     conf.setContainerDiskRequested(ByteAmount.fromGigabytes(2));
-    conf.setContainerRamRequested(ByteAmount.fromGigabytes(2));
+    conf.setContainerRamRequested(ByteAmount.fromGigabytes(3));
     conf.setContainerCpuRequested(2);
 
     conf.setNumStmgrs(2);

File: examples/src/java/org/apache/heron/examples/api/ExclamationTopology.java
Patch:
@@ -71,7 +71,8 @@ public static void main(String[] args) throws Exception {
         ExampleResources.getContainerDisk(spouts + bolts, parallelism));
     conf.setContainerRamRequested(
         ExampleResources.getContainerRam(spouts + bolts, parallelism));
-    conf.setContainerCpuRequested(1);
+    conf.setContainerCpuRequested(
+        ExampleResources.getContainerCpu(spouts + bolts, parallelism));
 
     if (args != null && args.length > 0) {
       conf.setNumStmgrs(parallelism);

File: examples/src/java/org/apache/heron/examples/api/MultiSpoutExclamationTopology.java
Patch:
@@ -69,8 +69,8 @@ public static void main(String[] args) throws Exception {
 
     // container resource configuration
     conf.setContainerDiskRequested(ByteAmount.fromGigabytes(3));
-    conf.setContainerRamRequested(ByteAmount.fromGigabytes(2));
-    conf.setContainerCpuRequested(1);
+    conf.setContainerRamRequested(ByteAmount.fromGigabytes(5));
+    conf.setContainerCpuRequested(4);
 
     if (args != null && args.length > 0) {
       conf.setNumStmgrs(3);

File: examples/src/java/org/apache/heron/examples/api/MultiStageAckingTopology.java
Patch:
@@ -84,7 +84,8 @@ public static void main(String[] args) throws Exception {
         ExampleResources.getContainerDisk(3 * parallelism, parallelism));
     conf.setContainerRamRequested(
         ExampleResources.getContainerRam(3 * parallelism, parallelism));
-    conf.setContainerCpuRequested(1);
+    conf.setContainerCpuRequested(
+        ExampleResources.getContainerCpu(3 * parallelism, parallelism));
 
     if (args != null && args.length > 0) {
       conf.setNumStmgrs(parallelism);

File: examples/src/java/org/apache/heron/examples/api/SentenceWordCountTopology.java
Patch:
@@ -186,8 +186,8 @@ public static void main(String[] args) throws Exception {
 
     // container resource configuration
     conf.setContainerDiskRequested(ByteAmount.fromGigabytes(3));
-    conf.setContainerRamRequested(ByteAmount.fromGigabytes(3));
-    conf.setContainerCpuRequested(2);
+    conf.setContainerRamRequested(ByteAmount.fromGigabytes(4));
+    conf.setContainerCpuRequested(4);
 
     conf.setNumStmgrs(2);
 

File: examples/src/java/org/apache/heron/examples/api/StatefulWordCountTopology.java
Patch:
@@ -213,8 +213,9 @@ public static void main(String[] args) throws AlreadyAliveException, InvalidTopo
     conf.setContainerDiskRequested(
         ExampleResources.getContainerDisk(2 * parallelism, parallelism));
     conf.setContainerRamRequested(
-        ExampleResources.getContainerRam(2 * parallelism, parallelism));
-    conf.setContainerCpuRequested(2);
+        ExampleResources.getContainerRam(4 * parallelism, parallelism));
+    conf.setContainerCpuRequested(
+        ExampleResources.getContainerCpu(2 * parallelism, parallelism));
 
     HeronSubmitter.submitTopology(args[0], conf, builder.createTopology());
   }

File: examples/src/java/org/apache/heron/examples/api/TaskHookTopology.java
Patch:
@@ -83,8 +83,8 @@ public static void main(String[] args) throws Exception {
 
     // container resource configuration
     conf.setContainerDiskRequested(ByteAmount.fromGigabytes(2));
-    conf.setContainerRamRequested(ByteAmount.fromGigabytes(2));
-    conf.setContainerCpuRequested(2);
+    conf.setContainerRamRequested(ByteAmount.fromGigabytes(3));
+    conf.setContainerCpuRequested(3);
 
 
     conf.setNumStmgrs(2);

File: heron/api/src/java/org/apache/heron/streamlet/impl/streamlets/JoinStreamlet.java
Patch:
@@ -92,9 +92,9 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     windowCfg.applyTo(bolt);
     bldr.setBolt(getName(), bolt, getNumPartitions())
         .customGrouping(left.getName(), left.getStreamId(),
-            new JoinCustomGrouping<K, R>(leftKeyExtractor))
+            new JoinCustomGrouping<R, K>(leftKeyExtractor))
         .customGrouping(right.getName(), right.getStreamId(),
-            new JoinCustomGrouping<K, S>(rightKeyExtractor));
+            new JoinCustomGrouping<S, K>(rightKeyExtractor));
     return true;
   }
 }

File: heron/api/tests/java/org/apache/heron/streamlet/impl/operators/GeneralReduceByKeyAndWindowOperatorTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() {
   @Test
   @SuppressWarnings({"rawtypes", "unchecked"})
   public void testReduceByWindowOperator() {
-    GeneralReduceByKeyAndWindowOperator<String, KeyValue<String, Integer>, Integer> reduceOperator =
+    GeneralReduceByKeyAndWindowOperator<KeyValue<String, Integer>, String, Integer> reduceOperator =
         getReduceByWindowOperator(12);
 
     TupleWindow tupleWindow = getTupleWindow(3, 5);
@@ -106,9 +106,9 @@ private TupleWindow getTupleWindow(int nkeys, int count) {
 
 
   @SuppressWarnings({"rawtypes", "unchecked"})
-  private GeneralReduceByKeyAndWindowOperator<String, KeyValue<String, Integer>, Integer>
+  private GeneralReduceByKeyAndWindowOperator<KeyValue<String, Integer>, String, Integer>
         getReduceByWindowOperator(Integer identity) {
-    GeneralReduceByKeyAndWindowOperator<String, KeyValue<String, Integer>, Integer>
+    GeneralReduceByKeyAndWindowOperator<KeyValue<String, Integer>, String, Integer>
         reduceByWindowOperator = new GeneralReduceByKeyAndWindowOperator<>(
             x -> x.getKey(), identity, (o, o2) -> o + o2.getValue());
 

File: heron/api/tests/java/org/apache/heron/streamlet/impl/operators/ReduceByKeyAndWindowOperatorTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() {
   @Test
   @SuppressWarnings({"rawtypes", "unchecked"})
   public void testReduceByWindowOperator() {
-    ReduceByKeyAndWindowOperator<String, Integer, String> reduceOperator =
+    ReduceByKeyAndWindowOperator<String, String, Integer> reduceOperator =
         getReduceByWindowOperator();
 
     TupleWindow tupleWindow = getTupleWindow(3, 5);
@@ -106,8 +106,8 @@ private TupleWindow getTupleWindow(int nkeys, int count) {
 
 
   @SuppressWarnings({"rawtypes", "unchecked"})
-  private ReduceByKeyAndWindowOperator<String, Integer, String> getReduceByWindowOperator() {
-    ReduceByKeyAndWindowOperator<String, Integer, String> reduceByWindowOperator =
+  private ReduceByKeyAndWindowOperator<String, String, Integer> getReduceByWindowOperator() {
+    ReduceByKeyAndWindowOperator<String, String, Integer> reduceByWindowOperator =
         new ReduceByKeyAndWindowOperator<>(x -> x, x -> 1, (o, o2) -> o + o2);
 
     reduceByWindowOperator.prepare(new Config(), PowerMockito.mock(TopologyContext.class),

File: heron/common/src/java/org/apache/heron/common/basics/ByteAmount.java
Patch:
@@ -25,7 +25,9 @@
 public final class ByteAmount implements Comparable<ByteAmount> {
   private static final long MB = 1024L * 1024;
   private static final long GB = MB * 1024;
+  @SuppressWarnings("MathRoundIntLong")
   private static final long MAX_MB = Math.round(Long.MAX_VALUE / MB);
+  @SuppressWarnings("MathRoundIntLong")
   private static final long MAX_GB = Math.round(Long.MAX_VALUE / GB);
 
   public static final ByteAmount ZERO = ByteAmount.fromBytes(0);

File: heron/schedulers/src/java/org/apache/heron/scheduler/mesos/framework/LaunchableTask.java
Patch:
@@ -67,7 +67,7 @@ protected Protos.Resource scalarResource(String name, double value) {
 
     String role = "*";
     for (Protos.Resource resource : reservedResources) {
-      if (resource.getName() == name && resource.getScalar().getValue() >= value) {
+      if (resource.getName().equals(name) && resource.getScalar().getValue() >= value) {
         role = resource.getRole();
         break;
 
@@ -95,7 +95,7 @@ protected Protos.Resource rangeResource(String name, long begin, long end) {
 
     String role = "*";
     for (Protos.Resource resource : reservedResources) {
-      if (resource.getName() == name) {
+      if (resource.getName().equals(name)) {
         Protos.Value.Ranges ranges = resource.getRanges();
         for (Protos.Value.Range range : ranges.getRangeList()) {
           if (range.getBegin() <= begin && range.getEnd() >= end) {

File: heron/api/src/java/org/apache/heron/streamlet/impl/groupings/RemapCustomGrouping.java
Patch:
@@ -53,7 +53,7 @@ public void prepare(TopologyContext context, String component,
   public List<Integer> chooseTasks(List<Object> values) {
     List<Integer> ret = new ArrayList<>();
     R obj = (R) values.get(0);
-    List<Integer> targets = remapFn.apply(obj, ret.size());
+    List<Integer> targets = remapFn.apply(obj, taskIds.size());
     for (Integer target : targets) {
       ret.add(Utils.assignKeyToTask(target, taskIds));
     }

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/FilterOperator.java
Patch:
@@ -34,7 +34,7 @@
  * For every tuple that it encounters, the filter function is run
  * and the tuple is re-emitted if the predicate evaluates to true
  */
-public class FilterOperator<R> extends StreamletOperator {
+public class FilterOperator<R> extends StreamletOperator<R, R> {
   private static final long serialVersionUID = -4748646871471052706L;
   private SerializablePredicate<? super R> filterFn;
 

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/FlatMapOperator.java
Patch:
@@ -34,7 +34,7 @@
  * For every tuple, it applies the flatMapFunction, flattens the resulting
  * tuples and emits them
  */
-public class FlatMapOperator<R, T> extends StreamletOperator {
+public class FlatMapOperator<R, T> extends StreamletOperator<R, T> {
   private static final long serialVersionUID = -2418329215159618998L;
   private SerializableFunction<? super R, ? extends Iterable<? extends T>> flatMapFn;
 

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/GeneralReduceByKeyAndWindowOperator.java
Patch:
@@ -40,7 +40,7 @@
  * For every time window, the bolt goes over all the tuples in that window and applies the reduce
  * function grouped by keys. It emits a KeyedWindow, reduced Value KeyPairs as outputs
  */
-public class GeneralReduceByKeyAndWindowOperator<K, V, VR> extends StreamletWindowOperator {
+public class GeneralReduceByKeyAndWindowOperator<K, V, VR> extends StreamletWindowOperator<V, V> {
   private static final long serialVersionUID = 2833576046687752396L;
   private SerializableFunction<V, K> keyExtractor;
   private VR identity;

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/JoinOperator.java
Patch:
@@ -44,7 +44,7 @@
  * a config parameter. Also taken as parameters are which source is left and right.
  * This is needed for the semantics of outer/left/inner joins.
  */
-public class JoinOperator<K, V1, V2, VR> extends StreamletWindowOperator {
+public class JoinOperator<K, V1, V2, VR> extends StreamletWindowOperator<V1, VR> {
   private static final long serialVersionUID = 4875450390444745407L;
   private static final String LEFT_COMPONENT_NAME = "_streamlet_joinbolt_left_component_name_";
   private static final String RIGHT_COMPONENT_NAME = "_streamlet_joinbolt_right_component_name_";

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/MapOperator.java
Patch:
@@ -33,7 +33,7 @@
  * It takes in the mapFunction Function as the input.
  * For every tuple, it applies the mapFunction, and emits the resulting value
  */
-public class MapOperator<R, T> extends StreamletOperator {
+public class MapOperator<R, T> extends StreamletOperator<R, T> {
   private static final long serialVersionUID = -1303096133107278700L;
   private SerializableFunction<? super R, ? extends T> mapFn;
 

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/ReduceByKeyAndWindowOperator.java
Patch:
@@ -40,7 +40,7 @@
  * For every time window, the bolt goes over all the tuples in that window and applies the reduce
  * function grouped by keys. It emits a KeyedWindow, reduced Value KeyPairs as outputs
  */
-public class ReduceByKeyAndWindowOperator<K, V, R> extends StreamletWindowOperator {
+public class ReduceByKeyAndWindowOperator<K, V, R> extends StreamletWindowOperator<R, V> {
   private static final long serialVersionUID = 2833576046687750496L;
   private SerializableFunction<R, K> keyExtractor;
   private SerializableFunction<R, V> valueExtractor;

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/TransformOperator.java
Patch:
@@ -39,7 +39,7 @@
  * It calls the transformFunction setup/cleanup at the beginning/end of the
  * processing. And for every tuple, it applies the transformFunction, and emits the resulting value
  */
-public class TransformOperator<R, T> extends StreamletOperator
+public class TransformOperator<R, T> extends StreamletOperator<R, T>
     implements IStatefulComponent<Serializable, Serializable> {
   private static final long serialVersionUID = 429297144878185182L;
   private SerializableTransformer<? super R, ? extends T> serializableTransformer;

File: heron/api/src/java/org/apache/heron/streamlet/impl/operators/UnionOperator.java
Patch:
@@ -31,7 +31,7 @@
  * UnionOperator is the class that implements the union functionality.
  * Its a very simple bolt that re-emits every tuple that it sees.
  */
-public class UnionOperator<I> extends StreamletOperator {
+public class UnionOperator<I> extends StreamletOperator<I, I> {
   private static final long serialVersionUID = -7326832064961413315L;
   private OutputCollector collector;
 

File: heron/api/src/java/org/apache/heron/streamlet/impl/sinks/ComplexSink.java
Patch:
@@ -37,7 +37,7 @@
  * ConsumerSink is a very simple Sink that basically invokes a user supplied
  * consume function for every tuple.
  */
-public class ComplexSink<R> extends StreamletOperator
+public class ComplexSink<R> extends StreamletOperator<R, R>
     implements IStatefulComponent<Serializable, Serializable> {
   private static final long serialVersionUID = 8717991188885786658L;
   private Sink<R> sink;

File: heron/api/src/java/org/apache/heron/streamlet/impl/sinks/ConsumerSink.java
Patch:
@@ -32,7 +32,7 @@
  * ConsumerSink is a very simple Sink that basically invokes a user supplied
  * consume function for every tuple.
  */
-public class ConsumerSink<R> extends StreamletOperator {
+public class ConsumerSink<R> extends StreamletOperator<R, R> {
   private static final long serialVersionUID = 8716140142187667638L;
   private SerializableConsumer<R> consumer;
   private OutputCollector collector;

File: heron/api/src/java/org/apache/heron/streamlet/impl/sinks/LogSink.java
Patch:
@@ -32,7 +32,7 @@
  * LogSink is a very simple Bolt that implements the log functionality.
  * It basically logs every tuple.
  */
-public class LogSink<R> extends StreamletOperator {
+public class LogSink<R> extends StreamletOperator<R, R> {
   private static final long serialVersionUID = -6392422646613189818L;
   private static final Logger LOG = Logger.getLogger(LogSink.class.getName());
   private OutputCollector collector;

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/HealthManagerTest.java
Patch:
@@ -106,7 +106,7 @@ static class TestPolicy extends HealthPolicyImpl {
     private final MetricsProvider metricsProvider;
 
     @Inject
-    public TestPolicy(HealthPolicyConfig config,
+    TestPolicy(HealthPolicyConfig config,
                       ISchedulerClient schedulerClient,
                       SchedulerStateManagerAdaptor stateMgrAdaptor,
                       MetricsProvider metricsProvider) {

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/detectors/BackPressureDetectorTest.java
Patch:
@@ -44,7 +44,7 @@
 import static org.mockito.Mockito.when;
 
 public class BackPressureDetectorTest {
-  Instant now;
+  private Instant now;
 
   @Before
   public void setup() {
@@ -76,7 +76,7 @@ public void testConfigAndFilter() throws IOException {
 
     Assert.assertEquals(2, symptoms.size());
     SymptomsTable compSymptom = SymptomsTable.of(symptoms).type(SYMPTOM_COMP_BACK_PRESSURE.text());
-    Assert.assertEquals(1,compSymptom.size());
+    Assert.assertEquals(1, compSymptom.size());
     Assert.assertEquals(1, compSymptom.get().iterator().next().assignments().size());
 
     SymptomsTable instanceSymptom

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/resolvers/ScaleUpResolverTest.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.time.Instant;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -42,7 +41,6 @@
 import org.apache.heron.common.utils.topology.TopologyTests;
 import org.apache.heron.healthmgr.common.PackingPlanProvider;
 import org.apache.heron.healthmgr.common.PhysicalPlanProvider;
-import org.apache.heron.healthmgr.HealthManagerMetrics;
 import org.apache.heron.packing.roundrobin.RoundRobinPacking;
 import org.apache.heron.proto.scheduler.Scheduler.UpdateTopologyRequest;
 import org.apache.heron.proto.system.PhysicalPlans.PhysicalPlan;
@@ -96,7 +94,8 @@ public void testResolve() {
     ScaleUpResolver spyResolver = spy(resolver);
 
     doReturn(2).when(spyResolver).computeScaleUpFactor("bolt");
-    doReturn(currentPlan).when(spyResolver).buildNewPackingPlan(any(HashMap.class), eq(currentPlan));
+    doReturn(currentPlan).when(spyResolver)
+        .buildNewPackingPlan(any(HashMap.class), eq(currentPlan));
 
     Collection<Action> result = spyResolver.resolve(diagnosis);
     verify(scheduler, times(1)).updateTopology(any(UpdateTopologyRequest.class));

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/sensors/BackPressureSensorTest.java
Patch:
@@ -28,11 +28,9 @@
 import com.microsoft.dhalion.api.MetricsProvider;
 import com.microsoft.dhalion.core.Measurement;
 import com.microsoft.dhalion.core.MeasurementsTable;
-import com.microsoft.dhalion.policy.PoliciesExecutor;
 import com.microsoft.dhalion.policy.PoliciesExecutor.ExecutionContext;
 
 import org.junit.Test;
-import org.mockito.Mockito;
 
 import org.apache.heron.healthmgr.HealthManagerMetrics;
 import org.apache.heron.healthmgr.common.PackingPlanProvider;

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/sensors/ExecuteCountSensorTest.java
Patch:
@@ -61,7 +61,8 @@ public void providesBoltExecutionCountMetrics() {
 
     Collection<String> comps = Arrays.asList("bolt-1", "bolt-2");
     when(metricsProvider.getMeasurements(
-        any(Instant.class), eq(DEFAULT_METRIC_DURATION), eq(Collections.singletonList(metric)), eq(comps)))
+        any(Instant.class),
+        eq(DEFAULT_METRIC_DURATION), eq(Collections.singletonList(metric)), eq(comps)))
         .thenReturn(result);
 
     ExecuteCountSensor executeCountSensor

File: eco/tests/java/org/apache/heron/eco/builder/storm/StormSpoutBuilderTest.java
Patch:
@@ -116,7 +116,7 @@ public void testBuildSpouts_AllGood_BehavesAsExpected() throws ClassNotFoundExce
   private class MockSpout implements IRichSpout {
 
     @Override
-    public void open(Map<String, Object> conf,
+    public void open(Map conf,
                      TopologyContext context, SpoutOutputCollector collector) {
 
     }

File: eco/tests/java/org/apache/heron/eco/builder/storm/StormStreamBuilderTest.java
Patch:
@@ -315,7 +315,7 @@ public Map<String, Object> getComponentConfiguration() {
   @SuppressWarnings({"rawtypes", "unchecked", "serial"})
   private class MockIWindowedBolt implements IWindowedBolt {
     @Override
-    public void prepare(Map<String, Object> topoConf,
+    public void prepare(Map topoConf,
                         TopologyContext context, OutputCollector collector) {
 
     }

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/HealthManagerTest.java
Patch:
@@ -68,8 +68,9 @@ public void testInitialize() throws Exception {
         .build();
     when(adaptor.getSchedulerLocation(anyString())).thenReturn(schedulerLocation);
 
+    HealthManagerMetrics publishingMetrics = mock(HealthManagerMetrics.class);
     AbstractModule baseModule = HealthManager
-        .buildBaseModule("127.0.0.1", TrackerMetricsProvider.class.getName());
+        .buildBaseModule("127.0.0.1", TrackerMetricsProvider.class.getName(), publishingMetrics);
 
     HealthManager healthManager = new HealthManager(config, baseModule);
 

File: heron/api/src/java/org/apache/heron/api/Config.java
Patch:
@@ -286,13 +286,13 @@ public enum TopologyReliabilityMode {
   /**
    * Topology-specific environment properties to be added to an Heron instance.
    * This is added to the existing environment (that of the Heron instance).
-   * This variable contains Map<String, String>
+   * This variable contains Map&lt;String, String&gt;
    */
   public static final String TOPOLOGY_ENVIRONMENT = "topology.environment";
 
   /**
    * Timer events registered for a topology.
-   * This is a Map<String, Pair<Duration, Runnable>>.
+   * This is a Map&lt;String, Pair&lt;Duration, Runnable&gt;&gt;.
    * Where the key is the name and the value contains the frequency of the event
    * and the task to run.
    */

File: heron/api/src/java/org/apache/heron/api/bolt/IWindowedBolt.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.heron.api.windowing.TupleWindow;
 
 /**
- * A bolt abstraction for supporting time and count based sliding & tumbling windows.
+ * A bolt abstraction for supporting time and count based sliding &amp; tumbling windows.
  */
 public interface IWindowedBolt extends IComponent {
   /**

File: heron/api/src/java/org/apache/heron/api/windowing/WindowManager.java
Patch:
@@ -75,7 +75,7 @@ public class WindowManager<T extends Serializable> implements TriggerHandler {
    *
    * @param lifecycleListener the {@link WindowLifecycleListener}
    * @param queue a collection where the events in the window can be enqueued.
-   * <br/>
+   * <br>
    * <b>Note:</b> This collection has to be thread safe.
    */
   public WindowManager(WindowLifecycleListener<T> lifecycleListener, Collection<Event<T>> queue) {
@@ -88,7 +88,7 @@ public WindowManager(WindowLifecycleListener<T> lifecycleListener, Collection<Ev
 
   /**
    * For testing purpose
-   * See {@Link org.apache.heron.api.windowing.WindowManagerTest}
+   * See {@link org.apache.heron.api.windowing.WindowManagerTest}
    * @param lifecycleListener
    */
   public WindowManager(WindowLifecycleListener<T> lifecycleListener) {

File: heron/api/src/java/org/apache/heron/api/windowing/evictors/WatermarkTimeEvictionPolicy.java
Patch:
@@ -56,7 +56,7 @@ public WatermarkTimeEvictionPolicy(long windowLength, long lag) {
 
   /**
    * {@inheritDoc}
-   * <p/>
+   * <p>
    * Keeps events with future ts in the queue for processing in the next
    * window. If the ts difference is more than the lag, stops scanning
    * the queue for the current window.

File: heron/api/src/java/org/apache/heron/streamlet/impl/streamlets/GeneralReduceByKeyAndWindowStreamlet.java
Patch:
@@ -38,7 +38,7 @@
  * applying user supplied reduceFn on all elements within each window defined by a
  * user supplied Window Config.
  * ReduceByKeyAndWindowStreamlet's elements are of KeyValue type where the key is
- * KeyWindowInfo<K> type and the value is of type V.
+ * KeyWindowInfo&lt;K&gt; type and the value is of type V.
  */
 public class GeneralReduceByKeyAndWindowStreamlet<K, V, VR>
     extends StreamletImpl<KeyValue<KeyedWindow<K>, VR>> {

File: heron/api/src/java/org/apache/heron/streamlet/impl/streamlets/JoinStreamlet.java
Patch:
@@ -38,7 +38,7 @@
  * JoinStreamlet represents a KVStreamlet that is the result of joining two KVStreamlets left
  * and right using a WindowConfig. For all left and right tuples in the window whose keys
  * match, the user supplied joinFunction is applied on the values to get the resulting value.
- * JoinStreamlet's elements are of KeyValue type where the key is KeyWindowInfo<K> type
+ * JoinStreamlet's elements are of KeyValue type where the key is KeyWindowInfo&lt;K&gt; type
  * and the value is of type VR.
  */
 public final class JoinStreamlet<K, R, S, T> extends StreamletImpl<KeyValue<KeyedWindow<K>, T>> {

File: heron/api/src/java/org/apache/heron/streamlet/impl/streamlets/ReduceByKeyAndWindowStreamlet.java
Patch:
@@ -38,7 +38,7 @@
  * applying user supplied reduceFn on all elements within each window defined by a
  * user supplied Window Config.
  * ReduceByKeyAndWindowStreamlet's elements are of KeyValue type where the key is
- * KeyWindowInfo<K> type and the value is of type V.
+ * KeyWindowInfo&lt;K&gt; type and the value is of type V.
  */
 public class ReduceByKeyAndWindowStreamlet<K, V, R>
     extends StreamletImpl<KeyValue<KeyedWindow<K>, V>> {

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -470,7 +470,7 @@ public static String encodeJavaOpts(String javaOpts) {
    * <br> 2. replace "(61)" and "&amp;equals;" with "="
    * <br> 3. Revert from Base64 format
    * Note that '=' is escaped in two different ways. '(61)' is the new escaping.
-   * '&equals;' was the original replacement but it is not friendly to bash and
+   * '&amp;equals;' was the original replacement but it is not friendly to bash and
    * was causing issues. The original escaping is still left there for reference
    * and backward compatibility purposes (to be removed after no topology needs
    * it)

File: heron/spi/src/java/org/apache/heron/spi/uploader/IUploader.java
Patch:
@@ -41,6 +41,7 @@
 public interface IUploader extends AutoCloseable {
   /**
    * Initialize the uploader with the incoming context.
+   * @param config The config object.
    */
   void initialize(Config config);
 
@@ -55,6 +56,7 @@ public interface IUploader extends AutoCloseable {
   /**
    * If subsequent stages fail, undo will be called to free resources used by
    * uploading package. Ideally, this should try to remove the uploaded package.
+   * @return True if successful.
    */
   boolean undo();
 

File: storm-compatibility/src/java/backtype/storm/task/TopologyContext.java
Patch:
@@ -157,6 +157,7 @@ public String getThisComponentId() {
   /**
    * Gets the declared output fields for the specified stream id for the component
    * this task is a part of.
+   * @param streamId The id of the output field.
    */
   public Fields getThisOutputFields(String streamId) {
     return new Fields(delegate.getThisOutputFields(streamId));

File: storm-compatibility/src/java/org/apache/storm/topology/IWindowedBolt.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.storm.windowing.TupleWindow;
 
 /**
- * A bolt abstraction for supporting time and count based sliding & tumbling windows.
+ * A bolt abstraction for supporting time and count based sliding &amp; tumbling windows.
  */
 public interface IWindowedBolt extends IComponent {
   /**

File: heron/metricscachemgr/src/java/org/apache/heron/metricscachemgr/MetricsCacheManagerHttpServer.java
Patch:
@@ -82,8 +82,8 @@ public MetricsCacheManagerHttpServer(MetricsCache cache, int port) throws IOExce
    * &lt;host:port&gt; &lt;component_name&gt; &lt;metrics_name&gt;
    * Example:
    * 1. run the example topology,
-   * ~/bin/heron submit local ~/.heron/examples/heron-examples.jar \
-   * org.apache.heron.examples.ExclamationTopology ExclamationTopology \
+   * ~/bin/heron submit local ~/.heron/examples/heron-api-examples.jar \
+   * org.apache.heron.examples.api.ExclamationTopology ExclamationTopology \
    * --deploy-deactivated --verbose
    * 2. in the [source root directory],
    * bazel run heron/metricscachemgr/src/java:metricscache-queryclient-unshaded -- \

File: examples/src/java/org/apache/heron/examples/api/ExampleResources.java
Patch:
@@ -23,7 +23,7 @@
 
 public final class ExampleResources {
 
-  static final long COMPONENT_RAM_MB = 512;
+  static final long COMPONENT_RAM_MB = 1024;
 
   static ByteAmount getComponentRam() {
     return ByteAmount.fromMegabytes(COMPONENT_RAM_MB);

File: examples/src/java/org/apache/heron/examples/api/StatefulWordCountTopology.java
Patch:
@@ -205,9 +205,9 @@ public static void main(String[] args) throws AlreadyAliveException, InvalidTopo
 
     // configure component resources
     conf.setComponentRam("word",
-        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB * 2));
+        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB));
     conf.setComponentRam("consumer",
-        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB * 2));
+        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB));
 
     // configure container resources
     conf.setContainerDiskRequested(

File: examples/src/java/org/apache/heron/examples/api/WordCountTopology.java
Patch:
@@ -184,9 +184,9 @@ public static void main(String[] args) throws AlreadyAliveException, InvalidTopo
 
     // configure component resources
     conf.setComponentRam("word",
-        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB * 2));
+        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB));
     conf.setComponentRam("consumer",
-        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB * 2));
+        ByteAmount.fromMegabytes(ExampleResources.COMPONENT_RAM_MB));
 
     // configure container resources
     conf.setContainerDiskRequested(

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/RuntimeManagerRunnerTest.java
Patch:
@@ -236,7 +236,7 @@ private void doupdateTopologyComponentParallelismTest(String newParallelism,
 
     when(manager.getPackingPlan(eq(TOPOLOGY_NAME))).thenReturn(currentPlan);
     doReturn(proposedPlan).when(runner).buildNewPackingPlan(
-        eq(currentPlan), eq(changeRequests), null, any(TopologyAPI.Topology.class));
+        eq(currentPlan), eq(changeRequests), any(), any(TopologyAPI.Topology.class));
 
     Scheduler.UpdateTopologyRequest updateTopologyRequest =
         Scheduler.UpdateTopologyRequest.newBuilder()

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/resources/TopologyResource.java
Patch:
@@ -357,7 +357,7 @@ public Response update(
         List<String> components = params.get(PARAM_COMPONENT_PARALLELISM);
         List<String> runtimeConfigs = params.get(PARAM_RUNTIME_CONFIG_KEY);
         List<String> containersList = params.get(PARAM_CONTAINER_NUMBER);
-        if (containersList.size() > 1) {
+        if (containersList != null && containersList.size() > 1) {
           Utils.createMessage("only one value should be specified for container_number. "
               + "picking first value.");
         }

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/RuntimeManagerRunnerTest.java
Patch:
@@ -236,7 +236,7 @@ private void doupdateTopologyComponentParallelismTest(String newParallelism,
 
     when(manager.getPackingPlan(eq(TOPOLOGY_NAME))).thenReturn(currentPlan);
     doReturn(proposedPlan).when(runner).buildNewPackingPlan(
-        eq(currentPlan), eq(changeRequests), any(TopologyAPI.Topology.class));
+        eq(currentPlan), eq(changeRequests), null, any(TopologyAPI.Topology.class));
 
     Scheduler.UpdateTopologyRequest updateTopologyRequest =
         Scheduler.UpdateTopologyRequest.newBuilder()

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestFibonacciSpout.java
Patch:
@@ -42,7 +42,7 @@ public TestFibonacciSpout(TestPropertyHolder holder) {
   }
 
   @Override
-  public void open(Map<String, Object> conf, TopologyContext context,
+  public void open(Map conf, TopologyContext context,
                    SpoutOutputCollector collector) {
     this.collector = collector;
   }

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestNameSpout.java
Patch:
@@ -45,7 +45,7 @@ public TestNameSpout(boolean isDistributed) {
     isdistributed = isDistributed;
   }
 
-  public void open(Map<String, Object> conf, TopologyContext context,
+  public void open(Map conf, TopologyContext context,
                    SpoutOutputCollector collector) {
     this.collector = collector;
   }

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestWindowBolt.java
Patch:
@@ -35,7 +35,7 @@ public class TestWindowBolt extends BaseWindowedBolt {
 
 
   @Override
-  public void prepare(Map<String, Object> topoConf, TopologyContext context,
+  public void prepare(Map topoConf, TopologyContext context,
                       OutputCollector collector) {
     this.collector = collector;
   }

File: storm-compatibility-examples/src/java/org/apache/storm/examples/SlidingWindowTopology.java
Patch:
@@ -57,7 +57,7 @@ private static class TumblingWindowAvgBolt extends BaseWindowedBolt {
 
     @Override
     @SuppressWarnings("HiddenField")
-    public void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector
+    public void prepare(Map topoConf, TopologyContext context, OutputCollector
         collector) {
       this.collector = collector;
     }

File: storm-compatibility-examples/src/java/org/apache/storm/examples/bolt/SlidingWindowSumBolt.java
Patch:
@@ -44,7 +44,7 @@ public class SlidingWindowSumBolt extends BaseWindowedBolt {
 
   @Override
   @SuppressWarnings("HiddenField")
-  public void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector
+  public void prepare(Map topoConf, TopologyContext context, OutputCollector
       collector) {
     this.collector = collector;
   }

File: storm-compatibility-examples/src/java/org/apache/storm/examples/spout/RandomIntegerSpout.java
Patch:
@@ -48,7 +48,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
 
   @Override
   @SuppressWarnings("HiddenField")
-  public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector
+  public void open(Map conf, TopologyContext context, SpoutOutputCollector
       collector) {
     this.collector = collector;
     this.rand = new Random();

File: storm-compatibility/src/java/org/apache/storm/metric/api/IMetricsConsumer.java
Patch:
@@ -89,7 +89,7 @@ public int hashCode() {
   }
 
   @SuppressWarnings("rawtypes")
-  void prepare(Map<String, Object> stormConf, Object registrationArgument,
+  void prepare(Map stormConf, Object registrationArgument,
                TopologyContext context, IErrorReporter errorReporter);
 
   void handleDataPoints(TaskInfo taskInfo, Collection<DataPoint> dataPoints);

File: storm-compatibility/src/java/org/apache/storm/spout/ISpout.java
Patch:
@@ -57,7 +57,7 @@ public interface ISpout extends Serializable {
    * @param collector The collector is used to emit tuples from this spout. Tuples can be emitted at any time, including the open and close methods. The collector is thread-safe and should be saved as an instance variable of this spout object.
    */
   @SuppressWarnings("rawtypes")
-  void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector);
+  void open(Map conf, TopologyContext context, SpoutOutputCollector collector);
 
   /**
    * Called when an ISpout is going to be shutdown. There is no guarentee that close

File: storm-compatibility/src/java/org/apache/storm/topology/IRichSpoutDelegate.java
Patch:
@@ -45,7 +45,7 @@ public IRichSpoutDelegate(IRichSpout delegate) {
 
   @Override
   @SuppressWarnings("rawtypes")
-  public void open(Map<String, Object> conf, org.apache.heron.api.topology.TopologyContext context,
+  public void open(Map conf, org.apache.heron.api.topology.TopologyContext context,
                    SpoutOutputCollector collector) {
     topologyContextImpl = new TopologyContext(context);
     spoutOutputCollectorImpl = new SpoutOutputCollectorImpl(collector);

File: storm-compatibility/src/java/org/apache/storm/topology/IWindowedBolt.java
Patch:
@@ -33,7 +33,7 @@ public interface IWindowedBolt extends IComponent {
    * {@link org.apache.storm.task.IBolt#prepare(Map, TopologyContext, OutputCollector)} except
    * that while emitting, the tuples are automatically anchored to the tuples in the inputWindow.
    */
-  void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector collector);
+  void prepare(Map topoConf, TopologyContext context, OutputCollector collector);
 
   /**
    * Process the tuple window and optionally emit new tuples based on the tuples in the input

File: storm-compatibility/src/java/org/apache/storm/topology/base/BaseWindowedBolt.java
Patch:
@@ -524,7 +524,7 @@ public BaseWindowedBolt withWatermarkInterval(Duration interval) {
   }
 
   @Override
-  public void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector
+  public void prepare(Map topoConf, TopologyContext context, OutputCollector
       collector) {
     // NOOP
   }

File: heron/scheduler-core/tests/java/org/apache/heron/scheduler/RuntimeManagerRunnerTest.java
Patch:
@@ -236,7 +236,7 @@ private void doupdateTopologyComponentParallelismTest(String newParallelism,
 
     when(manager.getPackingPlan(eq(TOPOLOGY_NAME))).thenReturn(currentPlan);
     doReturn(proposedPlan).when(runner).buildNewPackingPlan(
-        eq(currentPlan), eq(changeRequests), any(TopologyAPI.Topology.class));
+        eq(currentPlan), eq(changeRequests), 1, any(TopologyAPI.Topology.class));
 
     Scheduler.UpdateTopologyRequest updateTopologyRequest =
         Scheduler.UpdateTopologyRequest.newBuilder()
@@ -246,7 +246,7 @@ private void doupdateTopologyComponentParallelismTest(String newParallelism,
 
     when(client.updateTopology(updateTopologyRequest)).thenReturn(true);
     try {
-      runner.updateTopologyComponentParallelism(TOPOLOGY_NAME, newParallelism);
+      runner.updatePackingPlan(TOPOLOGY_NAME, 1, changeRequests);
     } finally {
       int expectedClientUpdateCalls = expectedResult ? 1 : 0;
       verify(client, times(expectedClientUpdateCalls)).updateTopology(updateTopologyRequest);

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/actions/Keys.java
Patch:
@@ -25,6 +25,8 @@ public final class Keys {
 
   public static final String PARAM_COMPONENT_PARALLELISM =
       RuntimeManagerRunner.RUNTIME_MANAGER_COMPONENT_PARALLELISM_KEY;
+  public static final String PARAM_CONTAINER_NUMBER =
+      RuntimeManagerRunner.RUNTIME_MANAGER_CONTAINER_NUMBER_KEY;
   public static final String PARAM_USER_RUNTIME_CONFIG =
       RuntimeManagerRunner.RUNTIME_MANAGER_RUNTIME_CONFIG_KEY;
 

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/common/InvalidStateException.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * This exception is generated when desired state information is not found
  */
-class InvalidStateException extends RuntimeException {
+public class InvalidStateException extends RuntimeException {
   private static final long serialVersionUID = 1649354922817533118L;
 
   InvalidStateException(String topologyName, String message) {

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/policy/ToggleablePolicy.java
Patch:
@@ -35,6 +35,7 @@
 
 import org.apache.heron.api.generated.TopologyAPI;
 import org.apache.heron.healthmgr.HealthPolicyConfig;
+import org.apache.heron.healthmgr.common.InvalidStateException;
 import org.apache.heron.healthmgr.common.PhysicalPlanProvider;
 
 import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_POLICY_ID;
@@ -98,7 +99,7 @@ public Collection<Measurement> executeSensors() {
           }
         }
       }
-    } catch (Exception e) {
+    } catch (InvalidStateException e) {
       LOG.warning(
           "failed to fetch the latest physical plan and skip policy toggle update: "
               + e.toString());

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/sensors/ExecuteCountSensor.java
Patch:
@@ -20,7 +20,6 @@
 package org.apache.heron.healthmgr.sensors;
 
 import java.time.Instant;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/sensors/BackPressureSensor.java
Patch:
@@ -23,6 +23,7 @@
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 
 import javax.inject.Inject;
 

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/sensors/BufferSizeSensor.java
Patch:
@@ -23,6 +23,7 @@
 import java.time.Instant;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 
 import javax.inject.Inject;
 

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/resolvers/RestartContainerResolver.java
Patch:
@@ -44,8 +44,8 @@
 import static org.apache.heron.healthmgr.detectors.BaseDetector.SymptomType.SYMPTOM_INSTANCE_BACK_PRESSURE;
 
 public class RestartContainerResolver implements IResolver {
-  public static final String RESTART_CONTAINER_RESOLVER = "RestartContainerResolver";
-  private static final Logger LOG = Logger.getLogger(RestartContainerResolver.class.getName());
+  public static final String RESTART_CONTAINER_RESOLVER = RestartContainerResolver.class.getName();
+  private static final Logger LOG = Logger.getLogger(RESTART_CONTAINER_RESOLVER);
 
   private final EventManager eventManager;
   private final String topologyName;

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -334,7 +334,7 @@ public static void main(String[] args)
       System.exit(200);
       // SUPPRESS CHECKSTYLE IllegalCatch
     } catch (Exception e) {
-      LOG.log(Level.FINE, "Exception when submitting topology", e);
+      LOG.log(Level.FINE, "Exception when executing command " + commandOption, e);
       System.out.println(e.getMessage());
       // Exit with status code 100 to indicate that error has happened on user-land
       // SUPPRESS CHECKSTYLE RegexpSinglelineJava

File: heron/schedulers/tests/java/org/apache/heron/scheduler/nomad/NomadSchedulerTest.java
Patch:
@@ -324,7 +324,7 @@ public void testGetTaskRawExec() {
         .thenReturn(EXECUTOR_CMD_ARGS);
 
     PowerMockito.mockStatic(NomadScheduler.class);
-    PowerMockito.when(NomadScheduler.getFetchCommand(Mockito.any(), Mockito.any()))
+    PowerMockito.when(NomadScheduler.getFetchCommand(Mockito.any(), Mockito.any(), Mockito.any()))
         .thenReturn(TOPOLOGY_DOWNLOAD_CMD);
     PowerMockito.when(NomadScheduler.getHeronNomadScript(this.mockConfig))
         .thenReturn(HERON_NOMAD_SCRIPT);
@@ -405,7 +405,7 @@ public void testGetTaskDocker() {
         .thenReturn(EXECUTOR_CMD_ARGS);
 
     PowerMockito.mockStatic(NomadScheduler.class);
-    PowerMockito.when(NomadScheduler.getFetchCommand(Mockito.any(), Mockito.any()))
+    PowerMockito.when(NomadScheduler.getFetchCommand(Mockito.any(), Mockito.any(), Mockito.any()))
         .thenReturn(TOPOLOGY_DOWNLOAD_CMD);
     PowerMockito.when(NomadScheduler.getHeronNomadScript(this.mockConfig))
         .thenReturn(HERON_NOMAD_SCRIPT);
@@ -485,7 +485,7 @@ public void testServiceCheck() {
         .thenReturn(EXECUTOR_CMD_ARGS);
 
     PowerMockito.mockStatic(NomadScheduler.class);
-    PowerMockito.when(NomadScheduler.getFetchCommand(Mockito.any(), Mockito.any()))
+    PowerMockito.when(NomadScheduler.getFetchCommand(Mockito.any(), Mockito.any(), Mockito.any()))
         .thenReturn(TOPOLOGY_DOWNLOAD_CMD);
     PowerMockito.when(NomadScheduler.getHeronNomadScript(this.mockConfig))
         .thenReturn(HERON_NOMAD_SCRIPT);

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/ExecutorFlag.java
Patch:
@@ -62,6 +62,7 @@ public enum ExecutorFlag {
   IsStateful("is-stateful"),
   CheckpointManagerClasspath("checkpoint-manager-classpath"),
   CheckpointManagerPort("checkpoint-manager-port"),
+  CheckpointManagerRam("checkpoint-manager-ram"),
   StatefulConfigFile("stateful-config-file"),
   HealthManagerMode("health-manager-mode"),
   HealthManagerClasspath("health-manager-classpath"),

File: heron/scheduler-core/src/java/org/apache/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -311,6 +311,9 @@ public static void addExecutorTopologyArgs(List<String> args, Config config, Con
     args.add(createCommandArg(ExecutorFlag.CheckpointManagerClasspath,
         completeCkptmgrProcessClassPath));
     args.add(createCommandArg(ExecutorFlag.StatefulConfigFile, Context.statefulConfigFile(config)));
+    args.add(createCommandArg(
+        ExecutorFlag.CheckpointManagerRam,
+        Long.toString(TopologyUtils.getCheckpointManagerRam(topology).asBytes())));
 
     String healthMgrMode = Context.healthMgrMode(config)
         == null ? "disabled" : Context.healthMgrMode(config);

File: heron/schedulers/src/java/org/apache/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -216,7 +216,7 @@ public Set<PackingPlan.ContainerPlan> addContainers(
         controller.addContainers(containersToAdd.size()));
     if (newAddedContainerIds.size() != containersToAdd.size()) {
       throw new RuntimeException(
-          "Aurora returned differnt countainer count " + newAddedContainerIds.size()
+          "Aurora returned different container count " + newAddedContainerIds.size()
           + "; input count was " + containersToAdd.size());
     }
     // Do the remapping:

File: heron/schedulers/tests/java/org/apache/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -338,6 +338,7 @@ public void testProperties() throws URISyntaxException {
             + " --checkpoint-manager-classpath=" + expectedLib + "/ckptmgr/*:"
             + expectedLib + "/statefulstorage/*:"
             + " --stateful-config-file=" + expectedConf + "/stateful.yaml"
+            + " --checkpoint-manager-ram=1073741824"
             + " --health-manager-mode=disabled"
             + " --health-manager-classpath=" + expectedLib + "/healthmgr/*";
           break;

File: heron/spi/tests/java/org/apache/heron/spi/common/ContextTest.java
Patch:
@@ -61,6 +61,8 @@ public void testDefaultResources() throws Exception {
     Config defaultResources = props;
 
     assertEquals(Key.STMGR_RAM.getDefault(), Context.stmgrRam(defaultResources));
+    assertEquals(Key.CKPTMGR_RAM.getDefault(), Context.ckptmgrRam(defaultResources));
+    assertEquals(Key.METRICSMGR_RAM.getDefault(), Context.metricsmgrRam(defaultResources));
     assertEquals(
         (Double) Key.INSTANCE_CPU.getDefault(), Context.instanceCpu(defaultResources), 0.001);
     assertEquals(Key.INSTANCE_RAM.getDefault(), Context.instanceRam(defaultResources));

File: heron/schedulers/src/java/org/apache/heron/scheduler/aurora/AuroraController.java
Patch:
@@ -29,7 +29,7 @@
  */
 public interface AuroraController {
 
-  boolean createJob(Map<AuroraField, String> auroraProperties);
+  boolean createJob(Map<AuroraField, String> auroraProperties, Map<String, String> extra);
   boolean killJob();
 
   /**

File: heron/schedulers/src/java/org/apache/heron/scheduler/aurora/AuroraHeronShellController.java
Patch:
@@ -65,8 +65,8 @@ class AuroraHeronShellController implements AuroraController {
   }
 
   @Override
-  public boolean createJob(Map<AuroraField, String> bindings) {
-    return cliController.createJob(bindings);
+  public boolean createJob(Map<AuroraField, String> bindings, Map<String, String> extra) {
+    return cliController.createJob(bindings, extra);
   }
 
   @Override

File: heron/schedulers/tests/java/org/apache/heron/scheduler/aurora/AuroraCLIControllerTest.java
Patch:
@@ -78,17 +78,18 @@ public void after() throws Exception {
   @Test
   public void testCreateJob() throws Exception {
     Map<AuroraField, String> bindings = new HashMap<>();
+    Map<String, String> bindings2 = new HashMap<>();
     List<String> expectedCommand = asList("aurora job create --wait-until RUNNING %s %s %s",
         JOB_SPEC, AURORA_FILENAME, VERBOSE_CONFIG);
 
     // Failed
     Mockito.doReturn(false).when(controller).runProcess(Matchers.anyListOf(String.class));
-    Assert.assertFalse(controller.createJob(bindings));
+    Assert.assertFalse(controller.createJob(bindings, bindings2));
     Mockito.verify(controller).runProcess(Mockito.eq(expectedCommand));
 
     // Happy path
     Mockito.doReturn(true).when(controller).runProcess(Matchers.anyListOf(String.class));
-    Assert.assertTrue(controller.createJob(bindings));
+    Assert.assertTrue(controller.createJob(bindings, bindings2));
     Mockito.verify(controller, Mockito.times(2)).runProcess(expectedCommand);
   }
 

File: heron/ckptmgr/src/java/org/apache/heron/ckptmgr/CheckpointManager.java
Patch:
@@ -193,7 +193,7 @@ private static IStatefulStorage setupStatefulStorage(
     }
 
     try {
-      statefulStorage.init(
+      statefulStorage.init(topologyName,
           Collections.unmodifiableMap(checkpointManagerConfig.getStatefulStorageConfig()));
     } catch (StatefulStorageException e) {
       throw new CheckpointManagerException(classname + " init threw exception", e);

File: heron/api/src/java/org/apache/heron/streamlet/impl/groupings/JoinCustomGrouping.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.heron.api.grouping.CustomStreamGrouping;
 import org.apache.heron.api.topology.TopologyContext;
+import org.apache.heron.api.utils.Utils;
 import org.apache.heron.streamlet.SerializableFunction;
 
 /**
@@ -52,8 +53,8 @@ public void prepare(TopologyContext context, String component,
   public List<Integer> chooseTasks(List<Object> values) {
     List<Integer> ret = new ArrayList<>();
     V obj = (V) values.get(0);
-    int index = keyExtractor.apply(obj).hashCode() % taskIds.size();
-    ret.add(taskIds.get(index));
+    int key = keyExtractor.apply(obj).hashCode();
+    ret.add(Utils.assignKeyToTask(key, taskIds));
     return ret;
   }
 }

File: heron/api/src/java/org/apache/heron/streamlet/impl/groupings/RemapCustomGrouping.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.heron.api.grouping.CustomStreamGrouping;
 import org.apache.heron.api.topology.TopologyContext;
+import org.apache.heron.api.utils.Utils;
 import org.apache.heron.streamlet.SerializableBiFunction;
 
 /**
@@ -54,7 +55,7 @@ public List<Integer> chooseTasks(List<Object> values) {
     R obj = (R) values.get(0);
     List<Integer> targets = remapFn.apply(obj, ret.size());
     for (Integer target : targets) {
-      ret.add(taskIds.get(target % taskIds.size()));
+      ret.add(Utils.assignKeyToTask(target, taskIds));
     }
     return ret;
   }

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/HealthPolicyConfigReader.java
Patch:
@@ -49,8 +49,9 @@ public class HealthPolicyConfigReader {
   public enum PolicyConfigKey {
     CONF_FILE_NAME("healthmgr.yaml"),
     HEALTH_POLICIES("heron.class.health.policies"),
+    HEALTH_POLICY_MODE("health.policy.mode"),
     HEALTH_POLICY_CLASS("health.policy.class"),
-    HEALTH_POLICY_INTERVAL("health.policy.interval.ms"),
+    HEALTH_POLICY_INTERVAL_MS("health.policy.interval.ms"),
     CONF_SENSOR_DURATION_SUFFIX(".duration"),
     METRIC_SOURCE_TYPE("heron.healthmgr.metricsource.type"),
     METRIC_SOURCE_URL("heron.healthmgr.metricsource.url");

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/policy/DynamicResourceAllocationPolicy.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.heron.healthmgr.sensors.BufferSizeSensor;
 import org.apache.heron.healthmgr.sensors.ExecuteCountSensor;
 
-import static org.apache.heron.healthmgr.HealthPolicyConfigReader.PolicyConfigKey.HEALTH_POLICY_INTERVAL;
+import static org.apache.heron.healthmgr.HealthPolicyConfigReader.PolicyConfigKey.HEALTH_POLICY_INTERVAL_MS;
 import static org.apache.heron.healthmgr.diagnosers.BaseDiagnoser.DiagnosisType.DIAGNOSIS_DATA_SKEW;
 import static org.apache.heron.healthmgr.diagnosers.BaseDiagnoser.DiagnosisType.DIAGNOSIS_SLOW_INSTANCE;
 import static org.apache.heron.healthmgr.diagnosers.BaseDiagnoser.DiagnosisType.DIAGNOSIS_UNDER_PROVISIONING;
@@ -86,7 +86,7 @@ public class DynamicResourceAllocationPolicy extends HealthPolicyImpl
     registerResolvers(scaleUpResolver);
 
     setPolicyExecutionInterval(
-        Duration.ofMillis((int) policyConfig.getConfig(HEALTH_POLICY_INTERVAL.key(), 60000)));
+        Duration.ofMillis((int) policyConfig.getConfig(HEALTH_POLICY_INTERVAL_MS.key(), 60000)));
 
     eventManager.addEventListener(TopologyUpdate.class, this);
   }

File: heron/api/src/java/org/apache/heron/api/windowing/EvictionContext.java
Patch:
@@ -19,10 +19,12 @@
 
 package org.apache.heron.api.windowing;
 
+import java.io.Serializable;
+
 /**
  * Context information that can be used by the eviction policy
  */
-public interface EvictionContext {
+public interface EvictionContext extends Serializable {
   /**
    * Returns the reference time that the eviction policy could use to
    * evict the events. In the case of event time processing, this would be

File: eco/src/java/org/apache/heron/eco/builder/ConfigBuilder.java
Patch:
@@ -145,7 +145,7 @@ private void setComponentLevelResource(Config config, Map.Entry<String, Object>
         long megaBytes = extractRawValue(ramWithUom, mbIndex);
         if (megaBytes < MINIMUM_MB) {
           throw new IllegalArgumentException(
-              "The minimum Ram resource allocation for a component must be at least 256MB");
+              "The minimum RAM resource allocation for a component must be at least 256MB");
         }
         byteAmount = ByteAmount.fromMegabytes(megaBytes);
 
@@ -161,15 +161,15 @@ private void setComponentLevelResource(Config config, Map.Entry<String, Object>
         long bytes = extractRawValue(ramWithUom, bIndex);
         if (bytes < MINIMUM_BYTES) {
           throw new IllegalArgumentException(
-              "The minimum Ram resource allocation for a component must be at least 256000000B");
+              "The minimum RAM resource allocation for a component must be at least 256000000B");
         }
         byteAmount = ByteAmount.fromBytes(bytes);
 
       } else {
         // There is no format throw an exception
         throw new
             IllegalArgumentException(
-            " Please specify 'B', 'MB', 'GB' when declaring Ram Resources");
+            " Please specify 'B', 'MB', 'GB' when declaring RAM Resources");
       }
       config.setComponentRam(id, byteAmount);
     }

File: examples/src/java/org/apache/heron/examples/api/ComponentJVMOptionsTopology.java
Patch:
@@ -78,7 +78,7 @@ public static void main(String[] args) throws Exception {
     conf.setContainerRamRequested(ByteAmount.fromGigabytes(2));
     conf.setContainerCpuRequested(2);
 
-    // Specify the size of ram padding to per container.
+    // Specify the size of RAM padding to per container.
     // Notice, this config will be considered as a hint,
     // and it's up to the packing algorithm to determine whether to apply this hint
     conf.setContainerRamPadding(ByteAmount.fromGigabytes(2));

File: examples/src/java/org/apache/heron/examples/api/spout/TestWordSpout.java
Patch:
@@ -65,7 +65,7 @@ public void nextTuple() {
     final String word = words[rand.nextInt(words.length)];
     collector.emit(new Values(word));
     if (!throttleDuration.isZero()) {
-      SysUtils.sleep(throttleDuration); // sleep to throttle back cpu usage
+      SysUtils.sleep(throttleDuration); // sleep to throttle back CPU usage
     }
   }
 

File: heron/api/src/java/org/apache/heron/api/utils/TopologyUtils.java
Patch:
@@ -181,7 +181,7 @@ public static boolean verifyTopology(TopologyAPI.Topology topology) {
       return false;
     }
 
-    // Only verify ram map string well-formed.
+    // Only verify RAM map string well-formed.
     getComponentRamMapConfig(topology);
     // Verify all bolts input streams exist. First get all output streams.
     Set<String> outputStreams = new HashSet<>();
@@ -244,7 +244,7 @@ public static Map<String, Double> getComponentCpuMapConfig(TopologyAPI.Topology
    * Returns a empty map if the Config is not set
    *
    * @param topology the topology def
-   * @return a map (componentName -&gt; ram required)
+   * @return a map (componentName -&gt; RAM required)
    */
   public static Map<String, ByteAmount> getComponentRamMapConfig(TopologyAPI.Topology topology)
       throws RuntimeException {

File: heron/api/src/java/org/apache/heron/streamlet/Builder.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Builder is used to register all sources. Builder thus keeps track
- * of all the starting points of the computation dag and uses this
+ * of all the starting points of the computation DAG and uses this
  * information to build the topology
  */
 public interface Builder {

File: heron/api/src/java/org/apache/heron/streamlet/impl/BuilderImpl.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * BuilderImpl implements the Builder interface.
  * The builder keeps track of the all the sources of the
- * computation dag and builds the Topology by traversing all
+ * computation DAG and builds the Topology by traversing all
  * the computation nodes.
  */
 public final class BuilderImpl implements Builder {

File: heron/common/src/java/org/apache/heron/common/config/SystemConfigKey.java
Patch:
@@ -205,7 +205,7 @@ public enum SystemConfigKey {
       "heron.instance.reconnect.metricsmgr.interval.sec", ChronoUnit.SECONDS),
 
   /**
-   * The interval in seconds to sample a system metric, for instance, jvm used memory.
+   * The interval in seconds to sample a system metric, for instance, JVM used memory.
    */
   INSTANCE_METRICS_SYSTEM_SAMPLE_INTERVAL(
       "heron.instance.metrics.system.sample.interval.sec", ChronoUnit.SECONDS),

File: heron/common/src/java/org/apache/heron/common/network/IncomingPacket.java
Patch:
@@ -46,8 +46,8 @@
  * <p>
  * 2. Experiments are done by using direct buffer and the resources saving is negligible:
  * -- Direct buffer would save, in our scenarios, less than 1% of RAM;
- * -- Direct buffer could save 30%~50% cpu of Gateway thread.
- * However, the cpu used by Gateway thread is negligible,
+ * -- Direct buffer could save 30%~50% CPU of Gateway thread.
+ * However, the CPU used by Gateway thread is negligible,
  * less than 2% out of the whole usage in worst case.
  * -- The extra copy is within JVM boundary; it is pretty fast.
  */

File: heron/common/src/java/org/apache/heron/common/network/OutgoingPacket.java
Patch:
@@ -45,8 +45,8 @@
  * <p>
  * 2. Experiments are done by using direct buffer and the resources saving is negligible:
  * -- Direct buffer would save, in our scenarios, less than 1% of RAM;
- * -- Direct buffer could save 30%~50% cpu of Gateway thread.
- * However, the cpu used by Gateway thread is negligible,
+ * -- Direct buffer could save 30%~50% CPU of Gateway thread.
+ * However, the CPU used by Gateway thread is negligible,
  * less than 2% out of the whole usage in worst case.
  * -- The extra copy is within JVM boundary; it is pretty fast.
  */

File: heron/instance/src/java/org/apache/heron/instance/bolt/BoltOutputCollectorImpl.java
Patch:
@@ -133,7 +133,7 @@ private List<Integer> admitBoltTuple(String streamId,
 
     sendTuple(bldr, streamId, tuple);
 
-    // TODO:- remove this after changing the api
+    // TODO:- remove this after changing the API
     return null;
   }
 

File: heron/instance/src/java/org/apache/heron/instance/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -172,7 +172,7 @@ private List<Integer> admitSpoutTuple(String streamId, List<Object> tuple,
 
     sendTuple(bldr, streamId, tuple);
 
-    // TODO:- remove this after changing the api
+    // TODO:- remove this after changing the API
     return null;
   }
 

File: heron/io/dlog/src/java/org/apache/heron/dlog/DLOutputStream.java
Patch:
@@ -49,7 +49,7 @@ public void write(int b) throws IOException {
 
   @Override
   public void write(byte[] b, int off, int len) throws IOException {
-    // TODO: avoid array copy by using the new bytebuf api
+    // TODO: avoid array copy by using the new bytebuf API
     byte[] newData = new byte[len];
     System.arraycopy(b, off, newData, 0, len);
     write(newData);

File: heron/metricsmgr/src/java/org/apache/heron/metricsmgr/sink/metricscache/MetricsCacheSink.java
Patch:
@@ -58,7 +58,7 @@
  * <p>
  * 2. Then it would construct a long-live Service running metricsCacheClient, which could automatically
  * recover from uncaught exceptions, i.e. close the old one and start a new one.
- * Also, it provides api to update the MetricsCacheLocation that metricsCacheClient need to connect and
+ * Also, it provides API to update the MetricsCacheLocation that metricsCacheClient need to connect and
  * restart the metricsCacheClient.
  * There are two scenarios we need to restart a metricsCacheClient in our case:
  * <p>

File: heron/metricsmgr/src/java/org/apache/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -55,7 +55,7 @@
  * <p>
  * 2. Then it would construct a long-live Service running TMasterClient, which could automatically
  * recover from uncaught exceptions, i.e. close the old one and start a new one.
- * Also, it provides api to update the TMasterLocation that TMasterClient need to connect and
+ * Also, it provides API to update the TMasterLocation that TMasterClient need to connect and
  * restart the TMasterClient.
  * There are two scenarios we need to restart a TMasterClient in our case:
  * <p>

File: heron/packing/src/java/org/apache/heron/packing/builder/PackingPlanBuilder.java
Patch:
@@ -345,7 +345,7 @@ private static Set<PackingPlan.ContainerPlan> buildContainerPlans(
         }
         containerRam = containerRam.plus(instanceRam);
 
-        // Currently not yet support disk or cpu config for different components,
+        // Currently not yet support disk or CPU config for different components,
         // so just use the default value.
         ByteAmount instanceDisk = instanceDefaults.getDisk();
         containerDiskInBytes = containerDiskInBytes.plus(instanceDisk);

File: heron/packing/src/java/org/apache/heron/packing/utils/PackingUtils.java
Patch:
@@ -52,14 +52,14 @@ private static void assertIsValidInstance(Resource instanceResources,
 
     if (instanceResources.getRam().lessThan(minInstanceRam)) {
       throw new PackingException(String.format(
-          "Instance requires ram %s which is less than the minimum ram per instance of %s",
+          "Instance requires RAM %s which is less than the minimum RAM per instance of %s",
           instanceResources.getRam(), minInstanceRam));
     }
 
     ByteAmount instanceRam = instanceResources.getRam().increaseBy(paddingPercentage);
     if (instanceRam.greaterThan(maxContainerResources.getRam())) {
       throw new PackingException(String.format(
-          "This instance requires containers of at least %s ram. The current max container "
+          "This instance requires containers of at least %s RAM. The current max container "
               + "size is %s",
           instanceRam, maxContainerResources.getRam()));
     }
@@ -68,7 +68,7 @@ private static void assertIsValidInstance(Resource instanceResources,
         instanceResources.getCpu(), paddingPercentage));
     if (instanceCpu > maxContainerResources.getCpu()) {
       throw new PackingException(String.format(
-          "This instance requires containers with at least %s cpu cores. The current max container"
+          "This instance requires containers with at least %s CPU cores. The current max container"
               + "size is %s cores",
           instanceCpu, maxContainerResources.getCpu()));
     }

File: heron/schedulers/src/java/org/apache/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -115,7 +115,7 @@ public boolean onSchedule(PackingPlan packing) {
 
     LOG.info("Launching topology in aurora");
 
-    // Align the cpu, ram, disk to the maximal one, and set them to ScheduledResource
+    // Align the cpu, RAM, disk to the maximal one, and set them to ScheduledResource
     PackingPlan updatedPackingPlan = packing.cloneWithHomogeneousScheduledResource();
     SchedulerUtils.persistUpdatedPackingPlan(Runtime.topologyName(runtime), updatedPackingPlan,
         Runtime.schedulerStateManagerAdaptor(runtime));

File: heron/schedulers/src/java/org/apache/heron/scheduler/kubernetes/AppsV1beta1Controller.java
Patch:
@@ -106,7 +106,7 @@ boolean submit(PackingPlan packingPlan) {
       if (!response.isSuccessful()) {
         LOG.log(Level.SEVERE, "Error creating topology message: " + response.message());
         KubernetesUtils.logResponseBodyIfPresent(LOG, response);
-        // construct a message based on the k8s api server response
+        // construct a message based on the k8s API server response
         throw new TopologySubmissionException(
             KubernetesUtils.errorMessageFromResponse(response));
       }

File: heron/schedulers/src/java/org/apache/heron/scheduler/mesos/MesosScheduler.java
Patch:
@@ -244,7 +244,7 @@ protected BaseContainer getBaseContainer(Integer containerIndex, PackingPlan pac
   }
 
   /**
-   * Fill the the resources requirement, i.e. cpu, memory and disk for the given container.
+   * Fill the the resources requirement, i.e. CPU, memory and disk for the given container.
    * This method changes the BaseContainer passed in.
    * <p>
    * Notice: Currently we just make every container homogeneous,

File: heron/schedulers/src/java/org/apache/heron/scheduler/mesos/framework/BaseContainer.java
Patch:
@@ -53,7 +53,7 @@ public static class EnvironmentVariable {
   public String description;
 
   @JsonProperty
-  // # of cpu cores requested
+  // # of CPU cores requested
   public double cpu;
 
   @JsonProperty

File: heron/schedulers/src/java/org/apache/heron/scheduler/nomad/NomadScheduler.java
Patch:
@@ -277,7 +277,7 @@ Task getTask(String taskName, int containerIndex, Resource containerResource) {
     long memoryReqMb = containerResource.getRam().asMegabytes();
     resourceReqs.setMemoryMb(longToInt(memoryReqMb));
 
-    // set cpu requirements
+    // set CPU requirements
     double coresReq = containerResource.getCpu();
     double coresReqFreq = NomadContext.getCoreFreqMapping(this.localConfig) * coresReq;
     resourceReqs.setCpu(Integer.valueOf((int) Math.round(coresReqFreq)));

File: heron/schedulers/src/java/org/apache/heron/scheduler/yarn/HeronConfigurationOptions.java
Patch:
@@ -47,7 +47,7 @@ public class TopologyPackageName implements Name<String> {
   public class HeronCorePackageName implements Name<String> {
   }
 
-  @NamedParameter(doc = "Component Ram Distribution")
+  @NamedParameter(doc = "Component RAM Distribution")
   public class ComponentRamMap implements Name<String> {
   }
 

File: heron/schedulers/tests/java/org/apache/heron/scheduler/mesos/framework/MesosFrameworkTest.java
Patch:
@@ -278,7 +278,7 @@ public void testInsufficientResourcesGenerateLaunchableTasks() throws Exception
     Map<Protos.Offer, TaskResources> offerResources = getOfferResources(offer);
 
     BaseContainer baseContainer = new BaseContainer();
-    // request more cpu than provided
+    // request more CPU than provided
     baseContainer.cpu = 10000;
     baseContainer.memInMB = 0;
     baseContainer.diskInMB = 0;

File: heron/spi/src/java/org/apache/heron/spi/common/Key.java
Patch:
@@ -173,8 +173,8 @@ public enum Key {
   //keys for heron configuration files on the cluster
   OVERRIDE_YAML("heron.config.file.override.yaml",  "${HERON_CONF}/override.yaml"),
 
-  // Path to the config overrides passed into the apiserver. Only applicable to submitting
-  // topologies via apiserver
+  // Path to the config overrides passed into the API server. Only applicable to submitting
+  // topologies via API server
   APISERVER_OVERRIDE_YAML("heron.apiserver.file.override.yaml", Type.STRING),
 
   //keys for config provided user binaries

File: heron/spi/src/java/org/apache/heron/spi/packing/PackingPlan.java
Patch:
@@ -122,13 +122,13 @@ public Map<String, Integer> getComponentCounts() {
   }
 
   /**
-   * Get the formatted String describing component ram distribution from PackingPlan,
+   * Get the formatted String describing component RAM distribution from PackingPlan,
    * used by executor
    *
-   * @return String describing component ram distribution
+   * @return String describing component RAM distribution
    */
   public String getComponentRamDistribution() {
-    // Generate a map with the minimal ram size for each component
+    // Generate a map with the minimal RAM size for each component
     Map<String, ByteAmount> ramMap = new HashMap<>();
     for (ContainerPlan containerPlan : this.getContainers()) {
       for (InstancePlan instancePlan : containerPlan.getInstances()) {

File: heron/spi/src/java/org/apache/heron/spi/packing/Resource.java
Patch:
@@ -87,7 +87,7 @@ public Resource plus(Resource other) {
   }
 
   /**
-   * Divides a resource by another resource by dividing the cpu, memory and disk values of the resources.
+   * Divides a resource by another resource by dividing the CPU, memory and disk values of the resources.
    * It returns the maximum of the three results.
    */
   public double divideBy(Resource other) throws RuntimeException {

File: heron/spi/tests/java/org/apache/heron/spi/packing/PackingPlanTest.java
Patch:
@@ -116,7 +116,7 @@ public void testPackingPlanSerde() {
     PackingPlan newPackingPlan = deserializer.fromProto(serializer.toProto(packingPlan));
     Assert.assertEquals("Packing plan not the same after converting to protobuf object and back",
         newPackingPlan, packingPlan);
-    Assert.assertEquals("Packing plan ram distribution not the same after converting to "
+    Assert.assertEquals("Packing plan RAM distribution not the same after converting to "
             + "protobuf object and back",
         newPackingPlan.getComponentRamDistribution(), packingPlan.getComponentRamDistribution());
   }

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/Runtime.java
Patch:
@@ -270,7 +270,7 @@ public static void main(String[] args) throws Exception {
     Logging.setVerbose(verbose);
     Logging.configure(verbose);
 
-    LOG.debug("apiserver overrides:\n {}", cmd.getOptionProperties(Flag.Property.name));
+    LOG.debug("API server overrides:\n {}", cmd.getOptionProperties(Flag.Property.name));
 
     final String toolsHome = getToolsHome();
 
@@ -324,7 +324,7 @@ public static void main(String[] args) throws Exception {
     try {
       server.start();
 
-      LOG.info("Heron apiserver started at {}", server.getURI());
+      LOG.info("Heron API server started at {}", server.getURI());
 
       server.join();
     } catch (Exception ex) {

File: heron/tools/apiserver/src/java/org/apache/heron/apiserver/utils/ConfigUtils.java
Patch:
@@ -74,7 +74,7 @@ public static Config getBaseConfiguration(String heronDirectory,
         releaseFile,
         overrideConfigurationFile);
     // Put location of the override file in the config so that schedulers invoked by
-    // the apiserver can load the override configs if needed. OVERRIDE_YAML cannot be used
+    // the API server can load the override configs if needed. OVERRIDE_YAML cannot be used
     // to set this because then the location will get passed on to the heron executors
     return Config.newBuilder()
         .putAll(config)

File: heron/uploaders/src/java/org/apache/heron/uploader/hdfs/HdfsUploader.java
Patch:
@@ -38,14 +38,14 @@ public class HdfsUploader implements IUploader {
   private String topologyPackageLocation;
   private URI packageURI;
 
-  // The controller on hdfs
+  // The controller on HDFS
   private HdfsController controller;
 
   @Override
   public void initialize(Config ipconfig) {
     this.config = ipconfig;
 
-    // Instantiate the hdfs controller
+    // Instantiate the HDFS controller
     this.controller = getHdfsController();
 
     this.destTopologyDirectoryURI = HdfsContext.hdfsTopologiesDirectoryURI(config);

File: heron/uploaders/src/java/org/apache/heron/uploader/s3/S3Uploader.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.heron.spi.uploader.UploaderException;
 
 /**
- * Provides a basic uploader class for uploading topology packages to s3.
+ * Provides a basic uploader class for uploading topology packages to S3.
  * <p>
  * By default this uploader will write topology packages to s3://&lt;bucket&gt;/&lt;topologyName&gt;/topology.tar.gz
  * trying to obtain credentials using the default credential provider chain. The package destination serves as known

File: integration_test/src/java/org/apache/heron/integration_test/common/HdfsHelper.java
Patch:
@@ -39,9 +39,9 @@ private HdfsHelper() {
   }
 
   /**
-   * Provide an InputStreamReader to read from a hdfs file
+   * Provide an InputStreamReader to read from a HDFS file
    *
-   * @param path is the hdfs file location
+   * @param path is the HDFS file location
    */
   public static InputStreamReader getHdfsStreamReader(String path) throws IOException {
     Path pt = new Path(path);

File: integration_test/src/java/org/apache/heron/integration_test/core/ITerminalBolt.java
Patch:
@@ -25,7 +25,7 @@
 public interface ITerminalBolt extends Serializable {
   /**
    * Invoke to write all aggregated data to the destination
-   * Destination can be http URL, local file, hdfs, etc.
+   * Destination can be http URL, local file, HDFS, etc.
    */
   void writeFinishedData();
 }

File: storm-compatibility-examples/src/java/org/apache/storm/examples/spout/TestWordSpout.java
Patch:
@@ -63,7 +63,7 @@ public void nextTuple() {
     final String word = words[rand.nextInt(words.length)];
     collector.emit(new Values(word));
     if (!throttleDuration.isZero()) {
-      Utils.sleep(throttleDuration.toMillis()); // sleep to throttle back cpu usage
+      Utils.sleep(throttleDuration.toMillis()); // sleep to throttle back CPU usage
     }
   }
 

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/common/PackingPlanProvider.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.heron.spi.packing.PackingPlanProtoDeserializer;
 import org.apache.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
-import static org.apache.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_TOPOLOGY_NAME;
 
 /**
  * A topology's packing plan may get updated after initial deployment. This provider is used to

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/common/PhysicalPlanProvider.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.heron.proto.system.PhysicalPlans.PhysicalPlan;
 import org.apache.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
-import static org.apache.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_TOPOLOGY_NAME;
 
 /**
  * A topology's physical plan may get updated after initial deployment. This provider is used to

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/common/TopologyProvider.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.heron.healthmgr.common.HealthManagerEvents.TopologyUpdate;
 import org.apache.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
-import static org.apache.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_TOPOLOGY_NAME;
 
 /**
  * A topology may be updated after initial deployment. This provider is used to provide the latest

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/resolvers/RestartContainerResolver.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.heron.proto.scheduler.Scheduler.RestartTopologyRequest;
 import org.apache.heron.scheduler.client.ISchedulerClient;
 
-import static org.apache.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_TOPOLOGY_NAME;
 import static org.apache.heron.healthmgr.detectors.BaseDetector.SymptomType.SYMPTOM_INSTANCE_BACK_PRESSURE;
 
 public class RestartContainerResolver implements IResolver {

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/sensors/MetricsCacheMetricsProvider.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import org.apache.heron.spi.utils.NetworkUtils;
 
-import static org.apache.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_TOPOLOGY_NAME;
 
 public class MetricsCacheMetricsProvider implements MetricsProvider {
   private static final String PATH_STATS = "stats";

File: heron/healthmgr/src/java/org/apache/heron/healthmgr/sensors/TrackerMetricsProvider.java
Patch:
@@ -43,8 +43,8 @@
 
 import net.minidev.json.JSONArray;
 
-import static org.apache.heron.healthmgr.HealthManager.CONF_METRICS_SOURCE_URL;
-import static org.apache.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_METRICS_SOURCE_URL;
+import static org.apache.heron.healthmgr.HealthPolicyConfig.CONF_TOPOLOGY_NAME;
 
 public class TrackerMetricsProvider implements MetricsProvider {
   public static final String CONF_CLUSTER = "CLUSTER";

File: heron/api/src/java/org/apache/heron/api/serializer/JavaSerializer.java
Patch:
@@ -40,7 +40,7 @@ public byte[] serialize(Object object) {
       oos.writeObject(object);
       oos.flush();
     } catch (IOException e) {
-      throw new RuntimeException(e);
+      throw new RuntimeException("Failed to serialize object: " + object.toString(), e);
     }
     return bos.toByteArray();
   }

File: heron/instance/src/java/org/apache/heron/instance/AbstractOutputCollector.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.locks.ReentrantLock;
 
 import com.google.protobuf.ByteString;
 import com.google.protobuf.Message;
@@ -46,6 +47,7 @@ public class AbstractOutputCollector {
   private long totalTuplesEmitted;
   private long totalBytesEmitted;
   private PhysicalPlanHelper helper;
+  public final ReentrantLock lock = new ReentrantLock();
 
   /**
    * The SuppressWarnings is only until TOPOLOGY_ENABLE_ACKING exists.
@@ -79,7 +81,7 @@ public AbstractOutputCollector(IPluggableSerializer serializer,
       }
     }
 
-    this.outputter = new OutgoingTupleCollection(helper, streamOutQueue);
+    this.outputter = new OutgoingTupleCollection(helper, streamOutQueue, lock);
   }
 
   public void updatePhysicalPlanHelper(PhysicalPlanHelper physicalPlanHelper) {

File: heron/spi/src/java/org/apache/heron/spi/common/ConfigLoader.java
Patch:
@@ -67,6 +67,7 @@ public static Config loadConfig(String heronHome, String configPath,
         .putAll(loadConfig(Context.schedulerFile(localConfig)))
         .putAll(loadConfig(Context.stateManagerFile(localConfig)))
         .putAll(loadConfig(Context.uploaderFile(localConfig)))
+        .putAll(loadConfig(Context.downloaderFile(localConfig)))
         .putAll(loadConfig(Context.statefulConfigFile(localConfig)))
         .putAll(loadConfig(releaseFile))
         .putAll(loadConfig(overrideConfigFile));
@@ -90,6 +91,7 @@ public static Config loadClusterConfig() {
         .putAll(loadConfig(Context.schedulerFile(clusterConfig)))
         .putAll(loadConfig(Context.stateManagerFile(clusterConfig)))
         .putAll(loadConfig(Context.uploaderFile(clusterConfig)))
+        .putAll(loadConfig(Context.downloaderFile(clusterConfig)))
         .putAll(loadConfig(Context.statefulConfigFile(clusterConfig)));
 
     // Add the override config at the end to replace any existing configs

File: heron/spi/tests/java/org/apache/heron/spi/common/ConfigLoaderTest.java
Patch:
@@ -87,15 +87,15 @@ private static void assertConfig(Config config,
                                    String heronConfigPath) {
     // assert that the config filenames passed to loadConfig are never null. If they are, the
     // configs defaults are not producing the config files.
-    PowerMockito.verifyStatic(times(10));
+    PowerMockito.verifyStatic(times(11));
     ConfigLoader.loadConfig(isNotNull(String.class));
     PowerMockito.verifyStatic(never());
     ConfigLoader.loadConfig(isNull(String.class));
 
     // addFromFile with an empty map means that the config file was not found. Of the 9 files that
     // are attempted to be loaded, all but 3 should be found (clientConfig, overrideConfigFile and
     // releaseFile do not exist)
-    PowerMockito.verifyStatic(times(3));
+    PowerMockito.verifyStatic(times(4));
     ConfigLoader.addFromFile(eq(new HashMap<String, Object>()));
 
     Set<String> tokenizedValues = new TreeSet<>();
@@ -124,6 +124,7 @@ private static void assertConfig(Config config,
     assertKeyValue(config, Key.STATEMGR_YAML, heronConfigPath + "/statemgr.yaml");
     assertKeyValue(config, Key.SYSTEM_YAML, heronConfigPath + "/heron_internals.yaml");
     assertKeyValue(config, Key.UPLOADER_YAML, heronConfigPath + "/uploader.yaml");
+    assertKeyValue(config, Key.DOWNLOADER_YAML, heronConfigPath + "/downloader.yaml");
 
     String binPath = config.getStringValue(Key.HERON_BIN);
     assertKeyValue(config, Key.EXECUTOR_BINARY, binPath + "/heron-executor");

File: heron/healthmgr/tests/java/org/apache/heron/healthmgr/HealthManagerTest.java
Patch:
@@ -64,7 +64,7 @@ public void testInitialize() throws Exception {
     when(adaptor.getSchedulerLocation(anyString())).thenReturn(schedulerLocation);
 
     AbstractModule baseModule = HealthManager
-        .buildMetricsProviderModule("127.0.0.1", TrackerMetricsProvider.class.getName());
+        .buildBaseModule("127.0.0.1", TrackerMetricsProvider.class.getName());
 
     HealthManager healthManager = new HealthManager(config, baseModule);
 

File: eco-heron-examples/src/java/org/apache/heron/examples/eco/RandomString.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.util.Random;
 

File: eco-heron-examples/src/java/org/apache/heron/examples/eco/TestPropertyHolder.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.io.Serializable;
 

File: eco-heron-examples/src/java/org/apache/heron/examples/eco/TestUnits.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 /**
  * Sample unit of measure enum

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/EvenAndOddBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 
 import java.util.Map;
@@ -20,7 +20,6 @@
 import org.apache.storm.topology.BasicOutputCollector;
 import org.apache.storm.topology.IBasicBolt;
 import org.apache.storm.topology.OutputFieldsDeclarer;
-
 import org.apache.storm.tuple.Fields;
 import org.apache.storm.tuple.Tuple;
 

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/LogInfoBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 
 import java.util.logging.Logger;

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestFibonacciSpout.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.util.Map;
 import java.util.Random;

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestIBasicPrintBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.util.Map;
 

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestNameCounter.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -23,7 +23,8 @@
 import org.apache.storm.tuple.Fields;
 import org.apache.storm.tuple.Tuple;
 
-import static com.twitter.heron.api.utils.Utils.tuple;
+import static org.apache.heron.api.utils.Utils.tuple;
+
 @SuppressWarnings({"serial", "rawtypes"})
 public class TestNameCounter extends BaseBasicBolt {
 

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestNameSpout.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.util.HashMap;
 import java.util.Map;

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestPrintBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import org.apache.storm.topology.BasicOutputCollector;
 import org.apache.storm.topology.OutputFieldsDeclarer;

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestPropertyHolder.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.io.Serializable;
 

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestUnits.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 /**
  * Sample unit of measure enum

File: eco-storm-examples/src/java/org/apache/heron/examples/eco/TestWindowBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.eco;
+package org.apache.heron.examples.eco;
 
 import java.util.Map;
 

File: eco/src/java/org/apache/heron/eco/builder/ComponentBuilder.java
Patch:
@@ -11,13 +11,13 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.builder;
+package org.apache.heron.eco.builder;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.List;
 
-import com.twitter.heron.eco.definition.BeanDefinition;
-import com.twitter.heron.eco.definition.EcoExecutionContext;
+import org.apache.heron.eco.definition.BeanDefinition;
+import org.apache.heron.eco.definition.EcoExecutionContext;
 
 public class ComponentBuilder {
   public void buildComponents(EcoExecutionContext context, ObjectBuilder objectBuilder)

File: eco/src/java/org/apache/heron/eco/definition/BeanDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class BeanDefinition extends ObjectDefinition {
 

File: eco/src/java/org/apache/heron/eco/definition/BeanListReference.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 import java.util.List;
 

File: eco/src/java/org/apache/heron/eco/definition/BeanReference.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class BeanReference {
   private String id;

File: eco/src/java/org/apache/heron/eco/definition/BoltDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class BoltDefinition extends ObjectDefinition {
 }

File: eco/src/java/org/apache/heron/eco/definition/ComponentStream.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class ComponentStream {
 

File: eco/src/java/org/apache/heron/eco/definition/ConfigurationMethodDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 import java.util.ArrayList;
 import java.util.LinkedHashMap;

File: eco/src/java/org/apache/heron/eco/definition/EcoExecutionContext.java
Patch:
@@ -11,13 +11,12 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import com.twitter.heron.api.Config;
-
+import org.apache.heron.api.Config;
 
 public class EcoExecutionContext {
 

File: eco/src/java/org/apache/heron/eco/definition/EcoTopologyDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: eco/src/java/org/apache/heron/eco/definition/GroupingDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 import java.util.List;
 

File: eco/src/java/org/apache/heron/eco/definition/ObjectDefinition.java
Patch:
@@ -11,8 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
-
+package org.apache.heron.eco.definition;
 
 import java.util.ArrayList;
 import java.util.LinkedHashMap;

File: eco/src/java/org/apache/heron/eco/definition/PropertyDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class PropertyDefinition {
 

File: eco/src/java/org/apache/heron/eco/definition/SpoutDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class SpoutDefinition extends ObjectDefinition {
 }

File: eco/src/java/org/apache/heron/eco/definition/StreamDefinition.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.definition;
+package org.apache.heron.eco.definition;
 
 public class StreamDefinition {
 

File: examples/src/java/org/apache/heron/examples/api/ExampleResources.java
Patch:
@@ -11,9 +11,9 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.api;
+package org.apache.heron.examples.api;
 
-import com.twitter.heron.common.basics.ByteAmount;
+import org.apache.heron.common.basics.ByteAmount;
 
 public final class ExampleResources {
 

File: examples/src/java/org/apache/heron/examples/streamlet/utils/StreamletUtils.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.examples.streamlet.utils;
+package org.apache.heron.examples.streamlet.utils;
 
 import java.util.List;
 import java.util.Random;

File: heron/api/src/java/org/apache/heron/api/Config.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api;
+package org.apache.heron.api;
 
 import java.nio.charset.StandardCharsets;
 import java.time.Duration;
@@ -43,7 +43,7 @@
 
 import javax.xml.bind.DatatypeConverter;
 
-import com.twitter.heron.common.basics.ByteAmount;
+import org.apache.heron.common.basics.ByteAmount;
 
 /**
  * Topology configs are specified as a plain old map. This class provides a

File: heron/api/src/java/org/apache/heron/api/Constants.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api;
+package org.apache.heron.api;
 
 public final class Constants {
 

File: heron/api/src/java/org/apache/heron/api/HeronTopology.java
Patch:
@@ -31,13 +31,13 @@
  */
 
 
-package com.twitter.heron.api;
+package org.apache.heron.api;
 
 import java.util.Map;
 import java.util.UUID;
 
-import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.api.utils.Utils;
+import org.apache.heron.api.generated.TopologyAPI;
+import org.apache.heron.api.utils.Utils;
 
 public class HeronTopology {
 

File: heron/api/src/java/org/apache/heron/api/Pair.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api;
+package org.apache.heron.api;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/api/bolt/BaseBasicBolt.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.util.Map;
 
-import com.twitter.heron.api.topology.BaseComponent;
-import com.twitter.heron.api.topology.TopologyContext;
+import org.apache.heron.api.topology.BaseComponent;
+import org.apache.heron.api.topology.TopologyContext;
 
 public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt {
 

File: heron/api/src/java/org/apache/heron/api/bolt/BaseRichBolt.java
Patch:
@@ -31,9 +31,9 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
-import com.twitter.heron.api.topology.BaseComponent;
+import org.apache.heron.api.topology.BaseComponent;
 
 public abstract class BaseRichBolt extends BaseComponent implements IRichBolt {
   private static final long serialVersionUID = -2269376231370074742L;

File: heron/api/src/java/org/apache/heron/api/bolt/BaseStatefulWindowedBolt.java
Patch:
@@ -11,12 +11,12 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.io.Serializable;
 import java.time.Duration;
 
-import com.twitter.heron.api.windowing.TimestampExtractor;
+import org.apache.heron.api.windowing.TimestampExtractor;
 
 public abstract class BaseStatefulWindowedBolt<K extends Serializable, V extends Serializable>
     extends BaseWindowedBolt

File: heron/api/src/java/org/apache/heron/api/bolt/BasicOutputCollector.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Tuple;
-import com.twitter.heron.api.utils.Utils;
+import org.apache.heron.api.tuple.Tuple;
+import org.apache.heron.api.utils.Utils;
 
 
 public class BasicOutputCollector implements IBasicOutputCollector {

File: heron/api/src/java/org/apache/heron/api/bolt/IBasicOutputCollector.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.util.List;
 

File: heron/api/src/java/org/apache/heron/api/bolt/IBolt.java
Patch:
@@ -31,13 +31,13 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.io.Serializable;
 import java.util.Map;
 
-import com.twitter.heron.api.topology.TopologyContext;
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.topology.TopologyContext;
+import org.apache.heron.api.tuple.Tuple;
 
 /**
  * An IBolt represents a component that takes tuples as input and produces tuples

File: heron/api/src/java/org/apache/heron/api/bolt/IErrorReporter.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 public interface IErrorReporter {
   void reportError(Throwable error);

File: heron/api/src/java/org/apache/heron/api/bolt/IOutputCollector.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.util.Collection;
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 public interface IOutputCollector extends IErrorReporter {
   /**

File: heron/api/src/java/org/apache/heron/api/bolt/IRichBolt.java
Patch:
@@ -31,13 +31,13 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
-import com.twitter.heron.api.topology.IComponent;
+import org.apache.heron.api.topology.IComponent;
 
 /**
  * When writing topologies using Java, {@link IRichBolt} and
- * {@link com.twitter.heron.api.spout.IRichSpout} are the main interfaces
+ * {@link org.apache.heron.api.spout.IRichSpout} are the main interfaces
  * to use to implement components of the topology.
  */
 public interface IRichBolt extends IBolt, IComponent {

File: heron/api/src/java/org/apache/heron/api/bolt/IStatefulWindowedBolt.java
Patch:
@@ -12,11 +12,11 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.io.Serializable;
 
-import com.twitter.heron.api.topology.IStatefulComponent;
+import org.apache.heron.api.topology.IStatefulComponent;
 
 public interface IStatefulWindowedBolt<K extends Serializable, V extends Serializable>
     extends IStatefulComponent<K, V>, IWindowedBolt {

File: heron/api/src/java/org/apache/heron/api/bolt/OutputCollector.java
Patch:
@@ -31,14 +31,14 @@
  */
 
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Tuple;
-import com.twitter.heron.api.utils.Utils;
+import org.apache.heron.api.tuple.Tuple;
+import org.apache.heron.api.utils.Utils;
 
 /**
  * This output collector exposes the API for emitting tuples from an IRichBolt.

File: heron/api/src/java/org/apache/heron/api/bolt/StatefulWindowedBoltExecutor.java
Patch:
@@ -12,12 +12,12 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.api.bolt;
+package org.apache.heron.api.bolt;
 
 import java.io.Serializable;
 
-import com.twitter.heron.api.state.HashMapState;
-import com.twitter.heron.api.state.State;
+import org.apache.heron.api.state.HashMapState;
+import org.apache.heron.api.state.State;
 
 @SuppressWarnings({"rawtypes", "unchecked", "HiddenField"})
 public class StatefulWindowedBoltExecutor<K extends Serializable, V extends Serializable>

File: heron/api/src/java/org/apache/heron/api/exception/AlreadyAliveException.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.exception;
+package org.apache.heron.api.exception;
 
 public class AlreadyAliveException extends Exception {
   private static final long serialVersionUID = -6584762522175817526L;

File: heron/api/src/java/org/apache/heron/api/exception/FailedException.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.exception;
+package org.apache.heron.api.exception;
 
 public class FailedException extends RuntimeException {
   private static final long serialVersionUID = 7459893047828010291L;

File: heron/api/src/java/org/apache/heron/api/exception/InvalidTopologyException.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.exception;
+package org.apache.heron.api.exception;
 
 public class InvalidTopologyException extends Exception {
   private static final long serialVersionUID = 569757985177991157L;

File: heron/api/src/java/org/apache/heron/api/exception/ReportedFailedException.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.exception;
+package org.apache.heron.api.exception;
 
 public class ReportedFailedException extends FailedException {
   private static final long serialVersionUID = 4669648860978454563L;

File: heron/api/src/java/org/apache/heron/api/exception/TopologySubmissionException.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.api.exception;
+package org.apache.heron.api.exception;
 
 /**
  * Thrown to indicate that the application has attempted to submit an invalid topology.

File: heron/api/src/java/org/apache/heron/api/grouping/CustomStreamGrouping.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.grouping;
+package org.apache.heron.api.grouping;
 
 import java.io.Serializable;
 import java.util.List;
 
-import com.twitter.heron.api.topology.TopologyContext;
+import org.apache.heron.api.topology.TopologyContext;
 
 public interface CustomStreamGrouping extends Serializable {
 

File: heron/api/src/java/org/apache/heron/api/hooks/info/BoltAckInfo.java
Patch:
@@ -31,11 +31,11 @@
  */
 
 
-package com.twitter.heron.api.hooks.info;
+package org.apache.heron.api.hooks.info;
 
 import java.time.Duration;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 public class BoltAckInfo {
   private Tuple tuple;

File: heron/api/src/java/org/apache/heron/api/hooks/info/BoltExecuteInfo.java
Patch:
@@ -31,11 +31,11 @@
  */
 
 
-package com.twitter.heron.api.hooks.info;
+package org.apache.heron.api.hooks.info;
 
 import java.time.Duration;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 public class BoltExecuteInfo {
   private final Tuple tuple;

File: heron/api/src/java/org/apache/heron/api/hooks/info/BoltFailInfo.java
Patch:
@@ -31,11 +31,11 @@
  */
 
 
-package com.twitter.heron.api.hooks.info;
+package org.apache.heron.api.hooks.info;
 
 import java.time.Duration;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 public class BoltFailInfo {
   private Tuple tuple;

File: heron/api/src/java/org/apache/heron/api/hooks/info/EmitInfo.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.hooks.info;
+package org.apache.heron.api.hooks.info;
 
 import java.util.Collection;
 import java.util.List;

File: heron/api/src/java/org/apache/heron/api/hooks/info/SpoutAckInfo.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.hooks.info;
+package org.apache.heron.api.hooks.info;
 
 import java.time.Duration;
 

File: heron/api/src/java/org/apache/heron/api/hooks/info/SpoutFailInfo.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.hooks.info;
+package org.apache.heron.api.hooks.info;
 
 import java.time.Duration;
 

File: heron/api/src/java/org/apache/heron/api/metric/AssignableMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 public class AssignableMetric<T> implements IMetric<T> {
   private T value;

File: heron/api/src/java/org/apache/heron/api/metric/CombinedMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 public class CombinedMetric<T> implements IMetric<T> {
   private final ICombiner<T> combiner;

File: heron/api/src/java/org/apache/heron/api/metric/ConcurrentCountMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 // A thread safe count metric
 public class ConcurrentCountMetric implements IMetric<Long> {

File: heron/api/src/java/org/apache/heron/api/metric/CountMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 public class CountMetric implements IMetric<Long> {
   private long value = 0;

File: heron/api/src/java/org/apache/heron/api/metric/CountStatAndMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.util.HashMap;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/metric/GlobalMetrics.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.io.Serializable;
 import java.time.Duration;

File: heron/api/src/java/org/apache/heron/api/metric/ICombiner.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 /**
  * Interface for classes that are able to combine multiple objects into one result.

File: heron/api/src/java/org/apache/heron/api/metric/IMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 /**
  * Interface for a metric that can be tracked

File: heron/api/src/java/org/apache/heron/api/metric/IMetricsRegister.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 
 public interface IMetricsRegister {

File: heron/api/src/java/org/apache/heron/api/metric/IReducer.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 /**
  * Apply an update to an accumulator for which a result can be extracted.

File: heron/api/src/java/org/apache/heron/api/metric/LatencyStatAndMetric.java
Patch:
@@ -30,13 +30,13 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.util.HashMap;
 import java.util.Map;
 import java.util.TimerTask;
 
-import com.twitter.heron.api.utils.Utils;
+import org.apache.heron.api.utils.Utils;
 
 /**
  * Acts as a Latency Metric, but also keeps track of approximate latency

File: heron/api/src/java/org/apache/heron/api/metric/MeanReducer.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 public class MeanReducer implements IReducer<MeanReducerState, Number, Double> {
   public MeanReducerState init() {

File: heron/api/src/java/org/apache/heron/api/metric/MeanReducerState.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 public class MeanReducerState {
   public int count = 0;

File: heron/api/src/java/org/apache/heron/api/metric/MetricStatTimer.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.util.Timer;
 

File: heron/api/src/java/org/apache/heron/api/metric/MultiAssignableMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.util.HashMap;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/metric/MultiCountMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.util.HashMap;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/metric/MultiReducedMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 import java.util.HashMap;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/metric/ReducedMetric.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.metric;
+package org.apache.heron.api.metric;
 
 /**
  * Apply an update to an metric using an IReducer for which a result can be extracted.

File: heron/api/src/java/org/apache/heron/api/serializer/IPluggableSerializer.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.serializer;
+package org.apache.heron.api.serializer;
 
 import java.util.Map;
 

File: heron/api/src/java/org/apache/heron/api/serializer/JavaSerializer.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.serializer;
+package org.apache.heron.api.serializer;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;

File: heron/api/src/java/org/apache/heron/api/spout/BaseRichSpout.java
Patch:
@@ -31,9 +31,9 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
-import com.twitter.heron.api.topology.BaseComponent;
+import org.apache.heron.api.topology.BaseComponent;
 
 public abstract class BaseRichSpout extends BaseComponent implements IRichSpout {
   private static final long serialVersionUID = 743568889496601081L;

File: heron/api/src/java/org/apache/heron/api/spout/IMultiSchemableSpout.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 public interface IMultiSchemableSpout {
   MultiScheme getScheme();

File: heron/api/src/java/org/apache/heron/api/spout/IRichSpout.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
-import com.twitter.heron.api.topology.IComponent;
+import org.apache.heron.api.topology.IComponent;
 
 /**
- * When writing topologies using Java, {@link com.twitter.heron.api.bolt.IRichBolt} and
+ * When writing topologies using Java, {@link org.apache.heron.api.bolt.IRichBolt} and
  * {@link IRichSpout} are the main interfaces
  * to use to implement components of the topology.
  */

File: heron/api/src/java/org/apache/heron/api/spout/ISchemableSpout.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 
 public interface ISchemableSpout {

File: heron/api/src/java/org/apache/heron/api/spout/ISpout.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.io.Serializable;
 import java.util.Map;
 
-import com.twitter.heron.api.topology.TopologyContext;
+import org.apache.heron.api.topology.TopologyContext;
 
 /**
  * ISpout is the core interface for implementing spouts. A Spout is responsible
@@ -46,7 +46,7 @@
  * that DAG has been successfully processed, it will send an ack message to the Spout.
  * <p>
  * <p>If a tuple fails to be fully process within the configured timeout for the
- * topology (see {@link com.twitter.heron.api.Config}), Heron will send a fail
+ * topology (see {@link org.apache.heron.api.Config}), Heron will send a fail
  * message to the spout
  * for the message.</p>
  * <p>

File: heron/api/src/java/org/apache/heron/api/spout/ISpoutOutputCollector.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.util.List;
 

File: heron/api/src/java/org/apache/heron/api/spout/MultiScheme.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.io.Serializable;
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.tuple.Fields;
 
 public interface MultiScheme extends Serializable {
   Iterable<List<Object>> deserialize(byte[] ser);

File: heron/api/src/java/org/apache/heron/api/spout/RawMultiScheme.java
Patch:
@@ -31,14 +31,14 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.tuple.Fields;
 
-import static com.twitter.heron.api.utils.Utils.tuple;
 import static java.util.Arrays.asList;
+import static org.apache.heron.api.utils.Utils.tuple;
 
 public class RawMultiScheme implements MultiScheme {
   private static final long serialVersionUID = 1540454777373652254L;

File: heron/api/src/java/org/apache/heron/api/spout/RawScheme.java
Patch:
@@ -31,13 +31,13 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.tuple.Fields;
 
-import static com.twitter.heron.api.utils.Utils.tuple;
+import static org.apache.heron.api.utils.Utils.tuple;
 
 public class RawScheme implements Scheme {
   private static final long serialVersionUID = 4975778817451590776L;

File: heron/api/src/java/org/apache/heron/api/spout/Scheme.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.io.Serializable;
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.tuple.Fields;
 
 
 public interface Scheme extends Serializable {

File: heron/api/src/java/org/apache/heron/api/spout/SchemeAsMultiScheme.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.spout;
+package org.apache.heron.api.spout;
 
 import java.util.Arrays;
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.tuple.Fields;
 
 public class SchemeAsMultiScheme implements MultiScheme {
   private static final long serialVersionUID = -7993224027057349150L;

File: heron/api/src/java/org/apache/heron/api/state/HashMapState.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.state;
+package org.apache.heron.api.state;
 
 import java.io.Serializable;
 import java.util.HashMap;

File: heron/api/src/java/org/apache/heron/api/state/State.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.state;
+package org.apache.heron.api.state;
 
 import java.io.Serializable;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/topology/BaseComponent.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.util.Map;
 

File: heron/api/src/java/org/apache/heron/api/topology/BaseConfigurationDeclarer.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import com.twitter.heron.api.Config;
+import org.apache.heron.api.Config;
 
 public abstract class BaseConfigurationDeclarer<T extends ComponentConfigurationDeclarer<?>>
     implements ComponentConfigurationDeclarer<T> {

File: heron/api/src/java/org/apache/heron/api/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.util.Map;
 

File: heron/api/src/java/org/apache/heron/api/topology/GeneralTopologyContext.java
Patch:
@@ -31,14 +31,14 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
-import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.generated.TopologyAPI;
+import org.apache.heron.api.tuple.Fields;
 
 public interface GeneralTopologyContext {
   /**

File: heron/api/src/java/org/apache/heron/api/topology/IComponent.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.io.Serializable;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/topology/IStatefulComponent.java
Patch:
@@ -31,11 +31,11 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.io.Serializable;
 
-import com.twitter.heron.api.state.State;
+import org.apache.heron.api.state.State;
 
 /**
  * Defines a component that saves its internal state in the State interface

File: heron/api/src/java/org/apache/heron/api/topology/IUpdatable.java
Patch:
@@ -30,10 +30,10 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
-import com.twitter.heron.classification.InterfaceAudience;
-import com.twitter.heron.classification.InterfaceStability;
+import org.apache.heron.classification.InterfaceAudience;
+import org.apache.heron.classification.InterfaceStability;
 
 /**
  * Bolt or spout instances should implement this method if they wish to be informed of changed to

File: heron/api/src/java/org/apache/heron/api/topology/OutputFieldsDeclarer.java
Patch:
@@ -31,9 +31,9 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
-import com.twitter.heron.api.tuple.Fields;
+import org.apache.heron.api.tuple.Fields;
 
 public interface OutputFieldsDeclarer {
   /**

File: heron/api/src/java/org/apache/heron/api/topology/SpoutDeclarer.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.topology;
+package org.apache.heron.api.topology;
 
 import java.util.Map;
 
-import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.api.spout.IRichSpout;
+import org.apache.heron.api.generated.TopologyAPI;
+import org.apache.heron.api.spout.IRichSpout;
 
 public class SpoutDeclarer extends BaseComponentDeclarer<SpoutDeclarer> {
   private OutputFieldsGetter output;

File: heron/api/src/java/org/apache/heron/api/tuple/Fields.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.tuple;
+package org.apache.heron.api.tuple;
 
 import java.io.Serializable;
 import java.util.ArrayList;

File: heron/api/src/java/org/apache/heron/api/tuple/Tuple.java
Patch:
@@ -31,12 +31,12 @@
  */
 
 
-package com.twitter.heron.api.tuple;
+package org.apache.heron.api.tuple;
 
 import java.io.Serializable;
 import java.util.List;
 
-import com.twitter.heron.api.generated.TopologyAPI;
+import org.apache.heron.api.generated.TopologyAPI;
 
 /**
  * The tuple is the main data structure in Heron. A tuple is a named list of values,

File: heron/api/src/java/org/apache/heron/api/tuple/Values.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.tuple;
+package org.apache.heron.api.tuple;
 
 import java.util.ArrayList;
 

File: heron/api/src/java/org/apache/heron/api/utils/DefaultMaxSpoutPendingTuner.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.utils;
+package org.apache.heron.api.utils;
 
 /**
  * This is a class that helps to auto tune the max spout pending value

File: heron/api/src/java/org/apache/heron/api/utils/TupleUtils.java
Patch:
@@ -30,10 +30,10 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.utils;
+package org.apache.heron.api.utils;
 
-import com.twitter.heron.api.Constants;
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.Constants;
+import org.apache.heron.api.tuple.Tuple;
 
 public final class TupleUtils {
   private TupleUtils() {

File: heron/api/src/java/org/apache/heron/api/utils/Utils.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.utils;
+package org.apache.heron.api.utils;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -49,8 +49,8 @@
 
 import com.google.protobuf.ByteString;
 
-import com.twitter.heron.api.Config;
-import com.twitter.heron.api.generated.TopologyAPI;
+import org.apache.heron.api.Config;
+import org.apache.heron.api.generated.TopologyAPI;
 
 public final class Utils {
   private static final Logger LOG = Logger.getLogger(Utils.class.getName());

File: heron/api/src/java/org/apache/heron/api/windowing/DefaultEvictionContext.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 public class DefaultEvictionContext implements EvictionContext {
 

File: heron/api/src/java/org/apache/heron/api/windowing/Event.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/api/windowing/EventImpl.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/api/windowing/EvictionContext.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 /**
  * Context information that can be used by the eviction policy

File: heron/api/src/java/org/apache/heron/api/windowing/EvictionPolicy.java
Patch:
@@ -31,7 +31,7 @@
  */
 
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/api/windowing/TimestampExtractor.java
Patch:
@@ -30,11 +30,11 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 /**
  * Interface to be implemented for extracting timestamp from a tuple.

File: heron/api/src/java/org/apache/heron/api/windowing/TriggerHandler.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 /**
  * The callback fired by {@link TriggerPolicy} when the trigger

File: heron/api/src/java/org/apache/heron/api/windowing/TriggerPolicy.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 import java.util.Map;

File: heron/api/src/java/org/apache/heron/api/windowing/TupleFieldTimestampExtractor.java
Patch:
@@ -30,9 +30,9 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 /**
  * A {@link TimestampExtractor} that extracts timestamp from a specific field in the tuple.

File: heron/api/src/java/org/apache/heron/api/windowing/TupleWindow.java
Patch:
@@ -30,10 +30,10 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 /**
  * A {@link Window} that contains {@link Tuple} objects.

File: heron/api/src/java/org/apache/heron/api/windowing/TupleWindowImpl.java
Patch:
@@ -30,11 +30,11 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 /**
  * Holds the expired, new and current tuples in a window.

File: heron/api/src/java/org/apache/heron/api/windowing/WaterMarkEvent.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/api/windowing/WaterMarkEventGenerator.java
Patch:
@@ -31,16 +31,16 @@
  */
 
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.io.Serializable;
 import java.time.Duration;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.twitter.heron.api.Config;
-import com.twitter.heron.api.generated.TopologyAPI;
+import org.apache.heron.api.Config;
+import org.apache.heron.api.generated.TopologyAPI;
 
 /**
  * Tracks tuples across input streams and periodically emits watermark events.

File: heron/api/src/java/org/apache/heron/api/windowing/Window.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.util.List;
 

File: heron/api/src/java/org/apache/heron/api/windowing/WindowLifecycleListener.java
Patch:
@@ -30,7 +30,7 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.util.List;
 

File: heron/api/src/java/org/apache/heron/api/windowing/WindowingConfigs.java
Patch:
@@ -30,12 +30,12 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing;
+package org.apache.heron.api.windowing;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import com.twitter.heron.api.tuple.Tuple;
+import org.apache.heron.api.tuple.Tuple;
 
 public class WindowingConfigs extends HashMap<String, Object> {
 

File: heron/api/src/java/org/apache/heron/api/windowing/evictors/WatermarkTimeEvictionPolicy.java
Patch:
@@ -30,11 +30,11 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing.evictors;
+package org.apache.heron.api.windowing.evictors;
 
 import java.io.Serializable;
 
-import com.twitter.heron.api.windowing.Event;
+import org.apache.heron.api.windowing.Event;
 
 /**
  * An eviction policy that evicts events based on time duration taking

File: heron/api/src/java/org/apache/heron/api/windowing/triggers/WatermarkCountTriggerPolicy.java
Patch:
@@ -30,13 +30,13 @@
  * limitations under the License.
  */
 
-package com.twitter.heron.api.windowing.triggers;
+package org.apache.heron.api.windowing.triggers;
 
 import java.io.Serializable;
 import java.util.List;
 
-import com.twitter.heron.api.windowing.DefaultEvictionContext;
-import com.twitter.heron.api.windowing.Event;
+import org.apache.heron.api.windowing.DefaultEvictionContext;
+import org.apache.heron.api.windowing.Event;
 
 /**
  * A trigger policy that tracks event counts and sets the context for

File: heron/api/src/java/org/apache/heron/classification/InterfaceAudience.java
Patch:
@@ -11,7 +11,7 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-package com.twitter.heron.classification;
+package org.apache.heron.classification;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Inherited;

File: heron/api/src/java/org/apache/heron/classification/InterfaceStability.java
Patch:
@@ -11,7 +11,7 @@
 // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 // See the License for the specific language governing permissions and
 // limitations under the License.
-package com.twitter.heron.classification;
+package org.apache.heron.classification;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Inherited;

File: heron/api/src/java/org/apache/heron/streamlet/Builder.java
Patch:
@@ -12,9 +12,9 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
-import com.twitter.heron.streamlet.impl.BuilderImpl;
+import org.apache.heron.streamlet.impl.BuilderImpl;
 
 /**
  * Builder is used to register all sources. Builder thus keeps track

File: heron/api/src/java/org/apache/heron/streamlet/Context.java
Patch:
@@ -12,13 +12,13 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.Map;
 import java.util.function.Supplier;
 
-import com.twitter.heron.api.state.State;
+import org.apache.heron.api.state.State;
 
 /**
  * Context is the information available at runtime for operators like transform.

File: heron/api/src/java/org/apache/heron/streamlet/JoinType.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 public enum JoinType {
   /**

File: heron/api/src/java/org/apache/heron/streamlet/KeyValue.java
Patch:
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/streamlet/KeyedWindow.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 
 import java.io.Serializable;

File: heron/api/src/java/org/apache/heron/streamlet/SerializableBiFunction.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.BiFunction;

File: heron/api/src/java/org/apache/heron/streamlet/SerializableBinaryOperator.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 /**
  * All user supplied transformation functions have to be serializable.

File: heron/api/src/java/org/apache/heron/streamlet/SerializableConsumer.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Consumer;

File: heron/api/src/java/org/apache/heron/streamlet/SerializableFunction.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Function;

File: heron/api/src/java/org/apache/heron/streamlet/SerializablePredicate.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Predicate;

File: heron/api/src/java/org/apache/heron/streamlet/SerializableSupplier.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Supplier;

File: heron/api/src/java/org/apache/heron/streamlet/SerializableTransformer.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Consumer;

File: heron/api/src/java/org/apache/heron/streamlet/Sink.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 

File: heron/api/src/java/org/apache/heron/streamlet/Source.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.Collection;

File: heron/api/src/java/org/apache/heron/streamlet/Streamlet.java
Patch:
@@ -12,11 +12,11 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 import java.util.List;
 
-import com.twitter.heron.classification.InterfaceStability;
+import org.apache.heron.classification.InterfaceStability;
 
 /**
  * A Streamlet is a (potentially unbounded) ordered collection of tuples.

File: heron/api/src/java/org/apache/heron/streamlet/Window.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet;
+package org.apache.heron.streamlet;
 
 
 import java.io.Serializable;

File: heron/api/src/java/org/apache/heron/streamlet/impl/KryoSerializer.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.streamlet.impl;
+package org.apache.heron.streamlet.impl;
 
 import java.math.BigInteger;
 import java.util.ArrayList;
@@ -28,7 +28,7 @@
 import com.esotericsoftware.kryo.serializers.DefaultSerializers;
 import com.esotericsoftware.kryo.serializers.MapSerializer;
 
-import com.twitter.heron.api.serializer.IPluggableSerializer;
+import org.apache.heron.api.serializer.IPluggableSerializer;
 
 /**
  * KryoSerializer is a wrapper around Heron's IPluggableSerializer.

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/common/PhysicalPlanProvider.java
Patch:
@@ -54,7 +54,7 @@ public PhysicalPlanProvider(SchedulerStateManagerAdaptor stateManagerAdaptor,
       @Override
       public synchronized void onEvent(TopologyUpdate event) {
         LOG.info(
-            "Received topology update event, invalidating cached PhysicalPlan: " + event.getName());
+            "Received topology update event, invalidating cached PhysicalPlan: " + event.type());
         physicalPlan = null;
       }
     });
@@ -64,8 +64,8 @@ public synchronized void onEvent(TopologyUpdate event) {
        */
       @Override
       public synchronized void onEvent(ContainerRestart event) {
-        LOG.info("Received conatiner restart event, invalidating cached PhysicalPlan: "
-            + event.getName());
+        LOG.info("Received container restart event, invalidating cached PhysicalPlan: "
+            + event.type());
         physicalPlan = null;
       }
     });

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/common/PackingPlanProviderTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.mockito.Mockito.when;
 
 public class PackingPlanProviderTest {
-  String topologyName = "topologyName";
+  private String topologyName = "topologyName";
   private EventManager eventManager = new EventManager();
 
   @Test
@@ -67,7 +67,7 @@ public void refreshesPackingPlanOnUpdate() {
     PackingPlan packing = provider.get();
     Assert.assertEquals(1, packing.getContainers().size());
 
-    provider.onEvent(new TopologyUpdate());
+    provider.onEvent(new TopologyUpdate(null, null));
     provider.get();
     verify(adaptor, times(2)).getPackingPlan(topologyName);
   }

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/common/TopologyProviderTest.java
Patch:
@@ -58,7 +58,7 @@ public void refreshesPackingPlanOnUpdate() {
     Assert.assertEquals(2, provider.get().getBoltsCount());
 
     // once fetched it is cached
-    provider.onEvent(new TopologyUpdate());
+    provider.onEvent(new TopologyUpdate(null, null));
     provider.get();
     verify(adaptor, times(2)).getPhysicalPlan(topology);
   }

File: eco/src/java/com/twitter/heron/eco/builder/BoltBuilder.java
Patch:
@@ -21,7 +21,7 @@
 
 public class BoltBuilder {
 
-  protected void buildBolts(EcoExecutionContext executionContext,
+  public void buildBolts(EcoExecutionContext executionContext,
                             ObjectBuilder objectBuilder)
       throws IllegalAccessException, InstantiationException, ClassNotFoundException,
       NoSuchFieldException, InvocationTargetException {

File: eco/src/java/com/twitter/heron/eco/builder/ComponentBuilder.java
Patch:
@@ -20,7 +20,7 @@
 import com.twitter.heron.eco.definition.EcoExecutionContext;
 
 public class ComponentBuilder {
-  protected void buildComponents(EcoExecutionContext context, ObjectBuilder objectBuilder)
+  public void buildComponents(EcoExecutionContext context, ObjectBuilder objectBuilder)
       throws ClassNotFoundException,
       IllegalAccessException, InstantiationException,
       NoSuchFieldException, InvocationTargetException {

File: eco/src/java/com/twitter/heron/eco/builder/storm/SpoutBuilder.java
Patch:
@@ -11,13 +11,15 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.builder;
+package com.twitter.heron.eco.builder.storm;
 
 import java.lang.reflect.InvocationTargetException;
 
 import org.apache.storm.topology.IRichSpout;
 import org.apache.storm.topology.TopologyBuilder;
 
+import com.twitter.heron.eco.builder.ObjectBuilder;
+
 import com.twitter.heron.eco.definition.EcoExecutionContext;
 import com.twitter.heron.eco.definition.EcoTopologyDefinition;
 import com.twitter.heron.eco.definition.ObjectDefinition;

File: eco/src/java/com/twitter/heron/eco/builder/storm/StreamBuilder.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.eco.builder;
+package com.twitter.heron.eco.builder.storm;
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.HashMap;
@@ -27,6 +27,8 @@
 import org.apache.storm.tuple.Fields;
 import org.apache.storm.utils.Utils;
 
+import com.twitter.heron.eco.builder.ObjectBuilder;
+
 import com.twitter.heron.eco.definition.ComponentStream;
 import com.twitter.heron.eco.definition.EcoExecutionContext;
 import com.twitter.heron.eco.definition.EcoTopologyDefinition;

File: eco/tests/java/com/twitter/heron/eco/parser/EcoParserTest.java
Patch:
@@ -172,6 +172,7 @@ public class EcoParserTest {
       + "---\n"
       + "\n"
       + "name: \"kafka-topology\"\n"
+      + "type: \"heron\"\n"
       + "\n"
       + "# Components\n"
       + "# Components are analagous to Spring beans. They are meant to be used as constructor,\n"
@@ -349,6 +350,7 @@ public void testParseFromInputStream_VerifyComponents_MapsAsExpected() throws Ex
     List<BeanDefinition> components = topologyDefinition.getComponents();
 
     assertEquals("kafka-topology", topologyDefinition.getName());
+    assertEquals("heron", topologyDefinition.getType());
     assertEquals(4, components.size());
 
     BeanDefinition stringSchemeComponent = components.get(0);

File: heron/common/src/java/com/twitter/heron/common/network/HeronClient.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Implements this class could handle some following socket related behaviors:
  * 1. handleRead(SelectableChannel), which read data from a socket and convert into incomingPacket.
- * It could handle the conditions of closedConnection, normal Reading and partial Reading. When a
+ * It could handle the conditions of closedConnection, normal Reading and partial Reading. When an
  * incomingPacket is read, it will be pass to handlePacket(), which will convert incomingPackets to
  * messages and call onIncomingMessage(message), which should be implemented by its child class.
  * <p>

File: heron/downloaders/src/java/com/twitter/heron/downloader/FileDownloader.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Used to download files via heron_downloader that has a URI prefix of "file://"
- * E.g. ./heron_dowloader file:///foo/bar /path/location
+ * E.g. ./heron_downloader file:///foo/bar /path/location
  */
 public class FileDownloader implements Downloader {
   @Override

File: heron/instance/src/java/com/twitter/heron/instance/HeronInstance.java
Patch:
@@ -302,7 +302,7 @@ public static void main(String[] args) throws IOException {
     String logMsg = "\nStarting instance " + instanceId + " for topology " + topologyName
         + " and topologyId " + topologyId + " for component " + componentName
         + " with taskId " + taskId + " and componentIndex " + componentIndex
-        + " and stmgrId " + streamId + " and stmgrPort " + streamPort
+        + " and streamManagerId " + streamId + " and streamManagerPort " + streamPort
         + " and metricsManagerPort " + metricsPort;
 
     if (remoteDebuggerPort != null) {

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPacking.java
Patch:
@@ -122,7 +122,7 @@ public void initialize(Config config, TopologyAPI.Topology inputTopology) {
         Context.instanceDisk(config));
     resetToFirstContainer();
 
-    LOG.info(String.format("Initalizing ResourceCompliantRRPacking. "
+    LOG.info(String.format("Initializing ResourceCompliantRRPacking. "
         + "CPU default: %f, RAM default: %s, DISK default: %s.",
         this.defaultInstanceResources.getCpu(),
         this.defaultInstanceResources.getRam().toString(),
@@ -308,7 +308,7 @@ private void assignInstancesToContainers(PackingPlanBuilder planBuilder,
    * Attempts to place the instance the current containerId.
    *
    * @param planBuilder packing plan builder
-   * @param componentName the componet name of the instance that needs to be placed in the container
+   * @param componentName the component name of the instance that needs to be placed in the container
    * @throws ResourceExceededException if there is no room on the current container for the instance
    */
   private void strictRRpolicy(PackingPlanBuilder planBuilder,

File: heron/schedulers/src/java/com/twitter/heron/scheduler/nomad/NomadScheduler.java
Patch:
@@ -275,7 +275,7 @@ Task getTask(String taskName, int containerIndex, Resource containerResource) {
   }
 
   /**
-   * Get the task spec for using the docker driver in Noad
+   * Get the task spec for using the docker driver in Nomad
    * In docker mode, Heron will be use in docker containers
    */
   Task getTaskSpecDockerDriver(Task task, String taskName, int containerIndex) {

File: heron/instance/tests/java/com/twitter/heron/resource/Constants.java
Patch:
@@ -47,7 +47,7 @@ public final class Constants {
   // For bazel, we use the env var to get the path of heron internals config file
   public static final String BUILD_TEST_SRCDIR = "TEST_SRCDIR";
   public static final String BUILD_TEST_HERON_INTERNALS_CONFIG_PATH =
-      "/__main__/heron/config/src/yaml/conf/test/test_heron_internals.yaml";
+      "/org_apache_heron/heron/config/src/yaml/conf/test/test_heron_internals.yaml";
 
   private Constants() {
   }

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/sink/metricscache/MetricsCacheSinkTest.java
Patch:
@@ -85,7 +85,8 @@ public void before() {
 
     String filePath =
         Paths.get(runFiles,
-                  "/__main__/heron/config/src/yaml/conf/test/test_heron_internals.yaml").toString();
+                  "/org_apache_heron/heron/config/src/yaml/conf/test/test_heron_internals.yaml")
+             .toString();
     SystemConfig.Builder sb = SystemConfig.newBuilder(true)
         .putAll(filePath, true)
         .put(SystemConfigKey.HERON_METRICS_EXPORT_INTERVAL, 1);

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSinkTest.java
Patch:
@@ -86,7 +86,8 @@ public void before() {
 
     String filePath =
         Paths.get(runFiles,
-                  "/__main__/heron/config/src/yaml/conf/test/test_heron_internals.yaml").toString();
+                  "/org_apache_heron/heron/config/src/yaml/conf/test/test_heron_internals.yaml")
+             .toString();
     SystemConfig.Builder sb = SystemConfig.newBuilder(true)
         .putAll(filePath, true)
         .put(SystemConfigKey.HERON_METRICS_EXPORT_INTERVAL, 1);

File: heron/spi/tests/java/com/twitter/heron/spi/common/ConfigLoaderTest.java
Patch:
@@ -38,7 +38,7 @@
 @PrepareForTest(ConfigLoader.class)
 public class ConfigLoaderTest {
   private static final String TEST_DATA_PATH =
-      "/__main__/heron/spi/tests/java/com/twitter/heron/spi/common/testdata";
+      "/org_apache_heron/heron/spi/tests/java/com/twitter/heron/spi/common/testdata";
 
   private final String heronHome =
       Paths.get(System.getenv("JAVA_RUNFILES"), TEST_DATA_PATH).toString();

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConstantsTest.java
Patch:
@@ -16,7 +16,7 @@
 
 final class LocalFileSystemConstantsTest {
   public static final String TEST_DATA_PATH =
-      "/__main__/heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/testdata";
+      "/org_apache_heron/heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/testdata";
 
   private LocalFileSystemConstantsTest() {
   }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/JoinOperator.java
Patch:
@@ -133,7 +133,7 @@ private void evaluateJoinMap(Map<K, Pair<List<V1>, List<V2>>> joinMap, TupleWind
           }
           break;
         default:
-          throw new RuntimeException("Unknown join type " + joinType.name());
+          throw new RuntimeException("Unknown join type: " + joinType.name());
       }
     }
   }

File: heron/tools/apiserver/src/java/com/twitter/heron/apiserver/resources/TopologyResource.java
Patch:
@@ -502,7 +502,8 @@ private Config createConfig(Collection<Pair<String, Object>> keyValues,
   }
 
   private boolean isLocalMode() {
-    return "local".equalsIgnoreCase(getCluster()) || "standalone".equalsIgnoreCase(getCluster());
+    return "local".equalsIgnoreCase(getCluster()) || "standalone".equalsIgnoreCase(getCluster())
+        || "nomad".equalsIgnoreCase(getCluster());
   }
 
   private static Map<String, String> getSubmitOverrides(FormDataMultiPart form) {

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -291,7 +291,7 @@ public enum TopologyReliabilityMode {
       "topology.droptuples.upon.backpressure";
 
   /**
-   * The per component output tuple per second in this topology.
+   * The per component output bytes per second in this topology.
    */
   public static final String TOPOLOGY_COMPONENT_OUTPUT_BPS = "topology.component.output.bps";
 

File: heron/packing/src/java/com/twitter/heron/packing/utils/PackingUtils.java
Patch:
@@ -64,7 +64,7 @@ private static void assertIsValidInstance(Resource instanceResources,
       throw new PackingException(String.format(
           "This instance requires containers with at least %s cpu cores. The current max container"
               + "size is %s cores",
-          instanceCpu > maxContainerResources.getCpu(), maxContainerResources.getCpu()));
+          instanceCpu, maxContainerResources.getCpu()));
     }
 
     ByteAmount instanceDisk = instanceResources.getDisk().increaseBy(paddingPercentage);

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/ExecutorFlag.java
Patch:
@@ -52,6 +52,7 @@ public enum ExecutorFlag {
   MetricsCacheManagerClasspath("metricscache-manager-classpath"),
   MetricsCacheManagerMasterPort("metricscache-manager-master-port"),
   MetricsCacheManagerStatsPort("metricscache-manager-stats-port"),
+  MetricsCacheManagerMode("metricscache-manager-mode"),
   IsStateful("is-stateful"),
   CheckpointManagerClasspath("checkpoint-manager-classpath"),
   CheckpointManagerPort("checkpoint-manager-port"),

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -293,6 +293,9 @@ public static void addExecutorTopologyArgs(List<String> args, Config config, Con
 
     args.add(createCommandArg(ExecutorFlag.MetricsCacheManagerClasspath,
         Context.metricsCacheManagerClassPath(config)));
+    String metricscacheMgrMode = Context.metricscacheMgrMode(config)
+        == null ? "disabled" : Context.metricscacheMgrMode(config);
+    args.add(createCommandArg(ExecutorFlag.MetricsCacheManagerMode, metricscacheMgrMode));
 
     Boolean ckptMgrEnabled = TopologyUtils.shouldStartCkptMgr(topology);
     args.add(createCommandArg(ExecutorFlag.IsStateful, Boolean.toString(ckptMgrEnabled)));

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -324,6 +324,7 @@ public void testProperties() throws URISyntaxException {
             + " --python-instance-binary=" + expectedBin + "/heron-python-instance"
             + " --cpp-instance-binary=" + expectedBin + "/heron-cpp-instance"
             + " --metricscache-manager-classpath=" + expectedLib + "/metricscachemgr/*"
+            + " --metricscache-manager-mode=disabled"
             + " --is-stateful=false"
             + " --checkpoint-manager-classpath=" + expectedLib + "/ckptmgr/*:"
             + expectedLib + "/statefulstorage/*:"

File: heron/spi/src/java/com/twitter/heron/spi/common/Key.java
Patch:
@@ -121,6 +121,8 @@ public enum Key {
   STATEFUL_STORAGE_CONF                    ("heron.statefulstorage.config", Type.MAP),
   STATEFUL_STORAGE_CUSTOM_CLASSPATH        ("heron.statefulstorage.custom.classpath", Type.STRING),
 
+  // keys for metricscache manager
+  METRICSCACHEMGR_MODE       ("heron.topology.metricscachemgr.mode", "disabled"),
   // keys for health manager
   HEALTHMGR_MODE             ("heron.topology.healthmgr.mode", Type.STRING),
 

File: tools/java/src/com/twitter/bazel/checkstyle/JavaCheckstyle.java
Patch:
@@ -113,7 +113,7 @@ private static String[] getHeronSourceFiles(String extraActionFile) {
         Predicates.containsPattern("storm-compatibility.src.java"),
         Predicates.containsPattern("tools/test/LcovMerger"),
         Predicates.containsPattern("contrib"),
-        Predicates.containsPattern("external") // from external/ directory for bazel  
+        Predicates.containsPattern("external") // from external/ directory for bazel
     )));
   }
 

File: eco/src/java/com/twitter/heron/eco/builder/BuilderUtility.java
Patch:
@@ -70,7 +70,7 @@ protected void applyProperties(ObjectDefinition bean, Object instance,
         Object value = prop.isReference() ? context.getComponent(prop.getRef()) : prop.getValue();
         Method setter = findSetter(clazz, prop.getName());
         if (setter != null) {
-          LOG.info("found setter, attempting with: " + instance.getClass() + "  " + value);
+          LOG.debug("found setter, attempting with: " + instance.getClass() + "  " + value);
           // invoke setter
           setter.invoke(instance, new Object[]{value});
         } else {

File: eco/src/java/com/twitter/heron/eco/builder/StreamBuilder.java
Patch:
@@ -78,7 +78,6 @@ protected void buildStreams(EcoExecutionContext executionContext, TopologyBuilde
       GroupingDefinition grouping = stream.getGrouping();
       // if the streamId is defined, use it for the grouping,
       // otherwise assume default stream
-      // Todo(joshfischer) Not sure if "default" is still valid
       String streamId = grouping.getStreamId() == null
           ? Utils.DEFAULT_STREAM_ID : grouping.getStreamId();
 
@@ -88,7 +87,6 @@ protected void buildStreams(EcoExecutionContext executionContext, TopologyBuilde
           declarer.shuffleGrouping(stream.getFrom(), streamId);
           break;
         case FIELDS:
-          //TODO check for null grouping args
           List<String> groupingArgs = grouping.getArgs();
           if (groupingArgs == null) {
             throw new IllegalArgumentException("You must supply arguments for Fields grouping");

File: eco/src/java/com/twitter/heron/eco/definition/EcoExecutionContext.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.storm.Config;
+import com.twitter.heron.api.Config;
 
 
 public class EcoExecutionContext {

File: eco/src/java/com/twitter/heron/eco/submit/EcoSubmitter.java
Patch:
@@ -13,12 +13,13 @@
 //  limitations under the License.
 package com.twitter.heron.eco.submit;
 
-import org.apache.storm.Config;
 import org.apache.storm.StormSubmitter;
 import org.apache.storm.generated.AlreadyAliveException;
 import org.apache.storm.generated.InvalidTopologyException;
 import org.apache.storm.generated.StormTopology;
 
+import com.twitter.heron.api.Config;
+
 public class EcoSubmitter {
 
   public void submitTopology(String topologyName, Config topologyConfig, StormTopology topology)

File: eco/tests/java/com/twitter/heron/eco/builder/EcoBuilderTest.java
Patch:
@@ -17,7 +17,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.storm.Config;
 import org.apache.storm.topology.TopologyBuilder;
 import org.junit.After;
 import org.junit.Before;
@@ -27,6 +26,7 @@
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
+import com.twitter.heron.api.Config;
 import com.twitter.heron.eco.definition.EcoExecutionContext;
 import com.twitter.heron.eco.definition.EcoTopologyDefinition;
 
@@ -78,7 +78,7 @@ public void ensureNoUnexpectedMockInteractions() {
   }
 
   @Test
-  public void testBuild_EmptyConfigMap_ReturnsDefaultConfigs() {
+  public void testBuild_EmptyConfigMap_ReturnsDefaultConfigs() throws Exception {
 
     Config config = new Config();
     when(mockConfigBuilder.buildConfig(eq(ecoTopologyDefinition))).thenReturn(config);
@@ -92,7 +92,7 @@ public void testBuild_EmptyConfigMap_ReturnsDefaultConfigs() {
   }
 
   @Test
-  public void testBuild_CustomConfigMap_ReturnsCorrectConfigs() {
+  public void testBuild_CustomConfigMap_ReturnsCorrectConfigs() throws Exception {
     configMap.put(Config.TOPOLOGY_DEBUG, false);
     final String environment = "dev";
     final int spouts = 3;

File: eco/tests/java/com/twitter/heron/eco/submit/EcoSubmitterTest.java
Patch:
@@ -13,7 +13,6 @@
 //  limitations under the License.
 package com.twitter.heron.eco.submit;
 
-import org.apache.storm.Config;
 import org.apache.storm.StormSubmitter;
 import org.apache.storm.generated.StormTopology;
 import org.junit.Before;
@@ -23,6 +22,8 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
+import com.twitter.heron.api.Config;
+
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.internal.verification.VerificationModeFactory.times;

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -493,7 +493,7 @@ Config updateNumContainersIfNeeded(Config initialConfig,
         .put(Key.TOPOLOGY_DEFINITION,
             cloneWithNewNumContainers(initialTopology, packingNumStreamManagers));
 
-    String packingClass = Context.packingClass(initialConfig);
+    String packingClass = Context.packingClass(config);
     LOG.warning(String.format("The packing plan (generated by %s) calls for a different number of "
             + "containers (%d) than what was explicitly set in the topology configs (%d). "
             + "Overriding the configs to specify %d containers. When using %s do not explicitly "

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/RoundRobinPacking.java
Patch:
@@ -367,7 +367,8 @@ public PackingPlan repack(PackingPlan currentPackingPlan, Map<String, Integer> c
     Map<String, Integer> currentComponentParallelism = currentPackingPlan.getComponentCounts();
 
     for (Map.Entry<String, Integer> e : componentChanges.entrySet()) {
-      currentComponentParallelism.put(e.getKey(), e.getValue());
+      Integer newParallelism = currentComponentParallelism.get(e.getKey()) + e.getValue();
+      currentComponentParallelism.put(e.getKey(), newParallelism);
     }
 
     int newNumInstance = TopologyUtils.getTotalInstance(currentComponentParallelism);

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/RoundRobinPackingTest.java
Patch:
@@ -360,8 +360,8 @@ public void testRePacking() throws Exception {
     Assert.assertEquals(2 * componentParallelism, numInstance);
 
     Map<String, Integer> componentChanges = new HashMap<>();
-    componentChanges.put(SPOUT_NAME, componentParallelism - 1);
-    componentChanges.put(BOLT_NAME, componentParallelism + 1);
+    componentChanges.put(SPOUT_NAME, -1);
+    componentChanges.put(BOLT_NAME,  +1);
     PackingPlan output = getRoundRobinRePackingPlan(topology, componentChanges);
     Assert.assertEquals(numContainers, output.getContainers().size());
     Assert.assertEquals((Integer) numInstance, output.getInstanceCount());

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/MetricsCacheManagerServer.java
Patch:
@@ -85,7 +85,7 @@ public void onMessage(SocketChannel channel, Message message) {
         + channel.socket().getRemoteSocketAddress());
 
     if (message instanceof TopologyMaster.PublishMetrics) {
-      LOG.info("received message " + (TopologyMaster.PublishMetrics) message);
+      LOG.fine("received message " + (TopologyMaster.PublishMetrics) message);
       metricsCache.addMetrics((TopologyMaster.PublishMetrics) message);
     } else {
       LOG.severe("Unknown kind of message received "

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalKey.java
Patch:
@@ -21,9 +21,7 @@
 public enum LocalKey {
   // config key for specifying the working directory of a topology
   WORKING_DIRECTORY("heron.scheduler.local.working.directory",
-      "${HOME}/.herondata/topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}"),
-
-  USE_HERON_CORE_URI("heron.scheduler.local.use_core_uri", true);
+      "${HOME}/.herondata/topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}");
 
   private final String value;
   private final Key.Type type;

File: heron/schedulers/src/java/com/twitter/heron/scheduler/nomad/NomadConstants.java
Patch:
@@ -38,6 +38,8 @@ private NomadConstants() {
   public static final String NOMAD_HERON_SCRIPT_NAME = "run_heron_executor.sh";
 
   public static final String HERON_NOMAD_WORKING_DIR = "HERON_NOMAD_WORKING_DIR";
+  public static final String HERON_USE_CORE_PACKAGE_URI = "HERON_USE_CORE_PACKAGE_URI";
+  public static final String HERON_CORE_PACKAGE_DIR = "HERON_CORE_PACKAGE_DIR";
   public static final String HERON_CORE_PACKAGE_URI = "HERON_CORE_PACKAGE_URI";
   public static final String HERON_TOPOLOGY_DOWNLOAD_CMD = "HERON_TOPOLOGY_DOWNLOAD_CMD";
   public static final String HERON_EXECUTOR_CMD = "HERON_EXECUTOR_CMD";

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -213,6 +213,8 @@ public void testGetJobLinks() throws Exception {
     PowerMockito.mockStatic(Config.class);
     when(Config.toClusterMode(mockConfig)).thenReturn(mockConfig);
 
+    AuroraController controller = Mockito.mock(AuroraController.class);
+    doReturn(controller).when(scheduler).getController();
     scheduler.initialize(mockConfig, Mockito.mock(Config.class));
 
     PowerMockito.spy(TokenSub.class);

File: tools/java/src/com/twitter/bazel/checkstyle/JavaCheckstyle.java
Patch:
@@ -112,7 +112,8 @@ private static String[] getHeronSourceFiles(String extraActionFile) {
         Predicates.containsPattern("storm-compatibility-examples.src.java"),
         Predicates.containsPattern("storm-compatibility.src.java"),
         Predicates.containsPattern("tools/test/LcovMerger"),
-        Predicates.containsPattern("contrib")
+        Predicates.containsPattern("contrib"),
+        Predicates.containsPattern("external") // from external/ directory for bazel  
     )));
   }
 

File: heron/simulator/src/java/com/twitter/heron/simulator/executors/InstanceExecutor.java
Patch:
@@ -159,8 +159,6 @@ protected void handleControlSignal() {
 
       // Reset the flag value
       toStop = false;
-
-      return;
     }
   }
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraController.java
Patch:
@@ -33,5 +33,5 @@ public interface AuroraController {
   boolean restart(Integer containerId);
 
   void removeContainers(Set<PackingPlan.ContainerPlan> containersToRemove);
-  void addContainers(Integer count);
+  Set<Integer> addContainers(Integer count);
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraHeronShellController.java
Patch:
@@ -121,7 +121,7 @@ public void removeContainers(Set<PackingPlan.ContainerPlan> containersToRemove)
   }
 
   @Override
-  public void addContainers(Integer count) {
-    cliController.addContainers(count);
+  public Set<Integer> addContainers(Integer count) {
+    return cliController.addContainers(count);
   }
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/kubernetes/KubernetesScheduler.java
Patch:
@@ -138,8 +138,10 @@ public boolean onUpdate(Scheduler.UpdateTopologyRequest request) {
    * TODO (jrcrawfo) -- (https://github.com/twitter/heron/issues/1981)
    */
   @Override
-  public void addContainers(Set<PackingPlan.ContainerPlan> containersToAdd) {
+  public Set<PackingPlan.ContainerPlan>
+      addContainers(Set<PackingPlan.ContainerPlan> containersToAdd) {
     controller.addContainers(containersToAdd);
+    return containersToAdd;
   }
 
   /**

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -288,7 +288,7 @@ public boolean onUpdate(Scheduler.UpdateTopologyRequest request) {
   }
 
   @Override
-  public void addContainers(Set<PackingPlan.ContainerPlan> containers) {
+  public Set<PackingPlan.ContainerPlan> addContainers(Set<PackingPlan.ContainerPlan> containers) {
     synchronized (processToContainer) {
       for (PackingPlan.ContainerPlan container : containers) {
         if (processToContainer.values().contains(container.getId())) {
@@ -298,6 +298,7 @@ public void addContainers(Set<PackingPlan.ContainerPlan> containers) {
         startExecutor(container.getId(), container.getInstances());
       }
     }
+    return containers;
   }
 
   @Override

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/YarnScheduler.java
Patch:
@@ -108,12 +108,14 @@ public void close() {
   }
 
   @Override
-  public void addContainers(Set<PackingPlan.ContainerPlan> containersToAdd) {
+  public Set<PackingPlan.ContainerPlan> addContainers(
+      Set<PackingPlan.ContainerPlan> containersToAdd) {
     try {
       HeronMasterDriverProvider.getInstance().scheduleHeronWorkers(containersToAdd);
     } catch (HeronMasterDriver.ContainerAllocationException e) {
       throw new RuntimeException("Failed to launch new yarn containers", e);
     }
+    return containersToAdd;
   }
 
   @Override

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/kubernetes/KubernetesControllerTest.java
Patch:
@@ -72,8 +72,9 @@ boolean restart(int shardId) {
       }
 
       @Override
-      public void addContainers(Set<PackingPlan.ContainerPlan> containersToAdd) {
-
+      public Set<PackingPlan.ContainerPlan>
+          addContainers(Set<PackingPlan.ContainerPlan> containersToAdd) {
+        return containersToAdd;
       }
 
       @Override

File: heron/spi/src/java/com/twitter/heron/spi/scheduler/IScalable.java
Patch:
@@ -30,8 +30,9 @@ public interface IScalable {
    * Requests new containers for scaling a topology
    *
    * @param containersToAdd Set of containers to be added by the scheduler
+   * @return Set of added containers with real ids and resources from the scheduler
    */
-  void addContainers(Set<PackingPlan.ContainerPlan> containersToAdd);
+  Set<PackingPlan.ContainerPlan> addContainers(Set<PackingPlan.ContainerPlan> containersToAdd);
 
   /**
    * Requests containers to be released for down-scaling a topology.

File: heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonConstants.java
Patch:
@@ -25,6 +25,7 @@ private MarathonConstants() {
   }
 
   public static final String ID = "id";
+  public static final String MARATHON_GROUP_PATH = "/heron/topologies/";
   public static final String COMMAND = "cmd";
   public static final String CPU = "cpus";
   public static final String MEMORY = "mem";

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/executor/SinkExecutorTest.java
Patch:
@@ -55,7 +55,7 @@ public class SinkExecutorTest {
   private static final String EXCEPTION_FIRST_TIME = "firstTime";
   private static final String EXCEPTION_LOGGING = "logging";
   private static final String RECORD_SOURCE = "source";
-  private static final String RECORD_CONTEXT = "context";
+  private static final String RECORD_CONTEXT = "ecoExecutionContext";
 
   private volatile int processRecordInvoked = 0;
   private volatile int flushInvoked = 0;

File: heron/spi/tests/java/com/twitter/heron/spi/metricsmgr/metrics/MetricsRecordTest.java
Patch:
@@ -25,7 +25,7 @@
 public class MetricsRecordTest {
   private static final int N = 100;
   private static final String SOURCE = "source";
-  private static final String CONTEXT = "context";
+  private static final String CONTEXT = "ecoExecutionContext";
   private final List<MetricsRecord> records = new ArrayList<MetricsRecord>();
 
   @Before

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -339,7 +339,9 @@ public static void addExecutorContainerArgs(
     String remoteDebuggerPorts = ExecutorPort.getPort(
         ExecutorPort.JVM_REMOTE_DEBUGGER_PORTS, ports);
 
-    args.add(createCommandArg(ExecutorFlag.Shard, containerIndex));
+    if (containerIndex != null) {
+      args.add(createCommandArg(ExecutorFlag.Shard, containerIndex));
+    }
     args.add(createCommandArg(ExecutorFlag.MasterPort, masterPort));
     args.add(createCommandArg(ExecutorFlag.TMasterControllerPort, tmasterControllerPort));
     args.add(createCommandArg(ExecutorFlag.TMasterStatsPort, tmasterStatsPort));

File: heron/schedulers/src/java/com/twitter/heron/scheduler/slurm/SlurmScheduler.java
Patch:
@@ -54,7 +54,7 @@ public SlurmScheduler(String workingDirectory) {
 
   @Override
   public void initialize(Config mConfig, Config mRuntime) {
-    this.config = mConfig;
+    this.config = Config.toClusterMode(mConfig);
     this.runtime = mRuntime;
     this.controller = getController();
 
@@ -138,7 +138,7 @@ protected String[] getExecutorCommand(PackingPlan packing) {
     }
 
     String[] executorCmd = SchedulerUtils.executorCommandArgs(this.config, this.runtime,
-        ports, "0");
+        ports, null);
 
     LOG.log(Level.FINE, "Executor command line: ", Arrays.toString(executorCmd));
     return executorCmd;

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/sink/metricscache/MetricsCacheSinkTest.java
Patch:
@@ -49,7 +49,7 @@ public class MetricsCacheSinkTest {
 
   private static final Duration RECONNECT_INTERVAL = Duration.ofSeconds(1);
   // Restart wait time is set at 2 times of reconnect time plus another second. The 2 times factor
-  // is because of localtion checking event interval and the sleep of reconnect interval in
+  // is because of location checking event interval and the sleep of reconnect interval in
   // exception handling.
   private static final Duration RESTART_WAIT_INTERVAL = Duration.ofSeconds(3);
   private static final Duration METRICSCACHE_LOCATION_CHECK_INTERVAL = Duration.ofSeconds(1);

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/metricscache/MetricsCacheSink.java
Patch:
@@ -368,8 +368,8 @@ public synchronized void startNewMasterClient() {
               metricsCacheClientConfig.get(KEY_TMASTER_RECONNECT_INTERVAL_SEC),
               ChronoUnit.SECONDS));
 
-      LOG.severe(String.format("Starting metricsCacheClient for the %d time.",
-          startedAttempts.incrementAndGet()));
+      int attempts = startedAttempts.incrementAndGet();
+      LOG.severe(String.format("Starting metricsCacheClient for the %d time.", attempts));
       metricsCacheClientExecutor.execute(metricsCacheClient);
     }
 

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -361,8 +361,8 @@ public synchronized void startNewMasterClient() {
               TypeUtils.getDuration(
                   tmasterClientConfig.get(KEY_TMASTER_RECONNECT_INTERVAL_SEC), ChronoUnit.SECONDS));
 
-      LOG.severe(String.format("Starting TMasterClient for the %d time.",
-          startedAttempts.incrementAndGet()));
+      int attempts = startedAttempts.incrementAndGet();
+      LOG.severe(String.format("Starting TMasterClient for the %d time.", attempts));
       tmasterClientExecutor.execute(tMasterClient);
     }
 

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/nomad/NomadSchedulerTest.java
Patch:
@@ -358,7 +358,7 @@ public void testGetTask() {
         task.getEnv().get(NomadConstants.HERON_CORE_PACKAGE_URI));
     Assert.assertEquals(TOPOLOGY_DOWNLOAD_CMD,
         task.getEnv().get(NomadConstants.HERON_TOPOLOGY_DOWNLOAD_CMD));
-    Assert.assertEquals("executor-binary args1 args2",
+    Assert.assertEquals("./heron-core/bin/heron-executor args1 args2",
         task.getEnv().get(NomadConstants.HERON_EXECUTOR_CMD));
   }
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
Patch:
@@ -107,7 +107,7 @@ protected boolean setupWorkingDirectoryAndExtractPackages() {
     // get the path of core release URI
     String coreReleasePackageURI = LocalContext.corePackageUri(config);
 
-    LOG.info("core release package uri: " + coreReleasePackageURI);
+    LOG.log(Level.FINE, "core release package uri: {0}", coreReleasePackageURI);
 
     // form the target dest core release file name
     String coreReleaseFileDestination = Paths.get(

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/ConsumerStreamlet.java
Patch:
@@ -38,7 +38,7 @@ public ConsumerStreamlet(StreamletImpl<R> parent, SerializableConsumer<R> consum
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.CONSUMER.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.CONSUMER, stageNames);
     bldr.setBolt(getName(), new ConsumerSink<>(consumer),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/FilterStreamlet.java
Patch:
@@ -37,7 +37,7 @@ public FilterStreamlet(StreamletImpl<R> parent, SerializablePredicate<? super R>
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.FILTER.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.FILTER, stageNames);
     bldr.setBolt(getName(), new FilterOperator<R>(filterFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/FlatMapStreamlet.java
Patch:
@@ -40,7 +40,7 @@ public FlatMapStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.FLATMAP.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.FLATMAP, stageNames);
     bldr.setBolt(getName(), new FlatMapOperator<R, T>(flatMapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/GeneralReduceByKeyAndWindowStreamlet.java
Patch:
@@ -57,7 +57,7 @@ public GeneralReduceByKeyAndWindowStreamlet(StreamletImpl<V> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.REDUCE.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.REDUCE, stageNames);
     GeneralReduceByKeyAndWindowOperator<K, V, VR> bolt =
         new GeneralReduceByKeyAndWindowOperator<K, V, VR>(keyExtractor, identity, reduceFn);
     windowCfg.attachWindowConfig(bolt);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/JoinStreamlet.java
Patch:
@@ -81,7 +81,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     if (!left.isBuilt() || !right.isBuilt()) {
       return false;
     }
-    setDefaultNameIfNone(StreamletNamePrefixes.JOIN.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.JOIN, stageNames);
     JoinOperator<K, R, S, T> bolt = new JoinOperator<>(joinType, left.getName(),
         right.getName(), leftKeyExtractor, rightKeyExtractor, joinFn);
     windowCfg.attachWindowConfig(bolt);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/LogStreamlet.java
Patch:
@@ -35,7 +35,7 @@ public LogStreamlet(StreamletImpl<R> parent) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.LOGGER.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.LOGGER, stageNames);
     bldr.setBolt(getName(), new LogSink<R>(),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/MapStreamlet.java
Patch:
@@ -37,7 +37,7 @@ public MapStreamlet(StreamletImpl<R> parent, SerializableFunction<? super R, ? e
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.MAP.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.MAP, stageNames);
     bldr.setBolt(getName(), new MapOperator<R, T>(mapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/ReduceByKeyAndWindowStreamlet.java
Patch:
@@ -57,7 +57,7 @@ public ReduceByKeyAndWindowStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.REDUCE.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.REDUCE, stageNames);
     ReduceByKeyAndWindowOperator<K, V, R> bolt = new ReduceByKeyAndWindowOperator<>(keyExtractor,
         valueExtractor, reduceFn);
     windowCfg.attachWindowConfig(bolt);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/RemapStreamlet.java
Patch:
@@ -43,7 +43,7 @@ public RemapStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.REMAP.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.REMAP, stageNames);
     bldr.setBolt(getName(), new MapOperator<R, R>((a) -> a),
         getNumPartitions())
         .customGrouping(parent.getName(), new RemapCustomGrouping<R>(remapFn));

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SinkStreamlet.java
Patch:
@@ -38,7 +38,7 @@ public SinkStreamlet(StreamletImpl<R> parent, Sink<R> sink) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.SINK.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.SINK, stageNames);
     bldr.setBolt(getName(), new ComplexSink<>(sink),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SourceStreamlet.java
Patch:
@@ -36,7 +36,7 @@ public SourceStreamlet(Source<R> generator) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.SOURCE.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.SOURCE, stageNames);
     bldr.setSpout(getName(), new ComplexSource<R>(generator), getNumPartitions());
     return true;
   }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SupplierStreamlet.java
Patch:
@@ -36,7 +36,7 @@ public SupplierStreamlet(SerializableSupplier<R> supplier) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.SUPPLIER.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.SUPPLIER, stageNames);
     bldr.setSpout(getName(), new SupplierSource<R>(supplier), getNumPartitions());
     return true;
   }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/TransformStreamlet.java
Patch:
@@ -40,7 +40,7 @@ public TransformStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(StreamletNamePrefixes.TRANSFORM.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.TRANSFORM, stageNames);
     bldr.setBolt(getName(), new TransformOperator<R, T>(serializableTransformer),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/UnionStreamlet.java
Patch:
@@ -41,7 +41,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       // The system will call us again later
       return false;
     }
-    setDefaultNameIfNone(StreamletNamePrefixes.UNION.toString(), stageNames);
+    setDefaultNameIfNone(StreamletNamePrefix.UNION, stageNames);
     bldr.setBolt(getName(), new UnionOperator<I>(),
         getNumPartitions()).shuffleGrouping(left.getName()).shuffleGrouping(right.getName());
     return true;

File: heron/api/tests/java/com/twitter/heron/streamlet/impl/StreamletImplTest.java
Patch:
@@ -323,7 +323,7 @@ public void testDefaultStreamletNameIfNotSet() {
 
     // set default name by streamlet name prefix
     supplierStreamlet.setDefaultNameIfNone(
-        StreamletImpl.StreamletNamePrefixes.SUPPLIER.toString(), stageNames);
+        StreamletImpl.StreamletNamePrefix.SUPPLIER, stageNames);
 
     // verify stageNames
     assertEquals(1, stageNames.size());
@@ -342,7 +342,7 @@ public void testStreamletNameIfAlreadySet() {
 
     // set default name by streamlet name prefix
     supplierStreamlet.setDefaultNameIfNone(
-        StreamletImpl.StreamletNamePrefixes.SUPPLIER.toString(), stageNames);
+        StreamletImpl.StreamletNamePrefix.SUPPLIER, stageNames);
 
     // verify stageNames
     assertEquals(1, stageNames.size());

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/metricscache/MetricsCacheSink.java
Patch:
@@ -180,6 +180,7 @@ public void run() {
 
     // First Entry
     tMasterLocationStarter.schedule(runnable, checkIntervalSec, TimeUnit.SECONDS);
+    LOG.info("MetricsCacheChecker started with interval: " + checkIntervalSec);
   }
 
   @Override

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -183,6 +183,7 @@ public void run() {
 
     // First Entry
     tMasterLocationStarter.schedule(runnable, checkIntervalSec, TimeUnit.SECONDS);
+    LOG.info("TMasterChecker started with interval: " + checkIntervalSec);
   }
 
   @Override

File: heron/tools/apiserver/tests/java/com/twitter/heron/apiserver/resources/TopologyResourceTests.java
Patch:
@@ -74,6 +74,7 @@ public void before() {
     factory = spy(createFactory(action));
     doReturn(factory).when(resource).getActionFactory();
     doReturn(Config.newBuilder().build()).when(resource).getBaseConfiguration();
+    doReturn(cluster).when(resource).getCluster();
   }
 
   @Test

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableFunction.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * All user supplied transformation functions have to be serializable.
- * Thus all Strealmet transformation definitions take Serializable
+ * Thus all Streamlet transformation definitions take Serializable
  * Functions as their input. We simply decorate java.util. function
  * definitions with a Serializable tag to ensure that any supplied
  * lambda functions automatically become serializable.

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/ConsumerStreamlet.java
Patch:
@@ -29,7 +29,6 @@
 public class ConsumerStreamlet<R> extends StreamletImpl<R> {
   private StreamletImpl<R> parent;
   private SerializableConsumer<R> consumer;
-  private static final String NAMEPREFIX = "consumer";
 
   public ConsumerStreamlet(StreamletImpl<R> parent, SerializableConsumer<R> consumer) {
     this.parent = parent;
@@ -40,7 +39,6 @@ public ConsumerStreamlet(StreamletImpl<R> parent, SerializableConsumer<R> consum
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.CONSUMER.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new ConsumerSink<>(consumer),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/FilterStreamlet.java
Patch:
@@ -28,7 +28,6 @@
 public class FilterStreamlet<R> extends StreamletImpl<R> {
   private StreamletImpl<R> parent;
   private SerializablePredicate<? super R> filterFn;
-  private static final String NAMEPREFIX = "filter";
 
   public FilterStreamlet(StreamletImpl<R> parent, SerializablePredicate<? super R> filterFn) {
     this.parent = parent;
@@ -39,7 +38,6 @@ public FilterStreamlet(StreamletImpl<R> parent, SerializablePredicate<? super R>
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.FILTER.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new FilterOperator<R>(filterFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/FlatMapStreamlet.java
Patch:
@@ -29,7 +29,6 @@
 public class FlatMapStreamlet<R, T> extends StreamletImpl<T> {
   private StreamletImpl<R> parent;
   private SerializableFunction<? super R, ? extends Iterable<? extends T>> flatMapFn;
-  private static final String NAMEPREFIX = "flatmap";
 
   public FlatMapStreamlet(StreamletImpl<R> parent,
                           SerializableFunction<? super R,
@@ -42,7 +41,6 @@ public FlatMapStreamlet(StreamletImpl<R> parent,
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.FLATMAP.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new FlatMapOperator<R, T>(flatMapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/GeneralReduceByKeyAndWindowStreamlet.java
Patch:
@@ -41,7 +41,6 @@ public class GeneralReduceByKeyAndWindowStreamlet<K, V, VR>
   private WindowConfigImpl windowCfg;
   private VR identity;
   private SerializableBiFunction<VR, V, ? extends VR> reduceFn;
-  private static final String NAMEPREFIX = "reduceByKeyAndWindow";
 
   public GeneralReduceByKeyAndWindowStreamlet(StreamletImpl<V> parent,
                             SerializableFunction<V, K> keyExtractor,
@@ -59,7 +58,6 @@ public GeneralReduceByKeyAndWindowStreamlet(StreamletImpl<V> parent,
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.REDUCE.toString(), stageNames);
-    stageNames.add(getName());
     GeneralReduceByKeyAndWindowOperator<K, V, VR> bolt =
         new GeneralReduceByKeyAndWindowOperator<K, V, VR>(keyExtractor, identity, reduceFn);
     windowCfg.attachWindowConfig(bolt);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/JoinStreamlet.java
Patch:
@@ -43,7 +43,6 @@ public final class JoinStreamlet<K, R, S, T> extends StreamletImpl<KeyValue<Keye
   private SerializableFunction<S, K> rightKeyExtractor;
   private WindowConfigImpl windowCfg;
   private SerializableBiFunction<R, S, ? extends T> joinFn;
-  private static final String NAMEPREFIX = "join";
 
   public static <A, B, C, D> JoinStreamlet<A, B, C, D>
       createJoinStreamlet(StreamletImpl<B> left,
@@ -83,7 +82,6 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       return false;
     }
     setDefaultNameIfNone(StreamletNamePrefixes.JOIN.toString(), stageNames);
-    stageNames.add(getName());
     JoinOperator<K, R, S, T> bolt = new JoinOperator<>(joinType, left.getName(),
         right.getName(), leftKeyExtractor, rightKeyExtractor, joinFn);
     windowCfg.attachWindowConfig(bolt);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/LogStreamlet.java
Patch:
@@ -27,7 +27,6 @@
  */
 public class LogStreamlet<R> extends StreamletImpl<R> {
   private StreamletImpl<R> parent;
-  private static final String NAMEPREFIX = "logger";
 
   public LogStreamlet(StreamletImpl<R> parent) {
     this.parent = parent;
@@ -37,7 +36,6 @@ public LogStreamlet(StreamletImpl<R> parent) {
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.LOGGER.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new LogSink<R>(),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/MapStreamlet.java
Patch:
@@ -28,7 +28,6 @@
 public class MapStreamlet<R, T> extends StreamletImpl<T> {
   private StreamletImpl<R> parent;
   private SerializableFunction<? super R, ? extends T> mapFn;
-  private static final String NAMEPREFIX = "map";
 
   public MapStreamlet(StreamletImpl<R> parent, SerializableFunction<? super R, ? extends T> mapFn) {
     this.parent = parent;
@@ -39,7 +38,6 @@ public MapStreamlet(StreamletImpl<R> parent, SerializableFunction<? super R, ? e
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.MAP.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new MapOperator<R, T>(mapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/ReduceByKeyAndWindowStreamlet.java
Patch:
@@ -41,7 +41,6 @@ public class ReduceByKeyAndWindowStreamlet<K, V, R>
   private SerializableFunction<R, V> valueExtractor;
   private WindowConfigImpl windowCfg;
   private SerializableBinaryOperator<V> reduceFn;
-  private static final String NAMEPREFIX = "reduceByKeyAndWindow";
 
   public ReduceByKeyAndWindowStreamlet(StreamletImpl<R> parent,
                        SerializableFunction<R, K> keyExtractor,
@@ -59,7 +58,6 @@ public ReduceByKeyAndWindowStreamlet(StreamletImpl<R> parent,
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.REDUCE.toString(), stageNames);
-    stageNames.add(getName());
     ReduceByKeyAndWindowOperator<K, V, R> bolt = new ReduceByKeyAndWindowOperator<>(keyExtractor,
         valueExtractor, reduceFn);
     windowCfg.attachWindowConfig(bolt);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/RemapStreamlet.java
Patch:
@@ -33,7 +33,6 @@
 public class RemapStreamlet<R> extends StreamletImpl<R> {
   private StreamletImpl<R> parent;
   private SerializableBiFunction<? super R, Integer, List<Integer>> remapFn;
-  private static final String NAMEPREFIX = "remap";
 
   public RemapStreamlet(StreamletImpl<R> parent,
                         SerializableBiFunction<? super R, Integer, List<Integer>> remapFn) {
@@ -45,7 +44,6 @@ public RemapStreamlet(StreamletImpl<R> parent,
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.REMAP.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new MapOperator<R, R>((a) -> a),
         getNumPartitions())
         .customGrouping(parent.getName(), new RemapCustomGrouping<R>(remapFn));

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SinkStreamlet.java
Patch:
@@ -29,7 +29,6 @@
 public class SinkStreamlet<R> extends StreamletImpl<R> {
   private StreamletImpl<R> parent;
   private Sink<R> sink;
-  private static final String NAMEPREFIX = "sink";
 
   public SinkStreamlet(StreamletImpl<R> parent, Sink<R> sink) {
     this.parent = parent;
@@ -40,7 +39,6 @@ public SinkStreamlet(StreamletImpl<R> parent, Sink<R> sink) {
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.SINK.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new ComplexSink<>(sink),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SourceStreamlet.java
Patch:
@@ -28,7 +28,6 @@
  */
 public class SourceStreamlet<R> extends StreamletImpl<R> {
   private Source<R> generator;
-  private static final String NAMEPREFIX = "generator";
 
   public SourceStreamlet(Source<R> generator) {
     this.generator = generator;
@@ -38,7 +37,6 @@ public SourceStreamlet(Source<R> generator) {
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.SOURCE.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setSpout(getName(), new ComplexSource<R>(generator), getNumPartitions());
     return true;
   }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SupplierStreamlet.java
Patch:
@@ -28,7 +28,6 @@
  */
 public class SupplierStreamlet<R> extends StreamletImpl<R> {
   private SerializableSupplier<R> supplier;
-  private static final String NAMEPREFIX = "supplier";
 
   public SupplierStreamlet(SerializableSupplier<R> supplier) {
     this.supplier = supplier;
@@ -38,7 +37,6 @@ public SupplierStreamlet(SerializableSupplier<R> supplier) {
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.SUPPLIER.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setSpout(getName(), new SupplierSource<R>(supplier), getNumPartitions());
     return true;
   }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/TransformStreamlet.java
Patch:
@@ -30,7 +30,6 @@
 public class TransformStreamlet<R, T> extends StreamletImpl<T> {
   private StreamletImpl<R> parent;
   private SerializableTransformer<? super R, ? extends T> serializableTransformer;
-  private static final String NAMEPREFIX = "transform";
 
   public TransformStreamlet(StreamletImpl<R> parent,
                        SerializableTransformer<? super R, ? extends T> serializableTransformer) {
@@ -42,7 +41,6 @@ public TransformStreamlet(StreamletImpl<R> parent,
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     setDefaultNameIfNone(StreamletNamePrefixes.TRANSFORM.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new TransformOperator<R, T>(serializableTransformer),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/UnionStreamlet.java
Patch:
@@ -27,7 +27,6 @@
 public class UnionStreamlet<I> extends StreamletImpl<I> {
   private StreamletImpl<I> left;
   private StreamletImpl<? extends I> right;
-  private static final String NAMEPREFIX = "union";
 
   public UnionStreamlet(StreamletImpl<I> left, StreamletImpl<? extends I> right) {
     this.left = left;
@@ -43,7 +42,6 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       return false;
     }
     setDefaultNameIfNone(StreamletNamePrefixes.UNION.toString(), stageNames);
-    stageNames.add(getName());
     bldr.setBolt(getName(), new UnionOperator<I>(),
         getNumPartitions()).shuffleGrouping(left.getName()).shuffleGrouping(right.getName());
     return true;

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/UpdateTopologyManager.java
Patch:
@@ -165,10 +165,10 @@ private void updateTopology(final PackingPlans.PackingPlan existingProtoPackingP
 
     // update parallelism in updatedTopology since TMaster checks that
     // Sum(parallelism) == Sum(instances)
-    logFine("Update new Topology: %s", stateManager.updateTopology(updatedTopology, topologyName));
+    logInfo("Update new Topology: %s", stateManager.updateTopology(updatedTopology, topologyName));
 
     // update packing plan to trigger the scaling event
-    logFine("Update new PackingPlan: %s",
+    logInfo("Update new PackingPlan: %s",
         stateManager.updatePackingPlan(proposedProtoPackingPlan, topologyName));
 
     // reactivate topology

File: examples/src/java/com/twitter/heron/examples/streamlet/FilesystemSinkTopology.java
Patch:
@@ -99,7 +99,7 @@ public void cleanup() {
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     // Creates a temporary file to write output into.
     File file = File.createTempFile("filesystem-sink-example", ".tmp");
@@ -127,7 +127,7 @@ public static void main(String[] args) throws Exception {
     // argument (or else the default of 2 will be used).
     int topologyParallelism = StreamletUtils.getParallelism(args, 2);
 
-    Config config = new Config.Builder()
+    Config config = Config.newBuilder()
         .setNumContainers(topologyParallelism)
         .build();
 

File: examples/src/java/com/twitter/heron/examples/streamlet/FormattedOutputTopology.java
Patch:
@@ -84,7 +84,7 @@ String getDeviceId() {
   }
 
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     processingGraphBuilder
         // The source streamlet is an indefinite series of sensor readings

File: examples/src/java/com/twitter/heron/examples/streamlet/ImpressionsAndClicksTopology.java
Patch:
@@ -133,7 +133,7 @@ public String toString() {
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     // A KVStreamlet is produced. Each element is a KeyValue object where the key
     // is the impression ID and the user ID is the value.

File: examples/src/java/com/twitter/heron/examples/streamlet/RepartitionTopology.java
Patch:
@@ -77,7 +77,7 @@ private static List<Integer> repartitionStreamlet(int incomingInteger, int numPa
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     Streamlet<Integer> randomIntegers = processingGraphBuilder
         .newSource(() -> {

File: examples/src/java/com/twitter/heron/examples/streamlet/SimplePulsarSourceTopology.java
Patch:
@@ -93,7 +93,7 @@ public void cleanup() {
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     /**
      * A Pulsar source is constructed for a specific Pulsar installation, topic, and

File: examples/src/java/com/twitter/heron/examples/streamlet/SmartWatchTopology.java
Patch:
@@ -69,7 +69,7 @@ int getFeetRun() {
   }
 
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     processingGraphBuilder.newSource(SmartWatchReading::new)
         .setName("incoming-watch-readings")

File: examples/src/java/com/twitter/heron/examples/streamlet/StreamletCloneTopology.java
Patch:
@@ -124,7 +124,7 @@ public void cleanup() {
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     /**
      * A supplier streamlet of random GameScore objects is cloned into two

File: examples/src/java/com/twitter/heron/examples/streamlet/TransformsTopology.java
Patch:
@@ -94,7 +94,7 @@ public void cleanup() {
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder builder = Builder.createBuilder();
+    Builder builder = Builder.newBuilder();
 
     /**
      * The processing graph consists of a supplier streamlet that emits

File: examples/src/java/com/twitter/heron/examples/streamlet/WindowedWordCountTopology.java
Patch:
@@ -48,7 +48,7 @@ private WindowedWordCountTopology() {
   );
 
   public static void main(String[] args) throws Exception {
-    Builder processingGraphBuilder = Builder.createBuilder();
+    Builder processingGraphBuilder = Builder.newBuilder();
 
     processingGraphBuilder
         // The origin of the processing graph: an indefinite series of sentences chosen
@@ -82,7 +82,7 @@ public static void main(String[] args) throws Exception {
     // argument (or else the default of 2 will be used).
     int topologyParallelism = StreamletUtils.getParallelism(args, 2);
 
-    Config config = new Config.Builder()
+    Config config = Config.newBuilder()
         .setNumContainers(topologyParallelism)
         .build();
 

File: examples/src/java/com/twitter/heron/examples/streamlet/WireRequestsTopology.java
Patch:
@@ -142,7 +142,7 @@ private static boolean checkRequestAmount(WireRequest request) {
    * at runtime
    */
   public static void main(String[] args) throws Exception {
-    Builder builder = Builder.createBuilder();
+    Builder builder = Builder.newBuilder();
 
     // Requests from the "quiet" bank branch (high throttling).
     Streamlet<WireRequest> quietBranch = builder.newSource(() -> new WireRequest(20))
@@ -178,7 +178,7 @@ public static void main(String[] args) throws Exception {
         .setName("all-branches-fraud-detect")
         .log();
 
-    Config config = new Config.Builder()
+    Config config = Config.newBuilder()
         .setDeliverySemantics(Config.DeliverySemantics.EFFECTIVELY_ONCE)
         .setNumContainers(2)
         .build();

File: heron/api/src/java/com/twitter/heron/streamlet/Builder.java
Patch:
@@ -22,7 +22,7 @@
  * information to build the topology
  */
 public interface Builder {
-  static Builder createBuilder() {
+  static Builder newBuilder() {
     return new BuilderImpl();
   }
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/ConsumerStreamlet.java
Patch:
@@ -39,7 +39,7 @@ public ConsumerStreamlet(StreamletImpl<R> parent, SerializableConsumer<R> consum
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.CONSUMER.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new ConsumerSink<>(consumer),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/FilterStreamlet.java
Patch:
@@ -38,7 +38,7 @@ public FilterStreamlet(StreamletImpl<R> parent, SerializablePredicate<? super R>
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.FILTER.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new FilterOperator<R>(filterFn),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/FlatMapStreamlet.java
Patch:
@@ -41,7 +41,7 @@ public FlatMapStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.FLATMAP.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new FlatMapOperator<R, T>(flatMapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/GeneralReduceByKeyAndWindowStreamlet.java
Patch:
@@ -58,7 +58,7 @@ public GeneralReduceByKeyAndWindowStreamlet(StreamletImpl<V> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.REDUCE.toString(), stageNames);
     stageNames.add(getName());
     GeneralReduceByKeyAndWindowOperator<K, V, VR> bolt =
         new GeneralReduceByKeyAndWindowOperator<K, V, VR>(keyExtractor, identity, reduceFn);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/JoinStreamlet.java
Patch:
@@ -82,7 +82,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
     if (!left.isBuilt() || !right.isBuilt()) {
       return false;
     }
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.JOIN.toString(), stageNames);
     stageNames.add(getName());
     JoinOperator<K, R, S, T> bolt = new JoinOperator<>(joinType, left.getName(),
         right.getName(), leftKeyExtractor, rightKeyExtractor, joinFn);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/LogStreamlet.java
Patch:
@@ -36,7 +36,7 @@ public LogStreamlet(StreamletImpl<R> parent) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.LOGGER.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new LogSink<R>(),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/MapStreamlet.java
Patch:
@@ -38,7 +38,7 @@ public MapStreamlet(StreamletImpl<R> parent, SerializableFunction<? super R, ? e
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.MAP.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new MapOperator<R, T>(mapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/ReduceByKeyAndWindowStreamlet.java
Patch:
@@ -58,7 +58,7 @@ public ReduceByKeyAndWindowStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.REDUCE.toString(), stageNames);
     stageNames.add(getName());
     ReduceByKeyAndWindowOperator<K, V, R> bolt = new ReduceByKeyAndWindowOperator<>(keyExtractor,
         valueExtractor, reduceFn);

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/RemapStreamlet.java
Patch:
@@ -44,7 +44,7 @@ public RemapStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.REMAP.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new MapOperator<R, R>((a) -> a),
         getNumPartitions())

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SinkStreamlet.java
Patch:
@@ -39,7 +39,7 @@ public SinkStreamlet(StreamletImpl<R> parent, Sink<R> sink) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.SINK.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new ComplexSink<>(sink),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SourceStreamlet.java
Patch:
@@ -37,7 +37,7 @@ public SourceStreamlet(Source<R> generator) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.SOURCE.toString(), stageNames);
     stageNames.add(getName());
     bldr.setSpout(getName(), new ComplexSource<R>(generator), getNumPartitions());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SupplierStreamlet.java
Patch:
@@ -37,7 +37,7 @@ public SupplierStreamlet(SerializableSupplier<R> supplier) {
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.SUPPLIER.toString(), stageNames);
     stageNames.add(getName());
     bldr.setSpout(getName(), new SupplierSource<R>(supplier), getNumPartitions());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/TransformStreamlet.java
Patch:
@@ -41,7 +41,7 @@ public TransformStreamlet(StreamletImpl<R> parent,
 
   @Override
   public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.TRANSFORM.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new TransformOperator<R, T>(serializableTransformer),
         getNumPartitions()).shuffleGrouping(parent.getName());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/UnionStreamlet.java
Patch:
@@ -42,7 +42,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       // The system will call us again later
       return false;
     }
-    setDefaultNameIfNone(NAMEPREFIX, stageNames);
+    setDefaultNameIfNone(StreamletNamePrefixes.UNION.toString(), stageNames);
     stageNames.add(getName());
     bldr.setBolt(getName(), new UnionOperator<I>(),
         getNumPartitions()).shuffleGrouping(left.getName()).shuffleGrouping(right.getName());

File: heron/schedulers/src/java/com/twitter/heron/scheduler/kubernetes/KubernetesConstants.java
Patch:
@@ -93,4 +93,6 @@ private KubernetesConstants() {
           "Never"
       )
   );
+
+  static final String HOST_PATH_VOLUME = "hostPath";
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java
Patch:
@@ -127,7 +127,8 @@ protected String getTopologyConf(PackingPlan packing) {
     for (int i = 0; i < Runtime.numContainers(runtime); i++) {
       ObjectNode instance = mapper.createObjectNode();
 
-      instance.put(MarathonConstants.ID, Integer.toString(i));
+      instance.put(MarathonConstants.ID,
+                   "/" + Runtime.topologyName(runtime) + "/" + Integer.toString(i));
       instance.put(MarathonConstants.COMMAND, getExecutorCommand(i));
       instance.put(MarathonConstants.CPU, containerResource.getCpu());
       instance.set(MarathonConstants.CONTAINER, getContainer(mapper));
@@ -142,7 +143,7 @@ protected String getTopologyConf(PackingPlan packing) {
 
     // Create marathon group for a topology
     ObjectNode appConf = mapper.createObjectNode();
-    appConf.put(MarathonConstants.ID, Runtime.topologyName(runtime));
+    appConf.put(MarathonConstants.ID, "/" + Runtime.topologyName(runtime));
     appConf.set(MarathonConstants.APPS, instances);
 
     return appConf.toString();

File: heron/api/src/java/com/twitter/heron/streamlet/Runner.java
Patch:
@@ -30,7 +30,7 @@ public Runner() { }
   /**
    * Runs the computation
    * @param name The name of the topology
-   * @param config Any config thats passed to the topology
+   * @param config Any config that is passed to the topology
    * @param builder The builder used to keep track of the sources.
    */
   public void run(String name, Config config, Builder builder) {

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableSupplier.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * All user supplied transformation functions have to be serializable.
- * Thus all Strealmet transformation definitions take Serializable
+ * Thus all Streamlet transformation definitions take Serializable
  * Functions as their input. We simply decorate java.util. function
  * definitions with a Serializable tag to ensure that any supplied
  * lambda functions automatically become serializable.

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/StreamletOperator.java
Patch:
@@ -29,7 +29,7 @@
 public abstract class StreamletOperator extends BaseRichBolt
     implements IStatefulComponent<Serializable, Serializable> {
   private static final long serialVersionUID = 8524238140745238942L;
-  private static final String OUTPUTFIELDNAME = "output";
+  private static final String OUTPUT_FIELD_NAME = "output";
 
   @Override
   public void initState(State<Serializable, Serializable> state) { }
@@ -45,6 +45,6 @@ public void preSave(String checkpointId) { }
    */
   @Override
   public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
-    outputFieldsDeclarer.declare(new Fields(OUTPUTFIELDNAME));
+    outputFieldsDeclarer.declare(new Fields(OUTPUT_FIELD_NAME));
   }
 }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/StreamletWindowOperator.java
Patch:
@@ -24,7 +24,7 @@
  */
 public abstract class StreamletWindowOperator extends BaseWindowedBolt {
   private static final long serialVersionUID = -4836560876041237959L;
-  private static final String OUTPUTFIELDNAME = "output";
+  private static final String OUTPUT_FIELD_NAME = "output";
 
   /**
    * The operators implementing streamlet functionality have some properties.
@@ -34,6 +34,6 @@ public abstract class StreamletWindowOperator extends BaseWindowedBolt {
    */
   @Override
   public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
-    outputFieldsDeclarer.declare(new Fields(OUTPUTFIELDNAME));
+    outputFieldsDeclarer.declare(new Fields(OUTPUT_FIELD_NAME));
   }
 }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/sources/StreamletSource.java
Patch:
@@ -30,7 +30,7 @@ public abstract class StreamletSource extends BaseRichSpout
     implements IStatefulComponent<Serializable, Serializable> {
 
   private static final long serialVersionUID = 8583965332619565343L;
-  private static final String OUTPUTFIELDNAME = "output";
+  private static final String OUTPUT_FIELD_NAME = "output";
 
   @Override
   public void initState(State<Serializable, Serializable> state) { }
@@ -46,6 +46,6 @@ public void preSave(String checkpointId) { }
    */
   @Override
   public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
-    outputFieldsDeclarer.declare(new Fields(OUTPUTFIELDNAME));
+    outputFieldsDeclarer.declare(new Fields(OUTPUT_FIELD_NAME));
   }
 }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SourceStreamlet.java
Patch:
@@ -22,8 +22,8 @@
 import com.twitter.heron.streamlet.impl.sources.ComplexSource;
 
 /**
- * SupplierStreamlet is a very quick and flexible way of creating a Streamlet
- * from a user supplied Supplier Function. The supplier function is the
+ * SourceStreamlet is a very quick and flexible way of creating a Streamlet
+ * from a user supplied Generator Function. The Generator function is the
  * source of all tuples for this Streamlet.
  */
 public class SourceStreamlet<R> extends StreamletImpl<R> {

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SupplierStreamlet.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * SupplierStreamlet is a very quick and flexible way of creating a Streamlet
- * from a user supplied Supplier Function. The supplier function is the
+ * from an user supplied Supplier Function. The supplier function is the
  * source of all tuples for this Streamlet.
  */
 public class SupplierStreamlet<R> extends StreamletImpl<R> {

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/JoinOperator.java
Patch:
@@ -40,8 +40,8 @@
  */
 public class JoinOperator<K, V1, V2, VR> extends StreamletWindowOperator {
   private static final long serialVersionUID = 4875450390444745407L;
-  public static final String LEFT_COMPONENT_NAME = "_streamlet_joinbolt_left_component_name_";
-  public static final String RIGHT_COMPONENT_NAME = "_streamlet_joinbolt_right_component_name_";
+  private static final String LEFT_COMPONENT_NAME = "_streamlet_joinbolt_left_component_name_";
+  private static final String RIGHT_COMPONENT_NAME = "_streamlet_joinbolt_right_component_name_";
 
   private JoinType joinType;
   // The source component that represent the left join component

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/TransformOperator.java
Patch:
@@ -37,7 +37,6 @@ public class TransformOperator<R, T> extends StreamletOperator {
   private SerializableTransformer<? super R, ? extends T> serializableTransformer;
 
   private OutputCollector collector;
-  private Context context;
   private State<Serializable, Serializable> state;
 
   public TransformOperator(
@@ -60,7 +59,7 @@ public void cleanup() {
   public void prepare(Map<String, Object> map, TopologyContext topologyContext,
                       OutputCollector outputCollector) {
     collector = outputCollector;
-    context = new ContextImpl(topologyContext, map, state);
+    Context context = new ContextImpl(topologyContext, map, state);
     serializableTransformer.setup(context);
   }
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/sinks/ConsumerSink.java
Patch:
@@ -15,7 +15,6 @@
 package com.twitter.heron.streamlet.impl.sinks;
 
 import java.util.Map;
-import java.util.logging.Logger;
 
 import com.twitter.heron.api.bolt.OutputCollector;
 import com.twitter.heron.api.topology.TopologyContext;
@@ -28,7 +27,6 @@
  * consume function for every tuple.
  */
 public class ConsumerSink<R> extends StreamletOperator {
-  private static final Logger LOG = Logger.getLogger(ConsumerSink.class.getName());
   private static final long serialVersionUID = 8716140142187667638L;
   private SerializableConsumer<R> consumer;
   private OutputCollector collector;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/sources/ComplexSource.java
Patch:
@@ -36,7 +36,6 @@ public class ComplexSource<R> extends StreamletSource {
   private Source<R> generator;
 
   private SpoutOutputCollector collector;
-  private Context context;
   private State<Serializable, Serializable> state;
 
   public ComplexSource(Source<R> generator) {
@@ -53,7 +52,7 @@ public void initState(State<Serializable, Serializable> startupState) {
   public void open(Map<String, Object> map, TopologyContext topologyContext,
                    SpoutOutputCollector outputCollector) {
     collector = outputCollector;
-    context = new ContextImpl(topologyContext, map, state);
+    Context context = new ContextImpl(topologyContext, map, state);
     generator.setup(context);
   }
 

File: examples/src/java/com/twitter/heron/examples/api/ComponentJVMOptionsTopology.java
Patch:
@@ -44,7 +44,8 @@ public static void main(String[] args) throws Exception {
 
     builder.setSpout("word", new TestWordSpout(), 2);
     builder.setBolt("exclaim1", new ExclamationBolt(), 2)
-        .shuffleGrouping("word");
+        .shuffleGrouping("word")
+        .addConfiguration("test-config", "test-key"); // Sample adding component-specific config
 
     Config conf = new Config();
     conf.setDebug(true);
@@ -56,7 +57,7 @@ public static void main(String[] args) throws Exception {
     // For each component, both the global and if any the component one will be appended.
     // And the component one will take precedence
     conf.setComponentJvmOptions("word", "-XX:NewSize=300m");
-    conf.setComponentJvmOptions("exclaim1", "-XX:NewSize=800m");
+    conf.setComponentJvmOptions("exclaim1", "-XX:NewSize=300m");
 
     // component resource configuration
     conf.setComponentRam("word", ByteAmount.fromMegabytes(512));

File: heron/instance/src/java/com/twitter/heron/instance/HeronInstance.java
Patch:
@@ -311,7 +311,7 @@ public static void main(String[] args) throws IOException {
 
     LOG.info(logMsg);
 
-    LOG.info("System Config: " + systemConfig);
+    LOG.info("System Config: " + systemConfig.toString());
 
     HeronInstance heronInstance =
         new HeronInstance(topologyName, topologyId, instance, streamPort, metricsPort);

File: heron/api/src/java/com/twitter/heron/streamlet/Config.java
Patch:
@@ -149,6 +149,7 @@ public Builder setUserConfig(String key, Object value) {
     private void applySerializer(Serializer topologySerializer) {
       if (topologySerializer == Serializer.KRYO) {
         try {
+          KryoSerializer.checkForKryo();
           config.setSerializationClassName(KryoSerializer.class.getName());
         } catch (NoClassDefFoundError e) {
           throw new RuntimeException(

File: heron/api/tests/java/com/twitter/heron/streamlet/impl/StreamletImplTest.java
Patch:
@@ -265,7 +265,7 @@ public void testComplexBuild() throws Exception {
   public void testResourcesBuilder() {
     Resources defaultResources = Resources.defaultResources();
     assertEquals(0, Float.compare(defaultResources.getCpu(), 1.0f));
-    assertEquals(defaultResources.getRam(), 104857600);
+    assertEquals(defaultResources.getRam(), ByteAmount.fromMegabytes(100));
 
     Resources nonDefaultResources = new Resources.Builder()
         .setCpu(5.1f)

File: examples/src/java/com/twitter/heron/examples/streamlet/IntegerProcessingTopology.java
Patch:
@@ -35,8 +35,8 @@ private IntegerProcessingTopology() {
   }
 
   // Heron resources to be applied to the topology
-  private static final float CPU = 2.0f;
-  private static final long GIGABYTES_OF_RAM = 6;
+  private static final float CPU = 1.5f;
+  private static final int GIGABYTES_OF_RAM = 8;
   private static final int NUM_CONTAINERS = 2;
 
   /**
@@ -49,7 +49,6 @@ public static void main(String[] args) throws Exception {
     Streamlet<Integer> zeroes = builder.newSource(() -> 0);
 
     builder.newSource(() -> ThreadLocalRandom.current().nextInt(1, 11))
-        .setNumPartitions(2)
         .setName("random-ints")
         .map(i -> i + 1)
         .setName("add-one")

File: examples/src/java/com/twitter/heron/examples/streamlet/WindowedWordCountTopology.java
Patch:
@@ -84,7 +84,6 @@ public static void main(String[] args) throws Exception {
 
     Config config = new Config.Builder()
         .setNumContainers(topologyParallelism)
-        .useKryoSerializer()
         .build();
 
     // Fetches the topology name from the first command-line argument

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/ExecutorFlag.java
Patch:
@@ -56,7 +56,8 @@ public enum ExecutorFlag {
   CheckpointManagerPort("checkpoint-manager-port"),
   StatefulConfigFile("stateful-config-file"),
   HealthManagerMode("health-manager-mode"),
-  HealthManagerClasspath("health-manager-classpath");
+  HealthManagerClasspath("health-manager-classpath"),
+  JvmRemoteDebuggerPorts("jvm-remote-debugger-ports");
 
   private final String name;
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/kubernetes/KubernetesConstants.java
Patch:
@@ -73,6 +73,9 @@ private KubernetesConstants() {
   public static final String METRICS_CACHE_MASTER_PORT = "6007";
   public static final String METRICS_CACHE_STATS_PORT = "6008";
   public static final String CHECKPOINT_MGR_PORT = "6009";
+  // port number the start with when more than one port needed for remote debugging
+  public static final String JVM_REMOTE_DEBUGGER_PORT = "6010";
+  public static final String JVM_REMOTE_DEBUGGER_PORT_NAME = "remote-debugger";
 
   public static final Map<ExecutorPort, String> EXECUTOR_PORTS = new HashMap<>();
   static {

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/kubernetes/KubernetesSchedulerTest.java
Patch:
@@ -69,7 +69,7 @@ public void after() throws Exception {
   public static void beforeClass() throws Exception {
     scheduler = Mockito.spy(KubernetesScheduler.class);
     Mockito.doReturn(EXECUTOR_CMD).when(scheduler)
-        .getExecutorCommand(Mockito.anyInt());
+        .getExecutorCommand(Mockito.anyInt(), Mockito.anyInt());
   }
 
   @AfterClass

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -426,6 +426,7 @@ public static void main(String[] args) throws ExecutionException, InterruptedExc
     Config config = Config.newBuilder()
         .put(Key.STATEMGR_ROOT_PATH, "/storm/heron/states")
         .put(Key.STATEMGR_CONNECTION_STRING, zookeeperHostname)
+        .put(Key.SCHEDULER_IS_SERVICE, false)
         .build();
     CuratorStateManager stateManager = new CuratorStateManager();
     stateManager.doMain(args, config);

File: examples/src/java/com/twitter/heron/examples/streamlet/WindowedWordCountTopology.java
Patch:
@@ -84,6 +84,7 @@ public static void main(String[] args) throws Exception {
 
     Config config = new Config.Builder()
         .setNumContainers(topologyParallelism)
+        .useKryoSerializer()
         .build();
 
     // Fetches the topology name from the first command-line argument

File: heron/schedulers/src/java/com/twitter/heron/scheduler/mesos/MesosScheduler.java
Patch:
@@ -269,6 +269,6 @@ protected void fillResourcesRequirementForBaseContainer(
     // Convert them from bytes to MB
     container.diskInMB = maxResourceContainer.getDisk().asMegabytes();
     container.memInMB = maxResourceContainer.getRam().asMegabytes();
-    container.ports = SchedulerUtils.PORTS_REQUIRED_FOR_EXECUTOR;
+    container.ports = SchedulerUtils.ExecutorPort.getRequiredPorts().size();
   }
 }

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/mesos/MesosSchedulerTest.java
Patch:
@@ -138,7 +138,7 @@ public void testGetBaseContainer() throws Exception {
     Assert.assertEquals(CPU, container.cpu, 0.01);
     Assert.assertEquals(MEM, ByteAmount.fromMegabytes(((Double) container.memInMB).longValue()));
     Assert.assertEquals(DISK, ByteAmount.fromMegabytes(((Double) container.diskInMB).longValue()));
-    Assert.assertEquals(SchedulerUtils.PORTS_REQUIRED_FOR_EXECUTOR, container.ports);
+    Assert.assertEquals(SchedulerUtils.ExecutorPort.getRequiredPorts().size(), container.ports);
     Assert.assertEquals(2, container.dependencies.size());
     Assert.assertTrue(container.dependencies.contains(CORE_PACKAGE_URI));
     Assert.assertTrue(container.dependencies.contains(TOPOLOGY_PACKAGE_URI));

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/mesos/framework/LaunchableTaskTest.java
Patch:
@@ -110,7 +110,7 @@ public void testConstructMesosTaskInfo() throws Exception {
     container.cpu = CPU;
     container.diskInMB = DISK;
     container.memInMB = MEM;
-    container.ports = SchedulerUtils.PORTS_REQUIRED_FOR_EXECUTOR;
+    container.ports = SchedulerUtils.ExecutorPort.getRequiredPorts().size();
     container.shell = true;
     container.retries = Integer.MAX_VALUE;
     container.dependencies = new ArrayList<>();
@@ -122,7 +122,7 @@ public void testConstructMesosTaskInfo() throws Exception {
 
     // List of free ports
     List<Integer> freePorts = new ArrayList<>();
-    for (int i = 0; i < SchedulerUtils.PORTS_REQUIRED_FOR_EXECUTOR; i++) {
+    for (int i = 0; i < SchedulerUtils.ExecutorPort.getRequiredPorts().size(); i++) {
       freePorts.add(i);
     }
 

File: examples/src/java/com/twitter/heron/examples/streamlet/FilesystemSinkTopology.java
Patch:
@@ -127,8 +127,9 @@ public static void main(String[] args) throws Exception {
     // argument (or else the default of 2 will be used).
     int topologyParallelism = StreamletUtils.getParallelism(args, 2);
 
-    Config config = new Config();
-    config.setNumContainers(topologyParallelism);
+    Config config = new Config.Builder()
+        .setNumContainers(topologyParallelism)
+        .build();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/FormattedOutputTopology.java
Patch:
@@ -104,7 +104,7 @@ public static void main(String[] args) throws Exception {
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);
 
-    Config config = new Config();
+    Config config = Config.defaultConfig();
 
     // Finally, the processing graph and configuration are passed to the Runner, which converts
     // the graph into a Heron topology that can be run in a Heron cluster.

File: examples/src/java/com/twitter/heron/examples/streamlet/ImpressionsAndClicksTopology.java
Patch:
@@ -185,7 +185,7 @@ public static void main(String[] args) throws Exception {
               kw.getValue()));
         });
 
-    Config config = new Config();
+    Config config = Config.defaultConfig();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/RepartitionTopology.java
Patch:
@@ -102,8 +102,10 @@ public static void main(String[] args) throws Exception {
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);
 
+    Config config = Config.defaultConfig();
+
     // Finally, the processing graph and configuration are passed to the Runner, which converts
     // the graph into a Heron topology that can be run in a Heron cluster.
-    new Runner().run(topologyName, new Config(), processingGraphBuilder);
+    new Runner().run(topologyName, config, processingGraphBuilder);
   }
 }

File: examples/src/java/com/twitter/heron/examples/streamlet/SimplePulsarSourceTopology.java
Patch:
@@ -114,7 +114,7 @@ public static void main(String[] args) throws Exception {
         .setName("incoming-pulsar-messages")
         .consume(s -> LOG.info(String.format("Message received from Pulsar: \"%s\"", s)));
 
-    Config config = new Config();
+    Config config = Config.defaultConfig();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/SmartWatchTopology.java
Patch:
@@ -111,7 +111,7 @@ public static void main(String[] args) throws Exception {
           LOG.info(logMessage);
         });
 
-    Config config = new Config();
+    Config config = Config.defaultConfig();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/StreamletCloneTopology.java
Patch:
@@ -146,7 +146,7 @@ public static void main(String[] args) throws Exception {
     splitGameScoreStreamlet.get(1)
         .toSink(new FormattedLogSink());
 
-    Config config = new Config();
+    Config config = Config.defaultConfig();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/TransformsTopology.java
Patch:
@@ -110,7 +110,7 @@ public static void main(String[] args) throws Exception {
         .transform(new IncrementTransformer(-3))
         .log();
 
-    Config config = new Config();
+    Config config = Config.defaultConfig();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/WindowedWordCountTopology.java
Patch:
@@ -82,8 +82,9 @@ public static void main(String[] args) throws Exception {
     // argument (or else the default of 2 will be used).
     int topologyParallelism = StreamletUtils.getParallelism(args, 2);
 
-    Config config = new Config();
-    config.setNumContainers(topologyParallelism);
+    Config config = new Config.Builder()
+        .setNumContainers(topologyParallelism)
+        .build();
 
     // Fetches the topology name from the first command-line argument
     String topologyName = StreamletUtils.getTopologyName(args);

File: examples/src/java/com/twitter/heron/examples/streamlet/FilesystemSinkTopology.java
Patch:
@@ -23,7 +23,6 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.logging.Logger;
 
-import com.twitter.heron.api.utils.Utils;
 import com.twitter.heron.examples.streamlet.utils.StreamletUtils;
 import com.twitter.heron.streamlet.Builder;
 import com.twitter.heron.streamlet.Config;
@@ -115,7 +114,7 @@ public static void main(String[] args) throws Exception {
         .newSource(() -> {
           // This applies a "brake" that makes the processing graph write
           // to the temporary file at a reasonable, readable pace.
-          Utils.sleep(500);
+          StreamletUtils.sleep(500);
           return ThreadLocalRandom.current().nextInt(100);
         })
         .setName("incoming-integers")

File: examples/src/java/com/twitter/heron/examples/streamlet/FormattedOutputTopology.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import com.twitter.heron.api.utils.Utils;
 import com.twitter.heron.examples.streamlet.utils.StreamletUtils;
 import com.twitter.heron.streamlet.Builder;
 import com.twitter.heron.streamlet.Config;
@@ -63,7 +62,7 @@ private static class SensorReading implements Serializable {
 
     SensorReading() {
       // Readings are produced only every two seconds
-      Utils.sleep(2000);
+      StreamletUtils.sleep(2000);
       this.deviceId = StreamletUtils.randomFromList(DEVICES);
       // Each temperature reading is a double between 70 and 100
       this.temperature = 70 + 30 * new Random().nextDouble();

File: examples/src/java/com/twitter/heron/examples/streamlet/RepartitionTopology.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.logging.Logger;
 
-import com.twitter.heron.api.utils.Utils;
 import com.twitter.heron.examples.streamlet.utils.StreamletUtils;
 import com.twitter.heron.streamlet.Builder;
 import com.twitter.heron.streamlet.Config;
@@ -83,7 +82,7 @@ public static void main(String[] args) throws Exception {
     Streamlet<Integer> randomIntegers = processingGraphBuilder
         .newSource(() -> {
           // Random integers are emitted every 50 milliseconds
-          Utils.sleep(50);
+          StreamletUtils.sleep(50);
           return ThreadLocalRandom.current().nextInt(100);
         })
         .setNumPartitions(2)

File: examples/src/java/com/twitter/heron/examples/streamlet/SmartWatchTopology.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.logging.Logger;
 
-import com.twitter.heron.api.utils.Utils;
 import com.twitter.heron.examples.streamlet.utils.StreamletUtils;
 import com.twitter.heron.streamlet.Builder;
 import com.twitter.heron.streamlet.Config;
@@ -55,7 +54,7 @@ private static class SmartWatchReading implements Serializable {
     private final int feetRun;
 
     SmartWatchReading() {
-      Utils.sleep(1000);
+      StreamletUtils.sleep(1000);
       this.joggerId = StreamletUtils.randomFromList(JOGGERS);
       this.feetRun = ThreadLocalRandom.current().nextInt(200, 400);
     }

File: examples/src/java/com/twitter/heron/examples/streamlet/WireRequestsTopology.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.logging.Logger;
 
-import com.twitter.heron.api.utils.Utils;
 import com.twitter.heron.examples.streamlet.utils.StreamletUtils;
 import com.twitter.heron.streamlet.Builder;
 import com.twitter.heron.streamlet.Config;
@@ -80,7 +79,7 @@ private static class WireRequest implements Serializable {
     WireRequest(long delay) {
       // The pace at which requests are generated is throttled. Different
       // throttles are applied to different bank branches.
-      Utils.sleep(delay);
+      StreamletUtils.sleep(delay);
       this.customerId = StreamletUtils.randomFromList(CUSTOMERS);
       this.amount = ThreadLocalRandom.current().nextInt(1000);
       LOG.info(String.format("New wire request: %s", this));

File: storm-compatibility/src/java/backtype/storm/topology/BoltDeclarerImpl.java
Patch:
@@ -38,8 +38,8 @@ public BoltDeclarerImpl(com.twitter.heron.api.topology.BoltDeclarer delegate) {
   @SuppressWarnings({"rawtypes", "unchecked"})
   public BoltDeclarer addConfigurations(Map conf) {
     // Translate config to heron config and then apply.
-    Map<String, Object> henronConf = ConfigUtils.translateConfig(conf);
-    delegate.addConfigurations(henronConf);
+    Map<String, Object> heronConf = ConfigUtils.translateComponentConfig(conf);
+    delegate.addConfigurations(heronConf);
     return this;
   }
 

File: storm-compatibility/src/java/backtype/storm/topology/SpoutDeclarerImpl.java
Patch:
@@ -34,8 +34,8 @@ public SpoutDeclarerImpl(com.twitter.heron.api.topology.SpoutDeclarer delegate)
   @SuppressWarnings({"rawtypes", "unchecked"})
   public SpoutDeclarer addConfigurations(Map conf) {
     // Translate config to heron config and then apply.
-    Map<String, Object> henronConf = ConfigUtils.translateConfig(conf);
-    delegate.addConfigurations(henronConf);
+    Map<String, Object> heronConf = ConfigUtils.translateComponentConfig(conf);
+    delegate.addConfigurations(heronConf);
     return this;
   }
 

File: storm-compatibility/src/java/org/apache/storm/topology/BoltDeclarerImpl.java
Patch:
@@ -38,8 +38,8 @@ public BoltDeclarerImpl(com.twitter.heron.api.topology.BoltDeclarer delegate) {
   @SuppressWarnings({"rawtypes", "unchecked"})
   public BoltDeclarer addConfigurations(Map conf) {
     // Translate config to heron config and then apply.
-    Map<String, Object> henronConf = ConfigUtils.translateConfig(conf);
-    delegate.addConfigurations(henronConf);
+    Map<String, Object> heronConf = ConfigUtils.translateComponentConfig(conf);
+    delegate.addConfigurations(heronConf);
     return this;
   }
 

File: storm-compatibility/src/java/org/apache/storm/topology/SpoutDeclarerImpl.java
Patch:
@@ -34,8 +34,8 @@ public SpoutDeclarerImpl(com.twitter.heron.api.topology.SpoutDeclarer delegate)
   @SuppressWarnings({"rawtypes", "unchecked"})
   public SpoutDeclarer addConfigurations(Map conf) {
     // Translate config to heron config and then apply.
-    Map<String, Object> henronConf = ConfigUtils.translateConfig(conf);
-    delegate.addConfigurations(henronConf);
+    Map<String, Object> heronConf = ConfigUtils.translateComponentConfig(conf);
+    delegate.addConfigurations(heronConf);
     return this;
   }
 

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java
Patch:
@@ -44,6 +44,7 @@
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;
 import com.twitter.heron.common.utils.topology.TopologyContextImpl;
 import com.twitter.heron.instance.IInstance;
+import com.twitter.heron.instance.util.InstanceUtils;
 import com.twitter.heron.proto.ckptmgr.CheckpointManager;
 import com.twitter.heron.proto.system.HeronTuples;
 
@@ -264,6 +265,8 @@ public void run() {
     if (enableMessageTimeouts) {
       lookForTimeouts();
     }
+
+    InstanceUtils.prepareTimerEvents(looper, helper);
   }
 
   /**

File: heron/api/src/java/com/twitter/heron/streamlet/Source.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
+import java.util.Collection;
 
 /**
  * Source is how Streamlet's originate. The get method
@@ -24,6 +25,6 @@
  */
 public interface Source<T> extends Serializable {
   void setup(Context context);
-  T get();
+  Collection<T> get();
   void cleanup();
 }

File: examples/src/java/com/twitter/heron/examples/streamlet/WordCountStreamletTopology.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.twitter.heron.streamlet.Builder;
 import com.twitter.heron.streamlet.Config;
-import com.twitter.heron.streamlet.KeyValue;
 import com.twitter.heron.streamlet.Runner;
 import com.twitter.heron.streamlet.WindowConfig;
 
@@ -51,8 +50,7 @@ public static void main(String[] args) {
     Builder builder = Builder.createBuilder();
     builder.newSource(() -> "Mary had a little lamb")
         .flatMap((sentence) -> Arrays.asList(sentence.split("\\s+")))
-        .mapToKV((word) -> new KeyValue<>(word, 1))
-        .reduceByKeyAndWindow(WindowConfig.TumblingCountWindow(10), (x, y) -> x + y)
+        .reduceByKeyAndWindow(x -> x, WindowConfig.TumblingCountWindow(10), 0, (x, y) -> x + 1)
         .log();
     Config conf = new Config();
     conf.setNumContainers(parallelism);

File: heron/tools/apiserver/src/java/com/twitter/heron/apiserver/Constants.java
Patch:
@@ -21,8 +21,6 @@ public final class Constants {
 
   static final String DEFAULT_HERON_LOCAL = "~/.heron";
 
-  static final String DEFAULT_HERON_CLUSTER = "$HERON_HOME";
-
   static final String DEFAULT_HERON_CONFIG_DIRECTORY = "conf";
 
   static final String DEFAULT_HERON_RELEASE_FILE = "release.yaml";

File: heron/api/src/java/com/twitter/heron/api/bolt/BaseWindowedBolt.java
Patch:
@@ -35,7 +35,6 @@
 import java.io.Serializable;
 import java.time.Duration;
 import java.util.Map;
-import java.util.logging.Logger;
 
 import com.twitter.heron.api.topology.OutputFieldsDeclarer;
 import com.twitter.heron.api.topology.TopologyContext;
@@ -44,7 +43,6 @@
 import com.twitter.heron.api.windowing.WindowingConfigs;
 
 public abstract class BaseWindowedBolt implements IWindowedBolt {
-  private static final Logger LOG = Logger.getLogger(BaseWindowedBolt.class.getName());
   private static final long serialVersionUID = 5688213068448231559L;
 
   protected final transient WindowingConfigs windowConfiguration;

File: heron/api/src/java/com/twitter/heron/api/tuple/Tuple.java
Patch:
@@ -33,6 +33,7 @@
 
 package com.twitter.heron.api.tuple;
 
+import java.io.Serializable;
 import java.util.List;
 
 import com.twitter.heron.api.generated.TopologyAPI;
@@ -48,7 +49,7 @@
  * use another type, you'll need to implement and register a serializer for that type.
  * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
-public interface Tuple {
+public interface Tuple extends Serializable {
 
   /**
    * Returns the number of fields in this tuple.

File: heron/api/src/java/com/twitter/heron/api/windowing/DefaultEvictionContext.java
Patch:
@@ -34,6 +34,7 @@
 
 public class DefaultEvictionContext implements EvictionContext {
 
+  private static final long serialVersionUID = 7857989489355521603L;
   /**
    * Current timestamp
    */

File: heron/api/src/java/com/twitter/heron/api/windowing/Event.java
Patch:
@@ -32,12 +32,14 @@
 
 package com.twitter.heron.api.windowing;
 
+import java.io.Serializable;
+
 /**
  * An event is a wrapper object that gets stored in the window.
  *
  * @param <T> the type of the object thats wrapped. E.g Tuple
  */
-public interface Event<T> {
+public interface Event<T extends Serializable> extends Serializable {
   /**
    * The event timestamp in millis. This could be the time
    * when the source generated the tuple or the time

File: heron/api/src/java/com/twitter/heron/api/windowing/WaterMarkEventGenerator.java
Patch:
@@ -33,6 +33,7 @@
 
 package com.twitter.heron.api.windowing;
 
+import java.io.Serializable;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -45,7 +46,7 @@
  * across all the input streams (minus the lag). Once a watermark event is emitted
  * any tuple coming with an earlier timestamp can be considered as late events.
  */
-public class WaterMarkEventGenerator<T> {
+public class WaterMarkEventGenerator<T extends Serializable> {
   private final WindowManager<T> windowManager;
   private final int eventTsLag;
   private final Set<TopologyAPI.StreamId> inputStreams;

File: heron/api/src/java/com/twitter/heron/api/windowing/evictors/WatermarkTimeEvictionPolicy.java
Patch:
@@ -32,13 +32,15 @@
 
 package com.twitter.heron.api.windowing.evictors;
 
+import java.io.Serializable;
+
 import com.twitter.heron.api.windowing.Event;
 
 /**
  * An eviction policy that evicts events based on time duration taking
  * watermark time and event lag into account.
  */
-public class WatermarkTimeEvictionPolicy<T> extends TimeEvictionPolicy<T> {
+public class WatermarkTimeEvictionPolicy<T extends Serializable> extends TimeEvictionPolicy<T> {
   private final long lag;
 
   /**

File: heron/common/src/java/com/twitter/heron/common/utils/tuple/TickTuple.java
Patch:
@@ -32,6 +32,8 @@
  * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public class TickTuple implements Tuple {
+  private static final long serialVersionUID = -7405457325549296084L;
+
   public TickTuple() {
   }
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVConsumerStreamlet.java
Patch:
@@ -29,10 +29,10 @@
  */
 public class KVConsumerStreamlet<K, V> extends KVStreamletImpl<K, V> {
   private KVStreamletImpl<K, V> parent;
-  private SerializableConsumer<? super KeyValue<? super K, ? super V>> consumer;
+  private SerializableConsumer<KeyValue<K, V>> consumer;
 
   public KVConsumerStreamlet(KVStreamletImpl<K, V> parent,
-                            SerializableConsumer<? super KeyValue<? super K, ? super V>> consumer) {
+                            SerializableConsumer<KeyValue<K, V>> consumer) {
     this.parent = parent;
     this.consumer = consumer;
     setNumPartitions(parent.getNumPartitions());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVFilterStreamlet.java
Patch:
@@ -28,10 +28,10 @@
  */
 public class KVFilterStreamlet<K, V> extends KVStreamletImpl<K, V> {
   private KVStreamletImpl<K, V> parent;
-  private SerializablePredicate<? super KeyValue<? super K, ? super V>> filterFn;
+  private SerializablePredicate<KeyValue<K, V>> filterFn;
 
   public KVFilterStreamlet(KVStreamletImpl<K, V> parent,
-                           SerializablePredicate<? super KeyValue<? super K, ? super V>> filterFn) {
+                           SerializablePredicate<KeyValue<K, V>> filterFn) {
     this.parent = parent;
     this.filterFn = filterFn;
     setNumPartitions(parent.getNumPartitions());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVFlatMapStreamlet.java
Patch:
@@ -29,11 +29,11 @@
  */
 public class KVFlatMapStreamlet<K, V, K1, V1> extends KVStreamletImpl<K1, V1> {
   private KVStreamletImpl<K, V> parent;
-  private SerializableFunction<? super KeyValue<? super K, ? super V>,
+  private SerializableFunction<KeyValue<K, V>,
       ? extends Iterable<KeyValue<? extends K1, ? extends V1>>> flatMapFn;
 
   public KVFlatMapStreamlet(KVStreamletImpl<K, V> parent,
-                            SerializableFunction<? super KeyValue<? super K, ? super V>,
+                            SerializableFunction<KeyValue<K, V>,
                               ? extends Iterable<KeyValue<? extends K1, ? extends V1>>> flatMapFn) {
     this.parent = parent;
     this.flatMapFn = flatMapFn;
@@ -49,7 +49,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       throw new RuntimeException("Duplicate Names");
     }
     stageNames.add(getName());
-    bldr.setBolt(getName(), new FlatMapOperator<KeyValue<? super K, ? super V>,
+    bldr.setBolt(getName(), new FlatMapOperator<KeyValue<K, V>,
             KeyValue<? extends K1, ? extends V1>>(flatMapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVMapStreamlet.java
Patch:
@@ -28,11 +28,11 @@
  */
 public class KVMapStreamlet<K, V, K1, V1> extends KVStreamletImpl<K1, V1> {
   private KVStreamletImpl<K, V> parent;
-  private SerializableFunction<? super KeyValue<? super K, ? super V>,
+  private SerializableFunction<? super KeyValue<K, V>,
       ? extends KeyValue<? extends K1, ? extends V1>> mapFn;
 
   public KVMapStreamlet(KVStreamletImpl<K, V> parent,
-                        SerializableFunction<? super KeyValue<? super K, ? super V>,
+                        SerializableFunction<? super KeyValue<K, V>,
       ? extends KeyValue<? extends K1, ? extends V1>> mapFn) {
     this.parent = parent;
     this.mapFn = mapFn;
@@ -48,7 +48,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       throw new RuntimeException("Duplicate Names");
     }
     stageNames.add(getName());
-    bldr.setBolt(getName(), new MapOperator<KeyValue<? super K, ? super V>,
+    bldr.setBolt(getName(), new MapOperator<KeyValue<K, V>,
             KeyValue<? extends K1, ? extends V1>>(mapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVRemapStreamlet.java
Patch:
@@ -33,11 +33,11 @@
  */
 public class KVRemapStreamlet<K, V> extends KVStreamletImpl<K, V> {
   private KVStreamletImpl<K, V> parent;
-  private SerializableBiFunction<? super KeyValue<? super K, ? super V>,
+  private SerializableBiFunction<KeyValue<K, V>,
       Integer, List<Integer>> remapFn;
 
   public KVRemapStreamlet(KVStreamletImpl<K, V> parent,
-                          SerializableBiFunction<? super KeyValue<? super K, ? super V>,
+                          SerializableBiFunction<KeyValue<K, V>,
                               Integer, List<Integer>> remapFn) {
     this.parent = parent;
     this.remapFn = remapFn;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVSinkStreamlet.java
Patch:
@@ -29,10 +29,10 @@
  */
 public class KVSinkStreamlet<K, V> extends KVStreamletImpl<K, V> {
   private KVStreamletImpl<K, V> parent;
-  private Sink<? super KeyValue<? super K, ? super V>> sink;
+  private Sink<KeyValue<K, V>> sink;
 
   public KVSinkStreamlet(KVStreamletImpl<K, V> parent,
-                         Sink<? super KeyValue<? super K, ? super V>> sink) {
+                         Sink<KeyValue<K, V>> sink) {
     this.parent = parent;
     this.sink = sink;
     setNumPartitions(parent.getNumPartitions());

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVToStreamlet.java
Patch:
@@ -29,10 +29,10 @@
  */
 public class KVToStreamlet<K, V, R> extends StreamletImpl<R> {
   private KVStreamletImpl<K, V> parent;
-  private SerializableFunction<? super KeyValue<? super K, ? super V>, ? extends R> mapFn;
+  private SerializableFunction<? super KeyValue<K, V>, ? extends R> mapFn;
 
   public KVToStreamlet(KVStreamletImpl<K, V> parent,
-                       SerializableFunction<? super KeyValue<? super K, ? super V>,
+                       SerializableFunction<? super KeyValue<K, V>,
                            ? extends R> mapFn) {
     this.parent = parent;
     this.mapFn = mapFn;
@@ -48,7 +48,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       throw new RuntimeException("Duplicate Names");
     }
     stageNames.add(getName());
-    bldr.setBolt(getName(), new MapOperator<KeyValue<? super K, ? super V>, R>(mapFn),
+    bldr.setBolt(getName(), new MapOperator<KeyValue<K, V>, R>(mapFn),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;
   }

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/KVTransformStreamlet.java
Patch:
@@ -30,11 +30,11 @@
  */
 public class KVTransformStreamlet<K, V, K1, V1> extends KVStreamletImpl<K1, V1> {
   private KVStreamletImpl<K, V> parent;
-  private SerializableTransformer<? super KeyValue<? super K, ? super V>,
+  private SerializableTransformer<KeyValue<K, V>,
       ? extends KeyValue<? extends K1, ? extends V1>> serializableTransformer;
 
   public KVTransformStreamlet(KVStreamletImpl<K, V> parent,
-                         SerializableTransformer<? super KeyValue<? super K, ? super V>,
+                         SerializableTransformer<KeyValue<K, V>,
                          ? extends KeyValue<? extends K1, ? extends V1>> serializableTransformer) {
     this.parent = parent;
     this.serializableTransformer = serializableTransformer;
@@ -50,7 +50,7 @@ public boolean doBuild(TopologyBuilder bldr, Set<String> stageNames) {
       throw new RuntimeException("Duplicate Names");
     }
     stageNames.add(getName());
-    bldr.setBolt(getName(), new TransformOperator<KeyValue<? super K, ? super V>,
+    bldr.setBolt(getName(), new TransformOperator<KeyValue<K, V>,
             KeyValue<? extends K1, ? extends V1>>(serializableTransformer),
         getNumPartitions()).shuffleGrouping(parent.getName());
     return true;

File: heron/api/tests/java/com/twitter/heron/streamlet/impl/StreamletImplTest.java
Patch:
@@ -247,7 +247,8 @@ public void testSimpleBuild() throws Exception {
     assertEquals(mkvStreamlet.getChildren().size(), 1);
     assertTrue(mkvStreamlet.getChildren().get(0) instanceof ReduceByKeyAndWindowStreamlet);
     ReduceByKeyAndWindowStreamlet<String, Integer> rStreamlet =
-        (ReduceByKeyAndWindowStreamlet<String, Integer>) mkvStreamlet.getChildren().get(0);
+        (ReduceByKeyAndWindowStreamlet<String, Integer>) mkvStreamlet
+            .getChildren().get(0);
     assertEquals(rStreamlet.getChildren().size(), 0);
   }
 

File: storm-compatibility-examples/src/java/org/apache/storm/examples/ExclamationTopology.java
Patch:
@@ -77,8 +77,8 @@ public static class ExclamationBolt extends BaseRichBolt {
     private OutputCollector collector;
 
     @Override
-    @SuppressWarnings("HiddenField")
-    public void prepare(Map<String, Object> stormConf, TopologyContext context,
+    @SuppressWarnings({"HiddenField", "rawtypes"})
+    public void prepare(Map stormConf, TopologyContext context,
                         OutputCollector collector) {
       this.collector = collector;
 

File: storm-compatibility/src/java/org/apache/storm/task/IBolt.java
Patch:
@@ -55,7 +55,7 @@ public interface IBolt extends Serializable {
    * @param collector The collector is used to emit tuples from this bolt. Tuples can be emitted at any time, including the prepare and cleanup methods. The collector is thread-safe and should be saved as an instance variable of this bolt object.
    */
   @SuppressWarnings("rawtypes")
-  void prepare(Map<String, Object> stormConf, TopologyContext context, OutputCollector collector);
+  void prepare(Map stormConf, TopologyContext context, OutputCollector collector);
 
   /**
    * Process a single tuple of input. The Tuple object contains metadata on it

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SourceKVStreamlet.java
Patch:
@@ -19,15 +19,15 @@
 import com.twitter.heron.api.topology.TopologyBuilder;
 import com.twitter.heron.streamlet.KeyValue;
 import com.twitter.heron.streamlet.Source;
-import com.twitter.heron.streamlet.impl.BaseKVStreamlet;
+import com.twitter.heron.streamlet.impl.KVStreamletImpl;
 import com.twitter.heron.streamlet.impl.sources.ComplexSource;
 
 /**
  * SupplierStreamlet is a very quick and flexible way of creating a Streamlet
  * from a user supplied Supplier Function. The supplier function is the
  * source of all tuples for this Streamlet.
  */
-public class SourceKVStreamlet<K, V> extends BaseKVStreamlet<K, V> {
+public class SourceKVStreamlet<K, V> extends KVStreamletImpl<K, V> {
   private Source<KeyValue<K, V>> generator;
 
   public SourceKVStreamlet(Source<KeyValue<K, V>> generator) {

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SourceStreamlet.java
Patch:
@@ -18,15 +18,15 @@
 
 import com.twitter.heron.api.topology.TopologyBuilder;
 import com.twitter.heron.streamlet.Source;
-import com.twitter.heron.streamlet.impl.BaseStreamlet;
+import com.twitter.heron.streamlet.impl.StreamletImpl;
 import com.twitter.heron.streamlet.impl.sources.ComplexSource;
 
 /**
  * SupplierStreamlet is a very quick and flexible way of creating a Streamlet
  * from a user supplied Supplier Function. The supplier function is the
  * source of all tuples for this Streamlet.
  */
-public class SourceStreamlet<R> extends BaseStreamlet<R> {
+public class SourceStreamlet<R> extends StreamletImpl<R> {
   private Source<R> generator;
 
   public SourceStreamlet(Source<R> generator) {

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SupplierKVStreamlet.java
Patch:
@@ -19,15 +19,15 @@
 import com.twitter.heron.api.topology.TopologyBuilder;
 import com.twitter.heron.streamlet.KeyValue;
 import com.twitter.heron.streamlet.SerializableSupplier;
-import com.twitter.heron.streamlet.impl.BaseKVStreamlet;
+import com.twitter.heron.streamlet.impl.KVStreamletImpl;
 import com.twitter.heron.streamlet.impl.sources.SupplierSource;
 
 /**
  * SupplierStreamlet is a very quick and flexible way of creating a Streamlet
  * from a user supplied Supplier Function. The supplier function is the
  * source of all tuples for this Streamlet.
  */
-public class SupplierKVStreamlet<K, V> extends BaseKVStreamlet<K, V> {
+public class SupplierKVStreamlet<K, V> extends KVStreamletImpl<K, V> {
   private SerializableSupplier<KeyValue<K, V>> supplier;
 
   public SupplierKVStreamlet(SerializableSupplier<KeyValue<K, V>> supplier) {

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/SupplierStreamlet.java
Patch:
@@ -18,15 +18,15 @@
 
 import com.twitter.heron.api.topology.TopologyBuilder;
 import com.twitter.heron.streamlet.SerializableSupplier;
-import com.twitter.heron.streamlet.impl.BaseStreamlet;
+import com.twitter.heron.streamlet.impl.StreamletImpl;
 import com.twitter.heron.streamlet.impl.sources.SupplierSource;
 
 /**
  * SupplierStreamlet is a very quick and flexible way of creating a Streamlet
  * from a user supplied Supplier Function. The supplier function is the
  * source of all tuples for this Streamlet.
  */
-public class SupplierStreamlet<R> extends BaseStreamlet<R> {
+public class SupplierStreamlet<R> extends StreamletImpl<R> {
   private SerializableSupplier<R> supplier;
 
   public SupplierStreamlet(SerializableSupplier<R> supplier) {

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronExecutorTaskTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.twitter.heron.api.topology.TopologyBuilder;
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Tuple;
+import com.twitter.heron.scheduler.utils.SchedulerUtils;
 import com.twitter.heron.spi.utils.ShellUtils;
 
 @RunWith(PowerMockRunner.class)
@@ -57,7 +58,8 @@ public void providesConfigsNeededForExecutorCmd() throws Exception {
     // only two configs; state manager root and url should be null.
     int nullCounter = 2;
     for (String subCommand : command) {
-      if (subCommand == null) {
+      String[] flagArg = SchedulerUtils.splitCommandArg(subCommand);
+      if (flagArg.length > 1 && flagArg[1].equals("null")) {
         nullCounter--;
       }
     }

File: heron/common/src/java/com/twitter/heron/common/basics/PackageType.java
Patch:
@@ -20,7 +20,9 @@
 public enum PackageType {
   PEX,
   JAR,
-  TAR;
+  TAR,
+  SO,
+  DYLIB;
 
   public static PackageType getPackageType(String packageFile) {
     int dotIndex = packageFile.lastIndexOf('.');

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -238,6 +238,7 @@ public static String[] executorCommandArgs(
     commands.add(completeSchedulerProcessClassPath);
     commands.add(schedulerPort);
     commands.add(Context.pythonInstanceBinary(config));
+    commands.add(Context.cppInstanceBinary(config));
     commands.add(Context.metricsCacheManagerClassPath(config));
     commands.add(metricsCacheMasterPort);
     commands.add(metricsCacheStatsPort);

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraField.java
Patch:
@@ -35,6 +35,7 @@ public enum AuroraField {
   METRICSMGR_CLASSPATH,
   METRICS_YAML,
   PYTHON_INSTANCE_BINARY,
+  CPP_INSTANCE_BINARY,
   SCHEDULER_CLASSPATH,
   SHELL_BINARY,
   STMGR_BINARY,

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -224,6 +224,8 @@ protected Map<AuroraField, String> createAuroraProperties(Resource containerReso
     auroraProperties.put(AuroraField.SHELL_BINARY, Context.shellBinary(config));
     auroraProperties.put(AuroraField.PYTHON_INSTANCE_BINARY,
         Context.pythonInstanceBinary(config));
+    auroraProperties.put(AuroraField.CPP_INSTANCE_BINARY,
+        Context.cppInstanceBinary(config));
 
     auroraProperties.put(AuroraField.CPUS_PER_CONTAINER,
         Double.toString(containerResource.getCpu()));

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -322,6 +322,9 @@ public void testProperties() throws URISyntaxException {
         case PYTHON_INSTANCE_BINARY:
           expected = expectedBin + "/heron-python-instance";
           break;
+        case CPP_INSTANCE_BINARY:
+          expected = expectedBin + "/heron-cpp-instance";
+          break;
         case SCHEDULER_CLASSPATH:
           expected =
               expectedLib + "/scheduler/*:./heron-core/lib/packing/*:./heron-core/lib/statemgr/*";

File: heron/spi/src/java/com/twitter/heron/spi/common/Key.java
Patch:
@@ -164,6 +164,7 @@ public enum Key {
   TMASTER_BINARY        ("heron.binaries.tmaster",         "${HERON_BIN}/heron-tmaster"),
   SHELL_BINARY          ("heron.binaries.shell",           "${HERON_BIN}/heron-shell"),
   PYTHON_INSTANCE_BINARY("heron.binaries.python.instance", "${HERON_BIN}/heron-python-instance"),
+  CPP_INSTANCE_BINARY   ("heron.binaries.cpp.instance",    "${HERON_BIN}/heron-cpp-instance"),
   DOWNLOADER_BINARY     ("heron.binaries.downloader",      "${HERON_BIN}/heron-downloader");
 
 

File: heron/spi/tests/java/com/twitter/heron/spi/common/ConfigLoaderTest.java
Patch:
@@ -126,6 +126,7 @@ private static void assertConfig(Config config,
     assertKeyValue(config, Key.TMASTER_BINARY, binPath + "/heron-tmaster");
     assertKeyValue(config, Key.SHELL_BINARY, binPath + "/heron-shell");
     assertKeyValue(config, Key.PYTHON_INSTANCE_BINARY, binPath + "/heron-python-instance");
+    assertKeyValue(config, Key.CPP_INSTANCE_BINARY, binPath + "/heron-cpp-instance");
 
     String libPath = config.getStringValue(Key.HERON_LIB);
     assertKeyValue(config, Key.SCHEDULER_JAR, libPath + "/scheduler/heron-scheduler.jar");

File: heron/api/src/java/com/twitter/heron/streamlet/Builder.java
Patch:
@@ -12,9 +12,9 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
-import com.twitter.heron.dsl.impl.BuilderImpl;
+import com.twitter.heron.streamlet.impl.BuilderImpl;
 
 /**
  * Builder is used to register all sources. Builder thus keeps track

File: heron/api/src/java/com/twitter/heron/streamlet/Config.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 

File: heron/api/src/java/com/twitter/heron/streamlet/Context.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.Map;

File: heron/api/src/java/com/twitter/heron/streamlet/KVStreamlet.java
Patch:
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import com.twitter.heron.classification.InterfaceStability;
 

File: heron/api/src/java/com/twitter/heron/streamlet/KeyedWindow.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 
 import java.io.Serializable;

File: heron/api/src/java/com/twitter/heron/streamlet/Resources.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 

File: heron/api/src/java/com/twitter/heron/streamlet/Runner.java
Patch:
@@ -12,13 +12,13 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import com.twitter.heron.api.HeronSubmitter;
 import com.twitter.heron.api.exception.AlreadyAliveException;
 import com.twitter.heron.api.exception.InvalidTopologyException;
 import com.twitter.heron.api.topology.TopologyBuilder;
-import com.twitter.heron.dsl.impl.BuilderImpl;
+import com.twitter.heron.streamlet.impl.BuilderImpl;
 
 /**
  * Runner is used to run a topology that is built by the builder.

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableBiFunction.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.BiFunction;

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableBinaryOperator.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.BinaryOperator;

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableConsumer.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Consumer;

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableFunction.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Function;

File: heron/api/src/java/com/twitter/heron/streamlet/SerializablePredicate.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Predicate;

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableSupplier.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Supplier;

File: heron/api/src/java/com/twitter/heron/streamlet/SerializableTransformer.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 import java.util.function.Consumer;

File: heron/api/src/java/com/twitter/heron/streamlet/Sink.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 

File: heron/api/src/java/com/twitter/heron/streamlet/Source.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.io.Serializable;
 

File: heron/api/src/java/com/twitter/heron/streamlet/Streamlet.java
Patch:
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 import java.util.List;
 
@@ -90,7 +90,7 @@ <T> Streamlet<T> flatMap(
 
   /**
    * Return a new KVStreamlet by applying map_function to each element of this Streamlet
-   * and flattening the result. It differs from the above flatMap in that it returns a
+   * and flattening the result. It differs from the above flatMap in that it returns a`
    * KVStreamlet instead of a plain Streamlet
    * @param flatMapFn The FlatMap Function that should be applied to each element
   */

File: heron/api/src/java/com/twitter/heron/streamlet/Window.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 
 import java.io.Serializable;

File: heron/api/src/java/com/twitter/heron/streamlet/WindowConfig.java
Patch:
@@ -12,15 +12,15 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl;
+package com.twitter.heron.streamlet;
 
 
 import java.time.Duration;
 
-import com.twitter.heron.dsl.impl.WindowConfigImpl;
+import com.twitter.heron.streamlet.impl.WindowConfigImpl;
 
 /**
- * WindowConfig allows dsl users to program window configuration for operations
+ * WindowConfig allows Streamlet API users to program window configuration for operations
  * that rely on windowing. Currently we only support time/count based
  * sliding/tumbling windows.
  */

File: heron/api/src/java/com/twitter/heron/streamlet/impl/ContextImpl.java
Patch:
@@ -12,14 +12,14 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl;
+package com.twitter.heron.streamlet.impl;
 
 import java.io.Serializable;
 import java.util.Map;
 
 import com.twitter.heron.api.state.State;
 import com.twitter.heron.api.topology.TopologyContext;
-import com.twitter.heron.dsl.Context;
+import com.twitter.heron.streamlet.Context;
 
 /**
  * Context is the information available at runtime for operators like transform.

File: heron/api/src/java/com/twitter/heron/streamlet/impl/WindowConfigImpl.java
Patch:
@@ -12,13 +12,13 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl;
+package com.twitter.heron.streamlet.impl;
 
 
 import java.time.Duration;
 
 import com.twitter.heron.api.bolt.BaseWindowedBolt;
-import com.twitter.heron.dsl.WindowConfig;
+import com.twitter.heron.streamlet.WindowConfig;
 
 /**
  * WindowConfigImpl implements the WindowConfig interface.

File: heron/api/src/java/com/twitter/heron/streamlet/impl/groupings/JoinCustomGrouping.java
Patch:
@@ -12,14 +12,14 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.groupings;
+package com.twitter.heron.streamlet.impl.groupings;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import com.twitter.heron.api.grouping.CustomStreamGrouping;
 import com.twitter.heron.api.topology.TopologyContext;
-import com.twitter.heron.dsl.KeyValue;
+import com.twitter.heron.streamlet.KeyValue;
 
 /**
  * JoinCustomGrouping is the class that routes the incoming tuples into the

File: heron/api/src/java/com/twitter/heron/streamlet/impl/groupings/ReduceByKeyAndWindowCustomGrouping.java
Patch:
@@ -12,14 +12,14 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.groupings;
+package com.twitter.heron.streamlet.impl.groupings;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import com.twitter.heron.api.grouping.CustomStreamGrouping;
 import com.twitter.heron.api.topology.TopologyContext;
-import com.twitter.heron.dsl.KeyValue;
+import com.twitter.heron.streamlet.KeyValue;
 
 /**
  * ReduceByKeyAndWindowCustomGrouping is the class that routes the incoming tuples

File: heron/api/src/java/com/twitter/heron/streamlet/impl/groupings/ReduceByWindowCustomGrouping.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.groupings;
+package com.twitter.heron.streamlet.impl.groupings;
 
 import java.util.ArrayList;
 import java.util.List;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/groupings/RemapCustomGrouping.java
Patch:
@@ -12,14 +12,14 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.groupings;
+package com.twitter.heron.streamlet.impl.groupings;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import com.twitter.heron.api.grouping.CustomStreamGrouping;
 import com.twitter.heron.api.topology.TopologyContext;
-import com.twitter.heron.dsl.SerializableBiFunction;
+import com.twitter.heron.streamlet.SerializableBiFunction;
 
 /**
  * RemapCustomGrouping is the class that routes the incoming tuples

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/FilterOperator.java
Patch:
@@ -12,23 +12,23 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.operators;
+package com.twitter.heron.streamlet.impl.operators;
 
 import java.util.Map;
 
 import com.twitter.heron.api.bolt.OutputCollector;
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Tuple;
 import com.twitter.heron.api.tuple.Values;
-import com.twitter.heron.dsl.SerializablePredicate;
+import com.twitter.heron.streamlet.SerializablePredicate;
 
 /**
  * FilterOperator implements the  functionality of the filter operation
  * It takes in a filterFunction predicate as the input.
  * For every tuple that it encounters, the filter function is run
  * and the tuple is re-emitted if the predicate evaluates to true
  */
-public class FilterOperator<R> extends DslOperator {
+public class FilterOperator<R> extends StreamletOperator {
   private static final long serialVersionUID = -4748646871471052706L;
   private SerializablePredicate<? super R> filterFn;
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/FlatMapOperator.java
Patch:
@@ -12,23 +12,23 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.operators;
+package com.twitter.heron.streamlet.impl.operators;
 
 import java.util.Map;
 
 import com.twitter.heron.api.bolt.OutputCollector;
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Tuple;
 import com.twitter.heron.api.tuple.Values;
-import com.twitter.heron.dsl.SerializableFunction;
+import com.twitter.heron.streamlet.SerializableFunction;
 
 /**
  * FlatMapOperator is the class that implements the flatMap functionality.
  * It takes in the flatMapFunction Function as the input.
  * For every tuple, it applies the flatMapFunction, flattens the resulting
  * tuples and emits them
  */
-public class FlatMapOperator<R, T> extends DslOperator {
+public class FlatMapOperator<R, T> extends StreamletOperator {
   private static final long serialVersionUID = -2418329215159618998L;
   private SerializableFunction<? super R, ? extends Iterable<? extends T>> flatMapFn;
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/MapOperator.java
Patch:
@@ -12,22 +12,22 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.operators;
+package com.twitter.heron.streamlet.impl.operators;
 
 import java.util.Map;
 
 import com.twitter.heron.api.bolt.OutputCollector;
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Tuple;
 import com.twitter.heron.api.tuple.Values;
-import com.twitter.heron.dsl.SerializableFunction;
+import com.twitter.heron.streamlet.SerializableFunction;
 
 /**
  * MapOperator is the class that implements the map functionality.
  * It takes in the mapFunction Function as the input.
  * For every tuple, it applies the mapFunction, and emits the resulting value
  */
-public class MapOperator<R, T> extends DslOperator {
+public class MapOperator<R, T> extends StreamletOperator {
   private static final long serialVersionUID = -1303096133107278700L;
   private SerializableFunction<? super R, ? extends T> mapFn;
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/operators/UnionOperator.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.operators;
+package com.twitter.heron.streamlet.impl.operators;
 
 import java.util.Map;
 
@@ -25,7 +25,7 @@
  * UnionOperator is the class that implements the union functionality.
  * Its a very simple bolt that re-emits every tuple that it sees.
  */
-public class UnionOperator<I> extends DslOperator {
+public class UnionOperator<I> extends StreamletOperator {
   private static final long serialVersionUID = -7326832064961413315L;
   private OutputCollector collector;
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/sinks/LogSink.java
Patch:
@@ -12,21 +12,21 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.sinks;
+package com.twitter.heron.streamlet.impl.sinks;
 
 import java.util.Map;
 import java.util.logging.Logger;
 
 import com.twitter.heron.api.bolt.OutputCollector;
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Tuple;
-import com.twitter.heron.dsl.impl.operators.DslOperator;
+import com.twitter.heron.streamlet.impl.operators.StreamletOperator;
 
 /**
  * LogSink is a very simple Bolt that implements the log functionality.
  * It basically logs every tuple.
  */
-public class LogSink<R> extends DslOperator {
+public class LogSink<R> extends StreamletOperator {
   private static final long serialVersionUID = -6392422646613189818L;
   private static final Logger LOG = Logger.getLogger(LogSink.class.getName());
   private OutputCollector collector;

File: heron/api/src/java/com/twitter/heron/streamlet/impl/sources/SupplierSource.java
Patch:
@@ -12,21 +12,21 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.sources;
+package com.twitter.heron.streamlet.impl.sources;
 
 import java.util.Map;
 
 import com.twitter.heron.api.spout.SpoutOutputCollector;
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Values;
-import com.twitter.heron.dsl.SerializableSupplier;
+import com.twitter.heron.streamlet.SerializableSupplier;
 
 /**
  * SupplierSource is a way to wrap a supplier function inside a Heron Spout.
  * The SupplierSource just calls the get method of the supplied function
  * to generate the next tuple.
  */
-public class SupplierSource<R> extends DslSource {
+public class SupplierSource<R> extends StreamletSource {
   private static final long serialVersionUID = 6476611751545430216L;
   private SerializableSupplier<R> supplier;
 

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/LogStreamlet.java
Patch:
@@ -12,13 +12,13 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.streamlets;
+package com.twitter.heron.streamlet.impl.streamlets;
 
 import java.util.Set;
 
 import com.twitter.heron.api.topology.TopologyBuilder;
-import com.twitter.heron.dsl.impl.BaseStreamlet;
-import com.twitter.heron.dsl.impl.sinks.LogSink;
+import com.twitter.heron.streamlet.impl.BaseStreamlet;
+import com.twitter.heron.streamlet.impl.sinks.LogSink;
 
 /**
  * LogStreamlet represents en empty Streamlet that is made up of elements from the parent

File: heron/api/src/java/com/twitter/heron/streamlet/impl/streamlets/UnionStreamlet.java
Patch:
@@ -12,13 +12,13 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.dsl.impl.streamlets;
+package com.twitter.heron.streamlet.impl.streamlets;
 
 import java.util.Set;
 
 import com.twitter.heron.api.topology.TopologyBuilder;
-import com.twitter.heron.dsl.impl.BaseStreamlet;
-import com.twitter.heron.dsl.impl.operators.UnionOperator;
+import com.twitter.heron.streamlet.impl.BaseStreamlet;
+import com.twitter.heron.streamlet.impl.operators.UnionOperator;
 
 /**
  * UnionStreamlet is a Streamlet composed of all the elements of two

File: heron/api/src/java/com/twitter/heron/dsl/impl/streamlets/JoinStreamlet.java
Patch:
@@ -53,7 +53,7 @@ public final class JoinStreamlet<K, V1, V2, VR> extends BaseKVStreamlet<KeyedWin
                               BaseKVStreamlet<A, C> right,
                               WindowConfig windowCfg,
                               SerializableBiFunction<? super B, ? super C, ? extends D> joinFn) {
-    return new JoinStreamlet<A, B, C, D>(JoinOperator.JoinType.LEFT, left,
+    return new JoinStreamlet<A, B, C, D>(JoinOperator.JoinType.OUTER_LEFT, left,
                                          right, windowCfg, joinFn);
   }
 
@@ -62,7 +62,7 @@ public final class JoinStreamlet<K, V1, V2, VR> extends BaseKVStreamlet<KeyedWin
                                BaseKVStreamlet<A, C> right,
                                WindowConfig windowCfg,
                                SerializableBiFunction<? super B, ? super C, ? extends D> joinFn) {
-    return new JoinStreamlet<A, B, C, D>(JoinOperator.JoinType.OUTER, left,
+    return new JoinStreamlet<A, B, C, D>(JoinOperator.JoinType.OUTER_RIGHT, left,
                                          right, windowCfg, joinFn);
   }
 

File: heron/api/tests/java/com/twitter/heron/dsl/impl/BaseKVStreamletTest.java
Patch:
@@ -106,7 +106,7 @@ public void testLeftJoinStreamlet() throws Exception {
             WindowConfig.TumblingCountWindow(10), (x, y) -> x + y);
     assertTrue(joinedStreamlet instanceof JoinStreamlet);
     assertEquals(((JoinStreamlet<Double, Integer, Integer, Integer>) joinedStreamlet)
-        .getJoinType(), JoinOperator.JoinType.LEFT);
+        .getJoinType(), JoinOperator.JoinType.OUTER_LEFT);
 
     SupplierStreamlet<Double> supplierStreamlet1 = (SupplierStreamlet<Double>) baseStreamlet1;
     assertEquals(supplierStreamlet1.getChildren().size(), 1);
@@ -143,7 +143,7 @@ public void testOuterJoinStreamlet() throws Exception {
             WindowConfig.TumblingCountWindow(10), (x, y) -> x + y);
     assertTrue(joinedStreamlet instanceof JoinStreamlet);
     assertEquals(((JoinStreamlet<Double, Integer, Integer, Integer>) joinedStreamlet)
-        .getJoinType(), JoinOperator.JoinType.OUTER);
+        .getJoinType(), JoinOperator.JoinType.OUTER_RIGHT);
 
     SupplierStreamlet<Double> supplierStreamlet1 = (SupplierStreamlet<Double>) baseStreamlet1;
     assertEquals(supplierStreamlet1.getChildren().size(), 1);

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/detectors/BackPressureDetector.java
Patch:
@@ -33,7 +33,7 @@
 import static com.twitter.heron.healthmgr.detectors.BaseDetector.SymptomName.SYMPTOM_BACK_PRESSURE;
 
 public class BackPressureDetector implements IDetector {
-  static final String CONF_NOISE_FILTER = "BackPressureDetector.noiseFilterMillis";
+  public static final String CONF_NOISE_FILTER = "BackPressureDetector.noiseFilterMillis";
 
   private static final Logger LOG = Logger.getLogger(BackPressureDetector.class.getName());
   private final BackPressureSensor bpSensor;

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraHeronShellController.java
Patch:
@@ -77,6 +77,7 @@ public boolean restart(Integer containerId) {
 
     String url = null;
     if (containerId == 0) {
+      // TODO(huijun): needs shell port for container 0
       throw new UnsupportedOperationException("Not implemented for container 0");
     } else {
       int index = containerId - 1; // stmgr container starts from 1

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraHeronShellController.java
Patch:
@@ -80,9 +80,9 @@ public boolean restart(Integer containerId) {
       throw new UnsupportedOperationException("Not implemented for container 0");
     } else {
       int index = containerId - 1; // stmgr container starts from 1
-      StMgr contaienrInfo = stateMgrAdaptor.getPhysicalPlan(topologyName).getStmgrs(index);
-      String host = contaienrInfo.getHostName();
-      int port = contaienrInfo.getShellPort();
+      StMgr containerInfo = stateMgrAdaptor.getPhysicalPlan(topologyName).getStmgrs(index);
+      String host = containerInfo.getHostName();
+      int port = containerInfo.getShellPort();
       url = "http://" + host + ":" + port + "/killexecutor";
     }
 

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/common/ComponentMetricsHelper.java
Patch:
@@ -47,8 +47,8 @@ public ComponentMetricsHelper(ComponentMetrics compMetrics) {
 
   public void computeBpStats() {
     for (InstanceMetrics instanceMetrics : componentMetrics.getMetrics().values()) {
-      double bpValue = instanceMetrics.getMetricValueSum(METRIC_BACK_PRESSURE.text());
-      if (bpValue > 0) {
+      Double bpValue = instanceMetrics.getMetricValueSum(METRIC_BACK_PRESSURE.text());
+      if (bpValue != null && bpValue > 0) {
         boltsWithBackpressure.add(instanceMetrics);
         totalBackpressure += bpValue;
       }

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/sensors/BaseSensor.java
Patch:
@@ -29,7 +29,7 @@ public enum MetricName {
     METRIC_EXE_COUNT("__execute-count/default"),
     METRIC_BACK_PRESSURE("__time_spent_back_pressure_by_compid/"),
     METRIC_BUFFER_SIZE("__connection_buffer_by_instanceid/"),
-    METRIC_BUFFER_SIZE_SUFFIX("/packets"),
+    METRIC_BUFFER_SIZE_SUFFIX("/bytes"),
     METRIC_WAIT_Q_GROWTH_RATE("METRIC_WAIT_Q_GROWTH_RATE");
 
     private String text;

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -89,7 +89,8 @@ protected AuroraController getController()
           Context.role(localConfig),
           Context.environ(localConfig),
           AuroraContext.getHeronAuroraPath(localConfig),
-          Context.verbose(localConfig));
+          Context.verbose(localConfig),
+          localConfig);
     }
   }
 

File: heron/api/src/java/com/twitter/heron/dsl/SerializableGenerator.java
Patch:
@@ -24,6 +24,6 @@
  */
 public interface SerializableGenerator<T> extends Serializable {
   void setup(Context context);
-  <T> T get();
+  T get();
   void cleanup();
 }

File: heron/api/src/java/com/twitter/heron/dsl/impl/operators/FlatMapOperator.java
Patch:
@@ -30,11 +30,12 @@
  */
 public class FlatMapOperator<R, T> extends DslOperator {
   private static final long serialVersionUID = -2418329215159618998L;
-  private SerializableFunction<? super R, Iterable<? extends T>> flatMapFn;
+  private SerializableFunction<? super R, ? extends Iterable<? extends T>> flatMapFn;
 
   private OutputCollector collector;
 
-  public FlatMapOperator(SerializableFunction<? super R, Iterable<? extends T>> flatMapFn) {
+  public FlatMapOperator(
+      SerializableFunction<? super R, ? extends Iterable<? extends T>> flatMapFn) {
     this.flatMapFn = flatMapFn;
   }
 

File: heron/api/src/java/com/twitter/heron/dsl/impl/streamlets/FlatMapStreamlet.java
Patch:
@@ -28,10 +28,11 @@
  */
 public class FlatMapStreamlet<R, T> extends BaseStreamlet<T> {
   private BaseStreamlet<R> parent;
-  private SerializableFunction<? super R, Iterable<? extends T>> flatMapFn;
+  private SerializableFunction<? super R, ? extends Iterable<? extends T>> flatMapFn;
 
   public FlatMapStreamlet(BaseStreamlet<R> parent,
-                          SerializableFunction<? super R, Iterable<? extends T>> flatMapFn) {
+                          SerializableFunction<? super R,
+                              ? extends Iterable<? extends T>> flatMapFn) {
     this.parent = parent;
     this.flatMapFn = flatMapFn;
     setNumPartitions(parent.getNumPartitions());

File: heron/api/src/java/com/twitter/heron/dsl/impl/streamlets/KVFlatMapStreamlet.java
Patch:
@@ -33,7 +33,7 @@ public class KVFlatMapStreamlet<R, K, V> extends BaseKVStreamlet<K, V> {
 
   public KVFlatMapStreamlet(BaseStreamlet<R> parent,
                             SerializableFunction<? super R,
-                                                 Iterable<? extends KeyValue<K, V>>> flatMapFn) {
+                                ? extends Iterable<KeyValue<K, V>>> flatMapFn) {
     this.delegate = new FlatMapStreamlet<>(parent, flatMapFn);
     setNumPartitions(delegate.getNumPartitions());
   }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/utils/HttpJsonClient.java
Patch:
@@ -53,7 +53,7 @@ public JsonNode get(Integer expectedResponseCode) throws IOException {
     byte[] responseData;
     try {
       if (!NetworkUtils.sendHttpGetRequest(conn)) {
-        throw new IOException("Failed to send delete request to " + endpointURI);
+        throw new IOException("Failed to send get request to " + endpointURI);
       }
 
       // Check the response code

File: storm-compatibility/src/java/org/apache/storm/metric/api/IMetricsConsumer.java
Patch:
@@ -89,7 +89,7 @@ public int hashCode() {
   }
 
   @SuppressWarnings("rawtypes")
-  void prepare(Map stormConf, Object registrationArgument,
+  void prepare(Map<String, Object> stormConf, Object registrationArgument,
                TopologyContext context, IErrorReporter errorReporter);
 
   void handleDataPoints(TaskInfo taskInfo, Collection<DataPoint> dataPoints);

File: heron/api/tests/java/com/twitter/heron/api/windowing/WaterMarkEventGeneratorTest.java
Patch:
@@ -48,7 +48,7 @@ public void add(Event<Integer> event) {
       }
     };
     // set watermark interval to a high value and trigger manually to fix timing issues
-    waterMarkEventGenerator = new WaterMarkEventGenerator<>(windowManager, 100000, 5, Collections
+    waterMarkEventGenerator = new WaterMarkEventGenerator<>(windowManager, 5, Collections
         .singleton(streamId("s1")));
     waterMarkEventGenerator.start();
   }
@@ -77,7 +77,8 @@ public void testTrackTwoStreams() throws Exception {
     Set<TopologyAPI.StreamId> streams = new HashSet<>();
     streams.add(streamId("s1"));
     streams.add(streamId("s2"));
-    waterMarkEventGenerator = new WaterMarkEventGenerator<>(windowManager, 100000, 5, streams);
+    waterMarkEventGenerator = new WaterMarkEventGenerator<>(windowManager, 5, streams);
+    waterMarkEventGenerator.start();
 
     waterMarkEventGenerator.track(streamId("s1"), 100);
     waterMarkEventGenerator.track(streamId("s1"), 110);

File: examples/src/java/com/twitter/heron/examples/api/AckingTopology.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.examples;
+package com.twitter.heron.examples.api;
 
 import java.util.Map;
 import java.util.Random;

File: examples/src/java/com/twitter/heron/examples/api/ExampleResources.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples;
+package com.twitter.heron.examples.api;
 
 import com.twitter.heron.common.basics.ByteAmount;
 

File: examples/src/java/com/twitter/heron/examples/api/bolt/PrinterBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.bolt;
+package com.twitter.heron.examples.api.bolt;
 
 import com.twitter.heron.api.bolt.BaseBasicBolt;
 import com.twitter.heron.api.bolt.BasicOutputCollector;

File: examples/src/java/com/twitter/heron/examples/api/bolt/SlidingWindowSumBolt.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.bolt;
+package com.twitter.heron.examples.api.bolt;
 
 import java.util.List;
 import java.util.Map;

File: examples/src/java/com/twitter/heron/examples/api/spout/RandomIntegerSpout.java
Patch:
@@ -11,7 +11,7 @@
 //  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
-package com.twitter.heron.examples.spout;
+package com.twitter.heron.examples.api.spout;
 
 import java.util.Map;
 import java.util.Random;

File: examples/src/java/com/twitter/heron/examples/api/spout/TestWordSpout.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.examples.spout;
+package com.twitter.heron.examples.api.spout;
 
 import java.time.Duration;
 import java.util.Map;

File: examples/src/java/com/twitter/heron/examples/dsl/WordCountDslTopology.java
Patch:
@@ -12,7 +12,7 @@
 //  See the License for the specific language governing permissions and
 //  limitations under the License.
 
-package com.twitter.heron.examples;
+package com.twitter.heron.examples.dsl;
 
 import java.util.Arrays;
 

File: heron/simulator/src/java/com/twitter/heron/simulator/executors/InstanceExecutor.java
Patch:
@@ -24,10 +24,10 @@
 import com.twitter.heron.common.basics.SlaveLooper;
 import com.twitter.heron.common.utils.metrics.MetricsCollector;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
+import com.twitter.heron.instance.IInstance;
 import com.twitter.heron.proto.system.Metrics;
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.simulator.instance.BoltInstance;
-import com.twitter.heron.simulator.instance.IInstance;
 import com.twitter.heron.simulator.instance.SpoutInstance;
 
 /**
@@ -204,6 +204,7 @@ public void deactivate() {
   }
 
   private void startInstance() {
+    instance.init(null);
     instance.start();
     isInstanceStarted = true;
     LOG.info("Started instance.");

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltInstance.java
Patch:
@@ -29,6 +29,7 @@
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.tuple.TupleImpl;
+import com.twitter.heron.instance.IInstance;
 import com.twitter.heron.proto.ckptmgr.CheckpointManager;
 import com.twitter.heron.proto.system.HeronTuples;
 

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/SpoutInstance.java
Patch:
@@ -27,6 +27,7 @@
 import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
+import com.twitter.heron.instance.IInstance;
 
 public class SpoutInstance
     extends com.twitter.heron.instance.spout.SpoutInstance implements IInstance {

File: heron/simulator/tests/java/com/twitter/heron/simulator/executors/InstanceExecutorTest.java
Patch:
@@ -25,8 +25,8 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.utils.metrics.MetricsCollector;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
+import com.twitter.heron.instance.IInstance;
 import com.twitter.heron.proto.system.PhysicalPlans;
-import com.twitter.heron.simulator.instance.IInstance;
 import com.twitter.heron.simulator.utils.PhysicalPlanUtil;
 import com.twitter.heron.simulator.utils.PhysicalPlanUtilTest;
 

File: examples/src/java/com/twitter/heron/examples/StatefulWordCountTopology.java
Patch:
@@ -195,6 +195,7 @@ public static void main(String[] args) throws AlreadyAliveException, InvalidTopo
     Config conf = new Config();
     conf.setNumStmgrs(parallelism);
     conf.setTopologyReliabilityMode(Config.TopologyReliabilityMode.EFFECTIVELY_ONCE);
+    conf.setTopologyStatefulCheckpointIntervalSecs(20);
 
     // configure component resources
     com.twitter.heron.api.Config.setComponentRam(conf, "word",

File: heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java
Patch:
@@ -283,7 +283,8 @@ private void handleStartStatefulRequest(
 
   private void handleRestoreInstanceStateRequest(
       CheckpointManager.RestoreInstanceStateRequest request) {
-    LOG.info("Received a RestoreInstanceState request: " + request);
+    LOG.info("Received a RestoreInstanceState request with checkpoint id: "
+          + request.getState().getCheckpointId());
 
     InstanceControlMsg instanceControlMsg = InstanceControlMsg.newBuilder()
         .setRestoreInstanceStateRequest(request)

File: heron/simulator/src/java/com/twitter/heron/simulator/executors/InstanceExecutor.java
Patch:
@@ -154,7 +154,7 @@ protected void handleControlSignal() {
     }
 
     if (toStop) {
-      instance.stop();
+      instance.shutdown();
       LOG.info("Stopped instance: " + physicalPlanHelper.getMyInstanceId());
 
       // Reset the flag value

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/IInstance.java
Patch:
@@ -34,7 +34,7 @@ public interface IInstance {
    * TODO: - to avoid confusing, we in fact have never called this method yet
    * TODO: - need to consider whether or not call this method more carefully
    */
-  void stop();
+  void shutdown();
 
   /**
    * Read tuples from a queue and process the tuples

File: heron/api/src/java/com/twitter/heron/api/HeronTopology.java
Patch:
@@ -52,7 +52,7 @@ private static void addDefaultTopologyConfig(Map<String, Object> userConfig) {
     }
     if (!userConfig.containsKey(Config.TOPOLOGY_RELIABILITY_MODE)) {
       userConfig.put(Config.TOPOLOGY_RELIABILITY_MODE,
-                     String.valueOf(Config.TopologyReliabilityMode.ATLEAST_ONCE));
+                     String.valueOf(Config.TopologyReliabilityMode.ATMOST_ONCE));
     }
     if (!userConfig.containsKey(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS)) {
       userConfig.put(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS, "true");

File: storm-compatibility/src/java/backtype/storm/utils/ConfigUtils.java
Patch:
@@ -60,6 +60,9 @@ public static Config translateConfig(Map stormConfig) {
         com.twitter.heron.api.Config.setTopologyReliabilityMode(heronConfig,
                  com.twitter.heron.api.Config.TopologyReliabilityMode.ATMOST_ONCE);
       }
+    } else {
+      com.twitter.heron.api.Config.setTopologyReliabilityMode(heronConfig,
+               com.twitter.heron.api.Config.TopologyReliabilityMode.ATMOST_ONCE);
     }
     if (heronConfig.containsKey(backtype.storm.Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)) {
       Integer nSecs =

File: storm-compatibility/src/java/org/apache/storm/utils/ConfigUtils.java
Patch:
@@ -61,6 +61,9 @@ public static Config translateConfig(Map stormConfig) {
         com.twitter.heron.api.Config.setTopologyReliabilityMode(heronConfig,
                  com.twitter.heron.api.Config.TopologyReliabilityMode.ATMOST_ONCE);
       }
+    } else {
+      com.twitter.heron.api.Config.setTopologyReliabilityMode(heronConfig,
+               com.twitter.heron.api.Config.TopologyReliabilityMode.ATMOST_ONCE);
     }
     if (heronConfig.containsKey(org.apache.storm.Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)) {
       Integer nSecs =

File: examples/src/java/com/twitter/heron/examples/WordCountDslTopology.java
Patch:
@@ -16,8 +16,8 @@
 
 import java.util.Arrays;
 
-import com.twitter.heron.api.Config;
 import com.twitter.heron.dsl.Builder;
+import com.twitter.heron.dsl.Config;
 import com.twitter.heron.dsl.KeyValue;
 import com.twitter.heron.dsl.Runner;
 import com.twitter.heron.dsl.WindowConfig;
@@ -55,8 +55,8 @@ public static void main(String[] args) {
         .reduceByKeyAndWindow(WindowConfig.TumblingCountWindow(10), (x, y) -> x + y)
         .log();
     Config conf = new Config();
-    conf.setNumStmgrs(parallelism);
-    Runner runner = Runner.CreateRunner();
+    conf.setNumContainers(parallelism);
+    Runner runner = new Runner();
     runner.run(args[0], conf, builder);
   }
 }

File: heron/dsl/src/java/com/twitter/heron/dsl/TransformFunction.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.dsl;
 
 import java.io.Serializable;
+import java.util.function.Consumer;
 
 /**
  * All user supplied transformation functions have to be serializable.
@@ -25,6 +26,6 @@
  */
 public interface TransformFunction<I, O> extends Serializable {
   void setup(Context context);
-  O transform(I i);
+  void transform(I i, Consumer<O> consumer);
   void cleanup();
 }

File: heron/dsl/src/java/com/twitter/heron/dsl/impl/operators/TransformOperator.java
Patch:
@@ -67,8 +67,7 @@ public void prepare(Map<String, Object> map, TopologyContext topologyContext,
   @Override
   public void execute(Tuple tuple) {
     R obj = (R) tuple.getValue(0);
-    T result = transformFunction.transform(obj);
-    collector.emit(new Values(result));
+    transformFunction.transform(obj, x -> collector.emit(new Values(x)));
     collector.ack(tuple);
   }
 }

File: heron/dsl/tests/java/com/twitter/heron/dsl/impl/BaseStreamletTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import java.util.function.Consumer;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -224,8 +225,8 @@ public void setup(Context context) {
           }
 
           @Override
-          public Double transform(Double aDouble) {
-            return aDouble;
+          public void transform(Double aDouble, Consumer<Double> consumer) {
+            consumer.accept(aDouble);
           }
 
           @Override

File: heron/downloaders/src/java/com/twitter/heron/downloader/Registry.java
Patch:
@@ -26,6 +26,7 @@ final class Registry {
   static {
     DOWNLOADERS.put("http", HttpDownloader.class);
     DOWNLOADERS.put("https", HttpDownloader.class);
+    DOWNLOADERS.put("distributedlog", DLDownloader.class);
   }
 
   private static final Registry INSTANCE = new Registry();

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -131,7 +131,7 @@ private SettableFuture<PackingPlans.PackingPlan> getTestPacking() {
     PackingPlans.PackingPlan packingPlan =
         PackingTestUtils.testProtoPackingPlan("testTopology", new RoundRobinPacking());
     final SettableFuture<PackingPlans.PackingPlan> future = SettableFuture.create();
-    future.set(packingPlan);
+    assertTrue(future.set(packingPlan));
     return future;
   }
 

File: heron/instance/src/java/com/twitter/heron/instance/Slave.java
Patch:
@@ -37,6 +37,7 @@
 import com.twitter.heron.instance.bolt.BoltInstance;
 import com.twitter.heron.instance.spout.SpoutInstance;
 import com.twitter.heron.proto.ckptmgr.CheckpointManager;
+import com.twitter.heron.proto.system.Common;
 import com.twitter.heron.proto.system.Metrics;
 
 /**
@@ -282,6 +283,7 @@ private void handleRestoreInstanceStateRequest(InstanceControlMsg instanceContro
     CheckpointManager.RestoreInstanceStateResponse response =
         CheckpointManager.RestoreInstanceStateResponse.newBuilder()
             .setCheckpointId(request.getState().getCheckpointId())
+            .setStatus(Common.Status.newBuilder().setStatus(Common.StatusCode.OK).build())
             .build();
     streamOutCommunicator.offer(response);
   }

File: tools/java/src/com/twitter/bazel/checkstyle/PythonCheckstyle.java
Patch:
@@ -129,7 +129,8 @@ private static Collection<String> getSourceFiles(String extraActionFile) {
     return Collections2.filter(spawnInfo.getInputFileList(),
         Predicates.and(
             Predicates.containsPattern(".*/src/.+\\.py[c]{0,1}$"),
-            Predicates.not(Predicates.containsPattern("third_party/"))
+            Predicates.not(Predicates.containsPattern("third_party/")),
+            Predicates.not(Predicates.containsPattern("integration_test/"))
         )
     );
   }

File: storm-compatibility/src/java/org/apache/storm/task/IBolt.java
Patch:
@@ -55,7 +55,7 @@ public interface IBolt extends Serializable {
    * @param collector The collector is used to emit tuples from this bolt. Tuples can be emitted at any time, including the prepare and cleanup methods. The collector is thread-safe and should be saved as an instance variable of this bolt object.
    */
   @SuppressWarnings("rawtypes")
-  void prepare(Map stormConf, TopologyContext context, OutputCollector collector);
+  void prepare(Map<String, Object> stormConf, TopologyContext context, OutputCollector collector);
 
   /**
    * Process a single tuple of input. The Tuple object contains metadata on it

File: storm-compatibility/src/java/org/apache/storm/topology/IRichBoltDelegate.java
Patch:
@@ -46,7 +46,7 @@ public IRichBoltDelegate(IRichBolt delegate) {
   @Override
   @SuppressWarnings("rawtypes")
   public void prepare(
-      Map conf,
+      Map<String, Object> conf,
       com.twitter.heron.api.topology.TopologyContext context,
       com.twitter.heron.api.bolt.OutputCollector collector) {
     topologyContextImpl = new TopologyContext(context);

File: heron/examples/src/java/com/twitter/heron/examples/ComponentJVMOptionsTopology.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.examples.spout.TestWordSpout;
 
 import backtype.storm.Config;
 import backtype.storm.LocalCluster;

File: heron/examples/src/java/com/twitter/heron/examples/CustomGroupingTopology.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.List;
 import java.util.Map;
 
+import com.twitter.heron.examples.spout.TestWordSpout;
+
 import backtype.storm.Config;
 import backtype.storm.StormSubmitter;
 import backtype.storm.generated.GlobalStreamId;

File: heron/examples/src/java/com/twitter/heron/examples/ExclamationTopology.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.twitter.heron.api.topology.IUpdatable;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.examples.spout.TestWordSpout;
 
 import backtype.storm.Config;
 import backtype.storm.LocalCluster;

File: heron/examples/src/java/com/twitter/heron/examples/MultiSpoutExclamationTopology.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Map;
 
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.examples.spout.TestWordSpout;
 
 import backtype.storm.Config;
 import backtype.storm.LocalCluster;

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/WebSink.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.stream.Stream;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 
@@ -122,9 +123,8 @@ public void init(Map<String, Object> conf, SinkContext context) {
     int port = TypeUtils.getInteger(conf.getOrDefault(KEY_PORT, 0));
     if (port == 0) {
       if (!Strings.isNullOrEmpty(portFile)) {
-        try {
-          port = TypeUtils.getInteger(Files.lines(Paths.get(portFile)).findFirst()
-                  .get().trim());
+        try (Stream<String> lines = Files.lines(Paths.get(portFile))) {
+          port = TypeUtils.getInteger(lines.findFirst().get().trim());
         } catch (IOException | SecurityException | IllegalArgumentException e) {
           throw new IllegalArgumentException("Could not parse " + KEY_PORT_FILE + " " + portFile
                   + " Make sure the file is readable,"

File: heron/spi/src/java/com/twitter/heron/spi/common/Config.java
Patch:
@@ -290,7 +290,7 @@ public Duration getDurationValue(String key, TemporalUnit unit, Duration default
   }
 
   public boolean containsKey(Key key) {
-    return cfgMap.containsKey(key);
+    return cfgMap.containsKey(key.value());
   }
 
   public Set<String> getKeySet() {

File: tools/java/src/com/twitter/bazel/checkstyle/JavaCheckstyle.java
Patch:
@@ -109,6 +109,7 @@ private static void checkStyle(String[] files, String config) throws IOException
   private static String[] getHeronSourceFiles(String extraActionFile) {
     return getSourceFiles(extraActionFile, Predicates.not(Predicates.or(
         Predicates.containsPattern("heron/storm.src.java"),
+        Predicates.containsPattern("tools/test/LcovMerger"),
         Predicates.containsPattern("contrib")
     )));
   }

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/HealthManagerTest.java
Patch:
@@ -64,7 +64,7 @@ public void testInitialize() throws Exception {
     when(adaptor.getSchedulerLocation(anyString())).thenReturn(schedulerLocation);
 
     AbstractModule baseModule = HealthManager
-        .buildMetricsProviderModule(config, "127.0.0.1", TrackerMetricsProvider.class);
+        .buildMetricsProviderModule("127.0.0.1", TrackerMetricsProvider.class.getName());
 
     HealthManager healthManager = new HealthManager(config, baseModule);
 

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/policy/DynamicResourceAllocationPolicy.java
Patch:
@@ -75,7 +75,7 @@ public class DynamicResourceAllocationPolicy extends HealthPolicyImpl
     registerDiagnosers(underProvisioningDiagnoser, dataSkewDiagnoser, slowInstanceDiagnoser);
 
     setPolicyExecutionInterval(TimeUnit.MILLISECONDS,
-        Long.parseLong((String) policyConfig.getConfig(HEALTH_POLICY_INTERVAL.key(), "60000")));
+        (int) policyConfig.getConfig(HEALTH_POLICY_INTERVAL.key(), 60000));
 
     eventManager.addEventListener(TopologyUpdate.class, this);
   }

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/HealthPolicyConfigReader.java
Patch:
@@ -46,7 +46,9 @@ public enum PolicyConfigKey {
     HEALTH_POLICIES("heron.class.health.policies"),
     HEALTH_POLICY_CLASS("health.policy.class"),
     HEALTH_POLICY_INTERVAL("health.policy.interval.ms"),
-    CONF_SENSOR_DURATION_SUFFIX(".duration");
+    CONF_SENSOR_DURATION_SUFFIX(".duration"),
+    METRIC_SOURCE_TYPE("heron.healthmgr.metricsource.type"),
+    METRIC_SOURCE_URL("heron.healthmgr.metricsource.url");
 
     private String key;
 

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/detectors/WaitQueueDisparityDetector.java
Patch:
@@ -27,7 +27,7 @@ public class WaitQueueDisparityDetector extends SkewDetector {
   WaitQueueDisparityDetector(BufferSizeSensor pendingBufferSensor,
                              HealthPolicyConfig policyConfig) {
     super(pendingBufferSensor,
-        (double) policyConfig.getConfig(CONF_DISPARITY_RATIO, 20),
+        (double) policyConfig.getConfig(CONF_DISPARITY_RATIO, 20.0),
         BaseDetector.SymptomName.SYMPTOM_WAIT_Q_DISPARITY);
   }
 }

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/policy/DynamicResourceAllocationPolicy.java
Patch:
@@ -75,7 +75,7 @@ public class DynamicResourceAllocationPolicy extends HealthPolicyImpl
     registerDiagnosers(underProvisioningDiagnoser, dataSkewDiagnoser, slowInstanceDiagnoser);
 
     setPolicyExecutionInterval(TimeUnit.MILLISECONDS,
-        (Long) policyConfig.getConfig(HEALTH_POLICY_INTERVAL.key(), 60000));
+        Long.parseLong((String) policyConfig.getConfig(HEALTH_POLICY_INTERVAL.key(), "60000")));
 
     eventManager.addEventListener(TopologyUpdate.class, this);
   }

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/detectors/WaitQueueDisparityDetectorTest.java
Patch:
@@ -37,7 +37,7 @@ public class WaitQueueDisparityDetectorTest {
   @Test
   public void testConfigAndFilter() {
     HealthPolicyConfig config = mock(HealthPolicyConfig.class);
-    when(config.getConfig(CONF_DISPARITY_RATIO, 20)).thenReturn(15.0);
+    when(config.getConfig(CONF_DISPARITY_RATIO, 20.0)).thenReturn(15.0);
 
     ComponentMetrics compMetrics = new ComponentMetrics("bolt");
     compMetrics.addInstanceMetric(new InstanceMetrics("i1", METRIC_BUFFER_SIZE.text(), 1501));

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraField.java
Patch:
@@ -52,5 +52,7 @@ public enum AuroraField {
   METRICSCACHEMGR_CLASSPATH,
   IS_STATEFUL_ENABLED,
   CKPTMGR_CLASSPATH,
-  STATEFUL_CONFIG_YAML
+  STATEFUL_CONFIG_YAML,
+  HEALTHMGR_MODE,
+  HEALTHMGR_CLASSPATH
 }

File: heron/spi/src/java/com/twitter/heron/spi/common/ConfigLoader.java
Patch:
@@ -57,6 +57,7 @@ public static Config loadConfig(String heronHome, String configPath,
         .putAll(defaultConfig)
         .putAll(loadConfig(Context.clusterFile(localConfig)))
         .putAll(loadConfig(Context.clientFile(localConfig)))
+        .putAll(loadConfig(Context.healthmgrFile(localConfig)))
         .putAll(loadConfig(Context.packingFile(localConfig)))
         .putAll(loadConfig(Context.schedulerFile(localConfig)))
         .putAll(loadConfig(Context.stateManagerFile(localConfig)))
@@ -80,6 +81,7 @@ public static Config loadClusterConfig() {
     Config.Builder cb = Config.newBuilder()
         .putAll(defaultConfig)
         .putAll(loadConfig(Context.packingFile(clusterConfig)))
+        .putAll(loadConfig(Context.healthmgrFile(clusterConfig)))
         .putAll(loadConfig(Context.schedulerFile(clusterConfig)))
         .putAll(loadConfig(Context.stateManagerFile(clusterConfig)))
         .putAll(loadConfig(Context.uploaderFile(clusterConfig)))

File: heron/spi/tests/java/com/twitter/heron/spi/common/ConfigLoaderTest.java
Patch:
@@ -82,7 +82,7 @@ private static void assertConfig(Config config,
                                    String heronConfigPath) {
     // assert that the config filenames passed to loadConfig are never null. If they are, the
     // configs defaults are not producing the config files.
-    PowerMockito.verifyStatic(times(9));
+    PowerMockito.verifyStatic(times(10));
     ConfigLoader.loadConfig(isNotNull(String.class));
     PowerMockito.verifyStatic(never());
     ConfigLoader.loadConfig(isNull(String.class));

File: heron/connectors/pulsar/src/java/com/twitter/heron/connectors/pulsar/PulsarSpout.java
Patch:
@@ -48,7 +48,7 @@
  * Simple usage:
  *
  * new PulsarSpout.Builder()
- *  .setServiceUrl("pulsar://localhost:6650")
+ *  .setServiceUrl("pulsar://127.0.0.1:6650")
  *  .setTopic("persistent://sample/standalone/ns1/my-topic")
  *  .setSubscription("my-subscription")
  *  .setMessageToValuesMapper(new MyMessageToValuesMapper()

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/HealthManager.java
Patch:
@@ -89,7 +89,7 @@
  * <li>config directory: <code> -p ~/.heron/conf</code>, required if mode is local
  * <li>metrics type: <code>-s f.q.class.name</code>,
  * default: <code>com.twitter.heron.healthmgr.sensors.TrackerMetricsProvider</code>
- * <li>metrics source: <code>-t http://host:port</code>, default: <code>http://localhost:8888</code>
+ * <li>metrics source: <code>-t http://host:port</code>, default: <code>http://127.0.0.1:8888</code>
  * <li>enable verbose mode: <code> -v</code>
  * </ul>
  */
@@ -159,7 +159,7 @@ public static void main(String[] args) throws Exception {
       throw new RuntimeException("Error parsing command line options: ", e);
     }
 
-    String metricsUrl = getOptionValue(cmd, CliArgs.METRIC_SOURCE_URL, "http://localhost:8888");
+    String metricsUrl = getOptionValue(cmd, CliArgs.METRIC_SOURCE_URL, "http://127.0.0.1:8888");
     String metricsProviderClassName = getOptionValue(cmd,
         CliArgs.METRIC_SOURCE_TYPE, "com.twitter.heron.healthmgr.sensors.TrackerMetricsProvider");
 

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/HealthManagerTest.java
Patch:
@@ -59,12 +59,12 @@ public void testInitialize() throws Exception {
 
     SchedulerLocation schedulerLocation = SchedulerLocation.newBuilder()
         .setTopologyName(topologyName)
-        .setHttpEndpoint("http://localhost")
+        .setHttpEndpoint("http://127.0.0.1")
         .build();
     when(adaptor.getSchedulerLocation(anyString())).thenReturn(schedulerLocation);
 
     AbstractModule baseModule = HealthManager
-        .buildMetricsProviderModule(config, "localhost", TrackerMetricsProvider.class);
+        .buildMetricsProviderModule(config, "127.0.0.1", TrackerMetricsProvider.class);
 
     HealthManager healthManager = new HealthManager(config, baseModule);
 

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/sensors/MetricsCacheMetricsProviderTest.java
Patch:
@@ -211,7 +211,7 @@ public void handleMissingData() {
 
   private MetricsCacheMetricsProvider createMetricsProviderSpy() {
     MetricsCacheMetricsProvider metricsProvider
-        = new MetricsCacheMetricsProvider("localhost");
+        = new MetricsCacheMetricsProvider("127.0.0.1");
 
     MetricsCacheMetricsProvider spyMetricsProvider = spy(metricsProvider);
     spyMetricsProvider.setClock(new TestClock(70000));

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/sensors/TrackerMetricsProviderTest.java
Patch:
@@ -151,7 +151,7 @@ public void handleMissingData() {
 
   private TrackerMetricsProvider createMetricsProviderSpy() {
     TrackerMetricsProvider metricsProvider
-        = new TrackerMetricsProvider("localhost", "topology", "dev", "env");
+        = new TrackerMetricsProvider("127.0.0.1", "topology", "dev", "env");
 
     TrackerMetricsProvider spyMetricsProvider = spy(metricsProvider);
     spyMetricsProvider.setClock(new TestClock(70000));

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/ZkUtils.java
Patch:
@@ -25,7 +25,7 @@
 import com.twitter.heron.spi.utils.NetworkUtils;
 
 public final class ZkUtils {
-  public static final String LOCAL_HOST = "localhost";
+  public static final String LOCAL_HOST = "127.0.0.1";
 
   private static final Logger LOG = Logger.getLogger(ZkUtils.class.getName());
 

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/sensors/MetricsCacheMetricsProvider.java
Patch:
@@ -134,15 +134,15 @@ TopologyMaster.MetricResponse getMetricsFromMetricsCache(
             .build())
         .addMetric(metric)
         .build();
-    LOG.log(Level.FINE, "MetricsCache Query request: %s", request);
+    LOG.log(Level.FINE, "MetricsCache Query request: {0}", request);
 
     NetworkUtils.sendHttpPostRequest(con, "X", request.toByteArray());
     byte[] responseData = NetworkUtils.readHttpResponse(con);
 
     try {
       TopologyMaster.MetricResponse response =
           TopologyMaster.MetricResponse.parseFrom(responseData);
-      LOG.log(Level.FINE, "MetricsCache Query response: %s", response);
+      LOG.log(Level.FINE, "MetricsCache Query response: {0}", response);
       return response;
     } catch (com.google.protobuf.InvalidProtocolBufferException e) {
       LOG.severe("protobuf cannot parse the reply from MetricsCache " + e);

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/sensors/TrackerMetricsProvider.java
Patch:
@@ -19,6 +19,7 @@
 import java.time.Instant;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import javax.inject.Inject;
@@ -133,7 +134,7 @@ String getMetricsFromTracker(String metric, String component, Instant start, Dur
         .queryParam("starttime", start.getEpochSecond())
         .queryParam("endtime", start.getEpochSecond() + duration.getSeconds());
 
-    LOG.info("Tracker Query URI: " + target.getUri());
+    LOG.log(Level.FINE, "Tracker Query URI: {0}", target.getUri());
 
     Response r = target.request(MediaType.APPLICATION_JSON_TYPE).get();
     return r.readEntity(String.class);

File: heron/common/tests/java/com/twitter/heron/common/utils/TopologyUtilsTest.java
Patch:
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package com.twitter.heron.spi.utils;
+package com.twitter.heron.common.utils;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -24,6 +24,8 @@
 import com.twitter.heron.api.Config;
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyTests;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 
 public class TopologyUtilsTest {
   @Test

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/common/TopologyProviderTest.java
Patch:
@@ -27,7 +27,7 @@
 import com.twitter.heron.healthmgr.common.HealthManagerEvents.TopologyUpdate;
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
-import com.twitter.heron.spi.utils.TopologyTests;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;

File: heron/healthmgr/tests/java/com/twitter/heron/healthmgr/resolvers/ScaleUpResolverTest.java
Patch:
@@ -38,7 +38,7 @@
 import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.IRepacking;
 import com.twitter.heron.spi.packing.PackingPlan;
-import com.twitter.heron.spi.utils.TopologyTests;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 
 import static com.twitter.heron.healthmgr.diagnosers.BaseDiagnoser.DiagnosisName.SYMPTOM_UNDER_PROVISIONING;
 import static com.twitter.heron.healthmgr.sensors.BaseSensor.MetricName.METRIC_BACK_PRESSURE;

File: heron/packing/src/java/com/twitter/heron/packing/binpacking/FirstFitDecreasingPacking.java
Patch:
@@ -23,6 +23,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.packing.RamRequirement;
 import com.twitter.heron.packing.ResourceExceededException;
 import com.twitter.heron.packing.builder.Container;
@@ -39,7 +40,6 @@
 import com.twitter.heron.spi.packing.PackingException;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 import static com.twitter.heron.api.Config.TOPOLOGY_CONTAINER_MAX_CPU_HINT;
 import static com.twitter.heron.api.Config.TOPOLOGY_CONTAINER_MAX_DISK_HINT;

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPacking.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.packing.ResourceExceededException;
 import com.twitter.heron.packing.builder.Container;
 import com.twitter.heron.packing.builder.ContainerIdScorer;
@@ -35,7 +36,6 @@
 import com.twitter.heron.spi.packing.IRepacking;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 import static com.twitter.heron.api.Config.TOPOLOGY_CONTAINER_CPU_REQUESTED;
 import static com.twitter.heron.api.Config.TOPOLOGY_CONTAINER_DISK_REQUESTED;

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/RoundRobinPacking.java
Patch:
@@ -26,14 +26,14 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.packing.IPacking;
 import com.twitter.heron.spi.packing.InstanceId;
 import com.twitter.heron.spi.packing.PackingException;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 /**
  * Round-robin packing algorithm

File: heron/packing/src/java/com/twitter/heron/packing/utils/PackingUtils.java
Patch:
@@ -19,9 +19,9 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.spi.packing.PackingException;
 import com.twitter.heron.spi.packing.Resource;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 /**
  * Shared utilities for packing algorithms

File: heron/packing/tests/java/com/twitter/heron/packing/CommonPackingTests.java
Patch:
@@ -23,6 +23,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
 import com.twitter.heron.common.basics.Pair;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.packing.IPacking;
@@ -32,7 +33,6 @@
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.utils.PackingTestUtils;
-import com.twitter.heron.spi.utils.TopologyTests;
 
 /**
  * There is some common functionality in multiple packing plans. This class contains common tests.

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPackingTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.packing.AssertPacking;
 import com.twitter.heron.packing.CommonPackingTests;
 import com.twitter.heron.packing.utils.PackingUtils;
@@ -32,7 +33,6 @@
 import com.twitter.heron.spi.packing.PackingException;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 public class ResourceCompliantRRPackingTest extends CommonPackingTests {
 

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/RoundRobinPackingTest.java
Patch:
@@ -22,14 +22,14 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyTests;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.packing.AssertPacking;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.packing.PackingException;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.utils.PackingTestUtils;
-import com.twitter.heron.spi.utils.TopologyTests;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 public class RoundRobinPackingTest {
   private static final String BOLT_NAME = "bolt";

File: heron/packing/tests/java/com/twitter/heron/packing/utils/PackingUtilsTest.java
Patch:
@@ -20,11 +20,11 @@
 import org.junit.Test;
 
 import com.twitter.heron.api.generated.TopologyAPI;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.utils.PackingTestUtils;
-import com.twitter.heron.spi.utils.TopologyTests;
 
 public class PackingUtilsTest {
 

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -32,6 +32,7 @@
 import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.logging.LoggingHelper;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.scheduler.server.SchedulerServer;
 import com.twitter.heron.scheduler.utils.LauncherUtils;
@@ -48,7 +49,6 @@
 import com.twitter.heron.spi.statemgr.IStateManager;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.utils.ReflectionUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 /**
  * Main class of scheduler.

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -34,6 +34,7 @@
 import com.twitter.heron.common.basics.DryRunFormatType;
 import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.common.utils.logging.LoggingHelper;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.scheduler.dryrun.SubmitDryRunResponse;
 import com.twitter.heron.scheduler.utils.DryRunRenders;
 import com.twitter.heron.scheduler.utils.LauncherUtils;
@@ -51,7 +52,6 @@
 import com.twitter.heron.spi.uploader.IUploader;
 import com.twitter.heron.spi.uploader.UploaderException;
 import com.twitter.heron.spi.utils.ReflectionUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 /**
  * Calls Uploader to upload topology package, and Launcher to launch Scheduler.

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/UpdateTopologyManager.java
Patch:
@@ -36,6 +36,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.SysUtils;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.scheduler.utils.Runtime;
@@ -49,7 +50,6 @@
 import com.twitter.heron.spi.utils.NetworkUtils;
 import com.twitter.heron.spi.utils.TMasterException;
 import com.twitter.heron.spi.utils.TMasterUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 import static com.twitter.heron.api.Config.TOPOLOGY_UPDATE_DEACTIVATE_WAIT_SECS;
 import static com.twitter.heron.api.Config.TOPOLOGY_UPDATE_REACTIVATE_WAIT_SECS;

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/utils/LauncherUtils.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.SysUtils;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.common.Key;
@@ -28,7 +29,6 @@
 import com.twitter.heron.spi.scheduler.SchedulerException;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.utils.ReflectionUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 /**
  * {@link LauncherUtils} contains helper methods used by the server and client side launch

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.FileUtils;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.proto.system.Common;
 import com.twitter.heron.spi.common.Config;
@@ -35,7 +36,6 @@
 import com.twitter.heron.spi.scheduler.IScheduler;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.utils.ShellUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 public final class SchedulerUtils {
   public static final int PORTS_REQUIRED_FOR_EXECUTOR = 9;

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -29,6 +29,8 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import com.twitter.heron.api.generated.TopologyAPI;
+import com.twitter.heron.common.utils.topology.TopologyTests;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.packing.roundrobin.RoundRobinPacking;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.scheduler.server.SchedulerServer;
@@ -42,8 +44,6 @@
 import com.twitter.heron.spi.statemgr.IStateManager;
 import com.twitter.heron.spi.utils.PackingTestUtils;
 import com.twitter.heron.spi.utils.ReflectionUtils;
-import com.twitter.heron.spi.utils.TopologyTests;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/UpdateTopologyManagerTest.java
Patch:
@@ -42,6 +42,7 @@
 import static org.mockito.Mockito.when;
 
 import com.twitter.heron.api.generated.TopologyAPI;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.scheduler.UpdateTopologyManager.ContainerDelta;
@@ -56,7 +57,6 @@
 import com.twitter.heron.spi.utils.NetworkUtils;
 import com.twitter.heron.spi.utils.PackingTestUtils;
 import com.twitter.heron.spi.utils.TMasterUtils;
-import com.twitter.heron.spi.utils.TopologyTests;
 
 @RunWith(PowerMockRunner.class)
 public class UpdateTopologyManagerTest {

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/utils/LauncherUtilsTest.java
Patch:
@@ -26,13 +26,13 @@
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import com.twitter.heron.api.generated.TopologyAPI;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.IPacking;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.utils.ReflectionUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({ReflectionUtils.class, TopologyUtils.class, TopologyAPI.Topology.class})

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -30,6 +30,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.FileUtils;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.scheduler.UpdateTopologyManager;
 import com.twitter.heron.scheduler.utils.Runtime;
@@ -41,7 +42,6 @@
 import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.scheduler.IScalable;
 import com.twitter.heron.spi.scheduler.IScheduler;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 public class AuroraScheduler implements IScheduler, IScalable {
   private static final Logger LOG = Logger.getLogger(AuroraLauncher.class.getName());

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronExecutorTask.java
Patch:
@@ -33,6 +33,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI.Topology;
 import com.twitter.heron.common.basics.SysUtils;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.scheduler.utils.SchedulerConfigUtils;
 import com.twitter.heron.scheduler.utils.SchedulerUtils;
 import com.twitter.heron.scheduler.yarn.HeronConfigurationOptions.Cluster;
@@ -48,7 +49,6 @@
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.utils.ShellUtils;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 @Unit
 public class HeronExecutorTask implements Task {

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -38,6 +38,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.scheduler.SubmitterMain;
@@ -48,7 +49,6 @@
 import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.utils.PackingTestUtils;
-import com.twitter.heron.spi.utils.TopologyTests;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;

File: heron/simulator/src/java/com/twitter/heron/simulator/Simulator.java
Patch:
@@ -29,12 +29,12 @@
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.config.SystemConfigKey;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.simulator.executors.InstanceExecutor;
 import com.twitter.heron.simulator.executors.MetricsExecutor;
 import com.twitter.heron.simulator.executors.StreamExecutor;
 import com.twitter.heron.simulator.utils.PhysicalPlanUtil;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 /**
  * One Simulator instance can only submit one topology. Please have multiple Simulator instances

File: heron/spi/src/java/com/twitter/heron/spi/utils/PackingTestUtils.java
Patch:
@@ -24,6 +24,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.ByteAmount;
 import com.twitter.heron.common.basics.Pair;
+import com.twitter.heron.common.utils.topology.TopologyTests;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Key;

File: heron/tools/apiserver/src/java/com/twitter/heron/apiserver/actions/ActionFactoryImpl.java
Patch:
@@ -15,8 +15,8 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.apiserver.utils.ConfigUtils;
+import com.twitter.heron.common.utils.topology.TopologyUtils;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.utils.TopologyUtils;
 
 public class ActionFactoryImpl implements ActionFactory {
 

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/RuntimeManagerRunner.java
Patch:
@@ -42,7 +42,7 @@
 import com.twitter.heron.spi.utils.TMasterUtils;
 
 public class RuntimeManagerRunner {
-  static final String NEW_COMPONENT_PARALLELISM_KEY = "NEW_COMPONENT_PARALLELISM";
+  public static final String NEW_COMPONENT_PARALLELISM_KEY = "NEW_COMPONENT_PARALLELISM";
   private static final Logger LOG = Logger.getLogger(RuntimeManagerRunner.class.getName());
   private final Config config;
   private final Config runtime;

File: heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonController.java
Patch:
@@ -45,7 +45,8 @@ public MarathonController(
    */
   public boolean killTopology() {
     // Setup Connection
-    String topologyURI = String.format("%s/v2/groups/%s", this.marathonURI, this.topologyName);
+    String topologyURI = String.format("%s/v2/groups/%s?force=true",
+        this.marathonURI, this.topologyName);
     HttpURLConnection conn = NetworkUtils.getHttpConnection(topologyURI);
 
     // Attach a token if there is one specified

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -309,7 +309,7 @@ public static void setSerializationClassName(Map<String, Object> conf, String cl
 
   /**
    * Is topology running with acking enabled?
-   * @deprecated use {@link #setTopologyReliabilityMode()} instead.
+   * @deprecated use {@link #setTopologyReliabilityMode(Map, TopologyReliabilityMode)} instead.
    */
   @Deprecated
   public static void setEnableAcking(Map<String, Object> conf, boolean acking) {
@@ -494,7 +494,7 @@ public void setSerializationClassName(String className) {
   /**
    * Is topology running with acking enabled?
    * The SupressWarning will be removed once TOPOLOGY_ENABLE_ACKING is removed
-   * @deprecated use {@link #setTopologyReliabilityMode()} instead
+   * @deprecated use {@link #setTopologyReliabilityMode(TopologyReliabilityMode)} instead
    */
   @Deprecated
   @SuppressWarnings("deprecation")

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/diagnosers/BaseDiagnoser.java
Patch:
@@ -29,8 +29,8 @@
 import static com.twitter.heron.healthmgr.detectors.BaseDetector.SymptomName.SYMPTOM_PROCESSING_RATE_SKEW;
 import static com.twitter.heron.healthmgr.detectors.BaseDetector.SymptomName.SYMPTOM_WAIT_Q_DISPARITY;
 
-abstract class BaseDiagnoser implements IDiagnoser {
-  enum DiagnosisName {
+public abstract class BaseDiagnoser implements IDiagnoser {
+  public enum DiagnosisName {
     SYMPTOM_UNDER_PROVISIONING("SYMPTOM_UNDER_PROVISIONING"),
     SYMPTOM_DATA_SKEW("SYMPTOM_DATA_SKEW"),
     SYMPTOM_SLOW_INSTANCE("SYMPTOM_SLOW_INSTANCE"),

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/sensors/TrackerMetricsProvider.java
Patch:
@@ -38,10 +38,10 @@
 
 import net.minidev.json.JSONArray;
 
+import static com.twitter.heron.healthmgr.HealthManager.CONF_METRICS_SOURCE_URL;
 import static com.twitter.heron.healthmgr.HealthManager.CONF_TOPOLOGY_NAME;
 
 public class TrackerMetricsProvider implements MetricsProvider {
-  public static final String CONF_TRACKER_URL = "TRACKER_URL";
   public static final String CONF_CLUSTER = "CLUSTER";
   public static final String CONF_ENVIRON = "ENVIRON";
 
@@ -51,7 +51,7 @@ public class TrackerMetricsProvider implements MetricsProvider {
   private Clock clock = new Clock();
 
   @Inject
-  public TrackerMetricsProvider(@Named(CONF_TRACKER_URL) String trackerURL,
+  public TrackerMetricsProvider(@Named(CONF_METRICS_SOURCE_URL) String trackerURL,
                                 @Named(CONF_TOPOLOGY_NAME) String topologyName,
                                 @Named(CONF_CLUSTER) String cluster,
                                 @Named(CONF_ENVIRON) String environ) {

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/sensors/BaseSensor.java
Patch:
@@ -25,11 +25,12 @@ public abstract class BaseSensor implements ISensor {
   static final Duration DEFAULT_METRIC_DURATION = Duration.ofSeconds(300);
   static final String COMPONENT_STMGR = "__stmgr__";
 
-  enum MetricName {
+  public enum MetricName {
     METRIC_EXE_COUNT("__execute-count/default"),
     METRIC_BACK_PRESSURE("__time_spent_back_pressure_by_compid/"),
     METRIC_BUFFER_SIZE("__connection_buffer_by_instanceid/"),
-    METRIC_BUFFER_SIZE_SUFFIX("/packets");
+    METRIC_BUFFER_SIZE_SUFFIX("/packets"),
+    METRIC_WAIT_Q_GROWTH_RATE("METRIC_WAIT_Q_GROWTH_RATE");
 
     private String text;
 

File: heron/statefulstorages/src/java/com/twitter/heron/statefulstorage/localfs/LocalFileSystemStorage.java
Patch:
@@ -37,6 +37,9 @@ public class LocalFileSystemStorage implements IStatefulStorage {
   @Override
   public void init(Map<String, Object> conf) throws StatefulStorageException {
     checkpointRootPath = (String) conf.get(ROOT_PATH_KEY);
+    if (checkpointRootPath != null) {
+      checkpointRootPath = checkpointRootPath.replaceFirst("^~", System.getProperty("user.home"));
+    }
     LOG.info("Initialing... Checkpoint root path: " + checkpointRootPath);
   }
 

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -144,7 +144,7 @@ public enum TopologyReliabilityMode {
    * mode. The format of this flag is the string encoded values of the
    * underlying TopologyReliabilityMode value.
    */
-  public static final String TOPOLOGY_RELIABILITY_MODE = "topology.relability.mode";
+  public static final String TOPOLOGY_RELIABILITY_MODE = "topology.reliability.mode";
 
   /**
    * Number of cpu cores per container to be reserved for this topology

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/LaunchRunner.java
Patch:
@@ -64,7 +64,7 @@ public ExecutionEnvironment.ExecutionState createExecutionState() {
     builder.setTopologyName(topology.getName()).
         setTopologyId(topology.getId())
         .setSubmissionTime(System.currentTimeMillis() / 1000)
-        .setSubmissionUser(System.getProperty("user.name"))
+        .setSubmissionUser(Context.submitUser(config))
         .setCluster(Context.cluster(config))
         .setRole(Context.role(config))
         .setEnviron(Context.environ(config));

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java
Patch:
@@ -70,6 +70,7 @@ public class LaunchRunnerTest {
   private static final String CLUSTER = "testCluster";
   private static final String ROLE = "testRole";
   private static final String ENVIRON = "testEnviron";
+  private static final String SUBMIT_USER = "testUser";
   private static final String BUILD_VERSION = "live";
   private static final String BUILD_USER = "user";
 
@@ -114,6 +115,7 @@ private static Config createRunnerConfig() {
     when(config.getStringValue(Key.CLUSTER)).thenReturn(CLUSTER);
     when(config.getStringValue(Key.ROLE)).thenReturn(ROLE);
     when(config.getStringValue(Key.ENVIRON)).thenReturn(ENVIRON);
+    when(config.getStringValue(Key.SUBMIT_USER)).thenReturn(SUBMIT_USER);
     when(config.getStringValue(Key.BUILD_VERSION)).thenReturn(BUILD_VERSION);
     when(config.getStringValue(Key.BUILD_USER)).thenReturn(BUILD_USER);
 
@@ -205,7 +207,7 @@ public void testCreateExecutionState() throws Exception {
     assertEquals(CLUSTER, executionState.getCluster());
     assertEquals(ROLE, executionState.getRole());
     assertEquals(ENVIRON, executionState.getEnviron());
-    assertEquals(System.getProperty("user.name"), executionState.getSubmissionUser());
+    assertEquals(SUBMIT_USER, executionState.getSubmissionUser());
 
     assertNotNull(executionState.getTopologyId());
     assertTrue(executionState.getSubmissionTime() <= (System.currentTimeMillis() / 1000));

File: heron/spi/src/java/com/twitter/heron/spi/common/Key.java
Patch:
@@ -50,6 +50,7 @@ public enum Key {
   CLUSTER                  ("heron.config.cluster",             Type.STRING),
   ROLE                     ("heron.config.role",                Type.STRING),
   ENVIRON                  ("heron.config.environ",             Type.STRING),
+  SUBMIT_USER              ("heron.config.submit_user",         Type.STRING),
   DRY_RUN                  ("heron.config.dry_run",             Boolean.FALSE),
   DRY_RUN_FORMAT_TYPE      ("heron.config.dry_run_format_type", Type.DRY_RUN_FORMAT_TYPE),
   VERBOSE                  ("heron.config.verbose",             Boolean.FALSE),

File: heron/statefulstorages/src/java/com/twitter/heron/statefulstorage/localfs/LocalFileSystemStorage.java
Patch:
@@ -108,7 +108,7 @@ public void dispose(String topologyName, String oldestCheckpointPreserved,
       String[] names = new File(topologyCheckpointRoot).list();
       for (String name : names) {
         if (name.compareTo(oldestCheckpointPreserved) < 0) {
-          FileUtils.deleteDir(new File(topologyCheckpointRoot, name));
+          FileUtils.deleteDir(new File(topologyCheckpointRoot, name), true);
         }
       }
 

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/common/PackingPlanProvider.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.healthmgr.common;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.logging.Logger;
 
@@ -58,9 +59,7 @@ public PackingPlanProvider(SchedulerStateManagerAdaptor stateManagerAdaptor,
 
   public String[] getBoltInstanceNames(String... boltComponents) {
     HashSet<String> boltComponentNames = new HashSet<>();
-    for (String boltComponentName : boltComponents) {
-      boltComponentNames.add(boltComponentName);
-    }
+    Collections.addAll(boltComponentNames, boltComponents);
 
     PackingPlan packing = get();
     ArrayList<String> boltInstanceNames = new ArrayList<>();

File: heron/healthmgr/src/java/com/twitter/heron/healthmgr/sensors/TrackerMetricsProvider.java
Patch:
@@ -89,9 +89,8 @@ public Map<String, ComponentMetrics> getComponentMetrics(String metric,
     return getComponentMetrics(metric, start, duration, components);
   }
 
-  @VisibleForTesting
   @SuppressWarnings("unchecked")
-  Map<String, InstanceMetrics> parse(String response, String component, String metric) {
+  private Map<String, InstanceMetrics> parse(String response, String component, String metric) {
     Map<String, InstanceMetrics> metricsData = new HashMap<>();
 
     if (response == null || response.isEmpty()) {

File: heron/schedulers/src/java/com/twitter/heron/scheduler/slurm/SlurmController.java
Patch:
@@ -123,7 +123,7 @@ public boolean createJob(String slurmScript, String heronExec,
   protected boolean runProcess(String topologyWorkingDirectory, String[] slurmCmd,
                                StringBuilder stderr) {
     File file = topologyWorkingDirectory == null ? null : new File(topologyWorkingDirectory);
-    return 0 == ShellUtils.runSyncProcess(false, slurmCmd, stderr, file);
+    return 0 == ShellUtils.runSyncProcess(true, false, slurmCmd, stderr, file);
   }
 
   /**

File: heron/ckptmgr/src/java/com/twitter/heron/ckptmgr/CheckpointManager.java
Patch:
@@ -144,7 +144,8 @@ public CheckpointManager(
             checkpointManagerConfig.getReadBatchSize(),
             checkpointManagerConfig.getReadBatchTime(),
             checkpointManagerConfig.getSocketSendSize(),
-            checkpointManagerConfig.getSocketReceiveSize());
+            checkpointManagerConfig.getSocketReceiveSize(),
+            checkpointManagerConfig.getMaximumPacketSize());
 
     // Setup the IStatefulStorage
     // TODO(mfu): This should be done in an executor driven by another thread, kind of async

File: heron/common/src/java/com/twitter/heron/common/testhelpers/HeronServerTester.java
Patch:
@@ -52,7 +52,8 @@ public class HeronServerTester {
       ByteAmount.fromMegabytes(100), Duration.ofMillis(100),
       ByteAmount.fromMegabytes(100), Duration.ofMillis(100),
       ByteAmount.fromMegabytes(5),
-      ByteAmount.fromMegabytes(5));
+      ByteAmount.fromMegabytes(5),
+      ByteAmount.fromMegabytes(10));
   private static final Duration DEFAULT_LATCH_TIMEOUT = Duration.ofSeconds(2);
   private static final Duration SERVER_START_TIMEOUT = Duration.ofSeconds(2);
   public static final Duration RESPONSE_RECEIVED_TIMEOUT = Duration.ofSeconds(4);

File: heron/instance/src/java/com/twitter/heron/instance/Gateway.java
Patch:
@@ -100,7 +100,8 @@ public Gateway(String topologyName, String topologyId, PhysicalPlans.Instance in
         systemConfig.getInstanceNetworkReadBatchSize(),
         systemConfig.getInstanceNetworkReadBatchTime(),
         systemConfig.getInstanceNetworkOptionsSocketSendBufferSize(),
-        systemConfig.getInstanceNetworkOptionsSocketReceivedBufferSize()
+        systemConfig.getInstanceNetworkOptionsSocketReceivedBufferSize(),
+        systemConfig.getInstanceNetworkOptionsMaximumPacketSize()
     );
     this.streamManagerClient =
         new StreamManagerClient(gatewayLooper, STREAM_MGR_HOST, streamPort,

File: heron/instance/tests/java/com/twitter/heron/network/AbstractNetworkTest.java
Patch:
@@ -166,7 +166,8 @@ StreamManagerClient runStreamManagerClient() {
          systemConfig.getInstanceNetworkReadBatchSize(),
          systemConfig.getInstanceNetworkReadBatchTime(),
          systemConfig.getInstanceNetworkOptionsSocketSendBufferSize(),
-         systemConfig.getInstanceNetworkOptionsSocketReceivedBufferSize());
+         systemConfig.getInstanceNetworkOptionsSocketReceivedBufferSize(),
+         systemConfig.getInstanceNetworkOptionsMaximumPacketSize());
 
     final NIOLooper nioLooper = (NIOLooper) communicatorTester.getTestLooper();
     streamManagerClient = new StreamManagerClient(nioLooper, HOST, serverPort,

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/MetricsCacheManager.java
Patch:
@@ -112,7 +112,8 @@ public MetricsCacheManager(String topologyName,
             systemConfig.getMetricsMgrNetworkReadBatchSize(),
             systemConfig.getMetricsMgrNetworkReadBatchTime(),
             systemConfig.getMetricsMgrNetworkOptionsSocketSendBufferSize(),
-            systemConfig.getMetricsMgrNetworkOptionsSocketReceivedBufferSize());
+            systemConfig.getMetricsMgrNetworkOptionsSocketReceivedBufferSize(),
+            systemConfig.getMetricsMgrNetworkOptionsMaximumPacketSize());
 
     // Construct the server to accepts messages from sinks
     metricsCacheManagerServer = new MetricsCacheManagerServer(metricsCacheManagerServerLoop,

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsManager.java
Patch:
@@ -145,7 +145,8 @@ public MetricsManager(String topologyName, String serverHost,
             systemConfig.getMetricsMgrNetworkReadBatchSize(),
             systemConfig.getMetricsMgrNetworkReadBatchTime(),
             systemConfig.getMetricsMgrNetworkOptionsSocketSendBufferSize(),
-            systemConfig.getMetricsMgrNetworkOptionsSocketReceivedBufferSize());
+            systemConfig.getMetricsMgrNetworkOptionsSocketReceivedBufferSize(),
+            systemConfig.getMetricsMgrNetworkOptionsMaximumPacketSize());
 
     // Set the MultiCountMetric for MetricsManagerServer
     MultiCountMetric serverCounters = new MultiCountMetric();

File: heron/instance/src/java/com/twitter/heron/instance/AbstractOutputCollector.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.Map;
 
 import com.google.protobuf.ByteString;
+import com.google.protobuf.Message;
 
 import com.twitter.heron.api.Config;
 import com.twitter.heron.api.serializer.IPluggableSerializer;
@@ -44,7 +45,7 @@ public class AbstractOutputCollector {
   @SuppressWarnings("deprecation")
   public AbstractOutputCollector(IPluggableSerializer serializer,
                                  PhysicalPlanHelper helper,
-                                 Communicator<HeronTuples.HeronTupleSet> streamOutQueue,
+                                 Communicator<Message> streamOutQueue,
                                  ComponentMetrics metrics) {
     this.serializer = serializer;
     this.metrics = metrics;

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltOutputCollectorImpl.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.google.protobuf.Message;
+
 import com.twitter.heron.api.bolt.IOutputCollector;
 import com.twitter.heron.api.serializer.IPluggableSerializer;
 import com.twitter.heron.api.tuple.Tuple;
@@ -58,7 +60,7 @@ public class BoltOutputCollectorImpl extends AbstractOutputCollector implements
 
   protected BoltOutputCollectorImpl(IPluggableSerializer serializer,
                                     PhysicalPlanHelper helper,
-                                    Communicator<HeronTuples.HeronTupleSet> streamOutQueue,
+                                    Communicator<Message> streamOutQueue,
                                     BoltMetrics boltMetrics) {
     super(serializer, helper, streamOutQueue, boltMetrics);
     this.boltMetrics = boltMetrics;

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.google.protobuf.Message;
+
 import com.twitter.heron.api.serializer.IPluggableSerializer;
 import com.twitter.heron.api.spout.ISpoutOutputCollector;
 import com.twitter.heron.common.basics.Communicator;
@@ -61,7 +63,7 @@ public class SpoutOutputCollectorImpl
 
   protected SpoutOutputCollectorImpl(IPluggableSerializer serializer,
                                      PhysicalPlanHelper helper,
-                                     Communicator<HeronTuples.HeronTupleSet> streamOutQueue,
+                                     Communicator<Message> streamOutQueue,
                                      ComponentMetrics spoutMetrics) {
     super(serializer, helper, streamOutQueue, spoutMetrics);
     if (helper.getMySpout() == null) {

File: heron/instance/tests/java/com/twitter/heron/network/AbstractNetworkTest.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
+import com.google.protobuf.Message;
+
 import org.junit.After;
 import org.junit.Before;
 
@@ -38,7 +40,6 @@
 import com.twitter.heron.instance.CommunicatorTester;
 import com.twitter.heron.instance.InstanceControlMsg;
 import com.twitter.heron.metrics.GatewayMetrics;
-import com.twitter.heron.proto.system.HeronTuples;
 import com.twitter.heron.resource.UnitTestHelper;
 
 import static org.junit.Assert.assertEquals;
@@ -122,7 +123,7 @@ protected Communicator<InstanceControlMsg> getInControlQueue() {
     return communicatorTester.getInControlQueue();
   }
 
-  protected Communicator<HeronTuples.HeronTupleSet> getInStreamQueue() {
+  protected Communicator<Message> getInStreamQueue() {
     return communicatorTester.getInStreamQueue();
   }
 

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltOutputCollectorImpl.java
Patch:
@@ -14,12 +14,13 @@
 
 package com.twitter.heron.simulator.instance;
 
+import com.google.protobuf.Message;
+
 import com.twitter.heron.api.bolt.IOutputCollector;
 import com.twitter.heron.api.serializer.IPluggableSerializer;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.utils.metrics.BoltMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
-import com.twitter.heron.proto.system.HeronTuples;
 
 /**
  * BoltOutputCollectorImpl is used by bolt to emit tuples, it contains:
@@ -45,7 +46,7 @@ public class BoltOutputCollectorImpl
 
   public BoltOutputCollectorImpl(IPluggableSerializer serializer,
                                  PhysicalPlanHelper helper,
-                                 Communicator<HeronTuples.HeronTupleSet> streamOutQueue,
+                                 Communicator<Message> streamOutQueue,
                                  BoltMetrics boltMetrics) {
     super(serializer, helper, streamOutQueue, boltMetrics);
   }

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/IInstance.java
Patch:
@@ -14,8 +14,9 @@
 
 package com.twitter.heron.simulator.instance;
 
+import com.google.protobuf.Message;
+
 import com.twitter.heron.common.basics.Communicator;
-import com.twitter.heron.proto.system.HeronTuples;
 
 /**
  * Implementing this interface allows an object to be target of HeronInstance
@@ -40,7 +41,7 @@ public interface IInstance {
    *
    * @param inQueue the queue to read tuples from
    */
-  void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue);
+  void readTuplesAndExecute(Communicator<Message> inQueue);
 
   /**
    * Activate the instance

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/OutgoingTupleCollection.java
Patch:
@@ -14,9 +14,10 @@
 
 package com.twitter.heron.simulator.instance;
 
+import com.google.protobuf.Message;
+
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
-import com.twitter.heron.proto.system.HeronTuples;
 
 /**
  * Implements OutgoingTupleCollection will be able to handle some basic methods for send out tuples
@@ -29,7 +30,7 @@
 public class OutgoingTupleCollection extends com.twitter.heron.instance.OutgoingTupleCollection {
 
   public OutgoingTupleCollection(PhysicalPlanHelper helper,
-                                 Communicator<HeronTuples.HeronTupleSet> outQueue) {
+                                 Communicator<Message> outQueue) {
     super(helper, outQueue);
   }
 }

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/SpoutOutputCollectorImpl.java
Patch:
@@ -14,12 +14,13 @@
 
 package com.twitter.heron.simulator.instance;
 
+import com.google.protobuf.Message;
+
 import com.twitter.heron.api.serializer.IPluggableSerializer;
 import com.twitter.heron.api.spout.ISpoutOutputCollector;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.utils.metrics.ComponentMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
-import com.twitter.heron.proto.system.HeronTuples;
 
 /**
  * SpoutOutputCollectorImpl is used by bolt to emit tuples, it contains:
@@ -40,7 +41,7 @@ public class SpoutOutputCollectorImpl
 
   public SpoutOutputCollectorImpl(IPluggableSerializer serializer,
                                   PhysicalPlanHelper helper,
-                                  Communicator<HeronTuples.HeronTupleSet> streamOutQueue,
+                                  Communicator<Message> streamOutQueue,
                                   ComponentMetrics spoutMetrics) {
     super(serializer, helper, streamOutQueue, spoutMetrics);
   }

File: heron/api/src/java/com/twitter/heron/api/HeronTopology.java
Patch:
@@ -50,8 +50,9 @@ private static void addDefaultTopologyConfig(Map<String, Object> userConfig) {
     if (!userConfig.containsKey(Config.TOPOLOGY_MAX_SPOUT_PENDING)) {
       userConfig.put(Config.TOPOLOGY_MAX_SPOUT_PENDING, "100");
     }
-    if (!userConfig.containsKey(Config.TOPOLOGY_ENABLE_ACKING)) {
-      userConfig.put(Config.TOPOLOGY_ENABLE_ACKING, "false");
+    if (!userConfig.containsKey(Config.TOPOLOGY_RELIABILITY_MODE)) {
+      userConfig.put(Config.TOPOLOGY_RELIABILITY_MODE,
+                     String.valueOf(Config.TopologyReliabilityMode.ATLEAST_ONCE));
     }
     if (!userConfig.containsKey(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS)) {
       userConfig.put(Config.TOPOLOGY_ENABLE_MESSAGE_TIMEOUTS, "true");

File: heron/instance/tests/java/com/twitter/heron/grouping/AbstractTupleRoutingTest.java
Patch:
@@ -165,7 +165,7 @@ private PhysicalPlans.PhysicalPlan constructPhysicalPlan() {
     conf.setTopologyProjectName("heron-integration-test");
     conf.setNumStmgrs(1);
     conf.setMaxSpoutPending(100);
-    conf.setEnableAcking(false);
+    conf.setTopologyReliabilityMode(Config.TopologyReliabilityMode.ATMOST_ONCE);
 
     TopologyAPI.Topology topology = topologyBuilder.createTopology()
         .setName("topology-name")

File: heron/instance/tests/java/com/twitter/heron/resource/UnitTestHelper.java
Patch:
@@ -85,9 +85,9 @@ private static void setTopology(PhysicalPlans.PhysicalPlan.Builder pPlan, boolea
     conf.setNumStmgrs(1);
     conf.setMaxSpoutPending(100);
     if (ackEnabled) {
-      conf.setEnableAcking(true);
+      conf.setTopologyReliabilityMode(Config.TopologyReliabilityMode.ATLEAST_ONCE);
     } else {
-      conf.setEnableAcking(false);
+      conf.setTopologyReliabilityMode(Config.TopologyReliabilityMode.ATMOST_ONCE);
     }
     if (messageTimeout != -1) {
       conf.setMessageTimeoutSecs(messageTimeout);

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -248,9 +248,7 @@ protected Map<AuroraField, String> createAuroraProperties(Resource containerReso
     auroraProperties.put(AuroraField.METRICSCACHEMGR_CLASSPATH,
         Context.metricsCacheManagerClassPath(config));
 
-    boolean isStatefulEnabled = TopologyUtils.getConfigWithDefault(
-        topology.getTopologyConfig().getKvsList(),
-        com.twitter.heron.api.Config.TOPOLOGY_STATEFUL_ENABLED, false);
+    boolean isStatefulEnabled = TopologyUtils.shouldStartCkptMgr(topology);
     auroraProperties.put(AuroraField.IS_STATEFUL_ENABLED, Boolean.toString(isStatefulEnabled));
 
     String completeCkptmgrProcessClassPath = String.format("%s:%s:%s",

File: integration_test/src/java/com/twitter/heron/integration_test/common/BasicConfig.java
Patch:
@@ -33,6 +33,6 @@ public BasicConfig(boolean isDebug, int numStmgrs) {
     super.setTopologyProjectName("heron-integration-test");
     super.setDebug(isDebug);
     super.setNumStmgrs(numStmgrs);
-    super.setEnableAcking(true);
+    super.setTopologyReliabilityMode(Config.TopologyReliabilityMode.ATLEAST_ONCE);
   }
 }

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -425,6 +425,9 @@ public void submitTopology() throws TopologySubmissionException {
       // initialize the state manager
       statemgr.initialize(config);
 
+      // initialize the uploader
+      uploader.initialize(config);
+
       // TODO(mfu): timeout should read from config
       SchedulerStateManagerAdaptor adaptor = new SchedulerStateManagerAdaptor(statemgr, 5000);
 
@@ -544,9 +547,6 @@ protected void validateSubmit(SchedulerStateManagerAdaptor adaptor, String topol
   }
 
   protected URI uploadPackage(IUploader uploader) throws UploaderException {
-    // initialize the uploader
-    uploader.initialize(config);
-
     // upload the topology package to the storage
     return uploader.uploadPackage();
   }

File: heron/storm/src/java/org/apache/storm/spout/RawMultiScheme.java
Patch:
@@ -31,7 +31,9 @@ public class RawMultiScheme implements MultiScheme {
 
   @Override
   public Iterable<List<Object>> deserialize(ByteBuffer ser) {
-    return asList(tuple(ser));
+    byte[] bytes = new byte[ser.remaining()];
+    ser.get(bytes);
+    return asList(tuple(bytes));
   }
 
   @Override

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -24,7 +24,6 @@
 import javax.xml.bind.DatatypeConverter;
 
 import com.twitter.heron.common.basics.ByteAmount;
-import com.twitter.heron.common.basics.TypeUtils;
 
 /**
  * Topology configs are specified as a plain old map. This class provides a
@@ -379,8 +378,9 @@ public static void setAutoTaskHooks(Map<String, Object> conf, List<String> hooks
     conf.put(Config.TOPOLOGY_AUTO_TASK_HOOKS, hooks);
   }
 
+  @SuppressWarnings("unchecked")
   public static List<String> getAutoTaskHooks(Map<String, Object> conf) {
-    return TypeUtils.getListOfStrings(conf.get(Config.TOPOLOGY_AUTO_TASK_HOOKS));
+    return (List<String>) conf.get(Config.TOPOLOGY_AUTO_TASK_HOOKS);
   }
 
   /**

File: integration_test/src/java/com/twitter/heron/integration_test/core/HttpGetCondition.java
Patch:
@@ -24,7 +24,7 @@
 class HttpGetCondition implements Condition {
   private static final long serialVersionUID = -3370730083374050883L;
   private static final long SLEEP_MS = 10 * 1000;
-  private static final int MAX_ATTEMPTS = 10;
+  private static final int MAX_ATTEMPTS = 40;
   private URL url;
 
   HttpGetCondition(String urlString) {

File: heron/instance/src/java/com/twitter/heron/instance/AbstractOutputCollector.java
Patch:
@@ -44,7 +44,7 @@ public AbstractOutputCollector(IPluggableSerializer serializer,
     this.serializer = serializer;
     this.metrics = metrics;
     this.totalTuplesEmitted = 0;
-    updatePhysicalPlanHelper(helper);
+    this.helper = helper;
 
     Map<String, Object> config = helper.getTopologyContext().getTopologyConfig();
     if (config.containsKey(Config.TOPOLOGY_ENABLE_ACKING)
@@ -54,11 +54,12 @@ public AbstractOutputCollector(IPluggableSerializer serializer,
       this.ackEnabled = false;
     }
 
-    this.outputter = new OutgoingTupleCollection(helper.getMyComponent(), streamOutQueue);
+    this.outputter = new OutgoingTupleCollection(helper, streamOutQueue);
   }
 
   public void updatePhysicalPlanHelper(PhysicalPlanHelper physicalPlanHelper) {
     this.helper = physicalPlanHelper;
+    this.outputter.updatePhysicalPlanHelper(physicalPlanHelper);
   }
 
   public PhysicalPlanHelper getPhysicalPlanHelper() {

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
Patch:
@@ -191,6 +191,7 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue
       TopologyAPI.StreamId stream = tuples.getData().getStream();
       int nValues = topologyContext.getComponentOutputFields(
           stream.getComponentName(), stream.getId()).size();
+      int sourceTaskId = tuples.getSrcTaskId();
 
       for (HeronTuples.HeronDataTuple dataTuple : tuples.getData().getTuplesList()) {
         long startExecuteTuple = System.nanoTime();
@@ -202,7 +203,7 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue
 
         // Decode the tuple
         TupleImpl t = new TupleImpl(topologyContext, stream, dataTuple.getKey(),
-            dataTuple.getRootsList(), values, startExecuteTuple, false);
+            dataTuple.getRootsList(), values, startExecuteTuple, false, sourceTaskId);
 
         // Delegate to the use defined bolt
         bolt.execute(t);

File: heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java
Patch:
@@ -281,6 +281,9 @@ private void handleNewTuples(StreamManager.TupleMessage message) {
 
   private void handleNewTuples2(HeronTuples.HeronTupleSet2 set) {
     HeronTuples.HeronTupleSet.Builder toFeed = HeronTuples.HeronTupleSet.newBuilder();
+    // Set the source task id
+    toFeed.setSrcTaskId(set.getSrcTaskId());
+
     if (set.hasControl()) {
       toFeed.setControl(set.getControl());
     } else {

File: heron/instance/tests/java/com/twitter/heron/instance/bolt/BoltInstanceTest.java
Patch:
@@ -49,6 +49,7 @@
  */
 public class BoltInstanceTest {
   private static final String BOLT_INSTANCE_ID = "bolt-id";
+  private static final int SRC_TASK_ID = 1;
   private static IPluggableSerializer serializer = new JavaSerializer();
 
   // Singleton to be changed globally for testing
@@ -103,6 +104,7 @@ public void testReadTupleAndExecute() {
 
     // Send tuples to bolt instance
     HeronTuples.HeronTupleSet.Builder heronTupleSet = HeronTuples.HeronTupleSet.newBuilder();
+    heronTupleSet.setSrcTaskId(SRC_TASK_ID);
     HeronTuples.HeronDataTupleSet.Builder dataTupleSet = HeronTuples.HeronDataTupleSet.newBuilder();
     TopologyAPI.StreamId.Builder streamId = TopologyAPI.StreamId.newBuilder();
     streamId.setComponentName("test-spout");

File: heron/instance/tests/java/com/twitter/heron/instance/spout/SpoutInstanceTest.java
Patch:
@@ -64,6 +64,7 @@
  */
 public class SpoutInstanceTest {
   private static final String SPOUT_INSTANCE_ID = "spout-id";
+  private static final int SRC_TASK_ID = 1;
   private static IPluggableSerializer serializer = new JavaSerializer();
 
   // Singleton to be changed globally for testing
@@ -282,6 +283,7 @@ private void constructAndSendAcks() {
     // We will construct the ack&fail tuples
     // We will construct 5 acks and 5 fails
     HeronTuples.HeronTupleSet.Builder bldr = HeronTuples.HeronTupleSet.newBuilder();
+    bldr.setSrcTaskId(SRC_TASK_ID);
     HeronTuples.HeronControlTupleSet.Builder controlTupleSet
         = HeronTuples.HeronControlTupleSet.newBuilder();
 

File: heron/instance/tests/java/com/twitter/heron/network/HandleReadTest.java
Patch:
@@ -42,6 +42,7 @@
  * Stream manager.
  */
 public class HandleReadTest extends AbstractNetworkTest {
+  private static final int SRC_TASK_ID = 1;
 
   /**
    * Test reading from network
@@ -101,6 +102,7 @@ public void testHandleRead() throws IOException {
   private Message constructMockMessage() {
     StreamManager.TupleMessage.Builder message = StreamManager.TupleMessage.newBuilder();
     HeronTuples.HeronTupleSet.Builder heronTupleSet = HeronTuples.HeronTupleSet.newBuilder();
+    heronTupleSet.setSrcTaskId(SRC_TASK_ID);
     HeronTuples.HeronDataTupleSet.Builder dataTupleSet = HeronTuples.HeronDataTupleSet.newBuilder();
     TopologyAPI.StreamId.Builder streamId = TopologyAPI.StreamId.newBuilder();
     streamId.setComponentName("test-spout");

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/OutgoingTupleCollection.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.simulator.instance;
 
 import com.twitter.heron.common.basics.Communicator;
+import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.proto.system.HeronTuples;
 
 /**
@@ -27,8 +28,8 @@
  */
 public class OutgoingTupleCollection extends com.twitter.heron.instance.OutgoingTupleCollection {
 
-  public OutgoingTupleCollection(String componentName,
+  public OutgoingTupleCollection(PhysicalPlanHelper helper,
                                  Communicator<HeronTuples.HeronTupleSet> outQueue) {
-    super(componentName, outQueue);
+    super(helper, outQueue);
   }
 }

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -189,10 +189,10 @@ private static Options constructOptions() {
         .build();
 
     Option topologyJar = Option.builder("j")
-        .desc("user heron topology jar/pex file path")
+        .desc("The filename of the heron topology jar/tar/pex file to be run by the executor")
         .longOpt("topology_bin")
         .hasArgs()
-        .argName("topology binary file")
+        .argName("topology binary filename on the cluster")
         .required()
         .build();
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -200,7 +200,7 @@ protected Map<AuroraField, String> createAuroraProperties(Resource containerReso
     auroraProperties.put(AuroraField.TOPOLOGY_PACKAGE_TYPE,
         Context.topologyPackageType(config).name().toLowerCase());
     auroraProperties.put(AuroraField.TOPOLOGY_BINARY_FILE,
-        FileUtils.getBaseName(Context.topologyBinaryFile(config)));
+        Context.topologyBinaryFile(config));
     auroraProperties.put(AuroraField.JAVA_HOME, Context.clusterJavaHome(config));
 
     auroraProperties.put(AuroraField.SHELL_BINARY, Context.shellBinary(config));

File: heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java
Patch:
@@ -24,7 +24,6 @@
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.google.common.base.Joiner;
 
-import com.twitter.heron.common.basics.FileUtils;
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.scheduler.utils.Runtime;
 import com.twitter.heron.scheduler.utils.SchedulerUtils;
@@ -108,7 +107,7 @@ protected String getTopologyConf(PackingPlan packing) {
     config = Config.newBuilder()
         .putAll(config)
         .put(Key.TOPOLOGY_BINARY_FILE,
-            FileUtils.getBaseName(Context.topologyBinaryFile(config)))
+            Context.topologyBinaryFile(config))
         .build();
 
     ObjectMapper mapper = new ObjectMapper();

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -245,7 +245,7 @@ public void testProperties() throws URISyntaxException {
     when(commandLine.getOptionValue("config_path")).thenReturn("/some/config/path");
     when(commandLine.getOptionValue("topology_package")).thenReturn("jar");
     when(commandLine.getOptionValue("topology_defn")).thenReturn("/mock/defnFile.defn");
-    when(commandLine.getOptionValue("topology_bin")).thenReturn("/mock/binaryFile.jar");
+    when(commandLine.getOptionValue("topology_bin")).thenReturn("binaryFile.jar");
     Config config = Mockito.spy(SubmitterMain.loadConfig(commandLine, topology));
 
     AuroraScheduler testScheduler = new AuroraScheduler();

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/UpdateTopologyManager.java
Patch:
@@ -216,7 +216,7 @@ void reactivateTopology(SchedulerStateManagerAdaptor stateManager,
         topologyConfig, TOPOLOGY_UPDATE_REACTIVATE_WAIT_SECS, 10 * 60L);
     long delaySeconds = 10;
 
-    logInfo("Waiting for packing plan to be set before re-activating topology %s. "
+    logInfo("Waiting for physical plan to be set before re-activating topology %s. "
             + "Will wait up to %s seconds for packing plan to be reset",
         topology.getName(), waitSeconds);
     Enabler enabler = new Enabler(stateManager, topology, waitSeconds, removableContainerCount);

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/sink/metricscache/MetricsCacheSinkTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.Test;
 
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.metricsmgr.LatchedMultiCountMetric;
 import com.twitter.heron.metricsmgr.sink.SinkContextImpl;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
@@ -92,7 +93,7 @@ public void testMetricsCacheClientService() throws Exception {
     metricsCacheSink.startNewMetricsCacheClient(getMetricsCacheLocation(0));
 
     // We wait for a while to let auto recover fully finish.
-    Thread.sleep(RESTART_WAIT_INTERVAL.toMillis());
+    SysUtils.sleep(RESTART_WAIT_INTERVAL);
 
     // Then we check whether the MetricsCacheService has restarted the MetricsCacheClient for
     // several times Take other factors into account, we would check whether the MetricsCacheClient

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSinkTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.Test;
 
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.metricsmgr.LatchedMultiCountMetric;
 import com.twitter.heron.metricsmgr.sink.SinkContextImpl;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
@@ -96,7 +97,7 @@ public void testTMasterClientService() throws InterruptedException {
     tMasterSink.startNewTMasterClient(getTMasterLocation(0));
 
     // We wait for a while to let auto recover fully finish.
-    Thread.sleep(RESTART_WAIT_INTERVAL.toMillis());
+    SysUtils.sleep(RESTART_WAIT_INTERVAL);
 
     // Then we check whether the TMasterService has restarted the TMasterClient for several times
     // Take other factors into account, we would check whether the TMasterClient has restarted

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -364,7 +364,7 @@ public void testProperties() throws URISyntaxException {
           break;
         case CKPTMGR_CLASSPATH:
           expected =
-              expectedLib + "/ckptmgr/*:" + expectedLib + "/statefulstorages/*:";
+              expectedLib + "/ckptmgr/*:" + expectedLib + "/statefulstorage/*:";
           break;
         case IS_STATEFUL_ENABLED:
           expected = Boolean.FALSE.toString();

File: heron/common/tests/java/com/twitter/heron/common/network/HeronServerTest.java
Patch:
@@ -154,7 +154,6 @@ public void testClose() {
   public void testHandleAccept() {
     runBase();
 
-    HeronServerTester.await(serverOnConnectSignal);
     Map<SocketChannel, SocketChannelHelper> activeConnections = heronServer.getActiveConnections();
     ServerSocketChannel acceptChannel = heronServer.getAcceptChannel();
 
@@ -362,6 +361,7 @@ public void run() {
   private void runBase() {
     heronServerTester.start();
     HeronServerTester.await(clientOnConnectSignal);
+    HeronServerTester.await(serverOnConnectSignal);
   }
 
   private class SimpleHeronServer extends HeronServer {

File: heron/spi/src/java/com/twitter/heron/spi/common/ConfigLoader.java
Patch:
@@ -61,6 +61,7 @@ public static Config loadConfig(String heronHome, String configPath,
         .putAll(loadConfig(Context.schedulerFile(localConfig)))
         .putAll(loadConfig(Context.stateManagerFile(localConfig)))
         .putAll(loadConfig(Context.uploaderFile(localConfig)))
+        .putAll(loadConfig(Context.statefulFile(localConfig)))
         .putAll(loadConfig(releaseFile))
         .putAll(loadConfig(overrideConfigFile));
     return cb.build();
@@ -81,7 +82,8 @@ public static Config loadClusterConfig() {
         .putAll(loadConfig(Context.packingFile(clusterConfig)))
         .putAll(loadConfig(Context.schedulerFile(clusterConfig)))
         .putAll(loadConfig(Context.stateManagerFile(clusterConfig)))
-        .putAll(loadConfig(Context.uploaderFile(clusterConfig)));
+        .putAll(loadConfig(Context.uploaderFile(clusterConfig)))
+        .putAll(loadConfig(Context.statefulFile(clusterConfig)));
 
     // Add the override config at the end to replace any existing configs
     cb.putAll(loadConfig(Context.overrideFile(clusterConfig)));

File: heron/spi/tests/java/com/twitter/heron/spi/common/ConfigLoaderTest.java
Patch:
@@ -82,12 +82,12 @@ private static void assertConfig(Config config,
                                    String heronConfigPath) {
     // assert that the config filenames passed to loadConfig are never null. If they are, the
     // configs defaults are not producing the config files.
-    PowerMockito.verifyStatic(times(8));
+    PowerMockito.verifyStatic(times(9));
     ConfigLoader.loadConfig(isNotNull(String.class));
     PowerMockito.verifyStatic(never());
     ConfigLoader.loadConfig(isNull(String.class));
 
-    // addFromFile with an empty map means that the config file was not found. Of the 8 files that
+    // addFromFile with an empty map means that the config file was not found. Of the 9 files that
     // are attempted to be loaded, all but 3 should be found (clientConfig, overrideConfigFile and
     // releaseFile do not exist)
     PowerMockito.verifyStatic(times(3));

File: heron/statefulstorages/src/java/com/twitter/heron/statefulstorage/hdfs/HDFSStorage.java
Patch:
@@ -38,7 +38,7 @@
 public class HDFSStorage implements IStatefulStorage {
   private static final Logger LOG = Logger.getLogger(HDFSStorage.class.getName());
 
-  private static final String ROOT_PATH_KEY = "heron.stateful.storage.hdfs.root.path";
+  private static final String ROOT_PATH_KEY = "heron.statefulstorage.hdfs.root.path";
 
   private String checkpointRootPath;
   private FileSystem fileSystem;

File: heron/statefulstorages/src/java/com/twitter/heron/statefulstorage/localfs/LocalFileSystemStorage.java
Patch:
@@ -30,7 +30,7 @@
 public class LocalFileSystemStorage implements IStatefulStorage {
   private static final Logger LOG = Logger.getLogger(LocalFileSystemStorage.class.getName());
 
-  private static final String ROOT_PATH_KEY = "heron.stateful.storage.localfs.root.path";
+  private static final String ROOT_PATH_KEY = "heron.statefulstorage.localfs.root.path";
 
   private String checkpointRootPath;
 

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/FullBoltMetrics.java
Patch:
@@ -36,7 +36,7 @@
  * 4. Expose methods which could be called externally to change the value of metrics
  */
 
-public class FullBoltMetrics {
+public class FullBoltMetrics extends BoltMetrics {
   private final MultiCountMetric ackCount;
   private final MultiReducedMetric<MeanReducerState, Number, Double> processLatency;
   private final MultiReducedMetric<MeanReducerState, Number, Double> failLatency;

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/FullSpoutMetrics.java
Patch:
@@ -38,7 +38,7 @@
  * 4. Expose methods which could be called externally to change the value of metrics
  */
 
-public class FullSpoutMetrics {
+public class FullSpoutMetrics extends SpoutMetrics {
   private final MultiCountMetric ackCount;
   private final MultiReducedMetric<MeanReducerState, Number, Double> completeLatency;
   private final MultiReducedMetric<MeanReducerState, Number, Double> failLatency;

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
Patch:
@@ -32,6 +32,7 @@
 import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.BoltMetrics;
+import com.twitter.heron.common.utils.metrics.FullBoltMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;
 import com.twitter.heron.common.utils.topology.TopologyContextImpl;
@@ -61,7 +62,7 @@ public BoltInstance(PhysicalPlanHelper helper,
     this.helper = helper;
     this.looper = looper;
     this.streamInQueue = streamInQueue;
-    this.boltMetrics = new BoltMetrics();
+    this.boltMetrics = new FullBoltMetrics();
     this.boltMetrics.initMultiCountMetrics(helper);
     this.serializer =
         SerializeDeSerializeHelper.getSerializer(helper.getTopologyContext().getTopologyConfig());

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java
Patch:
@@ -32,6 +32,7 @@
 import com.twitter.heron.common.basics.SlaveLooper;
 import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.common.config.SystemConfig;
+import com.twitter.heron.common.utils.metrics.FullSpoutMetrics;
 import com.twitter.heron.common.utils.metrics.SpoutMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;
@@ -72,7 +73,7 @@ public SpoutInstance(PhysicalPlanHelper helper,
     this.helper = helper;
     this.looper = looper;
     this.streamInQueue = streamInQueue;
-    this.spoutMetrics = new SpoutMetrics();
+    this.spoutMetrics = new FullSpoutMetrics();
     this.spoutMetrics.initMultiCountMetrics(helper);
     this.config = helper.getTopologyContext().getTopologyConfig();
     this.systemConfig = (SystemConfig) SingletonRegistry.INSTANCE.getSingleton(

File: integration-test/src/java/com/twitter/heron/integration_test/core/IntegrationTestBolt.java
Patch:
@@ -81,7 +81,6 @@ private int calculateTerminalsToReceive(TopologyContext context) {
 
   @Override
   public void execute(Tuple tuple) {
-    tuplesReceived++;
     String streamID = tuple.getSourceStreamId();
 
     LOG.info("Received a tuple: " + tuple + " ; from: " + streamID);
@@ -105,6 +104,7 @@ public void execute(Tuple tuple) {
             "Received a terminal, need to receive %s more", terminalsToReceive));
       }
     } else {
+      tuplesReceived++;
       currentTupleProcessing = tuple;
       delegateBolt.execute(tuple);
       // We ack only the tuples in user's logic

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/marathon/MarathonSchedulerTest.java
Patch:
@@ -54,7 +54,7 @@ public void after() throws Exception {
   public static void beforeClass() throws Exception {
     scheduler = Mockito.spy(MarathonScheduler.class);
     Mockito.doReturn(EXECUTOR_CMD).when(scheduler)
-        .getExecutorCommand(Mockito.mock(Config.class), Mockito.anyInt());
+        .getExecutorCommand(Mockito.anyInt());
   }
 
   @AfterClass

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/KafkaSpout.java
Patch:
@@ -65,7 +65,7 @@ public KafkaSpout(SpoutConfig spoutConf) {
 
   @Override
   @SuppressWarnings("unchecked")
-  public void open(Map<String, Object> conf,
+  public void open(Map conf,
                    final TopologyContext context,
                    final SpoutOutputCollector aCollector) {
     collector = aCollector;

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/KafkaUtils.java
Patch:
@@ -286,7 +286,7 @@ public static Iterable<List<Object>> generateTuples(KafkaConfig kafkaConfig,
         tups = ((StringMultiSchemeWithTopic) kafkaConfig.scheme)
             .deserializeWithTopic(topic, payloadBytes);
       } else {
-        tups = kafkaConfig.scheme.deserialize(payloadBytes);
+        tups = kafkaConfig.scheme.deserialize(payload);
       }
     }
     return tups;

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/StringKeyValueScheme.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.storm.kafka;
 
+import java.nio.ByteBuffer;
 import java.util.List;
 
 import com.google.common.collect.ImmutableMap;
@@ -30,7 +31,7 @@ public class StringKeyValueScheme extends StringScheme implements KeyValueScheme
   @Override
   public List<Object> deserializeKeyAndValue(byte[] key, byte[] value) {
     if (key == null) {
-      return deserialize(value);
+      return deserialize(ByteBuffer.wrap(value));
     }
     String keyString = StringScheme.deserializeString(key);
     String valueString = StringScheme.deserializeString(value);

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/StringMultiSchemeWithTopic.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.storm.kafka;
 
+import java.nio.ByteBuffer;
 import java.util.Collections;
 import java.util.List;
 
@@ -32,7 +33,7 @@ public class StringMultiSchemeWithTopic
   private static final long serialVersionUID = 1985667152241541458L;
 
   @Override
-  public Iterable<List<Object>> deserialize(byte[] bytes) {
+  public Iterable<List<Object>> deserialize(ByteBuffer bytes) {
     throw new UnsupportedOperationException();
   }
 

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/KafkaSpout.java
Patch:
@@ -65,7 +65,7 @@ public KafkaSpout(SpoutConfig spoutConf) {
 
   @Override
   @SuppressWarnings("unchecked")
-  public void open(Map<String, Object> conf,
+  public void open(Map conf,
                    final TopologyContext context,
                    final SpoutOutputCollector aCollector) {
     collector = aCollector;

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/KafkaUtils.java
Patch:
@@ -286,7 +286,7 @@ public static Iterable<List<Object>> generateTuples(KafkaConfig kafkaConfig,
         tups = ((StringMultiSchemeWithTopic) kafkaConfig.scheme)
             .deserializeWithTopic(topic, payloadBytes);
       } else {
-        tups = kafkaConfig.scheme.deserialize(payloadBytes);
+        tups = kafkaConfig.scheme.deserialize(payload);
       }
     }
     return tups;

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/StringKeyValueScheme.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.storm.kafka;
 
+import java.nio.ByteBuffer;
 import java.util.List;
 
 import com.google.common.collect.ImmutableMap;
@@ -30,7 +31,7 @@ public class StringKeyValueScheme extends StringScheme implements KeyValueScheme
   @Override
   public List<Object> deserializeKeyAndValue(byte[] key, byte[] value) {
     if (key == null) {
-      return deserialize(value);
+      return deserialize(ByteBuffer.wrap(value));
     }
     String keyString = StringScheme.deserializeString(key);
     String valueString = StringScheme.deserializeString(value);

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/StringMultiSchemeWithTopic.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.storm.kafka;
 
+import java.nio.ByteBuffer;
 import java.util.Collections;
 import java.util.List;
 
@@ -32,7 +33,7 @@ public class StringMultiSchemeWithTopic
   private static final long serialVersionUID = 1985667152241541458L;
 
   @Override
-  public Iterable<List<Object>> deserialize(byte[] bytes) {
+  public Iterable<List<Object>> deserialize(ByteBuffer bytes) {
     throw new UnsupportedOperationException();
   }
 

File: heron/common/src/java/com/twitter/heron/common/basics/DryRunFormatType.java
Patch:
@@ -19,7 +19,8 @@
  */
 public enum DryRunFormatType {
   RAW,
-  TABLE;
+  TABLE,
+  COLORED_TABLE;
 
   public static DryRunFormatType getDryRunFormatType(String dryRunFormatType) {
     return DryRunFormatType.valueOf(dryRunFormatType.toUpperCase());

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -449,7 +449,9 @@ protected String renderDryRunResponse(UpdateDryRunResponse resp) {
       case RAW :
         return new UpdateRawDryRunRenderer(resp).render();
       case TABLE:
-        return new UpdateTableDryRunRenderer(resp).render();
+        return new UpdateTableDryRunRenderer(resp, false).render();
+      case COLORED_TABLE:
+        return new UpdateTableDryRunRenderer(resp, true).render();
       default: throw new IllegalArgumentException(
           String.format("Unexpected rendering format: %s", formatType));
     }

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -562,7 +562,8 @@ protected String renderDryRunResponse(SubmitDryRunResponse resp) {
     DryRunFormatType formatType = Context.dryRunFormatType(config);
     switch (formatType) {
       case RAW : return new SubmitRawDryRunRenderer(resp).render();
-      case TABLE: return new SubmitTableDryRunRenderer(resp).render();
+      case TABLE: return new SubmitTableDryRunRenderer(resp, false).render();
+      case COLORED_TABLE: return new SubmitTableDryRunRenderer(resp, true).render();
       default: throw new IllegalArgumentException(
           String.format("Unexpected rendering format: %s", formatType));
     }

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/metricscache/CacheCore.java
Patch:
@@ -482,9 +482,9 @@ public void purge() {
     long now = System.currentTimeMillis();
     synchronized (CacheCore.class) {
       // remove old
-      for (Long firstKey = cacheMetric.firstKey();
+      for (Long firstKey = cacheMetric.isEmpty() ? null : cacheMetric.firstKey();
            firstKey != null && firstKey < now - maxIntervalMilliSecs;
-           firstKey = cacheMetric.firstKey()) {
+           firstKey = cacheMetric.isEmpty() ? null : cacheMetric.firstKey()) {
         cacheMetric.remove(firstKey);
       }
       // add new

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraField.java
Patch:
@@ -48,5 +48,6 @@ public enum AuroraField {
   TOPOLOGY_ID,
   TOPOLOGY_NAME,
   TOPOLOGY_PACKAGE_TYPE,
-  TOPOLOGY_PACKAGE_URI
+  TOPOLOGY_PACKAGE_URI,
+  METRICSCACHEMGR_CLASSPATH
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -237,6 +237,9 @@ protected Map<AuroraField, String> createAuroraProperties(Resource containerReso
     auroraProperties.put(AuroraField.CORE_PACKAGE_URI, heronCoreReleasePkgURI);
     auroraProperties.put(AuroraField.TOPOLOGY_PACKAGE_URI, topologyPkgURI);
 
+    auroraProperties.put(AuroraField.METRICSCACHEMGR_CLASSPATH,
+        Context.metricsCacheManagerClassPath(config));
+
     return auroraProperties;
   }
 }

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -359,6 +359,9 @@ public void testProperties() throws URISyntaxException {
         case TOPOLOGY_PACKAGE_URI:
           expected = "http://foo/bar";
           break;
+        case METRICSCACHEMGR_CLASSPATH:
+          expected = expectedLib + "/metricscachemgr/*";
+          break;
         default:
           fail(String.format(
               "Expected value for Aurora field %s not found in test (found=%s)", field, found));

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -117,7 +117,7 @@ public void testInitialize() throws Exception {
     // Verify curator client is invoked
     verify(mockClient).start();
     verify(mockClient).blockUntilConnected(anyInt(), any(TimeUnit.class));
-    verify(mockClient, times(7)).createContainers(anyString());
+    verify(mockClient, times(8)).createContainers(anyString());
 
     // Verify initTree is called
     verify(spyStateManager).initTree();

File: heron/uploaders/src/java/com/twitter/heron/uploader/s3/S3Uploader.java
Patch:
@@ -199,7 +199,7 @@ public URI uploadPackage() throws UploaderException {
       return resourceUrl.toURI();
     } catch (URISyntaxException e) {
       throw new UploaderException(
-          String.format("Could not convert URL %s to URI", resourceUrl, e));
+          String.format("Could not convert URL %s to URI", resourceUrl), e);
     }
   }
 

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -360,8 +360,8 @@ public void testProperties() throws URISyntaxException {
           expected = "http://foo/bar";
           break;
         case METRICSCACHEMGR_CLASSPATH:
-            expected = expectedLib + "/metricscachemgr/*";
-            break;
+          expected = expectedLib + "/metricscachemgr/*";
+          break;
         default:
           fail(String.format(
               "Expected value for Aurora field %s not found in test (found=%s)", field, found));

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -117,7 +117,7 @@ public void testInitialize() throws Exception {
     // Verify curator client is invoked
     verify(mockClient).start();
     verify(mockClient).blockUntilConnected(anyInt(), any(TimeUnit.class));
-    verify(mockClient, times(8)).createContainers(anyString());
+    verify(mockClient, times(7)).createContainers(anyString());
 
     // Verify initTree is called
     verify(spyStateManager).initTree();

File: heron/uploaders/src/java/com/twitter/heron/uploader/s3/S3Uploader.java
Patch:
@@ -199,7 +199,7 @@ public URI uploadPackage() throws UploaderException {
       return resourceUrl.toURI();
     } catch (URISyntaxException e) {
       throw new UploaderException(
-          String.format("Could not convert URL %s to URI", resourceUrl), e);
+          String.format("Could not convert URL %s to URI", resourceUrl, e));
     }
   }
 

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -117,7 +117,7 @@ public void testInitialize() throws Exception {
     // Verify curator client is invoked
     verify(mockClient).start();
     verify(mockClient).blockUntilConnected(anyInt(), any(TimeUnit.class));
-    verify(mockClient, times(7)).createContainers(anyString());
+    verify(mockClient, times(8)).createContainers(anyString());
 
     // Verify initTree is called
     verify(spyStateManager).initTree();

File: heron/uploaders/src/java/com/twitter/heron/uploader/s3/S3Uploader.java
Patch:
@@ -199,7 +199,7 @@ public URI uploadPackage() throws UploaderException {
       return resourceUrl.toURI();
     } catch (URISyntaxException e) {
       throw new UploaderException(
-          String.format("Could not convert URL %s to URI", resourceUrl, e));
+          String.format("Could not convert URL %s to URI", resourceUrl), e);
     }
   }
 

File: heron/packing/src/java/com/twitter/heron/packing/builder/PackingPlanBuilder.java
Patch:
@@ -124,7 +124,7 @@ public PackingPlanBuilder addInstance(Integer containerId,
           instanceId, instanceResource, containerId), e);
     }
 
-    LOG.fine(String.format("Added to container %d instance %s", containerId, instanceId));
+    LOG.finest(String.format("Added to container %d instance %s", containerId, instanceId));
     return this;
   }
 

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPacking.java
Patch:
@@ -163,7 +163,7 @@ public PackingPlan pack() {
 
       } catch (ResourceExceededException e) {
         //Not enough containers. Adjust the number of containers.
-        LOG.info(String.format(
+        LOG.finest(String.format(
             "%s Increasing the number of containers to %s and attempting to place again.",
             e.getMessage(), this.numContainers + 1));
         increaseNumContainers(1);

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java
Patch:
@@ -281,10 +281,10 @@ public void testCallSuccess() throws Exception {
     doTestLaunch(new com.twitter.heron.api.Config());
   }
 
-  @Test(expected = LauncherException.class)
-  public void testFailureNumContainers() throws Exception {
+  @Test
+  public void testCallSuccessWithDifferentNumContainers() throws Exception {
     com.twitter.heron.api.Config topologyConfig = new com.twitter.heron.api.Config();
-    topologyConfig.setNumStmgrs(2); // fails because packing plan has only 1 container plan
+    topologyConfig.setNumStmgrs(2); // packing plan has only 1 container plan but numStmgrs is 2
 
     doTestLaunch(topologyConfig);
   }

File: heron/spi/src/java/com/twitter/heron/spi/utils/TopologyUtils.java
Patch:
@@ -220,6 +220,7 @@ public static Map<String, ByteAmount> getComponentRamMapConfig(TopologyAPI.Topol
     return ramMap;
   }
 
+  // TODO: in a PR of it's own rename this to getNumStreamManagers to be correct
   public static int getNumContainers(TopologyAPI.Topology topology) {
     List<TopologyAPI.Config.KeyValue> topologyConfig = topology.getTopologyConfig().getKvsList();
     return Integer.parseInt(TopologyUtils.getConfigWithDefault(

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/metricscache/CacheCore.java
Patch:
@@ -245,7 +245,7 @@ private void addException(TopologyMaster.TmasterExceptionLog exceptionLog) {
    * idxComponentInstance == [c1-&gt;[], ..]: query none instance of c1, ..
    * idxComponentInstance == [c1-&gt;[a, b, c, ..], ..]: query instance a, b, c, .. of c1, ..
    * <p>
-   * assert: startTime <= endTime
+   * assert: startTime &lt;= endTime
    */
   public MetricResponse getMetrics(
       MetricRequest request, MetricsFilter metricNameType) {

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/MetricsCacheManagerHttpServer.java
Patch:
@@ -77,7 +77,7 @@ public MetricsCacheManagerHttpServer(MetricsCache cache, int port) throws IOExce
    * How to run:
    * in the [source root directory], run bazel test,
    * bazel run heron/metricscachemgr/src/java:metricscache-queryclient-unshaded -- \
-   * <topology_name> <component_name> <metrics_name>
+   * &lt;topology_name&gt; &lt;component_name&gt; &lt;metrics_name&gt;
    * Example:
    * 1. run the example topology,
    * ~/bin/heron submit local ~/.heron/examples/heron-examples.jar \

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/metricscache/query/MetricDatum.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * immutable data bag for metric datum
- * metric locator: <componentName, instanceId, metricName>
+ * metric locator: &lt;componentName, instanceId, metricName&gt;
  * metric value list: metricValue (use immutable getter)
  */
 public final class MetricDatum {

File: heron/metricscachemgr/src/java/com/twitter/heron/metricscachemgr/metricscache/query/MetricRequest.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * immutable data bag for metric request
- * equality: <componentName, instanceId, metricName>
+ * equality: &lt;componentName, instanceId, metricName&gt;
  * range: startTime ~ endTime
  * type: aggregationGranularity
  */

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -117,7 +117,7 @@ public void testInitialize() throws Exception {
     // Verify curator client is invoked
     verify(mockClient).start();
     verify(mockClient).blockUntilConnected(anyInt(), any(TimeUnit.class));
-    verify(mockClient, times(7)).createContainers(anyString());
+    verify(mockClient, times(8)).createContainers(anyString());
 
     // Verify initTree is called
     verify(spyStateManager).initTree();

File: heron/instance/src/java/com/twitter/heron/instance/HeronInstance.java
Patch:
@@ -145,7 +145,7 @@ public static void main(String[] args) throws IOException {
     String streamId = args[6];
     int streamPort = Integer.parseInt(args[7]);
     int metricsPort = Integer.parseInt(args[8]);
-    SystemConfig systemConfig = new SystemConfig(args[9], true);
+    SystemConfig systemConfig = SystemConfig.newBuilder(true).putAll(args[9], true).build();
 
     // Add the SystemConfig into SingletonRegistry
     SingletonRegistry.INSTANCE.registerSingleton(SystemConfig.HERON_SYSTEM_CONFIG, systemConfig);

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -277,7 +277,9 @@ public static SchedulerMain createInstance(String cluster,
   private static void setupLogging(Config config) throws IOException {
     String systemConfigFilename = Context.systemConfigFile(config);
 
-    SystemConfig systemConfig = new SystemConfig(systemConfigFilename, true);
+    SystemConfig systemConfig = SystemConfig.newBuilder(true)
+        .putAll(systemConfigFilename, true)
+        .build();
 
     // Init the logging setting and redirect the stdout and stderr to logging
     // For now we just set the logging level as INFO; later we may accept an argument to set it.

File: heron/instance/tests/java/com/twitter/heron/resource/UnitTestHelper.java
Patch:
@@ -48,7 +48,7 @@ private UnitTestHelper() {
    *
    * @param ackEnabled whether the acking system is enabled
    * @param messageTimeout the seconds for a tuple to be time-out. -1 means the timeout is not enabled.
-   * @param topologyState the Topology State inside this PhysicaPlan, for intance, RUNNING.
+   * @param topologyState the Topology State inside this PhysicalPlan, for instance, RUNNING.
    * @return the corresponding Physical Plan
    */
   public static PhysicalPlans.PhysicalPlan getPhysicalPlan(

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/RuntimeManagerMainTest.java
Patch:
@@ -230,7 +230,7 @@ public void testManageTopologyDryRun() throws Exception {
     when(config.getStringValue(RuntimeManagerRunner.NEW_COMPONENT_PARALLELISM_KEY))
         .thenReturn("testSpout:4,testBolt:5");
     // mock dry-run mode
-    when(config.getBooleanValue(Key.DRY_RUN, false)).thenReturn(true);
+    when(config.getBooleanValue(Key.DRY_RUN)).thenReturn(true);
     when(config.getDoubleValue(Key.INSTANCE_CPU)).thenReturn(1.0);
     when(config.getByteAmountValue(Key.INSTANCE_RAM))
         .thenReturn(ByteAmount.fromGigabytes(1));

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SubmitterMainTest.java
Patch:
@@ -187,7 +187,7 @@ public void testSubmitTopologyDryRun() throws Exception {
     PowerMockito.whenNew(SchedulerStateManagerAdaptor.class).withAnyArguments().
         thenReturn(adaptor);
     SubmitterMain submitterMain = spy(new SubmitterMain(config, topology));
-    when(config.getBooleanValue(Key.DRY_RUN, false)).thenReturn(true);
+    when(config.getBooleanValue(Key.DRY_RUN)).thenReturn(true);
     try {
       submitterMain.submitTopology();
     } finally {

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalContext.java
Patch:
@@ -21,7 +21,7 @@
 public class LocalContext extends Context {
   public static String workingDirectory(Config config) {
     String workingDirectory = config.getStringValue(
-        LocalKey.WORKING_DIRECTORY.value(), LocalDefaults.get(LocalKey.WORKING_DIRECTORY.name()));
+        LocalKey.WORKING_DIRECTORY.value(), LocalKey.WORKING_DIRECTORY.getDefaultString());
     return Misc.substitute(config, workingDirectory);
   }
 }

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -75,7 +75,7 @@ public class CuratorStateManagerTest {
 
   @Before
   public void before() throws Exception {
-    Config.Builder builder = Config.newBuilder()
+    Config.Builder builder = Config.newBuilder(true)
         .put(Key.STATEMGR_ROOT_PATH, ROOT_ADDR)
         .put(Key.TOPOLOGY_NAME, TOPOLOGY_NAME)
         .put(Key.STATEMGR_CONNECTION_STRING, CONNECTION_STRING);

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemContext.java
Patch:
@@ -19,6 +19,7 @@
 
 public class LocalFileSystemContext extends Context {
   public static String fileSystemDirectory(Config config) {
-    return config.getStringValue(LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.value());
+    return config.getStringValue(LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.value(),
+        LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.getDefaultString());
   }
 }

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigTest.java
Patch:
@@ -34,7 +34,7 @@ private Config getDefaultConfig() {
         .put(Key.TOPOLOGY_PACKAGE_TYPE, PackageType.TAR)
         .put(Key.TOPOLOGY_PACKAGE_FILE, "/tmp/something.tar.gz")
         .put(LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.value(),
-            LocalFileSystemDefaults.fileSystemDirectory())
+            LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.getDefaultString())
         .build();
   }
 
@@ -44,7 +44,7 @@ public void testDefaultConfig() throws Exception {
 
     Assert.assertEquals(
         LocalFileSystemContext.fileSystemDirectory(config),
-        Misc.substitute(config, LocalFileSystemDefaults.fileSystemDirectory())
+        Misc.substitute(config, LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.getDefaultString())
     );
   }
 
@@ -72,7 +72,7 @@ public void testTopologyDirectory() throws Exception {
 
     Assert.assertEquals(
         uploader.getTopologyDirectory(),
-        Misc.substitute(config, LocalFileSystemDefaults.fileSystemDirectory())
+        Misc.substitute(config, LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.getDefaultString())
     );
   }
 

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/RoundRobinPackingTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.twitter.heron.packing.AssertPacking;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingException;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
@@ -46,8 +46,8 @@ private TopologyAPI.Topology getTopology(
 
   private PackingPlan getRoundRobinPackingPlan(TopologyAPI.Topology topology) {
     Config config = Config.newBuilder()
-        .put(Keys.topologyId(), topology.getId())
-        .put(Keys.topologyName(), topology.getName())
+        .put(Key.TOPOLOGY_ID, topology.getId())
+        .put(Key.TOPOLOGY_NAME, topology.getName())
         .putAll(ClusterDefaults.getDefaults())
         .build();
 

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/utils/SchedulerUtils.java
Patch:
@@ -40,6 +40,7 @@
 public final class SchedulerUtils {
   public static final int PORTS_REQUIRED_FOR_EXECUTOR = 6;
   public static final int PORTS_REQUIRED_FOR_SCHEDULER = 1;
+  public static final String SCHEDULER_COMMAND_LINE_PROPERTIES_OVERRIDE_OPTION = "P";
 
   private static final Logger LOG = Logger.getLogger(SchedulerUtils.class.getName());
 

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -35,7 +35,7 @@
 import com.twitter.heron.scheduler.utils.SchedulerUtils;
 import com.twitter.heron.scheduler.utils.Shutdown;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.ConfigKeys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.scheduler.IScheduler;
 import com.twitter.heron.spi.statemgr.IStateManager;
@@ -80,9 +80,9 @@ public class SchedulerMainTest {
   @Before
   public void setUp() throws Exception {
     Config config = mock(Config.class);
-    when(config.getStringValue(ConfigKeys.get("STATE_MANAGER_CLASS"))).
+    when(config.getStringValue(Key.STATE_MANAGER_CLASS)).
         thenReturn(STATE_MANAGER_CLASS);
-    when(config.getStringValue(ConfigKeys.get("SCHEDULER_CLASS"))).
+    when(config.getStringValue(Key.SCHEDULER_CLASS)).
         thenReturn(SCHEDULER_CLASS);
 
     int iSchedulerServerPort = 0;

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/UpdateTopologyManagerTest.java
Patch:
@@ -45,7 +45,7 @@
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.scheduler.UpdateTopologyManager.ContainerDelta;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.PackingPlanProtoSerializer;
 import com.twitter.heron.spi.scheduler.IScalable;
@@ -114,8 +114,8 @@ private static SchedulerStateManagerAdaptor mockStateManager(TopologyAPI.Topolog
 
   private static Config mockRuntime(SchedulerStateManagerAdaptor stateManager) {
     Config runtime = mock(Config.class);
-    when(runtime.getStringValue(Keys.topologyName())).thenReturn(TOPOLOGY_NAME);
-    when(runtime.get(Keys.schedulerStateManagerAdaptor())).thenReturn(stateManager);
+    when(runtime.getStringValue(Key.TOPOLOGY_NAME)).thenReturn(TOPOLOGY_NAME);
+    when(runtime.get(Key.SCHEDULER_STATE_MANAGER_ADAPTOR)).thenReturn(stateManager);
     return runtime;
   }
 

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/dryrun/SubmitDryRunRenderTest.java
Patch:
@@ -31,7 +31,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.Pair;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.ConfigKeys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.utils.PackingTestUtils;
 
@@ -72,7 +72,7 @@ public void testTableA() throws IOException {
     // Input might contain UTF-8 character, so we read stream with UTF-8 decoding
     String exampleTable = IOUtils.toString(stream, StandardCharsets.UTF_8);
     TopologyAPI.Topology topology = PowerMockito.mock(TopologyAPI.Topology.class);
-    Config config = Config.newBuilder().put(ConfigKeys.get("PACKING_CLASS"),
+    Config config = Config.newBuilder().put(Key.PACKING_CLASS,
         "com.twitter.heron.packing.roundrobin.RoundRobinPacking").build();
     String table =
         new SubmitTableDryRunRenderer(new SubmitDryRunResponse(topology, config, plan)).render();

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/dryrun/UpdateDryRunRenderTest.java
Patch:
@@ -32,7 +32,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.Pair;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.ConfigKeys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.utils.PackingTestUtils;
 
@@ -98,7 +98,7 @@ public void testTableA() throws IOException {
     // Input might contain UTF-8 character, so we read stream with UTF-8 decoding
     String exampleTable = IOUtils.toString(stream, StandardCharsets.UTF_8);
     TopologyAPI.Topology topology = PowerMockito.mock(TopologyAPI.Topology.class);
-    Config config = Config.newBuilder().put(ConfigKeys.get("REPACKING_CLASS"),
+    Config config = Config.newBuilder().put(Key.REPACKING_CLASS,
         "com.twitter.heron.packing.binpacking.FirstFitDecreasingPacking").build();
     UpdateDryRunResponse resp = new UpdateDryRunResponse(
         topology, config, newPlanA, originalPlan, new HashMap<String, Integer>());
@@ -116,7 +116,7 @@ public void testTableA() throws IOException {
     // Input might contain UTF-8 character, so we read stream with UTF-8 decoding
     String exampleTable = IOUtils.toString(stream, StandardCharsets.UTF_8);
     TopologyAPI.Topology topology = PowerMockito.mock(TopologyAPI.Topology.class);
-    Config config = Config.newBuilder().put(ConfigKeys.get("REPACKING_CLASS"),
+    Config config = Config.newBuilder().put(Key.REPACKING_CLASS,
         "com.twitter.heron.packing.binpacking.FirstFitDecreasingPacking").build();
     UpdateDryRunResponse resp = new UpdateDryRunResponse(
         topology, config, newPlanB, originalPlan, new HashMap<String, Integer>());

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/utils/LauncherUtilsTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.IPacking;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
@@ -52,8 +52,8 @@ public void generatesPackingPlan() throws Exception {
     TopologyAPI.Topology mockTopology = PowerMockito.mock(TopologyAPI.Topology.class);
 
     Config mockConfig = Mockito.mock(Config.class);
-    Mockito.when(mockConfig.getStringValue(Keys.packingClass())).thenReturn(PACKING_CLASS);
-    Mockito.when(mockConfig.get(Keys.topologyDefinition())).thenReturn(mockTopology);
+    Mockito.when(mockConfig.getStringValue(Key.PACKING_CLASS)).thenReturn(PACKING_CLASS);
+    Mockito.when(mockConfig.get(Key.TOPOLOGY_DEFINITION)).thenReturn(mockTopology);
 
     PackingPlan resultPacking = LauncherUtils.getInstance().createPackingPlan(mockConfig,
         mockConfig);

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalContext.java
Patch:
@@ -21,7 +21,7 @@
 public class LocalContext extends Context {
   public static String workingDirectory(Config config) {
     String workingDirectory = config.getStringValue(
-        LocalKeys.get("WORKING_DIRECTORY"), LocalDefaults.get("WORKING_DIRECTORY"));
+        LocalKey.WORKING_DIRECTORY.value(), LocalDefaults.get(LocalKey.WORKING_DIRECTORY.name()));
     return Misc.substitute(config, workingDirectory);
   }
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/mesos/MesosScheduler.java
Patch:
@@ -38,7 +38,7 @@
 import com.twitter.heron.scheduler.utils.SchedulerUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.scheduler.IScheduler;
@@ -231,7 +231,7 @@ protected BaseContainer getBaseContainer(Integer containerIndex, PackingPlan pac
     // The dependencies for the container
     container.dependencies = new ArrayList<>();
     String topologyPath =
-        Runtime.schedulerProperties(runtime).getProperty(Keys.topologyPackageUri());
+        Runtime.schedulerProperties(runtime).getProperty(Key.TOPOLOGY_PACKAGE_URI.value());
     String heronCoreReleasePath = Context.corePackageUri(config);
 
     container.dependencies.add(topologyPath);

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronExecutorTask.java
Patch:
@@ -46,7 +46,7 @@
 import com.twitter.heron.scheduler.yarn.HeronConfigurationOptions.TopologyPackageName;
 import com.twitter.heron.scheduler.yarn.HeronConfigurationOptions.VerboseLogMode;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.utils.ShellUtils;
 import com.twitter.heron.spi.utils.TopologyUtils;
 
@@ -161,8 +161,8 @@ String[] getExecutorCommand() {
     }
 
     Config runtime = Config.newBuilder()
-        .put(Keys.componentRamMap(), componentRamMap)
-        .put(Keys.topologyDefinition(), topology)
+        .put(Key.COMPONENT_RAMMAP, componentRamMap)
+        .put(Key.TOPOLOGY_DEFINITION, topology)
         .build();
 
     String[] executorCmd = SchedulerUtils.executorCommand(config,

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -35,7 +35,7 @@
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.common.Misc;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
@@ -87,8 +87,8 @@ public void testOnSchedule() throws Exception {
 
     SchedulerStateManagerAdaptor stateManager = mock(SchedulerStateManagerAdaptor.class);
     Config runtime = Mockito.mock(Config.class);
-    Mockito.when(runtime.get(Keys.schedulerStateManagerAdaptor())).thenReturn(stateManager);
-    Mockito.when(runtime.getStringValue(Keys.topologyName())).thenReturn(TOPOLOGY_NAME);
+    Mockito.when(runtime.get(Key.SCHEDULER_STATE_MANAGER_ADAPTOR)).thenReturn(stateManager);
+    Mockito.when(runtime.getStringValue(Key.TOPOLOGY_NAME)).thenReturn(TOPOLOGY_NAME);
 
     Config mConfig = Mockito.mock(Config.class);
     Mockito.when(mConfig.getStringValue(eq(AuroraContext.JOB_TEMPLATE),

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/marathon/MarathonSchedulerTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.PackingPlan;
 
 public class MarathonSchedulerTest {
@@ -148,7 +148,7 @@ public void testGetJobLinks() throws Exception {
         .thenReturn(SCHEDULER_URI);
 
     Config mockRuntime = Mockito.mock(Config.class);
-    Mockito.when(mockRuntime.getStringValue(Keys.topologyName()))
+    Mockito.when(mockRuntime.getStringValue(Key.TOPOLOGY_NAME))
         .thenReturn(TOPOLOGY_NAME);
 
     scheduler.initialize(mockConfig, mockRuntime);

File: heron/spi/src/java/com/twitter/heron/spi/utils/PackingTestUtils.java
Patch:
@@ -27,7 +27,7 @@
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.packing.IPacking;
 import com.twitter.heron.spi.packing.InstanceId;
 import com.twitter.heron.spi.packing.PackingPlan;
@@ -56,8 +56,8 @@ public static PackingPlan testPackingPlan(String topologyName, IPacking packing)
         TopologyTests.createTopology(topologyName, topologyConfig, spouts, bolts);
 
     Config config = Config.newBuilder()
-        .put(Keys.topologyId(), topology.getId())
-        .put(Keys.topologyName(), topology.getName())
+        .put(Key.TOPOLOGY_ID, topology.getId())
+        .put(Key.TOPOLOGY_NAME, topology.getName())
         .putAll(ClusterDefaults.getDefaults())
         .build();
 

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/FileSystemStateManager.java
Patch:
@@ -30,7 +30,7 @@
 import com.twitter.heron.proto.tmaster.TopologyMaster;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.statemgr.IStateManager;
 import com.twitter.heron.spi.statemgr.Lock;
 import com.twitter.heron.spi.statemgr.WatchCallback;
@@ -243,7 +243,7 @@ protected void doMain(String[] args, Config config)
 
     String topologyName = args[0];
     print("==> State Manager root path: %s",
-        config.getStringValue(Keys.stateManagerRootPath()));
+        config.getStringValue(Key.STATEMGR_ROOT_PATH));
 
     initialize(config);
 
@@ -258,7 +258,7 @@ protected void doMain(String[] args, Config config)
       print("==> PhysicalPlan:\n%s", getPhysicalPlan(null, topologyName).get());
     } else {
       print("==> Topology %s not found under %s",
-          topologyName, config.getStringValue(Keys.stateManagerRootPath()));
+          topologyName, config.getStringValue(Key.STATEMGR_ROOT_PATH));
     }
   }
 

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemContext.java
Patch:
@@ -25,8 +25,8 @@ public class LocalFileSystemContext extends Context {
    * @param config the config map
    * @return true if config does not exist, else the specified value
    */
-  public static boolean initLocalFileTree(Config config) {
+  static boolean initLocalFileTree(Config config) {
     return config.getBooleanValue(
-        LocalFileSystemKeys.initializeFileTree(), true);
+        LocalFileSystemKey.IS_INITIALIZE_FILE_TREE.value(), true);
   }
 }

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManager.java
Patch:
@@ -32,7 +32,7 @@
 import com.twitter.heron.proto.system.PhysicalPlans;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.statemgr.Lock;
 import com.twitter.heron.spi.statemgr.WatchCallback;
 import com.twitter.heron.statemgr.FileSystemStateManager;
@@ -226,7 +226,7 @@ public void close() {
   public static void main(String[] args) throws ExecutionException, InterruptedException,
       IllegalAccessException, ClassNotFoundException, InstantiationException {
     Config config = Config.newBuilder()
-        .put(Keys.stateManagerRootPath(),
+        .put(Key.STATEMGR_ROOT_PATH,
             System.getProperty("user.home") + "/.herondata/repository/state/local")
         .build();
     LocalFileSystemStateManager stateManager = new LocalFileSystemStateManager();

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -45,7 +45,7 @@
 import com.twitter.heron.proto.tmaster.TopologyMaster;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.statemgr.Lock;
 import com.twitter.heron.spi.statemgr.WatchCallback;
 import com.twitter.heron.spi.utils.NetworkUtils;
@@ -396,8 +396,8 @@ public static void main(String[] args) throws ExecutionException, InterruptedExc
 
     String zookeeperHostname = args[1];
     Config config = Config.newBuilder()
-        .put(Keys.stateManagerRootPath(), "/storm/heron/states")
-        .put(Keys.stateManagerConnectionString(), zookeeperHostname)
+        .put(Key.STATEMGR_ROOT_PATH, "/storm/heron/states")
+        .put(Key.STATEMGR_CONNECTION_STRING, zookeeperHostname)
         .build();
     CuratorStateManager stateManager = new CuratorStateManager();
     stateManager.doMain(args, config);

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManagerTest.java
Patch:
@@ -35,7 +35,7 @@
 import com.twitter.heron.proto.system.ExecutionEnvironment;
 import com.twitter.heron.proto.system.PackingPlans;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.statemgr.IStateManager;
 import com.twitter.heron.spi.statemgr.Lock;
 
@@ -72,8 +72,8 @@ public void before() throws Exception {
 
   private static LocalFileSystemStateManager initMockManager(String rootPath, boolean initTree) {
     Config config = Config.newBuilder()
-        .put(Keys.stateManagerRootPath(), rootPath)
-        .put(LocalFileSystemKeys.initializeFileTree(), initTree)
+        .put(Key.STATEMGR_ROOT_PATH, rootPath)
+        .put(LocalFileSystemKey.IS_INITIALIZE_FILE_TREE.value(), initTree)
         .build();
     LocalFileSystemStateManager manager = spy(new LocalFileSystemStateManager());
     manager.initialize(config);

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/ZkUtilsTest.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.twitter.heron.common.basics.Pair;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.ConfigKeys;
+import com.twitter.heron.spi.common.Key;
 import com.twitter.heron.spi.utils.NetworkUtils;
 
 import static org.junit.Assert.assertEquals;
@@ -69,7 +69,7 @@ public void testSetupZkTunnel() throws Exception {
         host0, port0, host1, port1, host2, port2);
 
     Config config = mock(Config.class);
-    when(config.getStringValue(ConfigKeys.get("STATEMGR_CONNECTION_STRING")))
+    when(config.getStringValue(Key.STATEMGR_CONNECTION_STRING))
         .thenReturn(connectionString);
     NetworkUtils.TunnelConfig tunnelConfig =
         NetworkUtils.TunnelConfig.build(config, NetworkUtils.HeronSystem.STATE_MANAGER);

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigDefaults.java
Patch:
@@ -43,7 +43,7 @@ private LocalFileSystemConfigDefaults() {
    * @param key, the config key
    * @return String, the default value for the config key
    */
-  public static String get(String key) {
-    return (String) defaults.get(key);
+  public static String get(LocalFileSystemKey key) {
+    return (String) defaults.get(key.name());
   }
 }

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConstants.java
Patch:
@@ -16,9 +16,6 @@
 
 final class LocalFileSystemConstants {
 
-  // name of the resource file that holds the config keys
-  public static final String KEYS_YAML = "com/twitter/heron/uploader/localfs/keys.yaml";
-
   // name of the resource file that holds the default values for config keys
   public static final String DEFAULTS_YAML = "com/twitter/heron/uploader/localfs/defaults.yaml";
 

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemContext.java
Patch:
@@ -19,6 +19,6 @@
 
 public class LocalFileSystemContext extends Context {
   public static String fileSystemDirectory(Config config) {
-    return config.getStringValue(LocalFileSystemKeys.fileSystemDirectory());
+    return config.getStringValue(LocalFileSystemKey.FILE_SYSTEM_DIRECTORY.value());
   }
 }

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemDefaults.java
Patch:
@@ -16,8 +16,8 @@
 
 import com.twitter.heron.spi.common.Defaults;
 
-public class LocalFileSystemDefaults extends Defaults {
-  public static String fileSystemDirectory() {
-    return LocalFileSystemConfigDefaults.get("FILE_SYSTEM_DIRECTORY");
+class LocalFileSystemDefaults extends Defaults {
+  static String fileSystemDirectory() {
+    return LocalFileSystemConfigDefaults.get(LocalFileSystemKey.FILE_SYSTEM_DIRECTORY);
   }
 }

File: heron/common/src/java/com/twitter/heron/common/basics/SlaveLooper.java
Patch:
@@ -78,7 +78,7 @@ private static final class RunnableLock {
     private Object proceedLock;
     private volatile boolean isToProceed;
 
-    // Is anyone waiting on proceedLock
+    // Are we doing a wait() on proceedLock.
     private volatile boolean isWaiting;
 
     RunnableLock() {

File: heron/common/src/java/com/twitter/heron/common/network/HeronClient.java
Patch:
@@ -200,8 +200,6 @@ public void run() {
     }
 
     OutgoingPacket opk = new OutgoingPacket(rid, request);
-    System.out.println("socketChannelHelper " + socketChannelHelper);
-    System.out.println("OutgoingPacket " + opk);
     socketChannelHelper.sendPacket(opk);
   }
 

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -114,7 +114,6 @@ public class TMasterSink implements IMetricsSink {
   @Override
   @SuppressWarnings("unchecked")
   public void init(Map<String, Object> conf, SinkContext context) {
-    LOG.info("tmaster sink init");
     sinkConfig.putAll(conf);
 
     sinkContext = context;
@@ -185,7 +184,6 @@ public void run() {
 
   @Override
   public void processRecord(MetricsRecord record) {
-    LOG.info("tmaster sink processRecord");
     // Format it into TopologyMaster.PublishMetrics
 
     // The format of source is "host:port/componentName/instanceId"

File: heron/spi/src/java/com/twitter/heron/spi/common/Misc.java
Patch:
@@ -226,11 +226,9 @@ public static String substitute(Config config, String pathString) {
    * @return String string that gives the file system path
    */
   protected static String combinePaths(List<String> paths) {
-    LOG.info("[0]combinePaths " + paths.get(0));
     File file = new File(paths.get(0));
 
     for (int i = 1; i < paths.size(); i++) {
-      LOG.info("[" + i + "]combinePaths " + paths.get(i));
       file = new File(file, paths.get(i));
     }
 

File: heron/spi/src/java/com/twitter/heron/spi/utils/ShellUtils.java
Patch:
@@ -183,7 +183,7 @@ public static Process runASyncProcess(String command) {
 
   private static Process runASyncProcess(String[] command, File workingDirectory,
       Map<String, String> envs, String logFileUuid, boolean logStderr) {
-    LOG.log(Level.SEVERE, "$> {0}", Arrays.toString(command));
+    LOG.log(Level.FINE, "$> {0}", Arrays.toString(command));
 
     // the log file can help people to find out what happened between pb.start()
     // and the async process started

File: heron/spi/src/java/com/twitter/heron/spi/utils/TMasterUtils.java
Patch:
@@ -137,7 +137,7 @@ public static void transitionTopologyState(String topologyName,
 
     if (state == expectedState) {
       throw new TMasterException(String.format(
-          "Topology %s command received topology %s but already in %s state",
+          "Topology {0} command received topology {1} but already in {2} state",
           topologyStateControlCommand, topologyName, state));
     }
 

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManager.java
Patch:
@@ -105,7 +105,6 @@ protected boolean initTree() {
   // Make utils class protected for easy unit testing
   protected ListenableFuture<Boolean> setData(String path, byte[] data, boolean overwrite) {
     final SettableFuture<Boolean> future = SettableFuture.create();
-    LOG.info("setData: writeToFile " + path);
     boolean ret = FileUtils.writeToFile(path, data, overwrite);
     future.set(ret);
 

File: heron/uploaders/src/java/com/twitter/heron/uploader/s3/S3Uploader.java
Patch:
@@ -199,7 +199,7 @@ public URI uploadPackage() throws UploaderException {
       return resourceUrl.toURI();
     } catch (URISyntaxException e) {
       throw new UploaderException(
-          String.format("Could not convert URL %s to URI", resourceUrl));
+          String.format("Could not convert URL %s to URI", resourceUrl, e));
     }
   }
 

File: heron/uploaders/src/java/com/twitter/heron/uploader/s3/S3Uploader.java
Patch:
@@ -199,7 +199,7 @@ public URI uploadPackage() throws UploaderException {
       return resourceUrl.toURI();
     } catch (URISyntaxException e) {
       throw new UploaderException(
-          String.format("Could not convert URL %s to URI", resourceUrl, e));
+          String.format("Could not convert URL %s to URI", resourceUrl));
     }
   }
 

File: heron/spi/src/java/com/twitter/heron/spi/utils/TMasterUtils.java
Patch:
@@ -137,7 +137,7 @@ public static void transitionTopologyState(String topologyName,
 
     if (state == expectedState) {
       throw new TMasterException(String.format(
-          "Topology {0} command received topology {1} but already in {2} state",
+          "Topology %s command received topology %s but already in %s state",
           topologyStateControlCommand, topologyName, state));
     }
 

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.commons.cli.ParseException;
 
 import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.common.basics.FileUtils;
+import com.twitter.heron.common.basics.PackageType;
 import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.common.utils.logging.LoggingHelper;
 import com.twitter.heron.spi.common.ClusterConfig;
@@ -60,15 +60,15 @@ public class SubmitterMain {
   protected static Config topologyConfigs(
       String topologyPackage, String topologyBinaryFile, String topologyDefnFile,
       TopologyAPI.Topology topology) {
-    String pkgType = FileUtils.getPkgType(topologyBinaryFile);
+    PackageType packageType = PackageType.getPackageType(topologyBinaryFile);
 
     Config config = Config.newBuilder()
         .put(Keys.topologyId(), topology.getId())
         .put(Keys.topologyName(), topology.getName())
         .put(Keys.topologyDefinitionFile(), topologyDefnFile)
         .put(Keys.topologyPackageFile(), topologyPackage)
         .put(Keys.topologyBinaryFile(), topologyBinaryFile)
-        .put(Keys.topologyPackageType(), pkgType)
+        .put(Keys.topologyPackageType(), packageType)
         .build();
     return config;
   }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -186,7 +186,8 @@ protected Map<String, String> createAuroraProperties(PackingPlan packing) {
     auroraProperties.put("COMPONENT_RAMMAP", Runtime.componentRamMap(runtime));
     auroraProperties.put("COMPONENT_JVM_OPTS_IN_BASE64",
         formatJavaOpts(TopologyUtils.getComponentJvmOptions(topology)));
-    auroraProperties.put("TOPOLOGY_PACKAGE_TYPE", Context.topologyPackageType(config));
+    auroraProperties.put("TOPOLOGY_PACKAGE_TYPE",
+        Context.topologyPackageType(config).name().toLowerCase());
     auroraProperties.put("TOPOLOGY_BINARY_FILE",
         FileUtils.getBaseName(Context.topologyBinaryFile(config)));
     auroraProperties.put("HERON_SANDBOX_JAVA_HOME", Context.javaSandboxHome(config));

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronExecutorTaskTest.java
Patch:
@@ -116,7 +116,7 @@ private HeronExecutorTask getSpyOnHeronExecutorTask(REEFFileNames mockFiles) {
         "env",
         "package",
         "core",
-        "jar",
+        "topology.jar",
         "componentRamMap",
         false);
     return Mockito.spy(task);

File: heron/spi/src/java/com/twitter/heron/spi/common/Context.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.spi.common;
 
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.basics.PackageType;
 
 public class Context {
 
@@ -173,8 +174,8 @@ public static String topologyPackageFile(Config cfg) {
     return cfg.getStringValue(ConfigKeys.get("TOPOLOGY_PACKAGE_FILE"));
   }
 
-  public static String topologyPackageType(Config cfg) {
-    return cfg.getStringValue(ConfigKeys.get("TOPOLOGY_PACKAGE_TYPE"));
+  public static PackageType topologyPackageType(Config cfg) {
+    return cfg.getPackageType(ConfigKeys.get("TOPOLOGY_PACKAGE_TYPE"));
   }
 
   public static ByteAmount stmgrRam(Config cfg) {

File: heron/spi/src/java/com/twitter/heron/spi/common/Defaults.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.spi.common;
 
 import com.twitter.heron.common.basics.ByteAmount;
+import com.twitter.heron.common.basics.PackageType;
 
 public class Defaults {
 
@@ -133,8 +134,8 @@ public static String topologyPackageFile() {
     return ConfigDefaults.get("TOPOLOGY_PACKAGE_FILE");
   }
 
-  public static String topologyPackageType() {
-    return ConfigDefaults.get("TOPOLOGY_PACKAGE_TYPE");
+  public static PackageType topologyPackageType() {
+    return ConfigDefaults.getPackageType("TOPOLOGY_PACKAGE_TYPE");
   }
 
   public static ByteAmount stmgrRam() {

File: heron/spi/src/java/com/twitter/heron/spi/utils/SchedulerConfig.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.logging.Logger;
 
 import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.common.basics.FileUtils;
+import com.twitter.heron.common.basics.PackageType;
 import com.twitter.heron.spi.common.ClusterConfig;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
@@ -43,14 +43,14 @@ private SchedulerConfig() {
    */
   protected static Config topologyConfigs(String topologyBinaryFile,
                                           String topologyDefnFile, TopologyAPI.Topology topology) {
-    String pkgType = FileUtils.getPkgType(topologyBinaryFile);
+    PackageType packageType = PackageType.getPackageType(topologyBinaryFile);
 
     Config config = Config.newBuilder()
         .put(Keys.topologyId(), topology.getId())
         .put(Keys.topologyName(), topology.getName())
         .put(Keys.topologyDefinitionFile(), topologyDefnFile)
         .put(Keys.topologyBinaryFile(), topologyBinaryFile)
-        .put(Keys.topologyPackageType(), pkgType)
+        .put(Keys.topologyPackageType(), packageType)
         .build();
 
     return config;

File: heron/spi/src/java/com/twitter/heron/spi/utils/SchedulerUtils.java
Patch:
@@ -212,7 +212,7 @@ public static String[] executorCommandArgs(
     commands.add(Context.systemConfigSandboxFile(config));
     commands.add(Runtime.componentRamMap(runtime));
     commands.add(SchedulerUtils.encodeJavaOpts(TopologyUtils.getComponentJvmOptions(topology)));
-    commands.add(Context.topologyPackageType(config));
+    commands.add(Context.topologyPackageType(config).name().toLowerCase());
     commands.add(Context.topologyBinaryFile(config));
     commands.add(Context.javaSandboxHome(config));
     commands.add(shellPort);

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
+import com.twitter.heron.common.basics.PackageType;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.common.Keys;
@@ -33,7 +34,7 @@ private Config getDefaultConfig() {
         .put(Keys.cluster(), "cluster")
         .put(Keys.role(), "role")
         .put(Keys.topologyName(), "topology")
-        .put(Keys.topologyPackageType(), "tar")
+        .put(Keys.topologyPackageType(), PackageType.TAR)
         .put(Keys.topologyPackageFile(), "/tmp/something.tar.gz")
         .put(LocalFileSystemKeys.fileSystemDirectory(),
             LocalFileSystemDefaults.fileSystemDirectory())

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploaderTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.twitter.heron.common.basics.PackageType;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Keys;
 
@@ -47,7 +48,7 @@ public void before() throws Exception {
         .put(Keys.cluster(), "cluster")
         .put(Keys.role(), "role")
         .put(Keys.topologyName(), "topology")
-        .put(Keys.topologyPackageType(), "tar")
+        .put(Keys.topologyPackageType(), PackageType.TAR)
         .put(LocalFileSystemKeys.fileSystemDirectory(), fileSystemDirectory)
         .build();
   }

File: heron/spi/src/java/com/twitter/heron/spi/utils/PackingTestUtils.java
Patch:
@@ -89,10 +89,9 @@ public static PackingPlan.ContainerPlan testContainerPlan(int containerId,
     return new PackingPlan.ContainerPlan(containerId, instancePlans, resource);
   }
 
-  private static PackingPlan.InstancePlan testInstancePlan(
+  public static PackingPlan.InstancePlan testInstancePlan(
       String componentName, int instanceIndex) {
     Resource resource = new Resource(1.5, ByteAmount.fromGigabytes(2), ByteAmount.fromBytes(3));
     return new PackingPlan.InstancePlan(new InstanceId(componentName, instanceIndex, 1), resource);
   }
-
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonScheduler.java
Patch:
@@ -26,7 +26,6 @@
 
 import com.twitter.heron.proto.scheduler.Scheduler;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Constants;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.Resource;
@@ -120,8 +119,8 @@ protected String getTopologyConf(PackingPlan packing) {
       instance.put(MarathonConstants.ID, Integer.toString(i));
       instance.put(MarathonConstants.COMMAND, getExecutorCommand(i));
       instance.put(MarathonConstants.CPU, containerResource.getCpu());
-      instance.put(MarathonConstants.MEMORY, containerResource.getRam() / Constants.MB);
-      instance.put(MarathonConstants.DISK, containerResource.getDisk() / Constants.MB);
+      instance.put(MarathonConstants.MEMORY, containerResource.getRam().asMegabytes());
+      instance.put(MarathonConstants.DISK, containerResource.getDisk().asMegabytes());
       instance.set(MarathonConstants.PORT_DEFINITIONS, getPorts(mapper));
       instance.put(MarathonConstants.INSTANCES, 1);
       instance.set(MarathonConstants.LABELS, getLabels(mapper));

File: heron/simulator/tests/java/com/twitter/heron/simulator/utils/PhysicalPlanUtilTest.java
Patch:
@@ -39,6 +39,7 @@
 import com.twitter.heron.api.topology.TopologyContext;
 import com.twitter.heron.api.tuple.Fields;
 import com.twitter.heron.api.tuple.Tuple;
+import com.twitter.heron.common.basics.ByteAmount;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
 
@@ -110,8 +111,8 @@ public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
     conf.setDebug(true);
     conf.setMaxSpoutPending(10);
     conf.put(Config.TOPOLOGY_WORKER_CHILDOPTS, "-XX:+HeapDumpOnOutOfMemoryError");
-    conf.setComponentRam("word", 500 * 1024 * 1024);
-    conf.setComponentRam("exclaim", 1024 * 1024 * 1024);
+    conf.setComponentRam("word", ByteAmount.fromMegabytes(500));
+    conf.setComponentRam("exclaim",  ByteAmount.fromGigabytes(1));
     conf.setMessageTimeoutSecs(1);
 
     return topologyBuilder.createTopology().

File: heron/spi/src/java/com/twitter/heron/spi/packing/PackingPlanProtoSerializer.java
Patch:
@@ -58,7 +58,7 @@ private PackingPlans.InstancePlan.Builder builder(PackingPlan.InstancePlan insta
   private PackingPlans.Resource.Builder builder(Resource resource) {
     return PackingPlans.Resource.newBuilder()
         .setCpu(resource.getCpu())
-        .setRam(resource.getRam())
-        .setDisk(resource.getDisk());
+        .setRam(resource.getRam().asBytes())
+        .setDisk(resource.getDisk().asBytes());
   }
 }

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPackingTest.java
Patch:
@@ -586,7 +586,7 @@ public void testScaleDownx() throws Exception {
   /**
    * Test the scenario where the scaling down is requested
    */
-  // TODO @Test
+  // TODO @Test https://github.com/twitter/heron/issues/1560
   public void testScaleDownRemoveContainer() throws Exception {
     String topologyId = topology.getId();
 
@@ -603,7 +603,7 @@ public void testScaleDownRemoveContainer() throws Exception {
     // The padding percentage used in repack() must be <= one as used in pack(), otherwise we can't
     // reconstruct the PackingPlan, see https://github.com/twitter/heron/issues/1577
     PackingPlan initialPackingPlan = PackingTestHelper.addToTestPackingPlan(
-        topologyId, null, initialComponentInstances,
+        topologyId, null, PackingTestHelper.toContainerIdComponentNames(initialComponentInstances),
         ResourceCompliantRRPacking.DEFAULT_CONTAINER_PADDING_PERCENTAGE);
     AssertPacking.assertPackingPlan(topologyId, initialComponentInstances, initialPackingPlan);
 

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPacking.java
Patch:
@@ -83,7 +83,7 @@
  */
 public class ResourceCompliantRRPacking implements IPacking, IRepacking {
 
-  private static final int DEFAULT_CONTAINER_PADDING_PERCENTAGE = 10;
+  static final int DEFAULT_CONTAINER_PADDING_PERCENTAGE = 10;
   private static final int DEFAULT_NUMBER_INSTANCES_PER_CONTAINER = 4;
 
   private static final Logger LOG = Logger.getLogger(ResourceCompliantRRPacking.class.getName());

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronMasterDriver.java
Patch:
@@ -531,7 +531,7 @@ public void run() {
           tMasterErrorCounter.countDown();
           long counter = tMasterErrorCounter.getCount();
           if (counter > 0) {
-            LOG.log(Level.WARNING, "Trying to restart (attempts left {0}) TMaster executor", counter);
+            LOG.log(Level.WARNING, "Restarting TMaster, attempts left: {0}", counter);
             launch();
           }
         }

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/RuntimeManagerRunner.java
Patch:
@@ -194,7 +194,7 @@ boolean updateTopologyHandler(String topologyName, String newParallelism) {
             .setProposedPackingPlan(proposedPlan)
             .build();
 
-    LOG.info("Sending Updating topology request: " + updateTopologyRequest);
+    LOG.fine("Sending Updating topology request: " + updateTopologyRequest);
     if (!schedulerClient.updateTopology(updateTopologyRequest)) {
       LOG.log(Level.SEVERE, "Failed to update topology with Scheduler, updateTopologyRequest="
           + updateTopologyRequest);
@@ -279,6 +279,8 @@ PackingPlans.PackingPlan buildNewPackingPlan(PackingPlans.PackingPlan currentPro
       throw new IllegalArgumentException(
           "Failed to instantiate packing instance: " + repackingClass, e);
     }
+
+    LOG.info("Updating packing plan using " + repackingClass);
     try {
       packing.initialize(config, topology);
       PackingPlan packedPlan = packing.repack(currentPackingPlan, componentChanges);

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/UpdateTopologyManager.java
Patch:
@@ -296,8 +296,9 @@ public synchronized void run() {
             + "topology %s. Not reactivating", topologyName));
         cancel();
       } else {
-        logInfo("Couldn't fetch physical plan for topology %s. "
-            + " Will sleep and try again", topologyName);
+        logInfo("Couldn't fetch physical plan for topology %s. This is probably because stream "
+            + "managers are still registering with TMaster. Will sleep and try again",
+            topologyName);
       }
     }
   }

File: heron/spi/src/java/com/twitter/heron/spi/packing/InstanceId.java
Patch:
@@ -66,7 +66,7 @@ public int hashCode() {
 
   @Override
   public String toString() {
-    return String.format("Component Name: %s, Task Id: %d, Component Index: %d",
+    return String.format("{componentName: %s, taskId: %d, componentIndex: %d}",
         componentName, taskId, componentIndex);
   }
 }

File: heron/common/src/java/com/twitter/heron/common/network/HeronClient.java
Patch:
@@ -376,7 +376,7 @@ public void forceFlushWithBestEffort() {
 
   /////////////////////////////////////////////////////////
   // This is the interface that needs to be implemented by
-  // all Heron Servers.
+  // all Heron Clients.
   /////////////////////////////////////////////////////////
 
   // What action do you want to take when the client meets errors

File: heron/common/src/java/com/twitter/heron/common/network/HeronClient.java
Patch:
@@ -376,7 +376,7 @@ public void forceFlushWithBestEffort() {
 
   /////////////////////////////////////////////////////////
   // This is the interface that needs to be implemented by
-  // all Heron Servers.
+  // all Heron Clients.
   /////////////////////////////////////////////////////////
 
   // What action do you want to take when the client meets errors

File: heron/spi/src/java/com/twitter/heron/spi/utils/ShellUtils.java
Patch:
@@ -202,7 +202,7 @@ private static Process runASyncProcess(String[] command, File workingDirectory,
     // be guaranteed alive when children processing trying to flush to
     // parent processes's IO.
     ProcessBuilder pb = getProcessBuilder(false, command, workingDirectory, envs);
-    pb.redirectErrorStream();
+    pb.redirectErrorStream(true);
 
     if (logStderr) {
       String logFilePath = String.format("%s/%s-%s.stderr",

File: heron/spi/src/java/com/twitter/heron/spi/utils/ShellUtils.java
Patch:
@@ -202,7 +202,7 @@ private static Process runASyncProcess(String[] command, File workingDirectory,
     // be guaranteed alive when children processing trying to flush to
     // parent processes's IO.
     ProcessBuilder pb = getProcessBuilder(false, command, workingDirectory, envs);
-    pb.redirectErrorStream();
+    pb.redirectErrorStream(true);
 
     if (logStderr) {
       String logFilePath = String.format("%s/%s-%s.stderr",

File: integration-test/src/java/com/twitter/heron/integration_test/topology/basic_topology_one_task/BasicTopologyOneTask.java
Patch:
@@ -33,7 +33,7 @@ private BasicTopologyOneTask(String[] args) throws MalformedURLException {
   @Override
   protected TestTopologyBuilder buildTopology(TestTopologyBuilder builder) {
     builder.setSpout("ab-spout", new ABSpout(), 1);
-    builder.setBolt("identity-bolt", new IdentityBolt(new Fields("word")), 1)
+    builder.setBolt("identity-bolt", new IdentityBolt(new Fields("word")), 2)
         .shuffleGrouping("ab-spout");
     return builder;
   }

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -77,8 +77,8 @@ public void initialize(Config newConfig) {
 
       String newConnectionString = tunneledResults.first;
       if (newConnectionString.isEmpty()) {
-        LOG.warning("Cannot connect to tunnelHost: " + tunnelConfig.getTunnelHost());
-        throw new IllegalArgumentException("Bad connectionString: " + connectionString);
+        throw new IllegalArgumentException("Cannot connect to tunnelHost: "
+            + tunnelConfig.getTunnelHost() + " Bad connectionString: " + connectionString);
       }
 
       // Use the new connection string

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltOutputCollectorImpl.java
Patch:
@@ -109,8 +109,7 @@ public void emitDirect(
 
   @Override
   public void reportError(Throwable error) {
-    Exception currentStack = new Exception("Reporting an error in topology code", error);
-    LOG.log(Level.SEVERE, "Error stack trace ", currentStack);
+    LOG.log(Level.SEVERE, "Reporting an error in topology code ", error);
   }
 
   @Override

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -122,8 +122,7 @@ public void emitDirect(int taskId, String streamId, List<Object> tuple, Object m
   // Log the report error and also send the stack trace to metrics manager.
   @Override
   public void reportError(Throwable error) {
-    Exception currentStack = new Exception("Reporting an error in topology code", error);
-    LOG.log(Level.SEVERE, "Error stack trace ", currentStack);
+    LOG.log(Level.SEVERE, "Reporting an error in topology code ", error);
   }
 
 

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltOutputCollectorImpl.java
Patch:
@@ -108,8 +108,7 @@ public void emitDirect(
 
   @Override
   public void reportError(Throwable error) {
-    Exception currentStack = new Exception("Reporting an error in topology code", error);
-    LOG.log(Level.SEVERE, "Error stack trace ", currentStack);
+    LOG.log(Level.SEVERE, "Reporting an error in topology code ", error);
   }
 
   @Override

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/SpoutOutputCollectorImpl.java
Patch:
@@ -121,8 +121,7 @@ public void emitDirect(int taskId, String streamId, List<Object> tuple, Object m
   // Log the report error and also send the stack trace to metrics manager.
   @Override
   public void reportError(Throwable error) {
-    Exception currentStack = new Exception("Reporting an error in topology code", error);
-    LOG.log(Level.SEVERE, "Error stack trace ", currentStack);
+    LOG.log(Level.SEVERE, "Reporting an error in topology code ", error);
   }
 
 

File: heron/common/tests/java/com/twitter/heron/common/basics/FileUtilsTest.java
Patch:
@@ -70,7 +70,7 @@ public void testCopyFile() throws Exception {
   @Test
   public void testWriteToFile() throws Exception {
     String currentWorkingDir = Paths.get("").toAbsolutePath().normalize().toString();
-    Assert.assertFalse(FileUtils.writeToFile(currentWorkingDir, null, false));
+    Assert.assertFalse(FileUtils.writeToFile(currentWorkingDir, new byte[]{}, false));
 
     PowerMockito.mockStatic(Files.class);
     String randomString = UUID.randomUUID().toString();

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -108,7 +108,7 @@ public void testInitialize() throws Exception {
     // Verify curator client is invoked
     Mockito.verify(mockClient).start();
     Mockito.verify(mockClient).blockUntilConnected(Mockito.anyInt(), Mockito.any(TimeUnit.class));
-    Mockito.verify(mockClient, Mockito.times(6)).createContainers(Mockito.anyString());
+    Mockito.verify(mockClient, Mockito.times(7)).createContainers(Mockito.anyString());
 
     // Verify initTree is called
     Mockito.verify(spyStateManager).initTree();

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraContextTest.java
Patch:
@@ -23,13 +23,13 @@ public class AuroraContextTest {
 
   @Test
   public void testUsesConfigString() {
-    final String aurora_template = "/dir/test.aurora";
+    final String auroraTemplate = "/dir/test.aurora";
     Config config = Config.newBuilder()
-        .put(AuroraContext.JOB_TEMPLATE, aurora_template)
+        .put(AuroraContext.JOB_TEMPLATE, auroraTemplate)
         .put(ConfigKeys.get("HERON_CONF"), "/test")
         .build();
     Assert.assertEquals("Expected to use value from JOB_TEMPLATE config",
-        aurora_template, AuroraContext.getHeronAuroraPath(config));
+        auroraTemplate, AuroraContext.getHeronAuroraPath(config));
   }
 
   @Test

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/aurora/AuroraSchedulerTest.java
Patch:
@@ -91,7 +91,8 @@ public void testOnSchedule() throws Exception {
     Mockito.when(runtime.getStringValue(Keys.topologyName())).thenReturn(TOPOLOGY_NAME);
 
     Config mConfig = Mockito.mock(Config.class);
-    Mockito.when(mConfig.getStringValue(eq(AuroraContext.JOB_TEMPLATE), anyString())).thenReturn(AURORA_PATH);
+    Mockito.when(mConfig.getStringValue(eq(AuroraContext.JOB_TEMPLATE),
+        anyString())).thenReturn(AURORA_PATH);
 
     scheduler.initialize(mConfig, runtime);
 

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/local/LocalSchedulerTest.java
Patch:
@@ -58,6 +58,7 @@ public void after() throws Exception {
   @Test
   public void testClose() throws Exception {
     LocalScheduler localScheduler = new LocalScheduler();
+    localScheduler.initialize(Mockito.mock(Config.class), Mockito.mock(Config.class));
     // The MonitorService should started
     ExecutorService monitorService = localScheduler.getMonitorService();
     Assert.assertFalse(monitorService.isShutdown());

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -58,7 +58,8 @@ public class LocalScheduler implements IScheduler, IScalable {
   public void initialize(Config mConfig, Config mRuntime) {
     this.config = mConfig;
     this.runtime = mRuntime;
-    this.updateTopologyManager = new UpdateTopologyManager(runtime, Optional.<IScalable>of(this));
+    this.updateTopologyManager =
+        new UpdateTopologyManager(runtime, Optional.<IScalable>of(this));
   }
 
   @Override
@@ -75,7 +76,7 @@ public void close() {
    */
   @VisibleForTesting
   protected Process startExecutorProcess(int container) {
-    return ShellUtils.runASyncProcess(true,
+    return ShellUtils.runASyncProcess(
         getExecutorCommand(container),
         new File(LocalContext.workingDirectory(config)),
         Integer.toString(container));

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronExecutorTaskTest.java
Patch:
@@ -101,7 +101,8 @@ public void setsEnvironmentForExecutor() throws Exception {
         Mockito.eq(testCmd),
         Mockito.any(File.class),
         Mockito.eq(env),
-        Mockito.any(String.class));
+        Mockito.any(String.class),
+        Mockito.any(Boolean.class));
     spyTask.call(null);
     Mockito.verify(mockProcess).waitFor();
   }

File: heron/spi/tests/java/com/twitter/heron/spi/utils/ShellUtilsTest.java
Patch:
@@ -65,7 +65,7 @@ public void testRunAsyncProcess() throws IOException {
     StringBuilder stderr = new StringBuilder();
     // Sleep 1 second and echo some text.
     Process p = ShellUtils.runASyncProcess(
-        true, String.format("sleep 1 && echo %s", testString), new File("."));
+        String.format("sleep 1 && echo %s", testString));
     // Test process is running and input stream is empty
     wait(10, TimeUnit.MILLISECONDS);
     Assert.assertEquals(0, p.getInputStream().available());

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -45,6 +45,7 @@
 import com.twitter.heron.common.basics.Pair;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Keys;
+import com.twitter.heron.spi.utils.NetworkUtils;
 import com.twitter.heron.statemgr.zookeeper.ZkContext;
 
 /**
@@ -95,7 +96,7 @@ public void testInitialize() throws Exception {
     Mockito.doReturn(mockClient)
         .when(spyStateManager).getCuratorClient();
     Mockito.doReturn(new Pair<String, List<Process>>(TUNNEL_STRING, new ArrayList<Process>()))
-        .when(spyStateManager).setupZkTunnel();
+        .when(spyStateManager).setupZkTunnel(Mockito.any(NetworkUtils.TunnelConfig.class));
     Mockito.doReturn(true)
         .when(mockClient).blockUntilConnected(Mockito.anyInt(), Mockito.any(TimeUnit.class));
 
@@ -131,7 +132,7 @@ public void testClose() throws Exception {
     Mockito.doReturn(mockClient)
         .when(spyStateManager).getCuratorClient();
     Mockito.doReturn(new Pair<>(TUNNEL_STRING, tunnelProcesses))
-        .when(spyStateManager).setupZkTunnel();
+        .when(spyStateManager).setupZkTunnel(Mockito.any(NetworkUtils.TunnelConfig.class));
     Mockito.doReturn(true)
         .when(mockClient).blockUntilConnected(Mockito.anyInt(), Mockito.any(TimeUnit.class));
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -262,7 +262,7 @@ public boolean onUpdate(Scheduler.UpdateTopologyRequest request) {
   public void addContainers(Set<PackingPlan.ContainerPlan> containers) {
     synchronized (processToContainer) {
       for (PackingPlan.ContainerPlan container : containers) {
-        if (processToContainer.containsKey(container.getId())) {
+        if (processToContainer.values().contains(container.getId())) {
           throw new RuntimeException(String.format("Found active container for %s, "
               + "cannot launch a duplicate container.", container.getId()));
         }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronDriverConfiguration.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.scheduler.yarn;
 
 import org.apache.reef.client.DriverConfiguration;
+import org.apache.reef.runtime.yarn.client.YarnDriverConfiguration;
 import org.apache.reef.tang.formats.ConfigurationModule;
 import org.apache.reef.tang.formats.ConfigurationModuleBuilder;
 import org.apache.reef.tang.formats.OptionalParameter;
@@ -56,5 +57,6 @@ public class HeronDriverConfiguration extends ConfigurationModuleBuilder {
       .bindNamedParameter(Role.class, ROLE)
       .bindNamedParameter(HttpPort.class, HTTP_PORT)
       .bindNamedParameter(VerboseLogMode.class, VERBOSE)
+      .merge(YarnDriverConfiguration.CONF)
       .build();
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java
Patch:
@@ -57,8 +57,7 @@ public void initialize(Config mConfig, Config mRuntime) {
     this.config = mConfig;
     this.runtime = mRuntime;
     this.controller = getController();
-    this.updateTopologyManager =
-        new UpdateTopologyManager(runtime, Optional.<IScalable>of(this));
+    this.updateTopologyManager = new UpdateTopologyManager(runtime, Optional.<IScalable>of(this));
   }
 
   /**

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -126,7 +126,9 @@ public void run() {
           // restart the container
           startExecutor(processToContainer.remove(containerExecutor));
         } catch (InterruptedException e) {
-          LOG.log(Level.SEVERE, "Process is interrupted: ", e);
+          if (!isTopologyKilled) {
+            LOG.log(Level.SEVERE, "Process is interrupted: ", e);
+          }
         }
       }
     };

File: heron/packing/tests/java/com/twitter/heron/packing/AssertPacking.java
Patch:
@@ -48,7 +48,7 @@ public static void assertContainers(Set<PackingPlan.ContainerPlan> containerPlan
     for (PackingPlan.ContainerPlan containerPlan : containerPlans) {
       if (notExpectedContainerRam != null) {
         Assert.assertNotEquals(
-            notExpectedContainerRam, (Long) containerPlan.getResource().getRam());
+            notExpectedContainerRam, (Long) containerPlan.getRequiredResource().getRam());
       }
       for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
         expectedInstanceIndecies.add(expectedInstanceIndex++);

File: heron/packing/tests/java/com/twitter/heron/packing/binpacking/FirstFitDecreasingPackingTest.java
Patch:
@@ -173,17 +173,17 @@ public void testContainerRequestedResources() throws Exception {
       Assert.assertEquals(Math.round(totalInstances * instanceDefaultResources.getCpu()
               + (DEFAULT_CONTAINER_PADDING / 100.0 * totalInstances
               * instanceDefaultResources.getCpu())),
-          (long) containerPlan.getResource().getCpu());
+          (long) containerPlan.getRequiredResource().getCpu());
 
       Assert.assertEquals(totalInstances * instanceDefaultResources.getRam()
               + (long) (DEFAULT_CONTAINER_PADDING / 100.0 * totalInstances
               * instanceDefaultResources.getRam()),
-          containerPlan.getResource().getRam());
+          containerPlan.getRequiredResource().getRam());
 
       Assert.assertEquals(totalInstances * instanceDefaultResources.getDisk()
               + (long) (DEFAULT_CONTAINER_PADDING / 100.0 * totalInstances
               * instanceDefaultResources.getDisk()),
-          containerPlan.getResource().getDisk());
+          containerPlan.getRequiredResource().getDisk());
 
       // All instances' resource requirement should be equal
       // So the size of set should be 1

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPackingTest.java
Patch:
@@ -176,15 +176,15 @@ public void testContainerRequestedResourcesSingleContainer() throws Exception {
         : packingPlanExplicitResourcesConfig.getContainers()) {
       Assert.assertEquals(Math.round(totalInstances * instanceCpuDefault
               + (DEFAULT_CONTAINER_PADDING / 100.0) * totalInstances * instanceCpuDefault),
-          (long) containerPlan.getResource().getCpu());
+          (long) containerPlan.getRequiredResource().getCpu());
 
       Assert.assertEquals(totalInstances * instanceRamDefault
               + (long) ((DEFAULT_CONTAINER_PADDING / 100.0) * totalInstances * instanceRamDefault),
-          containerPlan.getResource().getRam());
+          containerPlan.getRequiredResource().getRam());
 
       Assert.assertEquals(totalInstances * instanceDiskDefault
               + (long) ((DEFAULT_CONTAINER_PADDING / 100.0) * totalInstances * instanceDiskDefault),
-          containerPlan.getResource().getDisk());
+          containerPlan.getRequiredResource().getDisk());
 
       // All instances' resource requirement should be equal
       // So the size of set should be 1

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronMasterDriver.java
Patch:
@@ -155,7 +155,7 @@ void scheduleTMasterContainer() throws ContainerAllocationException {
   void scheduleHeronWorkers(PackingPlan topologyPacking) throws ContainerAllocationException {
     this.packing = topologyPacking;
     for (ContainerPlan containerPlan : topologyPacking.getContainers()) {
-      Resource reqResource = containerPlan.getResource();
+      Resource reqResource = containerPlan.getRequiredResource();
 
       int mem = getMemInMBForExecutor(reqResource);
       int cores = getCpuForExecutor(reqResource);
@@ -191,7 +191,7 @@ public void restartWorker(int id) throws ContainerAllocationException {
         throw new IllegalArgumentException(
             String.format("There is no container for %s in packing plan.", id));
       }
-      Resource resource = containerPlan.get().getResource();
+      Resource resource = containerPlan.get().getRequiredResource();
       worker = Optional.of(
           new HeronWorker(id, getCpuForExecutor(resource), getMemInMBForExecutor(resource)));
     } else {

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/ScribeSink.java
Patch:
@@ -263,7 +263,8 @@ private String makeJSON(MetricsRecord record) {
   }
 
   private String connectionString() {
-    return String.format("<%s:%d>", config.get(KEY_SCRIBE_HOST), config.get(KEY_SCRIBE_PORT));
+    return String.format("<%s:%d>", config.get(KEY_SCRIBE_HOST),
+            TypeUtils.getInteger(config.get(KEY_SCRIBE_PORT)));
   }
 
   private void flushCounters() {

File: heron/packing/tests/java/com/twitter/heron/packing/AssertPacking.java
Patch:
@@ -52,7 +52,7 @@ public static void assertContainers(Set<PackingPlan.ContainerPlan> containerPlan
       }
       for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
         expectedInstanceIndecies.add(expectedInstanceIndex++);
-        foundInstanceIndecies.add(PackingUtils.getGlobalInstanceIndex(instancePlan.getId()));
+        foundInstanceIndecies.add(instancePlan.getTaskId());
         if (instancePlan.getComponentName().equals(boltName)) {
           Assert.assertEquals(expectedBoltRam, instancePlan.getResource().getRam());
           boltFound = true;

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPackingTest.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.packing.AssertPacking;
-import com.twitter.heron.packing.PackingUtils;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Constants;
@@ -45,8 +44,8 @@ public class ResourceCompliantRRPackingTest {
 
   private int countComponent(String component, Set<PackingPlan.InstancePlan> instances) {
     int count = 0;
-    for (PackingPlan.InstancePlan pair : instances) {
-      if (component.equals(PackingUtils.getComponentName(pair.getId()))) {
+    for (PackingPlan.InstancePlan instancePlan : instances) {
+      if (component.equals(instancePlan.getComponentName())) {
         count++;
       }
     }

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/RoundRobinPackingTest.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.packing.AssertPacking;
-import com.twitter.heron.packing.PackingUtils;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Constants;
@@ -282,7 +281,7 @@ private static void assertComponentCount(
       PackingPlan.ContainerPlan containerPlan, String componentName, int expectedCount) {
     int count = 0;
     for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
-      if (componentName.equals(PackingUtils.getComponentName(instancePlan.getId()))) {
+      if (componentName.equals(instancePlan.getComponentName())) {
         count++;
       }
     }

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.twitter.heron.scheduler.server.SchedulerServer;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.ConfigKeys;
+import com.twitter.heron.spi.packing.InstanceId;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.PackingPlanProtoSerializer;
 import com.twitter.heron.spi.packing.Resource;
@@ -122,7 +123,8 @@ public void setUp() throws Exception {
   // TODO reuse PackingTestUtils.createTestProtoPackingPlan once PR#1321 is merged
   private SettableFuture<PackingPlans.PackingPlan> getTestPacking() {
     Set<PackingPlan.InstancePlan> instances = new HashSet<>();
-    instances.add(new PackingPlan.InstancePlan("1:1:1:1", "dummy", new Resource(1, 1, 1)));
+    instances.add(
+        new PackingPlan.InstancePlan(new InstanceId("dummy", 1, 1), new Resource(1, 1, 1)));
     Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
     containers.add(new PackingPlan.ContainerPlan(1, instances, new Resource(1, 1, 1)));
     PackingPlan packingPlan = new PackingPlan("packing-id", containers);

File: heron/spi/src/java/com/twitter/heron/spi/packing/PackingPlanProtoSerializer.java
Patch:
@@ -45,8 +45,9 @@ private PackingPlans.ContainerPlan.Builder builder(PackingPlan.ContainerPlan con
 
   private PackingPlans.InstancePlan.Builder builder(PackingPlan.InstancePlan instancePlan) {
     return PackingPlans.InstancePlan.newBuilder()
-        .setId(instancePlan.getId())
         .setComponentName(instancePlan.getComponentName())
+        .setTaskId(instancePlan.getTaskId())
+        .setComponentIndex(instancePlan.getComponentIndex())
         .setResource(builder(instancePlan.getResource()));
   }
 

File: heron/packing/tests/java/com/twitter/heron/packing/AssertPacking.java
Patch:
@@ -52,7 +52,7 @@ public static void assertContainers(Set<PackingPlan.ContainerPlan> containerPlan
       }
       for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
         expectedInstanceIndecies.add(expectedInstanceIndex++);
-        foundInstanceIndecies.add(PackingUtils.getGlobalInstanceIndex(instancePlan.getId()));
+        foundInstanceIndecies.add(instancePlan.getTaskId());
         if (instancePlan.getComponentName().equals(boltName)) {
           Assert.assertEquals(expectedBoltRam, instancePlan.getResource().getRam());
           boltFound = true;

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/ResourceCompliantRRPackingTest.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.packing.AssertPacking;
-import com.twitter.heron.packing.PackingUtils;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Constants;
@@ -45,8 +44,8 @@ public class ResourceCompliantRRPackingTest {
 
   private int countComponent(String component, Set<PackingPlan.InstancePlan> instances) {
     int count = 0;
-    for (PackingPlan.InstancePlan pair : instances) {
-      if (component.equals(PackingUtils.getComponentName(pair.getId()))) {
+    for (PackingPlan.InstancePlan instancePlan : instances) {
+      if (component.equals(instancePlan.getComponentName())) {
         count++;
       }
     }

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/RoundRobinPackingTest.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.packing.AssertPacking;
-import com.twitter.heron.packing.PackingUtils;
 import com.twitter.heron.spi.common.ClusterDefaults;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Constants;
@@ -282,7 +281,7 @@ private static void assertComponentCount(
       PackingPlan.ContainerPlan containerPlan, String componentName, int expectedCount) {
     int count = 0;
     for (PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {
-      if (componentName.equals(PackingUtils.getComponentName(instancePlan.getId()))) {
+      if (componentName.equals(instancePlan.getComponentName())) {
         count++;
       }
     }

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -37,6 +37,7 @@
 import com.twitter.heron.scheduler.server.SchedulerServer;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.ConfigKeys;
+import com.twitter.heron.spi.packing.InstanceId;
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.packing.PackingPlanProtoSerializer;
 import com.twitter.heron.spi.packing.Resource;
@@ -122,7 +123,8 @@ public void setUp() throws Exception {
   // TODO reuse PackingTestUtils.createTestProtoPackingPlan once PR#1321 is merged
   private SettableFuture<PackingPlans.PackingPlan> getTestPacking() {
     Set<PackingPlan.InstancePlan> instances = new HashSet<>();
-    instances.add(new PackingPlan.InstancePlan("1:1:1:1", "dummy", new Resource(1, 1, 1)));
+    instances.add(
+        new PackingPlan.InstancePlan(new InstanceId("dummy", 1, 1), new Resource(1, 1, 1)));
     Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
     containers.add(new PackingPlan.ContainerPlan(1, instances, new Resource(1, 1, 1)));
     PackingPlan packingPlan = new PackingPlan("packing-id", containers);

File: heron/spi/src/java/com/twitter/heron/spi/packing/PackingPlanProtoSerializer.java
Patch:
@@ -45,8 +45,9 @@ private PackingPlans.ContainerPlan.Builder builder(PackingPlan.ContainerPlan con
 
   private PackingPlans.InstancePlan.Builder builder(PackingPlan.InstancePlan instancePlan) {
     return PackingPlans.InstancePlan.newBuilder()
-        .setId(instancePlan.getId())
         .setComponentName(instancePlan.getComponentName())
+        .setTaskId(instancePlan.getTaskId())
+        .setComponentIndex(instancePlan.getComponentIndex())
         .setResource(builder(instancePlan.getResource()));
   }
 

File: integration-test/src/java/com/twitter/heron/integration_test/core/LocalAggregatorBolt.java
Patch:
@@ -50,9 +50,11 @@ public void finishBatch() {
   public void prepare(Map<String, Object> map,
                       TopologyContext topologyContext,
                       OutputCollector outputCollector) {
+    LOG.info("Preparing to write tuples to file: " + localFilePath);
     try {
       File outputFile = new File(localFilePath);
       if (!outputFile.exists()) {
+        LOG.info("Creating new file to write tuples to: " + localFilePath);
         outputFile.createNewFile();
       }
       bw = new BufferedWriter(
@@ -76,6 +78,7 @@ public void prepare(Map<String, Object> map,
   public void execute(Tuple tuple) {
     try {
       String data = tuple.getString(0);
+      LOG.info("Write tuple date to output file: " + data);
       bw.write(data);
       bw.newLine();
     } catch (IOException e) {

File: tools/java/src/com/twitter/bazel/checkstyle/JavaCheckstyle.java
Patch:
@@ -94,7 +94,7 @@ public static void main(String[] args) throws IOException {
   private static void checkStyle(String[] files, String config) throws IOException {
     if (files.length == 0) {
       LOG.fine("No java files found by checkstyle");
-      return ;
+      return;
     }
 
     LOG.fine(files.length + " java files found by checkstyle");
@@ -120,7 +120,8 @@ private static String[] getApacheSourceFiles(String extraActionFile) {
     ));
   }
 
-  private static String[] getSourceFiles(String extraActionFile, Predicate<String> predicate) {
+  private static String[] getSourceFiles(String extraActionFile,
+                                         Predicate<CharSequence> predicate) {
     ExtraActionInfo info = ExtraActionUtils.getExtraActionInfo(extraActionFile);
     JavaCompileInfo jInfo = info.getExtension(JavaCompileInfo.javaCompileInfo);
 

File: tools/java/src/com/twitter/bazel/checkstyle/JavaCheckstyle.java
Patch:
@@ -94,7 +94,7 @@ public static void main(String[] args) throws IOException {
   private static void checkStyle(String[] files, String config) throws IOException {
     if (files.length == 0) {
       LOG.fine("No java files found by checkstyle");
-      return ;
+      return;
     }
 
     LOG.fine(files.length + " java files found by checkstyle");
@@ -120,7 +120,8 @@ private static String[] getApacheSourceFiles(String extraActionFile) {
     ));
   }
 
-  private static String[] getSourceFiles(String extraActionFile, Predicate<String> predicate) {
+  private static String[] getSourceFiles(String extraActionFile,
+                                         Predicate<CharSequence> predicate) {
     ExtraActionInfo info = ExtraActionUtils.getExtraActionInfo(extraActionFile);
     JavaCompileInfo jInfo = info.getExtension(JavaCompileInfo.javaCompileInfo);
 

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/BrokerHosts.java
Patch:
@@ -6,9 +6,9 @@
  * to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at
- *
+ * <p>
  * http://www.apache.org/licenses/LICENSE-2.0
- *
+ * <p>
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: heron/storm/src/java/backtype/storm/Config.java
Patch:
@@ -286,7 +286,8 @@ public class Config extends com.twitter.heron.api.Config {
   /**
    * The connection timeout for clients to ZooKeeper.
    */
-  public static final String STORM_ZOOKEEPER_CONNECTION_TIMEOUT = "storm.zookeeper.connection.timeout";
+  public static final String STORM_ZOOKEEPER_CONNECTION_TIMEOUT =
+      "storm.zookeeper.connection.timeout";
 
   /**
    * The number of times to retry a Zookeeper operation.

File: contrib/kafka-spout/src/java/org/apache/storm/kafka/ByteBufferSerializer.java
Patch:
@@ -17,12 +17,12 @@
  */
 package org.apache.storm.kafka;
 
-import org.apache.storm.utils.Utils;
-import org.apache.kafka.common.serialization.Serializer;
-
 import java.nio.ByteBuffer;
 import java.util.Map;
 
+import org.apache.kafka.common.serialization.Serializer;
+import org.apache.storm.utils.Utils;
+
 public class ByteBufferSerializer implements Serializer<ByteBuffer> {
   @Override
   public void configure(Map<String, ?> map, boolean b) {

File: contrib/kafka-spout/tests/java/org/apache/storm/kafka/TestStringScheme.java
Patch:
@@ -17,11 +17,10 @@
  */
 package org.apache.storm.kafka;
 
-import org.junit.Test;
-
-import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 
 public class TestStringScheme {

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java
Patch:
@@ -43,7 +43,6 @@
 import com.twitter.heron.spi.common.Keys;
 import com.twitter.heron.spi.packing.IPacking;
 import com.twitter.heron.spi.packing.PackingPlan;
-import com.twitter.heron.spi.packing.Resource;
 import com.twitter.heron.spi.scheduler.ILauncher;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.utils.LauncherUtils;
@@ -129,7 +128,6 @@ private static Config createRunnerRuntime() throws Exception {
         new HashSet<PackingPlan.ContainerPlan>());
     Mockito.when(packingPlan.getComponentRamDistribution()).thenReturn("ramdist");
     Mockito.when(packingPlan.getId()).thenReturn("packing_plan_id");
-    Mockito.when(packingPlan.getResource()).thenReturn(new Resource(0, 0, 0));
     Mockito.when(packing.pack()).thenReturn(packingPlan);
     Mockito.when(packingPlan.getInstanceDistribution()).thenReturn(MOCK_PACKING_STRING);
 

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -125,7 +125,7 @@ private SettableFuture<PackingPlans.PackingPlan> getTestPacking() {
     instances.add(new PackingPlan.InstancePlan("1:1:1:1", "dummy", new Resource(1, 1, 1)));
     Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
     containers.add(new PackingPlan.ContainerPlan(1, instances, new Resource(1, 1, 1)));
-    PackingPlan packingPlan = new PackingPlan("packing-id", containers, new Resource(1, 1, 1));
+    PackingPlan packingPlan = new PackingPlan("packing-id", containers);
     final SettableFuture<PackingPlans.PackingPlan> future = SettableFuture.create();
     future.set(new PackingPlanProtoSerializer().toProto(packingPlan));
     return future;

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/mesos/MesosSchedulerTest.java
Patch:
@@ -132,8 +132,7 @@ public void testGetBaseContainer() throws Exception {
 
     Set<PackingPlan.ContainerPlan> containerPlans = new HashSet<>();
     containerPlans.add(containerPlan);
-    PackingPlan packingPlan = new PackingPlan(TOPOLOGY_NAME, containerPlans, containerResources);
-
+    PackingPlan packingPlan = new PackingPlan(TOPOLOGY_NAME, containerPlans);
 
     BaseContainer container = scheduler.getBaseContainer(0, packingPlan);
 

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/DriverOnLocalReefTest.java
Patch:
@@ -115,7 +115,7 @@ public void onNext(StartTime startTime) {
           driver.scheduleTMasterContainer();
           Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
           addContainer(1, 1.0, 512L, containers);
-          PackingPlan packing = new PackingPlan("packingId", containers, null);
+          PackingPlan packing = new PackingPlan("packingId", containers);
           driver.scheduleHeronWorkers(packing);
           counter.await(1, TimeUnit.SECONDS);
         } catch (InterruptedException e) {

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronMasterDriverTest.java
Patch:
@@ -89,7 +89,7 @@ public void requestsEvaluatorsForWorkers() throws Exception {
     addContainer(1, 2.0, 2048L, containers);
     addContainer(2, 4.0, 2050L, containers);
 
-    PackingPlan packing = new PackingPlan("packingId", containers, null);
+    PackingPlan packing = new PackingPlan("packingId", containers);
     spyDriver.scheduleHeronWorkers(packing);
     Mockito.verify(mockEvaluator1, Mockito.timeout(1000).times(1)).submitContext(mockConfig);
     Mockito.verify(mockEvaluator2, Mockito.timeout(1000).times(1)).submitContext(mockConfig);
@@ -199,7 +199,7 @@ public void handlesFailedWorkerContainer() throws Exception {
 
     Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
     addContainer(1, 1.0, 1024L, containers);
-    PackingPlan packing = new PackingPlan("packingId", containers, new Resource(1.5, 2, 3));
+    PackingPlan packing = new PackingPlan("packingId", containers);
     spyDriver.scheduleHeronWorkers(packing);
     Mockito.verify(mockWorkerEvaluator, Mockito.timeout(1000).times(1))
         .submitContext(Mockito.any(Configuration.class));

File: heron/spi/src/java/com/twitter/heron/spi/packing/PackingPlanProtoSerializer.java
Patch:
@@ -22,8 +22,7 @@ public class PackingPlanProtoSerializer {
 
   public PackingPlans.PackingPlan toProto(PackingPlan packingPlan) {
     PackingPlans.PackingPlan.Builder builder = PackingPlans.PackingPlan.newBuilder()
-        .setId(packingPlan.getId())
-        .setResource(builder(packingPlan.getResource()));
+        .setId(packingPlan.getId());
 
     for (PackingPlan.ContainerPlan containerPlan : packingPlan.getContainers()) {
       builder.addContainerPlans(builder(containerPlan));

File: heron/spi/tests/java/com/twitter/heron/spi/packing/PackingPlanTest.java
Patch:
@@ -58,7 +58,7 @@ private static PackingPlan generatePacking(Map<Integer, List<String>> basePackin
       containerPlans.add(containerPlan);
     }
 
-    return new PackingPlan("", containerPlans, resource);
+    return new PackingPlan("", containerPlans);
   }
 
   @Test

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronExecutorTask.java
Patch:
@@ -75,7 +75,7 @@ public class HeronExecutorTask implements Task {
 
   @Inject
   public HeronExecutorTask(final REEFFileNames fileNames,
-                           @Parameter(HeronExecutorId.class) String heronExecutorId,
+                           @Parameter(HeronExecutorId.class) int heronExecutorId,
                            @Parameter(Cluster.class) String cluster,
                            @Parameter(Role.class) String role,
                            @Parameter(TopologyName.class) String topologyName,
@@ -86,7 +86,7 @@ public HeronExecutorTask(final REEFFileNames fileNames,
                            @Parameter(PackedPlan.class) String packedPlan,
                            @Parameter(ComponentRamMap.class) String componentRamMap,
                            @Parameter(VerboseLogMode.class) boolean verboseMode) {
-    this.heronExecutorId = Integer.valueOf(heronExecutorId);
+    this.heronExecutorId = heronExecutorId;
     this.cluster = cluster;
     this.role = role;
     this.topologyName = topologyName;

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronExecutorTaskTest.java
Patch:
@@ -108,7 +108,7 @@ public void setsEnvironmentForExecutor() throws Exception {
 
   private HeronExecutorTask getSpyOnHeronExecutorTask(REEFFileNames mockFiles) {
     HeronExecutorTask task = new HeronExecutorTask(mockFiles,
-        "5",
+        5,
         "cluster",
         "role",
         "testTopology",

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -124,7 +124,7 @@ private SettableFuture<PackingPlans.PackingPlan> getTestPacking() {
     Set<PackingPlan.InstancePlan> instances = new HashSet<>();
     instances.add(new PackingPlan.InstancePlan("1:1:1:1", "dummy", new Resource(1, 1, 1)));
     Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
-    containers.add(new PackingPlan.ContainerPlan("1", instances, new Resource(1, 1, 1)));
+    containers.add(new PackingPlan.ContainerPlan(1, instances, new Resource(1, 1, 1)));
     PackingPlan packingPlan = new PackingPlan("packing-id", containers, new Resource(1, 1, 1));
     final SettableFuture<PackingPlans.PackingPlan> future = SettableFuture.create();
     future.set(new PackingPlanProtoSerializer().toProto(packingPlan));

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronConfigurationOptions.java
Patch:
@@ -59,7 +59,7 @@ public class HttpPort implements Name<Integer> {
   }
 
   @NamedParameter(doc = "Heron Executors Id, 0 = TM, 1 <= worker", default_value = "0")
-  public class HeronExecutorId implements Name<String> {
+  public class HeronExecutorId implements Name<Integer> {
   }
 
   @NamedParameter(doc = "verbose logs", default_value = "false")

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronTaskConfiguration.java
Patch:
@@ -42,7 +42,7 @@ public class HeronTaskConfiguration extends ConfigurationModuleBuilder {
   public static final RequiredParameter<String> ENV = new RequiredParameter<>();
   public static final RequiredParameter<String> PACKED_PLAN = new RequiredParameter<>();
   public static final RequiredParameter<String> COMPONENT_RAM_MAP = new RequiredParameter<>();
-  public static final RequiredParameter<String> CONTAINER_ID = new RequiredParameter<>();
+  public static final RequiredParameter<Integer> CONTAINER_ID = new RequiredParameter<>();
   public static final OptionalParameter<Boolean> VERBOSE = new OptionalParameter<>();
 
   public static final ConfigurationModule CONF = new HeronTaskConfiguration()

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/YarnScheduler.java
Patch:
@@ -73,7 +73,7 @@ public boolean onRestart(RestartTopologyRequest request) {
       if (containerId == -1) {
         HeronMasterDriverProvider.getInstance().restartTopology();
       } else {
-        HeronMasterDriverProvider.getInstance().restartWorker(String.valueOf(containerId));
+        HeronMasterDriverProvider.getInstance().restartWorker(containerId);
       }
       return true;
     } catch (HeronMasterDriver.ContainerAllocationException e) {

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/mesos/MesosSchedulerTest.java
Patch:
@@ -128,7 +128,7 @@ public void testGetBaseContainer() throws Exception {
     Resource containerResources = new Resource(CPU, MEM, DISK);
     PackingPlan.ContainerPlan containerPlan =
         new PackingPlan.ContainerPlan(
-            "id", new HashSet<PackingPlan.InstancePlan>(), containerResources);
+            0, new HashSet<PackingPlan.InstancePlan>(), containerResources);
 
     Set<PackingPlan.ContainerPlan> containerPlans = new HashSet<>();
     containerPlans.add(containerPlan);

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/DriverOnLocalReefTest.java
Patch:
@@ -98,7 +98,7 @@ static class TestDriver {
       driver = new HeronMasterDriver(requestor, null, "", "", "", "", null, null, null, 0, false);
     }
 
-    private void addContainer(String id,
+    private void addContainer(int id,
                               double cpu,
                               long mem,
                               Set<PackingPlan.ContainerPlan> containers) {
@@ -114,7 +114,7 @@ public void onNext(StartTime startTime) {
           counter = new CountDownLatch(2);
           driver.scheduleTMasterContainer();
           Set<PackingPlan.ContainerPlan> containers = new HashSet<>();
-          addContainer("1", 1.0, 512L, containers);
+          addContainer(1, 1.0, 512L, containers);
           PackingPlan packing = new PackingPlan("packingId", containers, null);
           driver.scheduleHeronWorkers(packing);
           counter.await(1, TimeUnit.SECONDS);

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/YarnSchedulerTest.java
Patch:
@@ -23,10 +23,10 @@
 
 public class YarnSchedulerTest {
   @Test
-  public void delegatesToDriverOnSchedule() {
+  public void delegatesToDriverOnSchedule() throws Exception {
     HeronMasterDriver mockHeronDriver = Mockito.mock(HeronMasterDriver.class);
     HeronMasterDriverProvider.setInstance(mockHeronDriver);
-    Mockito.when(mockHeronDriver.scheduleTMasterContainer()).thenReturn(true);
+    Mockito.doNothing().when(mockHeronDriver).scheduleTMasterContainer();
 
     IScheduler scheduler = new YarnScheduler();
     PackingPlan mockPacking = Mockito.mock(PackingPlan.class);

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManagerTest.java
Patch:
@@ -107,7 +107,7 @@ public void testInitialize() throws Exception {
     // Verify curator client is invoked
     Mockito.verify(mockClient).start();
     Mockito.verify(mockClient).blockUntilConnected(Mockito.anyInt(), Mockito.any(TimeUnit.class));
-    Mockito.verify(mockClient, Mockito.times(5)).createContainers(Mockito.anyString());
+    Mockito.verify(mockClient, Mockito.times(6)).createContainers(Mockito.anyString());
 
     // Verify initTree is called
     Mockito.verify(spyStateManager).initTree();

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -66,7 +66,9 @@ public void close() {
    */
   protected Process startExecutorProcess(int container) {
     return ShellUtils.runASyncProcess(true,
-        getExecutorCommand(container), new File(LocalContext.workingDirectory(config)));
+        getExecutorCommand(container),
+        new File(LocalContext.workingDirectory(config)),
+        Integer.toString(container));
   }
 
   /**

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronExecutorTaskTest.java
Patch:
@@ -98,10 +98,10 @@ public void setsEnvironmentForExecutor() throws Exception {
     PowerMockito.doReturn(mockProcess).when(
         ShellUtils.class,
         "runASyncProcess",
-        Mockito.eq(true),
         Mockito.eq(testCmd),
         Mockito.any(File.class),
-        Mockito.eq(env));
+        Mockito.eq(env),
+        Mockito.any(String.class));
     spyTask.call(null);
     Mockito.verify(mockProcess).waitFor();
   }

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/YarnSchedulerTest.java
Patch:
@@ -17,17 +17,16 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
 
 import com.twitter.heron.spi.packing.PackingPlan;
 import com.twitter.heron.spi.scheduler.IScheduler;
 
 public class YarnSchedulerTest {
   @Test
-  @PrepareForTest(HeronMasterDriverProvider.class)
   public void delegatesToDriverOnSchedule() {
     HeronMasterDriver mockHeronDriver = Mockito.mock(HeronMasterDriver.class);
     HeronMasterDriverProvider.setInstance(mockHeronDriver);
+    Mockito.when(mockHeronDriver.scheduleTMasterContainer()).thenReturn(true);
 
     IScheduler scheduler = new YarnScheduler();
     PackingPlan mockPacking = Mockito.mock(PackingPlan.class);
@@ -39,7 +38,6 @@ public void delegatesToDriverOnSchedule() {
   }
 
   @Test
-  @PrepareForTest(HeronMasterDriverProvider.class)
   public void delegatesToDriverOnKill() {
     HeronMasterDriver mockHeronDriver = Mockito.mock(HeronMasterDriver.class);
     HeronMasterDriverProvider.setInstance(mockHeronDriver);

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronExecutorTask.java
Patch:
@@ -130,7 +130,7 @@ public byte[] call(byte[] memento) throws Exception {
     LOG.log(Level.INFO, "Started heron executor-id: {0}", heronExecutorId);
     try {
       regularExecutor.waitFor();
-      LOG.log(Level.WARNING, "Heron executor process terminate");
+      LOG.log(Level.WARNING, "Heron executor process terminated");
     } catch (InterruptedException e) {
       LOG.log(Level.INFO, "Destroy heron executor-id: {0}", heronExecutorId);
       regularExecutor.destroy();

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/HeronExecutorTask.java
Patch:
@@ -130,6 +130,7 @@ public byte[] call(byte[] memento) throws Exception {
     LOG.log(Level.INFO, "Started heron executor-id: {0}", heronExecutorId);
     try {
       regularExecutor.waitFor();
+      LOG.log(Level.WARNING, "Heron executor process terminate");
     } catch (InterruptedException e) {
       LOG.log(Level.INFO, "Destroy heron executor-id: {0}", heronExecutorId);
       regularExecutor.destroy();

File: heron/schedulers/src/java/com/twitter/heron/scheduler/yarn/YarnScheduler.java
Patch:
@@ -65,7 +65,7 @@ public boolean onRestart(RestartTopologyRequest request) {
     if (containerId == -1) {
       HeronMasterDriverProvider.getInstance().restartTopology();
     } else {
-      HeronMasterDriverProvider.getInstance().restartContainer(String.valueOf(containerId));
+      HeronMasterDriverProvider.getInstance().restartWorker(String.valueOf(containerId));
     }
 
     return true;

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/DriverOnLocalReefTest.java
Patch:
@@ -127,7 +127,7 @@ public void onNext(StartTime startTime) {
     class Allocated implements EventHandler<AllocatedEvaluator> {
       @Override
       public void onNext(AllocatedEvaluator evaluator) {
-        driver.new HeronContainerAllocationHandler().onNext(evaluator);
+        driver.new ContainerAllocationHandler().onNext(evaluator);
       }
     }
 

File: heron/spi/src/java/com/twitter/heron/spi/utils/SchedulerConfig.java
Patch:
@@ -110,7 +110,7 @@ public static Config loadConfig(
         Config.newBuilder()
             .putAll(sandboxConfigs())
             .putAll(commandLineConfigs(cluster, role, environ, verbose))
-            .putAll(topologyConfigs(topologyJarFile, topologyDefnFile, topology))
+            .putAll(topologyConfigs(topologyBinaryFile, topologyDefnFile, topology))
             .build());
 
     return config;

File: heron/spi/src/java/com/twitter/heron/spi/utils/ShellUtils.java
Patch:
@@ -253,8 +253,6 @@ public static boolean extractPackage(
       String packageName, String targetFolder, boolean isVerbose, boolean isInheritIO) {
     String cmd = String.format("tar -xvf %s", packageName);
 
-    LOG.severe(cmd);
-
     int ret = runSyncProcess(isVerbose, isInheritIO,
         cmd, new StringBuilder(), new StringBuilder(), new File(targetFolder));
 

File: heron/spi/src/java/com/twitter/heron/spi/utils/ShellUtils.java
Patch:
@@ -253,6 +253,8 @@ public static boolean extractPackage(
       String packageName, String targetFolder, boolean isVerbose, boolean isInheritIO) {
     String cmd = String.format("tar -xvf %s", packageName);
 
+    LOG.severe(cmd);
+
     int ret = runSyncProcess(isVerbose, isInheritIO,
         cmd, new StringBuilder(), new StringBuilder(), new File(targetFolder));
 

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SubmitterMainTest.java
Patch:
@@ -111,7 +111,6 @@ public void testSubmitTopology() throws Exception {
         thenReturn(CLASS_NOT_EXIST);
     Assert.assertFalse(submitterMain.submitTopology());
     Mockito.verify(uploader, Mockito.never()).close();
-    Mockito.verify(packing, Mockito.never()).close();
     Mockito.verify(launcher, Mockito.never()).close();
     Mockito.verify(statemgr, Mockito.never()).close();
 
@@ -126,7 +125,6 @@ public void testSubmitTopology() throws Exception {
     Assert.assertFalse(submitterMain.submitTopology());
     // Resources should be closed even the submission failed
     Mockito.verify(uploader, Mockito.atLeastOnce()).close();
-    Mockito.verify(packing, Mockito.atLeastOnce()).close();
     Mockito.verify(launcher, Mockito.atLeastOnce()).close();
     Mockito.verify(statemgr, Mockito.atLeastOnce()).close();
 

File: tools/java/src/com/twitter/bazel/checkstyle/PythonCheckstyle.java
Patch:
@@ -42,6 +42,7 @@
 public final class PythonCheckstyle {
   public static final Logger LOG = Logger.getLogger(PythonCheckstyle.class.getName());
   private static final String CLASSNAME = PythonCheckstyle.class.getCanonicalName();
+  private static final String PYLINT_RCFILE = "tools/python/checkstyle.ini";
 
   private PythonCheckstyle() {
   }
@@ -80,6 +81,7 @@ public static void main(String[] args) throws IOException {
       // Create and run the command
       List<String> commandBuilder = new ArrayList<>();
       commandBuilder.add(pylintFile);
+      commandBuilder.add("--rcfile=" + PYLINT_RCFILE);
       commandBuilder.addAll(sourceFiles);
       runLinter(commandBuilder);
 

File: heron/storm/src/java/org/apache/storm/clojure/lang/Atom.java
Patch:
@@ -12,7 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-package org.apache.storm.clojure;
+package org.apache.storm.clojure.lang;
 
 public class Atom {
 }

File: heron/storm/src/java/org/apache/storm/task/TopologyContext.java
Patch:
@@ -60,7 +60,7 @@ public TopologyContext(StormTopology topology, Map<String, Object> stormConf,
                          Map<String, Object> defaultResources,
                          Map<String, Object> userResources,
                          Map<String, Object> executorData, Map<String, Object> registeredMetrics,
-                         org.apache.storm.clojure.Atom openOrPrepareWasCalled) {
+                         org.apache.storm.clojure.lang.Atom openOrPrepareWasCalled) {
     super((com.twitter.heron.api.topology.TopologyContext) null);
   }
 

File: heron/simulator/src/java/com/twitter/heron/simulator/instance/SpoutInstance.java
Patch:
@@ -178,7 +178,9 @@ public void run() {
           // Notice: Tuples are not necessary emitted during nextTuple methods. We could emit
           // tuples as long as we invoke collector.emit(...)
           collector.sendOutTuples();
-        } else {
+        }
+
+        if (!collector.isOutQueuesAvailable()) {
           spoutMetrics.updateOutQueueFullCount();
         }
 

File: heron/simulator/src/java/com/twitter/heron/simulator/grouping/FieldsGrouping.java
Patch:
@@ -47,7 +47,8 @@ public List<Integer> getListToSend(HeronTuples.HeronDataTuple tuple) {
     int taskIndex = 0;
     int primeNumber = 633910111;
     for (Integer indices : fieldsGroupingIndices) {
-      taskIndex += Math.abs(tuple.getValues(indices).hashCode()) % primeNumber;
+      int hash = tuple.getValues(indices).hashCode();
+      taskIndex += (hash % primeNumber + primeNumber) % primeNumber;
     }
 
     taskIndex = taskIndex % taskIds.size();

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java
Patch:
@@ -179,7 +179,9 @@ public void run() {
           // Notice: Tuples are not necessary emitted during nextTuple methods. We could emit
           // tuples as long as we invoke collector.emit(...)
           collector.sendOutTuples();
-        } else {
+        }
+
+        if (!collector.isOutQueuesAvailable()) {
           spoutMetrics.updateOutQueueFullCount();
         }
 

File: heron/schedulers/tests/java/com/twitter/heron/scheduler/yarn/HeronMasterDriverTest.java
Patch:
@@ -188,7 +188,8 @@ public void handlesFailedTMasterContainer() throws Exception {
     Mockito.doReturn(mockTMasterEvaluator).when(spyDriver).allocateContainer("0", 1, 1024);
 
     spyDriver.scheduleTMasterContainer();
-    Mockito.verify(spyDriver, Mockito.timeout(1000).times(1)).allocateContainer("0", 1, 1024);
+    Mockito.verify(mockTMasterEvaluator, Mockito.timeout(1000).times(1))
+        .submitContext(Mockito.any(Configuration.class));
 
     FailedEvaluator mockFailedContainer = Mockito.mock(FailedEvaluator.class);
     Mockito.when(mockFailedContainer.getId()).thenReturn("tMaster");

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/LaunchRunner.java
Patch:
@@ -128,6 +128,7 @@ public Boolean call() {
     Config ytruntime = Config.newBuilder()
         .putAll(runtime)
         .put(Keys.instanceDistribution(), packedPlan.getInstanceDistribution())
+        .put(Keys.componentRamMap(), packedPlan.getComponentRamDistribution())
         .build();
 
     // initialize the launcher

File: heron/spi/src/java/com/twitter/heron/spi/utils/SchedulerUtils.java
Patch:
@@ -162,6 +162,7 @@ public static String[] executorCommand(
   /**
    * Util method to get the arguments to the heron executor. This method creates the arguments
    * without the container index, which is the first argument to the executor
+   *
    * @param config The static Config
    * @param runtime The runtime Config
    * @param freePorts list of free ports
@@ -204,8 +205,7 @@ public static String[] executorCommandArgs(
     commands.add(Integer.toString(tmasterControllerPort));
     commands.add(Integer.toString(tmasterStatsPort));
     commands.add(Context.systemConfigSandboxFile(config));
-    commands.add(TopologyUtils.formatRamMap(
-        TopologyUtils.getComponentRamMap(topology, Context.instanceRam(config))));
+    commands.add(Runtime.componentRamMap(runtime));
     commands.add(SchedulerUtils.encodeJavaOpts(TopologyUtils.getComponentJvmOptions(topology)));
     commands.add(Context.topologyPackageType(config));
     commands.add(Context.topologyJarFile(config));
@@ -250,6 +250,7 @@ public static boolean setLibSchedulerLocation(
 
   /**
    * Set the location of scheduler for other processes to discover
+   *
    * @param runtime the runtime configuration
    * @param schedulerEndpoint the endpoint that scheduler listens for receives requests
    * @param scheduler the IScheduler to provide more info

File: heron/examples/src/java/com/twitter/heron/examples/AckingTopology.java
Patch:
@@ -132,7 +132,7 @@ public void execute(Tuple tuple) {
       ++nItems;
       if (nItems % 10000 == 0) {
         long latency = System.currentTimeMillis() - startTime;
-        System.out.println("Done " + nItems + " in " + latency);
+        System.out.println("Bolt processed " + nItems + " tuples in " + latency + " ms");
         GlobalMetrics.incr("selected_items");
         // Here we explicitly forget to do the ack or fail
         // It would trigger fail on this tuple on spout end after MessageTimeout Seconds

File: heron/examples/src/java/com/twitter/heron/examples/ComponentJVMOptionsTopology.java
Patch:
@@ -88,7 +88,7 @@ public void prepare(
     public void execute(Tuple tuple) {
       if (++nItems % 100000 == 0) {
         long latency = System.currentTimeMillis() - startTime;
-        System.out.println("Done " + nItems + " in " + latency);
+        System.out.println("Bolt processed " + nItems + " tuples in " + latency + " ms");
         GlobalMetrics.incr("selected_items");
       }
     }

File: heron/examples/src/java/com/twitter/heron/examples/ExclamationTopology.java
Patch:
@@ -56,6 +56,7 @@ public static void main(String[] args) throws Exception {
       conf.setNumStmgrs(1);
       StormSubmitter.submitTopology(args[0], conf, builder.createTopology());
     } else {
+      System.out.println("Toplogy name not provided as an argument, running in simulator mode.");
       LocalCluster cluster = new LocalCluster();
       cluster.submitTopology("test", conf, builder.createTopology());
       Utils.sleep(10000);
@@ -87,7 +88,7 @@ public void execute(Tuple tuple) {
       // collector.ack(tuple);
       if (++nItems % 100000 == 0) {
         long latency = System.currentTimeMillis() - startTime;
-        System.out.println("Done " + nItems + " in " + latency);
+        System.out.println("Bolt processed " + nItems + " tuples in " + latency + " ms");
         GlobalMetrics.incr("selected_items");
       }
     }

File: heron/examples/src/java/com/twitter/heron/examples/MultiSpoutExclamationTopology.java
Patch:
@@ -90,7 +90,7 @@ public void execute(Tuple tuple) {
       // collector.ack(tuple);
       if (++nItems % 100000 == 0) {
         long latency = System.currentTimeMillis() - startTime;
-        System.out.println("Done " + nItems + " in " + latency);
+        System.out.println("Bolt processed " + nItems + " tuples in " + latency + " ms");
         GlobalMetrics.incr("selected_items");
       }
     }

File: heron/examples/src/java/com/twitter/heron/examples/MultiStageAckingTopology.java
Patch:
@@ -138,7 +138,7 @@ public void execute(Tuple tuple) {
       ++nItems;
       if (nItems % 10000 == 0) {
         long latency = System.currentTimeMillis() - startTime;
-        System.out.println("Done " + nItems + " in " + latency);
+        System.out.println("Bolt processed " + nItems + " tuples in " + latency + " ms");
         GlobalMetrics.incr("selected_items");
       }
       if (emit) {

File: heron/examples/src/java/com/twitter/heron/examples/TaskHookTopology.java
Patch:
@@ -257,7 +257,7 @@ public void execute(Tuple tuple) {
       ++nItems;
       if (nItems % 10000 == 0) {
         long latency = System.currentTimeMillis() - startTime;
-        System.out.println("Done " + nItems + " in " + latency);
+        System.out.println("Bolt processed " + nItems + " tuples in " + latency + " ms");
         GlobalMetrics.incr("selected_items");
         // Here we explicitly forget to do the ack or fail
         // It would trigger fail on this tuple on spout end after MessageTimeout Seconds

File: heron/simulator/src/java/com/twitter/heron/simulator/grouping/FieldsGrouping.java
Patch:
@@ -29,7 +29,7 @@ public FieldsGrouping(TopologyAPI.InputStream inputStream,
     super(taskIds);
 
     for (int i = 0; i < schema.getKeysCount(); i++) {
-      for (int j = 0; i < inputStream.getGroupingFields().getKeysCount(); j++) {
+      for (int j = 0; j < inputStream.getGroupingFields().getKeysCount(); j++) {
         Boolean keysEqual = schema.getKeys(i).getKey().equals(
             inputStream.getGroupingFields().getKeys(j).getKey());
         if (keysEqual) {

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -43,7 +43,7 @@
 
 /**
  * An IMetricsSink sends Metrics to TMaster.
- * 1. It used StateManager to get the TMasterLocation
+ * 1. It gets the TMasterLocation
  * <p>
  * 2. Then it would construct a long-live Service running TMasterClient, which could automatically
  * recover from uncaught exceptions, i.e. close the old one and start a new one.

File: heron/storm/src/java/backtype/storm/spout/SpoutOutputCollector.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * This output collector exposes the API for emitting tuples from an {@link backtype.storm.topology.IRichSpout}.
- * The main difference between this output collector and {@link OutputCollector}
+ * The main difference between this output collector and {@link backtype.storm.task.OutputCollector}
  * for {@link backtype.storm.topology.IRichBolt} is that spouts can tag messages with ids so that they can be
  * acked or failed later on. This is the Spout portion of Storm's API to
  * guarantee that each message is fully processed at least once.

File: heron/storm/src/java/backtype/storm/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * This output collector exposes the API for emitting tuples from an {@link backtype.storm.topology.IRichSpout}.
- * The main difference between this output collector and {@link OutputCollector}
+ * The main difference between this output collector and {@link backtype.storm.task.OutputCollector}
  * for {@link backtype.storm.topology.IRichBolt} is that spouts can tag messages with ids so that they can be
  * acked or failed later on. This is the Spout portion of Storm's API to
  * guarantee that each message is fully processed at least once.

File: heron/storm/src/java/backtype/storm/tuple/Tuple.java
Patch:
@@ -25,7 +25,7 @@
  * Storm needs to know how to serialize all the values in a tuple. By default, Storm
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link http://github.com/nathanmarz/storm/wiki/Serialization} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public interface Tuple {
 

File: heron/storm/src/java/org/apache/storm/Config.java
Patch:
@@ -160,8 +160,8 @@ public class Config extends com.twitter.heron.api.Config {
   /**
    * How many executors to spawn for ackers.
    * <p>If this is set to 0, then Storm will immediately ack tuples as soon
-   * as they come off the spout, effectively disabling reliability.</p>
-   * In Heron any values of > 0 means to enable acking.
+   * as they come off the spout, effectively disabling reliability.
+   * In Heron any values of &gt; 0 means to enable acking.
    */
   public static final String TOPOLOGY_ACKER_EXECUTORS = "topology.acker.executors";
   /**

File: heron/storm/src/java/org/apache/storm/spout/SpoutOutputCollector.java
Patch:
@@ -20,7 +20,8 @@
 
 /**
  * This output collector exposes the API for emitting tuples from an {@link org.apache.storm.topology.IRichSpout}.
- * The main difference between this output collector and {@link OutputCollector}
+ * The main difference between this output collector and
+ * {@link org.apache.storm.task.OutputCollector}
  * for {@link org.apache.storm.topology.IRichBolt} is that spouts can tag messages with ids so that they can be
  * acked or failed later on. This is the Spout portion of Storm's API to
  * guarantee that each message is fully processed at least once.

File: heron/storm/src/java/org/apache/storm/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -20,7 +20,8 @@
 
 /**
  * This output collector exposes the API for emitting tuples from an {@link org.apache.storm.topology.IRichSpout}.
- * The main difference between this output collector and {@link OutputCollector}
+ * The main difference between this output collector and
+ * {@link org.apache.storm.task.OutputCollector}
  * for {@link org.apache.storm.topology.IRichBolt} is that spouts can tag messages with ids so that they can be
  * acked or failed later on. This is the Spout portion of Storm's API to
  * guarantee that each message is fully processed at least once.

File: heron/storm/src/java/org/apache/storm/tuple/Tuple.java
Patch:
@@ -25,7 +25,7 @@
  * Storm needs to know how to serialize all the values in a tuple. By default, Storm
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link http://github.com/nathanmarz/storm/wiki/Serialization} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public interface Tuple {
 

File: heron/storm/src/java/org/apache/storm/tuple/TupleImpl.java
Patch:
@@ -25,7 +25,7 @@
  * Storm needs to know how to serialize all the values in a tuple. By default, Storm
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link http://github.com/nathanmarz/storm/wiki/Serialization} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public class TupleImpl implements Tuple {
   private com.twitter.heron.api.tuple.Tuple delegate;

File: heron/api/src/java/com/twitter/heron/api/bolt/IRichBolt.java
Patch:
@@ -17,7 +17,8 @@
 import com.twitter.heron.api.topology.IComponent;
 
 /**
- * When writing topologies using Java, {@link IRichBolt} and {@link IRichSpout} are the main interfaces
+ * When writing topologies using Java, {@link IRichBolt} and
+ * {@link com.twitter.heron.api.spout.IRichSpout} are the main interfaces
  * to use to implement components of the topology.
  */
 public interface IRichBolt extends IBolt, IComponent {

File: heron/api/src/java/com/twitter/heron/api/spout/IRichSpout.java
Patch:
@@ -17,7 +17,8 @@
 import com.twitter.heron.api.topology.IComponent;
 
 /**
- * When writing topologies using Java, {@link IRichBolt} and {@link IRichSpout} are the main interfaces
+ * When writing topologies using Java, {@link com.twitter.heron.api.bolt.IRichBolt} and
+ * {@link IRichSpout} are the main interfaces
  * to use to implement components of the topology.
  */
 public interface IRichSpout extends ISpout, IComponent {

File: heron/api/src/java/com/twitter/heron/api/spout/ISpout.java
Patch:
@@ -27,7 +27,8 @@
  * that DAG has been successfully processed, it will send an ack message to the Spout.
  * <p>
  * <p>If a tuple fails to be fully process within the configured timeout for the
- * topology (see {@link backtype.heron.Config}), Heron will send a fail message to the spout
+ * topology (see {@link com.twitter.heron.api.Config}), Heron will send a fail
+ * message to the spout
  * for the message.</p>
  * <p>
  * <p> When a Spout emits a tuple, it can tag the tuple with a message id. The message id

File: heron/api/src/java/com/twitter/heron/api/tuple/Tuple.java
Patch:
@@ -25,7 +25,7 @@
  * Heron needs to know how to serialize all the values in a tuple. By default, Heron
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link https://storm.apache.org/documentation/Serialization.html} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public interface Tuple {
 

File: heron/common/src/java/com/twitter/heron/common/basics/Communicator.java
Patch:
@@ -21,7 +21,7 @@
  * An soft bounded unblocking queue based on LinkedTransferQueue.
  * This queue will has a soft bound, which mean you could check the remainingCapacity() to decide
  * whether you could continuously offer items. However, the buffer underneath is an unbounded
- * LinkedTransferQueue, so you could still offer items even if remainingCapacity() <= 0.
+ * LinkedTransferQueue, so you could still offer items even if remainingCapacity() &lt;= 0.
  * <p>
  * We use an unbound queue since for every time user's bolt's executing or spout's emitting tuples,
  * it is possible that unbounded # of tuples could be generated. And we could not stop them since
@@ -37,7 +37,7 @@ public class Communicator<E> {
    */
   private final LinkedTransferQueue<E> buffer;
 
-  /**
+  /*
    * The producer offers item into the queue, and it will be wake up when consumer polls a item.
    */
   private volatile WakeableLooper producer;

File: heron/common/src/java/com/twitter/heron/common/basics/Pair.java
Patch:
@@ -77,7 +77,7 @@ public int hashCode() {
   /**
    * Returns a string representation of this pair.
    *
-   * @return format in "<first, second>"
+   * @return format in "&lt;first, second&gt;"
    */
   @Override
   public String toString() {

File: heron/common/src/java/com/twitter/heron/common/config/SystemConfig.java
Patch:
@@ -259,7 +259,7 @@ public class SystemConfig {
       = "heron.instance.tuning.current.sample.weight";
 
   /**
-   * Interval in ms to tune the size of in & out data queue in instance
+   * Interval in ms to tune the size of in &amp; out data queue in instance
    */
   public static final String INSTANCE_TUNING_INTERVAL_MS = "heron.instance.tuning.interval.ms";
 

File: heron/common/src/java/com/twitter/heron/common/network/IncomingPacket.java
Patch:
@@ -25,9 +25,9 @@
 
 /**
  * Defines IncomingPacket
- * <p/>
+ * <p>
  * TODO -- Sanjeev will add a detailed description of this application level protocol later
- * <p/>
+ * <p>
  * When allocating the ByteBuffer, we have two options:
  * 1. Normal java heap buffer by invoking ByteBuffer.allocate(...),
  * 2. Native heap buffer by invoking ByteBuffer.allocateDirect(...),
@@ -38,7 +38,7 @@
  * -- We could not control when to release the resources of direct buffer explicitly;
  * -- It is hard to guarantee direct buffer would not break limitation of native heap,
  * i.e. not throw OutOfMemoryError.
- * <p/>
+ * <p>
  * 2. Experiments are done by using direct buffer and the resources saving is negligible:
  * -- Direct buffer would save, in our scenarios, less than 1% of RAM;
  * -- Direct buffer could save 30%~50% cpu of Gateway thread.

File: heron/common/src/java/com/twitter/heron/common/network/OutgoingPacket.java
Patch:
@@ -24,9 +24,9 @@
 
 /**
  * Defines OutgoingPacket
- * <p/>
+ * <p>
  * TODO -- Sanjeev will add a detailed description of this application level protocol later
- * <p/>
+ * <p>
  * When allocating the ByteBuffer, we have two options:
  * 1. Normal java heap buffer by invoking ByteBuffer.allocate(...),
  * 2. Native heap buffer by invoking ByteBuffer.allocateDirect(...),
@@ -37,7 +37,7 @@
  * -- We could not control when to release the resources of direct buffer explicitly;
  * -- It is hard to guarantee direct buffer would not break limitation of native heap,
  * i.e. not throw OutOfMemoryError.
- * <p/>
+ * <p>
  * 2. Experiments are done by using direct buffer and the resources saving is negligible:
  * -- Direct buffer would save, in our scenarios, less than 1% of RAM;
  * -- Direct buffer could save 30%~50% cpu of Gateway thread.

File: heron/common/src/java/com/twitter/heron/common/utils/logging/LoggingHelper.java
Patch:
@@ -43,7 +43,7 @@ private LoggingHelper() {
    * Init java util logging with default format
    *
    * @param level the Level of message to log
-   * @param isRedirectStdOutErr whether we redirect std out&err
+   * @param isRedirectStdOutErr whether we redirect std out&amp;err
    */
   public static void loggerInit(Level level, boolean isRedirectStdOutErr) throws IOException {
     loggerInit(level, isRedirectStdOutErr, DEFAULT_FORMAT);
@@ -53,7 +53,7 @@ public static void loggerInit(Level level, boolean isRedirectStdOutErr) throws I
    * Init java util logging
    *
    * @param level the Level of message to log
-   * @param isRedirectStdOutErr whether we redirect std out&err
+   * @param isRedirectStdOutErr whether we redirect std out&amp;err
    * @param format the format to log
    */
   public static void loggerInit(Level level, boolean isRedirectStdOutErr, String format)

File: heron/common/src/java/com/twitter/heron/common/utils/tuple/TickTuple.java
Patch:
@@ -28,7 +28,7 @@
  * Heron needs to know how to serialize all the values in a tuple. By default, Heron
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link https://storm.apache.org/documentation/Serialization.html} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public class TickTuple implements Tuple {
   public TickTuple() {

File: heron/common/src/java/com/twitter/heron/common/utils/tuple/TupleImpl.java
Patch:
@@ -31,7 +31,7 @@
  * Heron needs to know how to serialize all the values in a tuple. By default, Heron
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link https://storm.apache.org/documentation/Serialization.html} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public class TupleImpl implements Tuple {
   private final TopologyContext context;

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltOutputCollectorImpl.java
Patch:
@@ -48,7 +48,7 @@
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple
  * 3. Update the metrics
  * <p>
- * For Control tuples (ack&fail):
+ * For Control tuples (ack &amp; fail):
  * 1. Set the anchors for a tuple
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple
  * 3. Update the metrics

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -44,7 +44,7 @@
  * When a tuple is to be emitted, it will serialize it and call OutgoingTupleCollection.admitSpoutTuple()
  * to sent it out.
  * <p>
- * It will only emit data tuples; it will not send control tuples (ack&fail)
+ * It will only emit data tuples; it will not send control tuples (ack&amp;fail)
  * 1. Whether some tuples are expired; should be considered as failed automatically
  * 2. The pending tuples to be acked
  * 3. Maintain some statistics, for instance, total tuples emitted.

File: heron/instance/src/java/com/twitter/heron/metrics/GatewayMetrics.java
Patch:
@@ -23,7 +23,7 @@
 import com.twitter.heron.common.utils.metrics.MetricsCollector;
 
 /**
- * Gateway's metrics to be collected, mainly the status of the in & out stream queues.
+ * Gateway's metrics to be collected, mainly the status of the in &amp; out stream queues.
  */
 public class GatewayMetrics {
   // # of packets received from stream manager

File: heron/instance/tests/java/com/twitter/heron/instance/spout/SpoutInstanceTest.java
Patch:
@@ -349,7 +349,7 @@ public void run() {
   }
 
   /**
-   * We will receive tuples and then send back the corresponding ack&fail tuples
+   * We will receive tuples and then send back the corresponding ack&amp;fail tuples
    */
 
   @Test

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/BoltOutputCollectorImpl.java
Patch:
@@ -47,7 +47,7 @@
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple
  * 3. Update the metrics
  * <p>
- * For Control tuples (ack&fail):
+ * For Control tuples (ack&amp;fail):
  * 1. Set the anchors for a tuple
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple
  * 3. Update the metrics

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/SpoutOutputCollectorImpl.java
Patch:
@@ -43,7 +43,7 @@
  * When a tuple is to be emitted, it will serialize it and call OutgoingTupleCollection.admitSpoutTuple()
  * to sent it out.
  * <p>
- * It will only emit data tuples; it will not send control tuples (ack&fail)
+ * It will only emit data tuples; it will not send control tuples (ack&amp;fail)
  * 1. Whether some tuples are expired; should be considered as failed automatically
  * 2. The pending tuples to be acked
  * 3. Maintain some statistics, for instance, total tuples emitted.

File: heron/localmode/src/java/com/twitter/heron/localmode/utils/PhysicalPlanUtil.java
Patch:
@@ -80,7 +80,7 @@ public static PhysicalPlans.PhysicalPlan getPhysicalPlan(TopologyAPI.Topology to
   }
 
   /**
-   * Get the map <componentId -> taskIds> from the Physical Plan given
+   * Get the map &lt;componentId -&gt; taskIds&gt; from the Physical Plan given
    *
    * @param physicalPlan the given Physical Plan
    * @return the map from componentId to its task ids

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/XORManagerTest.java
Patch:
@@ -158,7 +158,7 @@ public void testXORManagerMethods() throws Exception {
   }
 
   /**
-   * Method: populateXORManager(WakeableLooper looper, TopologyAPI.Topology topology, int nBuckets, Map<String, List<Integer>> componentToTaskIds)
+   * Method: populateXORManager(WakeableLooper looper, TopologyAPI.Topology topology, int nBuckets, Map&lt;String, List&lt;Integer&gt;&gt; componentToTaskIds)
    */
   @Test
   public void testPopulateXORManager() throws Exception {

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/MetricsManagerServerTest.java
Patch:
@@ -101,7 +101,7 @@ public void after() throws Exception {
   }
 
   /**
-   * Method: addSinkCommunicator(Communicator<MetricsRecord> communicator)
+   * Method: addSinkCommunicator(Communicator&lt;MetricsRecord&gt; communicator)
    */
   @Test
   public void testAddSinkCommunicator() throws Exception {
@@ -111,7 +111,7 @@ public void testAddSinkCommunicator() throws Exception {
   }
 
   /**
-   * Method: removeSinkCommunicator(Communicator<MetricsRecord> communicator)
+   * Method: removeSinkCommunicator(Communicator&lt;MetricsRecord&gt; communicator)
    */
   @Test
   public void testRemoveSinkCommunicator() throws Exception {
@@ -121,7 +121,7 @@ public void testRemoveSinkCommunicator() throws Exception {
   }
 
   /**
-   * Method: addSinkCommunicator(Communicator<MetricsRecord> communicator)
+   * Method: addSinkCommunicator(Communicator&lt;MetricsRecord&gt; communicator)
    */
   @Test
   public void testMetricsManagerServer() throws Exception {

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/executor/SinkExecutorTest.java
Patch:
@@ -98,7 +98,7 @@ public void testSetProperty() throws Exception {
   }
 
   /**
-   * Method: setPropertyMap(Map<? extends String, Object> configMap)
+   * Method: setPropertyMap(Map&lt;? extends String, Object&gt; configMap)
    */
   @Test
   @SuppressWarnings("unchecked")

File: heron/spi/src/java/com/twitter/heron/spi/common/Config.java
Patch:
@@ -22,7 +22,7 @@
 import com.twitter.heron.common.basics.TypeUtils;
 
 /**
- * Config is an Immutable Map of <String, Object>
+ * Config is an Immutable Map of &lt;String, Object&gt;
  */
 public class Config {
   private final Map<String, Object> cfgMap = new HashMap<>();

File: heron/spi/src/java/com/twitter/heron/spi/common/NetworkUtils.java
Patch:
@@ -287,7 +287,7 @@ public static boolean isLocationReachable(
    * @param tunnelHost the host used to tunnel
    * @param verifyCount In case of longer tunnel setup, try verify times to wait
    * @param isVerbose prints verbose info or not
-   * @return a <new_reachable_endpoint, tunnelProcess> pair.
+   * @return a &lt;new_reachable_endpoint, tunnelProcess&gt; pair.
    * If the endpoint already reachable, then new_reachable_endpoint equals to original endpoint, and
    * tunnelProcess is null.
    * If no way to reach even through ssh tunneling,

File: heron/spi/src/java/com/twitter/heron/spi/scheduler/ILauncher.java
Patch:
@@ -44,7 +44,7 @@ public interface ILauncher extends AutoCloseable {
    * the launch process succeeded.
    *
    * @param packing Initial mapping suggested by running packing algorithm.
-   * container_id->List of instance_id to be launched on this container.
+   * container_id-&gt;List of instance_id to be launched on this container.
    * @return true if topology launched successfully, false otherwise.
    */
   boolean launch(PackingPlan packing);

File: heron/spi/src/java/com/twitter/heron/spi/utils/TopologyTests.java
Patch:
@@ -40,8 +40,8 @@ private TopologyTests() {
    * Create Topology proto object using HeronSubmitter API.
    *
    * @param heronConfig desired config params.
-   * @param spouts spoutName -> parallelism
-   * @param bolts boltName -> parallelism
+   * @param spouts spoutName -&gt; parallelism
+   * @param bolts boltName -&gt; parallelism
    * @param connections connect default stream from value to key.
    * @return topology proto.
    */

File: heron/storm/src/java/backtype/storm/tuple/TupleImpl.java
Patch:
@@ -25,7 +25,7 @@
  * Storm needs to know how to serialize all the values in a tuple. By default, Storm
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.
- * See {@link http://github.com/nathanmarz/storm/wiki/Serialization} for more info.
+ * @see <a href="https://storm.apache.org/documentation/Serialization.html">Storm serialization</a>
  */
 public class TupleImpl implements Tuple {
   private com.twitter.heron.api.tuple.Tuple delegate;

File: heron/uploaders/src/java/com/twitter/heron/uploader/s3/S3Uploader.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Provides a basic uploader class for uploading topology packages to s3.
  * <p>
- * By default this uploader will write topology packages to s3://<bucket>/<topologyName>/topology.tar.gz. This is a known
+ * By default this uploader will write topology packages to s3://&lt;bucket&gt;/&lt;topologyName&gt;/topology.tar.gz. This is a known
  * location where you can then download the topology package to where it needs to go in order to run the topology.
  * <p>
  * This class also handles the undo action by copying any existing topology.tar.gz package found in the folder to

File: integration-test/src/java/com/twitter/heron/integration_test/topology/basic_topology_one_task/BasicTopologyOneTask.java
Patch:
@@ -24,7 +24,7 @@
 import com.twitter.heron.integration_test.core.TestTopologyBuilder;
 
 /**
- * Topology to test basic structure, single thread spout & bolt, shuffleGrouping
+ * Topology to test basic structure, single thread spout &amp; bolt, shuffleGrouping
  */
 public final class BasicTopologyOneTask {
 

File: integration-test/src/java/com/twitter/heron/integration_test/topology/bolt_double_emit_tuples/BoltDoubleEmitTuples.java
Patch:
@@ -24,7 +24,7 @@
 import com.twitter.heron.integration_test.core.TestTopologyBuilder;
 
 /**
- * Topology to test basic structure, single thread spout & bolt, shuffleGrouping
+ * Topology to test basic structure, single thread spout and bolt, shuffleGrouping
  */
 public final class BoltDoubleEmitTuples {
 

File: tools/java/src/com/twitter/bazel/checkstyle/CppCheckstyle.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  * Verifies that the c, cpp and header source styles conform to the google styles in cpplint.
- * Usage: java com.twitter.bazel.checkstyle.CppCheckstyle -f &lt;extra_action_file> -c &lt;cpplint_file>
+ * Usage: java com.twitter.bazel.checkstyle.CppCheckstyle -f &lt;extra_action_file&gt; -c &lt;cpplint_file&gt;
  * <p>
  * To test:
  * $ bazel build --config=darwin --experimental_action_listener=tools/cpp:compile_cpp heron/stmgr/src/cpp:grouping-cxx

File: tools/java/src/com/twitter/bazel/checkstyle/JavaCheckstyle.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * Verifies that the java classes styles conform to the styles in the config.
- * Usage: java com.twitter.bazel.checkstyle.JavaCheckstyle -f &lt;extra_action_file> -c &lt;checkstyle_config>
+ * Usage: java com.twitter.bazel.checkstyle.JavaCheckstyle -f &lt;extra_action_file&gt; -c &lt;checkstyle_config&gt;
  * <p>
  * To test:
  * $ bazel build --config=darwin heron/spi/src/java:heron-spi --experimental_action_listener=tools/java:compile_java

File: tools/java/src/com/twitter/bazel/checkstyle/PythonCheckstyle.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  * Verifies that the python source styles conform to the python styles in pylint.
- * Usage: java com.twitter.bazel.checkstyle.PythonCheckstyle -f &lt;extra_action_file> -p &lt;pylint_file>
+ * Usage: java com.twitter.bazel.checkstyle.PythonCheckstyle -f &lt;extra_action_file&gt; -p &lt;pylint_file&gt;
  * <p>
  * To test:
  * $ bazel build --config=darwin --experimental_action_listener=tools/python:compile_python heron/cli/src/python/...

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/client/SchedulerClientFactoryTest.java
Patch:
@@ -36,7 +36,8 @@ public void testGetServiceSchedulerClient() throws Exception {
     SchedulerStateManagerAdaptor statemgr = Mockito.mock(SchedulerStateManagerAdaptor.class);
 
     // Get a ServiceSchedulerClient
-    Mockito.when(config.getBooleanValue(ConfigKeys.get("SCHEDULER_IS_SERVICE"))).thenReturn(true);
+    Mockito.when(config.getBooleanValue(ConfigKeys.get("SCHEDULER_IS_SERVICE"), true))
+        .thenReturn(true);
 
     // Mock the runtime object
     Mockito.when(runtime.get(Keys.schedulerStateManagerAdaptor())).thenReturn(statemgr);

File: heron/spi/src/java/com/twitter/heron/spi/common/Context.java
Patch:
@@ -88,7 +88,7 @@ public static String stateManagerClass(Config cfg) {
   }
 
   public static Boolean schedulerService(Config cfg) {
-    return cfg.getBooleanValue(ConfigKeys.get("SCHEDULER_IS_SERVICE"));
+    return cfg.getBooleanValue(ConfigKeys.get("SCHEDULER_IS_SERVICE"), true);
   }
 
   public static String clusterFile(Config cfg) {

File: heron/spi/src/java/com/twitter/heron/spi/statemgr/IStateManager.java
Patch:
@@ -89,7 +89,7 @@ ListenableFuture<Boolean> setTopology(
       TopologyAPI.Topology topology, String topologyName);
 
   /**
-   * Set the scheduler location for the given top
+   * Set the scheduler location for the given topology
    *
    * @return Boolean - Success or Failure
    */

File: heron/spi/src/java/com/twitter/heron/spi/statemgr/SchedulerStateManagerAdaptor.java
Patch:
@@ -110,7 +110,9 @@ public Boolean setTopology(TopologyAPI.Topology topology, String topologyName) {
    *
    * @return Boolean - Success or Failure
    */
-  public Boolean setSchedulerLocation(Scheduler.SchedulerLocation location, String topologyName) {
+  public Boolean setSchedulerLocation(
+      Scheduler.SchedulerLocation location,
+      String topologyName) {
     return awaitResult(delegate.setSchedulerLocation(location, topologyName));
   }
 

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -262,12 +262,12 @@ public static void main(String[] args)
   private final Config config;
   // holds all runtime Config
   private Config runtime;
-  // command to manange a topology
+  // command to manage a topology
   private final Command command;
 
   public RuntimeManagerMain(
       Config config,
-      Command command) throws IOException {
+      Command command) {
     // initialize the options
     this.config = config;
     this.command = command;

File: heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -62,7 +62,7 @@ public class SchedulerMain {
   public SchedulerMain(
       Config config,
       TopologyAPI.Topology topology,
-      int schedulerServerPort) throws IOException {
+      int schedulerServerPort) {
     // initialize the options
     this.config = config;
     this.topology = topology;

File: heron/common/src/java/com/twitter/heron/common/basics/TypeUtils.java
Patch:
@@ -24,7 +24,7 @@ public final class TypeUtils {
   private TypeUtils() {
   }
 
-  public static Integer getInt(Object o) {
+  public static Integer getInteger(Object o) {
     if (o instanceof Long) {
       return ((Long) o).intValue();
     } else if (o instanceof Integer) {

File: heron/common/src/java/com/twitter/heron/common/network/IncomingPacket.java
Patch:
@@ -68,7 +68,7 @@ public int readFromChannel(SocketChannel channel) {
       // We read the header fully
       headerRead = true;
       header.flip();
-      // TODO:- sanitize header.getInt()
+      // TODO:- sanitize header.getInteger()
       data = ByteBuffer.allocate(header.getInt());
     }
     int retval = readFromChannel(channel, data);

File: heron/common/src/java/com/twitter/heron/common/utils/topology/GeneralTopologyContextImpl.java
Patch:
@@ -266,7 +266,7 @@ public ComponentCommon getComponentCommon(String componentId) {
 
   public int maxTopologyMessageTimeout() {
     // TODO:- get the per component overrides implemented
-    return TypeUtils.getInt(topologyConfig.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
+    return TypeUtils.getInteger(topologyConfig.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
   }
 
   private boolean areStreamsEqual(TopologyAPI.StreamId a, TopologyAPI.StreamId b) {

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
Patch:
@@ -245,7 +245,7 @@ private void PrepareTickTupleTimer() {
         helper.getTopologyContext().getTopologyConfig().get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
 
     if (tickTupleFreqSecs != null) {
-      int freq = TypeUtils.getInt(tickTupleFreqSecs);
+      int freq = TypeUtils.getInteger(tickTupleFreqSecs);
 
       Runnable r = new Runnable() {
         public void run() {

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java
Patch:
@@ -247,7 +247,7 @@ private boolean isProduceTuple() {
   }
 
   private void produceTuple() {
-    int maxSpoutPending = TypeUtils.getInt(config.get(Config.TOPOLOGY_MAX_SPOUT_PENDING));
+    int maxSpoutPending = TypeUtils.getInteger(config.get(Config.TOPOLOGY_MAX_SPOUT_PENDING));
 
 
     long totalTuplesEmitted = collector.getTotalTuplesEmitted();

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/BoltInstance.java
Patch:
@@ -244,7 +244,7 @@ private void PrepareTickTupleTimer() {
         helper.getTopologyContext().getTopologyConfig().get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
 
     if (tickTupleFreqSecs != null) {
-      int freq = TypeUtils.getInt(tickTupleFreqSecs);
+      int freq = TypeUtils.getInteger(tickTupleFreqSecs);
 
       Runnable r = new Runnable() {
         public void run() {

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/SpoutInstance.java
Patch:
@@ -241,7 +241,7 @@ private boolean isProduceTuple() {
   }
 
   private void produceTuple() {
-    int maxSpoutPending = TypeUtils.getInt(config.get(Config.TOPOLOGY_MAX_SPOUT_PENDING));
+    int maxSpoutPending = TypeUtils.getInteger(config.get(Config.TOPOLOGY_MAX_SPOUT_PENDING));
 
     long totalTuplesEmitted = collector.getTotalTuplesEmitted();
 

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsManager.java
Patch:
@@ -168,7 +168,7 @@ public MetricsManager(String topologyName, String serverHost,
       sinksRetryAttempts.put(sinkId,
           restartAttempts == null
               ? MetricsSinksConfig.DEFAULT_SINK_RESTART_ATTEMPTS
-              : TypeUtils.getInt(restartAttempts));
+              : TypeUtils.getInteger(restartAttempts));
 
       // Update the list of Communicator in Metrics Manager Server
       metricsManagerServer.addSinkCommunicator(sinkExecutor.getCommunicator());

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/FileSink.java
Patch:
@@ -65,7 +65,7 @@ public class FileSink implements IMetricsSink {
   @Override
   public void init(Map<String, Object> conf, SinkContext context) {
     filenamePrefix = (String) conf.get(FILENAME_KEY) + "." + context.getMetricsMgrId();
-    fileMaximum = TypeUtils.getInt(conf.get(MAXIMUM_FILE_COUNT_KEY));
+    fileMaximum = TypeUtils.getInteger(conf.get(MAXIMUM_FILE_COUNT_KEY));
     sinkContext = context;
 
     // We set System.out as writer's default value here to avoid null object

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/GraphiteSink.java
Patch:
@@ -62,7 +62,7 @@ public void init(Map<String, Object> conf, SinkContext context) {
 
     // Get Graphite host configurations.
     final String serverHost = (String) conf.get(SERVER_HOST_KEY);
-    final int serverPort = TypeUtils.getInt(conf.get(SERVER_PORT_KEY));
+    final int serverPort = TypeUtils.getInteger(conf.get(SERVER_PORT_KEY));
 
     // Safe check
     if (conf.get(SERVER_HOST_KEY) == null
@@ -72,7 +72,7 @@ public void init(Map<String, Object> conf, SinkContext context) {
 
     int maxServerReconnectAttempts = conf.get(SERVER_HOST_KEY) == null
         ? DEFAULT_MAX_CONNECTION_FAILURES
-        : TypeUtils.getInt(conf.get(SERVER_MAX_RECONNECT_ATTEMPTS));
+        : TypeUtils.getInteger(conf.get(SERVER_MAX_RECONNECT_ATTEMPTS));
 
     // Get Graphite metrics graph prefix.
     metricsPrefix = (String) conf.get(METRICS_PREFIX);

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -152,7 +152,7 @@ public void init(Map<String, Object> conf, SinkContext context) {
   // If so, restart the TMasterClientService with the new TMasterLocation
   private void startTMasterChecker() {
     final int checkIntervalSec =
-        TypeUtils.getInt(sinkConfig.get(KEY_TMASTER_LOCATION_CHECK_INTERVAL_SEC));
+        TypeUtils.getInteger(sinkConfig.get(KEY_TMASTER_LOCATION_CHECK_INTERVAL_SEC));
 
     Runnable runnable = new Runnable() {
       @Override
@@ -338,8 +338,8 @@ public synchronized void startNewMasterClient() {
               TypeUtils.getLong(tmasterClientConfig.get(KEY_NETWORK_WRITE_BATCH_TIME_MS)),
               TypeUtils.getLong(tmasterClientConfig.get(KEY_NETWORK_READ_BATCH_SIZE_BYTES)),
               TypeUtils.getLong(tmasterClientConfig.get(KEY_NETWORK_READ_BATCH_TIME_MS)),
-              TypeUtils.getInt(tmasterClientConfig.get(KEY_SOCKET_SEND_BUFFER_BYTES)),
-              TypeUtils.getInt(tmasterClientConfig.get(KEY_SOCKET_RECEIVED_BUFFER_BYTES)));
+              TypeUtils.getInteger(tmasterClientConfig.get(KEY_SOCKET_SEND_BUFFER_BYTES)),
+              TypeUtils.getInteger(tmasterClientConfig.get(KEY_SOCKET_RECEIVED_BUFFER_BYTES)));
 
       // Reset the Consumer
       metricsCommunicator.setConsumer(looper);

File: heron/storm/src/java/backtype/storm/task/GeneralTopologyContext.java
Patch:
@@ -167,15 +167,15 @@ public ComponentCommon getComponentCommon(String componentId) {
 
   /*
     public int maxTopologyMessageTimeout() {
-        Integer max = Utils.getInt(_stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
+        Integer max = Utils.getInteger(_stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
         for(String spout: getRawTopology().get_spouts().keySet()) {
             ComponentCommon common = getComponentCommon(spout);
             String jsonConf = common.get_json_conf();
             if(jsonConf!=null) {
                 Map conf = (Map) JSONValue.parse(jsonConf);
                 Object comp = conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS);
                 if(comp!=null) {
-                    max = Math.max(Utils.getInt(comp), max);
+                    max = Math.max(Utils.getInteger(comp), max);
                 }
             }
         }

File: heron/storm/src/java/backtype/storm/utils/Utils.java
Patch:
@@ -93,7 +93,7 @@ public static Object deserialize(byte[] serialized) {
   }
 
   public static Integer getInt(Object o) {
-    return TypeUtils.getInt(o);
+    return TypeUtils.getInteger(o);
   }
 
   public static byte[] toByteArray(ByteBuffer buffer) {

File: heron/storm/src/java/org/apache/storm/task/GeneralTopologyContext.java
Patch:
@@ -166,15 +166,15 @@ public ComponentCommon getComponentCommon(String componentId) {
 
   /*
     public int maxTopologyMessageTimeout() {
-        Integer max = Utils.getInt(_stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
+        Integer max = Utils.getInteger(_stormConf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
         for(String spout: getRawTopology().get_spouts().keySet()) {
             ComponentCommon common = getComponentCommon(spout);
             String jsonConf = common.get_json_conf();
             if(jsonConf!=null) {
                 Map conf = (Map) JSONValue.parse(jsonConf);
                 Object comp = conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS);
                 if(comp!=null) {
-                    max = Math.max(Utils.getInt(comp), max);
+                    max = Math.max(Utils.getInteger(comp), max);
                 }
             }
         }

File: heron/storm/src/java/org/apache/storm/utils/Utils.java
Patch:
@@ -93,7 +93,7 @@ public static Object deserialize(byte[] serialized) {
   }
 
   public static Integer getInt(Object o) {
-    return TypeUtils.getInt(o);
+    return TypeUtils.getInteger(o);
   }
 
   public static byte[] toByteArray(ByteBuffer buffer) {

File: heron/scheduler-core/tests/java/com/twitter/heron/scheduler/server/SchedulerServerTest.java
Patch:
@@ -18,15 +18,15 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
+import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.HttpUtils;
 import com.twitter.heron.spi.scheduler.IScheduler;
-import com.twitter.heron.spi.utils.NetworkUtils;
 
 public class SchedulerServerTest {
   @Test
   public void testSchedulerServer() throws Exception {
-    int freePort = NetworkUtils.getFreePort();
+    int freePort = SysUtils.getFreePort();
     IScheduler scheduler = Mockito.mock(IScheduler.class);
     Config runtime = Mockito.mock(Config.class);
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
Patch:
@@ -23,13 +23,13 @@
 
 import org.apache.commons.io.FileUtils;
 
+import com.twitter.heron.common.basics.SysUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.common.PackingPlan;
 import com.twitter.heron.spi.common.ShellUtils;
 import com.twitter.heron.spi.scheduler.ILauncher;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
-import com.twitter.heron.spi.utils.NetworkUtils;
 import com.twitter.heron.spi.utils.Runtime;
 import com.twitter.heron.spi.utils.SchedulerUtils;
 
@@ -215,7 +215,7 @@ protected boolean untarPackage(String packageName, String targetFolder) {
   ///////////////////////////////////////////////////////////////////////////////
   protected String[] getSchedulerCommand() {
     String javaBinary = String.format("%s/%s", Context.javaHome(config), "bin/java");
-    return SchedulerUtils.schedulerCommand(config, javaBinary, NetworkUtils.getFreePort());
+    return SchedulerUtils.schedulerCommand(config, javaBinary, SysUtils.getFreePort());
   }
 
   protected Process startScheduler(String[] schedulerCmd) {

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemContext.java
Patch:
@@ -26,7 +26,7 @@ public class LocalFileSystemContext extends Context {
    * @return true if config does not exist, else the specified value
    */
   public static boolean initLocalFileTree(Config config) {
-    return config.get(LocalFileSystemKeys.initializeFileTree()) == null
-        ? true : (Boolean) config.get(LocalFileSystemKeys.initializeFileTree());
+    return config.getBooleanValue(
+        LocalFileSystemKeys.initializeFileTree(), true);
   }
 }

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/JSONTweetFilterBolt.java
Patch:
@@ -71,7 +71,7 @@ private boolean isFiltered(String tweet) {
     // Parse JSON entry
     Map<String, Object> tweetJson = null;
     try {
-      tweetJson = MAPPER.readValue(tweet, new TypeReference<Map<String, Object>>() {});
+      tweetJson = MAPPER.readValue(tweet, new TypeReference<Map<String, Object>>() { });
     } catch (IOException e) {
       LOG.log(Level.SEVERE, "Failed to parse the String into map: " + tweet, e);
     }

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/MapAggregatorBolt.java
Patch:
@@ -13,7 +13,6 @@
 // limitations under the License.
 package com.twitter.heron.integration_test.common.bolt;
 
-import java.lang.SuppressWarnings;
 import java.util.HashMap;
 import java.util.Map;
 

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/TweetPropertyBolt.java
Patch:
@@ -67,7 +67,7 @@ private Object extract(String tweet, String prop) {
     // Parse JSON entry
     Map<String, Object> tweetJson = null;
     try {
-      tweetJson = MAPPER.readValue(tweet, new TypeReference<Map<String, Object>>() {});
+      tweetJson = MAPPER.readValue(tweet, new TypeReference<Map<String, Object>>() { });
     } catch (IOException e) {
       LOG.log(Level.SEVERE, "Failed to parse the String into map: " + tweet, e);
     }

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/JSONTweetFilterBolt.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import com.twitter.heron.api.bolt.BaseBasicBolt;
@@ -70,7 +71,7 @@ private boolean isFiltered(String tweet) {
     // Parse JSON entry
     Map<String, Object> tweetJson = null;
     try {
-      tweetJson = MAPPER.readValue(tweet, Map.class);
+      tweetJson = MAPPER.readValue(tweet, new TypeReference<Map<String, Object>>() {});
     } catch (IOException e) {
       LOG.log(Level.SEVERE, "Failed to parse the String into map: " + tweet, e);
     }

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/MapAggregatorBolt.java
Patch:
@@ -13,6 +13,7 @@
 // limitations under the License.
 package com.twitter.heron.integration_test.common.bolt;
 
+import java.lang.SuppressWarnings;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -43,6 +44,7 @@ public void prepare(Map<String, Object> map,
   }
 
   @Override
+  @SuppressWarnings("unchecked")
   public void execute(Tuple tuple) {
     buffer.putAll((Map<String, Integer>) tuple.getValue(0));
   }

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/TweetPropertyBolt.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import com.twitter.heron.api.bolt.BaseBasicBolt;
@@ -66,7 +67,7 @@ private Object extract(String tweet, String prop) {
     // Parse JSON entry
     Map<String, Object> tweetJson = null;
     try {
-      tweetJson = MAPPER.readValue(tweet, Map.class);
+      tweetJson = MAPPER.readValue(tweet, new TypeReference<Map<String, Object>>() {});
     } catch (IOException e) {
       LOG.log(Level.SEVERE, "Failed to parse the String into map: " + tweet, e);
     }

File: heron/instance/tests/java/com/twitter/heron/resource/UnitTestHelper.java
Patch:
@@ -139,6 +139,7 @@ private static void setStMgr(PhysicalPlans.PhysicalPlan.Builder pPlan) {
     pPlan.addStmgrs(stmgr);
   }
 
+  @SuppressWarnings("unchecked")
   public static void clearSingletonRegistry() throws Exception {
     // Remove the Singleton by Reflection
     Field field = SingletonRegistry.INSTANCE.getClass().getDeclaredField("singletonObjects");

File: heron/localmode/tests/java/com/twitter/heron/localmode/LocalModeTest.java
Patch:
@@ -28,6 +28,7 @@
  */
 public class LocalModeTest {
 
+  @SuppressWarnings("unchecked")
   private static void clearSingletonRegistry() throws Exception {
     // Remove the Singleton by Reflection
     Field field = SingletonRegistry.INSTANCE.getClass().getDeclaredField("singletonObjects");

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsSinksConfig.java
Patch:
@@ -35,6 +35,7 @@ public class MetricsSinksConfig {
 
   private final Map<String, Map<String, Object>> sinksConfigs = new HashMap<>();
 
+  @SuppressWarnings("unchecked")
   public MetricsSinksConfig(String filename) throws FileNotFoundException {
     FileInputStream fin = new FileInputStream(new File(filename));
     Yaml yaml = new Yaml();

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -112,6 +112,7 @@ public class TMasterSink implements IMetricsSink {
   private SinkContext sinkContext;
 
   @Override
+  @SuppressWarnings("unchecked")
   public void init(Map<String, Object> conf, SinkContext context) {
     sinkConfig.putAll(conf);
 

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/HandleTMasterLocationTest.java
Patch:
@@ -107,6 +107,7 @@ public void before() throws Exception {
   }
 
   @After
+  @SuppressWarnings("unchecked")
   public void after() throws Exception {
     threadsPool.shutdownNow();
 

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSinkTest.java
Patch:
@@ -49,6 +49,7 @@ public void before() throws Exception {
   }
 
   @After
+  @SuppressWarnings("unchecked")
   public void after() throws Exception {
     // Remove the Singleton by Reflection
     Field field = SingletonRegistry.INSTANCE.getClass().getDeclaredField("singletonObjects");

File: heron/storm/src/java/backtype/storm/hooks/ITaskHookDelegate.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.List;
 import java.util.Map;
 
+import com.twitter.heron.common.basics.TypeUtils;
+
 import backtype.storm.Config;
 import backtype.storm.hooks.info.BoltAckInfo;
 import backtype.storm.hooks.info.BoltExecuteInfo;
@@ -65,7 +67,7 @@ public void prepare(Map<String, Object> newConf,
       throw new RuntimeException("StormCompat Translation not done for task hooks");
     }
     List<String> hookClassNames =
-        (List<String>) newConf.get(Config.STORMCOMPAT_TOPOLOGY_AUTO_TASK_HOOKS);
+        TypeUtils.getListOfStrings(newConf.get(Config.STORMCOMPAT_TOPOLOGY_AUTO_TASK_HOOKS));
 
     for (String className : hookClassNames) {
       ITaskHook hook;

File: heron/storm/src/java/backtype/storm/task/OutputCollector.java
Patch:
@@ -58,7 +58,7 @@ public List<Integer> emit(String streamId, Tuple anchor, List<Object> tuple) {
    * @return the list of task ids that this new tuple was sent to
    */
   public List<Integer> emit(String streamId, List<Object> tuple) {
-    return emit(streamId, (List) null, tuple);
+    return emit(streamId, (Collection<Tuple>) null, tuple);
   }
 
   /**
@@ -130,7 +130,7 @@ public void emitDirect(int taskId, String streamId, Tuple anchor, List<Object> t
    * @param tuple the new output tuple from this bolt
    */
   public void emitDirect(int taskId, String streamId, List<Object> tuple) {
-    emitDirect(taskId, streamId, (List) null, tuple);
+    emitDirect(taskId, streamId, (Collection<Tuple>) null, tuple);
   }
 
   /**

File: heron/storm/src/java/org/apache/storm/hooks/ITaskHookDelegate.java
Patch:
@@ -27,6 +27,8 @@
 import org.apache.storm.hooks.info.SpoutFailInfo;
 import org.apache.storm.task.TopologyContext;
 
+import com.twitter.heron.common.basics.TypeUtils;
+
 /**
  * There would be types of task hooks inside ITaskHookDelegate:
  * 1. task hook's classes specified in config statically.
@@ -65,7 +67,7 @@ public void prepare(Map<String, Object> newConf,
       throw new RuntimeException("StormCompat Translation not done for task hooks");
     }
     List<String> hookClassNames =
-        (List<String>) newConf.get(Config.STORMCOMPAT_TOPOLOGY_AUTO_TASK_HOOKS);
+        TypeUtils.getListOfStrings(newConf.get(Config.STORMCOMPAT_TOPOLOGY_AUTO_TASK_HOOKS));
 
     for (String className : hookClassNames) {
       ITaskHook hook;

File: heron/storm/src/java/org/apache/storm/task/OutputCollector.java
Patch:
@@ -58,7 +58,7 @@ public List<Integer> emit(String streamId, Tuple anchor, List<Object> tuple) {
    * @return the list of task ids that this new tuple was sent to
    */
   public List<Integer> emit(String streamId, List<Object> tuple) {
-    return emit(streamId, (List) null, tuple);
+    return emit(streamId, (Collection<Tuple>) null, tuple);
   }
 
   /**
@@ -130,7 +130,7 @@ public void emitDirect(int taskId, String streamId, Tuple anchor, List<Object> t
    * @param tuple the new output tuple from this bolt
    */
   public void emitDirect(int taskId, String streamId, List<Object> tuple) {
-    emitDirect(taskId, streamId, (List) null, tuple);
+    emitDirect(taskId, streamId, (Collection<Tuple>) null, tuple);
   }
 
   /**

File: heron/uploaders/tests/java/com/twitter/heron/uploader/s3/S3UploaderTest.java
Patch:
@@ -95,6 +95,7 @@ public void backupPreviousVersionOnDeployForRollback() throws Exception {
   }
 
   @Test
+  @SuppressWarnings("unchecked")
   public void handlePutObjectExceptionOnUpload() throws Exception {
     String expectedRemotePath = "test-topology/topology.tar.gz";
     String expectedBucket = "bucket";

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -23,6 +23,8 @@
 
 import javax.xml.bind.DatatypeConverter;
 
+import com.twitter.heron.common.basics.TypeUtils;
+
 /**
  * Topology configs are specified as a plain old map. This class provides a
  * convenient way to create a topology config map by providing setter methods for
@@ -278,7 +280,7 @@ public static void setAutoTaskHooks(Map<String, Object> conf, List<String> hooks
   }
 
   public static List<String> getAutoTaskHooks(Map<String, Object> conf) {
-    return (List<String>) conf.get(Config.TOPOLOGY_AUTO_TASK_HOOKS);
+    return TypeUtils.getListOfStrings(conf.get(Config.TOPOLOGY_AUTO_TASK_HOOKS));
   }
 
   public static void setComponentRam(Map<String, Object> conf, String component, long ramInBytes) {

File: heron/common/src/java/com/twitter/heron/common/utils/topology/GeneralTopologyContextImpl.java
Patch:
@@ -26,7 +26,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.api.topology.GeneralTopologyContext;
 import com.twitter.heron.api.tuple.Fields;
-import com.twitter.heron.api.utils.Utils;
+import com.twitter.heron.common.basics.TypeUtils;
 
 /**
  * From Heron. To get the topology info.
@@ -266,7 +266,7 @@ public ComponentCommon getComponentCommon(String componentId) {
 
   public int maxTopologyMessageTimeout() {
     // TODO:- get the per component overrides implemented
-    return Utils.getInt(topologyConfig.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
+    return TypeUtils.getInt(topologyConfig.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS));
   }
 
   private boolean areStreamsEqual(TopologyAPI.StreamId a, TopologyAPI.StreamId b) {

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
Patch:
@@ -31,6 +31,7 @@
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.BoltMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
@@ -244,7 +245,7 @@ private void PrepareTickTupleTimer() {
         helper.getTopologyContext().getTopologyConfig().get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
 
     if (tickTupleFreqSecs != null) {
-      int freq = Utils.getInt(tickTupleFreqSecs);
+      int freq = TypeUtils.getInt(tickTupleFreqSecs);
 
       Runnable r = new Runnable() {
         public void run() {

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/BoltInstance.java
Patch:
@@ -31,6 +31,7 @@
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.BoltMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
@@ -243,7 +244,7 @@ private void PrepareTickTupleTimer() {
         helper.getTopologyContext().getTopologyConfig().get(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS);
 
     if (tickTupleFreqSecs != null) {
-      int freq = Utils.getInt(tickTupleFreqSecs);
+      int freq = TypeUtils.getInt(tickTupleFreqSecs);
 
       Runnable r = new Runnable() {
         public void run() {

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsManager.java
Patch:
@@ -148,8 +148,8 @@ public MetricsManager(String topologyName, String serverHost,
         serverPort, serverSocketOptions, serverCounters);
 
     executors = Executors.newFixedThreadPool(config.getNumberOfSinks());
-    sinkExecutors = new ConcurrentHashMap<String, SinkExecutor>(config.getNumberOfSinks());
-    sinksRetryAttempts = new ConcurrentHashMap<String, Integer>(config.getNumberOfSinks());
+    sinkExecutors = new ConcurrentHashMap<>(config.getNumberOfSinks());
+    sinksRetryAttempts = new ConcurrentHashMap<>(config.getNumberOfSinks());
     // Add exception handler for any uncaught exception here.
     Thread.setDefaultUncaughtExceptionHandler(new DefaultExceptionHandler());
 

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterSink.java
Patch:
@@ -96,9 +96,9 @@ public class TMasterSink implements IMetricsSink {
   private static final String TMASTER_RESTART_COUNT = "tmaster-restart-count";
   private static final String TMASTER_LOCATION_UPDATE_COUNT = "tmaster-location-update-count";
   private final Communicator<TopologyMaster.PublishMetrics> metricsCommunicator =
-      new Communicator<TopologyMaster.PublishMetrics>();
+      new Communicator<>();
   private final MetricsFilter tMasterMetricsFilter = new MetricsFilter();
-  private final Map<String, Object> sinkConfig = new HashMap<String, Object>();
+  private final Map<String, Object> sinkConfig = new HashMap<>();
   // A scheduled executor service to check whether the TMasterLocation has changed
   // If so, restart the TMasterClientService with the new TMasterLocation
   // Start of TMasterClientService will also be in this thread

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManager.java
Patch:
@@ -100,6 +100,7 @@ protected ListenableFuture<Boolean> deleteData(String path) {
     return future;
   }
 
+  @SuppressWarnings("unchecked") // we don't know what M is until runtime
   protected <M extends Message> ListenableFuture<M> getData(String path, Message.Builder builder) {
     final SettableFuture<M> future = SettableFuture.create();
     byte[] data = FileUtils.readFromFile(path);

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -190,6 +190,7 @@ protected <M extends Message> ListenableFuture<M> getNodeData(
 
     BackgroundCallback cb = new BackgroundCallback() {
       @Override
+      @SuppressWarnings("unchecked") // we don't know what M is until runtime
       public void processResult(CuratorFramework aClient, CuratorEvent event) throws Exception {
         byte[] data;
         if (event != null & (data = event.getData()) != null) {

File: heron/storm/src/java/backtype/storm/utils/Utils.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.List;
 import java.util.Map;
 
+import com.twitter.heron.common.basics.TypeUtils;
+
 // import org.json.simple.JSONValue;
 
 public final class Utils {
@@ -91,7 +93,7 @@ public static Object deserialize(byte[] serialized) {
   }
 
   public static Integer getInt(Object o) {
-    return com.twitter.heron.api.utils.Utils.getInt(o);
+    return TypeUtils.getInt(o);
   }
 
   public static byte[] toByteArray(ByteBuffer buffer) {

File: heron/storm/src/java/org/apache/storm/utils/Utils.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.List;
 import java.util.Map;
 
+import com.twitter.heron.common.basics.TypeUtils;
+
 // import org.json.simple.JSONValue;
 
 public final class Utils {
@@ -91,7 +93,7 @@ public static Object deserialize(byte[] serialized) {
   }
 
   public static Integer getInt(Object o) {
-    return com.twitter.heron.api.utils.Utils.getInt(o);
+    return TypeUtils.getInt(o);
   }
 
   public static byte[] toByteArray(ByteBuffer buffer) {

File: heron/uploaders/src/java/com/twitter/heron/uploader/NullUploader.java
Patch:
@@ -16,8 +16,8 @@
 
 import java.net.URI;
 
+import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Convert;
 import com.twitter.heron.spi.uploader.IUploader;
 
 public class NullUploader implements IUploader {
@@ -29,7 +29,7 @@ public void initialize(Config config) {
   @Override
   public URI uploadPackage() {
     // Construct a URI from valid syntax String
-    return Convert.getURI("null://uploader:9519/w#lanfang");
+    return TypeUtils.getURI("null://uploader:9519/w#lanfang");
   }
 
   @Override

File: heron/uploaders/src/java/com/twitter/heron/uploader/hdfs/HdfsUploader.java
Patch:
@@ -18,9 +18,9 @@
 import java.net.URI;
 import java.util.logging.Logger;
 
+import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
-import com.twitter.heron.spi.common.Convert;
 import com.twitter.heron.spi.uploader.IUploader;
 
 public class HdfsUploader implements IUploader {
@@ -43,7 +43,7 @@ public void initialize(Config ipconfig) {
 
     // name of the destination file is the same as the base name of the topology package file
     String fileName = new File(topologyPackageLocation).getName();
-    packageURI = Convert.getURI(String.format("%s/%s", destTopologyDirectoryURI, fileName));
+    packageURI = TypeUtils.getURI(String.format("%s/%s", destTopologyDirectoryURI, fileName));
   }
 
   @Override

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploader.java
Patch:
@@ -24,8 +24,8 @@
 import java.nio.file.StandardCopyOption;
 import java.util.logging.Logger;
 
+import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Convert;
 import com.twitter.heron.spi.uploader.IUploader;
 
 public class LocalFileSystemUploader implements IUploader {
@@ -55,7 +55,7 @@ protected URI getUri(String filename) {
         .append("file://")
         .append(filename);
 
-    return Convert.getURI(sb.toString());
+    return TypeUtils.getURI(sb.toString());
   }
 
   /**

File: heron/common/src/java/com/twitter/heron/common/config/Config.java
Patch:
@@ -38,15 +38,15 @@ public String getRole() {
   }
 
   public String getEnv() {
-    return this.role;
+    return this.env;
   }
 
   public String getTopologyName() {
     return this.topologyName;
   }
 
   public String getConfigPath() {
-    return this.getConfigPath();
+    return this.configPath;
   }
 
   public static class Builder {

File: integration-test/src/java/com/twitter/heron/integration_test/common/BasicConfig.java
Patch:
@@ -6,6 +6,7 @@
  * A basic configuration for heron topology
  */
 public class BasicConfig extends Config {
+  private static final long serialVersionUID = -3583884076092048052L;
   final static int DEFAULT_NUM_STMGRS = 1;
 
   public BasicConfig() {

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/DoubleTuplesBolt.java
Patch:
@@ -12,6 +12,7 @@
  */
 
 public class DoubleTuplesBolt extends BaseBasicBolt {
+  private static final long serialVersionUID = -3453913602865161439L;
   Fields _fields;
 
   public DoubleTuplesBolt(Fields fields) {

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/IdentityBolt.java
Patch:
@@ -7,6 +7,7 @@
 import com.twitter.heron.api.tuple.Tuple;
 
 public class IdentityBolt extends BaseBasicBolt {
+  private static final long serialVersionUID = 2167298598594517481L;
   Fields _fields;
 
   public IdentityBolt(Fields fields) {

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/JSONTweetFilterBolt.java
Patch:
@@ -23,6 +23,7 @@
  */
 
 public class JSONTweetFilterBolt extends BaseBasicBolt {
+  private static final long serialVersionUID = -7159267336583563993L;
   private static final Logger LOG = Logger.getLogger(JSONTweetFilterBolt.class.getName());
   private static final ObjectMapper mapper = new ObjectMapper();
 

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/LocalWriteBolt.java
Patch:
@@ -23,6 +23,7 @@
 
 
 public class LocalWriteBolt extends BaseBasicBolt {
+  private static final long serialVersionUID = 2320175828567970635L;
   private String path;
   private BufferedWriter bw = null;
 
@@ -31,7 +32,7 @@ public LocalWriteBolt(String path) {
   }
 
   @Override
-  public void prepare(Map map, TopologyContext topologyContext) {
+  public void prepare(Map<String, Object> map, TopologyContext topologyContext) {
     try {
       File outputFile = new File(path);
       if (!outputFile.exists()) {

File: integration-test/src/java/com/twitter/heron/integration_test/common/bolt/TweetPropertyBolt.java
Patch:
@@ -27,6 +27,7 @@
  */
 
 public class TweetPropertyBolt extends BaseBasicBolt {
+  private static final long serialVersionUID = -3049021294446207050L;
   private static final Logger LOG = Logger.getLogger(TweetPropertyBolt.class.getName());
   private static final ObjectMapper mapper = new ObjectMapper();
 

File: integration-test/src/java/com/twitter/heron/integration_test/core/BaseBatchBolt.java
Patch:
@@ -3,5 +3,6 @@
 import com.twitter.heron.api.bolt.BaseRichBolt;
 
 // We keep this since we want to be consistent with earlier framework to reuse test topologies
-public abstract class BaseBatchBolt<T> extends BaseRichBolt implements IBatchBolt<T> {
+public abstract class BaseBatchBolt extends BaseRichBolt implements IBatchBolt {
+  private static final long serialVersionUID = 7380672976877532671L;
 }

File: integration-test/src/java/com/twitter/heron/integration_test/core/IBatchBolt.java
Patch:
@@ -5,7 +5,7 @@
 import com.twitter.heron.api.topology.IComponent;
 
 // We keep this since we want to be consistent with earlier framework to reuse test topologies
-public interface IBatchBolt<T> extends Serializable, IComponent {
+public interface IBatchBolt extends Serializable, IComponent {
   /**
    * Invoke finishBatch() when the bolt is done, e.g. receives corresponding terminal signals
    */

File: integration-test/src/java/com/twitter/heron/integration_test/core/ITerminalBolt.java
Patch:
@@ -3,7 +3,7 @@
 import java.io.Serializable;
 
 // We keep this since we want to be consistent with earlier framework to reuse test topologies
-public interface ITerminalBolt<T> extends Serializable {
+public interface ITerminalBolt extends Serializable {
   /**
    * Invoke to write all aggregated data to the destination
    * Destination can be http URL, local file, hdfs, etc.

File: integration-test/src/java/com/twitter/heron/integration_test/core/IntegrationTestBolt.java
Patch:
@@ -18,6 +18,7 @@
 import com.twitter.heron.api.tuple.Values;
 
 public class IntegrationTestBolt implements IRichBolt {
+  private static final long serialVersionUID = 6304554167838679097L;
   private static final Logger LOG = Logger.getLogger(IntegrationTestBolt.class.getName());
   private final IRichBolt delegateBolt;
   private int terminalsToReceive = 0;

File: heron/api/src/java/com/twitter/heron/api/bolt/OutputCollector.java
Patch:
@@ -58,7 +58,7 @@ public List<Integer> emit(String streamId, Tuple anchor, List<Object> tuple) {
    * @return the list of task ids that this new tuple was sent to
    */
   public List<Integer> emit(String streamId, List<Object> tuple) {
-    return emit(streamId, (List) null, tuple);
+    return emit(streamId, (Collection<Tuple>) null, tuple);
   }
 
   /**
@@ -130,7 +130,7 @@ public void emitDirect(int taskId, String streamId, Tuple anchor, List<Object> t
    * @param tuple the new output tuple from this bolt
    */
   public void emitDirect(int taskId, String streamId, List<Object> tuple) {
-    emitDirect(taskId, streamId, (List) null, tuple);
+    emitDirect(taskId, streamId, (Collection<Tuple>) null, tuple);
   }
 
   /**

File: heron/api/src/java/com/twitter/heron/api/topology/TopologyContext.java
Patch:
@@ -111,5 +111,7 @@ public Object getExecutorData(String name) {
   /*
    * Convenience method for registering CombinedMetric.
    */
-  <T> CombinedMetric<T> registerMetric(String name, ICombiner<T> combiner, int timeBucketSizeInSecs);
+  <T> CombinedMetric<T> registerMetric(String name,
+                                       ICombiner<T> combiner,
+                                       int timeBucketSizeInSecs);
 }

File: heron/common/src/java/com/twitter/heron/common/config/ConfigReader.java
Patch:
@@ -95,6 +95,7 @@ public static Map<String, Object> loadFile(String fileName) {
    *
    * @return Map, contains the key value pairs of config
    */
+  @SuppressWarnings("unchecked") // yaml.load API returns raw Map
   public static Map<String, Object> loadStream(InputStream inputStream) {
     LOG.fine("Reading config stream");
 

File: heron/storm/src/java/backtype/storm/serialization/DefaultKryoFactory.java
Patch:
@@ -53,6 +53,7 @@ public void overrideDefault(boolean value) {
     }
 
     @Override
+    @SuppressWarnings("rawtypes") // superclass doesn't use types
     public Serializer getDefaultSerializer(Class type) {
       if (override) {
         return new SerializableSerializer();

File: heron/storm/src/java/backtype/storm/serialization/SerializableSerializer.java
Patch:
@@ -44,7 +44,7 @@ public void write(Kryo kryo, Output output, Object object) {
   }
 
   @Override
-  public Object read(Kryo kryo, Input input, Class c) {
+  public Object read(Kryo kryo, Input input, Class<Object> c) {
     int len = input.readInt();
     byte[] ser = new byte[len];
     input.readBytes(ser);

File: heron/storm/src/java/backtype/storm/task/IMetricsContext.java
Patch:
@@ -26,5 +26,7 @@ public interface IMetricsContext {
 
   <T> ReducedMetric<T> registerMetric(String name, IReducer<T> reducer, int timeBucketSizeInSecs);
 
-  <T> CombinedMetric<T> registerMetric(String name, ICombiner<T> combiner, int timeBucketSizeInSecs);
+  <T> CombinedMetric<T> registerMetric(String name,
+                                       ICombiner<T> combiner,
+                                       int timeBucketSizeInSecs);
 }

File: heron/storm/src/java/backtype/storm/topology/InputDeclarer.java
Patch:
@@ -19,7 +19,7 @@
 
 //import backtype.storm.generated.Grouping;
 
-public interface InputDeclarer<T extends InputDeclarer> {
+public interface InputDeclarer<T extends InputDeclarer<?>> {
   T fieldsGrouping(String componentId, Fields fields);
 
   T fieldsGrouping(String componentId, String streamId, Fields fields);

File: heron/storm/src/java/backtype/storm/utils/Utils.java
Patch:
@@ -29,7 +29,7 @@ private Utils() {
 
   public static Object newInstance(String klass) {
     try {
-      Class c = Class.forName(klass);
+      Class<?> c = Class.forName(klass);
       return c.newInstance();
     } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
       throw new RuntimeException(e);

File: heron/storm/src/java/org/apache/storm/serialization/DefaultKryoFactory.java
Patch:
@@ -53,6 +53,7 @@ public void overrideDefault(boolean value) {
     }
 
     @Override
+    @SuppressWarnings("rawtypes") // superclass doesn't use types
     public Serializer getDefaultSerializer(Class type) {
       if (override) {
         return new SerializableSerializer();

File: heron/storm/src/java/org/apache/storm/serialization/SerializableSerializer.java
Patch:
@@ -44,7 +44,7 @@ public void write(Kryo kryo, Output output, Object object) {
   }
 
   @Override
-  public Object read(Kryo kryo, Input input, Class c) {
+  public Object read(Kryo kryo, Input input, Class<Object> c) {
     int len = input.readInt();
     byte[] ser = new byte[len];
     input.readBytes(ser);

File: heron/storm/src/java/org/apache/storm/task/IMetricsContext.java
Patch:
@@ -26,5 +26,7 @@ public interface IMetricsContext {
 
   <T> ReducedMetric<T> registerMetric(String name, IReducer<T> reducer, int timeBucketSizeInSecs);
 
-  <T> CombinedMetric<T> registerMetric(String name, ICombiner<T> combiner, int timeBucketSizeInSecs);
+  <T> CombinedMetric<T> registerMetric(String name,
+                                       ICombiner<T> combiner,
+                                       int timeBucketSizeInSecs);
 }

File: heron/storm/src/java/org/apache/storm/topology/InputDeclarer.java
Patch:
@@ -19,7 +19,7 @@
 
 //import org.apache.storm.generated.Grouping;
 
-public interface InputDeclarer<T extends InputDeclarer> {
+public interface InputDeclarer<T extends InputDeclarer<?>> {
   T fieldsGrouping(String componentId, Fields fields);
 
   T fieldsGrouping(String componentId, String streamId, Fields fields);

File: heron/storm/src/java/org/apache/storm/utils/Utils.java
Patch:
@@ -29,7 +29,7 @@ private Utils() {
 
   public static Object newInstance(String klass) {
     try {
-      Class c = Class.forName(klass);
+      Class<?> c = Class.forName(klass);
       return c.newInstance();
     } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
       throw new RuntimeException(e);

File: heron/api/src/java/com/twitter/heron/api/topology/BaseComponentDeclarer.java
Patch:
@@ -23,7 +23,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.api.utils.Utils;
 
-public abstract class BaseComponentDeclarer<T extends ComponentConfigurationDeclarer>
+public abstract class BaseComponentDeclarer<T extends ComponentConfigurationDeclarer<?>>
     extends BaseConfigurationDeclarer<T> {
   private String name;
   private IComponent component;

File: heron/api/src/java/com/twitter/heron/api/topology/BaseConfigurationDeclarer.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.twitter.heron.api.Config;
 
-public abstract class BaseConfigurationDeclarer<T extends ComponentConfigurationDeclarer>
+public abstract class BaseConfigurationDeclarer<T extends ComponentConfigurationDeclarer<?>>
     implements ComponentConfigurationDeclarer<T> {
   @Override
   public T addConfiguration(String config, Object value) {

File: heron/api/src/java/com/twitter/heron/api/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -16,7 +16,7 @@
 
 import java.util.Map;
 
-public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer> {
+public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer<?>> {
   T addConfigurations(Map<String, Object> conf);
 
   T addConfiguration(String config, Object value);

File: heron/storm/src/java/backtype/storm/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -16,7 +16,7 @@
 
 import java.util.Map;
 
-public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer> {
+public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer<?>> {
   T addConfigurations(Map<String, Object> conf);
 
   T addConfiguration(String config, Object value);

File: heron/storm/src/java/org/apache/storm/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -16,7 +16,7 @@
 
 import java.util.Map;
 
-public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer> {
+public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer<?>> {
   T addConfigurations(Map<String, Object> conf);
 
   T addConfiguration(String config, Object value);

File: heron/api/src/java/com/twitter/heron/api/topology/TopologyContext.java
Patch:
@@ -106,10 +106,10 @@ public Object getExecutorData(String name) {
   /*
    * Convenience method for registering ReducedMetric.
    */
-  ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs);
+  <T> ReducedMetric<T> registerMetric(String name, IReducer<T> reducer, int timeBucketSizeInSecs);
 
   /*
    * Convenience method for registering CombinedMetric.
    */
-  CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs);
+  <T> CombinedMetric<T> registerMetric(String name, ICombiner<T> combiner, int timeBucketSizeInSecs);
 }

File: heron/storm/src/java/backtype/storm/task/IMetricsContext.java
Patch:
@@ -24,7 +24,7 @@
 public interface IMetricsContext {
   <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs);
 
-  ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs);
+  <T> ReducedMetric<T> registerMetric(String name, IReducer<T> reducer, int timeBucketSizeInSecs);
 
-  CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs);
+  <T> CombinedMetric<T> registerMetric(String name, ICombiner<T> combiner, int timeBucketSizeInSecs);
 }

File: heron/storm/src/java/org/apache/storm/task/IMetricsContext.java
Patch:
@@ -24,7 +24,7 @@
 public interface IMetricsContext {
   <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs);
 
-  ReducedMetric registerMetric(String name, IReducer reducer, int timeBucketSizeInSecs);
+  <T> ReducedMetric<T> registerMetric(String name, IReducer<T> reducer, int timeBucketSizeInSecs);
 
-  CombinedMetric registerMetric(String name, ICombiner combiner, int timeBucketSizeInSecs);
+  <T> CombinedMetric<T> registerMetric(String name, ICombiner<T> combiner, int timeBucketSizeInSecs);
 }

File: tools/java/src/com/twitter/bazel/checkstyle/CppCheckstyle.java
Patch:
@@ -132,7 +132,8 @@ private static Collection<String> getSourceFiles(String extraActionFile) {
             Predicates.and(
                     Predicates.not(Predicates.containsPattern("3rdparty/")),
                     Predicates.not(Predicates.containsPattern("config/heron-config.h")),
-                    Predicates.not(Predicates.containsPattern("heron/proto/"))
+                    Predicates.not(Predicates.containsPattern(".*pb.h$")),
+                    Predicates.not(Predicates.containsPattern(".*pb.cc$"))
             )
     );
   }

File: heron/spi/src/java/com/twitter/heron/spi/common/Jars.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.regex.Pattern;
 
 public final class Jars {
+  private static final Logger LOG = Logger.getLogger(Jars.class.getName());
 
   // scheduler jar search pattern
   private static Pattern schedulerJarPattern =

File: heron/spi/src/java/com/twitter/heron/spi/common/Resource.java
Patch:
@@ -34,7 +34,9 @@ private Resource() {
    *
    * @return Map, a map of key value pairs
    */
-  public static Map<String, Object> load(String className, String resName) throws ClassNotFoundException {
+  public static Map<String, Object> load(String className, String resName)
+      throws ClassNotFoundException {
+
     // get the class loader for current class
     ClassLoader cLoader = Class.forName(className).getClassLoader();
 

File: heron/storm/src/java/backtype/storm/Config.java
Patch:
@@ -309,7 +309,9 @@ public static void registerSerialization(
     getRegisteredSerializations(conf).add(register);
   }
 
-  public static void registerDecorator(Map<String, Object> conf, Class<? extends IKryoDecorator> klass) {
+  public static void registerDecorator(
+      Map<String, Object> conf,
+      Class<? extends IKryoDecorator> klass) {
     getRegisteredDecorators(conf).add(klass.getName());
   }
 

File: heron/storm/src/java/org/apache/storm/Config.java
Patch:
@@ -305,7 +305,9 @@ public static void registerSerialization(
     getRegisteredSerializations(conf).add(register);
   }
 
-  public static void registerDecorator(Map<String, Object> conf, Class<? extends IKryoDecorator> klass) {
+  public static void registerDecorator(
+      Map<String, Object> conf,
+      Class<? extends IKryoDecorator> klass) {
     getRegisteredDecorators(conf).add(klass.getName());
   }
 

File: heron/api/src/java/com/twitter/heron/api/bolt/BaseBasicBolt.java
Patch:
@@ -24,7 +24,7 @@ public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt
   private static final long serialVersionUID = 6585146860997305058L;
 
   @Override
-  public void prepare(Map heronConf, TopologyContext context) {
+  public void prepare(Map<String, Object> heronConf, TopologyContext context) {
   }
 
   @Override

File: heron/api/src/java/com/twitter/heron/api/bolt/BasicBoltExecutor.java
Patch:
@@ -39,7 +39,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
 
 
   @Override
-  public void prepare(Map heronConf, TopologyContext context, OutputCollector aCollector) {
+  public void prepare(Map<String, Object> heronConf, TopologyContext context, OutputCollector aCollector) {
     bolt.prepare(heronConf, context);
     collector = new BasicOutputCollector(aCollector);
   }

File: heron/api/src/java/com/twitter/heron/api/bolt/IBasicBolt.java
Patch:
@@ -21,7 +21,7 @@
 import com.twitter.heron.api.tuple.Tuple;
 
 public interface IBasicBolt extends IComponent {
-  void prepare(Map heronConf, TopologyContext context);
+  void prepare(Map<String, Object> heronConf, TopologyContext context);
 
   /**
    * Process the input tuple and optionally emit new tuples based on the input tuple.

File: heron/api/src/java/com/twitter/heron/api/bolt/IBolt.java
Patch:
@@ -51,7 +51,7 @@ public interface IBolt extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this bolt. Tuples can be emitted at any time, including the prepare and cleanup methods. The collector is thread-safe and should be saved as an instance variable of this bolt object.
    */
-  void prepare(Map heronConf, TopologyContext context, OutputCollector collector);
+  void prepare(Map<String, Object> heronConf, TopologyContext context, OutputCollector collector);
 
   /**
    * Process a single tuple of input. The Tuple object contains metadata on it

File: heron/api/src/java/com/twitter/heron/api/hooks/BaseTaskHook.java
Patch:
@@ -26,7 +26,7 @@
 
 public class BaseTaskHook implements ITaskHook {
   @Override
-  public void prepare(Map conf, TopologyContext context) {
+  public void prepare(Map<String, Object> conf, TopologyContext context) {
   }
 
   @Override

File: heron/api/src/java/com/twitter/heron/api/hooks/ITaskHook.java
Patch:
@@ -29,7 +29,7 @@ public interface ITaskHook {
    * Called after the spout/bolt's open/prepare method is called
    * conf is the Config thats passed to the topology
    */
-  void prepare(Map conf, TopologyContext context);
+  void prepare(Map<String, Object> conf, TopologyContext context);
 
   /**
    * Called just before the spout/bolt's cleanup method is called.

File: heron/api/src/java/com/twitter/heron/api/metric/MultiAssignableMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiAssignableMetric implements IMetric {
-  private Map<String, AssignableMetric> value = new HashMap();
+  private final Map<String, AssignableMetric> value = new HashMap<>();
 
   public MultiAssignableMetric() {
 
@@ -45,7 +45,7 @@ public AssignableMetric safeScope(String key) {
 
   @Override
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     synchronized (value) {
       for (Map.Entry<String, AssignableMetric> e : value.entrySet()) {
         ret.put(e.getKey(), e.getValue().getValueAndReset());

File: heron/api/src/java/com/twitter/heron/api/metric/MultiCountMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiCountMetric implements IMetric {
-  private Map<String, CountMetric> value = new HashMap();
+  private Map<String, CountMetric> value = new HashMap<>();
 
   public MultiCountMetric() {
   }
@@ -32,7 +32,7 @@ public CountMetric scope(String key) {
   }
 
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     for (Map.Entry<String, CountMetric> e : value.entrySet()) {
       ret.put(e.getKey(), e.getValue().getValueAndReset());
     }

File: heron/api/src/java/com/twitter/heron/api/metric/MultiReducedMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiReducedMetric implements IMetric {
-  private Map<String, ReducedMetric> value = new HashMap();
+  private Map<String, ReducedMetric> value = new HashMap<>();
   private IReducer reducer;
 
   public MultiReducedMetric(IReducer aReducer) {
@@ -34,7 +34,7 @@ public ReducedMetric scope(String key) {
   }
 
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     for (Map.Entry<String, ReducedMetric> e : value.entrySet()) {
       Object val = e.getValue().getValueAndReset();
       if (val != null) {

File: heron/api/src/java/com/twitter/heron/api/serializer/IPluggableSerializer.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 
 public interface IPluggableSerializer {
-  void initialize(Map config);
+  void initialize(Map<String, Object> config);
 
   byte[] serialize(Object object);
 

File: heron/api/src/java/com/twitter/heron/api/serializer/JavaSerializer.java
Patch:
@@ -24,7 +24,7 @@
 public class JavaSerializer implements IPluggableSerializer {
 
   @Override
-  public void initialize(Map config) {
+  public void initialize(Map<String, Object> config) {
   }
 
   @Override

File: heron/api/src/java/com/twitter/heron/api/serializer/KryoSerializer.java
Patch:
@@ -29,7 +29,7 @@ public KryoSerializer() {
   }
 
   @Override
-  public void initialize(Map config) {
+  public void initialize(Map<String, Object> config) {
     kryo = new Kryo();
     kryo.setReferences(false);
     kryoOut = new Output(2000, 2000000000);

File: heron/api/src/java/com/twitter/heron/api/spout/ISpout.java
Patch:
@@ -52,7 +52,7 @@ public interface ISpout extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this spout. Tuples can be emitted at any time, including the open and close methods. The collector is thread-safe and should be saved as an instance variable of this spout object.
    */
-  void open(Map conf, TopologyContext context, SpoutOutputCollector collector);
+  void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector);
 
   /**
    * Called when an ISpout is going to be shutdown. There is no guarentee that close

File: heron/api/src/java/com/twitter/heron/api/topology/BaseComponentDeclarer.java
Patch:
@@ -27,15 +27,14 @@ public abstract class BaseComponentDeclarer<T extends ComponentConfigurationDecl
     extends BaseConfigurationDeclarer<T> {
   private String name;
   private IComponent component;
-  private OutputFieldsGetter output;
   private Map<String, Object> componentConfiguration;
 
   public BaseComponentDeclarer(String name, IComponent comp, Number taskParallelism) {
     this.name = name;
     this.component = comp;
     this.componentConfiguration = comp.getComponentConfiguration();
     if (this.componentConfiguration == null) {
-      this.componentConfiguration = new HashMap<String, Object>();
+      this.componentConfiguration = new HashMap<>();
     }
     if (taskParallelism != null) {
       this.componentConfiguration.put(Config.TOPOLOGY_COMPONENT_PARALLELISM,
@@ -53,7 +52,7 @@ protected String getName() {
   }
 
   @Override
-  public T addConfigurations(Map conf) {
+  public T addConfigurations(Map<String, Object> conf) {
     componentConfiguration.putAll(conf);
     return returnThis();
   }

File: heron/api/src/java/com/twitter/heron/api/topology/BaseConfigurationDeclarer.java
Patch:
@@ -23,7 +23,7 @@ public abstract class BaseConfigurationDeclarer<T extends ComponentConfiguration
     implements ComponentConfigurationDeclarer<T> {
   @Override
   public T addConfiguration(String config, Object value) {
-    Map configMap = new HashMap();
+    Map<String, Object> configMap = new HashMap<>();
     configMap.put(config, value);
     return addConfigurations(configMap);
   }

File: heron/api/src/java/com/twitter/heron/api/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 
 public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer> {
-  T addConfigurations(Map conf);
+  T addConfigurations(Map<String, Object> conf);
 
   T addConfiguration(String config, Object value);
 

File: heron/examples/src/java/com/twitter/heron/examples/AckingTopology.java
Patch:
@@ -75,7 +75,7 @@ public static class AckingTestWordSpout extends BaseRichSpout {
     public AckingTestWordSpout() {
     }
 
-    public void open(Map conf, TopologyContext context, SpoutOutputCollector acollector) {
+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector acollector) {
       collector = acollector;
       words = new String[]{"nathan", "mike", "jackson", "golda", "bertels"};
       rand = new Random();
@@ -112,7 +112,7 @@ public static class ExclamationBolt extends BaseRichBolt {
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
+    public void prepare(Map<String, Object> conf, TopologyContext context, OutputCollector acollector) {
       collector = acollector;
       nItems = 0;
       startTime = System.currentTimeMillis();

File: heron/examples/src/java/com/twitter/heron/examples/ComponentJVMOptionsTopology.java
Patch:
@@ -75,7 +75,7 @@ public static class ExclamationBolt extends BaseRichBolt {
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
+    public void prepare(Map<String, Object> conf, TopologyContext context, OutputCollector collector) {
       nItems = 0;
       startTime = System.currentTimeMillis();
     }

File: heron/examples/src/java/com/twitter/heron/examples/CustomGroupingTopology.java
Patch:
@@ -56,7 +56,7 @@ public static class MyBolt extends BaseRichBolt {
     private long nItems;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
+    public void prepare(Map<String, Object> conf, TopologyContext context, OutputCollector acollector) {
       nItems = 0;
     }
 

File: heron/examples/src/java/com/twitter/heron/examples/ExclamationTopology.java
Patch:
@@ -71,7 +71,7 @@ public static class ExclamationBolt extends BaseRichBolt {
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
+    public void prepare(Map<String, Object> conf, TopologyContext context, OutputCollector collector) {
       nItems = 0;
       startTime = System.currentTimeMillis();
     }

File: heron/examples/src/java/com/twitter/heron/examples/MultiSpoutExclamationTopology.java
Patch:
@@ -76,7 +76,8 @@ public static class ExclamationBolt extends BaseRichBolt {
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
+    public void prepare(Map<String, Object> conf,
+                        TopologyContext context, OutputCollector collector) {
       nItems = 0;
       startTime = System.currentTimeMillis();
     }

File: heron/examples/src/java/com/twitter/heron/examples/MultiStageAckingTopology.java
Patch:
@@ -75,7 +75,7 @@ public static class AckingTestWordSpout extends BaseRichSpout {
     public AckingTestWordSpout() {
     }
 
-    public void open(Map conf, TopologyContext context, SpoutOutputCollector acollector) {
+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector acollector) {
       collector = acollector;
       words = new String[]{"nathan", "mike", "jackson", "golda", "bertels"};
       rand = new Random();
@@ -115,7 +115,7 @@ public ExclamationBolt(boolean emit) {
     }
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
+    public void prepare(Map<String, Object> conf, TopologyContext context, OutputCollector acollector) {
       collector = acollector;
       nItems = 0;
       startTime = System.currentTimeMillis();

File: heron/examples/src/java/com/twitter/heron/examples/TaskHookTopology.java
Patch:
@@ -94,7 +94,7 @@ public TestTaskHook(String constructString) {
     }
 
     @Override
-    public void prepare(Map conf, TopologyContext context) {
+    public void prepare(Map<String, Object> conf, TopologyContext context) {
       GlobalMetrics.incr("hook_prepare");
       System.out.println(constructString);
       System.out.println("prepare() is invoked in hook");
@@ -191,7 +191,7 @@ public static class AckingTestWordSpout extends BaseRichSpout {
     public AckingTestWordSpout() {
     }
 
-    public void open(Map conf, TopologyContext context, SpoutOutputCollector acollector) {
+    public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector acollector) {
       collector = acollector;
       words = new String[]{"nathan", "mike", "jackson", "golda", "bertels"};
       rand = new Random();
@@ -230,7 +230,7 @@ public static class CountBolt extends BaseRichBolt {
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
+    public void prepare(Map<String, Object> conf, TopologyContext context, OutputCollector acollector) {
       collector = acollector;
       nItems = 0;
       startTime = System.currentTimeMillis();

File: heron/examples/src/java/com/twitter/heron/examples/TestWordSpout.java
Patch:
@@ -31,7 +31,7 @@ public class TestWordSpout extends BaseRichSpout {
   private String[] words;
   private Random rand;
 
-  public void open(Map conf, TopologyContext context, SpoutOutputCollector acollector) {
+  public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector acollector) {
     collector = acollector;
     words = new String[]{"nathan", "mike", "jackson", "golda", "bertels"};
     rand = new Random();

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
Patch:
@@ -164,7 +164,7 @@ private void handleDataTuple(HeronTuples.HeronDataTuple dataTuple,
                                TopologyAPI.StreamId stream) {
     long startTime = System.nanoTime();
 
-    List<Object> values = new ArrayList<Object>();
+    List<Object> values = new ArrayList<>();
     for (ByteString b : dataTuple.getValuesList()) {
       values.add(serializer.deserialize(b.toByteArray()));
     }

File: heron/instance/tests/java/com/twitter/heron/metrics/GlobalMetricsTest.java
Patch:
@@ -45,7 +45,7 @@ public void testGlobalMetrics() {
     GlobalMetrics.incr("mycounter");
     Object value = GlobalMetrics.getUnderlyingCounter().getValueAndReset();
     assertTrue(value instanceof Map);
-    Map metricsContent = (Map) value;
+    Map<String, Object> metricsContent = (Map<String, Object>) value;
     assertTrue(metricsContent.containsKey("mycounter"));
     assertEquals(1, metricsContent.size());
     assertEquals(1L, metricsContent.get("mycounter"));
@@ -54,7 +54,7 @@ public void testGlobalMetrics() {
     GlobalMetrics.incr("mycounter1");
     GlobalMetrics.incr("mycounter2");
     GlobalMetrics.incr("mycounter1");
-    metricsContent = (Map) GlobalMetrics.getUnderlyingCounter().getValueAndReset();
+    metricsContent = (Map<String, Object>) GlobalMetrics.getUnderlyingCounter().getValueAndReset();
     assertTrue(metricsContent.containsKey("mycounter"));
     assertTrue(metricsContent.containsKey("mycounter1"));
     assertTrue(metricsContent.containsKey("mycounter2"));

File: heron/instance/tests/java/com/twitter/heron/metrics/MultiAssignableMetricTest.java
Patch:
@@ -31,15 +31,15 @@ public void testMultiAssignableMetrics() {
     multiAssignableMetric.scope("metric_a").setValue(100);
     multiAssignableMetric.scope("metric_b").setValue(200);
 
-    Map ret = (Map) multiAssignableMetric.getValueAndReset();
+    Map<String, Object> ret = (Map<String, Object>) multiAssignableMetric.getValueAndReset();
     Assert.assertEquals(ret.get("metric_a"), 100);
     Assert.assertEquals(ret.get("metric_b"), 200);
 
     // Re-assign by synchronized safeScope
     multiAssignableMetric.safeScope("metric_a").setValue(300);
     multiAssignableMetric.safeScope("metric_b").setValue(400);
 
-    ret = (Map) multiAssignableMetric.getValueAndReset();
+    ret = (Map<String, Object>) multiAssignableMetric.getValueAndReset();
     Assert.assertEquals(ret.get("metric_a"), 300);
     Assert.assertEquals(ret.get("metric_b"), 400);
   }

File: heron/instance/tests/java/com/twitter/heron/resource/TestBolt.java
Patch:
@@ -42,7 +42,7 @@ public class TestBolt extends BaseRichBolt {
   private int tupleExecuted = 0;
 
   @Override
-  public void prepare(Map map, TopologyContext topologyContext, OutputCollector collector) {
+  public void prepare(Map<String, Object> map, TopologyContext topologyContext, OutputCollector collector) {
     this.outputCollector = collector;
   }
 

File: heron/instance/tests/java/com/twitter/heron/resource/TestSpout.java
Patch:
@@ -58,7 +58,7 @@ public Map<String, Object> getComponentConfiguration() {
 
   @Override
   public void open(
-      Map map,
+      Map<String, Object> map,
       TopologyContext topologyContext,
       SpoutOutputCollector spoutOutputCollector) {
     this.outputCollector = spoutOutputCollector;

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/BoltInstance.java
Patch:
@@ -163,7 +163,7 @@ private void handleDataTuple(HeronTuples.HeronDataTuple dataTuple,
                                TopologyAPI.StreamId stream) {
     long startTime = System.nanoTime();
 
-    List<Object> values = new ArrayList<Object>();
+    List<Object> values = new ArrayList<>();
     for (ByteString b : dataTuple.getValuesList()) {
       values.add(serializer.deserialize(b.toByteArray()));
     }

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/PhysicalPlanUtilTest.java
Patch:
@@ -80,7 +80,7 @@ public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
 
       @Override
       public void open(
-          Map map,
+          Map<String, Object> map,
           TopologyContext topologyContext,
           SpoutOutputCollector spoutOutputCollector) {
       }

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsSinksConfig.java
Patch:
@@ -37,7 +37,7 @@ public class MetricsSinksConfig {
   public MetricsSinksConfig(String filename) throws FileNotFoundException {
     FileInputStream fin = new FileInputStream(new File(filename));
     Yaml yaml = new Yaml();
-    Map ret = (Map) yaml.load(fin);
+    Map<Object, Object> ret = (Map<Object, Object>) yaml.load(fin);
 
     if (ret == null) {
       throw new RuntimeException("Could not parse metrics-sinks config file");
@@ -68,6 +68,6 @@ public Map<String, Object> getConfigForSink(String sinkId) {
   }
 
   public List<String> getSinkIds() {
-    return new ArrayList<String>(sinksConfigs.keySet());
+    return new ArrayList<>(sinksConfigs.keySet());
   }
 }

File: heron/newscheduler/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java
Patch:
@@ -60,7 +60,7 @@ public static TopologyAPI.Topology createTopology(com.twitter.heron.api.Config h
       public void declareOutputFields(OutputFieldsDeclarer declarer) {
       }
 
-      public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
+      public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {
       }
 
       public void nextTuple() {

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalDefaults.java
Patch:
@@ -27,7 +27,7 @@ private LocalDefaults() {
   private static final Logger LOG = Logger.getLogger(LocalDefaults.class.getName());
 
   // holds the mapping between the config keys and their default values
-  private static Map defaults;
+  private static Map<String, Object> defaults;
 
   // load the resource for default config key values
   static {

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalKeys.java
Patch:
@@ -27,7 +27,7 @@ private LocalKeys() {
   }
 
   // holds the mapping of keys to their corresponding key strings
-  private static Map keys;
+  private static Map<String, Object> keys;
 
   // load the resource for config keys
   static {

File: heron/spi/src/java/com/twitter/heron/spi/common/Config.java
Patch:
@@ -24,7 +24,7 @@
  */
 // SUPPRESS CHECKSTYLE
 public class Config {
-  private final Map<String, Object> cfgMap = new HashMap();
+  private final Map<String, Object> cfgMap = new HashMap<>();
 
   protected Config(Builder build) {
     cfgMap.putAll(build.keyValues);
@@ -136,7 +136,7 @@ public String toString() {
   }
 
   public static class Builder {
-    private final Map<String, Object> keyValues = new HashMap();
+    private final Map<String, Object> keyValues = new HashMap<>();
 
     private static Config.Builder create() {
       return new Builder();

File: heron/spi/src/java/com/twitter/heron/spi/common/ConfigDefaults.java
Patch:
@@ -21,7 +21,7 @@ public final class ConfigDefaults {
   private static final Logger LOG = Logger.getLogger(ConfigDefaults.class.getName());
 
   // holds the mapping between the config keys and their default values
-  protected static Map defaults;
+  protected static Map<String, Object> defaults;
 
   // load the resource for default config key values
   static {

File: heron/spi/src/java/com/twitter/heron/spi/common/ConfigKeys.java
Patch:
@@ -21,7 +21,7 @@ public final class ConfigKeys {
   private static final Logger LOG = Logger.getLogger(ConfigKeys.class.getName());
 
   // holds the mapping of keys to their corresponding key strings
-  protected static Map keys;
+  protected static Map<String, Object> keys;
 
   // load the resource for config keys
   static {

File: heron/spi/src/java/com/twitter/heron/spi/utils/TopologyTests.java
Patch:
@@ -59,7 +59,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
         declarer.declare(new Fields("field1"));
       }
 
-      public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
+      public void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector) {
       }
 
       public void nextTuple() {

File: heron/spi/tests/java/com/twitter/heron/spi/common/ConfigKeysDefaultsTest.java
Patch:
@@ -28,7 +28,7 @@ public class ConfigKeysDefaultsTest {
    */
   @Test
   public void testConfigKeysDefaults() throws Exception {
-    Map<String, String> keys = ConfigKeys.keys;
+    Map<String, Object> keys = ConfigKeys.keys;
     Map<String, Object> defaults = ConfigDefaults.defaults;
 
     for (Map.Entry<String, Object> entry : defaults.entrySet()) {

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemConfigKeys.java
Patch:
@@ -15,15 +15,13 @@
 package com.twitter.heron.statemgr.localfs;
 
 import java.util.Map;
-import java.util.logging.Logger;
 
 import com.twitter.heron.spi.common.Resource;
 
 final class LocalFileSystemConfigKeys {
-  private static final Logger LOG = Logger.getLogger(LocalFileSystemConfigKeys.class.getName());
 
   // holds the mapping of keys to their corresponding key strings
-  private static Map keys;
+  private static Map<String, Object> keys;
 
   // load the resource for config keys
   static {

File: heron/storm/src/java/backtype/storm/ILocalCluster.java
Patch:
@@ -29,13 +29,12 @@
 
 
 public interface ILocalCluster {
-  void submitTopology(String topologyName, Map conf, StormTopology topology) throws
+  void submitTopology(String topologyName, Map<String, Object> conf, StormTopology topology) throws
       AlreadyAliveException, InvalidTopologyException;
 
   // void submitTopologyWithOpts(
   //  String topologyName, Map conf, StormTopology topology, SubmitOptions submitOpts) throws
   // AlreadyAliveException, InvalidTopologyException;
-
   void killTopology(String topologyName) throws NotAliveException;
 
   // void killTopologyWithOpts(String name, KillOptions options) throws NotAliveException;
@@ -52,5 +51,6 @@ void submitTopology(String topologyName, Map conf, StormTopology topology) throw
 
   // ClusterSummary getClusterInfo();
   // TopologyInfo getTopologyInfo(String id);
+  @SuppressWarnings("rawtypes")
   Map getState();
 }

File: heron/storm/src/java/backtype/storm/LocalCluster.java
Patch:
@@ -27,7 +27,7 @@
 public class LocalCluster implements ILocalCluster {
   private final LocalMode localMode;
   private String topologyName;
-  private Map conf;
+  private Map<String, Object> conf;
   private StormTopology topology;
 
   public LocalCluster() {
@@ -37,7 +37,7 @@ public LocalCluster() {
 
   @Override
   public void submitTopology(String topoName,
-                             Map config,
+                             Map<String, Object> config,
                              StormTopology stormTopology)
       throws AlreadyAliveException, InvalidTopologyException {
     assertNotAlive();
@@ -97,6 +97,7 @@ public StormTopology getTopology(String topoName) {
   }
 
   @Override
+  @SuppressWarnings("rawtypes")
   public Map getState() {
     throw new RuntimeException("Heron does not support LocalCluster yet...");
   }

File: heron/storm/src/java/backtype/storm/StormSubmitter.java
Patch:
@@ -43,7 +43,7 @@ private StormSubmitter() {
    * @throws AlreadyAliveException if a topology with this name is already running
    * @throws InvalidTopologyException if an invalid topology was submitted
    */
-  public static void submitTopology(String name, Map stormConfig, StormTopology topology)
+  public static void submitTopology(String name, Map<String, Object> stormConfig, StormTopology topology)
       throws AlreadyAliveException, InvalidTopologyException {
 
     // First do config translation

File: heron/storm/src/java/backtype/storm/hooks/BaseTaskHook.java
Patch:
@@ -26,7 +26,7 @@
 
 public class BaseTaskHook implements ITaskHook {
   @Override
-  public void prepare(Map conf, TopologyContext context) {
+  public void prepare(Map<String, Object> conf, TopologyContext context) {
   }
 
   @Override

File: heron/storm/src/java/backtype/storm/hooks/ITaskHook.java
Patch:
@@ -25,7 +25,7 @@
 import backtype.storm.task.TopologyContext;
 
 public interface ITaskHook {
-  void prepare(Map conf, TopologyContext context);
+  void prepare(Map<String, Object> conf, TopologyContext context);
 
   void cleanup();
 

File: heron/storm/src/java/backtype/storm/metric/api/MultiCountMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiCountMetric implements IMetric {
-  private Map<String, CountMetric> value = new HashMap();
+  private Map<String, CountMetric> value = new HashMap<>();
 
   public MultiCountMetric() {
   }
@@ -32,7 +32,7 @@ public CountMetric scope(String key) {
   }
 
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     for (Map.Entry<String, CountMetric> e : value.entrySet()) {
       ret.put(e.getKey(), e.getValue().getValueAndReset());
     }

File: heron/storm/src/java/backtype/storm/metric/api/MultiReducedMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiReducedMetric implements IMetric {
-  private Map<String, ReducedMetric> value = new HashMap();
+  private Map<String, ReducedMetric> value = new HashMap<>();
   private IReducer reducer;
 
   public MultiReducedMetric(IReducer reducer) {
@@ -34,7 +34,7 @@ public ReducedMetric scope(String key) {
   }
 
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     for (Map.Entry<String, ReducedMetric> e : value.entrySet()) {
       Object val = e.getValue().getValueAndReset();
       if (val != null) {

File: heron/storm/src/java/backtype/storm/serialization/HeronPluggableSerializerDelegate.java
Patch:
@@ -30,7 +30,7 @@ public HeronPluggableSerializerDelegate() {
   }
 
   @Override
-  public void initialize(Map config) {
+  public void initialize(Map<String, Object> config) {
     kryo = SerializationFactory.getKryo(config);
     kryoOut = new Output(2000, 2000000000);
     kryoIn = new Input(1);

File: heron/storm/src/java/backtype/storm/serialization/SerializationFactory.java
Patch:
@@ -48,7 +48,7 @@ private SerializationFactory() {
    * @param conf the config
    * @return Kryo
    */
-  public static Kryo getKryo(Map conf) {
+  public static Kryo getKryo(Map<String, Object> conf) {
     IKryoFactory kryoFactory =
         (IKryoFactory) Utils.newInstance((String) conf.get(Config.TOPOLOGY_KRYO_FACTORY));
     Kryo k = kryoFactory.getKryo(conf);
@@ -162,13 +162,13 @@ private static Serializer resolveSerializerInstance(
             serializerClass.getName(), superClass.getName()));
   }
 
-  private static Map<String, String> normalizeKryoRegister(Map conf) {
+  private static Map<String, String> normalizeKryoRegister(Map<String, Object> conf) {
     // TODO: de-duplicate this logic with the code in nimbus
     Object res = conf.get(Config.TOPOLOGY_KRYO_REGISTER);
     if (res == null) {
       return new TreeMap<String, String>();
     }
-    Map<String, String> ret = new HashMap<String, String>();
+    Map<String, String> ret = new HashMap<>();
     if (res instanceof Map) {
       ret = (Map<String, String>) res;
     } else {

File: heron/storm/src/java/backtype/storm/serialization/types/ArrayListSerializer.java
Patch:
@@ -24,6 +24,7 @@
 
 public class ArrayListSerializer extends CollectionSerializer {
   @Override
+  @SuppressWarnings("rawtypes") // extending Kryo class that uses raw types
   public Collection create(Kryo kryo, Input input, Class<Collection> type) {
     return new ArrayList();
   }

File: heron/storm/src/java/backtype/storm/serialization/types/HashMapSerializer.java
Patch:
@@ -24,7 +24,8 @@
 
 public class HashMapSerializer extends MapSerializer {
   @Override
-  public Map create(Kryo kryo, Input input, Class<Map> type) {
-    return new HashMap();
+  @SuppressWarnings("rawtypes") // extending kryo class signature that takes Map
+  public Map<String, Object> create(Kryo kryo, Input input, Class<Map> type) {
+    return new HashMap<String, Object>();
   }
 }

File: heron/storm/src/java/backtype/storm/serialization/types/HashSetSerializer.java
Patch:
@@ -24,6 +24,7 @@
 
 public class HashSetSerializer extends CollectionSerializer {
   @Override
+  @SuppressWarnings("rawtypes") // extending Kryo class that uses raw types
   public Collection create(Kryo kryo, Input input, Class<Collection> type) {
     return new HashSet();
   }

File: heron/storm/src/java/backtype/storm/spout/ISpout.java
Patch:
@@ -52,7 +52,7 @@ public interface ISpout extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this spout. Tuples can be emitted at any time, including the open and close methods. The collector is thread-safe and should be saved as an instance variable of this spout object.
    */
-  void open(Map conf, TopologyContext context, SpoutOutputCollector collector);
+  void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector);
 
   /**
    * Called when an ISpout is going to be shutdown. There is no guarentee that close

File: heron/storm/src/java/backtype/storm/spout/ISpoutWaitStrategy.java
Patch:
@@ -26,7 +26,7 @@
  * The default strategy sleeps for one millisecond.
  */
 public interface ISpoutWaitStrategy {
-  void prepare(Map conf);
+  void prepare(Map<String, Object> conf);
 
   void emptyEmit(long streak);
 }

File: heron/storm/src/java/backtype/storm/spout/NothingEmptyEmitStrategy.java
Patch:
@@ -22,7 +22,7 @@ public void emptyEmit(long streak) {
   }
 
   @Override
-  public void prepare(Map conf) {
+  public void prepare(Map<String, Object> conf) {
     throw new UnsupportedOperationException("Not supported yet.");
   }
 }

File: heron/storm/src/java/backtype/storm/spout/SleepSpoutWaitStrategy.java
Patch:
@@ -23,7 +23,7 @@ public class SleepSpoutWaitStrategy implements ISpoutWaitStrategy {
   private long sleepMillis;
 
   @Override
-  public void prepare(Map conf) {
+  public void prepare(Map<String, Object> conf) {
     sleepMillis =
         ((Number) conf.get(Config.TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS)).longValue();
   }

File: heron/storm/src/java/backtype/storm/task/GeneralTopologyContext.java
Patch:
@@ -31,7 +31,7 @@
 public class GeneralTopologyContext implements JSONAware {
   private com.twitter.heron.api.topology.GeneralTopologyContext delegate;
 
-  public GeneralTopologyContext(StormTopology topology, Map stormConf,
+  public GeneralTopologyContext(StormTopology topology, Map<String, Object> stormConf,
                                 Map<Integer, String> taskToComponent,
                                 Map<String, List<Integer>> componentToSortedTasks,
                                 Map<String, Map<String, Fields>> componentToStreamToFields,

File: heron/storm/src/java/backtype/storm/task/IBolt.java
Patch:
@@ -50,7 +50,7 @@ public interface IBolt extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this bolt. Tuples can be emitted at any time, including the prepare and cleanup methods. The collector is thread-safe and should be saved as an instance variable of this bolt object.
    */
-  void prepare(Map stormConf, TopologyContext context, OutputCollector collector);
+  void prepare(Map<String, Object> stormConf, TopologyContext context, OutputCollector collector);
 
   /**
    * Process a single tuple of input. The Tuple object contains metadata on it

File: heron/storm/src/java/backtype/storm/task/WorkerTopologyContext.java
Patch:
@@ -27,7 +27,7 @@ public class WorkerTopologyContext extends GeneralTopologyContext {
 
   public WorkerTopologyContext(
       StormTopology topology,
-      Map stormConf,
+      Map<String, Object> stormConf,
       Map<Integer, String> taskToComponent,
       Map<String, List<Integer>> componentToSortedTasks,
       Map<String, Map<String, Fields>> componentToStreamToFields,
@@ -56,7 +56,7 @@ public WorkerTopologyContext(com.twitter.heron.api.topology.TopologyContext newD
    * this will just return the current instance's taskId
    */
   public List<Integer> getThisWorkerTasks() {
-    List<Integer> retval = new LinkedList<Integer>();
+    List<Integer> retval = new LinkedList<>();
     retval.add(delegate.getThisTaskId());
     return retval;
   }

File: heron/storm/src/java/backtype/storm/topology/BoltDeclarerImpl.java
Patch:
@@ -29,7 +29,7 @@ public BoltDeclarerImpl(com.twitter.heron.api.topology.BoltDeclarer delegate) {
   }
 
   @Override
-  public BoltDeclarer addConfigurations(Map conf) {
+  public BoltDeclarer addConfigurations(Map<String, Object> conf) {
     delegate.addConfigurations(conf);
     return this;
   }

File: heron/storm/src/java/backtype/storm/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 
 public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer> {
-  T addConfigurations(Map conf);
+  T addConfigurations(Map<String, Object> conf);
 
   T addConfiguration(String config, Object value);
 

File: heron/storm/src/java/backtype/storm/topology/FailedException.java
Patch:
@@ -15,6 +15,8 @@
 package backtype.storm.topology;
 
 public class FailedException extends RuntimeException {
+  private static final long serialVersionUID = 1318407909762835892L;
+
   public FailedException() {
     super();
   }

File: heron/storm/src/java/backtype/storm/topology/IBasicBolt.java
Patch:
@@ -20,7 +20,7 @@
 import backtype.storm.tuple.Tuple;
 
 public interface IBasicBolt extends IComponent {
-  void prepare(Map stormConf, TopologyContext context);
+  void prepare(Map<String, Object> stormConf, TopologyContext context);
 
   /**
    * Process the input tuple and optionally emit new tuples based on the input tuple.

File: heron/storm/src/java/backtype/storm/topology/IRichBoltDelegate.java
Patch:
@@ -25,6 +25,7 @@
  * to use to implement components of the topology.
  */
 public class IRichBoltDelegate implements com.twitter.heron.api.bolt.IRichBolt {
+  private static final long serialVersionUID = -3717575342431064148L;
   private IRichBolt delegate;
   private TopologyContext topologyContextImpl;
   private OutputCollectorImpl outputCollectorImpl;
@@ -34,7 +35,7 @@ public IRichBoltDelegate(IRichBolt delegate) {
   }
 
   @Override
-  public void prepare(Map conf, com.twitter.heron.api.topology.TopologyContext context,
+  public void prepare(Map<String, Object> conf, com.twitter.heron.api.topology.TopologyContext context,
                       com.twitter.heron.api.bolt.OutputCollector collector) {
     topologyContextImpl = new TopologyContext(context);
     outputCollectorImpl = new OutputCollectorImpl(collector);

File: heron/storm/src/java/backtype/storm/topology/ReportedFailedException.java
Patch:
@@ -15,6 +15,8 @@
 package backtype.storm.topology;
 
 public class ReportedFailedException extends FailedException {
+  private static final long serialVersionUID = -7244058034931081665L;
+
   public ReportedFailedException() {
     super();
   }

File: heron/storm/src/java/backtype/storm/topology/SpoutDeclarerImpl.java
Patch:
@@ -24,7 +24,7 @@ public SpoutDeclarerImpl(com.twitter.heron.api.topology.SpoutDeclarer delegate)
   }
 
   @Override
-  public SpoutDeclarer addConfigurations(Map conf) {
+  public SpoutDeclarer addConfigurations(Map<String, Object> conf) {
     delegate.addConfigurations(conf);
     return this;
   }

File: heron/storm/src/java/backtype/storm/topology/base/BaseBasicBolt.java
Patch:
@@ -24,7 +24,7 @@ public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt
   private static final long serialVersionUID = -1818037075120434390L;
 
   @Override
-  public void prepare(Map stormConf, TopologyContext context) {
+  public void prepare(Map<String, Object> stormConf, TopologyContext context) {
   }
 
   @Override

File: heron/storm/src/java/backtype/storm/utils/ConfigUtils.java
Patch:
@@ -32,7 +32,7 @@ private ConfigUtils() {
    * @param stormConfig the storm config
    * @return a heron config
    */
-  public static Config translateConfig(Map stormConfig) {
+  public static Config translateConfig(Map<String, Object> stormConfig) {
     Config heronConfig = new Config(stormConfig);
     // Look at serialization stuff first
     doSerializationTranslation(heronConfig);
@@ -119,7 +119,7 @@ private static void doTaskHooksTranslation(Config heronConfig) {
     List<String> hooks = heronConfig.getAutoTaskHooks();
     if (hooks != null) {
       heronConfig.put(backtype.storm.Config.STORMCOMPAT_TOPOLOGY_AUTO_TASK_HOOKS, hooks);
-      List<String> translationHooks = new LinkedList<String>();
+      List<String> translationHooks = new LinkedList<>();
       translationHooks.add(ITaskHookDelegate.class.getName());
       heronConfig.setAutoTaskHooks(translationHooks);
     }

File: heron/storm/src/java/org/apache/storm/ILocalCluster.java
Patch:
@@ -29,7 +29,7 @@
 
 
 public interface ILocalCluster {
-  void submitTopology(String topologyName, Map conf, StormTopology topology) throws
+  void submitTopology(String topologyName, Map<String, Object> conf, StormTopology topology) throws
       AlreadyAliveException, InvalidTopologyException;
 
   // void submitTopologyWithOpts(
@@ -51,5 +51,6 @@ void submitTopology(String topologyName, Map conf, StormTopology topology) throw
 
   // ClusterSummary getClusterInfo();
   // TopologyInfo getTopologyInfo(String id);
+  @SuppressWarnings("rawtypes")
   Map getState();
 }

File: heron/storm/src/java/org/apache/storm/LocalCluster.java
Patch:
@@ -27,7 +27,7 @@
 public class LocalCluster implements ILocalCluster {
   private final LocalMode localMode;
   private String topologyName;
-  private Map conf;
+  private Map<String, Object> conf;
   private StormTopology topology;
 
   public LocalCluster() {
@@ -37,7 +37,7 @@ public LocalCluster() {
 
   @Override
   public void submitTopology(String topoName,
-                             Map config,
+                             Map<String, Object> config,
                              StormTopology stormTopology)
       throws AlreadyAliveException, InvalidTopologyException {
     assertNotAlive();
@@ -97,6 +97,7 @@ public StormTopology getTopology(String topoName) {
   }
 
   @Override
+  @SuppressWarnings("rawtypes")
   public Map getState() {
     throw new RuntimeException("Heron does not support LocalCluster yet...");
   }

File: heron/storm/src/java/org/apache/storm/StormSubmitter.java
Patch:
@@ -43,7 +43,7 @@ private StormSubmitter() {
    * @throws AlreadyAliveException if a topology with this name is already running
    * @throws InvalidTopologyException if an invalid topology was submitted
    */
-  public static void submitTopology(String name, Map stormConfig, StormTopology topology)
+  public static void submitTopology(String name, Map<String, Object> stormConfig, StormTopology topology)
       throws AlreadyAliveException, InvalidTopologyException {
 
     // First do config translation

File: heron/storm/src/java/org/apache/storm/generated/AlreadyAliveException.java
Patch:
@@ -15,4 +15,5 @@
 package org.apache.storm.generated;
 
 public class AlreadyAliveException extends Exception {
+  private static final long serialVersionUID = 3328511628150069047L;
 }

File: heron/storm/src/java/org/apache/storm/generated/InvalidTopologyException.java
Patch:
@@ -15,4 +15,5 @@
 package org.apache.storm.generated;
 
 public class InvalidTopologyException extends Exception {
+  private static final long serialVersionUID = 8232369763475884914L;
 }

File: heron/storm/src/java/org/apache/storm/generated/NotAliveException.java
Patch:
@@ -15,4 +15,5 @@
 package org.apache.storm.generated;
 
 public class NotAliveException extends Exception {
+  private static final long serialVersionUID = 5498494009831492747L;
 }

File: heron/storm/src/java/org/apache/storm/grouping/CustomStreamGroupingDelegate.java
Patch:
@@ -21,6 +21,7 @@
 
 public class CustomStreamGroupingDelegate implements
     com.twitter.heron.api.grouping.CustomStreamGrouping {
+  private static final long serialVersionUID = -7310525506102399193L;
   private CustomStreamGrouping delegate;
 
   public CustomStreamGroupingDelegate(CustomStreamGrouping delegate) {

File: heron/storm/src/java/org/apache/storm/hooks/BaseTaskHook.java
Patch:
@@ -26,7 +26,7 @@
 
 public class BaseTaskHook implements ITaskHook {
   @Override
-  public void prepare(Map conf, TopologyContext context) {
+  public void prepare(Map<String, Object> conf, TopologyContext context) {
   }
 
   @Override

File: heron/storm/src/java/org/apache/storm/hooks/ITaskHook.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.storm.task.TopologyContext;
 
 public interface ITaskHook {
-  void prepare(Map conf, TopologyContext context);
+  void prepare(Map<String, Object> conf, TopologyContext context);
 
   void cleanup();
 

File: heron/storm/src/java/org/apache/storm/metric/api/MultiCountMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiCountMetric implements IMetric {
-  private Map<String, CountMetric> value = new HashMap();
+  private Map<String, CountMetric> value = new HashMap<>();
 
   public MultiCountMetric() {
   }
@@ -32,7 +32,7 @@ public CountMetric scope(String key) {
   }
 
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     for (Map.Entry<String, CountMetric> e : value.entrySet()) {
       ret.put(e.getKey(), e.getValue().getValueAndReset());
     }

File: heron/storm/src/java/org/apache/storm/metric/api/MultiReducedMetric.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Map;
 
 public class MultiReducedMetric implements IMetric {
-  private Map<String, ReducedMetric> value = new HashMap();
+  private Map<String, ReducedMetric> value = new HashMap<>();
   private IReducer reducer;
 
   public MultiReducedMetric(IReducer reducer) {
@@ -34,7 +34,7 @@ public ReducedMetric scope(String key) {
   }
 
   public Object getValueAndReset() {
-    Map ret = new HashMap();
+    Map<String, Object> ret = new HashMap<>();
     for (Map.Entry<String, ReducedMetric> e : value.entrySet()) {
       Object val = e.getValue().getValueAndReset();
       if (val != null) {

File: heron/storm/src/java/org/apache/storm/serialization/HeronPluggableSerializerDelegate.java
Patch:
@@ -30,7 +30,7 @@ public HeronPluggableSerializerDelegate() {
   }
 
   @Override
-  public void initialize(Map config) {
+  public void initialize(Map<String, Object> config) {
     kryo = SerializationFactory.getKryo(config);
     kryoOut = new Output(2000, 2000000000);
     kryoIn = new Input(1);

File: heron/storm/src/java/org/apache/storm/serialization/SerializationFactory.java
Patch:
@@ -49,7 +49,7 @@ private SerializationFactory() {
    * @param conf the config
    * @return Kryo
    */
-  public static Kryo getKryo(Map conf) {
+  public static Kryo getKryo(Map<String, Object> conf) {
     IKryoFactory kryoFactory =
         (IKryoFactory) Utils.newInstance((String) conf.get(Config.TOPOLOGY_KRYO_FACTORY));
     Kryo k = kryoFactory.getKryo(conf);
@@ -163,7 +163,7 @@ private static Serializer resolveSerializerInstance(
             serializerClass.getName(), superClass.getName()));
   }
 
-  private static Map<String, String> normalizeKryoRegister(Map conf) {
+  private static Map<String, String> normalizeKryoRegister(Map<String, Object> conf) {
     // TODO: de-duplicate this logic with the code in nimbus
     Object res = conf.get(Config.TOPOLOGY_KRYO_REGISTER);
     if (res == null) {

File: heron/storm/src/java/org/apache/storm/serialization/types/ArrayListSerializer.java
Patch:
@@ -24,6 +24,7 @@
 
 public class ArrayListSerializer extends CollectionSerializer {
   @Override
+  @SuppressWarnings("rawtypes") // extending Kryo class that uses raw types
   public Collection create(Kryo kryo, Input input, Class<Collection> type) {
     return new ArrayList();
   }

File: heron/storm/src/java/org/apache/storm/serialization/types/HashMapSerializer.java
Patch:
@@ -24,6 +24,7 @@
 
 public class HashMapSerializer extends MapSerializer {
   @Override
+  @SuppressWarnings("rawtypes") // extending Kryo class that uses raw types
   public Map create(Kryo kryo, Input input, Class<Map> type) {
     return new HashMap();
   }

File: heron/storm/src/java/org/apache/storm/serialization/types/HashSetSerializer.java
Patch:
@@ -24,6 +24,7 @@
 
 public class HashSetSerializer extends CollectionSerializer {
   @Override
+  @SuppressWarnings("rawtypes") // extending Kryo class that uses raw types
   public Collection create(Kryo kryo, Input input, Class<Collection> type) {
     return new HashSet();
   }

File: heron/storm/src/java/org/apache/storm/spout/ISpout.java
Patch:
@@ -52,7 +52,7 @@ public interface ISpout extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this spout. Tuples can be emitted at any time, including the open and close methods. The collector is thread-safe and should be saved as an instance variable of this spout object.
    */
-  void open(Map conf, TopologyContext context, SpoutOutputCollector collector);
+  void open(Map<String, Object> conf, TopologyContext context, SpoutOutputCollector collector);
 
   /**
    * Called when an ISpout is going to be shutdown. There is no guarentee that close

File: heron/storm/src/java/org/apache/storm/spout/ISpoutWaitStrategy.java
Patch:
@@ -26,7 +26,7 @@
  * The default strategy sleeps for one millisecond.
  */
 public interface ISpoutWaitStrategy {
-  void prepare(Map conf);
+  void prepare(Map<String, Object> conf);
 
   void emptyEmit(long streak);
 }

File: heron/storm/src/java/org/apache/storm/spout/NothingEmptyEmitStrategy.java
Patch:
@@ -22,7 +22,7 @@ public void emptyEmit(long streak) {
   }
 
   @Override
-  public void prepare(Map conf) {
+  public void prepare(Map<String, Object> conf) {
     throw new UnsupportedOperationException("Not supported yet.");
   }
 }

File: heron/storm/src/java/org/apache/storm/spout/RawMultiScheme.java
Patch:
@@ -22,6 +22,8 @@
 import static org.apache.storm.utils.Utils.tuple;
 
 public class RawMultiScheme implements MultiScheme {
+  private static final long serialVersionUID = 4272415692741188347L;
+
   @Override
   public Iterable<List<Object>> deserialize(byte[] ser) {
     return asList(tuple(ser));

File: heron/storm/src/java/org/apache/storm/spout/RawScheme.java
Patch:
@@ -21,6 +21,8 @@
 import static org.apache.storm.utils.Utils.tuple;
 
 public class RawScheme implements Scheme {
+  private static final long serialVersionUID = 6098042939916415521L;
+
   public List<Object> deserialize(byte[] ser) {
     return tuple(ser);
   }

File: heron/storm/src/java/org/apache/storm/spout/SchemeAsMultiScheme.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.storm.tuple.Fields;
 
 public class SchemeAsMultiScheme implements MultiScheme {
+  private static final long serialVersionUID = 6575013093104910887L;
   public final Scheme scheme;
 
   public SchemeAsMultiScheme(Scheme scheme) {

File: heron/storm/src/java/org/apache/storm/spout/SleepSpoutWaitStrategy.java
Patch:
@@ -23,7 +23,7 @@ public class SleepSpoutWaitStrategy implements ISpoutWaitStrategy {
   private long sleepMillis;
 
   @Override
-  public void prepare(Map conf) {
+    public void prepare(Map<String, Object> conf) {
     sleepMillis =
         ((Number) conf.get(Config.TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS)).longValue();
   }

File: heron/storm/src/java/org/apache/storm/task/GeneralTopologyContext.java
Patch:
@@ -30,7 +30,7 @@
 public class GeneralTopologyContext implements JSONAware {
   private com.twitter.heron.api.topology.GeneralTopologyContext delegate;
 
-  public GeneralTopologyContext(StormTopology topology, Map stormConf,
+  public GeneralTopologyContext(StormTopology topology, Map<String, Object> stormConf,
                                 Map<Integer, String> taskToComponent,
                                 Map<String, List<Integer>> componentToSortedTasks,
                                 Map<String, Map<String, Fields>> componentToStreamToFields,

File: heron/storm/src/java/org/apache/storm/task/IBolt.java
Patch:
@@ -50,7 +50,7 @@ public interface IBolt extends Serializable {
    * @param context This object can be used to get information about this task's place within the topology, including the task id and component id of this task, input and output information, etc.
    * @param collector The collector is used to emit tuples from this bolt. Tuples can be emitted at any time, including the prepare and cleanup methods. The collector is thread-safe and should be saved as an instance variable of this bolt object.
    */
-  void prepare(Map stormConf, TopologyContext context, OutputCollector collector);
+  void prepare(Map<String, Object> stormConf, TopologyContext context, OutputCollector collector);
 
   /**
    * Process a single tuple of input. The Tuple object contains metadata on it

File: heron/storm/src/java/org/apache/storm/task/TopologyContext.java
Patch:
@@ -52,15 +52,15 @@ public class TopologyContext extends WorkerTopologyContext implements IMetricsCo
   // Constructor to match the signature of the storm's TopologyContext
   // Note that here, we fake the clojure.lang.Atom by creating our own class
   // This is real hacking a hack!
-  public TopologyContext(StormTopology topology, Map stormConf,
+  public TopologyContext(StormTopology topology, Map<String, Object> stormConf,
                          Map<Integer, String> taskToComponent,
                          Map<String, List<Integer>> componentToSortedTasks,
                          Map<String, Map<String, Fields>> componentToStreamToFields,
                          String stormId, String codeDir, String pidDir, Integer taskId,
                          Integer workerPort, List<Integer> workerTasks,
                          Map<String, Object> defaultResources,
                          Map<String, Object> userResources,
-                         Map<String, Object> executorData, Map registeredMetrics,
+                         Map<String, Object> executorData, Map<String, Object> registeredMetrics,
                          org.apache.storm.clojure.Atom openOrPrepareWasCalled) {
     super((com.twitter.heron.api.topology.TopologyContext) null);
   }

File: heron/storm/src/java/org/apache/storm/task/WorkerTopologyContext.java
Patch:
@@ -27,7 +27,7 @@ public class WorkerTopologyContext extends GeneralTopologyContext {
 
   public WorkerTopologyContext(
       StormTopology topology,
-      Map stormConf,
+      Map<String, Object> stormConf,
       Map<Integer, String> taskToComponent,
       Map<String, List<Integer>> componentToSortedTasks,
       Map<String, Map<String, Fields>> componentToStreamToFields,

File: heron/storm/src/java/org/apache/storm/topology/BoltDeclarerImpl.java
Patch:
@@ -29,7 +29,7 @@ public BoltDeclarerImpl(com.twitter.heron.api.topology.BoltDeclarer delegate) {
   }
 
   @Override
-  public BoltDeclarer addConfigurations(Map conf) {
+  public BoltDeclarer addConfigurations(Map<String, Object> conf) {
     delegate.addConfigurations(conf);
     return this;
   }

File: heron/storm/src/java/org/apache/storm/topology/ComponentConfigurationDeclarer.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 
 public interface ComponentConfigurationDeclarer<T extends ComponentConfigurationDeclarer> {
-  T addConfigurations(Map conf);
+  T addConfigurations(Map<String, Object> conf);
 
   T addConfiguration(String config, Object value);
 

File: heron/storm/src/java/org/apache/storm/topology/FailedException.java
Patch:
@@ -15,6 +15,8 @@
 package org.apache.storm.topology;
 
 public class FailedException extends RuntimeException {
+  private static final long serialVersionUID = 5407551070339208673L;
+
   public FailedException() {
     super();
   }

File: heron/storm/src/java/org/apache/storm/topology/IBasicBolt.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.storm.tuple.Tuple;
 
 public interface IBasicBolt extends IComponent {
-  void prepare(Map stormConf, TopologyContext context);
+  void prepare(Map<String, Object> stormConf, TopologyContext context);
 
   /**
    * Process the input tuple and optionally emit new tuples based on the input tuple.

File: heron/storm/src/java/org/apache/storm/topology/IRichBoltDelegate.java
Patch:
@@ -25,6 +25,7 @@
  * to use to implement components of the topology.
  */
 public class IRichBoltDelegate implements com.twitter.heron.api.bolt.IRichBolt {
+  private static final long serialVersionUID = 8350418148268852902L;
   private IRichBolt delegate;
   private TopologyContext topologyContextImpl;
   private OutputCollectorImpl outputCollectorImpl;
@@ -34,7 +35,7 @@ public IRichBoltDelegate(IRichBolt delegate) {
   }
 
   @Override
-  public void prepare(Map conf, com.twitter.heron.api.topology.TopologyContext context,
+  public void prepare(Map<String, Object> conf, com.twitter.heron.api.topology.TopologyContext context,
                       com.twitter.heron.api.bolt.OutputCollector collector) {
     topologyContextImpl = new TopologyContext(context);
     outputCollectorImpl = new OutputCollectorImpl(collector);

File: heron/storm/src/java/org/apache/storm/topology/ReportedFailedException.java
Patch:
@@ -15,6 +15,8 @@
 package org.apache.storm.topology;
 
 public class ReportedFailedException extends FailedException {
+  private static final long serialVersionUID = 165228267264978890L;
+
   public ReportedFailedException() {
     super();
   }

File: heron/storm/src/java/org/apache/storm/topology/SpoutDeclarerImpl.java
Patch:
@@ -24,7 +24,7 @@ public SpoutDeclarerImpl(com.twitter.heron.api.topology.SpoutDeclarer delegate)
   }
 
   @Override
-  public SpoutDeclarer addConfigurations(Map conf) {
+  public SpoutDeclarer addConfigurations(Map<String, Object> conf) {
     delegate.addConfigurations(conf);
     return this;
   }

File: heron/storm/src/java/org/apache/storm/topology/base/BaseBasicBolt.java
Patch:
@@ -24,7 +24,7 @@ public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt
   private static final long serialVersionUID = 1464223135325402830L;
 
   @Override
-  public void prepare(Map stormConf, TopologyContext context) {
+  public void prepare(Map<String, Object> stormConf, TopologyContext context) {
   }
 
   @Override

File: heron/storm/src/java/org/apache/storm/tuple/Fields.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 public class Fields implements Iterable<String>, Serializable {
+  private static final long serialVersionUID = 4882556192519443356L;
   private com.twitter.heron.api.tuple.Fields delegate;
 
   public Fields(String... fields) {

File: heron/storm/src/java/org/apache/storm/utils/ConfigUtils.java
Patch:
@@ -32,7 +32,7 @@ private ConfigUtils() {
    * @param stormConfig the storm config
    * @return a heron config
    */
-  public static Config translateConfig(Map stormConfig) {
+  public static Config translateConfig(Map<String, Object> stormConfig) {
     Config heronConfig = new Config(stormConfig);
     // Look at serialization stuff first
     doSerializationTranslation(heronConfig);

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigDefaults.java
Patch:
@@ -24,7 +24,7 @@ final class LocalFileSystemConfigDefaults {
       LocalFileSystemDefaults.class.getName());
 
   // holds the mapping between the config keys and their default values
-  private static Map defaults;
+  private static Map<String, Object> defaults;
 
   // load the resource for default config key values
   static {

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigKeys.java
Patch:
@@ -15,15 +15,13 @@
 package com.twitter.heron.uploader.localfs;
 
 import java.util.Map;
-import java.util.logging.Logger;
 
 import com.twitter.heron.spi.common.Resource;
 
 final class LocalFileSystemConfigKeys {
-  private static final Logger LOG = Logger.getLogger(LocalFileSystemConfigKeys.class.getName());
 
   // holds the mapping of keys to their corresponding key strings
-  private static Map keys;
+  private static Map<String, Object> keys;
 
   // load the resource for config keys
   static {

File: integration-test/src/java/com/twitter/heron/integration_test/core/IntegrationTestBolt.java
Patch:
@@ -33,7 +33,7 @@ public IntegrationTestBolt(IRichBolt delegate) {
 
 
   @Override
-  public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {
+  public void prepare(Map<String, Object> map, TopologyContext topologyContext, OutputCollector outputCollector) {
     // Set the # of terminal Signal to receive, = the # number all instance of upstream components
     HashSet<String> upstreamComponents = new HashSet<String>();
     for (TopologyAPI.StreamId streamId : topologyContext.getThisSources().keySet()) {

File: heron/storm/src/java/backtype/storm/grouping/CustomStreamGroupingDelegate.java
Patch:
@@ -19,7 +19,8 @@
 import backtype.storm.generated.GlobalStreamId;
 import backtype.storm.task.TopologyContext;
 
-public class CustomStreamGroupingDelegate implements com.twitter.heron.api.grouping.CustomStreamGrouping {
+public class CustomStreamGroupingDelegate implements
+    com.twitter.heron.api.grouping.CustomStreamGrouping {
   private static final long serialVersionUID = 2286979042095596191L;
   private CustomStreamGrouping delegate;
 

File: heron/storm/src/java/backtype/storm/metric/api/CountMetric.java
Patch:
@@ -15,7 +15,7 @@
 package backtype.storm.metric.api;
 
 public class CountMetric implements IMetric {
-  com.twitter.heron.api.metric.CountMetric delegate;
+  private com.twitter.heron.api.metric.CountMetric delegate;
 
   public CountMetric() {
     delegate = new com.twitter.heron.api.metric.CountMetric();

File: heron/storm/src/java/backtype/storm/metric/api/ICombiner.java
Patch:
@@ -15,7 +15,7 @@
 package backtype.storm.metric.api;
 
 public interface ICombiner<T> {
-  public T identity();
+  T identity();
 
-  public T combine(T a, T b);
+  T combine(T a, T b);
 }

File: heron/storm/src/java/backtype/storm/metric/api/IMetric.java
Patch:
@@ -15,5 +15,5 @@
 package backtype.storm.metric.api;
 
 public interface IMetric {
-  public Object getValueAndReset();
+  Object getValueAndReset();
 }

File: heron/storm/src/java/backtype/storm/serialization/IKryoFactory.java
Patch:
@@ -38,4 +38,4 @@ public interface IKryoFactory {
   void postRegister(Kryo k, Map conf);
 
   void postDecorate(Kryo k, Map conf);
-}
\ No newline at end of file
+}

File: heron/storm/src/java/backtype/storm/spout/MultiScheme.java
Patch:
@@ -20,7 +20,7 @@
 import backtype.storm.tuple.Fields;
 
 public interface MultiScheme extends Serializable {
-  public Iterable<List<Object>> deserialize(byte[] ser);
+  Iterable<List<Object>> deserialize(byte[] ser);
 
-  public Fields getOutputFields();
+  Fields getOutputFields();
 }

File: heron/storm/src/java/backtype/storm/spout/Scheme.java
Patch:
@@ -20,7 +20,7 @@
 import backtype.storm.tuple.Fields;
 
 public interface Scheme extends Serializable {
-  public List<Object> deserialize(byte[] ser);
+  List<Object> deserialize(byte[] ser);
 
-  public Fields getOutputFields();
+  Fields getOutputFields();
 }

File: heron/storm/src/java/backtype/storm/spout/SleepSpoutWaitStrategy.java
Patch:
@@ -20,11 +20,12 @@
 
 public class SleepSpoutWaitStrategy implements ISpoutWaitStrategy {
 
-  long sleepMillis;
+  private long sleepMillis;
 
   @Override
   public void prepare(Map conf) {
-    sleepMillis = ((Number) conf.get(Config.TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS)).longValue();
+    sleepMillis =
+        ((Number) conf.get(Config.TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS)).longValue();
   }
 
   @Override

File: heron/storm/src/java/backtype/storm/task/OutputCollector.java
Patch:
@@ -146,7 +146,7 @@ public void emitDirect(int taskId, String streamId, List<Object> tuple) {
    * in Java.</p>
    *
    * @param taskId the taskId to send the new tuple to
-   * @param anchosr the tuples to anchor to
+   * @param anchors the tuples to anchor to
    * @param tuple the new output tuple from this bolt
    */
   public void emitDirect(int taskId, Collection<Tuple> anchors, List<Object> tuple) {
@@ -202,7 +202,8 @@ public List<Integer> emit(String streamId, Collection<Tuple> anchors, List<Objec
   }
 
   @Override
-  public void emitDirect(int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) {
+  public void emitDirect(
+      int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) {
     delegate.emitDirect(taskId, streamId, anchors, tuple);
   }
 

File: heron/storm/src/java/backtype/storm/topology/BasicBoltExecutor.java
Patch:
@@ -33,11 +33,10 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
     delegate.declareOutputFields(declarer);
   }
 
-
   @Override
-  public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
+  public void prepare(Map stormConf, TopologyContext context, OutputCollector newCollector) {
     delegate.prepare(stormConf, context);
-    this.collector = new BasicOutputCollector(collector);
+    this.collector = new BasicOutputCollector(newCollector);
   }
 
   @Override

File: heron/storm/src/java/backtype/storm/topology/BasicOutputCollector.java
Patch:
@@ -37,8 +37,8 @@ public List<Integer> emit(List<Object> tuple) {
     return emit(Utils.DEFAULT_STREAM_ID, tuple);
   }
 
-  public void setContext(Tuple inputTuple) {
-    this.inputTuple = inputTuple;
+  public void setContext(Tuple anInputTuple) {
+    this.inputTuple = anInputTuple;
   }
 
   public void emitDirect(int taskId, String streamId, List<Object> tuple) {

File: heron/storm/src/java/backtype/storm/topology/BoltDeclarer.java
Patch:
@@ -14,5 +14,6 @@
 
 package backtype.storm.topology;
 
-public interface BoltDeclarer extends InputDeclarer<BoltDeclarer>, ComponentConfigurationDeclarer<BoltDeclarer> {
+public interface BoltDeclarer extends
+    InputDeclarer<BoltDeclarer>, ComponentConfigurationDeclarer<BoltDeclarer> {
 }

File: heron/storm/src/java/backtype/storm/topology/BoltDeclarerImpl.java
Patch:
@@ -147,7 +147,8 @@ public BoltDeclarer customGrouping(String componentId, CustomStreamGrouping grou
   }
 
   @Override
-  public BoltDeclarer customGrouping(String componentId, String streamId, CustomStreamGrouping grouping) {
+  public BoltDeclarer customGrouping(
+      String componentId, String streamId, CustomStreamGrouping grouping) {
     delegate.customGrouping(componentId, streamId, new CustomStreamGroupingDelegate(grouping));
     return this;
   }

File: heron/storm/src/java/backtype/storm/utils/DefaultMaxSpoutPendingTuner.java
Patch:
@@ -18,7 +18,7 @@
  * This is a class that helps to auto tune the max spout pending value
  */
 public class DefaultMaxSpoutPendingTuner {
-  com.twitter.heron.api.utils.DefaultMaxSpoutPendingTuner delegate;
+  private com.twitter.heron.api.utils.DefaultMaxSpoutPendingTuner delegate;
 
   /**
    * Conv constructor when initing from a non-set initial value

File: heron/storm/src/java/org/apache/storm/grouping/CustomStreamGroupingDelegate.java
Patch:
@@ -19,7 +19,8 @@
 import org.apache.storm.generated.GlobalStreamId;
 import org.apache.storm.task.TopologyContext;
 
-public class CustomStreamGroupingDelegate implements com.twitter.heron.api.grouping.CustomStreamGrouping {
+public class CustomStreamGroupingDelegate implements
+    com.twitter.heron.api.grouping.CustomStreamGrouping {
   private CustomStreamGrouping delegate;
 
   public CustomStreamGroupingDelegate(CustomStreamGrouping delegate) {

File: heron/storm/src/java/org/apache/storm/metric/api/CountMetric.java
Patch:
@@ -15,7 +15,7 @@
 package org.apache.storm.metric.api;
 
 public class CountMetric implements IMetric {
-  com.twitter.heron.api.metric.CountMetric delegate;
+  private com.twitter.heron.api.metric.CountMetric delegate;
 
   public CountMetric() {
     delegate = new com.twitter.heron.api.metric.CountMetric();

File: heron/storm/src/java/org/apache/storm/metric/api/ICombiner.java
Patch:
@@ -15,7 +15,7 @@
 package org.apache.storm.metric.api;
 
 public interface ICombiner<T> {
-  public T identity();
+  T identity();
 
-  public T combine(T a, T b);
+  T combine(T a, T b);
 }

File: heron/storm/src/java/org/apache/storm/metric/api/IMetric.java
Patch:
@@ -15,5 +15,5 @@
 package org.apache.storm.metric.api;
 
 public interface IMetric {
-  public Object getValueAndReset();
+  Object getValueAndReset();
 }

File: heron/storm/src/java/org/apache/storm/spout/MultiScheme.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.storm.tuple.Fields;
 
 public interface MultiScheme extends Serializable {
-  public Iterable<List<Object>> deserialize(byte[] ser);
+  Iterable<List<Object>> deserialize(byte[] ser);
 
-  public Fields getOutputFields();
+  Fields getOutputFields();
 }

File: heron/storm/src/java/org/apache/storm/spout/Scheme.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.storm.tuple.Fields;
 
 public interface Scheme extends Serializable {
-  public List<Object> deserialize(byte[] ser);
+  List<Object> deserialize(byte[] ser);
 
-  public Fields getOutputFields();
+  Fields getOutputFields();
 }

File: heron/storm/src/java/org/apache/storm/spout/SleepSpoutWaitStrategy.java
Patch:
@@ -20,11 +20,12 @@
 
 public class SleepSpoutWaitStrategy implements ISpoutWaitStrategy {
 
-  long sleepMillis;
+  private long sleepMillis;
 
   @Override
   public void prepare(Map conf) {
-    sleepMillis = ((Number) conf.get(Config.TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS)).longValue();
+    sleepMillis =
+        ((Number) conf.get(Config.TOPOLOGY_SLEEP_SPOUT_WAIT_STRATEGY_TIME_MS)).longValue();
   }
 
   @Override

File: heron/storm/src/java/org/apache/storm/task/OutputCollector.java
Patch:
@@ -146,7 +146,7 @@ public void emitDirect(int taskId, String streamId, List<Object> tuple) {
    * in Java.</p>
    *
    * @param taskId the taskId to send the new tuple to
-   * @param anchosr the tuples to anchor to
+   * @param anchors the tuples to anchor to
    * @param tuple the new output tuple from this bolt
    */
   public void emitDirect(int taskId, Collection<Tuple> anchors, List<Object> tuple) {
@@ -202,7 +202,8 @@ public List<Integer> emit(String streamId, Collection<Tuple> anchors, List<Objec
   }
 
   @Override
-  public void emitDirect(int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) {
+  public void emitDirect(
+      int taskId, String streamId, Collection<Tuple> anchors, List<Object> tuple) {
     delegate.emitDirect(taskId, streamId, anchors, tuple);
   }
 

File: heron/storm/src/java/org/apache/storm/topology/BasicBoltExecutor.java
Patch:
@@ -33,11 +33,10 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
     delegate.declareOutputFields(declarer);
   }
 
-
   @Override
-  public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
+  public void prepare(Map stormConf, TopologyContext context, OutputCollector newCollector) {
     delegate.prepare(stormConf, context);
-    this.collector = new BasicOutputCollector(collector);
+    this.collector = new BasicOutputCollector(newCollector);
   }
 
   @Override

File: heron/storm/src/java/org/apache/storm/topology/BasicOutputCollector.java
Patch:
@@ -37,8 +37,8 @@ public List<Integer> emit(List<Object> tuple) {
     return emit(Utils.DEFAULT_STREAM_ID, tuple);
   }
 
-  public void setContext(Tuple inputTuple) {
-    this.inputTuple = inputTuple;
+  public void setContext(Tuple anInputTuple) {
+    this.inputTuple = anInputTuple;
   }
 
   public void emitDirect(int taskId, String streamId, List<Object> tuple) {

File: heron/storm/src/java/org/apache/storm/topology/BoltDeclarer.java
Patch:
@@ -14,5 +14,6 @@
 
 package org.apache.storm.topology;
 
-public interface BoltDeclarer extends InputDeclarer<BoltDeclarer>, ComponentConfigurationDeclarer<BoltDeclarer> {
+public interface BoltDeclarer extends
+    InputDeclarer<BoltDeclarer>, ComponentConfigurationDeclarer<BoltDeclarer> {
 }

File: heron/storm/src/java/org/apache/storm/topology/BoltDeclarerImpl.java
Patch:
@@ -147,7 +147,8 @@ public BoltDeclarer customGrouping(String componentId, CustomStreamGrouping grou
   }
 
   @Override
-  public BoltDeclarer customGrouping(String componentId, String streamId, CustomStreamGrouping grouping) {
+  public BoltDeclarer customGrouping(
+      String componentId, String streamId, CustomStreamGrouping grouping) {
     delegate.customGrouping(componentId, streamId, new CustomStreamGroupingDelegate(grouping));
     return this;
   }

File: heron/storm/src/java/org/apache/storm/utils/DefaultMaxSpoutPendingTuner.java
Patch:
@@ -18,7 +18,7 @@
  * This is a class that helps to auto tune the max spout pending value
  */
 public class DefaultMaxSpoutPendingTuner {
-  com.twitter.heron.api.utils.DefaultMaxSpoutPendingTuner delegate;
+  private com.twitter.heron.api.utils.DefaultMaxSpoutPendingTuner delegate;
 
   /**
    * Conv constructor when initing from a non-set initial value

File: heron/localmode/tests/java/com/twitter/heron/localmode/executors/InstanceExecutorTest.java
Patch:
@@ -16,6 +16,7 @@
 
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -29,8 +30,6 @@
 import com.twitter.heron.localmode.utils.PhysicalPlanUtilTest;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
-import org.junit.Assert;
-
 /**
  * InstanceExecutor Tester.
  */

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/AllGroupingTest.java
Patch:
@@ -19,13 +19,12 @@
 import java.util.List;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import org.junit.Assert;
-
 /**
  * AllGrouping Tester.
  */

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/CustomGroupingTest.java
Patch:
@@ -18,13 +18,12 @@
 import java.util.List;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import org.junit.Assert;
-
 public class CustomGroupingTest {
 
   @Before

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/FieldsGroupingTest.java
Patch:
@@ -23,14 +23,13 @@
 import com.google.protobuf.ByteString;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.proto.system.HeronTuples;
 
-import org.junit.Assert;
-
 public class FieldsGroupingTest {
 
   @Before

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/LowestGroupingTest.java
Patch:
@@ -18,13 +18,12 @@
 import java.util.List;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import org.junit.Assert;
-
 public class LowestGroupingTest {
 
   @Before

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/ShuffleGroupingTest.java
Patch:
@@ -18,13 +18,12 @@
 import java.util.List;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import org.junit.Assert;
-
 public class ShuffleGroupingTest {
 
   @Before

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/RotatingMapTest.java
Patch:
@@ -19,11 +19,10 @@
 import java.util.Random;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import org.junit.Assert;
-
 /**
  * RotatingMap Tester.
  */

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/StreamConsumersTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -27,9 +28,6 @@
 import com.twitter.heron.localmode.grouping.Grouping;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
-import org.junit.Assert;
-
-
 /**
  * StreamConsumers Tester.
  */

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/TupleCacheTest.java
Patch:
@@ -20,15 +20,14 @@
 import java.util.Map;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.proto.system.HeronTuples;
 
-import org.junit.Assert;
-
 /**
  * TupleCache Tester.
  */

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/XORManagerTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -32,8 +33,6 @@
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.WakeableLooper;
 
-import org.junit.Assert;
-
 /**
  * XORManager Tester.
  */

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/HandleTMasterLocationTest.java
Patch:
@@ -184,7 +184,7 @@ public void run() {
   private void runClient() {
 
     Runnable runClient = new Runnable() {
-      NIOLooper looper;
+      private NIOLooper looper;
 
       @Override
       public void run() {

File: heron/packing/src/java/com/twitter/heron/packing/roundrobin/RoundRobinPacking.java
Patch:
@@ -160,7 +160,7 @@ public long getContainerRamHint(Map<String, List<String>> packing) {
         topologyConfig, com.twitter.heron.api.Config.TOPOLOGY_CONTAINER_RAM_REQUESTED,
         "" + defaultRequest));
     if (defaultRequest > containerRamRequested) {
-      LOG.log(Level.SEVERE, 
+      LOG.log(Level.SEVERE,
           "Container is set to value lower than computed defaults. This could be due"
           + " to incorrect RAM map provided for components.");
     }

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManagerTest.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.statemgr.localfs;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -31,9 +32,6 @@
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Keys;
 
-import org.junit.Assert;
-
-
 /**
  * LocalFileSystemStateManager Tester.
  */

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigTest.java
Patch:
@@ -17,15 +17,14 @@
 import java.io.File;
 import java.nio.file.Paths;
 
+import org.junit.Assert;
 import org.junit.Test;
 
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.common.Keys;
 import com.twitter.heron.spi.common.Misc;
 
-import org.junit.Assert;
-
 public class LocalFileSystemConfigTest {
 
   private static final String TOPOLOGY_PACKAGE_FILE = "/tmp/something.tar.gz";

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploaderTest.java
Patch:
@@ -19,14 +19,13 @@
 
 import org.apache.commons.io.FileUtils;
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Keys;
 
-import org.junit.Assert;
-
 public class LocalFileSystemUploaderTest {
 
   private Config config;

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/FileSink.java
Patch:
@@ -15,8 +15,10 @@
 package com.twitter.heron.metricsmgr.sink;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.PrintStream;
+import java.io.UnsupportedEncodingException;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.Map;
@@ -81,7 +83,7 @@ private void openNewFile(String filename) {
       writer = filename == null ? System.out
           : new PrintStream(new FileOutputStream(filename, false),
           true, "UTF-8");
-    } catch (Exception e) {
+    } catch (FileNotFoundException | UnsupportedEncodingException e) {
       throw new RuntimeException("Error creating " + filename, e);
     }
   }

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/PhysicalPlanUtilTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.junit.After;
 import org.junit.AfterClass;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -40,7 +41,6 @@
 import com.twitter.heron.api.tuple.Tuple;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
-import org.junit.Assert;
 
 /**
  * PhysicalPlanGenerator Tester.

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsSinksConfig.java
Patch:
@@ -31,7 +31,8 @@ public class MetricsSinksConfig {
   public static final String CONFIG_KEY_SINK_RESTART_ATTEMPTS = "sink-restart-attempts";
   public static final int DEFAULT_SINK_RESTART_ATTEMPTS = 0;
 
-  private final Map<String, Map<String, Object>> sinksConfigs = new HashMap<String, Map<String, Object>>();
+  private final Map<String, Map<String, Object>> sinksConfigs =
+      new HashMap<String, Map<String, Object>>();
 
   public MetricsSinksConfig(String filename) throws FileNotFoundException {
     FileInputStream fin = new FileInputStream(new File(filename));

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/executor/SinkExecutor.java
Patch:
@@ -123,7 +123,8 @@ private void flushSinkAtInterval() {
 
     // If the config is not set, we consider the flush() would never be invoked
     if (flushIntervalObj != null) {
-      final long flushIntervalNs = TypeUtils.getLong(flushIntervalObj) * Constants.MILLISECONDS_TO_NANOSECONDS;
+      final long flushIntervalNs =
+          TypeUtils.getLong(flushIntervalObj) * Constants.MILLISECONDS_TO_NANOSECONDS;
 
       Runnable flushSink = new Runnable() {
         @Override

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/FileSink.java
Patch:
@@ -49,7 +49,8 @@ public class FileSink implements IMetricsSink {
   private static final String EXCEPTIONS_COUNT = "exceptions-count";
   private static final String FLUSH_COUNT = "flush-count";
   private static final String RECORD_PROCESS_COUNT = "record-process-count";
-  private static final ObjectMapper mapper = new ObjectMapper();
+  private static final ObjectMapper MAPPER = new ObjectMapper();
+
   // We would convert a file's metrics into a JSON object, i.e. array
   // So we need to add "[" at the start and "]" at the end
   private static boolean isFileStart = true;
@@ -125,7 +126,7 @@ private String convertRecordToJSON(MetricsRecord record) {
 
     String result = "";
     try {
-      result = mapper.writeValueAsString(jsonToWrite);
+      result = MAPPER.writeValueAsString(jsonToWrite);
     } catch (JsonProcessingException e) {
       LOG.log(Level.SEVERE, "Could not convert map to JSONString: " + jsonToWrite.toString(), e);
     }

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/HandleTMasterLocationTest.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.protobuf.Message;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -40,8 +41,6 @@
 import com.twitter.heron.proto.system.Metrics;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
 
-import org.junit.Assert;
-
 /**
  * Test whether MetricsManagerServer could handle TMasterLocationRefreshMessage correctly.
  * <p>

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/MetricsManagerServerTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.protobuf.Message;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -37,8 +38,6 @@
 import com.twitter.heron.spi.metricsmgr.metrics.MetricsInfo;
 import com.twitter.heron.spi.metricsmgr.metrics.MetricsRecord;
 
-import org.junit.Assert;
-
 /**
  * MetricsManagerServer Tester.
  */

File: heron/spi/tests/java/com/twitter/heron/spi/common/MiscTest.java
Patch:
@@ -16,9 +16,8 @@
 
 import java.util.logging.Logger;
 
-import org.junit.Test;
-
 import org.junit.Assert;
+import org.junit.Test;
 
 public class MiscTest {
   private static final Logger LOG = Logger.getLogger(MiscTest.class.getName());

File: heron/spi/tests/java/com/twitter/heron/spi/common/ShellUtilsTest.java
Patch:
@@ -17,14 +17,14 @@
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
+
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.junit.Test;
-
 import org.junit.Assert;
+import org.junit.Test;
 
 public class ShellUtilsTest {
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraLauncher.java
Patch:
@@ -32,9 +32,9 @@ public class AuroraLauncher implements ILauncher {
   private Config runtime;
 
   @Override
-  public void initialize(Config config, Config runtime) {
-    this.config = config;
-    this.runtime = runtime;
+  public void initialize(Config mConfig, Config mRuntime) {
+    this.config = mConfig;
+    this.runtime = mRuntime;
   }
 
   @Override

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/RestartRequestHandler.java
Patch:
@@ -38,7 +38,7 @@ public void handle(HttpExchange exchange) throws IOException {
     // read the http request payload
     byte[] requestBody = HttpUtils.readHttpRequestBody(exchange);
 
-    // prepare the request 
+    // prepare the request
     Scheduler.RestartTopologyRequest restartTopologyRequest =
         Scheduler.RestartTopologyRequest.newBuilder()
             .mergeFrom(requestBody)
@@ -53,7 +53,7 @@ public void handle(HttpExchange exchange) throws IOException {
             .setStatus(NetworkUtils.getHeronStatus(isRestartSuccessfully))
             .build();
 
-    // send the response back 
+    // send the response back
     HttpUtils.sendHttpResponse(exchange, response.toByteArray());
   }
 }

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/SchedulerServer.java
Patch:
@@ -66,8 +66,8 @@ public int getPort() {
   }
 
   protected HttpServer createServer(int port) throws IOException {
-    HttpServer schedulerServer = HttpServer.create(new InetSocketAddress(port), SERVER_BACK_LOG);
-    schedulerServer.setExecutor(Executors.newSingleThreadExecutor());
-    return schedulerServer;
+    HttpServer server = HttpServer.create(new InetSocketAddress(port), SERVER_BACK_LOG);
+    server.setExecutor(Executors.newSingleThreadExecutor());
+    return server;
   }
 }

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -35,6 +35,8 @@
  * Spouts. .</p>
  */
 public class Config extends HashMap<String, Object> {
+  private static final long serialVersionUID = 2550967708478837032L;
+
   /**
    * Topology-specific options for the worker child process. This is used in addition to WORKER_CHILDOPTS.
    */
@@ -173,7 +175,7 @@ public class Config extends HashMap<String, Object> {
   public static final String TOPOLOGY_ADDITIONAL_CLASSPATH = "topology.additional.classpath";
 
   // We maintain a list of all user exposed vars
-  private static Set<String> apiVars = new HashSet<String>();
+  private static Set<String> apiVars = new HashSet<>();
 
   static {
     apiVars.add(TOPOLOGY_DEBUG);

File: heron/api/src/java/com/twitter/heron/api/bolt/BaseBasicBolt.java
Patch:
@@ -21,6 +21,8 @@
 
 public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt {
 
+  private static final long serialVersionUID = 6585146860997305058L;
+
   @Override
   public void prepare(Map heronConf, TopologyContext context) {
   }

File: heron/api/src/java/com/twitter/heron/api/bolt/BaseRichBolt.java
Patch:
@@ -17,6 +17,8 @@
 import com.twitter.heron.api.topology.BaseComponent;
 
 public abstract class BaseRichBolt extends BaseComponent implements IRichBolt {
+  private static final long serialVersionUID = -2269376231370074742L;
+
   @Override
   public void cleanup() {
   }

File: heron/api/src/java/com/twitter/heron/api/bolt/BasicBoltExecutor.java
Patch:
@@ -23,6 +23,8 @@
 import com.twitter.heron.api.tuple.Tuple;
 
 public class BasicBoltExecutor implements IRichBolt {
+  private static final long serialVersionUID = 7021447981762957626L;
+
   private IBasicBolt bolt;
   private transient BasicOutputCollector collector;
 

File: heron/api/src/java/com/twitter/heron/api/exception/AlreadyAliveException.java
Patch:
@@ -15,4 +15,5 @@
 package com.twitter.heron.api.exception;
 
 public class AlreadyAliveException extends Exception {
+  private static final long serialVersionUID = -6584762522175817526L;
 }

File: heron/api/src/java/com/twitter/heron/api/exception/FailedException.java
Patch:
@@ -15,6 +15,8 @@
 package com.twitter.heron.api.exception;
 
 public class FailedException extends RuntimeException {
+  private static final long serialVersionUID = 7459893047828010291L;
+
   public FailedException() {
     super();
   }

File: heron/api/src/java/com/twitter/heron/api/exception/InvalidTopologyException.java
Patch:
@@ -15,4 +15,5 @@
 package com.twitter.heron.api.exception;
 
 public class InvalidTopologyException extends Exception {
+  private static final long serialVersionUID = 569757985177991157L;
 }

File: heron/api/src/java/com/twitter/heron/api/exception/ReportedFailedException.java
Patch:
@@ -15,6 +15,8 @@
 package com.twitter.heron.api.exception;
 
 public class ReportedFailedException extends FailedException {
+  private static final long serialVersionUID = 4669648860978454563L;
+
   public ReportedFailedException() {
     super();
   }

File: heron/api/src/java/com/twitter/heron/api/spout/BaseRichSpout.java
Patch:
@@ -17,6 +17,8 @@
 import com.twitter.heron.api.topology.BaseComponent;
 
 public abstract class BaseRichSpout extends BaseComponent implements IRichSpout {
+  private static final long serialVersionUID = 743568889496601081L;
+
   @Override
   public void close() {
   }

File: heron/api/src/java/com/twitter/heron/api/spout/RawScheme.java
Patch:
@@ -21,6 +21,8 @@
 import static com.twitter.heron.api.utils.Utils.tuple;
 
 public class RawScheme implements Scheme {
+  private static final long serialVersionUID = 4975778817451590776L;
+
   public List<Object> deserialize(byte[] ser) {
     return tuple(ser);
   }

File: heron/api/src/java/com/twitter/heron/api/spout/SchemeAsMultiScheme.java
Patch:
@@ -20,6 +20,7 @@
 import com.twitter.heron.api.tuple.Fields;
 
 public class SchemeAsMultiScheme implements MultiScheme {
+  private static final long serialVersionUID = -7993224027057349150L;
   public final Scheme scheme;
 
   public SchemeAsMultiScheme(Scheme scheme) {

File: heron/api/src/java/com/twitter/heron/api/topology/BaseComponent.java
Patch:
@@ -17,6 +17,8 @@
 import java.util.Map;
 
 public abstract class BaseComponent implements IComponent {
+  private static final long serialVersionUID = 4922360537045442614L;
+
   @Override
   public Map<String, Object> getComponentConfiguration() {
     return null;

File: heron/api/src/java/com/twitter/heron/api/tuple/Fields.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.Map;
 
 public class Fields implements Iterable<String>, Serializable {
+  private static final long serialVersionUID = -1045737418722082345L;
+
   private List<String> fields;
   private Map<String, Integer> mIndex = new HashMap<String, Integer>();
 

File: heron/api/src/java/com/twitter/heron/api/tuple/Values.java
Patch:
@@ -21,6 +21,8 @@
  * syntax.
  */
 public class Values extends ArrayList<Object> {
+  private static final long serialVersionUID = 1863659070473283575L;
+
   public Values() {
   }
 

File: heron/examples/src/java/com/twitter/heron/examples/AckingTopology.java
Patch:
@@ -67,6 +67,7 @@ public static void main(String[] args) throws Exception {
 
   public static class AckingTestWordSpout extends BaseRichSpout {
 
+    private static final long serialVersionUID = -630307949908406294L;
     private SpoutOutputCollector collector;
     private String[] words;
     private Random rand;
@@ -105,6 +106,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
   }
 
   public static class ExclamationBolt extends BaseRichBolt {
+    private static final long serialVersionUID = -2267338658317778214L;
     private OutputCollector collector;
     private long nItems;
     private long startTime;

File: heron/examples/src/java/com/twitter/heron/examples/ComponentJVMOptionsTopology.java
Patch:
@@ -70,13 +70,12 @@ public static void main(String[] args) throws Exception {
   }
 
   public static class ExclamationBolt extends BaseRichBolt {
-    private OutputCollector collector;
+    private static final long serialVersionUID = 2165326630789117557L;
     private long nItems;
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
-      collector = acollector;
+    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
       nItems = 0;
       startTime = System.currentTimeMillis();
     }

File: heron/examples/src/java/com/twitter/heron/examples/CustomGroupingTopology.java
Patch:
@@ -52,6 +52,7 @@ public static void main(String[] args) throws Exception {
   }
 
   public static class MyBolt extends BaseRichBolt {
+    private static final long serialVersionUID = 1913733461146490337L;
     private long nItems;
 
     @Override
@@ -72,6 +73,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
   }
 
   public static class MyCustomStreamGrouping implements CustomStreamGrouping {
+    private static final long serialVersionUID = 5987557161936201860L;
     private List<Integer> taskIds;
 
     public MyCustomStreamGrouping() {
@@ -87,7 +89,7 @@ public void prepare(
 
     @Override
     public List<Integer> chooseTasks(int taskId, List<Object> values) {
-      List<Integer> ret = new ArrayList<Integer>();
+      List<Integer> ret = new ArrayList<>();
       ret.add(taskIds.get(0));
       return ret;
     }

File: heron/examples/src/java/com/twitter/heron/examples/ExclamationTopology.java
Patch:
@@ -66,13 +66,12 @@ public static void main(String[] args) throws Exception {
 
   public static class ExclamationBolt extends BaseRichBolt {
 
-    private OutputCollector collector;
+    private static final long serialVersionUID = 1184860508880121352L;
     private long nItems;
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
-      collector = acollector;
+    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
       nItems = 0;
       startTime = System.currentTimeMillis();
     }

File: heron/examples/src/java/com/twitter/heron/examples/MultiSpoutExclamationTopology.java
Patch:
@@ -71,13 +71,12 @@ public static void main(String[] args) throws Exception {
   }
 
   public static class ExclamationBolt extends BaseRichBolt {
-    private OutputCollector collector;
+    private static final long serialVersionUID = 6945654705222426596L;
     private long nItems;
     private long startTime;
 
     @Override
-    public void prepare(Map conf, TopologyContext context, OutputCollector acollector) {
-      collector = acollector;
+    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
       nItems = 0;
       startTime = System.currentTimeMillis();
     }

File: heron/examples/src/java/com/twitter/heron/examples/MultiStageAckingTopology.java
Patch:
@@ -67,6 +67,7 @@ public static void main(String[] args) throws Exception {
   }
 
   public static class AckingTestWordSpout extends BaseRichSpout {
+    private static final long serialVersionUID = -5972291205871728684L;
     private SpoutOutputCollector collector;
     private String[] words;
     private Random rand;
@@ -103,6 +104,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
   }
 
   public static class ExclamationBolt extends BaseRichBolt {
+    private static final long serialVersionUID = -3226618846531432832L;
     private OutputCollector collector;
     private long nItems;
     private long startTime;

File: heron/examples/src/java/com/twitter/heron/examples/TaskHookTopology.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String[] args) throws Exception {
     conf.put(Config.TOPOLOGY_WORKER_CHILDOPTS, "-XX:+HeapDumpOnOutOfMemoryError");
 
     // Set the task hook
-    List<String> taskHooks = new LinkedList<String>();
+    List<String> taskHooks = new LinkedList<>();
     taskHooks.add("com.twitter.heron.examples.TaskHookTopology$TestTaskHook");
     conf.setAutoTaskHooks(taskHooks);
 
@@ -183,6 +183,7 @@ public void boltFail(BoltFailInfo info) {
   }
 
   public static class AckingTestWordSpout extends BaseRichSpout {
+    private static final long serialVersionUID = 6702214894823377325L;
     private SpoutOutputCollector collector;
     private String[] words;
     private Random rand;
@@ -223,6 +224,7 @@ public void declareOutputFields(OutputFieldsDeclarer declarer) {
   }
 
   public static class CountBolt extends BaseRichBolt {
+    private static final long serialVersionUID = 851874677718634075L;
     private OutputCollector collector;
     private long nItems;
     private long startTime;

File: heron/instance/tests/java/com/twitter/heron/grouping/CustomGroupingTest.java
Patch:
@@ -228,6 +228,7 @@ private PhysicalPlans.PhysicalPlan constructPhysicalPlan(MyCustomGrouping myCust
   }
 
   private static class MyCustomGrouping implements CustomStreamGrouping {
+    private static final long serialVersionUID = -4141962710451507976L;
     private volatile int emitted = 0;
 
     @Override

File: heron/instance/tests/java/com/twitter/heron/resource/TestBolt.java
Patch:
@@ -37,6 +37,7 @@
  */
 @Ignore
 public class TestBolt extends BaseRichBolt {
+  private static final long serialVersionUID = -5160420613503624743L;
   private OutputCollector outputCollector;
   private int tupleExecuted = 0;
 

File: heron/instance/tests/java/com/twitter/heron/resource/TestSpout.java
Patch:
@@ -38,6 +38,7 @@
 
 @Ignore
 public class TestSpout implements IRichSpout {
+  private static final long serialVersionUID = 1174512139916708531L;
   private static final int EMIT_COUNT = 10;
   private static final String MESSAGE_ID = "MESSAGE_ID";
 

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/LaunchRunner.java
Patch:
@@ -96,7 +96,7 @@ public ExecutionEnvironment.ExecutionState createExecutionState() {
   public TopologyAPI.Topology trimTopology(TopologyAPI.Topology topology) {
 
     // create a copy of the topology physical plan
-    TopologyAPI.Topology.Builder builder = topology.newBuilder().mergeFrom(topology);
+    TopologyAPI.Topology.Builder builder = TopologyAPI.Topology.newBuilder().mergeFrom(topology);
 
     // clear the state of user spout java objects - which can be potentially huge
     for (TopologyAPI.Spout.Builder spout : builder.getSpoutsBuilderList()) {

File: heron/storm/src/java/backtype/storm/Config.java
Patch:
@@ -40,6 +40,7 @@
  * Spouts. .</p>
  */
 public class Config extends com.twitter.heron.api.Config {
+  private static final long serialVersionUID = 2282398261811468412L;
 
   /**
    * True if Storm should timeout messages or not. Defaults to true. This is meant to be used
@@ -141,6 +142,7 @@ public class Config extends com.twitter.heron.api.Config {
    * This is not supported in Heron
    */
   public static final String TOPOLOGY_MAX_ERROR_REPORT_PER_INTERVAL = "topology.max.error.report.per.interval";
+
   /**
    * When set to true, Storm will log every message that's emitted.
    */

File: heron/storm/src/java/backtype/storm/generated/AlreadyAliveException.java
Patch:
@@ -15,4 +15,5 @@
 package backtype.storm.generated;
 
 public class AlreadyAliveException extends Exception {
+  private static final long serialVersionUID = 1333504033150091277L;
 }

File: heron/storm/src/java/backtype/storm/generated/InvalidTopologyException.java
Patch:
@@ -15,4 +15,5 @@
 package backtype.storm.generated;
 
 public class InvalidTopologyException extends Exception {
+  private static final long serialVersionUID = 5434760981811196755L;
 }

File: heron/storm/src/java/backtype/storm/generated/NotAliveException.java
Patch:
@@ -15,4 +15,5 @@
 package backtype.storm.generated;
 
 public class NotAliveException extends Exception {
+  private static final long serialVersionUID = -6138719666490739879L;
 }

File: heron/storm/src/java/backtype/storm/grouping/CustomStreamGroupingDelegate.java
Patch:
@@ -20,6 +20,7 @@
 import backtype.storm.task.TopologyContext;
 
 public class CustomStreamGroupingDelegate implements com.twitter.heron.api.grouping.CustomStreamGrouping {
+  private static final long serialVersionUID = 2286979042095596191L;
   private CustomStreamGrouping delegate;
 
   public CustomStreamGroupingDelegate(CustomStreamGrouping delegate) {

File: heron/storm/src/java/backtype/storm/spout/RawMultiScheme.java
Patch:
@@ -21,6 +21,8 @@
 import static java.util.Arrays.asList;
 
 public class RawMultiScheme implements MultiScheme {
+  private static final long serialVersionUID = -8684698009461977572L;
+
   @Override
   public Iterable<List<Object>> deserialize(byte[] ser) {
     return asList(tuple(ser));

File: heron/storm/src/java/backtype/storm/spout/RawScheme.java
Patch:
@@ -20,6 +20,8 @@
 import static backtype.storm.utils.Utils.tuple;
 
 public class RawScheme implements Scheme {
+  private static final long serialVersionUID = 3432313862210530606L;
+
   public List<Object> deserialize(byte[] ser) {
     return tuple(ser);
   }

File: heron/storm/src/java/backtype/storm/spout/SchemeAsMultiScheme.java
Patch:
@@ -20,6 +20,7 @@
 import backtype.storm.tuple.Fields;
 
 public class SchemeAsMultiScheme implements MultiScheme {
+  private static final long serialVersionUID = 5989937394124019502L;
   public final Scheme scheme;
 
   public SchemeAsMultiScheme(Scheme scheme) {

File: heron/storm/src/java/backtype/storm/topology/base/BaseBasicBolt.java
Patch:
@@ -21,6 +21,8 @@
 
 public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt {
 
+  private static final long serialVersionUID = -1818037075120434390L;
+
   @Override
   public void prepare(Map stormConf, TopologyContext context) {
   }

File: heron/storm/src/java/backtype/storm/topology/base/BaseComponent.java
Patch:
@@ -19,6 +19,8 @@
 import backtype.storm.topology.IComponent;
 
 public abstract class BaseComponent implements IComponent {
+  private static final long serialVersionUID = 3451500233699261898L;
+
   @Override
   public Map<String, Object> getComponentConfiguration() {
     return null;

File: heron/storm/src/java/backtype/storm/topology/base/BaseRichBolt.java
Patch:
@@ -17,6 +17,8 @@
 import backtype.storm.topology.IRichBolt;
 
 public abstract class BaseRichBolt extends BaseComponent implements IRichBolt {
+  private static final long serialVersionUID = -380896109088367449L;
+
   @Override
   public void cleanup() {
   }

File: heron/storm/src/java/backtype/storm/topology/base/BaseRichSpout.java
Patch:
@@ -17,6 +17,8 @@
 import backtype.storm.topology.IRichSpout;
 
 public abstract class BaseRichSpout extends BaseComponent implements IRichSpout {
+  private static final long serialVersionUID = -4408729095010972293L;
+
   @Override
   public void close() {
   }

File: heron/storm/src/java/backtype/storm/tuple/Fields.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 public class Fields implements Iterable<String>, Serializable {
+  private static final long serialVersionUID = -7503973062110993975L;
   private com.twitter.heron.api.tuple.Fields delegate;
 
   public Fields(String... fields) {

File: heron/storm/src/java/backtype/storm/tuple/Values.java
Patch:
@@ -21,6 +21,8 @@
  * syntax.
  */
 public class Values extends ArrayList<Object> {
+  private static final long serialVersionUID = -4997196466672849467L;
+
   public Values() {
   }
 

File: heron/storm/src/java/org/apache/storm/topology/base/BaseBasicBolt.java
Patch:
@@ -21,6 +21,8 @@
 
 public abstract class BaseBasicBolt extends BaseComponent implements IBasicBolt {
 
+  private static final long serialVersionUID = 1464223135325402830L;
+
   @Override
   public void prepare(Map stormConf, TopologyContext context) {
   }

File: heron/storm/src/java/org/apache/storm/topology/base/BaseComponent.java
Patch:
@@ -19,6 +19,8 @@
 import org.apache.storm.topology.IComponent;
 
 public abstract class BaseComponent implements IComponent {
+  private static final long serialVersionUID = -892888971805729161L;
+
   @Override
   public Map<String, Object> getComponentConfiguration() {
     return null;

File: heron/storm/src/java/org/apache/storm/topology/base/BaseRichBolt.java
Patch:
@@ -17,6 +17,8 @@
 import org.apache.storm.topology.IRichBolt;
 
 public abstract class BaseRichBolt extends BaseComponent implements IRichBolt {
+  private static final long serialVersionUID = 5749013017107995933L;
+
   @Override
   public void cleanup() {
   }

File: heron/storm/src/java/org/apache/storm/topology/base/BaseRichSpout.java
Patch:
@@ -17,6 +17,8 @@
 import org.apache.storm.topology.IRichSpout;
 
 public abstract class BaseRichSpout extends BaseComponent implements IRichSpout {
+  private static final long serialVersionUID = 7053278702425063125L;
+
   @Override
   public void close() {
   }

File: heron/storm/src/java/org/apache/storm/tuple/Values.java
Patch:
@@ -21,6 +21,8 @@
  * syntax.
  */
 public class Values extends ArrayList<Object> {
+  private static final long serialVersionUID = -224861772797577471L;
+
   public Values() {
   }
 

File: tools/java/src/com/twitter/bazel/checkstyle/CppCheckstyle.java
Patch:
@@ -131,7 +131,7 @@ private static Collection<String> getSourceFiles(String extraActionFile) {
             cppInfo.getSourcesAndHeadersList(),
             Predicates.and(
                     Predicates.not(Predicates.containsPattern("3rdparty/")),
-                    Predicates.not(Predicates.containsPattern("config/")),
+                    Predicates.not(Predicates.containsPattern("config/heron-config.h")),
                     Predicates.not(Predicates.containsPattern("heron/proto/"))
             )
     );

File: heron/api/src/java/com/twitter/heron/api/spout/RawMultiScheme.java
Patch:
@@ -22,6 +22,8 @@
 import static java.util.Arrays.asList;
 
 public class RawMultiScheme implements MultiScheme {
+  private static final long serialVersionUID = 1540454777373652254L;
+
   @Override
   public Iterable<List<Object>> deserialize(byte[] ser) {
     return asList(tuple(ser));

File: heron/common/src/java/com/twitter/heron/common/basics/SysUtils.java
Patch:
@@ -38,7 +38,6 @@ public static void sleep(long millis) {
   public static int getFreePort() {
     try (ServerSocket socket = new ServerSocket(0)) {
       int port = socket.getLocalPort();
-      socket.close();
       return port;
     } catch (IOException ioe) {
       return -1;

File: heron/common/src/java/com/twitter/heron/common/utils/logging/LoggingHelper.java
Patch:
@@ -116,6 +116,8 @@ public static FileHandler getFileHandler(String processId,
   }
 
   public static final class StdOutErrLevel extends Level {
+    private static final long serialVersionUID = -3442332825945855738L;
+
     /**
      * Level for STDOUT activity.
      */

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/MetricsCollector.java
Patch:
@@ -44,8 +44,8 @@ public class MetricsCollector implements IMetricsRegister {
 
   public MetricsCollector(WakeableLooper runnableToGatherMetrics,
                           Communicator<Metrics.MetricPublisherPublishMessage> queue) {
-    metrics = new HashMap<String, IMetric>();
-    timeBucketToMetricNames = new HashMap<Integer, List<String>>();
+    metrics = new HashMap<>();
+    timeBucketToMetricNames = new HashMap<>();
     this.queue = queue;
     this.runnableToGatherMetrics = runnableToGatherMetrics;
   }
@@ -156,6 +156,7 @@ public void run() {
 
   // Gather the value of given metricName, convert it  into protobuf,
   // and add it to MetricPublisherPublishMessage builder given.
+  @SuppressWarnings("unchecked")
   private void gatherOneMetric(
       String metricName,
       Metrics.MetricPublisherPublishMessage.Builder builder) {

File: heron/common/src/java/com/twitter/heron/common/utils/misc/SerializeDeSerializeHelper.java
Patch:
@@ -28,7 +28,7 @@ public final class SerializeDeSerializeHelper {
   private SerializeDeSerializeHelper() {
   }
 
-  public static IPluggableSerializer getSerializer(Map config) {
+  public static IPluggableSerializer getSerializer(Map<String, Object> config) {
     IPluggableSerializer serializer;
     try {
       String serializerClassName = (String) config.get(Config.TOPOLOGY_SERIALIZER_CLASSNAME);

File: heron/common/tests/java/com/twitter/heron/common/basics/FileUtilsTest.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.UUID;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -28,8 +29,6 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
-import junit.framework.Assert;
-
 /**
  * FileUtils Tester.
  */

File: heron/common/tests/java/com/twitter/heron/common/config/ConfigReaderTest.java
Patch:
@@ -26,11 +26,9 @@ public class ConfigReaderTest {
 
   @Test
   public void testLoadFile() throws Exception {
-    ConfigReader configReader = ConfigReader.class.newInstance();
-
     String file = Paths.get(System.getenv("JAVA_RUNFILES"),
         Constants.TEST_DATA_PATH, "defaults.yaml").toString();
-    Map props = configReader.loadFile(file);
+    Map<String, Object> props = ConfigReader.loadFile(file);
 
     Assert.assertEquals("role", props.get(Constants.ROLE_KEY));
     Assert.assertEquals("environ", props.get(Constants.ENVIRON_KEY));

File: heron/localmode/tests/java/com/twitter/heron/localmode/executors/InstanceExecutorTest.java
Patch:
@@ -29,7 +29,7 @@
 import com.twitter.heron.localmode.utils.PhysicalPlanUtilTest;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * InstanceExecutor Tester.

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/AllGroupingTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * AllGrouping Tester.

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/CustomGroupingTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class CustomGroupingTest {
 

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/FieldsGroupingTest.java
Patch:
@@ -29,7 +29,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.proto.system.HeronTuples;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class FieldsGroupingTest {
 

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/LowestGroupingTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class LowestGroupingTest {
 

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/ShuffleGroupingTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.twitter.heron.proto.system.HeronTuples;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class ShuffleGroupingTest {
 

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/PhysicalPlanUtilTest.java
Patch:
@@ -40,7 +40,7 @@
 import com.twitter.heron.api.tuple.Tuple;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * PhysicalPlanGenerator Tester.

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/RotatingMapTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * RotatingMap Tester.

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/StreamConsumersTest.java
Patch:
@@ -27,7 +27,7 @@
 import com.twitter.heron.localmode.grouping.Grouping;
 import com.twitter.heron.proto.system.PhysicalPlans;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 
 /**

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/TupleCacheTest.java
Patch:
@@ -27,7 +27,7 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.proto.system.HeronTuples;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * TupleCache Tester.

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/XORManagerTest.java
Patch:
@@ -32,7 +32,7 @@
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.WakeableLooper;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * XORManager Tester.

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/HandleTMasterLocationTest.java
Patch:
@@ -40,7 +40,7 @@
 import com.twitter.heron.proto.system.Metrics;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * Test whether MetricsManagerServer could handle TMasterLocationRefreshMessage correctly.

File: heron/metricsmgr/tests/java/com/twitter/heron/metricsmgr/MetricsManagerServerTest.java
Patch:
@@ -37,7 +37,7 @@
 import com.twitter.heron.spi.metricsmgr.metrics.MetricsInfo;
 import com.twitter.heron.spi.metricsmgr.metrics.MetricsRecord;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 /**
  * MetricsManagerServer Tester.

File: heron/spi/src/java/com/twitter/heron/spi/common/HttpUtils.java
Patch:
@@ -281,7 +281,6 @@ public static boolean isLocationReachable(
     while (retryLeft > 0) {
       try (Socket s = new Socket()) {
         s.connect(new InetSocketAddress(host, port), timeout);
-        s.close();
         return true;
       } catch (SocketTimeoutException se) {
         if (verbose) {

File: heron/spi/src/java/com/twitter/heron/spi/common/Resource.java
Patch:
@@ -34,6 +34,7 @@ private Resource() {
    *
    * @return Map, a map of key value pairs
    */
+  @SuppressWarnings("rawtypes")
   public static Map load(String className, String resName) throws ClassNotFoundException {
     // get the current class
     Class cls = Class.forName(className);

File: heron/spi/src/java/com/twitter/heron/spi/utils/NetworkUtils.java
Patch:
@@ -36,9 +36,7 @@ private NetworkUtils() {
    */
   public static int getFreePort() {
     try (ServerSocket socket = new ServerSocket(0)) {
-      int port = socket.getLocalPort();
-      socket.close();
-      return port;
+      return socket.getLocalPort();
     } catch (IOException ioe) {
       return -1;
     }

File: heron/spi/tests/java/com/twitter/heron/spi/common/MiscTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import org.junit.Test;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class MiscTest {
   private static final Logger LOG = Logger.getLogger(MiscTest.class.getName());

File: heron/spi/tests/java/com/twitter/heron/spi/common/ShellUtilsTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.junit.Test;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class ShellUtilsTest {
 

File: heron/statemgrs/tests/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManagerTest.java
Patch:
@@ -31,7 +31,7 @@
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Keys;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 
 /**

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.twitter.heron.spi.common.Keys;
 import com.twitter.heron.spi.common.Misc;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class LocalFileSystemConfigTest {
 

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploaderTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Keys;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 public class LocalFileSystemUploaderTest {
 

File: heron/localmode/src/java/com/twitter/heron/localmode/executors/InstanceExecutor.java
Patch:
@@ -14,8 +14,8 @@
 
 package com.twitter.heron.localmode.executors;
 
-import java.util.logging.Logger;
 import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.Communicator;

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/BoltMetrics.java
Patch:
@@ -79,7 +79,8 @@ public void registerMetrics(TopologyContextImpl topologyContext) {
     topologyContext.registerMetric("__execute-latency", executeLatency, interval);
     topologyContext.registerMetric("__emit-count", emitCount, interval);
     topologyContext.registerMetric("__out-queue-full-count", outQueueFullCount, interval);
-    topologyContext.registerMetric("__tuple-deserialization-time-ns", deserializationTimeNs, interval);
+    topologyContext.registerMetric(
+        "__tuple-deserialization-time-ns", deserializationTimeNs, interval);
     topologyContext.registerMetric("__tuple-serialization-time-ns", serializationTimeNs, interval);
   }
 

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/SpoutMetrics.java
Patch:
@@ -48,7 +48,8 @@ public class SpoutMetrics {
   private final CountMetric nextTupleCount;
   private final MultiCountMetric serializationTimeNs;
 
-  // The # of times back-pressure happens on outStreamQueue so instance could not produce more tuples
+  // The # of times back-pressure happens on outStreamQueue so instance could not
+  // produce more tuples
   private final CountMetric outQueueFullCount;
 
   // The mean # of pending-to-be-acked tuples in spout if acking is enabled

File: heron/common/src/java/com/twitter/heron/common/utils/misc/TupleKeyGenerator.java
Patch:
@@ -30,4 +30,5 @@ public TupleKeyGenerator() {
   public long next() {
     return rand.nextLong();
   }
-}
\ No newline at end of file
+}
+

File: heron/common/tests/java/com/twitter/heron/common/basics/WakeableLooperTest.java
Patch:
@@ -246,7 +246,8 @@ public void run() {
 
     try {
       Method method =
-          slaveLooper.getClass().getSuperclass().getDeclaredMethod("triggerExpiredTimers", long.class);
+          slaveLooper.getClass().getSuperclass().getDeclaredMethod(
+              "triggerExpiredTimers", long.class);
       long current = System.nanoTime();
       method.setAccessible(true);
       method.invoke(slaveLooper, current);

File: heron/common/src/java/com/twitter/heron/common/utils/tuple/TickTuple.java
Patch:
@@ -205,4 +205,5 @@ public int hashCode() {
   @Override
   public void resetValues() {
   }
-}
\ No newline at end of file
+}
+

File: heron/common/tests/java/com/twitter/heron/common/basics/FileUtilsTest.java
Patch:
@@ -34,7 +34,7 @@
  * FileUtils Tester.
  */
 @RunWith(PowerMockRunner.class)
-@PrepareForTest({FileUtils.class})
+@PrepareForTest(FileUtils.class)
 public class FileUtilsTest {
 
   @Before

File: heron/common/tests/java/com/twitter/heron/common/config/SystemConfigTest.java
Patch:
@@ -25,7 +25,9 @@ public class SystemConfigTest {
 
   @Test
   public void testReadConfig() throws Exception {
-    String file = Paths.get(System.getenv("JAVA_RUNFILES"), Constants.TEST_DATA_PATH, "sysconfig.yaml").toString();
+    String file = Paths.get(System.getenv("JAVA_RUNFILES"),
+        Constants.TEST_DATA_PATH, "sysconfig.yaml").toString();
+
     SystemConfig sysconfig = new SystemConfig(file);
 
     Assert.assertEquals("log-files", sysconfig.getHeronLoggingDirectory());

File: heron/common/tests/java/com/twitter/heron/common/network/EchoTest.java
Patch:
@@ -105,7 +105,7 @@ private static class EchoServer extends HeronServer {
     private int nRequests;
     private int maxRequests;
 
-    public EchoServer(NIOLooper looper, int port, int maxRequests) {
+    EchoServer(NIOLooper looper, int port, int maxRequests) {
       super(looper, "localhost", port,
           new HeronSocketOptions(100 * 1024 * 1024, 100,
               100 * 1024 * 1024,
@@ -167,7 +167,7 @@ private static class EchoClient extends HeronClient {
     private int nRequests;
     private int maxRequests;
 
-    public EchoClient(NIOLooper looper, int port, int maxRequests) {
+    EchoClient(NIOLooper looper, int port, int maxRequests) {
       super(looper, "localhost", port,
           new HeronSocketOptions(100 * 1024 * 1024, 100,
               100 * 1024 * 1024, 100,

File: heron/localmode/src/java/com/twitter/heron/localmode/grouping/FieldsGrouping.java
Patch:
@@ -30,7 +30,9 @@ public FieldsGrouping(TopologyAPI.InputStream inputStream,
 
     for (int i = 0; i < schema.getKeysCount(); i++) {
       for (int j = 0; i < inputStream.getGroupingFields().getKeysCount(); j++) {
-        if (schema.getKeys(i).getKey().equals(inputStream.getGroupingFields().getKeys(j).getKey())) {
+        Boolean keysEqual = schema.getKeys(i).getKey().equals(
+            inputStream.getGroupingFields().getKeys(j).getKey());
+        if (keysEqual) {
           fieldsGroupingIndices.add(i);
           break;
         }

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/RootTupleInfo.java
Patch:
@@ -51,4 +51,5 @@ public int compareTo(RootTupleInfo that) {
       return 0;
     }
   }
-}
\ No newline at end of file
+}
+

File: heron/localmode/src/java/com/twitter/heron/localmode/utils/RotatingMap.java
Patch:
@@ -62,7 +62,7 @@ public boolean anchor(long key, long value) {
         long newValue = currentValue ^ value;
         m.put(key, newValue);
 
-        return (newValue == 0);
+        return newValue == 0;
       }
     }
     return false;

File: heron/localmode/src/java/com/twitter/heron/localmode/utils/XORManager.java
Patch:
@@ -49,8 +49,8 @@ public void run() {
     };
     looper.registerTimerEventInNanoSeconds(timeoutSec * Constants.SECONDS_TO_NANOSECONDS, r);
 
-    this.rotateIntervalNs = Constants.SECONDS_TO_NANOSECONDS * timeoutSec / nBuckets +
-        (Constants.SECONDS_TO_NANOSECONDS * timeoutSec) % nBuckets;
+    this.rotateIntervalNs = Constants.SECONDS_TO_NANOSECONDS * timeoutSec / nBuckets
+        + (Constants.SECONDS_TO_NANOSECONDS * timeoutSec) % nBuckets;
 
     for (Integer taskId : taskIds) {
       spoutTasksToRotatingMap.put(taskId, new RotatingMap(nBuckets));

File: heron/localmode/tests/java/com/twitter/heron/localmode/executors/InstanceExecutorTest.java
Patch:
@@ -118,8 +118,9 @@ public void testCreateInstance() throws Exception {
    */
   @Test
   public void testCreatePhysicalPlanHelper() throws Exception {
-    PhysicalPlanHelper physicalPlanHelper = instanceExecutor.createPhysicalPlanHelper(plan, instanceId,
-        Mockito.mock(MetricsCollector.class));
+    PhysicalPlanHelper physicalPlanHelper =
+        instanceExecutor.createPhysicalPlanHelper(plan, instanceId,
+            Mockito.mock(MetricsCollector.class));
 
     Assert.assertNotNull(physicalPlanHelper.getTopologyContext());
   }

File: heron/localmode/tests/java/com/twitter/heron/localmode/grouping/LowestGroupingTest.java
Patch:
@@ -40,12 +40,12 @@ public void after() throws Exception {
    */
   @Test
   public void testGetListToSend() throws Exception {
-    List<Integer> task_ids = new LinkedList<>();
+    List<Integer> taskIds = new LinkedList<>();
     for (int i = 0; i < 100; ++i) {
-      task_ids.add(i);
+      taskIds.add(i);
     }
 
-    LowestGrouping g = new LowestGrouping(task_ids);
+    LowestGrouping g = new LowestGrouping(taskIds);
     for (int i = 0; i < 1000; ++i) {
       HeronTuples.HeronDataTuple dummy = HeronTuples.HeronDataTuple.getDefaultInstance();
       List<Integer> dest = g.getListToSend(dummy);

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/TupleCacheTest.java
Patch:
@@ -33,8 +33,8 @@
  * TupleCache Tester.
  */
 public class TupleCacheTest {
-  public static int N = 10;
-  public static int REPEAT = 10;
+  public static final int N = 10;
+  public static final int REPEAT = 10;
 
   private static List<Integer> destTaskIds;
   private static HeronTuples.HeronDataTuple dataTuple;
@@ -180,4 +180,4 @@ public void testAddAckTupleNoBatch() throws Exception {
       Assert.assertEquals(3, tuples.size());
     }
   }
-} 
+}

File: heron/spi/src/java/com/twitter/heron/spi/common/Keys.java
Patch:
@@ -16,6 +16,9 @@
 
 public class Keys {
 
+  protected Keys() {
+  }
+
   public static String cluster() {
     return ConfigKeys.get("CLUSTER");
   }

File: heron/spi/src/java/com/twitter/heron/spi/common/ClusterDefaults.java
Patch:
@@ -16,6 +16,9 @@
 
 public final class ClusterDefaults {
 
+  private ClusterDefaults() {
+  }
+
   public static Config getDefaultHome() {
     Config.Builder cb = Config.newBuilder();
 

File: heron/spi/src/java/com/twitter/heron/spi/common/Context.java
Patch:
@@ -16,6 +16,9 @@
 
 public class Context {
 
+  protected Context() {
+  }
+
   public static String cluster(Config cfg) {
     return cfg.getStringValue(ConfigKeys.get("CLUSTER"));
   }

File: heron/spi/src/java/com/twitter/heron/spi/common/Defaults.java
Patch:
@@ -16,6 +16,9 @@
 
 public class Defaults {
 
+  protected Defaults() {
+  }
+
   public static String cluster() {
     return ConfigDefaults.get("CLUSTER");
   }

File: heron/spi/src/java/com/twitter/heron/spi/utils/NetworkUtils.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Utilities related to network.
  */
-public class NetworkUtils {
+public final class NetworkUtils {
   private static final Logger LOG = Logger.getLogger(NetworkUtils.class.getName());
 
   private NetworkUtils() {

File: heron/spi/src/java/com/twitter/heron/spi/utils/ReflectUtils.java
Patch:
@@ -14,7 +14,7 @@
 
 package com.twitter.heron.spi.util;
 
-public class ReflectUtils {
+public final class ReflectUtils {
 
   private ReflectUtils() {
   }

File: heron/spi/src/java/com/twitter/heron/spi/utils/Runtime.java
Patch:
@@ -23,7 +23,7 @@
 import com.twitter.heron.spi.scheduler.ILauncher;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
-public class Runtime {
+public final class Runtime {
 
   private Runtime() {
   }

File: heron/api/src/java/com/twitter/heron/api/HeronSubmitter.java
Patch:
@@ -17,6 +17,7 @@
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -94,7 +95,7 @@ private static void submitTopologyToFile(TopologyAPI.Topology fTopology,
       bos.write(topEncoding);
       bos.flush();
       bos.close();
-    } catch (Exception e) {
+    } catch (IOException e) {
       throw new RuntimeException("Error writing topology defn to temp directory " + dirName);
     }
   }

File: heron/api/src/java/com/twitter/heron/api/serializer/JavaSerializer.java
Patch:
@@ -46,7 +46,7 @@ public Object deserialize(byte[] input) {
     try {
       ObjectInputStream ois = new ObjectInputStream(bis);
       return ois.readObject();
-    } catch (Exception e) {
+    } catch (IOException | ClassNotFoundException e) {
       throw new RuntimeException(e);
     }
   }

File: heron/api/src/java/com/twitter/heron/api/Config.java
Patch:
@@ -310,7 +310,7 @@ public static void setComponentJvmOptions(Map conf, String component, String jvm
     }
     // Format for TOPOLOGY_COMPONENT_JVMOPTS would be a json map like this:
     //  {
-    //     "componentNameAInBase64": "jvmOptionsInBase64", 
+    //     "componentNameAInBase64": "jvmOptionsInBase64",
     //     "componentNameBInBase64": "jvmOptionsInBase64"
     //  }
     conf.put(Config.TOPOLOGY_COMPONENT_JVMOPTS, newEntry);

File: heron/api/src/java/com/twitter/heron/api/HeronSubmitter.java
Patch:
@@ -80,7 +80,7 @@ public static void submitTopology(String name, Config heronConfig, HeronTopology
   private static void submitTopologyToFile(TopologyAPI.Topology fTopology,
                                            Map<String, String> heronCmdOptions) {
     String dirName = heronCmdOptions.get("cmdline.topologydefn.tmpdirectory");
-    if (dirName == null || dirName == "") {
+    if (dirName == null || dirName.isEmpty()) {
       throw new RuntimeException("Improper specification of directory");
     }
     String fileName = dirName + "/" + fTopology.getName() + ".defn";
@@ -106,6 +106,5 @@ private static void submitTopologyToFile(TopologyAPI.Topology fTopology,
   // TODO add submit options
   public static String submitJar(Config config, String localJar) {
     throw new UnsupportedOperationException("submitJar unsupported");
-    //throw new RuntimeException("Must submit topologies using the heron-cli so that HeronSubmitter knows which jar to upload.");
   }
 }

File: heron/api/src/java/com/twitter/heron/api/metric/ICombiner.java
Patch:
@@ -15,7 +15,7 @@
 package com.twitter.heron.api.metric;
 
 public interface ICombiner<T> {
-  public T identity();
+  T identity();
 
-  public T combine(T a, T b);
+  T combine(T a, T b);
 }

File: heron/api/src/java/com/twitter/heron/api/metric/IMetric.java
Patch:
@@ -15,5 +15,5 @@
 package com.twitter.heron.api.metric;
 
 public interface IMetric {
-  public Object getValueAndReset();
+  Object getValueAndReset();
 }

File: heron/api/src/java/com/twitter/heron/api/metric/IMetricsRegister.java
Patch:
@@ -23,5 +23,5 @@ public interface IMetricsRegister {
  * You must call this during IBolt::prepare or ISpout::open.
  * @return The IMetric argument unchanged.
  */
-  public <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs);
+  <T extends IMetric> T registerMetric(String name, T metric, int timeBucketSizeInSecs);
 }

File: heron/api/src/java/com/twitter/heron/api/serializer/IPluggableSerializer.java
Patch:
@@ -17,9 +17,9 @@
 import java.util.Map;
 
 public interface IPluggableSerializer {
-  public void initialize(Map config);
+  void initialize(Map config);
 
-  public byte[] serialize(Object _object);
+  byte[] serialize(Object object);
 
-  public Object deserialize(byte[] _input);
+  Object deserialize(byte[] input);
 }

File: heron/api/src/java/com/twitter/heron/api/serializer/JavaSerializer.java
Patch:
@@ -41,8 +41,8 @@ public byte[] serialize(Object object) {
   }
 
   @Override
-  public Object deserialize(byte[] _input) {
-    ByteArrayInputStream bis = new ByteArrayInputStream(_input);
+  public Object deserialize(byte[] input) {
+    ByteArrayInputStream bis = new ByteArrayInputStream(input);
     try {
       ObjectInputStream ois = new ObjectInputStream(bis);
       return ois.readObject();

File: heron/api/src/java/com/twitter/heron/api/spout/MultiScheme.java
Patch:
@@ -20,7 +20,7 @@
 import com.twitter.heron.api.tuple.Fields;
 
 public interface MultiScheme extends Serializable {
-  public Iterable<List<Object>> deserialize(byte[] ser);
+  Iterable<List<Object>> deserialize(byte[] ser);
 
-  public Fields getOutputFields();
+  Fields getOutputFields();
 }

File: heron/api/src/java/com/twitter/heron/api/spout/Scheme.java
Patch:
@@ -21,7 +21,7 @@
 
 
 public interface Scheme extends Serializable {
-  public List<Object> deserialize(byte[] ser);
+  List<Object> deserialize(byte[] ser);
 
-  public Fields getOutputFields();
+  Fields getOutputFields();
 }

File: heron/api/src/java/com/twitter/heron/api/topology/BaseComponentDeclarer.java
Patch:
@@ -23,7 +23,8 @@
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.api.utils.Utils;
 
-public abstract class BaseComponentDeclarer<T extends ComponentConfigurationDeclarer> extends BaseConfigurationDeclarer<T> {
+public abstract class BaseComponentDeclarer<T extends ComponentConfigurationDeclarer>
+    extends BaseConfigurationDeclarer<T> {
   private String name;
   private IComponent component;
   private OutputFieldsGetter output;

File: heron/spi/src/java/com/twitter/heron/spi/metricsmgr/metrics/ExceptionInfo.java
Patch:
@@ -80,7 +80,8 @@ public String getLogging() {
 
   @Override
   public String toString() {
-    return String.format("{stack trace = %s, last time = %s, first time = %s, count = %d, logging = %s}",
+    return String.format(
+        "{stack trace = %s, last time = %s, first time = %s, count = %d, logging = %s}",
         getStackTrace(), getLastTime(), getFirstTime(), getCount(), getLogging());
   }
 }

File: heron/spi/tests/java/com/twitter/heron/spi/metricsmgr/metrics/ExceptionInfoTest.java
Patch:
@@ -99,4 +99,4 @@ public void testGetLogging() throws Exception {
       Assert.assertTrue(exceptionInfos.get(i).getLogging().equals(LOGGING + i));
     }
   }
-} 
+}

File: heron/spi/tests/java/com/twitter/heron/spi/metricsmgr/metrics/MetricsRecordTest.java
Patch:
@@ -104,6 +104,4 @@ public void testGetContext() throws Exception {
       Assert.assertTrue(records.get(i).getContext().equals(CONTEXT + i));
     }
   }
-
-
-} 
+}

File: heron/api/src/java/com/twitter/heron/api/metric/GlobalMetrics.java
Patch:
@@ -64,10 +64,10 @@ public static void safeIncr(String counterName) {
   /**
    * Thread safe created increment of counterName. (Slow)
    */
-  public static void safeIncrBy(String counterName, int N) {
+  public static void safeIncrBy(String counterName, int incrValue) {
     synchronized (INSTANCE) {
       if (INSTANCE.registered) {
-        INSTANCE.metricsContainer.scope(counterName);
+        INSTANCE.metricsContainer.scope(counterName).incrBy(incrValue);
       }
     }
   }

File: heron/common/src/java/com/twitter/heron/common/network/HeronServer.java
Patch:
@@ -87,7 +87,7 @@ public boolean start() {
       acceptChannel.socket().bind(endpoint);
       nioLooper.registerAccept(acceptChannel, this);
       return true;
-    } catch (Exception e) {
+    } catch (IOException e) {
       LOG.log(Level.SEVERE, "Failed to start server", e);
       return false;
     }
@@ -140,7 +140,7 @@ public void handleAccept(SelectableChannel channel) {
         activeConnections.put(socketChannel, helper);
         onConnect(socketChannel);
       }
-    } catch (Exception e) {
+    } catch (IOException e) {
       LOG.log(Level.SEVERE, "Error while accepting a new connection ", e);
       // Note:- we are not calling onError
     }

File: heron/common/src/java/com/twitter/heron/common/basics/SlaveLooper.java
Patch:
@@ -73,7 +73,7 @@ private static final class RunnableLock {
     private Object proceedLock;
     private volatile boolean isToProceed;
 
-    public RunnableLock() {
+    RunnableLock() {
       this.proceedLock = new Object();
       isToProceed = false;
     }

File: heron/common/src/java/com/twitter/heron/common/config/ConfigReader.java
Patch:
@@ -34,7 +34,7 @@
 public class ConfigReader {
   private static final Logger LOG = Logger.getLogger(ConfigReader.class.getName());
 
-  public ConfigReader() {
+  protected ConfigReader() {
   }
 
   /**

File: heron/spi/src/java/com/twitter/heron/spi/utils/NetworkUtils.java
Patch:
@@ -26,6 +26,9 @@
 public class NetworkUtils {
   private static final Logger LOG = Logger.getLogger(NetworkUtils.class.getName());
 
+  private NetworkUtils() {
+  }
+
   /**
    * Get available port.
    *

File: heron/spi/src/java/com/twitter/heron/spi/utils/Shutdown.java
Patch:
@@ -28,8 +28,9 @@ public class Shutdown {
   public void await() {
     try {
       lock.lock();
-      while (!terminated)
+      while (!terminated) {
         terminateCondition.await();
+      }
       lock.unlock();
     } catch (InterruptedException e) {
       LOG.info("Process received interruption, terminating...");

File: heron/spi/src/java/com/twitter/heron/spi/utils/TMasterUtils.java
Patch:
@@ -26,11 +26,10 @@
 import com.twitter.heron.spi.common.HttpUtils;
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
-public class TMasterUtils {
+public final class TMasterUtils {
   private static final Logger LOG = Logger.getLogger(TMasterUtils.class.getName());
 
   private TMasterUtils() {
-
   }
 
   /**

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemConfigKeys.java
Patch:
@@ -37,8 +37,6 @@ final class LocalFileSystemConfigKeys {
   }
 
   private LocalFileSystemConfigKeys() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 
   /*

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemConstants.java
Patch:
@@ -20,7 +20,5 @@ final class LocalFileSystemConstants {
   public static final String KEYS_YAML = "com/twitter/heron/statemgr/localfs/keys.yaml";
 
   private LocalFileSystemConstants() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 }

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/ZkContext.java
Patch:
@@ -46,7 +46,5 @@ public static int retryIntervalMs(Config config) {
   }
 
   private ZkContext() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 }

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/ZkWatcherCallback.java
Patch:
@@ -53,7 +53,5 @@ public void process(WatchedEvent watchedEvent) {
   }
 
   private ZkWatcherCallback() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 }

File: heron/uploaders/src/java/com/twitter/heron/uploader/hdfs/HdfsContext.java
Patch:
@@ -23,8 +23,6 @@ final class HdfsContext extends Context {
       "heron.uploader.hdfs.topologies.directory.uri";
 
   private HdfsContext() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 
   public static String hadoopConfigDirectory(Config config) {

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigDefaults.java
Patch:
@@ -38,8 +38,6 @@ final class LocalFileSystemConfigDefaults {
   }
 
   private LocalFileSystemConfigDefaults() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 
   /*

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigKeys.java
Patch:
@@ -37,8 +37,6 @@ final class LocalFileSystemConfigKeys {
   }
 
   private LocalFileSystemConfigKeys() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 
   /*

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemConstants.java
Patch:
@@ -23,7 +23,5 @@ final class LocalFileSystemConstants {
   public static final String DEFAULTS_YAML = "com/twitter/heron/uploader/localfs/defaults.yaml";
 
   private LocalFileSystemConstants() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 }

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConstantsTest.java
Patch:
@@ -19,7 +19,5 @@ final class LocalFileSystemConstantsTest {
       "/heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/testdata";
 
   private LocalFileSystemConstantsTest() {
-    // Throw an exception if this ever *is* called
-    throw new AssertionError("Instantiating utility class " + this.getClass().getSimpleName());
   }
 }

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemConfigTest.java
Patch:
@@ -28,7 +28,7 @@
 
 public class LocalFileSystemConfigTest {
 
-  private static final String topologyPackageFile = "/tmp/something.tar.gz";
+  private static final String TOPOLOGY_PACKAGE_FILE = "/tmp/something.tar.gz";
 
   private Config getDefaultConfig() {
     Config config = Config.newBuilder()
@@ -91,7 +91,7 @@ public void testTopologyFile() throws Exception {
     uploader.initialize(config);
 
     String destFile = Paths.get(LocalFileSystemContext.fileSystemDirectory(config),
-        new File(topologyPackageFile).getName()).toString();
+        new File(TOPOLOGY_PACKAGE_FILE).getName()).toString();
 
     Assert.assertEquals(
         uploader.getTopologyFile(),
@@ -131,7 +131,7 @@ public void testOverrideTopologyFile() throws Exception {
     uploader.initialize(config);
 
     String destFile = Paths.get(LocalFileSystemContext.fileSystemDirectory(config),
-        new File(topologyPackageFile).getName()).toString();
+        new File(TOPOLOGY_PACKAGE_FILE).getName()).toString();
 
     Assert.assertEquals(
         uploader.getTopologyFile(),

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploaderTest.java
Patch:
@@ -81,7 +81,8 @@ public void testUploader() throws Exception {
   public void testSourceNotExists() throws Exception {
 
     // identify the location of the test topology tar file
-    String topologyPackage = Paths.get(testTopologyDirectory, "doesnot-exist-topology.tar").toString();
+    String topologyPackage = Paths.get(
+        testTopologyDirectory, "doesnot-exist-topology.tar").toString();
 
     Config newconfig = Config.newBuilder()
         .putAll(config).put(Keys.topologyPackageFile(), topologyPackage).build();

File: heron/api/src/java/com/twitter/heron/api/HeronSubmitter.java
Patch:
@@ -18,6 +18,7 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.util.Map;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import com.twitter.heron.api.exception.AlreadyAliveException;
@@ -56,7 +57,7 @@ public static void submitTopology(String name, Config heronConfig, HeronTopology
       initialState = TopologyAPI.TopologyState.RUNNING;
     }
 
-    LOG.info("To deploy a topology in initial state: " + initialState);
+    LOG.log(Level.FINE, "To deploy a topology in initial state {0}", initialState);
 
     TopologyAPI.Topology fTopology =
         topology.setConfig(heronConfig).

File: heron/common/src/java/com/twitter/heron/common/config/ConfigReader.java
Patch:
@@ -54,7 +54,7 @@ public static Map loadFile(String fileName) {
       Path path = Paths.get(fileName);
 
       if (!Files.exists(path)) {
-        LOG.warning("Config file " + fileName + " does not exist.");
+        LOG.fine("Config file " + fileName + " does not exist");
         return props;
       }
 

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -286,7 +286,7 @@ public static void main(String[] args)
 
       System.exit(1);
     } else {
-      LOG.log(Level.INFO, "Topology {0} {1} successfully", new Object[]{topologyName, command});
+      LOG.log(Level.FINE, "Topology {0} {1} successfully", new Object[]{topologyName, command});
 
       System.exit(0);
     }

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerRunner.java
Patch:
@@ -120,7 +120,7 @@ protected boolean restartTopologyHandler(String topologyName) {
       return false;
     }
     // Clean the connection when we are done.
-    LOG.info("Scheduler restarted topology successfully.");
+    LOG.fine("Scheduler restarted topology successfully.");
     return true;
   }
 
@@ -143,7 +143,7 @@ protected boolean killTopologyHandler(String topologyName) {
     }
 
     // Clean the connection when we are done.
-    LOG.info("Scheduler killed topology successfully.");
+    LOG.fine("Scheduler killed topology successfully.");
     return true;
   }
 }

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -349,7 +349,7 @@ public static void main(String[] args) throws
       // 2. Try to submit topology if valid
       if (isValid) {
         // invoke method to submit the topology
-        LOG.log(Level.INFO, "Topology {0} to be submitted", topologyName);
+        LOG.log(Level.FINE, "Topology {0} to be submitted", topologyName);
 
         // Firstly, try to upload necessary packages
         packageURI = uploadPackage(config, uploader);
@@ -382,7 +382,7 @@ public static void main(String[] args) throws
 
       System.exit(1);
     } else {
-      LOG.log(Level.INFO, "Topology {0} submitted successfully", topologyName);
+      LOG.log(Level.FINE, "Topology {0} submitted successfully", topologyName);
 
       System.exit(0);
     }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
Patch:
@@ -91,7 +91,8 @@ protected String formatJavaOpts(String javaOpts) {
    */
   @Override
   public boolean launch(PackingPlan packing) {
-    LOG.info("Launching topology for local cluster " + LocalContext.cluster(config));
+    LOG.log(Level.FINE, "Launching topology for local cluster {0}",
+        LocalContext.cluster(config));
 
     TopologyAPI.Topology topology = Runtime.topology(runtime);
 

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -41,6 +41,7 @@
 import com.twitter.heron.statemgr.zookeeper.ZkContext;
 import com.twitter.heron.statemgr.zookeeper.ZkWatcherCallback;
 
+// TODO(mfu): Add Proxy or tunnel support, rather than to return the value stored directly
 public class CuratorStateManager extends FileSystemStateManager {
   private static final Logger LOG = Logger.getLogger(CuratorStateManager.class.getName());
   private CuratorFramework client;

File: heron/api/src/java/com/twitter/heron/api/bolt/BaseRichBolt.java
Patch:
@@ -17,7 +17,7 @@
 import com.twitter.heron.api.topology.BaseComponent;
 
 public abstract class BaseRichBolt extends BaseComponent implements IRichBolt {
-    @Override
-    public void cleanup() {
-    }    
+  @Override
+  public void cleanup() {
+  }
 }

File: heron/api/src/java/com/twitter/heron/api/bolt/IErrorReporter.java
Patch:
@@ -15,5 +15,5 @@
 package com.twitter.heron.api.bolt;
 
 public interface IErrorReporter {
-    void reportError(Throwable error);
+  void reportError(Throwable error);
 }

File: heron/api/src/java/com/twitter/heron/api/bolt/IRichBolt.java
Patch:
@@ -19,7 +19,6 @@
 /**
  * When writing topologies using Java, {@link IRichBolt} and {@link IRichSpout} are the main interfaces
  * to use to implement components of the topology.
- *
  */
 public interface IRichBolt extends IBolt, IComponent {
 

File: heron/api/src/java/com/twitter/heron/api/hooks/BaseTaskHook.java
Patch:
@@ -31,7 +31,7 @@ public void prepare(Map conf, TopologyContext context) {
 
   @Override
   public void cleanup() {
-  }    
+  }
 
   @Override
   public void emit(EmitInfo info) {

File: heron/api/src/java/com/twitter/heron/api/hooks/info/BoltAckInfo.java
Patch:
@@ -20,7 +20,7 @@ public class BoltAckInfo {
   private Tuple tuple;
   private int ackingTaskId;
   private Long processLatencyMs; // null if it wasn't sampled
-    
+
   public BoltAckInfo(Tuple tuple, int ackingTaskId, Long processLatencyMs) {
     this.tuple = tuple;
     this.ackingTaskId = ackingTaskId;

File: heron/api/src/java/com/twitter/heron/api/hooks/info/BoltExecuteInfo.java
Patch:
@@ -20,7 +20,7 @@ public class BoltExecuteInfo {
   private Tuple tuple;
   private int executingTaskId;
   private Long executeLatencyMs; // null if it wasn't sampled
-    
+
   public BoltExecuteInfo(Tuple tuple, int executingTaskId, Long executeLatencyMs) {
     this.tuple = tuple;
     this.executingTaskId = executingTaskId;

File: heron/api/src/java/com/twitter/heron/api/hooks/info/BoltFailInfo.java
Patch:
@@ -20,7 +20,7 @@ public class BoltFailInfo {
   private Tuple tuple;
   private int failingTaskId;
   private Long failLatencyMs; // null if it wasn't sampled
-    
+
   public BoltFailInfo(Tuple tuple, int failingTaskId, Long failLatencyMs) {
     this.tuple = tuple;
     this.failingTaskId = failingTaskId;

File: heron/api/src/java/com/twitter/heron/api/hooks/info/EmitInfo.java
Patch:
@@ -17,14 +17,12 @@
 import java.util.Collection;
 import java.util.List;
 
-import com.twitter.heron.api.tuple.Tuple;
-
 public class EmitInfo {
   private List<Object> values;
   private String stream;
   private int taskId;
   private Collection<Integer> outTasks;
-    
+
   public EmitInfo(List<Object> values, String stream, int taskId, Collection<Integer> outTasks) {
     this.values = values;
     this.stream = stream;

File: heron/api/src/java/com/twitter/heron/api/hooks/info/SpoutAckInfo.java
Patch:
@@ -18,7 +18,7 @@ public class SpoutAckInfo {
   private Object messageId;
   private int spoutTaskId;
   private Long completeLatencyMs; // null if it wasn't sampled
-    
+
   public SpoutAckInfo(Object messageId, int spoutTaskId, Long completeLatencyMs) {
     this.messageId = messageId;
     this.spoutTaskId = spoutTaskId;

File: heron/api/src/java/com/twitter/heron/api/hooks/info/SpoutFailInfo.java
Patch:
@@ -18,7 +18,7 @@ public class SpoutFailInfo {
   private Object messageId;
   private int spoutTaskId;
   private Long failLatencyMs; // null if it wasn't sampled
-    
+
   public SpoutFailInfo(Object messageId, int spoutTaskId, Long failLatencyMs) {
     this.messageId = messageId;
     this.spoutTaskId = spoutTaskId;

File: heron/api/src/java/com/twitter/heron/api/metric/ICombiner.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.api.metric;
 
 public interface ICombiner<T> {
-    public T identity();
-    public T combine(T a, T b);
+  public T identity();
+
+  public T combine(T a, T b);
 }

File: heron/api/src/java/com/twitter/heron/api/metric/IMetric.java
Patch:
@@ -15,5 +15,5 @@
 package com.twitter.heron.api.metric;
 
 public interface IMetric {
-    public Object getValueAndReset();
+  public Object getValueAndReset();
 }

File: heron/api/src/java/com/twitter/heron/api/metric/MeanReducerState.java
Patch:
@@ -15,6 +15,6 @@
 package com.twitter.heron.api.metric;
 
 public class MeanReducerState {
-    public int count = 0;
-    public double sum = 0.0;
+  public int count = 0;
+  public double sum = 0.0;
 }

File: heron/api/src/java/com/twitter/heron/api/serializer/IPluggableSerializer.java
Patch:
@@ -18,6 +18,8 @@
 
 public interface IPluggableSerializer {
   public void initialize(Map config);
+
   public byte[] serialize(Object _object);
+
   public Object deserialize(byte[] _input);
 }

File: heron/api/src/java/com/twitter/heron/api/serializer/KryoSerializer.java
Patch:
@@ -25,7 +25,8 @@ public class KryoSerializer implements IPluggableSerializer {
   private Output kryoOut;
   private Input kryoIn;
 
-  public KryoSerializer() { }
+  public KryoSerializer() {
+  }
 
   @Override
   public void initialize(Map config) {
@@ -51,7 +52,7 @@ public Object deserialize(byte[] input) {
     try {
       kryoIn.setBuffer(input);
       return kryo.readClassAndObject(kryoIn);
-    } catch(Exception e) {
+    } catch (Exception e) {
       throw new RuntimeException(e);
     }
   }

File: heron/api/src/java/com/twitter/heron/api/spout/IMultiSchemableSpout.java
Patch:
@@ -16,5 +16,6 @@
 
 public interface IMultiSchemableSpout {
   MultiScheme getScheme();
+
   void setScheme(MultiScheme scheme);
 }

File: heron/api/src/java/com/twitter/heron/api/spout/IRichSpout.java
Patch:
@@ -19,7 +19,6 @@
 /**
  * When writing topologies using Java, {@link IRichBolt} and {@link IRichSpout} are the main interfaces
  * to use to implement components of the topology.
- *
  */
 public interface IRichSpout extends ISpout, IComponent {
 

File: heron/api/src/java/com/twitter/heron/api/spout/ISchemableSpout.java
Patch:
@@ -16,6 +16,7 @@
 
 
 public interface ISchemableSpout {
-     Scheme getScheme();
-     void setScheme(Scheme scheme);
+  Scheme getScheme();
+
+  void setScheme(Scheme scheme);
 }

File: heron/api/src/java/com/twitter/heron/api/spout/MultiScheme.java
Patch:
@@ -14,12 +14,13 @@
 
 package com.twitter.heron.api.spout;
 
-import java.util.List;
 import java.io.Serializable;
+import java.util.List;
 
 import com.twitter.heron.api.tuple.Fields;
 
 public interface MultiScheme extends Serializable {
   public Iterable<List<Object>> deserialize(byte[] ser);
+
   public Fields getOutputFields();
 }

File: heron/api/src/java/com/twitter/heron/api/spout/RawMultiScheme.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.twitter.heron.api.tuple.Fields;
 
-
 import static com.twitter.heron.api.utils.Utils.tuple;
 import static java.util.Arrays.asList;
 

File: heron/api/src/java/com/twitter/heron/api/topology/TopologyContext.java
Patch:
@@ -92,12 +92,12 @@ public Object getExecutorData(String name) {
         return _executorData.get(name);
     }    
     */
-    
+
   /**
    * Add a Task Hook for this instance
    */
   public void addTaskHook(ITaskHook hook);
-    
+
   /**
    * Get the list of all task hooks
    */

File: heron/api/src/java/com/twitter/heron/api/tuple/Values.java
Patch:
@@ -23,10 +23,10 @@
 public class Values extends ArrayList<Object> {
   public Values() {
   }
-    
+
   public Values(Object... vals) {
     super(vals.length);
-    for(Object o: vals) {
+    for (Object o : vals) {
       add(o);
     }
   }

File: heron/api/src/java/com/twitter/heron/api/utils/Utils.java
Patch:
@@ -19,7 +19,6 @@
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.net.ServerSocket;
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.HashMap;

File: heron/common/src/java/com/twitter/heron/common/basics/NIOLooper.java
Patch:
@@ -189,7 +189,7 @@ public boolean isWriteRegistered(SelectableChannel channel) {
    * There are two cases when trying to register an interest
    * 1. The whole key does not exist; no interests ever registered for this channel
    * 2. The key exists due to other interests registered but not the one we are adding
-   * <p/>
+   * <p>
    * In 1st case, we just register this channel with operation on the given Selector
    * In 2nd case, we have to make sure the state of NIOLooper is clean:
    * 1. Key has to be valid

File: heron/common/src/java/com/twitter/heron/common/network/HeronServer.java
Patch:
@@ -40,6 +40,7 @@
  * d) onMessage method called when we have a new message
  */
 public abstract class HeronServer implements ISelectHandler {
+  private static final Logger LOG = Logger.getLogger(HeronServer.class.getName());
   // The socket that we will use for accepting connections
   private ServerSocketChannel acceptChannel;
   // Define the address where we need to listen on
@@ -49,9 +50,6 @@ public abstract class HeronServer implements ISelectHandler {
   private NIOLooper nioLooper;
   // All the clients that we have connected
   private Map<SocketChannel, SocketChannelHelper> activeConnections;
-
-  private static final Logger LOG = Logger.getLogger(HeronServer.class.getName());
-
   // Map from protobuf message's name to protobuf message's builder
   private Map<String, Message.Builder> requestMap;
   private Map<String, Message.Builder> messageMap;

File: heron/common/src/java/com/twitter/heron/common/network/IncomingPacket.java
Patch:
@@ -24,9 +24,9 @@
 
 /**
  * Defines IncomingPacket
- * <p/>
+ * <p>
  * TODO -- Sanjeev will add a detailed description of this application level protocol later
- * <p/>
+ * <p>
  * When allocating the ByteBuffer, we have two options:
  * 1. Normal java heap buffer by invoking ByteBuffer.allocate(...),
  * 2. Native heap buffer by invoking ByteBuffer.allocateDirect(...),
@@ -37,7 +37,7 @@
  * -- We could not control when to release the resources of direct buffer explicitly;
  * -- It is hard to guarantee direct buffer would not break limitation of native heap,
  * i.e. not throw OutOfMemoryError.
- * <p/>
+ * <p>
  * 2. Experiments are done by using direct buffer and the resources saving is negligible:
  * -- Direct buffer would save, in our scenarios, less than 1% of RAM;
  * -- Direct buffer could save 30%~50% cpu of Gateway thread.

File: heron/common/src/java/com/twitter/heron/common/network/OutgoingPacket.java
Patch:
@@ -23,9 +23,9 @@
 
 /**
  * Defines OutgoingPacket
- * <p/>
+ * <p>
  * TODO -- Sanjeev will add a detailed description of this application level protocol later
- * <p/>
+ * <p>
  * When allocating the ByteBuffer, we have two options:
  * 1. Normal java heap buffer by invoking ByteBuffer.allocate(...),
  * 2. Native heap buffer by invoking ByteBuffer.allocateDirect(...),
@@ -36,7 +36,7 @@
  * -- We could not control when to release the resources of direct buffer explicitly;
  * -- It is hard to guarantee direct buffer would not break limitation of native heap,
  * i.e. not throw OutOfMemoryError.
- * <p/>
+ * <p>
  * 2. Experiments are done by using direct buffer and the resources saving is negligible:
  * -- Direct buffer would save, in our scenarios, less than 1% of RAM;
  * -- Direct buffer could save 30%~50% cpu of Gateway thread.

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/BoltMetrics.java
Patch:
@@ -21,8 +21,8 @@
 import com.twitter.heron.api.metric.MeanReducer;
 import com.twitter.heron.api.metric.MultiCountMetric;
 import com.twitter.heron.api.metric.MultiReducedMetric;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.topology.TopologyContextImpl;
 

File: heron/common/src/java/com/twitter/heron/common/utils/metrics/SpoutMetrics.java
Patch:
@@ -22,8 +22,8 @@
 import com.twitter.heron.api.metric.MultiCountMetric;
 import com.twitter.heron.api.metric.MultiReducedMetric;
 import com.twitter.heron.api.metric.ReducedMetric;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.topology.TopologyContextImpl;
 

File: heron/common/src/java/com/twitter/heron/common/utils/tuple/TickTuple.java
Patch:
@@ -24,7 +24,7 @@
  * where each value can be any type. Tuples are dynamically typed -- the types of the fields
  * do not need to be declared. Tuples have helper methods like getInteger and getString
  * to get field values without having to cast the result.
- * <p/>
+ * <p>
  * Heron needs to know how to serialize all the values in a tuple. By default, Heron
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.

File: heron/common/src/java/com/twitter/heron/common/utils/tuple/TupleImpl.java
Patch:
@@ -27,7 +27,7 @@
  * where each value can be any type. Tuples are dynamically typed -- the types of the fields
  * do not need to be declared. Tuples have helper methods like getInteger and getString
  * to get field values without having to cast the result.
- * <p/>
+ * <p>
  * Heron needs to know how to serialize all the values in a tuple. By default, Heron
  * knows how to serialize the primitive types, strings, and byte arrays. If you want to
  * use another type, you'll need to implement and register a serializer for that type.

File: heron/common/tests/java/com/twitter/heron/common/basics/CommunicatorTest.java
Patch:
@@ -23,10 +23,10 @@
  * Communicator Tester.
  */
 public class CommunicatorTest {
+  final int QUEUE_BUFFER_SIZE = 128;
   Communicator<Integer> communicator;
   WakeableLooper producer;
   WakeableLooper consumer;
-  final int QUEUE_BUFFER_SIZE = 128;
 
   @Before
   public void before() throws Exception {

File: heron/common/tests/java/com/twitter/heron/common/basics/WakeableLooperTest.java
Patch:
@@ -26,9 +26,9 @@
  * WakeableLooper Tester.
  */
 public class WakeableLooperTest {
-  WakeableLooper slaveLooper;
   static int globalVale;
   final long SECONDS_TO_NANOSECONDS = 1000 * 1000 * 1000;
+  WakeableLooper slaveLooper;
 
   @Before
   public void before() throws Exception {

File: heron/common/tests/java/com/twitter/heron/common/config/SystemConfigTest.java
Patch:
@@ -15,10 +15,7 @@
 package com.twitter.heron.common.config;
 
 import java.nio.file.Paths;
-import java.util.Properties;
 import java.util.logging.Logger;
-import java.util.HashMap;
-import java.util.Map;
 
 import org.junit.Assert;
 import org.junit.Test;

File: heron/instance/src/java/com/twitter/heron/instance/Gateway.java
Patch:
@@ -18,15 +18,15 @@
 import java.util.List;
 import java.util.logging.Logger;
 
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.NIOLooper;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.network.HeronSocketOptions;
+import com.twitter.heron.common.utils.logging.ErrorReportLoggingHandler;
 import com.twitter.heron.common.utils.metrics.JVMMetrics;
 import com.twitter.heron.common.utils.metrics.MetricsCollector;
 import com.twitter.heron.common.utils.misc.ThreadNames;
-import com.twitter.heron.common.utils.logging.ErrorReportLoggingHandler;
 import com.twitter.heron.metrics.GatewayMetrics;
 import com.twitter.heron.network.MetricsManagerClient;
 import com.twitter.heron.network.StreamManagerClient;

File: heron/instance/src/java/com/twitter/heron/instance/OutgoingTupleCollection.java
Patch:
@@ -15,9 +15,9 @@
 package com.twitter.heron.instance;
 
 import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.proto.system.HeronTuples;
 
@@ -26,13 +26,13 @@
  * 1. initNewControlTuple or initNewDataTuple
  * 2. addDataTuple, addAckTuple and addFailTuple
  * 3. flushRemaining tuples and sent out the tuples
- * <p/>
+ * <p>
  * In fact, when talking about to send out tuples, we mean we push them to the out queues.
  */
 public class OutgoingTupleCollection {
+  protected final PhysicalPlanHelper helper;
   // We have just one outQueue responsible for both control tuples and data tuples
   private final Communicator<HeronTuples.HeronTupleSet> outQueue;
-  protected final PhysicalPlanHelper helper;
   private final SystemConfig systemConfig;
 
   private HeronTuples.HeronDataTupleSet.Builder currentDataTuple;

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
Patch:
@@ -28,11 +28,11 @@
 import com.twitter.heron.api.metric.GlobalMetrics;
 import com.twitter.heron.api.serializer.IPluggableSerializer;
 import com.twitter.heron.api.utils.Utils;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.BoltMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;

File: heron/instance/src/java/com/twitter/heron/instance/bolt/BoltOutputCollectorImpl.java
Patch:
@@ -41,13 +41,13 @@
  * 2. OutgoingTupleCollection outputter.
  * When a tuple is to be emitted, it will serialize it and call OutgoingTupleCollection.admitBoltTuple()
  * to sent it out.
- * <p/>
+ * <p>
  * It will handle the extra work to emit a tuple:
  * For data tuples:
  * 1. Set the anchors for a tuple
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple
  * 3. Update the metrics
- * <p/>
+ * <p>
  * For Control tuples (ack&fail):
  * 1. Set the anchors for a tuple
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java
Patch:
@@ -26,11 +26,11 @@
 import com.twitter.heron.api.spout.ISpout;
 import com.twitter.heron.api.spout.SpoutOutputCollector;
 import com.twitter.heron.api.utils.Utils;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.SpoutMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;
@@ -207,10 +207,10 @@ public void run() {
    * When the topology state is in RUNNING:
    * 1. If the out Queue is not full and ack is not enabled, we could just wake up next time
    * to produce more tuples and push to the out Queue
-   * <p/>
+   * <p>
    * 2. It the out Queue is not full but the ack is enabled, we also need to make sure the
    * tuples waiting smaller than msp
-   * <p/>
+   * <p>
    * 3. If there are more to read, we will wake up itself next time when it doWait()
    *
    * @return true Wake up itself directly in next looper.doWait()

File: heron/instance/src/java/com/twitter/heron/instance/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -43,12 +43,12 @@
  * 2. OutgoingTupleCollection outputter.
  * When a tuple is to be emitted, it will serialize it and call OutgoingTupleCollection.admitSpoutTuple()
  * to sent it out.
- * <p/>
+ * <p>
  * It will only emit data tuples; it will not send control tuples (ack&fail)
  * 1. Whether some tuples are expired; should be considered as failed automatically
  * 2. The pending tuples to be acked
  * 3. Maintain some statistics, for instance, total tuples emitted.
- * <p/>
+ * <p>
  */
 public class SpoutOutputCollectorImpl implements ISpoutOutputCollector {
   private static final Logger LOG = Logger.getLogger(SpoutOutputCollectorImpl.class.getName());

File: heron/instance/src/java/com/twitter/heron/metrics/GatewayMetrics.java
Patch:
@@ -17,8 +17,8 @@
 import com.twitter.heron.api.metric.CountMetric;
 import com.twitter.heron.api.metric.MeanReducer;
 import com.twitter.heron.api.metric.ReducedMetric;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.MetricsCollector;
 
 /**

File: heron/instance/src/java/com/twitter/heron/network/MetricsManagerClient.java
Patch:
@@ -21,10 +21,10 @@
 
 import com.google.protobuf.Message;
 
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.NIOLooper;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.network.HeronClient;
 import com.twitter.heron.common.network.HeronSocketOptions;
 import com.twitter.heron.common.network.StatusCode;

File: heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java
Patch:
@@ -18,10 +18,10 @@
 
 import com.google.protobuf.Message;
 
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.NIOLooper;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.network.HeronClient;
 import com.twitter.heron.common.network.HeronSocketOptions;
 import com.twitter.heron.common.network.StatusCode;

File: heron/instance/tests/java/com/twitter/heron/resource/TestBolt.java
Patch:
@@ -17,6 +17,8 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.junit.Ignore;
+
 import com.twitter.heron.api.bolt.BaseRichBolt;
 import com.twitter.heron.api.bolt.OutputCollector;
 import com.twitter.heron.api.topology.OutputFieldsDeclarer;
@@ -26,8 +28,6 @@
 import com.twitter.heron.api.tuple.Values;
 import com.twitter.heron.common.basics.SingletonRegistry;
 
-import org.junit.Ignore;
-
 /**
  * A Bolt used for unit test, it will execute and modify some singletons' value:
  * 1. It will tuple.getString(0) and append to the singleton "received-string-list"

File: heron/instance/tests/java/com/twitter/heron/resource/TestSpout.java
Patch:
@@ -39,11 +39,10 @@
 @Ignore
 public class TestSpout implements IRichSpout {
   static final int EMIT_COUNT = 10;
+  private final String[] toSend = new String[]{"A", "B"};
   SpoutOutputCollector outputCollector;
-
   private String MESSAGE_ID = "MESSAGE_ID";
   private int emitted = 0;
-  private final String[] toSend = new String[]{"A", "B"};
 
   @Override
   public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {

File: heron/instance/tests/java/com/twitter/heron/resource/UnitTestHelper.java
Patch:
@@ -23,8 +23,8 @@
 import com.twitter.heron.api.Config;
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.api.topology.TopologyBuilder;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.proto.stmgr.StreamManager;
 import com.twitter.heron.proto.system.Common;
 import com.twitter.heron.proto.system.PhysicalPlans;

File: heron/localmode/src/java/com/twitter/heron/localmode/executors/InstanceExecutor.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * InstanceExecutor helps to group all necessary resources for an instance into a class and,
  * provide methods to access these resources externally.
- * <p/>
+ * <p>
  * It helps uniform the ways to access instance resources
  */
 public class InstanceExecutor implements Runnable {

File: heron/localmode/src/java/com/twitter/heron/localmode/executors/MetricsExecutor.java
Patch:
@@ -18,18 +18,18 @@
 import java.util.List;
 import java.util.logging.Logger;
 
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.SlaveLooper;
 import com.twitter.heron.common.basics.WakeableLooper;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.JVMMetrics;
 import com.twitter.heron.common.utils.metrics.MetricsCollector;
 import com.twitter.heron.proto.system.Metrics;
 
 /**
  * MetricsExecutor would run in a separate thread via WakeableLooper,
  * and block until it is waken up by metrics pushed from other InstanceExecutor.
- * <p/>
+ * <p>
  * Then it would look up all InstanceExecutor added and invoke
  * handleExecutorsMetrics(InstanceExecutor instance) to handle the metrics
  */

File: heron/localmode/src/java/com/twitter/heron/localmode/grouping/Grouping.java
Patch:
@@ -26,8 +26,6 @@ public Grouping(List<Integer> taskIds) {
     this.taskIds = taskIds;
   }
 
-  public abstract List<Integer> getListToSend(HeronTuples.HeronDataTuple tuple);
-
   public static Grouping create(TopologyAPI.Grouping grouping,
                                 TopologyAPI.InputStream inputStream,
                                 TopologyAPI.StreamSchema schema,
@@ -67,4 +65,6 @@ public static Grouping create(TopologyAPI.Grouping grouping,
       }
     }
   }
+
+  public abstract List<Integer> getListToSend(HeronTuples.HeronDataTuple tuple);
 }

File: heron/localmode/src/java/com/twitter/heron/localmode/grouping/ShuffleGrouping.java
Patch:
@@ -21,9 +21,8 @@
 import com.twitter.heron.proto.system.HeronTuples;
 
 public class ShuffleGrouping extends Grouping {
-  private int nextTaskIndex;
-
   private final int taskIdsSize;
+  private int nextTaskIndex;
 
   public ShuffleGrouping(List<Integer> taskIds) {
     super(taskIds);

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/BoltInstance.java
Patch:
@@ -28,11 +28,11 @@
 import com.twitter.heron.api.metric.GlobalMetrics;
 import com.twitter.heron.api.serializer.IPluggableSerializer;
 import com.twitter.heron.api.utils.Utils;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.BoltMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/BoltOutputCollectorImpl.java
Patch:
@@ -40,13 +40,13 @@
  * 2. OutgoingTupleCollection outputter.
  * When a tuple is to be emitted, it will serialize it and call OutgoingTupleCollection.admitBoltTuple()
  * to sent it out.
- * <p/>
+ * <p>
  * It will handle the extra work to emit a tuple:
  * For data tuples:
  * 1. Set the anchors for a tuple
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple
  * 3. Update the metrics
- * <p/>
+ * <p>
  * For Control tuples (ack&fail):
  * 1. Set the anchors for a tuple
  * 2. Pack the tuple and submit the OutgoingTupleCollection's addDataTuple

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/OutgoingTupleCollection.java
Patch:
@@ -15,9 +15,9 @@
 package com.twitter.heron.localmode.instance;
 
 import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.SingletonRegistry;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.proto.system.HeronTuples;
 
@@ -26,13 +26,13 @@
  * 1. initNewControlTuple or initNewDataTuple
  * 2. addDataTuple, addAckTuple and addFailTuple
  * 3. flushRemaining tuples and sent out the tuples
- * <p/>
+ * <p>
  * In fact, when talking about to send out tuples, we mean we push them to the out queues.
  */
 public class OutgoingTupleCollection {
+  protected final PhysicalPlanHelper helper;
   // We have just one outQueue responsible for both control tuples and data tuples
   private final Communicator<HeronTuples.HeronTupleSet> outQueue;
-  protected final PhysicalPlanHelper helper;
   private final SystemConfig systemConfig;
 
   private HeronTuples.HeronDataTupleSet.Builder currentDataTuple;

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/SpoutInstance.java
Patch:
@@ -26,11 +26,11 @@
 import com.twitter.heron.api.spout.ISpout;
 import com.twitter.heron.api.spout.SpoutOutputCollector;
 import com.twitter.heron.api.utils.Utils;
-import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SingletonRegistry;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.config.SystemConfig;
 import com.twitter.heron.common.utils.metrics.SpoutMetrics;
 import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;
 import com.twitter.heron.common.utils.misc.SerializeDeSerializeHelper;
@@ -206,10 +206,10 @@ public void run() {
    * When the topology state is in RUNNING:
    * 1. If the out Queue is not full and ack is not enabled, we could just wake up next time
    * to produce more tuples and push to the out Queue
-   * <p/>
+   * <p>
    * 2. It the out Queue is not full but the ack is enabled, we also need to make sure the
    * tuples waiting smaller than msp
-   * <p/>
+   * <p>
    * 3. If there are more to read, we will wake up itself next time when it doWait()
    *
    * @return true Wake up itself directly in next looper.doWait()

File: heron/localmode/src/java/com/twitter/heron/localmode/instance/SpoutOutputCollectorImpl.java
Patch:
@@ -13,6 +13,7 @@
 // limitations under the License.
 
 package com.twitter.heron.localmode.instance;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -41,12 +42,12 @@
  * 2. OutgoingTupleCollection outputter.
  * When a tuple is to be emitted, it will serialize it and call OutgoingTupleCollection.admitSpoutTuple()
  * to sent it out.
- * <p/>
+ * <p>
  * It will only emit data tuples; it will not send control tuples (ack&fail)
  * 1. Whether some tuples are expired; should be considered as failed automatically
  * 2. The pending tuples to be acked
  * 3. Maintain some statistics, for instance, total tuples emitted.
- * <p/>
+ * <p>
  */
 public class SpoutOutputCollectorImpl implements ISpoutOutputCollector {
   private static final Logger LOG = Logger.getLogger(SpoutOutputCollectorImpl.class.getName());

File: heron/localmode/tests/java/com/twitter/heron/localmode/utils/XORManagerTest.java
Patch:
@@ -42,10 +42,10 @@
  * @since <pre>Jul 29, 2015</pre>
  */
 public class XORManagerTest {
+  private static final List<Integer> task_ids = new LinkedList<>();
   private static TopologyAPI.Topology topology;
   private static int timeoutSec = 1;
   private static int nBuckets = 3;
-  private static final List<Integer> task_ids = new LinkedList<>();
 
   @BeforeClass
   public static void beforeClass() throws Exception {

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/MetricsManagerServer.java
Patch:
@@ -32,12 +32,12 @@
 import com.twitter.heron.common.network.HeronServer;
 import com.twitter.heron.common.network.HeronSocketOptions;
 import com.twitter.heron.common.network.REQID;
-import com.twitter.heron.spi.metricsmgr.metrics.ExceptionInfo;
-import com.twitter.heron.spi.metricsmgr.metrics.MetricsInfo;
-import com.twitter.heron.spi.metricsmgr.metrics.MetricsRecord;
 import com.twitter.heron.proto.system.Common;
 import com.twitter.heron.proto.system.Metrics;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
+import com.twitter.heron.spi.metricsmgr.metrics.ExceptionInfo;
+import com.twitter.heron.spi.metricsmgr.metrics.MetricsInfo;
+import com.twitter.heron.spi.metricsmgr.metrics.MetricsRecord;
 
 public class MetricsManagerServer extends HeronServer {
   private static final Logger LOG = Logger.getLogger(MetricsManagerServer.class.getName());

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/executor/SinkExecutor.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.common.basics.Communicator;
 import com.twitter.heron.common.basics.Constants;
 import com.twitter.heron.common.basics.SlaveLooper;
+import com.twitter.heron.common.basics.TypeUtils;
 import com.twitter.heron.metricsmgr.MetricsSinksConfig;
 import com.twitter.heron.spi.metricsmgr.metrics.MetricsRecord;
 import com.twitter.heron.spi.metricsmgr.sink.IMetricsSink;
@@ -32,7 +32,7 @@
  * The IMetricsSink does not need to care about thread-safe since:
  * 1. It is always running in the same specific thread
  * 2. All arguments passed to IMetricsSink are immutable
- * <p/>
+ * <p>
  * The thread of SinkExecutor would be blocked to save resources except:
  * 1. New MetricsRecord comes and notify the SinkExecutor to wake up to process it
  * 2. The time interval to invoke flush() is met so SinkExecutor would wake up to invoke flush()

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/GraphiteSink.java
Patch:
@@ -31,12 +31,12 @@
 
 /**
  * A metrics sink that writes to a Graphite server
- * <p/>
+ * <p>
  * When exceptions are occurred to access Graphite Server, close(...) would be invoked.
  * And re-connecting would happen automatically in next write(...).
- * <p/>
+ * <p>
  * Only when too many re-connections occurred, we would throw a RuntimeException.
- * <p/>
+ * <p>
  * TODO -- This GraphiteSink is just a template.
  * TODO -- processRecord(MetricsRecord record) needs changes to apply the specific scenarios
  * TODO -- complete integration test is needed.

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/SinkContextImpl.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Context needed for an IMetricsSink to init.
- * <p/>
+ * <p>
  * We distinguish config and context carefully:
  * Config is populated from yaml file and would not be changed anymore,
  * while context is populated in run-time.

File: heron/metricsmgr/src/java/com/twitter/heron/metricsmgr/sink/tmaster/TMasterClient.java
Patch:
@@ -31,9 +31,8 @@
  */
 public class TMasterClient extends HeronClient implements Runnable {
   private static final Logger LOG = Logger.getLogger(TMasterClient.class.getName());
-  private long reconnectIntervalSec = -1;
-
   private final Communicator<TopologyMaster.PublishMetrics> publishMetricsCommunicator;
+  private long reconnectIntervalSec = -1;
 
   /**
    * Constructor

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/KillRequestHandler.java
Patch:
@@ -21,12 +21,11 @@
 import com.sun.net.httpserver.HttpHandler;
 
 import com.twitter.heron.proto.scheduler.Scheduler;
-
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.HttpUtils;
 import com.twitter.heron.spi.scheduler.IScheduler;
-import com.twitter.heron.spi.utils.Runtime;
 import com.twitter.heron.spi.utils.NetworkUtils;
+import com.twitter.heron.spi.utils.Runtime;
 
 public class KillRequestHandler implements HttpHandler {
   private static final Logger LOG = Logger.getLogger(KillRequestHandler.class.getName());

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/RestartRequestHandler.java
Patch:
@@ -20,7 +20,6 @@
 import com.sun.net.httpserver.HttpHandler;
 
 import com.twitter.heron.proto.scheduler.Scheduler;
-
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.HttpUtils;
 import com.twitter.heron.spi.scheduler.IScheduler;

File: heron/scheduler/src/java/com/twitter/heron/scheduler/aurora/AuroraConfigLoader.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.twitter.heron.spi.common.Constants;
 import com.twitter.heron.scheduler.util.AbstractPropertiesConfigLoader;
 import com.twitter.heron.scheduler.util.ConfigLoaderUtils;
 import com.twitter.heron.scheduler.util.PropertiesFileConfigLoader;
+import com.twitter.heron.spi.common.Constants;
 
 public class AuroraConfigLoader extends AbstractPropertiesConfigLoader {
   public static final String AURORA_SCHEDULER_CONF = "aurora_scheduler.conf";
@@ -75,7 +75,7 @@ private File getClusterConfFile(String configPath, String clusterName) {
    *     heron.aurora.bind.HERON_PACKAGE: heron-core-release.tar.gz
    */
   private boolean addAuroraBindProperties(Properties target, Properties bindProperties) {
-    for (String bindKey: bindProperties.stringPropertyNames()) {
+    for (String bindKey : bindProperties.stringPropertyNames()) {
       String key = bindProperties.getProperty(bindKey);
       if (target.containsKey(key)) {
         String key2 = Constants.HERON_AURORA_BIND_PREFIX + bindKey;

File: heron/scheduler/src/java/com/twitter/heron/scheduler/local/LocalUploader.java
Patch:
@@ -17,8 +17,8 @@
 import java.util.logging.Logger;
 
 import com.twitter.heron.common.basics.FileUtils;
-import com.twitter.heron.spi.uploader.IUploader;
 import com.twitter.heron.spi.scheduler.context.LaunchContext;
+import com.twitter.heron.spi.uploader.IUploader;
 
 public class LocalUploader implements IUploader {
   private static final Logger LOG = Logger.getLogger(LocalUploader.class.getName());

File: heron/scheduler/src/java/com/twitter/heron/scheduler/mesos/MesosTopologyRuntimeManager.java
Patch:
@@ -19,11 +19,10 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.twitter.heron.scheduler.util.NetworkUtility;
 import com.twitter.heron.spi.scheduler.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.scheduler.context.RuntimeManagerContext;
 
-import com.twitter.heron.scheduler.util.NetworkUtility;
-
 public class MesosTopologyRuntimeManager implements IRuntimeManager {
   private static final Logger LOG = Logger.getLogger(MesosTopologyRuntimeManager.class.getName());
 

File: heron/scheduler/src/java/com/twitter/heron/scheduler/mesos/framework/driver/MesosDriverFactory.java
Patch:
@@ -25,11 +25,9 @@
 
 public class MesosDriverFactory {
   private static final Logger LOG = Logger.getLogger(MesosDriverFactory.class.getName());
-
+  private final PersistenceStore persistenceStore;
   SchedulerDriver mesosDriver;
-
   Scheduler scheduler;
-  private final PersistenceStore persistenceStore;
   FrameworkConfiguration config;
 
   public MesosDriverFactory(Scheduler scheduler,

File: heron/scheduler/src/java/com/twitter/heron/scheduler/mesos/framework/driver/MesosTaskBuilder.java
Patch:
@@ -34,14 +34,12 @@
 import com.twitter.heron.scheduler.mesos.framework.jobs.BaseJob;
 
 public class MesosTaskBuilder {
-  private static final Logger LOG = Logger.getLogger(MesosTaskBuilder.class.getName());
-
   public static final String cpusResourceName = "cpus";
   public static final String memResourceName = "mem";
   public static final String diskResourceName = "disk";
   public static final String portResourceName = "ports";
   public static final String taskNameTemplate = "task:%s";
-
+  private static final Logger LOG = Logger.getLogger(MesosTaskBuilder.class.getName());
   //args|command.
   //  e.g. args: -av (async job), verbose mode
   final String executorArgsPattern = "%s|%s";

File: heron/scheduler/src/java/com/twitter/heron/scheduler/mesos/framework/state/ZkPersistenceStore.java
Patch:
@@ -32,14 +32,12 @@
 
 public class ZkPersistenceStore implements PersistenceStore {
   private static final Logger LOG = Logger.getLogger(ZkPersistenceStore.class.getName());
-  private CuratorFramework client;
-
   private final String connectionString;
-
   private final String path;
   private final String frameworkIdPath;
   private final String jobPath;
   private final String taskPath;
+  private CuratorFramework client;
 
   public ZkPersistenceStore(String connectionString, int connectionTimeoutMs, int sessionTimeoutMs, String rootPath) {
     // these are reasonable arguments for the ExponentialBackoffRetry. The first

File: heron/scheduler/src/java/com/twitter/heron/scheduler/service/HealthCheckRunner.java
Patch:
@@ -14,11 +14,11 @@
 
 package com.twitter.heron.scheduler.service;
 
-import com.twitter.heron.spi.scheduler.IScheduler;
-import com.twitter.heron.scheduler.util.NetworkUtility;
-
 import java.util.concurrent.TimeUnit;
 
+import com.twitter.heron.scheduler.util.NetworkUtility;
+import com.twitter.heron.spi.scheduler.IScheduler;
+
 /**
  * Performs health check on scheduler.
  */

File: heron/scheduler/src/java/com/twitter/heron/scheduler/util/Base64ConfigLoader.java
Patch:
@@ -15,6 +15,7 @@
 package com.twitter.heron.scheduler.util;
 
 import java.nio.charset.Charset;
+
 import javax.xml.bind.DatatypeConverter;
 
 // Converts the config String argument from Base64 Binary back into the original String in UTF-8.

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/aurora/AuroraLauncherTest.java
Patch:
@@ -22,11 +22,11 @@
 
 import com.twitter.heron.api.Config;
 import com.twitter.heron.api.generated.TopologyAPI;
-import com.twitter.heron.spi.common.Constants;
-import com.twitter.heron.spi.scheduler.context.LaunchContext;
 import com.twitter.heron.scheduler.util.DefaultConfigLoader;
 import com.twitter.heron.scheduler.util.RoundRobinPacking;
 import com.twitter.heron.scheduler.util.TopologyUtilityTest;
+import com.twitter.heron.spi.common.Constants;
+import com.twitter.heron.spi.scheduler.context.LaunchContext;
 
 public class AuroraLauncherTest {
   DefaultConfigLoader createRequiredConfig() throws Exception {

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/aurora/AuroraTopologyRuntimeManagerTest.java
Patch:
@@ -16,18 +16,16 @@
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Properties;
 
 import org.junit.Assert;
 import org.junit.Test;
 
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.proto.system.ExecutionEnvironment;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
-
+import com.twitter.heron.scheduler.util.TopologyUtilityTest;
 import com.twitter.heron.spi.common.Constants;
 import com.twitter.heron.spi.scheduler.context.RuntimeManagerContext;
-import com.twitter.heron.scheduler.util.TopologyUtilityTest;
 
 public class AuroraTopologyRuntimeManagerTest {
   private static final String cluster = "cluster";

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/local/LocalSchedulerTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.mockito.Mockito;
 
 import com.twitter.heron.api.generated.TopologyAPI;
+import com.twitter.heron.scheduler.util.DefaultConfigLoader;
 import com.twitter.heron.spi.common.Constants;
 import com.twitter.heron.spi.scheduler.context.LaunchContext;
-import com.twitter.heron.scheduler.util.DefaultConfigLoader;
 
 /**
  * LocalScheduler Tester.

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/service/server/SchedulerServerTest.java
Patch:
@@ -18,9 +18,9 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
+import com.twitter.heron.scheduler.util.NetworkUtility;
 import com.twitter.heron.spi.scheduler.IScheduler;
 import com.twitter.heron.spi.scheduler.context.LaunchContext;
-import com.twitter.heron.scheduler.util.NetworkUtility;
 
 public class SchedulerServerTest {
   @Test

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/util/DefaultConfigLoaderTest.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.OutputStreamWriter;
-import java.util.Properties;
 
 import org.junit.Assert;
 import org.junit.Test;
@@ -33,6 +32,7 @@ public void testParsingEmptyOverride() {
     configLoader.applyConfigOverride(override);
     Assert.assertEquals(0, configLoader.properties.entrySet().size());
   }
+
   @Test
   public void testParsingSimpleOverride() {
     String override = "key1= value1  key2 =value2    key3   =    \"value3\"";

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
Patch:
@@ -240,7 +240,7 @@ protected boolean untarPackage(String packageName, String targetFolder) {
     String cmd = String.format("tar -xvf %s", packageName);
 
     int ret = ShellUtils.runSyncProcess(LocalContext.verbose(config), LocalContext.verbose(config),
-       cmd, new StringBuilder(), new StringBuilder(), new File(targetFolder));
+        cmd, new StringBuilder(), new StringBuilder(), new File(targetFolder));
 
     return ret == 0 ? true : false;
   }

File: heron/spi/src/java/com/twitter/heron/spi/common/Constants.java
Patch:
@@ -33,9 +33,9 @@ public class Constants {
   public static final String ZK_CONNECTION_STRING = "zk.connection.string";
   public static final String ZK_CONNECTION_TIMEOUT_MS = "zk.connection.timeout.ms";
 
-  public static final String LOCALFS_STATE_MANAGER_CLASS = 
+  public static final String LOCALFS_STATE_MANAGER_CLASS =
       "com.twitter.heron.statemgr.localfs.LocalFileSystemStateManager";
 
-  public static final String ZK_STATE_MANAGER_CLASS = 
+  public static final String ZK_STATE_MANAGER_CLASS =
       "com.twitter.heron.statemgr.zookeeper.curator.CuratorStateManager";
 }

File: heron/spi/src/java/com/twitter/heron/spi/common/ShellUtils.java
Patch:
@@ -58,6 +58,7 @@ public static int runProcess(
       boolean verbose, String cmdline, StringBuilder stdout, StringBuilder stderr) {
     return runSyncProcess(verbose, false, splitTokens(cmdline), stdout, stderr, null);
   }
+
   public static int runSyncProcess(
       boolean verbose, boolean isInheritIO, String cmdline, StringBuilder stdout,
       StringBuilder stderr, File workingDirectory) {
@@ -103,7 +104,7 @@ public static Process runASyncProcess(
   public static Process runASyncProcess(
       boolean verbose, String[] command, File workingDirectory) {
     if (verbose) {
-      LOG.info("$> " +  Arrays.toString(command));
+      LOG.info("$> " + Arrays.toString(command));
     }
 
     // For AsyncProcess, we will never inherit IO, since parent process will not
@@ -154,7 +155,7 @@ public static Process setupTunnel(
       throw new RuntimeException("Trying to open tunnel to localhost.");
     }
     return ShellUtils.runASyncProcess(verbose,
-        new String[] {
+        new String[]{
             "ssh", String.format("-NL%d:%s:%d", tunnelPort, destHost, destPort), tunnelHost},
         new File(".")
     );

File: heron/spi/src/java/com/twitter/heron/spi/metricsmgr/sink/SinkContext.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  * Context needed for an IMetricsSink to init.
- * <p/>
+ * <p>
  * We distinguish config and context carefully:
  * Config is populated from yaml file and would not be changed anymore,
  * while context is populated in run-time.

File: heron/spi/src/java/com/twitter/heron/spi/packing/IPacking.java
Patch:
@@ -39,7 +39,7 @@ public interface IPacking extends AutoCloseable {
   /**
    * This is to for disposing or cleaning up any internal state accumulated by
    * the uploader
-   * <p/>
+   * <p>
    * Closes this stream and releases any system resources associated
    * with it. If the stream is already closed then invoking this
    * method has no effect.

File: heron/spi/src/java/com/twitter/heron/spi/scheduler/ILauncher.java
Patch:
@@ -32,7 +32,7 @@ public interface ILauncher extends AutoCloseable {
   /**
    * This is to for disposing or cleaning up any internal state accumulated by
    * the ILauncher
-   * <p/>
+   * <p>
    * Closes this stream and releases any system resources associated
    * with it. If the stream is already closed then invoking this
    * method has no effect.

File: heron/spi/src/java/com/twitter/heron/spi/statemgr/SchedulerStateManagerAdaptor.java
Patch:
@@ -66,7 +66,7 @@ protected <V> V awaitResult(ListenableFuture<V> future) {
   /**
    * Waits for ListenableFuture to terminate. Cancels on timeout
    */
-  protected  <V> V awaitResult(ListenableFuture<V> future, int time, TimeUnit unit) {
+  protected <V> V awaitResult(ListenableFuture<V> future, int time, TimeUnit unit) {
     try {
       return future.get(time, unit);
     } catch (InterruptedException | TimeoutException | ExecutionException e) {

File: heron/spi/src/java/com/twitter/heron/spi/utils/ReflectUtils.java
Patch:
@@ -17,6 +17,6 @@
 public class ReflectUtils {
   public static <T> T createInstance(String className) throws
       ClassNotFoundException, InstantiationException, IllegalAccessException {
-    return (T) Class.forName(className).newInstance(); 
+    return (T) Class.forName(className).newInstance();
   }
 }

File: heron/spi/src/java/com/twitter/heron/spi/utils/Runtime.java
Patch:
@@ -41,7 +41,7 @@ public static TopologyAPI.Topology topology(Config runtime) {
   }
 
   public static URI topologyPackageUri(Config cfg) {
-    return (URI)cfg.get(Keys.topologyPackageUri());
+    return (URI) cfg.get(Keys.topologyPackageUri());
   }
 
   public static SchedulerStateManagerAdaptor schedulerStateManagerAdaptor(Config runtime) {

File: heron/spi/src/java/com/twitter/heron/spi/utils/TMasterUtils.java
Patch:
@@ -27,12 +27,12 @@
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
 public class TMasterUtils {
+  private static final Logger LOG = Logger.getLogger(TMasterUtils.class.getName());
+
   private TMasterUtils() {
 
   }
 
-  private static final Logger LOG = Logger.getLogger(TMasterUtils.class.getName());
-
   /**
    * Communicate with TMaster with command
    *

File: heron/spi/tests/java/com/twitter/heron/spi/common/HttpUtilsTest.java
Patch:
@@ -19,8 +19,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
-import java.net.ServerSocket;
-import java.net.SocketException;
 import java.net.URL;
 
 import com.sun.net.httpserver.Headers;

File: heron/spi/tests/java/com/twitter/heron/spi/metricsmgr/metrics/ExceptionInfoTest.java
Patch:
@@ -22,8 +22,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.twitter.heron.spi.metricsmgr.metrics.ExceptionInfo;
-
 public class ExceptionInfoTest {
   private static final int N = 100;
   private static final String STACK_TRACE = "stackTrace";

File: heron/spi/tests/java/com/twitter/heron/spi/metricsmgr/metrics/MetricsInfoTest.java
Patch:
@@ -22,8 +22,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import com.twitter.heron.spi.metricsmgr.metrics.MetricsInfo;
-
 public class MetricsInfoTest {
   private static final int N = 100;
   private static final String NAME = "name";

File: heron/spi/tests/java/com/twitter/heron/spi/utils/NetworkUtilsTest.java
Patch:
@@ -15,13 +15,11 @@
 package com.twitter.heron.spi.utils;
 
 import java.io.IOException;
-import java.net.SocketException;
 import java.net.ServerSocket;
+import java.net.SocketException;
 
 import org.junit.Assert;
 import org.junit.Test;
-import org.mockito.Matchers;
-import org.mockito.Mockito;
 
 import com.twitter.heron.proto.system.Common;
 

File: heron/spi/tests/java/com/twitter/heron/spi/utils/TopologyUtilsTest.java
Patch:
@@ -25,7 +25,6 @@
 
 import com.twitter.heron.api.Config;
 import com.twitter.heron.api.generated.TopologyAPI;
-
 import com.twitter.heron.spi.common.Constants;
 import com.twitter.heron.spi.common.PackingPlan;
 

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/NullStateManager.java
Patch:
@@ -14,8 +14,6 @@
 
 package com.twitter.heron.statemgr;
 
-import java.util.Map;
-
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
 

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemContext.java
Patch:
@@ -23,7 +23,6 @@ public class LocalFileSystemContext extends Context {
    * Get the config specifying whether to initialize file directory hierarchy
    *
    * @param Config, the config map
-   *
    * @return true, if config does not exist, else the specified value
    */
   public static boolean initLocalFileTree(Config config) {

File: heron/storm/src/java/backtype/storm/StormSubmitter.java
Patch:
@@ -34,15 +34,14 @@ public class StormSubmitter {
    * Submits a topology to run on the cluster. A topology runs forever or until
    * explicitly killed.
    *
-   *
    * @param name the name of the storm.
    * @param stormConfig the topology-specific configuration. See {@link Config}.
    * @param topology the processing to execute.
    * @throws AlreadyAliveException if a topology with this name is already running
    * @throws InvalidTopologyException if an invalid topology was submitted
    */
   public static void submitTopology(String name, Map stormConfig, StormTopology topology)
-          throws AlreadyAliveException, InvalidTopologyException {
+      throws AlreadyAliveException, InvalidTopologyException {
 
     // First do config translation
     com.twitter.heron.api.Config heronConfig = ConfigUtils.translateConfig(stormConfig);

File: heron/storm/src/java/backtype/storm/generated/GlobalStreamId.java
Patch:
@@ -22,9 +22,8 @@ public GlobalStreamId() {
   }
 
   public GlobalStreamId(
-    String componentId,
-    String streamId)
-  {
+      String componentId,
+      String streamId) {
     this.componentId = componentId;
     this.streamId = streamId;
   }

File: heron/storm/src/java/backtype/storm/grouping/CustomStreamGroupingDelegate.java
Patch:
@@ -14,11 +14,9 @@
 
 package backtype.storm.grouping;
 
-import java.io.Serializable;
 import java.util.List;
 
 import backtype.storm.generated.GlobalStreamId;
-import backtype.storm.task.WorkerTopologyContext;
 import backtype.storm.task.TopologyContext;
 
 public class CustomStreamGroupingDelegate implements com.twitter.heron.api.grouping.CustomStreamGrouping {
@@ -36,7 +34,7 @@ public void prepare(com.twitter.heron.api.topology.TopologyContext context,
     GlobalStreamId g = new GlobalStreamId(component, streamId);
     delegate.prepare(c, g, targetTasks);
   }
-    
+
   @Override
   public List<Integer> chooseTasks(List<Object> values) {
     return delegate.chooseTasks(-1, values);

File: heron/storm/src/java/backtype/storm/hooks/info/BoltAckInfo.java
Patch:
@@ -20,7 +20,7 @@ public class BoltAckInfo {
   public Tuple tuple;
   public int ackingTaskId;
   public Long processLatencyMs; // null if it wasn't sampled
-  
+
   public BoltAckInfo(Tuple tuple, int ackingTaskId, Long processLatencyMs) {
     this.tuple = tuple;
     this.ackingTaskId = ackingTaskId;

File: heron/storm/src/java/backtype/storm/hooks/info/BoltExecuteInfo.java
Patch:
@@ -20,7 +20,7 @@ public class BoltExecuteInfo {
   public Tuple tuple;
   public int executingTaskId;
   public Long executeLatencyMs; // null if it wasn't sampled
-  
+
   public BoltExecuteInfo(Tuple tuple, int executingTaskId, Long executeLatencyMs) {
     this.tuple = tuple;
     this.executingTaskId = executingTaskId;

File: heron/storm/src/java/backtype/storm/hooks/info/EmitInfo.java
Patch:
@@ -22,7 +22,7 @@ public class EmitInfo {
   public String stream;
   public int taskId;
   public Collection<Integer> outTasks;
-    
+
   public EmitInfo(List<Object> values, String stream, int taskId, Collection<Integer> outTasks) {
     this.values = values;
     this.stream = stream;

File: heron/storm/src/java/backtype/storm/hooks/info/SpoutAckInfo.java
Patch:
@@ -18,7 +18,7 @@ public class SpoutAckInfo {
   public Object messageId;
   public int spoutTaskId;
   public Long completeLatencyMs; // null if it wasn't sampled
-    
+
   public SpoutAckInfo(Object messageId, int spoutTaskId, Long completeLatencyMs) {
     this.messageId = messageId;
     this.spoutTaskId = spoutTaskId;

File: heron/storm/src/java/backtype/storm/metric/api/CombinedMetric.java
Patch:
@@ -22,7 +22,7 @@ public CombinedMetric(ICombiner combiner) {
     _combiner = combiner;
     _value = _combiner.identity();
   }
-    
+
   public void update(Object value) {
     _value = _combiner.combine(_value, value);
   }

File: heron/storm/src/java/backtype/storm/metric/api/CountMetric.java
Patch:
@@ -20,7 +20,7 @@ public class CountMetric implements IMetric {
   public CountMetric() {
     delegate = new com.twitter.heron.api.metric.CountMetric();
   }
-    
+
   public void incr() {
     delegate.incr();
   }

File: heron/storm/src/java/backtype/storm/metric/api/ICombiner.java
Patch:
@@ -15,6 +15,7 @@
 package backtype.storm.metric.api;
 
 public interface ICombiner<T> {
-    public T identity();
-    public T combine(T a, T b);
+  public T identity();
+
+  public T combine(T a, T b);
 }

File: heron/storm/src/java/backtype/storm/metric/api/IMetric.java
Patch:
@@ -15,5 +15,5 @@
 package backtype.storm.metric.api;
 
 public interface IMetric {
-    public Object getValueAndReset();
+  public Object getValueAndReset();
 }

File: heron/storm/src/java/backtype/storm/metric/api/MetricDelegate.java
Patch:
@@ -20,7 +20,7 @@ public class MetricDelegate implements com.twitter.heron.api.metric.IMetric {
   public MetricDelegate(IMetric delegate) {
     this.delegate = delegate;
   }
-  
+
   @Override
   public Object getValueAndReset() {
     return delegate.getValueAndReset();

File: heron/storm/src/java/backtype/storm/serialization/HeronPluggableSerializerDelegate.java
Patch:
@@ -25,7 +25,8 @@ public class HeronPluggableSerializerDelegate implements com.twitter.heron.api.s
   private Output kryoOut;
   private Input kryoIn;
 
-  public HeronPluggableSerializerDelegate() { }
+  public HeronPluggableSerializerDelegate() {
+  }
 
   @Override
   public void initialize(Map config) {
@@ -50,7 +51,7 @@ public Object deserialize(byte[] input) {
     try {
       kryoIn.setBuffer(input);
       return kryo.readClassAndObject(kryoIn);
-    } catch(Exception e) {
+    } catch (Exception e) {
       throw new RuntimeException(e);
     }
   }

File: heron/storm/src/java/backtype/storm/serialization/IKryoDecorator.java
Patch:
@@ -13,8 +13,9 @@
 // limitations under the License.
 
 package backtype.storm.serialization;
+
 import com.esotericsoftware.kryo.Kryo;
 
 public interface IKryoDecorator {
-    void decorate(Kryo k);
+  void decorate(Kryo k);
 }

File: heron/storm/src/java/backtype/storm/spout/IMultiSchemableSpout.java
Patch:
@@ -16,5 +16,6 @@
 
 public interface IMultiSchemableSpout {
   MultiScheme getScheme();
+
   void setScheme(MultiScheme scheme);
 }

File: heron/storm/src/java/backtype/storm/spout/MultiScheme.java
Patch:
@@ -14,12 +14,13 @@
 
 package backtype.storm.spout;
 
-import java.util.List;
 import java.io.Serializable;
+import java.util.List;
 
 import backtype.storm.tuple.Fields;
 
 public interface MultiScheme extends Serializable {
   public Iterable<List<Object>> deserialize(byte[] ser);
+
   public Fields getOutputFields();
 }

File: heron/storm/src/java/backtype/storm/spout/RawMultiScheme.java
Patch:
@@ -15,10 +15,10 @@
 package backtype.storm.spout;
 
 import java.util.List;
-import static java.util.Arrays.asList;
 
 import backtype.storm.tuple.Fields;
 import static backtype.storm.utils.Utils.tuple;
+import static java.util.Arrays.asList;
 
 public class RawMultiScheme implements MultiScheme {
   @Override

File: heron/storm/src/java/backtype/storm/spout/Scheme.java
Patch:
@@ -20,6 +20,7 @@
 import backtype.storm.tuple.Fields;
 
 public interface Scheme extends Serializable {
-    public List<Object> deserialize(byte[] ser);
-    public Fields getOutputFields();
+  public List<Object> deserialize(byte[] ser);
+
+  public Fields getOutputFields();
 }

File: heron/storm/src/java/backtype/storm/spout/SpoutOutputCollectorImpl.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.List;
 
 import backtype.storm.utils.Utils;
+
 /**
  * This output collector exposes the API for emitting tuples from an {@link backtype.storm.topology.IRichSpout}.
  * The main difference between this output collector and {@link OutputCollector}

File: heron/storm/src/java/backtype/storm/task/IErrorReporter.java
Patch:
@@ -15,5 +15,5 @@
 package backtype.storm.task;
 
 public interface IErrorReporter {
-    void reportError(Throwable error);
+  void reportError(Throwable error);
 }

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/KillRequestHandler.java
Patch:
@@ -55,8 +55,8 @@ public void handle(HttpExchange exchange) throws IOException {
     boolean isKillSuccessfully = scheduler.onKill(killTopologyRequest);
 
     // prepare the response
-    Scheduler.KillTopologyResponse response =
-        Scheduler.KillTopologyResponse.newBuilder()
+    Scheduler.SchedulerResponse response =
+        Scheduler.SchedulerResponse.newBuilder()
             .setStatus(NetworkUtils.getHeronStatus(isKillSuccessfully))
             .build();
 

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/RestartRequestHandler.java
Patch:
@@ -49,8 +49,8 @@ public void handle(HttpExchange exchange) throws IOException {
     boolean isRestartSuccessfully = scheduler.onRestart(restartTopologyRequest);
 
     // prepare the response
-    Scheduler.RestartTopologyResponse response =
-        Scheduler.RestartTopologyResponse.newBuilder()
+    Scheduler.SchedulerResponse response =
+        Scheduler.SchedulerResponse.newBuilder()
             .setStatus(NetworkUtils.getHeronStatus(isRestartSuccessfully))
             .build();
 

File: heron/newscheduler/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java
Patch:
@@ -29,7 +29,6 @@
 
 import com.twitter.heron.spi.scheduler.IConfigLoader;
 
-import com.twitter.heron.spi.scheduler.ILauncher;
 import com.twitter.heron.spi.scheduler.NullLauncher;
 
 import com.twitter.heron.spi.scheduler.IScheduler;
@@ -85,7 +84,7 @@ public void testSchedulerMainWorkflow() throws Exception {
         any(SchedulerServer.class));
     SchedulerMain.runScheduler(config.getSchedulerClass(), configLoader, "", NetworkUtility.getFreePort(), "", TopologyAPI.Topology.getDefaultInstance());
     verify(scheduler, times(1)).initialize(any(LaunchContext.class));
-    verify(scheduler, atLeastOnce()).schedule(any(PackingPlan.class));
+    verify(scheduler, atLeastOnce()).onSchedule(any(PackingPlan.class));
   }
 }
 

File: heron/scheduler/src/java/com/twitter/heron/scheduler/aurora/AuroraTopologyRuntimeManager.java
Patch:
@@ -27,7 +27,6 @@
 import com.twitter.heron.proto.system.ExecutionEnvironment;
 import com.twitter.heron.proto.tmaster.TopologyMaster;
 import com.twitter.heron.spi.common.Constants;
-import com.twitter.heron.spi.scheduler.IRuntimeManager;
 import com.twitter.heron.spi.scheduler.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.scheduler.context.RuntimeManagerContext;
 import com.twitter.heron.scheduler.util.ShellUtility;

File: heron/scheduler/src/java/com/twitter/heron/scheduler/mesos/MesosTopologyRuntimeManager.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import com.twitter.heron.spi.scheduler.IRuntimeManager;
 import com.twitter.heron.spi.scheduler.SchedulerStateManagerAdaptor;
 import com.twitter.heron.spi.scheduler.context.RuntimeManagerContext;
 

File: 3rdparty/java/Empty.java
Patch:
@@ -0,0 +1,2 @@
+// bazel java_binary rule requires src files
+// Empty.java act as this src file to build the binary

File: heron/spi/src/java/com/twitter/heron/spi/common/ClusterDefaults.java
Patch:
@@ -145,6 +145,7 @@ public static Config getDefaultResources() {
   public static Config getDefaultMiscellaneous() {
     Config.Builder cb = Config.newBuilder();
 
+    cb.put(Keys.verbose(), Defaults.verbose());
     cb.put(Keys.schedulerService(), Defaults.schedulerService());
     return cb.build();
   }

File: heron/spi/src/java/com/twitter/heron/spi/common/Defaults.java
Patch:
@@ -28,8 +28,8 @@ public static String environ() {
     return ConfigDefaults.get("ENVIRON");
   }
 
-  public static String verbose() {
-    return ConfigDefaults.get("VERBOSE");
+  public static Boolean verbose() {
+    return ConfigDefaults.getBoolean("VERBOSE");
   }
 
   public static String configPath() {

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/localfs/LocalFileSystemStateManager.java
Patch:
@@ -88,7 +88,7 @@ protected ListenableFuture<Boolean> deleteData(String path) {
     return future;
   }
 
-  protected <M extends Message> ListenableFuture<M> getData(String path, M.Builder builder) {
+  protected <M extends Message> ListenableFuture<M> getData(String path, Message.Builder builder) {
     final SettableFuture<M> future = SettableFuture.create();
     byte[] data = FileUtils.readFromFile(path);
     if (data.length == 0) {
@@ -100,7 +100,7 @@ protected <M extends Message> ListenableFuture<M> getData(String path, M.Builder
       builder.mergeFrom(data);
       future.set((M) builder.build());
     } catch (InvalidProtocolBufferException e) {
-      future.setException(new RuntimeException("Could not parse " + M.Builder.class, e));
+      future.setException(new RuntimeException("Could not parse " + Message.Builder.class, e));
     }
 
     return future;

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -164,7 +164,7 @@ protected ListenableFuture<Boolean> deleteNode(String path) {
   }
 
   protected <M extends Message> ListenableFuture<M> getNodeData(
-      WatchCallback watcher, String path, final M.Builder builder) {
+      WatchCallback watcher, String path, final Message.Builder builder) {
     final SettableFuture<M> future = SettableFuture.create();
 
     Watcher wc = ZkWatcherCallback.makeZkWatcher(watcher);

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/ActivateRequestHandler.java
Patch:
@@ -53,7 +53,7 @@ public void handle(HttpExchange exchange) throws IOException {
     boolean isActivatedSuccessfully =
         scheduler.onActivate(activateTopologyRequest) &&
             TMasterUtils.sendToTMaster("activate",
-                com.twitter.heron.spi.utils.Runtime.topologyName(runtime),
+                Runtime.topologyName(runtime),
                 Runtime.schedulerStateManagerAdaptor(runtime));
 
     // prepare the response

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -242,7 +242,7 @@ public static void main(String[] args) throws
       System.exit(1);
     }
 
-    Boolean verbose = true;
+    Boolean verbose = false;
     Level logLevel = Level.INFO;
     if(cmd.hasOption("v")) {
       logLevel = Level.ALL;

File: heron/common/src/java/com/twitter/heron/common/utils/logging/LoggingHelper.java
Patch:
@@ -29,7 +29,9 @@ static public void loggerInit(Level level, boolean isRedirectStdOutErr) throws I
 
     if (isRedirectStdOutErr) {
 
-      // Remove ConsoleHandler if present, to avoid infinite loop
+      // Remove ConsoleHandler if present, to avoid StackOverflowError.
+      // ConsoleHandler writes to System.err and since we are redirecting
+      // System.err to Logger, it results in an infinte loop.
       for(Handler handler: rootLogger.getHandlers()) {
         if(handler instanceof ConsoleHandler) {
           rootLogger.removeHandler(handler);

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/FileSystemStateManager.java
Patch:
@@ -1,5 +1,6 @@
 package com.twitter.heron.statemgr;
 
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 import com.twitter.heron.spi.common.Config;
@@ -15,7 +16,7 @@ public abstract class FileSystemStateManager implements IStateManager {
   @Override
   public void initialize(Config config) {
     this.rootAddress = Context.stateManagerRootPath(config);
-    LOG.fine("File system state manager root address: " + rootAddress);
+    LOG.log(Level.FINE, "File system state manager root address: {0}", rootAddress);
   }
 
   protected String getTMasterLocationDir() {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -243,7 +243,7 @@ public static void main(String[] args)
 
       System.exit(1);
     } else {
-      LOG.log(Level.SEVERE, "Topology {0} {1} successfully", new Object[]{topologyName, command});
+      LOG.log(Level.INFO, "Topology {0} {1} successfully", new Object[]{topologyName, command});
 
       System.exit(0);
     }

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -232,10 +232,8 @@ public static void main(String[] args)
       // 3. Do post work basing on the result
       // Currently nothing to do here
 
-      // 4. Do generic cleaning
-      // close the runtime manager
+      // 4. Close the resources
       runtimeManager.close();
-      // close the state manager
       statemgr.close();
     }
 

File: heron/spi/src/java/com/twitter/heron/spi/statemgr/IStateManager.java
Patch:
@@ -36,9 +36,6 @@
  */
 
 public interface IStateManager {
-
-  public static final String NO_SCHEDULER_REST_ENDPOINT = "no_scheduler_endpoint";
-
   /**
    * Initialize the uploader with the incoming context.
    */

File: heron/spi/src/java/com/twitter/heron/spi/utils/Runtime.java
Patch:
@@ -9,7 +9,6 @@
 import com.twitter.heron.spi.statemgr.SchedulerStateManagerAdaptor;
 
 public class Runtime {
-
   public static String topologyId(Config runtime) {
     return runtime.getStringValue(Keys.topologyId());
   }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraLauncher.java
Patch:
@@ -117,7 +117,7 @@ public boolean launch(PackingPlan packing) {
 
     return AuroraUtils.createAuroraJob(topology.getName(), Context.cluster(config),
         Context.role(config),
-        Context.environ(config), getHeronAuroraPath(), auroraProperties);
+        Context.environ(config), getHeronAuroraPath(), auroraProperties, true);
   }
 
   private String getHeronAuroraPath() {

File: heron/spi/src/java/com/twitter/heron/spi/statemgr/IStateManager.java
Patch:
@@ -36,9 +36,6 @@
  */
 
 public interface IStateManager {
-
-  public static final String NO_SCHEDULER_REST_ENDPOINT = "no_scheduler_endpoint";
-
   /**
    * Initialize the uploader with the incoming context.
    */

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -69,7 +69,7 @@ private static Options constructOptions() {
         .build();
 
     Option heronHome = Option.builder("d")
-        .desc("Diretory where heron is installed")
+        .desc("Directory where heron is installed")
         .longOpt("heron_home")
         .hasArgs()
         .argName("heron home dir")

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -139,7 +139,7 @@ private static Options constructOptions() {
         .build();
 
     Option heronHome = Option.builder("d")
-        .desc("Diretory where heron is installed")
+        .desc("Directory where heron is installed")
         .longOpt("heron_home")
         .hasArgs()
         .argName("heron home dir")

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerRunner.java
Patch:
@@ -262,7 +262,7 @@ protected boolean deactivateTopologyHandler(String topologyName) {
   protected boolean restartTopologyHandler(String topologyName) {
 
     // get the container id
-    Integer containerId = Context.topologyContainerIdentifier(config);
+    Integer containerId = Context.topologyContainerId(config);
 
     // call prepare to restart
     if (!runtimeManager.prepareRestart(containerId)) {

File: heron/spi/src/java/com/twitter/heron/spi/common/Keys.java
Patch:
@@ -130,8 +130,8 @@ public static String topologyPackageType() {
     return ConfigKeys.get("TOPOLOGY_PACKAGE_TYPE");
   }
 
-  public static String topologyContainerIdentifier() {
-    return ConfigKeys.get("TOPOLOGY_CONTAINER_IDENTIFIER");
+  public static String topologyContainerId() {
+    return ConfigKeys.get("TOPOLOGY_CONTAINER_ID");
   }
 
   public static String stmgrRam() {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -73,6 +73,7 @@ protected static Config topologyConfigs(
   protected static Config defaultConfigs(String heronHome, String configPath) {
     Config config = Config.newBuilder()
         .putAll(ClusterDefaults.getDefaults())
+        .putAll(ClusterDefaults.getSandboxDefaults())
         .putAll(ClusterConfig.loadConfig(heronHome, configPath))
         .build();
     return config;

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -29,7 +29,7 @@ public class RuntimeManagerMain {
   // Print usage options
   private static void usage(Options options) {
     HelpFormatter formatter = new HelpFormatter();
-    formatter.printHelp( "SchedulerMain", options );
+    formatter.printHelp( "RuntimeManagerMain", options );
   }
 
   // Construct all required command line options

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -73,6 +73,7 @@ protected static Config topologyConfigs(
   protected static Config defaultConfigs(String heronHome, String configPath) {
     Config config = Config.newBuilder()
         .putAll(ClusterDefaults.getDefaults())
+        .putAll(ClusterDefaults.getSandboxDefaults())
         .putAll(ClusterConfig.loadConfig(heronHome, configPath))
         .build();
     return config;

File: heron/spi/src/java/com/twitter/heron/spi/common/ClusterDefaults.java
Patch:
@@ -145,6 +145,7 @@ public static Config getSandboxDefaults() {
     cb.putAll(getSandboxBinaries());
     cb.putAll(getSandboxJars());
     cb.putAll(getSandboxFilesAndPaths());
+    cb.putAll(getDefaultResources());
     return cb.build();
   }
 }

File: heron/spi/src/java/com/twitter/heron/spi/common/Context.java
Patch:
@@ -239,7 +239,7 @@ public static String stateManagerSandboxFile(Config cfg) {
     return cfg.getStringValue(Keys.stateManagerSandboxFile());
   }
 
-  public static String systemSandboxFile(Config cfg) {
+  public static String systemConfigSandboxFile(Config cfg) {
     return cfg.getStringValue(Keys.systemSandboxFile());
   }
 

File: heron/spi/src/java/com/twitter/heron/spi/common/Defaults.java
Patch:
@@ -195,7 +195,7 @@ public static String heronSandboxHome() {
   }
 
   public static String heronSandboxBin() {
-    return ConfigKeys.get("HERON_SANDBOX_BIN");
+    return ConfigDefaults.get("HERON_SANDBOX_BIN");
   }
 
   public static String heronSandboxConf() {

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/FileSystemStateManager.java
Patch:
@@ -15,7 +15,7 @@ public abstract class FileSystemStateManager implements IStateManager {
   @Override
   public void initialize(Config config) {
     this.rootAddress = Context.stateManagerRootPath(config);
-    LOG.info("File system state maanger root address: " + rootAddress);
+    LOG.info("File system state manager root address: " + rootAddress);
   }
 
   protected String getTMasterLocationDir() {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -313,7 +313,7 @@ public static void runScheduler(
       Runtime.schedulerShutdown(ytruntime).await();
     } catch (Exception e) {
       // Log and exit the process
-      LOG.log(Level.SEVERE, "Failed to run scheduler for topology: {0}. Existing", topology.getName());
+      LOG.log(Level.SEVERE, "Failed to run scheduler for topology: {0}. Exiting", topology.getName());
       System.exit(1);
     } finally {
       // Clean the resources

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -113,9 +113,9 @@ public static void main(String[] args) throws
     // load the topology definition into topology proto
     TopologyAPI.Topology topology = TopologyUtils.getTopology(topologyDefnFile);
 
-    // first load the defaults, then the config from files to override it 
+    // first load the defaults, then the config from files to override it
     // next add config parameters from the command line
-    // load the topology configs 
+    // load the topology configs
     // TODO (Karthik) override any parameters from the command line
 
     // build the final config by expanding all the variables
@@ -181,7 +181,7 @@ public static void main(String[] args) throws
 
     // Log the result and exit
     if (!isSuccessful) {
-      LOG.log(Level.SEVERE, "Failed to submit topology {0}. Existing", topologyName);
+      LOG.log(Level.SEVERE, "Failed to submit topology {0}. Exiting", topologyName);
 
       System.exit(1);
     } else {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -181,7 +181,7 @@ public static void main(String[] args) throws
 
     // Log the result and exit
     if (!isSuccessful) {
-      LOG.log(Level.SEVERE, "Failed to submit topology {0}. Existing", topologyName);
+      LOG.log(Level.SEVERE, "Failed to submit topology {0}. Exiting", topologyName);
 
       System.exit(1);
     } else {

File: heron/scheduler/src/java/com/twitter/heron/scheduler/service/SubmitterMain.java
Patch:
@@ -49,8 +49,8 @@ public static String getOriginalPackageFile() {
   }
 
   public static void main(String[] args) throws
-      ClassNotFoundException, InstantiationException, IllegalAccessException, IOException 
-  {
+      ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+
     String topologyPackage = args[0];
     String submitterConfigLoader = args[1];
     String submitterConfigFile = args[2];

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -100,7 +100,7 @@ public static void main(String[] args)
 
       // 4. Do post work basing on the result
       if (!isSuccessful) {
-        LOG.log(Level.SEVERE, "Failed to {0} topology {1}. Exiting", new Object[]{command, topologyName});
+        LOG.log(Level.SEVERE, "Failed to {0} topology {1}. Existing", new Object[]{command, topologyName});
 
         System.exit(1);
       } else {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -176,7 +176,7 @@ public static void main(String[] args) throws
           uploadRunner.undo();
         }
         launcher.undo();
-        LOG.log(Level.SEVERE, "Failed to submit topology {0}. Exiting", topologyName);
+        LOG.log(Level.SEVERE, "Failed to submit topology {0}. Existing", topologyName);
 
         System.exit(1);
       } else {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -100,7 +100,7 @@ public static void main(String[] args)
 
       // 4. Do post work basing on the result
       if (!isSuccessful) {
-        LOG.log(Level.SEVERE, "Failed to {0} topology {1}", new Object[]{command, topologyName});
+        LOG.log(Level.SEVERE, "Failed to {0} topology {1}. Exiting", new Object[]{command, topologyName});
 
         System.exit(1);
       } else {

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -152,7 +152,7 @@ public static void runScheduler(
     String statemgrClass = Context.stateManagerClass(config);
     IStateManager statemgr = (IStateManager) Class.forName(statemgrClass).newInstance();
 
-    // create an instance of the packing class 
+    // create an instance of the packing class
     String packingClass = Context.packingClass(config);
     IPacking packing = (IPacking) Class.forName(packingClass).newInstance();
 
@@ -205,7 +205,7 @@ public static void runScheduler(
       Runtime.schedulerShutdown(ytruntime).await();
     } catch (Exception e) {
       // Log and exit the process
-      LOG.log(Level.SEVERE, "Failed to run scheduler for topology: {0}. Existing", topology.getName());
+      LOG.log(Level.SEVERE, "Failed to run scheduler for topology: {0}. Exiting", topology.getName());
       System.exit(1);
     } finally {
       // Clean the resources

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SubmitterMain.java
Patch:
@@ -113,9 +113,9 @@ public static void main(String[] args) throws
     // load the topology definition into topology proto
     TopologyAPI.Topology topology = TopologyUtils.getTopology(topologyDefnFile);
 
-    // first load the defaults, then the config from files to override it 
+    // first load the defaults, then the config from files to override it
     // next add config parameters from the command line
-    // load the topology configs 
+    // load the topology configs
     // TODO (Karthik) override any parameters from the command line
 
     // build the final config by expanding all the variables
@@ -176,7 +176,7 @@ public static void main(String[] args) throws
           uploadRunner.undo();
         }
         launcher.undo();
-        LOG.log(Level.SEVERE, "Failed to submit topology {0}. Existing", topologyName);
+        LOG.log(Level.SEVERE, "Failed to submit topology {0}. Exiting", topologyName);
 
         System.exit(1);
       } else {

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -310,8 +310,8 @@ protected boolean sendToTMaster(String command) {
     LOG.info("Fetched TMaster location for topology: " + topologyName);
 
     // for the url request to be sent to TMaster
-    String endpoint = String.format("http://localhost:%d/%s?topologyid=%s",
-        location.getControllerPort(), command, location.getTopologyId());
+    String endpoint = String.format("http://%s:%d/%s?topologyid=%s",
+        location.getHost(), location.getControllerPort(), command, location.getTopologyId());
     LOG.info("HTTP URL for TMaster: " + endpoint);
 
     // create a URL connection

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalRuntimeManager.java
Patch:
@@ -30,12 +30,12 @@ public void close() {
   }
 
   @Override
-  public boolean prepareRestart() {
+  public boolean prepareRestart(Integer containerId) {
     return isTopologyRunning();
   }
 
   @Override
-  public boolean postRestart() {
+  public boolean postRestart(Integer containerId) {
     return true;
   }
 

File: heron/spi/src/java/com/twitter/heron/spi/scheduler/IRuntimeManager.java
Patch:
@@ -8,9 +8,9 @@ public interface IRuntimeManager {
 
   void close();
 
-  boolean prepareRestart();
+  boolean prepareRestart(Integer containerId);
 
-  boolean postRestart();
+  boolean postRestart(Integer containerId);
 
   boolean prepareDeactivate();
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalRuntimeManager.java
Patch:
@@ -30,12 +30,12 @@ public void close() {
   }
 
   @Override
-  public boolean prepareRestart() {
+  public boolean prepareRestart(Integer containerId) {
     return isTopologyRunning();
   }
 
   @Override
-  public boolean postRestart() {
+  public boolean postRestart(Integer containerId) {
     return true;
   }
 

File: heron/spi/src/java/com/twitter/heron/spi/scheduler/IRuntimeManager.java
Patch:
@@ -8,9 +8,9 @@ public interface IRuntimeManager {
 
   void close();
 
-  boolean prepareRestart();
+  boolean prepareRestart(Integer containerId);
 
-  boolean postRestart();
+  boolean postRestart(Integer containerId);
 
   boolean prepareDeactivate();
 

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
Patch:
@@ -149,7 +149,7 @@ public boolean launch(PackingPlan packing) {
     LOG.info("Scheduler command line: " + schedulerCmd.toString());
 
 
-    Process p = ShellUtils.runASyncProcess(true, false, schedulerCmd.toString(),
+    Process p = ShellUtils.runASyncProcess(true, schedulerCmd.toString(),
         new File(topologyWorkingDirectory));
 
     if (p == null) {

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -158,7 +158,8 @@ private String getExecutorCommand(int container) {
         port2,
         port3,
         LocalContext.systemConfigFile(config),
-        TopologyUtils.formatRamMap(TopologyUtils.getComponentRamMap(topology)),
+        TopologyUtils.formatRamMap(
+            TopologyUtils.getComponentRamMap(topology, LocalContext.instanceRam(config))),
         formatJavaOpts(TopologyUtils.getComponentJvmOptions(topology)),
         LocalContext.topologyPackageType(config),
         LocalContext.topologyJarFile(config),

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalScheduler.java
Patch:
@@ -158,7 +158,8 @@ private String getExecutorCommand(int container) {
         port2,
         port3,
         LocalContext.systemConfigFile(config),
-        TopologyUtils.formatRamMap(TopologyUtils.getComponentRamMap(topology)),
+        TopologyUtils.formatRamMap(
+            TopologyUtils.getComponentRamMap(topology, LocalContext.instanceRam(config))),
         formatJavaOpts(TopologyUtils.getComponentJvmOptions(topology)),
         LocalContext.topologyPackageType(config),
         LocalContext.topologyJarFile(config),

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -169,7 +169,7 @@ public static void runScheduler(
     scheduler.initialize(config, ytruntime);
 
     // start the scheduler REST endpoint for receiving requests
-    SchedulerServer server = runServer(runtime, scheduler, schedulerServerPort);
+    SchedulerServer server = runServer(ytruntime, scheduler, schedulerServerPort);
 
     // write the scheduler location to state manager.
     setSchedulerLocation(runtime, server);

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/server/KillRequestHandler.java
Patch:
@@ -52,6 +52,5 @@ public void handle(HttpExchange exchange) throws IOException {
     // tell the scheduler to shutdown
     LOG.info("Kill request handler issuing a terminate request to scheduler");
     Runtime.schedulerShutdown(runtime).terminate();
-    LOG.info("Kill request handler issued a terminate request to scheduler");
   }
 }

File: heron/spi/src/java/com/twitter/heron/spi/common/ConfigDefaults.java
Patch:
@@ -14,7 +14,7 @@ public class ConfigDefaults {
   private static final Logger LOG = Logger.getLogger(ConfigDefaults.class.getName());
 
   // holds the mapping between the config keys and their default values
-  private static Map defaults; 
+  protected static Map defaults; 
 
   // load the resource for default config key values
   static {

File: heron/spi/src/java/com/twitter/heron/spi/common/ConfigKeys.java
Patch:
@@ -14,7 +14,7 @@ public class ConfigKeys {
   private static final Logger LOG = Logger.getLogger(ConfigKeys.class.getName());
 
   // holds the mapping of keys to their corresponding key strings
-  private static Map keys;
+  protected static Map keys;
 
    // load the resource for config keys
   static {

File: heron/spi/src/java/com/twitter/heron/spi/common/Config.java
Patch:
@@ -124,7 +124,7 @@ public String asString() {
     StringBuilder sb = new StringBuilder();
     for (Map.Entry<String, Object> kv : cfgMap.entrySet()) {
       if (kv.getValue() instanceof String) {
-        sb.append(String.format(" %s=\"%s\" ", kv.getKey(), kv.getValue()));
+        sb.append(String.format(" %s=\"%s\" ", kv.getKey(), kv.getValue().toString()));
       }
     }
     return sb.toString();

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
Patch:
@@ -116,8 +116,8 @@ public boolean launch(PackingPlan packing) {
     TopologyAPI.Topology topology = Runtime.topology(runtime);
 
     // get all the config, need to be passed as command line to heron executor
-    String sandboxHome = Defaults.HERON_SANDBOX_HOME;
-    String sandboxConf = Defaults.HERON_SANDBOX_CONF;
+    String sandboxHome = Defaults.get("HERON_SANDBOX_HOME");
+    String sandboxConf = Defaults.get("HERON_SANDBOX_CONF");
     Config sandboxConfig = Config.expand(
         Config.newBuilder()
             .putAll(ClusterDefaults.getDefaults())

File: heron/spi/src/java/com/twitter/heron/spi/common/Defaults.java
Patch:
@@ -10,8 +10,6 @@
 import java.io.InputStream;
 import java.nio.file.Paths;
 
-import com.twitter.heron.common.config.ConfigReader;
-
 public class Defaults {
   private static final Logger LOG = Logger.getLogger(Defaults.class.getName());
 

File: heron/spi/src/java/com/twitter/heron/spi/common/Keys.java
Patch:
@@ -10,8 +10,6 @@
 import java.io.InputStream;
 import java.nio.file.Paths;
 
-import com.twitter.heron.common.config.ConfigReader;
-
 public class Keys {
   private static final Logger LOG = Logger.getLogger(Keys.class.getName());
 

File: heron/packing/tests/java/com/twitter/heron/packing/roundrobin/RoundRobinPackingTest.java
Patch:
@@ -53,13 +53,13 @@ public void testEvenPacking() throws Exception {
     Assert.assertEquals((spouts.size() + bolts.size()) * componentParallelism, numInstance);
 
     Config config = Config.newBuilder()
-        .put(Keys.TOPOLOGY_ID, topology.getId())
-        .put(Keys.TOPOLOGY_NAME, topology.getName())
+        .put(Keys.get("TOPOLOGY_ID"), topology.getId())
+        .put(Keys.get("TOPOLOGY_NAME"), topology.getName())
         .putAll(ClusterDefaults.getDefaults())
         .build();
 
     Config runtime = Config.newBuilder()
-        .put(Keys.TOPOLOGY_DEFINITION, topology)
+        .put(Keys.get("TOPOLOGY_DEFINITION"), topology)
         .build();
 
     // DefaultConfigLoader configLoader = DefaultConfigLoader.class.newInstance();

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/zookeeper/curator/CuratorStateManager.java
Patch:
@@ -8,6 +8,7 @@
 import com.google.common.util.concurrent.SettableFuture;
 
 import com.twitter.heron.spi.common.Config;
+import com.twitter.heron.spi.common.Context;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.CuratorFrameworkFactory;
 import org.apache.curator.framework.api.BackgroundCallback;
@@ -40,7 +41,7 @@ public void initialize(Config config) {
     int retryCount = 10;
     int retryIntervalMs = 1000;
 
-    connectionString = CuratorStateContext.zkConnectionString(config); 
+    connectionString = Context.stateManagerConnectionString(config); 
 
     // these are reasonable arguments for the ExponentialBackoffRetry. The first
     // retry will wait 1 second - the second will wait up to 2 seconds - the

File: heron/spi/src/java/com/twitter/heron/spi/common/Misc.java
Patch:
@@ -26,15 +26,15 @@ public class Misc {
 
   public static String substitute(String heronHome, String pathString) {
     Config config = Config.newBuilder()
-      .put(Keys.HERON_HOME, heronHome)
+      .put(Keys.get("HERON_HOME"), heronHome)
       .build();
     return substitute(config, pathString);
   }
 
   public static String substitute(String heronHome, String configPath, String pathString) {
     Config config = Config.newBuilder()
-      .put(Keys.HERON_HOME, heronHome)
-      .put(Keys.HERON_CONF, configPath)
+      .put(Keys.get("HERON_HOME"), heronHome)
+      .put(Keys.get("HERON_CONF"), configPath)
       .build();
     return substitute(config, pathString);
   }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalDefaults.java
Patch:
@@ -1,6 +1,5 @@
 package com.twitter.heron.scheduler.local;
 
 public class LocalDefaults {
-  public static final String CORE_PACKAGE_URI = "${HERON_DIST}/heron-core.tar.gz";
-  public static final String WORKING_DIRECTORY = "${HOME}/.heron/topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}";
+  public static final String WORKING_DIRECTORY = "${HOME}/.herondata/topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}";
 }

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalKeys.java
Patch:
@@ -1,7 +1,6 @@
 package com.twitter.heron.scheduler.local;
 
 public class LocalKeys {
-  public static final String CORE_PACKAGE_URI = "heron.core.package.uri";
   public static final String WORKING_DIRECTORY = "heron.scheduler.local.working.directory";
 
   public static final String COMPONENT_JVM_OPTS_IN_BASE64 = "heron.component.jvm.opts.in.base64";

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemDefaults.java
Patch:
@@ -1,5 +1,5 @@
 package com.twitter.heron.uploader.localfs;
 
 public class LocalFileSystemDefaults {
-  public static final String FILE_SYSTEM_DIRECTORY = "${HOME}/.heron/repository/${CLUSTER}/${ROLE}/${TOPOLOGY}";
+  public static final String FILE_SYSTEM_DIRECTORY = "${HOME}/.herondata/repository/${CLUSTER}/${ROLE}/${TOPOLOGY}";
 }

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerMain.java
Patch:
@@ -9,6 +9,9 @@
 import com.twitter.heron.spi.common.Keys;
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
+import com.twitter.heron.spi.common.ClusterConfig;
+import com.twitter.heron.spi.common.ClusterDefaults;
+
 import com.twitter.heron.spi.scheduler.IRuntimeManager;
 import com.twitter.heron.spi.statemgr.IStateManager;
 

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/RuntimeManagerRunner.java
Patch:
@@ -49,7 +49,7 @@ public Boolean call() {
     runtimeManager.initialize(config);
 
     // execute the appropriate command
-    boolean result;
+    boolean result = false;
     if (command.equals("activate"))
       result = activateTopologyHandler(Context.topologyName(config));
     else if (command.equals("deactivate"))
@@ -58,6 +58,8 @@ else if (command.equals("restart"))
       result = restartTopologyHandler(Context.topologyName(config));
     else if (command.equals("kill"))
       result = killTopologyHandler(Context.topologyName(config));
+    else 
+      LOG.info("Unknown command for topology: " + command);
 
     runtimeManager.close();
     return result;

File: heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
Patch:
@@ -13,6 +13,9 @@
 import com.twitter.heron.spi.common.Config;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.common.PackingPlan;
+import com.twitter.heron.spi.common.ClusterConfig;
+import com.twitter.heron.spi.common.ClusterDefaults;
+
 import com.twitter.heron.spi.packing.IPacking;
 import com.twitter.heron.spi.scheduler.IScheduler;
 import com.twitter.heron.spi.statemgr.IStateManager;

File: heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalDefaults.java
Patch:
@@ -2,5 +2,5 @@
 
 public class LocalDefaults {
   public static final String CORE_PACKAGE_URI = "${HERON_DIST}/heron-core.tar.gz";
-  public static final String WORKING_DIRECTORY = "${HOME}/.topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}";
+  public static final String WORKING_DIRECTORY = "${HOME}/.heron/topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}";
 }

File: heron/spi/src/java/com/twitter/heron/spi/common/ClusterConfig.java
Patch:
@@ -16,11 +16,11 @@ public final class ClusterConfig {
   protected static Config loadHeronHome(String heronHome, String configPath) {
     Config.Builder cb = Config.newBuilder()
         .put(Keys.HERON_HOME, heronHome) 
-        .put(Keys.HERON_BINS, Misc.substitute(heronHome, Defaults.HERON_BINS))
+        .put(Keys.HERON_BIN,  Misc.substitute(heronHome, Defaults.HERON_BIN))
         .put(Keys.HERON_CONF, configPath)
         .put(Keys.HERON_DIST, Misc.substitute(heronHome, Defaults.HERON_DIST))
         .put(Keys.HERON_ETC,  Misc.substitute(heronHome, Defaults.HERON_ETC))
-        .put(Keys.HERON_LIBS, Misc.substitute(heronHome, Defaults.HERON_LIBS));
+        .put(Keys.HERON_LIB,  Misc.substitute(heronHome, Defaults.HERON_LIB));
 
     return cb.build();
   }

File: heron/spi/tests/java/com/twitter/heron/spi/common/ClusterDefaultsTest.java
Patch:
@@ -59,8 +59,9 @@ public void testDefaultResources() throws Exception {
     );
 
     Assert.assertEquals(
-        Long.valueOf(Defaults.INSTANCE_CPU),
-        Context.instanceCpu(props)
+        Double.valueOf(Defaults.INSTANCE_CPU),
+        Context.instanceCpu(props),
+        0.001
     );
 
     Assert.assertEquals(

File: heron/spi/tests/java/com/twitter/heron/spi/common/TestConstants.java
Patch:
@@ -1,5 +1,5 @@
 package com.twitter.heron.spi.common;
 
 public class TestConstants {
-  public static final String TEST_DATA_PATH = "/heron/newscheduler/tests/java/com/twitter/heron/scheduler/testdata";
+  public static final String TEST_DATA_PATH = "/heron/spi/tests/java/com/twitter/heron/spi/common/testdata";
 }

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/FileSystemStateManager.java
Patch:
@@ -1,16 +1,16 @@
 package com.twitter.heron.statemgr;
 
 import com.twitter.heron.spi.common.Config;
+import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.statemgr.IStateManager;
 
 public abstract class FileSystemStateManager implements IStateManager {
-  public static final String ROOT_ADDRESS = "state.root.address";
 
   protected String rootAddress;
 
   @Override
   public void initialize(Config config) {
-    this.rootAddress = config.getStringValue(ROOT_ADDRESS);
+    this.rootAddress = Context.stateRootPath(config);
   }
 
   protected String getTMasterLocationDir() {

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemContext.java
Patch:
@@ -3,12 +3,10 @@
 import java.nio.file.Paths;
 
 import com.twitter.heron.spi.common.Config;
-import com.twitter.heron.spi.common.Misc;
 
 public class LocalFileSystemContext {
   public static String fileSystemDirectory(Config cfg) {
-    String directory = cfg.getStringValue(LocalFileSystemKeys.FILE_SYSTEM_DIRECTORY,
+    return cfg.getStringValue(LocalFileSystemKeys.FILE_SYSTEM_DIRECTORY,
         LocalFileSystemDefaults.FILE_SYSTEM_DIRECTORY);
-    return Misc.substitute(cfg, directory);
   }
 }

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemDefaults.java
Patch:
@@ -1,5 +1,5 @@
 package com.twitter.heron.uploader.localfs;
 
 public class LocalFileSystemDefaults {
-  public static final String FILE_SYSTEM_DIRECTORY = "${HOME}/.topologies/${CLUSTER}/${ROLE}/${TOPOLOGY}";
+  public static final String FILE_SYSTEM_DIRECTORY = "${HOME}/.heron/repository/${CLUSTER}/${ROLE}/${TOPOLOGY}";
 }

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemKeys.java
Patch:
@@ -1,5 +1,5 @@
 package com.twitter.heron.uploader.localfs;
 
 public class LocalFileSystemKeys {
-  public static final String FILE_SYSTEM_DIRECTORY = "heron.uploader.file.system.directory";
+  public static final String FILE_SYSTEM_DIRECTORY = "heron.uploader.localfs.file.system.directory";
 }

File: heron/uploaders/src/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploader.java
Patch:
@@ -30,11 +30,12 @@ public void initialize(Config config) {
     
     this.destTopologyDirectory = LocalFileSystemContext.fileSystemDirectory(config);
 
-    String fileName = "topology." + Context.topologyPackageType(config);
+    // name of the destination file is the same as the base name of the topology package file
+    String fileName = new File(Context.topologyPackageFile(config)).getName();
     this.destTopologyFile = Paths.get(destTopologyDirectory, fileName).toString();
 
     // get the original topology package location
-    this.topologyPackageLocation = Context.topologyPackageUri(config);
+    this.topologyPackageLocation = Context.topologyPackageFile(config);
   }
 
   protected String getTopologyDirectory() {

File: heron/uploaders/tests/java/com/twitter/heron/uploader/localfs/LocalFileSystemUploaderTest.java
Patch:
@@ -64,7 +64,7 @@ public void testUploader() throws Exception {
     String topologyPackage = Paths.get(testTopologyDirectory, "some-topology.tar").toString();
 
     Config newconfig = Config.newBuilder()
-        .putAll(config).put(Keys.TOPOLOGY_PACKAGE_URI, topologyPackage).build();
+        .putAll(config).put(Keys.TOPOLOGY_PACKAGE_FILE, topologyPackage).build();
 
     // create the uploader and load the package
     LocalFileSystemUploader uploader = new LocalFileSystemUploader(); 
@@ -83,7 +83,7 @@ public void testSourceNotExists() throws Exception {
     String topologyPackage = Paths.get(testTopologyDirectory, "doesnot-exist-topology.tar").toString();
 
     Config newconfig = Config.newBuilder()
-        .putAll(config).put(Keys.TOPOLOGY_PACKAGE_URI, topologyPackage).build();
+        .putAll(config).put(Keys.TOPOLOGY_PACKAGE_FILE, topologyPackage).build();
 
     // create the uploader and load the package
     LocalFileSystemUploader uploader = new LocalFileSystemUploader(); 
@@ -100,7 +100,7 @@ public void testUndo() throws Exception {
     String topologyPackage = Paths.get(testTopologyDirectory, "some-topology.tar").toString();
 
     Config newconfig = Config.newBuilder()
-        .putAll(config).put(Keys.TOPOLOGY_PACKAGE_URI, topologyPackage).build();
+        .putAll(config).put(Keys.TOPOLOGY_PACKAGE_FILE, topologyPackage).build();
 
     // create the uploader and load the package
     LocalFileSystemUploader uploader = new LocalFileSystemUploader(); 

File: heron/spi/src/java/com/twitter/heron/spi/statemgr/IStateManager.java
Patch:
@@ -1,7 +1,5 @@
 package com.twitter.heron.spi.statemgr;
 
-import java.util.Map;
-
 import com.google.common.util.concurrent.ListenableFuture;
 
 import com.twitter.heron.api.generated.TopologyAPI;

File: heron/statemgrs/src/java/com/twitter/heron/statemgr/FileSystemStateManager.java
Patch:
@@ -3,8 +3,6 @@
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.statemgr.IStateManager;
 
-import java.util.Map;
-
 public abstract class FileSystemStateManager implements IStateManager {
   public static final String ROOT_ADDRESS = "state.root.address";
 

File: heron/spi/src/java/com/twitter/heron/spi/common/Keys.java
Patch:
@@ -44,9 +44,10 @@ public class Config {
   }
 
   public class Runtime {
-    public static final String HERON_CORE_RELEASE_URI = "heron.core.release.uri";
+    public static final String CORE_RELEASE_URI = "heron.core.release.uri";
     public static final String TOPOLOGY_PKG_URI = "heron.topology.pkg.uri";
     public static final String TOPOLOGY_PHYSICAL_PLAN = "heron.topology.physical.plan";
+    public static final String TOPOLOGY_DEFINITION_FILE = "heron.topology.definition.file";
 
     public static final String HERON_RELEASE_PACKAGE = "heron.release.package";
     public static final String HERON_RELEASE_PACKAGE_ROLE = "heron.release.package.role";
@@ -55,7 +56,6 @@ public class Runtime {
     public static final String HERON_UPLOADER_VERSION = "heron.uploader.version";
  }
   
-  public static final String TOPOLOGY_DEFINITION_FILE = "topology.definition.file";
 
   public static final String HERON_DIR = "heron.dir";
   public static final String HERON_CONFIG_LOADER = "heron.config.loader";

File: heron/uploaders/src/java/com/twitter/heron/uploaders/localfs/LocalFileSystemUploader.java
Patch:
@@ -7,7 +7,7 @@
 import com.twitter.heron.spi.common.Keys;
 import com.twitter.heron.spi.common.Context;
 import com.twitter.heron.spi.common.ShellUtils;
-import com.twitter.heron.spi.newuploader.IUploader;
+import com.twitter.heron.spi.uploader.IUploader;
 
 public class LocalFileSystemUploader implements IUploader {
   protected String cluster;

File: heron/uploaders/src/java/com/twitter/heron/uploaders/nulled/NullUploader.java
Patch:
@@ -1,7 +1,7 @@
 package com.twitter.heron.uploaders.nulled;
 
 import com.twitter.heron.spi.common.Context;
-import com.twitter.heron.spi.newuploader.IUploader;
+import com.twitter.heron.spi.uploader.IUploader;
 
 public class NullUploader implements IUploader {
 
@@ -16,7 +16,7 @@ public boolean uploadPackage(String topologyPackage) {
 
   @Override
   public Context getContext() {
-    return new Context(new Context.Builder());
+    return Context.newBuilder().build();
   }
 
   @Override
@@ -28,4 +28,3 @@ public boolean undo() {
   public void cleanup() {
   }
 }
-

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/aurora/AuroraLauncherTest.java
Patch:
@@ -32,6 +32,8 @@ DefaultConfigLoader createRequiredConfig() throws Exception {
         Long.toString(1 * Constants.GB));
     schedulerConfig.properties.setProperty(RoundRobinPacking.STMGR_RAM_DEFAULT,
         Long.toString(1 * Constants.GB));
+    String stateMgrClass = "com.twitter.heron.spi.statemgr.NullStateManager";
+    schedulerConfig.properties.setProperty(Constants.STATE_MANAGER_CLASS, stateMgrClass);
     return schedulerConfig;
   }
 

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/aurora/AuroraTopologyRuntimeManagerTest.java
Patch:
@@ -22,6 +22,7 @@ public class AuroraTopologyRuntimeManagerTest {
   private static final String tmasterHost = "tmaster.host";
   private static final int tmasterControlPort = 123;
   private static final String topologyName = "topology";
+  private static final String stateMgrClass = "com.twitter.heron.spi.statemgr.NullStateManager";
 
   AuroraConfigLoader createRequiredConfig() throws Exception {
     AuroraConfigLoader schedulerConfig = AuroraConfigLoader.class.newInstance();
@@ -33,6 +34,7 @@ AuroraConfigLoader createRequiredConfig() throws Exception {
     schedulerConfig.properties.getProperty(Constants.HERON_RELEASE_PACKAGE_NAME, "some-pkg");
     schedulerConfig.properties.getProperty(Constants.HERON_RELEASE_PACKAGE_VERSION, "live");
     schedulerConfig.properties.setProperty(Constants.HERON_UPLOADER_VERSION, "1");
+    schedulerConfig.properties.setProperty(Constants.STATE_MANAGER_CLASS, stateMgrClass);
     return schedulerConfig;
   }
 

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/local/LocalUploaderTest.java
Patch:
@@ -16,6 +16,7 @@
 import com.twitter.heron.api.Config;
 import com.twitter.heron.api.generated.TopologyAPI;
 import com.twitter.heron.common.basics.FileUtility;
+import com.twitter.heron.spi.common.Constants;
 import com.twitter.heron.spi.scheduler.context.LaunchContext;
 import com.twitter.heron.scheduler.util.DefaultConfigLoader;
 import com.twitter.heron.scheduler.util.TopologyUtilityTest;
@@ -31,13 +32,15 @@
 public class LocalUploaderTest {
   public static final String working_directory = "working-dir";
   public static final String heron_core_release = "heron-core-release";
+  public static final String stateMgrClass = "com.twitter.heron.spi.statemgr.NullStateManager";
 
   public static DefaultConfigLoader getDefaultConfigLoader() throws Exception {
     DefaultConfigLoader configLoader = DefaultConfigLoader.class.newInstance();
     configLoader.addDefaultProperties();
     configLoader.properties.setProperty(LocalConfig.WORKING_DIRECTORY, working_directory);
     configLoader.properties.setProperty(
         LocalConfig.HERON_CORE_RELEASE_PACKAGE, heron_core_release);
+    configLoader.properties.setProperty(Constants.STATE_MANAGER_CLASS, stateMgrClass);
     return configLoader;
   }
 

File: heron/scheduler/tests/java/com/twitter/heron/scheduler/service/LaunchRunnerTest.java
Patch:
@@ -112,7 +112,7 @@ private IConfigLoader createConfig() {
   @Before
   public void setUp() throws Exception {
     uploader = mock(IUploader.class);
-    config = mock(IConfigLoader.class);
+    config = createConfig();
     packingAlgorithm = mock(IPackingAlgorithm.class);
     launcher = mock(ILauncher.class);
     stateManager = mock(SchedulerStateManagerAdaptor.class);

File: contrib/kafka/src/java/com/twitter/heron/spouts/kafka/PartitionCoordinator.java
Patch:
@@ -35,7 +35,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.twitter.heron.spouts.kafka.SpoutConfig.ZkHosts;
-import com.twitter.heron.storage.StormMetadataStore;
+import com.twitter.heron.storage.MetadataStore;
 
 public class PartitionCoordinator {
   public static final Logger LOG = LoggerFactory.getLogger(PartitionCoordinator.class);
@@ -48,7 +48,7 @@ public class PartitionCoordinator {
   private final String topic;
   private final int refreshFreqMSecs;
 
-  private StormMetadataStore storage;
+  private MetadataStore storage;
   private KafkaMetric.OffsetMetric kafkaOffsets;
   private CuratorFramework curator;
 
@@ -67,7 +67,7 @@ public PartitionCoordinator(
       int taskIndex,
       int totalTasks,
       String topologyInstanceId,
-      StormMetadataStore storage,
+      MetadataStore storage,
       KafkaMetric.OffsetMetric kafkaOffsetMetric) {
     this.spoutConfig = spoutConfig;
     this.taskIndex = taskIndex;

File: contrib/kafka/src/java/com/twitter/heron/spouts/kafka/PartitionManager.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.twitter.heron.storage.StormMetadataStore;
+import com.twitter.heron.storage.MetadataStore;
 
 import backtype.storm.Config;
 import backtype.storm.metric.api.CombinedMetric;
@@ -87,7 +87,7 @@ public KafkaMessageId(GlobalPartitionId partition, long offset) {
   private final SpoutConfig spoutConfig;
   private final String topologyInstanceId;
   private final Map stormConf;
-  private final StormMetadataStore storage;
+  private final MetadataStore storage;
   private final KafkaMetric.OffsetMetric kafkaOffsetMetric;
 
   private SimpleConsumer consumer;
@@ -103,7 +103,7 @@ public PartitionManager(
       Map stormConf,
       SpoutConfig spoutConfig,
       GlobalPartitionId id,
-      StormMetadataStore storage,
+      MetadataStore storage,
       KafkaMetric.OffsetMetric kafkaOffsetMetric) {
     this.partition = id;
     this.spoutConfig = spoutConfig;

File: contrib/kafka/src/java/com/twitter/heron/spouts/kafka/SpoutConfig.java
Patch:
@@ -117,7 +117,6 @@ public SpoutConfig(KafkaConfig.BrokerHosts hosts, String topic, String zkRoot, S
       this.zkRoot = zkRoot;
     }
     this.id = id;
-    zkServers.add("newstormzookeeper.local.twitter.com");  // default location to store offset in zk
   }
 
   /**

File: contrib/kafka/src/java/com/twitter/heron/storage/StormStoreSerializer.java
Patch:
@@ -23,12 +23,12 @@
 /**
  * Default serializer used by storm storage layer. Encode an object as json.
  */
-public interface StormStoreSerializer<T> {
+public interface StoreSerializer<T> {
   /** Called to convert any object to byte array */
   byte[] serialize(T obj);
 
   /** Default Json serializer */
-  public static class DefaultSerializer<T> implements StormStoreSerializer<T> {
+  public static class DefaultSerializer<T> implements StoreSerializer<T> {
     private static final String ENCODING = "UTF-8";
     private Gson gson = new Gson();
 

File: contrib/kafka/src/java/com/twitter/heron/spouts/kafka/PartitionCoordinator.java
Patch:
@@ -35,7 +35,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.twitter.heron.spouts.kafka.SpoutConfig.ZkHosts;
-import com.twitter.heron.storage.StormMetadataStore;
+import com.twitter.heron.storage.MetadataStore;
 
 public class PartitionCoordinator {
   public static final Logger LOG = LoggerFactory.getLogger(PartitionCoordinator.class);
@@ -48,7 +48,7 @@ public class PartitionCoordinator {
   private final String topic;
   private final int refreshFreqMSecs;
 
-  private StormMetadataStore storage;
+  private MetadataStore storage;
   private KafkaMetric.OffsetMetric kafkaOffsets;
   private CuratorFramework curator;
 
@@ -67,7 +67,7 @@ public PartitionCoordinator(
       int taskIndex,
       int totalTasks,
       String topologyInstanceId,
-      StormMetadataStore storage,
+      MetadataStore storage,
       KafkaMetric.OffsetMetric kafkaOffsetMetric) {
     this.spoutConfig = spoutConfig;
     this.taskIndex = taskIndex;

File: contrib/kafka/src/java/com/twitter/heron/spouts/kafka/PartitionManager.java
Patch:
@@ -33,7 +33,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.twitter.heron.storage.StormMetadataStore;
+import com.twitter.heron.storage.MetadataStore;
 
 import backtype.storm.Config;
 import backtype.storm.metric.api.CombinedMetric;
@@ -87,7 +87,7 @@ public KafkaMessageId(GlobalPartitionId partition, long offset) {
   private final SpoutConfig spoutConfig;
   private final String topologyInstanceId;
   private final Map stormConf;
-  private final StormMetadataStore storage;
+  private final MetadataStore storage;
   private final KafkaMetric.OffsetMetric kafkaOffsetMetric;
 
   private SimpleConsumer consumer;
@@ -103,7 +103,7 @@ public PartitionManager(
       Map stormConf,
       SpoutConfig spoutConfig,
       GlobalPartitionId id,
-      StormMetadataStore storage,
+      MetadataStore storage,
       KafkaMetric.OffsetMetric kafkaOffsetMetric) {
     this.partition = id;
     this.spoutConfig = spoutConfig;

File: contrib/kafka/src/java/com/twitter/heron/spouts/kafka/SpoutConfig.java
Patch:
@@ -117,7 +117,6 @@ public SpoutConfig(KafkaConfig.BrokerHosts hosts, String topic, String zkRoot, S
       this.zkRoot = zkRoot;
     }
     this.id = id;
-    zkServers.add("newstormzookeeper.local.twitter.com");  // default location to store offset in zk
   }
 
   /**

File: contrib/kafka/src/java/com/twitter/heron/storage/StormStoreSerializer.java
Patch:
@@ -23,12 +23,12 @@
 /**
  * Default serializer used by storm storage layer. Encode an object as json.
  */
-public interface StormStoreSerializer<T> {
+public interface StoreSerializer<T> {
   /** Called to convert any object to byte array */
   byte[] serialize(T obj);
 
   /** Default Json serializer */
-  public static class DefaultSerializer<T> implements StormStoreSerializer<T> {
+  public static class DefaultSerializer<T> implements StoreSerializer<T> {
     private static final String ENCODING = "UTF-8";
     private Gson gson = new Gson();
 

