File: 05-Binary-Search-Tree/Course Code (Java)/04-Binary-Search-Tree-Search/src/bobo/algo/BST.java
Patch:
@@ -119,7 +119,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/05-Binary-Search-Tree-Traverse/src/bobo/algo/BST.java
Patch:
@@ -163,7 +163,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/06-Binary-Search-Tree-Level-Traverse/src/bobo/algo/BST.java
Patch:
@@ -185,7 +185,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/07-Binary-Search-Tree-Remove-Min-and-Max/src/bobo/algo/BST.java
Patch:
@@ -259,7 +259,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/08-Binary-Search-Tree-Remove/src/bobo/algo/BST.java
Patch:
@@ -321,7 +321,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/10-The-Disadvantages-of-Binary-Search-Tree-and-More-Trees/src/bobo/algo/BST.java
Patch:
@@ -321,7 +321,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/Chapter-05-Completed-Code/src/bobo/algo/BST.java
Patch:
@@ -321,7 +321,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/Optional-05-Floor-and-Ceil-in-BST/src/bobo/algo/BST.java
Patch:
@@ -396,7 +396,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/Optional-06-Predecessor-and-Successor-in-BST/src/bobo/algo/BST.java
Patch:
@@ -455,7 +455,7 @@ Node successorFromAncestor(Node node, Key key){
             assert(key.compareTo(node.key) < 0);
             // 如果当前节点大于key, 则当前节点有可能是比key大的最小值
             // 向左继续搜索, 将结果存储到tempNode中
-            Node tempNode = predecessorFromAncestor(node.left, key);
+            Node tempNode = successorFromAncestor(node.left, key);
             if(tempNode != null)
                 return tempNode;
             else
@@ -480,7 +480,7 @@ public static void main(String[] args) {
             int pos = (int) (Math.random() * (i+1));
             Integer t = arr[pos];
             arr[pos] = arr[i];
-            arr[i] = arr[pos];
+            arr[i] = t;
         }
         // 由于我们实现的二分搜索树不是平衡二叉树，
         // 所以如果按照顺序插入一组数据，我们的二分搜索树会退化成为一个链表

File: 05-Binary-Search-Tree/Course Code (Java)/04-Binary-Search-Tree-Search/src/bobo/algo/BST.java
Patch:
@@ -140,7 +140,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 05-Binary-Search-Tree/Course Code (Java)/05-Binary-Search-Tree-Traverse/src/bobo/algo/BST.java
Patch:
@@ -184,7 +184,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 05-Binary-Search-Tree/Course Code (Java)/06-Binary-Search-Tree-Level-Traverse/src/bobo/algo/BST.java
Patch:
@@ -206,7 +206,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 05-Binary-Search-Tree/Course Code (Java)/07-Binary-Search-Tree-Remove-Min-and-Max/src/bobo/algo/BST.java
Patch:
@@ -280,7 +280,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 05-Binary-Search-Tree/Course Code (Java)/08-Binary-Search-Tree-Remove/src/bobo/algo/BST.java
Patch:
@@ -342,7 +342,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 05-Binary-Search-Tree/Course Code (Java)/10-The-Disadvantages-of-Binary-Search-Tree-and-More-Trees/src/bobo/algo/BST.java
Patch:
@@ -342,7 +342,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 05-Binary-Search-Tree/Course Code (Java)/Chapter-05-Completed-Code/src/bobo/algo/BST.java
Patch:
@@ -342,7 +342,7 @@ public static void main(String[] args) {
         for(int i = 0 ; i < 2*N ; i ++){
             String res = bst.search(new Integer(i));
             if( i < N )
-                assert res == Integer.toString(i);
+                assert res.equals(Integer.toString(i));
             else
                 assert res == null;
         }

File: 02-Sorting-Basic/Course Code (Java)/Optional-01-Bubble-Sort/src/bobo/algo/SortTestHelper.java
Patch:
@@ -81,7 +81,8 @@ public static void testSort(String sortClassName, Comparable[] arr){
             sortMethod.invoke(null,params);
             long endTime = System.currentTimeMillis();
 
-            assert isSorted( arr );
+            if(!isSorted( arr ))
+                throw new IllegalArgumentException("Sort failed");
 
             System.out.println( sortClass.getSimpleName()+ " : " + (endTime-startTime) + "ms" );
         }

File: 02-Sorting-Basic/Course Code (Java)/02-Selection-Sort-Using-Comparable/src/bobo/algo/Student.java
Patch:
@@ -22,9 +22,9 @@ public int compareTo(Student that) {
             return this.name.compareTo(that.name);
 
         if( this.score < that.score )
-            return 1;
-        else if( this.score > that.score )
             return -1;
+        else if( this.score > that.score )
+            return 1;
         else // this.score == that.score
             return 0;
     }

File: 03-Sorting-Advance/Course Code (Java)/04-Merge-Sort-Bottom-Up/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/05-Quick-Sort/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/06-Quick-Sort-Deal-With-Nearly-Ordered-Array/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/07-Quick-Sort-Deal-With-Identical-Keys/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/08-Quick-Sort-Three-Ways/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/Chapter-03-Completed-Code/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/Optional-01-Merge-Sort-Create-aux-Array-Out-of-Merge/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/Optional-02-MergeSort-and-MergeSortBU-Performance-Comparison/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 03-Sorting-Advance/Course Code (Java)/Optional-03-ShellSort-MergeSort-and-QuickSort-Comparison/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 04-Heap/Course Code (Java)/05-Heapify/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 04-Heap/Course Code (Java)/06-Heap-Sort/src/bobo/algo/InsertionSort.java
Patch:
@@ -28,7 +28,7 @@ public static void sort(Comparable[] arr, int l, int r){
         for( int i = l + 1 ; i <= r ; i ++ ){
             Comparable e = arr[i];
             int j = i;
-            for( ; j > 0 && arr[j-1].compareTo(e) > 0 ; j--)
+            for( ; j > l && arr[j-1].compareTo(e) > 0 ; j--)
                 arr[j] = arr[j-1];
             arr[j] = e;
         }

File: 09-Shortest-Path/Course Code (Java)/03-Implementation-of-Dijkstra/src/bobo/algo/Dijkstra.java
Patch:
@@ -34,6 +34,7 @@ public Dijkstra(WeightedGraph graph, int s){
 
         // 对于其实点s进行初始化
         distTo[s] = 0.0;
+        from[s] = new Edge<Weight>(s, s, (Weight)(Number)(0.0));
         ipq.insert(s, (Weight)distTo[s] );
         marked[s] = true;
         while( !ipq.isEmpty() ){

File: 08-Minimum-Span-Trees/Course Code (Java)/01-Weighted-Graph/src/bobo/algo/DenseWeightedGraph.java
Patch:
@@ -39,7 +39,7 @@ public void addEdge(Edge e){
 
         g[e.v()][e.w()] = new Edge(e);
         if( e.v() != e.w() && !directed )
-            g[e.w()][e.v()] = new Edge(e);
+            g[e.w()][e.v()] = new Edge(e.w(), e.v(), e.wt());
 
         m ++;
     }

File: 08-Minimum-Span-Trees/Course Code (Java)/01-Weighted-Graph/src/bobo/algo/SparseWeightedGraph.java
Patch:
@@ -37,7 +37,7 @@ public void addEdge(Edge e){
 
         g[e.v()].add(new Edge(e));
         if( e.v() != e.w() && !directed )
-            g[e.w()].add(new Edge(e));
+            g[e.w()].add(new Edge(e.w(), e.v(), e.wt()));
 
         m ++;
     }

File: 08-Minimum-Span-Trees/Course Code (Java)/03-Lazy-Prim/src/bobo/algo/DenseWeightedGraph.java
Patch:
@@ -39,7 +39,7 @@ public void addEdge(Edge e){
 
         g[e.v()][e.w()] = new Edge(e);
         if( e.v() != e.w() && !directed )
-            g[e.w()][e.v()] = new Edge(e);
+            g[e.w()][e.v()] = new Edge(e.w(), e.v(), e.wt());
 
         m ++;
     }

File: 08-Minimum-Span-Trees/Course Code (Java)/03-Lazy-Prim/src/bobo/algo/SparseWeightedGraph.java
Patch:
@@ -37,7 +37,7 @@ public void addEdge(Edge e){
 
         g[e.v()].add(new Edge(e));
         if( e.v() != e.w() && !directed )
-            g[e.w()].add(new Edge(e));
+            g[e.w()].add(new Edge(e.w(), e.v(), e.wt()));
 
         m ++;
     }

File: 08-Minimum-Span-Trees/Course Code (Java)/05-Implementation-of-Optimized-Prim-Algorithm/src/bobo/algo/DenseWeightedGraph.java
Patch:
@@ -39,7 +39,7 @@ public void addEdge(Edge e){
 
         g[e.v()][e.w()] = new Edge(e);
         if( e.v() != e.w() && !directed )
-            g[e.w()][e.v()] = new Edge(e);
+            g[e.w()][e.v()] = new Edge(e.w(), e.v(), e.wt());
 
         m ++;
     }

File: 08-Minimum-Span-Trees/Course Code (Java)/05-Implementation-of-Optimized-Prim-Algorithm/src/bobo/algo/SparseWeightedGraph.java
Patch:
@@ -37,7 +37,7 @@ public void addEdge(Edge e){
 
         g[e.v()].add(new Edge(e));
         if( e.v() != e.w() && !directed )
-            g[e.w()].add(new Edge(e));
+            g[e.w()].add(new Edge(e.w(), e.v(), e.wt()));
 
         m ++;
     }

File: 04-Heap/Course Code (Java)/Chapter-04-Completed-Code/src/bobo/algo/IndexMaxHeap.java
Patch:
@@ -48,6 +48,7 @@ public void insert(int i, Item item){
         i += 1;
         data[i] = item;
         indexes[count+1] = i;
+        reverse[i] = count + 1;
         count ++;
 
         shiftUp(count);
@@ -113,9 +114,8 @@ public void change( int i , Item newItem ){
 
         // 有了 reverse 之后,
         // 我们可以非常简单的通过reverse直接定位索引i在indexes中的位置
-        int j = reverse[i];
-        shiftUp( j );
-        shiftDown( j );
+        shiftUp( reverse[i] );
+        shiftDown( reverse[i] );
     }
 
     // 交换索引堆中的索引i和j

File: 04-Heap/Course Code (Java)/09-Index-Heap-Advance/src/bobo/algo/IndexMaxHeap.java
Patch:
@@ -48,6 +48,7 @@ public void insert(int i, Item item){
         i += 1;
         data[i] = item;
         indexes[count+1] = i;
+        reverse[i] = count + 1;
         count ++;
 
         shiftUp(count);
@@ -122,9 +123,8 @@ public void change( int i , Item newItem ){
 
         // 有了 reverse 之后,
         // 我们可以非常简单的通过reverse直接定位索引i在indexes中的位置
-        int j = reverse[i];
-        shiftUp( j );
-        shiftDown( j );
+        shiftUp( reverse[i] );
+        shiftDown( reverse[i] );
     }
 
     // 交换索引堆中的索引i和j

File: 04-Heap/Course Code (Java)/Optional-3-Index-Min-Heap/src/bobo/algo/IndexMinHeap.java
Patch:
@@ -48,6 +48,7 @@ public void insert(int i, Item item){
         i += 1;
         data[i] = item;
         indexes[count+1] = i;
+        reverse[i] = count + 1;
         count ++;
 
         shiftUp(count);
@@ -113,9 +114,8 @@ public void change( int i , Item newItem ){
 
         // 有了 reverse 之后,
         // 我们可以非常简单的通过reverse直接定位索引i在indexes中的位置
-        int j = reverse[i];
-        shiftUp( j );
-        shiftDown( j );
+        shiftUp( reverse[i] );
+        shiftDown( reverse[i] );
     }
 
     // 交换索引堆中的索引i和j

File: 03-Sorting-Advance/Course Code (Java)/08-Quick-Sort-Three-Ways/src/bobo/algo/Main.java
Patch:
@@ -22,7 +22,7 @@ public static void main(String[] args) {
 
         SortTestHelper.testSort("bobo.algo.MergeSort", arr1);
         SortTestHelper.testSort("bobo.algo.QuickSort2Ways", arr2);
-        SortTestHelper.testSort("bobo.algo.QuickSort3Ways", arr2);
+        SortTestHelper.testSort("bobo.algo.QuickSort3Ways", arr3);
 
         System.out.println();
 
@@ -39,7 +39,7 @@ public static void main(String[] args) {
 
         SortTestHelper.testSort("bobo.algo.MergeSort", arr1);
         SortTestHelper.testSort("bobo.algo.QuickSort2Ways", arr2);
-        SortTestHelper.testSort("bobo.algo.QuickSort3Ways", arr2);
+        SortTestHelper.testSort("bobo.algo.QuickSort3Ways", arr3);
 
         System.out.println();
 
@@ -53,7 +53,7 @@ public static void main(String[] args) {
 
         SortTestHelper.testSort("bobo.algo.MergeSort", arr1);
         SortTestHelper.testSort("bobo.algo.QuickSort2Ways", arr2);
-        SortTestHelper.testSort("bobo.algo.QuickSort3Ways", arr2);
+        SortTestHelper.testSort("bobo.algo.QuickSort3Ways", arr3);
 
 
         return;

