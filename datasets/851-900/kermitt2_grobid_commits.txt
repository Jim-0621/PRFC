File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -107,7 +107,7 @@ public static Flavor fromLabel(String text) {
         public String toString() {
             return getLabel();
         }
-    }
+
         public static List<String> getLabels() {
             return Arrays.stream(Flavor.values())
                 .map(Flavor::getLabel)

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -590,7 +590,7 @@ public static File getPdfaltoPath() {
 
     public static ModelParameters getGrobidModelParameters(final String modelName) {
         ModelParameters param = modelMap.get(modelName);
-        // if we have a flvor of the model, we can fall back to the configuration
+        // if we have a flavor of the model, we can fall back to the configuration
         // of the parent model
         String fallBackModelName = modelName;
         while(param == null) {
@@ -633,8 +633,9 @@ public static File getModelPath(final GrobidModel model) {
             //   from the flavor model name 
             // - a normal model not specified in the config, so returning null
 
-            if (getGrobidModelParameters(model.getModelName()) == null)
+            if (getGrobidModelParameters(model.getModelName()) == null) {
                 return null;
+            }
         }
         String extension = getGrobidEngine(model).getExt();
         return new File(getGrobidHome(), FOLDER_NAME_MODELS + File.separator

File: grobid-trainer/src/main/java/org/grobid/trainer/sax/TEIFulltextArticleLightRefSaxParser.java
Patch:
@@ -224,10 +224,10 @@ private void writeData(String qName, boolean pop) {
 
 			// adjust tag (conservative)
 			if (tableBlock) {
-				currentTag = "<table>";
+				currentTag = "<paragraph>";
 			}
 			else if (figureBlock) {
-				currentTag = "<figure>";
+				currentTag = "<paragraph>";
 			}
 
             String text = getText();

File: grobid-trainer/src/main/java/org/grobid/trainer/sax/TEIFulltextArticleLightSaxParser.java
Patch:
@@ -224,10 +224,10 @@ private void writeData(String qName, boolean pop) {
 
 			// adjust tag (conservative)
 			if (tableBlock) {
-				currentTag = "<table>";
+				currentTag = "<paragraph>";
 			}
 			else if (figureBlock) {
-				currentTag = "<figure>";
+				currentTag = "<paragraph>";
 			}
 
             String text = getText();

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -852,6 +852,7 @@ else if (nbAuthorType > (bibDataSets.size() / 2))
 					}
 				}
 
+                boolean isFirstBlockToken = true;
 	            while (n < lastPos) {
 					if (blockIndex == dp2.getBlockPtr()) {
 						//if (n > block.getEndToken()) {
@@ -969,7 +970,7 @@ else if (lineStartX - previousLineStartX > characterWidth)
 	                	features.alignmentStatus = "ALIGNEDLEFT";
 	                }
 
-	                if (n == 0) {
+	                if (isFirstBlockToken) {
 	                    features.lineStatus = "LINESTART";
 	                    // be sure that previous token is closing a line, except if it's a starting line
 	                    if (previousFeatures != null) {
@@ -1146,6 +1147,7 @@ else if (features.blockStatus == null) {
 	                mm += text.length();
 	                nn += text.length();
 	                previousFeatures = features;
+                    isFirstBlockToken = false;
             	}
                 // lowest position of the block
                 lowestPos = block.getY() + block.getHeight();

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -874,6 +874,7 @@ public static List<GraphicObject> getConnectedGraphics(Block block, Document doc
     public void postProcessTables() {
         for (Table table : tables) {
             if (!table.firstCheck()) {
+                table.setGoodTable(false);
                 continue;
             }
 
@@ -919,7 +920,7 @@ public void postProcessTables() {
             table.getContentTokens().clear();
             table.getContentTokens().addAll(contentResult);
 
-            table.secondCheck();
+            table.setGoodTable(table.secondCheck());
         }
     }
 

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -373,7 +373,7 @@ private void processReferencesDirectory(File[] files, final GrobidMainArgs pGbdA
     public void createTraining(final GrobidMainArgs pGbdArgs) {
         inferPdfInputPath(pGbdArgs);
         inferOutputPath(pGbdArgs);
-        int result = getEngine().batchCreateTraining(pGbdArgs.getPath2Input(), pGbdArgs.getPath2Output(), -1);
+        int result = getEngine().batchCreateTraining(pGbdArgs.getPath2Input(), pGbdArgs.getPath2Output(), -1, pGbdArgs.getModelFlavor());
         LOGGER.info(result + " files processed.");
     }
 

File: grobid-core/src/main/java/org/grobid/core/visualization/FigureTableVisualizer.java
Patch:
@@ -6,6 +6,7 @@
 import net.sf.saxon.trans.XPathException;
 import org.apache.commons.io.FileUtils;
 import org.apache.pdfbox.pdmodel.PDDocument;
+import org.grobid.core.GrobidModels;
 import org.grobid.core.data.Figure;
 import org.grobid.core.data.Table;
 import org.grobid.core.document.Document;
@@ -64,7 +65,7 @@ private static Set<Integer> getVectorGraphicPages(File pdfaltoDirectory) throws
         return blacklistedPages;
     }
 
-    private static void processPdfFile(File input, File outputFolder) throws Exception {
+    private static void processPdfFile(File input, File outputFolder, GrobidModels.Flavor flavor) throws Exception {
         inputPdf = input;
         annotated = false;
         annotatedFigure = false;
@@ -99,7 +100,7 @@ private static void processPdfFile(File input, File outputFolder) throws Excepti
 
         blacklistedPages = getVectorGraphicPages(pdfaltoDirectory);
 
-        Document teiDoc = engine.fullTextToTEIDoc(documentSource, null, config);
+        Document teiDoc = engine.fullTextToTEIDoc(documentSource, flavor, config);
 
         PDDocument out = annotateFigureAndTables(
                 document, copiedFile, teiDoc,

File: grobid-core/src/main/java/org/grobid/core/document/OPSService.java
Patch:
@@ -118,8 +118,11 @@ public String descriptionRetrieval(String patentNumber) throws IOException,
 			spf.setFeature("http://xml.org/sax/features/validation", false);
 			spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
 			spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
+			spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
 			//get a new instance of parser
 			XMLReader reader = spf.newSAXParser().getXMLReader();
+			reader.setFeature("http://xml.org/sax/features/external-general-entities", false);
+			reader.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
 			reader.setEntityResolver(new EntityResolver() {
 				public InputSource resolveEntity(String publicId, String systemId) {
 					return new InputSource(

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -371,7 +371,7 @@ static String revertResultsForBadItems(List<? extends Figure> badFiguresOrTables
             for (Figure badItem : badFiguresOrTables) {
                 // Find the index of the first layoutToken of the table in the tokenization
                 List<LayoutToken> layoutTokenItem = badItem.getLayoutTokens();
-                List<Integer> candidateIndexes = findCandiateIndex(layoutTokenItem, labelledResultsAsList, itemLabel);
+                List<Integer> candidateIndexes = findCandidateIndex(layoutTokenItem, labelledResultsAsList, itemLabel);
                 if (candidateIndexes.isEmpty()) {
                     LOGGER.info("Cannot find the candidate index for fixing the tables.");
                     continue;
@@ -441,7 +441,7 @@ static int consolidateResultCandidateThroughSequence(List<Integer> candidateInde
     }
 
     @NotNull
-    static List<Integer> findCandiateIndex(List<LayoutToken> layoutTokenItem, List<List<String>> labelledResultsAsList, String itemLabel) {
+    static List<Integer> findCandidateIndex(List<LayoutToken> layoutTokenItem, List<List<String>> labelledResultsAsList, String itemLabel) {
         LayoutToken firstLayoutTokenItem = layoutTokenItem.get(0);
 
         List<Integer> candidateIndexes = IntStream.range(0, labelledResultsAsList.size())

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -89,7 +89,7 @@ public boolean apply(GraphicObject graphicObject) {
     private List<LayoutToken> layoutTokens;
 
     // Contains the raw layoutTokens from the fulltext model
-    private List<LayoutToken> rawLayoutTokens = new ArrayList<>();
+    protected List<LayoutToken> rawLayoutTokens = new ArrayList<>();
 
     // coordinates
     private int page = -1;

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -327,11 +327,11 @@ public String getTeiId() {
     }
 
     public boolean isCompleteForTEI() {
-        return (StringUtils.isAllBlank(header) || StringUtils.isNotEmpty(caption) || CollectionUtils.isNotEmpty(graphicObjects));
+        return (StringUtils.isNotBlank(header) || StringUtils.isNotBlank(caption) || CollectionUtils.isNotEmpty(graphicObjects));
     }
 
     public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter formatter, List<MarkerType> markerTypes) {
-        if (isCompleteForTEI()) {
+        if (!isCompleteForTEI()) {
             return null;
         }
         Element figureElement = XmlBuilderUtils.teiElement("figure");

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -874,6 +874,7 @@ public static List<GraphicObject> getConnectedGraphics(Block block, Document doc
     public void postProcessTables() {
         for (Table table : tables) {
             if (!table.firstCheck()) {
+                table.setGoodTable(false);
                 continue;
             }
 
@@ -919,7 +920,7 @@ public void postProcessTables() {
             table.getContentTokens().clear();
             table.getContentTokens().addAll(contentResult);
 
-            table.secondCheck();
+            table.setGoodTable(table.secondCheck());
         }
     }
 

File: grobid-core/src/main/java/org/grobid/core/document/OPSService.java
Patch:
@@ -118,8 +118,11 @@ public String descriptionRetrieval(String patentNumber) throws IOException,
 			spf.setFeature("http://xml.org/sax/features/validation", false);
 			spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
 			spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
+			spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
 			//get a new instance of parser
 			XMLReader reader = spf.newSAXParser().getXMLReader();
+			reader.setFeature("http://xml.org/sax/features/external-general-entities", false);
+			reader.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
 			reader.setEntityResolver(new EntityResolver() {
 				public InputSource resolveEntity(String publicId, String systemId) {
 					return new InputSource(

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -725,6 +725,7 @@ else if (nbAuthorType > (bibDataSets.size() / 2))
 					}
 				}
 
+                boolean isFirstBlockToken = true;
 	            while (n < lastPos) {
 					if (blockIndex == dp2.getBlockPtr()) {
 						//if (n > block.getEndToken()) {
@@ -842,7 +843,7 @@ else if (lineStartX - previousLineStartX > characterWidth)
 	                	features.alignmentStatus = "ALIGNEDLEFT";
 	                }
 
-	                if (n == 0) {
+	                if (isFirstBlockToken) {
 	                    features.lineStatus = "LINESTART";
 	                    // be sure that previous token is closing a line, except if it's a starting line
 	                    if (previousFeatures != null) {
@@ -1019,6 +1020,7 @@ else if (features.blockStatus == null) {
 	                mm += text.length();
 	                nn += text.length();
 	                previousFeatures = features;
+                    isFirstBlockToken = false;
             	}
                 // lowest position of the block
                 lowestPos = block.getY() + block.getHeight();

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -297,7 +297,7 @@ public StringBuilder toTEIHeader(BiblioItem biblio,
                 if (config.getIncludeRawCopyrights() && biblio.getCopyright() != null && biblio.getCopyright().length()>0) {
                     tei.append("\t\t\t\t\t<p type=\"raw\">");
                     tei.append(TextUtilities.HTMLEncode(biblio.getCopyright()));
-                    tei.append("</note>\n");
+                    tei.append("</p>\n");
                 }
 
                 tei.append("\t\t\t\t</availability>\n");
@@ -315,7 +315,7 @@ public StringBuilder toTEIHeader(BiblioItem biblio,
                 if (config.getIncludeRawCopyrights() && biblio.getCopyright() != null && biblio.getCopyright().length()>0) {
                     tei.append("\t\t\t\t\t<p type=\"raw\">");
                     tei.append(TextUtilities.HTMLEncode(biblio.getCopyright()));
-                    tei.append("</note>\n");
+                    tei.append("</p>\n");
                 }
 
                 tei.append("\t\t\t\t</availability>\n");

File: grobid-core/src/main/java/org/grobid/core/lexicon/Lexicon.java
Patch:
@@ -1315,7 +1315,7 @@ public static List<OffsetPosition> characterPositionsUrlPatternWithPdfAnnotation
                 String destination = targetAnnotation.getDestination();
 
                 int destinationPos = 0;
-                if (destination.contains(urlString)) {
+                if (destination.contains(urlString) || destination.contains(urlString.replaceAll("\\s", ""))) {
                     //In this case the regex did not catch all the URL, so we need to extend it using the
                     // destination URL from the annotation
                     destinationPos = destination.indexOf(urlString) + urlString.length();

File: grobid-core/src/main/java/org/grobid/core/document/OPSService.java
Patch:
@@ -116,8 +116,10 @@ public String descriptionRetrieval(String patentNumber) throws IOException,
 			spf.setValidating(false);
 			spf.setFeature("http://xml.org/sax/features/namespaces", false);
 			spf.setFeature("http://xml.org/sax/features/validation", false);
+			spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
+			spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
 			//get a new instance of parser
-			XMLReader reader = XMLReaderFactory.createXMLReader();
+			XMLReader reader = spf.newSAXParser().getXMLReader();
 			reader.setEntityResolver(new EntityResolver() {
 				public InputSource resolveEntity(String publicId, String systemId) {
 					return new InputSource(

File: grobid-core/src/main/java/org/grobid/core/document/OPSService.java
Patch:
@@ -116,8 +116,10 @@ public String descriptionRetrieval(String patentNumber) throws IOException,
 			spf.setValidating(false);
 			spf.setFeature("http://xml.org/sax/features/namespaces", false);
 			spf.setFeature("http://xml.org/sax/features/validation", false);
+			spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
+			spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
 			//get a new instance of parser
-			XMLReader reader = XMLReaderFactory.createXMLReader();
+			XMLReader reader = spf.newSAXParser().getXMLReader();
 			reader.setEntityResolver(new EntityResolver() {
 				public InputSource resolveEntity(String publicId, String systemId) {
 					return new InputSource(

File: grobid-core/src/main/java/org/grobid/core/engines/label/TaggingLabelImpl.java
Patch:
@@ -54,6 +54,6 @@ public int hashCode() {
     @Override
     public String getName() {
         final String tmp = getLabel().replaceAll("[<>]", "");
-        return StringUtils.upperCase(getGrobidModel().getModelName() + "_" + tmp.replace(GenericTaggerUtils.START_ENTITY_LABEL_PREFIX, ""));
+        return StringUtils.upperCase(getGrobidModel().getModelName() + "_" + tmp.replace(TaggingLabels.GROBID_START_ENTITY_LABEL_PREFIX, ""));
     }
 }

File: grobid-core/src/main/java/org/grobid/core/process/ProcessRunner.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Field;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.ArrayList;
 
@@ -90,9 +91,9 @@ public void run() {
                 IOUtils.closeQuietly(process.getInputStream());
                 IOUtils.closeQuietly(process.getOutputStream());
                 try {
-                    errorStreamContents = IOUtils.toString(process.getErrorStream());
+                    errorStreamContents = IOUtils.toString(process.getErrorStream(), StandardCharsets.UTF_8);
                 } catch (IOException e) {
-                    LOGGER.error("Error retrieving error stream from process: {}", e);
+                    LOGGER.error("Error retrieving error stream from process: ", e);
                 }
                 IOUtils.closeQuietly(process.getErrorStream());
 

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -179,7 +179,7 @@ public Document processing(DocumentSource documentSource,
 
         Flavor flavorObject = null;
         if (flavor != null && flavor.length()>0) 
-            flavorObject = Flavor.valueOf(flavor); 
+            flavorObject = Flavor.fromLabel(flavor); 
         try {
 			// general segmentation
 			Document doc = parsers.getSegmentationParser(flavorObject).processing(documentSource, config);

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessFiles.java
Patch:
@@ -951,7 +951,7 @@ protected PDDocument annotate(File originFile,
         DocumentSource documentSource = 
             DocumentSource.fromPdf(originFile, config.getStartPage(), config.getEndPage(), true, true, false);
 
-        Document teiDoc = engine.fullTextToTEIDoc(documentSource, config);
+        Document teiDoc = engine.fullTextToTEIDoc(documentSource, null, config);
 
         documentSource = 
             DocumentSource.fromPdf(originFile, config.getStartPage(), config.getEndPage(), true, true, false);

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -292,16 +292,16 @@ else if (config.getConsolidateCitations() == 2)
                         .collect(Collectors.joining("\n"));
 
                     // Add I- prefix on the first label of the discarded pieces from the header
-                    String[] resultHeaderAsArray = resultBody.split("\n");
+                    String[] resultHeaderAsArray = resultHeader.split("\n");
                     resultHeaderAsArray[0] = resultHeaderAsArray[0].replace(PARAGRAPH_LABEL, "I-" + PARAGRAPH_LABEL);
-                    resultBody = String.join("\n", resultHeaderAsArray);
+                    resultHeader = String.join("\n", resultHeaderAsArray);
 
                     // Add I- prefix on the first label of the body
                     String[] resultBodyAsArray = resultBody.split("\n");
                     resultBodyAsArray[0] = resultBodyAsArray[0].replace(PARAGRAPH_LABEL, "I-" + PARAGRAPH_LABEL);
                     resultBody = String.join("\n", resultBodyAsArray);
 
-                    resultBody = resultHeader + "\n" + resultBody;
+                    resultBody = StringUtils.strip(resultHeader + "\n" + resultBody);
                     List<LayoutToken> concatenatedTokenization = Stream
                         .concat(tokensHeader.stream(), layoutTokenization.getTokenization().stream())
                         .collect(Collectors.toList());

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -7,7 +7,7 @@
 import org.apache.lucene.analysis.standard.ClassicAnalyzer;
 import org.apache.lucene.util.Version;
 import org.grobid.core.data.BibDataSet;
-import org.grobid.core.data.BiblioItem;;
+import org.grobid.core.data.BiblioItem;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.utilities.LayoutTokensUtil;
 import org.grobid.core.utilities.Pair;
@@ -478,4 +478,4 @@ public boolean isKnownFirstAuthor(String text) {
             return false;
     }
 
-}
\ No newline at end of file
+}

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -7,7 +7,7 @@
 import org.apache.lucene.analysis.standard.ClassicAnalyzer;
 import org.apache.lucene.util.Version;
 import org.grobid.core.data.BibDataSet;
-import org.grobid.core.data.BiblioItem;;
+import org.grobid.core.data.BiblioItem;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.utilities.LayoutTokensUtil;
 import org.grobid.core.utilities.Pair;
@@ -478,4 +478,4 @@ public boolean isKnownFirstAuthor(String text) {
             return false;
     }
 
-}
\ No newline at end of file
+}

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1638,7 +1638,7 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
                         String type = referenceInformation.getMiddle();
                         OffsetPosition matchingPosition = referenceInformation.getRight();
 
-                        if (pos >= matchingPosition.start)
+                        if (pos > matchingPosition.start)
                             break;
 
                         List<LayoutToken> before = clusterTokens.subList(pos, matchingPosition.start);

File: grobid-core/src/main/java/org/grobid/core/data/Funder.java
Patch:
@@ -60,6 +60,8 @@ public class Funder {
         prefixFounders.put("NSF", "National Science Foundation");
         prefixFounders.put("NIH", "National Institutes of Health");
         prefixFounders.put("ERC", "European Research Council");
+        //Japanese government
+        prefixFounders.put("MEXT", "Ministry of Education, Culture, Sports, Science and Technology");
     }
 
     public Funder() {

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -432,7 +432,7 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
             }
 
             if (desc != null && config.isWithSentenceSegmentation()) {
-                formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config, doc.getLanguage());
+                formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config, doc.getLanguage(), doc.getPDFAnnotations());
 
                 // we need a sentence segmentation of the figure caption, for that we need to introduce 
                 // a <div>, then a <p>

File: grobid-core/src/main/java/org/grobid/core/data/Table.java
Patch:
@@ -141,7 +141,7 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     if (desc != null && config.isWithSentenceSegmentation()) {
-                        formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config, doc.getLanguage());
+                        formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config, doc.getLanguage(), doc.getPDFAnnotations());
 
                         // we need a sentence segmentation of the table caption, for that we need to introduce 
                         // a <div>, then a <p>
@@ -215,7 +215,7 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
 
                     if (noteNode != null && config.isWithSentenceSegmentation()) {
                         // we need a sentence segmentation of the figure caption
-                        formatter.segmentIntoSentences(noteNode, this.noteLayoutTokens, config, doc.getLanguage());
+                        formatter.segmentIntoSentences(noteNode, this.noteLayoutTokens, config, doc.getLanguage(), doc.getPDFAnnotations());
                     }
 
                     // enclose note content in a <p> element 

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.nio.charset.StandardCharsets;
 
+import org.apache.lucene.util.CollectionUtil;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.data.*;
 import org.grobid.core.document.Document;
@@ -478,7 +479,7 @@ public Pair<String, List<LayoutToken>> processShort(List<LayoutToken> tokens, Do
         List<LayoutToken> currentChunk = new ArrayList<>();
         int currentPos = 0;
         for(LayoutToken token : tokens) {
-            if (currentChunk.size() != 0) {
+            if (CollectionUtils.isNotEmpty(currentChunk)) {
                 int tokenPos = token.getOffset();
                 if (currentPos != tokenPos) {
                     // new chunk
@@ -508,7 +509,7 @@ public Pair<String, List<LayoutToken>> processShort(List<LayoutToken> tokens, Do
             LayoutTokenization layouts = featSeg.getRight();
             if (layouts != null)
                 layoutTokenization = layouts.getTokenization();
-            if ( (featuredText != null) && (featuredText.trim().length() > 0) ) {
+            if (StringUtils.isNotBlank(featuredText)) {
                 res = label(featuredText);
                 res = postProcessFullTextLabeledText(res);
             }

File: grobid-core/src/main/java/org/grobid/core/layout/PDFAnnotation.java
Patch:
@@ -124,7 +124,7 @@ public boolean cover(LayoutToken token) {
 						break;
 					}
 					double areaToken = tokenBox.area();
-					// the bounding box of the insection 
+					// the bounding box of the intersection
 					BoundingBox intersectionBox = box.boundingBoxIntersection(tokenBox);
 					if (intersectionBox != null) {
 						double intersectionArea = intersectionBox.area();

File: grobid-core/src/main/java/org/grobid/core/utilities/Utilities.java
Patch:
@@ -504,7 +504,7 @@ public static List<OffsetPosition> convertStringOffsetToTokenOffsetOld(
 	}
 
 	/**
-	 * This version uses actual LayoutToken offsets relative to the tokens present in argment only.
+	 * This version uses actual LayoutToken offsets relative to the tokens present in argument only.
 	 * It supposes that the stringPosition have been identified on the provided tokens only, and not 
 	 * restricted to the complete document.
 	 */

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1611,6 +1611,9 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
                         Note note = labels2Notes.get(matching.getLeft());
                         OffsetPosition matchingPosition = matching.getRight();
 
+                        if (pos >= matchingPosition.start)
+                            break;
+
                         List<LayoutToken> before = clusterTokens.subList(pos, matchingPosition.start);
                         String clusterContentBefore = LayoutTokensUtil.normalizeDehyphenizeText(before);
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1611,6 +1611,9 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
                         Note note = labels2Notes.get(matching.getLeft());
                         OffsetPosition matchingPosition = matching.getRight();
 
+                        if (pos >= matchingPosition.start)
+                            break;
+
                         List<LayoutToken> before = clusterTokens.subList(pos, matchingPosition.start);
                         String clusterContentBefore = LayoutTokensUtil.normalizeDehyphenizeText(before);
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1615,6 +1615,9 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
                         Note note = labels2Notes.get(matching.getLeft());
                         OffsetPosition matchingPosition = matching.getRight();
 
+                        if (pos >= matchingPosition.start) 
+                            break;
+
                         List<LayoutToken> before = clusterTokens.subList(pos, matchingPosition.start);
                         String clusterContentBefore = LayoutTokensUtil.normalizeDehyphenizeText(before);
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1873,7 +1873,7 @@ public void segmentIntoSentences(Element curParagraph, List<LayoutToken> curPara
             }
         }
 
-        List<OffsetPosition> offsetPositionsUrls = Lexicon.characterPositionsUrlPatternWithPdfAnnotations(curParagraphTokens, annotations);
+        List<OffsetPosition> offsetPositionsUrls = Lexicon.characterPositionsUrlPatternWithPdfAnnotations(curParagraphTokens, annotations, text);
         forbiddenPositions.addAll(offsetPositionsUrls);
 
         List<OffsetPosition> theSentences = 

File: grobid-core/src/main/java/org/grobid/core/engines/FundingAcknowledgementParser.java
Patch:
@@ -215,15 +215,15 @@ public MutablePair<Element, MutableTriple<List<Funding>,List<Person>,List<Affili
 //                        offsetPositionList.add(new OffsetPosition(pos, pos + sentenceLayoutToken.size()));
 //                        pos += sentenceLayoutToken.size();
 //                    }
-                    Nodes sentences = paragraph.query("//s");
+                    Nodes sentences = paragraph.query(".//s");
 
                     if(sentences.size() == 0) {
                         // Overly careful - we should never end up here.
                         LOGGER.warn("While the configuration claim that paragraphs must be segmented, we did not find any sentence. ");
                         updateParagraphNodeWithAnnotations(paragraph, annotations);
                     }
 
-                    updateNodes(sentences, annotations);
+                    updateSentencesNodes(sentences, annotations);
                 } else {
                     updateParagraphNodeWithAnnotations(paragraph, annotations);
                 }
@@ -285,7 +285,7 @@ private static void updateParagraphNodeWithAnnotations(Node paragraph, List<Pair
         }
     }
 
-    private static void updateNodes(Nodes sentences, List<Pair<OffsetPosition, Element>> annotations) {
+    private static void updateSentencesNodes(Nodes sentences, List<Pair<OffsetPosition, Element>> annotations) {
         int pos = 0;
         int sentenceStartOffset = 0;
         for (Node sentence : sentences) {

File: grobid-core/src/main/java/org/grobid/core/utilities/TextUtilities.java
Patch:
@@ -1586,7 +1586,7 @@ public static List<OffsetPosition> matchTokenAndString(List<LayoutToken> layoutT
                     if (StringUtils.isNotEmpty(accumulator)) {
                         int start = text.indexOf(accumulator.toString(), pos);
                         newPositions.add(new OffsetPosition(start, start + accumulator.toString().length()));
-                        pos = textPositionOfToken + 1;
+                        pos = textPositionOfToken;
                         break;
                     }
                     pos = textPositionOfToken;

File: grobid-core/src/main/java/org/grobid/core/utilities/TextUtilities.java
Patch:
@@ -1586,7 +1586,7 @@ public static List<OffsetPosition> matchTokenAndString(List<LayoutToken> layoutT
                     if (StringUtils.isNotEmpty(accumulator)) {
                         int start = text.indexOf(accumulator.toString(), pos);
                         newPositions.add(new OffsetPosition(start, start + accumulator.toString().length()));
-                        pos = textPositionOfToken;
+                        pos = textPositionOfToken + 1;
                         break;
                     }
                     pos = textPositionOfToken;
@@ -1596,7 +1596,7 @@ public static List<OffsetPosition> matchTokenAndString(List<LayoutToken> layoutT
                 int start = text.indexOf(accumulator.toString(), pos);
                 newPositions.add(new OffsetPosition(start, start + accumulator.toString().length()));
                 accumulator = new StringBuilder();
-                pos = textPositionOfToken;
+                pos = textPositionOfToken + 1;
             }
 
         }

File: grobid-core/src/main/java/org/grobid/core/utilities/SentenceUtilities.java
Patch:
@@ -297,7 +297,7 @@ public static boolean toSkipToken(String tok) {
             return false;
     }
 
-    private static boolean toSkipTokenNoHyphen(String tok) {
+    static boolean toSkipTokenNoHyphen(String tok) {
         if (tok.equals(" ") || tok.equals("\n") || tok.equals("\t"))
             return true;
         else

File: grobid-core/src/main/java/org/grobid/core/lexicon/Lexicon.java
Patch:
@@ -1193,7 +1193,7 @@ public static List<OffsetPosition> characterPositionsUrlPatternWithPdfAnnotation
         List<PDFAnnotation> pdfAnnotations,
         String text) {
 
-        List<OffsetPosition> urlTokensPositions = tokensPositionUrlPatternWithPdfAnnotations(layoutTokens, pdfAnnotations);
+        List<OffsetPosition> urlTokensPositions = tokenPositionUrlPatternWithPdfAnnotations(layoutTokens, pdfAnnotations);
 
         // here we need to match the offsetPositions related to the text obtained by the layoutTokens, with the text
         // which may be different (spaces, hypen, breakline)
@@ -1203,7 +1203,7 @@ public static List<OffsetPosition> characterPositionsUrlPatternWithPdfAnnotation
     /**
      * This method returns the token positions in respect of the layout tokens
      */
-    public static List<OffsetPosition> tokensPositionUrlPatternWithPdfAnnotations(
+    public static List<OffsetPosition> tokenPositionUrlPatternWithPdfAnnotations(
         List<LayoutToken> layoutTokens,
         List<PDFAnnotation> pdfAnnotations) {
 

File: grobid-core/src/test/java/org/grobid/core/lexicon/LexiconTest.java
Patch:
@@ -163,7 +163,7 @@ public void testTokensPositionsUrlPatternWithPDFAnnotations_URL_shouldReturnCorr
         annotation.setType(PDFAnnotation.Type.URI);
 
         List<PDFAnnotation> pdfAnnotations = List.of(annotation);
-        List<OffsetPosition> offsetPositions = Lexicon.tokensPositionUrlPatternWithPdfAnnotations(tokenisedInput, pdfAnnotations);
+        List<OffsetPosition> offsetPositions = Lexicon.tokenPositionUrlPatternWithPdfAnnotations(tokenisedInput, pdfAnnotations);
 
         assertThat(offsetPositions, hasSize(1));
         OffsetPosition url = offsetPositions.get(0);

File: grobid-core/src/main/java/org/grobid/core/data/Funding.java
Patch:
@@ -93,6 +93,8 @@ public String getGrantNumber() {
     }
 
     public void setGrantNumber(String grantNumber) {
+        if (grantNumber != null && grantNumber.startsWith("n˚"))
+            grantNumber = grantNumber.replace("n˚", "");
         this.grantNumber = grantNumber;
     }
 

File: grobid-core/src/main/java/org/grobid/core/analyzers/Analyzer.java
Patch:
@@ -21,6 +21,8 @@ public interface Analyzer {
 
 	List<LayoutToken> tokenizeWithLayoutToken(String text);
 
+    List<LayoutToken> retokenizeFromLayoutToken(List<LayoutToken> tokens);
+
     List<String> retokenizeSubdigits(List<String> chunks);
 
     List<LayoutToken> retokenizeSubdigitsWithLayoutToken(List<String> chunks);

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -882,7 +882,9 @@ public String processAllCitationsInPatent(String text,
         }
         // we initialize the attribute individually for readability...
         boolean filterDuplicate = false;
-        return parsers.getReferenceExtractor().extractAllReferencesString(text, filterDuplicate,
+        List<String> texts = new ArrayList<>();
+        texts.add(text);
+        return parsers.getReferenceExtractor().extractAllReferencesString(texts, filterDuplicate,
 			consolidateCitations, includeRawCitations, patentResults, nplResults);
     }
 

File: grobid-core/src/main/java/org/grobid/core/lang/Language.java
Patch:
@@ -21,7 +21,7 @@ public final class Language {
     public static final String LN = "nl";
     public static final String PL = "pl";
     public static final String SV = "sv";
-    public static final String KR = "kr";
+    public static final String KO = "ko";
 
     private String lang;
     private double conf;
@@ -68,7 +68,7 @@ public boolean isJapaneses() {
     }
 
     public boolean isKorean() {
-        return "kr".equals(lang);
+        return "kr".equals(lang) || "ko".equals(lang);
     }
 
     public boolean isArabic() {

File: grobid-core/src/main/java/org/grobid/core/lexicon/Lexicon.java
Patch:
@@ -566,7 +566,7 @@ else if (code.equals("it"))
             return "Italian";
         else if (code.equals("jp"))
             return "Japanese";
-        else if (code.equals("kr"))
+        else if (code.equals("kr") || code.equals("ko"))
             return "Korean";
         else if (code.equals("nl"))
             return "Deutch";

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -588,6 +588,7 @@ public static File getPdfaltoPath() {
         return pathToPdfalto;
     }
 
+
     public static String getGrobidEngineName(final String modelName) {
         ModelParameters param = modelMap.get(modelName);
         if (param == null) {

File: grobid-core/src/main/java/org/grobid/core/engines/patent/ReferenceExtractor.java
Patch:
@@ -874,7 +874,7 @@ public String extractAllReferencesString(List<String> texts,
                 (localArticlesBySegment != null && localArticlesBySegment.size()>0) ) {
                 // output text
                 String divID = KeyGen.getKey().substring(0,7);      
-                resultTEI.append("\t\t<div>");
+                resultTEI.append("\t\t<div>\n");
                 resultTEI.append("\t\t\t<p id=\"_"+ divID +"\">");
                 String text = LayoutTokensUtil.toText(tokens);
                 // not affecting offsets:

File: grobid-core/src/main/java/org/grobid/core/lexicon/Lexicon.java
Patch:
@@ -566,7 +566,7 @@ else if (code.equals("it"))
             return "Italian";
         else if (code.equals("jp"))
             return "Japanese";
-        else if (code.equals("kr"))
+        else if (code.equals("kr") || code.equals("ko"))
             return "Korean";
         else if (code.equals("nl"))
             return "Deutch";

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -874,7 +874,9 @@ public String processAllCitationsInPatent(String text,
         }
         // we initialize the attribute individually for readability...
         boolean filterDuplicate = false;
-        return parsers.getReferenceExtractor().extractAllReferencesString(text, filterDuplicate,
+        List<String> texts = new ArrayList<>();
+        texts.add(text);
+        return parsers.getReferenceExtractor().extractAllReferencesString(texts, filterDuplicate,
 			consolidateCitations, includeRawCitations, patentResults, nplResults);
     }
 

File: grobid-core/src/main/java/org/grobid/core/engines/patent/PatentRefParser.java
Patch:
@@ -49,7 +49,7 @@ public class PatentRefParser {
             "TT", "TN", "TR", "UA", "GB", "US", "UY", "VE", "VN", "YU", "ZM", "ZW");
 
 	// this is the list of supported languages - language codes given ISO 639-1, two-letter codes
-    static public List<String> languages = Arrays.asList("en", "de", "fr", "es", "it", "ja", "kr", "pt", "zh", "ar");
+    static public List<String> languages = Arrays.asList("en", "de", "fr", "es", "it", "ja", "ko", "pt", "zh", "ar");
 
 	// list of regular expressions for identifying the authority in the raw reference string
 	private List<Pattern> autority_patterns = new ArrayList<Pattern>();

File: grobid-core/src/main/java/org/grobid/core/lang/Language.java
Patch:
@@ -21,7 +21,7 @@ public final class Language {
     public static final String LN = "nl";
     public static final String PL = "pl";
     public static final String SV = "sv";
-    public static final String KR = "kr";
+    public static final String KO = "ko";
 
     private String lang;
     private double conf;
@@ -68,7 +68,7 @@ public boolean isJapaneses() {
     }
 
     public boolean isKorean() {
-        return "kr".equals(lang);
+        return "kr".equals(lang) || "ko".equals(lang);
     }
 
     public boolean isArabic() {

File: grobid-core/src/main/java/org/grobid/core/data/CopyrightsLicense.java
Patch:
@@ -39,7 +39,7 @@ public enum License {
         CCBYSA  ("CC-BY-SA"),
         CCBYNCSA  ("CC-BY-NC-SA"),
         CCBYND  ("CC-BY-ND"),
-        COPYRIGHTS ("strict-copyrights"),
+        COPYRIGHT ("strict-copyrights"),
         OTHER   ("other"),
         UNDECIDED   ("undecided");
         
@@ -55,7 +55,7 @@ public String getName() {
     };
 
     public static List<String> licenses = 
-        Arrays.asList("CC-0", "CC-BY", "CC-BY-NC", "CC-BY-NC-ND", "CC-BY-SA", "CC-BY-NC-SA", "CC-BY-ND", "copyrights", "other", "undecided");
+        Arrays.asList("CC-0", "CC-BY", "CC-BY-NC", "CC-BY-NC-ND", "CC-BY-SA", "CC-BY-NC-SA", "CC-BY-ND", "copyright", "other", "undecided");
 
     private CopyrightsOwner copyrightsOwner;
     private double copyrightsOwnerProb;

File: grobid-core/src/main/java/org/grobid/core/engines/LicenseClassifier.java
Patch:
@@ -120,7 +120,7 @@ protected static List<CopyrightsLicense> extractResults(String copyrightOwnerAsJ
                     double scoreUndecided = 0.0;
                     int rank = 0;
                     for (Double scoreField : scoreFields) {
-                        if (scoreField>0.5 && scoreField >= bestProb) {
+                        if (scoreField>0.5 && scoreField > bestProb) {
                             owner = CopyrightsOwner.valueOf(owners.get(rank).toUpperCase());
                             bestProb = scoreField;
                         }
@@ -156,7 +156,7 @@ protected static List<CopyrightsLicense> extractResults(String copyrightOwnerAsJ
                     License license = null;
                     rank = 0;
                     for (Double scoreField : scoreFields) {
-                        if (scoreField>0.5 && scoreField >= bestProb) {
+                        if (scoreField>0.5 && scoreField > bestProb) {
                             String valueLicense = licenses.get(rank);
                             valueLicense = valueLicense.replace("-", "");
                             license = License.valueOf(valueLicense.toUpperCase());

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -262,7 +262,6 @@ public StringBuilder toTEIHeader(BiblioItem biblio,
                 // a dummy publicationStmt is still necessary according to TEI
                 tei.append("\t\t\t\t<publisher/>\n");
             }
-            
 
             // We introduce something more meaningful with TEI customization to encode copyrights information:
             // - @copyrightsOwner with value "publisher", "authors", "unknown"

File: grobid-core/src/test/java/org/grobid/core/utilities/GrobidPropertiesTest.java
Patch:
@@ -97,7 +97,7 @@ public void testgetNBThreadsShouldReturnAvailableProcessorsIfZero() {
     @Test
     public void testShouldReturnModelPathWithExtension() {
         GrobidModels model = GrobidModels.DATE;
-        String extension = GrobidProperties.getGrobidCRFEngine(model).getExt();
+        String extension = GrobidProperties.getGrobidEngine(model).getExt();
         assertEquals(
             "model path for " + model.name(),
             new File(GrobidProperties.getGrobidHome(),

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -261,10 +261,10 @@ protected List<Affiliation> resultExtractionLayoutTokens(String result, List<Lay
                 affiliation.addLabeledResult(TaggingLabels.AFFILIATION_SETTLEMENT, tokens);
                 
             } else if (clusterLabel.equals(TaggingLabels.AFFILIATION_ADDRESSLINE)) {
-                if (affiliation.getAddressString() != null) {
-                    affiliation.setAddressString(affiliation.getAddressString() + " " + clusterContent);
+                if (affiliation.getAddrLine() != null) {
+                    affiliation.setAddrLine(affiliation.getAddrLine() + " " + clusterContent);
                 } else {
-                    affiliation.setAddressString(clusterContent);
+                    affiliation.setAddrLine(clusterContent);
                 }
                 affiliation.addLabeledResult(TaggingLabels.AFFILIATION_ADDRESSLINE, tokens);
             } 

File: grobid-core/src/test/java/org/grobid/core/test/TestAffiliationAddressParser.java
Patch:
@@ -25,13 +25,13 @@ public static void tearDown(){
         GrobidFactory.reset();
     }
 	
-	//@Test
+	@Test
 	public void testParser() throws Exception {
 
 		String affiliationSequence1 = "Atomic Physics Division, Department of Atomic Physics and Luminescence, " + 
 									  "Faculty of Applied Physics and Mathematics, Gdansk University of " + 
 									  "Technology, Narutowicza 11/12, 80-233 Gdansk, Poland";			
-		List<Affiliation> res = engine.processAffiliation(affiliationSequence1);	
+		List<Affiliation> res = engine.processAffiliation(affiliationSequence1);
 		assertEquals(1, res.size());
 		if (res.size() > 0) {
 			assertNotNull(res.get(0).getInstitutions());

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -154,7 +154,7 @@ public StringBuilder toTEIHeader(BiblioItem biblio,
             if (titleTokens != null && titleTokens.size()>0) {
                 String coords = LayoutTokensUtil.getCoordsString(titleTokens);
                 if (coords != null) {
-                    tei.append(" coord=\"" + coords + "\"");
+                    tei.append(" coords=\"" + coords + "\"");
                 }
             }
         }
@@ -394,7 +394,7 @@ else if (biblio.getE_Year().length() == 4)
                 if (titleTokens != null && titleTokens.size()>0) {
                     String coords = LayoutTokensUtil.getCoordsString(titleTokens);
                     if (coords != null) {
-                        tei.append(" coord=\"" + coords + "\"");
+                        tei.append(" coords=\"" + coords + "\"");
                     }
                 }
             }

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -137,7 +137,7 @@ public void processFullText(final GrobidMainArgs pGbdArgs) throws Exception {
         } else {
             List<String> elementCoordinates = null;
             if (pGbdArgs.getTeiCoordinates()) {
-                elementCoordinates = Arrays.asList("figure", "persName", "ref", "biblStruct", "formula", "s", "note", "affiliation");
+                elementCoordinates = Arrays.asList("figure", "persName", "ref", "biblStruct", "formula", "s", "note", "title", "head", "affiliation");
             }
             processFullTextDirectory(files, pGbdArgs, pGbdArgs.getPath2Output(), pGbdArgs.getSaveAssets(), 
                 elementCoordinates, pGbdArgs.getSegmentSentences(), pGbdArgs.getAddElementId());

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -154,7 +154,7 @@ public StringBuilder toTEIHeader(BiblioItem biblio,
             if (titleTokens != null && titleTokens.size()>0) {
                 String coords = LayoutTokensUtil.getCoordsString(titleTokens);
                 if (coords != null) {
-                    tei.append(" coord=\"" + coords + "\"");
+                    tei.append(" coords=\"" + coords + "\"");
                 }
             }
         }
@@ -394,7 +394,7 @@ else if (biblio.getE_Year().length() == 4)
                 if (titleTokens != null && titleTokens.size()>0) {
                     String coords = LayoutTokensUtil.getCoordsString(titleTokens);
                     if (coords != null) {
-                        tei.append(" coord=\"" + coords + "\"");
+                        tei.append(" coords=\"" + coords + "\"");
                     }
                 }
             }

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -137,7 +137,7 @@ public void processFullText(final GrobidMainArgs pGbdArgs) throws Exception {
         } else {
             List<String> elementCoordinates = null;
             if (pGbdArgs.getTeiCoordinates()) {
-                elementCoordinates = Arrays.asList("figure", "persName", "ref", "biblStruct", "formula", "s", "note");
+                elementCoordinates = Arrays.asList("figure", "persName", "ref", "biblStruct", "formula", "s", "note", "title", "head");
             }
             processFullTextDirectory(files, pGbdArgs, pGbdArgs.getPath2Output(), pGbdArgs.getSaveAssets(), 
                 elementCoordinates, pGbdArgs.getSegmentSentences(), pGbdArgs.getAddElementId());

File: grobid-core/src/main/java/org/grobid/core/data/Affiliation.java
Patch:
@@ -595,7 +595,7 @@ public static String toTEI(Affiliation aff, int nbTag, GrobidAnalysisConfig conf
         if (withAffCoords) {
             String coords = LayoutTokensUtil.getCoordsString(aff.getLayoutTokens());
             if (coords != null && coords.length()>0) {
-                tei.append(" coord=\"" + coords + "\"");
+                tei.append(" coords=\"" + coords + "\"");
             }
         }
         tei.append(">\n");

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -3797,7 +3797,7 @@ private void appendAffiliation(
             // we serialize the coordinates for the whole affiliation block
             String coords = LayoutTokensUtil.getCoordsString(aff.getLayoutTokens());
             if (coords != null && coords.length()>0) {
-                tei.append(" coord=\"" + coords + "\"");
+                tei.append(" coords=\"" + coords + "\"");
             }
         }
         tei.append(">\n");

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -137,7 +137,7 @@ public void processFullText(final GrobidMainArgs pGbdArgs) throws Exception {
         } else {
             List<String> elementCoordinates = null;
             if (pGbdArgs.getTeiCoordinates()) {
-                elementCoordinates = Arrays.asList("figure", "persName", "ref", "biblStruct", "formula", "s", "note");
+                elementCoordinates = Arrays.asList("figure", "persName", "ref", "biblStruct", "formula", "s", "note", "affiliation");
             }
             processFullTextDirectory(files, pGbdArgs, pGbdArgs.getPath2Output(), pGbdArgs.getSaveAssets(), 
                 elementCoordinates, pGbdArgs.getSegmentSentences(), pGbdArgs.getAddElementId());

File: grobid-core/src/main/java/org/grobid/core/data/Affiliation.java
Patch:
@@ -192,6 +192,7 @@ public void setAffiliationString(String s) {
 
     public void setRawAffiliationString(String s) {
         rawAffiliationString = s;
+        rawAffiliationString = rawAffiliationString.replaceAll("( )+", " ");
     }
 
     public void setInstitutions(List<String> affs) {

File: grobid-core/src/test/java/org/grobid/core/engines/AffiliationAddressParserTest.java
Patch:
@@ -106,7 +106,7 @@ private List<Affiliation> processLabelResults(
         LOGGER.debug("tokenizations: {}", tokenizations);
         List<String> affiliationBlocks = getAffiliationBlocksWithLineFeed(tokenizations);
         String header = FeaturesVectorAffiliationAddress.addFeaturesAffiliationAddress(
-            affiliationBlocks, Arrays.asList(tokenizations), NO_PLACES_POSITIONS
+            affiliationBlocks, Arrays.asList(tokenizations), NO_PLACES_POSITIONS, NO_PLACES_POSITIONS
         );
         LOGGER.debug("header: {}", header);
         String labelResult = addLabelsToFeatures(header, labels);

File: grobid-core/src/test/java/org/grobid/core/test/TestAffiliationAddressParser.java
Patch:
@@ -25,10 +25,9 @@ public static void tearDown(){
         GrobidFactory.reset();
     }
 	
-	@Test
+	//@Test
 	public void testParser() throws Exception {
 
-
 		String affiliationSequence1 = "Atomic Physics Division, Department of Atomic Physics and Luminescence, " + 
 									  "Faculty of Applied Physics and Mathematics, Gdansk University of " + 
 									  "Technology, Narutowicza 11/12, 80-233 Gdansk, Poland";			

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -270,7 +270,7 @@ public void processAffiliation(final GrobidMainArgs pGbdArgs) throws Exception {
         if (isEmpty(result)) {
             throw new GrobidResourceException("Cannot read the input data for affiliations. Check the documentation. ");
         }
-        IOUtilities.writeInFile(pGbdArgs.getPath2Output() + File.separator + "result", result.get(0).toTEI());
+        IOUtilities.writeInFile(pGbdArgs.getPath2Output() + File.separator + "result", Affiliation.toTEI(result.get(0),0));
     }
 
     /**

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -98,6 +98,7 @@ public boolean accept(File dir, String name) {
 			// get a factory for SAX parser
 			SAXParserFactory spf = SAXParserFactory.newInstance();
 			List<List<OffsetPosition>> placesPositions = null;
+			List<List<OffsetPosition>> countriesPositions = null;
 			List<List<LayoutToken>> allTokens = null;
 
 			int n = 0;
@@ -115,11 +116,12 @@ public boolean accept(File dir, String name) {
 				final List<String> labeled = parser2.getLabeledResult();
 				allTokens = parser2.getAllTokens();
 				placesPositions = parser2.getPlacesPositions();
+				countriesPositions = parser2.getCountriesPositions();
 				totalExamples += parser2.n;
 
 				// we can now add the features
                 String affAdd = FeaturesVectorAffiliationAddress
-                					.addFeaturesAffiliationAddress(labeled, allTokens, placesPositions);
+                					.addFeaturesAffiliationAddress(labeled, allTokens, placesPositions, countriesPositions);
 
 				// format with features for sequence tagging...
 				// given the split ratio we write either in the training file or the evaluation file

File: grobid-core/src/main/java/org/grobid/core/data/Person.java
Patch:
@@ -259,7 +259,7 @@ public void setLayoutTokens(List<LayoutToken> tokens) {
     /**
      * TEI serialization via xom. 
      */
-    public void addLayoutTokens(List<LayoutToken> theTokens) {
+    public void appendLayoutTokens(List<LayoutToken> theTokens) {
         if (layoutTokens == null) {
             layoutTokens = new ArrayList<LayoutToken>();
         }

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -146,6 +146,8 @@ public File pdfalto(Integer timeout, boolean force, int startPage,
             if (GrobidProperties.isContextExecutionServer()) {
                 cmd.add("--timeout");
                 cmd.add(String.valueOf(GrobidProperties.getPdfaltoTimeoutS()));
+                cmd.add("--ulimit");
+                cmd.add(String.valueOf(GrobidProperties.getPdfaltoMemoryLimitMb() * 1024));
                 tmpPathXML = processPdfaltoServerMode(pdfPath, tmpPathXML, cmd);
             } else {
                 if (!SystemUtils.IS_OS_WINDOWS && !SystemUtils.IS_OS_MAC) {

File: grobid-core/src/main/java/org/grobid/core/engines/FigureParser.java
Patch:
@@ -40,7 +40,7 @@ public Figure processing(List<LayoutToken> tokenizationFigure, String featureVec
 //System.out.println("---------------------res-----------------------");
 //System.out.println(res);
         } catch (Exception e) {
-            throw new GrobidException("CRF labeling with figure model fails.", e);
+            throw new GrobidException("Sequence labeling with figure model fails.", e);
         }
         if (res == null) {
             return null;
@@ -94,7 +94,7 @@ public Pair<String, String> createTrainingData(List<LayoutToken> tokenizations,
         try {
             res = label(featureVector);
         } catch (Exception e) {
-            LOGGER.error("CRF labeling in FigureParser fails.", e);
+            LOGGER.error("Sequence labeling in FigureParser fails.", e);
         }
         if (res == null) {
             return Pair.of(null, featureVector);

File: grobid-core/src/main/java/org/grobid/core/engines/ModelMap.java
Patch:
@@ -30,7 +30,7 @@ public class ModelMap {
 	private static Map<String, Model> models = null;
 
 	/**
-	 * Return a CRFPP tagger created corresponding to the model given in argument.
+	 * Return a model tagger created corresponding to the model given in argument.
 	 * 
 	 * @param grobidModel
 	 *            the model to use for the creation of the tagger.
@@ -53,7 +53,7 @@ public static Tagger getTagger(GrobidModel grobidModel) {
 	}
 
 	/**
-	 * Loading of the CRFPP models.
+	 * Loading of the models.
 	 */
 	@Deprecated
 	public static synchronized void initModels() {

File: grobid-core/src/main/java/org/grobid/core/engines/MonographParser.java
Patch:
@@ -407,7 +407,7 @@ private String getFeatureVectorsAsString(Document doc, Map<String, Integer> patt
                         }
                     }
 
-                    // we consider the first token of the line as usual lexical CRF token
+                    // we consider the first token of the line as usual lexical token
                     // and the second token of the line as feature
                     StringTokenizer st2 = new StringTokenizer(line, " \t");
                     // alternatively, use a grobid analyser

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -165,7 +165,7 @@ private void processFullTextDirectory(File[] files,
             for (final File currPdf : files) {
                 try {
                     if (currPdf.getName().toLowerCase().endsWith(".pdf")) {
-                        System.out.println("Processing: " + currPdf.getPath());
+                        LOGGER.info("Processing: " + currPdf.getPath());
                         GrobidAnalysisConfig config = null;
                         // path for saving assets
                         if (saveAssets) {
@@ -570,7 +570,7 @@ public void processPDFAnnotation(final GrobidMainArgs pGbdArgs) throws Exception
         for (final File currPDF : pdfDirectory.listFiles()) {
             try {
                 if (currPDF.getName().toLowerCase().endsWith(".pdf")) {
-                    System.out.println("Processing: " + currPDF.getName());
+                    LOGGER.info("Processing: " + currPDF.getName());
                     List<String> elementWithCoords = new ArrayList();
                     elementWithCoords.add("ref");
                     elementWithCoords.add("biblStruct");

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -334,7 +334,7 @@ public Pair<String,String> createTrainingData(Document doc, int id) {
 			res = label(featureVector);
 		}
 		catch(Exception e) {
-			throw new GrobidException("CRF labeling in ReferenceSegmenter fails.", e);
+			throw new GrobidException("Sequence labeling in ReferenceSegmenter fails.", e);
 		}
 		if (res == null) {
 			return null;

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -430,7 +430,7 @@ private String getFeatureVectorsAsString(Document doc, Map<String, Integer> patt
                         }
                     }
 
-                    // we consider the first token of the line as usual lexical CRF token
+                    // we consider the first token of the line as usual lexical token
                     // and the second token of the line as feature
                     StringTokenizer st2 = new StringTokenizer(line, " \t\f\u00A0");
                     // alternatively, use a grobid analyser

File: grobid-core/src/main/java/org/grobid/core/engines/TableParser.java
Patch:
@@ -41,7 +41,7 @@ public List<Table> processing(List<LayoutToken> tokenizationTable, String featur
         try {
             res = label(featureVector);
         } catch (Exception e) {
-            throw new GrobidException("CRF labeling with table model fails.", e);
+            throw new GrobidException("Sequence labeling with table model fails.", e);
         }
 
         if (res == null) {
@@ -131,7 +131,7 @@ public Pair<String, String> createTrainingData(List<LayoutToken> tokenizations,
         try {
             res = label(featureVector);
         } catch (Exception e) {
-            LOGGER.error("CRF labeling in TableParser fails.", e);
+            LOGGER.error("Sequence labeling in TableParser fails.", e);
         }
         if (res == null) {
             return Pair.of(null, featureVector);

File: grobid-core/src/main/java/org/grobid/core/jni/WapitiModel.java
Patch:
@@ -5,13 +5,14 @@
 import org.grobid.core.GrobidModel;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.exceptions.GrobidException;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
 
 public class WapitiModel {
-    public static final Logger LOGGER = LoggerFactory.getLogger(WapitiModel.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(WapitiModel.class);
 
     private SWIGTYPE_p_mdl_t model;
     private File modelFile;
@@ -33,7 +34,7 @@ private synchronized void init() {
         if (!modelFile.exists() || modelFile.isDirectory()) {
             throw new GrobidException("Model file does not exists or is a directory: " + modelFile.getAbsolutePath());
         }
-        LOGGER.info("Loading model: " + modelFile + " (size: " + modelFile.length() + ")");
+        //LOGGER.info("Loading model: " + modelFile + " (size: " + modelFile.length() + ")");
         model = WapitiWrapper.getModel(modelFile);
     }
 

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/WorkDeserializer.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Convert a JSON Work model - from a glutton or crossref response - to a BiblioItem 
- * (understandable by this stupid GROBID
+ * (understandable by this stupid GROBID)
  *
  */
 public class WorkDeserializer extends CrossrefDeserializer<BiblioItem> {

File: grobid-service/src/main/java/org/grobid/service/GrobidServicePropConfiguration.java
Patch:
@@ -4,7 +4,6 @@
 import com.fasterxml.jackson.annotation.JsonProperty;
 import jakarta.validation.constraints.NotEmpty;
 
-
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class GrobidServicePropConfiguration {
     @NotEmpty

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessTraining.java
Patch:
@@ -275,6 +275,8 @@ private static AbstractTrainer getTrainer(String model) {
             trainer = new FigureTrainer();
         } else if (model.equals("table")) {
             trainer = new TableTrainer();
+        } else if (model.equals("funding-acknowledgement")) {
+            trainer = new FundingAcknowledgementTrainer();
         } else {
             throw new IllegalStateException("The model " + model + " is unknown.");
         }

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -138,7 +138,6 @@ public String processingHeaderSection(GrobidAnalysisConfig config, Document doc,
                     resHeader.setLanguage(lang);
                 }
 
-
                 if (resHeader.getAbstract() != null) {
                     resHeader.setAbstract(TextUtilities.dehyphenizeHard(resHeader.getAbstract()));
                     //resHeader.setAbstract(TextUtilities.dehyphenize(resHeader.getAbstract()));
@@ -202,7 +201,6 @@ public String processingHeaderSection(GrobidAnalysisConfig config, Document doc,
                     }
                 }
 
-
                 // remove invalid authors (no last name, noise, etc.)
                 resHeader.setFullAuthors(Person.sanityCheck(resHeader.getFullAuthors()));
 

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -165,7 +165,7 @@ private void processFullTextDirectory(File[] files,
             for (final File currPdf : files) {
                 try {
                     if (currPdf.getName().toLowerCase().endsWith(".pdf")) {
-                        System.out.println("Processing: " + currPdf.getPath());
+                        LOGGER.info("Processing: " + currPdf.getPath());
                         GrobidAnalysisConfig config = null;
                         // path for saving assets
                         if (saveAssets) {
@@ -570,7 +570,7 @@ public void processPDFAnnotation(final GrobidMainArgs pGbdArgs) throws Exception
         for (final File currPDF : pdfDirectory.listFiles()) {
             try {
                 if (currPDF.getName().toLowerCase().endsWith(".pdf")) {
-                    System.out.println("Processing: " + currPDF.getName());
+                    LOGGER.info("Processing: " + currPDF.getName());
                     List<String> elementWithCoords = new ArrayList();
                     elementWithCoords.add("ref");
                     elementWithCoords.add("biblStruct");

File: grobid-core/src/main/java/org/grobid/core/jni/WapitiModel.java
Patch:
@@ -5,13 +5,14 @@
 import org.grobid.core.GrobidModel;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.exceptions.GrobidException;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
 
 public class WapitiModel {
-    public static final Logger LOGGER = LoggerFactory.getLogger(WapitiModel.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(WapitiModel.class);
 
     private SWIGTYPE_p_mdl_t model;
     private File modelFile;
@@ -33,7 +34,7 @@ private synchronized void init() {
         if (!modelFile.exists() || modelFile.isDirectory()) {
             throw new GrobidException("Model file does not exists or is a directory: " + modelFile.getAbsolutePath());
         }
-        LOGGER.info("Loading model: " + modelFile + " (size: " + modelFile.length() + ")");
+        //LOGGER.info("Loading model: " + modelFile + " (size: " + modelFile.length() + ")");
         model = WapitiWrapper.getModel(modelFile);
     }
 

File: grobid-service/src/main/java/org/grobid/service/GrobidServicePropConfiguration.java
Patch:
@@ -1,8 +1,10 @@
 package org.grobid.service;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import org.hibernate.validator.constraints.NotEmpty;
 
+@JsonIgnoreProperties(ignoreUnknown=true)
 public class GrobidServicePropConfiguration {
     @NotEmpty
     @JsonProperty

File: grobid-service/src/main/java/org/grobid/service/modules/GrobidServiceModule.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.inject.Binder;
 import com.google.inject.Provides;
 import com.hubspot.dropwizard.guicier.DropwizardAwareModule;
+//import ru.vyarus.dropwizard.guice.module.support.DropwizardAwareModule;
 import org.grobid.service.GrobidRestService;
 import org.grobid.service.GrobidServiceConfiguration;
 import org.grobid.service.exceptions.mapper.GrobidExceptionMapper;
@@ -22,7 +23,6 @@
 
 public class GrobidServiceModule extends DropwizardAwareModule<GrobidServiceConfiguration> {
 
-
     @Override
     public void configure(Binder binder) {
         binder.bind(HealthResource.class);
@@ -43,6 +43,7 @@ public void configure(Binder binder) {
 
     @Provides
     protected ObjectMapper getObjectMapper() {
+        //return environment().getObjectMapper();
         return getEnvironment().getObjectMapper();
     }
 
@@ -53,6 +54,7 @@ protected MetricRegistry provideMetricRegistry() {
 
     //for unit tests
     protected MetricRegistry getMetricRegistry() {
+        //return environment().metrics();
         return getEnvironment().metrics();
     }
 

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -146,6 +146,8 @@ public File pdfalto(Integer timeout, boolean force, int startPage,
             if (GrobidProperties.isContextExecutionServer()) {
                 cmd.add("--timeout");
                 cmd.add(String.valueOf(GrobidProperties.getPdfaltoTimeoutS()));
+                cmd.add("--ulimit");
+                cmd.add(String.valueOf(GrobidProperties.getPdfaltoMemoryLimitMb() * 1024));
                 tmpPathXML = processPdfaltoServerMode(pdfPath, tmpPathXML, cmd);
             } else {
                 if (!SystemUtils.IS_OS_WINDOWS && !SystemUtils.IS_OS_MAC) {

File: grobid-service/src/main/java/org/grobid/service/main/GrobidServiceApplication.java
Patch:
@@ -17,6 +17,7 @@
 import org.eclipse.jetty.servlets.CrossOriginFilter;
 import org.grobid.service.GrobidServiceConfiguration;
 import org.grobid.service.modules.GrobidServiceModule;
+import org.grobid.service.resources.HealthResource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import ru.vyarus.dropwizard.guice.GuiceBundle;
@@ -56,6 +57,8 @@ private AbstractModule getGuiceModules() {
 
     @Override
     public void run(GrobidServiceConfiguration configuration, Environment environment) {
+        environment.healthChecks().register("health-check", new HealthResource(configuration));
+        
         LOGGER.info("Service config={}", configuration);
         new DropwizardExports(environment.metrics()).register();
         ServletRegistration.Dynamic registration = environment.admin().addServlet("Prometheus", new MetricsServlet());

File: grobid-service/src/main/java/org/grobid/service/resources/HealthResource.java
Patch:
@@ -19,7 +19,8 @@ public class HealthResource extends HealthCheck {
     private GrobidServiceConfiguration configuration;
 
     @Inject
-    public HealthResource() {
+    public HealthResource(GrobidServiceConfiguration configuration) {
+        this.configuration = configuration;
     }
 
     @GET

File: grobid-service/src/main/java/org/grobid/service/GrobidServicePropConfiguration.java
Patch:
@@ -1,8 +1,11 @@
 package org.grobid.service;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import jakarta.validation.constraints.NotEmpty;
 
+
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class GrobidServicePropConfiguration {
     @NotEmpty
     @JsonProperty

File: grobid-service/src/main/java/org/grobid/service/main/GrobidServiceApplication.java
Patch:
@@ -1,6 +1,7 @@
 package org.grobid.service.main;
 
 
+import com.fasterxml.jackson.databind.DeserializationFeature;
 import com.google.inject.AbstractModule;
 import io.dropwizard.assets.AssetsBundle;
 import io.dropwizard.core.Application;

File: grobid-core/src/test/java/org/grobid/core/utilities/TextUtilitiesTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.*;
 
-@Ignore
+
 public class TextUtilitiesTest extends EngineTest {
 
     @Test

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1677,8 +1677,8 @@ public void segmentIntoSentences(Element curParagraph, List<LayoutToken> curPara
                 // for readability in another conditional
                 if (((Element) theNode).getLocalName().equals("ref")) {
                     // map character offset of the node
-                    mapRefNodes.put(new Integer(pos), theNode);
-                    refPositions.add(new Integer(pos));
+                    mapRefNodes.put(Integer.valueOf(pos), theNode);
+                    refPositions.add(Integer.valueOf(pos));
 
                     String chunk = theNode.getValue();
                     forbiddenPositions.add(new OffsetPosition(pos, pos+chunk.length()));
@@ -1789,7 +1789,7 @@ public void segmentIntoSentences(Element curParagraph, List<LayoutToken> curPara
                     continue;
 
                 if (refPos >= pos+posInSentence && refPos <= pos+sentenceLength) {
-                    Node valueNode = mapRefNodes.get(new Integer(refPos));
+                    Node valueNode = mapRefNodes.get(Integer.valueOf(refPos));
                     if (pos+posInSentence < refPos) {
                         String local_text_chunk = text.substring(pos+posInSentence, refPos);
                         local_text_chunk = XmlBuilderUtils.stripNonValidXMLCharacters(local_text_chunk);

File: grobid-core/src/main/java/org/grobid/core/factory/GrobidPoolingFactory.java
Patch:
@@ -17,7 +17,7 @@ public class GrobidPoolingFactory extends AbstractEngineFactory implements
 	 * A pool which contains objects of type Engine for the conversion.
 	 */
 	private static volatile GenericObjectPool<Engine> grobidEnginePool = null;
-	private static volatile Boolean grobidEnginePoolControl = false;
+	private static volatile Object grobidEnginePoolControl = new Object();
 	private static final Logger LOGGER = LoggerFactory
 			.getLogger(GrobidPoolingFactory.class);
 

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefClient.java
Patch:
@@ -107,7 +107,7 @@ public <T extends Object> void pushRequest(CrossrefRequest<T> request, CrossrefR
 				}
 			}
 			Future<?> f = executorService.submit(new CrossrefRequestTask<T>(this, request));
-			List<Future<?>> localFutures = this.futures.get(new Long(threadId));
+			List<Future<?>> localFutures = this.futures.get(Long.valueOf(threadId));
 			if (localFutures == null)
 				localFutures = new ArrayList<Future<?>>();
 			localFutures.add(f);
@@ -142,7 +142,7 @@ public <T extends Object> void pushRequest(String model, Map<String, String> par
 	public void finish(long threadId) {
 		synchronized(this.futures) {
 			try {
-				List<Future<?>> threadFutures = this.futures.get(new Long(threadId));
+				List<Future<?>> threadFutures = this.futures.get(Long.valueOf(threadId));
 				if (threadFutures != null) {
 //System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< thread: " + threadId + " / waiting for " + threadFutures.size() + " requests to finish...");
 					for(Future<?> future : threadFutures) {

File: grobid-core/src/main/java/org/grobid/core/utilities/glutton/GluttonClient.java
Patch:
@@ -105,11 +105,11 @@ public <T extends Object> void pushRequest(GluttonRequest<T> request, CrossrefRe
             request.addListener(listener);
         synchronized(this) {
             Future<?> f = executorService.submit(new GluttonRequestTask<T>(this, request));
-            List<Future<?>> localFutures = this.futures.get(new Long(threadId));
+            List<Future<?>> localFutures = this.futures.get(Long.valueOf(threadId));
             if (localFutures == null)
                 localFutures = new ArrayList<Future<?>>();
             localFutures.add(f);
-            this.futures.put(new Long(threadId), localFutures);
+            this.futures.put(Long.valueOf(threadId), localFutures);
 //System.out.println("add request to thread " + threadId + " / current total for the thread: " +  localFutures.size());         
         }
     }

File: grobid-core/src/test/java/org/grobid/core/GrobidModelsTest.java
Patch:
@@ -24,7 +24,7 @@ public void testGrobidModelsEnum_StandardModel_affiliation() throws Exception {
         assertThat(model.getModelName(), is("affiliation-address"));
         assertThat(model.getTemplateName(), is("affiliation-address.template"));
         String[] splittedPath = model.getModelPath().split("[/\\\\]");
-        assertThat(splittedPath[splittedPath.length - 1], is("model.wapiti"));
+        //assertThat(splittedPath[splittedPath.length - 1], is("model.wapiti"));
         assertThat(splittedPath[splittedPath.length - 2], is("affiliation-address"));
         assertThat(splittedPath[splittedPath.length - 3], is("models"));
     }
@@ -38,7 +38,7 @@ public void testGrobidModelsEnum_StandardModel_name() throws Exception {
         assertThat(model.getModelName(), is("header"));
         assertThat(model.getTemplateName(), is("header.template"));
         String[] splittedPath = model.getModelPath().split("[/\\\\]");
-        assertThat(splittedPath[splittedPath.length - 1], is("model.wapiti"));
+        //assertThat(splittedPath[splittedPath.length - 1], is("model.wapiti"));
         assertThat(splittedPath[splittedPath.length - 2], is("header"));
         assertThat(splittedPath[splittedPath.length - 4], is("grobid-home"));
     }
@@ -52,7 +52,7 @@ public void testGrobidModelsEnum_CustomModel() throws Exception {
         assertThat(model.getTemplateName(), is("myDreamModel.template"));
 
         String[] tokenizePath = model.getModelPath().split("[/\\\\]");
-        assertThat(tokenizePath[tokenizePath.length - 1], is("model.wapiti"));
+        //assertThat(tokenizePath[tokenizePath.length - 1], is("model.wapiti"));
         assertThat(tokenizePath[tokenizePath.length - 2], is("myDreamModel"));
         assertThat(tokenizePath[tokenizePath.length - 3], is("models"));
         assertThat(tokenizePath[tokenizePath.length - 4], is("grobid-home"));

File: grobid-core/src/test/java/org/grobid/core/document/TEIFormatterTest.java
Patch:
@@ -31,8 +31,8 @@ public void testMakeFootNote() throws Exception {
 
         Note footnote = footnotes.get(0);
 
-        assertThat(footnote.getText(), is(" This is a footnote"));
-        assertThat(LayoutTokensUtil.toText(footnote.getTokens()), is(" This is a footnote"));
+        assertThat(footnote.getText(), is("This is a footnote"));
+        assertThat(LayoutTokensUtil.toText(footnote.getTokens()), is("This is a footnote"));
         assertThat(footnote.getLabel(), is("1"));
     }
 

File: grobid-core/src/main/java/org/grobid/core/utilities/UnicodeUtil.java
Patch:
@@ -9,7 +9,7 @@
  */
 public class UnicodeUtil {
 
-    private static final Pattern DASH_PATTERN = Pattern.compile("\\p{Pd}");
+    private static final Pattern DASH_PATTERN = Pattern.compile("[\\p{Pd}\\u2212]");
     private static final Pattern NORMALISE_REGEX_PATTERN = Pattern.compile("[ \n]");
 
 	// As java \s doesn’t support the Unicode white space property (\s matches

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -1127,7 +1127,7 @@ public void assignGraphicObjectsToFigures() {
 
                         figures.add(f);
                         Engine.getCntManager().i("FigureCounters", "STANDALONE_FIGURES");
-                        LOGGER.info("Standalone figure on page: " + pageNum);
+                        LOGGER.debug("Standalone figure on page: " + pageNum);
 
                     }
                 }

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -245,7 +245,7 @@ private static List<Pair<String, List<LayoutToken>>> getNumberedLabels(List<Layo
                         }
                     }
                 } catch (Exception e) {
-                    LOGGER.warn("Cannot parse citation reference range: " + s);
+                    LOGGER.debug("Cannot parse citation reference range: " + s);
                 }
 
             }

File: grobid-core/src/main/java/org/grobid/core/layout/Block.java
Patch:
@@ -87,7 +87,8 @@ else if (text != null)
     }
 
     public int getNbTokens() {
-        return nbTokens;
+        return tokens.size();
+        //return nbTokens;
     }
 
     public void setFont(String f) {

File: grobid-core/src/main/java/org/grobid/core/sax/PDFALTOSaxHandler.java
Patch:
@@ -260,6 +260,7 @@ else if (qName.equals("TextBlock")) {
 				//page.addBlock(block);
 			}
 			block = new Block();
+			block.setStartToken(tokenizations.size());
 			//block.setPage(currentPage);
 			blabla = new StringBuffer();
 			int imagePos = images.size()-1;
@@ -393,6 +394,7 @@ public void startElement(String namespaceURI, String localName,
 			block = new Block();
 			blabla = new StringBuffer();
 			nbTokens = 0;
+			block.setStartToken(tokenizations.size());
 			//block.setPage(currentPage);
 			// blabla.append("\n@block\n");
 		} else if (qName.equals("Illustration")) {

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -129,7 +129,9 @@ public String getFolderName() {
             @Override
             public String getModelPath() {
                 File path = GrobidProperties.getModelPath(this);
-                if (path == null || !path.exists()) {
+                if (path == null) {
+                    LOGGER.warn("The file path to the " + name + " model is invalid, path is null");
+                } else if (!path.exists()) {
                     LOGGER.warn("The file path to the " + name + " model is invalid: " + path.getAbsolutePath());
                 }
                 if (path == null)

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTClassifierModel.java
Patch:
@@ -33,7 +33,7 @@ public DeLFTClassifierModel(String model, String architecture) {
         try {
             LOGGER.info("Loading DeLFT classification model for " + this.modelName + " in " + GrobidProperties.getInstance().getModelPath());
             JEPThreadPoolClassifier.getInstance().run(new InitModel(this.modelName, GrobidProperties.getInstance().getModelPath(), this.architecture));
-        } catch(InterruptedException e) {
+        } catch(InterruptedException | RuntimeException e) {
             LOGGER.error("DeLFT model " + this.modelName + " initialization failed", e);
         }
     }
@@ -68,6 +68,7 @@ public void run() {
                         GrobidProperties.getInstance().getDelftRuntimeBatchSize(this.modelName));
 
             } catch(JepException e) {
+                LOGGER.error("DeLFT classifier model initialization failed. ", e);
                 throw new GrobidException("DeLFT classifier model initialization failed. ", e);
             }
         } 

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -32,7 +32,7 @@ public DeLFTModel(GrobidModel model, String architecture) {
         try {
             LOGGER.info("Loading DeLFT model for " + model.getModelName() + " with architecture " + architecture + "...");            
             JEPThreadPool.getInstance().run(new InitModel(this.modelName, GrobidProperties.getInstance().getModelPath(), architecture));
-        } catch(InterruptedException e) {
+        } catch(InterruptedException | RuntimeException e) {
             LOGGER.error("DeLFT model " + this.modelName + " initialization failed", e);
         }
     }
@@ -75,6 +75,7 @@ public void run() {
                 }
 
             } catch(JepException e) {
+                LOGGER.error("DeLFT model initialization failed. ", e);
                 throw new GrobidException("DeLFT model initialization failed. ", e);
             }
         } 

File: grobid-core/src/main/java/org/grobid/core/main/LibraryLoader.java
Patch:
@@ -165,7 +165,7 @@ public boolean accept(File dir, String name) {
 
                         if (SystemUtils.IS_OS_MAC) {
 //                            System.setProperty("java.library.path", System.getProperty("java.library.path") + ":" + libraryFolder.getAbsolutePath());
-                            System.loadLibrary("python" + pythonEnvironmentConfig.getPythonVersion() + "m");
+                            System.loadLibrary("python" + pythonEnvironmentConfig.getPythonVersion());
                             System.loadLibrary(DELFT_NATIVE_LIB_NAME);
                         } else if (SystemUtils.IS_OS_LINUX) {
                             System.loadLibrary(DELFT_NATIVE_LIB_NAME);

File: grobid-core/src/test/java/org/grobid/core/document/TEIFormatterTest.java
Patch:
@@ -26,7 +26,7 @@ public void testMakeFootNote() throws Exception {
         String text = "1 This is a footnote";
         List<LayoutToken> tokens = GrobidAnalyzer.getInstance().tokenizeWithLayoutToken(text);
 
-        List<Note> footnotes = new TEIFormatter(null, null).makeNotes(tokens, text, Note.NoteType.FOOT);
+        List<Note> footnotes = new TEIFormatter(null, null).makeNotes(tokens, text, Note.NoteType.FOOT, 0);
         assertThat(footnotes.size(), is(1));
 
         Note footnote = footnotes.get(0);

File: grobid-core/src/main/java/org/grobid/core/engines/citations/CalloutAnalyzer.java
Patch:
@@ -1,8 +1,5 @@
 package org.grobid.core.engines.citations;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.util.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: grobid-core/src/test/java/org/grobid/core/tokenization/TaggingTokenClusterorTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.apache.commons.io.IOUtils;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.analyzers.GrobidAnalyzer;
-import org.grobid.core.engines.label.HeaderLabels;
 import org.grobid.core.engines.label.TaggingLabelImpl;
 import org.grobid.core.engines.label.TaggingLabels;
 import org.grobid.core.lang.Language;
@@ -31,7 +30,7 @@ public static void init() {
     @Test
     public void testExclusion_notPresent_shouldReturnTrue() throws Exception {
         final TaggingTokenClusteror.LabelTypeExcludePredicate labelTypeExcludePredicate =
-            new TaggingTokenClusteror.LabelTypeExcludePredicate(TaggingLabels.EQUATION, HeaderLabels.HEADER_KEYWORD);
+            new TaggingTokenClusteror.LabelTypeExcludePredicate(TaggingLabels.EQUATION, TaggingLabels.HEADER_KEYWORD);
 
         assertThat(labelTypeExcludePredicate.apply(new TaggingTokenCluster(TaggingLabels.FIGURE)),
             is(true));
@@ -50,7 +49,7 @@ public void testExclusion_shouldReturnFalse() throws Exception {
     @Test
     public void testInclusion_notPresent_shouldReturnFalse() throws Exception {
         final TaggingTokenClusteror.LabelTypePredicate labelTypePredicate =
-            new TaggingTokenClusteror.LabelTypePredicate(HeaderLabels.HEADER_KEYWORD);
+            new TaggingTokenClusteror.LabelTypePredicate(TaggingLabels.HEADER_KEYWORD);
 
         assertThat(labelTypePredicate.apply(new TaggingTokenCluster(TaggingLabels.FIGURE)),
             is(false));

File: grobid-core/src/test/java/org/grobid/core/document/TEIFormatterIntegrationTest.java
Patch:
@@ -32,7 +32,7 @@ public void testGetTeiNotes() throws Exception {
         List<Note> teiNotes = new TEIFormatter(null, null).getTeiNotes(doc);
 
         assertThat(teiNotes, hasSize(1));
-        assertThat(teiNotes.get(0).getText(), is(" http://wikipedia.org"));
+        assertThat(teiNotes.get(0).getText(), is(" http://wikipedia.org  "));
         assertThat(teiNotes.get(0).getLabel(), is("1"));
         assertThat(teiNotes.get(0).getPageNumber(), is(1));
     }

File: grobid-core/src/test/java/org/grobid/core/document/TEIFormatterIntegrationTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.grobid.core.document;
 
-import org.grobid.core.data.Footnote;
+import org.grobid.core.data.Note;
 import org.grobid.core.engines.EngineParsers;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.main.LibraryLoader;
@@ -29,11 +29,11 @@ public void testGetTeiNotes() throws Exception {
         File input = new File(this.getClass().getResource("/footnotes/test.pdf").toURI());
         Document doc = engine.getSegmentationParser().processing(DocumentSource.fromPdf(input), GrobidAnalysisConfig.defaultInstance());
 
-        List<Footnote> teiNotes = new TEIFormatter(null, null).getTeiNotes(doc);
+        List<Note> teiNotes = new TEIFormatter(null, null).getTeiNotes(doc);
 
         assertThat(teiNotes, hasSize(1));
         assertThat(teiNotes.get(0).getText(), is(" http://wikipedia.org"));
-        assertThat(teiNotes.get(0).getNumber(), is(1));
+        assertThat(teiNotes.get(0).getLabel(), is("1"));
         assertThat(teiNotes.get(0).getPageNumber(), is(1));
     }
 

File: grobid-core/src/test/java/org/grobid/core/document/TEIFormatterTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.grobid.core.document;
 
 import org.grobid.core.analyzers.GrobidAnalyzer;
-import org.grobid.core.data.Footnote;
+import org.grobid.core.data.Note;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.utilities.GrobidProperties;
 import org.grobid.core.utilities.LayoutTokensUtil;
@@ -26,11 +26,11 @@ public void testMakeFootNote() throws Exception {
         String text = "1 This is a footnote";
         List<LayoutToken> tokens = GrobidAnalyzer.getInstance().tokenizeWithLayoutToken(text);
 
-        Footnote footnote = new TEIFormatter(null, null).makeFootNote(tokens, text);
+        Note footnote = new TEIFormatter(null, null).makeNote(tokens, text, Note.NoteType.FOOT);
 
         assertThat(footnote.getText(), is(" This is a footnote"));
         assertThat(LayoutTokensUtil.toText(footnote.getTokens()), is(" This is a footnote"));
-        assertThat(footnote.getNumber(), is(1));
+        assertThat(footnote.getLabel(), is("1"));
     }
 
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1525,7 +1525,7 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
                                 }
 
                                 ref.appendChild(matching.get().getText());
-                                ref.addAttribute(new Attribute("target", "#b" + candidate.getNumber()));
+                                ref.addAttribute(new Attribute("target", "#" + candidate.getNumber()));
                                 curParagraph.appendChild(ref);
 
                                 List<LayoutToken> after = cluster.concatTokens().subList(idx + 1, cluster.concatTokens().size() - 1);

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTClassifierModel.java
Patch:
@@ -33,7 +33,7 @@ public DeLFTClassifierModel(String model, String architecture) {
         try {
             LOGGER.info("Loading DeLFT classification model for " + this.modelName + " in " + GrobidProperties.getInstance().getModelPath());
             JEPThreadPoolClassifier.getInstance().run(new InitModel(this.modelName, GrobidProperties.getInstance().getModelPath(), this.architecture));
-        } catch(InterruptedException e) {
+        } catch(InterruptedException | RuntimeException e) {
             LOGGER.error("DeLFT model " + this.modelName + " initialization failed", e);
         }
     }
@@ -68,6 +68,7 @@ public void run() {
                         GrobidProperties.getInstance().getDelftRuntimeBatchSize(this.modelName));
 
             } catch(JepException e) {
+                LOGGER.error("DeLFT classifier model initialization failed. ", e);
                 throw new GrobidException("DeLFT classifier model initialization failed. ", e);
             }
         } 

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -75,6 +75,7 @@ public void run() {
                 }
 
             } catch(JepException e) {
+                LOGGER.error("DeLFT model initialization failed. ", e);
                 throw new GrobidException("DeLFT model initialization failed. ", e);
             }
         } 

File: grobid-core/src/main/java/org/grobid/core/jni/JEPThreadPool.java
Patch:
@@ -162,7 +162,7 @@ public synchronized Jep getJEPInstance() {
     }
 
     public void run(Runnable task) throws InterruptedException {
-        System.out.println("running thread: " + Thread.currentThread().getId());
+        LOGGER.info("running thread: " + Thread.currentThread().getId());
         Future future = executor.submit(task);
         // wait until done (in ms)
         while (!future.isDone()) {

File: grobid-core/src/main/java/org/grobid/core/main/LibraryLoader.java
Patch:
@@ -165,7 +165,7 @@ public boolean accept(File dir, String name) {
 
                         if (SystemUtils.IS_OS_MAC) {
 //                            System.setProperty("java.library.path", System.getProperty("java.library.path") + ":" + libraryFolder.getAbsolutePath());
-                            System.loadLibrary("python" + pythonEnvironmentConfig.getPythonVersion() + "m");
+                            System.loadLibrary("python" + pythonEnvironmentConfig.getPythonVersion());
                             System.loadLibrary(DELFT_NATIVE_LIB_NAME);
                         } else if (SystemUtils.IS_OS_LINUX) {
                             System.loadLibrary(DELFT_NATIVE_LIB_NAME);

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -32,7 +32,7 @@ public DeLFTModel(GrobidModel model, String architecture) {
         try {
             LOGGER.info("Loading DeLFT model for " + model.getModelName() + " with architecture " + architecture + "...");            
             JEPThreadPool.getInstance().run(new InitModel(this.modelName, GrobidProperties.getInstance().getModelPath(), architecture));
-        } catch(InterruptedException e) {
+        } catch(InterruptedException | RuntimeException e) {
             LOGGER.error("DeLFT model " + this.modelName + " initialization failed", e);
         }
     }

File: grobid-core/src/main/java/org/grobid/core/jni/JEPThreadPool.java
Patch:
@@ -119,6 +119,9 @@ private Jep createJEPInstance() {
         } catch(GrobidResourceException e) {
             LOGGER.error("DeLFT installation path invalid, JEP initialization failed", e);
             throw new RuntimeException("DeLFT installation path invalid, JEP initialization failed", e);
+        } catch (UnsatisfiedLinkError e) {
+            LOGGER.error("The JEP or DeLFT environment is not correctly installed. ", e);
+            throw new RuntimeException("Python/DeLFT/Jep environment not correctly installed. ", e);
         } finally {
             if (!success && (jep != null)) {
                 try {

File: grobid-core/src/main/java/org/grobid/core/utilities/LayoutTokensUtil.java
Patch:
@@ -179,8 +179,8 @@ public static List<LayoutToken> dehyphenize(List<LayoutToken> tokens) {
 
         for (int i = 0; i < tokens.size(); i++) {
             LayoutToken currentToken = tokens.get(i);
-            //the current token is dash checking what's around
-            if (currentToken.getText().equals("-")) {
+            //the current token is dash (and is neither subscript nor superscript) checking what's around
+            if (currentToken.getText().equals("-") && !(currentToken.isSubscript() || currentToken.isSuperscript())) {
                 if (doesRequireDehypenisation(tokens, i)) {
                     //Cleanup eventual additional spaces before the hypen that have been already written to the output
                     int z = output.size() - 1;

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -297,7 +297,7 @@ public static void train(String modelName, File trainingData, File outputModel,
             LOGGER.info("Train DeLFT model " + modelName + "...");
             List<String> command = new ArrayList<>();
             List<String> subcommands = Arrays.asList("python3", 
-                "grobidTagger.py", 
+                "delft/applications/grobidTagger.py", 
                 modelName,
                 "train",
                 "--input", trainingData.getAbsolutePath(),

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1676,7 +1676,6 @@ public List<Node> markReferencesTEILuceneBased(List<LayoutToken> refTokens,
             // TBD: check other constraints and consistency issues
         }
 
-        //System.out.println("callout text: " + text);
         List<Node> nodes = new ArrayList<>();
         List<ReferenceMarkerMatcher.MatchResult> matchResults = markerMatcher.match(refTokens);
         if (matchResults != null) {

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/WorkDeserializer.java
Patch:
@@ -212,7 +212,7 @@ protected BiblioItem deserializeOneItem(JsonNode item) {
 						}
 						
 						if (day != null) {
-							date.setDayString(month);
+							date.setDayString(day);
 							int dayInt = -1;
 							try {
 								dayInt = Integer.parseInt(day);

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/WorkDeserializer.java
Patch:
@@ -212,7 +212,7 @@ protected BiblioItem deserializeOneItem(JsonNode item) {
 						}
 						
 						if (day != null) {
-							date.setDayString(month);
+							date.setDayString(day);
 							int dayInt = -1;
 							try {
 								dayInt = Integer.parseInt(day);

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessFiles.java
Patch:
@@ -109,7 +109,7 @@ public Response processStatelessHeaderDocument(
             } else if (expectedResponseType == ExpectedResponseType.BIBTEX) {
                 response = Response.status(Response.Status.OK)
                     .entity(result.toBibTeX("-1"))
-                    .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML + "; charset=UTF-8")
+                    .header(HttpHeaders.CONTENT_TYPE, BibTexMediaType.MEDIA_TYPE + "; charset=UTF-8")
                     .build();
             } else {
                 response = Response.status(Response.Status.OK)

File: grobid-core/src/main/java/org/grobid/core/features/FeatureFactory.java
Patch:
@@ -190,7 +190,7 @@ public boolean test_char(String tok, char c) {
     /**
      * Test for the current string contains at least one digit
      */
-    public static boolean test_digit(String tok) {
+    public boolean test_digit(String tok) {
         if (tok == null)
             return false;
         if (tok.length() == 0)

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefClient.java
Patch:
@@ -111,7 +111,7 @@ public <T extends Object> void pushRequest(CrossrefRequest<T> request, CrossrefR
 			if (localFutures == null)
 				localFutures = new ArrayList<Future<?>>();
 			localFutures.add(f);
-			this.futures.put(new Long(threadId), localFutures);
+			this.futures.put(threadId, localFutures);
 			logger.debug("add request to thread " + threadId +
 					"active threads count is now " + ((ThreadPoolExecutor) executorService).getActiveCount()
 			);

File: grobid-core/src/test/java/org/grobid/core/test/TestDate.java
Patch:
@@ -86,7 +86,7 @@ public void testDateParser_inputWithSpaces() throws Exception {
 
         assertThat(date.getDayString(), is("19"));
         assertThat(date.getMonthString(), is("November"));
-        assertThat(date.getYearString(), is("1 999"));
+        assertThat(date.getYearString(), is("1999"));
 
         assertThat(date.getDay(), is(19));
         assertThat(date.getMonth(), is(11));

File: grobid-core/src/main/java/org/grobid/core/features/FeatureFactory.java
Patch:
@@ -356,12 +356,12 @@ public int logScaling(double pos, double total, int nbBins) {
     }
 
     /**
-     * Transform a text in a text pattern where punctuations are ignored, number shadowed and
+     * Transform a text in a text pattern where punctuations are ignored and
      * remaining text in lowercase
      */
     public String getPattern(String text) {
-        String pattern = text.replaceAll("[^a-zA-Z ]", "").toLowerCase();
-        pattern = pattern.replaceAll("[0-9]", "X");
+        String pattern = text.replaceAll("[^a-zA-Z]", "").toLowerCase();
+        //pattern = pattern.replaceAll("[0-9]", "X");
         return pattern;
     }
 }
\ No newline at end of file

File: grobid-core/src/main/java/org/grobid/core/features/FeatureFactory.java
Patch:
@@ -360,7 +360,7 @@ public int logScaling(double pos, double total, int nbBins) {
      * remaining text in lowercase
      */
     public String getPattern(String text) {
-        String pattern = text.replaceAll("[^a-zA-Z ]", "").toLowerCase();
+        String pattern = text.replaceAll("[^a-zA-Z 0-9]", "").toLowerCase();
         pattern = pattern.replaceAll("[0-9]", "X");
         return pattern;
     }

File: grobid-core/src/test/java/org/grobid/core/engines/DateParserTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.grobid.core.lexicon.Lexicon;
 import org.grobid.core.utilities.GrobidTestUtils;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.easymock.PowerMock;
@@ -31,6 +30,8 @@ public class DateParserTest {
 
     private DateParser target;
     
+    
+    
     @Before
     public void setUp() throws Exception {
         PowerMock.mockStatic(Lexicon.class);

File: grobid-core/src/test/java/org/grobid/core/test/TestDate.java
Patch:
@@ -86,7 +86,7 @@ public void testDateParser_inputWithSpaces() throws Exception {
 
         assertThat(date.getDayString(), is("19"));
         assertThat(date.getMonthString(), is("November"));
-        assertThat(date.getYearString(), is("1 999"));
+        assertThat(date.getYearString(), is("1999"));
 
         assertThat(date.getDay(), is(19));
         assertThat(date.getMonth(), is(11));

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -1878,7 +1878,7 @@ public String toBibTeX() {
     /**
      * Export to BibTeX format
      *
-     * @param id the BibTeX ke to use.
+     * @param id the BibTeX key to use.
      */
     public String toBibTeX(String id) {
         return toBibTeX(id, new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder().includeRawCitations(false).build());
@@ -1887,7 +1887,7 @@ public String toBibTeX(String id) {
     /**
      * Export to BibTeX format
      *
-     * @param id                  the BibTeX ke to use
+     * @param id the BibTeX key to use
      */
     public String toBibTeX(String id, GrobidAnalysisConfig config) {
         String type;

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -597,9 +597,9 @@ else if (nbAuthorType > (bibDataSets.size() / 2))
                 if (localImages != null) {
                 	for(GraphicObject localImage : localImages) {
                 		if (localImage.getType() == GraphicObjectType.BITMAP)
-                			graphicVector = true;
-                		if (localImage.getType() == GraphicObjectType.VECTOR)
                 			graphicBitmap = true;
+                		if (localImage.getType() == GraphicObjectType.VECTOR || localImage.getType() == GraphicObjectType.VECTOR_BOX)
+                			graphicVector = true;
                 	}
                 }
 

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -352,7 +352,7 @@ private String getFeatureVectorsAsString(Document doc, Map<String, Integer> patt
                     for(GraphicObject localImage : localImages) {
                         if (localImage.getType() == GraphicObjectType.BITMAP)
                             graphicBitmap = true;
-                        if (localImage.getType() == GraphicObjectType.VECTOR)
+                        if (localImage.getType() == GraphicObjectType.VECTOR || localImage.getType() == GraphicObjectType.VECTOR_BOX)
                             graphicVector = true;
                     }
                 }

File: grobid-core/src/main/java/org/grobid/core/layout/GraphicObject.java
Patch:
@@ -54,9 +54,9 @@ public String getURI() {
         if (ind != -1) {
             int ind2 = filePath.substring(0, ind-1).lastIndexOf("/");
             if (ind2 != -1)
-                return filePath.substring(0, ind2);
+                return filePath.substring(ind2+1, filePath.length());
         }
-//        return filePath;
+
         return new File(filePath).getName();
     }
 

File: grobid-core/src/main/java/org/grobid/core/visualization/AnnotationUtil.java
Patch:
@@ -21,6 +21,7 @@
 /**
  * Utilities for annotating PDF
  */
+
 public class AnnotationUtil {
     private static final Logger LOGGER = LoggerFactory.getLogger(AnnotationUtil.class);
 

File: grobid-core/src/test/java/org/grobid/core/engines/SegmentationTest.java
Patch:
@@ -47,7 +47,7 @@ public void testGetAllLinesFeatures_SimpleDocument_shouldWork() throws Exception
 
         assertThat(splittedOutput.length, is(25));
         assertThat(splittedOutput[0], startsWith("Title"));
-        assertThat(splittedOutput[0], is("Title Title title T Ti Tit Titl BLOCKSTART PAGESTART NEWFONT HIGHERFONT 1 0 INITCAP NODIGIT 0 0 1 0 0 0 0 0 12 12 no 0 10 0 0 0 0 1"));
+        assertThat(splittedOutput[0], is("Title Title title T Ti Tit Titl BLOCKSTART PAGESTART NEWFONT HIGHERFONT 1 0 INITCAP NODIGIT 0 0 1 0 0 0 0 0 12 12 no 0 10 0 1 0 0 1"));
 		
 		doc.close(true, true, true);
     }
@@ -65,7 +65,7 @@ public void testPrepareDocument_SimpleDocument_shouldWork() throws Exception {
         assertThat(output.getPages().size(), is(1));
 //        assertThat(output.getBody(), notNullValue());
         assertThat(output.getBlocks().size(), is(3));
-        assertThat(output.getTokenizations().size(), is(344));
+        assertThat(output.getTokenizations().size(), is(345));
 		
 		doc.close(true, true, true);
     }

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -1878,7 +1878,7 @@ public String toBibTeX() {
     /**
      * Export to BibTeX format
      *
-     * @param id the BibTeX ke to use.
+     * @param id the BibTeX key to use.
      */
     public String toBibTeX(String id) {
         return toBibTeX(id, new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder().includeRawCitations(false).build());
@@ -1887,7 +1887,7 @@ public String toBibTeX(String id) {
     /**
      * Export to BibTeX format
      *
-     * @param id                  the BibTeX ke to use
+     * @param id the BibTeX key to use
      */
     public String toBibTeX(String id, GrobidAnalysisConfig config) {
         String type;

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -83,7 +83,7 @@ private String getPdfToXmlCommand(boolean withImage, boolean withAnnotations, bo
         pdfToXml.append(
                 GrobidProperties.isContextExecutionServer() ? File.separator + "pdfalto_server" : File.separator + "pdfalto");
 
-        pdfToXml.append(" -noImageInline -fullFontName -noLineNumbers");
+        pdfToXml.append(" -fullFontName -noLineNumbers");
 
         if (!withImage) {
             pdfToXml.append(" -noImage ");
@@ -151,7 +151,6 @@ public File pdf2xml(Integer timeout, boolean force, int startPage,
                             GrobidProperties.getPdfToXMLMemoryLimitMb() * 1024 + " && " + pdftoxml0 + " '" + pdfPath + "' " + tmpPathXML);
                 }
                 LOGGER.debug("Executing command: " + cmd);
-
                 tmpPathXML = processPdfToXmlThreadMode(timeout, pdfPath, tmpPathXML, cmd);
             }
 

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -600,9 +600,9 @@ else if (nbAuthorType > (bibDataSets.size() / 2))
                 if (localImages != null) {
                 	for(GraphicObject localImage : localImages) {
                 		if (localImage.getType() == GraphicObjectType.BITMAP)
-                			graphicVector = true;
-                		if (localImage.getType() == GraphicObjectType.VECTOR)
                 			graphicBitmap = true;
+                		if (localImage.getType() == GraphicObjectType.VECTOR || localImage.getType() == GraphicObjectType.VECTOR_BOX)
+                			graphicVector = true;
                 	}
                 }
 

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -353,7 +353,7 @@ private String getFeatureVectorsAsString(Document doc, Map<String, Integer> patt
                     for(GraphicObject localImage : localImages) {
                         if (localImage.getType() == GraphicObjectType.BITMAP)
                             graphicBitmap = true;
-                        if (localImage.getType() == GraphicObjectType.VECTOR)
+                        if (localImage.getType() == GraphicObjectType.VECTOR || localImage.getType() == GraphicObjectType.VECTOR_BOX)
                             graphicVector = true;
                     }
                 }

File: grobid-core/src/main/java/org/grobid/core/layout/GraphicObject.java
Patch:
@@ -55,9 +55,9 @@ public String getURI() {
         if (ind != -1) {
             int ind2 = filePath.substring(0, ind-1).lastIndexOf("/");
             if (ind2 != -1)
-                return filePath.substring(0, ind2);
+                return filePath.substring(ind2+1, filePath.length());
         }
-//        return filePath;
+
         return new File(filePath).getName();
     }
 

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.SortedSet;
+import java.util.Collections;
 
 import static org.grobid.core.document.xml.XmlBuilderUtils.teiElement;
 import static org.grobid.core.document.xml.XmlBuilderUtils.addXmlId;
@@ -311,9 +312,10 @@ public List<BoundingBox> getCoordinates() {
             BoundingBox oneBox = BoundingBoxCalculator.calculateOneBox(layoutTokens, true);
             List<BoundingBox> mergedBox = VectorGraphicBoxCalculator.mergeBoxes(theBoxes);
             result.addAll(mergedBox);
-            return result;
         }
 
+        Collections.sort(result);
+
         return result;
     }
 

File: grobid-core/src/test/java/org/grobid/core/engines/SegmentationTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetAllLinesFeatures_SimpleDocument_shouldWork() throws Exception
 
         assertThat(splittedOutput.length, is(25));
         assertThat(splittedOutput[0], startsWith("Title"));
-        assertThat(splittedOutput[0], is("Title Title title T Ti Tit Titl BLOCKSTART PAGESTART NEWFONT HIGHERFONT 1 0 INITCAP NODIGIT 0 0 1 0 0 0 0 0 12 12 no 0 10 0 0 0 0 1"));
+        assertThat(splittedOutput[0], is("Title Title title T Ti Tit Titl BLOCKSTART PAGESTART NEWFONT HIGHERFONT 1 0 INITCAP NODIGIT 0 0 1 0 0 0 0 0 12 12 no 0 10 0 1 0 0 1"));
 		
 		doc.close(true, true, true);
     }
@@ -68,7 +68,7 @@ public void testPrepareDocument_SimpleDocument_shouldWork() throws Exception {
         assertThat(output.getPages().size(), is(1));
 //        assertThat(output.getBody(), notNullValue());
         assertThat(output.getBlocks().size(), is(3));
-        assertThat(output.getTokenizations().size(), is(344));
+        assertThat(output.getTokenizations().size(), is(345));
 		
 		doc.close(true, true, true);
     }

File: grobid-core/src/main/java/org/grobid/core/layout/GraphicObject.java
Patch:
@@ -55,7 +55,7 @@ public String getURI() {
         if (ind != -1) {
             int ind2 = filePath.substring(0, ind-1).lastIndexOf("/");
             if (ind2 != -1)
-                return filePath.substring(ind2, filePath.length());
+                return filePath.substring(ind2+1, filePath.length());
         }
 
         return new File(filePath).getName();

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -15,7 +15,7 @@
  * @author Patrice Lopez
  */
 public enum GrobidModels implements GrobidModel {
-    AFFIILIATON_ADDRESS("affiliation-address"),
+    AFFILIATION_ADDRESS("affiliation-address"),
     SEGMENTATION("segmentation"),
     CITATION("citation"),
     REFERENCE_SEGMENTER("reference-segmenter"),

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -23,7 +23,7 @@ public class AffiliationAddressParser extends AbstractParser {
     public Lexicon lexicon = Lexicon.getInstance();
 
     public AffiliationAddressParser() {
-        super(GrobidModels.AFFIILIATON_ADDRESS);
+        super(GrobidModels.AFFILIATION_ADDRESS);
     }
 
     public ArrayList<Affiliation> processing(String input) {

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -577,7 +577,7 @@ public void processPDFAnnotation(final GrobidMainArgs pGbdArgs) throws Exception
                             .generateTeiCoordinates(elementWithCoords)
                             .build();
 
-                    Document teiDoc = getEngine().fullTextToTEIDoc(currPDF, config);
+                    Document teiDoc = getEngine().fullTextToTEIDoc(currPDF, null, config);
                     document = PDDocument.load(currPDF);
                     //If no pages, skip the document
                     if (document.getNumberOfPages() > 0) {

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -109,7 +109,9 @@ public static GrobidProperties getInstance() {
      * If no one is set, then it creates one. {@inheritDoc #GrobidProperties()}
      */
     public static GrobidProperties getInstance(GrobidHomeFinder grobidHomeFinder) {
-        GROBID_HOME_PATH = grobidHomeFinder.findGrobidHomeOrFail();
+        synchronized (GrobidProperties.class) {
+            GROBID_HOME_PATH = grobidHomeFinder.findGrobidHomeOrFail();
+        }
         return getInstance();
     }
 

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequestTask.java
Patch:
@@ -21,9 +21,7 @@ public CrossrefRequestTask(CrossrefClient client, CrossrefRequest<T> request) {
 	
 	@Override
 	public void run() {
-		try {	
-			client.checkLimits();
-			
+		try {
 			CrossrefClient.printLog(request, ".. executing");
 			
 			request.addListener(this);

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -165,7 +165,7 @@ public boolean isAuthorCitationStyle(String text) {
     }*/
 
     // number matching for number alone or in combination with author for cases "Naze et al. [5]"
-    public static boolean isNumberedCitationReference(String t) {
+    public boolean isNumberedCitationReference(String t) {
         return NUMBERED_CITATION_PATTERN.matcher(t.trim()).matches() || 
                  ( NUMBERED_CITATION_PATTERN.matcher(t.trim()).find() && AUTHOR_NAME_PATTERN.matcher(t.trim()).find() );
     }

File: grobid-core/src/test/java/org/grobid/core/GrobidModelsTest.java
Patch:
@@ -21,7 +21,7 @@ public static void setInitialContext() throws Exception {
     @Test
     public void testGrobidModelsEnum_StandardModel_affiliation() throws Exception {
 
-        GrobidModel model = GrobidModels.AFFIILIATON_ADDRESS;
+        GrobidModel model = GrobidModels.AFFILIATION_ADDRESS;
 
         assertThat(model.getFolderName(), is("affiliation-address"));
         assertThat(model.getModelName(), is("affiliation-address"));

File: grobid-core/src/test/java/org/grobid/core/engines/EngineTest.java
Patch:
@@ -695,15 +695,15 @@ public void testPDF() throws Exception {
 
     }
 
-    @Test
+    /*@Test
     public void testEmailPDF() throws Exception {
         Engine engine = GrobidFactory.getInstance().getEngine();
         BiblioItem resHeader = new BiblioItem();
         engine.getParsers().getHeaderParser().processing(new File("/Work/temp/1.pdf"), resHeader, GrobidAnalysisConfig.defaultInstance());
         System.out.println(resHeader);
 //        System.out.println(engine.fullTextToTEI("/tmp/2.pdf", false, false));
 
-    }
+    }*/
 
 
     /*@Test

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -26,7 +26,7 @@
 public class AffiliationAddressTrainer extends AbstractTrainer {
 
     public AffiliationAddressTrainer() {
-        super(GrobidModels.AFFIILIATON_ADDRESS);
+        super(GrobidModels.AFFILIATION_ADDRESS);
     }
 
 	/**

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/Stats.java
Patch:
@@ -352,7 +352,7 @@ public String getMarkDownReport() {
         computeMetrics();
 
         StringBuilder report = new StringBuilder();
-        report.append("| label            |  precision |   recall  |     f1     | support |\n");
+        report.append("\n| label            |  precision |   recall  |     f1     | support |\n");
         report.append("|---               |---         |---        |---         |---      |\n");
 
         long supportSum = 0;

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -1394,7 +1394,7 @@ else if (consolidate == 2)
                 if (consolidate == 1)
                     BiblioItem.correct(resHeader, bib);
                 else if (consolidate == 2)
-                    BiblioItem.injectDOI(resHeader, bib);
+                    BiblioItem.injectIdentifiers(resHeader, bib);
             }
         } catch (Exception e) {
             throw new GrobidException("An exception occured while running bibliographical data consolidation.", e);

File: grobid-core/src/main/java/org/grobid/core/utilities/Consolidation.java
Patch:
@@ -293,7 +293,7 @@ public void onError(int status, String message, Exception exception) {
                 }
             });
         } catch(Exception e) {
-            LOGGER.info("Consolidation error - ", e);
+            LOGGER.info("Consolidation error - ",e);
         }
 
         client.finish(threadId);

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -186,7 +186,8 @@ public Document processing(DocumentSource documentSource,
 
             // structure the abstract using the fulltext model
             if (isNotBlank(resHeader.getAbstract())) {
-                List<LayoutToken> abstractTokens = resHeader.getLayoutTokens(TaggingLabels.HEADER_ABSTRACT);
+                //List<LayoutToken> abstractTokens = resHeader.getLayoutTokens(TaggingLabels.HEADER_ABSTRACT);
+                List<LayoutToken> abstractTokens = resHeader.getAbstractTokensWorkingCopy();
                 if (CollectionUtils.isNotEmpty(abstractTokens)) {
                     abstractTokens = BiblioItem.cleanAbstractLayoutTokens(abstractTokens);
                     Pair<String, List<LayoutToken>> abstractProcessed = processShort(abstractTokens, doc);

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -894,6 +894,8 @@ else if (biblio.getPublicationDate() == null)
                     //biblio.setAbstract(biblio.getAbstract() + " " + clusterContent);
                 } else {
                     biblio.setAbstract(clusterContent);
+                    List<LayoutToken> tokens = cluster.concatTokens();
+                    biblio.collectAbstractTokens(tokens);
                 }
             } else if (clusterLabel.equals(TaggingLabels.HEADER_REFERENCE)) {
                 //if (biblio.getReference() != null) {

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -21,7 +21,6 @@
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.exceptions.GrobidExceptionStatus;
 import org.grobid.core.features.FeatureFactory;
-import org.grobid.core.features.FeaturesVectorHeader;
 import org.grobid.core.layout.Block;
 import org.grobid.core.layout.BoundingBox;
 import org.grobid.core.layout.Cluster;
@@ -71,7 +70,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.SortedSet;
-import java.util.TreeSet;
 import java.util.regex.Matcher;
 import java.util.stream.Collectors;
 
@@ -829,7 +827,7 @@ public static List<LayoutToken> getTokenizationParts(SortedSet<DocumentPiece> do
         if (documentParts == null)
             return null;
 
-        List<LayoutToken> tokenizationParts = new ArrayList<LayoutToken>();
+        List<LayoutToken> tokenizationParts = new ArrayList<>();
         for (DocumentPiece docPiece : documentParts) {
             DocumentPointer dp1 = docPiece.getLeft();
             DocumentPointer dp2 = docPiece.getRight();

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -186,8 +186,7 @@ public Document processing(DocumentSource documentSource,
 
             // structure the abstract using the fulltext model
             if (isNotBlank(resHeader.getAbstract())) {
-                //List<LayoutToken> abstractTokens = resHeader.getLayoutTokens(TaggingLabels.HEADER_ABSTRACT);
-                List<LayoutToken> abstractTokens = resHeader.getAbstractTokens();
+                List<LayoutToken> abstractTokens = resHeader.getLayoutTokens(TaggingLabels.HEADER_ABSTRACT);
                 if (CollectionUtils.isNotEmpty(abstractTokens)) {
                     abstractTokens = BiblioItem.cleanAbstractLayoutTokens(abstractTokens);
                     Pair<String, List<LayoutToken>> abstractProcessed = processShort(abstractTokens, doc);

File: grobid-core/src/main/java/org/grobid/core/sax/PDFALTOOutlineSaxHandler.java
Patch:
@@ -32,8 +32,7 @@ public class PDFALTOOutlineSaxHandler extends DefaultHandler {
 	private int currentParentId = -1;
 
 	private Map<Integer,DocumentNode> nodes = null;
-	private Map<Integer, Integer> labels = new HashMap<>();
-	
+
 	public PDFALTOOutlineSaxHandler(Document doc) {
 		this.doc = doc;
 	}
@@ -55,8 +54,8 @@ public void endElement(java.lang.String uri, java.lang.String localName,
 
 		if (qName.equals("STRING")) {
 		    currentNode.setLabel(getText());
-            currentNode.setBoundingBox(box);
 		} else if (qName.equals("ITEM")) {
+            currentNode.setBoundingBox(box);
             box = null;
             label = null;
 		} else if (qName.equals("TOCITEMLIST")) {

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -295,12 +295,14 @@ public void run() {
     public static void train(String modelName, File trainingData, File outputModel, String architecture) {
         try {
             LOGGER.info("Train DeLFT model " + modelName + "...");
-            List<String> command = Arrays.asList("python3", 
+            List<String> command = new ArrayList<>();
+            List<String> subcommands = Arrays.asList("python3", 
                 "grobidTagger.py", 
                 modelName,
                 "train",
                 "--input", trainingData.getAbsolutePath(),
                 "--output", GrobidProperties.getInstance().getModelPath().getAbsolutePath());
+            command.addAll(subcommands);
             if (architecture != null) {
                 command.add("--architecture");
                 command.add(architecture);

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidConfig.java
Patch:
@@ -54,6 +54,7 @@ static class CrossrefParameters {
     }
 
     static class HostParameters {
+        public String type;
         public String host;
         public int port;
     }

File: grobid-core/src/main/java/org/grobid/core/utilities/glutton/GluttonRequest.java
Patch:
@@ -114,7 +114,9 @@ public void execute() {
                     url += ":" + portInt;
                 }
             }
-            URIBuilder uriBuilder = new URIBuilder("http://" + url + BASE_PATH);
+            String protocol = GrobidProperties.getInstance().getGluttonType();
+
+            URIBuilder uriBuilder = new URIBuilder(protocol + "://" + url + BASE_PATH);
             
             //String path = BASE_PATH;
             //uriBuilder.setPath(path);

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -19,7 +19,7 @@ public enum GrobidModels implements GrobidModel {
     // models are declared with a enumerated unique name associated to a **folder name** for the model
     // the folder name is where we will find the model implementation and its resources under grobid-home
 
-    AFFIILIATON_ADDRESS("affiliation-address"),
+    AFFILIATION_ADDRESS("affiliation-address"),
     SEGMENTATION("segmentation"),
     CITATION("citation"),
     REFERENCE_SEGMENTER("reference-segmenter"),

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -23,7 +23,7 @@ public class AffiliationAddressParser extends AbstractParser {
     public Lexicon lexicon = Lexicon.getInstance();
 
     public AffiliationAddressParser() {
-        super(GrobidModels.AFFIILIATON_ADDRESS);
+        super(GrobidModels.AFFILIATION_ADDRESS);
     }
 
     public ArrayList<Affiliation> processing(String input) {

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -89,7 +89,9 @@ public static GrobidProperties getInstance() {
      * If no one is set, then it creates one.
      */
     public static GrobidProperties getInstance(GrobidHomeFinder grobidHomeFinder) {
-        grobidHome = grobidHomeFinder.findGrobidHomeOrFail();
+        synchronized (GrobidProperties.class) {
+            grobidHome = grobidHomeFinder.findGrobidHomeOrFail();
+        }
         return getInstance();
     }
 

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequestTask.java
Patch:
@@ -21,9 +21,7 @@ public CrossrefRequestTask(CrossrefClient client, CrossrefRequest<T> request) {
 	
 	@Override
 	public void run() {
-		try {	
-			client.checkLimits();
-			
+		try {
 			CrossrefClient.printLog(request, ".. executing");
 			
 			request.addListener(this);

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -165,7 +165,7 @@ public boolean isAuthorCitationStyle(String text) {
     }*/
 
     // number matching for number alone or in combination with author for cases "Naze et al. [5]"
-    public static boolean isNumberedCitationReference(String t) {
+    public boolean isNumberedCitationReference(String t) {
         return NUMBERED_CITATION_PATTERN.matcher(t.trim()).matches() || 
                  ( NUMBERED_CITATION_PATTERN.matcher(t.trim()).find() && AUTHOR_NAME_PATTERN.matcher(t.trim()).find() );
     }

File: grobid-core/src/test/java/org/grobid/core/GrobidModelsTest.java
Patch:
@@ -21,7 +21,7 @@ public static void setInitialContext() throws Exception {
     @Test
     public void testGrobidModelsEnum_StandardModel_affiliation() throws Exception {
 
-        GrobidModel model = GrobidModels.AFFIILIATON_ADDRESS;
+        GrobidModel model = GrobidModels.AFFILIATION_ADDRESS;
 
         assertThat(model.getFolderName(), is("affiliation-address"));
         assertThat(model.getModelName(), is("affiliation-address"));

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -26,7 +26,7 @@
 public class AffiliationAddressTrainer extends AbstractTrainer {
 
     public AffiliationAddressTrainer() {
-        super(GrobidModels.AFFIILIATON_ADDRESS);
+        super(GrobidModels.AFFILIATION_ADDRESS);
 
         /*epsilon = GrobidProperties.getEpsilon(model);
 		window = GrobidProperties.getWindow(model); 

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/Stats.java
Patch:
@@ -352,7 +352,7 @@ public String getMarkDownReport() {
         computeMetrics();
 
         StringBuilder report = new StringBuilder();
-        report.append("| label            |  precision |   recall  |     f1     | support |\n");
+        report.append("\n| label            |  precision |   recall  |     f1     | support |\n");
         report.append("|---               |---         |---        |---         |---      |\n");
 
         long supportSum = 0;

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -109,7 +109,9 @@ public static GrobidProperties getInstance() {
      * If no one is set, then it creates one. {@inheritDoc #GrobidProperties()}
      */
     public static GrobidProperties getInstance(GrobidHomeFinder grobidHomeFinder) {
-        GROBID_HOME_PATH = grobidHomeFinder.findGrobidHomeOrFail();
+        synchronized (GrobidProperties.class) {
+            GROBID_HOME_PATH = grobidHomeFinder.findGrobidHomeOrFail();
+        }
         return getInstance();
     }
 

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -15,7 +15,7 @@
  * @author Patrice Lopez
  */
 public enum GrobidModels implements GrobidModel {
-    AFFIILIATON_ADDRESS("affiliation-address"),
+    AFFILIATION_ADDRESS("affiliation-address"),
     SEGMENTATION("segmentation"),
     CITATION("citation"),
     REFERENCE_SEGMENTER("reference-segmenter"),

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -23,7 +23,7 @@ public class AffiliationAddressParser extends AbstractParser {
     public Lexicon lexicon = Lexicon.getInstance();
 
     public AffiliationAddressParser() {
-        super(GrobidModels.AFFIILIATON_ADDRESS);
+        super(GrobidModels.AFFILIATION_ADDRESS);
     }
 
     public ArrayList<Affiliation> processing(String input) {

File: grobid-core/src/test/java/org/grobid/core/GrobidModelsTest.java
Patch:
@@ -21,7 +21,7 @@ public static void setInitialContext() throws Exception {
     @Test
     public void testGrobidModelsEnum_StandardModel_affiliation() throws Exception {
 
-        GrobidModel model = GrobidModels.AFFIILIATON_ADDRESS;
+        GrobidModel model = GrobidModels.AFFILIATION_ADDRESS;
 
         assertThat(model.getFolderName(), is("affiliation-address"));
         assertThat(model.getModelName(), is("affiliation-address"));

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -26,7 +26,7 @@
 public class AffiliationAddressTrainer extends AbstractTrainer {
 
     public AffiliationAddressTrainer() {
-        super(GrobidModels.AFFIILIATON_ADDRESS);
+        super(GrobidModels.AFFILIATION_ADDRESS);
     }
 
 	/**

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequestTask.java
Patch:
@@ -21,9 +21,7 @@ public CrossrefRequestTask(CrossrefClient client, CrossrefRequest<T> request) {
 	
 	@Override
 	public void run() {
-		try {	
-			client.checkLimits();
-			
+		try {
 			CrossrefClient.printLog(request, ".. executing");
 			
 			request.addListener(this);

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -4468,6 +4468,8 @@ else if (bibo.getFullAuthors().size() == 1) {
                                     // should we also check the country ? affiliation?
                                     if (StringUtils.isNotBlank(auto.getMiddleName()) && (StringUtils.isBlank(aut.getMiddleName())))
                                         aut.setMiddleName(auto.getMiddleName());
+                                    if (StringUtils.isNotBlank(auto.getORCID()) && (StringUtils.isBlank(aut.getORCID())))
+                                        aut.setORCID(auto.getORCID());
                                 }
                             }
                         }

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -338,7 +338,7 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
             }
 
             if (desc != null && config.isWithSentenceSegmentation()) {
-                formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config);
+                formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config, doc.getLanguage());
 
                 // we need a sentence segmentation of the figure caption, for that we need to introduce 
                 // a <div>, then a <p>

File: grobid-core/src/main/java/org/grobid/core/data/Table.java
Patch:
@@ -135,7 +135,7 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     if (desc != null && config.isWithSentenceSegmentation()) {
-                        formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config);
+                        formatter.segmentIntoSentences(desc, this.captionLayoutTokens, config, doc.getLanguage());
 
                         // we need a sentence segmentation of the table caption, for that we need to introduce 
                         // a <div>, then a <p>
@@ -202,7 +202,7 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     if (noteNode != null && config.isWithSentenceSegmentation()) {
-                        formatter.segmentIntoSentences(noteNode, this.noteLayoutTokens, config);
+                        formatter.segmentIntoSentences(noteNode, this.noteLayoutTokens, config, doc.getLanguage());
 
                         // we need a sentence segmentation of the figure caption, for that we need to introduce 
                         // a <p>

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -170,7 +170,7 @@ public BiblioItem processRawReference(String reference, int consolidate) {
         if (reference != null) {
             reference = reference.replaceAll("\\\\", "");
         }
-        return parsers.getCitationParser().processing(reference, consolidate);
+        return parsers.getCitationParser().processingString(reference, consolidate);
     }
 
     /**
@@ -188,7 +188,7 @@ public List<BiblioItem> processRawReferences(List<String> references, int consol
         if (references == null || references.size() == 0)
             return finalResults;
         for (String reference : references) {
-            BiblioItem bib = parsers.getCitationParser().processing(reference, 0);
+            BiblioItem bib = parsers.getCitationParser().processingString(reference, 0);
             //if ((bib != null) && !bib.rejectAsReference()) 
             {
                 BibDataSet bds = new BibDataSet();

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -208,7 +208,7 @@ public Document processing(DocumentSource documentSource,
                 processingReferenceSection(doc, parsers.getReferenceSegmenterParser(), 0);
 
             // consolidate the set
-            if (config.getConsolidateCitations() != 0) {
+            if (config.getConsolidateCitations() != 0 && resCitations != null) {
                 Consolidation consolidator = Consolidation.getInstance();
                 if (consolidator.getCntManager() == null)
                     consolidator.setCntManager(Engine.getCntManager());
@@ -279,7 +279,6 @@ else if (config.getConsolidateCitations() == 2)
 				LOGGER.debug("Fulltext model: The featured body is empty");
 			}
 
-
 			// possible annexes (view as a piece of full text similar to the body)
 			documentBodyParts = doc.getDocumentPart(SegmentationLabels.ANNEX);
             featSeg = getBodyTextFeatured(doc, documentBodyParts);
@@ -1134,7 +1133,7 @@ public Document createTraining(File inputFile,
 
                     for (LabeledReferenceResult ref : references) {
                         if ( (ref.getReferenceText() != null) && (ref.getReferenceText().trim().length() > 0) ) {
-                            BiblioItem bib = parsers.getCitationParser().processing(ref.getReferenceText(), 0);
+                            BiblioItem bib = parsers.getCitationParser().processingString(ref.getReferenceText(), 0);
                             String authorSequence = bib.getAuthors();
                             if ((authorSequence != null) && (authorSequence.trim().length() > 0) ) {
                                 /*List<String> inputs = new ArrayList<String>();

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -288,7 +288,7 @@ public String processingHeaderSection(GrobidAnalysisConfig config, Document doc,
                     // below using the reference strings to improve the metadata extraction, it will have to
                     // be reviewed for something safer as just a straightforward correction
                     /*if (resHeader.getReference() != null) {
-                        BiblioItem refer = parsers.getCitationParser().processing(resHeader.getReference(), 0);
+                        BiblioItem refer = parsers.getCitationParser().processingString(resHeader.getReference(), 0);
                         BiblioItem.correct(resHeader, refer);
                     }*/
                 }

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/WorkDeserializer.java
Patch:
@@ -94,6 +94,9 @@ protected BiblioItem deserializeOneItem(JsonNode item) {
 					}
 					if (authorNode.get("family") != null && !authorNode.get("family").isMissingNode()) {
 						person.setLastName(authorNode.get("family").asText());
+    	   			}
+  					if (authorNode.get("ORCID") != null && !authorNode.get("ORCID").isMissingNode()) {
+						person.setORCID(authorNode.get("ORCID").asText());
     	   			}
     	   			// for cases like JM Smith and for case normalisation
     	   			person.normalizeName();

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1386,7 +1386,7 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
         return buffer;
     }
 
-    private boolean isNewParagraph(TaggingLabel lastClusterLabel, Element curParagraph) {
+    public static boolean isNewParagraph(TaggingLabel lastClusterLabel, Element curParagraph) {
         return (!MARKER_LABELS.contains(lastClusterLabel) && lastClusterLabel != TaggingLabels.FIGURE
                 && lastClusterLabel != TaggingLabels.TABLE) || curParagraph == null;
     }

File: grobid-core/src/test/java/org/grobid/core/document/DocumentTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.grobid.core.document;
 
 import org.grobid.core.utilities.GrobidProperties;
-import org.grobid.core.utilities.GrobidPropertyKeys;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: grobid-core/src/test/java/org/grobid/core/utilities/GrobidHomeFinderTest.java
Patch:
@@ -18,19 +18,18 @@ public class GrobidHomeFinderTest {
     @After
     public void tearDown() throws Exception {
         GrobidProperties.reset();
-        System.clearProperty(GrobidPropertyKeys.PROP_GROBID_HOME);
     }
 
     @Test
     public void testDefault() {
         GrobidProperties.getInstance();
     }
 
-    @Test
+    /*@Test
     public void testViaProp() {
         System.setProperty(GrobidPropertyKeys.PROP_GROBID_HOME, "../grobid-home");
         assertPath(new GrobidHomeFinder(Collections.<String>emptyList()).findGrobidHomeOrFail());
-    }
+    }*/
 
     @Test(expected = GrobidPropertyException.class)
     public void testNoDefaultLocations() {

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -158,7 +158,7 @@ private void dealWithImages(DocumentSource documentSource, Document doc, File as
                 if (files != null) {
                     int nbFiles = 0;
                     for (final File currFile : files) {
-                        if (nbFiles > DocumentSource.PDFTOXML_FILES_AMOUNT_LIMIT)
+                        if (nbFiles > DocumentSource.PDFALTO_FILES_AMOUNT_LIMIT)
                             break;
 
                         String toLowerCaseName = currFile.getName().toLowerCase();

File: grobid-core/src/main/java/org/grobid/core/exceptions/GrobidExceptionStatus.java
Patch:
@@ -11,7 +11,7 @@ public enum GrobidExceptionStatus {
     TIMEOUT,
     TOO_MANY_BLOCKS,
     NO_BLOCKS,
-    PDFTOXML_CONVERSION_FAILURE,
+    PDFALTO_CONVERSION_FAILURE,
     TOO_MANY_TOKENS,
     GENERAL
 }

File: grobid-core/src/test/java/org/grobid/core/GrobidModelsTest.java
Patch:
@@ -46,7 +46,7 @@ public void testGrobidModelsEnum_StandardModel_name() throws Exception {
         assertThat(splittedPath[splittedPath.length - 4], is("grobid-home"));
     }
 
-    @Test
+    //@Test
     public void testGrobidModelsEnum_CustomModel() throws Exception {
         GrobidModel model = GrobidModels.modelFor("myDreamModel");
 

File: grobid-service/src/main/java/org/grobid/service/exceptions/mapper/GrobidStatusToHttpStatusMapper.java
Patch:
@@ -19,7 +19,7 @@ public static Response.Status getStatusCode(GrobidExceptionStatus status) {
                 return Response.Status.CONFLICT;
             case NO_BLOCKS:
                 return Response.Status.BAD_REQUEST;
-            case PDFTOXML_CONVERSION_FAILURE:
+            case PDFALTO_CONVERSION_FAILURE:
                 return Response.Status.INTERNAL_SERVER_ERROR;
             case TOO_MANY_TOKENS:
                 return Response.Status.CONFLICT;

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessString.java
Patch:
@@ -23,7 +23,6 @@
 import org.grobid.service.util.BibTexMediaType;
 import org.grobid.service.util.ExpectedResponseType;
 import org.grobid.service.util.GrobidRestUtils;
-//import org.grobid.service.util.GrobidServiceProperties;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefClient.java
Patch:
@@ -170,7 +170,6 @@ public void finish(long threadId) {
 		}
 	}
 
-
 	@Override
 	public void close() throws IOException {
 		timedSemaphore.shutdown();

File: grobid-service/src/main/java/org/grobid/service/main/GrobidServiceApplication.java
Patch:
@@ -26,7 +26,7 @@
 
 public final class GrobidServiceApplication extends Application<GrobidServiceConfiguration> {
     private static final Logger LOGGER = LoggerFactory.getLogger(GrobidServiceApplication.class);
-    private static final String[] DEFAULT_CONF_LOCATIONS = {"../grobid-home/config/grobid.yaml", "config/config.yaml"};
+    private static final String[] DEFAULT_CONF_LOCATIONS = {"grobid-home/config/grobid.yaml"};
     private static final String RESOURCES = "/api";
 
 
@@ -82,7 +82,7 @@ public void run(GrobidServiceConfiguration configuration, Environment environmen
     // ========== static ==========
     public static void main(String... args) throws Exception {
         if (ArrayUtils.getLength(args) < 2) {
-            LOGGER.warn("Expected 2 arguments: [0]-server, [1]-<path to config.yaml>");
+            //LOGGER.warn("Expected 2 argument: [0]-server, [1]-<path to config yaml file>");
 
             String foundConf = null;
             for (String p : DEFAULT_CONF_LOCATIONS) {

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -208,7 +208,7 @@ public Document processing(DocumentSource documentSource,
                 processingReferenceSection(doc, parsers.getReferenceSegmenterParser(), 0);
 
             // consolidate the set
-            if (config.getConsolidateCitations() != 0) {
+            if (config.getConsolidateCitations() != 0 && resCitations != null) {
                 Consolidation consolidator = Consolidation.getInstance();
                 if (consolidator.getCntManager() == null)
                     consolidator.setCntManager(Engine.getCntManager());

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequest.java
Patch:
@@ -143,7 +143,7 @@ public void execute() {
             
 			// set the authorization token for the Metadata Plus service if available
 			if (GrobidProperties.getCrossrefToken() != null) {
-            	httpget.setHeader("Authorization", 
+            	httpget.setHeader("Crossref-Plus-API-Token", 
             		"Bearer " + GrobidProperties.getCrossrefToken());
 			}
 

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -185,6 +185,9 @@ public String label(String data) {
         } catch(ExecutionException e) {
             LOGGER.error("DeLFT model " + this.modelName + " labelling failed", e);
         }
+        // In some areas, GROBID currently expects tabs as feature separators.
+        // (Same as in WapitiModel.label)
+        result = result.replaceAll(" ", "\t");
         return result;
     }
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1211,7 +1211,7 @@ public StringBuilder toTEITextPiece(StringBuilder buffer,
                 }
 
                 if (config.isGenerateTeiCoordinates("head") ) {
-                    String coords = getCoordsAttribute(BoundingBoxCalculator.calculate(cluster.concatTokens()), true);
+                    String coords = LayoutTokensUtil.getCoordsString(cluster.concatTokens());
                     if (coords != null) {
                         head.addAttribute(new Attribute("coords", coords));
                     }

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -4227,8 +4227,9 @@ public void postProcessPages() {
                                 if (endPage >= 50) {
                                     // we assume no journal articles have more than 49 pages and is expressed as addition, 
                                     // so it's a substitution
-
-                                    lastPage = firstPage.substring(0, firstPage.length() - lastPage.length()) + lastPage;
+                                    int upperBound = firstPage.length() - lastPage.length();
+                                    if (upperBound<firstPage.length() && upperBound > 0)
+                                        lastPage = firstPage.substring(0, upperBound) + lastPage;
                                     pageRange += "--" + lastPage;
                                 } else {
                                     if (endPage < 10) {

File: grobid-trainer/src/main/java/org/grobid/trainer/sax/TEICitationSaxParser.java
Patch:
@@ -128,10 +128,12 @@ public void startElement(String namespaceURI,
                     if (name.equals("level")) {
                         if (value.equals("a")) {
                             currentTag = "<title>";
-                        } else if (value.equals("j") || value.equals("s")) {
+                        } else if (value.equals("j")) {
                             currentTag = "<journal>";
                         } else if (value.equals("m")) {
                             currentTag = "<booktitle>";
+                        } else if (value.equals("s")) {
+                            currentTag = "<series>";
                         }
                     }
                 }

File: grobid-core/src/main/java/org/grobid/core/lang/impl/PragmaticSentenceDetector.java
Patch:
@@ -3,6 +3,7 @@
 import org.jruby.embed.PathType;
 import org.jruby.embed.ScriptingContainer;
 import org.jruby.embed.LocalContextScope;
+import org.jruby.embed.LocalVariableBehavior;
 
 import org.grobid.core.lang.SentenceDetector;
 import org.grobid.core.utilities.OffsetPosition;
@@ -37,7 +38,7 @@ public PragmaticSentenceDetector() {
         loadPaths.add(segmenterLoadPath);
         loadPaths.add(unicodeLoadPath);
 
-        instance = new ScriptingContainer(LocalContextScope.THREADSAFE);
+        instance = new ScriptingContainer(LocalContextScope.CONCURRENT, LocalVariableBehavior.PERSISTENT);
         instance.setClassLoader(instance.getClass().getClassLoader());
         instance.setLoadPaths(loadPaths);
         instance.runScriptlet(PathType.ABSOLUTE, segmenterRbFile);

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1450,7 +1450,7 @@ private void segmentIntoSentences(Element curParagraph, List<LayoutToken> curPar
                     currentSentenceTokens.add(token);
                     pos = 0;
                 }
-                pos = token.getText().length();
+                pos += token.getText().length();
                 if (currentSentenceIndex >= theSentences.size())
                     break;
             }

File: grobid-core/src/main/java/org/grobid/core/document/BasicStructureBuilder.java
Patch:
@@ -11,7 +11,6 @@
 import org.grobid.core.layout.Block;
 import org.grobid.core.layout.Cluster;
 import org.grobid.core.layout.LayoutToken;
-//import org.grobid.core.utilities.Pair;
 import org.grobid.core.utilities.TextUtilities;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -75,7 +74,7 @@ public class BasicStructureBuilder {
      * @param doc a document
      * @return if found numbering
      */
-    public boolean filterLineNumber(Document doc) {
+    /*public boolean filterLineNumber(Document doc) {
         // we first test if we have a line numbering by checking if we have an increasing integer
         // at the begin or the end of each block
         boolean numberBeginLine = false;
@@ -182,7 +181,7 @@ public boolean filterLineNumber(Document doc) {
         }
 
         return foundNumbering;
-    }
+    }*/
 
     /**
      * Cluster the blocks following the font, style and size aspects

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessFiles.java
Patch:
@@ -175,7 +175,7 @@ public Response processFulltextDocument(final InputStream inputStream,
                     .endPage(endPage)
                     .generateTeiIds(generateIDs)
                     .generateTeiCoordinates(teiCoordinates)
-                    .withSentenceSegmentation(true)
+                    .withSentenceSegmentation(segmentSentences)
                     .build();
 
             retVal = engine.fullTextToTEI(originFile, config);

File: grobid-core/src/test/java/org/grobid/core/test/TestHeaderParser.java
Patch:
@@ -71,7 +71,7 @@ public void testHeaderHeader() throws Exception {
 
     }
 
-    @Test
+    /*@Test
     public void testSegmentationHeader() throws Exception {
         getTestResourcePath();
 
@@ -85,5 +85,5 @@ public void testSegmentationHeader() throws Exception {
         assertThat(resHeader.getKeyword(),
                 is("Answer Validation, Recognizing Textual Entailment, Information Synthesis"));
         assertNotNull(resHeader.getFullAuthors());
-    }
+    }*/
 }
\ No newline at end of file

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -4239,7 +4239,7 @@ public static void correct(BiblioItem bib, BiblioItem bibo) {
 
         // authors present in fullAuthors list should be in the existing resources 
         // at least the corresponding author
-        if (bibo.getFullAuthors() != null) {
+        if (!CollectionUtils.isEmpty(bibo.getFullAuthors())) {
             if (CollectionUtils.isEmpty(bib.getFullAuthors()))
                 bib.setFullAuthors(bibo.getFullAuthors());
             else {

File: grobid-core/src/main/java/org/grobid/core/data/Person.java
Patch:
@@ -119,7 +119,7 @@ public List<org.grobid.core.data.Affiliation> getAffiliations() {
 
     public void addAffiliation(org.grobid.core.data.Affiliation f) {
         if (affiliations == null)
-            affiliations = new ArrayList<org.grobid.core.data.Affiliation>();
+            affiliations = new ArrayList<>();
         affiliations.add(f);
     }
 

File: grobid-core/src/main/java/org/grobid/core/engines/tagging/TaggerFactory.java
Patch:
@@ -25,7 +25,7 @@ public class TaggerFactory {
     private TaggerFactory() {}
 
     public static synchronized GenericTagger getTagger(GrobidModel model) {
-        return getTagger(model, GrobidProperties.getGrobidCRFEngine());
+        return getTagger(model, GrobidProperties.getGrobidCRFEngine(model));
     }
 
     public static synchronized GenericTagger getTagger(GrobidModel model, GrobidCRFEngine engine) {

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -42,7 +42,7 @@
 public class BiblioItem {
     protected static final Logger LOGGER = LoggerFactory.getLogger(BiblioItem.class);
 
-    LanguageUtilities languageUtilities = LanguageUtilities.getInstance();
+    private LanguageUtilities languageUtilities = LanguageUtilities.getInstance();
     private AuthorEmailAssigner authorEmailAssigner = new ClassicAuthorEmailAssigner();
     private EmailSanitizer emailSanitizer = new EmailSanitizer();
     private String teiId;

File: grobid-core/src/main/java/org/grobid/core/lang/LanguageDetectorFactory.java
Patch:
@@ -6,5 +6,5 @@
  * Time: 11:03 AM
  */
 public interface LanguageDetectorFactory {
-    public LanguageDetector getInstance();
+    LanguageDetector getInstance();
 }

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -42,7 +42,7 @@
 public class BiblioItem {
     protected static final Logger LOGGER = LoggerFactory.getLogger(BiblioItem.class);
 
-    LanguageUtilities languageUtilities = LanguageUtilities.getInstance();
+    private LanguageUtilities languageUtilities = LanguageUtilities.getInstance();
     private AuthorEmailAssigner authorEmailAssigner = new ClassicAuthorEmailAssigner();
     private EmailSanitizer emailSanitizer = new EmailSanitizer();
     private String teiId;

File: grobid-core/src/main/java/org/grobid/core/lang/LanguageDetectorFactory.java
Patch:
@@ -6,5 +6,5 @@
  * Time: 11:03 AM
  */
 public interface LanguageDetectorFactory {
-    public LanguageDetector getInstance();
+    LanguageDetector getInstance();
 }

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -1798,8 +1798,8 @@ public static String cleanKeywords(String string) {
     /**
      * Keyword field segmentation.
      * 
-     * TBD: create a dedicated model to analyse the keyword field, segmenting them and 
-     * identifying the possible scheme
+     * TBD: create a dedicated model to analyse the keyword field, segmenting them properly and 
+     * identifying the possible schemes
      */
     public static List<Keyword> segmentKeywords(String string) {
         if (string == null)
@@ -1809,7 +1809,7 @@ public static List<Keyword> segmentKeywords(String string) {
 		String type = null;
         if (string.startsWith("Categories and Subject Descriptors")) {
             type = "subject-headers";
-			 string = string.replace("Categories and Subject Descriptors", "").trim();
+			string = string.replace("Categories and Subject Descriptors", "").trim();
         } 
 		else if (string.startsWith("PACS Numbers") || 
 				   string.startsWith("PACS") ) {

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -1022,7 +1022,7 @@ else if (biblio.getPublicationDate() == null)
                     biblio.setVersion(clusterNonDehypenizedContent);
             } else if (clusterLabel.equals(TaggingLabels.HEADER_DOCTYPE)) {
                 if (biblio.getDocumentType() != null && isDifferentContent(biblio.getDocumentType(), clusterContent)) {
-                    biblio.setDocumentType(biblio.getDocumentType() + clusterContent);
+                    biblio.setDocumentType(biblio.getDocumentType() + " \n " + clusterContent);
                 } else
                     biblio.setDocumentType(clusterContent);
             } else if (clusterLabel.equals(TaggingLabels.HEADER_WORKINGGROUP)) {

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -485,7 +485,7 @@ public Response processCitationReturnXml_post(
         @DefaultValue("0") @FormParam(CONSOLIDATE_CITATIONS) String consolidate,
         @DefaultValue("0") @FormParam(INCLUDE_RAW_CITATIONS) String includeRawCitations) {
         GrobidAnalysisConfig config = new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder()
-            .consolidateHeader(validateConsolidationParam(consolidate))
+            .consolidateCitations(validateConsolidationParam(consolidate))
             .includeRawCitations(validateIncludeRawParam(includeRawCitations))
             .build();
         return restProcessString.processCitation(citation, config, ExpectedResponseType.XML);
@@ -511,11 +511,11 @@ public Response processCitationReturnBibTeX_post(
         @DefaultValue("0") @FormParam(CONSOLIDATE_CITATIONS) String consolidate,
         @DefaultValue("0") @FormParam(INCLUDE_RAW_CITATIONS) String includeRawCitations) {
         GrobidAnalysisConfig config = new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder()
-            .consolidateHeader(validateConsolidationParam(consolidate))
+            .consolidateCitations(validateConsolidationParam(consolidate))
             .includeRawCitations(validateIncludeRawParam(includeRawCitations))
             .build();
         return restProcessString.processCitation(citation, config, ExpectedResponseType.BIBTEX);
-    }
+    } 
 
     @Path(PATH_CITATION)
     @Consumes(MediaType.APPLICATION_FORM_URLENCODED)

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -485,7 +485,7 @@ public Response processCitationReturnXml_post(
         @DefaultValue("0") @FormParam(CONSOLIDATE_CITATIONS) String consolidate,
         @DefaultValue("0") @FormParam(INCLUDE_RAW_CITATIONS) String includeRawCitations) {
         GrobidAnalysisConfig config = new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder()
-            .consolidateHeader(validateConsolidationParam(consolidate))
+            .consolidateCitations(validateConsolidationParam(consolidate))
             .includeRawCitations(validateIncludeRawParam(includeRawCitations))
             .build();
         return restProcessString.processCitation(citation, config, ExpectedResponseType.XML);
@@ -511,7 +511,7 @@ public Response processCitationReturnBibTeX_post(
         @DefaultValue("0") @FormParam(CONSOLIDATE_CITATIONS) String consolidate,
         @DefaultValue("0") @FormParam(INCLUDE_RAW_CITATIONS) String includeRawCitations) {
         GrobidAnalysisConfig config = new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder()
-            .consolidateHeader(validateConsolidationParam(consolidate))
+            .consolidateCitations(validateConsolidationParam(consolidate))
             .includeRawCitations(validateIncludeRawParam(includeRawCitations))
             .build();
         return restProcessString.processCitation(citation, config, ExpectedResponseType.BIBTEX);

File: grobid-core/src/main/java/org/grobid/core/utilities/TextUtilities.java
Patch:
@@ -24,7 +24,7 @@
 public class TextUtilities {
 
     public static final String punctuations = " •*,:;?.!)-−–\"“”‘’'`$]*\u2666\u2665\u2663\u2660\u00A0";
-    public static final String fullPunctuations = "(（[ •*,:;?.!/)）-−–‐«»„\"“”‘’'`$#]*\u2666\u2665\u2663\u2660\u00A0";
+    public static final String fullPunctuations = "(（[ •*,:;?.!/)）-−–‐«»„\"“”‘’'`$]*\u2666\u2665\u2663\u2660\u00A0";
     public static final String restrictedPunctuations = ",:;?.!/-–«»„\"“”‘’'`*\u2666\u2665\u2663\u2660";
     public static String delimiters = "\n\r\t\f\u00A0" + fullPunctuations;
 

File: grobid-service/src/main/java/org/grobid/service/GrobidPaths.java
Patch:
@@ -20,6 +20,7 @@ public interface GrobidPaths {
 	 * path extension for is alive request.
 	 */
 	String PATH_IS_ALIVE = "isalive";
+
 	/**
 	 * path extension for grobid admin pages.
 	 */

File: grobid-service/src/main/java/org/grobid/service/main/GrobidServiceApplication.java
Patch:
@@ -89,13 +89,13 @@ public static void main(String... args) throws Exception {
                 File confLocation = new File(p).getAbsoluteFile();
                 if (confLocation.exists()) {
                     foundConf = confLocation.getAbsolutePath();
-                    LOGGER.info("Found conf path: " + foundConf);
+                    LOGGER.info("Found conf path: {}", foundConf);
                     break;
                 }
             }
 
             if (foundConf != null) {
-                LOGGER.warn("Running with default arguments: \"server\" \"" + foundConf + "\"");
+                LOGGER.warn("Running with default arguments: \"server\" \"{}\"", foundConf);
                 args = new String[]{"server", foundConf};
             } else {
                 throw new RuntimeException("No explicit config provided and cannot find in one of the default locations: "

File: grobid-service/src/main/java/org/grobid/service/util/GrobidRestUtils.java
Patch:
@@ -21,7 +21,7 @@ public enum Annotation {
      * Check whether the result is null or empty.
      */
     public static boolean isResultNullOrEmpty(String result) {
-        return StringUtils.isBlank(result) ? true : false;
+        return StringUtils.isBlank(result);
     }
 
     public static Annotation getAnnotationFor(int type) {

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -307,9 +307,9 @@ else if (biblio.getE_Year().length() == 4)
         //biblio.attachAffiliations();
 
         if ( (config.getGenerateTeiCoordinates() != null) && (config.getGenerateTeiCoordinates().contains("persName")) )
-            tei.append(biblio.toTEIAuthorBlock(6, true));
+            tei.append(biblio.toTEIAuthorBlock(6, true, config));
         else
-            tei.append(biblio.toTEIAuthorBlock(6, false));
+            tei.append(biblio.toTEIAuthorBlock(6, false, config));
 
         // title
         String title = biblio.getTitle();

File: grobid-core/src/main/java/org/grobid/core/engines/FigureParser.java
Patch:
@@ -79,7 +79,7 @@ private Figure getExtractionResult(List<LayoutToken> tokenizations, String resul
             } else if (clusterLabel.equals(FIG_CONTENT)) {
                 figure.appendContent(clusterContent);
             } else {
-                LOGGER.error("Warning: unexpected figure model label - " + clusterLabel + " for " + clusterContent);
+                LOGGER.warn("Unexpected figure model label - " + clusterLabel.getLabel() + " for " + clusterContent);
             }
         }
         return figure;

File: grobid-core/src/main/java/org/grobid/core/engines/TableParser.java
Patch:
@@ -83,7 +83,7 @@ private Table getExtractionResult(List<LayoutToken> tokenizations, String result
                 table.appendContent(clusterContent);
                 table.getContentTokens().addAll(tokens);
             } else {
-                LOGGER.error("Warning: unexpected table model label - " + clusterLabel + " for " + clusterContent);
+                LOGGER.warn("Unexpected table model label - " + clusterLabel.getLabel() + " for " + clusterContent);
             }
 
         }     

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -1810,8 +1810,8 @@ public static boolean writeFieldBeginEnd(StringBuilder buffer,
                     buffer.append(" ").append(s2);
                 else
                     buffer.append(s2);
-            } else if (!lastTag0.equals("<citation_marker>") && !lastTag0.equals("<figure_marker>")
-                    && !lastTag0.equals("<table_marker>") && !lastTag0.equals("<equation_marker>")) {
+            } else if (!lastTag0.endsWith("<citation_marker>") && !lastTag0.endsWith("<figure_marker>")
+                    && !lastTag0.endsWith("<table_marker>") && !lastTag0.endsWith("<equation_marker>")) {
                 for (int i = 0; i < nbIndent; i++) {
                     buffer.append("\t");
                 }

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -204,7 +204,7 @@ private ArrayList<Affiliation> resultBuilder(String result,
         if (result == null) {
             return fullAffiliations;
         }
-
+        result = result.replace("\n\n", "\n \n"); // force empty line between affiliation blocks
         try {
             //System.out.println(tokenizations.toString());
             // extract results from the processed file

File: grobid-trainer/src/main/java/org/grobid/trainer/AbstractTrainer.java
Patch:
@@ -332,9 +332,9 @@ public String getTemplateName() {
         }
 
         OptionalDouble averageF1 = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAverageF1()).average();
-        OptionalDouble averagePrecision = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAverageF1()).average();
-        OptionalDouble averageRecall = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAverageF1()).average();
-        OptionalDouble averageAccuracy = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAverageF1()).average();
+        OptionalDouble averagePrecision = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAveragePrecision()).average();
+        OptionalDouble averageRecall = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAverageRecall()).average();
+        OptionalDouble averageAccuracy = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMicroAverageAccuracy()).average();
 
         double avgAccuracy = averageAccuracy.orElseGet(() -> {
             throw new GrobidException("Missing average accuracy. Something went wrong. Please check. ");

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -952,7 +952,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                     // extracted from the pdf
                     writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI + File.separator
                             + pdfFileName.replace(".pdf", GrobidProperties.FILE_ENDING_TEI_HEADER)), false), "UTF-8");
-                    writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\""
+                    writer.write("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\""
                             + pdfFileName.replace(".pdf", "")
                             + "\"/>\n\t</teiHeader>\n\t<text");
 
@@ -972,7 +972,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                                     File.separator
                                     + pdfFileName.replace(".pdf", ".affiliation.tei.xml")), false), "UTF-8");
                             writerAffiliation.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-                            writerAffiliation.write("\n<tei xmlns=\"http://www.tei-c.org/ns/1.0\""
+                            writerAffiliation.write("\n<tei xml:space=\"preserve\" xmlns=\"http://www.tei-c.org/ns/1.0\""
                                     + " xmlns:xlink=\"http://www.w3.org/1999/xlink\" " + "xmlns:mml=\"http://www.w3.org/1998/Math/MathML\">");
                             writerAffiliation.write("\n\t<teiHeader>\n\t\t<fileDesc>\n\t\t\t<sourceDesc>");
                             writerAffiliation.write("\n\t\t\t\t<biblStruct>\n\t\t\t\t\t<analytic>\n\t\t\t\t\t\t<author>\n\n");
@@ -1007,7 +1007,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                                     File.separator
                                     + pdfFileName.replace(".pdf", ".authors.tei.xml")), false), "UTF-8");
                             writerName.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-                            writerName.write("\n<tei xmlns=\"http://www.tei-c.org/ns/1.0\"" + " xmlns:xlink=\"http://www.w3.org/1999/xlink\" "
+                            writerName.write("\n<tei xml:space=\"preserve\" xmlns=\"http://www.tei-c.org/ns/1.0\"" + " xmlns:xlink=\"http://www.w3.org/1999/xlink\" "
                                     + "xmlns:mml=\"http://www.w3.org/1998/Math/MathML\">");
                             writerName.write("\n\t<teiHeader>\n\t\t<fileDesc>\n\t\t\t<sourceDesc>");
                             writerName.write("\n\t\t\t\t<biblStruct>\n\t\t\t\t\t<analytic>\n\n\t\t\t\t\t\t<author>");

File: grobid-core/src/main/java/org/grobid/core/engines/MonographParser.java
Patch:
@@ -674,7 +674,7 @@ public Document createTrainingFromPDF(File inputFile,
 
             doc.produceStatistics();
             StringBuilder builder = new StringBuilder();
-            builder.append("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id + 
+            builder.append("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id + 
                 "\"/>\n\t</teiHeader>\n\t<text xml:lang=\""+ lang + "\">\n");
 
             // get the document outline

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -196,7 +196,7 @@ public Pair<String,String> createTrainingData(Document doc, int id) {
         StringBuilder sb = new StringBuilder();
 
 		//noinspection StringConcatenationInsideStringBufferAppend
-		sb.append("<tei>\n" +
+		sb.append("<tei xml:space=\"preserve\">\n" +
 				"    <teiHeader>\n" +
 				"        <fileDesc xml:id=\"_" + id + "\"/>\n" +
 				"    </teiHeader>\n" +

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -699,7 +699,7 @@ public void createTrainingSegmentation(String inputFile,
                 writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI +
                         File.separator + 
 						PDFFileName.replace(".pdf", ".training.segmentation.tei.xml")), false), "UTF-8");
-                writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
+                writer.write("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
                         "\"/>\n\t</teiHeader>\n\t<text xml:lang=\"en\">\n");
 
                 writer.write(bufferFulltext.toString());
@@ -768,7 +768,7 @@ public void createBlankTrainingData(File file,
                 writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI +
                         File.separator + 
                         PDFFileName.replace(".pdf", ".training.blank.tei.xml")), false), "UTF-8");
-                writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
+                writer.write("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
                         "\"/>\n\t</teiHeader>\n\t<text xml:lang=\"en\">\n");
 
                 writer.write(fulltext);

File: grobid-core/src/main/java/org/grobid/core/engines/patent/ReferenceExtractor.java
Patch:
@@ -748,7 +748,7 @@ public String extractAllReferencesString(String text,
             nbs += articles.size();
 
 		String resultTEI = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
-						   "<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" " +
+						   "<TEI xml:space=\"preserve\" xmlns=\"http://www.tei-c.org/ns/1.0\" " +
 						   "xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n";
 
 		String divID = KeyGen.getKey().substring(0,7);

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -952,7 +952,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                     // extracted from the pdf
                     writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI + File.separator
                             + pdfFileName.replace(".pdf", GrobidProperties.FILE_ENDING_TEI_HEADER)), false), "UTF-8");
-                    writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\""
+                    writer.write("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\""
                             + pdfFileName.replace(".pdf", "")
                             + "\"/>\n\t</teiHeader>\n\t<text");
 
@@ -972,7 +972,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                                     File.separator
                                     + pdfFileName.replace(".pdf", ".affiliation.tei.xml")), false), "UTF-8");
                             writerAffiliation.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-                            writerAffiliation.write("\n<tei xmlns=\"http://www.tei-c.org/ns/1.0\""
+                            writerAffiliation.write("\n<tei xml:space=\"preserve\" xmlns=\"http://www.tei-c.org/ns/1.0\""
                                     + " xmlns:xlink=\"http://www.w3.org/1999/xlink\" " + "xmlns:mml=\"http://www.w3.org/1998/Math/MathML\">");
                             writerAffiliation.write("\n\t<teiHeader>\n\t\t<fileDesc>\n\t\t\t<sourceDesc>");
                             writerAffiliation.write("\n\t\t\t\t<biblStruct>\n\t\t\t\t\t<analytic>\n\t\t\t\t\t\t<author>\n\n");
@@ -1007,7 +1007,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                                     File.separator
                                     + pdfFileName.replace(".pdf", ".authors.tei.xml")), false), "UTF-8");
                             writerName.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
-                            writerName.write("\n<tei xmlns=\"http://www.tei-c.org/ns/1.0\"" + " xmlns:xlink=\"http://www.w3.org/1999/xlink\" "
+                            writerName.write("\n<tei xml:space=\"preserve\" xmlns=\"http://www.tei-c.org/ns/1.0\"" + " xmlns:xlink=\"http://www.w3.org/1999/xlink\" "
                                     + "xmlns:mml=\"http://www.w3.org/1998/Math/MathML\">");
                             writerName.write("\n\t<teiHeader>\n\t\t<fileDesc>\n\t\t\t<sourceDesc>");
                             writerName.write("\n\t\t\t\t<biblStruct>\n\t\t\t\t\t<analytic>\n\n\t\t\t\t\t\t<author>");

File: grobid-core/src/main/java/org/grobid/core/engines/MonographParser.java
Patch:
@@ -674,7 +674,7 @@ public Document createTrainingFromPDF(File inputFile,
 
             doc.produceStatistics();
             StringBuilder builder = new StringBuilder();
-            builder.append("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id + 
+            builder.append("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id + 
                 "\"/>\n\t</teiHeader>\n\t<text xml:lang=\""+ lang + "\">\n");
 
             // get the document outline

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -196,7 +196,7 @@ public Pair<String,String> createTrainingData(Document doc, int id) {
         StringBuilder sb = new StringBuilder();
 
 		//noinspection StringConcatenationInsideStringBufferAppend
-		sb.append("<tei>\n" +
+		sb.append("<tei xml:space=\"preserve\">\n" +
 				"    <teiHeader>\n" +
 				"        <fileDesc xml:id=\"_" + id + "\"/>\n" +
 				"    </teiHeader>\n" +

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -699,7 +699,7 @@ public void createTrainingSegmentation(String inputFile,
                 writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI +
                         File.separator + 
 						PDFFileName.replace(".pdf", ".training.segmentation.tei.xml")), false), "UTF-8");
-                writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
+                writer.write("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
                         "\"/>\n\t</teiHeader>\n\t<text xml:lang=\"en\">\n");
 
                 writer.write(bufferFulltext.toString());
@@ -768,7 +768,7 @@ public void createBlankTrainingData(File file,
                 writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI +
                         File.separator + 
                         PDFFileName.replace(".pdf", ".training.blank.tei.xml")), false), "UTF-8");
-                writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
+                writer.write("<?xml version=\"1.0\" ?>\n<tei xml:space=\"preserve\">\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" + id +
                         "\"/>\n\t</teiHeader>\n\t<text xml:lang=\"en\">\n");
 
                 writer.write(fulltext);

File: grobid-core/src/main/java/org/grobid/core/engines/patent/ReferenceExtractor.java
Patch:
@@ -748,7 +748,7 @@ public String extractAllReferencesString(String text,
             nbs += articles.size();
 
 		String resultTEI = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
-						   "<TEI xmlns=\"http://www.tei-c.org/ns/1.0\" " +
+						   "<TEI xml:space=\"preserve\" xmlns=\"http://www.tei-c.org/ns/1.0\" " +
 						   "xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n";
 
 		String divID = KeyGen.getKey().substring(0,7);

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -310,7 +310,8 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     TaggingLabel clusterLabel = cluster.getTaggingLabel();
-                    String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    //String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    String clusterContent = LayoutTokensUtil.normalizeDehyphenizeText(cluster.concatTokens());
                     if (clusterLabel.equals(TaggingLabels.CITATION_MARKER)) {
                         try {
                             List<Node> refNodes = formatter.markReferencesTEILuceneBased(

File: grobid-core/src/main/java/org/grobid/core/data/Table.java
Patch:
@@ -102,7 +102,8 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     TaggingLabel clusterLabel = cluster.getTaggingLabel();
-                    String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    //String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    String clusterContent = LayoutTokensUtil.normalizeDehyphenizeText(cluster.concatTokens());
                     if (clusterLabel.equals(TaggingLabels.CITATION_MARKER)) {
                         try {
                             List<Node> refNodes = formatter.markReferencesTEILuceneBased(

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -988,7 +988,7 @@ private StringBuilder toTEINote(String noteType,
                                     StringBuilder tei,
                                     Document doc,
                                     GrobidAnalysisConfig config) throws Exception {
-        List<String> allNotes = new ArrayList<String>();
+        List<String> allNotes = new ArrayList<>();
         for (DocumentPiece docPiece : documentNoteParts) {
             
             List<LayoutToken> noteTokens = doc.getDocumentPieceTokenization(docPiece);
@@ -1280,7 +1280,7 @@ private StringBuilder toTEITextPiece(StringBuilder buffer,
                 curParagraph.appendChild(clusterContent);
             } else if (MARKER_LABELS.contains(clusterLabel)) {
                 List<LayoutToken> refTokens = cluster.concatTokens();
-                refTokens = TextUtilities.dehyphenize(refTokens);
+                refTokens = LayoutTokensUtil.dehyphenize(refTokens);
                 String chunkRefString = LayoutTokensUtil.toText(refTokens);
 
                 Element parent = curParagraph != null ? curParagraph : curDiv;

File: grobid-core/src/main/java/org/grobid/core/engines/tagging/GrobidCRFEngine.java
Patch:
@@ -9,7 +9,8 @@
 public enum GrobidCRFEngine {
     WAPITI("wapiti"),
     CRFPP("crf"),
-    DELFT("delft");
+    DELFT("delft"),
+    DUMMY("dummy");
 
     private final String ext;
 

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -387,6 +387,8 @@ protected static void checkProperties() {
         Enumeration<?> properties = getProps().propertyNames();
         for (String propKey; properties.hasMoreElements(); ) {
             propKey = (String) properties.nextElement();
+            if (propKey.equals("grobid.delft.python.virtualEnv"))
+                continue;
             String propVal = getPropertyValue(propKey, StringUtils.EMPTY);
             if (StringUtils.isBlank(propVal)) {
                 throw new GrobidPropertyException("The property '" + propKey + "' is null or empty. Please set this value.");

File: grobid-core/src/test/java/org/grobid/core/test/TestFullTextParser.java
Patch:
@@ -45,7 +45,7 @@ public static void tearDown(){
     @Test
     public void testFullTextParser_1() throws Exception {
         File inputTmpFile = getInputDocument("/test/Wang-paperAVE2008.pdf");
-        
+
         Document tei = engine.fullTextToTEIDoc(inputTmpFile, GrobidAnalysisConfig.defaultInstance());
         assertTei(tei);
     }

File: grobid-core/src/test/java/org/grobid/core/utilities/GrobidPropertiesTest.java
Patch:
@@ -76,12 +76,12 @@ public void testIsDeLFTRedirectOutputTrueIfSet() throws IOException {
         assertTrue(GrobidProperties.isDeLFTRedirectOutput());
     }
 
-    @Test(expected = GrobidPropertyException.class)
+    /*@Test(expected = GrobidPropertyException.class)
     public void testCheckPropertiesException_shouldThrowException() {
         GrobidProperties.getProps().put(
                 GrobidPropertyKeys.PROP_3RD_PARTY_PDFTOXML, "");
         GrobidProperties.checkProperties();
-    }
+    }*/
 
     @Test
     public void testGetTempPath() {

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -333,8 +333,8 @@ public Response processCitationPatentPDF(@FormDataParam(INPUT) InputStream pInpu
     @Produces(MediaType.APPLICATION_XML)
     @POST
     public Response processCitationPatentTXT_post(@FormParam(INPUT) String text,
-                                                  @FormParam("consolidateCitations") String consolidate,
-                                                  @FormDataParam("includeRawCitations") String includeRawCitations) {
+                                                  @DefaultValue("0") @FormParam("consolidateCitations") String consolidate,
+                                                  @DefaultValue("0") @FormParam("includeRawCitations") String includeRawCitations) {
         int consol = validateConsolidationParam(consolidate);
         boolean includeRaw = validateIncludeRawParam(includeRawCitations);
         return restProcessString.processCitationPatentTXT(text, consol, includeRaw);

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -175,7 +175,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new AffiliationAddressTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 

File: grobid-trainer/src/main/java/org/grobid/trainer/CRFPPGenericTrainer.java
Patch:
@@ -13,6 +13,8 @@
  * 
  * User: zholudev
  * Date: 3/20/14
+ *
+ * @deprecated use WapitiTrainer or DelftTrainer (requires http://github.com/kermitt2/delft)
  */
 @Deprecated
 public class CRFPPGenericTrainer implements GenericTrainer {

File: grobid-trainer/src/main/java/org/grobid/trainer/ChemicalEntityTrainer.java
Patch:
@@ -431,7 +431,7 @@ public void addFeatures(List<String> texts,
     public static void main(String[] args) {
         Trainer trainer = new ChemicalEntityTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/CitationTrainer.java
Patch:
@@ -195,7 +195,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new CitationTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/FigureTrainer.java
Patch:
@@ -215,7 +215,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new FigureTrainer());
-        AbstractTrainer.runEvaluation(new FigureTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new FigureTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/FulltextTrainer.java
Patch:
@@ -253,7 +253,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new FulltextTrainer());
-        AbstractTrainer.runEvaluation(new FulltextTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new FulltextTrainer()));
         System.exit(0);
     }
 }	
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/HeaderTrainer.java
Patch:
@@ -300,7 +300,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new HeaderTrainer());
-        AbstractTrainer.runEvaluation(new HeaderTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new HeaderTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/MonographTrainer.java
Patch:
@@ -162,7 +162,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new MonographTrainer());
-        AbstractTrainer.runEvaluation(new MonographTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new MonographTrainer()));
         System.exit(0);
     }
 

File: grobid-trainer/src/main/java/org/grobid/trainer/NameCitationTrainer.java
Patch:
@@ -170,7 +170,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new NameCitationTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/NameHeaderTrainer.java
Patch:
@@ -229,7 +229,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new NameHeaderTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/ReferenceSegmenterTrainer.java
Patch:
@@ -214,7 +214,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new ReferenceSegmenterTrainer());
-        AbstractTrainer.runEvaluation(new ReferenceSegmenterTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new ReferenceSegmenterTrainer()));
         System.exit(0);
     }
 }

File: grobid-trainer/src/main/java/org/grobid/trainer/SegmentationTrainer.java
Patch:
@@ -348,7 +348,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new SegmentationTrainer());
-        AbstractTrainer.runEvaluation(new SegmentationTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new SegmentationTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/ShorttextTrainer.java
Patch:
@@ -162,7 +162,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new ShorttextTrainer());
-        AbstractTrainer.runEvaluation(new ShorttextTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new ShorttextTrainer()));
         System.exit(0);
     }
 }	
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/TableTrainer.java
Patch:
@@ -221,7 +221,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new TableTrainer());
-        AbstractTrainer.runEvaluation(new TableTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new TableTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/TrainerFactory.java
Patch:
@@ -15,6 +15,8 @@ public static GenericTrainer getTrainer() {
                 return new WapitiTrainer();
             case DELFT:
                 return new DeLFTTrainer();
+            case DUMMY:
+                return new DummyTrainer();
             default:
                 throw new IllegalStateException("Unsupported Grobid sequence labelling engine: " + GrobidProperties.getGrobidCRFEngine());
         }

File: grobid-core/src/test/java/org/grobid/core/utilities/LayoutTokensUtilTest.java
Patch:
@@ -8,8 +8,6 @@
 import java.util.List;
 import java.util.stream.IntStream;
 
-import static org.hamcrest.Matchers.is;
-
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.hasSize;
 import static org.junit.Assert.assertThat;

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -333,8 +333,8 @@ public Response processCitationPatentPDF(@FormDataParam(INPUT) InputStream pInpu
     @Produces(MediaType.APPLICATION_XML)
     @POST
     public Response processCitationPatentTXT_post(@FormParam(INPUT) String text,
-                                                  @FormParam("consolidateCitations") String consolidate,
-                                                  @FormDataParam("includeRawCitations") String includeRawCitations) {
+                                                  @DefaultValue("0") @FormParam("consolidateCitations") String consolidate,
+                                                  @DefaultValue("0") @FormParam("includeRawCitations") String includeRawCitations) {
         int consol = validateConsolidationParam(consolidate);
         boolean includeRaw = validateIncludeRawParam(includeRawCitations);
         return restProcessString.processCitationPatentTXT(text, consol, includeRaw);

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -310,7 +310,8 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     TaggingLabel clusterLabel = cluster.getTaggingLabel();
-                    String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    //String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    String clusterContent = LayoutTokensUtil.normalizeDehyphenizeText(cluster.concatTokens());
                     if (clusterLabel.equals(TaggingLabels.CITATION_MARKER)) {
                         try {
                             List<Node> refNodes = formatter.markReferencesTEILuceneBased(

File: grobid-core/src/main/java/org/grobid/core/data/Table.java
Patch:
@@ -102,7 +102,8 @@ public String toTEI(GrobidAnalysisConfig config, Document doc, TEIFormatter form
                     }
 
                     TaggingLabel clusterLabel = cluster.getTaggingLabel();
-                    String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    //String clusterContent = LayoutTokensUtil.normalizeText(cluster.concatTokens());
+                    String clusterContent = LayoutTokensUtil.normalizeDehyphenizeText(cluster.concatTokens());
                     if (clusterLabel.equals(TaggingLabels.CITATION_MARKER)) {
                         try {
                             List<Node> refNodes = formatter.markReferencesTEILuceneBased(

File: grobid-core/src/main/java/org/grobid/core/engines/tagging/GrobidCRFEngine.java
Patch:
@@ -9,7 +9,8 @@
 public enum GrobidCRFEngine {
     WAPITI("wapiti"),
     CRFPP("crf"),
-    DELFT("delft");
+    DELFT("delft"),
+    DUMMY("dummy");
 
     private final String ext;
 

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -387,6 +387,8 @@ protected static void checkProperties() {
         Enumeration<?> properties = getProps().propertyNames();
         for (String propKey; properties.hasMoreElements(); ) {
             propKey = (String) properties.nextElement();
+            if (propKey.equals("grobid.delft.python.virtualEnv"))
+                continue;
             String propVal = getPropertyValue(propKey, StringUtils.EMPTY);
             if (StringUtils.isBlank(propVal)) {
                 throw new GrobidPropertyException("The property '" + propKey + "' is null or empty. Please set this value.");

File: grobid-core/src/test/java/org/grobid/core/test/TestFullTextParser.java
Patch:
@@ -45,7 +45,7 @@ public static void tearDown(){
     @Test
     public void testFullTextParser_1() throws Exception {
         File inputTmpFile = getInputDocument("/test/Wang-paperAVE2008.pdf");
-        
+
         Document tei = engine.fullTextToTEIDoc(inputTmpFile, GrobidAnalysisConfig.defaultInstance());
         assertTei(tei);
     }

File: grobid-core/src/test/java/org/grobid/core/utilities/GrobidPropertiesTest.java
Patch:
@@ -76,12 +76,12 @@ public void testIsDeLFTRedirectOutputTrueIfSet() throws IOException {
         assertTrue(GrobidProperties.isDeLFTRedirectOutput());
     }
 
-    @Test(expected = GrobidPropertyException.class)
+    /*@Test(expected = GrobidPropertyException.class)
     public void testCheckPropertiesException_shouldThrowException() {
         GrobidProperties.getProps().put(
                 GrobidPropertyKeys.PROP_3RD_PARTY_PDFTOXML, "");
         GrobidProperties.checkProperties();
-    }
+    }*/
 
     @Test
     public void testGetTempPath() {

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -175,7 +175,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new AffiliationAddressTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 

File: grobid-trainer/src/main/java/org/grobid/trainer/CRFPPGenericTrainer.java
Patch:
@@ -13,6 +13,8 @@
  * 
  * User: zholudev
  * Date: 3/20/14
+ *
+ * @deprecated use WapitiTrainer or DelftTrainer (requires http://github.com/kermitt2/delft)
  */
 @Deprecated
 public class CRFPPGenericTrainer implements GenericTrainer {

File: grobid-trainer/src/main/java/org/grobid/trainer/ChemicalEntityTrainer.java
Patch:
@@ -431,7 +431,7 @@ public void addFeatures(List<String> texts,
     public static void main(String[] args) {
         Trainer trainer = new ChemicalEntityTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/CitationTrainer.java
Patch:
@@ -195,7 +195,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new CitationTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/FigureTrainer.java
Patch:
@@ -215,7 +215,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new FigureTrainer());
-        AbstractTrainer.runEvaluation(new FigureTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new FigureTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/FulltextTrainer.java
Patch:
@@ -253,7 +253,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new FulltextTrainer());
-        AbstractTrainer.runEvaluation(new FulltextTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new FulltextTrainer()));
         System.exit(0);
     }
 }	
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/HeaderTrainer.java
Patch:
@@ -300,7 +300,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new HeaderTrainer());
-        AbstractTrainer.runEvaluation(new HeaderTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new HeaderTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/MonographTrainer.java
Patch:
@@ -162,7 +162,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new MonographTrainer());
-        AbstractTrainer.runEvaluation(new MonographTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new MonographTrainer()));
         System.exit(0);
     }
 

File: grobid-trainer/src/main/java/org/grobid/trainer/NameCitationTrainer.java
Patch:
@@ -170,7 +170,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new NameCitationTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/NameHeaderTrainer.java
Patch:
@@ -229,7 +229,7 @@ public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         Trainer trainer = new NameHeaderTrainer();
         AbstractTrainer.runTraining(trainer);
-        AbstractTrainer.runEvaluation(trainer);
+        System.out.println(AbstractTrainer.runEvaluation(trainer));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/ReferenceSegmenterTrainer.java
Patch:
@@ -214,7 +214,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new ReferenceSegmenterTrainer());
-        AbstractTrainer.runEvaluation(new ReferenceSegmenterTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new ReferenceSegmenterTrainer()));
         System.exit(0);
     }
 }

File: grobid-trainer/src/main/java/org/grobid/trainer/SegmentationTrainer.java
Patch:
@@ -348,7 +348,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new SegmentationTrainer());
-        AbstractTrainer.runEvaluation(new SegmentationTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new SegmentationTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/ShorttextTrainer.java
Patch:
@@ -162,7 +162,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
     	GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new ShorttextTrainer());
-        AbstractTrainer.runEvaluation(new ShorttextTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new ShorttextTrainer()));
         System.exit(0);
     }
 }	
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/TableTrainer.java
Patch:
@@ -221,7 +221,7 @@ public boolean accept(File dir, String name) {
     public static void main(String[] args) throws Exception {
         GrobidProperties.getInstance();
         AbstractTrainer.runTraining(new TableTrainer());
-        AbstractTrainer.runEvaluation(new TableTrainer());
+        System.out.println(AbstractTrainer.runEvaluation(new TableTrainer()));
         System.exit(0);
     }
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/TrainerFactory.java
Patch:
@@ -15,6 +15,8 @@ public static GenericTrainer getTrainer() {
                 return new WapitiTrainer();
             case DELFT:
                 return new DeLFTTrainer();
+            case DUMMY:
+                return new DummyTrainer();
             default:
                 throw new IllegalStateException("Unsupported Grobid sequence labelling engine: " + GrobidProperties.getGrobidCRFEngine());
         }

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1269,6 +1269,8 @@ private StringBuilder toTEITextPiece(StringBuilder buffer,
                 curDiv.appendChild(note);
             } else if (clusterLabel.equals(TaggingLabels.PARAGRAPH)) {
                 String clusterContent = LayoutTokensUtil.normalizeDehyphenizeText(cluster.concatTokens());
+//if (biblio != null)
+//    clusterContent = biblio.cleanAbstract(clusterContent);
                 if (isNewParagraph(lastClusterLabel, curParagraph)) {
                     curParagraph = teiElement("p");
                     if (config.isGenerateTeiIds()) {

File: grobid-core/src/test/java/org/grobid/core/engines/FullTextParserTest.java
Patch:
@@ -63,7 +63,7 @@ public static void tearDown() {
 //
 //    }
 
-    @Test
+    /*@Test
     public void testGetDocumentPieces1() throws Exception {
         Document documentMock = createMock(Document.class);
 
@@ -129,6 +129,6 @@ public void testGetDocumentPieces1() throws Exception {
         assertThat(documentPieces1.get(1).getLeft().getTokenDocPos(), is(25000));
         assertThat(documentPieces1.get(1).getRight().getBlockPtr(), is(3));
         assertThat(documentPieces1.get(1).getRight().getTokenDocPos(), is(25088));
-    }
+    }*/
 
 }
\ No newline at end of file

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/LabelStat.java
Patch:
@@ -104,7 +104,7 @@ public double getAccuracy() {
     }
 
     public long getSupport() {
-        return observed + falsePositive + falseNegative;
+        return expected;
     }
 
     public double getPrecision() {

File: grobid-trainer/src/test/java/org/grobid/trainer/StatsTest.java
Patch:
@@ -31,6 +31,7 @@ public void testPrecision_noMatch() throws Exception {
         target.getLabelStat("MIAO").setFalsePositive(3);
         target.getLabelStat("MIAO").setFalseNegative(1);
         assertThat(target.getLabelStat("MIAO").getPrecision(), is(0.0));
+        assertThat(target.getLabelStat("MIAO").getSupport(), is(4L));
     }
 
     @Test

File: grobid-core/src/test/java/org/grobid/core/sax/PDFALTOSaxHandlerTest.java
Patch:
@@ -81,7 +81,7 @@ public void testParsing_shouldWork() throws Exception {
 
         List<LayoutToken> tokenList = target.getTokenization();
 
-        assertThat(tokenList.stream().filter(t -> t.getText().equals("newly")).count(), is(1));
+        assertThat(tokenList.stream().filter(t -> t.getText().equals("newly")).count(), is(1L));
     }
 
 }
\ No newline at end of file

File: grobid-core/src/test/java/org/grobid/core/sax/PDFALTOSaxHandlerTest.java
Patch:
@@ -81,7 +81,7 @@ public void testParsing_shouldWork() throws Exception {
 
         List<LayoutToken> tokenList = target.getTokenization();
 
-        assertThat(tokenList.stream().filter(t -> t.getText().equals("newly")).count(), is(1));
+        assertThat(tokenList.stream().filter(t -> t.getText().equals("newly")).count(), is(1L));
     }
 
 }
\ No newline at end of file

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -417,7 +417,7 @@ public static File getNativeLibraryPath() {
 
     public static boolean isHeaderUseHeuristics() {
         return Utilities.stringToBoolean(
-            getPropertyValue(GrobidPropertyKeys.PROP_HEADER_USE_HEURISTICS, "false")
+            getPropertyValue(GrobidPropertyKeys.PROP_HEADER_USE_HEURISTICS, "true")
         );
     }
 

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -133,7 +133,9 @@ public Document processing(DocumentSource documentSource,
             // header processing
             BiblioItem resHeader = new BiblioItem();
             Pair<String, LayoutTokenization> featSeg = null;
-            parsers.getHeaderParser().processingHeaderBlock(config.getConsolidateHeader(), doc, resHeader);
+            if (GrobidProperties.isHeaderUseHeuristics()) {
+                parsers.getHeaderParser().processingHeaderBlock(config.getConsolidateHeader(), doc, resHeader);
+            }
             // above the old version of the header block identification, because more robust
             if ((resHeader.getTitle() == null) || (resHeader.getTitle().trim().length() == 0) ||
                  (resHeader.getAuthors() == null) || (resHeader.getFullAuthors() == null) ||

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidPropertyKeys.java
Patch:
@@ -22,6 +22,8 @@ public interface GrobidPropertyKeys {
     String PROP_USE_LANG_ID = "grobid.use_language_id";
     String PROP_LANG_DETECTOR_FACTORY = "grobid.language_detector_factory";
 
+    String PROP_HEADER_USE_HEURISTICS = "grobid.header.use_heuristics";
+
     String PROP_CROSSREF_ID = "grobid.crossref_id";
     String PROP_CROSSREF_PW = "grobid.crossref_pw";
     String PROP_CROSSREF_HOST = "grobid.crossref_host";

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -140,6 +140,7 @@ public Document processing(DocumentSource documentSource,
                  (resHeader.getFullAuthors().size() == 0) ) {
                 resHeader = new BiblioItem();
                 parsers.getHeaderParser().processingHeaderSection(config.getConsolidateHeader(), doc, resHeader);
+                // above, use the segmentation model result
                 if (doc.getMetadata() != null) {
                     Metadata metadata = doc.getMetadata();
                     if (metadata.getTitle() != null)
@@ -158,7 +159,6 @@ public Document processing(DocumentSource documentSource,
                         parsers.getHeaderParser().consolidateHeader(resHeader, config.getConsolidateHeader());
                     }
                 }
-                // above, use the segmentation model result
             }
             // structure the abstract using the fulltext model
             if ( (resHeader.getAbstract() != null) && (resHeader.getAbstract().length() > 0) ) {

File: grobid-trainer/src/main/java/org/grobid/trainer/AbstractTrainer.java
Patch:
@@ -291,14 +291,14 @@ public String getTemplateName() {
                 if (averagesLabelStats.containsKey(key)) {
                     averagesLabelStats.get(key).setAccuracy(averagesLabelStats.get(key).getAccuracy() + entry.getValue().getAccuracy());
                     averagesLabelStats.get(key).setF1Score(averagesLabelStats.get(key).getF1Score() + entry.getValue().getF1Score());
-                    averagesLabelStats.get(key).setRecall(averagesLabelStats.get(key).getRecall() + entry.getValue().getF1Score());
+                    averagesLabelStats.get(key).setRecall(averagesLabelStats.get(key).getRecall() + entry.getValue().getRecall());
                     averagesLabelStats.get(key).setPrecision(averagesLabelStats.get(key).getPrecision() + entry.getValue().getPrecision());
                     averagesLabelStats.get(key).setSupport(averagesLabelStats.get(key).getSupport() + entry.getValue().getSupport());
                 } else {
                     averagesLabelStats.put(key, new LabelResult(key));
                     averagesLabelStats.get(key).setAccuracy(entry.getValue().getAccuracy());
                     averagesLabelStats.get(key).setF1Score(entry.getValue().getF1Score());
-                    averagesLabelStats.get(key).setRecall(entry.getValue().getF1Score());
+                    averagesLabelStats.get(key).setRecall(entry.getValue().getRecall());
                     averagesLabelStats.get(key).setPrecision(entry.getValue().getPrecision());
                     averagesLabelStats.get(key).setSupport(entry.getValue().getSupport());
                 }
@@ -315,6 +315,7 @@ public String getTemplateName() {
 
         for (String label : averagesLabelStats.keySet()) {
             LabelResult labelResult = averagesLabelStats.get(label);
+
             double avgAccuracy = labelResult.getAccuracy() / evaluationResults.size();
             averagesLabelStats.get(label).setAccuracy(avgAccuracy);
 

File: grobid-trainer/src/main/java/org/grobid/trainer/AbstractTrainer.java
Patch:
@@ -331,8 +331,8 @@ public String getTemplateName() {
         }
 
         OptionalDouble averageF1 = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMacroAverageF1()).average();
-        OptionalDouble averagePrecision = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMacroAverageF1()).average();
-        OptionalDouble averageRecall = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMacroAverageF1()).average();
+        OptionalDouble averagePrecision = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMacroAveragePrecision()).average();
+        OptionalDouble averageRecall = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMacroAverageRecall()).average();
         OptionalDouble averageAccuracy = evaluationResults.stream().mapToDouble(e -> e.getFieldStats().getMacroAverageAccuracy()).average();
 
         double avgAccuracy = averageAccuracy.orElseGet(() -> {

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EvaluationUtilities.java
Patch:
@@ -276,14 +276,14 @@ public static Stats fieldLevelStats(String theResult) {
         // last fields of the sequence
         if ((previousObtainedLabel != null)) {
             currentObtainedPosition.end = pos - 1;
-            Pair theField = new Pair<String, OffsetPosition>(getPlainLabel(previousObtainedLabel),
+            Pair theField = new Pair<>(getPlainLabel(previousObtainedLabel),
                 currentObtainedPosition);
             obtainedFields.add(theField);
         }
 
         if ((previousExpectedLabel != null)) {
             currentExpectedPosition.end = pos - 1;
-            Pair theField = new Pair<String, OffsetPosition>(getPlainLabel(previousExpectedLabel),
+            Pair theField = new Pair<>(getPlainLabel(previousExpectedLabel),
                 currentExpectedPosition);
             expectedFields.add(theField);
         }

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -13,6 +13,8 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.*;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.util.Enumeration;
 import java.util.Properties;
 
@@ -428,7 +430,7 @@ public static String getDeLFTPath() {
     public static String getDeLFTFilePath() {
         String rawPath = getPropertyValue(GrobidPropertyKeys.PROP_GROBID_DELFT_PATH);
         File pathFile = new File(rawPath);
-        if (!pathFile.exists()) {
+        if (!Files.exists(Paths.get(rawPath).toAbsolutePath())) {
             rawPath = "../" + rawPath;
             pathFile = new File(rawPath);
         }

File: grobid-core/src/main/java/org/grobid/core/jni/DeLFTModel.java
Patch:
@@ -84,13 +84,13 @@ public String call() {
                 Object objectResults = jep.getValue(this.modelName+".tag(x_all, None)");
                 
                 // inject back the labels
-                ArrayList<ArrayList<List<String>>> results = (ArrayList<ArrayList<List<String>>>)objectResults;
+                List<List<List<String>>> results = (List<List<List<String>>>) objectResults;
                 BufferedReader bufReader = new BufferedReader(new StringReader(data));
                 String line;
                 int i = 0; // sentence index
                 int j = 0; // word index in the sentence
-                ArrayList<List<String>> result = results.get(0);
-                while( (line=bufReader.readLine()) != null ) {
+                List<List<String>> result = results.get(0);
+                while ((line = bufReader.readLine()) != null) {
                     line = line.trim();
                     if ((line.length() == 0) && (j != 0)) {
                         j = 0;

File: grobid-core/src/main/java/org/grobid/core/jni/JEPThreadPool.java
Patch:
@@ -54,7 +54,7 @@ private JEPThreadPool() {
         //executor = Executors.newFixedThreadPool(POOL_SIZE); 
         executor = Executors.newSingleThreadExecutor();
         // each of these threads is associated to a JEP instance
-        jepInstances = new HashMap<Long,Jep>();
+        jepInstances = new HashMap<>();
     }
 
     /**

File: grobid-core/src/main/java/org/grobid/core/layout/PDFAnnotation.java
Patch:
@@ -111,7 +111,7 @@ public boolean cover(LayoutToken token) {
 		if (token == null)
 			return false;
 		boolean res = false;
-		// do we have an astro entity annotation at this location?
+		// do we have an entity annotation at this location?
 		// we need to check the coordinates
 		int pageToken = token.getPage();
 		if (pageToken == pageNumber) {

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -302,7 +302,7 @@ private void init() {
         }
 
         initializePaths();
-        checkProperties();
+        //checkProperties();
         loadPdf2XMLPath();
         loadCrfEngine();
     }

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidPropertyKeys.java
Patch:
@@ -12,9 +12,9 @@ public interface GrobidPropertyKeys {
     String PROP_TMP_PATH = "grobid.temp.path";
     //    public static final String PROP_BIN_PATH = "grobid.bin.path";
     String PROP_NATIVE_LIB_PATH = "grobid.nativelibrary.path";
-    String PROP_3RD_PARTY_PDFTOXML = "grobid.3rdparty.pdftoxml.path";
-    String PROP_3RD_PARTY_PDFTOXML_MEMORY_LIMIT = "grobid.3rdparty.pdftoxml.memory.limit.mb";
-    String PROP_3RD_PARTY_PDFTOXML_TIMEOUT_SEC = "grobid.3rdparty.pdftoxml.memory.timeout.sec";
+    String PROP_3RD_PARTY_PDFTOXML = "grobid.3rdparty.pdf2xml.path";
+    String PROP_3RD_PARTY_PDFTOXML_MEMORY_LIMIT = "grobid.3rdparty.pdf2xml.memory.limit.mb";
+    String PROP_3RD_PARTY_PDFTOXML_TIMEOUT_SEC = "grobid.3rdparty.pdf2xml.memory.timeout.sec";
 
     String PROP_GROBID_CRF_ENGINE = "grobid.crf.engine";
     String PROP_GROBID_DELFT_PATH = "grobid.delft.install";

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -1239,15 +1239,15 @@ private StringBuilder toTEITextPiece(StringBuilder buffer,
 
         if (figures != null) {
             for (Figure figure : figures) {
-                String figSeg = figure.toTEI(config);
+                String figSeg = figure.toTEI(config, doc, this);
                 if (figSeg != null) {
                     buffer.append(figSeg).append("\n");
                 }
             }
         }
         if (tables != null) {
             for (Table table : tables) {
-                String tabSeg = table.toTEI(config);
+                String tabSeg = table.toTEI(config, doc, this);
                 if (tabSeg != null) {
                     buffer.append(tabSeg).append("\n");
                 }

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefClient.java
Patch:
@@ -90,7 +90,6 @@ public Thread newThread(Runnable r) {
 					return t;
 				}
 			}), interval, TimeUnit.MILLISECONDS, iterations);
-			//printLog(null, "!!!!!!!!!!!!!!!!!!!!!!! Setting timedSemaphore limits... " + iterations + " / " + interval);
 		}
 	}
 	

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EvaluationUtilities.java
Patch:
@@ -129,7 +129,7 @@ public static String evaluateStandard(String path, Function<List<String>, String
 			long time = System.currentTimeMillis();
 			theResult = taggerFunction.apply(citationBlocks);
 			bufReader.close();
-
+System.out.println(theResult);
             System.out.println("Labeling took: " + (System.currentTimeMillis() - time) + " ms");
         } catch (Exception e) {
 			throw new GrobidException("An exception occurred while evaluating Grobid.", e);

File: grobid-core/src/main/java/org/grobid/core/main/LibraryLoader.java
Patch:
@@ -195,7 +195,7 @@ public static void addLibraryPath(String pathToAdd) throws Exception {
 //        }
 //    }
 //
-    private static String getLibraryFolder() {
+    public static String getLibraryFolder() {
         GrobidProperties.getInstance();
         // TODO: change to fetching the basic dir from GrobidProperties object
         return String.format("%s" + File.separator + "%s", GrobidProperties

File: grobid-core/src/main/java/org/grobid/core/utilities/glutton/GluttonClient.java
Patch:
@@ -73,7 +73,7 @@ private GluttonClient() {
         int nThreads = Runtime.getRuntime().availableProcessors();
         //int nThreads = (int) Math.ceil((double)Runtime.getRuntime().availableProcessors() / 2);
         System.out.println("nThreads: " + nThreads);
-        this.executorService = Executors.newFixedThreadPool(nThreads);
+        this.executorService = Executors.newFixedThreadPool(nThreads*2);
         //setLimits(20, 1000); // default calls per second
     }
 

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EndToEndEvaluation.java
Patch:
@@ -152,8 +152,8 @@ public boolean accept(File dir, String name) {
 					System.out.println(n + " - " + pdfFile.getPath());
 					GrobidAnalysisConfig config =
                         GrobidAnalysisConfig.builder()
-                                .consolidateHeader(1)
-                                .consolidateCitations(0)
+                                .consolidateHeader(0)
+                                .consolidateCitations(1)
                                 .withPreprocessImages(true)
                                 .build();
 					String tei = engine.fullTextToTEI(pdfFile, config);

File: grobid-core/src/main/java/org/grobid/core/jni/JEPThreadPool.java
Patch:
@@ -75,6 +75,7 @@ public Jep getJEPInstance() {
                     throw new GrobidResourceException("DeLFT installation path is not a directory");
                 }
                 config.addIncludePaths(delftPath.getAbsolutePath());
+                config.setClassLoader(Thread.currentThread().getContextClassLoader());
                 //System.out.println("jep instance thread: " + Thread.currentThread().getId());
                 Jep jep = new Jep(config);
                 jepInstances.put(Thread.currentThread().getId(), jep);

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidPropertyKeys.java
Patch:
@@ -18,6 +18,7 @@ public interface GrobidPropertyKeys {
 
     String PROP_GROBID_CRF_ENGINE = "grobid.crf.engine";
     String PROP_GROBID_DELFT_PATH = "grobid.delft.install";
+    String PROP_GROBID_DELFT_ELMO = "grobid.delft.useELMo";
     String PROP_USE_LANG_ID = "grobid.use_language_id";
     String PROP_LANG_DETECTOR_FACTORY = "grobid.language_detector_factory";
 

File: grobid-core/src/test/java/org/grobid/core/test/TestFullTextParser.java
Patch:
@@ -11,7 +11,6 @@
 import org.grobid.core.engines.label.TaggingLabel;
 import org.grobid.core.factory.GrobidFactory;
 import org.grobid.core.layout.Block;
-import org.grobid.core.main.GrobidConstants;
 import org.grobid.core.utilities.GrobidProperties;
 import org.junit.*;
 

File: grobid-core/src/test/java/org/grobid/core/test/TestHeaderParser.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.grobid.core.data.BiblioItem;
 import org.grobid.core.factory.GrobidFactory;
-import org.grobid.core.main.GrobidConstants;
 import org.grobid.core.utilities.GrobidProperties;
 import org.junit.AfterClass;
 import org.junit.Test;
@@ -21,14 +20,15 @@ public class TestHeaderParser extends EngineTest {
     private String testPath = null;
     private String newTrainingPath = null;
 
+    public static final String TEST_RESOURCES_PATH = "./src/test/resources/test";
 
     @AfterClass
     public static void tearDown(){
         GrobidFactory.reset();
     }
 
     private void getTestResourcePath() {
-        testPath = GrobidConstants.TEST_RESOURCES_PATH;
+        testPath = TEST_RESOURCES_PATH;
         GrobidProperties.getInstance();
         newTrainingPath = GrobidProperties.getTempPath().getAbsolutePath();
     }

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EndToEndEvaluation.java
Patch:
@@ -152,8 +152,8 @@ public boolean accept(File dir, String name) {
 					System.out.println(n + " - " + pdfFile.getPath());
 					GrobidAnalysisConfig config =
                         GrobidAnalysisConfig.builder()
-                                .consolidateHeader(0)
-                                .consolidateCitations(1)
+                                .consolidateHeader(1)
+                                .consolidateCitations(0)
                                 .withPreprocessImages(true)
                                 .build();
 					String tei = engine.fullTextToTEI(pdfFile, config);

File: grobid-core/src/main/java/org/grobid/core/utilities/glutton/GluttonRequestTask.java
Patch:
@@ -25,7 +25,7 @@ public GluttonRequestTask(GluttonClient client, GluttonRequest<T> request) {
     @Override
     public void run() {
         try {        
-            client.checkLimits();
+            //client.checkLimits();
             
             GluttonClient.printLog(request, ".. executing");
             

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/WorkDeserializer.java
Patch:
@@ -153,7 +153,7 @@ protected BiblioItem deserializeOneItem(JsonNode item) {
 						if (((ArrayNode)firstDatePartNode).size() > 1) {
 							month = ((ArrayNode)firstDatePartNode).get(1).asText();
 							if (((ArrayNode)firstDatePartNode).size() > 2) {
-								day = month = ((ArrayNode)firstDatePartNode).get(2).asText();
+								day = ((ArrayNode)firstDatePartNode).get(2).asText();
 							}
 						}
 						Date date = new Date();

File: grobid-core/src/main/java/org/grobid/core/utilities/Consolidation.java
Patch:
@@ -370,6 +370,7 @@ public Map<Integer,BiblioItem> consolidate(List<BibDataSet> biblios) {
             if (StringUtils.isNotBlank(doi)) {
                 // call based on the identified DOI
                 //arguments = null;
+                arguments = new HashMap<String,String>();
                 arguments.put("doi", doi);
             } /*else if (StringUtils.isNotBlank(title) && StringUtils.isNotBlank(aut)) {
                 // call based on partial metadata

File: grobid-core/src/main/java/org/grobid/core/utilities/glutton/GluttonClient.java
Patch:
@@ -70,7 +70,7 @@ private GluttonClient() {
         });
         this.timedSemaphore = null;
         this.futures = new HashMap<>();*/
-        setLimits(100, 1000); // default 100 calls per second
+        setLimits(5, 1000); // default 100 calls per second
     }
 
     /*public void setLimits(int iterations, int interval) {

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EvaluationDOIMatching.java
Patch:
@@ -130,6 +130,8 @@ public boolean accept(File dir, String name) {
             List<String> dois = new ArrayList<String>();
             List<String> pmids = new ArrayList<String>();
             while (ite.hasNext()) {
+                if (nbRef > 1000)
+                    break;
                 JsonNode entryNode = ite.next();
 
                 String rawRef = null;

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequest.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class CrossrefRequest<T extends Object> extends Observable {
 
-	protected static final String BASE_URL = "http://api.crossref.org";
+	protected static final String BASE_URL = "https://api.crossref.org";
 	
 	/**
 	 * Model key in crossref, ex: "works", "journals"..

File: grobid-core/src/main/java/org/grobid/core/engines/CitationParser.java
Patch:
@@ -149,7 +149,7 @@ public BiblioItem processing(List<LayoutToken> tokens, int consolidate) {
         }
     }
 
-    /*public List<BibDataSet> processingReferenceSection(String referenceTextBlock, ReferenceSegmenter referenceSegmenter) {
+    public List<BibDataSet> processingReferenceSection(String referenceTextBlock, ReferenceSegmenter referenceSegmenter) {
         List<LabeledReferenceResult> segm = referenceSegmenter.extract(referenceTextBlock);
 
         List<BibDataSet> results = new ArrayList<>();
@@ -165,7 +165,7 @@ public BiblioItem processing(List<LayoutToken> tokens, int consolidate) {
             }
         }
         return results;
-    }*/
+    }
 
     public List<BibDataSet> processingReferenceSection(Document doc, ReferenceSegmenter referenceSegmenter, int consolidate) {
         List<BibDataSet> results = new ArrayList<BibDataSet>();

File: grobid-core/src/test/java/org/grobid/core/engines/EngineTest.java
Patch:
@@ -730,7 +730,7 @@ public void extractCitationsFromPDF() throws Exception {
         Document doc = engine.getParsers().getSegmentationParser().processing(documentSource, GrobidAnalysisConfig.defaultInstance());
         //Document doc = engine.getParsers().getSegmentationParser().processing(new File(input), GrobidAnalysisConfig.defaultInstance());
         System.out.println("Extracting citations");
-        List<BibDataSet> cits = engine.getParsers().getCitationParser().processingReferenceSection(doc, engine.getParsers().getReferenceSegmenterParser(), false);
+        List<BibDataSet> cits = engine.getParsers().getCitationParser().processingReferenceSection(doc, engine.getParsers().getReferenceSegmenterParser(), 0);
         for (BibDataSet c : cits) {
             System.out.println(c.getResBib().getTitle() + "--->" + c.getResBib().getAuthors());
         }
@@ -993,7 +993,7 @@ public void visualizeCitations() throws Exception {
     public void testHeaders() throws Exception {
         final Engine engine = GrobidFactory.getInstance().getEngine();
 //        GrobidAnalysisConfig config = GrobidAnalysisConfig.defaultInstance();
-        GrobidAnalysisConfig config = new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder().consolidateHeader(false).build();
+        GrobidAnalysisConfig config = new GrobidAnalysisConfig.GrobidAnalysisConfigBuilder().consolidateHeader(0).build();
 
 
 //        File f = new File("/Users/zholudev/Downloads/Publications sample/AS-292290007453702@1446698776063_content_1.pdf");
@@ -1145,7 +1145,7 @@ public void run() {
                     int cnt = 0;
                     for (int i = 0; i < 100; i++) {
                         try {
-                            engine.processRawReference(cit, false);
+                            engine.processRawReference(cit, 0);
                         } catch (Exception e) {
                             //no op
                         }

File: grobid-core/src/test/java/org/grobid/core/test/TestCitationPatentParser.java
Patch:
@@ -101,7 +101,7 @@ public void testCitationPatentParserFromText() throws Exception {
 		
 		List<BibDataSet> articles = new ArrayList<BibDataSet>();
 		List<PatentItem> patents = new ArrayList<PatentItem>();
-		boolean consolidateCitations = false;
+		int consolidateCitations = 0;
 		engine.processAllCitationsInPatent(text, articles, patents, consolidateCitations);
 		
 		assertEquals(4, patents.size());

File: grobid-core/src/test/java/org/grobid/core/test/TestReferencesParser.java
Patch:
@@ -25,7 +25,7 @@ public void testReferences() throws Exception {
         String testPath = getTestResourcePath();
 
         String pdfPath = testPath + File.separator + "Wang-paperAVE2008.pdf";
-        List<BibDataSet> resRefs = engine.processReferences(new File(pdfPath), true);
+        List<BibDataSet> resRefs = engine.processReferences(new File(pdfPath), 1);
 
         assertNotNull(resRefs);
         assertThat(resRefs.size(), is(12));

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -1,6 +1,7 @@
 package org.grobid.core.engines;
 
 import com.google.common.base.Function;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.document.Document;
@@ -114,7 +115,7 @@ private List<LabeledReferenceResult> getExtractionResult(List<LayoutToken> token
                 if (container.isBeginning()) {
                     if (reference.length() != 0) {
                         resultList.add(new LabeledReferenceResult(referenceLabel.length() == 0 ? null :
-                            referenceLabel.toString().trim(), reference.toString().trim(), referenceTokens, 
+                            referenceLabel.toString().trim(), reference.toString().trim(), Lists.newArrayList(referenceTokens),
                             	features.toString(), BoundingBoxCalculator.calculate(referenceTokens)));
                         reference.setLength(0);
                         referenceLabel.setLength(0);

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessFiles.java
Patch:
@@ -835,7 +835,7 @@ protected PDDocument dispatchProcessing(GrobidRestUtils.Annotation type, PDDocum
                 teiDoc, true, true, false);
         } else if (type == GrobidRestUtils.Annotation.FIGURE) {
             out = FigureTableVisualizer.annotateFigureAndTables(document, documentSource.getXmlFile(),
-                teiDoc, true, true, true, false);
+                teiDoc, true, true, true, false, false);
         }
         return out;
     }

File: grobid-service/src/test/java/org/grobid/service/process/GrobidRestProcessFilesTest.java
Patch:
@@ -28,7 +28,7 @@ public class GrobidRestProcessFilesTest {
     GrobidRestProcessFiles target;
 
     @Before
-    public void setUp() throws Exception {
+    public void setUp() {
         documentSourceMock = createMock(DocumentSource.class);
         target = new GrobidRestProcessFiles();
     }
@@ -74,8 +74,8 @@ public void dispatchProcessing_selectionFigure_shouldWork() throws Exception {
 
         File fakeFile = File.createTempFile("justForTheTest", "baomiao");
         fakeFile.deleteOnExit();
-        expect(FigureTableVisualizer.annotateFigureAndTables((PDDocument) anyObject(), EasyMock.<File>anyObject(),
-                EasyMock.<Document>anyObject(), anyBoolean(), anyBoolean(), anyBoolean(), anyBoolean()))
+        expect(FigureTableVisualizer.annotateFigureAndTables(anyObject(), EasyMock.anyObject(),
+                EasyMock.anyObject(), anyBoolean(), anyBoolean(), anyBoolean(), anyBoolean(), anyBoolean()))
                 .andReturn(null);
         expect(documentSourceMock.getXmlFile()).andReturn(fakeFile);
 

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -168,7 +168,7 @@ public Document processing(DocumentSource documentSource,
 
 			// consolidate the set
 			if (config.isConsolidateCitations()) {
-				Consolidation consolidator = new Consolidation(cntManager);
+				Consolidation consolidator = new Consolidation(Engine.getCntManager());
 				try {
 					Map<Integer,BiblioItem> resConsolidation = consolidator.consolidate(resCitations);
 					for(int i=0; i<resCitations.size(); i++) {

File: grobid-core/src/main/java/org/grobid/core/utilities/counters/impl/CntManagerImpl.java
Patch:
@@ -38,7 +38,7 @@ public void i(Countable e) {
     public void i(Countable e, long val) {
         final String groupName = getCounterEnclosingName(e);
         checkClass(groupName);
-
+             
         classCounters.putIfAbsent(groupName, new ConcurrentHashMap<String, Counter>());
         ConcurrentMap<String, Counter> cntMap = classCounters.get(groupName);
 

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -52,7 +52,7 @@ public class GrobidRestService implements GrobidPaths {
     private static final String DATE = "date";
     private static final String AFFILIATIONS = "affiliations";
     private static final String CITATION = "citations";
-    private static final String TEXT = "text";
+//    private static final String TEXT = "text";
     private static final String SHA1 = "sha1";
     private static final String XML = "xml";
     private static final String INPUT = "input";
@@ -329,7 +329,7 @@ public Response processCitationPatentPDF(@FormDataParam(INPUT) InputStream pInpu
     @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
     @Produces(MediaType.APPLICATION_XML)
     @POST
-    public Response processCitationPatentTXT_post(@FormParam(TEXT) String text,
+    public Response processCitationPatentTXT_post(@FormParam(INPUT) String text,
                                                   @FormParam("consolidateCitations") String consolidate) {
         boolean consol = validateConsolidationParam(consolidate);
         return restProcessString.processCitationPatentTXT(text, consol);

File: grobid-core/src/test/java/org/grobid/core/utilities/counters/impl/CntManagerImplTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.grobid.core.engines.counters.CitationParserCounters;
 import org.grobid.core.engines.counters.Countable;
 import org.grobid.core.engines.counters.FigureCounters;
+import org.grobid.core.utilities.GrobidProperties;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -23,6 +24,7 @@ public class CntManagerImplTest {
 
     @Before
     public void setUp() throws Exception {
+        GrobidProperties.getInstance();
         target = new CntManagerImpl();
     }
 

File: grobid-core/src/test/java/org/grobid/core/utilities/counters/impl/CntManagerImplTest.java
Patch:
@@ -4,6 +4,7 @@
 import org.grobid.core.engines.counters.CitationParserCounters;
 import org.grobid.core.engines.counters.Countable;
 import org.grobid.core.engines.counters.FigureCounters;
+import org.grobid.core.utilities.GrobidProperties;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -23,6 +24,7 @@ public class CntManagerImplTest {
 
     @Before
     public void setUp() throws Exception {
+        GrobidProperties.getInstance();
         target = new CntManagerImpl();
     }
 

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -46,7 +46,7 @@ public static DocumentSource fromPdf(File pdfFile) {
 	 * but with the extra annotation file and with outline	
      */
     public static DocumentSource fromPdf(File pdfFile, int startPage, int endPage) {
-        return fromPdf(pdfFile, startPage, endPage, false, true, true);
+        return fromPdf(pdfFile, startPage, endPage, false, true, false);
     }
 
     public static DocumentSource fromPdf(File pdfFile, int startPage, int endPage, 

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -143,7 +143,8 @@ public File pdf2xml(Integer timeout, boolean force, int startPage,
             File dataFolder = new File(tmpPathXML.getAbsolutePath() + "_data");
             File[] files = dataFolder.listFiles();
             if (files != null && files.length > PDF2XML_FILES_AMOUNT_LIMIT) {
-                throw new GrobidException("The temp folder " + dataFolder + " contains " + files.length + " files and exceeds the limit", GrobidExceptionStatus.PARSING_ERROR);
+                throw new GrobidException("The temp folder " + dataFolder + " contains " + files.length + " files and exceeds the limit", 
+                    GrobidExceptionStatus.PARSING_ERROR);
             }
         }
         LOGGER.debug("pdf2xml process finished. Time to process:" + (System.currentTimeMillis() - time) + "ms");

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -171,7 +171,8 @@ private void processFullTextDirectory(File[] files,
                         GrobidAnalysisConfig config = null;
                         // path for saving assets
                         if (saveAssets) {
-                            String assetPath = outputPath + File.separator + KeyGen.getKey();
+                            String baseName = currPdf.getName().replace(".pdf", "").replace(".PDF", "");
+                            String assetPath = outputPath + File.separator + baseName + "_assets";
                             config = GrobidAnalysisConfig.builder()
                                     .pdfAssetPath(new File(assetPath))
                                     .generateTeiCoordinates(elementCoordinates)

File: grobid-core/src/main/java/org/grobid/core/utilities/TextUtilities.java
Patch:
@@ -1393,7 +1393,8 @@ public static boolean test_digit(String tok) {
      */
     public static boolean isAllUpperCaseOrDigitOrDot(String text) {
         for (int i = 0; i < text.length(); i++) {
-            if (!Character.isUpperCase(text.charAt(i)) && !Character.isDigit(text.charAt(i))) {
+            final char charAt = text.charAt(i);
+            if (!Character.isUpperCase(charAt) && !Character.isDigit(charAt) && charAt != '.') {
                 return false;
             }
         }

File: grobid-core/src/main/java/org/grobid/core/utilities/BibDataSetContextExtractor.java
Patch:
@@ -83,7 +83,7 @@ private static String extractContextSentence(String cont) {
         Matcher m = REF_PATTERN.matcher(cont);
         if (m.find()) {
             String g = m.group(1);
-            return m.replaceAll(g);
+            return m.replaceAll(Matcher.quoteReplacement(g));
         } else {
             throw new IllegalStateException("Implementation error: no <ref> found in" + cont);
         }

File: grobid-core/src/main/java/org/grobid/core/utilities/BibDataSetContextExtractor.java
Patch:
@@ -83,7 +83,7 @@ private static String extractContextSentence(String cont) {
         Matcher m = REF_PATTERN.matcher(cont);
         if (m.find()) {
             String g = m.group(1);
-            return m.replaceAll(g);
+            return m.replaceAll(Matcher.quoteReplacement(g));
         } else {
             throw new IllegalStateException("Implementation error: no <ref> found in" + cont);
         }

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -369,6 +369,7 @@ public Response processCitationPatentPDF(@FormDataParam(INPUT) InputStream pInpu
 	@POST
 	public Response processCitationPatentTXT_post(@FormParam(TEXT) String text,
 	 	@FormParam("consolidateCitations") String consolidate) {
+System.out.println(text);		
 		boolean consol = false;
 		if ( (consolidate != null) && (consolidate.equals("1")) ) {
 			consol = true;

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EndToEndEvaluation.java
Patch:
@@ -159,7 +159,7 @@ public boolean accept(File dir, String name) {
                         GrobidAnalysisConfig.builder()
                                 .consolidateHeader(true)
                                 .consolidateCitations(false)
-                                .withPreprocessImages(false)
+                                .withPreprocessImages(true)
                                 .build();
 					String tei = engine.fullTextToTEI(pdfFile, config);
 					// write the result in the same directory

File: grobid-service/src/main/java/org/grobid/service/exceptions/mapper/GrobidServiceExceptionMapper.java
Patch:
@@ -32,6 +32,6 @@ public GrobidServiceExceptionMapper() {
 
     @Override
     public Response toResponse(GrobidServiceException exception) {
-        return mapper.processException(exception, GrobidStatusToHttpStatusMapper.getStatusCode(exception.getStatus()));
+        return mapper.processException(exception, exception.getResponseCode());
     }
 }

File: grobid-trainer/src/main/java/org/grobid/trainer/AbstractTrainer.java
Patch:
@@ -1,14 +1,12 @@
 package org.grobid.trainer;
 
 import org.grobid.core.GrobidModel;
-import org.grobid.core.GrobidModels;
 import org.grobid.core.engines.tagging.GenericTagger;
 import org.grobid.core.engines.tagging.TaggerFactory;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.factory.GrobidFactory;
 import org.grobid.core.utilities.GrobidProperties;
 import org.grobid.trainer.evaluation.EvaluationUtilities;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,7 +59,7 @@ public void train() {
 
         File dirModelPath = new File(GrobidProperties.getModelPath(model).getAbsolutePath()).getParentFile();
         if (!dirModelPath.exists()) {
-            LOGGER.warn("Cannot find the destination directory " + dirModelPath.getAbsolutePath() + " for the model " + model.toString() + ". Creating it.");
+            LOGGER.warn("Cannot find the destination directory " + dirModelPath.getAbsolutePath() + " for the model " + model.getModelName() + ". Creating it.");
             dirModelPath.mkdir();
             //throw new GrobidException("Cannot find the destination directory " + dirModelPath.getAbsolutePath() + " for the model " + model.toString());
         }

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -669,8 +669,8 @@ else if (features.blockStatus == null) {
 
         }
 
-        return new Pair<String,LayoutTokenization>(fulltext.toString(),
-			new LayoutTokenization(layoutTokens));
+        return new Pair<>(fulltext.toString(),
+            new LayoutTokenization(layoutTokens));
 	}
 
 	/**

File: grobid-core/src/main/java/org/grobid/core/lexicon/Lexicon.java
Patch:
@@ -886,7 +886,7 @@ public List<OffsetPosition> tokenPositionsPersonTitleNames(String s) {
      * Soft look-up in person title gazetteer for a given list of LayoutToken objects
      * with token positions
      */
-    public List<OffsetPosition> tokenPositionsPersonTitle(List<LayoutToken> s) {
+    public List<OffsetPosition> tokenPositionsPersonTitleNames(List<LayoutToken> s) {
         if (personTitlePattern == null) {
             initPersonTitles();
         }

File: grobid-trainer/src/main/java/org/grobid/trainer/NameCitationTrainer.java
Patch:
@@ -30,7 +30,7 @@ public NameCitationTrainer() {
 	 * 
 	 * @param corpusDir
 	 *            a path where corpus files are located
-	 * @param trainingOutputPath
+	 * @param modelOutputPath
 	 *            path where to store the temporary training data
 	 * @return the total number of used corpus items 
 	 */
@@ -126,7 +126,7 @@ public boolean accept(File dir, String name) {
 						pos += token.getText().length();
 					}
 
-					titlePositions = Lexicon.getInstance().tokenPositionsPersonTitle(allTokens.get(i));
+					titlePositions = Lexicon.getInstance().tokenPositionsPersonTitleNames(allTokens.get(i));
             		suffixPositions = Lexicon.getInstance().tokenPositionsPersonSuffix(allTokens.get(i));
 
 					final String names = FeaturesVectorName.addFeaturesName(allTokens.get(i), 

File: grobid-trainer/src/main/java/org/grobid/trainer/NameHeaderTrainer.java
Patch:
@@ -129,7 +129,7 @@ public boolean accept(File dir, String name) {
 						pos += token.getText().length();
 					}
 
-					titlePositions = Lexicon.getInstance().tokenPositionsPersonTitle(allTokens.get(i));
+					titlePositions = Lexicon.getInstance().tokenPositionsPersonTitleNames(allTokens.get(i));
             		suffixPositions = Lexicon.getInstance().tokenPositionsPersonSuffix(allTokens.get(i));
 
 					final String names = FeaturesVectorName.addFeaturesName(allTokens.get(i), 

File: grobid-core/src/main/java/org/grobid/core/utilities/Consolidation.java
Patch:
@@ -10,7 +10,6 @@
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.sax.CrossrefUnixrefSaxParser;
 import org.grobid.core.utilities.crossref.*;
-import org.grobid.core.utilities.crossref.CrossrefClient.RequestMode;
 import org.grobid.core.utilities.counters.CntManager;
 
 import org.slf4j.Logger;
@@ -51,7 +50,7 @@ public class Consolidation {
 
     public Consolidation(CntManager cntManager) {
         this.cntManager = cntManager;
-        client = new CrossrefClient(RequestMode.MUCHTHENSTOP);
+        client = new CrossrefClient();
         workDeserializer = new WorkDeserializer();
     }
 

File: grobid-core/src/main/java/org/grobid/core/utilities/Consolidation.java
Patch:
@@ -10,7 +10,6 @@
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.sax.CrossrefUnixrefSaxParser;
 import org.grobid.core.utilities.crossref.*;
-import org.grobid.core.utilities.crossref.CrossrefClient.RequestMode;
 import org.grobid.core.utilities.counters.CntManager;
 
 import org.slf4j.Logger;
@@ -51,7 +50,7 @@ public class Consolidation {
 
     public Consolidation(CntManager cntManager) {
         this.cntManager = cntManager;
-        client = new CrossrefClient(RequestMode.MUCHTHENSTOP);
+        client = new CrossrefClient();
         workDeserializer = new WorkDeserializer();
     }
 

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -1764,8 +1764,8 @@ public void checkIdentifier() {
             }
         } 
         if (!StringUtils.isEmpty(pubnum) && StringUtils.isEmpty(arXivId)) {
-            Matcher doiMatcher = TextUtilities.arXivPattern.matcher(pubnum);
-            if (doiMatcher.find()) { 
+            Matcher arxivMatcher = TextUtilities.arXivPattern.matcher(pubnum);
+            if (arxivMatcher.find()) { 
                 setArXivId(pubnum);
                 setPubnum(null);
             }

File: grobid-core/src/main/java/org/grobid/core/utilities/TextUtilities.java
Patch:
@@ -58,7 +58,7 @@ public class TextUtilities {
     // a regular expression for arXiv identifiers
     // see https://arxiv.org/help/arxiv_identifier and https://arxiv.org/help/arxiv_identifier_for_services
     static public final Pattern arXivPattern = Pattern
-            .compile("(arXiv\\s?(\\.org)?\\s?\\:\\s?\\d{4}\\s?\\.\\s?\\d{4,5}(v\\d+)?)|(arXiv\\s?(\\.org)\\s?\\:\\s?[ a-zA-Z\\-\\.]*\\s?/\\s?\\d{7}(v\\d+)?)");
+            .compile("(arXiv\\s?(\\.org)?\\s?\\:\\s?\\d{4}\\s?\\.\\s?\\d{4,5}(v\\d+)?)|(arXiv\\s?(\\.org)?\\s?\\:\\s?[ a-zA-Z\\-\\.]*\\s?/\\s?\\d{7}(v\\d+)?)");
 
     // a regular expression for identifying url pattern in text
     // TODO: maybe find a better regex 

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequestListener.java
Patch:
@@ -44,7 +44,7 @@ public int getOneStepTime() {
 			return interval/limitIterations;
 		}
 		
-		public String toSring() {
+		public String toString() {
 			return "Response (status:"+status+" timeLimit:"+interval+"/"+limitIterations+", results:"+results.size();
 		}
 		

File: grobid-core/src/main/java/org/grobid/core/utilities/crossref/CrossrefRequestTask.java
Patch:
@@ -20,6 +20,7 @@ public class CrossrefRequestTask<T extends Object> extends CrossrefRequestListen
 
 	public static void printLog(CrossrefRequest<?> request, String message) {
 		logger.info((request != null ? request+": " : "")+message);
+		System.out.println((request != null ? request+": " : "")+message);
 	}
 	
 	
@@ -46,7 +47,7 @@ public void run() {
 					int sleepTime = (int)(client.lastResponse.getOneStepTime()-stepElapsedTime);
 					printLog(request, ".. but sleep for "+sleepTime+"ms");
 					Thread.sleep(sleepTime);
-				}
+				} 
 				
 				printLog(request, ".. executing at "+(client.lastResponse != null ? (int)(System.currentTimeMillis() - client.lastResponse.time) : 0)+"ms from last reponse");
 			}
@@ -62,7 +63,7 @@ else if (client.requestMode == RequestMode.MUCHTHENSTOP) {
 				
 				printLog(request, ".. executing at "+(System.currentTimeMillis() - client.firstItTime)+"ms from last interval ("+client.itFromLastInterval+"it)");
 			}
-			
+						
 			request.addListener(this);
 			request.execute();
 			

File: grobid-trainer/src/main/java/org/grobid/trainer/CitationTrainer.java
Patch:
@@ -116,6 +116,7 @@ public boolean accept(File dir, String name) {
 	        List<OffsetPosition> locationsPositions;
 	        List<OffsetPosition> collaborationsPositions;
 	        List<OffsetPosition> identifiersPositions;
+	        List<OffsetPosition> urlPositions;
 
 			int n = 0;
 			for (; n < refFiles.length; n++) {
@@ -149,11 +150,12 @@ public boolean accept(File dir, String name) {
 	                locationsPositions = lexicon.inLocationNamesLayoutToken(allTokens.get(i));
 	                collaborationsPositions = lexicon.inCollaborationNamesLayoutToken(allTokens.get(i));
 	                identifiersPositions = lexicon.inIdentifierPatternLayoutToken(allTokens.get(i));
+	                urlPositions = lexicon.inUrlPatternLayoutToken(allTokens.get(i));
 
 					String citation = FeaturesVectorCitation.addFeaturesCitation(allTokens.get(i), 
 							allLabeled.get(i), journalsPositions, abbrevJournalsPositions, 
 							conferencesPositions, publishersPositions, locationsPositions, 
-							collaborationsPositions, identifiersPositions);
+							collaborationsPositions, identifiersPositions, urlPositions);
 
 					if ( (writer2 == null) && (writer3 != null) )
 						writer3.write(citation + "\n \n");

File: grobid-core/src/test/java/org/grobid/core/test/TestCitationParser.java
Patch:
@@ -29,7 +29,7 @@ public void testCitationParser1_withoutConsolidation() throws Exception {
     @Test
     public void testCitationParser2_withoutConsolidation() throws Exception {
         String citation2 = "Sanda M. Harabagiu, Steven J. Maiorano and Marius A. Pasca. Open-Domain Textual " +
-                "Question Answering Techniques. Natural Language Engineering 9 (3):1-38, 2003.";
+                "Question Answering Techniques. Natural Language Engineering, 9 (3):1-38, 2003.";
         BiblioItem resCitation = engine.processRawReference(citation2, false);
         assertNotNull(resCitation);
 

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -492,8 +492,8 @@ static public Pair<String,List<LayoutToken>> getReferencesSectionFeatured(Docume
 			boolean previousNewline = true;
 			currentLineLength = 0;
 			String currentLineProfile = null;
-			for(n = dp1.getTokenDocPos(); n < dp2.getTokenDocPos(); n++) {
-				String text = tokenizations.get(n).getText();
+            for (n = dp1.getTokenDocPos(); n <= dp2.getTokenDocPos(); n++) {
+                String text = tokenizations.get(n).getText();
 
 				if (text == null) {
 					continue;
@@ -783,6 +783,6 @@ else if (features.blockStatus == null) {
 		if (previousFeatures != null)
 	      	citations.append(previousFeatures.printVector());
 
-	   	return new Pair<String,List<LayoutToken>>(citations.toString(), tokenizationsReferences);
+	   	return new Pair<>(citations.toString(), tokenizationsReferences);
 	}
 }

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -492,8 +492,8 @@ static public Pair<String,List<LayoutToken>> getReferencesSectionFeatured(Docume
 			boolean previousNewline = true;
 			currentLineLength = 0;
 			String currentLineProfile = null;
-			for(n = dp1.getTokenDocPos(); n < dp2.getTokenDocPos(); n++) {
-				String text = tokenizations.get(n).getText();
+            for (n = dp1.getTokenDocPos(); n <= dp2.getTokenDocPos(); n++) {
+                String text = tokenizations.get(n).getText();
 
 				if (text == null) {
 					continue;
@@ -783,6 +783,6 @@ else if (features.blockStatus == null) {
 		if (previousFeatures != null)
 	      	citations.append(previousFeatures.printVector());
 
-	   	return new Pair<String,List<LayoutToken>>(citations.toString(), tokenizationsReferences);
+	   	return new Pair<>(citations.toString(), tokenizationsReferences);
 	}
 }

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -9,6 +9,7 @@
 import org.grobid.core.lexicon.Lexicon;
 import org.grobid.core.utilities.OffsetPosition;
 import org.grobid.core.utilities.TextUtilities;
+import org.grobid.core.utilities.UnicodeUtil;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 
 import java.util.ArrayList;
@@ -32,6 +33,7 @@ public ArrayList<Affiliation> processing(String input) {
             }
 
             ArrayList<String> affiliationBlocks = new ArrayList<String>();
+            input = UnicodeUtil.normaliseText(input);
             input = input.trim();
 
             input = TextUtilities.dehyphenize(input);
@@ -47,9 +49,7 @@ public ArrayList<Affiliation> processing(String input) {
                 if (tok.equals("\n")) {
                     //tokenizations.add(" ");
 					tokenizations.set(p, " ");
-                } /*else {
-                    tokenizations.add(tok);
-                }*/
+                } 
                 if (!tok.equals(" ")) {
                     if (tok.equals("\n")) {
                         affiliationBlocks.add("@newline");

File: grobid-core/src/main/java/org/grobid/core/engines/DateParser.java
Patch:
@@ -40,7 +40,9 @@ public List<Date> processing(String input) {
             //while (st.hasMoreTokens()) {
             //    String tok = st.nextToken();
 			for(String tok : tokenizations) {
-                if (!tok.equals(" ")) {
+                if (!tok.equals(" ") && !tok.equals("\n")) {
+                    // parano final sanitisation
+                    tok = tok.replaceAll("[ \n]", "");
                     dateBlocks.add(tok + " <date>");
                 }
             }

File: grobid-core/src/main/java/org/grobid/core/layout/LayoutToken.java
Patch:
@@ -1,5 +1,7 @@
 package org.grobid.core.layout;
 
+import org.grobid.core.utilities.UnicodeUtil;
+
 /**
  * Class for representing the layout information associated to a PDF object.
  *

File: grobid-core/src/main/java/org/grobid/core/utilities/TextUtilities.java
Patch:
@@ -31,7 +31,7 @@ public class TextUtilities {
 
     public static final String punctuations = " •*,:;?.!)-−–\"“”‘’'`$]*\u2666\u2665\u2663\u2660\u00A0";
     public static final String fullPunctuations = "([ •*,:;?.!/)-−–‐\"“”‘’'`$]*\u2666\u2665\u2663\u2660\u00A0";
-    public static String delimiters = "\n\r\t\u00A0" + fullPunctuations;
+    public static String delimiters = "\n\r\t\f\u00A0" + fullPunctuations;
 
     public static final String OR = "|";
     public static final String NEW_LINE = "\n";

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -1365,7 +1365,7 @@ else if (addSpace)
      * @param tokenizations list of tokens
      * @return a result
      */
-    private StringBuilder trainingExtraction(String result, boolean intro, List<LayoutToken> tokenizations) {
+    public StringBuilder trainingExtraction(String result, boolean intro, List<LayoutToken> tokenizations) {
         // this is the main buffer for the whole header
         StringBuilder buffer = new StringBuilder();
 

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -710,7 +710,7 @@ public void createTrainingSegmentation(String inputFile,
      * @param tokenizations toks
      * @return extraction
      */
-    private StringBuffer trainingExtraction(String result,
+    public StringBuffer trainingExtraction(String result,
                                             List<LayoutToken> tokenizations,
                                             Document doc) {
         // this is the main buffer for the whole full text

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EndToEndEvaluation.java
Patch:
@@ -1522,7 +1522,7 @@ public static void main(String[] args) {
 
 		String inputType = args[0];
 		if ( (inputType == null) || (inputType.length() == 0) || (!inputType.equals("nlm") && !inputType.equals("tei")) ) {
-			System.err.println("Input type is not correctly set, should be [tei|gold]");
+			System.err.println("Input type is not correctly set, should be [tei|nlm]");
 		}
 
 		boolean runGrobidVal = true;

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EndToEndEvaluation.java
Patch:
@@ -1521,7 +1521,7 @@ public static void main(String[] args) {
 		}
 
 		String inputType = args[0];
-		if ( (inputType == null) || (inputType.length() == 0) || (!inputType.equals("gold") && !inputType.equals("tei")) ) {
+		if ( (inputType == null) || (inputType.length() == 0) || (!inputType.equals("nlp") && !inputType.equals("tei")) ) {
 			System.err.println("Input type is not correctly set, should be [tei|gold]");
 		}
 

File: grobid-core/src/main/java/org/grobid/core/lang/Language.java
Patch:
@@ -26,7 +26,7 @@ public Language(String langId, double confidence) {
         }
 
         if ((langId.length() != 3 && langId.length() != 2 && (!langId.equals("sorb")) && 
-            (!langId.equals("zh-cn"))) || !(Character.isLetter(langId.charAt(0)) 
+            (!langId.equals("zh-cn")) && (!langId.equals("zh-tw"))) || !(Character.isLetter(langId.charAt(0))
             && Character.isLetter(langId.charAt(1)))) {
             throw new GrobidException("Language id should consist of two or three letters, but was: " + langId);
         }

File: grobid-core/src/main/java/org/grobid/core/lang/Language.java
Patch:
@@ -26,7 +26,7 @@ public Language(String langId, double confidence) {
         }
 
         if ((langId.length() != 3 && langId.length() != 2 && (!langId.equals("sorb")) && 
-            (!langId.equals("zh-cn"))) || !(Character.isLetter(langId.charAt(0)) 
+            (!langId.equals("zh-cn")) && (!langId.equals("zh-tw"))) || !(Character.isLetter(langId.charAt(0))
             && Character.isLetter(langId.charAt(1)))) {
             throw new GrobidException("Language id should consist of two or three letters, but was: " + langId);
         }

File: grobid-service/src/test/java/org/grobid/service/module/TestGrobidServiceModule.java
Patch:
@@ -19,7 +19,7 @@
 
 public class TestGrobidServiceModule extends GrobidServiceModule {
 
-    public static final String TEST_CONFIG_FILE = "src/test/resources/config/test-config.yaml";
+    public static final String TEST_CONFIG_FILE = "src/test/resources/setup/config/test-config.yaml";
 
     public TestGrobidServiceModule() {
         super();

File: grobid-service/src/test/java/org/grobid/service/process/GrobidRestProcessFilesTest.java
Patch:
@@ -20,9 +20,6 @@
 
 import static org.easymock.EasyMock.*;
 
-/**
- * Created by lfoppiano on 01/12/16.
- */
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({CitationsVisualizer.class, BlockVisualizer.class, FigureTableVisualizer.class})
 public class GrobidRestProcessFilesTest {

File: grobid-service/src/main/java/org/grobid/service/main/GrobidServiceApplication.java
Patch:
@@ -64,6 +64,7 @@ public static void main(String... args) throws Exception {
                 File confLocation = new File(p).getAbsoluteFile();
                 if (confLocation.exists()) {
                     foundConf = confLocation.getAbsolutePath();
+                    LOGGER.info("Found conf path: " + foundConf);
                     break;
                 }
             }

File: grobid-core/src/main/java/org/grobid/core/utilities/Consolidation.java
Patch:
@@ -564,9 +564,10 @@ public boolean consolidateCrossrefGetByJournalVolumeFirstPage(String aut,
                     urlConn.setRequestMethod("GET");
 
                     urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
-
-                    InputStream in = urlConn.getInputStream();
+                    InputStream in = null;
                     try {
+                        in = urlConn.getInputStream();
+
                         xml = TextUtilities.convertStreamToString(in);
 
                         InputSource is = new InputSource();

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -99,7 +99,7 @@ private void processHeaderDirectory(File[] files, final GrobidMainArgs pGbdArgs,
                         result = getEngine().processHeader(currPdf.getAbsolutePath(), false, null);
 						File outputPathFile = new File(outputPath);
 						if (!outputPathFile.exists()) {
-							outputPathFile.mkdir();
+							outputPathFile.mkdirs();
 						}
 						if (currPdf.getName().endsWith(".pdf")) {
                         	IOUtilities.writeInFile(outputPath + File.separator

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -138,7 +138,6 @@ public Document processing(DocumentSource documentSource,
 					LOGGER.debug("Fulltext model: The input to the CRF processing is empty");
 				}
 				//LOGGER.info(rese);
-				//System.out.println(rese);
 				// we apply now the figure and table models based on the fulltext labeled output
 				figures = processFigures(rese, layoutTokenization.getTokenization(), doc);
 				tables = processTables(rese, layoutTokenization.getTokenization(), doc);

File: grobid-core/src/main/java/org/grobid/core/engines/label/TaggingLabels.java
Patch:
@@ -129,13 +129,15 @@ protected static void register(TaggingLabel label) {
         register(CITATION_MARKER);
         register(TABLE_MARKER);
         register(FIGURE_MARKER);
+        register(EQUATION_MARKER);
         register(PARAGRAPH);
         register(ITEM);
         register(OTHER);
         register(SECTION);
         register(FIGURE);
         register(TABLE);
         register(EQUATION);
+        register(EQUATION_LABEL);
 
         //header
         register(HEADER_DATE);

File: grobid-core/src/main/java/org/grobid/core/engines/ProcessEngine.java
Patch:
@@ -98,7 +98,7 @@ private void processHeaderDirectory(File[] files, final GrobidMainArgs pGbdArgs,
                         result = getEngine().processHeader(currPdf.getAbsolutePath(), false, null);
 						File outputPathFile = new File(outputPath);
 						if (!outputPathFile.exists()) {
-							outputPathFile.mkdir();
+							outputPathFile.mkdirs();
 						}
 						if (currPdf.getName().endsWith(".pdf")) {
                         	IOUtilities.writeInFile(outputPath + File.separator

File: grobid-core/src/main/java/org/grobid/core/analyzers/GrobidDefaultAnalyzer.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.lucene.analysis.Analyzer;
 import org.grobid.core.layout.LayoutToken;
+import org.grobid.core.utilities.TextUtilities;
 
 import java.util.List;
 import java.util.ArrayList;
@@ -58,7 +59,8 @@ private static synchronized void getNewInstance() {
     private GrobidDefaultAnalyzer() {
 	}
 
-    public static final String delimiters = " \n\r\t([,:;?.!/)-–−\"“”‘’'`$]*\u2666\u2665\u2663\u2660\u00A0";
+    public static final String delimiters = TextUtilities.delimiters;
+    //" \n\r\t([,:;?.!/)-–−\"“”‘’'`$]*\u2666\u2665\u2663\u2660\u00A0";
 
     public String getName() {
 		return "DefaultGrobidAnalyzer";

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -1436,7 +1436,7 @@ public String cleanAbstract(String string) {
             res = res.trim();
         }
 
-        res = res.replace("@BULLET", " • ");
+        //res = res.replace("@BULLET", " • ");
 
         res = res.replace("( ", "(");
         res = res.replace(" )", ")");

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -1261,9 +1261,9 @@ public String getBody() {
                 String localText = block.getText();
                 if (localText != null) {
                     localText = localText.trim();
-                    if (localText.startsWith("@BULLET")) {
+                    /*if (localText.startsWith("@BULLET")) {
                         localText = localText.replace("@BULLET", " • ");
-                    }
+                    }*/
                     if (localText.startsWith("@IMAGE")) {
                         localText = "";
                     }

File: grobid-trainer/src/main/java/org/grobid/trainer/AbstractTrainer.java
Patch:
@@ -8,6 +8,7 @@
 import org.grobid.core.factory.GrobidFactory;
 import org.grobid.core.utilities.GrobidProperties;
 import org.grobid.trainer.evaluation.EvaluationUtilities;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -18,7 +19,7 @@
  * @author Zholudev, Lopez
  */
 public abstract class AbstractTrainer implements Trainer {
-    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrainer.class);
+    protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrainer.class);
     public static final String OLD_MODEL_EXT = ".old";
     public static final String NEW_MODEL_EXT = ".new";
 

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/Evaluation.java
Patch:
@@ -20,7 +20,8 @@
 //import org.grobid.core.engines.HeaderParser;
 
 /**
- * Class for managing the extraction of bibliographical information from pdf documents.
+ * Class for evaluating the extraction of bibliographical information at header and citation levels.
+ * The generic evaluation in EvaluationUtilities should be preferably used.
  *
  * @author Patrice Lopez
  */

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/PubMedCentralEvaluation.java
Patch:
@@ -33,7 +33,8 @@
 import scala.Option;
 
 /**
- * Evaluation against PubMedCentral native XML documents.
+ * Evaluation against PubMedCentral native XML documents. This is an end-to-end evaluation involving
+ * complete document processing, and therefore a complete set of CRF models.
  *
  * @author Patrice Lopez
  */

File: grobid-core/src/main/java/org/grobid/core/engines/CitationParser.java
Patch:
@@ -15,6 +15,7 @@
 import org.grobid.core.features.FeaturesVectorCitation;
 import org.grobid.core.lexicon.Lexicon;
 import org.grobid.core.utilities.Consolidation;
+import org.grobid.core.utilities.LayoutTokensUtil;
 import org.grobid.core.utilities.OffsetPosition;
 import org.grobid.core.utilities.TextUtilities;
 import org.grobid.core.utilities.counters.CntManager;
@@ -72,7 +73,7 @@ public BiblioItem processing(String input, boolean consolidate) {
             //    final String tok = st.nextToken();
             for (String tok : tokenizations) {
                 //tokenizations.add(tok);
-                if (!tok.equals(" ")) {
+                if (!LayoutTokensUtil.spaceyToken(tok)) {
                     citationBlocks.add(tok + " <citation>");
                 }
             }

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidProperties.java
Patch:
@@ -378,7 +378,9 @@ public static String getVersion() {
             try {
                 grobidVersion = (String) context.lookup("java:comp/env/" + GrobidPropertyKeys.PROP_GROBID_VERSION);
             } catch (final Exception exp) {
-                throw new GrobidPropertyException("Could not set GROBID VERSION", exp);
+                LOGGER.error("Could not set GROBID VERSION", exp);
+                grobidVersion = "unknown";
+//                throw new GrobidPropertyException("Could not set GROBID VERSION", exp);
             }
             GROBID_VERSION = grobidVersion;
         }

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenClusteror.java
Patch:
@@ -45,7 +45,7 @@ public List<TaggingTokenCluster> cluster() {
         List<TaggingTokenCluster> result = new ArrayList<>();
 
         PeekingIterator<LabeledTokensContainer> it = Iterators.peekingIterator(taggingTokenSynchronizer);
-        if (!it.hasNext()) {
+        if (!it.hasNext() || (it.peek() == null)) {
             return Collections.emptyList();
         }
 

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -169,7 +169,7 @@ private List<MatchResult> matchNumberedCitation(String input, List<LayoutToken>
                     cntManager.i(Counters.MANY_CANDIDATES);
 //                    LOGGER.info("MANY CANDIDATES: " + input + "\n" + text + "\n");
                     for (BibDataSet bds : matches) {
-                        LOGGER.info("  " + bds.getRawBib());
+//                        LOGGER.info("  " + bds.getRawBib());
                     }
 
 //                    LOGGER.info("----------");

File: grobid-core/src/main/java/org/grobid/core/visualization/FigureTableVisualizer.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String[] args) {
 //            File input = new File("/Work/temp/figureExtraction/vector/6.pdf");
 
 //            File input = new File("/Users/zholudev/Downloads/AS-134079286616064@1408978401811_content_1.pdf");
-            File input = new File("/Users/zholudev/Downloads/AS-220149891244043@1429499232904_content_1.pdf");
+            File input = new File("/Users/zholudev/Downloads/AS-411011216625664@1475004118387_content_1.pdf");
 
 //
 //

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidPropertyKeys.java
Patch:
@@ -9,7 +9,7 @@ public interface GrobidPropertyKeys {
 
     String PROP_GROBID_IS_CONTEXT_SERVER = "grobid.is.context.server";
 
-    String PROP_VERSION = "grobid.version";
+    String PROP_GROBID_VERSION = "org.grobid.version";
     String PROP_TMP_PATH = "grobid.temp.path";
     //    public static final String PROP_BIN_PATH = "grobid.bin.path";
     String PROP_NATIVE_LIB_PATH = "grobid.nativelibrary.path";

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -12,8 +12,8 @@
 import org.grobid.core.document.xml.XmlBuilderUtils;
 import org.grobid.core.engines.Engine;
 import org.grobid.core.engines.SegmentationLabel;
-import org.grobid.core.engines.TaggingLabel;
-import org.grobid.core.engines.TaggingLabels;
+import org.grobid.core.engines.label.TaggingLabel;
+import org.grobid.core.engines.label.TaggingLabels;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.engines.counters.ReferenceMarkerMatcherCounters;
 import org.grobid.core.exceptions.GrobidException;
@@ -36,7 +36,7 @@
 import java.util.regex.Pattern;
 
 import static org.grobid.core.document.xml.XmlBuilderUtils.teiElement;
-import static org.grobid.core.engines.TaggingLabels.TABLE_MARKER;
+import static org.grobid.core.engines.label.TaggingLabels.TABLE_MARKER;
 
 /**
  * Class for generating a TEI representation of a document.

File: grobid-core/src/main/java/org/grobid/core/engines/FigureParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.grobid.core.GrobidModels;
 import org.grobid.core.data.Figure;
+import org.grobid.core.engines.label.TaggingLabel;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.layout.LayoutToken;
@@ -15,7 +16,7 @@
 
 import java.util.List;
 
-import static org.grobid.core.engines.TaggingLabels.*;
+import static org.grobid.core.engines.label.TaggingLabels.*;
 
 /**
  * @author Patrice

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -15,6 +15,7 @@
 import org.grobid.core.engines.citations.ReferenceSegmenter;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.engines.counters.CitationParserCounters;
+import org.grobid.core.engines.label.TaggingLabels;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.exceptions.GrobidResourceException;

File: grobid-core/src/main/java/org/grobid/core/engines/TableParser.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.grobid.core.GrobidModels;
 import org.grobid.core.data.Table;
+import org.grobid.core.engines.label.TaggingLabel;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.layout.LayoutToken;
@@ -17,7 +18,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import static org.grobid.core.engines.TaggingLabels.*;
+import static org.grobid.core.engines.label.TaggingLabels.*;
 
 /**
  * @author Patrice

File: grobid-core/src/main/java/org/grobid/core/engines/label/TaggingLabel.java
Patch:
@@ -1,4 +1,4 @@
-package org.grobid.core.engines;
+package org.grobid.core.engines.label;
 
 import org.grobid.core.GrobidModel;
 import org.grobid.core.engines.counters.Countable;

File: grobid-core/src/main/java/org/grobid/core/engines/label/TaggingLabelImpl.java
Patch:
@@ -1,4 +1,4 @@
-package org.grobid.core.engines;
+package org.grobid.core.engines.label;
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.builder.EqualsBuilder;

File: grobid-core/src/main/java/org/grobid/core/engines/label/TaggingLabels.java
Patch:
@@ -1,4 +1,4 @@
-package org.grobid.core.engines;
+package org.grobid.core.engines.label;
 
 import org.grobid.core.GrobidModel;
 import org.grobid.core.GrobidModels;

File: grobid-core/src/main/java/org/grobid/core/tokenization/LabeledTokensContainer.java
Patch:
@@ -1,6 +1,6 @@
 package org.grobid.core.tokenization;
 
-import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.label.TaggingLabel;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.layout.LayoutToken;
 

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenCluster.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.base.Joiner;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.label.TaggingLabel;
 import org.grobid.core.layout.LayoutToken;
 
 import java.util.ArrayList;

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenClusteror.java
Patch:
@@ -4,9 +4,7 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModel;
-import org.grobid.core.GrobidModels;
-import org.grobid.core.engines.TaggingLabel;
-import org.grobid.core.engines.TaggingLabelImpl;
+import org.grobid.core.engines.label.TaggingLabel;
 import org.grobid.core.layout.LayoutToken;
 
 import java.util.ArrayList;

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenSynchronizer.java
Patch:
@@ -3,8 +3,7 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModel;
-import org.grobid.core.GrobidModels;
-import org.grobid.core.engines.TaggingLabels;
+import org.grobid.core.engines.label.TaggingLabels;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.utilities.LayoutTokensUtil;

File: grobid-core/src/test/java/org/grobid/core/engines/TaggingLabelsTestImpl.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.grobid.core.GrobidModel;
 import org.grobid.core.GrobidModels;
+import org.grobid.core.engines.label.TaggingLabel;
+import org.grobid.core.engines.label.TaggingLabels;
 import org.junit.Test;
 
 import static org.hamcrest.CoreMatchers.is;

File: grobid-core/src/main/java/org/grobid/core/engines/counters/ReferenceMarkerMatcherCounters.java
Patch:
@@ -71,7 +71,7 @@ public String getName() {
     public static final Countable STYLE_OTHER = new Countable() {
         @Override
         public String getName() {
-            return "            return \"STYLE_OTHER\";\n";
+            return "STYLE_OTHER";
         }
     };
 

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -6,7 +6,6 @@
 import nu.xom.Attribute;
 import nu.xom.Element;
 import org.grobid.core.document.xml.XmlBuilderUtils;
-import org.grobid.core.engines.Countable;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.layout.BoundingBox;
 import org.grobid.core.layout.GraphicObject;

File: grobid-core/src/main/java/org/grobid/core/engines/counters/CitationParserCounters.java
Patch:
@@ -1,7 +1,5 @@
 package org.grobid.core.engines.counters;
 
-import org.grobid.core.engines.Countable;
-
 /**
  * User: zholudev
  * Date: 2/25/14

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -6,6 +6,7 @@
 import nu.xom.Attribute;
 import nu.xom.Element;
 import org.grobid.core.document.xml.XmlBuilderUtils;
+import org.grobid.core.engines.Countable;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.layout.BoundingBox;
 import org.grobid.core.layout.GraphicObject;

File: grobid-core/src/main/java/org/grobid/core/engines/counters/CitationParserCounters.java
Patch:
@@ -1,5 +1,7 @@
 package org.grobid.core.engines.counters;
 
+import org.grobid.core.engines.Countable;
+
 /**
  * User: zholudev
  * Date: 2/25/14

File: grobid-core/src/main/java/org/grobid/core/engines/counters/CitationParserCounters.java
Patch:
@@ -1,7 +1,5 @@
 package org.grobid.core.engines.counters;
 
-import org.grobid.core.engines.Countable;
-
 /**
  * User: zholudev
  * Date: 2/25/14

File: grobid-core/src/main/java/org/grobid/core/engines/counters/Countable.java
Patch:
@@ -1,4 +1,4 @@
-package org.grobid.core.engines;
+package org.grobid.core.engines.counters;
 
 /**
  * Created by lfoppiano on 25/11/16.
@@ -7,6 +7,4 @@ public interface Countable {
 
     String getName();
 
-
-
 }

File: grobid-core/src/main/java/org/grobid/core/engines/counters/FigureCounters.java
Patch:
@@ -1,7 +1,5 @@
 package org.grobid.core.engines.counters;
 
-import org.grobid.core.engines.Countable;
-
 /**
  * Created by lfoppiano on 25/11/16.
  */

File: grobid-core/src/main/java/org/grobid/core/engines/counters/ReferenceMarkerMatcherCounters.java
Patch:
@@ -1,7 +1,5 @@
 package org.grobid.core.engines.counters;
 
-import org.grobid.core.engines.Countable;
-
 /**
  * Created by lfoppiano on 25/11/16.
  */

File: grobid-core/src/main/java/org/grobid/core/engines/counters/TableRejectionCounters.java
Patch:
@@ -1,7 +1,5 @@
 package org.grobid.core.engines.counters;
 
-import org.grobid.core.engines.Countable;
-
 /**
  * Created by lfoppiano on 25/11/16.
  */

File: grobid-core/src/main/java/org/grobid/core/engines/tagging/GenericTaggerUtils.java
Patch:
@@ -6,6 +6,7 @@
 import com.google.common.collect.Lists;
 import org.grobid.core.utilities.Pair;
 import org.grobid.core.utilities.Triple;
+import org.wipo.analyzers.wipokr.utils.StringUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -65,10 +66,10 @@ public static List<Triple<String, String, String>> getTokensWithLabelsAndFeature
     // I-<citation> --> <citation>
     // <citation> --> <citation>
     public static String getPlainLabel(String label) {
-        return label == null ? null : label.startsWith(START_ENTITY_LABEL_PREFIX) ? label.substring(2) : label;
+        return StringUtil.startsWith(label, START_ENTITY_LABEL_PREFIX) ? StringUtil.substring(label, 2) : label;
     }
 
     public static boolean isBeginningOfEntity(String label) {
-        return label.startsWith(START_ENTITY_LABEL_PREFIX);
+        return StringUtil.startsWith(label, START_ENTITY_LABEL_PREFIX);
     }
 }

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenClusteror.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.TaggingLabelImpl;
 import org.grobid.core.layout.LayoutToken;
 
 import java.util.ArrayList;
@@ -15,7 +16,6 @@
  * Created by zholudev on 12/01/16.
  * Cluster tokens by label
  */
-
 public class TaggingTokenClusteror {
     private final TaggingTokenSynchronizer taggingTokenSynchronizer;
 

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenSynchronizer.java
Patch:
@@ -3,7 +3,6 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModels;
-import org.grobid.core.engines.TaggingLabel;
 import org.grobid.core.engines.TaggingLabels;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.layout.LayoutToken;

File: grobid-core/src/main/java/org/grobid/core/utilities/counters/CntManager.java
Patch:
@@ -1,6 +1,6 @@
 package org.grobid.core.utilities.counters;
 
-import org.grobid.core.engines.Countable;
+import org.grobid.core.engines.counters.Countable;
 
 import java.io.Serializable;
 import java.util.Map;

File: grobid-core/src/main/java/org/grobid/core/utilities/counters/impl/NoOpCntManagerImpl.java
Patch:
@@ -1,6 +1,6 @@
 package org.grobid.core.utilities.counters.impl;
 
-import org.grobid.core.engines.Countable;
+import org.grobid.core.engines.counters.Countable;
 import org.grobid.core.utilities.counters.CntManager;
 import org.grobid.core.utilities.counters.CntsMetric;
 import org.grobid.core.utilities.counters.Counter;

File: grobid-core/src/test/java/org/grobid/core/GrobidModelsTest.java
Patch:
@@ -70,6 +70,4 @@ public void testGrobidModelsEnum_CustomModel() throws Exception {
         GrobidModel model3 = GrobidModels.modelFor("dictionaries-senses");
         assertTrue(model3.equals(model));
     }
-
-
 }
\ No newline at end of file

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -46,9 +46,9 @@ public enum GrobidModels implements GrobidModel {
     //	ENTITIES_BIOTECH("entities/biotech"),
     ENTITIES_BIOTECH("bio"),
     ASTRO("astro"),
-	LEXICAL_ENTRY("lexical-entry"),
-	DICTIONARY_BODY_SEGMENTATION("dictionary-body-segmentation"),
-	DICTIONARY_SEGMENTATION("dictionary-segmentation");
+    LEXICAL_ENTRY("lexical-entry"),
+    DICTIONARY_BODY_SEGMENTATION("dictionary-body-segmentation"),
+    DICTIONARY_SEGMENTATION("dictionary-segmentation");
 
     /**
      * Absolute path to the model.

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -1297,12 +1297,12 @@ private List<Figure> processFigures(String rese,
                                                   List<LayoutToken> tokenizations,
                                                   Document doc) {
 
-        List<Figure> results = new ArrayList<Figure>();
+        List<Figure> results = new ArrayList<>();
 
         TaggingTokenClusteror clusteror = new TaggingTokenClusteror(GrobidModels.FULLTEXT, rese, tokenizations, true);
 
         for (TaggingTokenCluster cluster : Iterables.filter(clusteror.cluster(),
-				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabel.FIGURE))) {
+				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabels.FIGURE))) {
             List<LayoutToken> tokenizationFigure = cluster.concatTokens();
             Figure result = parsers.getFigureParser().processing(
                     tokenizationFigure,
@@ -1572,7 +1572,7 @@ private List<Table> processTables(String rese,
 		TaggingTokenClusteror clusteror = new TaggingTokenClusteror(GrobidModels.FULLTEXT, rese, tokenizations, true);
 
 		for (TaggingTokenCluster cluster : Iterables.filter(clusteror.cluster(),
-				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabel.TABLE))) {
+				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabels.TABLE))) {
 			List<LayoutToken> tokenizationTable = cluster.concatTokens();
 			Table result = parsers.getTableParser().processing(
 					tokenizationTable,

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenSynchronizer.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModels;
 import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.TaggingLabels;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.utilities.LayoutTokensUtil;
@@ -117,7 +118,7 @@ public LabeledTokensContainer next() {
 
         tokensAndLabelsPtr++;
         LabeledTokensContainer labeledTokensContainer =
-                new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabel.getLabel(grobidModel, label),
+                new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabels.labelFor(grobidModel, label),
                 GenericTaggerUtils.isBeginningOfEntity(label));
 
         labeledTokensContainer.setFeatureString(featureString);

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -47,7 +47,7 @@ public enum GrobidModels implements GrobidModel {
     ENTITIES_BIOTECH("bio"),
     ASTRO("astro"),
 	LEXICAL_ENTRY("lexical-entry"),
-	DICTIONARY_BODY_SEGMENTATION("dictionary-body-segementation"),
+	DICTIONARY_BODY_SEGMENTATION("dictionary-body-segmentation"),
 	DICTIONARY_SEGMENTATION("dictionary-segmentation");
 
     /**

File: grobid-core/src/main/java/org/grobid/core/engines/FigureParser.java
Patch:
@@ -61,11 +61,11 @@ private Figure getExtractionResult(List<LayoutToken> tokenizations, String resul
                 continue;
             }
 
-            TaggingLabel clusterLabel = cluster.getTaggingLabel();
-            Engine.getCntManager().i((TaggingLabels) clusterLabel);
+            TaggingLabels clusterLabel = cluster.getTaggingLabels();
+            Engine.getCntManager().i(clusterLabel);
 
             String clusterContent = LayoutTokensUtil.normalizeText(LayoutTokensUtil.toText(cluster.concatTokens()));
-            switch ((TaggingLabels) clusterLabel) {
+            switch (clusterLabel) {
                 case FIG_DESC:
                     figure.appendCaption(clusterContent);
                     break;

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenSynchronizer.java
Patch:
@@ -117,7 +117,7 @@ public LabeledTokensContainer next() {
 
         tokensAndLabelsPtr++;
         LabeledTokensContainer labeledTokensContainer =
-                new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabels.labelFor(grobidModel, label),
+                new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabels.getLabel(grobidModel, label),
                 GenericTaggerUtils.isBeginningOfEntity(label));
 
         labeledTokensContainer.setFeatureString(featureString);

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -52,7 +52,7 @@ public enum GrobidModels implements GrobidModel {
 
     private String folderName;
 
-    private static final ConcurrentMap<String, GrobidModel> models = new ConcurrentHashMap<String, GrobidModel>();
+    private static final ConcurrentMap<String, GrobidModel> models = new ConcurrentHashMap<>();
 
     GrobidModels(String folderName) {
         this.folderName = folderName;

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -1299,7 +1299,7 @@ private List<Figure> processFigures(String rese,
         TaggingTokenClusteror clusteror = new TaggingTokenClusteror(GrobidModels.FULLTEXT, rese, tokenizations, true);
 
         for (TaggingTokenCluster cluster : Iterables.filter(clusteror.cluster(),
-				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabel.FIGURE))) {
+				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabels.FIGURE))) {
             List<LayoutToken> tokenizationFigure = cluster.concatTokens();
             Figure result = parsers.getFigureParser().processing(
                     tokenizationFigure,
@@ -1569,7 +1569,7 @@ private List<Table> processTables(String rese,
 		TaggingTokenClusteror clusteror = new TaggingTokenClusteror(GrobidModels.FULLTEXT, rese, tokenizations, true);
 
 		for (TaggingTokenCluster cluster : Iterables.filter(clusteror.cluster(),
-				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabel.TABLE))) {
+				new TaggingTokenClusteror.LabelTypePredicate(TaggingLabels.TABLE))) {
 			List<LayoutToken> tokenizationTable = cluster.concatTokens();
 			Table result = parsers.getTableParser().processing(
 					tokenizationTable,

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenCluster.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.TaggingLabels;
 import org.grobid.core.layout.LayoutToken;
 
 import java.util.ArrayList;

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenClusteror.java
Patch:
@@ -4,7 +4,7 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModels;
-import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.TaggingLabels;
 import org.grobid.core.layout.LayoutToken;
 
 import java.util.ArrayList;
@@ -20,9 +20,9 @@ public class TaggingTokenClusteror {
     private final TaggingTokenSynchronizer taggingTokenSynchronizer;
 
     public static class LabelTypePredicate implements Predicate<TaggingTokenCluster> {
-        private TaggingLabel label;
+        private TaggingLabels label;
 
-        public LabelTypePredicate(TaggingLabel label) {
+        public LabelTypePredicate(TaggingLabels label) {
             this.label = label;
         }
 

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenSynchronizer.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.PeekingIterator;
 import org.grobid.core.GrobidModels;
-import org.grobid.core.engines.TaggingLabel;
+import org.grobid.core.engines.TaggingLabels;
 import org.grobid.core.engines.tagging.GenericTaggerUtils;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.utilities.LayoutTokensUtil;
@@ -117,7 +117,7 @@ public LabeledTokensContainer next() {
 
         tokensAndLabelsPtr++;
         LabeledTokensContainer labeledTokensContainer =
-                new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabel.getLabel(grobidModel, label),
+                new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabels.labelFor(grobidModel, label),
                 GenericTaggerUtils.isBeginningOfEntity(label));
 
         labeledTokensContainer.setFeatureString(featureString);

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -23,6 +23,9 @@
 /**
  * Created by zholudev on 18/12/15.
  * Matching reference markers to extracted citations
+ *   
+ * PL: TODO use TextUtilities dehyphenization method rather than toTextDehyphenized
+ *
  */
 public class ReferenceMarkerMatcher {
     private static final Logger LOGGER = LoggerFactory.getLogger(ReferenceMarkerMatcher.class);

File: grobid-core/src/main/java/org/grobid/core/features/FeaturesVectorName.java
Patch:
@@ -34,9 +34,6 @@ public String printVector() {
         // lowercase string
         res.append(" " + string.toLowerCase());
 
-        // prefix (4)
-        res.append(" " + string.substring(0, 1));
-
         // prefix (4)
         res.append(" " + TextUtilities.prefix(string, 1));
         res.append(" " + TextUtilities.prefix(string, 2));

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -81,8 +81,7 @@ public Pair<String, Document> processing2(String pdfInput, boolean consolidate,
                                               BiblioItem resHeader, GrobidAnalysisConfig config) {
         DocumentSource documentSource = null;
         try {
-            documentSource = DocumentSource.fromPdf(new File(pdfInput), config.getStartPage(), config.getEndPage(),
-                    config.getPdfAssetPath() != null);
+            documentSource = DocumentSource.fromPdf(new File(pdfInput), config.getStartPage(), config.getEndPage());
             Document doc = new Document(documentSource);
             doc.addTokenizedDocument(config);
 

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -88,7 +88,7 @@ public Segmentation() {
         super(GrobidModels.SEGMENTATION);
     }
 
-    public Document processing(File input, GrobidAnalysisConfig config) {
+    /*public Document processing(File input, GrobidAnalysisConfig config) {
         if (input == null) {
             throw new GrobidResourceException("Cannot process pdf file, because input file was null.");
         }
@@ -100,7 +100,8 @@ public Document processing(File input, GrobidAnalysisConfig config) {
                 config.getPdfAssetPath() != null);
 
         return processing(documentSource, config);
-    }
+    }*/
+    
     /**
      * Segment a PDF document into high level zones: cover page, document header,
      * page footer, page header, body, page numbers, biblio section and annexes.

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -48,6 +48,9 @@ public static DocumentSource fromPdf(File pdfFile) {
 //        return fromPdf(pdfFile, startPage, endPage, false);
 //    }
 
+    /**
+     * By default the XML extracted from the PDF is without images, to avoid flooding the grobid-home/tmp directory
+     */
     public static DocumentSource fromPdf(File pdfFile, int startPage, int endPage) {
         return fromPdf(pdfFile, startPage, endPage, false);
     }

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -81,7 +81,8 @@ public Pair<String, Document> processing2(String pdfInput, boolean consolidate,
                                               BiblioItem resHeader, GrobidAnalysisConfig config) {
         DocumentSource documentSource = null;
         try {
-            documentSource = DocumentSource.fromPdf(new File(pdfInput), config.getStartPage(), config.getEndPage());
+            documentSource = DocumentSource.fromPdf(new File(pdfInput), config.getStartPage(), config.getEndPage(),
+                    config.getPdfAssetPath() != null);
             Document doc = new Document(documentSource);
             doc.addTokenizedDocument(config);
 
@@ -922,7 +923,7 @@ public Document createTrainingHeader(String inputFile, String pathHeader, String
                     // extracted from the pdf
                     writer = new OutputStreamWriter(new FileOutputStream(new File(pathTEI + File.separator
                             + pdfFileName.replace(".pdf", GrobidProperties.FILE_ENDING_TEI_HEADER)), false), "UTF-8");
-                    writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\"" 
+                    writer.write("<?xml version=\"1.0\" ?>\n<tei>\n\t<teiHeader>\n\t\t<fileDesc xml:id=\""
         					+ pdfFileName.replace(".pdf", "")
                             + "\"/>\n\t</teiHeader>\n\t<text");
 

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -223,6 +223,7 @@ public double getMinBlockSpacing() {
     }
 
     // to be removed
+    @Deprecated
     public List<LayoutToken> getTokenizationsHeader() {
         List<LayoutToken> tokenizationsHeader = new ArrayList<LayoutToken>();
         for (Integer blocknum : blockDocumentHeaders) {
@@ -247,6 +248,7 @@ public List<LayoutToken> getTokenizationsHeader() {
     }
 
     // to be removed
+    @Deprecated
     public List<LayoutToken> getTokenizationsFulltext() {
         List<LayoutToken> tokenizationsFulltext = new ArrayList<LayoutToken>();
         for (Block blo : blocks) {
@@ -261,6 +263,7 @@ public List<LayoutToken> getTokenizationsFulltext() {
     }
 
     // to be removed
+    @Deprecated
     public List<LayoutToken> getTokenizationsReferences() {
         List<LayoutToken> tokenizationsReferences = new ArrayList<LayoutToken>();
 

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -49,7 +49,7 @@ public static DocumentSource fromPdf(File pdfFile) {
 //    }
 
     public static DocumentSource fromPdf(File pdfFile, int startPage, int endPage) {
-        return fromPdf(pdfFile, startPage, endPage, true);
+        return fromPdf(pdfFile, startPage, endPage, false);
     }
 
     public static DocumentSource fromPdf(File pdfFile, int startPage, int endPage, boolean withImages) {

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -266,7 +266,8 @@ public void createTrainingReferenceSegmentation(File input, String pathTEI, int
 
         try {
             // general segmentation
-            Document doc = parsers.getSegmentationParser().processing(input, GrobidAnalysisConfig.defaultInstance());
+            DocumentSource documentSource = DocumentSource.fromPdf(input);
+            Document doc = parsers.getSegmentationParser().processing(documentSource, GrobidAnalysisConfig.defaultInstance());
 			String referencesStr = doc.getDocumentPartText(SegmentationLabel.REFERENCES);
             if (!referencesStr.isEmpty()) {
 				//String tei = parsers.getReferenceSegmenterParser().createTrainingData2(referencesStr, id);

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -626,7 +626,7 @@ public Response processStatelessReferencesDocument(@FormDataParam(INPUT) InputSt
 	@Produces("application/pdf")
 	@POST
 	public Response processAnnotatePDF(@FormDataParam(INPUT) InputStream inputStream,
-		@FormDataParam("type") String fileName,
+		@FormDataParam("name") String fileName,
 	 	@FormDataParam("type") int type) {
 		GrobidRestUtils.Annotation annotType = null;
 		if (type == 0)

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -3,7 +3,7 @@
 import org.grobid.core.data.util.AuthorEmailAssigner;
 import org.grobid.core.data.util.ClassicAuthorEmailAssigner;
 import org.grobid.core.data.util.EmailSanitizer;
-import org.grobid.core.document.TEIFormater;
+import org.grobid.core.document.TEIFormatter;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.lang.Language;
@@ -1690,7 +1690,7 @@ public String toTEI(int n, int indent, GrobidAnalysisConfig config) {
                 tei.append("\t");
             }
             tei.append("<biblStruct");
-            tei.append(" ").append(TEIFormater.getCoordsAttribute(coordinates, config.isGenerateTeiCoordinates())).append(" ");
+            tei.append(" ").append(TEIFormatter.getCoordsAttribute(coordinates, config.isGenerateTeiCoordinates())).append(" ");
             if (language != null) {
                 if (n == -1) {
                     /*if (pubnum != null) {

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -56,7 +56,7 @@
  * @author Patrice Lopez
  */
 @SuppressWarnings("StringConcatenationInsideStringBuilderAppend")
-public class TEIFormater {
+public class TEIFormatter {
     private Document doc = null;
     public static final Set<TaggingLabel> MARKER_LABELS = Sets.newHashSet(TaggingLabel.CITATION_MARKER, TaggingLabel.FIGURE_MARKER, TaggingLabel.TABLE_MARKER);
 
@@ -81,7 +81,7 @@ public enum SchemaDeclaration {
 
     private static Pattern startNum = Pattern.compile("^(\\d+)(.*)");
 
-    public TEIFormater(Document document) {
+    public TEIFormatter(Document document) {
         doc = document;
     }
 

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -3,7 +3,7 @@
 import org.grobid.core.data.util.AuthorEmailAssigner;
 import org.grobid.core.data.util.ClassicAuthorEmailAssigner;
 import org.grobid.core.data.util.EmailSanitizer;
-import org.grobid.core.document.TEIFormater;
+import org.grobid.core.document.TEIFormatter;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.lang.Language;
@@ -1690,7 +1690,7 @@ public String toTEI(int n, int indent, GrobidAnalysisConfig config) {
                 tei.append("\t");
             }
             tei.append("<biblStruct");
-            tei.append(" ").append(TEIFormater.getCoordsAttribute(coordinates, config.isGenerateTeiCoordinates())).append(" ");
+            tei.append(" ").append(TEIFormatter.getCoordsAttribute(coordinates, config.isGenerateTeiCoordinates())).append(" ");
             if (language != null) {
                 if (n == -1) {
                     /*if (pubnum != null) {

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormatter.java
Patch:
@@ -56,7 +56,7 @@
  * @author Patrice Lopez
  */
 @SuppressWarnings("StringConcatenationInsideStringBuilderAppend")
-public class TEIFormater {
+public class TEIFormatter {
     private Document doc = null;
     public static final Set<TaggingLabel> MARKER_LABELS = Sets.newHashSet(TaggingLabel.CITATION_MARKER, TaggingLabel.FIGURE_MARKER, TaggingLabel.TABLE_MARKER);
 
@@ -81,7 +81,7 @@ public enum SchemaDeclaration {
 
     private static Pattern startNum = Pattern.compile("^(\\d+)(.*)");
 
-    public TEIFormater(Document document) {
+    public TEIFormatter(Document document) {
         doc = document;
     }
 

File: grobid-core/src/test/java/org/grobid/core/document/TEIFormaterTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.grobid.core.test;
+package org.grobid.core.document;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;

File: grobid-core/src/main/java/org/grobid/core/process/ProcessPdf2Xml.java
Patch:
@@ -28,7 +28,7 @@ public static Integer process(List<String> cmd) {
 
         } catch (InterruptedException ignore) {
             // Process needs to be destroyed -- it's done in the finally block
-            LOGGER.warn("pdf2xml process is going to be destroyed.");
+            LOGGER.warn("pdf2xml process is about to be killed.");
         } catch (IOException ioExp) {
             LOGGER.error("IOException while launching the command {} : {}",
                     cmd, ioExp.getMessage());

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -9,7 +9,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SortedSetMultimap;
-import javafx.scene.control.Tab;
 import org.grobid.core.data.BibDataSet;
 import org.grobid.core.data.BiblioItem;
 import org.grobid.core.data.Figure;

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -1651,14 +1651,14 @@ private void recalculateVectorBoxCoords(Figure f, GraphicObject g) {
 
     private List<LayoutToken> getFigureLayoutTokens(Figure f) {
         List<LayoutToken> result = new ArrayList<>();
-        int i = 0;
         Iterator<Integer> it = f.getBlockPtrs().iterator();
 
         while (it.hasNext()) {
             Integer blockPtr = it.next();
 
             Block figBlock = getBlocks().get(blockPtr);
-            if (LayoutTokensUtil.toText(figBlock.getTokens()).trim().toLowerCase().startsWith("fig")) {
+            String norm = LayoutTokensUtil.toText(figBlock.getTokens()).trim().toLowerCase();
+            if (norm.startsWith("fig") || norm.startsWith("abb")) {
                 result.addAll(figBlock.getTokens());
 
                 while (it.hasNext()) {

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -88,7 +88,7 @@ public FullTextParser(EngineParsers parsers) {
 
 	public Document processing(File inputPdf,
 							   GrobidAnalysisConfig config) throws Exception {
-		DocumentSource documentSource = DocumentSource.fromPdf(inputPdf, config.getStartPage(), config.getEndPage(), config.getPdfAssetPath() != null);
+		DocumentSource documentSource = DocumentSource.fromPdf(inputPdf, config.getStartPage(), config.getEndPage());
 		return processing(documentSource, config);
 	}
 		/**

File: grobid-core/src/main/java/org/grobid/core/visualization/BlockVisualizer.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String[] args) {
 //            File input = new File("/Users/zholudev/Downloads/pone.0005635.pdf");
 //            File input = new File("/Work/temp/figureExtraction/newtest/1.pdf");
 //            File input = new File("/Users/zholudev/Downloads/TIA_2011_Partie8.pdf");
-            File input = new File("/Users/zholudev/Downloads/AS-177339946250240@1419292546444_content_1.pdf");
+            File input = new File("/Users/zholudev/Downloads/AS-304179470979072@1449533445461_content_1.pdf");
 //            File input = new File("/Users/zholudev/Downloads/journal.pone.0146695.pdf");
 
             final PDDocument document = PDDocument.load(input);

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessGeneric.java
Patch:
@@ -62,7 +62,7 @@ public static Response getDescription_html(UriInfo uriInfo) {
 
 			htmlCode.append("<h4>grobid-service documentation</h4>");
 			htmlCode.append("This service provides a RESTful interface for using the grobid system. grobid extracts data from pdf files. For more information see: ");
-			htmlCode.append("<a href=\"http://hal.inria.fr/inria-00493437_v1/\">http://hal.inria.fr/inria-00493437_v1/</a>");
+			htmlCode.append("<a href=\"http://grobid.readthedocs.org/\">http://grobid.readthedocs.org/</a>");
 			
 			response = Response.status(Status.OK).entity(htmlCode.toString())
 					.type(MediaType.TEXT_HTML).build();

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessGeneric.java
Patch:
@@ -62,7 +62,7 @@ public static Response getDescription_html(UriInfo uriInfo) {
 
 			htmlCode.append("<h4>grobid-service documentation</h4>");
 			htmlCode.append("This service provides a RESTful interface for using the grobid system. grobid extracts data from pdf files. For more information see: ");
-			htmlCode.append("<a href=\"http://hal.inria.fr/inria-00493437_v1/\">http://hal.inria.fr/inria-00493437_v1/</a>");
+			htmlCode.append("<a href=\"http://grobid.readthedocs.org/\">http://grobid.readthedocs.org/</a>");
 			
 			response = Response.status(Status.OK).entity(htmlCode.toString())
 					.type(MediaType.TEXT_HTML).build();

File: grobid-core/src/main/java/org/grobid/core/data/BiblioItem.java
Patch:
@@ -2430,7 +2430,7 @@ else if (this.getYear().length() == 4)
                 for (int i = 0; i < indent + 1; i++) {
                     tei.append("\t");
                 }
-                tei.append("<idno type=\"doi\">" + DOI + "</idno>\n");
+                tei.append("<idno type=\"doi\">" + TextUtilities.HTMLEncode(DOI) + "</idno>\n");
             }
 
             if (uri != null) {

File: grobid-core/src/main/java/org/grobid/core/utilities/Consolidation.java
Patch:
@@ -188,7 +188,7 @@ public boolean consolidateCrossrefGetByDOI(BiblioItem biblio, List<BiblioItem> b
 		if (StringUtils.isNotBlank(doi)) {
             // some cleaning of the doi
             if (doi.startsWith("doi:") | doi.startsWith("DOI:")) {
-                doi.substring(4, doi.length());
+                doi = doi.substring(4, doi.length());
                 doi = doi.trim();
             }
 

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -22,8 +22,8 @@
  */
 public class DocumentSource {
     private static final Logger LOGGER = LoggerFactory.getLogger(DocumentSource.class);
-    private static final int DEFAULT_TIMEOUT = 30000;
-//    private static final int DEFAULT_TIMEOUT = 50000;
+//    private static final int DEFAULT_TIMEOUT = 30000;
+    private static final int DEFAULT_TIMEOUT = 50000;
     private static final int KILLED_DUE_2_TIMEOUT = 143;
 
     private File pdfFile;

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormater.java
Patch:
@@ -647,7 +647,7 @@ else if (biblio.getE_Year().length() == 4)
         }
 
         if (biblio.getDOI() != null) {
-            String theDOI = biblio.getDOI();
+            String theDOI = TextUtilities.HTMLEncode(biblio.getDOI());
             if (theDOI.endsWith(".xml")) {
                 theDOI = theDOI.replace(".xml", "");
             }

File: grobid-core/src/main/java/org/grobid/core/visualization/BlockVisualizer.java
Patch:
@@ -38,12 +38,12 @@ public static void main(String[] args) {
 //            File input = new File("/Work/temp/context/coords/2.pdf");
 //            File input = new File("/Work/temp/figureExtraction/vector/5.pdf");
 //            File input = new File("/Work/temp/figureExtraction/6.pdf");
-            File input = new File("/Work/temp/context/1000k/AS_97568985976833_1400273667294.pdf");
+//            File input = new File("/Work/temp/context/1000k/AS_97568985976833_1400273667294.pdf");
 //            File input = new File("/Work/temp/figureExtraction/newtest/3.pdf");
 //            File input = new File("/Users/zholudev/Downloads/pone.0005635.pdf");
 //            File input = new File("/Work/temp/figureExtraction/newtest/1.pdf");
 //            File input = new File("/Users/zholudev/Downloads/TIA_2011_Partie8.pdf");
-//            File input = new File("//Users/zholudev/Downloads/AS-324757835190273@1454439709828_content_1.pdf");
+            File input = new File("/Users/zholudev/Downloads/AS-177339946250240@1419292546444_content_1.pdf");
 //            File input = new File("/Users/zholudev/Downloads/journal.pone.0146695.pdf");
 
             final PDDocument document = PDDocument.load(input);

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -215,6 +215,9 @@ private void dealWithImages(DocumentSource documentSource, Document doc, File as
                         subPath = subPath.substring(ind + 1, subPath.length());
                     for (GraphicObject image : images) {
                         String fileImage = image.getFilePath();
+                        if (fileImage == null) {
+                            continue;
+                        }
                         fileImage = fileImage.replace(".ppm", ".png")
                                 .replace(".jpg", ".png");
                         ind = fileImage.indexOf("/");

File: grobid-core/src/main/java/org/grobid/core/document/BasicStructureBuilder.java
Patch:
@@ -743,7 +743,7 @@ static public Document generalResultSegmentation(Document doc, String labeledRes
                 p++;
                 continue;
             }
-			
+
 			// as we process the document segmentation line by line, we don't use the usual 
 			// tokenization to rebuild the text flow, but we get each line again from the 
 			// text stored in the document blocks (similarly as when generating the features) 

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -70,12 +70,12 @@ public Pair<String, Document> processing(File input, BiblioItem resHeader, Grobi
      * zone.
      */
     public Pair<String, Document> processing2(String pdfInput, boolean consolidate,
-                                              BiblioItem resHeader, int startPage, int endPage) {
+                                              BiblioItem resHeader, GrobidAnalysisConfig config) {
         DocumentSource documentSource = null;
         try {
-            documentSource = DocumentSource.fromPdf(new File(pdfInput), startPage, endPage);
+            documentSource = DocumentSource.fromPdf(new File(pdfInput), config.getStartPage(), config.getEndPage());
             Document doc = new Document(documentSource);
-            doc.addTokenizedDocument();
+            doc.addTokenizedDocument(config);
 
             if (doc.getBlocks() == null) {
                 throw new GrobidException("PDF parsing resulted in empty content");

File: grobid-core/src/main/java/org/grobid/core/engines/ebook/BookStructureParser.java
Patch:
@@ -4,6 +4,7 @@
 import org.grobid.core.document.Document;
 import org.grobid.core.document.DocumentSource;
 import org.grobid.core.engines.AbstractParser;
+import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.exceptions.GrobidException;
 import org.grobid.core.features.FeatureFactory;
 import org.grobid.core.features.FeaturesVectorFulltext;
@@ -52,7 +53,7 @@ public void createTrainingFullTextEbook(String inputFile,
             source = DocumentSource.fromPdf(file);
             Document doc = new Document(DocumentSource.fromPdf(file));
             String PDFFileName = file.getName();
-            doc.addTokenizedDocument();
+            doc.addTokenizedDocument(GrobidAnalysisConfig.defaultInstance());
 
             if (doc.getBlocks() == null) {
                 throw new Exception("PDF parsing resulted in empty content");

File: grobid-core/src/main/java/org/grobid/core/visualization/CitationsVisualizer.java
Patch:
@@ -52,7 +52,7 @@ public static void main(String args[]) {
 //            File input = new File("/Users/zholudev/Downloads/AS-320647283052546@1453459677289_content_1.pdf"); //BAD BLOCK
 //            File input = new File("/Users/zholudev/Downloads/AS-99301753622543@1400686791996_content_1 (1).pdf"); //spaces
 //            File input = new File("/Users/zholudev/Downloads/AS-321758798778369@1453724683241_content_1.pdf"); //spaces
-            File input = new File("/Users/zholudev/Downloads/AS-318367446650887@1452916122687_content_1.pdf");
+            File input = new File("/Users/zholudev/Downloads/AS-306329153933312@1450045969679_content_1.pdf");
 //            File input = new File("/Users/zholudev/Downloads/AS-317309489483776@1452663885159_content_1.pdf");
 //            File input = new File("/tmp/2.pdf");
 

File: grobid-core/src/main/java/org/grobid/core/data/Figure.java
Patch:
@@ -13,6 +13,7 @@
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.layout.BoundingBox;
 import org.grobid.core.layout.GraphicObject;
+import org.grobid.core.layout.GraphicObjectType;
 import org.grobid.core.utilities.BoundingBoxCalculator;
 import org.grobid.core.utilities.LayoutTokensUtil;
 import org.grobid.core.utilities.TextUtilities;
@@ -27,7 +28,7 @@ public class Figure {
 	public static final Predicate<GraphicObject> GRAPHIC_OBJECT_PREDICATE = new Predicate<GraphicObject>() {
 		@Override
 		public boolean apply(GraphicObject graphicObject) {
-			return graphicObject.getType() == GraphicObject.BITMAP;
+			return graphicObject.getType() == GraphicObjectType.BITMAP;
 		}
 	};
 	protected StringBuilder caption = null;

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -22,6 +22,7 @@
 import org.grobid.core.features.FeaturesVectorFulltext;
 import org.grobid.core.layout.Block;
 import org.grobid.core.layout.GraphicObject;
+import org.grobid.core.layout.GraphicObjectType;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.layout.LayoutTokenization;
 import org.grobid.core.tokenization.TaggingTokenCluster;
@@ -310,9 +311,9 @@ static public Pair<String, LayoutTokenization> getBodyTextFeatured(Document doc,
                 List<GraphicObject> localImages = Document.getConnectedGraphics(block, doc);
                 if (localImages != null) {
                 	for(GraphicObject localImage : localImages) {
-                		if (localImage.getType() == GraphicObject.BITMAP)
+                		if (localImage.getType() == GraphicObjectType.BITMAP)
                 			graphicVector = true;
-                		if (localImage.getType() == GraphicObject.VECTOR)
+                		if (localImage.getType() == GraphicObjectType.VECTOR)
                 			graphicBitmap = true;
                 	}
                 }

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -13,6 +13,7 @@
 import org.grobid.core.features.FeatureFactory;
 import org.grobid.core.features.FeaturesVectorSegmentation;
 import org.grobid.core.layout.Block;
+import org.grobid.core.layout.GraphicObjectType;
 import org.grobid.core.layout.Page;
 import org.grobid.core.layout.LayoutToken;
 import org.grobid.core.layout.BoundingBox;
@@ -339,9 +340,9 @@ public static String getAllLinesFeatured(Document doc) {
                 List<GraphicObject> localImages = Document.getConnectedGraphics(block, doc);
                 if (localImages != null) {
                     for(GraphicObject localImage : localImages) {
-                        if (localImage.getType() == GraphicObject.BITMAP) 
+                        if (localImage.getType() == GraphicObjectType.BITMAP)
                             graphicVector = true;
-                        if (localImage.getType() == GraphicObject.VECTOR) 
+                        if (localImage.getType() == GraphicObjectType.VECTOR)
                             graphicBitmap = true;
                     }
                 }

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -305,7 +305,7 @@ static public Pair<String, LayoutTokenization> getBodyTextFeatured(Document doc,
                     density = (double)localText.length() / (block.getHeight() * block.getWidth());
 
                 // check if we have a graphical object connected to the current block
-                List<GraphicObject> localImages = Document.getConnectedGraphics2(block, doc);
+                List<GraphicObject> localImages = Document.getConnectedGraphics(block, doc);
                 if (localImages != null) {
                 	for(GraphicObject localImage : localImages) {
                 		if (localImage.getType() == GraphicObject.BITMAP)

File: grobid-core/src/main/java/org/grobid/core/visualization/CitationsVisualizer.java
Patch:
@@ -46,12 +46,12 @@ public static void main(String args[]) {
 //            File input = new File("/Work/temp/pub_citation_styles/1994FEBSLett350_235Hadden.pdf");
 //            File input = new File("/Work/temp/context/1000k/AS_99223336914944_1400668095132.pdf");
 //            File input = new File("/tmp/AS_100005549445135_1400854589869.pdf"); // not all tokens
-//            File input = new File("/Work/temp/context/coords/1.pdf");
+            File input = new File("/Work/temp/context/coords/1.pdf");
 //            File input = new File("/Users/zholudev/Downloads/AS-320635044073473@1453456759264_content_1.pdf"); // DISSYNC
 
 //            File input = new File("/Users/zholudev/Downloads/AS-320647283052546@1453459677289_content_1.pdf"); //BAD BLOCK
 //            File input = new File("/Users/zholudev/Downloads/AS-99301753622543@1400686791996_content_1 (1).pdf"); //spaces
-            File input = new File("/Users/zholudev/Downloads/AS-321758798778369@1453724683241_content_1.pdf"); //spaces
+//            File input = new File("/Users/zholudev/Downloads/AS-321758798778369@1453724683241_content_1.pdf"); //spaces
 //            File input = new File("/Users/zholudev/Downloads/AS-317309489483776@1452663885159_content_1.pdf");
 //            File input = new File("/tmp/2.pdf");
 

File: grobid-core/src/test/java/org/grobid/core/test/TestFullTextParser.java
Patch:
@@ -78,11 +78,12 @@ public void testFullTextParser() throws Exception {
         assertTei(tei);
         //System.out.println(tei);
 
-        //TODO: fix the test
+
         pdfPath = new File(testPath + "/MullenJSSv18i03.pdf");
         tei = GrobidFactory.getInstance().createEngine().fullTextToTEIDoc(pdfPath, GrobidAnalysisConfig.defaultInstance());
         assertTei(tei);
 
+        //TODO: fix the test
 //        pdfPath = new File(testPath + "/two_pages.pdf");
 //        tei = GrobidFactory.getInstance().createEngine().fullTextToTEIDoc(pdfPath, GrobidAnalysisConfig.defaultInstance());
 //        assertTei(tei);

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -312,7 +312,7 @@ public List<LayoutToken> addTokenizedDocument() {
                 bottom.i((int) (b.getY() + b.getHeight()));
             }
 
-            if (!leftEven.getCnts().isEmpty() && !rightEven.getCnts().isEmpty()) {
+            if (!leftEven.getCnts().isEmpty() && !leftOdd.getCnts().isEmpty()) {
                 int pageEvenX = 0;
                 int pageEvenWidth = 0;
                 if (pages.size() > 1) {

File: grobid-core/src/main/java/org/grobid/core/visualization/FigureTableVisualizer.java
Patch:
@@ -32,7 +32,8 @@ public static void main(String[] args) {
         try {
 //            File input = new File("/Work/temp/context/coords/6.pdf");
 //            File input = new File("/Work/temp/figureExtraction/newtest/1.pdf");
-            File input = new File("/Work/temp/figureExtraction/newtest/3.pdf");
+//            File input = new File("/Work/temp/figureExtraction/newtest/3.pdf");
+            File input = new File("/Users/zholudev/Downloads/AS-320644967796737@1453459125249_content_1.pdf");
 //            File input = new File("/Work/temp/figureExtraction/5.pdf");
 
             final PDDocument document = PDDocument.load(input);

File: grobid-core/src/main/java/org/grobid/core/layout/BoundingBox.java
Patch:
@@ -105,7 +105,7 @@ public BoundingBox boundBox(BoundingBox o) {
     }
 
     public boolean contains(BoundingBox b) {
-        return x <= b.x && y <= b.y && x2 >= b.x2 && y2 >= b.x2;
+        return x <= b.x && y <= b.y && x2 >= b.x2 && y2 >= b.y2;
     }
 
     @Override

File: grobid-core/src/main/java/org/grobid/core/utilities/matching/ReferenceMarkerMatcher.java
Patch:
@@ -28,7 +28,7 @@
 public class ReferenceMarkerMatcher {
     private static final Logger LOGGER = LoggerFactory.getLogger(ReferenceMarkerMatcher.class);
 
-    public static final Pattern YEAR_PATTERN = Pattern.compile("[12][0-9]{3,3}");
+    public static final Pattern YEAR_PATTERN = Pattern.compile("[12][0-9]{3,3}[a-d]?");
     public static final Pattern AUTHOR_NAME_PATTERN = Pattern.compile("[A-Z][A-Za-z]+");
     private static final Pattern NUMBERED_CITATION_PATTERN = Pattern.compile(" *[\\(\\[]? *(?:\\d+[-–]\\d+,|\\d+, *)*(?:\\d+[-–]\\d+|\\d+)[\\)\\]]? *");
     public static final Pattern AUTHOR_SEPARATOR_PATTERN = Pattern.compile(";");

File: grobid-core/src/main/java/org/grobid/core/visualization/CitationsVisualizer.java
Patch:
@@ -40,7 +40,7 @@ public class CitationsVisualizer {
     public static void main(String args[]) {
         try {
 //            File input = new File("/Work/temp/pub_citation_styles/1994FEBSLett350_235Hadden.pdf");
-            File input = new File("/Work/temp/context/coords/1.pdf");
+            File input = new File("/Work/temp/context/coords/6.pdf");
 //            File input = new File("/Work/temp/context/coords/3.pdf");
 //            File input = new File("/Work/temp/context/coords/3.pdf");
 //            File input = new File("/Work/temp/context/coords/2.pdf");

File: grobid-core/src/main/java/org/grobid/core/engines/TaggingLabel.java
Patch:
@@ -19,6 +19,7 @@ public enum TaggingLabel {
     FIGURE_MARKER(GrobidModels.FULLTEXT, "<figure_marker>"),
     PARAGRAPH(GrobidModels.FULLTEXT, "<paragraph>"),
     ITEM(GrobidModels.FULLTEXT, "<item>"),
+    OTHER(GrobidModels.FULLTEXT, "<other>"),
     SECTION(GrobidModels.FULLTEXT, "<section>"),
     FIGURE(GrobidModels.FULLTEXT, "<figure>"),
     TABLE(GrobidModels.FULLTEXT, "<table>"),

File: grobid-core/src/main/java/org/grobid/core/tokenization/TaggingTokenSynchronizer.java
Patch:
@@ -52,6 +52,7 @@ public LabeledTokensContainer next() {
         boolean newLine = false;
         while ((!stop) && (tokenizationsIt.hasNext())) {
             LayoutToken layoutToken = tokenizationsIt.next();
+
             layoutTokenBuffer.add(layoutToken);
             String tokOriginal = layoutToken.t();
             if (LayoutTokensUtil.spaceyToken(tokOriginal)) {
@@ -68,6 +69,8 @@ public LabeledTokensContainer next() {
             tokenizationsPtr++;
         }
 
+        resultToken = LayoutTokensUtil.removeSpecialVariables(resultToken);
+
         tokensAndLabelsPtr++;
         LabeledTokensContainer labeledTokensContainer = new LabeledTokensContainer(layoutTokenBuffer, resultToken, TaggingLabel.getLabel(grobidModel, label),
                 GenericTaggerUtils.isBeginningOfEntity(label));

File: grobid-core/src/main/java/org/grobid/core/visualization/CitationsVisualizer.java
Patch:
@@ -20,6 +20,7 @@
 import org.grobid.core.data.BibDataSet;
 import org.grobid.core.data.BibDataSetContext;
 import org.grobid.core.document.Document;
+import org.grobid.core.document.xml.XmlBuilderUtils;
 import org.grobid.core.engines.Engine;
 import org.grobid.core.engines.config.GrobidAnalysisConfig;
 import org.grobid.core.factory.GrobidFactory;
@@ -39,8 +40,8 @@ public class CitationsVisualizer {
     public static void main(String args[]) {
         try {
 //            File input = new File("/Work/temp/pub_citation_styles/1994FEBSLett350_235Hadden.pdf");
-//            File input = new File("/Work/temp/context/coords/6.pdf");
-            File input = new File("/Work/temp/context/coords/3.pdf");
+            File input = new File("/Work/temp/context/coords/1.pdf");
+//            File input = new File("/Work/temp/context/coords/3.pdf");
 //            File input = new File("/Work/temp/context/coords/3.pdf");
 //            File input = new File("/Work/temp/context/coords/2.pdf");
 

File: grobid-core/src/test/java/org/grobid/core/test/TestFullTextParser.java
Patch:
@@ -111,7 +111,7 @@ public void testFullTextParser() throws Exception {
     }
 
     private void assertTei(Document doc) {
-        //assertDocAndBlockTokenizationSync(doc);
+        assertDocAndBlockTokenizationSync(doc);
         assertNotNull(doc.getTei());
     }
 

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -54,7 +54,7 @@ public static DocumentSource fromPdf(File pdfFile, int startPage, int endPage, b
         }
 
         DocumentSource source = new DocumentSource();
-        source.xmlFile = source.pdf2xml(true, false, startPage, endPage, pdfFile, tmpPath, withImages);
+        source.xmlFile = source.pdf2xml(true, false, startPage, endPage, pdfFile, tmpPath, true);//withImages);
         source.cleanupXml = true;
         return source;
     }
@@ -154,7 +154,8 @@ private File processPdf2XmlThreadMode(boolean tout, File pdfPath,
 
             if (worker.getExitStatus() != 0) {
                 String errorStreamContents = worker.getErrorStreamContents();
-                throw new GrobidException("PDF to XML conversion failed " + (StringUtils.isEmpty(errorStreamContents) ? "" : ("due to: " + errorStreamContents)),
+                throw new GrobidException("PDF to XML conversion failed on pdf file " + pdfPath + " " + 
+                        (StringUtils.isEmpty(errorStreamContents) ? "" : ("due to: " + errorStreamContents)),
                         GrobidExceptionStatus.TIMEOUT);
             }
         } catch (InterruptedException ex) {

File: grobid-core/src/main/java/org/grobid/core/engines/AuthorParser.java
Patch:
@@ -394,9 +394,9 @@ else if (
 	 * @param head - if true use the model for header's name, otherwise the model for names in citation
 	 * @return the pseudo-TEI training data
 	 */
-    public StringBuffer trainingExtraction(List<String> inputs,
+    public StringBuilder trainingExtraction(List<String> inputs,
                                            boolean head) {
-        StringBuffer buffer = new StringBuffer();
+        StringBuilder buffer = new StringBuilder();
         try {
             if (inputs == null) {
                 return null;
@@ -675,7 +675,7 @@ private String writeField(String s1,
         return result;
     }
 
-    private boolean testClosingTag(StringBuffer buffer,
+    private boolean testClosingTag(StringBuilder buffer,
                                    String currentTag0,
                                    String lastTag0,
 								   boolean head) {

File: grobid-core/src/main/java/org/grobid/core/engines/DateParser.java
Patch:
@@ -292,8 +292,8 @@ public void normalize(Date date) {
     /**
      * Extract results from a date string in the training format without any string modification.
      */
-    public StringBuffer trainingExtraction(List<String> inputs) {
-        StringBuffer buffer = new StringBuffer();
+    public StringBuilder trainingExtraction(List<String> inputs) {
+        StringBuilder buffer = new StringBuilder();
         try {
             if (inputs == null)
                 return null;
@@ -530,7 +530,7 @@ private String writeField(String s1,
         return result;
     }
 
-    private boolean testClosingTag(StringBuffer buffer,
+    private boolean testClosingTag(StringBuilder buffer,
                                    String currentTag0,
                                    String lastTag0) {
         boolean res = false;

File: grobid-core/src/main/java/org/grobid/core/layout/BoundingBox.java
Patch:
@@ -21,7 +21,7 @@ private BoundingBox(int page, double x, double y, double width, double height) {
     }
 
     public static BoundingBox fromTwoPoints(int page, double x1, double y1, double x2, double y2) {
-        if (x1 >= x2 || y1 > y2) {
+        if (x1 > x2 || y1 > y2) {
             throw new IllegalArgumentException("Invalid points provided: (" + x1 + ";" + y1 + ")-(" + x2 + ";" + y2 + ")");
         }
         return new BoundingBox(page, x1, y1, x2 - x1, y2 - y1);
@@ -65,7 +65,7 @@ public double getY2() {
 
     public BoundingBox boundBox(BoundingBox o) {
         if (this.page != o.page) {
-            throw new IllegalStateException("Cannot computer a bounding box for different pages");
+            throw new IllegalStateException("Cannot compute a bounding box for different pages");
         }
         return fromTwoPoints(o.page, Math.min(this.x, o.x), Math.min(this.y, o.y), Math.max(this.x2, o.x2), Math.max(this.y2, o.y2));
     }

File: grobid-core/src/main/java/org/grobid/core/utilities/GrobidPropertyKeys.java
Patch:
@@ -9,6 +9,7 @@ public interface GrobidPropertyKeys {
 
     public static final String PROP_GROBID_IS_CONTEXT_SERVER = "grobid.is.context.server";
 
+	public static final String PROP_VERSION = "grobid.version";
     public static final String PROP_TMP_PATH = "grobid.temp.path";
 //    public static final String PROP_BIN_PATH = "grobid.bin.path";
     public static final String PROP_NATIVE_LIB_PATH = "grobid.nativelibrary.path";

File: grobid-core/src/test/java/org/grobid/core/test/TestHeaderParser.java
Patch:
@@ -11,6 +11,8 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.io.File;
+
 /**
  *  @author Patrice Lopez
  */
@@ -76,7 +78,7 @@ public void testHeaderHeader() throws Exception {
 	public void testSegmentationHeader() throws Exception {
 		getTestResourcePath();
 		
-		String pdfPath = testPath + "/Wang-paperAVE2008.pdf";
+		File pdfPath = new File(testPath + "/Wang-paperAVE2008.pdf");
 		BiblioItem resHeader = new BiblioItem();
 		
 		String tei = engine.segmentAndProcessHeader(pdfPath, false, resHeader);

File: grobid-core/src/test/java/org/grobid/core/test/TestReferencesParser.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 
+import java.io.File;
 import java.util.List;
 
 import org.grobid.core.data.BibDataSet;
@@ -24,7 +25,7 @@ public void testReferences() throws Exception {
         String testPath = getTestResourcePath();
 
         String pdfPath = testPath + "/Wang-paperAVE2008.pdf";
-        List<BibDataSet> resRefs = engine.processReferences(pdfPath, true);
+        List<BibDataSet> resRefs = engine.processReferences(new File(pdfPath), true);
 
         assertNotNull(resRefs);
         assertThat(resRefs.size(), is(12));

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormater.java
Patch:
@@ -1579,7 +1579,7 @@ else if (currentTag0.equals("<table_marker>")) {
 				if (!currentTag0.equals(lastTag0) && lastTag0.endsWith("_marker>") ) {
 					String chunkRefString = refString.toString();
 					
-					if (chunkRefString.contains("<") && chunkRefString.contains(">")) {
+					if ((chunkRefString.contains("<") && chunkRefString.contains(">")) || chunkRefString.trim().isEmpty()) {
 						// normally never appear - inserting tags around this chunk could harm the
 						// XML hierarchical structure, so we skip this chunk
 //						refString = new StringBuilder();
@@ -1609,8 +1609,8 @@ else if (lastTag0.equals("<table_marker>")) {
 							teiPosition = buffer.indexOf(chunkRefString, teiPosition+1);
 							if (teiPosition != -1) {
 								nbMatch++;
-								matches.add(teiPosition);
-							}
+                                matches.add(teiPosition);
+                            }
 						}
 						if (nbMatch > 0) {
 							teiPosition = matches.get(0);

File: grobid-core/src/main/java/org/grobid/core/layout/BoundingBox.java
Patch:
@@ -65,7 +65,7 @@ public double getY2() {
 
     public BoundingBox boundBox(BoundingBox o) {
         if (this.page != o.page) {
-            throw new IllegalStateException("Cannot computer a bounding box for different pages");
+            throw new IllegalStateException("Cannot compute a bounding box for different pages");
         }
         return fromTwoPoints(o.page, Math.min(this.x, o.x), Math.min(this.y, o.y), Math.max(this.x2, o.x2), Math.max(this.y2, o.y2));
     }

File: grobid-core/src/main/java/org/grobid/core/utilities/BoundingBoxCalculator.java
Patch:
@@ -28,7 +28,7 @@ public static List<BoundingBox> calculate(List<LayoutToken> tokens) {
             BoundingBox b = BoundingBox.fromLayoutToken(tokens.get(i));
 
             if (near(lastBox, b)) {
-                result.get(result.size() - 1).boundBox(b);
+                result.set(result.size() - 1, result.get(result.size() - 1).boundBox(b));
             } else {
                 result.add(b);
             }

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormater.java
Patch:
@@ -4002,7 +4002,7 @@ public static String bracketReferenceSegment(String text) {
 			int ind2 = text.lastIndexOf(")");
 			if (ind2 == -1) 
 				ind2 = text.lastIndexOf("]");
-			if (ind2 != -1) {
+			if ( (ind2 != -1) && (ind1 < ind2) ) {
 				return text.substring(ind1, ind2+1);
 			}
 		}

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessFiles.java
Patch:
@@ -265,7 +265,7 @@ public static Response processStatelessFulltextAssetDocument(final InputStream i
                 response = Response.status(Status.INTERNAL_SERVER_ERROR).build();
             } else {
 				// set the path for the asset files
-				assetPath = GrobidProperties.getTempPath().getPath() + "/" + KeyGen.getKey();
+				assetPath = GrobidProperties.getTempPath().getPath() + File.separator + KeyGen.getKey();
 				
                 // starts conversion process
 				engine = GrobidRestUtils.getEngine(isparallelExec);

File: grobid-trainer/src/main/java/org/grobid/trainer/ChemicalEntityTrainer.java
Patch:
@@ -364,7 +364,7 @@ public boolean accept(File dir, String name) {
                 parser.setChemicalLigand(chemicalLigandList, chemicalLigandStartsList);
                 File thefileWords;
                 try {
-                    thefileWords = new File(thefile.getParent() + "/"
+                    thefileWords = new File(thefile.getParent() + File.separator
                             + thefile.getName().replace(".HC.chemical-names.xml", ".words.xml"));
                 } catch (Exception e) {
                     throw new GrobidException("An exception occured while running Grobid.", e);

File: grobid-trainer/src/main/java/org/grobid/trainer/FulltextTrainer.java
Patch:
@@ -107,7 +107,8 @@ public boolean accept(File dir, String name) {
                 int q = 0;
                 BufferedReader bis = new BufferedReader(
                         new InputStreamReader(new FileInputStream(
-                                sourceFulltextsPathLabel + "/" + name.replace(".tei.xml", "")), "UTF8"));
+                                sourceFulltextsPathLabel + File.separator + 
+								name.replace(".tei.xml", "")), "UTF8"));
 
                 StringBuilder fulltext = new StringBuilder();
 

File: grobid-trainer/src/main/java/org/grobid/trainer/HeaderTrainer.java
Patch:
@@ -151,7 +151,7 @@ public boolean accept(File dir, String name) {
                 if (headerFile == null)
                     continue;
                 //System.out.println(headerFile);
-                String pathHeader = headerPath + "/" + headerFile;
+                String pathHeader = headerPath + File.separator + headerFile;
                 int p = 0;
                 BufferedReader bis = new BufferedReader(
                         new InputStreamReader(new FileInputStream(pathHeader), "UTF8"));

File: grobid-trainer/src/main/java/org/grobid/trainer/SegmentationTrainer.java
Patch:
@@ -133,7 +133,7 @@ public boolean accept(File dir, String name) {
                 
 				// we can now add the features
                 // we open the featured file
-				File theRawFile = new File(sourceRawPathLabel + "/" + name.replace(".tei.xml", ""));
+				File theRawFile = new File(sourceRawPathLabel + File.separator + name.replace(".tei.xml", ""));
 				if (!theRawFile.exists()) {
 	                System.out.println("Raw file " + theRawFile +
 	                        " does not exist. Please have a look!");
@@ -143,7 +143,7 @@ public boolean accept(File dir, String name) {
                 int q = 0;
                 BufferedReader bis = new BufferedReader(
                         new InputStreamReader(new FileInputStream(
-                                sourceRawPathLabel + "/" + name.replace(".tei.xml", "")), "UTF8"));
+                                sourceRawPathLabel + File.separator + name.replace(".tei.xml", "")), "UTF8"));
 
                 StringBuilder segmentation = new StringBuilder();
 
@@ -261,7 +261,7 @@ public boolean accept(File dir, String name) {
                 int q = 0;
                 BufferedReader bis = new BufferedReader(
                         new InputStreamReader(new FileInputStream(
-                                sourceRawPathLabel + "/" + name.replace(".tei.xml", "")), "UTF8"));
+                                sourceRawPathLabel + File.separator + name.replace(".tei.xml", "")), "UTF8"));
 
                 StringBuilder segmentation = new StringBuilder();
 

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/PubMedCentralEvaluation.java
Patch:
@@ -147,7 +147,8 @@ public boolean accept(File dir, String name) {
 					System.out.println(n + " - " + pdfFile.getPath());
 					String tei = engine.fullTextToTEI(pdfFile.getPath(), false, false);
 					// write the result in the same directory
-					File resultTEI = new File(dir.getPath()+"/"+pdfFile.getName().replace(".pdf", ".tei.xml"));
+					File resultTEI = new File(dir.getPath() + File.separator
+						+ pdfFile.getName().replace(".pdf", ".tei.xml"));
 					FileUtils.writeStringToFile(resultTEI, tei, "UTF-8");
 				} 
 				catch (Exception e) {

File: grobid-core/src/test/java/org/grobid/core/test/TestFullTextParser.java
Patch:
@@ -60,7 +60,7 @@ public void testFullTextParser() throws Exception {
 		getTestResourcePath();
 
 		String pdfPath = testPath + "/Wang-paperAVE2008.pdf";
-		
+
 		String tei = GrobidFactory.getInstance().createEngine().fullTextToTEI(pdfPath, false, false);
 		assertNotNull(tei);
  		//System.out.println(tei);

File: grobid-core/src/main/java/org/grobid/core/layout/BoundingBox.java
Patch:
@@ -32,7 +32,7 @@ public static BoundingBox fromPointAndDimensions(int page, double x, double y, d
     }
 
     public static BoundingBox fromLayoutToken(LayoutToken tok) {
-        return BoundingBox.fromTwoPoints(tok.getPage(), tok.getX(), tok.getY(), tok.getWidth(), tok.getHeight());
+        return BoundingBox.fromPointAndDimensions(tok.getPage(), tok.getX(), tok.getY(), tok.getWidth(), tok.getHeight());
     }
 
     public int getPage() {

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessGeneric.java
Patch:
@@ -36,7 +36,7 @@ public static Response isAlive() {
 			try {
 				retVal = Boolean.valueOf(true).toString();
 			} catch (Exception e) {
-				LOGGER.error("COSMATService is not alive, because of: ", e);
+				LOGGER.error("GROBID Service is not alive, because of: ", e);
 				retVal = Boolean.valueOf(false).toString();
 			}
 			response = Response.status(Status.OK).entity(retVal).build();

File: grobid-trainer/src/main/java/org/grobid/trainer/sax/TEIFulltextSaxParser.java
Patch:
@@ -227,7 +227,7 @@ private void writeData(String qName, boolean pop) {
 				else if (tok.equals("+PAGE+")) {
                     // page break should be a distinct feature
                     labeled.add("@newpage\n");
-                } 
+                }
 				else {
                     String content = tok;
                     int i = 0;

File: grobid-core/src/main/java/org/grobid/core/data/Person.java
Patch:
@@ -179,7 +179,7 @@ public String toTEI() {
         if (lastName != null)
             res += "<surname>" + lastName + "</surname>";
         if (suffix != null)
-            res += "<suffix>" + suffix + "</suffix>";
+            res += "<genName>" + suffix + "</genName>";
         res += "</persName>";
 
         return res;

File: grobid-core/src/main/java/org/grobid/core/analyzers/GrobidAnalyzer.java
Patch:
@@ -75,7 +75,7 @@ else if (lang.getLangId().equals("ja")) {
 				jaAnalyzer = ReTokenizerFactory.create("ja_g");
 			result = jaAnalyzer.tokensAsList(text);
 		}
-		else if (lang.getLangId().equals("zh")) {
+		else if (lang.getLangId().equals("zh") || lang.getLangId().equals("zh-cn")) {
 			// Chinese analyser
 			if (zhAnalyzer == null)
 				zhAnalyzer = ReTokenizerFactory.create("zh_g");

File: grobid-core/src/main/java/org/grobid/core/lang/Language.java
Patch:
@@ -23,7 +23,7 @@ public Language(String langId, double confidence) {
             throw new GrobidException("Language id cannot be null");
         }
 
-        if ((langId.length() != 3 && langId.length() != 2 && (!langId.equals("sorb"))) || !(Character.isLetter(langId.charAt(0)) && Character.isLetter(langId.charAt(1)))) {
+        if ((langId.length() != 3 && langId.length() != 2 && (!langId.equals("sorb")) && (!langId.equals("zh-cn"))) || !(Character.isLetter(langId.charAt(0)) && Character.isLetter(langId.charAt(1)))) {
             throw new GrobidException("Language id should consist of two or three letters, but was: " + langId);
         }
 

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -128,6 +128,9 @@ public void addBlock(Block b) {
 //        path = pdfPath;
 //    }
 
+	/**
+	 *  Set the path to the XML file generated by xml2pdf
+	 */
     private void setPathXML(File pathXML) {
         this.pathXML = pathXML.getAbsolutePath();
     }

File: grobid-core/src/main/java/org/grobid/core/engines/AbstractParser.java
Patch:
@@ -5,6 +5,7 @@
 import org.grobid.core.engines.tagging.TaggerFactory;
 import org.grobid.core.utilities.counters.CntManager;
 import org.grobid.core.utilities.counters.impl.CntManagerFactory;
+import org.grobid.core.analyzers.GrobidAnalyzer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -14,6 +15,7 @@
 public abstract class AbstractParser implements GenericTagger, Closeable {
     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractParser.class);
     private GenericTagger genericTagger;
+	protected GrobidAnalyzer analyzer = GrobidAnalyzer.getInstance();
 
     protected CntManager cntManager = CntManagerFactory.getNoOpCntManager();
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormater.java
Patch:
@@ -817,7 +817,7 @@ else if (biblio.getKeyword() != null) {
             tei.append("\t\t\t<abstract>\n");
         }
 
-		if (abstractText != null) {
+		if ( (abstractText != null) && (abstractText.length() != 0) ) {
         	/*String abstractHeader = biblio.getAbstractHeader();
             if (abstractHeader == null)
                 abstractHeader = "Abstract";

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/utilities/FieldSpecification.java
Patch:
@@ -17,5 +17,4 @@ public class FieldSpecification {
 	public List<String> cerminePath = new ArrayList<String>();
 	
 	public boolean isTextual = false;
-//	public boolean hasMultipleValue = false;
 }
\ No newline at end of file

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -132,7 +132,7 @@ public File pdf2xml(boolean tout, boolean force, int startPage,
      */
     private File processPdf2XmlThreadMode(boolean tout, File pdfPath,
                                           File tmpPathXML, List<String> cmd) {
-        LOGGER.info("Executing: " + cmd.toString());
+        LOGGER.debug("Executing: " + cmd.toString());
         ProcessRunner worker = new ProcessRunner(cmd, "pdf2xml[" + pdfPath + "]", true);
 
         worker.start();

File: grobid-core/src/main/java/org/grobid/core/document/DocumentSource.java
Patch:
@@ -110,7 +110,7 @@ public File pdf2xml(boolean tout, boolean force, int startPage,
             if (GrobidProperties.isContextExecutionServer()) {
                 tmpPathXML = processPdf2XmlServerMode(pdfPath, tmpPathXML, cmd);
             } else {
-                cmd = Arrays.asList("bash", "-c", "ulimit -Sv " + PDF2XML_MEM_LIMIT_KBYTES + " && " + pdftoxml0 + " " + pdfPath + " " + tmpPathXML);
+                cmd = Arrays.asList("bash", "-c", "ulimit -Sv " + PDF2XML_MEM_LIMIT_KBYTES + " && " + pdftoxml0 + " '" + pdfPath + "' " + tmpPathXML);
 
                 tmpPathXML = processPdf2XmlThreadMode(tout, pdfPath, tmpPathXML, cmd);
             }

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -56,7 +56,7 @@ public class Document {
      */
     private static final int KILLED_DUE_2_TIMEOUT = 143;
     public static final int DEFAULT_TIMEOUT = 50000;
-    public static final int PDF2XML_MEM_LIMIT_BYTES = GrobidProperties.getPdf2XMLMemoryLimitMb() * 1024 * 1024;
+    public static final int PDF2XML_MEM_LIMIT_KBYTES = GrobidProperties.getPdf2XMLMemoryLimitMb() * 1024 ;
 
     private String path = null; // path where the pdf file is stored
 
@@ -275,7 +275,7 @@ public String pdf2xml(boolean tout, boolean force, int startPage,
             if (GrobidProperties.isContextExecutionServer()) {
                 tmpPathXML = processPdf2Xml(pdfPath, tmpPathXML, cmd);
             } else {
-                cmd = Arrays.asList("bash", "-c", "ulimit -Sv " + PDF2XML_MEM_LIMIT_BYTES + " && " + pdftoxml0 + " " + pdfPath + " " + tmpPathXML);
+                cmd = Arrays.asList("bash", "-c", "ulimit -Sv " + PDF2XML_MEM_LIMIT_KBYTES + " && " + pdftoxml0 + " " + pdfPath + " " + tmpPathXML);
 
                 tmpPathXML = processPdf2XmlThreadMode(tout, pdfPath, tmpPathXML, cmd);
             }
@@ -297,7 +297,7 @@ public String pdf2xml(boolean tout, boolean force, int startPage,
      */
     protected String processPdf2XmlThreadMode(boolean tout, String pdfPath,
                                               String tmpPathXML, List<String> cmd) {
-        LOGGER.debug("Executing: " + cmd.toString());
+        LOGGER.info("Executing: " + cmd.toString());
         ProcessRunner worker = new ProcessRunner(cmd, "pdf2xml[" + pdfPath + "]", true);
 
         worker.start();

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormater.java
Patch:
@@ -832,7 +832,7 @@ public StringBuffer toTEIAnnexLight(StringBuffer buffer,
 		if ( (result == null) || (tokenizations == null) ) {
 			return buffer;
 		}
-		buffer.append("\t\t<div type=\"annex\"/>\n");
+		buffer.append("\t\t<div type=\"annex\">\n");
 		buffer = toTEITextPieceLight(buffer, result,  biblio,  bds, tokenizations, doc);
       	buffer.append("\t\t</div>\n");
 		

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -150,7 +150,7 @@ public Document processing(String input, String assetPath, int startPage, int en
 			if ( (content != null) && (content.trim().length() > 0) ) {
 	            String labelledResult = label(content);
 				/*try {
-	            	FileUtils.writeStringToFile(new File("/tmp/x2.txt"), labelledResult);
+	            	FileUtils.writeStringToFile(new File("/tmp/x1.txt"), labelledResult);
 					FileUtils.writeStringToFile(new File("/tmp/x2.txt"), tokenizations.toString());
 				}
 				catch(Exception e) {

File: grobid-core/src/main/java/org/grobid/core/lang/impl/CybozuLanguageDetector.java
Patch:
@@ -32,7 +32,7 @@ public Language detect(String text) {
 
             return new Language(l.lang, l.prob);
         } catch (LangDetectException e) {
-            LOGGER.error("Cannot detect language", e);
+            LOGGER.warn("Cannot detect language because of: " + e.getClass().getName() + ": " + e.getMessage());
             return null;
         }
 

File: grobid-core/src/main/java/org/grobid/core/engines/counters/CitationParserCounters.java
Patch:
@@ -7,5 +7,5 @@
 public enum CitationParserCounters {
     SEGMENTED_REFERENCES,
     NULL_SEGMENTED_REFERENCES_LIST,
-    NOT_EMPTY_REFERENCES_BLOCKS
+    EMPTY_REFERENCES_BLOCKS, NOT_EMPTY_REFERENCES_BLOCKS
 }

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -660,7 +660,7 @@ public static String getAllLinesFeatured(Document doc, boolean headerMode) {
             }
 
 			//StringTokenizer st = new StringTokenizer(localText, "\n");
-			String[] lines = localText.split("\n");
+			String[] lines = localText.split("[\\n\\r]");
 			int n = 0;// token position in current block
 			//while(st.hasMoreTokens()) {
 			for(int li=0; li < lines.length; li++) {	

File: grobid-core/src/test/java/org/grobid/core/engines/EngineTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.grobid.core.main.LibraryLoader;
 import org.grobid.core.utilities.TextUtilities;
 import org.junit.BeforeClass;
+import org.junit.Ignore;
 import org.junit.Test;
 
 import java.io.File;
@@ -25,7 +26,7 @@
 import java.util.List;
 import java.util.StringTokenizer;
 
-//@Ignore
+@Ignore
 public class EngineTest {
 
     @BeforeClass

File: grobid-core/src/main/java/org/grobid/core/annotations/Annotation.java
Patch:
@@ -115,7 +115,7 @@ public String getHeaderAnnotation(final boolean pIndent) {
 				addListItems();
 				writer.addEndElement(TAG_NOTE);
 			} catch (XMLStreamException xmlsExp) {
-				throw new GrobidException("Failed to generate the header of document: " + xmlsExp);
+				throw new GrobidException("Failed to generate the header of document", xmlsExp);
 			}
 			if (pIndent)
 				return writer.toStringIndented();

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -350,7 +350,7 @@ protected String processPdf2Xml(String pdfPath, String tmpPathXML,
 
         if (exitCode == null) {
 //			tmpPathXML = null;
-            throw new RuntimeException("An error occured while converting pdf "
+            throw new RuntimeException("An error occurred while converting pdf "
                     + pdfPath);
         } else if (exitCode == KILLED_DUE_2_TIMEOUT) {
             throw new TimeoutException("PDF to XML conversion timed out");

File: grobid-core/src/main/java/org/grobid/core/engines/ModelMap.java
Patch:
@@ -46,7 +46,7 @@ public static Tagger getTagger(GrobidModels grobidModel) {
 			Model model = getModel(grobidModel.getModelPath());
 			tagger = model.createTagger();
 		} catch (Throwable thb) {
-			throw new GrobidException("Cannot instantiate a tagger: " + thb);
+			throw new GrobidException("Cannot instantiate a tagger", thb);
 		}
 		LOGGER.debug("end getTagger");
 		return tagger;

File: grobid-core/src/main/java/org/grobid/core/engines/patent/ReferenceExtractor.java
Patch:
@@ -232,10 +232,11 @@ public String extractAllReferencesPDFFile(String inputFile,
                         consolidate,
                         patents,
                         articles);
-            } else
+            } else {
                 return null;
+            }
         } catch (Exception e) {
-            e.printStackTrace();
+            LOGGER.error("Error in extractAllReferencesPDFFile", e);
         }
         return null;
     }

File: grobid-core/src/main/java/org/grobid/core/main/LibraryLoader.java
Patch:
@@ -104,7 +104,7 @@ public boolean accept(File dir, String name) {
                     MockContext.destroyInitialContext();
                 } catch (Exception exp) {
                     LOGGER.error("Could not unmock the context." + exp);
-                    new GrobidException("Could not unmock the context." + exp);
+                    throw new GrobidException("Could not unmock the context.", exp);
                 }
                 isContextMocked = false;
             }
@@ -130,7 +130,7 @@ protected static void mockContextIfNotSet() {
                 isContextMocked = true;
             } catch (Exception mexp) {
                 LOGGER.error("Could not mock the context." + mexp);
-                new GrobidException("Could not mock the context." + mexp);
+                throw new GrobidException("Could not mock the context.",  mexp);
             }
         }
     }

File: grobid-core/src/main/java/org/grobid/core/utilities/LanguageUtilities.java
Patch:
@@ -50,16 +50,16 @@ private LanguageUtilities() {
 			} catch (ClassCastException e) {
 				throw new GrobidException("Class " + className
 						+ " must implement "
-						+ LanguageDetectorFactory.class.getName());
+						+ LanguageDetectorFactory.class.getName(), e);
 			} catch (ClassNotFoundException e) {
 				throw new GrobidException(
 						"Class "
 								+ className
 								+ " were not found in the classpath. "
-								+ "Make sure that it is provided correctly is in the classpath");
+								+ "Make sure that it is provided correctly is in the classpath", e);
 			} catch (InstantiationException e) {
 				throw new GrobidException("Class " + className
-						+ " should have a default constructor");
+						+ " should have a default constructor", e);
 			} catch (IllegalAccessException e) {
 				throw new GrobidException(e);
 			}

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -1273,8 +1273,9 @@ private void toTEI(Document doc,
         StringBuffer tei;
         try {
             tei = teiFormater.toTEIHeader(resHeader, peer, withStyleSheet, null);
-//System.out.println(rese);
-            tei = teiFormater.toTEIBodyML(tei, rese, resHeader, resCitations, tokenizations, doc);
+			
+			//System.out.println(rese);
+           	tei = teiFormater.toTEIBodyML(tei, rese, resHeader, resCitations, tokenizations, doc);
 			//tei.append(teiFormater.toTEIBody(resCitations));
             tei = teiFormater.toTEIReferences(tei, resCitations);
 

File: grobid-core/src/main/java/org/grobid/core/lexicon/Lexicon.java
Patch:
@@ -79,7 +79,7 @@ private Lexicon() {
         initNames();
 		// the loading of the journal and conference names is lazy
         addDictionary(GrobidProperties.getGrobidHomePath() + "/lexicon/wordforms/english.wf", Language.EN);
-        addDictionary(GrobidProperties.getGrobidHomePath() + "/lexicon/wordforms/german.wf", Language.EN);
+        addDictionary(GrobidProperties.getGrobidHomePath() + "/lexicon/wordforms/german.wf", Language.DE);
         addLastNames(GrobidProperties.getGrobidHomePath() + "/lexicon/names/names.family");
         addFirstNames(GrobidProperties.getGrobidHomePath() + "/lexicon/names/names.female");
         addFirstNames(GrobidProperties.getGrobidHomePath() + "/lexicon/names/names.male");

File: grobid-core/src/main/java/org/grobid/core/engines/Segmentation.java
Patch:
@@ -129,7 +129,7 @@ public Document processing(String input, boolean headerMode) {
 			if ( (content != null) && (content.trim().length() > 0) ) {
 	            String labelledResult = label(content);
 
-	            FileUtils.writeStringToFile(new File("/tmp/x.txt"), labelledResult);
+	            //FileUtils.writeStringToFile(new File("/tmp/x.txt"), labelledResult);
 				//FileUtils.writeStringToFile(new File("/tmp/x2.txt"), tokenizations.toString());
 
 	            // set the different sections of the Document object

File: grobid-trainer/src/main/java/org/grobid/trainer/sax/TEISegmentationSaxParser.java
Patch:
@@ -81,7 +81,8 @@ public void endElement(java.lang.String uri,
 		else if (qName.equals("note") || 
 				 qName.equals("page") || 
 				 qName.equals("pages") || 
-				 qName.equals("pageTitle")) {
+//				 qName.equals("pageTitle") ||
+				 qName.equals("titlePage") ) {
 			currentTag = upperTag;
 		}
     }

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -448,8 +448,8 @@ public String processHeader(String inputFile, boolean consolidate, int startPage
             result = new BiblioItem();
         }
 
-        //Pair<String, Document> resultTEI = parsers.getHeaderParser().processing(inputFile, consolidate, result, startPage, endPage);
-		Pair<String, Document> resultTEI = parsers.getHeaderParser().processing2(inputFile, consolidate, result);
+        //Pair<String, Document> resultTEI = parsers.getHeaderParser().processing2(inputFile, consolidate, result, startPage, endPage);
+		Pair<String, Document> resultTEI = parsers.getHeaderParser().processing(inputFile, consolidate, result);
         Document doc = resultTEI.getRight();
         //close();
         return resultTEI.getLeft();
@@ -476,7 +476,7 @@ public String segmentAndProcessHeader(String inputFile, boolean consolidate, Bib
             result = new BiblioItem();
         }
 
-        Pair<String, Document> resultTEI = parsers.getHeaderParser().processing2(inputFile, consolidate, result);
+        Pair<String, Document> resultTEI = parsers.getHeaderParser().processing(inputFile, consolidate, result);
         Document doc = resultTEI.getRight();
         //close();
         return resultTEI.getLeft();

File: grobid-core/src/main/java/org/grobid/core/factory/GrobidPoolingFactory.java
Patch:
@@ -48,7 +48,7 @@ protected static GenericObjectPool newPoolInstance() {
 					grobidEnginePool.setMaxActive(GrobidProperties.getMaxPoolConnections());
 					grobidEnginePool.setTestWhileIdle(false);
 					grobidEnginePool.setLifo(false);
-					grobidEnginePool.setTimeBetweenEvictionRunsMillis(1000);
+					grobidEnginePool.setTimeBetweenEvictionRunsMillis(2000);
 					grobidEnginePool.setMaxIdle(0);
 				}
 			}
@@ -76,7 +76,7 @@ public static synchronized Engine getEngineFromPool() {
 					"An error occured while getting an engine from the engine pool: "
 							+ exp);
 		}
-		LOGGER.debug("Number of Engines in pool active/max: "
+		LOGGER.error("Number of Engines in pool active/max: "
 				+ grobidEnginePool.getNumActive() + "/"
 				+ grobidEnginePool.getMaxActive());
 		return engine;

File: grobid-core/src/main/java/org/grobid/core/document/Document.java
Patch:
@@ -413,15 +413,15 @@ public boolean cleanLxmlFile(String thePathXML, boolean cleanImages) {
     }
 
     /**
-     * Prepare features for structure annotations
+     *  Parser PDF2XML output representation and get the tokenized form of the document.
      *
      * @return list of features
      * @throws java.io.IOException      when a file can not be opened
      * @throws javax.xml.parsers.ParserConfigurationException
      *                                  when parsing
      * @throws org.xml.sax.SAXException when parsing
      */
-    public List<String> addFeaturesDocument() throws IOException,
+    public List<String> addTokenizedDocument() throws IOException,
             ParserConfigurationException, SAXException {
         List<String> images = new ArrayList<String>();
         PDF2XMLSaxParser parser = new PDF2XMLSaxParser(this, images);

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -1,5 +1,4 @@
 /**
- * Copyright 2008-2011 P. Lopez and the authors 
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -449,7 +448,8 @@ public String processHeader(String inputFile, boolean consolidate, int startPage
             result = new BiblioItem();
         }
 
-        Pair<String, Document> resultTEI = parsers.getHeaderParser().processing(inputFile, consolidate, result, startPage, endPage);
+        //Pair<String, Document> resultTEI = parsers.getHeaderParser().processing(inputFile, consolidate, result, startPage, endPage);
+		Pair<String, Document> resultTEI = parsers.getHeaderParser().processing2(inputFile, consolidate, result);
         Document doc = resultTEI.getRight();
         //close();
         return resultTEI.getLeft();

File: grobid-core/src/main/java/org/grobid/core/engines/EngineParsers.java
Patch:
@@ -9,7 +9,7 @@
 import java.io.IOException;
 
 /**
- * User: zholudev
+ * @author Slava
  * Date: 4/15/14
  */
 public class EngineParsers implements Closeable {

File: grobid-core/src/main/java/org/grobid/core/engines/ReferenceSegmenterParser.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.StringTokenizer;
 
 /**
- * User: zholudev
+ * @author Slava
  * Date: 4/14/14
  */
 public class ReferenceSegmenterParser extends AbstractParser implements ReferenceSegmenter{

File: grobid-core/src/main/java/org/grobid/core/engines/SegmentationLabel.java
Patch:
@@ -1,7 +1,7 @@
 package org.grobid.core.engines;
 
 /**
- * User: zholudev
+ * @author Slava
  * Date: 4/3/14
  */
 public enum SegmentationLabel {
@@ -13,7 +13,6 @@ public enum SegmentationLabel {
      document body <body>,
      bibliographical section <references>,
      page number <page>,
-     ? each bibliographical references in the biblio section <ref>,
      annexes <annex>
      */
     COVER("<cover>"),

File: grobid-core/src/main/java/org/grobid/core/engines/ebook/BookStructureParser.java
Patch:
@@ -61,7 +61,7 @@ public void createTrainingFullTextEbook(String inputFile,
                 throw new Exception("PDF parsing fails");
             }
             doc.setPathXML(pathXML);
-            doc.addFeaturesDocument();
+            doc.addTokenizedDocument();
 
             if (doc.getBlocks() == null) {
                 throw new Exception("PDF parsing resulted in empty content");

File: grobid-core/src/main/java/org/grobid/core/main/GrobidConstants.java
Patch:
@@ -1,9 +1,7 @@
 package org.grobid.core.main;
 
 /**
- * User: zholudev
- * Date: 11/17/11
- * Time: 2:22 PM
+ * @author Slava
  */
 public class GrobidConstants {
     //a name of a native CRF++ library without an extension

File: grobid-core/src/main/java/org/grobid/core/main/LibraryLoader.java
Patch:
@@ -16,7 +16,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * User: zholudev Date: 11/17/11 Time: 1:49 PM
+ * @author Slava, Patrice
  */
 public class LibraryLoader {
 
@@ -28,7 +28,7 @@ public class LibraryLoader {
 
     public static void load() {
         if (!loaded) {
-            LOGGER.info("Loading external library crfpp");
+            LOGGER.info("Loading external native CRF library");
             mockContextIfNotSet();
             LOGGER.debug(getLibraryFolder());
             File libraryFolder = new File(getLibraryFolder());

File: grobid-core/src/main/java/org/grobid/core/main/batch/GrobidMain.java
Patch:
@@ -12,7 +12,6 @@
  * The entrance point, to start grobid from command line
  * 
  * @author Florian Zipser
- * @version 2.0
  */
 public class GrobidMain {
 

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -1,5 +1,4 @@
 /**
- * Copyright 2010 INRIA.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: grobid-trainer/src/main/java/org/grobid/trainer/TrainerRunner.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String[] args) {
 		RunType mode = RunType.getRunType(Integer.parseInt(args[0]));
 		if ( (mode == RunType.SPLIT) && (args.length < 6) ) {
 			throw new IllegalStateException(
-					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -gH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
+					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -H /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
 		}
 
 		String path2GbdHome = null;

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -86,7 +86,7 @@ public Pair<String, Document> processing(String input, boolean consolidate, Bibl
         } catch (TimeoutException timeoutExp) {
             throw new TimeoutException("A time out occured");
         } catch (final Exception exp) {
-            throw new GrobidException("An exception occurred while running Grobid on file " + tmpPath.getAbsolutePath() + ": " + exp);
+            throw new GrobidException("An exception occurred while running Grobid on file " + input + ": " + exp);
         } finally {
             doc.cleanLxmlFile(pathXML, true);
         }

File: grobid-trainer/src/main/java/org/grobid/trainer/TrainerRunner.java
Patch:
@@ -47,13 +47,13 @@ protected static void initProcess(final String path2GbdHome, final String path2G
 	public static void main(String[] args) {
 		if (args.length < 4) {
 			throw new IllegalStateException(
-					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -pH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
+					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -gH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
 		}
 
 		RunType mode = RunType.getRunType(Integer.parseInt(args[0]));
 		if ( (mode == RunType.SPLIT) && (args.length < 6) ) {
 			throw new IllegalStateException(
-					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -pH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
+					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -gH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
 		}
 
 		String path2GbdHome = null;
@@ -82,7 +82,7 @@ else if (args[i].equals("-s")) {
 
 		if (path2GbdHome == null) {
 			throw new IllegalStateException(
-					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -pH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
+					"Usage: {0 - train, 1 - evaluate, 2 - split, train and evaluate} {affiliation,chemical,date,citation,ebook,fulltext,header,name-citation,name-header,patent} -gH /path/to/Grobid/home -s { [0.0 - 1.0] - split ratio, optional}");
 		}
 
 		final String path2GbdProperties = path2GbdHome + File.separator + "config" + File.separator + "grobid.properties";

File: grobid-core/src/test/java/org/grobid/core/utilities/GrobidPropertiesTest.java
Patch:
@@ -356,7 +356,7 @@ public void testgetLanguageDetectorFactoryGrobid() {
 	public void testgetLanguageDetectorFactory() {
 		GrobidProperties.setUseLanguageId("false");
 		assertEquals("The property has not the value expected",
-				"org.grobid.core.lang.impl.LingPipeLanguageDetectorFactory",
+				"org.grobid.core.lang.impl.CybozuLanguageDetectorFactory",
 				GrobidProperties.getLanguageDetectorFactory());
 	}
 

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -736,8 +736,8 @@ private StringBuffer trainingExtraction(String result,
             String s1 = null;
             String s2 = null;
             String lastTag = null;
-			System.out.println(tokenizations.toString());
-			System.out.println(result);
+			//System.out.println(tokenizations.toString());
+			//System.out.println(result);
             // current token position
             int p = 0;
             boolean start = true;

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -302,7 +302,7 @@ public String processingHeaderSection(Document doc, boolean consolidate, BiblioI
 				String header = getSectionHeaderFeatured(doc, documentHeaderParts, true);
 				
 				String res = null;
-				if (header != null) {
+				if ( (header != null) && (header.trim().length() > 0) ) {
 					res = label(header);
 					resHeader = resultExtraction(res, true, tokenizations, resHeader);
 				}

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -221,6 +221,9 @@ private String runReflow(List<String> affiliationBlocks,
 
 //            ArrayList<String> preToken = new ArrayList<String>();
 
+			if ( (header == null) || (header.trim().length() == 0) ) {
+				return null;
+			}
 
             String res = label(header);
             res = label(res);

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -262,6 +262,8 @@ public String processingHeaderBlock(boolean consolidate, Document doc, BiblioIte
 
 			TEIFormater teiFormater = new TEIFormater(doc);
 			StringBuffer tei = teiFormater.toTEIHeader(resHeader, true, false, null);
+            tei.append("\t</text>\n");
+            tei.append("</TEI>\n");
 			//LOGGER.debug(tei.toString());
 			return tei.toString();
 		} catch (Exception e) {

File: grobid-core/src/main/java/org/grobid/core/engines/ModelMap.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Map;
 
 /**
- * Class the create a tagger from a given model or reuse it if it already
+ * Class that creates a tagger from a given model or reuse it if it already
  * exists.
  * 
  */

File: grobid-core/src/main/java/org/grobid/core/main/LibraryLoader.java
Patch:
@@ -33,10 +33,10 @@ public static void load() {
             LOGGER.debug(getLibraryFolder());
             File libraryFolder = new File(getLibraryFolder());
             if (!libraryFolder.exists() || !libraryFolder.isDirectory()) {
-                LOGGER.error("Unable to find a native CRF++ library: Folder "
+                LOGGER.error("Unable to find a native CRF library: Folder "
                         + libraryFolder + " does not exist");
                 throw new RuntimeException(
-                        "Unable to find a native CRF++ library: Folder "
+                        "Unable to find a native CRF library: Folder "
                                 + libraryFolder + " does not exist");
             }
 

File: grobid-core/src/main/java/org/grobid/core/engines/CitationParser.java
Patch:
@@ -99,7 +99,9 @@ public BiblioItem processing(String input, boolean consolidate) {
                 resCitation.setOriginalAuthors(resCitation.getAuthors());
 
                 ArrayList<String> auts = new ArrayList<String>();
-                auts.add(resCitation.getAuthors());
+                if (resCitation.getAuthors() != null) {
+                    auts.add(resCitation.getAuthors());
+                }
 
                 resCitation.setFullAuthors(parsers.getAuthorParser().processingCitation(auts));
                 if (resCitation.getPublicationDate() != null) {

File: grobid-core/src/main/java/org/grobid/core/layout/LayoutToken.java
Patch:
@@ -30,7 +30,7 @@ public String getFont() {
     }
 
     public void setText(String f) {
-        text = f;
+        text = f.replaceAll("\n", "");
     }
 
     public void setRotation(boolean b) {

File: grobid-core/src/main/java/org/grobid/core/engines/Engine.java
Patch:
@@ -309,7 +309,7 @@ public void createTrainingReferenceSegmentation(String input, String pathTEI, in
             Document doc = parsers.getSegmentationParser().processing(input);
 			String referencesStr = doc.getDocumentPartText(SegmentationLabel.REFERENCES);
             if (!referencesStr.isEmpty()) {
-				String tei = parsers.getReferenceSegmenterParser().createTrainingData2(referencesStr);
+				String tei = parsers.getReferenceSegmenterParser().createTrainingData2(referencesStr, id);
 				if (tei != null) {
                     String outPath = pathTEI + "/" + inputFile.getName().replace(".pdf", ".referenceSegmenter.training.tei.xml");
                     Writer writer = new OutputStreamWriter(new FileOutputStream(new File(outPath), false), "UTF-8");
@@ -319,7 +319,6 @@ public void createTrainingReferenceSegmentation(String input, String pathTEI, in
 			}
 		}
 		catch (IOException e) {
-			e.printStackTrace();
             throw new GrobidException("An IO exception occurred while running Grobid.", e);
         }
     }
@@ -638,6 +637,7 @@ public boolean accept(File dir, String name) {
                         createTrainingReferenceSegmentation(pdfFile.getPath(), resultPath, ind + n);
                     }
                 } catch (final Exception exp) {
+					exp.printStackTrace();
                     LOGGER.error("An error occured while processing the following pdf: " + pdfFile.getPath() + ": " + exp);
                 }
             }

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -1241,7 +1241,7 @@ private void toTEI(Document doc,
         StringBuffer tei;
         try {
             tei = teiFormater.toTEIHeader(resHeader, peer, withStyleSheet, null);
-System.out.println(rese);
+//System.out.println(rese);
             tei = teiFormater.toTEIBodyML(tei, rese, resHeader, resCitations, tokenizations, doc);
             tei = teiFormater.toTEIReferences(tei, resCitations);
 
@@ -1251,7 +1251,7 @@ private void toTEI(Document doc,
         } catch (Exception e) {
             throw new GrobidException("An exception occured while running Grobid.", e);
         }
-System.out.println(tei.toString());		
+//System.out.println(tei.toString());		
         doc.setTei(tei.toString());
     }
 

File: grobid-trainer/src/main/java/org/grobid/trainer/AffiliationAddressTrainer.java
Patch:
@@ -125,7 +125,7 @@ public boolean accept(File dir, String name) {
 				// given the split ratio we write either in the training file or the evaluation file
 				//affAdd = affAdd.replace("\n \n", "\n \n");
 				
-				String[] chunks = affAdd.split("\n \n");
+				String[] chunks = affAdd.split("\n\n");
 				
 				for(int i=0; i<chunks.length; i++) {
 					String chunk = chunks[i];
@@ -142,7 +142,7 @@ public boolean accept(File dir, String name) {
 					}
 				}
 			}
-
+			
 			if (writer2 != null) {
 				writer2.close();
 				os2.close();

File: grobid-trainer/src/main/java/org/grobid/trainer/evaluation/EvaluationUtilities.java
Patch:
@@ -669,7 +669,7 @@ public static String evaluateStandard(String path, Function<List<String>, String
 			report.append("\n");
 
 			// instance: separated by a new line in the result file
-			theResult = theResult.replace("\n \n", "\n");
+			theResult = theResult.replace("\n\n", "\n \n");
 			stt = new StringTokenizer(theResult, "\n");
 			allGood = true;
 			int correctInstance = 0;

File: grobid-core/src/main/java/org/grobid/core/features/FeaturesVectorAffiliationAddress.java
Patch:
@@ -174,7 +174,7 @@ static public String addFeaturesAffiliationAddress(List<String> lines,
         for (int i = 0; i < lines.size(); i++) {
             line = lines.get(i);
 			isPlace = false;
-			if (line.trim().equals("\n")) {
+			if (line.equals("\n")) {
 				result.append("\n \n");
 				continue;
 			}

File: grobid-core/src/main/java/org/grobid/core/data/BibDataSet.java
Patch:
@@ -14,7 +14,7 @@ public class BibDataSet {
     // the context window (raw text) where the bibliographical item is cited
     private String refSymbol = null; // reference marker in the text body
     private String rawBib = null; // raw text of the bibliographical item
-    private double confidence = 0.0; // confidence score of the extracted bibiliographical item
+    private double confidence = 1.0; // confidence score of the extracted bibiliographical item
     private List<Integer> offsets = null; // list of offsets corresponding to the position of the reference
 
     //private List<grisp.nlp.Term> terms = null;

File: grobid-core/src/main/java/org/grobid/core/data/PatentItem.java
Patch:
@@ -20,7 +20,7 @@ public class PatentItem implements Comparable<PatentItem> {
 	private Boolean utility = false;
 	
     // scores
-    private double conf = 0.0;
+    private double conf = 1.0;
     private String confidence = null;
 
     // position in document

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -990,7 +990,7 @@ private StringBuilder trainingExtraction(String result, boolean intro, ArrayList
 				output = writeField(buffer, s1, lastTag0, s2, "<email>", "<email>", addSpace);
 			}
 			if (!output) {
-				output = writeField(buffer, s1, lastTag0, s2, "<pubnum>", "<pubnum>", addSpace);
+				output = writeField(buffer, s1, lastTag0, s2, "<pubnum>", "<idno>", addSpace);
 			}
 			if (!output) {
 				output = writeField(buffer, s1, lastTag0, s2, "<keyword>", "<keyword>", addSpace);
@@ -1089,6 +1089,8 @@ private void testClosingTag(StringBuilder buffer, String currentTag0, String las
 				buffer.append("</ptr>\n");
 			} else if (lastTag0.equals("<phone>")) {
 				buffer.append("</phone>\n");
+			} else if (lastTag0.equals("<pubnum>")) {
+				buffer.append("</idno>\n");
 			}
 		}
 	}

File: grobid-core/src/main/java/org/grobid/core/engines/HeaderParser.java
Patch:
@@ -584,7 +584,7 @@ public BiblioItem resultExtraction(String result, boolean intro, ArrayList<Strin
 			while (stt.hasMoreTokens()) {
 				String s = stt.nextToken().trim();
 				if (i == 0) {
-					// s2 = TextUtilities.HTMLEncode(s);
+					//s2 = TextUtilities.HTMLEncode(s);
 					s2 = s;
 
 					boolean strop = false;
@@ -890,7 +890,8 @@ private StringBuilder trainingExtraction(String result, boolean intro, ArrayList
 			while (stt.hasMoreTokens()) {
 				String s = stt.nextToken().trim();
 				if (i == 0) {
-					s2 = s;
+					s2 = TextUtilities.HTMLEncode(s);
+					//s2 = s;
 
 					boolean strop = false;
 					while ((!strop) && (p < tokenizations.size())) {

File: grobid-service/src/main/java/org/grobid/service/process/GrobidRestProcessFiles.java
Patch:
@@ -74,7 +74,7 @@ public static Response processStatelessHeaderDocument(final InputStream inputStr
 						retVal = engine.processHeader(originFile.getAbsolutePath(), false, null);
 					}
 				}
-
+				
 				if ((retVal == null) || (retVal.isEmpty())) {
 					response = Response.status(Status.NO_CONTENT).build();
 				} else {

File: grobid-core/src/main/java/org/grobid/core/engines/FullTextParser.java
Patch:
@@ -341,7 +341,7 @@ public void createTrainingFullText(String inputFile,
             if (allBufferReference != null) {
                 if (allBufferReference.length() > 0) {
                     Writer writerReference = new OutputStreamWriter(new FileOutputStream(new File(pathTEI +
-                            "/" + PDFFileName.replace(".pdf", ".tranining.references.xml")), false), "UTF-8");
+                            "/" + PDFFileName.replace(".pdf", ".training.references.xml")), false), "UTF-8");
                     writerReference.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
                     writerReference.write("<citations>\n");
 

File: grobid-core/src/main/java/org/grobid/core/engines/patent/ReferenceExtractor.java
Patch:
@@ -987,7 +987,7 @@ public InputSource resolveEntity(String publicId, String systemId) {
                     if (allBufferReference.length() > 0) {
                         Writer writerReference = new OutputStreamWriter(new FileOutputStream(
                                 new File(newTrainingPath + "/" + currentPatentNumber +
-                                        ".tranining.references.xml"), false), "UTF-8");
+                                        ".training.references.xml"), false), "UTF-8");
                         writerReference.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
                         writerReference.write("<citations>\n");
 

File: grobid-core/src/test/java/org/grobid/core/annotations/DescriptionTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.IOException;
 import java.util.Iterator;
 import java.util.Set;
+import java.util.Vector;
 import java.util.TreeSet;
 
 import javax.xml.namespace.QName;
@@ -433,7 +434,7 @@ private static Attribute createAttribute(final String localName, final String va
 	}
 
 	private static Iterator<Attribute> getAttributes(final Attribute... pAttr) {
-		Set<Attribute> attributes = new TreeSet<Attribute>();
+		Vector<Attribute> attributes = new Vector<Attribute>();
 		for (final Attribute attr : pAttr) {
 			attributes.add(attr);
 		}

File: grobid-core/src/test/java/org/grobid/core/annotations/ParagraphTest.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
+import java.util.Vector;
 
 import static org.grobid.core.utilities.TeiValues.ATTR_ID;
 import static org.grobid.core.utilities.TeiValues.W3C_NAMESPACE;
@@ -143,7 +144,7 @@ private static Attribute createAttribute(final QName qName, final String value)
 	}
 
 	private static Iterator<Attribute> getAttributes(final Attribute... pAttr) {
-		Set<Attribute> attributes = new TreeSet<Attribute>();
+		Vector<Attribute> attributes = new Vector<Attribute>();
 		for (final Attribute attr : pAttr) {
 			attributes.add(attr);
 		}

File: grobid-core/src/test/java/org/grobid/core/annotations/TeiStAXParsedInfoTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Iterator;
 import java.util.Set;
 import java.util.TreeSet;
+import java.util.Vector;
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLEventFactory;
@@ -139,7 +140,7 @@ private static Attribute createAttribute(final String localName, final String va
 	}
 
 	private static Iterator<Attribute> getAttributes(final Attribute... pAttr) {
-		Set<Attribute> attributes = new TreeSet<Attribute>();
+		Vector<Attribute> attributes = new Vector<Attribute>();
 		for (final Attribute attr : pAttr) {
 			attributes.add(attr);
 		}

File: grobid-core/src/test/java/org/grobid/core/annotations/TeiStAXParserTest.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.Iterator;
 import java.util.Set;
 import java.util.TreeSet;
+import java.util.Vector;
 
 import javax.xml.namespace.QName;
 import javax.xml.stream.XMLEventFactory;
@@ -263,7 +264,7 @@ private static Attribute createAttribute(final String localName, final String va
 	}
 
 	private static Iterator<Attribute> getAttributes(final Attribute... pAttr) {
-		Set<Attribute> attributes = new TreeSet<Attribute>();
+		Vector<Attribute> attributes = new Vector<Attribute>();
 		for (final Attribute attr : pAttr) {
 			attributes.add(attr);
 		}

File: grobid-core/src/main/java/org/grobid/core/GrobidModels.java
Patch:
@@ -16,7 +16,7 @@ public enum GrobidModels {
 	CITATION("citation"), 
 	DATE("date"), 
 	EBOOK("ebook"), 
-//	ENTITIES_CHEMISTRY("entities/chemistry"), 
+	ENTITIES_CHEMISTRY("entities/chemistry"), 
 //	ENTITIES_BIOTECH("entities/biotech"), 
 	FULLTEXT("fulltext"), 
 	HEADER("header"), 
@@ -27,7 +27,7 @@ public enum GrobidModels {
 	PATENT_ALL("patent/all"),
 	PATENT_STRUCTURE("patent/structure"), 
 	PATENT_EDIT("patent/edit"), 
-	ENTITIES_CHEMISTRY("chemistry"),
+//	ENTITIES_CHEMISTRY("chemistry"),
 	ENTITIES_NER("ner"),
 	ENTITIES_QUANTITIES("quantities"),
 	ENTITIES_BIOTECH("bio");

File: grobid-service/src/main/java/org/grobid/service/GrobidRestService.java
Patch:
@@ -313,7 +313,7 @@ public Response processAffiliations(@FormParam(AFFILIATIONS) String affiliation)
 	 */
 	@Path(PATH_CITATIONS)
 	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
-	@Produces(MediaType.TEXT_PLAIN)
+	@Produces(MediaType.APPLICATION_XML)
 	@POST
 	public Response processCitations_post(@FormParam(CITATIONS) String citation) {
 		return GrobidRestProcessString.processCitations(citation);
@@ -324,7 +324,7 @@ public Response processCitations_post(@FormParam(CITATIONS) String citation) {
 	 */
 	@Path(PATH_CITATIONS)
 	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
-	@Produces(MediaType.TEXT_PLAIN)
+	@Produces(MediaType.APPLICATION_XML)
 	@PUT
 	public Response processCitations(@FormParam(CITATIONS) String citation) {
 		return GrobidRestProcessString.processCitations(citation);

File: grobid-core/src/main/java/org/grobid/core/engines/patent/ReferenceExtractor.java
Patch:
@@ -50,7 +50,7 @@ public class ReferenceExtractor implements Closeable {
     private String tmpPath = null;
     private String pathXML = null;
 
-    public boolean debug = true;
+    public boolean debug = false;
 
     public Lexicon lexicon = Lexicon.getInstance();
     public String currentPatentNumber = null;

File: grobid-core/src/main/java/org/grobid/core/data/ChemicalEntity.java
Patch:
@@ -69,4 +69,6 @@ public String toString() {
         buffer.append(rawName + "\t" + inchi + "\t" + smiles + "\t" + offsets.toString());
         return buffer.toString();
     }
+
+	// TODO: CML encoding
 }

File: grobid-core/src/main/java/org/grobid/core/data/PriorArtCitation.java
Patch:
@@ -77,5 +77,7 @@ public String getRawClaims() {
     public void setRawClaims(String raw) {
         rawClaims = raw;
     }
+
+	// TODO: TEI based encoding
 }
 

File: grobid-core/src/main/java/org/grobid/core/document/TEIFormater.java
Patch:
@@ -512,7 +512,7 @@ else if (biblio.getKeyword() != null) {
             int start = keywords.indexOf("Keywords");
             if (start != -1) {
                 //String keywords1 = keywords.substring(0, start-1);
-                keywords = keywords.substring(start + 9, keywords.length());
+                keywords = keywords.substring(start + 8, keywords.length());
             }
 			if (keywords.endsWith(".")) {
 		          keywords = keywords.substring(0, keywords.length()-1);

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -111,7 +111,7 @@ private void filterAffiliationAddress(String result,
         String lastLabel = null;
         int lineCount = 0;
         int p = 0;
-        while (st.hasMoreTokens()) {
+        while (st.hasMoreTokens() && (p < tokenizations.size())) {
             String toke = tokenizations.get(p);
             List<String> tokes = new ArrayList<String>();
             while ((toke.equals(" ") || toke.equals("\n") || (toke.length() == 0)) && ((p+1) < tokenizations.size())) {

File: grobid-core/src/main/java/org/grobid/core/engines/CitationParser.java
Patch:
@@ -67,6 +67,7 @@ public BiblioItem processing(String input, boolean consolidate) {
 
 			input = TextUtilities.dehyphenize(input);
 			input = input.replace("\n", " ");
+			input = input.replaceAll("\\p{Cntrl}"," ").trim();
 			StringTokenizer st = new StringTokenizer(input,
 					TextUtilities.fullPunctuations, true);
 

File: grobid-core/src/main/java/org/grobid/core/engines/AffiliationAddressParser.java
Patch:
@@ -114,7 +114,7 @@ private void filterAffiliationAddress(String result,
         while (st.hasMoreTokens()) {
             String toke = tokenizations.get(p);
             List<String> tokes = new ArrayList<String>();
-            while ((toke.equals(" ") || toke.equals("\n") || (toke.length() == 0)) && (p < tokenizations.size())) {
+            while ((toke.equals(" ") || toke.equals("\n") || (toke.length() == 0)) && ((p+1) < tokenizations.size())) {
                 p++;
                 if (toke.length() == 0) {
                     toke = tokenizations.get(p);

File: grobid-core/src/main/java/org/grobid/core/lang/Language.java
Patch:
@@ -23,7 +23,7 @@ public Language(String langId, double confidence) {
             throw new GrobidException("Language id cannot be null");
         }
 
-        if ((langId.length() != 3 && langId.length() != 2) || !(Character.isLetter(langId.charAt(0)) && Character.isLetter(langId.charAt(1)))) {
+        if ((langId.length() != 3 && langId.length() != 2 && (!langId.equals("sorb"))) || !(Character.isLetter(langId.charAt(0)) && Character.isLetter(langId.charAt(1)))) {
             throw new GrobidException("Language id should consist of two or three letters, but was: " + langId);
         }
 

