File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -3439,7 +3439,7 @@ public AtmosphereFramework webSocketFactory(WebSocketFactory webSocketFactory) {
     }
 
     /**
-     * If a {@link ContainerInitializer} fail, log the excetion here.
+     * If a {@link ContainerInitializer} fails, set the field initializationError for later logging purposes.
      *
      * @param initializationError
      */

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -178,6 +178,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
                 request.setAttribute(CALLBACK_JAVASCRIPT_PROTOCOL, a);
                 r.addEventListener(a);
             } else {
+                response.setContentType("text/plain");
                 response.write(protocolMessage.get());
             }
 

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/InputStreamIterator.java
Patch:
@@ -53,8 +53,8 @@ public final class InputStreamIterator {
      * in the specified order (depth first)
      */
     public InputStreamIterator(final InputStream... filesOrDirectories) {
-        addReverse(filesOrDirectories);
         stack = new LinkedList<>();
+        addReverse(filesOrDirectories);
         rootCount = 0;
     }
 

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -318,7 +318,6 @@ public void onSuspend(AtmosphereResourceEvent event) {
 
         @Message
         public void message(AtmosphereResource resource, String m) {
-            assertSame(resource, r.get());
             message.set(m);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -33,6 +33,7 @@
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_EMPTY_DESTROY;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_RESUME;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.NEVER;
@@ -105,6 +106,8 @@ protected void configure(String broadcasterLifeCyclePolicy) {
             policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(maxIdleTime).build();
         } else if (IDLE_RESUME.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
             policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_RESUME).idleTimeInMS(maxIdleTime).build();
+        } else if (IDLE_EMPTY_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
+            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_EMPTY_DESTROY).idleTimeInMS(maxIdleTime).build();
         } else if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
             policy = new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
         } else {

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultAsyncSupportResolverTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.mockito.Matchers.anyList;
+import static org.mockito.ArgumentMatchers.anyList;
 import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.spy;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -336,7 +336,7 @@ public Action invokeInterceptors(List<AtmosphereInterceptor> c, AtmosphereResour
                 try {
                     a = arc.inspect(r);
                 } catch (Exception ex) {
-                    logger.error("Interceptor {} crashed. Processing will continue with other interceptor.", arc, ex);
+                    logger.error("Interceptor " + arc + " crashed. Processing will continue with other interceptor.", ex);
                     continue;
                 }
 
@@ -374,7 +374,7 @@ public void postInterceptors(List<AtmosphereInterceptor> c, AtmosphereResource r
                 arc = c.get(i);
                 arc.postInspect(r);
             } catch (Exception ex) {
-                logger.error("Interceptor {} crashed. Processing will continue with other interceptor.", arc, ex);
+                logger.error("Interceptor " + arc + " crashed. Processing will continue with other interceptor.", ex);
                 continue;
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -743,7 +743,7 @@ protected void queueWriteIO(AtmosphereResource r, Deliver deliver, AtomicInteger
             // The onStateChange/onRequest may change the isResumed value, hence we need to make sure only one thread flip
             // the switch to garantee the Entry will be cached in the order it was broadcasted.
             // Without synchronizing we may end up with a out of order BroadcasterCache queue.
-            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass().getName())) {
+            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass())) {
                 if (r.isResumed() || r.isCancelled()) {
                     logger.trace("AtmosphereResource {} has been resumed or cancelled, unable to Broadcast message {}", r.uuid(), deliver.message);
 
@@ -1373,7 +1373,7 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
             }
 
             // Only synchronize if we have a valid BroadcasterCache
-            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass().getName())) {
+            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass())) {
                 // In case we are adding messages to the cache, we need to make sure the operation is done before.
                 synchronized (resources) {
                     cacheAndSuspend(r);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -336,7 +336,7 @@ public Action invokeInterceptors(List<AtmosphereInterceptor> c, AtmosphereResour
                 try {
                     a = arc.inspect(r);
                 } catch (Exception ex) {
-                    logger.error("Interceptor {} crashed. Processing will continue with other interceptor.", arc, ex);
+                    logger.error("Interceptor " + arc + " crashed. Processing will continue with other interceptor.", ex);
                     continue;
                 }
 
@@ -374,7 +374,7 @@ public void postInterceptors(List<AtmosphereInterceptor> c, AtmosphereResource r
                 arc = c.get(i);
                 arc.postInspect(r);
             } catch (Exception ex) {
-                logger.error("Interceptor {} crashed. Processing will continue with other interceptor.", arc, ex);
+                logger.error("Interceptor " + arc + " crashed. Processing will continue with other interceptor.", ex);
                 continue;
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -743,7 +743,7 @@ protected void queueWriteIO(AtmosphereResource r, Deliver deliver, AtomicInteger
             // The onStateChange/onRequest may change the isResumed value, hence we need to make sure only one thread flip
             // the switch to garantee the Entry will be cached in the order it was broadcasted.
             // Without synchronizing we may end up with a out of order BroadcasterCache queue.
-            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass().getName())) {
+            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass())) {
                 if (r.isResumed() || r.isCancelled()) {
                     logger.trace("AtmosphereResource {} has been resumed or cancelled, unable to Broadcast message {}", r.uuid(), deliver.message);
 
@@ -1373,7 +1373,7 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
             }
 
             // Only synchronize if we have a valid BroadcasterCache
-            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass().getName())) {
+            if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass())) {
                 // In case we are adding messages to the cache, we need to make sure the operation is done before.
                 synchronized (resources) {
                     cacheAndSuspend(r);

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -76,7 +76,7 @@ public void testBasicCache() throws ExecutionException, InterruptedException, Se
         broadcaster.broadcast("e2").get();
         broadcaster.broadcast("e3").get();
 
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 2);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 2);
     }
 
     @Test
@@ -90,7 +90,7 @@ public void addRemoveAddTest() throws ExecutionException, InterruptedException,
         broadcaster.broadcast("e3").get();
 
         assertEquals(broadcasterCache.messages().size(), 1);
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 1);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 1);
     }
 
     @Test
@@ -137,7 +137,7 @@ public void run() {
 
         latch.await(10, TimeUnit.SECONDS);
 
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 100);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 100);
     }
 
     public final static class AR implements AtmosphereHandler {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -410,6 +410,7 @@ public void run() {
                     } catch (InterruptedException ex) {
                         logger.trace("{} got interrupted for Broadcaster {}", Thread.currentThread().getName(), getID());
                         logger.trace("", ex);
+                        dispatchThread.decrementAndGet();
                         return;
                     } finally {
                         if (outOfOrderBroadcastSupported.get()) {
@@ -423,13 +424,15 @@ public void run() {
                     } catch (Throwable ex) {
                         if (!started.get() || destroyed.get()) {
                             logger.trace("Failed to submit broadcast handler runnable on shutdown for Broadcaster {}", getID(), ex);
+                            dispatchThread.decrementAndGet();
                             return;
                         } else {
                             logger.warn("This message {} will be lost", msg);
                             logger.warn("Failed to submit broadcast handler runnable to for Broadcaster" + getID(), ex);
                         }
                     } finally {
                         if (outOfOrderBroadcastSupported.get()) {
+                            dispatchThread.decrementAndGet();
                             return;
                         }
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -424,6 +424,7 @@ public void run() {
                     } catch (Throwable ex) {
                         if (!started.get() || destroyed.get()) {
                             logger.trace("Failed to submit broadcast handler runnable on shutdown for Broadcaster {}", getID(), ex);
+                            dispatchThread.decrementAndGet();
                             return;
                         } else {
                             logger.warn("This message {} will be lost", msg);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -410,6 +410,7 @@ public void run() {
                     } catch (InterruptedException ex) {
                         logger.trace("{} got interrupted for Broadcaster {}", Thread.currentThread().getName(), getID());
                         logger.trace("", ex);
+                        dispatchThread.decrementAndGet();
                         return;
                     } finally {
                         if (outOfOrderBroadcastSupported.get()) {
@@ -430,6 +431,7 @@ public void run() {
                         }
                     } finally {
                         if (outOfOrderBroadcastSupported.get()) {
+                            dispatchThread.decrementAndGet();
                             return;
                         }
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -1721,7 +1721,7 @@ public String getContentType() {
 
         @Override
         public DispatcherType getDispatcherType() {
-            return null;
+            return DispatcherType.REQUEST;
         }
 
         @Override

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -134,9 +134,8 @@ public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft
                     response.setCharacterEncoding(OUT_ENCODING);
 
                     CharBuffer cb = inCharset.newDecoder().decode(ByteBuffer.wrap(responseDraft, 0, responseDraft.length));
-                    String s = cb.toString();
 
-                    if (s.trim().length() == 0) {
+                    if (cb.length() == 0) {
                         return responseDraft;
                     }
 

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -29,7 +29,6 @@
 import org.atmosphere.handler.ReflectorServletProcessor;
 import org.atmosphere.inject.InjectableObjectFactory;
 import org.atmosphere.websocket.WebSocket;
-import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProcessor.WebSocketHandlerProxy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -210,7 +209,7 @@ public static Object invoke(final Object proxiedInstance, Method m, Object o) {
             try {
                 return m.invoke(proxiedInstance, (o == null || m.getParameterTypes().length == 0) ? new Object[]{} : new Object[]{o});
             } catch (IllegalAccessException | InvocationTargetException e) {
-                LOGGER.debug("", e);
+                LOGGER.error("", e);
             }
         }
         LOGGER.trace("No Method Mapped for {}", o);

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -29,7 +29,6 @@
 import org.atmosphere.handler.ReflectorServletProcessor;
 import org.atmosphere.inject.InjectableObjectFactory;
 import org.atmosphere.websocket.WebSocket;
-import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProcessor.WebSocketHandlerProxy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -210,7 +209,7 @@ public static Object invoke(final Object proxiedInstance, Method m, Object o) {
             try {
                 return m.invoke(proxiedInstance, (o == null || m.getParameterTypes().length == 0) ? new Object[]{} : new Object[]{o});
             } catch (IllegalAccessException | InvocationTargetException e) {
-                LOGGER.debug("", e);
+                LOGGER.error("", e);
             }
         }
         LOGGER.trace("No Method Mapped for {}", o);

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -41,6 +41,7 @@
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.URI;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -276,7 +277,7 @@ public void onMessage(String s) {
                 session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>() {
                     @Override
                     public void onMessage(ByteBuffer bb) {
-                        byte[] b = bb.hasArray() ? bb.array() : new byte[bb.limit()];
+                        byte[] b = bb.hasArray() ? bb.array() : new byte[((Buffer)bb).limit()];
                         bb.get(b);
                         webSocketProcessor.invokeWebSocketProtocol(webSocket, b, 0, b.length);
                     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.util.Map;
@@ -319,8 +320,8 @@ public void close(AtmosphereResponse r) throws IOException {
         }
 
         try {
-            bb.clear();
-            cb.clear();
+            ((Buffer)bb).clear();
+            ((Buffer)cb).clear();
             // NOTE #1961 if the buffer is cached at thread-local, it needs to be released here.
         } catch (Exception ex) {
             logger.trace("", ex);

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -41,6 +41,7 @@
 import java.io.IOException;
 import java.net.InetSocketAddress;
 import java.net.URI;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -276,7 +277,7 @@ public void onMessage(String s) {
                 session.addMessageHandler(new MessageHandler.Whole<ByteBuffer>() {
                     @Override
                     public void onMessage(ByteBuffer bb) {
-                        byte[] b = bb.hasArray() ? bb.array() : new byte[bb.limit()];
+                        byte[] b = bb.hasArray() ? bb.array() : new byte[((Buffer)bb).limit()];
                         bb.get(b);
                         webSocketProcessor.invokeWebSocketProtocol(webSocket, b, 0, b.length);
                     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.util.Map;
@@ -319,8 +320,8 @@ public void close(AtmosphereResponse r) throws IOException {
         }
 
         try {
-            bb.clear();
-            cb.clear();
+            ((Buffer)bb).clear();
+            ((Buffer)cb).clear();
             // NOTE #1961 if the buffer is cached at thread-local, it needs to be released here.
         } catch (Exception ex) {
             logger.trace("", ex);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -572,7 +572,7 @@ protected void push(Deliver deliver) {
     protected void deliverPush(Deliver deliver, boolean rec) {
         recentActivity.set(true);
 
-        String prevMessage = deliver.message.toString();
+        Object prevMessage = deliver.message;
         if (rec && !delayedBroadcast.isEmpty()) {
             Iterator<Deliver> i = delayedBroadcast.iterator();
             StringBuilder b = new StringBuilder();

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -28,7 +28,6 @@
 import org.atmosphere.util.IOUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import sun.applet.AppletClassLoader;
 
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;

File: modules/cpr/src/main/java/org/atmosphere/cpr/ContainerInitializer.java
Patch:
@@ -65,7 +65,7 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                 int size = c.getServerInfo().toLowerCase().contains("weblogic") ? 1 : 0;
 
                 String s = reg.getValue().getInitParameter(ApplicationConfig.PROPERTY_COMET_SUPPORT);
-                boolean force = c.getServerInfo().toLowerCase().contains("glassfish");
+                boolean force = c.getServerInfo().toLowerCase().contains("glassfish") || c.getServerInfo().toLowerCase().contains("payara");
                 if (s != null && s.equals(JSR356AsyncSupport.class.getName())) {
                     force = true;
                 } else if (s != null) {
@@ -81,7 +81,7 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                          * the ServerContainer is always null.
                          * For Native usage
                          */
-                        if (c.getServerInfo().toLowerCase().contains("glassfish")) {
+                        if (c.getServerInfo().toLowerCase().contains("glassfish") || c.getServerInfo().toLowerCase().contains("payara")) {
                             framework.setAsyncSupport(new GlassFishServ30WebSocketSupport(framework.getAtmosphereConfig(), c));
                             framework.initializationError(null);
                         } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/ContainerInitializer.java
Patch:
@@ -65,7 +65,7 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                 int size = c.getServerInfo().toLowerCase().contains("weblogic") ? 1 : 0;
 
                 String s = reg.getValue().getInitParameter(ApplicationConfig.PROPERTY_COMET_SUPPORT);
-                boolean force = c.getServerInfo().toLowerCase().contains("glassfish");
+                boolean force = c.getServerInfo().toLowerCase().contains("glassfish") || c.getServerInfo().toLowerCase().contains("payara");
                 if (s != null && s.equals(JSR356AsyncSupport.class.getName())) {
                     force = true;
                 } else if (s != null) {
@@ -81,7 +81,7 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                          * the ServerContainer is always null.
                          * For Native usage
                          */
-                        if (c.getServerInfo().toLowerCase().contains("glassfish")) {
+                        if (c.getServerInfo().toLowerCase().contains("glassfish") || c.getServerInfo().toLowerCase().contains("payara")) {
                             framework.setAsyncSupport(new GlassFishServ30WebSocketSupport(framework.getAtmosphereConfig(), c));
                             framework.initializationError(null);
                         } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -315,6 +315,8 @@ public String getContextPath() {
     @Override
     public Cookie[] getCookies() {
         if (!cookieComputed) {
+            if (b.cookies == null)
+        		return new Cookie[0];
             cookieComputed = true;
             Cookie[] c = b.request.getCookies();
             if (c != null && c.length > 0) {

File: modules/cpr/src/main/java/org/atmosphere/config/service/MeteorService.java
Patch:
@@ -88,6 +88,6 @@
     /**
      * Add {@link org.atmosphere.cpr.AtmosphereResourceEventListener} to track internal events.
      */
-    public Class<? extends AtmosphereResourceEventListener>[] listeners() default {};
+    Class<? extends AtmosphereResourceEventListener>[] listeners() default {};
 
 }

File: modules/cpr/src/main/java/org/atmosphere/util/ServletProxyFactory.java
Patch:
@@ -47,7 +47,7 @@ public Object handle(Object clazz, Method method, Object[] methodObjects) {
                 .addMethodHandler("getMajorVersion", new MethodHandler() {
                     @Override
                     public Object handle(Object clazz, Method method, Object[] methodObjects) {
-                        return new Integer(3);
+                        return 3;
                     }
                 });
 
@@ -78,7 +78,7 @@ public ServletProxyFactory addMethodHandler(String method, MethodHandler m) {
     /**
      * A MethodHandler can be added to allow Frameworks using Atmosphere to customize internal behavior.
      */
-    public static interface MethodHandler {
+    public interface MethodHandler {
         /**
          * Same API as the {@link java.lang.reflect.Proxy} class
          *
@@ -87,7 +87,7 @@ public static interface MethodHandler {
          * @param methodObjects
          * @return this
          */
-        public Object handle(Object clazz, Method method, Object[] methodObjects);
+        Object handle(Object clazz, Method method, Object[] methodObjects);
     }
 
     public static class EchoMethodHandler implements MethodHandler {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JSONPAtmosphereInterceptor.java
Patch:
@@ -43,7 +43,7 @@ public class JSONPAtmosphereInterceptor extends AtmosphereInterceptorAdapter {
     private String endChunk = "\"});";
     private String startChunk = "({\"message\" : \"";
     private AtmosphereConfig config;
-    private final static String CONTENT_TYPE = "Content-Type: application/javascript; charset=utf-8";
+    private final static String CONTENT_TYPE = "application/javascript; charset=utf-8";
     private final static String PATTERN = "[^A-Za-z0-9]";
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JSONPAtmosphereInterceptor.java
Patch:
@@ -72,10 +72,10 @@ public Action inspect(AtmosphereResource r) {
                 AtmosphereInterceptorWriter.class.cast(writer).interceptor(new AsyncIOInterceptorAdapter() {
 
                     String callbackName() {
-                        String callback =  request.getParameter(HeaderConfig.JSONP_CALLBACK_NAME);
+                        String callback =  escapeForJavaScript(request.getParameter(HeaderConfig.JSONP_CALLBACK_NAME));
                         if (callback == null) {
                             // Look for extension
-                            String jsonp = (String) config.properties().get(HeaderConfig.JSONP_CALLBACK_NAME);
+                            String jsonp = escapeForJavaScript((String) config.properties().get(HeaderConfig.JSONP_CALLBACK_NAME));
                             if (jsonp != null) {
                                 callback = request.getParameter(jsonp);
                             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -158,7 +158,7 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
             // https://github.com/Atmosphere/atmosphere/issues/2034
             try {
                 if (s != null && s.isNew()) {
-                    s.setAttribute(FrameworkConfig.BROADCASTER_FACTORY, config.getBroadcasterFactory());
+                    s.setAttribute(getClass().getName(), "");
                 }
             } catch (IllegalStateException ex) {
                 AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(req.resource());
@@ -174,6 +174,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
                     res.flushBuffer();
                     return new Action();
                 }
+            } finally {
+                s.removeAttribute(getClass().getName());
             }
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -27,7 +27,7 @@ public class SessionSupport implements HttpSessionListener {
     private final Logger logger = LoggerFactory.getLogger(SessionSupport.class);
 
     // Quite ugly, but gives hints about current state of Session Support.
-    public static boolean initializationHint;
+    static boolean initializationHint;
 
     public SessionSupport() {
         initializationHint = true;
@@ -43,9 +43,8 @@ public void sessionDestroyed(HttpSessionEvent se) {
         logger.trace("Session destroyed");
         try {
             HttpSession s = se.getSession();
-            BroadcasterFactory f = (BroadcasterFactory) s.getAttribute(FrameworkConfig.BROADCASTER_FACTORY);
+            BroadcasterFactory f = Universe.broadcasterFactory();
             if (f != null) {
-                s.setAttribute(FrameworkConfig.BROADCASTER_FACTORY, null);
                 for (Broadcaster b : f.lookupAll()) {
                     for (AtmosphereResource r : b.getAtmosphereResources()) {
                         if (r.session(false) != null && r.session().getId().equals(s.getId())) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -338,7 +338,7 @@ public AtmosphereResource suspend(long timeout) {
         if (config.isSupportSession()
                 && req.getSession(false) != null
                 && req.getSession().getMaxInactiveInterval() >= 0
-                && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
+                && req.getSession().getMaxInactiveInterval() * 1000L < timeout) {
             throw new IllegalStateException("Cannot suspend a " +
                     "response longer than the session timeout. Increase the value of session-timeout in web.xml");
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java
Patch:
@@ -454,7 +454,8 @@ public Collection<String> getHeaders(String name) {
         } else {
             h = headers.get(name);
         }
-        if(h != null) {
+
+        if(headers.containsKey(name)) {
             s.add(h);
         }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java
Patch:
@@ -30,7 +30,6 @@
 
 import static org.atmosphere.cpr.ApplicationConfig.ATMOSPHERERESOURCE_INTERCEPTOR_METHOD;
 import static org.atmosphere.cpr.ApplicationConfig.ATMOSPHERERESOURCE_INTERCEPTOR_TIMEOUT;
-import static org.atmosphere.cpr.AtmosphereResource.TRANSPORT.POLLING;
 import static org.atmosphere.cpr.AtmosphereResource.TRANSPORT.UNDEFINED;
 import static org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter.OnBroadcast;
 
@@ -134,7 +133,7 @@ public Action inspect(AtmosphereResource r) {
     @Override
     public void postInspect(final AtmosphereResource r) {
 
-        if (r.transport().equals(UNDEFINED) || Utils.webSocketMessage(r) || r.transport().equals(POLLING)) return;
+        if (Utils.pollableTransport(r.transport()) || r.transport().equals(UNDEFINED) || Utils.webSocketMessage(r)) return;
 
         AtmosphereResourceImpl impl = AtmosphereResourceImpl.class.cast(r);
         if ( (force || impl.getRequest(false).getMethod().equalsIgnoreCase(method))

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -80,10 +80,9 @@ public JSR356AsyncSupport(AtmosphereConfig config, ServletContext ctx) {
         StringBuilder b = new StringBuilder(servletPath);
         List<String> endpointPaths = new ArrayList<>();
         endpointPaths.add(servletPath);
+        endpointPaths.add("/");
         for (int i = 0; i < pathLength; i++) {
-            b.append("/");
-            endpointPaths.add(b.toString());
-            b.append("{path" + i + "}");
+            b.append("/{path" + i + "}");
             endpointPaths.add(b.toString());
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2254,6 +2254,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
             s = config.uuidProvider().generateUuid();
             res.setHeader(HeaderConfig.X_FIRST_REQUEST, "true");
             res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);
+            res.setHeader("Content-Type", "text/plain; charset=utf-8");
         } else {
             // This may breaks 1.0.0 application because the WebSocket's associated AtmosphereResource will
             // all have the same UUID, and retrieving the original one for WebSocket, so we don't set it at all.

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -643,10 +643,11 @@ public void close(final WebSocket webSocket, int closeCode) {
                             ExecutorsFactory.getScheduler(framework.getAtmosphereConfig()).schedule(new Callable<Object>() {
                                 @Override
                                 public Object call() throws Exception {
-                                    if (resource.isSuspended()) {
+                                    AtmosphereResource currentResource = framework.atmosphereFactory().find(resource.uuid());
+                                    if (currentResource != null && currentResource.isSuspended()) {
                                         // Do not close if the resource has reconnected already
                                         executeClose(webSocket, 1005);
-                                        finish(webSocket, resource, r, s, !allowedToClose);
+                                        finish(webSocket, currentResource, r, s, !allowedToClose);
                                     }
                                     return null;
                                 }

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -200,9 +200,9 @@ public List<Object> retrieveFromCache(String broadcasterId, String uuid) {
     public BroadcasterCache clearCache(String broadcasterId, String uuid, CacheMessage message) {
         ClientQueue clientQueue;
         clientQueue = messages.get(uuid);
-        if (clientQueue != null) {
+        if (clientQueue != null && !clientQueue.getQueue().isEmpty()) {
             logger.trace("Removing for AtmosphereResource {} cached message {}", uuid, message.getMessage());
-            notifyRemoveCache(broadcasterId, message);
+            notifyRemoveCache(broadcasterId, new CacheMessage(message.getId(), message.getCreateTime(), message.getMessage(), uuid));
             clientQueue.getQueue().remove(message);
             clientQueue.getIds().remove(message.getId());
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -627,7 +627,6 @@ protected void deliverPush(Deliver deliver, boolean rec) {
             return;
         }
 
-        notifyOnMessage(deliver);
         Object prevM = deliver.originalMessage;
         deliver.originalMessage = (deliver.originalMessage != deliver.message ? callable(deliver.originalMessage) : finalMsg);
 
@@ -655,6 +654,7 @@ protected void deliverPush(Deliver deliver, boolean rec) {
                 break;
         }
 
+        notifyOnMessage(deliver);
         if (resources.isEmpty()) {
             logger.trace("No resource available for {} and message {}", getID(), finalMsg);
             entryDone(deliver.future);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2254,6 +2254,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
             s = config.uuidProvider().generateUuid();
             res.setHeader(HeaderConfig.X_FIRST_REQUEST, "true");
             res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);
+            res.setHeader("Content-Type", "text/plain; charset=utf-8");
         } else {
             // This may breaks 1.0.0 application because the WebSocket's associated AtmosphereResource will
             // all have the same UUID, and retrieving the original one for WebSocket, so we don't set it at all.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -210,7 +210,6 @@ protected void destroy() {
                 logger.warn("", ex);
             }
         }
-        properties.clear();
         shutdownHooks.clear();
         startUpHook.clear();
         atmosphereHandlerConfig.clear();

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1353,7 +1353,8 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
                     AtmosphereResourceImpl dup = (AtmosphereResourceImpl) config.resourcesFactory().find(r.uuid());
                     if (dup != null && dup != r ) {
                         if ( ! dup.isPendingClose() ) {
-                            logger.warn("Duplicate resource {}. Could be caused by a dead connection not detected by your server. Replacing the old one with the fresh one", r.uuid());
+                            logger.debug("Duplicate resource {}. Could be caused by a dead connection not detected by your server. " +
+                                    "Replacing the old one with the fresh one", r.uuid(), r.transport());
                         } else {
                             logger.debug("Not yet closed resource still active {}", r.uuid());
                         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -694,7 +694,7 @@ public HttpSession getSession(boolean create) {
         try {
             return b.request.getSession(create);
         } catch (java.lang.IllegalStateException ex) {
-            // Jetty
+            // JettyAsyncSupportListenerAdapter
             if (ex.getMessage() != null && ex.getMessage().equals("No SessionManager")) {
                 return null;
             }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -314,7 +314,7 @@ public void onClose(javax.websocket.Session session, javax.websocket.CloseReason
     @Override
     public void onError(javax.websocket.Session session, java.lang.Throwable t) {
         try {
-            logger.error("", t);
+            logger.debug("Problem in web socket session", t);
             webSocketProcessor.notifyListener(webSocket,
                     new WebSocketEventListener.WebSocketEvent<Throwable>(t, WebSocketEventListener.WebSocketEvent.TYPE.EXCEPTION, webSocket));
         } catch (Exception ex) {

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -314,7 +314,7 @@ public void onClose(javax.websocket.Session session, javax.websocket.CloseReason
     @Override
     public void onError(javax.websocket.Session session, java.lang.Throwable t) {
         try {
-            logger.error("", t);
+            logger.debug("Problem in web socket session", t);
             webSocketProcessor.notifyListener(webSocket,
                     new WebSocketEventListener.WebSocketEvent<Throwable>(t, WebSocketEventListener.WebSocketEvent.TYPE.EXCEPTION, webSocket));
         } catch (Exception ex) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java
Patch:
@@ -87,7 +87,7 @@ protected void idleResources() {
             AtmosphereRequest req = AtmosphereResourceImpl.class.cast(r).getRequest(false);
             try {
                 if (req.getAttribute(MAX_INACTIVE) == null) {
-                    logger.error("Invalid state {}", r);
+                    logger.warn("Invalid state {}", r);
                     r.removeFromAllBroadcasters();
                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);
                     continue;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -188,10 +188,10 @@ public synchronized void destroy() {
             if (!candidateForPoolable) {
                 if (notifyOnPreDestroy()) return;
 
-                if (destroyed.getAndSet(true)) return;
-
                 logger.trace("Broadcaster {} is being destroyed and cannot be re-used. Policy was {}", getID(), policy);
                 logger.trace("Broadcaster {} is being destroyed and cannot be re-used. Resources are {}", getID(), resources);
+                
+                if (destroyed.getAndSet(true)) return;
 
                 started.set(false);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java
Patch:
@@ -66,15 +66,13 @@ public void onRequest(AtmosphereResource resource) throws IOException {
         public void destroy() {
         }
     };
-    private BroadcasterFactory broadcasterFactory;
     private final ConcurrentHashMap<String, AtmosphereResource> resources = new ConcurrentHashMap<String, AtmosphereResource>();
 
     public DefaultAtmosphereResourceFactory(){
     }
 
     @Override
     public void configure(AtmosphereConfig config) {
-        this.broadcasterFactory = config.getBroadcasterFactory();
     }
 
     /**

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -76,7 +76,7 @@ public void testBasicCache() throws ExecutionException, InterruptedException, Se
         broadcaster.broadcast("e2").get();
         broadcaster.broadcast("e3").get();
 
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 2);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 2);
     }
 
     @Test
@@ -90,7 +90,7 @@ public void addRemoveAddTest() throws ExecutionException, InterruptedException,
         broadcaster.broadcast("e3").get();
 
         assertEquals(broadcasterCache.messages().size(), 1);
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 1);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 1);
     }
 
     @Test
@@ -137,7 +137,7 @@ public void run() {
 
         latch.await(10, TimeUnit.SECONDS);
 
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 100);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 100);
     }
 
     public final static class AR implements AtmosphereHandler {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -166,6 +166,7 @@ public void run() {
                                 }
                             }, delayProtocolInMilliseconds, TimeUnit.MILLISECONDS);
                         } else {
+                            response.write(protocolMessage.get());
                             try {
                                 response.flushBuffer();
                             } catch (IOException e) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -166,6 +166,7 @@ public void run() {
                                 }
                             }, delayProtocolInMilliseconds, TimeUnit.MILLISECONDS);
                         } else {
+                            response.write(protocolMessage.get());
                             try {
                                 response.flushBuffer();
                             } catch (IOException e) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -964,11 +964,11 @@ public interface ApplicationConfig {
      */
     String INJECTION_LISTENERS = "org.atmosphere.inject.InjectableObjectFactory.listeners";
     /**
-     *
+     * Delay the sending of the Atmosphere's first message protocol by X seconds
      * <p/>
      * Default: 0<br>
      * Value: org.atmosphere.interceptor.JavaScriptProtocol.delayProtocolInSeconds
      */
-    String DELAY_PROTOCOL_IN_MINUTES = "org.atmosphere.interceptor.JavaScriptProtocol.delayProtocolInSeconds";
+    String DELAY_PROTOCOL_IN_SECONDS = "org.atmosphere.interceptor.JavaScriptProtocol.delayProtocolInSeconds";
 }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -74,7 +74,7 @@ public void configure(final AtmosphereConfig config) {
         }
 
         enforceAtmosphereVersion = Boolean.valueOf(config.getInitParameter(ApplicationConfig.ENFORCE_ATMOSPHERE_VERSION, "true"));
-        delayProtocolInSeconds = config.getInitParameter(ApplicationConfig.DELAY_PROTOCOL_IN_MINUTES, 0);
+        delayProtocolInSeconds = config.getInitParameter(ApplicationConfig.DELAY_PROTOCOL_IN_SECONDS, 0);
 
         framework = config.framework();
         executorService = ExecutorsFactory.getScheduler(config);

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -76,7 +76,7 @@ public void testBasicCache() throws ExecutionException, InterruptedException, Se
         broadcaster.broadcast("e2").get();
         broadcaster.broadcast("e3").get();
 
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 2);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 2);
     }
 
     @Test
@@ -90,7 +90,7 @@ public void addRemoveAddTest() throws ExecutionException, InterruptedException,
         broadcaster.broadcast("e3").get();
 
         assertEquals(broadcasterCache.messages().size(), 1);
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 1);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 1);
     }
 
     @Test
@@ -137,7 +137,7 @@ public void run() {
 
         latch.await(10, TimeUnit.SECONDS);
 
-        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 100);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).size(), 100);
     }
 
     public final static class AR implements AtmosphereHandler {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1791,7 +1791,7 @@ protected void closeAtmosphereResource() {
         for (AtmosphereResource r : config.resourcesFactory().findAll()) {
             try {
                 r.resume().close();
-            } catch (IOException e) {
+            } catch (Exception e) {
                 logger.trace("", e);
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1791,7 +1791,7 @@ protected void closeAtmosphereResource() {
         for (AtmosphereResource r : config.resourcesFactory().findAll()) {
             try {
                 r.resume().close();
-            } catch (IOException e) {
+            } catch (Exception e) {
                 logger.trace("", e);
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/util/ChunkConcatReaderPool.java
Patch:
@@ -176,8 +176,8 @@ void addChunk(Reader chunk, boolean continued) {
             synchronized (readers) {
                 readers.addLast(chunk);
                 readers.notifyAll();
+                this.continued = continued;
             }
-            this.continued = continued;
         }
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -1414,7 +1414,7 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
             b.request(request);
         }
 
-        HttpSession session = null;
+        HttpSession session = request.getSession(false);
         if (copySession) {
             session = request.getSession(createSession);
             if (session != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -209,7 +209,7 @@ public Collection<Part> getParts() throws IOException, ServletException {
 
     @Override
     public String getContentType() {
-        return b.contentType != null ? b.contentType : b.request.getContentType();
+        return b.contentType != null ? b.contentType : (b.body.isEmpty() && b.reader == null && b.inputStream == null) ? null : b.request.getContentType();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -48,7 +48,7 @@ public void sessionDestroyed(HttpSessionEvent se) {
                 s.setAttribute(FrameworkConfig.BROADCASTER_FACTORY, null);
                 for (Broadcaster b : f.lookupAll()) {
                     for (AtmosphereResource r : b.getAtmosphereResources()) {
-                        if (r.session() != null && r.session().getId().equals(s.getId())) {
+                        if (r.session(false) != null && r.session().getId().equals(s.getId())) {
                             AtmosphereResourceImpl.class.cast(r).session(null);
                         }
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFuture.java
Patch:
@@ -89,19 +89,17 @@ public boolean isDone() {
             return innerFuture.isDone();
         }
 
-        isDone = true;
         return isDone;
     }
 
     /**
      * Invoked when a {@link Broadcaster} completed its broadcast operation.
      */
     public BroadcasterFuture<E> done() {
-        isDone = true;
-
         if (latch != null) {
             latch.countDown();
         }
+        isDone = latch == null || latch.getCount() == 0;
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java
Patch:
@@ -146,11 +146,9 @@ public void started(AtmosphereFramework framework) {
 
                 for (Object o : postponedMethodExecution) {
                     try {
-                        applyMethods(o, (Class<Object>) instance.getClass());
+                        applyMethods(o, (Class<Object>) o.getClass());
                     } catch (IllegalAccessException e) {
                         logger.warn("", e);
-                    } finally {
-                        fields.clear();
                     }
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -365,7 +365,7 @@ public static Class<?> loadClass(Class<?> thisClass, String className) throws Ex
         } catch (Throwable t) {
             try {
                 return Class.forName(className);
-            } catch (Throwable t2) {
+            } catch (Exception t2) {
                 if (thisClass != null) {
                     return thisClass.getClassLoader().loadClass(className);
                 }

File: modules/cpr/src/main/java/org/atmosphere/util/IntrospectionUtils.java
Patch:
@@ -64,7 +64,7 @@ public static void execute(Object proxy, String method) throws Exception {
         Method executeM = null;
         Class<?> c = proxy.getClass();
         Class<?> params[] = new Class[0];
-`        //    params[0]=args.getClass();
+        //    params[0]=args.getClass();
         executeM = findMethod(c, method, params);
         if (executeM == null) {
             throw new RuntimeException("No execute in " + proxy.getClass());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -35,6 +35,7 @@
  */
 public class AtmosphereServlet extends HttpServlet {
 
+	private static final long serialVersionUID = 7526472295622776147L;
     protected static final Logger logger = LoggerFactory.getLogger(AtmosphereServlet.class);
     protected final AtmosphereFrameworkInitializer initializer;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -44,6 +44,7 @@
  */
 public class MeteorServlet extends AtmosphereServlet {
 
+	private static final long serialVersionUID = 7526472295622776110L;
     protected static final Logger logger = LoggerFactory.getLogger(MeteorServlet.class);
 
     private Servlet delegate;

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -56,6 +56,7 @@
  */
 public class ReflectorServletProcessor extends AbstractReflectorAtmosphereHandler {
 
+	private static final long serialVersionUID = 7526472295622776148L;
     private final static String APPLICATION_NAME = "applicationClassName";
     private static final Logger logger = LoggerFactory.getLogger(ReflectorServletProcessor.class);
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -89,6 +89,7 @@
  */
 public class DefaultWebSocketProcessor implements WebSocketProcessor, Serializable, WebSocketPingPongListener {
 
+	private static final long serialVersionUID = 7526472295622776149L;
     private static final Logger logger = LoggerFactory.getLogger(DefaultWebSocketProcessor.class);
 
     private /* final */ AtmosphereFramework framework;

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -47,6 +47,7 @@
  */
 public class SimpleHttpProtocol implements WebSocketProtocol, Serializable {
 
+	private static final long serialVersionUID = 7526472295622776111L;
     private static final Logger logger = LoggerFactory.getLogger(SimpleHttpProtocol.class);
     protected final static String TEXT = "text/plain";
     protected String contentType = TEXT;

File: modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -44,6 +44,7 @@
  */
 public class AtmosphereServlet extends HttpServlet implements CometProcessor, HttpEventServlet, org.apache.catalina.comet.CometProcessor {
 
+	private static final long serialVersionUID = 7526472295622776147L;
     protected static final Logger logger = LoggerFactory.getLogger(AtmosphereServlet.class);
     protected final AtmosphereFrameworkInitializer initializer;
 

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractBroadcasterCache implements BroadcasterCache {
     protected long maxCacheTime = TimeUnit.MINUTES.toMillis(2); // 2 minutes
     protected long invalidateCacheInterval = TimeUnit.MINUTES.toMillis(1); // 1 minute
     protected ScheduledExecutorService reaper = Executors.newSingleThreadScheduledExecutor();
-    protected boolean isShared = false;
+    protected boolean isShared;
     protected final List<BroadcasterCacheInspector> inspectors = new LinkedList<BroadcasterCacheInspector>();
     protected final List<Object> emptyList = Collections.<Object>emptyList();
     protected final List<BroadcasterCacheListener> listeners = new LinkedList<BroadcasterCacheListener>();

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -70,7 +70,7 @@
 public class ManagedAtmosphereHandler extends AbstractReflectorAtmosphereHandler
         implements AnnotatedProxy, AtmosphereResourceHeartbeatEventListener {
 
-    private static IllegalArgumentException IAE = null;
+    private static IllegalArgumentException IAE;
     private Logger logger = LoggerFactory.getLogger(ManagedAtmosphereHandler.class);
     private final static List<Decoder<?, ?>> EMPTY = Collections.<Decoder<?, ?>>emptyList();
     private Object proxiedInstance;
@@ -85,7 +85,7 @@ public class ManagedAtmosphereHandler extends AbstractReflectorAtmosphereHandler
     private Method onReadyMethod;
     private Method onResumeMethod;
     private AtmosphereConfig config;
-    protected boolean pathParams = false;
+    protected boolean pathParams;
     protected AtmosphereResourceFactory resourcesFactory;
 
     final Map<Method, List<Encoder<?, ?>>> encoders = new HashMap<Method, List<Encoder<?, ?>>>();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -56,7 +56,7 @@
     private EndpointMapper<AtmosphereHandlerWrapper> mapper;
     private final long closingTime;
     private final boolean isServlet30;
-    private boolean closeOnCancel = false;
+    private boolean closeOnCancel;
 
     public AsynchronousProcessor(AtmosphereConfig config) {
         this.config = config;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -70,8 +70,8 @@ public class AtmosphereResourceImpl implements AtmosphereResource {
     private final AtomicBoolean isResumed = new AtomicBoolean();
     private final AtomicBoolean isCancelled = new AtomicBoolean();
     private final AtomicBoolean resumeOnBroadcast = new AtomicBoolean();
-    private Object writeOnTimeout = null;
-    private boolean disableSuspend = false;
+    private Object writeOnTimeout;
+    private boolean disableSuspend;
     private final AtomicBoolean disconnected = new AtomicBoolean();
 
     private final ConcurrentLinkedQueue<AtmosphereResourceEventListener> listeners =
@@ -87,7 +87,7 @@ public class AtmosphereResourceImpl implements AtmosphereResource {
     private final AtomicBoolean suspended = new AtomicBoolean();
     private WebSocket webSocket;
     private final AtomicBoolean inClosingPhase = new AtomicBoolean();
-    private boolean closeOnCancel = false;
+    private boolean closeOnCancel;
     private final AtomicBoolean isPendingClose = new AtomicBoolean();
 
     public AtmosphereResourceImpl() {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java
Patch:
@@ -79,9 +79,9 @@ public class AtmosphereResponseImpl extends HttpServletResponseWrapper implement
     private String charSet = "UTF-8";
     private long contentLength = -1;
     private String contentType = "text/html";
-    private boolean isCommited = false;
+    private boolean isCommited;
     private Locale locale;
-    private boolean headerHandled = false;
+    private boolean headerHandled;
     private AtmosphereRequest atmosphereRequest;
     private static final HttpServletResponse dsr = (HttpServletResponse)
             Proxy.newProxyInstance(AtmosphereResponseImpl.class.getClassLoader(), new Class[]{HttpServletResponse.class},
@@ -95,7 +95,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
     private boolean delegateToNativeResponse;
     private boolean destroyable;
     private HttpServletResponse response;
-    private boolean forceAsyncIOWriter = false;
+    private boolean forceAsyncIOWriter;
     private String uuid = "0";
     private final AtomicBoolean usingStream = new AtomicBoolean(true);
     private final AtomicBoolean destroyed = new AtomicBoolean(false);

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -50,8 +50,8 @@ public class BroadcasterConfig {
     private ScheduledExecutorService scheduler;
     private BroadcasterCache broadcasterCache = BroadcasterCache.DEFAULT;
     private final AtmosphereConfig config;
-    private boolean isExecutorShared = false;
-    private boolean isAsyncExecutorShared = false;
+    private boolean isExecutorShared;
+    private boolean isAsyncExecutorShared;
     private final boolean shared;
     private String broadcasterId;
     private boolean handleExecutors;

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFuture.java
Patch:
@@ -31,8 +31,8 @@
 public class BroadcasterFuture<E> implements Future {
 
     private final CountDownLatch latch;
-    private boolean isCancelled = false;
-    private boolean isDone = false;
+    private boolean isCancelled;
+    private boolean isDone;
     private final E msg;
     private final Future<?> innerFuture;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -254,7 +254,7 @@ private static final class ServletContainerInitializerAnnotationProcessor implem
          * of everything in the war. It would be nice to change to the API to make this a bit cleaner
          * but it looks like it is a public API.
          */
-        private boolean alreadyScanned = false;
+        private boolean alreadyScanned;
 
         private ServletContainerInitializerAnnotationProcessor(AnnotationHandler handler,
                                                                final Map<Class<? extends Annotation>, Set<Class<?>>> annotations,

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -113,11 +113,11 @@ public class DefaultBroadcaster implements Broadcaster {
     private final AtomicBoolean outOfOrderBroadcastSupported = new AtomicBoolean(false);
     protected int writeTimeoutInSecond = -1;
     protected int waitTime = POLLING_DEFAULT;
-    private boolean backwardCompatible = false;
+    private boolean backwardCompatible;
     private LifecycleHandler lifecycleHandler;
     private Future<?> currentLifecycleTask;
     private boolean cacheOnIOFlushException = true;
-    protected boolean sharedListeners = false;
+    protected boolean sharedListeners;
     protected boolean candidateForPoolable;
     protected final String usingTokenIdForAttribute = UUID.randomUUID().toString();
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultMetaBroadcaster.java
Patch:
@@ -207,7 +207,7 @@ private final static class MetaBroadcasterFuture implements Future<List<Broadcas
 
         private final CountDownLatch latch;
         private final List<Broadcaster> l;
-        private boolean isCancelled = false;
+        private boolean isCancelled;
         private final List<Future<?>> outerFuture = new ArrayList<Future<?>>();
 
         private MetaBroadcasterFuture(List<Broadcaster> l) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -27,7 +27,7 @@ public class SessionSupport implements HttpSessionListener {
     private final Logger logger = LoggerFactory.getLogger(SessionSupport.class);
 
     // Quite ugly, but gives hints about current state of Session Support.
-    public static boolean initializationHint = false;
+    public static boolean initializationHint;
 
     public SessionSupport() {
         initializationHint = true;

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractReflectorAtmosphereHandler implements AtmosphereSe
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractReflectorAtmosphereHandler.class);
 
-    private boolean twoStepsWrite = false;
+    private boolean twoStepsWrite;
 
     /**
      * Write the {@link AtmosphereResourceEvent#getMessage()} back to the client using

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -86,7 +86,7 @@ public class HeartbeatInterceptor extends AtmosphereInterceptorAdapter {
     /**
      * Heartbeat from client disabled by default.
      */
-    private int clientHeartbeatFrequencyInSeconds = 0;
+    private int clientHeartbeatFrequencyInSeconds;
 
     public HeartbeatInterceptor paddingText(byte[] paddingBytes) {
         this.paddingBytes = paddingBytes;

File: modules/cpr/src/main/java/org/atmosphere/pool/PoolableBroadcasterFactory.java
Patch:
@@ -53,7 +53,7 @@ public class PoolableBroadcasterFactory extends DefaultBroadcasterFactory {
     private PoolableProvider<? extends Broadcaster,?> poolableProvider;
     private final static String POOLED_ID = "POOLED";
     private final static Collection emptyCollection = Collections.emptySet();
-    private boolean trackPooledBroadcaster = false;
+    private boolean trackPooledBroadcaster;
 
     public PoolableBroadcasterFactory() {
         super();

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -40,7 +40,7 @@
 public abstract class AbstractBroadcasterProxy extends DefaultBroadcaster {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractBroadcasterProxy.class);
-    private Method jerseyBroadcast = null;
+    private Method jerseyBroadcast;
 
     public AbstractBroadcasterProxy() {
         try {

File: modules/cpr/src/main/java/org/atmosphere/util/AtmosphereFilterChain.java
Patch:
@@ -64,11 +64,11 @@ public final class AtmosphereFilterChain implements FilterChain {
     /**
      * The int which gives the current number of filters in the chain.
      */
-    private int n = 0;
+    private int n;
     /**
      * The servlet instance to be executed by this chain.
      */
-    private Servlet servlet = null;
+    private Servlet servlet;
     private ServletConfig configImpl;
 
     public AtmosphereFilterChain() {

File: modules/cpr/src/main/java/org/atmosphere/util/FilterConfigImpl.java
Patch:
@@ -52,7 +52,7 @@ public final class FilterConfigImpl implements FilterConfig {
     /**
      * The application Filter we are configured for.
      */
-    private Filter filter = null;
+    private Filter filter;
     /**
      * Filter name
      */

File: modules/cpr/src/main/java/org/atmosphere/util/ServletContextFactory.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class ServletContextFactory {
 
-    private ServletContext servletContext = null;
+    private ServletContext servletContext;
     private static ServletContextFactory servletContextFactory;
 
     private ServletContextFactory() {

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/HTTPGetMethod.java
Patch:
@@ -32,7 +32,7 @@
 public class HTTPGetMethod {
     private static final String GET_METHOD_NAME = "GET";
     private static final String SUCCESS_MESSAGE = "JGoogleAnalytics: Tracking Successful!";
-    private static String uaName = null; // User Agent name
+    private static String uaName; // User Agent name
     private static String osString = "Unknown";
     private final Logger logger = LoggerFactory.getLogger(HTTPGetMethod.class);
 

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/JGoogleAnalyticsTracker.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class JGoogleAnalyticsTracker {
 
-    private URLBuildingStrategy urlBuildingStrategy = null;
+    private URLBuildingStrategy urlBuildingStrategy;
     private HTTPGetMethod httpRequest = new HTTPGetMethod();
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -99,7 +99,7 @@ public class DefaultWebSocketProcessor implements WebSocketProcessor, Serializab
     private ScheduledExecutorService scheduler;
     private final Map<String, WebSocketHandlerProxy> handlers = new ConcurrentHashMap<String, WebSocketHandlerProxy>();
     private final EndpointMapper<WebSocketHandlerProxy> mapper = new DefaultEndpointMapper<WebSocketHandlerProxy>();
-    private boolean wildcardMapping = false;
+    private boolean wildcardMapping;
     // 2MB - like maxPostSize
     private int byteBufferMaxSize = 2097152;
     private int charBufferMaxSize = 2097152;

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -53,7 +53,7 @@ public abstract class WebSocket extends AtmosphereInterceptorWriter implements K
     public final static String CLEAN_CLOSE = "Clean_Close";
 
     private AtmosphereResource r;
-    protected long lastWrite = 0;
+    protected long lastWrite;
     protected boolean binaryWrite;
     private final AtomicBoolean firstWrite = new AtomicBoolean(false);
     private final AtmosphereConfig config;

File: modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java
Patch:
@@ -96,7 +96,7 @@ public static Object all(
     }
 
     public static Object matchDecoder(Object instanceType, List<Decoder<?, ?>> decoders) {
-        Object decodedObject = decoders.size() == 0 ? instanceType : null;
+        Object decodedObject = decoders.isEmpty() ? instanceType : null;
         for (Decoder d : decoders) {
             Class<?>[] typeArguments = TypeResolver.resolveArguments(d.getClass(), Decoder.class);
             if (instanceType != null && typeArguments.length > 0 && typeArguments[0].isAssignableFrom(instanceType.getClass())) {
@@ -115,7 +115,7 @@ public static Object matchDecoder(Object instanceType, List<Decoder<?, ?>> decod
     public static Object matchEncoder(Object instanceType, List<Encoder<?, ?>> encoders) {
         if (instanceType == null) return null;
 
-        Object encodedObject = encoders.size() == 0 ? instanceType : null;
+        Object encodedObject = encoders.isEmpty() ? instanceType : null;
         for (Encoder d : encoders) {
             Class<?>[] typeArguments = TypeResolver.resolveArguments(d.getClass(), Encoder.class);
             if (instanceType != null && typeArguments.length > 0 && typeArguments[0].isAssignableFrom(instanceType.getClass())) {

File: modules/cpr/src/main/java/org/atmosphere/container/EmbeddedWebSocketHandler.java
Patch:
@@ -59,7 +59,7 @@ public boolean supportWebSocket() {
         }).getAtmosphereConfig().startupHook(new AtmosphereConfig.StartupHook() {
             @Override
             public void started(AtmosphereFramework framework) {
-                if (framework.getAtmosphereConfig().handlers().size() == 0) {
+                if (framework.getAtmosphereConfig().handlers().isEmpty()) {
                     framework.addAtmosphereHandler("/*", ECHO_ATMOSPHEREHANDLER);
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -116,7 +116,7 @@ public void onOpen(Session session, final EndpointConfig endpointConfig) {
         Map<String, String> headers = new HashMap<String, String>();
         // TODO: We don't support multi map header, which cause => https://github.com/Atmosphere/atmosphere/issues/1945
         for (Map.Entry<String, List<String>> e : handshakeRequest.getHeaders().entrySet()) {
-            headers.put(e.getKey(), e.getValue().size() > 0 ? e.getValue().get(0) : "");
+            headers.put(e.getKey(), !e.getValue().isEmpty() ? e.getValue().get(0) : "");
         }
 
         // Force WebSocket. Hack for https://github.com/Atmosphere/atmosphere/issues/1944
@@ -183,7 +183,7 @@ public void onOpen(Session session, final EndpointConfig endpointConfig) {
                         l = handshakeRequest.getHeaders().get("Origin");
                     }
                     String origin;
-                    if (l != null && l.size() > 0) {
+                    if (l != null && !l.isEmpty()) {
                         origin = l.get(0);
                     } else {
                         // Broken WebSocket Spec

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -250,7 +250,7 @@ public Enumeration getHeaders(String name) {
             }
 
             if (isNotNoOps()) {
-                if (list.size() == 0 && name.startsWith(X_ATMOSPHERE)) {
+                if (list.isEmpty() && name.startsWith(X_ATMOSPHERE)) {
                     if (attributeWithoutException(b.request, name) != null) {
                         list.add(attributeWithoutException(b.request, name));
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -393,7 +393,7 @@ public AtmosphereResource suspend(long timeout) {
                 Class<? extends Broadcaster> clazz = broadcaster != null ? broadcaster.getClass() : DefaultBroadcaster.class;
 
                 broadcaster = config.getBroadcasterFactory().lookup(clazz, id, false);
-                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
+                if (broadcaster == null || !broadcaster.getAtmosphereResources().isEmpty()) {
                     broadcaster = config.getBroadcasterFactory().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -161,7 +161,7 @@ private void scanForAnnotation(AtmosphereFramework f) {
         List<String> packages = f.customAnnotationPackages();
         AnnotationDetector detector = new AnnotationDetector(atmosphereReporter);
         try {
-            if (packages.size() > 0) {
+            if (!packages.isEmpty()) {
                 for (String p : packages) {
                     logger.trace("Package {} scanned for @AtmosphereAnnotation", p);
                     detector.detect(p);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -240,7 +240,7 @@ public <T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfN
     public void removeAllAtmosphereResource(AtmosphereResource r) {
         // Remove inside all Broadcaster as well.
         try {
-            if (store.size() > 0) {
+            if (!store.isEmpty()) {
                 for (Broadcaster b : lookupAll()) {
                     try {
                         b.removeAtmosphereResource(r);

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -183,9 +183,9 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
         if (framework.isDestroyed()) return;
 
         // TODO: Fix this. Instead add an Interceptor.
-        if (framework.getAtmosphereConfig().handlers().size() == 0) {
+        if (framework.getAtmosphereConfig().handlers().isEmpty()) {
             synchronized (framework) {
-                if (handlers.size() == 0) {
+                if (handlers.isEmpty()) {
                     logger.warn("No AtmosphereHandler or WebSocketHandler installed. Adding a default one.");
                 }
                 framework.addAtmosphereHandler(ROOT_MASTER, REFLECTOR_ATMOSPHEREHANDLER);
@@ -211,7 +211,7 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
             webSocket.resource(r);
             webSocketProtocol.onOpen(webSocket);
             WebSocketHandler proxy = null;
-            if (handlers.size() != 0) {
+            if (!handlers.isEmpty()) {
                 WebSocketHandlerProxy handler = mapper.map(request, handlers);
                 if (handler == null) {
                     logger.debug("No WebSocketHandler maps request for {} with mapping {}", request.getRequestURI(), handlers);

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -185,7 +185,7 @@ public WebSocket write(AtmosphereResponse r, String data) throws IOException {
         if (!isOpen()) throw new IOException("Connection remotely closed for " + uuid);
         logger.trace("WebSocket.write() {}", data);
 
-        boolean transform = filters.size() > 0 && r.getStatus() < 400;
+        boolean transform = !filters.isEmpty() && r.getStatus() < 400;
         if (binaryWrite) {
             byte[] b = data.getBytes(resource().getResponse().getCharacterEncoding());
             if (transform) {
@@ -231,7 +231,7 @@ public WebSocket write(AtmosphereResponse r, byte[] b, int offset, int length) t
             logger.trace("WebSocket.write() {}", new String(b, offset, length, "UTF-8"));
         }
 
-        boolean transform = filters.size() > 0 && r.getStatus() < 400;
+        boolean transform = !filters.isEmpty() && r.getStatus() < 400;
         if (binaryWrite || resource().forceBinaryWrite()) {
             if (transform) {
                 b = transform(r, b, offset, length);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -931,7 +931,6 @@ public AtmosphereFramework init(final ServletConfig sc, boolean wrap) throws Ser
 
 	    this.shutdownHook = new Thread() {
                 public void run() {
-		    AtmosphereFramework.this.shutdownHook = null;
                     AtmosphereFramework.this.destroy();
                 }
             };
@@ -1838,6 +1837,7 @@ public AtmosphereFramework destroy() {
 
 	if ( this.shutdownHook != null) {
 		Runtime.getRuntime().removeShutdownHook(this.shutdownHook);
+		shutdownHook = null;
 	}
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -481,6 +481,8 @@ public void apply(final AtmosphereFramework fwk, final Class c) throws Exception
                     fwk.webSocketFactory(fwk.newClassInstance(WebSocketFactory.class, c));
                 } else if (AtmosphereFramework.class.isAssignableFrom(c)) {
                     // No OPS
+                } else if (EndpointMapper.class.isAssignableFrom(c)) {
+                   fwk.endPointMapper(fwk.newClassInstance(EndpointMapper.class, c));
                 } else {
                     logger.warn("{} is not a framework service that could be installed", c.getName());
                 }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -50,7 +50,7 @@ public JSR356AsyncSupport(AtmosphereConfig config, ServletContext ctx) {
                 logger.error("{} must use JDK 1.8+ with WebSocket", ctx.getServerInfo());
                 minVersion = "1.8+";
             }
-            throw new IllegalStateException("Unable to configure jsr356 at that stage");
+            throw new IllegalStateException("Unable to configure jsr356 at that stage. ServerContainer is null");
         }
 
         int pathLength = 5;

File: modules/cpr/src/main/java/org/atmosphere/cpr/ContainerInitializer.java
Patch:
@@ -61,10 +61,10 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                 List<Class<? extends AsyncSupport>> l = resolver.detectWebSocketPresent(false, true);
 
                 // Don't use WebLogic Native WebSocket support if JSR356 is available
-                int size = c.getServerInfo().contains("WebLogic") ? 1 : 0;
+                int size = c.getServerInfo().toLowerCase().contains("weblogic") ? 1 : 0;
 
                 String s = reg.getValue().getInitParameter(ApplicationConfig.PROPERTY_COMET_SUPPORT);
-                boolean force = false;
+                boolean force = false || c.getServerInfo().toLowerCase().contains("glassfish");
                 if (s != null && s.equals(JSR356AsyncSupport.class.getName())) {
                     force = true;
                 }

File: modules/cpr/src/main/java/org/atmosphere/util/VoidServletConfig.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Map;
 
 public class VoidServletConfig implements ServletConfig {
+    public final static String ATMOSPHERE_SERVLET =  "AtmosphereServlet";
 
     private final Map<String, String> initParams;
 
@@ -38,7 +39,7 @@ public VoidServletConfig(Map<String, String> initParams) {
 
     @Override
     public String getServletName() {
-        return "AtmosphereFramework";
+        return ATMOSPHERE_SERVLET;
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/inject/AtmosphereProducers.java
Patch:
@@ -30,7 +30,7 @@
  * Atmosphere Internal Object Injection for DI supporting JSR 330
  */
 @ApplicationScoped
-public class AtmosphereProducers implements AtmosphereConfigAware, CDIProducer {
+public class AtmosphereProducers implements CDIProducer {
 
     private AtmosphereConfig config;
 

File: modules/cpr/src/main/java/org/atmosphere/inject/CDIProducer.java
Patch:
@@ -18,5 +18,5 @@
 /**
  * A simple marker interface for for the CDI extension.
  */
-public interface CDIProducer {
+public interface CDIProducer extends AtmosphereConfigAware{
 }

File: modules/cpr/src/main/java/org/atmosphere/inject/AtmosphereProducers.java
Patch:
@@ -30,7 +30,7 @@
  * Atmosphere Internal Object Injection for DI supporting JSR 330
  */
 @ApplicationScoped
-public class AtmosphereProducers implements AtmosphereConfigAware {
+public class AtmosphereProducers implements AtmosphereConfigAware, CDIProducer {
 
     private AtmosphereConfig config;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -69,7 +69,8 @@ private Meteor(AtmosphereResource r,
      * @return a {@link Meteor} or null if not found
      */
     public static Meteor lookup(HttpServletRequest r) {
-        return (Meteor) r.getAttribute(METEOR);
+        Object o = r.getAttribute(METEOR);
+        return o == null ? null : Meteor.class.isAssignableFrom(o.getClass()) ? Meteor.class.cast(o) : null;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -269,6 +269,7 @@ public static String guestRawServletPath(AtmosphereConfig config) {
             }
             return servletPath;
         } catch (Exception ex) {
+            logger.error("", ex);
             throw new IllegalStateException("Unable to configure jsr356 at that stage");
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -235,9 +235,10 @@ public AsyncSupport newCometSupport(final Class<? extends AsyncSupport> targetCl
                     .newInstance(config);
         } catch (final Exception e) {
             logger.warn("Failed to create AsyncSupport class: {}, error: {}", targetClass, e);
+
             Throwable cause = e.getCause();
             if (cause != null) {
-                logger.error("Real error: {}, error: {}", targetClass, cause);
+                logger.error("Real error: {}", cause.getMessage(), cause);
             }
             return null;
         }
@@ -252,7 +253,7 @@ public AsyncSupport newCometSupport(final String targetClassFQN) {
             logger.error("Failed to create AsyncSupport class: {}, error: {}", targetClassFQN, e);
             Throwable cause = e.getCause();
             if (cause != null) {
-                logger.error("Real error: {}, error: {}", targetClassFQN, cause);
+                logger.error("Real error: {}", cause.getMessage(), cause);
             }
             throw new IllegalArgumentException("Unable to create " + targetClassFQN, e);
         }

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -242,7 +242,6 @@ public static byte[] readEntirelyAsByte(AtmosphereResource r) throws IOException
         throw new IllegalStateException("No body " + r);
     }
 
-
     public static String guestServletPath(AtmosphereConfig config) {
         String servletPath = "";
         if (config.getServletConfig() != null) {
@@ -265,6 +264,8 @@ public static String guestRawServletPath(AtmosphereConfig config) {
                 for (String m : s.getMappings()) {
                     servletPath = m;
                 }
+            } else {
+                throw new IllegalStateException("Unable to configure jsr356 at that stage");
             }
             return servletPath;
         } catch (Exception ex) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/ContainerInitializer.java
Patch:
@@ -73,8 +73,6 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                     try {
                         framework.setAsyncSupport(new JSR356AsyncSupport(framework.getAtmosphereConfig(), c));
                     } catch (IllegalStateException ex) {
-                        // Let it fail so later an exception will be displayed..
-                        // c.log("WARN: ", ex);
                         framework.initializationError(ex);
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -50,7 +50,7 @@ public JSR356AsyncSupport(AtmosphereConfig config, ServletContext ctx) {
                 logger.error("{} must use JDK 1.8+ with WebSocket", ctx.getServerInfo());
                 minVersion = "1.8+";
             }
-            throw new IllegalStateException(ServerContainer.class.getName() + " is null. Make sure you are using " + minVersion + " and your server has websocket support enabled");
+            throw new IllegalStateException("Unable to configure jsr356 at that stage");
         }
 
         int pathLength = 5;

File: modules/cpr/src/main/java/org/atmosphere/cpr/ContainerInitializer.java
Patch:
@@ -73,8 +73,9 @@ public void onStartup(Set<Class<?>> classes, final ServletContext c) throws Serv
                     try {
                         framework.setAsyncSupport(new JSR356AsyncSupport(framework.getAtmosphereConfig(), c));
                     } catch (IllegalStateException ex) {
-                        // Let it fail so fallback can occurs.
-                        c.log("Unable to initialize websocket support", ex);
+                        // Let it fail so later an exception will be displayed..
+                        // c.log("WARN: ", ex);
+                        framework.initializationError(ex);
                     }
                 }
 

File: modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java
Patch:
@@ -143,7 +143,9 @@ public <T, U extends T> U newClassInstance(Class<T> classType,
     public <T> T inject(T instance) throws InstantiationException, IllegalAccessException {
 
         injectInjectable(instance, instance.getClass(), config.framework());
-        applyMethods(instance, (Class<T>) instance.getClass());
+        if (!pushBackInjection.contains(instance)) {
+            applyMethods(instance, (Class<T>) instance.getClass());
+        }
 
         return instance;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -96,7 +96,6 @@ public void init(final ServletConfig sc) throws ServletException {
                 }
                 framework().getBroadcasterFactory().remove(delegateMapping);
                 framework().addAtmosphereHandler(delegateMapping, r);
-                r.init(framework().getAtmosphereConfig());
                 framework().checkWebSocketSupportState();
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -95,7 +95,9 @@ public void init(final ServletConfig sc) throws ServletException {
                     r.addFilter(f);
                 }
                 framework().getBroadcasterFactory().remove(delegateMapping);
-                framework().addAtmosphereHandler(delegateMapping, r).initAtmosphereHandler(sc);
+                framework().addAtmosphereHandler(delegateMapping, r);
+                r.init(framework().getAtmosphereConfig());
+                framework().checkWebSocketSupportState();
             }
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -3190,7 +3190,7 @@ public List<String> excludedInterceptors() {
     }
 
     public Class<? extends AtmosphereInterceptor>[] defaultInterceptors() {
-        return (Class<? extends AtmosphereInterceptor>[]) DEFAULT_ATMOSPHERE_INTERCEPTORS.toArray();
+        return DEFAULT_ATMOSPHERE_INTERCEPTORS.toArray(new Class[DEFAULT_ATMOSPHERE_INTERCEPTORS.size()]);
     }
 
     public AtmosphereResourceFactory atmosphereFactory() {

File: modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.LinkedList;
 import java.util.ServiceLoader;
 import java.util.Set;
+import java.util.concurrent.LinkedBlockingDeque;
 
 import static org.atmosphere.util.Utils.getInheritedPrivateFields;
 import static org.atmosphere.util.Utils.getInheritedPrivateMethod;
@@ -52,7 +53,7 @@ public class InjectableObjectFactory implements AtmosphereObjectFactory<Injectab
     private final LinkedList<Injectable<?>> injectables = new LinkedList<Injectable<?>>();
     private final LinkedList<InjectIntrospector<?>> introspectors = new LinkedList<InjectIntrospector<?>>();
     private final LinkedList<InjectIntrospector<?>> requestScopedIntrospectors = new LinkedList<InjectIntrospector<?>>();
-    private final LinkedList<Object> pushBackInjection = new LinkedList<>();
+    private final LinkedBlockingDeque<Object> pushBackInjection = new LinkedBlockingDeque();
 
     private AtmosphereConfig config;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -934,6 +934,8 @@ public void run() {
             if (logger.isInfoEnabled()) {
                 info();
             }
+
+            universe();
         } catch (Throwable t) {
             logger.error("Failed to initialize Atmosphere Framework", t);
 
@@ -1016,7 +1018,6 @@ public void reconfigureInitParams(boolean reconfigureInitParams) {
         }
     }
 
-
     private void info() {
 
         if (logger.isTraceEnabled()) {
@@ -1097,8 +1098,6 @@ private void info() {
                 logger.trace("{}", e.getValue());
             }
         }
-
-        Universe.broadcasterFactory(broadcasterFactory);
     }
 
     protected void universe() {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -356,8 +356,6 @@ public WebSocket flush(AtmosphereResponse r) throws IOException {
      * Use the underlying container's websocket to write the byte.
      *
      * @param b      a websocket byte message
-     * @param offset start
-     * @param length end
      * @return this
      * @throws IOException
      */

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -52,7 +52,7 @@ protected void mapAnnotatedService(boolean reMap, String path, AtmosphereRequest
                 // ManagedService
                 if (AnnotatedProxy.class.isAssignableFrom(w.atmosphereHandler.getClass())) {
                     AnnotatedProxy ap = AnnotatedProxy.class.cast(w.atmosphereHandler);
-                    ManagedAnnotation a = managed(ap, w.broadcaster.getClass());
+                    ManagedAnnotation a = managed(ap, request.resource());
                     if (a != null) {
                         String targetPath = a.path();
                         if (targetPath.indexOf("{") != -1 && targetPath.indexOf("}") != -1) {
@@ -92,7 +92,7 @@ protected AnnotatedProxy proxyHandler() throws IllegalAccessException, Instantia
         return config.framework().newClassInstance(AnnotatedProxy.class, ManagedAtmosphereHandler.class);
     }
 
-    protected ManagedAnnotation managed(AnnotatedProxy ap, final Class<? extends Broadcaster> aClass) {
+    protected ManagedAnnotation managed(AnnotatedProxy ap, final AtmosphereResource r){
         final ManagedService a = ap.target().getClass().getAnnotation(ManagedService.class);
         if (a == null) return null;
 
@@ -104,7 +104,7 @@ public String path() {
 
             @Override
             public Class<? extends Broadcaster> broadcaster() {
-                return aClass;
+                return r.getBroadcaster().getClass();
             }
         };
     }

File: modules/cpr/src/main/java/org/atmosphere/inject/BroadcasterIntrospector.java
Patch:
@@ -49,8 +49,9 @@ public Broadcaster injectable(AtmosphereResource r) {
         }
 
         String s = (String) r.getRequest().getAttribute(Named.class.getName());
-        if (s != null) {
-            named = named.substring(0, named.indexOf("{")) + s;
+        int indx = named.indexOf("{");
+        if (s != null && indx != -1) {
+            named = named.substring(0, indx) + s;
         }
 
         final Broadcaster broadcaster = r.getAtmosphereConfig().getBroadcasterFactory().lookup(named, true);

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -192,6 +192,7 @@ public void onOpen(Session session, final EndpointConfig endpointConfig) {
                     .servletPath(servletPath)
                     .contextPath(framework.getServletContext().getContextPath())
                     .pathInfo(pathInfo)
+                    .destroyable(false)
                     .userPrincipal(session.getUserPrincipal())
                     .remoteInetSocketAddress(new Callable<InetSocketAddress>() {
                         @Override

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -239,7 +239,7 @@ public static final void inject(AtmosphereResource r) throws IllegalAccessExcept
     }
 
     private static final void inject(Object object, Class clazz, AtmosphereConfig config) throws IllegalAccessException {
-        InjectableObjectFactory.class.cast(config.framework().objectFactory()).injectAtmosphereInternalObject(object, clazz, config.framework());
+        InjectableObjectFactory.class.cast(config.framework().objectFactory()).requestScoped(object, clazz, config.framework());
     }
 
     public static final Object injectIn(AtmosphereResource r) {

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -63,7 +63,7 @@ protected void mapAnnotatedService(boolean reMap, String path, AtmosphereRequest
                                     final Object o = config.framework().newClassInstance(Object.class, AnnotatedProxy.class.cast(w.atmosphereHandler).target().getClass());
                                     ap.configure(config, o);
                                 }
-                                config.properties().put(Thread.currentThread().getName() + ".PATH", path);
+                                config.properties().put(Thread.currentThread().getName() + ".PATH", path.substring(targetPath.indexOf("{")));
 
                                 if (ap.pathParams()) {
                                     prepareForPathInjection(path, targetPath, ap.target());

File: modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java
Patch:
@@ -56,6 +56,8 @@ protected void mapAnnotatedService(boolean reMap, String path, AtmosphereRequest
                                     r.init(config);
                                 }
 
+                                config.properties().put(Thread.currentThread().getName() + ".PATH", path.substring(targetPath.indexOf("{")));
+
                                 AtmosphereResourceImpl.class.cast(request.resource()).atmosphereHandler(r);
 
                                 config.framework().addAtmosphereHandler(path, r,

File: modules/cpr/src/test/java/org/atmosphere/annotation/path/PathTest.java
Patch:
@@ -485,7 +485,7 @@ public void testNamedInjection() throws IOException, ServletException {
         framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
         assertEquals(instanceCount, 1);
         assertNotNull(r.get());
-        assertEquals(r.get(), "/inject/b123");
+        assertEquals(r.get(), "/b123");
 
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -96,7 +96,7 @@ public WebSocket binaryWrite(boolean binaryWrite) {
         return this;
     }
 
-    protected WebSocketHandler webSocketHandler() {
+    public WebSocketHandler webSocketHandler() {
         return webSocketHandler;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java
Patch:
@@ -109,7 +109,7 @@ private void suspend(CometContext ctx, Action action, AtmosphereRequest req, Atm
     /**
      * Resume the underlying response.
      *
-     * @param req an {@link AtmosphereRequestImpl}
+     * @param req an {@link AtmosphereRequest}
      * @param ctx a {@link CometContext}
      */
     private void resume(AtmosphereRequest req, CometContext ctx) {
@@ -152,7 +152,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
 
     /**
      * Void {@link CometHandler}, which delegate the processing of the
-     * {@link AtmosphereResponseImpl} to an {@link AtmosphereResource}.
+     * {@link AtmosphereResponse} to an {@link AtmosphereResource}.
      */
     private class VoidCometHandler implements CometHandler {
 

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2CometSupport.java
Patch:
@@ -108,7 +108,7 @@ private void suspend(CometContext ctx, Action action, AtmosphereRequest req, Atm
     /**
      * Resume the underlying response,
      *
-     * @param req an {@link AtmosphereRequestImpl}
+     * @param req an {@link AtmosphereRequest}
      * @param ctx a {@link org.glassfish.grizzly.comet.CometContext}
      */
     private void resume(AtmosphereRequest req, CometContext ctx) {
@@ -167,7 +167,7 @@ private static CometHandler getCometHandler(CometContext context,
 
     /**
      * Void {@link org.glassfish.grizzly.comet.CometHandler}, which delegate the processing of the
-     * {@link AtmosphereRequestImpl} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
+     * {@link AtmosphereRequest} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
      */
     private class VoidCometHandler implements CometHandler {
 

File: modules/cpr/src/main/java/org/atmosphere/container/GrizzlyCometSupport.java
Patch:
@@ -105,7 +105,7 @@ private void suspend(CometContext ctx, Action action, AtmosphereRequest req, Atm
     /**
      * Resume the underlying response.
      *
-     * @param req an {@link AtmosphereRequestImpl}
+     * @param req an {@link AtmosphereRequest}
      * @param ctx a {@link CometContext}
      */
     private void resume(AtmosphereRequest req, CometContext ctx) {
@@ -158,7 +158,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
 
     /**
      * Void {@link CometHandler}, which delegate the processing of the
-     * {@link AtmosphereRequestImpl} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
+     * {@link AtmosphereRequest} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
      */
     private class VoidCometHandler implements CometHandler {
 

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -67,8 +67,8 @@ public JBossWebCometSupport(AtmosphereConfig config) {
     /**
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
-     * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponseImpl}
+     * @param req the {@link AtmosphereRequest}
+     * @param res the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -83,8 +83,8 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
      * Suspend the connection by invoking {@link AtmosphereRequestImpl#startAsync()}
      *
      * @param action The {@link org.atmosphere.cpr.Action}
-     * @param req    the {@link AtmosphereRequestImpl}
-     * @param res    the {@link AtmosphereResponseImpl}
+     * @param req    the {@link AtmosphereRequest}
+     * @param res    the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -69,8 +69,8 @@ public Tomcat7CometSupport(AtmosphereConfig config) {
     /**
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
-     * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponseImpl}
+     * @param req the {@link AtmosphereRequest}
+     * @param res the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -66,8 +66,8 @@ public TomcatCometSupport(AtmosphereConfig config) {
     /**
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
-     * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponseImpl}
+     * @param req the {@link AtmosphereRequest}
+     * @param res the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
Patch:
@@ -18,7 +18,7 @@
 import java.io.IOException;
 
 /**
- * An Asynchronous I/O Writer is used by a {@link AtmosphereResponseImpl} when writing data.
+ * An Asynchronous I/O Writer is used by a {@link AtmosphereResponse} when writing data.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java
Patch:
@@ -53,11 +53,11 @@ public interface AsyncSupport<E extends AtmosphereResource> {
     public void init(ServletConfig sc) throws ServletException;
 
     /**
-     * Serve the {@link AtmosphereRequestImpl} and the {@link AtmosphereResponseImpl} and return
+     * Serve the {@link AtmosphereRequest} and the {@link AtmosphereResponse} and return
      * the appropriate {@link Action}.
      *
-     * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponseImpl}
+     * @param req the {@link AtmosphereRequest}
+     * @param res the {@link AtmosphereResponse}
      * @return the {@link Action} that was manipulated by the {@link AtmosphereHandler}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -155,7 +155,7 @@
 
 /**
  * The {@link AtmosphereFramework} is the entry point for the framework. This class can be used to from Servlet/filter
- * to dispatch {@link AtmosphereRequestImpl} and {@link AtmosphereResponseImpl}. The framework can also be configured using
+ * to dispatch {@link AtmosphereRequest} and {@link AtmosphereResponse}. The framework can also be configured using
  * the setXXX method. The life cycle of this class is
  * <blockquote><pre>
  * AtmosphereFramework f = new AtmosphereFramework();
@@ -2178,9 +2178,9 @@ private void getFiles(File f) {
     }
 
     /**
-     * Configure some attributes on the {@link AtmosphereRequestImpl}.
+     * Configure some attributes on the {@link AtmosphereRequest}.
      *
-     * @param req {@link AtmosphereRequestImpl}
+     * @param req {@link AtmosphereRequest}
      */
     public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, AtmosphereResponse res) throws UnsupportedEncodingException {
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Intercept the dispatch of {@link AtmosphereResource} before they get dispatched to {@link AtmosphereHandler}s.
  * An implementation of this class can intercept the dispatch and modify the AtmosphereResource and its
- * associated {@link AtmosphereRequestImpl} and {@link AtmosphereResponseImpl}.
+ * associated {@link AtmosphereRequest} and {@link AtmosphereResponse}.
  * <p/>
  * This class can be used to implement custom protocols like Server-Sent Events, Socket.IO, etc.
  *

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * A Simple {@link AtmosphereInterceptor} that creates an {@link AtmosphereInterceptorWriter} and sets it as
- * the default {@link AsyncIOWriter} on an {@link AtmosphereResponseImpl}.
+ * the default {@link AsyncIOWriter} on an {@link AtmosphereResponse}.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -40,10 +40,10 @@
 import java.util.Map;
 
 /**
- * An Atmosphere request representation. An {@link AtmosphereRequestImpl} is a two-way communication channel between the
+ * An Atmosphere request representation. An {@link AtmosphereRequest} is a two-way communication channel between the
  * client and the server. If the {@link AtmosphereRequestImpl#isDestroyable()} is set to false, or if its
  * associated {@link AtmosphereResource} has been suspended, this object can be re-used at any moment between requests.
- * You can use its associated {@link AtmosphereResponseImpl} to write bytes at any moment, making this object bi-directional.
+ * You can use its associated {@link AtmosphereResponse} to write bytes at any moment, making this object bi-directional.
  * <br/>
  *
  * @author Jeanfrancois Arcand

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponseImpl.java
Patch:
@@ -891,7 +891,7 @@ public final static AtmosphereResponse newInstance(AtmosphereConfig config, Atmo
      * Wrap an {@link HttpServletResponse}
      *
      * @param response {@link HttpServletResponse}
-     * @return an {@link AtmosphereResponseImpl}
+     * @return an {@link AtmosphereResponse}
      */
     public final static AtmosphereResponse wrap(HttpServletResponse response) {
         return new Builder().response(response).build();

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -442,7 +442,7 @@ protected BroadcastAction filter(Object object) {
     }
 
     /**
-     * Invoke {@link BroadcastFilter}s in the order they were added, with a unique {@link AtmosphereRequestImpl}.
+     * Invoke {@link BroadcastFilter}s in the order they were added, with a unique {@link AtmosphereRequest}.
      *
      * @param r       {@link AtmosphereResource}
      * @param message the broadcasted object.

File: modules/cpr/src/main/java/org/atmosphere/cpr/PerRequestBroadcastFilter.java
Patch:
@@ -24,7 +24,7 @@ public interface PerRequestBroadcastFilter extends BroadcastFilter {
 
     /**
      * Transform or filter a message per {@link AtmosphereResource}. Be careful when setting headers on the
-     * {@link AtmosphereResponseImpl} as the headers may have been already sent back to the browser.
+     * {@link AtmosphereResponse} as the headers may have been already sent back to the browser.
      *
      *
      * @param broadcasterId the {@link org.atmosphere.cpr.Broadcaster#getID()}

File: modules/cpr/src/main/java/org/atmosphere/interceptor/NginxInterceptor.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Add proper header for Nginx's buffering http://wiki.nginx.org/HttpProxyModule#proxy_buffering
  * <br/>
- * This interceptor set the 'X-Accel-Buffering : No' on the {@link AtmosphereResponseImpl} before it gets suspended.
+ * This interceptor set the 'X-Accel-Buffering : No' on the {@link AtmosphereResponse} before it gets suspended.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/util/EndpointMapper.java
Patch:
@@ -33,7 +33,7 @@ public interface EndpointMapper<U> extends AtmosphereConfigAware {
     /**
      * Mape the request to its associated endpoint.
      *
-     * @param req      an {@link AtmosphereRequestImpl}
+     * @param req      an {@link AtmosphereRequest}
      * @param handlers a map used for mapping the request to.
      * @return U the result, or null if not mapped
      */

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -559,8 +559,8 @@ private void handleException(Exception ex, WebSocket webSocket, WebSocketHandler
     /**
      * Dispatch to request/response to the {@link org.atmosphere.cpr.AsyncSupport} implementation as it was a normal HTTP request.
      *
-     * @param request a {@link AtmosphereRequestImpl}
-     * @param r       a {@link AtmosphereResponseImpl}
+     * @param request a {@link AtmosphereRequest}
+     * @param r       a {@link AtmosphereResponse}
      */
     public final void dispatch(WebSocket webSocket, final AtmosphereRequest request, final AtmosphereResponse r) {
         if (request == null) return;

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -41,7 +41,7 @@ public interface WebSocketProtocol extends AtmosphereConfigAware {
      *
      * @param webSocket The {@link WebSocket} connection
      * @param data      The Websocket message
-     * @return a List of {@link AtmosphereRequestImpl}
+     * @return a List of {@link AtmosphereRequest}
      */
     List<AtmosphereRequest> onMessage(WebSocket webSocket, String data);
 
@@ -58,7 +58,7 @@ public interface WebSocketProtocol extends AtmosphereConfigAware {
      * @param webSocket The {@link WebSocket} connection
      * @param offset    offset message index
      * @param length    length of the message.
-     * @return a List of {@link AtmosphereRequestImpl}
+     * @return a List of {@link AtmosphereRequest}
      */
     List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length);
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocolStream.java
Patch:
@@ -42,7 +42,7 @@ public interface WebSocketProtocolStream extends WebSocketProtocol {
      *
      * @param webSocket The {@link org.atmosphere.websocket.WebSocket} connection
      * @param r         a {@link java.io.Reader}
-     * @return a List of {@link AtmosphereRequestImpl}
+     * @return a List of {@link AtmosphereRequest}
      */
     List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r);
 
@@ -58,7 +58,7 @@ public interface WebSocketProtocolStream extends WebSocketProtocol {
      *
      * @param webSocket The {@link WebSocket} connection
      * @param stream    a {@link Reader}
-     * @return a List of {@link AtmosphereRequestImpl}
+     * @return a List of {@link AtmosphereRequest}
      */
     List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream stream);
 }

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -24,6 +24,7 @@
 import org.atmosphere.cpr.AtmosphereInterceptorWriter;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.interceptor.InvokationOrder;
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.util.Utils;
@@ -91,7 +92,7 @@ public TrackMessageSizeInterceptor messageDelimiter(String endString) {
 
     /**
      * Exclude response's content-type from being processed by this class.
-     * @param excludedContentType the value of {@link org.atmosphere.cpr.AtmosphereResponse#getContentType()}
+     * @param excludedContentType the value of {@link AtmosphereResponseImpl#getContentType()}
      * @return this
      */
     public TrackMessageSizeInterceptor excludedContentType(String excludedContentType) {

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -25,6 +25,7 @@
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.Broadcaster;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -122,7 +123,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
      *
      * @param action The {@link Action}
      * @param req    the {@link AtmosphereRequestImpl}
-     * @param res    the {@link AtmosphereResponse}
+     * @param res    the {@link AtmosphereResponseImpl}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/EmbeddedWebSocketHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.handler.AbstractReflectorAtmosphereHandler;
 import org.atmosphere.util.IOUtils;
@@ -104,7 +104,7 @@ private WebSocket webSocket(InputStream inputStream) throws IOException {
                     .header("Upgrade", "websocket")
                     .pathInfo(requestURI);
             try {
-                processor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
+                processor.open(webSocket, request, AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig(), request, webSocket));
             } catch (Exception ex) {
                 ex.printStackTrace();
             }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishServ30WebSocketSupport.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.util.Utils;
@@ -137,7 +138,7 @@ public void onConnect(WebSocket socket) {
                 AtmosphereRequest r = AtmosphereRequestImpl.wrap(g2WebSocket.getUpgradeRequest());
                 org.atmosphere.websocket.WebSocket webSocket = new Grizzly2WebSocket(g2WebSocket, config);
                 g2WebSocket.getUpgradeRequest().setAttribute("grizzly.webSocket", webSocket);
-                webSocketProcessor.open(webSocket, r, AtmosphereResponse.newInstance(config, r, webSocket));
+                webSocketProcessor.open(webSocket, r, AtmosphereResponseImpl.newInstance(config, r, webSocket));
             } catch (Exception e) {
                 LOGGER.warn("failed to connect to web socket", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketHandler.java
Patch:
@@ -29,6 +29,7 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.util.DefaultEndpointMapper;
 import org.atmosphere.util.EndpointMapper;
@@ -121,7 +122,7 @@ public void onConnect(WebSocket w) {
         try {
 
             AtmosphereRequest r = AtmosphereRequestImpl.wrap(dws.getRequest());
-            AtmosphereResponse response = AtmosphereResponse.newInstance(config, r, webSocket);
+            AtmosphereResponse response = AtmosphereResponseImpl.newInstance(config, r, webSocket);
             config.framework().configureRequestResponse(r, response);
             try {
                 // Stupid Stupid Stupid

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java
Patch:
@@ -28,6 +28,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -151,7 +152,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
 
     /**
      * Void {@link CometHandler}, which delegate the processing of the
-     * {@link AtmosphereResponse} to an {@link AtmosphereResource}.
+     * {@link AtmosphereResponseImpl} to an {@link AtmosphereResource}.
      */
     private class VoidCometHandler implements CometHandler {
 

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.util.Utils;
@@ -136,7 +137,7 @@ public void onConnect(WebSocket socket) {
                 AtmosphereRequest r = AtmosphereRequestImpl.wrap(g2WebSocket.getUpgradeRequest());
                 org.atmosphere.websocket.WebSocket webSocket = new Grizzly2WebSocket(g2WebSocket, config);
                 g2WebSocket.getUpgradeRequest().setAttribute("grizzly.webSocket", webSocket);
-                webSocketProcessor.open(webSocket, r, AtmosphereResponse.newInstance(config, r, webSocket));
+                webSocketProcessor.open(webSocket, r, AtmosphereResponseImpl.newInstance(config, r, webSocket));
             } catch (Exception e) {
                 LOGGER.warn("failed to connect to web socket", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -26,6 +26,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.ExecutorsFactory;
 import org.jboss.servlet.http.HttpEvent;
 import org.slf4j.Logger;
@@ -67,7 +68,7 @@ public JBossWebCometSupport(AtmosphereConfig config) {
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
      * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link org.atmosphere.cpr.AtmosphereResponse}
+     * @param res the {@link AtmosphereResponseImpl}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java
Patch:
@@ -19,7 +19,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.jboss.as.websockets.WebSocket;
@@ -68,7 +68,7 @@ protected void onSocketOpened(WebSocket socket) throws IOException {
 
         AtmosphereRequest r = AtmosphereRequestImpl.wrap(socket.getServletRequest());
         webSocket = new JBossWebSocket(socket, config);
-        webSocketProcessor.open(webSocket, r, AtmosphereResponse.newInstance(config, r, webSocket));
+        webSocketProcessor.open(webSocket, r, AtmosphereResponseImpl.newInstance(config, r, webSocket));
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -20,7 +20,7 @@
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListener;
@@ -220,7 +220,7 @@ public InetSocketAddress call() throws Exception {
             // TODO: Fix this crazy code.
             framework.addInitParameter(ALLOW_QUERYSTRING_AS_REQUEST, "false");
 
-            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
+            webSocketProcessor.open(webSocket, request, AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig(), request, webSocket));
 
             framework.addInitParameter(ALLOW_QUERYSTRING_AS_REQUEST, "true");
 

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9WebSocketHandler.java
Patch:
@@ -19,7 +19,7 @@
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.eclipse.jetty.websocket.api.Session;
@@ -110,7 +110,7 @@ public void onWebSocketConnect(Session session) {
         }
 
         try {
-            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
+            webSocketProcessor.open(webSocket, request, AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig(), request, webSocket));
         } catch (Exception e) {
             logger.warn("Failed to connect to WebSocket", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -18,7 +18,7 @@
 import org.atmosphere.container.version.Jetty8WebSocket;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListener;
 import org.atmosphere.websocket.WebSocketProcessor;
@@ -101,7 +101,7 @@ public void onMessage(String data) {
     public void onOpen(org.eclipse.jetty.websocket.WebSocket.Connection connection) {
         logger.trace("WebSocket.onOpen {}", connection);
         try {
-            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
+            webSocketProcessor.open(webSocket, request, AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig(), request, webSocket));
         } catch (Exception e) {
             logger.warn("Failed to connect to WebSocket", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -23,6 +23,7 @@
 import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.FrameworkConfig;
 import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
@@ -83,7 +84,7 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
      *
      * @param action The {@link org.atmosphere.cpr.Action}
      * @param req    the {@link AtmosphereRequestImpl}
-     * @param res    the {@link AtmosphereResponse}
+     * @param res    the {@link AtmosphereResponseImpl}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -27,6 +27,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.ExecutorsFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -69,7 +70,7 @@ public Tomcat7CometSupport(AtmosphereConfig config) {
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
      * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponse}
+     * @param res the {@link AtmosphereResponseImpl}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -27,6 +27,7 @@
 import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.ExecutorsFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -66,7 +67,7 @@ public TomcatCometSupport(AtmosphereConfig config) {
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
      * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponse}
+     * @param res the {@link AtmosphereResponseImpl}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.slf4j.Logger;
@@ -69,7 +69,7 @@ protected void onOpen(WsOutbound outbound) {
         logger.trace("WebSocket.onOpen.");
         webSocket = new TomcatWebSocket(outbound, framework.getAtmosphereConfig());
         try {
-            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
+            webSocketProcessor.open(webSocket, request, AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig(), request, webSocket));
         } catch (Exception e) {
             logger.warn("failed to connect to web socket", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/container/WeblogicWebSocketHandler.java
Patch:
@@ -20,7 +20,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereRequestImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListener;
@@ -82,7 +82,7 @@ public void onOpen(WebSocketConnection webSocketConnection) {
         ar.queryString(ar.getQueryString());
         request.set(null);
         try {
-            webSocketProcessor.open(webSocket, ar, AtmosphereResponse.newInstance(config, ar, webSocket));
+            webSocketProcessor.open(webSocket, ar, AtmosphereResponseImpl.newInstance(config, ar, webSocket));
         } catch (IOException e) {
             logger.error("{}", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -894,7 +894,7 @@ public interface ApplicationConfig {
      */
     String META_SERVICE_PATH = "org.atmosphere.cpr.metaServicePath";
     /**
-     * Close the {@link org.atmosphere.cpr.AtmosphereResponse#getOutputStream()} when {@link org.atmosphere.cpr.AtmosphereResource#close()}
+     * Close the {@link AtmosphereResponseImpl#getOutputStream()} when {@link org.atmosphere.cpr.AtmosphereResource#close()}
      * gets invoked, or when the underlying server close the connection.
      * Default: false
      * Value: org.atmosphere.cpr.AsynchronousProcessor.closeOnCancel

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriter.java
Patch:
@@ -18,7 +18,7 @@
 import java.io.IOException;
 
 /**
- * An Asynchronous I/O Writer is used by a {@link AtmosphereResponse} when writing data.
+ * An Asynchronous I/O Writer is used by a {@link AtmosphereResponseImpl} when writing data.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java
Patch:
@@ -53,11 +53,11 @@ public interface AsyncSupport<E extends AtmosphereResource> {
     public void init(ServletConfig sc) throws ServletException;
 
     /**
-     * Serve the {@link AtmosphereRequestImpl} and the {@link AtmosphereResponse} and return
+     * Serve the {@link AtmosphereRequestImpl} and the {@link AtmosphereResponseImpl} and return
      * the appropriate {@link Action}.
      *
      * @param req the {@link AtmosphereRequestImpl}
-     * @param res the {@link AtmosphereResponse}
+     * @param res the {@link AtmosphereResponseImpl}
      * @return the {@link Action} that was manipulated by the {@link AtmosphereHandler}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFilter.java
Patch:
@@ -105,7 +105,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             throws IOException, ServletException {
 
         AtmosphereRequest req = AtmosphereRequestImpl.wrap((HttpServletRequest) request);
-        AtmosphereResponse res = AtmosphereResponse.wrap((HttpServletResponse) response);
+        AtmosphereResponse res = AtmosphereResponseImpl.wrap((HttpServletResponse) response);
         Action a = null;
 
         if (req.getServletPath() == null

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -155,7 +155,7 @@
 
 /**
  * The {@link AtmosphereFramework} is the entry point for the framework. This class can be used to from Servlet/filter
- * to dispatch {@link AtmosphereRequestImpl} and {@link AtmosphereResponse}. The framework can also be configured using
+ * to dispatch {@link AtmosphereRequestImpl} and {@link AtmosphereResponseImpl}. The framework can also be configured using
  * the setXXX method. The life cycle of this class is
  * <blockquote><pre>
  * AtmosphereFramework f = new AtmosphereFramework();
@@ -2338,7 +2338,7 @@ public AtmosphereFramework setDefaultBroadcasterClassName(String bccn) {
     }
 
     /**
-     * <tt>true</tt> if Atmosphere uses {@link AtmosphereResponse#getOutputStream()}
+     * <tt>true</tt> if Atmosphere uses {@link AtmosphereResponseImpl#getOutputStream()}
      * by default for write operation.
      *
      * @return the useStreamForFlushingComments
@@ -2352,7 +2352,7 @@ public boolean isUseServlet30() {
     }
 
     /**
-     * Set to <tt>true</tt> so Atmosphere uses {@link AtmosphereResponse#getOutputStream()}
+     * Set to <tt>true</tt> so Atmosphere uses {@link AtmosphereResponseImpl#getOutputStream()}
      * by default for write operation. Default is false.
      *
      * @param useStreamForFlushingComments the useStreamForFlushingComments to set

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Intercept the dispatch of {@link AtmosphereResource} before they get dispatched to {@link AtmosphereHandler}s.
  * An implementation of this class can intercept the dispatch and modify the AtmosphereResource and its
- * associated {@link AtmosphereRequestImpl} and {@link AtmosphereResponse}.
+ * associated {@link AtmosphereRequestImpl} and {@link AtmosphereResponseImpl}.
  * <p/>
  * This class can be used to implement custom protocols like Server-Sent Events, Socket.IO, etc.
  *

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * A Simple {@link AtmosphereInterceptor} that creates an {@link AtmosphereInterceptorWriter} and sets it as
- * the default {@link AsyncIOWriter} on an {@link AtmosphereResponse}.
+ * the default {@link AsyncIOWriter} on an {@link AtmosphereResponseImpl}.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -43,7 +43,7 @@
  * An Atmosphere request representation. An {@link AtmosphereRequestImpl} is a two-way communication channel between the
  * client and the server. If the {@link AtmosphereRequestImpl#isDestroyable()} is set to false, or if its
  * associated {@link AtmosphereResource} has been suspended, this object can be re-used at any moment between requests.
- * You can use its associated {@link AtmosphereResponse} to write bytes at any moment, making this object bi-directional.
+ * You can use its associated {@link AtmosphereResponseImpl} to write bytes at any moment, making this object bi-directional.
  * <br/>
  *
  * @author Jeanfrancois Arcand

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequestImpl.java
Patch:
@@ -66,7 +66,7 @@
  * An Atmosphere request representation. An {@link AtmosphereRequestImpl} is a two-way communication channel between the
  * client and the server. If the {@link AtmosphereRequestImpl#isDestroyable()} is set to false, or if its
  * associated {@link AtmosphereResource} has been suspended, this object can be re-used at any moment between requests.
- * You can use its associated {@link AtmosphereResponse} to write bytes at any moment, making this object bi-directional.
+ * You can use its associated {@link AtmosphereResponseImpl} to write bytes at any moment, making this object bi-directional.
  * <br/>
  *
  * @author Jeanfrancois Arcand

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -187,6 +187,6 @@ public void doGet(HttpServletRequest req, HttpServletResponse res)
     @Override
     public void doPost(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
-        framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponse.wrap(res));
+        framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponseImpl.wrap(res));
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/cpr/PerRequestBroadcastFilter.java
Patch:
@@ -24,7 +24,7 @@ public interface PerRequestBroadcastFilter extends BroadcastFilter {
 
     /**
      * Transform or filter a message per {@link AtmosphereResource}. Be careful when setting headers on the
-     * {@link AtmosphereResponse} as the headers may have been already sent back to the browser.
+     * {@link AtmosphereResponseImpl} as the headers may have been already sent back to the browser.
      *
      *
      * @param broadcasterId the {@link org.atmosphere.cpr.Broadcaster#getID()}

File: modules/cpr/src/main/java/org/atmosphere/interceptor/NginxInterceptor.java
Patch:
@@ -18,14 +18,15 @@
 import org.atmosphere.cpr.Action;
 import org.atmosphere.cpr.AtmosphereInterceptorAdapter;
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * Add proper header for Nginx's buffering http://wiki.nginx.org/HttpProxyModule#proxy_buffering
  * <br/>
- * This interceptor set the 'X-Accel-Buffering : No' on the {@link org.atmosphere.cpr.AtmosphereResponse} before it gets suspended.
+ * This interceptor set the 'X-Accel-Buffering : No' on the {@link AtmosphereResponseImpl} before it gets suspended.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/interceptor/TrackMessageSizeB64Interceptor.java
Patch:
@@ -24,6 +24,7 @@
 import org.atmosphere.cpr.AtmosphereInterceptorWriter;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -66,7 +67,7 @@ public void configure(AtmosphereConfig config) {
     /**
      * Excluse response's content-type from being processed by this class.
      *
-     * @param excludedContentType the value of {@link org.atmosphere.cpr.AtmosphereResponse#getContentType()}
+     * @param excludedContentType the value of {@link AtmosphereResponseImpl#getContentType()}
      * @return this
      */
     public TrackMessageSizeB64Interceptor excludedContentType(String excludedContentType) {

File: modules/cpr/src/test/java/org/atmosphere/annotation/cache/ManagedAtmosphereHandlerTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -103,7 +104,7 @@ public final static class BroadcasterCacheTest {
     public void testBroadcasterCache() throws IOException, ServletException {
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/cache").method("GET").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
         assertEquals(framework.getBroadcasterFactory().lookup("/*", true).getBroadcasterConfig().getBroadcasterCache().getClass(), UUIDBroadcasterCache.class);
 
     }

File: modules/cpr/src/test/java/org/atmosphere/annotation/custom/CustomAnnotationTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.handler.AbstractReflectorAtmosphereHandler;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
@@ -139,7 +140,7 @@ public void onRequest(AtmosphereResource resource) throws IOException {
     public void testGet() throws IOException, ServletException {
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/z").method("GET").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
         r.get().resume();
 
         assertNotNull(r.get());

File: modules/cpr/src/test/java/org/atmosphere/annotation/scanning/AnnotationScanningTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResourceListener;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.handler.AtmosphereHandlerAdapter;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.BeforeMethod;
@@ -87,7 +88,7 @@ public void onDisconnect(String uuid) {
     @Test
     public void testAnnotation() throws IOException, ServletException {
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").method("GET").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
         AsynchronousProcessor.class.cast(framework.getAsyncSupport()).endRequest((AtmosphereResourceImpl)request.resource(), true);
 
         assertTrue(suspended.get());

File: modules/cpr/src/test/java/org/atmosphere/cpr/AsyncIOInterceptorTest.java
Patch:
@@ -29,7 +29,7 @@ public class AsyncIOInterceptorTest {
     @Test
     public void singleTest() throws ServletException, IOException {
         final AtomicReference<String> s = new AtomicReference<String>();
-        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequestImpl.newInstance());
+        AtmosphereResponse res = AtmosphereResponseImpl.newInstance().request(AtmosphereRequestImpl.newInstance());
         res.request().setAttribute(PROPERTY_USE_STREAM, false);
         res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor() {
 
@@ -62,7 +62,7 @@ public void redirect(AtmosphereResponse response, String location) {
     @Test
     public void chaining() throws ServletException, IOException {
         final AtomicReference<StringBuffer> s = new AtomicReference<StringBuffer>(new StringBuffer());
-        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequestImpl.newInstance());
+        AtmosphereResponse res = AtmosphereResponseImpl.newInstance().request(AtmosphereRequestImpl.newInstance());
         res.request().setAttribute(PROPERTY_USE_STREAM, false);
         res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor() {
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereFrameworkTest.java
Patch:
@@ -71,7 +71,7 @@ public void setAttribute(String name, Object o) {
                 super.setAttribute(name, o);
             }
         }).build();
-        processor.action(r, AtmosphereResponse.newInstance());
+        processor.action(r, AtmosphereResponseImpl.newInstance());
         assertNotNull(value.get());
 
         // The interceptor must be installed and called one time.

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereHandlerTest.java
Patch:
@@ -107,7 +107,7 @@ public void destroy() {
         });
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
         r.get().resume();
 
         assertTrue(e.get().isResuming());
@@ -123,7 +123,7 @@ public void testByteCachedList() throws Exception {
         atmosphereHandler = new AR();
 
         final AtomicReference<byte[]> ref = new AtomicReference<byte[]>();
-        AtmosphereResponse r = AtmosphereResponse.newInstance();
+        AtmosphereResponse r = AtmosphereResponseImpl.newInstance();
         r.asyncIOWriter(new AsyncIOWriterAdapter() {
             @Override
             public AsyncIOWriter write(AtmosphereResponse r, byte[] data) throws IOException {

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceListenerTest.java
Patch:
@@ -144,7 +144,7 @@ public void postInspect(AtmosphereResource r) {
                 r.resume();
             }
         });
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
 
         assertTrue(preSuspended.get());
@@ -203,7 +203,7 @@ public void postInspect(AtmosphereResource r) {
                 }
             }
         });
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
         assertTrue(closed.get());
     }
 }

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereSessionTest.java
Patch:
@@ -85,7 +85,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
         });
         final String qs = "&X-Atmosphere-tracking-id=c8834462-c46e-4dad-a22f-b86aabe3f883&X-Atmosphere-Framework=2.0.4-javascript&X-Atmosphere-Transport=sse&X-Atmosphere-TrackMessageSize=true&X-atmo-protocol=true&_=1380799455333";
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo("/acquire").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         latch.await(10, TimeUnit.SECONDS);
         assertNull(session.get().acquire());
@@ -110,7 +110,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
         });
 
         request = new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo("/acquire").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance(request));
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance(request));
 
         _latch.await(10, TimeUnit.SECONDS);
 
@@ -121,7 +121,7 @@ public void run() {
                 try {
                     Thread.sleep(1000);
                     AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo("/acquire").build();
-                    framework.doCometSupport(request, AtmosphereResponse.newInstance(request));
+                    framework.doCometSupport(request, AtmosphereResponseImpl.newInstance(request));
                 } catch (Exception e) {
                     e.printStackTrace();
                 }

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterCacheTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/ConcurrentBroadcasterTest.java
Patch:
@@ -101,7 +101,7 @@ public void testOrderedConcurrentBroadcast() throws InterruptedException {
         ar = new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig(),
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -314,7 +314,7 @@ public void testOrderedSimpleBroadcast() throws InterruptedException {
         ar = new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig(),
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -350,7 +350,7 @@ AtmosphereResource newAR(AtmosphereHandler a) {
         return new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig(),
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 a);
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/CookieTest.java
Patch:
@@ -98,7 +98,7 @@ public void destroy() {
         c.add(new Cookie("yo", "man"));
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().cookies(c).pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         r.get().getBroadcaster().broadcast("yo").get();
         assertNotNull(cValue.get());
@@ -141,7 +141,7 @@ public void destroy() {
         c.add(a);
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().cookies(c).pathInfo("/a").build();
-        AtmosphereResponse response = AtmosphereResponse.newInstance().delegateToNativeResponse(false);
+        AtmosphereResponse response = AtmosphereResponseImpl.newInstance().delegateToNativeResponse(false);
         response.destroyable(false);
         framework.doCometSupport(request, response);
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterTest.java
Patch:
@@ -97,7 +97,7 @@ public List<Object> retrieveFromCache(String id, String uuid) {
         final AtmosphereResourceImpl ar = new AtmosphereResourceImpl(new AtmosphereFramework().getAtmosphereConfig(),
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 new AR());
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/ExcludeSessionBroadcasterTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/MeteorTest.java
Patch:
@@ -93,7 +93,7 @@ public Action inspect(AtmosphereResource r) {
             }
 
         });
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         assertNotNull(meteor.get());
     }
@@ -117,7 +117,7 @@ public Action inspect(AtmosphereResource r) {
             }
 
         });
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         assertNull(meteor.get());
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/QueryStringTest.java
Patch:
@@ -94,7 +94,7 @@ public void destroy() {
         queryStrings.put("c", new String[]{"f"});
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryStrings(queryStrings).pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         r.get().getBroadcaster().broadcast("yo").get();
         assertNotNull(q.get());
@@ -126,7 +126,7 @@ public void destroy() {
         String s = "&X-Atmosphere-tracking-id=c8834462-c46e-4dad-a22f-b86aabe3f883&X-Atmosphere-Framework=2.0.3-javascript&X-Atmosphere-Transport=long-polling&X-Atmosphere-TrackMessageSize=true&X-atmo-protocol=true&_=1380799455333";
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryString(s).pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         r.get().getBroadcaster().broadcast("yo").get();
         assertNotNull(q.get());
@@ -158,7 +158,7 @@ public void destroy() {
         String s = "&Content-Type=text/x-gwt-rpc;%20charset=UTF-8&X-Atmosphere-tracking-id=c8834462-c46e-4dad-a22f-b86aabe3f883&X-Atmosphere-Framework=2.0.3-javascript&X-Atmosphere-Transport=long-polling&X-Atmosphere-TrackMessageSize=true&X-atmo-protocol=true&_=1380799455333";
 
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryString(s).pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance());
+        framework.doCometSupport(request, AtmosphereResponseImpl.newInstance());
 
         r.get().getBroadcaster().broadcast("yo").get();
         assertNotNull(q.get());

File: modules/cpr/src/test/java/org/atmosphere/cpr/SessionTest.java
Patch:
@@ -47,7 +47,7 @@ public void basicSessionTest() throws IOException, ServletException, ExecutionEx
     @Test
     public void basicAtmosphereResourceSessionTest() throws IOException, ServletException, ExecutionException, InterruptedException {
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().build();
-        AtmosphereResponse response = new AtmosphereResponse.Builder().build();    
+        AtmosphereResponse response = new AtmosphereResponseImpl.Builder().build();
         AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
 
         AtmosphereResource r = config.resourcesFactory().create(new AtmosphereFramework().getAtmosphereConfig(),
@@ -63,7 +63,7 @@ public void basicAtmosphereResourceSessionTest() throws IOException, ServletExce
         assertNotNull(r.session());
 
         request = new AtmosphereRequestImpl.Builder().session(new FakeHttpSession("-1", null, System.currentTimeMillis(), -1)).build();
-        response = new AtmosphereResponse.Builder().build();
+        response = new AtmosphereResponseImpl.Builder().build();
         r = config.resourcesFactory().create(new AtmosphereFramework().getAtmosphereConfig(),
                 request,
                 response,
@@ -82,7 +82,7 @@ public void sessionReplacementTest() {
 
         HttpServletRequest httpRequest = new NoOpsRequest();
         AtmosphereRequest request = new AtmosphereRequestImpl.Builder().request(httpRequest).session(httpRequest.getSession(true)).build();
-        AtmosphereResponse response = new AtmosphereResponse.Builder().build();
+        AtmosphereResponse response = new AtmosphereResponseImpl.Builder().build();
         AtmosphereResource r = config.resourcesFactory().create(config, request, response, mock(AsyncSupport.class));
 
         request.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, r);

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -56,7 +56,7 @@ public void setUp() throws Exception {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
         broadcaster.addAtmosphereResource(ar);

File: modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java
Patch:
@@ -61,7 +61,7 @@ public void testWriteTimeout() throws ExecutionException, InterruptedException,
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -87,7 +87,7 @@ public void testNoWriteTimeout() throws ExecutionException, InterruptedException
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceInjector.java
Patch:
@@ -22,7 +22,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 
 import javax.ws.rs.core.Context;
 import java.lang.reflect.InvocationHandler;
@@ -50,7 +50,7 @@ boolean isValidType(Type c) {
             if (pt.getActualTypeArguments().length != 2) return false;
 
             if (pt.getActualTypeArguments()[0] != AtmosphereRequestImpl.class) return false;
-            if (pt.getActualTypeArguments()[1] != AtmosphereResponse.class) return false;
+            if (pt.getActualTypeArguments()[1] != AtmosphereResponseImpl.class) return false;
 
             return true;
         }

File: modules/jersey/src/test/java/org/atmosphere/jersey/WriteTimeoutTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.cpr.AtmosphereResponseImpl;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.DefaultBroadcasterFactory;
 import org.atmosphere.handler.ReflectorServletProcessor;
@@ -130,7 +130,7 @@ public void testWriteTimeout() throws ExecutionException, InterruptedException,
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -155,7 +155,7 @@ public void testNoWriteTimeout() throws ExecutionException, InterruptedException
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequestImpl.class),
-                AtmosphereResponse.newInstance(),
+                AtmosphereResponseImpl.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
@@ -120,7 +121,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
      * Suspend the connection by blocking the current {@link Thread}
      *
      * @param action The {@link Action}
-     * @param req    the {@link AtmosphereRequest}
+     * @param req    the {@link AtmosphereRequestImpl}
      * @param res    the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/container/EmbeddedWebSocketHandler.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
@@ -98,7 +99,7 @@ private WebSocket webSocket(InputStream inputStream) throws IOException {
         if (webSocket == null) {
             webSocket = new ArrayBaseWebSocket();
             webSockets.put(inputStream, webSocket);
-            AtmosphereRequest request = AtmosphereRequest.newInstance()
+            AtmosphereRequest request = AtmosphereRequestImpl.newInstance()
                     .header("Connection", "Upgrade")
                     .header("Upgrade", "websocket")
                     .pathInfo(requestURI);

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishServ30WebSocketSupport.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.Action;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.util.IOUtils;
@@ -133,7 +134,7 @@ public void onConnect(WebSocket socket) {
             DefaultWebSocket g2WebSocket = DefaultWebSocket.class.cast(socket);
             try {
 
-                AtmosphereRequest r = AtmosphereRequest.wrap(g2WebSocket.getUpgradeRequest());
+                AtmosphereRequest r = AtmosphereRequestImpl.wrap(g2WebSocket.getUpgradeRequest());
                 org.atmosphere.websocket.WebSocket webSocket = new Grizzly2WebSocket(g2WebSocket, config);
                 g2WebSocket.getUpgradeRequest().setAttribute("grizzly.webSocket", webSocket);
                 webSocketProcessor.open(webSocket, r, AtmosphereResponse.newInstance(config, r, webSocket));

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketHandler.java
Patch:
@@ -27,6 +27,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.util.DefaultEndpointMapper;
@@ -119,7 +120,7 @@ public void onConnect(WebSocket w) {
 
         try {
 
-            AtmosphereRequest r = AtmosphereRequest.wrap(dws.getRequest());
+            AtmosphereRequest r = AtmosphereRequestImpl.wrap(dws.getRequest());
             AtmosphereResponse response = AtmosphereResponse.newInstance(config, r, webSocket);
             config.framework().configureRequestResponse(r, response);
             try {

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java
Patch:
@@ -24,6 +24,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -107,7 +108,7 @@ private void suspend(CometContext ctx, Action action, AtmosphereRequest req, Atm
     /**
      * Resume the underlying response.
      *
-     * @param req an {@link AtmosphereRequest}
+     * @param req an {@link AtmosphereRequestImpl}
      * @param ctx a {@link CometContext}
      */
     private void resume(AtmosphereRequest req, CometContext ctx) {

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2CometSupport.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.glassfish.grizzly.comet.CometContext;
@@ -107,7 +108,7 @@ private void suspend(CometContext ctx, Action action, AtmosphereRequest req, Atm
     /**
      * Resume the underlying response,
      *
-     * @param req an {@link org.atmosphere.cpr.AtmosphereRequest}
+     * @param req an {@link AtmosphereRequestImpl}
      * @param ctx a {@link org.glassfish.grizzly.comet.CometContext}
      */
     private void resume(AtmosphereRequest req, CometContext ctx) {
@@ -166,7 +167,7 @@ private static CometHandler getCometHandler(CometContext context,
 
     /**
      * Void {@link org.glassfish.grizzly.comet.CometHandler}, which delegate the processing of the
-     * {@link org.atmosphere.cpr.AtmosphereRequest} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
+     * {@link AtmosphereRequestImpl} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
      */
     private class VoidCometHandler implements CometHandler {
 

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.Action;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.util.IOUtils;
@@ -132,7 +133,7 @@ public void onConnect(WebSocket socket) {
             DefaultWebSocket g2WebSocket = DefaultWebSocket.class.cast(socket);
             try {
 
-                AtmosphereRequest r = AtmosphereRequest.wrap(g2WebSocket.getUpgradeRequest());
+                AtmosphereRequest r = AtmosphereRequestImpl.wrap(g2WebSocket.getUpgradeRequest());
                 org.atmosphere.websocket.WebSocket webSocket = new Grizzly2WebSocket(g2WebSocket, config);
                 g2WebSocket.getUpgradeRequest().setAttribute("grizzly.webSocket", webSocket);
                 webSocketProcessor.open(webSocket, r, AtmosphereResponse.newInstance(config, r, webSocket));

File: modules/cpr/src/main/java/org/atmosphere/container/GrizzlyCometSupport.java
Patch:
@@ -24,6 +24,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.slf4j.Logger;
@@ -104,7 +105,7 @@ private void suspend(CometContext ctx, Action action, AtmosphereRequest req, Atm
     /**
      * Resume the underlying response.
      *
-     * @param req an {@link AtmosphereRequest}
+     * @param req an {@link AtmosphereRequestImpl}
      * @param ctx a {@link CometContext}
      */
     private void resume(AtmosphereRequest req, CometContext ctx) {
@@ -157,7 +158,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
 
     /**
      * Void {@link CometHandler}, which delegate the processing of the
-     * {@link AtmosphereRequest} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
+     * {@link AtmosphereRequestImpl} to an {@link org.atmosphere.cpr.AtmosphereResourceImpl}.
      */
     private class VoidCometHandler implements CometHandler {
 

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -22,6 +22,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -65,7 +66,7 @@ public JBossWebCometSupport(AtmosphereConfig config) {
     /**
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
-     * @param req the {@link org.atmosphere.cpr.AtmosphereRequest}
+     * @param req the {@link AtmosphereRequestImpl}
      * @param res the {@link org.atmosphere.cpr.AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.websocket.WebSocket;
@@ -183,7 +184,7 @@ public void onOpen(Session session, final EndpointConfig endpointConfig) {
                 }
             }
 
-            request = new AtmosphereRequest.Builder()
+            request = new AtmosphereRequestImpl.Builder()
                     .requestURI(uri.getPath())
                     .requestURL(requestURL)
                     .headers(headers)

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.util.Utils;
@@ -109,7 +110,7 @@ public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(HttpServletReque
                     throw new IllegalStateException();
                 }
 
-                return new JettyWebSocketHandler(AtmosphereRequest.cloneRequest(request, false, useBuildInSession.get(), isDestroyable, config.getInitParameter(PROPERTY_SESSION_CREATE, true)),
+                return new JettyWebSocketHandler(AtmosphereRequestImpl.cloneRequest(request, false, useBuildInSession.get(), isDestroyable, config.getInitParameter(PROPERTY_SESSION_CREATE, true)),
                         config.framework(), webSocketProcessor);
             }
         });

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.FrameworkConfig;
@@ -78,10 +79,10 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
     }
 
     /**
-     * Suspend the connection by invoking {@link AtmosphereRequest#startAsync()}
+     * Suspend the connection by invoking {@link AtmosphereRequestImpl#startAsync()}
      *
      * @param action The {@link org.atmosphere.cpr.Action}
-     * @param req    the {@link AtmosphereRequest}
+     * @param req    the {@link AtmosphereRequestImpl}
      * @param res    the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -23,6 +23,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -67,7 +68,7 @@ public Tomcat7CometSupport(AtmosphereConfig config) {
     /**
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
-     * @param req the {@link AtmosphereRequest}
+     * @param req the {@link AtmosphereRequestImpl}
      * @param res the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -24,6 +24,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.util.ExecutorsFactory;
@@ -64,7 +65,7 @@ public TomcatCometSupport(AtmosphereConfig config) {
     /**
      * Invoked by the Tomcat AIO when a Comet request gets detected.
      *
-     * @param req the {@link AtmosphereRequest}
+     * @param req the {@link AtmosphereRequestImpl}
      * @param res the {@link AtmosphereResponse}
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java
Patch:
@@ -37,6 +37,7 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.HeaderConfig;
 import org.atmosphere.websocket.WebSocket;
@@ -147,7 +148,7 @@ public static Action doService(AtmosphereRequest req, AtmosphereResponse res,
                 isDestroyable = true;
             }
             StreamInbound inbound = new TomcatWebSocketHandler(
-                    AtmosphereRequest.cloneRequest(req, true, useBuildInSession, isDestroyable, config.getInitParameter(PROPERTY_SESSION_CREATE, true)),
+                    AtmosphereRequestImpl.cloneRequest(req, true, useBuildInSession, isDestroyable, config.getInitParameter(PROPERTY_SESSION_CREATE, true)),
                     config.framework(), webSocketProcessor);
             facade.doUpgrade(inbound);
             return new Action(Action.TYPE.CREATED);

File: modules/cpr/src/main/java/org/atmosphere/container/WeblogicWebSocketHandler.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocket;
@@ -75,7 +76,7 @@ public void onOpen(WebSocketConnection webSocketConnection) {
         // TODO: Dangerous
         webSocketConnection.getWebSocketContext().getServletContext().setAttribute(webSocketConnection.toString(), webSocket);
 
-        AtmosphereRequest ar = AtmosphereRequest.cloneRequest(request.get(), true, true, true, config.getInitParameter(PROPERTY_SESSION_CREATE, true));
+        AtmosphereRequest ar = AtmosphereRequestImpl.cloneRequest(request.get(), true, true, true, config.getInitParameter(PROPERTY_SESSION_CREATE, true));
         // https://github.com/Atmosphere/atmosphere/issues/1854
         // We need to force processing of the query string.
         ar.queryString(ar.getQueryString());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java
Patch:
@@ -53,10 +53,10 @@ public interface AsyncSupport<E extends AtmosphereResource> {
     public void init(ServletConfig sc) throws ServletException;
 
     /**
-     * Serve the {@link AtmosphereRequest} and the {@link AtmosphereResponse} and return
+     * Serve the {@link AtmosphereRequestImpl} and the {@link AtmosphereResponse} and return
      * the appropriate {@link Action}.
      *
-     * @param req the {@link AtmosphereRequest}
+     * @param req the {@link AtmosphereRequestImpl}
      * @param res the {@link AtmosphereResponse}
      * @return the {@link Action} that was manipulated by the {@link AtmosphereHandler}
      * @throws java.io.IOException

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFilter.java
Patch:
@@ -104,7 +104,7 @@ public Enumeration<String> getInitParameterNames() {
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
             throws IOException, ServletException {
 
-        AtmosphereRequest req = AtmosphereRequest.wrap((HttpServletRequest) request);
+        AtmosphereRequest req = AtmosphereRequestImpl.wrap((HttpServletRequest) request);
         AtmosphereResponse res = AtmosphereResponse.wrap((HttpServletResponse) response);
         Action a = null;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -155,7 +155,7 @@
 
 /**
  * The {@link AtmosphereFramework} is the entry point for the framework. This class can be used to from Servlet/filter
- * to dispatch {@link AtmosphereRequest} and {@link AtmosphereResponse}. The framework can also be configured using
+ * to dispatch {@link AtmosphereRequestImpl} and {@link AtmosphereResponse}. The framework can also be configured using
  * the setXXX method. The life cycle of this class is
  * <blockquote><pre>
  * AtmosphereFramework f = new AtmosphereFramework();
@@ -2178,9 +2178,9 @@ private void getFiles(File f) {
     }
 
     /**
-     * Configure some attributes on the {@link AtmosphereRequest}.
+     * Configure some attributes on the {@link AtmosphereRequestImpl}.
      *
-     * @param req {@link AtmosphereRequest}
+     * @param req {@link AtmosphereRequestImpl}
      */
     public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, AtmosphereResponse res) throws UnsupportedEncodingException {
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Intercept the dispatch of {@link AtmosphereResource} before they get dispatched to {@link AtmosphereHandler}s.
  * An implementation of this class can intercept the dispatch and modify the AtmosphereResource and its
- * associated {@link AtmosphereRequest} and {@link AtmosphereResponse}.
+ * associated {@link AtmosphereRequestImpl} and {@link AtmosphereResponse}.
  * <p/>
  * This class can be used to implement custom protocols like Server-Sent Events, Socket.IO, etc.
  *

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -117,9 +117,9 @@ enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, S
     AtmosphereResource suspend(long timeout, TimeUnit timeunit);
 
     /**
-     * Return the underlying {@link AtmosphereRequest} request.
+     * Return the underlying {@link AtmosphereRequestImpl} request.
      *
-     * @return {@link AtmosphereRequest} the underlying request.
+     * @return {@link AtmosphereRequestImpl} the underlying request.
      */
     AtmosphereRequest getRequest();
 
@@ -322,7 +322,7 @@ enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, S
      *
      * @param config            The {@link org.atmosphere.cpr.AtmosphereConfig}
      * @param broadcaster       The {@link org.atmosphere.cpr.Broadcaster}.
-     * @param req               The {@link AtmosphereRequest}
+     * @param req               The {@link AtmosphereRequestImpl}
      * @param response          The {@link AtmosphereResource}
      * @param asyncSupport      The {@link AsyncSupport}
      * @param atmosphereHandler The {@link AtmosphereHandler}

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java
Patch:
@@ -128,7 +128,7 @@ AtmosphereResource create(AtmosphereConfig config,
      *
      * @param config  an {@link AtmosphereConfig}
      * @param uuid    a String representing a UUID
-     * @param request a {@link org.atmosphere.cpr.AtmosphereRequest}
+     * @param request a {@link AtmosphereRequestImpl}
      * @return
      */
     AtmosphereResource create(AtmosphereConfig config, String uuid, AtmosphereRequest request);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -187,6 +187,6 @@ public void doGet(HttpServletRequest req, HttpServletResponse res)
     @Override
     public void doPost(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
-        framework().doCometSupport(AtmosphereRequest.wrap(req), AtmosphereResponse.wrap(res));
+        framework().doCometSupport(AtmosphereRequestImpl.wrap(req), AtmosphereResponse.wrap(res));
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -442,7 +442,7 @@ protected BroadcastAction filter(Object object) {
     }
 
     /**
-     * Invoke {@link BroadcastFilter}s in the order they were added, with a unique {@link AtmosphereRequest}.
+     * Invoke {@link BroadcastFilter}s in the order they were added, with a unique {@link AtmosphereRequestImpl}.
      *
      * @param r       {@link AtmosphereResource}
      * @param message the broadcasted object.

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java
Patch:
@@ -220,7 +220,7 @@ public AtmosphereResource create(AtmosphereConfig config, String uuid) {
         response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID, uuid);
         return create(config,
                 noOps,
-                AtmosphereRequest.newInstance(),
+                AtmosphereRequestImpl.newInstance(),
                 response,
                 config.framework().getAsyncSupport(),
                 noOpsHandler);
@@ -231,7 +231,7 @@ public AtmosphereResource create(AtmosphereConfig config, String uuid) {
      *
      * @param config an {@link AtmosphereConfig}
      * @param uuid   a String representing a UUID
-     * @param request a {@link AtmosphereRequest}
+     * @param request a {@link AtmosphereRequestImpl}
      * @return
      */
     @Override

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereHandler;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereServletProcessor;
 import org.atmosphere.util.AtmosphereFilterChain;
@@ -47,7 +48,7 @@
 /**
  * An implementation of {@link AtmosphereHandler} using the {@link AtmosphereServletProcessor} that delegate the {@link AtmosphereHandler#onRequest}
  * to a set of {@link FilterChain} and {@link Servlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)}
- * and store the {@link AtmosphereResource} as a {@link org.atmosphere.cpr.AtmosphereRequest#getAttribute(String)} attribute named
+ * and store the {@link AtmosphereResource} as a {@link AtmosphereRequestImpl#getAttribute(String)} attribute named
  * {@link org.atmosphere.cpr.FrameworkConfig#ATMOSPHERE_RESOURCE}. The {@link AtmosphereResource} can later be retrieved
  * and used to suspend/resume and broadcast.
  *

File: modules/cpr/src/main/java/org/atmosphere/inject/AtmosphereRequestIntrospector.java
Patch:
@@ -57,7 +57,7 @@ public AtmosphereRequest injectable(AtmosphereConfig config) {
 
                     @Override
                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                        return method.invoke(r, args);
+                        return method.invoke(request, args);
                     }
                 });
     }

File: modules/cpr/src/main/java/org/atmosphere/inject/AtmosphereResponseIntrospector.java
Patch:
@@ -16,7 +16,7 @@
 package org.atmosphere.inject;
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.util.ThreadLocalInvoker;
@@ -30,7 +30,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class AtmosphereResponsetIntrospector extends InjectIntrospectorAdapter<AtmosphereResponse> {
+public class AtmosphereResponseIntrospector extends InjectIntrospectorAdapter<AtmosphereResponse> {
 
     public WHEN when() {
         return WHEN.RUNTIME;
@@ -51,7 +51,7 @@ public AtmosphereResponse injectable(AtmosphereConfig config) {
        final AtmosphereResponse response = r.getResponse();
 
         return (AtmosphereResponse) Proxy.newProxyInstance(this.getClass().getClassLoader(),
-                new Class[]{AtmosphereRequest.class}, new ThreadLocalInvoker() {
+                new Class[]{AtmosphereRequestImpl.class}, new ThreadLocalInvoker() {
                     {
                         set(response);
                     }

File: modules/cpr/src/main/java/org/atmosphere/util/EndpointMapper.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.util;
 
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.inject.AtmosphereConfigAware;
 
 import java.util.Map;
@@ -32,7 +33,7 @@ public interface EndpointMapper<U> extends AtmosphereConfigAware {
     /**
      * Mape the request to its associated endpoint.
      *
-     * @param req      an {@link AtmosphereRequest}
+     * @param req      an {@link AtmosphereRequestImpl}
      * @param handlers a map used for mapping the request to.
      * @return U the result, or null if not mapped
      */

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereServlet;
@@ -169,7 +170,7 @@ public static StringBuilder readEntirelyAsString(AtmosphereResource r) throws IO
                 }
             }
         } else {
-            AtmosphereRequest.Body body = request.body();
+            AtmosphereRequestImpl.Body body = request.body();
             try {
                 stringBuilder.append(body.hasString() ? body.asString() : new String(body.asBytes(), body.byteOffset(), body.byteLength(), request.getCharacterEncoding()));
             } catch (UnsupportedEncodingException e) {
@@ -188,7 +189,7 @@ public static byte[] readEntirelyAsByte(AtmosphereResource r) throws IOException
             return new byte[0];
         }
 
-        AtmosphereRequest.Body body = request.body();
+        AtmosphereRequestImpl.Body body = request.body();
         if (request.body().isEmpty()) {
             BufferedInputStream bufferedStream = null;
             ByteArrayOutputStream bbIS = new ByteArrayOutputStream();

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -25,6 +25,7 @@
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereMappingException;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEventImpl;
 import org.atmosphere.cpr.AtmosphereResourceEventListener;
@@ -557,7 +558,7 @@ private void handleException(Exception ex, WebSocket webSocket, WebSocketHandler
     /**
      * Dispatch to request/response to the {@link org.atmosphere.cpr.AsyncSupport} implementation as it was a normal HTTP request.
      *
-     * @param request a {@link AtmosphereRequest}
+     * @param request a {@link AtmosphereRequestImpl}
      * @param r       a {@link AtmosphereResponse}
      */
     public final void dispatch(WebSocket webSocket, final AtmosphereRequest request, final AtmosphereResponse r) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereInterceptorWriter;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -118,7 +119,7 @@ public WebSocket resource(AtmosphereResource r) {
     }
 
     /**
-     * Copy {@link AtmosphereRequest#localAttributes()} that where set when the websocket was opened.
+     * Copy {@link AtmosphereRequestImpl#localAttributes()} that where set when the websocket was opened.
      *
      * @return this.
      */

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.websocket;
 
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.inject.AtmosphereConfigAware;
 
 import java.util.List;
@@ -40,7 +41,7 @@ public interface WebSocketProtocol extends AtmosphereConfigAware {
      *
      * @param webSocket The {@link WebSocket} connection
      * @param data      The Websocket message
-     * @return a List of {@link AtmosphereRequest}
+     * @return a List of {@link AtmosphereRequestImpl}
      */
     List<AtmosphereRequest> onMessage(WebSocket webSocket, String data);
 
@@ -57,7 +58,7 @@ public interface WebSocketProtocol extends AtmosphereConfigAware {
      * @param webSocket The {@link WebSocket} connection
      * @param offset    offset message index
      * @param length    length of the message.
-     * @return a List of {@link AtmosphereRequest}
+     * @return a List of {@link AtmosphereRequestImpl}
      */
     List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length);
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocolStream.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.websocket;
 
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 
 import java.io.InputStream;
 import java.io.Reader;
@@ -41,7 +42,7 @@ public interface WebSocketProtocolStream extends WebSocketProtocol {
      *
      * @param webSocket The {@link org.atmosphere.websocket.WebSocket} connection
      * @param r         a {@link java.io.Reader}
-     * @return a List of {@link org.atmosphere.cpr.AtmosphereRequest}
+     * @return a List of {@link AtmosphereRequestImpl}
      */
     List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r);
 
@@ -57,7 +58,7 @@ public interface WebSocketProtocolStream extends WebSocketProtocol {
      *
      * @param webSocket The {@link WebSocket} connection
      * @param stream    a {@link Reader}
-     * @return a List of {@link AtmosphereRequest}
+     * @return a List of {@link AtmosphereRequestImpl}
      */
     List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream stream);
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/ProtocolUtil.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.websocket.protocol;
 
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.websocket.WebSocket;
@@ -28,7 +29,7 @@
 public class ProtocolUtil {
     private final static Logger logger = LoggerFactory.getLogger(ProtocolUtil.class);
 
-    protected static AtmosphereRequest.Builder constructRequest(WebSocket webSocket,
+    protected static AtmosphereRequestImpl.Builder constructRequest(WebSocket webSocket,
                                                                 String pathInfo,
                                                                 String requestURI,
                                                                 String methodType,
@@ -40,7 +41,7 @@ protected static AtmosphereRequest.Builder constructRequest(WebSocket webSocket,
         Map<String, Object> m = attributes(webSocket, request);
 
         // We need to create a new AtmosphereRequest as WebSocket message may arrive concurrently on the same connection.
-        AtmosphereRequest.Builder b = (new AtmosphereRequest.Builder()
+        AtmosphereRequestImpl.Builder b = (new AtmosphereRequestImpl.Builder()
                 .request(request)
                 .method(methodType)
                 .contentType(contentType == null ? request.getContentType() : contentType)

File: modules/cpr/src/test/java/org/atmosphere/annotation/cache/ManagedAtmosphereHandlerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -101,7 +102,7 @@ public final static class BroadcasterCacheTest {
     @Test
     public void testBroadcasterCache() throws IOException, ServletException {
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/cache").method("GET").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/cache").method("GET").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
         assertEquals(framework.getBroadcasterFactory().lookup("/*", true).getBroadcasterConfig().getBroadcasterCache().getClass(), UUIDBroadcasterCache.class);
 

File: modules/cpr/src/test/java/org/atmosphere/annotation/custom/CustomAnnotationTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -137,7 +138,7 @@ public void onRequest(AtmosphereResource resource) throws IOException {
     @Test
     public void testGet() throws IOException, ServletException {
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/z").method("GET").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/z").method("GET").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
         r.get().resume();
 

File: modules/cpr/src/test/java/org/atmosphere/annotation/scanning/AnnotationScanningTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResourceListener;
@@ -85,7 +86,7 @@ public void onDisconnect(String uuid) {
 
     @Test
     public void testAnnotation() throws IOException, ServletException {
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").method("GET").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").method("GET").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
         AsynchronousProcessor.class.cast(framework.getAsyncSupport()).endRequest((AtmosphereResourceImpl)request.resource(), true);
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AsyncIOInterceptorTest.java
Patch:
@@ -29,7 +29,7 @@ public class AsyncIOInterceptorTest {
     @Test
     public void singleTest() throws ServletException, IOException {
         final AtomicReference<String> s = new AtomicReference<String>();
-        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequest.newInstance());
+        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequestImpl.newInstance());
         res.request().setAttribute(PROPERTY_USE_STREAM, false);
         res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor() {
 
@@ -62,7 +62,7 @@ public void redirect(AtmosphereResponse response, String location) {
     @Test
     public void chaining() throws ServletException, IOException {
         final AtomicReference<StringBuffer> s = new AtomicReference<StringBuffer>(new StringBuffer());
-        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequest.newInstance());
+        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequestImpl.newInstance());
         res.request().setAttribute(PROPERTY_USE_STREAM, false);
         res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor() {
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereFrameworkTest.java
Patch:
@@ -62,7 +62,7 @@ public org.atmosphere.cpr.Action service(AtmosphereRequest req, AtmosphereRespon
         final AtomicReference<Object> value = new AtomicReference<Object>();
 
         // Intercepts interceptor call
-        final AtmosphereRequest r = new AtmosphereRequest.Builder().request(new HttpServletRequestWrapper(new AtmosphereRequest.NoOpsRequest()) {
+        final AtmosphereRequest r = new AtmosphereRequestImpl.Builder().request(new HttpServletRequestWrapper(new AtmosphereRequestImpl.NoOpsRequest()) {
             @Override
             public void setAttribute(String name, Object o) {
                 if (MyInterceptor.class.getName().equals(name)) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereHandlerTest.java
Patch:
@@ -106,7 +106,7 @@ public void destroy() {
             }
         });
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
         r.get().resume();
 
@@ -133,7 +133,7 @@ public AsyncIOWriter write(AtmosphereResponse r, byte[] data) throws IOException
         });
         ar = new AtmosphereResourceImpl(f.getAtmosphereConfig(),
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 r,
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceListenerTest.java
Patch:
@@ -73,7 +73,7 @@ public void destroy() {
             }
         });
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").build();
 
         final AtomicReference<Boolean> suspended = new AtomicReference<Boolean>();
         final AtomicReference<Boolean> resumed = new AtomicReference<Boolean>();
@@ -165,7 +165,7 @@ public void destroy() {
             }
         });
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").build();
 
         final AtomicReference<Boolean> closed = new AtomicReference<Boolean>();
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereSessionTest.java
Patch:
@@ -84,7 +84,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
             }
         });
         final String qs = "&X-Atmosphere-tracking-id=c8834462-c46e-4dad-a22f-b86aabe3f883&X-Atmosphere-Framework=2.0.4-javascript&X-Atmosphere-Transport=sse&X-Atmosphere-TrackMessageSize=true&X-atmo-protocol=true&_=1380799455333";
-        AtmosphereRequest request = new AtmosphereRequest.Builder().queryString(qs).pathInfo("/acquire").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo("/acquire").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
 
         latch.await(10, TimeUnit.SECONDS);
@@ -109,7 +109,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
             }
         });
 
-        request = new AtmosphereRequest.Builder().queryString(qs).pathInfo("/acquire").build();
+        request = new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo("/acquire").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance(request));
 
         _latch.await(10, TimeUnit.SECONDS);
@@ -120,7 +120,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
             public void run() {
                 try {
                     Thread.sleep(1000);
-                    AtmosphereRequest request = new AtmosphereRequest.Builder().queryString(qs).pathInfo("/acquire").build();
+                    AtmosphereRequest request = new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo("/acquire").build();
                     framework.doCometSupport(request, AtmosphereResponse.newInstance(request));
                 } catch (Exception e) {
                     e.printStackTrace();

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterCacheTest.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() throws Exception {
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/cpr/src/test/java/org/atmosphere/cpr/ConcurrentBroadcasterTest.java
Patch:
@@ -100,7 +100,7 @@ public void testOrderedConcurrentBroadcast() throws InterruptedException {
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig(),
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
@@ -313,7 +313,7 @@ public void testOrderedSimpleBroadcast() throws InterruptedException {
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig(),
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
@@ -349,7 +349,7 @@ public void onPreDestroy(Broadcaster b) {
     AtmosphereResource newAR(AtmosphereHandler a) {
         return new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig(),
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 a);

File: modules/cpr/src/test/java/org/atmosphere/cpr/CookieTest.java
Patch:
@@ -97,7 +97,7 @@ public void destroy() {
         Set<Cookie> c = new HashSet<Cookie>();
         c.add(new Cookie("yo", "man"));
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().cookies(c).pathInfo("/a").build();
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
 
         r.get().getBroadcaster().broadcast("yo").get();
@@ -140,7 +140,7 @@ public void destroy() {
         a.setPath("/ya");
         c.add(a);
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().cookies(c).pathInfo("/a").build();
         AtmosphereResponse response = AtmosphereResponse.newInstance().delegateToNativeResponse(false);
         response.destroyable(false);
         framework.doCometSupport(request, response);

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterTest.java
Patch:
@@ -96,7 +96,7 @@ public List<Object> retrieveFromCache(String id, String uuid) {
 
         final AtmosphereResourceImpl ar = new AtmosphereResourceImpl(new AtmosphereFramework().getAtmosphereConfig(),
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 new AR());

File: modules/cpr/src/test/java/org/atmosphere/cpr/ExcludeSessionBroadcasterTest.java
Patch:
@@ -48,7 +48,7 @@ public void setUp() throws Exception {
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/cpr/src/test/java/org/atmosphere/cpr/MeteorTest.java
Patch:
@@ -84,7 +84,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws Se
         };
         framework.addAtmosphereHandler("/a", new ReflectorServletProcessor(s));
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").build();
         framework.interceptor(new AtmosphereInterceptorAdapter() {
             @Override
             public Action inspect(AtmosphereResource r) {
@@ -109,7 +109,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws Se
         };
         framework.addAtmosphereHandler("/a", new ReflectorServletProcessor(s));
 
-        AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
+        AtmosphereRequest request = new AtmosphereRequestImpl.Builder().pathInfo("/a").build();
         framework.interceptor(new AtmosphereInterceptorAdapter() {
             @Override
             public Action inspect(AtmosphereResource r) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() throws Exception {
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java
Patch:
@@ -60,7 +60,7 @@ public void testWriteTimeout() throws ExecutionException, InterruptedException,
         atmosphereHandler = new AR(latch);
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
@@ -86,7 +86,7 @@ public void testNoWriteTimeout() throws ExecutionException, InterruptedException
         atmosphereHandler = new AR(null);
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceInjector.java
Patch:
@@ -18,7 +18,7 @@
 import com.sun.jersey.core.spi.component.ComponentContext;
 import com.sun.jersey.core.spi.component.ComponentScope;
 import com.sun.jersey.spi.inject.Injectable;
-import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
@@ -49,7 +49,7 @@ boolean isValidType(Type c) {
 
             if (pt.getActualTypeArguments().length != 2) return false;
 
-            if (pt.getActualTypeArguments()[0] != AtmosphereRequest.class) return false;
+            if (pt.getActualTypeArguments()[0] != AtmosphereRequestImpl.class) return false;
             if (pt.getActualTypeArguments()[1] != AtmosphereResponse.class) return false;
 
             return true;

File: modules/jersey/src/test/java/org/atmosphere/jersey/WriteTimeoutTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereHandler;
-import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereRequestImpl;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
@@ -129,7 +129,7 @@ public void testWriteTimeout() throws ExecutionException, InterruptedException,
 
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
@@ -154,7 +154,7 @@ public void onThrowable(AtmosphereResourceEvent event) {
     public void testNoWriteTimeout() throws ExecutionException, InterruptedException, ServletException {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                mock(AtmosphereRequestImpl.class),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -193,7 +193,7 @@ public static final boolean closeMessage(HttpServletRequest request) {
     public static Object invoke(final Object proxiedInstance, Method m, Object o) {
         if (m != null) {
             try {
-                return m.invoke(proxiedInstance, o == null ? new Object[]{} : new Object[]{o});
+                return m.invoke(proxiedInstance, (o == null || m.getParameterTypes().length == 0) ? new Object[]{} : new Object[]{o});
             } catch (IllegalAccessException e) {
                 LOGGER.debug("", e);
             } catch (InvocationTargetException e) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -299,6 +299,7 @@ protected WebSocketHandler postProcessMapping(WebSocket webSocket, AtmosphereReq
                         if (targetPath.indexOf("{") != -1 && targetPath.indexOf("}") != -1) {
                             try {
                                 boolean singleton = w.proxied.getClass().getAnnotation(Singleton.class) != null;
+
                                 if (!singleton) {
                                     registerWebSocketHandler(path, new WebSocketHandlerProxy(a.broadcaster(),
                                             framework.newClassInstance(WebSocketHandler.class, w.proxied.getClass())));

File: modules/cpr/src/main/java/org/atmosphere/inject/BroadcasterIntrospector.java
Patch:
@@ -28,7 +28,7 @@
  * @author Jeanfrancois Arcand
  */
 public class BroadcasterIntrospector extends InjectIntrospectorAdapter<Broadcaster> {
-    private String name;
+    private String name = Broadcaster.ROOT_MASTER;
 
     @Override
     public boolean supportedType(Type t) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -638,7 +638,7 @@ protected void deliverPush(Deliver deliver, boolean rec) {
         deliver.message = finalMsg;
 
         // We cache first, and if the broadcast succeed, we will remove it.
-        AtmosphereResource cache = deliver.type != Deliver.TYPE.RESOURCE ? null : deliver.resource;
+        AtmosphereResource cache = deliver.type == Deliver.TYPE.ALL ? null : deliver.resource;
         deliver.cache = bc.getBroadcasterCache().addToCache(getID(), cache != null ? cache.uuid() : BroadcasterCache.NULL, new BroadcastMessage(deliver.originalMessage));
 
         if (resources.isEmpty()) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -820,7 +820,7 @@ public interface ApplicationConfig {
      * Default: true (enabled) <br>
      * Value: org.atmosphere.cpr.AtmosphereFramework.analytics
      */
-    String ANALYTICS = "org.atmosphere.cpr.AtmosphereFramework.analytics.analytics";
+    String ANALYTICS = "org.atmosphere.cpr.AtmosphereFramework.analytics";
     /**
      * For use of (@link BytecodeBasedAnnotationProcessor}
      * Default: false

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9WebSocketHandler.java
Patch:
@@ -45,11 +45,11 @@ public class Jetty9WebSocketHandler implements WebSocketListener {
     static {
         Exception ex = null;
         try {
-            Class.forName("org.eclipse.jetty.http2.server.HTTP2ServerConnection");
+            Class.forName("org.eclipse.jetty.websocket.api.WebSocketFrameListener");
         } catch (ClassNotFoundException e) {
             ex = e;
         } finally {
-            jetty93Up = ex == null ? false : true;
+            jetty93Up = ex == null ? true : false;
         }
     }
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -893,7 +893,7 @@ public List<ResourceFilter> create(AbstractMethod am) {
                         scope,
                         null,
                         null,
-                        true,
+                        am.getAnnotation(Suspend.class).writeEntity(),
                         am.getAnnotation(Suspend.class).contentType());
             } else {
                 f = new Filter(Action.SUSPEND,
@@ -902,7 +902,7 @@ public List<ResourceFilter> create(AbstractMethod am) {
                         scope,
                         null,
                         null,
-                        true,
+                        am.getAnnotation(Suspend.class).writeEntity(),
                         am.getAnnotation(Suspend.class).contentType());
             }
             f.setListeners(am.getAnnotation(Suspend.class).listeners());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -831,7 +831,9 @@ public void cancel() throws IOException {
                 }
 
                 if (AtmosphereRequest.class.isAssignableFrom(req.getClass())) {
-                    AtmosphereRequest.class.cast(req).destroy();
+                    if (closeOnCancel) {
+                        AtmosphereRequest.class.cast(req).destroy();
+                    }
                 }
                 event.destroy();
             }

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -245,6 +245,7 @@ public static String guestServletPath(AtmosphereConfig config) {
         String servletPath = "";
         try {
             // TODO: pick up the first one, will fail if there are two
+            // This won't work with Servlet 2.5.
             servletPath = config.getServletContext().getServletRegistration(config.getServletConfig().getServletName()).getMappings().iterator().next();
             servletPath = getCleanedServletPath(servletPath);
         } catch (Exception ex) {
@@ -257,6 +258,7 @@ public static String guestRawServletPath(AtmosphereConfig config) {
         String servletPath = "";
         try {
             // TODO: pick up the first one, will fail if there are two
+            // This won't work with Servlet 2.5.
             servletPath = config.getServletContext().getServletRegistration(config.getServletConfig().getServletName()).getMappings().iterator().next();
         } catch (Exception ex) {
             logger.trace("", ex);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -444,9 +444,9 @@ public void apply(final AtmosphereFramework fwk, final Class c) throws Exception
                 } else if (BroadcasterConfig.FilterManipulator.class.isAssignableFrom(c)) {
                     fwk.filterManipulators.add(fwk.newClassInstance(BroadcasterConfig.FilterManipulator.class, c));
                 } else if (WebSocketProtocol.class.isAssignableFrom(c)) {
-                    fwk.webSocketProtocolClassName = WebSocketProtocol.class.getName();
+                    fwk.webSocketProtocolClassName = c.getName();
                 } else if (WebSocketProcessor.class.isAssignableFrom(c)) {
-                    fwk.webSocketProcessorClassName = WebSocketProcessor.class.getName();
+                    fwk.webSocketProcessorClassName = c.getName();
                 } else if (AtmosphereResourceFactory.class.isAssignableFrom(c)) {
                     fwk.setAndConfigureAtmosphereResourceFactory(fwk.newClassInstance(AtmosphereResourceFactory.class, c));
                 } else if (AtmosphereFrameworkListener.class.isAssignableFrom(c)) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -239,12 +239,13 @@ public void onPreDestroy(Broadcaster b) {
         });
 
         ExecutorService r = Executors.newCachedThreadPool();
+        final String me = new String("me");
         for (int i = 0; i < 1000; i++) {
             r.submit(new Runnable() {
                 @Override
                 public void run() {
                     try {
-                        f.get(TestBroadcaster.class, new String("me"));
+                        f.get(TestBroadcaster.class, me);
                     } catch (IllegalStateException ex) {
                         latch.countDown();
                     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/PoolableBroadcasterFactoryTest.java
Patch:
@@ -179,11 +179,12 @@ public void onPreDestroy(Broadcaster b) {
 
         final ConcurrentLinkedQueue<Broadcaster> c = new ConcurrentLinkedQueue<Broadcaster>();
         ExecutorService r = Executors.newCachedThreadPool();
+        final String me = new String("me");
         for (int i = 0; i < 1000; i++) {
             r.submit(new Runnable() {
                 @Override
                 public void run() {
-                    c.add(factory.get(new String("me")));
+                    c.add(factory.get(me));
                 }
             });
 

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java
Patch:
@@ -44,10 +44,10 @@ protected void mapAnnotatedService(boolean reMap, String path, AtmosphereRequest
                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;
                         if (!singleton) {
                             config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(AtmosphereHandler.class, w.atmosphereHandler.getClass()),
-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
+                                    config.getBroadcasterFactory().lookup(w.broadcaster.getClass(), path, true), w.interceptors);
                         } else {
                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,
-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
+                                    config.getBroadcasterFactory().lookup(w.broadcaster.getClass(), path, true), w.interceptors);
                         }
                         request.setAttribute(FrameworkConfig.NEW_MAPPING, "true");
                     } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java
Patch:
@@ -54,10 +54,10 @@ protected void mapAnnotatedService(boolean reMap, String path, AtmosphereRequest
                                     r.setServlet(config.framework().newClassInstance(Servlet.class, s.getClass()));
                                     r.init(config);
                                     config.framework().addAtmosphereHandler(path, r,
-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
+                                            config.getBroadcasterFactory().lookup(w.broadcaster.getClass(), path, true), w.interceptors);
                                 } else {
                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,
-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
+                                            config.getBroadcasterFactory().lookup(w.broadcaster.getClass(), path, true), w.interceptors);
                                 }
                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, "true");
                             } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationScanningServletContainerInitializer.java
Patch:
@@ -35,6 +35,7 @@
 import org.atmosphere.config.service.ManagedService;
 import org.atmosphere.config.service.MeteorService;
 import org.atmosphere.config.service.UUIDProviderService;
+import org.atmosphere.config.service.WebSocketFactoryService;
 import org.atmosphere.config.service.WebSocketHandlerService;
 import org.atmosphere.config.service.WebSocketProcessorService;
 import org.atmosphere.config.service.WebSocketProtocolService;
@@ -64,6 +65,7 @@
         BroadcasterFactoryService.class,
         BroadcasterService.class,
         MeteorService.class,
+        WebSocketFactoryService.class,
         WebSocketHandlerService.class,
         WebSocketProtocolService.class,
         AtmosphereInterceptorService.class,

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -35,6 +35,7 @@
 import org.atmosphere.config.service.ManagedService;
 import org.atmosphere.config.service.MeteorService;
 import org.atmosphere.config.service.UUIDProviderService;
+import org.atmosphere.config.service.WebSocketFactoryService;
 import org.atmosphere.config.service.WebSocketHandlerService;
 import org.atmosphere.config.service.WebSocketProcessorService;
 import org.atmosphere.config.service.WebSocketProtocolService;
@@ -79,6 +80,7 @@ public class DefaultAnnotationProcessor implements AnnotationProcessor {
             BroadcasterFactoryService.class,
             BroadcasterService.class,
             MeteorService.class,
+            WebSocketFactoryService.class,
             WebSocketHandlerService.class,
             WebSocketProtocolService.class,
             AtmosphereInterceptorService.class,
@@ -96,6 +98,7 @@ public class DefaultAnnotationProcessor implements AnnotationProcessor {
             AtmosphereFrameworkListenerService.class,
             AtmosphereResourceListenerService.class,
             UUIDProviderService.class
+
     };
 
     private AnnotationProcessor delegate;

File: modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java
Patch:
@@ -54,7 +54,7 @@ public void configure(AtmosphereConfig config) {
         for (Injectable i : injectableServiceLoader) {
             try {
                 logger.debug("Adding class {} as injectable", i.getClass());
-                injectables.addLast(i);
+                injectables.addFirst(i);
             } catch (Exception e) {
                 logger.error("", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -796,7 +796,7 @@ public HttpSession getSession(boolean create) {
             return b.request.getSession(create);
         } catch (java.lang.IllegalStateException ex) {
             // Jetty
-            if (ex.getMessage() != null && ex.getMessage().equalsIgnoreCase("No Session Manager")) {
+            if (ex.getMessage() != null && ex.getMessage().equals("No SessionManager")) {
                 return null;
             }
             throw ex;

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -577,6 +577,7 @@ public final static class PostConstructAnnotation {
 
         @PostConstruct
         private void postConstruct() {
+            if (message.get() == "postConstruct")   message.set("error");
             message.set("postConstruct");
         }
 

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -205,7 +205,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
         } else {
             Object o;
             if (msg != null) {
-                if (Managed.class.isAssignableFrom(msg.getClass())) {
+                if (r.getBroadcaster().getBroadcasterConfig().hasFilters() && Managed.class.isAssignableFrom(msg.getClass())) {
                     Object newMsg = Managed.class.cast(msg).o;
                     event.setMessage(newMsg);
                     // No method matched. Give a last chance by trying to decode the proxiedInstance.

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterCacheTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.cache.CacheMessage;
 import org.atmosphere.cache.UUIDBroadcasterCache;
 import org.atmosphere.container.BlockingIOCometSupport;
+import org.atmosphere.util.ExecutorsFactory;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -69,6 +70,7 @@ public void setUp() throws Exception {
     public void unSetUp() throws Exception {
         broadcaster.removeAtmosphereResource(ar);
         config.getBroadcasterFactory().destroy();
+        ExecutorsFactory.reset(config);
     }
 
     @Test

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.container.BlockingIOCometSupport;
+import org.atmosphere.util.ExecutorsFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -63,6 +64,7 @@ public void unSetUp() throws Exception {
         broadcaster.destroy();
         atmosphereHandler.value.set(new HashSet());
         config.getBroadcasterFactory().destroy();
+        ExecutorsFactory.reset(config);
     }
 
     @Test

File: modules/cpr/src/test/java/org/atmosphere/cpr/ConcurrentBroadcasterTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.container.BlockingIOCometSupport;
+import org.atmosphere.util.ExecutorsFactory;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -52,6 +53,7 @@ public void setUp() throws Exception {
     public void unSetUp() throws Exception {
         broadcaster.destroy();
         config.getBroadcasterFactory().destroy();
+        ExecutorsFactory.reset(config);
     }
 
     public final static class AR implements AtmosphereHandler {

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.atmosphere.cache.UUIDBroadcasterCache;
 import org.atmosphere.container.BlockingIOCometSupport;
+import org.atmosphere.util.ExecutorsFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -65,6 +66,7 @@ public void setUp() throws Exception {
     public void addAR() {
         broadcaster.removeAtmosphereResource(ar);
         config.getBroadcasterFactory().destroy();
+        ExecutorsFactory.reset(config);
     }
 
     @Test

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1334,7 +1334,7 @@ public void configureBroadcasterFactory() {
                 broadcasterClassName = lookupDefaultBroadcasterType(broadcasterClassName);
             }
 
-            if (broadcasterFactoryClassName != null) {
+            if (broadcasterFactoryClassName != null && broadcasterFactory == null) {
                 broadcasterFactory = newClassInstance(BroadcasterFactory.class,
                         (Class<BroadcasterFactory>) IOUtils.loadClass(getClass(), broadcasterFactoryClassName));
                 Class<? extends Broadcaster> bc =

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1157,7 +1157,7 @@ public final static class Builder {
         private String servletPath = "";
         private String requestURI;
         private String requestURL;
-        private Map<String, Object> localAttributes = new ConcurrentHashMap<String, Object>();
+        private Map<String, Object> localAttributes = Collections.synchronizedMap(new HashMap<String, Object>());
         private InputStream inputStream;
         private Reader reader;
         private String remoteAddr = "";

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1056,7 +1056,7 @@ public Enumeration<String> getAttributeNames() {
 
     private static Object attributeWithoutException(HttpServletRequest request, String attribute) {
         try {
-            return request.getAttribute(attribute);
+            return request.getAttribute(attribute) == null ? "" : request.getAttribute(attribute);
         } catch (NullPointerException ex) {
             // https://github.com/Atmosphere/atmosphere/issues/1732
             logger.trace("Unexpected NPE", ex);

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -674,7 +674,7 @@ public void executeClose(WebSocket webSocket, int closeCode) {
         boolean isClosedByClient =  r == null ? true : r.getAtmosphereResourceEvent().isClosedByClient();
         try {
             if (r != null) {
-                asynchronousProcessor.endRequest(AtmosphereResourceImpl.class.cast(webSocket.resource()), true);
+                asynchronousProcessor.endRequest(AtmosphereResourceImpl.class.cast(r), true);
             }
         } finally {
             if (!isClosedByClient) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessorAdapter.java
Patch:
@@ -26,7 +26,8 @@
 
 /**
  * Simple Adapter fpr {@link WebSocketProcessor}
- * @author Jenafrancois Arcand
+ *
+ * @author Jeanfrancois Arcand
  */
 public class WebSocketProcessorAdapter implements WebSocketProcessor {
     @Override

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessorAdapter.java
Patch:
@@ -32,7 +32,7 @@ public WebSocketProcessor configure(AtmosphereConfig config) {
 
     @Override
     public boolean handshake(HttpServletRequest request) {
-        return false;
+        return true;
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -183,8 +183,7 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
         if (framework.getAtmosphereConfig().handlers().size() == 0) {
             synchronized (framework) {
                 if (handlers.size() == 0) {
-                    logger.error("No AtmosphereHandler or WebSocketHandler installed.");
-                    throw new AtmosphereMappingException("No AtmosphereHandler maps request for " + request.getRequestURI());
+                    logger.warn("No AtmosphereHandler or WebSocketHandler installed. Adding a default one.");
                 }
                 framework.addAtmosphereHandler(ROOT_MASTER, REFLECTOR_ATMOSPHEREHANDLER);
             }

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java
Patch:
@@ -131,6 +131,8 @@ public File next() throws IOException {
      * Add the specified files in reverse order.
      */
     private void addReverse(final File[] files) {
+        if (files == null) return;
+
         for (int i = files.length - 1; i >=0; --i) {
             stack.add(files[i]);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1142,7 +1142,7 @@ public void run() {
                         String inputLine;
                         String newVersion = Version.getRawVersion();
                         String clientVersion = "2.2.11";
-                        String nextMajorRelease = "2.4.0";
+                        String nextMajorRelease = null;
                         boolean nextAvailable = false;
                         try {
                             while ((inputLine = in.readLine().trim()) != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2556,7 +2556,9 @@ public AtmosphereFramework setWebsocketProcessorClassName(String webSocketProces
     public AtmosphereFramework interceptor(AtmosphereInterceptor c) {
         if (!checkDuplicate(c)) {
             interceptors.add(c);
-            addInterceptorToAllWrappers(c);
+            if (isInit) {
+                addInterceptorToAllWrappers(c);
+            }
         }
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
Patch:
@@ -111,7 +111,7 @@ public interface FrameworkConfig {
      */
     String SIMPLE_HTTP_OVER_WEBSOCKET = "polling-websocket-message";
     /**
-     * The SimpleHttpProtocol.
+     * The {@link org.atmosphere.websocket.protocol.StreamingHttpProtocol}.
      */
     String STREAMING_HTTP_OVER_WEBSOCKET = "streaming-websocket-message";
     /**

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -131,6 +131,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] d, final in
         }
 
         AtmosphereRequest request = resource.getRequest(false);
+        request.setAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET);
 
         if (!resource.isInScope()) return Collections.emptyList();
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/StreamingHttpProtocol.java
Patch:
@@ -113,6 +113,8 @@ public List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream s
         }
 
         AtmosphereRequest request = resource.getRequest();
+        request.setAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.STREAMING_HTTP_OVER_WEBSOCKET);
+
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
         list.add(constructRequest(webSocket, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).inputStream(stream).build());
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -265,7 +265,7 @@ public void run() {
                 AtmosphereResourceEventImpl.class.cast(r.getAtmosphereResourceEvent()).setCancelled(true);
                 AsynchronousProcessor.class.cast(framework.getAsyncSupport()).completeLifecycle(r, true);
             }
-            webSocket.markAsOpenProcessed();
+            webSocket.shiftAttributes();
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -50,7 +50,7 @@ public JSR356AsyncSupport(AtmosphereConfig config, ServletContext ctx) {
                 logger.error("{} must use JDK 1.8+ with WebSocket", ctx.getServerInfo());
                 minVersion = "1.8+";
             }
-            throw new IllegalStateException("ServerContainer is null. Make sure you are using " + minVersion + " and your server has websocket support enabled");
+            throw new IllegalStateException(ServerContainer.class.getName() + " is null. Make sure you are using " + minVersion + " and your server has websocket support enabled");
         }
 
         int pathLength = 5;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1429,7 +1429,7 @@ protected void doInitParams(ServletConfig sc, boolean reconfigure) {
             useStreamForFlushingComments = Boolean.parseBoolean(s);
         }
         s = sc.getInitParameter(PROPERTY_COMET_SUPPORT);
-        if (s != null && !reconfigure) {
+        if (asyncSupport == null && s != null && !reconfigure) {
             asyncSupport = new DefaultAsyncSupportResolver(config).newCometSupport(s);
             isCometSupportSpecified = true;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -462,6 +462,9 @@ public void setCharacterEncoding(String charSet) {
     public void flushBuffer() throws IOException {
         try {
             response.flushBuffer();
+        } catch (NullPointerException ex) {
+           //https://github.com/Atmosphere/atmosphere/issues/1943
+            handleException(ex);
         } catch (IOException ex) {
             handleException(ex);
             throw ex;

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishServ30WebSocketSupport.java
Patch:
@@ -24,7 +24,6 @@
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.util.Utils;
 import org.atmosphere.websocket.WebSocketProcessor;
-import org.glassfish.grizzly.http.HttpRequestPacket;
 import org.glassfish.grizzly.websockets.DataFrame;
 import org.glassfish.grizzly.websockets.DefaultWebSocket;
 import org.glassfish.grizzly.websockets.WebSocket;
@@ -49,7 +48,7 @@ public GlassFishServ30WebSocketSupport(AtmosphereConfig config) {
         super(config);
         application = new Grizzly2WebSocketApplication(config);
         WebSocketEngine.getEngine().register(config.getServletContext().getContextPath(),
-                IOUtils.guestServletPath(config), application);
+                IOUtils.guestRawServletPath(config), application);
     }
 
 

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -24,7 +24,6 @@
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.util.Utils;
 import org.atmosphere.websocket.WebSocketProcessor;
-import org.glassfish.grizzly.http.HttpRequestPacket;
 import org.glassfish.grizzly.websockets.DataFrame;
 import org.glassfish.grizzly.websockets.DefaultWebSocket;
 import org.glassfish.grizzly.websockets.WebSocket;
@@ -48,7 +47,7 @@ public class Grizzly2WebSocketSupport extends Grizzly2CometSupport {
     public Grizzly2WebSocketSupport(AtmosphereConfig config) {
         super(config);
         application = new Grizzly2WebSocketApplication(config);
-        WebSocketEngine.getEngine().register(config.getServletContext().getContextPath(), IOUtils.guestServletPath(config), application);
+        WebSocketEngine.getEngine().register(config.getServletContext().getContextPath(), IOUtils.guestRawServletPath(config), application);
     }
 
 

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -116,7 +116,6 @@ public final static boolean resumableTransport(AtmosphereResource.TRANSPORT t) {
     public final static boolean pollableTransport(AtmosphereResource.TRANSPORT t) {
         switch (t) {
             case POLLING:
-            case UNDEFINED:
             case CLOSE:
             case AJAX:
                 return true;

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java
Patch:
@@ -25,8 +25,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.Arrays;
 import java.util.LinkedList;
-import java.util.List;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
 import static org.atmosphere.annotation.AnnotationUtil.broadcaster;
@@ -75,6 +75,7 @@ public void handle(AtmosphereFramework framework, Class<AtmosphereHandler> annot
                 IntrospectionUtils.addProperty(handler, nv[0], nv[1]);
             }
 
+            AnnotationUtil.interceptorsForHandler(framework, Arrays.asList(a.interceptors()), l);
             framework.addAtmosphereHandler(a.path(), handler, broadcaster(framework, a.broadcaster(), a.path()), l);
             framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereServiceProcessor.java
Patch:
@@ -67,7 +67,7 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
 
                 String mapping = a.path();
 
-                AnnotationUtil.interceptors(framework, Arrays.asList(a.interceptors()), l);
+                AnnotationUtil.interceptorsForHandler(framework, Arrays.asList(a.interceptors()), l);
 
                 if (!a.dispatch()) {
                     AtmosphereHandler proxy = new AtmosphereServletProcessor() {

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -48,7 +48,7 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
             framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
 
             List<AtmosphereInterceptor> l = new LinkedList<AtmosphereInterceptor>();
-            AnnotationUtil.defaultInterceptors(framework, l);
+            AnnotationUtil.defaultManagedServiceInterceptors(framework, l);
 
             atmosphereConfig(a.atmosphereConfig(), framework);
             filters(a.broadcastFilters(), framework);
@@ -81,7 +81,7 @@ public BroadcastFilter.BroadcastAction wrap(BroadcastFilter.BroadcastAction a, b
                 }
             });
 
-            AnnotationUtil.interceptors(framework, Arrays.asList(a.interceptors()), l);
+            AnnotationUtil.interceptorsForManagedService(framework, Arrays.asList(a.interceptors()), l);
             framework.addAtmosphereHandler(a.path(), handler, broadcaster(framework, a.broadcaster(), a.path()), l);
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -58,7 +58,7 @@ public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass)
                 l.add(aa);
             }
 
-            AnnotationUtil.interceptors(framework, Arrays.asList(m.interceptors()), l);
+            AnnotationUtil.interceptorsForHandler(framework, Arrays.asList(m.interceptors()), l);
 
             if (m.path().contains("{")) {
                 l.addFirst(framework.newClassInstance(AtmosphereInterceptor.class, MeteorServiceInterceptor.class));

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -57,7 +57,7 @@ public void handle(AtmosphereFramework framework, Class<WebSocketHandler> annota
                 l.add(aa);
             }
 
-            AnnotationUtil.interceptors(framework, Arrays.asList(m.interceptors()), l);
+            AnnotationUtil.interceptorsForHandler(framework, Arrays.asList(m.interceptors()), l);
 
             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
             WebSocketProcessor p = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2951,7 +2951,7 @@ public AtmosphereFramework addWebSocketHandler(String path, WebSocketHandler han
     public AtmosphereFramework addWebSocketHandler(String path, WebSocketHandler handler, AtmosphereHandler h, List<AtmosphereInterceptor> l) {
         WebSocketProcessorFactory.getDefault().getWebSocketProcessor(this)
                 .registerWebSocketHandler(path,
-                        new WebSocketProcessor.WebSocketHandlerProxy(broadcasterFactory.lookup(path, true).getClass(), handler, interceptors));
+                        new WebSocketProcessor.WebSocketHandlerProxy(broadcasterFactory.lookup(path, true).getClass(), handler));
         addAtmosphereHandler(path, h, l);
         return this;
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java
Patch:
@@ -29,7 +29,6 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.concurrent.ExecutionException;
 
@@ -188,7 +187,7 @@ public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t
     private void registerWebSocketHandler(String path, WebSocketHandler w) {
         WebSocketProcessorFactory.getDefault()
                 .getWebSocketProcessor(framework).registerWebSocketHandler(path,
-                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w, new ArrayList<AtmosphereInterceptor>()));
+                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w));
     }
 
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketStreamingHandlerTest.java
Patch:
@@ -32,7 +32,6 @@
 import java.io.OutputStream;
 import java.io.Reader;
 import java.nio.CharBuffer;
-import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.concurrent.ExecutionException;
 
@@ -97,7 +96,7 @@ private void registerWebSocketHandler(String path, WebSocketStreamingHandler w)
 
         WebSocketProcessorFactory.getDefault()
                         .getWebSocketProcessor(framework).registerWebSocketHandler(path,
-                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w, new ArrayList<AtmosphereInterceptor>()));
+                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w));
     }
 
     @Test

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -267,6 +267,7 @@ public void run() {
                 AtmosphereResourceEventImpl.class.cast(r.getAtmosphereResourceEvent()).setCancelled(true);
                 AsynchronousProcessor.class.cast(framework.getAsyncSupport()).completeLifecycle(r, true);
             }
+            webSocket.markAsOpenProcessed();
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -115,7 +115,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String message) {
         }
 
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
-        list.add(constructRequest(resource, pathInfo, requestURI, methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).body(message).build());
+        list.add(constructRequest(webSocket, pathInfo, requestURI, methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).body(message).build());
 
         return list;
     }
@@ -135,7 +135,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] d, final in
         if (!resource.isInScope()) return Collections.emptyList();
 
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
-        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).body(d, offset, length).build());
+        list.add(constructRequest(webSocket, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).body(d, offset, length).build());
 
         return list;
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/StreamingHttpProtocol.java
Patch:
@@ -99,7 +99,7 @@ public List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r) {
         request.setAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.STREAMING_HTTP_OVER_WEBSOCKET);
 
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
-        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).reader(r).build());
+        list.add(constructRequest(webSocket, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).reader(r).build());
         return list;
     }
 
@@ -114,7 +114,7 @@ public List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream s
 
         AtmosphereRequest request = resource.getRequest();
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
-        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).inputStream(stream).build());
+        list.add(constructRequest(webSocket, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).inputStream(stream).build());
 
         return list;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1247,7 +1247,7 @@ public Builder localInetSocketAddress(Callable localAddr) {
         }
 
         public Builder attributes(Map<String, Object> attributes) {
-            localAttributes = Collections.synchronizedMap(attributes);
+            localAttributes = ConcurrentHashMap.class.isAssignableFrom(attributes.getClass()) ? attributes : Collections.synchronizedMap(attributes);
             return this;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/ProtocolUtil.java
Patch:
@@ -18,7 +18,6 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
-import org.atmosphere.cpr.FrameworkConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -57,7 +56,6 @@ protected static AtmosphereRequest.Builder constructRequest(AtmosphereResource r
 
     private static Map<String, Object> attributes(AtmosphereRequest request) {
         Map<String, Object> m = new ConcurrentHashMap<String, Object>();
-        m.put(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET);
         /***
          * This is quite ugly, but the some server may allow null attribute and that break ConcurrentHashMap
          */

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
+import org.atmosphere.cpr.FrameworkConfig;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProtocol;
@@ -88,6 +89,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String message) {
             return null;
         }
         AtmosphereRequest request = resource.getRequest(false);
+        request.setAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET);
 
         if (!resource.isInScope()) return Collections.emptyList();
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/StreamingHttpProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
+import org.atmosphere.cpr.FrameworkConfig;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProtocolStream;
@@ -95,9 +96,10 @@ public List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r) {
         }
 
         AtmosphereRequest request = resource.getRequest();
+        request.setAttribute(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.STREAMING_HTTP_OVER_WEBSOCKET);
+
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
         list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).reader(r).build());
-
         return list;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1754,7 +1754,7 @@ public void initEndpointMapper() {
     protected void closeAtmosphereResource() {
         for (AtmosphereResource r : config.resourcesFactory().findAll()) {
             try {
-                r.close();
+                r.resume().close();
             } catch (IOException e) {
                 logger.trace("", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -66,7 +66,9 @@ public void handle(AtmosphereFramework framework, Class<WebSocketHandler> annota
             framework.getAtmosphereConfig().startupHook(new AtmosphereConfig.StartupHook() {
                 @Override
                 public void started(AtmosphereFramework framework) {
-                    framework.initHandlerInterceptors(l);
+                    for (AtmosphereInterceptor c: l) {
+                        framework.interceptor(c);
+                    }
                 }
             });
         } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereServiceProcessor.java
Patch:
@@ -30,6 +30,7 @@
 
 import javax.servlet.ServletException;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.LinkedList;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
@@ -66,7 +67,7 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
 
                 String mapping = a.path();
 
-                AnnotationUtil.interceptors(framework, a.interceptors(), l);
+                AnnotationUtil.interceptors(framework, Arrays.asList(a.interceptors()), l);
 
                 if (!a.dispatch()) {
                     AtmosphereHandler proxy = new AtmosphereServletProcessor() {

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -25,6 +25,7 @@
 import org.slf4j.LoggerFactory;
 
 import javax.servlet.Servlet;
+import java.util.Arrays;
 import java.util.LinkedList;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
@@ -57,7 +58,7 @@ public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass)
                 l.add(aa);
             }
 
-            AnnotationUtil.interceptors(framework, m.interceptors(), l);
+            AnnotationUtil.interceptors(framework, Arrays.asList(m.interceptors()), l);
 
             if (m.path().contains("{")) {
                 l.addFirst(framework.newClassInstance(AtmosphereInterceptor.class, MeteorServiceInterceptor.class));

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.Arrays;
 import java.util.LinkedList;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
@@ -56,7 +57,7 @@ public void handle(AtmosphereFramework framework, Class<WebSocketHandler> annota
                 l.add(aa);
             }
 
-            AnnotationUtil.interceptors(framework, m.interceptors(), l);
+            AnnotationUtil.interceptors(framework, Arrays.asList(m.interceptors()), l);
 
             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
             WebSocketProcessor p = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -283,7 +283,6 @@ public synchronized void destroy() {
         while (e.hasMoreElements()) {
             try {
                 b = e.nextElement();
-                b.resumeAll();
                 bc = b.getBroadcasterConfig();
                 bc.forceDestroy();
                 b.destroy();

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -654,7 +654,7 @@ public Object call() throws Exception {
 
     // Highly bogus based on which I/O layer we are using.
     private boolean allowedCloseCode(int closeCode) {
-        return closeCode < 1001 || closeCode > 1004 ? true : false;
+        return closeCode <= 1001 || closeCode > 1004 ? true : false;
     }
 
     private void finish(WebSocket webSocket, AtmosphereResource resource, AtmosphereRequest r, AtmosphereResponse s, boolean closeWebSocket) {

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -26,7 +26,6 @@
 
 import javax.servlet.Servlet;
 import java.util.LinkedList;
-import java.util.List;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
 import static org.atmosphere.annotation.AnnotationUtil.broadcaster;
@@ -43,7 +42,7 @@ public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass)
         try {
             ReflectorServletProcessor r = framework.newClassInstance(ReflectorServletProcessor.class, ReflectorServletProcessor.class);
             r.setServletClassName(annotatedClass.getName());
-            List<AtmosphereInterceptor> l = new LinkedList<AtmosphereInterceptor>();
+            LinkedList<AtmosphereInterceptor> l = new LinkedList<AtmosphereInterceptor>();
 
             MeteorService m = annotatedClass.getAnnotation(MeteorService.class);
             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
@@ -61,7 +60,7 @@ public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass)
             AnnotationUtil.interceptors(framework, m.interceptors(), l);
 
             if (m.path().contains("{")) {
-                framework.interceptors().add(framework.newClassInstance(AtmosphereInterceptor.class, MeteorServiceInterceptor.class));
+                l.addFirst(framework.newClassInstance(AtmosphereInterceptor.class, MeteorServiceInterceptor.class));
             }
             framework.addAtmosphereHandler(mapping, r, broadcaster(framework, m.broadcaster(), m.path()), l);
         } catch (Throwable e) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -81,8 +81,8 @@ public void cancelAtmosphereResourceTest() throws ServletException, IOException
         recovery.configure(config);
         recovery.inspect(r);
         r.suspend();
-        r.close();
         r.getBroadcaster().removeAtmosphereResource(r);
+        r.close();
         assertEquals(recovery.states().size(), 1);
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java
Patch:
@@ -168,7 +168,7 @@ AtmosphereResource create(AtmosphereConfig config,
      * @param uuid the {@link org.atmosphere.cpr.AtmosphereResource#uuid()}
      * @return all {@link Broadcaster} associated with a {@link AtmosphereResource#uuid}
      * @deprecated Use {@link org.atmosphere.cpr.AtmosphereResourceFactory#find(String)}.broadcasters() instead
-q     */
+     */
     @Deprecated
     Set<Broadcaster> broadcasters(String uuid);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1499,6 +1499,7 @@ protected Broadcaster removeAtmosphereResource(AtmosphereResource r, boolean exe
         } else {
             logger.trace("Unable to remove {} from {}", r.uuid(), getID());
         }
+        r.removeBroadcaster(this);
 
         if (!removed) return this;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java
Patch:
@@ -167,7 +167,9 @@ AtmosphereResource create(AtmosphereConfig config,
      *
      * @param uuid the {@link org.atmosphere.cpr.AtmosphereResource#uuid()}
      * @return all {@link Broadcaster} associated with a {@link AtmosphereResource#uuid}
-     */
+     * @deprecated Use {@link org.atmosphere.cpr.AtmosphereResourceFactory#find(String)}.broadcasters() instead
+q     */
+    @Deprecated
     Set<Broadcaster> broadcasters(String uuid);
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -124,7 +124,9 @@ public interface BroadcasterFactory {
      * Remove all instances of {@link AtmosphereResource} from all registered {@link Broadcaster}s.
      *
      * @param r an void {@link AtmosphereResource}
+     *
      */
+    @Deprecated
     void removeAllAtmosphereResource(AtmosphereResource r);
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -235,6 +235,7 @@ public <T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfN
         }
     }
 
+    @Deprecated
     @Override
     public void removeAllAtmosphereResource(AtmosphereResource r) {
         // Remove inside all Broadcaster as well.

File: modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java
Patch:
@@ -82,7 +82,7 @@ protected void idleResources() {
             try {
                 if (req.getAttribute(MAX_INACTIVE) == null) {
                     logger.error("Invalid state {}", r);
-                    config.getBroadcasterFactory().removeAllAtmosphereResource(r);
+                    r.removeFromAllBroadcasters();
                     config.resourcesFactory().unRegisterUuidForFindCandidate(r);
                     continue;
                 }
@@ -109,7 +109,7 @@ protected void idleResources() {
                             AsynchronousProcessor.class.cast(config.framework().getAsyncSupport()).endRequest(AtmosphereResourceImpl.class.cast(r), true);
                         }
                     } finally {
-                        config.getBroadcasterFactory().removeAllAtmosphereResource(r);
+                        r.removeFromAllBroadcasters();
                         config.resourcesFactory().unRegisterUuidForFindCandidate(r);
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1771,9 +1771,9 @@ public AtmosphereFramework resetStates() {
 
     protected void loadMetaService() {
         try {
-            final Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());
+            Map<String, MetaServiceAction> config = (Map<String, MetaServiceAction>) servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName());
             if (config == null) {
-                IOUtils.readServiceFile(AtmosphereFramework.class.getName());
+                config = IOUtils.readServiceFile(AtmosphereFramework.class.getName());
             }
 
             for (final Map.Entry<String, MetaServiceAction> action : config.entrySet()) {

File: modules/cpr/src/main/java/org/atmosphere/lifecycle/LifecycleHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Jeanfrancois Arcand
+ * Copyright 2015 Async-IO.org
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -202,7 +202,9 @@ public synchronized void destroy() {
             broadcastOnResume.clear();
             messages.clear();
             delayedBroadcast.clear();
-            broadcasterListeners.clear();
+            if (!sharedListeners) {
+                broadcasterListeners.clear();
+            }
             writeQueues.clear();
             lifeCycleListeners.clear();
         } catch (Throwable t) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -719,6 +719,7 @@ protected void queueWriteIO(AtmosphereResource r, Deliver deliver, AtomicInteger
                      * cached message.
                      */
                     AtmosphereResource r2 = config.resourcesFactory().find(r.uuid());
+                    logger.trace("Found an AtmosphereResource {} in state {}", r2, r.isSuspended());
                     if (r2 != null && r2.isSuspended() && r.hashCode() != r2.hashCode()) {
                         // Prevent other Broadcast to happens
                         removeAtmosphereResource(r2);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java
Patch:
@@ -90,7 +90,7 @@ protected void idleResources() {
                 long l = (Long) req.getAttribute(MAX_INACTIVE);
 
                 if (logger.isTraceEnabled() && l > 0) {
-                    logger.trace("Expiring {} in ", r.uuid(), System.currentTimeMillis() - l);
+                    logger.trace("Expiring {} in {}", r.uuid(), System.currentTimeMillis() - l);
                 }
 
                 if (l > 0 && System.currentTimeMillis() - l > maxInactiveTime ) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -109,6 +109,8 @@ protected void configure(String broadcasterLifeCyclePolicy) {
         } else {
             logger.warn("Unsupported BroadcasterLifeCyclePolicy policy {}", broadcasterLifeCyclePolicy);
         }
+
+        broadcasterListeners.add(lifeCycleListener);
     }
 
     @Override
@@ -153,9 +155,6 @@ protected <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) thr
                 b.addBroadcasterListener(l);
             }
 
-            addBroadcasterListener(lifeCycleListener);
-            b.addBroadcasterListener(lifeCycleListener);
-
             logger.trace("Broadcaster {} was created {}", id, b);
 
             notifyOnPostCreate(b);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2157,7 +2157,7 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
             configureRequestResponse(req, res);
             a = asyncSupport.service(req, res);
         } catch (IllegalStateException ex) {
-            boolean isJBoss = ex.getMessage().startsWith("JBoss failed");
+            boolean isJBoss = ex.getMessage() == null ? false : ex.getMessage().startsWith("JBoss failed");
             if (ex.getMessage() != null && (ex.getMessage().startsWith("Tomcat failed") || isJBoss)) {
                 if (!isFilter) {
                     logger.warn("Failed using comet support: {}, error: {} Is the NIO or APR Connector enabled?", asyncSupport.getClass().getName(),

File: modules/cpr/src/main/java/org/atmosphere/pool/UnboundedApachePoolableProvider.java
Patch:
@@ -66,7 +66,7 @@ public Broadcaster borrowBroadcaster(Object id) {
 
     @Override
     public PoolableProvider returnBroadcaster(Broadcaster b) {
-        logger.info("Return Object {} now at size {}", b, count.getAndDecrement());
+        logger.trace("Return Object {} now at size {}", b, count.getAndDecrement());
         try {
             genericObjectPool.returnObject(b);
         } catch (IllegalStateException ex) {
@@ -79,7 +79,7 @@ private final class BroadcasterFactory extends BasePooledObjectFactory<Broadcast
 
         @Override
         public Broadcaster create() {
-            logger.info("Creating Object {}", count.getAndIncrement());
+            logger.trace("Creating Object {}", count.getAndIncrement());
             return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1277,6 +1277,9 @@ public void configureBroadcasterFactory() {
             if (broadcasterFactoryClassName != null) {
                 broadcasterFactory = newClassInstance(BroadcasterFactory.class,
                         (Class<BroadcasterFactory>) IOUtils.loadClass(getClass(), broadcasterFactoryClassName));
+                Class<? extends Broadcaster> bc =
+                        (Class<? extends Broadcaster>) IOUtils.loadClass(getClass(), broadcasterClassName);
+                broadcasterFactory.configure(bc, broadcasterLifeCyclePolicy, config);
             }
 
             if (broadcasterFactory == null) {

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -60,7 +60,6 @@ protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config) {
     @Override
     protected void start() {
         if (!started.getAndSet(true)) {
-            setID(name);
             bc.getBroadcasterCache().start();
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -80,12 +80,12 @@ protected AtmosphereServlet configureFramework(ServletConfig sc) throws ServletE
     }
 
     protected AtmosphereServlet configureFramework(ServletConfig sc, boolean init) throws ServletException {
-        initializer.configureFramework(sc, init, false);
+        initializer.configureFramework(sc, init, false, AtmosphereFramework.class);
         return this;
     }
 
     protected AtmosphereFramework newAtmosphereFramework() {
-        return initializer.newAtmosphereFramework();
+        return initializer.newAtmosphereFramework(AtmosphereFramework.class);
     }
 
     public AtmosphereFramework framework() {

File: modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -89,12 +89,12 @@ protected AtmosphereServlet configureFramework(ServletConfig sc) throws ServletE
     }
 
     protected AtmosphereServlet configureFramework(ServletConfig sc, boolean init) throws ServletException {
-        initializer.configureFramework(sc, init, true);
+        initializer.configureFramework(sc, init, true, AtmosphereFramework.class);
         return this;
     }
 
     protected AtmosphereFramework newAtmosphereFramework() {
-        return initializer.newAtmosphereFramework();
+        return initializer.newAtmosphereFramework(AtmosphereFramework.class);
     }
 
     public AtmosphereFramework framework() {

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -245,7 +245,7 @@ public static byte[] readEntirelyAsByte(AtmosphereResource r) throws IOException
                 logger.error("", e);
             }
         } else if (body.hasBytes()) {
-            return Arrays.copyOfRange(body.asBytes(), body.byteOffset(), body.byteLength());
+            return Arrays.copyOfRange(body.asBytes(), body.byteOffset(), body.byteOffset() + body.byteLength());
         }
         throw new IllegalStateException("No body " + r);
     }

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -231,7 +231,7 @@ public static byte[] readEntirelyAsByte(AtmosphereResource r) throws IOException
                 logger.error("", e);
             }
         } else if (body.hasBytes()) {
-            return Arrays.copyOfRange(body.asBytes(), body.byteOffset(), body.byteLength());
+            return Arrays.copyOfRange(body.asBytes(), body.byteOffset(), body.byteOffset() + body.byteLength());
         }
         throw new IllegalStateException("No body " + r);
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -854,8 +854,8 @@ public interface ApplicationConfig {
      * Listeners MUST be Thread-Safe to use that feature.
      * <p/>
      * Default: false <br>
-     * Value: org.atmosphere.cpr.Broadcaster.sharedListenerStats
+     * Value: org.atmosphere.cpr.Broadcaster.sharedListenersList
      */
-    String BROADCASTER_SHAREABLE_LISTENERS = "org.atmosphere.cpr.Broadcaster.sharedListenerStats";
+    String BROADCASTER_SHAREABLE_LISTENERS = "org.atmosphere.cpr.Broadcaster.sharedListenersList";
 }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -208,7 +208,7 @@ public class AtmosphereFramework {
     protected final LinkedList<AtmosphereInterceptor> interceptors = new LinkedList<AtmosphereInterceptor>();
     protected boolean scanDone = false;
     protected String annotationProcessorClassName = "org.atmosphere.cpr.DefaultAnnotationProcessor";
-    protected final List<BroadcasterListener> broadcasterListeners = new ArrayList<BroadcasterListener>();
+    protected final List<BroadcasterListener> broadcasterListeners = Collections.synchronizedList(new ArrayList<BroadcasterListener>());
     protected String webSocketProcessorClassName = DefaultWebSocketProcessor.class.getName();
     protected boolean webSocketProtocolInitialized = false;
     protected EndpointMapper<AtmosphereHandlerWrapper> endpointMapper = new DefaultEndpointMapper<AtmosphereHandlerWrapper>();

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -57,8 +57,8 @@ public class DefaultBroadcasterFactory implements BroadcasterFactory {
     protected int defaultPolicyInteger = -1;
 
     private final URI legacyBroadcasterURI = URI.create("http://127.0.0.0");
-    private final BroadcasterListener lifeCycleListener = new BroadcasterLifecyclePolicyHandler();
     private AtmosphereConfig config;
+    private final BroadcasterListener lifeCycleListener = new BroadcasterLifecyclePolicyHandler();
 
     public DefaultBroadcasterFactory(){
     }
@@ -154,6 +154,8 @@ private <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) throw
             }
 
             addBroadcasterListener(lifeCycleListener);
+            b.addBroadcasterListener(lifeCycleListener);
+
             logger.trace("Broadcaster {} was created {}", id, b);
 
             notifyOnPostCreate(b);

File: modules/cpr/src/main/java/org/atmosphere/lifecycle/BroadcasterLifecyclePolicyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Jeanfrancois Arcand
+ * Copyright 2015 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -481,7 +481,7 @@ public void testHeartbeat() throws IOException, ServletException {
         // Open connection
         AtmosphereRequest request = new AtmosphereRequest.Builder()
                 .pathInfo("/heartbeat")
-                .method("POST")
+                .method("GET")
                 .build();
 
         request.header(X_ATMOSPHERE_TRANSPORT, WEBSOCKET_TRANSPORT);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -953,7 +953,7 @@ public boolean equals(Object o) {
 
         AtmosphereResourceImpl that = (AtmosphereResourceImpl) o;
 
-        if (uuid != null ? !uuid.equals(that.uuid) : that.uuid != null) return false;
+        if ((uuid != null ? !uuid.equals(that.uuid) : that.uuid != null) && that.transport.equals(transport())) return false;
 
         return true;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -95,7 +95,7 @@ public void init(final ServletConfig sc) throws ServletException {
                     r.addFilter(f);
                 }
                 framework().getBroadcasterFactory().remove(delegateMapping);
-                framework.addAtmosphereHandler(delegateMapping, r).initAtmosphereHandler(sc);
+                framework().addAtmosphereHandler(delegateMapping, r).initAtmosphereHandler(sc);
             }
         }
     }
@@ -120,9 +120,9 @@ private void loadDelegateViaConfig(ServletConfig sc) throws ServletException {
             r.addFilterClassName(filterClass, filterName);
             if (mapping == null) {
                 mapping = Broadcaster.ROOT_MASTER;
-                framework.getBroadcasterFactory().remove(Broadcaster.ROOT_MASTER);
+                framework().getBroadcasterFactory().remove(Broadcaster.ROOT_MASTER);
             }
-            framework.addAtmosphereHandler(mapping, r).initAtmosphereHandler(sc);
+            framework().addAtmosphereHandler(mapping, r).initAtmosphereHandler(sc);
         }
     }
 

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -481,7 +481,7 @@ public void testHeartbeat() throws IOException, ServletException {
         // Open connection
         AtmosphereRequest request = new AtmosphereRequest.Builder()
                 .pathInfo("/heartbeat")
-                .method("GET")
+                .method("POST")
                 .build();
 
         request.header(X_ATMOSPHERE_TRANSPORT, WEBSOCKET_TRANSPORT);
@@ -494,7 +494,7 @@ public void testHeartbeat() throws IOException, ServletException {
         // Send heartbeat
         request = new AtmosphereRequest.Builder()
                 .pathInfo("/heartbeat")
-                .method("GET")
+                .method("POST")
                 .body(Heartbeat.paddingData)
                 .build();
         request.header(X_ATMOSPHERE_TRANSPORT, WEBSOCKET_TRANSPORT);

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereFrameworkTest.java
Patch:
@@ -139,7 +139,7 @@ public class MyAtmosphereServlet extends AtmosphereServlet {
         public void init(ServletConfig config) throws ServletException {
 
             super.init(config);
-            framework.setBroadcasterFactory(new MyBroadcasterFactory());
+            framework().setBroadcasterFactory(new MyBroadcasterFactory());
         }
 
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -694,7 +694,7 @@ public void setAttribute(String s, Object o) {
                 b.request.setAttribute(s, o);
             } catch (NullPointerException ex) {
                 // https://github.com/Atmosphere/atmosphere/issues/1806
-                logger.warn("", ex);
+                logger.trace("", ex);
             }
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1176,7 +1176,7 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
                 }
             }
 
-            logger.info("Set {} to disable them.", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR, interceptors);
+            logger.info("Set {} to disable them.", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);
         }
         initInterceptors();
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1176,7 +1176,7 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
                 }
             }
 
-            logger.info("Set {} to disable them.", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR, interceptors);
+            logger.info("Set {} to disable them.", ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);
         }
         initInterceptors();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/WeblogicWebSocketHandler.java
Patch:
@@ -76,6 +76,9 @@ public void onOpen(WebSocketConnection webSocketConnection) {
         webSocketConnection.getWebSocketContext().getServletContext().setAttribute(webSocketConnection.toString(), webSocket);
 
         AtmosphereRequest ar = AtmosphereRequest.cloneRequest(request.get(), true, false, true, config.getInitParameter(PROPERTY_SESSION_CREATE, true));
+        // https://github.com/Atmosphere/atmosphere/issues/1854
+        // We need to force processing of the query string.
+        ar.queryString(ar.getQueryString());
         request.set(null);
         try {
             webSocketProcessor.open(webSocket, ar, AtmosphereResponse.newInstance(config, ar, webSocket));

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -95,7 +95,7 @@ protected AtmosphereServlet configureFramework(ServletConfig sc) throws ServletE
                                         "or set org.atmosphere.servlet to the current value");
                         String name = sc.getInitParameter(ApplicationConfig.SERVLET_NAME);
                         if (name == null) {
-                            name = "AtmosphereServlet.class.getSimpleName()";
+                            name = AtmosphereServlet.class.getSimpleName();
                         }
                         framework = (AtmosphereFramework) sc.getServletContext().getAttribute(name);
                     } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -73,7 +73,8 @@ public class DefaultAsyncSupportResolver implements AsyncSupportResolver {
     public final static String NETTY = "org.jboss.netty.channel.Channel";
     public final static String JBOSS_AS7_WEBSOCKET = "org.atmosphere.jboss.as.websockets.servlet.WebSocketServlet";
     public final static String JSR356_WEBSOCKET = "javax.websocket.Endpoint";
-    public final static String WEBLOGIC_WEBSOCKWET = "weblogic.websocket.annotation.WebSocket";
+    public final static String WEBLOGIC_WEBSOCKET = "weblogic.websocket.annotation.WebSocket";
+    public final static String HK2 = "org.glassfish.hk2.utilities.reflection.ReflectionHelper";
 
     private final AtmosphereConfig config;
 
@@ -166,7 +167,7 @@ public List<Class<? extends AsyncSupport>> detectWebSocketPresent(final boolean
                     if (testClassExists(GRIZZLY_WEBSOCKET))
                         add(GrizzlyServlet30WebSocketSupport.class);
 
-                    if (testClassExists(WEBLOGIC_WEBSOCKWET)) {
+                    if (testClassExists(WEBLOGIC_WEBSOCKET) && !testClassExists(HK2)) {
                         logger.warn("***************************************************************************************************");
                         logger.warn("WebLogic WebSocket detected and will be deployed under the hardcoded path <<application-name>>/ws/*");
                         logger.warn("***************************************************************************************************");

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java
Patch:
@@ -160,7 +160,7 @@ public static Action doService(AtmosphereRequest req, AtmosphereResponse res,
             }
             return action;
         } catch (Exception ex) {
-            logger.error("", ex);
+            logger.warn("", ex);
         }
         return Action.CANCELLED;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -637,7 +637,7 @@ public interface ApplicationConfig {
      */
     String JSR356_PATH_MAPPING_LENGTH = "org.atmosphere.cpr.jsr356.pathMappingLength";
     /**
-     * Default Server Side Event content type.
+     * Default Server-Sent Event content type.
      * Default: text/event-stream
      * Value: org.atmosphere.interceptor.SSEAtmosphereInterceptor.contentType
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptor.java
Patch:
@@ -22,7 +22,7 @@
  * An implementation of this class can intercept the dispatch and modify the AtmosphereResource and its
  * associated {@link AtmosphereRequest} and {@link AtmosphereResponse}.
  * <p/>
- * This class can be used to implement custom protocols like Server-Side Events, Socket.IO, etc.
+ * This class can be used to implement custom protocols like Server-Sent Events, Socket.IO, etc.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -40,7 +40,7 @@
 import static org.atmosphere.cpr.FrameworkConfig.CONTAINER_RESPONSE;
 
 /**
- * HTML 5 Server-Side Events implementation.
+ * HTML 5 Server-Sent Events implementation.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -53,7 +53,7 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);
         if (servletPath == null) {
             servletPath = IOUtils.guestServletPath(config);
-            if (servletPath.equals("/") || servletPath.equals("/*")) {
+            if (servletPath.equals("") || servletPath.equals("/") || servletPath.equals("/*")) {
                 servletPath = PATH +"}";
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -243,7 +243,7 @@ public AsyncSupport newCometSupport(final String targetClassFQN) {
             return (AsyncSupport) cl.loadClass(targetClassFQN)
                     .getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(config);
         } catch (final Exception e) {
-            logger.error("failed to create comet support class: {}, error: {}", targetClassFQN, e);
+            logger.error("Failed to create comet support class: {}, error: {}", targetClassFQN, e);
             throw new IllegalArgumentException("Unable to create " + targetClassFQN, e);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -263,6 +263,9 @@ public static String guestServletPath(AtmosphereConfig config) {
      * @return Servlet mapping without trailing slash and wildcard
      */
     public static String getCleanedServletPath(String fullServletPath) {
+
+        if (fullServletPath.equalsIgnoreCase("/*")) return "";
+
         Matcher matcher = SERVLET_PATH_PATTERN.matcher(fullServletPath);
 
         // It should not happen if the servlet path is valid

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1295,6 +1295,7 @@ protected void configureBroadcaster() {
                             && w.broadcaster.getBroadcasterConfig().getBroadcasterCache().getClass().getName().equals(DefaultBroadcasterCache.class.getName())) {
                         BroadcasterCache cache = newClassInstance(BroadcasterCache.class,
                                 (Class<BroadcasterCache>) IOUtils.loadClass(getClass(), broadcasterCacheClassName));
+                        cache.configure(config);
                         w.broadcaster.getBroadcasterConfig().setBroadcasterCache(cache);
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -223,6 +223,7 @@ public void setScope(SCOPE scope) {
                      */
                     if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
                         BroadcasterCache cache = config.framework().newClassInstance(BroadcasterCache.class, bc.getBroadcasterCache().getClass());
+                        cache.configure(config);
                         b.getBroadcasterConfig().setBroadcasterCache(cache);
                     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/Action.java
Patch:
@@ -62,7 +62,7 @@ public enum TYPE {
          */
         SUSPEND_MESSAGE,
         /**
-         * Skip the invocation of {@link AtmosphereHandler}, but invoke all {@link AtmosphereInterceptor}.
+         * Skip the invocation of {@link AtmosphereHandler} and interrupt the invocation of all {@link AtmosphereInterceptor}.
          */
         SKIP_ATMOSPHEREHANDLER
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -125,7 +125,7 @@ public AtmosphereResource initialize(AtmosphereConfig config, Broadcaster broadc
                 s = tmp != null && !tmp.equalsIgnoreCase("0") ? tmp : null;
             }
         }
-        uuid = s == null ? UUID.randomUUID().toString() : s;
+        uuid = s == null ? config.uuidProvider().generateUuid() : s;
 
         if (config.isSupportSession()) {
             // Keep a reference to an HttpSession in case the associated request get recycled by the underlying container.
@@ -461,7 +461,8 @@ protected Broadcaster getBroadcaster(boolean autoCreate) {
 
             Broadcaster.SCOPE scope = broadcaster.getScope();
             synchronized (this) {
-                String id = scope != Broadcaster.SCOPE.REQUEST ? broadcaster.getID() : broadcaster.getID() + ".recovered" + UUID.randomUUID();
+                String id = scope != Broadcaster.SCOPE.REQUEST ? broadcaster.getID() : broadcaster.getID() + ".recovered"
+                        + config.uuidProvider().generateUuid();
 
                 // Another Thread may have added the Broadcaster.
                 broadcaster = config.getBroadcasterFactory().lookup(id, true);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
-import java.util.UUID;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
@@ -217,7 +216,7 @@ public void setScope(SCOPE scope) {
                 // Next, we need to create a new broadcaster per resource.
                 for (AtmosphereResource resource : resources) {
                     Broadcaster b = config.getBroadcasterFactory()
-                            .get(getClass(), getClass().getSimpleName() + "/" + UUID.randomUUID());
+                            .get(getClass(), getClass().getSimpleName() + "/" + config.uuidProvider().generateUuid());
 
                     /**
                      * REQUEST_SCOPE means one BroadcasterCache per Broadcaster,
@@ -255,7 +254,7 @@ public SCOPE getScope() {
     @Override
     public synchronized void setID(String id) {
         if (id == null) {
-            id = getClass().getSimpleName() + "/" + UUID.randomUUID();
+            id = getClass().getSimpleName() + "/" + config.uuidProvider().generateUuid();
         }
 
         if (config.getBroadcasterFactory() == null)

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Enumeration;
-import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
@@ -114,7 +113,7 @@ private void configure(String broadcasterLifeCyclePolicy) {
 
     @Override
     public synchronized final Broadcaster get() {
-        return get(clazz.getSimpleName() + "-" + UUID.randomUUID());
+        return get(clazz.getSimpleName() + "-" + config.uuidProvider().generateUuid());
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -22,7 +22,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.util.List;
-import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -132,7 +131,8 @@ public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope
         if (scope == Broadcaster.SCOPE.REQUEST) {
             try {
                 BroadcasterFactory f = r.getAtmosphereConfig().getBroadcasterFactory();
-                b = f.get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
+                b = f.get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName()
+                        + r.getAtmosphereConfig().uuidProvider().generateUuid());
             } catch (Throwable t) {
                 throw new RuntimeException(t);
             }

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -50,6 +50,7 @@ public void setUp() throws Exception {
 
         broadcasterCache = new UUIDBroadcasterCache();
         broadcaster.getBroadcasterConfig().setBroadcasterCache(broadcasterCache);
+        broadcasterCache.configure(broadcaster.getBroadcasterConfig());
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -227,7 +227,7 @@ public AsyncSupport defaultCometSupport(final boolean preferBlocking) {
      */
     public AsyncSupport newCometSupport(final Class<? extends AsyncSupport> targetClass) {
         try {
-            return targetClass.getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
+            return (AsyncSupport) targetClass.getDeclaredConstructor(new Class[]{AtmosphereConfig.class})
                     .newInstance(config);
         } catch (final Exception e) {
             logger.error("Failed to create comet support class: {}, error: {}", targetClass, e);

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9WebSocketHandler.java
Patch:
@@ -13,6 +13,8 @@
 
 import javax.servlet.http.HttpServletRequest;
 
+import static org.atmosphere.cpr.ApplicationConfig.PROPERTY_SESSION_CREATE;
+
 public class Jetty9WebSocketHandler implements WebSocketListener {
 
     private static final Logger logger = LoggerFactory.getLogger(Jetty9WebSocketHandler.class);
@@ -31,7 +33,7 @@ public Jetty9WebSocketHandler(HttpServletRequest request, AtmosphereFramework fr
     private AtmosphereRequest cloneRequest(final HttpServletRequest request) {
         try {
             AtmosphereRequest r = AtmosphereRequest.wrap(request);
-            return AtmosphereRequest.cloneRequest(r, false, false, false);
+            return AtmosphereRequest.cloneRequest(r, false, false, false, framework.getAtmosphereConfig().getInitParameter(PROPERTY_SESSION_CREATE, true));
         } catch (Exception ex) {
             logger.error("", ex);
             throw new RuntimeException("Invalid WebSocket Request");

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -34,6 +34,8 @@
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static org.atmosphere.cpr.ApplicationConfig.PROPERTY_SESSION_CREATE;
+
 public class JettyWebSocketUtil {
 
     private static final Logger logger = LoggerFactory.getLogger(JettyWebSocketUtil.class);
@@ -107,7 +109,7 @@ public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(HttpServletReque
                     throw new IllegalStateException();
                 }
 
-                return new JettyWebSocketHandler(AtmosphereRequest.cloneRequest(request, false, useBuildInSession.get(), isDestroyable),
+                return new JettyWebSocketHandler(AtmosphereRequest.cloneRequest(request, false, useBuildInSession.get(), isDestroyable, config.getInitParameter(PROPERTY_SESSION_CREATE, true)),
                         config.framework(), webSocketProcessor);
             }
         });

File: modules/cpr/src/main/java/org/atmosphere/container/WeblogicWebSocketHandler.java
Patch:
@@ -36,6 +36,8 @@
 import javax.servlet.ServletContext;
 import java.io.IOException;
 
+import static org.atmosphere.cpr.ApplicationConfig.PROPERTY_SESSION_CREATE;
+
 @weblogic.websocket.annotation.WebSocket(pathPatterns = "/ws/*", timeout = -1, maxMessageSize = 8192)
 public class WeblogicWebSocketHandler implements WebSocketListener {
 
@@ -73,7 +75,7 @@ public void onOpen(WebSocketConnection webSocketConnection) {
         // TODO: Dangerous
         webSocketConnection.getWebSocketContext().getServletContext().setAttribute(webSocketConnection.toString(), webSocket);
 
-        AtmosphereRequest ar = AtmosphereRequest.cloneRequest(request.get(), true, false, true);
+        AtmosphereRequest ar = AtmosphereRequest.cloneRequest(request.get(), true, false, true, config.getInitParameter(PROPERTY_SESSION_CREATE, true));
         request.set(null);
         try {
             webSocketProcessor.open(webSocket, ar, AtmosphereResponse.newInstance(config, ar, webSocket));

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInitializer.java
Patch:
@@ -86,8 +86,9 @@ public void requestDestroyed(ServletRequestEvent sre) {
                         @Override
                         public void requestInitialized(ServletRequestEvent sre) {
                             HttpServletRequest r = HttpServletRequest.class.cast(sre.getServletRequest());
-                            if (framework.getAtmosphereConfig().isSupportSession() && Utils.webSocketEnabled(r)) {
-                                r.getSession(true);
+                            AtmosphereConfig config = framework.getAtmosphereConfig();
+                            if (config.isSupportSession() && Utils.webSocketEnabled(r)) {
+                                r.getSession(config.getInitParameter(ApplicationConfig.PROPERTY_SESSION_CREATE, true));
                             }
                         }
                     });

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static org.atmosphere.cpr.ApplicationConfig.PROPERTY_SESSION_CREATE;
 import static org.atmosphere.cpr.ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID;
 import static org.atmosphere.cpr.AtmosphereResource.TRANSPORT.UNDEFINED;
 import static org.atmosphere.cpr.Broadcaster.ROOT_MASTER;
@@ -129,7 +130,7 @@ public AtmosphereResource initialize(AtmosphereConfig config, Broadcaster broadc
         if (config.isSupportSession()) {
             // Keep a reference to an HttpSession in case the associated request get recycled by the underlying container.
             try {
-                session = req.getSession(true);
+                session = req.getSession(config.getInitParameter(PROPERTY_SESSION_CREATE, true));
             } catch (NullPointerException ex) {
                 // http://java.net/jira/browse/GLASSFISH-18856
                 logger.trace("http://java.net/jira/browse/GLASSFISH-18856", ex);

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishServ30WebSocketSupport.java
Patch:
@@ -77,6 +77,7 @@ public boolean supportWebSocket() {
 
     @Override
     public void shutdown() {
+        super.shutdown();
         WebSocketEngine.getEngine().unregister(application);
         super.shutdown();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishServlet30WebSocketSupport.java
Patch:
@@ -29,8 +29,6 @@
 import javax.servlet.ServletException;
 import java.io.IOException;
 
-import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
-
 /**
  * Websocket Portable Runtime implementation on top of GlassFish 3.0.1 and up.
  *
@@ -54,6 +52,7 @@ public void init(ServletConfig sc) throws ServletException {
 
     @Override
     public void shutdown() {
+        super.shutdown();
         WebSocketEngine.getEngine().unregister(glassfishWebSocketHandler);
         super.shutdown();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
Patch:
@@ -52,6 +52,7 @@ public void init(ServletConfig sc) throws ServletException {
 
     @Override
     public void shutdown() {
+        super.shutdown();
         WebSocketEngine.getEngine().unregister(glassfishWebSocketHandler);
         super.shutdown();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -77,6 +77,7 @@ public boolean supportWebSocket() {
 
     @Override
     public void shutdown() {
+        super.shutdown();
         WebSocketEngine.getEngine().unregister(application);
         super.shutdown();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/GrizzlyServlet30WebSocketSupport.java
Patch:
@@ -52,6 +52,7 @@ public void init(ServletConfig sc) throws ServletException {
 
     @Override
     public void shutdown() {
+        super.shutdown();
         WebSocketEngine.getEngine().unregister(glassfishWebSocketHandler);
         super.shutdown();
     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java
Patch:
@@ -40,7 +40,7 @@ public class CorsInterceptor extends AtmosphereInterceptorAdapter {
     public void configure(AtmosphereConfig config) {
         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
         if (ac != null) {
-            enableAccessControl = Boolean.parseBoolean(ac);
+            enableAccessControl = !Boolean.parseBoolean(ac);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereResourceListenerService.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.AsyncSupportListener} class to use by default.
+ * Install an {@link org.atmosphere.cpr.AtmosphereResourceListener}
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationScanningServletContainerInitializer.java
Patch:
@@ -61,7 +61,8 @@
         BroadcasterCacheListenerService.class,
         AtmosphereAnnotation.class,
         AtmosphereResourceFactoryService.class,
-        AtmosphereFrameworkListenerService.class
+        AtmosphereFrameworkListenerService.class,
+        AtmosphereResourceListener.class
 })
 public class AnnotationScanningServletContainerInitializer implements ServletContainerInitializer {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -91,7 +91,8 @@ public class DefaultAnnotationProcessor implements AnnotationProcessor {
             BroadcasterCacheListenerService.class,
             AtmosphereAnnotation.class,
             AtmosphereResourceFactoryService.class,
-            AtmosphereFrameworkListenerService.class
+            AtmosphereFrameworkListenerService.class,
+            AtmosphereResourceListener.class
     };
 
     private AnnotationProcessor delegate;

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceListenerTest.java
Patch:
@@ -102,7 +102,6 @@ public void onResume(AtmosphereResourceEvent event) {
             public void onHeartbeat(AtmosphereResourceEvent event) {
             }
 
-
             @Override
             public void onDisconnect(AtmosphereResourceEvent event) {
                 disconnected.set(true);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2091,7 +2091,6 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
             res.setHeader(HeaderConfig.X_FIRST_REQUEST, "true");
             res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);
         } else {
-            res.setHeader(HeaderConfig.X_FIRST_REQUEST, null);
             // This may breaks 1.0.0 application because the WebSocket's associated AtmosphereResource will
             // all have the same UUID, and retrieving the original one for WebSocket, so we don't set it at all.
             // Null means it is not an HTTP request.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2091,7 +2091,6 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
             res.setHeader(HeaderConfig.X_FIRST_REQUEST, "true");
             res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);
         } else {
-            res.setHeader(HeaderConfig.X_FIRST_REQUEST, null);
             // This may breaks 1.0.0 application because the WebSocket's associated AtmosphereResource will
             // all have the same UUID, and retrieving the original one for WebSocket, so we don't set it at all.
             // Null means it is not an HTTP request.

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -141,7 +141,7 @@ public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope
             req.setAttribute(AtmosphereResourceImpl.SKIP_BROADCASTER_CREATION, Boolean.TRUE);
         }
 
-        Meteor m = new Meteor(r, l, s);
+        Meteor m = new Meteor(r, l, (s != null ? s : r.getSerializer()));
         req.setAttribute(METEOR, m);
         return m;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -708,7 +708,7 @@ public interface ApplicationConfig {
      */
     String SESSION_MAX_INACTIVE_INTERVAL = "org.atmosphere.cpr.session.maxInactiveInterval";
     /**
-     * Wait X milliseconds before considering the {@link AtmosphereResource} closed. This is useful when {@link org.atmosphere.util.Utils#enableProtocol())}
+     * Wait X milliseconds before considering the {@link AtmosphereResource} closed. This is useful when {@link org.atmosphere.util.Utils#atmosphereProtocol(AtmosphereRequest r))}
      * return true, and let the client send the {@link HeaderConfig#DISCONNECT_TRANSPORT_MESSAGE} message.
      * <p/>
      * Default: 500<br>

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -128,6 +128,8 @@ public void endAsyncContext(AtmosphereRequest request){
                 try {
                     logger.trace("Already resumed!", ex);
                 } catch (Exception ex2){};
+            } finally {
+                request.removeAttribute(FrameworkConfig.ASYNC_CONTEXT);
             }
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -138,6 +138,7 @@
 import static org.atmosphere.cpr.FrameworkConfig.REDIS_BROADCASTER;
 import static org.atmosphere.cpr.FrameworkConfig.RMI_BROADCASTER;
 import static org.atmosphere.cpr.FrameworkConfig.SPRING_INJECTOR;
+import static org.atmosphere.cpr.FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST;
 import static org.atmosphere.cpr.FrameworkConfig.XMPP_BROADCASTER;
 import static org.atmosphere.cpr.HeaderConfig.ATMOSPHERE_POST_BODY;
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_TRACKING_ID;
@@ -2038,7 +2039,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
         req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
         req.setAttribute(ATMOSPHERE_CONFIG, config);
-        req.setAttribute(FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST, "" + config.isThrowExceptionOnCloned());
+        req.setAttribute(THROW_EXCEPTION_ON_CLONED_REQUEST, "" + config.isThrowExceptionOnCloned());
 
         boolean skip = true;
         String s = config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST);

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -748,7 +748,7 @@ void executeSuspend(AtmosphereResource r,
                 Response.ResponseBuilder b = Response.ok();
                 b = configureHeaders(b);
 
-                AtmosphereConfig config = (AtmosphereConfig) servletReq.getAttribute(ATMOSPHERE_CONFIG);
+                AtmosphereConfig config = r.getAtmosphereConfig();
 
                 String defaultCT = config.getInitParameter(DEFAULT_CONTENT_TYPE);
                 if (defaultCT == null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -631,7 +631,8 @@ public AtmosphereResource notifyListeners(AtmosphereResourceEvent event) {
         } catch (Throwable t) {
             AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
             if (event.isSuspended()) {
-                logger.warn("Exception during suspend() operation {}", t);
+                logger.warn("Exception during suspend() operation {}", t.toString());
+                logger.debug("", t);
                 broadcaster.removeAtmosphereResource(this);
                 if (config.getBroadcasterFactory() != null) {
                     config.getBroadcasterFactory().removeAllAtmosphereResource(this);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -631,7 +631,8 @@ public AtmosphereResource notifyListeners(AtmosphereResourceEvent event) {
         } catch (Throwable t) {
             AtmosphereResourceEventImpl.class.cast(event).setThrowable(t);
             if (event.isSuspended()) {
-                logger.warn("Exception during suspend() operation {}", t);
+                logger.warn("Exception during suspend() operation {}", t.toString());
+                logger.debug("", t);
                 broadcaster.removeAtmosphereResource(this);
                 if (config.getBroadcasterFactory() != null) {
                     config.getBroadcasterFactory().removeAllAtmosphereResource(this);

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -148,7 +148,7 @@ protected void configureSharedCacheExecutor() {
         config.properties().put("shared", "true");
     }
 
-    protected BroadcasterConfig broadcasterID(String name) {
+    protected BroadcasterConfig broadcasterID(String broadcasterId) {
         this.broadcasterId = broadcasterId;
         initClusterExtension();
         return this;

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -292,7 +292,6 @@ public void onClose(WebSocketEvent event) {
                     }
                 });
 
-                AtmosphereResourceImpl.class.cast(resource).inClosingPhase(true);
                 AtmosphereResourceEventImpl.class.cast(resource.getAtmosphereResourceEvent()).isClosedByClient(true);
                 AsynchronousProcessor.class.cast(framework.getAsyncSupport()).completeLifecycle(resource, false);
                 processor.close(w, 1005);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -428,7 +428,7 @@ public Action timedout(AtmosphereRequest req, AtmosphereResponse res)
      * @return true if the operation was executed.
      */
     public boolean completeLifecycle(final AtmosphereResource r, boolean cancelled) {
-        if (r != null && !r.isCancelled() && !AtmosphereResourceImpl.class.cast(r).inClosingPhase()){
+        if (r != null && !r.isCancelled() && !AtmosphereResourceImpl.class.cast(r).getAndSetInClosingPhase()){
             logger.trace("Finishing lifecycle for AtmosphereResource {}", r.uuid());
             final AtmosphereResourceImpl impl = AtmosphereResourceImpl.class.cast(r);
             synchronized (impl) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -71,7 +71,6 @@ public Action inspect(final AtmosphereResource r) {
             }
             logger.debug("AtmosphereResource {} disconnected", uuid);
 
-            AtmosphereResourceImpl.class.cast(ss).inClosingPhase(true);
             // Block websocket closing detection
             AtmosphereResourceEventImpl.class.cast(ss.getAtmosphereResourceEvent()).isClosedByClient(true);
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -605,8 +605,6 @@ public void close(final WebSocket webSocket, int closeCode) {
         if (resource == null) {
             logger.trace("Already closed {}", webSocket);
         } else {
-            resource.inClosingPhase(true);
-
             final boolean allowedToClose = allowedCloseCode(closeCode);
 
             final AtmosphereRequest r = resource.getRequest(false);

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -368,7 +368,7 @@ public static Map<String, AtmosphereFramework.MetaServiceAction> readServiceFile
             is = AtmosphereFramework.class.getClassLoader().getResourceAsStream("META-INF/services/" + path);
 
             if (is == null) {
-                logger.warn("META-INF/services/{} not found in class loader", path);
+                logger.info("META-INF/services/{} not found in class loader", path);
                 return b;
             }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -152,7 +152,7 @@ private TRANSPORT configureTransport() {
         String s = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT);
         if (s == null) return UNDEFINED;
 
-        if (s.equals(UNDEFINED.name()) && Utils.properProtocol(req)) {
+        if (s.equals(UNDEFINED.name()) && Utils.rawWebSocket(req)) {
             return TRANSPORT.WEBSOCKET;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAtmosphereResourceFactory.java
Patch:
@@ -277,7 +277,7 @@ public AtmosphereResource find(String uuid) {
     @Override
     public void locate(String uuid, Async async) {
         AtmosphereResource r = find(uuid);
-        if (uuid != null) {
+        if (r != null) {
             async.available(r);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -421,6 +421,8 @@ public void apply(final AtmosphereFramework fwk, final Class c) throws Exception
                     fwk.webSocketProtocolClassName = WebSocketProtocol.class.getName();
                 } else if (WebSocketProcessor.class.isAssignableFrom(c)) {
                     fwk.webSocketProcessorClassName = WebSocketProcessor.class.getName();
+                } else if (AtmosphereFrameworkListener.class.isAssignableFrom(c)) {
+                    fwk.frameworkListener(fwk.newClassInstance(AtmosphereFrameworkListener.class, c));
                 } else {
                     logger.warn("{} is not a framework service that could be installed", c.getName());
                 }
@@ -817,11 +819,11 @@ protected void preventOOM() {
     public AtmosphereFramework init(final ServletConfig sc, boolean wrap) throws ServletException {
         if (isInit) return this;
 
-        onPreInit();
         readSystemProperties();
         populateBroadcasterType();
         populateObjectFactoryType();
         loadMetaService();
+        onPreInit();
 
         try {
             ServletConfig scFacade;

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -29,6 +29,7 @@
 
 import java.util.Set;
 import java.util.concurrent.Future;
+import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * Simple {@link org.atmosphere.cpr.Broadcaster} implementation that use the calling thread when broadcasting events.
@@ -132,7 +133,7 @@ protected void prepareInvokeOnStateChange(final AtmosphereResource r, final Atmo
     }
 
     @Override
-    protected void queueWriteIO(AtmosphereResource r, Deliver deliver) throws InterruptedException {
-        executeBlockingWrite(r, deliver);
+    protected void queueWriteIO(AtmosphereResource r, Deliver deliver, AtomicInteger count) throws InterruptedException {
+        executeBlockingWrite(r, deliver, count);
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/container/version/JSR356WebSocket.java
Patch:
@@ -95,7 +95,7 @@ public WebSocket write(byte[] data, int offset, int length) throws IOException {
             acquired = semaphore.tryAcquire(writeTimeout, TimeUnit.MILLISECONDS);
             if (acquired) {
                 ByteBuffer b = ByteBuffer.wrap(data, offset, length);
-                session.getAsyncRemote().sendBinary(ByteBuffer.wrap(data, offset, length),
+                session.getAsyncRemote().sendBinary(b,
                         new WriteResult(resource(), b.array()));
             } else {
                 throw new IOException("Socket closed");

File: modules/cpr/src/main/java/org/atmosphere/inject/MetaBroadcasterInjectable.java
Patch:
@@ -25,7 +25,7 @@ public class MetaBroadcasterInjectable implements Injectable<MetaBroadcaster> {
 
     @Override
     public boolean supportedType(Type t) {
-        return (t instanceof Class) && DefaultMetaBroadcaster.class.isAssignableFrom((Class) t);
+        return (t instanceof Class) && MetaBroadcaster.class.isAssignableFrom((Class) t);
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -589,7 +589,7 @@ public final void dispatch(WebSocket webSocket, final AtmosphereRequest request,
     @Override
     public void close(final WebSocket webSocket, int closeCode) {
 
-        if (webSocket.isOpen()) {
+        if (!webSocket.isOpen()) {
             logger.trace("Already closed {}", webSocket);
             return;
         }

File: modules/cpr/src/main/java/org/atmosphere/container/version/JSR356WebSocket.java
Patch:
@@ -56,7 +56,7 @@ public JSR356WebSocket(Session session, AtmosphereConfig config) {
 
     @Override
     public boolean isOpen() {
-        return session.isOpen();
+        return session.isOpen() && !closed.get();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -301,7 +301,7 @@ public AtmosphereResourceFactory resourcesFactory(){
     }
 
     /**
-     * Return the {@link org.atmosphere.cpr.MetaBroadcaster}
+     * Return the {@link DefaultMetaBroadcaster}
      * @return the MetaBroadcaster
      */
     public MetaBroadcaster metaBroadcaster(){

File: modules/cpr/src/main/java/org/atmosphere/inject/InjectableObjectFactory.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Support injection of Atmosphere's Internal object using {@link }
  * {@link org.atmosphere.cpr.AtmosphereConfig},{@link AtmosphereFramework,{@link AtmosphereFramework,{@link org.atmosphere.cpr.BroadcasterFactory,
- * {@link org.atmosphere.cpr.AtmosphereResourceFactory} ,{@link org.atmosphere.cpr.MetaBroadcaster } and
+ * {@link org.atmosphere.cpr.AtmosphereResourceFactory} ,{@link org.atmosphere.cpr.DefaultMetaBroadcaster } and
  * {@link org.atmosphere.cpr.AtmosphereResourceSessionFactory }
  *
  * @author Jeanfrancois Arcand

File: modules/cpr/src/main/java/org/atmosphere/inject/MetaBroadcasterInjectable.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.inject;
 
 import org.atmosphere.cpr.AtmosphereConfig;
+import org.atmosphere.cpr.DefaultMetaBroadcaster;
 import org.atmosphere.cpr.MetaBroadcaster;
 
 import java.lang.reflect.Type;
@@ -24,7 +25,7 @@ public class MetaBroadcasterInjectable implements Injectable<MetaBroadcaster> {
 
     @Override
     public boolean supportedType(Type t) {
-        return (t instanceof Class) && MetaBroadcaster.class.isAssignableFrom((Class) t);
+        return (t instanceof Class) && DefaultMetaBroadcaster.class.isAssignableFrom((Class) t);
     }
 
     @Override

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -37,7 +37,7 @@
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.cpr.FrameworkConfig;
-import org.atmosphere.cpr.MetaBroadcaster;
+import org.atmosphere.cpr.DefaultMetaBroadcaster;
 import org.atmosphere.interceptor.HeartbeatInterceptor;
 import org.atmosphere.interceptor.InvokationOrder;
 import org.atmosphere.util.ExcludeSessionBroadcaster;
@@ -517,7 +517,7 @@ public final static class InjectAnnotation {
         @Inject
         private BroadcasterFactory bFactory;
         @Inject
-        private MetaBroadcaster m;
+        private DefaultMetaBroadcaster m;
         @Inject
         private AtmosphereResourceSessionFactory sessionFactory;
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -168,7 +168,7 @@ public void longPollingAggregatedTest() throws ServletException, IOException, Ex
 
 
         r.suspend();
-        MetaBroadcaster.getDefault().broadcastTo("/1", "Initialize Cache").get();
+        config.metaBroadcaster().broadcastTo("/1", "Initialize Cache").get();
         r.close();
 
         AtmosphereResourceImpl r2 = (AtmosphereResourceImpl) config.resourcesFactory().create(config, "1234567");

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java
Patch:
@@ -188,7 +188,7 @@ void reportMethodAnnotation(Class<? extends Annotation> annotation, String class
 
     // Only used during development. If set to "true" debug messages are displayed.
     private static final boolean DEBUG = false;
-    private final Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);
+    private final static Logger logger = LoggerFactory.getLogger(AnnotationDetector.class);
 
     // Constant Pool type tags
     private static final int CP_UTF8 = 1;
@@ -795,7 +795,7 @@ private static void print(final String message, final Object... args) {
                 }
                 logMessage = String.format(message, args);
             }
-            System.out.println(logMessage); // SUPPRESS CHECKSTYLE RegexpSinglelineJavaCheck
+            logger.debug(logMessage); // SUPPRESS CHECKSTYLE RegexpSinglelineJavaCheck
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.cache;
 
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.BroadcasterCache;
 import org.atmosphere.cpr.BroadcasterCacheListener;
@@ -57,6 +58,7 @@ public abstract class AbstractBroadcasterCache implements BroadcasterCache {
     protected final List<BroadcasterCacheInspector> inspectors = new LinkedList<BroadcasterCacheInspector>();
     protected final List<Object> emptyList = Collections.<Object>emptyList();
     protected final List<BroadcasterCacheListener> listeners = new LinkedList<BroadcasterCacheListener>();
+    protected AtmosphereConfig config;
 
     @Override
     public void start() {
@@ -186,6 +188,7 @@ public void configure(BroadcasterConfig config) {
         } else {
             reaper = Executors.newSingleThreadScheduledExecutor();
         }
+        this.config = config.getAtmosphereConfig();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cache/SessionBroadcasterCache.java
Patch:
@@ -48,7 +48,7 @@ public CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessa
         if (uuid.equals(NULL)) return cacheMessage;
 
         try {
-            HttpSession session = AtmosphereResourceFactory.getDefault().find(uuid).session();
+            HttpSession session = config.resourcesFactory().find(uuid).session();
             if (session == null) {
                 logger.error(ERROR_MESSAGE);
                 return cacheMessage;
@@ -70,7 +70,7 @@ public List<Object> retrieveFromCache(String broadcasterId, String uuid) {
 
         List<Object> result = new ArrayList<Object>();
         try {
-            HttpSession session = AtmosphereResourceFactory.getDefault().find(uuid).session();
+            HttpSession session = config.resourcesFactory().find(uuid).session();
             if (session == null) {
                 logger.error(ERROR_MESSAGE);
                 return result;

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultAtmosphereResourceSessionFactoryTest.java
Patch:
@@ -36,8 +36,8 @@
 public class DefaultAtmosphereResourceSessionFactoryTest {
     @Test
     public void testSessionLifecycle() {
-        DefaultAtmosphereResourceSessionFactory factory = (DefaultAtmosphereResourceSessionFactory) AtmosphereResourceSessionFactory
-                .getDefault();
+        DefaultAtmosphereResourceSessionFactory factory = new DefaultAtmosphereResourceSessionFactory();
+
         AtmosphereResourceEventListener disconnectListener = factory.getDisconnectListener();
 
         AtmosphereResource r1 = Mockito.mock(AtmosphereResource.class);

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -408,7 +408,8 @@ public void destroy() {
         request.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID, w.resource().uuid());
         m.put(HeaderConfig.X_ATMOSPHERE_TRANSPORT, HeaderConfig.WEBSOCKET_TRANSPORT);
         request.headers(m);
-        AtmosphereResource dup = AtmosphereResourceFactory.getDefault().create(framework.config, w.resource().uuid(), request).suspend();
+        AtmosphereResource dup = framework.getAtmosphereConfig().resourcesFactory()
+                .create(framework.config, w.resource().uuid(), request).suspend();
         w.resource(dup);
         dup.addEventListener(new AtmosphereResourceEventListenerAdapter.OnDisconnect() {
             @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
Patch:
@@ -77,12 +77,12 @@ public AtmosphereResourceEventImpl(AtmosphereResourceImpl resource,
 
     @Override
     public boolean isResuming() {
-        return resource.isResumed();
+        return resource == null ? true : resource.isResumed();
     }
 
     @Override
     public boolean isSuspended() {
-        return resource.isSuspended();
+        return resource == null ? false : resource.isSuspended();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -165,7 +165,7 @@ public void onStateChange(AtmosphereResourceEvent event)
      * @param event
      */
     protected final void postStateChange(AtmosphereResourceEvent event) {
-        if (event.isResuming() || event.isCancelled()) return;
+        if (event.isCancelled() || event.isResuming()) return;
 
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(event.getResource());
         // Between event.isCancelled and resource, the connection has been remotly closed.

File: modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java
Patch:
@@ -82,8 +82,8 @@ public MetaBroadcaster(AtmosphereConfig config) {
     }
 
     protected MetaBroadcasterFuture broadcast(final String path, Object message, int time, TimeUnit unit, boolean delay, boolean cacheMessage) {
-        if (config != null  || BroadcasterFactory.getDefault() != null) {
-            Collection<Broadcaster> c = config != null ? config.getBroadcasterFactory().lookupAll() : BroadcasterFactory.getDefault().lookupAll();
+        if (config != null) {
+            Collection<Broadcaster> c = config.getBroadcasterFactory().lookupAll();
 
             final Map<String, String> m = new HashMap<String, String>();
             List<Broadcaster> l = new ArrayList<Broadcaster>();

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -43,8 +43,9 @@ public void sessionDestroyed(HttpSessionEvent se) {
         logger.trace("Session destroyed");
         try {
             HttpSession s = se.getSession();
-            if (BroadcasterFactory.getDefault() != null) {
-                for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {
+            BroadcasterFactory f = (BroadcasterFactory) s.getAttribute(FrameworkConfig.BROADCASTER_FACTORY);
+            if (f != null) {
+                for (Broadcaster b : f.lookupAll()) {
                     for (AtmosphereResource r : b.getAtmosphereResources()) {
                         if (r.session() != null && r.session().getId().equals(s.getId())) {
                             AtmosphereResourceImpl.class.cast(r).session(null);

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -99,6 +99,8 @@ public JSR356Endpoint handshakeRequest(HandshakeRequest handshakeRequest) {
     @Override
     public void onOpen(Session session, final EndpointConfig endpointConfig) {
 
+        if (framework.isDestroyed()) return;
+
         if (!webSocketProcessor.handshake(request)) {
             try {
                 session.close(new CloseReason(CloseReason.CloseCodes.CANNOT_ACCEPT, "Handshake not accepted."));

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -175,8 +175,10 @@ public WebSocketProcessor registerWebSocketHandler(String path, WebSocketHandler
 
     @Override
     public final void open(final WebSocket webSocket, final AtmosphereRequest request, final AtmosphereResponse response) throws IOException {
-        // TODO: Fix this. Instead add an Interceptor.
 
+        if (framework.isDestroyed()) return;
+
+        // TODO: Fix this. Instead add an Interceptor.
         if (framework.getAtmosphereConfig().handlers().size() == 0) {
             synchronized (framework) {
                 framework.addAtmosphereHandler(ROOT_MASTER, REFLECTOR_ATMOSPHEREHANDLER);

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -166,7 +166,7 @@ public void onOpen(Session session, EndpointConfig endpointConfig) {
                     } else {
                         // Broken WebSocket Spec
                         logger.trace("Unable to retrieve the `origin` header for websocket {}", session);
-                        origin = new StringBuilder("http").append(session.isSecure() ? "s" : "").append("://0.0.0.0:80").append(requestUri).toString();
+                        origin = new StringBuilder("http").append(session.isSecure() ? "s" : "").append("://0.0.0.0:80").toString();
                     }
                     requestUri = new StringBuilder(origin).append(requestUri).toString();
                 } else if (requestUri.startsWith("ws://")) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1262,7 +1262,7 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
 
                 if (duplicate) {
                     AtmosphereResourceImpl dup = (AtmosphereResourceImpl) config.resourcesFactory().find(r.uuid());
-                    if (dup != null && dup.hashCode() != r.hashCode()) {
+                    if (dup != null && dup != r) {
                         logger.warn("Duplicate resource {}. Could be caused by a dead connection not detected by your server. Replacing the old one with the fresh one", r.uuid());
                         AtmosphereResourceImpl.class.cast(dup).dirtyClose();
                     } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1262,7 +1262,7 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
 
                 if (duplicate) {
                     AtmosphereResourceImpl dup = (AtmosphereResourceImpl) config.resourcesFactory().find(r.uuid());
-                    if (dup != null && dup.hashCode() != r.hashCode()) {
+                    if (dup != null && dup != r) {
                         logger.warn("Duplicate resource {}. Could be caused by a dead connection not detected by your server. Replacing the old one with the fresh one", r.uuid());
                         AtmosphereResourceImpl.class.cast(dup).dirtyClose();
                     } else {

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -675,7 +675,7 @@ void suspend(boolean resumeOnBroadcast,
                 bc = r.getBroadcaster();
             }
 
-            if (response.getEntity() instanceof Broadcastable) {
+            if (response.getEntity() == null && response.getEntity() instanceof Broadcastable) {
                 Broadcastable b = (Broadcastable) response.getEntity();
                 bc = b.getBroadcaster();
                 response.setEntity(b.getResponseMessage());

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -152,7 +152,7 @@ public void action(AtmosphereResourceImpl r) {
     @Override
     public AsyncSupport complete(AtmosphereResourceImpl r) {
         try {
-            HttpEvent event = (HttpEvent) r.getRequest().getAttribute(HTTP_EVENT);
+            HttpEvent event = (HttpEvent) r.getRequest(false).getAttribute(HTTP_EVENT);
             // Resume without closing the underlying suspended connection.
             if (event != null) {
                 event.close();

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -76,7 +76,7 @@ public class HeartbeatInterceptor extends AtmosphereInterceptorAdapter {
 
     private static final Logger logger = LoggerFactory.getLogger(HeartbeatInterceptor.class);
     private ScheduledExecutorService heartBeat;
-    private byte[] paddingBytes = " ".getBytes();
+    private byte[] paddingBytes = "X".getBytes();
     private boolean resumeOnHeartbeat;
     private int heartbeatFrequencyInSeconds = 60;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -118,9 +118,9 @@ public AtmosphereResource initialize(AtmosphereConfig config, Broadcaster broadc
         String s = (String) req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
         if (s == null) {
             s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
-            if (s == null) {
+            if (s == null && req != null) {
                 String tmp = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
-                s = !tmp.equalsIgnoreCase("0") ? tmp : null;
+                s = tmp != null && !tmp.equalsIgnoreCase("0") ? tmp : null;
             }
         }
         uuid = s == null ? UUID.randomUUID().toString() : s;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -215,7 +215,7 @@ public class AtmosphereFramework {
     protected boolean allowAllClassesScan = true;
     protected boolean annotationFound = false;
     protected boolean executeFirstSet = false;
-    protected AtmosphereObjectFactory objectFactory;
+    protected AtmosphereObjectFactory objectFactory = new DefaultAtmosphereObjectFactory();
     protected final AtomicBoolean isDestroyed = new AtomicBoolean();
     protected boolean externalizeDestroy = false;
     protected AnnotationProcessor annotationProcessor = null;
@@ -1533,7 +1533,7 @@ protected AtmosphereObjectFactory lookupDefaultObjectFactoryType() {
             }
         }
 
-        if (objectFactory == null) {
+        if (objectFactory == null || DefaultAtmosphereObjectFactory.class.getName().equals(objectFactory.getClass().getName())) {
             try {
                 IOUtils.loadClass(getClass(), INJECT_LIBARY);
                 objectFactory = new InjectableObjectFactory();

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -162,7 +162,7 @@ public void onOpen(Session session, EndpointConfig endpointConfig) {
                         origin = l.get(0);
                     } else {
                         // Broken WebSocket Spec
-                        logger("Unable to retrieve the `origin` header for websocket {}", session);
+                        logger.trace("Unable to retrieve the `origin` header for websocket {}", session);
                         origin = new StringBuilder("http").append(session.isSecure() ? "s" : "").append("://0.0.0.0:80").append(requestUri).toString();
                     }
                     requestUri = new StringBuilder(origin).append(requestUri).toString();

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -158,10 +158,11 @@ public void onOpen(Session session, EndpointConfig endpointConfig) {
                         l = handshakeRequest.getHeaders().get("Origin");
                     }
                     String origin;
-                    if (l.size() > 0) {
+                    if (l != null && l.size() > 0) {
                         origin = l.get(0);
                     } else {
                         // Broken WebSocket Spec
+                        logger("Unable to retrieve the `origin` header for websocket {}", session);
                         origin = new StringBuilder("http").append(session.isSecure() ? "s" : "").append("://0.0.0.0:80").append(requestUri).toString();
                     }
                     requestUri = new StringBuilder(origin).append(requestUri).toString();

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -793,7 +793,7 @@ public interface ApplicationConfig {
      *
      * @see {@link https://github.com/Atmosphere/atmosphere/issues/1695}
      */
-    String DISABLE_ATMOSPHERE_INITIALIZER = AtmosphereInitializer.class.getName() + ".disabled";
+    String DISABLE_ATMOSPHERE_INITIALIZER =  "org.atmosphere.cpr.AtmosphereInitializer.disabled";
     /**
      * Disable Google Analytics.
      * Default: true (enabled) <br>

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheInspector.java
Patch:
@@ -23,8 +23,7 @@
  */
 public interface BroadcasterCacheInspector {
     /**
-     * Inspect the {@link BroadcastMessage} and return true if the message can be cached, false if not. A
-     * Message can also be modified.
+     * Inspect the {@link BroadcastMessage} and return true if the message can be cached, false if not.
      * @param message {@link BroadcastMessage}
      * @return true if allowed to be cached, false if not.
      */

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -46,7 +46,7 @@ public void configure(BroadcasterConfig config) {
 
     @Override
     public CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessage message) {
-        logger.trace("Message {} might be lost! Please install a proper BroadcasterCache", message.message);
+        logger.trace("Message {} might be lost! Please install a proper BroadcasterCache", message.message());
         return null;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -140,7 +140,7 @@ public void cleanup() {
 
     @Override
     public CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessage message) {
-        Object e = message.message;
+        Object e = message.message();
         if (logger.isTraceEnabled()) {
             logger.trace("Adding for AtmosphereResource {} cached messages {}", uuid, e);
             logger.trace("Active clients {}", activeClients());

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterTest.java
Patch:
@@ -87,7 +87,7 @@ public CacheMessage addToCache(String id, String uuid, BroadcastMessage e) {
             public List<Object> retrieveFromCache(String id, String uuid) {
                 ArrayList<Object> cacheContents = new ArrayList<Object>();
                 if (!cache.isEmpty()) {
-                    cacheContents.add(cache.get(id).message);
+                    cacheContents.add(cache.get(id).message());
                     cache.clear();
                 }
                 return cacheContents;

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -153,8 +153,9 @@ public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft
                     size = inCharset.newDecoder().decode(ByteBuffer.wrap(data, 0, data.length)).length();
                 }
 
-                CharBuffer cb2 = CharBuffer.wrap(Integer.toString(size) + endString);
-                ByteBuffer bb = ByteBuffer.allocate((cb2.length() + size) * 2);
+                String csq = Integer.toString(size) + endString;
+                ByteBuffer bb = ByteBuffer.allocate(csq.getBytes().length + responseDraft.length);
+                CharBuffer cb2 = CharBuffer.wrap(csq);
                 CharsetEncoder encoder = outCharset.newEncoder();
                 encoder.encode(cb2, bb, false);
                 encoder.encode(cb, bb, false);

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -153,8 +153,9 @@ public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft
                     size = inCharset.newDecoder().decode(ByteBuffer.wrap(data, 0, data.length)).length();
                 }
 
-                CharBuffer cb2 = CharBuffer.wrap(Integer.toString(size) + endString);
-                ByteBuffer bb = ByteBuffer.allocate((cb2.length() + size) * 2);
+                String csq = Integer.toString(size) + endString;
+                ByteBuffer bb = ByteBuffer.allocate(csq.getBytes().length + responseDraft.length);
+                CharBuffer cb2 = CharBuffer.wrap(csq);
                 CharsetEncoder encoder = outCharset.newEncoder();
                 encoder.encode(cb2, bb, false);
                 encoder.encode(cb, bb, false);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -714,6 +714,9 @@ void onBroadcast(AtmosphereResourceEvent e) {
     void onClose(AtmosphereResourceEvent e) {
         for (AtmosphereResourceEventListener r : listeners) {
             r.onClose(e);
+            if (transport.equals(TRANSPORT.WEBSOCKET) && WebSocketEventListener.class.isAssignableFrom(r.getClass())) {
+                WebSocketEventListener.class.cast(r).onClose(new WebSocketEventListener.WebSocketEvent(1005, CLOSE, webSocket));
+            }
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -91,10 +91,10 @@ public BroadcasterConfig(List<String> broadcastFilters, AtmosphereConfig config,
      * @param asyncWriteService
      * @param scheduler
      * @param config
-     * @param name
+     * @param broadcasterId
      */
     public BroadcasterConfig(ExecutorService executorService, ExecutorService asyncWriteService,
-                             ScheduledExecutorService scheduler, AtmosphereConfig config, String name) {
+                             ScheduledExecutorService scheduler, AtmosphereConfig config, String broadcasterId) {
         this.executorService = executorService;
         this.scheduler = scheduler;
         this.asyncWriteService = asyncWriteService;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -125,9 +125,9 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
 
         // https://github.com/Atmosphere/atmosphere/issues/1637
         if (isServlet30 && (!req.isAsyncSupported() && !Utils.closeMessage(req))) {
-            logger.error("Invalid request state. AsyncContext#startAsync not supported. Make sure async-supported is set to true in web.xml {}", req.getRequestURL().toString());
+            logger.error("Invalid request state. <async-supported>true</async-supported> must be defined for ALL Servlets and Filters  declarations in web.xml {}", req.getRequestURL().toString());
             res.setStatus(501);
-            res.addHeader(X_ATMOSPHERE_ERROR, "AsyncContext not enabled");
+            res.addHeader(X_ATMOSPHERE_ERROR, "<async-supported>true</async-supported> must be defined for ALL Servlets and Filters  declarations in web.xml.");
             res.flushBuffer();
             return new Action();
         }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -229,6 +229,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
                 }
             }
 
+            r.getRequest().removeAttribute(getClass().getName());
             super.onStateChange(event);
         }
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterCacheTest.java
Patch:
@@ -68,7 +68,7 @@ public void setUp() throws Exception {
     @AfterMethod
     public void unSetUp() throws Exception {
         broadcaster.removeAtmosphereResource(ar);
-        DefaultBroadcasterFactory.getDefault().destroy();
+        config.getBroadcasterFactory().destroy();
     }
 
     @Test
@@ -228,7 +228,7 @@ public void testExcludeCache() throws ExecutionException, InterruptedException,
     @Test
     public void testCloseExcludeCache() throws ExecutionException, InterruptedException, ServletException, IOException {
         UUIDBroadcasterCache cache = new UUIDBroadcasterCache();
-        SimpleBroadcaster b = BroadcasterFactory.getDefault().lookup(SimpleBroadcaster.class, "uuidTest", true);
+        SimpleBroadcaster b = config.getBroadcasterFactory().lookup(SimpleBroadcaster.class, "uuidTest", true);
         b.getBroadcasterConfig().setBroadcasterCache(cache);
         // Reset
         b.removeAtmosphereResource(ar);
@@ -250,7 +250,7 @@ public void testCloseExcludeCache() throws ExecutionException, InterruptedExcept
     @Test
     public void testSuspendExcludeCache() throws ExecutionException, InterruptedException, ServletException, IOException {
         UUIDBroadcasterCache cache = new UUIDBroadcasterCache();
-        SimpleBroadcaster b = BroadcasterFactory.getDefault().lookup(SimpleBroadcaster.class, "uuidTest", true);
+        SimpleBroadcaster b = config.getBroadcasterFactory().lookup(SimpleBroadcaster.class, "uuidTest", true);
         b.getBroadcasterConfig().setBroadcasterCache(cache);
         // Reset
         b.removeAtmosphereResource(ar);

File: modules/cpr/src/test/java/org/atmosphere/cpr/ExcludeSessionBroadcasterTest.java
Patch:
@@ -36,10 +36,11 @@ public class ExcludeSessionBroadcasterTest {
     private AtmosphereResource ar;
     private Broadcaster broadcaster;
     private AR atmosphereHandler;
+    private AtmosphereConfig config;
 
     @BeforeMethod
     public void setUp() throws Exception {
-        AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
+        config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(ExcludeSessionBroadcaster.class, "NEVER", config);
         config.framework().setBroadcasterFactory(factory);
 
@@ -59,7 +60,7 @@ public void setUp() throws Exception {
     public void unSetUp() throws Exception {
         broadcaster.removeAtmosphereResource(ar);
         atmosphereHandler.value.set(new HashSet());
-        BroadcasterFactory.getDefault().destroy();
+        config.getBroadcasterFactory().destroy();
     }
 
     @Test

File: modules/cpr/src/test/java/org/atmosphere/cpr/ServiceTest.java
Patch:
@@ -59,7 +59,7 @@ public void after() {
 
     @Test
     public void testBroadcasterService() throws IOException, ServletException {
-        assertEquals(BroadcasterFactory.getDefault().get("test").getClass().getName(), B.class.getName());
+        assertEquals(framework.getBroadcasterFactory().get("test").getClass().getName(), B.class.getName());
     }
 
     @BroadcasterService

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -39,10 +39,11 @@ public class UUIDBroadcasterCacheTest {
     private Broadcaster broadcaster;
     private AR atmosphereHandler;
     private UUIDBroadcasterCache broadcasterCache;
+    private AtmosphereConfig config;
 
     @BeforeMethod
     public void setUp() throws Exception {
-        AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
+        config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
         broadcaster = factory.get(DefaultBroadcaster.class, "test");
         config.framework().setBroadcasterFactory(factory);
@@ -62,7 +63,7 @@ public void setUp() throws Exception {
     @AfterMethod
     public void addAR() {
         broadcaster.removeAtmosphereResource(ar);
-        BroadcasterFactory.getDefault().destroy();
+        config.getBroadcasterFactory().destroy();
     }
 
     @Test

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -187,7 +187,7 @@ public void destroy() {
         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();
         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));
         processor.invokeWebSocketProtocol(w, "yoWebSocket");
-        BroadcasterFactory.getDefault().lookup("/*").broadcast("yoBroadcast").get();
+        framework.getBroadcasterFactory().lookup("/*").broadcast("yoBroadcast").get();
 
         assertEquals(b.toString(), "yoCometyoWebSocketyoBroadcastyoBroadcast");
 
@@ -364,7 +364,7 @@ public void onOpen(WebSocket webSocket) throws IOException {
         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();
         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));
         processor.invokeWebSocketProtocol(w, "yoWebSocket");
-        BroadcasterFactory.getDefault().lookup("/*").broadcast("yoBroadcast").get();
+        framework.getBroadcasterFactory().lookup("/*").broadcast("yoBroadcast").get();
 
         assertEquals(b.toString(), "yoCometyoWebSocketyoBroadcast");
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
     @AfterMethod
     public void unSetUp() throws Exception {
         broadcaster.destroy();
-        BroadcasterFactory.getDefault().destroy();
+        config.getBroadcasterFactory().destroy();
     }
 
     @Test

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java
Patch:
@@ -330,7 +330,7 @@ public final void detect(final String... packageNames) throws IOException {
                     }
                 } else if (isRunningJavaWebStart()) {
                     try {
-                        webstart((JarURLConnection) url.openConnection(), packageName, streams);
+                        loadJarContent((JarURLConnection) url.openConnection(), packageName, streams);
                     } catch (ClassCastException cce) {
                         throw new AssertionError("Not a File: " + url.toExternalForm());
                     }
@@ -360,7 +360,7 @@ public final void detect(final String... packageNames) throws IOException {
                         files.add(jarFile);
                         if (DEBUG) print("Add jar file: '%s'", jarFile);
                     } else {
-                        throw new AssertionError("Not a File: " + jarFile);
+                        loadJarContent((JarURLConnection) url.openConnection(), packageName, streams);
                     }
                 }
             }
@@ -384,7 +384,7 @@ private boolean isRunningJavaWebStart() {
         return hasJNLP;
     }
 
-    private void webstart(JarURLConnection url, String packageName, Set<InputStream> streams) throws IOException {
+    private void loadJarContent(JarURLConnection url, String packageName, Set<InputStream> streams) throws IOException {
         // Using a JarURLConnection will load the JAR from the cache when using Webstart 1.6
         // In Webstart 1.5, the URL will point to the cached JAR on the local filesystem
         JarFile jarFile = url.getJarFile();

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1498,7 +1498,7 @@ protected Broadcaster removeAtmosphereResource(AtmosphereResource r, boolean exe
                 }
                 notifyOnRemoveAtmosphereResourceListener(r);
             } else {
-                logger.trace("Unable to remove {} from{}", r.uuid(), getID());
+                logger.trace("Unable to remove {} from {}", r.uuid(), getID());
             }
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2975,7 +2975,7 @@ private void initDefaultSerializer() {
         if (defaultSerializerClassName != null && !defaultSerializerClassName.isEmpty()) {
             try {
                 @SuppressWarnings("unchecked")
-                Class<Serializer> clazz = (Class<Serializer>) IOUtils.<Serializer>loadClass(Serializer.class, defaultSerializerClassName);
+                Class<Serializer> clazz = (Class<Serializer>) IOUtils.loadClass(Serializer.class, defaultSerializerClassName);
                 if (Serializer.class.isAssignableFrom(clazz)) {
                     defaultSerializerClass = clazz;
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -793,6 +793,6 @@ public interface ApplicationConfig {
      * 
      * @see {@link https://github.com/Atmosphere/atmosphere/issues/1695}
      */
-	String DISABLE_ATMOSPHERE_INITIALIZER = AtmosphereInitializer.class.getName()+".disabled";
+    String DISABLE_ATMOSPHERE_INITIALIZER = AtmosphereInitializer.class.getName()+".disabled";
 }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInitializer.java
Patch:
@@ -40,7 +40,7 @@
  * this initializer is called during web-application startup lifecycle (since Servlet 3.0).
  * If you need to disable automatic initialization take a look at the following switch: 
  * 
- * {@link org.atmosphere.cpr.AtmosphereConfig}.DISABLE_ATMOSPHERE_INITIALIZER
+ * {@link org.atmosphere.cpr.ApplicationConfig}.DISABLE_ATMOSPHERE_INITIALIZER}
  */
 
 @HandlesTypes({})

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2975,7 +2975,7 @@ private void initDefaultSerializer() {
         if (defaultSerializerClassName != null && !defaultSerializerClassName.isEmpty()) {
             try {
                 @SuppressWarnings("unchecked")
-                Class<Serializer> clazz = (Class<Serializer>) IOUtils.<Serializer>loadClass(Serializer.class, defaultSerializerClassName);
+                Class<Serializer> clazz = (Class<Serializer>) IOUtils.loadClass(Serializer.class, defaultSerializerClassName);
                 if (Serializer.class.isAssignableFrom(clazz)) {
                     defaultSerializerClass = clazz;
                 }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -137,7 +137,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
                 resource.addEventListener(new OnResume() {
                     @Override
                     public void onResume(AtmosphereResourceEvent event) {
-                        invoke(onResumeMethod, event.getResource());
+                        invoke(onResumeMethod, event);
                         resource.removeEventListener(this);
                     }
                 });
@@ -563,4 +563,4 @@ public Object object() {
             return o;
         }
     }
-}
\ No newline at end of file
+}

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -137,7 +137,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
                 resource.addEventListener(new OnResume() {
                     @Override
                     public void onResume(AtmosphereResourceEvent event) {
-                        invoke(onResumeMethod, event.getResource());
+                        invoke(onResumeMethod, event);
                         resource.removeEventListener(this);
                     }
                 });
@@ -563,4 +563,4 @@ public Object object() {
             return o;
         }
     }
-}
\ No newline at end of file
+}

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -143,7 +143,7 @@ public abstract class BroadcasterFactory {
      * Return the default {@link BroadcasterFactory}.
      *
      * @return the default {@link BroadcasterFactory}.
-     * @deprecated Use {@link org.atmosphere.cpr.AtmosphereConfig#resourcesFactory()}
+     * @deprecated Use {@link org.atmosphere.cpr.AtmosphereConfig#getBroadcasterFactory()}
      */
     public synchronized static BroadcasterFactory getDefault() {
         return factory;

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -331,7 +331,7 @@ public void destroy() {
     protected void destroy(boolean force) {
 
         broadcasterCache.cleanup();
-        if ((force) && broadcasterCache != null) {
+        if ((force || !shared) && broadcasterCache != null) {
             broadcasterCache.stop();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -331,7 +331,7 @@ public void destroy() {
     protected void destroy(boolean force) {
 
         broadcasterCache.cleanup();
-        if ((force || !shared) && broadcasterCache != null) {
+        if ((force) && broadcasterCache != null) {
             broadcasterCache.stop();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/ProtocolUtil.java
Patch:
@@ -41,10 +41,10 @@ protected static AtmosphereRequest.Builder constructRequest(AtmosphereResource r
                 .contentType(contentType == null ? request.getContentType() : contentType)
                 .attributes(m)
                 .pathInfo(pathInfo)
-                .contextPath(resource.getRequest().getContextPath())
-                .servletPath(resource.getRequest().getServletPath())
+                .contextPath(request.getContextPath())
+                .servletPath(request.getServletPath())
                 .requestURI(requestURI)
-                .requestURL(resource.getRequest().getRequestURL())
+                .requestURL(request.requestURL())
                 .destroyable(destroyable)
                 .headers(request.headersMap())
                 .session(resource.session()));

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -149,7 +149,8 @@ public void onClose(WebSocket webSocket) {
 
     @Override
     public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
-        logger.warn(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
+        logger.warn(t.getMessage() + ". Unable to deliver the websocket messages to installed component." +
+                " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
     }
 }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -244,7 +244,7 @@ public AtmosphereResource resume() {
         try {
             if (!isResumed.getAndSet(true) && isInScope.get()) {
                 suspended.set(false);
-                logger.debug("AtmosphereResource {} is resuming", uuid());
+                logger.trace("AtmosphereResource {} is resuming", uuid());
 
                 action.type(Action.TYPE.RESUME);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -25,8 +25,8 @@
 import org.atmosphere.container.Grizzly2WebSocketSupport;
 import org.atmosphere.container.GrizzlyCometSupport;
 import org.atmosphere.container.GrizzlyServlet30WebSocketSupport;
+import org.atmosphere.container.JBossAsyncSupportWithWebSocket;
 import org.atmosphere.container.JBossWebCometSupport;
-import org.atmosphere.container.JBossWebSocketSupport;
 import org.atmosphere.container.JSR356AsyncSupport;
 import org.atmosphere.container.Jetty7CometSupport;
 import org.atmosphere.container.Jetty9AsyncSupportWithWebSocket;
@@ -192,7 +192,7 @@ public List<Class<? extends AsyncSupport>> detectWebSocketPresent(final boolean
                         add(Grizzly2WebSocketSupport.class);
 
                     if (testClassExists(JBOSS_AS7_WEBSOCKET))
-                        add(JBossWebSocketSupport.class);
+                        add(JBossAsyncSupportWithWebSocket.class);
                 }
             }
         };
@@ -317,4 +317,4 @@ protected AsyncSupport resolveMultipleNativeSupportConflict(final List<Class<? e
         logger.warn("{}", b.toString());
         return newCometSupport(available.get(0));
     }
-}
+}
\ No newline at end of file

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.atmosphere.config.service.Put;
 import org.atmosphere.config.service.Ready;
 import org.atmosphere.cpr.Action;
+import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereInterceptorAdapter;
@@ -99,7 +100,7 @@ public ServletContext getServletContext() {
 
             @Override
             public String getInitParameter(String name) {
-                return HeartbeatInterceptor.CLIENT_HEARTBEAT_INTERVAL_IN_SECONDS.equals(name) ? "10": null;
+                return ApplicationConfig.CLIENT_HEARTBEAT_INTERVAL_IN_SECONDS.equals(name) ? "10": null;
             }
 
             @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -109,7 +109,7 @@ public interface ApplicationConfig {
     /**
      * The default {@link org.atmosphere.cpr.BroadcasterCache} class.
      * <p/>
-     * Default: "" (Not installed by default)<br>
+     * Default: org.atmosphere.cache.DefaultBroadcasterCache (Doing nothing, not caching anything)<br>
      * Value: org.atmosphere.cpr.broadcasterCacheClass
      */
     String BROADCASTER_CACHE = ApplicationConfig.class.getPackage().getName() + ".broadcasterCacheClass";

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -327,7 +327,7 @@ public AtmosphereResource suspend(long timeout) {
 
         if (config.isSupportSession()
                 && req.getSession(false) != null
-                && req.getSession().getMaxInactiveInterval() != -1
+                && req.getSession().getMaxInactiveInterval() >= 0
                 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
             throw new IllegalStateException("Cannot suspend a " +
                     "response longer than the session timeout. Increase the value of session-timeout in web.xml");

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -609,7 +609,7 @@ public void close(final WebSocket webSocket, int closeCode) {
                 }
 
                 logger.trace("About to close AtmosphereResource for {} with code {}", resource, closeCode);
-                if (!resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {
+                if (!resource.getAtmosphereResourceEvent().isClosedByClient() && !resource.getAtmosphereResourceEvent().isClosedByApplication() && !resource.isCancelled()) {
                     // See https://github.com/Atmosphere/atmosphere/issues/1590
                     // Better to call onDisconnect that onResume.
                     if (allowedToClose) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1994,7 +1994,7 @@ public String toString() {
                     " pathInfo=" + getPathInfo() +
                     " requestURI=" + getRequestURI() +
                     " requestURL=" + getRequestURL() +
-                    " AtmosphereResource UUID=" + resource() != null ? resource().uuid() : "" +
+                    " AtmosphereResource UUID=" + (resource() != null ? resource().uuid() : "") +
                     " destroyable=" + b.destroyable +
                     '}';
         } catch (Exception e) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -643,8 +643,9 @@ public Object call() throws Exception {
         }
     }
 
+    // Highly bogus nased on which I/O layer we are using.
     private boolean allowedCloseCode(int closeCode) {
-        return closeCode < 1002 || closeCode > 1004 ? true : false;
+        return closeCode < 1001 || closeCode > 1004 ? true : false;
     }
 
     private void finish(WebSocket webSocket, AtmosphereResource resource, AtmosphereRequest r, AtmosphereResponse s, boolean closeWebSocket) {

File: modules/cpr/src/main/java/org/atmosphere/container/version/TomcatWebSocket.java
Patch:
@@ -83,6 +83,8 @@ void close(String uuid) {
                 logger.trace("WebSocket.close() for AtmosphereResource {}", uuid);
                 outbound.close(1000, closeCode);
             } catch (IOException e) {
+                // https://github.com/Atmosphere/atmosphere/issues/1646
+                // Tomcat will go in limbo
                 logger.trace("", e);
             }
         } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -123,7 +123,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
             return new Action();
         }
 
-        if (isServlet30 && !req.isAsyncSupported()) {
+        // https://github.com/Atmosphere/atmosphere/issues/1637
+        if (isServlet30 && (!req.isAsyncSupported() && !Utils.closeMessage(req))) {
             logger.error("Invalid request state. AsyncContext#startAsync not supported. Make sure async-supported is set to true in web.xml");
             res.setStatus(501);
             res.addHeader(X_ATMOSPHERE_ERROR, "AsyncContext not enabled");

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -23,11 +23,12 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEventImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
-import org.atmosphere.cpr.HeaderConfig;
 import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static org.atmosphere.util.Utils.closeMessage;
+
 
 /**
  * When the browser close the connection, the atmosphere.js will send an unsubscribe message to tell
@@ -55,9 +56,8 @@ public Action inspect(final AtmosphereResource r) {
         if (Utils.webSocketMessage(r)) return Action.CONTINUE;
 
         AtmosphereRequest request = AtmosphereResourceImpl.class.cast(r).getRequest(false);
-        String s = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT);
         String uuid = r.uuid();
-        if (s != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT_TRANSPORT_MESSAGE)) {
+        if (closeMessage(request)) {
             logger.debug("AtmosphereResource {} disconnected", uuid);
             AtmosphereResource ss = config.resourcesFactory().find(uuid);
             if (ss != null) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SuspendTrackerInterceptor.java
Patch:
@@ -52,7 +52,7 @@ public Action inspect(final AtmosphereResource r) {
         final AtmosphereRequest request = AtmosphereResourceImpl.class.cast(r).getRequest(false);
         boolean connecting = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) != null && request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID).equals("0");
 
-        if (connecting || !Utils.pollableTransport(r.transport())) {
+        if (!connecting && !Utils.pollableTransport(r.transport())) {
             if (!trackedUUID.add(r.uuid())) {
                 logger.trace("Blocking {} from suspend", r.uuid());
                 AtmosphereResourceImpl.class.cast(r).disableSuspendEvent(true);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1408,7 +1408,7 @@ protected boolean detectSupportedFramework(ServletConfig sc) throws Exception {
             return false;
         }
 
-        logger.warn("Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey");
+        logger.debug("Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey");
 
         // Atmosphere 1.1 : could add regressions
         // Jersey will itself handle the headers.

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -343,7 +343,7 @@ public static Map<String, AtmosphereFramework.MetaServiceAction> readServiceFile
                 }
             }
         } catch (IOException e) {
-            logger.warn("Unable to read META-INF/services/{} from class loader", path, e);
+            logger.debug("Unable to read META-INF/services/{} from class loader", path, e);
         } finally {
             close(is, reader);
         }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -217,7 +217,6 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
                             break;
                         }
                     }
-                    // To allow annotated methods to use BroadcasterFactory . This is clearly a hack.
                 } else {
                     logger.trace("BroadcasterFactory has been used, this may produce recursion if encoder/decoder match the broadcasted message");
                     o = message(r, msg);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -91,7 +91,7 @@ public Action inspect(final AtmosphereResource ar) {
                 String javascriptVersion = request.getHeader(HeaderConfig.X_ATMOSPHERE_FRAMEWORK);
                 int version = Integer.valueOf(javascriptVersion.split("-")[0].replace(".", ""));
                 if (version < 221) {
-                    logger.debug("Invalid Atmosphere Version {}", javascriptVersion);
+                    logger.error("Invalid Atmosphere Version {}", javascriptVersion);
                     response.setStatus(501);
                     response.addHeader(X_ATMOSPHERE_ERROR, "Atmosphere Protocol version not supported.");
                     try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -87,7 +87,8 @@ protected AtmosphereServlet configureFramework(ServletConfig sc) throws ServletE
                 try {
                     framework = (AtmosphereFramework) sc.getServletContext()
                             .getAttribute(sc.getServletContext().getServletRegistration(sc.getServletName()).getName());
-                } catch (UnsupportedOperationException ex) {
+                } catch (Exception ex) {
+                    // Equinox throw an exception (NPE)
                     // WebLogic Crap => https://github.com/Atmosphere/atmosphere/issues/1569
                     logger.trace("", ex);
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -390,7 +390,7 @@ void destroy(boolean resume) {
                     }
                 }
 
-            }, time, time, lifeCyclePolicy.getTimeUnit());
+            }, 0, time, lifeCyclePolicy.getTimeUnit());
             ref.set(currentLifecycleTask);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1102,8 +1102,10 @@ protected void initGlobalInterceptors() {
 
     public void initHandlerInterceptors(LinkedList<AtmosphereInterceptor> l) {
         if (l != null) {
-            for (AtmosphereInterceptor i : l) {
+            LinkedList<AtmosphereInterceptor> copy = new LinkedList<AtmosphereInterceptor>();
+            copy.addAll(l);
 
+            for (AtmosphereInterceptor i : copy) {
                 //
                 InvokationOrder.PRIORITY p = InvokationOrder.class.isAssignableFrom(i.getClass()) ?
                         InvokationOrder.class.cast(i).priority() : InvokationOrder.AFTER_DEFAULT;

File: modules/cpr/src/main/java/org/atmosphere/annotation/AnnotationUtil.java
Patch:
@@ -33,7 +33,7 @@ public class AnnotationUtil {
     public static void interceptors(Class<? extends AtmosphereInterceptor>[] interceptors, AtmosphereFramework framework) {
         for (Class i : interceptors) {
             try {
-                framework.interceptor((AtmosphereInterceptor) framework.newClassInstance(AtmosphereInterceptor.class, i));
+                framework.interceptor(framework.newClassInstance(AtmosphereInterceptor.class, i));
             } catch (Throwable e) {
                 logger.warn("", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -26,6 +26,7 @@
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.interceptor.InvokationOrder;
 import org.atmosphere.util.IOUtils;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -103,7 +104,7 @@ public HashSet<String> excludedContentTypes(){
 
     @Override
     public Action inspect(final AtmosphereResource r) {
-        if (AtmosphereResource.TRANSPORT.UNDEFINED == r.transport())
+        if (AtmosphereResource.TRANSPORT.UNDEFINED == r.transport() || Utils.webSocketMessage(r))
             return Action.CONTINUE;
 
         final AtmosphereResponse response = r.getResponse();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -290,7 +290,7 @@ private String path(AtmosphereRequest request) {
         return path;
     }
 
-    private Action invokeInterceptors(List<AtmosphereInterceptor> c, AtmosphereResource r) {
+    public Action invokeInterceptors(List<AtmosphereInterceptor> c, AtmosphereResource r) {
         Action a = Action.CONTINUE;
         for (AtmosphereInterceptor arc : c) {
             try {
@@ -319,7 +319,7 @@ private Action invokeInterceptors(List<AtmosphereInterceptor> c, AtmosphereResou
         return a;
     }
 
-    private void postInterceptors(List<AtmosphereInterceptor> c, AtmosphereResource r) {
+    public void postInterceptors(List<AtmosphereInterceptor> c, AtmosphereResource r) {
         AtmosphereInterceptor arc = null;
         for (int i = c.size() - 1; i > -1; i--) {
             try {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -126,7 +127,7 @@ public Action inspect(AtmosphereResource r) {
     @Override
     public void postInspect(final AtmosphereResource r) {
 
-        if (r.transport().equals(AtmosphereResource.TRANSPORT.UNDEFINED)) return;
+        if (r.transport().equals(AtmosphereResource.TRANSPORT.UNDEFINED) || Utils.webSocketMessage(r)) return;
 
         AtmosphereResourceImpl impl = AtmosphereResourceImpl.class.cast(r);
         if ( (force || impl.getRequest(false).getMethod().equalsIgnoreCase(method))

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -103,7 +103,7 @@ public void run() {
     @Override
     public Action inspect(final AtmosphereResource r) {
 
-        if (!Utils.pollableTransport(r.transport())){
+        if (!Utils.pollableTransport(r.transport()) && !Utils.webSocketMessage(r)){
 
             final BroadcasterTracker tracker = track(r).tick();
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/CorsInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.HeaderConfig;
+import org.atmosphere.util.Utils;
 
 /**
  * CORS support.
@@ -46,7 +47,7 @@ public void configure(AtmosphereConfig config) {
     @Override
     public Action inspect(AtmosphereResource resource) {
 
-        if (!enableAccessControl) return Action.CONTINUE;
+        if (!enableAccessControl || Utils.webSocketMessage(resource)) return Action.CONTINUE;
 
         AtmosphereRequest req = resource.getRequest();
         AtmosphereResponse res = resource.getResponse();

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -152,6 +152,7 @@ public Clock() {
 
     @Override
     public Action inspect(final AtmosphereResource r) {
+
         final int interval = extractHeartbeatInterval(r);
 
         if (interval != 0) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SuspendTrackerInterceptor.java
Patch:
@@ -47,6 +47,9 @@ public class SuspendTrackerInterceptor extends AtmosphereInterceptorAdapter {
 
     @Override
     public Action inspect(final AtmosphereResource r) {
+
+        if (Utils.webSocketMessage(r)) return Action.CONTINUE;
+
         final AtmosphereRequest request = AtmosphereResourceImpl.class.cast(r).getRequest(false);
         boolean connecting = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) != null && request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID).equals("0");
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -344,7 +344,7 @@ public void basicProgrammaticAPIWorkflow() throws IOException, ServletException,
         final WebSocketProcessor processor = WebSocketProcessorFactory.getDefault()
                 .getWebSocketProcessor(framework);
 
-        framework.addWebSocketHandler("/*", new WebSocketHandlerAdapter() {
+        framework.addWebSocketHandler("/*", new WebSocketProcessor.WebSocketHandlerProxy(new WebSocketHandlerAdapter() {
 
             @Override
             public void onTextMessage(WebSocket webSocket, String data) throws IOException {
@@ -355,7 +355,7 @@ public void onTextMessage(WebSocket webSocket, String data) throws IOException {
             public void onOpen(WebSocket webSocket) throws IOException {
                 webSocket.write(webSocket.resource().getRequest().getReader().readLine());
             }
-        });
+        }));
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();
         processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketStreamingHandlerTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.io.OutputStream;
 import java.io.Reader;
 import java.nio.CharBuffer;
+import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.concurrent.ExecutionException;
 
@@ -96,7 +97,7 @@ private void registerWebSocketHandler(String path, WebSocketStreamingHandler w)
 
         WebSocketProcessorFactory.getDefault()
                         .getWebSocketProcessor(framework).registerWebSocketHandler(path,
-                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w));
+                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w, new ArrayList<AtmosphereInterceptor>()));
     }
 
     @Test

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -519,7 +519,7 @@ public Object call() throws Exception {
                             asynchronousProcessor.endRequest(AtmosphereResourceImpl.class.cast(webSocket.resource()), false);
                         }
                     } else {
-                        logger.debug("ASYNCHRONOUS_HOOK not available for {}", resource.uuid());
+                        logger.debug("Resource already cancelled {}", resource.uuid());
                     }
                 } else {
                     logger.debug("Unable to properly complete {}", resource == null ? "null" : resource.uuid());

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceFactoryTest.java
Patch:
@@ -73,7 +73,7 @@ public void findTest() {
                 mock(AsyncSupport.class), mock(AtmosphereHandler.class), AtmosphereResource.TRANSPORT.WEBSOCKET);
         assertNotNull(r);
 
-        b2.addAtmosphereResource(r);
+        b2.addAtmosphereResource(r.suspend());
 
         assertNotNull(framework.getAtmosphereConfig().resourcesFactory().find(r.uuid()));
 
@@ -99,7 +99,7 @@ public void deleteTest() {
         AtmosphereResource r = framework.getAtmosphereConfig().resourcesFactory().create(framework.config, BroadcasterFactory.getDefault().lookup("1"), AtmosphereResponse.newInstance().request(AtmosphereRequest.newInstance()),
                 mock(AsyncSupport.class), mock(AtmosphereHandler.class), AtmosphereResource.TRANSPORT.WEBSOCKET);
         assertNotNull(r);
-        b2.addAtmosphereResource(r);
+        b2.addAtmosphereResource(r.suspend());
 
         assertNotNull(framework.getAtmosphereConfig().resourcesFactory().find(r.uuid()));
         assertEquals(framework.getAtmosphereConfig().resourcesFactory().remove(r.uuid()), r);

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -97,7 +97,7 @@ public void basicWorkflow() throws IOException, ServletException, ExecutionExcep
 
             @Override
             public void onRequest(AtmosphereResource resource) throws IOException {
-                resource.getBroadcaster().addAtmosphereResource(resource);
+                resource.getBroadcaster().addAtmosphereResource(resource.suspend());
                 resource.getResponse().write(resource.getRequest().getReader().readLine());
             }
 

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9WebSocketHandler.java
Patch:
@@ -67,8 +67,8 @@ public void onWebSocketConnect(Session session) {
 
     @Override
     public void onWebSocketError(Throwable e) {
-        logger.error("", e);
-        onWebSocketClose(1006, e.getCause().getMessage());
+        logger.error("{}", e);
+        onWebSocketClose(1006, "Unexpected error");
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -480,6 +480,7 @@ public void close(final WebSocket webSocket, int closeCode) {
                             if (closeCode == 1005 || closeCode == 1001 || closeCode == 1006) {
                                 boolean ff = r.getAttribute("firefox") != null;
                                 if (ff || closingTime > 0) {
+                                    logger.debug("Delaying closing operation for firefox and resource {}", resource.uuid());
                                     ExecutorsFactory.getScheduler(framework.getAtmosphereConfig()).schedule(new Callable<Object>() {
                                         @Override
                                         public Object call() throws Exception {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -417,7 +417,7 @@ public boolean completeLifecycle(final AtmosphereResource r, boolean cancelled)
             synchronized (impl) {
                 try {
                     if (impl.isCancelled()) {
-                        logger.trace("{} is already cancelled", impl.uuid());
+                        logger.error("{} is already cancelled", impl.uuid());
                         return false;
                     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -287,7 +287,7 @@ public interface ApplicationConfig {
      * The maximum time, in milliseconds, a connection gets idle or when the WIFI disconnection wasn't detected by the underlying container. This property works with the
      * {@link org.atmosphere.interceptor.IdleResourceInterceptor}, e.g you must install that interceptor in order to use the property.
      * <p>
-     * Default: 5 minutes<br>
+     * Default: -1 (disable)<br>
      * Value: org.atmosphere.cpr.CometSupport.maxInactiveActivity
      */
     String MAX_INACTIVE = "org.atmosphere.cpr.CometSupport.maxInactiveActivity";

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -475,7 +475,9 @@ public void close(final WebSocket webSocket, int closeCode) {
                     if (o != null && AsynchronousProcessorHook.class.isAssignableFrom(o.getClass())) {
                         final AsynchronousProcessorHook h = (AsynchronousProcessorHook) o;
                         if (!resource.isCancelled()) {
-                            if (closeCode == 1005 || closeCode == 1001) {
+                            // See https://github.com/Atmosphere/atmosphere/issues/1590
+                            // Better to call onDisconnect that onResume.
+                            if (closeCode == 1005 || closeCode == 1001 || closeCode == 1006) {
                                 boolean ff = r.getAttribute("firefox") != null;
                                 if (ff || closingTime > 0) {
                                     ExecutorsFactory.getScheduler(framework.getAtmosphereConfig()).schedule(new Callable<Object>() {

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -71,7 +71,6 @@
 import java.util.concurrent.TimeUnit;
 
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CLASS;
-import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_FACTORY;
 import static org.atmosphere.cpr.ApplicationConfig.DEFAULT_CONTENT_TYPE;
 import static org.atmosphere.cpr.ApplicationConfig.JERSEY_CONTAINER_RESPONSE_WRITER_CLASS;
 import static org.atmosphere.cpr.ApplicationConfig.RESUME_ON_BROADCAST;
@@ -657,8 +656,7 @@ void suspend(boolean resumeOnBroadcast,
                 response.setStatus(200);
             }
 
-            BroadcasterFactory broadcasterFactory = (BroadcasterFactory) servletReq
-                    .getAttribute(BROADCASTER_FACTORY);
+            BroadcasterFactory broadcasterFactory = r.getAtmosphereConfig().getBroadcasterFactory();
 
             boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
             URI location = null;

File: modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
Patch:
@@ -18,7 +18,6 @@
 import com.sun.jersey.core.spi.component.ComponentContext;
 import com.sun.jersey.core.spi.component.ComponentScope;
 import com.sun.jersey.spi.inject.Injectable;
-import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
@@ -84,7 +83,7 @@ public BroadcasterFactory getValue() {
 
         class BroadcasterFactoryProxy extends BroadcasterFactory {
             BroadcasterFactory _get() {
-                return (BroadcasterFactory) req.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);
+                return getAtmosphereResource(AtmosphereResource.class, true).getAtmosphereConfig().getBroadcasterFactory();
             }
 
             @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -265,7 +265,7 @@ public String getInitParameter(String closedAtmosphereThinkTime, String defaultV
     }
 
     public AtmosphereResourceFactory resourcesFactory(){
-        return framework.arFactory;
+        return framework.atmosphereFactory();
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -143,6 +143,7 @@ public abstract class BroadcasterFactory {
      * Return the default {@link BroadcasterFactory}.
      *
      * @return the default {@link BroadcasterFactory}.
+     * @deprecated Use {@link org.atmosphere.cpr.AtmosphereConfig#resourcesFactory()}
      */
     public synchronized static BroadcasterFactory getDefault() {
         return factory;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1039,7 +1039,7 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
 
         logger.info("Installing Default AtmosphereInterceptor");
         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);
-        if (s == null) {
+        if (s == null || !"true".equalsIgnoreCase(s)) {
 
             s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTORS);
             if (s != null) {

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -40,7 +40,7 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
         ServerContainer container = (ServerContainer) config.getServletContext().getAttribute(ServerContainer.class.getName());
 
         if (container == null) {
-            throw new IllegalStateException("ServerContainer is null");
+            throw new IllegalStateException("ServerContainer is null. Make sure you are using JDK7 and your server has websocket support enabled");
         }
 
         int pathLength = 5;

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -40,14 +40,14 @@
 public abstract class AbstractBroadcasterProxy extends DefaultBroadcaster {
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractBroadcasterProxy.class);
-    private final Method jerseyBroadcast;
+    private Method jerseyBroadcast = null;
 
     public AbstractBroadcasterProxy() {
         try {
             Class jerseyBroadcasterUtil = Class.forName("org.atmosphere.jersey.util.JerseyBroadcasterUtil");
             jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class, Broadcaster.class});
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            logger.trace("", e);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -55,7 +55,7 @@ public Action inspect(final AtmosphereResource r) {
         String s = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT);
         String uuid = r.uuid();
         if (p != null && s != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT_TRANSPORT_MESSAGE)) {
-            logger.trace("AtmosphereResource {} disconnected", uuid);
+            logger.debug("AtmosphereResource {} disconnected", uuid);
             AtmosphereResource ss = config.resourcesFactory().find(uuid);
             if (ss != null) {
                 // Block websocket closing detection

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -80,7 +80,7 @@ public class AtmosphereRequest extends HttpServletRequestWrapper {
     private final AtomicBoolean destroyed = new AtomicBoolean(false);
     private boolean queryComputed = false;
     private boolean cookieComputed = false;
-    private final BufferedReader voidReader = new BufferedReader(new StringReader(""));
+    private final BufferedReader voidReader = new BufferedReader(new StringReader(""), 5);
     private final ServletInputStream voidStream = new IS(new ByteArrayInputStream(new byte[0]));
     private AtomicBoolean streamSet = new AtomicBoolean();
     private AtomicBoolean readerSet = new AtomicBoolean();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1781,7 +1781,7 @@ public boolean isAsyncStarted() {
 
         @Override
         public boolean isAsyncSupported() {
-            return false;
+            return true;
         }
 
         @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2179,7 +2179,7 @@ protected Map<String, String> configureQueryStringAsRequest(AtmosphereRequest re
                 for (String p : params) {
                     s = p.split("=", 2);
                     final String header = s[0];
-                    final String value = s[1];
+                    final String value = s.length > 1 ? s[1] : "";
 
                     if (header.equalsIgnoreCase("Content-Type")) {
                         // Use the one set by the user first.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2344,7 +2344,7 @@ protected void positionInterceptor(InvokationOrder.PRIORITY p, AtmosphereInterce
                 break;
             case FIRST_BEFORE_DEFAULT:
                 if (executeFirstSet)
-                    throw new IllegalStateException("Cannot set more than one AtmosphereInterceptor to be executed first");
+                    throw new IllegalStateException("Cannot set more than one AtmosphereInterceptor to be executed first: " + c.getClass().getName());
                 logger.info("AtmosphereInterceptor {} will always be executed first", c);
                 interceptors.remove(c);
                 interceptors.addFirst(c);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -961,7 +961,7 @@ protected boolean checkCachedAndPush(final AtmosphereResource r, final Atmospher
             AtmosphereResourceImpl rImpl = AtmosphereResourceImpl.class.cast(r);
             if (willBeResumed && !rImpl.atmosphereResourceEventListener().isEmpty()) {
                 listeners.addAll(rImpl.atmosphereResourceEventListener());
-            }
+            }                                                                                                                                     f
 
             // Must make sure execute only one thread
             synchronized (r) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -222,9 +222,11 @@ public void postPayload(final AtmosphereResponse response, byte[] data, int offs
             } else {
                 // This is where we should dispatch an event to notify that an heartbeat has been intercepted
                 // See: https://github.com/Atmosphere/atmosphere/issues/1549
-                if (Arrays.equals(paddingBytes, IOUtils.readEntirelyAsByte(r))) {
+                byte[] body = IOUtils.readEntirelyAsByte(r);
+                if (Arrays.equals(paddingBytes, body) {
                     return Action.CANCELLED;
                 }
+                request.body(body);
             }
         }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -92,7 +92,7 @@ public Action inspect(final AtmosphereResource ar) {
             for (final AtmosphereInterceptor interceptor : framework.interceptors()) {
                 if (HeartbeatInterceptor.class.isAssignableFrom(interceptor.getClass())) {
                     final HeartbeatInterceptor heartbeatInterceptor = HeartbeatInterceptor.class.cast(interceptor);
-                    heartbeatInterval = heartbeatInterceptor.getClientHeartbeatFrequencyInSeconds();
+                    heartbeatInterval = heartbeatInterceptor.clientHeartbeatFrequencyInSeconds();
                     heartbeatData = new String(heartbeatInterceptor.getPaddingBytes());
                     break;
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -110,7 +110,6 @@ public class DefaultBroadcaster implements Broadcaster {
     private final Object[] awaitBarrier = new Object[0];
     private final AtomicBoolean outOfOrderBroadcastSupported = new AtomicBoolean(false);
     protected int writeTimeoutInSecond = -1;
-    protected AtmosphereResource noOpsResource;
     protected int waitTime = POLLING_DEFAULT;
     private boolean backwardCompatible = false;
 
@@ -142,7 +141,6 @@ public Broadcaster initialize(String name, URI uri, AtmosphereConfig config) {
         if (s != null) {
             writeTimeoutInSecond = Integer.valueOf(s);
         }
-        noOpsResource = config.resourcesFactory().create(config, "-1");
         if (outOfOrderBroadcastSupported.get()) {
             logger.trace("{} supports Out Of Order Broadcast: {}", name, outOfOrderBroadcastSupported.get());
         }

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -45,7 +45,7 @@ public abstract class AbstractBroadcasterProxy extends DefaultBroadcaster {
     public AbstractBroadcasterProxy() {
         try {
             Class jerseyBroadcasterUtil = Class.forName("org.atmosphere.jersey.util.JerseyBroadcasterUtil");
-            jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class});
+            jerseyBroadcast = jerseyBroadcasterUtil.getMethod("broadcast", new Class[]{AtmosphereResource.class, AtmosphereResourceEvent.class, Broadcaster.class});
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -95,7 +95,7 @@ protected void reconfigure() {
     protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (r.getRequest().getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null) {
             try {
-                jerseyBroadcast.invoke(null, new Object[]{r, e});
+                jerseyBroadcast.invoke(null, new Object[]{r, e, r.getBroadcaster()});
             } catch (Throwable t) {
                 super.invokeOnStateChange(r, e);
             }

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -226,11 +226,13 @@ public static boolean isAtmosphere(String className) {
     }
 
     public static List<String> readServiceFile(String path) {
+        List<String> b = new ArrayList<String>();
         InputStream is = AtmosphereFramework.class.getClassLoader().getResourceAsStream("META-INF/services/" + path);
 
+        if (is == null) return b;
+
         BufferedReader reader = new BufferedReader(new InputStreamReader(is));
 
-        List<String> b = new ArrayList<String>();
         String line;
         try {
             while (true) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
Patch:
@@ -174,7 +174,7 @@ public interface FrameworkConfig {
     /**
      * Tag for WebSocket's Message
      */
-    String WEBSOCKET_MESSAGE = WebSocketProcessor.class.getName() + "websocket.message";
+    String WEBSOCKET_MESSAGE = WebSocketProcessor.class.getName() + ".websocket.message";
 
 
 }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SuspendTrackerInterceptor.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -44,12 +45,12 @@ public class SuspendTrackerInterceptor extends AtmosphereInterceptorAdapter {
 
     @Override
     public Action inspect(final AtmosphereResource r) {
-        if (!r.uuid().equals("0")) {
-
+        if (!r.uuid().equals("0") && !Utils.webSocketMessage(r) && !Utils.pollableTransport(r.transport())) {
             if (!trackedUUID.add(r.uuid())) {
                 logger.trace("Blocking {} from suspend", r.uuid());
                 AtmosphereResourceImpl.class.cast(r).disableSuspendEvent(true);
             }
+
             r.addEventListener(new OnDisconnect() {
                 @Override
                 public void onDisconnect(AtmosphereResourceEvent event) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInitializer.java
Patch:
@@ -46,7 +46,6 @@ public class AtmosphereInitializer implements ServletContainerInitializer {
     public void onStartup(Set<Class<?>> classes, final ServletContext c) throws ServletException {
         logger.trace("Initializing AtmosphereFramework");
 
-
         for (Map.Entry<String, ? extends ServletRegistration> reg : c.getServletRegistrations().entrySet()) {
             if (c.getAttribute(reg.getKey()) == null && IOUtils.isAtmosphere(reg.getValue().getClassName()))  {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -42,7 +42,6 @@
 import org.atmosphere.util.AtmosphereConfigReader;
 import org.atmosphere.util.DefaultEndpointMapper;
 import org.atmosphere.util.EndpointMapper;
-import org.atmosphere.util.ExecutorsFactory;
 import org.atmosphere.util.IOUtils;
 import org.atmosphere.util.IntrospectionUtils;
 import org.atmosphere.util.ServletContextFactory;
@@ -1432,6 +1431,7 @@ public AtmosphereFramework destroy() {
 
     public AtmosphereFramework resetStates(){
         isInit = false;
+        executeFirstSet = false;
 
         broadcasterFilters.clear();
         asyncSupportListeners.clear();

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -177,6 +177,7 @@ public BroadcasterCache clearCache(String broadcasterId, String uuid, CacheMessa
             logger.trace("Removing for AtmosphereResource {} cached message {}", uuid, message.getMessage());
             notifyRemoveCache(broadcasterId, message);
             clientQueue.getQueue().remove(message);
+            clientQueue.getIds().remove(message.getId());
         }
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/InvokationOrder.java
Patch:
@@ -31,7 +31,8 @@ enum PRIORITY {
          */
         AFTER_DEFAULT,
         /**
-         * The AtmosphereInterceptor must be executed before the default set of AtmosphereInterceptor
+         * The AtmosphereInterceptor must be executed before the default set of AtmosphereInterceptor. You can only
+         * add one instance per {@link org.atmosphere.cpr.AtmosphereInterceptor}
          */
         BEFORE_DEFAULT,
         /**

File: modules/cpr/src/test/java/org/atmosphere/annotation/ManagedAtmosphereHandlerTest.java
Patch:
@@ -332,7 +332,7 @@ public void testPriority() throws IOException, ServletException {
         AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/priority").method("GET").build();
         request.header(X_ATMOSPHERE_TRANSPORT, LONG_POLLING_TRANSPORT);
         framework.doCometSupport(request, AtmosphereResponse.newInstance());
-        assertEquals(framework.interceptors().getFirst().toString(), "XXX");
+        assertEquals(framework.getAtmosphereHandlers().get("/priority").interceptors.getFirst().toString(), "XXX");
 
         assertNotNull(r.get());
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -202,7 +202,7 @@ public WebSocket write(AtmosphereResponse r, byte[] b, int offset, int length) t
             }
 
             if (b != null) {
-                write(b, 0, length);
+                write(b, 0, b.length);
             }
         } else {
             String data = null;

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -53,8 +53,10 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);
         if (servletPath == null) {
             servletPath = IOUtils.guestServletPath(config);
-            if (servletPath.equals("/") || servletPath.equals("/*")) {
+            if (servletPath.equals("/")) {
                 servletPath = PATH +"}";
+            } else if (servletPath.equals("/*")) {
+                servletPath = "";
             }
         }
         logger.info("JSR 356 Mapping path {}", servletPath);

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -53,7 +53,7 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);
         if (servletPath == null) {
             servletPath = IOUtils.guestServletPath(config);
-            if (servletPath.equals("/")) {
+            if (servletPath.equals("/") || servletPath.equals("/*")) {
                 servletPath = PATH +"}";
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -149,7 +149,7 @@ public WebSocket write(AtmosphereResponse r, String data) throws IOException {
             return this;
         }
 
-        if (!isOpen()) throw new IOException("Connection remotely closed");
+        if (!isOpen()) throw new IOException("Connection remotely closed for " + r != null ? r.uuid() : "Null");
         logger.trace("WebSocket.write()");
 
         boolean transform = filters.size() > 0 && r.getStatus() < 400;
@@ -192,7 +192,7 @@ public WebSocket write(AtmosphereResponse r, byte[] b, int offset, int length) t
             logger.error("Cannot write null value for {}", resource());
             return this;
         }
-        if (!isOpen()) throw new IOException("Connection remotely closed");
+        if (!isOpen()) throw new IOException("Connection remotely closed for " + r != null ? r.uuid() : "Null");
 
         logger.trace("WebSocket.write()");
         boolean transform = filters.size() > 0 && r.getStatus() < 400;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -227,7 +227,7 @@ private AtmosphereResourceImpl configureWorkflow(AtmosphereResourceImpl resource
         if (resource == null) {
             // TODO: cast is dangerous
             resource = (AtmosphereResourceImpl)
-                    AtmosphereResourceFactory.getDefault().create(config, handlerWrapper.broadcaster, res, this, handlerWrapper.atmosphereHandler);
+                    config.resourcesFactory().create(config, handlerWrapper.broadcaster, res, this, handlerWrapper.atmosphereHandler);
         } else {
             // TODO: REDESIGN, UGLY.
             try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -217,6 +217,7 @@ public class AtmosphereFramework {
     protected final List<String> excludedInterceptors = new ArrayList<String>();
     protected final LinkedList<BroadcasterCacheListener> broadcasterCacheListeners = new LinkedList<BroadcasterCacheListener>();
     protected final List<BroadcasterConfig.FilterManipulator> filterManipulators = new ArrayList<BroadcasterConfig.FilterManipulator>();
+    protected final AtmosphereResourceFactory arFactory = new AtmosphereResourceFactory();
 
     protected final Class<? extends AtmosphereInterceptor>[] defaultInterceptors = new Class[]{
             // Add CORS support
@@ -1416,6 +1417,7 @@ public AtmosphereFramework destroy() {
             BroadcasterFactory.factory = null;
         }
 
+        arFactory.destroy();
         AtmosphereResourceFactory.getDefault().destroy();
         WebSocketProcessorFactory.getDefault().destroy();
         return this;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -142,7 +142,7 @@ public Broadcaster initialize(String name, URI uri, AtmosphereConfig config) {
         if (s != null) {
             writeTimeoutInSecond = Integer.valueOf(s);
         }
-        noOpsResource = AtmosphereResourceFactory.getDefault().create(config, "-1");
+        noOpsResource = config.resourcesFactory().create(config, "-1");
         if (outOfOrderBroadcastSupported.get()) {
             logger.trace("{} supports Out Of Order Broadcast: {}", name, outOfOrderBroadcastSupported.get());
         }
@@ -1384,7 +1384,7 @@ protected void cacheAndSuspend(AtmosphereResource r) {
 
             String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
             if (!backwardCompatible && parentUUID != null) {
-                AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);
+                AtmosphereResource p = config.resourcesFactory().find(parentUUID);
                 if (p != null && !resources.contains(p)) {
                     notifyAndAdd(p);
                 } else if (p == null) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -22,7 +22,6 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEventImpl;
-import org.atmosphere.cpr.AtmosphereResourceFactory;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.HeaderConfig;
 import org.slf4j.Logger;
@@ -40,12 +39,14 @@ public class OnDisconnectInterceptor extends AtmosphereInterceptorAdapter {
 
     private final Logger logger = LoggerFactory.getLogger(OnDisconnectInterceptor.class);
     private AsynchronousProcessor p;
+    private AtmosphereConfig config;
 
     @Override
     public void configure(AtmosphereConfig config) {
         if (AsynchronousProcessor.class.isAssignableFrom(config.framework().getAsyncSupport().getClass())) {
             p = AsynchronousProcessor.class.cast(config.framework().getAsyncSupport());
         }
+        this.config = config;
     }
 
     @Override
@@ -55,7 +56,7 @@ public Action inspect(final AtmosphereResource r) {
         String uuid = r.uuid();
         if (p != null && s != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT_TRANSPORT_MESSAGE)) {
             logger.trace("AtmosphereResource {} disconnected", uuid);
-            AtmosphereResource ss = AtmosphereResourceFactory.getDefault().find(uuid);
+            AtmosphereResource ss = config.resourcesFactory().find(uuid);
             if (ss != null) {
                 // Block websocket closing detection
                 AtmosphereResourceImpl.class.cast(ss).getRequest(false).setAttribute(ASYNCHRONOUS_HOOK, null);

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -27,7 +27,6 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEventImpl;
 import org.atmosphere.cpr.AtmosphereResourceEventListener;
-import org.atmosphere.cpr.AtmosphereResourceFactory;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.FrameworkConfig;
@@ -160,7 +159,7 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
 
         request.headers(configureHeader(request)).setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);
 
-        AtmosphereResource r = AtmosphereResourceFactory.getDefault().create(framework.getAtmosphereConfig(),
+        AtmosphereResource r = framework.getAtmosphereConfig().resourcesFactory().create(framework.getAtmosphereConfig(),
                 response,
                 framework.getAsyncSupport());
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -48,7 +48,7 @@ public void create() throws Throwable {
         framework.setAsyncSupport(mock(AsyncSupport.class));
         framework.init();
         config = framework.getAtmosphereConfig();
-        r = AtmosphereResourceFactory.getDefault().create(config, "1234567");
+        r = config.resourcesFactory().create(config, "1234567");
         r.setBroadcaster(config.getBroadcasterFactory().lookup("/*", true));
     }
 
@@ -150,7 +150,7 @@ public void restorePartialStateTest() throws ServletException, IOException {
     @Test(enabled = false)
     public void longPollingAggregatedTest() throws ServletException, IOException, ExecutionException, InterruptedException {
         final AtomicReference<Object> ref = new AtomicReference<Object>();
-        AtmosphereResourceImpl r = (AtmosphereResourceImpl) AtmosphereResourceFactory.getDefault().create(config, "1234567");
+        AtmosphereResourceImpl r = (AtmosphereResourceImpl) config.resourcesFactory().create(config, "1234567");
         r.setBroadcaster(config.getBroadcasterFactory().lookup("/1", true));
 
         recovery.configure(config);
@@ -171,7 +171,7 @@ public void longPollingAggregatedTest() throws ServletException, IOException, Ex
         MetaBroadcaster.getDefault().broadcastTo("/1", "Initialize Cache").get();
         r.close();
 
-        AtmosphereResourceImpl r2 = (AtmosphereResourceImpl) AtmosphereResourceFactory.getDefault().create(config, "1234567");
+        AtmosphereResourceImpl r2 = (AtmosphereResourceImpl) config.resourcesFactory().create(config, "1234567");
         // Set a different one to hit caching.
         r2.setBroadcaster(config.getBroadcasterFactory().lookup("/*", true));
 

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -62,7 +62,7 @@ public final static boolean firefoxWebSocketEnabled(HttpServletRequest request)
                 && request.getHeader(HeaderConfig.X_ATMO_PROTOCOL) != null
                 && request.getHeader(HeaderConfig.X_ATMO_PROTOCOL).equals("true")
                 && request.getHeader("User-Agent") != null
-                && request.getHeader("User-Agent").toLowerCase().indexOf("Firefox") != -1;
+                && request.getHeader("User-Agent").toLowerCase().indexOf("firefox") != -1;
     }
 
     public final static boolean twoConnectionsTransport(AtmosphereResource.TRANSPORT t) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterCacheTest.java
Patch:
@@ -203,7 +203,7 @@ public void testBasicExcludeCache() throws ExecutionException, InterruptedExcept
         broadcaster.removeAtmosphereResource(r);
         broadcaster.broadcast("foo").get();
 
-        List<Object> l = cache.retrieveFromCache(broadcaster.getID(), ar);
+        List<Object> l = cache.retrieveFromCache(broadcaster.getID(), ar.uuid());
         assertNotNull(l);
         assertEquals(l.isEmpty(), true);
     }
@@ -219,7 +219,7 @@ public void testExcludeCache() throws ExecutionException, InterruptedException,
         broadcaster.removeAtmosphereResource(r);
         broadcaster.broadcast("foo").get();
 
-        List<Object> l = cache.retrieveFromCache(broadcaster.getID(), r);
+        List<Object> l = cache.retrieveFromCache(broadcaster.getID(), r.uuid());
         assertNotNull(l);
         assertEquals(l.isEmpty(), false);
     }
@@ -241,7 +241,7 @@ public void testCloseExcludeCache() throws ExecutionException, InterruptedExcept
         b.broadcast("raide").get();
 
         assertEquals(cache.messages().isEmpty(), false);
-        List<Object> l = cache.retrieveFromCache(b.getID(), ar);
+        List<Object> l = cache.retrieveFromCache(b.getID(), ar.uuid());
         assertNotNull(l);
         assertEquals(l.isEmpty(), false);
     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -266,7 +266,7 @@ public List<Object> retrieveCache(AtmosphereResource r, BroadcasterTracker track
             if (b != null && (force || !b.getID().equalsIgnoreCase(r.getBroadcaster().getID()))) {
                 // We cannot add the resource now. we need to first make sure there is no cached message.
                 cache = b.getBroadcasterConfig().getBroadcasterCache();
-                List<Object> t = cache.retrieveFromCache(b.getID(), r);
+                List<Object> t = cache.retrieveFromCache(b.getID(), r.uuid());
 
                 cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);
                 if (t.size() > 0) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEvent.java
Patch:
@@ -79,7 +79,7 @@ public interface AtmosphereResourceEvent {
     /**
      * Return true if the client closed the connection and send the Atmosphere close message. You must
      * use the {@link org.atmosphere.interceptor.OnDisconnectInterceptor} in order to receive the proper value,
-     * and enableProtocol must be set to true on the client side (enabledProtocol is true by default).
+     * and atmosphereProtocol must be set to true on the client side (enabledProtocol is true by default).
      *
      * @return
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java
Patch:
@@ -239,7 +239,7 @@ public void registerUuidForFindCandidate(AtmosphereResource r) {
      * @param r {@link AtmosphereResource}
      */
     public void unRegisterUuidForFindCandidate(AtmosphereResource r) {
-        logger.debug("Removing: {}", r);
+        logger.trace("Removing: {}", r);
         resources.remove(r.uuid());
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -467,8 +467,8 @@ public void close(WebSocket webSocket, int closeCode) {
                     AsynchronousProcessorHook h;
                     if (o != null && AsynchronousProcessorHook.class.isAssignableFrom(o.getClass())) {
                         h = (AsynchronousProcessorHook) o;
-                        if (!resource.isCancelled()) {
-                            if (closeCode == 1005) {
+                        if (!resource.isCancelled() && !resource.getAtmosphereResourceEvent().isClosedByClient()) {
+                            if (closeCode == 1005 || closeCode == 1001) {
                                 h.closed();
                             } else {
                                 h.timedOut();

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilter.java
Patch:
@@ -88,11 +88,12 @@ void setOriginalMsg(Object originalMsg) {
      * Transform or filter a message. Return BroadcastAction(ACTION.ABORT, message)
      * {@link Broadcaster} to discard the message, eg. to not broadcast it.
      *
+     * @param broadcasterId the {@link org.atmosphere.cpr.Broadcaster#getID()} calling this object
      * @param originalMessage The original message which was {@link Broadcaster#broadcast(Object)};
      * @param message         The transformed or not message.
      * @return a transformed message.
      */
-    BroadcastAction filter(Object originalMessage, Object message);
+    BroadcastAction filter(String broadcasterId, Object originalMessage, Object message);
 
 }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilterAdapter.java
Patch:
@@ -23,12 +23,12 @@
 public class BroadcastFilterAdapter implements PerRequestBroadcastFilter {
 
     @Override
-    public BroadcastAction filter(AtmosphereResource r, Object originalMessage, Object message) {
+    public BroadcastAction filter(String broadcasterId, AtmosphereResource r, Object originalMessage, Object message) {
         return new BroadcastAction(message);
     }
 
     @Override
-    public BroadcastAction filter(Object originalMessage, Object message) {
+    public BroadcastAction filter(String broadcasterId, Object originalMessage, Object message) {
         return new BroadcastAction(message);
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -79,7 +79,7 @@ public Action inspect(final AtmosphereResource ar) {
             if (r.getBroadcaster().getBroadcasterConfig().hasFilters()) {
                 for (BroadcastFilter bf : r.getBroadcaster().getBroadcasterConfig().filters()) {
                     if (TrackMessageSizeFilter.class.isAssignableFrom(bf.getClass())) {
-                        protocolMessage.set((String) f.filter(r, protocolMessage.get(), protocolMessage.get()).message());
+                        protocolMessage.set((String) f.filter(r.getBroadcaster().getID(), r, protocolMessage.get(), protocolMessage.get()).message());
                         break;
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/util/StringFilterAggregator.java
Patch:
@@ -41,7 +41,7 @@ public StringFilterAggregator(int maxBufferedString) {
         this.maxBufferedString = maxBufferedString;
     }
 
-    public BroadcastAction filter(Object originalMessage, Object message) {
+    public BroadcastAction filter(String broadcasterId, Object originalMessage, Object message) {
         if (message instanceof String) {
             bufferedMessage.get().append(message);
             if (bufferedMessage.get().length() < maxBufferedString) {

File: modules/cpr/src/main/java/org/atmosphere/util/XSSHtmlFilter.java
Patch:
@@ -33,7 +33,7 @@ public class XSSHtmlFilter implements BroadcastFilter {
      * @param o The object to introspect.
      * @return a well formed
      */
-    public BroadcastAction filter(Object originalMessage, Object o) {
+    public BroadcastAction filter(String broadcasterId, Object originalMessage, Object o) {
         if (o instanceof String) {
             String message = (String) o;
 

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -42,7 +42,7 @@ public CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessa
         long now = System.nanoTime();
         CacheMessage cacheMessage = put(e, now, uuid);
 
-        if (uuid.equals(NULL)) {
+        if (!uuid.equals(NULL)) {
             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));
         }
         return cacheMessage;

File: modules/cpr/src/main/java/org/atmosphere/util/IOUtils.java
Patch:
@@ -62,7 +62,8 @@ public static Object readEntirely(AtmosphereResource r) {
     }
 
     public final static boolean isBodyBinary(AtmosphereRequest request) {
-        if (request.getHeader(FORCE_BINARY) != null || request.getHeader(X_ATMO_BINARY) != null) return true;
+        if (request.getContentType() != null
+                && request.getContentType().equalsIgnoreCase(FORCE_BINARY) || request.getHeader(X_ATMO_BINARY) != null) return true;
         return false;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/ProtocolUtil.java
Patch:
@@ -37,7 +37,7 @@ protected static AtmosphereRequest.Builder constructRequest(AtmosphereResource r
         AtmosphereRequest.Builder b = (new AtmosphereRequest.Builder()
                 .request(request)
                 .method(methodType)
-                .contentType(contentType)
+                .contentType(contentType == null ? request.getContentType() : contentType)
                 .attributes(m)
                 .pathInfo(pathInfo)
                 .requestURI(requestURI)

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/StreamingHttpProtocol.java
Patch:
@@ -46,6 +46,7 @@
 public class StreamingHttpProtocol implements WebSocketProtocolStream {
 
     private static final Logger logger = LoggerFactory.getLogger(StreamingHttpProtocol.class);
+    protected final static String TEXT = "text/plain";
     protected String contentType = "text/plain";
     protected String methodType = "POST";
     protected String delimiter = "@@";
@@ -95,7 +96,7 @@ public List<AtmosphereRequest> onTextStream(WebSocket webSocket, Reader r) {
 
         AtmosphereRequest request = resource.getRequest();
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
-        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType, destroyable).reader(r).build());
+        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).reader(r).build());
 
         return list;
     }
@@ -111,7 +112,7 @@ public List<AtmosphereRequest> onBinaryStream(WebSocket webSocket, InputStream s
 
         AtmosphereRequest request = resource.getRequest();
         List<AtmosphereRequest> list = new ArrayList<AtmosphereRequest>();
-        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType, destroyable).inputStream(stream).build());
+        list.add(constructRequest(resource, request.getPathInfo(), request.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).inputStream(stream).build());
 
         return list;
     }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -52,11 +52,12 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
 
         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);
         if (servletPath == null) {
-            servletPath = IOUtils.guestServletPath(config.framework());
+            servletPath = IOUtils.guestServletPath(config);
             if (servletPath.equals("/")) {
                 servletPath = PATH +"}";
             }
         }
+        logger.info("JSR 356 Mapping path {}", servletPath);
         configurator = new AtmosphereConfigurator(config.framework(), servletPath);
 
         StringBuilder b = new StringBuilder(servletPath);
@@ -66,15 +67,14 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
             } catch (DeploymentException e) {
                 logger.warn("Duplicate Servlet Mapping Path {}. Use {} init-param to prevent this message", servletPath, ApplicationConfig.JSR356_MAPPING_PATH);
                 logger.trace("", e);
-                servletPath = IOUtils.guestServletPath(config.framework(), servletPath);
+                servletPath = IOUtils.guestServletPath(config);
                 logger.warn("Duplicate guess {}", servletPath, e);
                 b.setLength(0);
                 b.append(servletPath);
                 configurator.guessedServletPath = servletPath;
             }
             b.append(PATH).append(i).append("}");
         }
-        logger.info("JSR 356 Mapping path {}", servletPath);
     }
 
     public boolean supportWebSocket() {

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -88,4 +88,7 @@ public interface HeaderConfig {
     String X_ATMO_BINARY = "X-Atmosphere-Binary";
 
     String X_ATMO_WEBSOCKET_PROXY = "X-Atmosphere-WebSocket-Proxy";
+
+    String FORCE_BINARY = "application/octet-stream";
+
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/AnnotationUtil.java
Patch:
@@ -23,7 +23,6 @@
 import org.atmosphere.cpr.AtmosphereResourceEventListener;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;
-import org.atmosphere.cpr.BroadcasterFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -88,7 +87,7 @@ public String toString() {
     }
 
     public static Broadcaster broadcaster(AtmosphereFramework framework, Class<? extends Broadcaster> broadcaster, String path) throws Exception {
-        return BroadcasterFactory.getDefault().lookup(broadcasterClass(framework, broadcaster), path, true);
+        return framework.getBroadcasterFactory().lookup(broadcasterClass(framework, broadcaster), path, true);
     }
 
     public static Class<? extends Broadcaster> broadcasterClass(AtmosphereFramework framework, Class<? extends Broadcaster> broadcaster) throws Exception {

File: modules/cpr/src/main/java/org/atmosphere/container/WeblogicWebSocketHandler.java
Patch:
@@ -20,7 +20,6 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResponse;
-import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListener;
@@ -151,7 +150,7 @@ public void onClose(WebSocketConnection webSocketConnection, ClosingMessage clos
 
     private void configure() {
         synchronized(this) {
-            config = BroadcasterFactory.getDefault().lookup(ROOT_MASTER).getBroadcasterConfig().getAtmosphereConfig();
+            config = config.getBroadcasterFactory().lookup(ROOT_MASTER).getBroadcasterConfig().getAtmosphereConfig();
             webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
 
             String s = config.getInitParameter(ApplicationConfig.WEBSOCKET_IDLETIME);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1746,7 +1746,7 @@ private void getFiles(File f) {
      * @param req {@link AtmosphereRequest}
      */
     public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, AtmosphereResponse res) throws UnsupportedEncodingException {
-        req.setAttribute(BROADCASTER_FACTORY, BroadcasterFactory.getDefault());
+        req.setAttribute(BROADCASTER_FACTORY, getBroadcasterFactory());
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
         req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
         req.setAttribute(ATMOSPHERE_CONFIG, config);

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -93,7 +93,7 @@ public void init(final ServletConfig sc) throws ServletException {
             for (Filter f : filters) {
                 r.addFilter(f);
             }
-            BroadcasterFactory.getDefault().remove(delegateMapping);
+            framework().getBroadcasterFactory().remove(delegateMapping);
             framework.addAtmosphereHandler(delegateMapping, r).initAtmosphereHandler(sc);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/container/EmbeddedWebSocketHandler.java
Patch:
@@ -151,7 +151,7 @@ public static void main(String... args) throws IOException {
     public static AtmosphereHandler ECHO_ATMOSPHEREHANDLER = new AbstractReflectorAtmosphereHandler() {
         @Override
         public void onRequest(AtmosphereResource resource) throws IOException {
-            String body = IOUtils.readEntirely(resource).toString();
+            String body = IOUtils.readEntirelyAsString(resource).toString();
             if (!body.isEmpty()) {
                 resource.getBroadcaster().broadcast(body);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -83,7 +83,7 @@ public void init(final ServletConfig sc) throws ServletException {
 
     protected AtmosphereServlet configureFramework(ServletConfig sc) throws ServletException {
         if (framework == null) {
-            framework = (AtmosphereFramework) sc.getServletContext().getAttribute(AtmosphereFramework.class.getName());
+            framework = (AtmosphereFramework) sc.getServletContext().getAttribute(sc.getServletContext().getServletRegistration(sc.getServletName()).getName());
             if (framework == null) {
                 framework = newAtmosphereFramework();
             }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -135,6 +135,9 @@ public void onOpen(Session session, EndpointConfig endpointConfig) {
             }
 
             pathInfo = p.toString();
+            if (pathInfo.equals(servletPath)) {
+                pathInfo = null;
+            }
         } catch (Exception ex) {
             logger.warn("Unexpected path decoding", ex);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCacheListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Jeanfrancois Arcand
+ * Copyright 2014 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/test/java/org/atmosphere/cpr/MeteorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Jeanfrancois Arcand
+ * Copyright 2014 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1025,7 +1025,8 @@ protected void configureBroadcaster() {
                 if (w.broadcaster == null) {
                     w.broadcaster = broadcasterFactory.get(w.mapping);
                 } else {
-                    if (broadcasterCacheClassName != null) {
+                    if (broadcasterCacheClassName != null
+                            && w.broadcaster.getBroadcasterConfig().getBroadcasterCache().getClass().getName().equals(DefaultBroadcasterCache.class.getName())) {
                         BroadcasterCache cache = newClassInstance(BroadcasterCache.class,
                                 (Class<BroadcasterCache>) IOUtils.loadClass(getClass(), broadcasterCacheClassName));
                         w.broadcaster.getBroadcasterConfig().setBroadcasterCache(cache);

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -101,7 +101,7 @@ public void stop() {
         }
     }
 
-    protected CacheMessage put(BroadcastMessage message, Long now) {
+    protected CacheMessage put(BroadcastMessage message, Long now, String uuid) {
         if (!inspect(message)) return null;
 
         logger.trace("Caching message {} for Broadcaster {}", message.message);
@@ -111,7 +111,7 @@ protected CacheMessage put(BroadcastMessage message, Long now) {
         try {
             boolean hasMessageWithSameId = messagesIds.contains(message.id);
             if (!hasMessageWithSameId) {
-                cacheMessage = new CacheMessage(message.id, now, message.message);
+                cacheMessage = new CacheMessage(message.id, now, message.message, uuid);
                 messages.add(cacheMessage);
                 messagesIds.add(message.id);
             }

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -40,7 +40,7 @@ public class HeaderBroadcasterCache extends AbstractBroadcasterCache {
     @Override
     public CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessage e) {
         long now = System.nanoTime();
-        CacheMessage cacheMessage = put(e, now);
+        CacheMessage cacheMessage = put(e, now, uuid);
 
         if (uuid.equals(NULL)) {
             AtmosphereResourceFactory.getDefault().find(uuid).getResponse().setHeader(X_CACHE_DATE, String.valueOf(now));

File: modules/cpr/src/main/java/org/atmosphere/cache/SessionBroadcasterCache.java
Patch:
@@ -44,7 +44,7 @@ public SessionBroadcasterCache() {
     @Override
     public CacheMessage addToCache(String broadcasterId, String uuid, BroadcastMessage message) {
         long now = System.nanoTime();
-        CacheMessage cacheMessage = put(message, now);
+        CacheMessage cacheMessage = put(message, now, uuid);
 
         if (uuid.equals(NULL)) return cacheMessage;
 

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -129,7 +129,7 @@ public CacheMessage addToCache(String broadcasterId, String clientId, BroadcastM
         }
 
         String messageId = UUID.randomUUID().toString();
-        CacheMessage cacheMessage = new CacheMessage(messageId, e);
+        CacheMessage cacheMessage = new CacheMessage(messageId, e, clientId);
         if (clientId.equals("null")) {
             //no clients are connected right now, caching message for all active clients
             for (Map.Entry<String, Long> entry : activeClients.entrySet()) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterTest.java
Patch:
@@ -78,7 +78,7 @@ public void testSimultaneousAddResourceAndPush() throws ExecutionException, Inte
         broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache() {
             @Override
             public CacheMessage addToCache(String id, String r, BroadcastMessage e) {
-                CacheMessage c = put(e, System.nanoTime());
+                CacheMessage c = put(e, System.nanoTime(), r);
                 cache.put(id, e);
                 return c;
             }

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -45,8 +45,8 @@ public void configure(BroadcasterConfig config) {
     }
 
     @Override
-    public CacheMessage addToCache(String broadcasterId, AtmosphereResource r, BroadcastMessage e) {
-        logger.trace("Message {} might be lost! Please install a proper BroadcasterCache", e.message);
+    public CacheMessage addToCache(String broadcasterId, String clientId, BroadcastMessage message) {
+        logger.trace("Message {} might be lost! Please install a proper BroadcasterCache", message.message);
         return null;
     }
 
@@ -56,7 +56,7 @@ public List<Object> retrieveFromCache(String id, AtmosphereResource r) {
     }
 
     @Override
-    public BroadcasterCache clearCache(String broadcasterId, AtmosphereResource r, CacheMessage cache) {
+    public BroadcasterCache clearCache(String broadcasterId, String clientId, CacheMessage cache) {
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/version/JSR356WebSocket.java
Patch:
@@ -124,7 +124,7 @@ public void onResult(SendResult result) {
             if (!result.isOK() || result.getException() != null) {
                 logger.trace("WebSocket {} failed to write {}", r, message);
                 Broadcaster b = r.getBroadcaster();
-                b.getBroadcasterConfig().getBroadcasterCache().addToCache(b.getID(), r, new BroadcastMessage(message));
+                b.getBroadcasterConfig().getBroadcasterCache().addToCache(b.getID(), r.uuid(), new BroadcastMessage(message));
             }
         }
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterTest.java
Patch:
@@ -77,7 +77,7 @@ public void testSimultaneousAddResourceAndPush() throws ExecutionException, Inte
 
         broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache() {
             @Override
-            public CacheMessage addToCache(String id, AtmosphereResource r, BroadcastMessage e) {
+            public CacheMessage addToCache(String id, String r, BroadcastMessage e) {
                 CacheMessage c = put(e, System.nanoTime());
                 cache.put(id, e);
                 return c;

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -66,4 +66,5 @@ public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r
         }
         return get(cacheHeaderTime);
     }
+
 }

File: modules/cpr/src/main/java/org/atmosphere/cache/SessionBroadcasterCache.java
Patch:
@@ -30,6 +30,7 @@
  * messages.
  *
  * @author Jeanfrancois Arcand
+ *
  */
 public class SessionBroadcasterCache extends AbstractBroadcasterCache {
 

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -21,7 +21,7 @@
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFuture;
 import org.atmosphere.cpr.DefaultBroadcaster;
-import org.atmosphere.cpr.Entry;
+import org.atmosphere.cpr.Deliver;
 import org.atmosphere.cpr.FrameworkConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -109,7 +109,7 @@ protected void broadcastReceivedMessage(Object message) {
             Object newMsg = filter(message);
             // if newSgw == null, that means the message has been filtered.
             if (newMsg != null) {
-                push(new Entry(newMsg, new BroadcasterFuture<Object>(newMsg), message));
+                push(new Deliver(newMsg, new BroadcasterFuture<Object>(newMsg), message));
             }
         } catch (Throwable t) {
             logger.error("failed to push message: " + message, t);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -944,7 +944,7 @@ private boolean isNotNoOps() {
      */
     @Override
     public Locale getLocale() {
-        return isNotNoOps() ? b.request.getLocale() : b.locales.iterator().next();
+        return isNotNoOps() ? b.request.getLocale() : b.locales.iterator().hasNext() ? b.locales.iterator().next() : Locale.getDefault();
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -53,6 +53,9 @@ public JSR356AsyncSupport(AtmosphereConfig config) {
         String servletPath = config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH);
         if (servletPath == null) {
             servletPath = IOUtils.guestServletPath(config.framework());
+            if (servletPath.equals("/")) {
+                servletPath = PATH +"}";
+            }
         }
         configurator = new AtmosphereConfigurator(config.framework(), servletPath);
 

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -200,7 +200,9 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
                             break;
                         }
                     }
-                } else {
+                // To allow annotated methods to use BroadcasterFactory . This is clearly a hack.
+                } else if (onRuntimeMethod.size() > 1) {
+                    logger.trace("BroadcasterFactory has been used, this may produce recursion if encoder/decoder match the broadcasted message");
                     o = message(r, msg);
                     if (o != null) {
                         event.setMessage(o);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -184,7 +184,7 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         Action action = skipAtmosphereHandler ? Action.CANCELLED : resource.action();
         if (supportSession() && allowSessionTimeoutRemoval() && action.type().equals(Action.TYPE.SUSPEND)) {
             // Do not allow times out.
-            SessionTimeoutSupport.setupTimeout(req.getSession());
+            SessionTimeoutSupport.setupTimeout(config, req.getSession());
         }
         logger.trace("Action for {} was {} with transport " + req.getHeader(X_ATMOSPHERE_TRANSPORT), req.resource() != null ? req.resource().uuid() : "null", action);
         return action;

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -54,6 +54,7 @@ public void handle(AtmosphereFramework framework, Class<WebSocketHandler> annota
                 framework.interceptor(aa);
             }
 
+            framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
             WebSocketProcessor p = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);
             p.registerWebSocketHandler(m.path(), new WebSocketProcessor.WebSocketHandlerProxy( broadcasterClass(framework, m.broadcaster()),
                     framework.newClassInstance(WebSocketHandler.class, annotatedClass)));

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -175,8 +175,8 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
         dispatch(webSocket, request, response);
 
         if (proxy != null) {
-            proxy.onOpen(webSocket);
             webSocket.webSocketHandler(proxy).resource().suspend(-1);
+            proxy.onOpen(webSocket);
         }
 
         request.removeAttribute(INJECTED_ATMOSPHERE_RESOURCE);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -780,9 +780,9 @@ public HttpSession session(boolean create) {
 
     @Override
     public void close() throws IOException {
-        cancel();
         event.setCloseByApplication(true);
         notifyListeners();
+        cancel();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketHandler.java
Patch:
@@ -37,6 +37,7 @@
 
 import javax.servlet.ServletContext;
 import javax.servlet.ServletRegistration;
+import javax.servlet.http.HttpServletRequest;
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java
Patch:
@@ -38,13 +38,13 @@ public boolean isOpen() {
 
     @Override
     public WebSocket write(String s) throws IOException {
-        if (isOpen()) webSocketConnection.getRemote().sendString(s);
+        if (isOpen()) webSocketConnection.getRemote().sendStringByFuture(s);
         return this;
     }
 
     @Override
     public WebSocket write(byte[] b, int offset, int length) throws IOException {
-        if (isOpen()) webSocketConnection.getRemote().sendBytes(ByteBuffer.wrap(b, offset, length));
+        if (isOpen()) webSocketConnection.getRemote().sendBytesByFuture(ByteBuffer.wrap(b, offset, length));
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -106,7 +106,7 @@ public Action suspended(AtmosphereRequest request, AtmosphereResponse response)
      */
     Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
 
-        if (Utils.isWebSocketProxied(req) || (Utils.webSocketEnabled(req) && !supportWebSocket())) {
+        if (!Utils.webSocketProtocol(req) || (Utils.webSocketEnabled(req) && !supportWebSocket())) {
             res.setStatus(501);
             res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
             res.flushBuffer();

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -74,7 +74,7 @@ public final static boolean pollableTransport(AtmosphereResource.TRANSPORT t) {
         }
     }
 
-    public static boolean isWebSocketProxied(HttpServletRequest request) {
+    public static boolean webSocketProtocol(HttpServletRequest request) {
         Enumeration<String> connection = request.getHeaders("Connection");
         if (connection == null || !connection.hasMoreElements()) {
             connection = request.getHeaders("connection");

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -85,7 +85,7 @@ public static boolean isWebSocketProxied(HttpServletRequest request) {
         if (connection != null && connection.hasMoreElements()) {
             String[] e = connection.nextElement().toString().split(",");
             for (String upgrade : e) {
-                if (upgrade.trim().equalsIgnoreCase("keep-Alive") && isWebSocket) {
+                if (e.length == 1 && upgrade.trim().equalsIgnoreCase("keep-Alive") && isWebSocket) {
                     proxied = true;
                     break;
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -106,7 +106,7 @@ public Action suspended(AtmosphereRequest request, AtmosphereResponse response)
      */
     Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
 
-        if (Utils.webSocketEnabled(req) && !supportWebSocket()) {
+        if (Utils.isWebSocketProxied(req) || (Utils.webSocketEnabled(req) && !supportWebSocket())) {
             res.setStatus(501);
             res.addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
             res.flushBuffer();

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -130,7 +130,7 @@ public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft
                 CharBuffer cb = inCharset.newDecoder().decode(ByteBuffer.wrap(responseDraft, 0, responseDraft.length));
                 String s = cb.toString();
 
-                if (s.trim().length() == 0 || s.indexOf(endString) != -1) {
+                if (s.trim().length() == 0) {
                     return responseDraft;
                 }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1083,8 +1083,8 @@ public final static class Builder {
         private int localPort = 0;
         private boolean dispatchRequestAsynchronously;
         private boolean destroyable = true;
-        private Set<Cookie> cookies = new HashSet<Cookie>();
-        private Set<Locale> locales = new HashSet<Locale>();
+        private Set<Cookie> cookies =  Collections.synchronizedSet(new HashSet<Cookie>());
+        private final Set<Locale> locales = Collections.synchronizedSet(new HashSet<Locale>());
         private Principal principal = null;
         private String authType = null;
         private String contextPath = "";
@@ -1835,7 +1835,7 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
         HttpServletRequest r;
 
         Cookie[] cs = request.getCookies();
-        Set<Cookie> hs = new HashSet();
+        Set<Cookie> hs = Collections.synchronizedSet(new HashSet());
         if (cs != null) {
             for (Cookie c : cs) {
                 hs.add(c);

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/AnnotationDetector.java
Patch:
@@ -413,15 +413,16 @@ public void detect(final File... filesOrDirectories) throws IOException {
     }
 
     // private
-
     private File toFile(final URL url) throws MalformedURLException {
         // only correct way to convert the URL to a File object, also see issue #16
         // Do not use URLDecoder
         try {
             return new File(url.toURI());
         } catch (URISyntaxException ex) {
+                throw new MalformedURLException(ex.getMessage());
+        } catch (IllegalArgumentException ex) {
             try {
-                return new File(URLDecoder.decode(url.getFile(), "UTF-8"));
+               return new File(URLDecoder.decode(url.getFile(), "UTF-8"));
             } catch (Exception ex2) {
                 throw new MalformedURLException(ex.getMessage());
             }

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -63,6 +63,7 @@ public Tomcat7CometSupport(AtmosphereConfig config) {
         try {
             Class.forName(CometEvent.class.getName());
         } catch (Throwable e) {
+            logger.error("Unable to load class {}. Please make sure you have properly installed Atmosphere http://goo.gl/KEi8pc", e);
             throw new IllegalStateException(unableToDetectComet());
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -54,6 +54,7 @@ public TomcatCometSupport(AtmosphereConfig config) {
         try {
             Class.forName(CometEvent.class.getName());
         } catch (Throwable e) {
+            logger.error("Unable to load class {}. Please make sure you have properly installed Atmosphere http://goo.gl/KEi8pc", e);
             throw new IllegalStateException(unableToDetectComet());
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -126,6 +126,5 @@ private void loadDelegateViaConfig(ServletConfig sc) throws ServletException {
     @Override
     public void destroy() {
         super.destroy();
-        Meteor.cache.clear();
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -102,7 +102,6 @@ private void loadServlet(ServletConfig sc, URLClassLoader urlC) throws Exception
         }
 
         logger.info("Installing Servlet {}", servletClassName);
-        filterChain.setServlet(sc, servlet);
     }
 
     private void loadFilterClasses(ServletConfig sc, URLClassLoader urlC) throws Exception {
@@ -176,6 +175,7 @@ public void init(AtmosphereConfig config) throws ServletException {
         } catch (Exception ex) {
             throw new ServletException(ex);
         }
+        filterChain.setServlet(config.getServletConfig(), servlet);
         wrapper.init(config.getServletConfig());
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -52,7 +52,6 @@
  */
 package org.atmosphere.cpr;
 
-import org.atmosphere.container.Servlet30CometSupport;
 import org.atmosphere.interceptor.AllowInterceptor;
 import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
@@ -730,7 +729,7 @@ public void cancel() throws IOException {
                 }
             }
 
-            Servlet30CometSupport.endAsyncContext(req);
+            asyncSupport.complete(this);
 
             SessionTimeoutSupport.restoreTimeout(req);
             action.type(Action.TYPE.CANCELLED);

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -148,7 +148,7 @@ public void action(AtmosphereResourceImpl r) {
         }
     }
 
-    protected void endAsyncContext(AtmosphereRequest request){
+    public static void endAsyncContext(AtmosphereRequest request){
         AsyncContext asyncContext = (AsyncContext) request.getAttribute(FrameworkConfig.ASYNC_CONTEXT);
         if (asyncContext != null) {
             try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -52,6 +52,7 @@
  */
 package org.atmosphere.cpr;
 
+import org.atmosphere.container.Servlet30CometSupport;
 import org.atmosphere.interceptor.AllowInterceptor;
 import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
@@ -729,6 +730,8 @@ public void cancel() throws IOException {
                 }
             }
 
+            Servlet30CometSupport.endAsyncContext(req);
+
             SessionTimeoutSupport.restoreTimeout(req);
             action.type(Action.TYPE.CANCELLED);
             if (asyncSupport != null) asyncSupport.action(this);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -691,7 +691,7 @@ public Object getAttribute(String s) {
     /**
      * {@inheritDoc}
      */
-    @Overridee
+    @Override
     public void removeAttribute(String name) {
         b.localAttributes.remove(name);
         if (isNotNoOps()) {

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -41,6 +41,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Reader;
+import java.io.Serializable;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -389,7 +390,7 @@ public MethodInfo(Method method) {
         }
     }
 
-    public final static class Managed {
+    public final static class Managed implements Serializable {
         final Object o;
 
         public Managed(Object o) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -159,7 +159,6 @@ public final <T extends Broadcaster> T get(Class<T> c, Object id) {
 
     private <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) throws BroadcasterCreationException {
         try {
-            //T b = c.getConstructor(String.class, AtmosphereConfig.class).newInstance(id.toString(), config);
             T b = config.framework().newClassInstance(c, c);
             b.initialize(id.toString(), legacyBroadcasterURI, config);
             b.setSuspendPolicy(defaultPolicyInteger, defaultPolicy);
@@ -220,7 +219,7 @@ public <T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfN
     }
 
     public <T extends Broadcaster> T lookup(Class<T> c, Object id, boolean createIfNull, boolean unique) {
-        synchronized (id) {
+        synchronized (c) {
             logger.trace("About to create {}", id);
             if (unique && store.get(id) != null) {
                 throw new IllegalStateException("Broadcaster already exists " + id + ". Use BroadcasterFactory.lookup instead");

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -236,7 +236,7 @@ public void onPreDestroy(Broadcaster b) {
                     @Override
                     public void run() {
                         try {
-                            f.get(TestBroadcaster.class, "me");
+                            f.get(TestBroadcaster.class, new String("me"));
                         } catch (IllegalStateException ex) {
                             latch.countDown();
                         }

File: modules/cpr/src/main/java/org/atmosphere/config/service/ManagedService.java
Patch:
@@ -88,7 +88,6 @@
     Class<? extends AtmosphereInterceptor>[] interceptors() default {
             AtmosphereResourceLifecycleInterceptor.class,
             TrackMessageSizeInterceptor.class,
-            IdleResourceInterceptor.class,
             SuspendTrackerInterceptor.class
     };
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -273,9 +273,10 @@ public interface ApplicationConfig {
      */
     String DISABLE_ONSTATE_EVENT = "org.atmosphere.disableOnStateEvent";
     /**
-     * The maximum time, in milliseconds, a connection gets idle or when the WIFI disconnection wasn't detected by the underlying container.
+     * The maximum time, in milliseconds, a connection gets idle or when the WIFI disconnection wasn't detected by the underlying container. This property works with the
+     * {@link org.atmosphere.interceptor.IdleResourceInterceptor}, e.g you must install that interceptor in order to use the property.
      * <p>
-     * Default: -1 (disabled)<br>
+     * Default: 5 minutes<br>
      * Value: org.atmosphere.cpr.CometSupport.maxInactiveActivity
      */
     String MAX_INACTIVE = "org.atmosphere.cpr.CometSupport.maxInactiveActivity";

File: modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java
Patch:
@@ -49,9 +49,7 @@ public class IdleResourceInterceptor extends AtmosphereInterceptorAdapter {
     public void configure(AtmosphereConfig config) {
         this.config = config;
 
-        String maxInactive = config.getInitParameter(MAX_INACTIVE) != null ? config.getInitParameter(MAX_INACTIVE) :
-                config.getInitParameter(MAX_INACTIVE);
-
+        String maxInactive = config.getInitParameter(MAX_INACTIVE);
         if (maxInactive != null) {
             maxInactiveTime = Long.parseLong(maxInactive);
             if (maxInactiveTime <= 0) return;

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereServiceProcessor.java
Patch:
@@ -48,6 +48,7 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
         try {
             Class<?> aClass = annotatedClass;
             AtmosphereService a = aClass.getAnnotation(AtmosphereService.class);
+            framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
 
             atmosphereConfig(a.atmosphereConfig(), framework);
             framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
@@ -113,8 +114,6 @@ public void init(AtmosphereConfig config) throws ServletException {
             } else {
                 interceptors(a.interceptors(), framework);
             }
-
-            framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -43,6 +43,8 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
         try {
             Class<?> aClass = annotatedClass;
             ManagedService a = aClass.getAnnotation(ManagedService.class);
+            framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
+
             List<AtmosphereInterceptor> l = new ArrayList<AtmosphereInterceptor>();
 
             atmosphereConfig(a.atmosphereConfig(), framework);
@@ -68,7 +70,6 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
                 }
             }
             framework.addAtmosphereHandler(a.path(), handler, broadcaster(framework, a.broadcaster(), a.path()), l);
-            framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -46,6 +46,7 @@ public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass)
             List<AtmosphereInterceptor> l = new ArrayList<AtmosphereInterceptor>();
 
             MeteorService m = annotatedClass.getAnnotation(MeteorService.class);
+            framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
 
             String mapping = m.path();
 
@@ -71,7 +72,6 @@ public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass)
                 framework.interceptors().add(framework.newClassInstance(AtmosphereInterceptor.class, MeteorServiceInterceptor.class));
             }
             framework.addAtmosphereHandler(mapping, r, broadcaster(framework, m.broadcaster(), m.path()), l);
-            framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java
Patch:
@@ -101,14 +101,14 @@ public AsyncIOWriter flush(AtmosphereResponse response) throws IOException {
     }
 
     /**
-     * Add an {@link AsyncIOInterceptor} that will be invoked in the reverse order it was added.
+     * Add an {@link AsyncIOInterceptor} that will be invoked in the order it was added.
      *
      * @param filter {@link AsyncIOInterceptor
      * @return this
      */
     public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter) {
         if (!filters.contains(filter)) {
-            filters.addFirst(filter);
+            filters.addLast(filter);
         }
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -667,7 +667,7 @@ public interface ApplicationConfig {
      * Disables the list of {@link AtmosphereInterceptor}s.
      * <p>
      * Default: false<br>
-     * Value: org.atmosphere.cpr.AtmosphereInterceptor.disableDefaults
+     * Value: org.atmosphere.cpr.AtmosphereInterceptor.disable
      */
     String DISABLE_ATMOSPHEREINTERCEPTORS = AtmosphereInterceptor.class.getName() + ".disable";
 }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/InvokationOrder.java
Patch:
@@ -27,11 +27,11 @@ public interface InvokationOrder {
 
     enum PRIORITY {
         /**
-         * The AtmosphereInterceptor must be executed before the default set of AtmosphereInterceptor
+         * The AtmosphereInterceptor must be executed after the default set of AtmosphereInterceptor
          */
         AFTER_DEFAULT,
         /**
-         * The AtmosphereInterceptor must be executed after the default set of AtmosphereInterceptor
+         * The AtmosphereInterceptor must be executed before the default set of AtmosphereInterceptor
          */
         BEFORE_DEFAULT,
         /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java
Patch:
@@ -101,7 +101,7 @@ public AsyncIOWriter flush(AtmosphereResponse response) throws IOException {
     }
 
     /**
-     * Add an {@link AsyncIOInterceptor} that will be invoked in the order it was added.
+     * Add an {@link AsyncIOInterceptor} that will be invoked in the reverse order it was added.
      *
      * @param filter {@link AsyncIOInterceptor
      * @return this

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -995,7 +995,7 @@ protected boolean checkCachedAndPush(final AtmosphereResource r, final Atmospher
             // Must make sure execute only one thread
             synchronized (r) {
                 try {
-                    r.getRequest().setAttribute(CACHED, "true");
+                    rImpl.getRequest().setAttribute(CACHED, "true");
                     prepareInvokeOnStateChange(r, e);
                 } catch (Throwable t) {
                     // An exception occurred
@@ -1408,7 +1408,7 @@ protected void cacheAndSuspend(AtmosphereResource r) {
         if (!wasResumed && isAtmosphereResourceValid(r)) {
             logger.trace("Associating AtmosphereResource {} with Broadcaster {}", r.uuid(), getID());
 
-            String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
+            String parentUUID = (String) AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
             if (!backwardCompatible && parentUUID != null) {
                 AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);
                 if (p != null && !resources.contains(p)) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1937,7 +1937,7 @@ protected Map<String, String> configureQueryStringAsRequest(AtmosphereRequest re
                 String[] params = qs.split("&");
                 String[] s;
                 for (String p : params) {
-                    s = p.split("=");
+                    s = p.split("=", 2);;
                     if (s[0].equalsIgnoreCase("Content-Type")) {
                         // Use the one set by the user first.
                         if (request.getContentType() == null ||

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereServiceProcessor.java
Patch:
@@ -60,7 +60,7 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
             }
 
             if (!a.servlet().isEmpty()) {
-                final ReflectorServletProcessor r = framework.newClassInstance(AtmosphereHandler.class, ReflectorServletProcessor.class);
+                final ReflectorServletProcessor r = framework.newClassInstance(ReflectorServletProcessor.class, ReflectorServletProcessor.class);
                 r.setServletClassName(a.servlet());
 
                 String mapping = a.path();

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -54,7 +54,7 @@ public void handle(AtmosphereFramework framework, Class<Object> annotatedClass)
             }
 
             Object c = framework.newClassInstance(Object.class, aClass);
-            AtmosphereHandler handler = framework.newClassInstance(AtmosphereHandler.class,
+            AtmosphereHandler handler = framework.newClassInstance(ManagedAtmosphereHandler.class,
                     ManagedAtmosphereHandler.class).configure(framework.getAtmosphereConfig(), c);
             // MUST BE ADDED FIRST, ALWAYS!
             l.add(framework.newClassInstance(AtmosphereInterceptor.class, ManagedServiceInterceptor.class));

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -19,7 +19,6 @@
 import org.atmosphere.config.managed.MeteorServiceInterceptor;
 import org.atmosphere.config.service.MeteorService;
 import org.atmosphere.cpr.AtmosphereFramework;
-import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereInterceptor;
 import org.atmosphere.handler.ReflectorServletProcessor;
 import org.slf4j.Logger;
@@ -42,7 +41,7 @@ public class MeteorServiceProcessor implements Processor<Servlet> {
     @Override
     public void handle(AtmosphereFramework framework, Class<Servlet> annotatedClass) {
         try {
-            ReflectorServletProcessor r = framework.newClassInstance(AtmosphereHandler.class, ReflectorServletProcessor.class);
+            ReflectorServletProcessor r = framework.newClassInstance(ReflectorServletProcessor.class, ReflectorServletProcessor.class);
             r.setServletClassName(annotatedClass.getName());
             List<AtmosphereInterceptor> l = new ArrayList<AtmosphereInterceptor>();
 

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -116,7 +116,7 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                             try {
                                 boolean singleton = ap.target().getClass().getAnnotation(Singleton.class) != null;
                                 if (!singleton) {
-                                    ManagedAtmosphereHandler h = config.framework().newClassInstance(AtmosphereHandler.class, ManagedAtmosphereHandler.class);
+                                    ManagedAtmosphereHandler h = config.framework().newClassInstance(ManagedAtmosphereHandler.class, ManagedAtmosphereHandler.class);
                                     h.configure(config, config.framework().newClassInstance(Object.class, ap.target().getClass()));
                                     config.framework().addAtmosphereHandler(path, h,
                                             config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);

File: modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java
Patch:
@@ -20,7 +20,6 @@
 import org.atmosphere.cpr.Action;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereFramework.AtmosphereHandlerWrapper;
-import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereInterceptorAdapter;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
@@ -117,7 +116,7 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                                 boolean singleton = s.getClass().getAnnotation(Singleton.class) != null;
                                 if (!singleton) {
                                     ReflectorServletProcessor r =
-                                            config.framework().newClassInstance(AtmosphereHandler.class, ReflectorServletProcessor.class);
+                                            config.framework().newClassInstance(ReflectorServletProcessor.class, ReflectorServletProcessor.class);
                                     r.setServlet(config.framework().newClassInstance(Servlet.class, s.getClass()));
                                     r.init(config);
                                     config.framework().addAtmosphereHandler(path, r,

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1202,7 +1202,7 @@ protected boolean detectSupportedFramework(ServletConfig sc) throws Exception {
         // Jersey will itself handle the headers.
         //initParams.put(WRITE_HEADERS, "false");
 
-        ReflectorServletProcessor rsp = newClassInstance(AtmosphereHandler.class, ReflectorServletProcessor.class);
+        ReflectorServletProcessor rsp = newClassInstance(ReflectorServletProcessor.class, ReflectorServletProcessor.class);
         if (broadcasterClassNameTmp != null) broadcasterClassName = broadcasterClassNameTmp;
         rsp.setServletClassName(JERSEY_CONTAINER);
         sessionSupport(false);
@@ -2440,7 +2440,7 @@ public AtmosphereFramework addCustomAnnotationPackage(Class p) {
      * @throws InstantiationException
      * @throws IllegalAccessException
      */
-    public <T, U extends T> U newClassInstance(Class<T> classType, Class<U> defaultImplementation) throws InstantiationException, IllegalAccessException {
+    public <T, U extends T> T newClassInstance(Class<T> classType, Class<U> defaultImplementation) throws InstantiationException, IllegalAccessException {
         return objectFactory.newClassInstance(this, classType, defaultImplementation);
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereObjectFactory.java
Patch:
@@ -18,5 +18,5 @@ public interface AtmosphereObjectFactory {
      * @throws InstantiationException
      * @throws IllegalAccessException
      */
-	public <T, U extends T> U newClassInstance(AtmosphereFramework framework, Class<T> classType, Class<U> defaultImplementation) throws InstantiationException, IllegalAccessException;
+	public <T, U extends T> T newClassInstance(AtmosphereFramework framework, Class<T> classType, Class<U> defaultImplementation) throws InstantiationException, IllegalAccessException;
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -160,7 +160,7 @@ public final <T extends Broadcaster> T get(Class<T> c, Object id) {
     private <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) throws BroadcasterCreationException {
         try {
             //T b = c.getConstructor(String.class, AtmosphereConfig.class).newInstance(id.toString(), config);
-            T b = config.framework().newClassInstance(Broadcaster.class, c);
+            T b = config.framework().newClassInstance(c, c);
             b.initialize(id.toString(), legacyBroadcasterURI, config);
             b.setSuspendPolicy(defaultPolicyInteger, defaultPolicy);
 

File: modules/cpr/src/main/java/org/atmosphere/annotation/AnnotationUtil.java
Patch:
@@ -34,7 +34,7 @@ public class AnnotationUtil {
     public static void interceptors(Class<? extends AtmosphereInterceptor>[] interceptors, AtmosphereFramework framework) {
         for (Class i : interceptors) {
             try {
-                framework.interceptor((AtmosphereInterceptor) framework.newClassInstance(i));
+                framework.interceptor((AtmosphereInterceptor) framework.newClassInstance(AtmosphereInterceptor.class, i));
             } catch (Throwable e) {
                 logger.warn("", e);
             }
@@ -43,7 +43,7 @@ public static void interceptors(Class<? extends AtmosphereInterceptor>[] interce
 
     public static void filters(Class<? extends BroadcastFilter>[] bf, AtmosphereFramework framework) throws IllegalAccessException, InstantiationException {
         for (Class<? extends BroadcastFilter> b : bf) {
-            framework.broadcasterFilters(framework.newClassInstance(b));
+            framework.broadcasterFilters(framework.newClassInstance(BroadcastFilter.class, b));
         }
     }
 
@@ -65,7 +65,7 @@ public Action inspect(AtmosphereResource r) {
                         if (!r.isSuspended()) {
                             for (Class<? extends AtmosphereResourceEventListener> l : listeners) {
                                 try {
-                                    r.addEventListener(framework.newClassInstance(l));
+                                    r.addEventListener(framework.newClassInstance(AtmosphereResourceEventListener.class, l));
                                 } catch (Throwable e) {
                                     logger.warn("", e);
                                 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/AsyncSupportListenerServiceProcessor.java
Patch:
@@ -23,14 +23,14 @@
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(AsyncSupportListenerService.class)
-public class AsyncSupportListenerServiceProcessor implements Processor {
+public class AsyncSupportListenerServiceProcessor implements Processor<AsyncSupportListener> {
 
     private static final Logger logger = LoggerFactory.getLogger(AsyncSupportListenerServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<AsyncSupportListener> annotatedClass) {
         try {
-            framework.asyncSupportListener((AsyncSupportListener) framework.newClassInstance(annotatedClass));
+            framework.asyncSupportListener(framework.newClassInstance(AsyncSupportListener.class, annotatedClass));
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/AsyncSupportServiceProcessor.java
Patch:
@@ -17,18 +17,19 @@
 
 import org.atmosphere.config.AtmosphereAnnotation;
 import org.atmosphere.config.service.AsyncSupportService;
+import org.atmosphere.cpr.AsyncSupport;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.DefaultAsyncSupportResolver;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(AsyncSupportService.class)
-public class AsyncSupportServiceProcessor implements Processor {
+public class AsyncSupportServiceProcessor implements Processor<AsyncSupport> {
 
     private static final Logger logger = LoggerFactory.getLogger(AsyncSupportServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<AsyncSupport> annotatedClass) {
         try {
             framework.setAsyncSupport(new DefaultAsyncSupportResolver(framework.getAtmosphereConfig()).newCometSupport(annotatedClass.getName()));
         } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereInterceptorServiceProcessor.java
Patch:
@@ -23,14 +23,14 @@
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(AtmosphereInterceptorService.class)
-public class AtmosphereInterceptorServiceProcessor implements Processor {
+public class AtmosphereInterceptorServiceProcessor implements Processor<AtmosphereInterceptor> {
 
     private static final Logger logger = LoggerFactory.getLogger(AtmosphereInterceptorServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<AtmosphereInterceptor> annotatedClass) {
         try {
-            AtmosphereInterceptor a = (AtmosphereInterceptor) framework.newClassInstance(annotatedClass);
+            AtmosphereInterceptor a = (AtmosphereInterceptor) framework.newClassInstance(AtmosphereInterceptor.class, annotatedClass);
             framework.interceptor(a);
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcastFilterServiceProcessor.java
Patch:
@@ -23,14 +23,14 @@
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(BroadcasterFilterService.class)
-public class BroadcastFilterServiceProcessor implements Processor {
+public class BroadcastFilterServiceProcessor implements Processor<BroadcastFilter> {
 
     private static final Logger logger = LoggerFactory.getLogger(BroadcastFilterServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<BroadcastFilter> annotatedClass) {
         try {
-            framework.broadcasterFilters((BroadcastFilter) framework.newClassInstance(annotatedClass));
+            framework.broadcasterFilters((BroadcastFilter) framework.newClassInstance(BroadcastFilter.class, annotatedClass));
         } catch (Exception e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterCacheServiceProcessor.java
Patch:
@@ -18,12 +18,13 @@
 import org.atmosphere.config.AtmosphereAnnotation;
 import org.atmosphere.config.service.BroadcasterCacheService;
 import org.atmosphere.cpr.AtmosphereFramework;
+import org.atmosphere.cpr.BroadcasterCache;
 
 @AtmosphereAnnotation(BroadcasterCacheService.class)
-public class BroadcasterCacheServiceProcessor implements Processor {
+public class BroadcasterCacheServiceProcessor implements Processor<BroadcasterCache> {
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<BroadcasterCache> annotatedClass) {
         framework.setBroadcasterCacheClassName(annotatedClass.getName());
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterFactoryServiceProcessor.java
Patch:
@@ -23,15 +23,15 @@
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(BroadcasterFactoryService.class)
-public class BroadcasterFactoryServiceProcessor implements Processor {
+public class BroadcasterFactoryServiceProcessor implements Processor<BroadcasterFactory> {
 
     private static final Logger logger = LoggerFactory.getLogger(BroadcasterFactoryServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<BroadcasterFactory> annotatedClass) {
         try {
             Class<BroadcasterFactory> bf = (Class<BroadcasterFactory>) annotatedClass;
-            framework.setBroadcasterFactory(framework.newClassInstance(bf));
+            framework.setBroadcasterFactory(framework.newClassInstance(BroadcasterFactory.class, bf));
             framework.configureBroadcasterFactory();
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterListenerServiceProcessor.java
Patch:
@@ -23,14 +23,14 @@
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(BroadcasterListenerService.class)
-public class BroadcasterListenerServiceProcessor implements Processor {
+public class BroadcasterListenerServiceProcessor implements Processor<BroadcasterListener> {
 
     private static final Logger logger = LoggerFactory.getLogger(BroadcasterListenerServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<BroadcasterListener> annotatedClass) {
         try {
-            framework.addBroadcasterListener((BroadcasterListener) framework.newClassInstance(annotatedClass));
+            framework.addBroadcasterListener((BroadcasterListener) framework.newClassInstance(BroadcasterListener.class, annotatedClass));
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterServiceProcessor.java
Patch:
@@ -18,12 +18,13 @@
 import org.atmosphere.config.AtmosphereAnnotation;
 import org.atmosphere.config.service.BroadcasterService;
 import org.atmosphere.cpr.AtmosphereFramework;
+import org.atmosphere.cpr.Broadcaster;
 
 @AtmosphereAnnotation(BroadcasterService.class)
-public class BroadcasterServiceProcessor implements Processor {
+public class BroadcasterServiceProcessor implements Processor<Broadcaster> {
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<Broadcaster> annotatedClass) {
         framework.setDefaultBroadcasterClassName(annotatedClass.getName());
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/EndpointMapperServiceProcessor.java
Patch:
@@ -23,14 +23,14 @@
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(EndpointMapperService.class)
-public class EndpointMapperServiceProcessor implements Processor {
+public class EndpointMapperServiceProcessor implements Processor<EndpointMapper> {
 
     private static final Logger logger = LoggerFactory.getLogger(EndpointMapperServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<EndpointMapper> annotatedClass) {
         try {
-            framework.endPointMapper((EndpointMapper<?>) framework.newClassInstance(annotatedClass));
+            framework.endPointMapper((EndpointMapper<?>) framework.newClassInstance(EndpointMapper.class, annotatedClass));
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/Processor.java
Patch:
@@ -22,14 +22,14 @@
  * when the {@link org.atmosphere.cpr.AtmosphereFramework#init()} executes. Classes implementing this interface will
  * have a chance to process annotated classes and take the appropriate action.
  */
-public interface Processor {
+public interface Processor<T> {
 
     /**
      * Invoked by the {@link org.atmosphere.cpr.AnnotationHandler} when an annotation is detected.
      *
      * @param framework      the {@link org.atmosphere.cpr.AtmosphereFramework}
      * @param annotatedClass the annotated classes.
      */
-    public void handle(final AtmosphereFramework framework, final Class<?> annotatedClass);
+    public void handle(final AtmosphereFramework framework, final Class<T> annotatedClass);
 
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketProcessorServiceProcessor.java
Patch:
@@ -18,16 +18,17 @@
 import org.atmosphere.config.AtmosphereAnnotation;
 import org.atmosphere.config.service.WebSocketProcessorService;
 import org.atmosphere.cpr.AtmosphereFramework;
+import org.atmosphere.websocket.WebSocketProcessor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 @AtmosphereAnnotation(WebSocketProcessorService.class)
-public class WebSocketProcessorServiceProcessor implements Processor {
+public class WebSocketProcessorServiceProcessor implements Processor<WebSocketProcessor> {
 
     private static final Logger logger = LoggerFactory.getLogger(WebSocketProcessorServiceProcessor.class);
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<WebSocketProcessor> annotatedClass) {
         try {
             framework.setWebsocketProcessorClassName(annotatedClass.getName());
         } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketProtocolServiceProcessor.java
Patch:
@@ -18,12 +18,13 @@
 import org.atmosphere.config.AtmosphereAnnotation;
 import org.atmosphere.config.service.WebSocketProtocolService;
 import org.atmosphere.cpr.AtmosphereFramework;
+import org.atmosphere.websocket.WebSocketProtocol;
 
 @AtmosphereAnnotation(WebSocketProtocolService.class)
-public class WebSocketProtocolServiceProcessor implements Processor {
+public class WebSocketProtocolServiceProcessor implements Processor<WebSocketProtocol> {
 
     @Override
-    public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+    public void handle(AtmosphereFramework framework, Class<WebSocketProtocol> annotatedClass) {
         framework.setWebSocketProtocolClassName(annotatedClass.getName());
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.Action;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereFramework.AtmosphereHandlerWrapper;
+import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereInterceptorAdapter;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
@@ -96,7 +97,7 @@ public Action inspect(AtmosphereResource r) {
                     try {
                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;
                         if (!singleton) {
-                            config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()),
+                            config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(AtmosphereHandler.class, w.atmosphereHandler.getClass()),
                                     config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
                         } else {
                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -235,7 +235,7 @@ private void populateEncoders() {
             List<Encoder<?, ?>> l = new CopyOnWriteArrayList<Encoder<?, ?>>();
             for (Class<? extends Encoder> s : m.method.getAnnotation(Message.class).encoders()) {
                 try {
-                    l.add(config.framework().newClassInstance(s));
+                    l.add(config.framework().newClassInstance(Encoder.class, s));
                 } catch (Exception e) {
                     logger.error("Unable to load encoder {}", s);
                 }
@@ -247,7 +247,7 @@ private void populateEncoders() {
             List<Encoder<?, ?>> l = new CopyOnWriteArrayList<Encoder<?, ?>>();
             for (Class<? extends Encoder> s : onReadyMethod.getAnnotation(Ready.class).encoders()) {
                 try {
-                    l.add(config.framework().newClassInstance(s));
+                    l.add(config.framework().newClassInstance(Encoder.class, s));
                 } catch (Exception e) {
                     logger.error("Unable to load encoder {}", s);
                 }
@@ -261,7 +261,7 @@ private void populateDecoders() {
             List<Decoder<?, ?>> l = new CopyOnWriteArrayList<Decoder<?, ?>>();
             for (Class<? extends Decoder> s : m.method.getAnnotation(Message.class).decoders()) {
                 try {
-                    l.add(config.framework().newClassInstance(s));
+                    l.add(config.framework().newClassInstance(Decoder.class, s));
                 } catch (Exception e) {
                     logger.error("Unable to load encoder {}", s);
                 }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -116,8 +116,8 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                             try {
                                 boolean singleton = ap.target().getClass().getAnnotation(Singleton.class) != null;
                                 if (!singleton) {
-                                    ManagedAtmosphereHandler h = config.framework().newClassInstance(ManagedAtmosphereHandler.class);
-                                    h.configure(config, config.framework().newClassInstance(ap.target().getClass()));
+                                    ManagedAtmosphereHandler h = config.framework().newClassInstance(AtmosphereHandler.class, ManagedAtmosphereHandler.class);
+                                    h.configure(config, config.framework().newClassInstance(Object.class, ap.target().getClass()));
                                     config.framework().addAtmosphereHandler(path, h,
                                             config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);
                                 } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationHandler.java
Patch:
@@ -67,7 +67,7 @@ public AnnotationHandler handleAnnotation(final AtmosphereFramework framework, f
             Processor p = processors.get(a);
             if (p == null) {
                 try {
-                    p = framework.newClassInstance(a);
+                    p = framework.newClassInstance(Processor.class, a);
                 } catch (Exception e) {
                     logger.warn("Unable to create Processor {}", p);
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java
Patch:
@@ -75,7 +75,7 @@ public final AtmosphereResource create(AtmosphereConfig config,
                                            AsyncSupport<?> a) {
         AtmosphereResource r = null;
         try {
-            r = config.framework().newClassInstance(AtmosphereResourceImpl.class);
+            r = config.framework().newClassInstance(AtmosphereResource.class, AtmosphereResourceImpl.class);
             r.initialize(config, null, request, response, a, voidAtmosphereHandler);
         } catch (Exception e) {
             logger.error("", e);
@@ -101,7 +101,7 @@ public final AtmosphereResource create(AtmosphereConfig config,
                                            AtmosphereHandler handler) {
         AtmosphereResource r = null;
         try {
-            r = config.framework().newClassInstance(AtmosphereResourceImpl.class);
+            r = config.framework().newClassInstance(AtmosphereResource.class, AtmosphereResourceImpl.class);
             r.initialize(config, broadcaster, request, response, a, handler);
         } catch (Exception e) {
             logger.error("", e);
@@ -140,7 +140,7 @@ public final AtmosphereResource create(AtmosphereConfig config,
                                            AsyncSupport<?> a) {
         AtmosphereResource r = null;
         try {
-            r = config.framework().newClassInstance(AtmosphereResourceImpl.class);
+            r = config.framework().newClassInstance(AtmosphereResource.class, AtmosphereResourceImpl.class);
             r.initialize(config, null, response.request(), response, a, voidAtmosphereHandler);
         } catch (Exception e) {
             logger.error("", e);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -269,7 +269,7 @@ public void setScope(SCOPE scope) {
                      * REQUEST_SCOPE means one BroadcasterCache per Broadcaster,
                      */
                     if (DefaultBroadcaster.class.isAssignableFrom(this.getClass())) {
-                        BroadcasterCache cache = config.framework().newClassInstance(bc.getBroadcasterCache().getClass());
+                        BroadcasterCache cache = config.framework().newClassInstance(BroadcasterCache.class, bc.getBroadcasterCache().getClass());
                         b.getBroadcasterConfig().setBroadcasterCache(cache);
                     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -160,7 +160,7 @@ public final <T extends Broadcaster> T get(Class<T> c, Object id) {
     private <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) throws BroadcasterCreationException {
         try {
             //T b = c.getConstructor(String.class, AtmosphereConfig.class).newInstance(id.toString(), config);
-            T b = config.framework().newClassInstance(c);
+            T b = config.framework().newClassInstance(Broadcaster.class, c);
             b.initialize(id.toString(), legacyBroadcasterURI, config);
             b.setSuspendPolicy(defaultPolicyInteger, defaultPolicy);
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -236,7 +236,7 @@ protected WebSocketHandler postProcessMapping(WebSocket webSocket, AtmosphereReq
                                 boolean singleton = w.proxied.getClass().getAnnotation(Singleton.class) != null;
                                 if (!singleton) {
                                     registerWebSocketHandler(path, new WebSocketHandlerProxy(a.broadcaster(),
-                                            framework.newClassInstance(w.proxied.getClass())));
+                                            framework.newClassInstance(WebSocketHandler.class, w.proxied.getClass())));
                                 } else {
                                     registerWebSocketHandler(path, new WebSocketHandlerProxy(a.broadcaster(), w));
                                 }

File: modules/cpr/src/test/java/org/atmosphere/annotation/custom/CustomAnnotationTest.java
Patch:
@@ -102,13 +102,13 @@ public void after() {
     }
 
     @AtmosphereAnnotation(MyAnnotation.class)
-    public final static class MyAnnotationProcessor implements Processor {
+    public final static class MyAnnotationProcessor implements Processor<Object> {
 
         @Override
-        public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
+        public void handle(AtmosphereFramework framework, Class<Object> annotatedClass) {
             MyAnnotation a = annotatedClass.getAnnotation(MyAnnotation.class);
             try {
-                framework.addAtmosphereHandler(a.value(), (AtmosphereHandler) framework.newClassInstance(annotatedClass));
+                framework.addAtmosphereHandler(a.value(), (AtmosphereHandler) framework.newClassInstance(Object.class, annotatedClass));
             } catch (InstantiationException e) {
                 e.printStackTrace();
             } catch (IllegalAccessException e) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -878,7 +878,7 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
             }
 
             for (Class<? extends AtmosphereInterceptor> a : defaultInterceptors) {
-                if (!s.contains(a.getName())) {
+                if (!disables.contains(a.getName())) {
                     interceptors.addFirst(newAInterceptor(a));
                 } else {
                     logger.info("Dropping Interceptor {}", a.getName());

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -34,6 +34,7 @@
 import org.atmosphere.handler.AbstractReflectorAtmosphereHandler;
 import org.atmosphere.handler.AnnotatedProxy;
 import org.atmosphere.util.IOUtils;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -106,7 +107,7 @@ public ManagedAtmosphereHandler configure(AtmosphereConfig config, Object c) {
     public void onRequest(final AtmosphereResource resource) throws IOException {
         AtmosphereRequest request = resource.getRequest();
         String method = request.getMethod();
-        boolean polling = resource.transport().equals(AtmosphereResource.TRANSPORT.POLLING);
+        boolean polling = Utils.pollableTransport(resource.transport());
 
         if (onReadyMethod != null && !polling) {
             resource.addEventListener(new OnSuspend() {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -27,6 +27,7 @@
 import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.cpr.BroadcasterListenerAdapter;
 import org.atmosphere.util.ExecutorsFactory;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -93,8 +94,7 @@ public void run() {
     @Override
     public Action inspect(final AtmosphereResource r) {
 
-        if (!r.transport().equals(AtmosphereResource.TRANSPORT.POLLING)
-                && !r.transport().equals(AtmosphereResource.TRANSPORT.AJAX)) {
+        if (!Utils.pollableTransport(r.transport())){
 
             final BroadcasterTracker tracker = track(r).tick();
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInitializer.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.container.JSR356AsyncSupport;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -79,7 +80,7 @@ public void requestDestroyed(ServletRequestEvent sre) {
                 @Override
                 public void requestInitialized(ServletRequestEvent sre) {
                     HttpServletRequest r = HttpServletRequest.class.cast(sre.getServletRequest());
-                    if (framework.getAtmosphereConfig().isSupportSession() && r.getHeader("Upgrade") != null) {
+                    if (framework.getAtmosphereConfig().isSupportSession() && Utils.webSocketEnabled(r)) {
                         r.getSession(true);
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -67,6 +67,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                 }
             }
             framework.addAtmosphereHandler(a.path(), handler, broadcaster(framework, a.broadcaster(), a.path()), l);
+            framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -153,12 +153,14 @@ public void destroy() {
     }
 
     @Test
-    public void basicBackwardCompatbileWorkflow() throws IOException, ServletException, ExecutionException, InterruptedException {
+    public void basicBackwardCompatbileWorkflow() throws Throwable {
         ByteArrayOutputStream b = new ByteArrayOutputStream();
         final WebSocket w = new ArrayBaseWebSocket(b);
         final WebSocketProcessor processor = WebSocketProcessorFactory.getDefault()
                 .getWebSocketProcessor(framework);
 
+        framework.getBroadcasterFactory().remove("/*");
+
         framework.addInitParameter(ApplicationConfig.BACKWARD_COMPATIBLE_WEBSOCKET_BEHAVIOR, "true")
                 .addAtmosphereHandler("/*", new AtmosphereHandler() {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventListenerAdapter.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class AtmosphereResourceEventListenerAdapter implements AtmosphereResourceEventListener {
 
-    private final static Logger logger = LoggerFactory.getLogger(AtmosphereResourceEventListener.class);
+    private final static Logger logger = LoggerFactory.getLogger(AtmosphereResourceEventListenerAdapter.class);
 
     @Override
     public void onPreSuspend(AtmosphereResourceEvent event) {

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java
Patch:
@@ -76,7 +76,7 @@ protected void onSocketOpened(WebSocket socket) throws IOException {
     @Override
     protected void onSocketClosed(WebSocket socket) throws IOException {
         logger.trace("WebSocket.onSocketClosed.");
-        webSocketProcessor.close(webSocket, 0);
+        webSocketProcessor.close(webSocket, 1000);
     }
 
     @Override
@@ -95,7 +95,7 @@ protected void onReceivedFrame(WebSocket socket) throws IOException {
             } else if (frame instanceof CloseFrame) {
                 // TODO shall we call this here?
                 logger.trace("WebSocket.onReceivedFrame (CloseFrame)");
-                webSocketProcessor.close(webSocket, 0);
+                webSocketProcessor.close(webSocket, 1000);
             } else {
                 logger.trace("WebSocket.onReceivedFrame skipping: " + frame);
             }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/IdleResourceInterceptor.java
Patch:
@@ -82,6 +82,8 @@ protected void idleResources() {
                         req.removeAttribute(HeartbeatInterceptor.HEARTBEAT_FUTURE);
 
                         Object o = req.getAttribute(ASYNCHRONOUS_HOOK);
+                        req.setAttribute(ASYNCHRONOUS_HOOK, null);
+
                         AsynchronousProcessor.AsynchronousProcessorHook h;
                         if (o != null && AsynchronousProcessor.AsynchronousProcessorHook.class.isAssignableFrom(o.getClass())) {
                             h = (AsynchronousProcessor.AsynchronousProcessorHook) o;

File: modules/cpr/src/main/java/org/atmosphere/config/service/ManagedService.java
Patch:
@@ -49,8 +49,7 @@
         interceptors = {
             AtmosphereResourceLifecycleInterceptor.class,
             TrackMessageSizeInterceptor.class,
-            SuspendTrackerInterceptor.class,
-            AnnotationServiceInterceptor.class})
+            SuspendTrackerInterceptor.class})
  * </blockquote></pre>
  *
  * This annotation can be used with @Get, @Post, @Delete, @Ready, @Singleton and @Resume

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -196,7 +196,7 @@ public WebSocket write(AtmosphereResponse r, byte[] b, int offset, int length) t
 
         logger.trace("WebSocket.write()");
         boolean transform = filters.size() > 0 && r.getStatus() < 400;
-        if (binaryWrite || r.resource().forceBinaryWrite()) {
+        if (binaryWrite || resource().forceBinaryWrite()) {
             if (transform) {
                 b = transform(b, offset, length);
             }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -468,7 +468,7 @@ public void close(WebSocket webSocket, int closeCode) {
 
                     Object o = r.getAttribute(ASYNCHRONOUS_HOOK);
                     AsynchronousProcessor.AsynchronousProcessorHook h;
-                    if (o != null && AsynchronousProcessor.class.isAssignableFrom(o.getClass())) {
+                    if (o != null && AsynchronousProcessor.AsynchronousProcessorHook.class.isAssignableFrom(o.getClass())) {
                         h = (AsynchronousProcessor.AsynchronousProcessorHook) o;
                         if (!resource.isCancelled()) {
                             if (closeCode == 1005) {

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereService.java
Patch:
@@ -67,8 +67,7 @@
      * {@link org.atmosphere.client.TrackMessageSizeInterceptor} and {@link org.atmosphere.interceptor.HeartbeatInterceptor}
      */
     Class<? extends AtmosphereInterceptor>[] interceptors() default {
-            TrackMessageSizeInterceptor.class,
-            HeartbeatInterceptor.class
+            TrackMessageSizeInterceptor.class
     };
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/config/service/ManagedService.java
Patch:
@@ -39,7 +39,6 @@
  *     <li>The {@link org.atmosphere.cache.UUIDBroadcasterCache}for caching message. </li>
  *     <li>The {@link org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor} for managing the connection lifecycle</li>
  *     <li>The {@link org.atmosphere.client.TrackMessageSizeInterceptor} for making sure messages are delivered entirely</li>
- *     <li>The {@link org.atmosphere.interceptor.HeartbeatInterceptor} for keeping the connection active</li>
  * </ul>
  *
  * Annotating your {@link org.atmosphere.cpr.AtmosphereHandler} is the same as doing:
@@ -50,7 +49,6 @@
         interceptors = {
             AtmosphereResourceLifecycleInterceptor.class,
             TrackMessageSizeInterceptor.class,
-            HeartbeatInterceptor.class,
             SuspendTrackerInterceptor.class,
             AnnotationServiceInterceptor.class})
  * </blockquote></pre>
@@ -89,7 +87,6 @@
     Class<? extends AtmosphereInterceptor>[] interceptors() default {
             AtmosphereResourceLifecycleInterceptor.class,
             TrackMessageSizeInterceptor.class,
-            HeartbeatInterceptor.class,
             SuspendTrackerInterceptor.class
     };
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -53,6 +53,7 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.interceptor.AllowInterceptor;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -351,7 +352,7 @@ public AtmosphereResource suspend(long timeout) {
                     "response longer than the session timeout. Increase the value of session-timeout in web.xml");
         }
 
-        if (transport().equals(TRANSPORT.JSONP) || transport().equals(TRANSPORT.LONG_POLLING)) {
+        if (Utils.resumableTransport(transport())) {
             resumeOnBroadcast.set(true);
         }
 
@@ -409,8 +410,7 @@ public AtmosphereResource suspend(long timeout) {
             }
 
             broadcaster.addAtmosphereResource(this);
-            if (req.getAttribute(DefaultBroadcaster.CACHED) != null && transport() != null && (
-                    transport().equals(TRANSPORT.LONG_POLLING) || transport().equals(TRANSPORT.JSONP))) {
+            if (req.getAttribute(DefaultBroadcaster.CACHED) != null && transport() != null && Utils.resumableTransport(transport())) {
                 action.type(Action.TYPE.CONTINUE);
                 // Do nothing because we have found cached message which was written already, and the handler resumed.
                 logger.debug("Cached message found, not suspending {}", uuid());

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -25,6 +25,7 @@
 import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.HeaderConfig;
+import org.atmosphere.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -80,7 +81,7 @@ public Action inspect(final AtmosphereResource r) {
                 protocolMessage.set((String) f.filter(r, protocolMessage.get(), protocolMessage.get()).message());
             }
 
-            if (r.transport() != AtmosphereResource.TRANSPORT.LONG_POLLING && r.transport() != AtmosphereResource.TRANSPORT.JSONP) {
+            if (!Utils.resumableTransport(r.transport())) {
                 AtmosphereResourceEventListenerAdapter a = new AtmosphereResourceEventListenerAdapter() {
                     @Override
                     public void onSuspend(AtmosphereResourceEvent event) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/CacheHeadersInterceptor.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class DefaultHeadersInterceptor extends AtmosphereInterceptorAdapter {
+public class CacheHeadersInterceptor extends AtmosphereInterceptorAdapter {
 
     private boolean injectCacheHeaders;
     private boolean writeHeaders;

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -104,8 +104,9 @@ public ManagedAtmosphereHandler configure(AtmosphereConfig config, Object c) {
     public void onRequest(final AtmosphereResource resource) throws IOException {
         AtmosphereRequest request = resource.getRequest();
         String method = request.getMethod();
+        boolean polling = resource.transport().equals(AtmosphereResource.TRANSPORT.POLLING);
 
-        if (onReadyMethod != null) {
+        if (onReadyMethod != null && !polling) {
             resource.addEventListener(new AtmosphereResourceEventListenerAdapter() {
                 @Override
                 public void onSuspend(AtmosphereResourceEvent event) {
@@ -115,7 +116,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
             });
         }
 
-        if (onResumeMethod != null) {
+        if (onResumeMethod != null && !polling) {
             resource.addEventListener(new AtmosphereResourceEventListenerAdapter() {
                 @Override
                 public void onResume(AtmosphereResourceEvent event) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/ProtocolUtil.java
Patch:
@@ -19,8 +19,8 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.FrameworkConfig;
 
-import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 public class ProtocolUtil {
 
@@ -48,7 +48,7 @@ protected static AtmosphereRequest.Builder constructRequest(AtmosphereResource r
     }
 
     private static Map<String, Object> attributes(AtmosphereRequest request) {
-        Map<String, Object> m = new HashMap<String, Object>();
+        Map<String, Object> m = new ConcurrentHashMap<String, Object>();
         m.put(FrameworkConfig.WEBSOCKET_SUBPROTOCOL, FrameworkConfig.SIMPLE_HTTP_OVER_WEBSOCKET);
         m.putAll(request.attributes());
         return m;

File: modules/cpr/src/main/java/org/atmosphere/annotation/AnnotationUtil.java
Patch:
@@ -51,6 +51,7 @@ public static void atmosphereConfig(String[] m, AtmosphereFramework framework) {
         for (String s : m) {
             String[] nv = s.split("=");
             framework.addInitParameter(nv[0], nv[1]);
+            framework.reconfigureInitParams(true);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -42,9 +42,9 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             Class<WebSocketHandler> s = (Class<WebSocketHandler>) annotatedClass;
             WebSocketHandlerService m = s.getAnnotation(WebSocketHandlerService.class);
 
+            atmosphereConfig(m.atmosphereConfig(), framework);
             framework.addAtmosphereHandler(m.path(), AtmosphereFramework.REFLECTOR_ATMOSPHEREHANDLER).initWebSocket();
 
-            atmosphereConfig(m.atmosphereConfig(), framework);
             framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
             filters(m.broadcastFilters(), framework);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -40,6 +40,7 @@
 import org.atmosphere.util.DefaultEndpointMapper;
 import org.atmosphere.util.EndpointMapper;
 import org.atmosphere.util.IntrospectionUtils;
+import org.atmosphere.util.ServletContextFactory;
 import org.atmosphere.util.ServletProxyFactory;
 import org.atmosphere.util.Version;
 import org.atmosphere.util.analytics.FocusPoint;
@@ -659,6 +660,7 @@ public Enumeration<String> getInitParameterNames() {
                 scFacade = sc;
             }
             this.servletConfig = scFacade;
+            ServletContextFactory.getDefault().init(sc.getServletContext());
 
             preventOOM();
             doInitParams(scFacade);

File: modules/cpr/src/main/java/org/atmosphere/annotation/EndpointMapperServiceProcessor.java
Patch:
@@ -16,13 +16,13 @@
 package org.atmosphere.annotation;
 
 import org.atmosphere.config.AtmosphereAnnotation;
-import org.atmosphere.config.service.EndpoinMapperService;
+import org.atmosphere.config.service.EndpointMapperService;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.util.EndpointMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-@AtmosphereAnnotation(EndpoinMapperService.class)
+@AtmosphereAnnotation(EndpointMapperService.class)
 public class EndpointMapperServiceProcessor implements Processor {
 
     private static final Logger logger = LoggerFactory.getLogger(EndpointMapperServiceProcessor.class);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationScanningServletContainerInitializer.java
Patch:
@@ -12,7 +12,7 @@
 import org.atmosphere.config.service.BroadcasterFilterService;
 import org.atmosphere.config.service.BroadcasterListenerService;
 import org.atmosphere.config.service.BroadcasterService;
-import org.atmosphere.config.service.EndpoinMapperService;
+import org.atmosphere.config.service.EndpointMapperService;
 import org.atmosphere.config.service.ManagedService;
 import org.atmosphere.config.service.MeteorService;
 import org.atmosphere.config.service.WebSocketHandlerService;
@@ -54,7 +54,7 @@
         BroadcasterCacheInspectorService.class,
         ManagedService.class,
         AtmosphereService.class,
-        EndpoinMapperService.class,
+        EndpointMapperService.class,
         AtmosphereAnnotation.class
 })
 public class AnnotationScanningServletContainerInitializer implements ServletContainerInitializer {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -27,7 +27,7 @@
 import org.atmosphere.config.service.BroadcasterFilterService;
 import org.atmosphere.config.service.BroadcasterListenerService;
 import org.atmosphere.config.service.BroadcasterService;
-import org.atmosphere.config.service.EndpoinMapperService;
+import org.atmosphere.config.service.EndpointMapperService;
 import org.atmosphere.config.service.ManagedService;
 import org.atmosphere.config.service.MeteorService;
 import org.atmosphere.config.service.WebSocketHandlerService;
@@ -81,7 +81,7 @@ public class DefaultAnnotationProcessor implements AnnotationProcessor {
             BroadcasterCacheInspectorService.class,
             ManagedService.class,
             AtmosphereService.class,
-            EndpoinMapperService.class,
+            EndpointMapperService.class,
             AtmosphereAnnotation.class
     };
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2198,8 +2198,6 @@ public AtmosphereFramework shareExecutorServices(boolean sharedThreadPools) {
     }
 
     protected void autoConfigureService(ServletContext sc) throws IOException {
-        final ClassLoader cl = Thread.currentThread().getContextClassLoader();
-
         String path = handlersPath != DEFAULT_HANDLER_PATH ? handlersPath : sc.getRealPath(handlersPath);
         try {
             annotationProcessor = (AnnotationProcessor) newClassInstance(getClass().getClassLoader().loadClass(annotationProcessorClassName));

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9AsyncSupportWithWebSocket.java
Patch:
@@ -81,7 +81,7 @@ public Jetty9AsyncSupportWithWebSocket(final AtmosphereConfig config) {
                 if (isJetty91) {
                     m = policy.getClass().getMethod("setMaxTextMessageSize", new Class[]{int.class});
                 } else {
-                    m = policy.getClass().getMethod("setMaxMessageSize", new Class[]{int.class});
+                    m = policy.getClass().getMethod("setMaxMessageSize", new Class[]{long.class});
                 }
                 m.invoke(policy, Integer.parseInt(max));
             }
@@ -93,7 +93,7 @@ public Jetty9AsyncSupportWithWebSocket(final AtmosphereConfig config) {
                 if (isJetty91) {
                     m = policy.getClass().getMethod("setMaxBinaryMessageSize", new Class[]{int.class});
                 } else {
-                    m = policy.getClass().getMethod("setMaxMessageSize", new Class[]{int.class});
+                    m = policy.getClass().getMethod("setMaxMessageSize", new Class[]{long.class});
                 }
                 m.invoke(policy, Integer.parseInt(max));
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -483,7 +483,6 @@ public boolean completeLifecycle(final AtmosphereResource r, boolean cancelled)
                             e.setCancelled(true);
                         } else {
                             e.setIsResumedOnTimeout(true);
-
                             Broadcaster b = r.getBroadcaster();
                             if (b instanceof DefaultBroadcaster) {
                                 ((DefaultBroadcaster) b).broadcastOnResume(r);

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -170,8 +170,6 @@ protected void prepareInvokeOnStateChange(final AtmosphereResource r, final Atmo
 
     @Override
     protected void queueWriteIO(AtmosphereResource r, Entry entry) throws InterruptedException {
-        synchronized (r) {
-            executeAsyncWrite(new AsyncWriteToken(r, entry.message, entry.future, entry.originalMessage, entry.cache));
-        }
+        executeBlockingWrite(r, entry);
     }
 }
\ No newline at end of file

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -52,7 +52,7 @@ public final static void broadcast(final AtmosphereResource r, final AtmosphereR
         // or if ContainerResponse is associated with more than Broadcaster.
         cr = (ContainerResponse) request.getAttribute(FrameworkConfig.CONTAINER_RESPONSE);
 
-        if (cr == null || !r.isSuspended()) {
+        if (cr == null || !r.isSuspended() && !r.getAtmosphereResourceEvent().isResumedOnTimeout()) {
             if (cr == null) {
                 logger.warn("Unexpected state. ContainerResponse has been resumed. Caching message {} for {}",
                         e.getMessage(), r.uuid());

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -197,9 +197,10 @@ public void onTimeout(AsyncEvent event) throws IOException {
             try {
                 p.timedout((AtmosphereRequest) event.getAsyncContext().getRequest(),
                         (AtmosphereResponse) event.getAsyncContext().getResponse());
-                event.getAsyncContext().complete();
             } catch (ServletException ex) {
                 logger.warn("onTimeout(): failed timing out comet response: " + event.getAsyncContext().getResponse(), ex);
+            }  finally {
+                event.getAsyncContext().complete();
             }
         }
 

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -197,6 +197,7 @@ public void onTimeout(AsyncEvent event) throws IOException {
             try {
                 p.timedout((AtmosphereRequest) event.getAsyncContext().getRequest(),
                         (AtmosphereResponse) event.getAsyncContext().getResponse());
+                event.getAsyncContext().complete();
             } catch (ServletException ex) {
                 logger.warn("onTimeout(): failed timing out comet response: " + event.getAsyncContext().getResponse(), ex);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -39,9 +39,8 @@ public void sessionDestroyed(HttpSessionEvent se) {
         logger.trace("Session destroyed");
         try {
             HttpSession s = se.getSession();
-            BroadcasterFactory factory = BroadcasterFactory.getDefault();
-            if (factory != null) {
-               for (Broadcaster b : factory.lookupAll()) {
+            if (BroadcasterFactory.getDefault() != null) {
+                for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {
                     for (AtmosphereResource r : b.getAtmosphereResources()) {
                         if (r.session() != null && r.session().getId().equals(s.getId())) {
                             AtmosphereResourceImpl.class.cast(r).session(null);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -600,7 +600,7 @@ protected void spawnReactor() {
             asyncWriteFuture = new Future<?>[threads];
             for (int i = 0; i < threads; i++) {
                 notifierFuture[i] = bc.getExecutorService().submit(getBroadcastHandler());
-                asyncWriteFuture[i] = bc.getExecutorService().submit(getAsyncWriteHandler(uniqueWriteQueue));
+                asyncWriteFuture[i] = bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue));
             }
         } else {
             notifierFuture[0] = bc.getExecutorService().submit(getBroadcastHandler());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -257,7 +257,7 @@ public boolean resumeOnBroadcast() {
     public AtmosphereResource resume() {
 
         if (!isSuspended()) {
-            logger.warn("AtmosphereResource {} not suspend, cannot resume it.", uuid());
+            logger.trace("AtmosphereResource {} not suspended {}, cannot resume it.", uuid(), action);
             return this;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -35,6 +35,7 @@
 import org.atmosphere.interceptor.OnDisconnectInterceptor;
 import org.atmosphere.interceptor.PaddingAtmosphereInterceptor;
 import org.atmosphere.interceptor.SSEAtmosphereInterceptor;
+import org.atmosphere.interceptor.WebSocketMessageSuspendInterceptor;
 import org.atmosphere.util.AtmosphereConfigReader;
 import org.atmosphere.util.DefaultEndpointMapper;
 import org.atmosphere.util.EndpointMapper;
@@ -223,6 +224,8 @@ public class AtmosphereFramework {
             JSONPAtmosphereInterceptor.class,
             // ADD Tracking ID Handshake
             JavaScriptProtocol.class,
+            // WebSocket and suspend
+            WebSocketMessageSuspendInterceptor.class,
             // OnDisconnect
             OnDisconnectInterceptor.class
     };

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
Patch:
@@ -118,7 +118,7 @@ public boolean isResuming() {
 
     @Override
     public boolean isSuspended() {
-        return resource == null ? false : resource.action().type() == Action.TYPE.SUSPEND;
+        return resource == null ? false : (resource.action().type() == Action.TYPE.SUSPEND || resource.action().type() == Action.TYPE.SUSPEND_MESSAGE);
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/interceptor/WebSocketMessageSuspendInterceptor.java
Patch:
@@ -33,7 +33,7 @@ public Action inspect(AtmosphereResource r) {
 
         if (r.transport().equals(AtmosphereResource.TRANSPORT.WEBSOCKET) &&
                 r.getRequest().getAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE) == null) {
-            AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.SUSPEND);
+            AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.SUSPEND_MESSAGE);
         }
         return Action.CONTINUE;
     }

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/FileIterator.java
Patch:
@@ -36,7 +36,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.atmosphere.util;
+package org.atmosphere.util.annotation;
 
 import java.io.File;
 import java.io.IOException;

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -109,6 +109,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOEx
 
         // Comet is not enabled.
         if (event == null) {
+            logger.error("HttpEvent is null, JBoss APR Not Properly installed");
             throw unableToDetectComet;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2235,8 +2235,7 @@ public boolean accept(File arg0, String arg1) {
                 annotationProcessor.scanAll();
             }
         } catch (Throwable e) {
-            logger.warn("Atmosphere's Service annotation not supported. Please add https://github.com/rmuller/infomas-asl as dependency or your own AnnotationProcessor to support @Service");
-            logger.warn("", e);
+            logger.error("", e);
             return;
         } finally {
             if (annotationProcessor != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1900,7 +1900,7 @@ protected Map<String, String> configureQueryStringAsRequest(AtmosphereRequest re
                         // Use the one set by the user first.
                         if (request.getContentType() == null ||
                                 !request.getContentType().equalsIgnoreCase(s.length > 1 ? s[1] : "")) {
-                            request.contentType(s.length > 1 ? s[1] : "");
+                            request.contentType(s.length > 1 ? URLDecoder.decode(s[1], "UTF-8") : "");
                         }
                     }
                     if (!s[0].isEmpty()

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -52,8 +52,8 @@ public void configure(AtmosphereConfig config) {
     public Action inspect(final AtmosphereResource r) {
         AtmosphereRequest request = AtmosphereResourceImpl.class.cast(r).getRequest(false);
         String s = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT);
-        String uuid = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
-        if (p != null && s != null && uuid != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT)) {
+        String uuid = r.uuid();
+        if (p != null && s != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT)) {
             logger.trace("AtmosphereResource {} disconnected", uuid);
             AtmosphereResource ss = AtmosphereResourceFactory.getDefault().find(uuid);
             if (ss != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -86,4 +86,6 @@ public interface HeaderConfig {
     String X_ATMO_PROTOCOL = "X-atmo-protocol";
 
     String X_ATMO_BINARY = "X-Atmosphere-Binary";
+
+    String X_ATMO_WEBSOCKET_PROXY = "X-Atmosphere-WebSocket-Proxy";
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
+import static org.atmosphere.annotation.AnnotationUtil.broadcaster;
 import static org.atmosphere.annotation.AnnotationUtil.filters;
 import static org.atmosphere.annotation.AnnotationUtil.listeners;
 
@@ -74,7 +75,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                 IntrospectionUtils.addProperty(handler, nv[0], nv[1]);
             }
 
-            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), a.path(), true), l);
+            framework.addAtmosphereHandler(a.path(), handler, broadcaster(framework, a.broadcaster(), a.path()), l);
             framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
+import static org.atmosphere.annotation.AnnotationUtil.broadcaster;
 import static org.atmosphere.annotation.AnnotationUtil.filters;
 import static org.atmosphere.annotation.AnnotationUtil.listeners;
 
@@ -65,7 +66,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                     logger.warn("", e);
                 }
             }
-            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), a.path(), true), l);
+            framework.addAtmosphereHandler(a.path(), handler, broadcaster(framework, a.broadcaster(), a.path()), l);
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 
 import static org.atmosphere.annotation.AnnotationUtil.atmosphereConfig;
+import static org.atmosphere.annotation.AnnotationUtil.broadcaster;
 import static org.atmosphere.annotation.AnnotationUtil.filters;
 import static org.atmosphere.annotation.AnnotationUtil.listeners;
 
@@ -70,7 +71,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             if (m.path().contains("{")) {
                 framework.interceptors().add(new MeteorServiceInterceptor());
             }
-            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), m.path(), true), l);
+            framework.addAtmosphereHandler(mapping, r, broadcaster(framework, m.broadcaster(), m.path()), l);
             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -194,7 +194,7 @@ public Broadcaster initialize(String name, AtmosphereConfig config) {
      * @return an instance of {@link BroadcasterConfig}
      */
     protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config) {
-        return new BroadcasterConfig(config.framework().broadcasterFilters, config, getID());
+        return new BroadcasterConfig(config.framework().broadcasterFilters, config, getID()).init();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -165,7 +165,7 @@ private <T extends Broadcaster> T createBroadcaster(Class<T> c, Object id) throw
             b.setSuspendPolicy(defaultPolicyInteger, defaultPolicy);
 
             if (b.getBroadcasterConfig() == null) {
-                b.setBroadcasterConfig(new BroadcasterConfig(config.framework().broadcasterFilters, config, id.toString()));
+                b.setBroadcasterConfig(new BroadcasterConfig(config.framework().broadcasterFilters, config, id.toString()).init());
             }
 
             b.setBroadcasterLifeCyclePolicy(policy);

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -87,6 +87,7 @@ protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config) {
         BroadcasterConfig bc = (BroadcasterConfig) config.properties().get(BroadcasterConfig.class.getName());
         if (bc == null) {
             bc = new BroadcasterConfig(config.framework().broadcasterFilters(), config, false, getID())
+                    .init()
                     .setScheduledExecutorService(ExecutorsFactory.getScheduler(config));
         }
         return bc;

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -84,4 +84,6 @@ public interface HeaderConfig {
     String ATMOSPHERE_POST_BODY = "X-Atmosphere-Post-Body";
 
     String X_ATMO_PROTOCOL = "X-atmo-protocol";
+
+    String X_ATMO_BINARY = "X-Atmosphere-Binary";
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -195,7 +195,7 @@ public WebSocket write(AtmosphereResponse r, byte[] b, int offset, int length) t
 
         logger.trace("WebSocket.write()");
         boolean transform = filters.size() > 0 && r.getStatus() < 400;
-        if (binaryWrite) {
+        if (binaryWrite || r.resource().forceBinaryWrite()) {
             if (transform) {
                 b = transform(b, offset, length);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -463,12 +463,12 @@ public AtmosphereRequest body(String body) {
     }
 
     public AtmosphereRequest body(byte[] bytes) {
+        bis = new ByteInputStream(bytes, 0, bytes.length);
         try {
-            bis = new ByteInputStream(bytes, 0, bytes.length);
+            br = new BufferedReader(new StringReader(new String(bytes, "UTF-8")));
         } catch (UnsupportedEncodingException e) {
             logger.trace("", e);
         }
-        br = new BufferedReader(new StringReader(body));
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1654,7 +1654,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
         req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
         req.setAttribute(ATMOSPHERE_CONFIG, config);
-        req.setAttribute(FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST, config.isThrowExceptionOnCloned());
+        req.setAttribute(FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST, ""+config.isThrowExceptionOnCloned());
         boolean skip = true;
         String s = config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST);
         if (s != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1526,7 +1526,7 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
 
         if (loadInMemory) {
             String s = (String) request.getAttribute(FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST);
-            boolean throwException = s == null ? false : Boolean.parseBoolean(s);
+            boolean throwException = s != null && Boolean.parseBoolean(s);
             r = new NoOpsRequest(throwException);
             if (isWrapped) {
                 load(b.request, b);

File: modules/cpr/src/main/java/org/atmosphere/container/WebLogicServlet30WithWebSocket.java
Patch:
@@ -29,6 +29,6 @@ public boolean supportWebSocket() {
 
     @Override
     public String getContainerName() {
-        return super.getContainerName() + " using javax.servlet/3.0 and jsr356/WebSocket API";
+        return super.getContainerName() + " using javax.servlet/3.0 and Native WebSocket API";
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -90,7 +90,7 @@ public JSR356Endpoint(AtmosphereFramework framework, WebSocketProcessor webSocke
             Map<String, ? extends ServletRegistration> m = framework.getServletContext().getServletRegistrations();
             for (Map.Entry<String, ? extends ServletRegistration> e : m.entrySet()) {
                 if (AtmosphereServlet.class.isAssignableFrom(loadClass(e.getValue().getClassName()))) {
-                    // TODO: This is a hack and won't work with serveral Servlet
+                    // TODO: This is a hack and won't work with several Servlet
                     servletPath = "/" + e.getValue().getMappings().iterator().next().replace("/", "").replace("*", "");
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2235,8 +2235,8 @@ public boolean accept(File arg0, String arg1) {
                 annotationProcessor.scanAll();
             }
         } catch (Throwable e) {
-            logger.debug("Atmosphere's Service annotation not supported. Please add https://github.com/rmuller/infomas-asl as dependency or your own AnnotationProcessor to support @Service");
-            logger.trace("", e);
+            logger.warn("Atmosphere's Service annotation not supported. Please add https://github.com/rmuller/infomas-asl as dependency or your own AnnotationProcessor to support @Service");
+            logger.warn("", e);
             return;
         } finally {
             if (annotationProcessor != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1520,7 +1520,9 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
                 .isSSecure(request.isSecure());
 
         if (loadInMemory) {
-            r = new NoOpsRequest(Boolean.parseBoolean(request.getAttribute(FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST).toString()));
+            String s = (String) request.getAttribute(FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST);
+            boolean throwException = s == null ? false : Boolean.parseBoolean(s);
+            r = new NoOpsRequest(throwException);
             if (isWrapped) {
                 load(b.request, b);
             } else {

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -156,7 +156,7 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
 
         // We must dispatch to execute AtmosphereInterceptor
         dispatch(webSocket, request, response);
-        if (handlers.size() != 0 && !REFLECTOR_ATMOSPHEREHANDLER.getClass().isAssignableFrom(r.getAtmosphereHandler().getClass())){
+        if (handlers.size() != 0 && REFLECTOR_ATMOSPHEREHANDLER.getClass().isAssignableFrom(r.getAtmosphereHandler().getClass())){
             WebSocketHandlerProxy handler = mapper.map(request, handlers);
             if (handler == null) {
                 logger.debug("No WebSocketHandler maps request for {} with mapping {}", request.getRequestURI(), handlers);

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -156,7 +156,7 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
 
         // We must dispatch to execute AtmosphereInterceptor
         dispatch(webSocket, request, response);
-        if (handlers.size() != 0 && REFLECTOR_ATMOSPHEREHANDLER.equals(r.getAtmosphereHandler())){
+        if (handlers.size() != 0 && !REFLECTOR_ATMOSPHEREHANDLER.getClass().isAssignableFrom(r.getAtmosphereHandler().getClass())){
             WebSocketHandlerProxy handler = mapper.map(request, handlers);
             if (handler == null) {
                 logger.debug("No WebSocketHandler maps request for {} with mapping {}", request.getRequestURI(), handlers);

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -61,6 +61,7 @@
 import static org.atmosphere.cpr.ApplicationConfig.RECYCLE_ATMOSPHERE_REQUEST_RESPONSE;
 import static org.atmosphere.cpr.ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_PROTOCOL_EXECUTION;
+import static org.atmosphere.cpr.AtmosphereFramework.REFLECTOR_ATMOSPHEREHANDLER;
 import static org.atmosphere.cpr.FrameworkConfig.ASYNCHRONOUS_HOOK;
 import static org.atmosphere.cpr.FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE;
 import static org.atmosphere.websocket.WebSocketEventListener.WebSocketEvent.TYPE.CLOSE;
@@ -138,7 +139,7 @@ public WebSocketProcessor registerWebSocketHandler(String path, WebSocketHandler
     public final void open(final WebSocket webSocket, final AtmosphereRequest request, final AtmosphereResponse response) throws IOException {
         // TODO: Fix this. Instead add an Interceptor.
         if (framework.getAtmosphereConfig().handlers().size() == 0) {
-            framework.addAtmosphereHandler("/*", AtmosphereFramework.REFLECTOR_ATMOSPHEREHANDLER);
+            framework.addAtmosphereHandler("/*", REFLECTOR_ATMOSPHEREHANDLER);
         }
 
         request.headers(configureHeader(request)).setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);
@@ -155,7 +156,7 @@ public final void open(final WebSocket webSocket, final AtmosphereRequest reques
 
         // We must dispatch to execute AtmosphereInterceptor
         dispatch(webSocket, request, response);
-        if (handlers.size() != 0) {
+        if (handlers.size() != 0 && REFLECTOR_ATMOSPHEREHANDLER.equals(r.getAtmosphereHandler())){
             WebSocketHandlerProxy handler = mapper.map(request, handlers);
             if (handler == null) {
                 logger.debug("No WebSocketHandler maps request for {} with mapping {}", request.getRequestURI(), handlers);

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -632,7 +632,7 @@ public interface ApplicationConfig {
      * The maximum number of time, in seconds, thread will be stay alive when created with {@link org.atmosphere.util.ExecutorsFactory}. Those {@link java.util.concurrent.Executor}.
      * are used by the {@link DefaultBroadcaster}'s Thread Pool. See also {@link #BROADCASTER_ASYNC_WRITE_THREADPOOL_MAXSIZE} and {@link #BROADCASTER_MESSAGE_PROCESSING_THREADPOOL_MAXSIZE}
      * <p>
-     * Default: unlimited<br>
+     * Default: 10 seconds<br>
      * Value: org.atmosphere.cpr.threadPool.maxKeepAliveThreads
      */
     String EXECUTORFACTORY_KEEP_ALIVE = ApplicationConfig.class.getPackage().getName() + ".threadPool.maxKeepAliveThreads";

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java
Patch:
@@ -74,7 +74,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                 IntrospectionUtils.addProperty(handler, nv[0], nv[1]);
             }
 
-            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), true), l);
+            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), a.path(), true), l);
             framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -65,7 +65,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                     logger.warn("", e);
                 }
             }
-            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), true), l);
+            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), a.path(), true), l);
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -70,7 +70,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             if (m.path().contains("{")) {
                 framework.interceptors().add(new MeteorServiceInterceptor());
             }
-            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), true), l);
+            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), m.path(), true), l);
             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java
Patch:
@@ -97,10 +97,10 @@ public Action inspect(AtmosphereResource r) {
                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;
                         if (!singleton) {
                             config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()),
-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);
+                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
                         } else {
                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler,
-                                    config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);
+                                    config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
                         }
                         request.setAttribute(FrameworkConfig.NEW_MAPPING, "true");
                     } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -119,10 +119,10 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                                     ManagedAtmosphereHandler h = new ManagedAtmosphereHandler();
                                     h.configure(config, config.framework().newClassInstance(ap.target().getClass()));
                                     config.framework().addAtmosphereHandler(path, h,
-                                            config.getBroadcasterFactory().lookup(a.broadcaster(), true), w.interceptors);
+                                            config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);
                                 } else {
                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,
-                                            config.getBroadcasterFactory().lookup(a.broadcaster(), true), w.interceptors);
+                                            config.getBroadcasterFactory().lookup(a.broadcaster(), path, true), w.interceptors);
                                 }
                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, "true");
                             } catch (Throwable e) {

File: modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java
Patch:
@@ -119,10 +119,10 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                                     r.setServlet(config.framework().newClassInstance(s.getClass()));
                                     r.init(config);
                                     config.framework().addAtmosphereHandler(path, r,
-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);
+                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
                                 } else {
                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler,
-                                            config.getBroadcasterFactory().lookup(m.broadcaster(), true), w.interceptors);
+                                            config.getBroadcasterFactory().lookup(m.broadcaster(), path, true), w.interceptors);
                                 }
                                 request.setAttribute(FrameworkConfig.NEW_MAPPING, "true");
                             } catch (Throwable e) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketHandlerTest.java
Patch:
@@ -187,7 +187,7 @@ public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t
     private void registerWebSocketHandler(String path, WebSocketHandler w) {
         WebSocketProcessorFactory.getDefault()
                 .getWebSocketProcessor(framework).registerWebSocketHandler(path,
-                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup("/*", true).getClass(), w));
+                new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path, true).getClass(), w));
     }
 
 

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java
Patch:
@@ -43,7 +43,6 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             AtmosphereHandlerService a = annotatedClass.getAnnotation(AtmosphereHandlerService.class);
 
             atmosphereConfig(a.atmosphereConfig(), framework);
-            framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
             filters(a.broadcastFilters(), framework);
 
             Class<?>[] interceptors = a.interceptors();
@@ -75,7 +74,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                 IntrospectionUtils.addProperty(handler, nv[0], nv[1]);
             }
 
-            framework.addAtmosphereHandler(a.path(), handler, l);
+            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), true), l);
             framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -45,7 +45,6 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             List<AtmosphereInterceptor> l = new ArrayList<AtmosphereInterceptor>();
 
             atmosphereConfig(a.atmosphereConfig(), framework);
-            framework.setDefaultBroadcasterClassName(a.broadcaster().getName());
             filters(a.broadcastFilters(), framework);
 
             AtmosphereInterceptor aa = listeners(a.listeners(), framework);
@@ -66,7 +65,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
                     logger.warn("", e);
                 }
             }
-            framework.addAtmosphereHandler(a.path(), handler, l);
+            framework.addAtmosphereHandler(a.path(), handler, framework.getBroadcasterFactory().lookup(a.broadcaster(), true), l);
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -50,7 +50,6 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             String mapping = m.path();
 
             atmosphereConfig(m.atmosphereConfig(), framework);
-            framework.setDefaultBroadcasterClassName(m.broadcaster().getName());
             filters(m.broadcastFilters(), framework);
 
             AtmosphereInterceptor aa = listeners(m.listeners(), framework);
@@ -71,7 +70,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             if (m.path().contains("{")) {
                 framework.interceptors().add(new MeteorServiceInterceptor());
             }
-            framework.addAtmosphereHandler(mapping, r, l);
+            framework.addAtmosphereHandler(mapping, r, framework.getBroadcasterFactory().lookup(m.broadcaster(), true), l);
             framework.setBroadcasterCacheClassName(m.broadcasterCache().getName());
         } catch (Throwable e) {
             logger.warn("", e);

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -67,7 +67,8 @@ public void destroy() {
             }
 
             WebSocketProcessor p = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework);
-            p.registerWebSocketHandler(m.path(), framework.newClassInstance(s));
+            p.registerWebSocketHandler(m.path(), new WebSocketProcessor.WebSocketHandlerProxy( m.broadcaster(),
+                    framework.newClassInstance(s)));
         } catch (Throwable e) {
             logger.warn("", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -236,8 +236,8 @@ protected WebSocketHandler postProcessMapping(WebSocket webSocket, AtmosphereReq
                     }
                 }
             }
+            webSocket.resource().setBroadcaster(framework.getBroadcasterFactory().lookup(path, true));
         }
-        webSocket.resource().setBroadcaster(framework.getBroadcasterFactory().lookup(path, true));
         return w;
     }
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -68,6 +68,7 @@ public void basicTrackingTest() throws ServletException, IOException {
 
     @Test
     public void removeAtmosphereResourceTest() throws ServletException, IOException {
+        recovery.states().clear();
         recovery.configure(config);
         recovery.inspect(r);
         r.suspend();

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -198,9 +198,7 @@ public void onRemoveAtmosphereResource(Broadcaster b, AtmosphereResource r) {
                 t.remove(b);
             } else {
                 // The BroadcasterTracker was swapped
-                if (t == null) {
-                    onAddAtmosphereResource(b, r);
-                }
+                onAddAtmosphereResource(b, r);
                 logger.trace("Keeping the state of {} with broadcaster {}", r.uuid(), b.getID());
                 logger.trace("State for {} with broadcaster {}", r.uuid(), t != null ? t.ids() : "null");
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -539,7 +539,6 @@ public HttpSession getSession() {
 
     @Override
     public HttpSession getSession(boolean create) {
-
         if (b.webSocketFakeSession != null) {
             return b.webSocketFakeSession;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -329,7 +329,8 @@ public AtmosphereResource suspend(long timeout) {
 
         if (event.isSuspended() || disableSuspend) return this;
 
-        if (req.getSession(false) != null
+        if (config.isSupportSession()
+                && req.getSession(false) != null
                 && req.getSession().getMaxInactiveInterval() != -1
                 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
             throw new IllegalStateException("Cannot suspend a " +
@@ -768,7 +769,7 @@ public AtmosphereResourceImpl disableSuspend(boolean disableSuspend) {
 
     @Override
     public HttpSession session(boolean create) {
-        if (session == null) {
+        if (config.isSupportSession() && session == null) {
             // http://java.net/jira/browse/GLASSFISH-18856
             session = req.getSession(create);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -78,9 +78,8 @@ public void init(final ServletConfig sc) throws ServletException {
         super.init(sc);
         if (framework == null) {
             framework = new AtmosphereFramework(isFilter, autoDetectHandlers);
-            framework.init(sc);
-
         }
+        framework.init(sc);
     }
 
     public AtmosphereFramework framework() {

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereFrameworkTest.java
Patch:
@@ -67,9 +67,8 @@ public class MyAtmosphereServlet extends AtmosphereServlet {
         @Override
         public void init(ServletConfig config) throws ServletException {
 
-            framework.setBroadcasterFactory(new MyBroadcasterFactory());
             super.init(config);
-
+            framework.setBroadcasterFactory(new MyBroadcasterFactory());
         }
 
     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java
Patch:
@@ -121,7 +121,7 @@ public void onBroadcast(AtmosphereResourceEvent event) {
                             break;
                     }
                 }
-            }).suspend(timeoutInSeconds == -1 ? timeoutInSeconds : TimeUnit.MILLISECONDS.convert(timeoutInSeconds, TimeUnit.SECONDS);
+            }).suspend(timeoutInSeconds == -1 ? timeoutInSeconds : TimeUnit.MILLISECONDS.convert(timeoutInSeconds, TimeUnit.SECONDS));
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -27,6 +27,7 @@
 
 /**
  * AtmosphereServlet that use Servlet 3.0 Async API when available, and fallback to native comet support if not available.
+ * For Tomcat6/7 and JBossWeb Native support, use atmosphere-native dependencies instead.
  * <p/>
  * If Servlet 3.0 or native API isn't found, Atmosphere will use {@link org.atmosphere.container.BlockingIOCometSupport}.
  *

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -34,6 +34,7 @@
 import org.atmosphere.util.EndpointMapper;
 import org.atmosphere.util.ExecutorsFactory;
 import org.atmosphere.util.VoidExecutorService;
+import org.atmosphere.websocket.protocol.StreamingHttpProtocol;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -610,7 +611,7 @@ private void resizeByteBuffer(WebSocket webSocket) throws IOException {
         int maxSize = getByteBufferMaxSize();
         ByteBuffer bb = webSocket.bb;
         if (bb.limit() >= maxSize) {
-            throw new IOException("Message Buffer too small");
+            throw new IOException("Message Buffer too small. Use " + StreamingHttpProtocol.class.getName() + " when streaming over websocket.");
         }
 
         long newSize = bb.limit() * 2;
@@ -629,7 +630,7 @@ private void resizeCharBuffer(WebSocket webSocket) throws IOException {
         int maxSize = getCharBufferMaxSize();
         CharBuffer cb = webSocket.cb;
         if (cb.limit() >= maxSize) {
-            throw new IOException("Message Buffer too small");
+            throw new IOException("Message Buffer too small. Use " + StreamingHttpProtocol.class.getName() + " when streaming over websocket.");
         }
 
         long newSize = cb.limit() * 2;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1850,7 +1850,8 @@ protected Map<String, String> configureQueryStringAsRequest(AtmosphereRequest re
                             request.contentType(s.length > 1 ? s[1] : "");
                         }
                     }
-                    if (!s[0].toLowerCase().startsWith("x-atmo")
+                    if (!s[0].isEmpty()
+                            && !s[0].toLowerCase().startsWith("x-atmo")
                             && !s[0].equalsIgnoreCase("x-cache-date")
                             && !s[0].equalsIgnoreCase("Content-Type")
                             && !s[0].equalsIgnoreCase("_")) {

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -56,7 +56,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             Object c = framework.newClassInstance(aClass);
             AtmosphereHandler handler = new ManagedAtmosphereHandler().configure(framework.getAtmosphereConfig(), c);
             // MUST BE ADDED FIRST, ALWAYS!
-            l.add(new ManagedServiceInterceptor(ManagedAtmosphereHandler.class.cast(handler)));
+            l.add(new ManagedServiceInterceptor());
 
             Class<?>[] interceptors = a.interceptors();
             for (Class i : interceptors) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -158,7 +158,8 @@ private void scanForAnnotation(AtmosphereFramework f) {
             // JBoss|vfs with APR issue, or any strange containers may fail. This is a hack for them.
             // https://github.com/Atmosphere/atmosphere/issues/1292
             if (!coreAnnotationsFound.get()) {
-                logger.warn("Unable to detect annotations. Application may to deploy.");
+                logger.warn("Unable to detect annotations. Application may fail to deploy.");
+                f.annotationScanned(true);
                 for (Class a : coreAnnotations) {
                     try {
                         handler.handleProcessor(loadClass(getClass(), a.getName()));

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1850,7 +1850,7 @@ protected Map<String, String> configureQueryStringAsRequest(AtmosphereRequest re
                             request.contentType(s.length > 1 ? s[1] : "");
                         }
                     }
-                    if (!s[0].toLowerCase().startsWith("x-atmosphere")
+                    if (!s[0].toLowerCase().startsWith("x-atmo")
                             && !s[0].equalsIgnoreCase("x-cache-date")
                             && !s[0].equalsIgnoreCase("Content-Type")
                             && !s[0].equalsIgnoreCase("_")) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.cpr;
 
+import org.atmosphere.util.CookieUtil;
 import org.atmosphere.util.ServletProxyFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.slf4j.Logger;
@@ -372,7 +373,7 @@ public String getStatusMessage() {
     public Map<String, String> headers() {
         if (!headerHandled) {
             for (Cookie c : cookies) {
-                headers.put("Set-Cookie", c.toString());
+                headers.put("Set-Cookie", CookieUtil.toString(c));
             }
             headerHandled = true;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -235,9 +235,6 @@ public int getIntHeader(String name) {
     @Override
     public Enumeration<String> getHeaderNames() {
         Set list = new HashSet();
-        if (b.contentType != null) {
-            list.add("Content-Type");
-        }
         list.addAll(b.headers.keySet());
 
         list.addAll(Collections.list(b.request.getHeaderNames()));
@@ -251,6 +248,9 @@ public Enumeration<String> getHeaderNames() {
             }
         }
 
+        if (b.contentType != null) {
+            list.add("Content-Type");
+        }
         return Collections.enumeration(list);
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -235,6 +235,9 @@ public int getIntHeader(String name) {
     @Override
     public Enumeration<String> getHeaderNames() {
         Set list = new HashSet();
+        if (b.contentType != null) {
+            list.add("Content-Type");
+        }
         list.addAll(b.headers.keySet());
 
         list.addAll(Collections.list(b.request.getHeaderNames()));

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -55,12 +55,12 @@
 
 import org.atmosphere.container.BlockingIOCometSupport;
 import org.atmosphere.container.GlassFishServ30WebSocketSupport;
-import org.atmosphere.container.GlassFishServlet30WebSocketSupport;
 import org.atmosphere.container.GlassFishWebSocketSupport;
 import org.atmosphere.container.GlassFishv2CometSupport;
 import org.atmosphere.container.Grizzly2CometSupport;
 import org.atmosphere.container.Grizzly2WebSocketSupport;
 import org.atmosphere.container.GrizzlyCometSupport;
+import org.atmosphere.container.GrizzlyServlet30WebSocketSupport;
 import org.atmosphere.container.JBossWebCometSupport;
 import org.atmosphere.container.JBossWebSocketSupport;
 import org.atmosphere.container.JSR356AsyncSupport;
@@ -199,7 +199,7 @@ public List<Class<? extends AsyncSupport>> detectWebSocketPresent(final boolean
                         add(GlassFishServ30WebSocketSupport.class);
 
                     if (testClassExists(GRIZZLY_WEBSOCKET))
-                        add(GlassFishServlet30WebSocketSupport.class);
+                        add(GrizzlyServlet30WebSocketSupport.class);
 
                     if (testClassExists(JSR356_WEBSOCKET))
                         add(JSR356AsyncSupport.class);

File: modules/cpr/src/main/java/org/atmosphere/container/version/JSR356WebSocket.java
Patch:
@@ -76,7 +76,8 @@ public void close() {
         logger.trace("WebSocket.close() for AtmosphereResource {}", resource() != null ? resource().uuid() : "null");
         try {
             session.close();
-        } catch (IOException e) {
+        // Tomcat may throw  https://gist.github.com/jfarcand/6702738
+        } catch (Exception e) {
             logger.trace("", e);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -253,7 +253,7 @@ public List<Object> retrieveCache(AtmosphereResource r, BroadcasterTracker track
                 cache = b.getBroadcasterConfig().getBroadcasterCache();
                 List<Object> t = cache.retrieveFromCache(b.getID(), r);
 
-                t = b.getBroadcasterConfig().applyFilters(r, t);
+                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);
                 if (t.size() > 0) {
                     logger.trace("Found Cached Messages For AtmosphereResource {} with Broadcaster {}", r.uuid(), broadcasterID);
                     cachedMessages.addAll(t);

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -54,7 +54,7 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
             }
 
             Object c = framework.newClassInstance(aClass);
-            AtmosphereHandler handler = new ManagedAtmosphereHandler(c);
+            AtmosphereHandler handler = new ManagedAtmosphereHandler().configure(framework.getAtmosphereConfig(), c);
             // MUST BE ADDED FIRST, ALWAYS!
             l.add(new ManagedServiceInterceptor(ManagedAtmosphereHandler.class.cast(handler)));
 

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java
Patch:
@@ -96,7 +96,7 @@ public Action inspect(AtmosphereResource r) {
                     try {
                         boolean singleton = w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null;
                         if (!singleton) {
-                            config.framework().addAtmosphereHandler(path, w.atmosphereHandler.getClass().newInstance(), w.interceptors);
+                            config.framework().addAtmosphereHandler(path, config.framework().newClassInstance(w.atmosphereHandler.getClass()), w.interceptors);
                         } else {
                             config.framework().addAtmosphereHandler(path, w.atmosphereHandler, w.interceptors);
                         }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -120,8 +120,8 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                             try {
                                 boolean singleton = ap.target().getClass().getAnnotation(Singleton.class) != null;
                                 if (!singleton) {
-                                    ManagedAtmosphereHandler h = (ManagedAtmosphereHandler) w.atmosphereHandler.getClass().getConstructor(Object.class)
-                                            .newInstance(config.framework().newClassInstance(ap.target().getClass()));
+                                    ManagedAtmosphereHandler h = new ManagedAtmosphereHandler();
+                                    h.configure(config, config.framework().newClassInstance(ap.target().getClass()));
 
                                     // Quite dangerous
                                     w.interceptors.set(0, new ManagedServiceInterceptor(h));

File: modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java
Patch:
@@ -116,8 +116,8 @@ protected void mapAnnotatedService(AtmosphereRequest request, AtmosphereHandlerW
                                 boolean singleton = s.getClass().getAnnotation(Singleton.class) != null;
                                 if (!singleton) {
                                     ReflectorServletProcessor r = new ReflectorServletProcessor();
-                                    r.setServlet(s.getClass().newInstance());
-                                    r.init(config.getServletConfig());
+                                    r.setServlet(config.framework().newClassInstance(s.getClass()));
+                                    r.init(config);
                                     config.framework().addAtmosphereHandler(path, r, w.interceptors);
                                 } else {
                                     config.framework().addAtmosphereHandler(path, w.atmosphereHandler, w.interceptors);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -27,7 +27,6 @@
 
 /**
  * AtmosphereServlet that use Servlet 3.0 Async API when available, and fallback to native comet support if not available.
- * For Tomcat6/7 and JBossWeb Native support, use {@link AtmosphereNativeCometServlet}.
  * <p/>
  * If Servlet 3.0 or native API isn't found, Atmosphere will use {@link org.atmosphere.container.BlockingIOCometSupport}.
  *

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServletProcessor.java
Patch:
@@ -65,8 +65,9 @@ public interface AtmosphereServletProcessor extends AtmosphereHandler {
     /**
      * Initialize the {@link AtmosphereServletProcessor} using the {@link ServletConfig}.
      *
-     * @param sc the {@link ServletConfig}
+     *
+     * @param config the {@link javax.servlet.ServletConfig}
      * @throws ServletException
      */
-    void init(ServletConfig sc) throws ServletException;
+    void init(AtmosphereConfig config) throws ServletException;
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -230,7 +230,7 @@ protected WebSocketHandler postProcessMapping(WebSocket webSocket, AtmosphereReq
                         try {
                             boolean singleton = w.getClass().getAnnotation(Singleton.class) != null;
                             if (!singleton) {
-                                registerWebSocketHandler(path, w.getClass().newInstance());
+                                registerWebSocketHandler(path, framework.newClassInstance(w.getClass()));
                             } else {
                                 registerWebSocketHandler(path, w);
                             }

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -265,8 +265,7 @@ public final static class TestBroadcaster extends DefaultBroadcaster {
 
         public static AtomicInteger instance = new AtomicInteger();
 
-        public TestBroadcaster(String name, AtmosphereConfig config) {
-            super(name, config);
+        public TestBroadcaster() {
             instance.incrementAndGet();
         }
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterTest.java
Patch:
@@ -46,8 +46,7 @@ public class DefaultBroadcasterTest {
 
     public static final class B extends DefaultBroadcaster {
 
-        public B(String id, AtmosphereConfig config) {
-            super(id, config);
+        public B() {
         }
 
         protected void cacheAndSuspend(AtmosphereResource r) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/ServiceTest.java
Patch:
@@ -65,8 +65,7 @@ public void testBroadcasterService() throws IOException, ServletException {
     @BroadcasterService
     public final static class B extends SimpleBroadcaster {
 
-        public B(String id, AtmosphereConfig config) {
-            super(id, config);
+        public B() {
         }
     }
 

File: modules/jersey/src/test/java/org/atmosphere/jersey/WriteTimeoutTest.java
Patch:
@@ -66,8 +66,7 @@ protected F(Class<? extends Broadcaster> clazz, String broadcasterLifeCyclePolic
     public final static class J extends JerseyBroadcaster {
         private CountDownLatch latch;
 
-        public J(String id, AtmosphereConfig config) {
-            super(id, config);
+        public J() {
         }
 
         JerseyBroadcaster latch(CountDownLatch latch) {

File: modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -21,7 +21,6 @@
 import org.atmosphere.container.JBossWebSocketSupport;
 import org.atmosphere.container.Tomcat7CometSupport;
 import org.atmosphere.container.TomcatCometSupport;
-import org.atmosphere.di.ServletContextProvider;
 import org.jboss.servlet.http.HttpEvent;
 import org.jboss.servlet.http.HttpEventServlet;
 import org.slf4j.Logger;
@@ -43,7 +42,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class AtmosphereServlet extends HttpServlet implements CometProcessor, HttpEventServlet, ServletContextProvider, org.apache.catalina.comet.CometProcessor {
+public class AtmosphereServlet extends HttpServlet implements CometProcessor, HttpEventServlet, org.apache.catalina.comet.CometProcessor {
 
     protected static final Logger logger = LoggerFactory.getLogger(AtmosphereServlet.class);
     protected AtmosphereFramework framework;

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -253,7 +253,7 @@ public List<Object> retrieveCache(AtmosphereResource r, BroadcasterTracker track
                 cache = b.getBroadcasterConfig().getBroadcasterCache();
                 List<Object> t = cache.retrieveFromCache(b.getID(), r);
 
-                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);
+                t = b.getBroadcasterConfig().applyFilters(r, t);
                 if (t.size() > 0) {
                     logger.trace("Found Cached Messages For AtmosphereResource {} with Broadcaster {}", r.uuid(), broadcasterID);
                     cachedMessages.addAll(t);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -253,7 +253,7 @@ public List<Object> retrieveCache(AtmosphereResource r, BroadcasterTracker track
                 cache = b.getBroadcasterConfig().getBroadcasterCache();
                 List<Object> t = cache.retrieveFromCache(b.getID(), r);
 
-                cachedMessages = b.getBroadcasterConfig().applyFilters(r, cachedMessages);
+                cachedMessages = b.getBroadcasterConfig().applyFilters(r, t);
                 if (t.size() > 0) {
                     logger.trace("Found Cached Messages For AtmosphereResource {} with Broadcaster {}", r.uuid(), broadcasterID);
                     cachedMessages.addAll(t);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -956,6 +956,7 @@ public AtmosphereResponse write(byte[] data, boolean writeUsingOriginalResponse)
             }
         } catch (Exception ex) {
             handleException(ex);
+            throw new RuntimeException(ex);
         }
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -945,7 +945,7 @@ protected boolean checkCachedAndPush(final AtmosphereResource r, final Atmospher
                 }
 
                 if (entry.message != null) {
-                    filteredMessage.addLast(newMessage);
+                    filteredMessage.addLast(entry.message);
                 }
             }
 

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -53,8 +53,8 @@ public class UUIDBroadcasterCache implements BroadcasterCache {
     protected final List<BroadcasterCacheInspector> inspectors = new LinkedList<BroadcasterCacheInspector>();
     private ScheduledFuture scheduledFuture;
     protected ScheduledExecutorService taskScheduler;
-    private long clientIdleTime = TimeUnit.MINUTES.toMillis(2); // 2 minutes
-    private long invalidateCacheInterval = TimeUnit.MINUTES.toMillis(1); // 1 minute
+    private long clientIdleTime = TimeUnit.SECONDS.toMillis(60); // 1 minutes
+    private long invalidateCacheInterval = TimeUnit.SECONDS.toMillis(30); // 30 seconds
     private boolean shared = true;
     protected final List<Object> emptyList = Collections.<Object>emptyList();
 

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -81,6 +81,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         CometEvent event = (CometEvent) req.getAttribute(COMET_EVENT);
 
         // Comet is not enabled.
+
         if (event == null) {
             throw unableToDetectComet;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -174,7 +174,7 @@ public DefaultBroadcaster(String name, URI uri, AtmosphereConfig config) {
         }
         noOpsResource = AtmosphereResourceFactory.getDefault().create(config, "-1");
         if (outOfOrderBroadcastSupported.get()) {
-            logger.debug("{} supports Out Of Order Broadcast: {}", name, outOfOrderBroadcastSupported.get());
+            logger.trace("{} supports Out Of Order Broadcast: {}", name, outOfOrderBroadcastSupported.get());
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/BroadcastFilterAdapter.java
Patch:
@@ -19,11 +19,12 @@
 import org.atmosphere.cpr.PerRequestBroadcastFilter;
 
 /**
- * Adapter for {@link PerRequestBroadcastFilter}. Both method return {@link BroadcastAction.ACTION#CONTINUE} with the message.
+ * Adapter for {@link PerRequestBroadcastFilter}. Both methods return {@link BroadcastAction.ACTION#CONTINUE} with the message.
  *
- * @author Jean-francois Arcand
+ * @author Jeanfrancois Arcand
  */
 public class BroadcastFilterAdapter implements PerRequestBroadcastFilter {
+
     @Override
     public BroadcastAction filter(AtmosphereResource r, Object originalMessage, Object message) {
         return new BroadcastAction(message);

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterCacheServiceProcessor.java
Patch:
@@ -25,6 +25,5 @@ public class BroadcasterCacheServiceProcessor implements Processor {
     @Override
     public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
         framework.setBroadcasterCacheClassName(annotatedClass.getName());
-
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterListenerServiceProcessor.java
Patch:
@@ -34,6 +34,5 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
         } catch (Throwable e) {
             logger.warn("", e);
         }
-
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterServiceProcessor.java
Patch:
@@ -25,6 +25,5 @@ public class BroadcasterServiceProcessor implements Processor {
     @Override
     public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
         framework.setDefaultBroadcasterClassName(annotatedClass.getName());
-
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/annotation/Processor.java
Patch:
@@ -19,15 +19,15 @@
 
 /**
  * Class annotated with {@link org.atmosphere.config.AtmosphereAnnotation} must implement this interface in order to get invoked
- * when the {@link org.atmosphere.cpr.AtmosphereFramework#init()} execute. Classes implementing this interface will
+ * when the {@link org.atmosphere.cpr.AtmosphereFramework#init()} executes. Classes implementing this interface will
  * have a chance to process annotated classes and take the appropriate action.
  */
 public interface Processor {
 
     /**
      * Invoked by the {@link org.atmosphere.cpr.AnnotationHandler} when an annotation is detected.
      *
-     * @param framework       the {@link org.atmosphere.cpr.AtmosphereFramework}
+     * @param framework      the {@link org.atmosphere.cpr.AtmosphereFramework}
      * @param annotatedClass the annotated classes.
      */
     public void handle(final AtmosphereFramework framework, final Class<?> annotatedClass);

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketProcessorServiceProcessor.java
Patch:
@@ -33,6 +33,5 @@ public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
         } catch (Throwable e) {
             logger.warn("", e);
         }
-
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcastMessage.java
Patch:
@@ -15,11 +15,10 @@
  */
 package org.atmosphere.cache;
 
-
 import java.util.UUID;
 
 /**
- * A wrapper around a the object passed to {@link org.atmosphere.cpr.Broadcaster#broadcast(Object)}
+ * A wrapper around an object passed to {@link org.atmosphere.cpr.Broadcaster#broadcast(Object)}
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheInspector.java
Patch:
@@ -16,15 +16,15 @@
 package org.atmosphere.cache;
 
 /**
- * Inspect {@link BroadcastMessage} before they gets added to the BroadcasterCache. Message can also be modified
+ * Inspect {@link BroadcastMessage}s before they get added to the BroadcasterCache. Messages can also be modified
  * before they get added to the cache.
  *
  * @author Jeanfrancois Arcand
  */
 public interface BroadcasterCacheInspector {
     /**
      * Inspect the {@link BroadcastMessage} and return true if the message can be cached, false if not. A
-     * Message can also be modified
+     * Message can also be modified.
      * @param message {@link BroadcastMessage}
      * @return true if allowed to be cached, false if not.
      */

File: modules/cpr/src/main/java/org/atmosphere/cache/CacheMessage.java
Patch:
@@ -42,7 +42,7 @@ public String getId() {
         return id;
     }
 
-    public String toString(){
+    public String toString() {
         return message.toString();
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -45,7 +45,7 @@ public void configure(BroadcasterConfig config) {
 
     @Override
     public CacheMessage addToCache(String broadcasterId, AtmosphereResource r, BroadcastMessage e) {
-        logger.trace("Message {} will be lost! Please install a proper BroadcasterCache", e.message);
+        logger.trace("Message {} might be lost! Please install a proper BroadcasterCache", e.message);
         return null;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -38,7 +38,6 @@ public class HeaderBroadcasterCache extends AbstractBroadcasterCache {
 
     @Override
     public CacheMessage addToCache(String broadcasterId, AtmosphereResource r, BroadcastMessage e) {
-
         long now = System.nanoTime();
         CacheMessage cacheMessage = put(e, now);
 
@@ -67,5 +66,4 @@ public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r
         }
         return get(cacheHeaderTime);
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/config/AtmosphereAnnotation.java
Patch:
@@ -19,7 +19,6 @@
 public @interface AtmosphereAnnotation {
     /**
      * Return the handled annotation associated with the {@link org.atmosphere.annotation.Processor}
-     * @return the handled annotation associated with the {@link org.atmosphere.annotation.Processor}
      */
     Class<? extends Annotation> value();
 }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java
Patch:
@@ -30,8 +30,8 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Handle {@link org.atmosphere.config.service.Singleton},{@link org.atmosphere.config.service.MeteorService} and {@link org.atmosphere.config.service.AtmosphereHandlerService}
- * processing.
+ * Handle {@link org.atmosphere.config.service.Singleton},{@link org.atmosphere.config.service.MeteorService} and
+ * {@link org.atmosphere.config.service.AtmosphereHandlerService} processing.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/managed/Decoder.java
Patch:
@@ -36,7 +36,7 @@ public void message(StringBuffer m) {
          message.set(m.toString());
      }
  * </pre></blockquote>
- * You can chain decoder, they will be invoked in the order they are defined and the last decoded value will be used to invoke the
+ * You can chain Decoders. They will be invoked in the order they are defined and the last decoded value will be used to invoke the
  * @Message annotated method.
  * @param <U>
  * @param <T>

File: modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java
Patch:
@@ -125,5 +125,4 @@ public static Object matchEncoder(Object instanceType, List<Encoder<?, ?>> encod
         }
         return encodedObject;
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedServiceInterceptor.java
Patch:
@@ -34,8 +34,7 @@
 import java.io.IOException;
 
 /**
- * Handle {@link Singleton} for {@link ManagedService}
- * processing.
+ * Handle {@link Singleton} for {@link ManagedService} processing.
  *
  * @author Jeanfrancois Arcand
  */
@@ -168,7 +167,7 @@ public PRIORITY priority() {
     }
 
     @Override
-    public String toString(){
+    public String toString() {
         return "@ManagedService Interceptor";
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/config/service/BroadcasterCacheService.java
Patch:
@@ -23,6 +23,7 @@
 
 /**
  * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.BroadcasterCache} class to use by default.
+ *
  * @author Jeanfrancois Arcand
  */
 @Target({ElementType.TYPE})

File: modules/cpr/src/main/java/org/atmosphere/config/service/BroadcasterFactoryService.java
Patch:
@@ -22,7 +22,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.Broadcaster} class to use by default.
+ * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.BroadcasterFactory} class to use by default.
+ *
  * @author Jeanfrancois Arcand
  */
 @Target({ElementType.TYPE})

File: modules/cpr/src/main/java/org/atmosphere/config/service/BroadcasterService.java
Patch:
@@ -23,6 +23,7 @@
 
 /**
  * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.Broadcaster} class to use by default.
+ *
  * @author Jeanfrancois Arcand
  */
 @Target({ElementType.TYPE})

File: modules/cpr/src/main/java/org/atmosphere/config/service/Delete.java
Patch:
@@ -21,7 +21,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Use this annotation with the {@link ManagedService}. Annotate a method who will get invoked when an HTTP DELETE is send.
+ * Use this annotation with the {@link ManagedService} annotation. Annotate a method which will get invoked when an
+ * HTTP DELETE is sent.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/service/Disconnect.java
Patch:
@@ -19,9 +19,10 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+
 /**
- * Use this annotation with the {@link ManagedService}. Annotate a method who will get invoked when the a remote Browser
- * connection is closed.
+ * Use this annotation with the {@link ManagedService} annotation. Annotate a method which will get invoked when the
+ * remote connection is closed.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/service/Get.java
Patch:
@@ -21,7 +21,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Use this annotation with the {@link ManagedService}. Annotate a method who will get invoked when an HTTP GET is send.
+ * Use this annotation with the {@link ManagedService} annotation. Annotate a method which will get invoked when an
+ * HTTP GET is send.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/service/Message.java
Patch:
@@ -24,8 +24,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Annotate a method that will gets invoked when String message are broadcasted using the {@link org.atmosphere.cpr.Broadcaster} associated
- * with the class where the annotation is associated.
+ * Annotate a method that will get invoked when String messages are broadcasted using the {@link org.atmosphere.cpr.Broadcaster}
+ * associated with the class where the annotation is associated.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/service/Post.java
Patch:
@@ -21,7 +21,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Use this annotation with the {@link ManagedService}. Annotate a method who will get invoked when an HTTP POST is send.
+ * Use this annotation with the {@link ManagedService} annotation. Annotate a method which will get invoked when an
+ * HTTP POST is sent.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/service/Put.java
Patch:
@@ -21,7 +21,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Use this annotation with the {@link ManagedService}. Annotate a method who will get invoked when an HTTP PUT is send.
+ * Use this annotation with the {@link ManagedService} annotation. Annotate a method which will get invoked when an
+ * HTTP PUT is sent.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/config/service/Resume.java
Patch:
@@ -21,8 +21,8 @@
 import java.lang.annotation.Target;
 
 /**
- * Use this annotation with the {@link ManagedService}. A method annotated with this annotation will be executed and then
- *  the connection will be resumed.
+ * Use this annotation with the {@link ManagedService} annotation. A method annotated with this annotation will be
+ * executed and then the connection will be resumed.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishServlet30WebSocketSupport.java
Patch:
@@ -58,9 +58,6 @@ public void shutdown() {
         super.shutdown();
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public Action service(AtmosphereRequest request, AtmosphereResponse response)
             throws IOException, ServletException {
@@ -82,6 +79,7 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
     /**
      * Return the container's name.
      */
+    @Override
     public String getContainerName() {
         return config.getServletConfig().getServletContext().getServerInfo() + " with WebSocket enabled.";
     }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketHandler.java
Patch:
@@ -90,6 +90,7 @@ void paths(ServletContext sc) {
         }
     }
 
+    @Override
     public void onConnect(WebSocket w) {
         super.onConnect(w);
 

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
Patch:
@@ -56,9 +56,6 @@ public void shutdown() {
         super.shutdown();
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public Action service(AtmosphereRequest request, AtmosphereResponse response)
             throws IOException, ServletException {
@@ -80,6 +77,7 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
     /**
      * Return the container's name.
      */
+    @Override
     public String getContainerName() {
         return config.getServletConfig().getServletContext().getServerInfo() + " with WebSocket enabled.";
     }

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -115,8 +115,6 @@ public boolean isApplicationRequest(HttpRequestPacket request) {
             return request.getRequestURI().startsWith(contextPath);
         }
 
-
-
         @Override
         public void onClose(WebSocket socket, DataFrame frame) {
             super.onClose(socket, frame);
@@ -192,5 +190,4 @@ public void onFragment(WebSocket socket, byte[] fragment, boolean last) {
         }
 
     } // END Grizzly2WebSocketApplication
-
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -172,9 +172,6 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res) throws IO
         return action;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void action(AtmosphereResourceImpl actionEvent) {
         super.action(actionEvent);

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebSocketHandler.java
Patch:
@@ -100,7 +100,7 @@ protected void onReceivedFrame(WebSocket socket) throws IOException {
                 logger.trace("WebSocket.onReceivedFrame skipping: " + frame);
             }
         } else {
-            logger.trace("WebSocket.onReceivedFrame but no atmosphere processor in request, skipping: " + frame);
+            logger.trace("WebSocket.onReceivedFrame but no atmosphere processor in request, skipping: {}", frame);
         }
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -18,6 +18,7 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 
 public class JSR356AsyncSupport extends Servlet30CometSupport {
+
     public JSR356AsyncSupport(AtmosphereConfig config) {
         super(config);
     }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyAsyncSupportWithWebSocket.java
Patch:
@@ -60,9 +60,6 @@ public JettyAsyncSupportWithWebSocket(final AtmosphereConfig config) {
         webSocketFactory = wsf;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public Action service(AtmosphereRequest req, AtmosphereResponse res)
             throws IOException, ServletException {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyServlet30AsyncSupportWithWebSocket.java
Patch:
@@ -46,9 +46,6 @@ public JettyServlet30AsyncSupportWithWebSocket(final AtmosphereConfig config) {
         webSocketFactory = JettyWebSocketUtil.getFactory(config, webSocketProcessor);
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public Action service(AtmosphereRequest req, AtmosphereResponse res)
             throws IOException, ServletException {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.atmosphere.container;
 
-
 import org.atmosphere.cpr.Action;
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AsynchronousProcessor;

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java
Patch:
@@ -45,6 +45,7 @@
  * Tomcat's WebSocket support. This code has been adapted from {@link org.apache.catalina.websocket.WebSocketServlet}
  */
 public class Tomcat7AsyncSupportWithWebSocket extends Tomcat7CometSupport implements TomcatWebSocketUtil.Delegate {
+
     private final WebSocketProcessor webSocketProcessor;
 
     public Tomcat7AsyncSupportWithWebSocket(AtmosphereConfig config) {
@@ -57,6 +58,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOEx
         return TomcatWebSocketUtil.doService(req, res, this, config, webSocketProcessor);
     }
 
+    @Override
     public Action doService(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
         return super.service(req, res);
     }

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7BIOSupportWithWebSocket.java
Patch:
@@ -47,6 +47,7 @@
  * Tomcat's WebSocket support. This code has been adapted from {@link org.apache.catalina.websocket.WebSocketServlet}
  */
 public class Tomcat7BIOSupportWithWebSocket extends BlockingIOCometSupport implements TomcatWebSocketUtil.Delegate {
+
     private static final Logger logger = LoggerFactory.getLogger(Tomcat7BIOSupportWithWebSocket.class);
     private static final long serialVersionUID = 1L;
     private final WebSocketProcessor webSocketProcessor;
@@ -61,6 +62,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOEx
         return TomcatWebSocketUtil.doService(req, res, this, config, webSocketProcessor);
     }
 
+    @Override
     public Action doService(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
         return super.service(req, res);
     }

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7Servlet30SupportWithWebSocket.java
Patch:
@@ -47,6 +47,7 @@
  * Tomcat's WebSocket support. This code has been adapted from {@link org.apache.catalina.websocket.WebSocketServlet}
  */
 public class Tomcat7Servlet30SupportWithWebSocket extends Servlet30CometSupport implements TomcatWebSocketUtil.Delegate {
+
     private static final Logger logger = LoggerFactory.getLogger(Tomcat7Servlet30SupportWithWebSocket.class);
     private static final long serialVersionUID = 1L;
     private final WebSocketProcessor webSocketProcessor;
@@ -61,6 +62,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOEx
         return TomcatWebSocketUtil.doService(req, res, this, config, webSocketProcessor);
     }
 
+    @Override
     public Action doService(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {
         return super.service(req, res);
     }

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -181,9 +181,6 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         return action;
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public void action(AtmosphereResourceImpl resource) {
         super.action(resource);

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketHandler.java
Patch:
@@ -101,7 +101,7 @@ protected final void onTextData(Reader r) throws IOException {
     }
 
     @Override
-    public int getReadTimeout(){
+    public int getReadTimeout() {
         return webSocketWriteTimeout;
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java
Patch:
@@ -252,5 +252,4 @@ public Action suspended(AtmosphereRequest request, AtmosphereResponse response)
                 throws IOException, ServletException;
 
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/container/version/Grizzly2WebSocket.java
Patch:
@@ -52,5 +52,4 @@ public void close() {
         logger.trace("WebSocket.close() for AtmosphereResource {}", resource() != null ? resource().uuid() : "null");
         webSocket.close();
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
Patch:
@@ -59,9 +59,6 @@ public void close() {
         webSocket.close();
     }
 
-    /**
-     * {@inheritDoc}
-     */
     @Override
     public WebSocket flush(AtmosphereResponse r) throws IOException {
         logger.trace("WebSocket.flush() not supported by Grizzly");

File: modules/cpr/src/main/java/org/atmosphere/container/version/JBossWebSocket.java
Patch:
@@ -24,8 +24,7 @@
 import java.util.Arrays;
 
 /**
- * Adapts a JBoss {@link WebSocket} to an atmosphere
- * {@link org.atmosphere.websocket.WebSocket}.
+ * Adapts a JBoss {@link WebSocket} to an Atmosphere {@link org.atmosphere.websocket.WebSocket}.
  * 
  * @author Péter Miklós
  */
@@ -64,5 +63,4 @@ public void close() {
             logger.trace("Error closing websocket.", e);
         }
     }
-
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOInterceptor.java
Patch:
@@ -18,10 +18,10 @@
 import java.io.IOException;
 
 /**
- * A filter like API that allow an {@link AtmosphereInterceptor} to intercept the response before it get written back
+ * A filter-like API that allow an {@link AtmosphereInterceptor} to intercept the response before it gets written back
  * to the client. An AsyncIOInterceptor can only be used with an {@link AtmosphereInterceptorWriter}.
  * <p/>
- * An implementation of this class must make sure the data is written inside the intercept method because it
+ * An implementation of this class must make sure the data is written inside the intercept method because otherwise it
  * will be lost.
  *
  * @author Jeanfrancois Arcand
@@ -37,5 +37,4 @@ public interface AsyncIOInterceptor {
     byte[] error(AtmosphereResponse response, int statusCode, String reasonPhrase);
 
     void redirect(AtmosphereResponse response, String location);
-
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOInterceptorAdapter.java
Patch:
@@ -18,11 +18,12 @@
 import java.io.IOException;
 
 /**
- * An Adapter for {@link AsyncIOInterceptor}
+ * An Adapter for {@link AsyncIOInterceptor}.
  *
  * @author Jeanfrancois Arcand
  */
 public class AsyncIOInterceptorAdapter implements AsyncIOInterceptor {
+
     @Override
     public void prePayload(AtmosphereResponse response, byte[] data, int offset, int length) {
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.LinkedList;
 
 /**
- * An {@link AsyncIOWriter} that delegates the write operation to it's {@link AsyncIOInterceptor}. If no
- * AsyncIOInterceptor are specified, this class does nothing and the response's will never get written.
+ * An {@link AsyncIOWriter} that delegates the write operation to its {@link AsyncIOInterceptor}. If no
+ * AsyncIOInterceptor is specified, this class does nothing and the responses will never get written.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereMappingException.java
Patch:
@@ -16,9 +16,10 @@
 package org.atmosphere.cpr;
 
 /**
- * Throw when {@link AsynchronousProcessor} is unable to map the request to an {@link AtmosphereHandler}
+ * Thrown when {@link AsynchronousProcessor} is unable to map the request to an {@link AtmosphereHandler}.
  */
 public class AtmosphereMappingException extends RuntimeException {
+
     public AtmosphereMappingException() {
         super();
     }
@@ -34,6 +35,4 @@ public AtmosphereMappingException(java.lang.String s, java.lang.Throwable throwa
     public AtmosphereMappingException(java.lang.Throwable throwable) {
         super(throwable);
     }
-
-
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilterLifecycle.java
Patch:
@@ -59,13 +59,12 @@
 public interface BroadcastFilterLifecycle extends BroadcastFilter {
 
     /**
-     * Initialize the {@link BroadcastFilter}
+     * Initialize the {@link BroadcastFilter}.
      */
     void init(AtmosphereConfig config);
 
     /**
      * Destroy this {@link BroadcastFilter} and its internal resources.
      */
     void destroy();
-
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterListenerAdapter.java
Patch:
@@ -19,11 +19,11 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * An implementation of {@link BroadcasterListener}
+ * An implementation of {@link BroadcasterListener}.
  *
  * @author Jeanfrancois Arcand
  */
-public class BroadcasterListenerAdapter implements BroadcasterListener{
+public class BroadcasterListenerAdapter implements BroadcasterListener {
 
     private final Logger logger = LoggerFactory.getLogger(BroadcasterListenerAdapter.class);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/ClusterBroadcastFilter.java
Patch:
@@ -57,8 +57,9 @@
  * @author Jeanfrancois Arcand
  */
 public interface ClusterBroadcastFilter extends BroadcastFilterLifecycle {
+
     /**
-     * Cluster's name or address
+     * Cluster's name or address.
      *
      * @param name
      */
@@ -72,7 +73,7 @@ public interface ClusterBroadcastFilter extends BroadcastFilterLifecycle {
     void setBroadcaster(Broadcaster bc);
 
     /**
-     * Return the {@link Broadcaster}
+     * Return the {@link Broadcaster}.
      *
      * @return the {@link Broadcaster}
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -73,12 +73,12 @@
  * Simple Servlet to use when Atmosphere {@link Meteor} are used. This Servlet will look
  * for a Servlet init-param named org.atmosphere.servlet or org.atmosphere.filter and will
  * delegate request processing to them. When used, this Servlet will ignore any
- * value defined in META-INF/atmosphere.xml as internally it will create a
- * {@link ReflectorServletProcessor}
+ * value defined in META-INF/atmosphere.xml as internally it will create a {@link ReflectorServletProcessor}.
  *
  * @author Jean-Francois Arcand
  */
 public class MeteorServlet extends AtmosphereServlet {
+
     protected static final Logger logger = LoggerFactory.getLogger(MeteorServlet.class);
 
     private Servlet delegate;

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -26,7 +26,7 @@ public class SessionSupport implements HttpSessionListener {
 
     private final Logger logger = LoggerFactory.getLogger(SessionSupport.class);
 
-    public SessionSupport(){
+    public SessionSupport() {
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/di/Injector.java
Patch:
@@ -17,7 +17,7 @@
 
 /**
  * Represent an injector, capable of providing instances or inject resources into objects.
- * Implementations are likely to delegate to some DI frameworks like Google Guice or Spring
+ * Implementations are likely to delegate to some DI frameworks like Google Guice or Spring.
  *
  * @author Mathieu Carbou
  * @since 0.7

File: modules/cpr/src/main/java/org/atmosphere/di/InjectorProvider.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ServiceLoader;
 
 /**
- * Retreive the injector to use to inject resources into objects
+ * Retreive the injector to use to inject resources into objects.
  *
  * @author Mathieu Carbou
  * @since 0.7

File: modules/cpr/src/main/java/org/atmosphere/di/NoopInjector.java
Patch:
@@ -16,7 +16,7 @@
 package org.atmosphere.di;
 
 /**
- * Default injector which does nothing
+ * Default injector which does nothing.
  *
  * @author Mathieu Carbou
  * @since 0.7

File: modules/cpr/src/main/java/org/atmosphere/di/ServletContextHolder.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
- * Holds the reference of an object being able to return the current ServletContext of the web application
+ * Holds the reference of an object being able to return the current ServletContext of the web application.
  *
  * @author Mathieu Carbou
  * @since 0.7

File: modules/cpr/src/main/java/org/atmosphere/di/ServletContextProvider.java
Patch:
@@ -18,7 +18,7 @@
 import javax.servlet.ServletContext;
 
 /**
- * Mark an object as being able to provide a ServletContext
+ * Mark an object as being able to provide a ServletContext.
  *
  * @author Mathieu Carbou
  * @since 0.7

File: modules/cpr/src/main/java/org/atmosphere/handler/AnnotatedProxy.java
Patch:
@@ -23,7 +23,8 @@
 public interface AnnotatedProxy {
 
     /**
-     * The the Object the {@link org.atmosphere.cpr.AtmosphereHandler} is proxing.
+     * The Object the {@link org.atmosphere.cpr.AtmosphereHandler} is proxying.
+     *
      * @return
      */
     public Object target();

File: modules/cpr/src/main/java/org/atmosphere/handler/AtmosphereHandlerAdapter.java
Patch:
@@ -24,7 +24,7 @@
 import java.io.IOException;
 
 /**
- * An implementation of {@link AtmosphereHandler} that doesn't nothing.
+ * An implementation of {@link AtmosphereHandler} that does nothing.
  *
  * @author Jeanfrancois Arcand
  */
@@ -44,6 +44,5 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
 
     @Override
     public void destroy() {
-
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -139,7 +139,7 @@ public void onBroadcast(AtmosphereResourceEvent event) {
                          * invoked.
                          */
                         final List<Object> cachedMessages = retrieveCache(r, tracker, true);
-                        logger.trace("message size " + cachedMessages.size());
+                        logger.trace("message size {}", cachedMessages.size());
                         if (cachedMessages.size() > 0) {
                             logger.trace("About to write to the cache {}", r.uuid());
                             writeCache(r, cachedMessages);
@@ -150,7 +150,7 @@ public void onBroadcast(AtmosphereResourceEvent event) {
                         if (doNotSuspend.get()) {
                             AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.CONTINUE);
                         }
-                        logger.trace("doNotSuspend " + doNotSuspend.get());
+                        logger.trace("doNotSuspend {}", doNotSuspend.get());
                     }
                 });
             }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * This read the request's body and invoke the associated {@link org.atmosphere.cpr.Broadcaster} of an {@link AtmosphereResource}.
- * The broadcast always happens AFTER the request has been delivered to an {@link org.atmosphere.cpr.AtmosphereHandler}
+ * The broadcast always happens AFTER the request has been delivered to an {@link org.atmosphere.cpr.AtmosphereHandler}.
  *
  * @author Jeanfrancois Arcand
  */
@@ -52,7 +52,7 @@ public StringBuilder read(AtmosphereResource r) {
                     bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                 }
             } catch (IllegalStateException ex) {
-                logger.trace("",ex);
+                logger.trace("", ex);
                 Reader reader = r.getRequest().getReader();
                 if (reader != null) {
                     bufferedReader = new BufferedReader(reader);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/DefaultHeadersInterceptor.java
Patch:
@@ -37,6 +37,7 @@
  * @author Jeanfrancois Arcand
  */
 public class DefaultHeadersInterceptor extends AtmosphereInterceptorAdapter {
+
     private boolean injectCacheHeaders;
     private boolean enableAccessControl;
     private boolean writeHeaders;

File: modules/cpr/src/main/java/org/atmosphere/interceptor/InvokationOrder.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * A simple marker class to use with {@link org.atmosphere.cpr.AtmosphereInterceptor} in order to determine in which
  * position in the interceptor's chain the AtmosphereInterceptor must be installed.
- *
+ * <p/>
  * Normally all {@link org.atmosphere.cpr.AtmosphereInterceptor} are installed using the {@link InvokationOrder.PRIORITY#AFTER_DEFAULT}
  *
  * @author Jeanfrancois Arcand
@@ -46,6 +46,7 @@ enum PRIORITY {
 
     /**
      * Return the priority an AtmosphereInterceptor must be executed.
+     *
      * @return PRIORITY
      */
     PRIORITY priority();

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JSONPAtmosphereInterceptor.java
Patch:
@@ -69,9 +69,9 @@ public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft
                             // TODO: TOTALLY INEFFICIENT. We MUST uses binary replacement instead.
                             String s = new String(responseDraft, charEncoding);
                             return s.replaceAll("(['\"\\/])", "\\\\$1")
-                            .replaceAll("\b", "\\\\b").replaceAll("\n", "\\\\n")
-                            .replaceAll("\t", "\\\\t").replaceAll("\f", "\\\\f")
-                            .replaceAll("\r", "\\\\r").getBytes(charEncoding);
+                                    .replaceAll("\b", "\\\\b").replaceAll("\n", "\\\\n")
+                                    .replaceAll("\t", "\\\\t").replaceAll("\f", "\\\\f")
+                                    .replaceAll("\r", "\\\\r").getBytes(charEncoding);
                         }
                         return responseDraft;
                     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JavaScriptProtocol.java
Patch:
@@ -40,6 +40,7 @@
  * @author Jeanfrancois Arcand
  */
 public class JavaScriptProtocol extends AtmosphereInterceptorAdapter {
+
     private final static Logger logger = LoggerFactory.getLogger(JavaScriptProtocol.class);
     private String wsDelimiter = "|";
     private final TrackMessageSizeFilter f = new TrackMessageSizeFilter();

File: modules/cpr/src/main/java/org/atmosphere/interceptor/NginxInterceptor.java
Patch:
@@ -41,5 +41,4 @@ public Action inspect(AtmosphereResource r) {
         }
         return Action.CONTINUE;
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -53,7 +53,7 @@ public Action inspect(final AtmosphereResource r) {
         AtmosphereRequest request = AtmosphereResourceImpl.class.cast(r).getRequest(false);
         String s = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT);
         String uuid = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
-        if (p !=  null && s != null && uuid != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT)) {
+        if (p != null && s != null && uuid != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT)) {
             logger.trace("AtmosphereResource {} disconnected", uuid);
             AtmosphereResource ss = AtmosphereResourceFactory.getDefault().find(uuid);
             if (ss != null) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -38,7 +38,7 @@
 import static org.atmosphere.cpr.FrameworkConfig.CONTAINER_RESPONSE;
 
 /**
- * HTML 5 Server Side Events implementation.
+ * HTML 5 Server-Side Events implementation.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SessionCreationInterceptor.java
Patch:
@@ -45,6 +45,5 @@ public Action inspect(AtmosphereResource r) {
         }
         return Action.CONTINUE;
     }
-
 }
 

File: modules/cpr/src/main/java/org/atmosphere/util/AtmosphereFilterChain.java
Patch:
@@ -174,7 +174,7 @@ public void doFilter(ServletRequest request, ServletResponse response)
                 if (rd == null) {
                     throw new ServletException("No Servlet Found");
                 }
-                rd.forward(request,  response);
+                rd.forward(request, response);
             }
 
         } catch (IOException e) {

File: modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java
Patch:
@@ -49,8 +49,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class ExcludeSessionBroadcaster
-        extends DefaultBroadcaster {
+public class ExcludeSessionBroadcaster extends DefaultBroadcaster {
 
     private static final Logger logger = LoggerFactory.getLogger(ExcludeSessionBroadcaster.class);
 

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.atmosphere.util;
 
-import org.atmosphere.cpr.AtmosphereResponse;
-
 import javax.servlet.http.HttpServletRequest;
 import java.util.Enumeration;
 

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/FocusPoint.java
Patch:
@@ -25,7 +25,6 @@
  * @author : Siddique Hameed
  * @version : 0.1
  */
-
 public class FocusPoint {
 
     private String name;
@@ -46,7 +45,6 @@ public String getName() {
         return name;
     }
 
-
     public void setParentTrackPoint(FocusPoint parentFocusPoint) {
         this.parentFocusPoint = parentFocusPoint;
     }

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/URLBuildingStrategy.java
Patch:
@@ -8,6 +8,7 @@
  * @version : 0.1
  */
 public interface URLBuildingStrategy {
+
     public String buildURL(FocusPoint focusPoint);
 
     public void setRefererURL(String refererURL);

File: modules/cpr/src/main/java/org/atmosphere/util/annotation/ClassFileIterator.java
Patch:
@@ -45,7 +45,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-
 /**
  * {@code ClassFileIterator} is used to iterate over all Java ClassFile files
  * available within a specific context. For every Java ClassFile ({@code .class})
@@ -150,5 +149,4 @@ private static boolean endsWithIgnoreCase(final String value, final String suffi
         final int n = suffix.length();
         return value.regionMatches(true, value.length() - n, suffix, 0, n);
     }
-
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandlerAdapter.java
Patch:
@@ -22,7 +22,8 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class WebSocketHandlerAdapter implements WebSocketHandler{
+public class WebSocketHandlerAdapter implements WebSocketHandler {
+
     @Override
     public void onByteMessage(WebSocket webSocket, byte[] data, int offset, int length) throws IOException {
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java
Patch:
@@ -29,7 +29,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.util.Enumeration;
 
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
 
@@ -57,7 +56,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
 
         HttpServletRequest r = HttpServletRequest.class.cast(request);
         if (Utils.webSocketEnabled(r)) {
-            int draft =r.getIntHeader("Sec-WebSocket-Version");
+            int draft = r.getIntHeader("Sec-WebSocket-Version");
             if (draft < 0) {
                 draft = r.getIntHeader("Sec-WebSocket-Draft");
             }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketStreamingHandler.java
Patch:
@@ -30,7 +30,7 @@ public interface WebSocketStreamingHandler extends WebSocketHandler {
     /**
      * Invoked when a byte message is received.
      *
-     * @param webSocket a {@link WebSocket}
+     * @param webSocket   a {@link WebSocket}
      * @param inputStream
      */
     void onBinaryStream(WebSocket webSocket, InputStream inputStream) throws IOException;

File: modules/cpr/src/test/java/org/atmosphere/annotation/custom/CustomAnnotationTest.java
Patch:
@@ -54,7 +54,7 @@ public class CustomAnnotationTest {
     @BeforeMethod
     public void create() throws Throwable {
         framework = new AtmosphereFramework();
-        framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()) ;
+        framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName());
         framework.addAnnotationPackage(MyAnnotation.class);
         framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()) {
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -83,7 +83,7 @@ public void cancelAtmosphereResourceTest() throws ServletException, IOException
     }
 
     // This test is no longer working since isClosedByClient changes the behavior.
-    @Test (enabled = false)
+    @Test(enabled = false)
     public void restoreStateTest() throws ServletException, IOException {
         recovery.configure(config);
         recovery.inspect(r);
@@ -125,7 +125,7 @@ public void restorePartialStateTest() throws ServletException, IOException {
 
     }
 
-    @Test (enabled = false)
+    @Test(enabled = false)
     public void longPollingAggregatedTest() throws ServletException, IOException, ExecutionException, InterruptedException {
         final AtomicReference<Object> ref = new AtomicReference<Object>();
         AtmosphereResourceImpl r = (AtmosphereResourceImpl) AtmosphereResourceFactory.getDefault().create(config, "1234567");

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -94,7 +94,7 @@ public void testAtmosphereResourceCancel() throws ExecutionException, Interrupte
     public void testTimeoutAtmosphereResource() throws ExecutionException, InterruptedException, ServletException, IOException {
         Broadcaster two = ar.getAtmosphereConfig().getBroadcasterFactory().get(DefaultBroadcaster.class, "two");
         two.addAtmosphereResource(ar);
-        ar.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE,ar);
+        ar.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, ar);
         ar.getAtmosphereConfig().framework().setAsyncSupport(new AsynchronousProcessor(ar.getAtmosphereConfig()) {
             @Override
             public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOException, ServletException {

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
-import java.net.URI;
 import java.util.UUID;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;

File: modules/cpr/src/test/java/org/atmosphere/cpr/QueryStringTest.java
Patch:
@@ -22,13 +22,10 @@
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
-import javax.servlet.http.Cookie;
 import java.io.IOException;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
-import java.util.Set;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/ServiceTest.java
Patch:
@@ -28,6 +28,7 @@
 
 public class ServiceTest {
     private AtmosphereFramework framework;
+
     @BeforeMethod
     public void create() throws Throwable {
         framework = new AtmosphereFramework();

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketStreamingHandlerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.atmosphere.container.BlockingIOCometSupport;
 import org.atmosphere.websocket.WebSocket;
-import org.atmosphere.websocket.WebSocketHandler;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketStreamingHandler;
 import org.testng.annotations.AfterMethod;
@@ -32,8 +31,6 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.Reader;
-import java.io.StringReader;
-import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.util.Enumeration;
 import java.util.concurrent.ExecutionException;

File: modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java
Patch:
@@ -36,7 +36,7 @@ public class WriteTimeoutTest {
     private AtmosphereResource ar;
     private Broadcaster broadcaster;
     private AR atmosphereHandler;
-    private  AtmosphereConfig config;
+    private AtmosphereConfig config;
 
     @BeforeMethod
     public void setUp() throws Exception {

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -534,7 +534,7 @@ String uuid(AtmosphereResource r) {
             }
 
             s = r.getRequest().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
-            if (s != null && s != "0"){
+            if (s != null && s != "0") {
                 return s;
             } else {
                 return r.uuid();

File: modules/native/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -305,7 +305,9 @@ public void event(HttpEvent httpEvent) throws IOException, ServletException {
                 }
             }
         }
-        if (framework.asyncSupport.getClass().equals(JBossWebSocketSupport.class)) {
+
+        boolean isWebSocket = req.getHeader("Upgrade") == null ? false : true;
+        if (isWebSocket && framework.asyncSupport.getClass().equals(JBossWebSocketSupport.class)) {
             logger.trace("Dispatching websocket event: " + httpEvent);
             ((JBossWebSocketSupport) framework.asyncSupport).dispatch(httpEvent);
         } else {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -58,7 +58,7 @@ public Action inspect(final AtmosphereResource r) {
             AtmosphereResource ss = AtmosphereResourceFactory.getDefault().find(uuid);
             if (ss != null) {
                 // Block websocket closing detection
-                ss.getRequest().setAttribute(ASYNCHRONOUS_HOOK, null);
+                AtmosphereResourceImpl.class.cast(ss).getRequest(false).setAttribute(ASYNCHRONOUS_HOOK, null);
                 AtmosphereResourceEventImpl.class.cast(ss.getAtmosphereResourceEvent()).isClosedByClient(true);
 
                 p.completeLifecycle(ss, false);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -157,6 +157,7 @@ private void scanForAnnotation(AtmosphereFramework f) {
             // JBoss|vfs with APR issue, or any strange containers may fail. This is a hack for them.
             // https://github.com/Atmosphere/atmosphere/issues/1292
             if (!coreAnnotationsFound.get()) {
+                logger.warn("Unable to detect annotations. Application may to deploy.");
                 for (Class a : coreAnnotations) {
                     try {
                         handler.handleProcessor(loadClass(getClass(), a.getName()));

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -54,6 +54,7 @@
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.Callable;
 
@@ -999,7 +1000,7 @@ public final static class Builder {
         private String servletPath = "";
         private String requestURI;
         private String requestURL;
-        private Map<String, Object> localAttributes = Collections.synchronizedMap(new HashMap<String, Object>());
+        private Map<String, Object> localAttributes = new ConcurrentHashMap<String, Object>();
         private InputStream inputStream;
         private String remoteAddr = "";
         private String remoteHost = "";

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -426,7 +426,7 @@ public Map<String, String> headers() {
             for (Cookie c : cookies) {
                 headers.put("Set-Cookie", c.toString());
             }
-            headerHandled = false;
+            headerHandled = true;
         }
         return headers;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1757,15 +1757,15 @@ public InetSocketAddress address() {
         }
 
         public int getPort() {
-            return address.getPort();
+            return address().getPort();
         }
 
         public String getHostAddress() {
-            return address.getAddress().getHostAddress();
+            return address().getAddress().getHostAddress();
         }
 
         public String getHostName() {
-            return address.getHostName();
+            return address().getHostName();
         }
 
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -694,9 +694,7 @@ public Enumeration<String> getInitParameterNames() {
 
     private void configureAnnotationPackages() {
         // We must scan the default annotation set.
-        if (!allowAllClassesScan) {
-            annotationPackages.add(Processor.class.getPackage().getName());
-        }
+        annotationPackages.add(Processor.class.getPackage().getName());
 
         String s = config.getInitParameter(ApplicationConfig.CUSTOM_ANNOTATION_PACKAGE);
         if (s != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -103,10 +103,7 @@ private void scanForAnnotation(List<String> packages) {
                 for (String p : packages) {
                     logger.trace("Package {} scanned for @AtmosphereAnnotation", p);
                     detector.detect(p);
-
                 }
-            } else {
-                detector.detect();
             }
         } catch (IOException e) {
             logger.warn("Unable to scan annotation", e);

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9WebSocketHandler.java
Patch:
@@ -32,7 +32,7 @@ public Jetty9WebSocketHandler(HttpServletRequest request, AtmosphereFramework fr
     private AtmosphereRequest cloneRequest(final HttpServletRequest request) {
         try {
             AtmosphereRequest r = AtmosphereRequest.wrap(request);
-            return AtmosphereRequest.cloneRequest(r, false, framework.getAtmosphereConfig().isSupportSession(), false);
+            return AtmosphereRequest.cloneRequest(r, false, false, false);
         } catch (Exception ex) {
             logger.error("", ex);
             throw new RuntimeException("Invalid WebSocket Request");

File: samples/chat/src/main/java/org/atmosphere/samples/chat/custom/SampleConfig.java
Patch:
@@ -33,6 +33,6 @@ public class SampleConfig implements Processor {
 
     @Override
     public void handle(AtmosphereFramework framework, Class<?> annotatedClass) {
-        logger.info("Custom annotation {} discovered. Starting the Chat Sample", annotation.getName());
+        logger.info("Custom annotation {} discovered. Starting the Chat Sample", annotatedClass.getAnnotation(Config.class));
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1122,6 +1122,8 @@ public Object call() throws Exception {
             }
             return null;
         }
+
+        public void interrupt() {}
     }
 
     public void onException(Throwable t, final AtmosphereResource ar) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -431,9 +431,9 @@ public interface ApplicationConfig {
      * The default content-type value used when Atmosphere requires one.
      * <p>
      * Default: "text/plain"<br>
-     * Value: org.atmosphere.cpr.defaultContextType
+     * Value: org.atmosphere.cpr.defaultContentType
      */
-    String DEFAULT_CONTENT_TYPE = ApplicationConfig.class.getPackage().getName() + ".defaultContextType";
+    String DEFAULT_CONTENT_TYPE = ApplicationConfig.class.getPackage().getName() + ".defaultContentType";
     /**
      * A list of {@link AtmosphereInterceptor} class name that will be invoked before the {@link AtmosphereResource}
      * gets delivered to an application or framework.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -543,8 +543,9 @@ protected void preventOOM() {
 
         try {
             Class.forName("org.testng.Assert");
-        } catch (ClassNotFoundException e) {
             allowAllClassesScan = false;
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -70,7 +70,9 @@ public JSR356Endpoint(AtmosphereFramework framework, WebSocketProcessor webSocke
     public void onOpen(Session session, EndpointConfig endpointConfig) {
         webSocket = new JSR356WebSocket(session, framework.getAtmosphereConfig());
 
+        // TODO: This is quite bogus!
         Map<String, String> headers = new HashMap<String, String>();
+        headers.put("Sec-WebSocket-Version", "13");
         headers.put("Connection", "Upgrade");
         headers.put("Upgrade", "websocket");
 
@@ -83,6 +85,7 @@ public void onOpen(Session session, EndpointConfig endpointConfig) {
 
             request = new AtmosphereRequest.Builder()
                     .requestURI(session.getRequestURI().toString())
+                    .requestURL(session.getRequestURI().toString())
                     .headers(headers)
                     .contextPath(framework.getServletContext().getContextPath())
                     .pathInfo(pathInfo.toString())

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java
Patch:
@@ -55,7 +55,8 @@ public void close() {
         logger.trace("WebSocket.close() for AtmosphereResource {}", resource() != null ? resource().uuid() : "null");
         try {
             webSocketConnection.close();
-        } catch (IOException e) {
+        // 9.0 -> 9.1 change } catch (IOException e) {
+        } catch (Throwable e) {
             logger.trace("Close error", e);
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -963,8 +963,7 @@ protected void doInitParams(ServletConfig sc) {
                 try {
                     sc.getServletContext().addListener(SessionSupport.class);
                 } catch (Throwable t) {
-                    logger.error("SessionSupport error", t);
-                    logger.debug("Make sure you define {} as a listener in web.xml", SessionSupport.class.getName());
+                    logger.warn("SessionSupport error. Make sure you define {} as a listener in web.xml instead", SessionSupport.class.getName(), t);
                 }
             } else {
                 logger.debug("Make sure you define {} as a listener in web.xml", SessionSupport.class.getName());

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -41,7 +41,7 @@ public void sessionDestroyed(HttpSessionEvent se) {
             HttpSession s = se.getSession();
             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {
                 for (AtmosphereResource r : b.getAtmosphereResources()) {
-                    if (r.session().getId().equals(s.getId())) {
+                    if (r.session() != null && r.session().getId().equals(s.getId())) {
                         AtmosphereResourceImpl.class.cast(r).session(null);
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -184,8 +184,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         }
 
         if (config.handlers().isEmpty()) {
-            logger.error("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
-            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
+            logger.error("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @___Service");
+            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @___Service");
         }
 
         if (res.request() == null) {

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/AbstractHttpAtmosphereHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/AtmosphereServletTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BlockingIOCometSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BroadcasterLifecycleTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
@@ -14,7 +14,7 @@
  * the License.
  */
 /*
-* Copyright 2012 Jeanfrancois Arcand
+* Copyright 2013 Jeanfrancois Arcand
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BroadcasterScopeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/Grizzly2CometSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/GrizzlyCometSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/Jetty6CometSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/Jetty7CometSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/MetaBroadcasterLoadTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jean-Francois Arcand
+ * Copyright 2013 Jean-Francois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/MeteorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright 2012 Jeanfrancois Arcand
+* Copyright 2013 Jeanfrancois Arcand
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/Tomcat6CometSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/UUIDBroadcasterCacheTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright 2012 Jeanfrancois Arcand
+* Copyright 2013 Jeanfrancois Arcand
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/websocket/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/websocket/Grizzly2WebSocketSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/websocket/JettyWebSocketSupportTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BaseGrizzyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BaseJettyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BasePubSubTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BaseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BlockingIOJerseyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/ConcurrentResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/ConcurrentResourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/GrizzlyJerseyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty6JerseyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty7JerseyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PerRequestResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PerRequestResourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/RecyclableBroadcaster.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/SingletonResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/SingletonResourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/TomcatJerseyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/BroadcastFilterAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/AnnotationUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/AsyncSupportListenerServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/AsyncSupportServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereHandlerServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereInterceptorServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/AtmosphereServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcastFilterServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterCacheInspectorServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterCacheServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterFactoryServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterListenerServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/BroadcasterServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/EndpointMapperServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/ManagedServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/MeteorServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketHandlerServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketProcessorServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/annotation/WebSocketProtocolServiceProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcastMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AnnotationServiceInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/managed/AtmosphereHandlerServiceInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/managed/MeteorServiceInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/Singleton.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356AsyncSupport.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356ServerApplicationConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/container/version/JSR356WebSocket.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cpr/Entry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/handler/AnnotatedProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/handler/AtmosphereHandlerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AllowInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/interceptor/NginxInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SuspendTrackerInterceptor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/util/ExecutorsFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/util/ServletProxyFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/FocusPoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/async-annotation-pubsub/src/main/java/org/atmosphere/samples/pubsub/AsynchronousExecution.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/async-annotation-pubsub/src/main/java/org/atmosphere/samples/pubsub/FileResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/atmosphere-ee6/src/main/java/org/jersey/devoxx/samples/ee6/atmosphere/TimerResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/channel/src/main/java/org/atmosphere/samples/pubsub/TypedChannel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/chat-multiroom/src/main/java/org/atmosphere/samples/chat/UserMessage.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/chat/src/main/java/org/atmosphere/samples/chat/custom/SampleConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/commons/src/main/java/org/atmosphere/commons/util/EventsLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/commons/src/main/java/org/atmosphere/samples/chat/jersey/JsonpFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jersey-pubsub/src/main/java/org/atmosphere/samples/pubsub/EventsLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jersey-pubsub/src/main/java/org/atmosphere/samples/pubsub/FileResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jersey-pubsub/src/main/java/org/atmosphere/samples/pubsub/JerseyPubSub.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jersey2-chat/src/main/java/org/atmosphere/samples/chat/jersey/Jersey2Resource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jquery-multirequest/src/main/java/org/atmosphere/samples/multirequest/handlers/EventsLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jquery-multirequest/src/main/java/org/atmosphere/samples/multirequest/handlers/Subscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jquery-multirequest/src/main/java/org/atmosphere/samples/multirequest/jobs/AtmosphereJob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jquery-multirequest/src/main/java/org/atmosphere/samples/multirequest/jobs/Job1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jquery-multirequest/src/main/java/org/atmosphere/samples/multirequest/jobs/Job2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/jquery-websockethandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/meteor-chat/src/main/java/org/atmosphere/samples/chat/MeteorChat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/EventsLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/JAXBBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSubBroadcaster.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ChatResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/Message.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/sse-chat/src/main/java/org/atmosphere/samples/chat/SSEAtmosphereHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/sse-rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/Message.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/sse-rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ResourceChat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/sse-rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/Response.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/twitter-live-feed/src/main/java/org/atmosphere/samples/twitter/EventsLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/twitter-live-feed/src/main/java/org/atmosphere/samples/twitter/FileResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/twitter-live-feed/src/main/java/org/atmosphere/samples/twitter/TwitterFeed.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/websocket-chat/src/main/java/org/atmosphere/samples/chat/WebSocketChat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Jeanfrancois Arcand
+ * Copyright 2013 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -35,6 +35,7 @@
 
 import static org.atmosphere.cpr.ApplicationConfig.PROPERTY_USE_STREAM;
 import static org.atmosphere.cpr.FrameworkConfig.CALLBACK_JAVASCRIPT_PROTOCOL;
+import static org.atmosphere.cpr.FrameworkConfig.CONTAINER_RESPONSE;
 
 /**
  * HTML 5 Server Side Events implementation.
@@ -150,7 +151,8 @@ public void prePayload(AtmosphereResponse response, byte[] data, int offset, int
                     public void postPayload(AtmosphereResponse response, byte[] data, int offset, int length) {
                         // The CALLBACK_JAVASCRIPT_PROTOCOL may be called by a framework running on top of Atmosphere
                         // In that case, we must pad/protocol indenendently of the state of the AtmosphereResource
-                        if (r.isSuspended() || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null) {
+                        if (r.isSuspended() || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null
+                                || r.getRequest().getAttribute(CONTAINER_RESPONSE) != null) {
                             response.write(END, true);
                         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -202,6 +202,9 @@ public List<Class<? extends AsyncSupport>> detectWebSocketPresent(final boolean
                     if (testClassExists(TOMCAT_WEBSOCKET))
                         add(Tomcat7AsyncSupportWithWebSocket.class);
 
+                    if (testClassExists(JETTY_9))
+                        add(Jetty9AsyncSupportWithWebSocket.class);
+
                     if (testClassExists(JETTY_8))
                         add(JettyAsyncSupportWithWebSocket.class);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AnnotationHandler.java
Patch:
@@ -75,6 +75,8 @@ private AnnotationHandler() {
     // TODO: Refactor this class, please!
     public static void handleAnnotation(final AtmosphereFramework framework, final Class<? extends Annotation> annotation, final Class<?> discoveredClass) {
         logger.info("Found Annotation in {} being scanned: {}", discoveredClass, annotation);
+        framework.annotationScanned(true);
+
         if (AtmosphereHandlerService.class.equals(annotation)) {
             try {
                 AtmosphereHandlerService a = discoveredClass.getAnnotation(AtmosphereHandlerService.class);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -187,9 +187,6 @@ public List<Class<? extends AsyncSupport>> detectWebSocketPresent(final boolean
                     if (testClassExists(JSR356_WEBSOCKET))
                         add(JSR356AsyncSupport.class);
 
-                    if (testClassExists(JBOSS_AS7_WEBSOCKET))
-                        add(JBossWebSocketSupport.class);
-
                     if (testClassExists(TOMCAT_WEBSOCKET))
                         add(Tomcat7Servlet30SupportWithWebSocket.class);
 
@@ -213,6 +210,9 @@ public List<Class<? extends AsyncSupport>> detectWebSocketPresent(final boolean
 
                     if (testClassExists(GRIZZLY2_WEBSOCKET))
                         add(Grizzly2WebSocketSupport.class);
+
+                    if (testClassExists(JBOSS_AS7_WEBSOCKET))
+                        add(JBossWebSocketSupport.class);
                 }
             }
         };

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import org.atmosphere.cpr.AtmosphereInterceptorWriter;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResource.TRANSPORT;
+import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.util.ExecutorsFactory;
 import org.slf4j.Logger;
@@ -105,7 +106,7 @@ public Object call() throws Exception {
                                     } catch (Throwable t) {
                                         logger.trace("{}", r.uuid(), t);
                                         try {
-                                            r.close();
+                                            AtmosphereResourceImpl.class.cast(r).close();
                                         } catch (IOException e) {};
                                         writeFuture.cancel(false);
                                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -968,7 +968,7 @@ protected boolean checkCachedAndPush(final AtmosphereResource r, final Atmospher
             List<Object> cacheMessages = (List) e.getMessage();
             BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(e.getMessage(), 1);
             LinkedList<Object> filteredMessage = new LinkedList<Object>();
-            LinkedList<Object> filteredMessageClone = new LinkedList<Object>();
+            LinkedList<Object> filteredMessageClone = null;
             Entry entry;
             Object newMessage;
             for (Object o : cacheMessages) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -92,7 +92,7 @@ public class DefaultAsyncSupportResolver implements AsyncSupportResolver {
     public final static String SERVLET_30 = "javax.servlet.AsyncListener";
     public final static String GLASSFISH_V2 = "com.sun.enterprise.web.PEWebContainer";
     public final static String TOMCAT_7 = "org.apache.catalina.comet.CometFilterChain";
-    public final static String TOMCAT_WEBSOCKET = "org.apache.catalina.websocket.WebSocketServlet";
+    public final static String TOMCAT_WEBSOCKET = "org.apache.coyote.http11.upgrade.UpgradeInbound";
     public final static String TOMCAT = "org.apache.coyote.http11.Http11NioProcessor";
     public final static String JBOSS_5 = "org.jboss.";
     public final static String JETTY = "org.mortbay.util.ajax.Continuation";

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -150,7 +150,7 @@ private String toQs(){
                 q.append(e.getKey()).append("=").append(k).append("&");
             }
         }
-        q.deleteCharAt(q.length()-1);
+        if (q.length() > 0) q.deleteCharAt(q.length()-1);
         return q.toString();
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -196,7 +196,7 @@ private static String unableToDetectComet() {
         StringBuilder sb = new StringBuilder();
         sb.append("JBoss failed to detect this is a Comet application because the APR Connector is not enabled. ");
         sb.append("\nMake sure atmosphere-compat-jboss.jar is not under your WEB-INF/lib and ");
-        sb.append("You must use the AtmosphereCometNativeServlet in order to use native Comet Support");
+        sb.append("You must use the atmosphere-native-runtime dependency in order to use native Comet Support");
         sb.append("\nthere is no context.xml under WEB-INF");
         return sb.toString();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -242,7 +242,7 @@ private static String unableToDetectComet() {
         StringBuilder sb = new StringBuilder();
         sb.append("Tomcat failed to detect this is a Comet application because context.xml ");
         sb.append("is missing or the Http11NioProtocol Connector is not enabled.");
-        sb.append("You must use the AtmosphereCometNativeServlet in order to use native Comet Support");
+        sb.append("You must use the atmosphere-native-runtime dependency in order to use native Comet Support");
         sb.append("\nIf that's not the case, you can also remove META-INF/context.xml and WEB-INF/lib/atmosphere-compat-tomcat7.jar");
         return sb.toString();
     }

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -233,7 +233,7 @@ private static String unableToDetectComet() {
         StringBuilder sb = new StringBuilder();
         sb.append("Tomcat failed to detect this is a Comet application because context.xml ");
         sb.append("is missing or the Http11NioProtocol Connector is not enabled.");
-        sb.append("You must use the AtmosphereCometNativeServlet in order to use native Comet Support");
+        sb.append("You must use the atmosphere-native-runtime dependency in order to use native Comet Support");
         sb.append("\nIf that's not the case, you can also remove META-INF/context.xml and WEB-INF/lib/atmosphere-compat-tomcat.jar");
         return sb.toString();
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -763,6 +763,7 @@ protected void deliverPush(Entry entry, boolean rec) {
 
                         if (!deliverMessage || entry.message == null) {
                             logger.debug("Skipping broadcast delivery {} for resource {} ", entry.message, r.uuid());
+                            bc.getBroadcasterCache().clearCache(getID(), r, entry.cache);
                             continue;
                         }
 
@@ -776,6 +777,7 @@ protected void deliverPush(Entry entry, boolean rec) {
 
                     if (!deliverMessage || entry.message == null) {
                         logger.debug("Skipping broadcast delivery {} for resource {} ", entry.message, entry.resource.uuid());
+                        bc.getBroadcasterCache().clearCache(getID(), entry.resource, entry.cache);
                         return;
                     }
 
@@ -790,6 +792,7 @@ protected void deliverPush(Entry entry, boolean rec) {
 
                         if (!deliverMessage || entry.message == null) {
                             logger.debug("Skipping broadcast delivery {} for resource {} ", entry.message, r.uuid());
+                            bc.getBroadcasterCache().clearCache(getID(), r, entry.cache);
                             continue;
                         }
 

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -29,12 +29,14 @@ public class DefaultBroadcasterCache implements BroadcasterCache {
 
     @Override
     public void start() {
-
     }
 
     @Override
     public void stop() {
+    }
 
+    @Override
+    public void cleanup() {
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -331,6 +331,7 @@ public void destroy() {
     protected void destroy(boolean force) {
         if (!force && !handleExecutors) return;
 
+        broadcasterCache.cleanup();
         if ((force || !shared) && broadcasterCache != null) {
             broadcasterCache.stop();
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1672,7 +1672,6 @@ public String toString() {
         return new StringBuilder().append("\n\tName: ").append(name)
                 .append("\n\tAtmosphereResource: ").append(resources.size())
                 .append("\n\tBroadcasterCache ").append(bc.getBroadcasterCache())
-                .append(this.getClass().getName()).append("@").append(this.hashCode())
                 .toString();
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
Patch:
@@ -250,7 +250,7 @@ public String toString() {
                 "\n\t isCancelled=" + isCancelled +
                 "\n\t isResumedOnTimeout=" + isResumedOnTimeout +
                 "\n\t throwable=" + throwable +
-                "\n\t resource=" + resource.uuid() +
+                "\n\t resource=" + resource != null ? resource.uuid() : "null" +
                 '}';
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -863,8 +863,8 @@ protected boolean perRequestFilter(AtmosphereResource r, Entry msg, boolean cach
                 msg.message = a.message();
             }
         } else {
-            logger.warn("Request is no longer valid {}, Message {} will be cached", r.uuid(), msg.originalMessage);
             if (cache) {
+                logger.warn("Request is no longer valid {}, Message {} will be cached", r.uuid(), msg.originalMessage);
                 bc.getBroadcasterCache().addToCache(getID(), r, new BroadcastMessage(msg.originalMessage));
             }
             return false;

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -83,8 +83,8 @@ public abstract class AbstractReflectorAtmosphereHandler implements AtmosphereHa
     /**
      * Write the {@link AtmosphereResourceEvent#getMessage()} back to the client using
      * the {@link org.atmosphere.cpr.AtmosphereResponse#getOutputStream()} or {@link org.atmosphere.cpr.AtmosphereResponse#getWriter()}.
-     * If a {@link org.atmosphere.cpr.Serializer} is defined, it will be invoked and the writ operation
-     * will be delegated to to it.
+     * If a {@link org.atmosphere.cpr.Serializer} is defined, it will be invoked and the write operation
+     * will be delegated to it.
      * <p/>
      * By default, this method will try to use {@link org.atmosphere.cpr.AtmosphereResponse#getWriter()}.
      *

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -52,9 +52,10 @@ public JSR356Endpoint(AtmosphereFramework framework, WebSocketProcessor webSocke
         this.framework = framework;
         this.webSocketProcessor = webSocketProcessor;
 
+        // TODO: Find a way to set those values.
         String s = framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_IDLETIME);
         if (s != null) {
-            webSocketWriteTimeout = Integer.valueOf(1);
+            webSocketWriteTimeout = Integer.valueOf(s);
         } else {
             webSocketWriteTimeout = -1;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -297,7 +297,7 @@ public AsyncSupport resolve(boolean useNativeIfPossible, boolean defaultToBlocki
 
         if (cs == null) {
             AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());
-            return nativeSupport == null ? defaultCometSupport(useServlet30Async) : nativeSupport;
+            return nativeSupport == null ? defaultCometSupport(defaultToBlocking) : nativeSupport;
         } else {
             return cs;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -297,7 +297,7 @@ public AsyncSupport resolve(boolean useNativeIfPossible, boolean defaultToBlocki
 
         if (cs == null) {
             AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());
-            return nativeSupport == null ? defaultCometSupport(useServlet30Async) : nativeSupport;
+            return nativeSupport == null ? defaultCometSupport(defaultToBlocking) : nativeSupport;
         } else {
             return cs;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -297,7 +297,7 @@ public AsyncSupport resolve(boolean useNativeIfPossible, boolean defaultToBlocki
 
         if (cs == null) {
             AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());
-            return nativeSupport == null ? new BlockingIOCometSupport(config) : nativeSupport;
+            return nativeSupport == null ? defaultCometSupport(useServlet30Async) : nativeSupport;
         } else {
             return cs;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -297,7 +297,7 @@ public AsyncSupport resolve(boolean useNativeIfPossible, boolean defaultToBlocki
 
         if (cs == null) {
             AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());
-            return nativeSupport == null ? new BlockingIOCometSupport(config) : nativeSupport;
+            return nativeSupport == null ? defaultCometSupport(useServlet30Async) : nativeSupport;
         } else {
             return cs;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -581,10 +581,10 @@ public Enumeration<String> getInitParameterNames() {
             initEndpointMapper();
 
             autoDetectContainer();
-            configureWebDotXmlAtmosphereHandler(sc);
+            configureWebDotXmlAtmosphereHandler(scFacade);
             asyncSupport.init(scFacade);
             initAtmosphereHandler(scFacade);
-            configureAtmosphereInterceptor(sc);
+            configureAtmosphereInterceptor(scFacade);
             analytics();
 
             if (broadcasterCacheClassName == null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class AtmosphereServlet extends HttpServlet{
+public class AtmosphereServlet extends HttpServlet {
 
     protected static final Logger logger = LoggerFactory.getLogger(AtmosphereServlet.class);
     protected AtmosphereFramework framework;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -296,7 +296,8 @@ public AsyncSupport resolve(boolean useNativeIfPossible, boolean defaultToBlocki
         }
 
         if (cs == null) {
-            return new BlockingIOCometSupport(config);
+            AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());
+            return nativeSupport == null ? new BlockingIOCometSupport(config) : nativeSupport;
         } else {
             return cs;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFilter.java
Patch:
@@ -80,14 +80,14 @@ public class AtmosphereFilter implements Filter {
 
     private static final Logger logger = LoggerFactory.getLogger(AtmosphereFilter.class);
 
-    private final AtmosphereNativeCometServlet as;
+    private final AtmosphereServlet as;
 
     private final static String EXCLUDE_FILES = "^.*\\.(ico|ICO|jpg|JPG|gif|GIF|doc|DOC|pdf|PDF)$";
 
     private String excluded = EXCLUDE_FILES;
 
     public AtmosphereFilter() {
-        as = new AtmosphereNativeCometServlet(true);
+        as = new AtmosphereServlet(true);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -919,6 +919,7 @@ protected void executeAsyncWrite(final AsyncWriteToken token) {
 
             r.getRequest().setAttribute(ASYNC_TOKEN, token);
             prepareInvokeOnStateChange(r, event);
+            r.getRequest().setAttribute(FrameworkConfig.MESSAGE_WRITTEN, "true");
         } finally {
             if (notifyListeners) {
                 r.notifyListeners();

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -82,7 +82,8 @@ public void cancelAtmosphereResourceTest() throws ServletException, IOException
         assertEquals(recovery.states().size(), 1);
     }
 
-    @Test
+    // This test is no longer working since isClosedByClient changes the behavior.
+    @Test (enabled = false)
     public void restoreStateTest() throws ServletException, IOException {
         recovery.configure(config);
         recovery.inspect(r);
@@ -124,7 +125,7 @@ public void restorePartialStateTest() throws ServletException, IOException {
 
     }
 
-    @Test
+    @Test (enabled = false)
     public void longPollingAggregatedTest() throws ServletException, IOException, ExecutionException, InterruptedException {
         final AtomicReference<Object> ref = new AtomicReference<Object>();
         AtmosphereResourceImpl r = (AtmosphereResourceImpl) AtmosphereResourceFactory.getDefault().create(config, "1234567");

File: samples/websocket-chat/src/main/java/org/atmosphere/samples/chat/WebSocketChat.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.atmosphere.config.service.WebSocketHandlerService;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
-import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.atmosphere.websocket.WebSocket;
+import org.atmosphere.websocket.WebSocketEventListenerAdapter;
 import org.atmosphere.websocket.WebSocketHandler;
 import org.atmosphere.websocket.WebSocketHandlerAdapter;
 import org.codehaus.jackson.map.ObjectMapper;
@@ -42,7 +42,7 @@ public class WebSocketChat extends WebSocketHandlerAdapter {
 
     @Override
     public void onOpen(WebSocket webSocket) throws IOException {
-        webSocket.resource().addEventListener(new AtmosphereResourceEventListenerAdapter() {
+        webSocket.resource().addEventListener(new WebSocketEventListenerAdapter() {
             @Override
             public void onDisconnect(AtmosphereResourceEvent event) {
                 if (event.isCancelled()) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1654,7 +1654,7 @@ public void run() {
     public String toString() {
         return new StringBuilder().append("\n\tName: ").append(name)
                 .append("\n\tAtmosphereResource: ").append(resources.size())
-                .append("\n\tBroasdcasterCache ").append(bc.getBroadcasterCache())
+                .append("\n\tBroadcasterCache ").append(bc.getBroadcasterCache())
                 .append(this.getClass().getName()).append("@").append(this.hashCode())
                 .toString();
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1227,7 +1227,9 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
                         initParams.put(DISABLE_ONSTATE_EVENT, "true");
                         useStreamForFlushingComments = true;
                         broadcasterClassName = lookupDefaultBroadcasterType(JERSEY_BROADCASTER);
+                        broadcasterFactory.destroy();
                         broadcasterFactory = null;
+                        configureBroadcasterFactory();
                         configureBroadcaster();
                     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
Patch:
@@ -60,8 +60,8 @@
 
 /**
  * A BroadcasterCache is used to persist broadcasted Object {@link Broadcaster#broadcast(Object)}. Disconnected clients
- * can always retrieve message that were broadcasted during their "downtime". {@link BroadcasterCache} are useful when
- * a the long polling technique is used and prevent application from loosing event between re-connection.
+ * can always retrieve messages that were broadcasted during their "downtime". {@link BroadcasterCache} is useful when
+ * the long polling technique is used to prevent applications from loosing event between re-connection.
  * <p/>
  * A BroadcasterCache can be configured by invoking {@link org.atmosphere.cpr.BroadcasterConfig#setBroadcasterCache(BroadcasterCache)} by
  * defining it in your web/application.xml or by using the {@link org.atmosphere.config.service.BroadcasterCacheService}

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
Patch:
@@ -60,8 +60,8 @@
 
 /**
  * A BroadcasterCache is used to persist broadcasted Object {@link Broadcaster#broadcast(Object)}. Disconnected clients
- * can always retrieve message that were broadcasted during their "downtime". {@link BroadcasterCache} are useful when
- * a the long polling technique is used and prevent application from loosing event between re-connection.
+ * can always retrieve messages that were broadcasted during their "downtime". {@link BroadcasterCache} is useful when
+ * the long polling technique is used to prevent applications from loosing event between re-connection.
  * <p/>
  * A BroadcasterCache can be configured by invoking {@link org.atmosphere.cpr.BroadcasterConfig#setBroadcasterCache(BroadcasterCache)} by
  * defining it in your web/application.xml or by using the {@link org.atmosphere.config.service.BroadcasterCacheService}

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -50,7 +50,7 @@ public interface ApplicationConfig {
      */
     String PROPERTY_BLOCKING_COMETSUPPORT = "org.atmosphere.useBlocking";
     /**
-     * Set Atmosphere to throw eception on critical method of the cloned request
+     * Set Atmosphere to throw exception on cloned request  
      * <p>
      * Default: false<br>
      * Value: org.atmosphere.throwExceptionOnClonedRequest 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -141,7 +141,7 @@ public boolean isThrowExceptionOnCloned()
     }
     
     /**
-     * Enable/Disable Exception in cloned request
+     * Enable/Disable Exception on cloned request
      * @param throwExceptionOnCloned
      */
     public void setThrowExceptionOnCloned(boolean throwExceptionOnCloned)

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -50,7 +50,7 @@ public interface ApplicationConfig {
      */
     String PROPERTY_BLOCKING_COMETSUPPORT = "org.atmosphere.useBlocking";
     /**
-     * Set Atmosphere to throw eception on critical method of the cloned request
+     * Set Atmosphere to throw exception on cloned request  
      * <p>
      * Default: false<br>
      * Value: org.atmosphere.throwExceptionOnClonedRequest 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -141,7 +141,7 @@ public boolean isThrowExceptionOnCloned()
     }
     
     /**
-     * Enable/Disable Exception in cloned request
+     * Enable/Disable Exception on cloned request
      * @param throwExceptionOnCloned
      */
     public void setThrowExceptionOnCloned(boolean throwExceptionOnCloned)

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.config.service.AsyncSupportService;
 import org.atmosphere.config.service.AtmosphereHandlerService;
 import org.atmosphere.config.service.AtmosphereInterceptorService;
+import org.atmosphere.config.service.AtmosphereService;
 import org.atmosphere.config.service.BroadcasterCacheInspectorService;
 import org.atmosphere.config.service.BroadcasterCacheService;
 import org.atmosphere.config.service.BroadcasterFactoryService;
@@ -179,6 +180,7 @@ public Class<? extends Annotation>[] annotations() {
                             WebSocketProcessorService.class,
                             BroadcasterCacheInspectorService.class,
                             ManagedService.class,
+                            AtmosphereService.class,
                             EndpoinMapperService.class,
                     };
                 }

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ChatResource.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.atmosphere.annotation.Broadcast;
 import org.atmosphere.annotation.Suspend;
+import org.atmosphere.config.service.AtmosphereService;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
@@ -29,6 +30,7 @@
  * @author Jeanfrancois Arcand
  */
 @Path("/")
+@AtmosphereService
 public class ChatResource {
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -67,7 +67,7 @@ public AnnotationProcessor configure(final AtmosphereFramework framework) {
 
         Map<Class<? extends Annotation>, Set<Class<?>>> annotations = (Map<Class<? extends Annotation>, Set<Class<?>>>) sc.getAttribute(ANNOTATION_ATTRIBUTE);
 
-        if (annotations == null) {
+        if (annotations == null || annotations.isEmpty()) {
             delegate = new BytecodeBasedAnnotationProcessor();
         } else {
             delegate = new ServletContainerInitializerAnnotationProcessor(annotations, framework);

File: modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java
Patch:
@@ -82,7 +82,7 @@ public Future<Object> broadcast(Object msg, AtmosphereResource r) {
         }
 
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, sub.size(),  this);
-        messages.offer(new Entry(newMsg, sub, f, msg));
+        dispatchMessages(new Entry(newMsg, sub, f, msg));
         return f;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/util/ExcludeSessionBroadcaster.java
Patch:
@@ -82,7 +82,7 @@ public Future<Object> broadcast(Object msg, AtmosphereResource r) {
         }
 
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, sub.size(),  this);
-        messages.offer(new Entry(newMsg, sub, f, msg));
+        dispatchMessages(new Entry(newMsg, sub, f, msg));
         return f;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceStateRecovery.java
Patch:
@@ -81,7 +81,7 @@ public void run() {
                     }
                 }
             }
-        }, timeout, timeout, TimeUnit.NANOSECONDS);
+        }, timeout, timeout, TimeUnit.MILLISECONDS);
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java
Patch:
@@ -88,7 +88,7 @@ public U map(AtmosphereRequest req, Map<String, U> handlers) {
 
                 // (4) try without a path
                 if (handler == null) {
-                    String p = path.lastIndexOf("/") == 0 ? "/" : path.substring(0, path.lastIndexOf("/"));
+                    String p = path.lastIndexOf("/") <= 0 ? "/" : path.substring(0, path.lastIndexOf("/"));
                     while (p.length() > 0) {
                         handler = map(p, handlers);
 
@@ -131,7 +131,7 @@ public U map(String path, Map<String, U> handlers) {
 
                 // (4) try without a path
                 if (handler == null) {
-                    String p = path.lastIndexOf("/") == 0 ? "/" : path.substring(0, path.lastIndexOf("/"));
+                    String p = path.lastIndexOf("/")  <= 0 ? "/" : path.substring(0, path.lastIndexOf("/"));
                     while (p.length() > 0 && p.indexOf("/") != -1) {
                         handler = match(p, handlers);
 

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -297,7 +297,6 @@ private void addMessageIfNotExists(String clientId, CacheMessage message) {
     }
 
     private void addMessage(String clientId, CacheMessage message) {
-        logger.trace("Adding message {} for client {}", clientId, message);
         ClientQueue clientQueue = messages.get(clientId);
         if (clientQueue == null) {
             clientQueue = new ClientQueue();

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -85,7 +85,8 @@ public void addRemoveAddTest() throws ExecutionException, InterruptedException,
         broadcaster.addAtmosphereResource(ar);
         broadcaster.broadcast("e3").get();
 
-        assertEquals(0, broadcasterCache.messages().get(ar.uuid()).getQueue().size());
+        assertEquals(broadcasterCache.messages().size(), 1);
+        assertEquals(broadcasterCache.messages().get(ar.uuid()).getQueue().size(), 1);
     }
 
     @Test

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -431,6 +431,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
 
                     Broadcaster broadcaster = (Broadcaster) servletReq.getAttribute(INJECTED_BROADCASTER);
                     // @Subscribe
+                    // TODO: Optimize me
                     if (action == Action.SUBSCRIBE) {
                         Class<Broadcaster> c = null;
                         try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -2078,7 +2078,7 @@ protected void notify(Action.TYPE type, AtmosphereRequest request, AtmosphereRes
                         l.onSuspend(request, response);
                         break;
                     case RESUME:
-                        l.onSuspend(request, response);
+                        l.onResume(request, response);
                         break;
                     case DESTROYED:
                         l.onDestroyed(request, response);

File: modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
Patch:
@@ -18,12 +18,15 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.websocket.WebSocket;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.Arrays;
 
 public final class GrizzlyWebSocket extends WebSocket {
 
+    private static final Logger logger = LoggerFactory.getLogger(GrizzlyWebSocket.class);
     private final com.sun.grizzly.websockets.WebSocket webSocket;
 
     public GrizzlyWebSocket(com.sun.grizzly.websockets.WebSocket webSocket, AtmosphereConfig config) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -363,7 +363,7 @@ public void invokeWebSocketProtocol(WebSocket webSocket, InputStream stream) {
         WebSocketHandler webSocketHandler = webSocket.webSocketHandler();
         try {
             if (webSocketHandler == null) {
-                if (!WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())) {
+                if (WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass())) {
                     List<AtmosphereRequest> list = WebSocketProtocolStream.class.cast(webSocketProtocol).onBinaryStream(webSocket, stream);
                     dispatch(webSocket, list);
                 } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -929,7 +929,7 @@ protected void executeAsyncWrite(final AsyncWriteToken token) {
     protected boolean checkCachedAndPush(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         boolean cache = retrieveTrackedBroadcast(r, e);
 
-        if (!cache) return cache;
+        if (!cache) return false;
 
         if (!((List) e.getMessage()).isEmpty()) {
             logger.debug("Sending cached message {} to {}", e.getMessage(), r.uuid());

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionSupport.java
Patch:
@@ -31,12 +31,12 @@ public SessionSupport(){
 
     @Override
     public void sessionCreated(HttpSessionEvent se) {
-        logger.info("Session created");
+        logger.trace("Session created");
     }
 
     @Override
     public void sessionDestroyed(HttpSessionEvent se) {
-        logger.info("Session destroyed");
+        logger.trace("Session destroyed");
         try {
             HttpSession s = se.getSession();
             for (Broadcaster b : BroadcasterFactory.getDefault().lookupAll()) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -54,13 +54,13 @@ public Action inspect(final AtmosphereResource r) {
         String s = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT);
         String uuid = request.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
         if (p !=  null && s != null && uuid != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT)) {
-            logger.debug("AtmosphereResource {} disconnected", uuid);
+            logger.trace("AtmosphereResource {} disconnected", uuid);
             AtmosphereResource ss = AtmosphereResourceFactory.getDefault().find(uuid);
             if (ss != null) {
-                AtmosphereResourceEventImpl.class.cast(ss.getAtmosphereResourceEvent()).isClosedByClient(true);
-
                 // Block websocket closing detection
                 ss.getRequest().setAttribute(ASYNCHRONOUS_HOOK, null);
+                AtmosphereResourceEventImpl.class.cast(ss.getAtmosphereResourceEvent()).isClosedByClient(true);
+
                 p.completeLifecycle(ss, false);
             }
             return Action.CANCELLED;

File: modules/cpr/src/main/java/org/atmosphere/config/managed/Invoker.java
Patch:
@@ -44,7 +44,7 @@ public static Object decode(
 
     public static Object invokeMethod(Method method, Object objectToInvoke, Object decodedObject) {
         Object objectToEncode = null;
-        boolean hasMatch = true;
+        boolean hasMatch = false;
         try {
             objectToEncode = method.invoke(objectToInvoke, new Object[]{decodedObject});
             hasMatch = true;

File: modules/cpr/src/main/java/org/atmosphere/config/managed/ManagedAtmosphereHandler.java
Patch:
@@ -145,11 +145,10 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
             r.getRequest(false).setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, false);
         }
 
-        AtmosphereResource resource = event.getResource();
         if (event.isCancelled() || event.isClosedByClient()) {
-            invoke(onDisconnectMethod, resource);
+            invoke(onDisconnectMethod, event);
         } else if (event.isResumedOnTimeout() || event.isResuming()) {
-            invoke(onTimeoutMethod, resource);
+            invoke(onTimeoutMethod, event);
         } else {
             Object msg = event.getMessage();
             Object o;

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -297,7 +297,7 @@ private void addMessageIfNotExists(String clientId, CacheMessage message) {
     }
 
     private void addMessage(String clientId, CacheMessage message) {
-        logger.trace("Adding message {} for client {}", clientId, message);
+        logger.debug("Adding message {} for client {}", clientId, message);
         ClientQueue clientQueue = messages.get(clientId);
         if (clientQueue == null) {
             clientQueue = new ClientQueue();

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -859,7 +859,7 @@ protected boolean perRequestFilter(AtmosphereResource r, Entry msg) {
             removeAtmosphereResource(r);
             config.getBroadcasterFactory().removeAllAtmosphereResource(r);
 
-            bc.getBroadcasterCache().addToCache(getID(), r, new BroadcastMessage(msg));
+            bc.getBroadcasterCache().addToCache(getID(), r, new BroadcastMessage(msg.originalMessage));
             return false;
         }
         return true;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -974,7 +974,7 @@ protected boolean checkCachedAndPush(final AtmosphereResource r, final Atmospher
                     // An exception occured
                     logger.error("Unable to write cached message {} for {}", e.getMessage(), r.uuid());
                     logger.error("", t);
-                    for (Object o : cacheMessages) {
+                    for (Object o : (List)e.getMessage()) {
                         bc.getBroadcasterCache().addToCache(getID(), r, new BroadcastMessage(o));
                     }
                     return true;

File: modules/cpr/src/main/java/org/atmosphere/util/FakeHttpSession.java
Patch:
@@ -28,6 +28,7 @@ public class FakeHttpSession implements HttpSession {
     private final String sessionId;
     private final ServletContext servletContext;
     private int maxInactiveInterval;
+    private boolean valid = true;
 
     public FakeHttpSession(String sessionId, ServletContext servletContext, long creationTime, int maxInactiveInterval) {
         this.sessionId = sessionId;
@@ -136,13 +137,14 @@ public FakeHttpSession copyAttributes(HttpSession httpSession){
         return this;
     }
 
-    // TODO: Not supported for now.
     @Override
     public void invalidate() {
+    	valid = false;
     }
 
     @Override
     public boolean isNew() {
+    	if (!valid) throw new IllegalStateException();
         return false;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1222,7 +1222,7 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
                         configureBroadcaster();
                     }
 
-                    if (handler == null) {
+                    if (handler != null) {
                         IntrospectionUtils.setProperty(handler, handlerProperty.getName(), handlerProperty.getValue());
                         IntrospectionUtils.addProperty(handler, handlerProperty.getName(), handlerProperty.getValue());
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereHandler.java
Patch:
@@ -86,7 +86,7 @@ public void onRequest(AtmosphereResource r) throws IOException {
             res.setContentType("text/html;charset=ISO-8859-1");
 
             Broadcaster b = lookupBroadcaster(req.getPathInfo());
-            r.setBroadcaster(b).suspend(-1);
+            r.setBroadcaster(b).suspend();
         } else if ("POST".equalsIgnoreCase(method)) {
             Broadcaster b = lookupBroadcaster(req.getPathInfo());
 

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/FocusPoint.java
Patch:
@@ -78,6 +78,7 @@ private void getContentURI(StringBuffer contentURIBuffer, FocusPoint focusPoint)
     }
 
     private String encode(String name) {
+        if (name == null) name = "";
         try {
             return URLEncoder.encode(name, "UTF-8");
         } catch (UnsupportedEncodingException e) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -913,7 +913,8 @@ protected void doInitParams(ServletConfig sc) {
                 try {
                     sc.getServletContext().addListener(SessionSupport.class);
                 } catch (Throwable t) {
-                    logger.warn("SessionSupport error", t);
+                    logger.error("SessionSupport error", t);
+                    logger.debug("Make sure you define {} as a listener in web.xml", SessionSupport.class.getName());
                 }
             } else {
                 logger.debug("Make sure you define {} as a listener in web.xml", SessionSupport.class.getName());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1663,6 +1663,7 @@ private static void load(HttpServletRequest request, Builder b) {
     public String toString() {
         try {
             return "AtmosphereRequest{" +
+                    " method=" + getMethod() +
                     " contextPath=" + getContextPath() +
                     " servletPath=" + getServletPath() +
                     " pathInfo=" + getPathInfo() +

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -688,7 +688,7 @@ void onThrowable(AtmosphereResourceEvent e) {
 
     void onSuspend(AtmosphereResourceEvent e) {
         for (AtmosphereResourceEventListener r : listeners) {
-            if (disableSuspend) {
+            if (disableSuspendEvent) {
                 if (!AllowInterceptor.class.isAssignableFrom(r.getClass())) {
                     continue;
                 }
@@ -699,7 +699,7 @@ void onSuspend(AtmosphereResourceEvent e) {
 
     void onPreSuspend(AtmosphereResourceEvent e) {
         for (AtmosphereResourceEventListener r : listeners) {
-            if (disableSuspend) {
+            if (disableSuspendEvent) {
                 if (!AllowInterceptor.class.isAssignableFrom(r.getClass())) {
                     continue;
                 }

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceStateRecoveryTest.java
Patch:
@@ -33,7 +33,6 @@ public class AtmosphereResourceStateRecoveryTest {
     private final AtmosphereResourceStateRecovery recovery = new AtmosphereResourceStateRecovery();
     private AtmosphereResource r;
 
-
     @BeforeMethod
     public void create() throws Throwable {
         framework = new AtmosphereFramework();

File: samples/jersey-pubsub/src/main/java/org/atmosphere/samples/pubsub/JerseyPubSub.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * Simple PubSub resource that demonstrate many functionality supported by
- * Atmosphere JQuery Plugin and Atmosphere Jersey extension.
+ * Atmosphere Javascript and Atmosphere Jersey extension.
  *
  * @author Jeanfrancois Arcand
  */

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/MetaBroadcasterLoadTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.atmosphere.cpr.BroadcasterListenerAdapter;
 import org.atmosphere.cpr.DefaultBroadcaster;
 import org.atmosphere.cpr.DefaultBroadcasterFactory;
+import org.atmosphere.cpr.Entry;
 import org.atmosphere.cpr.MetaBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -534,9 +534,7 @@ protected void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOExcept
         r.getAtmosphereResourceEvent().setMessage(r.writeOnTimeout());
         try {
             if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
-                AtmosphereHandler atmosphereHandler =
-                        (AtmosphereHandler)
-                                req.getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER_WRAPPER);
+                AtmosphereHandler atmosphereHandler = r.getAtmosphereHandler();
 
                 if (atmosphereHandler != null) {
                     try {

File: modules/cpr/src/main/java/org/atmosphere/config/service/ManagedService.java
Patch:
@@ -22,10 +22,10 @@
 import org.atmosphere.cpr.AtmosphereResourceEventListener;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterCache;
+import org.atmosphere.cpr.DefaultBroadcaster;
 import org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor;
 import org.atmosphere.interceptor.HeartbeatInterceptor;
 import org.atmosphere.interceptor.SuspendTrackerInterceptor;
-import org.atmosphere.util.SimpleBroadcaster;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -79,7 +79,7 @@
      *
      * @return The {@link org.atmosphere.cpr.Broadcaster} class name
      */
-    Class<? extends Broadcaster> broadcaster() default SimpleBroadcaster.class;
+    Class<? extends Broadcaster> broadcaster() default DefaultBroadcaster.class;
 
     /**
      * A list of {@link org.atmosphere.cpr.AtmosphereInterceptor} to install. Default are {@link AtmosphereResourceLifecycleInterceptor}

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java
Patch:
@@ -205,7 +205,7 @@ public void onRequest(AtmosphereResource event) throws IOException {
             public void onStateChange(AtmosphereResourceEvent event) throws IOException {
 
                 try {
-                    event.write(event.getMessage().toString().getBytes());
+                    event.getResource().write(event.getMessage().toString().getBytes());
                     assertTrue(event.isResumedOnTimeout());
                     long time = System.currentTimeMillis() - currentTime;
                     if (time > 5000 && time < 15000) {

File: samples/chat/src/main/java/org/atmosphere/samples/chat/Chat.java
Patch:
@@ -20,7 +20,6 @@
 import org.atmosphere.config.service.Ready;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
-import org.codehaus.jackson.map.ObjectMapper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -32,11 +31,11 @@
  */
 @ManagedService(path = "/{chat}")
 public class Chat {
-    private final ObjectMapper mapper = new ObjectMapper();
     private final Logger logger = LoggerFactory.getLogger(Chat.class);
 
     /**
      * Invoked when the connection as been fully established and suspended, e.g ready for receiving messages.
+     *
      * @param r
      */
     @Ready
@@ -46,6 +45,7 @@ public void onReady(final AtmosphereResource r) {
 
     /**
      * Invoked when the client disconnect or when an unexpected closing of the underlying connection happens.
+     *
      * @param event
      */
     @Disconnect
@@ -60,6 +60,7 @@ public void onDisconnect(AtmosphereResourceEvent event) {
     /**
      * Simple annotated class that demonstrate how {@link org.atmosphere.config.managed.Encoder} and {@link org.atmosphere.config.managed.Decoder
      * can be used.
+     *
      * @param message an instance of {@link Message}
      * @return
      * @throws IOException

File: modules/cpr/src/test/java/org/atmosphere/cpr/ManagedAtmosphereHandlerTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.atmosphere.config.service.Message;
 import org.atmosphere.config.service.Post;
 import org.atmosphere.config.service.Put;
+import org.atmosphere.config.service.Ready;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;

File: modules/cpr/src/test/java/org/atmosphere/cpr/ManagedAtmosphereHandlerTest.java
Patch:
@@ -21,7 +21,6 @@
 import org.atmosphere.config.service.Message;
 import org.atmosphere.config.service.Post;
 import org.atmosphere.config.service.Put;
-import org.atmosphere.config.service.Suspend;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
@@ -215,7 +214,7 @@ public void get(AtmosphereResource resource) {
             resource.suspend();
         }
 
-        @Suspend
+        @Ready
         public void suspend(AtmosphereResource resource) {
             r.set(resource);
         }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -104,7 +104,7 @@ public Object call() throws Exception {
                                     try {
                                         response.write(paddingText, true);
                                     } catch (Throwable t) {
-                                        logger.trace("{}",, r.uuid(), t);
+                                        logger.trace("{}", r.uuid(), t);
                                         writeFuture.cancel(false);
                                     }
                                 } else {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/HeartbeatInterceptor.java
Patch:
@@ -104,7 +104,7 @@ public Object call() throws Exception {
                                     try {
                                         response.write(paddingText, true);
                                     } catch (Throwable t) {
-                                        logger.trace("{}",, r.uuid(), t);
+                                        logger.trace("{}", r.uuid(), t);
                                         writeFuture.cancel(false);
                                     }
                                 } else {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java
Patch:
@@ -91,6 +91,8 @@ public Action inspect(AtmosphereResource r) {
     @Override
     public void postInspect(final AtmosphereResource r) {
 
+        if (r.transport().equals(AtmosphereResource.TRANSPORT.UNDEFINED)) return;
+
         if (!AtmosphereResourceImpl.class.cast(r).action().equals(Action.CANCELLED)
                 && r.getRequest().getMethod().equalsIgnoreCase(method)) {
             r.addEventListener(new AtmosphereResourceEventListenerAdapter() {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -898,6 +898,7 @@ protected void doInitParams(ServletConfig sc) {
         s = sc.getInitParameter(PROPERTY_SESSION_SUPPORT);
         if (s != null) {
             config.setSupportSession(Boolean.valueOf(s));
+            sc.getServletContext().addListener(SessionSupport.class.getName());
             isSessionSupportSpecified = true;
         }
         s = sc.getInitParameter(DISABLE_ONSTATE_EVENT);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -728,9 +728,7 @@ public void cancel() throws IOException {
 
         if (!isCancelled.getAndSet(true)) {
             logger.trace("Cancelling {}", uuid);
-            if (action.type() == Action.TYPE.CANCELLED || action.type() == Action.TYPE.SUSPEND) {
-                SessionTimeoutSupport.restoreTimeout(req);
-            }
+            SessionTimeoutSupport.restoreTimeout(req);
             action.type(Action.TYPE.RESUME);
             if (asyncSupport != null) asyncSupport.action(this);
             // We must close the underlying WebSocket as well.

File: modules/cpr/src/main/java/org/atmosphere/util/analytics/ModuleDetection.java
Patch:
@@ -33,7 +33,7 @@ public class ModuleDetection {
     public final static String detect() {
         for (Map.Entry<String, String> e : modules.entrySet()) {
             if (check(e.getValue())) {
-                e.getKey();
+                return e.getKey();
             }
         }
         return "runtime";

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -185,7 +185,9 @@ public synchronized static BroadcasterFactory getDefault() {
      * {@inheritDoc}
      */
     public BroadcasterFactory addBroadcasterListener(BroadcasterListener b) {
-        broadcasterListeners.add(b);
+        if (!broadcasterListeners.contains(b)){
+            broadcasterListeners.add(b);
+        }
         return this;
     }
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterListenerTest.java
Patch:
@@ -15,18 +15,17 @@
  */
 package org.atmosphere.cpr;
 
-import org.atmosphere.config.service.BroadcasterListenerService;
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 import javax.servlet.ServletException;
-import java.io.File;
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
+
 import static org.testng.Assert.assertTrue;
 
 public class BroadcasterListenerTest {
@@ -57,7 +56,7 @@ public void action(AtmosphereResourceImpl r) {
                     e.printStackTrace();
                 }
             }
-        }).addAtmosphereHandler("/*", new AR()).addBroadcasterListener(new L()).init();
+        }).addBroadcasterListener(new L()).addAtmosphereHandler("/*", new AR()).init();
     }
 
     @AfterMethod

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java
Patch:
@@ -57,7 +57,6 @@
 import org.atmosphere.cache.HeaderBroadcasterCache;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
-import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/ConcurrentBroadcastTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.Response;
 import org.atmosphere.container.BlockingIOCometSupport;
-import org.atmosphere.container.JettyCometSupport;
 import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/MeteorTest.java
Patch:
@@ -19,10 +19,8 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.Response;
 import org.atmosphere.container.BlockingIOCometSupport;
-import org.atmosphere.container.JettyCometSupport;
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
-import org.atmosphere.cpr.AtmosphereResourceEventListener;
 import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/UUIDBroadcasterCacheTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
-import org.atmosphere.cpr.BroadcasterListener;
 import org.atmosphere.cpr.BroadcasterListenerAdapter;
 import org.atmosphere.cpr.DefaultBroadcaster;
 import org.atmosphere.cpr.HeaderConfig;

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -182,7 +182,7 @@ public void action(AtmosphereResourceImpl actionEvent) {
             }
         } else {
             if (!actionEvent.isInScope()) {
-                logger.debug("Already resumed or cancelled: event: {}", actionEvent);
+                logger.trace("Already resumed or cancelled: event: {}", actionEvent);
             }
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFilter.java
Patch:
@@ -80,14 +80,14 @@ public class AtmosphereFilter implements Filter {
 
     private static final Logger logger = LoggerFactory.getLogger(AtmosphereFilter.class);
 
-    private final AtmosphereServlet as;
+    private final AtmosphereNativeCometServlet as;
 
     private final static String EXCLUDE_FILES = "^.*\\.(ico|ICO|jpg|JPG|gif|GIF|doc|DOC|pdf|PDF)$";
 
     private String excluded = EXCLUDE_FILES;
 
     public AtmosphereFilter() {
-        as = new AtmosphereServlet(true);
+        as = new AtmosphereNativeCometServlet(true);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
Patch:
@@ -50,7 +50,7 @@ public interface FrameworkConfig {
      */
     String JERSEY_CONTAINER = "com.sun.jersey.spi.container.servlet.ServletContainer";
     /**
-     * A request attribute used to lookup the {@link AtmosphereServlet}. This attribute is for framework integrator and not recommend for normal application.
+     * A request attribute used to lookup the {@link AtmosphereNativeCometServlet}. This attribute is for framework integrator and not recommend for normal application.
      */
     String ATMOSPHERE_SERVLET = "org.atmosphere.cpr.AtmosphereServlet";
     /**

File: modules/cpr/src/main/java/org/atmosphere/util/WebDotXmlReader.java
Patch:
@@ -52,7 +52,6 @@
  */
 package org.atmosphere.util;
 
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.FrameworkConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -156,7 +155,7 @@ private void parse(Document document) {
     }
 
     /**
-     * Return an {@link ArrayList} which maps to the {@link AtmosphereServlet}
+     * Return an {@link ArrayList} which maps to the {@link org.atmosphere.cpr.AtmosphereServlet}
      */
     public ArrayList<String> getMappings() {
         return mappings;

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereFrameworkTest.java
Patch:
@@ -20,7 +20,6 @@
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
 import javax.servlet.ServletException;
-
 import java.util.Collection;
 import java.util.Enumeration;
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -979,8 +979,10 @@ public List<ResourceFilter> create(AbstractMethod am) {
         }
 
         if (am.isAnnotationPresent(Subscribe.class)) {
-            f = new Filter(Action.SUBSCRIBE, 30000, -1, Suspend.SCOPE.APPLICATION,
+            int timeout = am.getAnnotation(Subscribe.class).timeout();
+            f = new Filter(Action.SUBSCRIBE, timeout, -1, Suspend.SCOPE.APPLICATION,
                      null, am.getAnnotation(Subscribe.class).value(), am.getAnnotation(Subscribe.class).writeEntity());
+
             f.setListeners(am.getAnnotation(Subscribe.class).listeners());
 
             list.addFirst(f);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -403,8 +403,6 @@ public Action timedout(AtmosphereRequest req, AtmosphereResponse res)
     }
 
     protected boolean trackActiveRequest(AtmosphereRequest req) {
-        SessionTimeoutSupport.restoreTimeout(req);
-
         if (trackActiveRequest) {
             try {
                 long l = (Long) req.getAttribute(MAX_INACTIVE);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -309,7 +309,7 @@ public AtmosphereResource resume() {
                     asyncSupport.action(this);
                 }
             } else {
-                logger.debug("Cannot resume an already resumed/cancelled request {}", this);
+                logger.trace("Cannot resume an already resumed/cancelled request {}", this);
                 return this;
             }
         } catch (Throwable t) {
@@ -728,7 +728,7 @@ public void cancel() throws IOException {
 
         if (!isCancelled.getAndSet(true)) {
             logger.trace("Cancelling {}", uuid);
-            if (action.type() == Action.TYPE.SUSPEND) {
+            if (action.type() == Action.TYPE.CANCELLED) {
                 SessionTimeoutSupport.restoreTimeout(req);
             }
             action.type(Action.TYPE.RESUME);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -358,7 +358,6 @@ protected AtmosphereHandlerWrapper map(AtmosphereRequest req) throws ServletExce
      */
     public Action resumed(AtmosphereRequest request, AtmosphereResponse response)
             throws IOException, ServletException {
-        SessionTimeoutSupport.restoreTimeout(request);
 
         AtmosphereResourceImpl r =
                 (AtmosphereResourceImpl) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -728,6 +728,9 @@ public void cancel() throws IOException {
 
         if (!isCancelled.getAndSet(true)) {
             logger.trace("Cancelling {}", uuid);
+            if (action.type() == Action.TYPE.SUSPEND) {
+                SessionTimeoutSupport.restoreTimeout(req);
+            }
             action.type(Action.TYPE.RESUME);
             if (asyncSupport != null) asyncSupport.action(this);
             // We must close the underlying WebSocket as well.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -435,7 +435,7 @@ protected boolean completeLifecycle(final AtmosphereResource r, boolean cancelle
                         }
 
                         // TODO: Was it there for legacy reason?
-                        //impl.getAtmosphereResourceEvent().setIsResumedOnTimeout(impl.resumeOnBroadcast());
+                        // impl.getAtmosphereResourceEvent().setIsResumedOnTimeout(impl.resumeOnBroadcast());
                     }
                     invokeAtmosphereHandler(impl);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -434,7 +434,8 @@ protected boolean completeLifecycle(final AtmosphereResource r, boolean cancelle
                             ((DefaultBroadcaster) b).broadcastOnResume(r);
                         }
 
-                        impl.getAtmosphereResourceEvent().setIsResumedOnTimeout(impl.resumeOnBroadcast());
+                        // TODO: Was it there for legacy reason?
+                        //impl.getAtmosphereResourceEvent().setIsResumedOnTimeout(impl.resumeOnBroadcast());
                     }
                     invokeAtmosphereHandler(impl);
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/OnDisconnectInterceptor.java
Patch:
@@ -52,7 +52,7 @@ public Action inspect(final AtmosphereResource r) {
             logger.debug("AtmosphereResource {} disconnected", uuid);
             AtmosphereResource ss = AtmosphereResourceFactory.getDefault().find(uuid);
             if (ss != null) {
-                ss.notifyListeners(new AtmosphereResourceEventImpl(AtmosphereResourceImpl.class.cast(r), true, false));
+                ss.notifyListeners(new AtmosphereResourceEventImpl(AtmosphereResourceImpl.class.cast(r), false, false, true, null));
                 try {
                     try {
                         // https://github.com/Atmosphere/atmosphere/issues/983

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -53,12 +53,12 @@ public void clearCache(String broadcasterId, AtmosphereResource r, CacheMessage
     }
 
     @Override
-    public void banFromCache(String broadcasterId, AtmosphereResource r) {
-
+    public void excludeFromCache(String broadcasterId, AtmosphereResource r) {
     }
 
     @Override
-    public void clearBan(String broadcasterId, AtmosphereResource r) {
+    public boolean includeInCache(String broadcasterId, AtmosphereResource r) {
+        return false;
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -726,7 +726,7 @@ public void cancel() throws IOException {
         if (!isCancelled.getAndSet(true)) {
             logger.trace("Cancelling {}", uuid);
             action.type(Action.TYPE.RESUME);
-            asyncSupport.action(this);
+            if (asyncSupport != null) asyncSupport.action(this);
             // We must close the underlying WebSocket as well.
             if (AtmosphereResponse.class.isAssignableFrom(response.getClass())) {
                 AtmosphereResponse.class.cast(response).close();

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -304,7 +304,7 @@ public ContainerResponse filter(final ContainerRequest request, final ContainerR
                     }
 
                     if (broadcasterName == null) {
-                        StringBuffer s = new StringBuffer();
+                        StringBuilder s = new StringBuilder();
                         Enumeration<String> e = servletReq.getHeaderNames();
                         String t;
                         while (e.hasMoreElements()) {

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/UUIDBroadcasterCacheTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.cpr.BroadcasterListener;
+import org.atmosphere.cpr.BroadcasterListenerAdapter;
 import org.atmosphere.cpr.DefaultBroadcaster;
 import org.atmosphere.cpr.HeaderConfig;
 import org.eclipse.jetty.server.Server;
@@ -257,7 +258,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
                 }
                 event.getResource().resume();
             }
-        }, BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, "cache").addBroadcasterListener(new BroadcasterListener() {
+        }, BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, "cache").addBroadcasterListener(new BroadcasterListenerAdapter() {
             @Override
             public void onPostCreate(Broadcaster b) {
             }

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/MetaBroadcasterLoadTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterListener;
+import org.atmosphere.cpr.BroadcasterListenerAdapter;
 import org.atmosphere.cpr.DefaultBroadcaster;
 import org.atmosphere.cpr.DefaultBroadcasterFactory;
 import org.atmosphere.cpr.MetaBroadcaster;
@@ -70,7 +71,7 @@ public void loadTest() throws InterruptedException {
 
         final CountDownLatch latch = new CountDownLatch(run);
 
-        BroadcasterListener l = new BroadcasterListener() {
+        BroadcasterListener l = new BroadcasterListenerAdapter() {
 
             @Override
             public void onPostCreate(Broadcaster b) {

File: modules/cpr/src/main/java/org/atmosphere/cache/DefaultBroadcasterCache.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.BroadcasterCache;
 
+import java.util.Collections;
 import java.util.List;
 
 public class DefaultBroadcasterCache implements BroadcasterCache {
@@ -35,7 +36,6 @@ public void stop() {
 
     @Override
     public void configure(AtmosphereConfig config) {
-
     }
 
     @Override
@@ -45,7 +45,7 @@ public CacheMessage addToCache(String broadcasterId, AtmosphereResource r, Broad
 
     @Override
     public List<Object> retrieveFromCache(String id, AtmosphereResource r) {
-        return null;
+        return Collections.<Object>emptyList();
     }
 
     @Override
@@ -55,6 +55,6 @@ public void clearCache(String broadcasterId, AtmosphereResourceImpl r, CacheMess
 
     @Override
     public BroadcasterCache inspector(BroadcasterCacheInspector interceptor) {
-        return null;
+        return this;
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereHandlerService.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.config.service;
 
+import org.atmosphere.cache.DefaultBroadcasterCache;
 import org.atmosphere.cpr.AtmosphereInterceptor;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;
@@ -86,5 +87,5 @@
      *
      * @return The {@link org.atmosphere.cpr.Broadcaster} class name
      */
-    Class<? extends BroadcasterCache> broadcasterCache();
+    Class<? extends BroadcasterCache> broadcasterCache() default DefaultBroadcasterCache.class;
 }

File: modules/cpr/src/main/java/org/atmosphere/config/service/WebSocketHandlerService.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.config.service;
 
+import org.atmosphere.cache.DefaultBroadcasterCache;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterCache;
@@ -46,7 +47,7 @@
      *
      * @return The {@link org.atmosphere.cpr.Broadcaster} class name
      */
-    Class<? extends BroadcasterCache> broadcasterCache();
+    Class<? extends BroadcasterCache> broadcasterCache() default DefaultBroadcasterCache.class;
 
     /**
      * The mapping path, or context-root used to map this WebSocketHandler

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereHandlerService.java
Patch:
@@ -19,7 +19,6 @@
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterCache;
-import org.atmosphere.cpr.BroadcasterConfig;
 import org.atmosphere.cpr.DefaultBroadcaster;
 
 import java.lang.annotation.Documented;
@@ -87,5 +86,5 @@
      *
      * @return The {@link org.atmosphere.cpr.Broadcaster} class name
      */
-    Class<? extends BroadcasterCache> broadcasterCache() default BroadcasterConfig.DefaultBroadcasterCache.class;
+    Class<? extends BroadcasterCache> broadcasterCache();
 }

File: modules/cpr/src/main/java/org/atmosphere/config/service/WebSocketHandlerService.java
Patch:
@@ -18,7 +18,6 @@
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterCache;
-import org.atmosphere.cpr.BroadcasterConfig;
 import org.atmosphere.cpr.DefaultBroadcaster;
 
 import java.lang.annotation.Documented;
@@ -47,7 +46,7 @@
      *
      * @return The {@link org.atmosphere.cpr.Broadcaster} class name
      */
-    Class<? extends BroadcasterCache> broadcasterCache() default BroadcasterConfig.DefaultBroadcasterCache.class;
+    Class<? extends BroadcasterCache> broadcasterCache();
 
     /**
      * The mapping path, or context-root used to map this WebSocketHandler

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -323,9 +323,8 @@ public String toString() {
                     } catch (Throwable e) {
                         logger.warn("", e);
                     }
-
-                    framework.addAtmosphereHandler(a.path(), handler, l);
                     framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
+                    framework.addAtmosphereHandler(a.path(), handler, l);
                 }
 
         };

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1199,7 +1199,7 @@ public void onException(Throwable t, final AtmosphereResource ar, boolean notify
 
         // Remove to prevent other broadcast to re-use it.
         removeAtmosphereResource(r);
-        logger.trace("Unexpected exception for AtmosphereResource {} and Broadcaster " + name, ar.uuid(), t);
+        logger.debug("Unexpected exception for AtmosphereResource {} and Broadcaster " + name, ar.uuid(), t);
 
         if (notifyAndCache) {
             final AtmosphereResourceEventImpl event = r.getAtmosphereResourceEvent();

File: modules/cpr/src/main/java/org/atmosphere/handler/ManagedAtmosphereHandler.java
Patch:
@@ -100,7 +100,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
         // Disable resume so cached message can be send in one chunk.
         if (resumeOnBroadcast) {
             r.resumeOnBroadcast(false);
-            r.getRequest(false).setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, "false");
+            r.getRequest(false).setAttribute(ApplicationConfig.RESUME_ON_BROADCAST, false);
         }
 
         AtmosphereResource resource = event.getResource();

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketHandler.java
Patch:
@@ -30,7 +30,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Reader;
-import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 
 public class TomcatWebSocketHandler extends StreamInbound {
@@ -50,7 +49,7 @@ public TomcatWebSocketHandler(AtmosphereRequest request, AtmosphereFramework fra
 
         String s = framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_IDLETIME);
         if (s != null) {
-            webSocketWriteTimeout = Integer.valueOf(1);
+            webSocketWriteTimeout = Integer.valueOf(s);
         } else {
             webSocketWriteTimeout = -1;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1399,6 +1399,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
         if (s != null) {
             skip = Boolean.valueOf(s);
         }
+
         if (!skip || req.getAttribute(WEBSOCKET_SUSPEND) == null) {
             Map<String, String> headers = configureQueryStringAsRequest(req);
             String body = headers.remove(ATMOSPHERE_POST_BODY);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -508,6 +508,7 @@ public AtmosphereRequest queryString(String queryString) {
                 newM.put(q.getKey(), q.getValue().toArray(new String[q.getValue().size()]));
             }
             b.queryStrings(newM);
+            b.queryString = qs;
         }
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterLifeCyclePolicy.java
Patch:
@@ -28,6 +28,7 @@ public class BroadcasterLifeCyclePolicy {
 
     public final static BroadcasterLifeCyclePolicy IDLE = new BroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE);
     public final static BroadcasterLifeCyclePolicy IDLE_DESTROY = new BroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY);
+    public final static BroadcasterLifeCyclePolicy IDLE_RESUME = new BroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.IDLE_RESUME);
     public final static BroadcasterLifeCyclePolicy EMPTY = new BroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.EMPTY);
     public final static BroadcasterLifeCyclePolicy EMPTY_DESTROY = new BroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY);
     public final static BroadcasterLifeCyclePolicy NEVER = new BroadcasterLifeCyclePolicy(ATMOSPHERE_RESOURCE_POLICY.NEVER);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1493,7 +1493,6 @@ protected void cacheAndSuspend(AtmosphereResource r) {
         }
     }
 
-
     private boolean isAtmosphereResourceValid(AtmosphereResource r) {
         return !AtmosphereResourceImpl.class.cast(r).isResumed()
                 && !AtmosphereResourceImpl.class.cast(r).isCancelled()

File: modules/cpr/src/main/java/org/atmosphere/interceptor/NginxInterceptor.java
Patch:
@@ -29,9 +29,9 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class NgnixInterceptor implements AtmosphereInterceptor {
+public class NginxInterceptor implements AtmosphereInterceptor {
 
-    private final Logger logger = LoggerFactory.getLogger(NgnixInterceptor.class);
+    private final Logger logger = LoggerFactory.getLogger(NginxInterceptor.class);
 
     @Override
     public void configure(AtmosphereConfig config) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/NginxInterceptor.java
Patch:
@@ -29,9 +29,9 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class NgnixInterceptor implements AtmosphereInterceptor {
+public class NginxInterceptor implements AtmosphereInterceptor {
 
-    private final Logger logger = LoggerFactory.getLogger(NgnixInterceptor.class);
+    private final Logger logger = LoggerFactory.getLogger(NginxInterceptor.class);
 
     @Override
     public void configure(AtmosphereConfig config) {

File: modules/cpr/src/main/java/org/atmosphere/container/JSR356Endpoint.java
Patch:
@@ -65,7 +65,7 @@ public void onOpen(Session session, EndpointConfig endpointConfig) {
 
         try {
             request = new AtmosphereRequest.Builder()
-                    .requestURI(session.getRequestURI().toURL().toExternalForm())
+                    .requestURI(session.getRequestURI().toString())
                     .queryString(session.getQueryString())
                     .build();
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -496,7 +496,7 @@ public interface ApplicationConfig {
      * The write operation timeout, in millisecond, when using the {@link DefaultBroadcaster}. When the timeout occurs, the calling threads gets interrupted.
      * <p>
      * Default is 5 * 60 * 1000 (5 minutes)
-     * Value: "org.atmosphere.cpr.Broadcaster.supportOutOfOrderBroadcast"
+     * Value: "org.atmosphere.cpr.Broadcaster.writeTimeout"
      */
     String WRITE_TIMEOUT = Broadcaster.class.getName() + ".writeTimeout";
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -496,7 +496,7 @@ public interface ApplicationConfig {
      * The write operation timeout, in millisecond, when using the {@link DefaultBroadcaster}. When the timeout occurs, the calling threads gets interrupted.
      * <p>
      * Default is 5 * 60 * 1000 (5 minutes)
-     * Value: "org.atmosphere.cpr.Broadcaster.supportOutOfOrderBroadcast"
+     * Value: "org.atmosphere.cpr.Broadcaster.writeTimeout"
      */
     String WRITE_TIMEOUT = Broadcaster.class.getName() + ".writeTimeout";
     /**

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceListenerTest.java
Patch:
@@ -141,7 +141,6 @@ public void postInspect(AtmosphereResource r) {
         assertTrue(preSuspended.get());
         assertTrue(suspended.get());
         assertTrue(resumed.get());
-        assertTrue(disconnected.get());
         assertTrue(broadcasted.get());
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -60,7 +60,6 @@
 import org.atmosphere.container.Tomcat7CometSupport;
 import org.atmosphere.container.TomcatCometSupport;
 import org.atmosphere.di.ServletContextProvider;
-import org.atmosphere.websocket.WebSocket;
 import org.jboss.servlet.http.HttpEvent;
 import org.jboss.servlet.http.HttpEventServlet;
 import org.slf4j.Logger;
@@ -76,7 +75,6 @@
 import java.util.Enumeration;
 
 import static org.atmosphere.cpr.HeaderConfig.WEBSOCKET_UPGRADE;
-import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
 
 /**
  * The {@link AtmosphereServlet} acts as a dispatcher for {@link AtmosphereHandler}

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -307,7 +307,6 @@ public AtmosphereResource resume() {
         } catch (Throwable t) {
             logger.trace("Wasn't able to resume a connection {}", this, t);
         }
-        notifyListeners(new AtmosphereResourceEventImpl(this, true, false));
         listeners.clear();
         return this;
     }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -104,7 +104,6 @@
 import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CLASS;
@@ -125,7 +124,6 @@
 import static org.atmosphere.cpr.HeaderConfig.LONG_POLLING_TRANSPORT;
 import static org.atmosphere.cpr.HeaderConfig.POLLING_TRANSPORT;
 import static org.atmosphere.cpr.HeaderConfig.PRAGMA;
-import static org.atmosphere.cpr.HeaderConfig.STREAMING_TRANSPORT;
 import static org.atmosphere.cpr.HeaderConfig.WEBSOCKET_UPGRADE;
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_TRACKING_ID;
@@ -332,7 +330,6 @@ public ContainerResponse filter(final ContainerRequest request, final ContainerR
                     final Broadcaster bcaster = newBroadcaster;
 
                     if (!waitForResource || (!transport.startsWith(POLLING_TRANSPORT) && subProtocol == null)) {
-                        boolean outputJunk = transport.equalsIgnoreCase(STREAMING_TRANSPORT);
                         final boolean resumeOnBroadcast = transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT);
 
                         if (listeners != null) {

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/UUIDBroadcasterCacheTest.java
Patch:
@@ -199,7 +199,7 @@ public Response onCompleted(Response r) throws Exception {
 
             assertNotNull(response.get());
             assertEquals(response.get().getStatusCode(), 200);
-            assertEquals(response.get().getResponseBody(), "message-1message-2");
+            assertEquals(response.get().getResponseBody().trim(), "message-1message-2");
         } catch (Exception e) {
             logger.error("test failed", e);
             fail(e.getMessage());

File: modules/cpr/src/main/java/org/atmosphere/interceptor/StreamingAtmosphereInterceptor.java
Patch:
@@ -71,6 +71,7 @@ private void writePadding(AtmosphereResponse response) {
         if (request != null && request.getAttribute("paddingWritten") != null) return;
 
         request.setAttribute(FrameworkConfig.TRANSPORT_IN_USE, HeaderConfig.STREAMING_TRANSPORT);
+        response.setContentType("text/plain");
         try {
             response.write(padding, true).flushBuffer();
         } catch (IOException e) {

File: modules/cpr/src/main/java/org/atmosphere/handler/ManagedAtmosphereHandler.java
Patch:
@@ -99,6 +99,8 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
             Object m = invoke(onMessageMethod, event.getMessage().toString());
             if (m != null) {
                 event.getResource().getResponse().write(m.toString());
+            } else if (onMessageMethod == null) {
+                event.getResource().getResponse().write((String)event.getMessage());
             }
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -345,7 +345,7 @@ public AnnotationProcessor scan(String packageName) throws IOException {
         return this;
     }
 
-    private Class<?> loadClass(String className) throws Exception{
+    private Class<?> loadClass(String className) throws Exception {
         try {
             return Thread.currentThread().getContextClassLoader().loadClass(className);
         } catch (Throwable t) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -548,15 +548,15 @@ public Enumeration<String> getInitParameterNames() {
                 scFacade = sc;
             }
             this.servletConfig = scFacade;
+            doInitParams(scFacade);
+            doInitParamsForWebSocket(scFacade);
             asyncSupportListener(new AsyncSupportListenerAdapter());
 
             configureScanningPackage(sc);
             installAnnotationProcessor(scFacade);
 
             autoConfigureService(scFacade.getServletContext());
             patchContainer();
-            doInitParams(scFacade);
-            doInitParamsForWebSocket(scFacade);
             configureBroadcaster();
             loadConfiguration(scFacade);
             initWebSocket();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -910,7 +910,9 @@ protected boolean detectSupportedFramework(ServletConfig sc) throws ClassNotFoun
             for (String s : packages) {
                 packagesInit.append(s).append(",");
             }
-            initParams.put("com.sun.jersey.config.property.packages", packagesInit.toString());
+            if (packages.size() > 0) {
+                initParams.put("com.sun.jersey.config.property.packages", packagesInit.toString());
+            }
         } catch (Throwable t) {
             logger.trace("", t);
             return false;

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -140,7 +140,7 @@ public void destroy() {
         });
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();
-        processor.open(w, request);
+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));
         processor.invokeWebSocketProtocol(w, "yoWebSocket");
 
         assertEquals(url.get(), "http://127.0.0.1:8080");

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -41,6 +41,7 @@
 import org.atmosphere.util.DefaultEndpointMapper;
 import org.atmosphere.util.EndpointMapper;
 import org.atmosphere.util.IntrospectionUtils;
+import org.atmosphere.util.ServletProxyFactory;
 import org.atmosphere.util.Version;
 import org.atmosphere.websocket.DefaultWebSocketProcessor;
 import org.atmosphere.websocket.WebSocket;
@@ -466,8 +467,7 @@ public ServletContext getServletContext() {
                             new InvocationHandler() {
                                 @Override
                                 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                                    logger.trace("Method {} not supported", method.getName());
-                                    return null;
+                                    return ServletProxyFactory.getDefault().proxy(proxy, method, args);
                                 }
                             });
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.websocket.WebSocket;
+import org.atmosphere.util.ServletProxyFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -70,8 +71,7 @@ public class AtmosphereResponse extends HttpServletResponseWrapper {
                     new InvocationHandler() {
                         @Override
                         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
-                            logger.trace("Method {} not supported", method.getName());
-                            return null;
+                            return ServletProxyFactory.getDefault().proxy(proxy, method, args);
                         }
                     });
     private final AtomicBoolean writeStatusAndHeader = new AtomicBoolean(false);

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -110,7 +110,7 @@ void loadWebApplication(ServletConfig sc) throws MalformedURLException,
                 Thread.currentThread().getContextClassLoader());
 
         loadServlet(sc, urlC);
-        if (filters.isEmpty()) {
+        if (!filters.isEmpty()) {
             loadFilterInstances(sc);
         } else {
             loadFilterClasses(sc, urlC);
@@ -136,6 +136,7 @@ private void loadServlet(ServletConfig sc, URLClassLoader urlC)
 
     private void loadFilterClasses(ServletConfig sc, URLClassLoader urlC)
             throws InstantiationException, IllegalAccessException, ClassNotFoundException {
+
         for (Map.Entry<String, String> fClassAndName : filtersClassAndNames.entrySet()) {
             String fClass = fClassAndName.getKey();
             String filterName = fClassAndName.getValue();

File: modules/cpr/src/test/java/org/atmosphere/cpr/ManagedAtmosphereHandlerTest.java
Patch:
@@ -191,8 +191,8 @@ public void onSuspend(AtmosphereResourceEvent event) {
         }
 
         @Message
-        public void message(AtmosphereResourceEvent event) {
-            message.set(event.getMessage().toString());
+        public void message(String m) {
+            message.set(m);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty9WebSocket.java
Patch:
@@ -19,7 +19,6 @@
 import org.atmosphere.websocket.WebSocket;
 import org.eclipse.jetty.websocket.api.Session;
 import org.eclipse.jetty.websocket.api.io.WebSocketBlockingConnection;
-import org.eclipse.jetty.websocket.server.WebSocketServerConnection;
 
 import java.io.IOException;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.atmosphere.cpr;
 
-import org.atmosphere.client.MessageLengthInterceptor;
 import org.atmosphere.client.TrackMessageSizeInterceptor;
 import org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor;
 import org.atmosphere.util.EndpointMapper;

File: modules/cpr/src/test/java/org/atmosphere/cpr/ManagedAtmosphereHandlerTest.java
Patch:
@@ -47,8 +47,9 @@ public class ManagedAtmosphereHandlerTest {
     public void create() throws Throwable {
         framework = new AtmosphereFramework();
         framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()) ;
-        String name = new File(".").getAbsolutePath();
-        framework.setLibPath(name.substring(0, name.length() - 1) + "/target/");
+        String name = new File("./target/").getAbsolutePath();
+        System.out.println("====> " + name);
+        framework.setHandlersPath(name);
         framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()) {
 
             @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java
Patch:
@@ -51,7 +51,7 @@ public AsyncIOWriter writeError(AtmosphereResponse response, int errorCode, Stri
 
     @Override
     public AsyncIOWriter write(AtmosphereResponse response, String data) throws IOException {
-        return write(response, data.getBytes());
+        return write(response, data.getBytes(response.getCharacterEncoding()));
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -574,7 +574,7 @@ public AtmosphereResource write(OutputStream os, Object o) throws IOException {
         if (serializer != null) {
             serializer.write(os, o);
         } else {
-            response.getOutputStream().write(o.toString().getBytes());
+            response.getOutputStream().write(o.toString().getBytes(response.getCharacterEncoding()));
         }
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -431,7 +431,7 @@ public void close(WebSocket webSocket, int closeCode) {
                     } catch (IOException e) {
                         logger.trace("", e);
                     }
-                    AtmosphereResourceImpl.class.cast(r)._destroy();
+                    AtmosphereResourceImpl.class.cast(resource)._destroy();
                 }
             } finally {
                 if (r != null) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
-                mock(AtmosphereRequest.class),
+                AtmosphereRequest.create(),
                 AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1420,12 +1420,14 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
 
                 String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
                 Boolean backwardCompatible = Boolean.parseBoolean(config.getInitParameter(ApplicationConfig.BACKWARD_COMPATIBLE_WEBSOCKET_BEHAVIOR));
-                if (!backwardCompatible && parentUUID != null && !parentUUID.equals(r.uuid())) {
+                if (!backwardCompatible && parentUUID != null) {
                     logger.warn("You are trying to add an AtmosphereResource {} for a WebSocket message. The original AtmosphereResource " +
                             " {} will be added instead.", r.uuid(), parentUUID);
                     AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);
                     if (p != null && !resources.contains(p)) {
                         resources.add(p);
+                    } else if (p == null) {
+                        resources.add(r);
                     }
                 } else {
                     resources.add(r);

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcastFilterTest.java
Patch:
@@ -182,7 +182,7 @@ public void testMixedPerRequestFilter() throws ExecutionException, InterruptedEx
     public void testVoidAtmosphereResouce() throws ExecutionException, InterruptedException {
         broadcaster.removeAtmosphereResource(ar);
         broadcaster.getBroadcasterConfig().addFilter(new VoidAtmosphereResource("1"));
-        String s = broadcaster.broadcast("0").get();
+        String s = (String) broadcaster.broadcast("0").get();
         assertEquals(s, "01");
     }
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -143,7 +143,7 @@ public void destroy() {
         });
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().destroyable(false).body("yoComet").pathInfo("/a").build();
-        processor.open(w, request);
+        processor.open(w, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, w));
         processor.invokeWebSocketProtocol(w, "yoWebSocket");
         BroadcasterFactory.getDefault().lookup("/*").broadcast("yoBroadcast").get();
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1051,7 +1051,7 @@ protected boolean checkCachedAndPush(final AtmosphereResource r, final Atmospher
                             r.getResponse().flushBuffer();
                         } catch (IOException ioe) {
                             logger.trace("", ioe);
-                            AsynchronousProcessor.destroyResource(r);
+                            AtmosphereResourceImpl.class.cast(r)._destroy();
                         }
                         break;
                 }
@@ -1419,7 +1419,8 @@ public Broadcaster addAtmosphereResource(AtmosphereResource r) {
                 logger.trace("Associating AtmosphereResource {} with Broadcaster {}", r.uuid(), getID());
 
                 String parentUUID = (String) r.getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID);
-                if (parentUUID != null && !parentUUID.equals(r.uuid())) {
+                Boolean backwardCompatible = Boolean.parseBoolean(config.getInitParameter(ApplicationConfig.BACKWARD_COMPATIBLE_WEBSOCKET_BEHAVIOR));
+                if (!backwardCompatible && parentUUID != null && !parentUUID.equals(r.uuid())) {
                     logger.warn("You are trying to add an AtmosphereResource {} for a WebSocket message. The original AtmosphereResource " +
                             " {} will be added instead.", r.uuid(), parentUUID);
                     AtmosphereResource p = AtmosphereResourceFactory.getDefault().find(parentUUID);

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceTest.java
Patch:
@@ -31,6 +31,9 @@
 import java.util.Map;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicBoolean;
+<<<<<<< HEAD
+>>>>>>> b8ae6da... Fix for #938
+=======
 >>>>>>> b8ae6da... Fix for #938
 import java.util.concurrent.atomic.AtomicReference;
 

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeFilter.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.PerRequestBroadcastFilter;
 
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_TRACKMESSAGESIZE;
@@ -42,7 +43,7 @@ public class TrackMessageSizeFilter implements PerRequestBroadcastFilter {
     public BroadcastAction filter(AtmosphereResource r, Object originalMessage, Object message) {
 
         AtmosphereRequest request = r.getRequest();
-        if ("true".equalsIgnoreCase(request.getHeader(X_ATMOSPHERE_TRACKMESSAGESIZE))
+        if (r.uuid().equals(BroadcastFilter.VOID_ATMOSPHERE_RESOURCE_UUID) || "true".equalsIgnoreCase(request.getHeader(X_ATMOSPHERE_TRACKMESSAGESIZE))
                 && message != null && String.class.isAssignableFrom(message.getClass())) {
 
             String msg = message.toString().trim();

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -190,7 +190,7 @@ protected void prepareInvokeOnStateChange(final AtmosphereResource r, final Atmo
     @Override
     protected void queueWriteIO(AtmosphereResource r, Object finalMsg, Entry entry) throws InterruptedException {
         synchronized (r) {
-            executeAsyncWrite(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage));
+            executeAsyncWrite(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage, entry.cache));
         }
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -573,7 +573,7 @@ public Enumeration<String> getInitParameterNames() {
             logger.info("Using BroadcasterFactory: {}", broadcasterFactory.getClass().getName());
             logger.info("Using WebSocketProcessor: {}", webSocketProcessorClassName);
             logger.info("Using Broadcaster: {}", broadcasterClassName);
-            logger.info("For Commercial Support, visit {} or send and email to {}", "http://www.async-io.org/", "support@async-io.org");
+            logger.info("For Commercial Support, visit {} or send an email to {}", "http://www.async-io.org/", "support@async-io.org");
             logger.info("Atmosphere Framework {} started.", Version.getRawVersion());
 
         } catch (Throwable t) {

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BasePubSubTest.java
Patch:
@@ -419,7 +419,7 @@ public Response onCompleted(Response r) throws Exception {
         c.close();
     }
 
-    @Test(timeOut = 20000, enabled = true)
+    @Test(timeOut = 20000, enabled = false)
     public void testHeaderBroadcasterCache() throws IllegalAccessException, ClassNotFoundException, InstantiationException {
         logger.info("{}: running test: testHeaderBroadcasterCache", getClass().getSimpleName());
 

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -144,6 +144,9 @@ public AbstractBroadcasterCache setShared(boolean isShared) {
      * @return this
      */
     public AbstractBroadcasterCache setReaper(ScheduledExecutorService reaper) {
+        if (this.reaper != null) {
+            this.reaper.shutdown();
+        }
         this.reaper = reaper;
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -144,6 +144,7 @@ protected void invalidateExpiredEntries() {
 
             for (Map.Entry<String, Long> entry : activeClients.entrySet()) {
                 if (now - entry.getValue() > clientIdleTime) {
+                    logger.debug("Invalidate client {}", entry.getKey());
                     inactiveClients.add(entry.getKey());
                 }
             }

File: samples/meteor-chat/src/main/java/org/atmosphere/samples/chat/MeteorChat.java
Patch:
@@ -56,9 +56,7 @@ public class MeteorChat extends HttpServlet {
     @Override
     public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
         // Set the logger level to TRACE to see what's happening.
-        Meteor m = Meteor.build(req).addListener(new AtmosphereResourceEventListenerAdapter());
-
-        m.resumeOnBroadcast(m.transport() == LONG_POLLING ? true : false).suspend(-1);
+        Meteor.build(req).addListener(new AtmosphereResourceEventListenerAdapter());
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -145,7 +145,7 @@ public AbstractBroadcasterCache setShared(boolean isShared) {
      */
     public AbstractBroadcasterCache setReaper(ScheduledExecutorService reaper) {
         if (this.reaper != null) {
-            reaper.shutdown();
+            this.reaper.shutdown();
         }
         this.reaper = reaper;
         return this;

File: modules/jersey/src/test/java/org/atmosphere/jersey/WriteTimeoutTest.java
Patch:
@@ -131,7 +131,7 @@ public void testWriteTimeout() throws ExecutionException, InterruptedException,
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                AtmosphereResponse.create(),
+                AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -156,7 +156,7 @@ public void testNoWriteTimeout() throws ExecutionException, InterruptedException
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                AtmosphereResponse.create(),
+                AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -408,6 +408,7 @@ public void close(WebSocket webSocket, int closeCode) {
                             r.getAttribute(ASYNCHRONOUS_HOOK);
                     if (!resource.isCancelled()) {
                         if (h != null) {
+                            // Tomcat and Jetty differ, same with browser
                             if (closeCode == 1002 ||closeCode == 1005 ) {
                                 h.timedOut();
                             } else {

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -87,7 +87,8 @@ public SimpleBroadcaster(String id, AtmosphereConfig config) {
     protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config){
         BroadcasterConfig bc = (BroadcasterConfig) config.properties().get(BroadcasterConfig.class.getName());
         if (bc == null) {
-            bc = new BroadcasterConfig(config.framework().broadcasterFilters(), config, false, getID());
+            bc = new BroadcasterConfig(config.framework().broadcasterFilters(), config, false, getID())
+                    .setScheduledExecutorService(ExecutorsFactory.getScheduler(config));
             config.properties().put(BroadcasterConfig.class.getName(), bc);
         }
         return bc;

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -106,7 +106,8 @@ protected void start() {
     @Override
     public void setBroadcasterConfig(BroadcasterConfig bc) {
         this.bc = bc;
-        bc.setExecutorService(null, false).setAsyncWriteService(null, false);
+        bc.setExecutorService(null, false).setAsyncWriteService(null, false)
+                .setScheduledExecutorService(ExecutorsFactory.getScheduler(config));
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/util/ExecutorsFactory.java
Patch:
@@ -67,7 +67,7 @@ public static ExecutorService getMessageDispatcher(final AtmosphereConfig config
 
                     @Override
                     public Thread newThread(final Runnable runnable) {
-                        Thread t = new Thread(runnable, (shared ? "Atmosphere-Shared" : name) + "-dispatch-" + count.getAndIncrement());
+                        Thread t = new Thread(runnable, (shared ? "Atmosphere-Shared" : name) + "-DispatchOp-" + count.getAndIncrement());
                         t.setDaemon(true);
                         return t;
                     }
@@ -79,7 +79,7 @@ public Thread newThread(final Runnable runnable) {
 
                     @Override
                     public Thread newThread(final Runnable runnable) {
-                        Thread t = new Thread(runnable, (shared ? "Atmosphere-Shared" : name) + "-dispatch-" + count.getAndIncrement());
+                        Thread t = new Thread(runnable, (shared ? "Atmosphere-Shared" : name) + "-DispatchOp-" + count.getAndIncrement());
                         t.setDaemon(true);
                         return t;
                     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -453,11 +453,12 @@ public void close(WebSocket webSocket, int closeCode) {
      */
     @Override
     public void destroy() {
-        if (asyncExecutor != null) {
+        boolean shared = framework.isShareExecutorServices();
+        if (asyncExecutor != null && !shared) {
             asyncExecutor.shutdown();
         }
 
-        if (scheduler != null) {
+        if (scheduler != null && !shared) {
             scheduler.shutdown();
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -406,7 +406,6 @@ public void close(WebSocket webSocket, int closeCode) {
                 if (resource != null && resource.isInScope()) {
                     AsynchronousProcessor.AsynchronousProcessorHook h = (AsynchronousProcessor.AsynchronousProcessorHook)
                             r.getAttribute(ASYNCHRONOUS_HOOK);
-
                     if (!resource.isCancelled()) {
                         if (h != null) {
                             if (closeCode == 1000) {

File: modules/cpr/src/main/java/org/atmosphere/cache/UUIDBroadcasterCache.java
Patch:
@@ -144,6 +144,7 @@ protected void invalidateExpiredEntries() {
 
             for (Map.Entry<String, Long> entry : activeClients.entrySet()) {
                 if (now - entry.getValue() > clientIdleTime) {
+                    logger.debug("Invalidate client {}", entry.getKey());
                     inactiveClients.add(entry.getKey());
                 }
             }

File: modules/cpr/src/test/java/org/atmosphere/cpr/UUIDBroadcasterCacheTest.java
Patch:
@@ -84,7 +84,7 @@ public void addRemoveAddTest() throws ExecutionException, InterruptedException,
         broadcaster.addAtmosphereResource(ar);
         broadcaster.broadcast("e3").get();
 
-        assertEquals(0, eventCacheBroadcasterCache.messages().get(ar.uuid()).getQueue().size());
+        assertEquals(0, eventCacheBroadcasterCache.messages().size());
     }
 
     @Test

File: samples/async-annotation-pubsub/src/main/java/org/atmosphere/samples/pubsub/AsynchronousExecution.java
Patch:
@@ -31,15 +31,15 @@
  *
  * @author Jeanfrancois Arcand
  */
-@Path("/chat")
+@Path("/async")
 public class AsynchronousExecution {
     @POST
-    @Asynchronous(contentType = "application/json")
+    @Asynchronous(waitForResource = false, contentType = "application/json")
     public Callable<Response> publish(final Message message) {
         return new Callable<Response>() {
 
             public Response call() throws Exception {
-                return new Response(message.author, message.message);
+                return new Response("Asynchronous Execution", message.message);
             }
         };
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -336,7 +336,7 @@ public void destroy() {
     protected void destroy(boolean force) {
         if (!force && !handleExecutors) return;
 
-        if (broadcasterCache != null) {
+        if ((force || !shared) && broadcasterCache != null) {
             broadcasterCache.stop();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/util/ExecutorsFactory.java
Patch:
@@ -181,7 +181,6 @@ public Thread newThread(final Runnable runnable) {
             });
             config.properties().put("scheduler", scheduler);
             return scheduler;
-
         } else {
             return (ScheduledExecutorService) config.properties().get("scheduler");
         }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -86,8 +86,7 @@ public class DefaultWebSocketProcessor implements WebSocketProcessor, Serializab
     private final boolean destroyable;
     private final boolean executeAsync;
     private ExecutorService asyncExecutor;
-    private ExecutorService voidExecutor;
-    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors());
+    private  ScheduledExecutorService scheduler;
     private final Map<String, WebSocketHandler> handlers = new HashMap<String, WebSocketHandler>();
     private final EndpointMapper<WebSocketHandler> mapper = new DefaultEndpointMapper<WebSocketHandler>();
 

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -144,6 +144,9 @@ public AbstractBroadcasterCache setShared(boolean isShared) {
      * @return this
      */
     public AbstractBroadcasterCache setReaper(ScheduledExecutorService reaper) {
+        if (this.reaper != null) {
+            reaper.shutdown();
+        }
         this.reaper = reaper;
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -712,17 +712,15 @@ protected void configureBroadcaster() {
             while (i.hasNext()) {
                 e = i.next();
                 w = e.getValue();
-                BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config, w.mapping);
 
                 if (w.broadcaster == null) {
                     w.broadcaster = broadcasterFactory.get(w.mapping);
                 } else {
-                    w.broadcaster.setBroadcasterConfig(broadcasterConfig);
                     if (broadcasterCacheClassName != null) {
                         BroadcasterCache cache = (BroadcasterCache) Thread.currentThread().getContextClassLoader()
                                 .loadClass(broadcasterCacheClassName).newInstance();
                         InjectorProvider.getInjector().inject(cache);
-                        broadcasterConfig.setBroadcasterCache(cache);
+                        w.broadcaster.getBroadcasterConfig().setBroadcasterCache(cache);
                     }
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -107,6 +107,7 @@ public BroadcasterConfig(List<String> list, AtmosphereConfig config, boolean han
         configureBroadcasterCache();
         this.name = name;
         this.handleExecutors = handleExecutors;
+        logger.info("Using SHARED ExecutorServices for Asynchronous message delivery and write operation {} for Broadcaster {}", isExecutorShared, name);
     }
 
     public BroadcasterConfig(ExecutorService executorService, ExecutorService asyncWriteService,
@@ -117,6 +118,7 @@ public BroadcasterConfig(ExecutorService executorService, ExecutorService asyncW
         this.config = config;
         this.name = name;
         this.handleExecutors = true;
+        logger.info("Using SHARED ExecutorServices for Asynchronous message delivery and write operation {} for Broadcaster {}", isExecutorShared, name);
     }
 
     private void configureBroadcasterCache() {
@@ -172,12 +174,11 @@ protected void initClusterExtension() {
 
     protected synchronized void configExecutors() {
         String s = config.getInitParameter(ApplicationConfig.BROADCASTER_SHARABLE_THREAD_POOLS);
-        if (Boolean.parseBoolean(s)) {
+        if (s == null || Boolean.parseBoolean(s)) {
             shared = true;
             handleExecutors = false;
             isExecutorShared = true;
             isAsyncExecutorShared = true;
-            logger.info("ExecutorServices will be shared amongts Broadcasters");
         }
 
         if (config.properties().get("executorService") == null) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcastFilterTest.java
Patch:
@@ -315,12 +315,12 @@ public BroadcastAction filter(AtmosphereResource r, Object message, Object origi
                 return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, msg);
             }
         });
-        broadcaster.broadcast("0").get();
+        broadcaster.broadcast("message-1").get();
         broadcaster.addAtmosphereResource(ar);
 
-        broadcaster.broadcast("XXX").get();
+        broadcaster.broadcast("message-2").get();
         broadcaster.removeAtmosphereResource(ar);
         broadcaster.addAtmosphereResource(ar);
-        assertEquals(atmosphereHandler.value.get().toString(), "1|03|XXX1|0");
+        assertEquals(atmosphereHandler.value.get().toString(), "9|message-19|message-29|message-1");
     }
 }

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterListenerTest.java
Patch:
@@ -88,7 +88,7 @@ public void onPreDestroy(Broadcaster b) {
     public void testGet() throws IOException, ServletException {
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").method("GET").build();
-        framework.doCometSupport(request, AtmosphereResponse.create());
+        framework.doCometSupport(request, AtmosphereResponse.newInstance());
         assertTrue(completed.get());
         assertTrue(postCreated.get());
         assertTrue(preDssrtoyed.get());

File: modules/cpr/src/test/java/org/atmosphere/cpr/WriteTimeoutTest.java
Patch:
@@ -60,7 +60,7 @@ public void testWriteTimeout() throws ExecutionException, InterruptedException,
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                AtmosphereResponse.create(),
+                AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -85,7 +85,7 @@ public void testNoWriteTimeout() throws ExecutionException, InterruptedException
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                AtmosphereResponse.create(),
+                AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -17,6 +17,7 @@
 
 import eu.infomas.annotation.AnnotationDetector;
 import org.atmosphere.cache.BroadcasterCacheInspector;
+import org.atmosphere.cache.UUIDBroadcasterCache;
 import org.atmosphere.client.TrackMessageSizeInterceptor;
 import org.atmosphere.config.service.AsyncSupportListenerService;
 import org.atmosphere.config.service.AsyncSupportService;
@@ -304,7 +305,7 @@ public void postInspect(AtmosphereResource r) {
                         }
 
                         framework.addAtmosphereHandler(a.path(), handler, l);
-                        framework.setBroadcasterCacheClassName(EventCacheBroadcasterCache.class.getName());
+                        framework.setBroadcasterCacheClassName(UUIDBroadcasterCache.class.getName());
                     } catch (Throwable e) {
                         logger.warn("", e);
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -17,8 +17,6 @@
 
 import eu.infomas.annotation.AnnotationDetector;
 import org.atmosphere.cache.BroadcasterCacheInspector;
-import org.atmosphere.cache.EventCacheBroadcasterCache;
-import org.atmosphere.cache.HeaderBroadcasterCache;
 import org.atmosphere.client.TrackMessageSizeInterceptor;
 import org.atmosphere.config.service.AsyncSupportListenerService;
 import org.atmosphere.config.service.AsyncSupportService;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -573,6 +573,7 @@ public void run() {
                 try {
                     token = asyncWriteQueue.poll(5, TimeUnit.SECONDS);
                     if (token == null) {
+                        writeQueues.remove(token.resource.uuid());
                         return;
                     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -214,6 +214,7 @@ public synchronized void destroy() {
             messages.clear();
             delayedBroadcast.clear();
             broadcasterListeners.clear();
+            writeQueues.clear();
         } catch (Throwable t) {
             logger.error("Unexpected exception during Broadcaster destroy {}", getID(), t);
         }
@@ -1390,12 +1391,13 @@ public Broadcaster removeAtmosphereResource(AtmosphereResource r) {
     }
 
     protected Broadcaster removeAtmosphereResource(AtmosphereResource r, boolean executeDone) {
-
         if (destroyed.get()) {
             logger.debug(DESTROYED, getID(), "removeAtmosphereResource(AtmosphereResource r)");
             return this;
         }
 
+        writeQueues.remove(r.uuid());
+
         // Here we need to make sure we aren't in the process of broadcasting and unlock the Future.
         if (executeDone) {
             AtmosphereResourceImpl aImpl = AtmosphereResourceImpl.class.cast(r);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -137,7 +137,7 @@ public class DefaultBroadcaster implements Broadcaster {
     protected BroadcasterCache.STRATEGY cacheStrategy = BroadcasterCache.STRATEGY.AFTER_FILTER;
     private final Object[] awaitBarrier = new Object[0];
     private final AtomicBoolean outOfOrderBroadcastSupported = new AtomicBoolean(false);
-    private int writeTimeoutInSecond = -1;
+    protected int writeTimeoutInSecond = -1;
 
     public DefaultBroadcaster(String name, URI uri, AtmosphereConfig config) {
         this.name = name;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1018,6 +1018,7 @@ protected void trackBroadcastMessage(final AtmosphereResource r, Entry entry) {
 
     protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (writeTimeoutInSecond != -1) {
+            logger.debug("Registering write timeout {} for {}", writeTimeoutInSecond, r.uuid());
             WriteOperation w = new WriteOperation(r, e);
             bc.getScheduledExecutorService().schedule(w, writeTimeoutInSecond, TimeUnit.MILLISECONDS);
 
@@ -1051,8 +1052,10 @@ private WriteOperation(AtmosphereResource r, AtmosphereResourceEvent e) {
         public Object call() throws Exception {
             if (!completed.getAndSet(true)) {
                 invokeOnStateChange(r,e);
+                logger.debug("Cancelling Write timeout {} for {}", writeTimeoutInSecond, r.uuid());
                 executed.set(true);
             } else if (!executed.get()){
+                logger.debug("Honoring Write timeout {} for {}", writeTimeoutInSecond, r.uuid());
                 onException(new IOException("Unable to write after " + writeTimeoutInSecond), r);
                 AtmosphereResourceImpl.class.cast(r).cancel();
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -535,10 +535,9 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                     }
                 }
 
-                logger.debug("Cancelling the connection for AtmosphereResource {}", r.uuid());
-
                 r = (AtmosphereResourceImpl) req.resource();
                 if (r != null) {
+                    logger.debug("Cancelling the connection for AtmosphereResource {}", r.uuid());
 
                     if (r.isCancelled()) {
                         logger.trace("{} is already cancelled", r.uuid());

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1054,7 +1054,7 @@ public Object call() throws Exception {
                 } catch (Throwable t) {
                     onException(t, r);
                 }
-            } else {
+            } else if (!completed.get()){
                 onException(new IOException("Unable to write after " + writeTimeoutInSecond), r);
                 AtmosphereResourceImpl.class.cast(r).cancel();
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -558,7 +558,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                 }
             } catch (Throwable ex) {
                 // Something wrong happenned, ignore the exception
-                logger.debug("failed to cancel resource: {}", r.uuid(), ex);
+                logger.debug("failed to cancel resource: {}", r == null ? "" : r.uuid() , ex);
             } finally {
                 config.framework().notify(Action.TYPE.CANCELLED, req, res);
                 try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -34,6 +34,7 @@
 import org.atmosphere.interceptor.DefaultHeadersInterceptor;
 import org.atmosphere.interceptor.JSONPAtmosphereInterceptor;
 import org.atmosphere.interceptor.JavaScriptProtocol;
+import org.atmosphere.interceptor.OnDisconnectInterceptor;
 import org.atmosphere.interceptor.SSEAtmosphereInterceptor;
 import org.atmosphere.interceptor.StreamingAtmosphereInterceptor;
 import org.atmosphere.util.AtmosphereConfigReader;
@@ -607,6 +608,8 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
         logger.info("Installing Default AtmosphereInterceptor");
         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);
         if (s == null) {
+            // OnDisconnect
+            interceptors.addFirst(newAInterceptor(OnDisconnectInterceptor.class));
             // ADD Tracking ID Handshake
             interceptors.addFirst(newAInterceptor(JavaScriptProtocol.class));
             // ADD JSONP support

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -44,6 +44,8 @@ public interface HeaderConfig {
 
     String SSE_TRANSPORT = "sse";
 
+    String DISCONNECT = "close";
+
     /**
      * When a unexpected error occurs.
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -677,7 +677,7 @@ public void write(java.lang.String s) {
                         // Prevent StackOverflow
                         boolean b = forceAsyncIOWriter;
                         forceAsyncIOWriter = false;
-                        asyncIOWriter.write(AtmosphereResponse.this, new String(s));
+                        asyncIOWriter.write(AtmosphereResponse.this, s);
                         forceAsyncIOWriter = b;
 
                     } catch (IOException e) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -808,7 +808,7 @@ protected void queueWriteIO(AtmosphereResource r, Object finalMsg, Entry entry)
                 // FIX ME IN 1.1 -- For legacy, we need to leave the logic here
                 BroadcasterCache broadcasterCache = bc.getBroadcasterCache();
                 if (!EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())) {
-                    trackBroadcastMessage(r, cacheStrategy == BroadcasterCache.STRATEGY.AFTER_FILTER ? finalMsg: entry.originalMessage);
+                    trackBroadcastMessage(r, entry);
                 }
             }  else {
                 asyncWriteQueue.put(new AsyncWriteToken(r, finalMsg, entry.future, entry.originalMessage, entry.cache));

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -958,6 +958,7 @@ protected void checkCachedAndPush(final AtmosphereResource r, final AtmosphereRe
                 } catch (Throwable t) {
                     // An exception occured
                     logger.error("Unable to write cached message {} for {}", e.getMessage(), r.uuid());
+                    logger.error("", t);
                     for (Object o : cacheMessages) {
                         bc.getBroadcasterCache().addToCache(getID(), r, o);
                     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -1089,7 +1089,7 @@ public void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token, boolea
         // https://github.com/Atmosphere/atmosphere/issues/864
         // FIX ME IN 1.1 -- For legacy, we need to leave the logic here
         BroadcasterCache broadcasterCache = bc.getBroadcasterCache();
-        if (!force || EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())) {
+        if (!force && EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())) {
             return;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -895,7 +895,6 @@ protected void executeAsyncWrite(final AsyncWriteToken token) {
             if (EventCacheBroadcasterCache.class.isAssignableFrom(broadcasterCache.getClass())) {
                 EventCacheBroadcasterCache.class.cast(broadcasterCache).clearCache(getID(), r, token.cache);
             }
-            r.getRequest().setAttribute(getID(), token.future);
 
             // Make sure we cache the message in case the AtmosphereResource has been cancelled, resumed or the client disconnected.
             if (!isAtmosphereResourceValid(r)) {
@@ -905,10 +904,11 @@ protected void executeAsyncWrite(final AsyncWriteToken token) {
             }
 
             try {
+                r.getRequest().setAttribute(getID(), token.future);
                 r.getRequest().setAttribute(MAX_INACTIVE, System.currentTimeMillis());
             } catch (Throwable t) {
                 logger.warn("Invalid AtmosphereResource state {}. The connection has been remotely" +
-                        " closed and will be added to the configured BroadcasterCache for later retrieval", event);
+                        " closed and message {} will be added to the configured BroadcasterCache for later retrieval", r.uuid(), event.getMessage());
                 logger.trace("If you are using Tomcat 7.0.22 and lower, your most probably hitting http://is.gd/NqicFT");
                 logger.trace("", t);
                 // The Request/Response associated with the AtmosphereResource has already been written and commited

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeFilter.java
Patch:
@@ -45,7 +45,7 @@ public BroadcastAction filter(AtmosphereResource r, Object originalMessage, Obje
         if ("true".equalsIgnoreCase(request.getHeader(X_ATMOSPHERE_TRACKMESSAGESIZE))
                 && message != null && String.class.isAssignableFrom(message.getClass())) {
 
-            String msg = message.toString();
+            String msg = message.toString().trim();
             msg = msg.length() + "|" + msg;
             return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, msg);
 

File: modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java
Patch:
@@ -126,7 +126,7 @@ public void start() {
             public void run() {
                 invalidateExpiredEntries();
             }
-        }, 0, invalidateCacheInterval, TimeUnit.MINUTES);
+        }, 0, invalidateCacheInterval, TimeUnit.MILLISECONDS);
     }
 
     protected void invalidateExpiredEntries() {

File: modules/cpr/src/main/java/org/atmosphere/cache/EventCacheBroadcasterCache.java
Patch:
@@ -130,7 +130,7 @@ public void run() {
     }
 
     protected void invalidateExpiredEntries() {
-        long now = System.nanoTime();
+        long now = System.currentTimeMillis();
         synchronized (messages) {
 
             Set<String> inactiveClients = new HashSet<String>();
@@ -177,7 +177,7 @@ public CacheMessage addCacheCandidate(String broadcasterId, AtmosphereResource r
             logger.debug("Active clients {}", activeClients());
         }
 
-        long now = System.nanoTime();
+        long now = System.currentTimeMillis();
         String messageId = UUID.randomUUID().toString();
         CacheMessage cacheMessage = new CacheMessage(messageId, e);
         synchronized (messages) {
@@ -272,7 +272,7 @@ private boolean hasMessage(String clientId, String messageId) {
     @Override
     public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r) {
         String clientId = r.uuid();
-        long now = System.nanoTime();
+        long now = System.currentTimeMillis();
 
         List<Object> result = new ArrayList<Object>();
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -96,7 +96,7 @@ public class DefaultAsyncSupportResolver implements AsyncSupportResolver {
     public final static String JETTY = "org.mortbay.util.ajax.Continuation";
     public final static String JETTY_7 = "org.eclipse.jetty.servlet.ServletContextHandler";
     public final static String JETTY_8 = "org.eclipse.jetty.continuation.Servlet3Continuation";
-    public final static String JETTY_9 = "org.eclipse.jetty.websocket.server.WebSocketServerFactory";
+    public final static String JETTY_9 = "org.eclipse.jetty.websocket.api.WebSocketPolicy";
     public final static String GRIZZLY = "com.sun.grizzly.http.servlet.ServletAdapter";
     public final static String GRIZZLY2 = "org.glassfish.grizzly.http.servlet.ServletHandler";
     public final static String JBOSSWEB = "org.apache.catalina.connector.HttpEventImpl";

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java
Patch:
@@ -63,7 +63,7 @@ public interface WebSocketEventListener extends AtmosphereResourceEventListener{
 
 
     public static final class WebSocketEvent<T> {
-        public enum TYPE { CONNECT, HANDSHAKE, CLOSE, MESSAGE, CONTROL, DISCONNECT, STREAM}
+        public enum TYPE { CONNECT, HANDSHAKE, CLOSE, MESSAGE, CONTROL, DISCONNECT, STREAM, EXCEPTION}
         private final T message;
         private final TYPE type;
         private final WebSocket webSocket;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -16,6 +16,7 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.cache.BroadcasterCacheInspector;
+import org.atmosphere.cache.EventCacheBroadcasterCache;
 import org.atmosphere.client.TrackMessageSizeFilter;
 import org.atmosphere.client.TrackMessageSizeInterceptor;
 import org.atmosphere.config.ApplicationConfiguration;
@@ -522,7 +523,7 @@ public Enumeration<String> getInitParameterNames() {
 
             if (broadcasterCacheClassName == null) {
                 logger.warn("No BroadcasterCache configured. Broadcasted message between client reconnection will be LOST. " +
-                        "It is recommended to configure the HeaderBroadcasterCache.");
+                        "It is recommended to configure the {}", EventCacheBroadcasterCache.class.getName());
             }  else {
                 logger.info("Using BroadcasterCache: {}", broadcasterCacheClassName);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -71,7 +71,6 @@
 
 import static org.atmosphere.cpr.ApplicationConfig.MAX_INACTIVE;
 import static org.atmosphere.cpr.AtmosphereFramework.AtmosphereHandlerWrapper;
-import static org.atmosphere.cpr.AtmosphereFramework.logger;
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
 
 /**

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -63,7 +63,7 @@ public final static void broadcast(final AtmosphereResource r, final AtmosphereR
             }
 
             if (DefaultBroadcaster.class.isAssignableFrom(broadcaster.getClass())) {
-                DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r);
+                DefaultBroadcaster.class.cast(broadcaster).cacheLostMessage(r, true);
             }
             AsynchronousProcessor.destroyResource(r);
             return;

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -158,7 +158,9 @@ protected void suspend(Action action, AtmosphereRequest req, AtmosphereResponse
             if (!ok) {
                 timedout(req, res);
             } else {
-                AtmosphereResourceImpl.class.cast(req.resource()).cancel();
+                if (req.resource() != null) {
+                    AtmosphereResourceImpl.class.cast(req.resource()).cancel();
+                }
             }
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -357,6 +357,7 @@ public static BroadcasterFactory buildAndReplaceDefaultfactory(Class<? extends B
             throws InstantiationException, IllegalAccessException {
 
         factory = new DefaultBroadcasterFactory(clazz, "NEVER", c);
+         c.framework().setBroadcasterFactory(factory);
         return factory;
     }
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterCacheTest.java
Patch:
@@ -48,6 +48,8 @@ public void setUp() throws Exception {
         AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
         broadcaster = factory.get(DefaultBroadcaster.class, "test");
+        config.framework().setBroadcasterFactory(factory);
+
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,

File: modules/cpr/src/test/java/org/atmosphere/cpr/EventCacheBroadcasterCacheTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() throws Exception {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                AtmosphereResponse.create(),
+                AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
         broadcaster.addAtmosphereResource(ar);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -218,7 +218,7 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         // Check Broadcaster state. If destroyed, replace it.
         Broadcaster b = handlerWrapper.broadcaster;
         if (b.isDestroyed()) {
-            BroadcasterFactory f = BroadcasterFactory.getDefault();
+            BroadcasterFactory f = config.getBroadcasterFactory();
             synchronized (f) {
                 f.remove(b, b.getID());
                 try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -94,7 +94,7 @@ public void setSupportSession(boolean supportSession) {
      * @return an instance of a {@link DefaultBroadcasterFactory}
      */
     public BroadcasterFactory getBroadcasterFactory() {
-        return BroadcasterFactory.getDefault();
+        return framework.getBroadcasterFactory();
     }
 
     public String getDispatcherName() {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceFactory.java
Patch:
@@ -115,7 +115,7 @@ public final AtmosphereResource create(AtmosphereConfig config,
     public final AtmosphereResource remove(String uuid) {
         AtmosphereResource r = find(uuid);
         if (r != null) {
-            BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
+            r.getAtmosphereConfig().getBroadcasterFactory().removeAllAtmosphereResource(r);
         }
         return r;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -173,7 +173,8 @@ public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope
 
         if (scope == Broadcaster.SCOPE.REQUEST) {
             try {
-                b = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
+                BroadcasterFactory f = r.getAtmosphereConfig().getBroadcasterFactory();
+                b = f.get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
             } catch (Throwable t) {
                 throw new RuntimeException(t);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -146,7 +146,7 @@ private void loadDelegateViaConfig(ServletConfig sc) throws ServletException {
             r.addFilterClassName(filterClass, filterName);
             if (mapping == null) {
                 mapping = "/*";
-                BroadcasterFactory.getDefault().remove("/*");
+                framework.getBroadcasterFactory().remove("/*");
             }
             framework.addAtmosphereHandler(mapping, r).initAtmosphereHandler(sc);
         }

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcastFilterTest.java
Patch:
@@ -44,6 +44,7 @@ public class BroadcastFilterTest {
     public void setUp() throws Exception {
         AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
+        config.framework().setBroadcasterFactory(factory);
         broadcaster = factory.get(DefaultBroadcaster.class, "test");
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -46,6 +46,7 @@ public class BroadcasterTest {
     public void setUp() throws Exception {
         AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
+        config.framework().setBroadcasterFactory(factory);
         broadcaster = factory.get(DefaultBroadcaster.class, "test");
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,

File: modules/cpr/src/test/java/org/atmosphere/cpr/EventCacheBroadcasterCacheTest.java
Patch:
@@ -44,6 +44,8 @@ public void setUp() throws Exception {
         AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
         broadcaster = factory.get(DefaultBroadcaster.class, "test");
+        config.framework().setBroadcasterFactory(factory);
+
         eventCacheBroadcasterCache = new EventCacheBroadcasterCache();
         broadcaster.getBroadcasterConfig().setBroadcasterCache(eventCacheBroadcasterCache);
         atmosphereHandler = new AR();

File: modules/cpr/src/test/java/org/atmosphere/cpr/ExcludeSessionBroadcasterTest.java
Patch:
@@ -41,6 +41,8 @@ public class ExcludeSessionBroadcasterTest {
     public void setUp() throws Exception {
         AtmosphereConfig config = new AtmosphereFramework().getAtmosphereConfig();
         DefaultBroadcasterFactory factory = new DefaultBroadcasterFactory(ExcludeSessionBroadcaster.class, "NEVER", config);
+        config.framework().setBroadcasterFactory(factory);
+
         broadcaster = factory.get(ExcludeSessionBroadcaster.class, "test");
         atmosphereHandler = new AR();
         ar = new AtmosphereResourceImpl(config,

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -326,7 +326,7 @@ public ContainerResponse filter(final ContainerRequest request, final ContainerR
                     Broadcaster newBroadcaster;
                     // See issue https://github.com/Atmosphere/atmosphere/issues/676
                     synchronized (broadcasterName.intern()) {
-                        newBroadcaster = BroadcasterFactory.getDefault().lookup(broadcasterName, true);
+                        newBroadcaster = config.getBroadcasterFactory().lookup(broadcasterName, true);
                         newBroadcaster.setBroadcasterLifeCyclePolicy(BroadcasterLifeCyclePolicy.EMPTY_DESTROY);
                     }
                     final Broadcaster bcaster = newBroadcaster;
@@ -447,7 +447,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
                         } catch (Throwable e) {
                             throw new IllegalStateException(e.getMessage());
                         }
-                        broadcaster = BroadcasterFactory.getDefault().lookup(c, topic, true);
+                        broadcaster = config.getBroadcasterFactory().lookup(c, topic, true);
                     }
 
                     suspend(resumeOnBroadcast, timeout, request, response,
@@ -498,7 +498,7 @@ public void onSuspend(AtmosphereResourceEvent event) {
                         } catch (Throwable e) {
                             throw new IllegalStateException(e.getMessage());
                         }
-                        r.setBroadcaster(BroadcasterFactory.getDefault().lookup(c, topic, true));
+                        r.setBroadcaster(config.getBroadcasterFactory().lookup(c, topic, true));
                     }
 
                     broadcast(response, r, timeout);

File: modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
Patch:
@@ -54,9 +54,11 @@
 import com.sun.jersey.core.spi.component.ComponentContext;
 import com.sun.jersey.core.spi.component.ComponentScope;
 import com.sun.jersey.spi.inject.Injectable;
+import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
+import org.atmosphere.cpr.FrameworkConfig;
 
 import javax.ws.rs.core.Context;
 import java.lang.reflect.Type;
@@ -119,7 +121,7 @@ public BroadcasterFactory getValue() {
 
         class BroadcasterFactoryProxy extends BroadcasterFactory {
             BroadcasterFactory _get() {
-                return BroadcasterFactory.getDefault();
+                return (BroadcasterFactory) req.getAttribute(ApplicationConfig.BROADCASTER_FACTORY);
             }
 
             @Override

File: modules/cpr/src/test/java/org/atmosphere/cpr/EventCacheBroadcasterCacheTest.java
Patch:
@@ -81,7 +81,7 @@ public void addRemoveAddTest() throws ExecutionException, InterruptedException,
         broadcaster.addAtmosphereResource(ar);
         broadcaster.broadcast("e3").get();
 
-        assertEquals(0, eventCacheBroadcasterCache.messages().size());
+        assertEquals(0, eventCacheBroadcasterCache.messages().get(ar.uuid()).getQueue().size());
     }
 
     @Test

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/Jetty7CometSupportTest.java
Patch:
@@ -65,7 +65,7 @@ public class Jetty7CometSupportTest extends BaseTest {
     @BeforeMethod(alwaysRun = true)
     public void startServer() throws Exception {
 
-        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
+        int port = findFreePort();
         urlTarget = "http://127.0.0.1:" + port + "/invoke";
 
         server = new Server(port);

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -84,5 +84,8 @@ public interface HeaderConfig {
 =======
 
     String X_ATMO_PROTOCOL = "X-atmo-protocol";
+<<<<<<< HEAD
+>>>>>>> 74de41a... Fix for #680
+=======
 >>>>>>> 74de41a... Fix for #680
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -32,6 +32,7 @@
 import org.atmosphere.interceptor.AndroidAtmosphereInterceptor;
 import org.atmosphere.interceptor.DefaultHeadersInterceptor;
 import org.atmosphere.interceptor.JSONPAtmosphereInterceptor;
+import org.atmosphere.interceptor.JavaScriptProtocol;
 import org.atmosphere.interceptor.SSEAtmosphereInterceptor;
 import org.atmosphere.interceptor.StreamingAtmosphereInterceptor;
 import org.atmosphere.util.AtmosphereConfigReader;
@@ -605,6 +606,8 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
         logger.info("Installing Default AtmosphereInterceptor");
         s = sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR);
         if (s == null) {
+            // ADD Tracking ID Handshake
+            interceptors.addFirst(newAInterceptor(JavaScriptProtocol.class));
             // ADD JSONP support
             interceptors.addFirst(newAInterceptor(JSONPAtmosphereInterceptor.class));
             // Add SSE support

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -892,9 +892,9 @@ protected void checkCachedAndPush(final AtmosphereResource r, final AtmosphereRe
 
         if (e.getMessage() instanceof List && !((List) e.getMessage()).isEmpty()) {
 
-            List<Object> filteredMessage = new ArrayList<Object>();
+            LinkedList<Object> filteredMessage = new LinkedList<Object>();
             for (Object o : ((List) e.getMessage())) {
-                filteredMessage.add(perRequestFilter(r, new Entry(o, r, f, o), false));
+                filteredMessage.addLast(perRequestFilter(r, new Entry(o, r, f, o), false));
             }
 
             e.setMessage(filteredMessage);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -560,11 +560,11 @@ public void run() {
                     }
 
                     synchronized (token.resource) {
+                        executeAsyncWrite(token);
                         if (!outOfOrderBroadcastSupported.get()) {
                             // We want this thread to wait for the write operation to happens to kept the order
                             bc.getAsyncWriteService().submit(this);
                         }
-                        executeAsyncWrite(token);
                     }
                 } catch (InterruptedException ex) {
                     return;

File: integration-tests/cpr/src/test/java/org/atmosphere/tests/http/BaseTest.java
Patch:
@@ -1277,7 +1277,7 @@ public void onRequest(AtmosphereResource event) throws IOException {
             }
 
             public void onStateChange(AtmosphereResourceEvent event) throws IOException {
-                if (event.isResuming()) {
+                if (event.isResuming() || event.isCancelled()) {
                     return;
                 }
                 PrintWriter writer = event.getResource().getResponse().getWriter();

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcastFilterTest.java
Patch:
@@ -147,7 +147,7 @@ public void testMultipleMixedFilter() throws ExecutionException, InterruptedExce
         broadcaster.getBroadcasterConfig().addFilter(new PerRequestFilter("4"));
 
         broadcaster.broadcast("0").get();
-        assertEquals(atmosphereHandler.value.get().toString(), "01234");
+        assertEquals(atmosphereHandler.value.get().toString(), "012341234");
     }
 
     @Test
@@ -161,7 +161,7 @@ public void testMultipleMixedPerRequestFilter() throws ExecutionException, Inter
         broadcaster.getBroadcasterConfig().addFilter(new Filter("4"));
 
         broadcaster.broadcast("0").get();
-        assertEquals(atmosphereHandler.value.get().toString(), "0abc");
+        assertEquals(atmosphereHandler.value.get().toString(), "01234abc");
     }
 
     @Test
@@ -188,7 +188,7 @@ public PerRequestFilter(String msg) {
 
         @Override
         public BroadcastAction filter(Object originalMessage, Object message) {
-            return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, message + msg);
+            return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, message);
         }
 
         @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -524,11 +524,11 @@ protected BroadcastAction filter(Object object) {
      * @param message the broadcasted object.
      * @return BroadcastAction that tell Atmosphere to invoke the next filter or not.
      */
-    protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {
-        BroadcastAction transformed = new BroadcastAction(originalMessage);
+    protected BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage)  {
+        BroadcastAction transformed = new BroadcastAction(message);
         for (PerRequestBroadcastFilter mf : perRequestFilters) {
             synchronized (mf) {
-                transformed = mf.filter(r, message, transformed.message());
+                transformed = mf.filter(r, originalMessage, transformed.message());
                 if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT) {
                     return transformed;
                 }

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeFilter.java
Patch:
@@ -39,7 +39,7 @@
 public class TrackMessageSizeFilter implements PerRequestBroadcastFilter {
 
     @Override
-    public BroadcastAction filter(AtmosphereResource r, Object message, Object originalMessage) {
+    public BroadcastAction filter(AtmosphereResource r, Object originalMessage, Object message) {
 
         AtmosphereRequest request = r.getRequest();
         if ("true".equalsIgnoreCase(request.getHeader(X_ATMOSPHERE_TRACKMESSAGESIZE))

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -110,7 +110,7 @@ public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(HttpServletReque
         if (config.getInitParameter(ApplicationConfig.WEBSOCKET_BUFFER_SIZE) != null) {
             bufferSize = Integer.valueOf(config.getInitParameter(ApplicationConfig.WEBSOCKET_BUFFER_SIZE));
         }
-        logger.debug("WebSocket Buffer side {}", bufferSize);
+        logger.debug("WebSocket Buffer size {}", bufferSize);
         webSocketFactory.setBufferSize(bufferSize);
 
         int timeOut = 5 * 60000;

File: modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java
Patch:
@@ -48,7 +48,7 @@
  * @author Jeanfrancois Arcand
  */
 public class MetaBroadcaster {
-    public static final String MAPPING_REGEX = "[/a-zA-Z0-9-&.*=_;\\?]+";
+    public static final String MAPPING_REGEX = "[/a-zA-Z0-9-&.*=@_;\\?]+";
 
     private final static Logger logger = LoggerFactory.getLogger(MetaBroadcaster.class);
     private final static MetaBroadcaster metaBroadcaster = new MetaBroadcaster();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1395,6 +1395,9 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
                     logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", asyncSupport.getClass().getName(),
                             ex.getMessage());
                 }
+                logger.error("If you have more than one Connector enabled, make sure they both use the same protocol, " +
+                        "e.g NIO/APR or HTTP for all. If not, {} will be used and cannot be changed.", BlockingIOCometSupport.class.getName());
+
                 logger.trace(ex.getMessage(), ex);
 
                 AsyncSupport current = asyncSupport;

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -58,7 +58,7 @@ public WebSocket write(String s) throws IOException {
 
     @Override
     public WebSocket write(byte[] b, int offset, int length) throws IOException {
-       connection.sendMessage(b, offset, length);
+        connection.sendMessage(b, offset, length);
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java
Patch:
@@ -48,7 +48,7 @@
  * @author Jeanfrancois Arcand
  */
 public class MetaBroadcaster {
-    public static final String MAPPING_REGEX = "[/a-zA-Z0-9-&.*=;\\?]+";
+    public static final String MAPPING_REGEX = "[/a-zA-Z0-9-&.*=_;\\?]+";
 
     private final static Logger logger = LoggerFactory.getLogger(MetaBroadcaster.class);
     private final static MetaBroadcaster metaBroadcaster = new MetaBroadcaster();

File: modules/annotations/src/main/java/org/atmosphere/annotation/Suspend.java
Patch:
@@ -122,7 +122,7 @@ enum SCOPE {
     public boolean resumeOnBroadcast() default false;
 
     /**
-     * Add {@link AtmosphereResourceEventListener} to the broadcast operation.
+     * Add {@link AtmosphereResourceEventListener} to track internal events.
      */
     public Class<? extends AtmosphereResourceEventListener>[] listeners() default {};
 

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractBroadcasterCache implements BroadcasterCache {
 
     @Override
     public void start() {
-        reaper.scheduleAtFixedRate(new Runnable() {
+        scheduledFuture = reaper.scheduleAtFixedRate(new Runnable() {
 
             public void run() {
                 readWriteLock.writeLock().lock();

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -53,7 +53,7 @@ public abstract class AbstractBroadcasterCache implements BroadcasterCache {
 
     @Override
     public void start() {
-        reaper.scheduleAtFixedRate(new Runnable() {
+        scheduledFuture = reaper.scheduleAtFixedRate(new Runnable() {
 
             public void run() {
                 readWriteLock.writeLock().lock();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -502,7 +502,7 @@ public AtmosphereRequest queryString(String queryString) {
             Map<String, List<String>> m = decoder.getParameters();
             Map<String, String[]> newM = new HashMap<String, String[]>();
             for (Map.Entry<String, List<String>> q : m.entrySet()) {
-                newM.put(q.getKey(), q.getValue().toArray(new String[m.size()]));
+                newM.put(q.getKey(), q.getValue().toArray(new String[q.getValue().size()]));
             }
             b.queryStrings(newM);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -113,7 +113,7 @@ public final static class Builder {
         private HttpServletResponse atmosphereResponse = dsr;
         private AtomicBoolean writeStatusAndHeader = new AtomicBoolean(true);
         private final Map<String, String> headers = new HashMap<String, String>();
-        public boolean destroyable = true;
+        private boolean destroyable = true;
 
         public Builder() {
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriterAdapter.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public abstract class AsyncIOWriterAdapter implements AsyncIOWriter {
+public class AsyncIOWriterAdapter implements AsyncIOWriter {
 
     public AsyncIOWriterAdapter() {
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereRequestTest.java
Patch:
@@ -237,7 +237,7 @@ public void destroy() {
         });
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.newInstance(false));
+        framework.doCometSupport(request, AtmosphereResponse.newInstance().delegateToNativeResponse(false));
 
         assertEquals(e.get().getCharacterEncoding(), "utf-8");
     }

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -55,6 +55,7 @@
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereServletProcessor;
 import org.atmosphere.cpr.FrameworkConfig;
+import org.atmosphere.di.InjectorProvider;
 import org.atmosphere.util.AtmosphereFilterChain;
 import org.atmosphere.util.FilterConfigImpl;
 import org.slf4j.Logger;
@@ -121,6 +122,7 @@ void loadWebApplication(ServletConfig sc) throws MalformedURLException,
                 servlet = (Servlet) Thread.currentThread().getContextClassLoader()
                         .loadClass(servletClassName).newInstance();
             }
+            InjectorProvider.getInjector().inject(servlet);
         }
 
         logger.info("Installing Servlet {}", servletClassName);
@@ -137,6 +139,7 @@ void loadWebApplication(ServletConfig sc) throws MalformedURLException,
             }
             FilterConfigImpl fc = new FilterConfigImpl(sc);
             fc.setFilter(f);
+            InjectorProvider.getInjector().inject(f);
 
             if (filterName == null) {
                 if (sc.getInitParameter(APPLICATION_NAME) != null) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/ManagedAtmosphereHandlerTest.java
Patch:
@@ -48,7 +48,7 @@ public void create() throws Throwable {
         framework = new AtmosphereFramework();
         framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()) ;
         String name = new File(".").getAbsolutePath();
-        framework.setLibPath(name.substring(0, name.length() - 1) + "/modules/cpr/target/");
+        framework.setLibPath(name.substring(0, name.length() - 1) + "/target/");
         framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()) {
 
             @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -302,7 +302,7 @@ public interface ApplicationConfig {
      */
     String ANNOTATION_PROCESSOR =  AnnotationProcessor.class.getName();
     /**
-     * Definr an implementation of the {@link EndpointMapper}
+     * Define an implementation of the {@link EndpointMapper}
      */
     String ENDPOINT_MAPPER = EndpointMapper.class.getName();
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1328,7 +1328,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
                 if (!name.startsWith("x-atmosphere") && !name.equalsIgnoreCase("x-cache-date")) {
                     queryStrings.append(key).append("=").append(req.getParameter(key));
                 }
-                if (e.hasMoreElements()) {
+                if (e.hasMoreElements() && queryStrings.length() > 0) {
                     queryStrings.append("&");
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -132,9 +132,8 @@ public void onStateChange(AtmosphereResourceEvent event)
                    r.getWriter().flush();
                 }
             }
-
-            postStateChange(event);
         }
+        postStateChange(event);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1596,6 +1596,9 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
                 .method(request.getMethod())
                 .serverName(request.getServerName())
                 .serverPort(request.getServerPort())
+                .remoteAddr(request.getRemoteAddr())
+                .remoteHost(request.getRemoteHost())
+                .remotePort(request.getRemotePort())
                 .destroyable(isDestroyable)
                 .cookies(hs)
                 .session(copySession ? new FakeHttpSession(request.getSession(true)) : null);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java
Patch:
@@ -74,7 +74,9 @@ public void postInspect(AtmosphereResource r) {
                     }
                 }
             }
-            r.getBroadcaster().broadcast(stringBuilder.toString());
+            for (int i=0; i < 10; i++) {
+                r.getBroadcaster().broadcast(stringBuilder.toString());
+            }
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1318,7 +1318,7 @@ public AtmosphereFramework configureRequestResponse(AtmosphereRequest req, Atmos
                  key = e.nextElement();
                  name = key.toLowerCase().trim();
                  if (!name.startsWith("x-atmosphere") && !name.equalsIgnoreCase("x-cache-date") ) {
-                     queryStrings.append(name).append("=").append(req.getParameter(key));
+                     queryStrings.append(key).append("=").append(req.getParameter(key));
                  }
              }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -375,7 +375,7 @@ protected boolean addFilter(BroadcastFilter e, boolean init) {
             ((BroadcastFilterLifecycle) e).init(config);
         }
 
-        if (init) {
+        if (init && ClusterBroadcastFilter.class.isAssignableFrom(e.getClass())) {
             Broadcaster b = BroadcasterFactory.getDefault().lookup(name, false);
             if (b != null) {
                 synchronized (e) {

File: samples/jquery-websockethandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-@WebSocketHandlerService
+@WebSocketHandlerService (path ="/pubsub")
 public class WebSocketPubSub extends WebSocketHandlerAdapter {
 
     private static final Logger logger = LoggerFactory.getLogger(WebSocketPubSub.class);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -827,7 +827,7 @@ public void close() throws IOException {
      * Close the associated {@link PrintWriter} or {@link java.io.OutputStream}
      */
     public void closeStreamOrWriter() {
-        if (resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {
+        if (resource() != null && resource().transport() != AtmosphereResource.TRANSPORT.WEBSOCKET) {
             try {
                 boolean isUsingStream = (Boolean) request().getAttribute(PROPERTY_USE_STREAM);
                 if (isUsingStream) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -223,7 +223,7 @@ public final Broadcaster lookup(Object id, boolean createIfNull) {
      * {@inheritDoc}
      */
     @Override
-    public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
+    public synchronized Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean createIfNull) {
         Broadcaster b = store.get(id);
         if (b != null && !c.isAssignableFrom(b.getClass())) {
             String msg = "Invalid lookup class " + c.getName() + ". Cached class is: " + b.getClass().getName();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -680,7 +680,7 @@ protected void configureBroadcaster() {
             while (i.hasNext()) {
                 e = i.next();
                 w = e.getValue();
-                BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config);
+                BroadcasterConfig broadcasterConfig = new BroadcasterConfig(broadcasterFilters, config, w.mapping);
 
                 if (w.broadcaster == null) {
                     w.broadcaster = broadcasterFactory.get(w.mapping);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -162,7 +162,7 @@ private Broadcaster createBroadcaster(Class<? extends Broadcaster> c, Object id)
             InjectorProvider.getInjector().inject(b);
 
             if (b.getBroadcasterConfig() == null) {
-                b.setBroadcasterConfig(new BroadcasterConfig(config.framework().broadcasterFilters, config));
+                b.setBroadcasterConfig(new BroadcasterConfig(config.framework().broadcasterFilters, config, id.toString()));
             }
 
             b.setBroadcasterLifeCyclePolicy(policy);

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -84,7 +84,7 @@ public SimpleBroadcaster(String id, AtmosphereConfig config) {
     protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config){
         BroadcasterConfig bc = (BroadcasterConfig) config.properties().get(BroadcasterConfig.class.getName());
         if (bc == null) {
-            bc = new BroadcasterConfig(config.framework().broadcasterFilters(), config, false);
+            bc = new BroadcasterConfig(config.framework().broadcasterFilters(), config, false, getID());
             config.properties().put(BroadcasterConfig.class.getName(), bc);
         }
         return bc;

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -93,12 +93,14 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String d) {
             return null;
         }
         String pathInfo = resource.getRequest().getPathInfo();
+        String requestURI = resource.getRequest().getRequestURI();
 
         if (d.startsWith(delimiter)) {
             int delimiterLength = delimiter.length();
             int bodyBeginIndex = d.indexOf(delimiter, delimiterLength);
             if (bodyBeginIndex != -1) {
                 pathInfo = d.substring(delimiterLength, bodyBeginIndex);
+                requestURI += pathInfo;
                 d = d.substring(bodyBeginIndex + delimiterLength);
             }
         }
@@ -118,6 +120,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String d) {
                 .body(d)
                 .attributes(m)
                 .pathInfo(pathInfo)
+                .requestURI(requestURI)
                 .destroyable(destroyable)
                 .headers(resource.getRequest().headersMap())
                 .session(resource.session())

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -93,12 +93,14 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String d) {
             return null;
         }
         String pathInfo = resource.getRequest().getPathInfo();
+        String requestURI = resource.getRequest().getRequestURI();
 
         if (d.startsWith(delimiter)) {
             int delimiterLength = delimiter.length();
             int bodyBeginIndex = d.indexOf(delimiter, delimiterLength);
             if (bodyBeginIndex != -1) {
                 pathInfo = d.substring(delimiterLength, bodyBeginIndex);
+                requestURI += pathInfo;
                 d = d.substring(bodyBeginIndex + delimiterLength);
             }
         }
@@ -118,6 +120,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String d) {
                 .body(d)
                 .attributes(m)
                 .pathInfo(pathInfo)
+                .requestURI(requestURI)
                 .destroyable(destroyable)
                 .headers(resource.getRequest().headersMap())
                 .session(resource.session())

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -188,11 +188,11 @@ public synchronized void destroy() {
 
             releaseExternalResources();
             if (notifierFuture != null) {
-                notifierFuture.cancel(true);
+                notifierFuture.cancel(false);
             }
 
             if (asyncWriteFuture != null) {
-                asyncWriteFuture.cancel(true);
+                asyncWriteFuture.cancel(false);
             }
 
             if (bc != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -52,6 +52,7 @@
 package org.atmosphere.cpr;
 
 import java.util.Collection;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
@@ -63,7 +64,7 @@ public abstract class BroadcasterFactory {
 
     protected static BroadcasterFactory factory;
     protected static AtmosphereConfig config;
-    protected final CopyOnWriteArrayList<BroadcasterListener> broadcasterListeners = new CopyOnWriteArrayList<BroadcasterListener>();
+    protected final ConcurrentLinkedQueue<BroadcasterListener> broadcasterListeners = new ConcurrentLinkedQueue<BroadcasterListener>();
 
     /**
      * Return an instance of the default {@link Broadcaster} The name of the Broadcaster will be randmly generated.

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -203,6 +203,7 @@ public synchronized void destroy() {
             messages.clear();
             asyncWriteQueue.clear();
             delayedBroadcast.clear();
+            broadcasterListeners.clear();
         } catch (Throwable t) {
             logger.error("Unexpected exception during Broadcaster destroy {}", getID(), t);
         }
@@ -1151,8 +1152,8 @@ private boolean isAtmosphereResourceValid(AtmosphereResource r) {
 
     protected void entryDone(BroadcasterFuture<?> f) {
         if (f != null) {
-            f.done();
             notifyBroadcastListener();
+            f.done();
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -134,7 +134,7 @@ public Future<Object> broadcast(Object msg) {
             outgoingBroadcast(msg);
             push(new Entry(newMsg, null, f, false));
         } finally {
-            f.done();
+            futureDone(f);
         }
         return f;
     }
@@ -158,7 +158,7 @@ public Future<Object> broadcast(Object msg, AtmosphereResource r) {
             outgoingBroadcast(msg);
             push(new Entry(newMsg, r, f, false));
         } finally {
-            f.done();
+            futureDone(f);
         }
         return f;
     }
@@ -183,7 +183,7 @@ public Future<Object> broadcast(Object msg, Set<AtmosphereResource> subset) {
             outgoingBroadcast(msg);
             push(new Entry(newMsg, subset, f, false));
         } finally {
-            f.done();
+            futureDone(f);
         }
         return f;
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -19,7 +19,6 @@
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
-import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.FrameworkConfig;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java
Patch:
@@ -180,14 +180,14 @@ public Broadcastable publishAndResume(@FormParam("message") String message) {
 
     @POST
     @Path("filter")
-    @Broadcast(resumeOnBroadcast = true, value = {XSSHtmlFilter.class})
+    @Broadcast(resumeOnBroadcast = true, filters = {XSSHtmlFilter.class})
     public Broadcastable filter(@FormParam("message") String message) {
         return broadcast(message);
     }
 
     @POST
     @Path("aggregate")
-    @Broadcast(resumeOnBroadcast = true, value = {StringFilterAggregator.class})
+    @Broadcast(resumeOnBroadcast = true, filters = {StringFilterAggregator.class})
     public Broadcastable aggregate(@FormParam("message") String message) {
         return broadcast(message);
     }

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java
Patch:
@@ -166,14 +166,14 @@ public Broadcastable publishAndResume(@FormParam("message") String message) {
 
     @POST
     @Path("filter")
-    @Broadcast(resumeOnBroadcast = true, value = {XSSHtmlFilter.class})
+    @Broadcast(resumeOnBroadcast = true, filters = {XSSHtmlFilter.class})
     public Broadcastable filter(@FormParam("message") String message) {
         return broadcast(message);
     }
 
     @POST
     @Path("aggregate")
-    @Broadcast(resumeOnBroadcast = true, value = {StringFilterAggregator.class})
+    @Broadcast(resumeOnBroadcast = true, filters = {StringFilterAggregator.class})
     public Broadcastable aggregate(@FormParam("message") String message) {
         return broadcast(message);
     }

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSub.java
Patch:
@@ -186,7 +186,7 @@ public Broadcastable publish(@FormParam("message") String message) {
      * @return A {@link Broadcastable} used to broadcast events.
      */
     @POST
-    @Broadcast(value = {StringFilterAggregator.class})
+    @Broadcast(filters = {StringFilterAggregator.class})
     @Path("aggregate")
     public Broadcastable aggregate(@FormParam("message") String message) {
         return broadcast(message);

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -73,7 +73,6 @@
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceEventListener;
 import org.atmosphere.cpr.AtmosphereResourceEventListenerAdapter;
-import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterConfig;
@@ -114,7 +113,6 @@
 import static org.atmosphere.cpr.ApplicationConfig.JERSEY_CONTAINER_RESPONSE_WRITER_CLASS;
 import static org.atmosphere.cpr.ApplicationConfig.NO_CACHE_HEADERS;
 import static org.atmosphere.cpr.ApplicationConfig.RESUME_ON_BROADCAST;
-import static org.atmosphere.cpr.ApplicationConfig.STREAMING_PADDING_MODE;
 import static org.atmosphere.cpr.ApplicationConfig.SUPPORT_LOCATION_HEADER;
 import static org.atmosphere.cpr.ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID;
 import static org.atmosphere.cpr.FrameworkConfig.ATMOSPHERE_CONFIG;
@@ -904,7 +902,7 @@ public List<ResourceFilter> create(AbstractMethod am) {
 
         if (am.isAnnotationPresent(Broadcast.class)) {
             int delay = am.getAnnotation(Broadcast.class).delay();
-            Class[] broadcastFilter = am.getAnnotation(Broadcast.class).value();
+            Class[] broadcastFilter = am.getAnnotation(Broadcast.class).filters();
 
             if (am.getAnnotation(Broadcast.class).resumeOnBroadcast()) {
                 f = new Filter(Action.RESUME_ON_BROADCAST, delay, 0, Suspend.SCOPE.APPLICATION, broadcastFilter, null,

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -155,7 +155,7 @@ public void onConnect(WebSocket socket) {
                 AtmosphereRequest r = AtmosphereRequest.wrap(g2WebSocket.getRequest());
                 org.atmosphere.websocket.WebSocket webSocket = new Grizzly2WebSocket(g2WebSocket, config);
                 g2WebSocket.getRequest().setAttribute("grizzly.webSocket", webSocket);
-                webSocketProcessor.open(webSocket, r);
+                webSocketProcessor.open(webSocket, r, AtmosphereResponse.newInstance(config, r, webSocket));
             } catch (Exception e) {
                 LOGGER.warn("failed to connect to web socket", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9WebSocketHandler.java
Patch:
@@ -3,6 +3,7 @@
 import org.atmosphere.container.version.Jetty9WebSocket;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
@@ -57,7 +58,7 @@ public void onWebSocketConnect(WebSocketConnection webSocketConnection) {
         logger.trace("WebSocket.onOpen.");
         webSocket = new Jetty9WebSocket(webSocketConnection, framework.getAtmosphereConfig());
         try {
-            webSocketProcessor.open(webSocket, request);
+            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
         } catch (Exception e) {
             logger.warn("Failed to connect to WebSocket", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -18,6 +18,7 @@
 import org.atmosphere.container.version.Jetty8WebSocket;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListener;
@@ -102,7 +103,7 @@ public void onMessage(String data) {
     public void onOpen(org.eclipse.jetty.websocket.WebSocket.Connection connection) {
         logger.trace("WebSocket.onOpen.");
         try {
-            webSocketProcessor.open(webSocket, request);
+            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
         } catch (Exception e) {
             logger.warn("Failed to connect to WebSocket", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketHandler.java
Patch:
@@ -20,6 +20,7 @@
 import org.atmosphere.container.version.TomcatWebSocket;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
+import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListener;
@@ -33,6 +34,7 @@
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 
+import static org.atmosphere.cpr.ApplicationConfig.RECYCLE_ATMOSPHERE_REQUEST_RESPONSE;
 import static org.atmosphere.websocket.WebSocketEventListener.WebSocketEvent.TYPE.CLOSE;
 import static org.atmosphere.websocket.WebSocketEventListener.WebSocketEvent.TYPE.CONNECT;
 import static org.atmosphere.websocket.WebSocketEventListener.WebSocketEvent.TYPE.MESSAGE;
@@ -57,7 +59,7 @@ protected void onOpen(WsOutbound outbound) {
         logger.trace("WebSocket.onOpen.");
         webSocket = new TomcatWebSocket(outbound, framework.getAtmosphereConfig());
         try {
-            webSocketProcessor.open(webSocket, request);
+            webSocketProcessor.open(webSocket, request, AtmosphereResponse.newInstance(framework.getAtmosphereConfig(), request, webSocket));
         } catch (Exception e) {
             logger.warn("failed to connect to web socket", e);
         }

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.atmosphere.util;
 
+import org.atmosphere.cpr.AtmosphereResponse;
+
 import javax.servlet.http.HttpServletRequest;
 import java.util.Enumeration;
 
@@ -45,6 +47,4 @@ public static boolean webSocketEnabled(HttpServletRequest request) {
         }
         return webSocketEnabled;
     }
-
-
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -45,7 +45,7 @@ public interface WebSocketProcessor {
      * @param request
      * @throws IOException
      */
-    void open(WebSocket webSocket, final AtmosphereRequest request) throws IOException;
+    void open(WebSocket webSocket, AtmosphereRequest request, AtmosphereResponse response) throws IOException;
 
     /**
      * Invoked when a WebSocket message gets received from the underlying container

File: modules/cpr/src/test/java/org/atmosphere/cpr/AsyncIOInterceptorTest.java
Patch:
@@ -29,7 +29,7 @@ public class AsyncIOInterceptorTest {
     @Test
     public void singleTest() throws ServletException, IOException {
         final AtomicReference<String> s = new AtomicReference<String>();
-        AtmosphereResponse res = AtmosphereResponse.create().request(AtmosphereRequest.create());
+        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequest.create());
         res.request().setAttribute(PROPERTY_USE_STREAM, false);
         res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor() {
 
@@ -62,7 +62,7 @@ public void redirect(AtmosphereResponse response, String location) {
     @Test
     public void chaining() throws ServletException, IOException {
         final AtomicReference<StringBuffer> s = new AtomicReference<StringBuffer>(new StringBuffer());
-        AtmosphereResponse res = AtmosphereResponse.create().request(AtmosphereRequest.create());
+        AtmosphereResponse res = AtmosphereResponse.newInstance().request(AtmosphereRequest.create());
         res.request().setAttribute(PROPERTY_USE_STREAM, false);
         res.asyncIOWriter(new AtmosphereInterceptorWriter().interceptor(new AsyncIOInterceptor() {
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereHandlerTest.java
Patch:
@@ -15,8 +15,6 @@
  */
 package org.atmosphere.cpr;
 
-import org.atmosphere.container.BlockingIOCometSupport;
-import org.atmosphere.handler.AbstractReflectorAtmosphereHandler;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
@@ -100,7 +98,7 @@ public void destroy() {
         });
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.create());
+        framework.doCometSupport(request, AtmosphereResponse.newInstance());
         r.get().resume();
 
         assertTrue(e.get().isResuming());

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceListenerTest.java
Patch:
@@ -136,7 +136,7 @@ public void postInspect(AtmosphereResource r) {
                 r.resume();
             }
         });
-        framework.doCometSupport(request, AtmosphereResponse.create());
+        framework.doCometSupport(request, AtmosphereResponse.newInstance());
 
         assertTrue(preSuspended.get());
         assertTrue(suspended.get());

File: modules/cpr/src/test/java/org/atmosphere/cpr/AtmosphereResourceTest.java
Patch:
@@ -25,8 +25,6 @@
 import javax.servlet.ServletException;
 import java.io.IOException;
 import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
 
 import static org.mockito.Mockito.mock;
@@ -96,7 +94,7 @@ public Action inspect(AtmosphereResource r) {
             public void postInspect(AtmosphereResource r) {
             }
         });
-        framework.doCometSupport(request, AtmosphereResponse.create());
+        framework.doCometSupport(request, AtmosphereResponse.newInstance());
 
         assertEquals(e.get(), e2.get());
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/CookieTest.java
Patch:
@@ -92,7 +92,7 @@ public void destroy() {
         c.add(new Cookie("yo", "man"));
 
         AtmosphereRequest request = new AtmosphereRequest.Builder().cookies(c).pathInfo("/a").build();
-        framework.doCometSupport(request, AtmosphereResponse.create());
+        framework.doCometSupport(request, AtmosphereResponse.newInstance());
 
         r.get().getBroadcaster().broadcast("yo").get();
         assertNotNull(cValue.get());

File: modules/cpr/src/test/java/org/atmosphere/cpr/ExcludeSessionBroadcasterTest.java
Patch:
@@ -46,7 +46,7 @@ public void setUp() throws Exception {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                AtmosphereResponse.create(),
+                AtmosphereResponse.newInstance(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -155,9 +155,10 @@ protected void suspend(Action action, AtmosphereRequest req, AtmosphereResponse
         } catch (InterruptedException ex) {
             logger.trace("", ex);
         } finally {
-            AtmosphereResourceImpl.class.cast(req.resource()).cancel();
             if (!ok) {
                 timedout(req, res);
+            } else {
+                AtmosphereResourceImpl.class.cast(req.resource()).cancel();
             }
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
Patch:
@@ -98,7 +98,7 @@ public AtmosphereResourceEventImpl(AtmosphereResourceImpl resource, boolean isCa
      * {@inheritDoc}
      */
     public boolean isResuming() {
-        return resource.action().type() == Action.TYPE.RESUME;
+        return resource == null ? false : resource.action().type() == Action.TYPE.RESUME;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
Patch:
@@ -98,7 +98,7 @@ public AtmosphereResourceEventImpl(AtmosphereResourceImpl resource, boolean isCa
      * {@inheritDoc}
      */
     public boolean isResuming() {
-        return resource.action().type() == Action.TYPE.RESUME;
+        return resource == null ? false : resource.action().type() == Action.TYPE.RESUME;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -88,11 +88,12 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
                     } else {
                         event.setTimeout(Integer.MAX_VALUE);
                     }
-                    req.setAttribute(SUSPENDED, true);
                 } catch (UnsupportedOperationException ex) {
-                    // Swallow s Tomcat APR isn't supporting time out
                     // TODO: Must implement the same functionality using a Scheduler
+                    logger.trace("Warning: CometEvent.setTimeout not supported on this Tomcat instance. " +
+                            " [The Tomcat native connector does not support timeouts on asynchronous I/O.]");
                 }
+                req.setAttribute(SUSPENDED, true);
             } else if (action.type() == Action.TYPE.RESUME) {
                 bz51881(event);
             } else {

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -120,9 +120,11 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
                     }
                     req.setAttribute(SUSPENDED, true);
                 } catch (UnsupportedOperationException ex) {
-                    // Swallow s Tomcat APR isn't supporting time out
                     // TODO: Must implement the same functionality using a Scheduler
+                    logger.trace("Warning: CometEvent.setTimeout not supported on this Tomcat instance. " +
+                            " [The Tomcat native connector does not support timeouts on asynchronous I/O.]");
                 }
+                req.setAttribute(SUSPENDED, true);
             } else if (action.type() == Action.TYPE.RESUME) {
                 event.close();
             } else {

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -75,7 +75,7 @@ public void run() {
                     readWriteLock.writeLock().unlock();
                 }
             }
-        }, 0, invalidateCacheInterval, TimeUnit.MINUTES);
+        }, 0, invalidateCacheInterval, TimeUnit.MILLISECONDS);
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -145,7 +145,9 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         } else if (event.getEventType() == EventType.ERROR) {
             event.close();
         } else if (event.getEventType() == EventType.END) {
-            if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
+            if (req.resource().isResumed()) {
+                AtmosphereResourceImpl.class.cast(req.resource()).cancel();
+            } else if (req.getAttribute(SUSPENDED) != null && closeConnectionOnInputStream) {
                 req.setAttribute(SUSPENDED, null);
                 action = cancelled(req, res);
             } else {

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -93,7 +93,7 @@ public void onStateChange(AtmosphereResourceEvent event)
 
         Object message = event.getMessage();
         AtmosphereResponse r = event.getResource().getResponse();
-        if (message == null || event.isCancelled() || event.getResource().getRequest().destroyed()) return;
+        if (message == null || event.isCancelled() || event.isResuming() || event.getResource().getRequest().destroyed()) return;
 
         if (event.getResource().getSerializer() != null) {
             try {
@@ -142,6 +142,8 @@ public void onStateChange(AtmosphereResourceEvent event)
      * @param event
      */
     protected final void postStateChange(AtmosphereResourceEvent event) {
+        if (event.isResuming()) return;
+
         Boolean resumeOnBroadcast = event.getResource().resumeOnBroadcast();
         if (!resumeOnBroadcast) {
             // For legacy reason, check the attribute as well

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/BasePubSubTest.java
Patch:
@@ -508,4 +508,5 @@ public Response onCompleted(Response r) throws Exception {
         c.close();
     }
 
+
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -30,6 +30,7 @@
 import org.atmosphere.handler.AbstractReflectorAtmosphereHandler;
 import org.atmosphere.handler.ReflectorServletProcessor;
 import org.atmosphere.interceptor.AndroidAtmosphereInterceptor;
+import org.atmosphere.interceptor.DefaultHeadersInterceptor;
 import org.atmosphere.interceptor.JSONPAtmosphereInterceptor;
 import org.atmosphere.interceptor.SSEAtmosphereInterceptor;
 import org.atmosphere.interceptor.StreamingAtmosphereInterceptor;
@@ -604,7 +605,8 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
             interceptors.addFirst(newAInterceptor(AndroidAtmosphereInterceptor.class));
             // WebKit & IE Padding
             interceptors.addFirst(newAInterceptor(StreamingAtmosphereInterceptor.class));
-
+            // Default Interceptor
+            interceptors.addFirst(newAInterceptor(DefaultHeadersInterceptor.class));
         }
         logger.info("Set org.atmosphere.cpr.AtmosphereInterceptor.disableDefaults in your xml to disable them.");
     }

File: modules/cpr/src/main/java/org/atmosphere/util/DefaultEndpointMapper.java
Patch:
@@ -44,10 +44,10 @@ protected U map(String path, Map<String, U> handlers) {
             final Map<String, String> m = new HashMap<String, String>();
             for (Map.Entry<String, U> e : handlers.entrySet()) {
                 UriTemplate t = new UriTemplate(e.getKey());
-                logger.debug("Trying to map {} to {}", t, path);
+                logger.trace("Trying to map {} to {}", t, path);
                 if (t.match(path, m)) {
                     handler = e.getValue();
-                    logger.debug("Mapped {} to {}", t, e.getValue());
+                    logger.trace("Mapped {} to {}", t, e.getValue());
                     break;
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketHandler.java
Patch:
@@ -44,7 +44,7 @@ public GlassFishWebSocketHandler(AtmosphereConfig config) {
         contextPath = config.getServletContext().getContextPath();
 
         webSocketProcessor = WebSocketProcessorFactory.getDefault()
-                .newWebSocketProcessor(config.framework());
+                .getWebSocketProcessor(config.framework());
     }
 
     public void onConnect(WebSocket w) {

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -108,7 +108,7 @@ public Grizzly2WebSocketApplication(AtmosphereConfig config) {
             this.config = config;
             contextPath = config.getServletContext().getContextPath();
             this.webSocketProcessor = WebSocketProcessorFactory.getDefault()
-                    .newWebSocketProcessor(config.framework());
+                    .getWebSocketProcessor(config.framework());
         }
 
 

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9AsyncSupportWithWebSocket.java
Patch:
@@ -25,7 +25,6 @@
 import org.atmosphere.util.Utils;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
-import org.eclipse.jetty.websocket.core.api.Extension;
 import org.eclipse.jetty.websocket.core.api.UpgradeRequest;
 import org.eclipse.jetty.websocket.core.api.UpgradeResponse;
 import org.eclipse.jetty.websocket.core.api.WebSocketBehavior;
@@ -38,7 +37,6 @@
 
 import javax.servlet.ServletException;
 import java.io.IOException;
-import java.util.List;
 
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
 
@@ -74,7 +72,7 @@ public Jetty9AsyncSupportWithWebSocket(final AtmosphereConfig config) {
         if (max != null) {
             policy.setMaxBinaryMessageSize(Integer.parseInt(max));
         }
-        final WebSocketProcessor webSocketProcessor = WebSocketProcessorFactory.getDefault().newWebSocketProcessor(config.framework());
+        final WebSocketProcessor webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
 
         webSocketFactory = new WebSocketServerFactory(policy);
         webSocketFactory.setCreator(new WebSocketCreator() {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyAsyncSupportWithWebSocket.java
Patch:
@@ -40,7 +40,7 @@ public class JettyAsyncSupportWithWebSocket extends Jetty7CometSupport {
 
     public JettyAsyncSupportWithWebSocket(final AtmosphereConfig config) {
         super(config);
-        final WebSocketProcessor webSocketProcessor = WebSocketProcessorFactory.getDefault().newWebSocketProcessor(config.framework());
+        final WebSocketProcessor webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
 
         WebSocketFactory wsf;
         try {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyServlet30AsyncSupportWithWebSocket.java
Patch:
@@ -41,7 +41,7 @@ public class JettyServlet30AsyncSupportWithWebSocket extends Servlet30CometSuppo
 
     public JettyServlet30AsyncSupportWithWebSocket(final AtmosphereConfig config) {
         super(config);
-        final WebSocketProcessor webSocketProcessor = WebSocketProcessorFactory.getDefault().newWebSocketProcessor(config.framework());
+        final WebSocketProcessor webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
 
         boolean isJetty = config.getServletContext().getServerInfo().toLowerCase().startsWith("jetty");
         if (isJetty) {

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java
Patch:
@@ -37,8 +37,6 @@
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.WebSocketProcessorFactory;
 import org.atmosphere.websocket.WebSocketProcessor;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import javax.servlet.ServletException;
 import java.io.IOException;
@@ -51,7 +49,7 @@ public class Tomcat7AsyncSupportWithWebSocket extends Tomcat7CometSupport implem
 
     public Tomcat7AsyncSupportWithWebSocket(AtmosphereConfig config) {
         super(config);
-        webSocketProcessor = WebSocketProcessorFactory.getDefault().newWebSocketProcessor(config.framework());
+        webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7BIOSupportWithWebSocket.java
Patch:
@@ -53,7 +53,7 @@ public class Tomcat7BIOSupportWithWebSocket extends BlockingIOCometSupport imple
 
     public Tomcat7BIOSupportWithWebSocket(AtmosphereConfig config) {
         super(config);
-        webSocketProcessor = WebSocketProcessorFactory.getDefault().newWebSocketProcessor(config.framework());
+        webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7Servlet30SupportWithWebSocket.java
Patch:
@@ -53,7 +53,7 @@ public class Tomcat7Servlet30SupportWithWebSocket extends Servlet30CometSupport
 
     public Tomcat7Servlet30SupportWithWebSocket(AtmosphereConfig config) {
         super(config);
-        webSocketProcessor = WebSocketProcessorFactory.getDefault().newWebSocketProcessor(config.framework());
+        webSocketProcessor = WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config.framework());
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -931,6 +931,7 @@ public AtmosphereFramework destroy() {
             factory.destroy();
             BroadcasterFactory.factory = null;
         }
+        WebSocketProcessorFactory.getDefault().destroy();
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -321,6 +321,9 @@ public synchronized AtmosphereResource resume() {
                 if (req.getAttribute(PRE_SUSPEND) == null) {
                     asyncSupport.action(this);
                 }
+
+                // https://github.com/Atmosphere/atmosphere/issues/651
+                response.closeStreamOrWriter();
             } else {
                 logger.debug("Cannot resume an already resumed/cancelled request {}", this);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -625,7 +625,7 @@ protected void configureBroadcaster() {
 
         try {
             // Check auto supported one
-            if (broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())) {
+            if (!broadcasterClassName.equalsIgnoreCase(DefaultBroadcaster.class.getName())) {
                 broadcasterClassName = lookupDefaultBroadcasterType(broadcasterClassName);
             }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1267,8 +1267,8 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
                     body = null;
                 }
 
-                // We need to string Atmosphere's header from the request in case an
-                // interceptor re-inject the request.
+                // We need to strip Atmosphere's own query string from the request in case an
+                // interceptor re-inject the request because the wrong body will be passed.
                 StringBuilder queryStrings = new StringBuilder("");
                 Enumeration<String> e = req.getParameterNames();
                 String name;

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/GwtAtmosphereResource.java
Patch:
@@ -57,4 +57,6 @@ public interface GwtAtmosphereResource {
     public int getConnectionID();
 
     public boolean isSystemMessage(Serializable message);
+    
+    public void sendError(int statusCode, String message);
 }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -98,7 +98,7 @@ public Action inspect(final AtmosphereResource r) {
 
             r.addEventListener(new AtmosphereResourceEventListenerAdapter() {
                 @Override
-                public void onSuspend(AtmosphereResourceEvent event) {
+                public void onPreSuspend(AtmosphereResourceEvent event) {
                     writePadding(response);
                 }
             });

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.atmosphere.websocket.WebSocketEventListener;
 import org.atmosphere.websocket.WebSocketEventListenerAdapter;
 import org.atmosphere.websocket.WebSocketProcessor;
-import org.atmosphere.websocket.protocol.SimpleHttpProtocol;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFuture.java
Patch:
@@ -105,7 +105,7 @@ public BroadcasterFuture(Future<?> innerFuture, E msg, int latchCount,
         } else {
             latch = null;
         }
-        this.listeners = listeners;
+        this.listeners = (listeners == null ? new CopyOnWriteArrayList<BroadcasterListener>() : listeners);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cache/SessionBroadcasterCache.java
Patch:
@@ -101,7 +101,7 @@ public List<Object> retrieveFromCache(String broadcasterId, AtmosphereResource r
             return result;
         }
 
-        Long cacheHeaderTime = (Long) session.getAttribute(broadcasterId);
+        Long cacheHeaderTime = Long.valueOf((String) session.getAttribute(broadcasterId));
         if (cacheHeaderTime == null) return result;
 
         return get(cacheHeaderTime);

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeFilter.java
Patch:
@@ -34,6 +34,7 @@
  *
  * For example, broadcasting String 'helloword' will be received by the client as '9 | helloword' but delivered as 'helloword'
  * to the Javascript function/callback.
+ *
  */
 public class TrackMessageSizeFilter implements PerRequestBroadcastFilter {
 

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -97,7 +97,7 @@ protected void reconfigure() {
      * {@inheritDoc}
      */
     @Override
-    protected void broadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
+    protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (r.getRequest() instanceof HttpServletRequest) {
             if (r.getRequest().getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null) {
                 try {
@@ -107,10 +107,10 @@ protected void broadcast(final AtmosphereResource r, final AtmosphereResourceEve
                     }
                     jerseyBroadcast.invoke(null, new Object[]{r, e});
                 } catch (Throwable t) {
-                    super.broadcast(r, e);
+                    super.invokeOnStateChange(r, e);
                 }
             } else {
-                super.broadcast(r, e);
+                super.invokeOnStateChange(r, e);
             }
         }
     }

File: modules/jersey/src/main/java/org/atmosphere/jersey/JerseyBroadcaster.java
Patch:
@@ -73,7 +73,7 @@ public JerseyBroadcaster(String id, AtmosphereConfig config) {
     }
 
     @Override
-    protected void broadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
+    protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         JerseyBroadcasterUtil.broadcast(r, e, this);
     }
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseySimpleBroadcaster.java
Patch:
@@ -70,7 +70,7 @@ public JerseySimpleBroadcaster(String id, AtmosphereConfig config) {
     }
 
     @Override
-    protected void broadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
+    protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         JerseyBroadcasterUtil.broadcast(r, e, this);
     }
 }
\ No newline at end of file

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/PubSubBroadcaster.java
Patch:
@@ -79,13 +79,13 @@ public PubSubBroadcaster(String id, AtmosphereConfig config) {
     }
 
     @Override
-    protected void broadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
+    protected void invokeOnStateChange(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (!isSet.getAndSet(true)) {
             logger.info("This is just an example that demonstrate " +
                     "how a Broadcaster can be customized using atmosphere.xml or by " +
                     "defining it inside web.xml");
         }
 
-        super.broadcast(r, e);
+        super.invokeOnStateChange(r, e);
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -238,7 +238,7 @@ public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean cre
             }
 
             Broadcaster existingOne = store.putIfAbsent(id, createBroadcaster(c, id));
-            if (existingOne == null) {
+            if (existingOne != null) {
                 logger.debug("Added Broadcaster {} . Factory size: {}", id, store.size());
             } else {
                 logger.warn("Duplicate Broadcaster's name {}. You must invoke Broadcaster.destroy() on that instance to prevent memory leak.", existingOne);

File: integration-tests/jersey/src/test/java/org/atmosphere/jersey/tests/RecyclableBroadcaster.java
Patch:
@@ -32,7 +32,7 @@ public RecyclableBroadcaster(String name, AtmosphereConfig config) {
      * {@inheritDoc}
      */
     public void destroy() {
-        broadcasterCache = new BroadcasterConfig.DefaultBroadcasterCache();
+        bc.setBroadcasterCache(new BroadcasterConfig.DefaultBroadcasterCache());
         setScope(SCOPE.APPLICATION);
     }
 }

File: extras/socketio/src/main/java/org/atmosphere/socketio/cpr/SocketIOAtmosphereInterceptor.java
Patch:
@@ -41,8 +41,6 @@
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -93,8 +93,7 @@ protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config){
     protected void start() {
         if (!started.getAndSet(true)) {
             setID(name);
-            broadcasterCache = bc.getBroadcasterCache();
-            broadcasterCache.start();
+            bc.getBroadcasterCache().start();
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -121,7 +121,7 @@
 public class AtmosphereFramework implements ServletContextProvider {
     public static final String DEFAULT_ATMOSPHERE_CONFIG_PATH = "/META-INF/atmosphere.xml";
     public static final String DEFAULT_LIB_PATH = "/WEB-INF/lib/";
-    public static final String MAPPING_REGEX = "[a-zA-Z0-9-&.*=;\\?]+";
+    public static final String MAPPING_REGEX = "[a-zA-Z0-9-&.*=@;\\?]+";
 
     protected static final Logger logger = LoggerFactory.getLogger(AtmosphereFramework.class);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -906,8 +906,6 @@ protected void initWebSocket() {
             }
         }
         webSocketProtocol.configure(config);
-
-        new WebSocketProcessorFactory(config);
     }
 
     public AtmosphereFramework destroy() {

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -75,10 +75,10 @@ public class DefaultWebSocketProcessor implements WebSocketProcessor, Serializab
     private final ExecutorService voidExecutor;
     private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(Runtime.getRuntime().availableProcessors());
 
-    public DefaultWebSocketProcessor(AtmosphereFramework framework, WebSocket webSocket, WebSocketProtocol webSocketProtocol) {
+    public DefaultWebSocketProcessor(WebSocket webSocket) {
         this.webSocket = webSocket;
-        this.framework = framework;
-        this.webSocketProtocol = webSocketProtocol;
+        this.framework = webSocket.config().framework();
+        this.webSocketProtocol = framework.getWebSocketProtocol();
 
         String s = framework.getAtmosphereConfig().getInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE);
         if (s != null && Boolean.valueOf(s)) {

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -226,11 +226,12 @@ public void destroy() {
         assertEquals(uuid.get(), request.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID));
     }
 
-    public final static class ArrayBaseWebSocket extends WebSocket {
+    public final class ArrayBaseWebSocket extends WebSocket {
 
         private final OutputStream outputStream;
 
         public ArrayBaseWebSocket(OutputStream outputStream) {
+            super(framework.getAtmosphereConfig());
             this.outputStream = outputStream;
         }
 

File: extras/socketio/src/main/java/org/atmosphere/socketio/transport/SocketIOSessionManagerImpl.java
Patch:
@@ -52,8 +52,8 @@ public class SocketIOSessionManagerImpl implements SocketIOSessionManager, Socke
 
     private static final int SESSION_ID_LENGTH = 20;
     private static Random random = new SecureRandom();
-    private ConcurrentMap<String, SocketIOSession> socketIOSessions = new ConcurrentHashMap<String, SocketIOSession>();
-    private ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
+    private final ConcurrentMap<String, SocketIOSession> socketIOSessions = new ConcurrentHashMap<String, SocketIOSession>();
+    private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
 
     private long heartbeatInterval = 15;
     private long timeout = 2500;

File: modules/cpr/src/main/java/org/atmosphere/cache/AbstractBroadcasterCache.java
Patch:
@@ -57,7 +57,7 @@ public void start() {
             public void run() {
                 readWriteLock.writeLock().lock();
                 try {
-                    long now = System.currentTimeMillis();
+                    long now = System.nanoTime();
                     List<CacheMessage> expiredMessages = new ArrayList<CacheMessage>();
 
                     for (CacheMessage message : messages) {

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -39,7 +39,7 @@ public class HeaderBroadcasterCache extends AbstractBroadcasterCache {
     @Override
     public void addToCache(String broadcasterId, AtmosphereResource r, Message e) {
 
-        long now = System.currentTimeMillis();
+        long now = System.nanoTime();
         put(e, now);
 
         if (r != null) {
@@ -55,7 +55,7 @@ public List<Object> retrieveFromCache(String id, AtmosphereResource r) {
 
         AtmosphereRequest request = r.getRequest();
         String cacheHeader = request.getHeader(X_CACHE_DATE);
-        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.currentTimeMillis()));
+        r.getResponse().setHeader(X_CACHE_DATE, String.valueOf(System.nanoTime()));
         if (cacheHeader == null || cacheHeader.isEmpty()) {
             return Collections.emptyList();
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -253,7 +253,7 @@ public interface ApplicationConfig {
     /**
      * The default content-type value used when Atmosphere requires one. Default is text/plain.
      */
-    String DEFAULT_CONTENT_TYPE = ApplicationConfig.class.getPackage().getName() + ".defaultContextType";
+    String DEFAULT_CONTENT_TYPE = ApplicationConfig.class.getPackage().getName() + ".defaultContentType";
     /**
      * Wrap the request/response with associated {@link javax.servlet.http.HttpServletRequest} and
      * {@link javax.servlet.http.HttpServletResponse}

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -300,6 +300,7 @@ private AtmosphereFramework addMapping(String path, AtmosphereHandlerWrapper w)
             path = path + MAPPING_REGEX;
         }
 
+        InjectorProvider.getInjector().inject(w.atmosphereHandler);
         atmosphereHandlers.put(path, w);
         return this;
     }
@@ -948,7 +949,6 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
 
                 if (!ReflectorServletProcessor.class.getName().equals(atmoHandler.getClassName())) {
                     handler = (AtmosphereHandler) c.loadClass(atmoHandler.getClassName()).newInstance();
-                    InjectorProvider.getInjector().inject(handler);
                 } else {
                     handler = new ReflectorServletProcessor();
                 }

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty9AsyncSupportWithWebSocket.java
Patch:
@@ -65,8 +65,8 @@ public Jetty9AsyncSupportWithWebSocket(final AtmosphereConfig config) {
         }
 
         webSocketFactory = new WebSocketServerFactory(policy);
-
         webSocketFactory.setCreator(new WebSocketCreator() {
+
             @Override
             public Object createWebSocket(UpgradeRequest upgradeRequest, UpgradeResponse upgradeResponse) {
                 return new Jetty9WebSocketHandler(upgradeRequest, config.framework(), config.framework().getWebSocketProtocol());
@@ -99,7 +99,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
                 res.sendError(501, "Websocket protocol not supported");
                 return Action.CANCELLED;
             } else {
-                return null;
+                return super.service(req, res);
             }
         } else {
             if (webSocketFactory != null && !b) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -855,6 +855,9 @@ protected String lookupDefaultBroadcasterType(String defaultB) {
     protected void sessionSupport(boolean sessionSupport) {
         if (!isSessionSupportSpecified) {
             config.setSupportSession(sessionSupport);
+        } else if (!config.isSupportSession()) {
+            // Don't turn off session support.  Once it's on, leave it on.
+            config.setSupportSession(sessionSupport);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AtmosphereResourceLifecycleInterceptor.java
Patch:
@@ -57,7 +57,7 @@
 public class AtmosphereResourceLifecycleInterceptor implements AtmosphereInterceptor {
 
     private String method = "GET";
-    private static final Logger logger = LoggerFactory.getLogger(SSEAtmosphereInterceptor.class);
+    private static final Logger logger = LoggerFactory.getLogger(AtmosphereResourceLifecycleInterceptor.class);
 
     @Override
     public void configure(AtmosphereConfig config) {

File: modules/cpr/src/main/java/org/atmosphere/config/AtmosphereHandlerConfig.java
Patch:
@@ -24,7 +24,7 @@
 public class AtmosphereHandlerConfig {
 
     // "" means unset
-    private String supportSession = "";
+    private String supportSession = "false";
     private String contextRoot;
     private String className;
     private String broadcaster;

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -122,6 +122,8 @@ public void reportTypeAnnotation(Class<? extends Annotation> annotation, String
                             }
                         }
                         framework.addAtmosphereHandler(a.path(), handler, l);
+
+                        framework.sessionSupport(a.supportSession());
                     } catch (Throwable e) {
                         logger.warn("", e);
                     }

File: samples/native-socketio-chat/src/main/java/org/atmosphere/samples/chat/NativeSocketIOAtmosphereHandler.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.samples.chat;
 
+import org.atmosphere.config.service.AtmosphereHandlerService;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.Broadcaster;
@@ -39,6 +40,7 @@
  *
  * @author Sebastien Dionne : sebastien.dionne@gmail.com
  */
+@AtmosphereHandlerService(path = "/*")
 public class NativeSocketIOAtmosphereHandler extends SocketIOAtmosphereHandler {
 
     private static final Logger logger = LoggerFactory.getLogger(NativeSocketIOAtmosphereHandler.class);

File: modules/cpr/src/main/java/org/atmosphere/cache/SessionBroadcasterCache.java
Patch:
@@ -78,6 +78,8 @@ public void addToCache(String broadcasterId, AtmosphereResource r, Message messa
         long now = System.currentTimeMillis();
         put(message, now);
 
+        if (r == null) return;
+
         HttpSession session = r.session();
         if (session == null) {
             logger.error(ERROR_MESSAGE);

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -101,7 +101,7 @@ public void init(final ServletConfig sc) throws ServletException {
         }
 
         // The annotation was used.
-        if (servletClass != null && filterClass != null) {
+        if (servletClass != null || filterClass != null) {
             ReflectorServletProcessor r = new ReflectorServletProcessor();
             r.setServletClassName(servletClass);
             r.setFilterClassName(filterClass);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -306,7 +306,7 @@ public synchronized AtmosphereResource resume() {
                 try {
                     req.setAttribute(ApplicationConfig.RESUMED_ON_TIMEOUT, Boolean.FALSE);
                 } catch (Exception ex) {
-                    logger.debug("Meteor resume exception: Cannot resume an already resumed/cancelled request", ex);
+                    logger.debug("Resume exception: Cannot resume an already resumed/cancelled request", ex);
                 } finally {
                     try {
                         Meteor m = (Meteor) req.getAttribute(METEOR);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -71,7 +71,7 @@ public Class<? extends Annotation>[] annotations() {
                         AtmosphereHandlerService.class,
                         BroadcasterCacheService.class,
                         BroadcasterFilterService.class,
-                        BroadcasterFactory.class,
+                        BroadcasterFactoryService.class,
                         BroadcasterService.class,
                         MeteorService.class,
                         WebSocketHandlerService.class,

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -977,7 +977,7 @@ public Future<Object> broadcast(Object msg, AtmosphereResource r) {
         Object newMsg = filter(msg);
         if (newMsg == null) return (new BroadcasterFuture<Object>(msg, broadcasterListeners, this)).done();
 
-        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, resources.size(), broadcasterListeners, this);
+        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, 1, broadcasterListeners, this);
         messages.offer(new Entry(newMsg, r, f, msg));
         return f;
     }

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -128,7 +128,7 @@ protected void broadcastReceivedMessage(Object message) {
      * {@inheritDoc}
      */
     @Override
-    public <T> Future<T> broadcast(T msg) {
+    public Future<Object> broadcast(Object msg) {
         if (destroyed.get()) {
             logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
             return null;
@@ -152,7 +152,7 @@ public <T> Future<T> broadcast(T msg) {
      * {@inheritDoc}
      */
     @Override
-    public <T> Future<T> broadcast(T msg, AtmosphereResource r) {
+    public Future<Object> broadcast(Object msg, AtmosphereResource r) {
         if (destroyed.get()) {
             logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
             return null;
@@ -176,7 +176,7 @@ public <T> Future<T> broadcast(T msg, AtmosphereResource r) {
      * {@inheritDoc}
      */
     @Override
-    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource> subset) {
+    public Future<Object> broadcast(Object msg, Set<AtmosphereResource> subset) {
         if (destroyed.get()) {
             logger.warn("This Broadcaster has been destroyed and cannot be used {}", getID());
             return null;

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -111,7 +111,7 @@ public void setBroadcasterConfig(BroadcasterConfig bc) {
      * {@inheritDoc}
      */
     @Override
-    public <T> Future<T> broadcast(T msg) {
+   public Future<Object> broadcast(Object msg) {
 
         if (destroyed.get()) {
             logger.warn("This Broadcaster has been destroyed and cannot be used");
@@ -132,7 +132,7 @@ public <T> Future<T> broadcast(T msg) {
      * {@inheritDoc}
      */
     @Override
-    public <T> Future<T> broadcast(T msg, AtmosphereResource r) {
+   public Future<Object> broadcast(Object msg, AtmosphereResource r) {
 
         if (destroyed.get()) {
             logger.warn("This Broadcaster has been destroyed and cannot be used");
@@ -153,7 +153,7 @@ public <T> Future<T> broadcast(T msg, AtmosphereResource r) {
      * {@inheritDoc}
      */
     @Override
-    public <T> Future<T> broadcast(T msg, Set<AtmosphereResource> subset) {
+   public Future<Object> broadcast(Object msg, Set<AtmosphereResource> subset) {
 
         if (destroyed.get()) {
             logger.warn("This Broadcaster has been destroyed and cannot be used");

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -99,7 +99,7 @@ protected void reconfigure() {
     @Override
     protected void broadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
         if (r.getRequest() instanceof HttpServletRequest) {
-            if (((HttpServletRequest) r.getRequest()).getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null) {
+            if (r.getRequest().getAttribute(FrameworkConfig.CONTAINER_RESPONSE) != null) {
                 try {
                     if (jerseyBroadcast == null) {
                         Class jerseyBroadcasterUtil = Class.forName("org.atmosphere.jersey.util.JerseyBroadcasterUtil");

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -185,8 +185,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         }
 
         if (config.handlers().isEmpty()) {
-            logger.error("No AtmosphereHandler found. Make sure you define it inside web/atmosphere.xml or annotate using @AtmosphereHandlerService");
-            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside web/atmosphere.xml or annotate using @AtmosphereHandlerService");
+            logger.error("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
+            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
         }
 
         if (res.request() == null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1144,7 +1144,7 @@ public void loadAtmosphereHandlersFromPath(URLClassLoader classloader, String re
             for (String className : possibleComponentsCandidate) {
                 try {
                     className = className.replace('\\', '/');
-                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
+                    className = className.replaceFirst("^.*/(WEB-INF|target)(?:/scala-[^/]+)?/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
                     Class<?> clazz = classloader.loadClass(className);
 
                     if (AtmosphereHandler.class.isAssignableFrom(clazz)) {
@@ -1199,7 +1199,7 @@ protected void loadWebSocketFromPath(URLClassLoader classloader, String realPath
             for (String className : possibleComponentsCandidate) {
                 try {
                     className = className.replace('\\', '/');
-                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
+                    className = className.replaceFirst("^.*/(WEB-INF|target)(?:/scala-[^/]+)?/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
                     Class<?> clazz = classloader.loadClass(className);
 
                     if (WebSocketProtocol.class.isAssignableFrom(clazz)) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -185,8 +185,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         }
 
         if (config.handlers().isEmpty()) {
-            logger.error("No AtmosphereHandler found. Make sure you define it inside web/atmosphere.xml or annotate using @AtmosphereHandlerService");
-            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside web/atmosphere.xml or annotate using @AtmosphereHandlerService");
+            logger.error("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
+            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside WEB-INF/atmosphere.xml or annotate using @AtmosphereHandlerService");
         }
 
         if (res.request() == null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1199,7 +1199,7 @@ protected void loadWebSocketFromPath(URLClassLoader classloader, String realPath
             for (String className : possibleComponentsCandidate) {
                 try {
                     className = className.replace('\\', '/');
-                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
+                    className = className.replaceFirst("^.*/(WEB-INF|target)(?:/scala-[^/]+)?/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
                     Class<?> clazz = classloader.loadClass(className);
 
                     if (WebSocketProtocol.class.isAssignableFrom(clazz)) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1144,7 +1144,7 @@ public void loadAtmosphereHandlersFromPath(URLClassLoader classloader, String re
             for (String className : possibleComponentsCandidate) {
                 try {
                     className = className.replace('\\', '/');
-                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
+                    className = className.replaceFirst("^.*/(WEB-INF|target)(?:/scala-[^/]+)?/(test-)?classes/(.*)\\.class", "$3").replace("/", ".");
                     Class<?> clazz = classloader.loadClass(className);
 
                     if (AtmosphereHandler.class.isAssignableFrom(clazz)) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -178,9 +178,9 @@ public WebSocket write(AtmosphereResponse r, byte[] b, int offset, int length) t
         } else {
             String data = null;
             if (transform) {
-                data = new String(transform(b, 0, length), r.getCharacterEncoding());
+                data = new String(transform(b, offset, length), r.getCharacterEncoding());
             } else {
-                data = new String(b, 0, length, r.getCharacterEncoding());
+                data = new String(b, offset, length, r.getCharacterEncoding());
             }
 
             if (data != null) {

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketHandler.java
Patch:
@@ -35,9 +35,11 @@ public class GlassFishWebSocketHandler extends WebSocketApplication {
     private static final Logger logger = LoggerFactory.getLogger(GlassFishWebSocketSupport.class);
 
     private final AtmosphereConfig config;
+    private final String contextPath;
 
     public GlassFishWebSocketHandler(AtmosphereConfig config) {
         this.config = config;
+        contextPath = config.getServletContext().getContextPath();
     }
 
     public void onConnect(WebSocket w) {
@@ -73,7 +75,7 @@ public void onConnect(WebSocket w) {
 
     @Override
     public boolean isApplicationRequest(Request request) {
-        return true;
+        return request.requestURI().startsWith(contextPath);
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -98,12 +98,14 @@ public void shutdown() {
     private static final class Grizzly2WebSocketApplication extends WebSocketApplication {
 
         private AtmosphereConfig config;
+        private final String contextPath;
 
         // -------------------------------------------------------- Constructors
 
 
         public Grizzly2WebSocketApplication(AtmosphereConfig config) {
             this.config = config;
+            contextPath = config.getServletContext().getContextPath();
         }
 
 
@@ -112,7 +114,7 @@ public Grizzly2WebSocketApplication(AtmosphereConfig config) {
 
         @Override
         public boolean isApplicationRequest(HttpRequestPacket request) {
-            return true;
+            return request.getRequestURI().startsWith(contextPath);
         }
 
         @Override

File: extras/socketio/src/main/java/org/atmosphere/socketio/cpr/SocketIOAtmosphereInterceptor.java
Patch:
@@ -182,7 +182,7 @@ public AsyncIOWriter write(AtmosphereResponse r, byte[] data) throws IOException
                             if (p == null) {
                                 r.getResponse().getOutputStream().write(data);
                             } else {
-                                write(new String(data, r.request().getCharacterEncoding()));
+                                write(r, new String(data, r.request().getCharacterEncoding()));
                             }
                             return this;
                         }
@@ -194,7 +194,7 @@ public AsyncIOWriter write(AtmosphereResponse r, byte[] data, int offset, int le
                             if (p == null) {
                                 r.getResponse().getOutputStream().write(data, offset, length);
                             } else {
-                                write(new String(data, offset, length, r.request().getCharacterEncoding()));
+                                write(r, new String(data, offset, length, r.request().getCharacterEncoding()));
                             }
                             return this;
                         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOInterceptor.java
Patch:
@@ -30,7 +30,7 @@ public interface AsyncIOInterceptor {
 
     void prePayload(AtmosphereResponse response, byte[] data, int offset, int length);
 
-    byte[] transformPayload(byte[] responseDraft, byte[] data) throws IOException;
+    byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft, byte[] data) throws IOException;
 
     void postPayload(AtmosphereResponse response, byte[] data, int offset, int length);
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorAdapter.java
Patch:
@@ -30,7 +30,7 @@ public void configure(AtmosphereConfig config) {
     public Action inspect(AtmosphereResource r) {
         AtmosphereResponse res = r.getResponse();
         if (res.getAsyncIOWriter() == null) {
-            res.asyncIOWriter(new AtmosphereInterceptorWriter(res));
+            res.asyncIOWriter(new AtmosphereInterceptorWriter());
         }
         return Action.CONTINUE;
     }

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AndroidAtmosphereInterceptor.java
Patch:
@@ -71,7 +71,7 @@ public void prePayload(AtmosphereResponse response, byte[] data, int offset, int
                     }
 
                     @Override
-                    public byte[] transformPayload(byte[] responseDraft, byte[] data) throws IOException {
+                    public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft, byte[] data) throws IOException {
                         return responseDraft;
                     }
 
@@ -80,7 +80,7 @@ public void postPayload(AtmosphereResponse response, byte[] data, int offset, in
                     }
                 });
             } else {
-                throw new IllegalStateException("AsyncIOWriter must be an instance of " + AsyncIOWriter.class.getName());
+                logger.warn("Unable to apply {}. Your AsyncIOWriter must implement {}", getClass().getName(), AtmosphereInterceptorWriter.class.getName());
             }
         }
         return Action.CONTINUE;

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -119,7 +119,7 @@ public void prePayload(AtmosphereResponse response, byte[] data, int offset, int
                     }
 
                     @Override
-                    public byte[] transformPayload(byte[] responseDraft, byte[] data) throws IOException {
+                    public byte[] transformPayload(AtmosphereResponse response, byte[] responseDraft, byte[] data) throws IOException {
                         return responseDraft;
                     }
 
@@ -129,7 +129,7 @@ public void postPayload(AtmosphereResponse response, byte[] data, int offset, in
                     }
                 });
             } else {
-                throw new IllegalStateException("AsyncIOWriter must be an instance of " + AsyncIOWriter.class.getName());
+                logger.warn("Unable to apply {}. Your AsyncIOWriter must implement {}", getClass().getName(), AtmosphereInterceptorWriter.class.getName());
             }
         }
         return Action.CONTINUE;

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketResponseFilter.java
Patch:
@@ -19,6 +19,8 @@
 
 /**
  * Implementation of this interface allow the customization of the WebSocket message before it gets send.
+ *
+ * @deprecated - Use {@link }AsyncIOWriter} and {@link AtmosphereInterceptor} instead.
  */
 public interface WebSocketResponseFilter {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1304,6 +1304,7 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
                 logger.trace(ex.getMessage(), ex);
 
                 asyncSupport = asyncSupport.supportWebSocket() ? new Tomcat7BIOSupportWithWebSocket(config) : new BlockingIOCometSupport(config);
+                asyncSupport.init(config.getServletConfig());
                 logger.warn("Using " + asyncSupport.getClass().getName());
 
                 a = asyncSupport.service(req, res);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -340,6 +340,7 @@ public void event(org.apache.catalina.comet.CometEvent cometEvent) throws IOExce
                     if (!framework.asyncSupport.getClass().equals(Tomcat7CometSupport.class)) {
                         logger.warn("TomcatCometSupport is enabled, switching to it");
                         framework.asyncSupport = new Tomcat7CometSupport(framework.config);
+                        framework.asyncSupport.init(framework.config.getServletConfig());
                     }
                 }
             }
@@ -372,6 +373,7 @@ public void event(HttpEvent httpEvent) throws IOException, ServletException {
                 if (!framework.asyncSupport.getClass().equals(JBossWebCometSupport.class)) {
                     logger.warn("JBossWebCometSupport is enabled, switching to it");
                     framework.asyncSupport = new JBossWebCometSupport(framework.config);
+                    framework.asyncSupport.init(framework.config.getServletConfig());
                 }
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -523,7 +523,7 @@ public Enumeration<String> getInitParameterNames() {
             }
 
             for (String i: broadcasterFilters) {
-                if (i.getClass().equals(TrackMessageSizeFilter.class.getName())) {
+                if (i.equals(TrackMessageSizeFilter.class.getName())) {
                     found = true;
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/container/Grizzly2WebSocketSupport.java
Patch:
@@ -279,4 +279,4 @@ private void mapRequest(WebappContext ctx, HttpRequestPacket request, HttpServle
 
     } // END Grizzly2WebSocketApplication
 
-}
+}
\ No newline at end of file

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/EventsLogger.java
Patch:
@@ -25,7 +25,7 @@ public EventsLogger() {
 
 
     public void onSuspend(final AtmosphereResourceEvent event) {
-        System.out.println("onResume: " + event);
+        System.out.println("onSuspend: " + event);
     }
 
     public void onResume(AtmosphereResourceEvent event) {

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeInterceptor.java
Patch:
@@ -110,7 +110,7 @@ public byte[] filter(AtmosphereResponse r, byte[] message) {
                     } catch (UnsupportedEncodingException e) {
                         logger.trace("", e);
                     }
-                    s += s.length() + endString + s;
+                    s = s.length() + endString + s;
 
                     try {
                         return s.getBytes(response.getCharacterEncoding());
@@ -129,7 +129,7 @@ public byte[] filter(AtmosphereResponse r, byte[] message, int offset, int lengt
                     } catch (UnsupportedEncodingException e) {
                         logger.trace("", e);
                     }
-                    s += s.length() + endString + s;
+                    s = s.length() + endString + s;
 
                     try {
                         return s.getBytes(response.getCharacterEncoding());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -559,7 +559,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
 
                 logger.debug("Cancelling the connection for request {}", req);
 
-                r = (AtmosphereResourceImpl) req.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
+                r = (AtmosphereResourceImpl) req.resource();
                 if (r != null) {
                     r.getAtmosphereResourceEvent().setCancelled(true);
                     invokeAtmosphereHandler(r);

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -237,7 +237,7 @@ public interface ApplicationConfig {
      * Recycle (make them unusable) AtmosphereRequest/Response after wrapping a WebSocket message and delegating it to
      * a Container
      */
-    String RECYCLE_ATMOSPHERE_REQUEST_RESPONSE = ApplicationConfig.class.getPackage().getName() + "recycleAtmosphereRequestResponse";
+    String RECYCLE_ATMOSPHERE_REQUEST_RESPONSE = ApplicationConfig.class.getPackage().getName() + ".recycleAtmosphereRequestResponse";
     /**
      * The location of classes implementing the {@link AtmosphereHandler} interface. Default to "/WEB-INF/classes".
      */

File: extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java
Patch:
@@ -104,7 +104,7 @@ public void sendMessage(List<SocketIOPacketImpl> messages) throws SocketIOExcept
                                 AtmosphereResourceImpl resource = session.getAtmosphereResourceImpl();
                                 // if BroadcastCache is available, add the message to the cache
                                 if (resource != null && DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {
-                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource, msg);
+                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(), resource, msg);
                                 }
                             }
                             break;
@@ -198,7 +198,7 @@ public void onResume(AtmosphereResourceEvent event) {
                                 if (DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {
 
                                     List<Object> cachedMessages = DefaultBroadcaster.class.cast(resource.getBroadcaster())
-                                            .broadcasterCache.retrieveFromCache(resource);
+                                            .broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(), resource);
 
                                     if (cachedMessages != null) {
                                         if (cachedMessages.size() > 1) {

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -63,12 +63,12 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class HeaderBroadcasterCache extends BroadcasterCacheBase {
+public class HeaderBroadcasterCache extends AbstractBroadcasterCache {
 
     /**
      * {@inheritDoc}
      */
-    public void cache(final AtmosphereResource ar, CachedMessage cm) {
+    public void cache(String id, AtmosphereResource ar, CachedMessage cm) {
         long time = cm.next() == null ? cm.currentTime() : cm.next().currentTime();
 
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(ar);
@@ -80,7 +80,7 @@ public void cache(final AtmosphereResource ar, CachedMessage cm) {
     /**
      * {@inheritDoc}
      */
-    public CachedMessage retrieveLastMessage(final AtmosphereResource ar) {
+    public CachedMessage retrieveLastMessage(String id, AtmosphereResource ar) {
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(ar);
 
         if (!r.isInScope()) return null;

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
Patch:
@@ -84,14 +84,14 @@ public enum STRATEGY { BEFORE_FILTER, AFTER_FILTER }
      * @param r {@link AtmosphereResource}
      * @param e a broadcasted message.
      */
-    void addToCache(AtmosphereResource r, Object e);
+    void addToCache(String id, AtmosphereResource r, Object e);
 
     /**
      * Retrieve messages associated with {@link AtmosphereResource}
      *
      * @param r {@link AtmosphereResource}
      * @return a {@link List} of messages (String).
      */
-    List<Object> retrieveFromCache(AtmosphereResource r);
+    List<Object> retrieveFromCache(String id, AtmosphereResource r);
 
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -831,7 +831,7 @@ protected void checkCachedAndPush(final AtmosphereResource r, final AtmosphereRe
     }
 
     protected boolean retrieveTrackedBroadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
-        List<?> missedMsg = broadcasterCache.retrieveFromCache(r);
+        List<?> missedMsg = broadcasterCache.retrieveFromCache(getID(), r);
         if (missedMsg != null && !missedMsg.isEmpty()) {
             e.setMessage(missedMsg);
             return true;
@@ -842,7 +842,7 @@ protected boolean retrieveTrackedBroadcast(final AtmosphereResource r, final Atm
     protected void trackBroadcastMessage(final AtmosphereResource r, Object msg) {
         if (destroyed.get() || broadcasterCache == null) return;
         try {
-            broadcasterCache.addToCache(r, msg);
+            broadcasterCache.addToCache(getID(), r, msg);
         } catch (Throwable t) {
             logger.warn("Unable to track messages {}", msg, t);
         }
@@ -911,7 +911,7 @@ public void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token) {
         try {
             if (token != null && token.originalMessage != null) {
                 Object m = cacheStrategy.equals(BroadcasterCache.STRATEGY.BEFORE_FILTER) ? token.originalMessage : token.msg;
-                broadcasterCache.addToCache(r, m);
+                broadcasterCache.addToCache(getID(), r, m);
                 logger.trace("Lost message cached {}", m);
             }
         } catch (Throwable t2) {

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -75,7 +75,7 @@ private void writePadding(AtmosphereResponse response) {
                 logger.trace("", e);
             }
 
-            w.println(padding);
+            w.println(paddingText);
             w.flush();
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
Patch:
@@ -242,7 +242,7 @@ protected final static class CachedMessage implements Serializable {
         public Object t;
 
         public CachedMessage(boolean isTail) {
-            this.currentTime = 0L;
+            this.currentTime = System.currentTimeMillis();
             this.message = null;
             this.next = null;
             this.isTail = isTail;

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -386,7 +386,7 @@ public Meteor removeListener(AtmosphereResourceEventListener e) {
      */
     public void destroy() {
         isDestroyed.set(true);
-        cache.remove(this);
+        cache.remove(r);
     }
 
     private boolean destroyed(){

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/EventsLogger.java
Patch:
@@ -25,7 +25,7 @@ public EventsLogger() {
 
 
     public void onSuspend(final AtmosphereResourceEvent event) {
-        System.out.println("onResume: " + event);
+        System.out.println("onSuspend: " + event);
     }
 
     public void onResume(AtmosphereResourceEvent event) {

File: samples/pubsub/src/main/java/org/atmosphere/samples/pubsub/EventsLogger.java
Patch:
@@ -25,7 +25,7 @@ public EventsLogger() {
 
 
     public void onSuspend(final AtmosphereResourceEvent event) {
-        System.out.println("onResume: " + event);
+        System.out.println("onSuspend: " + event);
     }
 
     public void onResume(AtmosphereResourceEvent event) {

File: extras/socketio/src/main/java/org/atmosphere/socketio/transport/XHRTransport.java
Patch:
@@ -104,7 +104,7 @@ public void sendMessage(List<SocketIOPacketImpl> messages) throws SocketIOExcept
                                 AtmosphereResourceImpl resource = session.getAtmosphereResourceImpl();
                                 // if BroadcastCache is available, add the message to the cache
                                 if (resource != null && DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {
-                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource, msg);
+                                    DefaultBroadcaster.class.cast(resource.getBroadcaster()).broadcasterCache.addToCache(resource.getBroadcaster().getID(), resource, msg);
                                 }
                             }
                             break;
@@ -198,7 +198,7 @@ public void onResume(AtmosphereResourceEvent event) {
                                 if (DefaultBroadcaster.class.isAssignableFrom(resource.getBroadcaster().getClass())) {
 
                                     List<Object> cachedMessages = DefaultBroadcaster.class.cast(resource.getBroadcaster())
-                                            .broadcasterCache.retrieveFromCache(resource);
+                                            .broadcasterCache.retrieveFromCache(resource.getBroadcaster().getID(), resource);
 
                                     if (cachedMessages != null) {
                                         if (cachedMessages.size() > 1) {

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
Patch:
@@ -434,7 +434,7 @@ private void failedRefresh() {
             }
             refreshQueue.clear();
         }
-        doDisconnect();
+        listener.onError(new RuntimeException("Failed to refresh connection. Will try to establish a new connection"), false);
         scheduleConnect(primaryTransport);
     }
 

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereListener.java
Patch:
@@ -55,7 +55,8 @@ public interface AtmosphereListener {
     public void onBeforeDisconnected();
 
     /**
-     * The connection has disconnected. When the disconnect was unexpected the connecting will be refreshed.
+     * The connection has disconnected. When the disconnect was unexpected ({@link AtmosphereClient#isRunning()} == true)
+     * the connecting will be refreshed after this and you can expect the next event to be {@link #onAfterRefresh() }
      */
     public void onDisconnected();
 

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -76,7 +76,7 @@ public void testEmptyBroadcastMethod() throws ExecutionException, InterruptedExc
         assertEquals(atmosphereHandler.value.get(), new HashSet());
     }
 
-    @Test
+    //@Test
     public void testSetBroadcastMethod() throws ExecutionException, InterruptedException, ServletException {
         AtmosphereConfig config = new AtmosphereFramework()
                 .setAsyncSupport(mock(BlockingIOCometSupport.class))

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -63,12 +63,12 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class HeaderBroadcasterCache extends BroadcasterCacheBase {
+public class HeaderBroadcasterCache extends AbstractBroadcasterCache {
 
     /**
      * {@inheritDoc}
      */
-    public void cache(final AtmosphereResource ar, CachedMessage cm) {
+    public void cache(String id, AtmosphereResource ar, CachedMessage cm) {
         long time = cm.next() == null ? cm.currentTime() : cm.next().currentTime();
 
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(ar);
@@ -80,7 +80,7 @@ public void cache(final AtmosphereResource ar, CachedMessage cm) {
     /**
      * {@inheritDoc}
      */
-    public CachedMessage retrieveLastMessage(final AtmosphereResource ar) {
+    public CachedMessage retrieveLastMessage(String id, AtmosphereResource ar) {
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(ar);
 
         if (!r.isInScope()) return null;

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
Patch:
@@ -84,14 +84,14 @@ public enum STRATEGY { BEFORE_FILTER, AFTER_FILTER }
      * @param r {@link AtmosphereResource}
      * @param e a broadcasted message.
      */
-    void addToCache(AtmosphereResource r, Object e);
+    void addToCache(String id, AtmosphereResource r, Object e);
 
     /**
      * Retrieve messages associated with {@link AtmosphereResource}
      *
      * @param r {@link AtmosphereResource}
      * @return a {@link List} of messages (String).
      */
-    List<Object> retrieveFromCache(AtmosphereResource r);
+    List<Object> retrieveFromCache(String id, AtmosphereResource r);
 
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -831,7 +831,7 @@ protected void checkCachedAndPush(final AtmosphereResource r, final AtmosphereRe
     }
 
     protected boolean retrieveTrackedBroadcast(final AtmosphereResource r, final AtmosphereResourceEvent e) {
-        List<?> missedMsg = broadcasterCache.retrieveFromCache(r);
+        List<?> missedMsg = broadcasterCache.retrieveFromCache(getID(), r);
         if (missedMsg != null && !missedMsg.isEmpty()) {
             e.setMessage(missedMsg);
             return true;
@@ -842,7 +842,7 @@ protected boolean retrieveTrackedBroadcast(final AtmosphereResource r, final Atm
     protected void trackBroadcastMessage(final AtmosphereResource r, Object msg) {
         if (destroyed.get() || broadcasterCache == null) return;
         try {
-            broadcasterCache.addToCache(r, msg);
+            broadcasterCache.addToCache(getID(), r, msg);
         } catch (Throwable t) {
             logger.warn("Unable to track messages {}", msg, t);
         }
@@ -911,7 +911,7 @@ public void cacheLostMessage(AtmosphereResource r, AsyncWriteToken token) {
         try {
             if (token != null && token.originalMessage != null) {
                 Object m = cacheStrategy.equals(BroadcasterCache.STRATEGY.BEFORE_FILTER) ? token.originalMessage : token.msg;
-                broadcasterCache.addToCache(r, m);
+                broadcasterCache.addToCache(getID(), r, m);
                 logger.trace("Lost message cached {}", m);
             }
         } catch (Throwable t2) {

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
Patch:
@@ -175,7 +175,7 @@ public final synchronized List<Object> retrieveFromCache(final AtmosphereResourc
 
         CachedMessage cm = retrieveLastMessage(r);
         boolean isNew = false;
-        if (cm == null && r.getRequest().getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) != null) {
+        if (cm == null && AtmosphereResourceImpl.class.cast(r).isInScope() && r.getRequest().getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) != null) {
             isNew = true;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/interceptor/SSEAtmosphereInterceptor.java
Patch:
@@ -88,7 +88,7 @@ private void writePadding(AtmosphereResponse response) {
                 logger.trace("", e);
             }
 
-            w.println(padding);
+            w.println(paddingText);
             w.flush();
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
Patch:
@@ -242,7 +242,7 @@ protected final static class CachedMessage implements Serializable {
         public Object t;
 
         public CachedMessage(boolean isTail) {
-            this.currentTime = 0L;
+            this.currentTime = System.currentTimeMillis();
             this.message = null;
             this.next = null;
             this.isTail = isTail;

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -386,7 +386,7 @@ public Meteor removeListener(AtmosphereResourceEventListener e) {
      */
     public void destroy() {
         isDestroyed.set(true);
-        cache.remove(this);
+        cache.remove(r);
     }
 
     private boolean destroyed(){

File: modules/cpr/src/main/java/org/atmosphere/cache/BroadcasterCacheBase.java
Patch:
@@ -175,7 +175,7 @@ public final synchronized List<Object> retrieveFromCache(final AtmosphereResourc
 
         CachedMessage cm = retrieveLastMessage(r);
         boolean isNew = false;
-        if (cm == null && r.getRequest().getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) != null) {
+        if (cm == null && AtmosphereResourceImpl.class.cast(r).isInScope() && r.getRequest().getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) != null) {
             isNew = true;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1234,7 +1234,7 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
         if (s == null || s.equals("0")) {
             s = UUID.randomUUID().toString();
             res.setHeader(X_ATMOSPHERE_TRACKING_ID, s);
-            res.setHeader(SUSPENDED_ATMOSPHERE_RESOURCE_UUID, s);
+            req.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID, s);
         }
 
         Action a = null;

File: modules/cpr/src/test/java/org/atmosphere/cpr/WebSocketProcessorTest.java
Patch:
@@ -163,7 +163,7 @@ public void onRequest(AtmosphereResource resource) throws IOException {
                 resource.addEventListener(new WebSocketEventListenerAdapter() {
                     @Override
                     public void onDisconnect(WebSocketEvent event) {
-                        uuid.set((String) event.webSocket().resource().getRequest().getAttribute(FrameworkConfig.WEBSOCKET_ATMOSPHERE_RESOURCE));
+                        uuid.set((String) event.webSocket().resource().getRequest().getAttribute(ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID));
                     }
                 });
             }
@@ -200,7 +200,7 @@ public void onRequest(AtmosphereResource resource) throws IOException {
                 resource.addEventListener(new WebSocketEventListenerAdapter() {
                     @Override
                     public void onClose(WebSocketEvent event) {
-                        uuid.set((String) event.webSocket().resource().getRequest().getAttribute(FrameworkConfig.WEBSOCKET_ATMOSPHERE_RESOURCE));
+                        uuid.set((String) event.webSocket().resource().getRequest().getAttribute(ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID));
                     }
                 });
             }

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -47,6 +47,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 import static org.atmosphere.cpr.ApplicationConfig.RECYCLE_ATMOSPHERE_REQUEST_RESPONSE;
+import static org.atmosphere.cpr.ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_PROTOCOL_EXECUTION;
 import static org.atmosphere.cpr.FrameworkConfig.ASYNCHRONOUS_HOOK;
 import static org.atmosphere.cpr.FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE;
@@ -118,7 +119,7 @@ public final void open(final AtmosphereRequest request) throws IOException {
                 framework.getAsyncSupport());
 
         request.setAttribute(INJECTED_ATMOSPHERE_RESOURCE, r);
-        request.setAttribute(WEBSOCKET_ATMOSPHERE_RESOURCE, r.uuid());
+        request.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID, r.uuid());
 
         webSocket.resource(r);
         webSocketProtocol.onOpen(webSocket);

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -133,7 +133,7 @@ public Enumeration<String> getInitParameterNames() {
 
         broadcaster.broadcast("foo", set).get();
 
-        assertEquals(atmosphereHandler.value.get(), new HashSet());
+        assertEquals(atmosphereHandler.value.get(), set);
     }
 
     public final static class AR implements AtmosphereHandler {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereInterceptorWriter.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class AtmosphereInterceptorWriter extends AsyncIOWriterAdapter {
 
-    private static final Logger logger = LoggerFactory.getLogger(AsyncIOWriterAdapter.class);
+    private static final Logger logger = LoggerFactory.getLogger(AtmosphereInterceptorWriter.class);
     private final AtmosphereResponse response;
 
     private final ArrayList<AsyncIOInterceptor> filters = new ArrayList<AsyncIOInterceptor>();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncIOWriterAdapter.java
Patch:
@@ -20,6 +20,8 @@
 /**
  * Adapter class for {@link AsyncIOWriter}. Implementation of this class must implements one of each method to prevent
  * a StackOverflow.
+ *
+ * @author Jeanfrancois Arcand
  */
 public abstract class AsyncIOWriterAdapter implements AsyncIOWriter {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -354,7 +354,7 @@ enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, S
 
      /**
      * Return the {@link HttpSession} is supported, and creates it if not already created.
-     * @return the {@link HttpSession} is supported, and creates it if not already crea
+     * @return the {@link HttpSession} is supported, and creates it if not already created
      */
     HttpSession session(boolean create);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/SessionTimeoutSupport.java
Patch:
@@ -24,8 +24,8 @@
 /**
  * Allows invalidating and restoring HTTP session timeout.
  *
- * @since 0.9
  * @author Miro Bezjak
+ * @since 0.9
  */
 public final class SessionTimeoutSupport {
 
@@ -74,10 +74,11 @@ private static SessionTimeoutRestorer unbind(HttpSession s) {
         SessionTimeoutRestorer r = null;
         try {
             r = (SessionTimeoutRestorer) s.getAttribute(KEY);
+            s.removeAttribute(KEY);
+
         } catch (Exception ex) {
             logger.trace("", ex);
         }
-        s.removeAttribute(KEY);
         return r;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -49,7 +49,7 @@ public interface HeaderConfig {
      */
     String X_ATMOSPHERE_ERROR = "X-Atmosphere-error";
     /**
-     * The unique tracking ID generated by the client
+     * The unique tracking ID generated by the server
      */
     String X_ATMOSPHERE_TRACKING_ID = "X-Atmosphere-tracking-id";
     /**

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
Patch:
@@ -109,6 +109,9 @@ public void doPost(HttpServletRequest postRequest, HttpServletResponse postRespo
      * @return
      */
     protected GwtAtmosphereResource lookupResource(int connectionId) {
+        if (resources == null) {
+            return null;
+        }
         GwtAtmosphereResource r = resources.get(connectionId);
         if (r != null) {
             return r;

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AndroidAtmosphereInterceptor.java
Patch:
@@ -65,7 +65,9 @@ public Action inspect(final AtmosphereResource r) {
         final AtmosphereResponse response = r.getResponse();
         String userAgent = r.getRequest().getHeader("User-Agent");
 
-        if (r.transport().equals(TRANSPORT.STREAMING) && userAgent != null && userAgent.indexOf("Android 2.3") != -1) {
+        if (r.transport().equals(TRANSPORT.STREAMING) && userAgent != null &&
+                (userAgent.indexOf("Android 2.") != -1 || userAgent.indexOf("Android 3.") != -1)) {
+
             r.padding("whitespace");
             response.asyncIOWriter(new AsyncIOWriterAdapter() {
                 @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -164,8 +164,7 @@ public interface ApplicationConfig {
      */
     String ALLOW_QUERYSTRING_AS_REQUEST = ApplicationConfig.class.getPackage().getName() + ".allowQueryStreamAsPostOrGet";
     /**
-     * Configure the padding used when streaming is used. Value can be atmosphere, legacy or whitespace.
-     * Default is whitespace {@link org.atmosphere.cpr.AtmosphereResourceImpl#createStreamingPadding(String)} ()}
+     * Configure the padding used when streaming is used. Value can be atmosphere or whitespace. Default is ATMOSPHERE {@link org.atmosphere.cpr.AtmosphereResourceImpl#createStreamingPadding(String)} ()}
      */
     String STREAMING_PADDING_MODE = ApplicationConfig.class.getPackage().getName() + ".padding";
     /**

File: modules/cpr/src/main/java/org/atmosphere/interceptor/AndroidAtmosphereInterceptor.java
Patch:
@@ -58,7 +58,6 @@ public class AndroidAtmosphereInterceptor implements AtmosphereInterceptor {
 
     @Override
     public void configure(AtmosphereConfig config) {
-        config.framework().addInitParameter(ApplicationConfig.STREAMING_PADDING_MODE, "whitespace");
     }
 
     @Override
@@ -67,6 +66,7 @@ public Action inspect(final AtmosphereResource r) {
         String userAgent = r.getRequest().getHeader("User-Agent");
 
         if (r.transport().equals(TRANSPORT.STREAMING) && userAgent != null && userAgent.indexOf("Android 2.3") != -1) {
+            r.padding("whitespace");
             response.asyncIOWriter(new AsyncIOWriterAdapter() {
                 @Override
                 public AsyncIOWriter redirect(String location) throws IOException {

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -164,7 +164,8 @@ public interface ApplicationConfig {
      */
     String ALLOW_QUERYSTRING_AS_REQUEST = ApplicationConfig.class.getPackage().getName() + ".allowQueryStreamAsPostOrGet";
     /**
-     * Configure the padding used when streaming is used. Value can be atmosphere or whitespace. Default is ATMOSPHERE {@link org.atmosphere.cpr.AtmosphereResourceImpl#createStreamingPadding(String)} ()}
+     * Configure the padding used when streaming is used. Value can be atmosphere, legacy or whitespace.
+     * Default is whitespace {@link org.atmosphere.cpr.AtmosphereResourceImpl#createStreamingPadding(String)} ()}
      */
     String STREAMING_PADDING_MODE = ApplicationConfig.class.getPackage().getName() + ".padding";
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -671,7 +671,7 @@ public Serializer getSerializer() {
     public static String createStreamingPadding(String padding) {
         StringBuilder s = new StringBuilder();
 
-        if (padding == null || padding.equalsIgnoreCase("atmosphere")) {
+        if (padding != null && (padding.equalsIgnoreCase("atmosphere") || padding.equalsIgnoreCase("legacy"))) {
             s.append("<!-- ----------------------------------------------------------" +
                     "------ http://github.com/Atmosphere ----------------------------" +
                     "-------------------------------------------- -->\n");

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -116,6 +116,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String d) {
                 .pathInfo(pathInfo)
                 .destroyable(destroyable)
                 .headers(resource.getRequest().headersMap())
+                .session(resource.session())
                 .build());
 
         return list;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -217,7 +217,7 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         if (resource == null) {
             // TODO: cast is dangerous
             resource = (AtmosphereResourceImpl)
-                    AtmosphereResourceFactory.create(config, handlerWrapper.broadcaster, res, this, handlerWrapper.atmosphereHandler);
+                    AtmosphereResourceFactory.getDefault().create(config, handlerWrapper.broadcaster, res, this, handlerWrapper.atmosphereHandler);
         } else {
             // TODO: This piece of code can be removed, but for backward compat with existing extension we needs it for now.
             try {

File: modules/cpr/src/main/java/org/atmosphere/websocket/DefaultWebSocketProcessor.java
Patch:
@@ -104,7 +104,7 @@ public final void open(final AtmosphereRequest request) throws IOException {
         AtmosphereResponse wsr = new AtmosphereResponse(webSocket, request, destroyable);
         request.headers(configureHeader(request)).setAttribute(WebSocket.WEBSOCKET_SUSPEND, true);
 
-        AtmosphereResource r = AtmosphereResourceFactory.create(framework.getAtmosphereConfig(),
+        AtmosphereResource r = AtmosphereResourceFactory.getDefault().create(framework.getAtmosphereConfig(),
                 wsr,
                 framework.getAsyncSupport());
 

File: samples/gwt-chat/src/main/java/org/atmosphere/samples/server/ChatHandler.java
Patch:
@@ -61,7 +61,8 @@ public void cometTerminated(GwtAtmosphereResource cometResponse, boolean serverI
     }
 
     @Override
-    public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse, List<Serializable> messages, GwtAtmosphereResource cometResource) {
+    public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse,
+            List<?> messages, GwtAtmosphereResource cometResource) {
         broadcast(messages, cometResource);
     }
 

File: samples/gwt-conn-share/src/main/java/org/atmosphere/samples/server/AtmosphereHandler.java
Patch:
@@ -70,7 +70,8 @@ public void cometTerminated(GwtAtmosphereResource cometResponse, boolean serverI
     }
 
     @Override
-    public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse, List<Serializable> messages, GwtAtmosphereResource cometResource) {
+    public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse,
+            List<?> messages, GwtAtmosphereResource cometResource) {
         HttpSession session = postRequest.getSession(false);
         if (session != null) {
             logger.info("Post has session with id: " + session.getId());

File: samples/gwt-demo/src/main/java/org/atmosphere/samples/server/AtmosphereHandler.java
Patch:
@@ -70,7 +70,8 @@ public void cometTerminated(GwtAtmosphereResource cometResponse, boolean serverI
     }
 
     @Override
-    public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse, List<Serializable> messages, GwtAtmosphereResource cometResource) {
+    public void doPost(HttpServletRequest postRequest, HttpServletResponse postResponse,
+            List<?> messages, GwtAtmosphereResource cometResource) {
         HttpSession session = postRequest.getSession(false);
         if (session != null) {
             logger.info("Post has session with id: " + session.getId());

File: modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessorFactory.java
Patch:
@@ -22,7 +22,7 @@ public final static WebSocketProcessorFactory getDefault() {
 
     public WebSocketProcessor newWebSocketProcessor(WebSocket webSocket) {
         WebSocketProcessor wp = null;
-        if (webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())) {
+        if (!webSocketProcessorName.equalsIgnoreCase(WebSocketProcessor.class.getName())) {
             try {
                 wp = (WebSocketProcessor) Thread.currentThread().getContextClassLoader()
                         .loadClass(webSocketProcessorName).newInstance();

File: modules/cpr/src/main/java/org/atmosphere/config/service/WebSocketProtocolService.java
Patch:
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation for telling Atmosphere which {@link org.atmosphere.websocket.WebSocketProcessor} class to use by default.
+ * An annotation for telling Atmosphere which {@link org.atmosphere.websocket.WebSocketProtocol} class to use by default.
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -557,7 +557,8 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
             // Android 2.3.x streaming support
             interceptors.addFirst(newAInterceptor(AndroidAtmosphereInterceptor.class));
         }
-        logger.info("Installed AtmosphereInterceptor {}", interceptors);
+        logger.info("Installed Default AtmosphereInterceptor {}. " +
+                "Set org.atmosphere.cpr.AtmosphereInterceptor.disableDefaults in your xml to disable them.", interceptors);
     }
 
     protected AtmosphereInterceptor newAInterceptor(Class<? extends AtmosphereInterceptor> a) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1516,7 +1516,6 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
         if (AtmosphereRequest.class.isAssignableFrom(request.getClass())) {
             b = AtmosphereRequest.class.cast(request).b;
             isWrapped = true;
-            r = request;
         } else {
             b = new Builder();
             b.request(request);
@@ -1535,9 +1534,10 @@ public final static AtmosphereRequest cloneRequest(HttpServletRequest request, b
 
         if (loadInMemory) {
             r = new NoOpsRequest();
-            load(request, b);
             if (isWrapped) {
                 load(b.request, b);
+            } else {
+                load(request, b);
             }
             b.request(r);
         }

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/OperaEventSourceResponseWriter.java
Patch:
@@ -63,7 +63,9 @@ protected void doWrite(List<? extends Serializable> messages) throws IOException
             CharSequence string;
             char event;
             if (message instanceof CharSequence) {
-                string = HTTPRequestResponseWriter.escape((CharSequence) message);
+                string = (CharSequence) message;
+                if (this.shouldEscapeText())
+                    string = HTTPRequestResponseWriter.escape(string);
                 event = 's';
             } else {
                 string = serialize(message);

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/StreamingProtocolResponseWriter.java
Patch:
@@ -135,7 +135,9 @@ protected void doWrite(List<? extends Serializable> messages) throws IOException
         for (Serializable message : messages) {
             CharSequence string;
             if (message instanceof CharSequence) {
-                string = escape((CharSequence) message);
+                string = (CharSequence) message;
+                if (this.shouldEscapeText())
+                    string = escape(string);
                 if (string == message) {
                     writer.append('|');
                 } else {

File: extras/gwt/atmosphere-gwt-js/src/main/java/org/atmosphere/gwt/js/JsUserInterface.java
Patch:
@@ -99,6 +99,7 @@ public void onMessage(List<?> messages) {
             if (onMessage != null) {
                 for (Object m : messages) {
                     onMessage.execute((JavaScriptObject) m);
+                    onMessage.execute(m);
                 }
             }
         }

File: extras/gwt/atmosphere-gwt-js/src/main/java/org/atmosphere/gwt/js/NativeJSONObjectSerializer.java
Patch:
@@ -22,11 +22,11 @@ public String serialize(Object message) throws SerializationException {
 
             
     private native static String encodeJSON(JavaScriptObject obj) /*-{
-        return atmosphere_JSON.encode(obj);
+        return $wnd.atmosphere_JSON.encode(obj);
     }-*/;
 
     private native static JavaScriptObject decodeJSON(String json) /*-{
-        return atmosphere_JSON.decode(json);
+        return $wnd.atmosphere_JSON.decode(json);
     }-*/;
 
 }

File: extras/gwt/atmosphere-gwt-js/src/main/java/org/atmosphere/gwt/js/OnMessage.java
Patch:
@@ -29,5 +29,5 @@
 @ExportPackage("atmosphere")
 @ExportClosure
 public interface OnMessage extends Exportable {
-    public void execute(JavaScriptObject message);
+    public void execute(Object message);
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterLifeCyclePolicyListener.java
Patch:
@@ -21,6 +21,7 @@
  * @author Jeanfrancois Arcand
  */
 public interface BroadcasterLifeCyclePolicyListener {
+
     /**
      * Invoked when a {@link Broadcaster}'s list of {@link AtmosphereResource} becomes empty, e.g
      * the broadcaster has no longer resource associated with it.

File: modules/cpr/src/test/java/org/atmosphere/cpr/MetaBroadcasterTest.java
Patch:
@@ -92,8 +92,6 @@ public void chatTest() throws ExecutionException, InterruptedException {
         factory.get("/a/chat2");
         factory.get("/a/chat3");
 
-        assertEquals(MetaBroadcaster.getDefault().broadcastTo("/a", "yo").get().size(), 0);
-        assertEquals(MetaBroadcaster.getDefault().broadcastTo("/a/", "yo").get().size(), 0);
         assertEquals(MetaBroadcaster.getDefault().broadcastTo("/a/*", "yo").get().size(), 3);
 
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -47,9 +47,9 @@
 public class SimpleHttpProtocol implements WebSocketProtocol, Serializable {
 
     private static final Logger logger = LoggerFactory.getLogger(SimpleHttpProtocol.class);
-    private String contentType;
-    private String methodType;
-    private String delimiter;
+    private String contentType = "text/plain";
+    private String methodType = "POST";
+    private String delimiter = "@@";
     private boolean destroyable;
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -518,10 +518,9 @@ public void run() {
                     try {
                         msg = messages.poll(10, TimeUnit.SECONDS);
                         if (msg == null) {
-                            if (destroyed.get()) {
+                            if (!destroyed.get()) {
+                                bc.getAsyncWriteService().submit(this);
                                 return;
-                            } else {
-                                continue;
                             }
                         }
                         push(msg);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -154,7 +154,8 @@ public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
         padding = config.getInitParameter(ApplicationConfig.STREAMING_PADDING_MODE);
         req.setAttribute(ApplicationConfig.STREAMING_PADDING_MODE, padding);
 
-        uuid = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
+        String s = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
+        uuid = s == null? UUID.randomUUID().toString() : s;
 
         if (config.isSupportSession()) {
             //Keep a reference to an HttpSession in case the associated request get recycled by the underlying container.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -154,7 +154,7 @@ public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
         padding = config.getInitParameter(ApplicationConfig.STREAMING_PADDING_MODE);
         req.setAttribute(ApplicationConfig.STREAMING_PADDING_MODE, padding);
 
-        uuid = UUID.randomUUID().toString();
+        uuid = response.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
 
         if (config.isSupportSession()) {
             //Keep a reference to an HttpSession in case the associated request get recycled by the underlying container.

File: modules/cpr/src/main/java/org/atmosphere/cpr/MetaBroadcaster.java
Patch:
@@ -71,7 +71,7 @@ protected MetaBroadcasterFuture broadcast(String path, Object message, int time,
             MetaBroadcasterFuture f = new MetaBroadcasterFuture(l);
             CompleteListener cl = new CompleteListener(f);
             for (Broadcaster b : l) {
-                if (time > -1) {
+                if (time <= 0) {
                     b.addBroadcasterListener(cl).broadcast(message);
                 } else {
                     b.scheduleFixedBroadcast(message, time, unit);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -175,7 +175,7 @@ public AtmosphereHandlerWrapper(AtmosphereHandler atmosphereHandler, String mapp
             this.atmosphereHandler = atmosphereHandler;
             try {
                 if (BroadcasterFactory.getDefault() != null) {
-                    this.broadcaster = BroadcasterFactory.getDefault().get(mapping);
+                    this.broadcaster = BroadcasterFactory.getDefault().lookup(mapping, true);
                 } else {
                     this.mapping = mapping;
                 }

File: extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
Patch:
@@ -242,7 +242,6 @@ private void auth(Jedis jedis) {
         if (authToken != null) {
             jedis.auth(authToken);
         }
-        jedis.flushAll();
     }
 
     private void disconnectSubscriber() {

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -122,7 +122,7 @@ public <T> Future<T> broadcast(T msg) {
 
         Object newMsg = filter(msg);
         if (newMsg == null) return null;
-        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
+        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, broadcasterListeners, this);
         f.done();
         push(new Entry(newMsg, null, f, msg));
         return f;
@@ -143,7 +143,7 @@ public <T> Future<T> broadcast(T msg, AtmosphereResource r) {
 
         Object newMsg = filter(msg);
         if (newMsg == null) return null;
-        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
+        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, broadcasterListeners, this);
         f.done();
         push(new Entry(newMsg, r, f, msg));
         return f;
@@ -165,7 +165,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource> subset) {
         Object newMsg = filter(msg);
         if (newMsg == null) return null;
 
-        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
+        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg, broadcasterListeners, this);
         f.done();
         push(new Entry(newMsg, subset, f, msg));
         return f;

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -61,7 +61,7 @@ public WebSocket() {
     public WebSocket resource(AtmosphereResource r) {
 
         // Make sure we carry what was set at the onOpen stage.
-        if (this.r != null) {
+        if (this.r != null && r != null) {
             // TODO: This is all over the place and quite ugly (the cast). Need to fix this in 1.1
             AtmosphereResourceImpl.class.cast(r).cloneState(this.r);
         }

File: modules/cpr/src/main/java/org/atmosphere/util/FakeHttpSession.java
Patch:
@@ -128,7 +128,7 @@ public FakeHttpSession copyAttributes(HttpSession httpSession){
             k = e.nextElement();
             if (k == null) continue;
 
-            Object o = getAttribute(k);
+            Object o = httpSession.getAttribute(k);
             if (o == null) continue;
 
             attributes.put(k, o);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -219,6 +219,7 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
             resource = (AtmosphereResourceImpl)
                     AtmosphereResourceFactory.create(config, handlerWrapper.broadcaster, res, this, handlerWrapper.atmosphereHandler);
         } else {
+            // TODO: This piece of code can be removed, but for backward compat with existing extension we needs it for now.
             try {
                 // Make sure it wasn't set before
                 resource.getBroadcaster();

File: modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java
Patch:
@@ -199,7 +199,7 @@ enum POLICY {
      * the {@link Broadcaster#broadcast} is invoked.
      *
      * @param resource an {@link AtmosphereResource}
-     * @return {@link AtmosphereResource} if added, or null if it was already there.
+     * @return this
      */
     Broadcaster addAtmosphereResource(AtmosphereResource resource);
 
@@ -208,7 +208,7 @@ enum POLICY {
      * the {@link Broadcaster#broadcast} is invoked.
      *
      * @param resource an {@link AtmosphereResource}
-     * @return {@link AtmosphereResource} if removed, or null if it was not.
+     * @return this
      */
     Broadcaster removeAtmosphereResource(AtmosphereResource resource);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -34,7 +34,7 @@ public class AtmosphereConfig {
 
     private final List<AtmosphereHandlerConfig> atmosphereHandlerConfig = new ArrayList<AtmosphereHandlerConfig>();
 
-    private boolean supportSession = false;
+    private boolean supportSession;
     private String dispatcherName = DEFAULT_NAMED_DISPATCHER;
     private final AtmosphereFramework framework;
     private final Map<String, Object> properties = new HashMap<String, Object>();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -503,6 +503,7 @@ public Enumeration<String> getInitParameterNames() {
                 sc.getServletContext().setAttribute(BroadcasterFactory.class.getName(), broadcasterFactory);
             }
 
+            logger.info("HttpSession supported: {}", config.isSupportSession());
             logger.info("Using BroadcasterFactory class: {}", BroadcasterFactory.getDefault().getClass().getName());
             logger.info("Using Broadcaster class: {}", broadcasterClassName);
             logger.info("Atmosphere Framework {} started.", Version.getRawVersion());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -359,8 +359,7 @@ public AtmosphereResource suspend(long timeout, boolean flushComment) {
 
         if (event.isSuspended() || disableSuspend) return this;
 
-        if (config.isSupportSession()
-                && req.getSession(false) != null
+        if (req.getSession(false) != null
                 && req.getSession().getMaxInactiveInterval() != -1
                 && req.getSession().getMaxInactiveInterval() * 1000 < timeout) {
             throw new IllegalStateException("Cannot suspend a " +

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -66,7 +66,7 @@ public interface ApplicationConfig {
      */
     String PROPERTY_COMET_SUPPORT = ApplicationConfig.class.getPackage().getName() + ".asyncSupport";
     /**
-     * Tell Atmosphere to use {@link javax.servlet.http.HttpSession}. Default is true.
+     * Tell Atmosphere to use {@link javax.servlet.http.HttpSession}. Default is false.
      */
     String PROPERTY_SESSION_SUPPORT = ApplicationConfig.class.getPackage().getName() + ".sessionSupport";
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -34,7 +34,7 @@ public class AtmosphereConfig {
 
     private final List<AtmosphereHandlerConfig> atmosphereHandlerConfig = new ArrayList<AtmosphereHandlerConfig>();
 
-    private boolean supportSession = true;
+    private boolean supportSession = false;
     private String dispatcherName = DEFAULT_NAMED_DISPATCHER;
     private final AtmosphereFramework framework;
     private final Map<String, Object> properties = new HashMap<String, Object>();

File: extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java
Patch:
@@ -88,7 +88,7 @@ protected int findFreePort() throws IOException {
 
     @BeforeMethod(alwaysRun = true)
     public void setUpGlobal() throws Exception {
-        port = 8080;
+        port = findFreePort();
         urlTarget = getUrlTarget(port);
         atmoServlet = new AtmosphereServlet();
         atmoServlet.framework().addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());

File: extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java
Patch:
@@ -88,7 +88,7 @@ protected int findFreePort() throws IOException {
 
     @BeforeMethod(alwaysRun = true)
     public void setUpGlobal() throws Exception {
-        port = findFreePort();
+        port = 8080;
         urlTarget = getUrlTarget(port);
         atmoServlet = new AtmosphereServlet();
         atmoServlet.framework().addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -66,7 +66,7 @@ public interface ApplicationConfig {
      */
     String PROPERTY_COMET_SUPPORT = ApplicationConfig.class.getPackage().getName() + ".asyncSupport";
     /**
-     * Tell Atmosphere to use {@link javax.servlet.http.HttpSession}. Default is false.
+     * Tell Atmosphere to use {@link javax.servlet.http.HttpSession}. Default is true.
      */
     String PROPERTY_SESSION_SUPPORT = ApplicationConfig.class.getPackage().getName() + ".sessionSupport";
     /**

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -265,7 +265,6 @@ public ContainerResponse filter(final ContainerRequest request, final ContainerR
                 return response;
             }
 
-            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
             if (action == Action.NONE) return response;
 
             // Check first if something was defined in web.xml
@@ -790,6 +789,7 @@ void executeSuspend(AtmosphereResource r,
                             ContainerResponse response,
                             boolean flushEntity) {
 
+            servletReq.setAttribute(FrameworkConfig.CONTAINER_RESPONSE, response);
             boolean sessionSupported = (Boolean) servletReq.getAttribute(FrameworkConfig.SUPPORT_SESSION);
             configureFilter(r.getBroadcaster());
             if (sessionSupported) {

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceInjector.java
Patch:
@@ -57,6 +57,7 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
+import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 
 import javax.ws.rs.core.Context;
@@ -106,7 +107,7 @@ public Injectable<AtmosphereResource> getInjectable(ComponentContext ic, Context
             return new Injectable<AtmosphereResource>() {
                 @Override
                 public AtmosphereResource getValue() {
-                    return getAtmosphereResource(AtmosphereResource.class, false);
+                    return getAtmosphereResource(AtmosphereResourceImpl.class, false);
                 }
             };
         }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceInjector.java
Patch:
@@ -57,7 +57,6 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
-import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 
 import javax.ws.rs.core.Context;
@@ -127,8 +126,8 @@ public Injectable<AtmosphereResource> getInjectable(ComponentContext ic, Context
             return new Injectable<AtmosphereResource>() {
                 @Override
                 public AtmosphereResource getValue() {
-                    return (AtmosphereResourceImpl) Proxy.newProxyInstance(this.getClass().getClassLoader(),
-                            new Class[]{AtmosphereResourceImpl.class}, new InvocationHandler() {
+                    return (AtmosphereResource) Proxy.newProxyInstance(this.getClass().getClassLoader(),
+                            new Class[]{AtmosphereResource.class}, new InvocationHandler() {
                         @Override
                         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                             return method.invoke(getAtmosphereResource(AtmosphereResource.class, false), args);

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceInjector.java
Patch:
@@ -57,6 +57,7 @@
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
+import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 
 import javax.ws.rs.core.Context;
@@ -126,8 +127,8 @@ public Injectable<AtmosphereResource> getInjectable(ComponentContext ic, Context
             return new Injectable<AtmosphereResource>() {
                 @Override
                 public AtmosphereResource getValue() {
-                    return (AtmosphereResource) Proxy.newProxyInstance(this.getClass().getClassLoader(),
-                            new Class[]{AtmosphereResource.class}, new InvocationHandler() {
+                    return (AtmosphereResourceImpl) Proxy.newProxyInstance(this.getClass().getClassLoader(),
+                            new Class[]{AtmosphereResourceImpl.class}, new InvocationHandler() {
                         @Override
                         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                             return method.invoke(getAtmosphereResource(AtmosphereResource.class, false), args);

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -60,7 +60,7 @@
  */
 public abstract class BroadcasterFactory {
 
-    protected static BroadcasterFactory factory = new DefaultBroadcasterFactory();
+    protected static BroadcasterFactory factory;
     protected static AtmosphereConfig config;
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -60,7 +60,7 @@
  */
 public abstract class BroadcasterFactory {
 
-    protected static BroadcasterFactory factory;
+    protected static BroadcasterFactory factory = new DefaultBroadcasterFactory();
     protected static AtmosphereConfig config;
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -60,7 +60,7 @@
  */
 public abstract class BroadcasterFactory {
 
-    protected static BroadcasterFactory factory;
+    protected static BroadcasterFactory factory = new DefaultBroadcasterFactory();
     protected static AtmosphereConfig config;
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -59,7 +59,7 @@ public class SimpleHttpProtocol implements WebSocketProtocol, Serializable {
     public void configure(AtmosphereConfig config) {
         String contentType = config.getInitParameter(ApplicationConfig.WEBSOCKET_CONTENT_TYPE);
         if (contentType == null) {
-            contentType = "text/html";
+            contentType = "text/plain";
         }
         this.contentType = contentType;
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -82,7 +82,7 @@ public final static void broadcast(final AtmosphereResource r, final AtmosphereR
                     if (m == null || m.toString().equalsIgnoreCase("application/octet-stream")) {
                         m = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.SSE_CONTENT_TYPE);
                         if (m == null) {
-                            m = "text/plain";
+                            m = ApplicationConfig.DEFAULT_CONTENT_TYPE;
                         }
                     }
                 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -223,7 +223,7 @@ protected Filter(Action action,
             this.filters = filters;
             this.topic = topic;
             this.writeEntity = writeEntity;
-            this.defaultContentType = contentType.equals("") ? null : contentType;
+            this.defaultContentType = contentType != null ? (contentType.equals("") ? null : contentType) : null;
         }
 
         public ContainerRequestFilter getRequestFilter() {

File: modules/annotations/src/main/java/org/atmosphere/annotation/Suspend.java
Patch:
@@ -134,5 +134,5 @@ enum SCOPE {
      * If the @Produces annotation is missing, this value will be used instead.
      * @return the default content-type used if the @Produces annotation is missing.
      */
-    public String contentType() default "text/plain";
+    public String contentType() default "";
 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -223,7 +223,7 @@ protected Filter(Action action,
             this.filters = filters;
             this.topic = topic;
             this.writeEntity = writeEntity;
-            this.defaultContentType = contentType;
+            this.defaultContentType = contentType.equals("") ? null : contentType;
         }
 
         public ContainerRequestFilter getRequestFilter() {

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/impl/WebSocketCometTransport.java
Patch:
@@ -72,6 +72,7 @@ public void disconnect() {
         if (socket != null) {
             super.disconnect();
             socket.close();
+            socket.clearListener();
         }
         socket = null;
     }

File: modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java
Patch:
@@ -71,7 +71,7 @@ public AsyncIOWriter writeError(int errorCode, String message) throws IOExceptio
 
                     @Override
                     public AsyncIOWriter write(String data) throws IOException {
-                        response.write(data + END);
+                        response.write(data + end);
                         return this;
                     }
 
@@ -103,7 +103,7 @@ public AsyncIOWriter flush() throws IOException {
 
                  @Override
                  public String filter(AtmosphereResponse r, String message) {
-                     return message + END;
+                     return message + end;
                  }
 
                  @Override
@@ -136,6 +136,6 @@ public void postInspect(AtmosphereResource r) {
 
     @Override
     public String toString() {
-        return END + " End Message Interceptor";
+        return end + " End Message Interceptor";
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -483,8 +483,7 @@ public AtmosphereRequest method(String m) {
     }
 
     public AtmosphereRequest body(String body) {
-        byte[] b = body.getBytes();
-        configureStream(b, 0, b.length, "ISO-8859-1");
+        br = new BufferedReader(new StringReader(body));
         return this;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java
Patch:
@@ -71,7 +71,7 @@ public AsyncIOWriter writeError(int errorCode, String message) throws IOExceptio
 
                     @Override
                     public AsyncIOWriter write(String data) throws IOException {
-                        response.write(data + "<||>");
+                        response.write(data + END);
                         return this;
                     }
 
@@ -103,7 +103,7 @@ public AsyncIOWriter flush() throws IOException {
 
                  @Override
                  public String filter(AtmosphereResponse r, String message) {
-                     return message + "<||>";
+                     return message + END;
                  }
 
                  @Override
@@ -136,6 +136,6 @@ public void postInspect(AtmosphereResource r) {
 
     @Override
     public String toString() {
-        return "<||> End Message Interceptor";
+        return END + " End Message Interceptor";
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -218,10 +218,7 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
             // TODO: cast is dangerous
             resource = (AtmosphereResourceImpl)
                     AtmosphereResourceFactory.create(config, handlerWrapper.broadcaster, res, this, handlerWrapper.atmosphereHandler);
-        } else {
-            resource.setBroadcaster(handlerWrapper.broadcaster).atmosphereHandler(handlerWrapper.atmosphereHandler);
         }
-
         req.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, resource);
         req.setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, handlerWrapper.atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -815,8 +815,7 @@ public void initAtmosphereHandler(ServletConfig sc) throws ServletException {
             addAtmosphereHandler("/*", new AbstractReflectorAtmosphereHandler() {
                 @Override
                 public void onRequest(AtmosphereResource r) throws IOException {
-                    logger.error("HTTP Protocol not supported. Is your application WebSocket enabled only?");
-                    r.getResponse().sendError(500);
+                    logger.debug("No AtmosphereHandler defined.");
                 }
 
                 @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -814,7 +814,9 @@ public void initAtmosphereHandler(ServletConfig sc) throws ServletException {
             logger.debug("Adding a void AtmosphereHandler mapped to /* to allow WebSocket application only");
             addAtmosphereHandler("/*", new AbstractReflectorAtmosphereHandler() {
                 @Override
-                public void onRequest(AtmosphereResource httpServletRequestHttpServletResponseAtmosphereResource) throws IOException {
+                public void onRequest(AtmosphereResource r) throws IOException {
+                    logger.error("HTTP Protocol not supported. Is your application WebSocket enabled only?");
+                    r.getResponse().sendError(500);
                 }
 
                 @Override

File: modules/cpr/src/test/java/org/atmosphere/cpr/SessionTest.java
Patch:
@@ -31,7 +31,8 @@ public class SessionTest {
     public void basicSessionTest() throws IOException, ServletException, ExecutionException, InterruptedException {
         AtmosphereRequest request = new AtmosphereRequest.Builder().build();
 
-        assertNull(request.getSession());
+        assertNull(request.getSession(false));
+        assertNotNull(request.getSession());
         assertNotNull(request.getSession(true));
         assertNotNull(request.getSession());
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -583,7 +583,7 @@ public Map<String, Object> attributes() {
      */
     @Override
     public HttpSession getSession() {
-        return getSession(false);
+        return getSession(true);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -114,7 +114,7 @@ public void onStateChange(AtmosphereResourceEvent event)
             if (message instanceof List) {
                 for (String s : (List<String>) message) {
                     if (isUsingStream) {
-                        event.getResource().getResponse().getOutputStream().write(s.getBytes());
+                        event.getResource().getResponse().getOutputStream().write(s.getBytes("UTF-8"));
                         event.getResource().getResponse().getOutputStream().flush();
                     } else {
                         event.getResource().getResponse().getWriter().write(s);
@@ -123,7 +123,7 @@ public void onStateChange(AtmosphereResourceEvent event)
                 }
             } else {
                 if (isUsingStream) {
-                    event.getResource().getResponse().getOutputStream().write(message.toString().getBytes());
+                    event.getResource().getResponse().getOutputStream().write(message.toString().getBytes("UTF-8"));
                     event.getResource().getResponse().getOutputStream().flush();
                 } else {
                     event.getResource().getResponse().getWriter().write(message.toString());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -244,8 +244,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
             throw t;
         }
 
-        postInterceptors(config.framework().interceptors(), resource);
         postInterceptors(handlerWrapper.interceptors, resource);
+        postInterceptors(config.framework().interceptors(), resource);
 
         if (trackActiveRequest && resource.getAtmosphereResourceEvent().isSuspended() && req.getAttribute(FrameworkConfig.CANCEL_SUSPEND_OPERATION) == null) {
             req.setAttribute(MAX_INACTIVE, System.currentTimeMillis());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -952,7 +952,7 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
 
                 List<AtmosphereInterceptor> l = new ArrayList<AtmosphereInterceptor>();
                 if (atmoHandler.getAtmosphereInterceptorClasses() != null) {
-                    for (String a : atmoHandler.getBroadcastFilterClasses()) {
+                    for (String a : atmoHandler.getAtmosphereInterceptorClasses()) {
                         try {
                             AtmosphereInterceptor ai = (AtmosphereInterceptor) c.loadClass(a).newInstance();
                             ai.configure(config);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/BroadcastOnPostAtmosphereInterceptor.java
Patch:
@@ -55,7 +55,7 @@ public void postInspect(AtmosphereResource r) {
                 InputStream inputStream = r.getRequest().getInputStream();
                 if (inputStream != null) {
                     bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
-                    char[] charBuffer = new char[128];
+                    char[] charBuffer = new char[8192];
                     int bytesRead = -1;
                     while ((bytesRead = bufferedReader.read(charBuffer)) > 0) {
                         stringBuilder.append(charBuffer, 0, bytesRead);

File: modules/cpr/src/main/java/org/atmosphere/client/MessageLengthInterceptor.java
Patch:
@@ -29,7 +29,7 @@
 import java.io.IOException;
 
 /**
- * An {@link AtmosphereInterceptor} that add a special String "<||>" at the end of a message, allowing the
+ * An {@link AtmosphereInterceptor} that add a special String "|" at the end of a message, allowing the
  * atmosphere.js to detect if one or several messages where aggregated in one write operations.
  *
  * The special String is configurable using {@link ApplicationConfig#MESSAGE_DELIMITER}

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -147,7 +147,7 @@ protected synchronized void configExecutors() {
             }
 
             if (isExecutorShared && numberOfMessageProcessingThread == 1) {
-                logger.warn("Not enought numberOfMessageProcessingThread for a shareable thread pool {}, " +
+                logger.warn("Not enough numberOfMessageProcessingThread for a shareable thread pool {}, " +
                         "Setting it to a newCachedThreadPool", numberOfMessageProcessingThread);
                 numberOfMessageProcessingThread = -1;
             }
@@ -159,7 +159,7 @@ protected synchronized void configExecutors() {
             }
 
             if (isAsyncExecutorShared && numberOfAsyncThread == 1) {
-                logger.warn("Not enought numberOfAsyncThread for a shareable thread pool {}, " +
+                logger.warn("Not enough numberOfAsyncThread for a shareable thread pool {}, " +
                         "Setting it to a newCachedThreadPool", numberOfAsyncThread);
                 numberOfAsyncThread = -1;
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -588,7 +588,7 @@ protected void push(Entry entry, boolean rec) {
             entry.message = finalMsg;
 
             if (resources.isEmpty()) {
-                logger.debug("Broadcaster {} doesn't have any associated resource", getID());
+                logger.debug("Broadcaster {} doesn't have any associated resource. Message will be cached in the configured BroadcasterCache", getID());
 
                 AtmosphereResource r = null;
                 if (entry.multipleAtmoResources != null && AtmosphereResource.class.isAssignableFrom(entry.multipleAtmoResources.getClass())) {

File: extras/cometd/src/main/java/org/atmosphere/cometd/JettyAsyncSupport.java
Patch:
@@ -30,12 +30,12 @@
 import javax.servlet.ServletException;
 import java.io.IOException;
 
-public class CometdAsyncSupport extends Jetty7CometSupport {
+public class JettyAsyncSupport extends Jetty7CometSupport {
 
-    private static final Logger logger = LoggerFactory.getLogger(CometdAsyncSupport.class);
+    private static final Logger logger = LoggerFactory.getLogger(JettyAsyncSupport.class);
     private final WebSocketFactory webSocketFactory;
 
-    public CometdAsyncSupport(AtmosphereConfig config) {
+    public JettyAsyncSupport(AtmosphereConfig config) {
         super(config);
 
         WebSocketFactory wsf;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -402,9 +402,9 @@ public ServletContext getServletContext() {
                 }
 
                 public String getInitParameter(String name) {
-                    String param = sc.getInitParameter(name);
+                    String param = initParams.get(name);
                     if (param == null) {
-                        return initParams.get(name);
+                        return sc.getInitParameter(name);
                     }
                     return param;
                 }
@@ -414,7 +414,7 @@ public Enumeration<String> getInitParameterNames() {
                     while (en.hasMoreElements()) {
                         String name = (String) en.nextElement();
                         if (!initParams.containsKey(name)) {
-                            initParams.put(name, name);
+                            initParams.put(name, sc.getInitParameter(name));
                         }
                     }
                     return Collections.enumeration(initParams.keySet());

File: extras/socketio/src/main/java/org/atmosphere/socketio/transport/SocketIOPacketImpl.java
Patch:
@@ -45,7 +45,7 @@ public SocketIOPacketImpl(PacketType frameType, String data) {
     }
 
     public SocketIOPacketImpl(PacketType frameType, String data, boolean padding) {
-        this(frameType, null, null, data, false);
+        this(frameType, null, null, data, padding);
     }
 
     public SocketIOPacketImpl(PacketType frameType, String id, String endpoint, String data) {

File: samples/socketio-chat/src/main/java/org/atmosphere/samples/chat/SocketIOChatAtmosphereHandler.java
Patch:
@@ -35,7 +35,6 @@ public class SocketIOChatAtmosphereHandler implements AtmosphereHandler {
 
     @Override
     public void onRequest(AtmosphereResource r) throws IOException {
-
         r.getBroadcaster().broadcast(r.getRequest().getReader().readLine());
     }
 

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/GwtAtmosphereResourceImpl.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.google.gwt.rpc.server.ClientOracle;
 import com.google.gwt.user.server.rpc.SerializationPolicy;
-import org.atmosphere.cpr.AtmosphereEventLifecycle;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -70,7 +70,6 @@
 import org.atmosphere.annotation.Suspend;
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereEventLifecycle;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereResourceEventListener;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -488,10 +488,10 @@ protected void configureAtmosphereInterceptor(ServletConfig sc) {
             }
         }
 
-        // Add SSE support
-        interceptors.addLast(new SSEAtmosphereInterceptor());
         // ADD JSONP support
-        interceptors.addLast(new JSONPAtmosphereInterceptor());
+        interceptors.addFirst(new JSONPAtmosphereInterceptor());
+        // Add SSE support
+        interceptors.addFirst(new SSEAtmosphereInterceptor());
         logger.info("Installed AtmosphereInterceptor {}", interceptors);
     }
 

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereListener.java
Patch:
@@ -30,7 +30,6 @@
  */
 package org.atmosphere.gwt.client;
 
-import java.io.Serializable;
 import java.util.List;
 
 /**
@@ -83,5 +82,5 @@ public interface AtmosphereListener {
      *
      * @param messages
      */
-    public void onMessage(List messages);
+    public void onMessage(List<?> messages);
 }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
Patch:
@@ -108,7 +108,7 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
         if (!Utils.webSocketEnabled(request)) {
             return super.service(request, response);
         } else {
-            return suspended(request, response);;
+            return suspended(request, response);
         }
     }
 

File: modules/annotations/src/main/java/org/atmosphere/annotation/Asynchronous.java
Patch:
@@ -26,7 +26,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Suspend the response and use the Broadcaster associated with {@link org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_TRACKING_ID}
+ * Suspend the response and use the Broadcaster associated with {@link org.atmosphere.cpr.HeaderConfig#X_ATMOSPHERE_TRACKING_ID}
  * to publish the result.
  *
  * @author Jeanfrancois Arcand

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -66,7 +66,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public interface AtmosphereResource extends Trackable, AtmosphereEventLifecycle {
+public interface AtmosphereResource extends AtmosphereEventLifecycle {
 
     enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, SSE, AJAX}
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java
Patch:
@@ -85,7 +85,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public interface Broadcaster extends Trackable {
+public interface Broadcaster {
 
     enum SCOPE {
         REQUEST, APPLICATION, VM

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceConfigurator.java
Patch:
@@ -70,7 +70,6 @@ public class AtmosphereResourceConfigurator implements ResourceConfigurator {
     public void configure(ResourceConfig config) {
         Collections.addAll(config.getClasses(),
                 AtmosphereProviders.BroadcasterProvider.class,
-                AtmosphereProviders.TrackableResourceProvider.class,
                 BroadcasterFactoryInjector.PerRequest.class,
                 BroadcasterFactoryInjector.Singleton.class,
                 BroadcasterInjector.PerRequest.class,

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -72,8 +72,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
                 case LONG_POLLING:
                     event.getResource().resume();
                     break;
-                case WEBSOCKET :
-                case STREAMING:
+                default:
                     res.getWriter().flush();
                     break;
             }

File: modules/acceptance-tests/src/test/java/org/atmosphere/tests/http/BlockingIOCometSupportTest.java
Patch:
@@ -61,7 +61,6 @@
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 
-
 public class BlockingIOCometSupportTest extends BaseTest {
     protected Server server;
     protected Context root;
@@ -99,6 +98,4 @@ public void unsetAtmosphereHandler() throws Exception {
         server.stop();
         server = null;
     }
-
-
 }

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcastFilterTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() throws Exception {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                mock(AtmosphereResponse.class),
+                AtmosphereResponse.create(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 
@@ -94,7 +94,7 @@ public Enumeration<String> getInitParameterNames() {
         ar = new AtmosphereResourceImpl(config,
                 broadcaster,
                 mock(AtmosphereRequest.class),
-                mock(AtmosphereResponse.class),
+                AtmosphereResponse.create(),
                 mock(BlockingIOCometSupport.class),
                 atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -184,8 +184,8 @@ Action action(AtmosphereRequest req, AtmosphereResponse res) throws IOException,
         }
 
         if (config.handlers().isEmpty()) {
-            logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
-            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it insides META-INF/atmosphere.xml");
+            logger.error("No AtmosphereHandler found. Make sure you define it inside web/atmosphere.xml or annotate using @AtmosphereHandlerService");
+            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside web/atmosphere.xml or annotate using @AtmosphereHandlerService");
         }
 
         if (supportSession()) {

File: extras/jaxrs2/src/test/java/org/atmosphere/tests/jaxrs2/Jaxrs2Test.java
Patch:
@@ -55,7 +55,7 @@ public void configureCometSupport() {
     }
 
     public void startServer() throws Exception {
-        server = new Server(port);
+        server = new Server();
         root = new Context(server, "/", Context.SESSIONS);
         root.addServlet(new ServletHolder(atmoServlet), ROOT);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1148,7 +1148,9 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
                 throw ex;
             }
         } finally {
-            notify(a.type(), req, res);
+            if (a != null) {
+                notify(a.type(), req, res);
+            }
 
             if (req != null && a != null && a.type() != Action.TYPE.SUSPEND) {
                 req.destroy();

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -100,10 +100,8 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         try {
             action = suspended(req, res);
             if (action.type() == Action.TYPE.SUSPEND) {
-                logger.debug("Suspending response: {}", res);
                 suspend(action, req, res);
             } else if (action.type() == Action.TYPE.RESUME) {
-                logger.debug("Resuming response: {}", res);
                 CountDownLatch latch = (CountDownLatch) req.getAttribute(LATCH);
 
                 if (latch == null || req.getAttribute(AtmosphereResourceImpl.PRE_SUSPEND) == null) {
@@ -115,7 +113,6 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
 
                 Action nextAction = resumed(req, res);
                 if (nextAction.type() == Action.TYPE.SUSPEND) {
-                    logger.debug("Suspending after resuming response: {}", res);
                     suspend(action, req, res);
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java
Patch:
@@ -118,10 +118,8 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         CometContext ctx = CometEngine.getEngine().getCometContext(atmosphereCtx);
         Action action = suspended(req, res);
         if (action.type() == Action.TYPE.SUSPEND) {
-            logger.debug("Suspending response: {}", res);
             suspend(ctx, action, req, res);
         } else if (action.type() == Action.TYPE.RESUME) {
-            logger.debug("Resuming response: {}", res);
             resume(req, ctx);
         }
         return action;

File: modules/cpr/src/main/java/org/atmosphere/container/GrizzlyCometSupport.java
Patch:
@@ -118,11 +118,8 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         CometContext ctx = CometEngine.getEngine().getCometContext(atmosphereCtx);
         Action action = suspended(req, res);
         if (action.type() == Action.TYPE.SUSPEND) {
-            logger.debug("Suspending response: {}", res);
             suspend(ctx, action, req, res);
         } else if (action.type() == Action.TYPE.RESUME) {
-            logger.debug("Resuming response: {}", res);
-
             resume(req, ctx);
         }
         return action;

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -56,9 +56,7 @@ public final static Action doService(AsynchronousProcessor cometSupport,
 
             Action action = cometSupport.suspended(req, res);
             if (action.type() == Action.TYPE.SUSPEND) {
-                logger.debug("Suspending response: {}", res);
             } else if (action.type() == Action.TYPE.RESUME) {
-                logger.debug("Resume response: {}", res);
                 req.setAttribute(WebSocket.WEBSOCKET_RESUME, true);
             }
 

File: modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java
Patch:
@@ -57,7 +57,6 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
         Action action = null;
         action = suspended(req, res);
         if (action.type() == Action.TYPE.SUSPEND) {
-            logger.debug("Suspending response: {}", res);
             req.setAttribute(SUSPEND, action);
             req.setAttribute(ASYNCHRONOUS_HOOK, new AsynchronousProcessorHook( (AtmosphereResourceImpl)req.getAttribute(ATMOSPHERE_RESOURCE)));
         } else if (action.type() == Action.TYPE.RESUME) {
@@ -68,11 +67,9 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res)
             if (resumeOnBroadcast != null && resumeOnBroadcast) {
                 return action;
             }
-            logger.debug("Resuming response: {}", res);
 
             Action nextAction = resumed(req, res);
             if (nextAction.type() == Action.TYPE.SUSPEND) {
-                logger.debug("Suspending after resuming response: {}", res);
                 req.setAttribute(SUSPEND, action);
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -100,10 +100,8 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
 
         Action action = suspended(request, response);
         if (action.type() == Action.TYPE.SUSPEND) {
-            logger.debug("Suspending response: {}", response);
             suspend(action, request, response);
         } else if (action.type() == Action.TYPE.RESUME) {
-            logger.debug("Resuming response: {}", response);
 
             if (supportSession()) {
                 AsyncContext asyncContext =
@@ -116,7 +114,6 @@ public Action service(AtmosphereRequest request, AtmosphereResponse response)
 
             Action nextAction = resumed(request, response);
             if (nextAction.type() == Action.TYPE.SUSPEND) {
-                logger.debug("Suspending after resuming response: {}", response);
                 suspend(action, request, response);
             }
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -337,7 +337,6 @@ protected AtmosphereHandlerWrapper map(AtmosphereRequest req) throws ServletExce
     public Action resumed(AtmosphereRequest request, AtmosphereResponse response)
             throws IOException, ServletException {
         SessionTimeoutSupport.restoreTimeout(request);
-
         return action(request, response);
     }
 
@@ -358,6 +357,7 @@ public Action timedout(AtmosphereRequest request, AtmosphereResponse response)
             throws IOException, ServletException {
 
         AtmosphereResourceImpl r = null;
+
         try {
             SessionTimeoutSupport.restoreTimeout(request);
 
@@ -398,6 +398,7 @@ public Action timedout(AtmosphereRequest request, AtmosphereResponse response)
         } catch (Throwable t) {
             logger.error("failed to timeout resource {}", r, t);
         } finally {
+            config.framework().notify(Action.TYPE.TIMEOUT, request, response);
             try {
                 if (r != null) {
                     r.notifyListeners();
@@ -523,6 +524,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                 // Something wrong happenned, ignore the exception
                 logger.debug("failed to cancel resource: " + r, ex);
             } finally {
+                config.framework().notify(Action.TYPE.CANCELLED, req, res);
                 try {
                     if (r != null) {
                         r.notifyListeners();

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7CometSupport.java
Patch:
@@ -68,6 +68,7 @@ public Tomcat7CometSupport(AtmosphereConfig config) {
      * @throws java.io.IOException
      * @throws javax.servlet.ServletException
      */
+    @Override
     public Action service(AtmosphereRequest req, AtmosphereResponse res)
             throws IOException, ServletException {
 

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereInterceptorService.java
Patch:
@@ -22,7 +22,8 @@
 import java.lang.annotation.Target;
 
 /**
- * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.Broadcaster} class to use by default.
+ * An annotation for telling Atmosphere which {@link org.atmosphere.cpr.AtmosphereInterceptor} class to use by default.
+ *
  * @author Jeanfrancois Arcand
  */
 @Target({ElementType.TYPE})

File: modules/cpr/src/main/java/org/atmosphere/config/service/WebSocketProtocolService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/AtmosphereHandlerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/BroadcasterCacheService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/BroadcasterFilterService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/BroadcasterService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/MeteorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/WebSocketHandlerService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/config/service/WebSocketResponseFilterService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAnnotationProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Sebastien Dionne
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.samples.chat;
 
+import org.atmosphere.config.service.AtmosphereHandlerService;
 import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
@@ -29,6 +30,7 @@
  *
  * @author Jeanfrancois Arcand
  */
+@AtmosphereHandlerService(path="/chat")
 public class ChatAtmosphereHandler implements AtmosphereHandler {
 
     @Override

File: samples/jquery-atmospherehandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/AtmosphereHandlerPubSub.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.samples.pubsub;
 
+import org.atmosphere.config.service.AtmosphereHandlerService;
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
@@ -36,6 +37,7 @@
  *
  * @author Jeanfrancois Arcand
  */
+@AtmosphereHandlerService
 public class AtmosphereHandlerPubSub extends AbstractReflectorAtmosphereHandler {
 
     @Override

File: samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.samples.pubsub;
 
+import org.atmosphere.config.service.MeteorService;
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
@@ -33,6 +34,7 @@
  *
  * @author Jeanfrancois Arcand
  */
+@MeteorService
 public class MeteorPubSub extends HttpServlet {
 
     @Override

File: samples/jquery-websockethandler-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.samples.pubsub;
 
+import org.atmosphere.config.service.WebSocketHandlerService;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
@@ -33,6 +34,7 @@
  *
  * @author Jeanfrancois Arcand
  */
+@WebSocketHandlerService
 public class WebSocketPubSub extends WebSocketHandler {
 
     private static final Logger logger = LoggerFactory.getLogger(WebSocketPubSub.class);

File: samples/spring-websocket/src/main/java/org/atmosphere/samples/pubsub/config/protocol/DelegatingWebSocketProtocol.java
Patch:
@@ -18,6 +18,7 @@
  */
 package org.atmosphere.samples.pubsub.config.protocol;
 
+import org.atmosphere.config.service.WebSocketProtocolService;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
@@ -37,6 +38,7 @@
 import java.io.IOException;
 import java.util.List;
 
+@WebSocketProtocolService
 public class DelegatingWebSocketProtocol implements WebSocketProtocol {
 
     public static final Logger LOG = LoggerFactory.getLogger(DelegatingWebSocketProtocol.class);

File: samples/sse-chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.samples.chat;
 
+import org.atmosphere.config.service.AtmosphereHandlerService;
 import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
@@ -29,6 +30,7 @@
  *
  * @author Jeanfrancois Arcand
  */
+@AtmosphereHandlerService(path = "/chat")
 public class ChatAtmosphereHandler implements AtmosphereHandler {
 
     @Override

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/impl/WebSocketCometTransport.java
Patch:
@@ -177,9 +177,9 @@ public void onClose(WebSocket socket) {
         }
 
         @Override
-        public void onError(WebSocket socket) {
+        public void onError(WebSocket socket, String message) {
             connected = false;
-            listener.onError(new IllegalStateException("Websocket Connection Error"), false);
+            listener.onError(new IllegalStateException("Websocket Error: " + message), false);
         }
 
         @Override

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/impl/WebSocketListener.java
Patch:
@@ -24,7 +24,7 @@ public interface WebSocketListener {
 
     void onClose(WebSocket socket);
 
-    void onError(WebSocket socket);
+    void onError(WebSocket socket, String message);
 
     void onMessage(WebSocket socket, String message);
 

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -137,7 +137,7 @@ private void suspend(Action action, AtmosphereRequest req, AtmosphereResponse re
             throws IOException, ServletException {
 
         if (!req.isAsyncStarted()) {
-            AsyncContext asyncContext = req.startAsync();
+            AsyncContext asyncContext = req.startAsync(req, res);
             asyncContext.addListener(new CometListener(this));
             // Do nothing except setting the times out
             if (action.timeout() != -1) {

File: extras/jetty-websocketdraft8/src/main/java/org/atmosphere/jetty/JettyWebSocketDraft08Servlet.java
Patch:
@@ -15,6 +15,7 @@
 */
 package org.atmosphere.jetty;
 
+import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereFramework;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResponse;
@@ -184,6 +185,7 @@ public void doPost(HttpServletRequest req, HttpServletResponse res)
     public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
         logger.debug("WebSocket upgrade requested");
         request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
-        return new JettyWebSocketDraft08Handler(AtmosphereRequest.loadInMemory(request, false), framework, framework.getWebSocketProtocol());
+        return new JettyWebSocketDraft08Handler(AtmosphereRequest.cloneRequest(request, false,
+                framework().getAtmosphereConfig().isSupportSession()), framework, framework.getWebSocketProtocol());
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -76,7 +76,7 @@ public boolean checkOrigin(HttpServletRequest request, String origin) {
 
             public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
                 logger.trace("WebSocket-connect request {} with protocol {}", request.getRequestURI(), protocol);
-                return new JettyWebSocketHandler(AtmosphereRequest.loadInMemory(request, false), config.framework(), config.framework().getWebSocketProtocol());
+                return new JettyWebSocketHandler(AtmosphereRequest.cloneRequest(request, false, config.isSupportSession()), config.framework(), config.framework().getWebSocketProtocol());
             }
         });
 

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatWebSocketUtil.java
Patch:
@@ -110,7 +110,7 @@ public static Action doService(AtmosphereRequest req, AtmosphereResponse res,
                 hsr = (HttpServletRequest) ((HttpServletRequestWrapper) hsr).getRequest();
 
             RequestFacade facade = (RequestFacade) hsr;
-            StreamInbound inbound = new TomcatWebSocketHandler(AtmosphereRequest.loadInMemory(req, true),
+            StreamInbound inbound = new TomcatWebSocketHandler(AtmosphereRequest.cloneRequest(req, true, config.isSupportSession()),
                     config.framework(), config.framework().getWebSocketProtocol());
             facade.doUpgrade(inbound);
             return new Action(Action.TYPE.CREATED);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1448,7 +1448,7 @@ public final static AtmosphereRequest wrap(HttpServletRequest request) {
      * @param request {@link HttpServletRequest}
      * @return an {@link AtmosphereRequest}
      */
-    public final static AtmosphereRequest loadInMemory(HttpServletRequest request, boolean loadInMemory) {
+    public final static AtmosphereRequest cloneRequest(HttpServletRequest request, boolean loadInMemory, boolean copySession) {
         Builder b;
         HttpServletRequest r;
         boolean isWrapped = false;
@@ -1470,7 +1470,7 @@ public final static AtmosphereRequest loadInMemory(HttpServletRequest request, b
                 .serverName(request.getServerName())
                 .serverPort(request.getServerPort())
                 .destroyable(false)
-                .session(new FakeHttpSession(request.getSession(true)));
+                .session(copySession? new FakeHttpSession(request.getSession(true)) : null);
 
         if (loadInMemory) {
             r = new NoOpsRequest();

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -137,7 +137,7 @@ private void suspend(Action action, AtmosphereRequest req, AtmosphereResponse re
             throws IOException, ServletException {
 
         if (!req.isAsyncStarted()) {
-            AsyncContext asyncContext = req.startAsync();
+            AsyncContext asyncContext = req.startAsync(req, res);
             asyncContext.addListener(new CometListener(this));
             // Do nothing except setting the times out
             if (action.timeout() != -1) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -110,6 +110,7 @@ public final void dispatch(final AtmosphereRequest request) throws IOException {
         webSocketProtocol.onOpen(webSocket);
 
         dispatch(request, wsr);
+        request.removeAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE);
 
         if (webSocket.resource() != null) {
             final AsynchronousProcessor.AsynchronousProcessorHook hook =

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcastFilter.java
Patch:
@@ -104,11 +104,11 @@ void setOriginalMsg(Object originalMsg) {
     }
 
     /**
-     * Transform or Filter a message. Return null to tell the associated
+     * Transform or Filter a message. Return BroadcastAction(ACTION.ABORT, message)
      * {@link Broadcaster} to discard the message, e.g to not broadcast it.
      *
      * @param originalMessage The original message which was {@link Broadcaster#broadcast(Object)};
-     * @param message         Object a message
+     * @param message         The transformed or not message.
      * @return a transformed message.
      */
     BroadcastAction filter(Object originalMessage, Object message);

File: extras/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/AtmosphereClient.java
Patch:
@@ -116,7 +116,7 @@ public AtmosphereClient(String url, AtmosphereListener listener) {
     }
 
     public AtmosphereClient(String url, AtmosphereGWTSerializer serializer, AtmosphereListener listener) {
-        this(url, serializer, listener, false);
+        this(url, serializer, listener, true);
     }
 
     public AtmosphereClient(String url, AtmosphereGWTSerializer serializer, AtmosphereListener listener, boolean webSocketsEnabled) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -314,11 +314,11 @@ public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandle
     public AtmosphereFramework removeAtmosphereHandler(String mapping) {
 
         if (mapping.endsWith("/")) {
-            mapping += "[a-zA-Z0-9-&=;\\?]+";
+            mapping += "[a-zA-Z0-9-&.=;\\?]+";
         }
 
         if (mapping.contains("*")) {
-            mapping = mapping.replace("*", "[a-zA-Z0-9-&=;\\?]+");
+            mapping = mapping.replace("*", "[a-zA-Z0-9-&.=;\\?]+");
         }
 
         atmosphereHandlers.remove(mapping);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -255,11 +255,11 @@ public AtmosphereFramework addAtmosphereHandler(String mapping, AtmosphereHandle
     private AtmosphereFramework addMapping(String path, AtmosphereHandlerWrapper w) {
         // We are using JAXRS mapping algorithm.
         if (path.contains("*")) {
-            path = path.replace("*", "[a-zA-Z0-9-&=;\\?]+");
+            path = path.replace("*", "[a-zA-Z0-9-&.=;\\?]+");
         }
 
         if (path.endsWith("/")) {
-            path = path + "[a-zA-Z0-9-&=;\\?]+";
+            path = path + "[a-zA-Z0-9-&.=;\\?]+";
         }
 
         atmosphereHandlers.put(path, w);

File: modules/cpr/src/main/java/org/atmosphere/interceptor/JSONPAtmosphereInterceptor.java
Patch:
@@ -70,7 +70,7 @@ public AsyncIOWriter writeError(int errorCode, String message) throws IOExceptio
                 public AsyncIOWriter write(String data) throws IOException {
                     String contentType = contentType();
                     String callbackName = callbackName();
-                    if (contentType != null && !contentType.contains("json")) {
+                    if (!data.startsWith("\"")) {
                         data = callbackName + "({\"message\" : \"" + data + "\"})";
                     } else {
                         data = callbackName + "({\"message\" :" + data + "})";

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -189,7 +189,7 @@ protected final void dispatch(final AtmosphereRequest request, final AtmosphereR
         AtmosphereResource resource = (AtmosphereResource) request.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE);
 
         if (r.getStatus() >= 400) {
-            webSocketProtocol.onError(webSocket, new WebSocketException("Status code higher than 400", r));
+            webSocketProtocol.onError(webSocket, new WebSocketException("Status code higher or equal than 400", r));
         }
 
         if (webSocket.resource() == null && WebSocket.class.isAssignableFrom(webSocket.getClass())) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1118,7 +1118,7 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
                 asyncSupport = asyncSupport.supportWebSocket() ? new Tomcat7Servlet30SupportWithWebSocket(config) : new BlockingIOCometSupport(config);
                 logger.warn("Using " + asyncSupport.getClass().getName());
 
-                a = doCometSupport(req, res);
+                a = asyncSupport.service(req, res);
             } else {
                 logger.error("AtmosphereFramework exception", ex);
                 throw ex;

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/impl/GwtResponseWriterImpl.java
Patch:
@@ -267,8 +267,8 @@ synchronized void setTerminated(boolean serverInitiated) {
                 } catch (IOException e) {
                     logger.error("Error closing connection", e);
                 }
-                resource.terminate(serverInitiated);
             }
+            resource.terminate(serverInitiated);
         }
     }
 

File: samples/gwt-demo/src/main/java/org/atmosphere/samples/server/AtmosphereHandler.java
Patch:
@@ -66,7 +66,7 @@ public int doComet(GwtAtmosphereResource resource) throws ServletException, IOEx
     @Override
     public void cometTerminated(GwtAtmosphereResource cometResponse, boolean serverInitiated) {
         super.cometTerminated(cometResponse, serverInitiated);
-        logger.debug("Comet disconnected");
+        logger.info("Comet disconnected");
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -27,6 +27,7 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import javax.servlet.http.Part;
@@ -62,7 +63,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class AtmosphereRequest implements HttpServletRequest {
+public class AtmosphereRequest extends HttpServletRequestWrapper {
 
     private ServletInputStream bis;
     private BufferedReader br;
@@ -72,6 +73,7 @@ public class AtmosphereRequest implements HttpServletRequest {
     private boolean queryComputed = false;
 
     private AtmosphereRequest(Builder b) {
+        super(b.request == null ? new NoOpsRequest() : b.request);
         if (b.inputStream == null) {
             if (b.dataBytes != null) {
                 configureStream(b.dataBytes, b.offset, b.length, b.encoding);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -68,7 +68,7 @@
  */
 public interface AtmosphereResource extends Trackable, AtmosphereEventLifecycle {
 
-    enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, SSE}
+    enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, SSE, AJAX}
 
     /**
      * Return the current {@link TRANSPORT}. The transport value is retrieved using the {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT}

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -205,6 +205,8 @@ public TRANSPORT transport() {
             return TRANSPORT.WEBSOCKET;
         } else if (TRANSPORT.SSE.name().equals(s)) {
             return TRANSPORT.SSE;
+        } else if (TRANSPORT.AJAX.name().equals(s)) {
+            return TRANSPORT.AJAX;
         } else {
             return TRANSPORT.UNDEFINED;
         }

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -66,6 +66,7 @@ public void onStateChange(AtmosphereResourceEvent event) throws IOException {
             res.getWriter().write(new Data(author, message).toString());
             switch (r.transport()) {
                 case JSONP:
+                case AJAX:
                 case LONG_POLLING:
                     event.getResource().resume();
                     break;

File: modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java
Patch:
@@ -89,7 +89,7 @@ public void action(AtmosphereResourceImpl r) {
         if (r.isResumed() && r.getRequest().getAttribute(ASYNCHRONOUS_HOOK) != null) {
             if (r.getRequest().getAttribute(CHANNEL) == null) return;
             try {
-                ((AsyncIOWriter)r.getRequest().getAttribute(CHANNEL)).close();
+                ((AsyncIOWriter)r.getRequest().getAttribute(CHANNEL)).close(r.getResponse(false));
             } catch (IOException e) {
                 logger.trace("", e);
             }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
Patch:
@@ -18,6 +18,7 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.AtmosphereResponse;
 
 import java.io.IOException;
 
@@ -53,7 +54,7 @@ public WebSocketAdapter setAtmosphereResource(AtmosphereResource r) {
     }
 
     @Override
-    public void close() throws IOException {
+    public void close(AtmosphereResponse r) throws IOException {
     }
 
     @Override

File: extras/jetty-websocketdraft8/src/main/java/org/atmosphere/jetty/JettyWebSocket.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.jetty;
 
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.websocket.WebSocketAdapter;
 import org.eclipse.jetty.websocket.WebSocket.Outbound;
 import org.slf4j.Logger;
@@ -33,7 +34,8 @@ public class JettyWebSocket extends WebSocketAdapter {
     private final Outbound outbound;
     private final byte frame = 0x00;
 
-    public JettyWebSocket(Outbound outbound) {
+    public JettyWebSocket(Outbound outbound, AtmosphereConfig config) {
+        super(config);
         this.outbound = outbound;
     }
 

File: extras/jetty-websocketdraft8/src/main/java/org/atmosphere/jetty/JettyWebSocketDraft08Handler.java
Patch:
@@ -52,7 +52,7 @@ public void onConnect(org.eclipse.jetty.websocket.WebSocket.Outbound outbound) {
 
         logger.debug("WebSocket.onConnect (outbound)");
         try {
-            webSocketProcessor = new WebSocketProcessor(framework, new JettyWebSocket(outbound), webSocketProtocol);
+            webSocketProcessor = new WebSocketProcessor(framework, new JettyWebSocket(outbound, framework.getAtmosphereConfig()), webSocketProtocol);
             webSocketProcessor.dispatch(request);
         } catch (Exception e) {
             logger.warn("failed to connect to web socket", e);

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishWebSocketSupport.java
Patch:
@@ -131,7 +131,6 @@ public String getContainerName() {
     private final static class GrizzlyApplication extends WebSocketApplication {
 
         private final AtmosphereConfig config;
-
         private WebSocketProcessor webSocketProcessor;
 
         public GrizzlyApplication(AtmosphereConfig config) {
@@ -160,7 +159,7 @@ public void onConnect(com.sun.grizzly.websockets.WebSocket w) {
                     logger.trace("", e);
                 }
 
-                webSocketProcessor = new WebSocketProcessor(config.framework(), new GrizzlyWebSocket(webSocket), config.framework().getWebSocketProtocol());
+                webSocketProcessor = new WebSocketProcessor(config.framework(), new GrizzlyWebSocket(webSocket, config), config.framework().getWebSocketProtocol());
                 webSocketProcessor.dispatch(r);
             } catch (Exception e) {
                 logger.warn("failed to connect to web socket", e);

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -223,9 +223,9 @@ public interface ApplicationConfig {
      */
     String TOMCAT_CLOSE_STREAM = "org.atmosphere.container.TomcatCometSupport.discardEOF";
     /**
-     * Let Jetty send blob instead of String
+     * Write binary instead of String
      */
-    String WEBSOCKET_BLOB = "org.atmosphere.websocket.supportBlob";
+    String WEBSOCKET_BINARY_WRITE = "org.atmosphere.websocket.binaryWrite";
     /**
      * Recycle (make them unusable) AtmosphereRequest/Response after wrapping a WebSocket message and delegating it to
      * a Container

File: modules/cpr/src/main/java/org/atmosphere/container/version/GrizzlyWebSocket.java
Patch:
@@ -58,7 +58,7 @@ public void redirect(String location) throws IOException {
      */
     @Override
     public void write(String data) throws IOException {
-        webSocket.send(data);
+        webSocket.send(webSocketResponseFilter.filter(data));
         lastWrite = System.currentTimeMillis();
     }
 
@@ -67,7 +67,7 @@ public void write(String data) throws IOException {
      */
     @Override
     public void write(byte[] data) throws IOException {
-        webSocket.send(new String(data));
+        webSocket.send(webSocketResponseFilter.filter(new String(data)));
         lastWrite = System.currentTimeMillis();
     }
 
@@ -76,7 +76,7 @@ public void write(byte[] data) throws IOException {
      */
     @Override
     public void write(byte[] data, int offset, int length) throws IOException {
-        webSocket.send(new String(data, offset, length));
+        webSocket.send(webSocketResponseFilter.filter(new String(data, offset, length)));
         lastWrite = System.currentTimeMillis();
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/version/TomcatWebSocket.java
Patch:
@@ -62,7 +62,7 @@ public void writeError(int errorCode, String message) throws IOException {
     public void write(String data) throws IOException {
         firstWrite.set(true);
         logger.trace("WebSocket.write()");
-        outbound.writeTextMessage(CharBuffer.wrap(data));
+        outbound.writeTextMessage(CharBuffer.wrap(webSocketResponseFilter.filter(data)));
         lastWrite = System.currentTimeMillis();
     }
 
@@ -73,7 +73,7 @@ public void write(String data) throws IOException {
     public void write(byte[] data) throws IOException {
         firstWrite.set(true);
         logger.trace("WebSocket.write()");
-        outbound.writeTextMessage(CharBuffer.wrap(new String(data)));
+        outbound.writeTextMessage(CharBuffer.wrap(webSocketResponseFilter.filter(new String(data, "ISO-8859-1"))));
         lastWrite = System.currentTimeMillis();
     }
 
@@ -84,7 +84,7 @@ public void write(byte[] data) throws IOException {
     public void write(byte[] data, int offset, int length) throws IOException {
         firstWrite.set(true);
         logger.trace("WebSocket.write()");
-        outbound.writeTextMessage(CharBuffer.wrap(new String(data, offset, length)));
+        outbound.writeTextMessage(CharBuffer.wrap(webSocketResponseFilter.filter(new String(data, offset, length, "ISO-8859-1"))));
         lastWrite = System.currentTimeMillis();
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -95,7 +95,7 @@ public final void dispatch(final AtmosphereRequest request) throws IOException {
             logger.debug("Atmosphere detected WebSocket: {}", webSocket.getClass().getName());
         }
 
-        AtmosphereResponse wsr = new AtmosphereResponse(webSocket, webSocketProtocol, request, destroyable);
+        AtmosphereResponse wsr = new AtmosphereResponse(webSocket, request, destroyable);
 
         request.headers(configureHeader(request));
 
@@ -148,7 +148,7 @@ private void dispatch(List<AtmosphereRequest> list) {
                 s.execute(new Runnable() {
                     @Override
                     public void run() {
-                        AtmosphereResponse w = new AtmosphereResponse(webSocket, webSocketProtocol, r, destroyable);
+                        AtmosphereResponse w = new AtmosphereResponse(webSocket, r, destroyable);
                         try {
                             dispatch(r, w);
                         } finally {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -15,7 +15,6 @@
 */
 package org.atmosphere.websocket;
 
-import org.atmosphere.cpr.AsyncProtocol;
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 
@@ -27,7 +26,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public interface WebSocketProtocol extends AsyncProtocol{
+public interface WebSocketProtocol {
 
     /**
      * Allow an implementation to query the AtmosphereConfig of init-param, etc.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -355,7 +355,7 @@ public String getHeader(String s, boolean checkCase) {
      */
     @Override
     public String getParameter(String s) {
-        String name = isNotNoOps() ? null : b.request.getParameter(s);
+        String name = isNotNoOps() ? b.request.getParameter(s) : null;
         if (name == null) {
             if (b.queryStrings.get(s) != null) {
                 return b.queryStrings.get(s)[0];

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -176,7 +176,7 @@ public void onRequest(AtmosphereResource r)
         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE, r);
         r.getRequest().setAttribute(FrameworkConfig.ATMOSPHERE_HANDLER, this);
         try {
-            if (wrapRequest) {
+            if (!wrapRequest) {
                 wrapper.service(r.getRequest(), r.getResponse());
             } else {
                 wrapper.service(new AtmosphereRequestWrapper(r.getRequest()), new AtmosphereResponseWrapper(r.getResponse()));

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ResourceChat.java
Patch:
@@ -36,7 +36,7 @@ public class ResourceChat {
      * Suspend the response without writing anything back to the client.
      * @return a white space
      */
-    @Suspend
+    @Suspend(contentType = "application/json")
     @GET
     public String suspend() {
         return "";

File: samples/sse-rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ResourceChat.java
Patch:
@@ -36,7 +36,7 @@ public class ResourceChat {
      * Suspend the response without writing anything back to the client.
      * @return a white space
      */
-    @Suspend
+    @Suspend(contentType = "application/json")
     @GET
     public String suspend() {
         return "";

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -354,7 +354,7 @@ public String getHeader(String s, boolean checkCase) {
      */
     @Override
     public String getParameter(String s) {
-        String name = b.request == null ? null : b.request.getParameter(s);
+        String name = isNotNoOps() ? null : b.request.getParameter(s);
         if (name == null) {
             if (b.queryStrings.get(s) != null) {
                 return b.queryStrings.get(s)[0];

File: modules/cpr/src/main/java/org/atmosphere/container/Tomcat7AsyncSupportWithWebSocket.java
Patch:
@@ -96,7 +96,7 @@ public AtmosphereFramework.Action service(AtmosphereRequest req, AtmosphereRespo
 
             if (!headerContainsToken(req, "sec-websocket-version", "13")) {
                 logger.debug("WebSocket version not supported. Downgrading to Comet");
-                res.sendError(202, "Websocket protocol not supported");
+                res.sendError(501, "Websocket protocol not supported");
                 return new AtmosphereFramework.Action(AtmosphereFramework.Action.TYPE.CANCELLED);
             }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHandshakeFilter.java
Patch:
@@ -68,7 +68,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                         logger.error("Invalid WebSocket Specification {} with {} ",
                                 r.getHeader("Connection"), r.getIntHeader("Sec-WebSocket-Version"));
                         HttpServletResponse.class.cast(response).addHeader(X_ATMOSPHERE_ERROR, "Websocket protocol not supported");
-                        HttpServletResponse.class.cast(response).sendError(202, "Websocket protocol not supported");
+                        HttpServletResponse.class.cast(response).sendError(501, "Websocket protocol not supported");
                         return;
                     }
                 }

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -127,9 +127,8 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOEx
                 action = cancelled(req, res);
             } else {
                 logger.debug("Cancelling response: {}", res);
+                event.close();
             }
-
-            event.close();
         } else if (event.getType() == HttpEvent.EventType.ERROR) {
             event.close();
         } else if (event.getType() == HttpEvent.EventType.END) {

File: modules/cpr/src/main/java/org/atmosphere/container/JBossWebCometSupport.java
Patch:
@@ -106,6 +106,7 @@ public Action service(AtmosphereRequest req, AtmosphereResponse res) throws IOEx
                     } else {
                         event.setTimeout(Integer.MAX_VALUE);
                     }
+                    req.setAttribute(SUSPENDED, true);
                 } catch (UnsupportedOperationException ex) {
                     // Swallow s Tomcat APR isn't supporting time out
                     // TODO: Must implement the same functionality using a Scheduler

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -583,7 +583,7 @@ public HttpSession getSession(boolean create) {
         if (create) {
             return getSession();
         }
-        return session != null && isNotNoOps() ? b.request.getSession(false) : session;
+        return session == null && isNotNoOps() ? b.request.getSession(false) : session;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -583,7 +583,7 @@ public HttpSession getSession(boolean create) {
         if (create) {
             return getSession();
         }
-        return session == null && isNotNoOps() ? b.request.getSession(false) : null;
+        return session != null && isNotNoOps() ? b.request.getSession(false) : session;
     }
 
     /**

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -224,7 +224,8 @@ boolean resumeOnBroadcast(boolean resumeOnBroadcast) {
         }
 
         boolean outputJunk(AtmosphereResource r, boolean outputJunk) {
-            if (!r.transport().equals(AtmosphereResource.TRANSPORT.STREAMING)) {
+            if (outputJunk && !r.transport().equals(AtmosphereResource.TRANSPORT.STREAMING)
+                    && !r.transport().equals(AtmosphereResource.TRANSPORT.UNDEFINED)) {
                 return false;
             }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -148,6 +148,7 @@ public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
 
         padding = config.getInitParameter(ApplicationConfig.STREAMING_PADDING_MODE);
         req.setAttribute(ApplicationConfig.STREAMING_PADDING_MODE, padding);
+
     }
 
     /**

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -224,8 +224,8 @@ boolean resumeOnBroadcast(boolean resumeOnBroadcast) {
         }
 
         boolean outputJunk(AtmosphereResource r, boolean outputJunk) {
-            if (r.transport().equals(AtmosphereResource.TRANSPORT.STREAMING)) {
-                return true;
+            if (!r.transport().equals(AtmosphereResource.TRANSPORT.STREAMING)) {
+                return false;
             }
 
             return outputJunk;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -68,7 +68,7 @@
  */
 public interface AtmosphereResource extends Trackable, AtmosphereEventLifecycle {
 
-    enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED}
+    enum TRANSPORT {POLLING, LONG_POLLING, STREAMING, WEBSOCKET, JSONP, UNDEFINED, SSE}
 
     /**
      * Return the current {@link TRANSPORT}. The transport value is retrieved using the {@link HeaderConfig#X_ATMOSPHERE_TRANSPORT}

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -42,6 +42,8 @@ public interface HeaderConfig {
 
     String WEBSOCKET_TRANSPORT = "websocket";
 
+    String SSE_TRANSPORT = "sse";
+
     /**
      * When a unexpected error occurs.
      */
@@ -78,5 +80,4 @@ public interface HeaderConfig {
     String WEBSOCKET_UPGRADE = "Upgrade";
 
     String ATMOSPHERE_POST_BODY = "X-Atmosphere-Post-Body";
-
 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -240,7 +240,9 @@ boolean outputJunk(boolean outputJunk) {
                 return false;
             } else if (transport != null && (transport.equals(JSONP_TRANSPORT) || transport.equals(LONG_POLLING_TRANSPORT))) {
                 return false;
-            } else if (transport == HeaderConfig.WEBSOCKET_TRANSPORT) {
+            } else if (transport.equalsIgnoreCase(HeaderConfig.WEBSOCKET_TRANSPORT)) {
+                return false;
+            } else if (transport.equalsIgnoreCase(HeaderConfig.SSE_TRANSPORT)) {
                 return false;
             }
 

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ResourceChat.java
Patch:
@@ -18,6 +18,7 @@
 import org.atmosphere.annotation.Broadcast;
 import org.atmosphere.annotation.Suspend;
 
+import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
@@ -29,7 +30,6 @@
  * @author Jeanfrancois Arcand
  */
 @Path("/")
-@Produces("application/json")
 public class ResourceChat {
 
     /**
@@ -49,6 +49,7 @@ public String suspend() {
      */
     @Broadcast(writeEntity = false)
     @POST
+    @Produces("application/json")
     public Response broadcast(Message message) {
         return new Response(message.author, message.message);
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java
Patch:
@@ -127,9 +127,6 @@ protected boolean testClassExists(final String testClass) {
     public List<Class<? extends AsyncSupport>> detectContainersPresent() {
         return new LinkedList<Class<? extends AsyncSupport>>() {
             {
-                if (testClassExists(NETTY))
-                    add(NettyCometSupport.class);
-
                 if (testClassExists(GLASSFISH_V2))
                     add(GlassFishv2CometSupport.class);
 
@@ -153,6 +150,9 @@ public List<Class<? extends AsyncSupport>> detectContainersPresent() {
 
                 if (testClassExists(GRIZZLY))
                     add(GrizzlyCometSupport.class);
+
+                if (testClassExists(NETTY))
+                    add(NettyCometSupport.class);
             }
         };
     }

File: modules/cpr/src/main/java/org/atmosphere/cache/SessionBroadcasterCache.java
Patch:
@@ -69,7 +69,9 @@ public SessionBroadcasterCache() {
      * {@inheritDoc}
      */
     public void cache(final AtmosphereResource r, CachedMessage cm) {
-        r.getRequest().getSession(true).setAttribute(BROADCASTER_CACHE_TRACKER, cm);
+        if (r != null) {
+            r.getRequest().getSession(true).setAttribute(BROADCASTER_CACHE_TRACKER, cm);
+        }
     }
 
     /**

File: extras/guice/src/test/java/org/atmosphere/tests/guice/managed/JettyGuiceJerseyTest.java
Patch:
@@ -137,7 +137,7 @@ public void configureCometSupport() {
     }
 
     public void startServer() throws Exception {
-        server = new org.eclipse.jetty.server.Server(8080);
+        server = new Server(port);
 
         ServletContextHandler sch = new ServletContextHandler(server, "/");
         sch.addEventListener(new GuiceContextListener());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceEventImpl.java
Patch:
@@ -105,7 +105,7 @@ public boolean isResuming() {
      * {@inheritDoc}
      */
     public boolean isSuspended() {
-        return resource.action().type == AtmosphereFramework.Action.TYPE.SUSPEND;
+        return resource == null ? false : resource.action().type == AtmosphereFramework.Action.TYPE.SUSPEND;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/util/Utils.java
Patch:
@@ -38,7 +38,7 @@ public static boolean webSocketEnabled(AtmosphereRequest request) {
         if (connection != null && connection.hasMoreElements()) {
             String[] e = connection.nextElement().toString().split(",");
             for (String upgrade : e) {
-                if (upgrade.equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
+                if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                     webSocketEnabled = true;
                     break;
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -577,7 +577,7 @@ public HttpSession getSession(boolean create) {
         if (create) {
             return getSession();
         }
-        return session;
+        return session == null && isNotNoOps() ? b.request.getSession(false) : null;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/JettyAsyncSupportWithWebSocket.java
Patch:
@@ -64,7 +64,7 @@ public JettyAsyncSupportWithWebSocket(final AtmosphereConfig config) {
     public Action service(AtmosphereRequest req, AtmosphereResponse res)
             throws IOException, ServletException {
         Action action = JettyWebSocketUtil.doService(this,req,res,webSocketFactory);
-        return action == null? super.service(req,res) : action;
+        return action == null ? super.service(req,res) : action;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -55,12 +55,13 @@ public final static AtmosphereFramework.Action doService(AsynchronousProcessor c
         Boolean b = (Boolean) req.getAttribute(WebSocket.WEBSOCKET_INITIATED);
         if (b == null) b = Boolean.FALSE;
 
-        if (!webSocketEnabled) {
+        if (!webSocketEnabled && req.getAttribute(WebSocket.WEBSOCKET_ACCEPT_DONE) == null) {
             return null;
         } else {
             if (webSocketFactory != null && !b) {
                 req.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
                 webSocketFactory.acceptWebSocket(req, res);
+                req.setAttribute(WebSocket.WEBSOCKET_ACCEPT_DONE, true);
                 return new AtmosphereFramework.Action();
             }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -30,6 +30,7 @@ public interface WebSocket extends AsyncIOWriter {
     public final static String WEBSOCKET_INITIATED = WebSocket.class.getName() + ".initiated";
     public final static String WEBSOCKET_SUSPEND = WebSocket.class.getName() + ".suspend";
     public final static String WEBSOCKET_RESUME = WebSocket.class.getName() + ".resume";
+    public final static String WEBSOCKET_ACCEPT_DONE = WebSocket.class.getName() + ".acceptDone";
 
     /**
      * Return the current {@link AtmosphereResource} representing the underlying connection and the original

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -413,7 +413,7 @@ void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
 
         AtmosphereRequest req = r.getRequest(false);
         String disableOnEvent = r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT);
-        r.getAtmosphereResourceEvent().setMessage(null);
+        r.getAtmosphereResourceEvent().setMessage(r.writeOnTimeout());
         try {
             if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) {
                 AtmosphereHandler atmosphereHandler =

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -72,6 +72,7 @@ public void write(String data) throws IOException {
         if (!connection.isOpen()) throw new IOException("Connection remotely closed");
         logger.trace("WebSocket.write()");
         connection.sendMessage(data);
+        lastWrite = System.currentTimeMillis();
     }
 
     /**
@@ -88,6 +89,7 @@ public void write(byte[] data) throws IOException {
         } else {
             connection.sendMessage(new String(data, 0, data.length, "UTF-8"));
         }
+        lastWrite = System.currentTimeMillis();
     }
 
     /**
@@ -104,6 +106,7 @@ public void write(byte[] data, int offset, int length) throws IOException {
         } else {
             connection.sendMessage(new String(data, offset, length, "UTF-8"));
         }
+        lastWrite = System.currentTimeMillis();
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/version/TomcatWebSocket.java
Patch:
@@ -63,6 +63,7 @@ public void write(String data) throws IOException {
         firstWrite.set(true);
         logger.trace("WebSocket.write()");
         outbound.writeTextMessage(CharBuffer.wrap(data));
+        lastWrite = System.currentTimeMillis();
     }
 
     /**
@@ -73,6 +74,7 @@ public void write(byte[] data) throws IOException {
         firstWrite.set(true);
         logger.trace("WebSocket.write()");
         outbound.writeTextMessage(CharBuffer.wrap(new String(data)));
+        lastWrite = System.currentTimeMillis();
     }
 
     /**
@@ -83,6 +85,7 @@ public void write(byte[] data, int offset, int length) throws IOException {
         firstWrite.set(true);
         logger.trace("WebSocket.write()");
         outbound.writeTextMessage(CharBuffer.wrap(new String(data, offset, length)));
+        lastWrite = System.currentTimeMillis();
     }
 
     /**

File: extras/weblogic/src/main/java/org/atmosphere/weblogic/WebLogicCometSupport.java
Patch:
@@ -50,7 +50,7 @@
  * holder.
  *
  */
-package org.atmosphere.container;
+package org.atmosphere.weblogic;
 
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AsynchronousProcessor;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -1428,7 +1428,7 @@ public final static AtmosphereRequest loadInMemory(HttpServletRequest request, b
             r = request;
         } else {
             b = new Builder();
-            r = new NoOpsRequest();
+            b.request(request);
         }
 
         b.servletPath(request.getServletPath())
@@ -1443,6 +1443,7 @@ public final static AtmosphereRequest loadInMemory(HttpServletRequest request, b
                 .session(new FakeHttpSession(request.getSession(true)));
 
         if (loadInMemory) {
+            r = new NoOpsRequest();
             load(request, b);
             if (isWrapped) {
                 load(b.request, b);

File: extras/jetty-websocketdraft8/src/main/java/org/atmosphere/jetty/JettyWebSocket.java
Patch:
@@ -49,7 +49,7 @@
  * only if the new code is made subject to such option by the copyright
  * holder.
  */
-package org.atmosphere.container.version;
+package org.atmosphere.jetty;
 
 import org.atmosphere.websocket.WebSocketAdapter;
 import org.eclipse.jetty.websocket.WebSocket.Outbound;

File: modules/acceptance-tests/src/test/java/org/atmosphere/tests/MeteorTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testng.annotations.AfterMethod;
-import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 import javax.servlet.http.HttpServlet;

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 Jeanfrancois Arcand
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of
@@ -48,7 +48,7 @@ public class JettyWebSocketHandler implements org.eclipse.jetty.websocket.WebSoc
     private WebSocketProcessor webSocketProcessor;
     private final AtmosphereRequest request;
     private final AtmosphereFramework framework;
-    private WebSocketProtocol webSocketProtocol;
+    private final WebSocketProtocol webSocketProtocol;
 
     public JettyWebSocketHandler(AtmosphereRequest request, AtmosphereFramework framework, WebSocketProtocol webSocketProtocol) {
         this.request = request;

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.testng.annotations.Test;
 
 /**
- * Unit tests for the {@link DefaultBroadcasterFactory}.
+ * Unit tests for the {@link org.atmosphere.cpr.DefaultBroadcasterFactory}.
  * 
  * @author Jason Burgess
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -491,7 +491,6 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                     invokeAtmosphereHandler(r);
 
                     try {
-                        r.getResponse().sendError(503, "Remotely closed");
                         r.getResponse().getOutputStream().close();
                     } catch (Throwable t) {
                         try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -102,7 +102,7 @@ private void configureStream(byte[] bytes, int offset, int length, String encodi
         }
     }
 
-    public boolean destroybed() {
+    public boolean destroyed() {
         return destroyed.get();
     }
 
@@ -151,7 +151,7 @@ public String getRequestedSessionId() {
      */
     @Override
     public String getMethod() {
-        return b.methodType;
+        return b.methodType != null ? b.methodType : b.request.getMethod();
     }
 
     /**
@@ -846,7 +846,7 @@ public final static class Builder {
         private int offset;
         private int length;
         private String encoding = "UTF-8";
-        private String methodType = "GET";
+        private String methodType;
         private String contentType;
         private String data;
         private Map<String, String> headers = new HashMap<String, String>();

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -91,7 +91,7 @@ public void onStateChange(AtmosphereResourceEvent event)
             throws IOException {
 
         Object message = event.getMessage();
-        if (message == null || event.isCancelled() || event.getResource().getRequest().destroybed()) return;
+        if (message == null || event.isCancelled() || event.getResource().getRequest().destroyed()) return;
 
         if (event.getResource().getSerializer() != null) {
             try {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -86,7 +86,7 @@ public boolean checkOrigin(HttpServletRequest request, String origin) {
 
             public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
                 logger.debug("WebSocket-connect request {} with protocol {}", request.getRequestURI(), protocol);
-                return new JettyWebSocketHandler(AtmosphereRequest.wrap(request), config.framework(), config.framework().getWebSocketProtocol());
+                return new JettyWebSocketHandler(AtmosphereRequest.loadInMemory(request), config.framework(), config.framework().getWebSocketProtocol());
             }
         });
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -428,7 +428,7 @@ protected void doTimeout(RequestResponseKey rrk) throws IOException, ServletExce
     public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(final HttpServletRequest request, final String protocol) {
         logger.debug("WebSocket upgrade requested");
         request.setAttribute(WebSocket.WEBSOCKET_INITIATED, true);
-        return new JettyWebSocketHandler(AtmosphereRequest.wrap(request), framework, framework.webSocketProtocol);
+        return new JettyWebSocketHandler(AtmosphereRequest.loadInMemory(request), framework, framework.webSocketProtocol);
     }
 
 }
\ No newline at end of file

File: samples/di-guice-sample/src/main/java/org/atmosphere/samples/di/guice/MessageResource.java
Patch:
@@ -23,6 +23,7 @@
 import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.cpr.DefaultBroadcaster;
 import org.atmosphere.jersey.Broadcastable;
+import org.atmosphere.jersey.JerseyBroadcaster;
 import org.codehaus.jettison.json.JSONException;
 import org.codehaus.jettison.json.JSONObject;
 import org.slf4j.Logger;
@@ -53,7 +54,7 @@ public class MessageResource {
     @Path("{name}")
     @Suspend(outputComments = true, resumeOnBroadcast = false, listeners = EventsLogger.class)
     public Broadcastable listen(@PathParam("name") String topic) throws JSONException {
-        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(DefaultBroadcaster.class, topic, true);
+        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(JerseyBroadcaster.class, topic, true);
         logger.info("thread: {} LISTENING to '{}'", Thread.currentThread().getName(), broadcaster.getID());
         if (service == null) {
             throw new AssertionError();
@@ -66,7 +67,7 @@ public Broadcastable listen(@PathParam("name") String topic) throws JSONExceptio
     @Broadcast
     public Broadcastable publish(@PathParam("name") String topic, @FormParam("from") String from,
                                  @FormParam("msg") String message) throws JSONException {
-        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(DefaultBroadcaster.class, topic, true);
+        Broadcaster broadcaster = BroadcasterFactory.getDefault().lookup(JerseyBroadcaster.class, topic, true);
         logger.info("thread: {} PUBLISH to '{}' from {}: {}",
                 new Object[]{Thread.currentThread().getName(), broadcaster.getID(), from, message});
         if (service == null) {

File: extras/guice/src/test/java/org/atmosphere/tests/guice/GrizzlyGuiceJerseyTest.java
Patch:
@@ -158,7 +158,7 @@ public void testSuspendTimeout() {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     public void startServer() throws Exception {

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -62,7 +62,6 @@
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.AtmosphereFramework.Action;
 import org.atmosphere.cpr.Broadcaster;
-import org.atmosphere.cpr.CometSupport;
 import org.jboss.servlet.http.HttpEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -76,7 +75,7 @@
  * This class gets used when the {@link AtmosphereServlet} fails to autodetect
  * the Servlet Container we are running on.
  * <p/>
- * This {@link CometSupport} implementation uses a blocking approach, meaning
+ * This {@link org.atmosphere.cpr.AsyncSupport} implementation uses a blocking approach, meaning
  * the request thread will be blocked until another Thread invoke the
  * {@link Broadcaster#broadcast}
  *

File: modules/cpr/src/main/java/org/atmosphere/container/JettyAsyncSupportWithWebSocket.java
Patch:
@@ -31,12 +31,12 @@
  *
  * @author Jeanfrancois Arcand
  */
-public class JettyCometSupportWithWebSocket extends Jetty7CometSupport {
+public class JettyAsyncSupportWithWebSocket extends Jetty7CometSupport {
 
-    private static final Logger logger = LoggerFactory.getLogger(JettyCometSupportWithWebSocket.class);
+    private static final Logger logger = LoggerFactory.getLogger(JettyAsyncSupportWithWebSocket.class);
     private final WebSocketFactory webSocketFactory;
 
-    public JettyCometSupportWithWebSocket(final AtmosphereConfig config) {
+    public JettyAsyncSupportWithWebSocket(final AtmosphereConfig config) {
         super(config);
 
         WebSocketFactory wsf;

File: modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java
Patch:
@@ -33,7 +33,7 @@
 import static org.atmosphere.cpr.FrameworkConfig.ATMOSPHERE_RESOURCE;
 
 /**
- * Netty's Framework {@link org.atmosphere.cpr.CometSupport}
+ * Netty's Framework {@link org.atmosphere.cpr.AsyncSupport}
  */
 public class NettyCometSupport extends AsynchronousProcessor {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupport.java
Patch:
@@ -62,7 +62,7 @@
 /**
  * Atmosphere's supported WebServer must implement this interface in order
  * to be auto detected by the {@link AtmosphereFramework}. If the {@link AtmosphereFramework}
- * fail to detect the {@link CometSupport}, it will use a blocking thread
+ * fail to detect the {@link AsyncSupport}, it will use a blocking thread
  * approach to emulate Comet using the {@link BlockingIOCometSupport}.
  * <p/>
  * Framework designer or Atmosphere application developer
@@ -74,7 +74,7 @@
  *
  * @author Jeanfrancois Arcand
  */
-public interface CometSupport<E extends AtmosphereResource> {
+public interface AsyncSupport<E extends AtmosphereResource> {
 
     /**
      * Return the name of the Java Web Server.

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsyncSupportResolver.java
Patch:
@@ -53,11 +53,11 @@
 package org.atmosphere.cpr;
 
 /**
- * This interface is used by AtmosphereServlet to determine which CometSupport instance should be used
+ * This interface is used by AtmosphereServlet to determine which AsyncSupport instance should be used
  *
  * @author Viktor Klang
  */
-public interface CometSupportResolver {
-    public CometSupport resolve(final boolean useNativeIfPossible, final boolean defaultToBlocking,
+public interface AsyncSupportResolver {
+    public AsyncSupport resolve(final boolean useNativeIfPossible, final boolean defaultToBlocking,
                                 final boolean useWebsocketIfPossible);
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Vector;
 
 import static org.atmosphere.cpr.ApplicationConfig.DEFAULT_NAMED_DISPATCHER;
 
@@ -61,7 +60,7 @@ public ServletContext getServletContext() {
     }
 
     public String getWebServerName() {
-        return framework.getCometSupport().getContainerName();
+        return framework.getAsyncSupport().getContainerName();
     }
 
     public Map<String, AtmosphereFramework.AtmosphereHandlerWrapper> handlers() {

File: modules/cpr/src/main/java/org/atmosphere/cpr/FrameworkConfig.java
Patch:
@@ -58,7 +58,7 @@ public interface FrameworkConfig {
      */
     String ATMOSPHERE_RESOURCE = AtmosphereResource.class.getName();
     /**
-     * Tell a {@link CometSupport} it can support session or not
+     * Tell a {@link AsyncSupport} it can support session or not
      */
     String SUPPORT_SESSION = AsynchronousProcessor.class.getName() + ".supportSession";
     /**

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -146,7 +146,7 @@ public void invokeWebSocketProtocol(byte[] data, int offset, int length) {
     }
 
     /**
-     * Dispatch to request/response to the {@link org.atmosphere.cpr.CometSupport} implementation as it was a normal HTTP request.
+     * Dispatch to request/response to the {@link org.atmosphere.cpr.AsyncSupport} implementation as it was a normal HTTP request.
      *
      * @param request a {@link AtmosphereRequest}
      * @param r       a {@link AtmosphereResponse}

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcastFilterTest.java
Patch:
@@ -64,7 +64,7 @@ public void testProgrammaticBroadcastFilter() throws ExecutionException, Interru
     public void testInitBroadcastFilter() throws ExecutionException, InterruptedException, ServletException {
         AtmosphereConfig config = new AtmosphereFramework()
                 .addInitParameter(ApplicationConfig.BROADCAST_FILTER_CLASSES, Filter.class.getName())
-                .setCometSupport(mock(BlockingIOCometSupport.class))
+                .setAsyncSupport(mock(BlockingIOCometSupport.class))
                 .init(new ServletConfig() {
                     @Override
                     public String getServletName() {

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
-import org.w3c.dom.stylesheets.LinkStyle;
 
 import javax.servlet.ServletConfig;
 import javax.servlet.ServletContext;
@@ -71,7 +70,7 @@ public void testDirectBroadcastMethod() throws ExecutionException, InterruptedEx
     @Test
     public void testSetBroadcastMethod() throws ExecutionException, InterruptedException, ServletException {
         AtmosphereConfig config = new AtmosphereFramework()
-                .setCometSupport(mock(BlockingIOCometSupport.class))
+                .setAsyncSupport(mock(BlockingIOCometSupport.class))
                 .init(new ServletConfig() {
                     @Override
                     public String getServletName() {

File: modules/cpr/src/test/java/org/atmosphere/cpr/UrlMappingTest.java
Patch:
@@ -37,7 +37,7 @@ public class UrlMappingTest {
     @BeforeMethod
     public void create() throws Throwable {
         framework = new AtmosphereFramework();
-        framework.setCometSupport(mock(CometSupport.class));
+        framework.setAsyncSupport(mock(AsyncSupport.class));
         framework.init(new ServletConfig() {
             @Override
             public String getServletName() {

File: modules/cpr/src/test/java/org/atmosphere/tests/BlockingIOCometSupportTest.java
Patch:
@@ -90,7 +90,7 @@ public void setConnector(int port) throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new BlockingIOCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new BlockingIOCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/BroadcasterLifecycleTest.java
Patch:
@@ -126,7 +126,7 @@ public void startServer() throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/BroadcasterScopeTest.java
Patch:
@@ -153,7 +153,7 @@ public void startServer() throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/ConcurrentBroadcastTest.java
Patch:
@@ -108,7 +108,7 @@ public void startServer() throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/GrizzlyCometSupportTest.java
Patch:
@@ -76,7 +76,7 @@ public void startServer() throws Exception {
         ws.addAsyncFilter(new CometAsyncFilter());
 
         atmoServlet = new AtmosphereServlet();
-        //atmoServlet.framework().addInitParameter(CometSupport.MAX_INACTIVE, "20000");
+        //atmoServlet.framework().addInitParameter(AsyncSupport.MAX_INACTIVE, "20000");
         sa.setServletInstance(atmoServlet);
         configureCometSupport();
 
@@ -85,7 +85,7 @@ public void startServer() throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/Jetty6CometSupportTest.java
Patch:
@@ -67,6 +67,6 @@ public void setConnector(int port) throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 }
\ No newline at end of file

File: modules/cpr/src/test/java/org/atmosphere/tests/Jetty7CometSupportTest.java
Patch:
@@ -81,7 +81,7 @@ public void startServer() throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new Jetty7CometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new Jetty7CometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/MeteorTest.java
Patch:
@@ -149,7 +149,7 @@ public void startServer() throws Exception {
     }
 
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @AfterMethod(alwaysRun = true)

File: modules/cpr/src/test/java/org/atmosphere/tests/TomcatCometSupportTest.java
Patch:
@@ -75,7 +75,7 @@ public class TomcatCometSupportTest extends BaseTest {
     public static class TomcatAtmosphereServlet extends AtmosphereServlet {
 
         public void init(final ServletConfig sc) throws ServletException {
-            framework().setCometSupport(new TomcatCometSupport(framework().getAtmosphereConfig()));
+            framework().setAsyncSupport(new TomcatCometSupport(framework().getAtmosphereConfig()));
             super.init(sc);
         }
 
@@ -104,7 +104,7 @@ public void startServer() throws Exception {
         w.addMapping("/*");
         w.setServletClass(TomcatAtmosphereServlet.class.getName());
         w.setLoadOnStartup(0);
-        //w.addInitParameter(CometSupport.MAX_INACTIVE, "20000");
+        //w.addInitParameter(AsyncSupport.MAX_INACTIVE, "20000");
 
         c.addChild(w);
         host.addChild(c);

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BaseGrizzyTest.java
Patch:
@@ -29,7 +29,7 @@ public abstract class BaseGrizzyTest extends BaseTest {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @Override

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BaseJettyTest.java
Patch:
@@ -30,7 +30,7 @@ public abstract class BaseJettyTest extends BaseTest {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new org.atmosphere.container.JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new org.atmosphere.container.JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
     @Override
     public void startServer() throws Exception {

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BlockingIOJerseyTest.java
Patch:
@@ -30,7 +30,7 @@ public class BlockingIOJerseyTest extends BasePubSubTest {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new BlockingIOCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new BlockingIOCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @Override

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderResponseTest.java
Patch:
@@ -34,7 +34,7 @@ public class BuilderResponseTest extends BlockingIOJerseyTest {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new BlockingIOCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new BlockingIOCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @Override

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/GrizzlyJerseyTest.java
Patch:
@@ -29,7 +29,7 @@ public class GrizzlyJerseyTest extends BasePubSubTest {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @Override

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty6JerseyTest.java
Patch:
@@ -42,7 +42,7 @@ public void startServer() throws Exception {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new JettyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
 }
\ No newline at end of file

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty7JerseyTest.java
Patch:
@@ -35,7 +35,7 @@ public void startServer() throws Exception {
 
     @Override
     public void configureCometSupport() {
-        atmoServlet.framework().setCometSupport(new Jetty7CometSupport(atmoServlet.framework().getAtmosphereConfig()));
+        atmoServlet.framework().setAsyncSupport(new Jetty7CometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     @Override

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/TomcatJerseyTest.java
Patch:
@@ -42,7 +42,7 @@ public void init(final ServletConfig sc) throws ServletException {
             framework().addInitParameter(ApplicationConfig.MAX_INACTIVE, "20000");
             framework().addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());
             framework().addInitParameter("org.atmosphere.cpr.broadcasterClass", RecyclableBroadcaster.class.getName());
-            framework().setCometSupport(new TomcatCometSupport(framework().getAtmosphereConfig()));
+            framework().setAsyncSupport(new TomcatCometSupport(framework().getAtmosphereConfig()));
             super.init(sc);
         }
 

File: samples/twitter-live-feed/src/main/java/org/atmosphere/samples/twitter/TwitterFeed.java
Patch:
@@ -99,7 +99,7 @@ public Object onCompleted(Response response) throws Exception {
                     return null;
                 }
 
-            }, 1, TimeUnit.SECONDS);
+            }, 1, TimeUnit.HOURS);
 
             futures.put(tagid, future);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -90,7 +90,7 @@ private AtmosphereRequest(Builder b) {
             br = new BufferedReader(new InputStreamReader(b.inputStream));
         }
 
-        methodType = b.methodType == null ? (isNotNoOps()? b.request.getMethod() : "GET") : b.methodType;
+        methodType = b.methodType == null ? (b.request != null ? b.request.getMethod() : "GET") : b.methodType;
 
         if (b.request == null) b.request(new NoOpsRequest());
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -986,7 +986,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource> subset) {
         Object newMsg = filter(msg);
         if (newMsg == null) return (new BroadcasterFuture<Object>(msg)).done();
 
-        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
+        BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(null, newMsg, subset.size());
         messages.offer(new Entry(newMsg, subset, f, msg));
         return f;
     }

File: modules/cpr/src/test/java/org/atmosphere/cpr/BroadcasterTest.java
Patch:
@@ -59,6 +59,7 @@ public void setUp() throws Exception {
     @AfterMethod
     public void unSetUp() throws Exception {
         broadcaster.removeAtmosphereResource(ar);
+        atmosphereHandler.value.set(new HashSet());
     }
 
     @Test

File: modules/cpr/src/main/java/org/atmosphere/cpr/Broadcaster.java
Patch:
@@ -201,7 +201,7 @@ enum POLICY {
      * @param resource an {@link AtmosphereResource}
      * @return {@link AtmosphereResource} if added, or null if it was already there.
      */
-    AtmosphereResource addAtmosphereResource(AtmosphereResource resource);
+    Broadcaster addAtmosphereResource(AtmosphereResource resource);
 
     /**
      * Remove a {@link AtmosphereResource} from the list of item to be notified when
@@ -210,7 +210,7 @@ enum POLICY {
      * @param resource an {@link AtmosphereResource}
      * @return {@link AtmosphereResource} if removed, or null if it was not.
      */
-    AtmosphereResource removeAtmosphereResource(AtmosphereResource resource);
+    Broadcaster removeAtmosphereResource(AtmosphereResource resource);
 
     /**
      * Set the {@link BroadcasterConfig} instance.

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -223,7 +223,7 @@ public JettyRequestFix(AtmosphereRequest request) {
             this.serverPort = request.getServerPort();
 
             HttpSession session = request.getSession(true);
-            httpSession = new FakeHttpSession(session.getId(), session.getServletContext(), session.getCreationTime());
+            httpSession = new FakeHttpSession(session);
 
             Enumeration<String> e = request.getHeaderNames();
             String s;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -76,7 +76,7 @@ public class AtmosphereRequest implements HttpServletRequest {
     private AtmosphereRequest(Builder b) {
         pathInfo = b.pathInfo == "" ? b.request.getPathInfo() : b.pathInfo;
         session = b.request == null ?
-                new FakeHttpSession("", null, System.currentTimeMillis()) : b.request.getSession();
+                new FakeHttpSession("", null, System.currentTimeMillis(), -1) : b.request.getSession();
 
         if (b.inputStream == null) {
             if (b.dataBytes != null) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -1126,7 +1126,7 @@ public Action doCometSupport(AtmosphereRequest req, AtmosphereResponse res) thro
                 return cometSupport.service(req, res);
             }
         } catch (IllegalStateException ex) {
-            if (ex.getMessage() != null && ex.getMessage().startsWith("Tomcat failed")) {
+            if (ex.getMessage() != null && (ex.getMessage().startsWith("Tomcat failed") || ex.getMessage().startsWith("JBoss failed") )) {
                 if (!isFilter) {
                     logger.warn("Failed using comet support: {}, error: {} Is the Nio or Apr Connector enabled?", cometSupport.getClass().getName(),
                             ex.getMessage());

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -51,7 +51,7 @@ public void writeError(int errorCode, String message) throws IOException {
             logger.debug("The WebSocket handshake succeeded but the dispatched URI failed {}:{}. " +
                     "The WebSocket connection is still open and client can continue sending messages.", message, errorCode);
         } else {
-            logger.warn("{} {}", errorCode, message);
+            logger.debug("{} {}", errorCode, message);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -490,7 +490,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                     invokeAtmosphereHandler(r);
 
                     try {
-                        r.getResponse().sendError(503);
+                        r.getResponse().sendError(503, "Remotely closed");
                         r.getResponse().getOutputStream().close();
                     } catch (Throwable t) {
                         try {

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -51,7 +51,7 @@ public void writeError(int errorCode, String message) throws IOException {
             logger.debug("The WebSocket handshake succeeded but the dispatched URI failed {}:{}. " +
                     "The WebSocket connection is still open and client can continue sending messages.", message, errorCode);
         } else {
-            logger.debug("{} {}", errorCode, message);
+            logger.warn("{} {}", errorCode, message);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -490,7 +490,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                     invokeAtmosphereHandler(r);
 
                     try {
-                        r.getResponse().sendError(500, "Remotly closed.");
+                        r.getResponse().sendError(503);
                         r.getResponse().getOutputStream().close();
                     } catch (Throwable t) {
                         try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -351,7 +351,7 @@ public String getHeader(String s, boolean checkCase) {
      */
     @Override
     public String getParameter(String s) {
-        String name = b.request  == null ? null : b.request.getParameter(s);
+        String name = b.request.getParameter(s);
         if (name == null) {
             if (b.queryStrings.get(s) != null) {
                 return b.queryStrings.get(s)[0];

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -51,7 +51,7 @@ public void writeError(int errorCode, String message) throws IOException {
             logger.debug("The WebSocket handshake succeeded but the dispatched URI failed {}:{}. " +
                     "The WebSocket connection is still open and client can continue sending messages.", message, errorCode);
         } else {
-            logger.warn("{} {}", errorCode, message);
+            logger.debug("{} {}", errorCode, message);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -490,7 +490,7 @@ public Action cancelled(AtmosphereRequest req, AtmosphereResponse res)
                     invokeAtmosphereHandler(r);
 
                     try {
-                        r.getResponse().sendError(503);
+                        r.getResponse().sendError(500, "Remotly closed.");
                         r.getResponse().getOutputStream().close();
                     } catch (Throwable t) {
                         try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -351,7 +351,7 @@ public String getHeader(String s, boolean checkCase) {
      */
     @Override
     public String getParameter(String s) {
-        String name = b.request.getParameter(s);
+        String name = b.request  == null ? null : b.request.getParameter(s);
         if (name == null) {
             if (b.queryStrings.get(s) != null) {
                 return b.queryStrings.get(s)[0];

File: modules/cpr/src/main/java/org/atmosphere/handler/AbstractReflectorAtmosphereHandler.java
Patch:
@@ -92,7 +92,7 @@ public void onStateChange(AtmosphereResourceEvent event)
             throws IOException {
 
         Object message = event.getMessage();
-        if (message == null || event.isCancelled()) return;
+        if (message == null || event.isCancelled() || event.getResource().getRequest().destroybed()) return;
 
         if (event.getResource().getSerializer() != null) {
             try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -812,7 +812,7 @@ public int hashCode() {
     @Override
     public String toString() {
         return "AtmosphereResourceImpl{" +
-                " hasCode" + hashCode() +
+                ", hasCode" + hashCode() +
                 ",\n action=" + action +
                 ",\n broadcaster=" + broadcaster.getClass().getName() +
                 ",\n cometSupport=" + cometSupport +

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -812,7 +812,7 @@ public int hashCode() {
     @Override
     public String toString() {
         return "AtmosphereResourceImpl{" +
-                ", hasCode" + hashCode() +
+                " hasCode" + hashCode() +
                 ",\n action=" + action +
                 ",\n broadcaster=" + broadcaster.getClass().getName() +
                 ",\n cometSupport=" + cometSupport +

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -86,6 +86,8 @@ private AtmosphereRequest(Builder b) {
             br = new BufferedReader(new InputStreamReader(b.inputStream));
         }
 
+        if (b.request  == null) b.request(new NoOpsRequest());
+
         methodType = b.methodType == null ? (b.request != null ? b.request.getMethod() : "GET") : b.methodType;
         this.b = b;
     }

File: samples/rest-chat/src/main/java/org/atmosphere/samples/chat/jersey/ResourceChat.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.atmosphere.samples.chat.jersey;
 
-import com.sun.jersey.api.json.JSONWithPadding;
 import org.atmosphere.annotation.Broadcast;
 import org.atmosphere.annotation.Suspend;
 import org.atmosphere.cpr.Broadcaster;
@@ -53,8 +52,8 @@ public String suspend() {
      */
     @Broadcast(writeEntity = false)
     @POST
-    public JSONWithPadding broadcast(Message message) {
-        return new JSONWithPadding(new Response(message.author, message.message));
+    public Response broadcast(Message message) {
+        return new Response(message.author, message.message);
     }
 
 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
Patch:
@@ -119,7 +119,7 @@ public BroadcasterFactory getValue() {
 
         class BroadcasterFactoryProxy extends BroadcasterFactory {
             BroadcasterFactory _get() {
-                return getAtmosphereResource(AtmosphereResource.class, true).getAtmosphereConfig().getBroadcasterFactory();
+                return BroadcasterFactory.getDefault();
             }
 
             @Override

File: modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
Patch:
@@ -119,7 +119,7 @@ public BroadcasterFactory getValue() {
 
         class BroadcasterFactoryProxy extends BroadcasterFactory {
             BroadcasterFactory _get() {
-                return BroadcasterFactory.getDefault();
+                return getAtmosphereResource(AtmosphereResource.class, true).getAtmosphereConfig().getBroadcasterFactory();
             }
 
             @Override

File: modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
Patch:
@@ -119,7 +119,7 @@ public BroadcasterFactory getValue() {
 
         class BroadcasterFactoryProxy extends BroadcasterFactory {
             BroadcasterFactory _get() {
-                return getAtmosphereResource(AtmosphereResource.class, true).getAtmosphereConfig().getBroadcasterFactory();
+                return BroadcasterFactory.getDefault();
             }
 
             @Override

File: modules/jersey/src/main/java/org/atmosphere/jersey/TrackableResource.java
Patch:
@@ -34,7 +34,7 @@
  * return new TrackableResource(AtmosphereResource.class, "abcdef", Response.OK());
  * }
  * @POST public String asyncBroadcast(@HeaderParam("X-Atmosphere-tracking-id") TrackableResource<AtmosphereResource> track) {
- * AtmosphereResource<?,?> r = track.resource();
+ * AtmosphereResource r = track.resource();
  * ...
  * }
  * </blockquote><pre>

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -486,7 +486,7 @@ public Enumeration<String> getInitParameterNames() {
                 throw (ServletException) t;
             }
 
-            throw new ServletException(t.getCause());
+            throw new ServletException(t);
         }
         return this;
     }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -867,7 +867,7 @@ void executeSuspend(AtmosphereResource r,
                 if (entity != null) {
                     b = b.header("Content-Type", ct);
                 }
-                servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, contentType.toString());
+                servletReq.setAttribute(FrameworkConfig.EXPECTED_CONTENT_TYPE, ct);
 
                 boolean eclipse362468 = false;
                 String serverInfo = r.getAtmosphereConfig().getServletContext().getServerInfo();

File: modules/cpr/src/main/java/org/atmosphere/cpr/MeteorServlet.java
Patch:
@@ -98,6 +98,7 @@ public void init(final ServletConfig sc) throws ServletException {
 
         if (mapping == null) {
             mapping = "/*";
+            BroadcasterFactory.getDefault().remove("/*");
         }
         framework.addAtmosphereHandler(mapping, r).initAtmosphereHandler(sc);
     }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -130,7 +130,6 @@ public void onMessage(byte[] data, int offset, int length) {
     @Override
     public boolean onControl(byte controlCode, byte[] data, int offset, int length) {
         logger.trace("WebSocket.onControl.");
-        webSocketProcessor.invokeWebSocketProtocol(data, offset, length);
         try {
             webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent(new String(data, offset, length, "UTF-8"), CONTROL, webSocketProcessor.webSocket()));
         } catch (UnsupportedEncodingException e) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -76,11 +76,10 @@ public WebSocketProcessor(AtmosphereFramework framework, WebSocket webSocket, We
         s = framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_PROTOCOL_EXECUTION);
         if (s != null && Boolean.valueOf(s)) {
             executeAsync = true;
-            asyncExecutor = Executors.newCachedThreadPool();
         } else {
             executeAsync = false;
-            asyncExecutor = VoidExecutorService.VOID;
         }
+        asyncExecutor = Executors.newCachedThreadPool();
     }
 
     public final void dispatch(final AtmosphereRequest request) throws IOException {
@@ -233,6 +232,7 @@ public void close(int closeCode) {
                 WebSocketAdapter.class.cast(webSocket).setAtmosphereResource(null);
             }
         }
+        asyncExecutor.shutdownNow();
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereFramework.java
Patch:
@@ -933,7 +933,7 @@ protected void autoDetectContainer() {
      * @throws java.net.MalformedURLException
      * @throws java.net.URISyntaxException
      */
-    protected void autoDetectAtmosphereHandlers(ServletContext servletContext, URLClassLoader classloader)
+    public void autoDetectAtmosphereHandlers(ServletContext servletContext, URLClassLoader classloader)
             throws MalformedURLException, URISyntaxException {
         logger.info("Auto detecting atmosphere handlers {}", handlersPath);
 
@@ -949,7 +949,7 @@ protected void autoDetectAtmosphereHandlers(ServletContext servletContext, URLCl
         loadAtmosphereHandlersFromPath(classloader, realPath);
     }
 
-    protected void loadAtmosphereHandlersFromPath(URLClassLoader classloader, String realPath) {
+    public void loadAtmosphereHandlersFromPath(URLClassLoader classloader, String realPath) {
         File file = new File(realPath);
 
         if (file.isDirectory()) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -125,7 +125,7 @@ public String getContentType() {
      */
     @Override
     public String getServletPath() {
-        return b.servletPath != null ? b.servletPath : super.getServletPath();
+        return b.servletPath != "" ? b.servletPath : super.getServletPath();
     }
 
     /**

File: samples/rest-chat/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
Patch:
@@ -64,7 +64,7 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MultivaluedMap;
 
-@Path("/chat")
+@Path("/")
 @Produces("text/html;charset=ISO-8859-1")
 public class ResourceChat {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFuture.java
Patch:
@@ -137,11 +137,12 @@ public boolean isDone() {
     /**
      * Invoked when a {@link Broadcaster} completed it broadcast operation.
      */
-    public void done() {
+    public BroadcasterFuture<E> done() {
         isDone = true;
         if (latch != null) {
             latch.countDown();
         }
+        return this;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java
Patch:
@@ -85,7 +85,7 @@ public AtmosphereFramework.Action service(AtmosphereRequest req, AtmosphereRespo
     @Override
     public void action(AtmosphereResourceImpl r) {
         super.action(r);
-        if (r.isResumed()) {
+        if (r.isResumed() && r.getRequest().getAttribute(HOOK) != null ) {
             ((CometSupportHook) r.getRequest().getAttribute(HOOK)).resume();
         }
     }

File: samples/rest-chat/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
Patch:
@@ -64,7 +64,7 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MultivaluedMap;
 
-@Path("/")
+@Path("/chat")
 @Produces("text/html;charset=ISO-8859-1")
 public class ResourceChat {
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketEventListener.java
Patch:
@@ -62,7 +62,7 @@ public interface WebSocketEventListener extends AtmosphereResourceEventListener{
     void onConnect(WebSocketEvent event);
 
 
-    public class WebSocketEvent {
+    public static final class WebSocketEvent {
         public enum TYPE { CONNECT, HANDSHAKE, CLOSE, MESSAGE, CONTROL, DISCONNECT}
         private final String message;
         private final TYPE type;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -314,7 +314,7 @@ public void suspend(long timeout, boolean flushComment) {
             }
 
             if (writeHeaders && enableAccessControl) {
-                response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, "*");
+                response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, req.getHeader("Origin") == null ? "*" : req.getHeader("Origin"));
                 response.setHeader(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");
             }
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -626,7 +626,7 @@ Response.ResponseBuilder configureHeaders(Response.ResponseBuilder b) throws IOE
             }
 
             if (enableAccessControl) {
-                b = b.header(ACCESS_CONTROL_ALLOW_ORIGIN, "*");
+                b = b.header(ACCESS_CONTROL_ALLOW_ORIGIN,  servletReq.getHeader("Origin") == null ? "*" : servletReq.getHeader("Origin"));
                 b = b.header(ACCESS_CONTROL_ALLOW_CREDENTIALS, "true");
             }
             return b;

File: extras/guice/src/test/java/org/atmosphere/tests/guice/GrizzlyGuiceJerseyTest.java
Patch:
@@ -124,7 +124,7 @@ public void setUpGlobal() throws Exception {
         port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
         urlTarget = "http://127.0.0.1:" + port + "/invoke";
         atmoServlet = new AtmosphereGuiceServlet();
-        atmoServlet.addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());
+        atmoServlet.framework().addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());
 
         configureCometSupport();
         startServer();
@@ -158,7 +158,7 @@ public void testSuspendTimeout() {
     }
 
     public void configureCometSupport() {
-        atmoServlet.setCometSupport(new GrizzlyCometSupport(atmoServlet.getAtmosphereConfig()));
+        atmoServlet.framework().setCometSupport(new GrizzlyCometSupport(atmoServlet.framework().getAtmosphereConfig()));
     }
 
     public void startServer() throws Exception {

File: extras/gwt/atmosphere-gwt-poll/src/main/java/org/atmosphere/gwt/poll/AtmospherePollHandler.java
Patch:
@@ -19,7 +19,6 @@
 import org.atmosphere.handler.ReflectorServletProcessor;
 
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 /**
@@ -28,7 +27,7 @@
 public class AtmospherePollHandler extends ReflectorServletProcessor {
 
     @Override
-    public void onStateChange(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) throws IOException {
+    public void onStateChange(AtmosphereResourceEvent event) throws IOException {
 
         if (event.isCancelled() || event.getMessage() == null) {
             return;

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
Patch:
@@ -173,7 +173,7 @@ protected void reapResources() {
     }
 
     @Override
-    public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> resource) throws IOException {
+    public void onRequest(AtmosphereResource resource) throws IOException {
 
         HttpServletRequest request = resource.getRequest();
 

File: extras/hazelcast/src/main/java/org/atmosphere/plugin/hazelcast/HazelcastBroadcaster.java
Patch:
@@ -16,12 +16,10 @@
 package org.atmosphere.plugin.hazelcast;
 
 
-import com.hazelcast.core.ITopic;
 import com.hazelcast.core.Hazelcast;
+import com.hazelcast.core.ITopic;
 import com.hazelcast.core.MessageListener;
-
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.util.AbstractBroadcasterProxy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: extras/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java
Patch:
@@ -48,7 +48,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 /**

File: extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -38,7 +38,6 @@
 package org.atmosphere.plugin.jms;
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.util.AbstractBroadcasterProxy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
Patch:
@@ -38,7 +38,6 @@
 package org.atmosphere.plugin.jms;
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.ClusterBroadcastFilter;
 import org.slf4j.Logger;

File: extras/xmpp/src/main/java/org/atmosphere/plugin/xmpp/XMPPBroadcaster.java
Patch:
@@ -17,7 +17,6 @@
 
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.util.AbstractBroadcasterProxy;
 import org.jivesoftware.smack.Chat;
 import org.jivesoftware.smack.ConnectionConfiguration;

File: modules/cpr/src/main/java/org/atmosphere/config/ApplicationConfiguration.java
Patch:
@@ -18,12 +18,12 @@
 /**
  * @author Sebastien Dionne : sebastien.dionne@gmail.com
  */
-public class FrameworkConfig {
+public class ApplicationConfiguration {
 
     private String paramName;
     private String paramValue;
 
-    public FrameworkConfig(String paramName, String paramValue) {
+    public ApplicationConfiguration(String paramName, String paramValue) {
         this.paramName = paramName;
         this.paramValue = paramValue;
     }

File: modules/cpr/src/main/java/org/atmosphere/config/FrameworkConfiguration.java
Patch:
@@ -18,12 +18,12 @@
 /**
  * @author Sebastien Dionne : sebastien.dionne@gmail.com
  */
-public class ApplicationConfig {
+public class FrameworkConfiguration {
 
     private String paramName;
     private String paramValue;
 
-    public ApplicationConfig(String paramName, String paramValue) {
+    public FrameworkConfiguration(String paramName, String paramValue) {
         this.paramName = paramName;
         this.paramValue = paramValue;
     }

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -15,8 +15,8 @@
 */
 package org.atmosphere.container.version;
 
-import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.ApplicationConfig;
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.websocket.WebSocketAdapter;
 import org.eclipse.jetty.websocket.WebSocket.Connection;
 import org.slf4j.Logger;

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -16,7 +16,6 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.container.TomcatCometSupport;
-import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProtocol;
 
 /**
@@ -90,11 +89,11 @@ public interface ApplicationConfig {
      */
     String WEBSOCKET_PROTOCOL = WebSocketProtocol.class.getName();
     /**
-     * Tell Atmosphere the content-type to use when a WebSocket message is dispatched as an HTTPServletRequest
+     * Tell Atmosphere the content-type to use when a WebSocket message is dispatched as an AtmosphereRequest
      */
     String WEBSOCKET_CONTENT_TYPE = "org.atmosphere.websocket.messageContentType";
     /**
-     * Tell Atmosphere the method to use when a WebSocket message is dispatched as an HTTPServletRequest
+     * Tell Atmosphere the method to use when a WebSocket message is dispatched as an AtmosphereRequest
      */
     String WEBSOCKET_METHOD = "org.atmosphere.websocket.messageMethod";
     /**

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -58,5 +58,5 @@ public interface WebSocket extends AsyncIOWriter {
      *
      * @return the current {@link AtmosphereResource}
      */
-    AtmosphereResource<?, ?> resource();
+    AtmosphereResource resource();
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
Patch:
@@ -26,14 +26,14 @@
  */
 public abstract class WebSocketAdapter implements WebSocket{
 
-    private AtmosphereResource<?, ?> r;
+    private AtmosphereResource r;
 
     /**
      * Configure the {@link AtmosphereResource}
      *
      * @param r the {@link AtmosphereResource}
      */
-    public WebSocketAdapter setAtmosphereResource(AtmosphereResource<?, ?> r) {
+    public WebSocketAdapter setAtmosphereResource(AtmosphereResource r) {
         this.r = r;
         return this;
     }
@@ -43,7 +43,7 @@ public void close() throws IOException {
     }
 
     @Override
-    public AtmosphereResource<?, ?> resource() {
+    public AtmosphereResource resource() {
         return r;
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -15,8 +15,8 @@
 */
 package org.atmosphere.websocket;
 
-import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AsyncProtocol;
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 
 import java.util.List;

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
-import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProtocol;
 import org.slf4j.Logger;

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -15,8 +15,8 @@
 */
 package org.atmosphere.websocket.protocol;
 
-import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.ApplicationConfig;
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -18,7 +18,8 @@
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
-import static org.mockito.Mockito.*;
+
+import static org.mockito.Mockito.mock;
 
 /**
  * Unit tests for the {@link DefaultBroadcasterFactory}.
@@ -32,7 +33,7 @@ public class DefaultBroadcasterFactoryTest {
 
     @BeforeMethod
     public void setUp() throws Exception {
-        config = mock(AtmosphereConfig.class);
+        config = new AtmosphereFramework().getAtmosphereConfig();
         factory = new DefaultBroadcasterFactory(DefaultBroadcaster.class, "NEVER", config);
     }
 

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/ConcurrentResource.java
Patch:
@@ -30,7 +30,9 @@
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
-import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.*;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_RESUME;
 
 /**
  * Concurrent Resource Test case.

File: samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
Patch:
@@ -22,13 +22,10 @@
 import org.atmosphere.cpr.Meteor;
 import org.atmosphere.websocket.WebSocketEventListenerAdapter;
 
-import javax.servlet.ServletConfig;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Simple PubSub resource that demonstrate many functionality supported by

File: samples/spring-websocket/src/main/java/org/atmosphere/samples/pubsub/controllers/ChatController.java
Patch:
@@ -24,16 +24,14 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 @Controller
 public class ChatController {
 
     @RequestMapping("/websockets")
     @ResponseBody
-    public void subscribe(AtmosphereResource<HttpServletRequest, HttpServletResponse> resource) throws IOException {
+    public void subscribe(AtmosphereResource resource) throws IOException {
         resource.getResponse().setContentType("text/html");
         AtmosphereUtils.suspend(resource);
     }

File: samples/spring-websocket/src/main/java/org/atmosphere/samples/pubsub/dto/Command.java
Patch:
@@ -26,5 +26,5 @@ public interface Command {
 
     String getChannel();
 
-    void setResource(AtmosphereResource<?, ?> resource);
+    void setResource(AtmosphereResource resource);
 }

File: samples/twitter-live-feed/src/main/java/org/atmosphere/samples/twitter/TwitterFeed.java
Patch:
@@ -26,8 +26,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
@@ -111,7 +109,7 @@ public Object onCompleted(Response response) throws Exception {
 
                     @Override
                     public void onSuspend(
-                            final AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
+                            final AtmosphereResourceEvent event) {
                         super.onSuspend(event);
 
                         // OK, we can start polling Twitter!

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -784,6 +784,7 @@ protected void initWebSocketProtocol() {
             logger.error("Cannot load the WebSocketProtocol {}", getWebSocketProtocolClassName(), ex);
             webSocketProtocol = new SimpleHttpProtocol();
         }
+        InjectorProvider.getInjector().inject(webSocketProtocol);
         webSocketProtocol.configure(config);
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -64,7 +64,7 @@ public class TomcatCometSupport extends AsynchronousProcessor {
     private static final Logger logger = LoggerFactory.getLogger(TomcatCometSupport.class);
 
     public static final String COMET_EVENT = "CometEvent";
-    private final static String SUSPENDED = Tomcat7CometSupport.class.getName() + ".suspended";
+    private final static String SUSPENDED = TomcatCometSupport.class.getName() + ".suspended";
 
     private static final IllegalStateException unableToDetectComet
             = new IllegalStateException(unableToDetectComet());
@@ -108,6 +108,7 @@ public Action service(HttpServletRequest req, HttpServletResponse res)
                     } else {
                         event.setTimeout(Integer.MAX_VALUE);
                     }
+                    req.setAttribute(SUSPENDED, true);
                 } catch (UnsupportedOperationException ex) {
                     // Swallow s Tomcat APR isn't supporting time out
                     // TODO: Must implement the same functionality using a Scheduler

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -66,7 +66,7 @@ public class AtmosphereRequest extends HttpServletRequestWrapper {
 
     private AtmosphereRequest(Builder b) {
         super(b.request);
-        pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
+        pathInfo = b.pathInfo == "" ? b.request.getPathInfo() : b.pathInfo;
         headers = b.headers == null ? new HashMap<String, String>() : b.headers;
         queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
         session = b.request == null ? new FakeHttpSession("", null, System.currentTimeMillis()) : b.request.getSession();
@@ -418,7 +418,7 @@ public final static class Builder {
         private String data;
         private Map<String, String> headers;
         private Map<String, String[]> queryStrings;
-        private String servletPath;
+        private String servletPath = "";
         private String requestURI;
         private String requestURL;
         private Map<String, Object> localAttributes = new HashMap<String, Object>();

File: extras/grizzly-adapter/src/main/java/org/atmosphere/grizzly/AtmosphereAdapter.java
Patch:
@@ -42,7 +42,6 @@
 import org.atmosphere.container.GrizzlyCometSupport;
 import org.atmosphere.cpr.AtmosphereHandler;
 import org.atmosphere.cpr.AtmosphereServlet;
-import org.atmosphere.cpr.FrameworkConfig;
 
 import javax.servlet.ServletContext;
 import java.io.File;

File: extras/gwt/atmosphere-gwt-poll/src/main/java/org/atmosphere/gwt/poll/AtmospherePollHandler.java
Patch:
@@ -19,7 +19,6 @@
 import org.atmosphere.handler.ReflectorServletProcessor;
 
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 /**
@@ -28,7 +27,7 @@
 public class AtmospherePollHandler extends ReflectorServletProcessor {
 
     @Override
-    public void onStateChange(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) throws IOException {
+    public void onStateChange(AtmosphereResourceEvent event) throws IOException {
 
         if (event.isCancelled() || event.getMessage() == null) {
             return;

File: extras/gwt/atmosphere-gwt-server/src/main/java/org/atmosphere/gwt/server/AtmosphereGwtHandler.java
Patch:
@@ -171,7 +171,7 @@ protected void reapResources() {
     }
 
     @Override
-    public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> resource) throws IOException {
+    public void onRequest(AtmosphereResource resource) throws IOException {
 
         HttpServletRequest request = resource.getRequest();
 

File: extras/hazelcast/src/main/java/org/atmosphere/plugin/hazelcast/HazelcastBroadcaster.java
Patch:
@@ -16,12 +16,10 @@
 package org.atmosphere.plugin.hazelcast;
 
 
-import com.hazelcast.core.ITopic;
 import com.hazelcast.core.Hazelcast;
+import com.hazelcast.core.ITopic;
 import com.hazelcast.core.MessageListener;
-
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.util.AbstractBroadcasterProxy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: extras/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java
Patch:
@@ -48,7 +48,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 /**

File: extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -38,7 +38,6 @@
 package org.atmosphere.plugin.jms;
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.util.AbstractBroadcasterProxy;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSFilter.java
Patch:
@@ -38,7 +38,6 @@
 package org.atmosphere.plugin.jms;
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.ClusterBroadcastFilter;
 import org.slf4j.Logger;

File: extras/xmpp/src/main/java/org/atmosphere/plugin/xmpp/XMPPBroadcaster.java
Patch:
@@ -17,7 +17,6 @@
 
 
 import org.atmosphere.cpr.AtmosphereConfig;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.util.AbstractBroadcasterProxy;
 import org.jivesoftware.smack.Chat;
 import org.jivesoftware.smack.ConnectionConfiguration;

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -55,7 +55,6 @@
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 
 import static org.atmosphere.cpr.HeaderConfig.X_CACHE_DATE;
 
@@ -70,7 +69,7 @@ public class HeaderBroadcasterCache extends BroadcasterCacheBase {
     /**
      * {@inheritDoc}
      */
-    public void cache(final AtmosphereResource<HttpServletRequest, HttpServletResponse> ar, CachedMessage cm) {
+    public void cache(final AtmosphereResource ar, CachedMessage cm) {
         long time = cm.next() == null ? cm.currentTime() : cm.next().currentTime();
 
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(ar);
@@ -82,7 +81,7 @@ public void cache(final AtmosphereResource<HttpServletRequest, HttpServletRespon
     /**
      * {@inheritDoc}
      */
-    public CachedMessage retrieveLastMessage(final AtmosphereResource<HttpServletRequest, HttpServletResponse> ar) {
+    public CachedMessage retrieveLastMessage(final AtmosphereResource ar) {
         AtmosphereResourceImpl r = AtmosphereResourceImpl.class.cast(ar);
 
         if (!r.isInScope()) return null;

File: modules/cpr/src/main/java/org/atmosphere/config/ApplicationConfiguration.java
Patch:
@@ -18,12 +18,12 @@
 /**
  * @author Sebastien Dionne : sebastien.dionne@gmail.com
  */
-public class FrameworkConfig {
+public class ApplicationConfiguration {
 
     private String paramName;
     private String paramValue;
 
-    public FrameworkConfig(String paramName, String paramValue) {
+    public ApplicationConfiguration(String paramName, String paramValue) {
         this.paramName = paramName;
         this.paramValue = paramValue;
     }

File: modules/cpr/src/main/java/org/atmosphere/config/FrameworkConfiguration.java
Patch:
@@ -18,12 +18,12 @@
 /**
  * @author Sebastien Dionne : sebastien.dionne@gmail.com
  */
-public class ApplicationConfig {
+public class FrameworkConfiguration {
 
     private String paramName;
     private String paramValue;
 
-    public ApplicationConfig(String paramName, String paramValue) {
+    public FrameworkConfiguration(String paramName, String paramValue) {
         this.paramName = paramName;
         this.paramValue = paramValue;
     }

File: modules/cpr/src/main/java/org/atmosphere/container/version/Jetty8WebSocket.java
Patch:
@@ -15,8 +15,8 @@
 */
 package org.atmosphere.container.version;
 
-import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.ApplicationConfig;
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.websocket.WebSocketAdapter;
 import org.eclipse.jetty.websocket.WebSocket.Connection;
 import org.slf4j.Logger;

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -16,7 +16,6 @@
 package org.atmosphere.cpr;
 
 import org.atmosphere.container.TomcatCometSupport;
-import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProtocol;
 
 /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereConfig.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.atmosphere.cpr;
 
+import org.atmosphere.config.AtmosphereHandlerConfig;
 import org.atmosphere.cpr.AtmosphereServlet.AtmosphereHandlerWrapper;
 
 import javax.servlet.ServletConfig;
@@ -33,7 +34,7 @@
  */
 public class AtmosphereConfig {
 
-    private final List<org.atmosphere.config.AtmosphereHandler> atmosphereHandler = new ArrayList<org.atmosphere.config.AtmosphereHandler>();
+    private final List<AtmosphereHandlerConfig> atmosphereHandler = new ArrayList<AtmosphereHandlerConfig>();
 
     private boolean supportSession = true;
     private BroadcasterFactory broadcasterFactory;
@@ -46,7 +47,7 @@ public AtmosphereConfig(AtmosphereServlet atmosphereServlet) {
         this.atmosphereServlet = atmosphereServlet;
     }
 
-    public List<org.atmosphere.config.AtmosphereHandler> getAtmosphereHandler() {
+    public List<AtmosphereHandlerConfig> getAtmosphereHandler() {
         return atmosphereHandler;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocket.java
Patch:
@@ -58,5 +58,5 @@ public interface WebSocket extends AsyncIOWriter {
      *
      * @return the current {@link AtmosphereResource}
      */
-    AtmosphereResource<?, ?> resource();
+    AtmosphereResource resource();
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAdapter.java
Patch:
@@ -26,14 +26,14 @@
  */
 public abstract class WebSocketAdapter implements WebSocket{
 
-    private AtmosphereResource<?, ?> r;
+    private AtmosphereResource r;
 
     /**
      * Configure the {@link AtmosphereResource}
      *
      * @param r the {@link AtmosphereResource}
      */
-    public WebSocketAdapter setAtmosphereResource(AtmosphereResource<?, ?> r) {
+    public WebSocketAdapter setAtmosphereResource(AtmosphereResource r) {
         this.r = r;
         return this;
     }
@@ -43,7 +43,7 @@ public void close() throws IOException {
     }
 
     @Override
-    public AtmosphereResource<?, ?> resource() {
+    public AtmosphereResource resource() {
         return r;
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -15,8 +15,8 @@
 */
 package org.atmosphere.websocket;
 
-import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AsyncProtocol;
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 
 import java.util.List;

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Patch:
@@ -17,8 +17,8 @@
 
 import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
-import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.cpr.AtmosphereResponse;
+import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProtocol;
 import org.slf4j.Logger;

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -15,8 +15,8 @@
 */
 package org.atmosphere.websocket.protocol;
 
-import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.ApplicationConfig;
+import org.atmosphere.cpr.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -18,7 +18,8 @@
 import org.atmosphere.util.SimpleBroadcaster;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
-import static org.mockito.Mockito.*;
+
+import static org.mockito.Mockito.mock;
 
 /**
  * Unit tests for the {@link DefaultBroadcasterFactory}.

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/ConcurrentResource.java
Patch:
@@ -30,7 +30,9 @@
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 
-import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.*;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_RESUME;
 
 /**
  * Concurrent Resource Test case.

File: samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
Patch:
@@ -22,13 +22,10 @@
 import org.atmosphere.cpr.Meteor;
 import org.atmosphere.websocket.WebSocketEventListenerAdapter;
 
-import javax.servlet.ServletConfig;
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Simple PubSub resource that demonstrate many functionality supported by

File: samples/spring-websocket/src/main/java/org/atmosphere/samples/pubsub/controllers/ChatController.java
Patch:
@@ -24,16 +24,14 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.ResponseBody;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
 @Controller
 public class ChatController {
 
     @RequestMapping("/websockets")
     @ResponseBody
-    public void subscribe(AtmosphereResource<HttpServletRequest, HttpServletResponse> resource) throws IOException {
+    public void subscribe(AtmosphereResource resource) throws IOException {
         resource.getResponse().setContentType("text/html");
         AtmosphereUtils.suspend(resource);
     }

File: samples/spring-websocket/src/main/java/org/atmosphere/samples/pubsub/dto/Command.java
Patch:
@@ -26,5 +26,5 @@ public interface Command {
 
     String getChannel();
 
-    void setResource(AtmosphereResource<?, ?> resource);
+    void setResource(AtmosphereResource resource);
 }

File: samples/twitter-live-feed/src/main/java/org/atmosphere/samples/twitter/TwitterFeed.java
Patch:
@@ -26,8 +26,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
@@ -111,7 +109,7 @@ public Object onCompleted(Response response) throws Exception {
 
                     @Override
                     public void onSuspend(
-                            final AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
+                            final AtmosphereResourceEvent event) {
                         super.onSuspend(event);
 
                         // OK, we can start polling Twitter!

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -106,7 +106,7 @@ public class AtmosphereResourceImpl implements
     /**
      * Create an {@link AtmosphereResource}.
      *
-     * @param config            The {@link org.atmosphere.cpr.AtmosphereServlet.AtmosphereConfig}
+     * @param config            The {@link org.atmosphere.cpr.AtmosphereConfig}
      * @param broadcaster       The {@link org.atmosphere.cpr.Broadcaster}.
      * @param req               The {@link javax.servlet.http.HttpServletRequest}
      * @param response          The {@link javax.servlet.http.HttpServletResponse}

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -145,7 +145,7 @@ public DefaultBroadcaster(String name, AtmosphereConfig config) {
     /**
      * Create {@link BroadcasterConfig}
      *
-     * @param config the {@link AtmosphereServlet.AtmosphereConfig}
+     * @param config the {@link AtmosphereConfig}
      * @return an instance of {@link BroadcasterConfig}
      */
     protected BroadcasterConfig createBroadcasterConfig(AtmosphereConfig config){
@@ -643,8 +643,7 @@ protected Object perRequestFilter(AtmosphereResource<?, ?> r, Entry msg) {
             synchronized (r) {
                 if (isAtmosphereResourceValid(r)) {
                     if (r.getRequest() instanceof HttpServletRequest && bc.hasPerRequestFilters()) {
-                        Object message = msg.originalMessage;
-                        BroadcastAction a = bc.filter((HttpServletRequest) r.getRequest(), (HttpServletResponse) r.getResponse(), message);
+                        BroadcastAction a = bc.filter(r, msg.message, msg.originalMessage);
                         if (a.action() == BroadcastAction.ACTION.ABORT) {
                             return null;
                         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -369,7 +369,7 @@ public void write(byte[] bytes, int start, int offset) throws java.io.IOExceptio
                 writeStatusAndHeaders();
                 if (asyncProtocol.inspectResponse()) {
                     byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
-                    asyncIOWriter.write(b, start, offset);
+                    asyncIOWriter.write(b, 0, b.length);
                 } else {
                     asyncIOWriter.write(bytes, start, offset);
                 }

File: modules/cpr/src/main/java/org/atmosphere/container/NettyCometSupport.java
Patch:
@@ -34,7 +34,7 @@ public class NettyCometSupport extends AsynchronousProcessor {
     public final static String SUSPEND = NettyCometSupport.class.getName() + ".suspend";
     public final static String RESUME = NettyCometSupport.class.getName() + ".resume";
 
-    private static final Logger logger = LoggerFactory.getLogger(BlockingIOCometSupport.class);
+    private static final Logger logger = LoggerFactory.getLogger(NettyCometSupport.class);
 
     public NettyCometSupport(AtmosphereConfig config) {
         super(config);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.StringReader;
 import java.io.UnsupportedEncodingException;
 import java.security.Principal;
@@ -95,7 +96,7 @@ private AtmosphereRequest(Builder b) {
             }
         } else {
             bis = new IS(b.inputStream);
-            br = null;
+            br = new BufferedReader(new InputStreamReader(b.inputStream));
         }
         methodType = b.methodType == null ? (request != null ? request.getMethod() : "GET") : b.methodType;
         contentType = b.contentType == null ? (request != null ? request.getContentType() : "text/plain") : b.contentType;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -301,7 +301,7 @@ public void suspend(long timeout, boolean flushComment) {
                 }
             }
 
-            if (timeout == -1 || flushComment) {
+            if (flushComment) {
                 req.setAttribute(FrameworkConfig.TRANSPORT_IN_USE, HeaderConfig.STREAMING_TRANSPORT);
             } else {
                 req.setAttribute(FrameworkConfig.TRANSPORT_IN_USE, HeaderConfig.LONG_POLLING_TRANSPORT);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -261,7 +261,8 @@ public String[] getParameterValues(String s) {
             String[] newList = queryStrings.get(s);
             String[] s1 = new String[list.length + newList.length];
             System.arraycopy(list, 0, s1, 0, list.length);
-            System.arraycopy(s1, list.length + 1, newList, 0, newList.length);
+            System.arraycopy(s1, list.length, newList, 0, newList.length);
+            list = s1;
         }
         return list;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/ApplicationConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2011 Jeanfrancois Arcand
+ * Copyright 2012 Jeanfrancois Arcand
  *
  * Licensed under the Apache License, Version 2.0 (the "License"); you may not
  * use this file except in compliance with the License. You may obtain a copy of

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -188,7 +188,7 @@ Action action(HttpServletRequest req, HttpServletResponse res)
 
         if (config.handlers().isEmpty()) {
             logger.error("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
-            throw new ServletException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
+            throw new AtmosphereMappingException("No AtmosphereHandler found. Make sure you define it inside META-INF/atmosphere.xml");
         }
 
         if (supportSession()) {
@@ -281,7 +281,7 @@ protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletExc
         }
 
         if (atmosphereHandlerWrapper == null) {
-            throw new ServletException("No AtmosphereHandler maps request for " + path);
+            throw new AtmosphereMappingException("No AtmosphereHandler maps request for " + path);
         }
         config.getBroadcasterFactory().add(atmosphereHandlerWrapper.broadcaster,
                 atmosphereHandlerWrapper.broadcaster.getID());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResponse.java
Patch:
@@ -396,7 +396,7 @@ public void write(byte[] bytes, int start, int offset) throws java.io.IOExceptio
                 writeStatusAndHeaders();
                 if (asyncProtocol.inspectResponse()) {
                     byte[] b = asyncProtocol.handleResponse(AtmosphereResponse.this, bytes, start, offset);
-                    asyncIOWriter.write(b, 0, b.length);
+                    asyncIOWriter.write(b, start, offset);
                 } else {
                     asyncIOWriter.write(bytes, start, offset);
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -847,7 +847,7 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
 
                 config.setSupportSession(!isJersey);
 
-                if (!atmoHandler.getSupportSession()) {
+                if (!atmoHandler.getSupportSession().equals("")) {
                     sessionSupport(Boolean.valueOf(atmoHandler.getSupportSession()));
                 }
 

File: modules/cpr/src/main/java/org/atmosphere/util/AtmosphereConfigReader.java
Patch:
@@ -128,7 +128,7 @@ private AtmosphereConfig parse(AtmosphereConfig config, Document document) {
                 Node attribute = root.getAttributes().item(j);
 
                 if (attribute.getNodeName().equals("support-session")) {
-                    atmoHandler.setSupportSession(Boolean.valueOf(attribute.getFirstChild().getNodeValue()));
+                    atmoHandler.setSupportSession(attribute.getFirstChild().getNodeValue());
                 } else if (attribute.getNodeName().equals("context-root")) {
                     atmoHandler.setContextRoot(attribute.getFirstChild().getNodeValue());
                 } else if (attribute.getNodeName().equals("class-name")) {

File: modules/cpr/src/main/java/org/atmosphere/config/AtmosphereHandler.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class AtmosphereHandler {
 
-    private String supportSession;
+    private boolean supportSession = false;
     private String contextRoot;
     private String className;
     private String broadcaster;
@@ -35,11 +35,11 @@ public class AtmosphereHandler {
     private List<ApplicationConfig> applicationConfig = new ArrayList<ApplicationConfig>();
     private List<FrameworkConfig> frameworkConfig = new ArrayList<FrameworkConfig>();
 
-    public String getSupportSession() {
+    public boolean getSupportSession() {
         return supportSession;
     }
 
-    public void setSupportSession(String supportSession) {
+    public void setSupportSession(boolean supportSession) {
         this.supportSession = supportSession;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -847,7 +847,7 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
 
                 config.setSupportSession(!isJersey);
 
-                if (!atmoHandler.getSupportSession().equals("")) {
+                if (!atmoHandler.getSupportSession()) {
                     sessionSupport(Boolean.valueOf(atmoHandler.getSupportSession()));
                 }
 

File: modules/cpr/src/main/java/org/atmosphere/util/AtmosphereConfigReader.java
Patch:
@@ -128,7 +128,7 @@ private AtmosphereConfig parse(AtmosphereConfig config, Document document) {
                 Node attribute = root.getAttributes().item(j);
 
                 if (attribute.getNodeName().equals("support-session")) {
-                    atmoHandler.setSupportSession(attribute.getFirstChild().getNodeValue());
+                    atmoHandler.setSupportSession(Boolean.valueOf(attribute.getFirstChild().getNodeValue()));
                 } else if (attribute.getNodeName().equals("context-root")) {
                     atmoHandler.setContextRoot(attribute.getFirstChild().getNodeValue());
                 } else if (attribute.getNodeName().equals("class-name")) {

File: modules/jersey/src/main/java/org/atmosphere/jersey/JerseyBroadcaster.java
Patch:
@@ -38,6 +38,7 @@
 package org.atmosphere.jersey;
 
 import com.sun.jersey.spi.container.ContainerResponse;
+import org.atmosphere.config.AtmosphereConfig;
 import org.atmosphere.cpr.*;
 import org.atmosphere.jersey.util.JerseyBroadcasterUtil;
 
@@ -49,7 +50,7 @@
  */
 public class JerseyBroadcaster extends DefaultBroadcaster {
 
-    public JerseyBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
+    public JerseyBroadcaster(String id, AtmosphereConfig config) {
         super(id, config);
     }
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseySimpleBroadcaster.java
Patch:
@@ -38,6 +38,7 @@
 package org.atmosphere.jersey.util;
 
 
+import org.atmosphere.config.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
 import org.atmosphere.cpr.AtmosphereServlet;
@@ -50,7 +51,7 @@
  */
 public class JerseySimpleBroadcaster extends SimpleBroadcaster {
 
-    public JerseySimpleBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
+    public JerseySimpleBroadcaster(String id, AtmosphereConfig config) {
         super(id, config);
     }
 

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/RecyclableBroadcaster.java
Patch:
@@ -36,7 +36,7 @@
  */
 package org.atmosphere.jersey.tests;
 
-import org.atmosphere.cpr.AtmosphereServlet;
+import org.atmosphere.config.AtmosphereConfig;
 import org.atmosphere.cpr.BroadcasterConfig;
 import org.atmosphere.jersey.JerseyBroadcaster;
 
@@ -45,7 +45,7 @@
  */
 public class RecyclableBroadcaster extends JerseyBroadcaster {
 
-    public RecyclableBroadcaster(String name, AtmosphereServlet.AtmosphereConfig config) {
+    public RecyclableBroadcaster(String name, AtmosphereConfig config) {
         super(name, config);
     }
 

File: samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
Patch:
@@ -15,14 +15,15 @@
  */
 package org.atmosphere.samples.pubsub;
 
+import org.atmosphere.config.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketEventListenerAdapter;
-import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProtocol;
 import org.slf4j.Logger;
@@ -46,7 +47,7 @@ public class WebSocketPubSub implements WebSocketProtocol {
     private static final Logger logger = LoggerFactory.getLogger(WebSocketPubSub.class);
 
     @Override
-    public void configure(AtmosphereServlet.AtmosphereConfig config) {
+    public void configure(AtmosphereConfig config) {
     }
 
     @Override

File: samples/spring-websocket/src/main/java/org/atmosphere/samples/pubsub/config/protocol/DelegatingWebSocketProtocol.java
Patch:
@@ -18,10 +18,10 @@
  */
 package org.atmosphere.samples.pubsub.config.protocol;
 
+import org.atmosphere.config.AtmosphereConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
-import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.samples.pubsub.config.SpringApplicationContext;
 import org.atmosphere.samples.pubsub.dto.BaseCommand;
 import org.atmosphere.samples.pubsub.dto.Command;
@@ -42,7 +42,7 @@ public class DelegatingWebSocketProtocol implements WebSocketProtocol {
     public static final Logger LOG = LoggerFactory.getLogger(DelegatingWebSocketProtocol.class);
 
     @Override
-    public void configure(AtmosphereServlet.AtmosphereConfig atmosphereConfig) {
+    public void configure(AtmosphereConfig atmosphereConfig) {
         // nothing needed
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -505,7 +505,7 @@ public Action cancelled(HttpServletRequest req, HttpServletResponse res)
         return cancelledAction;
     }
 
-    void shutdown() {
+    protected void shutdown() {
         closedDetector.shutdownNow();
         for (AtmosphereResource<HttpServletRequest, HttpServletResponse> resource : aliveRequests.values()) {
             try {

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -274,6 +274,7 @@ public ContainerResponse filter(final ContainerRequest request, final ContainerR
                         }
                     }
 
+
                     if (transport == null || broadcasterName == null) {
                         StringBuffer s = new StringBuffer();
                         Enumeration<String> e = servletReq.getHeaderNames();

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -91,7 +91,7 @@ public final static void broadcast(final AtmosphereResource<?, ?> r, final Atmos
             if (cr != null) {
                 cr.setEntity(null);
             }
-
+            e.setMessage(null);
             Boolean resumeOnBroadcast = (Boolean) request.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST);
             if (resumeOnBroadcast != null && resumeOnBroadcast) {
 

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -40,7 +40,7 @@ public final static AtmosphereServlet.Action doService(AsynchronousProcessor com
                                                            WebSocketFactory webSocketFactory) throws IOException, ServletException {
         boolean webSocketEnabled = false;
         if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-            String[] e = req.getHeaders("Connection").nextElement().split(",");
+            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
             for (String upgrade : e) {
                 if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                     webSocketEnabled = true;

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java
Patch:
@@ -175,7 +175,7 @@ public Action resumed(HttpServletRequest request, HttpServletResponse response)
     public void action(AtmosphereResourceImpl r) {
         super.action(r);
 
-        ServletRequest request = r.getRequest(false);
+        ServletRequest request = r.getRequest(true);
         while (request != null) {
             try {
                 Continuation c = (Continuation) request.getAttribute(Continuation.class.getName());

File: samples/jquery-websocketprotocol-pubsub/src/main/java/org/atmosphere/samples/pubsub/WebSocketPubSub.java
Patch:
@@ -30,6 +30,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.util.List;
 
 /**
  * Simple PubSub resource that demonstrate many functionality supported by
@@ -49,7 +50,7 @@ public void configure(AtmosphereServlet.AtmosphereConfig config) {
     }
 
     @Override
-    public AtmosphereRequest onMessage(WebSocket webSocket, String message) {
+    public List<AtmosphereRequest> onMessage(WebSocket webSocket, String message) {
         AtmosphereResource<HttpServletRequest,HttpServletResponse> r = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
         Broadcaster b = lookupBroadcaster(r.getRequest().getPathInfo());
 
@@ -62,7 +63,7 @@ public AtmosphereRequest onMessage(WebSocket webSocket, String message) {
     }
 
     @Override
-    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
+    public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
         //Do not dispatch to another Container
         return null;
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.util.List;
 
 /**
  * A WebSocket based protocol implementation. Implement this call to process WebSocket message and dispatch it to
@@ -50,7 +51,7 @@ public interface WebSocketProtocol extends AsyncProtocol{
      * @param webSocket The {@link WebSocket} connection
      * @param data      The Websocket message
      */
-    AtmosphereRequest onMessage(WebSocket webSocket, String data);
+    List<AtmosphereRequest> onMessage(WebSocket webSocket, String data);
 
     /**
      * Parse the WebSocket message, and delegate the processing to the {@link org.atmosphere.cpr.AtmosphereServlet#cometSupport} or
@@ -66,7 +67,7 @@ public interface WebSocketProtocol extends AsyncProtocol{
      * @param offset    offset message index
      * @param length    length of the message.
      */
-    AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length);
+    List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length);
 
     /**
      * Invoked when a WebSocket is opened

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Patch:
@@ -27,6 +27,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.util.List;
 
 /**
  * Simple {@link org.atmosphere.websocket.WebSocketProcessor} that invoke the {@link org.atmosphere.cpr.Broadcaster#broadcast} API when a WebSocket message
@@ -43,7 +44,7 @@ public class EchoProtocol implements WebSocketProtocol {
      * {@inheritDoc}
      */
     @Override
-    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
+    public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {
         logger.trace("broadcast String");
         webSocket.resource().getBroadcaster().broadcast(data);
         return null;
@@ -53,7 +54,7 @@ public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
      * {@inheritDoc}
      */
     @Override
-    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
+    public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
         logger.trace("broadcast byte");
         byte[] b = new byte[length];
         System.arraycopy(data, offset, b, 0, length);

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -53,7 +53,6 @@ public final static AtmosphereServlet.Action doService(AsynchronousProcessor com
         if (b == null) b = Boolean.FALSE;
 
         if (!webSocketEnabled) {
-            logger.error("Invalid WebSocketRequest: No Connection header with browser {}.", req.getHeader("User-Agent"));
             return null;
         } else {
             if (webSocketFactory != null && !b) {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -53,6 +53,7 @@ public final static AtmosphereServlet.Action doService(AsynchronousProcessor com
         if (b == null) b = Boolean.FALSE;
 
         if (!webSocketEnabled) {
+            logger.error("Invalid WebSocketRequest: No Connection header with browser {}.", req.getHeader("User-Agent"));
             return null;
         } else {
             if (webSocketFactory != null && !b) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -21,7 +21,6 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import java.util.List;
 
 /**
  * A WebSocket based protocol implementation. Implement this call to process WebSocket message and dispatch it to
@@ -51,7 +50,7 @@ public interface WebSocketProtocol extends AsyncProtocol{
      * @param webSocket The {@link WebSocket} connection
      * @param data      The Websocket message
      */
-    List<AtmosphereRequest> onMessage(WebSocket webSocket, String data);
+    AtmosphereRequest onMessage(WebSocket webSocket, String data);
 
     /**
      * Parse the WebSocket message, and delegate the processing to the {@link org.atmosphere.cpr.AtmosphereServlet#cometSupport} or
@@ -67,7 +66,7 @@ public interface WebSocketProtocol extends AsyncProtocol{
      * @param offset    offset message index
      * @param length    length of the message.
      */
-    List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length);
+    AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length);
 
     /**
      * Invoked when a WebSocket is opened

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Patch:
@@ -27,7 +27,6 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import java.util.List;
 
 /**
  * Simple {@link org.atmosphere.websocket.WebSocketProcessor} that invoke the {@link org.atmosphere.cpr.Broadcaster#broadcast} API when a WebSocket message
@@ -44,7 +43,7 @@ public class EchoProtocol implements WebSocketProtocol {
      * {@inheritDoc}
      */
     @Override
-    public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {
+    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
         logger.trace("broadcast String");
         webSocket.resource().getBroadcaster().broadcast(data);
         return null;
@@ -54,7 +53,7 @@ public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {
      * {@inheritDoc}
      */
     @Override
-    public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
+    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
         logger.trace("broadcast byte");
         byte[] b = new byte[length];
         System.arraycopy(data, offset, b, 0, length);

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -53,7 +53,6 @@ public final static AtmosphereServlet.Action doService(AsynchronousProcessor com
         if (b == null) b = Boolean.FALSE;
 
         if (!webSocketEnabled) {
-            logger.error("Invalid WebSocketRequest: No Connection header with browser {}.", req.getHeader("User-Agent"));
             return null;
         } else {
             if (webSocketFactory != null && !b) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProtocol.java
Patch:
@@ -21,6 +21,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.util.List;
 
 /**
  * A WebSocket based protocol implementation. Implement this call to process WebSocket message and dispatch it to
@@ -50,7 +51,7 @@ public interface WebSocketProtocol extends AsyncProtocol{
      * @param webSocket The {@link WebSocket} connection
      * @param data      The Websocket message
      */
-    AtmosphereRequest onMessage(WebSocket webSocket, String data);
+    List<AtmosphereRequest> onMessage(WebSocket webSocket, String data);
 
     /**
      * Parse the WebSocket message, and delegate the processing to the {@link org.atmosphere.cpr.AtmosphereServlet#cometSupport} or
@@ -66,7 +67,7 @@ public interface WebSocketProtocol extends AsyncProtocol{
      * @param offset    offset message index
      * @param length    length of the message.
      */
-    AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length);
+    List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length);
 
     /**
      * Invoked when a WebSocket is opened

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/EchoProtocol.java
Patch:
@@ -27,6 +27,7 @@
 
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.util.List;
 
 /**
  * Simple {@link org.atmosphere.websocket.WebSocketProcessor} that invoke the {@link org.atmosphere.cpr.Broadcaster#broadcast} API when a WebSocket message
@@ -43,7 +44,7 @@ public class EchoProtocol implements WebSocketProtocol {
      * {@inheritDoc}
      */
     @Override
-    public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
+    public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {
         logger.trace("broadcast String");
         webSocket.resource().getBroadcaster().broadcast(data);
         return null;
@@ -53,7 +54,7 @@ public AtmosphereRequest onMessage(WebSocket webSocket, String data) {
      * {@inheritDoc}
      */
     @Override
-    public AtmosphereRequest onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
+    public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
         logger.trace("broadcast byte");
         byte[] b = new byte[length];
         System.arraycopy(data, offset, b, 0, length);

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -53,6 +53,7 @@ public final static AtmosphereServlet.Action doService(AsynchronousProcessor com
         if (b == null) b = Boolean.FALSE;
 
         if (!webSocketEnabled) {
+            logger.error("Invalid WebSocketRequest: No Connection header with browser {}.", req.getHeader("User-Agent"));
             return null;
         } else {
             if (webSocketFactory != null && !b) {

File: samples/jquery-pubsub-hazelcast/src/main/java/org/atmosphere/samples/pubsub/HazelcastPubSub.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * Simple Redis PubSub resource that demonstrate many functionality supported by
- * Atmosphere JQuery Plugin,  Atmosphere Jersey extension and Atmosphere Redis Plugin
+ * Atmosphere JQuery Plugin,  Atmosphere Jersey extension and Atmosphere Hazelcast Plugin
  *
  * @author Jeanfrancois Arcand
  */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -112,6 +112,7 @@
 import static org.atmosphere.cpr.ApplicationConfig.SUPPORT_TRACKABLE;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_PROTOCOL;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_SUPPORT;
+import static org.atmosphere.cpr.FrameworkConfig.HAZELCAST_BROADCASTER;
 import static org.atmosphere.cpr.FrameworkConfig.JERSEY_BROADCASTER;
 import static org.atmosphere.cpr.FrameworkConfig.JERSEY_CONTAINER;
 import static org.atmosphere.cpr.FrameworkConfig.JGROUPS_BROADCASTER;
@@ -401,6 +402,7 @@ public AtmosphereServlet(boolean isFilter) {
      * The order of addition is quite important here.
      */
     private void populateBroadcasterType() {
+        broadcasterTypes.add(HAZELCAST_BROADCASTER);
         broadcasterTypes.add(XMPP_BROADCASTER);
         broadcasterTypes.add(REDIS_BROADCASTER);
         broadcasterTypes.add(JGROUPS_BROADCASTER);

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -159,7 +159,7 @@ public boolean onFrame(byte flags, byte opcode, byte[] data, int offset, int len
     public void onHandshake(org.eclipse.jetty.websocket.WebSocket.FrameConnection connection) {
         logger.trace("WebSocket.onHandshake");
         try {
-            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection), webSocketProtocol);
+            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection, atmosphereServlet.getAtmosphereConfig()), webSocketProtocol);
         } catch (Exception e) {
             logger.warn("failed to connect to web socket", e);
         }
@@ -178,7 +178,7 @@ public void onMessage(String data) {
     public void onOpen(org.eclipse.jetty.websocket.WebSocket.Connection connection) {
         logger.trace("WebSocket.onOpen.");
         try {
-            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection), webSocketProtocol);
+            webSocketProcessor = new WebSocketProcessor(atmosphereServlet, new Jetty8WebSocket(connection , atmosphereServlet.getAtmosphereConfig()), webSocketProtocol);
             webSocketProcessor.dispatch(request);
             webSocketProcessor.notifyListener(new WebSocketEventListener.WebSocketEvent("", CONNECT, webSocketProcessor.webSocket()));
         } catch (Exception e) {

File: extras/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -83,9 +83,10 @@ public class JMSBroadcaster extends AbstractBroadcasterProxy {
 
     public JMSBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
         super(id, null, config);
+        configure(config);
     }
 
-    public synchronized void configure(AtmosphereServlet.AtmosphereConfig config) {
+    private synchronized void configure(AtmosphereServlet.AtmosphereConfig config) {
         try {
             // For backward compatibility.
             if (config.getInitParameter(JMS_TOPIC) != null) {

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -18,9 +18,11 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.FrameworkConfig;
+import org.atmosphere.cpr.HeaderConfig;
 import org.atmosphere.websocket.WebSocket;
 import org.atmosphere.websocket.WebSocketProcessor;
 import org.atmosphere.websocket.WebSocketProtocol;
@@ -33,7 +35,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-
 /**
  * Like the {@link org.atmosphere.cpr.AsynchronousProcessor} class, this class is responsible for dispatching WebSocket messages to the
  * proper {@link org.atmosphere.websocket.WebSocket} implementation by wrapping the Websocket message's bytes within
@@ -51,7 +52,6 @@ public class SimpleHttpProtocol implements WebSocketProtocol, Serializable {
     private String contentType;
     private String methodType;
     private String delimiter;
-    private AtmosphereResource<HttpServletRequest, HttpServletResponse> resource;
 
     /**
      * {@inheritDoc}
@@ -82,6 +82,7 @@ public void configure(AtmosphereServlet.AtmosphereConfig config) {
      */
     @Override
     public AtmosphereRequest onMessage(WebSocket webSocket, String d) {
+        AtmosphereResourceImpl resource = (AtmosphereResourceImpl) webSocket.resource();
         if (resource == null) {
             logger.error("Invalid state. No AtmosphereResource has been suspended");
             return null;

File: samples/gwt-demo/src/main/java/org/atmosphere/samples/client/Info.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gwt.user.client.Timer;
 import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.ui.Composite;
+import com.google.gwt.user.client.ui.HTML;
 import com.google.gwt.user.client.ui.Label;
 import com.google.gwt.user.client.ui.PopupPanel;
 import com.google.gwt.user.client.ui.Widget;
@@ -101,12 +102,12 @@ interface MyUiBinder extends UiBinder<Widget, InfoWidget> {
         @UiField
         Label title;
         @UiField
-        Label message;
+        HTML message;
 
         private InfoWidget(String title, String message) {
             initWidget(binder.createAndBindUi(this));
             this.title.setText(title);
-            this.message.setText(message);
+            this.message.setHTML(message);
         }
     }
 

File: samples/gwt-demo/src/main/java/org/atmosphere/samples/client/Info.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gwt.user.client.Timer;
 import com.google.gwt.user.client.Window;
 import com.google.gwt.user.client.ui.Composite;
+import com.google.gwt.user.client.ui.HTML;
 import com.google.gwt.user.client.ui.Label;
 import com.google.gwt.user.client.ui.PopupPanel;
 import com.google.gwt.user.client.ui.Widget;
@@ -101,12 +102,12 @@ interface MyUiBinder extends UiBinder<Widget, InfoWidget> {
         @UiField
         Label title;
         @UiField
-        Label message;
+        HTML message;
 
         private InfoWidget(String title, String message) {
             initWidget(binder.createAndBindUi(this));
             this.title.setText(title);
-            this.message.setText(message);
+            this.message.setHTML(message);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java
Patch:
@@ -179,7 +179,7 @@ public void action(AtmosphereResourceImpl r) {
         super.action(r);
 
         ServletRequest request = r.getRequest();
-        while (AtmosphereRequest.class.isAssignableFrom(request.getClass())) {
+        while (!AtmosphereRequest.class.isAssignableFrom(request.getClass())) {
             request = AtmosphereRequest.class.cast(request).getRequest();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFuture.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.concurrent.TimeoutException;
 
 /**
- * Simple {@link Future} that can be used when awiting for a {@link Broadcaster} to finish
+ * Simple {@link Future} that can be used when awaiting for a {@link Broadcaster} to finish
  * it's broadcast operations to {@link AtmosphereHandler}
  *
  * @author Jeanfrancois Arcand

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -34,11 +34,14 @@ public interface HeaderConfig {
 
     String STREAMING_TRANSPORT = "streaming";
 
+    String POLLING_TRANSPORT = "polling";
+
     String JSONP_TRANSPORT = "jsonp";
 
     String JSONP_CALLBACK_NAME = "jsonpTransport";
 
     String WEBSOCKET_TRANSPORT = "websocket";
+
     /**
      * When a unexpected error occurs.
      */

File: extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisFilter.java
Patch:
@@ -159,8 +159,9 @@ public BroadcastFilter.BroadcastAction filter(Object originalMessage, Object o)
 
         if (!(receivedMessages.remove(contents))) {
             jedisPublisher.publish(bc.getID(), contents);
+            return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.CONTINUE, o);
         }
-        return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.CONTINUE, o);
+        return new BroadcastFilter.BroadcastAction(BroadcastAction.ACTION.ABORT, o);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketUtil.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.atmosphere.container;
 
-
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AsynchronousProcessor;
 import org.atmosphere.cpr.AtmosphereServlet;
@@ -84,7 +83,7 @@ public boolean checkOrigin(HttpServletRequest request, String origin) {
 
             public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
                 logger.debug("WebSocket-connect request {} with protocol {}", request.getRequestURI(), protocol);
-                return new JettyWebSocketHandler(request, config.getServlet(), config.getServlet().getWebSocketProtocolClassName());
+                return new JettyWebSocketHandler(request, config.getServlet(), config.getServlet().getWebSocketProtocol());
             }
         });
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -18,6 +18,7 @@
 import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereRequest;
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereResponse;
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.FrameworkConfig;
@@ -51,7 +52,6 @@ public class SimpleHttpProtocol implements WebSocketProtocol, Serializable {
     private String contentType;
     private String methodType;
     private String delimiter;
-    private AtmosphereResource<HttpServletRequest, HttpServletResponse> resource;
 
     /**
      * {@inheritDoc}
@@ -82,6 +82,7 @@ public void configure(AtmosphereServlet.AtmosphereConfig config) {
      */
     @Override
     public AtmosphereRequest onMessage(WebSocket webSocket, String d) {
+        AtmosphereResourceImpl resource = (AtmosphereResourceImpl) webSocket.resource();
         if (resource == null) {
             logger.error("Invalid state. No AtmosphereResource has been suspended");
             return null;
@@ -119,8 +120,6 @@ public AtmosphereRequest onMessage(WebSocket webSocket, byte[] d, final int offs
      */
     @Override
     public void onOpen(WebSocket webSocket) {
-        // eurk!!
-        this.resource = (AtmosphereResource<HttpServletRequest, HttpServletResponse>) webSocket.resource();
     }
 
     /**

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -254,7 +254,7 @@ public ContainerResponse filter(final ContainerRequest request, final ContainerR
 
                     String transport = servletReq.getHeader(X_ATMOSPHERE_TRANSPORT);
                     if (transport == null) {
-                        logger.debug("Must specify transport using header value " + X_ATMOSPHERE_TRANSPORT);
+                        logger.warn("Must specify transport using header value " + X_ATMOSPHERE_TRANSPORT);
                         response.setStatus(400);
                         return response;
                     }

File: modules/cpr/src/main/java/org/atmosphere/container/Jetty7CometSupport.java
Patch:
@@ -99,6 +99,7 @@ public Action service(HttpServletRequest req, HttpServletResponse res) throws IO
                 if (resumeOnBroadcast != null && resumeOnBroadcast) {
                     return action;
                 }
+                c = ContinuationSupport.getContinuation(req);
 
                 logger.debug("Resume {}", res);
                 if (c.isSuspended()) {

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -69,7 +69,7 @@ public SimpleBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
     protected BroadcasterConfig createBroadcasterConfig(AtmosphereServlet.AtmosphereConfig config){
         BroadcasterConfig bc = (BroadcasterConfig) config.properties().get(BroadcasterConfig.class.getName());
         if (bc == null) {
-            bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config);
+            bc = new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config, false);
             config.properties().put(BroadcasterConfig.class.getName(), bc);
         }
         return bc;

File: modules/jersey/src/main/java/org/atmosphere/jersey/TrackableSession.java
Patch:
@@ -80,7 +80,7 @@ public void track(TrackableResource<? extends Trackable> trackableResource) {
     public TrackableResource<? extends Trackable> lookup(String trackingID) {
 
         TrackableResource t = factoryCache.get(trackingID);
-        if (t != null) {
+        if (t != null && t.resource() != null) {
             if (AtmosphereResource.class.isAssignableFrom(t.resource().getClass())) {
                 AtmosphereResource.class.cast(t.resource()).addEventListener(aliveChecker);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -108,6 +108,7 @@
 import static org.atmosphere.cpr.ApplicationConfig.PROPERTY_USE_STREAM;
 import static org.atmosphere.cpr.ApplicationConfig.RESUME_AND_KEEPALIVE;
 import static org.atmosphere.cpr.ApplicationConfig.SUPPORT_TRACKABLE;
+import static org.atmosphere.cpr.ApplicationConfig.SUPPORT_LOCATION_HEADER;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_PROTOCOL;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_SUPPORT;
 import static org.atmosphere.cpr.FrameworkConfig.JERSEY_BROADCASTER;
@@ -1171,6 +1172,7 @@ public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);
         req.setAttribute(BROADCASTER_CLASS, broadcasterClassName);
         req.setAttribute(SUPPORT_TRACKABLE, config.getInitParameter(SUPPORT_TRACKABLE));
+        req.setAttribute(SUPPORT_LOCATION_HEADER, config.getInitParameter(SUPPORT_LOCATION_HEADER));
 
         try {
             if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderResponseTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.Response;
 import org.atmosphere.container.BlockingIOCometSupport;
+import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -28,7 +29,7 @@ public void setUpGlobal() throws Exception {
         urlTarget = "http://127.0.0.1:" + port + "/builder/invoke";
         atmoServlet = new AtmosphereServlet();
         atmoServlet.addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());
-
+        atmoServlet.addInitParameter(ApplicationConfig.SUPPORT_LOCATION_HEADER, "true");
         configureCometSupport();
         startServer();
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -445,6 +445,7 @@ public Entry(Object message, Object multipleAtmoResources, BroadcasterFuture<?>
             this.multipleAtmoResources = multipleAtmoResources;
             this.future = future;
             this.writeLocally = writeLocally;
+            this.originalMessage = message;
         }
 
         @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -369,7 +369,7 @@ public Action timedout(HttpServletRequest request, HttpServletResponse response)
             }
         } finally {
             try {
-                aliveRequests.remove(request);
+                r.cancel();
                 if (r != null) {
                     r.notifyListeners();
                 }
@@ -477,7 +477,7 @@ public synchronized Action cancelled(HttpServletRequest req, HttpServletResponse
             logger.debug("failed to cancel resource: " + r, ex);
         } finally {
             try {
-                aliveRequests.remove(req);
+                r.cancel();
                 if (r != null) {
                     r.notifyListeners();
                 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -191,6 +191,7 @@ public void close() {
 
                 try {
                     resource.notifyListeners(e);
+                    ((AtmosphereResourceImpl) resource).cancel();
                 } finally {
                     AsynchronousProcessor.destroyResource(resource);
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -41,7 +41,6 @@
 
 import org.apache.catalina.CometEvent;
 import org.apache.catalina.CometProcessor;
-import org.atmosphere.cache.BroadcasterCacheBase;
 import org.atmosphere.container.BlockingIOCometSupport;
 import org.atmosphere.container.JBossWebCometSupport;
 import org.atmosphere.container.JettyWebSocketHandler;
@@ -91,10 +90,10 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import static org.atmosphere.cpr.ApplicationConfig.ALLOW_QUERYSTRING_AS_REQUEST;
 import static org.atmosphere.cpr.ApplicationConfig.ATMOSPHERE_HANDLER;
 import static org.atmosphere.cpr.ApplicationConfig.ATMOSPHERE_HANDLER_MAPPING;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CACHE;
-import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CACHE_STRATEGY;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CLASS;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_FACTORY;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY;
@@ -111,7 +110,6 @@
 import static org.atmosphere.cpr.ApplicationConfig.SUPPORT_TRACKABLE;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_PROTOCOL;
 import static org.atmosphere.cpr.ApplicationConfig.WEBSOCKET_SUPPORT;
-import static org.atmosphere.cpr.ApplicationConfig.ALLOW_QUERYSTRING_AS_REQUEST;
 import static org.atmosphere.cpr.FrameworkConfig.JERSEY_BROADCASTER;
 import static org.atmosphere.cpr.FrameworkConfig.JERSEY_CONTAINER;
 import static org.atmosphere.cpr.FrameworkConfig.JGROUPS_BROADCASTER;

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -34,11 +34,14 @@ public interface HeaderConfig {
 
     String STREAMING_TRANSPORT = "streaming";
 
+    String POLLING_TRANSPORT = "polling";
+
     String JSONP_TRANSPORT = "jsonp";
 
     String JSONP_CALLBACK_NAME = "jsonpTransport";
 
     String WEBSOCKET_TRANSPORT = "websocket";
+
     /**
      * When a unexpected error occurs.
      */

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -177,9 +177,10 @@ public void close() {
 
             if (resource != null) {
                 AtmosphereHandler handler = (AtmosphereHandler) resource.getRequest().getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER);
+                AtmosphereResourceEventImpl e = new AtmosphereResourceEventImpl((AtmosphereResourceImpl) resource, true, false);
                 synchronized (resource) {
                     if (handler != null) {
-                        handler.onStateChange(new AtmosphereResourceEventImpl((AtmosphereResourceImpl) resource, false, true));
+                        handler.onStateChange(e);
                     }
 
                     Meteor m = (Meteor) resource.getRequest().getAttribute(AtmosphereResourceImpl.METEOR);
@@ -189,7 +190,7 @@ public void close() {
                 }
 
                 try {
-                    resource.notifyListeners();
+                    resource.notifyListeners(e);
                 } finally {
                     AsynchronousProcessor.destroyResource(resource);
                 }

File: modules/cpr/src/test/java/org/atmosphere/cpr/DefaultBroadcasterFactoryTest.java
Patch:
@@ -88,7 +88,7 @@ public void testRemove() {
     public void testLookup_Class_Object() {
         String id = "id";
         String id2 = "foo";
-        assert factory.lookup(DefaultBroadcaster.class, id) != null;
+        assert factory.lookup(DefaultBroadcaster.class, id, true) != null;
         assert factory.lookup(DefaultBroadcaster.class, id2) == null;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -739,6 +739,7 @@ protected boolean retrieveTrackedBroadcast(final AtmosphereResource<?, ?> r, fin
     }
 
     protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object msg) {
+        if (destroyed.get() || broadcasterCache == null) return;
         broadcasterCache.addToCache(r, msg);
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -231,7 +231,7 @@ public class AtmosphereServlet extends AbstractAsyncServlet implements CometProc
     private BroadcasterFactory broadcasterFactory;
     protected String broadcasterFactoryClassName;
     protected static String broadcasterCacheClassName;
-    private boolean webSocketEnabled = false;
+    private boolean webSocketEnabled = true;
     private String broadcasterLifeCyclePolicy = "NEVER";
     private String webSocketProtocolClassName = SimpleHttpProtocol.class.getName();
 
@@ -635,8 +635,8 @@ protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundExcep
 
     protected void doInitParamsForWebSocket(ServletConfig sc) {
         String s = sc.getInitParameter(WEBSOCKET_SUPPORT);
-        if (s != null && Boolean.parseBoolean(s)) {
-            webSocketEnabled = true;
+        if (s != null) {
+            webSocketEnabled = Boolean.parseBoolean(s);
             sessionSupport(false);
         }
         s = sc.getInitParameter(WEBSOCKET_PROTOCOL);

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -117,7 +117,8 @@ public final void dispatch(final HttpServletRequest request) throws IOException
         webSocketProtocol.onOpen(webSocket);
 
         if (!webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
-            webSocketProtocol.onError(webSocket, new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed.", wsr));
+            webSocketProtocol.onError(webSocket,
+                    new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed:  " + request.getRequestURI(), wsr));
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/protocol/SimpleHttpProtocol.java
Patch:
@@ -128,7 +128,7 @@ public void onClose(WebSocket webSocket) {
      */
     @Override
     public void onError(WebSocket webSocket, WebSocketProcessor.WebSocketException t) {
-        logger.error(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
+        logger.debug(t.getMessage() + " Status {} Message {}", t.response().getStatus(), t.response().getStatusMessage());
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -507,7 +507,9 @@ protected void push(Entry entry) {
         }
 
         Object finalMsg = translate(entry.message);
+        entry.originalMessage = (entry.originalMessage != entry.message ? translate(entry.originalMessage) : finalMsg);
         entry.message = finalMsg;
+
         if (resources.isEmpty()) {
             logger.debug("Broadcaster {} doesn't have any associated resource", getID());
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -92,7 +92,7 @@ public abstract class BroadcasterFactory {
      *
      * @param b a {@link Broadcaster}
      * @return false if wasn't present, or {@link Broadcaster}
-     * @oaram id the {@link Broadcaster's ID}
+     * @param id the {@link Broadcaster's ID}
      */
     abstract public boolean remove(Broadcaster b, Object id);
 

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30CometSupport.java
Patch:
@@ -148,6 +148,7 @@ private void suspend(Action action, HttpServletRequest req, HttpServletResponse
      */
     @Override
     public void action(AtmosphereResourceImpl actionEvent) {
+        super.action(actionEvent);
         if (actionEvent.action().type == Action.TYPE.RESUME && actionEvent.isInScope()) {
             AsyncContext asyncContext =
                     (AsyncContext) actionEvent.getRequest().getAttribute("org.atmosphere.container.asyncContext");

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -52,6 +52,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -592,5 +593,4 @@ public AtmosphereServlet.AtmosphereConfig getAtmosphereConfig() {
     public void setAtmosphereConfig(AtmosphereServlet.AtmosphereConfig config) {
         this.config = config;
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1176,7 +1176,7 @@ public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
 
         try {
             if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
-                    && isIECandidate(req)
+                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                     && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {
 
                 Map<String, String> headers = configureQueryStringAsRequest(req);

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -34,7 +34,7 @@ public interface HeaderConfig {
 
     String STREAMING_TRANSPORT = "streaming";
 
-    String JSONP= "jsonp";
+    String JSONP_TRANSPORT = "jsonp";
 
     String JSONP_CALLBACK_NAME = "jsonpTransport";
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1171,7 +1171,7 @@ public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
 
         try {
             if (config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST) != null
-                    && isIECandidate(req)
+                    && (isIECandidate(req) || req.getParameter(HeaderConfig.JSONP_CALLBACK_NAME) != null)
                     && req.getAttribute(WebSocket.WEBSOCKET_SUSPEND) == null) {
 
                 Map<String, String> headers = configureQueryStringAsRequest(req);

File: modules/cpr/src/main/java/org/atmosphere/cpr/HeaderConfig.java
Patch:
@@ -34,7 +34,7 @@ public interface HeaderConfig {
 
     String STREAMING_TRANSPORT = "streaming";
 
-    String JSONP= "jsonp";
+    String JSONP_TRANSPORT = "jsonp";
 
     String JSONP_CALLBACK_NAME = "jsonpTransport";
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
Patch:
@@ -50,9 +50,10 @@
  */
 public interface BroadcasterCache<V, W> {
 
-
     public final static String BROADCASTER_CACHE_TRACKER = BroadcasterCache.class.getName();
 
+    public enum STRATEGY { BEFORE_FILTER, AFTER_FILTER }
+
     /**
      * Start
      */

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -149,7 +149,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
     @Override
     protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
         synchronized (r) {
-            executeAsyncWrite(r, finalMsg, entry.future);
+            executeAsyncWrite(new AsyncWriteToken(r, entry.message, entry.future, entry.originalMessage));
         }
     }
 }
\ No newline at end of file

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -96,6 +96,7 @@
 import static org.atmosphere.cpr.HeaderConfig.ACCESS_CONTROL_ALLOW_ORIGIN;
 import static org.atmosphere.cpr.HeaderConfig.CACHE_CONTROL;
 import static org.atmosphere.cpr.HeaderConfig.EXPIRES;
+import static org.atmosphere.cpr.HeaderConfig.JSONP;
 import static org.atmosphere.cpr.HeaderConfig.LONG_POLLING_TRANSPORT;
 import static org.atmosphere.cpr.HeaderConfig.PRAGMA;
 import static org.atmosphere.cpr.HeaderConfig.WEBSOCKET_UPGRADE;
@@ -189,7 +190,7 @@ public ContainerResponseFilter getResponseFilter() {
 
         boolean resumeOnBroadcast(ContainerRequest request, boolean resumeOnBroadcast) {
             String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
-            if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
+            if (transport != null && (transport.equals(JSONP) || transport.equals(LONG_POLLING_TRANSPORT))) {
                 return true;
             }
             return resumeOnBroadcast;
@@ -210,7 +211,7 @@ boolean outputJunk(ContainerRequest request, boolean outputJunk) {
             String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
             if (webSocketEnabled) {
                 return false;
-            } else if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
+            } else if (transport != null && (transport.equals(JSONP) || transport.equals(LONG_POLLING_TRANSPORT))) {
                 return false;
             }
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/JerseyBroadcaster.java
Patch:
@@ -55,7 +55,7 @@ public JerseyBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
 
     @Override
     protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
-        JerseyBroadcasterUtil.broadcast(r, e);
+        JerseyBroadcasterUtil.broadcast(r, e, this);
     }
 
 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseySimpleBroadcaster.java
Patch:
@@ -56,6 +56,6 @@ public JerseySimpleBroadcaster(String id, AtmosphereServlet.AtmosphereConfig con
 
     @Override
     protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
-        JerseyBroadcasterUtil.broadcast(r, e);
+        JerseyBroadcasterUtil.broadcast(r, e, this);
     }
 }
\ No newline at end of file

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -96,6 +96,7 @@
 import static org.atmosphere.cpr.HeaderConfig.ACCESS_CONTROL_ALLOW_ORIGIN;
 import static org.atmosphere.cpr.HeaderConfig.CACHE_CONTROL;
 import static org.atmosphere.cpr.HeaderConfig.EXPIRES;
+import static org.atmosphere.cpr.HeaderConfig.JSONP;
 import static org.atmosphere.cpr.HeaderConfig.LONG_POLLING_TRANSPORT;
 import static org.atmosphere.cpr.HeaderConfig.PRAGMA;
 import static org.atmosphere.cpr.HeaderConfig.WEBSOCKET_UPGRADE;
@@ -189,7 +190,7 @@ public ContainerResponseFilter getResponseFilter() {
 
         boolean resumeOnBroadcast(ContainerRequest request, boolean resumeOnBroadcast) {
             String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
-            if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
+            if (transport != null && (transport.equals(JSONP) || transport.equals(LONG_POLLING_TRANSPORT))) {
                 return true;
             }
             return resumeOnBroadcast;
@@ -210,7 +211,7 @@ boolean outputJunk(ContainerRequest request, boolean outputJunk) {
             String transport = request.getHeaderValue(X_ATMOSPHERE_TRANSPORT);
             if (webSocketEnabled) {
                 return false;
-            } else if (transport != null && transport.equals(LONG_POLLING_TRANSPORT)) {
+            } else if (transport != null && (transport.equals(JSONP) || transport.equals(LONG_POLLING_TRANSPORT))) {
                 return false;
             }
 

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -149,7 +149,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
     @Override
     protected void queueWriteIO(AtmosphereResource<?, ?> r, Object finalMsg, Entry entry) throws InterruptedException {
         synchronized (r) {
-            executeAsyncWrite(r, finalMsg, entry.future);
+            executeAsyncWrite(new AsyncWriteToken(r, entry.message, entry.future, entry.originalMessage));
         }
     }
 }
\ No newline at end of file

File: modules/jersey/src/main/java/org/atmosphere/jersey/JerseyBroadcaster.java
Patch:
@@ -55,7 +55,7 @@ public JerseyBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
 
     @Override
     protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
-        JerseyBroadcasterUtil.broadcast(r, e);
+        JerseyBroadcasterUtil.broadcast(r, e, this);
     }
 
 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseySimpleBroadcaster.java
Patch:
@@ -56,6 +56,6 @@ public JerseySimpleBroadcaster(String id, AtmosphereServlet.AtmosphereConfig con
 
     @Override
     protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
-        JerseyBroadcasterUtil.broadcast(r, e);
+        JerseyBroadcasterUtil.broadcast(r, e, this);
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -138,6 +138,8 @@ public DefaultBroadcaster(String name, AtmosphereServlet.AtmosphereConfig config
     public synchronized void destroy() {
         if (destroyed.get()) return;
 
+        notifyDestroyListener();
+
         try {
             logger.trace("Broadcaster {} is being destroyed and cannot be re-used", getID());
 
@@ -351,7 +353,6 @@ public void run() {
                 }
 
                 void destroy(boolean resume) {
-                    notifyDestroyListener();
 
                     if (resume) {
                         logger.info("All AtmosphereResource will now be resumed from Broadcaster {}", getID());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -41,6 +41,7 @@
 
 import org.apache.catalina.CometEvent;
 import org.apache.catalina.CometProcessor;
+import org.atmosphere.cache.BroadcasterCacheBase;
 import org.atmosphere.container.BlockingIOCometSupport;
 import org.atmosphere.container.JBossWebCometSupport;
 import org.atmosphere.container.JettyWebSocketHandler;
@@ -93,6 +94,7 @@
 import static org.atmosphere.cpr.ApplicationConfig.ATMOSPHERE_HANDLER;
 import static org.atmosphere.cpr.ApplicationConfig.ATMOSPHERE_HANDLER_MAPPING;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CACHE;
+import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CACHE_STRATEGY;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_CLASS;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_FACTORY;
 import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY;

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterCache.java
Patch:
@@ -50,9 +50,10 @@
  */
 public interface BroadcasterCache<V, W> {
 
-
     public final static String BROADCASTER_CACHE_TRACKER = BroadcasterCache.class.getName();
 
+    public enum STRATEGY { BEFORE_FILTER, AFTER_FILTER }
+
     /**
      * Start
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1182,7 +1182,7 @@ && isIECandidate(req)
                 String body = headers.remove(ATMOSPHERE_POST_BODY);
                 return cometSupport.service(new AtmosphereRequest.Builder()
                         .headers(headers)
-                        .method(body != null ? "POST" : "GET")
+                        .method(body != null && req.getMethod().equalsIgnoreCase("GET") ? "POST" : req.getMethod())
                         .body(body)
                         .request(req).build(), res);
             } else {

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -216,7 +216,6 @@ private static class JettyRequestFix extends HttpServletRequestWrapper {
         private final String method;
         private final String serverName;
         private final int serverPort;
-        private final ServletContext servletContext;
 
         public JettyRequestFix(HttpServletRequest request) {
             super(request);
@@ -228,7 +227,6 @@ public JettyRequestFix(HttpServletRequest request) {
             this.method = request.getMethod();
             this.serverName = request.getServerName();
             this.serverPort = request.getServerPort();
-            this.servletContext = request.getServletContext();
 
             HttpSession session = request.getSession(true);
             httpSession = new FakeHttpSession(session.getId(), session.getServletContext(), session.getCreationTime());

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketHandler.java
Patch:
@@ -216,7 +216,6 @@ private static class JettyRequestFix extends HttpServletRequestWrapper {
         private final String method;
         private final String serverName;
         private final int serverPort;
-        private final ServletContext servletContext;
 
         public JettyRequestFix(HttpServletRequest request) {
             super(request);
@@ -228,7 +227,6 @@ public JettyRequestFix(HttpServletRequest request) {
             this.method = request.getMethod();
             this.serverName = request.getServerName();
             this.serverPort = request.getServerPort();
-            this.servletContext = request.getServletContext();
 
             HttpSession session = request.getSession(true);
             httpSession = new FakeHttpSession(session.getId(), session.getServletContext(), session.getCreationTime());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -262,15 +262,17 @@ protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletExc
 
                     atmosphereHandlerWrapper = config.handlers().get(path);
                     if (atmosphereHandlerWrapper == null) {
+                        String ppath = path;
                         path = path.substring(0, path.lastIndexOf("/")) + "/*";
+
                         atmosphereHandlerWrapper = config.handlers().get(path);
                         if (atmosphereHandlerWrapper == null) {
+                            path = ppath;
                             if (!path.endsWith("/")) {
                                 path += "/*";
                             } else {
                                 path += "*";
                             }
-                            // Try appending the pathInfo
                             atmosphereHandlerWrapper = config.handlers().get(path);
                             if (atmosphereHandlerWrapper == null) {
                                 logger.warn("No AtmosphereHandler maps request for {}", path);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1176,7 +1176,7 @@ && isIECandidate(req)
                 String body = headers.remove(ATMOSPHERE_POST_BODY);
                 return cometSupport.service(new AtmosphereRequest.Builder()
                         .headers(headers)
-                        .method(req.getMethod())
+                        .method(body != null ? req.getMethod() : "GET")
                         .body(body)
                         .request(req).build(), res);
             } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1176,7 +1176,7 @@ && isIECandidate(req)
                 String body = headers.remove(ATMOSPHERE_POST_BODY);
                 return cometSupport.service(new AtmosphereRequest.Builder()
                         .headers(headers)
-                        .method(body != null ? "POST" : "GET")
+                        .method(req.getMethod())
                         .body(body)
                         .request(req).build(), res);
             } else {

File: samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
Patch:
@@ -49,7 +49,7 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MultivaluedMap;
 
-@Path("/chat")
+@Path("/")
 @Produces("text/html;charset=ISO-8859-1")
 public class ResourceChat {
 

File: samples/di-guice-sample/src/main/java/org/atmosphere/samples/di/guice/GuiceContextListener.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.inject.Injector;
 import com.google.inject.servlet.GuiceServletContextListener;
 import com.google.inject.servlet.ServletModule;
-import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;
+import org.atmosphere.guice.GuiceContainer;
 import org.atmosphere.guice.GuiceManagedAtmosphereServlet;
 
 import java.util.HashMap;

File: samples/di-guice-sample/src/main/java/org/atmosphere/samples/di/guice/GuiceContextListener.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.inject.Injector;
 import com.google.inject.servlet.GuiceServletContextListener;
 import com.google.inject.servlet.ServletModule;
-import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;
+import org.atmosphere.guice.GuiceContainer;
 import org.atmosphere.guice.GuiceManagedAtmosphereServlet;
 
 import java.util.HashMap;

File: samples/chat-guice/src/main/java/org/atmosphere/commons/jersey/ResourceChat.java
Patch:
@@ -49,7 +49,7 @@
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MultivaluedMap;
 
-@Path("/chat")
+@Path("/")
 @Produces("text/html;charset=ISO-8859-1")
 public class ResourceChat {
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -160,7 +160,7 @@ Action action(HttpServletRequest req, HttpServletResponse res)
 
         boolean webSocketEnabled = false;
         if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-            String[] e = req.getHeaders("Connection").nextElement().split(",");
+            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
             for (String upgrade : e) {
                 if (upgrade.equalsIgnoreCase("Upgrade")) {
                     webSocketEnabled = true;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -275,7 +275,7 @@ public void suspend(long timeout, boolean flushComment) {
         if (!event.isResumedOnTimeout()) {
 
             if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-                String[] e = req.getHeaders("Connection").nextElement().split(",");
+                String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
                 for (String upgrade : e) {
                     if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                         if (writeHeaders && !cometSupport.supportWebSocket()) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -163,7 +163,7 @@ Action action(HttpServletRequest req, HttpServletResponse res)
 
         boolean webSocketEnabled = false;
         if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-            String[] e = req.getHeaders("Connection").nextElement().split(",");
+            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
             for (String upgrade : e) {
                 if (upgrade.equalsIgnoreCase("Upgrade")) {
                     webSocketEnabled = true;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -275,7 +275,7 @@ public void suspend(long timeout, boolean flushComment) {
         if (!event.isResumedOnTimeout()) {
 
             if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-                String[] e = req.getHeaders("Connection").nextElement().split(",");
+                String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
                 for (String upgrade : e) {
                     if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                         if (writeHeaders && !cometSupport.supportWebSocket()) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -163,7 +163,7 @@ Action action(HttpServletRequest req, HttpServletResponse res)
 
         boolean webSocketEnabled = false;
         if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-            String[] e = req.getHeaders("Connection").nextElement().split(",");
+            String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
             for (String upgrade : e) {
                 if (upgrade.equalsIgnoreCase("Upgrade")) {
                     webSocketEnabled = true;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -275,7 +275,7 @@ public void suspend(long timeout, boolean flushComment) {
         if (!event.isResumedOnTimeout()) {
 
             if (req.getHeaders("Connection") != null && req.getHeaders("Connection").hasMoreElements()) {
-                String[] e = req.getHeaders("Connection").nextElement().split(",");
+                String[] e = req.getHeaders("Connection").nextElement().toString().split(",");
                 for (String upgrade : e) {
                     if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) {
                         if (writeHeaders && !cometSupport.supportWebSocket()) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -53,7 +53,7 @@ private AtmosphereRequest(Builder b) {
         super(b.request);
         pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
         request = b.request;
-        headers = b.headers == null ? new HashMap<String, String[]>() : b.headers;
+        headers = b.headers == null ? new HashMap<String, String>() : b.headers;
         queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
         servletPath = b.servletPath;
         requestURI = b.requestURI;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -53,7 +53,7 @@ private AtmosphereRequest(Builder b) {
         super(b.request);
         pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
         request = b.request;
-        headers = b.headers == null ? Collections.<String, String>emptyMap() : b.headers;
+        headers = b.headers == null ? new HashMap<String, String>() : b.headers;
         queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
         servletPath = b.servletPath;
         requestURI = b.requestURI;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -53,7 +53,7 @@ private AtmosphereRequest(Builder b) {
         super(b.request);
         pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
         request = b.request;
-        headers = b.headers == null ? Collections.<String, String>emptyMap() : b.headers;
+        headers = b.headers == null ? new HashMap<String, String[]>() : b.headers;
         queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
         servletPath = b.servletPath;
         requestURI = b.requestURI;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -54,7 +54,7 @@ private AtmosphereRequest(Builder b) {
         pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
         request = b.request;
         headers = b.headers == null ? Collections.<String, String>emptyMap() : b.headers;
-        queryStrings = b.queryStrings == null ? Collections.<String, String[]>emptyMap() : b.queryStrings;
+        queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
         servletPath = b.servletPath;
         requestURI = b.requestURI;
         requestURL = b.requestURL;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereRequest.java
Patch:
@@ -54,7 +54,7 @@ private AtmosphereRequest(Builder b) {
         pathInfo = b.pathInfo == null ? b.request.getPathInfo() : b.pathInfo;
         request = b.request;
         headers = b.headers == null ? Collections.<String, String>emptyMap() : b.headers;
-        queryStrings = b.queryStrings == null ? Collections.<String, String[]>emptyMap() : b.queryStrings;
+        queryStrings = b.queryStrings == null ? new HashMap<String, String[]>() : b.queryStrings;
         servletPath = b.servletPath;
         requestURI = b.requestURI;
         requestURL = b.requestURL;

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -116,7 +116,7 @@ public final void dispatch(final HttpServletRequest request) throws IOException
 
         webSocketProtocol.onOpen(webSocket);
 
-        if (webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
+        if (!webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
             webSocketProtocol.onError(webSocket, new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed.", wsr));
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -116,7 +116,7 @@ public final void dispatch(final HttpServletRequest request) throws IOException
 
         webSocketProtocol.onOpen(webSocket);
 
-        if (webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
+        if (!webSocket.resource().getAtmosphereResourceEvent().isSuspended()) {
             webSocketProtocol.onError(webSocket, new WebSocketException("No AtmosphereResource has been suspended. The WebSocket will be closed.", wsr));
         }
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -444,9 +444,9 @@ protected void start() {
             broadcasterCache = bc.getBroadcasterCache();
             broadcasterCache.start();
 
+            setID(name);
             notifierFuture = bc.getExecutorService().submit(getBroadcastHandler());
             asyncWriteFuture = bc.getAsyncWriteService().submit(getAsyncWriteHandler());
-            setID(name);
         }
     }
 

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -69,7 +69,7 @@ public void run() {
                 try {
                     incomingBroadcast();
                 } catch (Throwable t) {
-                    logger.trace("incomingBroadcast Exception. Broadcaster will be broken unless reconfigured", t);
+                    logger.debug("incomingBroadcast Exception. Broadcaster will be broken unless reconfigured", t);
                     destroy();
                     return;
                 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -397,7 +397,7 @@ void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
         }
     }
 
-    private void destroyResource(AtmosphereResourceImpl r) {
+    public static void destroyResource(AtmosphereResource<?,?> r) {
         r.removeEventListeners();
         try {
             r.getBroadcaster().removeAtmosphereResource(r);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -385,7 +385,7 @@ void invokeAtmosphereHandler(AtmosphereResourceImpl r) throws IOException {
         }
     }
 
-    private void destroyResource(AtmosphereResourceImpl r) {
+    public static void destroyResource(AtmosphereResource<?,?> r) {
         r.removeEventListeners();
         try {
             r.getBroadcaster().removeAtmosphereResource(r);

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -143,7 +143,7 @@ public Action service(HttpServletRequest req, HttpServletResponse res)
                 logger.debug("Client closed connection: response: {}", res);
                 action = cancelled(req, res);
             } else {
-                logger.debug("Cancelling response: {}", res);
+                logger.trace("Cancelling response: {}", res);
             }
 
             event.close();

File: modules/cpr/src/main/java/org/atmosphere/container/TomcatCometSupport.java
Patch:
@@ -143,7 +143,7 @@ public Action service(HttpServletRequest req, HttpServletResponse res)
                 logger.debug("Client closed connection: response: {}", res);
                 action = cancelled(req, res);
             } else {
-                logger.debug("Cancelling response: {}", res);
+                logger.trace("Cancelling response: {}", res);
             }
 
             event.close();

File: modules/cpr/src/test/java/org/atmosphere/tests/BroadcasterScopeTest.java
Patch:
@@ -83,10 +83,11 @@ public static class Meteor1 extends HttpServlet {
         @Override
         public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
             final Meteor m = Meteor.build(req);
+
+            m.suspend(5000, false);
             m.getBroadcaster().setScope(Broadcaster.SCOPE.REQUEST);
             req.getSession().setAttribute("meteor", m);
 
-            m.suspend(5000, false);
             broadcasterId.set(m.getBroadcaster().getID());
 
             res.getOutputStream().write("resume".getBytes());

File: modules/cpr/src/test/java/org/atmosphere/tests/BroadcasterScopeTest.java
Patch:
@@ -83,10 +83,11 @@ public static class Meteor1 extends HttpServlet {
         @Override
         public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException {
             final Meteor m = Meteor.build(req);
+
+            m.suspend(5000, false);
             m.getBroadcaster().setScope(Broadcaster.SCOPE.REQUEST);
             req.getSession().setAttribute("meteor", m);
 
-            m.suspend(5000, false);
             broadcasterId.set(m.getBroadcaster().getID());
 
             res.getOutputStream().write("resume".getBytes());

File: modules/cpr/src/test/java/org/atmosphere/tests/ConcurrentBroadcastTest.java
Patch:
@@ -103,11 +103,10 @@ public void startServer() throws Exception {
         server = new Server(port);
         root = new Context(server, "/", Context.SESSIONS);
         atmoServlet = new AtmosphereServlet();
+        atmoServlet.addAtmosphereHandler("/suspend", new SuspendAndResume());
         configureCometSupport();
         root.addServlet(new ServletHolder(atmoServlet), ROOT);
         server.start();
-
-        atmoServlet.addAtmosphereHandler("/suspend", new SuspendAndResume());
     }
 
     public void configureCometSupport() {
@@ -158,6 +157,7 @@ public Response onCompleted(Response response) throws Exception {
 
         } catch (Exception e) {
             logger.error("test failed", e);
+            e.printStackTrace();
             fail(e.getMessage());
         } finally {
             if (b != null) b.destroy();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -199,7 +199,8 @@ public interface AtmosphereResource<E, F> extends Trackable, AtmosphereEventLife
     public Broadcaster getBroadcaster();
 
     /**
-     * Set the current {@link Broadcaster}
+     * Set the current {@link Broadcaster}. If null, a new Broadcaster will be created with {@link Broadcaster.SCOPE#REQUEST}
+     * will be created if that resource hasn't been yet suspended.
      *
      * @param broadcaster
      */

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -199,7 +199,8 @@ public interface AtmosphereResource<E, F> extends Trackable, AtmosphereEventLife
     public Broadcaster getBroadcaster();
 
     /**
-     * Set the current {@link Broadcaster}
+     * Set the current {@link Broadcaster}. If null, a new Broadcaster will be created with {@link Broadcaster.SCOPE#REQUEST}
+     * will be created if that resource hasn't been yet suspended.
      *
      * @param broadcaster
      */

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketProcessor.java
Patch:
@@ -91,14 +91,17 @@ public final void dispatch(final HttpServletRequest request) throws IOException
         }
 
         String pathInfo = request.getPathInfo();
+        String requestURI = request.getRequestURI();
         if (atmosphereServlet.getAtmosphereConfig().getWebServerName().toLowerCase().indexOf("glassfish") != -1) {
             pathInfo = pathInfo.substring(pathInfo.indexOf("/", 1));
+            requestURI = requestURI.substring(requestURI.indexOf("/", 1));
         }
 
         WebSocketHttpServletResponse wsr = new WebSocketHttpServletResponse<WebSocket>(webSocket, webSocketProtocol);
         AtmosphereRequest r = new AtmosphereRequest.Builder()
                 .request(request)
                 .pathInfo(pathInfo)
+                .requestURI(requestURI)
                 .headers(configureHeader(request))
                 .build();
 

File: samples/jquery-meteor-pubsub/src/main/java/org/atmosphere/samples/pubsub/MeteorPubSub.java
Patch:
@@ -100,8 +100,8 @@ public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOExc
     }
 
     String trackingId(HttpServletRequest req) {
-        String trackingId = req.getAttribute(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) != null ?
-                (String) req.getAttribute(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) : req.getParameter(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
+        String trackingId = req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) != null ?
+                req.getHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID) : req.getParameter(HeaderConfig.X_ATMOSPHERE_TRACKING_ID);
         return trackingId;
     }
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -181,6 +181,7 @@ public boolean remove(Broadcaster b, Object id) {
             store.remove(id, b);
             logger.debug("Removing Broadcaster {} which internal reference is {} ", id, b.getID());
         }
+        return removed;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -87,7 +87,7 @@ protected DefaultBroadcasterFactory(Class<? extends Broadcaster> clazz, String b
 
     private void configure(String broadcasterLifeCyclePolicy) {
 
-        int maxIdleTime = 5 * 60 * 100;
+        int maxIdleTime = 5 * 60 * 1000;
         String idleTime = config.getInitParameter(ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY_IDLETIME);
         if (idleTime != null) {
             maxIdleTime = Integer.parseInt(idleTime);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -583,7 +583,7 @@ protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundExcep
                     (Class<? extends Broadcaster>) Thread.currentThread().getContextClassLoader()
                             .loadClass(broadcasterClassName);
 
-            logger.info("Using BroadcasterFactory class: {}", broadcasterFactoryClassName);
+            logger.info("Using BroadcasterFactory class: {}", DefaultBroadcasterFactory.class.getName());
 
             broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy, config);
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -130,7 +130,7 @@ public synchronized void destroy() {
         if (destroyed.get()) return;
 
         try {
-            logger.debug("Broadcaster {} is being destroyed and cannot be re-used", getID());
+            logger.trace("Broadcaster {} is being destroyed and cannot be re-used", getID());
 
             if (BroadcasterFactory.getDefault() != null) {
                 BroadcasterFactory.getDefault().remove(this, this.getID());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -52,15 +52,13 @@
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 import java.io.IOException;
-import java.util.Enumeration;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import static org.atmosphere.cpr.ApplicationConfig.BROADCASTER_FACTORY;
 import static org.atmosphere.cpr.ApplicationConfig.MAX_INACTIVE;
 import static org.atmosphere.cpr.HeaderConfig.X_ATMOSPHERE_ERROR;
 

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BasePubSubTest.java
Patch:
@@ -101,7 +101,6 @@ public void testSuspendWithCommentsTimeout() {
             String resume = r.getResponseBody();
             String[] ct = r.getContentType().toLowerCase().split(";");
             assertEquals(ct[0].trim(), "text/plain");
-            assertEquals(ct[1].trim(), "charset=iso-8859-1");
             assertEquals(resume, AtmosphereResourceImpl.createStreamingPadding(null));
         } catch (Exception e) {
             logger.error("test failed", e);

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -69,8 +69,7 @@ public class DefaultBroadcasterFactory extends BroadcasterFactory {
 
     private static final Logger logger = LoggerFactory.getLogger(DefaultBroadcasterFactory.class);
 
-    private final ConcurrentHashMap<Object, Broadcaster> store
-            = new ConcurrentHashMap<Object, Broadcaster>();
+    private final ConcurrentHashMap<Object, Broadcaster> store = new ConcurrentHashMap<Object, Broadcaster>();
 
     private final Class<? extends Broadcaster> clazz;
 
@@ -214,7 +213,7 @@ public Broadcaster lookup(Class<? extends Broadcaster> c, Object id, boolean cre
             throw new IllegalStateException(msg);
         }
 
-        if (b == null && createIfNull) {
+        if ((b == null && createIfNull) || (b !=null && b.isDestroyed())) {
             b = get(c, id);
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -232,7 +232,7 @@ public void action(AtmosphereResourceImpl r) {
      * @throws javax.servlet.ServletException
      */
     protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletException {
-        String path = req.getRequestURI();
+        String path = req.getServletPath() + req.getPathInfo();
         if (path == null || path.length() == 0) {
             path = "/*";
         }
@@ -242,7 +242,7 @@ protected AtmosphereHandlerWrapper map(HttpServletRequest req) throws ServletExc
             final Map<String, String> m = new HashMap<String, String>();
             for (Map.Entry<String,AtmosphereHandlerWrapper> e : config.handlers().entrySet()) {
                 UriTemplate t = new UriTemplate(e.getKey());
-                logger.trace("Trying to map {} to {}", t, path);
+                logger.debug("Trying to map {} to {}", t, path);
                 if (t.match(path, m)) {
                     atmosphereHandlerWrapper = e.getValue();
                     logger.trace("Mapped {} to {}", t, e.getValue());

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -432,7 +432,7 @@ public void addAtmosphereHandler(String mapping, AtmosphereHandler h) {
     private void addMapping(String path, AtmosphereHandlerWrapper w) {
         // We are using JAXRS mapping algorithm.
         if (path.contains("*")) {
-            path = path.replace("*", "{all}");
+            path = path.replace("*", "[/a-zA-Z0-9]+");
         }
         atmosphereHandlers.put(path, w);
 

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -124,7 +124,7 @@ protected void broadcastReceivedMessage(Object message) {
     @Override
     public <T> Future<T> broadcast(T msg) {
         if (destroyed.get()) {
-            logger.error("This Broadcaster has been destroyed and cannot be used");
+            logger.warn("This Broadcaster has been destroyed and cannot be used {}" , getID());
             return null;
         }
 
@@ -148,7 +148,7 @@ public <T> Future<T> broadcast(T msg) {
     @Override
     public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {
         if (destroyed.get()) {
-            logger.error("This Broadcaster has been destroyed and cannot be used");
+            logger.warn("This Broadcaster has been destroyed and cannot be used {}" , getID());
             return null;
         }
 
@@ -172,7 +172,7 @@ public <T> Future<T> broadcast(T msg, AtmosphereResource<?, ?> r) {
     @Override
     public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
         if (destroyed.get()) {
-            logger.error("This Broadcaster has been destroyed and cannot be used");
+            logger.warn("This Broadcaster has been destroyed and cannot be used {}" , getID());
             return null;
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -55,6 +55,7 @@
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.EMPTY_DESTROY;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_DESTROY;
+import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.IDLE_RESUME;
 import static org.atmosphere.cpr.BroadcasterLifeCyclePolicy.ATMOSPHERE_RESOURCE_POLICY.NEVER;
 
 /**
@@ -101,6 +102,8 @@ private void configure(String broadcasterLifeCyclePolicy) {
             policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE).idleTimeInMS(maxIdleTime).build();
         } else if (IDLE_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
             policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(maxIdleTime).build();
+        } else if (IDLE_RESUME.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
+            policy = new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_RESUME).idleTimeInMS(maxIdleTime).build();
         } else if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) {
             policy = new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build();
         } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -122,7 +122,7 @@ public final Broadcaster get(Object id) {
 
         Broadcaster b = store.get(id);
         if (b != null) {
-            throw new IllegalStateException("Broadcaster already existing. Use BroadcasterFactory.lookup instead");
+            throw new IllegalStateException("Broadcaster already existing " + id + ". Use BroadcasterFactory.lookup instead");
         }
 
         synchronized (id) {
@@ -153,7 +153,7 @@ public final Broadcaster get(Class<? extends Broadcaster> c, Object id) {
         if (c == null) throw new NullPointerException("Class is null");
 
         if (getBroadcaster(id) != null)
-            throw new IllegalStateException("Broadcaster already existing. Use BroadcasterFactory.lookup instead");
+            throw new IllegalStateException("Broadcaster already existing " + id + ". Use BroadcasterFactory.lookup instead");
 
         Broadcaster b = null;
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -234,7 +234,7 @@ public void removeAllAtmosphereResource(AtmosphereResource<?, ?> r) {
                 for (Broadcaster b : lookupAll()) {
                     try {
                         // Prevent deadlock
-                        if (!b.getAtmosphereResources().contains(r)) {
+                        if (b.getAtmosphereResources().contains(r)) {
                             b.removeAtmosphereResource(r);
                         }
                     } catch (IllegalStateException ex) {

File: extras/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java
Patch:
@@ -48,6 +48,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.lang.reflect.InvocationTargetException;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 /**
@@ -63,7 +64,7 @@ public class JGroupsFilter extends ReceiverAdapter implements ClusterBroadcastFi
     private Broadcaster bc;
     private final ConcurrentLinkedQueue<Object> receivedMessages = new ConcurrentLinkedQueue<Object>();
 
-    public JGroupsFilter() throws InstantiationException, IllegalAccessException {
+    public JGroupsFilter() {
         this(BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, "JGroupFilter"));
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -553,8 +553,8 @@ public Enumeration<String> getInitParameterNames() {
                 }
             };
             doInitParams(scFacade);
-            configureDefaultBroadcasterFactory();
             doInitParamsForWebSocket(scFacade);
+            configureDefaultBroadcasterFactory();
             loadConfiguration(scFacade);
 
             autoDetectContainer();
@@ -631,7 +631,6 @@ protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundExcep
                     broadcasterConfig.setBroadcasterCache(cache);
                 }
             }
-            w.broadcaster.setID(e.getKey());
         }
     }
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/BroadcasterFactoryInjector.java
Patch:
@@ -105,12 +105,12 @@ BroadcasterFactory _get() {
             }
 
             @Override
-            public Broadcaster get() throws IllegalAccessException, InstantiationException {
+            public Broadcaster get() {
                 return _get().get();
             }
 
             @Override
-            public Broadcaster get(Class<? extends Broadcaster> c, Object id) throws IllegalAccessException, InstantiationException {
+            public Broadcaster get(Class<? extends Broadcaster> c, Object id)  {
                 return _get().get(c, id);
             }
 

File: samples/rest-twitter/src/main/java/org/atmosphere/samples/twitter/TwitterBroadcaster.java
Patch:
@@ -39,6 +39,7 @@
 
 import org.atmosphere.cpr.AtmosphereResource;
 import org.atmosphere.cpr.AtmosphereResourceEvent;
+import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.jersey.JerseyBroadcaster;
 
@@ -52,7 +53,8 @@
  */
 public class TwitterBroadcaster extends JerseyBroadcaster {
 
-    public TwitterBroadcaster() {
+    public TwitterBroadcaster(String id, AtmosphereServlet.AtmosphereConfig config) {
+        super(id, config);
     }
 
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -637,7 +637,7 @@ protected void configureBroadcaster(ServletContext sc) throws ClassNotFoundExcep
 
     protected void doInitParamsForWebSocket(ServletConfig sc) {
         String s = sc.getInitParameter(WEBSOCKET_SUPPORT);
-        if (s != null) {
+        if (s != null && Boolean.parseBoolean(s)) {
             webSocketEnabled = true;
             sessionSupport(false);
         }

File: samples/meteor-chat/src/main/java/org/atmosphere/samples/chat/MeteorChat.java
Patch:
@@ -37,8 +37,6 @@
  */
 package org.atmosphere.samples.chat;
 
-import org.atmosphere.commons.jersey.JsonpFilter;
-import org.atmosphere.commons.util.EventsLogger;
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.Meteor;
 import org.atmosphere.util.XSSHtmlFilter;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -384,7 +384,7 @@ protected void setIsInScope(boolean isInScope) {
     /**
      * Is the {@link HttpServletRequest} still valid.
      *
-     * @return true if the {@link HttpServletRequest} still vali
+     * @return true if the {@link HttpServletRequest} still valid
      */
     public boolean isInScope() {
         return isInScope;

File: extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
Patch:
@@ -226,7 +226,7 @@ public void outgoingBroadcast(Object message) {
             try {
                 jedisPublisher.publish(getID(), message.toString());
             } catch (JedisException e) {
-                logger.warn("outgoingBroadcast exception, retying a connection", e);
+                logger.warn("outgoingBroadcast exception, retrying a connection", e);
                 // Try a second time.
                 jedisPublisher = sharedPool ? jedisPool.getResource() : new Jedis(uri.getHost(), uri.getPort());
             }

File: extras/redis/src/main/java/org/atmosphere/plugin/redis/RedisBroadcaster.java
Patch:
@@ -99,7 +99,7 @@ public synchronized void setUp() {
         logger.info("{} shared connection pool {}", getClass().getName(), sharedPool);
 
         if (sharedPool) {
-            if (config.properties().get(REDIS_SHARED_POOL) == null) {
+            if (config.properties().get(REDIS_SHARED_POOL) != null) {
                 jedisPool = (JedisPool) config.properties().get(REDIS_SHARED_POOL);
             }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -124,7 +124,7 @@ public AtmosphereResourceImpl(AtmosphereConfig config, Broadcaster broadcaster,
         injectCacheHeaders = nocache != null ? false : true;
 
         String ac = config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER);
-        enableAccessControl = ac != null ? Boolean.parseBoolean(ac) : true;
+        enableAccessControl = ac != null ? !Boolean.parseBoolean(ac) : true;
 
         String wh = config.getInitParameter(FrameworkConfig.WRITE_HEADERS);
         writeHeaders = wh != null ? Boolean.parseBoolean(wh) : true;

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketHttpServletRequest.java
Patch:
@@ -172,7 +172,7 @@ public final static class Builder {
         public byte[] dataBytes;
         public int offset;
         public int length;
-        public String encoding;
+        public String encoding = "UTF-8";
         public String methodType;
         public String contentType;
         public String data;

File: modules/cpr/src/test/java/org/atmosphere/tests/BaseTest.java
Patch:
@@ -48,6 +48,7 @@
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.cpr.DefaultBroadcaster;
+import org.atmosphere.cpr.HeaderConfig;
 import org.atmosphere.util.StringFilterAggregator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -894,7 +895,7 @@ public void testHeaderBroadcasterCache() throws IllegalAccessException, ClassNot
 
             public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> event) throws IOException {
                 try {
-                    if (event.getRequest().getHeader(HeaderBroadcasterCache.HEADER_CACHE) != null) {
+                    if (event.getRequest().getHeader(HeaderConfig.X_CACHE_DATE) != null) {
                         event.suspend(-1, false);
                         return;
                     }
@@ -933,7 +934,7 @@ public void onStateChange(AtmosphereResourceEvent<HttpServletRequest, HttpServle
             c.prepareGet(urlTarget).execute().get();
 
             //Suspend
-            Response r = c.prepareGet(urlTarget).addHeader(HeaderBroadcasterCache.HEADER_CACHE, String.valueOf(t1)).execute(new AsyncCompletionHandler<Response>() {
+            Response r = c.prepareGet(urlTarget).addHeader(HeaderConfig.X_CACHE_DATE, String.valueOf(t1)).execute(new AsyncCompletionHandler<Response>() {
 
                 @Override
                 public Response onCompleted(Response r) throws Exception {

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BasePubSubTest.java
Patch:
@@ -44,7 +44,9 @@
 import com.ning.http.client.HttpResponseStatus;
 import com.ning.http.client.Response;
 import org.atmosphere.cache.HeaderBroadcasterCache;
+import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
+import org.atmosphere.cpr.HeaderConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.testng.annotations.Test;
@@ -456,7 +458,7 @@ public void testHeaderBroadcasterCache() throws IllegalAccessException, ClassNot
             c.preparePost(urlTarget).addParameter("message", "cachememe").execute().get();
 
             //Suspend
-            Response r = c.prepareGet(urlTarget + "/subscribeAndResume").addHeader(HeaderBroadcasterCache.HEADER_CACHE, String.valueOf(t1)).execute(new AsyncCompletionHandler<Response>() {
+            Response r = c.prepareGet(urlTarget + "/subscribeAndResume").addHeader(HeaderConfig.X_CACHE_DATE, String.valueOf(t1)).execute(new AsyncCompletionHandler<Response>() {
 
                 @Override
                 public Response onCompleted(Response r) throws Exception {

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/TomcatJerseyTest.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.catalina.startup.Embedded;
 import org.apache.coyote.http11.Http11NioProtocol;
 import org.atmosphere.container.TomcatCometSupport;
+import org.atmosphere.cpr.ApplicationConfig;
 import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.CometSupport;
 import org.testng.annotations.BeforeMethod;
@@ -60,7 +61,7 @@ public class TomcatJerseyTest extends BasePubSubTest {
     public static class TomcatAtmosphereServlet extends AtmosphereServlet {
 
         public void init(final ServletConfig sc) throws ServletException {
-            addInitParameter(CometSupport.MAX_INACTIVE, "20000");
+            addInitParameter(ApplicationConfig.MAX_INACTIVE, "20000");
             addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());
             addInitParameter("org.atmosphere.cpr.broadcasterClass", RecyclableBroadcaster.class.getName());
             cometSupport = new TomcatCometSupport(getAtmosphereConfig());

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultCometSupportResolver.java
Patch:
@@ -69,7 +69,7 @@ public class DefaultCometSupportResolver implements CometSupportResolver {
 
     public final static String SERVLET_30 = "javax.servlet.AsyncListener";
     public final static String GLASSFISH_V2 = "com.sun.enterprise.web.PEWebContainer";
-    public final static String TOMCAT_7 = "org.apache.catalina.core.StuckThreadDetectionValve";
+    public final static String TOMCAT_7 = "org.apache.catalina.comet.CometFilterChain";
     public final static String TOMCAT = "org.apache.coyote.http11.Http11NioProcessor";
     public final static String JBOSS_5 = "org.jboss.";
     public final static String JETTY = "org.mortbay.util.ajax.Continuation";

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1152,7 +1152,7 @@ public void doPost(HttpServletRequest req, HttpServletResponse res)
      * @throws IOException
      * @throws ServletException
      */
-    protected Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
+    public Action doCometSupport(HttpServletRequest req, HttpServletResponse res)
             throws IOException, ServletException {
         req.setAttribute(BROADCASTER_FACTORY, broadcasterFactory);
         req.setAttribute(PROPERTY_USE_STREAM, useStreamForFlushingComments);

File: modules/cpr/src/main/java/org/atmosphere/websocket/processor/HttpServletRequestWebSocketProcessor.java
Patch:
@@ -53,13 +53,13 @@ public class HttpServletRequestWebSocketProcessor extends WebSocketProcessor imp
 
     public HttpServletRequestWebSocketProcessor(AtmosphereServlet atmosphereServlet, WebSocket webSocket) {
         super(atmosphereServlet, webSocket);
-        String contentType = atmosphereServlet.config.getInitParameter(AtmosphereServlet.WEBSOCKET_CONTENT_TYPE);
+        String contentType = atmosphereServlet.getAtmosphereConfig().getInitParameter(AtmosphereServlet.WEBSOCKET_CONTENT_TYPE);
         if (contentType == null) {
             contentType = "text/html";
         }
         this.contentType = contentType;
 
-        String methodType = atmosphereServlet.config.getInitParameter(AtmosphereServlet.WEBSOCKET_METHOD);
+        String methodType = atmosphereServlet.getAtmosphereConfig().getInitParameter(AtmosphereServlet.WEBSOCKET_METHOD);
         if (methodType == null) {
             methodType = "POST";
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -725,7 +725,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?, ?>> subset) {
         }
 
         // To avoid excessive synchronization, we allow resources.size() to get larger that maxSuspendResource
-        if (maxSuspendResource.get() > 0 && resources.size() <= maxSuspendResource.get()) {
+        if (maxSuspendResource.get() > 0 && resources.size() >= maxSuspendResource.get()) {
             // Resume the first in.
             if (policy == POLICY.FIFO) {
                 // TODO handle null return from poll()

File: modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java
Patch:
@@ -161,10 +161,10 @@ public void notifyListener(WebSocketEventListener.WebSocketEvent event) {
                         WebSocketEventListener.class.cast(l).onMessage(event);
                         break;
                     case HANDSHAKE:
-                        WebSocketEventListener.class.cast(l).onMessage(event);
+                        WebSocketEventListener.class.cast(l).onHandshake(event);
                         break;
                     case CLOSE:
-                        WebSocketEventListener.class.cast(l).onMessage(event);
+                        WebSocketEventListener.class.cast(l).onClose(event);
                         break;
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyCometSupportWithWebSocket.java
Patch:
@@ -86,7 +86,7 @@ public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol)
             }
 
             webSocketFactory.setBufferSize(bufferSize);
-            int timeOut = 60000;
+            int timeOut = 5 * 60000;
             if (config.getInitParameter(AtmosphereServlet.WEBSOCKET_IDLETIME) != null) {
                 timeOut = Integer.valueOf(config.getInitParameter(AtmosphereServlet.WEBSOCKET_IDLETIME));
             }

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderPubSubTest.java
Patch:
@@ -137,7 +137,6 @@ public SuspendResponse<String> subscribeAndResumeWithAPI() {
         SuspendResponse<String> r = new SuspendResponse.SuspendResponseBuilder<String>()
                 .outputComments(false)
                 .resumeOnBroadcast(true)
-                .entity("suspend")
                 .build();
 
         return r;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -878,6 +878,7 @@ protected void loadAtmosphereDotXml(InputStream stream, URLClassLoader c)
                         isJersey = true;
                         initParams.put(DISABLE_ONSTATE_EVENT, "true");
                         useStreamForFlushingComments = true;
+                        broadcasterClassName = lookupDefaultBroadcasterType();
                     }
                     IntrospectionUtils.setProperty(handler, p.name, p.value);
                 }

File: modules/cpr/src/main/java/org/atmosphere/container/JettyCometSupportWithWebSocket.java
Patch:
@@ -106,10 +106,9 @@ public Action service(HttpServletRequest req, HttpServletResponse res)
         if (!webSocketEnabled) {
             return super.service(req, res);
         } else {
-            if (webSocketFactory != null && req.getAttribute("websocket") == null) {
-                req.setAttribute("websocket", "inprocess");
+            if (webSocketFactory != null && !(Boolean)req.getAttribute(WebSocketSupport.WEBSOCKET_INITIATED)) {
                 webSocketFactory.acceptWebSocket(req, res);
-                req.setAttribute(WebSocketSupport.WEBSOCKET_SUSPEND, "true");
+                req.setAttribute(WebSocketSupport.WEBSOCKET_INITIATED, "true");
                 return new Action();
             }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterLifeCyclePolicy.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * This class can be used to configure the life cyle of a {@link org.atmosphere.cpr.Broadcaster}, e.g when a broadcaster
+ * This class can be used to configure the life cycle of a {@link org.atmosphere.cpr.Broadcaster}, e.g when a broadcaster
  * gets destroyed {@link org.atmosphere.cpr.Broadcaster#destroy()} or when it's associated resources
  * get released {@link Broadcaster#releaseExternalResources()}.
  *

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -68,8 +68,7 @@ public SimpleBroadcaster(String id) {
     @Override
     public void setBroadcasterConfig(BroadcasterConfig bc) {
         this.bc = bc;
-        bc.setExecutorService(null);
-        bc.setAsyncWriteService(null);
+        bc.setExecutorService(null, false).setAsyncWriteService(null, false);
     }
 
     /**

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -46,6 +46,7 @@ public final static void broadcast(final AtmosphereResource<?, ?> r, final Atmos
                 cr.setResponse((Response) e.getMessage());
                 cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                 cr.write();
+                cr.getOutputStream().flush();
             } else if (e.getMessage() instanceof List) {
                 for (Object msg : (List<Object>) e.getMessage()) {
                     cr.setResponse(Response.ok(msg).build());
@@ -57,8 +58,8 @@ public final static void broadcast(final AtmosphereResource<?, ?> r, final Atmos
                 cr.setResponse(Response.ok(e.getMessage()).build());
                 cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                 cr.write();
+                cr.getOutputStream().flush();
             }
-            cr.getOutputStream().flush();
         } catch (Throwable t) {
             onException(t, r);
         } finally {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -207,6 +207,8 @@ public class AtmosphereServlet extends AbstractAsyncServlet implements CometProc
     public final static String BROADCASTER_LIFECYCLE_POLICY = "org.atmosphere.cpr.broadcasterLifeCyclePolicy";
     public final static String WEBSOCKET_PROCESSOR = WebSocketProcessor.class.getName();
     public static final String WRITE_HEADERS = AtmosphereResource.class.getName() + "." + "writeHeader";
+    public final static String WEBSOCKET_CONTENT_TYPE = "org.atmosphere.cpr.webSocket.messageContentType";
+    public final static String WEBSOCKET_METHOD = "org.atmosphere.cpr.webSocket.messageMethod";
 
 
     private final ArrayList<String> possibleAtmosphereHandlersCandidate = new ArrayList<String>();

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -61,6 +61,7 @@
 import org.atmosphere.cpr.ClusterBroadcastFilter;
 import org.atmosphere.cpr.Trackable;
 import org.atmosphere.di.InjectorProvider;
+import org.atmosphere.websocket.WebSocketSupport;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -334,7 +335,7 @@ public ContainerResponse filter(ContainerRequest request, ContainerResponse resp
         void configureHeaders(ContainerResponse response) throws IOException {
 
             String upgrade = servletReq.getHeader("Connection");
-            boolean webSocketSupported = servletReq.getHeader("WebSocketSupport.WEBSOCKET_SUSPEND") != null;
+            boolean webSocketSupported = servletReq.getAttribute(WebSocketSupport.WEBSOCKET_SUSPEND) != null;
             if (upgrade != null && upgrade.equalsIgnoreCase("Upgrade")) {
                 if (!webSocketSupported) {
                     response.getHttpHeaders().putSingle("X-Atmosphere-error", "Websocket protocol not supported");

File: modules/cpr/src/main/java/org/atmosphere/container/JettyWebSocketSupport.java
Patch:
@@ -63,21 +63,20 @@ public class JettyWebSocketSupport extends Jetty7CometSupport {
     private static final Logger logger = LoggerFactory.getLogger(JettyWebSocketSupport.class);
     private final WebSocketFactory webSocketFactory;
 
-
-
     public JettyWebSocketSupport(final AtmosphereConfig config) {
         super(config);
 
         String[] jettyVersion = config.getServletContext().getServerInfo().substring(6).split("\\.");
         if (Integer.valueOf(jettyVersion[0]) > 7 || Integer.valueOf(jettyVersion[0]) == 7 && Integer.valueOf(jettyVersion[1]) > 4) {
-            // Create and configure WS factory
             webSocketFactory = new WebSocketFactory(new WebSocketFactory.Acceptor() {
                 public boolean checkOrigin(HttpServletRequest request, String origin) {
                     // Allow all origins
+                    logger.debug("WebSocket-checkOrigin request {} with origin {}", request.getRequestURI(), origin);
                     return true;
                 }
 
                 public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
+                    logger.debug("WebSocket-connect request {} with protocol {}", request.getRequestURI(), protocol);
                     return new JettyWebSocketHandler(request, config.getServlet(), config.getServlet().getWebSocketProcessorClassName());
                 }
             });

File: modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java
Patch:
@@ -77,6 +77,7 @@ public final void connect(final HttpServletRequest request) throws IOException {
             logger.info("Atmosphere detected WebSocketSupport: {}", webSocketSupport.getClass().getName());
         }
 
+        request.setAttribute(WebSocketSupport.WEBSOCKET_SUSPEND, "true");
         try {
             atmosphereServlet
                     .doCometSupport(request, new WebSocketHttpServletResponse<WebSocketSupport>(webSocketSupport));

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereHandler.java
Patch:
@@ -51,7 +51,7 @@
  * will allow a suspended response to write the content of the message
  * {@link AtmosphereHandler#onStateChange(org.atmosphere.cpr.AtmosphereResourceEvent)}.
  * <p/>
- * <striong>A class implementing {@link AtmosphereHandler} must be thread safe</strong>
+ * <strong>A class implementing {@link AtmosphereHandler} must be thread safe</strong>
  * <p/>
  * For example, a simple Chat based AtmosphereHandler will take the form of
  * <p/>

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -223,7 +223,7 @@ public class AtmosphereServlet extends AbstractAsyncServlet implements CometProc
     /**
      * The list of {@link AtmosphereHandler} and their associated mapping.
      */
-    private final Map<String, AtmosphereHandlerWrapper> atmosphereHandlers =
+    protected final Map<String, AtmosphereHandlerWrapper> atmosphereHandlers =
             new ConcurrentHashMap<String, AtmosphereHandlerWrapper>();
 
     private final ConcurrentLinkedQueue<String> broadcasterTypes = new ConcurrentLinkedQueue<String>();

File: extras/guice/src/main/java/org/atmosphere/guice/AtmosphereGuiceServlet.java
Patch:
@@ -68,7 +68,7 @@
 /**
  * Google Guice Integration. To use it, just do in web.xml:
  *
- * {@code
+ * <blockquote><code>
      &lt;web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:j2ee = "http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
@@ -107,7 +107,7 @@ protected void configureServlets() {
             });
         }
     }
- }
+ </code></blockquote>
  *
  * @author Jeanfrancois Arcand
  * @author Richard Wallace

File: modules/cpr/src/main/java/org/atmosphere/websocket/container/Jetty8WebSocketSupport.java
Patch:
@@ -55,7 +55,8 @@ public void write(byte frame, byte[] data) throws IOException {
 
     public void write(byte frame, byte[] data, int offset, int length) throws IOException {
         if (!connection.isOpen()) throw new IOException("Connection closed");
-        connection.sendMessage(data, offset, length);
+        // That sucks, but there is a bug in Jetty that add junk in front of the request
+        connection.sendMessage(new String(data,offset,length, "UTF-8"));
     }
 
     public void close() throws IOException {

File: plugins/jgroups/src/main/java/org/atmosphere/plugin/jgroups/JGroupsFilter.java
Patch:
@@ -110,7 +110,7 @@ public void receive(final Message message) {
                     receivedMessages.offer(msg);
                     JGroupsBroadcaster.BroadcastMessage b = JGroupsBroadcaster.BroadcastMessage.class.cast(msg);
                     if (b.getTopicId().equalsIgnoreCase(bc.getID())) {
-                        bc.broadcast(b.getTopicId());
+                        bc.broadcast(b.getMessage());
                     }
                 }
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultCometSupportResolver.java
Patch:
@@ -68,7 +68,7 @@ public class DefaultCometSupportResolver implements CometSupportResolver {
 
     public final static String SERVLET_30 = "javax.servlet.AsyncListener";
     public final static String GLASSFISH_V2 = "com.sun.enterprise.web.PEWebContainer";
-    public final static String TOMCAT_7 = "org.apache.catalina.valves.CrawlerSessionManagerValve";
+    public final static String TOMCAT_7 = "org.apache.catalina.core.JreMemoryLeakPreventionListener";
     public final static String TOMCAT = "org.apache.coyote.http11.Http11NioProcessor";
     public final static String JBOSS_5 = "org.jboss.";
     public final static String JETTY = "org.mortbay.util.ajax.Continuation";

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -102,7 +102,7 @@ public void onRequest(AtmosphereResource<HttpServletRequest,
                 if (clusterType.equals("jgroups")){
                     event.getAtmosphereConfig().getServletContext().log("JGroupsFilter enabled");
                     bc.getBroadcasterConfig().addFilter(
-                            new JGroupsFilter(bc, event.getAtmosphereConfig().getWebServerName()));
+                            new JGroupsFilter(bc));
                 }
             }
 

File: modules/compat-weblogic/src/main/java/org/eclipse/jetty/websocket/WebSocketServlet.java
Patch:
@@ -16,11 +16,9 @@
 package org.eclipse.jetty.websocket;
 
 import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
 
 /**
  * Fake class for portability across servers.
  */
 public abstract class WebSocketServlet extends HttpServlet {
-    abstract protected WebSocket doWebSocketConnect(HttpServletRequest request, String protocol);
 }

File: modules/compat-tomcat/src/main/java/org/apache/catalina/comet/CometProcessor.java
Patch:
@@ -70,8 +70,6 @@
 
 package org.apache.catalina.comet;
 
-import org.apache.catalina.CometEvent;
-
 import javax.servlet.Servlet;
 import javax.servlet.ServletException;
 import java.io.IOException;

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -594,6 +594,7 @@ protected void configureBroadcaster() throws ClassNotFoundException, Instantiati
 
             broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy);
             config.broadcasterFactory = broadcasterFactory;
+            BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
         }
 
         Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -595,6 +595,7 @@ protected void configureBroadcaster() throws ClassNotFoundException, Instantiati
 
             broadcasterFactory = new DefaultBroadcasterFactory(bc, broadcasterLifeCyclePolicy);
             config.broadcasterFactory = broadcasterFactory;
+            BroadcasterFactory.setBroadcasterFactory(broadcasterFactory, config);
         }
 
         Iterator<Entry<String, AtmosphereHandlerWrapper>> i = atmosphereHandlers.entrySet().iterator();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -205,6 +205,7 @@ public class AtmosphereServlet extends AbstractAsyncServlet implements CometProc
     public final static String DEFAULT_NAMED_DISPATCHER = "default";
     public final static String BROADCAST_FILTER_CLASSES = "org.atmosphere.cpr.broadcastFilterClasses";
     public final static String NO_CACHE_HEADERS = "org.atmosphere.cpr.noCacheHeaders";
+    public final static String DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = "org.atmosphere.cpr.dropAccessControlAllowOriginHeader";
     public final static String CONTAINER_RESPONSE = "org.atmosphere.jersey.containerResponse";
     public final static String BROADCASTER_LIFECYCLE_POLICY = "org.atmosphere.cpr.broadcasterLifeCyclePolicy";
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -204,7 +204,9 @@ public class AtmosphereServlet extends AbstractAsyncServlet implements CometProc
     public final static String RESUMED_ON_TIMEOUT = AtmosphereServlet.class.getName() + ".resumedOnTimeout";
     public final static String DEFAULT_NAMED_DISPATCHER = "default";
     public final static String BROADCAST_FILTER_CLASSES = "org.atmosphere.cpr.broadcastFilterClasses";
+    public final static String DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = "org.atmosphere.cpr.dropAccessControlAllowOriginHeader";
     public final static String NO_CACHE_HEADERS = "org.atmosphere.cpr.noCacheHeaders";
+
     public final static String CONTAINER_RESPONSE = "org.atmosphere.jersey.containerResponse";
     public final static String BROADCASTER_LIFECYCLE_POLICY = "org.atmosphere.cpr.broadcasterLifeCyclePolicy";
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -765,6 +765,7 @@ public <T> Future<T> delayBroadcast(final T o, long delay, TimeUnit t) {
 
         if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");
 
+        start();
         final Object msg = filter(o);
         if (msg == null) return null;
 
@@ -817,6 +818,7 @@ public Future<?> scheduleFixedBroadcast(final Object o, long waitFor, long perio
 
         if (destroyed.get()) throw new IllegalStateException("This Broadcaster has been destroyed and cannot be used");
 
+        start();
         if (period == 0 || t == null) {
             return null;
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java
Patch:
@@ -100,7 +100,6 @@ public void broadcast(byte frame, String data) {
     }
 
     public void broadcast(byte frame, byte[] data, int offset, int length) {
-
         byte[] b = new byte[length];
         System.arraycopy(data, offset, b, 0, length);
         resource.getBroadcaster().broadcast(b);

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -7,6 +7,7 @@
 import org.atmosphere.cpr.AtmosphereResourceEventImpl;
 import org.atmosphere.cpr.AtmosphereResourceImpl;
 import org.atmosphere.cpr.AtmosphereServlet;
+import org.atmosphere.cpr.BroadcasterFactory;
 import org.atmosphere.jersey.AtmosphereFilter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -85,6 +86,7 @@ final static void onException(Throwable t, AtmosphereResource<?,?> r) {
             }
         } finally {
             r.getBroadcaster().removeAtmosphereResource(r);
+            BroadcasterFactory.getDefault().removeAllAtmosphereResource(r);
         }
     }
 }

File: modules/cpr/src/test/java/org/atmosphere/tests/BlockingIOCometSupportTest.java
Patch:
@@ -84,5 +84,4 @@ public void unsetAtmosphereHandler() throws Exception {
         server.stop();
         server = null;
     }
-
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -118,7 +118,7 @@ public void destroy() {
             notifierFuture.cancel(true);
         }
 
-        if (bc != null && scope != SCOPE.REQUEST) {
+        if (bc != null) {
             bc.destroy();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/client/TrackMessageSizeFilter.java
Patch:
@@ -27,7 +27,7 @@ public BroadcastAction filter(HttpServletRequest request, HttpServletResponse re
 
         if (request.getHeader("X-Atmosphere-TrackMessageSize").equalsIgnoreCase("true") && String.class.isAssignableFrom(message.getClass())) {
             String msg = message.toString();
-            msg = "!?" + msg.length() + "!?" + msg;
+            msg = msg.length() + "|" + msg;
             return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, msg);
 
         }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1000,7 +1000,7 @@ protected void loadAtmosphereHandlersFromPath(URLClassLoader classloader, String
             for (String className : possibleAtmosphereHandlersCandidate) {
                 try {
                     className = className.replace('\\', '/');
-                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3");
+                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3").replace("/",".");
                     Class<?> clazz = classloader.loadClass(className);
 
                     if (AtmosphereHandler.class.isAssignableFrom(clazz)) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -490,7 +490,7 @@ protected void trackBroadcastMessage(final AtmosphereResource<?, ?> r, Object ms
                                                                                                              
     protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
         try {
-            r.getAtmosphereConfig().getAtmosphereHandler(this).onStateChange(e);
+            r.getAtmosphereHandler().onStateChange(e);
         } catch (IOException ex) {
             if (AtmosphereResourceImpl.class.isAssignableFrom(r.getClass())) {
                 AtmosphereResourceImpl.class.cast(r).notifyListeners(e);

File: modules/cpr/src/test/java/org/atmosphere/tests/BlockingIOCometSupportTest.java
Patch:
@@ -84,4 +84,5 @@ public void unsetAtmosphereHandler() throws Exception {
         server.stop();
         server = null;
     }
+
 }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -402,7 +402,6 @@ void addFilter(Broadcaster bc) {
         }
 
         void resume(AtmosphereResource resource) {
-            resource.getAtmosphereConfig().getAtmosphereHandler(resource.getBroadcaster());
             resource.resume();
         }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1029,8 +1029,7 @@ protected void loadAtmosphereHandlersFromPath(URLClassLoader classloader, String
             for (String className : possibleAtmosphereHandlersCandidate) {
                 try {
                     className = className.replace('\\', '/');
-                    className = className.substring(className.indexOf(WEB_INF_CLASSES)
-                            + WEB_INF_CLASSES.length(), className.lastIndexOf(".")).replace('/', '.');
+                    className = className.replaceFirst("^.*/(WEB-INF|target)/(test-)?classes/(.*)\\.class", "$3");
                     Class<?> clazz = classloader.loadClass(className);
 
                     if (AtmosphereHandler.class.isAssignableFrom(clazz)) {

File: modules/cpr/src/main/java/org/atmosphere/client/JavascriptClientFilter.java
Patch:
@@ -70,7 +70,8 @@ public BroadcastAction filter(Object originalMessage, Object message) {
     @Override
     public BroadcastAction filter(HttpServletRequest request, HttpServletResponse response, Object message) {
 
-        if (request.getHeader("User-Agent") != null && request.getAttribute("X-Atmosphere-Transport") == null || ((String)request.getAttribute("X-Atmosphere-Transport")).equalsIgnoreCase("long-polling")) {
+        if (request.getHeader("User-Agent") != null && request.getAttribute("X-Atmosphere-Transport") == null
+                || request.getAttribute("X-Atmosphere-Transport") != null && ((String)request.getAttribute("X-Atmosphere-Transport")).equalsIgnoreCase("long-polling")) {
             String userAgent = request.getHeader("User-Agent").toLowerCase();
             if (userAgent != null && userAgent.startsWith("opera") && message instanceof String) {
                 StringBuilder sb = new StringBuilder("<script id=\"atmosphere_")

File: modules/cpr/src/test/java/org/atmosphere/tests/MeteorTest.java
Patch:
@@ -86,7 +86,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOExce
             req.getSession().setAttribute("meteor", m);
             m.suspend(5000, false);
             
-            res.getOutputStream().write("resume".getBytes());
+            m.broadcast("resume");
             m.addListener(new AtmosphereResourceEventListener(){
 
                 @Override

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -275,6 +275,9 @@ public HttpServletResponse getResponse() {
      * {@inheritDoc}
      */
     public Broadcaster getBroadcaster() {
+        if (broadcaster == null) {
+            throw new IllegalStateException("No Broadcaster associated with this AtmosphereResource.");
+        }
         return broadcaster;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/client/JavascriptClientFilter.java
Patch:
@@ -70,13 +70,13 @@ public BroadcastAction filter(Object originalMessage, Object message) {
     @Override
     public BroadcastAction filter(HttpServletRequest request, HttpServletResponse response, Object message) {
 
-        if (request.getHeader("User-Agent") != null && request.getAttribute("X-Transport") != null && ((String)request.getAttribute("X-Transport")).equalsIgnoreCase("streaming")) {
+        if (request.getHeader("User-Agent") != null && request.getAttribute("X-Atmosphere-Transport") == null || ((String)request.getAttribute("X-Atmosphere-Transport")).equalsIgnoreCase("long-polling")) {
             String userAgent = request.getHeader("User-Agent").toLowerCase();
             if (userAgent != null && userAgent.startsWith("opera") && message instanceof String) {
                 StringBuilder sb = new StringBuilder("<script id=\"atmosphere_")
                         .append(uniqueScriptToken.getAndIncrement())
                         .append("\">")
-                        .append("window.parent.jquery.atmosphere.streamingCallback")
+                        .append("window.parent.$.atmosphere.streamingCallback")
                         .append("('")
                         .append(message.toString())
                         .append("');</script>");

File: modules/gwt/atmosphere-gwt-client/src/main/java/org/atmosphere/gwt/client/impl/WebSocket.java
Patch:
@@ -97,7 +97,7 @@ public final native void setListener(WebSocketListener listener) /*-{
         this.onerror = $entry(function() {
             listener.@org.atmosphere.gwt.client.impl.WebSocketListener::onError(Lorg/atmosphere/gwt/client/impl/WebSocket;)(self);
         });
-        this.message = $entry(function(event) {
+        this.onmessage = $entry(function(event) {
             listener.@org.atmosphere.gwt.client.impl.WebSocketListener::onMessage(Lorg/atmosphere/gwt/client/impl/WebSocket;Ljava/lang/String;)(self,event.data);
         });
     }-*/;
@@ -110,7 +110,7 @@ public final native void clearListener() /*-{
           self.onopen = new Function();
           self.onclose = new Function();
           self.onerror = new Function();
-          self.message = new Function();
+          self.onmessage = new Function();
         }, 0);
     }-*/;
 

File: modules/compat-weblogic/src/main/java/org/eclipse/jetty/websocket/WebSocket.java
Patch:
@@ -52,6 +52,8 @@ public interface WebSocket {
 
     void onMessage(byte frame, byte[] data, int offset, int length);
 
+    void onFragment(boolean more, byte opcode, byte[] data, int offset, int length);
+
     void onDisconnect();
 
     public interface Outbound {

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -130,7 +130,7 @@ void loadWebApplication(ServletConfig sc) throws MalformedURLException,
 
             fc.setFilterName(filterName);
             filterChain.addFilter(fc);
-            logger.info("Installing Filter {}", servletClassName);
+            logger.info("Installing Filter {}", filterName);
         }
 
     }

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -189,11 +189,11 @@ public void onStateChange(AtmosphereResourceEvent<HttpServletRequest,
         res.getWriter().flush();
     }
 
-    public void destroy() {
-    }
-
     private String toJsonp(String name, String message) {
         return "window.parent.app.update({ name: \"" + name + "\", message: \""
                 + message + "\" });\n";
     }
+
+    public void destroy() {
+    }
 }

File: samples/gwt-demo/src/main/java/org/atmosphere/samples/client/GWTDemo.java
Patch:
@@ -57,7 +57,7 @@ public void onClick(ClickEvent event) {
         pollButton.addClickHandler(new ClickHandler() {
             @Override
             public void onClick(ClickEvent event) {
-                polling.pollDelayed(5000, new AsyncCallback<Event>() {
+                polling.pollDelayed(3000, new AsyncCallback<Event>() {
 
                     @Override
                     public void onFailure(Throwable caught) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServletProcessor.java
Patch:
@@ -58,12 +58,12 @@ public interface AtmosphereServletProcessor extends
      * @param sc the  {@link ServletConfig}
      * @throws ServletException
      */
-    public void init(ServletConfig sc) throws ServletException;
+    void init(ServletConfig sc) throws ServletException;
 
 
     /**
      * Destroy the {@link AtmosphereServletProcessor}
      */
-    public void destroy();
+    void destroy();
 
 }

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -118,7 +118,7 @@ protected void reconfigure() {
     @Override
     protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
         if (r.getRequest() instanceof HttpServletRequest) {
-            if (((HttpServletRequest) r.getRequest()).getAttribute("cr") != null) {
+            if (((HttpServletRequest) r.getRequest()).getAttribute(AtmosphereServlet.CONTAINER_RESPONSE) != null) {
                 try {
                     if (jerseyBroadcast == null) {
                         Class jerseyBroadcasterUtil = Class.forName("org.atmosphere.jersey.util.JerseyBroadcasterUtil");

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -32,9 +32,10 @@ public final static void broadcast(final AtmosphereResource<?,?> r, final Atmosp
         HttpServletRequest res = (HttpServletRequest) r.getRequest();
 
         try {
-            ContainerResponse cr = (ContainerResponse) res.getAttribute(AtmosphereFilter.CONTAINER_RESPONSE);
+            ContainerResponse cr = (ContainerResponse) res.getAttribute(AtmosphereServlet.CONTAINER_RESPONSE);
 
             if (cr == null) {
+                logger.debug("Retrieving HttpServletRequest {} with ContainerResponse {}", res, cr);
                 logger.error("Unexpected state. ContainerResponse cannot be null. The connection hasn't been suspended yet");
                 return;
             }

File: plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -176,7 +176,6 @@ public void outgoingBroadcast(Object message) {
      */
     @Override
     public void releaseExternalResources() {
-        super.destroy();
         try {
             connection.close();
             session.close();

File: samples/twitter/src/main/java/org/atmosphere/samples/twitter/TwitterAtmosphereHandler.java
Patch:
@@ -232,6 +232,9 @@ public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse
         }
     }
 
+    public void destroy() {
+    }
+
     /**
      * Escape any maliscious characters.
      * @param orig the String

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServletProcessor.java
Patch:
@@ -58,12 +58,12 @@ public interface AtmosphereServletProcessor extends
      * @param sc the  {@link ServletConfig}
      * @throws ServletException
      */
-    public void init(ServletConfig sc) throws ServletException;
+    void init(ServletConfig sc) throws ServletException;
 
 
     /**
      * Destroy the {@link AtmosphereServletProcessor}
      */
-    public void destroy();
+    void destroy();
 
 }

File: samples/twitter/src/main/java/org/atmosphere/samples/twitter/TwitterAtmosphereHandler.java
Patch:
@@ -232,6 +232,9 @@ public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse
         }
     }
 
+    public void destroy() {
+    }
+
     /**
      * Escape any maliscious characters.
      * @param orig the String

File: modules/cpr/src/main/java/org/atmosphere/cache/HeaderBroadcasterCache.java
Patch:
@@ -49,7 +49,7 @@
  */
 public class HeaderBroadcasterCache extends SessionBroadcasterCache {
 
-    final public static String HEADER_CACHE = "X-Cache-Date";
+    public static final String HEADER_CACHE = "X-Cache-Date";
 
     /**
      * {@inheritDoc}

File: modules/cpr/src/test/java/org/atmosphere/tests/TomcatCometSupportTest.java
Patch:
@@ -113,7 +113,7 @@ public void unsetAtmosphereHandler() {
             embedded.stop();
         } catch (LifecycleException ignored) {
             // simply ignore the stop of the container, which may fail
-            ignored.printStackTrace(System.out);
+            logger.info("server stop failed", ignored);
         }
     }
 }
\ No newline at end of file

File: plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -172,9 +172,10 @@ public void outgoingBroadcast(Object message) {
     }
 
     /**
-     * {@inheritDoc}
+     * Close all related JMS factory, connection, etc.
      */
-    public void destroy() {
+    @Override
+    public void releaseExternalResources() {
         super.destroy();
         try {
             connection.close();

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -113,8 +113,8 @@ public Action service(HttpServletRequest req, HttpServletResponse res)
                 if (nextAction.type == Action.TYPE.SUSPEND) {
                     if (logger.isLoggable(Level.FINE)) {
                         logger.fine("Suspending after Resuming" + res);
-                        suspend(action, req, res);
                     }
+                    suspend(action, req, res);                    
                 }
             }
         } finally {

File: modules/cpr/src/main/java/org/atmosphere/container/Servlet30Support.java
Patch:
@@ -107,8 +107,8 @@ public Action service(HttpServletRequest req, HttpServletResponse res)
                 if (nextAction.type == Action.TYPE.SUSPEND) {
                     if (logger.isLoggable(Level.FINE)) {
                         logger.fine("Suspending after Resuming" + res);
-                        suspend(action, req, res);
                     }
+                    suspend(action, req, res);                    
                 }
             }
         } else {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -378,9 +378,9 @@ protected void push(final AtmosphereResource<?, ?> r, final Object msg) {
                     // Shield us from any corrupted Request
                     if (LoggerUtils.getLogger().isLoggable(Level.FINE)) {
                         LoggerUtils.getLogger().log(Level.FINE, "Preventing corruption of a recycled request", e);
-                        resources.remove(r);
-                        return;
                     }
+                    resources.remove(r);
+                    return;
                 }
             }
 

File: plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -124,7 +124,7 @@ public void onMessage(Message msg) {
             });
             publisher = session.createProducer(topic);
             connection.start();
-            logger.info(String.format("JMS created for topic %s, with filter % s", topicId, selector));
+            logger.info(String.format("JMS created for topic %s, with filter %s", topicId, selector));
         } catch (Throwable ex) {
             throw new IllegalStateException("Unable to initialize JMSBroadcaster", ex);
         }

File: modules/cpr/src/main/java/org/atmosphere/client/JavascriptClientFilter.java
Patch:
@@ -39,6 +39,7 @@
 import org.atmosphere.cpr.PerRequestBroadcastFilter;
 
 import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -67,7 +68,7 @@ public BroadcastAction filter(Object originalMessage, Object message) {
     }
 
     @Override
-    public BroadcastAction filter(HttpServletRequest request, Object message) {
+    public BroadcastAction filter(HttpServletRequest request, HttpServletResponse response, Object message) {
 
         if (request.getHeader("User-Agent") != null) {
             String userAgent = request.getHeader("User-Agent").toLowerCase();

File: modules/cpr/src/main/java/org/atmosphere/cpr/AsynchronousProcessor.java
Patch:
@@ -184,8 +184,9 @@ Action action(HttpServletRequest req, HttpServletResponse res)
         req.setAttribute(AtmosphereServlet.SUPPORT_SESSION, supportSession());
 
         AtmosphereHandlerWrapper g = map(req);
-        AtmosphereResourceImpl re = new AtmosphereResourceImpl(config,
-                g.broadcaster, req, res, this);
+        AtmosphereResourceImpl re = new AtmosphereResourceImpl(config,g.broadcaster, req, res, this);
+        g.broadcaster.getBroadcasterConfig().setAtmosphereConfig(config);
+
         req.setAttribute(AtmosphereServlet.ATMOSPHERE_RESOURCE, re);
         req.setAttribute(AtmosphereServlet.ATMOSPHERE_HANDLER, g.atmosphereHandler);
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -284,6 +284,7 @@ public Broadcaster getBroadcaster() {
      */
     public void setBroadcaster(Broadcaster broadcaster) {
         this.broadcaster = broadcaster;
+        broadcaster.getBroadcasterConfig().setAtmosphereConfig(config);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcasterFactory.java
Patch:
@@ -80,7 +80,7 @@ public Broadcaster get() throws IllegalAccessException, InstantiationException {
         if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
             AbstractBroadcasterProxy.class.cast(b).configure(config);
         }
-        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters));
+        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
         b.setID(clazz.getSimpleName() + "-" + new Random().nextInt());
         store.put(b.getID(), b);
         return b;
@@ -99,7 +99,7 @@ public final Broadcaster get(Class<? extends Broadcaster> c, Object id) throws I
         if (AbstractBroadcasterProxy.class.isAssignableFrom(b.getClass())) {
             AbstractBroadcasterProxy.class.cast(b).configure(config);
         }
-        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters));
+        b.setBroadcasterConfig(new BroadcasterConfig(AtmosphereServlet.broadcasterFilters, config));
         b.setID(id.toString());
 
         store.put(id, b);

File: modules/cpr/src/main/java/org/atmosphere/util/gae/GAEBroadcasterConfig.java
Patch:
@@ -54,7 +54,7 @@ public class GAEBroadcasterConfig extends BroadcasterConfig {
     final static String NOT_SUPPORTED = "ExecutorService not supported with Google App Engine";
 
     public GAEBroadcasterConfig(String[] list) {
-        super(list);
+        super(list, null);
     }
 
     @Override

File: modules/cpr/src/test/java/org/atmosphere/tests/GrizzlyCometSupportTest.java
Patch:
@@ -57,6 +57,7 @@ public void startServer() throws Exception {
 
         ws = new GrizzlyWebServer(port);
         ServletAdapter sa = new ServletAdapter();
+        sa.setProperty("load-on-startup", 0);
         ws.addAsyncFilter(new CometAsyncFilter());
         
         atmoServlet = new AtmosphereServlet();

File: plugins/jms/src/main/java/org/atmosphere/plugin/jms/JMSBroadcaster.java
Patch:
@@ -73,12 +73,12 @@ public JMSBroadcaster() {
     }
 
     public JMSBroadcaster(String id) {
-        this(id, "atmosphere-jms");
+        this(id, "atmosphere");
     }
 
     public JMSBroadcaster(String id, String clusterName) {
         super(id);
-        this.clusterName = clusterName + "-id";
+        this.clusterName = clusterName;
 
     }
     

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -85,7 +85,7 @@ public class DefaultBroadcaster implements Broadcaster {
     protected final ConcurrentLinkedQueue<Entry> delayedBroadcast = new ConcurrentLinkedQueue<Entry>();
     protected final ConcurrentLinkedQueue<Entry> broadcastOnResume = new ConcurrentLinkedQueue<Entry>();
 
-    private Future<?> notifierFuture;
+    protected Future<?> notifierFuture;
     protected BroadcasterCache broadcasterCache;
 
     private POLICY policy = POLICY.FIFO;

File: extras/guice/src/main/java/org/atmosphere/guice/GuiceManagedAtmoshpereServlet.java
Patch:
@@ -81,7 +81,6 @@ protected boolean detectSupportedFramework(ServletConfig sc) {
         setUseStreamForFlushingComments(true);
 
         rsp.setServlet(guiceServlet);
-        //rsp.setFilterClassName(GUICE_FILTER);
         getAtmosphereConfig().setSupportSession(false);
 
         String mapping = sc.getInitParameter(PROPERTY_SERVLET_MAPPING);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1247,10 +1247,10 @@ public static String getDefaultBroadcasterClassName() {
     /**
      * Set the default {@link Broadcaster} class name
      *
-     * @param broadcasterClassName the broadcasterClassName to set
+     * @param bccn the broadcasterClassName to set
      */
-    public static void setDefaultBroadcasterClassName(String broadcasterClassName) {
-        broadcasterClassName = broadcasterClassName;
+    public static void setDefaultBroadcasterClassName(String bccn) {
+        broadcasterClassName = bccn;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1250,7 +1250,7 @@ public static String getDefaultBroadcasterClassName() {
      * @param bccn the broadcasterClassName to set
      */
     public static void setDefaultBroadcasterClassName(String bccn) {
-        this.broadcasterClassName = bccn;
+        broadcasterClassName = bccn;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -1247,10 +1247,10 @@ public static String getDefaultBroadcasterClassName() {
     /**
      * Set the default {@link Broadcaster} class name
      *
-     * @param broadcasterClassName the broadcasterClassName to set
+     * @param bccn the broadcasterClassName to set
      */
-    public static void setDefaultBroadcasterClassName(String broadcasterClassName) {
-        broadcasterClassName = broadcasterClassName;
+    public static void setDefaultBroadcasterClassName(String bccn) {
+        this.broadcasterClassName = bccn;
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -395,7 +395,7 @@ protected void checkCachedAndPush(AtmosphereResource<?, ?> r, AtmosphereResource
     }
 
     protected boolean retrieveTrackedBroadcast(final AtmosphereResource<?, ?> r, final AtmosphereResourceEvent e) {
-        List<Object> missedMsg = broadcasterCache.retrieveFromCache(r);
+        List<?> missedMsg = broadcasterCache.retrieveFromCache(r);
         if (!missedMsg.isEmpty()) {
             e.setMessage(missedMsg);
             return true;

File: modules/jersey/src/main/java/org/atmosphere/jersey/util/JerseyBroadcasterUtil.java
Patch:
@@ -43,7 +43,7 @@ public final static void broadcast(final AtmosphereResource<?,?> r, final Atmosp
                 cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                 cr.write();
             } else if (e.getMessage() instanceof List) {
-                for (String msg : (List<String>) e.getMessage()) {
+                for (Object msg : (List<Object>) e.getMessage()) {
                     cr.setResponse(Response.ok(msg).build());
                     cr.getHttpHeaders().add(HttpHeaders.CONTENT_TYPE, m);
                     cr.write();

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAtmosphereHandler.java
Patch:
@@ -90,7 +90,7 @@ public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse
      * @param r an {@link AtmosphereResource}
      * @throws IOException
      */
-    public void upgrade(AtmosphereResource r) throws IOException {
+    public void upgrade(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {
         if (LoggerUtils.getLogger().isLoggable(Level.FINE)) {
             LoggerUtils.getLogger().fine("Suspending request: " + r.getRequest());
         }

File: modules/cpr/src/main/java/org/atmosphere/client/JavascriptClientFilter.java
Patch:
@@ -80,8 +80,9 @@ public BroadcastAction filter(HttpServletRequest request, Object message) {
                     .append(message.toString())
                     .append("');</script>");
             message = sb.toString();
+            return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, message);            
         }
-        return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, message);
+        return new BroadcastAction(BroadcastAction.ACTION.CONTINUE, null);
     }
 }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResource.java
Patch:
@@ -126,7 +126,6 @@ public interface AtmosphereResource<E, F> {
      */
     public E getRequest();
 
-
     /**
      * Return the underlying <F> Response.
      *
@@ -155,7 +154,6 @@ public interface AtmosphereResource<E, F> {
      */
     public void setBroadcaster(Broadcaster broadcaster);
 
-
     /**
      * Set the {@link Serializer} to use when {@link AtmosphereResource#write}
      * execute the operation. By default, the {@link Serializer} is null.

File: modules/cpr/src/main/java/org/atmosphere/util/AbstractBroadcasterProxy.java
Patch:
@@ -87,6 +87,7 @@ public void configure(AtmosphereServlet.AtmosphereConfig config) {
 
     /**
      * Implement this method to broadcast message to external source like JGroups, Redis, etc.
+     * @param message outgoing message
      */
     abstract public void outgoingBroadcast(Object message);
 
@@ -127,7 +128,7 @@ protected void broadcast(final AtmosphereResource<?, ?> r, final AtmosphereResou
     protected void broadcastReceivedMessage(Object message) {
         try {
             Object newMsg = filter(message);
-            push(new Entry(newMsg, null, new BroadcasterFuture<Object>(newMsg)));
+            push(new Entry(newMsg, null, new BroadcasterFuture<Object>(newMsg), message));
         } catch (Throwable t) {
             logger.log(Level.SEVERE, "", t);
         }

File: modules/cpr/src/main/java/org/atmosphere/util/SimpleBroadcaster.java
Patch:
@@ -84,7 +84,7 @@ public <T> Future<T> broadcast(T msg) {
         if (newMsg == null) return null;
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
         f.done();
-        push(new Entry(newMsg, null, f));
+        push(new Entry(newMsg, null, f, msg));
         return f;
     }
 
@@ -97,7 +97,7 @@ public <T> Future<T> broadcast(T msg, AtmosphereResource<?,?> r) {
         if (newMsg == null) return null;
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
         f.done();
-        push(new Entry(newMsg, r, f));
+        push(new Entry(newMsg, r, f, msg));
         return f;
     }
 
@@ -111,7 +111,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?,?>> subset) {
 
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
         f.done();
-        push(new Entry(newMsg, subset, f));
+        push(new Entry(newMsg, subset, f, msg));
         return f;
     }
 }
\ No newline at end of file

File: modules/cpr/src/main/java/org/atmosphere/util/gae/GAEDefaultBroadcaster.java
Patch:
@@ -77,7 +77,7 @@ public <T> Future<T> broadcast(T msg) {
         if (msg == null) return null;
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
         f.done();
-        push(new Entry(newMsg, null, f));
+        push(new Entry(newMsg, null, f, msg));
         return f;
     }
 
@@ -90,7 +90,7 @@ public <T> Future<T> broadcast(T msg, AtmosphereResource<?,?> r) {
         if (newMsg == null) return null;
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
         f.done();
-        push(new Entry(newMsg, r, f));
+        push(new Entry(newMsg, r, f, msg));
         return f;
     }
 
@@ -103,7 +103,7 @@ public <T> Future<T> broadcast(T msg, Set<AtmosphereResource<?,?>> subset) {
         if (newMsg == null) return null;
         BroadcasterFuture<Object> f = new BroadcasterFuture<Object>(newMsg);
         f.done();
-        push(new Entry(newMsg, subset, f));
+        push(new Entry(newMsg, subset, f, msg));
         return f;
     }
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterFactory.java
Patch:
@@ -132,7 +132,7 @@ public synchronized static BroadcasterFactory getDefault() {
             } catch (ClassNotFoundException e) {
                 LoggerUtils.getLogger().log(Level.SEVERE,"",e);
             }
-            factory = new DefaultBroadcasterFactory(b == null ? DefaultBroadcaster.class : b , AtmosphereServlet.getBroadcasterConfig());
+            factory = new DefaultBroadcasterFactory(b == null ? DefaultBroadcaster.class : b);
 
         }
         return factory;

File: modules/cpr/src/main/java/org/atmosphere/util/gae/GAEBroadcasterConfig.java
Patch:
@@ -37,7 +37,6 @@
 
 package org.atmosphere.util.gae;
 
-
 import org.atmosphere.cpr.BroadcastFilter;
 import org.atmosphere.cpr.BroadcastFilterLifecycle;
 import org.atmosphere.cpr.BroadcasterConfig;
@@ -54,7 +53,8 @@ public class GAEBroadcasterConfig extends BroadcasterConfig {
 
     final static String NOT_SUPPORTED = "ExecutorService not supported with Google App Engine";
 
-    public GAEBroadcasterConfig() {
+    public GAEBroadcasterConfig(String[] list) {
+        super(list);
     }
 
     @Override

File: modules/cpr/src/main/java/org/atmosphere/util/gae/GAEDefaultBroadcaster.java
Patch:
@@ -39,6 +39,7 @@
 
 
 import org.atmosphere.cpr.AtmosphereResource;
+import org.atmosphere.cpr.AtmosphereServlet;
 import org.atmosphere.cpr.Broadcaster;
 import org.atmosphere.cpr.BroadcasterFuture;
 import org.atmosphere.cpr.DefaultBroadcaster;
@@ -59,10 +60,12 @@ public class GAEDefaultBroadcaster extends DefaultBroadcaster {
 
     public GAEDefaultBroadcaster() {
         super();
+        bc = new GAEBroadcasterConfig(AtmosphereServlet.broadcasterFilters);
     }
 
     public GAEDefaultBroadcaster(String name) {
         super(name);
+        bc = new GAEBroadcasterConfig(AtmosphereServlet.broadcasterFilters);
     }
 
     /**

File: plugins/bayeux/src/main/java/org/atmosphere/plugin/bayeux/AtmosphereBayeuxClient.java
Patch:
@@ -150,7 +150,7 @@ public void resume() {
         synchronized (this) {
             if (_continuation != null) {
                 try {
-                    AtmosphereServlet.getBroadcasterConfig().getExecutorService().submit(new Runnable() {
+                    _continuation.getBroadcaster().getBroadcasterConfig().getExecutorService().submit(new Runnable() {
                         @Override
                         public void run() {
                             _continuation.resume();

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -197,7 +197,7 @@ public void action(AtmosphereResourceImpl actionEvent) {
 
                 if (latchId == -1 && supportSession()) {
                     if (req.getSession().getAttribute(LATCH) != null) {
-                        latchId = (Integer) req.getSession().getAttribute(String.valueOf(req.hashCode()));
+                        latchId = (Integer) req.getSession().getAttribute(LATCH);
                     }
                 }
 

File: modules/cpr/src/test/java/org/atmosphere/tests/BlockingIOCometSupportTest.java
Patch:
@@ -83,5 +83,5 @@ public void unsetAtmosphereHandler() throws Exception {
         atmoServlet.destroy();
         server.stop();
         server = null;
-    }       
+    }
 }

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -105,7 +105,7 @@ public void onRequest(AtmosphereResource<HttpServletRequest,
 
             //Simple Broadcast
             bc.getBroadcasterConfig().addFilter(new XSSHtmlFilter());
-            Future<Object> f = bc.broadcast(event.getAtmosphereConfig().getWebServerName()
+            Future<String> f = bc.broadcast(event.getAtmosphereConfig().getWebServerName()
                     + "**has suspended a connection from "
                     + req.getRemoteAddr());
 

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereProviders.java
Patch:
@@ -63,13 +63,15 @@ public static class BroadcasterProvider implements StringReaderProvider {
 
         @Context HttpServletRequest req;
 
+        @Override
         public StringReader getStringReader(Class type, Type genericType, Annotation[] annotations) {
 
             if (!Broadcaster.class.isAssignableFrom(type)) {
                 return null;
             }
 
             return new StringReader() {
+                @Override
                 public Object fromString(String topic) {
                     Broadcaster broadcaster = null;
                     try {

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BlockingIOJerseyTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.testng.annotations.AfterMethod;
 
 
-public class BlockingIOJerseyTest extends BaseTest {
+public class BlockingIOJerseyTest extends BasePubSubTest {
 
     protected Server server;
     protected Context root;

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/GrizzlyJerseyTest.java
Patch:
@@ -42,7 +42,7 @@
 import org.atmosphere.container.GrizzlyCometSupport;
 
 
-public class GrizzlyJerseyTest extends BaseTest {
+public class GrizzlyJerseyTest extends BasePubSubTest {
 
     protected GrizzlyWebServer ws;
     protected ServletAdapter sa;

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty7JerseyTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
 
-public class Jetty7JerseyTest extends BaseTest {
+public class Jetty7JerseyTest extends BasePubSubTest {
     protected Server server;
 
     @Override

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java
Patch:
@@ -67,7 +67,6 @@
 @Produces("text/plain;charset=ISO-8859-1")
 public class PubSubTest {
 
-
     /**
      * Inject a {@link org.atmosphere.cpr.Broadcaster} based on @Path
      */

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/TomcatJerseyTest.java
Patch:
@@ -54,7 +54,7 @@
 import java.io.File;
 
 
-public class TomcatJerseyTest extends BaseTest {
+public class TomcatJerseyTest extends BasePubSubTest {
 
     protected Embedded embedded;
 

File: samples/wicket-clock/src/main/java/org/atmosphere/samples/wicket/PushPage.java
Patch:
@@ -47,7 +47,6 @@
 import javax.servlet.http.HttpServletResponse;
 import java.util.Date;
 import java.util.concurrent.Callable;
-import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.Level;
 
@@ -80,8 +79,6 @@ public String call() {
         // Add us to the listener list.
         meteor.addListener(this);
 
-        LoggerUtils.getLogger().log(Level.INFO, "Suspending connection");
-
         // Depending on the connection
         String transport = req.getHeader("X-Atmosphere-Transport");
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -199,7 +199,7 @@ public void suspend(long timeout, boolean flushComment) {
                 String id = broadcaster.getID();
                 Class<? extends Broadcaster> clazz = broadcaster.getClass(); 
                 broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id, false);
-                if (broadcaster == null) {
+                if (broadcaster == null || broadcaster.getAtmosphereResources().size() > 0) {
                     broadcaster = BroadcasterFactory.getDefault().lookup(clazz, id + "/" + UUID.randomUUID(), true);
                 }
             }

File: modules/cpr/src/test/java/org/atmosphere/tests/BroadcasterScopeTest.java
Patch:
@@ -91,6 +91,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOExce
 
                 @Override
                 public void onSuspend(final AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event){
+                     event.getResource().getRequest().setAttribute(AtmosphereServlet.RESUME_ON_BROADCAST, "true");
                 }
 
                 @Override
@@ -102,8 +103,7 @@ public void onDisconnect(AtmosphereResourceEvent<HttpServletRequest, HttpServlet
                 }
 
                 @Override
-                public void onBroadcast(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {
-                    event.getResource().getRequest().setAttribute(AtmosphereServlet.RESUME_ON_BROADCAST, "true");
+                public void onBroadcast(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse> event) {                   
                 }
             });
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -568,9 +568,7 @@ protected void configureBroadcaster() throws ClassNotFoundException, Instantiati
                     Thread.currentThread().getContextClassLoader().loadClass(broadcasterCacheClassName).newInstance());
         }
 
-        logger.info("Using " + broadcasterClassName
-                + " with a Thread Pool size of : "
-                + BroadcasterConfig.numOfProcessor);
+        logger.info("Using " + broadcasterClassName);
     }
 
     /**

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -81,7 +81,7 @@ public BroadcasterConfig(ExecutorService executorService, ScheduledExecutorServi
     }
 
     protected void configExecutors() {
-        executorService = Executors.newCachedThreadPool(new ThreadFactory(){
+        executorService = Executors.newSingleThreadExecutor(new ThreadFactory(){
 
             private AtomicInteger count = new AtomicInteger();
 

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -351,7 +351,7 @@ public static String createCompatibleStringJunk() {
         StringBuilder s = new StringBuilder();
 
         s.append("<!-- ----------------------------------------------------------" +
-                "---------------------------------------------------------------" +
+                "------ http://github.com/Atmosphere ----------------------------" +
                 "-------------------------------------------- -->\n");
         s.append("<!-- Welcome to the Atmosphere Framework. To work with all the" +
                 " browsers when suspending connection, Atmosphere must output some" +
@@ -361,6 +361,7 @@ public static String createCompatibleStringJunk() {
                     "---------------------------------------------------------------" +
                     "-------------------------------------------- -->\n");
         }
+        s.append("<!-- EOD -->");
         return s.toString();
     }
 

File: modules/cpr/src/test/java/org/atmosphere/tests/BaseTest.java
Patch:
@@ -496,8 +496,8 @@ public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse
                 } else {
                     currentTime = System.currentTimeMillis();
 
-                    if (count.getAndIncrement() < 4) {
-                        event.getBroadcaster().delayBroadcast("message-" + count.get() + " ");
+                    if (count.get() < 4) {
+                        event.getBroadcaster().delayBroadcast("message-" + count.getAndIncrement() + " ");
                     } else {
                         event.getBroadcaster().broadcast("message-final");
                     }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereFilter.java
Patch:
@@ -253,7 +253,7 @@ public ContainerResponse filter(ContainerRequest request, ContainerResponse resp
                         }
                     }
 
-                    if (r == null && sessionSupported) {
+                    if (sessionSupported) {
                         r = (AtmosphereResource) servletReq.getSession().getAttribute(SUSPENDED_RESOURCE);
                     } else {
                         String path = response.getContainerRequest().getPath();

File: modules/cpr/src/test/java/org/atmosphere/tests/BlockingIOCometSupportTest.java
Patch:
@@ -83,5 +83,5 @@ public void unsetAtmosphereHandler() throws Exception {
         atmoServlet.destroy();
         server.stop();
         server = null;
-    }
+    }       
 }

File: modules/cpr/src/main/java/org/atmosphere/websocket/JettyWebSocketSupport.java
Patch:
@@ -60,20 +60,22 @@ public void redirect(String location) throws IOException {
     }
 
     public void write(byte frame, String data) throws IOException {
+        if (!outbound.isOpen()) throw new IOException("Connection closed");
         outbound.sendMessage(frame, data);
     }
 
     public void write(byte frame, byte[] data) throws IOException {
+        if (!outbound.isOpen()) throw new IOException("Connection closed");
         outbound.sendMessage(frame, data, 0, data.length);
     }
 
     public void write(byte frame, byte[] data, int offset, int length) throws IOException {
+        if (!outbound.isOpen()) throw new IOException("Connection closed");
         outbound.sendMessage(frame, data, offset, length);
     }
 
     public void close() throws IOException {
         outbound.disconnect();
     }
 
-
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -246,6 +246,7 @@ public void run() {
 
     protected void push(Entry msg) {
 
+        String prevMessage = msg.message.toString();
         if (!delayedBroadcast.isEmpty()) {
             Iterator<Entry> i = delayedBroadcast.iterator();
             while (i.hasNext()) {
@@ -257,8 +258,7 @@ protected void push(Entry msg) {
                     // Append so we do a single flush
                     if (e.message instanceof String
                             && msg.message instanceof String) {
-                        msg.message = e.message.toString()
-                                + msg.message.toString();
+                        msg.message = e.message + msg.message.toString();
                     } else {
                         push(e);
                     }
@@ -287,6 +287,7 @@ protected void push(Entry msg) {
                 push(r, msg.message);
             }
         }
+        msg.message = prevMessage;
     }
 
     protected void push(AtmosphereResource<?,?> r, Object msg) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultCometSupportResolver.java
Patch:
@@ -90,7 +90,7 @@ public DefaultCometSupportResolver(final AtmosphereConfig config) {
      */
     protected boolean testClassExists(final String testClass) {
         try {
-            return testClass != null && testClass.length() > 0 && Class.forName(testClass) != null;
+            return testClass != null && testClass.length() > 0 &&  Thread.currentThread().getContextClassLoader().loadClass(testClass) != null;
         } catch (ClassNotFoundException ex) {
             return false;
         } catch (NoClassDefFoundError ex) {

File: modules/cpr/src/main/java/org/atmosphere/cpr/BroadcasterConfig.java
Patch:
@@ -101,7 +101,9 @@ public Thread newThread(final Runnable runnable){
      * @param executorService to be used when broadcasting.
      */
     public BroadcasterConfig setExecutorService(ExecutorService executorService) {
-        this.executorService.shutdown();
+        if (this.executorService != null) {
+            this.executorService.shutdown();
+        }
         this.executorService = executorService;
         return this;
     }

File: modules/cpr/src/main/java/org/atmosphere/cpr/Meteor.java
Patch:
@@ -41,6 +41,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.util.List;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 
@@ -156,7 +157,7 @@ public final static Meteor build(HttpServletRequest req, Broadcaster.SCOPE scope
 
         if (scope == Broadcaster.SCOPE.REQUEST) {
             try {
-                b = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName());
+                b = BroadcasterFactory.getDefault().get(DefaultBroadcaster.class, DefaultBroadcaster.class.getSimpleName() + UUID.randomUUID());
             } catch (Throwable t) {
                 throw new RuntimeException(t);
             }

File: modules/cpr/src/main/java/org/atmosphere/cpr/DefaultBroadcaster.java
Patch:
@@ -498,7 +498,7 @@ public Object call() throws Exception {
         return f;
     }
 
-    /**
+    /**                                                          Meteor
      * {@inheritDoc}
      */
     public Future<?> scheduleFixedBroadcast(final Object o, long period, TimeUnit t) {

File: modules/cpr/src/main/java/org/atmosphere/container/BlockingIOCometSupport.java
Patch:
@@ -186,6 +186,7 @@ public Action cancelled(HttpServletRequest req, HttpServletResponse res)
     @Override
     public void action(AtmosphereResourceImpl actionEvent) {
         try {
+            super.action(actionEvent);            
             if (actionEvent.action().type == Action.TYPE.RESUME && actionEvent.isInScope()) {
                 int latchId = -1;
                 HttpServletRequest req = actionEvent.getRequest();

File: samples/chat/src/main/java/org/atmosphere/samples/chat/ChatAtmosphereHandler.java
Patch:
@@ -58,7 +58,7 @@
  * Simple AtmosphereHandler that implement the logic to build a Chat application.
  *
  * @author Jeanfrancois Arcand
- * @autor TAKAI Naoto (Orginial author for the Comet based Chat).
+ * @autor TAKAI Naoto (original author for the Comet based Chat).
  */
 public class ChatAtmosphereHandler implements AtmosphereHandler<HttpServletRequest, HttpServletResponse> {
 

File: modules/cpr/src/test/java/org/atmosphere/tests/GrizzlyCometSupportTest.java
Patch:
@@ -52,7 +52,7 @@ public class GrizzlyCometSupportTest extends BaseTest {
     @BeforeMethod(alwaysRun = true)
     public void startServer() throws Exception {
 
-        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999);
+        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
         urlTarget = "http://127.0.0.1:" + port + "/invoke";
 
         ws = new GrizzlyWebServer(port);

File: modules/cpr/src/test/java/org/atmosphere/tests/Jetty7CometSupportTest.java
Patch:
@@ -51,7 +51,7 @@ public class Jetty7CometSupportTest extends BaseTest {
     @BeforeMethod(alwaysRun = true)
     public void startServer() throws Exception {
 
-        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999);
+        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
         urlTarget = "http://127.0.0.1:" + port + "/invoke";
 
         server = new Server(port);

File: modules/cpr/src/test/java/org/atmosphere/tests/TomcatCometSupportTest.java
Patch:
@@ -71,7 +71,7 @@ public void startServer() throws Exception {
 
         System.setProperty("org.atmosphere.useNative", "true");
 
-        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999);
+        int port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
         urlTarget = "http://127.0.0.1:" + port + "/invoke";
         embedded = new Embedded();
         String path = new File(".").getAbsolutePath();

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BuilderResponseTest.java
Patch:
@@ -29,7 +29,7 @@ public void configureCometSupport() {
     @Override
     @BeforeMethod(alwaysRun = true)
     public void setUpGlobal() throws Exception {
-        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999);
+        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
         urlTarget = "http://127.0.0.1:" + port + "/builder/invoke";
         atmoServlet = new AtmosphereServlet();
         atmoServlet.addInitParameter("com.sun.jersey.config.property.packages", this.getClass().getPackage().getName());

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty6JerseyTest.java
Patch:
@@ -55,7 +55,7 @@ public void startServer() throws Exception {
         Connector listener = new SelectChannelConnector();
 
         listener.setHost("127.0.0.1");
-        listener.setPort(TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999));
+        listener.setPort(TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort()));
         server.addConnector(listener);
 
         server.start();

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/Jetty7JerseyTest.java
Patch:
@@ -46,7 +46,7 @@ public class Jetty7JerseyTest extends BaseTest {
 
     @Override
     public void startServer() throws Exception {
-        server = new Server(TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999));
+        server = new Server(port);
         ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
         context.setContextPath("/");
         server.setHandler(context);

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/TomcatJerseyTest.java
Patch:
@@ -74,7 +74,7 @@ public void init(final ServletConfig sc) throws ServletException {
     public void setUpGlobal() throws Exception {
         System.setProperty("org.atmosphere.useNative", "true");
 
-        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", 9999);
+        port = TestHelper.getEnvVariable("ATMOSPHERE_HTTP_PORT", findFreePort());
         urlTarget = "http://127.0.0.1:" + port + "/invoke";
         configureCometSupport();
         startServer();

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereProviders.java
Patch:
@@ -65,7 +65,7 @@ public static class BroadcasterProvider implements StringReaderProvider {
 
         public StringReader getStringReader(Class type, Type genericType, Annotation[] annotations) {
 
-            if (!type.getClass().isAssignableFrom(Broadcaster.class)) {
+            if (!Broadcaster.class.isAssignableFrom(type)) {
                 return null;
             }
 

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/BaseTest.java
Patch:
@@ -572,8 +572,8 @@ public Response onCompleted(Response r) throws Exception {
     }
 
     @Test(timeOut = 60000)
-    public void testBroasdcasterScope() {
-        System.out.println("Running testBroasdcasterScope");
+    public void testBroadcasterScope() {
+        System.out.println("Running testBroadcasterScope");
         final CountDownLatch latch = new CountDownLatch(2);
         AsyncHttpClient c = new AsyncHttpClient();
         try {

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereResourceImpl.java
Patch:
@@ -174,7 +174,7 @@ public void suspend(long timeout, boolean flushComment) {
             // Set standard HTTP/1.0 no-cache header.
             res.setHeader("Pragma", "no-cache");
 
-            if (flushComment && !Boolean.valueOf(config.getInitParameter(AtmosphereServlet.SUSPEND_WITHOUT_COMMENT))) {
+            if (flushComment) {
                 write();
             }
             req.setAttribute(PRE_SUSPEND, "true");
@@ -411,6 +411,4 @@ void onBroadcast(AtmosphereResourceEvent<HttpServletRequest, HttpServletResponse
             r.onBroadcast(e);
         }
     }
-
-
 }

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -181,7 +181,6 @@ public class AtmosphereServlet extends AbstractAsyncServlet implements CometProc
     public final static String PRIMEFACES_SERVLET = "org.primefaces.comet.PrimeFacesCometServlet";
     public final static String DISABLE_ONSTATE_EVENT = "org.atmosphere.disableOnStateEvent";
     public final static String WEB_INF = "/WEB-INF/classes/";
-    public final static String SUSPEND_WITHOUT_COMMENT = "org.atmosphere.suspendWithoutComments";
     public final static String RESUME_ON_BROADCAST = "org.atmosphere.resumeOnBroadcast";
     public final static String ATMOSPHERE_SERVLET = AtmosphereServlet.class.getName();
     public final static String ATMOSPHERE_RESOURCE = AtmosphereResource.class.getName();

File: modules/cpr/src/main/java/org/atmosphere/cpr/WebSocketProcessor.java
Patch:
@@ -70,7 +70,6 @@ public void connect(final HttpServletRequest request) throws IOException {
         if (!loggedMsg.getAndSet(true)) {
             AtmosphereServlet.logger.info("Atmosphere detected WebSocketSupport: " + webSocketSupport.getClass().getName());
         }
-        atmosphereServlet.addInitParameter(AtmosphereServlet.SUSPEND_WITHOUT_COMMENT, "true");
         request.setAttribute(WebSocketSupport.WEBSOCKET_SUSPEND, "true");
         try {
             atmosphereServlet.doCometSupport(request, new WebSocketHttpServletResponse<WebSocketSupport>(webSocketSupport));

File: samples/jquery-pubsub/src/main/java/org/atmosphere/samples/pubsub/JQueryPubSub.java
Patch:
@@ -65,6 +65,7 @@ public class JQueryPubSub {
     public SuspendResponse<String> subscribe() {
         return new SuspendResponse.SuspendResponseBuilder<String>()
                 .broadcaster(topic)
+                .outputComments(true)
                 .addListener(new EventsLogger())
                 .build();
     }

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereProviders.java
Patch:
@@ -65,7 +65,7 @@ public static class BroadcasterProvider implements StringReaderProvider {
 
         public StringReader getStringReader(Class type, Type genericType, Annotation[] annotations) {
 
-            if (type.getClass().isAssignableFrom(Broadcaster.class)) {
+            if (!type.getClass().isAssignableFrom(Broadcaster.class)) {
                 return null;
             }
 

File: modules/cpr/src/main/java/org/atmosphere/websocket/WebSocketAtmosphereHandler.java
Patch:
@@ -71,8 +71,7 @@ public class WebSocketAtmosphereHandler extends AbstractReflectorAtmosphereHandl
     public void onRequest(AtmosphereResource<HttpServletRequest, HttpServletResponse> r) throws IOException {
         if (!r.getResponse().getClass().isAssignableFrom(WebSocketHttpServletResponse.class)) {
             try {
-                r.getAtmosphereConfig().getServletContext().getNamedDispatcher("default")
-                        .forward(r.getRequest(), r.getResponse());
+            	r.getAtmosphereConfig().getServletContext().getNamedDispatcher(r.getAtmosphereConfig().getDispatcherName()).forward(r.getRequest(), r.getResponse());
             } catch (ServletException e) {
                 IOException ie = new IOException();
                 ie.initCause(e);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -121,21 +121,21 @@
  *      &lt;param-value&gt;true&lt;/param-value&gt;
  *  &lt;/init-param&gt;
  * </code></pre></p>
- * You can also define {@link Broadcaster</code></pre></p> by adding:
+ * You can also define {@link Broadcaster}by adding:
  * <p><pre><code>
  *  &lt;init-param&gt;
  *      &lt;param-name&gt;org.atmosphere.cpr.broadcasterClass&lt;/param-name&gt;
  *      &lt;param-value&gt;class-name&lt;/param-value&gt;
  *  &lt;/init-param&gt;
  * </code></pre></p>
- * You can also for Atmosphere to use {@link java.io.OutputStream</code></pre></p> for all write operations.
+ * You can also for Atmosphere to use {@link java.io.OutputStream} for all write operations.
  * <p><pre><code>
  *  &lt;init-param&gt;
  *      &lt;param-name&gt;org.atmosphere.useStream&lt;/param-name&gt;
  *      &lt;param-value&gt;true&lt;/param-value&gt;
  *  &lt;/init-param&gt;
  * </code></pre></p>
- * You can also configure {@link org.atmosphere.cpr.BroadcasterCache</code></pre></p> that persist message when Browser is disconnected.
+ * You can also configure {@link org.atmosphere.cpr.BroadcasterCache} that persist message when Browser is disconnected.
  * <p><pre><code>
  *  &lt;init-param&gt;
  *      &lt;param-name&gt;org.atmosphere.cpr.broadcasterCacheClass&lt;/param-name&gt;

File: modules/cpr/src/main/java/org/atmosphere/container/GlassFishv2CometSupport.java
Patch:
@@ -172,7 +172,7 @@ private void resume(HttpServletRequest req, CometContext ctx) {
     @Override
     public void action(AtmosphereResourceImpl actionEvent) {
         super.action(actionEvent);
-        if (actionEvent.action().type == Action.TYPE.RESUME) {
+        if (actionEvent.action().type == Action.TYPE.RESUME && actionEvent.isInScope()) {
             CometContext ctx = CometEngine.getEngine().getCometContext(atmosphereCtx);
             resume(actionEvent.getRequest(), ctx);
         }
@@ -233,7 +233,8 @@ public void onTerminate(com.sun.enterprise.web.connector.grizzly.comet.CometEven
         public synchronized void onInterrupt(com.sun.enterprise.web.connector.grizzly.comet.CometEvent ce) throws IOException {
             long timeStamp = (Long) ce.getCometContext().getAttribute("Time");
             try {
-                if ((System.currentTimeMillis() - timeStamp) >= ce.getCometContext().getExpirationDelay()) {
+                if (ce.getCometContext().getExpirationDelay() > 0
+                        && (System.currentTimeMillis() - timeStamp) >= ce.getCometContext().getExpirationDelay()) {
                     timedout(req, res);
                 } else {
                     cancelled(req, res);

File: modules/cpr/src/main/java/org/atmosphere/cpr/AtmosphereServlet.java
Patch:
@@ -711,6 +711,7 @@ protected void sessionSupport(boolean sessionSupport) {
     boolean detectGoogleAppEngine(ServletConfig sc) {
         if (sc.getServletContext().getServerInfo().startsWith("Google")) {
             broadcasterClassName = GAE_BROADCASTER;
+            isBroadcasterSpecified = true;
             cometSupport = new GoogleAppEngineCometSupport(config);
             broadcasterConfig = new GAEBroadcasterConfig();
             return true;

File: modules/cpr/src/main/java/org/atmosphere/handler/ReflectorServletProcessor.java
Patch:
@@ -76,8 +76,7 @@ public class ReflectorServletProcessor extends AbstractReflectorAtmosphereHandle
     private String servletClassName;
     private final ArrayList<String> filtersClass = new ArrayList<String>();
     private final FilterChainServletWrapper wrapper = new FilterChainServletWrapper();
-    private final AtmosphereFilterChain filterChain =
-            new AtmosphereFilterChain();
+    private final AtmosphereFilterChain filterChain = new AtmosphereFilterChain();
     private Servlet servlet;
 
     public ReflectorServletProcessor() {

File: modules/jersey/src/main/java/org/atmosphere/jersey/AtmosphereResourceInjector.java
Patch:
@@ -59,18 +59,18 @@
 @Provider
 public class AtmosphereResourceInjector implements InjectableProvider<Context, Type> {
 
-    // The current {@link HttpServletrequest{
+    // The current {@link HttpServletRequest}
     @Context
     HttpServletRequest req;
 
     public ComponentScope getScope() {
         return ComponentScope.Singleton;
     }
 
-    public Injectable getInjectable(ComponentContext ic, Context a, Type c) {
+    public Injectable<AtmosphereResource<HttpServletRequest, HttpServletResponse>> getInjectable(ComponentContext ic, Context a, Type c) {
         if (c == AtmosphereResource.class) {
 
-            return new Injectable<AtmosphereResource>() {
+            return new Injectable<AtmosphereResource<HttpServletRequest, HttpServletResponse>>() {
                 /**
                  * Return the current {@link AtmosphereResourceEvent}
                  */

File: modules/jersey/src/test/java/org/atmosphere/jersey/tests/PubSubTest.java
Patch:
@@ -47,6 +47,7 @@
 import org.atmosphere.util.StringFilterAggregator;
 import org.atmosphere.util.XSSHtmlFilter;
 
+import javax.annotation.PreDestroy;
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
@@ -66,6 +67,7 @@
 @Produces("text/plain;charset=ISO-8859-1")
 public class PubSubTest {
 
+
     /**
      * Inject a {@link org.atmosphere.cpr.Broadcaster} based on @Path
      */

