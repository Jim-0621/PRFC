File: src/core-job/src/main/java/org/apache/kylin/job/constant/ExecutableConstants.java
Patch:
@@ -94,4 +94,5 @@ private ExecutableConstants() {
     public static final String STAGE_NAME_OPTIMIZE_LAYOUT_DATA_COMPACTION = "Optimize layout data by compaction";
     public static final String STAGE_NAME_INTERNAL_TABLE_LOAD = "Load Internal Table";
     public static final String STAGE_NAME_INTERNAL_TABLE_DROP_PARTITION = "Drop Internal Table Partition";
+    public static final String LOAD_GLUTEN_CACHE = "Load Gluten Cache";
 }

File: src/core-job/src/main/java/org/apache/kylin/job/model/JobParam.java
Patch:
@@ -94,6 +94,8 @@ public class JobParam {
      */
     private boolean layoutsDeletableAfterBuild = false;
 
+    private Set<Long> secondStorageDeleteLayoutIds;
+
     public JobParam addExtParams(String key, String value) {
         Map<String, String> params = getExtParams();
         params.put(key, value);

File: src/data-loading-service/src/test/java/org/apache/kylin/job/execution/NSparkExecutableTest.java
Patch:
@@ -180,7 +180,8 @@ public void testGenerateSparkCmd() {
             String cmd = (String) sparkExecutable.sparkJobHandler.generateSparkCmd(kylinConfig, desc);
 
             Assert.assertNotNull(cmd);
-            Assert.assertFalse(cmd.contains("spark.plugins=," + BuildAsyncProfilerSparkPlugin.class.getCanonicalName()));
+            Assert.assertFalse(
+                    cmd.contains("spark.plugins=," + BuildAsyncProfilerSparkPlugin.class.getCanonicalName()));
         }
 
         overwriteSystemProp("kylin.engine.spark-conf.spark.driver.extraJavaOptions",

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/mapper/FusionModelDynamicSqlSupport.java
Patch:
@@ -30,8 +30,6 @@ private FusionModelDynamicSqlSupport() {
 
     public static final class FusionModel extends BasicSqlTable<FusionModel> {
 
-        public final SqlColumn<String> modelUuid = column("model_uuid", JDBCType.CHAR);
-
         public FusionModel() {
             super("fusion_model", FusionModel::new);
         }

File: src/common-service/src/test/java/org/apache/kylin/rest/service/MetadataBackupServiceJdbcMetadataTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.kylin.common.persistence.ImageDesc;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.StringEntity;
+import org.apache.kylin.common.persistence.metadata.JdbcAuditLogStore;
 import org.apache.kylin.common.persistence.metadata.JdbcAuditLogStoreTool;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.common.util.JsonUtil;
@@ -72,7 +73,7 @@ void testAuditLogRotateWhenBackup(JdbcInfo info) throws Exception {
         val url = getTestConfig().getMetadataUrl();
         val jdbcTemplate = info.getJdbcTemplate();
         JdbcAuditLogStoreTool.prepareJdbcAuditLogStore(null, jdbcTemplate, 100);
-        val table = url.getIdentifier() + "_audit_log";
+        val table = url.getIdentifier() + JdbcAuditLogStore.AUDIT_LOG_SUFFIX;
         long count = jdbcTemplate.queryForObject("select count(1) from " + table, Long.class);
 
         val rootPath = new Path(kylinConfig.getHdfsWorkingDirectory()).getParent();

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/AuditLog.java
Patch:
@@ -55,6 +55,8 @@ public class AuditLog {
 
     private String unitId;
 
+    private String modelUuid;
+
     private String operator;
 
     private String instance;

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/FileSystemMetadataStore.java
Patch:
@@ -876,7 +876,7 @@ public void write(OutputStream out, RawResource raw) throws IOException {
         }
     }
 
-    private static class SnapShotCompressHandler implements CompressHandlerInterface {
+    public static class SnapShotCompressHandler implements CompressHandlerInterface {
         @Override
         @SuppressWarnings("unchecked")
         public <T extends RawResource> T read(InputStream in, String resPath, long time, MetadataType type)

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/JdbcPartialAuditLogStore.java
Patch:
@@ -26,8 +26,8 @@
 @Slf4j
 public class JdbcPartialAuditLogStore extends JdbcAuditLogStore {
 
-    public JdbcPartialAuditLogStore(KylinConfig config, Predicate<String> filterByResPath) throws Exception {
+    public JdbcPartialAuditLogStore(KylinConfig config, String modelUuid) throws Exception {
         super(config);
-        replayWorker.setFilterByResPath(filterByResPath);
+        replayWorker.setModelUuid(modelUuid);
     }
 }

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/mapper/StreamingJobMapper.java
Patch:
@@ -39,6 +39,7 @@ default BasicSqlTable getSqlTable() {
             @Result(column = "meta_key", property = "metaKey", jdbcType = JdbcType.VARCHAR),
             @Result(column = "project", property = "project", jdbcType = JdbcType.VARCHAR),
             @Result(column = "uuid", property = "uuid", jdbcType = JdbcType.CHAR),
+            @Result(column = "model_uuid", property = "modelUuid", jdbcType = JdbcType.CHAR),
             @Result(column = "mvcc", property = "mvcc", jdbcType = JdbcType.BIGINT),
             @Result(column = "ts", property = "ts", jdbcType = JdbcType.BIGINT),
             @Result(column = "reserved_filed_1", property = "reservedFiled1", jdbcType = JdbcType.VARCHAR),

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/resources/StreamingJobRawResource.java
Patch:
@@ -29,4 +29,7 @@
 public class StreamingJobRawResource extends RawResource {
     @JsonProperty("project")
     private String project;
+
+    @JsonProperty("model_id")
+    private String modelUuid;
 }

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/transaction/AbstractAuditLogReplayWorker.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.function.Predicate;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.kylin.common.KylinConfig;
@@ -64,7 +63,7 @@ public abstract class AbstractAuditLogReplayWorker {
     protected final long replayWaitMaxTimeoutMills;
 
     @Setter
-    protected Predicate<String> filterByResPath;
+    protected String modelUuid;
 
     protected AbstractAuditLogReplayWorker(KylinConfig config, AuditLogStore auditLogStore) {
         this.config = config;
@@ -102,7 +101,7 @@ protected void replayLogs(MessageSynchronization replayer, List<AuditLog> logs)
         }
         Map<String, UnitMessages> messagesMap = Maps.newLinkedHashMap();
         for (AuditLog log : logs) {
-            if (filterByResPath != null && !filterByResPath.test(log.getResPath())) {
+            if (modelUuid != null && !modelUuid.equals(log.getModelUuid())) {
                 continue;
             }
 

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/transaction/AuditLogReplayWorker.java
Patch:
@@ -280,7 +280,8 @@ private void handleConflictOnce(VersionConflictException e, int countDown) {
                     correctedResource.getMvcc());
             String resPath = correctedResource.generateKeyWithType();
             val fixResource = new AuditLog(0L, resPath, correctedResource.getByteSource(), correctedResource.getTs(),
-                    originResource.getMvcc() + 1, null, null, null, correctedResource.getProject(), false);
+                    originResource.getMvcc() + 1, null, null, null,
+                    null, correctedResource.getProject(), false);
             replayer.replay(new UnitMessages(Lists.newArrayList(Event.fromLog(fixResource))));
 
             val currentAuditLog = resourceStore.getAuditLogStore().get(resPath, targetResource.getMvcc());

File: src/core-common/src/test/java/org/apache/kylin/common/persistence/metadata/JdbcAuditLogReplayerTest.java
Patch:
@@ -53,7 +53,7 @@ public void testDatabaseNotAvailable(JdbcInfo info) throws Exception {
         auditLogStore.restore(0);
         Assert.assertEquals(2, workerStore.listResourcesRecursively(MetadataType.ALL.name()).size());
 
-        val auditLogTableName = info.getTableName() + "_audit_log";
+        val auditLogTableName = info.getTableName() + JdbcAuditLogStore.AUDIT_LOG_SUFFIX;
 
         jdbcTemplate.batchUpdate("ALTER TABLE " + auditLogTableName + " RENAME TO TEST_AUDIT_LOG_TEST",
                 "ALTER TABLE " + info.getTableName() + "_project RENAME TO TEST_TEST");

File: src/core-common/src/test/java/org/apache/kylin/common/persistence/metadata/JdbcMetadataStoreTest.java
Patch:
@@ -337,7 +337,7 @@ void testBatchUpdateWithMetadataCompressDisable() throws Exception {
         Assertions.assertFalse(CompressionUtils.isCompressed(contents));
 
         byte[] auditLogContents = jdbcTemplate.queryForObject(
-                "select meta_content from " + identifier + "_audit_log where meta_key = 'PROJECT/prj1'",
+                "select meta_content from " + identifier + JdbcAuditLogStore.AUDIT_LOG_SUFFIX + " where meta_key = 'PROJECT/prj1'",
                 (rs, rowNum) -> rs.getBytes(1));
 
         Assertions.assertFalse(CompressionUtils.isCompressed(auditLogContents));

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/FusionModel.java
Patch:
@@ -41,8 +41,6 @@
 @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE, getterVisibility = JsonAutoDetect.Visibility.NONE, isGetterVisibility = JsonAutoDetect.Visibility.NONE, setterVisibility = JsonAutoDetect.Visibility.NONE)
 public class FusionModel extends RootPersistentEntity implements Serializable {
 
-    private String project;
-
     @EqualsAndHashCode.Include
     @JsonProperty("alias")
     private String alias;

File: src/kylin-server-it/src/test/java/org/apache/kylin/event/HAMetadataTest.java
Patch:
@@ -156,7 +156,7 @@ public void testMetadataCatchupWithBackup() throws Exception {
 
         await().atMost(3, TimeUnit.SECONDS)
                 .until(() -> 7 == queryResourceStore.listResourcesRecursively(MetadataType.ALL.name()).size());
-        String table = getTestConfig().getMetadataUrl().getIdentifier() + "_audit_log";
+        String table = getTestConfig().getMetadataUrl().getIdentifier() + JdbcAuditLogStore.AUDIT_LOG_SUFFIX;
         val auditCount = getJdbcTemplate().queryForObject(String.format(Locale.ROOT, "select count(*) from %s", table),
                 Long.class);
         Assert.assertEquals(12L, auditCount.longValue());
@@ -188,7 +188,7 @@ public void testMetadata_RemoveAuditLog_Restore() throws Exception {
             resourceStore.checkAndPutResource("PROJECT/path3", ByteSource.wrap("{ \"mvcc\": 3 }".getBytes(charset)), 2);
             return 0;
         }, "p0");
-        String table = getTestConfig().getMetadataUrl().getIdentifier() + "_audit_log";
+        String table = getTestConfig().getMetadataUrl().getIdentifier() + JdbcAuditLogStore.AUDIT_LOG_SUFFIX;
         getJdbcTemplate().update(String.format(Locale.ROOT, "delete from %s where id=7", table));
         try {
             queryResourceStore.catchup();

File: src/streaming/src/main/java/org/apache/kylin/streaming/jobs/impl/StreamingJobLauncher.java
Patch:
@@ -196,7 +196,9 @@ protected Set<String> getMetadataDumpList() {
         val metaSet = NDataflowManager.getInstance(config, project).getDataflow(modelId)
                 .collectPrecalculationResource();
         metaSet.add(ResourceStore.METASTORE_IMAGE);
-        metaSet.add(MetadataType.mergeKeyWithType(jobId, STREAMING_JOB));
+        String uuid = jobId.substring(0, 36);
+        metaSet.add(MetadataType.mergeKeyWithType(uuid + "_build", STREAMING_JOB));
+        metaSet.add(MetadataType.mergeKeyWithType(uuid + "_merge", STREAMING_JOB));
         return metaSet;
     }
 

File: src/streaming/src/test/java/org/apache/kylin/streaming/jobs/impl/StreamingJobLauncherTest.java
Patch:
@@ -426,7 +426,7 @@ public void testGetMetadataDumpList() {
         launcher.init(PROJECT, modelId, JobTypeEnum.STREAMING_BUILD);
 
         val dumpSet = launcher.getMetadataDumpList();
-        Assert.assertEquals(17, dumpSet.size());
+        Assert.assertEquals(18, dumpSet.size());
 
         Assert.assertTrue(dumpSet.contains("DATAFLOW/e78a89dd-847f-4574-8afa-8768b4228b72"));
         Assert.assertTrue(dumpSet.contains("SEGMENT/c380dd2a-43b8-4268-b73d-2a5f76236631"));
@@ -445,6 +445,7 @@ public void testGetMetadataDumpList() {
         Assert.assertTrue(dumpSet.contains("TABLE_INFO/streaming_test.SSB.PART"));
         Assert.assertTrue(dumpSet.contains(METASTORE_IMAGE));
         Assert.assertTrue(dumpSet.contains("STREAMING_JOB/e78a89dd-847f-4574-8afa-8768b4228b72_build"));
+        Assert.assertTrue(dumpSet.contains("STREAMING_JOB/e78a89dd-847f-4574-8afa-8768b4228b72_merge"));
 
     }
 

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/UpdateAuditLogTableColumnLengthCLI.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Objects;
 
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.persistence.metadata.JdbcAuditLogStore;
 import org.apache.kylin.common.persistence.metadata.JdbcDataSource;
 import org.apache.kylin.common.util.Unsafe;
 import org.springframework.dao.EmptyResultDataAccessException;
@@ -38,7 +39,7 @@
 public class UpdateAuditLogTableColumnLengthCLI {
     private static final String SHOW_TABLE = "SHOW TABLES LIKE '%s'";
     private static final String UPDATE_COL_TO_TABLE_SQL = "alter table %s modify column %s %s";
-    private static final String TABLE_SUFFIX = "_audit_log";
+    private static final String TABLE_SUFFIX = JdbcAuditLogStore.AUDIT_LOG_SUFFIX;
     private static final String AUDIT_LOG_TABLE_OPERATOR = "operator";
     private static final int COLUMN_LENGTH = 200;
 

File: src/tool/src/test/java/org/apache/kylin/tool/AuditLogToolTest.java
Patch:
@@ -244,7 +244,7 @@ private void checkJsonl(long start, long end, File junitFolder) throws Exception
 
         val jdbcTemplate = getJdbcTemplate();
         long before = jdbcTemplate.queryForObject(String.format(Locale.ROOT,
-                "select count(1) from test_audit_Log where meta_ts between %d and %d", start, end), Long.class);
+                "select count(1) from test_audit_Log_v2 where meta_ts between %d and %d", start, end), Long.class);
         long after = fileLines(jsonl);
         Assertions.assertThat(after).isEqualTo(before);
     }
@@ -288,7 +288,8 @@ private void prepareData() throws Exception {
                         return new AuditLog(x.get("id").asLong(), x.get("meta_key").asText(),
                                 ByteSource.wrap(JsonUtil.writeValueAsBytes(x.get("meta_content"))),
                                 x.get("meta_ts").asLong(), x.get("meta_mvcc").asLong(), x.get("unit_id").asText(),
-                                x.get("operator").asText(), "", null, false);
+                                x.get("model_uuid").asText(), x.get("operator").asText(), "", null,
+                                false);
                     } catch (IOException e) {
                         throw Throwables.propagate(e);
                     }

File: src/tool/src/test/java/org/apache/kylin/tool/AuditLogWorkerTest.java
Patch:
@@ -164,7 +164,8 @@ public void twoTransaction() throws InterruptedException {
                     ps.setString(4, path);
                 });
             }
-            jdbcTemplate.update(String.format(Locale.ROOT, INSERT_AUDIT_LOG_SQL, table + "_audit_log"), ps -> {
+            jdbcTemplate.update(String.format(Locale.ROOT, INSERT_AUDIT_LOG_SQL,
+                    table + JdbcAuditLogStore.AUDIT_LOG_SUFFIX), ps -> {
                 ps.setString(1, path);
                 ps.setBytes(2, path.getBytes(Charset.defaultCharset()));
                 ps.setLong(3, ts);

File: src/tool/src/test/java/org/apache/kylin/tool/security/KylinPasswordResetCLITest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.commons.dbcp2.BasicDataSourceFactory;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
+import org.apache.kylin.common.persistence.metadata.JdbcAuditLogStore;
 import org.apache.kylin.common.persistence.metadata.jdbc.AuditLogRowMapper;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;
 import org.apache.kylin.common.util.LogOutputTestCase;
@@ -109,7 +110,7 @@ public void testResetAdminPassword() throws Exception {
 
         val url = getTestConfig().getMetadataUrl();
         val jdbcTemplate = getJdbcTemplate();
-        val all = jdbcTemplate.query("select * from " + url.getIdentifier() + "_audit_log", new AuditLogRowMapper());
+        val all = jdbcTemplate.query("select * from " + url.getIdentifier() + JdbcAuditLogStore.AUDIT_LOG_SUFFIX, new AuditLogRowMapper());
         Assert.assertTrue(all.stream().anyMatch(auditLog -> auditLog.getResPath().equals("USER_INFO/ADMIN")));
 
         System.setOut(System.out);

File: src/common-service/src/main/java/org/apache/kylin/rest/service/AccessService.java
Patch:
@@ -922,6 +922,7 @@ public Set<String> getProjectManagementUsers(String project) throws IOException
     }
 
     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#ae, 'ADMINISTRATION')")
+    @Transaction
     public boolean grantAccess(AclEntity ae, String identifier, Boolean isPrincipal, String permission)
             throws IOException {
         AccessGrantEventNotifier notifier = new AccessGrantEventNotifier(UnitOfWork.GLOBAL_UNIT, ae.getId(), identifier,
@@ -931,6 +932,7 @@ public boolean grantAccess(AclEntity ae, String identifier, Boolean isPrincipal,
     }
 
     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#ae, 'ADMINISTRATION')")
+    @Transaction
     public boolean batchGrantAccess(List<AccessRequest> requests, AclEntity ae) throws IOException {
         AccessBatchGrantEventNotifier notifier = new AccessBatchGrantEventNotifier(UnitOfWork.GLOBAL_UNIT, ae.getId(),
                 JsonUtil.writeValueAsString(requests));
@@ -939,6 +941,7 @@ public boolean batchGrantAccess(List<AccessRequest> requests, AclEntity ae) thro
     }
 
     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#ae, 'ADMINISTRATION')")
+    @Transaction
     public boolean revokeAccess(AclEntity ae, String name, boolean principal) throws IOException {
         AccessRevokeEventNotifier notifier = new AccessRevokeEventNotifier(UnitOfWork.GLOBAL_UNIT, ae.getId(), name,
                 principal);

File: src/core-common/src/main/java/org/apache/kylin/common/exception/ServerErrorCode.java
Patch:
@@ -105,6 +105,8 @@ public enum ServerErrorCode implements ErrorCodeSupplier {
     NOT_INTERNAL_TABLE_ERROR("KE-010007012"), //
     INVALID_INTERNAL_TABLE_PARAMETER("KE-010007013"), //
     INTERNAL_TABLE_NOT_EXIST("KE-010007014"), //
+    INTERNAL_TABLE_PARTITION_NOT_EXIST("KE-010007015"), //
+    INTERNAL_TABLE_RELOAD_ERROR("KE-010007016"),
 
     // 10008XXX database
     DATABASE_NOT_EXIST("KE-010008001"), //

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/InternalTableController.java
Patch:
@@ -105,7 +105,7 @@ public EnvelopeResponse<InternalTableLoadingJobResponse> truncateInternalTable(
     @ApiOperation(value = "drop_table_partitions", tags = { "AI" })
     @DeleteMapping(value = "/partitions", produces = { HTTP_VND_APACHE_KYLIN_JSON })
     @ResponseBody
-    public EnvelopeResponse<InternalTableLoadingJobResponse> dropPartitions(
+    public EnvelopeResponse<String> dropPartitions(
             @RequestParam(value = "project") String project, @RequestParam(value = "table") String table,
             @RequestParam(value = "partitions") String[] partitionValues) throws Exception {
         checkProjectName(project);
@@ -114,9 +114,9 @@ public EnvelopeResponse<InternalTableLoadingJobResponse> dropPartitions(
         }
         // If partitionValues is null, all files will be cleared
         // otherwise only files in the specified partition will be cleared.
-        InternalTableLoadingJobResponse response = internalTableService.dropPartitionsOnDeltaTable(project, table,
+        internalTableService.dropPartitionsOnDeltaTable(project, table,
                 partitionValues, null);
-        return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, response, "");
+        return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, null, "");
     }
 
     @ApiOperation(value = "load_into_internal", tags = { "AI" })

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java
Patch:
@@ -339,7 +339,8 @@ protected final void execute() throws Exception {
                 Unsafe.setProperty("kylin.env", config.getDeployEnv());
             }
 
-            if (!getParam(NBatchConstants.P_CLASS_NAME).equals(InternalTableLoadJob.class.getName())) {
+            String className = getParam(NBatchConstants.P_CLASS_NAME);
+            if (className != null && !className.equals(InternalTableLoadJob.class.getName())) {
                 ss.sparkContext().setLocalProperty("gluten.enabledForCurrentThread", "false");
                 logger.info("Disable gluten for normal build");
             }

File: src/data-loading-service/src/test/java/org/apache/kylin/job/execution/NSparkExecutableTest.java
Patch:
@@ -154,7 +154,7 @@ public void testGenerateSparkCmd() {
             String cmd = (String) sparkExecutable.sparkJobHandler.generateSparkCmd(kylinConfig, desc);
 
             Assert.assertNotNull(cmd);
-            Assert.assertTrue(cmd.contains("spark.plugins=" + BuildAsyncProfilerSparkPlugin.class.getCanonicalName()));
+            Assert.assertTrue(cmd.contains("spark.plugins=," + BuildAsyncProfilerSparkPlugin.class.getCanonicalName()));
         }
 
         overwriteSystemProp("kylin.engine.spark-conf.spark.plugins",
@@ -180,7 +180,7 @@ public void testGenerateSparkCmd() {
             String cmd = (String) sparkExecutable.sparkJobHandler.generateSparkCmd(kylinConfig, desc);
 
             Assert.assertNotNull(cmd);
-            Assert.assertFalse(cmd.contains("spark.plugins=" + BuildAsyncProfilerSparkPlugin.class.getCanonicalName()));
+            Assert.assertFalse(cmd.contains("spark.plugins=," + BuildAsyncProfilerSparkPlugin.class.getCanonicalName()));
         }
 
         overwriteSystemProp("kylin.engine.spark-conf.spark.driver.extraJavaOptions",

File: src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java
Patch:
@@ -35,6 +35,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.metrics.MetricsCategory;
 import org.apache.kylin.common.metrics.MetricsGroup;
@@ -44,7 +45,6 @@
 import org.apache.kylin.metadata.cube.model.NDataflowManager;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.NDataModelManager;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryHistory;
 import org.apache.kylin.metadata.query.QueryHistoryDAO;
 import org.apache.kylin.metadata.query.QueryHistoryInfo;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/task/QueryHistoryMetaUpdateScheduler.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.Singletons;
 import org.apache.kylin.common.constant.LogConstant;
 import org.apache.kylin.common.logging.SetLogCategory;
@@ -54,7 +55,6 @@
 import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.project.ProjectInstance;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryHistory;
 import org.apache.kylin.metadata.query.RDBMSQueryHistoryDAO;
 import org.apache.kylin.rest.service.IUserGroupService;
@@ -203,7 +203,7 @@ private Map<String, DataflowHitCount> collectDataflowHitCount(List<QueryHistory>
                 if (CollectionUtils.isEmpty(realizations)) {
                     continue;
                 }
-                val realizationList = realizations.stream().filter(this::isValidRealization)
+                val realizationList = realizations.stream().filter(this::isIndexRealization)
                         .collect(Collectors.toList());
                 for (val realization : realizationList) {
                     String modelId = realization.getModelId();
@@ -217,7 +217,7 @@ private Map<String, DataflowHitCount> collectDataflowHitCount(List<QueryHistory>
             return result;
         }
 
-        private boolean isValidRealization(NativeQueryRealization realization) {
+        private boolean isIndexRealization(NativeQueryRealization realization) {
             val config = KylinConfig.getInstanceFromEnv();
             val dfManager = NDataflowManager.getInstance(config, project);
             return dfManager.getDataflow(realization.getModelId()) != null && realization.getLayoutId() != null;

File: src/common-service/src/test/java/org/apache/kylin/rest/service/SourceTestCase.java
Patch:
@@ -55,7 +55,6 @@ protected String getProject() {
     public void setUp() {
         JobContextUtil.cleanUp();
         SparkJobFactoryUtils.initJobFactory();
-        JobContextUtil.cleanUp();
         createTestMetadata();
         Authentication authentication = new TestingAuthenticationToken("ADMIN", "ADMIN", Constant.ROLE_ADMIN);
         SecurityContextHolder.getContext().setAuthentication(authentication);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/FusionModelManager.java
Patch:
@@ -23,11 +23,11 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.persistence.MetadataType;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.RootPersistentEntity;
 import org.apache.kylin.metadata.cachesync.CachedCrudAssist;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -56,7 +56,8 @@ static FusionModelManager newInstance(KylinConfig config, String project) {
     private FusionModelManager(KylinConfig config, String project) {
         this.config = config;
         this.project = project;
-        this.crud = new CachedCrudAssist<FusionModel>(getStore(), MetadataType.FUSION_MODEL, project, FusionModel.class) {
+        this.crud = new CachedCrudAssist<FusionModel>(getStore(), MetadataType.FUSION_MODEL, project,
+                FusionModel.class) {
             @Override
             protected FusionModel initEntityAfterReload(FusionModel t, String resourceName) {
                 t.init(config, project);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java
Patch:
@@ -24,11 +24,12 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.util.JsonUtil;
+import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import org.apache.kylin.metadata.model.FusionModelManager;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import org.apache.kylin.guava30.shaded.common.collect.Lists;
 
 import lombok.Getter;
 import lombok.Setter;

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/streaming/FusionModelManagerTest.java
Patch:
@@ -18,11 +18,11 @@
 
 package org.apache.kylin.metadata.streaming;
 
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.metadata.model.FusionModel;
 import org.apache.kylin.metadata.model.FusionModelManager;
 import org.apache.kylin.metadata.model.NDataModelManager;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: src/kylin-it/src/test/java/org/apache/kylin/query/StreamingOlapContextTest.java
Patch:
@@ -22,9 +22,9 @@
 
 import org.apache.calcite.jdbc.CalciteSchema;
 import org.apache.calcite.rex.RexExecutorImpl;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;
 import org.apache.kylin.guava30.shaded.common.collect.Lists;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.query.engine.QueryExec;
 import org.apache.kylin.query.engine.TypeSystem;
 import org.apache.kylin.query.engine.meta.SimpleDataContext;

File: src/query-server/src/main/java/org/apache/kylin/rest/controller/NQueryController.java
Patch:
@@ -52,6 +52,7 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.debug.BackdoorToggles;
 import org.apache.kylin.common.exception.KylinException;
@@ -66,7 +67,6 @@
 import org.apache.kylin.guava30.shaded.common.collect.Maps;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.SegmentStatusEnum;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryHistoryRequest;
 import org.apache.kylin.metadata.query.util.QueryHisTransformStandardUtil;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;

File: src/query-server/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java
Patch:
@@ -32,12 +32,12 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import org.apache.kylin.guava30.shaded.common.collect.Maps;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryHistory;
 import org.apache.kylin.metadata.query.QueryHistoryInfo;
 import org.apache.kylin.metadata.query.QueryHistoryRequest;

File: src/query-service/src/main/java/org/apache/kylin/rest/response/QueryDetectResponse.java
Patch:
@@ -24,13 +24,13 @@
 import java.util.stream.Collectors;
 
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import org.apache.kylin.metadata.cube.model.IndexEntity;
 import org.apache.kylin.metadata.cube.model.IndexPlan;
 import org.apache.kylin.metadata.cube.model.LayoutEntity;
 import org.apache.kylin.metadata.cube.model.NIndexPlanManager;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryHistory;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
@@ -145,7 +145,7 @@ public IndexInfo buildResponse(NativeQueryRealization realization, String projec
             this.modelId = realization.getModelId();
             this.modelAlias = realization.getModelAlias();
             this.layoutId = realization.getLayoutId();
-            this.indexType = realization.getIndexType();
+            this.indexType = realization.getType();
             this.partialMatchModel = realization.isPartialMatchModel();
             this.valid = realization.isValid();
             this.isTableIndex = IndexEntity.isTableIndex(realization.getLayoutId());

File: src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java
Patch:
@@ -24,11 +24,11 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.debug.BackdoorToggles;
 import org.apache.kylin.guava30.shaded.common.base.Preconditions;
 import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponseV2.java
Patch:
@@ -24,9 +24,9 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.guava30.shaded.common.base.Preconditions;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryMetrics;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.slf4j.Logger;
@@ -207,10 +207,10 @@ public String adapterCubeField(List<NativeQueryRealization> realizations) {
             return "";
         }
         List<String> relatedModelAlias = realizations.stream()
-                .filter(e -> !QueryMetrics.TABLE_INDEX.equals(e.getIndexType()))
+                .filter(e -> !QueryMetrics.TABLE_INDEX.equals(e.getType()))
                 .map(e -> "CUBE[name=" + e.getModelAlias() + "]").distinct().collect(Collectors.toList());
         List<String> relateIndexModelAlias = realizations.stream()
-                .filter(e -> QueryMetrics.TABLE_INDEX.equals(e.getIndexType()))
+                .filter(e -> QueryMetrics.TABLE_INDEX.equals(e.getType()))
                 .map(e -> "INVERTED_INDEX[name=" + e.getModelAlias() + "]").distinct().collect(Collectors.toList());
         StringBuilder stringBuilder = new StringBuilder();
         String join1 = String.join(",", relatedModelAlias);

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryHistoryService.java
Patch:
@@ -51,6 +51,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.time.DateUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.NativeQueryRealization;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.persistence.RootPersistentEntity;
@@ -69,7 +70,6 @@
 import org.apache.kylin.metadata.model.NDataModelManager;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.project.ProjectInstance;
-import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryHistory;
 import org.apache.kylin.metadata.query.QueryHistoryDAO;
 import org.apache.kylin.metadata.query.QueryHistoryInfo;
@@ -216,7 +216,6 @@ private List<NativeQueryRealization> parseQueryRealizationInfo(QueryHistory quer
                 NDataModelResponse model = (NDataModelResponse) modelService
                         .updateResponseAcl(new NDataModelResponse(nDataModel), project);
                 realization.setModelAlias(model.getFusionModelAlias());
-                realization.setAclParams(model.getAclParams());
                 realization.setLayoutExist(
                         isLayoutExist(indexPlanManager, realization.getModelId(), realization.getLayoutId()));
 

File: src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java
Patch:
@@ -585,8 +585,8 @@ private SQLException newSqlException(String sql, String msg, Throwable e) {
             diagnosticInfo.append(SEP).append("3. OLAPContext(s) and matched model(s) :");
             if (ContextUtil.getThreadLocalContexts() != null) {
                 String olapMatchInfo = ContextUtil.getNativeRealizations().stream()
-                        .map(r -> String.format(Locale.ROOT, " Ctx=%d, \tMatched=%s, \tIndexType=%s, \tLayoutId=%d",
-                                r.getCxtId(), r.getModelAlias(), r.getIndexType(), r.getLayoutId()))
+                        .map(r -> String.format(Locale.ROOT, " \tMatched=%s, \tIndexType=%s, \tLayoutId=%d",
+                                r.getModelAlias(), r.getType(), r.getLayoutId()))
                         .collect(Collectors.joining(SEP));
                 if (olapMatchInfo.length() >= 10) {
                     diagnosticInfo.append(SEP).append(olapMatchInfo).append(SEP);

File: src/data-loading-service/src/test/java/org/apache/kylin/engine/spark/job/LayoutDataOptimizeJobTest.java
Patch:
@@ -125,6 +125,8 @@ public void testV3LayoutDataOptimizeJob() throws InterruptedException {
                 .collect(Collectors.toList());
         manager.updateLayoutDetails(df.getId(), zorderLayoutId, (copy) -> {
             copy.setZorderByColumns(zorderColIds);
+            copy.setMinCompactionFileSizeInBytes(1);
+            copy.setMaxCompactionFileSizeInBytes(10000);
         });
 
         String jobId = "layout-data-optimize-job";

File: src/modeling-service/src/test/java/org/apache/kylin/rest/request/OptimizeLayoutDataRequestTest.java
Patch:
@@ -28,10 +28,9 @@ public class OptimizeLayoutDataRequestTest {
     public void testBasic() {
         val template = OptimizeLayoutDataRequest.template;
         val modelSetting = template.getModelOptimizationSetting();
-        val layoutSettings = template.getLayoutOptimizationSettingList().get(0).getSetting();
+        val layoutSettings = template.getLayoutDataOptimizationSettingList().get(0).getSetting();
 
         Assert.assertEquals("", template.getProject());
-        Assert.assertEquals("", template.getModelId());
 
         Assert.assertEquals(0, modelSetting.getMaxCompactionFileSize());
         Assert.assertEquals(0, modelSetting.getMinCompactionFileSize());

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -20,8 +20,6 @@
 
 import static java.lang.Math.toIntExact;
 import static org.apache.kylin.common.constant.AsyncProfilerConstants.ASYNC_PROFILER_LIB_LINUX_ARM64;
-import static org.apache.kylin.common.constant.AsyncProfilerConstants.ASYNC_PROFILER_LIB_LINUX_MUSL_ARM64;
-import static org.apache.kylin.common.constant.AsyncProfilerConstants.ASYNC_PROFILER_LIB_LINUX_MUSL_X64;
 import static org.apache.kylin.common.constant.AsyncProfilerConstants.ASYNC_PROFILER_LIB_LINUX_X64;
 import static org.apache.kylin.common.constant.Constants.KYLIN_SOURCE_JDBC_CONNECTION_URL_KEY;
 import static org.apache.kylin.common.constant.Constants.KYLIN_SOURCE_JDBC_DRIVER_KEY;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java
Patch:
@@ -65,6 +65,7 @@ public NLayoutCandidate(LayoutEntity layoutEntity, NDataLayoutDetails dataLayout
         Preconditions.checkNotNull(layoutEntity);
         Preconditions.checkNotNull(dataLayoutDetails);
         this.layoutEntity = layoutEntity;
+        this.layoutId = layoutEntity.getId();
         this.dataLayoutDetails = dataLayoutDetails;
     }
 

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/InternalTableController.java
Patch:
@@ -166,7 +166,7 @@ public EnvelopeResponse<DataResult<List<InternalTableDescResponse>>> getTableLis
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, DataResult.get(rep, offset, limit), "");
     }
 
-    @ApiOperation(value = "update_table", tags = { "AI" })
+    @ApiOperation(value = "get_table_detail", tags = { "AI" })
     @GetMapping(value = "/{database:.+}/{table:.+}", produces = { HTTP_VND_APACHE_KYLIN_JSON })
     @ResponseBody
     public EnvelopeResponse<DataResult<List<InternalTablePartitionDetail>>> getTableDetail(

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/InternalTableLoadingJob.java
Patch:
@@ -50,6 +50,7 @@ public static InternalTableLoadingJob create(InternalTableJobBuildParam param) {
         Preconditions.checkArgument(param.getSubmitter() != null);
         InternalTableLoadingJob job = new InternalTableLoadingJob();
         job.setSubmitter(param.getSubmitter());
+        job.setName(param.getJobType().toString());
         job.setJobType(param.getJobType());
         job.setId(param.getJobId());
         job.setTargetSubject(internalTable.getIdentity());

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/MemoryAuditLogStore.java
Patch:
@@ -106,7 +106,7 @@ public long getLogOffset() {
 
     @Override
     public void restore(long currentId) {
-        throw new UnsupportedOperationException("MemoryAuditLog no need to restore.");
+        // Do nothing
     }
 
     @Override

File: src/spark-project/kylin-soft-affinity-cache/src/main/java/org/apache/kylin/cache/softaffinity/SoftAffinityBookKeeping.java
Patch:
@@ -70,7 +70,7 @@ public static Map<String, String> audit() {
     public static void logAudits() {
         List<String> lines = audit().entrySet().stream().map(e -> e.getKey() + " -> " + e.getValue())
                 .collect(Collectors.toList());
-        log.debug("Past few mappings of location -> executors: \n" + String.join("\n", lines));
+        log.debug("Past few mappings of location -> executors: \n{}", String.join("\n", lines));
     }
 
     public static int size() {

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -953,6 +953,7 @@ class KylinConfigBaseTest {
                 "kylin.storage.columnar.spark-conf.spark.sql.legacy.allowNegativeScaleOfDecimal", "false", false));
         map.put("decimalOperationsAllowPrecisionLoss", new PropertiesEntity(
                 "kylin.storage.columnar.spark-conf.spark.sql.decimalOperations.allowPrecisionLoss", "true", true));
+        map.put("isSparkUIAclEnabled", new PropertiesEntity("kylin.query.engine.spark-ui-acl.enabled", "", false));
     }
 
     @Test

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/JobController.java
Patch:
@@ -163,7 +163,7 @@ public EnvelopeResponse<String> updateJobStatus(@RequestBody JobUpdateRequest jo
         jobInfoService.checkJobStatusAndAction(jobUpdateRequest);
         Map<String, List<String>> nodeWithJobs = JobContextUtil
                 .splitJobIdsByScheduleInstance(jobUpdateRequest.getJobIds());
-        if (needRouteToOtherInstance(nodeWithJobs, jobUpdateRequest.getAction(), headers)) {
+        if (needRouteToOtherInstance(nodeWithJobs, jobUpdateRequest.getAction())) {
             return remoteUpdateJobStatus(jobUpdateRequest, headers, nodeWithJobs);
         }
         if (StringUtils.isBlank(jobUpdateRequest.getProject())

File: src/core-metadata/src/test/java/org/apache/kylin/cube/gridtable/GridTableMappingTest.java
Patch:
@@ -95,7 +95,8 @@ public void testGetIndexOf() {
         FunctionDesc functionDesc = new FunctionDesc();
         ParameterDesc parameterDesc = new ParameterDesc();
         parameterDesc.setType("field");
-        parameterDesc.setValue("CUSTOMER_ID");
+        parameterDesc.setValue("ORDER_ID");
+        parameterDesc.setColRef(cube.getModel().getRootFactTable().getColumn("ORDER_ID"));
         functionDesc.setParameters(Lists.newArrayList(parameterDesc));
         functionDesc.setExpression("COUNT");
         functionDesc.setReturnType("bigint");

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/model/util/ComputedColumnUtilTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.junit.Test;
 
 import org.apache.kylin.guava30.shaded.common.collect.Sets;
-
 import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import lombok.val;
 

File: src/datasource-sdk/src/main/java/org/apache/kylin/sdk/datasource/framework/conv/ConvRownumSqlWriter.java
Patch:
@@ -68,7 +68,7 @@ protected SqlWriter.Frame startList(SqlWriter.FrameType frameType, String keywor
         WHERE 1 = 1 AND ROWNUM__ <= LIMIT
         
         */
-        if (this.frame != null && this.frame.getFrameType() == SqlWriter.FrameTypeEnum.ORDER_BY
+        if (this.frame != null && this.frame.frameType == SqlWriter.FrameTypeEnum.ORDER_BY
                 && (frameType == SqlWriter.FrameTypeEnum.SELECT || frameType == SqlWriter.FrameTypeEnum.SETOP
                         || frameType == SqlWriter.FrameTypeEnum.SIMPLE)) {
             this.keyword(masageSqlRowStart());
@@ -83,7 +83,7 @@ public void fetchOffset(SqlNode fetch, SqlNode offset) {
 
     @Override
     protected void doWriteRowNum(SqlNode fetch, SqlNode offset) {
-        if (this.frame != null && this.frame.getFrameType() == SqlWriter.FrameTypeEnum.ORDER_BY) {
+        if (this.frame != null && this.frame.frameType == SqlWriter.FrameTypeEnum.ORDER_BY) {
             final SqlWriter.Frame fetchFrame = this.startList(SqlWriter.FrameTypeEnum.FETCH);
             this.newlineAndIndent();
             if (fetch != null) {
@@ -126,7 +126,7 @@ public void writeWith(SqlCall call, int leftPrec, int rightPrec) {
         Here we should print "SELECT * FROM (" before print origin sql
         */
         printSelectForRownumInWithCLause = (this.frame != null
-                && this.frame.getFrameType() == SqlWriter.FrameTypeEnum.ORDER_BY);
+                && this.frame.frameType == SqlWriter.FrameTypeEnum.ORDER_BY);
         super.writeWith(call, leftPrec, rightPrec);
     }
 

File: src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.kylin.newten;
 
-
 import java.util.ArrayList;
 import java.util.List;
 
@@ -86,7 +85,7 @@ public void testInClause() throws Exception {
         String not_in2 = base + "where substring(LSTG_FORMAT_NAME, 1, 1) not in ('A','F')"
                 + " or substring(LSTG_FORMAT_NAME, 1, 1) not in ('O','B')";
 
-        overwriteSystemProp("calcite.keep-in-clause", "true");
+        overwriteSystemProp("kylin.query.convert-in-to-or-threshold", "0"); // default value
         Dataset<Row> df1 = ExecAndComp.queryModelWithoutCompute(getProject(), in1);
         Dataset<Row> df2 = ExecAndComp.queryModelWithoutCompute(getProject(), in2);
         Dataset<Row> df3 = ExecAndComp.queryModelWithoutCompute(getProject(), not_in2);
@@ -99,7 +98,7 @@ public void testInClause() throws Exception {
         ArrayList<String> querys = Lists.newArrayList(in1, in2, not_in1, not_in2);
         ExecAndComp.execAndCompareQueryList(querys, getProject(), ExecAndComp.CompareLevel.SAME, "left");
 
-        overwriteSystemProp("calcite.keep-in-clause", "false");
+        overwriteSystemProp("kylin.query.convert-in-to-or-threshold", "100");
         Dataset<Row> df5 = ExecAndComp.queryModelWithoutCompute(getProject(), in1);
         Dataset<Row> df6 = ExecAndComp.queryModelWithoutCompute(getProject(), in2);
         Dataset<Row> df7 = ExecAndComp.queryModelWithoutCompute(getProject(), not_in2);

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NFilePruningTest.java
Patch:
@@ -638,7 +638,7 @@ public String getProject() {
     }
 
     private long assertResultsAndScanFiles(String modelId, String sql, long numScanFiles, boolean emptyLayout,
-            List<Pair<String, String>> expectedRanges) throws Exception {
+            List<Pair<String, String>> expectedRanges) {
         val df = ExecAndComp.queryModelWithoutCompute(getProject(), sql);
         val context = ContextUtil.listContexts().get(0);
         if (emptyLayout) {

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NTopNResultTest.java
Patch:
@@ -57,7 +57,7 @@ public String getProject() {
     }
 
     @Test
-    public void testTopNWithtwoSameMeasure() throws Exception {
+    public void testWithTwoSameMeasuresOfTopN() throws Exception {
         String dfID1 = "d9f564ce-bf63-498e-b346-db982fcf91f9";
         String dfID2 = "c6381db2-802f-4a25-98f0-bfe021c304eg";
         String sqlHitCube = "select sum(price)  from TEST_KYLIN_FACT group by TRANS_ID order by sum(price)  desc limit 10";

File: src/kylin-it/src/test/java/org/apache/kylin/query/engine/EnhancedAggPushDownPlannerTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.util.Pair;
+import org.apache.kylin.query.optrule.SumConstantConvertRule;
 import org.apache.kylin.query.rules.CalciteRuleTestBase;
 import org.apache.kylin.query.util.HepUtils;
 import org.apache.kylin.query.util.RelAggPushDownUtil;
@@ -86,6 +87,7 @@ public void testEnhancedAggPushDown() throws IOException {
                 "query/enhanced_agg_pushdown");
         QueryContext.current().setProject(defaultProject);
         Collection<RelOptRule> postOptRules = new LinkedHashSet<>();
+        postOptRules.add(SumConstantConvertRule.INSTANCE);
         postOptRules.addAll(HepUtils.SumExprRules);
         postOptRules.addAll(HepUtils.CountDistinctExprRules);
         postOptRules.addAll(HepUtils.AggPushDownRules);

File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/MultiPartitionPruningTest.java
Patch:
@@ -330,9 +330,9 @@ public void testPartitionPruningTimestamp() throws Exception {
         val dfName = "8c670664-8d05-466a-802f-83c023b56c79";
 
         // segment1 [2009-01-01, 2011-01-01] partition value 2010-01-01 00:56:38, 2010-01-01 04:03:59
-        // segment2 [2011-01-01, 2013-01-01] partition value 2010-01-01 04:03:59, 
+        // segment2 [2011-01-01, 2013-01-01] partition value 2010-01-01 04:03:59,
         //    2010-01-01 08:16:36, 2010-01-02 14:24:50
-        // segment3 [2013-01-01, 2015-01-01] partition value 2010-01-01 08:16:36, 
+        // segment3 [2013-01-01, 2015-01-01] partition value 2010-01-01 08:16:36,
         //    2010-01-02 14:24:50, 2010-01-03 05:15:09
         indexDataConstructor.buildMultiSegmentPartitions(dfName, "2009-01-01 00:00:00", "2011-01-01 00:00:00",
                 Lists.newArrayList(10001L), Lists.newArrayList(0L, 1L));

File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java
Patch:
@@ -232,6 +232,7 @@ public void testSegmentPruningTimestampType2DateType() throws Exception {
     public void testCancelAndInterruptPruning() throws SqlParseException {
         val dataflowId = "3718b614-5191-2254-77e9-f4c5ca64e312";
         KylinConfig kylinConfig = getTestConfig();
+        overwriteSystemProp("kylin.query.filter-condition-count", "999");
 
         String sql = "SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE id = '121' AND (\n"
                 + "(TIMESTAMP_10 >= '2021-11-03')\n" + "AND (TIMESTAMP_10 <= '2021-11-04')\n" + ")\n" + "OR (\n"

File: src/kylin-it/src/test/java/org/apache/kylin/util/QueryResultComparator.java
Patch:
@@ -106,7 +106,7 @@ private static List<String> normalizeResult(List<List<String>> rows, List<Struct
                     try {
                         normalizedRow.append(new BigDecimal(row.get(i)).setScale(2, RoundingMode.HALF_UP));
                     } catch (Exception e) {
-                        log.warn("try to cast to decimal failed", e);
+                        log.debug("Illegal number format: {}", row.get(i));
                         normalizedRow.append(row.get(i));
                     }
                 } else {

File: src/modeling-service/src/main/java/org/apache/kylin/common/util/ModifyTableNameSqlVisitor.java
Patch:
@@ -22,8 +22,7 @@
 
 import org.apache.calcite.sql.SqlIdentifier;
 import org.apache.calcite.sql.util.SqlBasicVisitor;
-
-import com.google.common.collect.ImmutableList;
+import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;
 
 public class ModifyTableNameSqlVisitor extends SqlBasicVisitor<Object> {
     private final String oldAliasName;

File: src/query-common/src/main/java/org/apache/kylin/query/engine/TypeSystem.java
Patch:
@@ -25,6 +25,9 @@
 
 public class TypeSystem {
 
+    private TypeSystem() {
+    }
+
     public static RelDataTypeSystem relDataTypeSystem() {
         return new KylinRelDataTypeSystem();
     }

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/ColumnRowType.java
Patch:
@@ -25,9 +25,9 @@
 import org.apache.kylin.metadata.model.TblColRef;
 
 /**
- * 
+ *
  * @author xjiang
- * 
+ *
  */
 public class ColumnRowType {
 
@@ -78,7 +78,7 @@ public int getIndexByCanonicalName(String columnName) {
         return -1;
     }
 
-    public int getIndexByNameAndByContext(OlapContext ctx, String columnName) {
+    public int getColumnIndex(OlapContext ctx, String columnName) {
         for (int i = 0; i < columns.size(); i++) {
             TblColRef colRef = columns.get(i);
             if (colRef.getName().equals(columnName) && ctx.belongToContextTables(colRef)

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OlapMinusRel.java
Patch:
@@ -107,8 +107,8 @@ protected ColumnRowType buildColumnRowType() {
 
     @Override
     public void implementOlap(OlapImpl olapImpl) {
-        for (int i = 0, n = getInputs().size(); i < n; i++) {
-            olapImpl.visitChild(getInputs().get(i), this);
+        for (RelNode input : getInputs()) {
+            olapImpl.visitChild(input, this);
         }
         this.columnRowType = buildColumnRowType();
         if (context != null && this == context.getTopNode() && !context.isHasAgg()) {

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OlapTableScan.java
Patch:
@@ -61,7 +61,7 @@
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.metadata.model.TableRef;
 import org.apache.kylin.metadata.model.TblColRef;
-import org.apache.kylin.query.engine.KECalciteConfig;
+import org.apache.kylin.query.engine.KylinConnectionConfig;
 import org.apache.kylin.query.schema.OlapTable;
 import org.apache.kylin.query.util.ICutContextStrategy;
 
@@ -146,7 +146,7 @@ public void implementOlap(OlapImpl olapImpl) {
                 // 1. col with _KY_
                 // 2. CC col when exposeComputedColumn config is set to false
                 if (!tblColRef.getName().startsWith("_KY_") && !(tblColRef.getColumnDesc().isComputedColumn()
-                        && !KECalciteConfig.current().exposeComputedColumn())) {
+                        && !KylinConnectionConfig.current().exposeComputedColumn())) {
                     context.getAllColumns().add(tblColRef);
                 }
             }
@@ -295,7 +295,6 @@ public OlapTableScan cleanRelOptCluster() {
         tableScan.context = this.context;
         tableScan.kylinConfig = this.kylinConfig;
         tableScan.digest = this.digest;
-        tableScan.id = this.id;
         tableScan.alias = this.alias;
         return tableScan;
     }

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OlapUnionRel.java
Patch:
@@ -83,8 +83,8 @@ public RelWriter explainTerms(RelWriter pw) {
 
     @Override
     public void implementOlap(OlapImpl olapImpl) {
-        for (int i = 0, n = getInputs().size(); i < n; i++) {
-            olapImpl.visitChild(getInputs().get(i), this);
+        for (RelNode input : getInputs()) {
+            olapImpl.visitChild(input, this);
         }
         this.columnRowType = buildColumnRowType();
         if (context != null && this == context.getTopNode() && !context.isHasAgg()) {

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OlapValuesRel.java
Patch:
@@ -40,13 +40,12 @@
 import org.apache.calcite.rel.type.RelDataTypeField;
 import org.apache.calcite.rex.RexLiteral;
 import org.apache.kylin.guava30.shaded.common.base.Preconditions;
+import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;
 import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import org.apache.kylin.guava30.shaded.common.collect.Sets;
 import org.apache.kylin.metadata.model.TblColRef;
 import org.apache.kylin.query.util.ICutContextStrategy;
 
-import com.google.common.collect.ImmutableList;
-
 import lombok.Getter;
 import lombok.Setter;
 

File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java
Patch:
@@ -293,7 +293,7 @@ private static List<Candidate> trySelectCandidates(OlapContext context, Multimap
             // discard the props of OlapContext modified by rewriteCcInnerCol
             restoreOlapContextProps(context, preservedOlapProps);
 
-            // The matchJoin() method has the potential to optimize the JoinsGraph, 
+            // The matchJoin() method has the potential to optimize the JoinsGraph,
             // therefore we perform a check on ready segments at this point.
             if (!hasReadySegments(model)) {
                 logger.info("Exclude this model {} because there are no ready segments", model.getAlias());
@@ -729,7 +729,7 @@ public static Map<String, String> matchJoins(NDataModel model, OlapContext ctx,
             matched = ctx.getJoinsGraph().match(model.getJoinsGraph(), matchedAliasMap, partialMatchInnerJoin,
                     partialMatchNonEquiJoin);
             if (!matched) {
-                KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();
+                KylinConfig kylinConfig = NProjectManager.getProjectConfig(model.getProject());
                 if (kylinConfig.isJoinMatchOptimizationEnabled()) {
                     logger.info(
                             "Query match join with join match optimization mode, trying to match with newly rewrite join graph.");

File: src/query-common/src/main/java/org/apache/kylin/query/security/RowFilter.java
Patch:
@@ -360,9 +360,9 @@ public SqlNode visit(SqlCall call) {
                 // the instanceof SqlIdentifier is for the case that
                 // "select * from (select * from t2) t1".subquery as table.
                 SqlBasicCall node = (SqlBasicCall) call;
-                if (node.getOperator() instanceof SqlAsOperator && node.getOperands()[0] instanceof SqlIdentifier) {
-                    SqlIdentifier id0 = (SqlIdentifier) ((SqlBasicCall) call).getOperands()[0];
-                    SqlIdentifier id1 = (SqlIdentifier) ((SqlBasicCall) call).getOperands()[1];
+                if (node.getOperator() instanceof SqlAsOperator && node.operand(0) instanceof SqlIdentifier) {
+                    SqlIdentifier id0 = (SqlIdentifier) ((SqlBasicCall) call).operand(0);
+                    SqlIdentifier id1 = (SqlIdentifier) ((SqlBasicCall) call).operand(1);
                     String table = id0.toString(); //DB.TABLE OR TABLE
                     String alias = CalciteParser.getLastNthName(id1, 1);
                     tablesWithAlias.add(new Table(table, alias));

File: src/query-common/src/main/java/org/apache/kylin/query/util/RestoreFromComputedColumn.java
Patch:
@@ -351,9 +351,9 @@ public SqlNode visit(SqlCall call) {
 
             //skip the part after AS
             if (call instanceof SqlBasicCall && call.getOperator() instanceof SqlAsOperator) {
-                SqlNode[] operands = ((SqlBasicCall) call).getOperands();
-                if (operands != null && operands.length == 2) {
-                    operands[0].accept(this);
+                List<SqlNode> operands = call.getOperandList();
+                if (operands != null && operands.size() == 2) {
+                    operands.get(0).accept(this);
                 }
             } else {
                 List<SqlNode> operands = call.getOperandList();

File: src/query/src/main/java/org/apache/kylin/query/engine/SchemaMetaData.java
Patch:
@@ -28,12 +28,12 @@
 import org.apache.calcite.jdbc.CalciteSchema;
 import org.apache.calcite.schema.Table;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.query.engine.data.TableSchema;
+import org.apache.kylin.rest.constant.Constant;
 
 public class SchemaMetaData {
 
-    private QueryExec queryExec;
+    private final QueryExec queryExec;
 
     public SchemaMetaData(String project, KylinConfig kylinConfig) {
         queryExec = new QueryExec(project, kylinConfig);
@@ -65,7 +65,7 @@ private TableSchema convertToTableSchema(String catalogName, String schemaName,
     }
 
     private JavaTypeFactory javaTypeFactory() {
-        return new TypeSystem().javaTypeFactory();
+        return TypeSystem.javaTypeFactory();
     }
 
 }

File: src/query/src/main/java/org/apache/kylin/query/engine/view/ViewSchema.java
Patch:
@@ -92,7 +92,7 @@ public LazyParsedViewTableMacro(Supplier<CalcitePrepare.AnalyzeViewResult> parse
         }
 
         @Override
-        public TranslatableTable apply(List<Object> arguments) {
+        public TranslatableTable apply(List<? extends Object> arguments) {
             return this.viewTable(getParsed(), viewSql, schemaPath, viewPath);
         }
 

File: src/query/src/main/java/org/apache/kylin/query/optrule/AggregateProjectReduceRule.java
Patch:
@@ -103,7 +103,7 @@ public void onMatch(RelOptRuleCall call) {
             return;
         }
 
-        RelBuilder relBuilder = call.builder();
+        RelBuilder relBuilder = call.builder().transform(c -> c.withPruneInputOfAggregate(false));
         relBuilder.push(project.getInput());
         relBuilder.project(Pair.left(newProjects), Pair.right(newProjects));
         relBuilder.aggregate(relBuilder.groupKey(newGroupSet, false, null), newAggrCalls.build());

File: src/query/src/main/java/org/apache/kylin/query/optrule/CountDistinctCaseWhenFunctionRule.java
Patch:
@@ -51,6 +51,7 @@
 import org.apache.calcite.sql.type.SqlTypeUtil;
 import org.apache.calcite.sql.validate.SqlUserDefinedAggFunction;
 import org.apache.calcite.tools.RelBuilderFactory;
+import org.apache.calcite.util.Optionality;
 import org.apache.calcite.util.Util;
 import org.apache.kylin.measure.bitmap.BitmapCountAggFunc;
 import org.apache.kylin.metadata.model.FunctionDesc;
@@ -87,7 +88,7 @@ private boolean isCountDistinctCaseExpr(AggregateCall aggregateCall, Project inp
         }
 
         int input = aggregateCall.getArgList().get(0);
-        RexNode expression = inputProject.getChildExps().get(input);
+        RexNode expression = inputProject.getProjects().get(input);
         // check if it's in the form of case when ... then col else null
         if (expression.getKind() != SqlKind.CASE) {
             return false;
@@ -180,7 +181,7 @@ private static SqlAggFunction createCustomAggFunction(String funcName, RelDataTy
             explicitReturnTypeInference = ReturnTypes.explicit(returnType);
         }
         return new SqlUserDefinedAggFunction(sqlIdentifier, explicitReturnTypeInference, InferTypes.explicit(argTypes),
-                OperandTypes.family(typeFamilies), aggFunction, false, false, typeFactory);
+                OperandTypes.family(typeFamilies), aggFunction, false, false, Optionality.FORBIDDEN, typeFactory);
 
     }
 

File: src/query/src/main/java/org/apache/kylin/query/optrule/OlapAggProjectMergeRule.java
Patch:
@@ -35,15 +35,14 @@
 import org.apache.calcite.tools.RelBuilder;
 import org.apache.calcite.tools.RelBuilderFactory;
 import org.apache.calcite.util.ImmutableBitSet;
+import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;
 import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import org.apache.kylin.query.relnode.OlapAggregateRel;
 import org.apache.kylin.query.relnode.OlapFilterRel;
 import org.apache.kylin.query.relnode.OlapJoinRel;
 import org.apache.kylin.query.relnode.OlapProjectRel;
 import org.apache.kylin.query.util.RuleUtils;
 
-import com.google.common.collect.ImmutableList;
-
 public class OlapAggProjectMergeRule extends RelOptRule {
     public static final OlapAggProjectMergeRule AGG_PROJECT_JOIN = new OlapAggProjectMergeRule(
             operand(OlapAggregateRel.class, operand(OlapProjectRel.class, operand(OlapJoinRel.class, any()))),

File: src/query/src/main/java/org/apache/kylin/query/optrule/OlapAggregateReduceFunctionsRule.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.kylin.query.optrule;
 
 import org.apache.calcite.plan.RelOptRuleOperand;
+import org.apache.calcite.rel.core.AggregateCall;
 import org.apache.calcite.rel.core.RelFactories;
 import org.apache.calcite.rel.logical.LogicalAggregate;
 import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
@@ -38,7 +39,7 @@ private OlapAggregateReduceFunctionsRule(RelOptRuleOperand operand, RelBuilderFa
     }
 
     @Override
-    protected boolean isReducible(final SqlKind kind) {
-        return SqlKind.AVG_AGG_FUNCTIONS.contains(kind);
+    public boolean canReduce(AggregateCall call) {
+        return SqlKind.AVG_AGG_FUNCTIONS.contains(call.getAggregation().getKind());
     }
 }

File: src/query/src/main/java/org/apache/kylin/query/optrule/OlapAggregateRule.java
Patch:
@@ -54,7 +54,7 @@ public RelNode convert(RelNode rel) {
         RelNode convertedInput = agg.getInput() instanceof HepRelVertex ? agg.getInput()
                 : convert(agg.getInput(), CONVENTION);
         try {
-            return new OlapAggregateRel(agg.getCluster(), traitSet, convertedInput, agg.indicator, agg.getGroupSet(),
+            return new OlapAggregateRel(agg.getCluster(), traitSet, convertedInput, agg.getGroupSet(),
                     agg.getGroupSets(), agg.getAggCallList());
         } catch (InvalidRelException e) {
             throw new IllegalStateException("Can't create OlapAggregateRel!", e);

File: src/query/src/main/java/org/apache/kylin/query/optrule/OlapProjectJoinTransposeRule.java
Patch:
@@ -26,9 +26,9 @@
 import org.apache.calcite.plan.RelOptRuleCall;
 import org.apache.calcite.rel.RelNode;
 import org.apache.calcite.rel.core.Join;
+import org.apache.calcite.rel.core.JoinRelType;
 import org.apache.calcite.rel.core.Project;
 import org.apache.calcite.rel.core.RelFactories;
-import org.apache.calcite.rel.core.SemiJoin;
 import org.apache.calcite.rel.rules.PushProjector;
 import org.apache.calcite.rel.type.RelDataTypeField;
 import org.apache.calcite.rex.RexInputRef;
@@ -104,7 +104,7 @@ public void onMatch(RelOptRuleCall call) {
         Project origProj = call.rel(0);
         final Join join = call.rel(1);
 
-        if (join instanceof SemiJoin) {
+        if (join.getJoinType() == JoinRelType.SEMI) {
             return; // TODO: support SemiJoin
         }
         if (projectSameInputFields(origProj, join)) {

File: src/query/src/main/java/org/apache/kylin/query/optrule/ScalarSubqueryJoinRule.java
Patch:
@@ -642,7 +642,7 @@ private RelNode convertSplit(AggregateUnit aggUnit, RelBuilder relBuilder, RexBu
             });
 
             return relBuilder.push(input) //
-                    .aggregate(relBuilder.groupKey(belowAggGroupSet, null), //
+                    .aggregate(relBuilder.groupKey(belowAggGroupSet), //
                             Preconditions.checkNotNull(belowAggCallList)) //
                     .build();
         }

File: src/query/src/main/java/org/apache/kylin/query/optrule/SumCaseWhenFunctionRule.java
Patch:
@@ -71,7 +71,7 @@ private boolean isSumCaseExpr(AggregateCall aggregateCall, Project inputProject)
         }
 
         int input = aggregateCall.getArgList().get(0);
-        RexNode expression = inputProject.getChildExps().get(input);
+        RexNode expression = inputProject.getProjects().get(input);
         return AggExpressionUtil.hasSumCaseWhen(aggregateCall, expression);
     }
 

File: src/query/src/main/java/org/apache/kylin/query/udf/KylinBitmapUDF.java
Patch:
@@ -23,17 +23,17 @@
 import org.apache.calcite.linq4j.function.Parameter;
 import org.apache.kylin.common.exception.CalciteNotSupportException;
 
-public class BitmapUDF {
+public class KylinBitmapUDF {
     public Long INTERSECT_COUNT_BY_COL(List maps) throws CalciteNotSupportException {
         throw new CalciteNotSupportException();
     }
 
-    public Object SUBTRACT_BITMAP_VALUE(@Parameter(name = "m1") Object map1, @Parameter(name = "m2") Object map2)
+    public Object SUBTRACT_BITMAP_VALUE(@Parameter(name = "m1") byte[] map1, @Parameter(name = "m2") byte[] map2)
             throws CalciteNotSupportException {
         throw new CalciteNotSupportException();
     }
 
-    public Object SUBTRACT_BITMAP_UUID(@Parameter(name = "m1") Object map1, @Parameter(name = "m2") Object map2)
+    public Object SUBTRACT_BITMAP_UUID(@Parameter(name = "m1") byte[] map1, @Parameter(name = "m2") byte[] map2)
             throws CalciteNotSupportException {
         throw new CalciteNotSupportException();
     }

File: src/query/src/main/java/org/apache/kylin/query/udf/SparkCollectionUDF.java
Patch:
@@ -19,11 +19,13 @@
 package org.apache.kylin.query.udf;
 
 import org.apache.calcite.linq4j.function.Parameter;
+import org.apache.calcite.sql.type.NotConstant;
 import org.apache.kylin.common.exception.CalciteNotSupportException;
 
-public class SizeUDF {
+public class SparkCollectionUDF implements NotConstant {
 
     public int SIZE(@Parameter(name = "expr") Object expr) throws CalciteNotSupportException {
         throw new CalciteNotSupportException();
     }
+
 }

File: src/query/src/test/java/org/apache/kylin/query/engine/SelectRealizationTest.java
Patch:
@@ -64,7 +64,7 @@ public void tearDown() throws Exception {
     @Test
     void testDerivedFromSameContext() throws SqlParseException {
         val kylinConfig = getTestConfig();
-        val config = KECalciteConfig.fromKapConfig(kylinConfig);
+        val config = KylinConnectionConfig.fromKapConfig(kylinConfig);
         String prj = "default";
         val schemaFactory = new ProjectSchemaFactory(prj, kylinConfig);
         val rootSchema = schemaFactory.createProjectRootSchema();
@@ -74,7 +74,7 @@ void testDerivedFromSameContext() throws SqlParseException {
         SimpleDataContext dataContext = new SimpleDataContext(rootSchema.plus(), TypeSystem.javaTypeFactory(),
                 kylinConfig);
         planner.setExecutor(new RexExecutorImpl(dataContext));
-        val sqlConverter = SQLConverter.createConverter(config, planner, catalogReader);
+        val sqlConverter = QueryExec.createConverter(config, planner, catalogReader);
         val queryOptimizer = new QueryOptimizer(planner);
         RelRoot relRoot = sqlConverter
                 .convertSqlToRelNode("SELECT count(1)\n" + "FROM \"SSB\".\"LINEORDER\" \"LINEORDER\"\n"

File: src/spark-project/sparder/src/main/java/org/apache/kylin/query/mask/QueryDependentColumnMask.java
Patch:
@@ -268,7 +268,7 @@ private List<ColumnReferences> getUnionColRefs(SetOp setOp) {
     private List<ColumnReferences> getProjectColRefs(Project project) {
         List<ColumnReferences> inputRefs = getRefCols(project.getInput(0));
         List<ColumnReferences> refs = new LinkedList<>();
-        for (RexNode expr : project.getChildExps()) {
+        for (RexNode expr : project.getProjects()) {
             ColumnReferences ref = new ColumnReferences();
             for (Integer input : RelOptUtil.InputFinder.bits(expr)) {
                 ref = ref.merge(inputRefs.get(input));

File: src/spark-project/sparder/src/main/java/org/apache/kylin/query/mask/QuerySensitiveDataMask.java
Patch:
@@ -230,9 +230,9 @@ private List<SensitiveDataMask.MaskType> getUnionSensitiveCols(SetOp setOp) {
 
     private List<SensitiveDataMask.MaskType> getProjectSensitiveCols(Project project) {
         List<SensitiveDataMask.MaskType> inputMasks = getSensitiveCols(project.getInput(0));
-        SensitiveDataMask.MaskType[] masks = new SensitiveDataMask.MaskType[project.getChildExps().size()];
-        for (int i = 0; i < project.getChildExps().size(); i++) {
-            RexNode expr = project.getChildExps().get(i);
+        SensitiveDataMask.MaskType[] masks = new SensitiveDataMask.MaskType[project.getProjects().size()];
+        for (int i = 0; i < project.getProjects().size(); i++) {
+            RexNode expr = project.getProjects().get(i);
             for (Integer input : RelOptUtil.InputFinder.bits(expr)) {
                 if (inputMasks.get(input) != null) {
                     masks[i] = inputMasks.get(input).merge(masks[i]);

File: src/spark-project/spark-common/src/main/scala/org/apache/kylin/engine/spark/job/NSparkCubingUtil.java
Patch:
@@ -223,7 +223,7 @@ private static String convertBackTickExpr(String withDot, boolean addBackTick) {
             if (!addBackTick) {
                 target = target.replace(BACK_TICK, "");
             }
-            convertResult = convertResult.replace(m.group(), target);
+            convertResult = StringUtils.replaceOnce(convertResult, m.group(), target);
         }
         return convertResult;
     }

File: src/tool/src/test/java/org/apache/kylin/tool/StorageCleanerTest.java
Patch:
@@ -440,6 +440,9 @@ private void prepareForEventLogClean() throws IOException {
 
         // Not expired 
         updateLastModified(sparkEventLogDir + "/application_1677899901295_0989", notExpired);
+        updateLastModified(sparkEventLogDir + "/application_1554187389076_9294", notExpired);
+        updateLastModified(sparkEventLogDir + "/application_1554187389076_9295", notExpired);
+        updateLastModified(sparkEventLogDir + "/application_1554187389076_9296", notExpired);
     }
 
     public void updateLastModified(String file, long timeStamp) throws IOException {

File: src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java
Patch:
@@ -78,6 +78,7 @@ public enum ErrorCodeServer implements ErrorCodeProducer {
     SEGMENT_INDEX_STATUS_INVALID("KE-010022221"),
     SEGMENT_SINGLE_JOB_THRESHOLD("KE-010022222"),
     SEGMENT_SECOND_STORAGE_PARTITION_INVALID("KE-010022223"),
+    SEGMENT_STATUS_ILLEGAL("KE-010022224"),
 
     // 100072XX table
     TABLE_RELOAD_MODEL_RETRY("KE-010007204"),
@@ -107,6 +108,7 @@ public enum ErrorCodeServer implements ErrorCodeProducer {
     JOB_NOT_EXIST("KE-010032219"),
     JOB_RESTART_CHECK_SEGMENT_STATUS("KE-010032220"),
     JOB_STOP_CHECK_SERVERLESS_JOB_STATUS_FAILED("KE-010032221"),
+    JOB_TYPE_ILLEGAL("KE-010032222"),
 
     // 100032XX user
     USER_UNAUTHORIZED("KE-010003207"),

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelService.java
Patch:
@@ -66,6 +66,7 @@
 import static org.apache.kylin.common.exception.code.ErrorCodeServer.SEGMENT_REFRESH_IN_BUILDING;
 import static org.apache.kylin.common.exception.code.ErrorCodeServer.SEGMENT_REFRESH_SELECT_RANGE_EMPTY;
 import static org.apache.kylin.common.exception.code.ErrorCodeServer.SEGMENT_STATUS;
+import static org.apache.kylin.common.exception.code.ErrorCodeServer.SEGMENT_STATUS_ILLEGAL;
 import static org.apache.kylin.job.execution.JobTypeEnum.INC_BUILD;
 import static org.apache.kylin.job.execution.JobTypeEnum.INDEX_BUILD;
 import static org.apache.kylin.job.execution.JobTypeEnum.INDEX_MERGE;
@@ -1265,8 +1266,7 @@ public void checkSegmentStatus(List<String> statuses) {
         }
         for (String status : statuses) {
             if (Objects.isNull(SegmentStatusEnumToDisplay.getByName(status))) {
-                throw new KylinException(PARAMETER_INVALID_SUPPORT_LIST, "statuses",
-                        StringUtils.join(SegmentStatusEnumToDisplay.getNames(), ", "));
+                throw new KylinException(SEGMENT_STATUS_ILLEGAL);
             }
         }
     }

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -2715,7 +2715,7 @@ public boolean isReduceExpressionsRulesEnabled() {
     }
 
     public boolean isAggregatePushdownEnabled() {
-        return Boolean.parseBoolean(getOptional("kylin.query.calcite.aggregate-pushdown-enabled", FALSE));
+        return Boolean.parseBoolean(getOptional("kylin.query.calcite.aggregate-pushdown-enabled", TRUE));
     }
 
     public boolean isScalarSubqueryJoinEnabled() {

File: src/kylin-it/src/test/java/org/apache/kylin/newten/SlowQueryDetectorTest.java
Patch:
@@ -228,6 +228,7 @@ public void testStopAsyncQueryJob() throws Exception {
     public void testSparderTimeoutCancelJob() throws Exception {
         val df = SparderEnv.getSparkSession().emptyDataFrame();
         val mockDf = Mockito.spy(df);
+        Mockito.doAnswer(new AnswersWithDelay(TIMEOUT_MS * 3, new Returns(null))).when(mockDf).collectToIterator();
         Mockito.doAnswer(new AnswersWithDelay(TIMEOUT_MS * 3, new Returns(null))).when(mockDf).toIterator();
         slowQueryDetector.queryStart("");
         try {
@@ -255,6 +256,7 @@ public void testSparderTimeoutCancelJob() throws Exception {
     public void testPushdownTimeoutCancelJob() {
         val df = SparderEnv.getSparkSession().emptyDataFrame();
         val mockDf = Mockito.spy(df);
+        Mockito.doAnswer(new AnswersWithDelay(TIMEOUT_MS * 3, new Returns(null))).when(mockDf).collectToIterator();
         Mockito.doAnswer(new AnswersWithDelay(TIMEOUT_MS * 3, new Returns(null))).when(mockDf).toIterator();
         slowQueryDetector.queryStart("");
         try {

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java
Patch:
@@ -563,7 +563,9 @@ public SQLResponse queryWithCache(SQLRequest sqlRequest) {
             return response;
         } finally {
             QueryLimiter.release();
+            String queryExecutionId = QueryContext.current().getExecutionID();
             QueryContext.current().close();
+            QueryContext.current().setExecutionID(queryExecutionId);
         }
     }
 

File: src/kylin-it/src/test/java/org/apache/kylin/query/rules/ScalarSubqueryJoinRuleTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.kylin.query.optrule.OlapAggregateRule;
 import org.apache.kylin.query.optrule.OlapJoinRule;
 import org.apache.kylin.query.optrule.OlapProjectRule;
+import org.apache.kylin.query.optrule.OlapReduceExpressionRule;
 import org.apache.kylin.query.optrule.ScalarSubqueryJoinRule;
 import org.junit.After;
 import org.junit.Before;
@@ -104,6 +105,7 @@ private List<RelOptRule> getTransformRules() {
                 ProjectMergeRule.INSTANCE, //
                 AggregateProjectMergeRule.INSTANCE, //
                 AggregateProjectReduceRule.INSTANCE, //
+                OlapReduceExpressionRule.PROJECT_INSTANCE, //
                 // target rules
                 ScalarSubqueryJoinRule.AGG_JOIN, //
                 ScalarSubqueryJoinRule.AGG_PRJ_JOIN, //

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenModelController.java
Patch:
@@ -307,7 +307,7 @@ public EnvelopeResponse<String> updatePartitionDesc(@PathVariable("project") Str
     public EnvelopeResponse<String> deleteModel(@PathVariable("model_name") String modelAlias,
             @RequestParam("project") String project) {
         String projectName = checkProjectName(project);
-        String modelId = modelService.getModel(modelAlias, projectName).getId();
+        String modelId = modelService.getModelWithoutBrokenCheck(modelAlias, projectName).getId();
         return modelController.deleteModel(modelId, projectName);
     }
 

File: src/query-server/src/test/java/org/apache/kylin/rest/controller/NAsyncQueryControllerV2Test.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
+import org.apache.kylin.query.util.AsyncQueryUtil;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.request.AsyncQuerySQLRequestV2;
 import org.apache.kylin.rest.response.SQLResponse;
@@ -190,6 +191,7 @@ public void testQueryMiss() throws Exception {
     public void testInqueryStatusSuccess() throws Exception {
         Mockito.doReturn(true).when(asyncQueryService).hasPermission(Mockito.anyString(), Mockito.anyString());
         Mockito.doReturn(SUCCESS).when(asyncQueryService).queryStatus(Mockito.anyString(), Mockito.anyString());
+        AsyncQueryUtil.createSuccessFlag(PROJECT, "123");
 
         mockMvc.perform(MockMvcRequestBuilders.get("/api/async_query/{query_id}/status", "123")
                 .contentType(MediaType.APPLICATION_JSON)

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -2167,7 +2167,6 @@ public Map<String, String> getUDFs() {
         udfMap.put("to_char", "org.apache.kylin.query.udf.formatUdf.ToCharUDF");
         udfMap.put("instr", "org.apache.kylin.query.udf.stringUdf.InStrUDF");
         udfMap.put("strpos", "org.apache.kylin.query.udf.stringUdf.StrPosUDF");
-        udfMap.put("ifnull", "org.apache.kylin.query.udf.nullHandling.IfNullUDF");
         udfMap.put("nvl", "org.apache.kylin.query.udf.nullHandling.NvlUDF");
         udfMap.put("isnull", "org.apache.kylin.query.udf.nullHandling.IsNullUDF");
         udfMap.put("split_part", "org.apache.kylin.query.udf.stringUdf.SplitPartUDF");

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectManager.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
@@ -206,7 +207,7 @@ public Set<IRealization> getRealizationsByTable(String project, String tableName
     }
 
     public List<NDataModel> listHealthyModels(String project) {
-        return listAllRealizations(project).stream().map(IRealization::getModel).collect(Collectors.toList());
+        return listAllRealizations(project).stream().map(IRealization::getModel).filter(Objects::nonNull).collect(Collectors.toList());
     }
 
     public List<MeasureDesc> listEffectiveRewriteMeasures(String project, String factTable) {

File: outdated/second-storage/core/src/main/java/io/kyligence/kap/secondstorage/SecondStorageUtil.java
Patch:
@@ -91,7 +91,7 @@
 // CALL FROM CORE
 public class SecondStorageUtil {
     public static final Set<ExecutableState> RUNNING_STATE = ImmutableSet.of(ExecutableState.RUNNING,
-            ExecutableState.READY, ExecutableState.PAUSED);
+            ExecutableState.READY, ExecutableState.PAUSED, ExecutableState.PENDING);
     public static final Set<JobTypeEnum> RELATED_JOBS = ImmutableSet.of(JobTypeEnum.INDEX_BUILD,
             JobTypeEnum.INDEX_REFRESH, JobTypeEnum.INC_BUILD, JobTypeEnum.INDEX_MERGE,
             JobTypeEnum.EXPORT_TO_SECOND_STORAGE, JobTypeEnum.SECOND_STORAGE_REFRESH_SECONDARY_INDEXES);

File: src/common-service/src/test/java/org/apache/kylin/rest/config/initialize/MetricsRegistryTest.java
Patch:
@@ -124,8 +124,8 @@ public void setup() throws IOException {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/core-job/src/main/java/org/apache/kylin/job/mapper/JobLockMapper.java
Patch:
@@ -51,7 +51,8 @@ int updateLock(@Param("lockId") String lockId, @Param("lockNode") String lockNod
 
     int batchRemoveLock(@Param("jobIdList") List<String> jobIdList);
 
-    List<PriorityFistRandomOrderJob> findNonLockIdList(@Param("batchSize") int batchSize);
+    List<PriorityFistRandomOrderJob> findNonLockIdList(@Param("batchSize") int batchSize,
+            @Param("projects") List<String> projects);
 
     List<String> findExpiredORNonLockIdList(@Param("batchSize") int batchSize);
 

File: src/core-job/src/test/java/org/apache/kylin/job/execution/JobMailUtilTest.java
Patch:
@@ -50,8 +50,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/core-job/src/test/java/org/apache/kylin/job/impl/threadpool/BaseSchedulerTest.java
Patch:
@@ -75,8 +75,8 @@ void startScheduler() {
     @After
     public void after() throws Exception {
         JobContext jobContext = JobContextUtil.getJobContext(KylinConfig.getInstanceFromEnv());
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
         await().atMost(30, TimeUnit.SECONDS).until(() -> jobContext.getJobScheduler().getRunningJob().size() == 0);
     }
 

File: src/core-job/src/test/java/org/apache/kylin/mapper/JobLockMapperTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.apache.kylin.common.util.TestUtils.getTestConfig;
 
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Date;
 import java.util.concurrent.TimeUnit;
 
@@ -56,6 +57,7 @@ public void clean() {
     private JobLock generateJobLock() {
 
         JobLock jobLock = new JobLock();
+        jobLock.setProject("default");
         jobLock.setLockId("mock_lock_id");
         jobLock.setLockNode("mock_lock_node");
         long renewalSec = getTestConfig().getJobSchedulerJobRenewalSec();
@@ -80,7 +82,7 @@ public void jobLockCrud() {
 
         long renewSec = getTestConfig().getJobSchedulerJobRenewalSec();
         Awaitility.await().atMost(renewSec + 1, TimeUnit.SECONDS)
-                .until(() -> jobLockMapper.findNonLockIdList(10).size() > 0);
+                .until(() -> jobLockMapper.findNonLockIdList(10, Collections.singletonList("default")).size() > 0);
 
         // update (h2 no support mysql-dialect)
         //        int updateAffect = jobLockMapper.upsertLock("mock_job_id", "mock_node_id", 10000L);

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/JobControllerTest.java
Patch:
@@ -115,8 +115,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/data-loading-service/src/test/java/org/apache/kylin/job/service/JobInfoServiceTest.java
Patch:
@@ -163,8 +163,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/FusionModelServiceBuildTest.java
Patch:
@@ -122,8 +122,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/JobErrorTest.java
Patch:
@@ -129,8 +129,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     private String getProject() {

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/JobResourceServiceTest.java
Patch:
@@ -65,8 +65,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/ModelServiceBuildTest.java
Patch:
@@ -248,8 +248,8 @@ public void tearDown() {
         EventBusFactory.getInstance().unregister(eventListener);
         EventBusFactory.getInstance().unregister(modelBrokenListener);
         EventBusFactory.getInstance().restart();
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
 
         if (!TimeZone.getDefault().equals(defaultTimeZone)) {
             TimeZone.setDefault(defaultTimeZone);

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/SnapshotServiceTest.java
Patch:
@@ -128,8 +128,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/StageTest.java
Patch:
@@ -121,8 +121,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     private String getProject() {

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/TableSamplingServiceTest.java
Patch:
@@ -95,8 +95,8 @@ public void setup() throws Exception {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/BuildAndQueryEmptySegmentsTest.java
Patch:
@@ -92,8 +92,8 @@ public void init() throws Exception {
 
     @After
     public void cleanup() throws Exception {
-        super.cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        super.cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/CharNColumnTest.java
Patch:
@@ -44,8 +44,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/EnhancedAggPushDownTest.java
Patch:
@@ -46,8 +46,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java
Patch:
@@ -56,8 +56,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/MultiPartitionPruningTest.java
Patch:
@@ -89,8 +89,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NAggPushDownTest.java
Patch:
@@ -52,8 +52,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NBitmapFunctionTest.java
Patch:
@@ -48,9 +48,9 @@ public void setup() {
 
     @After
     public void after() throws Exception {
+        JobContextUtil.cleanUp();
         cleanupTestMetadata();
         FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
-        JobContextUtil.cleanUp();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NBuildAndQuerySnapshotTest.java
Patch:
@@ -69,8 +69,8 @@ public void setUp() throws Exception {
 
     @After
     public void cleanup() throws Exception {
-        super.cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        super.cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NComputedColumnTest.java
Patch:
@@ -51,8 +51,8 @@ public void setup() throws Exception {
 
     @After
     public void after() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NCountDistinctWithoutEncodeTest.java
Patch:
@@ -48,8 +48,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NFilePruningTest.java
Patch:
@@ -103,8 +103,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NFilePruningV2Test.java
Patch:
@@ -98,8 +98,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NFlattableJoinWithoutLookupTest.java
Patch:
@@ -58,9 +58,9 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
+        JobContextUtil.cleanUp();
         cleanupTestMetadata();
         FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
-        JobContextUtil.cleanUp();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NJoinOptTest.java
Patch:
@@ -85,8 +85,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Ignore("KE-30387")

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NManualBuildAndQueryCuboidTest.java
Patch:
@@ -80,8 +80,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        super.cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        super.cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NMatchingTest.java
Patch:
@@ -50,8 +50,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NMultiPartitionJobTest.java
Patch:
@@ -52,8 +52,8 @@ public void setup() throws Exception {
 
     @After
     public void after() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NMultipleColumnsInTest.java
Patch:
@@ -47,8 +47,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NOptIntersectCountTest.java
Patch:
@@ -57,8 +57,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NPartitionColumnTest.java
Patch:
@@ -47,8 +47,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NTopNResultTest.java
Patch:
@@ -47,8 +47,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NTopNWithChineseTest.java
Patch:
@@ -47,8 +47,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/ReuseFlatTableTest.java
Patch:
@@ -50,8 +50,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/SimilarToEscapeFunctionTest.java
Patch:
@@ -67,8 +67,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/SumLCResultTest.java
Patch:
@@ -53,8 +53,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/TableIndexTest.java
Patch:
@@ -46,9 +46,9 @@ public void setup() {
 
     @After
     public void after() throws Exception {
+        JobContextUtil.cleanUp();
         cleanupTestMetadata();
         FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
-        JobContextUtil.cleanUp();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java
Patch:
@@ -99,8 +99,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java
Patch:
@@ -86,8 +86,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/kylin-server-it/src/test/java/org/apache/kylin/event/ITStorageCleanerTest.java
Patch:
@@ -79,8 +79,8 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
-        this.cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        this.cleanupTestMetadata();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/config/initialize/ModelBrokenListenerTest.java
Patch:
@@ -102,9 +102,8 @@ public void cleanup() {
         logger.info("ModelBrokenListenerTest cleanup");
         EventBusFactory.getInstance().unregister(modelBrokenListener);
         EventBusFactory.getInstance().restart();
-        super.cleanup();
-
         JobContextUtil.cleanUp();
+        super.cleanup();
     }
 
     private void generateJob(String modelId, String project) {

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/BaseIndexTest.java
Patch:
@@ -104,8 +104,8 @@ public void setup() {
     @After
     public void tearDown() {
         getTestConfig().setProperty("kylin.metadata.semi-automatic-mode", "false");
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java
Patch:
@@ -111,8 +111,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     private UpdateRuleBasedCuboidRequest createUpdateRuleRequest(String project, String modelId,

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionModelServiceTest.java
Patch:
@@ -136,8 +136,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/IndexPlanServiceTest.java
Patch:
@@ -115,8 +115,8 @@ public class IndexPlanServiceTest extends SourceTestCase {
     @After
     public void tearDown() {
         getTestConfig().setProperty("kylin.metadata.semi-automatic-mode", "false");
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Before

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceSemanticUpdateTest.java
Patch:
@@ -166,8 +166,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceTest.java
Patch:
@@ -316,8 +316,8 @@ public void tearDown() {
         EventBusFactory.getInstance().unregister(eventListener);
         EventBusFactory.getInstance().unregister(modelBrokenListener);
         EventBusFactory.getInstance().restart();
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ProjectServiceTest.java
Patch:
@@ -171,8 +171,8 @@ public void setup() {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java
Patch:
@@ -158,8 +158,8 @@ public void cleanup() {
         }
         EventBusFactory.getInstance().unregister(modelBrokenListener);
         EventBusFactory.getInstance().restart();
-        super.cleanup();
         JobContextUtil.cleanUp();
+        super.cleanup();
     }
 
     @Test

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableServiceTest.java
Patch:
@@ -217,9 +217,9 @@ public void setup() {
     @After
     public void tearDown() {
         EventBusFactory.getInstance().unregister(eventListener);
+        JobContextUtil.cleanUp();
         cleanupTestMetadata();
         FileUtils.deleteQuietly(new File("metastore_db"));
-        JobContextUtil.cleanUp();
         FileUtils.deleteQuietly(new File("../modeling-service/metastore_db"));
     }
 

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/job/NSparkCubingJobOnYarnTest.java
Patch:
@@ -54,8 +54,8 @@ public void setup() throws Exception {
 
     @After
     public void after() throws Exception {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/tool/src/test/java/org/apache/kylin/tool/AuditLogToolTest.java
Patch:
@@ -108,8 +108,8 @@ public void setup() throws Exception {
     public void teardown() {
         val jdbcTemplate = getJdbcTemplate();
         jdbcTemplate.batchUpdate("DROP ALL OBJECTS");
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/tool/src/test/java/org/apache/kylin/tool/JobDiagInfoToolTest.java
Patch:
@@ -83,8 +83,8 @@ public void createTestMetadata(String... overlay) {
 
     @After
     public void tearDown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @After

File: src/tool/src/test/java/org/apache/kylin/tool/StorageCleanerTest.java
Patch:
@@ -84,8 +84,8 @@ public void setup() throws IOException {
 
     @After
     public void teardown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/tool/src/test/java/org/apache/kylin/tool/SystemUsageToolTest.java
Patch:
@@ -51,18 +51,18 @@ public class SystemUsageToolTest extends NLocalFileMetadataTestCase {
 
     @Before
     public void setup() throws Exception {
+        JobContextUtil.cleanUp();
         createTestMetadata();
         queryHistoryDAO = RDBMSQueryHistoryDAO.getInstance();
 
-        JobContextUtil.cleanUp();
         JobContextUtil.getJobInfoDao(getTestConfig());
     }
 
     @After
     public void teardown() {
         queryHistoryDAO.deleteAllQueryHistory();
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/tool/src/test/java/org/apache/kylin/tool/YarnApplicationToolTest.java
Patch:
@@ -69,8 +69,8 @@ public void setup() throws Exception {
 
     @After
     public void teardown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/tool/src/test/java/org/apache/kylin/tool/garbage/ExecutableCleanerTest.java
Patch:
@@ -48,8 +48,8 @@ public void init() {
 
     @After
     public void destroy() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/tool/src/test/java/org/apache/kylin/tool/upgrade/MigrateJobToolTest.java
Patch:
@@ -47,8 +47,8 @@ public void setup() {
 
     @After
     public void teardown() {
-        cleanupTestMetadata();
         JobContextUtil.cleanUp();
+        cleanupTestMetadata();
     }
 
     @Test

File: src/core-job/src/main/java/org/apache/kylin/job/JobContext.java
Patch:
@@ -116,6 +116,8 @@ public void destroy() throws Exception {
             lockClient.destroy();
         }
 
+        JobCheckUtil.stopJobCheckScheduler();
+
     }
 
     // for ut only

File: src/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableThread.java
Patch:
@@ -28,6 +28,7 @@
 import lombok.val;
 
 public class ExecutableThread extends Thread {
+    public static final String JOB_THREAD_NAME_PATTERN = "JobWorker(project:%s,jobid:%s)";
     private Map<String, Executable> dagExecutablesMap;
     private JobContext context;
     private DefaultExecutable dagExecutable;
@@ -49,7 +50,7 @@ public void run() {
         //only the first 8 chars of the job uuid
         val jobIdSimple = dagExecutable.getId().split("-")[0];
         val project = dagExecutable.getProject();
-        try (SetThreadName ignored = new SetThreadName("JobWorker(project:%s,jobid:%s)", project, jobIdSimple);
+        try (SetThreadName ignored = new SetThreadName(JOB_THREAD_NAME_PATTERN, project, jobIdSimple);
              SetLogCategory ignore = new SetLogCategory(LogConstant.SCHEDULE_CATEGORY)) {
             // context.addRunningJob(executable);
             dagExecutable.executeDagExecutable(dagExecutablesMap, executable, context);

File: src/core-job/src/main/java/org/apache/kylin/job/scheduler/JobExecutor.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.apache.kylin.job.scheduler;
 
+import static org.apache.kylin.job.execution.ExecutableThread.JOB_THREAD_NAME_PATTERN;
+
 import java.util.Locale;
 
 import org.apache.kylin.job.JobContext;
@@ -56,7 +58,7 @@ public void execute() throws Exception {
     private void setThreadName() {
         String project = jobExecutable.getProject();
         String jobFlag = jobExecutable.getJobId().split("-")[0];
-        Thread.currentThread().setName(String.format(Locale.ROOT, "JobExecutor(project:%s,job:%s)", project, jobFlag));
+        Thread.currentThread().setName(String.format(Locale.ROOT, JOB_THREAD_NAME_PATTERN, project, jobFlag));
     }
 
     private void setbackThreadName() {

File: src/core-job/src/main/java/org/apache/kylin/job/util/JobContextUtil.java
Patch:
@@ -117,6 +117,8 @@ private static synchronized JobContext getJobContextForTestOrTool(KylinConfig co
         if (config.isUTEnv()) {
             config.setProperty("kylin.job.master-poll-interval-second", "1");
             config.setProperty("kylin.job.scheduler.poll-interval-second", "1");
+            config.setProperty("kylin.job.slave-lock-renew-sec", "5");
+            config.setProperty("kylin.job.slave-lock-renew-ratio", "0.4");
         }
         if (null == jobContext) {
             jobContext = new JobContext();
@@ -324,7 +326,7 @@ public static void remoteDiscardJob(String project, List<String> jobIdList) {
     }
 
     public static <T> T withTxAndRetry(JdbcUtil.Callback<T> consumer) {
-        return withTxAndRetry(consumer, 3);
+        return withTxAndRetry(consumer, KylinConfig.getInstanceFromEnv().getMaxTransactionRetry());
     }
 
     @SneakyThrows

File: src/core-job/src/test/java/org/apache/kylin/job/execution/DagExecutableTest.java
Patch:
@@ -47,7 +47,6 @@
 import org.awaitility.Duration;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import lombok.val;
@@ -258,8 +257,8 @@ void dagExecuteSingleExecutableList() throws ExecuteException {
     }
 
     @Test
-    @Disabled("Fixed at KE-42833")
     void dagExecute() throws ExecuteException {
+        KylinConfig.getInstanceFromEnv().setProperty("kylin.job.max-transaction-retry", "23");
         val job = new DefaultExecutable();
         job.setProject(DEFAULT_PROJECT);
         val executable1 = new SucceedDagTestExecutable();

File: src/core-job/src/test/java/org/apache/kylin/job/impl/threadpool/NDefaultSchedulerTest.java
Patch:
@@ -553,7 +553,6 @@ public void testDiscardJobBeforeSchedule() {
     }
 
     @Test
-    @Ignore("Fixed at KE-41797")
     public void testDiscardErrorJobBeforeSchedule() {
         val currMem = ResourceAcquirer.currentAvailableMem();
         val dfMgr = NDataflowManager.getInstance(getTestConfig(), project);
@@ -590,7 +589,6 @@ public void testDiscardErrorJobBeforeSchedule() {
     }
 
     @Test
-    @Ignore("Fixed at KE-41797")
     public void testDiscardPausedJobBeforeSchedule() {
         val currMem = ResourceAcquirer.currentAvailableMem();
         val dfMgr = NDataflowManager.getInstance(getTestConfig(), project);

File: src/server/src/main/java/org/apache/kylin/rest/QueryNodeFilter.java
Patch:
@@ -154,6 +154,8 @@ public class QueryNodeFilter extends BaseFilter {
 
         // spark report job stage status
         notRoutePutApiSet.add("/kylin/api/jobs/stage/status");
+        notRoutePutApiSet.add("/kylin/api/jobs/spark");
+        notRoutePutApiSet.add("/kylin/api/jobs/wait_and_run_time");
     }
 
     @Autowired

File: src/tool/src/main/java/org/apache/kylin/tool/KylinLogTool.java
Patch:
@@ -120,7 +120,7 @@ public class KylinLogTool {
             "kylin.smart.log", "kylin.build.log", "kylin.security.log");
 
     private static final ExtractLogByRangeTool DEFAULT_EXTRACT_LOG_BY_RANGE = new ExtractLogByRangeTool(LOG_PATTERN,
-            LOG_TIME_PATTERN, SECOND_DATE_FORMAT);
+            LOG_TIME_PATTERN_WITH_TRACE_ID, SECOND_DATE_FORMAT);
 
     // 2019-11-11 03:24:52,342 DEBUG [JobWorker(prj:doc_smart,jobid:8a13964c)-965] //
     // job.NSparkExecutable : Copied metadata to the target metaUrl, //
@@ -356,7 +356,7 @@ public String getFirstTimeByLogFile(File logFile) {
                 while ((log = br.readLine()) != null) {
                     Matcher matcher = pattern.matcher(log);
                     if (matcher.find()) {
-                        return matcher.group(1);
+                        return matcher.group(matcher.groupCount());
                     }
                 }
             } catch (Exception e) {

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/KapNonEquiJoinRel.java
Patch:
@@ -63,6 +63,8 @@
 import org.apache.kylin.query.util.RexToTblColRefTranslator;
 import org.apache.kylin.query.util.RexUtils;
 
+import lombok.Getter;
+
 public class KapNonEquiJoinRel extends EnumerableThetaJoin implements KapRel {
 
     private OLAPContext context;
@@ -75,6 +77,7 @@ public class KapNonEquiJoinRel extends EnumerableThetaJoin implements KapRel {
     // record left input size before rewrite for runtime join expression parsing
     private int leftInputSizeBeforeRewrite = -1;
 
+    @Getter
     private final boolean isScd2Rel;
 
     public KapNonEquiJoinRel(RelOptCluster cluster, RelTraitSet traits, RelNode left, RelNode right, RexNode condition,

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java
Patch:
@@ -294,7 +294,7 @@ protected final void execute() throws Exception {
 
             monitorSparkMaster();
 
-            HadoopUtil.setCurrentConfiguration(HadoopUtil.getHadoopConfFromSparkEngine());
+            HadoopUtil.setCurrentConfiguration(HadoopUtil.getCurrentConfiguration());
             ////////
             exchangeSparkConf(buildEnv.sparkConf());
 

File: src/core-common/src/main/java/org/apache/kylin/common/util/ThreadUtil.java
Patch:
@@ -40,4 +40,7 @@ public static String getKylinStackTrace() {
                 .collect(Collectors.toList()), "\n");
     }
 
+    public static void warnKylinStackTrace(String simpleErrorMsg) {
+        log.warn(simpleErrorMsg + getKylinStackTrace());
+    }
 }
\ No newline at end of file

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java
Patch:
@@ -66,8 +66,8 @@
 import org.apache.kylin.guava30.shaded.common.collect.Maps;
 import org.apache.kylin.guava30.shaded.common.collect.Sets;
 import org.apache.kylin.metadata.MetadataConstants;
-import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.model.PartitionDesc.PartitionType;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.model.tool.CalciteParser;
 import org.apache.kylin.metadata.model.util.ComputedColumnUtil;
 import org.apache.kylin.metadata.project.NProjectManager;
@@ -923,7 +923,7 @@ private void initNonEquiCondition(NonEquiJoinCondition cond) {
             return;
         }
 
-        if (cond.getType() == NonEquiJoinConditionType.COLUMN) {
+        if (cond.getType() == NonEquiJoinCondition.Type.COLUMN) {
             cond.setColRef(findColumn(cond.getValue()));
         }
         if (cond.getOperands().length > 0) {

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/util/scd2/SCD2SqlConverter.java
Patch:
@@ -42,7 +42,7 @@ public class SCD2SqlConverter {
      * @return
      */
     public String genSCD2SqlStr(JoinDesc joinDesc,
-            List<NonEquiJoinCondition.SimplifiedNonEquiJoinCondition> simplifiedNonEquiJoinConditions) {
+            List<NonEquiJoinCondition.SimplifiedJoinCondition> simplifiedNonEquiJoinConditions) {
         StringBuilder sb = new StringBuilder();
 
         sb.append("select * from ").append(toJoinDescQuotedString(joinDesc))
@@ -65,7 +65,7 @@ private String quotedColumnStr(String colStr) {
         return quotedIdentifierStr(cols[0]) + "." + quotedIdentifierStr(cols[1]);
     }
 
-    private String genNonEquiWithSimplified(List<NonEquiJoinCondition.SimplifiedNonEquiJoinCondition> simplified) {
+    private String genNonEquiWithSimplified(List<NonEquiJoinCondition.SimplifiedJoinCondition> simplified) {
 
         return simplified.stream()
                 .map(simplifiedNonEquiJoinCondition -> "("

File: src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextTestUtil.java
Patch:
@@ -47,7 +47,7 @@ public static List<OLAPContext> getOlapContexts(String project, String sql, bool
         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());
         try {
             RelNode rel = queryExec.parseAndOptimize(sql);
-            QueryContextCutter.selectRealization(rel, reCutBanned);
+            QueryContextCutter.selectRealization(project, rel, reCutBanned);
         } catch (NoRealizationFoundException | NoStreamingRealizationFoundException e) {
             // When NoRealizationFoundException occurs, do nothing
             // because we only need to obtain OlapContexts.
@@ -61,7 +61,7 @@ public static List<OLAPContext> getOlapContexts(String project, String sql, bool
         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());
         try {
             RelNode rel = queryExec.parseAndOptimize(sql);
-            QueryContextCutter.selectRealization(rel, reCutBanned);
+            QueryContextCutter.selectRealization(project, rel, reCutBanned);
         } catch (NoRealizationFoundException e) {
             consumer.accept(e);
         }
@@ -76,7 +76,7 @@ public static List<OLAPContext> getHepRulesOptimizedOlapContexts(String project,
         try {
             List<RelNode> relNodes = queryExec.postOptimize(rel);
             relNodes.forEach(relNode -> {
-                QueryContextCutter.selectRealization(relNode, reCutBanned);
+                QueryContextCutter.selectRealization(project, relNode, reCutBanned);
                 olapContexts.addAll(getOlapContexts());
             });
         } catch (NoRealizationFoundException e) {

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/NUserGroupControllerV2Test.java
Patch:
@@ -43,7 +43,7 @@
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
 import org.springframework.web.accept.ContentNegotiationManager;
 
-import io.kyligence.kap.metadata.user.ManagedUser;
+import org.apache.kylin.metadata.user.ManagedUser;
 import lombok.val;
 
 @MetadataInfo(onlyProps = true)

File: src/modeling-service/src/test/java/org/apache/kylin/rest/request/ModelRequestTest.java
Patch:
@@ -107,15 +107,15 @@ private void testJoinTables(ModelRequest modelRequest) {
         List<String> actualNonEqualForeignKeys = modelRequest.getSimplifiedJoinTableDescs().stream()
                 .map(SimplifiedJoinTableDesc::getSimplifiedJoinDesc)
                 .map(SimplifiedJoinDesc::getSimplifiedNonEquiJoinConditions).filter(Objects::nonNull)
-                .flatMap(Collection::stream).map(NonEquiJoinCondition.SimplifiedNonEquiJoinCondition::getForeignKey)
+                .flatMap(Collection::stream).map(NonEquiJoinCondition.SimplifiedJoinCondition::getForeignKey)
                 .collect(Collectors.toList());
         List<String> expectedNonEqualForeignKey = Collections.singletonList("TEST_TABLE3.COLUMN2");
         Assertions.assertEquals(expectedNonEqualForeignKey, actualNonEqualForeignKeys);
 
         List<String> actualNonEqualPrimaryKeys = modelRequest.getSimplifiedJoinTableDescs().stream()
                 .map(SimplifiedJoinTableDesc::getSimplifiedJoinDesc)
                 .map(SimplifiedJoinDesc::getSimplifiedNonEquiJoinConditions).filter(Objects::nonNull)
-                .flatMap(Collection::stream).map(NonEquiJoinCondition.SimplifiedNonEquiJoinCondition::getPrimaryKey)
+                .flatMap(Collection::stream).map(NonEquiJoinCondition.SimplifiedJoinCondition::getPrimaryKey)
                 .collect(Collectors.toList());
         List<String> expectedNonEqualPrimaryKey = Collections.singletonList("TEST_TABLE3.COLUMN3");
         Assertions.assertEquals(expectedNonEqualPrimaryKey, actualNonEqualPrimaryKeys);
@@ -191,7 +191,7 @@ private void mockJoinTables(ModelRequest modelRequest) {
             simplifiedJoinDesc.setPrimaryKey(new String[] { "TEST_TABLE3.cOLUMn3" });
             simplifiedList.add(simplified);
 
-            val condition = new NonEquiJoinCondition.SimplifiedNonEquiJoinCondition();
+            val condition = new NonEquiJoinCondition.SimplifiedJoinCondition();
             condition.setPrimaryKey("TEST_TABLE3.cOLUMn3");
             condition.setForeignKey("TEST_TABLE3.COLUMN2");
             simplifiedJoinDesc.setSimplifiedNonEquiJoinConditions(Collections.singletonList(condition));

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceBrokenRepairTest.java
Patch:
@@ -109,6 +109,7 @@ public void setup() {
         ReflectionTestUtils.setField(indexPlanService, "aclEvaluate", aclEvaluate);
         ReflectionTestUtils.setField(modelService, "aclEvaluate", aclEvaluate);
         ReflectionTestUtils.setField(modelService, "userGroupService", userGroupService);
+        ReflectionTestUtils.setField(semanticService, "userGroupService", userGroupService);
         modelService.setSemanticUpdater(semanticService);
         modelService.setModelQuerySupporter(modelQueryService);
         modelService.setIndexPlanService(indexPlanService);

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelTdsServiceColumnNameTest.java
Patch:
@@ -89,7 +89,7 @@ public void setup() {
         ReflectionTestUtils.setField(modelService, "aclEvaluate", aclEvaluate);
         ReflectionTestUtils.setField(modelService, "accessService", accessService);
         ReflectionTestUtils.setField(modelService, "userGroupService", userGroupService);
-        ReflectionTestUtils.setField(modelService, "userGroupService", userGroupService);
+        ReflectionTestUtils.setField(semanticService, "userGroupService", userGroupService);
 
         ReflectionTestUtils.setField(tdsService, "accessService", accessService);
         ReflectionTestUtils.setField(tdsService, "userGroupService", userGroupService);

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableServiceTest.java
Patch:
@@ -193,7 +193,7 @@ public void setup() {
                 projectInstance.getOwner(), projectInstance.getDescription(), overrideKylinProps);
         projectManager.updateProject(projectInstance, projectInstanceUpdate.getName(),
                 projectInstanceUpdate.getDescription(), projectInstanceUpdate.getOverrideKylinProps());
-        Mockito.when(userService.listSuperAdminUsers()).thenReturn(Arrays.asList("admin"));
+        Mockito.doReturn(Collections.singletonList("admin")).when(userService).listSuperAdminUsers();
         try {
             new JdbcRawRecStore(getTestConfig());
         } catch (Exception e) {

File: src/query/src/test/java/org/apache/kylin/query/engine/QueryRoutingEngineTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.kylin.common.exception.QueryErrorCode;
 import org.apache.kylin.common.exception.ServerErrorCode;
 import org.apache.kylin.common.exception.TargetSegmentNotFoundException;
+import org.apache.kylin.common.exception.code.ErrorCodeServer;
 import org.apache.kylin.common.persistence.InMemResourceStore;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.transaction.TransactionException;
@@ -120,7 +121,7 @@ public void testQueryPushDown() throws Throwable {
         Assert.assertEquals(2, pushdownCount);
 
         // Throw Exception When push down
-        Mockito.doThrow(new KylinException(QueryErrorCode.SCD2_DUPLICATE_JOIN_COL, "")).when(queryRoutingEngine)
+        Mockito.doThrow(new KylinException(ErrorCodeServer.DUPLICATE_MODEL_JOIN_CONDITIONS)).when(queryRoutingEngine)
                 .tryPushDownSelectQuery(Mockito.any(), Mockito.any(), Mockito.anyBoolean());
         try {
             queryRoutingEngine.queryWithSqlMassage(queryParams);

File: src/tool/src/main/java/org/apache/kylin/tool/MaintainModeTool.java
Patch:
@@ -24,6 +24,8 @@
 
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
+import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;
@@ -37,8 +39,6 @@
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.tool.constant.StringConstant;
 import org.apache.kylin.tool.util.ToolMainWrapper;
-import org.springframework.util.CollectionUtils;
-import org.springframework.util.StringUtils;
 
 import lombok.Setter;
 import lombok.extern.slf4j.Slf4j;

File: src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java
Patch:
@@ -230,6 +230,8 @@ public void setup() throws Exception {
         ReflectionTestUtils.setField(queryService, "aclTCRService", aclTCRService);
         ReflectionTestUtils.setField(accessService, "userService", userService);
         ReflectionTestUtils.setField(accessService, "aclService", aclService);
+        ReflectionTestUtils.setField(accessService, "userAclService", userAclService);
+        ReflectionTestUtils.setField(userAclService, "userService", userService);
         ReflectionTestUtils.setField(aclTCRService, "accessService", accessService);
         ReflectionTestUtils.setField(aclTCRService, "userService", userService);
         ReflectionTestUtils.setField(queryService, "appConfig", appConfig);

File: src/core-metadata/src/main/java/org/apache/kylin/rest/security/PasswordPlaceholderConfigurer.java
Patch:
@@ -62,6 +62,7 @@ public PasswordPlaceholderConfigurer() throws IOException {
         }
         InputStream is = IOUtils.toInputStream(propString, Charset.defaultCharset());
         resources[0] = new InputStreamResource(is);
+        this.setFileEncoding(Charset.defaultCharset().toString());
         this.setLocations(resources);
     }
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistoryDAO.java
Patch:
@@ -63,7 +63,7 @@ List<QueryStatistics> getAvgDurationRealizationByTime(long startTime, long endTi
 
     List<QueryHistory> getQueryHistoriesSubmitters(QueryHistoryRequest request, int size);
 
-    List<QueryStatistics> getQueryHistoriesModelIds(QueryHistoryRequest request, int size);
+    List<QueryStatistics> getQueryHistoriesModelIds(QueryHistoryRequest request);
 
     String getRealizationMetricMeasurement();
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/RDBMSQueryHistoryDAO.java
Patch:
@@ -184,8 +184,8 @@ public List<QueryHistory> getQueryHistoriesSubmitters(QueryHistoryRequest reques
         return jdbcQueryHisStore.queryQueryHistoriesSubmitters(request, size);
     }
 
-    public List<QueryStatistics> getQueryHistoriesModelIds(QueryHistoryRequest request, int size) {
-        return jdbcQueryHisStore.queryQueryHistoriesModelIds(request, size);
+    public List<QueryStatistics> getQueryHistoriesModelIds(QueryHistoryRequest request) {
+        return jdbcQueryHisStore.queryQueryHistoriesModelIds(request);
     }
 
     public QueryStatistics getQueryCountAndAvgDuration(long startTime, long endTime, String project) {

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/query/RDBMSQueryHistoryDaoTest.java
Patch:
@@ -722,11 +722,10 @@ public void testGetQueryHistoryModelNames() throws Exception {
         queryHistoryRequest.setAdmin(true);
         queryHistoryRequest.setUsername(ADMIN);
         queryHistoryRequest.setProject(PROJECT);
-        List<QueryStatistics> modelList = queryHistoryDAO.getQueryHistoriesModelIds(queryHistoryRequest, 5);
-        Assert.assertEquals(3, modelList.size());
+        List<QueryStatistics> modelList = queryHistoryDAO.getQueryHistoriesModelIds(queryHistoryRequest);
+        Assert.assertEquals(2, modelList.size());
         Assert.assertEquals("RDBMS", modelList.get(0).getEngineType());
         Assert.assertEquals("HIVE", modelList.get(1).getEngineType());
-        Assert.assertEquals("82fa7671-a935-45f5-8779-85703601f49a.json", modelList.get(2).getModel());
     }
 
     @Test

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -1734,7 +1734,7 @@ public String getHadoopConfDir() {
     // ============================================================================
 
     public boolean isRouteToMetadataEnabled() {
-        return Boolean.parseBoolean(this.getOptional("kylin.query.using-metadata-answer-minmax-of-dimension", FALSE));
+        return Boolean.parseBoolean(this.getOptional("kylin.query.using-metadata-answer-minmax-of-dimension", TRUE));
     }
 
     public boolean partialMatchNonEquiJoins() {

File: src/kylin-it/src/test/java/org/apache/kylin/query/engine/QueryExecWithMetaTest.java
Patch:
@@ -230,7 +230,7 @@ public void testAllType() throws IOException, SQLException {
         List<String> result = iterator.next();
         Assert.assertEquals("2147483648,21474836483289,2132,2147483647,-128,127,0,9,0.0,10000.0,"
                 + "0.3255242,85208.3241,10.0000,201.3235,abc,xyz,aaaaaaaa,xxxxxxxxxxxxxxxxxxxxx,abcd,zzzz,"
-                + "2000-12-31,2004-04-16,2004-04-01 00:00:00,2004-04-17 00:32:23.032,false,true,"
+                + "2001-01-01,2004-04-17,2004-04-01 00:00:00,2004-04-17 00:32:23.032,false,true,"
                 + "null,null,null,null,null,null,null,null,null,null,null,null", String.join(",", result));
     }
 

File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java
Patch:
@@ -350,7 +350,7 @@ public void testCheckLicenseLevel() throws Exception {
         nBasicController.checkKylinInfo(true);
 
         checkErrorMessage(factory, "en", Message.getInstance());
-        checkErrorMessage(factory, "cn", CnMessage.getInstance());
+        // checkErrorMessage(factory, "cn", CnMessage.getInstance());
     }
 
     private void checkErrorMessage(KylinInfoExtension.Factory factory, String lang, Message message) {

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -631,8 +631,8 @@ class KylinConfigBaseTest {
         map.put("getJobNotificationStates",
                 new PropertiesEntity("kylin.job.notification-enable-states", "", new String[0]));
 
-        map.put("getJobMetadataPersistNotificationEnabled",
-                new PropertiesEntity("kylin.job.notification-on-metadata-persist", "false", false));
+        //map.put("getJobMetadataPersistNotificationEnabled",
+        //        new PropertiesEntity("kylin.job.notification-on-metadata-persist", "false", false));
 
         map.put("getJobErrorNotificationEnabled",
                 new PropertiesEntity("kylin.job.notification-on-job-error", "false", false));

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java
Patch:
@@ -550,7 +550,7 @@ UnitOfWorkParams.<Map> builder().readonly(true).unitName(getProject()).maxRetry(
         FileUtils.forceDelete(tmpDir);
     }
 
-    private void modifyDump(Properties props) {
+    protected void modifyDump(Properties props) {
         sparkJobHandler.modifyDump(props);
         removeUnNecessaryDump(props);
     }
@@ -577,6 +577,8 @@ private void removeUnNecessaryDump(Properties props) {
 
         props.remove("kylin.storage.columnar.spark-conf.spark.yarn.am.extraJavaOptions");
         props.remove("kylin.storage.columnar.spark-conf.spark.executor.extraJavaOptions");
+
+        props.remove("kylin.extension.info.factory");
     }
 
     private void deleteSnapshotDirectoryOnExists() {

File: src/common-service/src/main/java/org/apache/kylin/rest/service/ProjectService.java
Patch:
@@ -454,7 +454,7 @@ public void updateJobNotificationConfig(String project, JobNotificationConfigReq
         if (request.getJobStatesNotification() != null) {
             overrideKylinProps.put("kylin.job.notification-enable-states",
                     String.join(",", Sets.newHashSet(request.getJobStatesNotification())));
-            overrideKylinProps.put("kylin.job.notification-on-job-error", null);
+            overrideKylinProps.put("kylin.job.notification-on-job-error", "false");
         } else {
             overrideKylinProps.put("kylin.job.notification-on-job-error",
                     String.valueOf(request.getJobErrorNotificationEnabled()));

File: src/core-common/src/main/java/org/apache/kylin/common/mail/MailNotificationType.java
Patch:
@@ -41,7 +41,7 @@ public boolean needNotify(KylinConfig kylinconfig) {
                     .anyMatch(item -> getCorrespondingJobStates().equalsIgnoreCase(item));
         }
     },
-    JOB_SUCCEED("Job Succeed", "JOB_SUCCEED", "succeed") {
+    JOB_FINISHED("Job Finished", "JOB_FINISHED", "finished") {
         @Override
         public boolean needNotify(KylinConfig kylinconfig) {
             return needNotifyStates(kylinconfig).stream()

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -638,7 +638,7 @@ class KylinConfigBaseTest {
                 new PropertiesEntity("kylin.job.notification-on-job-error", "false", false));
 
         map.put("getJobNotificationStates", new PropertiesEntity("kylin.job.notification-enable-states",
-                "error,succeed,discarded", new String[] { "error", "succeed", "discarded" }));
+                "error,finished,discarded", new String[] { "error", "finished", "discarded" }));
 
         map.put("getStorageResourceSurvivalTimeThreshold",
                 new PropertiesEntity("kylin.storage.resource-survival-time-threshold", "7d", 7L * 24 * 60 * 60 * 1000));

File: src/core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java
Patch:
@@ -590,7 +590,7 @@ public boolean notifyUserIfNecessary(NDataLayout[] addOrUpdateCuboids) {
         return false;
     }
 
-    protected boolean notifyUser(MailNotificationType notificationType) {
+    public boolean notifyUser(MailNotificationType notificationType) {
         Preconditions.checkState((this instanceof DefaultExecutable) || this.getParent() instanceof DefaultExecutable);
         val projectConfig = NProjectManager.getInstance(getConfig()).getProject(project).getConfig();
 

File: src/core-job/src/main/java/org/apache/kylin/job/execution/DefaultExecutable.java
Patch:
@@ -229,11 +229,10 @@ protected void onExecuteFinished(ExecuteResult result) throws JobStoppedExceptio
             switch (state) {
             case SUCCEED:
                 updateToFinalState(ExecutableState.SUCCEED, this::afterUpdateOutput, result.getShortErrMsg());
-                onStatusChange(MailNotificationType.JOB_SUCCEED);
+                onStatusChange(MailNotificationType.JOB_FINISHED);
                 break;
             case DISCARDED:
                 updateToFinalState(ExecutableState.DISCARDED, this::onExecuteDiscardHook, result.getShortErrMsg());
-                onStatusChange(MailNotificationType.JOB_DISCARDED);
                 break;
             case SUICIDAL:
                 updateToFinalState(ExecutableState.SUICIDAL, this::onExecuteSuicidalHook, result.getShortErrMsg());

File: src/core-job/src/main/java/org/apache/kylin/job/mail/JobMailUtil.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.regex.Matcher;
 
 import org.apache.commons.lang3.StringUtils;
@@ -55,7 +56,7 @@ private static Map<String, Object> getCommonMailData(AbstractExecutable executab
         data.put("job_name", executable.getName());
         data.put("submitter", executable.getSubmitter());
         data.put("project_name", executable.getProject());
-        data.put("object", executable.getTargetSubject());
+        data.put("object", Optional.ofNullable(executable.getTargetModelAlias()).orElse(executable.getTargetSubject()));
         data.put("start_time", DateFormat.formatToDateStr(executable.getStartTime(),
                 DateFormat.DEFAULT_DATETIME_PATTERN_WITHOUT_MILLISECONDS));
         data.put("end_time", DateFormat.formatToDateStr(executable.getLastModified(),

File: src/core-job/src/test/java/org/apache/kylin/job/execution/JobStatusChangedTest.java
Patch:
@@ -111,11 +111,11 @@ public void testJobStatusChanged() {
         overwriteSystemProp("kylin.job.notification-enabled", "true");
 
         // test job state needs to be notified, but it is not configured
-        notified = job.onStatusChange(MailNotificationType.JOB_SUCCEED);
+        notified = job.onStatusChange(MailNotificationType.JOB_FINISHED);
         Assert.assertFalse(notified);
 
-        overwriteSystemProp("kylin.job.notification-enable-states", "ERROR,DISCARDED,SUCCEED");
-        notified = job.onStatusChange(MailNotificationType.JOB_SUCCEED);
+        overwriteSystemProp("kylin.job.notification-enable-states", "ERROR,DISCARDED,FINISHED");
+        notified = job.onStatusChange(MailNotificationType.JOB_FINISHED);
         Assert.assertTrue(containsLog("user list is empty, not need to notify users."));
         Assert.assertFalse(notified);
 

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/NProjectControllerTest.java
Patch:
@@ -244,7 +244,7 @@ public void testStorageCleanup() throws Exception {
     public void testUpdateJobNotificationConfig() throws Exception {
         val request = new JobNotificationConfigRequest();
 
-        request.setJobStatesNotification(Arrays.asList("Succeed", "Error", "Discard"));
+        request.setJobStatesNotification(Arrays.asList("finished", "error", "discarded"));
         request.setDataLoadEmptyNotificationEnabled(true);
         request.setJobNotificationEmails(Arrays.asList("fff@g.com"));
 

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ProjectServiceTest.java
Patch:
@@ -369,7 +369,7 @@ public void testJobNotificationConfig() {
         var response = projectService.getProjectConfig(project);
         val jobNotificationConfigRequest = new JobNotificationConfigRequest();
         jobNotificationConfigRequest.setDataLoadEmptyNotificationEnabled(false);
-        jobNotificationConfigRequest.setJobStatesNotification(Lists.newArrayList("Succeed", "Error", "Discard"));
+        jobNotificationConfigRequest.setJobStatesNotification(Lists.newArrayList("finished", "error", "discarded"));
         jobNotificationConfigRequest.setJobNotificationEmails(
                 Lists.newArrayList("user1@Kylin.io", "user2@Kylin.io", "user2@Kylin.io"));
         projectService.updateJobNotificationConfig(project, jobNotificationConfigRequest);
@@ -772,7 +772,7 @@ private void updateProject() {
 
         val jobNotificationConfigRequest = new JobNotificationConfigRequest();
         jobNotificationConfigRequest.setDataLoadEmptyNotificationEnabled(true);
-        jobNotificationConfigRequest.setJobStatesNotification(Lists.newArrayList("Succeed", "Error", "Discard"));
+        jobNotificationConfigRequest.setJobStatesNotification(Lists.newArrayList("finished", "error", "discarded"));
         jobNotificationConfigRequest.setJobNotificationEmails(
                 Lists.newArrayList("user1@Kylin.io", "user2@Kylin.io", "user2@Kylin.io"));
         projectService.updateJobNotificationConfig(PROJECT, jobNotificationConfigRequest);

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -2059,8 +2059,6 @@ public Map<String, String> getUDFs() {
         udfMap.put("unix_timestamp", "org.apache.kylin.query.udf.dateUdf.UnixTimestampUDF");
         udfMap.put("length", "org.apache.kylin.query.udf.stringUdf.LengthUDF");
         udfMap.put("repeat", "org.apache.kylin.query.udf.stringUdf.RepeatUDF");
-        udfMap.put("to_timestamp", "org.apache.kylin.query.udf.formatUdf.ToTimestampUDF");
-        udfMap.put("to_date", "org.apache.kylin.query.udf.formatUdf.ToDateUDF");
         udfMap.put("to_char", "org.apache.kylin.query.udf.formatUdf.ToCharUDF");
         udfMap.put("date_format", "org.apache.kylin.query.udf.formatUdf.DateFormatUDF");
         udfMap.put("instr", "org.apache.kylin.query.udf.stringUdf.InStrUDF");

File: src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java
Patch:
@@ -125,6 +125,7 @@ public void init() throws Exception {
             val epochStore = EpochStore.getEpochStore(kylinConfig);
             kylinConfig.setQueryHistoryUrl(kylinConfig.getQueryHistoryUrl().toString());
             kylinConfig.setStreamingStatsUrl(kylinConfig.getStreamingStatsUrl().toString());
+            kylinConfig.setJdbcShareStateUrl(kylinConfig.getJdbcShareStateUrl().toString());
             if (kylinConfig.getMetadataStoreType().equals("hdfs")) {
                 kylinConfig.setProperty("kylin.metadata.url", kylinConfig.getMetadataUrlPrefix() + "@hdfs");
             }

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -1122,6 +1122,8 @@ void testMetadataUrlSetting() {
         assertEquals(pgUrl, config.getStreamingStatsUrl().toString());
         config.setQueryHistoryUrl(pgUrl);
         assertEquals(pgUrl, config.getQueryHistoryUrl().toString());
+        config.setJdbcShareStateUrl(pgUrl);
+        assertEquals(pgUrl, config.getJdbcShareStateUrl().toString());
     }
 
     @Test

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/state/JdbcShareStateStore.java
Patch:
@@ -54,7 +54,7 @@ public static JdbcShareStateStore getInstance() {
     }
 
     private JdbcShareStateStore() throws Exception {
-        StorageURL url = KylinConfig.getInstanceFromEnv().getMetadataUrl();
+        StorageURL url = KylinConfig.getInstanceFromEnv().getJdbcShareStateUrl();
         Properties props = JdbcUtil.datasourceParameters(url);
         dataSource = JdbcDataSource.getDataSource(props);
         ssTableName = StorageURL.replaceUrl(url) + "_" + "share_state";

File: src/tool/src/main/java/org/apache/kylin/tool/DiagClientTool.java
Patch:
@@ -117,7 +117,7 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw
         final boolean includeLog = getBooleanOption(optionsHelper, OPTION_LOG,
                 getBooleanOption(optionsHelper, OPTION_CATE_BASE, true));
         final boolean includeAuditLog = getBooleanOption(optionsHelper, OPTION_AUDIT_LOG,
-                getBooleanOption(optionsHelper, OPTION_CATE_BASE, true));
+                getBooleanOption(optionsHelper, OPTION_CATE_BASE, false));
         final boolean includeBin = true;
 
         final long startTime = getLongOption(optionsHelper, OPTION_START_TIME, getDefaultStartTime());

File: src/tool/src/main/java/org/apache/kylin/tool/JobDiagInfoTool.java
Patch:
@@ -111,7 +111,7 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw
         final boolean includeConf = getBooleanOption(optionsHelper, OPTION_INCLUDE_CONF, true);
         final boolean includeMeta = getBooleanOption(optionsHelper, OPTION_META, true);
         final boolean isCloud = getKapConfig().isCloud();
-        final boolean includeAuditLog = getBooleanOption(optionsHelper, OPTION_AUDIT_LOG, true);
+        final boolean includeAuditLog = getBooleanOption(optionsHelper, OPTION_AUDIT_LOG, false);
         final boolean includeBin = true;
 
         final long start = System.currentTimeMillis();

File: src/tool/src/main/java/org/apache/kylin/tool/StreamingJobDiagInfoTool.java
Patch:
@@ -104,7 +104,7 @@ protected void executeExtract(OptionsHelper optionsHelper, File exportDir) throw
         final boolean includeClient = getBooleanOption(optionsHelper, OPTION_STREAMING_INCLUDE_CLIENT, true);
         final boolean includeConf = getBooleanOption(optionsHelper, OPTION_STREAMING_INCLUDE_CONF, true);
         final boolean includeMeta = getBooleanOption(optionsHelper, OPTION_STREAMING_META, true);
-        final boolean includeAuditLog = getBooleanOption(optionsHelper, OPTION_STREAMING_AUDIT_LOG, true);
+        final boolean includeAuditLog = getBooleanOption(optionsHelper, OPTION_STREAMING_AUDIT_LOG, false);
         final boolean includeBin = true;
 
         final long diagStartTime = System.currentTimeMillis();

File: src/tool/src/main/java/org/apache/kylin/tool/setup/KapGetClusterInfo.java
Patch:
@@ -105,7 +105,7 @@ public void extractYarnMasterHost() {
     public void getYarnMetrics() throws IOException, ShellException, YarnException {
         extractYarnMasterHost();
         String url = yarnMasterUrlBase + YARN_METRICS_SUFFIX;
-        if (StringHelper.validateUrl(url)) {
+        if (!StringHelper.validateUrl(url)) {
             throw new IllegalArgumentException("Url contains disallowed chars, url: " + url);
         }
         String command = "curl -s -k --negotiate -u : " + url;

File: src/tool/src/main/java/org/apache/kylin/tool/setup/KapGetClusterInfo.java
Patch:
@@ -105,7 +105,7 @@ public void extractYarnMasterHost() {
     public void getYarnMetrics() throws IOException, ShellException, YarnException {
         extractYarnMasterHost();
         String url = yarnMasterUrlBase + YARN_METRICS_SUFFIX;
-        if (!StringHelper.validateUrl(url)) {
+        if (StringHelper.validateUrl(url)) {
             throw new IllegalArgumentException("Url contains disallowed chars, url: " + url);
         }
         String command = "curl -s -k --negotiate -u : " + url;

File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NAdminController.java
Patch:
@@ -60,7 +60,6 @@ public EnvelopeResponse<String> getPublicConfig() throws IOException {
             propertyKeys.addAll(Arrays.asList(whiteListProperties.split(",")));
         }
 
-        // add KAP specific
         propertyKeys.add("kylin.env.smart-mode-enabled");
         propertyKeys.add("kylin.source.load-hive-tablename-enabled");
         propertyKeys.add("kylin.kerberos.project-level-enabled");

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -2153,9 +2153,9 @@ public String getDefaultPartitionCheckerClassName() {
     }
 
     public boolean isPushdownQueryCacheEnabled() {
-        // KAP#12784 disable all push-down caches, even if the pushdown result is cached, it won't be used
+        // disable all push-down caches, even if the pushdown result is cached, it won't be used
         // Thus this config is set to FALSE by default
-        // you may need to change the default value if the pushdown cache issue KAP#13060 is resolved
+        // you may need to change the default value if the pushdown cache issue is resolved
         return Boolean.parseBoolean(this.getOptional("kylin.query.pushdown.cache-enabled", FALSE));
     }
 

File: src/core-common/src/main/java/org/apache/kylin/common/msg/CnMessage.java
Patch:
@@ -1495,7 +1495,6 @@ public String getParamTooLarge() {
     }
 
     @Override
-    // KAP query sql blacklist
     public String getSqlBlacklistItemIdEmpty() {
         return "黑名单条目 id 不能为空";
     }

File: src/core-common/src/main/java/org/apache/kylin/common/msg/Message.java
Patch:
@@ -1424,7 +1424,6 @@ public String getParamTooLarge() {
         return "The parameter '%s' is too large, maximum %s KB.";
     }
 
-    // KAP query sql blacklist
     public String getSqlBlacklistItemIdEmpty() {
         return "The id of blacklist item can not be empty.";
     }

File: src/core-common/src/main/java/org/apache/kylin/common/util/SegmentMergeStorageChecker.java
Patch:
@@ -114,7 +114,7 @@ public static void checkClusterStorageThresholdValue(String workingDir, Configur
 
     public static long recountExpectedSpaceByte(long originalExpectedSpaceByte, int replication) {
         logger.info("Merging segments requires {} B space(original)", originalExpectedSpaceByte);
-        logger.info("Kap replication is {}", replication);
+        logger.info("Replication is {}", replication);
         long expectedSpaceByByte = originalExpectedSpaceByte * replication;
         logger.info("Merging segments requires {} B space after recount.", expectedSpaceByByte);
         return expectedSpaceByByte;

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NBitmapFunctionForCalciteExecTest.java
Patch:
@@ -63,7 +63,7 @@ public void setup() {
     public void after() throws Exception {
         NDefaultScheduler.destroyInstance();
         cleanupTestMetadata();
-        FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
+        FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
         Unsafe.clearProperty("kylin.query.engine.run-constant-query-locally");
     }
 

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NFlattableJoinWithoutLookupTest.java
Patch:
@@ -65,7 +65,7 @@ public void setup() throws Exception {
     public void after() throws Exception {
         NDefaultScheduler.destroyInstance();
         cleanupTestMetadata();
-        FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
+        FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NManualBuildAndQueryTest.java
Patch:
@@ -52,7 +52,7 @@
 
 import lombok.val;
 
-@Ignore("see io.kyligence.kap.ut.TestQueryAndBuild")
+@Ignore("see TestQueryAndBuild")
 @SuppressWarnings("serial")
 public class NManualBuildAndQueryTest extends NLocalWithSparkSessionTest {
 

File: src/kylin-it/src/test/java/org/apache/kylin/newten/TableIndexTest.java
Patch:
@@ -56,7 +56,7 @@ public void setup() {
     public void after() throws Exception {
         NDefaultScheduler.destroyInstance();
         cleanupTestMetadata();
-        FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
+        FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
     }
 
     @Override

File: src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java
Patch:
@@ -122,7 +122,7 @@ protected static boolean inToDoList(String fullPath) {
                 "query/sql_timestamp/query27.sql",
                 // TODO percentile_approx()
                 "semi_auto/measures/query00.sql" };
-        String[] pathArray = fullPath.split("src/kap-it/src/test/resources/");
+        String[] pathArray = fullPath.split("src/kylin-it/src/test/resources/");
         if (pathArray.length < 2)
             return false;
         String relativePath = pathArray[1];

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenModelController.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.kyligence.kap.rest.controller.open;
+package org.apache.kylin.rest.controller.open;
 
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;
 import static org.apache.kylin.common.exception.ServerErrorCode.FAILED_UPDATE_MODEL;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenSystemController.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.kyligence.kap.rest.controller.open;
+package org.apache.kylin.rest.controller.open;
 
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;
 

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenModelControllerTest.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.kyligence.kap.rest.controller.open;
+package org.apache.kylin.rest.controller.open;
 
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;
 import static org.apache.kylin.common.exception.code.ErrorCodeServer.INDEX_PARAMETER_INVALID;

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenSystemControllerTest.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package io.kyligence.kap.rest.controller.open;
+package org.apache.kylin.rest.controller.open;
 
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;
 

File: src/modeling-service/src/main/java/org/apache/kylin/rest/response/SimplifiedMeasure.java
Patch:
@@ -52,7 +52,6 @@ public class SimplifiedMeasure implements Serializable {
     @JsonProperty("name")
     private String name;
     // returnType is concerned in equal comparasion for return type changes in measure
-    // see io.kyligence.kap.rest.service.ModelServiceSemanticUpdateTest.testUpdateMeasure_ChangeReturnType
     @JsonProperty("return_type")
     private String returnType;
     @JsonProperty("parameter_value")

File: src/query-common/src/main/java/org/apache/kylin/query/security/RowFilter.java
Patch:
@@ -258,7 +258,7 @@ public String transform(String sql, String project, String defaultSchema) {
         }
 
         logger.debug("\nStart to transform SQL with row ACL\n");
-        // if origin SQL has where clause, add "()", see KAP#2873
+        // if origin SQL has where clause, add "()"
         sql = whereClauseBracketsCompletion(defaultSchema, sql, getCandidateTables(allWhereCondWithTbls), project);
 
         sql = rowFilter(defaultSchema, sql, allWhereCondWithTbls, project);

File: src/query/src/main/java/org/apache/kylin/query/engine/PlannerFactory.java
Patch:
@@ -238,7 +238,6 @@ private void registerCustomRules(VolcanoPlanner planner) {
         // convert all right joins to left join since we only support left joins in model
         planner.addRule(RightJoinToLeftJoinRule.INSTANCE);
         // UnionMergeRule may slow volcano planner optimization on large number of union clause
-        // see KAP#16036
         planner.removeRule(UnionMergeRule.INSTANCE);
 
         planner.addRule(KapProjectJoinTransposeRule.INSTANCE);

File: src/query/src/test/java/org/apache/kylin/query/util/CCOnRealModelTest.java
Patch:
@@ -112,7 +112,6 @@ public void testConvertCrossTableCC() {
         }
     }
 
-    // ignored for KAP#16258
     @Ignore("historic ignored")
     @Test
     public void testSubquery() {

File: src/server/src/test/java/org/apache/kylin/rest/health/SparkSqlContextHealthIndicatorTest.java
Patch:
@@ -67,7 +67,7 @@ public static void beforeClass() {
     @AfterClass
     public static void afterClass() {
         ss.close();
-        FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
+        FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
     }
 
     @Before

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/NLocalWithSparkSessionTest.java
Patch:
@@ -135,7 +135,7 @@ public static void afterClass() {
         if (ss != null) {
             ss.close();
         }
-        FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
+        FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
     }
 
     protected IndexDataConstructor indexDataConstructor;
@@ -247,7 +247,7 @@ private static DataType convertType(org.apache.kylin.metadata.datatype.DataType
         if (type.isBoolean())
             return DataTypes.BooleanType;
 
-        throw new IllegalArgumentException("KAP data type: " + type + " can not be converted to spark's type.");
+        throw new IllegalArgumentException("Data type: " + type + " can not be converted to spark's type.");
     }
 
     protected void fullBuild(String dfName) throws Exception {

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/job/NTableSamplingJobTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() throws Exception {
     public void after() throws IOException {
         NDefaultScheduler.destroyInstance();
         super.cleanupTestMetadata();
-        FileUtils.deleteQuietly(new File("../kap-it/metastore_db"));
+        FileUtils.deleteQuietly(new File("../kylin-it/metastore_db"));
     }
 
     @Test

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorerTest.java
Patch:
@@ -153,7 +153,7 @@ public void testGetLoc() throws Exception {
         SparkSession sparkSession = Mockito.mock(SparkSession.class, Mockito.RETURNS_DEEP_STUBS);
         Mockito.when(sparkSession.sql("desc formatted " + "TEST_KYLIN_FACT").where("col_name == 'Location'").head()
                 .getString(1)).thenReturn(
-                        "hdfs://hacluster//KAP/src/spark-project/examples/test_data/27578/spark-warehouse/test_kylin_fact");
+                        "hdfs://hacluster//src/spark-project/examples/test_data/27578/spark-warehouse/test_kylin_fact");
         Assert.assertTrue(
                 sparkMetadataExplorer.getLoc(sparkSession, "TEST_KYLIN_FACT", null).contains("hdfs://hacluster"));
         Assert.assertTrue(sparkMetadataExplorer.getLoc(sparkSession, "TEST_KYLIN_FACT", "hdfs://writecluster")

File: src/tool/src/main/java/org/apache/kylin/tool/util/ServerInfoUtil.java
Patch:
@@ -43,7 +43,6 @@ public static String getKylinClientInformation() {
         buf.append("kylin.home: ").append(kylinHome == null ? UNKNOWN : new File(kylinHome).getAbsolutePath())
                 .append("\n");
 
-        // kap versions
         String kapVersion = null;
         try {
             File versionFile = new File(kylinHome, "VERSION");

File: src/source-hive/src/main/java/org/apache/kylin/source/hive/HiveCmdBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.UUID;
 
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.util.StringHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -44,7 +45,7 @@ public HiveCmdBuilder(KylinConfig kylinConfig) {
     }
 
     public String build() {
-        String beelineParams = kylinConfig.getHiveBeelineParams();
+        String beelineParams = StringHelper.escapeShellArguments(kylinConfig.getHiveBeelineParams());
         StringBuilder buf = new StringBuilder();
         String tmpBeelineHqlPath = null;
         StringBuilder beelineHql = new StringBuilder();

File: src/source-hive/src/test/java/org/apache/kylin/source/hive/HiveCmdBuilderTest.java
Patch:
@@ -68,7 +68,7 @@ public void testBeeline() throws IOException, ShellException {
 
     private void assertBeelineCmd(String cmd) {
         String beelineCmd = cmd.substring(cmd.indexOf("EOL\n", cmd.indexOf("EOL\n") + 1) + 4);
-        assertTrue(beelineCmd.startsWith("beeline -u jdbc_url"));
+        assertTrue(beelineCmd.startsWith("beeline -u 'jdbc_url'"));
     }
 
 }

File: src/tool/src/main/java/org/apache/kylin/tool/util/HadoopConfExtractor.java
Patch:
@@ -34,16 +34,16 @@
 
 public class HadoopConfExtractor {
     private static final Logger logger = LoggerFactory.getLogger(HadoopConfExtractor.class);
+    public static final Pattern URL_PATTERN = Pattern.compile("(http[s]?://)([^:]*):([^/]*).*");
 
     private HadoopConfExtractor() {
     }
 
     public static String extractYarnMasterUrl(Configuration conf) {
         KylinConfig config = KylinConfig.getInstanceFromEnv();
         final String yarnStatusCheckUrl = config.getYarnStatusCheckUrl();
-        Pattern pattern = Pattern.compile("(http(s)?://)([^:]*):([^/])*.*");
         if (yarnStatusCheckUrl != null) {
-            Matcher m = pattern.matcher(yarnStatusCheckUrl);
+            Matcher m = URL_PATTERN.matcher(yarnStatusCheckUrl);
             if (m.matches()) {
                 return m.group(1) + m.group(2) + ":" + m.group(3);
             }
@@ -77,7 +77,7 @@ public static String extractYarnMasterUrl(Configuration conf) {
         if (!rmWebHost.startsWith("http://") && !rmWebHost.startsWith("https://")) {
             rmWebHost = (YarnConfiguration.useHttps(conf) ? "https://" : "http://") + rmWebHost;
         }
-        Matcher m = pattern.matcher(rmWebHost);
+        Matcher m = URL_PATTERN.matcher(rmWebHost);
         Preconditions.checkArgument(m.matches(), "Yarn master URL not found.");
         logger.info("yarn master url: {} ", rmWebHost);
         return rmWebHost;

File: src/modeling-service/src/test/java/org/apache/kylin/rest/response/NDataModelResponseTest.java
Patch:
@@ -70,6 +70,7 @@ void testGetSelectedColumnsAndSimplifiedDimensionsNormal() {
         modelResponse.setProject(PROJECT);
         List<NDataModelResponse.SimplifiedNamedColumn> selectedColumns = modelResponse.getSelectedColumns();
         Assertions.assertEquals(1, selectedColumns.size());
+        Assertions.assertEquals("decimal(19,4)", selectedColumns.get(0).getType());
         List<NDataModelResponse.SimplifiedNamedColumn> namedColumns = modelResponse.getNamedColumns();
         Assertions.assertEquals(1, namedColumns.size());
     }

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -1161,8 +1161,9 @@ private List<ComputedColumnDesc> discardInvalidComputedColumnsForBrokenModel(Set
             List<ComputedColumnDesc> computedColumnDescs) {
         return computedColumnDescs.stream().map(ccDesc -> {
             AtomicBoolean isValidCC = new AtomicBoolean(true);
+            String calciteSyntaxExp = QueryUtil.adaptCalciteSyntax(ccDesc.getInnerExpression());
             List<Pair<String, String>> colsWithAlias = ComputedColumnUtil.ExprIdentifierFinder
-                    .getExprIdentifiers(ccDesc.getExpression());
+                    .getExprIdentifiers(calciteSyntaxExp);
             colsWithAlias.forEach(c -> {
                 String column = c.getFirst() + "." + c.getSecond();
                 if (!aliasDotColSet.contains(column)) {

File: src/query/src/test/java/org/apache/kylin/query/util/QueryUtilTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
+import org.apache.kylin.guava30.shaded.common.collect.Maps;
 import org.apache.kylin.metadata.model.ComputedColumnDesc;
 import org.apache.kylin.metadata.model.NDataModelManager;
 import org.apache.kylin.query.IQueryTransformer;
@@ -38,8 +39,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import org.apache.kylin.guava30.shaded.common.collect.Maps;
-
 public class QueryUtilTest extends NLocalFileMetadataTestCase {
 
     @Before
@@ -431,6 +430,7 @@ public void testAdaptCalciteSyntax() {
         Assert.assertEquals("CEIL(col to year)", QueryUtil.adaptCalciteSyntax("ceil_datetime(col, 'year')"));
         Assert.assertEquals("CEIL(\"t\".\"col\" to year)",
                 QueryUtil.adaptCalciteSyntax("ceil_datetime(`t`.`col`, 'year')"));
+        Assert.assertEquals("TIMESTAMPDIFF(day, t1, t2)", QueryUtil.adaptCalciteSyntax("timestampdiff('day', t1, t2)"));
     }
 
     @Test

File: src/query-service/src/main/java/org/apache/kylin/rest/config/initialize/QueryAppInitializer.java
Patch:
@@ -21,12 +21,14 @@
 import org.apache.kylin.rest.service.QueryHistoryScheduler;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Profile;
 import org.springframework.stereotype.Component;
 
 import lombok.extern.slf4j.Slf4j;
 
 @Slf4j
 @Component
+@Profile("!dev")
 public class QueryAppInitializer implements InitializingBean {
 
     @Autowired

File: src/server/src/main/java/org/apache/kylin/rest/ZookeeperClusterManager.java
Patch:
@@ -36,7 +36,7 @@
 import lombok.val;
 import lombok.extern.slf4j.Slf4j;
 
-@ConditionalOnZookeeperEnabled
+@ConditionalOnZookeeperEnabled // if missing, a default impl will be filled by AppConfig.clusterManager()
 @Component
 @Slf4j
 public class ZookeeperClusterManager implements ClusterManager {

File: src/tool/src/test/java/org/apache/kylin/tool/security/KylinPasswordResetCLITest.java
Patch:
@@ -66,6 +66,7 @@ public void teardown() throws Exception {
     @Test
     public void testResetAdminPassword() throws Exception {
         val pwdEncoder = new BCryptPasswordEncoder();
+        overwriteSystemProp("kylin.metadata.random-admin-password.enabled", "true");
         overwriteSystemProp("kylin.security.user-password-encoder", pwdEncoder.getClass().getName());
         overwriteSystemProp("kylin.metadata.random-admin-password.enabled", "true");
         val user = new ManagedUser("ADMIN", "KYLIN", true, Constant.ROLE_ADMIN, Constant.GROUP_ALL_USERS);

File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/newten/clickhouse/ClickHouseUtils.java
Patch:
@@ -101,8 +101,7 @@ public class ClickHouseUtils {
     private static final Pattern _extraQuotes = Pattern.compile("([\"]*)([^\"]*)([\"]*)");
     static public String DEFAULT_VERSION = "22.5.2.53";//"20.8.2.3"; //"20.10.3.30";"20.10.2.20";
     static public String DEFAULT_TAG = "clickhouse/clickhouse-server:" + DEFAULT_VERSION;
-    static public DockerImageName CLICKHOUSE_IMAGE = DockerImageName.parse(DEFAULT_TAG)
-            .asCompatibleSubstituteFor("yandex/clickhouse-server");
+    static public DockerImageName CLICKHOUSE_IMAGE = DockerImageName.parse(DEFAULT_TAG);
 
     static public JdbcDatabaseContainer<?> startClickHouse() {
         int tryTimes = 3;

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -1844,7 +1844,6 @@ public int getForceLimit() {
     }
 
     // If return empty result for select star query
-    // https://olapio.atlassian.net/browse/KE-23663
     public boolean getEmptyResultForSelectStar() {
         return Boolean.parseBoolean(getOptional("kylin.query.return-empty-result-on-select-star", FALSE));
     }

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectInstance.java
Patch:
@@ -137,7 +137,6 @@ public static ProjectInstance create(String name, String owner, String descripti
     }
 
     public void initConfig(KylinConfig config) {
-        // https://olapio.atlassian.net/browse/KE-11535
         // to compatible with existing model
         // if expose-computed-column is empty, set it with the maintainModelType
         if (!overrideKylinProps.containsKey(EXPOSE_COMPUTED_COLUMN_CONF)) {

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryHistory.java
Patch:
@@ -107,7 +107,7 @@ public class QueryHistory {
 
     // this field is composed of modelId, layout id and index type
     // it's written as modelId#layoutId#indexType
-    // This way to serialized query realizations had been deprecated. See KE-20697
+    // This way to serialized query realizations had been deprecated.
     private String queryRealizations;
 
     @JsonProperty(QUERY_SERVER)

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryMetrics.java
Patch:
@@ -54,7 +54,6 @@ public class QueryMetrics extends SchedulerEventNotifier {
     protected String projectName;
 
     protected String sql;
-    // KE-36662 Using sql_pattern as normalized_sql storage
     protected String sqlPattern;
 
     protected String submitter;

File: src/core-metadata/src/test/java/org/apache/kylin/source/adhocquery/DoubleQuotePushDownConverterTest.java
Patch:
@@ -84,7 +84,7 @@ public void testConvertDoubleQuoteSuccess() {
                 Arrays.asList("select a + b * c", "select \"A\" + \"B\" * \"C\""),
                 Arrays.asList("select 1 + b * c", "select 1 + \"B\" * \"C\""),
 
-                //for filter the function without parentheses,ref KE-13407
+                //for filter the function without parentheses
                 Arrays.asList(
                         "select CURRENT_CATALOG, CURRENT_DATE, CURRENT_PATH,CURRENT_ROLE, CURRENT_SCHEMA, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_USER,LOCALTIME, LOCALTIMESTAMP, SESSION_USER, SYSTEM_USER, USER",
                         "select CURRENT_CATALOG, CURRENT_DATE, CURRENT_PATH,CURRENT_ROLE, CURRENT_SCHEMA, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_USER,LOCALTIME, LOCALTIMESTAMP, SESSION_USER, SYSTEM_USER, USER"),

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java
Patch:
@@ -301,7 +301,7 @@ public void testLoadSamples() throws IOException, InterruptedException {
             ss.sparkContext().hadoopConfiguration().set("javax.jdo.option.ConnectionURL",
                     "jdbc:derby:memory:db;create=true");
         }
-        Assert.assertEquals(9, sparkSourceService.loadSamples(ss, SaveMode.Overwrite).size());
+        Assert.assertEquals(8, sparkSourceService.loadSamples(ss, SaveMode.Overwrite).size());
         FileUtils.deleteDirectory(new File("spark-warehouse"));
     }
 

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NBadQueryAndPushDownTest.java
Patch:
@@ -203,7 +203,6 @@ public void testPushDownUdf() throws Exception {
 
     @Test
     public void testPushDownForced() throws Exception {
-        //test for KE-14218
 
         KylinConfig.getInstanceFromEnv().setProperty(PUSHDOWN_RUNNER_KEY,
                 "org.apache.kylin.query.pushdown.PushDownRunnerSparkImpl");

File: src/kylin-it/src/test/java/org/apache/kylin/query/engine/SumExprPlannerTest.java
Patch:
@@ -113,7 +113,6 @@ public void testSimpleSQL() {
     }
 
     /**
-     * see https://olapio.atlassian.net/browse/KE-14512
      */
     @Test
     public void testWithAVG() {

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -258,7 +258,9 @@ private void convertNonEquiJoinCond(final NDataModel dataModel, final ModelReque
         String project = dataModel.getProject();
         val projectKylinConfig = NProjectManager.getProjectConfig(project);
         boolean isScd2Enabled = projectKylinConfig.isQueryNonEquiJoinModelEnabled();
-        QueryContext.current().setAclInfo(AclPermissionUtil.createAclInfo(project, getCurrentUserGroups()));
+        if (!projectKylinConfig.isUTEnv()) {
+            QueryContext.current().setAclInfo(AclPermissionUtil.createAclInfo(project, getCurrentUserGroups()));
+        }
         QueryExec queryExec = new QueryExec(project, projectKylinConfig, false);
         for (int i = 0; i < requestJoinTableDescs.size(); i++) {
             final JoinDesc joinWithoutNonEquivInfo = dataModel.getJoinTables().get(i).getJoin();

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelService.java
Patch:
@@ -3907,7 +3907,7 @@ public void checkDuplicateAliasInModelRequests(Collection<ModelRequest> modelReq
 
     /**
      * Validate computed column type and throw errors to report wrongly typed computed columns.
-     * Models migrated from 3x may have wrongly typed computed columns. see KE-11862
+     * Models migrated from 3x may have wrongly typed computed columns.
      *
      * @param modelId
      * @param project

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceTest.java
Patch:
@@ -677,7 +677,6 @@ public void testGetSegmentsResponse() {
         Assert.assertEquals(3, segments.size());
         Assert.assertEquals("MERGING", segments.get(2).getStatusToDisplay().toString());
 
-        // KE-25547, complete segment response
         val seg2Resp = segments.stream().filter(s -> s.getId().equals(seg2.getId())).findFirst().get();
         Assert.assertNotNull(seg2Resp);
         Assert.assertEquals(seg2.isSnapshotReady(), seg2Resp.isSnapshotReady());

File: src/query-common/src/main/java/org/apache/kylin/query/util/RestoreFromComputedColumn.java
Patch:
@@ -237,7 +237,6 @@ static Pair<String, Integer> restoreComputedColumn(String inputSql, SqlCall sele
             // however user query might use a different alias, say bc.x + ba.y
             String ccExpression = CalciteParser.replaceAliasInExpr(computedColumnDesc.getExpression(),
                     matchInfo.getAliasMap().inverse());
-            // intend to handle situation like KE-15939
             String replaceExpression = columnUsage.addAlias ? ccExpression + " AS " + computedColumnDesc.getColumnName()
                     : ccExpression;
 

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java
Patch:
@@ -721,9 +721,9 @@ private void addToQueryHistory(SQLRequest sqlRequest, SQLResponse sqlResponse, S
             try {
                 if (!sqlResponse.isPrepare() && QueryMetricsContext.isStarted()) {
                     val queryMetricsContext = QueryMetricsContext.collect(QueryContext.current());
-                    // KE-35556 Set stored sql a structured format json string
+                    // Set stored sql a structured format json string
                     queryMetricsContext.setSql(constructQueryHistorySqlText(sqlRequest, sqlResponse, originalSql));
-                    // KE-36662 Using sql_pattern as normalized_sql storage
+                    // Using sql_pattern as normalized_sql storage
                     String normalizedSql = QueryContext.currentMetrics().getCorrectedSql();
                     queryMetricsContext.setSqlPattern(normalizedSql);
                     QueryHistoryScheduler queryHistoryScheduler = QueryHistoryScheduler.getInstance();

File: src/query-service/src/main/java/org/apache/kylin/rest/util/SparderUIUtil.java
Patch:
@@ -78,7 +78,6 @@ private void checkVersion() throws IOException {
             return;
         }
 
-        // KE-12678
         proxyBase = "/proxy/" + ui.appId();
 
         // reset

File: src/query-service/src/test/java/org/apache/kylin/rest/metrics/QueryMetricsContextTest.java
Patch:
@@ -361,7 +361,6 @@ public void testSqlMassagedBeforeNormalize() {
 
     @Test
     public void testWhenHitStorageCache() {
-        //this is for  https://olapio.atlassian.net/browse/KE-12573
         final String origSql = "select * from test_parse_sql_pattern_error;";
         final String massagedSql = "select * from test_parse_sql_pattern_error";
         final String sqlPattern = "SELECT *\n" + "FROM \"TEST_PARSE_SQL_PATTERN_ERROR\"";

File: src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java
Patch:
@@ -1701,7 +1701,6 @@ public void testMetaDataV2() throws IOException {
     }
 
     @Test
-    //ref KE-12803
     public void testDeepCopy() {
         final List<TableMetaWithType> tableMetas = queryService.getMetadataV2("default", null);
         tableMetas.stream()
@@ -1732,7 +1731,6 @@ private void doTestQueryWithConstant(String testSql) {
     }
 
     @Test
-    //reference KE-8052
     public void testQueryWithScanBytesAndRows() {
         long defaultValue = QueryContext.DEFAULT_NULL_SCANNED_DATA;
 

File: src/query/src/main/java/org/apache/kylin/query/engine/AsyncQueryApplication.java
Patch:
@@ -98,7 +98,7 @@ private void saveQueryHistory(QueryContext queryContext, QueryParams queryParams
         try {
             QueryMetricsContext queryMetricsContext = QueryMetricsContext.collect(queryContext);
             queryMetricsContext.setSql(constructQueryHistorySqlText(queryParams, queryContext.getUserSQL()));
-            // KE-36662 Using sql_pattern as normalized_sql storage
+            // Using sql_pattern as normalized_sql storage
             String normalizedSql = QueryContext.currentMetrics().getCorrectedSql();
             queryMetricsContext.setSqlPattern(normalizedSql);
 

File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/abnormal/QueryRouteTest.java
Patch:
@@ -69,7 +69,6 @@
  * {@link QueryRouteTest} simulates the case where KE(resolving clickhouse table schema on spark driver) or worker
  * (executing query on spark executor) can not access ClickHouse.In such case, we should use table index to answer query.
  * <p/>
- *  @see <a href="https://olapio.atlassian.net/browse/KE-28035">KE-28035</a> for details.
  */
 public class QueryRouteTest {
 

File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/abnormal/SecondaryCatalogTest.java
Patch:
@@ -70,7 +70,6 @@ public class SecondaryCatalogTest implements JobWaiter {
 
     /**
      * When set spark.sql.catalog.{queryCatalog}.url to an irrelevant clickhouse JDBC URL, there is an bug before
-     * KE-27650
      */
     @Test
     public void testSparkJdbcUrlNotExist() throws Exception {

File: src/second-storage/core/src/main/java/org/apache/kylin/job/SecondStorageJobParamUtil.java
Patch:
@@ -78,7 +78,6 @@ public static JobParam segmentCleanParam(String project, String model, String ow
     /**
      * build delete layout table parameters
      *
-     * PRD_KE-34597 add index clean job
      *
      * @param project project name
      * @param model model id

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/merger/SparkJobMetadataMerger.java
Patch:
@@ -175,7 +175,7 @@ public NDataSegment upsertSegmentPartition(NDataSegment localSegment, NDataSegme
                 item.forEach((k, v) -> //
                 merged.put(k, v + merged.getOrDefault(k, 0L))));
         localSegment.setColumnSourceBytes(merged);
-        // KE-18417 snapshot management.
+        // snapshot management.
         localSegment.setLastBuildTime(newSegment.getLastBuildTime());
         localSegment.setSourceBytesSize(newSegment.getSourceBytesSize());
         localSegment.setLastBuildTime(lastBuildTime);

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/source/NSparkSourceTest.java
Patch:
@@ -57,7 +57,6 @@ public void testGetTable() {
     }
 
     /**
-     * for the issue: https://olapio.atlassian.net/browse/KE-9497
      */
     @Test
     public void testGetSourceData() {

File: src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginTask.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.kylin.guava30.shaded.common.base.Preconditions;
 
 /**
- * KE-Process kerberos long-running scenario.
+ * Process kerberos long-running scenario.
  * @deprecated since 'ke-4.5.18.0'
  * This implementation is no longer acceptable to fulfill in long-running scenario.
  * Use {@link DelegationTokenManager} instead.

File: src/common-service/src/main/java/org/apache/kylin/rest/request/CachedUserUpdateRequest.java
Patch:
@@ -27,7 +27,7 @@
 import lombok.Setter;
 
 /**
- * used by KC for refresh guava cache in static-user-manager
+ * used by N/A for refresh guava cache in static-user-manager
  */
 
 @Getter

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -311,7 +311,6 @@ protected final void reloadKylinConfig(Properties properties) {
         setProperty("kylin.log.spark-driver-properties-file", getLogSparkDriverPropertiesFile());
         setProperty("kylin.log.spark-appmaster-properties-file", getLogSparkAppMasterPropertiesFile());
 
-        // https://github.com/kyligence/kap/issues/12654
         this.properties.put(WORKING_DIR_PROP,
                 makeQualified(new Path(this.properties.getProperty(WORKING_DIR_PROP, KYLIN_ROOT))).toString());
         if (this.properties.getProperty(DATA_WORKING_DIR_PROP) != null) {

File: src/core-common/src/main/java/org/apache/kylin/common/msg/MsgPicker.java
Patch:
@@ -22,9 +22,9 @@ public class MsgPicker {
     private static ThreadLocal<Message> msg = new ThreadLocal<Message>();
 
     public static void setMsg(String lang) {
-        if ("cn".equals(lang))
-            msg.set(CnMessage.getInstance());
-        else
+        //if ("cn".equals(lang))
+            //msg.set(CnMessage.getInstance());
+        //else
             msg.set(Message.getInstance());
     }
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/BadModelException.java
Patch:
@@ -33,7 +33,7 @@ public enum CauseType {
         SAME_EXPR_DIFF_NAME, // another model already has defined same expr but different cc name
         SELF_CONFLICT_WITH_SAME_NAME, // cc conflicts with self's other cc
         SELF_CONFLICT_WITH_SAME_EXPRESSION, // cc conflicts with self's other cc
-        LOOKUP_CC_NOT_REFERENCING_ITSELF // see io.kyligence.kap.metadata.model.KapModel.initComputedColumns()
+        LOOKUP_CC_NOT_REFERENCING_ITSELF
     }
 
     @JsonProperty

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/UpdateImpact.java
Patch:
@@ -30,7 +30,7 @@
 /**
  *  Updating cc expression will cause change on both cc and measure.
  *  This UpdateImpact records changed cc's and measure's id during cc modification in
- *  io.kyligence.kap.rest.service.ModelSemanticHelper#updateModelColumns.
+ *  ModelSemanticHelper#updateModelColumns.
  */
 
 @Getter

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ImportModelContext.java
Patch:
@@ -121,7 +121,7 @@ public ImportModelContext(String targetProject, String srcProject, Map<String, R
             importResourceStore.putResourceWithoutCheck(resPath, raw.getByteSource(), raw.getTimestamp(), 0);
         });
 
-        // put target project into importResourceStore in case of broken io.kyligence.kap.metadata.cube.model.IndexPlan.initConfig4IndexPlan
+        // put target project into importResourceStore in case of broken IndexPlan.initConfig4IndexPlan
         importResourceStore.checkAndPutResource(ProjectInstance.concatResourcePath(targetProject),
                 targetResourceStore.getResource(ProjectInstance.concatResourcePath(targetProject)).getByteSource(), -1);
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java
Patch:
@@ -140,7 +140,6 @@ private ProjectBundle load(String project) {
 
         // before parallel stream, should use outside KylinConfig.getInstanceFromEnv()
         // in case of load is executed in thread.
-        // eg. io.kyligence.kap.smart.query.AbstractQueryRunner.SUGGESTION_EXECUTOR_POOL
         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();
         pi.getRealizationEntries().parallelStream().forEach(entry -> {
             IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());

File: src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java
Patch:
@@ -296,7 +296,7 @@ private void loadSamples(SparkSession ss, SaveMode mode, String table, String ta
                     fileSystem.copyFromLocalFile(new Path(parquetFile.getAbsolutePath()), new Path(hdfsPath));
                 }
             }
-            // KC-6666, check and delete location
+            // N/A-6666, check and delete location
             String tbLocation = String.format(Locale.ROOT, "%s/%s", ss.catalog().getDatabase(db).locationUri(),
                     tableName);
             FileSystem fs = FileSystem.get(ss.sparkContext().hadoopConfiguration());

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java
Patch:
@@ -293,7 +293,7 @@ public void testLoadSamplesException() {
     @Test
     public void testLoadSamples() throws IOException, InterruptedException {
         Assert.assertEquals(8, sparkSourceService.loadSamples(ss, SaveMode.Overwrite).size());
-        // KC-6666, table not exists but table location exists
+        // N/A-6666, table not exists but table location exists
         // re-create spark context and re-load samples
         {
             ss.stop();

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NTableController.java
Patch:
@@ -241,7 +241,7 @@ public EnvelopeResponse<LoadTableResponse> loadTables(@RequestBody TableLoadRequ
     }
 
     @ApiOperation(value = "loadAWSTablesCompatibleCrossAccount", tags = {
-            "KC" }, notes = "Update Body: data_source_type, need_sampling, sampling_rows, data_source_properties")
+            "N/A" }, notes = "Update Body: data_source_type, need_sampling, sampling_rows, data_source_properties")
     @PostMapping(value = "/compatibility/aws")
     @ResponseBody
     public EnvelopeResponse<LoadTableResponse> loadAWSTablesCompatibleCrossAccount(
@@ -270,7 +270,7 @@ public EnvelopeResponse<LoadTableResponse> loadAWSTablesCompatibleCrossAccount(
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, loadTableResponse, "");
     }
 
-    @ApiOperation(value = "updateLoadedAWSTableExtProp", tags = { "KC" }, notes = "Update Body: data_source_properties")
+    @ApiOperation(value = "updateLoadedAWSTableExtProp", tags = { "N/A" }, notes = "Update Body: data_source_properties")
     @PutMapping(value = "/ext/prop/aws")
     @ResponseBody
     public EnvelopeResponse<UpdateAWSTableExtDescResponse> updateLoadedAWSTableExtProp(

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenTableController.java
Patch:
@@ -154,7 +154,7 @@ public EnvelopeResponse<LoadTableResponse> loadTables(@RequestBody TableLoadRequ
         return tableController.loadTables(tableLoadRequest);
     }
 
-    @ApiOperation(value = "loadAWSTablesCompatibleCrossAccount", tags = {"KC"})
+    @ApiOperation(value = "loadAWSTablesCompatibleCrossAccount", tags = {"N/A"})
     @PostMapping(value = "/compatibility/aws")
     @ResponseBody
     public EnvelopeResponse<LoadTableResponse> loadAWSTablesCompatibleCrossAccount(@RequestBody AWSTableLoadRequest tableLoadRequest)
@@ -223,7 +223,7 @@ public EnvelopeResponse<OpenReloadTableResponse> reloadTable(@RequestBody OpenRe
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, response, "");
     }
 
-    @ApiOperation(value = "reloadAWSTablesCompatibleCrossAccount", tags = {"KC"})
+    @ApiOperation(value = "reloadAWSTablesCompatibleCrossAccount", tags = {"N/A"})
     @PostMapping(value = "/reload/compatibility/aws")
     @ResponseBody
     public EnvelopeResponse<OpenReloadTableResponse> reloadAWSTablesCompatibleCrossAccount(@RequestBody OpenReloadTableRequest request) {
@@ -279,7 +279,7 @@ public EnvelopeResponse<String> unloadTable(@RequestParam(value = "project") Str
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, dbTblName, "");
     }
 
-    @ApiOperation(value = "updateLoadedAWSTableExtProp", tags = {"KC" })
+    @ApiOperation(value = "updateLoadedAWSTableExtProp", tags = {"N/A" })
     @PutMapping(value = "/ext/prop/aws")
     @ResponseBody
     public EnvelopeResponse<UpdateAWSTableExtDescResponse> updateLoadedAWSTableExtProp(@RequestBody UpdateAWSTableExtDescRequest request) {

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java
Patch:
@@ -292,7 +292,7 @@ public void testLoadSamplesException() {
 
     @Test
     public void testLoadSamples() throws IOException, InterruptedException {
-        Assert.assertEquals(9, sparkSourceService.loadSamples(ss, SaveMode.Overwrite).size());
+        Assert.assertEquals(8, sparkSourceService.loadSamples(ss, SaveMode.Overwrite).size());
         // KC-6666, table not exists but table location exists
         // re-create spark context and re-load samples
         {
@@ -307,7 +307,7 @@ public void testLoadSamples() throws IOException, InterruptedException {
 
     @Test
     public void testLoadSamples2() throws Exception {
-        Assert.assertEquals(9, sparkSourceService.loadSamples().size());
+        Assert.assertEquals(8, sparkSourceService.loadSamples().size());
         FileUtils.deleteDirectory(new File("spark-warehouse"));
     }
 

File: src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.kylin.common.persistence.metadata.JdbcAuditLogStore;
 import org.apache.kylin.common.persistence.transaction.EventListenerRegistry;
 import org.apache.kylin.common.scheduler.EventBusFactory;
+import org.apache.kylin.common.scheduler.ProjectSerialEventBus;
 import org.apache.kylin.common.util.AddressUtil;
 import org.apache.kylin.common.util.HostInfoFetcher;
 import org.apache.kylin.engine.spark.filter.QueryFiltersCollector;
@@ -185,6 +186,8 @@ public void afterReady(ApplicationReadyEvent event) {
                     new Date(System.currentTimeMillis() + kylinConfig.getGuardianHACheckInitDelay() * Constant.SECOND),
                     kylinConfig.getGuardianHACheckInterval() * Constant.SECOND);
         }
+
+        taskScheduler.scheduleAtFixedRate(new ProjectSerialEventBus.TimingDispatcher(), ProjectSerialEventBus.TimingDispatcher.INTERVAL);
     }
 
     private void postInit() {

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java
Patch:
@@ -182,6 +182,6 @@ public void testBatchDeleteIndex() throws Exception {
                         .param("project", project).param("model_name", modelName).param("index_ids", "")
                         .accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON)))
                 .andExpect(MockMvcResultMatchers.status().is5xxServerError()).andReturn();
-        Assert.assertTrue(mvcResult.getResponse().getContentAsString().contains("KE-010043212"));
+        Assert.assertTrue(mvcResult.getResponse().getContentAsString().contains("KE-010043201"));
     }
 }

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java
Patch:
@@ -101,7 +101,7 @@ protected void doExecute() throws Exception {
                 List<Path> paths = JavaConversions
                         .seqAsJavaList(ResourceDetectUtils.getPaths(dataset.queryExecution().sparkPlan(), true));
                 resourceSize.put(String.valueOf(source.getLayoutId()),
-                        getResourceSize(SparderEnv.getHadoopConfiguration(), config.isConcurrencyFetchDataSourceSize(),
+                        getResourceSize(config, SparderEnv.getHadoopConfiguration(),
                                 asScalaIteratorConverter(paths.iterator()).asScala().toSeq()));
 
                 layoutLeafTaskNums.put(String.valueOf(source.getLayoutId()), Integer.parseInt(leafNodeNum));

File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.kylin.query.engine.TypeSystem;
 import org.apache.kylin.query.engine.meta.SimpleDataContext;
 import org.apache.kylin.query.relnode.OLAPContext;
-import org.apache.kylin.util.OlapContextUtil;
+import org.apache.kylin.util.OlapContextTestUtil;
 import org.apache.spark.SparkConf;
 import org.apache.spark.sql.SparderEnv;
 import org.apache.spark.sql.SparkSession;
@@ -105,7 +105,7 @@ public void testQueryWithFilterCondAlwaysFalse() throws Exception {
                 + "and TEST_BANK_INCOME.DT = '2021-11-02'\n" //
                 + "and TEST_BANK_INCOME.COUNTRY in ('INDONESIA')\n" //
                 + "and TEST_BANK_INCOME.COUNTRY in ('KENYA')";
-        List<OLAPContext> contexts = OlapContextUtil.getOlapContexts(project, sql);
+        List<OLAPContext> contexts = OlapContextTestUtil.getOlapContexts(project, sql);
         OLAPContext context = contexts.get(0);
 
         CalciteSchema rootSchema = new QueryExec(project, kylinConfig).getRootSchema();

File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.kylin.query.engine.TypeSystem;
 import org.apache.kylin.query.engine.meta.SimpleDataContext;
 import org.apache.kylin.query.relnode.OLAPContext;
-import org.apache.kylin.util.OlapContextUtil;
+import org.apache.kylin.util.OlapContextTestUtil;
 import org.apache.spark.SparkConf;
 import org.apache.spark.sql.SparderEnv;
 import org.apache.spark.sql.SparkSession;
@@ -94,7 +94,7 @@ public void setup() throws Exception {
     private List<NDataSegment> startRealizationPruner(NDataflowManager dataflowManager, String dataflowId, String sql,
             String project, KylinConfig kylinConfig) throws Exception {
         NDataflow dataflow = dataflowManager.getDataflow(dataflowId);
-        List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);
+        List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);
         OLAPContext context = olapContexts.get(0);
         CalciteSchema rootSchema = new QueryExec(project, kylinConfig).getRootSchema();
         SimpleDataContext dataContext = new SimpleDataContext(rootSchema.plus(), TypeSystem.javaTypeFactory(),

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java
Patch:
@@ -25,11 +25,11 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
-import java.util.TreeSet;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
@@ -506,7 +506,7 @@ private Map<String, Integer> extractIds(String[] dimOrMeaNames, Map<String, Inte
         }
         Set<String> set = Arrays.stream(dimOrMeaNames)
                 .map(str -> aggGroupParams == AggGroupParams.MEASURE ? str : StringUtils.upperCase(str, Locale.ROOT))
-                .collect(Collectors.toCollection(TreeSet::new));
+                .collect(Collectors.toCollection(LinkedHashSet::new));
         if (set.size() < dimOrMeaNames.length) {
             throw new IllegalStateException(
                     "Dimension or measure in agg group must not contain duplication: " + Arrays.asList(dimOrMeaNames));

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NUserController.java
Patch:
@@ -393,9 +393,9 @@ public EnvelopeResponse<DataResult<List<ManagedUserResponse>>> listGroupUnassign
             @RequestParam(value = "page_offset", required = false, defaultValue = "0") Integer pageOffset,
             @RequestParam(value = "page_size", required = false, defaultValue = "10") Integer pageSize)
             throws IOException {
-        List<ManagedUser> unassignedUsers = userService
-                .getManagedUsersByFuzzMatching(nameSeg, isCaseSensitive).stream().filter(user -> user.getAuthorities()
-                        .stream().noneMatch(auth -> auth.getAuthority().contains(groupName)))
+        List<ManagedUser> unassignedUsers = userService.getManagedUsersByFuzzMatching(nameSeg, isCaseSensitive).stream()
+                .filter(user -> user.getAuthorities().stream()
+                        .noneMatch(auth -> auth.getAuthority().equalsIgnoreCase(groupName)))
                 .collect(Collectors.toList());
         List<ManagedUserResponse> userList = getUserListResponsePage(pageOffset, pageSize, unassignedUsers);
         val userSize = unassignedUsers.size();

File: src/query-service/src/test/java/org/apache/kylin/rest/service/DashboardServiceTest.java
Patch:
@@ -18,15 +18,15 @@
 
 package org.apache.kylin.rest.service;
 
-import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.response.MetricsResponse;
 import org.apache.kylin.engine.spark.utils.ComputedColumnEvalUtil;
+import org.apache.kylin.guava30.shaded.common.collect.Lists;
 import org.apache.kylin.metadata.model.util.ExpandableMeasureUtil;
 import org.apache.kylin.metadata.query.QueryStatistics;
 import org.apache.kylin.metadata.query.RDBMSQueryHistoryDAO;
-import org.apache.kylin.query.util.QueryUtil;
+import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.response.JobStatisticsResponse;
 import org.apache.kylin.rest.util.AclEvaluate;
@@ -107,7 +107,7 @@ public void setup() {
         ReflectionTestUtils.setField(modelBuildService, "userGroupService", userGroupService);
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
-                    String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
+                    String ccExpression = PushDownUtil.massageComputedColumn(model, model.getProject(), ccDesc,
                             AclPermissionUtil.createAclInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryMetricsContext.java
Patch:
@@ -242,6 +242,9 @@ public List<RealizationMetrics> collectRealizationMetrics(
             realizationMetrics.setDuration(queryDuration);
             realizationMetrics.setQueryTime(queryTime);
             realizationMetrics.setProjectName(projectName);
+            realizationMetrics.setQueryDay(queryDay);
+            realizationMetrics.setQueryFirstDayOfWeek(queryFirstDayOfWeek);
+            realizationMetrics.setQueryFirstDayOfMonth(queryFirstDayOfMonth);
             realizationMetrics.setStreamingLayout(realization.isStreamingLayout());
             realizationMetrics.setSnapshots(realization.getSnapshots());
             realizationMetricList.add(realizationMetrics);

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java
Patch:
@@ -262,7 +262,7 @@ public ForceToTieredStorage getForcedToTieredStorage(String project, ForceToTier
         }
     }
 
-    public SQLResponse query(SQLRequest sqlRequest) throws Throwable {
+    public SQLResponse query(SQLRequest sqlRequest) throws Exception {
         try {
             slowQueryDetector.queryStart(sqlRequest.getStopId());
             markHighPriorityQueryIfNeeded();
@@ -310,7 +310,7 @@ public SQLResponse query(SQLRequest sqlRequest) throws Throwable {
                 slowQueryDetector.addJobIdForAsyncQueryJob(asyncQueryJob.getId());
                 ExecuteResult result = asyncQueryJob.submit(queryParams);
                 if (!result.succeed()) {
-                    throw result.getThrowable();
+                    throw (Exception) result.getThrowable();
 
                 }
                 return buildSqlResponse(false, Collections.emptyList(), 0, Lists.newArrayList(),

File: src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java
Patch:
@@ -682,7 +682,7 @@ private void mockOLAPContextWithOneModelInfo(String modelId, String modelAlias,
     }
 
     @Test
-    public void testQueryWithTimeOutException() throws Throwable {
+    public void testQueryWithTimeOutException() throws Exception {
         final String sql = "select * from exception_table";
         final String project = "newten";
 
@@ -2004,7 +2004,7 @@ public void testQuerySelectStar() {
     }
 
     @Test
-    public void testTableauIntercept() throws Throwable {
+    public void testTableauIntercept() throws Exception {
         List<String> sqlList = Files.walk(Paths.get("./src/test/resources/query/tableau_probing"))
                 .filter(file -> Files.isRegularFile(file)).map(path -> {
                     try {

File: src/core-job/src/test/java/org/apache/kylin/job/execution/DagExecutableTest.java
Patch:
@@ -567,7 +567,7 @@ void dagExecuteDuration() throws ExecuteException {
         manager.addJob(job);
         job.doWork(context);
 
-        await().atMost(new Duration(20, TimeUnit.SECONDS)).untilAsserted(() -> {
+        await().atMost(new Duration(120, TimeUnit.SECONDS)).untilAsserted(() -> {
             assertEquals(ExecutableState.SUCCEED, executable1.getStatus());
             assertEquals(ExecutableState.SUCCEED, executable2.getStatus());
             assertEquals(ExecutableState.SUCCEED, executable22.getStatus());

File: src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/QueryFiltersCollector.java
Patch:
@@ -50,8 +50,9 @@ public class QueryFiltersCollector {
 
     public static final String SERVER_HOST = AddressUtil.getLocalServerInfo();
 
+    // path should start with `_` to avoid being cleaned in storage
     public static final String FILTER_STORAGE_PATH =
-            KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory() + "/query_filter/";
+            KylinConfig.getInstanceFromEnv().getHdfsWorkingDirectory() + "/_query_filter/";
 
 
     public static void increaseHit(String project, String modelId, String columnId) {

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/mockup/CsvSource.java
Patch:
@@ -73,8 +73,8 @@ public <I> I adaptToBuildEngine(Class<I> engineInterface) {
 
                 @Override
                 public Dataset<Row> getSourceData(TableDesc table, SparkSession ss, Map<String, String> parameters) {
-                    if (KylinConfig.getInstanceFromEnv().getDDLLogicalViewDB()
-                        .equalsIgnoreCase(table.getDatabase())) {
+                    if ("null".equalsIgnoreCase(table.getDatabase())
+                            || KylinConfig.getInstanceFromEnv().getDDLLogicalViewDB().equalsIgnoreCase(table.getDatabase())) {
                       return new NSparkCubingSourceInput().getSourceData(table, ss, parameters);
                     }
                     String path = new File(getUtMetaDir(), "data/" + table.getIdentity() + ".csv").getAbsolutePath();

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/tuple/TupleInfo.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.List;
 import java.util.Map;
 
+import lombok.Getter;
 import org.apache.kylin.metadata.model.TblColRef;
 
 /**
@@ -33,6 +34,7 @@
 public class TupleInfo {
 
     private final Map<String, Integer> fieldMap;
+    @Getter
     private final Map<TblColRef, Integer> columnMap;
 
     private final List<String> fields;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionModelService.java
Patch:
@@ -253,6 +253,7 @@ public void setModelUpdateEnabled(DataResult<List<NDataModel>> dataResult) {
     }
 
     public boolean modelExists(String modelAlias, String project) {
-        return getManager(NDataModelManager.class, project).listAllModelAlias().contains(modelAlias);
+        return getManager(NDataModelManager.class, project).listAllModelAlias()
+                .contains(modelAlias.toLowerCase(Locale.ROOT));
     }
 }

File: src/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableContext.java
Patch:
@@ -66,12 +66,14 @@ public KylinConfig getConfig() {
         return kylinConfig;
     }
 
+    // Only used when the job starts scheduling
     public void addRunningJob(Executable executable) {
         runningJobThreads.put(executable.getId(), Thread.currentThread());
         runningJobs.put(executable.getId(), executable);
         runningJobInfos.put(executable.getId(), System.currentTimeMillis());
     }
 
+    // Only used when the job is completed
     public void removeRunningJob(Executable executable) {
         runningJobThreads.remove(executable.getId());
         runningJobs.remove(executable.getId());

File: src/core-job/src/main/java/org/apache/kylin/job/runners/FetcherRunner.java
Patch:
@@ -219,6 +219,7 @@ private void scheduleJob(String id) {
             if (memoryLock) {
                 jobDesc = executable.toString();
                 logger.info("{} prepare to schedule", jobDesc);
+                context.addRunningJob(executable);
                 jobPool.execute(new JobRunner(nDefaultScheduler, executable, this));
                 logger.info("{} scheduled", jobDesc);
             } else {

File: src/core-job/src/main/java/org/apache/kylin/job/runners/JobRunner.java
Patch:
@@ -50,7 +50,6 @@ protected void doRun() {
         val jobIdSimple = executable.getId().substring(0, 8);
         try (SetThreadName ignored = new SetThreadName("JobWorker(project:%s,jobid:%s)", project, jobIdSimple);
                 SetLogCategory logCategory = new SetLogCategory("schedule")) {
-            context.addRunningJob(executable);
             executable.execute(context);
             // trigger the next step asap
             fetcherRunner.scheduleNext();

File: src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java
Patch:
@@ -34,6 +34,8 @@ public enum ErrorCodeServer implements ErrorCodeProducer {
     MODEL_NOT_EXIST_SEGMENTS("KE-010002208"),
     MODEL_TDS_EXPORT_DIM_COL_AND_MEASURE_NAME_CONFLICT("KE-010002301"),
     MODEL_TDS_EXPORT_COLUMN_AND_MEASURE_NAME_CONFLICT("KE-010002302"),
+    MODEL_SUM_LC_INVALID_DATA_TYPE("KE-010002303"),
+    MODEL_SUM_LC_INVALID_TIMESTAMP_TYPE("KE-010002304"),
 
     // 100252XX Cube
     CUBE_NOT_EXIST("KE-010025201"),

File: src/query-common/src/main/java/org/apache/kylin/query/util/DefaultQueryTransformer.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class DefaultQueryTransformer implements IQueryTransformer {
 
-    private static final String S0 = "\\s*";
+    public static final String S0 = "\\s*";
     private static final String SM = "\\s+";
     private static final String ONE = "1";
 

File: src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java
Patch:
@@ -111,7 +111,6 @@ public void init() throws Exception {
             EventBusFactory.getInstance().register(new JobSchedulerListener(), false);
             EventBusFactory.getInstance().register(new ModelBrokenListener(), false);
             EventBusFactory.getInstance().register(epochChangedListener, false);
-            EventBusFactory.getInstance().register(new ProcessStatusListener(), true);
             EventBusFactory.getInstance().register(new StreamingJobListener(), true);
 
             SparkJobFactoryUtils.initJobFactory();
@@ -140,6 +139,7 @@ public void init() throws Exception {
                 context.publishEvent(new SparderStartEvent.SyncEvent(context));
             }
         }
+        EventBusFactory.getInstance().register(new ProcessStatusListener(), true);
         // register acl update listener
         EventListenerRegistry.getInstance(kylinConfig).register(new AclTCRListener(queryCacheManager), "acl");
         // register schema change listener

File: src/query-common/src/main/java/org/apache/kylin/query/util/PushDownUtil.java
Patch:
@@ -244,7 +244,8 @@ public static String generateFlatTableSql(NDataModel model, String project, bool
             sqlBuilder.append(allColStr);
         }
 
-        sqlBuilder.append("FROM ").append(model.getRootFactTable().getTableDesc().getDoubleQuoteIdentity());
+        sqlBuilder.append("FROM ").append(model.getRootFactTable().getTableDesc().getDoubleQuoteIdentity())
+                .append(" as ").append(StringHelper.doubleQuote(model.getRootFactTable().getAlias()));
         appendJoinStatement(model, sqlBuilder, singleLine);
 
         sqlBuilder.append("WHERE ").append(sep);

File: src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.kylin.query.schema;
 
 import java.util.ArrayList;
-import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -249,7 +249,7 @@ private List<ColumnDesc> listSourceColumns() {
             }
         }
 
-        Collections.sort(tableColumns, (o1, o2) -> o1.getZeroBasedIndex() - o2.getZeroBasedIndex());
+        tableColumns.sort(Comparator.comparingInt(ColumnDesc::getZeroBasedIndex));
         return Lists.newArrayList(Iterables.concat(tableColumns, metricColumns));
     }
 

File: src/query-common/src/main/java/org/apache/kylin/query/util/PushDownUtil.java
Patch:
@@ -250,8 +250,8 @@ public static String generateFlatTableSql(NDataModel model, String project, bool
         sqlBuilder.append("WHERE ").append(sep);
         sqlBuilder.append("1 = 1").append(sep);
         if (StringUtils.isNotEmpty(model.getFilterCondition())) {
-            String filterCondition = massageExpression(model, project, model.getFilterCondition(), null);
-            sqlBuilder.append(" AND (").append(filterCondition).append(") ").append(sep);
+            massageExpression(model, project, model.getFilterCondition(), null);
+            sqlBuilder.append(" AND (").append(model.getFilterCondition()).append(") ").append(sep);
         }
 
         return new EscapeTransformer().transform(sqlBuilder.toString());

File: src/query/src/test/java/org/apache/kylin/query/util/PushDownUtilTest.java
Patch:
@@ -237,7 +237,7 @@ public void testGenerateFlatTableSqlWithFilterCondition() {
                 + "ON \"TEST_BANK_INCOME\".\"COUNTRY\" = \"TEST_BANK_LOCATION\".\"COUNTRY\"\n" //
                 + "WHERE\n" //
                 + "1 = 1\n" //
-                + " AND (SUBSTRING(`TEST_BANK_INCOME`.`COUNTRY`, 0, 4) = 'china' and (SUBSTRING(`TEST_BANK_INCOME`.`COUNTRY`, 0, 4)) = 'china')";
+                + " AND (SUBSTRING(\"TEST_BANK_INCOME\".\"COUNTRY\", 0, 4) = 'china' and cc1 = 'china')";
         NDataModel updatedModel = modelManager.getDataModelDesc(model.getUuid());
         Assert.assertEquals(expected, PushDownUtil.generateFlatTableSql(updatedModel, project, false));
     }
@@ -270,7 +270,7 @@ public void testGenerateFlatTableSqlWithSpecialFunctions() {
                 + "ON \"TEST_BANK_INCOME\".\"COUNTRY\" = \"TEST_BANK_LOCATION\".\"COUNTRY\"\n" //
                 + "WHERE\n" //
                 + "1 = 1\n" //
-                + " AND (TIMESTAMPADD(day, 1, current_date) = '2012-01-01' and (SUBSTRING(`TEST_BANK_INCOME`.`COUNTRY`, 0, 4)) = 'china')";
+                + " AND (TIMESTAMPADD(day, 1, current_date) = '2012-01-01' and cc1 = 'china')";
         NDataModel updatedModel = modelManager.getDataModelDesc(model.getUuid());
         Assert.assertEquals(expected, PushDownUtil.generateFlatTableSql(updatedModel, project, false));
     }

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelService.java
Patch:
@@ -695,7 +695,7 @@ public Pair<List<NDataModelResponse>, Integer> getModelsOfCurrentPage(ModelQuery
             try {
                 NDataModelResponse nDataModelResponse = convertToDataModelResponse(dataModel, projectName, dfManager,
                         status, queryElem.isOnlyNormalDim());
-                if (lite) {
+                if (lite && nDataModelResponse != null) {
                     return new NDataModelLiteResponse(nDataModelResponse, dataModel);
                 } else {
                     return nDataModelResponse;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NModelController.java
Patch:
@@ -34,8 +34,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.PartitionDesc;

File: src/modeling-service/src/main/java/org/apache/kylin/tool/bisync/BISyncTool.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.kylin.tool.bisync.tableau.TableauDataSourceConverter;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableList;
 
 public class BISyncTool {
 
@@ -33,7 +34,8 @@ private BISyncTool() {
 
     @VisibleForTesting
     public static BISyncModel dumpToBISyncModel(SyncContext syncContext) {
-        SyncModel syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel();
+        SyncModel syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel(ImmutableList.of(),
+                ImmutableList.of());
         return getBISyncModel(syncContext, syncModel);
     }
 

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelTdsServiceColumnNameTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.kylin.rest.service;
 
 import lombok.extern.slf4j.Slf4j;
+import com.google.common.collect.ImmutableList;
 import org.apache.kylin.common.scheduler.EventBusFactory;
 import org.apache.kylin.engine.spark.utils.SparkJobFactoryUtils;
 import org.apache.kylin.junit.rule.TransactionExceptedException;
@@ -122,7 +123,7 @@ public void testDifferentTableSameColNameExportTds() {
         syncContext.setAdmin(true);
         syncContext.setDataflow(NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId));
         syncContext.setKylinConfig(getTestConfig());
-        SyncModel syncModel = tdsService.exportModel(syncContext);
+        SyncModel syncModel = tdsService.exportTDSDimensionsAndMeasuresByAdmin(syncContext, ImmutableList.of(), ImmutableList.of());
         Assert.assertTrue(tdsService.preCheckNameConflict(syncModel));
     }
 }

File: src/modeling-service/src/test/java/org/apache/kylin/tool/bisync/SyncModelBuilderTest.java
Patch:
@@ -76,7 +76,7 @@ public void testBuildSyncModel() {
         val syncContext = SyncModelTestUtil.createSyncContext(project, modelId, KylinConfig.getInstanceFromEnv());
         syncContext.setModelElement(SyncContext.ModelElement.ALL_COLS);
         syncContext.setAdmin(true);
-        val syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel();
+        val syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel(ImmutableList.of(), ImmutableList.of());
         val df = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), project).getDataflow(modelId);
         val model = df.getModel();
 

File: src/modeling-service/src/test/java/org/apache/kylin/tool/bisync/tableau/TableauDatasourceTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.junit.Test;
 
 import com.google.common.base.Charsets;
+import com.google.common.collect.ImmutableList;
 import com.google.common.io.CharStreams;
 
 import lombok.val;
@@ -72,7 +73,7 @@ public void testTableauDataSource() throws IOException {
         val project = "default";
         val modelId = "cb596712-3a09-46f8-aea1-988b43fe9b6c";
         val syncContext = SyncModelTestUtil.createSyncContext(project, modelId, KylinConfig.getInstanceFromEnv());
-        val syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel();
+        val syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel(ImmutableList.of(), ImmutableList.of());
 
         TableauDatasourceModel datasource = new TableauDataSourceConverter().convert(syncModel, syncContext);
         ByteArrayOutputStream outStream = new ByteArrayOutputStream();
@@ -86,7 +87,7 @@ public void testTableauDataConnectorSource() throws IOException {
         val project = "default";
         val modelId = "cb596712-3a09-46f8-aea1-988b43fe9b6c";
         val syncContext = SyncModelTestUtil.createSyncContext(project, modelId, KylinConfig.getInstanceFromEnv());
-        val syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel();
+        val syncModel = new SyncModelBuilder(syncContext).buildSourceSyncModel(ImmutableList.of(), ImmutableList.of());
 
         TableauDatasourceModel datasource = new TableauDataSourceConverter().convert(syncModel, syncContext);
         ByteArrayOutputStream outStream = new ByteArrayOutputStream();

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java
Patch:
@@ -1906,7 +1906,7 @@ public void testGetStepOutput() throws PersistentException {
     }
 
     @Test
-    public void testJobSubdirectoryPermission() throws IOException {
+    public void testJobSubdirectoryPermission() throws IOException, PersistentException {
         String jobId = "e1ad7bb0-522e-456a-859d-2eab1df448de";
         NExecutableManager manager = NExecutableManager.getInstance(jobService.getConfig(), "default");
         ExecutableOutputPO executableOutputPO = new ExecutableOutputPO();

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildJob.java
Patch:
@@ -72,6 +72,6 @@ protected String generateInfo() {
 
     private void writeCountDistinct() {
         ResourceDetectUtils.write(new Path(rdSharedPath, ResourceDetectUtils.countDistinctSuffix()), //
-                ResourceDetectUtils.findCountDistinctMeasure(readOnlyLayouts));
+                ResourceDetectUtils.findCountDistinctMeasure(getReadOnlyLayouts()));
     }
 }

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/graph/JoinsGraph.java
Patch:
@@ -349,13 +349,14 @@ public void normalize() {
         for (Edge edge : edgeSet) {
             if (!edge.isLeftJoin() || edge.isLeftOrInnerJoin()) {
                 TableRef fkSide = edge.fkSide();
-                List<Edge> edgeList = inwardEdges(fkSide);
+                List<Edge> edgeList = inwardEdges(fkSide).stream().filter(e -> !e.isSwapJoin())
+                        .collect(Collectors.toList());
                 if (CollectionUtils.isEmpty(edgeList)) {
                     continue;
                 }
                 for (Edge targetEdge : edgeList) {
                     if (!edge.equals(targetEdge) && fkSide.equals(targetEdge.pkSide())
-                            && !targetEdge.isLeftOrInnerJoin() && targetEdge.isLeftJoin()) {
+                            && !targetEdge.isLeftOrInnerJoin()) {
                         setJoinToLeftOrInner(targetEdge.join);
                         normalize();
                     }

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/ColExcludedChecker.java
Patch:
@@ -88,7 +88,9 @@ private void collectExcludedComputedColumns(KylinConfig config, String project,
         if (model == null || model.isBroken()) {
             return;
         }
-        model.init(config, project, Lists.newArrayList());
+        if (!model.isInitAlready()) {
+            model.init(config, project, Lists.newArrayList());
+        }
         model.getAllTables().stream().filter(Objects::nonNull) //
                 .flatMap(tableRef -> tableRef.getColumns().stream())
                 .filter(tblColRef -> excludedCols.contains(tblColRef.getColumnDesc()))

File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java
Patch:
@@ -95,6 +95,7 @@
 import org.apache.kylin.metadata.realization.IRealization;
 import org.apache.kylin.metadata.realization.NoRealizationFoundException;
 import org.apache.kylin.metadata.realization.NoStreamingRealizationFoundException;
+import org.apache.kylin.metadata.realization.RealizationRuntimeException;
 import org.apache.kylin.metadata.realization.SQLDigest;
 import org.apache.kylin.query.relnode.OLAPContext;
 import org.apache.kylin.query.relnode.OLAPContextProp;
@@ -185,6 +186,8 @@ public static void multiThreadSelectLayoutCandidate(List<OLAPContext> contexts)
                 throw (NoRealizationFoundException) e.getCause();
             } else if (e.getCause() instanceof NoStreamingRealizationFoundException) {
                 throw (NoStreamingRealizationFoundException) e.getCause();
+            } else {
+                throw new RealizationRuntimeException("unexpected error when choose layout", e);
             }
         } catch (InterruptedException e) {
             for (Future<?> future : futureList) {

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/JobService.java
Patch:
@@ -140,7 +140,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 
-import io.kyligence.kap.metadata.epoch.EpochManager;
 import io.kyligence.kap.secondstorage.SecondStorageUtil;
 import lombok.Getter;
 import lombok.Setter;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -96,7 +96,6 @@
 import org.apache.kylin.metadata.model.util.scd2.SimplifiedJoinTableDesc;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.recommendation.ref.OptRecManagerV2;
-import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.rest.request.ModelRequest;
 import org.apache.kylin.rest.response.BuildIndexResponse;

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceTest.java
Patch:
@@ -158,7 +158,6 @@
 import org.apache.kylin.metadata.realization.RealizationStatusEnum;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
 import org.apache.kylin.metadata.user.ManagedUser;
-import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.rest.config.initialize.ModelBrokenListener;
 import org.apache.kylin.rest.constant.Constant;

File: src/query-service/src/test/java/org/apache/kylin/rest/service/ModelServiceQueryTest.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.kylin.metadata.query.QueryTimesResponse;
 import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
-import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.rest.config.initialize.ModelBrokenListener;
 import org.apache.kylin.rest.constant.ModelAttributeEnum;
 import org.apache.kylin.rest.constant.ModelStatusToDisplayEnum;

File: src/second-storage/core-ui/src/test/java/org/apache/kylin/rest/service/ModelServiceWithSecondStorageTest.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.query.QueryTimesResponse;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
-import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.rest.config.initialize.ModelBrokenListener;
 import org.apache.kylin.rest.constant.Constant;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/graph/JoinsGraph.java
Patch:
@@ -355,7 +355,7 @@ public void normalize() {
                 }
                 for (Edge targetEdge : edgeList) {
                     if (!edge.equals(targetEdge) && fkSide.equals(targetEdge.pkSide())
-                            && !targetEdge.isLeftOrInnerJoin()) {
+                            && !targetEdge.isLeftOrInnerJoin() && targetEdge.isLeftJoin()) {
                         setJoinToLeftOrInner(targetEdge.join);
                         normalize();
                     }

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/model/JoinsGraphTest.java
Patch:
@@ -29,6 +29,8 @@
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.common.util.Unsafe;
+import org.apache.kylin.metadata.model.graph.DefaultJoinEdgeMatcher;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.junit.Assert;
 import org.junit.Before;
@@ -349,7 +351,7 @@ public void testNonEquiInnerJoinGraphMatch() {
     public void testColumnDescEquals() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
         NTableMetadataManager manager = NTableMetadataManager.getInstance(getTestConfig(), "default");
         TableDesc tableDesc = manager.getTableDesc("DEFAULT.TEST_KYLIN_FACT");
-        JoinsGraph.DefaultJoinEdgeMatcher matcher = new JoinsGraph.DefaultJoinEdgeMatcher();
+        DefaultJoinEdgeMatcher matcher = new DefaultJoinEdgeMatcher();
         ColumnDesc one = new ColumnDesc();
         one.setTable(tableDesc);
         one.setName("one");

File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java
Patch:
@@ -71,7 +71,7 @@
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;

File: src/common-service/src/main/java/org/apache/kylin/rest/KylinPrepareEnvListener.java
Patch:
@@ -22,7 +22,7 @@
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ClassUtil;
 import org.apache.kylin.common.util.TempMetadataBuilder;

File: src/common-service/src/main/java/org/apache/kylin/rest/aspect/InsensitiveNameAspect.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Objects;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.MetadataConstants;
 import org.apache.kylin.metadata.project.ProjectInstance;

File: src/common-service/src/main/java/org/apache/kylin/rest/broadcaster/Broadcaster.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.common.constant.LogConstant;
 import org.apache.kylin.common.logging.SetLogCategory;
 import org.apache.kylin.common.persistence.transaction.BroadcastEventReadyNotifier;

File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/AclTCRListener.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.RawResource;
 import org.apache.kylin.common.persistence.transaction.EventListenerRegistry;

File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/CacheCleanListener.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.RawResource;
 import org.apache.kylin.common.persistence.ResourceStore;

File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/MetricsRegistry.java
Patch:
@@ -32,7 +32,7 @@
 import javax.sql.DataSource;
 
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.event.ModelAddEvent;
 import org.apache.kylin.common.metrics.MetricsCategory;

File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/TableSchemaChangeListener.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Objects;
 import java.util.Optional;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.RawResource;
 import org.apache.kylin.common.persistence.transaction.EventListenerRegistry;

File: src/common-service/src/main/java/org/apache/kylin/rest/handler/resourcegroup/ResourceGroupEntityValidator.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.HashMap;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.metadata.resourcegroup.ResourceGroupEntity;
 import org.apache.kylin.rest.request.resourecegroup.ResourceGroupRequest;

File: src/common-service/src/main/java/org/apache/kylin/rest/handler/resourcegroup/ResourceGroupKylinInstanceValidator.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.metadata.resourcegroup.KylinInstance;
 import org.apache.kylin.metadata.resourcegroup.ResourceGroupEntity;

File: src/common-service/src/main/java/org/apache/kylin/rest/handler/resourcegroup/ResourceGroupMappingInfoValidator.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.metadata.project.ProjectInstance;

File: src/common-service/src/main/java/org/apache/kylin/rest/interceptor/RepeatableRequestBodyFilter.java
Patch:
@@ -28,7 +28,7 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.util.Pair;

File: src/common-service/src/main/java/org/apache/kylin/rest/interceptor/ResourceGroupCheckerFilter.java
Patch:
@@ -31,7 +31,7 @@
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.Message;

File: src/common-service/src/main/java/org/apache/kylin/rest/monitor/MonitorReporter.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.Singletons;
 import org.apache.kylin.common.util.ExecutorServiceUtil;

File: src/common-service/src/main/java/org/apache/kylin/rest/request/UserRequest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.util.ArgsTypeJsonDeserializer;
 import org.apache.kylin.metadata.insensitive.UserInsensitiveRequest;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/AccessService.java
Patch:
@@ -63,7 +63,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.ObjectUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java
Patch:
@@ -32,7 +32,7 @@
 import javax.servlet.ServletOutputStream;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.metrics.MetricsCategory;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/BasicService.java
Patch:
@@ -28,7 +28,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.transaction.BroadcastEventReadyNotifier;
 import org.apache.kylin.common.util.JsonUtil;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/LdapUserService.java
Patch:
@@ -36,7 +36,7 @@
 
 import javax.naming.directory.SearchControls;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.util.CaseInsensitiveStringMap;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/OpenUserGroupService.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.annotation.ThirdPartyDependencies;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.metadata.user.ManagedUser;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/ProjectService.java
Patch:
@@ -59,7 +59,7 @@
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.KylinConfigBase;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/SystemService.java
Patch:
@@ -42,7 +42,7 @@
 import javax.validation.constraints.NotNull;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.exception.KylinException;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/UserAclService.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/common-service/src/main/java/org/apache/kylin/tool/util/ToolUtil.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.KylinConfig;

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java
Patch:
@@ -40,7 +40,7 @@
 
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.common.util.OrderedProperties;

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.text.StrSubstitutor;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/core-common/src/main/java/org/apache/kylin/common/KylinVersion.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Set;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Iterables;

File: src/core-common/src/main/java/org/apache/kylin/common/StorageURL.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map.Entry;
 import java.util.concurrent.ExecutionException;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;

File: src/core-common/src/main/java/org/apache/kylin/common/debug/BackdoorToggles.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.util.Pair;
 
 import com.google.common.collect.Maps;

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/StringEntity.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import lombok.Getter;
 import lombok.Setter;

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/JdbcMetadataStore.java
Patch:
@@ -36,7 +36,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.dbcp2.BasicDataSource;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.persistence.RawResource;

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/transaction/AuditLogReplayWorker.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.stream.LongStream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.constant.LogConstant;
 import org.apache.kylin.common.logging.SetLogCategory;

File: src/core-common/src/main/java/org/apache/kylin/common/util/DaemonThreadFactory.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  */

File: src/core-common/src/main/java/org/apache/kylin/common/util/DateFormat.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.TimeZone;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.time.FastDateFormat;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/core-common/src/main/java/org/apache/kylin/common/util/EncryptUtil.java
Patch:
@@ -24,7 +24,7 @@
 import javax.crypto.spec.SecretKeySpec;
 
 import org.apache.commons.codec.binary.Base64;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class EncryptUtil {
     /**

File: src/core-common/src/main/java/org/apache/kylin/common/util/HadoopUtil.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.ContentSummary;

File: src/core-common/src/main/java/org/apache/kylin/common/util/OrderedProperties.java
Patch:
@@ -43,7 +43,7 @@
 
 import javax.annotation.Nonnull;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.base.Preconditions;
 

File: src/core-common/src/main/java/org/apache/kylin/common/util/SSHClient.java
Patch:
@@ -31,7 +31,7 @@
 import java.nio.charset.Charset;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.LoggerFactory;
 
 import com.jcraft.jsch.Channel;

File: src/core-common/src/main/java/org/apache/kylin/common/util/Unsafe.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Locale;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.SystemPropertiesCache;
 
 /**

File: src/core-common/src/main/java/org/apache/kylin/common/util/ZipFileUtils.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.zip.ZipOutputStream;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.CommonErrorCode;
 import org.apache.kylin.common.exception.KylinException;
 

File: src/core-common/src/main/java/org/apache/kylin/rest/util/PagingUtil.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class PagingUtil {
 

File: src/core-common/src/test/java/org/apache/kylin/common/util/NLocalFileMetadataTestCase.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.function.Function;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.AbstractTestCase;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;

File: src/core-job/src/main/java/org/apache/kylin/engine/spark/ExecutableUtils.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.job.execution.AbstractExecutable;

File: src/core-job/src/main/java/org/apache/kylin/job/dao/ExecutablePO.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.RootPersistentEntity;
 import org.apache.kylin.job.constant.ExecutableConstants;

File: src/core-job/src/main/java/org/apache/kylin/job/engine/JobEngineConfig.java
Patch:
@@ -22,7 +22,7 @@
 import java.io.IOException;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.OptionsHelper;
 import org.slf4j.Logger;

File: src/core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java
Patch:
@@ -52,7 +52,7 @@
 
 import io.kyligence.kap.guava20.shaded.common.base.Throwables;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.kylin.common.KylinConfig;

File: src/core-job/src/main/java/org/apache/kylin/job/execution/DefaultExecutableOnModel.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.stream.Stream;
 
 import com.google.common.collect.Sets;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.StringUtil;
 import org.apache.kylin.job.model.JobParam;

File: src/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableParams.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.MailHelper;

File: src/core-job/src/test/java/org/apache/kylin/job/execution/NExecutableManagerTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.KylinConfig;

File: src/core-job/src/test/java/org/apache/kylin/job/impl/threadpool/NDefaultSchedulerTest.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/acl/AclTCRManager.java
Patch:
@@ -32,7 +32,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.text.StrBuilder;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.measure.MeasureType;
 import org.apache.kylin.measure.basic.BasicMeasureType;
 import org.apache.kylin.metadata.cube.model.IndexEntity;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.cube.model.IndexEntity;
 import org.apache.kylin.metadata.cube.model.LayoutEntity;
 import org.apache.kylin.metadata.cube.model.NDataflow;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/KECuboidSchedulerV1.java
Patch:
@@ -32,7 +32,7 @@
 
 import javax.annotation.Nullable;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.OutOfMaxCombinationException;
 import org.apache.kylin.common.exception.code.ErrorCodeServer;
 import org.apache.kylin.common.util.ThreadUtil;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManager.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.Serializer;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataSegment.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.RandomUtil;
 import org.apache.kylin.metadata.model.ISegment;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NIndexPlanManager.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.KylinConfigExt;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/storage/ProjectStorageInfoCollector.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 
 import com.google.common.collect.Lists;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/datatype/BooleanSerializer.java
Patch:
@@ -21,7 +21,7 @@
 import java.nio.ByteBuffer;
 import java.util.Locale;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang.BooleanUtils;
 
 public class BooleanSerializer extends DataTypeSerializer<Long> {

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/datatype/DataType.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.BytesSerializer;
 import org.apache.kylin.common.util.BytesUtil;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java
Patch:
@@ -42,7 +42,7 @@
 import javax.annotation.Nullable;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.Singletons;
 import org.apache.kylin.common.constant.LogConstant;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/filter/function/LikeMatchers.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Locale;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.base.Preconditions;
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/insensitive/ModelInsensitiveRequest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.common.util.Unsafe;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/insensitive/ProjectInsensitiveRequest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.common.util.Unsafe;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/insensitive/UserInsensitiveRequest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.Unsafe;
 import org.apache.kylin.metadata.user.ManagedUser;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/ComputedColumnDesc.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.calcite.sql.SqlNode;
 import org.apache.calcite.sql.util.SqlBasicVisitor;
 import org.apache.calcite.sql.util.SqlVisitor;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.measure.MeasureTypeFactory;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/JoinedFlatTable.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.regex.Pattern;
 
 import org.apache.calcite.avatica.util.Quoting;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Preconditions;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/MeasureDesc.java
Patch:
@@ -21,7 +21,7 @@
 import java.io.Serializable;
 import java.util.Objects;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/ModelJoinRelationTypeEnum.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.apache.kylin.metadata.model;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModelManager.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.exception.code.ErrorCodeServer;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NTableMetadataManager.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.JsonSerializer;
 import org.apache.kylin.common.persistence.RawResource;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TblColRef.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.calcite.avatica.util.Quoting;
 import org.apache.calcite.sql.SqlKind;
 import org.apache.calcite.sql.SqlOperator;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.datatype.DataType;
 
 import lombok.Getter;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/alias/ExpressionComparator.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.calcite.sql.SqlNodeList;
 import org.apache.calcite.sql.SqlOperator;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/AffectedModelContext.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.Pair;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ModelEdgeCollector.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.util.Pair;
 import org.apache.kylin.metadata.cube.cuboid.NAggregationGroup;
 import org.apache.kylin.metadata.cube.model.IndexPlan;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/tool/CalciteParser.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.calcite.sql.parser.SqlParserPos;
 import org.apache.calcite.sql.util.SqlBasicVisitor;
 import org.apache.calcite.sql.util.SqlVisitor;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ExpModifier;
 import org.apache.kylin.common.util.Pair;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/JdbcQueryHistoryStore.java
Patch:
@@ -50,7 +50,7 @@
 
 import javax.sql.DataSource;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.ibatis.jdbc.ScriptRunner;
 import org.apache.ibatis.session.ExecutorType;
 import org.apache.ibatis.session.SqlSession;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/SQLDigest.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Set;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.model.FunctionDesc;
 import org.apache.kylin.metadata.model.JoinDesc;
 import org.apache.kylin.metadata.model.MeasureDesc;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/recommendation/candidate/RawRecItemTable.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.apache.kylin.metadata.recommendation.entity.RecItemV2;
 import org.apache.commons.lang.SerializationException;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.ibatis.type.JdbcType;
 import org.apache.ibatis.type.TypeHandler;
 import org.apache.kylin.common.util.JsonUtil;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/recommendation/entity/CCRecItemV2.java
Patch:
@@ -21,7 +21,7 @@
 import java.io.Serializable;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.model.TblColRef;
 import org.apache.kylin.metadata.model.ComputedColumnDesc;
 import org.apache.kylin.metadata.model.NDataModel;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/recommendation/ref/OptRecV2.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.metadata.cube.model.LayoutEntity;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/sourceusage/SourceUsageManager.java
Patch:
@@ -35,7 +35,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.annotation.Clarification;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/streaming/KafkaConfig.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Locale;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.RootPersistentEntity;
 import org.apache.kylin.metadata.MetadataConstants;

File: src/core-metadata/src/main/java/org/apache/kylin/rest/security/ExternalAclProvider.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.Singletons;
 import org.apache.kylin.common.exception.KylinException;

File: src/core-metadata/src/main/java/org/apache/kylin/rest/security/UserAclManager.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/epoch/EpochUpdateLockManagerTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.junit.annotation.JdbcMetadataInfo;
 import org.apache.kylin.junit.annotation.MetadataInfo;
 import org.junit.Assert;

File: src/core-metrics/src/main/java/org/apache/kylin/common/metrics/MetricsGroup.java
Patch:
@@ -35,7 +35,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.metrics.gauges.QueryRatioGauge;

File: src/core-metrics/src/main/java/org/apache/kylin/common/metrics/MetricsInfluxdbReporter.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.Singletons;
 import org.apache.kylin.common.metrics.reporter.InfluxdbReporter;

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/BaseController.java
Patch:
@@ -53,7 +53,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/JobController.java
Patch:
@@ -33,7 +33,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.Pair;
 import org.apache.kylin.rest.response.DataResult;

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/SegmentController.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.HashSet;
 import java.util.List;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.Pair;

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/open/OpenStreamingJobController.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.rest.response.DataResult;
 import org.apache.kylin.rest.response.EnvelopeResponse;

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/v2/SegmentControllerV2.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.job.execution.JobTypeEnum;
 import org.apache.kylin.metadata.model.Segments;

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/SampleControllerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.nio.charset.StandardCharsets;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.job.dao.ExecutablePO;

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/StreamingJobControllerTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.JsonUtil;

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/open/OpenSampleControllerTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import java.nio.charset.StandardCharsets;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.util.JsonUtil;

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/open/OpenStreamingJobControllerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.Collections;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/response/ExecutableResponse.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Optional;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.engine.spark.job.NSparkSnapshotJob;

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/JobService.java
Patch:
@@ -50,7 +50,7 @@
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.cluster.ClusterManagerFactory;
 import org.apache.kylin.cluster.IClusterManager;
 import org.apache.kylin.common.KylinConfig;

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/ModelBuildService.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.JobErrorCode;
 import org.apache.kylin.common.exception.KylinException;

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/SnapshotService.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.common.collect.Sets;
 import org.apache.kylin.engine.spark.job.NSparkSnapshotJob;
 import lombok.val;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.exception.ServerErrorCode;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/TableSamplingService.java
Patch:
@@ -23,7 +23,7 @@
 import com.google.common.collect.Sets;
 import org.apache.kylin.engine.spark.job.NTableSamplingJob;
 import lombok.val;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.Message;

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java
Patch:
@@ -60,7 +60,7 @@
 
 import org.apache.kylin.metadata.epoch.EpochManager;
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;

File: src/datasource-sdk/src/main/java/org/apache/kylin/sdk/datasource/adaptor/DefaultAdaptor.java
Patch:
@@ -30,7 +30,7 @@
 
 import javax.sql.rowset.CachedRowSet;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.google.common.base.Joiner;
 

File: src/datasource-sdk/src/main/java/org/apache/kylin/sdk/datasource/framework/JdbcConnector.java
Patch:
@@ -27,7 +27,7 @@
 
 import javax.sql.rowset.CachedRowSet;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.datatype.DataType;
 import org.apache.kylin.sdk.datasource.adaptor.AbstractJdbcAdaptor;
 import org.apache.kylin.sdk.datasource.framework.conv.ConvMaster;

File: src/datasource-sdk/src/main/java/org/apache/kylin/sdk/datasource/framework/conv/ParamNodeParser.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/datasource-sdk/src/main/java/org/apache/kylin/sdk/datasource/framework/conv/SqlConverter.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.calcite.sql.SqlSelect;
 import org.apache.calcite.sql.dialect.CalciteSqlDialect;
 import org.apache.calcite.sql.parser.SqlParser;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.datatype.DataType;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkDDLService.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;

File: src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java
Patch:
@@ -61,7 +61,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/job-service/src/main/java/org/apache/kylin/rest/config/initialize/JobSyncListener.java
Patch:
@@ -33,7 +33,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpHeaders;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;

File: src/job-service/src/test/java/org/apache/kylin/rest/config/initialize/JobSchedulerTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;

File: src/kylin-it/src/test/java/org/apache/kylin/query/NKapQueryTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.List;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.util.Shell;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.KylinVersion;

File: src/kylin-it/src/test/java/org/apache/kylin/rest/controller/NProjectControllerTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.metadata.project.NProjectManager;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NModelController.java
Patch:
@@ -34,7 +34,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.metadata.model.NDataModel;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NProjectController.java
Patch:
@@ -39,7 +39,7 @@
 import javax.validation.Valid;
 
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NTableController.java
Patch:
@@ -36,8 +36,8 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NUserController.java
Patch:
@@ -46,7 +46,7 @@
 
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NUserGroupController.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.rest.constant.Constant;

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/v2/NAccessControllerV2.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.persistence.AclEntity;

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/NTableControllerTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/NUserControllerTest.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Locale;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.Message;
 import org.apache.kylin.common.util.JsonUtil;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/model/FuzzyKeySearcher.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.model.FunctionDesc;
 import org.apache.kylin.metadata.model.ComputedColumnDesc;
 import org.apache.kylin.metadata.model.NDataModel;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/response/SynchronizedCommentsResponse.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.model.ColumnDesc;
 import org.apache.kylin.metadata.model.FunctionDesc;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/AbstractModelService.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Arrays;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.metadata.acl.AclTCRManager;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionModelService.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Locale;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.exception.ServerErrorCode;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.SegmentOnlineMode;
 import org.apache.kylin.common.exception.KylinException;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.calcite.sql.dialect.HiveSqlDialect;
 import org.apache.calcite.sql.util.SqlVisitor;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.CommonErrorCode;
 import org.apache.kylin.common.exception.KylinException;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelService.java
Patch:
@@ -103,8 +103,8 @@
 import org.apache.calcite.util.Util;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;

File: src/modeling-service/src/main/java/org/apache/kylin/rest/util/ModelUtils.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Locale;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.DateFormat;

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/BaseIndexTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.job.execution.AbstractExecutable;
 import org.apache.kylin.metadata.cube.model.IndexEntity;

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionModelServiceTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;
 import org.apache.kylin.common.scheduler.EventBusFactory;

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceTest.java
Patch:
@@ -84,9 +84,9 @@
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang.RandomStringUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.time.DateUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.kylin.common.KylinConfig;

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableServiceTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.apache.commons.codec.binary.Base64;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;

File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java
Patch:
@@ -59,7 +59,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.exception.KylinTimeoutException;

File: src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.calcite.sql.type.SqlTypeUtil;
 import org.apache.calcite.util.ImmutableBitSet;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.util.CollectionUtil;

File: src/query-common/src/main/java/org/apache/kylin/query/security/AccessDeniedException.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class AccessDeniedException extends RuntimeException {
     public AccessDeniedException(String s) {

File: src/query-common/src/main/java/org/apache/kylin/query/security/RowFilter.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.calcite.sql.SqlSelect;
 import org.apache.calcite.sql.parser.SqlParseException;
 import org.apache.calcite.sql.util.SqlBasicVisitor;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang.text.StrBuilder;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;

File: src/query-common/src/main/java/org/apache/kylin/query/util/AsyncQueryUtil.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FSDataOutputStream;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/query-common/src/main/java/org/apache/kylin/query/util/ModelViewSqlNodeComparator.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.kylin.query.util;
 
 import org.apache.calcite.sql.SqlIdentifier;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.alias.ExpressionComparator;
 

File: src/query-common/src/main/java/org/apache/kylin/query/util/PushDownUtil.java
Patch:
@@ -35,7 +35,7 @@
 import javax.ws.rs.BadRequestException;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;

File: src/query-common/src/main/java/org/apache/kylin/query/util/QueryAliasMatcher.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.calcite.sql.dialect.CalciteSqlDialect;
 import org.apache.calcite.sql.util.SqlBasicVisitor;
 import org.apache.commons.collections.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.KylinConfigExt;
 import org.apache.kylin.common.util.Pair;

File: src/query-server/src/main/java/org/apache/kylin/rest/controller/NAsyncQueryController.java
Patch:
@@ -36,7 +36,7 @@
 import javax.servlet.http.HttpServletResponse;
 import javax.validation.Valid;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.exception.KylinException;

File: src/query-server/src/main/java/org/apache/kylin/rest/controller/NQueryController.java
Patch:
@@ -44,7 +44,7 @@
 import javax.validation.Valid;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.ForceToTieredStorage;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;

File: src/query-server/src/test/java/org/apache/kylin/rest/controller/SparkMetricsControllerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.rest.controller;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.rest.service.MonitorService;
 import org.junit.Assert;
 import org.junit.Before;

File: src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponseV2.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.slf4j.Logger;

File: src/query-service/src/main/java/org/apache/kylin/rest/service/ModelQueryService.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.function.BiConsumer;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.cube.model.NDataflow;
 import org.apache.kylin.metadata.cube.model.NDataflowManager;

File: src/query-service/src/main/java/org/apache/kylin/rest/service/MonitorService.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.cluster.ClusterManagerFactory;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryHistoryService.java
Patch:
@@ -40,7 +40,7 @@
 
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.time.DateUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java
Patch:
@@ -55,7 +55,7 @@
 import org.apache.calcite.sql.pretty.SqlPrettyWriter;
 import org.apache.calcite.sql.validate.SqlValidatorException;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.kylin.common.ForceToTieredStorage;
 import org.apache.kylin.common.KapConfig;

File: src/query-service/src/main/java/org/apache/kylin/rest/util/QueryCacheSignatureUtil.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Set;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.cube.model.NDataSegment;
 import org.apache.kylin.metadata.cube.model.NDataflowManager;

File: src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.rest.util;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.util.Pair;

File: src/query/src/main/java/org/apache/kylin/query/engine/AsyncQueryApplication.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.util.JsonUtil;

File: src/query/src/main/java/org/apache/kylin/query/engine/AsyncQueryJob.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.KylinConfigExt;

File: src/query/src/test/java/org/apache/kylin/query/engine/view/ModelViewTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.calcite.schema.impl.ViewTable;
 import org.apache.calcite.sql.parser.SqlParseException;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.metadata.cube.model.IndexPlan;

File: src/query/src/test/java/org/apache/kylin/query/schema/KylinSqlValidatorTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.calcite.rel.RelNode;
 import org.apache.calcite.sql.parser.SqlParseException;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.realization.RealizationStatusEnum;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;

File: src/second-storage/clickhouse/src/main/java/io/kyligence/kap/clickhouse/ClickHouseStorage.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.ClickHouseConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.job.SecondStorageStepFactory;

File: src/second-storage/clickhouse/src/main/java/io/kyligence/kap/clickhouse/job/ClickHouseLoad.java
Patch:
@@ -47,7 +47,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;

File: src/second-storage/clickhouse/src/main/java/io/kyligence/kap/clickhouse/job/ClickhouseLoadFileLoad.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.SQLException;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 
 import io.kyligence.kap.clickhouse.ddl.ClickHouseCreateTable;

File: src/second-storage/clickhouse/src/test/java/io/kyligence/kap/clickhouse/job/HadoopMockUtil.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.mockito.Mockito;

File: src/second-storage/core-ui/src/main/java/io/kyligence/kap/secondstorage/management/OpenSecondStorageEndpoint.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 import java.util.Objects;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/second-storage/core-ui/src/main/java/io/kyligence/kap/secondstorage/management/SecondStorageEndpoint.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Objects;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/second-storage/core/src/main/java/io/kyligence/kap/secondstorage/ddl/DDL.java
Patch:
@@ -18,7 +18,7 @@
 package io.kyligence.kap.secondstorage.ddl;
 import io.kyligence.kap.secondstorage.ddl.visitor.DefaultSQLRender;
 import io.kyligence.kap.secondstorage.ddl.visitor.Renderable;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public abstract class DDL<T extends DDL<T>> implements Renderable {
 

File: src/second-storage/core/src/main/java/io/kyligence/kap/secondstorage/ddl/exp/TableIdentifier.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.kyligence.kap.secondstorage.ddl.visitor.RenderVisitor;
 import io.kyligence.kap.secondstorage.ddl.visitor.Renderable;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class TableIdentifier implements Renderable {
     public static final char TABLE_ESCAPE = '`';

File: src/second-storage/core/src/main/java/io/kyligence/kap/secondstorage/metadata/Manager.java
Patch:
@@ -24,7 +24,7 @@
 
 import javax.annotation.concurrent.NotThreadSafe;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.persistence.RootPersistentEntity;

File: src/server/src/main/java/org/apache/kylin/rest/QueryNodeFilter.java
Patch:
@@ -42,7 +42,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.ErrorCode;
 import org.apache.kylin.common.exception.KylinException;

File: src/server/src/main/java/org/apache/kylin/rest/ZookeeperClusterManager.java
Patch:
@@ -24,7 +24,7 @@
 
 import javax.annotation.Nullable;
 
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.rest.cluster.ClusterManager;
 import org.apache.kylin.rest.discovery.KylinServiceDiscoveryCache;
 import org.apache.kylin.rest.discovery.KylinServiceDiscoveryClient;

File: src/server/src/main/java/org/apache/kylin/rest/config/CorsConfig.java
Patch:
@@ -17,7 +17,7 @@
  */
 package org.apache.kylin.rest.config;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;

File: src/server/src/main/java/org/apache/kylin/rest/discovery/KylinServiceDiscoveryCache.java
Patch:
@@ -35,8 +35,8 @@
 import javax.annotation.PreDestroy;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.state.ConnectionState;
 import org.apache.curator.x.discovery.ServiceCache;

File: src/server/src/main/java/org/apache/kylin/rest/discovery/KylinServiceDiscoveryClient.java
Patch:
@@ -27,7 +27,7 @@
 import javax.annotation.Nullable;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.ArrayUtils;
+import org.apache.commons.lang3.ArrayUtils;
 import org.apache.kylin.rest.response.ServerInfoResponse;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.cloud.zookeeper.ConditionalOnZookeeperEnabled;

File: src/source-hive/src/test/java/org/apache/kylin/source/hive/BeelineOptionsProcessorTest.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.kylin.source.hive;
 
 import org.apache.commons.cli.CommandLine;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.Ignore;
 import org.junit.Test;
 

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.atomic.AtomicReference;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FileSystem;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/DefaultSparkBuildJobHandler.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FSDataOutputStream;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/ExecutableAddCuboidHandler.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.base.Preconditions;
 import lombok.val;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.engine.spark.merger.AfterBuildResourceMerger;
 import org.apache.kylin.job.execution.DefaultExecutableOnModel;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java
Patch:
@@ -237,7 +237,7 @@ public ExecuteResult doWork(ExecutableContext context) throws ExecuteException {
         if (StringUtils.isEmpty(kylinJobJar) && !config.isUTEnv()) {
             throw new RuntimeException("Missing kylin job jar");
         }
-        if (!config.isUTEnv()) {
+        if (!config.isDevOrUT()) {
             sparkJobHandler.checkApplicationJar(config);
         }
 

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/SparkCleanupTransactionalTableStep.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.engine.spark.job;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/mockup/CsvSource.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.Pair;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/mockup/CsvTableReader.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.source.IReadableTable;
 

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkDataSource.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.engine.spark.source;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.model.IBuildable;
 import org.apache.kylin.metadata.model.SegmentRange;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/stats/analyzer/TableAnalyzerJob.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.common.collect.Lists;
 import lombok.val;
 import lombok.var;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/stats/utils/DateTimeCheckUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.engine.spark.stats.utils;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 public class DateTimeCheckUtils {
 

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/utils/HiveTransactionTableHelper.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Objects;
 
 import org.apache.commons.lang.StringEscapeUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.permission.FsPermission;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/utils/SparkJobFactoryUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.engine.spark.utils;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.engine.spark.job.NSparkCubingJob;
 import org.apache.kylin.engine.spark.job.NSparkCubingStep;
 import org.apache.kylin.engine.spark.job.NSparkMergingJob;

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java
Patch:
@@ -22,7 +22,7 @@
 import com.google.common.collect.Lists;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.kylin.common.KylinConfig;

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentMergeJob.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.google.common.base.Throwables;
 import lombok.val;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.engine.spark.job.exec.MergeExec;
 import org.apache.kylin.engine.spark.job.stage.BuildParam;

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SnapshotBuildJob.java
Patch:
@@ -22,7 +22,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import lombok.val;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: src/spark-project/source-jdbc/src/main/java/org/apache/kylin/source/jdbc/JdbcSource.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.io.IOException;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;

File: src/spark-project/spark-common/src/main/scala/org/apache/kylin/engine/spark/job/NSparkCubingUtil.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.calcite.avatica.util.Quoting;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.util.StringSplitter;
 import org.apache.kylin.metadata.cube.model.IndexPlan;

File: src/spark-project/spark-common/src/main/scala/org/apache/spark/dict/NGlobalDictHDFSStore.java
Patch:
@@ -22,7 +22,7 @@
 import java.nio.charset.Charset;
 import java.util.TreeSet;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FSDataOutputStream;

File: src/spark-project/spark-common/src/test/java/org/apache/kylin/common/asyncprofiler/AsyncProfilerToolTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.common.asyncprofiler;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.junit.After;
 import org.junit.Assert;

File: src/streaming-service/src/main/java/org/apache/kylin/rest/service/StreamingJobService.java
Patch:
@@ -38,7 +38,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.ObjectUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.exception.ServerErrorCode;

File: src/streaming/src/main/java/org/apache/kylin/kafka/util/KafkaUtils.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Properties;
 
 import org.apache.commons.collections4.MapUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kafka.clients.admin.AdminClient;
 import org.apache.kafka.clients.consumer.Consumer;
 import org.apache.kafka.clients.consumer.KafkaConsumer;

File: src/streaming/src/main/java/org/apache/kylin/streaming/jobs/AbstractSparkJobLauncher.java
Patch:
@@ -25,7 +25,7 @@
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.job.execution.JobTypeEnum;

File: src/streaming/src/main/java/org/apache/kylin/streaming/manager/StreamingJobManager.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.job.constant.JobStatusEnum;

File: src/streaming/src/main/java/org/apache/kylin/streaming/rest/RestSupport.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.InputStream;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpHeaders;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;

File: src/tool/src/main/java/org/apache/kylin/tool/AbstractInfoExtractorTool.java
Patch:
@@ -58,7 +58,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinTimeoutException;

File: src/tool/src/main/java/org/apache/kylin/tool/AuditLogTool.java
Patch:
@@ -45,7 +45,7 @@
 import org.apache.commons.cli.Options;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.dbcp2.BasicDataSourceFactory;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.ExecutableApplication;

File: src/tool/src/main/java/org/apache/kylin/tool/ClickhouseDiagTool.java
Patch:
@@ -29,8 +29,8 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.CliCommandExecutor;
 import org.apache.kylin.common.util.Pair;

File: src/tool/src/main/java/org/apache/kylin/tool/ConfTool.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Set;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.tool.util.ToolUtil;
 import org.slf4j.Logger;

File: src/tool/src/main/java/org/apache/kylin/tool/DumpHadoopSystemProps.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.util.RandomUtil;
 import org.apache.kylin.common.util.Unsafe;
 

File: src/tool/src/main/java/org/apache/kylin/tool/JobDiagInfoTool.java
Patch:
@@ -33,7 +33,7 @@
 import com.google.common.collect.Sets;
 import org.apache.commons.cli.Option;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinRuntimeException;
 import org.apache.kylin.common.util.OptionsHelper;

File: src/tool/src/main/java/org/apache/kylin/tool/KylinLogTool.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.stream.Stream;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FSDataInputStream;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;

File: src/tool/src/main/java/org/apache/kylin/tool/daemon/KapGuardian.java
Patch:
@@ -28,7 +28,7 @@
 
 import org.apache.calcite.avatica.util.Unsafe;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ClassUtil;
 import org.apache.kylin.common.util.ExecutorServiceUtil;

File: src/tool/src/main/java/org/apache/kylin/tool/obf/KylinConfObfuscator.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.Properties;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.StorageURL;
 import org.apache.kylin.tool.constant.SensitiveConfigKeysConstant;
 

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/CheckProjectModeCLI.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ExecutableApplication;
 import org.apache.kylin.common.util.OptionsHelper;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/DeleteFavoriteQueryCLI.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ExecutableApplication;
 import org.apache.kylin.common.util.OptionsHelper;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/RenameEntity.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.IOException;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.JsonSerializer;
 import org.apache.kylin.common.persistence.RawResource;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/RenameUserResourceTool.java
Patch:
@@ -42,7 +42,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.OptionBuilder;
 import org.apache.commons.cli.Options;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.RawResource;
 import org.apache.kylin.common.persistence.ResourceStore;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/UpdateModelCLI.java
Patch:
@@ -30,7 +30,7 @@
 
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ExecutableApplication;
 import org.apache.kylin.common.util.OptionsHelper;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/UpdateProjectCLI.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ExecutableApplication;
 import org.apache.kylin.common.util.OptionsHelper;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/UpdateSessionTableCLI.java
Patch:
@@ -29,7 +29,7 @@
 
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.ExecutableApplication;
 import org.apache.kylin.common.util.OptionsHelper;

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/UpdateUserGroupCLI.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.commons.cli.Option;
 import org.apache.commons.cli.Options;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.ExecutableApplication;
 import org.apache.kylin.common.util.JsonUtil;

File: src/tool/src/main/java/org/apache/kylin/tool/util/HadoopConfExtractor.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.conf.HAUtil;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;

File: src/tool/src/main/java/org/apache/kylin/tool/util/ServerInfoUtil.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: src/tool/src/test/java/org/apache/kylin/tool/StorageCleanerTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.permission.FsPermission;

File: src/tool/src/test/java/org/apache/kylin/tool/garbage/SnapshotCleanerTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;

File: src/tool/src/test/java/org/apache/kylin/tool/general/CryptToolTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.Charset;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;

File: src/tool/src/test/java/org/apache/kylin/tool/upgrade/RenameUserResourceToolTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.nio.charset.Charset;
 import java.util.Locale;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.RawResource;
 import org.apache.kylin.common.persistence.ResourceStore;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/graph/JoinsGraph.java
Patch:
@@ -355,7 +355,7 @@ public void normalize() {
                 }
                 for (Edge targetEdge : edgeList) {
                     if (!edge.equals(targetEdge) && fkSide.equals(targetEdge.pkSide())
-                            && !targetEdge.isLeftOrInnerJoin() && targetEdge.isLeftJoin()) {
+                            && !targetEdge.isLeftOrInnerJoin()) {
                         setJoinToLeftOrInner(targetEdge.join);
                         normalize();
                     }

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.kylin.common.util.Pair;
 import org.apache.kylin.common.util.StringUtil;
 import org.apache.kylin.metadata.MetadataConstants;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.model.tool.CalciteParser;
 import org.apache.kylin.metadata.model.util.ComputedColumnUtil;
 import org.apache.kylin.metadata.project.NProjectManager;

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/util/ComputedColumnUtil.java
Patch:
@@ -51,12 +51,12 @@
 import org.apache.kylin.metadata.model.BadModelException.CauseType;
 import org.apache.kylin.metadata.model.ColumnDesc;
 import org.apache.kylin.metadata.model.ComputedColumnDesc;
-import org.apache.kylin.metadata.model.JoinsGraph;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.metadata.model.alias.AliasDeduce;
 import org.apache.kylin.metadata.model.alias.AliasMapping;
 import org.apache.kylin.metadata.model.alias.ExpressionComparator;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.model.tool.CalciteParser;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -329,7 +329,7 @@ private static JoinsGraph getCCExprRelatedSubgraph(ComputedColumnDesc cc, NDataM
         if (cc.getTableAlias() != null) {
             aliasSets.add(cc.getTableAlias());
         }
-        return model.getJoinsGraph().getSubgraphByAlias(aliasSets);
+        return model.getJoinsGraph().getSubGraphByAlias(aliasSets);
     }
 
     public static boolean isSameName(ComputedColumnDesc col1, ComputedColumnDesc col2) {

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/model/MockJoinGraphBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.calcite.sql.JoinType;
 import org.apache.calcite.sql.SqlKind;
 import org.apache.calcite.sql.type.SqlTypeName;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.junit.Assert;
 
 import com.google.common.collect.Lists;

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java
Patch:
@@ -43,11 +43,11 @@
 import org.apache.kylin.metadata.cube.realization.HybridRealization;
 import org.apache.kylin.metadata.model.FunctionDesc;
 import org.apache.kylin.metadata.model.JoinDesc;
-import org.apache.kylin.metadata.model.JoinsGraph;
 import org.apache.kylin.metadata.model.MeasureDesc;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.TableRef;
 import org.apache.kylin.metadata.model.TblColRef;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.query.NativeQueryRealization;
 import org.apache.kylin.metadata.query.QueryMetrics;
 import org.apache.kylin.metadata.realization.IRealization;
@@ -535,7 +535,7 @@ public void matchJoinWithFilterTransformation() {
     }
 
     public void matchJoinWithEnhancementTransformation() {
-        this.setJoinsGraph(JoinsGraph.normalizeJoinGraph(joinsGraph));
+        joinsGraph.normalize();
     }
 
     public RexInputRef createUniqueInputRefContextTables(OLAPTableScan table, int columnIdx) {

File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java
Patch:
@@ -79,7 +79,6 @@
 import org.apache.kylin.metadata.model.ISourceAware;
 import org.apache.kylin.metadata.model.JoinDesc;
 import org.apache.kylin.metadata.model.JoinTableDesc;
-import org.apache.kylin.metadata.model.JoinsGraph;
 import org.apache.kylin.metadata.model.MeasureDesc;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.NDataModelManager;
@@ -88,6 +87,7 @@
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.metadata.model.TableRef;
 import org.apache.kylin.metadata.model.TblColRef;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.project.NProjectLoader;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.project.ProjectInstance;

File: src/query-common/src/main/java/org/apache/kylin/query/util/QueryAliasMatcher.java
Patch:
@@ -50,12 +50,13 @@
 import org.apache.kylin.metadata.model.ColExcludedChecker;
 import org.apache.kylin.metadata.model.ColumnDesc;
 import org.apache.kylin.metadata.model.JoinDesc;
-import org.apache.kylin.metadata.model.JoinsGraph;
 import org.apache.kylin.metadata.model.NDataModel;
 import org.apache.kylin.metadata.model.NTableMetadataManager;
 import org.apache.kylin.metadata.model.TableRef;
 import org.apache.kylin.metadata.model.TblColRef;
 import org.apache.kylin.metadata.model.alias.ExpressionComparator;
+import org.apache.kylin.metadata.model.graph.DefaultJoinEdgeMatcher;
+import org.apache.kylin.metadata.model.graph.JoinsGraph;
 import org.apache.kylin.metadata.model.tool.CalciteParser;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.query.relnode.ColumnRowType;
@@ -239,7 +240,7 @@ private SqlSelect getSubQuery(SqlNode sqlNode) {
         return null;
     }
 
-    private static class CCJoinEdgeMatcher extends JoinsGraph.DefaultJoinEdgeMatcher {
+    private static class CCJoinEdgeMatcher extends DefaultJoinEdgeMatcher {
         transient QueryAliasMatchInfo matchInfo;
         boolean compareCCExpr;
 

File: src/common-service/src/main/java/org/apache/kylin/rest/service/BasicService.java
Patch:
@@ -32,9 +32,8 @@
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.transaction.BroadcastEventReadyNotifier;
 import org.apache.kylin.common.util.JsonUtil;
-import org.apache.kylin.metadata.epoch.EpochManager;
-import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.common.util.Pair;
+import org.apache.kylin.metadata.epoch.EpochManager;
 import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.streaming.DataParserManager;

File: src/common-service/src/test/java/org/apache/kylin/rest/service/ServiceTestBase.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.engine.spark.utils.SparkJobFactoryUtils;
+import org.apache.kylin.metadata.user.ManagedUser;
 import org.apache.kylin.rest.constant.Constant;
 import org.junit.After;
 import org.junit.AfterClass;
@@ -48,7 +49,6 @@
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.context.web.WebAppConfiguration;
 
-import io.kyligence.kap.metadata.user.ManagedUser;
 import io.kyligence.kap.secondstorage.SecondStorageUpdater;
 
 @RunWith(SpringJUnit4ClassRunner.class)

File: src/common-service/src/test/java/org/apache/kylin/rest/service/SourceTestCase.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.kylin.job.execution.NExecutableManager;
 import org.apache.kylin.metadata.cube.model.NDataflowManager;
 import org.apache.kylin.metadata.cube.model.NIndexPlanManager;
+import org.apache.kylin.metadata.epoch.EpochManager;
 import org.apache.kylin.metadata.model.NDataModelManager;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.project.ProjectInstance;
@@ -42,7 +43,6 @@
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.context.SecurityContextHolder;
 
-import io.kyligence.kap.metadata.epoch.EpochManager;
 import lombok.val;
 
 public class SourceTestCase extends NLocalFileMetadataTestCase {

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceSemanticUpdateTest.java
Patch:
@@ -39,6 +39,8 @@
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.cube.model.SelectRule;
+import org.apache.kylin.engine.spark.job.ExecutableAddCuboidHandler;
+import org.apache.kylin.engine.spark.job.NSparkCubingJob;
 import org.apache.kylin.engine.spark.utils.SparkJobFactoryUtils;
 import org.apache.kylin.job.execution.AbstractExecutable;
 import org.apache.kylin.job.execution.ExecutableState;
@@ -96,9 +98,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 
-import io.kyligence.kap.engine.spark.job.ExecutableAddCuboidHandler;
-import io.kyligence.kap.engine.spark.job.NSparkCubingJob;
-import io.kyligence.kap.metadata.recommendation.candidate.JdbcRawRecStore;
 import lombok.val;
 import lombok.var;
 import lombok.extern.slf4j.Slf4j;

File: src/common-service/src/main/java/org/apache/kylin/rest/service/BasicService.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.kylin.metadata.epoch.EpochManager;
 import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.common.util.Pair;
+import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.streaming.DataParserManager;
 import org.apache.kylin.rest.response.EnvelopeResponse;

File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java
Patch:
@@ -268,7 +268,7 @@ private static RexNode transform(RexNode rexNode, RexBuilder rexBuilder, RelData
 
     private static String normalization(String dateFormat, RexLiteral rexLiteral) {
         RelDataTypeFamily typeFamily = rexLiteral.getType().getFamily();
-        if (SqlTypeFamily.DATE == typeFamily) {
+        if (SqlTypeFamily.DATE == typeFamily || SqlTypeFamily.TIMESTAMP == typeFamily) {
             // Calendar uses UTC timezone, just to keep RexLiteral's value(an instanceof DateString)
             long timeInMillis = ((Calendar) rexLiteral.getValue()).getTimeInMillis();
             String dateStr = DateFormat.formatToDateStr(timeInMillis, dateFormat, RealizationPruner.UTC_ZONE);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java
Patch:
@@ -716,9 +716,8 @@ private boolean isEpochLegal(Epoch epoch) {
                 return false;
             }
 
-            ResourceGroupManager rgManager = ResourceGroupManager.getInstance(config);
             String epochServer = getHostAndPort(epoch.getCurrentEpochOwner());
-            if (!rgManager.instanceHasPermissionToOwnEpochTarget(epoch.getEpochTarget(), epochServer)) {
+            if (!currentInstanceHasPermissionToOwn(epoch.getEpochTarget(), epochServer)) {
                 logger.debug("Epoch {}'s owner is not in build request type resource group.", epoch);
                 return false;
             }

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelTdsServiceColumnNameTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.kylin.common.scheduler.EventBusFactory;
-import org.apache.kylin.engine.spark.ExecutableUtils;
+import org.apache.kylin.engine.spark.utils.SparkJobFactoryUtils;
 import org.apache.kylin.junit.rule.TransactionExceptedException;
 import org.apache.kylin.metadata.cube.model.NDataflowManager;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
@@ -78,7 +78,7 @@ protected String getProject() {
 
     @Before
     public void setup() {
-        ExecutableUtils.initJobFactory();
+        SparkJobFactoryUtils.initJobFactory();
         String localMetaDir = "src/test/resources/ut_meta/tds_export_test";
         createTestMetadata(localMetaDir);
         Authentication authentication = new TestingAuthenticationToken("ADMIN", "ADMIN", Constant.ROLE_ADMIN);

File: src/common-service/src/main/java/org/apache/kylin/rest/service/ProjectService.java
Patch:
@@ -330,9 +330,8 @@ public FavoriteQueryThresholdResponse getQueryAccelerateThresholdConfig(String p
 
     public StorageVolumeInfoResponse getStorageVolumeInfoResponse(String project) {
         val response = new StorageVolumeInfoResponse();
-        val storageInfoEnumList = Lists.newArrayList(StorageInfoEnum.GARBAGE_STORAGE, StorageInfoEnum.STORAGE_QUOTA,
-                StorageInfoEnum.TOTAL_STORAGE);
-        val collector = new ProjectStorageInfoCollector(storageInfoEnumList);
+        val collector = new ProjectStorageInfoCollector(Lists.newArrayList(StorageInfoEnum.GARBAGE_STORAGE, StorageInfoEnum.STORAGE_QUOTA,
+                StorageInfoEnum.TOTAL_STORAGE));
         val storageVolumeInfo = collector.getStorageVolumeInfo(getConfig(), project);
         response.setGarbageStorageSize(storageVolumeInfo.getGarbageStorageSize());
         response.setStorageQuotaSize(storageVolumeInfo.getStorageQuotaSize());

File: src/core-job/src/main/java/org/apache/kylin/job/runners/QuotaStorageCheckRunner.java
Patch:
@@ -38,9 +38,7 @@ public class QuotaStorageCheckRunner extends AbstractDefaultSchedulerRunner {
 
     public QuotaStorageCheckRunner(NDefaultScheduler nDefaultScheduler) {
         super(nDefaultScheduler);
-
-        val storageInfoEnumList = Lists.newArrayList(StorageInfoEnum.STORAGE_QUOTA, StorageInfoEnum.TOTAL_STORAGE);
-        collector = new ProjectStorageInfoCollector(storageInfoEnumList);
+        collector = new ProjectStorageInfoCollector(Lists.newArrayList(StorageInfoEnum.STORAGE_QUOTA, StorageInfoEnum.TOTAL_STORAGE));
     }
 
     @Override

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/storage/StorageInfoCollector.java
Patch:
@@ -32,4 +32,6 @@ default void collect(KylinConfig config, String project, StorageVolumeInfo stora
     }
 
     void doCollect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) throws IOException;
+
+    StorageInfoEnum getType();
 }

File: src/common-service/src/main/java/org/apache/kylin/helper/MetadataToolHelper.java
Patch:
@@ -135,7 +135,8 @@ void doBackup(KylinConfig kylinConfig, String project, String path, String folde
                     + "_backup";
         }
         String backupPath = StringUtils.appendIfMissing(path, "/") + folder;
-        logger.info("The metadata backup path is {}}", backupPath);
+        //FIXME should replace printf with Logger while Logger MUST print this message to console, because test depends on it
+        System.out.printf(Locale.ROOT, "The metadata backup path is %s.%n", backupPath);
         val backupMetadataUrl = getMetadataUrl(backupPath, compress, kylinConfig);
         val backupConfig = KylinConfig.createKylinConfig(kylinConfig);
         backupConfig.setMetadataUrl(backupMetadataUrl);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/usergroup/NUserGroupManager.java
Patch:
@@ -91,7 +91,7 @@ public List<UserGroup> getAllGroups() {
         return ImmutableList.copyOf(crud.listAll());
     }
 
-    public List<UserGroup> getAllUsers(Predicate<String> predicate) {
+    public List<UserGroup> getAllGroups(Predicate<String> predicate) {
         return ImmutableList.copyOf(crud.listPartial(predicate));
     }
 

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/usergroup/NUserGroupManagerTest.java
Patch:
@@ -52,7 +52,7 @@ public void testCRUD() {
         Assert.assertTrue(group.exists("g1"));
         Assert.assertFalse(group.exists("g4"));
         Assert.assertEquals(Lists.newArrayList("g1", "g2", "g3"), group.getAllGroupNames());
-        Assert.assertEquals("g1", group.getAllUsers(path -> path.endsWith("g1")).get(0).getGroupName());
+        Assert.assertEquals("g1", group.getAllGroups(path -> path.endsWith("g1")).get(0).getGroupName());
 
         Assert.assertThrows(String.format(Locale.ROOT, MsgPicker.getMsg().getUserGroupExist(), "g1"),
                 KylinException.class, () -> group.add("g1"));

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/streaming/StreamingJobRecordManagerTest.java
Patch:
@@ -105,7 +105,6 @@ public void testDeleteIfRetainTimeReached() {
     }
 
     @Test
-    @Ignore
     public void testDropTable() {
         try {
             val jdbcRawRecStore = (JdbcStreamingJobRecordStore) ReflectionUtils.getField(streamingJobRecordManager,

File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java
Patch:
@@ -542,7 +542,7 @@ public <T> EnvelopeResponse<T> generateTaskForRemoteHost(final HttpServletReques
     public void downloadFromRemoteHost(final HttpServletRequest request, String url,
             HttpServletResponse servletResponse) throws IOException {
         File temporaryZipFile = KylinConfigBase.getDiagFileName();
-        Preconditions.checkState(temporaryZipFile.getParentFile().mkdirs(), "create temporary zip file folder failed");
+        temporaryZipFile.getParentFile().mkdirs();
         Preconditions.checkState(temporaryZipFile.createNewFile(), "create temporary zip file failed");
         RequestCallback requestCallback = x -> {
             Collections.list(request.getHeaderNames())

File: src/common-service/src/main/java/org/apache/kylin/rest/service/ProjectService.java
Patch:
@@ -948,7 +948,7 @@ public void updateDefaultDatabase(String project, String defaultDatabase) {
     }
 
     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN + " or hasPermission(#project, 'ADMINISTRATION')")
-    public String backupProject(String project) throws IOException {
+    public String backupProject(String project) throws Exception {
         return metadataBackupService.backupProject(project);
     }
 

File: src/common-service/src/main/java/org/apache/kylin/tool/daemon/Worker.java
Patch:
@@ -40,7 +40,7 @@ public class Worker {
     private static SecretKey kgSecretKey;
 
     @Getter
-    private static String KE_PID;
+    private static String kePid;
 
     static {
         int serverPort = Integer.parseInt(getKylinConfig().getServerPort());
@@ -58,7 +58,7 @@ public static String getServerPort() {
     }
 
     public synchronized void setKEPid(String pid) {
-        KE_PID = pid;
+        kePid = pid;
     }
 
     public synchronized void setKgSecretKey(SecretKey secretKey) {

File: src/common-service/src/main/java/org/apache/kylin/tool/garbage/MetadataCleaner.java
Patch:
@@ -19,9 +19,9 @@
 package org.apache.kylin.tool.garbage;
 
 public abstract class MetadataCleaner {
-    protected String project;
+    protected final String project;
 
-    public MetadataCleaner(String project) {
+    protected MetadataCleaner(String project) {
         this.project = project;
     }
 

File: src/common-service/src/main/java/org/apache/kylin/tool/garbage/SnapshotCleaner.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.kylin.tool.garbage;
 
 import java.io.IOException;
+import java.nio.file.FileSystems;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -27,9 +28,9 @@
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.HadoopUtil;
+import org.apache.kylin.metadata.model.NTableMetadataManager;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.metadata.model.TableExtDesc;
-import org.apache.kylin.metadata.model.NTableMetadataManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -59,7 +60,7 @@ private boolean snapshotExist(String snapshotPath, KapConfig config) {
         }
         FileSystem fs = HadoopUtil.getWorkingFileSystem();
         String baseDir = config.getMetadataWorkingDirectory();
-        String resourcePath = baseDir + "/" + snapshotPath;
+        String resourcePath = baseDir + FileSystems.getDefault().getSeparator() + snapshotPath;
         try {
             return fs.exists(new Path(resourcePath));
         } catch (IOException e) {

File: src/core-common/src/main/java/org/apache/kylin/common/util/Pair.java
Patch:
@@ -56,7 +56,7 @@ public Pair(T1 a, T2 b) {
      * @return a new pair containing the passed arguments
      */
     public static <T1, T2> Pair<T1, T2> newPair(T1 a, T2 b) {
-        return new Pair<T1, T2>(a, b);
+        return new Pair<>(a, b);
     }
 
     private static boolean equals(Object x, Object y) {

File: src/core-job/src/main/java/org/apache/kylin/job/execution/NExecutableManager.java
Patch:
@@ -245,8 +245,6 @@ private void addJobOutput(ExecutablePO executable) {
         }
     }
 
-    //for ut
-    @VisibleForTesting
     public void deleteJob(String jobId) {
         checkJobCanBeDeleted(jobId);
         executableDao.deleteJob(jobId);

File: src/core-metadata/src/test/java/org/apache/kylin/metrics/HdfsCapacityMetricsTest.java
Patch:
@@ -88,7 +88,10 @@ public void testWriteHdfsMetrics() throws IOException {
             fs.mkdirs(projectPath);
             fs.createNewFile(projectPath);
         }
+        Assert.assertTrue(hdfsCapacityMetrics.getWorkingDirCapacity().isEmpty());
         hdfsCapacityMetrics.writeHdfsMetrics();
+        Assert.assertEquals(28, hdfsCapacityMetrics.getWorkingDirCapacity().size());
+
     }
 
     @Test

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NMetaStoreController.java
Patch:
@@ -161,8 +161,7 @@ public EnvelopeResponse<String> cleanUpMetaStore(@RequestBody MetadataCleanupReq
     @ApiOperation(value = "cleanupStorage", tags = { "SM" })
     @PostMapping(value = "/cleanup_storage")
     @ResponseBody
-    public EnvelopeResponse<String> cleanupStorage(@RequestBody StorageCleanupRequest request) throws Exception {
-
+    public EnvelopeResponse<String> cleanupStorage(@RequestBody StorageCleanupRequest request) {
         metaStoreService.cleanupStorage(request.getProjectsToClean(), request.isCleanupStorage());
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, "", "");
     }

File: src/modeling-service/src/main/java/org/apache/kylin/tool/bisync/model/JoinTreeNode.java
Patch:
@@ -17,6 +17,7 @@
  */
 package org.apache.kylin.tool.bisync.model;
 
+import java.util.Collections;
 import java.util.Deque;
 import java.util.LinkedList;
 import java.util.List;
@@ -50,7 +51,7 @@ public void setChildNodes(List<JoinTreeNode> childNodes) {
      */
     public List<JoinTableDesc> iteratorAsList() {
         if (this.value == null) {
-            return null;
+            return Collections.emptyList();
         }
 
         Deque<JoinTreeNode> nodeDeque = new LinkedList<>();

File: src/modeling-service/src/main/java/org/apache/kylin/tool/bisync/tableau/TableauDataSourceConverter.java
Patch:
@@ -61,7 +61,7 @@
 
 import com.fasterxml.jackson.dataformat.xml.XmlMapper;
 
-public class TableauDataSourceConverter implements BISyncModelConverter {
+public class TableauDataSourceConverter implements BISyncModelConverter<TableauDatasourceModel> {
 
     private static final String ODBC_CONNECTION_PROJECT_PREFIX = "PROJECT=";
     private static final String ODBC_CONNECTION_MODEL_PREFIX = "CUBE=";

File: src/modeling-service/src/main/java/org/apache/kylin/tool/bisync/tableau/TableauDatasourceModel.java
Patch:
@@ -42,15 +42,15 @@ public TableauDatasourceModel(TableauDatasource tableauDatasource) {
         this.tableauDatasource = tableauDatasource;
     }
 
-    public static void dumpModelAsXML(TableauDatasource BISyncModel, OutputStream outputStream)
+    public static void dumpModelAsXML(TableauDatasource biSyncModel, OutputStream outputStream)
             throws XMLStreamException, IOException {
         XmlMapper xmlMapper = new XmlMapper();
         XMLStreamWriter writer = xmlMapper.getFactory().getXMLOutputFactory().createXMLStreamWriter(outputStream);
         xmlMapper.enable(ToXmlGenerator.Feature.WRITE_XML_DECLARATION);
         xmlMapper.enable(SerializationFeature.INDENT_OUTPUT);
         xmlMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         xmlMapper.getFactory().getXMLOutputFactory().setProperty("javax.xml.stream.isRepairingNamespaces", false);
-        xmlMapper.writeValue(writer, BISyncModel);
+        xmlMapper.writeValue(writer, biSyncModel);
     }
 
     @Override

File: src/tool/src/main/java/org/apache/kylin/tool/AbstractInfoExtractorTool.java
Patch:
@@ -667,7 +667,7 @@ protected void exportClient(File recordTime) {
     }
 
     protected void exportJstack(File recordTime) {
-        Future jstackTask = executorService.submit(() -> {
+        Future<?> jstackTask = executorService.submit(() -> {
             recordTaskStartTime(JSTACK);
             JStackTool.extractJstack(exportDir);
             recordTaskExecutorTimeToFile(JSTACK, recordTime);

File: src/tool/src/main/java/org/apache/kylin/tool/daemon/handler/AbstractCheckStateHandler.java
Patch:
@@ -48,10 +48,10 @@ private boolean opQueryService(ServiceOpLevelEnum opLevelEnum) {
             }
             Preconditions.checkNotNull(getKgSecretKey(), "kg secret key is null!");
 
-            if (null == getKE_PID()) {
+            if (null == getKePid()) {
                 setKEPid(ToolUtil.getKylinPid());
             }
-            byte[] encryptedToken = SecretKeyUtil.generateEncryptedTokenWithPid(getKgSecretKey(), getKE_PID());
+            byte[] encryptedToken = SecretKeyUtil.generateEncryptedTokenWithPid(getKgSecretKey(), getKePid());
             getRestClient().downOrUpGradeKE(opLevelEnum.getOpType(), encryptedToken);
         } catch (Exception e) {
             logger.error("Failed to operate service {}", opLevelEnum.getOpType(), e);

File: src/tool/src/test/java/org/apache/kylin/tool/security/KylinPasswordResetCLITest.java
Patch:
@@ -68,6 +68,7 @@ public void testResetAdminPassword() throws Exception {
         overwriteSystemProp("kylin.metadata.random-admin-password.enabled", "true");
         val pwdEncoder = new BCryptPasswordEncoder();
         overwriteSystemProp("kylin.security.user-password-encoder", pwdEncoder.getClass().getName());
+        overwriteSystemProp("kylin.metadata.random-admin-password.enabled", "true");
         val user = new ManagedUser("ADMIN", "KYLIN", true, Constant.ROLE_ADMIN, Constant.GROUP_ALL_USERS);
         user.setPassword(pwdEncoder.encode(user.getPassword()));
         val config = KylinConfig.getInstanceFromEnv();

File: src/tool/src/test/java/org/apache/kylin/tool/upgrade/UpdateUserAclToolTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
+import org.apache.kylin.helper.UpdateUserAclToolHelper;
 import org.apache.kylin.rest.security.AclManager;
 import org.apache.kylin.rest.security.AclPermission;
 import org.apache.kylin.rest.security.UserAclManager;
@@ -56,7 +57,7 @@ public void testUpgrade() {
         Mockito.when(tool.matchUpgradeCondition(args)).thenReturn(true);
         tool.execute(args);
         Assert.assertTrue(tool.isAdminUserUpgraded());
-        Assert.assertTrue(tool.isUpgraded());
+        Assert.assertTrue(UpdateUserAclToolHelper.getInstance().isUpgraded());
         val userAclManager = UserAclManager.getInstance(getTestConfig());
         Assert.assertTrue(userAclManager.get("admin_user").hasPermission(AclPermission.DATA_QUERY.getMask()));
         val aclManager = createAclManager(tool);
@@ -96,7 +97,7 @@ public void testUnknownProfileUpgrade() {
     public void testUpdateUserAcl() {
         getTestConfig().setProperty("kylin.security.profile", "custom");
         tool.execute(new String[] { "-f", "-s=migrate", "-v=4.5.10", "-h=." });
-        Assert.assertTrue(tool.isUpgraded());
+        Assert.assertTrue(UpdateUserAclToolHelper.getInstance().isUpgraded());
     }
 
     @Test

File: src/common-service/src/main/java/org/apache/kylin/rest/service/UserAclService.java
Patch:
@@ -39,6 +39,7 @@
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.persistence.transaction.UnitOfWork;
 import org.apache.kylin.common.util.CaseInsensitiveStringSet;
+import org.apache.kylin.constants.AclConstants;
 import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.rest.aspect.Transaction;
 import org.apache.kylin.rest.constant.Constant;
@@ -97,7 +98,7 @@ public boolean hasUserAclPermissionInProject(String sid, String project) {
     }
 
     private void checkAclPermission(String sid, String permissionType) {
-        Preconditions.checkArgument(ExternalAclProvider.DATA_QUERY.equalsIgnoreCase(permissionType),
+        Preconditions.checkArgument(AclConstants.DATA_QUERY.equalsIgnoreCase(permissionType),
                 "unknown PermissionType " + permissionType);
         if (isSuperAdmin(sid)) {
             throw new KylinException(PERMISSION_DENIED, MsgPicker.getMsg().getModifyPermissionOfSuperAdminFailed());

File: src/core-common/src/main/java/org/apache/kylin/query/util/QueryLimiter.java
Patch:
@@ -82,7 +82,7 @@ public static void tryAcquire() {
     }
 
     public static void release() {
-        if (!downgradeState.get()) {
+        if (Boolean.FALSE.equals(downgradeState.get())) {
             return;
         }
 

File: src/core-common/src/main/java/org/apache/kylin/rest/exception/UnauthorizedException.java
Patch:
@@ -20,10 +20,7 @@
 
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.exception.code.ErrorCodeProducer;
-import org.springframework.http.HttpStatus;
-import org.springframework.web.bind.annotation.ResponseStatus;
 
-@ResponseStatus(value = HttpStatus.UNAUTHORIZED)
 public class UnauthorizedException extends KylinException {
 
     public UnauthorizedException(ErrorCodeProducer errorCodeProducer, Object... args) {

File: src/core-metadata/src/main/java/org/apache/kylin/rest/security/AclRecord.java
Patch:
@@ -132,7 +132,7 @@ public void setEntriesInheriting(boolean entriesInheriting) {
         this.entriesInheriting = entriesInheriting;
     }
 
-    public ObjectIdentityImpl getDomainObjectInfo() {
+    public final ObjectIdentityImpl getDomainObjectInfo() {
         return domainObjectInfo;
     }
 
@@ -161,7 +161,7 @@ public void setAllAceInfo(Map<String, LegacyAceInfo> allAceInfo) {
 
     @Override
     public ObjectIdentity getObjectIdentity() {
-        return domainObjectInfo;
+        return getDomainObjectInfo();
     }
 
     @Override
@@ -190,7 +190,7 @@ public void setParent(Acl newParent) {
 
     @Override
     public List<AccessControlEntry> getEntries() {
-        return new ArrayList<AccessControlEntry>(entries);
+        return Collections.unmodifiableList(entries);
     }
 
     public AccessControlEntry getAccessControlEntryAt(int entryIndex) {

File: src/core-metadata/src/main/java/org/apache/kylin/rest/security/MutableAclRecord.java
Patch:
@@ -50,7 +50,7 @@ public AclRecord getAclRecord() {
 
     @Override
     public Serializable getId() {
-        return acl.getDomainObjectInfo().getIdentifier();
+        return acl.getObjectIdentity().getIdentifier();
     }
 
     @Override

File: src/core-metadata/src/main/java/org/apache/kylin/rest/security/SidInfo.java
Patch:
@@ -24,6 +24,7 @@
 
 import com.fasterxml.jackson.annotation.JsonAutoDetect;
 import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 /**
@@ -35,8 +36,8 @@ public class SidInfo {
     private String sid;
     @JsonProperty("principal")
     private boolean isPrincipal;
-
-    private transient Sid sidObj;
+    @JsonIgnore
+    private Sid sidObj;
 
     // for Jackson
     public SidInfo() {

File: src/core-metadata/src/main/java/org/apache/kylin/rest/util/CreateTableFromJson.java
Patch:
@@ -56,7 +56,7 @@ public static void main(String[] args) throws IOException {
 
         map.forEach((k, v) -> {
             logger.info(k);
-            v.forEach(item -> logger.info(item));
+            v.forEach(logger::info);
         });
 
         logger.info("\n\n\n\n\n");

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/SampleController.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.kylin.rest.service.ModelBuildSupporter;
 import org.apache.kylin.rest.service.TableSamplingService;
 import org.apache.kylin.rest.service.TableService;
+import org.apache.kylin.util.DataRangeUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Controller;
@@ -76,7 +77,7 @@ public EnvelopeResponse<String> refreshSegments(@RequestBody RefreshSegmentsRequ
         checkRequiredArg("refresh end", request.getRefreshEnd());
         checkRequiredArg("affected start", request.getAffectedStart());
         checkRequiredArg("affected end", request.getAffectedEnd());
-        validateRange(request.getRefreshStart(), request.getRefreshEnd());
+        DataRangeUtils.validateRange(request.getRefreshStart(), request.getRefreshEnd());
         modelBuildService.refreshSegments(request.getProject(), request.getTable(), request.getRefreshStart(),
                 request.getRefreshEnd(), request.getAffectedStart(), request.getAffectedEnd());
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, "", "");

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/open/OpenSegmentController.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.kylin.rest.service.FusionModelService;
 import org.apache.kylin.rest.service.ModelService;
 import org.apache.kylin.rest.util.AclEvaluate;
+import org.apache.kylin.util.DataRangeUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.DeleteMapping;
@@ -241,7 +242,7 @@ public EnvelopeResponse<CheckSegmentResponse> checkSegments(@PathVariable("model
         aclEvaluate.checkProjectOperationPermission(request.getProject());
         checkRequiredArg("start", request.getStart());
         checkRequiredArg("end", request.getEnd());
-        validateDataRange(request.getStart(), request.getEnd());
+        DataRangeUtils.validateDataRange(request.getStart(), request.getEnd());
         NDataModel model = getModel(modelAlias, projectName);
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, modelService.checkSegments(request.getProject(),
                 model.getAlias(), request.getStart(), request.getEnd()), "");

File: src/data-loading-server/src/main/java/org/apache/kylin/rest/controller/v2/SegmentControllerV2.java
Patch:
@@ -56,6 +56,7 @@
 import org.apache.kylin.rest.service.ModelService;
 import org.apache.kylin.rest.service.params.MergeSegmentParams;
 import org.apache.kylin.rest.service.params.RefreshSegmentParams;
+import org.apache.kylin.util.DataRangeUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -142,7 +143,7 @@ public EnvelopeResponse rebuild(@PathVariable("cubeName") String modelAlias,
         }
         String partitionColumnFormat = modelService.getPartitionColumnFormatByAlias(dataModelResponse.getProject(),
                 modelAlias);
-        validateDataRange(startTime, endTime, partitionColumnFormat);
+        DataRangeUtils.validateDataRange(startTime, endTime, partitionColumnFormat);
         JobInfoResponseV2 result = null;
         switch (request.getBuildType()) {
         case "BUILD":

File: src/metadata-server/src/main/java/io/kyligence/kap/rest/controller/open/OpenModelController.java
Patch:
@@ -76,6 +76,7 @@
 import org.apache.kylin.rest.util.AclPermissionUtil;
 import org.apache.kylin.tool.bisync.SyncContext;
 import org.apache.kylin.tool.bisync.model.SyncModel;
+import org.apache.kylin.util.DataRangeUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Controller;
@@ -312,7 +313,7 @@ public EnvelopeResponse<String> updatePartitionDesc(@PathVariable("project") Str
                     modelParatitionDescRequest.getPartitionDesc().getPartitionDateFormat());
             partitionDateFormat = modelParatitionDescRequest.getPartitionDesc().getPartitionDateFormat();
         }
-        validateDataRange(modelParatitionDescRequest.getStart(), modelParatitionDescRequest.getEnd(),
+        DataRangeUtils.validateDataRange(modelParatitionDescRequest.getStart(), modelParatitionDescRequest.getEnd(),
                 partitionDateFormat);
         val dataModel = getModel(modelAlias, projectName);
         modelService.updateModelPartitionColumn(projectName, dataModel.getAlias(), modelParatitionDescRequest);
@@ -478,7 +479,7 @@ public EnvelopeResponse<BuildBaseIndexResponse> updateSemantic(@RequestBody Open
         request.setManagementType(model.getManagementType());
         request.setCanvas(model.getCanvas());
         String partitionColumnFormat = modelService.getPartitionColumnFormatById(request.getProject(), request.getId());
-        validateDataRange(request.getStart(), request.getEnd(), partitionColumnFormat);
+        DataRangeUtils.validateDataRange(request.getStart(), request.getEnd(), partitionColumnFormat);
         modelService.validatePartitionDesc(request.getPartitionDesc());
         checkRequiredArg(MODEL_ID, request.getUuid());
         try {

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NModelController.java
Patch:
@@ -77,6 +77,7 @@
 import org.apache.kylin.rest.service.ModelTdsService;
 import org.apache.kylin.tool.bisync.SyncContext;
 import org.apache.kylin.tool.bisync.model.SyncModel;
+import org.apache.kylin.util.DataRangeUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Controller;
@@ -191,7 +192,7 @@ public EnvelopeResponse<BuildBaseIndexResponse> createModel(@RequestBody ModelRe
         modelService.validatePartitionDesc(modelRequest.getPartitionDesc());
         String partitionDateFormat = modelRequest.getPartitionDesc() == null ? null
                 : modelRequest.getPartitionDesc().getPartitionDateFormat();
-        validateDataRange(modelRequest.getStart(), modelRequest.getEnd(), partitionDateFormat);
+        DataRangeUtils.validateDataRange(modelRequest.getStart(), modelRequest.getEnd(), partitionDateFormat);
         try {
             NDataModel model = modelService.createModel(modelRequest.getProject(), modelRequest);
             return new EnvelopeResponse<>(KylinException.CODE_SUCCESS,
@@ -437,7 +438,7 @@ public EnvelopeResponse<InvalidIndexesResponse> detectInvalidIndexes(@RequestBod
     public EnvelopeResponse<BuildBaseIndexResponse> updateSemantic(@RequestBody ModelRequest request) {
         checkProjectName(request.getProject());
         String partitionColumnFormat = modelService.getPartitionColumnFormatById(request.getProject(), request.getId());
-        validateDataRange(request.getStart(), request.getEnd(), partitionColumnFormat);
+        DataRangeUtils.validateDataRange(request.getStart(), request.getEnd(), partitionColumnFormat);
         modelService.validatePartitionDesc(request.getPartitionDesc());
         checkRequiredArg(MODEL_ID, request.getUuid());
         try {

File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/v2/NProjectControllerKylin.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.rest.controller.NBasicController;
 import org.apache.kylin.rest.service.ProjectService;
+import org.apache.kylin.rest.util.PagingUtil;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Controller;
@@ -51,7 +52,7 @@ public List<ProjectInstance> getProjectsNoEnvelopeResponse(
             @RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer size,
             @RequestParam(value = "exact", required = false, defaultValue = "true") boolean exactMatch) {
         List<ProjectInstance> readableProjects = projectService.getReadableProjects(project, exactMatch);
-        return (List<ProjectInstance>) getDataNoEnvelopeResponse(readableProjects, offset, size);
+        return PagingUtil.cutPage(readableProjects, offset, size);
     }
 
 }

File: src/query-server/src/main/java/org/apache/kylin/rest/controller/NQueryController.java
Patch:
@@ -77,6 +77,7 @@
 import org.apache.kylin.rest.response.ServerInfoResponse;
 import org.apache.kylin.rest.service.QueryCacheManager;
 import org.apache.kylin.rest.service.QueryHistoryService;
+import org.apache.kylin.util.DataRangeUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -381,7 +382,7 @@ public EnvelopeResponse<Map<String, Object>> getQueryHistories(@RequestParam(val
             @RequestParam(value = "page_size", required = false, defaultValue = "10") Integer size) {
         checkProjectName(project);
         QueryHistoryRequest request = new QueryHistoryRequest(project, startTimeFrom, startTimeTo);
-        validateDataRange(startTimeFrom, startTimeTo, null);
+        DataRangeUtils.validateDataRange(startTimeFrom, startTimeTo, null);
         Map<String, Object> queryHistories = QueryHisTransformStandardUtil.transformQueryHistory(
                 queryHistoryService.getQueryHistories(request, size, offset));
         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, queryHistories, "");

File: src/tool/src/main/java/org/apache/kylin/tool/upgrade/UpdateUserAclTool.java
Patch:
@@ -305,7 +305,7 @@ public void updateProjectAcl(String operation) {
                                 AclPermissionUtil.convertToBasePermission(ace.getPermission()));
                     }
                 });
-                val mutableAclRecord = aclManager.readAcl(aclRecord.getDomainObjectInfo());
+                val mutableAclRecord = aclManager.readAcl(aclRecord.getObjectIdentity());
                 aclManager.batchUpsertAce(mutableAclRecord, sidPermissionMap);
                 log.info("{} query permission for _global/acl/{} successfully.", StringUtils.capitalize(operation),
                         aclRecord.getUuid());
@@ -378,4 +378,4 @@ public int compareVersion(String version1, String version2) {
         }
         return 0;
     }
-}
+}
\ No newline at end of file

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/jdbc/JdbcUtil.java
Patch:
@@ -131,7 +131,7 @@ private static boolean isPrimaryKeyExists(Connection conn, String... tables) thr
                         return true;
                     }
                 } catch (Exception e) {
-                    log.warn("get primary key from table {} failed", table, e);
+                    logger.warn("get primary key from table {} failed", table, e);
                 }
             }
         } finally {

File: src/core-job/src/main/java/org/apache/kylin/job/common/SegmentBuildJobUtil.java
Patch:
@@ -32,7 +32,7 @@
 import lombok.extern.slf4j.Slf4j;
 
 /**
- *
+ * This is used for computing and setting the parameters for spark building segment job.
  **/
 @Slf4j
 public class SegmentBuildJobUtil extends ExecutableUtil {

File: src/core-job/src/main/java/org/apache/kylin/job/constant/ExecutableConstants.java
Patch:
@@ -79,6 +79,7 @@ private ExecutableConstants() {
     public static final String STAGE_NAME_MATERIALIZED_FACT_TABLE = "Materialize fact table view";
     public static final String STAGE_NAME_BUILD_DICT = "Generate global dictionary";
     public static final String STAGE_NAME_GENERATE_FLAT_TABLE = "Generate flat table";
+    public static final String STAGE_NAME_COST_BASED_PLANNER = "Cost based planner";
     public static final String STAGE_NAME_GATHER_FLAT_TABLE_STATS = "Get flat table statistics";
     public static final String STAGE_NAME_BUILD_LAYER = "Build indexes by layer";
     public static final String STAGE_NAME_REFRESH_COLUMN_BYTES = "Update flat table statistics";

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NBatchConstants.java
Patch:
@@ -23,6 +23,7 @@ public interface NBatchConstants {
     String P_SEGMENT_IDS = "segmentIds";
     String P_JOB_ID = "jobId";
     String P_JOB_TYPE = "jobType";
+    String P_JOB_ENABLE_PLANNER = "enablePlanner";
     String P_LAYOUT_IDS = "layoutIds";
     String P_TO_BE_DELETED_LAYOUT_IDS = "toBeDeletedLayoutIds";
     String P_CLASS_NAME = "className";

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataSegment.java
Patch:
@@ -723,7 +723,7 @@ public boolean equals(Object obj) {
 
     @Override
     public String toString() {
-        return "NDataSegment [" + dataflow.getUuid() + "," + id + "," + segmentRange + "]";
+        return "NDataSegment [" + dataflow.getUuid() + "," + id + "," + segmentRange + "," + status + "]";
     }
 
     public String displayIdName() {

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/merger/AfterBuildResourceMerger.java
Patch:
@@ -110,7 +110,6 @@ public NDataLayout[] mergeAfterIncrement(String flowName, String segmentId, Set<
         dfUpdate.setToUpdateSegs(theSeg);
         dfUpdate.setToRemoveSegs(toRemoveSegments.toArray(new NDataSegment[toRemoveSegments.size()]));
         dfUpdate.setToAddOrUpdateLayouts(theSeg.getSegDetails().getLayouts().toArray(new NDataLayout[0]));
-
         localDataflowManager.updateDataflow(dfUpdate);
         updateIndexPlan(flowName, remoteStore);
         return dfUpdate.getToAddOrUpdateLayouts();

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildJob.java
Patch:
@@ -65,6 +65,6 @@ protected String generateInfo() {
 
     private void writeCountDistinct() {
         ResourceDetectUtils.write(new Path(rdSharedPath, ResourceDetectUtils.countDistinctSuffix()), //
-                ResourceDetectUtils.findCountDistinctMeasure(readOnlyLayouts));
+                ResourceDetectUtils.findCountDistinctMeasure(getReadOnlyLayouts()));
     }
 }

File: src/common-service/src/main/java/org/apache/kylin/rest/interceptor/V2ApiFilter.java
Patch:
@@ -67,7 +67,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                     HandlerMapping handlerMapping = this.getRequestMappingHandlerMapping(servletRequest);
                     if (handlerMapping != null) {
                         HandlerExecutionChain handler = handlerMapping.getHandler((HttpServletRequest) request);
-                        if (handler == null || handler.getHandler() == null) {
+                        if (handler == null) {
                             throw new NotFoundException(
                                     String.format(Locale.ROOT, "%s API of version v2 is no longer supported", uri));
                         }

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java
Patch:
@@ -71,7 +71,6 @@
 import org.apache.kylin.metadata.project.EnhancedUnitOfWork;
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.plugin.asyncprofiler.BuildAsyncProfilerSparkPlugin;
-import org.apache.parquet.Strings;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/tool/src/main/java/org/apache/kylin/tool/KylinConfigCheckCLI.java
Patch:
@@ -33,6 +33,7 @@ public class KylinConfigCheckCLI {
     private static final String SPRING_CONFIG_PREFIX = "spring.";
     private static final String KYLIN_CONFIG_PREFIX = "kylin.";
     private static final String ARTHAS_CONFIG_PREFIX = "arthas.";
+    private static final String MANAGEMENT_CONFIG_PREFIX = "management.";
     /**
      * Not recommended set the configuration items at the beginning with kap
      */
@@ -49,7 +50,8 @@ public static void execute() {
             if (!StringUtils.startsWith(key, KYLIN_CONFIG_PREFIX) && !StringUtils.startsWith(key, SERVER_CONFIG_PREFIX)
                     && !StringUtils.startsWith(key, SPRING_CONFIG_PREFIX)
                     && !StringUtils.startsWith(key, KAP_CONFIG_PREFIX)
-                    && !StringUtils.startsWith(key, ARTHAS_CONFIG_PREFIX)) {
+                    && !StringUtils.startsWith(key, ARTHAS_CONFIG_PREFIX)
+                    && !StringUtils.startsWith(key, MANAGEMENT_CONFIG_PREFIX)) {
                 System.out.println(key);
                 break;
             }

File: src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java
Patch:
@@ -79,6 +79,9 @@ protected QueryContext initialValue() {
     private int shufflePartitions;
     @Getter
     @Setter
+    private int shufflePartitionsReset;
+    @Getter
+    @Setter
     // Spark execution ID
     private String executionID = "";
     @Getter

File: src/core-job/src/main/java/org/apache/kylin/job/execution/NExecutableManager.java
Patch:
@@ -1401,7 +1401,6 @@ private void interruptJob(AbstractExecutable executable) {
         if (thread != null) {
             logger.info("Interrupt Job [{}] thread and remove in ExecutableContext", executable.getDisplayName());
             thread.interrupt();
-            scheduler.getContext().removeRunningJob(executable);
         }
     }
 

File: src/core-job/src/main/java/org/apache/kylin/job/runners/JobRunner.java
Patch:
@@ -50,6 +50,7 @@ protected void doRun() {
         val jobIdSimple = executable.getId().substring(0, 8);
         try (SetThreadName ignored = new SetThreadName("JobWorker(project:%s,jobid:%s)", project, jobIdSimple);
                 SetLogCategory logCategory = new SetLogCategory("schedule")) {
+            context.addRunningJob(executable);
             executable.execute(context);
             // trigger the next step asap
             fetcherRunner.scheduleNext();

File: src/core-job/src/test/java/org/apache/kylin/job/execution/NExecutableManagerTest.java
Patch:
@@ -907,7 +907,7 @@ public void testCancelTaskAnfInterruptJobThread() {
         val env = getTestConfig().getDeployEnv();
         getTestConfig().setProperty("kylin.env", "PROD");
         manager.cancelJob(NExecutableManager.toPO(job, DEFAULT_PROJECT), job.getId());
-        Assertions.assertNull(scheduler.getContext().getRunningJobThread(job));
+        Assertions.assertNotNull(scheduler.getContext().getRunningJobThread(job));
         getTestConfig().setProperty("kylin.env", env);
         scheduler.shutdown();
     }

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java
Patch:
@@ -405,7 +405,8 @@ public SparkAppDescription getSparkAppDesc() {
         return desc;
     }
 
-    protected ExecuteResult runSparkSubmit(String hadoopConfDir, String kylinJobJar, String appArgs) {
+    protected ExecuteResult runSparkSubmit(String hadoopConfDir, String kylinJobJar, String appArgs)
+            throws JobStoppedException {
         sparkJobHandler.killOrphanApplicationIfExists(project, getId(), getConfig(), true, getSparkConf());
         try {
             Object cmd;
@@ -432,6 +433,7 @@ protected ExecuteResult runSparkSubmit(String hadoopConfDir, String kylinJobJar,
             }
             return ExecuteResult.createSucceed(output);
         } catch (Exception e) {
+            checkNeedQuit(true);
             logger.warn("failed to execute spark submit command.");
             wrapWithExecuteExceptionUpdateJobError(e);
             return ExecuteResult.createError(e);

File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NAdminController.java
Patch:
@@ -75,6 +75,7 @@ public EnvelopeResponse<String> getPublicConfig() throws IOException {
         propertyKeys.add("kylin.model.measure-name-check-enabled");
         propertyKeys.add("kylin.security.remove-ldap-custom-security-limit-enabled");
         propertyKeys.add("kylin.source.ddl.enabled");
+        propertyKeys.add("kylin.storage.check-quota-enabled");
 
         // add second storage
         if (StringUtils.isNotEmpty(KylinConfig.getInstanceFromEnv().getSecondStorage())) {

File: src/core-job/src/main/java/org/apache/kylin/job/impl/threadpool/NDefaultScheduler.java
Patch:
@@ -179,7 +179,7 @@ public synchronized void init(JobEngineConfig jobEngineConfig) {
         logger.info("Fetching jobs every {} seconds", pollSecond);
         val fetcher = new FetcherRunner(this, jobPool, fetcherPool);
 
-        if (config.isCheckQuotaStorageEnabled()) {
+        if (config.isStorageQuotaEnabled()) {
             fetcherPool.scheduleWithFixedDelay(new QuotaStorageCheckRunner(this), RandomUtils.nextInt(0, pollSecond),
                     pollSecond, TimeUnit.SECONDS);
         }

File: src/core-job/src/test/java/org/apache/kylin/job/impl/threadpool/NDefaultSchedulerTest.java
Patch:
@@ -111,7 +111,7 @@ public NDefaultSchedulerTest() {
     public void setup() throws Exception {
         overwriteSystemProp("kylin.job.auto-set-concurrent-jobs", "true");
         overwriteSystemProp("kylin.env", "UT");
-        overwriteSystemProp("kylin.job.check-quota-storage-enabled", "true");
+        overwriteSystemProp("kylin.storage.check-quota-enabled", "true");
         super.setup();
     }
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/storage/GarbageStorageCollector.java
Patch:
@@ -42,7 +42,7 @@
 public class GarbageStorageCollector implements StorageInfoCollector {
 
     @Override
-    public void collect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) {
+    public void doCollect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) {
         Map<String, Set<Long>> garbageIndexMap = Maps.newHashMap();
         long storageSize = 0L;
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/storage/StorageQuotaCollector.java
Patch:
@@ -26,7 +26,7 @@
 public class StorageQuotaCollector implements StorageInfoCollector {
 
     @Override
-    public void collect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) {
+    public void doCollect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) {
         config = NProjectManager.getInstance(config).getProject(project).getConfig();
         long quotaSize = config.getStorageQuotaSize();
         storageVolumeInfo.setStorageQuotaSize(quotaSize);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/storage/TotalStorageCollector.java
Patch:
@@ -31,7 +31,7 @@
 public class TotalStorageCollector implements StorageInfoCollector {
 
     @Override
-    public void collect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) throws IOException {
+    public void doCollect(KylinConfig config, String project, StorageVolumeInfo storageVolumeInfo) throws IOException {
         long totalStorageSize = HdfsCapacityMetrics.getHdfsCapacityByProject(project);
         if (totalStorageSize != -1L) {
             log.info("Reuse workingDirCapacity by project {}, storageSize: {}", project, totalStorageSize);

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ProjectServiceTest.java
Patch:
@@ -304,6 +304,7 @@ public void testUpdateStorageQuotaConfig() {
 
     @Test
     public void testGetStorageVolumeInfoResponse() {
+        overwriteSystemProp("kylin.storage.check-quota-enabled", "true");
         getTestConfig().setProperty("kylin.metadata.semi-automatic-mode", "true");
         prepareLayoutHitCount();
         String error = "do not use aclEvalute in getStorageVolumeInfoResponse, because backend thread would invoke this method in (BootstrapCommand.class)";

File: src/common-service/src/test/java/org/apache/kylin/rest/cache/KylinEhCacheTest.java
Patch:
@@ -47,14 +47,15 @@ public void testErrorCacheConfig() throws IllegalAccessException {
         overwriteSystemProp("kylin.cache.config", "file://" + url + "not-exists-ehcache.xml");
         KylinCache cache = KylinEhCache.getInstance();
         CacheManager cacheManager = (CacheManager) FieldUtils.getFieldValue(cache, "cacheManager");
-        Assert.assertEquals("DefaultCacheName", cacheManager.getName());
+        Assert.assertEquals("DEFAULT_CACHE", cacheManager.getName());
         cacheManager.shutdown();
     }
 
     @Test
     public void testRightCacheConfig() throws IllegalAccessException {
         String url = Thread.currentThread().getContextClassLoader().getResource("").getPath();
-        overwriteSystemProp("kylin.cache.config", "file://" + url + "user-defined-ehcache.xml");
+        String location = "file://" + url + "user-defined-ehcache.xml";
+        overwriteSystemProp("kylin.cache.config", location);
         KylinCache cache = KylinEhCache.getInstance();
         CacheManager cacheManager = (CacheManager) FieldUtils.getFieldValue(cache, "cacheManager");
         Assert.assertEquals("UserDefinedCache", cacheManager.getName());

File: src/core-job/src/main/java/org/apache/kylin/job/execution/AbstractExecutable.java
Patch:
@@ -50,6 +50,7 @@
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
 
+import io.kyligence.kap.guava20.shaded.common.base.Throwables;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang3.ArrayUtils;
@@ -88,7 +89,6 @@
 
 import io.kyligence.kap.guava20.shaded.common.annotations.VisibleForTesting;
 import io.kyligence.kap.guava20.shaded.common.base.MoreObjects;
-import io.kyligence.kap.shaded.curator.org.apache.curator.shaded.com.google.common.base.Throwables;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.val;
@@ -264,7 +264,7 @@ protected void wrapWithCheckQuit(Callback f) throws JobStoppedException {
                 }, project, UnitOfWork.DEFAULT_MAX_RETRY, getEpochId(), getTempLockName());
             } catch (Exception e) {
                 if (Throwables.getCausalChain(e).stream().anyMatch(x -> x instanceof JobStoppedException)) {
-                    // "in this short period user might changed job state" happens
+                    // "in this short period user might change job state" happens
                     logger.info("[LESS_LIKELY_THINGS_HAPPENED] JobStoppedException thrown from in a UnitOfWork", e);
                     tryAgain = true;
                 } else {

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/storage/ProjectStorageInfoCollector.java
Patch:
@@ -31,14 +31,14 @@ public class ProjectStorageInfoCollector {
 
     private List<StorageInfoCollector> collectors = Lists.newArrayList();
 
-    private static final ImmutableMap<Class, StorageInfoEnum> collectorType = ImmutableMap
-            .<Class, StorageInfoEnum> builder().put(GarbageStorageCollector.class, StorageInfoEnum.GARBAGE_STORAGE)
+    private static final ImmutableMap<Class<?>, StorageInfoEnum> collectorType = ImmutableMap
+            .<Class<?>, StorageInfoEnum> builder().put(GarbageStorageCollector.class, StorageInfoEnum.GARBAGE_STORAGE)
             .put(TotalStorageCollector.class, StorageInfoEnum.TOTAL_STORAGE)
             .put(StorageQuotaCollector.class, StorageInfoEnum.STORAGE_QUOTA).build();
 
     public ProjectStorageInfoCollector(List<StorageInfoEnum> storageInfoList) {
         if (CollectionUtils.isNotEmpty(storageInfoList)) {
-            storageInfoList.forEach(si -> addCollectors(si));
+            storageInfoList.forEach(this::addCollectors);
         }
     }
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/query/QueryTimesResponse.java
Patch:
@@ -18,15 +18,12 @@
 
 package org.apache.kylin.metadata.query;
 
-import io.kyligence.kap.shaded.influxdb.org.influxdb.annotation.Column;
 import lombok.Data;
 
 @Data
 public class QueryTimesResponse {
 
-    @Column(name = "model")
     private String model;
-    @Column(name = "query_times")
     private int queryTimes;
 
 }

File: src/kylin-it/src/test/java/org/apache/kylin/newten/CalciteDynamicTest.java
Patch:
@@ -30,7 +30,6 @@
 import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;
 import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;
 import org.apache.kylin.util.ExecAndComp;
-import org.apache.parquet.Strings;
 import org.apache.spark.sql.Row;
 import org.apache.spark.sql.SparderEnv;
 import org.junit.After;
@@ -68,8 +67,8 @@ public void testCalciteGroupByDynamicParam() throws Exception {
         List<List<String>> results = transformToString(rows);
         for (int i = 0; i < benchmark.size(); i++) {
             if (!ListUtils.isEqualList(benchmark.get(i), results.get(i))) {
-                String expected = Strings.join(benchmark.get(i), ",");
-                String actual1 = Strings.join(results.get(i), ",");
+                String expected = String.join(",", benchmark.get(i));
+                String actual1 = String.join(",", results.get(i));
                 fail("expected: " + expected + ", results: " + actual1);
             }
         }

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NBuildAndQuerySnapshotTest.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.query.engine.QueryExec;
 import org.apache.kylin.util.ExecAndComp;
-import org.apache.parquet.Strings;
 import org.apache.spark.sql.Dataset;
 import org.apache.spark.sql.SparderEnv;
 import org.junit.Assert;
@@ -140,8 +139,8 @@ public void testQueryPartitionSnapshot() throws Exception {
     }
 
     private void setPartitions(NSparkSnapshotJob job, Set<String> partitions) {
-        job.setParam("partitions", Strings.join(partitions, ","));
-        job.getSnapshotBuildingStep().setParam("partitions", Strings.join(partitions, ","));
+        job.setParam("partitions", String.join(",", partitions));
+        job.getSnapshotBuildingStep().setParam("partitions", String.join(",", partitions));
     }
 
 }

File: src/query-service/src/main/java/org/apache/kylin/rest/health/SparkContextHealthIndicator.java
Patch:
@@ -20,10 +20,11 @@
 
 import org.apache.spark.sql.SparderEnv;
 import org.springframework.boot.actuate.health.Health;
+import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.stereotype.Component;
 
 @Component
-public class SparkContextHealthIndicator extends AbstractKylinHealthIndicator {
+public class SparkContextHealthIndicator implements HealthIndicator {
 
     @Override
     public Health health() {

File: src/query-service/src/main/java/org/apache/kylin/rest/health/SparkSqlContextHealthIndicator.java
Patch:
@@ -19,10 +19,11 @@
 
 import org.apache.kylin.rest.monitor.SparkContextCanary;
 import org.springframework.boot.actuate.health.Health;
+import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.stereotype.Component;
 
 @Component
-public class SparkSqlContextHealthIndicator extends AbstractKylinHealthIndicator {
+public class SparkSqlContextHealthIndicator implements HealthIndicator {
 
     @Override
     public Health health() {

File: src/query-service/src/test/java/org/apache/kylin/rest/service/AysncQueryServiceTest.java
Patch:
@@ -64,7 +64,6 @@
 import org.apache.kylin.query.pushdown.SparkSqlClient;
 import org.apache.kylin.query.util.AsyncQueryUtil;
 import org.apache.kylin.rest.response.SQLResponse;
-import org.apache.parquet.Strings;
 import org.apache.poi.ss.usermodel.CellType;
 import org.apache.poi.xssf.usermodel.XSSFCell;
 import org.apache.poi.xssf.usermodel.XSSFRow;
@@ -984,7 +983,7 @@ public void mockMetadata(String queryId, boolean needMeta) throws IOException {
         try (FSDataOutputStream os = fileSystem
                 .create(new Path(asyncQueryResultDir, AsyncQueryUtil.getMetaDataFileName())); //
              OutputStreamWriter osw = new OutputStreamWriter(os, StandardCharsets.UTF_8)) { //
-            String metaString = Strings.join(columnNames, ",") + "\n" + Strings.join(dataTypes, ",");
+            String metaString = String.join(",", columnNames) + "\n" + String.join(",", dataTypes);
             osw.write(metaString);
             if (needMeta) {
                 fileSystem.createNewFile(new Path(asyncQueryResultDir, AsyncQueryUtil.getMetaDataFileName()));

File: src/second-storage/core/src/test/java/io/kyligence/kap/secondstorage/metadata/NodeGroupTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package io.kyligence.kap.secondstorage.metadata;
 
-import io.kyligence.kap.shaded.curator.org.apache.curator.shaded.com.google.common.collect.Lists;
+import com.google.common.collect.Lists;
 import org.junit.Assert;
 import org.junit.Test;
 

File: src/server/src/main/java/org/apache/kylin/rest/health/FileSystemHealthIndicator.java
Patch:
@@ -32,15 +32,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.actuate.health.Health;
+import org.springframework.boot.actuate.health.HealthIndicator;
 import org.springframework.context.ApplicationListener;
 import org.springframework.stereotype.Component;
 
 import com.google.common.annotations.VisibleForTesting;
 
 @Component
-public class FileSystemHealthIndicator extends AbstractKylinHealthIndicator
-        implements ApplicationListener<AfterMetadataReadyEvent> {
-    public static final Logger logger = LoggerFactory.getLogger(FileSystemHealthIndicator.class);
+public class FileSystemHealthIndicator implements HealthIndicator, ApplicationListener<AfterMetadataReadyEvent> {
+    private static final Logger logger = LoggerFactory.getLogger(FileSystemHealthIndicator.class);
     private static final ScheduledExecutorService FILE_SYSTEM_HEALTH_EXECUTOR = Executors.newScheduledThreadPool(1,
             new NamedThreadFactory("FileSystemHealthChecker"));
     private volatile boolean isHealth = false;

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.kylin.common.KapConfig;
@@ -367,7 +367,7 @@ protected KylinConfig getConfig() {
         if (getParent() != null) {
             String yarnQueue = getParent().getSparkYarnQueue();
             // TODO double check if valid yarn queue
-            if (!Strings.isNullOrEmpty(yarnQueue)) {
+            if (!StringUtils.isEmpty(yarnQueue)) {
                 jobOverrides.put("kylin.engine.spark-conf." + SPARK_YARN_QUEUE, yarnQueue);
             }
         }

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/job/NSparkSnapshotJobTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;
 import org.apache.kylin.metadata.model.NTableMetadataManager;
 import org.apache.kylin.metadata.model.TableDesc;
-import org.apache.parquet.Strings;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -213,8 +212,8 @@ private FileStatus[] list(String path) {
     }
 
     private void setPartitions(NSparkSnapshotJob job, Set<String> partitions) {
-        job.setParam("partitions", Strings.join(partitions, ","));
-        job.getSnapshotBuildingStep().setParam("partitions", Strings.join(partitions, ","));
+        job.setParam("partitions", String.join(",", partitions));
+        job.getSnapshotBuildingStep().setParam("partitions", String.join(",", partitions));
     }
 
     @Test

File: src/systools/src/main/java/org/apache/kylin/rest/security/KerberosLoginManager.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.stream.Collectors;
 
+import com.google.common.annotations.VisibleForTesting;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.kylin.common.KapConfig;
@@ -117,7 +118,8 @@ public void checkAndReplaceProjectKerberosInfo(String project, String principal)
         }
     }
 
-    private boolean checkExistsTablesAccess(UserGroupInformation ugi, String project) {
+    @VisibleForTesting
+    boolean checkExistsTablesAccess(UserGroupInformation ugi, String project) {
         val kapConfig = KapConfig.getInstanceFromEnv();
         val projectManager = NProjectManager.getInstance(kapConfig.getKylinConfig());
         return ugi.doAs((PrivilegedAction<Boolean>) () -> {

File: src/systools/src/main/java/org/apache/kylin/rest/util/AclPermissionUtil.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.exception.KylinException;

File: src/systools/src/test/java/org/apache/kylin/rest/security/UserAclManagerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.kylin.rest.security;
 
-import org.apache.commons.collections4.CollectionUtils;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.junit.After;
 import org.junit.Assert;

File: src/tool/src/main/java/org/apache/kylin/tool/RecCandidateTool.java
Patch:
@@ -251,7 +251,7 @@ public void extractModel(String project, String modelId, File dir) throws Except
         }
     }
 
-    private String getProjectByModelId(String modelId) {
+    String getProjectByModelId(String modelId) {
         if (StringUtils.isEmpty(modelId)) {
             throw new KylinException(PARAMETER_EMPTY, "model");
         }

File: src/core-job/src/test/java/org/apache/kylin/metrics/HdfsCapacityMetricsTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class HdfsCapacityMetricsTest extends NLocalFileMetadataTestCase {
@@ -61,6 +62,7 @@ public void testRegisterHdfsMetricsFailed() {
     }
 
     @Test
+    @Ignore("KE-40537")
     public void testRegisterHdfsMetrics() {
         overwriteSystemProp("kylin.metrics.hdfs-periodic-calculation-enabled", "true");
         HdfsCapacityMetrics.registerHdfsMetrics();

File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/QueryMetricsListener.java
Patch:
@@ -88,6 +88,7 @@ public void recordQueryPrometheusMetric(QueryMetrics queryMetric, NDataModelMana
                         MetricsTag.SUCCEED.getVal(), queryMetric.isSucceed() + "",
                         MetricsTag.HIT_SNAPSHOT.getVal(), queryMetric.isTableSnapshotUsed() + "",
                         MetricsTag.PROJECT.getVal(), queryMetric.getProjectName(),
+                        MetricsTag.CONSTANTS.getVal(), MetricsTag.CONSTANTS.getVal().equalsIgnoreCase(queryMetric.getEngineType()) + "",
                         MetricsTag.HIT_SECOND_STORAGE.getVal(), queryMetric.isSecondStorage() + "")
                 .distributionStatisticExpiry(Duration.ofDays(1))
                 .sla(KylinConfig.getInstanceFromEnv().getMetricsQuerySlaSeconds())

File: src/core-metrics/src/main/java/org/apache/kylin/common/metrics/MetricsTag.java
Patch:
@@ -38,6 +38,7 @@ public enum MetricsTag {
     HOST("host"), //
     TIMEOUT("timeout"), //
     WAITING("waiting"), //
+    CONSTANTS("constants"), //
     HIT_SECOND_STORAGE("hit_second_storage");
 
     private final String value;

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/jdbc/JdbcUtil.java
Patch:
@@ -190,7 +190,7 @@ public static Properties datasourceParametersForProd(StorageURL url) {
     public static Properties datasourceParametersForUT(StorageURL url) {
         Properties props = new Properties();
         props.put("driverClassName", "org.h2.Driver");
-        props.put("url", "jdbc:h2:mem:db_default;DB_CLOSE_DELAY=-1;MODE=MySQL");
+        props.put("url", "jdbc:h2:mem:db_default;DB_CLOSE_DELAY=-1");
         props.put("username", "sa");
         props.put("password", "");
         props.put("maxTotal", "50");

File: src/core-common/src/test/java/org/apache/kylin/common/persistence/metadata/jdbc/JdbcUtilTest.java
Patch:
@@ -31,7 +31,7 @@ public class JdbcUtilTest {
 
     @Before
     public void setup() throws SQLException {
-        this.connection = DriverManager.getConnection("jdbc:h2:mem:jdbc_util_test;DB_CLOSE_DELAY=-1;MODE=MySQL", "sa",
+        this.connection = DriverManager.getConnection("jdbc:h2:mem:jdbc_util_test;DB_CLOSE_DELAY=-1", "sa",
                 null);
     }
 
@@ -42,12 +42,12 @@ public void testIsColumnExists() throws SQLException {
         Assert.assertTrue(JdbcUtil.isColumnExists(connection, table, "col1"));
 
         // case insensitive
-        this.connection = DriverManager.getConnection("jdbc:h2:mem:jdbc_util_test;DB_CLOSE_DELAY=-1;MODE=MySQL", "sa",
+        this.connection = DriverManager.getConnection("jdbc:h2:mem:jdbc_util_test;DB_CLOSE_DELAY=-1", "sa",
                 null);
         Assert.assertTrue(JdbcUtil.isColumnExists(connection, table, "cOL1"));
 
         // not exists
-        this.connection = DriverManager.getConnection("jdbc:h2:mem:jdbc_util_test;DB_CLOSE_DELAY=-1;MODE=MySQL", "sa",
+        this.connection = DriverManager.getConnection("jdbc:h2:mem:jdbc_util_test;DB_CLOSE_DELAY=-1", "sa",
                 null);
         Assert.assertFalse(JdbcUtil.isColumnExists(connection, table, "not_exists"));
     }

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/StreamingTableServiceTest.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.scheduler.EventBusFactory;
@@ -34,6 +33,7 @@
 import org.apache.kylin.metadata.model.NTableMetadataManager;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.metadata.project.NProjectManager;
+import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
 import org.apache.kylin.metadata.streaming.KafkaConfig;
 import org.apache.kylin.metadata.streaming.KafkaConfigManager;
 import org.apache.kylin.rest.constant.Constant;
@@ -54,7 +54,6 @@
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.test.util.ReflectionTestUtils;
 
-import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
 import lombok.val;
 
 public class StreamingTableServiceTest extends NLocalFileMetadataTestCase {

File: src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java
Patch:
@@ -34,8 +34,6 @@ public enum ErrorCodeServer implements ErrorCodeProducer {
     MODEL_NOT_EXIST_SEGMENTS("KE-010002208"),
     MODEL_TDS_EXPORT_DIM_COL_AND_MEASURE_NAME_CONFLICT("KE-010002301"),
     MODEL_TDS_EXPORT_COLUMN_AND_MEASURE_NAME_CONFLICT("KE-010002302"),
-    MODEL_SUM_LC_INVALID_DATA_TYPE("KE-010002303"),
-    MODEL_SUM_LC_INVALID_TIMESTAMP_TYPE("KE-010002304"),
 
     // 100252XX Cube
     CUBE_NOT_EXIST("KE-010025201"),

File: src/query-common/src/main/java/org/apache/kylin/query/util/DefaultQueryTransformer.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class DefaultQueryTransformer implements IQueryTransformer {
 
-    public static final String S0 = "\\s*";
+    private static final String S0 = "\\s*";
     private static final String SM = "\\s+";
     private static final String ONE = "1";
 

File: src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java
Patch:
@@ -34,6 +34,8 @@ public enum ErrorCodeServer implements ErrorCodeProducer {
     MODEL_NOT_EXIST_SEGMENTS("KE-010002208"),
     MODEL_TDS_EXPORT_DIM_COL_AND_MEASURE_NAME_CONFLICT("KE-010002301"),
     MODEL_TDS_EXPORT_COLUMN_AND_MEASURE_NAME_CONFLICT("KE-010002302"),
+    MODEL_SUM_LC_INVALID_DATA_TYPE("KE-010002303"),
+    MODEL_SUM_LC_INVALID_TIMESTAMP_TYPE("KE-010002304"),
 
     // 100252XX Cube
     CUBE_NOT_EXIST("KE-010025201"),

File: src/query-common/src/main/java/org/apache/kylin/query/util/DefaultQueryTransformer.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class DefaultQueryTransformer implements IQueryTransformer {
 
-    private static final String S0 = "\\s*";
+    public static final String S0 = "\\s*";
     private static final String SM = "\\s+";
     private static final String ONE = "1";
 

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelService.java
Patch:
@@ -929,7 +929,7 @@ private List<AbstractExecutable> getPartialRunningExecutable(String project, Str
         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();
         NExecutableManager execManager = NExecutableManager.getInstance(kylinConfig, project);
         return execManager.listPartialExec(path -> StringUtils.endsWith(path, modelId), ExecutableState::isRunning,
-                INDEX_BUILD, INC_BUILD, JobTypeEnum.SUB_PARTITION_BUILD);
+                INDEX_BUILD, JobTypeEnum.SUB_PARTITION_BUILD);
     }
 
     public List<NDataSegmentResponse> getSegmentsResponse(String modelId, String project, String start, String end,

File: src/core-job/src/main/java/org/apache/kylin/job/runners/AbstractDefaultSchedulerRunner.java
Patch:
@@ -86,6 +86,8 @@ public void run() {
                 return;
             }
             doRun();
+        } catch (Exception e) {
+            logger.error(e.getMessage(), e);
         }
     }
 

File: src/spark-project/spark-common/src/main/java/org/apache/kylin/common/asyncprofiler/AsyncArchUtil.java
Patch:
@@ -74,4 +74,4 @@ private static String getSystemProperty(final String property) {
     private static void addProcessors(ArchType archType, final String... keys) {
         Stream.of(keys).forEach(key -> ARCH_TO_PROCESSOR.put(key, archType));
     }
-}
\ No newline at end of file
+}

File: src/spark-project/spark-common/src/test/java/org/apache/kylin/common/asyncprofiler/AsyncArchUtilTest.java
Patch:
@@ -37,4 +37,4 @@ public void testArchType() {
         archType = AsyncArchUtil.getProcessor("aarch64");
         Assert.assertEquals(AsyncArchUtil.ArchType.LINUX_ARM64, archType);
     }
-}
\ No newline at end of file
+}

File: src/spark-project/spark-common/src/test/java/org/apache/kylin/common/asyncprofiler/AsyncProfilerTest.java
Patch:
@@ -66,5 +66,4 @@ public void testStop() {
         Assert.assertThrows("Profiler is not active", IllegalStateException.class,
                 AsyncProfiler.getInstance(true)::stop);
     }
-
-}
+}
\ No newline at end of file

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/ModelServiceBuildTest.java
Patch:
@@ -201,7 +201,7 @@ public void setup() {
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
                     String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
-                            AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(),
+                            AclPermissionUtil.createAclInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);
                     ComputedColumnEvalUtil.evaluateExprAndType(model, ccDesc);

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -131,7 +131,7 @@ public class ModelSemanticHelper extends BasicService {
     private static final Logger logger = LoggerFactory.getLogger(ModelSemanticHelper.class);
     private final ExpandableMeasureUtil expandableMeasureUtil = new ExpandableMeasureUtil((model, ccDesc) -> {
         String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
-                AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(), getCurrentUserGroups()));
+                AclPermissionUtil.createAclInfo(model.getProject(), getCurrentUserGroups()));
         ccDesc.setInnerExpression(ccExpression);
         ComputedColumnEvalUtil.evaluateExprAndType(model, ccDesc);
     });

File: src/query-service/src/test/java/org/apache/kylin/rest/service/ModelServiceQueryTest.java
Patch:
@@ -115,7 +115,7 @@ public void setup() {
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
                     String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
-                            AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(),
+                            AclPermissionUtil.createAclInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);
                     ComputedColumnEvalUtil.evaluateExprAndType(model, ccDesc);

File: src/second-storage/core-ui/src/test/java/org/apache/kylin/rest/service/ModelServiceWithSecondStorageTest.java
Patch:
@@ -142,7 +142,7 @@ public void setup() throws IOException {
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
                     String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
-                            AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(),
+                            AclPermissionUtil.createAclInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);
                     ComputedColumnEvalUtil.evaluateExprAndType(model, ccDesc);

File: src/systools/src/main/java/org/apache/kylin/rest/util/AclPermissionUtil.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.persistence.AclEntity;
+import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.security.AclEntityFactory;
@@ -43,7 +44,6 @@
 import org.apache.kylin.rest.security.CompositeAclPermission;
 import org.apache.kylin.rest.security.MutableAclRecord;
 import org.apache.kylin.rest.security.ObjectIdentityImpl;
-import org.apache.kylin.metadata.project.NProjectManager;
 import org.springframework.security.acls.domain.BasePermission;
 import org.springframework.security.acls.domain.GrantedAuthoritySid;
 import org.springframework.security.acls.domain.PrincipalSid;
@@ -231,7 +231,7 @@ private static void checkIfAllowedProjectAdminGrantAcl(boolean isAllowedProjectA
         }
     }
 
-    public static QueryContext.AclInfo prepareQueryContextACLInfo(String project, Set<String> groups) {
+    public static QueryContext.AclInfo createAclInfo(String project, Set<String> groups) {
         return new QueryContext.AclInfo(getCurrentUsername(), groups, isAdminInProject(project, groups));
     }
 

File: src/common-service/src/main/java/org/apache/kylin/rest/config/MetricsConfig.java
Patch:
@@ -28,11 +28,11 @@
 
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.util.NamedThreadFactory;
-import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.common.metrics.MetricsController;
 import org.apache.kylin.common.metrics.MetricsGroup;
+import org.apache.kylin.common.util.NamedThreadFactory;
 import org.apache.kylin.metadata.project.NProjectManager;
+import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.rest.cluster.ClusterManager;
 import org.apache.kylin.rest.config.initialize.MetricsRegistry;
 import org.springframework.beans.factory.annotation.Autowired;

File: src/common-service/src/main/java/org/apache/kylin/rest/interceptor/ReloadAuthoritiesInterceptor.java
Patch:
@@ -31,10 +31,9 @@
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.util.JsonUtil;
+import org.apache.kylin.metadata.user.ManagedUser;
 import org.apache.kylin.rest.response.ErrorResponse;
 import org.apache.kylin.rest.service.UserService;
-import org.apache.kylin.common.util.Unsafe;
-import org.apache.kylin.metadata.user.ManagedUser;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.core.annotation.Order;
@@ -84,7 +83,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons
                 if (present) {
                     response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                     response.setContentType(MediaType.APPLICATION_JSON_VALUE);
-                    ErrorResponse errorResponse = new ErrorResponse(Unsafe.getUrlFromHttpServletRequest(request),
+                    ErrorResponse errorResponse = new ErrorResponse(request.getRequestURL().toString(),
                             new KylinException(USER_DATA_SOURCE_CONNECTION_FAILED,
                                     MsgPicker.getMsg().getlDapUserDataSourceConnectionFailed()));
                     response.setCharacterEncoding("UTF-8");

File: src/common-service/src/main/java/org/apache/kylin/rest/security/NUnauthorisedEntryPoint.java
Patch:
@@ -37,7 +37,6 @@
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.rest.response.ErrorResponse;
-import org.apache.kylin.common.util.Unsafe;
 import org.springframework.http.MediaType;
 import org.springframework.ldap.CommunicationException;
 import org.springframework.security.authentication.DisabledException;
@@ -94,7 +93,7 @@ public void setErrorResponse(HttpServletRequest request, HttpServletResponse res
             throws IOException {
         response.setStatus(statusCode);
         response.setContentType(MediaType.APPLICATION_JSON_VALUE);
-        ErrorResponse errorResponse = new ErrorResponse(Unsafe.getUrlFromHttpServletRequest(request), ex);
+        ErrorResponse errorResponse = new ErrorResponse(request.getRequestURL().toString(), ex);
         String errorStr = JsonUtil.writeValueAsIndentString(errorResponse);
         response.setCharacterEncoding("UTF-8");
         PrintWriter writer = response.getWriter();

File: src/common-service/src/main/java/org/apache/kylin/rest/util/SparkUIUtil.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.http.impl.client.HttpClientBuilder;
-import org.apache.kylin.common.util.Unsafe;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpHeaders;
@@ -59,7 +58,7 @@ public static void resendSparkUIRequest(HttpServletRequest servletRequest, HttpS
         final HttpMethod method = HttpMethod.resolve(servletRequest.getMethod());
 
         try (ClientHttpResponse response = execute(target, method, proxyLocationBase)) {
-            rewrite(response, servletResponse, method, Unsafe.getUrlFromHttpServletRequest(servletRequest),
+            rewrite(response, servletResponse, method, servletRequest.getRequestURL().toString(),
                     REDIRECT_THRESHOLD, proxyLocationBase);
         }
     }

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.kylin.common;
 
 import static java.lang.Math.toIntExact;
-import static org.apache.kylin.common.asyncprofiler.AsyncProfiler.ASYNC_PROFILER_LIB_LINUX_ARM64;
-import static org.apache.kylin.common.asyncprofiler.AsyncProfiler.ASYNC_PROFILER_LIB_LINUX_X64;
+import static org.apache.kylin.common.constant.AsyncProfilerConstants.ASYNC_PROFILER_LIB_LINUX_ARM64;
+import static org.apache.kylin.common.constant.AsyncProfilerConstants.ASYNC_PROFILER_LIB_LINUX_X64;
 import static org.apache.kylin.common.constant.Constants.KYLIN_SOURCE_JDBC_CONNECTION_URL_KEY;
 import static org.apache.kylin.common.constant.Constants.KYLIN_SOURCE_JDBC_DRIVER_KEY;
 import static org.apache.kylin.common.constant.Constants.KYLIN_SOURCE_JDBC_PASS_KEY;

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/jdbc/JdbcUtil.java
Patch:
@@ -36,7 +36,6 @@
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.persistence.metadata.PersistException;
 import org.apache.kylin.common.util.EncryptUtil;
-import org.msgpack.core.annotations.VisibleForTesting;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.dao.DataIntegrityViolationException;
@@ -45,6 +44,7 @@
 import org.springframework.transaction.TransactionDefinition;
 import org.springframework.transaction.support.DefaultTransactionDefinition;
 
+import io.kyligence.kap.guava20.shaded.common.annotations.VisibleForTesting;
 import lombok.val;
 import lombok.extern.slf4j.Slf4j;
 

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/FunctionDesc.java
Patch:
@@ -42,8 +42,7 @@
 import java.util.stream.Collectors;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.lang.StringUtils;
-import org.apache.directory.api.util.Strings;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.measure.MeasureType;
 import org.apache.kylin.measure.MeasureTypeFactory;
@@ -104,7 +103,7 @@ public static String proposeReturnType(String expression, String colDataType, Ma
                 break;
             }
             case FunctionDesc.FUNC_SUM_LC: {
-                Preconditions.checkArgument(Strings.isNotEmpty(colDataType),
+                Preconditions.checkArgument(StringUtils.isNotEmpty(colDataType),
                         "SUM_LC Measure's input type shouldn't be null or empty");
                 checkSumLCDataType(colDataType);
                 break;

File: src/core-metadata/src/main/java/org/apache/kylin/source/jdbc/H2Database.java
Patch:
@@ -36,8 +36,8 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.metadata.model.ColumnDesc;
-import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.metadata.model.NTableMetadataManager;
+import org.apache.kylin.metadata.model.TableDesc;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/core-metrics/src/main/java/org/apache/kylin/common/metrics/reporter/InfluxdbReporter.java
Patch:
@@ -36,12 +36,12 @@
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 
-import org.apache.kylin.common.util.Pair;
 import org.apache.kylin.common.metrics.MetricsCategory;
 import org.apache.kylin.common.metrics.MetricsGroup;
 import org.apache.kylin.common.metrics.MetricsName;
 import org.apache.kylin.common.metrics.service.InfluxDBInstance;
 import org.apache.kylin.common.util.AddressUtil;
+import org.apache.kylin.common.util.Pair;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/core-metrics/src/main/java/org/apache/kylin/common/metrics/service/InfluxDBInstance.java
Patch:
@@ -26,10 +26,10 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.util.ExecutorServiceUtil;
-import org.apache.kylin.common.util.NamedThreadFactory;
 import org.apache.kylin.common.metrics.MetricsGroup;
+import org.apache.kylin.common.util.ExecutorServiceUtil;
 import org.apache.kylin.common.util.InfluxDBUtils;
+import org.apache.kylin.common.util.NamedThreadFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/filter/SegmentsRequestFilter.java
Patch:
@@ -42,7 +42,6 @@
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.util.JsonUtil;
-import org.apache.kylin.common.util.Unsafe;
 import org.apache.kylin.rest.response.ErrorResponse;
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpHeaders;
@@ -84,7 +83,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                 MsgPicker.setMsg(httpServletRequest.getHeader(HttpHeaders.ACCEPT_LANGUAGE));
                 ErrorCode.setMsg(httpServletRequest.getHeader(HttpHeaders.ACCEPT_LANGUAGE));
 
-                ErrorResponse errorResponse = new ErrorResponse(Unsafe.getUrlFromHttpServletRequest(httpServletRequest),
+                ErrorResponse errorResponse = new ErrorResponse(httpServletRequest.getRequestURL().toString(),
                         e);
                 byte[] responseBody = JsonUtil.writeValueAsBytes(errorResponse);
 

File: src/spark-project/spark-common/src/main/java/org/apache/kylin/source/dfs/DFSFileTableReader.java
Patch:
@@ -204,7 +204,7 @@ private interface RowReader extends Closeable {
         String nextLine() throws IOException; // return null on EOF
     }
 
-    private class SeqRowReader implements RowReader {
+    private static class SeqRowReader implements RowReader {
         Reader reader;
         Writable key;
         Text value;
@@ -230,7 +230,7 @@ public void close() throws IOException {
         }
     }
 
-    private class CsvRowReader implements RowReader {
+    private static class CsvRowReader implements RowReader {
         BufferedReader reader;
 
         CsvRowReader(FileSystem fs, String path) throws IOException {

File: src/spark-project/spark-common/src/test/java/org/apache/kylin/common/asyncprofiler/AsyncProfilerUtilsTest.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.kylin.common.asyncprofiler;
 
-import static org.awaitility.Awaitility.await;
 import static org.mockito.Mockito.mock;
 
 import java.io.File;
@@ -30,6 +29,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
+import org.awaitility.Awaitility;
 import org.awaitility.Duration;
 import org.junit.Assert;
 import org.junit.Test;
@@ -82,7 +82,7 @@ public void testWaitForResultTimeout() throws IOException, InterruptedException
         ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
 
         Thread t1 = new Thread(() -> {
-            await().pollDelay(new Duration(1, TimeUnit.SECONDS)).until(() -> true);
+            Awaitility.await().pollDelay(new Duration(1, TimeUnit.SECONDS)).until(() -> true);
             for (int i = 0; i < 3; i++) {
                 cachedThreadPool.execute(() -> asyncProfilerUtils.cachedResult.countDown());
             }
@@ -100,7 +100,7 @@ public void testWaitForResult() throws IOException, InterruptedException {
         ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
 
         Thread t1 = new Thread(() -> {
-            await().pollDelay(new Duration(1, TimeUnit.MILLISECONDS)).until(() -> true);
+            Awaitility.await().pollDelay(new Duration(1, TimeUnit.MILLISECONDS)).until(() -> true);
             for (int i = 0; i < 3; i++) {
                 cachedThreadPool.execute(() -> asyncProfilerUtils.cachedResult.countDown());
             }

File: src/spark-project/spark-common/src/test/java/org/apache/kylin/common/asyncprofiler/MessageTest.java
Patch:
@@ -37,7 +37,8 @@ public void testDriverMessage() {
 
     @Test
     public void testExecutorMessage() {
-        String executorMessage = Message.createExecutorMessage(Message.START(), "-0", AsyncProfilerToolTest.DUMP_PARAMS);
+        String executorMessage = Message.createExecutorMessage(Message.START(), "-0",
+                AsyncProfilerToolTest.DUMP_PARAMS);
         Tuple3<String, String, String> tuple = Message.processMessage(executorMessage);
         Assert.assertEquals("STA-0:flamegraph", executorMessage);
         Assert.assertEquals(Message.START(), tuple._1());

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -1191,6 +1191,7 @@ void testGetRoutineOpsTaskTimeOut() {
     @Test
     void testBuildJobProfilingEnabled() {
         KylinConfig config = KylinConfig.getInstanceFromEnv();
+        config.setProperty("kylin.engine.async-profiler-enabled", "false");
         assertFalse(config.buildJobProfilingEnabled());
         config.setProperty("kylin.engine.async-profiler-enabled", "true");
         assertTrue(config.buildJobProfilingEnabled());

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/JobService.java
Patch:
@@ -47,7 +47,6 @@
 
 import javax.servlet.http.HttpServletRequest;
 
-import org.apache.kylin.metadata.epoch.EpochManager;
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.MapUtils;
 import org.apache.commons.io.IOUtils;
@@ -98,6 +97,7 @@
 import org.apache.kylin.metadata.cube.model.NBatchConstants;
 import org.apache.kylin.metadata.cube.model.NDataSegment;
 import org.apache.kylin.metadata.cube.model.NDataflowManager;
+import org.apache.kylin.metadata.epoch.EpochManager;
 import org.apache.kylin.metadata.model.FusionModel;
 import org.apache.kylin.metadata.model.FusionModelManager;
 import org.apache.kylin.metadata.model.NDataModel;
@@ -1340,6 +1340,7 @@ public Pair<String, String> getProjectNameAndJobStepId(String yarnAppId) {
     }
 
     public void setResponseLanguage(HttpServletRequest request) {
+        aclEvaluate.checkIsGlobalAdmin();
         String languageToHandle = request.getHeader(HttpHeaders.ACCEPT_LANGUAGE);
         if (languageToHandle == null) {
             ErrorCode.setMsg("cn");

File: src/common-service/src/test/java/org/apache/kylin/rest/service/AclTCRServiceTest.java
Patch:
@@ -311,7 +311,7 @@ private boolean getColumnAuthorized(AclTCRRequest acl, String database, String t
     }
 
     private SensitiveDataMask.MaskType getColumnDataMask(AclTCRRequest acl, String database, String table,
-                                                         String column) {
+            String column) {
         if (acl.getDatabaseName().equals(database)) {
             for (val tb : acl.getTables()) {
                 if (tb.getTableName().equals(table)) {
@@ -1316,7 +1316,7 @@ public void testGetUserOrGroupAclPermissions() throws IOException {
         Mockito.when(userService.isGlobalAdmin("ADMIN")).thenReturn(true);
         List<SidPermissionWithAclResponse> responses = accessService.getUserOrGroupAclPermissions(projects, "ADMIN",
                 true);
-        Assert.assertEquals(27, responses.size());
+        Assert.assertEquals(28, responses.size());
         Assert.assertTrue(responses.stream().allMatch(response -> "ADMIN".equals(response.getProjectPermission())));
 
         // test normal group

File: src/core-common/src/main/java/org/apache/kylin/common/msg/Message.java
Patch:
@@ -1015,7 +1015,7 @@ public String getAliasConflictOfApprovingRecommendation() {
     }
 
     public String getInvalidTimeFormat() {
-        return "Can’t set the time partition column. The values of the selected column is not time formatted. Please select again.";
+        return "Can’t set the time partition column. The values of the selected column is not time formatted: {%s}. Please select again.";
     }
 
     public String getSegmentMergeStorageCheckError() {

File: src/core-metadata/src/main/java/org/apache/kylin/measure/MeasureTypeFactory.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.kylin.measure.hllc.HLLCMeasureType;
 import org.apache.kylin.measure.percentile.PercentileMeasureType;
 import org.apache.kylin.measure.raw.RawMeasureType;
+import org.apache.kylin.measure.sumlc.SumLCMeasureType;
 import org.apache.kylin.measure.topn.TopNMeasureType;
 import org.apache.kylin.metadata.datatype.DataType;
 import org.apache.kylin.metadata.datatype.DataTypeSerializer;
@@ -120,6 +121,7 @@ public static synchronized void init() {
         factoryInsts.add(new IntersectMeasureType.Factory());
         factoryInsts.add(new CollectSetMeasureType.Factory());
         factoryInsts.add(new CorrMeasureType.Factory());
+        factoryInsts.add(new SumLCMeasureType.Factory());
 
         logger.info("Checking custom measure types from kylin config");
 

File: src/core-metadata/src/test/java/org/apache/kylin/metadata/project/NProjectManagerTest.java
Patch:
@@ -26,10 +26,9 @@
 import org.apache.kylin.common.KapConfig;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
-import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.common.hystrix.NCircuitBreaker;
+import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
-import org.apache.kylin.metadata.project.ProjectInstance;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -69,7 +68,7 @@ public void testGetProjectsFromResource() throws Exception {
         }
 
         val projects = projectManager.listAllProjects();
-        Assert.assertEquals(27, projects.size());
+        Assert.assertEquals(28, projects.size());
         Assert.assertTrue(projects.stream().noneMatch(p -> p.getName().equals("test")));
     }
 

File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java
Patch:
@@ -101,6 +101,7 @@ public class OLAPAggregateRel extends Aggregate implements OLAPRel {
     protected List<AggregateCall> rewriteAggCalls;
     protected List<TblColRef> groups;
     protected List<FunctionDesc> aggregations;
+
     public OLAPAggregateRel(RelOptCluster cluster, RelTraitSet traits, RelNode child, boolean indicator,
             ImmutableBitSet groupSet, List<ImmutableBitSet> groupSets, List<AggregateCall> aggCalls)
             throws InvalidRelException {
@@ -501,7 +502,6 @@ protected AggregateCall rewriteAggregateCall(AggregateCall aggCall, FunctionDesc
 
         // rebuild aggregate call
         return new AggregateCall(newAgg, false, newArgList, fieldType, callName);
-
     }
 
     /**

File: src/query-service/src/test/java/org/apache/kylin/rest/service/QueryHistoryServiceTest.java
Patch:
@@ -365,7 +365,7 @@ public void testGetQueryHistoryTableNames() {
 
         // get all tables
         tableMap = queryHistoryService.getQueryHistoryTableMap(null);
-        Assert.assertEquals(27, tableMap.size());
+        Assert.assertEquals(28, tableMap.size());
 
         // not existing project
         try {

File: src/query/src/test/java/org/apache/kylin/query/engine/AsyncQueryJobTest.java
Patch:
@@ -17,11 +17,11 @@
  */
 package org.apache.kylin.query.engine;
 
-import static org.apache.kylin.query.util.AsyncQueryUtil.ASYNC_QUERY_JOB_ID_PRE;
 import static org.apache.kylin.metadata.cube.model.NBatchConstants.P_DIST_META_URL;
 import static org.apache.kylin.metadata.cube.model.NBatchConstants.P_JOB_ID;
 import static org.apache.kylin.metadata.cube.model.NBatchConstants.P_QUERY_CONTEXT;
 import static org.apache.kylin.metadata.cube.model.NBatchConstants.P_QUERY_PARAMS;
+import static org.apache.kylin.query.util.AsyncQueryUtil.ASYNC_QUERY_JOB_ID_PRE;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -45,11 +45,11 @@
 import org.apache.kylin.common.util.CliCommandExecutor;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.common.util.JsonUtil;
+import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.common.util.ShellException;
 import org.apache.kylin.job.exception.ExecuteException;
 import org.apache.kylin.job.execution.ExecuteResult;
 import org.apache.kylin.query.util.QueryParams;
-import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -217,7 +217,7 @@ private void testMetadata(FileSystem workingFileSystem, FileStatus metaFileStatu
                 rawResourceMap.put(zipEntry.getName(), raw);
             }
         }
-        Assert.assertEquals(83, rawResourceMap.size());
+        Assert.assertEquals(84, rawResourceMap.size());
     }
 
     private void testKylinConfig(FileSystem workingFileSystem, FileStatus metaFileStatus) throws IOException {

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TblColRef.java
Patch:
@@ -203,7 +203,7 @@ public TblColRef(TableRef table, ColumnDesc column) {
         this.table = table;
         this.column = column;
     }
-    
+
     private String wrapIdentity(String wrap) {
         return wrap + getTableAlias() + wrap + "." + wrap + getName() + wrap;
     }
@@ -281,7 +281,7 @@ public String getTableDotName() {
     }
 
     public String getCanonicalName() {
-        return getTable() + "." + getName();
+        return column.getCanonicalName();
     }
 
     public String getDatatype() {

File: src/datasource-sdk/src/test/java/org/apache/kylin/sdk/datasource/PushdownRunnerSDKImplTest.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.List;
 
 import org.apache.kylin.common.QueryContext;
+import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.apache.kylin.sdk.datasource.framework.JdbcConnectorTest;
-import org.apache.kylin.metadata.project.NProjectManager;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -38,7 +38,7 @@ public void testExecuteQuery() throws Exception {
         npr.updateProject(projectInstance);
 
         PushDownRunnerSDKImpl pushDownRunnerSDK = new PushDownRunnerSDKImpl();
-        pushDownRunnerSDK.init(getTestConfig());
+        pushDownRunnerSDK.init(getTestConfig(), projectInstance.getName());
         List<List<String>> returnRows = Lists.newArrayList();
         List<SelectedColumnMeta> returnColumnMeta = Lists.newArrayList();
         String sql = "select count(*) from LINEORDER";
@@ -49,7 +49,7 @@ public void testExecuteQuery() throws Exception {
     @Test
     public void testExecuteUpdate() throws Exception {
         PushDownRunnerSDKImpl pushDownRunnerSDK = new PushDownRunnerSDKImpl();
-        pushDownRunnerSDK.init(getTestConfig());
+        pushDownRunnerSDK.init(getTestConfig(), null);
         String sql = "update SSB.LINEORDER set LO_TAX=1 where LO_ORDERKEY = 1";
         pushDownRunnerSDK.executeUpdate(sql, null);
     }

File: src/query-common/src/main/java/org/apache/kylin/query/util/PushDownUtil.java
Patch:
@@ -107,7 +107,7 @@ public static PushdownResult tryPushDownQueryToIterator(QueryParams queryParams)
         }
 
         IPushDownRunner runner = (IPushDownRunner) ClassUtil.newInstance(kylinConfig.getPushDownRunnerClassName());
-        runner.init(kylinConfig);
+        runner.init(kylinConfig, project);
         logger.debug("Query Pushdown runner {}", runner);
 
         // set pushdown engine in query context
@@ -213,7 +213,7 @@ public static Pair<List<List<String>>, List<SelectedColumnMeta>> selectPartition
         // pushdown
         IPushDownRunner runner = (IPushDownRunner) ClassUtil
                 .newInstance(kylinConfig.getPartitionCheckRunnerClassNameWithDefaultValue());
-        runner.init(kylinConfig);
+        runner.init(kylinConfig, project);
         runner.executeQuery(sql, returnRows, returnColumnMeta, project);
 
         return Pair.newPair(returnRows, returnColumnMeta);
@@ -222,7 +222,7 @@ public static Pair<List<List<String>>, List<SelectedColumnMeta>> selectPartition
     public static void trySimplePushDownExecute(String sql, String project) throws Exception {
         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();
         IPushDownRunner runner = (IPushDownRunner) ClassUtil.newInstance(kylinConfig.getPushDownRunnerClassName());
-        runner.init(kylinConfig);
+        runner.init(kylinConfig, project);
         runner.executeUpdate(sql, project);
     }
 

File: src/common-service/src/main/java/org/apache/kylin/rest/service/ProjectService.java
Patch:
@@ -586,7 +586,7 @@ public ProjectConfigResponse getProjectConfig0(String project) {
 
         response.setPrincipal(projectInstance.getPrincipal());
         // return favorite rules
-        // TODO: adapt
+        response.setFavoriteRules(projectSmartService != null ? projectSmartService.getFavoriteRules(project) : null);
 
         response.setScd2Enabled(config.isQueryNonEquiJoinModelEnabled());
 

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -2864,7 +2864,7 @@ public long getAsyncQueryResultRetainDays() {
         return TimeUtil.timeStringAs(this.getOptional("kylin.query.async.result-retain-days", "7d"), TimeUnit.DAYS);
     }
 
-    public Boolean isUniqueAsyncQueryYarnQueue() {
+    public boolean isUniqueAsyncQueryYarnQueue() {
         return Boolean.parseBoolean(this.getOptional("kylin.query.unique-async-query-yarn-queue-enabled", FALSE));
     }
 
@@ -3674,7 +3674,7 @@ public boolean isBuildSegmentOverlapEnabled() {
         return Boolean.parseBoolean(getOptional("kylin.build.segment-overlap-enabled", FALSE));
     }
 
-    public boolean getDDLEnabled(){
+    public boolean getDDLEnabled() {
         return Boolean.parseBoolean(getOptional("kylin.source.ddl.enabled", FALSE));
     }
 }

File: src/data-loading-service/src/test/java/org/apache/kylin/rest/service/ModelServiceBuildTest.java
Patch:
@@ -94,8 +94,8 @@
 import org.apache.kylin.metadata.query.QueryTimesResponse;
 import org.apache.kylin.metadata.realization.RealizationStatusEnum;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
-import org.apache.kylin.query.util.KapQueryUtil;
 import org.apache.kylin.query.util.PushDownUtil;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.rest.config.initialize.ModelBrokenListener;
 import org.apache.kylin.rest.exception.BadRequestException;
 import org.apache.kylin.rest.request.ModelRequest;
@@ -200,7 +200,7 @@ public void setup() {
         ReflectionTestUtils.setField(modelBuildService, "userGroupService", userGroupService);
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
-                    String ccExpression = KapQueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
+                    String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
                             AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);

File: src/kylin-it/src/test/java/org/apache/kylin/newten/NBadQueryAndPushDownTest.java
Patch:
@@ -36,9 +36,9 @@
 import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.apache.kylin.metadata.realization.NoRealizationFoundException;
-import org.apache.kylin.query.util.KapQueryUtil;
 import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.query.util.QueryParams;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.util.ExecAndComp;
 import org.apache.spark.sql.AnalysisException;
 import org.apache.spark.sql.SparderEnv;
@@ -253,8 +253,7 @@ private Pair<List<List<String>>, List<SelectedColumnMeta>> pushDownSql(String pr
             int offset, SQLException sqlException, boolean isForced) throws Exception {
         populateSSWithCSVData(KylinConfig.getInstanceFromEnv(), prjName, SparderEnv.getSparkSession());
         String pushdownSql = ExecAndComp.removeDataBaseInSql(sql);
-        String massagedSql = KapQueryUtil.normalMassageSql(KylinConfig.getInstanceFromEnv(), pushdownSql, limit,
-                offset);
+        String massagedSql = QueryUtil.normalMassageSql(KylinConfig.getInstanceFromEnv(), pushdownSql, limit, offset);
         QueryParams queryParams = new QueryParams(prjName, massagedSql, "DEFAULT", BackdoorToggles.getPrepareOnly(),
                 sqlException, isForced);
         queryParams.setSelect(true);

File: src/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java
Patch:
@@ -44,9 +44,9 @@
 import org.apache.kylin.metadata.project.ProjectInstance;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.apache.kylin.query.engine.QueryExec;
-import org.apache.kylin.query.util.KapQueryUtil;
 import org.apache.kylin.query.util.PushDownUtil;
 import org.apache.kylin.query.util.QueryParams;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.util.ExecAndComp;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -134,7 +134,7 @@ protected int executeQuery(String sql) throws Exception {
 
     public Pair<List<List<String>>, List<SelectedColumnMeta>> tryPushDownSelectQuery(String project, String sql,
             String defaultSchema, SQLException sqlException, boolean isPrepare, boolean isForced) throws Exception {
-        String massagedSql = KapQueryUtil.normalMassageSql(KylinConfig.getInstanceFromEnv(), sql, 0, 0);
+        String massagedSql = QueryUtil.normalMassageSql(KylinConfig.getInstanceFromEnv(), sql, 0, 0);
         QueryParams queryParams = new QueryParams(project, massagedSql, defaultSchema, isPrepare, sqlException,
                 isForced);
         queryParams.setSelect(true);

File: src/kylin-it/src/test/java/org/apache/kylin/query/rules/CalciteRuleTestBase.java
Patch:
@@ -45,8 +45,8 @@
 import org.apache.kylin.query.engine.QueryExec;
 import org.apache.kylin.query.engine.QueryOptimizer;
 import org.apache.kylin.query.util.HepUtils;
-import org.apache.kylin.query.util.KapQueryUtil;
 import org.apache.kylin.query.util.QueryParams;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.util.ExecAndComp;
 import org.junit.Assert;
 import org.slf4j.Logger;
@@ -111,7 +111,7 @@ protected Pair<String, String> readOneSQL(KylinConfig config, String project, St
                 return e.getFirst().contains(file);
         }).map(e -> {
             QueryParams queryParams = new QueryParams(config, e.getSecond(), project, 0, 0, "DEFAULT", false);
-            String sql = KapQueryUtil.massageSql(queryParams).replaceAll(emptyLinePattern, ""); // remove empty line
+            String sql = QueryUtil.massageSql(queryParams).replaceAll(emptyLinePattern, ""); // remove empty line
             return new Pair<>(FilenameUtils.getBaseName(e.getFirst()), sql);
         }).collect(Collectors.toList());
         Assert.assertEquals(1, queries.size());
@@ -123,7 +123,7 @@ protected List<Pair<String, String>> readALLSQLs(KylinConfig config, String proj
         final String queryFolder = IT_SQL_KYLIN_DIR + folder;
         return ExecAndComp.fetchQueries(queryFolder).stream().map(e -> {
             QueryParams queryParams = new QueryParams(config, e.getSecond(), project, 0, 0, "DEFAULT", false);
-            String sql = KapQueryUtil.massageSql(queryParams).replaceAll(emptyLinePattern, ""); // remove empty line
+            String sql = QueryUtil.massageSql(queryParams).replaceAll(emptyLinePattern, ""); // remove empty line
             return new Pair<>(FilenameUtils.getBaseName(e.getFirst()), sql);
         }).collect(Collectors.toList());
     }

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -93,6 +93,8 @@
 import org.apache.kylin.metadata.model.util.scd2.SimplifiedJoinDesc;
 import org.apache.kylin.metadata.model.util.scd2.SimplifiedJoinTableDesc;
 import org.apache.kylin.metadata.project.NProjectManager;
+import org.apache.kylin.metadata.recommendation.ref.OptRecManagerV2;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.rest.request.ModelRequest;
 import org.apache.kylin.rest.response.BuildIndexResponse;
 import org.apache.kylin.rest.response.SimplifiedMeasure;
@@ -111,8 +113,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 
-import org.apache.kylin.metadata.recommendation.ref.OptRecManagerV2;
-import org.apache.kylin.query.util.KapQueryUtil;
 import io.kyligence.kap.secondstorage.SecondStorageUpdater;
 import io.kyligence.kap.secondstorage.SecondStorageUtil;
 import lombok.Setter;
@@ -130,7 +130,7 @@ public class ModelSemanticHelper extends BasicService {
 
     private static final Logger logger = LoggerFactory.getLogger(ModelSemanticHelper.class);
     private final ExpandableMeasureUtil expandableMeasureUtil = new ExpandableMeasureUtil((model, ccDesc) -> {
-        String ccExpression = KapQueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
+        String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
                 AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(), getCurrentUserGroups()));
         ccDesc.setInnerExpression(ccExpression);
         ComputedColumnEvalUtil.evaluateExprAndType(model, ccDesc);

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/ModelServiceTest.java
Patch:
@@ -157,7 +157,7 @@
 import org.apache.kylin.metadata.realization.RealizationStatusEnum;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
 import org.apache.kylin.metadata.user.ManagedUser;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.rest.config.initialize.ModelBrokenListener;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.constant.ModelStatusToDisplayEnum;
@@ -285,7 +285,7 @@ public void setup() {
         ReflectionTestUtils.setField(semanticService, "userGroupService", userGroupService);
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
-                    String ccExpression = KapQueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
+                    String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
                             AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);

File: src/query-common/src/main/java/org/apache/kylin/query/SlowQueryDetector.java
Patch:
@@ -42,7 +42,7 @@ public class SlowQueryDetector extends Thread {
     private static final ConcurrentMap<String, CanceledSlowQueryStatus> canceledSlowQueriesStatus = Maps
             .newConcurrentMap();
     private final int detectionIntervalMs;
-    private int queryTimeoutMs;
+    private final int queryTimeoutMs;
 
     public SlowQueryDetector() {
         super("SlowQueryDetector");

File: src/query-common/src/main/java/org/apache/kylin/query/security/RowFilter.java
Patch:
@@ -44,17 +44,17 @@
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.exception.KylinRuntimeException;
 import org.apache.kylin.common.util.Pair;
+import org.apache.kylin.metadata.acl.AclTCRManager;
 import org.apache.kylin.metadata.model.tool.CalciteParser;
+import org.apache.kylin.query.IQueryTransformer;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.source.adhocquery.IPushDownConverter;
-import org.apache.kylin.metadata.acl.AclTCRManager;
-import org.apache.kylin.query.util.KapQueryUtil;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.google.common.base.Preconditions;
 
-public class RowFilter implements KapQueryUtil.IQueryTransformer, IPushDownConverter {
+public class RowFilter implements IQueryTransformer, IPushDownConverter {
     private static final Logger logger = LoggerFactory.getLogger(RowFilter.class);
 
     static boolean needEscape(String sql, String defaultSchema, Map<String, String> cond) {

File: src/query-common/src/main/java/org/apache/kylin/query/util/DefaultQueryTransformer.java
Patch:
@@ -22,11 +22,12 @@
 import java.util.regex.Pattern;
 
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.query.IQueryTransformer;
 
 /**
  * DefaultQueryTransformer only used for query from IndexPlan.
  */
-public class DefaultQueryTransformer implements KapQueryUtil.IQueryTransformer {
+public class DefaultQueryTransformer implements IQueryTransformer {
 
     private static final String S0 = "\\s*";
     private static final String SM = "\\s+";

File: src/query-common/src/main/java/org/apache/kylin/query/util/KeywordDefaultDirtyHack.java
Patch:
@@ -19,9 +19,10 @@
 package org.apache.kylin.query.util;
 
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.query.IQueryTransformer;
 import org.apache.kylin.source.adhocquery.IPushDownConverter;
 
-public class KeywordDefaultDirtyHack implements KapQueryUtil.IQueryTransformer, IPushDownConverter {
+public class KeywordDefaultDirtyHack implements IQueryTransformer, IPushDownConverter {
 
     public static String transform(String sql) {
         // KYLIN-2108, DEFAULT is hive default database, but a sql keyword too,

File: src/query-common/src/main/java/org/apache/kylin/query/util/PowerBIConverter.java
Patch:
@@ -20,9 +20,10 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import org.apache.kylin.query.IQueryTransformer;
 import org.apache.kylin.source.adhocquery.IPushDownConverter;
 
-public class PowerBIConverter implements KapQueryUtil.IQueryTransformer, IPushDownConverter {
+public class PowerBIConverter implements IQueryTransformer, IPushDownConverter {
 
     private static final String S0 = "\\s*";
     private static final String SM = "\\s+";
@@ -40,8 +41,7 @@ private static String handleSumOfFnConvert(String sql) {
             if (!m.find())
                 break;
 
-            sql = sql.substring(0, m.start()) + " SUM(" + m.group(1).trim() + ")"
-                    + sql.substring(m.end(), sql.length());
+            sql = sql.substring(0, m.start()) + " SUM(" + m.group(1).trim() + ")" + sql.substring(m.end());
         }
         return sql;
     }

File: src/query-common/src/main/java/org/apache/kylin/query/util/PushDownUtil.java
Patch:
@@ -52,13 +52,13 @@
 import org.apache.kylin.metadata.model.NTableMetadataManager;
 import org.apache.kylin.metadata.model.SegmentRange;
 import org.apache.kylin.metadata.model.TableDesc;
+import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;
 import org.apache.kylin.metadata.realization.RoutingIndicatorException;
+import org.apache.kylin.query.exception.NoAuthorizedColsError;
 import org.apache.kylin.query.security.AccessDeniedException;
 import org.apache.kylin.source.adhocquery.IPushDownRunner;
 import org.apache.kylin.source.adhocquery.PushdownResult;
-import org.apache.kylin.metadata.project.NProjectManager;
-import org.apache.kylin.query.exception.NoAuthorizedColsError;
 import org.codehaus.commons.compiler.CompileException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -125,7 +125,7 @@ public static PushdownResult tryPushDownQueryToIterator(QueryParams queryParams)
         queryParams.setKylinConfig(kylinConfig);
         queryParams.setSql(sql);
         try {
-            sql = KapQueryUtil.massagePushDownSql(queryParams);
+            sql = QueryUtil.massagePushDownSql(queryParams);
         } catch (NoAuthorizedColsError e) {
             // on no authorized cols found, return empty result
             return PushdownResult.emptyResult();

File: src/query-common/src/main/java/org/apache/kylin/query/util/WithToSubQueryTransformer.java
Patch:
@@ -42,11 +42,11 @@
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.util.Pair;
 import org.apache.kylin.metadata.model.tool.CalciteParser;
+import org.apache.kylin.metadata.project.NProjectManager;
+import org.apache.kylin.query.IQueryTransformer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.apache.kylin.metadata.project.NProjectManager;
-
 /**
  * Transform "WITH AS ... SELECT" SQL to SQL with subquery
  *
@@ -62,7 +62,7 @@
  * So the preparedStatement parameters should also be transformed
  *
  */
-public class WithToSubQueryTransformer implements KapQueryUtil.IQueryTransformer {
+public class WithToSubQueryTransformer implements IQueryTransformer {
     private static final Logger logger = LoggerFactory.getLogger(WithToSubQueryTransformer.class);
 
     @Override

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryCacheManager.java
Patch:
@@ -193,9 +193,8 @@ public SQLResponse searchSuccessCache(SQLRequest sqlRequest) {
         String project = sqlRequest.getProject();
         for (NativeQueryRealization nativeQueryRealization : realizations) {
             val modelId = nativeQueryRealization.getModelId();
-            val dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), project)
-                    .getDataflow(modelId);
-            nativeQueryRealization.setModelAlias(dataflow.getFusionModelAlias());
+            val dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), project).getDataflow(modelId);
+            nativeQueryRealization.setModelAlias(dataflow.getModelAlias());
         }
 
         return cached;

File: src/query/src/main/java/io/kyligence/kap/query/optrule/AbstractAggCaseWhenFunctionRule.java
Patch:
@@ -18,8 +18,8 @@
 
 package io.kyligence.kap.query.optrule;
 
-import static org.apache.kylin.query.util.KapQueryUtil.isCast;
-import static org.apache.kylin.query.util.KapQueryUtil.isNotNullLiteral;
+import static org.apache.kylin.query.util.QueryUtil.isCast;
+import static org.apache.kylin.query.util.QueryUtil.isNotNullLiteral;
 
 import java.math.BigDecimal;
 import java.util.ArrayList;

File: src/query/src/main/java/io/kyligence/kap/query/optrule/CountDistinctCaseWhenFunctionRule.java
Patch:
@@ -18,9 +18,9 @@
 
 package io.kyligence.kap.query.optrule;
 
-import static org.apache.kylin.query.util.KapQueryUtil.isCast;
-import static org.apache.kylin.query.util.KapQueryUtil.isNullLiteral;
-import static org.apache.kylin.query.util.KapQueryUtil.isPlainTableColumn;
+import static org.apache.kylin.query.util.QueryUtil.isCast;
+import static org.apache.kylin.query.util.QueryUtil.isNullLiteral;
+import static org.apache.kylin.query.util.QueryUtil.isPlainTableColumn;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/query/src/main/java/io/kyligence/kap/query/optrule/KapAggFilterTransposeRule.java
Patch:
@@ -40,7 +40,7 @@
 import org.apache.kylin.query.relnode.KapAggregateRel;
 import org.apache.kylin.query.relnode.KapFilterRel;
 import org.apache.kylin.query.relnode.KapJoinRel;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -68,7 +68,7 @@ public boolean matches(RelOptRuleCall call) {
         final KapJoinRel joinRel = call.rel(2);
 
         //Only one agg child of join is accepted
-        return KapQueryUtil.isJoinOnlyOneAggChild(joinRel);
+        return QueryUtil.isJoinOnlyOneAggChild(joinRel);
     }
 
     @Override

File: src/query/src/main/java/io/kyligence/kap/query/optrule/KapAggJoinTransposeRule.java
Patch:
@@ -51,7 +51,7 @@
 import org.apache.calcite.util.mapping.Mappings;
 import org.apache.kylin.query.relnode.KapAggregateRel;
 import org.apache.kylin.query.relnode.KapJoinRel;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
@@ -81,7 +81,7 @@ public boolean matches(RelOptRuleCall call) {
         final KapAggregateRel aggregate = call.rel(0);
         final KapJoinRel joinRel = call.rel(1);
         //Only one agg child of join is accepted
-        return !aggregate.isContainCountDistinct() && KapQueryUtil.isJoinOnlyOneAggChild(joinRel);
+        return !aggregate.isContainCountDistinct() && QueryUtil.isJoinOnlyOneAggChild(joinRel);
     }
 
     @Override

File: src/query/src/main/java/io/kyligence/kap/query/optrule/KapAggProjectMergeRule.java
Patch:
@@ -39,7 +39,7 @@
 import org.apache.kylin.query.relnode.KapFilterRel;
 import org.apache.kylin.query.relnode.KapJoinRel;
 import org.apache.kylin.query.relnode.KapProjectRel;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -77,7 +77,7 @@ public boolean matches(RelOptRuleCall call) {
         }
 
         //Only one agg child of join is accepted
-        if (!KapQueryUtil.isJoinOnlyOneAggChild(joinRel)) {
+        if (!QueryUtil.isJoinOnlyOneAggChild(joinRel)) {
             return false;
         }
 

File: src/query/src/main/java/io/kyligence/kap/query/optrule/KapAggProjectTransposeRule.java
Patch:
@@ -48,7 +48,7 @@
 import org.apache.kylin.query.relnode.KapFilterRel;
 import org.apache.kylin.query.relnode.KapJoinRel;
 import org.apache.kylin.query.relnode.KapProjectRel;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -89,7 +89,7 @@ public boolean matches(RelOptRuleCall call) {
         }
 
         //Only one agg child of join is accepted
-        if (!KapQueryUtil.isJoinOnlyOneAggChild(joinRel)) {
+        if (!QueryUtil.isJoinOnlyOneAggChild(joinRel)) {
             return false;
         }
 

File: src/query/src/main/java/io/kyligence/kap/query/optrule/KapCountDistinctJoinRule.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.calcite.util.ImmutableBitSet;
 import org.apache.kylin.query.relnode.KapAggregateRel;
 import org.apache.kylin.query.relnode.KapJoinRel;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
@@ -82,7 +82,7 @@ public KapCountDistinctJoinRule(RelOptRuleOperand operand, RelBuilderFactory rel
     public boolean matches(RelOptRuleCall call) {
         final KapAggregateRel aggregate = call.rel(0);
         final KapJoinRel join = call.rel(1);
-        return aggregate.isContainCountDistinct() && KapQueryUtil.isJoinOnlyOneAggChild(join);
+        return aggregate.isContainCountDistinct() && QueryUtil.isJoinOnlyOneAggChild(join);
     }
 
     @Override

File: src/query/src/main/java/io/kyligence/kap/query/optrule/KapSumCastTransposeRule.java
Patch:
@@ -18,8 +18,8 @@
 
 package io.kyligence.kap.query.optrule;
 
-import static org.apache.kylin.query.util.KapQueryUtil.containCast;
-import static org.apache.kylin.query.util.KapQueryUtil.isNotNullLiteral;
+import static org.apache.kylin.query.util.QueryUtil.containCast;
+import static org.apache.kylin.query.util.QueryUtil.isNotNullLiteral;
 
 import java.math.BigDecimal;
 import java.util.List;

File: src/second-storage/core-ui/src/test/java/org/apache/kylin/rest/service/ModelServiceWithSecondStorageTest.java
Patch:
@@ -38,7 +38,7 @@
 import org.apache.kylin.metadata.project.NProjectManager;
 import org.apache.kylin.metadata.query.QueryTimesResponse;
 import org.apache.kylin.metadata.recommendation.candidate.JdbcRawRecStore;
-import org.apache.kylin.query.util.KapQueryUtil;
+import org.apache.kylin.query.util.QueryUtil;
 import org.apache.kylin.rest.config.initialize.ModelBrokenListener;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.request.ModelRequest;
@@ -141,7 +141,7 @@ public void setup() throws IOException {
         ReflectionTestUtils.setField(semanticService, "userGroupService", userGroupService);
         ReflectionTestUtils.setField(semanticService, "expandableMeasureUtil",
                 new ExpandableMeasureUtil((model, ccDesc) -> {
-                    String ccExpression = KapQueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
+                    String ccExpression = QueryUtil.massageComputedColumn(model, model.getProject(), ccDesc,
                             AclPermissionUtil.prepareQueryContextACLInfo(model.getProject(),
                                     semanticService.getCurrentUserGroups()));
                     ccDesc.setInnerExpression(ccExpression);

File: src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java
Patch:
@@ -289,7 +289,7 @@ private List<ColumnDesc> listTableColumnsIncludingCC() {
             allColumns.addAll(Lists.newArrayList(ccAsColumnDesc));
         }
 
-        return allColumns;
+        return allColumns.stream().distinct().collect(Collectors.toList());
     }
 
     // since computed columns are either of different expr and different names,

File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.kylin.rest.config.initialize;
 
 import java.io.IOException;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.persistence.ResourceStore;
@@ -93,8 +94,8 @@ public void onProjectControlled(ProjectControlledNotifier notifier) throws IOExc
             }
 
             log.info("start thread of project: {}", project);
+            NDefaultScheduler scheduler = NDefaultScheduler.getInstance(project);
             EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {
-                NDefaultScheduler scheduler = NDefaultScheduler.getInstance(project);
                 scheduler.init(new JobEngineConfig(kylinConfig));
                 if (!scheduler.hasStarted()) {
                     throw new RuntimeException("Scheduler for " + project + " has not been started");
@@ -104,7 +105,6 @@ public void onProjectControlled(ProjectControlledNotifier notifier) throws IOExc
                 if (!ss.getHasStarted().get()) {
                     throw new RuntimeException("Streaming Scheduler for " + project + " has not been started");
                 }
-
                 QueryHistoryTaskScheduler qhAccelerateScheduler = QueryHistoryTaskScheduler.getInstance(project);
                 qhAccelerateScheduler.init();
 
@@ -115,6 +115,7 @@ public void onProjectControlled(ProjectControlledNotifier notifier) throws IOExc
                 recommendationUpdateScheduler.addProject(project);
                 return 0;
             }, project, 1);
+            scheduler.setHasFinishedTransactions(new AtomicBoolean(true));
         } else {
             //TODO need global leader
             CreateAdminUserUtils.createAllAdmins(userService, env);

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/FusionModel.java
Patch:
@@ -120,7 +120,7 @@ public NDataModel getModelByType(NDataModel.ModelType modelType) {
         NDataModelManager modelManager = NDataModelManager.getInstance(config, project);
         for (String modelId : getModelsId()) {
             NDataModel model = modelManager.getDataModelDesc(modelId);
-            if (model.getModelType() == modelType) {
+            if (model != null && model.getModelType() == modelType) {
                 return model;
             }
         }

File: src/job-service/src/main/java/org/apache/kylin/rest/service/AsyncTaskService.java
Patch:
@@ -128,7 +128,7 @@ private void fillingModelAlias(KylinConfig kylinConfig, String project, QueryHis
         val noBrokenModels = NDataflowManager.getInstance(kylinConfig, project).listUnderliningDataModels().stream()
                 .collect(Collectors.toMap(NDataModel::getAlias, RootPersistentEntity::getUuid));
         val dataModelManager = NDataModelManager.getInstance(kylinConfig, project);
-        List<NativeQueryRealization> realizations = qh.transformRealizations();
+        List<NativeQueryRealization> realizations = qh.transformRealizations(project);
 
         realizations.forEach(realization -> {
             NDataModel nDataModel = dataModelManager.getDataModelDesc(realization.getModelId());

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryCacheManager.java
Patch:
@@ -195,7 +195,7 @@ public SQLResponse searchSuccessCache(SQLRequest sqlRequest) {
             val modelId = nativeQueryRealization.getModelId();
             val dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), project)
                     .getDataflow(modelId);
-            nativeQueryRealization.setModelAlias(dataflow.getModelAlias());
+            nativeQueryRealization.setModelAlias(dataflow.getFusionModelAlias());
         }
 
         return cached;

File: src/query/src/test/java/org/apache/kylin/query/util/QueryUtilTest.java
Patch:
@@ -34,8 +34,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import io.kyligence.kap.query.util.KapQueryUtil;
-
 public class QueryUtilTest extends NLocalFileMetadataTestCase {
 
     @Before

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/JobService.java
Patch:
@@ -987,6 +987,7 @@ public void updateStageStatus(String project, String taskId, String segmentId, S
         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {
             val executableManager = getManager(NExecutableManager.class, project);
             executableManager.updateStageStatus(taskId, segmentId, newStatus, updateInfo, errMsg);
+            executableManager.saveUpdatedJob();
             return null;
         }, project, UnitOfWork.DEFAULT_MAX_RETRY, UnitOfWork.DEFAULT_EPOCH_ID, jobId);
     }

File: src/job-service/src/test/java/org/apache/kylin/rest/service/JobErrorTest.java
Patch:
@@ -387,7 +387,7 @@ public void testGetDuration() throws InterruptedException {
         manager.addJob(executable);
 
         var output = manager.getOutput(executable.getId());
-        final long[] duration = {AbstractExecutable.getDuration(output)};
+        final long[] duration = { AbstractExecutable.getDuration(output) };
         Assert.assertEquals(0, duration[0]);
 
         ((DefaultOutput) output).setStartTime(System.currentTimeMillis());
@@ -442,6 +442,7 @@ public void testGetDurationWithoutWaiteTimeFromTwoSegment() throws JsonProcessin
         manager.updateStageStatus(logicStep1.getId(), null, ExecutableState.RUNNING, null, null);
         manager.updateStageStatus(logicStep2.getId(), null, ExecutableState.RUNNING, null, null);
         manager.updateStageStatus(logicStep3.getId(), null, ExecutableState.RUNNING, null, null);
+        manager.saveUpdatedJob();
 
         val durationWithoutWaiteTime = executable.getDurationFromStepOrStageDurationSum();
 
@@ -487,6 +488,7 @@ public void testGetDurationWithoutWaiteTimeFromSingleSegment() throws JsonProces
         manager.updateStageStatus(logicStep1.getId(), null, ExecutableState.RUNNING, null, null);
         manager.updateStageStatus(logicStep2.getId(), null, ExecutableState.RUNNING, null, null);
         manager.updateStageStatus(logicStep3.getId(), null, ExecutableState.RUNNING, null, null);
+        manager.saveUpdatedJob();
 
         val durationWithoutWaiteTime = executable.getDurationFromStepOrStageDurationSum();
 

File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/job/NSparkExecutable.java
Patch:
@@ -206,8 +206,9 @@ public String getDistMetaUrl() {
     public void waiteForResourceStart(ExecutableContext context) {
         // mark waiteForResource stage start
         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {
-            getExecutableManager(getProject()) //
-                    .updateStageStatus(getId() + "_00", null, ExecutableState.RUNNING, null, null);
+            NExecutableManager manager = getExecutableManager(getProject());
+            manager.updateStageStatus(getId() + "_00", null, ExecutableState.RUNNING, null, null);
+            manager.saveUpdatedJob();
             return 0;
         }, project, UnitOfWork.DEFAULT_MAX_RETRY, context.getEpochId(), getTempLockName());
     }

File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/ModelSemanticHelper.java
Patch:
@@ -1114,7 +1114,7 @@ private List<ComputedColumnDesc> discardInvalidComputedColumnsForBrokenModel(Set
         return computedColumnDescs.stream().map(ccDesc -> {
             AtomicBoolean isValidCC = new AtomicBoolean(true);
             List<Pair<String, String>> colsWithAlias = ComputedColumnUtil.ExprIdentifierFinder
-                    .getExprIdentifiers(ccDesc.getInnerExpression());
+                    .getExprIdentifiers(ccDesc.getExpression());
             colsWithAlias.forEach(c -> {
                 String column = c.getFirst() + "." + c.getSecond();
                 if (!aliasDotColSet.contains(column)) {

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -2931,7 +2931,6 @@ public String getSpringStoreType() {
         return getOptional("spring.session.store-type", "");
     }
 
-
     public int getJdbcSessionMaxInactiveInterval() {
         return Integer.parseInt(getOptional("spring.session.timeout", "3600"));
     }

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -163,10 +163,10 @@ public static String getSparkHome() {
     }
 
     public Map<String, String> getReadonlyProperties() {
-        val substitutor = getSubstitutor();
+        val subStitutorTmp = getSubstitutor();
         HashMap<String, String> config = Maps.newHashMap();
         for (Entry<Object, Object> entry : this.properties.entrySet()) {
-            config.put((String) entry.getKey(), substitutor.replace((String) entry.getValue()));
+            config.put((String) entry.getKey(), subStitutorTmp.replace((String) entry.getValue()));
         }
         return config;
     }

File: src/core-common/src/main/java/org/apache/kylin/common/KylinExternalConfigLoader.java
Patch:
@@ -167,6 +167,7 @@ public String getProperty(String key) {
 
     /**
      * @see #getPropertyEntries
+     * @deprecated
      */
     @Override
     @Deprecated

File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/SecondStorageIndexTest.java
Patch:
@@ -505,7 +505,7 @@ private void testHasData(String modelId) {
             assertEquals(SecondStorageIndexLoadStatus.ALL, r.getPrimaryIndexStatus());
             assertEquals(SecondStorageIndexLoadStatus.ALL, r.getSecondaryIndexStatus());
         });
-
+        
         secondStorageService.triggerSegmentsClean(getProject(), modelId,
                 getDataFlow(modelId).getSegments().stream().map(NDataSegment::getId).collect(Collectors.toSet()));
         waitAllJoEnd();

File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/SecondStorageIndexTest.java
Patch:
@@ -349,7 +349,7 @@ private void testClickhouseDown(JdbcDatabaseContainer<?>[] clickhouse, String mo
         String jobId = updatePrimaryIndexAndSecondaryIndex(modelName, null, Sets.newHashSet());
         waitJobEnd(getProject(), jobId);
 
-        assertThrows(String.format(Locale.ROOT, MsgPicker.getMsg().getSecondStorageProjectJobExists(), getProject()),
+        assertThrows(String.format(Locale.ROOT, MsgPicker.getMsg().getSecondStorageConcurrentOperate(), getProject()),
                 KylinException.class, () -> updatePrimaryIndexAndSecondaryIndex(modelName, null, secondaryIndex));
         clickhouse[0].start();
         ClickHouseUtils.internalConfigClickHouse(clickhouse, replica);

File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java
Patch:
@@ -91,6 +91,7 @@ public class RealizationPruner {
             SqlKind.LESS_THAN, SqlKind.LESS_THAN_OR_EQUAL, //
             SqlKind.IN, SqlKind.NOT_IN, //
             SqlKind.EQUALS, SqlKind.NOT_EQUALS);
+
     private RealizationPruner() {
     }
 
@@ -145,6 +146,7 @@ public static List<NDataSegment> pruneSegments(NDataflow dataflow, OLAPContext o
         // sql filter condition is always false
         if (simplifiedSqlFilter.isAlwaysFalse()) {
             log.info("SQL filter condition is always false, pruning all ready segments");
+            olapContext.storageContext.setFilterCondAlwaysFalse(true);
             return selectedSegments;
         }
         // sql filter condition is always true

File: src/core-metadata/src/main/java/org/apache/kylin/metrics/HdfsCapacityMetrics.java
Patch:
@@ -155,7 +155,9 @@ public static ConcurrentMap<String, Long> readHdfsMetrics() {
      */
     public static Long getHdfsCapacityByProject(String project) {
         if (hdfsMetricsPeriodicCalculationEnabled) {
-            return workingDirCapacity.getOrDefault(project, 0L);
+            // Writing numbers in JSON may be read as integer
+            Object orDefault = workingDirCapacity.getOrDefault(project, 0L);
+            return Long.parseLong(orDefault.toString());
         }
         return -1L;
     }

File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java
Patch:
@@ -133,7 +133,6 @@ public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSeg
     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,
             List<NDataSegment> prunedStreamingSegments, Map<String, Set<Long>> secondStorageSegmentLayoutMap) {
         CapabilityResult result = new CapabilityResult();
-        result.cost = Integer.MAX_VALUE;
 
         resolveSegmentsOverlap(prunedStreamingSegments);
         for (IRealization realization : getRealizations()) {

File: src/second-storage/core/src/main/java/io/kyligence/kap/secondstorage/metadata/TableData.java
Patch:
@@ -281,6 +281,7 @@ public void removeNodes(List<String> nodeNames) {
                     .setShardNodes(shardNodes)
                     .setSizeInNode(sizeInNode)
                     .setNodeFileMap(nodeFileMap)
+                    .setSecondaryIndexColumns(partition.getSecondaryIndexColumns())
                     .build();
         }).collect(Collectors.toList());
 

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
Patch:
@@ -3616,7 +3616,7 @@ public boolean skipCheckTds() {
     }
 
     public boolean isHdfsMetricsPeriodicCalculationEnabled() {
-        return Boolean.parseBoolean(getOptional("kylin.metrics.hdfs-periodic-calculation-enabled", FALSE));
+        return Boolean.parseBoolean(getOptional("kylin.metrics.hdfs-periodic-calculation-enabled", TRUE));
     }
 
     public long getHdfsMetricsPeriodicCalculationInterval() {

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -1258,6 +1258,7 @@ void testSnapshotAutoRefresh() {
     @Test
     void testIsHdfsMetricsPeriodicCalculationEnabled() {
         KylinConfig config = KylinConfig.getInstanceFromEnv();
+        config.setProperty("kylin.metrics.hdfs-periodic-calculation-enabled", "false");
         assertFalse(config.isHdfsMetricsPeriodicCalculationEnabled());
         config.setProperty("kylin.metrics.hdfs-periodic-calculation-enabled", "true");
         assertTrue(config.isHdfsMetricsPeriodicCalculationEnabled());

File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/SecondStorageIndexTest.java
Patch:
@@ -349,7 +349,7 @@ private void testClickhouseDown(JdbcDatabaseContainer<?>[] clickhouse, String mo
         String jobId = updatePrimaryIndexAndSecondaryIndex(modelName, null, Sets.newHashSet());
         waitJobEnd(getProject(), jobId);
 
-        assertThrows(String.format(Locale.ROOT, MsgPicker.getMsg().getSecondStorageProjectJobExists(), getProject()),
+        assertThrows(String.format(Locale.ROOT, MsgPicker.getMsg().getSecondStorageConcurrentOperate(), getProject()),
                 KylinException.class, () -> updatePrimaryIndexAndSecondaryIndex(modelName, null, secondaryIndex));
         clickhouse[0].start();
         ClickHouseUtils.internalConfigClickHouse(clickhouse, replica);

File: src/common-booter/src/main/java/org/apache/kylin/rest/CommonBootstrapServer.java
Patch:
@@ -21,15 +21,13 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.cache.annotation.EnableCaching;
-import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
 import org.springframework.cloud.openfeign.EnableFeignClients;
 import org.springframework.context.annotation.ImportResource;
 
 @ImportResource(locations = { "applicationContext.xml", "kylinSecurity.xml" })
 @SpringBootApplication
-@EnableDiscoveryClient
 @EnableCaching
-@EnableFeignClients(basePackages = { "io.kyligence", "org.apache.kylin" })
+@EnableFeignClients
 public class CommonBootstrapServer {
 
     public static void main(String[] args) {

File: src/common-server/src/main/java/org/apache/kylin/rest/controller/HealthController.java
Patch:
@@ -54,7 +54,7 @@
 
 @Log4j
 @Controller
-@RequestMapping(value = "/api/health", produces = { HTTP_VND_APACHE_KYLIN_JSON, HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON })
+@RequestMapping(value = "/api/kg/health", produces = { HTTP_VND_APACHE_KYLIN_JSON, HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON })
 public class HealthController extends NBasicController {
 
     private static final int MAX_TOKEN_LENGTH = 64;

File: src/common-service/src/main/java/org/apache/kylin/rest/cache/RedisCache.java
Patch:
@@ -332,11 +332,11 @@ public Object get(String type, String project, Object key) {
                 }
                 logger.trace("redis get start");
                 sqlResp = jedisCluster.get(realKey);
-                logger.trace("redis get done, size = {}bytes", sqlResp.length);
+                logger.trace("redis get done, size = {}bytes", sqlResp == null ? 0 : sqlResp.length);
             } else {
                 logger.trace("redis get start");
                 sqlResp = singleRedisGet(realKey);
-                logger.trace("redis get done, size = {}bytes", sqlResp.length);
+                logger.trace("redis get done, size = {}bytes", sqlResp == null ? 0 : sqlResp.length);
             }
         } catch (JedisConnectionException | JedisClusterException e) {
             logger.error("Get jedis connection failed: ", e);

File: src/common-service/src/main/java/org/apache/kylin/rest/handler/resourcegroup/ResourceGroupDisabledValidator.java
Patch:
@@ -18,12 +18,11 @@
 
 package org.apache.kylin.rest.handler.resourcegroup;
 
-import static org.apache.kylin.common.exception.ServerErrorCode.INVALID_PARAMETER;
+import static org.apache.kylin.common.exception.code.ErrorCodeServer.RESOURCE_GROUP_DISABLE_FAILED;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.kylin.common.KylinConfig;
 import org.apache.kylin.common.exception.KylinException;
-import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.metadata.resourcegroup.ResourceGroupManager;
 import org.apache.kylin.rest.request.resourecegroup.ResourceGroupRequest;
 import org.springframework.core.annotation.Order;
@@ -46,6 +45,6 @@ public void validate(ResourceGroupRequest request) {
                 && CollectionUtils.isEmpty(request.getResourceGroupMappingInfoList())) {
             return;
         }
-        throw new KylinException(INVALID_PARAMETER, MsgPicker.getMsg().getResourceGroupDisabledWithInvliadParam());
+        throw new KylinException(RESOURCE_GROUP_DISABLE_FAILED);
     }
 }

File: src/common-service/src/main/java/org/apache/kylin/rest/handler/resourcegroup/ResourceGroupEnabledValidator.java
Patch:
@@ -18,11 +18,10 @@
 
 package org.apache.kylin.rest.handler.resourcegroup;
 
-import static org.apache.kylin.common.exception.ServerErrorCode.INVALID_PARAMETER;
+import static org.apache.kylin.common.exception.code.ErrorCodeServer.RESOURCE_GROUP_ENABLE_FAILED;
 
 import org.apache.commons.collections.CollectionUtils;
 import org.apache.kylin.common.exception.KylinException;
-import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.rest.request.resourecegroup.ResourceGroupRequest;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
@@ -38,6 +37,6 @@ public void validate(ResourceGroupRequest request) {
         if (CollectionUtils.isNotEmpty(request.getResourceGroupEntities())) {
             return;
         }
-        throw new KylinException(INVALID_PARAMETER, MsgPicker.getMsg().getResourceCanNotBeEmpty());
+        throw new KylinException(RESOURCE_GROUP_ENABLE_FAILED);
     }
 }

File: src/common-service/src/main/java/org/apache/kylin/rest/interceptor/ProjectInfoParser.java
Patch:
@@ -141,6 +141,9 @@ public static class ProjectRequest {
     }
 
     static String extractProject(String url) {
+        if (ProjectInfoParserConstant.INSTANCE.PROJECT_PARSER_URI_EXCLUDED_LIST.contains(url)) {
+            return null;
+        }
         for (String needParserURI : ProjectInfoParserConstant.INSTANCE.PROJECT_PARSER_URI_LIST) {
             val uriTemplate = new UriTemplate(needParserURI);
             val kvMap = new HashMap<String, String>();

File: src/common-service/src/main/java/org/apache/kylin/rest/request/DiagPackageRequest.java
Patch:
@@ -27,4 +27,6 @@ public class DiagPackageRequest {
     private String end;
     @JsonProperty("job_id")
     private String jobId;
+    @JsonProperty("project")
+    private String project;
 }

File: src/common-service/src/main/java/org/apache/kylin/rest/service/ProjectSmartServiceSupporter.java
Patch:
@@ -24,5 +24,6 @@ public interface ProjectSmartServiceSupporter {
 
     Map<String, Object> getFavoriteRules(String project);
 
-    void cleanupGarbage(String project) throws Exception;
+    void cleanupGarbage(String project, long remainingTime);
+
 }

File: src/core-common/src/main/java/org/apache/kylin/common/constant/NonCustomProjectLevelConfig.java
Patch:
@@ -49,6 +49,8 @@ public enum NonCustomProjectLevelConfig {
     MULTI_PARTITION_ENABLED("kylin.model.multi-partition-enabled"),
 
     SNAPSHOT_MANUAL_MANAGEMENT_ENABLED("kylin.snapshot.manual-management-enabled"),
+    SNAPSHOT_AUTO_REFRESH_ENABLED("kylin.snapshot.auto-refresh-enabled"),
+    SNAPSHOT_AUTO_REFRESH_CRON("kylin.snapshot.auto-refresh-cron"),
 
     EXPOSE_COMPUTED_COLUMN("kylin.query.metadata.expose-computed-column"), OLD_EXPOSE_COMPUTED_COLUMN(
             "kap.query.metadata.expose-computed-column"),

File: src/core-common/src/main/java/org/apache/kylin/common/metrics/MetricsReporter.java
Patch:
@@ -21,7 +21,9 @@
 import org.apache.kylin.common.KapConfig;
 
 public interface MetricsReporter {
-    void init(KapConfig props) throws Exception;
+    void init(KapConfig props);
+
+    void start(KapConfig kapConfig);
 
     void startReporter(int pollingPeriodInSeconds);
 

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/AuditLogStore.java
Patch:
@@ -43,8 +43,6 @@ public interface AuditLogStore extends Closeable {
 
     void catchup();
 
-    void forceCatchup();
-
     void setInstance(String instance);
 
     AuditLog get(String resPath, long mvcc);

File: src/core-common/src/main/java/org/apache/kylin/common/persistence/metadata/JdbcMetadataStore.java
Patch:
@@ -71,7 +71,7 @@ public class JdbcMetadataStore extends MetadataStore {
     static final String META_TABLE_TS = "META_TABLE_TS";
     static final String META_TABLE_MVCC = "META_TABLE_MVCC";
 
-    private static final String SELECT_TERM = "select ";
+    public static final String SELECT_TERM = "select ";
 
     private static final String SELECT_ALL_KEY_SQL = SELECT_TERM + META_TABLE_KEY + " from %s";
     private static final String SELECT_BY_RANGE_SQL = SELECT_TERM

File: src/core-common/src/test/java/org/apache/kylin/common/PropertiesDelegateTest.java
Patch:
@@ -103,9 +103,9 @@ void testKeys() {
             keys.add((String) enumer.nextElement());
         }
 
-        Assertions.assertEquals(4, keys.size());
+        Assertions.assertEquals(3, keys.size());
 
-        Assertions.assertEquals("key_in_external, key_in_prop, key_override_external, key_override_external",
+        Assertions.assertEquals("key_in_external, key_in_prop, key_override_external",
                 keys.stream().sorted().collect(Collectors.joining(", ")));
     }
 
@@ -135,4 +135,4 @@ void testEqualsAndHashCode() {
         sets.add(properties);
         Assertions.assertEquals(4, sets.size());
     }
-}
\ No newline at end of file
+}

File: src/core-common/src/test/java/org/apache/kylin/common/ShellKylinExternalConfigLoaderFactoryTest.java
Patch:
@@ -55,7 +55,7 @@ void testGetConfigLoaderByConfigYaml() throws IOException {
                 + "          type: nacos\n" + "          properties:\n"
                 + "            app: \"${APP_NAME:ShellKylinExternalConfigLoaderFactoryTest}\"\n"
                 + "            zhName: \"${APP_DISPLAY_NAME}\"\n"
-                + "            dataIds: \"${APP_NAME:yinglong-common-booter}-kylin-config\"\n"
+                + "            dataIds: \"${APP_NAME:common-booter}-kylin-config\"\n"
                 + "            group: \"${TENANT_ID}\"\n" + "            autoRefresh: true\n"
                 + "            needInit: true\n"
                 + "            initConfigContent: \"${KYLIN_HOME}/conf/init.properties\"\n"
@@ -83,7 +83,7 @@ void testGetConfigLoaderWithConfigYamlAndUSE_LEGACY_CONFIG() throws IOException
                 + "          type: nacos\n" + "          properties:\n"
                 + "            app: \"${APP_NAME:ShellKylinExternalConfigLoaderFactoryTest}\"\n"
                 + "            zhName: \"${APP_DISPLAY_NAME}\"\n"
-                + "            dataIds: \"${APP_NAME:yinglong-common-booter}-kylin-config\"\n"
+                + "            dataIds: \"${APP_NAME:common-booter}-kylin-config\"\n"
                 + "            group: \"${TENANT_ID}\"\n" + "            autoRefresh: true\n"
                 + "            needInit: true\n"
                 + "            initConfigContent: \"${KYLIN_HOME}/conf/init.properties\"\n"
@@ -97,4 +97,4 @@ void testGetConfigLoaderWithConfigYamlAndUSE_LEGACY_CONFIG() throws IOException
             Assertions.assertInstanceOf(KylinExternalConfigLoader.class, configLoader);
         }
     }
-}
\ No newline at end of file
+}

File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NEpochControllerTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_JSON;
 
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.rest.service.EpochService;
@@ -63,7 +63,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java
Patch:
@@ -600,7 +600,7 @@ public StorageURL getMetadataUrlFromProperties(Properties properties) {
     }
 
     public String getOptionalFromProperties(String prop, String dft, Properties properties) {
-        final String property = System.getProperty(prop);
+        final String property = SystemPropertiesCache.getProperty(prop);
         return property != null ? getSubstitutor().replace(property)
                 : getSubstitutor().replace(properties.getProperty(prop, dft));
     }

File: src/core-common/src/test/java/org/apache/kylin/common/AbstractTestCase.java
Patch:
@@ -80,9 +80,9 @@ public final void restoreSystemProps() {
     /** Clear system property in test method with annotation {@link org.junit.Test} */
     public final void restoreSystemProp(String property) {
         if (!METHOD_PROPERTY_MAP.containsKey(property) || METHOD_PROPERTY_MAP.get(property) == null) {
-            KylinConfigBase.clearSystemProperty(property);
+            SystemPropertiesCache.clearProperty(property);
         } else {
-            KylinConfigBase.setSystemProperty(property, METHOD_PROPERTY_MAP.get(property));
+            SystemPropertiesCache.setProperty(property, METHOD_PROPERTY_MAP.get(property));
         }
         METHOD_PROPERTY_MAP.remove(property);
     }

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigBaseTest.java
Patch:
@@ -60,6 +60,7 @@
 import org.apache.kylin.common.constant.NonCustomProjectLevelConfig;
 import org.apache.kylin.common.util.ProcessUtils;
 import org.apache.kylin.junit.annotation.MetadataInfo;
+import org.apache.kylin.junit.annotation.OverwriteProp;
 import org.junit.Assert;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Timeout;
@@ -1108,8 +1109,7 @@ void getIsMetadataKeyCaseInSensitiveEnabled() {
         Assert.assertFalse(metadataKeyCaseInSensitiveEnabled);
     }
 
-    @SetSystemProperty.SetSystemProperties({
-            @SetSystemProperty(key = "kylin.metadata.key-case-insensitive", value = "true"), })
+    @OverwriteProp(key = "kylin.metadata.key-case-insensitive", value = "true")
     @Test
     void getIsMetadataKeyCaseInSensitiveEnabled2() {
         KylinConfig config = KylinConfig.getInstanceFromEnv();

File: src/core-common/src/test/java/org/apache/kylin/common/KylinConfigTest.java
Patch:
@@ -173,7 +173,7 @@ public void testOverrideSparkJobJarPath() {
         if (StringUtils.isBlank(oldSparkJobJarPath)) {
             // remove property, otherwise org.apache.kylin.common.KylinConfigBase.getOptional(java.lang.String, java.lang.String)
             // will return empty str
-            System.clearProperty("kylin.engine.spark.job-jar");
+            SystemPropertiesCache.clearProperty("kylin.engine.spark.job-jar");
         } else {
             conf.overrideSparkJobJarPath(oldSparkJobJarPath);
         }

File: src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java
Patch:
@@ -25,9 +25,9 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.Singletons;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.persistence.ResourceStore;
 import org.apache.kylin.common.util.TempMetadataBuilder;
 import org.apache.kylin.common.util.Unsafe;
@@ -101,7 +101,7 @@ public File get() {
             cleanSingletonInstances();
 
             val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();
-            KylinConfigBase.setSystemProperty("KYLIN_HOME", kylinHomePath);
+            SystemPropertiesCache.setProperty("KYLIN_HOME", kylinHomePath);
             val jobJar = org.apache.kylin.common.util.FileUtils.findFile(
                     new File(kylinHomePath, "../../../assembly/target/").getAbsolutePath(), "kylin-assembly(.?)\\.jar");
             getTestConfig().setProperty("kylin.engine.spark.job-jar", jobJar == null ? "" : jobJar.getAbsolutePath());
@@ -113,7 +113,7 @@ public File get() {
         public void close() throws Throwable {
             cleanSingletonInstances();
             clearTestConfig();
-            System.clearProperty("KYLIN_HOME");
+            SystemPropertiesCache.clearProperty("KYLIN_HOME");
             QueryContext.reset();
 
             FileUtils.deleteQuietly(tempMetadataDirectory);

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/StreamingJobControllerTest.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.job.execution.JobTypeEnum;
 import org.apache.kylin.metadata.model.SegmentRange;
@@ -103,7 +103,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/StreamingTableServiceTest.java
Patch:
@@ -22,7 +22,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.scheduler.EventBusFactory;
@@ -95,7 +95,7 @@ public void setup() {
         projectManager.forceDropProject("broken_test");
         projectManager.forceDropProject("bad_query_test");
 
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
 
         ReflectionTestUtils.setField(aclEvaluate, "aclUtil", aclUtil);
         ReflectionTestUtils.setField(streamingTableService, "aclEvaluate", aclEvaluate);

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/KafkaControllerTest.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Arrays;
 import java.util.HashMap;
 
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.util.AclEvaluate;
@@ -85,7 +85,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/StreamingTableControllerTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_JSON;
 
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.rest.constant.Constant;
@@ -91,7 +91,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/server-base/src/test/java/org/apache/kylin/rest/controller/open/OpenStreamingJobControllerTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Collections;
 
 import org.apache.commons.lang.StringUtils;
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.job.execution.JobTypeEnum;
@@ -81,7 +81,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/HiveTransactionTableHelperTest.java
Patch:
@@ -43,7 +43,7 @@
 
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.metadata.model.ColumnDesc;
 import org.apache.kylin.metadata.model.PartitionDesc;
@@ -97,8 +97,8 @@ public void testNew() {
     @Test
     public void testDoGetQueryHiveTemporaryTableSql() {
         // Init needed variable parameters
-        KylinConfigBase.setSystemProperty("kylin.source.provider.9", "org.apache.kylin.engine.spark.source.NSparkDataSource");
-        KylinConfigBase.setSystemProperty("kylin.build.resource.read-transactional-table-enabled", "true");
+        SystemPropertiesCache.setProperty("kylin.source.provider.9", "org.apache.kylin.engine.spark.source.NSparkDataSource");
+        SystemPropertiesCache.setProperty("kylin.build.resource.read-transactional-table-enabled", "true");
         KylinBuildEnv kylinBuildEnv = KylinBuildEnv.getOrCreate(getTestConfig());
         NTableMetadataManager tableMgr = NTableMetadataManager.getInstance(getTestConfig(), "tdh");
         TableDesc fact = tableMgr.getTableDesc("TDH_TEST.LINEORDER_PARTITION");

File: src/streaming-service/src/test/java/org/apache/kylin/rest/service/StreamingJobServiceTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.KylinConfig;
-import org.apache.kylin.common.KylinConfigBase;
+import org.apache.kylin.common.SystemPropertiesCache;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.scheduler.EventBusFactory;
@@ -122,7 +122,7 @@ public class StreamingJobServiceTest extends CSVSourceTestCase {
     @Before
     public void setup() {
         super.setup();
-        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
+        SystemPropertiesCache.setProperty("HADOOP_USER_NAME", "root");
 
         ReflectionTestUtils.setField(aclEvaluate, "aclUtil", aclUtil);
         ReflectionTestUtils.setField(streamingJobService, "aclEvaluate", aclEvaluate);

File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NEpochControllerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_JSON;
 
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.rest.service.EpochService;
@@ -62,7 +63,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/core-common/src/test/java/org/apache/kylin/common/AbstractTestCase.java
Patch:
@@ -80,9 +80,9 @@ public final void restoreSystemProps() {
     /** Clear system property in test method with annotation {@link org.junit.Test} */
     public final void restoreSystemProp(String property) {
         if (!METHOD_PROPERTY_MAP.containsKey(property) || METHOD_PROPERTY_MAP.get(property) == null) {
-            System.clearProperty(property);
+            KylinConfigBase.clearSystemProperty(property);
         } else {
-            System.setProperty(property, METHOD_PROPERTY_MAP.get(property));
+            KylinConfigBase.setSystemProperty(property, METHOD_PROPERTY_MAP.get(property));
         }
         METHOD_PROPERTY_MAP.remove(property);
     }

File: src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java
Patch:
@@ -25,6 +25,7 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.QueryContext;
 import org.apache.kylin.common.Singletons;
 import org.apache.kylin.common.persistence.ResourceStore;
@@ -100,7 +101,7 @@ public File get() {
             cleanSingletonInstances();
 
             val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();
-            System.setProperty("KYLIN_HOME", kylinHomePath);
+            KylinConfigBase.setSystemProperty("KYLIN_HOME", kylinHomePath);
             val jobJar = org.apache.kylin.common.util.FileUtils.findFile(
                     new File(kylinHomePath, "../../../assembly/target/").getAbsolutePath(), "kylin-assembly(.?)\\.jar");
             getTestConfig().setProperty("kylin.engine.spark.job-jar", jobJar == null ? "" : jobJar.getAbsolutePath());

File: src/data-loading-server/src/test/java/org/apache/kylin/rest/controller/StreamingJobControllerTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.job.execution.JobTypeEnum;
 import org.apache.kylin.metadata.model.SegmentRange;
@@ -102,7 +103,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/StreamingTableServiceTest.java
Patch:
@@ -22,6 +22,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.scheduler.EventBusFactory;
@@ -94,7 +95,7 @@ public void setup() {
         projectManager.forceDropProject("broken_test");
         projectManager.forceDropProject("bad_query_test");
 
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
 
         ReflectionTestUtils.setField(aclEvaluate, "aclUtil", aclUtil);
         ReflectionTestUtils.setField(streamingTableService, "aclEvaluate", aclEvaluate);

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/KafkaControllerTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Arrays;
 import java.util.HashMap;
 
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.rest.constant.Constant;
 import org.apache.kylin.rest.util.AclEvaluate;
@@ -84,7 +85,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/StreamingTableControllerTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_JSON;
 
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.metadata.model.TableDesc;
 import org.apache.kylin.rest.constant.Constant;
@@ -90,7 +91,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/server-base/src/test/java/org/apache/kylin/rest/controller/open/OpenStreamingJobControllerTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Collections;
 
 import org.apache.commons.lang.StringUtils;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.util.JsonUtil;
 import org.apache.kylin.common.util.NLocalFileMetadataTestCase;
 import org.apache.kylin.job.execution.JobTypeEnum;
@@ -80,7 +81,7 @@ public void setup() {
 
     @Before
     public void setupResource() {
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
         createTestMetadata();
     }
 

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/HiveTransactionTableHelperTest.java
Patch:
@@ -43,6 +43,7 @@
 
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.util.HadoopUtil;
 import org.apache.kylin.metadata.model.ColumnDesc;
 import org.apache.kylin.metadata.model.PartitionDesc;
@@ -96,8 +97,8 @@ public void testNew() {
     @Test
     public void testDoGetQueryHiveTemporaryTableSql() {
         // Init needed variable parameters
-        System.setProperty("kylin.source.provider.9", "org.apache.kylin.engine.spark.source.NSparkDataSource");
-        System.setProperty("kylin.build.resource.read-transactional-table-enabled", "true");
+        KylinConfigBase.setSystemProperty("kylin.source.provider.9", "org.apache.kylin.engine.spark.source.NSparkDataSource");
+        KylinConfigBase.setSystemProperty("kylin.build.resource.read-transactional-table-enabled", "true");
         KylinBuildEnv kylinBuildEnv = KylinBuildEnv.getOrCreate(getTestConfig());
         NTableMetadataManager tableMgr = NTableMetadataManager.getInstance(getTestConfig(), "tdh");
         TableDesc fact = tableMgr.getTableDesc("TDH_TEST.LINEORDER_PARTITION");

File: src/streaming-service/src/test/java/org/apache/kylin/rest/service/StreamingJobServiceTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.kylin.common.KylinConfig;
+import org.apache.kylin.common.KylinConfigBase;
 import org.apache.kylin.common.exception.KylinException;
 import org.apache.kylin.common.msg.MsgPicker;
 import org.apache.kylin.common.scheduler.EventBusFactory;
@@ -121,7 +122,7 @@ public class StreamingJobServiceTest extends CSVSourceTestCase {
     @Before
     public void setup() {
         super.setup();
-        System.setProperty("HADOOP_USER_NAME", "root");
+        KylinConfigBase.setSystemProperty("HADOOP_USER_NAME", "root");
 
         ReflectionTestUtils.setField(aclEvaluate, "aclUtil", aclUtil);
         ReflectionTestUtils.setField(streamingJobService, "aclEvaluate", aclEvaluate);

File: src/core-job/src/main/java/org/apache/kylin/job/execution/NExecutableManager.java
Patch:
@@ -205,11 +205,12 @@ public void addJob(ExecutablePO executablePO) {
         if (KylinConfig.getInstanceFromEnv().isUTEnv()) {
             EventBusFactory.getInstance().postAsync(new JobReadyNotifier(project));
             EventBusFactory.getInstance().postAsync(new JobAddedNotifier(project, jobType));
-        } else
+        } else {
             UnitOfWork.get().doAfterUnit(() -> {
                 EventBusFactory.getInstance().postAsync(new JobReadyNotifier(project));
                 EventBusFactory.getInstance().postAsync(new JobAddedNotifier(project, jobType));
             });
+        }
     }
 
     private void addJobOutput(ExecutablePO executable) {

File: src/core-job/src/test/java/org/apache/kylin/job/impl/threadpool/NDefaultSchedulerTest.java
Patch:
@@ -1953,6 +1953,7 @@ public void testSchedulerShutdown() throws Exception {
     }
 
     @Test
+    @Ignore("TODO: move it")
     public void testStorageQuotaLimitReached() {
         try {
             // case READY

File: src/tool/src/test/java/org/apache/kylin/tool/security/KylinPasswordResetCLITest.java
Patch:
@@ -65,6 +65,7 @@ public void teardown() throws Exception {
 
     @Test
     public void testResetAdminPassword() throws Exception {
+        overwriteSystemProp("kylin.metadata.random-admin-password.enabled", "true");
         val pwdEncoder = new BCryptPasswordEncoder();
         overwriteSystemProp("kylin.security.user-password-encoder", pwdEncoder.getClass().getName());
         val user = new ManagedUser("ADMIN", "KYLIN", true, Constant.ROLE_ADMIN, Constant.GROUP_ALL_USERS);

File: src/tool/src/main/java/org/apache/kylin/tool/RollbackTool.java
Patch:
@@ -133,6 +133,7 @@ protected Options getOptions() {
         return options;
     }
 
+    @Override
     protected void execute(OptionsHelper optionsHelper) throws Exception {
         log.info("start roll back");
         log.info("start to init ResourceStore");
@@ -226,7 +227,7 @@ private Boolean checkParam(OptionsHelper optionsHelper) {
         long userTargetTimeMillis = formatter.parseDateTime(userTargetTime).getMillis();
         long protectionTime = System.currentTimeMillis() - kylinConfig.getStorageResourceSurvivalTimeThreshold();
         if (userTargetTimeMillis < protectionTime) {
-            log.error("user specified time  is less than protection time");
+            log.error("user specified time is less than protection time");
             return false;
         }
 

File: src/data-loading-service/src/main/java/org/apache/kylin/rest/service/JobService.java
Patch:
@@ -145,7 +145,7 @@ public class JobService extends BasicService implements JobSupporter {
 
     private static final Map<String, String> jobTypeMap = Maps.newHashMap();
 
-    private static final String TOTAL_DURATION = "total_duration";
+    private static final String DURATION = "duration";
     private static final String LAST_MODIFIED = "last_modified";
     public static final String EXCEPTION_CODE_PATH = "exception_to_code.json";
     public static final String EXCEPTION_CODE_DEFAULT = "KE-030001000";
@@ -233,8 +233,8 @@ private DataResult<List<ExecutableResponse>> filterAndSort(final JobFilter jobFi
 
     private List<ExecutableResponse> sortTotalDurationList(List<ExecutableResponse> result, final JobFilter jobFilter) {
         //constructing objects takes time
-        if (StringUtils.isNotEmpty(jobFilter.getSortBy()) && jobFilter.getSortBy().equals(TOTAL_DURATION)) {
-            Collections.sort(result, propertyComparator(TOTAL_DURATION, !jobFilter.isReverse()));
+        if (StringUtils.isNotEmpty(jobFilter.getSortBy()) && jobFilter.getSortBy().equals(DURATION)) {
+            Collections.sort(result, propertyComparator(DURATION, !jobFilter.isReverse()));
         }
         return result;
     }

File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java
Patch:
@@ -501,10 +501,11 @@ public SQLResponse queryWithCache(SQLRequest sqlRequest) {
         }
         try (SetThreadName ignored = new SetThreadName("Query %s", queryContext.getQueryId());
              SetLogCategory ignored2 = new SetLogCategory("query")) {
-            if (sqlRequest.getExecuteAs() != null)
+            if (sqlRequest.getExecuteAs() != null) {
                 sqlRequest.setUsername(sqlRequest.getExecuteAs());
-            else
+            } else {
                 sqlRequest.setUsername(getUsername());
+            }
             QueryLimiter.tryAcquire();
             SQLResponse response = doQueryWithCache(sqlRequest);
             response.setTraces(QueryContext.currentTrace().spans().stream().map(span -> {

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/BuildLayoutWithUpdate.java
Patch:
@@ -88,7 +88,7 @@ public void updateLayout(NDataSegment seg, KylinConfig config, String project) {
     }
 
     public long updateSingleLayout(NDataSegment seg, KylinConfig config, String project) {
-        long indexId = -1l;
+        long indexId = -1L;
         try {
             logger.info("Wait to take job result.");
             JobResult result = completionService.take().get();

File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java
Patch:
@@ -68,7 +68,7 @@ protected void doExecute() throws Exception {
             List<Path> paths = JavaConversions
                     .seqAsJavaList(ResourceDetectUtils.getPaths(afterMerge.queryExecution().sparkPlan()));
             resourceSize.put(String.valueOf(entry.getKey()),
-                    ResourceDetectUtils.getResourceSize(SparderEnv.getHadoopConfiguration(),config.isConcurrencyFetchDataSourceSize(),
+                    ResourceDetectUtils.getResourceSize(SparderEnv.getHadoopConfiguration(), config.isConcurrencyFetchDataSourceSize(),
                             JavaConverters.asScalaIteratorConverter(paths.iterator()).asScala().toSeq()));
         }
         ResourceDetectUtils.write(new Path(config.getJobTmpShareDir(project, jobId),

File: src/spark-project/sparder/src/main/java/org/apache/kylin/query/mask/QueryDependentColumnMask.java
Patch:
@@ -100,6 +100,7 @@ public void init() {
         }
     }
 
+    @Override
     public Dataset<Row> doMaskResult(Dataset<Row> df) {
         if (dependentInfo == null || rootRelNode == null || !dependentInfo.needMask()) {
             return df;

File: src/core-common/src/test/java/org/apache/kylin/junit/MetadataExtension.java
Patch:
@@ -102,7 +102,7 @@ public File get() {
             val kylinHomePath = new File(getTestConfig().getMetadataUrl().toString()).getParentFile().getAbsolutePath();
             System.setProperty("KYLIN_HOME", kylinHomePath);
             val jobJar = org.apache.kylin.common.util.FileUtils.findFile(
-                    new File(kylinHomePath, "../../../assembly/target/").getAbsolutePath(), "kap-assembly(.?)\\.jar");
+                    new File(kylinHomePath, "../../../assembly/target/").getAbsolutePath(), "kylin-assembly(.?)\\.jar");
             getTestConfig().setProperty("kylin.engine.spark.job-jar", jobJar == null ? "" : jobJar.getAbsolutePath());
             getTestConfig().setProperty("kylin.query.security.acl-tcr-enabled", "false");
             return tempMetadataDirectory;

File: src/tool/src/main/java/org/apache/kylin/tool/security/KylinPasswordResetCLI.java
Patch:
@@ -38,8 +38,8 @@
 import io.kyligence.kap.guava20.shaded.common.io.ByteSource;
 import lombok.val;
 
-public class KapPasswordResetCLI {
-    protected static final Logger logger = LoggerFactory.getLogger(KapPasswordResetCLI.class);
+public class KylinPasswordResetCLI {
+    protected static final Logger logger = LoggerFactory.getLogger(KylinPasswordResetCLI.class);
 
     public static void main(String[] args) {
         int exit;

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/source/NSparkCubingSourceInputBySparkDataSourceTest.java
Patch:
@@ -60,7 +60,7 @@ public void testGetHiveSourceData() {
             KylinBuildEnv.clean();
             KylinBuildEnv kylinBuildEnv = KylinBuildEnv.getOrCreate(getTestConfig());
             getTestConfig().setProperty("kylin.source.provider.9",
-                    "NSparkDataSource");
+                    "org.apache.kylin.engine.spark.source.NSparkDataSource");
             getTestConfig().setProperty("kylin.build.resource.read-transactional-table-enabled", "true");
             NTableMetadataManager tableMgr = NTableMetadataManager.getInstance(getTestConfig(), "ssb");
             TableDesc fact = tableMgr.getTableDesc("SSB.P_LINEORDER");
@@ -80,7 +80,7 @@ public void testGetHiveSourceDataByTransaction() {
             KylinBuildEnv.clean();
             KylinBuildEnv kylinBuildEnv = KylinBuildEnv.getOrCreate(getTestConfig());
             getTestConfig().setProperty("kylin.source.provider.9",
-                    "NSparkDataSource");
+                    "org.apache.kylin.engine.spark.source.NSparkDataSource");
             getTestConfig().setProperty("kylin.build.resource.read-transactional-table-enabled", "true");
             NTableMetadataManager tableMgr = NTableMetadataManager.getInstance(getTestConfig(), "ssb");
             TableDesc fact = tableMgr.getTableDesc("SSB.P_LINEORDER");

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java
Patch:
@@ -60,7 +60,6 @@ public class SparkSourceServiceTest extends NLocalFileMetadataTestCase {
 
     @Before
     public void setUp() throws Exception {
-        createTestMetadata();
         ss = SparkSession.builder().appName("local").master("local[1]").enableHiveSupport().getOrCreate();
         ss.sparkContext().hadoopConfiguration().set("javax.jdo.option.ConnectionURL",
                 "jdbc:derby:memory:db;create=true");
@@ -82,8 +81,8 @@ public void setUp() throws Exception {
         sparkSourceService.executeSQL(ddlRequest);
         zkTestServer = new TestingServer(true);
         overwriteSystemProp("kylin.env.zookeeper-connect-string", zkTestServer.getConnectString());
-        overwriteSystemProp("kap.env.zookeeper-max-retries", "1");
-        overwriteSystemProp("kap.env.zookeeper-base-sleep-time", "1000");
+        overwriteSystemProp("kylin.env.zookeeper-max-retries", "1");
+        overwriteSystemProp("kylin.env.zookeeper-base-sleep-time", "1000");
     }
 
     @After

File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableServiceTest.java
Patch:
@@ -98,6 +98,7 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -1230,6 +1231,7 @@ public void testRefreshSingleCatalogCache() {
         Assert.assertEquals(1, tableRefresh.getFailed().size());
     }
 
+    @Ignore("TODO: Class load conflict")
     @Test
     public void testRefreshSparkTable() throws Exception {
         CliCommandExecutor command = new CliCommandExecutor();

File: src/core-job/src/test/java/org/apache/kylin/job/impl/threadpool/NDefaultSchedulerTest.java
Patch:
@@ -1877,6 +1877,7 @@ public void testSubmitParallelTasksError() throws InterruptedException {
         Assert.assertEquals(ExecutableState.ERROR, executableManager.getOutput(task1.getId()).getState());
     }
 
+    @Ignore("TODO: Class load conflict")
     @Test
     public void testSubmitParallelTasksReachMemoryQuota() throws Exception {
         logger.info("testSubmitParallelTasksByMemoryQuota");

File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java
Patch:
@@ -42,12 +42,14 @@
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mockito;
 
 import com.google.common.collect.Maps;
 
+@Ignore("TODO: Class load conflict")
 public class SparkSourceServiceTest extends NLocalFileMetadataTestCase {
 
     protected static SparkSession ss;

File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/HiveTransactionTableHelperTest.java
Patch:
@@ -96,7 +96,7 @@ public void testNew() {
     @Test
     public void testDoGetQueryHiveTemporaryTableSql() {
         // Init needed variable parameters
-        System.setProperty("kylin.source.provider.9", "NSparkDataSource");
+        System.setProperty("kylin.source.provider.9", "org.apache.kylin.engine.spark.source.NSparkDataSource");
         System.setProperty("kylin.build.resource.read-transactional-table-enabled", "true");
         KylinBuildEnv kylinBuildEnv = KylinBuildEnv.getOrCreate(getTestConfig());
         NTableMetadataManager tableMgr = NTableMetadataManager.getInstance(getTestConfig(), "tdh");

File: src/streaming-service/src/test/java/org/apache/kylin/rest/service/StreamingJobServiceTest.java
Patch:
@@ -209,9 +209,9 @@ public void testGetStreamingJobList() throws Exception {
         jobFilter = new StreamingJobFilter("", Collections.EMPTY_LIST, Collections.EMPTY_LIST, Collections.EMPTY_LIST,
                 "", "last_modified", false);
         list = streamingJobService.getStreamingJobList(jobFilter, 0, 20);
-        Assert.assertTrue(list.getValue().get(0).getLastModified() >= list.getValue().get(1).getLastModified());
-        Assert.assertTrue(list.getValue().get(1).getLastModified() >= list.getValue().get(2).getLastModified());
-        Assert.assertTrue(list.getValue().get(2).getLastModified() >= list.getValue().get(3).getLastModified());
+        Assert.assertTrue(list.getValue().get(0).getLastModified() <= list.getValue().get(1).getLastModified());
+        Assert.assertTrue(list.getValue().get(1).getLastModified() <= list.getValue().get(2).getLastModified());
+        Assert.assertTrue(list.getValue().get(2).getLastModified() <= list.getValue().get(3).getLastModified());
 
         // project & page_size filter
         jobFilter = new StreamingJobFilter("", Collections.EMPTY_LIST, Collections.EMPTY_LIST, Collections.EMPTY_LIST,

File: src/query/src/test/java/org/apache/kylin/query/util/EscapeTransformerTest.java
Patch:
@@ -288,10 +288,10 @@ public void timestampDiffTest() {
     @Test
     public void testBigQuery() throws Exception {
         //cpic query was caused StackOverFlow Error
-        String originSql = FileUtils.readFileToString(new File("src/test/resources/query/cpic/big_query1.sql"),
+        String originSql = FileUtils.readFileToString(new File("src/test/resources/query_cognos/cpic/big_query1.sql"),
                 Charset.defaultCharset());
         String expectedSql = FileUtils.readFileToString(
-                new File("src/test/resources/query/cpic/big_query1.sql.expected"), Charset.defaultCharset());
+                new File("src/test/resources/query_cognos/cpic/big_query1.sql.expected"), Charset.defaultCharset());
 
         String transformedSQL = transformer.transform(originSql).replaceAll("\n+", "");
         expectedSql = expectedSql.replaceAll("\n+", "");

