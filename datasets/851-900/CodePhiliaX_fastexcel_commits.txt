File: fastexcel-core/src/main/java/cn/idev/excel/support/ExcelTypeEnum.java
Patch:
@@ -9,8 +9,8 @@
 import cn.idev.excel.exception.ExcelCommonException;
 import cn.idev.excel.read.metadata.ReadWorkbook;
 import cn.idev.excel.util.StringUtils;
-
 import lombok.Getter;
+import org.apache.poi.EmptyFileException;
 import org.apache.poi.util.IOUtils;
 
 /**
@@ -87,6 +87,8 @@ public static ExcelTypeEnum valueOf(ReadWorkbook readWorkbook) {
             return recognitionExcelType(inputStream);
         } catch (ExcelCommonException e) {
             throw e;
+        } catch (EmptyFileException e) {
+            throw new ExcelCommonException("The supplied file was empty (zero bytes long)");
         } catch (Exception e) {
             throw new ExcelCommonException(
                 "Convert excel format exception.You can try specifying the 'excelType' yourself", e);

File: fastexcel-core/src/main/java/cn/idev/excel/analysis/v07/handlers/sax/SharedStringsTableHandler.java
Patch:
@@ -33,7 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public class SharedStringsTableHandler extends DefaultHandler {
 
-    private static final Pattern UTF_PATTTERN = Pattern.compile("_x([0-9A-Fa-f]{4})_");
+    private static final Pattern UTF_PATTERN = Pattern.compile("_x([0-9A-Fa-f]{4})_");
 
     /**
      * The final piece of data
@@ -154,7 +154,7 @@ static String utfDecode(String value) {
         }
 
         StringBuilder buf = new StringBuilder();
-        Matcher m = UTF_PATTTERN.matcher(value);
+        Matcher m = UTF_PATTERN.matcher(value);
         int idx = 0;
         while (m.find()) {
             int pos = m.start();

File: fastexcel-core/src/main/java/cn/idev/excel/enums/CacheLocationEnum.java
Patch:
@@ -1,7 +1,7 @@
 package cn.idev.excel.enums;
 
 /**
- * cache locaciton
+ * cache location
  *
  * @author Jiaju Zhuang
  **/
@@ -19,5 +19,5 @@ public enum CacheLocationEnum {
     /**
      * No caching.It may lose some of performance.
      */
-    NONE;
+    NONE
 }

File: fastexcel-core/src/main/java/cn/idev/excel/enums/CellDataTypeEnum.java
Patch:
@@ -43,8 +43,7 @@ public enum CellDataTypeEnum {
     /**
      * rich text string.Support only when writing.
      */
-    RICH_TEXT_STRING,
-    ;
+    RICH_TEXT_STRING;
 
     private static final Map<String, CellDataTypeEnum> TYPE_ROUTING_MAP = new HashMap<String, CellDataTypeEnum>(16);
 

File: fastexcel-core/src/main/java/cn/idev/excel/enums/CellExtraTypeEnum.java
Patch:
@@ -17,5 +17,5 @@ public enum CellExtraTypeEnum {
     /**
      * Merge
      */
-    MERGE,;
+    MERGE
 }

File: fastexcel-core/src/main/java/cn/idev/excel/enums/HeadKindEnum.java
Patch:
@@ -17,5 +17,5 @@ public enum HeadKindEnum {
     /**
      * String
      */
-    STRING;
+    STRING
 }

File: fastexcel-core/src/main/java/cn/idev/excel/enums/ReadDefaultReturnEnum.java
Patch:
@@ -31,7 +31,6 @@ public enum ReadDefaultReturnEnum {
     /**
      * Return to {@link ReadCellData}, can decide which field you need.
      */
-    READ_CELL_DATA,
-    ;
+    READ_CELL_DATA
 
 }

File: fastexcel-core/src/main/java/cn/idev/excel/enums/WriteLastRowTypeEnum.java
Patch:
@@ -17,5 +17,5 @@ public enum WriteLastRowTypeEnum {
     /**
      * Any data has been written;
      */
-    HAS_DATA,;
+    HAS_DATA
 }

File: fastexcel-core/src/main/java/cn/idev/excel/enums/WriteTemplateAnalysisCellTypeEnum.java
Patch:
@@ -13,5 +13,5 @@ public enum WriteTemplateAnalysisCellTypeEnum {
     /**
      * A collection of fields.
      */
-    COLLECTION,;
+    COLLECTION
 }

File: fastexcel-core/src/main/java/cn/idev/excel/enums/WriteTypeEnum.java
Patch:
@@ -13,5 +13,5 @@ public enum WriteTypeEnum {
     /**
      * Fill.
      */
-    FILL,;
+    FILL
 }

File: fastexcel-core/src/main/java/cn/idev/excel/read/listener/ModelBuildEventListener.java
Patch:
@@ -60,7 +60,7 @@ private Object buildNoModel(Map<Integer, ReadCellData<?>> cellDataMap, ReadSheet
                     (String) ConverterUtils.convertToJavaObject(cellData, null, null, readSheetHolder.converterMap(),
                         context, context.readRowHolder().getRowIndex(), key));
             } else {
-                // retrun ReadCellData
+                // return ReadCellData
                 ReadCellData<?> convertedReadCellData = convertReadCellData(cellData,
                     context.readWorkbookHolder().getReadDefaultReturn(), readSheetHolder, context, key);
                 if (readDefaultReturn == ReadDefaultReturnEnum.READ_CELL_DATA) {

File: fastexcel-core/src/main/java/cn/idev/excel/read/metadata/ReadWorkbook.java
Patch:
@@ -10,13 +10,12 @@
 import cn.idev.excel.cache.ReadCache;
 import cn.idev.excel.cache.selector.ReadCacheSelector;
 import cn.idev.excel.cache.selector.SimpleReadCacheSelector;
+import cn.idev.excel.context.AnalysisContext;
 import cn.idev.excel.enums.CellExtraTypeEnum;
 import cn.idev.excel.enums.ReadDefaultReturnEnum;
 import cn.idev.excel.event.AnalysisEventListener;
-import cn.idev.excel.context.AnalysisContext;
 import cn.idev.excel.read.listener.ModelBuildEventListener;
 import cn.idev.excel.support.ExcelTypeEnum;
-
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
@@ -97,7 +96,7 @@ public class ReadWorkbook extends ReadBasicParameter {
      * Whether to use the default listener, which is used by default.
      * <p>
      * The {@link ModelBuildEventListener} is loaded by default to convert the object.
-     * defualt is true.
+     * default is true.
      */
     private Boolean useDefaultListener;
 

File: fastexcel-core/src/main/java/cn/idev/excel/util/StyleUtil.java
Patch:
@@ -127,7 +127,7 @@ public static short buildDataFormat(Workbook workbook, DataFormatData dataFormat
         }
         if (StringUtils.isNotBlank(dataFormatData.getFormat())) {
             if (log.isDebugEnabled()) {
-                log.info("create new data fromat:{}", dataFormatData);
+                log.info("create new data format:{}", dataFormatData);
             }
             DataFormat dataFormatCreate = workbook.createDataFormat();
             return dataFormatCreate.getFormat(dataFormatData.getFormat());

File: fastexcel-test/src/test/java/cn/idev/excel/test/demo/write/WriteTest.java
Patch:
@@ -363,7 +363,7 @@ public void writeCellDataWrite() {
         writeCellStyleData.setFillForegroundColor(IndexedColors.GREEN.getIndex());
 
         // 设置单个单元格多种样式
-        // 这里需要设置 inMomery=true 不然会导致无法展示单个单元格多种样式，所以慎用
+        // 这里需要设置 inMemory=true 不然会导致无法展示单个单元格多种样式，所以慎用
         WriteCellData<String> richTest = new WriteCellData<>();
         richTest.setType(CellDataTypeEnum.RICH_TEXT_STRING);
         writeCellDemoData.setRichText(richTest);

File: fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvDataListener.java
Patch:
@@ -7,7 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 
 @Slf4j
-public class CsvDataListeer extends AnalysisEventListener<CsvData> {
+public class CsvDataListener extends AnalysisEventListener<CsvData> {
     @Override
     public void invoke(CsvData data, AnalysisContext context) {
         log.info("data:{}", JSON.toJSONString(data));

File: fastexcel-test/src/test/java/cn/idev/excel/test/temp/csv/CsvReadTest.java
Patch:
@@ -72,7 +72,7 @@ public void writev2() throws Exception {
         // 如果这里想使用03 则 传入excelType参数即可
         EasyExcel.write(fileName, CsvData.class).sheet().doWrite(data());
 
-        EasyExcel.read(fileName, CsvData.class, new CsvDataListeer()).sheet().doRead();
+        EasyExcel.read(fileName, CsvData.class, new CsvDataListener()).sheet().doRead();
     }
 
     @Test

File: fastexcel-test/src/test/java/cn/idev/excel/test/temp/dataformat/DataFormatter1.java
Patch:
@@ -102,7 +102,7 @@
  * and space ("_ ") in the format adds a space to the end and Excel formats this cell as <code>"12.34 "</code>, but
  * <code>DataFormatter</code> trims the formatted value and returns <code>"12.34"</code>.
  * </p>
- * You can enable spaces by passing the <code>emulateCSV=true</code> flag in the <code>DateFormatter</code> cosntructor.
+ * You can enable spaces by passing the <code>emulateCSV=true</code> flag in the <code>DateFormatter</code> constructor.
  * If set to true, then the output tries to conform to what you get when you take an xls or xlsx in Excel and Save As
  * CSV file:
  * <ul>

File: fastexcel-core/src/main/java/cn/idev/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -244,10 +244,10 @@ private void doFill(List<AnalysisCell> analysisCellList, Object oneRowData, Fill
 
                 for (String variable : analysisCell.getVariableList()) {
                     cellValueBuild.append(analysisCell.getPrepareDataList().get(index++));
-                    if (!dataKeySet.contains(variable)) {
-                        continue;
+                    Object value = null;
+                    if (dataKeySet.contains(variable)) {
+                        value = dataMap.get(variable);
                     }
-                    Object value = dataMap.get(variable);
                     ExcelContentProperty excelContentProperty = ClassUtils.declaredExcelContentProperty(dataMap,
                         writeContext.currentWriteHolder().excelWriteHeadProperty().getHeadClazz(), variable,
                         writeContext.currentWriteHolder());

File: fastexcel-core/src/main/java/cn/idev/excel/util/ConverterUtils.java
Patch:
@@ -174,14 +174,14 @@ private static Object doConvertToJavaObject(ReadCellData<?> cellData, Class<?> c
         }
         if (converter == null) {
             throw new ExcelDataConvertException(rowIndex, columnIndex, cellData, contentProperty,
-                "Converter not found, convert " + cellData.getType() + " to " + clazz.getName());
+                "Error at row " + rowIndex + ", column " + columnIndex + ": Converter not found, convert " + cellData.getType() + " to " + clazz.getName());
         }
 
         try {
             return converter.convertToJavaData(new ReadConverterContext<>(cellData, contentProperty, context));
         } catch (Exception e) {
             throw new ExcelDataConvertException(rowIndex, columnIndex, cellData, contentProperty,
-                "Convert data " + cellData + " to " + clazz + " error ", e);
+                "Error at row " + rowIndex + ", column " + columnIndex + ": Convert data " + cellData + " to " + clazz + " error ", e);
         }
     }
 }

File: fastexcel-core/src/main/java/cn/idev/excel/util/ConverterUtils.java
Patch:
@@ -174,14 +174,14 @@ private static Object doConvertToJavaObject(ReadCellData<?> cellData, Class<?> c
         }
         if (converter == null) {
             throw new ExcelDataConvertException(rowIndex, columnIndex, cellData, contentProperty,
-                "Converter not found, convert " + cellData.getType() + " to " + clazz.getName());
+                "Error at row " + rowIndex + ", column " + columnIndex + ": Converter not found, convert " + cellData.getType() + " to " + clazz.getName());
         }
 
         try {
             return converter.convertToJavaData(new ReadConverterContext<>(cellData, contentProperty, context));
         } catch (Exception e) {
             throw new ExcelDataConvertException(rowIndex, columnIndex, cellData, contentProperty,
-                "Convert data " + cellData + " to " + clazz + " error ", e);
+                "Error at row " + rowIndex + ", column " + columnIndex + ": Convert data " + cellData + " to " + clazz + " error ", e);
         }
     }
 }

File: fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java
Patch:
@@ -36,7 +36,7 @@ private void processSheet(int sheetIndex) throws IOException {
         float[] columnWidths = getColumnWidths(sheet);
         Table table = new Table(columnWidths);
 
-        addRowsToTable(table, sheet, columnWidths, context.getFountPath());
+        addRowsToTable(table, sheet, columnWidths, context.getFontPath());
 //        addPicsToTable(table, sheet);
 
         context.getDocument().add(table);

File: fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/FileConverterContext.java
Patch:
@@ -23,17 +23,17 @@ public class FileConverterContext {
 
     private File inputFile;
     private File outputFile;
-    private String fountPath;
+    private String fontPath;
     private Workbook workbook;
     private Document document;
     private int[] sheets;
     private ExcelTypeEnum excelTypeEnum;
 
-    public FileConverterContext(File inputFile, File outputFile, String fountPath, int[] sheets) {
+    public FileConverterContext(File inputFile, File outputFile, String fontPath, int[] sheets) {
         try {
             this.inputFile = inputFile;
             this.outputFile = outputFile;
-            this.fountPath = fountPath;
+            this.fontPath = fontPath;
             ReadWorkbook readWorkbook = new ReadWorkbook();
             readWorkbook.setFile(inputFile);
             excelTypeEnum = ExcelTypeEnum.valueOf(readWorkbook);

File: fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/BaseExcelConverter.java
Patch:
@@ -36,7 +36,7 @@ private void processSheet(int sheetIndex) throws IOException {
         float[] columnWidths = getColumnWidths(sheet);
         Table table = new Table(columnWidths);
 
-        addRowsToTable(table, sheet, columnWidths, context.getFountPath());
+        addRowsToTable(table, sheet, columnWidths, context.getFontPath());
 //        addPicsToTable(table, sheet);
 
         context.getDocument().add(table);

File: fastexcel-core/src/main/java/cn/idev/excel/fileconvertor/FileConverterContext.java
Patch:
@@ -23,17 +23,17 @@ public class FileConverterContext {
 
     private File inputFile;
     private File outputFile;
-    private String fountPath;
+    private String fontPath;
     private Workbook workbook;
     private Document document;
     private int[] sheets;
     private ExcelTypeEnum excelTypeEnum;
 
-    public FileConverterContext(File inputFile, File outputFile, String fountPath, int[] sheets) {
+    public FileConverterContext(File inputFile, File outputFile, String fontPath, int[] sheets) {
         try {
             this.inputFile = inputFile;
             this.outputFile = outputFile;
-            this.fountPath = fountPath;
+            this.fontPath = fontPath;
             ReadWorkbook readWorkbook = new ReadWorkbook();
             readWorkbook.setFile(inputFile);
             excelTypeEnum = ExcelTypeEnum.valueOf(readWorkbook);

