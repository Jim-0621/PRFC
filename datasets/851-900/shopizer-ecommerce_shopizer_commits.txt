File: sm-core/src/main/java/com/salesmanager/core/business/services/shoppingcart/ShoppingCartService.java
Patch:
@@ -5,7 +5,6 @@
 import com.salesmanager.core.business.exception.ServiceException;
 import com.salesmanager.core.business.services.common.generic.SalesManagerEntityService;
 import com.salesmanager.core.model.catalog.product.Product;
-import com.salesmanager.core.model.catalog.product.variant.ProductVariant;
 import com.salesmanager.core.model.customer.Customer;
 import com.salesmanager.core.model.merchant.MerchantStore;
 import com.salesmanager.core.model.shipping.ShippingProduct;
@@ -64,4 +63,6 @@ ShoppingCart mergeShoppingCarts(final ShoppingCart userShoppingCart, final Shopp
 	 */
 	void deleteShoppingCartItem(Long id);
 
+	boolean checkObsolete(ShoppingCart shoppingCart);
+	void markObsolete(ShoppingCart shoppingCart);
 }
\ No newline at end of file

File: sm-core/src/main/java/com/salesmanager/core/business/services/shoppingcart/ShoppingCartService.java
Patch:
@@ -5,7 +5,6 @@
 import com.salesmanager.core.business.exception.ServiceException;
 import com.salesmanager.core.business.services.common.generic.SalesManagerEntityService;
 import com.salesmanager.core.model.catalog.product.Product;
-import com.salesmanager.core.model.catalog.product.variant.ProductVariant;
 import com.salesmanager.core.model.customer.Customer;
 import com.salesmanager.core.model.merchant.MerchantStore;
 import com.salesmanager.core.model.shipping.ShippingProduct;
@@ -64,4 +63,6 @@ ShoppingCart mergeShoppingCarts(final ShoppingCart userShoppingCart, final Shopp
 	 */
 	void deleteShoppingCartItem(Long id);
 
+	boolean checkObsolete(ShoppingCart shoppingCart);
+	void markObsolete(ShoppingCart shoppingCart);
 }
\ No newline at end of file

File: sm-core/src/main/java/com/salesmanager/core/business/services/catalog/category/CategoryService.java
Patch:
@@ -71,7 +71,7 @@ List<Category> getListByLineage(String storeCode, String lineage)
 	
 	Category getById(MerchantStore store, Long id) throws ServiceException;
 
-	Category getBySeUrl(MerchantStore store, String seUrl);
+	Category getBySeUrl(MerchantStore store, String seUrl, Language language);
 
 	List<Category> listByParent(Category category, Language language);
 

File: sm-core/src/main/java/com/salesmanager/core/business/services/catalog/category/CategoryServiceImpl.java
Patch:
@@ -140,8 +140,8 @@ public List<Category> listBySeUrl(MerchantStore store, String seUrl) throws Serv
 	}
 
 	@Override
-	public Category getBySeUrl(MerchantStore store, String seUrl) {
-		return categoryRepository.findByFriendlyUrl(store.getId(), seUrl);
+	public Category getBySeUrl(MerchantStore store, String seUrl, Language language) {
+		return categoryRepository.findByFriendlyUrl(store.getId(), seUrl, language.getId());
 	}
 
 	@Override

File: sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/category/CategoryApi.java
Patch:
@@ -76,7 +76,7 @@ public ReadableCategory get(
 		return category;
 	}
 
-	@GetMapping(value = "/category/name/{friendlyUrl}", produces = { APPLICATION_JSON_VALUE })
+	@GetMapping(value = "/category/{friendlyUrl}", produces = { APPLICATION_JSON_VALUE })
 	@ApiOperation(httpMethod = "GET", value = "Get category list for an given Category code", notes = "List current Category and child category")
 	@ApiResponses(value = {
 			@ApiResponse(code = 200, message = "List of category found", response = ReadableCategory.class) })

File: sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/product/ProductGroupApi.java
Patch:
@@ -169,7 +169,7 @@ public void updateGroup(
 	Product product = null;
     try {
       // get the product
-    	product = productService.getById(productId);
+    	product = productService.findOne(productId, merchantStore);
 
       if (product == null) {
         response.sendError(404, "Product not fount for id " + productId);

File: sm-core/src/main/java/com/salesmanager/core/business/repositories/catalog/category/PageableCategoryRepository.java
Patch:
@@ -9,7 +9,7 @@
 public interface PageableCategoryRepository extends PagingAndSortingRepository<Category, Long> {
   
 	
-  @Query(value = "select distinct c from Category c left join fetch c.descriptions cd join fetch cd.language cdl join fetch c.merchantStore cm where cm.id=?1 and cdl.id=?2 and (cd.name like %?3% or ?3 is null) order by c.lineage, c.sortOrder asc",
+  @Query(value = "select distinct c from Category c left join fetch c.descriptions cd join fetch cd.language cdl join fetch c.merchantStore cm where cm.id=?1 and cdl.id=?2 and (cd.name like %?3% or ?3 is null) order by c.depth, c.sortOrder asc",
       countQuery = "select  count(c) from Category c join c.descriptions cd join c.merchantStore cm where cm.id=?1 and cd.language.id=?2 and (cd.name like %?3% or ?3 is null)")
   Page<Category> listByStore(Integer storeId, Integer languageId, String name, Pageable pageable);
 

File: sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/category/CategoryApi.java
Patch:
@@ -62,7 +62,7 @@ public class CategoryApi {
 	@Inject
 	private UserFacade userFacade;
 
-	@GetMapping(value = "/category/{id}", produces = { APPLICATION_JSON_VALUE })
+	@GetMapping(value = "/private/category/{id}", produces = { APPLICATION_JSON_VALUE })
 	@ApiOperation(httpMethod = "GET", value = "Get category list for an given Category id", notes = "List current Category and child category")
 	@ApiResponses(value = {
 			@ApiResponse(code = 200, message = "List of category found", response = ReadableCategory.class) })

