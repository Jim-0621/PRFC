File: jraft-core/src/main/java/com/alipay/sofa/jraft/option/ReadOnlyOption.java
Patch:
@@ -16,8 +16,6 @@
  */
 package com.alipay.sofa.jraft.option;
 
-import org.apache.commons.lang.StringUtils;
-
 import com.alipay.sofa.jraft.entity.EnumOutter;
 
 /**

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/errors/ErrorsHelper.java
Patch:
@@ -26,6 +26,7 @@ public static boolean isInvalidPeer(final Errors error) {
         return error == Errors.CALL_SELF_ENDPOINT_ERROR //
                || error == Errors.NOT_LEADER //
                || error == Errors.NO_REGION_FOUND //
+               || error == Errors.RPC_CONNECTION_ERROR //
                || error == Errors.LEADER_NOT_AVAILABLE;
     }
 

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/impl/LogManagerTest.java
Patch:
@@ -202,7 +202,7 @@ public void run(final Status status) {
     }
 
     @Test
-    public void testAppendEntresConflicts() throws Exception {
+    public void testAppendEntriesConflicts() throws Exception {
         //Append 0-10
         List<LogEntry> mockEntries = TestUtils.mockEntries(10);
         for (int i = 0; i < 10; i++) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/conf/Configuration.java
Patch:
@@ -297,7 +297,7 @@ public boolean parse(final String conf) {
                 peerStr = peerStr.substring(0, index);
                 isLearner = true;
             }
-            if (peer.parse(peerStr)) {
+            if (peer.parse(StringUtils.trim(peerStr))) {
                 if (isLearner) {
                     addLearner(peer);
                 } else {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/BallotBox.java
Patch:
@@ -88,6 +88,7 @@ public boolean init(final BallotBoxOptions opts) {
         this.opts = opts;
         this.waiter = opts.getWaiter();
         this.closureQueue = opts.getClosureQueue();
+        this.lastCommittedIndex = opts.getLastCommittedIndex();
         return true;
     }
 
@@ -165,6 +166,7 @@ public void clearPendingTasks() {
      * committed until a log at the new term becomes committed, so
      * |newPendingIndex| should be |last_log_index| + 1.
      * @param newPendingIndex pending index of new leader
+     *
      * @return returns true if reset success
      */
     public boolean resetPendingIndex(final long newPendingIndex) {
@@ -180,6 +182,7 @@ public boolean resetPendingIndex(final long newPendingIndex) {
                     this.opts.getNodeId(), newPendingIndex, this.lastCommittedIndex);
                 return false;
             }
+
             this.pendingIndex = newPendingIndex;
             this.closureQueue.resetFirstIndex(newPendingIndex);
             return true;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/ThreadId.java
Patch:
@@ -124,10 +124,9 @@ public void setError(final int errorCode) {
             if (this.onError != null) {
                 this.onError.onError(this, this.data, errorCode);
             }
-
         } finally {
-            // Maybe destroyed in callback
-            if (!this.destroyed) {
+            // It may have been released during onError to avoid throwing an exception.
+            if (this.lock.isHeldByCurrentThread()) {
                 this.lock.unlock();
             }
         }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/util/ThreadIdTest.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
         Thread.sleep(1000);
         this.id.unlock();
         latch.await();
-        assertEquals(1000, cost.get(), 10);
+        assertEquals(1000, cost.get(), 20);
     }
 
     @Test

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/FSMCallerImpl.java
Patch:
@@ -233,7 +233,6 @@ public synchronized void shutdown() {
                 task.shutdownLatch = latch;
             }));
         }
-        doShutdown();
     }
 
     @Override
@@ -450,6 +449,7 @@ private long runApplyTask(final ApplyTask task, long maxCommittedIndex, final bo
                     case SHUTDOWN:
                         this.currTask = TaskType.SHUTDOWN;
                         shutdown = task.shutdownLatch;
+                        doShutdown();
                         break;
                     case FLUSH:
                         this.currTask = TaskType.FLUSH;

File: jraft-extension/java-log-storage-impl/src/main/java/com/alipay/sofa/jraft/storage/file/FileManager.java
Patch:
@@ -436,7 +436,7 @@ public boolean truncatePrefix(final long firstIndexKept) {
             for (final AbstractFile abstractFile : this.files) {
                 final long lastLogIndex = abstractFile.getLastLogIndex();
                 if (lastLogIndex < firstIndexKept) {
-                    willRemoveFiles.addAll(this.files);
+                    willRemoveFiles.add(abstractFile);
                 }
             }
             return true;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaIterator.java
Patch:
@@ -58,7 +58,8 @@ public DefaultRheaIterator(DefaultRheaKVStore rheaKVStore, byte[] startKey, byte
     @Override
     public synchronized boolean hasNext() {
         if (this.buf.isEmpty()) {
-            while (this.endKey == null || BytesUtil.compare(this.cursorKey, this.endKey) < 0) {
+            while (this.endKey == null || (cursorKey != null // fix issue #990
+                   && BytesUtil.compare(this.cursorKey, this.endKey) < 0)) {
                 final List<KVEntry> kvEntries = this.rheaKVStore.singleRegionScan(this.cursorKey, this.endKey,
                     this.bufSize, this.readOnlySafe, this.returnValue);
                 if (kvEntries.isEmpty()) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -1017,6 +1017,7 @@ protected int adjustTimeout(final int timeoutMs) {
         final BallotBoxOptions ballotBoxOpts = new BallotBoxOptions();
         ballotBoxOpts.setWaiter(this.fsmCaller);
         ballotBoxOpts.setClosureQueue(this.closureQueue);
+        ballotBoxOpts.setNodeId(getNodeId());
         if (!this.ballotBox.init(ballotBoxOpts)) {
             LOG.error("Node {} init ballotBox failed.", getNodeId());
             return false;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReadOnlyServiceImpl.java
Patch:
@@ -234,7 +234,8 @@ private void handleReadIndex(final ReadOnlyOption option, final List<ReadIndexEv
         final List<ReadIndexState> states = events.stream()
                 .filter(it -> option.equals(it.readOnlyOptions))
                 .map(it -> {
-                    rb.addEntries(ZeroByteStringHelper.wrap(it.requestContext.get()));
+             byte [] bytes = it.requestContext.get();
+                    rb.addEntries(ZeroByteStringHelper.wrap(bytes == null? new byte[0]: bytes));
                     return new ReadIndexState(it.requestContext, it.done, it.startTime);
                 })
                 .collect(Collectors.toList());

File: jraft-core/src/main/java/com/alipay/sofa/jraft/option/NodeOptions.java
Patch:
@@ -104,6 +104,7 @@ public class NodeOptions extends RpcOptions implements Copiable<NodeOptions> {
     // Describe a specific SnapshotStorage in format ${type}://${parameters}
     private String                          snapshotUri;
 
+    // Snapshot temp directory for writing. Default is null(not present), jraft will use a `temp` dir under #{snapshotUri}
     private String                          snapshotTempUri;
 
     // If enable, we will filter duplicate files before copy remote snapshot,

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/BallotBoxTest.java
Patch:
@@ -148,9 +148,10 @@ public void testSetLastCommittedIndexLessThan() {
 
     @Test
     public void testSetLastCommittedIndex() {
+        Mockito.when(this.waiter.hasAvailableCapacity(1)).thenReturn(true);
         assertEquals(0, this.box.getLastCommittedIndex());
         assertTrue(this.box.setLastCommittedIndex(1));
         assertEquals(1, this.box.getLastCommittedIndex());
-        Mockito.verify(this.waiter, Mockito.only()).onCommitted(1);
+        Mockito.verify(this.waiter, Mockito.times(1)).onCommitted(1);
     }
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVStore.java
Patch:
@@ -1080,8 +1080,9 @@ private void internalGetAndPut(final byte[] key, final byte[] value, final Compl
     public CompletableFuture<Boolean> compareAndPut(final byte[] key, final byte[] expect, final byte[] update) {
         checkState();
         Requires.requireNonNull(key, "key");
-        Requires.requireNonNull(expect, "expect");
-        Requires.requireNonNull(update, "update");
+        if (expect == null) {
+            Requires.requireNonNull(update, "update");
+        }
         final CompletableFuture<Boolean> future = new CompletableFuture<>();
         internalCompareAndPut(key, expect, update, future, this.failoverRetries, null);
         return future;

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/counter/CounterStateMachine.java
Patch:
@@ -40,7 +40,6 @@
 import com.alipay.sofa.jraft.example.counter.snapshot.CounterSnapshotFile;
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;
-import com.alipay.sofa.jraft.util.Utils;
 
 /**
  * Counter state machine.

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReadOnlyServiceTest.java
Patch:
@@ -75,6 +75,8 @@ public void setup() {
         Mockito.when(this.node.getOptions()).thenReturn(new NodeOptions());
         Mockito.when(this.node.getGroupId()).thenReturn(GROUP_ID);
         Mockito.when(this.node.getServerId()).thenReturn(new PeerId("localhost:8081", 0));
+        Mockito.when(this.node.getRaftOptions()).thenReturn(new RaftOptions());
+
         assertTrue(this.readOnlyServiceImpl.init(opts));
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java
Patch:
@@ -61,7 +61,7 @@ public static RaftTimerFactory raftTimerFactory() {
      * @return true if bootstrap success
      */
     public static boolean bootstrap(final BootstrapOptions opts) throws InterruptedException {
-        final NodeImpl node = new NodeImpl();
+        final NodeImpl node = new NodeImpl(opts.getGroupId(), null);
         final boolean ret = node.bootstrap(opts);
         node.shutdown();
         node.join();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/ReplicatorGroup.java
Patch:
@@ -121,7 +121,7 @@ default boolean addReplicator(final PeerId peer, ReplicatorType replicatorType)
     /**
      * Wait the peer catchup.
      */
-    boolean waitCaughtUp(final PeerId peer, final long maxMargin, final long dueTime, final CatchUpClosure done);
+    boolean waitCaughtUp(final String groupId, final PeerId peer, final long maxMargin, final long dueTime, final CatchUpClosure done);
 
     /**
      * Get peer's last rpc send timestamp (monotonic time in milliseconds).

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/IteratorImpl.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 import com.alipay.sofa.jraft.Closure;
-import com.alipay.sofa.jraft.StateMachine;
 import com.alipay.sofa.jraft.Status;
 import com.alipay.sofa.jraft.entity.EnumOutter;
 import com.alipay.sofa.jraft.entity.LogEntry;
@@ -29,6 +28,7 @@
 import com.alipay.sofa.jraft.error.RaftException;
 import com.alipay.sofa.jraft.storage.LogManager;
 import com.alipay.sofa.jraft.util.Requires;
+import com.alipay.sofa.jraft.util.ThreadPoolsFactory;
 import com.alipay.sofa.jraft.util.Utils;
 
 /**
@@ -134,7 +134,7 @@ protected void runTheRestClosureWithError() {
                 Requires.requireNonNull(this.error, "error");
                 Requires.requireNonNull(this.error.getStatus(), "error.status");
                 final Status status = this.error.getStatus();
-                Utils.runClosureInThread(done, status);
+                ThreadPoolsFactory.runClosureInThread(this.fsmCaller.getNode().getGroupId(), done, status);
             }
         }
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -62,6 +62,7 @@
 import com.alipay.sofa.jraft.util.RecycleUtil;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.ThreadId;
+import com.alipay.sofa.jraft.util.ThreadPoolsFactory;
 import com.alipay.sofa.jraft.util.Utils;
 import com.alipay.sofa.jraft.util.internal.ThrowUtil;
 import com.codahale.metrics.Gauge;
@@ -921,7 +922,7 @@ private String getReplicatorMetricName(final ReplicatorOptions opts) {
         return "replicator-" + opts.getNode().getGroupId() + "/" + opts.getPeerId();
     }
 
-    public static void waitForCaughtUp(final ThreadId id, final long maxMargin, final long dueTime,
+    public static void waitForCaughtUp(final String groupId, final ThreadId id, final long maxMargin, final long dueTime,
                                        final CatchUpClosure done) {
         final Replicator r = (Replicator) id.lock();
 
@@ -932,7 +933,7 @@ public static void waitForCaughtUp(final ThreadId id, final long maxMargin, fina
         try {
             if (r.catchUpClosure != null) {
                 LOG.error("Previous wait_for_caught_up is not over");
-                Utils.runClosureInThread(done, new Status(RaftError.EINVAL, "Duplicated call"));
+                ThreadPoolsFactory.runClosureInThread(groupId, done, new Status(RaftError.EINVAL, "Duplicated call"));
                 return;
             }
             done.setMaxMargin(maxMargin);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReplicatorGroupImpl.java
Patch:
@@ -142,13 +142,14 @@ public void clearFailureReplicators() {
     }
 
     @Override
-    public boolean waitCaughtUp(final PeerId peer, final long maxMargin, final long dueTime, final CatchUpClosure done) {
+    public boolean waitCaughtUp(final String groupId, final PeerId peer, final long maxMargin, final long dueTime,
+                                final CatchUpClosure done) {
         final ThreadId rid = this.replicatorMap.get(peer);
         if (rid == null) {
             return false;
         }
 
-        Replicator.waitForCaughtUp(rid, maxMargin, dueTime, done);
+        Replicator.waitForCaughtUp(groupId, rid, maxMargin, dueTime, done);
         return true;
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/AbstractClientService.java
Patch:
@@ -120,7 +120,6 @@ protected boolean initRpcClient(final int rpcProcessorThreadPoolSize) {
         if (this.rpcOptions.getMetricRegistry() != null) {
             this.rpcOptions.getMetricRegistry().register("raft-rpc-client-thread-pool",
                 new ThreadPoolMetricSet(this.rpcExecutor));
-            Utils.registerClosureExecutorMetrics(this.rpcOptions.getMetricRegistry());
         }
         return true;
     }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReadOnlyServiceTest.java
Patch:
@@ -55,6 +55,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public class ReadOnlyServiceTest {
 
+    public static final String  GROUP_ID = "test";
     private ReadOnlyServiceImpl readOnlyServiceImpl;
 
     @Mock
@@ -72,7 +73,7 @@ public void setup() {
         opts.setRaftOptions(new RaftOptions());
         Mockito.when(this.node.getNodeMetrics()).thenReturn(new NodeMetrics(false));
         Mockito.when(this.node.getOptions()).thenReturn(new NodeOptions());
-        Mockito.when(this.node.getGroupId()).thenReturn("test");
+        Mockito.when(this.node.getGroupId()).thenReturn(GROUP_ID);
         Mockito.when(this.node.getServerId()).thenReturn(new PeerId("localhost:8081", 0));
         assertTrue(this.readOnlyServiceImpl.init(opts));
     }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/impl/LogManagerTest.java
Patch:
@@ -55,6 +55,7 @@
 
 @RunWith(value = MockitoJUnitRunner.class)
 public class LogManagerTest extends BaseStorageTest {
+    private static final String  GROUP_ID = "group001";
     private LogManagerImpl       logManager;
     private ConfigurationManager confManager;
     @Mock
@@ -77,6 +78,7 @@ public void setup() throws Exception {
         opts.setNodeMetrics(new NodeMetrics(false));
         opts.setLogStorage(this.logStorage);
         opts.setRaftOptions(raftOptions);
+        opts.setGroupId(GROUP_ID);
         assertTrue(this.logManager.init(opts));
     }
 

File: jraft-extension/java-log-storage-impl/src/test/java/com/alipay/sofa/jraft/storage/BaseStorageTest.java
Patch:
@@ -37,6 +37,7 @@
 import static com.alipay.sofa.jraft.test.TestUtils.mockEntry;
 
 public class BaseStorageTest {
+    protected static final String  GROUP_ID     = "group001";
     protected String               path;
     protected StoreOptions         storeOptions = new StoreOptions();
     protected int                  indexEntrySize;
@@ -93,6 +94,7 @@ protected LogStorageOptions newLogStorageOptions() {
         final LogStorageOptions opts = new LogStorageOptions();
         opts.setConfigurationManager(this.confManager);
         opts.setLogEntryCodecFactory(this.logEntryCodecFactory);
+        opts.setGroupId(GROUP_ID);
         return opts;
     }
 }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReplicatorTest.java
Patch:
@@ -169,7 +169,7 @@ public void testMetricRemoveOnDestroy() {
         assertNotNull(r);
         assertSame(r.getOpts(), this.opts);
         Set<String> metrics = this.opts.getNode().getNodeMetrics().getMetricRegistry().getNames();
-        assertEquals(7, metrics.size());
+        assertEquals(8, metrics.size());
         r.destroy();
         metrics = this.opts.getNode().getNodeMetrics().getMetricRegistry().getNames();
         assertEquals(0, metrics.size());

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/IteratorImplTest.java
Patch:
@@ -47,7 +47,7 @@ public class IteratorImplTest {
 
     private IteratorImpl  iter;
     @Mock
-    private StateMachine  fsm;
+    private FSMCallerImpl fsmCaller;
     @Mock
     private LogManager    logManager;
     private List<Closure> closures;
@@ -64,7 +64,7 @@ public void setup() {
             log.getId().setTerm(1);
             Mockito.when(this.logManager.getEntry(i)).thenReturn(log);
         }
-        this.iter = new IteratorImpl(fsm, logManager, closures, 0L, 0L, 10L, applyingIndex);
+        this.iter = new IteratorImpl(fsmCaller, logManager, closures, 0L, 0L, 10L, applyingIndex);
     }
 
     @Test

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/LogEntry.java
Patch:
@@ -16,16 +16,16 @@
  */
 package com.alipay.sofa.jraft.entity;
 
+import java.nio.ByteBuffer;
+import java.util.List;
+
 import com.alipay.sofa.jraft.entity.codec.LogEntryDecoder;
 import com.alipay.sofa.jraft.entity.codec.LogEntryEncoder;
 import com.alipay.sofa.jraft.entity.codec.v1.LogEntryV1CodecFactory;
 import com.alipay.sofa.jraft.entity.codec.v1.V1Decoder;
 import com.alipay.sofa.jraft.entity.codec.v1.V1Encoder;
 import com.alipay.sofa.jraft.util.CrcUtil;
 
-import java.nio.ByteBuffer;
-import java.util.List;
-
 /**
  * A replica log entry.
  *

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/NodeTest.java
Patch:
@@ -3227,7 +3227,7 @@ private Future<?> startChangePeersThread(final ChangeArg arg) {
                     leader.changePeers(conf, done);
                     done.await();
                     assertTrue(done.getStatus().toString(),
-                        done.getStatus().isOk() || expectedErrors.contains(done.getStatus().getRaftError()));
+                            done.getStatus().isOk() || expectedErrors.contains(done.getStatus().getRaftError()));
                 }
             } catch (final InterruptedException e) {
                 LOG.error("ChangePeersThread is interrupted", e);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Utils.java
Patch:
@@ -205,7 +205,7 @@ public static int closeQuietly(final Closeable closeable) {
             closeable.close();
             return 0;
         } catch (final IOException e) {
-            LOG.error("Fail to close", e);
+            LOG.error("Fail to close {}.", closeable, e);
             return RaftError.EIO.getNumber();
         }
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/cli/TransferLeaderRequestProcessor.java
Patch:
@@ -28,7 +28,7 @@
 import com.google.protobuf.Message;
 
 /**
- * Snapshot request processor.
+ * Transfer Leader processor.
  *
  * @author boyan (boyan@alibaba-inc.com)
  * @author jiachun.fjc

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.CountDownLatch;
@@ -1362,7 +1363,8 @@ private void executeApplyingTasks(final List<LogEntryAndClosure> tasks) {
                     st.setError(RaftError.EBUSY, "Is transferring leadership.");
                 }
                 LOG.debug("Node {} can't apply, status={}.", getNodeId(), st);
-                final List<Closure> dones = tasks.stream().map(ele -> ele.done).collect(Collectors.toList());
+                final List<Closure> dones = tasks.stream().map(ele -> ele.done)
+                        .filter(Objects::nonNull).collect(Collectors.toList());
                 Utils.runInThread(() -> {
                     for (final Closure done : dones) {
                         done.run(st);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/AbstractClientService.java
Patch:
@@ -107,7 +107,7 @@ protected boolean initRpcClient(final int rpcProcessorThreadPoolSize) {
         final RaftRpcFactory factory = RpcFactoryHelper.rpcFactory();
         this.rpcClient = factory.createRpcClient(factory.defaultJRaftClientConfigHelper(this.rpcOptions));
         configRpcClient(this.rpcClient);
-        this.rpcClient.init(null);
+        this.rpcClient.init(this.rpcOptions);
         this.rpcExecutor = ThreadPoolUtil.newBuilder() //
             .poolName("JRaft-RPC-Processor") //
             .enableMetric(true) //

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -414,7 +414,7 @@ private void addNewPeers(final Configuration adding) {
         private void addNewLearners() {
             final Set<PeerId> addingLearners = new HashSet<>(this.newLearners);
             addingLearners.removeAll(this.oldLearners);
-            LOG.info("Adding learners: {}.", this.addingPeers);
+            LOG.info("Adding learners: {}.", addingLearners);
             for (final PeerId newLearner : addingLearners) {
                 if (!this.node.replicatorGroup.addReplicator(newLearner, ReplicatorType.Learner)) {
                     LOG.error("Node {} start the learner replicator failed, peer={}.", this.node.getNodeId(),

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/MockStateMachine.java
Patch:
@@ -33,6 +33,7 @@
 import com.alipay.sofa.jraft.Iterator;
 import com.alipay.sofa.jraft.Status;
 import com.alipay.sofa.jraft.entity.LeaderChangeContext;
+import com.alipay.sofa.jraft.entity.RaftOutter.SnapshotMeta;
 import com.alipay.sofa.jraft.error.RaftError;
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;
@@ -164,7 +165,8 @@ public void onSnapshotSave(final SnapshotWriter writer, final Closure done) {
 
     @Override
     public boolean onSnapshotLoad(final SnapshotReader reader) {
-        this.lastAppliedIndex.set(0);
+        SnapshotMeta meta = reader.load();
+        this.lastAppliedIndex.set(meta.getLastIncludedIndex());
         this.loadSnapshotTimes++;
         final String path = reader.getPath() + File.separator + "data";
         final File file = new File(path);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -1073,10 +1073,8 @@ public void onError(final ThreadId id, final Object data, final int errorCode) {
                 r.destroy();
             }
         } else if (errorCode == RaftError.ETIMEDOUT.getNumber()) {
-            id.unlock();
             RpcUtils.runInThread(() -> sendHeartbeat(id));
         } else {
-            id.unlock();
             // noinspection ConstantConditions
             Requires.requireTrue(false, "Unknown error code for replicator: " + errorCode);
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/RocksDBLogStorage.java
Patch:
@@ -578,7 +578,7 @@ private void truncatePrefixInBackground(final long startIndex, final long firstI
             long startMs = Utils.monotonicMs();
             this.readLock.lock();
             try {
-                RocksDB db =this.db;
+                RocksDB db = this.db;
                 if (db == null) {
                     LOG.warn(
                         "DB is null while truncating prefixed logs in data path: {}, the range is: [{}, {})",

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/zip/ParallelZipStrategy.java
Patch:
@@ -110,6 +110,8 @@ public void compress(final String rootDir, final String sourceDir, final String
             fos.getFD().sync();
         }
         Utils.fsync(zipFile);
+        // shutdown executor
+        ExecutorServiceHelper.shutdownAndAwaitTermination(compressExecutor);
     }
 
     @Override

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/zip/ZipStrategyManager.java
Patch:
@@ -51,7 +51,7 @@ public static ZipStrategy getDefault() {
     public static void init(final RheaKVStoreOptions opts) {
         // add parallel zip strategy
         if (opts.isUseParallelCompress()) {
-            if (zipStrategies[PARALLEL_STRATEGY] != null) {
+            if (zipStrategies[PARALLEL_STRATEGY] == null) {
                 final ZipStrategy zipStrategy = new ParallelZipStrategy(opts.getCompressThreads(),
                     opts.getDeCompressThreads());
                 ZipStrategyManager.addZipStrategy(ZipStrategyManager.PARALLEL_STRATEGY, zipStrategy);

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReadOnlyServiceTest.java
Patch:
@@ -36,6 +36,7 @@
 import com.alipay.sofa.jraft.entity.PeerId;
 import com.alipay.sofa.jraft.entity.ReadIndexState;
 import com.alipay.sofa.jraft.entity.ReadIndexStatus;
+import com.alipay.sofa.jraft.option.NodeOptions;
 import com.alipay.sofa.jraft.option.RaftOptions;
 import com.alipay.sofa.jraft.option.ReadOnlyServiceOptions;
 import com.alipay.sofa.jraft.rpc.RpcRequests.ReadIndexRequest;
@@ -70,6 +71,7 @@ public void setup() {
         opts.setNode(this.node);
         opts.setRaftOptions(new RaftOptions());
         Mockito.when(this.node.getNodeMetrics()).thenReturn(new NodeMetrics(false));
+        Mockito.when(this.node.getOptions()).thenReturn(new NodeOptions());
         Mockito.when(this.node.getGroupId()).thenReturn("test");
         Mockito.when(this.node.getServerId()).thenReturn(new PeerId("localhost:8081", 0));
         assertTrue(this.readOnlyServiceImpl.init(opts));
@@ -270,7 +272,7 @@ public void run(final Status status, final long index, final byte[] reqCtx) {
     @Test
     public void testOverMaxReadIndexLag() throws Exception {
         Mockito.when(this.fsmCaller.getLastAppliedIndex()).thenReturn(1L);
-        readOnlyServiceImpl.getRaftOptions().setMaxReadIndexLag(50);
+        this.readOnlyServiceImpl.getRaftOptions().setMaxReadIndexLag(50);
 
         final byte[] requestContext = TestUtils.getRandomBytes();
         final CountDownLatch latch = new CountDownLatch(1);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftServiceFactory.java
Patch:
@@ -34,7 +34,7 @@ public interface JRaftServiceFactory {
      * Creates a raft log storage.
      * @param uri  The log storage uri from {@link NodeOptions#getSnapshotUri()}
      * @param raftOptions  the raft options.
-     * @return storage to store raft log entires.
+     * @return storage to store raft log entries.
      */
     LogStorage createLogStorage(final String uri, final RaftOptions raftOptions);
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Node.java
Patch:
@@ -211,7 +211,7 @@ public interface Node extends Lifecycle<NodeOptions>, Describer {
      * dead and you'd like to revive the service in the consideration of
      * availability.
      * Notice that neither consistency nor consensus are guaranteed in this
-     * case, BE CAREFULE when dealing with this method.
+     * case, BE CAREFUL when dealing with this method.
      *
      * @param newPeers new peers
      */

File: jraft-core/src/main/java/com/alipay/sofa/jraft/ReplicatorGroup.java
Patch:
@@ -41,7 +41,7 @@ public interface ReplicatorGroup extends Describer {
      * Init the replicator group.
      *
      * @param nodeId node id
-     * @param opts   options of replicator grop
+     * @param opts   options of replicator group
      * @return true if init success
      */
     boolean init(final NodeId nodeId, final ReplicatorGroupOptions opts);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/ThreadId.java
Patch:
@@ -17,7 +17,6 @@
 package com.alipay.sofa.jraft.util;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/counter/CounterClient.java
Patch:
@@ -32,7 +32,7 @@ public class CounterClient {
 
     public static void main(final String[] args) throws Exception {
         if (args.length != 2) {
-            System.out.println("Useage : java com.alipay.sofa.jraft.example.counter.CounterClient {groupId} {conf}");
+            System.out.println("Usage : java com.alipay.sofa.jraft.example.counter.CounterClient {groupId} {conf}");
             System.out
                 .println("Example: java com.alipay.sofa.jraft.example.counter.CounterClient counter 127.0.0.1:8081,127.0.0.1:8082,127.0.0.1:8083");
             System.exit(1);

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/counter/CounterServer.java
Patch:
@@ -103,7 +103,7 @@ public ValueResponse redirect() {
     public static void main(final String[] args) throws IOException {
         if (args.length != 4) {
             System.out
-                .println("Useage : java com.alipay.sofa.jraft.example.counter.CounterServer {dataPath} {groupId} {serverId} {initConf}");
+                .println("Usage : java com.alipay.sofa.jraft.example.counter.CounterServer {dataPath} {groupId} {serverId} {initConf}");
             System.out
                 .println("Example: java com.alipay.sofa.jraft.example.counter.CounterServer /tmp/server1 counter 127.0.0.1:8081 127.0.0.1:8081,127.0.0.1:8082,127.0.0.1:8083");
             System.exit(1);

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/priorityelection/PriorityElectionBootstrap.java
Patch:
@@ -33,7 +33,7 @@ public class PriorityElectionBootstrap {
     public static void main(final String[] args) {
         if (args.length < 4) {
             System.out
-                .println("Useage : java com.alipay.sofa.jraft.example.priorityelection.PriorityElectionBootstrap {dataPath} {groupId} {serverId} {initConf}");
+                .println("Usage : java com.alipay.sofa.jraft.example.priorityelection.PriorityElectionBootstrap {dataPath} {groupId} {serverId} {initConf}");
             System.out
                 .println("Example: java com.alipay.sofa.jraft.example.priorityelection.PriorityElectionBootstrap /tmp/server1 election_test 127.0.0.1:8081::100 127.0.0.1:8081::100,127.0.0.1:8082::40,127.0.0.1:8083::40");
             System.exit(1);

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/election/ElectionBootstrap.java
Patch:
@@ -29,7 +29,7 @@ public class ElectionBootstrap {
     public static void main(final String[] args) {
         if (args.length < 4) {
             System.out
-                .println("Useage : java com.alipay.sofa.jraft.example.election.ElectionBootstrap {dataPath} {groupId} {serverId} {initConf}");
+                .println("Usage : java com.alipay.sofa.jraft.example.election.ElectionBootstrap {dataPath} {groupId} {serverId} {initConf}");
             System.out
                 .println("Example: java com.alipay.sofa.jraft.example.election.ElectionBootstrap /tmp/server1 election_test 127.0.0.1:8081 127.0.0.1:8081,127.0.0.1:8082,127.0.0.1:8083");
             System.exit(1);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LocalRaftMetaStorage.java
Patch:
@@ -75,7 +75,7 @@ public boolean init(final RaftMetaStorageOptions opts) {
         try {
             FileUtils.forceMkdir(new File(this.path));
         } catch (final IOException e) {
-            LOG.error("Fail to mkdir {}", this.path);
+            LOG.error("Fail to mkdir {}", this.path, e);
             return false;
         }
         if (load()) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/local/LocalSnapshotReader.java
Patch:
@@ -80,15 +80,15 @@ long getReaderId() {
     public boolean init(final Void v) {
         final File dir = new File(this.path);
         if (!dir.exists()) {
-            LOG.error("No such path %s for snapshot reader.", this.path);
+            LOG.error("No such path {} for snapshot reader.", this.path);
             setError(RaftError.ENOENT, "No such path %s for snapshot reader", this.path);
             return false;
         }
         final String metaPath = this.path + File.separator + JRAFT_SNAPSHOT_META_FILE;
         try {
             return this.metaTable.loadFromFile(metaPath);
         } catch (final IOException e) {
-            LOG.error("Fail to load snapshot meta {}.", metaPath);
+            LOG.error("Fail to load snapshot meta {}.", metaPath, e);
             setError(RaftError.EIO, "Fail to load snapshot meta from path %s", metaPath);
             return false;
         }
@@ -136,7 +136,7 @@ public String generateURIForCopy() {
             }
         }
 
-        return String.format(REMOTE_SNAPSHOT_URI_SCHEME + "%s/%d", this.addr.toString(), this.readerId);
+        return String.format(REMOTE_SNAPSHOT_URI_SCHEME + "%s/%d", this.addr, this.readerId);
     }
 
     private void destroyReaderInFileService() {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/local/LocalSnapshotWriter.java
Patch:
@@ -61,7 +61,7 @@ public boolean init(final Void v) {
         try {
             FileUtils.forceMkdir(dir);
         } catch (final IOException e) {
-            LOG.error("Fail to create directory {}.", this.path);
+            LOG.error("Fail to create directory {}.", this.path, e);
             setError(RaftError.EIO, "Fail to create directory  %s", this.path);
             return false;
         }
@@ -72,7 +72,7 @@ public boolean init(final Void v) {
                 return metaTable.loadFromFile(metaPath);
             }
         } catch (final IOException e) {
-            LOG.error("Fail to load snapshot meta from {}.", metaPath);
+            LOG.error("Fail to load snapshot meta from {}.", metaPath, e);
             setError(RaftError.EIO, "Fail to load snapshot meta from %s", metaPath);
             return false;
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/remote/CopySession.java
Patch:
@@ -251,7 +251,7 @@ void onRpcReturned(final Status status, final GetFileResponse response) {
                 try {
                     response.getData().writeTo(this.outputStream);
                 } catch (final IOException e) {
-                    LOG.error("Fail to write into file {}", this.destPath);
+                    LOG.error("Fail to write into file {}", this.destPath, e);
                     this.st.setError(RaftError.EIO, RaftError.EIO.name());
                     onFinished();
                     return;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/Sequence.java
Patch:
@@ -37,14 +37,14 @@ public Sequence(long startValue, long endValue) {
     }
 
     /**
-     * 可用的最小值, 包含 [startValue, endValue)
+     * The available minimum value, including [startValue, endValue)
      */
     public long getStartValue() {
         return startValue;
     }
 
     /**
-     * 可用的最大值, 不包含 [startValue, endValue)
+     * The available maximum value, not including [startValue, endValue)
      */
     public long getEndValue() {
         return endValue;

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/PlacementDriverTailHandler.java
Patch:
@@ -35,7 +35,7 @@ public void handleInbound(final HandlerContext ctx, final InboundMessageEvent<?>
         if (isAcceptable(event)) {
             // to outbound
             PingEvent<?> ping = (PingEvent<?>) event;
-            ctx.fireOutbound(new PongEvent(ping.getInvokeId(), Lists.newArrayList(ping.getInstructions())));
+            ctx.pipeline().fireOutbound(new PongEvent(ping.getInvokeId(), Lists.newArrayList(ping.getInstructions())));
         }
     }
 

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReplicatorTest.java
Patch:
@@ -172,7 +172,7 @@ public void testMetricRemoveOnDestroy() {
         assertEquals(7, metrics.size());
         r.destroy();
         metrics = this.opts.getNode().getNodeMetrics().getMetricRegistry().getNames();
-        assertEquals(1, metrics.size());
+        assertEquals(0, metrics.size());
     }
 
     private Replicator getReplicator() {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVClosureAdapter.java
Patch:
@@ -71,7 +71,7 @@ public void run(final Status status) {
         if (done != null) {
             done.run(status);
         }
-        clear();
+        reset();
     }
 
     @Override
@@ -104,7 +104,7 @@ public void setData(Object data) {
         }
     }
 
-    private void clear() {
+    private void reset() {
         done = null;
         operation = null;
     }

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/Server1.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class Server1 {
 
-    public static void main(final String[] args) throws Exception {
+    public static void main(final String[] args) {
         final PlacementDriverOptions pdOpts = PlacementDriverOptionsConfigured.newConfigured()
                 .withFake(true) // use a fake pd
                 .config();
@@ -44,6 +44,7 @@ public static void main(final String[] args) throws Exception {
                 .config();
         final RheaKVStoreOptions opts = RheaKVStoreOptionsConfigured.newConfigured() //
                 .withClusterName(Configs.CLUSTER_NAME) //
+                .withUseParallelCompress(true) //
                 .withInitialServerList(Configs.ALL_NODE_ADDRESSES)
                 .withStoreEngineOptions(storeOpts) //
                 .withPlacementDriverOptions(pdOpts) //

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/Server2.java
Patch:
@@ -44,6 +44,7 @@ public static void main(final String[] args) throws Exception {
                 .config();
         final RheaKVStoreOptions opts = RheaKVStoreOptionsConfigured.newConfigured() //
                 .withClusterName(Configs.CLUSTER_NAME) //
+                .withUseParallelCompress(true) //
                 .withInitialServerList(Configs.ALL_NODE_ADDRESSES)
                 .withStoreEngineOptions(storeOpts) //
                 .withPlacementDriverOptions(pdOpts) //

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/Server3.java
Patch:
@@ -44,6 +44,7 @@ public static void main(final String[] args) throws Exception {
                 .config();
         final RheaKVStoreOptions opts = RheaKVStoreOptionsConfigured.newConfigured() //
                 .withClusterName(Configs.CLUSTER_NAME) //
+                .withUseParallelCompress(true) //
                 .withInitialServerList(Configs.ALL_NODE_ADDRESSES)
                 .withStoreEngineOptions(storeOpts) //
                 .withPlacementDriverOptions(pdOpts) //

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVStore.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 
+import com.alipay.sofa.jraft.rhea.storage.zip.ZipStrategyManager;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -241,6 +242,8 @@ public synchronized boolean init(final RheaKVStoreOptions opts) {
             LOG.error("Fail to init [PlacementDriverClient].");
             return false;
         }
+        // init compress strategies
+        ZipStrategyManager.init(opts);
         // init store engine
         final StoreEngineOptions stOpts = opts.getStoreEngineOptions();
         if (stOpts != null) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/SnapshotExecutorImpl.java
Patch:
@@ -611,7 +611,7 @@ boolean registerDownloadingSnapshot(final DownloadingSnapshot ds) {
                 // this RPC.
                 saved = m;
                 this.downloadingSnapshot.set(ds);
-                result = false;
+                result = true;
             } else if (m.request.getMeta().getLastIncludedIndex() > ds.request.getMeta().getLastIncludedIndex()) {
                 // |is| is older
                 LOG.warn("Register DownloadingSnapshot failed: is installing a newer one, lastIncludeIndex={}.",
@@ -648,7 +648,7 @@ boolean registerDownloadingSnapshot(final DownloadingSnapshot ds) {
         }
         if (saved != null) {
             // Respond replaced session
-            LOG.warn("Register DownloadingSnapshot failed: interrupted by retry installling request.");
+            LOG.warn("Register DownloadingSnapshot failed: interrupted by retry installing request.");
             saved.done.sendResponse(RpcFactoryHelper //
                 .responseFactory() //
                 .newResponse(InstallSnapshotResponse.getDefaultInstance(), RaftError.EINTR,

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/RpcContext.java
Patch:
@@ -36,7 +36,7 @@ public interface RpcContext {
     Connection getConnection();
 
     /**
-     * GFet the remote address.
+     * Get the remote address.
      *
      * @return remote address
      */

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/BoltRpcClient.java
Patch:
@@ -74,7 +74,7 @@ public boolean checkConnection(final Endpoint endpoint) {
     @Override
     public boolean checkConnection(final Endpoint endpoint, final boolean createIfAbsent) {
         Requires.requireNonNull(endpoint, "endpoint");
-        return this.rpcClient.checkConnection(endpoint.toString(), true, true);
+        return this.rpcClient.checkConnection(endpoint.toString(), createIfAbsent, true);
     }
 
     @Override

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/DefaultPlacementDriverService.java
Patch:
@@ -190,7 +190,7 @@ public void handleGetClusterInfoRequest(final GetClusterInfoRequest request,
         }
         try {
             final Cluster cluster = this.metadataStore.getClusterInfo(clusterId);
-            response.setCluster(cluster);
+            response.setValue(cluster);
         } catch (final Throwable t) {
             LOG.error("Failed to handle: {}, {}.", request, StackTraceUtil.stackTrace(t));
             response.setError(Errors.forException(t));

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/FSMCallerImpl.java
Patch:
@@ -339,7 +339,7 @@ public void run(final Status st) {
     @Override
     public boolean onError(final RaftException error) {
         if (!this.error.getStatus().isOk()) {
-            LOG.warn("FSMCaller already in error status, ignore new error: {}", error);
+            LOG.warn("FSMCaller already in error status, ignore new error.", error);
             return false;
         }
         final OnErrorClosure c = new OnErrorClosure(error);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/SignalHelper.java
Patch:
@@ -62,7 +62,7 @@ private static boolean hasSignal0() {
             return true;
         } catch (final Throwable t) {
             if (LOG.isWarnEnabled()) {
-                LOG.warn("sun.misc.Signal: unavailable, {}.", t);
+                LOG.warn("sun.misc.Signal: unavailable.", t);
             }
         }
         return false;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/UnsafeUtil.java
Patch:
@@ -400,7 +400,7 @@ private static Object getUnsafe0() {
             unsafe = unsafeField.get(null);
         } catch (final Throwable t) {
             if (LOG.isWarnEnabled()) {
-                LOG.warn("sun.misc.Unsafe.theUnsafe: unavailable, {}.", t);
+                LOG.warn("sun.misc.Unsafe.theUnsafe: unavailable.", t);
             }
             unsafe = null;
         }

File: jraft-extension/rpc-grpc-impl/src/main/java/com/alipay/sofa/jraft/rpc/impl/GrpcServer.java
Patch:
@@ -153,7 +153,7 @@ public void sendResponse(final Object responseObj) {
                                 responseObserver.onNext((Message) responseObj);
                                 responseObserver.onCompleted();
                             } catch (final Throwable t) {
-                                LOG.warn("[GRPC] failed to send response: {}.", t);
+                                LOG.warn("[GRPC] failed to send response.", t);
                             }
                         }
 
@@ -201,7 +201,7 @@ public String getRemoteAddress() {
                 .builder(interest) //
                 .addMethod(method, handler) //
                 .build();
-        
+
         this.handlerRegistry
             .addService(ServerInterceptors.intercept(serviceDef, this.serverInterceptors.toArray(new ServerInterceptor[0])));
     }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/pipeline/future/DefaultPipelineFuture.java
Patch:
@@ -91,7 +91,7 @@ public void run() {
 
                     Thread.sleep(30);
                 } catch (Throwable t) {
-                    LOG.error("An exception has been caught while scanning the timeout futures {}.", t);
+                    LOG.error("An exception has been caught while scanning the timeout futures.", t);
                 }
             }
         }

File: jraft-extension/rpc-grpc-impl/src/main/java/com/alipay/sofa/jraft/rpc/impl/GrpcClient.java
Patch:
@@ -183,6 +183,7 @@ private ManagedChannel getChannel(final Endpoint endpoint) {
             final ManagedChannel ch = ManagedChannelBuilder.forAddress(ep.getIp(), ep.getPort()) //
                 .usePlaintext() //
                 .directExecutor() //
+                .maxInboundMessageSize(GrpcRaftRpcFactory.RPC_MAX_INBOUND_MESSAGE_SIZE) //
                 .build();
             // channel connection event
             ch.notifyWhenStateChanged(ConnectivityState.READY, () -> {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -3445,8 +3445,8 @@ public void describe(final Printer out) {
         this.ballotBox.describe(out);
 
         // snapshotExecutor
-        out.println("snapshotExecutor: ");
         if (this.snapshotExecutor != null) {
+            out.println("snapshotExecutor: ");
             this.snapshotExecutor.describe(out);
         }
 

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/NodeTest.java
Patch:
@@ -1550,8 +1550,8 @@ public void run(final Status status, final long theIndex, final byte[] reqCtx) {
                     assertArrayEquals(requestContext, reqCtx);
                     success.set(true);
                 } else {
-                    assertTrue(status.getErrorMsg().contains("RPC exception:Check connection["));
-                    assertTrue(status.getErrorMsg().contains("] fail and try to create new one"));
+                    assertTrue(status.getErrorMsg(), status.getErrorMsg().contains("RPC exception:Check connection["));
+                    assertTrue(status.getErrorMsg(), status.getErrorMsg().contains("] fail and try to create new one"));
                 }
                 latch.countDown();
             }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/PeerId.java
Patch:
@@ -196,7 +196,7 @@ public boolean parse(final String s) {
             return false;
         }
 
-        final String[] tmps = StringUtils.splitPreserveAllTokens(s, ':');
+        final String[] tmps = Utils.parsePeerId(s);
         if (tmps.length < 2 || tmps.length > 4) {
             return false;
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -3437,7 +3437,9 @@ public void describe(final Printer out) {
 
         // snapshotExecutor
         out.println("snapshotExecutor: ");
-        this.snapshotExecutor.describe(out);
+        if (this.snapshotExecutor != null) {
+            this.snapshotExecutor.describe(out);
+        }
 
         // replicators
         out.println("replicatorGroup: ");

File: jraft-core/src/main/java/com/alipay/sofa/jraft/closure/ReadIndexClosure.java
Patch:
@@ -63,7 +63,7 @@ public abstract class ReadIndexClosure implements Closure {
     private long                                                     index             = INVALID_LOG_INDEX;
     private byte[]                                                   requestContext;
 
-    private volatile int                                             state;
+    private volatile int                                             state             = PENDING;
 
     public ReadIndexClosure() {
         this(DEFAULT_TIMEOUT);
@@ -75,7 +75,6 @@ public ReadIndexClosure() {
      * @param timeoutMs timeout millis
      */
     public ReadIndexClosure(long timeoutMs) {
-        this.state = PENDING;
         if (timeoutMs >= 0) {
             // Lazy to init the timer
             TimeoutScanner.TIMER.newTimeout(new TimeoutTask(this), timeoutMs, TimeUnit.MILLISECONDS);
@@ -130,7 +129,7 @@ public void run(final Status status) {
 
         try {
             run(status, this.index, this.requestContext);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             LOG.error("Fail to run ReadIndexClosure with status: {}.", status, t);
         }
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/Checksum.java
Patch:
@@ -25,7 +25,7 @@
 public interface Checksum {
 
     /**
-     * Caculate a checksum value for this entity.
+     * Calculate a checksum value for this entity.
      * @return checksum value
      */
     long checksum();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/RpcRequestProcessor.java
Patch:
@@ -50,16 +50,15 @@ public RpcRequestProcessor(Executor executor, Message defaultResp) {
     @Override
     public void handleRequest(final RpcContext rpcCtx, final T request) {
         try {
-            final Message msg = processRequest(request, new RpcRequestClosure(rpcCtx, defaultResp));
+            final Message msg = processRequest(request, new RpcRequestClosure(rpcCtx, this.defaultResp));
             if (msg != null) {
                 rpcCtx.sendResponse(msg);
             }
         } catch (final Throwable t) {
             LOG.error("handleRequest {} failed", request, t);
             rpcCtx.sendResponse(RpcFactoryHelper //
                 .responseFactory() //
-                .newResponse(defaultResp(), -1, "handleRequest internal error") //
-                );
+                .newResponse(defaultResp(), -1, "handleRequest internal error"));
         }
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/RocksDBLogStorage.java
Patch:
@@ -114,7 +114,7 @@ default void addFinishHook(final Runnable r) {
 
         /**
          * Set an exception to context.
-         * @param e
+         * @param e exception
          */
         default void setError(final Exception e) {
         }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/errors/InvalidRegionMembershipException.java
Patch:
@@ -17,7 +17,7 @@
 package com.alipay.sofa.jraft.rhea.errors;
 
 /**
- * 当前region发生了membership changes, 也就是新增或者删除了peer
+ * Membership changes occur in the current region
  *
  * @author jiachun.fjc
  */

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/errors/InvalidRegionVersionException.java
Patch:
@@ -17,7 +17,7 @@
 package com.alipay.sofa.jraft.rhea.errors;
 
 /**
- * 当前region发生了split
+ * A split occurs in the region.
  *
  * @author jiachun.fjc
  */

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVClosureAdapter.java
Patch:
@@ -46,7 +46,7 @@ public KVOperation getOperation() {
     }
 
     @Override
-    public void run(Status status) {
+    public void run(final Status status) {
         if (status.isOk()) {
             setError(Errors.NONE);
         } else {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/MetricsKVClosureAdapter.java
Patch:
@@ -87,7 +87,7 @@ public void setData(Object data) {
     }
 
     @Override
-    public void run(Status status) {
+    public void run(final Status status) {
         try {
             if (this.done != null) {
                 this.done.run(status);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RaftRawKVStore.java
Patch:
@@ -382,6 +382,6 @@ private void applyOperation(final KVOperation op, final KVStoreClosure closure)
     }
 
     private boolean isLeader() {
-        return this.node.isLeader();
+        return this.node.isLeader(false);
     }
 }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/NodeTest.java
Patch:
@@ -2641,6 +2641,7 @@ public void testShuttingDownLeaderTriggerTimeoutNow() throws Exception {
 
         Thread.sleep(100);
         leader = cluster.getLeader();
+        cluster.waitLeader();
         assertNotNull(leader);
         assertNotSame(leader, oldLeader);
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/AbstractClientService.java
Patch:
@@ -39,6 +39,7 @@
 import com.alipay.sofa.jraft.rpc.RpcRequests.PingRequest;
 import com.alipay.sofa.jraft.rpc.RpcResponseClosure;
 import com.alipay.sofa.jraft.rpc.RpcResponseFactory;
+import com.alipay.sofa.jraft.rpc.RpcUtils;
 import com.alipay.sofa.jraft.util.Endpoint;
 import com.alipay.sofa.jraft.util.NamedThreadFactory;
 import com.alipay.sofa.jraft.util.RpcFactoryHelper;
@@ -188,7 +189,7 @@ public <T extends Message> Future<Message> invokeWithDone(final Endpoint endpoin
             if (rc == null) {
                 future.failure(new IllegalStateException("Client service is uninitialized."));
                 // should be in another thread to avoid dead locking.
-                Utils.runClosureInThread(done, new Status(RaftError.EINTERNAL, "Client service is uninitialized."));
+                RpcUtils.runClosureInThread(done, new Status(RaftError.EINTERNAL, "Client service is uninitialized."));
                 return future;
             }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -297,8 +297,8 @@ public void appendEntries(final List<LogEntry> entries, final StableClosure done
         this.writeLock.lock();
         try {
             if (!entries.isEmpty() && !checkAndResolveConflict(entries, done)) {
+                // If checkAndResolveConflict returns false, the done will be called in it.
                 entries.clear();
-                Utils.runClosureInThread(done, new Status(RaftError.EINTERNAL, "Fail to checkAndResolveConflict."));
                 return;
             }
             for (int i = 0; i < entries.size(); i++) {
@@ -1008,6 +1008,8 @@ private boolean checkAndResolveConflict(final List<LogEntry> entries, final Stab
                 LOG.warn(
                     "Received entries of which the lastLog={} is not greater than appliedIndex={}, return immediately with nothing changed.",
                     lastLogEntry.getId().getIndex(), appliedIndex);
+                // Replicate old logs before appliedIndex should be considered successfully, response OK.
+                Utils.runClosureInThread(done);
                 return false;
             }
             if (firstLogEntry.getId().getIndex() == this.lastLogIndex + 1) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/remote/CopySession.java
Patch:
@@ -41,6 +41,7 @@
 import com.alipay.sofa.jraft.rpc.RpcRequests.GetFileRequest;
 import com.alipay.sofa.jraft.rpc.RpcRequests.GetFileResponse;
 import com.alipay.sofa.jraft.rpc.RpcResponseClosureAdapter;
+import com.alipay.sofa.jraft.rpc.RpcUtils;
 import com.alipay.sofa.jraft.storage.SnapshotThrottle;
 import com.alipay.sofa.jraft.util.ByteBufferCollector;
 import com.alipay.sofa.jraft.util.Endpoint;
@@ -203,7 +204,7 @@ private void onFinished() {
     }
 
     private void onTimer() {
-        Utils.runInThread(this::sendNextRpc);
+        RpcUtils.runInThread(this::sendNextRpc);
     }
 
     void onRpcReturned(final Status status, final GetFileResponse response) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Utils.java
Patch:
@@ -48,7 +48,7 @@
  *
  * 2018-Apr-07 10:12:35 AM
  */
-public class Utils {
+public final class Utils {
 
     private static final Logger       LOG                                 = LoggerFactory.getLogger(Utils.class);
 

File: jraft-extension/rpc-grpc-impl/src/main/java/com/alipay/sofa/jraft/rpc/impl/MarshallerHelper.java
Patch:
@@ -16,7 +16,7 @@
  */
 package com.alipay.sofa.jraft.rpc.impl;
 
-import java.util.HashMap;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.Map;
 
 import com.alipay.sofa.jraft.rpc.CliRequests;
@@ -30,7 +30,7 @@
  */
 public class MarshallerHelper {
 
-    private static Map<String, Message> messages = new HashMap<>();
+    private static Map<String, Message> messages = new ConcurrentHashMap<>();
 
     static {
         messages.put(RpcRequests.AppendEntriesRequest.class.getName(),

File: jraft-test/src/main/java/com/alipay/sofa/jraft/test/atomic/server/AtomicSnapshotFile.java
Patch:
@@ -48,7 +48,7 @@ public String getPath() {
 
     /**
      * Save value to snapshot file.
-     * @param value
+     * @param values
      * @return
      */
     public boolean save(Map<String, Long> values) {

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/election/ElectionNode.java
Patch:
@@ -54,7 +54,7 @@ public class ElectionNode implements Lifecycle<ElectionNodeOptions> {
     @Override
     public boolean init(final ElectionNodeOptions opts) {
         if (this.started) {
-            LOG.info("[ElectionNode: {}] already started.");
+            LOG.info("[ElectionNode: {}] already started.", opts.getServerAddress());
             return true;
         }
         // node options
@@ -112,7 +112,7 @@ public void shutdown() {
             }
         }
         this.started = false;
-        LOG.info("[RegionEngine] shutdown successfully: {}.", this);
+        LOG.info("[ElectionNode] shutdown successfully: {}.", this);
     }
 
     public Node getNode() {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -109,7 +109,7 @@ public class Replicator implements ThreadId.OnError {
     private ScheduledFuture<?>               heartbeatTimer;
     private volatile SnapshotReader          reader;
     private CatchUpClosure                   catchUpClosure;
-    private final TimerManager               timerManager;
+    private final Scheduler                  timerManager;
     private final NodeMetrics                nodeMetrics;
     private volatile State                   state;
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/core/DefaultRaftClientService.java
Patch:
@@ -53,7 +53,7 @@
  * @author boyan (boyan@alibaba-inc.com)
  * @author jiachun.fjc
  */
-public class BoltRaftClientService extends AbstractClientService implements RaftClientService {
+public class DefaultRaftClientService extends AbstractClientService implements RaftClientService {
 
     private static final FixedThreadsExecutorGroup  APPEND_ENTRIES_EXECUTORS = DefaultFixedThreadsExecutorGroupFactory.INSTANCE
                                                                                  .newExecutorGroup(
@@ -73,7 +73,7 @@ protected void configRpcClient(final RpcClient rpcClient) {
         rpcClient.registerConnectEventListener(this.rgGroup);
     }
 
-    public BoltRaftClientService(final ReplicatorGroup rgGroup) {
+    public DefaultRaftClientService(final ReplicatorGroup rgGroup) {
         this.rgGroup = rgGroup;
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/remote/CopySession.java
Patch:
@@ -32,7 +32,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.alipay.sofa.jraft.Status;
-import com.alipay.sofa.jraft.core.TimerManager;
+import com.alipay.sofa.jraft.core.Scheduler;
 import com.alipay.sofa.jraft.error.RaftError;
 import com.alipay.sofa.jraft.option.CopyOptions;
 import com.alipay.sofa.jraft.option.RaftOptions;
@@ -67,7 +67,7 @@ public class CopySession implements Session {
     private final RaftClientService      rpcService;
     private final GetFileRequest.Builder requestBuilder;
     private final Endpoint               endpoint;
-    private final TimerManager           timerManager;
+    private final Scheduler              timerManager;
     private final SnapshotThrottle       snapshotThrottle;
     private final RaftOptions            raftOptions;
     private int                          retryTimes  = 0;
@@ -123,7 +123,7 @@ public void close() throws IOException {
         }
     }
 
-    public CopySession(final RaftClientService rpcService, final TimerManager timerManager,
+    public CopySession(final RaftClientService rpcService, final Scheduler timerManager,
                        final SnapshotThrottle snapshotThrottle, final RaftOptions raftOptions,
                        final GetFileRequest.Builder rb, final Endpoint ep) {
         super();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/remote/RemoteFileCopier.java
Patch:
@@ -25,7 +25,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.alipay.sofa.jraft.core.TimerManager;
+import com.alipay.sofa.jraft.core.Scheduler;
 import com.alipay.sofa.jraft.option.CopyOptions;
 import com.alipay.sofa.jraft.option.RaftOptions;
 import com.alipay.sofa.jraft.option.SnapshotCopierOptions;
@@ -52,7 +52,7 @@ public class RemoteFileCopier {
     private RaftClientService   rpcService;
     private Endpoint            endpoint;
     private RaftOptions         raftOptions;
-    private TimerManager        timerManager;
+    private Scheduler           timerManager;
     private SnapshotThrottle    snapshotThrottle;
 
     @OnlyForTest

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/LogThreadPoolExecutor.java
Patch:
@@ -29,6 +29,8 @@
 import org.slf4j.LoggerFactory;
 
 /**
+ * A {@link java.util.concurrent.ExecutorService} that witch can print
+ * error message for failed execution.
  *
  * @author jiachun.fjc
  */

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReplicatorGroupTest.java
Patch:
@@ -78,8 +78,7 @@ public class ReplicatorGroupTest {
 
     @Before
     public void setup() {
-        this.timerManager = new TimerManager();
-        this.timerManager.init(5);
+        this.timerManager = new TimerManager(5);
         this.replicatorGroup = new ReplicatorGroupImpl();
         final ReplicatorGroupOptions rgOpts = new ReplicatorGroupOptions();
         rgOpts.setHeartbeatTimeoutMs(heartbeatTimeout(this.options.getElectionTimeoutMs()));

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReplicatorTest.java
Patch:
@@ -86,8 +86,7 @@ public class ReplicatorTest {
 
     @Before
     public void setup() {
-        this.timerManager = new TimerManager();
-        this.timerManager.init(5);
+        this.timerManager = new TimerManager(5);
         this.opts = new ReplicatorOptions();
         this.opts.setRaftRpcService(this.rpcService);
         this.opts.setPeerId(this.peerId);

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/SnapshotExecutorTest.java
Patch:
@@ -95,8 +95,7 @@ public class SnapshotExecutorTest extends BaseStorageTest {
     @Before
     public void setup() throws Exception {
         super.setup();
-        this.timerManager = new TimerManager();
-        this.timerManager.init(5);
+        this.timerManager = new TimerManager(5);
         this.raftOptions = new RaftOptions();
         this.writer = new LocalSnapshotWriter(this.path, this.snapshotStorage, this.raftOptions);
         this.reader = new LocalSnapshotReader(this.snapshotStorage, null, new Endpoint("localhost", 8081),

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/snapshot/local/LocalSnapshotCopierTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 
 import com.alipay.sofa.jraft.Status;
+import com.alipay.sofa.jraft.core.Scheduler;
 import com.alipay.sofa.jraft.core.TimerManager;
 import com.alipay.sofa.jraft.entity.LocalFileMetaOutter;
 import com.alipay.sofa.jraft.entity.RaftOutter;
@@ -70,14 +71,13 @@ public class LocalSnapshotCopierTest extends BaseStorageTest {
     private RaftOptions            raftOptions;
     @Mock
     private LocalSnapshotStorage   snapshotStorage;
-    private TimerManager           timerManager;
+    private Scheduler              timerManager;
 
     @Override
     @Before
     public void setup() throws Exception {
         super.setup();
-        this.timerManager = new TimerManager();
-        this.timerManager.init(5);
+        this.timerManager = new TimerManager(5);
         this.raftOptions = new RaftOptions();
         this.writer = new LocalSnapshotWriter(this.path, this.snapshotStorage, this.raftOptions);
         this.reader = new LocalSnapshotReader(this.snapshotStorage, null, new Endpoint("localhost", 8081),

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/snapshot/remote/CopySessionTest.java
Patch:
@@ -58,8 +58,7 @@ public class CopySessionTest {
 
     @Before
     public void setup() {
-        this.timerManager = new TimerManager();
-        this.timerManager.init(5);
+        this.timerManager = new TimerManager(5);
         this.copyOpts = new CopyOptions();
         this.rb = RpcRequests.GetFileRequest.newBuilder();
         this.rb.setReaderId(99);

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/snapshot/remote/RemoteFileCopierTest.java
Patch:
@@ -44,8 +44,7 @@ public class RemoteFileCopierTest {
 
     @Before
     public void setup() {
-        this.timerManager = new TimerManager();
-        this.timerManager.init(5);
+        this.timerManager = new TimerManager(5);
         copier = new RemoteFileCopier();
     }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -68,8 +68,8 @@
 import com.alipay.sofa.jraft.util.Describer;
 import com.alipay.sofa.jraft.util.Endpoint;
 import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
-import com.alipay.sofa.jraft.util.MetricThreadPoolExecutor;
 import com.alipay.sofa.jraft.util.Requires;
+import com.alipay.sofa.jraft.util.ThreadPoolMetricRegistry;
 import com.alipay.sofa.jraft.util.Utils;
 import com.codahale.metrics.ScheduledReporter;
 import com.codahale.metrics.Slf4jReporter;
@@ -577,7 +577,7 @@ private void startMetricReporters(final long metricsReportPeriod) {
                 this.metricsScheduler = StoreEngineHelper.createMetricsScheduler();
             }
             // start threadPool metrics reporter
-            this.threadPoolMetricsReporter = Slf4jReporter.forRegistry(MetricThreadPoolExecutor.metricRegistry()) //
+            this.threadPoolMetricsReporter = Slf4jReporter.forRegistry(ThreadPoolMetricRegistry.metricRegistry()) //
                 .withLoggingLevel(Slf4jReporter.LoggingLevel.INFO) //
                 .outputTo(LOG) //
                 .scheduleOn(this.metricsScheduler) //

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -1266,7 +1266,7 @@ private void stepDown(final long term, final boolean wakeupCandidate, final Stat
         }
         // Learner node will not trigger the election timer.
         if (!isLearner()) {
-            this.electionTimer.start();
+            this.electionTimer.restart();
         } else {
             LOG.info("Node {} is a learner, election timer is not started.", this.nodeId);
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/FSMCaller.java
Patch:
@@ -55,7 +55,7 @@ interface LastAppliedLogIndexListener {
     /**
      * Called when log entry committed
      *
-     * @param committedIndex committed log indexx
+     * @param committedIndex committed log index
      */
     boolean onCommitted(final long committedIndex);
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Status.java
Patch:
@@ -199,14 +199,14 @@ public void setErrorMsg(String errMsg) {
      * Set error code and error msg.
      */
     public void setError(int code, String fmt, Object... args) {
-        this.state = new State(code, String.format(fmt, args));
+        this.state = new State(code, String.format(String.valueOf(fmt), args));
     }
 
     /**
      * Set raft error and error msg.
      */
     public void setError(RaftError error, String fmt, Object... args) {
-        this.state = new State(error.getNumber(), String.format(fmt, args));
+        this.state = new State(error.getNumber(), String.format(String.valueOf(fmt), args));
     }
 
     @Override

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/FSMCallerImpl.java
Patch:
@@ -233,7 +233,7 @@ private boolean enqueueTask(final EventTranslator<ApplyTask> tpl) {
             return false;
         }
         if (!this.taskQueue.tryPublishEvent(tpl)) {
-            onError(new RaftException(ErrorType.ERROR_TYPE_STATE_MACHINE, new Status(RaftError.EBUSY,
+            setError(new RaftException(ErrorType.ERROR_TYPE_STATE_MACHINE, new Status(RaftError.EBUSY,
                 "FSMCaller is overload.")));
             return false;
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -620,6 +620,9 @@ public void setSnapshot(final SnapshotMeta meta) {
             if (this.lastSnapshotId.compareTo(this.appliedId) > 0) {
                 this.appliedId = this.lastSnapshotId.copy();
             }
+            if (this.lastSnapshotId.compareTo(this.diskId) > 0) {
+                this.diskId = this.lastSnapshotId.copy();
+            }
 
             if (term == 0) {
                 // last_included_index is larger than last_index

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/NodeTest.java
Patch:
@@ -3161,7 +3161,8 @@ public void testChangePeersChaosWithSnapshot() throws Exception {
         final SynchronizedClosure done = new SynchronizedClosure();
         final Node leader = cluster.getLeader();
         leader.changePeers(new Configuration(peers), done);
-        assertTrue(done.await().isOk());
+        final Status st = done.await();
+        assertTrue(st.getErrorMsg(), st.isOk());
         cluster.ensureSame();
         assertEquals(10, cluster.getFsms().size());
         for (final MockStateMachine fsm : cluster.getFsms()) {

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/impl/LogStorageBenchmark.java
Patch:
@@ -124,6 +124,7 @@ private void doTest() {
 
     public static void main(final String[] args) {
         String testPath = Paths.get(SystemPropertyUtil.get("user.dir"), "log_storage").toString();
+        System.out.println("Test log storage path: " + testPath);
         int batchSize = 100;
         int logSize = 16 * 1024;
         int totalLogs = 1024 * 1024;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/PeerId.java
Patch:
@@ -148,6 +148,7 @@ public int getPriority() {
 
     public void setPriority(int priority) {
         this.priority = priority;
+        this.str = null;
     }
 
     /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -2536,7 +2536,7 @@ private void preVote() {
             if (this.snapshotExecutor != null && this.snapshotExecutor.isInstallingSnapshot()) {
                 LOG.warn(
                     "Node {} term {} doesn't do preVote when installing snapshot as the configuration may be out of date.",
-                    getNodeId());
+                    getNodeId(), this.currTerm);
                 return;
             }
             if (!this.conf.contains(this.serverId)) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReplicatorGroupImpl.java
Patch:
@@ -126,7 +126,7 @@ public boolean addReplicator(final PeerId peer, final ReplicatorType replicatorT
         opts.setPeerId(peer);
         final ThreadId rid = Replicator.start(opts, this.raftOptions);
         if (rid == null) {
-            LOG.error("Fail to start replicator to peer={}.", peer);
+            LOG.error("Fail to start replicator to peer={}, replicatorType={}.", peer, replicatorType);
             this.failureReplicators.put(peer, replicatorType);
             return false;
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -1048,7 +1048,6 @@ private static void onTimeout(final ThreadId id) {
     void destroy() {
         final ThreadId savedId = this.id;
         LOG.info("Replicator {} is going to quit", savedId);
-        this.id = null;
         releaseReader();
         // Unregister replicator metric set
         if (this.nodeMetrics.isEnabled()) {
@@ -1058,6 +1057,7 @@ void destroy() {
         this.state = State.Destroyed;
         notifyReplicatorStatusListener((Replicator) savedId.getData(), ReplicatorEvent.DESTROYED);
         savedId.unlockAndDestroy();
+        this.id = null;
     }
 
     private void releaseReader() {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/IntegerFieldUpdater.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 /**
  * @author jiachun.fjc

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/LongFieldUpdater.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 /**
  * @author jiachun.fjc

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/ReferenceFieldUpdater.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 /**
  * @author jiachun.fjc

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/ReflectionIntegerFieldUpdater.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 import java.lang.reflect.Field;
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/ReflectionLongFieldUpdater.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 import java.lang.reflect.Field;
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/ReflectionReferenceFieldUpdater.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 import java.lang.reflect.Field;
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/UnsafeIntegerFieldUpdater.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 import java.lang.reflect.Field;
-
 import sun.misc.Unsafe;
 
 /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/UnsafeLongFieldUpdater.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 import java.lang.reflect.Field;
-
 import sun.misc.Unsafe;
 
 /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/UnsafeReferenceFieldUpdater.java
Patch:
@@ -14,10 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
+package com.alipay.sofa.jraft.util.internal;
 
 import java.lang.reflect.Field;
-
 import sun.misc.Unsafe;
 
 /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/internal/Updaters.java
Patch:
@@ -14,9 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util.internal;
-
-import com.alipay.sofa.jraft.util.internal.UnsafeUtil;
+package com.alipay.sofa.jraft.util.internal;
 
 /**
  * Sometime instead of reflection, better performance.

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/NodeTest.java
Patch:
@@ -311,7 +311,7 @@ public void run(final Status status, final long index, final byte[] reqCtx) {
         }
         // No read-index request succeed.
         assertEquals(0, readIndexSuccesses.get());
-        assertEquals(n - 1, currentValue.get());
+        assertTrue(n - 1 >= currentValue.get());
 
         node.shutdown();
         node.join();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/rocks/support/RocksStatistics.java
Patch:
@@ -25,9 +25,9 @@
 
 import com.alipay.sofa.jraft.rhea.storage.RocksRawKVStore;
 import com.alipay.sofa.jraft.rhea.util.ThrowUtil;
-import com.alipay.sofa.jraft.rhea.util.internal.ReferenceFieldUpdater;
-import com.alipay.sofa.jraft.rhea.util.internal.Updaters;
 import com.alipay.sofa.jraft.util.DebugStatistics;
+import com.alipay.sofa.jraft.util.internal.ReferenceFieldUpdater;
+import com.alipay.sofa.jraft.util.internal.Updaters;
 
 /**
  * @author jiachun.fjc

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/impl/protostuff/io/NioBufOutput.java
Patch:
@@ -26,10 +26,9 @@
 
 import com.alipay.sofa.jraft.rhea.serialization.io.OutputBuf;
 import com.alipay.sofa.jraft.rhea.util.VarInts;
-import com.alipay.sofa.jraft.rhea.util.internal.ReferenceFieldUpdater;
-import com.alipay.sofa.jraft.rhea.util.internal.Updaters;
+import com.alipay.sofa.jraft.util.internal.ReferenceFieldUpdater;
 import com.alipay.sofa.jraft.util.internal.UnsafeUtf8Util;
-
+import com.alipay.sofa.jraft.util.internal.Updaters;
 import static io.protostuff.ProtobufOutput.encodeZigZag32;
 import static io.protostuff.ProtobufOutput.encodeZigZag64;
 import static io.protostuff.WireFormat.WIRETYPE_END_GROUP;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/io/OutputStreams.java
Patch:
@@ -19,8 +19,8 @@
 import java.io.ByteArrayOutputStream;
 
 import com.alipay.sofa.jraft.rhea.serialization.Serializer;
-import com.alipay.sofa.jraft.rhea.util.internal.ReferenceFieldUpdater;
-import com.alipay.sofa.jraft.rhea.util.internal.Updaters;
+import com.alipay.sofa.jraft.util.internal.ReferenceFieldUpdater;
+import com.alipay.sofa.jraft.util.internal.Updaters;
 
 /**
  *

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/StringBuilderHelper.java
Patch:
@@ -16,8 +16,8 @@
  */
 package com.alipay.sofa.jraft.rhea.util;
 
-import com.alipay.sofa.jraft.rhea.util.internal.ReferenceFieldUpdater;
-import com.alipay.sofa.jraft.rhea.util.internal.Updaters;
+import com.alipay.sofa.jraft.util.internal.ReferenceFieldUpdater;
+import com.alipay.sofa.jraft.util.internal.Updaters;
 
 /**
  * Reuse {@link StringBuilder} based on {@link ThreadLocal}.

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/ThrowUtil.java
Patch:
@@ -16,9 +16,9 @@
  */
 package com.alipay.sofa.jraft.rhea.util;
 
-import com.alipay.sofa.jraft.rhea.util.internal.ReferenceFieldUpdater;
-import com.alipay.sofa.jraft.rhea.util.internal.Updaters;
+import com.alipay.sofa.jraft.util.internal.ReferenceFieldUpdater;
 import com.alipay.sofa.jraft.util.internal.UnsafeUtil;
+import com.alipay.sofa.jraft.util.internal.Updaters;
 
 /**
  * Throwing tool.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -922,7 +922,8 @@ protected int adjustTimeout(final int timeoutMs) {
                 // Randomize the first snapshot trigger timeout
                 this.firstSchedule = false;
                 if (timeoutMs > 0) {
-                    return ThreadLocalRandom.current().nextInt(timeoutMs) + 1;
+                    int half = timeoutMs / 2;
+                    return half + ThreadLocalRandom.current().nextInt(half);
                 } else {
                     return timeoutMs;
                 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReadOnlyServiceImpl.java
Patch:
@@ -280,8 +280,8 @@ public synchronized void shutdown() {
             return;
         }
         this.shutdownLatch = new CountDownLatch(1);
-        Utils.runInThread(
-                () -> this.readIndexQueue.publishEvent((event, sequence) -> event.shutdownLatch = this.shutdownLatch));
+        Utils.runInThread( //
+            () -> this.readIndexQueue.publishEvent((event, sequence) -> event.shutdownLatch = this.shutdownLatch));
         this.scheduledExecutorService.shutdown();
     }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -199,7 +199,7 @@ public synchronized boolean init(final StoreEngineOptions opts) {
         // init metrics
         startMetricReporters(metricsReportPeriod);
         // init rpc server
-        this.rpcServer = new RpcServer(port, true, true);
+        this.rpcServer = new RpcServer(port, true, false);
         RaftRpcServerFactory.addRaftRequestProcessors(this.rpcServer, this.raftRpcExecutor, this.cliRpcExecutor);
         StoreEngineHelper.addKvStoreRequestProcessor(this.rpcServer, this);
         if (!this.rpcServer.start()) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Iterator.java
Patch:
@@ -67,8 +67,9 @@ public interface Iterator extends java.util.Iterator<ByteBuffer> {
      * |ntail| tasks (starting from the last iterated one) as not applied. After
      * this point, no further changes on the StateMachine as well as the Node
      * would be allowed and you should try to repair this replica or just drop it.
-     * 
-     * If |statInfo| is not NULL, it should describe the detail of the error.
+     *
+     * @param ntail the number of tasks (starting from the last iterated one)  considered as not to be applied.
+     * @param st    Status to describe the detail of the error.
      */
     void setErrorAndRollback(final long ntail, final Status st);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/FSMCallerImpl.java
Patch:
@@ -515,10 +515,10 @@ private void doCommitted(final long committedIndex) {
             final long lastIndex = iterImpl.getIndex() - 1;
             final long lastTerm = this.logManager.getTerm(lastIndex);
             final LogId lastAppliedId = new LogId(lastIndex, lastTerm);
-            this.lastAppliedIndex.set(committedIndex);
+            this.lastAppliedIndex.set(lastIndex);
             this.lastAppliedTerm = lastTerm;
             this.logManager.setAppliedId(lastAppliedId);
-            notifyLastAppliedIndexUpdated(committedIndex);
+            notifyLastAppliedIndexUpdated(lastIndex);
         } finally {
             this.nodeMetrics.recordLatency("fsm-commit", Utils.monotonicMs() - startMs);
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -2373,6 +2373,9 @@ public void onError(final RaftException error) {
             // onError of fsmCaller is guaranteed to be executed once.
             this.fsmCaller.onError(error);
         }
+        if (this.readOnlyService != null) {
+            this.readOnlyService.setError(error);
+        }
         this.writeLock.lock();
         try {
             // If it is leader, need to wake up a new one;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -753,7 +753,7 @@ boolean prepareEntry(final long nextSendingIndex, final int offset, final RaftOu
         }
         emb.setTerm(entry.getId().getTerm());
         if (entry.hasChecksum()) {
-            emb.setChecksum(entry.getChecksum()); //since 1.2.6
+            emb.setChecksum(entry.getChecksum()); // since 1.2.6
         }
         emb.setType(entry.getType());
         if (entry.getPeers() != null) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/ReadIndexStatus.java
Patch:
@@ -27,9 +27,9 @@
  */
 public class ReadIndexStatus {
 
-    private final ReadIndexRequest     request; //raw request
-    private final List<ReadIndexState> states; //read index requests in batch.
-    private final long                 index;  //committed log index.
+    private final ReadIndexRequest     request; // raw request
+    private final List<ReadIndexState> states; // read index requests in batch.
+    private final long                 index;  // committed log index.
 
     public ReadIndexStatus(List<ReadIndexState> states, ReadIndexRequest request, long index) {
         super();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/timer/HashedWheelTimer.java
Patch:
@@ -32,8 +32,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.alipay.sofa.jraft.util.Platform;
-
 /**
  * <h3>Implementation Details</h3>
  * <p>

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/BallotBox.java
Patch:
@@ -216,7 +216,8 @@ public boolean appendPendingTask(final Configuration conf, final Configuration o
 
     /**
      * Called by follower, otherwise the behavior is undefined.
-     *  Set committed index received from leader
+     * Set committed index received from leader
+     *
      * @param lastCommittedIndex last committed index
      * @return returns true if set success
      */

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -634,7 +634,7 @@ public void setSnapshot(final SnapshotMeta meta) {
                 }
             } else {
                 if (!reset(meta.getLastIncludedIndex() + 1)) {
-                    LOG.warn("Reset log manager failed, nextLogIndex={}", meta.getLastIncludedIndex() + 1);
+                    LOG.warn("Reset log manager failed, nextLogIndex={}.", meta.getLastIncludedIndex() + 1);
                 }
             }
         } finally {
@@ -771,11 +771,11 @@ public long getTerm(final long index) {
     }
 
     private long getTermFromLogStorage(final long index) {
-        LogEntry entry = this.logStorage.getEntry(index);
+        final LogEntry entry = this.logStorage.getEntry(index);
         if (entry != null) {
             if (this.raftOptions.isEnableLogEntryChecksum() && entry.isCorrupted()) {
                 // Report error to node and throw exception.
-                String msg = String.format(
+                final String msg = String.format(
                     "The log entry is corrupted, index=%d, term=%d, expectedChecksum=%d, realChecksum=%d", entry
                         .getId().getIndex(), entry.getId().getTerm(), entry.getChecksum(), entry.checksum());
                 reportError(RaftError.EIO.getNumber(), msg);

File: jraft-core/src/test/java/com/alipay/sofa/jraft/test/TestUtils.java
Patch:
@@ -16,12 +16,12 @@
  */
 package com.alipay.sofa.jraft.test;
 
-import java.io.File;
 import java.net.Inet4Address;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
 import java.net.SocketException;
 import java.nio.ByteBuffer;
+import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
@@ -51,7 +51,7 @@ public static ConfigurationEntry getConfEntry(final String confStr, final String
     }
 
     public static String mkTempDir() {
-        return System.getProperty("java.io.tmpdir", "/tmp") + File.separator + "jraft_test_" + System.nanoTime();
+        return Paths.get(System.getProperty("java.io.tmpdir", "/tmp"), "jraft_test_" + System.nanoTime()).toString();
     }
 
     public static LogEntry mockEntry(final int index, final int term) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReplicatorGroupImpl.java
Patch:
@@ -180,7 +180,7 @@ public void checkReplicator(final PeerId peer, final boolean lockNode) {
             }
             try {
                 if (node.isLeader()) {
-                    ReplicatorType rType = this.failureReplicators.get(peer);
+                    final ReplicatorType rType = this.failureReplicators.get(peer);
                     if (rType != null && addReplicator(peer, rType)) {
                         this.failureReplicators.remove(peer, rType);
                     }

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/AbstractChaosTest.java
Patch:
@@ -214,7 +214,7 @@ public void chaosSplittingTest() {
     }
 
     private void chaosSplittingCheckData(final ChaosTestCluster cluster) {
-        // 随机选一个 client 验证数据一致性
+        // Randomly select a client to verify data consistency
         for (int i = 0; i < LOOP_1; i++) {
             for (int j = 0; j < LOOP_2; j++) {
                 Assert.assertArrayEquals(VALUE, cluster.getRandomStore().bGet(i + "_split_test_" + j));

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/v1/LogEntryV1CodecFactory.java
Patch:
@@ -25,6 +25,7 @@
  * @author boyan(boyan@antfin.com)
  *
  */
+@Deprecated
 public class LogEntryV1CodecFactory implements LogEntryCodecFactory {
 
     //"Beeep boop beep beep boop beeeeeep" -BB8
@@ -33,7 +34,7 @@ public class LogEntryV1CodecFactory implements LogEntryCodecFactory {
     private LogEntryV1CodecFactory() {
     }
 
-    private static LogEntryV1CodecFactory INSTANCE = new LogEntryV1CodecFactory();
+    private static final LogEntryV1CodecFactory INSTANCE = new LogEntryV1CodecFactory();
 
     /**
      * Returns a singleton instance of DefaultLogEntryCodecFactory.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/v1/V1Decoder.java
Patch:
@@ -33,12 +33,13 @@
  * @author boyan(boyan@antfin.com)
  *
  */
+@Deprecated
 public final class V1Decoder implements LogEntryDecoder {
 
     private V1Decoder() {
     }
 
-    public static V1Decoder INSTANCE = new V1Decoder();
+    public static final V1Decoder INSTANCE = new V1Decoder();
 
     @Override
     public LogEntry decode(final byte[] content) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/RocksDBLogStorage.java
Patch:
@@ -200,9 +200,9 @@ private void load(final ConfigurationManager confManager) {
                         if (entry.getType() == EntryType.ENTRY_TYPE_CONFIGURATION) {
                             final ConfigurationEntry confEntry = new ConfigurationEntry();
                             confEntry.setId(new LogId(entry.getId().getIndex(), entry.getId().getTerm()));
-                            confEntry.setConf(new Configuration(entry.getPeers()));
+                            confEntry.setConf(new Configuration(entry.getPeers(), entry.getLearners()));
                             if (entry.getOldPeers() != null) {
-                                confEntry.setOldConf(new Configuration(entry.getOldPeers()));
+                                confEntry.setOldConf(new Configuration(entry.getOldPeers(), entry.getOldLearners()));
                             }
                             if (confManager != null) {
                                 confManager.add(confEntry);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -1362,6 +1362,7 @@ public void apply(final Task task) {
             }
 
         } catch (final Exception e) {
+            LOG.error("Fail to apply task.", e);
             Utils.runClosureInThread(task.getDone(), new Status(RaftError.EPERM, "Node is down."));
         }
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/option/RaftOptions.java
Patch:
@@ -234,6 +234,8 @@ public RaftOptions copy() {
         raftOptions.setReplicatorPipeline(this.replicatorPipeline);
         raftOptions.setMaxReplicatorInflightMsgs(this.maxReplicatorInflightMsgs);
         raftOptions.setDisruptorBufferSize(this.disruptorBufferSize);
+        raftOptions.setDisruptorPublishEventWaitTimeoutSecs(this.disruptorPublishEventWaitTimeoutSecs);
+        raftOptions.setEnableLogEntryChecksum(this.enableLogEntryChecksum);
         raftOptions.setReadOnlyOptions(this.readOnlyOptions);
         return raftOptions;
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -1170,15 +1170,15 @@ static void onRpcReturned(final ThreadId id, final RequestType reqType, final St
             while (!holdingQueue.isEmpty()) {
                 final RpcResponse queuedPipelinedResponse = holdingQueue.peek();
 
-                //sequence mismatch, waiting for next response.
+                // Sequence mismatch, waiting for next response.
                 if (queuedPipelinedResponse.seq != r.requiredNextSeq) {
                     if (processed > 0) {
                         if (isLogDebugEnabled) {
                             sb.append("has processed ").append(processed).append(" responses,");
                         }
                         break;
                     } else {
-                        //Do not processed any responses, UNLOCK id and return.
+                        // Do not processed any responses, UNLOCK id and return.
                         continueSendEntries = false;
                         id.unlock();
                         return;
@@ -1680,7 +1680,7 @@ public static boolean transferLeadership(final ThreadId id, final long logIndex)
     private boolean transferLeadership(final long logIndex) {
         if (this.hasSucceeded && this.nextIndex > logIndex) {
             // _id is unlock in _send_timeout_now
-            this.sendTimeoutNow(true, false);
+            sendTimeoutNow(true, false);
             return true;
         }
         // Register log_index so that _on_rpc_return trigger

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -179,7 +179,8 @@ public synchronized boolean init(final StoreEngineOptions opts) {
             this.raftStateTrigger = StoreEngineHelper.createRaftStateTrigger(opts.getLeaderStateTriggerCoreThreads());
         }
         if (this.snapshotExecutor == null) {
-            this.snapshotExecutor = StoreEngineHelper.createSnapshotExecutor(opts.getSnapshotCoreThreads());
+            this.snapshotExecutor = StoreEngineHelper.createSnapshotExecutor(opts.getSnapshotCoreThreads(),
+                opts.getSnapshotMaxThreads());
         }
         // init rpc executors
         final boolean useSharedRpcExecutor = opts.isUseSharedRpcExecutor();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVStoreSnapshotFile.java
Patch:
@@ -33,11 +33,11 @@ public interface KVStoreSnapshotFile {
      * Save a snapshot for the specified region.
      *
      * @param writer   snapshot writer
-     * @param done     callback
      * @param region   the region to save snapshot
+     * @param done     callback
      * @param executor the executor to compress snapshot
      */
-    void save(final SnapshotWriter writer, final Closure done, final Region region, final ExecutorService executor);
+    void save(final SnapshotWriter writer, final Region region, final Closure done, final ExecutorService executor);
 
     /**
      * Load snapshot for the specified region.

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVStoreStateMachine.java
Patch:
@@ -240,7 +240,7 @@ private void doSplit(final KVStateOutputList kvStates) {
 
     @Override
     public void onSnapshotSave(final SnapshotWriter writer, final Closure done) {
-        this.storeSnapshotFile.save(writer, done, this.region.copy(), this.storeEngine.getSnapshotExecutor());
+        this.storeSnapshotFile.save(writer, this.region.copy(), done, this.storeEngine.getSnapshotExecutor());
     }
 
     @Override

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Partitions.java
Patch:
@@ -97,7 +97,7 @@ public static <IN, OUT> List<OUT> oneToOne(final List<IN> inputList, final int u
         final List<OUT> outputList = Lists.newArrayListWithCapacity(inputSize);
 
         List<IN> segment = Lists.newArrayListWithCapacity(unitSize);
-        for (IN input : inputList) {
+        for (final IN input : inputList) {
             segment.add(input);
             if (segment.size() >= unitSize) {
                 addAll(outputList, func.apply(segment));

File: jraft-core/src/main/java/com/alipay/sofa/jraft/RaftGroupService.java
Patch:
@@ -104,7 +104,7 @@ public synchronized Node getRaftNode() {
      * Starts the raft group service, returns the raft node.
      */
     public synchronized Node start() {
-        return this.start(true);
+        return start(true);
     }
 
     /**

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/election/ElectionBootstrap.java
Patch:
@@ -43,7 +43,6 @@ public static void main(final String[] args) {
         electionOpts.setInitialServerAddressList(initialConfStr);
 
         final ElectionNode node = new ElectionNode();
-        node.init(electionOpts);
         node.addLeaderStateListener(new LeaderStateListener() {
 
             @Override
@@ -56,5 +55,6 @@ public void onLeaderStop(long leaderTerm) {
                 System.out.println("[ElectionBootstrap] Leader stop on term: " + leaderTerm);
             }
         });
+        node.init(electionOpts);
     }
 }

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/KVStateMachineTest.java
Patch:
@@ -41,6 +41,7 @@
 import com.alipay.sofa.jraft.entity.PeerId;
 import com.alipay.sofa.jraft.error.RaftError;
 import com.alipay.sofa.jraft.option.NodeOptions;
+import com.alipay.sofa.jraft.rhea.StateListenerContainer;
 import com.alipay.sofa.jraft.rhea.StoreEngine;
 import com.alipay.sofa.jraft.rhea.client.pd.FakePlacementDriverClient;
 import com.alipay.sofa.jraft.rhea.metadata.Region;
@@ -248,7 +249,7 @@ static class MockStoreEngine extends StoreEngine {
         private final ExecutorService leaderStateTrigger = Executors.newSingleThreadExecutor();
 
         public MockStoreEngine() {
-            super(new MockPlacementDriverClient());
+            super(new MockPlacementDriverClient(), new StateListenerContainer<>());
         }
 
         @Override

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/AbstractBoltClientService.java
Patch:
@@ -38,7 +38,6 @@
 import com.alipay.sofa.jraft.rpc.RpcRequests.ErrorResponse;
 import com.alipay.sofa.jraft.rpc.RpcRequests.PingRequest;
 import com.alipay.sofa.jraft.rpc.RpcResponseClosure;
-import com.alipay.sofa.jraft.rpc.impl.core.BoltRaftClientService;
 import com.alipay.sofa.jraft.rpc.impl.core.JRaftRpcAddressParser;
 import com.alipay.sofa.jraft.util.Endpoint;
 import com.alipay.sofa.jraft.util.NamedThreadFactory;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -782,7 +782,7 @@ public static ThreadId start(final ReplicatorOptions opts, final RaftOptions raf
         }
         final Replicator r = new Replicator(opts, raftOptions);
         if (!r.rpcService.connect(opts.getPeerId().getEndpoint())) {
-            LOG.error("Fail to init sending channel to {}", opts.getPeerId());
+            LOG.error("Fail to init sending channel to {}.", opts.getPeerId());
             // Return and it will be retried later.
             return null;
         }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/FSMCallerTest.java
Patch:
@@ -77,9 +77,10 @@ public void setup() {
     }
 
     @After
-    public void teardown() {
+    public void teardown() throws Exception {
         if (this.fsmCaller != null) {
             this.fsmCaller.shutdown();
+            this.fsmCaller.join();
         }
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/DefaultJRaftServiceFactory.java
Patch:
@@ -26,7 +26,7 @@
 import com.alipay.sofa.jraft.storage.RaftMetaStorage;
 import com.alipay.sofa.jraft.storage.SnapshotStorage;
 import com.alipay.sofa.jraft.storage.impl.LocalRaftMetaStorage;
-import com.alipay.sofa.jraft.storage.log.RocksDBSegmentLogStorage;
+import com.alipay.sofa.jraft.storage.impl.RocksDBLogStorage;
 import com.alipay.sofa.jraft.storage.snapshot.local.LocalSnapshotStorage;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.SPI;
@@ -47,7 +47,7 @@ public static DefaultJRaftServiceFactory newInstance() {
     @Override
     public LogStorage createLogStorage(final String uri, final RaftOptions raftOptions) {
         Requires.requireTrue(StringUtils.isNotBlank(uri), "Blank log storage uri.");
-        return new RocksDBSegmentLogStorage(uri, raftOptions);
+        return new RocksDBLogStorage(uri, raftOptions);
     }
 
     @Override

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/AbstractBoltClientService.java
Patch:
@@ -56,7 +56,7 @@
  */
 public abstract class AbstractBoltClientService implements ClientService {
 
-    protected static final Logger   LOG = LoggerFactory.getLogger(BoltRaftClientService.class);
+    protected static final Logger   LOG = LoggerFactory.getLogger(AbstractBoltClientService.class);
 
     static {
         ProtobufMsgFactory.load();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/DefaultJRaftServiceFactory.java
Patch:
@@ -26,7 +26,7 @@
 import com.alipay.sofa.jraft.storage.RaftMetaStorage;
 import com.alipay.sofa.jraft.storage.SnapshotStorage;
 import com.alipay.sofa.jraft.storage.impl.LocalRaftMetaStorage;
-import com.alipay.sofa.jraft.storage.impl.RocksDBLogStorage;
+import com.alipay.sofa.jraft.storage.log.RocksDBSegmentLogStorage;
 import com.alipay.sofa.jraft.storage.snapshot.local.LocalSnapshotStorage;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.SPI;
@@ -47,7 +47,7 @@ public static DefaultJRaftServiceFactory newInstance() {
     @Override
     public LogStorage createLogStorage(final String uri, final RaftOptions raftOptions) {
         Requires.requireTrue(StringUtils.isNotBlank(uri), "Blank log storage uri.");
-        return new RocksDBLogStorage(uri, raftOptions);
+        return new RocksDBSegmentLogStorage(uri, raftOptions);
     }
 
     @Override

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/TestCluster.java
Patch:
@@ -50,15 +50,15 @@
  */
 public class TestCluster {
     private final String                                  dataPath;
-    private final String                                  name;                                                 // groupId
+    private final String                                  name;                                              // groupId
     private final List<PeerId>                            peers;
     private final List<NodeImpl>                          nodes;
     private final List<MockStateMachine>                  fsms;
     private final ConcurrentMap<String, RaftGroupService> serverMap          = new ConcurrentHashMap<>();
     private final int                                     electionTimeoutMs;
     private final Lock                                    lock               = new ReentrantLock();
 
-    private JRaftServiceFactory                           raftServiceFactory = new DefaultJRaftServiceFactory();
+    private JRaftServiceFactory                           raftServiceFactory = new TestJRaftServiceFactory();
 
     public JRaftServiceFactory getRaftServiceFactory() {
         return this.raftServiceFactory;

File: jraft-core/src/test/java/com/alipay/sofa/jraft/storage/io/LocalFileReaderTest.java
Patch:
@@ -16,6 +16,9 @@
  */
 package com.alipay.sofa.jraft.storage.io;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.nio.ByteBuffer;
@@ -27,9 +30,6 @@
 import com.alipay.sofa.jraft.storage.BaseStorageTest;
 import com.alipay.sofa.jraft.util.ByteBufferCollector;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 public class LocalFileReaderTest extends BaseStorageTest {
     private LocalDirReader fileReader;
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -778,7 +778,7 @@ public long getFirstLogIndex() {
 
     @Override
     public long getLastLogIndex() {
-        return this.getLastLogIndex(false);
+        return getLastLogIndex(false);
     }
 
     @Override

File: jraft-core/src/main/java/com/alipay/sofa/jraft/RaftServiceFactory.java
Patch:
@@ -34,15 +34,15 @@ public final class RaftServiceFactory {
     /**
      * Create a raft node with group id and it's serverId.
      */
-    public static Node createRaftNode(String groupId, PeerId serverId) {
+    public static Node createRaftNode(final String groupId, final PeerId serverId) {
         return new NodeImpl(groupId, serverId);
     }
 
     /**
      * Create and initialize a raft node with node options.
      * Throw {@link IllegalStateException} when fail to initialize.
      */
-    public static Node createAndInitRaftNode(String groupId, PeerId serverId, NodeOptions opts) {
+    public static Node createAndInitRaftNode(final String groupId, final PeerId serverId, final NodeOptions opts) {
         final Node ret = createRaftNode(groupId, serverId);
         if (!ret.init(opts)) {
             throw new IllegalStateException("Fail to init node, please see the logs to find the reason.");
@@ -60,7 +60,7 @@ public static CliService createCliService() {
     /**
      * Create and initialize a CliService instance.
      */
-    public static CliService createAndInitCliService(CliOptions cliOptions) {
+    public static CliService createAndInitCliService(final CliOptions cliOptions) {
         final CliService ret = createCliService();
         if (!ret.init(cliOptions)) {
             throw new IllegalStateException("Fail to init CliService");

File: jraft-core/src/main/java/com/alipay/sofa/jraft/closure/SaveSnapshotClosure.java
Patch:
@@ -35,5 +35,5 @@ public interface SaveSnapshotClosure extends Closure {
      * @param meta metadata of snapshot.
      * @return returns snapshot writer.
      */
-    SnapshotWriter start(SnapshotMeta meta);
+    SnapshotWriter start(final SnapshotMeta meta);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/closure/SynchronizedClosure.java
Patch:
@@ -41,7 +41,7 @@ public SynchronizedClosure() {
         this(1);
     }
 
-    public SynchronizedClosure(int n) {
+    public SynchronizedClosure(final int n) {
         this.count = n;
         this.latch = new CountDownLatch(n);
     }
@@ -56,7 +56,7 @@ public Status getStatus() {
     }
 
     @Override
-    public void run(Status status) {
+    public void run(final Status status) {
         this.status = status;
         this.latch.countDown();
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/CliServiceImpl.java
Patch:
@@ -72,7 +72,7 @@ public class CliServiceImpl implements CliService {
     private CliClientService    cliClientService;
 
     @Override
-    public synchronized boolean init(CliOptions opts) {
+    public synchronized boolean init(final CliOptions opts) {
         Requires.requireNonNull(opts, "Null cli options");
 
         if (this.cliClientService != null) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/RaftMetaStorage.java
Patch:
@@ -32,7 +32,7 @@ public interface RaftMetaStorage extends Lifecycle<RaftMetaStorageOptions>, Stor
     /**
      * Set current term.
      */
-    boolean setTerm(long term);
+    boolean setTerm(final long term);
 
     /**
      * Get current term.
@@ -42,7 +42,7 @@ public interface RaftMetaStorage extends Lifecycle<RaftMetaStorageOptions>, Stor
     /**
      * Set voted for information.
      */
-    boolean setVotedFor(PeerId peerId);
+    boolean setVotedFor(final PeerId peerId);
 
     /**
      * Get voted for information.
@@ -52,5 +52,5 @@ public interface RaftMetaStorage extends Lifecycle<RaftMetaStorageOptions>, Stor
     /**
      * Set term and voted for information.
      */
-    boolean setTermAndVotedFor(long term, PeerId peerId);
+    boolean setTermAndVotedFor(final long term, final PeerId peerId);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/SnapshotThrottle.java
Patch:
@@ -30,5 +30,5 @@ public interface SnapshotThrottle {
      * @param bytes expect size
      * @return available size
      */
-    long throttledByThroughput(long bytes);
+    long throttledByThroughput(final long bytes);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/Snapshot.java
Patch:
@@ -54,5 +54,5 @@ public abstract class Snapshot extends Status {
     /**
      * Get file meta by fileName.
      */
-    public abstract Message getFileMeta(String fileName);
+    public abstract Message getFileMeta(final String fileName);
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVStoreClosure.java
Patch:
@@ -27,9 +27,9 @@ public interface KVStoreClosure extends Closure {
 
     Errors getError();
 
-    void setError(Errors error);
+    void setError(final Errors error);
 
     Object getData();
 
-    void setData(Object data);
+    void setData(final Object data);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReplicatorGroupImpl.java
Patch:
@@ -107,7 +107,8 @@ public boolean addReplicator(final PeerId peer) {
             this.failureReplicators.remove(peer);
             return true;
         }
-        final ReplicatorOptions opts = this.commonOptions.copy();
+        final ReplicatorOptions opts = this.commonOptions == null ? new ReplicatorOptions() : this.commonOptions.copy();
+
         opts.setPeerId(peer);
         final ThreadId rid = Replicator.start(opts, this.raftOptions);
         if (rid == null) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Bits.java
Patch:
@@ -28,8 +28,6 @@
  * Moved from java.io.Bits
  *
  * @author boyan (boyan@alibaba-inc.com)
- *
- * 2017-11月-01 上午11:33:48
  */
 public class Bits {
     public static int getInt(byte[] b, int off) {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/RequestProcessClosure.java
Patch:
@@ -60,7 +60,7 @@ public RSP getResponse() {
 
     public void sendResponse(RSP response) {
         this.response = response;
-        this.run(Status.OK());
+        run(Status.OK());
     }
 
     /**

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/options/RocksDBOptions.java
Patch:
@@ -32,6 +32,7 @@ public class RocksDBOptions {
     //
     // If `sync` is true, `disableWAL` must be set false
     private boolean disableWAL                        = true;
+    // https://github.com/facebook/rocksdb/wiki/Checkpoints
     private boolean fastSnapshot                      = false;
     private boolean openStatisticsCollector           = true;
     private long    statisticsCallbackIntervalSeconds = 0;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/BaseRawKVStore.java
Patch:
@@ -164,8 +164,8 @@ static void setFailure(final KVStoreClosure closure, final String message) {
      * @param error   critical error
      */
     static void setCriticalError(final KVStoreClosure closure, final String message, final Throwable error) {
-        setClosureError(closure);
         // Will call closure#run in FSMCaller
+        setClosureError(closure);
         if (error != null) {
             throw new StorageException(message, error);
         }

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/AbstractChaosTest.java
Patch:
@@ -182,7 +182,7 @@ public void chaosSplittingTest() {
                     throw new RuntimeException(st.toString());
                 }
 
-                // 等待写入全部完成
+                // wait for all writes finished
                 for (final Future<?> f : allFutures) {
                     f.get(30, TimeUnit.SECONDS);
                 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/RepeatedTimer.java
Patch:
@@ -93,7 +93,7 @@ public void run() {
                 invokeDestroyed = this.destroyed;
             } else {
                 this.timerTask = null;
-                this.schedule();
+                schedule();
             }
         } finally {
             this.lock.unlock();
@@ -112,7 +112,6 @@ public void runOnceNow() {
             if (this.timerTask != null && this.timerTask.cancel()) {
                 this.timerTask = null;
                 run();
-                schedule();
             }
         } finally {
             this.lock.unlock();

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/pd/RheaHeartbeatTest.java
Patch:
@@ -27,6 +27,7 @@
 import static com.alipay.sofa.jraft.rhea.KeyValueTool.makeValue;
 
 /**
+ *
  * @author jiachun.fjc
  */
 public class RheaHeartbeatTest extends RheaKVTestCluster {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/JRaftHelper.java
Patch:
@@ -19,8 +19,6 @@
 import java.util.List;
 
 import com.alipay.sofa.jraft.entity.PeerId;
-import com.alipay.sofa.jraft.option.NodeOptions;
-import com.alipay.sofa.jraft.option.RaftOptions;
 import com.alipay.sofa.jraft.rhea.metadata.Peer;
 import com.alipay.sofa.jraft.rhea.util.Lists;
 import com.alipay.sofa.jraft.util.Endpoint;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/FSMCaller.java
Patch:
@@ -21,6 +21,7 @@
 import com.alipay.sofa.jraft.entity.LeaderChangeContext;
 import com.alipay.sofa.jraft.error.RaftException;
 import com.alipay.sofa.jraft.option.FSMCallerOptions;
+import com.alipay.sofa.jraft.util.Describer;
 
 /**
  * Finite state machine caller.
@@ -29,7 +30,7 @@
  *
  * 2018-Apr-03 11:07:52 AM
  */
-public interface FSMCaller extends Lifecycle<FSMCallerOptions> {
+public interface FSMCaller extends Lifecycle<FSMCallerOptions>, Describer {
 
     /**
      * Listen on lastAppliedLogIndex update events.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Node.java
Patch:
@@ -29,6 +29,7 @@
 import com.alipay.sofa.jraft.error.LogNotFoundException;
 import com.alipay.sofa.jraft.option.NodeOptions;
 import com.alipay.sofa.jraft.option.RaftOptions;
+import com.alipay.sofa.jraft.util.Describer;
 
 /**
  * A raft replica node.
@@ -37,7 +38,7 @@
  *
  * 2018-Apr-03 4:06:55 PM
  */
-public interface Node extends Lifecycle<NodeOptions> {
+public interface Node extends Lifecycle<NodeOptions>, Describer {
 
     /**
      * Get the leader peer id for redirect, null if absent.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/ReplicatorGroup.java
Patch:
@@ -25,6 +25,7 @@
 import com.alipay.sofa.jraft.option.ReplicatorGroupOptions;
 import com.alipay.sofa.jraft.rpc.RpcRequests.AppendEntriesResponse;
 import com.alipay.sofa.jraft.rpc.RpcResponseClosure;
+import com.alipay.sofa.jraft.util.Describer;
 import com.alipay.sofa.jraft.util.ThreadId;
 
 /**
@@ -34,7 +35,7 @@
  *
  * 2018-Apr-08 5:35:26 PM
  */
-public interface ReplicatorGroup {
+public interface ReplicatorGroup extends Describer {
     /**
      * Init the replicator group.
      *

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/LogManager.java
Patch:
@@ -26,6 +26,7 @@
 import com.alipay.sofa.jraft.entity.LogId;
 import com.alipay.sofa.jraft.entity.RaftOutter.SnapshotMeta;
 import com.alipay.sofa.jraft.option.LogManagerOptions;
+import com.alipay.sofa.jraft.util.Describer;
 
 /**
  * Log manager.
@@ -34,7 +35,7 @@
  *
  * 2018-Apr-04 3:02:42 PM
  */
-public interface LogManager extends Lifecycle<LogManagerOptions> {
+public interface LogManager extends Lifecycle<LogManagerOptions>, Describer {
 
     /**
      * Closure to to run in stable state.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/RecyclableByteBufferList.java
Patch:
@@ -118,7 +118,7 @@ private RecyclableByteBufferList(final Recyclers.Handle handle) {
         this(handle, DEFAULT_INITIAL_CAPACITY);
     }
 
-    private RecyclableByteBufferList(final Recyclers.Handle handle, int initialCapacity) {
+    private RecyclableByteBufferList(final Recyclers.Handle handle, final int initialCapacity) {
         super(initialCapacity);
         this.handle = handle;
     }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/KVCommandProcessor.java
Patch:
@@ -137,7 +137,7 @@ public void handleRequest(final BizContext bizCtx, final AsyncContext asyncCtx,
 
     @Override
     public String interest() {
-        return reqClazz.getName();
+        return this.reqClazz.getName();
     }
 
     @Override

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -69,6 +69,7 @@
 import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.util.MetricThreadPoolExecutor;
 import com.alipay.sofa.jraft.util.Requires;
+import com.alipay.sofa.jraft.util.Utils;
 import com.codahale.metrics.ScheduledReporter;
 import com.codahale.metrics.Slf4jReporter;
 
@@ -131,7 +132,7 @@ public synchronized boolean init(final StoreEngineOptions opts) {
         Endpoint serverAddress = Requires.requireNonNull(opts.getServerAddress(), "opts.serverAddress");
         final int port = serverAddress.getPort();
         final String ip = serverAddress.getIp();
-        if (ip == null || Constants.IP_ANY.equals(ip)) {
+        if (ip == null || Utils.IP_ANY.equals(ip)) {
             serverAddress = new Endpoint(NetUtil.getLocalCanonicalHostName(), port);
             opts.setServerAddress(serverAddress);
         }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/RegionEngine.java
Patch:
@@ -225,7 +225,8 @@ public RegionEngineOptions copyRegionOpts() {
         copy.setStartKeyBytes(this.regionOpts.getStartKeyBytes());
         copy.setEndKey(this.regionOpts.getEndKey());
         copy.setEndKeyBytes(this.regionOpts.getEndKeyBytes());
-        copy.setNodeOptions(JRaftHelper.copyNodeOptionsFrom(this.regionOpts.getNodeOptions()));
+        copy.setNodeOptions(this.regionOpts.getNodeOptions() == null ? new NodeOptions() : this.regionOpts
+            .getNodeOptions().copy());
         copy.setRaftGroupId(this.regionOpts.getRaftGroupId());
         copy.setRaftDataPath(this.regionOpts.getRaftDataPath());
         copy.setServerAddress(this.regionOpts.getServerAddress());

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.alipay.sofa.jraft.rhea;
 
+import com.alipay.sofa.jraft.option.NodeOptions;
 import java.io.File;
 import java.nio.ByteBuffer;
 import java.nio.file.Paths;
@@ -152,7 +153,8 @@ public synchronized boolean init(final StoreEngineOptions opts) {
             rOpts.setInitialServerList(opts.getInitialServerList());
             if (rOpts.getNodeOptions() == null) {
                 // copy common node options
-                rOpts.setNodeOptions(JRaftHelper.copyNodeOptionsFrom(opts.getCommonNodeOptions()));
+                rOpts.setNodeOptions(opts.getCommonNodeOptions() == null ? new NodeOptions() : opts
+                    .getCommonNodeOptions().copy());
             }
             if (rOpts.getMetricsReportPeriod() <= 0 && metricsReportPeriod > 0) {
                 // extends store opts

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVStore.java
Patch:
@@ -1009,7 +1009,7 @@ public CompletableFuture<Boolean> put(final List<KVEntry> entries) {
     }
 
     @Override
-    public boolean bPut(final List<KVEntry> entries) {
+    public Boolean bPut(final List<KVEntry> entries) {
         return FutureHelper.get(put(entries), this.futureTimeoutMillis);
     }
 
@@ -1181,12 +1181,12 @@ public CompletableFuture<Boolean> deleteRange(final String startKey, final Strin
     }
 
     @Override
-    public boolean bDeleteRange(final byte[] startKey, final byte[] endKey) {
+    public Boolean bDeleteRange(final byte[] startKey, final byte[] endKey) {
         return FutureHelper.get(deleteRange(startKey, endKey), this.futureTimeoutMillis);
     }
 
     @Override
-    public boolean bDeleteRange(final String startKey, final String endKey) {
+    public Boolean bDeleteRange(final String startKey, final String endKey) {
         return FutureHelper.get(deleteRange(startKey, endKey), this.futureTimeoutMillis);
     }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/RheaKVStore.java
Patch:
@@ -466,7 +466,7 @@ RheaIterator<KVEntry> iterator(final String startKey, final String endKey, final
     /**
      * @see #put(List)
      */
-    boolean bPut(final List<KVEntry> entries);
+    Boolean bPut(final List<KVEntry> entries);
 
     /**
      * If the specified key is not already associated with a value
@@ -538,12 +538,12 @@ RheaIterator<KVEntry> iterator(final String startKey, final String endKey, final
     /**
      * @see #deleteRange(byte[], byte[])
      */
-    boolean bDeleteRange(final byte[] startKey, final byte[] endKey);
+    Boolean bDeleteRange(final byte[] startKey, final byte[] endKey);
 
     /**
      * @see #deleteRange(byte[], byte[])
      */
-    boolean bDeleteRange(final String startKey, final String endKey);
+    Boolean bDeleteRange(final String startKey, final String endKey);
 
     /**
      * The batch method of {@link #delete(byte[])}

File: jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java
Patch:
@@ -88,7 +88,7 @@ public static Executor createExecutor(final String prefix, final int number) {
      * @since 0.0.3
      */
     public static ThreadFactory createThreadFactory(final String prefixName) {
-        return new NamedThreadFactory(prefixName);
+        return new NamedThreadFactory(prefixName, true);
     }
 
     /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/TimerManager.java
Patch:
@@ -37,7 +37,8 @@ public class TimerManager implements Lifecycle<Integer> {
 
     @Override
     public boolean init(Integer coreSize) {
-        executor = Executors.newScheduledThreadPool(coreSize, new NamedThreadFactory("JRaft-Node-ScheduleThreadPool-"));
+        executor = Executors.newScheduledThreadPool(coreSize, new NamedThreadFactory("JRaft-Node-ScheduleThreadPool-",
+            true));
         return true;
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/DisruptorBuilder.java
Patch:
@@ -32,7 +32,7 @@
 public class DisruptorBuilder<T> {
     private EventFactory<T> eventFactory;
     private Integer         ringBufferSize;
-    private ThreadFactory   threadFactory = new NamedThreadFactory("Disruptor-");
+    private ThreadFactory   threadFactory = new NamedThreadFactory("Disruptor-", true);
     private ProducerType    producerType  = ProducerType.MULTI;
     private WaitStrategy    waitStrategy  = new BlockingWaitStrategy();
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/ExecutorServiceHelper.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util;
+package com.alipay.sofa.jraft.util;
 
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;

File: jraft-core/src/test/java/com/alipay/sofa/jraft/entity/LogIdTest.java
Patch:
@@ -16,11 +16,11 @@
  */
 package com.alipay.sofa.jraft.entity;
 
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-import org.junit.Test;
-
 public class LogIdTest {
 
     @Test

File: jraft-core/src/test/java/com/alipay/sofa/jraft/entity/PeerIdTest.java
Patch:
@@ -16,12 +16,12 @@
  */
 package com.alipay.sofa.jraft.entity;
 
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
-import org.junit.Test;
-
 public class PeerIdTest {
 
     @Test

File: jraft-core/src/test/java/com/alipay/sofa/jraft/rpc/impl/core/AppendEntriesRequestProcessorTest.java
Patch:
@@ -93,7 +93,7 @@ public void verify(String interest, RaftServerService service, NodeRequestProces
     }
 
     @Test
-    public void testGetPeerRequsetContextRemovePeerRequestContext() {
+    public void testGetPeerRequestContextRemovePeerRequestContext() {
         mockNode();
 
         final AppendEntriesRequestProcessor processor = (AppendEntriesRequestProcessor) newProcessor();

File: jraft-core/src/test/java/com/alipay/sofa/jraft/util/CrcUtilTest.java
Patch:
@@ -16,10 +16,10 @@
  */
 package com.alipay.sofa.jraft.util;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class CrcUtilTest {
 
     @Test

File: jraft-core/src/test/java/com/alipay/sofa/jraft/util/EndpointTest.java
Patch:
@@ -16,10 +16,10 @@
  */
 package com.alipay.sofa.jraft.util;
 
-import static org.junit.Assert.assertEquals;
-
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 public class EndpointTest {
 
     @Test

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/DistributedLockExample.java
Patch:
@@ -24,8 +24,8 @@
 import org.slf4j.LoggerFactory;
 
 import com.alipay.sofa.jraft.rhea.client.RheaKVStore;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.concurrent.DistributedLock;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 
 /**
  *

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -58,14 +58,14 @@
 import com.alipay.sofa.jraft.rhea.storage.RocksRawKVStore;
 import com.alipay.sofa.jraft.rhea.storage.StorageType;
 import com.alipay.sofa.jraft.rhea.util.Constants;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.Lists;
 import com.alipay.sofa.jraft.rhea.util.Maps;
 import com.alipay.sofa.jraft.rhea.util.NetUtil;
 import com.alipay.sofa.jraft.rhea.util.Strings;
 import com.alipay.sofa.jraft.rpc.RaftRpcServerFactory;
 import com.alipay.sofa.jraft.util.BytesUtil;
 import com.alipay.sofa.jraft.util.Endpoint;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.util.MetricThreadPoolExecutor;
 import com.alipay.sofa.jraft.util.Requires;
 import com.codahale.metrics.ScheduledReporter;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVRpcService.java
Patch:
@@ -37,10 +37,10 @@
 import com.alipay.sofa.jraft.rhea.errors.ErrorsHelper;
 import com.alipay.sofa.jraft.rhea.options.RpcOptions;
 import com.alipay.sofa.jraft.rhea.rpc.ExtSerializerSupports;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.concurrent.CallerRunsPolicyWithReport;
 import com.alipay.sofa.jraft.rhea.util.concurrent.NamedThreadFactory;
 import com.alipay.sofa.jraft.util.Endpoint;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.ThreadPoolUtil;
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVStore.java
Patch:
@@ -95,6 +95,7 @@
 import com.alipay.sofa.jraft.util.Endpoint;
 import com.alipay.sofa.jraft.util.LogExceptionHandler;
 import com.alipay.sofa.jraft.util.Requires;
+import com.alipay.sofa.jraft.util.Utils;
 import com.codahale.metrics.Histogram;
 import com.lmax.disruptor.EventFactory;
 import com.lmax.disruptor.EventHandler;
@@ -259,7 +260,7 @@ public Endpoint getLeader(final long regionId, final boolean forceRefresh, final
         this.futureTimeoutMillis = opts.getFutureTimeoutMillis();
         this.onlyLeaderRead = opts.isOnlyLeaderRead();
         if (opts.isUseParallelKVExecutor()) {
-            final int numWorkers = Constants.AVAILABLE_PROCESSORS;
+            final int numWorkers = Utils.cpus();
             final int bufSize = numWorkers << 4;
             final String name = "parallel-kv-executor";
             final ThreadFactory threadFactory = Constants.THREAD_AFFINITY_ENABLED

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/DefaultPlacementDriverRpcService.java
Patch:
@@ -35,10 +35,10 @@
 import com.alipay.sofa.jraft.rhea.errors.ErrorsHelper;
 import com.alipay.sofa.jraft.rhea.options.RpcOptions;
 import com.alipay.sofa.jraft.rhea.rpc.ExtSerializerSupports;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.concurrent.CallerRunsPolicyWithReport;
 import com.alipay.sofa.jraft.rhea.util.concurrent.NamedThreadFactory;
 import com.alipay.sofa.jraft.util.Endpoint;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.ThreadPoolUtil;
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/HeartbeatSender.java
Patch:
@@ -44,13 +44,13 @@
 import com.alipay.sofa.jraft.rhea.options.HeartbeatOptions;
 import com.alipay.sofa.jraft.rhea.rpc.ExtSerializerSupports;
 import com.alipay.sofa.jraft.rhea.storage.BaseKVStoreClosure;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.Lists;
 import com.alipay.sofa.jraft.rhea.util.Pair;
 import com.alipay.sofa.jraft.rhea.util.StackTraceUtil;
 import com.alipay.sofa.jraft.rhea.util.concurrent.DiscardOldPolicyWithReport;
 import com.alipay.sofa.jraft.rhea.util.concurrent.NamedThreadFactory;
 import com.alipay.sofa.jraft.util.Endpoint;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.util.ThreadPoolUtil;
 import com.alipay.sofa.jraft.util.timer.HashedWheelTimer;
 import com.alipay.sofa.jraft.util.timer.Timeout;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/options/RpcOptions.java
Patch:
@@ -16,16 +16,16 @@
  */
 package com.alipay.sofa.jraft.rhea.options;
 
-import com.alipay.sofa.jraft.rhea.util.Constants;
+import com.alipay.sofa.jraft.util.Utils;
 
 /**
  *
  * @author jiachun.fjc
  */
 public class RpcOptions {
 
-    private int callbackExecutorCorePoolSize    = Constants.AVAILABLE_PROCESSORS << 2;
-    private int callbackExecutorMaximumPoolSize = Constants.AVAILABLE_PROCESSORS << 3;
+    private int callbackExecutorCorePoolSize    = Utils.cpus() << 2;
+    private int callbackExecutorMaximumPoolSize = Utils.cpus() << 3;
     private int callbackExecutorQueueCapacity   = 512;
     private int rpcTimeoutMillis                = 5000;
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/MetricsRawKVStore.java
Patch:
@@ -23,7 +23,6 @@
 import com.codahale.metrics.Timer;
 
 import static com.alipay.sofa.jraft.rhea.metrics.KVMetricNames.RPC_REQUEST_HANDLE_TIMER;
-import static com.alipay.sofa.jraft.rhea.storage.KVOperation.PUT_LIST;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.DELETE;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.DELETE_RANGE;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.GET;
@@ -36,6 +35,7 @@
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.NODE_EXECUTE;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.PUT;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.PUT_IF_ABSENT;
+import static com.alipay.sofa.jraft.rhea.storage.KVOperation.PUT_LIST;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.RESET_SEQUENCE;
 import static com.alipay.sofa.jraft.rhea.storage.KVOperation.SCAN;
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/ByteObjectHashMap.java
Patch:
@@ -23,6 +23,8 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
 
+import com.alipay.sofa.jraft.util.Ints;
+
 /**
  * A hash map implementation of {@link ByteObjectMap} that uses open addressing for keys.
  * To minimize the memory footprint, this class uses open addressing rather than chaining.

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Constants.java
Patch:
@@ -44,9 +44,6 @@ public final class Constants {
     // TODO support ipv6
     public static final String  IP_ANY                  = "0.0.0.0";
 
-    /** CPU cores */
-    public static final int     AVAILABLE_PROCESSORS    = Runtime.getRuntime().availableProcessors();
-
     public static final boolean THREAD_AFFINITY_ENABLED = SystemPropertyUtil.getBoolean("rhea.thread.affinity.enabled",
                                                             false);
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Lists.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.RandomAccess;
 import java.util.function.Function;
 
+import com.alipay.sofa.jraft.util.Ints;
 import com.alipay.sofa.jraft.util.Requires;
 
 /**

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Maps.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.alipay.sofa.jraft.rhea.util.concurrent.collection.NonBlockingHashMap;
 import com.alipay.sofa.jraft.rhea.util.concurrent.collection.NonBlockingHashMapLong;
+import com.alipay.sofa.jraft.util.Ints;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.SystemPropertyUtil;
 import com.alipay.sofa.jraft.util.internal.UnsafeUtil;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/disruptor/TaskDispatcher.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 
-import com.alipay.sofa.jraft.rhea.util.Ints;
+import com.alipay.sofa.jraft.util.Ints;
 import com.alipay.sofa.jraft.util.Requires;
 import com.lmax.disruptor.BlockingWaitStrategy;
 import com.lmax.disruptor.BusySpinWaitStrategy;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/pipeline/DefaultHandlerInvoker.java
Patch:
@@ -21,11 +21,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.StackTraceUtil;
 import com.alipay.sofa.jraft.rhea.util.pipeline.event.InboundMessageEvent;
 import com.alipay.sofa.jraft.rhea.util.pipeline.event.MessageEvent;
 import com.alipay.sofa.jraft.rhea.util.pipeline.event.OutboundMessageEvent;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 
 /**
  *

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/rhea/AbstractDistributedLockTest.java
Patch:
@@ -30,9 +30,9 @@
 import com.alipay.sofa.jraft.rhea.client.RheaKVStore;
 import com.alipay.sofa.jraft.rhea.errors.InvalidLockAcquirerException;
 import com.alipay.sofa.jraft.rhea.storage.StorageType;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.concurrent.DistributedLock;
 import com.alipay.sofa.jraft.util.BytesUtil;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/PlacementDriverServer.java
Patch:
@@ -38,13 +38,13 @@
 import com.alipay.sofa.jraft.rhea.cmd.pd.StoreHeartbeatRequest;
 import com.alipay.sofa.jraft.rhea.options.PlacementDriverServerOptions;
 import com.alipay.sofa.jraft.rhea.options.RheaKVStoreOptions;
-import com.alipay.sofa.jraft.rhea.util.Constants;
-import com.alipay.sofa.jraft.rhea.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.rhea.util.concurrent.CallerRunsPolicyWithReport;
 import com.alipay.sofa.jraft.rhea.util.concurrent.NamedThreadFactory;
 import com.alipay.sofa.jraft.util.Endpoint;
+import com.alipay.sofa.jraft.util.ExecutorServiceHelper;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.ThreadPoolUtil;
+import com.alipay.sofa.jraft.util.Utils;
 
 /**
  * PlacementDriverServer is a role responsible for overall global control.
@@ -218,7 +218,7 @@ private void addPlacementDriverProcessor(final RpcServer rpcServer) {
     }
 
     private ThreadPoolExecutor createDefaultPdExecutor() {
-        final int corePoolSize = Math.max(Constants.AVAILABLE_PROCESSORS << 2, 32);
+        final int corePoolSize = Math.max(Utils.cpus() << 2, 32);
         final String name = "rheakv-pd-executor";
         return ThreadPoolUtil.newBuilder() //
             .poolName(name) //

File: jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftServiceFactory.java
Patch:
@@ -29,6 +29,7 @@
  * @since  1.2.6
  */
 public interface JRaftServiceFactory {
+
     /**
      * Creates a raft log storage.
      * @param uri  The log storage uri from {@link NodeOptions#getSnapshotUri()}
@@ -58,5 +59,4 @@ public interface JRaftServiceFactory {
      * @return a codec factory to create encoder/decoder for raft log entry.
      */
     LogEntryCodecFactory createLogEntryCodecFactory();
-
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/DefaultJRaftServiceFactory.java
Patch:
@@ -29,17 +29,16 @@
 import com.alipay.sofa.jraft.storage.impl.RocksDBLogStorage;
 import com.alipay.sofa.jraft.storage.snapshot.local.LocalSnapshotStorage;
 import com.alipay.sofa.jraft.util.Requires;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
  * The default factory for JRaft services.
  * @author boyan(boyan@antfin.com)
  * @since 1.2.6
  *
  */
+@SPI
 public class DefaultJRaftServiceFactory implements JRaftServiceFactory {
-    protected DefaultJRaftServiceFactory() {
-
-    }
 
     public static DefaultJRaftServiceFactory newInstance() {
         return new DefaultJRaftServiceFactory();

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/RegionLeaderBalanceHandler.java
Patch:
@@ -39,12 +39,14 @@
 import com.alipay.sofa.jraft.rhea.util.pipeline.HandlerContext;
 import com.alipay.sofa.jraft.rhea.util.pipeline.InboundHandlerAdapter;
 import com.alipay.sofa.jraft.util.Endpoint;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
  * Trying to balance the number of leaders in each store.
  *
  * @author jiachun.fjc
  */
+@SPI(name = "regionLeaderBalance", priority = 60)
 @Handler.Sharable
 public class RegionLeaderBalanceHandler extends InboundHandlerAdapter<RegionPingEvent> {
 

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/RegionStatsPersistenceHandler.java
Patch:
@@ -22,11 +22,13 @@
 import com.alipay.sofa.jraft.rhea.util.pipeline.Handler;
 import com.alipay.sofa.jraft.rhea.util.pipeline.HandlerContext;
 import com.alipay.sofa.jraft.rhea.util.pipeline.InboundHandlerAdapter;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
  *
  * @author jiachun.fjc
  */
+@SPI(name = "regionStatsPersistence", priority = 70)
 @Handler.Sharable
 public class RegionStatsPersistenceHandler extends InboundHandlerAdapter<RegionPingEvent> {
 

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/RegionStatsValidator.java
Patch:
@@ -33,10 +33,13 @@
 import com.alipay.sofa.jraft.rhea.util.pipeline.Handler;
 import com.alipay.sofa.jraft.rhea.util.pipeline.HandlerContext;
 import com.alipay.sofa.jraft.rhea.util.pipeline.InboundHandlerAdapter;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
+ *
  * @author jiachun.fjc
  */
+@SPI(name = "regionStatsValidator", priority = 90)
 @Handler.Sharable
 public class RegionStatsValidator extends InboundHandlerAdapter<RegionPingEvent> {
 

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/SplittingJudgeByApproximateKeysHandler.java
Patch:
@@ -33,13 +33,15 @@
 import com.alipay.sofa.jraft.rhea.util.pipeline.Handler;
 import com.alipay.sofa.jraft.rhea.util.pipeline.HandlerContext;
 import com.alipay.sofa.jraft.rhea.util.pipeline.InboundHandlerAdapter;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
  * Range split judge, the reference indicator for splitting is the
  * region's approximate keys.
  *
  * @author jiachun.fjc
  */
+@SPI(name = "splittingJudgeByApproximateKeys", priority = 50)
 @Handler.Sharable
 public class SplittingJudgeByApproximateKeysHandler extends InboundHandlerAdapter<RegionPingEvent> {
 

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/StoreStatsPersistenceHandler.java
Patch:
@@ -22,11 +22,13 @@
 import com.alipay.sofa.jraft.rhea.util.pipeline.Handler;
 import com.alipay.sofa.jraft.rhea.util.pipeline.HandlerContext;
 import com.alipay.sofa.jraft.rhea.util.pipeline.InboundHandlerAdapter;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
  *
  * @author jiachun.fjc
  */
+@SPI(name = "storeStatsPersistence", priority = 80)
 @Handler.Sharable
 public class StoreStatsPersistenceHandler extends InboundHandlerAdapter<StorePingEvent> {
 

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/handler/StoreStatsValidator.java
Patch:
@@ -28,10 +28,13 @@
 import com.alipay.sofa.jraft.rhea.util.pipeline.Handler;
 import com.alipay.sofa.jraft.rhea.util.pipeline.HandlerContext;
 import com.alipay.sofa.jraft.rhea.util.pipeline.InboundHandlerAdapter;
+import com.alipay.sofa.jraft.util.SPI;
 
 /**
+ *
  * @author jiachun.fjc
  */
+@SPI(name = "storeStatsValidator", priority = 100)
 @Handler.Sharable
 public class StoreStatsValidator extends InboundHandlerAdapter<StorePingEvent> {
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/DefaultRegionKVService.java
Patch:
@@ -566,7 +566,6 @@ public void run(final Status status) {
     private static void setFailure(final BaseRequest request, final BaseResponse<?> response, final Status status,
                                    final Errors error) {
         response.setError(error == null ? Errors.STORAGE_ERROR : error);
-        response.setErrorMsg(status.toString());
         LOG.error("Failed to handle: {}, status: {}, error: {}.", request, status, error);
     }
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVRpcService.java
Patch:
@@ -144,7 +144,7 @@ public void onResponse(final Object result) {
                     closure.run(Status.OK());
                 } else {
                     closure.setError(response.getError());
-                    closure.run(new Status(-1, "RPC failed: %s", response));
+                    closure.run(new Status(-1, "RPC failed with address: %s, response: %s", address, response));
                 }
             }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/DefaultPlacementDriverRpcService.java
Patch:
@@ -105,7 +105,7 @@ public void onResponse(final Object result) {
                     closure.run(Status.OK());
                 } else {
                     closure.setError(response.getError());
-                    closure.run(new Status(-1, "RPC failed: %s", response));
+                    closure.run(new Status(-1, "RPC failed with address: %s, response: %s", address, response));
                 }
             }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/HeartbeatSender.java
Patch:
@@ -219,7 +219,7 @@ public void onResponse(final Object result) {
                     closure.run(Status.OK());
                 } else {
                     closure.setError(response.getError());
-                    closure.run(new Status(-1, "RPC failed: %s", response));
+                    closure.run(new Status(-1, "RPC failed with address: %s, response: %s", address, response));
                 }
             }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/impl/protostuff/ProtoStuffSerializer.java
Patch:
@@ -52,7 +52,7 @@ public class ProtoStuffSerializer extends Serializer {
         // applies to java beans/data objects.
         //
         final String always_use_sun_reflection_factory = SystemPropertyUtil.get(
-            "rhea.serializer.protostuff.always_use_sun_reflection_factory", "true");
+            "rhea.serializer.protostuff.always_use_sun_reflection_factory", "false");
         SystemPropertyUtil.setProperty("protostuff.runtime.always_use_sun_reflection_factory",
             always_use_sun_reflection_factory);
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Closure.java
Patch:
@@ -30,5 +30,5 @@ public interface Closure {
      *
      * @param status the task status.
      */
-    void run(Status status);
+    void run(final Status status);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Iterator.java
Patch:
@@ -70,5 +70,5 @@ public interface Iterator extends java.util.Iterator<ByteBuffer> {
      * 
      * If |statInfo| is not NULL, it should describe the detail of the error.
      */
-    void setErrorAndRollback(long ntail, Status st);
+    void setErrorAndRollback(final long ntail, final Status st);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/Lifecycle.java
Patch:
@@ -30,7 +30,7 @@ public interface Lifecycle<T> {
      *
      * @return true when successes.
      */
-    boolean init(T opts);
+    boolean init(final T opts);
 
     /**
      * Dispose the resources for service.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/ReadOnlyService.java
Patch:
@@ -33,7 +33,7 @@ public interface ReadOnlyService extends Lifecycle<ReadOnlyServiceOptions> {
      * @param reqCtx    request context of readIndex
      * @param closure   callback
      */
-    void addRequest(byte[] reqCtx, ReadIndexClosure closure);
+    void addRequest(final byte[] reqCtx, final ReadIndexClosure closure);
 
     /**
      * Waits for service shutdown.

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Attachable.java
Patch:
@@ -22,5 +22,5 @@
  */
 public interface Attachable<T> {
 
-    T getAttach();
+    T getAttachments();
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngineHelper.java
Patch:
@@ -59,9 +59,9 @@ public static ExecutorService createReadIndexExecutor(final int coreThreads) {
         return newPool(coreThreads, maxThreads, "rheakv-read-index-callback", handler);
     }
 
-    public static ExecutorService createLeaderStateTrigger(final int coreThreads) {
+    public static ExecutorService createRaftStateTrigger(final int coreThreads) {
         final BlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<>(32);
-        return newPool(coreThreads, coreThreads, "rheakv-leader-state-trigger", workQueue);
+        return newPool(coreThreads, coreThreads, "rheakv-raft-state-trigger", workQueue);
     }
 
     public static ExecutorService createSnapshotExecutor(final int coreThreads) {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/KVStateMachineTest.java
Patch:
@@ -257,7 +257,7 @@ public BatchRawKVStore<?> getRawKVStore() {
         }
 
         @Override
-        public ExecutorService getLeaderStateTrigger() {
+        public ExecutorService getRaftStateTrigger() {
             return this.leaderStateTrigger;
         }
     }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -131,7 +131,7 @@ public synchronized boolean init(final StoreEngineOptions opts) {
         final int port = serverAddress.getPort();
         final String ip = serverAddress.getIp();
         if (ip == null || Constants.IP_ANY.equals(ip)) {
-            serverAddress = new Endpoint(NetUtil.getLocalHostName(), port);
+            serverAddress = new Endpoint(NetUtil.getLocalCanonicalHostName(), port);
             opts.setServerAddress(serverAddress);
         }
         final long metricsReportPeriod = opts.getMetricsReportPeriod();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/options/RocksDBOptions.java
Patch:
@@ -29,6 +29,8 @@ public class RocksDBOptions {
     private boolean sync                              = false;
     // For the same reason(See the comment of ‘sync’ field), we also
     // don't need WAL, which can improve performance.
+    //
+    // If `sync` is true, `disableWAL` must be set false
     private boolean disableWAL                        = true;
     private boolean fastSnapshot                      = false;
     private boolean openStatisticsCollector           = true;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RocksRawKVStore.java
Patch:
@@ -153,7 +153,8 @@ public boolean init(final RocksDBOptions opts) {
             this.cfDescriptors.add(new ColumnFamilyDescriptor(BytesUtil.writeUtf8("RHEA_FENCING"), cfOptions));
             this.writeOptions = new WriteOptions();
             this.writeOptions.setSync(opts.isSync());
-            this.writeOptions.setDisableWAL(opts.isDisableWAL());
+            // If `sync` is true, `disableWAL` must be set false.
+            this.writeOptions.setDisableWAL(!opts.isSync() && opts.isDisableWAL());
             // Delete existing data, relying on raft's snapshot and log playback
             // to reply to the data is the correct behavior.
             destroyRocksDB(opts);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Recyclable.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util;
+package com.alipay.sofa.jraft.util;
 
 /**
  *

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/RecycleUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util;
+package com.alipay.sofa.jraft.util;
 
 /**
  * Recycle tool for {@link Recyclable}.

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVStoreStateMachine.java
Patch:
@@ -38,11 +38,11 @@
 import com.alipay.sofa.jraft.rhea.metrics.KVMetrics;
 import com.alipay.sofa.jraft.rhea.serialization.Serializer;
 import com.alipay.sofa.jraft.rhea.serialization.Serializers;
-import com.alipay.sofa.jraft.rhea.util.RecycleUtil;
 import com.alipay.sofa.jraft.rhea.util.StackTraceUtil;
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;
 import com.alipay.sofa.jraft.util.BytesUtil;
+import com.alipay.sofa.jraft.util.RecycleUtil;
 import com.codahale.metrics.Histogram;
 import com.codahale.metrics.Meter;
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RocksRawKVStore.java
Patch:
@@ -153,7 +153,7 @@ public boolean init(final RocksDBOptions opts) {
             this.cfDescriptors.add(new ColumnFamilyDescriptor(BytesUtil.writeUtf8("RHEA_FENCING"), cfOptions));
             this.writeOptions = new WriteOptions();
             this.writeOptions.setSync(opts.isSync());
-            this.writeOptions.setDisableWAL(false);
+            this.writeOptions.setDisableWAL(opts.isDisableWAL());
             // Delete existing data, relying on raft's snapshot and log playback
             // to reply to the data is the correct behavior.
             destroyRocksDB(opts);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeMetrics.java
Patch:
@@ -63,8 +63,8 @@ public MetricRegistry getMetricRegistry() {
 
     /**
      * Records operation times.
-     * @param key
-     * @param times
+     * @param key   key of operation
+     * @param times times of operation
      */
     public void recordTimes(final String key, final long times) {
         if (this.metrics != null) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/LogId.java
Patch:
@@ -83,6 +83,7 @@ public boolean equals(final Object obj) {
         if (this.index != other.index) {
             return false;
         }
+        // noinspection RedundantIfStatement
         if (this.term != other.term) {
             return false;
         }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/LogEntryCodecFactory.java
Patch:
@@ -18,20 +18,20 @@
 
 /**
  * Log entry codec factory to create encoder/decoder for LogEntry.
+ *
  * @author boyan(boyan@antfin.com)
  * @since 1.2.6
- *
  */
 public interface LogEntryCodecFactory {
     /**
      * Returns a log entry encoder.
-     * @return
+     * @return encoder instance
      */
     LogEntryEncoder encoder();
 
     /**
      * Returns a log entry decoder.
-     * @return
+     * @return encoder instance
      */
     LogEntryDecoder decoder();
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/LogEntryDecoder.java
Patch:
@@ -20,9 +20,9 @@
 
 /**
  * Log entry decoder
+ *
  * @author boyan(boyan@antfin.com)
  * @since 1.2.6
- *
  */
 public interface LogEntryDecoder {
     /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/LogEntryEncoder.java
Patch:
@@ -20,15 +20,16 @@
 
 /**
  * Log entry encoder
+ *
  * @author boyan(boyan@antfin.com)
  * @since 1.2.6
  */
 public interface LogEntryEncoder {
 
     /**
      * Encode a log entry into a byte array.
-     * @param log
-     * @return
+     * @param log log entry
+     * @return encoded byte array
      */
     byte[] encode(LogEntry log);
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/v1/LogEntryV1CodecFactory.java
Patch:
@@ -37,7 +37,7 @@ private LogEntryV1CodecFactory() {
 
     /**
      * Returns a singleton instance of DefaultLogEntryCodecFactory.
-     * @return
+     * @return a singleton instance
      */
     public static LogEntryV1CodecFactory getInstance() {
         return INSTANCE;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/v1/V1Decoder.java
Patch:
@@ -36,7 +36,6 @@
 public final class V1Decoder implements LogEntryDecoder {
 
     private V1Decoder() {
-
     }
 
     public static V1Decoder INSTANCE = new V1Decoder();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/entity/codec/v1/V1Encoder.java
Patch:
@@ -34,8 +34,8 @@
  *
  */
 public final class V1Encoder implements LogEntryEncoder {
-    private V1Encoder() {
 
+    private V1Encoder() {
     }
 
     public static LogEntryEncoder INSTANCE = new V1Encoder();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -193,7 +193,7 @@ public boolean init(final LogManagerOptions opts) {
                     .setRingBufferSize(opts.getDisruptorBufferSize()) //
                     .setThreadFactory(new NamedThreadFactory("JRaft-LogManager-Disruptor-", true)) //
                     .setProducerType(ProducerType.MULTI) //
-                    /**
+                    /*
                      *  Use timeout strategy in log manager. If timeout happens, it will called reportError to halt the node.
                      */
                     .setWaitStrategy(new TimeoutBlockingWaitStrategy(

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/CRC64.java
Patch:
@@ -35,8 +35,8 @@ public class CRC64 implements Checksum {
      *
      * poly=0x42f0e1eba9ea3693 init=0x0 refin=false refout=false xorout=0x0
      *
-     * @url http://en.wikipedia.org/wiki/Cyclic_redundancy_check
-     * @url http://reveng.sourceforge.net/crc-catalogue/17plus.htm
+     * @see <a href="http://en.wikipedia.org/wiki/Cyclic_redundancy_check">http://en.wikipedia.org/wiki/Cyclic_redundancy_check</a>
+     * @see <a href="http://reveng.sourceforge.net/crc-catalogue/17plus.htm">http://reveng.sourceforge.net/crc-catalogue/17plus.htm</a>
      */
     private static final long[] CRC_TABLE = new long[] { 0x0000000000000000L, 0x42F0E1EBA9EA3693L, 0x85E1C3D753D46D26L,
             0xC711223CFA3E5BB5L, 0x493366450E42ECDFL, 0x0BC387AEA7A8DA4CL, 0xCCD2A5925D9681F9L, 0x8E224479F47CB76AL,

File: jraft-core/src/test/java/com/alipay/sofa/jraft/entity/LogEntryTest.java
Patch:
@@ -33,6 +33,7 @@
 
 public class LogEntryTest {
 
+    @SuppressWarnings("deprecation")
     @Test
     public void testEncodeDecodeWithoutData() {
         LogEntry entry = new LogEntry(EnumOutter.EntryType.ENTRY_TYPE_NO_OP);
@@ -60,6 +61,7 @@ public void testEncodeDecodeWithoutData() {
         assertNull(nentry.getOldPeers());
     }
 
+    @SuppressWarnings("deprecation")
     @Test
     public void testEncodeDecodeWithData() {
         ByteBuffer buf = ByteBuffer.wrap("hello".getBytes());

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/KVStateMachineTest.java
Patch:
@@ -137,8 +137,8 @@ public void failApplyTest() throws Exception {
 
                 @Override
                 public void run(Status status) {
-                    latch.countDown();
                     successQueue.add(status);
+                    latch.countDown();
                 }
             };
             closures.add(c);
@@ -148,8 +148,8 @@ public void run(Status status) {
 
                 @Override
                 public void run(Status status) {
-                    latch.countDown();
                     failQueue.add(status);
+                    latch.countDown();
                 }
             };
             closures.add(c);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/DefaultRegionKVService.java
Patch:
@@ -364,7 +364,7 @@ public void handleScanRequest(final ScanRequest request,
         try {
             KVParameterRequires.requireSameEpoch(request, getRegionEpoch());
             this.rawKVStore.scan(request.getStartKey(), request.getEndKey(), request.getLimit(),
-                request.isReadOnlySafe(), new BaseKVStoreClosure() {
+                request.isReadOnlySafe(), request.isReturnValue(), new BaseKVStoreClosure() {
 
                     @SuppressWarnings("unchecked")
                     @Override

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -62,7 +62,6 @@
 import com.alipay.sofa.jraft.rhea.util.Lists;
 import com.alipay.sofa.jraft.rhea.util.Maps;
 import com.alipay.sofa.jraft.rhea.util.NetUtil;
-import com.alipay.sofa.jraft.rhea.util.Pair;
 import com.alipay.sofa.jraft.rhea.util.Strings;
 import com.alipay.sofa.jraft.rpc.RaftRpcServerFactory;
 import com.alipay.sofa.jraft.util.BytesUtil;
@@ -484,7 +483,7 @@ public void applySplit(final Long regionId, final Long newRegionId, final KVStor
             this.splitting.set(false);
             return;
         }
-        final KVOperation op = KVOperation.createRangeSplit(splitKey, Pair.of(regionId, newRegionId));
+        final KVOperation op = KVOperation.createRangeSplit(splitKey, regionId, newRegionId);
         final Task task = new Task();
         task.setData(ByteBuffer.wrap(Serializers.getDefault().writeObject(op)));
         task.setDone(new KVClosureAdapter(closure, op));

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/BatchRawKVStore.java
Patch:
@@ -116,7 +116,7 @@ public void batchScan(final KVStateOutputList kvStates) {
         for (int i = 0, l = kvStates.size(); i < l; i++) {
             final KVState kvState = kvStates.get(i);
             final KVOperation op = kvState.getOp();
-            scan(op.getStartKey(), op.getEndKey(), op.getLimit(), kvState.getDone());
+            scan(op.getStartKey(), op.getEndKey(), op.getLimit(), true, op.isReturnValue(), kvState.getDone());
         }
     }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/MemoryRawKVStore.java
Patch:
@@ -121,7 +121,8 @@ public void multiGet(final List<byte[]> keys, @SuppressWarnings("unused") final
     }
 
     @Override
-    public void scan(final byte[] startKey, final byte[] endKey, final int limit, final boolean readOnlySafe,
+    public void scan(final byte[] startKey, final byte[] endKey, final int limit,
+                     @SuppressWarnings("unused") final boolean readOnlySafe, final boolean returnValue,
                      final KVStoreClosure closure) {
         final Timer.Context timeCtx = getTimeContext("SCAN");
         final List<KVEntry> entries = Lists.newArrayList();
@@ -140,7 +141,7 @@ public void scan(final byte[] startKey, final byte[] endKey, final int limit, fi
         }
         try {
             for (final Map.Entry<byte[], byte[]> entry : subMap.entrySet()) {
-                entries.add(new KVEntry(entry.getKey(), entry.getValue()));
+                entries.add(new KVEntry(entry.getKey(), returnValue ? entry.getValue() : null));
                 if (entries.size() >= maxCount) {
                     break;
                 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RocksRawKVStore.java
Patch:
@@ -276,7 +276,8 @@ public void multiGet(final List<byte[]> keys, @SuppressWarnings("unused") final
 
     @Override
     public void scan(final byte[] startKey, final byte[] endKey, final int limit,
-                     @SuppressWarnings("unused") final boolean readOnlySafe, final KVStoreClosure closure) {
+                     @SuppressWarnings("unused") final boolean readOnlySafe, final boolean returnValue,
+                     final KVStoreClosure closure) {
         final Timer.Context timeCtx = getTimeContext("SCAN");
         final List<KVEntry> entries = Lists.newArrayList();
         // If limit == 0, it will be modified to Integer.MAX_VALUE on the server
@@ -299,7 +300,7 @@ public void scan(final byte[] startKey, final byte[] endKey, final int limit,
                 if (endKey != null && BytesUtil.compare(key, endKey) >= 0) {
                     break;
                 }
-                entries.add(new KVEntry(key, it.value()));
+                entries.add(new KVEntry(key, returnValue ? it.value() : null));
                 it.next();
             }
             setSuccess(closure, entries);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/IteratorImpl.java
Patch:
@@ -147,7 +147,7 @@ public void setErrorAndRollback(final long ntail, final Status st) {
         this.currEntry = null;
         getOrCreateError().setType(EnumOutter.ErrorType.ERROR_TYPE_STATE_MACHINE);
         getOrCreateError().getStatus().setError(RaftError.ESTATEMACHINE,
-            "StateMachine meet critical error when applying one  or more tasks since index=%d, %s", this.currentIndex,
+            "StateMachine meet critical error when applying one or more tasks since index=%d, %s", this.currentIndex,
             st != null ? st.toString() : "none");
 
     }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/IteratorImplTest.java
Patch:
@@ -113,7 +113,7 @@ public void testRunTheRestClosureWithError() throws Exception {
                 final Status s = mc.s;
                 Assert.assertEquals(RaftError.ESTATEMACHINE.getNumber(), s.getCode());
                 assertEquals(
-                    "StateMachine meet critical error when applying one  or more tasks since index=6, Status[UNKNOWN<-1>: test]",
+                    "StateMachine meet critical error when applying one or more tasks since index=6, Status[UNKNOWN<-1>: test]",
                     s.getErrorMsg());
             }
         }
@@ -129,7 +129,7 @@ public void testSetErrorAndRollback() {
         Assert.assertEquals(RaftError.ESTATEMACHINE.getNumber(), iter.getError().getStatus().getCode());
         Assert
             .assertEquals(
-                "StateMachine meet critical error when applying one  or more tasks since index=6, Status[UNKNOWN<-1>: test]",
+                "StateMachine meet critical error when applying one or more tasks since index=6, Status[UNKNOWN<-1>: test]",
                 iter.getError().getStatus().getErrorMsg());
         assertEquals(6, iter.getIndex());
     }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/IteratorTest.java
Patch:
@@ -107,7 +107,7 @@ public void testSetErrorAndRollback() {
         Assert.assertEquals(RaftError.ESTATEMACHINE.getNumber(), iterImpl.getError().getStatus().getCode());
         Assert
             .assertEquals(
-                "StateMachine meet critical error when applying one  or more tasks since index=6, Status[UNKNOWN<-1>: test]",
+                "StateMachine meet critical error when applying one or more tasks since index=6, Status[UNKNOWN<-1>: test]",
                 iterImpl.getError().getStatus().getErrorMsg());
         assertEquals(6, iter.getIndex());
     }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/DefaultRegionKVService.java
Patch:
@@ -565,7 +565,8 @@ public void run(final Status status) {
 
     private static void setFailure(final BaseRequest request, final BaseResponse<?> response, final Status status,
                                    final Errors error) {
-        response.setError(error);
+        response.setError(error == null ? Errors.STORAGE_ERROR : error);
+        response.setErrorMsg(status.toString());
         LOG.error("Failed to handle: {}, status: {}, error: {}.", request, status, error);
     }
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVCliService.java
Patch:
@@ -84,8 +84,7 @@ public Status rangeSplit(final long regionId, final long newRegionId, final Stri
             if (response.isSuccess()) {
                 return Status.OK();
             }
-            return new Status(-1, "fail to range split on region %d, error: %s", regionId, String.valueOf(response
-                .getError()));
+            return new Status(-1, "Fail to range split on region %d, error: %s", regionId, response);
         } catch (final Exception e) {
             LOG.error("Fail to range split on exception: {}.", StackTraceUtil.stackTrace(e));
             return new Status(-1, "fail to range split on region %d", regionId);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/impl/protostuff/io/Inputs.java
Patch:
@@ -21,6 +21,7 @@
 import io.protostuff.ProtobufException;
 
 import com.alipay.sofa.jraft.rhea.serialization.io.InputBuf;
+import com.alipay.sofa.jraft.util.internal.UnsafeUtil;
 
 /**
  *
@@ -29,7 +30,7 @@
 public final class Inputs {
 
     public static Input getInput(final InputBuf inputBuf) {
-        if (inputBuf.hasMemoryAddress()) {
+        if (UnsafeUtil.hasUnsafe() && inputBuf.hasMemoryAddress()) {
             return new UnsafeNioBufInput(inputBuf.nioByteBuffer(), true);
         }
         return new NioBufInput(inputBuf.nioByteBuffer(), true);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/impl/protostuff/io/Outputs.java
Patch:
@@ -22,6 +22,7 @@
 import io.protostuff.WriteSession;
 
 import com.alipay.sofa.jraft.rhea.serialization.io.OutputBuf;
+import com.alipay.sofa.jraft.util.internal.UnsafeUtil;
 
 /**
  *
@@ -30,7 +31,7 @@
 public final class Outputs {
 
     public static Output getOutput(final OutputBuf outputBuf) {
-        if (outputBuf.hasMemoryAddress()) {
+        if (UnsafeUtil.hasUnsafe() && outputBuf.hasMemoryAddress()) {
             return new UnsafeNioBufOutput(outputBuf, -1, Integer.MAX_VALUE);
         }
         return new NioBufOutput(outputBuf, -1, Integer.MAX_VALUE);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/collection/ConcurrentAutoTable.java
Patch:
@@ -37,7 +37,7 @@ public class ConcurrentAutoTable implements Serializable {
 
     private static final long serialVersionUID = -754466836461919739L;
 
-    private static Unsafe     unsafe           = UnsafeUtil.getUnsafe();
+    private static Unsafe     unsafe           = UnsafeUtil.getUnsafeAccessor().getUnsafe();
 
     // --- public interface ---
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/collection/NonBlockingHashMap.java
Patch:
@@ -96,7 +96,7 @@ public class NonBlockingHashMap<TypeK, TypeV> extends AbstractMap<TypeK, TypeV>
 
     private static final long serialVersionUID = 1234123412341234123L;
 
-    private static Unsafe     unsafe           = UnsafeUtil.getUnsafe();
+    private static Unsafe     unsafe           = UnsafeUtil.getUnsafeAccessor().getUnsafe();
 
     private static final int  REPROBE_LIMIT    = 10;                                          // Too many reprobes then force a table-resize
 
@@ -1607,8 +1607,8 @@ public boolean hasNext() {
      * requires the creation of {@link Entry} objects with each
      * iteration.  The {@link NonBlockingHashMap} does not normally create or
      * using {@link Entry} objects so they will be created soley
-     * to support this iteration.  Iterating using {@link #keySet} or {@link
-     * #values} will be more efficient.
+     * to support this iteration.  Iterating using keySet or values will be
+     * more efficient.
      */
     @Override
     public Set<Entry<TypeK, TypeV>> entrySet() {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/collection/NonBlockingHashMapLong.java
Patch:
@@ -103,9 +103,10 @@ public class NonBlockingHashMapLong<TypeV> extends AbstractMap<Long, TypeV> impl
 
     private static final long serialVersionUID = 1234123412341234124L;
 
-    private static Unsafe     unsafe           = UnsafeUtil.getUnsafe();
+    private static Unsafe     unsafe           = UnsafeUtil.getUnsafeAccessor().getUnsafe();
 
-    private static final int  REPROBE_LIMIT    = 10;                                    // Too many reprobes then force a table-resize
+    // Too many reprobes then force a table-resize
+    private static final int  REPROBE_LIMIT    = 10;
 
     // --- Bits to allow Unsafe access to arrays
     private static final int  _Obase           = unsafe.arrayBaseOffset(Object[].class);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/ProtobufMsgFactory.java
Patch:
@@ -55,10 +55,10 @@ public class ProtobufMsgFactory {
             List<FileDescriptor> resolveFDs = new ArrayList<>();
             for (FileDescriptorProto fdp : descriptorSet.getFileList()) {
 
-                FileDescriptor[] dpendencies = new FileDescriptor[resolveFDs.size()];
-                resolveFDs.toArray(dpendencies);
+                FileDescriptor[] dependencies = new FileDescriptor[resolveFDs.size()];
+                resolveFDs.toArray(dependencies);
 
-                FileDescriptor fd = FileDescriptor.buildFrom(fdp, dpendencies);
+                FileDescriptor fd = FileDescriptor.buildFrom(fdp, dependencies);
                 resolveFDs.add(fd);
                 for (Descriptor descriptor : fd.getMessageTypes()) {
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -81,7 +81,7 @@ public class LogManagerImpl implements LogManager {
     private long                                             nextWaitId;
     private LogId                                            diskId                = new LogId(0, 0);
     private LogId                                            appliedId             = new LogId(0, 0);
-    //TODO  use a lock-free concurrent list instead?
+    // TODO  use a lock-free concurrent list instead?
     private ArrayDeque<LogEntry>                             logsInMemory          = new ArrayDeque<>();
     private volatile long                                    firstLogIndex;
     private volatile long                                    lastLogIndex;
@@ -99,7 +99,8 @@ private enum EventType {
         RESET, // reset
         TRUNCATE_PREFIX, // truncate log from prefix
         TRUNCATE_SUFFIX, // truncate log from suffix
-        SHUTDOWN, LAST_LOG_ID // get last log id
+        SHUTDOWN, //
+        LAST_LOG_ID // get last log id
     }
 
     private static class StableClosureEvent {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/RepeatedTimer.java
Patch:
@@ -182,7 +182,7 @@ public void reset(int timeoutMs) {
                 schedule();
             }
         } finally {
-            lock.lock();
+            lock.unlock();
         }
     }
 
@@ -194,7 +194,7 @@ public void reset() {
         try {
             this.reset(this.timeoutMs);
         } finally {
-            lock.lock();
+            lock.unlock();
         }
     }
 

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/rocksdb/RocksKVStoreTest.java
Patch:
@@ -37,14 +37,13 @@
 import com.alipay.sofa.jraft.entity.LocalFileMetaOutter.LocalFileMeta;
 import com.alipay.sofa.jraft.rhea.metadata.Region;
 import com.alipay.sofa.jraft.rhea.options.RocksDBOptions;
-import com.alipay.sofa.jraft.rhea.rocks.support.RocksStatistics;
 import com.alipay.sofa.jraft.rhea.storage.KVEntry;
 import com.alipay.sofa.jraft.rhea.storage.KVIterator;
+import com.alipay.sofa.jraft.rhea.storage.KVStoreAccessHelper;
 import com.alipay.sofa.jraft.rhea.storage.KVStoreClosure;
 import com.alipay.sofa.jraft.rhea.storage.LocalLock;
 import com.alipay.sofa.jraft.rhea.storage.RawKVStore;
 import com.alipay.sofa.jraft.rhea.storage.RocksRawKVStore;
-import com.alipay.sofa.jraft.rhea.storage.KVStoreAccessHelper;
 import com.alipay.sofa.jraft.rhea.storage.Sequence;
 import com.alipay.sofa.jraft.rhea.storage.SstColumnFamily;
 import com.alipay.sofa.jraft.rhea.storage.SyncKVStore;
@@ -82,7 +81,6 @@ public void setup() throws Exception {
     @Override
     @After
     public void tearDown() throws Exception {
-        System.out.println(RocksStatistics.getStatisticsString(this.kvStore));
         super.tearDown();
     }
 

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosMemoryDBBatchingTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosMemoryDBBatching extends AbstractChaosTest {
+public class ChaosMemoryDBBatchingTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosMemoryDBLeaderReadBatchingTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosMemoryDBLeaderReadBatching extends AbstractChaosTest {
+public class ChaosMemoryDBLeaderReadBatchingTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosMemoryLeaderReadTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosRocksDBBatching extends AbstractChaosTest {
+public class ChaosMemoryLeaderReadTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {
@@ -31,11 +31,11 @@ public StorageType getStorageType() {
 
     @Override
     public boolean isAllowBatching() {
-        return true;
+        return false;
     }
 
     @Override
     public boolean isOnlyLeaderRead() {
-        return false;
+        return true;
     }
 }

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosMemoryTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosMemory extends AbstractChaosTest {
+public class ChaosMemoryTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosRocksDBBatchingTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosRocksDBLeaderRead extends AbstractChaosTest {
+public class ChaosRocksDBBatchingTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {
@@ -31,11 +31,11 @@ public StorageType getStorageType() {
 
     @Override
     public boolean isAllowBatching() {
-        return false;
+        return true;
     }
 
     @Override
     public boolean isOnlyLeaderRead() {
-        return true;
+        return false;
     }
 }

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosRocksDBLeaderReadBatchingTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosRocksDBLeaderReadBatching extends AbstractChaosTest {
+public class ChaosRocksDBLeaderReadBatchingTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosRocksDBLeaderReadTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosMemoryLeaderRead extends AbstractChaosTest {
+public class ChaosRocksDBLeaderReadTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/chaos/ChaosRocksDBTest.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @author jiachun.fjc
  */
-public class ChaosRocksDB extends AbstractChaosTest {
+public class ChaosRocksDBTest extends AbstractChaosTest {
 
     @Override
     public StorageType getStorageType() {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/RaftMetaStorage.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.alipay.sofa.jraft.Lifecycle;
 import com.alipay.sofa.jraft.entity.PeerId;
+import com.alipay.sofa.jraft.option.RaftMetaStorageOptions;
 
 /**
  * Raft metadata storage service.
@@ -26,7 +27,7 @@
  *
  * 2018-Mar-12 3:54:21 PM
  */
-public interface RaftMetaStorage extends Lifecycle<Void>, Storage {
+public interface RaftMetaStorage extends Lifecycle<RaftMetaStorageOptions>, Storage {
 
     /**
      * Set current term.

File: jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java
Patch:
@@ -75,9 +75,10 @@ public static Executor createExecutor(final String prefix, int number) {
     /**
      * Create a thread factory.
      *
-     * @since 0.0.3
      * @param prefixName the prefix name of thread
      * @return a new {@link ThreadFactory} instance
+     *
+     * @since 0.0.3
      */
     public static ThreadFactory createThreadFactory(final String prefixName) {
         return new ThreadFactory() {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/FSMCallerImpl.java
Patch:
@@ -179,7 +179,7 @@ public boolean init(final FSMCallerOptions opts) {
         this.notifyLastAppliedIndexUpdated(this.lastAppliedIndex.get());
         this.lastAppliedTerm = opts.getBootstrapId().getTerm();
         this.disruptor = new Disruptor<>(new ApplyTaskFactory(), opts.getDisruptorBufferSize(), new NamedThreadFactory(
-            "Jraft-FSMCaller-disruptor-", true));
+            "JRaft-FSMCaller-disruptor-", true));
         this.disruptor.handleEventsWith(new ApplyTaskHandler());
         this.disruptor.setDefaultExceptionHandler(new LogExceptionHandler<Object>(getClass().getSimpleName()));
         this.disruptor.start();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReadOnlyServiceImpl.java
Patch:
@@ -208,7 +208,7 @@ public boolean init(ReadOnlyServiceOptions opts) {
         this.scheduledExecutorService = Executors
                 .newSingleThreadScheduledExecutor(new NamedThreadFactory("ReadOnlyService-PendingNotify-Scanner", true));
         this.readIndexDisruptor = new Disruptor<>(new ReadIndexEventFactory(), raftOptions.getDisruptorBufferSize(),
-                new NamedThreadFactory("Jraft-ReadOnlyService-Disruptor-", true));
+                new NamedThreadFactory("JRaft-ReadOnlyService-Disruptor-", true));
         this.readIndexDisruptor.handleEventsWith(new ReadIndexEventHandler());
         this.readIndexDisruptor.setDefaultExceptionHandler(new LogExceptionHandler<Object>(this.getClass().getSimpleName()));
         this.readIndexDisruptor.start();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/AbstractBoltClientService.java
Patch:
@@ -38,7 +38,7 @@
 import com.alipay.sofa.jraft.rpc.RpcRequests.PingRequest;
 import com.alipay.sofa.jraft.rpc.RpcResponseClosure;
 import com.alipay.sofa.jraft.rpc.impl.core.BoltRaftClientService;
-import com.alipay.sofa.jraft.rpc.impl.core.JraftRpcAddressParser;
+import com.alipay.sofa.jraft.rpc.impl.core.JRaftRpcAddressParser;
 import com.alipay.sofa.jraft.util.Endpoint;
 import com.alipay.sofa.jraft.util.NamedThreadFactory;
 import com.alipay.sofa.jraft.util.ThreadPoolMetricSet;
@@ -64,7 +64,7 @@ public abstract class AbstractBoltClientService implements ClientService {
     protected RpcClient             rpcClient;
     protected ThreadPoolExecutor    rpcExecutor;
     protected RpcOptions            rpcOptions;
-    protected JraftRpcAddressParser rpcAddressParser;
+    protected JRaftRpcAddressParser rpcAddressParser;
 
     public RpcClient getRpcClient() {
         return this.rpcClient;
@@ -82,7 +82,7 @@ public synchronized boolean init(RpcOptions rpcOptions) {
         }
         this.rpcOptions = rpcOptions;
         final int rpcProcessorThreadPoolSize = this.rpcOptions.getRpcProcessorThreadPoolSize();
-        this.rpcAddressParser = new JraftRpcAddressParser();
+        this.rpcAddressParser = new JRaftRpcAddressParser();
         return initRpcClient(rpcProcessorThreadPoolSize);
     }
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/impl/LogManagerImpl.java
Patch:
@@ -173,7 +173,7 @@ public boolean init(LogManagerOptions opts) {
             this.diskId = new LogId(this.lastLogIndex, this.logStorage.getTerm(this.lastLogIndex));
             this.fsmCaller = opts.getFsmCaller();
             this.disruptor = new Disruptor<>(new StableClosureEventFactory(), opts.getDisruptorBufferSize(),
-                    new NamedThreadFactory("Jraft-LogManager-Disruptor-", true));
+                    new NamedThreadFactory("JRaft-LogManager-Disruptor-", true));
             this.disruptor.handleEventsWith(new StableClosureEventHandler());
             this.disruptor.setDefaultExceptionHandler(
                 new LogExceptionHandler<Object>(this.getClass().getSimpleName(),

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Utils.java
Patch:
@@ -98,6 +98,9 @@ public static void registerClosureExecutorMetrics(MetricRegistry registry) {
      * Run closure with OK status in thread pool.
      */
     public static Future<?> runClosureInThread(final Closure done) {
+        if (done == null) {
+            return null;
+        }
         return runClosureInThread(done, Status.OK());
     }
 

File: jraft-core/src/test/java/com/alipay/sofa/jraft/rpc/AbstractBoltClientServiceTest.java
Patch:
@@ -39,7 +39,7 @@
 import com.alipay.sofa.jraft.rpc.RpcRequests.ErrorResponse;
 import com.alipay.sofa.jraft.rpc.RpcRequests.PingRequest;
 import com.alipay.sofa.jraft.rpc.impl.AbstractBoltClientService;
-import com.alipay.sofa.jraft.rpc.impl.core.JraftRpcAddressParser;
+import com.alipay.sofa.jraft.rpc.impl.core.JRaftRpcAddressParser;
 import com.alipay.sofa.jraft.test.TestUtils;
 import com.alipay.sofa.jraft.util.Endpoint;
 import com.google.protobuf.Message;
@@ -65,7 +65,7 @@ public void setRpcClient(RpcClient rpcClient) {
     private MockBoltClientService clientService;
     @Mock
     private RpcClient             rpcClient;
-    private JraftRpcAddressParser rpcAddressParser = new JraftRpcAddressParser();
+    private JRaftRpcAddressParser rpcAddressParser = new JRaftRpcAddressParser();
     private Endpoint              endpoint         = new Endpoint("localhost", 8081);
 
     @Before

File: jraft-core/src/main/java/com/alipay/sofa/jraft/StateMachine.java
Patch:
@@ -64,8 +64,8 @@ public interface StateMachine {
      * call done.run(status) when snapshot finished.
      * Default: Save nothing and returns error.
      *
-     * @param writer    snapshot writer
-     * @param done      callback
+     * @param writer snapshot writer
+     * @param done   callback
      */
     void onSnapshotSave(SnapshotWriter writer, Closure done);
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/Snapshot.java
Patch:
@@ -38,7 +38,7 @@ public abstract class Snapshot extends Status {
      * Snapshot file prefix.
      */
     public static final String JRAFT_SNAPSHOT_PREFIX      = "snapshot_";
-    /** Snapshot uri scheme for remote peer*/
+    /** Snapshot uri scheme for remote peer */
     public static final String REMOTE_SNAPSHOT_URI_SCHEME = "remote://";
 
     /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Platform.java
Patch:
@@ -39,7 +39,9 @@ public static boolean isWindows() {
     }
 
     private static boolean isWindows0() {
-        boolean windows = SystemPropertyUtil.get("os.name", "").toLowerCase(Locale.US).contains("win");
+        final boolean windows = SystemPropertyUtil.get("os.name", "") //
+            .toLowerCase(Locale.US) //
+            .contains("win");
         if (windows) {
             LOG.debug("Platform: Windows");
         }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/DefaultRegionKVService.java
Patch:
@@ -449,10 +449,11 @@ public void handleKeyLockRequest(final KeyLockRequest request,
         try {
             checkRegionEpoch(request);
             final byte[] key = requireNonNull(request.getKey(), "lock.key");
+            final byte[] fencingKey = this.regionEngine.getRegion().getStartKey();
             final DistributedLock.Acquirer acquirer = requireNonNull(request.getAcquirer(), "lock.acquirer");
             requireNonNull(acquirer.getId(), "lock.id");
             requirePositive(acquirer.getLeaseMillis(), "lock.leaseMillis");
-            this.rawKVStore.tryLockWith(key, request.isKeepLease(), acquirer, new BaseKVStoreClosure() {
+            this.rawKVStore.tryLockWith(key, fencingKey, request.isKeepLease(), acquirer, new BaseKVStoreClosure() {
 
                 @Override
                 public void run(Status status) {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/RegionEngine.java
Patch:
@@ -85,7 +85,7 @@ public synchronized boolean init(final RegionEngineOptions opts) {
             return true;
         }
         this.regionOpts = Requires.requireNonNull(opts, "opts");
-        this.fsm = new KVStoreStateMachine(this.region.getId(), this.storeEngine);
+        this.fsm = new KVStoreStateMachine(this.region, this.storeEngine);
 
         // node options
         NodeOptions nodeOpts = opts.getNodeOptions();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVStore.java
Patch:
@@ -1165,7 +1165,7 @@ private void internalTryLockWith(final byte[] key, final boolean keepLease, fina
                 retryRunner);
         if (regionEngine != null) {
             if (ensureOnValidEpoch(region, regionEngine, closure)) {
-                getRawKVStore(regionEngine).tryLockWith(key, keepLease, acquirer, closure);
+                getRawKVStore(regionEngine).tryLockWith(key, region.getStartKey(), keepLease, acquirer, closure);
             }
         } else {
             final KeyLockRequest request = new KeyLockRequest();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/BatchRawKVStore.java
Patch:
@@ -85,7 +85,8 @@ public void batchTryLockWith(final KVStateOutputList kvStates) {
             final KVState kvState = kvStates.get(i);
             final KVOperation op = kvState.getOp();
             final Pair<Boolean, DistributedLock.Acquirer> acquirerPair = op.getAcquirerPair();
-            tryLockWith(op.getKey(), acquirerPair.getKey(), acquirerPair.getValue(), kvState.getDone());
+            tryLockWith(op.getKey(), op.getFencingKey(), acquirerPair.getKey(), acquirerPair.getValue(),
+                kvState.getDone());
         }
     }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/MetricsRawKVStore.java
Patch:
@@ -153,11 +153,11 @@ public void putIfAbsent(final byte[] key, final byte[] value, final KVStoreClosu
     }
 
     @Override
-    public void tryLockWith(final byte[] key, final boolean keepLease, final DistributedLock.Acquirer acquirer,
-                            final KVStoreClosure closure) {
+    public void tryLockWith(final byte[] key, final byte[] fencingKey, final boolean keepLease,
+                            final DistributedLock.Acquirer acquirer, final KVStoreClosure closure) {
         // 'keysCount' and 'bytesWritten' can't be provided with exact numbers, but I endured
         final KVStoreClosure c = metricsAdapter(closure, KEY_LOCK, 2, 0);
-        this.rawKVStore.tryLockWith(key, keepLease, acquirer, c);
+        this.rawKVStore.tryLockWith(key, fencingKey, keepLease, acquirer, c);
     }
 
     @Override

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RaftRawKVStore.java
Patch:
@@ -209,14 +209,14 @@ public void putIfAbsent(final byte[] key, final byte[] value, final KVStoreClosu
     }
 
     @Override
-    public void tryLockWith(final byte[] key, final boolean keepLease, final DistributedLock.Acquirer acquirer,
-                            final KVStoreClosure closure) {
+    public void tryLockWith(final byte[] key, final byte[] fencingKey, final boolean keepLease,
+                            final DistributedLock.Acquirer acquirer, final KVStoreClosure closure) {
         // The algorithm relies on the assumption that while there is no
         // synchronized clock across the processes, still the local time in
         // every process flows approximately at the same rate, with an error
         // which is small compared to the auto-release time of the lock.
         acquirer.setLockingTimestamp(Clock.defaultClock().getTime());
-        applyOperation(KVOperation.createKeyLockRequest(key, Pair.of(keepLease, acquirer)), closure);
+        applyOperation(KVOperation.createKeyLockRequest(key, fencingKey, Pair.of(keepLease, acquirer)), closure);
     }
 
     @Override

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RawKVStore.java
Patch:
@@ -154,8 +154,8 @@ void scan(final byte[] startKey, final byte[] endKey, final int limit, final boo
     /**
      * Tries to lock the specified key, must contain a timeout
      */
-    void tryLockWith(final byte[] key, final boolean keepLease, final DistributedLock.Acquirer acquirer,
-                     final KVStoreClosure closure);
+    void tryLockWith(final byte[] key, final byte[] fencingKey, final boolean keepLease,
+                     final DistributedLock.Acquirer acquirer, final KVStoreClosure closure);
 
     /**
      * Unlock the specified key with lock.

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/LocalLock.java
Patch:
@@ -47,7 +47,7 @@ protected Owner internalTryLock(final byte[] ctx) {
         final Acquirer acquirer = getAcquirer();
         acquirer.setContext(ctx);
         final KVStoreClosure closure = new TestClosure();
-        this.rawKVStore.tryLockWith(internalKey, false, acquirer, closure);
+        this.rawKVStore.tryLockWith(internalKey, internalKey, false, acquirer, closure);
         final Owner owner = (Owner) closure.getData();
         updateOwnerAndAcquirer(owner);
         return owner;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/core/BoltRaftClientService.java
Patch:
@@ -100,7 +100,7 @@ public Future<Message> getFile(Endpoint endpoint, GetFileRequest request, int ti
     @Override
     public Future<Message> installSnapshot(Endpoint endpoint, InstallSnapshotRequest request,
                                            RpcResponseClosure<InstallSnapshotResponse> done) {
-        return invokeWithDone(endpoint, request, done, rpcOptions.getRpcDefaultTimeout());
+        return invokeWithDone(endpoint, request, done, rpcOptions.getRpcInstallSnapshotTimeout());
     }
 
     @Override

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/Utils.java
Patch:
@@ -172,7 +172,7 @@ public static long getProcessId(final long fallback) {
     }
 
     /**
-     * Default init and expand buffer size, it can be set by -Draft.byte_buf.size=n, default 1024.
+     * Default init and expand buffer size, it can be set by -Djraft.byte_buf.size=n, default 1024.
      */
     public static final int RAFT_DATA_BUF_SIZE = Integer.parseInt(System.getProperty("jraft.byte_buf.size", "1024"));
 

File: jraft-core/src/test/java/com/alipay/sofa/jraft/util/AsciiCodecBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.common;
+package com.alipay.sofa.jraft.util;
 
 import java.util.concurrent.TimeUnit;
 
@@ -30,8 +30,6 @@
 import org.openjdk.jmh.runner.options.OptionsBuilder;
 import org.openjdk.jmh.runner.options.TimeValue;
 
-import com.alipay.sofa.jraft.util.AsciiStringUtil;
-
 /**
  * @author jiachun.fjc
  */

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/benchmark/BenchmarkUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.kv;
+package com.alipay.sofa.jraft.rhea.benchmark;
 
 import java.util.concurrent.ThreadLocalRandom;
 

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/benchmark/raw/BaseRawStoreBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.kv.raw;
+package com.alipay.sofa.jraft.rhea.benchmark.raw;
 
 import java.io.File;
 import java.io.IOException;

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/benchmark/raw/RawKVApproximateBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.kv.raw;
+package com.alipay.sofa.jraft.rhea.benchmark.raw;
 
 import java.util.concurrent.TimeUnit;
 
@@ -34,8 +34,8 @@
 
 import com.alipay.sofa.jraft.util.BytesUtil;
 
-import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.CONCURRENCY;
-import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.VALUE_BYTES;
+import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.CONCURRENCY;
+import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.VALUE_BYTES;
 
 /**
  * @author jiachun.fjc

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/benchmark/raw/SnapshotBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.kv.raw;
+package com.alipay.sofa.jraft.rhea.benchmark.raw;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -33,8 +33,8 @@
 import com.alipay.sofa.jraft.rhea.util.ZipUtil;
 import com.alipay.sofa.jraft.util.BytesUtil;
 
-import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.KEY_COUNT;
-import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.VALUE_BYTES;
+import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.KEY_COUNT;
+import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.VALUE_BYTES;
 
 /**
  * @author jiachun.fjc

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/benchmark/rhea/RheaBenchmarkCluster.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.kv.rhea;
+package com.alipay.sofa.jraft.rhea.benchmark.rhea;
 
 import java.io.File;
 import java.io.IOException;

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/util/VarIntsBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.benchmark.common;
+package com.alipay.sofa.jraft.rhea.util;
 
 import java.util.concurrent.TimeUnit;
 
@@ -30,8 +30,6 @@
 import org.openjdk.jmh.runner.options.OptionsBuilder;
 import org.openjdk.jmh.runner.options.TimeValue;
 
-import com.alipay.sofa.jraft.rhea.util.VarInts;
-
 /**
  * @author jiachun.fjc
  */

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -1192,7 +1192,7 @@ private static boolean onAppendEntriesReturned(ThreadId id, Inflight inflight, S
                 r.notifyOnCaughtUp(RaftError.EPERM.getNumber(), true);
                 r.destroy();
                 node.increaseTermTo(response.getTerm(), new Status(RaftError.EHIGHERTERMRESPONSE,
-                    "Leader receives higher term hearbeat_response from peer:%s", r.options.getPeerId()));
+                    "Leader receives higher term heartbeat_response from peer:%s", r.options.getPeerId()));
                 return false;
             }
             if (isLogDebugEnabled) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/snapshot/local/LocalSnapshotCopier.java
Patch:
@@ -42,7 +42,7 @@
 import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;
 import com.alipay.sofa.jraft.storage.snapshot.remote.RemoteFileCopier;
 import com.alipay.sofa.jraft.storage.snapshot.remote.Session;
-import com.alipay.sofa.jraft.util.ArrayDequeue;
+import com.alipay.sofa.jraft.util.ArrayDeque;
 import com.alipay.sofa.jraft.util.ByteBufferCollector;
 import com.alipay.sofa.jraft.util.Requires;
 import com.alipay.sofa.jraft.util.Utils;
@@ -222,7 +222,7 @@ private void loadMetaTable() throws InterruptedException {
 
     boolean filterBeforeCopy(LocalSnapshotWriter writer, SnapshotReader lastSnapshot) throws IOException {
         final Set<String> existingFiles = writer.listFiles();
-        final ArrayDequeue<String> toRemove = new ArrayDequeue<>();
+        final ArrayDeque<String> toRemove = new ArrayDeque<>();
         for (final String file : existingFiles) {
             if (this.remoteSnapshot.getFileMeta(file) == null) {
                 toRemove.add(file);

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/NodeTest.java
Patch:
@@ -338,7 +338,7 @@ private void readIndexRandom(final TestCluster cluster) {
 
                             @Override
                             public void run(Status status, long index, byte[] reqCtx) {
-                                assertTrue(status.isOk());
+                                assertTrue(status.toString(), status.isOk());
                                 assertTrue(index > 0);
                                 assertArrayEquals(requestContext, reqCtx);
                                 readLatch.countDown();

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReplicatorTest.java
Patch:
@@ -183,7 +183,7 @@ public void testOnRpcReturnedTermMismatch() {
             Utils.monotonicMs());
         Mockito.verify(this.node).increaseTermTo(
             2,
-            new Status(RaftError.EHIGHERTERMRESPONSE, "Leader receives higher term hearbeat_response from peer:%s",
+            new Status(RaftError.EHIGHERTERMRESPONSE, "Leader receives higher term heartbeat_response from peer:%s",
                 peerId));
         assertNull(r.id);
     }
@@ -428,7 +428,7 @@ public void testOnHeartbeatReturnedTermMismatch() {
         Replicator.onHeartbeatReturned(this.id, Status.OK(), request, response, Utils.monotonicMs());
         Mockito.verify(this.node).increaseTermTo(
             2,
-            new Status(RaftError.EHIGHERTERMRESPONSE, "Leader receives higher term hearbeat_response from peer:%s",
+            new Status(RaftError.EHIGHERTERMRESPONSE, "Leader receives higher term heartbeat_response from peer:%s",
                 peerId));
         assertNull(r.id);
     }

File: jraft-core/src/test/java/com/alipay/sofa/jraft/util/ArrayDequeTest.java
Patch:
@@ -22,11 +22,11 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-public class ArrayDequeueTest {
+public class ArrayDequeTest {
 
     @Test
     public void testPeekPoll() {
-        ArrayDequeue<Integer> list = new ArrayDequeue<>();
+        ArrayDeque<Integer> list = new ArrayDeque<>();
         for (int i = 0; i < 10; i++) {
             list.add(i);
         }

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/common/AsciiCodecBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.entity;
+package com.alipay.sofa.jraft.benchmark.common;
 
 import java.util.concurrent.TimeUnit;
 

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/common/Utf8CodecBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util;
+package com.alipay.sofa.jraft.benchmark.common;
 
 import java.nio.charset.StandardCharsets;
 import java.util.UUID;

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/common/VarIntsBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.util;
+package com.alipay.sofa.jraft.benchmark.common;
 
 import java.util.concurrent.TimeUnit;
 
@@ -30,6 +30,8 @@
 import org.openjdk.jmh.runner.options.OptionsBuilder;
 import org.openjdk.jmh.runner.options.TimeValue;
 
+import com.alipay.sofa.jraft.rhea.util.VarInts;
+
 /**
  * @author jiachun.fjc
  */

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/kv/BenchmarkUtil.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.benchmark;
+package com.alipay.sofa.jraft.benchmark.kv;
 
 import java.util.concurrent.ThreadLocalRandom;
 

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/kv/raw/BaseRawStoreBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.benchmark.raw;
+package com.alipay.sofa.jraft.benchmark.kv.raw;
 
 import java.io.File;
 import java.io.IOException;

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/kv/raw/RawKVApproximateBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.benchmark.raw;
+package com.alipay.sofa.jraft.benchmark.kv.raw;
 
 import java.util.concurrent.TimeUnit;
 
@@ -34,8 +34,8 @@
 
 import com.alipay.sofa.jraft.util.BytesUtil;
 
-import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.CONCURRENCY;
-import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.VALUE_BYTES;
+import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.CONCURRENCY;
+import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.VALUE_BYTES;
 
 /**
  * @author jiachun.fjc

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/kv/raw/SnapshotBenchmark.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.benchmark.raw;
+package com.alipay.sofa.jraft.benchmark.kv.raw;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -33,8 +33,8 @@
 import com.alipay.sofa.jraft.rhea.util.ZipUtil;
 import com.alipay.sofa.jraft.util.BytesUtil;
 
-import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.KEY_COUNT;
-import static com.alipay.sofa.jraft.rhea.benchmark.BenchmarkUtil.VALUE_BYTES;
+import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.KEY_COUNT;
+import static com.alipay.sofa.jraft.benchmark.kv.BenchmarkUtil.VALUE_BYTES;
 
 /**
  * @author jiachun.fjc

File: jraft-example/src/test/java/com/alipay/sofa/jraft/benchmark/kv/rhea/RheaBenchmarkCluster.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alipay.sofa.jraft.rhea.benchmark.rhea;
+package com.alipay.sofa.jraft.benchmark.kv.rhea;
 
 import java.io.File;
 import java.io.IOException;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/MemoryRawKVStore.java
Patch:
@@ -576,8 +576,8 @@ public void deleteRange(final byte[] startKey, final byte[] endKey, final KVStor
         final Timer.Context timeCtx = getTimeContext("DELETE_RANGE");
         try {
             final ConcurrentNavigableMap<byte[], byte[]> subMap = this.defaultDB.subMap(startKey, endKey);
-            for (final byte[] key : subMap.keySet()) {
-                this.defaultDB.remove(key);
+            if (!subMap.isEmpty()) {
+                subMap.clear();
             }
             setSuccess(closure, Boolean.TRUE);
         } catch (final Exception e) {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/rocks/support/RocksStatisticsCollector.java
Patch:
@@ -69,7 +69,7 @@ public void addStatsCollectorInput(final StatsCollectorInput input) {
      *                        killing the collection process.
      * @throws InterruptedException thrown if Threads are interrupted.
      */
-    public void shutDown(final int shutdownTimeout) throws InterruptedException {
+    public void shutdown(final int shutdownTimeout) throws InterruptedException {
         this.isRunning = false;
 
         this.executorService.shutdownNow();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/ReplicatorGroup.java
Patch:
@@ -93,7 +93,7 @@ public interface ReplicatorGroup {
     boolean waitCaughtUp(PeerId peer, long maxMargin, long dueTime, CatchUpClosure done);
 
     /**
-     * Get peer's last rpc send timestamp.
+     * Get peer's last rpc send timestamp (monotonic time in milliseconds).
      *
      * @param peer the peer of replicator
      */

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -88,7 +88,7 @@ public class Replicator implements ThreadId.OnError {
 
     // Cached the latest RPC in-flight request.
     private Inflight                         rpcInFly;
-    // Heartbeat RPC futgure
+    // Heartbeat RPC future
     private Future<Message>                  heartbeatInFly;
     // Timeout request RPC future
     private Future<Message>                  timeoutNowInFly;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -2506,7 +2506,7 @@ public Status transferLeadershipTo(PeerId peer) {
                 // elected. If no add_peer with this very |peer| is to be invoked ever
                 // after nor this peer is to be killed, this peer will spin in the voting
                 // procedure and make the each new leader stepped down when the peer
-                // reached vote timedout and it starts to vote (because it will increase
+                // reached vote timeout and it starts to vote (because it will increase
                 // the term of the group)
                 // To make things simple, refuse the operation and force users to
                 // invoke transfer_leadership_to after configuration changing is
@@ -2528,7 +2528,7 @@ public Status transferLeadershipTo(PeerId peer) {
                 }
             }
             if (peerId.equals(this.serverId)) {
-                LOG.info("Node {} transfered leadership to self.");
+                LOG.info("Node {} transferred leadership to self.");
                 return Status.OK();
             }
             if (!conf.contains(peerId)) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -1543,7 +1543,7 @@ private boolean transferLeadership(long logIndex) {
             this.sendTimeoutNow(true, false);
             return true;
         }
-        // Register log_index so that _on_rpc_returne trigger
+        // Register log_index so that _on_rpc_return trigger
         // _send_timeout_now if _next_index reaches log_index
         this.timeoutNowIndex = logIndex;
         id.unlock();

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/rhea/RheaKVTestCluster.java
Patch:
@@ -45,10 +45,9 @@ public class RheaKVTestCluster {
 
     public static String          DB_PATH        = "rhea_db";
     public static String          RAFT_DATA_PATH = "rhea_raft";
-    public static Long[]          REGION_IDS     = new Long[] { 1L, 2L, 3L };
+    public static Long[]          REGION_IDS     = new Long[] { 1L, 2L };
 
-    private static final String[] CONF           = { "/conf/rhea_test_cluster_1.yaml",
-            "/conf/rhea_test_cluster_2.yaml", "/conf/rhea_test_cluster_3.yaml" };
+    private static final String[] CONF           = { "/conf/rhea_test_cluster_1.yaml", "/conf/rhea_test_cluster_2.yaml" };
 
     private List<RheaKVStore>     stores         = new CopyOnWriteArrayList<>();
 

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/impl/core/AppendEntriesRequestProcessor.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.Executor;
 
-import io.netty.util.concurrent.DefaultEventExecutor;
-
 import org.apache.commons.lang.StringUtils;
 
 import com.alipay.remoting.AsyncContext;
@@ -41,6 +39,8 @@
 import com.alipay.sofa.jraft.util.Utils;
 import com.google.protobuf.Message;
 
+import io.netty.util.concurrent.DefaultEventExecutor;
+
 /**
  * Append entries request processor.
  *
@@ -396,7 +396,7 @@ public void onEvent(String remoteAddr, Connection conn) {
                 }
             }
         } else {
-            LOG.error("Fail to parse peer {}", remoteAddr);
+            LOG.info("Connection disconnected: {}", remoteAddr);
         }
     }
 }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -445,9 +445,9 @@ void installSnapshot() {
             id.unlock();
             return;
         }
-        Requires.requireTrue(this.reader == null);
         boolean doUnlock = true;
         try {
+            Requires.requireTrue(this.reader == null);
             reader = options.getSnapshotStorage().open();
             if (reader == null) {
                 final NodeImpl node = options.getNode();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/JRaftUtils.java
Patch:
@@ -68,8 +68,8 @@ public static Executor createExecutor(final String prefix, int number) {
         if (number <= 0) {
             return null;
         }
-        return ThreadPoolUtil.newThreadPool(prefix, true, number, number, 60L,
-                new SynchronousQueue<>(), createThreadFactory(prefix));
+        return ThreadPoolUtil.newThreadPool(prefix, true, number, number, 60L, new SynchronousQueue<>(),
+            createThreadFactory(prefix));
     }
 
     /**

File: jraft-core/src/main/java/com/alipay/sofa/jraft/conf/ConfigurationManager.java
Patch:
@@ -88,8 +88,8 @@ public ConfigurationEntry getLastConfiguration() {
     public ConfigurationEntry get(long lastIncludedIndex) {
         if (this.configurations.isEmpty()) {
             Requires.requireTrue(lastIncludedIndex >= this.snapshot.getId().getIndex(),
-                    "lastIncludedIndex %d is less than snapshot index %d", lastIncludedIndex,
-                    this.snapshot.getId().getIndex());
+                "lastIncludedIndex %d is less than snapshot index %d", lastIncludedIndex, this.snapshot.getId()
+                    .getIndex());
             return snapshot;
         }
         ListIterator<ConfigurationEntry> it = this.configurations.listIterator();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/BallotBox.java
Patch:
@@ -49,7 +49,7 @@ public class BallotBox implements Lifecycle<BallotBoxOptions> {
     private FSMCaller                  waiter;
     private ClosureQueue               closureQueue;
     private final StampedLock          stampedLock        = new StampedLock();
-    private long                       lastCommittedIndex =  0;
+    private long                       lastCommittedIndex = 0;
     private long                       pendingIndex;
     private final ArrayDequeue<Ballot> pendingMetaQueue   = new ArrayDequeue<>();
 
@@ -227,8 +227,8 @@ public boolean setLastCommittedIndex(long lastCommittedIndex) {
         try {
             if (pendingIndex != 0 || !pendingMetaQueue.isEmpty()) {
                 Requires.requireTrue(lastCommittedIndex < this.pendingIndex,
-                    "Node changes to leader, pendingIndex=%d, param lastCommittedIndex=%d",
-                    pendingIndex,lastCommittedIndex);
+                    "Node changes to leader, pendingIndex=%d, param lastCommittedIndex=%d", pendingIndex,
+                    lastCommittedIndex);
                 return false;
             }
             if (lastCommittedIndex < this.lastCommittedIndex) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/CliServiceImpl.java
Patch:
@@ -386,9 +386,9 @@ public List<PeerId> getPeers(String groupId, Configuration conf) {
         rb.setGroupId(groupId);
         rb.setLeaderId(leaderId.toString());
         try {
-            final Message result = cliClientService.getPeers(leaderId.getEndpoint(), rb.build(), null)
-                    .get(cliOptions.getTimeoutMs() <= 0 ? this.cliOptions.getRpcDefaultTimeout()
-                        : cliOptions.getTimeoutMs(), TimeUnit.MILLISECONDS);
+            final Message result = cliClientService.getPeers(leaderId.getEndpoint(), rb.build(), null).get(
+                cliOptions.getTimeoutMs() <= 0 ? this.cliOptions.getRpcDefaultTimeout() : cliOptions.getTimeoutMs(),
+                TimeUnit.MILLISECONDS);
             if (result instanceof GetPeersResponse) {
                 final GetPeersResponse resp = (GetPeersResponse) result;
                 final List<PeerId> peerIdList = new ArrayList<>();

File: jraft-core/src/main/java/com/alipay/sofa/jraft/rpc/ProtobufMsgFactory.java
Patch:
@@ -50,8 +50,8 @@ public class ProtobufMsgFactory {
 
     static {
         try {
-            FileDescriptorSet descriptorSet = FileDescriptorSet
-                    .parseFrom(ProtoBufFile.class.getResourceAsStream("/raft.desc"));
+            FileDescriptorSet descriptorSet = FileDescriptorSet.parseFrom(ProtoBufFile.class
+                .getResourceAsStream("/raft.desc"));
             List<FileDescriptor> resolveFDs = new ArrayList<>();
             for (FileDescriptorProto fdp : descriptorSet.getFileList()) {
 
@@ -63,7 +63,7 @@ public class ProtobufMsgFactory {
                 for (Descriptor descriptor : fd.getMessageTypes()) {
 
                     String className = fdp.getOptions().getJavaPackage() + "."
-                            + fdp.getOptions().getJavaOuterClassname() + "$" + descriptor.getName();
+                                       + fdp.getOptions().getJavaOuterClassname() + "$" + descriptor.getName();
                     Class<?> clazz = Class.forName(className);
                     MethodHandle methodHandle = MethodHandles.lookup().findStatic(clazz, "parseFrom",
                         methodType(clazz, byte[].class));

File: jraft-core/src/main/java/com/alipay/sofa/jraft/storage/io/ProtoBufFile.java
Patch:
@@ -64,8 +64,7 @@ public <T extends Message> T load() throws IOException {
         }
 
         byte[] lenBytes = new byte[4];
-        try (FileInputStream fin = new FileInputStream(file);
-                BufferedInputStream input = new BufferedInputStream(fin)) {
+        try (FileInputStream fin = new FileInputStream(file); BufferedInputStream input = new BufferedInputStream(fin)) {
             readBytes(lenBytes, input);
             int len = Bits.getInt(lenBytes, 0);
             if (len <= 0) {

File: jraft-core/src/test/java/com/alipay/sofa/jraft/core/ReadOnlyServiceTest.java
Patch:
@@ -261,8 +261,7 @@ public void run(Status status, long index, byte[] reqCtx) {
         state.setIndex(1);
         states.add(state);
         final ReadIndexStatus readIndexStatus = new ReadIndexStatus(states, null, 1);
-        this.readOnlyServiceImpl.getPendingNotifyStatus().put(1L,
-            Arrays.asList(readIndexStatus));
+        this.readOnlyServiceImpl.getPendingNotifyStatus().put(1L, Arrays.asList(readIndexStatus));
 
         this.readOnlyServiceImpl.onApplied(2);
         latch.await();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/KVCommandProcessor.java
Patch:
@@ -62,8 +62,8 @@ public KVCommandProcessor(Class<T> reqClazz, StoreEngine storeEngine) {
     @Override
     public void handleRequest(final BizContext bizCtx, final AsyncContext asyncCtx, final T request) {
         Requires.requireNonNull(request, "request");
-        final RequestProcessClosure<BaseRequest, BaseResponse<?>> closure =
-                new RequestProcessClosure<>(request, bizCtx, asyncCtx);
+        final RequestProcessClosure<BaseRequest, BaseResponse<?>> closure = new RequestProcessClosure<>(request,
+            bizCtx, asyncCtx);
         final RegionKVService regionKVService = this.storeEngine.getRegionKVService(request.getRegionId());
         if (regionKVService == null) {
             final NoRegionFoundResponse noRegion = new NoRegionFoundResponse();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaIterator.java
Patch:
@@ -41,7 +41,8 @@ public class DefaultRheaIterator implements RheaIterator<KVEntry> {
 
     private byte[]                      cursorKey;
 
-    public DefaultRheaIterator(DefaultRheaKVStore rheaKVStore, byte[] startKey, byte[] endKey, int bufSize, boolean readOnlySafe) {
+    public DefaultRheaIterator(DefaultRheaKVStore rheaKVStore, byte[] startKey, byte[] endKey, int bufSize,
+                               boolean readOnlySafe) {
         this.rheaKVStore = rheaKVStore;
         this.pdClient = rheaKVStore.getPlacementDriverClient();
         this.startKey = BytesUtil.nullToEmpty(startKey);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/DefaultRheaKVRpcService.java
Patch:
@@ -172,8 +172,7 @@ private ThreadPoolExecutor createRpcCallbackExecutor(final int corePoolSize, fin
             return null;
         }
         final String name = "rpc-callback";
-        return ThreadPoolUtil.newThreadPool(name, true, corePoolSize, maximumPoolSize, 120L,
-                new ArrayBlockingQueue<>(queueCapacity), new NamedThreadFactory(name, true),
-                new CallerRunsPolicyWithReport(name));
+        return ThreadPoolUtil.newThreadPool(name, true, corePoolSize, maximumPoolSize, 120L, new ArrayBlockingQueue<>(
+            queueCapacity), new NamedThreadFactory(name, true), new CallerRunsPolicyWithReport(name));
     }
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/DefaultPlacementDriverRpcService.java
Patch:
@@ -133,8 +133,7 @@ private ThreadPoolExecutor createRpcCallbackExecutor(final int corePoolSize, fin
             return null;
         }
         final String name = "pd-rpc-callback";
-        return ThreadPoolUtil.newThreadPool(name, true, corePoolSize, maximumPoolSize, 120L,
-                new ArrayBlockingQueue<>(queueCapacity), new NamedThreadFactory(name, true),
-                new CallerRunsPolicyWithReport(name));
+        return ThreadPoolUtil.newThreadPool(name, true, corePoolSize, maximumPoolSize, 120L, new ArrayBlockingQueue<>(
+            queueCapacity), new NamedThreadFactory(name, true), new CallerRunsPolicyWithReport(name));
     }
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/HeartbeatSender.java
Patch:
@@ -99,8 +99,7 @@ public synchronized boolean init(final HeartbeatOptions opts) {
         }
         final String name = "heartbeat-callback";
         this.heartbeatRpcCallbackExecutor = ThreadPoolUtil.newThreadPool(name, true, 4, 4, 120L,
-                new ArrayBlockingQueue<>(1024), new NamedThreadFactory(name, true),
-                new DiscardOldPolicyWithReport(name));
+            new ArrayBlockingQueue<>(1024), new NamedThreadFactory(name, true), new DiscardOldPolicyWithReport(name));
         final long storeHeartbeatIntervalSeconds = opts.getStoreHeartbeatIntervalSeconds();
         final long regionHeartbeatIntervalSeconds = opts.getRegionHeartbeatIntervalSeconds();
         if (storeHeartbeatIntervalSeconds <= 0) {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Lists.java
Patch:
@@ -93,9 +93,8 @@ public static <E> ArrayList<E> newArrayListWithCapacity(final int initialArraySi
      * changes to {@code fromList} will be reflected in the returned list and vice versa.
      */
     public static <F, T> List<T> transform(final List<F> fromList, final Function<? super F, ? extends T> function) {
-        return (fromList instanceof RandomAccess)
-                ? new TransformingRandomAccessList<>(fromList, function)
-                : new TransformingSequentialList<>(fromList, function);
+        return (fromList instanceof RandomAccess) ? new TransformingRandomAccessList<>(fromList, function)
+            : new TransformingSequentialList<>(fromList, function);
     }
 
     private static class TransformingRandomAccessList<F, T> extends AbstractList<T> implements RandomAccess,

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/StackTraceUtil.java
Patch:
@@ -32,12 +32,11 @@ public static String stackTrace(final Throwable t) {
             return NULL_STRING;
         }
 
-        try (final ByteArrayOutputStream out = new ByteArrayOutputStream();
-             final PrintStream ps = new PrintStream(out)) {
+        try (final ByteArrayOutputStream out = new ByteArrayOutputStream(); final PrintStream ps = new PrintStream(out)) {
             t.printStackTrace(ps);
             ps.flush();
             return new String(out.toByteArray());
-        } catch (final IOException e) {
+        } catch (final IOException ignored) {
             // ignored
         }
         return NULL_STRING;

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/ZipUtil.java
Patch:
@@ -36,8 +36,7 @@
  */
 public final class ZipUtil {
 
-    public static void compressDirectoryToZipFile(final String rootDir,
-                                                  final String sourceDir,
+    public static void compressDirectoryToZipFile(final String rootDir, final String sourceDir,
                                                   final ZipOutputStream zos) throws IOException {
         final String dir = Paths.get(rootDir, sourceDir).toString();
         final File[] files = Requires.requireNonNull(new File(dir).listFiles(), "files");
@@ -46,7 +45,8 @@ public static void compressDirectoryToZipFile(final String rootDir,
                 compressDirectoryToZipFile(rootDir, Paths.get(sourceDir, file.getName()).toString(), zos);
             } else {
                 zos.putNextEntry(new ZipEntry(Paths.get(sourceDir, file.getName()).toString()));
-                try (final FileInputStream in = new FileInputStream(Paths.get(rootDir, sourceDir, file.getName()).toString())) {
+                try (final FileInputStream in = new FileInputStream(Paths.get(rootDir, sourceDir, file.getName())
+                    .toString())) {
                     IOUtils.copy(in, zos);
                 }
             }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/AbstractRejectedExecutionHandler.java
Patch:
@@ -53,7 +53,8 @@ public void dumpJvmInfoIfNeeded() {
         if (this.dumpNeeded.getAndSet(false)) {
             final String now = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
             final String name = this.threadPoolName + "_" + now;
-            try (final FileOutputStream fileOutput = new FileOutputStream(new File(this.dumpPrefixName + "_dump_" + name + ".log"))) {
+            try (final FileOutputStream fileOutput = new FileOutputStream(new File(this.dumpPrefixName + "_dump_"
+                                                                                   + name + ".log"))) {
 
                 final List<String> stacks = JvmTools.jStack();
                 for (final String s : stacks) {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/benchmark/raw/SnapshotBenchmark.java
Patch:
@@ -199,8 +199,8 @@ private LocalFileMetaOutter.LocalFileMeta doSlowSnapshotSave(final String snapsh
 
     private void doCompressSnapshot(final String path) {
         try {
-            try (final ZipOutputStream out = new ZipOutputStream(
-                    new FileOutputStream(path + File.separator + SNAPSHOT_ARCHIVE))) {
+            try (final ZipOutputStream out = new ZipOutputStream(new FileOutputStream(path + File.separator
+                                                                                      + SNAPSHOT_ARCHIVE))) {
                 ZipUtil.compressDirectoryToZipFile(path, SNAPSHOT_DIR, out);
             }
         } catch (final Throwable t) {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/memorydb/MemoryKVStoreTest.java
Patch:
@@ -541,8 +541,8 @@ public boolean doSnapshotLoad(final String path, final LocalFileMeta meta) {
 
     private void doCompressSnapshot(final String path) {
         try {
-            try (final ZipOutputStream out = new ZipOutputStream(
-                    new FileOutputStream(path + File.separator + SNAPSHOT_ARCHIVE))) {
+            try (final ZipOutputStream out = new ZipOutputStream(new FileOutputStream(path + File.separator
+                                                                                      + SNAPSHOT_ARCHIVE))) {
                 ZipUtil.compressDirectoryToZipFile(path, SNAPSHOT_DIR, out);
             }
         } catch (final Throwable t) {

File: jraft-rheakv/rheakv-core/src/test/java/com/alipay/sofa/jraft/rhea/storage/rocksdb/RocksKVStoreTest.java
Patch:
@@ -495,8 +495,8 @@ public boolean doSnapshotLoad(final String path, final LocalFileMeta meta) {
 
     private void doCompressSnapshot(final String path) {
         try {
-            try (final ZipOutputStream out = new ZipOutputStream(
-                    new FileOutputStream(path + File.separator + SNAPSHOT_ARCHIVE))) {
+            try (final ZipOutputStream out = new ZipOutputStream(new FileOutputStream(path + File.separator
+                                                                                      + SNAPSHOT_ARCHIVE))) {
                 ZipUtil.compressDirectoryToZipFile(path, SNAPSHOT_DIR, out);
             }
         } catch (final Throwable t) {

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/DefaultPlacementDriverService.java
Patch:
@@ -101,8 +101,8 @@ public synchronized boolean init(final PlacementDriverServerOptions opts) {
         if (corePoolSize > 0 && maximumPoolSize > 0) {
             final String name = "pipeline-executor";
             final ThreadPoolExecutor threadPool = ThreadPoolUtil.newThreadPool(name, false, corePoolSize,
-                    maximumPoolSize, 120L, new ArrayBlockingQueue<>(1024),
-                    new NamedThreadFactory(name, true), new CallerRunsPolicyWithReport(name));
+                maximumPoolSize, 120L, new ArrayBlockingQueue<>(1024), new NamedThreadFactory(name, true),
+                new CallerRunsPolicyWithReport(name));
             this.pipelineInvoker = new DefaultHandlerInvoker(threadPool);
         }
         this.pipeline = new DefaultPipeline() //

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/PlacementDriverProcessor.java
Patch:
@@ -68,8 +68,8 @@ public PlacementDriverProcessor(Class<T> reqClazz, PlacementDriverService placem
     @Override
     public void handleRequest(BizContext bizCtx, AsyncContext asyncCtx, T request) {
         Requires.requireNonNull(request, "request");
-        final RequestProcessClosure<BaseRequest, BaseResponse> closure =
-                new RequestProcessClosure<>(request, bizCtx, asyncCtx);
+        final RequestProcessClosure<BaseRequest, BaseResponse> closure = new RequestProcessClosure<>(request, bizCtx,
+            asyncCtx);
         switch (request.magic()) {
             case BaseRequest.STORE_HEARTBEAT:
                 this.placementDriverService.handleStoreHeartbeatRequest((StoreHeartbeatRequest) request, closure);

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/pipeline/event/PingEvent.java
Patch:
@@ -28,8 +28,8 @@
  */
 public abstract class PingEvent<T> extends InboundMessageEvent<T> {
 
-    private final Collection<Instruction>   instructions        = new LinkedBlockingDeque<>();
-    private final MetadataStore             metadataStore;
+    private final Collection<Instruction> instructions = new LinkedBlockingDeque<>();
+    private final MetadataStore           metadataStore;
 
     public PingEvent(T message, MetadataStore metadataStore) {
         super(message);

File: jraft-test/src/main/java/com/alipay/sofa/jraft/test/atomic/command/SlotsResponseCommand.java
Patch:
@@ -21,7 +21,7 @@
 
 public class SlotsResponseCommand extends BooleanCommand implements Serializable {
     private static final long     serialVersionUID = -3155350383161976585L;
-    private TreeMap<Long, String> map = new TreeMap<>();
+    private TreeMap<Long, String> map              = new TreeMap<>();
 
     public TreeMap<Long, String> getMap() {
         return this.map;

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/Replicator.java
Patch:
@@ -1071,7 +1071,7 @@ static void onRpcReturned(ThreadId id, RequestType reqType, Status status, Messa
                     r.resetInflights();
                     r.state = State.Probe;
                     continueSendEntries = false;
-                    r.block(Utils.monotonicMs(), RaftError.EREQUEST.getNumber());
+                    r.block(Utils.nowMs(), RaftError.EREQUEST.getNumber());
                     return;
                 }
                 try {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -1848,7 +1848,7 @@ private void afterShutdown() {
         List<Closure> savedDones = null;
         writeLock.lock();
         try {
-            if (this.shutdownContinuations != null) {
+            if (!this.shutdownContinuations.isEmpty()) {
                 savedDones = new ArrayList<>(this.shutdownContinuations);
             }
             if (logStorage != null) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/StateMachineAdapter.java
Patch:
@@ -89,7 +89,7 @@ public void onStartFollowing(LeaderChangeContext ctx) {
         LOG.info("onStartFollowing: {}", ctx);
     }
 
-    @SuppressWarnings("all")
+    @SuppressWarnings("SameParameterValue")
     private void runClosure(Closure done, String methodName) {
         done.run(new Status(-1, "%s doesn't implement %s", getClassName(), methodName));
     }
@@ -98,7 +98,7 @@ private String getClassName() {
         return this.getClass().getName();
     }
 
-    @SuppressWarnings("all")
+    @SuppressWarnings("SameParameterValue")
     private void error(String methodName) {
         this.error(methodName, "");
     }

File: jraft-core/src/main/java/com/alipay/sofa/jraft/util/timer/HashedWheelTimer.java
Patch:
@@ -572,7 +572,6 @@ void remove() {
             }
         }
 
-        @SuppressWarnings("all")
         public boolean compareAndSetState(int expected, int state) {
             return STATE_UPDATER.compareAndSet(this, expected, state);
         }

File: jraft-core/src/main/java/com/google/protobuf/ZeroByteStringHelper.java
Patch:
@@ -48,7 +48,7 @@ public class ZeroByteStringHelper {
         // Try to get defineAnonymousClass method handle.
         try {
             final Class<?> clazz = ByteString.class;
-            final Method method = clazz.getDeclaredMethod("wrap", (new byte[0]).getClass());
+            final Method method = clazz.getDeclaredMethod("wrap", byte[].class);
             if (method != null) {
                 WRAP_BYTES_HANDLE = MethodHandles.lookup().unreflect(method);
             }

File: jraft-example/src/main/java/com/alipay/sofa/jraft/benchmark/server/BenchmarkServer.java
Patch:
@@ -52,7 +52,7 @@ public static void main(final String[] args) {
                 .build() //
                 .start(30, TimeUnit.SECONDS);
 
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> node.stop()));
+        Runtime.getRuntime().addShutdownHook(new Thread(node::stop));
         LOG.info("BenchmarkServer start OK, options: {}", opts);
     }
 }

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/counter/IncrementAndAddClosure.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class IncrementAndAddClosure implements Closure {
 
-    @SuppressWarnings("all")
+    @SuppressWarnings({ "FieldCanBeLocal", "unused" })
     private CounterServer          counterServer;
     private IncrementAndGetRequest request;
     private ValueResponse          response;

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/Server1.java
Patch:
@@ -51,7 +51,7 @@ public static void main(final String[] args) throws Exception {
         System.out.println(opts);
         final Node node = new Node(opts);
         node.start();
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> node.stop()));
+        Runtime.getRuntime().addShutdownHook(new Thread(node::stop));
         System.out.println("server1 start OK");
     }
 }

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/Server2.java
Patch:
@@ -51,7 +51,7 @@ public static void main(final String[] args) throws Exception {
         System.out.println(opts);
         final Node node = new Node(opts);
         node.start();
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> node.stop()));
+        Runtime.getRuntime().addShutdownHook(new Thread(node::stop));
         System.out.println("server2 start OK");
     }
 }

File: jraft-example/src/main/java/com/alipay/sofa/jraft/example/rheakv/Server3.java
Patch:
@@ -51,7 +51,7 @@ public static void main(final String[] args) throws Exception {
         System.out.println(opts);
         final Node node = new Node(opts);
         node.start();
-        Runtime.getRuntime().addShutdownHook(new Thread(() -> node.stop()));
+        Runtime.getRuntime().addShutdownHook(new Thread(node::stop));
         System.out.println("server3 start OK");
     }
 }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/DefaultRegionKVService.java
Patch:
@@ -587,15 +587,15 @@ private static <T> List<T> requireNonEmpty(final List<T> target, final String me
         return target;
     }
 
-    @SuppressWarnings("all")
+    @SuppressWarnings("SameParameterValue")
     private static int requirePositive(final int value, final String message) {
         if (value <= 0) {
             throw new InvalidParameterException(message);
         }
         return value;
     }
 
-    @SuppressWarnings("all")
+    @SuppressWarnings("SameParameterValue")
     private static long requirePositive(final long value, final String message) {
         if (value <= 0) {
             throw new InvalidParameterException(message);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/RegionEngine.java
Patch:
@@ -138,7 +138,7 @@ public synchronized boolean init(final RegionEngineOptions opts) {
                     final ScheduledExecutorService scheduler = this.storeEngine.getMetricsScheduler();
                     // start raft node metrics reporter
                     this.regionMetricsReporter = Slf4jReporter.forRegistry(metricRegistry) //
-                        .prefixedWith("region_" + String.valueOf(this.region.getId())) //
+                        .prefixedWith("region_" + this.region.getId()) //
                         .withLoggingLevel(Slf4jReporter.LoggingLevel.INFO) //
                         .outputTo(LOG) //
                         .scheduleOn(scheduler) //

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngine.java
Patch:
@@ -557,7 +557,7 @@ private void startMetricReporters(final long metricsReportPeriod) {
             }
             // start kv store metrics reporter
             this.kvMetricsReporter = Slf4jReporter.forRegistry(KVMetrics.metricRegistry()) //
-                .prefixedWith("store_" + String.valueOf(this.storeId)) //
+                .prefixedWith("store_" + this.storeId) //
                 .withLoggingLevel(Slf4jReporter.LoggingLevel.INFO) //
                 .outputTo(LOG) //
                 .scheduleOn(this.metricsScheduler) //

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/StoreEngineHelper.java
Patch:
@@ -115,7 +115,7 @@ private static ExecutorService newPool(final int coreThreads, final int maxThrea
         return newPool(coreThreads, maxThreads, name, defaultHandler);
     }
 
-    @SuppressWarnings("all")
+    @SuppressWarnings("SameParameterValue")
     private static ExecutorService newPool(final int coreThreads, final int maxThreads, final String name,
                                            final BlockingQueue<Runnable> workQueue) {
         final RejectedExecutionHandler defaultHandler = new CallerRunsPolicyWithReport(name, name);

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/client/pd/AbstractPlacementDriverClient.java
Patch:
@@ -323,7 +323,7 @@ public Endpoint getLuckyPeer(final long regionId, final boolean forceRefresh, fi
         for (int i = 0; i < size; i++) {
             final PeerId candidate = balancer.select(peerList);
             final Endpoint luckyOne = candidate.getEndpoint();
-            if (unExpect == null || !luckyOne.equals(unExpect)) {
+            if (!luckyOne.equals(unExpect)) {
                 return luckyOne;
             }
         }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/errors/ApiExceptionHelper.java
Patch:
@@ -23,8 +23,9 @@ public final class ApiExceptionHelper {
 
     // require refresh region route table
     public static boolean isInvalidEpoch(final Throwable cause) {
-        return cause != null
-               && (cause instanceof InvalidRegionMembershipException || cause instanceof InvalidRegionVersionException || cause instanceof InvalidRegionEpochException);
+        return cause instanceof InvalidRegionMembershipException //
+               || cause instanceof InvalidRegionVersionException //
+               || cause instanceof InvalidRegionEpochException;
     }
 
     private ApiExceptionHelper() {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/Serializers.java
Patch:
@@ -41,6 +41,7 @@ public static Serializer getDefault() {
         return serializers[PROTO_STUFF];
     }
 
+    @SuppressWarnings("SameParameterValue")
     private static void addSerializer(final int idx, final Serializer serializer) {
         if (serializers.length <= idx) {
             final Serializer[] newSerializers = new Serializer[idx + 5];

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/serialization/impl/protostuff/io/NioBufOutput.java
Patch:
@@ -206,6 +206,7 @@ public void writeString(int fieldNumber, CharSequence value, boolean repeated) t
 
     @Override
     public void writeBytes(int fieldNumber, ByteString value, boolean repeated) throws IOException {
+        assert byteStringBytesGetter != null;
         writeByteArray(fieldNumber, byteStringBytesGetter.get(value), repeated);
     }
 

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/KVOperation.java
Patch:
@@ -285,7 +285,6 @@ public void setAcquirerPair(Pair<Boolean, DistributedLock.Acquirer> acquirerPair
         this.attach = acquirerPair;
     }
 
-    @SuppressWarnings("unchecked")
     public DistributedLock.Acquirer getAcquirer() {
         return DistributedLock.Acquirer.class.cast(this.attach);
     }

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/MemoryRawKVStore.java
Patch:
@@ -539,6 +539,7 @@ public void releaseLockWith(final byte[] key, final DistributedLock.Acquirer acq
         }
     }
 
+    @SuppressWarnings("SameParameterValue")
     private long getNextFencingToken(final byte[] fencingKey) {
         final Timer.Context timeCtx = getTimeContext("FENCING_TOKEN");
         try {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/storage/RocksRawKVStore.java
Patch:
@@ -852,6 +852,7 @@ public void releaseLockWith(final byte[] key, final DistributedLock.Acquirer acq
         }
     }
 
+    @SuppressWarnings("SameParameterValue")
     private long getNextFencingToken(final byte[] fencingKey) throws RocksDBException {
         final Timer.Context timeCtx = getTimeContext("FENCING_TOKEN");
         final Lock readLock = this.readWriteLock.readLock();

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/RecycleUtil.java
Patch:
@@ -27,7 +27,7 @@ public final class RecycleUtil {
      * Recycle designated instance.
      */
     public static boolean recycle(final Object obj) {
-        return obj != null && obj instanceof Recyclable && ((Recyclable) obj).recycle();
+        return obj instanceof Recyclable && ((Recyclable) obj).recycle();
     }
 
     private RecycleUtil() {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/Strings.java
Patch:
@@ -142,7 +142,7 @@ public static String[] split(final String str, final char separator, final boole
         if (match || preserveAllTokens) {
             list.add(str.substring(start, i));
         }
-        return list.toArray(new String[list.size()]);
+        return list.toArray(new String[0]);
     }
 
     private static final String[] EMPTY_STRING_ARRAY = new String[0];

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/UniqueIdUtil.java
Patch:
@@ -71,7 +71,7 @@ private static String getHexProcessId(int pid) {
         }
         if (pid > 65535) {
             String strPid = Integer.toString(pid);
-            strPid = strPid.substring(strPid.length() - 4, strPid.length());
+            strPid = strPid.substring(strPid.length() - 4);
             pid = Integer.parseInt(strPid);
         }
         final StringBuilder buf = new StringBuilder(Integer.toHexString(pid));
@@ -133,6 +133,7 @@ private static String getIp16(final String ip) {
         return buf.toString();
     }
 
+    @SuppressWarnings("SameParameterValue")
     private static String getId(final String ip16, final long timestamp, final long nextId) {
         return StringBuilderHelper.get() //
             .append(ip16) //

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/collection/NonBlockingHashMapLong.java
Patch:
@@ -617,6 +617,7 @@ boolean CAS_newchm(CHM newchm) {
 
         // --- key,val -------------------------------------------------------------
         // Access K,V for a given idx
+        @SuppressWarnings("SameParameterValue")
         private boolean CAS_key(int idx, long old, long key) {
             return unsafe.compareAndSwapLong(_keys, rawIndex(_keys, idx), old, key);
         }

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/ClusterStatsManager.java
Patch:
@@ -95,7 +95,7 @@ public void addOrUpdateLeader(final long storeId, final long regionId) {
     public Pair<Set<Long /* storeId */>, Integer /* leaderCount */> findModelWorkerStores(final int above) {
         final Set<Map.Entry<Long, Set<Long>>> values = this.leaderTable.entrySet();
         if (values.isEmpty()) {
-            return Pair.of(Collections.<Long>emptySet(), 0);
+            return Pair.of(Collections.emptySet(), 0);
         }
         final Map.Entry<Long, Set<Long>> modelWorker = Collections.max(values, (o1, o2) -> {
             final int o1Val = o1.getValue() == null ? 0 : o1.getValue().size();
@@ -104,7 +104,7 @@ public void addOrUpdateLeader(final long storeId, final long regionId) {
         });
         final int maxLeaderCount = modelWorker.getValue().size();
         if (maxLeaderCount <= above) {
-            return Pair.of(Collections.<Long>emptySet(), maxLeaderCount);
+            return Pair.of(Collections.emptySet(), maxLeaderCount);
         }
         final Set<Long> modelWorkerStoreIds = new HashSet<>();
         for (final Map.Entry<Long, Set<Long>> entry : values) {

File: jraft-rheakv/rheakv-pd/src/main/java/com/alipay/sofa/jraft/rhea/DefaultMetadataStore.java
Patch:
@@ -107,7 +107,7 @@ public Sequence getNextSequence() {
                     storeSequence = newStoreSequence;
                 }
             }
-            final Long newStoreId = storeSequence.next();
+            final long newStoreId = storeSequence.next();
             final byte[] newBytesVal = new byte[8];
             Bits.putLong(newBytesVal, 0, newStoreId);
             final byte[] oldBytesVal = this.rheaKVStore.bPutIfAbsent(storeIdKey, newBytesVal);

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/ReadOnlyServiceImpl.java
Patch:
@@ -275,7 +275,7 @@ public void onApplied(long appliedIndex) {
             // Find all statuses that log index less than or equal to appliedIndex.
             final Map<Long, List<ReadIndexStatus>> statuses = this.pendingNotifyStatus.headMap(appliedIndex, true);
             if (statuses != null) {
-                pendingStatuses = new ArrayList<>(statuses.size() * 10);
+                pendingStatuses = new ArrayList<>(statuses.size() << 1);
 
                 final Iterator<Map.Entry<Long, List<ReadIndexStatus>>> it = statuses.entrySet().iterator();
                 while (it.hasNext()) {

File: jraft-rheakv/rheakv-core/src/main/java/com/alipay/sofa/jraft/rhea/util/concurrent/AbstractRejectedExecutionHandler.java
Patch:
@@ -27,9 +27,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.alipay.sofa.jraft.rhea.util.Constants;
 import com.alipay.sofa.jraft.rhea.util.JvmTools;
 import com.alipay.sofa.jraft.rhea.util.StackTraceUtil;
+import com.alipay.sofa.jraft.util.Utils;
 
 /**
  *
@@ -57,12 +57,12 @@ public void dumpJvmInfoIfNeeded() {
 
                 final List<String> stacks = JvmTools.jStack();
                 for (final String s : stacks) {
-                    fileOutput.write(s.getBytes(Constants.UTF8));
+                    fileOutput.write(Utils.getBytes(s));
                 }
 
                 final List<String> memoryUsages = JvmTools.memoryUsage();
                 for (final String m : memoryUsages) {
-                    fileOutput.write(m.getBytes(Constants.UTF8));
+                    fileOutput.write(Utils.getBytes(m));
                 }
 
                 if (JvmTools.memoryUsed() > 0.9) {

File: jraft-core/src/main/java/com/alipay/sofa/jraft/core/NodeImpl.java
Patch:
@@ -2252,8 +2252,8 @@ public void shutdown(Closure done) {
                 }
                 return;
             }
-            // This node is down, it's ok to invoke done right now. Don't inovke this
-            // inplace to avoid the dead writeLock issue when done.Run() is going to acquire
+            // This node is down, it's ok to invoke done right now. Don't invoke this
+            // in place to avoid the dead writeLock issue when done.Run() is going to acquire
             // a writeLock which is already held by the caller
             if (done != null) {
                 Utils.runClosureInThread(done);

