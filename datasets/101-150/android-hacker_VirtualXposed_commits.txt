File: VirtualApp/lib/src/main/java/mirror/android/app/ContextImpl.java
Patch:
@@ -17,4 +17,6 @@ public class ContextImpl {
     public static RefObject<PackageManager> mPackageManager;
 
     public static RefMethod<Context> getReceiverRestrictedContext;
+
+    public static RefMethod<Object> getAttributionSource;
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -76,6 +76,7 @@
 import mirror.com.android.internal.content.ReferrerIntent;
 import mirror.dalvik.system.VMRuntime;
 import mirror.java.lang.ThreadGroupN;
+import mirror.android.security.net.config.ApplicationConfig;
 
 import static com.lody.virtual.os.VUserHandle.getUserId;
 
@@ -343,7 +344,8 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         } else {
             VLog.w(TAG, "Xposed is disable..");
         }
-
+        if (Build.VERSION.SDK_INT >= 30)
+            ApplicationConfig.setDefaultInstance.call(new Object[] { null });
         mInitialApplication = LoadedApk.makeApplication.call(data.info, false, null);
 
         // ExposedBridge.patchAppClassLoader(context);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -484,7 +484,8 @@ private void startIOUniformer() {
     private void setupVirtualStorage(ApplicationInfo info, int userId) {
         VirtualStorageManager vsManager = VirtualStorageManager.get();
         boolean enable = vsManager.isVirtualStorageEnable(info.packageName, userId);
-        if (!enable) {
+        // Android 11, force enable storage redirect.
+        if (!enable && !(Build.VERSION.SDK_INT >= 30)) {
             // There are lots of situation to deal, I am tired, disable it now.
             // such as: FileProvider.
             return;

File: VirtualApp/app/src/main/java/io/virtualapp/dev/CmdReceiver.java
Patch:
@@ -12,6 +12,7 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.remote.InstallResult;
 
+import io.virtualapp.BuildConfig;
 import io.virtualapp.home.LoadingActivity;
 
 /**
@@ -20,7 +21,7 @@
 
 public class CmdReceiver extends BroadcastReceiver {
 
-    private static final String ACTION = "io.va.exposed.CMD";
+    private static final String ACTION = BuildConfig.APPLICATION_ID + ".CMD";
     private static final String KEY_CMD = "cmd";
     private static final String KEY_PKG = "pkg";
     private static final String KEY_UID = "uid";

File: VirtualApp/lib/src/main/java/android/content/pm/PackageParser.java
Patch:
@@ -68,6 +68,8 @@ public class Package {
         public String codePath;
         public String baseCodePath;
         public String[] splitCodePaths;
+
+        public ArrayList<String> usesOptionalLibraries;
     }
 
     public final class Service extends Component<ServiceIntentInfo> {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/parser/PackageParserEx.java
Patch:
@@ -233,6 +233,8 @@ private static VPackage buildPackageCache(PackageParser.Package p) {
             cache.splitCodePaths = p.splitCodePaths;
         }
 
+        cache.usesOptionalLibraries = p.usesOptionalLibraries;
+
         addOwner(cache);
         return cache;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/installer/VPackageInstallerService.java
Patch:
@@ -117,6 +117,9 @@ private int createSessionInternal(SessionParams params, String installerPackageN
             sessionId = allocateSessionIdLocked();
             session = new PackageInstallerSession(mInternalCallback, mContext, mInstallHandler.getLooper(), installerPackageName, sessionId, userId, callingUid, params, VEnvironment.getPackageInstallerStageDir());
         }
+        synchronized (mSessions) {
+            mSessions.put(sessionId, session);
+        }
         mCallbacks.notifySessionCreated(session.sessionId, session.userId);
         return sessionId;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -144,7 +144,7 @@ public static void forbid(String path) {
 
     public static void enableIORedirect() {
         try {
-            String soPath = VirtualCore.get().getContext().getApplicationInfo().nativeLibraryDir + File.separator + "lib" + LIB_NAME;
+            String soPath = VirtualCore.get().getContext().getApplicationInfo().nativeLibraryDir + File.separator + "lib" + LIB_NAME + ".so";
             if (!new File(soPath).exists()) {
                 throw new RuntimeException("io redirect failed.");
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -153,7 +153,8 @@ public Object invoke(Object proxy, Method method, Object... args) throws Throwab
         }
         MethodBox methodBox = new MethodBox(method, mBase, args);
         int start = Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 ? 1 : 0;
-
+        // Android 11.
+        if(Build.VERSION.SDK_INT >= 30) start = 2;
         try {
             String name = method.getName();
             if ("call".equals(name)) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/shortcut/ShortcutServiceStub.java
Patch:
@@ -53,6 +53,7 @@ protected void onBindMethods() {
         addMethodProxy(new ReplaceCallingPkgMethodProxy("getMaxShortcutCountPerActivity"));
         addMethodProxy(new ReplaceCallingPkgMethodProxy("reportShortcutUsed"));
         addMethodProxy(new ReplaceCallingPkgMethodProxy("onApplicationActive"));
+        addMethodProxy(new ReplaceCallingPkgMethodProxy("removeAllDynamicShortcuts"));
 
         addMethodProxy(new ReplaceCallingPkgMethodProxy("getPinnedShortcuts"));
         addMethodProxy(new ReplacePkgAndShortcutMethodProxy("requestPinShortcut"));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/shortcut/ShortcutServiceStub.java
Patch:
@@ -53,6 +53,7 @@ protected void onBindMethods() {
         addMethodProxy(new ReplaceCallingPkgMethodProxy("getMaxShortcutCountPerActivity"));
         addMethodProxy(new ReplaceCallingPkgMethodProxy("reportShortcutUsed"));
         addMethodProxy(new ReplaceCallingPkgMethodProxy("onApplicationActive"));
+        addMethodProxy(new ReplaceCallingPkgMethodProxy("removeAllDynamicShortcuts"));
 
         addMethodProxy(new ReplaceCallingPkgMethodProxy("getPinnedShortcuts"));
         addMethodProxy(new ReplacePkgAndShortcutMethodProxy("requestPinShortcut"));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -41,6 +41,7 @@
 import com.lody.virtual.client.ipc.VActivityManager;
 import com.lody.virtual.client.ipc.VPackageManager;
 import com.lody.virtual.client.stub.VASettings;
+import com.lody.virtual.helper.compat.BuildCompat;
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.utils.BitmapUtils;
 import com.lody.virtual.os.VUserHandle;
@@ -390,7 +391,8 @@ public void removeVisibleOutsidePackage(String pkg) {
     }
 
     public boolean isOutsidePackageVisible(String pkg) {
-        if (!isXposedEnabled()) {
+        if (!isXposedEnabled() && !BuildCompat.isR()) {
+            // FIXME: 2020/7/9 recursive call
             PackageManager unHookPackageManager = getUnHookPackageManager();
             try {
                 unHookPackageManager.getPackageInfo(pkg, 0);

File: VirtualApp/lib/src/main/java/android/app/ClientTransactionHandler.java
Patch:
@@ -90,6 +90,9 @@ public abstract void handleResumeActivity(IBinder token, boolean finalStateReque
      */
     public abstract void handleStopActivity(IBinder token, boolean show, int configChanges,
             PendingTransactionActions pendingActions, boolean finalStateRequest, String reason);
+
+    public abstract void handleStopActivity(IBinder token, int configChanges,
+                                            PendingTransactionActions pendingActions, boolean finalStateRequest, String reason);
     /** Report that activity was stopped to server. */
     public abstract void reportStop(PendingTransactionActions pendingActions);
     /** Restart the activity after it was stopped. */

File: VirtualApp/lib/src/main/java/android/app/ClientTransactionHandler.java
Patch:
@@ -116,6 +116,8 @@ public abstract Activity handleLaunchActivity(ActivityThread.ActivityClientRecor
     /** Perform activity start. */
     public abstract void handleStartActivity(ActivityThread.ActivityClientRecord r,
             PendingTransactionActions pendingActions);
+    public abstract void handleStartActivity(IBinder r,
+                                             PendingTransactionActions pendingActions);
     /** Get package info. */
     public abstract LoadedApk getPackageInfoNoCheck(ApplicationInfo ai,
                                                     CompatibilityInfo compatInfo);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -157,7 +157,9 @@ public Object invoke(Object proxy, Method method, Object... args) throws Throwab
         try {
             String name = method.getName();
             if ("call".equals(name)) {
-                if (BuildCompat.isQ()) {
+                if (BuildCompat.isR()) {
+                    start = 3;
+                } else if (BuildCompat.isQ()) {
                     start = 2;
                 }
                 String methodName = (String) args[start];

File: VirtualApp/app/src/main/java/io/virtualapp/sys/InstallerActivity.java
Patch:
@@ -179,6 +179,8 @@ private boolean dealUpdate(List<AppInfoLite> appList) {
         }
 
         List<String> magicApps = Arrays.asList(EncodeUtils.decode("Y29tLmxiZS5wYXJhbGxlbA=="), // com.lbe.parallel
+                EncodeUtils.decode("aW8udmlydHVhbGFwcC5zYW5kdnhwb3NlZA=="), // io.virtualapp.sandvxposed
+                EncodeUtils.decode("Y29tLnNrLnNwYXRjaA=="), // com.sk.spatch
                 EncodeUtils.decode("Y29tLnFpaG9vLm1hZ2lj"), // com.qihoo.magic
                 EncodeUtils.decode("Y29tLmRvdWJsZW9wZW4=")); // com.doubleopen
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VPackageManager.java
Patch:
@@ -185,7 +185,7 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags, int use
             }
             final int P = 28;
             final String APACHE_LEGACY = "/system/framework/org.apache.http.legacy.boot.jar";
-            if (android.os.Build.VERSION.SDK_INT >= P && info.targetSdkVersion < P) {
+            if (android.os.Build.VERSION.SDK_INT >= P && info.targetSdkVersion <= P) {
                 String[] newSharedLibraryFiles;
                 if (info.sharedLibraryFiles == null) {
                     newSharedLibraryFiles = new String[]{APACHE_LEGACY};

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VPackageManager.java
Patch:
@@ -185,7 +185,7 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags, int use
             }
             final int P = 28;
             final String APACHE_LEGACY = "/system/framework/org.apache.http.legacy.boot.jar";
-            if (android.os.Build.VERSION.SDK_INT >= P && info.targetSdkVersion < P) {
+            if (android.os.Build.VERSION.SDK_INT >= P && info.targetSdkVersion <= P) {
                 String[] newSharedLibraryFiles;
                 if (info.sharedLibraryFiles == null) {
                     newSharedLibraryFiles = new String[]{APACHE_LEGACY};

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -330,7 +330,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         }
 
 
-        boolean enableXposed = VirtualCore.get().isXposedEnabled() && !BuildCompat.isQ();
+        boolean enableXposed = VirtualCore.get().isXposedEnabled();
         if (enableXposed) {
             VLog.i(TAG, "Xposed is enabled.");
             ClassLoader originClassLoader = context.getClassLoader();

File: VirtualApp/lib/src/main/java/mirror/android/app/ActivityThread.java
Patch:
@@ -44,6 +44,7 @@ public class ActivityThread {
     public static RefObject<Map> mProviderMap;
     @MethodParams({IBinder.class, List.class})
     public static RefMethod<Void> performNewIntents;
+    public static RefMethod<Void> handleNewIntent;
     public static RefStaticObject<IInterface> sPackageManager;
     @MethodParams({IBinder.class, String.class, int.class, int.class, Intent.class})
     public static RefMethod<Void> sendActivityResult;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -201,7 +201,7 @@ public int getProviderNameIndex() {
 
         @Override
         public int getPackageIndex() {
-            return super.getPackageIndex();
+            return -1;
         }
 
         @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -155,6 +155,9 @@ public Object invoke(Object proxy, Method method, Object... args) throws Throwab
         try {
             String name = method.getName();
             if ("call".equals(name)) {
+                if (!(args[start + 2] instanceof Bundle)) {
+                    start++;
+                }
                 String methodName = (String) args[start];
                 String arg = (String) args[start + 1];
                 Bundle extras = (Bundle) args[start + 2];

File: VirtualApp/app/src/aosp/java/io/virtualapp/delegate/MyVirtualInitializer.java
Patch:
@@ -27,8 +27,10 @@ public void onVirtualProcess() {
 
         // For Crash statics
         Fabric.with(application, new Crashlytics());
-        virtualCore.setCrashHandler(new MyCrashHandler());
 
         super.onVirtualProcess();
+
+        // Override
+        virtualCore.setCrashHandler(new MyCrashHandler());
     }
 }

File: VirtualApp/app/src/main/java/io/virtualapp/delegate/BaseVirtualInitializer.java
Patch:
@@ -32,6 +32,8 @@ public void onMainProcess() {
     @Override
     public void onVirtualProcess() {
 
+        virtualCore.setCrashHandler(new BaseCrashHandler());
+
         //listener components
         virtualCore.setComponentDelegate(new MyComponentDelegate());
         //fake phone imei,macAddress,BluetoothAddress

File: VirtualApp/app/src/main/java/io/virtualapp/settings/SettingsActivity.java
Patch:
@@ -255,7 +255,7 @@ public void onCreate(Bundle savedInstanceState) {
                     boolean enable = (boolean) newValue;
                     PackageManager packageManager = getActivity().getPackageManager();
                     packageManager.setComponentEnabledSetting(new ComponentName(getActivity().getPackageName(), "vxp.launcher"),
-                            enable ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DEFAULT,
+                            enable ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
                             PackageManager.DONT_KILL_APP);
                     return true;
                 } catch (Throwable ignored) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -91,6 +91,9 @@ public static void redirectDirectory(String origPath, String newPath) {
     }
 
     public static String getEscapePath(String path) {
+        if (path == null) {
+            return null;
+        }
         File file = new File(path);
         if (file.exists()) {
             return file.getAbsolutePath();

File: VirtualApp/lib/src/main/java/com/lody/virtual/os/VEnvironment.java
Patch:
@@ -179,11 +179,11 @@ public static File getVirtualStorageDir(String packageName, int userId) {
         return ensureCreated(userBase);
     }
 
-    // /sdcard/Android/data/<host_package>/virtual/<user>/<package>
-    public static File getVirtualPrivateStorageDir(String packageName, int userId) {
+    // /sdcard/Android/data/<host_package>/virtual/<user>
+    public static File getVirtualPrivateStorageDir(int userId) {
         String base = String.format(Locale.ENGLISH, "%s/Android/data/%s/%s/%d", Environment.getExternalStorageDirectory(),
                 VirtualCore.get().getHostPkg(), "virtual", userId);
-        File file = new File(base, packageName);
+        File file = new File(base);
         return ensureCreated(file);
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -116,6 +116,8 @@ public static void redirectFile(String origPath, String newPath) {
     public static void whitelist(String path, boolean directory) {
         if (directory && !path.endsWith("/")) {
             path = path + "/";
+        } else if (!directory && path.endsWith("/")) {
+            path = path.substring(0, path.length() - 1);
         }
         try {
             nativeIOWhitelist(path);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/DaemonService.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.Constants;
+import com.lody.virtual.server.pm.PrivilegeAppOptimizer;
 
 import java.io.File;
 
@@ -31,7 +32,7 @@ public static void startup(Context context) {
 
 		context.startService(new Intent(context, DaemonService.class));
 		if (VirtualCore.get().isServerProcess()) {
-			DaemonJobService.scheduleJob(context);
+			PrivilegeAppOptimizer.notifyBootFinish();
 		}
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -485,18 +485,17 @@ private void setupVirtualStorage(ApplicationInfo info, int userId) {
             if (!originalDir.exists()) {
                 continue;
             }
+            //noinspection ResultOfMethodCallIgnored
             virtualDir.mkdirs();
         }
 
         for (String storageRoot : storageRoots) {
             for (String whiteDir : whiteList) {
                 // white list, do not redirect
                 String whitePath = String.format("%s%s%s", storageRoot, File.separator, whiteDir);
-                NativeEngine.redirectDirectory(whitePath, whitePath);
+                NativeEngine.whitelist(whitePath, true);
             }
-        }
 
-        for (String storageRoot : storageRoots) {
             // redirect xxx/Android/data/<package> -> /xxx/Android/data/<host>/virtual/user/package
             String privatePath = VEnvironment.getVirtualPrivateStorageDir(info.packageName, userId).getAbsolutePath();
             NativeEngine.redirectDirectory(String.format(Locale.ENGLISH, "%s/Android/data/%s/", storageRoot, info.packageName), privatePath);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -316,7 +316,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         if (enableXposed) {
             VLog.i(TAG, "Xposed is enabled.");
             ClassLoader originClassLoader = context.getClassLoader();
-            ExposedBridge.initOnce(context, data.appInfo, originClassLoader);
+            ExposedBridge.initOnce(context, data.appInfo, originClassLoader, getUserId(vuid));
             List<InstalledAppInfo> modules = VirtualCore.get().getInstalledApps(0);
             for (InstalledAppInfo module : modules) {
                 ExposedBridge.loadModule(module.apkPath, module.getOdexFile().getParent(), module.libPath,

File: VirtualApp/lib/src/main/java/mirror/android/content/pm/ShortcutInfo.java
Patch:
@@ -1,6 +1,7 @@
 package mirror.android.content.pm;
 
 import android.content.Intent;
+import android.graphics.drawable.Icon;
 import android.os.PersistableBundle;
 
 import mirror.RefClass;
@@ -13,6 +14,7 @@
 public class ShortcutInfo {
     public static Class<?> TYPE = RefClass.load(ShortcutInfo.class, "android.content.pm.ShortcutInfo");
     public static RefObject<String> mPackageName;
+    public static RefObject<Icon> mIcon;
     public static RefObject<Intent[]> mIntents;
     public static RefObject<PersistableBundle[]> mIntentPersistableExtrases;
 }

File: VirtualApp/app/src/main/java/io/virtualapp/gms/FakeGms.java
Patch:
@@ -322,14 +322,13 @@ private static String installGmsInternal(Activity activity, ProgressDialog dialo
 
         // Enable the Xposed module.
         File dataDir = VEnvironment.getDataUserPackageDirectory(0, "de.robv.android.xposed.installer");
+        File modulePath = VEnvironment.getPackageResourcePath(FAKE_GAPPS_PKG);
         File configDir = new File(dataDir, "exposed_conf" + File.separator + "modules.list");
         FileWriter writer = null;
         try {
             writer = new FileWriter(configDir, true);
             writer.append('\n');
-            writer.append("com.thermatk.android.xf.fakegapps.FakeSignatures");
-            writer.append('\n');
-            writer.append("com.thermatk.android.xf.fakegapps.PackageNameServiceHook");
+            writer.append(modulePath.getAbsolutePath());
             writer.flush();
 
         } catch (IOException e) {

File: VirtualApp/app/src/main/java/io/virtualapp/sys/InstallerActivity.java
Patch:
@@ -130,7 +130,7 @@ public void update(AppData model) {
                                 if (mInstallCount <= 0) {
                                     mInstallCount = 0;
                                     // only dismiss when the app is the last to install.
-                                    mProgressText.setText(getResources().getString(R.string.add_app_laoding_complete, model.getName()));
+                                    mProgressText.setText(getResources().getString(R.string.add_app_loading_complete, model.getName()));
                                     mProgressText.postDelayed(() -> {
                                         mProgressBar.setVisibility(View.GONE);
 
@@ -308,7 +308,7 @@ private void handleSystemIntent(Intent intent) {
                 // install success
                 mTips.setVisibility(View.GONE);
                 mProgressText.setVisibility(View.VISIBLE);
-                mProgressText.setText(getResources().getString(R.string.add_app_laoding_complete, apkName));
+                mProgressText.setText(getResources().getString(R.string.add_app_loading_complete, apkName));
                 mProgressBar.setVisibility(View.GONE);
                 mRight.setEnabled(true);
                 mRight.setText(res.isSuccess ? getResources().getString(R.string.install_complete) :

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -371,7 +371,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
     }
 
     private void initForYieldMode() {
-        if (VirtualCore.get().getContext().getFileStreamPath("yieldMode").exists()) {
+        if (!VirtualCore.get().getContext().getFileStreamPath("yieldMode2").exists()) {
             System.setProperty("yieldMode", "true");
         }
     }

File: VirtualApp/app/src/main/java/io/virtualapp/XApp.java
Patch:
@@ -78,7 +78,7 @@ public void onMainProcess() {
                 boolean isXposedInstalled = false;
                 try {
                     isXposedInstalled = VirtualCore.get().isAppInstalled(XPOSED_INSTALLER_PACKAGE);
-                    File oldXposedInstallerApk = getFileStreamPath("XposedInstaller_1_24.apk");
+                    File oldXposedInstallerApk = getFileStreamPath("XposedInstaller_1_31.apk");
                     if (oldXposedInstallerApk.exists()) {
                         VirtualCore.get().uninstallPackage(XPOSED_INSTALLER_PACKAGE);
                         oldXposedInstallerApk.delete();
@@ -90,7 +90,7 @@ public void onMainProcess() {
                 }
 
                 if (!isXposedInstalled) {
-                    File xposedInstallerApk = getFileStreamPath("XposedInstaller_1_31.apk");
+                    File xposedInstallerApk = getFileStreamPath("XposedInstaller_5_8.apk");
                     if (!xposedInstallerApk.exists()) {
                         InputStream input = null;
                         OutputStream output = null;

File: VirtualApp/app/src/main/java/io/virtualapp/XApp.java
Patch:
@@ -50,7 +50,7 @@ public static XApp getApp() {
     protected void attachBaseContext(Context base) {
         super.attachBaseContext(base);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
-            NativeEngine.disableJit();
+            NativeEngine.disableJit(Build.VERSION.SDK_INT);
         }
         mPreferences = base.getSharedPreferences("va", Context.MODE_MULTI_PROCESS);
         VASettings.ENABLE_IO_REDIRECT = true;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -204,7 +204,7 @@ public static void onOpenDexFileNative(String[] params) {
 
     private static native void nativeEnableIORedirect(String selfSoPath, int apiLevel, int previewApiLevel);
 
-    public static native void disableJit();
+    public static native void disableJit(int apiLevel);
 
     public static int onGetUid(int uid) {
         return VClientImpl.get().getBaseVUid();

File: VirtualApp/app/src/main/java/io/virtualapp/delegate/MyCrashHandler.java
Patch:
@@ -17,7 +17,7 @@
  */
 public class MyCrashHandler implements CrashHandler {
 
-    private static final String TAG = "VApp";
+    private static final String TAG = "XApp";
 
     @Override
     public void handleUncaughtException(Thread t, Throwable e) {

File: VirtualApp/app/src/main/java/io/virtualapp/delegate/MyTaskDescDelegate.java
Patch:
@@ -12,7 +12,7 @@
  * Patch the task description with the (Virtual) user name
  */
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
-public class MyTaskDescriptionDelegate implements TaskDescriptionDelegate {
+public class MyTaskDescDelegate implements TaskDescriptionDelegate {
     @Override
     public ActivityManager.TaskDescription getTaskDescription(ActivityManager.TaskDescription oldTaskDescription) {
         if (oldTaskDescription == null) {

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppFragment.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Locale;
 
 import io.virtualapp.R;
-import io.virtualapp.VApp;
+import io.virtualapp.XApp;
 import io.virtualapp.abs.ui.VFragment;
 import io.virtualapp.home.adapters.CloneAppListAdapter;
 import io.virtualapp.home.models.AppInfo;
@@ -110,7 +110,7 @@ public boolean isSelectable(int position) {
         });
         mAdapter.setSelectionListener(count -> {
             mInstallButton.setEnabled(count > 0);
-            mInstallButton.setText(String.format(Locale.ENGLISH, VApp.getApp().getResources().getString(R.string.install_d), count));
+            mInstallButton.setText(String.format(Locale.ENGLISH, XApp.getApp().getResources().getString(R.string.install_d), count));
         });
         mInstallButton.setOnClickListener(v -> {
             Integer[] selectedIndices = mAdapter.getSelectedIndices();

File: VirtualApp/app/src/main/java/io/virtualapp/home/NewHomeActivity.java
Patch:
@@ -32,8 +32,8 @@
 import java.io.File;
 import java.lang.reflect.Method;
 
+import io.virtualapp.XApp;
 import io.virtualapp.R;
-import io.virtualapp.VApp;
 import io.virtualapp.settings.SettingsActivity;
 import io.virtualapp.update.VAVersionService;
 
@@ -146,7 +146,7 @@ private void alertForMeizu() {
         if (!DeviceUtil.isMeizuBelowN()) {
             return;
         }
-        boolean isXposedInstalled = VirtualCore.get().isAppInstalled(VApp.XPOSED_INSTALLER_PACKAGE);
+        boolean isXposedInstalled = VirtualCore.get().isAppInstalled(XApp.XPOSED_INSTALLER_PACKAGE);
         if (isXposedInstalled) {
             return;
         }

File: VirtualApp/app/src/main/java/io/virtualapp/home/repo/PackageAppDataStorage.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import io.virtualapp.VApp;
+import io.virtualapp.XApp;
 import io.virtualapp.abs.Callback;
 import io.virtualapp.abs.ui.VUiKit;
 import io.virtualapp.home.models.PackageAppData;
@@ -47,7 +47,7 @@ public void acquire(String packageName, Callback<PackageAppData> callback) {
     private PackageAppData loadAppData(String packageName) {
         InstalledAppInfo setting = VirtualCore.get().getInstalledAppInfo(packageName, 0);
         if (setting != null) {
-            PackageAppData data = new PackageAppData(VApp.getApp(), setting);
+            PackageAppData data = new PackageAppData(XApp.getApp(), setting);
             synchronized (packageDataMap) {
                 packageDataMap.put(packageName, data);
             }
@@ -74,7 +74,7 @@ public void acquire(ApplicationInfo appInfo, Callback<PackageAppData> callback)
     }
 
     private PackageAppData loadAppData(ApplicationInfo appInfo) {
-        PackageAppData data = new PackageAppData(VApp.getApp(), appInfo);
+        PackageAppData data = new PackageAppData(XApp.getApp(), appInfo);
         synchronized (packageDataMap) {
             packageDataMap.put(appInfo.packageName, data);
         }

File: VirtualApp/app/src/main/java/io/virtualapp/sys/Installd.java
Patch:
@@ -16,7 +16,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 
-import io.virtualapp.VApp;
+import io.virtualapp.XApp;
 import io.virtualapp.VCommends;
 import io.virtualapp.abs.ui.VUiKit;
 import io.virtualapp.home.models.AppData;
@@ -78,7 +78,7 @@ class AddResult {
             } else {
                 PackageInfo pkgInfo = null;
                 try {
-                    pkgInfo = VApp.getApp().getPackageManager().getPackageArchiveInfo(info.path, 0);
+                    pkgInfo = XApp.getApp().getPackageManager().getPackageArchiveInfo(info.path, 0);
                     pkgInfo.applicationInfo.sourceDir = info.path;
                     pkgInfo.applicationInfo.publicSourceDir = info.path;
                 } catch (Exception e) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -127,7 +127,7 @@ public static void enableIORedirect() {
         try {
             String soPath = String.format("/data/data/%s/lib/libva++.so", VirtualCore.get().getHostPkg());
             if (!new File(soPath).exists()) {
-                throw new RuntimeException("Unable to find the so.");
+                throw new RuntimeException("io redirect failed.");
             }
             nativeEnableIORedirect(soPath, Build.VERSION.SDK_INT, BuildCompat.getPreviewSDKInt());
         } catch (Throwable e) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -24,7 +24,6 @@
 import android.os.RemoteException;
 import android.os.StrictMode;
 import android.util.Base64;
-import android.util.Log;
 
 import com.lody.virtual.client.core.CrashHandler;
 import com.lody.virtual.client.core.InvocationStubManager;
@@ -251,7 +250,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         data.processName = processName;
         data.appInfo.processName = processName;
         data.providers = VPackageManager.get().queryContentProviders(processName, getVUid(), PackageManager.GET_META_DATA);
-        Log.i(TAG, "Binding application " + data.appInfo.packageName + " (" + data.processName + ")");
+        VLog.i(TAG, String.format("Binding application %s, (%s)", data.appInfo.packageName, data.processName));
         mBoundApplication = data;
         VirtualRuntime.setupRuntime(data.processName, data.appInfo);
         int targetSdkVersion = data.appInfo.targetSdkVersion;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/VASettings.java
Patch:
@@ -11,7 +11,7 @@ public class VASettings {
     public static final String ACTION_BADGER_CHANGE = "com.lody.virtual.BADGER_CHANGE";
     public static String STUB_ACTIVITY = StubActivity.class.getName();
     public static String STUB_DIALOG = StubDialog.class.getName();
-    public static String STUB_CP = StubContentProvider.class.getName();
+    public static String STUB_CP = StubCP.class.getName();
     public static String STUB_JOB = StubJob.class.getName();
     public static String RESOLVER_ACTIVITY = ResolverActivity.class.getName();
     public static String STUB_CP_AUTHORITY = "virtual_stub_";

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -167,7 +167,7 @@ public static int onGetCallingUid(int originUid) {
         if (vuid != -1) {
             return VUserHandle.getAppId(vuid);
         }
-        VLog.d(TAG, "Unknown uid: " + callingPid);
+        VLog.w(TAG, String.format("Unknown uid: %s", callingPid));
         return VClientImpl.get().getBaseVUid();
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/notification/NotificationManagerStub.java
Patch:
@@ -7,6 +7,7 @@
 import com.lody.virtual.client.hook.base.MethodInvocationProxy;
 import com.lody.virtual.client.hook.base.MethodInvocationStub;
 import com.lody.virtual.client.hook.base.ReplaceCallingPkgMethodProxy;
+import com.lody.virtual.helper.utils.DeviceUtil;
 
 import mirror.android.app.NotificationManager;
 import mirror.android.widget.Toast;
@@ -47,7 +48,7 @@ protected void onBindMethods() {
             addMethodProxy(new ReplaceCallingPkgMethodProxy("getNotificationChannel"));
             addMethodProxy(new ReplaceCallingPkgMethodProxy("deleteNotificationChannel"));
         }
-        if ("samsung".equalsIgnoreCase(Build.BRAND) || "samsung".equalsIgnoreCase(Build.MANUFACTURER)) {
+        if (DeviceUtil.isSamsung()) {
             addMethodProxy(new ReplaceCallingPkgMethodProxy("removeEdgeNotification"));
         }
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -433,7 +433,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 
             ActivityInfo activityInfo = VirtualCore.get().resolveActivityInfo(intent, userId);
             if (activityInfo == null) {
-                VLog.e("VActivityManager", "Unable to resolve activityInfo : " + intent);
+                VLog.e("VActivityManager", "Unable to resolve activityInfo : %s", intent);
                 if (intent.getPackage() != null && isAppPkg(intent.getPackage())) {
                     return ActivityManagerCompat.START_INTENT_NOT_RESOLVED;
                 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/vs/VirtualStorageService.java
Patch:
@@ -49,7 +49,7 @@ private VSConfig getOrCreateVSConfigLocked(String packageName, int userId) {
         VSConfig config = userMap.get(packageName);
         if (config == null) {
             config = new VSConfig();
-            config.enable = true;
+            config.enable = false;
             userMap.put(packageName, config);
         }
         return config;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/content/ContentServiceStub.java
Patch:
@@ -1,15 +1,15 @@
 package com.lody.virtual.client.hook.proxies.content;
 
 import com.lody.virtual.client.hook.base.BinderInvocationProxy;
+import com.lody.virtual.client.hook.base.Inject;
 
 import mirror.android.content.IContentService;
 
 /**
  * @author Lody
- *
  * @see IContentService
  */
-
+@Inject(MethodProxies.class)
 public class ContentServiceStub extends BinderInvocationProxy {
 
     public ContentServiceStub() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/pm/MethodProxies.java
Patch:
@@ -788,8 +788,9 @@ public String getMethodName() {
         @Override
         public Object call(Object who, Method method, Object... args) throws Throwable {
             String processName = (String) args[0];
+            int uid = (int) args[1];
             int flags = (int) args[2];
-            List<ProviderInfo> infos = VPackageManager.get().queryContentProviders(processName, flags, 0);
+            List<ProviderInfo> infos = VPackageManager.get().queryContentProviders(processName, uid, flags);
             if (ParceledListSliceCompat.isReturnParceledListSlice(method)) {
                 return ParceledListSliceCompat.create(infos);
             }

File: VirtualApp/app/src/main/java/io/virtualapp/home/FlurryROMCollector.java
Patch:
@@ -29,9 +29,9 @@ public static void startCollect() {
             reportCameraNativeSetup();
         }
         Map<String, Integer> offsetInfo = Epic.collectOffsetInfo();
-//        if (!offsetInfo.isEmpty()) {
+        if (!offsetInfo.isEmpty()) {
             reportOffsetInfo(offsetInfo);
-//        }
+        }
         Log.i(TAG, "end collect...");
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/splash/SplashActivity.java
Patch:
@@ -25,9 +25,9 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_splash);
         VUiKit.defer().when(() -> {
-            if (!Once.beenDone("collect_flurry")) {
+            if (!Once.beenDone("collect_fabric")) {
                 FlurryROMCollector.startCollect();
-                Once.markDone("collect_flurry");
+                Once.markDone("collect_fabric");
             }
             long time = System.currentTimeMillis();
             doActionInThread();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -204,6 +204,8 @@ public static void onOpenDexFileNative(String[] params) {
 
     private static native void nativeEnableIORedirect(String selfSoPath, int apiLevel, int previewApiLevel);
 
+    public static native void disableJit();
+
     public static int onGetUid(int uid) {
         return VClientImpl.get().getBaseVUid();
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -334,7 +334,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         } catch (Exception e) {
             if (!mInstrumentation.onException(mInitialApplication, e)) {
                 throw new RuntimeException(
-                        "Unable to create application " + (mInitialApplication == null ? " [null application] " : mInitialApplication.getClass().getName()
+                        "Unable to create application " + (mInitialApplication == null ? " [null application] " : mInitialApplication.getClass().getName())
                                 + ": " + e.toString(), e);
             }
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -334,7 +334,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         } catch (Exception e) {
             if (!mInstrumentation.onException(mInitialApplication, e)) {
                 throw new RuntimeException(
-                        "Unable to create application " + mInitialApplication.getClass().getName()
+                        "Unable to create application " + (mInitialApplication == null ? " [null application] " : mInitialApplication.getClass().getName()
                                 + ": " + e.toString(), e);
             }
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -24,6 +24,7 @@
 import android.os.Looper;
 import android.os.Process;
 import android.os.RemoteException;
+import android.util.Log;
 
 import com.lody.virtual.R;
 import com.lody.virtual.client.VClientImpl;
@@ -525,8 +526,7 @@ public int compare(ShortcutInfo o1, ShortcutInfo o2) {
                 shortcutManager.removeDynamicShortcuts(Collections.singletonList(remove.getId()));
             }
 
-            dynamicShortcuts.add(likeShortcut);
-            shortcutManager.addDynamicShortcuts(dynamicShortcuts);
+            shortcutManager.addDynamicShortcuts(Collections.singletonList(likeShortcut));
             return true;
         } catch (Throwable e) {
             return false;

File: VirtualApp/app/src/main/java/io/virtualapp/settings/TaskManageActivity.java
Patch:
@@ -160,7 +160,7 @@ static class ViewHolder {
         View root;
 
         ViewHolder(Context context, ViewGroup parent) {
-            root = LayoutInflater.from(context).inflate(R.layout.item_app_manage, parent, false);
+            root = LayoutInflater.from(context).inflate(R.layout.item_task_manage, parent, false);
             icon = root.findViewById(R.id.item_app_icon);
             label = root.findViewById(R.id.item_app_name);
             button = root.findViewById(R.id.item_app_button);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -1545,6 +1545,9 @@ private Intent handleIntent(final Intent intent) {
 
             } else if (BadgerManager.handleBadger(intent)) {
                 return null;
+            } else if (Intent.ACTION_MEDIA_SCANNER_SCAN_FILE.equals(action)) {
+                // intent send to system, do not handle it(may have other same intent)
+                return intent;
             } else {
                 return ComponentUtils.redirectBroadcastIntent(intent, VUserHandle.myUserId());
             }

File: VirtualApp/app/src/main/java/io/virtualapp/update/VAVersionService.java
Patch:
@@ -55,7 +55,7 @@ public void onResponses(AVersionService service, String response) {
 
             int currentVersion = getCurrentVersionCode(this);
             if (currentVersion < versionCode) {
-                showVersionDialog(url, "VAExposed 更新啦: ", updateMessage);
+                showVersionDialog(url, getResources().getString(R.string.new_version_detected), updateMessage);
             } else {
                 boolean showTip = versionParams != null && versionParams.getParamBundle() != null
                         && versionParams.getParamBundle().getBoolean(KEY_SHOW_TIP, false);

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -71,8 +71,9 @@ public void onMainProcess() {
 
                 Fabric.with(VApp.this, new Crashlytics());
 
-                boolean isXposedInstalled = VirtualCore.get().isAppInstalled(XPOSED_INSTALLER_PACKAGE);
+                boolean isXposedInstalled = false;
                 try {
+                    isXposedInstalled = VirtualCore.get().isAppInstalled(XPOSED_INSTALLER_PACKAGE);
                     File oldXposedInstallerApk = getFileStreamPath("XposedInstaller_1_24.apk");
                     if (oldXposedInstallerApk.exists()) {
                         VirtualCore.get().uninstallPackage(XPOSED_INSTALLER_PACKAGE);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/clipboard/ClipBoardStub.java
Patch:
@@ -23,7 +23,7 @@ public ClipBoardStub() {
     }
 
     private static IInterface getInterface() {
-        if (BuildCompat.isOreo()) {
+        if (BuildCompat.isOreo() || ClipboardManager.getService == null) {
             android.content.ClipboardManager cm = (android.content.ClipboardManager)
                     VirtualCore.get().getContext().getSystemService(Context.CLIPBOARD_SERVICE);
             return ClipboardManagerOreo.mService.get(cm);

File: VirtualApp/lib/src/main/java/mirror/android/os/UserHandle.java
Patch:
@@ -5,8 +5,8 @@
 
 import mirror.MethodParams;
 import mirror.RefClass;
+import mirror.RefConstructor;
 import mirror.RefMethod;
-import mirror.RefStaticMethod;
 
 /**
  * author: weishu on 18/2/11.
@@ -16,7 +16,7 @@
 public class UserHandle {
     public static Class<?> TYPE = RefClass.load(UserHandle.class, android.os.UserHandle.class);
     @MethodParams({int.class})
-    public static RefStaticMethod<android.os.UserHandle> of;
+    public static RefConstructor<android.os.UserHandle> ctor;
     public static RefMethod<Integer> getIdentifier;
 
 }

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppActivity.java
Patch:
@@ -4,7 +4,6 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.graphics.drawable.ColorDrawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
@@ -37,7 +36,6 @@ public static void gotoListApp(Activity activity) {
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.colorPrimaryDark)));
         setContentView(R.layout.activity_clone_app);
         mToolBar = (Toolbar) findViewById(R.id.clone_app_tool_bar);
         mTabLayout = (TabLayout) mToolBar.findViewById(R.id.clone_app_tab_layout);

File: VirtualApp/app/src/main/java/io/virtualapp/home/adapters/LaunchpadAdapter.java
Patch:
@@ -56,6 +56,9 @@ public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
     @Override
     public void onBindViewHolder(ViewHolder holder, int position) {
         AppData data = mList.get(position);
+        if (data == null) {
+            return;
+        }
         holder.color = getColor(position);
         holder.iconView.setImageDrawable(data.getIcon());
         holder.nameView.setText(data.getName());

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -268,6 +268,9 @@ private void deleteApp(int position) {
     }
 
     private void createShortcut(int position) {
+        if (position < 0) {
+            return;
+        }
         AppData model = mLaunchpadAdapter.getList().get(position);
         if (model instanceof PackageAppData || model instanceof MultiplePackageAppData) {
             mPresenter.createShortcut(model);

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -348,6 +348,9 @@ public void showGuide() {
     @Override
     public void addAppToLauncher(AppData model) {
         List<AppData> dataList = mLaunchpadAdapter.getList();
+        if (dataList == null) {
+            return;
+        }
         boolean replaced = false;
         for (int i = 0; i < dataList.size(); i++) {
             AppData data = dataList.get(i);

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomePresenterImpl.java
Patch:
@@ -236,7 +236,7 @@ public Bitmap getIcon(Bitmap originIcon) {
 
             @Override
             public String getName(String originName) {
-                return originName + "(VA)";
+                return originName + "(VAE)";
             }
         };
         boolean result = false;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -480,9 +480,11 @@ public boolean createShortcut(int userId, String packageName, Intent splash, OnE
     private static boolean createShortcutAboveN(Context context, String id, String label, Bitmap icon, Intent intent) {
         intent.setAction(Intent.ACTION_VIEW);
 
+        label = label.replaceAll("\\(VAE\\)", ""); // remove (VAE)
         Icon withBitmap = Icon.createWithBitmap(icon);
         ShortcutInfo likeShortcut = new ShortcutInfo.Builder(context, id)
                 .setShortLabel(label)
+                .setLongLabel(label)
                 .setIcon(withBitmap)
                 .setIntent(intent)
                 .build();
@@ -491,7 +493,7 @@ private static boolean createShortcutAboveN(Context context, String id, String l
         if (shortcutManager == null) {
             return false;
         }
-        shortcutManager.setDynamicShortcuts(Arrays.asList(likeShortcut));
+        shortcutManager.addDynamicShortcuts(Arrays.asList(likeShortcut));
         return true;
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/about/AboutActivity.java
Patch:
@@ -47,7 +47,7 @@ Element getCopyRightsElement() {
         Element copyRightsElement = new Element();
         final String copyrights = String.format(getString(R.string.copy_right), Calendar.getInstance().get(Calendar.YEAR));
         copyRightsElement.setTitle(copyrights);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {
             copyRightsElement.setIconDrawable(R.drawable.about_icon_copy_right);
         }
         copyRightsElement.setIconTint(mehdi.sakout.aboutpage.R.color.about_item_icon_color);

File: VirtualApp/app/src/main/java/io/virtualapp/home/adapters/LaunchpadAdapter.java
Patch:
@@ -172,6 +172,9 @@ public void setAppClickListener(OnAppClickListener mAppClickListener) {
     }
 
     public void moveItem(int pos, int targetPos) {
+        if (pos >= mList.size()) {
+            return;
+        }
         AppData model = mList.remove(pos);
         mList.add(targetPos, model);
         notifyItemMoved(pos, targetPos);

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -565,7 +565,9 @@ private void alertForMeizu() {
                     .setPositiveButton(android.R.string.yes, (dialog, which) -> {
                     })
                     .create();
-            alertDialog.show();
+            try {
+                alertDialog.show();
+            } catch (Throwable ignored) {}
         }, 2000);
     }
 }

File: VirtualApp/app/src/main/java/io/virtualapp/home/models/MultiplePackageAppData.java
Patch:
@@ -34,7 +34,7 @@ public MultiplePackageAppData(PackageAppData target, int userId) {
 
     @Override
     public boolean isInstalling() {
-        return isLoading;
+        return isInstalling;
     }
 
     @Override

File: VirtualApp/app/src/main/java/io/virtualapp/update/VAVersionService.java
Patch:
@@ -46,6 +46,8 @@ public void onResponses(AVersionService service, String response) {
             }
         } catch (JSONException e) {
             Log.e(TAG, "version info parse error!!", e);
+        } catch (Throwable e) {
+            Log.e(TAG, "check version failed:", e);
         }
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/update/VAVersionService.java
Patch:
@@ -41,7 +41,7 @@ public void onResponses(AVersionService service, String response) {
             String updateMessage = versionInfo.getString("updateMessage");
 
             int currentVersion = getCurrentVersionCode(this);
-            if (currentVersion != versionCode) {
+            if (currentVersion < versionCode) {
                 showVersionDialog(url, "VAExposed 更新啦: ", updateMessage);
             }
         } catch (JSONException e) {

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class VApp extends MultiDexApplication {
 
-    private static final String XPOSED_INSTALLER_PACKAGE = "de.robv.android.xposed.installer";
+    public static final String XPOSED_INSTALLER_PACKAGE = "de.robv.android.xposed.installer";
 
     private static VApp gApp;
     private SharedPreferences mPreferences;

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -432,7 +432,9 @@ public boolean canDropOver(RecyclerView recyclerView, RecyclerView.ViewHolder cu
             }
             try {
                 AppData data = mLaunchpadAdapter.getList().get(target.getAdapterPosition());
-                return data.canReorder();
+                if (data != null) {
+                    return data.canReorder();
+                }
             } catch (IndexOutOfBoundsException e) {
                 e.printStackTrace();
             }

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppFragment.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Locale;
 
 import io.virtualapp.R;
+import io.virtualapp.VApp;
 import io.virtualapp.VCommends;
 import io.virtualapp.abs.ui.VFragment;
 import io.virtualapp.abs.ui.VUiKit;
@@ -99,7 +100,7 @@ public boolean isSelectable(int position) {
         });
         mAdapter.setSelectionListener(count -> {
             mInstallButton.setEnabled(count > 0);
-            mInstallButton.setText(String.format(Locale.ENGLISH, getResources().getString(R.string.install_d), count));
+            mInstallButton.setText(String.format(Locale.ENGLISH, VApp.getApp().getResources().getString(R.string.install_d), count));
         });
         mInstallButton.setOnClickListener(v -> {
             Integer[] selectedIndices = mAdapter.getSelectedIndices();

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -67,7 +67,7 @@ public void onMainProcess() {
                         .withListener(() -> {
                             // nothing
                         })
-                        .build(VApp.this, "48RJJP7ZCZZBB6KMMWW5");
+                        .build(VApp.this, "TWJ6CT7F55SH7VFWNRZ2");
 
                 boolean isXposedInstalled = VirtualCore.get().isAppInstalled(XPOSED_INSTALLER_PACKAGE);
                 if (!isXposedInstalled) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -598,6 +598,9 @@ private void handleReceiver(ReceiverData data) {
             BroadcastReceiver receiver = (BroadcastReceiver) context.getClassLoader().loadClass(className).newInstance();
             mirror.android.content.BroadcastReceiver.setPendingResult.call(receiver, result);
             data.intent.setExtrasClassLoader(context.getClassLoader());
+            if (data.intent.getComponent() == null) {
+                data.intent.setComponent(data.component);
+            }
             receiver.onReceive(receiverContext, data.intent);
             if (mirror.android.content.BroadcastReceiver.getPendingResult.call(receiver) != null) {
                 result.finish();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubActivity.java
Patch:
@@ -5,6 +5,7 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 
+import com.lody.virtual.client.VClientImpl;
 import com.lody.virtual.client.core.InvocationStubManager;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.hook.proxies.am.HCallbackStub;
@@ -32,6 +33,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 // Retry to inject the HCallback to instead of the exist one.
 				InvocationStubManager.getInstance().checkEnv(HCallbackStub.class);
 				Intent intent = r.intent;
+				intent.setExtrasClassLoader(VClientImpl.get().getCurrentApplication().getClassLoader());
 				startActivity(intent);
 			} else {
                 // Start the target Activity in other process.

File: VirtualApp/lib/src/main/java/com/lody/virtual/DelegateApplication64Bit.java
Patch:
@@ -1,5 +1,6 @@
 package com.lody.virtual;
 
+import android.annotation.TargetApi;
 import android.app.Application;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
@@ -24,6 +25,7 @@
  *         <p>
  *         Copy the file to your Project.
  */
+@TargetApi(Build.VERSION_CODES.M)
 public abstract class DelegateApplication64Bit extends Application {
 
     private Application mTarget;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -160,7 +160,7 @@ public Object invoke(Object proxy, Method method, Object... args) throws Throwab
             } else if ("getType".equals(name)) {
                 return getType(methodBox, (Uri) args[0]);
             } else if ("delete".equals(name)) {
-                Uri url = (Uri) args[0];
+                Uri url = (Uri) args[start];
                 String selection = (String) args[start + 1];
                 String[] selectionArgs = (String[]) args[start + 2];
                 return delete(methodBox, url, selection, selectionArgs);

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -40,12 +40,12 @@
 import io.virtualapp.abs.ui.VUiKit;
 import io.virtualapp.home.adapters.LaunchpadAdapter;
 import io.virtualapp.home.adapters.decorations.ItemOffsetDecoration;
-import io.virtualapp.home.location.MarkerActivity;
 import io.virtualapp.home.location.VirtualLocationSettings;
 import io.virtualapp.home.models.AddAppButton;
 import io.virtualapp.home.models.AppData;
 import io.virtualapp.home.models.AppInfoLite;
 import io.virtualapp.home.models.EmptyAppData;
+import io.virtualapp.home.models.MultiplePackageAppData;
 import io.virtualapp.home.models.PackageAppData;
 import io.virtualapp.widgets.TwoGearsView;
 
@@ -204,7 +204,7 @@ private void deleteApp(int position) {
 
     private void createShortcut(int position) {
         AppData model = mLaunchpadAdapter.getList().get(position);
-        if (model instanceof PackageAppData) {
+        if (model instanceof PackageAppData || model instanceof MultiplePackageAppData) {
             mPresenter.createShortcut(model);
         }
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -446,7 +446,7 @@ public boolean createShortcut(int userId, String packageName, Intent splash, OnE
         }
         shortcutIntent.putExtra("_VA_|_intent_", targetIntent);
         shortcutIntent.putExtra("_VA_|_uri_", targetIntent.toUri(0));
-        shortcutIntent.putExtra("_VA_|_user_id_", VUserHandle.myUserId());
+        shortcutIntent.putExtra("_VA_|_user_id_", userId);
 
         Intent addIntent = new Intent();
         addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -40,12 +40,12 @@
 import io.virtualapp.abs.ui.VUiKit;
 import io.virtualapp.home.adapters.LaunchpadAdapter;
 import io.virtualapp.home.adapters.decorations.ItemOffsetDecoration;
-import io.virtualapp.home.location.MarkerActivity;
 import io.virtualapp.home.location.VirtualLocationSettings;
 import io.virtualapp.home.models.AddAppButton;
 import io.virtualapp.home.models.AppData;
 import io.virtualapp.home.models.AppInfoLite;
 import io.virtualapp.home.models.EmptyAppData;
+import io.virtualapp.home.models.MultiplePackageAppData;
 import io.virtualapp.home.models.PackageAppData;
 import io.virtualapp.widgets.TwoGearsView;
 
@@ -204,7 +204,7 @@ private void deleteApp(int position) {
 
     private void createShortcut(int position) {
         AppData model = mLaunchpadAdapter.getList().get(position);
-        if (model instanceof PackageAppData) {
+        if (model instanceof PackageAppData || model instanceof MultiplePackageAppData) {
             mPresenter.createShortcut(model);
         }
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -446,7 +446,7 @@ public boolean createShortcut(int userId, String packageName, Intent splash, OnE
         }
         shortcutIntent.putExtra("_VA_|_intent_", targetIntent);
         shortcutIntent.putExtra("_VA_|_uri_", targetIntent.toUri(0));
-        shortcutIntent.putExtra("_VA_|_user_id_", VUserHandle.myUserId());
+        shortcutIntent.putExtra("_VA_|_user_id_", userId);
 
         Intent addIntent = new Intent();
         addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -160,7 +160,7 @@ public Object invoke(Object proxy, Method method, Object... args) throws Throwab
             } else if ("getType".equals(name)) {
                 return getType(methodBox, (Uri) args[0]);
             } else if ("delete".equals(name)) {
-                Uri url = (Uri) args[0];
+                Uri url = (Uri) args[start];
                 String selection = (String) args[start + 1];
                 String[] selectionArgs = (String[]) args[start + 2];
                 return delete(methodBox, url, selection, selectionArgs);

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppFragment.java
Patch:
@@ -125,7 +125,7 @@ public void startLoading() {
     @Override
     public void loadFinish(List<AppInfo> infoList) {
         mAdapter.setList(infoList);
-        mRecyclerView.setDragSelectActive(true, 0);
+        mRecyclerView.setDragSelectActive(false, 0);
         mAdapter.setSelected(0, false);
         mProgressBar.setVisibility(View.GONE);
         mRecyclerView.setVisibility(View.VISIBLE);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -416,9 +416,9 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                 args[intentIndex - 1] = getHostPkg();
             }
-            if(intent.getScheme()!=null && intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData()!=null){
-                if(intent.getAction()!=null && intent.getAction().startsWith("android.settings.")){
-                    intent.setData(Uri.parse("package:"+getHostPkg()));
+            if (intent.getScheme() != null && intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData() != null) {
+                if (intent.getAction() != null && intent.getAction().startsWith("android.settings.")) {
+                    intent.setData(Uri.parse("package:" + getHostPkg()));
                 }
             }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/SettingsProviderHook.java
Patch:
@@ -51,6 +51,9 @@ private static boolean isSecureMethod(String method) {
 
     @Override
     public Bundle call(MethodBox methodBox, String method, String arg, Bundle extras) throws InvocationTargetException {
+        if (!VClientImpl.get().isBound()) {
+            return methodBox.call();
+        }
         int methodType = getMethodType(method);
         if (METHOD_GET == methodType) {
             String presetValue = PRE_SET_VALUES.get(arg);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -416,8 +416,8 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                 args[intentIndex - 1] = getHostPkg();
             }
-            if(intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData()!=null){
-                if(intent.getAction().startsWith("android.settings.")){
+            if(intent.getScheme()!=null && intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData()!=null){
+                if(intent.getAction()!=null && intent.getAction().startsWith("android.settings.")){
                     intent.setData(Uri.parse("package:"+getHostPkg()));
                 }
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -416,7 +416,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                 args[intentIndex - 1] = getHostPkg();
             }
-            if(intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData()!=null){
+            if(SCHEME_PACKAGE.equals(intent.getScheme()) && intent.getData()!=null){
                 if(intent.getAction().startsWith("android.settings.")){
                     intent.setData(Uri.parse("package:"+getHostPkg()));
                 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -416,8 +416,8 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
                 args[intentIndex - 1] = getHostPkg();
             }
-            if(intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData()!=null){
-                if(intent.getAction().startsWith("android.settings.")){
+            if(intent.getScheme()!=null && intent.getScheme().equals(SCHEME_PACKAGE) && intent.getData()!=null){
+                if(intent.getAction()!=null && intent.getAction().startsWith("android.settings.")){
                     intent.setData(Uri.parse("package:"+getHostPkg()));
                 }
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -312,6 +312,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
             lock.open();
             mTempLock = null;
         }
+        VirtualCore.get().getComponentDelegate().beforeApplicationCreate(mInitialApplication);
         try {
             mInstrumentation.callApplicationOnCreate(mInitialApplication);
             InvocationStubManager.getInstance().checkEnv(HCallbackStub.class);
@@ -330,6 +331,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
             }
         }
         VActivityManager.get().appDoneExecuting();
+        VirtualCore.get().getComponentDelegate().afterApplicationCreate(mInitialApplication);
     }
 
     private void setupUncaughtHandler() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VNotificationManager.java
Patch:
@@ -36,6 +36,7 @@ public INotificationManager getService() {
     }
 
     public boolean dealNotification(int id, Notification notification, String packageName) {
+        if(notification == null)return false;
         return VirtualCore.get().getHostPkg().equals(packageName)
                 || mNotificationCompat.dealNotification(id, notification, packageName);
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -626,7 +626,7 @@ private void cancelNotification(int userId, int id, String pkg) {
     private void postNotification(int userId, int id, String pkg, Notification notification) {
         id = VNotificationManager.get().dealNotificationId(id, pkg, null, userId);
         String tag = VNotificationManager.get().dealNotificationTag(id, pkg, null, userId);
-        VNotificationManager.get().dealNotification(id, notification, pkg);
+//        VNotificationManager.get().dealNotification(id, notification, pkg);
         VNotificationManager.get().addNotification(id, tag, pkg, userId);
         try {
             nm.notify(tag, id, notification);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/HCallbackStub.java
Patch:
@@ -106,7 +106,9 @@ private boolean handleLaunchActivity(Message msg) {
             IBinder token = ActivityThread.ActivityClientRecord.token.get(r);
             ActivityInfo info = saveInstance.info;
             if (VClientImpl.get().getToken() == null) {
-                VActivityManager.get().processRestarted(info.packageName, info.processName, saveInstance.userId);
+                if(!VActivityManager.get().processRestarted(info.packageName, info.processName, saveInstance.userId)){
+                    return true;
+                }
                 getH().sendMessageAtFrontOfQueue(Message.obtain(msg));
                 return false;
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VActivityManager.java
Patch:
@@ -214,9 +214,9 @@ public int bindService(Context context, Intent service, ServiceConnection connec
         }
     }
 
-    public boolean unbindService(ServiceConnection connection) {
+    public boolean unbindService(Context context, ServiceConnection connection) {
         try {
-            IServiceConnection conn = ServiceConnectionDelegate.removeDelegate(connection);
+            IServiceConnection conn = ServiceConnectionDelegate.removeDelegate(context, connection);
             return getService().unbindService(conn, VUserHandle.myUserId());
         } catch (RemoteException e) {
             return VirtualRuntime.crash(e);

File: VirtualApp/lib/src/main/java/mirror/android/app/LoadedApk.java
Patch:
@@ -25,6 +25,8 @@ public class LoadedApk {
     public static RefMethod<Application> makeApplication;
     @MethodParams({ServiceConnection.class, Context.class, Handler.class, int.class})
     public static RefMethod<IServiceConnection> getServiceDispatcher;
+    @MethodParams({Context.class, ServiceConnection.class})
+    public static RefMethod<IServiceConnection> forgetServiceDispatcher;
 
     public static class ReceiverDispatcher {
         public static Class Class = RefClass.load(ReceiverDispatcher.class, "android.app.LoadedApk$ReceiverDispatcher");

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -205,6 +205,9 @@ public void run() {
     }
 
     private void bindApplicationNoCheck(String packageName, String processName, ConditionVariable lock) {
+        if (processName == null) {
+            processName = packageName;
+        }
         mTempLock = lock;
         try {
             setupUncaughtHandler();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -154,8 +154,8 @@ public Object invoke(Object proxy, Method method, Object... args) throws Throwab
                 return getType(methodBox, (Uri) args[0]);
             } else if ("delete".equals(name)) {
                 Uri url = (Uri) args[0];
-                String selection = (String) args[1];
-                String[] selectionArgs = (String[]) args[2];
+                String selection = (String) args[start + 1];
+                String[] selectionArgs = (String[]) args[start + 2];
                 return delete(methodBox, url, selection, selectionArgs);
             } else if ("bulkInsert".equals(name)) {
                 Uri url = (Uri) args[start];

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/NotificationFixer.java
Patch:
@@ -76,6 +76,7 @@ private static Bitmap drawableToBitMap(Drawable drawable) {
         }
     }
 
+    @TargetApi(Build.VERSION_CODES.M)
     void fixIcon(Icon icon, Context appContext, boolean installed) {
         if (icon == null) {
             return;
@@ -200,7 +201,7 @@ boolean fixRemoteViewActions(Context appContext, boolean installed, final Remote
     }
 
     void fixIconImage(Resources resources, RemoteViews remoteViews, boolean hasIconBitmap, Notification notification) {
-        if (remoteViews == null) return;
+        if (remoteViews == null || notification.icon == 0) return;
         if (!mNotificationCompat.isSystemLayout(remoteViews)) {
             return;
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -41,6 +41,7 @@
 import com.lody.virtual.client.hook.utils.MethodParameterUtils;
 import com.lody.virtual.client.ipc.ActivityClientRecord;
 import com.lody.virtual.client.ipc.VActivityManager;
+import com.lody.virtual.client.ipc.VNotificationManager;
 import com.lody.virtual.client.ipc.VPackageManager;
 import com.lody.virtual.client.stub.ChooserActivity;
 import com.lody.virtual.client.stub.StubPendingActivity;
@@ -685,6 +686,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             } else {
                 VLog.e(getClass().getSimpleName(), "Unknown flag : " + args[4]);
             }
+            VNotificationManager.get().dealNotification(id, notification, getAppPkg());
             VActivityManager.get().setServiceForeground(component, token, id, notification, removeNotification);
             return 0;
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VNotificationManager.java
Patch:
@@ -36,6 +36,7 @@ public INotificationManager getService() {
     }
 
     public boolean dealNotification(int id, Notification notification, String packageName) {
+        if(notification == null)return false;
         return VirtualCore.get().getHostPkg().equals(packageName)
                 || mNotificationCompat.dealNotification(id, notification, packageName);
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -627,7 +627,7 @@ private void cancelNotification(int userId, int id, String pkg) {
     private void postNotification(int userId, int id, String pkg, Notification notification) {
         id = VNotificationManager.get().dealNotificationId(id, pkg, null, userId);
         String tag = VNotificationManager.get().dealNotificationTag(id, pkg, null, userId);
-        VNotificationManager.get().dealNotification(id, notification, pkg);
+//        VNotificationManager.get().dealNotification(id, notification, pkg);
         VNotificationManager.get().addNotification(id, tag, pkg, userId);
         try {
             nm.notify(tag, id, notification);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/NotificationCompatCompatV21.java
Patch:
@@ -1,5 +1,6 @@
 package com.lody.virtual.server.notification;
 
+import android.annotation.TargetApi;
 import android.app.Notification;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
@@ -16,6 +17,7 @@
 /**
  * @author 247321543
  */
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 /* package */ class NotificationCompatCompatV21 extends NotificationCompatCompatV14 {
 
     private static final String TAG = NotificationCompatCompatV21.class.getSimpleName();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -378,7 +378,7 @@ private void startIOUniformer() {
             NativeEngine.redirectDirectory("/data/user_de/0/" + info.packageName, info.dataDir);
         }
         String libPath = new File(VEnvironment.getDataAppPackageDirectory(info.packageName), "lib").getAbsolutePath();
-        String userLibPath = new File(VEnvironment.getUserSystemDirectory(userId), "lib").getAbsolutePath();
+        String userLibPath = new File(VEnvironment.getUserSystemDirectory(userId), info.packageName + "/lib").getAbsolutePath();
         NativeEngine.redirectDirectory(userLibPath, libPath);
         NativeEngine.redirectDirectory("/data/data/" + info.packageName + "/lib/", libPath);
         NativeEngine.redirectDirectory("/data/user/0/" + info.packageName + "/lib/", libPath);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -57,6 +57,7 @@
 import com.lody.virtual.server.secondary.BinderDelegateService;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -887,7 +888,7 @@ public List<String> getProcessPkgList(int pid) {
                 return new ArrayList<>(r.pkgList);
             }
         }
-        return null;
+        return Collections.emptyList();
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -417,6 +417,7 @@ private Context createPackageContext(String packageName) {
             Context hostContext = VirtualCore.get().getContext();
             return hostContext.createPackageContext(packageName, Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
         } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
             VirtualRuntime.crash(new RemoteException());
         }
         throw new RuntimeException();

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -60,7 +60,6 @@
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;
 
@@ -72,7 +71,7 @@
  */
 public class VActivityManagerService extends IActivityManager.Stub {
 
-    private static final boolean BROADCAST_NOT_STARTED_PKG = true;
+    private static final boolean BROADCAST_NOT_STARTED_PKG = false;
 
     private static final AtomicReference<VActivityManagerService> sService = new AtomicReference<>();
     private static final String TAG = VActivityManagerService.class.getSimpleName();

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -219,7 +219,7 @@ private void processDead(ProcessRecord record) {
             Iterator<ServiceRecord> iterator = mHistory.iterator();
             while (iterator.hasNext()) {
                 ServiceRecord r = iterator.next();
-                if (r.process.pid == record.pid) {
+                if (r.process != null && r.process.pid == record.pid) {
                     iterator.remove();
                 }
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VAccountManager.java
Patch:
@@ -10,6 +10,7 @@
 import android.os.Handler;
 import android.os.RemoteException;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.stub.AmsTask;
 import com.lody.virtual.os.VUserHandle;
@@ -32,7 +33,8 @@ public static VAccountManager get() {
     }
 
     public IAccountManager getRemote() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (VAccountManager.class) {
                 Object remote = getStubInterface();
                 mRemote = LocalProxyUtils.genProxy(IAccountManager.class, remote);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VActivityManager.java
Patch:
@@ -45,7 +45,8 @@ public static VActivityManager get() {
     }
 
     public IActivityManager getService() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (VActivityManager.class) {
                 final Object remote = getRemoteInterface();
                 mRemote = LocalProxyUtils.genProxy(IActivityManager.class, remote);
@@ -54,6 +55,7 @@ public IActivityManager getService() {
         return mRemote;
     }
 
+
     private Object getRemoteInterface() {
         return IActivityManager.Stub
                 .asInterface(ServiceManagerNative.getService(ServiceManagerNative.ACTIVITY));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VDeviceManager.java
Patch:
@@ -3,6 +3,7 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.remote.VDeviceInfo;
 import com.lody.virtual.server.IDeviceInfoManager;
@@ -23,7 +24,8 @@ public static VDeviceManager get() {
 
 
     public IDeviceInfoManager getRemote() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (this) {
                 Object remote = getRemoteInterface();
                 mRemote = LocalProxyUtils.genProxy(IDeviceInfoManager.class, remote);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VJobScheduler.java
Patch:
@@ -4,6 +4,7 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.server.IJobScheduler;
 
@@ -24,7 +25,8 @@ public static VJobScheduler get() {
     }
 
     public IJobScheduler getRemote() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (this) {
                 Object remote = getRemoteInterface();
                 mRemote = LocalProxyUtils.genProxy(IJobScheduler.class, remote);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VNotificationManager.java
Patch:
@@ -25,7 +25,8 @@ public static VNotificationManager get() {
     }
 
     public INotificationManager getService() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (VNotificationManager.class) {
                 final IBinder pmBinder = ServiceManagerNative.getService(ServiceManagerNative.NOTIFICATION);
                 mRemote = INotificationManager.Stub.asInterface(pmBinder);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VPackageManager.java
Patch:
@@ -13,6 +13,7 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.server.IPackageInstaller;
 import com.lody.virtual.server.IPackageManager;
@@ -32,7 +33,8 @@ public static VPackageManager get() {
     }
 
     public IPackageManager getInterface() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (VPackageManager.class) {
                 Object remote = getRemoteInterface();
                 mRemote = LocalProxyUtils.genProxy(IPackageManager.class, remote);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VirtualStorageManager.java
Patch:
@@ -4,6 +4,7 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.server.IVirtualStorageService;
 
@@ -23,7 +24,8 @@ public static VirtualStorageManager get() {
 
 
     public IVirtualStorageService getRemote() {
-        if (mRemote == null || !mRemote.asBinder().isBinderAlive()) {
+        if (mRemote == null ||
+                (!mRemote.asBinder().isBinderAlive() && !VirtualCore.get().isVAppProcess())) {
             synchronized (this) {
                 Object remote = getRemoteInterface();
                 mRemote = LocalProxyUtils.genProxy(IVirtualStorageService.class, remote);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/phonesubinfo/PhoneSubInfoStub.java
Patch:
@@ -37,8 +37,6 @@ protected void onBindMethods() {
 		addMethodProxy(new ReplaceLastPkgMethodProxy("getVoiceMailNumberForSubscriber"));
 		addMethodProxy(new ReplaceCallingPkgMethodProxy("getVoiceMailAlphaTag"));
 		addMethodProxy(new ReplaceLastPkgMethodProxy("getVoiceMailAlphaTagForSubscriber"));
-		addMethodProxy(new ReplaceCallingPkgMethodProxy("getIccSerialNumber"));
-		addMethodProxy(new ReplaceLastPkgMethodProxy("getIccSerialNumberForSubscriber"));
 	}
 
 }

File: VirtualApp/app/src/main/java/io/virtualapp/home/adapters/AppPagerAdapter.java
Patch:
@@ -46,7 +46,7 @@ public AppPagerAdapter(FragmentManager fm) {
         } else {
             // Fallback: only support the default storage sources
             File storageFir = Environment.getExternalStorageDirectory();
-            if (storageFir.list() != null) {
+            if (storageFir != null && storageFir.isDirectory()) {
                 titles.add(VApp.getApp().getResources().getString(R.string.external_storage));
                 dirs.add(storageFir);
             }

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -28,7 +28,6 @@
 import com.lody.virtual.client.stub.ChooseTypeAndAccountActivity;
 import com.lody.virtual.os.VUserInfo;
 import com.lody.virtual.os.VUserManager;
-import com.melnykov.fab.FloatingActionButton;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;
@@ -46,7 +45,6 @@
 import io.virtualapp.home.models.AppInfoLite;
 import io.virtualapp.home.models.EmptyAppData;
 import io.virtualapp.home.models.PackageAppData;
-import io.virtualapp.widgets.CircularAnim;
 import io.virtualapp.widgets.TwoGearsView;
 
 import static android.support.v7.widget.helper.ItemTouchHelper.ACTION_STATE_DRAG;
@@ -133,7 +131,6 @@ private void initMenu() {
             Toast.makeText(this, "The coming", Toast.LENGTH_SHORT).show();
             return false;
         });
-
         mMenuView.setOnClickListener(v -> mPopupMenu.show());
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppFragment.java
Patch:
@@ -85,7 +85,7 @@ public void onItemClick(AppInfo info, int position) {
                 int count = mAdapter.getSelectedCount();
                 if (!mAdapter.isIndexSelected(position)) {
                     if (count >= 9) {
-                        Toast.makeText(getContext(), "No more then 9 apps can be chosen at a time!", Toast.LENGTH_SHORT).show();
+                        Toast.makeText(getContext(), R.string.install_too_much_once_time, Toast.LENGTH_SHORT).show();
                         return;
                     }
                 }
@@ -99,7 +99,7 @@ public boolean isSelectable(int position) {
         });
         mAdapter.setSelectionListener(count -> {
             mInstallButton.setEnabled(count > 0);
-            mInstallButton.setText(String.format(Locale.ENGLISH, "Install (%d)", count));
+            mInstallButton.setText(String.format(Locale.ENGLISH, getResources().getString(R.string.install_d), count));
         });
         mInstallButton.setOnClickListener(v -> {
             Integer[] selectedIndices = mAdapter.getSelectedIndices();

File: VirtualApp/app/src/main/java/io/virtualapp/home/adapters/AppPagerAdapter.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import io.virtualapp.R;
 import io.virtualapp.VApp;
 import io.virtualapp.home.ListAppFragment;
 
@@ -27,7 +28,7 @@ public class AppPagerAdapter extends FragmentPagerAdapter {
 
     public AppPagerAdapter(FragmentManager fm) {
         super(fm);
-        titles.add("Clone Apps");
+        titles.add(VApp.getApp().getResources().getString(R.string.clone_apps));
         dirs.add(null);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             Context ctx = VApp.getApp();
@@ -46,7 +47,7 @@ public AppPagerAdapter(FragmentManager fm) {
             // Fallback: only support the default storage sources
             File storageFir = Environment.getExternalStorageDirectory();
             if (storageFir.list() != null) {
-                titles.add("Ghost Installation");
+                titles.add(VApp.getApp().getResources().getString(R.string.external_storage));
                 dirs.add(storageFir);
             }
         }

File: VirtualApp/app/src/main/java/io/virtualapp/home/models/AddAppButton.java
Patch:
@@ -11,9 +11,11 @@
 
 public class AddAppButton implements AppData {
 
+    private String name;
     private Drawable icon;
 
     public AddAppButton(Context context) {
+        name = context.getResources().getString(R.string.add_app);
         icon = context.getResources().getDrawable(R.drawable.ic_add_circle);
     }
 
@@ -34,7 +36,7 @@ public Drawable getIcon() {
 
     @Override
     public String getName() {
-        return "Add App";
+        return name;
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/phonesubinfo/PhoneSubInfoStub.java
Patch:
@@ -37,9 +37,8 @@ protected void onBindMethods() {
 		addMethodProxy(new ReplaceLastPkgMethodProxy("getVoiceMailNumberForSubscriber"));
 		addMethodProxy(new ReplaceCallingPkgMethodProxy("getVoiceMailAlphaTag"));
 		addMethodProxy(new ReplaceLastPkgMethodProxy("getVoiceMailAlphaTagForSubscriber"));
-		// The following method maybe need to fake
-		//addHook(new ReplaceCallingPkgHook("getDeviceId"));
 		addMethodProxy(new ReplaceCallingPkgMethodProxy("getIccSerialNumber"));
 		addMethodProxy(new ReplaceLastPkgMethodProxy("getIccSerialNumberForSubscriber"));
 	}
+
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/ServiceManagerNative.java
Patch:
@@ -24,7 +24,7 @@ public class ServiceManagerNative {
     public static final String JOB = "job";
     public static final String NOTIFICATION = "notification";
     public static final String VS = "vs";
-    public static final String CONNECTIVITY = "connectivity";
+    public static final String DEVICE = "device";
 
     public static final String SERVICE_DEF_AUTH = "virtual.service.BinderProvider";
     private static final String TAG = ServiceManagerNative.class.getSimpleName();

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/Mark.java
Patch:
@@ -6,7 +6,8 @@
 import java.lang.annotation.Target;
 
 
-@Target(ElementType.METHOD)
+@Target(ElementType.TYPE)
 @Retention(RetentionPolicy.SOURCE)
 public @interface Mark {
+    String value() default "";
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/BinderProvider.java
Patch:
@@ -17,7 +17,7 @@
 import com.lody.virtual.server.accounts.VAccountManagerService;
 import com.lody.virtual.server.am.BroadcastSystem;
 import com.lody.virtual.server.am.VActivityManagerService;
-import com.lody.virtual.server.connectivity.VConnectivityManagerService;
+import com.lody.virtual.server.device.VDeviceManagerService;
 import com.lody.virtual.server.interfaces.IServiceFetcher;
 import com.lody.virtual.server.job.VJobSchedulerService;
 import com.lody.virtual.server.notification.VNotificationManagerService;
@@ -56,8 +56,8 @@ public boolean onCreate() {
         VAppManagerService.get().scanApps();
         VAccountManagerService.systemReady();
         addService(ServiceManagerNative.ACCOUNT, VAccountManagerService.get());
-        addService(ServiceManagerNative.CONNECTIVITY, VConnectivityManagerService.get());
         addService(ServiceManagerNative.VS, VirtualStorageService.get());
+        addService(ServiceManagerNative.DEVICE, VDeviceManagerService.get());
         return true;
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -32,7 +32,7 @@
 import com.lody.virtual.client.ipc.ServiceManagerNative;
 import com.lody.virtual.client.ipc.VActivityManager;
 import com.lody.virtual.client.ipc.VPackageManager;
-import com.lody.virtual.client.stub.StubManifest;
+import com.lody.virtual.client.stub.VASettings;
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.utils.BitmapUtils;
 import com.lody.virtual.os.VUserHandle;
@@ -172,7 +172,7 @@ public void startup(Context context) throws Throwable {
             if (Looper.myLooper() != Looper.getMainLooper()) {
                 throw new IllegalStateException("VirtualCore.startup() must called in main thread.");
             }
-            StubManifest.STUB_CP_AUTHORITY = context.getPackageName() + "." + StubManifest.STUB_DEF_AUTHORITY;
+            VASettings.STUB_CP_AUTHORITY = context.getPackageName() + "." + VASettings.STUB_DEF_AUTHORITY;
             ServiceManagerNative.SERVICE_CP_AUTH = context.getPackageName() + "." + ServiceManagerNative.SERVICE_DEF_AUTH;
             this.context = context;
             mainThread = ActivityThread.currentActivityThread.call();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -41,7 +41,7 @@
 import com.lody.virtual.client.ipc.VActivityManager;
 import com.lody.virtual.client.ipc.VPackageManager;
 import com.lody.virtual.client.stub.ChooserActivity;
-import com.lody.virtual.client.stub.StubManifest;
+import com.lody.virtual.client.stub.VASettings;
 import com.lody.virtual.client.stub.StubPendingActivity;
 import com.lody.virtual.client.stub.StubPendingReceiver;
 import com.lody.virtual.client.stub.StubPendingService;
@@ -1275,7 +1275,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
                 if (targetVPid == -1) {
                     return null;
                 }
-                args[nameIdx] = StubManifest.getStubAuthority(targetVPid);
+                args[nameIdx] = VASettings.getStubAuthority(targetVPid);
                 Object holder = method.invoke(who, args);
                 if (holder == null) {
                     return null;
@@ -1467,7 +1467,7 @@ private Intent handleIntent(final Intent intent) {
             if ("android.intent.action.CREATE_SHORTCUT".equals(action)
                     || "com.android.launcher.action.INSTALL_SHORTCUT".equals(action)) {
 
-                return StubManifest.ENABLE_INNER_SHORTCUT ? handleInstallShortcutIntent(intent) : null;
+                return VASettings.ENABLE_INNER_SHORTCUT ? handleInstallShortcutIntent(intent) : null;
 
             } else if ("com.android.launcher.action.UNINSTALL_SHORTCUT".equals(action)) {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/pm/PackageManagerStub.java
Patch:
@@ -41,6 +41,7 @@ protected void onBindMethods() {
             addMethodProxy(new ResultStaticMethodProxy("setInstantAppCookie", false));
             addMethodProxy(new ResultStaticMethodProxy("isInstantApp", false));
         }
+
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/ServiceManagerNative.java
Patch:
@@ -24,6 +24,7 @@ public class ServiceManagerNative {
     public static final String JOB = "job";
     public static final String NOTIFICATION = "notification";
     public static final String VS = "vs";
+    public static final String CONNECTIVITY = "connectivity";
 
     public static final String SERVICE_DEF_AUTH = "virtual.service.BinderProvider";
     private static final String TAG = ServiceManagerNative.class.getSimpleName();

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/BinderProvider.java
Patch:
@@ -17,6 +17,7 @@
 import com.lody.virtual.server.accounts.VAccountManagerService;
 import com.lody.virtual.server.am.BroadcastSystem;
 import com.lody.virtual.server.am.VActivityManagerService;
+import com.lody.virtual.server.connectivity.VConnectivityManagerService;
 import com.lody.virtual.server.interfaces.IServiceFetcher;
 import com.lody.virtual.server.job.VJobSchedulerService;
 import com.lody.virtual.server.notification.VNotificationManagerService;
@@ -55,6 +56,7 @@ public boolean onCreate() {
         VAppManagerService.get().scanApps();
         VAccountManagerService.systemReady();
         addService(ServiceManagerNative.ACCOUNT, VAccountManagerService.get());
+        addService(ServiceManagerNative.CONNECTIVITY, VConnectivityManagerService.get());
         addService(ServiceManagerNative.VS, VirtualStorageService.get());
         return true;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/accounts/RegisteredServicesParser.java
Patch:
@@ -11,9 +11,8 @@
 import com.lody.virtual.server.pm.PackageCacheManager;
 import com.lody.virtual.server.pm.PackageSetting;
 
-class AppAccountParser implements IAccountParser {
+public class RegisteredServicesParser {
 
-    @Override
     public XmlResourceParser getParser(Context context, ServiceInfo serviceInfo, String name) {
         Bundle meta = serviceInfo.metaData;
         if (meta != null) {
@@ -29,7 +28,6 @@ public XmlResourceParser getParser(Context context, ServiceInfo serviceInfo, Str
         return null;
     }
 
-    @Override
     public Resources getResources(Context context, ApplicationInfo appInfo) throws Exception {
         PackageSetting ps = PackageCacheManager.getSetting(appInfo.packageName);
         if (ps != null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/job/VJobSchedulerService.java
Patch:
@@ -14,7 +14,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.ipc.VJobScheduler;
-import com.lody.virtual.client.stub.StubManifest;
+import com.lody.virtual.client.stub.VASettings;
 import com.lody.virtual.helper.utils.Singleton;
 import com.lody.virtual.os.VBinder;
 import com.lody.virtual.os.VEnvironment;
@@ -48,7 +48,7 @@ public class VJobSchedulerService extends IJobScheduler.Stub {
     private final ComponentName mJobProxyComponent;
 
     private VJobSchedulerService() {
-        mJobProxyComponent = new ComponentName(VirtualCore.get().getHostPkg(), StubManifest.STUB_JOB);
+        mJobProxyComponent = new ComponentName(VirtualCore.get().getHostPkg(), VASettings.STUB_JOB);
         readJobs();
     }
 
@@ -310,7 +310,7 @@ public List<JobInfo> getAllPendingJobs() throws RemoteException {
             Iterator<JobInfo> iterator = jobs.listIterator();
             while (iterator.hasNext()) {
                 JobInfo job = iterator.next();
-                if (!StubManifest.STUB_JOB.equals(job.getService().getClassName())) {
+                if (!VASettings.STUB_JOB.equals(job.getService().getClassName())) {
                     // Schedule by Host, invisible in VA.
                     iterator.remove();
                     continue;

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/PrivilegeAppOptimizer.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.content.Intent;
 
-import com.lody.virtual.client.stub.StubManifest;
+import com.lody.virtual.client.stub.VASettings;
 import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.server.am.VActivityManagerService;
 
@@ -20,7 +20,7 @@ public class PrivilegeAppOptimizer {
     private final List<String> privilegeApps = new ArrayList<>();
 
     private PrivilegeAppOptimizer() {
-        Collections.addAll(privilegeApps, StubManifest.PRIVILEGE_APPS);
+        Collections.addAll(privilegeApps, VASettings.PRIVILEGE_APPS);
     }
 
     public static PrivilegeAppOptimizer get() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VPackageManagerService.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.fixer.ComponentFixer;
-import com.lody.virtual.client.stub.StubManifest;
+import com.lody.virtual.client.stub.VASettings;
 import com.lody.virtual.helper.compat.ObjectsCompat;
 import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.remote.VParceledListSlice;
@@ -98,7 +98,7 @@ public int compare(ProviderInfo p1, ProviderInfo p2) {
 
     public VPackageManagerService() {
         Intent intent = new Intent();
-        intent.setClassName(VirtualCore.get().getHostPkg(), StubManifest.RESOLVER_ACTIVITY);
+        intent.setClassName(VirtualCore.get().getHostPkg(), VASettings.RESOLVER_ACTIVITY);
         mResolveInfo = VirtualCore.get().getUnHookPackageManager().resolveActivity(intent, 0);
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/installer/SessionParams.java
Patch:
@@ -55,7 +55,7 @@ public SessionParams(int mode) {
     }
 
 
-    public PackageInstaller.SessionParams a() {
+    public PackageInstaller.SessionParams build() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(mode);
             SessionParamsMarshmallow.installFlags.set(params, installFlags);
@@ -86,7 +86,7 @@ public PackageInstaller.SessionParams a() {
         return params;
     }
 
-    public static SessionParams a(PackageInstaller.SessionParams sessionParams) {
+    public static SessionParams create(PackageInstaller.SessionParams sessionParams) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             SessionParams params = new SessionParams(SessionParamsMarshmallow.mode.get(sessionParams));
             params.installFlags = SessionParamsMarshmallow.installFlags.get(sessionParams);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/installer/VPackageInstallerService.java
Patch:
@@ -71,6 +71,7 @@ protected VPackageInstallerService create() {
     private VPackageInstallerService() {
         mContext = VirtualCore.get().getContext();
         mInstallThread = new HandlerThread("PackageInstaller");
+        mInstallThread.start();
         mInstallHandler = new Handler(mInstallThread.getLooper());
         mCallbacks = new Callbacks(mInstallThread.getLooper());
     }

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -313,7 +313,7 @@ public void askInstallGms() {
                 .setMessage("We found that your device has been installed the Google service, whether you need to install them?")
                 .setPositiveButton(android.R.string.ok, (dialog, which) -> {
                     defer().when(() -> {
-                        GmsSupport.installGoogleService(0);
+                        GmsSupport.installGApps(0);
                     }).done((res) -> {
                         mPresenter.dataChanged();
                     });

File: VirtualApp/app/src/main/java/io/virtualapp/home/LoadingActivity.java
Patch:
@@ -77,8 +77,8 @@ protected void onCreate(Bundle savedInstanceState) {
                     e.printStackTrace();
                 }
             }
-        }).done((res) ->
-                VActivityManager.get().startActivity(intent, userId));
+            VActivityManager.get().startActivity(intent, userId);
+        });
 
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/pm/MethodProxies.java
Patch:
@@ -263,6 +263,9 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                             if (method.getReturnType() == int.class) {
                                 return 0;
                             }
+                            if (method.getReturnType() == ParceledListSlice.TYPE) {
+                                return ParceledListSliceCompat.create(new ArrayList());
+                            }
                             if (method.getReturnType() == void.class) {
                                 return 0;
                             } else {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/pm/PackageManagerStub.java
Patch:
@@ -30,7 +30,7 @@ protected void onBindMethods() {
         addMethodProxy(new ResultStaticMethodProxy("performDexOpt", true));
         addMethodProxy(new ResultStaticMethodProxy("performDexOptIfNeeded", false));
         addMethodProxy(new ResultStaticMethodProxy("performDexOptSecondary", true));
-        addMethodProxy(new ResultStaticMethodProxy("AddOnPermissionsChangeListener", 0));
+        addMethodProxy(new ResultStaticMethodProxy("addOnPermissionsChangeListener", 0));
         addMethodProxy(new ResultStaticMethodProxy("removeOnPermissionsChangeListener", 0));
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
             addMethodProxy(new ResultStaticMethodProxy("checkPackageStartable", 0));

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -730,6 +730,9 @@ public VParceledListSlice<ActivityManager.RunningServiceInfo> getServices(int ma
         synchronized (mHistory) {
             List<ActivityManager.RunningServiceInfo> services = new ArrayList<>(mHistory.size());
             for (ServiceRecord r : mHistory) {
+                if (r.process == null) {
+                    continue;
+                }
                 if (r.process.userId != userId) {
                     continue;
                 }

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -316,7 +316,6 @@ public void askInstallGms() {
                 .setMessage("We found that your device has been installed the Google service, whether you need to install them?")
                 .setPositiveButton(android.R.string.ok, (dialog, which) -> {
                     defer().when(() -> {
-                        showLoading();
                         GmsSupport.installGoogleService(0);
                     }).done((res) -> {
                         mPresenter.dataChanged();

File: VirtualApp/app/src/main/java/io/virtualapp/home/repo/AppRepository.java
Patch:
@@ -5,6 +5,7 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 
+import com.lody.virtual.GmsSupport;
 import com.lody.virtual.client.core.InstallStrategy;
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.remote.InstallResult;
@@ -49,7 +50,8 @@ public AppRepository(Context context) {
     }
 
     private static boolean isSystemApplication(PackageInfo packageInfo) {
-        return (packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
+        return (packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0
+                && !GmsSupport.isGmsFamilyPackage(packageInfo.packageName);
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/parser/PackageParserEx.java
Patch:
@@ -55,6 +55,7 @@ public static VPackage parsePackage(File packageFile) throws Throwable {
                 && p.mAppMetaData.containsKey("fake-signature")) {
             String sig = p.mAppMetaData.getString("fake-signature");
             p.mSignatures = new Signature[]{new Signature(sig)};
+            VLog.d(TAG, "Using fake-signature feature on : " + p.packageName);
         } else {
             PackageParserCompat.collectCertificates(parser, p, PackageParser.PARSE_IS_SYSTEM);
         }

File: VirtualApp/lib/src/main/java/mirror/android/bluetooth/IBluetooth.java
Patch:
@@ -16,7 +16,7 @@ public class IBluetooth {
      * @see android.bluetooth.IBluetooth.Stub
      * */
     public static class Stub {
-        public static Class<?> TYPE = RefClass.load(Stub.class, "android.net.IConnectivityManager$Stub");
+        public static Class<?> TYPE = RefClass.load(Stub.class, "android.bluetooth.IBluetooth$Stub");
         @MethodParams({IBinder.class})
         public static RefStaticMethod<IInterface> asInterface;
     }

File: VirtualApp/lib/src/main/java/mirror/android/bluetooth/IBluetooth.java
Patch:
@@ -16,7 +16,7 @@ public class IBluetooth {
      * @see android.bluetooth.IBluetooth.Stub
      * */
     public static class Stub {
-        public static Class<?> TYPE = RefClass.load(Stub.class, "android.net.IConnectivityManager$Stub");
+        public static Class<?> TYPE = RefClass.load(Stub.class, "android.bluetooth.IBluetooth$Stub");
         @MethodParams({IBinder.class})
         public static RefStaticMethod<IInterface> asInterface;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -814,8 +814,8 @@ && getHostPkg().equals(service.getComponent().getPackageName())) {
             }
             int userId = VUserHandle.myUserId();
             if (service.getBooleanExtra("_VA_|_from_inner_", false)) {
-                service = service.getParcelableExtra("_VA_|_intent_");
                 userId = service.getIntExtra("_VA_|_user_id_", userId);
+                service = service.getParcelableExtra("_VA_|_intent_");
             } else {
                 if (isServerProcess()) {
                     userId = service.getIntExtra("_VA_|_user_id_", VUserHandle.USER_NULL);
@@ -1521,7 +1521,7 @@ private void handleUninstallShortcutIntent(Intent intent) {
                 ComponentName componentName = shortcut.resolveActivity(getPM());
                 if (componentName != null) {
                     Intent newShortcutIntent = new Intent();
-                    newShortcutIntent.putExtra("_VA_|_uri_", shortcut);
+                    newShortcutIntent.putExtra("_VA_|_uri_", shortcut.toUri(0));
                     newShortcutIntent.setClassName(getHostPkg(), Constants.SHORTCUT_PROXY_ACTIVITY_NAME);
                     newShortcutIntent.removeExtra(Intent.EXTRA_SHORTCUT_INTENT);
                     intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, newShortcutIntent);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/libcore/MethodProxies.java
Patch:
@@ -68,9 +68,9 @@ public String getMethodName() {
             public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
                 if (result != null) {
                     Reflect ucred = Reflect.on(result);
-                    int uid = ucred.get("vuid");
+                    int uid = ucred.get("uid");
                     if (uid == VirtualCore.get().myUid()) {
-                        ucred.set("vuid", getBaseVUid());
+                        ucred.set("uid", getBaseVUid());
                     }
                 }
                 return result;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/libcore/MethodProxies.java
Patch:
@@ -68,9 +68,9 @@ public String getMethodName() {
             public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
                 if (result != null) {
                     Reflect ucred = Reflect.on(result);
-                    int uid = ucred.get("vuid");
+                    int uid = ucred.get("uid");
                     if (uid == VirtualCore.get().myUid()) {
-                        ucred.set("vuid", getBaseVUid());
+                        ucred.set("uid", getBaseVUid());
                     }
                 }
                 return result;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -1521,7 +1521,7 @@ private void handleUninstallShortcutIntent(Intent intent) {
                 ComponentName componentName = shortcut.resolveActivity(getPM());
                 if (componentName != null) {
                     Intent newShortcutIntent = new Intent();
-                    newShortcutIntent.putExtra("_VA_|_uri_", shortcut);
+                    newShortcutIntent.putExtra("_VA_|_uri_", shortcut.toUri(0));
                     newShortcutIntent.setClassName(getHostPkg(), Constants.SHORTCUT_PROXY_ACTIVITY_NAME);
                     newShortcutIntent.removeExtra(Intent.EXTRA_SHORTCUT_INTENT);
                     intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, newShortcutIntent);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/am/MethodProxies.java
Patch:
@@ -814,8 +814,8 @@ && getHostPkg().equals(service.getComponent().getPackageName())) {
             }
             int userId = VUserHandle.myUserId();
             if (service.getBooleanExtra("_VA_|_from_inner_", false)) {
-                service = service.getParcelableExtra("_VA_|_intent_");
                 userId = service.getIntExtra("_VA_|_user_id_", userId);
+                service = service.getParcelableExtra("_VA_|_intent_");
             } else {
                 if (isServerProcess()) {
                     userId = service.getIntExtra("_VA_|_user_id_", VUserHandle.USER_NULL);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -23,6 +23,7 @@
 import android.os.Process;
 import android.os.RemoteException;
 import android.os.StrictMode;
+import android.util.Log;
 
 import com.lody.virtual.client.core.CrashHandler;
 import com.lody.virtual.client.core.InvocationStubManager;
@@ -230,6 +231,7 @@ private void bindApplicationNoCheck(String packageName, String processName, Cond
         data.appInfo = VPackageManager.get().getApplicationInfo(packageName, 0, getUserId(vuid));
         data.processName = processName;
         data.providers = VPackageManager.get().queryContentProviders(processName, getVUid(), PackageManager.GET_META_DATA);
+        Log.i(TAG, "Binding application " + data.appInfo.packageName + " (" + data.processName + ")");
         mBoundApplication = data;
         VirtualRuntime.setupRuntime(data.processName, data.appInfo);
         Runtime.getRuntime().addShutdownHook(new Thread() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -567,6 +567,7 @@ public VParceledListSlice<ActivityManager.RunningServiceInfo> getServices(int ma
                 info.clientCount = r.getClientCount();
                 info.service = ComponentUtils.toComponentName(r.serviceInfo);
                 info.started = r.startId > 0;
+                services.add(info);
             }
             return new VParceledListSlice<>(services);
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ActivityStack.java
Patch:
@@ -556,7 +556,6 @@ private Intent startActivityProcess(int userId, ActivityRecord sourceRecord, Int
             component = ComponentUtils.toComponentName(info);
         }
         targetIntent.setType(component.flattenToString());
-        targetIntent.addFlags(intent.getFlags());
         StubActivityRecord saveInstance = new StubActivityRecord(intent, info,
                 sourceRecord != null ? sourceRecord.component : null, userId);
         saveInstance.saveToIntent(targetIntent);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -326,6 +326,7 @@ public synchronized boolean uninstallPackageAsUser(String packageName, int userI
                 mPersistenceLayer.save();
                 FileUtils.deleteDir(VEnvironment.getDataUserPackageDirectory(userId, packageName));
             }
+            return true;
         }
         return false;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/proxies/mount/MethodProxies.java
Patch:
@@ -64,7 +64,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
                 path = (String) args[1];
             }
             File file = new File(path);
-            return file.exists() && file.mkdirs() ? 0 : -1;
+            return file.exists() || file.mkdirs() ? 0 : -1;
         }
     }
 }

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -6,7 +6,6 @@
 import com.flurry.android.FlurryAgent;
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.stub.StubManifest;
-import com.tencent.bugly.crashreport.CrashReport;
 
 import io.virtualapp.delegate.MyAppRequestListener;
 import io.virtualapp.delegate.MyComponentDelegate;
@@ -42,7 +41,6 @@ protected void attachBaseContext(Context base) {
     public void onCreate() {
         gApp = this;
         super.onCreate();
-        CrashReport.initCrashReport(getApplicationContext(), "3642321b1a", false);
         VirtualCore virtualCore = VirtualCore.get();
         virtualCore.initialize(new VirtualCore.VirtualInitializer() {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/ArrayUtils.java
Patch:
@@ -122,6 +122,7 @@ public static <T> T getFirst(Object[] args, Class<?> clazz) {
 		return null;
 	}
 
+
 	public static void checkOffsetAndCount(int arrayLength, int offset, int count) throws ArrayIndexOutOfBoundsException {
 		if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
 			throw new ArrayIndexOutOfBoundsException(offset);

File: VirtualApp/lib/src/main/java/mirror/android/app/IActivityManager.java
Patch:
@@ -19,6 +19,7 @@ public class IActivityManager {
     @MethodParams({IBinder.class, String.class, int.class, int.class})
     public static RefMethod<Void> overridePendingTransition;
     public static RefMethod<Integer> startActivity;
+    public static RefMethod<Integer> startActivities;
 
     public static class ContentProviderHolder {
         public static Class<?> TYPE = RefClass.load(ContentProviderHolder.class, "android.app.IActivityManager$ContentProviderHolder");

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -110,7 +110,8 @@ public static void readOnly(String path) {
 
     public static void hook() {
         try {
-            nativeHook(Build.VERSION.SDK_INT);
+            int previewSdkInt = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ? Build.VERSION.PREVIEW_SDK_INT : 0;
+            nativeStartUniformer(Build.VERSION.SDK_INT, previewSdkInt);
         } catch (Throwable e) {
             VLog.e(TAG, VLog.getStackTraceString(e));
         }
@@ -177,7 +178,7 @@ public static void onOpenDexFileNative(String[] params) {
 
     private static native void nativeReadOnly(String path);
 
-    private static native void nativeHook(int apiLevel);
+    private static native void nativeStartUniformer(int apiLevel, int previewApiLevel);
 
     public static int onGetUid(int uid) {
         return VClientImpl.get().getBaseVUid();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -40,6 +40,7 @@
 import com.lody.virtual.client.hook.patchs.power.PowerManagerPatch;
 import com.lody.virtual.client.hook.patchs.restriction.RestrictionPatch;
 import com.lody.virtual.client.hook.patchs.search.SearchManagerPatch;
+import com.lody.virtual.client.hook.patchs.shortcut.ShortcutServicePatch;
 import com.lody.virtual.client.hook.patchs.telephony.TelephonyPatch;
 import com.lody.virtual.client.hook.patchs.telephony.TelephonyRegistryPatch;
 import com.lody.virtual.client.hook.patchs.user.UserManagerPatch;
@@ -174,6 +175,7 @@ private void injectInternal() throws Throwable {
 			}
 			if (Build.VERSION.SDK_INT >= N) {
                 addPatch(new WifiScannerPatch());
+                addPatch(new ShortcutServicePatch());
             }
             if (BuildCompat.isOreo()) {
 				addPatch(new LauncherAppsPatch());

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/RegisterReceiver.java
Patch:
@@ -125,5 +125,6 @@ public void performReceive(Intent intent, int resultCode, String data, Bundle ex
                                    boolean sticky) throws android.os.RemoteException {
             this.performReceive(intent, resultCode, data, extras, ordered, sticky, 0);
         }
+
     }
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -35,6 +35,7 @@
 import com.lody.virtual.helper.collection.ArrayMap;
 import com.lody.virtual.helper.collection.SparseArray;
 import com.lody.virtual.helper.compat.ActivityManagerCompat;
+import com.lody.virtual.helper.compat.ApplicationThreadCompat;
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.compat.IApplicationThreadCompat;
 import com.lody.virtual.helper.utils.ComponentUtils;
@@ -58,8 +59,6 @@
 import java.util.ListIterator;
 import java.util.concurrent.atomic.AtomicReference;
 
-import mirror.android.app.ApplicationThreadNative;
-
 import static android.os.Process.killProcess;
 import static com.lody.virtual.os.VUserHandle.getUserId;
 
@@ -607,7 +606,7 @@ private void attachClient(int pid, final IBinder clientBinder) {
         }
         IInterface thread = null;
         try {
-            thread = ApplicationThreadNative.asInterface.call(client.getAppThread());
+            thread = ApplicationThreadCompat.asInterface(client.getAppThread());
         } catch (RemoteException e) {
             // process has dead
         }

File: VirtualApp/lib/src/main/java/mirror/android/app/ActivityThread.java
Patch:
@@ -71,10 +71,9 @@ public static class ProviderClientRecord {
         public static RefObject<IInterface> mProvider;
     }
 
+
     public static class ProviderClientRecordJB {
         public static Class<?> TYPE = RefClass.load(ProviderClientRecordJB.class, "android.app.ActivityThread$ProviderClientRecord");
-        @MethodReflectParams({"android.app.ActivityThread", "[Ljava.lang.String;", "android.content.IContentProvider", "android.content.ContentProvider", "android.app.IActivityManager$ContentProviderHolder"})
-        public static RefConstructor<?> ctor;
         public static RefObject<Object> mHolder;
         public static RefObject<IInterface> mProvider;
     }

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -43,12 +43,12 @@ protected void attachBaseContext(Context base) {
     public void onCreate() {
         gApp = this;
         super.onCreate();
+        CrashReport.initCrashReport(getApplicationContext(), "3642321b1a", false);
         VirtualCore virtualCore = VirtualCore.get();
         virtualCore.initialize(new VirtualCore.VirtualInitializer() {
 
             @Override
             public void onMainProcess() {
-                CrashReport.initCrashReport(getApplicationContext(), "3642321b1a", false);
                 Once.initialise(VApp.this);
                 new FlurryAgent.Builder()
                         .withLogEnabled(true)
@@ -73,7 +73,6 @@ public void onVirtualProcess() {
 
             @Override
             public void onServerProcess() {
-                CrashReport.initCrashReport(getApplicationContext(), "3642321b1a", false);
                 virtualCore.setAppRequestListener(new MyAppRequestListener(VApp.this));
                 virtualCore.addVisibleOutsidePackage("com.tencent.mobileqq");
                 virtualCore.addVisibleOutsidePackage("com.tencent.mobileqqi");

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -454,13 +454,13 @@ private void notifyAppUninstalled(PackageSetting setting, int userId) {
 
     private void sendInstalledBroadcast(String packageName) {
         Intent intent = new Intent(Intent.ACTION_PACKAGE_ADDED);
-        intent.setData(Uri.parse("package://" + packageName));
+        intent.setData(Uri.parse("package:" + packageName));
         VActivityManagerService.get().sendBroadcastAsUser(intent, VUserHandle.ALL);
     }
 
     private void sendUninstalledBroadcast(String packageName) {
         Intent intent = new Intent(Intent.ACTION_PACKAGE_REMOVED);
-        intent.setData(Uri.parse("package://" + packageName));
+        intent.setData(Uri.parse("package:" + packageName));
         VActivityManagerService.get().sendBroadcastAsUser(intent, VUserHandle.ALL);
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/delegate/MyPhoneInfoDelegate.java
Patch:
@@ -9,17 +9,17 @@
 public class MyPhoneInfoDelegate implements PhoneInfoDelegate {
 
     @Override
-    public String getDeviceId(String oldDeviceId, int vuserId) {
+    public String getDeviceId(String oldDeviceId, int userId) {
         return oldDeviceId;
     }
 
     @Override
-    public String getBluetoothAddress(String oldAddress, int vuserId) {
+    public String getBluetoothAddress(String oldAddress, int userId) {
         return oldAddress;
     }
 
     @Override
-    public String getMacAddress(String oldAddress, int vuserId) {
+    public String getMacAddress(String oldAddress, int userId) {
         return oldAddress;
     }
 }

File: VirtualApp/app/src/main/java/io/virtualapp/home/adapters/CloneAppListAdapter.java
Patch:
@@ -70,10 +70,10 @@ public void onBindViewHolder(ViewHolder holder, int position) {
         holder.iconView.setImageDrawable(info.icon);
         holder.nameView.setText(info.name);
         if (isIndexSelected(position)) {
-            holder.itemView.setAlpha(1f);
+            holder.iconView.setAlpha(1f);
             holder.appCheckView.setImageResource(R.drawable.ic_check);
         } else {
-            holder.itemView.setAlpha(0.65f);
+            holder.iconView.setAlpha(0.65f);
             holder.appCheckView.setImageResource(R.drawable.ic_no_check);
         }
         if (info.cloneCount > 0) {

File: VirtualApp/lib/src/main/java/mirror/java/lang/ThreadGroupN.java
Patch:
@@ -9,6 +9,7 @@
  */
 public class ThreadGroupN {
     public static Class<?> Class = RefClass.load(ThreadGroupN.class, java.lang.ThreadGroup.class);
+    public static RefObject<Integer> ngroups;
     public static RefObject<java.lang.ThreadGroup[]> groups;
     public static RefObject<java.lang.ThreadGroup> parent;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/natives/NativeMethods.java
Patch:
@@ -49,12 +49,13 @@ public static void init() {
                 // ignore
             }
         }
+        // HuaWei
         if (gCameraNativeSetup == null) {
             try {
-                gCameraNativeSetup = Camera.class.getDeclaredMethod("native_setup", Object.class, int.class);
+                gCameraNativeSetup = Camera.class.getDeclaredMethod("native_setup", Object.class, int.class, int.class, String.class, boolean.class);
                 gCameraMethodType = 3;
             } catch (NoSuchMethodException e) {
-                e.printStackTrace();
+                // ignore
             }
         }
         if (gCameraNativeSetup != null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -694,7 +694,7 @@ public int[] getPackageInstalledUsers(String packageName) {
         }
     }
 
-    public abstract class PackageObserver extends IPackageObserver.Stub {}
+    public abstract static class PackageObserver extends IPackageObserver.Stub {}
 
     public void registerObserver(IPackageObserver observer) {
         try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -21,6 +21,7 @@
 import android.os.Looper;
 import android.os.Message;
 import android.os.Process;
+import android.os.RemoteException;
 import android.os.StrictMode;
 
 import com.lody.virtual.client.core.CrashHandler;
@@ -362,8 +363,9 @@ private Context createPackageContext(String packageName) {
             Context hostContext = VirtualCore.get().getContext();
             return hostContext.createPackageContext(packageName, Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
         } catch (PackageManager.NameNotFoundException e) {
-            throw new RuntimeException(e);
+            VirtualRuntime.crash(new RemoteException());
         }
+        throw new RuntimeException();
     }
 
     private Object fixBoundApp(AppBindData data) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VPackageManagerService.java
Patch:
@@ -404,14 +404,13 @@ private ResolveInfo chooseBestActivity(Intent intent, String resolvedType, int f
                 if (ri != null) {
                     return ri;
                 }
-                return mResolveInfo;
+                return query.get(0);
             }
         }
         return null;
     }
 
     private ResolveInfo findPreferredActivity(Intent intent, String resolvedType, int flags, List<ResolveInfo> query, int priority) {
-        // TODO
         return null;
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -134,7 +134,7 @@ private void deleteApp(int position) {
     private void createShortcut(int position) {
         AppData model = mLaunchpadAdapter.getList().get(position);
         if (model instanceof PackageAppData) {
-            mPresenter.createShortcut((PackageAppData) model);
+            mPresenter.createShortcut(model);
         }
     }
 

File: VirtualApp/app/src/main/java/io/virtualapp/home/models/PackageAppData.java
Patch:
@@ -5,7 +5,6 @@
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
 
-import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.remote.InstalledAppInfo;
 
 /**
@@ -23,7 +22,7 @@ public class PackageAppData implements AppData {
     public PackageAppData(Context context, InstalledAppInfo installedAppInfo) {
         this.packageName = installedAppInfo.packageName;
         this.isFirstOpen = !installedAppInfo.isLaunched(0);
-        loadData(context, installedAppInfo.getApplicationInfo(VUserHandle.USER_OWNER));
+        loadData(context, installedAppInfo.getApplicationInfo(installedAppInfo.getInstalledUsers()[0]));
     }
 
     private void loadData(Context context, ApplicationInfo appInfo) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/DeletePackage.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
-import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
 
@@ -24,7 +23,7 @@ public String getName() {
 	public Object call(Object who, Method method, Object... args) throws Throwable {
 		String pkgName = (String) args[0];
 		try {
-            VirtualCore.get().uninstallPackage(pkgName, VUserHandle.myUserId());
+            VirtualCore.get().uninstallPackage(pkgName);
             IPackageDeleteObserver2 observer = (IPackageDeleteObserver2) args[1];
             if (observer != null) {
                 observer.onPackageDeleted(pkgName, 0, "done.");

File: VirtualApp/app/src/main/java/io/virtualapp/widgets/DragSelectRecyclerView.java
Patch:
@@ -213,7 +213,6 @@ public boolean dispatchTouchEvent(MotionEvent e) {
             return super.dispatchTouchEvent(e);
 
         if (mDragSelectActive) {
-            final int itemPosition = getItemPosition(e);
             if (e.getAction() == MotionEvent.ACTION_UP) {
                 mDragSelectActive = false;
                 mInTopHotspot = false;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -17,6 +17,7 @@
 import com.lody.virtual.client.hook.patchs.clipboard.ClipBoardPatch;
 import com.lody.virtual.client.hook.patchs.connectivity.ConnectivityPatch;
 import com.lody.virtual.client.hook.patchs.content.ContentServicePatch;
+import com.lody.virtual.client.hook.patchs.context_hub.ContextHubServicePatch;
 import com.lody.virtual.client.hook.patchs.display.DisplayPatch;
 import com.lody.virtual.client.hook.patchs.dropbox.DropBoxManagerPatch;
 import com.lody.virtual.client.hook.patchs.graphics.GraphicsStatsPatch;
@@ -141,6 +142,7 @@ private void injectInternal() throws Throwable {
 				addPatch(new VibratorPatch());
 				addPatch(new WifiManagerPatch());
 				addPatch(new BluetoothPatch());
+				addPatch(new ContextHubServicePatch());
 			}
 			if (Build.VERSION.SDK_INT >= JELLY_BEAN_MR1) {
 				addPatch(new UserManagerPatch());

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/AccountManagerPatch.java
Patch:
@@ -21,7 +21,7 @@ public class AccountManagerPatch extends PatchBinderDelegate {
 	private static VAccountManager Mgr = VAccountManager.get();
 
 	public AccountManagerPatch() {
-		super(IAccountManager.Stub.TYPE, Context.ACCOUNT_SERVICE);
+		super(IAccountManager.Stub.asInterface, Context.ACCOUNT_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/alarm/AlarmManagerPatch.java
Patch:
@@ -20,7 +20,7 @@
 public class AlarmManagerPatch extends PatchBinderDelegate {
 
 	public AlarmManagerPatch() {
-		super(IAlarmManager.Stub.TYPE, Context.ALARM_SERVICE);
+		super(IAlarmManager.Stub.asInterface, Context.ALARM_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/appops/AppOpsManagerPatch.java
Patch:
@@ -24,7 +24,7 @@
 public class AppOpsManagerPatch extends PatchBinderDelegate {
 
 	public AppOpsManagerPatch() {
-		super(IAppOpsService.Stub.TYPE, Context.APP_OPS_SERVICE);
+		super(IAppOpsService.Stub.asInterface, Context.APP_OPS_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/appwidget/AppWidgetManagerPatch.java
Patch:
@@ -18,7 +18,7 @@
 public class AppWidgetManagerPatch extends PatchBinderDelegate {
 
 	public AppWidgetManagerPatch() {
-		super(IAppWidgetService.Stub.TYPE, Context.APPWIDGET_SERVICE);
+		super(IAppWidgetService.Stub.asInterface, Context.APPWIDGET_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/audio/AudioManagerPatch.java
Patch:
@@ -15,7 +15,7 @@
 
 public class AudioManagerPatch extends PatchBinderDelegate {
 	public AudioManagerPatch() {
-		super(IAudioService.Stub.TYPE, Context.AUDIO_SERVICE);
+		super(IAudioService.Stub.asInterface, Context.AUDIO_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/backup/BackupManagerPatch.java
Patch:
@@ -14,7 +14,7 @@
  */
 public class BackupManagerPatch extends PatchBinderDelegate {
 	public BackupManagerPatch() {
-		super(IBackupManager.Stub.TYPE, "backup");
+		super(IBackupManager.Stub.asInterface, "backup");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/bluetooth/BluetoothPatch.java
Patch:
@@ -15,7 +15,7 @@ public class BluetoothPatch extends PatchBinderDelegate {
             "bluetooth";
 
     public BluetoothPatch() {
-        super(IBluetooth.Stub.TYPE, SERVICE_NAME);
+        super(IBluetooth.Stub.asInterface, SERVICE_NAME);
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/connectivity/ConnectivityPatch.java
Patch:
@@ -12,6 +12,6 @@
 public class ConnectivityPatch extends PatchBinderDelegate {
 
     public ConnectivityPatch() {
-        super(IConnectivityManager.Stub.TYPE, Context.CONNECTIVITY_SERVICE);
+        super(IConnectivityManager.Stub.asInterface, Context.CONNECTIVITY_SERVICE);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/content/ContentServicePatch.java
Patch:
@@ -13,6 +13,6 @@
 public class ContentServicePatch extends PatchBinderDelegate {
 
     public ContentServicePatch() {
-        super(IContentService.Stub.TYPE, "content");
+        super(IContentService.Stub.asInterface, "content");
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/dropbox/DropBoxManagerPatch.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class DropBoxManagerPatch extends PatchBinderDelegate {
 	public DropBoxManagerPatch() {
-		super(IDropBoxManagerService.Stub.TYPE, Context.DROPBOX_SERVICE);
+		super(IDropBoxManagerService.Stub.asInterface, Context.DROPBOX_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/graphics/GraphicsStatsPatch.java
Patch:
@@ -12,7 +12,7 @@
 public class GraphicsStatsPatch extends PatchBinderDelegate {
 
 	public GraphicsStatsPatch() {
-		super(IGraphicsStats.Stub.TYPE, "graphicsstats");
+		super(IGraphicsStats.Stub.asInterface, "graphicsstats");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/imms/MmsPatch.java
Patch:
@@ -13,7 +13,7 @@
 public class MmsPatch extends PatchBinderDelegate {
 
 	public MmsPatch() {
-		super(IMms.Stub.TYPE, "imms");
+		super(IMms.Stub.asInterface, "imms");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/isms/ISmsPatch.java
Patch:
@@ -15,7 +15,7 @@
 public class ISmsPatch extends PatchBinderDelegate {
 
     public ISmsPatch() {
-        super(ISms.Stub.TYPE, "isms");
+        super(ISms.Stub.asInterface, "isms");
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/isub/ISubPatch.java
Patch:
@@ -12,7 +12,7 @@
 public class ISubPatch extends PatchBinderDelegate {
 
     public ISubPatch() {
-        super(ISub.Stub.TYPE, "isub");
+        super(ISub.Stub.asInterface, "isub");
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/job/JobPatch.java
Patch:
@@ -22,7 +22,7 @@
 public class JobPatch extends PatchBinderDelegate {
 
 	public JobPatch() {
-		super(IJobScheduler.Stub.TYPE, Context.JOB_SCHEDULER_SERVICE);
+		super(IJobScheduler.Stub.asInterface, Context.JOB_SCHEDULER_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/location/LocationManagerPatch.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class LocationManagerPatch extends PatchBinderDelegate {
 	public LocationManagerPatch() {
-		super(ILocationManager.Stub.TYPE, Context.LOCATION_SERVICE);
+		super(ILocationManager.Stub.asInterface, Context.LOCATION_SERVICE);
 	}
 
 	private static class BaseHook extends ReplaceLastPkgHook {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/media/router/MediaRouterServicePatch.java
Patch:
@@ -19,6 +19,6 @@
 public class MediaRouterServicePatch extends PatchBinderDelegate {
 
 	public MediaRouterServicePatch() {
-		super(IMediaRouterService.Stub.TYPE, Context.MEDIA_ROUTER_SERVICE);
+		super(IMediaRouterService.Stub.asInterface, Context.MEDIA_ROUTER_SERVICE);
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/media/session/SessionManagerPatch.java
Patch:
@@ -17,6 +17,6 @@
 public class SessionManagerPatch extends PatchBinderDelegate {
 
 	public SessionManagerPatch() {
-		super(ISessionManager.Stub.TYPE, Context.MEDIA_SESSION_SERVICE);
+		super(ISessionManager.Stub.asInterface, Context.MEDIA_SESSION_SERVICE);
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/mount/MountServicePatch.java
Patch:
@@ -12,6 +12,6 @@
 public class MountServicePatch extends PatchBinderDelegate {
 
 	public MountServicePatch() {
-		super(IMountService.Stub.TYPE, "mount");
+		super(IMountService.Stub.asInterface, "mount");
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/network/NetworkManagementPatch.java
Patch:
@@ -14,7 +14,7 @@
 NetworkManagementPatch extends PatchBinderDelegate {
 
 	public NetworkManagementPatch() {
-		super(INetworkManagementService.Stub.TYPE, "network_management");
+		super(INetworkManagementService.Stub.asInterface, "network_management");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/persistent_data_block/PersistentDataBlockServicePatch.java
Patch:
@@ -11,7 +11,7 @@
 public class PersistentDataBlockServicePatch extends PatchBinderDelegate {
 
 	public PersistentDataBlockServicePatch() {
-		super(IPersistentDataBlockService.Stub.TYPE, "persistent_data_block");
+		super(IPersistentDataBlockService.Stub.asInterface, "persistent_data_block");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/PhoneSubInfoPatch.java
Patch:
@@ -13,7 +13,7 @@
 @Patch({GetDeviceId.class, GetDeviceIdForSubscriber.class})
 public class PhoneSubInfoPatch extends PatchBinderDelegate {
 	public PhoneSubInfoPatch() {
-		super(IPhoneSubInfo.Stub.TYPE, "iphonesubinfo");
+		super(IPhoneSubInfo.Stub.asInterface, "iphonesubinfo");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/power/PowerManagerPatch.java
Patch:
@@ -18,7 +18,7 @@
 public class PowerManagerPatch extends PatchBinderDelegate {
 
 	public PowerManagerPatch() {
-		super(IPowerManager.Stub.TYPE, Context.POWER_SERVICE);
+		super(IPowerManager.Stub.asInterface, Context.POWER_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/restriction/RestrictionPatch.java
Patch:
@@ -16,7 +16,7 @@
 
 public class RestrictionPatch extends PatchBinderDelegate {
 	public RestrictionPatch() {
-		super(IRestrictionsManager.Stub.TYPE, Context.RESTRICTIONS_SERVICE);
+		super(IRestrictionsManager.Stub.asInterface, Context.RESTRICTIONS_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/search/SearchManagerPatch.java
Patch:
@@ -19,7 +19,7 @@
 public class SearchManagerPatch extends PatchBinderDelegate {
 
 	public SearchManagerPatch() {
-		super(ISearchManager.Stub.TYPE, Context.SEARCH_SERVICE);
+		super(ISearchManager.Stub.asInterface, Context.SEARCH_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/telephony/TelephonyPatch.java
Patch:
@@ -16,7 +16,7 @@
 public class TelephonyPatch extends PatchBinderDelegate {
 
 	public TelephonyPatch() {
-		super(ITelephony.Stub.TYPE, Context.TELEPHONY_SERVICE);
+		super(ITelephony.Stub.asInterface, Context.TELEPHONY_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/telephony/TelephonyRegistryPatch.java
Patch:
@@ -9,7 +9,7 @@
 public class TelephonyRegistryPatch extends PatchBinderDelegate {
 
 	public TelephonyRegistryPatch() {
-		super(ITelephonyRegistry.Stub.TYPE, "telephony.registry");
+		super(ITelephonyRegistry.Stub.asInterface, "telephony.registry");
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/user/UserManagerPatch.java
Patch:
@@ -20,7 +20,7 @@
 public class UserManagerPatch extends PatchBinderDelegate {
 
 	public UserManagerPatch() {
-		super(IUserManager.Stub.TYPE, Context.USER_SERVICE);
+		super(IUserManager.Stub.asInterface, Context.USER_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/wifi/WifiManagerPatch.java
Patch:
@@ -23,7 +23,7 @@
 @Patch({GetBatchedScanResults.class, GetScanResults.class, SetWifiEnabled.class})
 public class WifiManagerPatch extends PatchBinderDelegate {
     public WifiManagerPatch() {
-        super(IWifiManager.Stub.TYPE, Context.WIFI_SERVICE);
+        super(IWifiManager.Stub.asInterface, Context.WIFI_SERVICE);
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/window/WindowManagerPatch.java
Patch:
@@ -20,7 +20,7 @@
 public class WindowManagerPatch extends PatchBinderDelegate {
 
 	public WindowManagerPatch() {
-		super(IWindowManager.Stub.TYPE, Context.WINDOW_SERVICE);
+		super(IWindowManager.Stub.asInterface, Context.WINDOW_SERVICE);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/ReplaceUidHook.java
Patch:
@@ -1,7 +1,5 @@
 package com.lody.virtual.client.hook.base;
 
-import android.os.Process;
-
 import java.lang.reflect.Method;
 
 public class ReplaceUidHook extends StaticHook {
@@ -15,7 +13,7 @@ public ReplaceUidHook(String name, int index) {
     @Override
     public boolean beforeCall(Object who, Method method, Object... args) {
         int uid = (int) args[index];
-        if (uid == Process.myUid()) {
+        if (uid == getVUid() || uid == getBaseVUid()) {
             args[index] = getRealUid();
         }
         return super.beforeCall(who, method, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubManifest.java
Patch:
@@ -9,7 +9,6 @@
 public class StubManifest {
     public static final String STUB_DEF_AUTHORITY = "virtual_stub_";
     public static final boolean ENABLE_GMS = false;
-    public static String IDENTITY_PREFIX = "_VA_|";
     public static String STUB_ACTIVITY = StubActivity.class.getName();
     public static String STUB_DIALOG = StubDialog.class.getName();
     public static String STUB_CP = StubContentProvider.class.getName();

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/ComponentUtils.java
Patch:
@@ -106,7 +106,8 @@ public static Intent redirectBroadcastIntent(Intent intent, int userId) {
         String pkg = intent.getPackage();
         if (component != null) {
             newIntent.putExtra("_VA_|_user_id_", userId);
-            newIntent.setAction(String.format("_VA_%s_%s", component.getPackageName(), component.getClassName()));
+//            newIntent.setAction(String.format("_VA_%s_%s", component.getPackageName(), component.getClassName()));
+            newIntent.setAction(SpecialComponentList.hostAction(component.getPackageName(), component.getClassName()));
             newIntent.putExtra("_VA_|_component_", component);
             newIntent.putExtra("_VA_|_intent_", new Intent(intent));
         } else if (pkg != null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/BroadcastSystem.java
Patch:
@@ -189,7 +189,8 @@ public void startApp(VPackage p) {
                 receivers = new ArrayList<>();
                 mReceivers.put(p.packageName, receivers);
             }
-            String componentAction = String.format("_VA_%s_%s", info.packageName, info.name);
+//            String componentAction = String.format("_VA_%s_%s", info.packageName, info.name);
+            String componentAction = SpecialComponentList.hostAction(info.packageName, info.name);
             IntentFilter componentFilter = new IntentFilter(componentAction);
             BroadcastReceiver r = new StaticBroadcastReceiver(setting.appId, info, componentFilter);
             mContext.registerReceiver(r, componentFilter, null, mScheduler);

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/ComponentUtils.java
Patch:
@@ -106,7 +106,8 @@ public static Intent redirectBroadcastIntent(Intent intent, int userId) {
         String pkg = intent.getPackage();
         if (component != null) {
             newIntent.putExtra("_VA_|_user_id_", userId);
-            newIntent.setAction(String.format("_VA_%s_%s", component.getPackageName(), component.getClassName()));
+//            newIntent.setAction(String.format("_VA_%s_%s", component.getPackageName(), component.getClassName()));
+            newIntent.setAction(SpecialComponentList.hostAction(component.getPackageName(), component.getClassName()));
             newIntent.putExtra("_VA_|_component_", component);
             newIntent.putExtra("_VA_|_intent_", new Intent(intent));
         } else if (pkg != null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/BroadcastSystem.java
Patch:
@@ -189,7 +189,8 @@ public void startApp(VPackage p) {
                 receivers = new ArrayList<>();
                 mReceivers.put(p.packageName, receivers);
             }
-            String componentAction = String.format("_VA_%s_%s", info.packageName, info.name);
+//            String componentAction = String.format("_VA_%s_%s", info.packageName, info.name);
+            String componentAction = SpecialComponentList.hostAction(info.packageName, info.name);
             IntentFilter componentFilter = new IntentFilter(componentAction);
             BroadcastReceiver r = new StaticBroadcastReceiver(setting.appId, info, componentFilter);
             mContext.registerReceiver(r, componentFilter, null, mScheduler);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ActivityStack.java
Patch:
@@ -321,7 +321,7 @@ int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBinder re
             }
             if (taskMarked) {
                 synchronized (mHistory) {
-                    scheduleFinishMarkedActivity();
+                    scheduleFinishMarkedActivityLocked();
                 }
             }
             if (reuseTask.isFinishing()) {
@@ -363,7 +363,7 @@ private Intent startActivityInNewTaskLocked(int userId, Intent intent, ActivityI
         return destIntent;
     }
 
-    private void scheduleFinishMarkedActivity() {
+    private void scheduleFinishMarkedActivityLocked() {
         int N = mHistory.size();
         while (N-- > 0) {
             final TaskRecord task = mHistory.valueAt(N);

File: VirtualApp/lib/src/main/java/android/content/pm/PackageParser.java
Patch:
@@ -47,7 +47,6 @@ public class Package {
         public final ArrayList<Permission> permissions = new ArrayList<Permission>(0);
         public final ArrayList<PermissionGroup> permissionGroups = new ArrayList<PermissionGroup>(0);
         public final ArrayList<String> requestedPermissions = new ArrayList<String>();
-        public ArrayList<String> protectedBroadcasts;
         public Signature[] mSignatures;
         public Bundle mAppMetaData;
         public Object mExtras;

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomePresenterImpl.java
Patch:
@@ -53,7 +53,7 @@ public void launchApp(AppData data) {
                 PackageAppData appData = (PackageAppData) data;
                 appData.isFirstOpen = false;
                 LoadingActivity.launch(mActivity, appData.packageName, 0);
-            } else {
+            } else if (data instanceof MultiplePackageAppData) {
                 MultiplePackageAppData multipleData = (MultiplePackageAppData) data;
                 multipleData.isFirstOpen = false;
                 LoadingActivity.launch(mActivity, multipleData.appInfo.packageName, ((MultiplePackageAppData) data).userId);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/BinderProvider.java
Patch:
@@ -46,14 +46,14 @@ public boolean onCreate() {
         VAppManagerService.systemReady();
         addService(ServiceManagerNative.APP, VAppManagerService.get());
         BroadcastSystem.attach(VActivityManagerService.get(), VAppManagerService.get());
-        VAccountManagerService.systemReady();
-        addService(ServiceManagerNative.ACCOUNT, VAccountManagerService.get());
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             addService(ServiceManagerNative.JOB, VJobSchedulerService.get());
         }
         VNotificationManagerService.systemReady(context);
         addService(ServiceManagerNative.NOTIFICATION, VNotificationManagerService.get());
         VAppManagerService.get().scanApps();
+        VAccountManagerService.systemReady();
+        addService(ServiceManagerNative.ACCOUNT, VAccountManagerService.get());
         return true;
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/delegate/InstrumentationDelegate.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class InstrumentationDelegate extends Instrumentation {
 
-	private Instrumentation base;
+	protected Instrumentation base;
 
 	public InstrumentationDelegate(Instrumentation base) {
 		this.base = base;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubManifest.java
Patch:
@@ -8,6 +8,7 @@
 
 public class StubManifest {
     public static final String STUB_DEF_AUTHORITY = "virtual_stub_";
+    public static String IDENTITY_PREFIX = "_VA_|";
     public static String STUB_ACTIVITY = StubActivity.class.getName();
     public static String STUB_DIALOG = StubDialog.class.getName();
     public static String STUB_CP = StubContentProvider.class.getName();
@@ -46,4 +47,5 @@ public static String getStubCP(int index) {
     public static String getStubAuthority(int index) {
         return String.format(Locale.ENGLISH, "%s%d", STUB_CP_AUTHORITY, index);
     }
+
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubPendingService.java
Patch:
@@ -17,6 +17,7 @@ public IBinder onBind(Intent intent) {
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
+        // _VA_|_from_inner_ marked
         startService(intent);
         stopSelf();
         return START_NOT_STICKY;

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeContract.java
Patch:
@@ -48,9 +48,9 @@
 
 		void addApp(AppInfoLite info);
 
-		void deleteApp(AppData model);
+		void deleteApp(AppData data);
 
-        void createShortcut(AppData model);
+        void createShortcut(AppData data);
     }
 
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/Version.java
Patch:
@@ -10,7 +10,7 @@
 
 public class Version {
 
-    public static final String VERSION_NAME = "Build-747-01";
+    public static final String VERSION_NAME = "Build-821-03";
 
-    public static final int VERSION_CODE = 7470001;
+    public static final int VERSION_CODE = 8210003;
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -17,7 +17,6 @@
 import com.lody.virtual.helper.utils.VLog;
 import com.lody.virtual.os.VEnvironment;
 import com.lody.virtual.os.VUserHandle;
-import com.lody.virtual.os.VUserManager;
 import com.lody.virtual.remote.InstallResult;
 import com.lody.virtual.remote.InstalledAppInfo;
 import com.lody.virtual.server.IAppManager;
@@ -285,6 +284,7 @@ public boolean uninstallPackage(String packageName, int userId) {
                     return true;
                 } else {
                     setting.setInstalled(userId, false);
+                    mPersistenceLayer.save();
                     FileUtils.deleteDir(VEnvironment.getDataUserPackageDirectory(userId, packageName));
                 }
             }

File: VirtualApp/app/src/main/java/io/virtualapp/delegate/MyAppRequestListener.java
Patch:
@@ -24,7 +24,7 @@ public MyAppRequestListener(Context context) {
     @Override
     public void onRequestInstall(String path) {
         Toast.makeText(context, "Installing: " + path, Toast.LENGTH_SHORT).show();
-        InstallResult res = VirtualCore.get().installApp(path, InstallStrategy.UPDATE_IF_EXIST);
+        InstallResult res = VirtualCore.get().installPackage(path, InstallStrategy.UPDATE_IF_EXIST);
         if (res.isSuccess) {
             try {
                 VirtualCore.get().preOpt(res.packageName);

File: VirtualApp/app/src/main/java/io/virtualapp/delegate/MyTaskDescriptionDelegate.java
Patch:
@@ -5,7 +5,7 @@
 import android.os.Build;
 
 import com.lody.virtual.client.hook.delegate.TaskDescriptionDelegate;
-import com.lody.virtual.os.VUserManager;
+import com.lody.virtual.os.VUserHandle;
 
 
 /**
@@ -15,7 +15,7 @@
 public class MyTaskDescriptionDelegate implements TaskDescriptionDelegate {
     @Override
     public ActivityManager.TaskDescription getTaskDescription(ActivityManager.TaskDescription oldTaskDescription) {
-        String labelPrefix = "[" + VUserManager.get().getUserName() + "] ";
+        String labelPrefix = "[Space " + VUserHandle.myUserId() + 1 + "] ";
 
         if (!oldTaskDescription.getLabel().startsWith(labelPrefix)) {
             // Is it really necessary?

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppContract.java
Patch:
@@ -4,7 +4,7 @@
 
 import io.virtualapp.abs.BasePresenter;
 import io.virtualapp.abs.BaseView;
-import io.virtualapp.home.models.AppData;
+import io.virtualapp.home.models.AppInfo;
 
 /**
  * @author Lody
@@ -15,7 +15,7 @@ interface ListAppView extends BaseView<ListAppPresenter> {
 
         void startLoading();
 
-        void loadFinish(List<AppData> models);
+        void loadFinish(List<AppInfo> infoList);
     }
 
     interface ListAppPresenter extends BasePresenter {

File: VirtualApp/app/src/main/java/io/virtualapp/home/repo/PackageAppDataStorage.java
Patch:
@@ -43,7 +43,7 @@ public void acquire(String packageName, Callback<PackageAppData> callback) {
     }
 
     private PackageAppData loadAppData(String packageName) {
-        InstalledAppInfo setting = VirtualCore.get().getInstalledAppInfo(packageName);
+        InstalledAppInfo setting = VirtualCore.get().getInstalledAppInfo(packageName, 0);
         if (setting != null) {
             PackageAppData data = new PackageAppData(VApp.getApp(), setting);
             synchronized (packageDataMap) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/NativeEngine.java
Patch:
@@ -97,7 +97,7 @@ public class NativeEngine {
     }
 
     public static void startDexOverride() {
-        List<InstalledAppInfo> installedAppInfos = VirtualCore.get().getInstalledApps();
+        List<InstalledAppInfo> installedAppInfos = VirtualCore.get().getInstalledApps(0);
         sDexOverrideMap = new HashMap<>(installedAppInfos.size());
         for (InstalledAppInfo info : installedAppInfos) {
             try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/fixer/ComponentFixer.java
Patch:
@@ -7,9 +7,8 @@
 import android.text.TextUtils;
 
 import com.lody.virtual.client.core.VirtualCore;
-import com.lody.virtual.helper.utils.collection.ArrayMap;
+import com.lody.virtual.helper.collection.ArrayMap;
 import com.lody.virtual.os.VEnvironment;
-import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.server.pm.PackageSetting;
 
 import mirror.android.content.pm.ApplicationInfoL;
@@ -49,7 +48,7 @@ public static void fixApplicationInfo(PackageSetting setting, ApplicationInfo ap
 		applicationInfo.enabled = true;
 		applicationInfo.nativeLibraryDir = setting.libPath;
 		applicationInfo.dataDir = VEnvironment.getDataUserPackageDirectory(userId, setting.packageName).getPath();
-		applicationInfo.uid = VUserHandle.getUid(userId, setting.appId);
+		applicationInfo.uid = setting.appId;
 		if (setting.dependSystem) {
 			String[] sharedLibraryFiles = sSharedLibCache.get(setting.packageName);
 			if (sharedLibraryFiles == null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/NotificationManagerPatch.java
Patch:
@@ -8,7 +8,6 @@
 import com.lody.virtual.client.hook.base.PatchDelegate;
 import com.lody.virtual.client.hook.base.ReplaceCallingPkgHook;
 import com.lody.virtual.client.hook.base.StaticHook;
-import com.lody.virtual.server.notification.VNotificationManagerService;
 
 import mirror.android.app.NotificationManager;
 import mirror.android.widget.Toast;
@@ -33,7 +32,6 @@ protected void onBindHooks() {
         super.onBindHooks();
         addHook(new ReplaceCallingPkgHook("enqueueToast"));
         addHook(new ReplaceCallingPkgHook("cancelToast"));
-        addHook(new ReplaceCallingPkgHook("areNotificationsEnabledForPackage"));
         addHook(new StaticHook("registerListener"));
         addHook(new StaticHook("unregisterListener"));
         addHook(new StaticHook("getAppActiveNotifications"));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/DeletePackage.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
+import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
 
@@ -23,7 +24,7 @@ public String getName() {
 	public Object call(Object who, Method method, Object... args) throws Throwable {
 		String pkgName = (String) args[0];
 		try {
-            VirtualCore.get().uninstallApp(pkgName);
+            VirtualCore.get().uninstallPackage(pkgName, VUserHandle.myUserId());
             IPackageDeleteObserver2 observer = (IPackageDeleteObserver2) args[1];
             if (observer != null) {
                 observer.onPackageDeleted(pkgName, 0, "done.");

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/GetPackagesForUid.java
Patch:
@@ -6,7 +6,7 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.ipc.VPackageManager;
-import com.lody.virtual.helper.utils.collection.ArraySet;
+import com.lody.virtual.helper.collection.ArraySet;
 
 import java.lang.reflect.Method;
 import java.util.Arrays;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/secondary/ServiceConnectionDelegate.java
Patch:
@@ -6,7 +6,7 @@
 import android.os.RemoteException;
 
 import com.lody.virtual.client.VClientImpl;
-import com.lody.virtual.helper.utils.collection.ArrayMap;
+import com.lody.virtual.helper.collection.ArrayMap;
 import com.lody.virtual.server.IBinderDelegateService;
 
 /**

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/ChooserActivity.java
Patch:
@@ -1,5 +1,6 @@
 package com.lody.virtual.client.stub;
 
+import android.annotation.SuppressLint;
 import android.content.Intent;
 import android.os.Bundle;
 import android.os.Parcelable;
@@ -17,7 +18,6 @@ public class ChooserActivity extends ResolverActivity {
     public static final String ACTION;
 
     static {
-        //适配rom的action��
         Intent target = new Intent();
         Intent intent = Intent.createChooser(target, "");
         ACTION = intent.getAction();
@@ -32,6 +32,7 @@ public static boolean check(Intent intent) {
         return false;
     }
 
+    @SuppressLint("MissingSuperCall")
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         Intent intent = getIntent();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubManifest.java
Patch:
@@ -12,6 +12,7 @@ public class StubManifest {
     public static String STUB_DIALOG = StubDialog.class.getName();
     public static String STUB_CP = StubContentProvider.class.getName();
     public static String STUB_JOB = StubJob.class.getName();
+    public static String RESOLVER_ACTIVITY = ResolverActivity.class.getName();
     public static String STUB_CP_AUTHORITY = "virtual_stub_";
     public static int STUB_COUNT = 50;
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubPendingReceiver.java
Patch:
@@ -5,7 +5,6 @@
 import android.content.Intent;
 
 import com.lody.virtual.helper.utils.ComponentUtils;
-import com.lody.virtual.helper.utils.VLog;
 import com.lody.virtual.os.VUserHandle;
 
 /**
@@ -19,7 +18,6 @@ public void onReceive(Context context, Intent intent) {
                 Intent realIntent = intent.getParcelableExtra("_VA_|_intent_");
         int userId = intent.getIntExtra("_VA_|_user_id_", VUserHandle.USER_ALL);
         if (realIntent != null) {
-            VLog.d("IntentSender", "onReceive's realIntent =" + realIntent+",extra=" +VLog.toString(realIntent.getExtras()));
             Intent newIntent = ComponentUtils.redirectBroadcastIntent(realIntent, userId);
             if (newIntent != null) {
                 context.sendBroadcast(newIntent);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubPendingService.java
Patch:
@@ -1,15 +1,15 @@
 package com.lody.virtual.client.stub;
 
+import android.app.Service;
 import android.content.Intent;
 import android.os.IBinder;
 
-import com.lody.virtual.helper.component.BaseService;
 
 /**
  * @author Lody
  */
 
-public class StubPendingService extends BaseService {
+public class StubPendingService extends Service {
     @Override
     public IBinder onBind(Intent intent) {
         return null;

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ArrayMap.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.lody.virtual.helper.utils.collection;
+package com.lody.virtual.helper.collection;
 
 import java.util.Collection;
 import java.util.Map;

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/ContainerHelpers.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.lody.virtual.helper.utils.collection;
+package com.lody.virtual.helper.collection;
 
 class ContainerHelpers {
     static final int[] EMPTY_INTS = new int[0];

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/collection/SparseArray.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.lody.virtual.helper.utils.collection;
+package com.lody.virtual.helper.collection;
 
 /**
  * A copy of the current platform (currently {@link android.os.Build.VERSION_CODES#KITKAT}

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/ComponentUtils.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.SpecialComponentList;
+import com.lody.virtual.client.hook.secondary.GmsSupport;
 import com.lody.virtual.helper.compat.ObjectsCompat;
 
 import static android.content.pm.ActivityInfo.LAUNCH_SINGLE_INSTANCE;
@@ -20,7 +21,7 @@ public class ComponentUtils {
 
     public static String getTaskAffinity(ActivityInfo info) {
         if (info.launchMode == LAUNCH_SINGLE_INSTANCE) {
-            return "_#SI#_" + info.packageName + "/" + info.name;
+            return "-SingleInstance-" + info.packageName + "/" + info.name;
         } else if (info.taskAffinity == null && info.applicationInfo.taskAffinity == null) {
             return info.packageName;
         } else if (info.taskAffinity != null) {
@@ -91,7 +92,7 @@ public static boolean isSystemApp(PackageInfo packageInfo) {
     }
 
     public static boolean isSystemApp(ApplicationInfo applicationInfo) {
-        return applicationInfo != null
+        return !GmsSupport.isGmsFamilyPackage(applicationInfo.packageName)
                 && ((ApplicationInfo.FLAG_SYSTEM & applicationInfo.flags) != 0
                 || SpecialComponentList.isSpecSystemPackage(applicationInfo.packageName));
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/ServiceCache.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.os.IBinder;
 
-import com.lody.virtual.helper.utils.collection.ArrayMap;
+import com.lody.virtual.helper.collection.ArrayMap;
 
 import java.util.Map;
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/accounts/AppAccountParser.java
Patch:
@@ -31,7 +31,7 @@ public XmlResourceParser getParser(Context context, ServiceInfo serviceInfo, Str
 
     @Override
     public Resources getResources(Context context, ApplicationInfo appInfo) throws Exception {
-        InstalledAppInfo appSetting = VAppManagerService.get().getInstalledAppInfo(appInfo.packageName);
+        InstalledAppInfo appSetting = VAppManagerService.get().getInstalledAppInfo(appInfo.packageName, 0);
         if (appSetting != null) {
             AssetManager assets = mirror.android.content.res.AssetManager.ctor.newInstance();
             mirror.android.content.res.AssetManager.addAssetPath.call(assets, appSetting.apkPath);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/BroadcastSystem.java
Patch:
@@ -14,7 +14,7 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.SpecialComponentList;
 import com.lody.virtual.helper.utils.VLog;
-import com.lody.virtual.helper.utils.collection.ArrayMap;
+import com.lody.virtual.helper.collection.ArrayMap;
 import com.lody.virtual.remote.PendingResultData;
 import com.lody.virtual.server.pm.PackageSetting;
 import com.lody.virtual.server.pm.VAppManagerService;

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ProcessMap.java
Patch:
@@ -1,7 +1,7 @@
 package com.lody.virtual.server.am;
 
-import com.lody.virtual.helper.utils.collection.ArrayMap;
-import com.lody.virtual.helper.utils.collection.SparseArray;
+import com.lody.virtual.helper.collection.ArrayMap;
+import com.lody.virtual.helper.collection.SparseArray;
 
 class ProcessMap<E> {
 	private final ArrayMap<String, SparseArray<E>> mMap = new ArrayMap<>();

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/installer/VPackageInstallerService.java
Patch:
@@ -225,7 +225,7 @@ public void unregisterCallback(IPackageInstallerCallback callback) throws Remote
 
     @Override
     public void uninstall(String packageName, String callerPackageName, int flags, IntentSender statusReceiver, int userId) throws RemoteException {
-        boolean success = VAppManagerService.get().uninstallApp(packageName);
+        boolean success = VAppManagerService.get().uninstallPackage(packageName, userId);
         if (statusReceiver != null) {
             final Intent fillIn = new Intent();
             fillIn.putExtra(PackageInstaller.EXTRA_PACKAGE_NAME, packageName);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/fixer/ComponentFixer.java
Patch:
@@ -7,6 +7,7 @@
 import android.text.TextUtils;
 
 import com.lody.virtual.client.core.VirtualCore;
+import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.remote.AppSetting;
 import com.lody.virtual.helper.utils.collection.ArrayMap;
 import com.lody.virtual.os.VEnvironment;
@@ -48,7 +49,7 @@ public static void fixApplicationInfo(AppSetting setting, ApplicationInfo applic
 		applicationInfo.enabled = true;
 		applicationInfo.nativeLibraryDir = setting.libPath;
 		applicationInfo.dataDir = VEnvironment.getDataUserPackageDirectory(userId, setting.packageName).getPath();
-		applicationInfo.uid = setting.appId;
+		applicationInfo.uid = VUserHandle.getUid(userId, setting.appId);
 		if (setting.dependSystem) {
 			String[] sharedLibraryFiles = sSharedLibCache.get(setting.packageName);
 			if (sharedLibraryFiles == null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VPackageManagerService.java
Patch:
@@ -73,7 +73,7 @@ public int compare(ResolveInfo r1, ResolveInfo r2) {
         }
     };
     private static final AtomicReference<VPackageManagerService> gService = new AtomicReference<>();
-    private static final Comparator<ProviderInfo> mProviderInitOrderSorter = new Comparator<ProviderInfo>() {
+    private static final Comparator<ProviderInfo> sProviderInitOrderSorter = new Comparator<ProviderInfo>() {
         public int compare(ProviderInfo p1, ProviderInfo p2) {
             final int v1 = p1.initOrder;
             final int v2 = p2.initOrder;
@@ -596,7 +596,7 @@ public VParceledListSlice<ProviderInfo> queryContentProviders(String processName
             }
         }
         if (!finalList.isEmpty()) {
-            Collections.sort(finalList, mProviderInitOrderSorter);
+            Collections.sort(finalList, sProviderInitOrderSorter);
         }
         return new VParceledListSlice<>(finalList);
     }

File: VirtualApp/app/src/main/java/io/virtualapp/enter/SplashActivity.java
Patch:
@@ -19,7 +19,7 @@ protected void onCreate(Bundle savedInstanceState) {
         getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                 WindowManager.LayoutParams.FLAG_FULLSCREEN);
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_enter);
+        setContentView(R.layout.activity_splash);
         new Handler().postDelayed(() -> {
             HomeActivity.goHome(this);
             finish();

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -237,8 +237,8 @@ public boolean uninstallApp(String pkg) {
                 try {
                     BroadcastSystem.get().stopApp(pkg);
                     VActivityManagerService.get().killAppByPkg(pkg, VUserHandle.USER_ALL);
-                    FileUtils.deleteDir(VEnvironment.getDataAppPackageDirectory(pkg));
                     VEnvironment.getPackageResourcePath(pkg).delete();
+                    FileUtils.deleteDir(VEnvironment.getDataAppPackageDirectory(pkg));
                     VEnvironment.getOdexFile(pkg).delete();
                     for (int userId : VUserManagerService.get().getUserIds()) {
                         FileUtils.deleteDir(VEnvironment.getDataUserPackageDirectory(userId, pkg));

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -74,8 +74,11 @@ public void onRequestUninstall(String pkg) {
             Once.initialise(this);
         } else if (VirtualCore.get().isVAppProcess()) {
             BlockCanary.install(this, new AppBlockCanaryContext());
+            //listener components
             VirtualCore.get().setComponentDelegate(new MyComponentDelegate());
+            //fake phone imei,macAddress,BluetoothAddress
             VirtualCore.get().setPhoneInfoDelegate(new MyPhoneInfoDelegate());
+            //fake task description's icon and title
             VirtualCore.get().setTaskDescriptionDelegate(new MyTaskDescriptionDelegate());
         }
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/Hook.java
Patch:
@@ -72,7 +72,7 @@ protected final int getVUid() {
 		return VClientImpl.get().getVUid();
 	}
 
-	protected final int getVUserId() {
+	protected final int getAppUserId() {
 		return VUserHandle.getUserId(getVUid());
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/bluetooth/GetAddress.java
Patch:
@@ -15,7 +15,7 @@ class GetAddress extends StaticHook {
     @Override
     public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
         if (VirtualCore.get().getPhoneInfoDelegate() != null) {
-            String res = VirtualCore.get().getPhoneInfoDelegate().getBluetoothAddress((String) result);
+            String res = VirtualCore.get().getPhoneInfoDelegate().getBluetoothAddress((String) result, getAppUserId());
             if (res != null) {
                 return res;
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/AreNotificationsEnabledForPackage.java
Patch:
@@ -14,7 +14,7 @@ public String getName() {
     @Override
     public Object call(Object who, Method method, Object... args) throws Throwable {
         String pkg  = (String) args[0];
-        return VNotificationManager.get().areNotificationsEnabledForPackage(pkg, getVUserId());
+        return VNotificationManager.get().areNotificationsEnabledForPackage(pkg, getAppUserId());
 //        return super.call(who, method, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/CancelAllNotifications.java
Patch:
@@ -4,7 +4,6 @@
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.hook.utils.HookUtils;
 import com.lody.virtual.client.ipc.VNotificationManager;
-import com.lody.virtual.server.notification.VNotificationManagerService;
 
 import java.lang.reflect.Method;
 
@@ -26,7 +25,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 //            user = (int) args[1];
 //        }
         if (VirtualCore.get().isAppInstalled(pkg)) {
-            VNotificationManager.get().cancelAllNotification(pkg, getVUserId());
+            VNotificationManager.get().cancelAllNotification(pkg, getAppUserId());
             return 0;
         }
         return method.invoke(who, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/CancelNotificationWithTag.java
Patch:
@@ -32,8 +32,8 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
         String pkg = HookUtils.replaceFirstAppPkg(args);
         String tag = (String) args[1];
         int id = (int) args[2];
-        id = VNotificationManager.get().dealNotificationId(id, pkg, tag, getVUserId());
-        tag = VNotificationManager.get().dealNotificationTag(id, pkg, tag, getVUserId());
+        id = VNotificationManager.get().dealNotificationId(id, pkg, tag, getAppUserId());
+        tag = VNotificationManager.get().dealNotificationTag(id, pkg, tag, getAppUserId());
 
         args[1] = tag;
         args[2] = id;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/EnqueueNotification.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.ipc.VNotificationManager;
-import com.lody.virtual.server.notification.VNotificationManagerService;
 import com.lody.virtual.helper.utils.ArrayUtils;
 
 import java.lang.reflect.Method;
@@ -26,13 +25,13 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
         int notificationIndex = ArrayUtils.indexOfFirst(args, Notification.class);
         int idIndex = ArrayUtils.indexOfFirst(args, Integer.class);
         int id = (int) args[idIndex];
-        id = VNotificationManager.get().dealNotificationId(id, pkg, null,getVUserId());
+        id = VNotificationManager.get().dealNotificationId(id, pkg, null, getAppUserId());
         args[idIndex] = id;
         Notification notification = (Notification) args[notificationIndex];
         if (!VNotificationManager.get().dealNotification(id, notification, pkg)) {
             return 0;
         }
-        VNotificationManager.get().addNotification(id, null, pkg, getVUserId());
+        VNotificationManager.get().addNotification(id, null, pkg, getAppUserId());
         args[0] = getHostPkg();
         return method.invoke(who, args);
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/SetNotificationsEnabledForPackage.java
Patch:
@@ -16,7 +16,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
         String pkg  = (String) args[0];
         int enableIndex = ArrayUtils.indexOfFirst(args, Boolean.class);
         boolean enable = (boolean) args[enableIndex];
-        VNotificationManager.get().setNotificationsEnabledForPackage(pkg, enable, getVUserId());
+        VNotificationManager.get().setNotificationsEnabledForPackage(pkg, enable, getAppUserId());
         return 0;
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/GetDeviceId.java
Patch:
@@ -15,7 +15,7 @@ public GetDeviceId(){
     @Override
     public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
         if (VirtualCore.get().getPhoneInfoDelegate() != null) {
-            String res = VirtualCore.get().getPhoneInfoDelegate().getDeviceId((String) result);
+            String res = VirtualCore.get().getPhoneInfoDelegate().getDeviceId((String) result, getAppUserId());
             if (res != null) {
                 return res;
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/GetDeviceIdForSubscriber.java
Patch:
@@ -15,7 +15,7 @@ public GetDeviceIdForSubscriber(){
     @Override
     public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
         if (VirtualCore.get().getPhoneInfoDelegate() != null) {
-            String res = VirtualCore.get().getPhoneInfoDelegate().getDeviceId((String) result);
+            String res = VirtualCore.get().getPhoneInfoDelegate().getDeviceId((String) result, getAppUserId());
             if (res != null) {
                 return res;
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/telephony/GetDeviceId.java
Patch:
@@ -15,7 +15,7 @@ public GetDeviceId(){
     @Override
     public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
         if (VirtualCore.get().getPhoneInfoDelegate() != null) {
-            String res = VirtualCore.get().getPhoneInfoDelegate().getDeviceId((String) result);
+            String res = VirtualCore.get().getPhoneInfoDelegate().getDeviceId((String) result, getAppUserId());
             if (res != null) {
                 return res;
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/NotificationCompat.java
Patch:
@@ -18,7 +18,7 @@
 import mirror.com.android.internal.R_Hide;
 
 /**
- * Created by 247321453 on 2016/7/12.
+ * @author 247321453
  */
 public abstract class NotificationCompat {
 
@@ -52,7 +52,6 @@ private void loadSystemLayoutRes() {
                 }
             }
         }
-//        VLog.d(TAG, "systemIds="+sSystemLayoutResIds);
     }
 
     NotificationCompat() {
@@ -98,6 +97,7 @@ PackageInfo getPackageInfo(String packageName) {
         try {
             return VirtualCore.get().getUnHookPackageManager().getPackageInfo(packageName, 0);
         } catch (PackageManager.NameNotFoundException e) {
+            // ignore
         }
         return null;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/NotificationCompatCompatV14.java
Patch:
@@ -10,9 +10,9 @@
 import com.lody.virtual.helper.utils.VLog;
 
 /**
- * Created by 247321453 on 2016/7/12.
+ * @author 247321543
  */
-class NotificationCompatCompatV14 extends NotificationCompat {
+/* package */ class NotificationCompatCompatV14 extends NotificationCompat {
     private RemoteViewsFixer mRemoteViewsFixer;
 
     NotificationCompatCompatV14() {
@@ -28,7 +28,6 @@ RemoteViewsFixer getRemoteViewsFixer() {
     public boolean dealNotification(int id, Notification notification, final String packageName) {
         Context pluginContext = getAppContext(packageName);
         if (isOutsideInstalled(packageName)) {
-            //外部已经安装的app，直接替换默认的icon就行了
             getNotificationFixer().fixIconImage(pluginContext.getResources(), notification.contentView, false, notification);
             notification.icon = getHostContext().getApplicationInfo().icon;
             return true;
@@ -90,6 +89,7 @@ Context getAppContext(final String packageName) {
                     Context.CONTEXT_IGNORE_SECURITY | Context.CONTEXT_INCLUDE_CODE);
         } catch (PackageManager.NameNotFoundException e) {
             context = getHostContext();
+            // ignore
         }
         return new ContextWrapper(context) {
             @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/ReflectionActionCompat.java
Patch:
@@ -2,7 +2,8 @@
 
 import android.widget.RemoteViews;
 
-class ReflectionActionCompat {
+
+/* package */ class ReflectionActionCompat {
     private static Class ReflectionActionClass;
     private static final String ReflectionAction = "ReflectionAction";
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/wifi/WifiManagerPatch.java
Patch:
@@ -31,7 +31,7 @@ protected void onBindHooks() {
 			public Object call(Object who, Method method, Object... args) throws Throwable {
 				WifiInfo info = (WifiInfo) super.call(who, method, args);
 				if (info != null) {
-					if (info.getMacAddress() == null || info.getMacAddress().startsWith("00-00-00-00-00-00")) {
+					if (info.getMacAddress() != null && info.getMacAddress().startsWith("00-00-00-00-00-00")) {
 						Reflect.on(info).set("mMacAddress", "00:00:08:76:54:32");
 					}
 				}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/wifi/WifiManagerPatch.java
Patch:
@@ -31,7 +31,7 @@ protected void onBindHooks() {
 			public Object call(Object who, Method method, Object... args) throws Throwable {
 				WifiInfo info = (WifiInfo) super.call(who, method, args);
 				if (info != null) {
-					if (info.getMacAddress().startsWith("00-00-00-00-00-00")) {
+					if (info.getMacAddress() == null || info.getMacAddress().startsWith("00-00-00-00-00-00")) {
 						Reflect.on(info).set("mMacAddress", "00:00:08:76:54:32");
 					}
 				}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -103,7 +103,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 					//noinspection unchecked
 					Object _infos = method.invoke(who, args);
 					List<ActivityManager.RecentTaskInfo> infos =
-							_infos instanceof ParceledListSlice
+							ParceledListSlice.TYPE != null && ParceledListSlice.TYPE.isInstance(_infos)
 									? ParceledListSlice.getList.call(_infos)
 									: (List)_infos;
 					for (ActivityManager.RecentTaskInfo info : infos) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -103,7 +103,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 					//noinspection unchecked
 					Object _infos = method.invoke(who, args);
 					List<ActivityManager.RecentTaskInfo> infos =
-							ParceledListSlice.TYPE.isInstance(_infos)
+							ParceledListSlice.TYPE != null && ParceledListSlice.TYPE.isInstance(_infos)
 									? ParceledListSlice.getList.call(_infos)
 									: (List)_infos;
 					for (ActivityManager.RecentTaskInfo info : infos) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -103,7 +103,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 					//noinspection unchecked
 					Object _infos = method.invoke(who, args);
 					List<ActivityManager.RecentTaskInfo> infos =
-							_infos instanceof ParceledListSlice
+							ParceledListSlice.TYPE.isInstance(_infos)
 									? ParceledListSlice.getList.call(_infos)
 									: (List)_infos;
 					for (ActivityManager.RecentTaskInfo info : infos) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/notification/NotificationCompatCompatV21.java
Patch:
@@ -10,6 +10,7 @@
 import android.text.TextUtils;
 import android.widget.RemoteViews;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.helper.proto.AppSetting;
 import com.lody.virtual.helper.utils.Reflect;
 import com.lody.virtual.helper.utils.VLog;
@@ -46,7 +47,7 @@ private boolean resolveRemoteViews(Context pluginContext,String packageName, Not
             publicApk = packageInfo.applicationInfo.publicSourceDir;
         }
         if (TextUtils.isEmpty(publicApk)) {
-            AppSetting setting = VAppManagerService.get().findAppInfo(packageName);
+            AppSetting setting = VirtualCore.get().findApp(packageName);
             publicApk = setting.apkPath;
         }
 

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -42,8 +42,7 @@ protected void attachBaseContext(Context base) {
     public void onCreate() {
         gDefault = this;
         super.onCreate();
-        if (VirtualCore.get().isMainProcess()) {
-            Once.initialise(this);
+        if (VirtualCore.get().isServerProcess()) {
             VirtualCore.get().setAppRequestListener(new VirtualCore.AppRequestListener() {
                 @Override
                 public void onRequestInstall(String path) {
@@ -71,6 +70,8 @@ public void onRequestUninstall(String pkg) {
 
                 }
             });
+        }else if (VirtualCore.get().isMainProcess()) {
+            Once.initialise(this);
         } else if (VirtualCore.get().isVAppProcess()) {
             BlockCanary.install(this, new AppBlockCanaryContext());
             VirtualCore.get().setComponentDelegate(new MyComponentDelegate());

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/VirtualRuntime.java
Patch:
@@ -53,6 +53,7 @@ public static void setupRuntime(String processName, ApplicationInfo appInfo) {
     }
 
     public static <T> T crash(RemoteException e) throws RuntimeException {
+        e.printStackTrace();
         if (VirtualCore.get().isVAppProcess()) {
             Process.killProcess(Process.myPid());
             System.exit(0);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/ServiceManagerNative.java
Patch:
@@ -23,7 +23,7 @@ public class ServiceManagerNative {
 	public static final String APP = "app";
 	public static final String ACCOUNT = "account";
 	public static final String JOB = "job";
-	public static final String VIRTUAL_NOTIFICATION="virtual_notification";
+	public static final String NOTIFICATION ="virtual_notification";
 	public static final String SERVICE_DEF_AUTH = "virtual.service.BinderProvider";
 	private static final String TAG = ServiceManagerNative.class.getSimpleName();
 	public static String SERVICE_CP_AUTH = "virtual.service.BinderProvider";

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VNotificationManager.java
Patch:
@@ -5,7 +5,6 @@
 import android.os.RemoteException;
 
 import com.lody.virtual.server.INotificationManager;
-import com.lody.virtual.server.IPackageManager;
 import com.lody.virtual.server.notification.NotificationCompat;
 
 /**
@@ -28,7 +27,7 @@ public INotificationManager getService() {
         if (mRemote == null) {
             synchronized (VNotificationManager.class) {
                 if (mRemote == null) {
-                    final IBinder pmBinder = ServiceManagerNative.getService(ServiceManagerNative.VIRTUAL_NOTIFICATION);
+                    final IBinder pmBinder = ServiceManagerNative.getService(ServiceManagerNative.NOTIFICATION);
                     mRemote = INotificationManager.Stub.asInterface(pmBinder);
                 }
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/BinderProvider.java
Patch:
@@ -35,8 +35,6 @@ public boolean onCreate() {
         if (!VirtualCore.get().isStartup()) {
             return true;
         }
-        VNotificationManagerService.systemReady(context);
-        addService(ServiceManagerNative.VIRTUAL_NOTIFICATION, VNotificationManagerService.get());
         VPackageManagerService.systemReady();
         addService(ServiceManagerNative.PACKAGE, VPackageManagerService.get());
         VActivityManagerService.systemReady(context);
@@ -50,6 +48,8 @@ public boolean onCreate() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             addService(ServiceManagerNative.JOB, VJobSchedulerService.get());
         }
+        VNotificationManagerService.systemReady(context);
+        addService(ServiceManagerNative.NOTIFICATION, VNotificationManagerService.get());
         VAppManagerService.get().preloadAllApps();
         return true;
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/EnqueueNotification.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.hook.patchs.notification.compat.NotificationHandler;
+import com.lody.virtual.client.hook.patchs.notification.compat.Result;
 import com.lody.virtual.helper.utils.ArrayUtils;
 
 import java.lang.reflect.Method;
@@ -24,7 +25,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		String pkg = (String) args[0];
 		int notificationIndex = ArrayUtils.indexOfFirst(args, Notification.class);
 		Notification notification = (Notification) args[notificationIndex];
-		NotificationHandler.Result result = NotificationHandler.getInstance()
+		Result result = NotificationHandler.getInstance()
 				.dealNotification(getHostContext(), notification, pkg);
 		if (result.code == NotificationHandler.RES_NOT_SHOW) {
 			return 0;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/RemoteViewsUtils.java
Patch:
@@ -118,11 +118,11 @@ public View createView(final Context context, RemoteViews remoteViews, boolean i
 		if (systemId) {
 			mode = View.MeasureSpec.EXACTLY;
 		} else {
-			mode = View.MeasureSpec.EXACTLY;
+			mode = View.MeasureSpec.AT_MOST;
 		}
 		mCache.layout(0, 0, width, height);
 		mCache.measure(View.MeasureSpec.makeMeasureSpec(width, mode), View.MeasureSpec.makeMeasureSpec(height, mode));
-		mCache.layout(0, 0, width, height);
+		mCache.layout(0, 0, width, mCache.getMeasuredHeight());
 		VLog.i(TAG, "notification:systemId=" + systemId + ",max=%d/%d, szie=%d/%d", width, height,
 				mCache.getMeasuredWidth(), mCache.getMeasuredHeight());
 		// 打印action

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -15,7 +15,6 @@
 import android.os.Binder;
 import android.os.Build;
 import android.os.ConditionVariable;
-import android.os.Debug;
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.IInterface;
@@ -38,7 +37,6 @@
 import com.lody.virtual.client.ipc.VPackageManager;
 import com.lody.virtual.client.stub.StubManifest;
 import com.lody.virtual.helper.proto.PendingResultData;
-import com.lody.virtual.helper.utils.Reflect;
 import com.lody.virtual.helper.utils.VLog;
 import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.server.secondary.FakeIdentityBinder;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/ServiceManagerNative.java
Patch:
@@ -55,8 +55,6 @@ private static void linkBinderDied(final IBinder binder) {
 			@Override
 			public void binderDied() {
 				binder.unlinkToDeath(this, 0);
-				VLog.e(TAG, "Ops, the server has crashed.");
-				VirtualRuntime.exit();
 			}
 		};
 		try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/LocalProxyUtils.java
Patch:
@@ -41,7 +41,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                             throw e.getCause();
                         }
                     }
-                    throw e.getCause();
+                    throw e.getCause() == null ? e : e.getCause();
                 }
             }
         });

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/ServiceManagerNative.java
Patch:
@@ -32,7 +32,7 @@ public class ServiceManagerNative {
 	private static IServiceFetcher getServiceFetcher() {
 		if (sFetcher == null) {
 			synchronized (ServiceManagerNative.class) {
-				if (sFetcher != null) {
+				if (sFetcher == null) {
 					Context context = VirtualCore.get().getContext();
 					Bundle response = new ProviderCall.Builder(context, SERVICE_CP_AUTH).methodName("@").call();
 					if (response != null) {

File: VirtualApp/app/src/main/java/io/virtualapp/MyComponentDelegate.java
Patch:
@@ -4,6 +4,9 @@
 import android.content.Intent;
 
 import com.lody.virtual.client.hook.delegate.ComponentDelegate;
+import com.lody.virtual.helper.utils.Reflect;
+
+import java.io.File;
 
 
 public class MyComponentDelegate implements ComponentDelegate {

File: VirtualApp/lib/src/main/java/com/lody/virtual/IOHook.java
Patch:
@@ -62,7 +62,7 @@ public class IOHook {
             gCameraNativeSetup = Camera.class.getDeclaredMethod("native_setup", Object.class, int.class, String.class);
             gCameraMethodType = 1;
         } catch (NoSuchMethodException e) {
-            e.printStackTrace();
+            // ignore
         }
 
         if (gCameraNativeSetup == null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -37,6 +37,7 @@
 import com.lody.virtual.client.ipc.VPackageManager;
 import com.lody.virtual.client.stub.StubManifest;
 import com.lody.virtual.helper.proto.PendingResultData;
+import com.lody.virtual.helper.utils.Reflect;
 import com.lody.virtual.helper.utils.VLog;
 import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.server.secondary.FakeIdentityBinder;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/VirtualRuntime.java
Patch:
@@ -54,9 +54,6 @@ public static void setupRuntime(String processName, ApplicationInfo appInfo) {
 
 	public static <T> T crash(RemoteException e) throws RuntimeException {
 		e.printStackTrace();
-		if (VirtualCore.get().isVAppProcess()) {
-			exit();
-		}
 		throw new RuntimeException(e);
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/VActivityManager.java
Patch:
@@ -492,11 +492,11 @@ public void broadcastFinish(PendingResultData res) {
         }
     }
 
-    public void dispatchStickyBroadcast(IntentFilter filter) {
+    public Intent dispatchStickyBroadcast(IntentFilter filter) {
         try {
-            getService().dispatchStickyBroadcast(filter);
+            return getService().dispatchStickyBroadcast(filter);
         } catch (RemoteException e) {
-            VirtualRuntime.crash(e);
+            return VirtualRuntime.crash(e);
         }
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -1012,8 +1012,8 @@ public void broadcastFinish(PendingResultData res) {
     }
 
     @Override
-    public void dispatchStickyBroadcast(IntentFilter filter) {
+    public Intent dispatchStickyBroadcast(IntentFilter filter) {
         int vuid = VBinder.getCallingUid();
-        BroadcastSystem.get().dispatchStickyBroadcast(vuid, filter);
+        return BroadcastSystem.get().dispatchStickyBroadcast(vuid, filter);
     }
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/BroadcastSystem.java
Patch:
@@ -138,7 +138,7 @@ private void registerSystemReceiver() {
      * at com.lody.virtual.server.pm.VAppManagerService.systemReady(VAppManagerService.java:70)
      * at com.lody.virtual.server.BinderProvider.onCreate(BinderProvider.java:42)
      */
-    private void fuckHuaWeiVerifier()throws Throwable {
+    private void fuckHuaWeiVerifier()  {
 
         if (LoadedApkHuaWei.mReceiverResource != null) {
             Object packageInfo = ContextImpl.mPackageInfo.get(mContext);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/mount/Mkdirs.java
Patch:
@@ -26,7 +26,7 @@ public boolean beforeCall(Object who, Method method, Object... args) {
 
     @Override
     public Object call(Object who, Method method, Object... args) throws Throwable {
-        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
             return super.call(who, method, args);
         }
         String path;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java
Patch:
@@ -60,7 +60,8 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             if (handleInstallRequest(intent)) {
                 return 0;
             }
-        } else if (Intent.ACTION_UNINSTALL_PACKAGE.equals(intent.getAction())
+        } else if ((Intent.ACTION_UNINSTALL_PACKAGE.equals(intent.getAction())
+                || Intent.ACTION_DELETE.equals(intent.getAction()))
                 && "package".equals(intent.getScheme())) {
 
             if (handleUninstallRequest(intent)) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java
Patch:
@@ -60,7 +60,8 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
             if (handleInstallRequest(intent)) {
                 return 0;
             }
-        } else if (Intent.ACTION_UNINSTALL_PACKAGE.equals(intent.getAction())
+        } else if ((Intent.ACTION_UNINSTALL_PACKAGE.equals(intent.getAction())
+                || Intent.ACTION_DELETE.equals(intent.getAction()))
                 && "package".equals(intent.getScheme())) {
 
             if (handleUninstallRequest(intent)) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -228,7 +228,7 @@ public synchronized void start() {
         if (StubManifest.ENABLE_IO_REDIRECT) {
             startIOUniformer();
         }
-        IOHook.hookNative();
+        IOHook.hookNative(VirtualCore.get().getHostPkg());
         Object mainThread = VirtualCore.mainThread();
         IOHook.startDexOverride();
         Context context = createPackageContext(data.appInfo.packageName);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubManifest.java
Patch:
@@ -7,11 +7,11 @@
  */
 
 public class StubManifest {
+    public static final String STUB_DEF_AUTHORITY = "virtual_stub_";
     public static String STUB_ACTIVITY = StubActivity.class.getName();
     public static String STUB_DIALOG = StubDialog.class.getName();
     public static String STUB_CP = StubContentProvider.class.getName();
     public static String STUB_JOB = StubJob.class.getName();
-    public static final String STUB_DEF_AUTHORITY = "virtual_stub_";
     public static String STUB_CP_AUTHORITY = "virtual_stub_";
     public static int STUB_COUNT = 50;
 
@@ -28,7 +28,7 @@ public class StubManifest {
      * when app access '/data/data/{Package Name}' or '/data/user/0/{Package Name}',
      * we redirect it to '/data/data/{Your Host Package Name}/virtual/user/0/{Package Name}'.
      */
-    public static boolean ENABLE_IO_REDIRECT = false;
+    public static boolean ENABLE_IO_REDIRECT = true;
 
     public static String getStubActivityName(int index) {
         return String.format(Locale.ENGLISH, "%s$C%d", STUB_ACTIVITY, index);

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -61,7 +61,7 @@ public void onRequestInstall(String path) {
                             Toast.makeText(VApp.this, "Install: " + res.packageName + " success!", Toast.LENGTH_SHORT).show();
                         }
                     } else {
-                        Toast.makeText(VApp.this, "Install failed.", Toast.LENGTH_SHORT).show();
+                        Toast.makeText(VApp.this, "Install failed: " + res.error, Toast.LENGTH_SHORT).show();
                     }
                 }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/fixer/ComponentFixer.java
Patch:
@@ -34,10 +34,10 @@ public static void fixApplicationInfo(AppSetting setting, ApplicationInfo applic
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
 			applicationInfo.splitSourceDirs = new String[]{setting.apkPath};
 			applicationInfo.splitPublicSourceDirs = applicationInfo.splitSourceDirs;
-		}
-		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
 			ApplicationInfoL.scanSourceDir.set(applicationInfo, applicationInfo.dataDir);
 			ApplicationInfoL.scanPublicSourceDir.set(applicationInfo, applicationInfo.dataDir);
+            String hostPrimaryCpuAbi = ApplicationInfoL.primaryCpuAbi.get(VirtualCore.get().getContext().getApplicationInfo());
+			ApplicationInfoL.primaryCpuAbi.set(applicationInfo, hostPrimaryCpuAbi);
 		}
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
 			ApplicationInfoN.deviceEncryptedDataDir.set(applicationInfo, applicationInfo.dataDir);

File: VirtualApp/lib/src/main/java/mirror/android/os/StrictMode.java
Patch:
@@ -5,6 +5,6 @@
 import mirror.RefStaticInt;
 
 public class StrictMode {
-    public static Class<?> Class = RefClass.load(StrictMode.class, "android.os.StrictMode");
+    public static Class<?> TYPE = RefClass.load(StrictMode.class, "android.os.StrictMode");
     public static RefStaticInt sVmPolicyMask;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -24,7 +24,6 @@
 import com.lody.virtual.client.env.Constants;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.fixer.ContextFixer;
-import com.lody.virtual.client.fixer.StrictModeFixer;
 import com.lody.virtual.client.hook.delegate.ComponentDelegate;
 import com.lody.virtual.client.hook.delegate.PhoneInfoDelegate;
 import com.lody.virtual.client.hook.delegate.TaskDescriptionDelegate;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -24,6 +24,7 @@
 import com.lody.virtual.client.env.Constants;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.fixer.ContextFixer;
+import com.lody.virtual.client.fixer.StrictModeFixer;
 import com.lody.virtual.client.hook.delegate.ComponentDelegate;
 import com.lody.virtual.client.hook.delegate.PhoneInfoDelegate;
 import com.lody.virtual.client.hook.delegate.TaskDescriptionDelegate;
@@ -173,6 +174,7 @@ public void startup(Context context) throws Throwable {
             patchManager.init();
             patchManager.injectAll();
             ContextFixer.fixContext(context);
+            StrictModeFixer.fixStrictMode();
             isStartUp = true;
             if (initLock != null) {
                 initLock.open();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -24,6 +24,7 @@
 import com.lody.virtual.client.env.Constants;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.fixer.ContextFixer;
+import com.lody.virtual.client.fixer.StrictModeFixer;
 import com.lody.virtual.client.hook.delegate.ComponentDelegate;
 import com.lody.virtual.client.hook.delegate.PhoneInfoDelegate;
 import com.lody.virtual.client.hook.delegate.TaskDescriptionDelegate;
@@ -173,6 +174,7 @@ public void startup(Context context) throws Throwable {
             patchManager.init();
             patchManager.injectAll();
             ContextFixer.fixContext(context);
+            StrictModeFixer.fixStrictMode();
             isStartUp = true;
             if (initLock != null) {
                 initLock.open();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -331,6 +331,9 @@ public boolean createShortcut(int userId, String packageName, OnEmitShortcutList
 
     public boolean createShortcut(int userId, String packageName, Intent splash, OnEmitShortcutListener listener) {
         AppSetting setting = findApp(packageName);
+        if (setting == null) {
+            return false;
+        }
         ApplicationInfo appInfo = setting.getApplicationInfo(userId);
         PackageManager pm = context.getPackageManager();
         String name;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/ShortcutHandleActivity.java
Patch:
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.os.Build;
 import android.os.Bundle;
+import android.util.Log;
 
 import com.lody.virtual.client.ipc.VActivityManager;
 
@@ -30,7 +31,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Intent targetIntent = null;
         if (splashUri != null) {
             try {
-                splashIntent = Intent.parseUri(targetUri, 0);
+                splashIntent = Intent.parseUri(splashUri, 0);
             } catch (URISyntaxException e) {
                 e.printStackTrace();
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/BroadcastSystem.java
Patch:
@@ -207,7 +207,7 @@ public void stopApp(String packageName) {
                 Map.Entry<IBinder, BroadcastRecord> entry = iterator.next();
                 BroadcastRecord record = entry.getValue();
                 if (record.receiverInfo.packageName.equals(packageName)) {
-                    record.pendingResult.build().finish();
+                    record.pendingResult.finish();
                     iterator.remove();
                 }
             }
@@ -231,7 +231,7 @@ void broadcastFinish(PendingResultData res) {
             }
         }
         mTimeoutHandler.removeMessages(0, res.mToken);
-        res.build().finish();
+        res.finish();
     }
 
     void broadcastSent(int vuid, ActivityInfo receiverInfo, PendingResultData res) {
@@ -267,7 +267,7 @@ public void handleMessage(Message msg) {
             BroadcastRecord r = mBroadcastRecords.remove(token);
             if (r != null) {
                 VLog.w(TAG, "Broadcast timeout, cancel to dispatch it.");
-                r.pendingResult.build().finish();
+                r.pendingResult.finish();
             }
         }
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -1001,7 +1001,7 @@ private void performScheduleReceiver(IVClient client, int vuid, ActivityInfo inf
             client.scheduleReceiver(componentName, intent, result);
         } catch (Throwable e) {
             if (result != null) {
-                result.build().finish();
+                result.finish();
             }
         }
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/Hook.java
Patch:
@@ -69,7 +69,7 @@ protected final boolean isMainProcess() {
 
 
 	protected final int getBaseVUid() {
-		return VClientImpl.getClient().getBaseVUid();
+		return VClientImpl.get().getBaseVUid();
 	}
 
 	protected final int getRealUid() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/SetTaskDescription.java
Patch:
@@ -4,7 +4,6 @@
 import android.app.ActivityManager;
 import android.app.Application;
 import android.graphics.Bitmap;
-import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 
@@ -13,7 +12,6 @@
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.hook.delegate.TaskDescriptionDelegate;
 import com.lody.virtual.helper.utils.DrawableUtils;
-import com.lody.virtual.os.VUserManager;
 
 import java.lang.reflect.Method;
 
@@ -37,7 +35,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		// If the activity label/icon isn't specified, the application's label/icon is shown instead
 		// Android usually does that for us, but in this case we want info about the contained app, not VIrtualApp itself
 		if (label == null || icon == null) {
-			Application app = VClientImpl.getClient().getCurrentApplication();
+			Application app = VClientImpl.get().getCurrentApplication();
 
 			if (label == null) {
 				label = app.getApplicationInfo().loadLabel(app.getPackageManager()).toString();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/libcore/Getpwnam.java
Patch:
@@ -19,7 +19,7 @@ public Object afterCall(Object who, Method method, Object[] args, Object result)
                 Reflect pwd = Reflect.on(result);
                 int uid = pwd.get("pw_uid");
                 if (uid == VirtualCore.get().myUid()) {
-                    pwd.set("pw_uid", VClientImpl.getClient().getVUid());
+                    pwd.set("pw_uid", VClientImpl.get().getVUid());
                 }
             }
             return result;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubContentProvider.java
Patch:
@@ -31,7 +31,7 @@ private Bundle initProcess(Bundle extras) {
 		}
 		IBinder token = BundleCompat.getBinder(extras,"_VA_|_binder_");
 		int vuid = extras.getInt("_VA_|_vuid_");
-		VClientImpl client = VClientImpl.getClient();
+		VClientImpl client = VClientImpl.get();
 		client.initProcess(token, vuid);
 		Bundle res = new Bundle();
 		BundleCompat.putBinder(res, "_VA_|_client_", client.asBinder());

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/job/VJobSchedulerService.java
Patch:
@@ -310,13 +310,13 @@ public List<JobInfo> getAllPendingJobs() throws RemoteException {
             Iterator<JobInfo> iterator = jobs.listIterator();
             while (iterator.hasNext()) {
                 JobInfo job = iterator.next();
-                if (StubManifest.STUB_JOB.equals(job.getService().getClassName())) {
+                if (!StubManifest.STUB_JOB.equals(job.getService().getClassName())) {
+                    // Schedule by Host, invisible in VA.
                     iterator.remove();
                     continue;
                 }
                 Map.Entry<JobId, JobConfig> jobEntry = findJobByVirtualJobId(job.getId());
                 if (jobEntry == null) {
-                    // Schedule by Host, invisible in VA.
                     iterator.remove();
                     continue;
                 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -318,7 +318,7 @@ public synchronized void start() {
         mirror.android.app.ActivityThread.AppBindData.info.set(boundApp, data.info);
         VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(), data.appInfo.targetSdkVersion);
 
-        boolean conflict = SpecialComponentList.isConflictingInstumentation(packageName);
+        boolean conflict = SpecialComponentList.isConflictingInstrumentation(packageName);
         if (!conflict) {
             PatchManager.getInstance().checkEnv(AppInstrumentation.class);
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/SpecialComponentList.java
Patch:
@@ -40,7 +40,7 @@ public final class SpecialComponentList {
         INSTRUMENTATION_CONFLICTING.add("com.qihoo.magic_mutiple");
     }
 
-    public static boolean isConflictingInstumentation(String packageName) {
+    public static boolean isConflictingInstrumentation(String packageName) {
         return INSTRUMENTATION_CONFLICTING.contains(packageName);
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ActivityStack.java
Patch:
@@ -304,7 +304,7 @@ int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBinder re
         } else {
             boolean delivered = false;
             mAM.moveTaskToFront(reuseTask.taskId, 0);
-            boolean startTaskToFront = ComponentUtils.isSameIntent(intent, reuseTask.taskRoot);
+            boolean startTaskToFront = !clearTop && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot);
 
             if (clearTarget.deliverIntent || singleTop) {
                 taskMarked = markTaskByClearTarget(reuseTask, clearTarget, intent.getComponent());

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/VirtualRuntime.java
Patch:
@@ -54,7 +54,6 @@ public static void setupRuntime(String processName, ApplicationInfo appInfo) {
 
 	public static <T> T crash(RemoteException e) throws RuntimeException {
 		e.printStackTrace();
-		CrashReporter.report(getProcessName(), e);
 		if (VirtualCore.get().isVAppProcess()) {
 			exit();
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/IOHook.java
Patch:
@@ -57,7 +57,7 @@ public static String getRedirectedPath(String origPath) {
 		} catch (Throwable e) {
 			VLog.e(TAG, VLog.getStackTraceString(e));
 		}
-		return null;
+		return origPath;
 	}
 
 	public static String restoreRedirectedPath(String origPath) {
@@ -66,7 +66,7 @@ public static String restoreRedirectedPath(String origPath) {
 		} catch (Throwable e) {
 			VLog.e(TAG, VLog.getStackTraceString(e));
 		}
-		return null;
+		return origPath;
 	}
 
 	public static void redirect(String origPath, String newPath) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/os/VUserManager.java
Patch:
@@ -365,7 +365,7 @@ public void wipeUser(int handle) {
      * @return a value greater than or equal to 1
      */
     public static int getMaxSupportedUsers() {
-        return 9;
+        return Integer.MAX_VALUE;
     }
 
     /**

File: VirtualApp/lib/src/main/java/com/lody/virtual/IOHook.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.os.Binder;
 import android.os.Build;
+import android.os.Debug;
 import android.os.Process;
 
 import com.lody.virtual.client.VClientImpl;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -14,7 +14,6 @@
 import android.os.Binder;
 import android.os.Build;
 import android.os.ConditionVariable;
-import android.os.Environment;
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.IInterface;
@@ -35,7 +34,6 @@
 import com.lody.virtual.client.ipc.VActivityManager;
 import com.lody.virtual.client.ipc.VPackageManager;
 import com.lody.virtual.client.stub.StubManifest;
-import com.lody.virtual.os.VEnvironment;
 import com.lody.virtual.os.VUserHandle;
 import com.lody.virtual.server.secondary.FakeIdentityBinder;
 
@@ -296,6 +294,7 @@ public synchronized void start() {
 
 		Application app = LoadedApk.makeApplication.call(data.info, false, null);
 		mInitialApplication = app;
+
 		mirror.android.app.ActivityThread.mInitialApplication.set(mainThread, app);
 		ContextFixer.fixContext(app);
 		List<ProviderInfo> providers = VPackageManager.get().queryContentProviders(data.processName, vuid, PackageManager.GET_META_DATA);

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/proto/AppSetting.java
Patch:
@@ -59,7 +59,7 @@ protected AppSetting(Parcel in) {
     }
 
     public File getOdexFile() {
-        return new File(odexDir, "base.dex");
+        return new File(odexDir, "data@app@" + packageName + "-1@base.apk@classes.dex");
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -150,16 +150,16 @@ private synchronized InstallResult install(String apkPath, int flags, boolean on
 
 
 		File libDir = new File(appDir, "lib");
+		if (res.isUpdate) {
+			FileUtils.deleteDir(libDir);
+		}
 		if (!libDir.exists() && !libDir.mkdirs()) {
 			return InstallResult.makeFailure("Unable to create lib dir.");
 		}
 		boolean dependSystem = (flags & InstallStrategy.DEPEND_SYSTEM_IF_EXIST) != 0
 				&& VirtualCore.get().isOutsideInstalled(pkg.packageName);
 
 		if (!onlyScan) {
-			if (res.isUpdate) {
-				FileUtils.deleteDir(libDir);
-			}
 			NativeLibraryHelperCompat.copyNativeBinaries(new File(apkPath), libDir);
 			if (!dependSystem) {
 				// /data/app/com.xxx.xxx-1/base.apk

File: VirtualApp/app/src/main/java/io/virtualapp/home/adapters/AppPagerAdapter.java
Patch:
@@ -37,7 +37,7 @@ public AppPagerAdapter(FragmentManager fm) {
 			for (StorageVolume volume : storage.getStorageVolumes()) {
 				//Why the fuck are getPathFile and getUserLabel hidden?!
 				//StorageVolume is kinda useless without those...
-				File dir = (File) Reflect.on(volume).call("getPathFile").get();
+				File dir = Reflect.on(volume).call("getPathFile").get();
 				String label = Reflect.on(volume).call("getUserLabel").get();
 				if (dir.listFiles() != null) {
 					titles.add(label);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/ipc/LocalProxyUtils.java
Patch:
@@ -26,7 +26,9 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                 long identity = Binder.clearCallingIdentity();
                 try {
                     return method.invoke(base, args);
-                } finally {
+                } catch (Throwable e) {
+                    throw e.getCause() != null ? e.getCause() : e;
+                }finally {
                     Binder.restoreCallingIdentity(identity);
                 }
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -66,6 +66,7 @@ public boolean isBooting() {
 
 	public static void systemReady() {
 		VAppManagerService instance = new VAppManagerService();
+        instance.mBroadcastSystem.initialize();
 		instance.mUidSystem.initUidList();
 		instance.preloadAllApps();
 		gService.set(instance);

File: VirtualApp/app/src/main/java/io/virtualapp/home/ListAppContract.java
Patch:
@@ -11,9 +11,6 @@
  * @version 1.0
  */
 public class ListAppContract {
-	public static final int SELECT_APP_FROM_SYSTEM = 0;
-	public static final int SELECT_APP_FROM_SD_CARD = 1;
-
 	interface ListAppView extends BaseView<ListAppPresenter> {
 
 		void startLoading();

File: VirtualApp/app/src/main/java/io/virtualapp/home/models/AppDataSource.java
Patch:
@@ -1,5 +1,6 @@
 package io.virtualapp.home.models;
 
+import java.io.File;
 import java.util.List;
 
 import org.jdeferred.Promise;
@@ -24,7 +25,7 @@ public interface AppDataSource {
 	 */
 	Promise<List<AppModel>, Throwable, Void> getInstalledApps(Context context);
 
-	Promise<List<AppModel>, Throwable, Void> getSdCardApps(Context context);
+	Promise<List<AppModel>, Throwable, Void> getStorageApps(Context context, File rootDir);
 
 	void addVirtualApp(AppModel app) throws Throwable;
 

File: VirtualApp/lib/src/main/java/mirror/android/content/pm/ParceledListSlice.java
Patch:
@@ -2,6 +2,8 @@
 
 import android.os.Parcelable;
 
+import java.util.List;
+
 import mirror.RefClass;
 import mirror.RefConstructor;
 import mirror.RefMethod;
@@ -19,4 +21,5 @@ public class ParceledListSlice {
     public static RefMethod<Boolean> isLastSlice;
     public static RefMethod<Parcelable> populateList;
     public static RefMethod<Void> setLastSlice;
+    public static RefMethod<List<?>> getList;
 }

File: VirtualApp/lib/src/main/java/mirror/android/content/pm/ParceledListSlice.java
Patch:
@@ -2,6 +2,8 @@
 
 import android.os.Parcelable;
 
+import java.util.List;
+
 import mirror.RefClass;
 import mirror.RefConstructor;
 import mirror.RefMethod;
@@ -19,4 +21,5 @@ public class ParceledListSlice {
     public static RefMethod<Boolean> isLastSlice;
     public static RefMethod<Parcelable> populateList;
     public static RefMethod<Void> setLastSlice;
+    public static RefMethod<List<?>> getList;
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/SpecialComponentList.java
Patch:
@@ -54,6 +54,9 @@ public static void addBlackAction(String action) {
     }
 
     public static String protectAction(String originAction) {
+        if (originAction == null) {
+            return null;
+        }
         if (originAction.startsWith("_VA_")) {
             return originAction;
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -946,7 +946,7 @@ boolean handleStaticBroadcast(int appId, ActivityInfo info, Intent intent, Broad
 		if (realIntent == null) {
 			realIntent = intent;
 		}
-		String originAction = SpecialComponentList.restoreAction(realIntent.getAction());
+		String originAction = SpecialComponentList.unprotectAction(realIntent.getAction());
 		if (originAction != null) {
 			realIntent.setAction(originAction);
 		}

File: VirtualApp/app/src/main/java/io/virtualapp/enter/setup/SetupPresenterImpl.java
Patch:
@@ -17,7 +17,7 @@
 	private SetupView mView;
 	private Context mContext;
 
-	public SetupPresenterImpl(SetupView view, Context context) {
+	SetupPresenterImpl(SetupView view, Context context) {
 		this.mView = view;
 		this.mContext = context;
 		mView.setPresenter(this);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/CrashReporter.java
Patch:
@@ -3,6 +3,7 @@
 import android.os.Environment;
 import android.os.Process;
 
+import com.lody.virtual.helper.compat.SystemPropertiesCompat;
 import com.lody.virtual.helper.utils.VLog;
 
 import java.io.File;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/binders/BluetoothBinderDelegate.java
Patch:
@@ -1,7 +1,6 @@
 package com.lody.virtual.client.hook.binders;
 
 
-import android.content.Context;
 import android.os.Build;
 import android.os.IBinder;
 import android.os.IInterface;
@@ -12,8 +11,8 @@
 import mirror.android.os.ServiceManager;
 
 public class BluetoothBinderDelegate extends HookBinderDelegate {
-    public static final String SERVICE_NAME = Build.VERSION.SDK_INT >= 18 ?
-            Context.BLUETOOTH_SERVICE :
+    public static final String SERVICE_NAME = Build.VERSION.SDK_INT >= 17 ?
+            "bluetooth_manager" :
             "bluetooth";
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/delegate/PhoneInfoDelegate.java
Patch:
@@ -1,8 +1,8 @@
 package com.lody.virtual.client.hook.delegate;
 
+public interface PhoneInfoDelegate {
 
-import com.lody.virtual.client.hook.base.DelegateResult;
+    String getDeviceId(String oldDeviceId);
 
-public interface PhoneInfoDelegate {
-    DelegateResult<String> getDeviceId(String oldDeviceId);
+    String getBluetoothAddress(String oldAddress);
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/bluetooth/BluetoothPatch.java
Patch:
@@ -23,7 +23,7 @@ public void inject() throws Throwable {
     @Override
     protected void onBindHooks() {
         super.onBindHooks();
-
+        addHook(new GetAddress());
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/PhoneSubInfoPatch.java
Patch:
@@ -12,7 +12,7 @@
  * @author Lody
  *
  */
-@Patch({Hook_GetDeviceId.class, Hook_GetDeviceIdForSubscriber.class})
+@Patch({GetDeviceId.class, GetDeviceIdForSubscriber.class})
 public class PhoneSubInfoPatch extends PatchDelegate<PhoneSubInfoBinderDelegate> {
 	@Override
 	protected PhoneSubInfoBinderDelegate createHookDelegate() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/telephony/TelephonyPatch.java
Patch:
@@ -15,7 +15,7 @@
  *
  *
  */
-@Patch({Hook_GetDeviceId.class})
+@Patch({GetDeviceId.class})
 public class TelephonyPatch extends PatchDelegate<TelephonyBinderDelegate> {
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ActivityStack.java
Patch:
@@ -45,7 +45,7 @@
 	/**
 	 * [Key] = TaskId [Value] = TaskRecord
 	 */
-	private final SparseArray<TaskRecord> mHistory = new SparseArray<>();
+	final SparseArray<TaskRecord> mHistory = new SparseArray<>();
 
 
 	ActivityStack(VActivityManagerService mService) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ProcessMap.java
Patch:
@@ -3,8 +3,8 @@
 import com.lody.virtual.helper.utils.collection.ArrayMap;
 import com.lody.virtual.helper.utils.collection.SparseArray;
 
-public class ProcessMap<E> {
-	final ArrayMap<String, SparseArray<E>> mMap = new ArrayMap<>();
+class ProcessMap<E> {
+	private final ArrayMap<String, SparseArray<E>> mMap = new ArrayMap<>();
 
 	public E get(String name, int uid) {
 		SparseArray<E> uids = mMap.get(name);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -975,14 +975,14 @@ private void handleStaticBroadcastAsUser(int uid, ActivityInfo info, Intent inte
 				r = startProcessIfNeedLocked(info.processName, getUserId(uid), info.packageName);
 			}
 			if (r != null && r.appThread != null) {
-				handleBroadcastIntent(r.appThread, getUserId(uid), info, intent, receiver.isOrderedBroadcast(),
+				performScheduleReceiver(r.appThread, getUserId(uid), info, intent, receiver.isOrderedBroadcast(),
 						result);
 			}
 		}
 	}
 
-	private void handleBroadcastIntent(IInterface thread, int sendingUser, ActivityInfo info, Intent intent,
-									   boolean sync, BroadcastReceiver.PendingResult result) {
+	private void performScheduleReceiver(IInterface thread, int sendingUser, ActivityInfo info, Intent intent,
+										 boolean sync, BroadcastReceiver.PendingResult result) {
 
 		ComponentName componentName = ComponentUtils.toComponentName(info);
 		if (intent.getComponent() != null && !componentName.equals(intent.getComponent())) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/job/JobCompletedListener.java
Patch:
@@ -13,5 +13,5 @@ public interface JobCompletedListener {
      * Callback for when a job is completed.
      * @param needsReschedule Whether the implementing class should reschedule this job.
      */
-    public void onJobCompleted(JobStatus jobStatus, boolean needsReschedule);
+    void onJobCompleted(JobStatus jobStatus, boolean needsReschedule);
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/PhoneSubInfoPatch.java
Patch:
@@ -12,7 +12,7 @@
  * @author Lody
  *
  */
-@Patch({Hook_GetDeviceId.class})
+@Patch({Hook_GetDeviceId.class, Hook_GetDeviceIdForSubscriber.class})
 public class PhoneSubInfoPatch extends PatchDelegate<PhoneSubInfoBinderDelegate> {
 	@Override
 	protected PhoneSubInfoBinderDelegate createHookDelegate() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/PhoneSubInfoPatch.java
Patch:
@@ -12,7 +12,7 @@
  * @author Lody
  *
  */
-@Patch({Hook_GetDeviceId.class})
+@Patch({Hook_GetDeviceId.class, Hook_GetDeviceIdForSubscriber.class})
 public class PhoneSubInfoPatch extends PatchDelegate<PhoneSubInfoBinderDelegate> {
 	@Override
 	protected PhoneSubInfoBinderDelegate createHookDelegate() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -788,7 +788,7 @@ public void killAppByPkg(final String pkg, int userId) {
 				for (int i = 0; i < uids.size(); i++) {
 					ProcessRecord r = uids.valueAt(i);
 					if (userId != VUserHandle.USER_ALL) {
-						if (!(getUserId(userId) == userId)) {
+                        if (r.userId != userId) {
 							continue;
 						}
 					}
@@ -890,7 +890,7 @@ public int stopUser(int userHandle, IStopUserCallback.Stub stub) {
 			int N = mPidsSelfLocked.size();
 			while (N-- > 0) {
 				ProcessRecord r = mPidsSelfLocked.valueAt(N);
-				if (r.vuid == userHandle) {
+                if (r.userId == userHandle) {
 					killProcess(r.pid);
 				}
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -87,6 +87,9 @@ public void preloadAllApps() {
 				}
 				if (appInfo == null || appInfo.publicSourceDir == null) {
 					FileUtils.deleteDir(appDir);
+                    for (int userId : VUserManagerService.get().getUserIds()) {
+                        FileUtils.deleteDir(VEnvironment.getDataUserPackageDirectory(userId, pkgName));
+                    }
 					continue;
 				}
 				storeFile = new File(appInfo.publicSourceDir);

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VUserManagerService.java
Patch:
@@ -242,7 +242,7 @@ public void setUserIcon(int userId, Bitmap bitmap) {
 
     private void sendUserInfoChangedBroadcast(int userId) {
         Intent changedIntent = new Intent(Constants.ACTION_USER_INFO_CHANGED);
-        changedIntent.putExtra(Intent.EXTRA_UID, userId);
+        changedIntent.putExtra(Constants.EXTRA_USER_HANDLE, userId);
         changedIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
         VActivityManagerService.get().sendBroadcastAsUser(changedIntent, new VUserHandle(userId));
     }
@@ -703,7 +703,7 @@ public VUserInfo createUser(String name, int flags) {
                 }
             }
             Intent addedIntent = new Intent(Constants.ACTION_USER_ADDED);
-            addedIntent.putExtra(Intent.EXTRA_UID, userInfo.id);
+            addedIntent.putExtra(Constants.EXTRA_USER_HANDLE, userInfo.id);
             VActivityManagerService.get().sendBroadcastAsUser(addedIntent, VUserHandle.ALL,
                         null);
         } finally {
@@ -753,7 +753,7 @@ void finishRemoveUser(final int userHandle) {
         long identity = Binder.clearCallingIdentity();
         try {
             Intent addedIntent = new Intent(Constants.ACTION_USER_REMOVED);
-            addedIntent.putExtra(Intent.EXTRA_UID, userHandle);
+            addedIntent.putExtra(Constants.EXTRA_USER_HANDLE, userHandle);
             VActivityManagerService.get().sendOrderedBroadcastAsUser(addedIntent, VUserHandle.ALL,
                    null,
                     new BroadcastReceiver() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -223,7 +223,7 @@ public synchronized void start() {
 				super.start();
 			}
 		});
-		if (data.appInfo.targetSdkVersion < 9) {
+		if (data.appInfo.targetSdkVersion < Build.VERSION_CODES.GINGERBREAD) {
 			StrictMode.ThreadPolicy newPolicy = new StrictMode.ThreadPolicy.Builder(StrictMode.getThreadPolicy()).permitNetwork().build();
 			StrictMode.setThreadPolicy(newPolicy);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/utils/HookUtils.java
Patch:
@@ -3,8 +3,8 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.helper.utils.ArrayUtils;
 
-import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 
 /**
  * @author Lody
@@ -46,15 +46,15 @@ public static String replaceSequenceAppPkg(Object[] args, int sequence) {
 	}
 
 	public static Class<?>[] getAllInterface(Class clazz){
-		ArrayList<Class<?>> classes = new ArrayList<>();
+		HashSet<Class<?>> classes = new HashSet<>();
 		getAllInterfaces(clazz,classes);
 		Class<?>[] result=new Class[classes.size()];
 		classes.toArray(result);
 		return result;
 	}
 
 
-	public static void getAllInterfaces(Class clazz, ArrayList<Class<?>> interfaceCollection) {
+	public static void getAllInterfaces(Class clazz, HashSet<Class<?>> interfaceCollection) {
 		Class<?>[] classes = clazz.getInterfaces();
 		if (classes.length != 0) {
 			interfaceCollection.addAll(Arrays.asList(classes));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/utils/HookUtils.java
Patch:
@@ -3,8 +3,8 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.helper.utils.ArrayUtils;
 
-import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 
 /**
  * @author Lody
@@ -46,15 +46,15 @@ public static String replaceSequenceAppPkg(Object[] args, int sequence) {
 	}
 
 	public static Class<?>[] getAllInterface(Class clazz){
-		ArrayList<Class<?>> classes = new ArrayList<>();
+		HashSet<Class<?>> classes = new HashSet<>();
 		getAllInterfaces(clazz,classes);
 		Class<?>[] result=new Class[classes.size()];
 		classes.toArray(result);
 		return result;
 	}
 
 
-	public static void getAllInterfaces(Class clazz, ArrayList<Class<?>> interfaceCollection) {
+	public static void getAllInterfaces(Class clazz, HashSet<Class<?>> interfaceCollection) {
 		Class<?>[] classes = clazz.getInterfaces();
 		if (classes.length != 0) {
 			interfaceCollection.addAll(Arrays.asList(classes));

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/pm/VAppManagerService.java
Patch:
@@ -246,7 +246,7 @@ public int getAppCount() {
 	}
 
 	public boolean isAppInstalled(String pkg) {
-		return pkg != null && PackageCache.sPackageCaches.get(pkg) != null;
+		return pkg != null && !"android".equals(pkg) && PackageCache.sPackageCaches.get(pkg) != null;
 	}
 
 	private void notifyAppInstalled(AppSetting setting) {

File: VirtualApp/app/src/main/java/io/virtualapp/VCommends.java
Patch:
@@ -11,4 +11,5 @@ public class VCommends {
 	public static final int REQUEST_SELECT_APP = 5;
 
 	public static final String EXTRA_APP_MODEL = "io.virtualapp.extra.APP_MODEL";
+
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/UnbindService.java
Patch:
@@ -27,7 +27,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		if (delegate == null) {
 			return method.invoke(who, args);
 		}
-		return VActivityManager.get().unbindService(conn);
+		return VActivityManager.get().unbindService(delegate);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ActivityStack.java
Patch:
@@ -552,7 +552,7 @@ ComponentName getCallingActivity(int userId, IBinder token) {
 		synchronized (mHistory) {
 			ActivityRecord r = findActivityByToken(userId, token);
 			if (r != null) {
-				return r.component;
+				return r.caller;
 			}
 			return null;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -21,6 +21,7 @@
 import com.lody.virtual.client.hook.patchs.graphics.GraphicsStatsPatch;
 import com.lody.virtual.client.hook.patchs.imms.MmsPatch;
 import com.lody.virtual.client.hook.patchs.input.InputMethodManagerPatch;
+import com.lody.virtual.client.hook.patchs.isms.ISmsPatch;
 import com.lody.virtual.client.hook.patchs.isub.ISubPatch;
 import com.lody.virtual.client.hook.patchs.job.JobPatch;
 import com.lody.virtual.client.hook.patchs.libcore.LibCorePatch;
@@ -128,7 +129,7 @@ private void injectInternal() throws Throwable {
 			addPatch(new PackageManagerPatch());
 			// ## End
 			addPatch(HCallbackHook.getDefault());
-
+			addPatch(new ISmsPatch());
 			addPatch(new ISubPatch());
 			addPatch(new DropBoxManagerPatch());
 			addPatch(new NotificationManagerPatch());

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/appops/AppOpsManagerPatch.java
Patch:
@@ -5,7 +5,6 @@
 import android.os.Build;
 
 import com.lody.virtual.client.hook.base.PatchDelegate;
-import com.lody.virtual.client.hook.base.ReplaceCallingPkgHook;
 import com.lody.virtual.client.hook.base.ReplaceLastPkgHook;
 import com.lody.virtual.client.hook.base.StaticHook;
 import com.lody.virtual.client.hook.binders.AppOpsBinderDelegate;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/appops/AppOpsManagerPatch.java
Patch:
@@ -47,7 +47,7 @@ protected void onBindHooks() {
 		addHook(new BaseHook("setMode", 1, 2));
 		addHook(new BaseHook("checkAudioOperation", 2, 3));
 		addHook(new BaseHook("setAudioRestriction", 2, -1));
-		addHook(new ReplaceCallingPkgHook("noteProxyOperation"));
+		addHook(new BaseHook("noteProxyOperation", 2, 3));
 		addHook(new ReplaceLastPkgHook("resetAllModes"));
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -6,7 +6,7 @@
 import com.lody.virtual.client.hook.base.PatchDelegate;
 import com.lody.virtual.client.hook.delegate.AppInstrumentation;
 import com.lody.virtual.client.hook.patchs.account.AccountManagerPatch;
-import com.lody.virtual.client.hook.patchs.alerm.AlarmManagerPatch;
+import com.lody.virtual.client.hook.patchs.alarm.AlarmManagerPatch;
 import com.lody.virtual.client.hook.patchs.am.ActivityManagerPatch;
 import com.lody.virtual.client.hook.patchs.am.HCallbackHook;
 import com.lody.virtual.client.hook.patchs.appops.AppOpsManagerPatch;
@@ -91,7 +91,7 @@ void injectAll() throws Throwable {
 			injectable.inject();
 		}
 		// XXX: Lazy inject the Instrumentation,
-		// this will be important in many cases.
+		// this is important in many cases.
 		addPatch(AppInstrumentation.getDefault());
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/Reflect.java
Patch:
@@ -1,7 +1,5 @@
 package com.lody.virtual.helper.utils;
 
-import android.util.Log;
-
 import java.lang.reflect.AccessibleObject;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
@@ -13,7 +11,6 @@
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.NoSuchElementException;
 
 /**
  * 一个拥有流畅特性(Fluent-API)的反射工具类, 使用起来就像直接调用一样流畅易懂.
@@ -566,6 +563,7 @@ public Class<?> type() {
         }
     }
 
+
     /**
      * 用来表示null的类.
      *

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/GetPackageInfo.java
Patch:
@@ -1,7 +1,6 @@
 package com.lody.virtual.client.hook.patchs.pm;
 
 import android.content.pm.PackageInfo;
-import android.os.Process;
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.local.VPackageManager;
@@ -37,7 +36,6 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		int userId = VUserHandle.myUserId();
 		PackageInfo packageInfo = VPackageManager.get().getPackageInfo(pkg, flags, userId);
 		if (packageInfo != null) {
-			packageInfo.applicationInfo.uid = Process.myUid();
 			return packageInfo;
 		}
 		packageInfo = (PackageInfo) method.invoke(who, args);

File: VirtualApp/lib/src/main/java/mirror/android/app/Notification.java
Patch:
@@ -8,7 +8,7 @@
 import mirror.RefMethod;
 
 public class Notification {
-    public static Class<?> Class = RefClass.load(Notification.class, android.app.Notification.class);
+    public static Class<?> TYPE = RefClass.load(Notification.class, android.app.Notification.class);
     @MethodParams({Context.class, CharSequence.class, CharSequence.class, PendingIntent.class})
     public static RefMethod<Void> setLatestEventInfo;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/app/NotificationL.java
Patch:
@@ -8,10 +8,10 @@
 import mirror.RefStaticMethod;
 
 public class NotificationL {
-    public static Class<?> Class = RefClass.load(NotificationL.class, Notification.class);
+    public static Class<?> TYPE = RefClass.load(NotificationL.class, Notification.class);
 
     public static class Builder {
-        public static Class<?> Class = RefClass.load(Builder.class, android.app.Notification.Builder.class);
+        public static Class<?> TYPE = RefClass.load(Builder.class, android.app.Notification.Builder.class);
 
         @MethodParams({Context.class, Notification.class})
         public static RefStaticMethod<Notification> rebuild;

File: VirtualApp/lib/src/main/java/mirror/android/app/NotificationM.java
Patch:
@@ -8,7 +8,7 @@
 import mirror.RefObject;
 
 public class NotificationM {
-    public static Class<?> Class = RefClass.load(NotificationM.class, Notification.class);
+    public static Class<?> TYPE = RefClass.load(NotificationM.class, Notification.class);
     public static RefObject<Icon> mLargeIcon;
     public static RefObject<Icon> mSmallIcon;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/content/pm/PackageInstaller.java
Patch:
@@ -15,7 +15,7 @@
 public class PackageInstaller {
 
     public static class SessionInfo {
-        public static Class<?> Class = RefClass.load(SessionInfo.class, "android.content.pm.PackageInstaller$SessionInfo");
+        public static Class<?> TYPE = RefClass.load(SessionInfo.class, "android.content.pm.PackageInstaller$SessionInfo");
         public static RefBoolean active;
         public static RefObject<Bitmap> appIcon;
         public static RefObject<CharSequence> appLabel;
@@ -31,7 +31,7 @@ public static class SessionInfo {
     }
 
     public static class SessionParamsLOLLIPOP {
-        public static Class<?> Class = RefClass.load(SessionParamsLOLLIPOP.class, "android.content.pm.PackageInstaller$SessionParams");
+        public static Class<?> TYPE = RefClass.load(SessionParamsLOLLIPOP.class, "android.content.pm.PackageInstaller$SessionParams");
         public static RefObject<String> abiOverride;
         public static RefObject<Bitmap> appIcon;
         public static RefLong appIconLastModified;
@@ -46,7 +46,7 @@ public static class SessionParamsLOLLIPOP {
     }
 
     public static class SessionParamsMarshmallow {
-        public static Class<?> Class = RefClass.load(SessionParamsMarshmallow.class, "android.content.pm.PackageInstaller$SessionParams");
+        public static Class<?> TYPE = RefClass.load(SessionParamsMarshmallow.class, "android.content.pm.PackageInstaller$SessionParams");
         public static RefObject<String> abiOverride;
         public static RefObject<Bitmap> appIcon;
         public static RefLong appIconLastModified;

File: VirtualApp/lib/src/main/java/mirror/android/content/pm/UserInfo.java
Patch:
@@ -7,7 +7,7 @@
 import mirror.RefStaticInt;
 
 public class UserInfo {
-    public static Class<?> Class = RefClass.load(UserInfo.class, "android.content.pm.UserInfo");
+    public static Class<?> TYPE = RefClass.load(UserInfo.class, "android.content.pm.UserInfo");
     public static RefStaticInt FLAG_PRIMARY;
     @MethodParams({int.class, String.class, int.class})
     public static RefConstructor<Object> ctor;

File: VirtualApp/lib/src/main/java/mirror/android/graphics/drawable/Icon.java
Patch:
@@ -4,7 +4,7 @@
 import mirror.RefMethod;
 
 public class Icon {
-    public static Class<?> Class = RefClass.load(Icon.class, android.graphics.drawable.Icon.class);
+    public static Class<?> TYPE = RefClass.load(Icon.class, android.graphics.drawable.Icon.class);
     public static RefMethod<Integer> getType;
     public static RefMethod<String> mString1;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/location/ILocationListener.java
Patch:
@@ -14,9 +14,9 @@
  * @author legency
  */
 public class ILocationListener {
-    public static Class<?> Class = RefClass.load(ILocationListener.class, "android.location.ILocationListener");
+    public static Class<?> TYPE = RefClass.load(ILocationListener.class, "android.location.ILocationListener");
     public static class Stub {
-        public static Class<?> Class = RefClass.load(Stub.class, "android.location.ILocationListener$Stub");
+        public static Class<?> TYPE = RefClass.load(Stub.class, "android.location.ILocationListener$Stub");
         @MethodParams({IBinder.class})
         public static RefStaticMethod<IInterface> asInterface;
     }

File: VirtualApp/lib/src/main/java/mirror/android/net/IConnectivityManager.java
Patch:
@@ -16,7 +16,7 @@ public class IConnectivityManager {
     public static Class<?> TYPE = RefClass.load(IConnectivityManager.class, "android.net.IConnectivityManager");
 
     public static class Stub {
-        public static Class<?> Class = RefClass.load(Stub.class, "android.net.IConnectivityManager$Stub");
+        public static Class<?> TYPE = RefClass.load(Stub.class, "android.net.IConnectivityManager$Stub");
         @MethodParams({IBinder.class})
         public static RefStaticMethod<IInterface> asInterface;
     }

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -6,7 +6,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.pm.UserInfo;
+import com.lody.virtual.os.VUserInfo;
 import android.graphics.Color;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
@@ -257,9 +257,9 @@ protected void onDestroy() {
 	}
 
 	public String[] getUsers() {
-		List<UserInfo> userList = VUserManager.get().getUsers(false);
+		List<VUserInfo> userList = VUserManager.get().getUsers(false);
 		List<String> users = new ArrayList<>(userList.size());
-		for (UserInfo info : userList) {
+		for (VUserInfo info : userList) {
 			users.add(info.name);
 		}
 		return users.toArray(new String[users.size()]);

File: VirtualApp/app/src/main/java/io/virtualapp/users/UserListActivity.java
Patch:
@@ -1,6 +1,6 @@
 package io.virtualapp.users;
 
-import android.content.pm.UserInfo;
+import com.lody.virtual.os.VUserInfo;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v7.app.AlertDialog;
@@ -62,7 +62,7 @@ private void createUser(String userName) {
             Toast.makeText(this, "Invalid user name!", Toast.LENGTH_SHORT).show();
             return;
         }
-        VUserManager.get().createUser(userName, UserInfo.FLAG_ADMIN);
+        VUserManager.get().createUser(userName, VUserInfo.FLAG_ADMIN);
         Toast.makeText(this, "Create user success!", Toast.LENGTH_SHORT).show();
         refresh();
     }

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/ActivityStack.java
Patch:
@@ -396,6 +396,7 @@ private void realStartActivityLocked(IBinder resultTo, Intent intent, String res
 		int intentIndex = ArrayUtils.protoIndexOf(types, Intent.class);
 		int resultToIndex = ArrayUtils.protoIndexOf(types, IBinder.class, 2);
 		int optionsIndex = ArrayUtils.protoIndexOf(types, Bundle.class);
+		int resolvedTypeIndex = intentIndex + 1;
 		int resultWhoIndex = resultToIndex + 1;
 		int requestCodeIndex = resultToIndex + 2;
 
@@ -406,6 +407,7 @@ private void realStartActivityLocked(IBinder resultTo, Intent intent, String res
 		if (optionsIndex != -1) {
 			args[optionsIndex] = options;
 		}
+		args[resolvedTypeIndex] = intent.getType();
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
 			args[intentIndex - 1] = VirtualCore.get().getHostPkg();
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/am/VActivityManagerService.java
Patch:
@@ -15,7 +15,7 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ProviderInfo;
 import android.content.pm.ServiceInfo;
-import android.content.pm.UserInfo;
+import com.lody.virtual.os.VUserInfo;
 import android.os.Binder;
 import android.os.Build;
 import android.os.Bundle;
@@ -949,8 +949,8 @@ public boolean handleStaticBroadcast(int appId, ActivityInfo info, Intent intent
 			int uid = VUserHandle.getUid(userId, appId);
 			handleStaticBroadcastAsUser(uid, info, realIntent, receiver, result);
 		} else if (userId == VUserHandle.USER_ALL) {
-			List<UserInfo> userList = VUserManager.get().getUsers(false);
-			for (UserInfo userInfo : userList) {
+			List<VUserInfo> userList = VUserManager.get().getUsers(false);
+			for (VUserInfo userInfo : userList) {
 				int uid = VUserHandle.getUid(userInfo.id, appId);
 				handleStaticBroadcastAsUser(uid, info, realIntent, receiver, result);
 			}

File: VirtualApp/lib/src/main/java/mirror/RefClass.java
Patch:
@@ -14,6 +14,7 @@ public final class RefClass {
             REF_TYPES.put(RefMethod.class, RefMethod.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefInt.class, RefInt.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefLong.class, RefLong.class.getConstructor(Class.class, Field.class));
+            REF_TYPES.put(RefFloat.class, RefFloat.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefDouble.class, RefDouble.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefBoolean.class, RefBoolean.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefStaticObject.class, RefStaticObject.class.getConstructor(Class.class, Field.class));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/VirtualRuntime.java
Patch:
@@ -55,7 +55,9 @@ public static void setupRuntime(String processName, ApplicationInfo appInfo) {
 	public static <T> T crash(RemoteException e) throws RuntimeException {
 		e.printStackTrace();
 		CrashReporter.report(getProcessName(), e);
-		exit();
+		if (VirtualCore.get().isVAppProcess()) {
+			exit();
+		}
 		throw new RuntimeException(e);
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/binders/RestrictionBinderDelegate.java
Patch:
@@ -7,9 +7,9 @@
 import android.os.IInterface;
 
 import com.lody.virtual.client.hook.base.HookBinderDelegate;
-import com.lody.virtual.client.service.ServiceManagerNative;
 
 import mirror.android.content.IRestrictionsManager;
+import mirror.android.os.ServiceManager;
 
 /**
  * @author Lody
@@ -19,7 +19,7 @@ public class RestrictionBinderDelegate extends HookBinderDelegate {
 
 	@Override
 	protected IInterface createInterface() {
-		IBinder binder = ServiceManagerNative.getService(Context.RESTRICTIONS_SERVICE);
+		IBinder binder = ServiceManager.getService.call(Context.RESTRICTIONS_SERVICE);
 		return IRestrictionsManager.Stub.asInterface.call(binder);
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/BindService.java
Patch:
@@ -38,6 +38,9 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		if (isServerProcess()) {
 			userId = service.getIntExtra("_VA_|_user_id_", VUserHandle.USER_NULL);
 		}
+		if (userId == VUserHandle.USER_NULL) {
+			return method.invoke(who, args);
+		}
 		ServiceInfo serviceInfo = VirtualCore.get().resolveServiceInfo(service, userId);
 		if (serviceInfo != null) {
 			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VAccountManager.java
Patch:
@@ -27,8 +27,9 @@ public static VAccountManager get() {
 
 	public IAccountManager getRemote() {
 		if (mRemote == null) {
-			mRemote = IAccountManager.Stub
+			IAccountManager remote = IAccountManager.Stub
 					.asInterface(ServiceManagerNative.getService(ServiceManagerNative.ACCOUNT));
+			mRemote = LocalProxyUtils.genProxy(IAccountManager.class, remote);
 		}
 		return mRemote;
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -54,8 +54,9 @@ public IActivityManager getService() {
 		if (mRemote == null) {
 			synchronized (VActivityManager.class) {
 				if (mRemote == null) {
-					mRemote = IActivityManager.Stub
+					final IActivityManager remote = IActivityManager.Stub
 							.asInterface(ServiceManagerNative.getService(ServiceManagerNative.ACTIVITY));
+					mRemote = LocalProxyUtils.genProxy(IActivityManager.class, remote);
 				}
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VJobScheduler.java
Patch:
@@ -23,7 +23,8 @@ public IJobScheduler getRemote() {
         if (mRemote == null) {
             synchronized (this) {
                 if (mRemote == null) {
-                    mRemote = IJobScheduler.Stub.asInterface(ServiceManagerNative.getService(ServiceManagerNative.JOB));
+                    Object remote = IJobScheduler.Stub.asInterface(ServiceManagerNative.getService(ServiceManagerNative.JOB));
+                    mRemote = LocalProxyUtils.genProxy(IJobScheduler.class, remote);
                 }
             }
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VPackageManager.java
Patch:
@@ -38,7 +38,8 @@ public synchronized IPackageManager getInterface() {
 			synchronized (VPackageManager.class) {
 				if (mRemote == null) {
 					final IBinder pmBinder = ServiceManagerNative.getService(ServiceManagerNative.PACKAGE);
-					mRemote = IPackageManager.Stub.asInterface(pmBinder);
+					Object remote = IPackageManager.Stub.asInterface(pmBinder);
+					mRemote = LocalProxyUtils.genProxy(IPackageManager.class, remote);
 				}
 			}
 		}
@@ -255,4 +256,5 @@ public int getPackageUid(String packageName, int userId) {
 			return VirtualRuntime.crash(e);
 		}
 	}
+
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/DaemonService.java
Patch:
@@ -10,10 +10,10 @@
  * @author Lody
  *
  */
-public class KeepService extends BaseService {
+public class DaemonService extends BaseService {
 
 	public static void startup(Context context) {
-		context.startService(new Intent(context, KeepService.class));
+		context.startService(new Intent(context, DaemonService.class));
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/os/VUserManager.java
Patch:
@@ -321,7 +321,6 @@ public Bitmap getUserIcon(int handle) {
     /**
      * Enable or disable the use of a guest account. If disabled, the existing guest account
      * will be wiped.
-     * Requires {@link android.Manifest.permission#MANAGE_USERS} permission.
      * @param enable whether to enable a guest account.
      * @hide
      */
@@ -335,7 +334,6 @@ public void setGuestEnabled(boolean enable) {
 
     /**
      * Checks if a guest user is enabled for this device.
-     * Requires {@link android.Manifest.permission#MANAGE_USERS} permission.
      * @return whether a guest user is enabled
      * @hide
      */
@@ -350,7 +348,6 @@ public boolean isGuestEnabled() {
 
     /**
      * Wipes all the data for a user, but doesn't remove the user.
-     * Requires {@link android.Manifest.permission#MANAGE_USERS} permission.
      * @param handle
      * @hide
      */

File: VirtualApp/lib/src/main/java/com/lody/virtual/server/BinderProvider.java
Patch:
@@ -8,7 +8,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.service.ServiceManagerNative;
-import com.lody.virtual.client.stub.KeepService;
+import com.lody.virtual.client.stub.DaemonService;
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.component.BaseContentProvider;
 import com.lody.virtual.server.accounts.VAccountManagerService;
@@ -30,7 +30,7 @@ public final class BinderProvider extends BaseContentProvider {
 	@Override
 	public boolean onCreate() {
 		Context context = getContext();
-		KeepService.startup(context);
+		DaemonService.startup(context);
 		if (!VirtualCore.get().isStartup()) {
 			return true;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -344,7 +344,7 @@ public synchronized ActivityInfo resolveActivityInfo(Intent intent, int userId)
 		} else {
 			activityInfo = resolveActivityInfo(intent.getComponent(), userId);
 		}
-		return new ActivityInfo(activityInfo);
+		return activityInfo != null ? new ActivityInfo(activityInfo) : null;
 	}
 
 	public ActivityInfo resolveActivityInfo(ComponentName componentName, int userId) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -344,7 +344,7 @@ public synchronized ActivityInfo resolveActivityInfo(Intent intent, int userId)
 		} else {
 			activityInfo = resolveActivityInfo(intent.getComponent(), userId);
 		}
-		return new ActivityInfo(activityInfo);
+		return activityInfo != null ? new ActivityInfo(activityInfo) : null;
 	}
 
 	public ActivityInfo resolveActivityInfo(ComponentName componentName, int userId) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/GetIntentSender.java
Patch:
@@ -95,7 +95,7 @@ private Intent redirectIntentSender(int type, String creator, Intent intent) {
 		newIntent.putExtra("_VA_|_user_id_", VUserHandle.myUserId());
 		newIntent.putExtra("_VA_|_intent_", intent);
 		newIntent.putExtra("_VA_|_creator_", creator);
-
+		newIntent.putExtra("_VA_|_from_inner_", true);
 
 		return newIntent;
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -376,8 +376,8 @@ public ServiceInfo resolveServiceInfo(Intent intent, int userId) {
 		return serviceInfo;
 	}
 
-	public void killApp(String pkg) {
-		VActivityManager.get().killAppByPkg(pkg);
+	public void killApp(String pkg, int userId) {
+		VActivityManager.get().killAppByPkg(pkg, userId);
 	}
 
 	public void killAllApps() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/Hook.java
Patch:
@@ -59,7 +59,7 @@ protected final boolean isAppProcess() {
 		return VirtualCore.get().isVAppProcess();
 	}
 
-	protected final boolean isServiceProcess() {
+	protected final boolean isServerProcess() {
 		return VirtualCore.get().isServiceProcess();
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -14,6 +14,7 @@
 import com.lody.virtual.client.hook.base.PatchDelegate;
 import com.lody.virtual.client.hook.base.ReplaceCallingPkgHook;
 import com.lody.virtual.client.hook.base.ReplaceLastUidHook;
+import com.lody.virtual.client.hook.base.ResultStaticHook;
 import com.lody.virtual.client.hook.base.StaticHook;
 import com.lody.virtual.client.local.VActivityManager;
 import com.lody.virtual.helper.proto.AppTaskInfo;
@@ -97,6 +98,7 @@ protected void onBindHooks() {
 		if (VirtualCore.get().isVAppProcess()) {
 			addHook(new ReplaceLastUidHook("checkPermissionWithToken"));
 			addHook(new isUserRunning());
+			addHook(new ResultStaticHook("updateConfiguration", 0));
 			addHook(new ReplaceCallingPkgHook("setAppLockedVerifying"));
 			addHook(new StaticHook("checkUriPermission") {
 				@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/BindService.java
Patch:
@@ -35,7 +35,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		IServiceConnection conn = (IServiceConnection) args[4];
 		int flags = (int) args[5];
 		int userId = VUserHandle.myUserId();
-		if (isServiceProcess()) {
+		if (isServerProcess()) {
 			userId = service.getIntExtra("_VA_|_user_id_", VUserHandle.USER_NULL);
 		}
 		ServiceInfo serviceInfo = VirtualCore.get().resolveServiceInfo(service, userId);
@@ -52,6 +52,6 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 
 	@Override
 	public boolean isEnable() {
-		return isAppProcess() || isServiceProcess();
+		return isAppProcess() || isServerProcess();
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ForceStopPackage.java
Patch:
@@ -9,8 +9,6 @@
 /**
  * @author Lody
  *
- *
- * @see android.app.IActivityManager#forceStopPackage(String, int)
  */
 /* package */ class ForceStopPackage extends Hook {
 
@@ -23,7 +21,7 @@ public String getName() {
 	public Object call(Object who, Method method, Object... args) throws Throwable {
 		String pkg = (String) args[0];
 		int userId = VUserHandle.myUserId();
-		VActivityManager.get().killAppByPkg(pkg);
+		VActivityManager.get().killAppByPkg(pkg, userId);
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StopService.java
Patch:
@@ -47,6 +47,6 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 
 	@Override
 	public boolean isEnable() {
-		return isAppProcess() || isServiceProcess();
+		return isAppProcess() || isServerProcess();
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StopServiceToken.java
Patch:
@@ -37,6 +37,6 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 
 	@Override
 	public boolean isEnable() {
-		return isAppProcess() || isServiceProcess();
+		return isAppProcess() || isServerProcess();
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/UnbindService.java
Patch:
@@ -32,6 +32,6 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 
 	@Override
 	public boolean isEnable() {
-		return isAppProcess() || isServiceProcess();
+		return isAppProcess() || isServerProcess();
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/ReplaceLastUidHook.java
Patch:
@@ -8,9 +8,9 @@
 
 public class ReplaceLastUidHook extends StaticHook {
 
-        public ReplaceLastUidHook(String name) {
-            super(name);
-        }
+    public ReplaceLastUidHook(String name) {
+        super(name);
+    }
 
     @Override
     public boolean beforeCall(Object who, Method method, Object... args) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -96,8 +96,6 @@ protected void onBindHooks() {
 		super.onBindHooks();
 		if (VirtualCore.get().isVAppProcess()) {
 			addHook(new ReplaceLastUidHook("checkPermissionWithToken"));
-
-
 			addHook(new isUserRunning());
 			addHook(new ReplaceCallingPkgHook("setAppLockedVerifying"));
 			addHook(new StaticHook("checkUriPermission") {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/KeepService.java
Patch:
@@ -9,9 +9,6 @@
 /**
  * @author Lody
  *
- *
- *         与ServiceContentProvider同进程，用于维持进程不死。
- *
  */
 public class KeepService extends BaseService {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/pm/VAppManagerService.java
Patch:
@@ -184,7 +184,7 @@ private synchronized InstallResult install(String apkPath, int flags, boolean on
 		}
 		appSetting.odexDir = odexFolder.getPath();
 		appSetting.packageName = pkg.packageName;
-		appSetting.appId = VUserHandle.getAppId(mUidSystem.getOrCreateUid(pkg.mSharedUserId));
+		appSetting.appId = VUserHandle.getAppId(mUidSystem.getOrCreateUid(pkg));
 
 		PackageCache.put(pkg, appSetting);
 		mBroadcastSystem.startApp(pkg);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/accounts/VAccountManagerService.java
Patch:
@@ -894,7 +894,7 @@ private void broadcastCheckInNow(int userId) {
 	 * Serializing all accounts
 	 */
 	private void serializeAllAccounts() {
-		File accountFile = new File(VEnvironment.getSystemSecureDirectory(), "accounts.ini");
+		File accountFile = VEnvironment.getAccountFile();
 		Parcel dest = Parcel.obtain();
 		try {
 			dest.writeInt(1);
@@ -923,7 +923,7 @@ private void serializeAllAccounts() {
 	 * Read all accounts from file.
 	 */
 	private void deserializeAllAccounts() {
-		File accountFile = new File(VEnvironment.getSystemSecureDirectory(), "accounts.ini");
+		File accountFile = VEnvironment.getAccountFile();
 		refreshAuthenticatorCache(null);
 		if (accountFile.exists()) {
 			accountsByUserId.clear();

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityStack.java
Patch:
@@ -9,7 +9,6 @@
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.RemoteException;
-import android.text.TextUtils;
 import android.util.SparseArray;
 
 import com.lody.virtual.client.core.VirtualCore;
@@ -352,8 +351,7 @@ int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBinder re
 				}
 
 			}
-		} else if (ComponentUtils.isLaunchIntent(intent) ||
-				(!clearTarget.deliverIntent && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot))) {
+		} else if (!clearTarget.deliverIntent && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot)) {
 			// In this case, we only need to move the task to front.
 			mAM.moveTaskToFront(reuseTask.taskId, 0);
 		} else {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityStack.java
Patch:
@@ -9,7 +9,6 @@
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.RemoteException;
-import android.text.TextUtils;
 import android.util.SparseArray;
 
 import com.lody.virtual.client.core.VirtualCore;
@@ -352,8 +351,7 @@ int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBinder re
 				}
 
 			}
-		} else if (ComponentUtils.isLaunchIntent(intent) ||
-				(!clearTarget.deliverIntent && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot))) {
+		} else if (!clearTarget.deliverIntent && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot)) {
 			// In this case, we only need to move the task to front.
 			mAM.moveTaskToFront(reuseTask.taskId, 0);
 		} else {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityStack.java
Patch:
@@ -9,6 +9,7 @@
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.RemoteException;
+import android.text.TextUtils;
 import android.util.SparseArray;
 
 import com.lody.virtual.client.core.VirtualCore;
@@ -351,7 +352,8 @@ int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBinder re
 				}
 
 			}
-		} else if (!clearTarget.deliverIntent && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot)) {
+		} else if (ComponentUtils.isLaunchIntent(intent) ||
+				(!clearTarget.deliverIntent && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot))) {
 			// In this case, we only need to move the task to front.
 			mAM.moveTaskToFront(reuseTask.taskId, 0);
 		} else {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/TaskRecord.java
Patch:
@@ -6,6 +6,8 @@
 import com.lody.virtual.helper.proto.AppTaskInfo;
 
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * @author Lody
@@ -16,7 +18,7 @@ class TaskRecord {
     public int userId;
     public String affinity;
     public Intent taskRoot;
-    public final ArrayList<ActivityRecord> activities = new ArrayList<>();
+    public final List<ActivityRecord> activities = Collections.synchronizedList(new ArrayList<ActivityRecord>());
 
     TaskRecord(int taskId, int userId, String affinity, Intent intent) {
         this.taskId = taskId;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/libcore/Stat.java
Patch:
@@ -1,14 +1,13 @@
 package com.lody.virtual.client.hook.patchs.libcore;
 
+import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 
 import mirror.libcore.io.Os;
 
-import static android.os.Process.myUid;
-
 /**
  * @author Lody
  */
@@ -30,7 +29,7 @@ public class Stat extends Hook {
     @Override
     public Object afterCall(Object who, Method method, Object[] args, Object result) throws Throwable {
         int uid = (int) st_uid.get(result);
-        if (uid == myUid()) {
+        if (uid == VirtualCore.get().myUid()) {
             st_uid.set(result, getBaseVUid());
         }
         return result;

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VActivityManagerService.java
Patch:
@@ -205,7 +205,7 @@ public IBinder acquireProviderClient(int userId, ProviderInfo info) {
 		synchronized (this) {
 			r = startProcessIfNeedLocked(processName, userId, info.packageName);
 		}
-		if (r != null) {
+		if (r != null && r.client.asBinder().isBinderAlive()) {
 			try {
 				return r.client.acquireProviderClient(info);
 			} catch (RemoteException e) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/HookDelegate.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.text.TextUtils;
 
-import com.lody.virtual.client.hook.utils.ProxyUtil;
+import com.lody.virtual.client.hook.utils.HookUtils;
 import com.lody.virtual.client.interfaces.IHookObject;
 import com.lody.virtual.helper.utils.VLog;
 
@@ -38,7 +38,7 @@ public HookDelegate(Class<?>... proxyInterfaces) {
 		mBaseInterface = createInterface();
 		if (mBaseInterface != null) {
 			if (proxyInterfaces == null) {
-				proxyInterfaces = ProxyUtil.getAllInterface(mBaseInterface.getClass());
+				proxyInterfaces = HookUtils.getAllInterface(mBaseInterface.getClass());
 			}
 			mProxyInterface = (T) Proxy.newProxyInstance(mBaseInterface.getClass().getClassLoader(), proxyInterfaces, new HookHandler());
 		} else {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -92,6 +92,7 @@ private boolean handleLaunchActivity(Message msg) {
 		if (!VClientImpl.getClient().isBound()) {
 			VClientImpl.getClient().bindApplication(info.packageName, info.processName);
 			getH().sendMessageAtFrontOfQueue(Message.obtain(msg));
+			return false;
 		}
 		int taskId = IActivityManager.getTaskForActivity.call(
 				ActivityManagerNative.getDefault.call(),

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/libcore/Lstat.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * @author Lody
  */
-public class Lstat extends GetUid {
+public class Lstat extends Stat {
 
     @Override
     public String getName() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/CheckPermission.java
Patch:
@@ -24,6 +24,9 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		if (SpecialComponentList.isWhitePermission(permission)) {
 			return PackageManager.PERMISSION_GRANTED;
 		}
+		if (permission.startsWith("com.google")) {
+			return PackageManager.PERMISSION_GRANTED;
+		}
 		args[args.length - 1] = getRealUid();
 		return method.invoke(who, args);
 	}

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/base/InterceptorHook.java
Patch:
@@ -7,7 +7,8 @@
 import java.lang.reflect.Method;
 
 /**
- * Created by lichen:) on 2016/9/1.
+ * @author Junelegency
+ *
  */
 public abstract class InterceptorHook extends Hook {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/base/InterceptorServiceHook.java
Patch:
@@ -5,7 +5,8 @@
 import java.lang.reflect.Method;
 
 /**
- * Created by lichen:) on 2016/9/9.
+ * @author Junelegency
+ *
  */
 public abstract class InterceptorServiceHook extends InterceptorHook{
     @Override

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/connectivity/Interceptor_GetActiveNetworkInfo.java
Patch:
@@ -5,8 +5,8 @@
 import com.lody.virtual.client.hook.patchs.connectivity.ConnectivityPatch;
 
 /**
- * 获取当前 连接
- * Created by legency on 2016/8/19.
+ * @author Junelegency
+ *
  */
 public class Interceptor_GetActiveNetworkInfo extends InterceptorServiceHook {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/location/Interceptor_RemoveUpdates.java
Patch:
@@ -9,7 +9,8 @@
 import java.lang.reflect.Method;
 
 /**
- * Created by legency on 2016/8/21.
+ * @author Junelegency
+ *
  */
 public class Interceptor_RemoveUpdates extends InterceptorHook {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/location/Interceptor_RequestLocationUpdates.java
Patch:
@@ -9,7 +9,8 @@
 import java.lang.reflect.Method;
 
 /**
- * Created by legency on 2016/8/21.
+ * @author Junelegency
+ *
  */
 public class Interceptor_RequestLocationUpdates extends InterceptorServiceHook {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/telephony/BaseInterceptorTelephony.java
Patch:
@@ -1,12 +1,12 @@
 package com.lc.interceptor.client.hook.patch.interceptor.telephony;
 
-import com.lc.interceptor.client.hook.base.InterceptorHook;
 import com.lc.interceptor.client.hook.base.InterceptorServiceHook;
 import com.lody.virtual.client.hook.base.PatchDelegate;
 import com.lody.virtual.client.hook.patchs.telephony.TelephonyPatch;
 
 /**
- * Created by lichen:) on 2016/9/1.
+ * @author Junelegency
+ *
  */
 public abstract class BaseInterceptorTelephony extends InterceptorServiceHook{
     @Override

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/telephony/Interceptor_GetActivePhoneTypeForSubscriber.java
Patch:
@@ -1,8 +1,8 @@
 package com.lc.interceptor.client.hook.patch.interceptor.telephony;
 
 /**
- * 获取当前的连接类型
- * Created by legency on 2016/8/20.
+ * @author Junelegency
+ *
  */
 public class Interceptor_GetActivePhoneTypeForSubscriber extends BaseInterceptorTelephony {
     @Override

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/wifi/BaseInterceptorWifi.java
Patch:
@@ -5,7 +5,7 @@
 import com.lody.virtual.client.hook.patchs.wifi.WifiManagerPatch;
 
 /**
- * Created by lichen:) on 2016/9/1.
+ * @author legency
  */
 public abstract class BaseInterceptorWifi extends InterceptorServiceHook {
     @Override

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/wifi/Interceptor_GetConnectionInfo.java
Patch:
@@ -1,7 +1,7 @@
 package com.lc.interceptor.client.hook.patch.interceptor.wifi;
 
 /**
- * Created by legency on 2016/8/21.
+ * @author legency
  */
 public class Interceptor_GetConnectionInfo extends BaseInterceptorWifi {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/wifi/Interceptor_GetScanResults.java
Patch:
@@ -3,7 +3,7 @@
 
 
 /**
- * Created by legency on 2016/8/21.
+ * @author legency
  */
 public class Interceptor_GetScanResults extends BaseInterceptorWifi {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/patch/interceptor/wifi/Interceptor_GetWifiEnabledState.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Method;
 
 /**
- * Created by legency on 2016/8/21.
+ * @author legency
  */
 public class Interceptor_GetWifiEnabledState extends BaseInterceptorWifi {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/local/interceptor/VInterceptorCallManager.java
Patch:
@@ -11,7 +11,7 @@
 import com.lody.virtual.client.service.ServiceManagerNative;
 
 /**
- * Created by lichen:) on 2016/9/9.
+ * @author legency
  */
 public class VInterceptorCallManager {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/service/providers/ConnectivityProvider.java
Patch:
@@ -9,7 +9,7 @@
 import com.lody.virtual.client.hook.patchs.connectivity.ConnectivityPatch;
 
 /**
- * Created by lichen:) on 2016/9/9.
+ * @author legency
  */
 public class ConnectivityProvider extends InterceptorDataProvider {
 
@@ -23,7 +23,7 @@ public Class<? extends PatchDelegate> getDelegatePatch() {
      * @see com.lc.interceptor.client.hook.patch.interceptor.connectivity.Interceptor_GetActiveNetworkInfo
      */
     private NetworkInfo getActiveNetworkInfo() {
-        return new NetworkInfoMirror().setNetworkType(ConnectivityManager.TYPE_WIFI).setSubtype(0)
+        return new NetworkInfoMirror.Builder().setNetworkType(ConnectivityManager.TYPE_WIFI).setSubtype(0)
                 .setTypeName("WIFI").setAvailable(true).
                         setDetailedState(NetworkInfo.DetailedState.CONNECTED).
                         setExtraInfo("wifi_test_name").create();

File: VirtualApp/lib/src/main/java/com/lc/interceptor/service/providers/LocationManagerProvider.java
Patch:
@@ -23,7 +23,7 @@
 import mirror.android.location.LocationRequestL;
 
 /**
- * Created by legency on 2016/8/21.
+ * @author legency
  */
 public class LocationManagerProvider extends InterceptorDataProvider {
 

File: VirtualApp/lib/src/main/java/com/lc/interceptor/service/providers/base/InterceptorDataProvider.java
Patch:
@@ -3,7 +3,7 @@
 import com.lody.virtual.client.hook.base.PatchDelegate;
 
 /**
- * Created by lichen:) on 2016/9/9.
+ * @author legency
  */
 public abstract class InterceptorDataProvider {
     abstract public Class<? extends PatchDelegate> getDelegatePatch();

File: VirtualApp/lib/src/main/java/mirror/RefClass.java
Patch:
@@ -14,6 +14,7 @@ public final class RefClass {
             REF_TYPES.put(RefMethod.class, RefMethod.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefInt.class, RefInt.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefLong.class, RefLong.class.getConstructor(Class.class, Field.class));
+            REF_TYPES.put(RefDouble.class, RefDouble.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefBoolean.class, RefBoolean.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefStaticObject.class, RefStaticObject.class.getConstructor(Class.class, Field.class));
             REF_TYPES.put(RefStaticInt.class, RefStaticInt.class.getConstructor(Class.class, Field.class));

File: VirtualApp/lib/src/main/java/mirror/android/location/ILocationListener.java
Patch:
@@ -7,17 +7,18 @@
 import mirror.MethodParams;
 import mirror.RefClass;
 import mirror.RefMethod;
+import mirror.RefStaticMethod;
 
 
 /**
- * Created by legency on 2016/9/1.
+ * @author legency
  */
 public class ILocationListener {
     public static Class<?> Class = RefClass.load(ILocationListener.class, "android.location.ILocationListener");
     public static class Stub {
         public static Class<?> Class = RefClass.load(Stub.class, "android.location.ILocationListener$Stub");
         @MethodParams({IBinder.class})
-        public static RefMethod<IInterface> asInterface;
+        public static RefStaticMethod<IInterface> asInterface;
     }
     @MethodParams(Location.class)
     public static RefMethod<Void> onLocationChanged;

File: VirtualApp/lib/src/main/java/mirror/android/net/IConnectivityManager.java
Patch:
@@ -9,7 +9,8 @@
 
 
 /**
- * Created by lichen:) on 2016/9/1.
+ * @author Junelegency
+ *
  */
 public class IConnectivityManager {
     public static Class<?> TYPE = RefClass.load(IConnectivityManager.class, "android.net.IConnectivityManager");

File: VirtualApp/lib/src/main/java/com/lc/interceptor/client/hook/base/InterceptorHook.java
Patch:
@@ -20,7 +20,7 @@ public boolean isOnHookConsumed(){
     }
 
     public boolean isOnHookEnabled(){
-        return  true;
+        return true;
     }
 
     @Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/Hook.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.content.pm.PackageManager;
-import android.util.Log;
 
 import com.lc.interceptor.client.hook.base.InterceptorHook;
 import com.lody.virtual.client.VClientImpl;
@@ -32,7 +31,6 @@ private boolean isAvailableInnerOnHook(InterceptorHook hook){
         return isAvailableHook(hook) && hook.isOnHookEnabled();
     }
 
-
 	public abstract String getName();
 
 	public boolean beforeCall(Object who, Method method, Object... args) {
@@ -43,7 +41,6 @@ public boolean beforeCall(Object who, Method method, Object... args) {
 	}
 
 	public Object call(Object who, Method method, Object... args) throws Throwable {
-        Log.e("Hook","Name:"+method.getName());
         if (isAvailableInnerOnHook(interceptHook)) {
             Object o = interceptHook.call(who, method, args);
             if(interceptHook.isOnHookConsumed()) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/GetRunningAppProcesses.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.local.VActivityManager;
+import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
 import java.util.List;
@@ -33,7 +34,7 @@ public synchronized Object call(Object who, Method method, Object... args) throw
 						info.processName = processName;
 					}
 					info.pkgList = pkgList.toArray(new String[pkgList.size()]);
-//					info.uid = VActivityManager.get().getUidByPid(info.pid);
+					info.uid = VUserHandle.getAppId(VActivityManager.get().getUidByPid(info.pid));
 				}
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/GetApplicationInfo.java
Patch:
@@ -12,7 +12,6 @@
 /**
  * @author Lody
  *
- * @see android.content.pm.IPackageManager#getApplicationInfo(String, int, int)
  */
 /* package */ class GetApplicationInfo extends Hook {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/GetPackageUid.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.local.VPackageManager;
+import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
 
@@ -22,7 +23,8 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		if (pkgName.equals(getHostPkg())) {
 			return method.invoke(who, args);
 		}
-		return VPackageManager.get().getPackageUid(pkgName, 0);
+		int uid = VPackageManager.get().getPackageUid(pkgName, 0);
+		return VUserHandle.getAppId(uid);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/mirror/android/net/IConnectivityManager.java
Patch:
@@ -5,18 +5,18 @@
 
 import mirror.MethodParams;
 import mirror.RefClass;
-import mirror.RefMethod;
+import mirror.RefStaticMethod;
 
 
 /**
  * Created by lichen:) on 2016/9/1.
  */
 public class IConnectivityManager {
-    public static Class<?> Class = RefClass.load(IConnectivityManager.class, "android.net.IConnectivityManager");
+    public static Class<?> TYPE = RefClass.load(IConnectivityManager.class, "android.net.IConnectivityManager");
 
     public static class Stub {
         public static Class<?> Class = RefClass.load(Stub.class, "android.net.IConnectivityManager$Stub");
         @MethodParams({IBinder.class})
-        public static RefMethod<IInterface> asInterface;
+        public static RefStaticMethod<IInterface> asInterface;
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -77,6 +77,7 @@ public int startActivity(Intent intent, int userId) {
 		return startActivity(intent, info, null, null, null, 0, userId);
 	}
 
+
 	public ActivityClientRecord onActivityCreate(ComponentName component, ComponentName caller, IBinder token, ActivityInfo info, Intent intent, String affinity, int taskId, int launchMode, int flags) {
 		ActivityClientRecord r = new ActivityClientRecord();
 		r.info = info;

File: VirtualApp/app/src/main/java/io/virtualapp/home/models/AppRepository.java
Patch:
@@ -95,7 +95,7 @@ private List<PackageInfo> findAndParseAPKs(Context context, List<String> pathes)
 					pkgInfo.applicationInfo.sourceDir = f.getAbsolutePath();
 					pkgInfo.applicationInfo.publicSourceDir = f.getAbsolutePath();
 				} catch (Exception e) {
-					e.printStackTrace();
+					// Ignore
 				}
 				if (pkgInfo != null)
 					pkgs.add(pkgInfo);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/GetRunningAppProcesses.java
Patch:
@@ -33,7 +33,7 @@ public synchronized Object call(Object who, Method method, Object... args) throw
 						info.processName = processName;
 					}
 					info.pkgList = pkgList.toArray(new String[pkgList.size()]);
-					info.uid = VActivityManager.get().getUidByPid(info.pid);
+//					info.uid = VActivityManager.get().getUidByPid(info.pid);
 				}
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java
Patch:
@@ -60,7 +60,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 			args[intentIndex - 1] = getHostPkg();
 		}
 
-		int res = VActivityManager.get().startActivity(intent, activityInfo, resultTo, options, requestCode);
+		int res = VActivityManager.get().startActivity(intent, activityInfo, resultTo, options, resultWho, requestCode, VUserHandle.myUserId());
 		if (res != 0 && resultTo != null && requestCode > 0) {
 			VActivityManager.get().sendActivityResult(resultTo, resultWho, requestCode);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -22,7 +22,6 @@
 import android.os.Looper;
 import android.os.Message;
 import android.os.Process;
-import android.os.RemoteException;
 
 import com.lody.virtual.IOHook;
 import com.lody.virtual.client.core.VirtualCore;
@@ -118,7 +117,7 @@ public static VClientImpl getClient() {
 	}
 
 	@Override
-	public IBinder getAppThread() throws RemoteException {
+	public IBinder getAppThread() {
 		return ActivityThread.getApplicationThread.call(VirtualCore.mainThread());
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -76,9 +76,8 @@ public boolean handleMessage(Message msg) {
 	private boolean handleLaunchActivity(Message msg) {
 		Object r = msg.obj;
 		Intent stubIntent = ActivityThread.ActivityClientRecord.intent.get(r);
-		stubIntent.setExtrasClassLoader(StubActivityRecord.class.getClassLoader());
-		StubActivityRecord saveInstance = stubIntent.getParcelableExtra("_VA_|_stub_");
-		if (saveInstance == null) {
+		StubActivityRecord saveInstance = new StubActivityRecord(stubIntent);
+		if (saveInstance.intent == null) {
 			return true;
 		}
 		Intent intent = saveInstance.intent;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubActivity.java
Patch:
@@ -29,8 +29,8 @@ protected void onCreate(Bundle savedInstanceState) {
 		// Note:
 		// ClassLoader of savedInstanceState is not exist now.
 		super.onCreate(null);
-		StubActivityRecord r = stubIntent.getParcelableExtra("_VA_|_stub_");
-		if (r == null) {
+		StubActivityRecord r = new StubActivityRecord(stubIntent);
+		if (r.intent == null) {
 			if (DEBUG) {
 				Toast.makeText(this, "Ops...", Toast.LENGTH_SHORT).show();
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/accounts/VAccountManagerService.java
Patch:
@@ -786,15 +786,15 @@ private Account renameAccountInternal(int userId, Account accountToRename, Strin
 				synchronized (authTokenRecords) {
 					for (AuthTokenRecord record : authTokenRecords) {
 						if (record.userId == userId && record.account.equals(accountToRename)) {
-							record.account = accountToRename;
+							record.account = newAccount;
 						}
 					}
 				}
 				sendAccountsChangedBroadcast(userId);
 				return newAccount;
 			}
 		}
-		return accountToRename;
+		return null;
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityStack.java
Patch:
@@ -47,7 +47,7 @@ public void handleMessage(Message msg) {
 				int N = mHistory.size();
 				while (N-- > 0) {
 					final TaskRecord task = mHistory.valueAt(N);
-					synchronized (task) {
+					synchronized (task.activities) {
 						for (ActivityRecord r : task.activities) {
 							if (r.marked) {
 								try {
@@ -390,7 +390,7 @@ private Intent startActivityProcess(int userId, ActivityRecord sourceRecord, Int
 		targetIntent.setType(component.flattenToString());
 		StubActivityRecord saveInstance = new StubActivityRecord(intent, info,
 				sourceRecord != null ? sourceRecord.component : null, userId);
-		targetIntent.putExtra("_VA_|_stub_", saveInstance);
+		saveInstance.saveToIntent(targetIntent);
 		return targetIntent;
 	}
 

File: VirtualApp/lib/src/main/java/mirror/android/app/Activity.java
Patch:
@@ -18,4 +18,5 @@ public class Activity {
     public static IntFieldDef mResultCode;
     public static FieldDef<Intent> mResultData;
     public static FieldDef<IBinder> mToken;
+    public static FieldDef<String> mEmbeddedID;
 }

File: VirtualApp/lib/src/main/java/mirror/android/app/IActivityManager.java
Patch:
@@ -21,6 +21,7 @@ public class IActivityManager {
     public static MethodDef<Void> setRequestedOrientation;
     @MethodInfo({IBinder.class, String.class, int.class, int.class})
     public static MethodDef<Void> overridePendingTransition;
+    public static MethodDef<Integer> startActivity;
 
     public static class ContentProviderHolder {
         @MethodInfo(ProviderInfo.class)

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/BroadcastIntent.java
Patch:
@@ -33,11 +33,11 @@ public String getName() {
 	public Object call(Object who, Method method, Object... args) throws Throwable {
 		Intent intent = (Intent) args[1];
 		String type = (String) args[2];
+		intent.setDataAndType(intent.getData(), type);
 		Intent newIntent = handleIntent(intent);
 		if (newIntent != null) {
 			args[1] = newIntent;
 		}
-		intent.setDataAndType(intent.getData(), type);
 		if (args[7] instanceof String || args[7] instanceof String[]) {
 			// clear the permission
 			args[7] = null;

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/ComponentUtils.java
Patch:
@@ -113,6 +113,8 @@ public static Intent redirectBroadcastIntent(Intent intent, int userId) {
                 }
             }
 			Intent newIntent = intent.cloneFilter();
+			newIntent.setComponent(null);
+			newIntent.setPackage(null);
 			newIntent.putExtra("_VA_|_user_id_", userId);
 			newIntent.setAction(String.format("_VA_%s_%s", component.getPackageName(), component.getClassName()));
 			newIntent.putExtra("_VA_|_component_", component);
@@ -121,6 +123,7 @@ public static Intent redirectBroadcastIntent(Intent intent, int userId) {
 		} else if (pkg != null) {
 			if (VirtualCore.get().isAppInstalled(pkg)) {
 				Intent newIntent = intent.cloneFilter();
+				newIntent.setPackage(null);
 				newIntent.putExtra("_VA_|_user_id_", userId);
 				newIntent.putExtra("_VA_|_creator_", pkg);
 				newIntent.putExtra("_VA_|_intent_", new Intent(intent));

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -337,8 +337,8 @@ public void scheduleNewIntent(String creator, IBinder token, Intent intent) {
 
 
 	@Override
-	public boolean startActivityFromToken(IBinder token, Intent intent, Bundle options) {
-		return VActivityManager.get().startActivityFromToken(token, intent, options);
+	public boolean startActivityFromToken(IBinder token, Intent intent, int requestCode, Bundle options) {
+		return VActivityManager.get().startActivityFromToken(token, intent, requestCode, options);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -87,8 +87,6 @@ private boolean handleLaunchActivity(Message msg) {
 		ActivityInfo info = saveInstance.info;
 		if (VClientImpl.getClient().getToken() == null) {
 			VActivityManager.get().processRestarted(info.packageName, info.processName, saveInstance.userId);
-			getH().sendMessageDelayed(msg, 5);
-			return false;
 		}
 		if (!VClientImpl.getClient().isBound()) {
 			VClientImpl.getClient().bindApplicationCheckThread(info);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -87,6 +87,8 @@ private boolean handleLaunchActivity(Message msg) {
 		ActivityInfo info = saveInstance.info;
 		if (VClientImpl.getClient().getToken() == null) {
 			VActivityManager.get().processRestarted(info.packageName, info.processName, saveInstance.userId);
+			getH().sendMessageDelayed(msg, 5);
+			return false;
 		}
 		if (!VClientImpl.getClient().isBound()) {
 			VClientImpl.getClient().bindApplicationCheckThread(info);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityStack.java
Patch:
@@ -16,6 +16,7 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.helper.proto.StubActivityRecord;
 import com.lody.virtual.helper.utils.ComponentUtils;
+import com.lody.virtual.helper.utils.VLog;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -317,17 +318,16 @@ public int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBi
 				} else {
 					destIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT);
 				}
-
 				if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
 					VirtualCore.get().getContext().startActivity(destIntent, options);
 				} else {
 					VirtualCore.get().getContext().startActivity(destIntent);
 				}
-
 			}
 		} else if (clearTarget != ClearTarget.TOP && ComponentUtils.isSameIntent(intent, reuseTask.taskRoot)) {
 			// In this case, we only need to move the task to front.
 			mAM.moveTaskToFront(reuseTask.taskId, 0);
+			VLog.d("ActivityStack", "Only moveTaskToFront : " + intent);
 
 		} else {
 			boolean delivered = false;
@@ -351,7 +351,6 @@ public int startActivityLocked(int userId, Intent intent, ActivityInfo info, IBi
 				}
 			}
 		}
-
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -363,8 +363,8 @@ public ServiceInfo resolveServiceInfo(Intent intent, int userId) {
 		return serviceInfo;
 	}
 
-	public void killApp(String pkg, int userId) {
-		VActivityManager.get().killAppByPkg(pkg, userId);
+	public void killApp(String pkg) {
+		VActivityManager.get().killAppByPkg(pkg);
 	}
 
 	public void killAllApps() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ForceStopPackage.java
Patch:
@@ -23,7 +23,7 @@ public String getName() {
 	public Object call(Object who, Method method, Object... args) throws Throwable {
 		String pkg = (String) args[0];
 		int userId = VUserHandle.myUserId();
-		VActivityManager.get().killAppByPkg(pkg, userId);
+		VActivityManager.get().killAppByPkg(pkg);
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -85,6 +85,9 @@ private boolean handleLaunchActivity(Message msg) {
 		ComponentName caller = saveInstance.caller;
 		IBinder token = ActivityThread.ActivityClientRecord.token.get(r);
 		ActivityInfo info = saveInstance.info;
+		if (VClientImpl.getClient().getToken() == null) {
+			VActivityManager.get().processRestarted(info.packageName, info.processName, saveInstance.userId);
+		}
 		if (!VClientImpl.getClient().isBound()) {
 			VClientImpl.getClient().bindApplicationCheckThread(info);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/ProviderHook.java
Patch:
@@ -62,6 +62,7 @@ public ProviderHook fetch(boolean external, ProviderInfo info, IInterface provid
 		return fetcher;
 	}
 
+
 	public Bundle call(Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {
 
 		return (Bundle) method.invoke(mBase, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ProcessRecord.java
Patch:
@@ -16,7 +16,6 @@
 public final class ProcessRecord extends Binder {
 
 	public final ConditionVariable lock = new ConditionVariable();
-	public final ConditionVariable attachLock = new ConditionVariable();
 	final public StubInfo stubInfo;
 	public final ApplicationInfo info; // all about the first app in the process
 	final public String processName; // name of the process
@@ -53,7 +52,6 @@ public boolean equals(Object o) {
 			return false;
 		ProcessRecord record = (ProcessRecord) o;
 		return processName != null ? processName.equals(record.processName) : record.processName == null;
-
 	}
 
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ServiceRecord.java
Patch:
@@ -13,8 +13,6 @@ public class ServiceRecord {
 	public final List<ServiceBoundRecord> mBoundRecords = new ArrayList<>();
 	public long activeSince;
 	public long lastActivityTime;
-	public int pid;
-	public int uid;
 	public ServiceInfo serviceInfo;
 	public IBinder token;
 	public int startId;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -169,6 +169,7 @@ public void bindApplicationCheckThread(final ComponentInfo info) {
 				@Override
 				public void run() {
 					bindApplication(info, lock);
+					lock.open();
 				}
 			});
 			lock.block();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/Hook.java
Patch:
@@ -17,7 +17,6 @@ public abstract class Hook {
 	private boolean enable = true;
 
 
-
 	/**
 	 * @return Hook的方法名
 	 */

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartService.java
Patch:
@@ -40,9 +40,7 @@ && getHostPkg().equals(service.getComponent().getPackageName())) {
 			if (pkgName.equals(getHostPkg())) {
 				return method.invoke(who, args);
 			}
-			if (isAppPkg(pkgName)) {
-				return VActivityManager.get().startService(appThread, service, resolvedType);
-			}
+			return VActivityManager.get().startService(appThread, service, resolvedType);
 		}
 		return method.invoke(who, args);
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/media/session/CreateSession.java
Patch:
@@ -18,8 +18,7 @@ public String getName() {
 
 	@Override
 	public Object call(Object who, Method method, Object... args) throws Throwable {
-		String pkgName = (String) args[0];
-		if (isAppPkg(pkgName)) {
+		if (args[0] instanceof String) {
 			args[0] = getHostPkg();
 		}
 		return method.invoke(who, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/search/GetSearchableInfo.java
Patch:
@@ -26,7 +26,7 @@ public Object call(Object who, Method method, Object... args) throws Throwable {
 		ComponentName component = (ComponentName) args[0];
 		if (component != null) {
 			ActivityInfo activityInfo = VirtualCore.getPM().getActivityInfo(component, 0);
-			if (activityInfo != null && isAppPkg(activityInfo.packageName)) {
+			if (activityInfo != null) {
 				return null;
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/window/OverridePendingAppTransition.java
Patch:
@@ -15,8 +15,7 @@ public String getName() {
 
 	@Override
 	public Object call(Object who, Method method, Object... args) throws Throwable {
-		String pkgName = (String) args[0];
-		if (isAppPkg(pkgName)) {
+		if (args[0] instanceof String) {
 			args[0] = getHostPkg();
 		}
 		return super.call(who, method, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubPendingActivity.java
Patch:
@@ -19,7 +19,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Intent intent = getIntent();
         Intent realIntent = intent.getParcelableExtra("_VA_|_intent_");
         int userId = intent.getIntExtra("_VA_|_user_id_", -1);
-        realIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        realIntent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
         try {
             VActivityManager.get().startActivity(intent, userId);
             startActivity(realIntent);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/pm/VUserManagerService.java
Patch:
@@ -757,7 +757,7 @@ void finishRemoveUser(final int userHandle) {
         if (DBG) VLog.i(LOG_TAG, "finishRemoveUser " + userHandle);
         // Let other services shutdown any activity and clean up their state before completely
         // wiping the user's system directory and removing from the user list
-        long ident = Binder.clearCallingIdentity();
+        long identity = Binder.clearCallingIdentity();
         try {
             Intent addedIntent = new Intent(Constants.ACTION_USER_REMOVED);
             addedIntent.putExtra("_VA_|_uid_", userHandle);
@@ -784,7 +784,7 @@ public void run() {
                     },
                     null, Activity.RESULT_OK, null, null);
         } finally {
-            Binder.restoreCallingIdentity(ident);
+            Binder.restoreCallingIdentity(identity);
         }
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/BroadcastIntent.java
Patch:
@@ -62,7 +62,7 @@ private Intent handleIntent(final Intent intent) {
 			if (newAction != null) {
 				intent.setAction(newAction);
 			}
-			return ComponentUtils.redirectBroadcastIntent(intent);
+			return ComponentUtils.redirectBroadcastIntent(intent, VUserHandle.myUserId());
 		}
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubPendingReceiver.java
Patch:
@@ -5,6 +5,7 @@
 import android.content.Intent;
 
 import com.lody.virtual.helper.utils.ComponentUtils;
+import com.lody.virtual.os.VUserHandle;
 
 /**
  * @author Lody
@@ -15,8 +16,9 @@ public class StubPendingReceiver extends BroadcastReceiver {
     @Override
     public void onReceive(Context context, Intent intent) {
         Intent realIntent = intent.getParcelableExtra("_VA_|_intent_");
+        int userId = intent.getIntExtra("_VA_|_user_id_", VUserHandle.USER_ALL);
         if (realIntent != null) {
-            Intent newIntent = ComponentUtils.redirectBroadcastIntent(realIntent);
+            Intent newIntent = ComponentUtils.redirectBroadcastIntent(realIntent, userId);
             if (newIntent != null) {
                 context.sendBroadcast(newIntent);
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ProcessRecord.java
Patch:
@@ -25,7 +25,7 @@ public final class ProcessRecord extends Binder {
 	final List<String> sharedPackages;
 	final List<String> usesLibraries;
 	public IVClient client;
-	public IInterface thread;
+	public IInterface appThread;
 	public int pid;
 	public int uid;
 	public int userId;

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ServiceRecord.java
Patch:
@@ -4,7 +4,6 @@
 import android.content.Intent;
 import android.content.pm.ServiceInfo;
 import android.os.IBinder;
-import android.os.IInterface;
 import android.os.RemoteException;
 
 import java.util.ArrayList;
@@ -20,7 +19,7 @@ public class ServiceRecord {
 	public IBinder token;
 	public int startId;
 	public IBinder binder;
-	public IInterface appThread;
+	public ProcessRecord process;
 	public boolean doRebind = false;
 
 	public boolean hasSomeBound() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -274,7 +274,7 @@ public void bindApplication(String processName, ApplicationInfo appInfo, List<St
 	@Override
 	public IBinder acquireProviderClient(ProviderInfo info) {
 		if (Binder.getCallingPid() != Process.myPid()) {
-			if (!isBound() || !isProviderInitialized) {
+			if (!isBound() && !isProviderInitialized) {
 				lock.block();
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ServiceRecord.java
Patch:
@@ -20,7 +20,7 @@ public class ServiceRecord {
 	public IBinder token;
 	public int startId;
 	public IBinder binder;
-	public IInterface targetAppThread;
+	public IInterface appThread;
 	public boolean doRebind = false;
 
 	public boolean hasSomeBound() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/BroadcastIntent.java
Patch:
@@ -13,6 +13,7 @@
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.helper.utils.BitmapUtils;
 import com.lody.virtual.helper.utils.ComponentUtils;
+import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
 
@@ -77,6 +78,7 @@ private void handleInstallShortcutIntent(Intent intent) {
 					newShortcutIntent.addCategory(Intent.CATEGORY_DEFAULT);
 					newShortcutIntent.putExtra("_VA_|_intent_", shortcut);
 					newShortcutIntent.putExtra("_VA_|_uri_", shortcut.toUri(0));
+					newShortcutIntent.putExtra("_VA_|_user_id_", VUserHandle.myUserId());
 					intent.removeExtra(Intent.EXTRA_SHORTCUT_INTENT);
 					intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, newShortcutIntent);
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -79,6 +79,7 @@ private boolean handleLaunchActivity(Message msg) {
 		Object r = msg.obj;
 		Intent stubIntent = ActivityThread.ActivityClientRecord.intent.get(r);
 		Intent intent = stubIntent.getParcelableExtra("intent");
+		ComponentName caller = stubIntent.getParcelableExtra("caller");
 		int clearTarget = stubIntent.getIntExtra("clear_target", 0);
 		if (intent == null) {
 			return true;
@@ -90,7 +91,7 @@ private boolean handleLaunchActivity(Message msg) {
 				token,
 				false
 		);
-		VActivityManager.get().onActivityCreate(new ComponentName(info.packageName, info.name), token, info, intent, ComponentUtils.getTaskAffinity(info), taskId, info.launchMode, info.flags, clearTarget);
+		VActivityManager.get().onActivityCreate(ComponentUtils.toComponentName(info), caller, token, info, intent, ComponentUtils.getTaskAffinity(info), taskId, info.launchMode, info.flags, clearTarget);
 
 		ComponentName component = intent.getComponent();
 		String packageName = component.getPackageName();

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityRecord.java
Patch:
@@ -10,6 +10,7 @@
 /* package */ class ActivityRecord {
 	public TaskRecord task;
 	public ComponentName component;
+	public ComponentName caller;
 	public IBinder token;
 	public int userId;
 	public ProcessRecord process;

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/compat/NativeLibraryHelperCompat.java
Patch:
@@ -30,7 +30,7 @@ public static int copyNativeBinaries(File apkFile, File sharedLibraryDir) {
 
 	private static int copyNativeBinariesBeforeL(File apkFile, File sharedLibraryDir) {
 		try {
-			return Reflect.on(NativeLibraryHelper.class).call("copyNativeBinariesIfNeededLI", apkFile, sharedLibraryDir)
+			return Reflect.on(NativeLibraryHelper.Class).call("copyNativeBinariesIfNeededLI", apkFile, sharedLibraryDir)
 					.get();
 		} catch (Throwable e) {
 			e.printStackTrace();

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/compat/NativeLibraryHelperCompat.java
Patch:
@@ -30,7 +30,7 @@ public static int copyNativeBinaries(File apkFile, File sharedLibraryDir) {
 
 	private static int copyNativeBinariesBeforeL(File apkFile, File sharedLibraryDir) {
 		try {
-			return Reflect.on(NativeLibraryHelper.class).call("copyNativeBinariesIfNeededLI", apkFile, sharedLibraryDir)
+			return Reflect.on(NativeLibraryHelper.Class).call("copyNativeBinariesIfNeededLI", apkFile, sharedLibraryDir)
 					.get();
 		} catch (Throwable e) {
 			e.printStackTrace();

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/compat/NativeLibraryHelperCompat.java
Patch:
@@ -30,7 +30,7 @@ public static int copyNativeBinaries(File apkFile, File sharedLibraryDir) {
 
 	private static int copyNativeBinariesBeforeL(File apkFile, File sharedLibraryDir) {
 		try {
-			return Reflect.on(NativeLibraryHelper.class).call("copyNativeBinariesIfNeededLI", apkFile, sharedLibraryDir)
+			return Reflect.on(NativeLibraryHelper.Class).call("copyNativeBinariesIfNeededLI", apkFile, sharedLibraryDir)
 					.get();
 		} catch (Throwable e) {
 			e.printStackTrace();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/GetIntentSender.java
Patch:
@@ -48,7 +48,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		if (args.length > 7 && args[7] instanceof Integer) {
             args[7] = PendingIntent.FLAG_UPDATE_CURRENT;
         }
-		args[0] = ActivityManagerCompat.INTENT_SENDER_SERVICE;
 		args[6] = new String[] {null};
 		IInterface sender = (IInterface) method.invoke(who, args);
 		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2 && sender != null && creator != null) {
@@ -68,6 +67,7 @@ private Intent redirectIntentSender(int type, String creator, Intent intent) {
 				if (info != null) {
 					ok = true;
 					newIntent.setClass(getHostContext(), StubPendingActivity.class);
+					newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 				}
 
 			} break;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/UnbindService.java
Patch:
@@ -24,7 +24,7 @@ public String getName() {
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		IServiceConnection conn = (IServiceConnection) args[0];
 		if (conn != null) {
-			HackServiceConnection hackConn = HackServiceConnection.sHackConns.remove(conn.asBinder());
+			HackServiceConnection hackConn = null;//HackServiceConnection.sHackConns.remove(conn.asBinder());
 			return VActivityManager.get().unbindService(hackConn != null ? hackConn : conn);
 		}
 		return false;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java
Patch:
@@ -65,7 +65,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		if (!isAppPkg(packageName)) {
 			return method.invoke(who, args);
 		}
-		Intent resultIntent = VActivityManager.get().startActivity(targetIntent, targetActInfo, resultTo, options, userId);
+		Intent resultIntent = VActivityManager.get().startActivity(targetIntent, targetActInfo, resultTo, options, !isAppProcess(), userId);
 		if (resultIntent == null) {
 			if (resultTo != null) {
 				VActivityManager.get().sendActivityResult(resultTo, resultWho, requestCode);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -51,9 +51,9 @@ public IActivityManager getService() {
 		return service;
 	}
 
-	public Intent startActivity(Intent intent, ActivityInfo info, IBinder resultTo, Bundle options, int userId) {
+	public Intent startActivity(Intent intent, ActivityInfo info, IBinder resultTo, Bundle options, boolean fromHost, int userId) {
 		try {
-			return getService().startActivity(intent, info, resultTo, options, userId);
+			return getService().startActivity(intent, info, resultTo, options, fromHost, userId);
 		} catch (RemoteException e) {
 			return VirtualRuntime.crash(e);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VActivityManagerService.java
Patch:
@@ -190,9 +190,9 @@ public Set<String> getStubProcessList() {
 	}
 
 	@Override
-	public Intent startActivity(Intent intent, ActivityInfo info, IBinder resultTo, Bundle options, int userId) {
+	public Intent startActivity(Intent intent, ActivityInfo info, IBinder resultTo, Bundle options, boolean fromHost, int userId) {
 		synchronized (this) {
-			return mMainStack.startActivityLocked(userId, intent, info, resultTo, options);
+			return mMainStack.startActivityLocked(userId, intent, info, resultTo, fromHost, options);
 		}
 	}
 
@@ -223,7 +223,7 @@ public void onActivityCreated(IBinder token, ActivityInfo targetActInfo, Activit
 			if (task == null) {
 				task = new ActivityTaskRecord();
 				task.taskId = taskId;
-				task.rootAffinity = ComponentUtils.getTaskAffinity(targetActInfo);
+				task.rootAffinity = ComponentUtils.getTaskAffinity(targetActInfo, VBinder.getCallingUid());
 				task.baseActivity = new ComponentName(targetActInfo.packageName, targetActInfo.name);
 				mMainStack.mTasks.add(task);
 			}

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomePresenterImpl.java
Patch:
@@ -2,8 +2,6 @@
 
 import android.app.Activity;
 
-import com.lody.virtual.client.local.VActivityManager;
-
 import io.virtualapp.VCommends;
 import io.virtualapp.home.models.AppModel;
 import io.virtualapp.home.models.AppRepository;
@@ -37,7 +35,6 @@ public void start() {
 	@Override
 	public void launchApp(AppModel model, int userId) {
 		try {
-			VActivityManager.get().killAllApps();
 			LoadingActivity.launch(mActivity, model, userId);
 		} catch (Throwable e) {
 			e.printStackTrace();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -20,6 +20,7 @@
 import com.lody.virtual.client.hook.patchs.graphics.GraphicsStatsPatch;
 import com.lody.virtual.client.hook.patchs.imms.MmsPatch;
 import com.lody.virtual.client.hook.patchs.input.InputMethodManagerPatch;
+import com.lody.virtual.client.hook.patchs.isub.ISubPatch;
 import com.lody.virtual.client.hook.patchs.job.JobPatch;
 import com.lody.virtual.client.hook.patchs.location.LocationManagerPatch;
 import com.lody.virtual.client.hook.patchs.media.router.MediaRouterServicePatch;
@@ -119,11 +120,11 @@ private void injectInternal() throws Throwable {
 		if (VirtualCore.get().isVAppProcess()) {
 			addPatch(new ActivityManagerPatch());
 			addPatch(new PackageManagerPatch());
-//			addPatch(new LibCorePatch());
 			// ## End
 			addPatch(HCallbackHook.getDefault());
 			addPatch(AppInstrumentation.getDefault());
 
+			addPatch(new ISubPatch());
 			addPatch(new DropBoxManagerPatch());
 			addPatch(new NotificationManagerPatch());
 			addPatch(new LocationManagerPatch());
@@ -138,7 +139,6 @@ private void injectInternal() throws Throwable {
 			addPatch(new AccountManagerPatch());
 			addPatch(new AudioManagerPatch());
 			addPatch(new SearchManagerPatch());
-			addPatch(new AlarmManagerPatch());
 			addPatch(new ContentServicePatch());
 
 			if (Build.VERSION.SDK_INT >= JELLY_BEAN_MR2) {
@@ -161,6 +161,7 @@ private void injectInternal() throws Throwable {
 				addPatch(new RestrictionPatch());
 			}
 			if (Build.VERSION.SDK_INT >= KITKAT) {
+				addPatch(new AlarmManagerPatch());
 				addPatch(new AppOpsManagerPatch());
 				addPatch(new MediaRouterServicePatch());
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/fixer/ContextFixer.java
Patch:
@@ -60,7 +60,6 @@ public static void fixContext(Context context) {
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
 			ContextImplKitkat.mOpPackageName.set(context, hostPkg);
 		}
-
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
 			ContentResolverJBMR2.mPackageName.set(context.getContentResolver(), hostPkg);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/HookDelegate.java
Patch:
@@ -15,9 +15,6 @@
 /**
  * @author Lody
  *
- *
- *         对一个要Hook的对象进行包装.
- *
  */
 @SuppressWarnings("unchecked")
 public abstract class HookDelegate<T> implements IHookObject {
@@ -43,6 +40,8 @@ public HookDelegate(Class<?>... proxyInterfaces) {
 				proxyInterfaces = mBaseInterface.getClass().getInterfaces();
 			}
 			mProxyInterface = (T) Proxy.newProxyInstance(mBaseInterface.getClass().getClassLoader(), proxyInterfaces, new HookHandler());
+		} else {
+			VLog.d(TAG, "Unable to build HookDelegate: %s.", getClass().getName());
 		}
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/binders/ClipboardBinderDelegate.java
Patch:
@@ -17,6 +17,6 @@ public class ClipboardBinderDelegate extends HookBinderDelegate {
 	@Override
 	protected IInterface createInterface() {
 		getContext().getSystemService(Context.CLIPBOARD_SERVICE);
-		return ClipboardManager.sService.get();
+		return ClipboardManager.getService.call();
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/binders/WindowBinderDelegate.java
Patch:
@@ -13,7 +13,7 @@
  * @author Lody
  *
  */
-public class WindowManagerBinderDelegate extends HookBinderDelegate {
+public class WindowBinderDelegate extends HookBinderDelegate {
 
 	@Override
 	protected IInterface createInterface() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/window/session/WindowSessionPatch.java
Patch:
@@ -16,15 +16,16 @@
 public class WindowSessionPatch extends PatchDelegate<HookDelegate<IInterface>> {
 
 	public WindowSessionPatch(IInterface session) {
-		attachInterface(session);
+		super(session);
 	}
 
 	@Override
 	public HookDelegate<IInterface> createHookDelegate() {
+
 		return new HookDelegate<IInterface>() {
 			@Override
 			protected IInterface createInterface() {
-				return (IInterface) WindowSessionPatch.this.baseObject;
+				return (IInterface) baseObject;
 			}
 		};
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/secondary/HackServiceConnection.java
Patch:
@@ -1,4 +1,4 @@
-package com.lody.virtual.client.env;
+package com.lody.virtual.client.hook.secondary;
 
 import android.app.IServiceConnection;
 import android.content.ComponentName;
@@ -9,7 +9,6 @@
 import android.os.RemoteException;
 
 import com.lody.virtual.client.core.VirtualCore;
-import com.lody.virtual.client.hook.binders.StubBinder;
 import com.lody.virtual.helper.utils.VLog;
 
 import java.lang.reflect.Field;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/secondary/StubBinder.java
Patch:
@@ -1,4 +1,4 @@
-package com.lody.virtual.client.hook.binders;
+package com.lody.virtual.client.hook.secondary;
 
 import android.os.IBinder;
 import android.os.IInterface;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -397,4 +397,5 @@ public void addPendingIntent(IBinder binder, String creator) throws RemoteExcept
 	public void removePendingIntent(IBinder binder) throws RemoteException {
 		getService().removePendingIntent(binder);
 	}
+
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/accounts/VAccountManagerService.java
Patch:
@@ -927,7 +927,6 @@ private void serializeAllAccounts() {
 	 */
 	private void deserializeAllAccounts() {
 		File accountFile = new File(VEnvironment.getSystemSecureDirectory(), "accounts.ini");
-		cache.authenticators.clear();
 		refreshAuthenticatorCache(null);
 		if (accountFile.exists()) {
 			accountsByUserId.clear();
@@ -989,7 +988,8 @@ public VAccount getAccount(int userId, String accountName, String accountType) {
 
 
 
-	private void refreshAuthenticatorCache(String packageName) {
+	public void refreshAuthenticatorCache(String packageName) {
+		cache.authenticators.clear();
 		Intent intent = new Intent(AccountManager.ACTION_AUTHENTICATOR_INTENT);
 		if (packageName != null) {
 			intent.setPackage(packageName);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -48,7 +48,9 @@
 		SetPackageAskScreenCompat.class, GetPackageAskScreenCompat.class,
 		CheckPermission.class, PublishContentProviders.class, GetCurrentUser.class,
 		UnstableProviderDied.class, GetCallingActivity.class, FinishActivity.class,
-		GetServices.class,})
+		GetServices.class,
+
+		SetTaskDescription.class,})
 
 public class ActivityManagerPatch extends PatchDelegate<HookDelegate<IInterface>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -48,7 +48,9 @@
 		SetPackageAskScreenCompat.class, GetPackageAskScreenCompat.class,
 		CheckPermission.class, PublishContentProviders.class, GetCurrentUser.class,
 		UnstableProviderDied.class, GetCallingActivity.class, FinishActivity.class,
-		GetServices.class,})
+		GetServices.class,
+
+		SetTaskDescription.class,})
 
 public class ActivityManagerPatch extends PatchDelegate<HookDelegate<IInterface>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -48,9 +48,7 @@
 		SetPackageAskScreenCompat.class, GetPackageAskScreenCompat.class,
 		CheckPermission.class, PublishContentProviders.class, GetCurrentUser.class,
 		UnstableProviderDied.class, GetCallingActivity.class, FinishActivity.class,
-		GetServices.class,
-
-		SetTaskDescription.class,})
+		GetServices.class,})
 
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -48,9 +48,7 @@
 		SetPackageAskScreenCompat.class, GetPackageAskScreenCompat.class,
 		CheckPermission.class, PublishContentProviders.class, GetCurrentUser.class,
 		UnstableProviderDied.class, GetCallingActivity.class, FinishActivity.class,
-		GetServices.class,
-
-		SetTaskDescription.class,})
+		GetServices.class,})
 
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -48,7 +48,9 @@
 		SetPackageAskScreenCompat.class, GetPackageAskScreenCompat.class,
 		CheckPermission.class, PublishContentProviders.class, GetCurrentUser.class,
 		UnstableProviderDied.class, GetCallingActivity.class, FinishActivity.class,
-		GetServices.class,})
+		GetServices.class,
+
+		SetTaskDescription.class,})
 
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -48,7 +48,9 @@
 		SetPackageAskScreenCompat.class, GetPackageAskScreenCompat.class,
 		CheckPermission.class, PublishContentProviders.class, GetCurrentUser.class,
 		UnstableProviderDied.class, GetCallingActivity.class, FinishActivity.class,
-		GetServices.class,})
+		GetServices.class,
+
+		SetTaskDescription.class,})
 
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -218,9 +218,7 @@ public void uncaughtException(Thread t, Throwable e) {
 		}
 		mBoundApplication.info = ContextImpl.mPackageInfo.get(context);
 		fixBoundApp(mBoundApplication);
-		if (VMRuntime.getRuntime != null) {
-			VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(), data.appInfo.targetSdkVersion);
-		}
+		VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(), data.appInfo.targetSdkVersion);
 		Application app = data.info.makeApplication(false, null);
 		mInitialApplication = app;
 		mirror.android.app.ActivityThread.mInitialApplication.set(mainThread, app);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -218,7 +218,9 @@ public void uncaughtException(Thread t, Throwable e) {
 		}
 		mBoundApplication.info = ContextImpl.mPackageInfo.get(context);
 		fixBoundApp(mBoundApplication);
-		VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(), data.appInfo.targetSdkVersion);
+		if (VMRuntime.getRuntime != null) {
+			VMRuntime.setTargetSdkVersion.call(VMRuntime.getRuntime.call(), data.appInfo.targetSdkVersion);
+		}
 		Application app = data.info.makeApplication(false, null);
 		mInitialApplication = app;
 		mirror.android.app.ActivityThread.mInitialApplication.set(mainThread, app);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/StaticBroadcastSystem.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.lody.virtual.client.env.SpecialWidgetList;
 import com.lody.virtual.helper.proto.AppSetting;
-import com.lody.virtual.helper.utils.Reflect;
 import com.lody.virtual.helper.utils.collection.ArrayMap;
 import com.lody.virtual.service.pm.PackageParser;
 import com.lody.virtual.service.pm.VAppManagerService;
@@ -62,7 +61,7 @@ public void startApp(PackageParser.Package p) {
 	}
 
 	private void modifyFilter(IntentFilter filter) {
-		List<String> actions = Reflect.on(filter).get("mActions");
+		List<String> actions = mirror.android.content.IntentFilter.mActions.get(filter);
 		ListIterator<String> iterator = actions.listIterator();
 		while (iterator.hasNext()) {
 			String action = iterator.next();

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/pm/VAppManagerService.java
Patch:
@@ -70,7 +70,6 @@ private static PackageParser.Package parsePackage(File apk, int flags) {
 	public static void systemReady() {
 		VAppManagerService instance = new VAppManagerService();
 		gService.set(instance);
-		instance.preloadAllApps();
 	}
 
 	public void preloadAllApps() {

File: VirtualApp/app/src/main/java/io/virtualapp/home/LoadingActivity.java
Patch:
@@ -8,7 +8,6 @@
 import android.widget.TextView;
 
 import com.lody.virtual.client.core.VirtualCore;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.proto.AppSetting;
 
 import io.virtualapp.R;
@@ -22,6 +21,7 @@
 public class LoadingActivity extends AppCompatActivity {
 
 	private static final String MODEL_ARGUMENT = "MODEL_ARGUMENT";
+	private static final String KEY_INTENT = "KEY_INTENT";
 	private AppModel appModel;
 
 	public static void launch(Context context, AppModel model, int userId) {
@@ -30,7 +30,7 @@ public static void launch(Context context, AppModel model, int userId) {
 			Intent loadingPageIntent = new Intent(context, LoadingActivity.class);
 			loadingPageIntent.putExtra(MODEL_ARGUMENT, model);
 			loadingPageIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-			loadingPageIntent.putExtra(ExtraConstants.EXTRA_INTENT, intent);
+			loadingPageIntent.putExtra(KEY_INTENT, intent);
 			context.startActivity(loadingPageIntent);
 		}
 	}
@@ -59,7 +59,7 @@ protected void onCreate(Bundle savedInstanceState) {
 			nameView.setText(appModel.name);
 		}
 
-		Intent intent = getIntent().getParcelableExtra(ExtraConstants.EXTRA_INTENT);
+		Intent intent = getIntent().getParcelableExtra(KEY_INTENT);
 		VirtualCore.getCore().addLoadingPage(intent, this);
 		if (intent != null) {
 			VUiKit.defer().when(() -> {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/delegate/AppInstrumentation.java
Patch:
@@ -15,7 +15,6 @@
 import com.lody.virtual.client.interfaces.Injectable;
 import com.lody.virtual.client.local.LocalActivityRecord;
 import com.lody.virtual.client.local.VActivityManager;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.compat.ActivityManagerCompat;
 import com.lody.virtual.helper.compat.BundleCompat;
 
@@ -98,9 +97,9 @@ public void callActivityOnResume(Activity activity) {
 		}
 		super.callActivityOnResume(activity);
 		Intent intent = activity.getIntent();
-		Bundle bundle = intent.getBundleExtra(ExtraConstants.EXTRA_SENDER);
+		Bundle bundle = intent.getBundleExtra("_VA_|_sender_");
 		if (bundle != null) {
-			IBinder loadingPageToken = BundleCompat.getBinder(bundle, ExtraConstants.EXTRA_BINDER);
+			IBinder loadingPageToken = BundleCompat.getBinder(bundle, "_VA_|_loading_token_");
 			ActivityManagerCompat.finishActivity(loadingPageToken, -1, null);
 		}
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/BindService.java
Patch:
@@ -13,7 +13,6 @@
 import com.lody.virtual.client.env.HackServiceConnection;
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.local.VActivityManager;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
@@ -43,7 +42,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		int flags = (int) args[5];
 		int userId = VUserHandle.myUserId();
 		if (isServiceProcess()) {
-			userId = service.getIntExtra(ExtraConstants.EXTRA_TARGET_USER, VUserHandle.USER_NULL);
+			userId = service.getIntExtra("_VA_|_user_id_", VUserHandle.USER_NULL);
 		}
 		ServiceInfo serviceInfo = VirtualCore.getCore().resolveServiceInfo(service, userId);
 		if (serviceInfo != null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/GetIntentSender.java
Patch:
@@ -13,7 +13,6 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.local.VActivityManager;
 import com.lody.virtual.client.stub.KeepService;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.os.VUserHandle;
 
 import java.lang.reflect.Method;
@@ -72,7 +71,6 @@ private Intent redirectIntentSender(int type, String creator, Intent intent) {
 			newIntent.putExtra("_VA_|_vuid_", VClientImpl.getClient().getVUid());
 			newIntent.putExtra("_VA_|_type_", type);
 			newIntent.putExtra("_VA_|_intent_", intent);
-			newIntent.putExtra("_VA_|_what_", ExtraConstants.WHAT_PENDING_INTENT);
 			newIntent.putExtra("_VA_|_creator_", creator);
 			return newIntent;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/StartActivity.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.local.VActivityManager;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.utils.ArrayUtils;
 import com.lody.virtual.helper.utils.VLog;
 import com.lody.virtual.os.VUserHandle;
@@ -30,7 +29,7 @@ private static int getUserId(Intent intent) {
 		int userId = VUserHandle.myUserId();
 		if (VirtualCore.getCore().isMainProcess()) {
 			intent.setExtrasClassLoader(StartActivity.class.getClassLoader());
-			userId = intent.getIntExtra(ExtraConstants.EXTRA_TARGET_USER, userId);
+			userId = intent.getIntExtra("_VA_|_user_id_", userId);
 		}
 		return userId;
 	}
@@ -40,8 +39,10 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		super.onHook(who, method, args);
 		int intentIndex = ArrayUtils.indexOfFirst(args, Intent.class);
 		int resultToIndex = ArrayUtils.indexOfObject(args, IBinder.class, 2);
+		String resolvedType = (String) args[intentIndex + 1];
 
 		Intent targetIntent = (Intent) args[intentIndex];
+		targetIntent.setDataAndType(targetIntent.getData(), resolvedType);
 		IBinder resultTo = resultToIndex != -1 ? (IBinder) args[resultToIndex] : null;
 		String resultWho = null;
 		int requestCode = 0;
@@ -71,7 +72,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 			}
 			return 0;
 		}
-
 		args[intentIndex] = resultIntent;
 		return method.invoke(who, args);
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/window/BasePatchSession.java
Patch:
@@ -1,17 +1,17 @@
 package com.lody.virtual.client.hook.patchs.window;
 
-import java.lang.reflect.Method;
+import android.view.IWindowSession;
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.hook.patchs.window.session.WindowSessionPatch;
 
-import android.view.IWindowSession;
+import java.lang.reflect.Method;
 
 /**
  * @author Lody
  *
  */
-/* package */ abstract class BasePatchSession extends Hook {
+/*package*/ abstract class BasePatchSession extends Hook {
 
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/window/session/BaseReplacePkgName.java
Patch:
@@ -1,17 +1,17 @@
 package com.lody.virtual.client.hook.patchs.window.session;
 
-import java.lang.reflect.Method;
+import android.view.WindowManager;
 
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.helper.utils.ArrayUtils;
 
-import android.view.WindowManager;
+import java.lang.reflect.Method;
 
 /**
  * @author Lody
  *
  */
-/* package */ abstract class BaseReplacePkgName extends Hook {
+/*package*/ abstract class BaseReplacePkgName extends Hook {
 
 	private int cacheIndex = -1;
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -17,7 +17,6 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.VirtualRuntime;
 import com.lody.virtual.client.service.ServiceManagerNative;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.proto.AppTaskInfo;
 import com.lody.virtual.helper.proto.PendingIntentData;
 import com.lody.virtual.helper.proto.VParceledListSlice;
@@ -64,8 +63,8 @@ public LocalActivityRecord onActivityCreate(Activity activity) {
 		if (intent == null) {
 			return null;
 		}
-		ActivityInfo targetActInfo = intent.getParcelableExtra(ExtraConstants.EXTRA_TARGET_ACT_INFO);
-		ActivityInfo callerActInfo = intent.getParcelableExtra(ExtraConstants.EXTRA_CALLER);
+		ActivityInfo targetActInfo = intent.getParcelableExtra("_VA_|_target_activity_");
+		ActivityInfo callerActInfo = intent.getParcelableExtra("_VA_|_caller_activity_");
 
 		// NOTE:
 		// 此处在使用LocalActivityManager启动Activity的时候是空的,因为走不到replaceIntent里,

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/ComponentUtils.java
Patch:
@@ -77,7 +77,4 @@ public static boolean isSharedPackage(String packageName) {
 		return client.getSharedPackages().contains(packageName);
 	}
 
-	public static String createAction(ActivityInfo info) {
-		return String.format("_VA_%s_%s", info.packageName, info.name);
-	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/accounts/VAccountManagerService.java
Patch:
@@ -57,7 +57,6 @@
 import com.google.android.collect.Sets;
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.env.Constants;
-import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.os.VBinder;
 import com.lody.virtual.os.VEnvironment;
 import com.lody.virtual.os.VUserHandle;
@@ -2247,7 +2246,7 @@ private void showCantAddAccount(int errorCode, int userId) {
         cantAddAccount.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         long identityToken = clearCallingIdentity();
         try {
-            cantAddAccount.putExtra(ExtraConstants.EXTRA_TARGET_USER, userId);
+            cantAddAccount.putExtra("_VA_|_user_id_", userId);
             mContext.startActivity(cantAddAccount);
         } finally {
             restoreCallingIdentity(identityToken);
@@ -3163,7 +3162,7 @@ private boolean bindToAuthenticator(String authenticatorType) {
             Intent intent = new Intent();
             intent.setAction(AccountManager.ACTION_AUTHENTICATOR_INTENT);
             intent.setComponent(authenticatorInfo.componentName);
-            intent.putExtra(ExtraConstants.EXTRA_TARGET_USER, mAccounts.userId);
+            intent.putExtra("_VA_|_user_id_", mAccounts.userId);
             if (Log.isLoggable(TAG, Log.VERBOSE)) {
                 Log.v(TAG, "performing bindService to " + authenticatorInfo.componentName);
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/UidSystem.java
Patch:
@@ -1,10 +1,10 @@
 package com.lody.virtual.service.am;
 
-import static android.os.Process.FIRST_APPLICATION_UID;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import static android.os.Process.FIRST_APPLICATION_UID;
+
 /**
  * @author Lody
  */

File: VirtualApp/lib/src/main/java/mirror/ClassDef.java
Patch:
@@ -58,7 +58,7 @@ public static Class init(Class mappingClass, Class<?> realClass) {
                     try {
                         entry.getKey().set(null, entry.getValue());
                     } catch (Exception e) {
-                        //Ignore
+                       e.printStackTrace();
                     }
                 }
             }

File: VirtualApp/lib/src/main/java/mirror/FieldDef.java
Patch:
@@ -3,23 +3,23 @@
 import java.lang.reflect.Field;
 
 @SuppressWarnings("unchecked")
-public class FieldDef {
+public class FieldDef<T> {
     private Field field;
 
     public FieldDef(Class<?> cls, Field field) throws NoSuchFieldException {
         this.field = cls.getDeclaredField(field.getName());
         this.field.setAccessible(true);
     }
 
-    public <T> T get(Object object) {
+    public T get(Object object) {
         try {
             return (T) this.field.get(object);
         } catch (Exception e) {
             return null;
         }
     }
 
-    public void set(Object obj, Object value) {
+    public void set(Object obj, T value) {
         try {
             this.field.set(obj, value);
         } catch (Exception e) {

File: VirtualApp/lib/src/main/java/mirror/android/app/ActivityManagerNative.java
Patch:
@@ -6,5 +6,5 @@
 
 public class ActivityManagerNative {
     public static Class<?> Class = ClassDef.init(ActivityManagerNative.class, "android.app.ActivityManagerNative");
-    public static StaticFieldDef gDefault;
+    public static StaticFieldDef<Object> gDefault;
 }

File: VirtualApp/lib/src/main/java/mirror/android/app/IApplicationThreadICSMR1.java
Patch:
@@ -18,5 +18,5 @@ public class IApplicationThreadICSMR1 {
     public static Class<?> Class = ClassDef.init(IApplicationThreadICSMR1.class, IApplicationThread.class);
 
     @MethodInfo({Intent.class, ActivityInfo.class, CompatibilityInfo.class, int.class, String.class, Bundle.class, boolean.class})
-    public static MethodDef scheduleReceiver;
+    public static MethodDef<Void> scheduleReceiver;
 }

File: VirtualApp/lib/src/main/java/mirror/android/app/IApplicationThreadJBMR1.java
Patch:
@@ -18,5 +18,5 @@ public class IApplicationThreadJBMR1 {
     public static Class<?> Class = ClassDef.init(IApplicationThreadJBMR1.class, IApplicationThread.class);
 
     @MethodInfo({Intent.class, ActivityInfo.class, CompatibilityInfo.class, int.class, String.class, Bundle.class, boolean.class, int.class})
-    public static MethodDef scheduleReceiver;
+    public static MethodDef<Void> scheduleReceiver;
 }

File: VirtualApp/lib/src/main/java/mirror/android/app/IApplicationThreadKitkat.java
Patch:
@@ -18,5 +18,5 @@ public class IApplicationThreadKitkat {
     public static Class<?> Class = ClassDef.init(IApplicationThreadKitkat.class, IApplicationThread.class);
 
     @MethodInfo({Intent.class, ActivityInfo.class, CompatibilityInfo.class, int.class, String.class, Bundle.class, boolean.class, int.class, int.class})
-    public static MethodDef scheduleReceiver;
+    public static MethodDef<Void> scheduleReceiver;
 }

File: VirtualApp/lib/src/main/java/mirror/android/app/PendingIntentJBMR2.java
Patch:
@@ -1,10 +1,12 @@
 package mirror.android.app;
 
 import android.app.PendingIntent;
+import android.content.Intent;
+
 import mirror.ClassDef;
 import mirror.MethodDef;
 
 public class PendingIntentJBMR2 {
     public static Class Class = ClassDef.init(PendingIntentJBMR2.class, PendingIntent.class);
-    public static MethodDef getIntent;
+    public static MethodDef<Intent> getIntent;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/content/ContentProviderClient.java
Patch:
@@ -1,9 +1,11 @@
 package mirror.android.content;
 
+import android.content.IContentProvider;
+
 import mirror.ClassDef;
 import mirror.FieldDef;
 
 public class ContentProviderClient {
     public static Class Class = ClassDef.init(ContentProviderClient.class, android.content.ContentProviderClient.class);
-    public static FieldDef mContentProvider;
+    public static FieldDef<IContentProvider> mContentProvider;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/content/ContentResolverJBMR2.java
Patch:
@@ -1,12 +1,11 @@
 package mirror.android.content;
 
-
 import android.content.ContentResolver;
 
 import mirror.ClassDef;
 import mirror.FieldDef;
 
 public class ContentResolverJBMR2 {
-    public static Class<?> Class = ClassDef.init(ContentResolverJBMR2.class, ContentResolver.class);
-    public static FieldDef mPackageName;
+    public static Class Class = ClassDef.init(ContentResolverJBMR2.class, ContentResolver.class);;
+    public static FieldDef<String> mPackageName;
 }

File: VirtualApp/lib/src/main/java/mirror/android/ddm/DdmHandleAppName.java
Patch:
@@ -7,5 +7,5 @@
 public class DdmHandleAppName {
     public static Class Class = ClassDef.init(DdmHandleAppName.class, "android.ddm.DdmHandleAppName");
     @MethodInfo({String.class})
-    public static StaticMethodDef setAppName;
+    public static StaticMethodDef<Void> setAppName;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/ddm/DdmHandleAppNameJBMR1.java
Patch:
@@ -7,5 +7,5 @@
 public class DdmHandleAppNameJBMR1 {
     public static Class Class = ClassDef.init(DdmHandleAppNameJBMR1.class, "android.ddm.DdmHandleAppName");
     @MethodInfo({String.class, int.class})
-    public static StaticMethodDef setAppName;
+    public static StaticMethodDef<Void> setAppName;
 }
\ No newline at end of file

File: VirtualApp/lib/src/main/java/mirror/android/os/Handler.java
Patch:
@@ -6,5 +6,5 @@
 
 public class Handler {
     public static Class<?> Class = ClassDef.init(Handler.class, "android.os.Handler");
-    public static FieldDef mCallback;
+    public static FieldDef<android.os.Handler.Callback> mCallback;
 }

File: VirtualApp/lib/src/main/java/mirror/android/util/Singleton.java
Patch:
@@ -7,6 +7,6 @@
 
 public class Singleton {
     public static Class<?> Class = ClassDef.init(Singleton.class, "android.util.Singleton");
-    public static MethodDef get;
-    public static FieldDef mInstance;
+    public static MethodDef<Object> get;
+    public static FieldDef<Object> mInstance;
 }

File: VirtualApp/lib/src/main/java/mirror/java/lang/ClassLoader.java
Patch:
@@ -7,5 +7,5 @@
  */
 
 public class ClassLoader {
-    public static FieldDef parent;
+    public static FieldDef<java.lang.ClassLoader> parent;
 }

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -75,10 +75,10 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
 		mExplosionField = ExplosionField.attachToWindow(this);
 		mPagerView.setOnDragChangeListener(mPresenter::dragChange);
 		mPagerView.setOnEnterCrashListener(mPresenter::dragNearCrash);
-		mPagerView.setOnCrashItemListener((position, consumer) -> {
+		mPagerView.setOnCrashItemListener(position -> {
 			AppModel model = mAdapter.getItem(position);
 			View v = mPagerView.getChildAt(position);
-			mExplosionField.explode(v, view -> consumer.moveToCrash());
+			mExplosionField.explode(v, null);
 			mPresenter.deleteApp(model);
 		});
 		mPagerView.setOnItemClickListener((item, pos) -> {

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomeActivity.java
Patch:
@@ -75,10 +75,10 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
 		mExplosionField = ExplosionField.attachToWindow(this);
 		mPagerView.setOnDragChangeListener(mPresenter::dragChange);
 		mPagerView.setOnEnterCrashListener(mPresenter::dragNearCrash);
-		mPagerView.setOnCrashItemListener((position, consumer) -> {
+		mPagerView.setOnCrashItemListener(position -> {
 			AppModel model = mAdapter.getItem(position);
 			View v = mPagerView.getChildAt(position);
-			mExplosionField.explode(v, view -> consumer.moveToCrash());
+			mExplosionField.explode(v, null);
 			mPresenter.deleteApp(model);
 		});
 		mPagerView.setOnItemClickListener((item, pos) -> {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -182,6 +182,7 @@ public synchronized void start() {
 		fixBoundApp(mBoundApplication, VirtualCore.getHostBindData());
 		Application app = data.info.makeApplication(false, null);
 		mInitialApplication = app;
+		Reflect.on(VirtualCore.mainThread()).set("mInitialApplication", app);
 		ContextFixer.fixContext(app);
 		List<ProviderInfo> providers = data.providers;
 		if (providers != null) {

File: VirtualApp/app/src/main/java/io/virtualapp/home/HomePresenterImpl.java
Patch:
@@ -38,7 +38,7 @@ public void start() {
 	@Override
 	public void launchApp(AppModel model, int userId) {
 		try {
-			VActivityManager.getInstance().killAllApps();
+			VActivityManager.get().killAllApps();
 			LoadingActivity.launch(mActivity, model, userId);
 		} catch (Throwable e) {
 			e.printStackTrace();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -245,7 +245,7 @@ public void uncaughtException(Thread t, Throwable e) {
 
 		List<ReceiverInfo> receivers = VPackageManager.getInstance().queryReceivers(data.processName,0 , 0);
 		installReceivers(app, receivers);
-		VActivityManager.getInstance().appDoneExecuting();
+		VActivityManager.get().appDoneExecuting();
 	}
 
 	private void fixBoundApp(AppBindData data, Object hostBindData) {
@@ -266,7 +266,7 @@ private void installContentProviders(Context context, List<ProviderInfo> provide
 				results.add(cph);
 			}
 		}
-		VActivityManager.getInstance().publishContentProviders(results);
+		VActivityManager.get().publishContentProviders(results);
 	}
 
 	private static void installReceivers(Context context, List<ReceiverInfo> receivers) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -122,6 +122,9 @@ private void injectInternal() throws Throwable {
 		if (VirtualCore.getCore().isMainProcess()) {
 			addPatch(new ActivityManagerPatch());
 			return;
+		} else if (VirtualCore.getCore().isServiceProcess()) {
+			addPatch(new ActivityManagerPatch());
+			return;
 		}
 		if (VirtualCore.getCore().isVAppProcess()) {
 			addPatch(new ActivityManagerPatch());

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/delegate/AppInstrumentation.java
Patch:
@@ -76,7 +76,7 @@ public void callActivityOnCreate(Activity activity, Bundle icicle) {
 		String pkg = activity.getPackageName();
 		boolean isApp = VirtualCore.getCore().isAppInstalled(pkg);
 		if (isApp) {
-			LocalActivityRecord r = VActivityManager.getInstance().onActivityCreate(activity);
+			LocalActivityRecord r = VActivityManager.get().onActivityCreate(activity);
 			ContextFixer.fixContext(activity);
 			ActivityFixer.fixActivity(activity);
 			ActivityInfo info = null;
@@ -101,7 +101,7 @@ public void callActivityOnResume(Activity activity) {
 		String pkg = activity.getPackageName();
 		boolean isApp = VirtualCore.getCore().isAppInstalled(pkg);
 		if (isApp) {
-			VActivityManager.getInstance().onActivityResumed(activity);
+			VActivityManager.get().onActivityResumed(activity);
 		}
 		super.callActivityOnResume(activity);
 		Intent intent = activity.getIntent();
@@ -117,7 +117,7 @@ public void callActivityOnDestroy(Activity activity) {
 		String pkg = activity.getPackageName();
 		boolean isApp = VirtualCore.getCore().isAppInstalled(pkg);
 		if (isApp) {
-			VActivityManager.getInstance().onActivityDestroy(activity);
+			VActivityManager.get().onActivityDestroy(activity);
 		}
 		super.callActivityOnDestroy(activity);
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityUtils.java
Patch:
@@ -31,7 +31,7 @@ public static boolean replaceIntent(IBinder resultTo, Object[] args, int intentI
 			req.fromHost = !VirtualCore.getCore().isVAppProcess();
 			req.resultTo = resultTo;
 			// Get Request Result
-			VActRedirectResult result = VActivityManager.getInstance().redirectTargetActivity(req);
+			VActRedirectResult result = VActivityManager.get().redirectTargetActivity(req);
 			if (result == null || result.stubActInfo == null) {
 				return false;
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -118,7 +118,7 @@ private boolean handleLaunchActivity(Message msg) {
 		}
 		String processName = ComponentUtils.getProcessName(targetActInfo);
 		if (!VClientImpl.getClient().isBound()) {
-			VActivityManager.getInstance().ensureAppBound(processName, targetActInfo.applicationInfo);
+			VActivityManager.get().ensureAppBound(processName, targetActInfo.applicationInfo);
 			getH().sendMessageDelayed(Message.obtain(msg), 5);
 			return false;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_BindService.java
Patch:
@@ -48,7 +48,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 			}
 			if (isAppPkg(pkgName)) {
 				connection = new HackServiceConnection(VClientImpl.getClient().getCurrentApplication(), connection);
-				return VActivityManager.getInstance().bindService(caller.asBinder(), token, service, resolvedType,
+				return VActivityManager.get().bindService(caller.asBinder(), token, service, resolvedType,
 						connection, flags);
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_ForceStopPackage.java
Patch:
@@ -26,7 +26,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		if (args.length > 1 && args[1] instanceof Integer) {
 			userId = (int) args[1];
 		}
-		VActivityManager.getInstance().killAppByPkg(pkg, userId);
+		VActivityManager.get().killAppByPkg(pkg, userId);
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetCallingActivity.java
Patch:
@@ -26,7 +26,7 @@ public String getName() {
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		IBinder token = (IBinder) args[0];
-		ActivityInfo activityInfo = VActivityManager.getInstance().getCallingActivity(token);
+		ActivityInfo activityInfo = VActivityManager.get().getCallingActivity(token);
 		if (activityInfo == null) {
 			return null;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetCallingPackage.java
Patch:
@@ -23,7 +23,7 @@ public String getName() {
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		IBinder token = (IBinder) args[0];
-		String pkg = VActivityManager.getInstance().getPackageForToken(token);
+		String pkg = VActivityManager.get().getPackageForToken(token);
 		if (pkg != null) {
 			return pkg;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetContentProvider.java
Patch:
@@ -43,7 +43,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 				return method.invoke(who, args);
 			}
 		}
-		IActivityManager.ContentProviderHolder holder = VActivityManager.getInstance().getContentProvider(name);
+		IActivityManager.ContentProviderHolder holder = VActivityManager.get().getContentProvider(name);
 		boolean external = holder == null;
 		if (external) {
 			try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetPackageForToken.java
Patch:
@@ -24,7 +24,7 @@ public String getName() {
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		IBinder token = (IBinder) args[0];
-		String pkg = VActivityManager.getInstance().getPackageForToken(token);
+		String pkg = VActivityManager.get().getPackageForToken(token);
 		if (pkg != null) {
 			return pkg;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetServices.java
Patch:
@@ -21,7 +21,7 @@ public String getName() {
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		int maxNum = (int) args[0];
 		int flags = (int) args[1];
-		return VActivityManager.getInstance().getServices(maxNum, flags).getList();
+		return VActivityManager.get().getServices(maxNum, flags).getList();
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetTasks.java
Patch:
@@ -29,7 +29,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 				.invoke(who, args);
 		for (int i = 0; i < runningTaskInfos.size(); i++) {
 			ActivityManager.RunningTaskInfo info = runningTaskInfos.get(i);
-			AppTaskInfo taskInfo = VActivityManager.getInstance().getTaskInfo(info.id);
+			AppTaskInfo taskInfo = VActivityManager.get().getTaskInfo(info.id);
 			if (taskInfo != null) {
 				info.topActivity = taskInfo.topActivity;
 				info.baseActivity = taskInfo.baseActivity;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_KillApplicationProcess.java
Patch:
@@ -26,7 +26,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		if (args.length > 1 && args[0] instanceof String && args[1] instanceof Integer) {
 			String procName = (String) args[0];
 			int uid = (int) args[1];
-			VActivityManager.getInstance().killApplicationProcess(procName, uid);
+			VActivityManager.get().killApplicationProcess(procName, uid);
 			return 0;
 		}
 		return method.invoke(who, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_PeekService.java
Patch:
@@ -25,7 +25,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		HookUtils.replaceLastAppPkg(args);
 		Intent service = (Intent) args[0];
 		String resolvedType = (String) args[1];
-		return VActivityManager.getInstance().peekService(service, resolvedType);
+		return VActivityManager.get().peekService(service, resolvedType);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_PublishService.java
Patch:
@@ -26,7 +26,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		IBinder token = (IBinder) args[0];
 		Intent intent = (Intent) args[1];
 		IBinder service = (IBinder) args[2];
-		VActivityManager.getInstance().publishService(token, intent, service);
+		VActivityManager.get().publishService(token, intent, service);
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_ServiceDoneExecuting.java
Patch:
@@ -27,7 +27,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		int type = (int) args[1];
 		int startId = (int) args[2];
 		int res = (int) args[3];
-		VActivityManager.getInstance().serviceDoneExecuting(token, type, startId, res);
+		VActivityManager.get().serviceDoneExecuting(token, type, startId, res);
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_SetServiceForeground.java
Patch:
@@ -31,7 +31,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 			int id = (int) args[2];
 			Notification notification = (Notification) args[3];
 			boolean keep = (boolean) args[4];
-			VActivityManager.getInstance().setServiceForeground(componentName, token, id, notification, keep);
+			VActivityManager.get().setServiceForeground(componentName, token, id, notification, keep);
 			return 0;
 		} catch (Throwable e) {
 			e.printStackTrace();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_StartActivity.java
Patch:
@@ -72,7 +72,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		}
 		req.resultTo = resultTo;
 		// Get Request Result
-		VActRedirectResult result = VActivityManager.getInstance().redirectTargetActivity(req);
+		VActRedirectResult result = VActivityManager.get().redirectTargetActivity(req);
 		if (result == null || result.justReturn) {
 			return 0;
 		}
@@ -99,7 +99,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		}
 		ActivityInfo callerActInfo = null;
 		if (resultTo != null) {
-			callerActInfo = VActivityManager.getInstance().getActivityInfo(resultTo);
+			callerActInfo = VActivityManager.get().getActivityInfo(resultTo);
 		}
 		// Mapping
 		Intent stubIntent = new Intent();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_StartService.java
Patch:
@@ -43,7 +43,7 @@ && getHostPkg().equals(service.getComponent().getPackageName())) {
 				return method.invoke(who, args);
 			}
 			if (isAppPkg(pkgName)) {
-				return VActivityManager.getInstance().startService(appThread.asBinder(), service, resolvedType);
+				return VActivityManager.get().startService(appThread.asBinder(), service, resolvedType);
 			}
 		}
 		return method.invoke(who, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_StopService.java
Patch:
@@ -41,7 +41,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		if (componentName != null) {
 			String pkgName = componentName.getPackageName();
 			if (isAppPkg(pkgName)) {
-				return VActivityManager.getInstance().stopService(caller.asBinder(), intent, resolvedType);
+				return VActivityManager.get().stopService(caller.asBinder(), intent, resolvedType);
 			}
 		}
 		return method.invoke(who, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_StopServiceToken.java
Patch:
@@ -29,7 +29,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		if (componentName != null) {
 			String pkgName = componentName.getPackageName();
 			if (isAppPkg(pkgName)) {
-				return VActivityManager.getInstance().stopServiceToken(componentName, token, startId);
+				return VActivityManager.get().stopServiceToken(componentName, token, startId);
 			}
 		}
 		return method.invoke(who, args);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_UnbindFinished.java
Patch:
@@ -26,7 +26,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		IBinder token = (IBinder) args[0];
 		Intent service = (Intent) args[1];
 		boolean doRebind = (boolean) args[2];
-		VActivityManager.getInstance().unbindFinished(token, service, doRebind);
+		VActivityManager.get().unbindFinished(token, service, doRebind);
 		return 0;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_UnbindService.java
Patch:
@@ -22,7 +22,7 @@ public String getName() {
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		IServiceConnection connection = (IServiceConnection) args[0];
-		return VActivityManager.getInstance().unbindService(connection);
+		return VActivityManager.get().unbindService(connection);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetApplicationInfo.java
Patch:
@@ -1,6 +1,7 @@
 package com.lody.virtual.client.hook.patchs.pm;
 
 import android.content.pm.ApplicationInfo;
+import android.os.Process;
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
@@ -38,6 +39,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		}
 		ApplicationInfo applicationInfo = VPackageManager.getInstance().getApplicationInfo(pkg, flags, userId);
 		if (applicationInfo != null) {
+			applicationInfo.uid = Process.myUid();
 			return applicationInfo;
 		}
 		if (args.length > 2 && args[2] instanceof Integer) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPackageInfo.java
Patch:
@@ -1,6 +1,7 @@
 package com.lody.virtual.client.hook.patchs.pm;
 
 import android.content.pm.PackageInfo;
+import android.os.Process;
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
@@ -40,6 +41,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		}
 		PackageInfo packageInfo = VPackageManager.getInstance().getPackageInfo(pkg, flags, userId);
 		if (packageInfo != null) {
+			packageInfo.applicationInfo.uid = Process.myUid();
 			return packageInfo;
 		}
 		if (args.length > 2 && args[2] instanceof Integer) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -37,7 +37,7 @@ public class VActivityManager {
 
 	private Map<IBinder, LocalActivityRecord> mActivities = new HashMap<IBinder, LocalActivityRecord>(6);
 
-	public static VActivityManager getInstance() {
+	public static VActivityManager get() {
 		return sAM;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubContentProvider.java
Patch:
@@ -29,7 +29,7 @@ private void initProcess(Bundle extras) {
 		IBinder token = BundleCompat.getBinder(extras, ExtraConstants.EXTRA_BINDER);
 		VClientImpl client = VClientImpl.getClient();
 		client.setToken(token);
-		VActivityManager.getInstance().attachClient(client);
+		VActivityManager.get().attachClient(client);
 	}
 
 	public static class C0 extends StubContentProvider {

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/collection/ContainerHelpers.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.lody.virtual.helper.utils;
+package com.lody.virtual.helper.utils.collection;
 
 class ContainerHelpers {
     static final int[] EMPTY_INTS = new int[0];

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/collection/SparseArray.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.lody.virtual.helper.utils;
+package com.lody.virtual.helper.utils.collection;
 
 /**
  * A copy of the current platform (currently {@link android.os.Build.VERSION_CODES#KITKAT}

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -41,8 +41,8 @@ public static VApp getApp() {
 	protected void attachBaseContext(Context base) {
 		try {
 			VirtualCore.getCore().startup(base);
-		} catch (Throwable throwable) {
-			throwable.printStackTrace();
+		} catch (Throwable e) {
+			e.printStackTrace();
 		}
 		super.attachBaseContext(base);
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/HCallbackHook.java
Patch:
@@ -8,7 +8,6 @@
 import android.os.Handler;
 import android.os.Message;
 
-import com.lody.virtual.IOHook;
 import com.lody.virtual.client.VClientImpl;
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.interfaces.Injectable;
@@ -79,7 +78,6 @@ private static Handler.Callback getHCallback() {
 	@Override
 	public boolean handleMessage(Message msg) {
 		if (!calling) {
-			IOHook.hookNative();
 			calling = true;
 			try {
 				if (LAUNCH_ACTIVITY == msg.what) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/utils/FileIO.java
Patch:
@@ -101,12 +101,12 @@ public static void copyFile(File source, File target) {
 		} catch (IOException e) {
 			e.printStackTrace();
 		} finally {
-			closeQuitely(inputStream);
-			closeQuitely(outputStream);
+			closeQuietly(inputStream);
+			closeQuietly(outputStream);
 		}
 	}
 
-	private static void closeQuitely(Closeable closeable) {
+	public static void closeQuietly(Closeable closeable) {
 		if (closeable != null) {
 			try {
 				closeable.close();

File: VirtualApp/lib/src/main/java/libcore/io/Os.java
Patch:
@@ -40,7 +40,6 @@
 import java.net.SocketException;
 import java.nio.ByteBuffer;
 
-//这个接口并不是 public 的,改成 public 没有出现异常,那么说明改成 public 是可以的.
 public interface Os {
     FileDescriptor accept(FileDescriptor fd, InetSocketAddress peerAddress) throws ErrnoException, SocketException;
     boolean access(String path, int mode) throws ErrnoException;

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -68,7 +68,7 @@ private void installGms() {
 				VirtualCore.getCore().installApp(apkPath,
 						InstallStrategy.DEPEND_SYSTEM_IF_EXIST | InstallStrategy.TERMINATE_IF_EXIST);
 			} catch (Throwable e) {
-				e.printStackTrace();
+				// Ignore
 			}
 		}
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetContentProvider.java
Patch:
@@ -52,9 +52,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 						&& !getHostPkg().equals(holder.info.packageName)) {
 					holder = null;
 				}
-				if (holder != null && holder.info != null && holder.info.packageName.startsWith("com.google")) {
-					return  null;
-				}
 			} catch (InvocationTargetException e) {
 				if (e.getCause() instanceof SecurityException) {
 					return null;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetApplicationInfo.java
Patch:
@@ -34,9 +34,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		}
 		applicationInfo = (ApplicationInfo) method.invoke(who, args);
 		if (applicationInfo != null) {
-			if (applicationInfo.packageName.startsWith("com.google")) {
-				return null;
-			}
 			if (ComponentUtils.isSystemApp(applicationInfo)) {
 				return applicationInfo;
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPackageInfo.java
Patch:
@@ -40,9 +40,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		}
 		packageInfo = (PackageInfo) method.invoke(who, args);
 		if (packageInfo != null) {
-			if (packageInfo.packageName.startsWith("com.google")) {
-				return null;
-			}
 			if (getHostPkg().equals(packageInfo.packageName) || ComponentUtils.isSystemApp(packageInfo)) {
 				return packageInfo;
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -29,7 +29,6 @@
 import com.lody.virtual.helper.compat.AppBindDataCompat;
 import com.lody.virtual.helper.proto.ReceiverInfo;
 import com.lody.virtual.helper.utils.Reflect;
-import com.lody.virtual.helper.utils.VLog;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -214,8 +213,6 @@ private static void installReceivers(Context context, List<ReceiverInfo> receive
 						context.registerReceiver(receiver, filter);
 					}
 				} catch (Throwable e) {
-					VLog.w(TAG, "failed to install receiver, the failed cause is \n");
-					e.printStackTrace();
 					// Ignore
 				}
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ProcessMap.java
Patch:
@@ -30,7 +30,7 @@ public ProcessRecord get(String processName) {
 	public ProcessRecord get(StubInfo stubInfo) {
 		for (int N = 0; N < mProcessByPids.size(); N++) {
 			ProcessRecord r = mProcessByPids.valueAt(N);
-			if (r.stubInfo.equals(stubInfo)) {
+			if (r.stubInfo != null && r.stubInfo.equals(stubInfo)) {
 				return r;
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/phonesubinfo/PhoneSubInfoPatch.java
Patch:
@@ -1,13 +1,13 @@
 package com.lody.virtual.client.hook.patchs.phonesubinfo;
 
+import android.os.ServiceManager;
+
 import com.android.internal.telephony.IPhoneSubInfo;
 import com.lody.virtual.client.hook.base.PatchObject;
 import com.lody.virtual.client.hook.base.ReplaceCallingPkgHook;
 import com.lody.virtual.client.hook.base.ReplaceLastPkgHook;
 import com.lody.virtual.client.hook.binders.HookPhoneSubInfoBinder;
 
-import android.os.ServiceManager;
-
 /**
  * @author Lody
  *
@@ -44,10 +44,10 @@ protected void applyHooks() {
 		addHook(new ReplaceLastPkgHook("getVoiceMailNumberForSubscriber"));
 		addHook(new ReplaceCallingPkgHook("getVoiceMailAlphaTag"));
 		addHook(new ReplaceLastPkgHook("getVoiceMailAlphaTagForSubscriber"));
-
 		// The following method maybe need to fake
 		addHook(new ReplaceCallingPkgHook("getDeviceId"));
 		addHook(new ReplaceCallingPkgHook("getIccSerialNumber"));
+		addHook(new ReplaceLastPkgHook("getIccSerialNumberForSubscriber"));
 
 	}
 

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -23,12 +23,12 @@ public static VApp getApp() {
 
 	@Override
 	protected void attachBaseContext(Context base) {
-		super.attachBaseContext(base);
 		try {
 			VirtualCore.getCore().startup(base);
-		} catch (Throwable e) {
-			e.printStackTrace();
+		} catch (Throwable throwable) {
+			throwable.printStackTrace();
 		}
+		super.attachBaseContext(base);
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -150,7 +150,7 @@ public void startup(Context context) throws Throwable {
 			unHookPackageManager = context.getPackageManager();
 			hostPkgInfo = unHookPackageManager.getPackageInfo(context.getPackageName(), PackageManager.GET_PROVIDERS);
 			// Host包名
-			pkgName = context.getPackageName();
+			pkgName = context.getApplicationInfo().packageName;
 			// 主进程名
 			mainProcessName = context.getApplicationInfo().processName;
 			// 当前进程名

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/WidthCompat.java
Patch:
@@ -11,7 +11,6 @@
 
 import com.lody.virtual.client.env.Constants;
 import com.lody.virtual.helper.utils.OSUtils;
-import com.lody.virtual.helper.utils.VLog;
 
 /**
  * Created by 247321453 on 2016/7/17. 通知栏的宽度适配
@@ -50,6 +49,7 @@ private int getDefaultWidth(int width, int padding) {
         return width;
     }
 
+
     private int getMIUINotificationWidth(Context context, int width, int height) {
         // status_bar_notification_row
         // adaptive
@@ -90,7 +90,7 @@ private int getMIUINotificationWidth(Context context, int width, int height) {
                 }
             }
         } catch (Exception e) {
-            e.printStackTrace();
+            // Ops
         }
         return width;
     }
@@ -134,7 +134,7 @@ private ViewGroup createViewGroup(Context context, int layoutId) {
         try {
             return (ViewGroup) LayoutInflater.from(context).inflate(layoutId, null);
         } catch (Throwable e) {
-            VLog.w(TAG, "systemui view:" + VLog.getStackTraceString(e));
+//            VLog.w(TAG, "systemui view:" + VLog.getStackTraceString(e));
 //			e.printStackTrace();
         }
         return new FrameLayout(context);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPackagesForUid.java
Patch:
@@ -27,7 +27,7 @@ public String getName() {
 	@Override
 	public boolean beforeHook(Object who, Method method, Object... args) {
 		int uid = (int) args[0];
-		return uid == Process.myUid();
+		return uid == Process.myUid() || uid == 99999;
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/fixer/ComponentFixer.java
Patch:
@@ -68,7 +68,7 @@ public static void fixComponentInfo(AppInfo appInfo, ComponentInfo info) {
 	}
 
 	public static void fixUid(ApplicationInfo applicationInfo) {
-		if (VClientImpl.getClient().isBound() && applicationInfo != null) {
+		if (false && VClientImpl.getClient().isBound() && applicationInfo != null) {
 			String packageName = applicationInfo.packageName;
 			if (packageName.equals(VClientImpl.getClient().geCurrentPackage())
 					|| ComponentUtils.isSharedPackage(packageName)) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VActivityManagerService.java
Patch:
@@ -134,6 +134,9 @@ public void onCreate(Context context) {
 		}
 		ProviderInfo[] providerInfos = packageInfo.providers;
 		for (ProviderInfo providerInfo : providerInfos) {
+			if (providerInfo.authority == null) {
+				continue;
+			}
 			if (isStubComponent(providerInfo)) {
 				String processName = providerInfo.processName;
 				stubProcessList.add(processName);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPackagesForUid.java
Patch:
@@ -35,7 +35,7 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		VClientImpl client = VClientImpl.getClient();
 		List<String> sharedPackages = client.getSharedPackages();
 		List<String> packages = new ArrayList<>(sharedPackages.size() + 1);
-		String initialPackage = client.geInitialPackage();
+		String initialPackage = client.geCurrentPackage();
 		packages.add(initialPackage);
 		packages.addAll(sharedPackages);
 		List<AppInfo> appInfos = VirtualCore.getCore().getAllApps();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/VActivityManager.java
Patch:
@@ -339,9 +339,9 @@ public void unregisterProcessObserver(IProcessObserver observer) {
 		}
 	}
 
-	public void appDoneExecuting(String packageName) {
+	public void appDoneExecuting() {
 		try {
-			getService().appDoneExecuting(packageName);
+			getService().appDoneExecuting();
 		} catch (RemoteException e) {
 			e.printStackTrace();
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/BinderProvider.java
Patch:
@@ -14,7 +14,6 @@
 import com.lody.virtual.helper.component.BaseContentProvider;
 import com.lody.virtual.service.account.VAccountManagerService;
 import com.lody.virtual.service.am.VActivityManagerService;
-import com.lody.virtual.service.am.VReceiverService;
 import com.lody.virtual.service.filter.IntentFilterService;
 import com.lody.virtual.service.interfaces.IServiceFetcher;
 import com.lody.virtual.service.pm.VAppManagerService;
@@ -44,7 +43,6 @@ public boolean onCreate() {
 		VAccountManagerService.systemReady(context);
 		addService(ServiceManagerNative.ACCOUNT_MANAGER, VAccountManagerService.getSingleton());
 		addService(ServiceManagerNative.INTENT_FILTER_MANAGER, IntentFilterService.getService());
-		addService(ServiceManagerNative.RECEIVER_MANAGER, VReceiverService.getService());
 		return true;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/VClientImpl.java
Patch:
@@ -29,6 +29,7 @@
 import com.lody.virtual.helper.proto.AppInfo;
 import com.lody.virtual.helper.proto.ReceiverInfo;
 import com.lody.virtual.helper.utils.Reflect;
+import com.lody.virtual.helper.utils.VLog;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -116,6 +117,7 @@ private void handleBindApplication(AppBindData data) {
 				CompatibilityInfo.DEFAULT_COMPATIBILITY_INFO);
 		fixLoadedApk(mBoundApplication.info, appInfo);
 		Application app = data.info.makeApplication(false, null);
+		ContextFixer.fixContext(app);
 		Reflect.on(mainThread).set("mInitialApplication", app);
 		List<ProviderInfo> providers = data.providers;
 		if (providers != null) {
@@ -188,7 +190,7 @@ private void fixLoadedApk(LoadedApk loadedApk, AppInfo appInfo) {
 	public void bindApplication(String processName, ApplicationInfo appInfo, List<String> sharedPackages,
 			List<ProviderInfo> providers) {
 		VirtualRuntime.setupRuntime(processName, appInfo);
-		AppBindData appBindData = new AppBindData();
+		final AppBindData appBindData = new AppBindData();
 		appBindData.processName = processName;
 		appBindData.appInfo = appInfo;
 		appBindData.sharedPackages = sharedPackages;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubContentProvider.java
Patch:
@@ -1,15 +1,15 @@
 package com.lody.virtual.client.stub;
 
+import android.os.Bundle;
+import android.os.IBinder;
+
 import com.lody.virtual.client.VClientImpl;
 import com.lody.virtual.client.local.VActivityManager;
 import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.MethodConstants;
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.component.BaseContentProvider;
 
-import android.os.Bundle;
-import android.os.IBinder;
-
 /**
  * @author Lody
  *

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ProcessRecord.java
Patch:
@@ -16,6 +16,7 @@
 public final class ProcessRecord extends Binder {
 
 	public final ConditionVariable lock = new ConditionVariable();
+	public final ConditionVariable attachLock = new ConditionVariable();
 	final public StubInfo stubInfo;
 	public final ApplicationInfo info; // all about the first app in the process
 	final public String processName; // name of the process

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetServices.java
Patch:
@@ -1,10 +1,10 @@
 package com.lody.virtual.client.hook.patchs.am;
 
-import java.lang.reflect.Method;
-
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.local.VActivityManager;
 
+import java.lang.reflect.Method;
+
 /**
  * @author Lody
  *
@@ -21,7 +21,7 @@ public String getName() {
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		int maxNum = (int) args[0];
 		int flags = (int) args[1];
-		return VActivityManager.getInstance().getServices(maxNum, flags);
+		return VActivityManager.getInstance().getServices(maxNum, flags).getList();
 	}
 
 	@Override

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -27,7 +27,7 @@
 import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.compat.ActivityThreadCompat;
 import com.lody.virtual.helper.compat.BundleCompat;
-import com.lody.virtual.helper.loaders.DexAppClassLoader;
+import com.lody.virtual.helper.loaders.ClassLoaderHelper;
 import com.lody.virtual.helper.proto.AppInfo;
 import com.lody.virtual.helper.proto.InstallResult;
 import com.lody.virtual.service.IAppManager;
@@ -228,7 +228,7 @@ public String getMainProcessName() {
 	public void preOpt(String pkg) throws Exception {
 		AppInfo info = findApp(pkg);
 		if (info != null && !info.dependSystem) {
-			new DexAppClassLoader(info);
+			ClassLoaderHelper.create(info);
 		}
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VServiceService.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.concurrent.locks.ReentrantLock;
 
 import static android.app.ActivityThread.SERVICE_DONE_EXECUTING_STOP;
 
@@ -37,6 +38,8 @@
  */
 public class VServiceService extends IServiceManager.Stub {
 
+	private final ReentrantLock mLock = new ReentrantLock();
+
 	private static final String TAG = VServiceService.class.getSimpleName();
 
 	private static final VServiceService sService = new VServiceService();

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VActivityService.java
Patch:
@@ -249,7 +249,7 @@ private VActRedirectResult redirectTargetActivityLocked(VRedirectActRequest requ
 				}
 			}
 		}
-		VProcessService.FetchResult res = VProcessService.getService().fetchStub(targetProcessName);
+		VProcessService.FetchResult res = VProcessService.getService().fetchStubLocked(targetProcessName);
 		StubInfo selectedStub = res.stubInfo;
 		if (selectedStub == null) {
 			return null;

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/process/VProcessService.java
Patch:
@@ -262,7 +262,7 @@ public void binderDied() {
 	}
 
 	@Override
-	public void onAppProcessCreate(IBinder clientBinder, String pkg, String processName) {
+	public synchronized void onAppProcessCreate(IBinder clientBinder, String pkg, String processName) {
 		final int callingPid = Binder.getCallingPid();
 		int uid = Binder.getCallingUid();
 		IVClient client = IVClient.Stub.asInterface(clientBinder);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubContentProvider.java
Patch:
@@ -1,12 +1,12 @@
 package com.lody.virtual.client.stub;
 
+import android.os.Bundle;
+
 import com.lody.virtual.client.core.AppSandBox;
 import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.MethodConstants;
 import com.lody.virtual.helper.component.BaseContentProvider;
 
-import android.os.Bundle;
-
 /**
  * @author Lody
  *
@@ -19,7 +19,6 @@ public Bundle call(String method, String arg, Bundle extras) {
 			initProcess(extras);
 			return null;
 		}
-
 		return null;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/process/VProcessService.java
Patch:
@@ -296,7 +296,6 @@ public void onAppProcessCreate(IBinder clientBinder, String pkg, String processN
             r.appThread = appThread;
             r.stubInfo.verify();
             mProcessList.addProcess(callingPid, r);
-//            VContentService.getService().generateApplicationProvidersLocked(r);
         } else {
             VLog.w(TAG, "Pid %d has been bound to PMS, should not be bound again, ignored.", callingPid);
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_RegisterReceiver.java
Patch:
@@ -90,7 +90,7 @@ private void modifyIntentFilter(IntentFilter filter) {
 			List<String> newActions = new ArrayList<>();
 			ListIterator<String> iterator = actions.listIterator();
 			while (iterator.hasNext()) {
-                String action = iterator.next();
+				String action = iterator.next();
 				if (SpecialWidgetList.isActionInBlackList(action)) {
 					iterator.remove();
 				}
@@ -99,7 +99,7 @@ private void modifyIntentFilter(IntentFilter filter) {
 					iterator.remove();
 					newActions.add(newAction);
 				}
-            }
+			}
 			actions.addAll(newActions);
 		}
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_RegisterReceiver.java
Patch:
@@ -90,7 +90,7 @@ private void modifyIntentFilter(IntentFilter filter) {
 			List<String> newActions = new ArrayList<>();
 			ListIterator<String> iterator = actions.listIterator();
 			while (iterator.hasNext()) {
-                String action = iterator.next();
+				String action = iterator.next();
 				if (SpecialWidgetList.isActionInBlackList(action)) {
 					iterator.remove();
 				}
@@ -99,7 +99,7 @@ private void modifyIntentFilter(IntentFilter filter) {
 					iterator.remove();
 					newActions.add(newAction);
 				}
-            }
+			}
 			actions.addAll(newActions);
 		}
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -20,6 +20,7 @@
 import com.lody.virtual.client.hook.patchs.graphics.GraphicsStatsPatch;
 import com.lody.virtual.client.hook.patchs.imms.MmsPatch;
 import com.lody.virtual.client.hook.patchs.input.InputMethodManagerPatch;
+import com.lody.virtual.client.hook.patchs.isub.SubPatch;
 import com.lody.virtual.client.hook.patchs.job.JobPatch;
 import com.lody.virtual.client.hook.patchs.location.LocationManagerPatch;
 import com.lody.virtual.client.hook.patchs.media.router.MediaRouterServicePatch;
@@ -155,7 +156,7 @@ private void injectInternal() throws Throwable {
 			}
 			if (Build.VERSION.SDK_INT >= LOLLIPOP_MR1) {
 				addPatch(new GraphicsStatsPatch());
-//				addPatch(new SubPatch());
+				addPatch(new SubPatch());
 			}
 
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/fixer/ContextFixer.java
Patch:
@@ -11,6 +11,7 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.binders.HookDropBoxBinder;
 import com.lody.virtual.client.hook.patchs.dropbox.DropBoxManagerPatch;
+import com.lody.virtual.client.hook.patchs.graphics.GraphicsStatsPatch;
 import com.lody.virtual.helper.utils.Reflect;
 import com.lody.virtual.helper.utils.ReflectException;
 import com.lody.virtual.helper.utils.VLog;
@@ -68,6 +69,7 @@ public static void fixCamera() {
 	 *            插件Context
 	 */
 	public static void fixContext(Context context) {
+		PatchManager.getInstance().checkEnv(GraphicsStatsPatch.class);
 		while (context instanceof ContextWrapper) {
 			context = ((ContextWrapper) context).getBaseContext();
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/VContentService.java
Patch:
@@ -37,7 +37,7 @@ public static VContentService getService() {
 	}
 
 	@Override
-	public IActivityManager.ContentProviderHolder getContentProvider(String auth) {
+	public synchronized IActivityManager.ContentProviderHolder getContentProvider(String auth) {
 		if (TextUtils.isEmpty(auth)) {
 			return null;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/AppSandBox.java
Patch:
@@ -180,7 +180,7 @@ private static void setupRuntime(ApplicationInfo applicationInfo) {
 			} catch (Throwable e) {
 				e.printStackTrace();
 			}
-			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
 				try {
 					RenderScriptCacheDir.setupDiskCache(codeCacheDir);
 				} catch (Throwable e) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/HookBinder.java
Patch:
@@ -152,6 +152,7 @@ public void addHook(Hook hook) {
 			if (internalHookMapping.containsKey(hook.getName())) {
 				VLog.w(TAG, "Hook(%s) from class(%s) have been added, should not be add again.", hook.getName(),
 						hook.getClass().getName());
+				return;
 			}
 			internalHookMapping.put(hook.getName(), hook);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/base/HookObject.java
Patch:
@@ -60,6 +60,7 @@ public void addHook(Hook hook) {
 			if (internalHookMapping.containsKey(hook.getName())) {
 				VLog.w(TAG, "Hook(%s) from class(%s) have been added, can't add again.", hook.getName(),
 						hook.getClass().getName());
+				return;
 			}
 			internalHookMapping.put(hook.getName(), hook);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/pm/VAppService.java
Patch:
@@ -176,7 +176,7 @@ public boolean uninstallApp(String pkg) {
 				VProcessService.getService().killAppByPkg(pkg);
 				FileIO.deleteDir(AppFileSystem.getDefault().getAppPackageFolder(pkg));
 				PackageCache.remove(pkg);
-				notifyAppUnnstalled(pkg);
+				notifyAppUninstalled(pkg);
 				return true;
 			}
 		}
@@ -207,7 +207,7 @@ private void notifyAppInstalled(String pkgName) {
 		remoteCallbackList.finishBroadcast();
 	}
 
-	private void notifyAppUnnstalled(String pkgName) {
+	private void notifyAppUninstalled(String pkgName) {
 		int N = remoteCallbackList.beginBroadcast();
 		while (N-- > 0) {
 			try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/filter/ServiceEnv.java
Patch:
@@ -6,5 +6,5 @@
  * TODO:
  */
 public class ServiceEnv {
-  public static String IntentFilter = "IntentFilter";
+  public static String IntentFilter = IntentFilter.class.getSimpleName();
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -47,6 +47,7 @@
 		Hook_GetCurrentUser.class,
 		Hook_UnstableProviderDied.class,
 		Hook_GetCallingActivity.class,
+		Hook_FinishActivity.class,
 })
 
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_StartActivity.java
Patch:
@@ -16,7 +16,6 @@
 import com.lody.virtual.helper.proto.VActRedirectResult;
 import com.lody.virtual.helper.proto.VRedirectActRequest;
 import com.lody.virtual.helper.utils.ArrayUtils;
-import com.lody.virtual.helper.utils.VLog;
 
 import java.lang.reflect.Method;
 import java.util.Collections;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/local/LocalActivityManager.java
Patch:
@@ -86,7 +86,7 @@ public LocalActivityRecord onActivityCreate(Activity activity) {
     }
 
     public LocalActivityRecord getActivityRecord(IBinder token) {
-        return mActivities.get(token);
+        return token == null ? null : mActivities.get(token);
     }
 
     public void onActivityResumed(Activity activity) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VActivityService.java
Patch:
@@ -235,7 +235,7 @@ private VActRedirectResult redirectTargetActivityLocked(VRedirectActRequest requ
 				// Finish : B, C, D
 				// onNewIntent : A
 				ActivityTaskRecord task = mMainStack.findTask(taskAffinity);
-				if (task != null && task.size() >= 2 && task.isInTask(targetActInfo) && !task.isOnTop(targetActInfo)) {
+				if (task != null && task.isInTask(targetActInfo) && !task.isOnTop(targetActInfo)) {
 					List<ActivityRecord> activityList = task.activityList;
 					ListIterator<ActivityRecord> iterator = activityList.listIterator();
 					while (iterator.hasNext()) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VActivityService.java
Patch:
@@ -230,9 +230,8 @@ private VActRedirectResult redirectTargetActivityLocked(VRedirectActRequest requ
 				resultFlags |= Intent.FLAG_ACTIVITY_NO_USER_ACTION;
 			}
 			if ((launchFlags & Intent.FLAG_ACTIVITY_CLEAR_TOP) != 0) {
-				resultFlags |= ~Intent.FLAG_ACTIVITY_REORDER_TO_FRONT;
 				ActivityTaskRecord task = mMainStack.findTask(taskAffinity);
-				if (task.isInTask(targetActInfo)) {
+				if (task.isInTask(targetActInfo) && !task.isOnTop(targetActInfo)) {
 					List<ActivityRecord> activityList = task.activityList;
 					// A -> B -> C -> D
 					// D -> A (FLAG_ACTIVITY_CLEAR_TOP)

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/pm/VPackageService.java
Patch:
@@ -182,7 +182,7 @@ public void deletePackageLocked(String packageName) {
 		int N = pkg.activities.size();
 		for (int i = 0; i < N; i++) {
 			PackageParser.Activity a = pkg.activities.get(i);
-			mActivities.addActivity(a, "activity");
+			mActivities.removeActivity(a, "activity");
 		}
 		N = pkg.services.size();
 		for (int i = 0; i < N; i++) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -22,7 +22,6 @@
 import com.lody.virtual.client.hook.patchs.graphics.GraphicsStatsPatch;
 import com.lody.virtual.client.hook.patchs.imms.MmsPatch;
 import com.lody.virtual.client.hook.patchs.input.InputMethodManagerPatch;
-import com.lody.virtual.client.hook.patchs.isub.SubPatch;
 import com.lody.virtual.client.hook.patchs.job.JobPatch;
 import com.lody.virtual.client.hook.patchs.location.LocationManagerPatch;
 import com.lody.virtual.client.hook.patchs.media.router.MediaRouterServicePatch;
@@ -158,7 +157,7 @@ private void injectInternal() throws Throwable {
 			}
 			if (Build.VERSION.SDK_INT >= LOLLIPOP_MR1) {
 				addPatch(new GraphicsStatsPatch());
-				addPatch(new SubPatch());
+//				addPatch(new SubPatch());
 			}
 
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetContentProvider.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
-import com.lody.virtual.client.hook.providers.ExternalProviderHook;
+import com.lody.virtual.client.hook.providers.ProviderHook;
 import com.lody.virtual.client.local.LocalContentManager;
 
 import java.lang.reflect.InvocationTargetException;
@@ -46,10 +46,10 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 				throw e.getCause();
 			}
 		}
-		ExternalProviderHook.HookFetcher fetcher = ExternalProviderHook.fetchHook(name);
+		ProviderHook.HookFetcher fetcher = ProviderHook.fetchHook(name);
 		if (fetcher != null) {
 			IContentProvider provider = holder.provider;
-			ExternalProviderHook hook = fetcher.fetch(provider);
+			ProviderHook hook = fetcher.fetch(provider);
 			holder.provider = (IContentProvider) Proxy.newProxyInstance(provider.getClass().getClassLoader(),
 					new Class[]{IContentProvider.class}, hook);
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/SettingsProviderHook.java
Patch:
@@ -14,7 +14,7 @@
  * @author Lody
  */
 
-public class SettingsProviderHook extends ExternalProviderHook {
+public class SettingsProviderHook extends ProviderHook {
 
     private static final String TAG = SettingsProviderHook.class.getSimpleName();
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/process/ProcessList.java
Patch:
@@ -15,7 +15,7 @@ public class ProcessList {
 
 	private final Map<Integer, ProcessRecord> runningProcesses = new ConcurrentHashMap<Integer, ProcessRecord>();
 
-	public ProcessRecord getRecord(int pid) {
+	public ProcessRecord findProcess(int pid) {
 		return runningProcesses.get(pid);
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/PatchManager.java
Patch:
@@ -105,8 +105,7 @@ public void injectAll() throws Throwable {
 	private void injectInternal() throws Throwable {
 		addPatch(new ActivityManagerPatch());
 		addPatch(new PackageManagerPatch());
-		addPatch(new DropBoxManagerPatch());
-		
+
 		if (VirtualCore.getCore().isVAppProcess()) {
 			// ## Fuck the MIUI Security
 			if (MIUISecurityManagerPatch.needInject()) {
@@ -115,6 +114,8 @@ private void injectInternal() throws Throwable {
 			// ## End
 			addPatch(HCallbackHook.getDefault());
 			addPatch(AppInstrumentation.getDefault());
+			
+			addPatch(new DropBoxManagerPatch());
 			addPatch(new NotificationManagerPatch());
 			addPatch(new LocationManagerPatch());
 			addPatch(new WindowManagerPatch());

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/loaders/ClassLoaderHelper.java
Patch:
@@ -3,7 +3,7 @@
 import com.lody.virtual.helper.proto.AppInfo;
 
 import java.io.File;
-import java.util.Arrays;
+import java.util.Collections;
 
 import dalvik.system.PathClassLoader;
 
@@ -19,7 +19,7 @@ public static PathClassLoader create(AppInfo appInfo) {
         } else {
             PathClassLoader classLoader = new PathClassLoader(".", appInfo.libDir, getRoot());
             try {
-                ClassLoaderInjectHelper.installDexes(classLoader, new File(appInfo.odexDir), Arrays.asList(new File(appInfo.apkPath)));
+                ClassLoaderInjectHelper.installDexes(classLoader, new File(appInfo.odexDir), Collections.singletonList(new File(appInfo.apkPath)));
             } catch (Throwable e) {
                 e.printStackTrace();
             }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/VAppService.java
Patch:
@@ -86,6 +86,9 @@ private boolean scan(String apkPath) {
 			File apkFile = new File(apkPath);
 			APKBundle bundle = new APKBundle(apkFile);
 			AppInfo appInfo = bundle.getAppInfo();
+			if (!AppFileSystem.getDefault().getAppApkFile(appInfo.packageName).exists()) {
+				appInfo.dependSystem = true;
+			}
 			addAppLocked(bundle, appInfo, true, true);
 			return true;
 		} catch (Throwable e) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/AppSandBox.java
Patch:
@@ -155,7 +155,7 @@ private static void installLocked(String procName, String pkg) {
 			if (pkgInfo.providers != null) {
 				providers = new ArrayList<>(pkgInfo.providers.length);
 				for (ProviderInfo providerInfo : pkgInfo.providers) {
-					if (TextUtils.equals(procName, providerInfo.processName)) {
+					if (providerInfo.multiprocess || TextUtils.equals(procName, providerInfo.processName)) {
 						providers.add(providerInfo);
 					}
 				}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_GetCallingPackage.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.os.IBinder;
 
-import com.lody.virtual.client.core.AppSandBox;
 import com.lody.virtual.client.hook.base.Hook;
+import com.lody.virtual.client.local.LocalActivityManager;
 
 import java.lang.reflect.Method;
 
@@ -22,7 +22,8 @@ public String getName() {
 
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
-		String pkg = AppSandBox.getLastPkg();
+		IBinder token = (IBinder) args[0];
+		String pkg = LocalActivityManager.getInstance().getPackageForToken(token);
 		if (pkg != null) {
 			return pkg;
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_BindService.java
Patch:
@@ -40,9 +40,9 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
     ServiceInfo serviceInfo = VirtualCore.getCore().resolveServiceInfo(service);
     if (serviceInfo != null) {
       String pkgName = serviceInfo.packageName;
-//      if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.L ) {
-//        service.setComponent(new ComponentName(serviceInfo.packageName, serviceInfo.name));
-//      }
+      if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.L ) {
+        service.setComponent(new ComponentName(serviceInfo.packageName, serviceInfo.name));
+      }
       if (isAppPkg(pkgName)) {
         return LocalServiceManager.getInstance().bindService(caller.asBinder(), token, service, resolvedType,
                 connection, flags);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_QueryContentProviders.java
Patch:
@@ -25,6 +25,6 @@ public String getName() {
 	public boolean beforeHook(Object who, Method method, Object... args) {
 		return false;
 	}
-	
+
 
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/bundle/PackageParserV21.java
Patch:
@@ -1,9 +1,9 @@
 package com.lody.virtual.helper.bundle;
 
-import android.content.pm.PackageParser;
-
 import java.io.File;
 
+import android.content.pm.PackageParser;
+
 /**
  * @author Lody
  *

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPermissions.java
Patch:
@@ -7,6 +7,8 @@
 /**
  * @author Lody
  *
+ *
+ *
  */
 /* package */ class Hook_GetPermissions extends Hook {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/bundle/PackageParserV21.java
Patch:
@@ -1,9 +1,9 @@
 package com.lody.virtual.helper.bundle;
 
-import java.io.File;
-
 import android.content.pm.PackageParser;
 
+import java.io.File;
+
 /**
  * @author Lody
  *

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/BinderProvider.java
Patch:
@@ -16,6 +16,7 @@
 import com.lody.virtual.service.am.VActivityService;
 import com.lody.virtual.service.am.VServiceService;
 import com.lody.virtual.service.interfaces.IServiceFetcher;
+import com.lody.virtual.service.pm.VPackageService;
 import com.lody.virtual.service.process.VProcessService;
 
 /**

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/VContentService.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.lody.virtual.helper.proto.VComponentInfo;
 import com.lody.virtual.helper.utils.XLog;
+import com.lody.virtual.service.pm.VPackageService;
 import com.lody.virtual.service.process.ProviderList;
 import com.lody.virtual.service.process.VProcessService;
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/StubInfo.java
Patch:
@@ -25,7 +25,7 @@ public void verify() {
 		}
 	/*package*/ ActivityInfo fetchStubActivityInfo(ActivityInfo targetInfo) {
 
-			boolean isTranslucent = false;
+//			boolean isTranslucent = false;
 			boolean isFloating = false;
 			try {
 				Reflect style = Reflect.on(com.android.internal.R.styleable.class);
@@ -36,14 +36,14 @@ public void verify() {
 				AttributeCache.Entry ent = AttributeCache.instance().get(targetInfo.packageName, targetInfo.theme,
 						R_Styleable_Window);
 				if (ent != null && ent.array != null) {
-					isTranslucent = ent.array.getBoolean(R_Styleable_Window_windowIsTranslucent, false);
+//					isTranslucent = ent.array.getBoolean(R_Styleable_Window_windowIsTranslucent, false);
 					isFloating = ent.array.getBoolean(R_Styleable_Window_windowIsFloating, false);
 				}
 			} catch (Throwable e) {
 				e.printStackTrace();
 			}
 
-			boolean isDialogStyle = isTranslucent || isFloating;
+			boolean isDialogStyle = isFloating;
 			if (isDialogStyle) {
 				return dialogActivityInfos.get(0);
 			} else {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/VServiceService.java
Patch:
@@ -20,7 +20,7 @@
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.utils.XLog;
 import com.lody.virtual.service.IServiceManager;
-import com.lody.virtual.service.VPackageService;
+import com.lody.virtual.service.pm.VPackageService;
 import com.lody.virtual.service.interfaces.IServiceEnvironment;
 
 import java.util.Map;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_BroadcastIntent.java
Patch:
@@ -15,6 +15,7 @@
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.utils.BitmapUtils;
+import com.lody.virtual.helper.utils.XLog;
 
 import java.lang.reflect.Method;
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/AppSandBox.java
Patch:
@@ -153,7 +153,7 @@ private static void installLocked(String procName, String pkg) {
 		try {
 			PackageInfo pkgInfo = VirtualCore.getPM().getPackageInfo(pkg, PackageManager.GET_PROVIDERS);
 			if (pkgInfo.providers != null) {
-				providers = new ArrayList<ProviderInfo>(pkgInfo.providers.length);
+				providers = new ArrayList<>(pkgInfo.providers.length);
 				for (ProviderInfo providerInfo : pkgInfo.providers) {
 					if (TextUtils.equals(procName, providerInfo.processName)) {
 						providers.add(providerInfo);
@@ -174,6 +174,7 @@ private static void installLocked(String procName, String pkg) {
 		VirtualCore.mainThread().getInstrumentation().callApplicationOnCreate(app);
 		LocalPackageManager pm = LocalPackageManager.getInstance();
 
+
 		List<ActivityInfo> receivers = pm.getReceivers(pkg, 0);
 		for (ActivityInfo receiverInfo : receivers) {
 			if (TextUtils.equals(receiverInfo.processName, procName)) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/RuntimeEnv.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.helper.compat.AppBindDataCompat;
+import com.lody.virtual.helper.compat.VMRuntimeCompat;
 import com.lody.virtual.helper.proto.AppInfo;
 import com.lody.virtual.helper.utils.Reflect;
 import com.lody.virtual.helper.utils.XLog;
@@ -46,6 +47,7 @@ public static void setCurrentProcessName(String processName, AppInfo appInfo) {
 		} catch (Throwable e) {
 			// Ignore
 		}
+		VMRuntimeCompat.registerAppInfo(appInfo.packageName, appInfo.dataDir, processName);
 		VirtualCore.getCore().notifyOnEnterAppProcessName(sCurrentProcessName);
 		AppBindDataCompat dataMirror = new AppBindDataCompat(VirtualCore.getHostBindData());
 		dataMirror.setAppInfo(appInfo.applicationInfo);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/providers/SettingsProviderHook.java
Patch:
@@ -44,7 +44,7 @@ public Uri insert(Method method, Object[] args) throws InvocationTargetException
 
     @Override
     protected void processArgs(Method method, Object... args) {
-        if (args.length > 0 && args[0] instanceof String) {
+        if (args != null && args.length > 0 && args[0] instanceof String) {
             String pkg = (String) args[0];
             if (VirtualCore.getCore().isAppInstalled(pkg)) {
                 args[0] = VirtualCore.getCore().getHostPkg();

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/compat/ActivityThreadCompat.java
Patch:
@@ -22,7 +22,6 @@
 public class ActivityThreadCompat {
 
 	public static LoadedApk getPackageInfoNoCheck(ApplicationInfo appInfo) {
-
 		ActivityThread mainThread = VirtualCore.mainThread();
 		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
 			try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/proto/AppInfo.java
Patch:
@@ -88,7 +88,7 @@ public synchronized LoadedApk getLoadedApk() {
 
 	public boolean isInstalled() {
 		try {
-			return VirtualCore.getCore().getUnHookPackageManager().getPackageInfo(packageName, 0) != null;
+			return VirtualCore.getCore().getUnHookPackageManager().getApplicationInfo(packageName, 0) != null;
 		} catch (PackageManager.NameNotFoundException e) {
 			// Ignore
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/Hook_CancelNotificationWithTag.java
Patch:
@@ -1,10 +1,10 @@
 package com.lody.virtual.client.hook.patchs.notification;
 
-import java.lang.reflect.Method;
-
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
 
+import java.lang.reflect.Method;
+
 /**
  * @author Lody
  *
@@ -29,7 +29,7 @@ public String getName() {
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		String pkgName = (String) args[0];
 		if (!VirtualCore.getCore().isHostPackageName(pkgName)) {
-			return 0;
+            args[0] = VirtualCore.getCore().getContext().getPackageName();
 		}
 		return method.invoke(who, args);
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/NotificationActionCompat.java
Patch:
@@ -235,7 +235,7 @@ public void setNotificationIconImageView(Context context, RemoteViews remoteView
                 int id = Reflect.on("com.android.internal.R$id").get("icon");
                 if (remoteViews != null) {
                     remoteViews.setImageViewBitmap(id, bitmap);
-                    XLog.i(TAG, "set icon ok:" + bitmap);
+//                    XLog.i(TAG, "set icon ok:" + bitmap);
                 }
             }
         } catch (Exception e) {
@@ -252,7 +252,7 @@ public void builderNotificationIcon(Notification notification, final int iconId,
                 Bitmap bitmap = drawableToBitMap(resources.getDrawable(iconId));
                 if (notification.contentView != null) {
                     notification.contentView.setImageViewBitmap(id, bitmap);
-                    XLog.i(TAG, "set icon ok:" + bitmap);
+//                    XLog.i(TAG, "set icon ok:" + bitmap);
                     if (Build.VERSION.SDK_INT >= 19 && notification.extras != null) {
                         notification.extras.putBoolean("android.rebuild.contentView", false);
                     }
@@ -261,7 +261,7 @@ public void builderNotificationIcon(Notification notification, final int iconId,
                     if (Build.VERSION.SDK_INT >= 19 && notification.extras != null) {
                         notification.extras.putBoolean("android.rebuild.contentView", false);
                     }
-                    XLog.i(TAG, "set icon ok");
+//                    XLog.i(TAG, "set icon ok");
                 }
             } catch (Exception e) {
                 XLog.e(TAG, "icon", e);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/NotificationLayoutCompat.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Created by 247321453 on 2016/7/17.
  */
-public class NotificationLayoutCompat {
+class NotificationLayoutCompat {
     private final static String TAG = NotificationLayoutCompat.class.getSimpleName();
     public int getNotificationWidth(Context context, int width, int height, int padding) {
 //TODO 适配各种rom

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/NotificationPendIntent.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 import java.util.Map;
 
-public class NotificationPendIntent {
+class NotificationPendIntent {
     View my;
     View view2;
     Map<Integer, PendingIntent> clickIntents;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPackagesForUid.java
Patch:
@@ -39,7 +39,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 		try {
 			List<String> pkgs = LocalProcessManager.getProcessPkgList(Process.myPid());
 			pluginPkgs.addAll(pkgs);
-			pluginPkgs.add("com.android.vending");
 		} catch (Exception e) {
 			e.printStackTrace();
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/AccountManagerPatch.java
Patch:
@@ -43,6 +43,7 @@
 		Hook_ConfirmCredentialsAsUser.class,
 		Hook_UpdateCredentials.class,
 		Hook_RemoveAccountExplicitly.class,
+		Hook_GetAuthTokenLabel.class,
 
 })
 public class AccountManagerPatch extends PatchObject<IAccountManager, HookAccountBinder> {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/account/RegisteredServicesCache.java
Patch:
@@ -142,9 +142,7 @@ public void setListener(RegisteredServicesCacheListener<V> listener, Handler han
     }
 
     private void notifyListener(final V type, final boolean removed) {
-        if (Log.isLoggable(TAG, Log.VERBOSE)) {
-            Log.d(TAG, "notifyListener: " + type + " is " + (removed ? "removed" : "added"));
-        }
+        Log.d(TAG, "notifyListener: " + type + " is " + (removed ? "removed" : "added"));
         RegisteredServicesCacheListener<V> listener;
         Handler handler; 
         synchronized (this) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/NotificationHandler.java
Patch:
@@ -325,7 +325,7 @@ private Notification replaceNotification(Context context, String packageName, No
                     createView(context,remoteViews,isBig, false),
                     createView(pluginContext, contentView,isBig,false),
                     clickIntents)
-                    .set();
+                    .set(remoteViews);
         }
         //icon
         Notification notification1;
@@ -431,7 +431,7 @@ private View createView(final Context context, RemoteViews remoteViews, boolean
         return mCache;
     }
 
-    private Bitmap createBitmap(final ContextWrapperCompat context, RemoteViews remoteViews, boolean isBig, boolean systemId) {
+    private Bitmap createBitmap(final Context context, RemoteViews remoteViews, boolean isBig, boolean systemId) {
         View mCache = createView(context, remoteViews, isBig, systemId);
         mCache.setDrawingCacheEnabled(true);
         mCache.buildDrawingCache();

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -46,7 +46,9 @@
 		Hook_PublishContentProviders.class,
 		Hook_GetCurrentUser.class,
 		Hook_UnstableProviderDied.class,
+		Hook_GetCallingActivity.class,
 })
+
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {
 
 	public static IActivityManager getAMN() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityManagerPatch.java
Patch:
@@ -45,6 +45,7 @@
 		Hook_CheckPermission.class,
 		Hook_PublishContentProviders.class,
 		Hook_GetCurrentUser.class,
+		Hook_UnstableProviderDied.class,
 })
 public class ActivityManagerPatch extends PatchObject<IActivityManager, HookObject<IActivityManager>> {
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -170,7 +170,7 @@ public void startup(Context context) throws Throwable {
 			patchManager.injectAll();
 			patchManager.checkEnv();
 			RuntimeEnv.init();
-			PatchManager.getInstance().fixContext(context);
+			PatchManager.fixContext(context);
 			isStartUp = true;
 		}
 	}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/delegate/AppInstrumentation.java
Patch:
@@ -68,7 +68,7 @@ public boolean isEnvBad() {
 
 	@Override
 	public void callActivityOnCreate(Activity activity, Bundle icicle) {
-		PatchManager.getInstance().fixContext(activity);
+		PatchManager.fixContext(activity);
 		String pkg = activity.getPackageName();
 		boolean isApp = VirtualCore.getCore().isAppInstalled(pkg);
 		if (isApp) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/AppSandBox.java
Patch:
@@ -43,7 +43,7 @@
  */
 public class AppSandBox {
 
-	private static final String TAG = "XAppSandBox";
+	private static final String TAG = AppSandBox.class.getSimpleName();
 	private static HashSet<String> installedApps = new HashSet<String>();
 	private static Map<String, Application> applications = new HashMap<String, Application>();
 
@@ -58,6 +58,7 @@ public static void install(String procName, String pkg) {
 		if (installedApps.contains(pkg)) {
 			return;
 		}
+		XLog.d(TAG, "Installing %s.", pkg);
 		LocalProcessManager.onAppProcessCreate(VClientImpl.getClient().asBinder());
 		AppInfo appInfo = VirtualCore.getCore().findApp(pkg);
 		if (appInfo == null) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/core/VirtualCore.java
Patch:
@@ -258,6 +258,7 @@ public InstallResult installApp(String apkPath, int flags) {
 		}
 	}
 
+
 	public boolean isAppInstalled(String pkg) {
 		try {
 			return getService().isAppInstalled(pkg);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_CheckPermission.java
Patch:
@@ -36,6 +36,9 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
         if (Manifest.permission.ACCOUNT_MANAGER.equals(permission)) {
             return PackageManager.PERMISSION_GRANTED;
         }
+        if ("com.google.android.providers.settings.permission.WRITE_GSETTINGS".equals(permission)) {
+            return PackageManager.PERMISSION_GRANTED;
+        }
         return method.invoke(who, args);
     }
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/NotificationManagerPatch.java
Patch:
@@ -19,7 +19,8 @@
  * @see Toast
  */
 @Patch({Hook_EnqueueToast.class, Hook_CancelToast.class, Hook_CancelAllNotifications.class,
-		Hook_EnqueueNotificationWithTag.class, Hook_CancelNotificationWithTag.class,Hook_EnqueueNotificationWithTagPriority.class, Hook_EnqueueNotification.class})
+		Hook_EnqueueNotificationWithTag.class, Hook_CancelNotificationWithTag.class,
+		Hook_EnqueueNotificationWithTagPriority.class, Hook_EnqueueNotification.class})
 public class NotificationManagerPatch extends PatchObject<INotificationManager, HookObject<INotificationManager>> {
 
 	public static INotificationManager getNM() {

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/ExtraConstants.java
Patch:
@@ -30,4 +30,7 @@ public class ExtraConstants {
 
 	public static final String TYPE_INTENT_SENDER = "V.Type.IntentSender";
 	public static final java.lang.String EXTRA_PROCESS_NAME = "V.Extra.ProcessName";
+	public static final String EXTRA_WHAT = "V。Extra.What";
+	public static final int WHAT_PENDING_INTENT = 5;
+
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/notification/compat/NotificationLayoutCompat.java
Patch:
@@ -15,7 +15,7 @@
  * Created by 247321453 on 2016/7/17.
  */
 public class NotificationLayoutCompat {
-
+    private final static String TAG = NotificationLayoutCompat.class.getSimpleName();
     public int getNotificationWidth(Context context, int width, int height, int padding) {
 //TODO 适配各种rom
         int w = getWidth(width, padding);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/account/VAccountService.java
Patch:
@@ -785,7 +785,7 @@ private void setPasswordInternal(Account account, String password) {
     private void sendAccountsChangedBroadcast() {
         Log.i(TAG, "the accounts changed, sending broadcast of "
                 + ACCOUNTS_CHANGED_INTENT.getAction());
-        mContext.sendBroadcast(ACCOUNTS_CHANGED_INTENT);
+//        mContext.sendBroadcast(ACCOUNTS_CHANGED_INTENT);
     }
 
     public void clearPassword(Account account) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/PackageManagerPatch.java
Patch:
@@ -46,7 +46,8 @@
 		Hook_ClearPackagePreferredActivities.class, Hook_GetPreferredActivities.class,
 		Hook_ClearPackagePersistentPreferredActivities.class,
 
-		Hook_DeletePackage.class, Hook_GetPackageInstaller.class
+		Hook_DeletePackage.class, Hook_GetPackageInstaller.class, Hook_AddOnPermissionsChangeListener.class,
+		Hook_AddOnPermissionsChangeListener.class, Hook_RemoveOnPermissionsChangeListener.class,
 
 })
 public final class PackageManagerPatch extends PatchObject<IPackageManager, HookObject<IPackageManager>> {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/user/Hook_GetUserInfo.java
Patch:
@@ -1,7 +1,6 @@
 package com.lody.virtual.client.hook.patchs.user;
 
 import com.lody.virtual.client.hook.base.Hook;
-import com.lody.virtual.client.hook.utils.HookUtils;
 
 import java.lang.reflect.Method;
 
@@ -26,7 +25,6 @@ public String getName() {
 
 	@Override
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
-		HookUtils.replaceLastAppPkg(args);
-		return method.invoke(who, args);
+		return null;
 	}
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/process/ProcessRecord.java
Patch:
@@ -45,7 +45,7 @@ final class ProcessRecord {
 	/**
 	 * 运行在该进程的所有APK的包名
 	 */
-	Set<String> runningAppPkgs = new HashSet<String>();
+	final Set<String> runningAppPkgs = new HashSet<String>();
 
 	public synchronized void updateStubProc(int pid) {
 		try {

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/process/VProcessService.java
Patch:
@@ -220,7 +220,7 @@ private void tryKillProcess(int pid) {
 	 */
 	private synchronized void removeProcessRecordLocked(int pid) {
 		ProcessRecord r = mProcessList.getRecord(pid);
-		if (r.runningAppPkgs != null) {
+		if (r != null) {
 			for (String pkg : r.runningAppPkgs) {
 				RunningAppRecord app = mRunningAppList.getRecord(pkg);
 				if (app == null) {

File: VirtualApp/app/src/main/java/io/virtualapp/VApp.java
Patch:
@@ -34,7 +34,6 @@ public void onCreate() {
         gDefault = this;
         super.onCreate();
 //        BlockCanary.install(this, new AppBlockCanaryContext()).start();
-        VirtualCore.getCore().handleApplication(this);
         if (VirtualCore.getCore().isMainProcess()) {
             Once.initialise(this);
         }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/env/ServiceEnv.java
Patch:
@@ -11,9 +11,11 @@
 import android.os.IBinder;
 import android.os.RemoteException;
 
+import com.lody.virtual.client.core.AppSandBox;
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.modifiers.ContextModifier;
 import com.lody.virtual.helper.proto.AppInfo;
+import com.lody.virtual.helper.utils.ComponentUtils;
 
 import java.util.HashSet;
 import java.util.Map;
@@ -195,6 +197,7 @@ record = createServiceRecord(appInfo, serviceInfo);
 	}
 
 	private RunningServiceRecord createServiceRecord(AppInfo appInfo, ServiceInfo serviceInfo) throws Throwable {
+		AppSandBox.install(ComponentUtils.getProcessName(serviceInfo), serviceInfo.packageName);
 		RunningServiceRecord record = new RunningServiceRecord();
 		record.appInfo = appInfo;
 		record.serviceInfo = serviceInfo;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/ActivityUtils.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.local.LocalActivityManager;
-import com.lody.virtual.client.local.LocalProcessManager;
 import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.proto.VActRedirectResult;
 import com.lody.virtual.helper.proto.VRedirectActRequest;
@@ -39,7 +38,6 @@ public static boolean replaceIntent(IBinder resultTo, Object[] args, int intentI
 			// Target App's ProcessName
 			String plugProcName = ComponentUtils.getProcessName(targetActInfo);
 			// Mapping
-			LocalProcessManager.mapProcessName(selectStubActInfo.processName, plugProcName);
 			Intent stubIntent = new Intent();
 			stubIntent.setClassName(selectStubActInfo.packageName, selectStubActInfo.name);
 			stubIntent.setFlags(result.flags);

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/am/Hook_StartActivity.java
Patch:
@@ -8,7 +8,6 @@
 import com.lody.virtual.client.core.VirtualCore;
 import com.lody.virtual.client.hook.base.Hook;
 import com.lody.virtual.client.local.LocalActivityManager;
-import com.lody.virtual.client.local.LocalProcessManager;
 import com.lody.virtual.helper.ExtraConstants;
 import com.lody.virtual.helper.proto.VActRedirectResult;
 import com.lody.virtual.helper.proto.VRedirectActRequest;
@@ -75,7 +74,6 @@ public Object onHook(Object who, Method method, Object... args) throws Throwable
 			// Target App's ProcessName
 			String plugProcName = ComponentUtils.getProcessName(targetActInfo);
 			// Mapping
-			LocalProcessManager.mapProcessName(selectStubActInfo.processName, plugProcName);
 			Intent stubIntent = new Intent();
 			stubIntent.setClassName(selectStubActInfo.packageName, selectStubActInfo.name);
 			stubIntent.setFlags(result.flags);

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/ExtraConstants.java
Patch:
@@ -29,4 +29,5 @@ public class ExtraConstants {
 	public static final String EXTRA_MESSENGER = "V.Extra.Messenger";
 
 	public static final String TYPE_INTENT_SENDER = "V.Type.IntentSender";
+	public static final java.lang.String EXTRA_PROCESS_NAME = "V.Extra.ProcessName";
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/helper/MethodConstants.java
Patch:
@@ -10,4 +10,5 @@ public class MethodConstants {
 
     public static final String INIT_SERVICE = "VA|_initService_";
 
+    public static final String GET_SERVICE_RUNTIME = "VA|_getServiceRuntime_";
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/BinderProvider.java
Patch:
@@ -35,7 +35,7 @@ public boolean onCreate() {
 		}
 		AppFileSystem.getDefault();
 		VAppService.getService().onCreate();
-		addService(ServiceManagerNative.PLUGIN_MANAGER, VAppService.getService());
+		addService(ServiceManagerNative.APP_MANAGER, VAppService.getService());
 		addService(ServiceManagerNative.PROCESS_MANAGER, VProcessService.getService());
 		VPackageService.getService().onCreate(context);
 		addService(ServiceManagerNative.PACKAGE_MANAGER, VPackageService.getService());

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/StubInfo.java
Patch:
@@ -10,13 +10,13 @@
 public class StubInfo {
 	public String processName;
 	public List<ActivityInfo> standardActivityInfos = new ArrayList<ActivityInfo>(1);
-	public List<ProviderInfo> providerInfos = new ArrayList<ProviderInfo>(1);
+	public ProviderInfo providerInfo;
 
 		public void verify() {
 			if (standardActivityInfos.isEmpty()) {
 				throw new IllegalStateException("Unable to find any StubActivity in " + processName);
 			}
-			if (providerInfos.isEmpty()) {
+			if (providerInfo == null) {
 				throw new IllegalStateException("Unable to find any StubProvider in " + processName);
 			}
 		}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_AddAccount.java
Patch:
@@ -33,7 +33,6 @@ public String getName() {
 
     @Override
     public Object onHook(final Object who, Method method, Object... args) throws Throwable {
-
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_AddAccountExplicitly.java
Patch:
@@ -30,7 +30,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_ClearPassword.java
Patch:
@@ -29,7 +29,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_GetAccountsByTypeForPackage.java
Patch:
@@ -1,7 +1,6 @@
 package com.lody.virtual.client.hook.patchs.account;
 
 import com.lody.virtual.client.hook.base.Hook;
-import com.lody.virtual.client.hook.utils.HookUtils;
 
 import java.lang.reflect.Method;
 
@@ -26,8 +25,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        HookUtils.replaceFirstAppPkg(args);
-        HookUtils.replaceLastAppPkg(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_GetAccountsForPackage.java
Patch:
@@ -1,7 +1,6 @@
 package com.lody.virtual.client.hook.patchs.account;
 
 import com.lody.virtual.client.hook.base.Hook;
-import com.lody.virtual.client.hook.utils.HookUtils;
 
 import java.lang.reflect.Method;
 
@@ -29,7 +28,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        HookUtils.replaceFirstAppPkg(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_GetAuthToken.java
Patch:
@@ -31,7 +31,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_GetPassword.java
Patch:
@@ -25,7 +25,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_GetPreviousName.java
Patch:
@@ -29,7 +29,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_GetUserData.java
Patch:
@@ -29,7 +29,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_HasFeatures.java
Patch:
@@ -25,7 +25,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_RemoveAccount.java
Patch:
@@ -30,7 +30,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/account/Hook_SetPassword.java
Patch:
@@ -30,7 +30,6 @@ public String getName() {
 
     @Override
     public Object onHook(Object who, Method method, Object... args) throws Throwable {
-        AccountUtils.replaceAccount(args);
         return method.invoke(who, args);
     }
 }

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/BinderProvider.java
Patch:
@@ -12,7 +12,6 @@
 import com.lody.virtual.helper.MethodConstants;
 import com.lody.virtual.helper.compat.BundleCompat;
 import com.lody.virtual.helper.component.BaseContentProvider;
-import com.lody.virtual.service.account.VAccountService;
 import com.lody.virtual.service.am.VActivityService;
 import com.lody.virtual.service.am.VServiceService;
 import com.lody.virtual.service.interfaces.IServiceFetcher;
@@ -48,8 +47,8 @@ public boolean onCreate() {
 		addService(ServiceManagerNative.ACTIVITY_MANAGER, VActivityService.getService());
 		addService(ServiceManagerNative.SERVICE_MANAGER, VServiceService.getService());
 		addService(ServiceManagerNative.CONTENT_MANAGER, VContentService.getService());
-		VAccountService.systemReady(context);
-		addService(ServiceManagerNative.ACCOUNT_MANAGER, VAccountService.getService());
+//		VAccountService.systemReady(context);
+//		addService(ServiceManagerNative.ACCOUNT_MANAGER, VAccountService.getService());
 		return true;
 	}
 

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/am/ActivityTaskRecord.java
Patch:
@@ -21,7 +21,7 @@ public class ActivityTaskRecord {
 	ComponentName baseActivity;
 
 	public AppTaskInfo toTaskInfo() {
-		ActivityRecord top = activityList.getLast();
+		ActivityRecord top = activityList.isEmpty() ? null : activityList.getLast();
 		ComponentName topActivity = null;
 		if (top != null) {
 			topActivity = new ComponentName(top.activityInfo.packageName, top.activityInfo.name);

File: VirtualApp/lib/src/main/java/com/lody/virtual/service/VAppService.java
Patch:
@@ -86,11 +86,11 @@ public InstallResult installApp(String apkPath, int flags) {
 							if (nowPkgInfo.versionCode < newPkgInfo.versionCode) {
 								result.isUpdate = true;
 								updateAppLocked(bundle, appInfo);
-								break;
 							} else {
 								throw new IllegalStateException("Current APK Version is " + nowPkgInfo.versionCode
 										+ ", but New APK Version is " + newPkgInfo.versionCode);
 							}
+							break;
 						}
 						case InstallStrategy.TERMINATE_IF_EXIST : {
 							throw new IllegalStateException("This apk have installed, should not be install again.");
@@ -131,6 +131,7 @@ private void updateAppLocked(APKBundle parser, AppInfo appInfo) {
 		String pkg = appInfo.packageName;
 		removeAppLocked(pkg);
 		addAppLocked(parser, appInfo);
+		VProcessService.getService().killAppByPkg(appInfo.packageName);
 	}
 
 	private void removeAppLocked(String pkg) {

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/stub/StubContentProvider.java
Patch:
@@ -36,6 +36,7 @@ public Bundle call(String method, String arg, Bundle extras) {
 				while (AppSandBox.isInstalling()) {
 					Thread.sleep(50);
 				}
+				Thread.sleep(50);
 			} catch (InterruptedException e) {
 				e.printStackTrace();
 			}

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetApplicationInfo.java
Patch:
@@ -31,6 +31,9 @@ public String getName() {
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		String pkg = (String) args[0];
 		int flags = (int) args[1];
+		if (getHostPkg().equals(pkg)) {
+			return method.invoke(who, args);
+		}
 		if (BlackList.isBlackPkg(pkg)) {
 			// 隔离Gms
 			return null;

File: VirtualApp/lib/src/main/java/com/lody/virtual/client/hook/patchs/pm/Hook_GetPackageInfo.java
Patch:
@@ -39,6 +39,9 @@ public String getName() {
 	public Object onHook(Object who, Method method, Object... args) throws Throwable {
 		String pkg = (String) args[0];
 		int flags = (int) args[1];
+		if (getHostPkg().equals(pkg)) {
+			return method.invoke(who, args);
+		}
 		if (BlackList.isBlackPkg(pkg)) {
 			// 隔离Gms
 			return null;

File: VirtualApp/lib/src/com/lody/virtual/client/env/Constants.java
Patch:
@@ -30,5 +30,6 @@ public class Constants {
 	public static final String ACTION_UNINSTALL_SHORTCUT = "com.android.launcher.action.UNINSTALL_SHORTCUT";
 	public static String SHORTCUT_PROXY_ACTIVITY_NAME = ShortcutHandleActivity.class.getName();
 
-	public static boolean USE_DIY_SERVICE_ENV = true;
+	public static final String GMS_PKG = "com.google.android.gms";
+	public static final String GOOGLE_PLAY_STORE_PKG = "com.android.vending";
 }

