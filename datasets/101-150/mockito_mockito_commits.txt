File: mockito-core/src/main/java/org/mockito/internal/PremainAttachAccess.java
Patch:
@@ -46,11 +46,11 @@ public static Instrumentation getInstrumentation() {
                             Class.forName("java.lang.management.ManagementFactory")
                                     .getMethod("getRuntimeMXBean")
                                     .invoke(null);
+
                     @SuppressWarnings("unchecked")
                     List<String> arguments =
                             (List<String>)
-                                    runtimeMXBean
-                                            .getClass()
+                                    Class.forName("java.lang.management.RuntimeMXBean")
                                             .getMethod("getInputArguments")
                                             .invoke(runtimeMXBean);
                     dynamicAgentLoading =

File: mockito-core/src/test/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMakerTest.java
Patch:
@@ -495,7 +495,7 @@ public void test_clear_mock_clears_handler() {
         mockMaker.clearMock(proxy);
 
         // then
-        assertThat(mockMaker.getHandler(proxy)).isNull();
+        assertThat(mockMaker.getHandler(proxy)).isEqualTo(DisabledMockHandler.HANDLER);
     }
 
     @Test

File: src/main/java/org/mockito/plugins/InlineMockMaker.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.plugins;
 
 import org.mockito.MockitoFramework;
+import org.mockito.exceptions.misusing.DisabledMockException;
 
 /**
  * Extension to {@link MockMaker} for mock makers that changes inline method implementations
@@ -37,8 +38,8 @@ public interface InlineMockMaker extends MockMaker {
     void clearMock(Object mock);
 
     /**
-     * Cleans up internal state for all existing mocks. You may assume there won't be any interaction to mocks created
-     * previously after this is called.
+     * Cleans up internal state for all existing mocks. Attempts to interact with mocks after this
+     * is called will throw {@link DisabledMockException}
      *
      * @since 2.25.0
      */

File: src/main/java/org/mockito/ArgumentCaptor.java
Patch:
@@ -88,7 +88,7 @@ public T capture() {
     /**
      * Returns the captured value of the argument. When capturing varargs use {@link #getAllValues()}.
      * <p>
-     * If verified method was called multiple times then this method it returns the latest captured value.
+     * If verified method was called multiple times then this method returns the latest captured value.
      * <p>
      * See examples in javadoc for {@link ArgumentCaptor} class.
      *

File: src/main/java/org/mockito/InjectMocks.java
Patch:
@@ -29,7 +29,7 @@
  *     <li><strong>Constructor injection</strong>; the biggest constructor is chosen,
  *     then arguments are resolved with mocks declared in the test only. If the object is successfully created
  *     with the constructor, then <strong>Mockito won't try the other strategies</strong>. Mockito has decided to no
- *     corrupt an object if it has a parametered constructor.
+ *     corrupt an object if it has a parameterized constructor.
  *     <p><u>Note:</u> If arguments can not be found, then null is passed.
  *     If non-mockable types are wanted, then constructor injection won't happen.
  *     In these cases, you will have to satisfy dependencies yourself.</p></li>

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -30,7 +30,9 @@ public void verify(VerificationData data) {
         }
         if (invocations.size() != 1 && !chunk.isEmpty()) {
             Invocation unverified = findFirstUnverified(invocations);
-            throw noMoreInteractionsWanted(unverified, (List) invocations);
+            if (unverified != null) {
+                throw noMoreInteractionsWanted(unverified, (List) invocations);
+            }
         }
         if (invocations.size() != 1 || chunk.isEmpty()) {
             throw wantedButNotInvoked(target);

File: src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java
Patch:
@@ -42,8 +42,8 @@ public List<LocalizedMatcher> pullLocalizedMatchers() {
     public void reportAnd() {
         assertStateFor("And(?)", TWO_SUB_MATCHERS);
 
-        ArgumentMatcher<?> m1 = popMatcher();
         ArgumentMatcher<?> m2 = popMatcher();
+        ArgumentMatcher<?> m1 = popMatcher();
 
         reportMatcher(new And(m1, m2));
     }
@@ -52,8 +52,8 @@ public void reportAnd() {
     public void reportOr() {
         assertStateFor("Or(?)", TWO_SUB_MATCHERS);
 
-        ArgumentMatcher<?> m1 = popMatcher();
         ArgumentMatcher<?> m2 = popMatcher();
+        ArgumentMatcher<?> m1 = popMatcher();
 
         reportMatcher(new Or(m1, m2));
     }

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -25,14 +25,16 @@ public void verify(VerificationData data) {
         MatchableInvocation target = data.getTarget();
         List<Invocation> invocations = data.getAllInvocations();
         List<Invocation> chunk = findInvocations(invocations, target);
+        if (!chunk.isEmpty()) {
+            markVerified(chunk.get(0), target);
+        }
         if (invocations.size() != 1 && !chunk.isEmpty()) {
             Invocation unverified = findFirstUnverified(invocations);
             throw noMoreInteractionsWanted(unverified, (List) invocations);
         }
         if (invocations.size() != 1 || chunk.isEmpty()) {
             throw wantedButNotInvoked(target);
         }
-        markVerified(chunk.get(0), target);
     }
 
     @Override

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -123,7 +123,7 @@ public static MockitoException missingMethodInvocation() {
                         "    when(mock.getArticles()).thenReturn(articles);",
                         "",
                         "Also, this error might show up because:",
-                        "1. you stub either of: final/private/equals()/hashCode() methods.",
+                        "1. you stub either of: final/private/native/equals()/hashCode() methods.",
                         "   Those methods *cannot* be stubbed/verified.",
                         "   " + NON_PUBLIC_PARENT,
                         "2. inside when() you don't call method on mock but on some other object.",

File: src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
Patch:
@@ -108,7 +108,7 @@ public void shouldReportMissingMethodInvocationWhenStubbing() {
                         "For example:",
                         "    when(mock.getArticles()).thenReturn(articles);",
                         "Also, this error might show up because:",
-                        "1. you stub either of: final/private/equals()/hashCode() methods.",
+                        "1. you stub either of: final/private/native/equals()/hashCode() methods.",
                         "   Those methods *cannot* be stubbed/verified.",
                         "   Mocking methods declared on non-public parent classes is not supported.",
                         "2. inside when() you don't call method on mock but on some other object.");

File: src/main/java/org/mockito/internal/util/reflection/GenericMaster.java
Patch:
@@ -27,7 +27,7 @@ public Class<?> getGenericType(Field field) {
      * @param parameter the parameter to inspect
      */
     public Class<?> getGenericType(Parameter parameter) {
-        return getaClass(parameter.getType());
+        return getaClass(parameter.getParameterizedType());
     }
 
     private Class<?> getaClass(Type generic) {

File: src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -49,9 +49,8 @@ class PluginRegistry {
             new PluginLoader(pluginSwitch).loadPlugins(MockResolver.class);
 
     private final DoNotMockEnforcerWithType doNotMockEnforcer =
-            (DoNotMockEnforcerWithType)
-                    (new PluginLoader(pluginSwitch)
-                            .loadPlugin(DoNotMockEnforcerWithType.class, DoNotMockEnforcer.class));
+            new PluginLoader(pluginSwitch)
+                    .loadPlugin(DoNotMockEnforcerWithType.class, DoNotMockEnforcer.class);
 
     PluginRegistry() {
         instantiatorProvider =

File: src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.MockMakers;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.plugins.AnnotationEngine;
-import org.mockito.plugins.DoNotMockEnforcer;
+import org.mockito.plugins.DoNotMockEnforcerWithType;
 import org.mockito.plugins.InstantiatorProvider2;
 import org.mockito.plugins.MemberAccessor;
 import org.mockito.plugins.MockMaker;
@@ -62,7 +62,7 @@ public class DefaultMockitoPlugins implements MockitoPlugins {
         DEFAULT_PLUGINS.put(
                 REFLECTION_ALIAS, "org.mockito.internal.util.reflection.ReflectionMemberAccessor");
         DEFAULT_PLUGINS.put(
-                DoNotMockEnforcer.class.getName(),
+                DoNotMockEnforcerWithType.class.getName(),
                 "org.mockito.internal.configuration.DefaultDoNotMockEnforcer");
 
         MOCK_MAKER_ALIASES.add(INLINE_ALIAS);

File: src/main/java/org/mockito/internal/util/MockNameImpl.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.Serializable;
 
 import org.mockito.mock.MockName;
+import org.mockito.mock.MockType;
 
 public class MockNameImpl implements MockName, Serializable {
 
@@ -15,9 +16,9 @@ public class MockNameImpl implements MockName, Serializable {
     private boolean defaultName;
 
     @SuppressWarnings("unchecked")
-    public MockNameImpl(String mockName, Class<?> type, boolean mockedStatic) {
+    public MockNameImpl(String mockName, Class<?> type, MockType mockType) {
         if (mockName == null) {
-            this.mockName = mockedStatic ? toClassName(type) : toInstanceName(type);
+            this.mockName = mockType == MockType.STATIC ? toClassName(type) : toInstanceName(type);
             this.defaultName = true;
         } else {
             this.mockName = mockName;

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMaker.java
Patch:
@@ -207,9 +207,7 @@ class InlineDelegateByteBuddyMockMaker
     InlineDelegateByteBuddyMockMaker() {
         if (INITIALIZATION_ERROR != null) {
             String detail;
-            if (System.getProperty("java.specification.vendor", "")
-                    .toLowerCase()
-                    .contains("android")) {
+            if (PlatformUtils.isAndroidPlatform() || PlatformUtils.isProbablyTermuxEnvironment()) {
                 detail =
                         "It appears as if you are trying to run this mock maker on Android which does not support the instrumentation API.";
             } else {

File: src/main/java/org/mockito/Captor.java
Patch:
@@ -46,6 +46,6 @@
  * @since 1.8.3
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.PARAMETER})
 @Documented
 public @interface Captor {}

File: src/main/java/org/mockito/internal/util/MockUtil.java
Patch:
@@ -36,7 +36,7 @@ public class MockUtil {
 
     private MockUtil() {}
 
-    private static MockMaker getMockMaker(String mockMaker) {
+    public static MockMaker getMockMaker(String mockMaker) {
         if (mockMaker == null) {
             return defaultMockMaker;
         }

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -749,7 +749,7 @@
  *
  * <h3 id="17">17. <a class="meaningful_link" href="#resetting_mocks" name="resetting_mocks">Resetting mocks</a> (Since 1.8.0)</h3>
  *
- * Smart Mockito users hardly use this feature because they know it could be a sign of poor tests.
+ * Using this method could be an indication of poor testing.
  * Normally, you don't need to reset your mocks, just create new mocks for each test method.
  * <p>
  * Instead of <code>reset()</code> please consider writing simple, small and focused test methods over lengthy, over-specified tests.

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
Patch:
@@ -16,8 +16,7 @@
  * ByteBuddy MockMaker.
  *
  * This class will serve as the programmatic entry point to all mockito internal MockMakers.
- * Currently the default and only mock maker is the subclassing engine, but with enough feedback we can later
- * promote the inlining engine for features like final class/methods mocks.
+ * Currently the default mock maker is the inlining engine.
  *
  * The programmatic API could look like {@code mock(Final.class, withSettings().finalClasses())}.
  */

File: src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java
Patch:
@@ -25,7 +25,7 @@ void setAnswers(List<Answer<?>> answers, Strictness stubbingStrictness) {
     }
 
     boolean isSet() {
-        return answers.isEmpty();
+        return answers.size() > 0;
     }
 
     void clear() {

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -110,7 +110,7 @@ public void setAnswersForStubbing(List<Answer<?>> answers, Strictness strictness
     }
 
     public boolean hasAnswersForStubbing() {
-        return !doAnswerStyleStubbing.isSet();
+        return doAnswerStyleStubbing.isSet();
     }
 
     public boolean hasInvocationForPotentialStubbing() {

File: src/test/java/org/mockito/exceptions/base/TraceBuilder.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions.base;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
@@ -20,7 +22,7 @@ public Throwable toThrowable() {
     }
 
     private List<StackTraceElement> toTraceList() {
-        assert methods.length == 0 || classes.length == 0;
+        assertThat(methods.length == 0 || classes.length == 0).isTrue();
 
         List<StackTraceElement> trace = new LinkedList<StackTraceElement>();
         for (String method : methods) {

File: src/main/java/org/mockito/internal/creation/settings/CreationSettings.java
Patch:
@@ -26,7 +26,7 @@ public class CreationSettings<T> implements MockCreationSettings<T>, Serializabl
     private static final long serialVersionUID = -6789800638070123629L;
 
     protected Class<T> typeToMock;
-    protected Type genericTypeToMock;
+    protected transient Type genericTypeToMock;
     protected Set<Class<?>> extraInterfaces = new LinkedHashSet<>();
     protected String name;
     protected Object spiedInstance;

File: src/main/java/org/mockito/MockMakers.java
Patch:
@@ -23,12 +23,14 @@ public final class MockMakers {
      * @see <a href="Mockito.html#39">Mocking final types, enums and final methods</a>
      */
     public static final String INLINE = "mock-maker-inline";
+
     /**
      * Proxy mock maker which avoids code generation, but can only mock interfaces.
      *
      * @see <a href="Mockito.html#50">Avoiding code generation when restricting mocks to interfaces</a>
      */
     public static final String PROXY = "mock-maker-proxy";
+
     /**
      * Subclass mock maker which mocks types by creating subclasses.
      * This is the first built-in mock maker which has been provided by Mockito.

File: src/main/java/org/mockito/internal/util/StringUtil.java
Patch:
@@ -15,6 +15,7 @@ public class StringUtil {
     private static final Pattern CAPS = Pattern.compile("([A-Z\\d][^A-Z\\d]*)");
 
     private StringUtil() {}
+
     /**
      * @param text
      *            to have the first line removed

File: src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -21,6 +21,7 @@
 public class ArgumentMatchingTool {
 
     private ArgumentMatchingTool() {}
+
     /**
      * Suspiciously not matching arguments are those that don't match, the toString() representation is the same but types are different.
      */

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.creation.bytebuddy;
 
-import static net.bytebuddy.matcher.ElementMatchers.isAccessibleTo;
+import static net.bytebuddy.matcher.ElementMatchers.isVisibleTo;
 import static net.bytebuddy.matcher.ElementMatchers.isConstructor;
 import static net.bytebuddy.matcher.ElementMatchers.isStatic;
 import static net.bytebuddy.matcher.ElementMatchers.not;
@@ -398,7 +398,7 @@ public MethodVisitor wrap(
                                 .getSuperClass()
                                 .asErasure()
                                 .getDeclaredMethods()
-                                .filter(isConstructor().and(isAccessibleTo(instrumentedType)));
+                                .filter(isConstructor().and(isVisibleTo(instrumentedType)));
                 int arguments = Integer.MAX_VALUE;
                 boolean packagePrivate = true;
                 MethodDescription.InDefinedShape current = null;

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -4,8 +4,8 @@
  */
 package org.mockito.internal.creation.bytebuddy;
 
+import static net.bytebuddy.matcher.ElementMatchers.isAccessibleTo;
 import static net.bytebuddy.matcher.ElementMatchers.isConstructor;
-import static net.bytebuddy.matcher.ElementMatchers.isPrivate;
 import static net.bytebuddy.matcher.ElementMatchers.isStatic;
 import static net.bytebuddy.matcher.ElementMatchers.not;
 
@@ -398,7 +398,7 @@ public MethodVisitor wrap(
                                 .getSuperClass()
                                 .asErasure()
                                 .getDeclaredMethods()
-                                .filter(isConstructor().and(not(isPrivate())));
+                                .filter(isConstructor().and(isAccessibleTo(instrumentedType)));
                 int arguments = Integer.MAX_VALUE;
                 boolean packagePrivate = true;
                 MethodDescription.InDefinedShape current = null;

File: src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java
Patch:
@@ -57,6 +57,8 @@ public static Object processAnnotationForMock(
             mockSettings.mockMaker(annotation.mockMaker());
         }
 
+        mockSettings.genericTypeToMock(genericType.get());
+
         // see @Mock answer default value
         mockSettings.defaultAnswer(annotation.answer());
 

File: src/main/java/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
Patch:
@@ -13,5 +13,6 @@ OngoingInjector filterCandidate(
             Collection<Object> mocks,
             Field candidateFieldToBeInjected,
             List<Field> allRemainingCandidateFields,
-            Object injectee);
+            Object injectee,
+            Field injectMocksField);
 }

File: src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java
Patch:
@@ -28,7 +28,8 @@ public OngoingInjector filterCandidate(
             final Collection<Object> mocks,
             final Field candidateFieldToBeInjected,
             final List<Field> allRemainingCandidateFields,
-            final Object injectee) {
+            final Object injectee,
+            final Field injectMocksField) {
         if (mocks.size() == 1) {
             final Object matchingMock = mocks.iterator().next();
 

File: src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java
Patch:
@@ -64,7 +64,8 @@ private <T> T withParams(Class<T> cls, Object... params) {
 
     @SuppressWarnings("unchecked")
     private static <T> T invokeConstructor(Constructor<?> constructor, Object... params)
-            throws java.lang.InstantiationException, IllegalAccessException,
+            throws java.lang.InstantiationException,
+                    IllegalAccessException,
                     InvocationTargetException {
         MemberAccessor accessor = Plugins.getMemberAccessor();
         return (T) accessor.newInstance(constructor, params);

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -168,7 +168,7 @@ public boolean isMock(Object instance) {
 
     @Override
     public boolean isMocked(Object instance) {
-        return selfCallInfo.checkSelfCall(instance) && isMock(instance);
+        return isMock(instance) && selfCallInfo.checkSelfCall(instance);
     }
 
     @Override

File: src/main/java/org/mockito/AdditionalAnswers.java
Patch:
@@ -276,7 +276,7 @@ public static <T> Answer<T> returnsArgAt(int position) {
      * This feature suffers from the same drawback as the spy.
      * The mock will call the delegate if you use regular when().then() stubbing style.
      * Since the real implementation is called this might have some side effects.
-     * Therefore you should use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example:
+     * Therefore, you should use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example:
      *
      * <pre class="code"><code class="java">
      *   List listWithDelegate = mock(List.class, AdditionalAnswers.delegatesTo(awesomeList));

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -73,7 +73,7 @@ public interface MockingDetails {
      * What is 'stubbing'?
      * Stubbing is your when(x).then(y) declaration, e.g. configuring the mock to behave in a specific way,
      * when specific method with specific arguments is invoked on a mock.
-     * Typically stubbing is configuring mock to return X when method Y is invoked.
+     * Typically, stubbing is configuring mock to return X when method Y is invoked.
      * <p>
      * Why do you need to access stubbings of a mock?
      * In a normal workflow of creation clean tests, there is no need for this API.

File: src/main/java/org/mockito/MockitoSession.java
Patch:
@@ -17,12 +17,12 @@
 
 /**
  * {@code MockitoSession} is an optional, highly recommended feature
- * that helps driving cleaner tests by eliminating boilerplate code and adding extra validation.
+ * that drives writing cleaner tests by eliminating boilerplate code and adding extra validation.
  * If you already use {@link MockitoJUnitRunner} or {@link MockitoRule}
  * *you don't need* {@code MockitoSession} because it is used by the runner/rule.
  * <p>
  * {@code MockitoSession} is a session of mocking, during which the user creates and uses Mockito mocks.
- * Typically the session is an execution of a single test method.
+ * Typically, the session is an execution of a single test method.
  * {@code MockitoSession} initializes mocks, validates usage and detects incorrect stubbing.
  * When the session is started it must be concluded with {@link #finishMocking()}
  * otherwise {@link UnfinishedMockingSessionException} is triggered when the next session is created.

File: src/main/java/org/mockito/NotExtensible.java
Patch:
@@ -19,7 +19,7 @@
  * Public types are all types that are *not* under "org.mockito.internal.*" package.
  * <p>
  * Absence of {@code NotExtensible} annotation on a type *does not* mean it is intended to be extended.
- * The annotation has been introduced late and therefore it is not used frequently in the codebase.
+ * The annotation has been introduced late, and therefore it is not used frequently in the codebase.
  * Many public types from Mockito API are not intended for extension, even though they do not have this annotation applied.
  *
  * @since 2.10.0

File: src/main/java/org/mockito/Spy.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.junit.MockitoJUnitRunner;
 
 /**
- * Allows shorthand wrapping of field instances in an spy object.
+ * Allows shorthand wrapping of field instances in a spy object.
  *
  * <p>
  * Example:
@@ -79,7 +79,7 @@
  * <li>Mockito <b>*does not*</b> delegate calls to the passed real instance, instead it actually creates a copy of it.
  * So if you keep the real instance and interact with it, don't expect the spied to be aware of those interaction
  * and their effect on real instance state.
- * The corollary is that when an <b>*unstubbed*</b> method is called <b>*on the spy*</b> but <b>*not on the real instance*</b>,
+ * The corollary is that when an <b>*un-stubbed*</b> method is called <b>*on the spy*</b> but <b>*not on the real instance*</b>,
  * you won't see any effects on the real instance.</li>
  *
  * <li>Watch out for final methods.

File: src/main/java/org/mockito/configuration/IMockitoConfiguration.java
Patch:
@@ -13,7 +13,7 @@
  * In most cases you don't really need to configure Mockito. For example in case of working with legacy code,
  * when you might want to have different 'mocking style' this interface might be helpful.
  * A reason of configuring Mockito might be if you disagree with the {@link org.mockito.Answers#RETURNS_DEFAULTS}
- * unstubbed mocks return.
+ * un-stubbed mocks return.
  *
  * <p>
  * To configure Mockito create exactly <b>org.mockito.configuration.MockitoConfiguration</b> class
@@ -38,7 +38,7 @@
 public interface IMockitoConfiguration {
 
     /**
-     * Allows configuring the default answers of unstubbed invocations
+     * Allows configuring the default answers of un-stubbed invocations
      * <p>
      * See javadoc for {@link IMockitoConfiguration}
      */

File: src/main/java/org/mockito/internal/debugging/LoggingListener.java
Patch:
@@ -82,7 +82,7 @@ public String getStubbingInfo() {
         if (!unstubbedCalls.isEmpty()) {
             lines.add("[Mockito]");
             lines.add(
-                    "[Mockito] Unstubbed method invocations (perhaps missing stubbing in the test?):");
+                    "[Mockito] Un-stubbed method invocations (perhaps missing stubbing in the test?):");
             lines.add("[Mockito]");
             addOrderedList(lines, unstubbedCalls);
         }

File: src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -17,10 +17,10 @@
 /**
  * Optional Answer that adds partial mocking support
  * <p>
- * {@link Answer} can be used to define the return values of unstubbed invocations.
+ * {@link Answer} can be used to define the return values of un-stubbed invocations.
  * <p>
  * This implementation can be helpful when working with legacy code.
- * When this implementation is used, unstubbed methods will delegate to the real implementation.
+ * When this implementation is used, un-stubbed methods will delegate to the real implementation.
  * This is a way to create a partial mock object that calls real methods by default.
  * <p>
  * As usual you are going to read <b>the partial mock warning</b>:

File: src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java
Patch:
@@ -97,7 +97,7 @@ public void informs_about_various_kinds_of_stubs() {
                         + "[Mockito]\n"
                         + "[Mockito] 1. at com.FooTest:30\n"
                         + "[Mockito]\n"
-                        + "[Mockito] Unstubbed method invocations (perhaps missing stubbing in the test?):\n"
+                        + "[Mockito] Un-stubbed method invocations (perhaps missing stubbing in the test?):\n"
                         + "[Mockito]\n"
                         + "[Mockito] 1. at com.Foo:96",
                 listener.getStubbingInfo());
@@ -127,7 +127,7 @@ public void informs_about_unstubbed() {
         assertEquals(
                 "[Mockito] Additional stubbing information (see javadoc for StubbingInfo class):\n"
                         + "[Mockito]\n"
-                        + "[Mockito] Unstubbed method invocations (perhaps missing stubbing in the test?):\n"
+                        + "[Mockito] Un-stubbed method invocations (perhaps missing stubbing in the test?):\n"
                         + "[Mockito]\n"
                         + "[Mockito] 1. com.Foo:20",
                 listener.getStubbingInfo());

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMaker.java
Patch:
@@ -447,9 +447,7 @@ private <T> RuntimeException prettifyFailure(
                                 "IBM J9 VM",
                                 "Early IBM virtual machine are known to have issues with Mockito, please upgrade to an up-to-date version.\n",
                                 "Hotspot",
-                                Platform.isJava8BelowUpdate45()
-                                        ? "Java 8 early builds have bugs that were addressed in Java 1.8.0_45, please update your JDK!\n"
-                                        : ""),
+                                ""),
                         Platform.describe(),
                         "",
                         "You are seeing this disclaimer because Mockito is configured to create inlined mocks.",

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -122,9 +122,7 @@ private <T> RuntimeException prettifyFailure(
                                 "IBM J9 VM",
                                 "Early IBM virtual machine are known to have issues with Mockito, please upgrade to an up-to-date version.\n",
                                 "Hotspot",
-                                Platform.isJava8BelowUpdate45()
-                                        ? "Java 8 early builds have bugs that were addressed in Java 1.8.0_45, please update your JDK!\n"
-                                        : ""),
+                                ""),
                         Platform.describe(),
                         "",
                         "Underlying exception : " + generationFailed),

File: src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -27,7 +27,9 @@ class PluginRegistry {
                     .loadPlugin(MockMaker.class);
 
     private final MemberAccessor memberAccessor =
-            new PluginLoader(pluginSwitch, DefaultMockitoPlugins.MODULE_ALIAS)
+            new PluginLoader(
+                            pluginSwitch,
+                            DefaultMockitoPlugins.MEMBER_ACCESSOR_ALIASES.toArray(new String[0]))
                     .loadPlugin(MemberAccessor.class);
 
     private final StackTraceCleanerProvider stackTraceCleanerProvider =

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -205,6 +205,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         boolean subclassingRequired =
                 !features.interfaces.isEmpty()
                         || features.serializableMode != SerializableMode.NONE
+                        || features.stripAnnotations
                         || Modifier.isAbstract(features.mockedType.getModifiers());
 
         checkSupportedCombination(subclassingRequired, features);
@@ -416,6 +417,7 @@ public synchronized void clearAllCaches() {
         }
         mocked.clear();
         flatMocked.clear();
+        subclassEngine.clearAllCaches();
         try {
             instrumentation.retransformClasses(types.toArray(new Class<?>[0]));
         } catch (UnmodifiableClassException e) {

File: src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java
Patch:
@@ -10,7 +10,6 @@
 import static org.mockito.internal.configuration.plugins.DefaultMockitoPlugins.SUBCLASS_ALIAS;
 
 import org.junit.Test;
-import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;
 import org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker;
 import org.mockito.internal.util.ConsoleMockitoLogger;
 import org.mockito.plugins.InstantiatorProvider2;
@@ -35,7 +34,8 @@ public void provides_plugins() throws Exception {
                 "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker",
                 DefaultMockitoPlugins.getDefaultPluginClass(SUBCLASS_ALIAS));
         assertEquals(
-                ByteBuddyMockMaker.class, plugins.getDefaultPlugin(MockMaker.class).getClass());
+                InlineByteBuddyMockMaker.class,
+                plugins.getDefaultPlugin(MockMaker.class).getClass());
         assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider2.class));
         assertEquals(
                 ConsoleMockitoLogger.class,

File: src/test/java/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java
Patch:
@@ -74,7 +74,9 @@ private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadMoc
         return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
             public boolean acceptReloadOf(String qualifiedName) {
                 return (!qualifiedName.contains("net.bytebuddy")
-                        && qualifiedName.contains("org.mockito"));
+                        && qualifiedName.contains("org.mockito")
+                        && !qualifiedName.contains(
+                                "org.mockito.internal.creation.bytebuddy.inject"));
             }
         };
     }

File: src/main/java/org/mockito/ArgumentMatcher.java
Patch:
@@ -161,7 +161,7 @@ public interface ArgumentMatcher<T> {
      * <p>Only matcher implementations that can conceptually match a raw vararg parameter should override this method.
      *
      * @return the type this matcher handles. The default value of {@link Void} means the type is not known.
-     * @since 5.0.0
+     * @since 4.11.0
      */
     default Class<?> type() {
         return Void.class;

File: src/main/java/org/mockito/internal/matchers/Any.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.mockito.ArgumentMatcher;
 
-public class Any implements ArgumentMatcher<Object>, VarargMatcher, Serializable {
+public class Any implements ArgumentMatcher<Object>, Serializable {
 
     public static final Any ANY = new Any();
 

File: src/main/java/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -17,8 +17,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.util.Primitives;
 
-public class CapturingMatcher<T>
-        implements ArgumentMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
+public class CapturingMatcher<T> implements ArgumentMatcher<T>, CapturesArguments, Serializable {
 
     private final Class<? extends T> clazz;
     private final List<T> arguments = new ArrayList<>();

File: src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
Patch:
@@ -73,7 +73,7 @@ public void should_be_created_with_an_argument_resolver() throws Exception {
     public void should_instantiate_type_if_resolver_provide_matching_types() throws Exception {
         Observer observer = mock(Observer.class);
         Map map = mock(Map.class);
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.any(Class[].class)))
                 .willReturn(new Object[] {observer, map});
 
         new ParameterizedConstructorInstantiator(this, field("withMultipleConstructor"), resolver)
@@ -120,7 +120,7 @@ this, field("withThrowingConstructor"), resolver)
     @Test
     public void should_instantiate_type_with_vararg_constructor() throws Exception {
         Observer[] vararg = new Observer[] {};
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.any(Class[].class)))
                 .willReturn(new Object[] {"", vararg});
 
         new ParameterizedConstructorInstantiator(this, field("withVarargConstructor"), resolver)

File: src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -173,9 +173,9 @@ public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed() {
 
     @Test
     // See bug #157
-    public void shouldMatchEasilyEmptyVararg() throws Exception {
+    public void shouldMatchEasilyEmptyVararg() {
         // when
-        when(mock.foo(any())).thenReturn(-1);
+        when(mock.foo(any(Object[].class))).thenReturn(-1);
 
         // then
         assertEquals(-1, mock.foo());

File: src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyPicksUpExtraInvocationsTest.java
Patch:
@@ -26,7 +26,7 @@ public void shouldVerifyCorrectlyWithAny() {
         table.newRow("abc", "def");
 
         // then
-        verify(table, times(2)).newRow(anyString(), (String[]) any());
+        verify(table, times(2)).newRow(anyString(), any(String[].class));
     }
 
     @Test
@@ -36,7 +36,7 @@ public void shouldVerifyCorrectlyNumberOfInvocationsUsingAnyAndEqualArgument() {
         table.newRow("x", "def");
 
         // then
-        verify(table, times(2)).newRow(eq("x"), (String[]) any());
+        verify(table, times(2)).newRow(eq("x"), any(String[].class));
     }
 
     @Test

File: src/main/java/org/mockito/ArgumentCaptor.java
Patch:
@@ -62,11 +62,12 @@
 @CheckReturnValue
 public class ArgumentCaptor<T> {
 
-    private final CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();
+    private final CapturingMatcher<T> capturingMatcher;
     private final Class<? extends T> clazz;
 
     private ArgumentCaptor(Class<? extends T> clazz) {
         this.clazz = clazz;
+        this.capturingMatcher = new CapturingMatcher<T>(clazz);
     }
 
     /**

File: src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java
Patch:
@@ -22,6 +22,7 @@ public boolean matches(Object argument) {
         return this.matcher.matches(argument);
     }
 
+    @SuppressWarnings("deprecation")
     public boolean isVarargMatcher() {
         return matcher instanceof VarargMatcher;
     }

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -136,7 +136,7 @@ public void should_be_similar_if_is_overloaded_but_used_with_different_arg() thr
     public void should_capture_arguments_from_invocation() throws Exception {
         // given
         Invocation invocation = new InvocationBuilder().args("1", 100).toInvocation();
-        CapturingMatcher capturingMatcher = new CapturingMatcher();
+        CapturingMatcher capturingMatcher = new CapturingMatcher(List.class);
         InvocationMatcher invocationMatcher =
                 new InvocationMatcher(invocation, (List) asList(new Equals("1"), capturingMatcher));
 
@@ -167,7 +167,7 @@ public void should_capture_varargs_as_vararg() throws Exception {
         // given
         mock.mixedVarargs(1, "a", "b");
         Invocation invocation = getLastInvocation();
-        CapturingMatcher m = new CapturingMatcher();
+        CapturingMatcher m = new CapturingMatcher(List.class);
         InvocationMatcher invocationMatcher =
                 new InvocationMatcher(invocation, Arrays.<ArgumentMatcher>asList(new Equals(1), m));
 

File: src/main/java/org/mockito/junit/MockitoJUnitRunner.java
Patch:
@@ -34,7 +34,7 @@
  *       See {@link UnnecessaryStubbingException}.
  *       Similar to JUnit rules, the runner also reports stubbing argument mismatches as console warnings
  *       (see {@link MockitoHint}).
- *       To opt-out from this feature, use {@code}&#064;RunWith(MockitoJUnitRunner.Silent.class){@code}
+ *       To opt-out from this feature, use {@code @RunWith(MockitoJUnitRunner.Silent.class)}
  *   <li>
  *      Initializes mocks annotated with {@link Mock},
  *      so that explicit usage of {@link MockitoAnnotations#openMocks(Object)} is not necessary.

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
-import java.lang.reflect.Method;
 import java.util.Set;
 
 import org.junit.Test;
@@ -110,7 +109,8 @@ public void shouldMakeSureTheInterfaceDoesNotChange() throws Exception {
                         new Answer<String>() {
                             public String answer(InvocationOnMock invocation) throws Throwable {
                                 assertTrue(invocation.getArguments().getClass().isArray());
-                                assertEquals(Method.class, invocation.getMethod().getClass());
+                                assertEquals(
+                                        IMethods.class, invocation.getMethod().getDeclaringClass());
 
                                 return "assertions passed";
                             }

File: src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java
Patch:
@@ -53,6 +53,9 @@ public static Object processAnnotationForMock(
         if (annotation.strictness() != Mock.Strictness.TEST_LEVEL_DEFAULT) {
             mockSettings.strictness(Strictness.valueOf(annotation.strictness().toString()));
         }
+        if (!annotation.mockMaker().isEmpty()) {
+            mockSettings.mockMaker(annotation.mockMaker());
+        }
 
         // see @Mock answer default value
         mockSettings.defaultAnswer(annotation.answer());

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -83,6 +83,7 @@ public AutoCloseable process(Class<?> context, Object testInstance) {
     }
 
     private static Object spyInstance(Field field, Object instance) {
+        // TODO: Add mockMaker option for @Spy annotation (#2740)
         return Mockito.mock(
                 instance.getClass(),
                 withSettings()
@@ -93,6 +94,7 @@ private static Object spyInstance(Field field, Object instance) {
 
     private static Object spyNewInstance(Object testInstance, Field field)
             throws InstantiationException, IllegalAccessException, InvocationTargetException {
+        // TODO: Add mockMaker option for @Spy annotation (#2740)
         MockSettings settings =
                 withSettings().defaultAnswer(CALLS_REAL_METHODS).name(field.getName());
         Class<?> type = field.getType();

File: src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java
Patch:
@@ -42,6 +42,7 @@ protected boolean processInjection(Field field, Object fieldOwner, Set<Object> m
                     // B. protect against multiple use of MockitoAnnotations.openMocks()
                     Mockito.reset(instance);
                 } else {
+                    // TODO: Add mockMaker option for @Spy annotation (#2740)
                     Object mock =
                             Mockito.mock(
                                     instance.getClass(),

File: src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -23,8 +23,7 @@ class PluginRegistry {
     private final MockMaker mockMaker =
             new PluginLoader(
                             pluginSwitch,
-                            DefaultMockitoPlugins.INLINE_ALIAS,
-                            DefaultMockitoPlugins.PROXY_ALIAS)
+                            DefaultMockitoPlugins.MOCK_MAKER_ALIASES.toArray(new String[0]))
                     .loadPlugin(MockMaker.class);
 
     private final MemberAccessor memberAccessor =

File: src/main/java/org/mockito/internal/util/MockCreationValidator.java
Patch:
@@ -18,8 +18,8 @@
 @SuppressWarnings("unchecked")
 public class MockCreationValidator {
 
-    public void validateType(Class<?> classToMock) {
-        TypeMockability typeMockability = MockUtil.typeMockabilityOf(classToMock);
+    public void validateType(Class<?> classToMock, String mockMaker) {
+        TypeMockability typeMockability = MockUtil.typeMockabilityOf(classToMock, mockMaker);
         if (!typeMockability.mockable()) {
             throw cannotMockClass(classToMock, typeMockability.nonMockableReason());
         }

File: src/test/java/org/mockito/internal/util/MockCreationValidatorTest.java
Patch:
@@ -66,7 +66,7 @@ public void should_validation_be_safe_when_nulls_passed() {
     @Test
     public void should_fail_when_type_not_mockable() {
         try {
-            validator.validateType(long.class);
+            validator.validateType(long.class, null);
         } catch (MockitoException ex) {
             assertThat(ex.getMessage()).contains("primitive");
         }

File: src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java
Patch:
@@ -43,7 +43,7 @@ private IMockitoConfiguration createConfig() {
     }
 
     public static void validate() {
-        new GlobalConfiguration();
+        GlobalConfiguration unused = new GlobalConfiguration();
     }
 
     public org.mockito.plugins.AnnotationEngine tryGetPluginAnnotationEngine() {

File: src/main/java/org/mockito/internal/MockedConstructionImpl.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.mockito.MockedConstruction;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.invocation.Location;
 import org.mockito.plugins.MockMaker;
 
@@ -21,7 +21,7 @@ public final class MockedConstructionImpl<T> implements MockedConstruction<T> {
 
     private boolean closed;
 
-    private final Location location = new LocationImpl();
+    private final Location location = LocationFactory.create();
 
     protected MockedConstructionImpl(MockMaker.ConstructionMockControl<T> control) {
         this.control = control;

File: src/main/java/org/mockito/internal/MockedStaticImpl.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.Mockito;
 import org.mockito.exceptions.base.MockitoAssertionError;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.listeners.VerificationStartedNotifier;
 import org.mockito.internal.progress.MockingProgress;
 import org.mockito.internal.stubbing.InvocationContainerImpl;
@@ -35,7 +35,7 @@ public final class MockedStaticImpl<T> implements MockedStatic<T> {
 
     private boolean closed;
 
-    private final Location location = new LocationImpl();
+    private final Location location = LocationFactory.create();
 
     protected MockedStaticImpl(MockMaker.StaticMockControl<T> control) {
         this.control = control;

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java
Patch:
@@ -22,7 +22,7 @@
 import net.bytebuddy.implementation.bind.annotation.StubValue;
 import net.bytebuddy.implementation.bind.annotation.SuperCall;
 import net.bytebuddy.implementation.bind.annotation.This;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.invocation.RealMethod;
 import org.mockito.invocation.Location;
 import org.mockito.invocation.MockHandler;
@@ -53,7 +53,7 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo
 
     Object doIntercept(Object mock, Method invokedMethod, Object[] arguments, RealMethod realMethod)
             throws Throwable {
-        return doIntercept(mock, invokedMethod, arguments, realMethod, new LocationImpl());
+        return doIntercept(mock, invokedMethod, arguments, realMethod, LocationFactory.create());
     }
 
     Object doIntercept(

File: src/main/java/org/mockito/internal/debugging/Localized.java
Patch:
@@ -13,7 +13,7 @@ public class Localized<T> {
 
     public Localized(T object) {
         this.object = object;
-        location = new LocationImpl();
+        location = LocationFactory.create();
     }
 
     public T getObject() {

File: src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.concurrent.Callable;
 
 import org.mockito.internal.creation.DelegatingMethod;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.invocation.mockref.MockWeakReference;
 import org.mockito.internal.progress.SequenceNumber;
 import org.mockito.invocation.Invocation;
@@ -71,7 +71,7 @@ private static InterceptedInvocation createInvocation(
             RealMethod realMethod,
             MockCreationSettings settings) {
         return createInvocation(
-                mock, invokedMethod, arguments, realMethod, settings, new LocationImpl());
+                mock, invokedMethod, arguments, realMethod, settings, LocationFactory.create());
     }
 
     private static MockitoMethod createMockitoMethod(Method method, MockCreationSettings settings) {

File: src/main/java/org/mockito/internal/matchers/LocalizedMatcher.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.invocation.Location;
 
 @SuppressWarnings("unchecked")
@@ -16,7 +16,7 @@ public class LocalizedMatcher {
 
     public LocalizedMatcher(ArgumentMatcher<?> matcher) {
         this.matcher = matcher;
-        this.location = new LocationImpl();
+        this.location = LocationFactory.create();
     }
 
     public Location getLocation() {

File: src/main/java/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.internal.debugging.Localized;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.exceptions.Reporter;
 import org.mockito.internal.listeners.AutoCleanableListener;
 import org.mockito.invocation.Location;
@@ -105,7 +105,7 @@ public VerificationMode pullVerificationMode() {
     @Override
     public void stubbingStarted() {
         validateState();
-        stubbingInProgress = new LocationImpl();
+        stubbingInProgress = LocationFactory.create();
     }
 
     @Override

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.Serializable;
 
 import org.mockito.Mockito;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.invocation.Location;
 import org.mockito.stubbing.Answer;
@@ -57,7 +57,8 @@ public Object apply(Class<?> type) {
                         }
 
                         return Mockito.mock(
-                                type, new ThrowsSmartNullPointer(invocation, new LocationImpl()));
+                                type,
+                                new ThrowsSmartNullPointer(invocation, LocationFactory.create()));
                     }
                 });
     }

File: src/test/java/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 
 import org.mockito.Mockito;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.invocation.mockref.MockReference;
 import org.mockito.internal.invocation.mockref.MockStrongReference;
 import org.mockito.invocation.Invocation;
@@ -72,7 +72,7 @@ public Invocation toInvocation() {
                         new SerializableMethod(method),
                         args,
                         NO_OP,
-                        location == null ? new LocationImpl() : location,
+                        location == null ? LocationFactory.create() : location,
                         1);
         if (verified) {
             i.markVerified();

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.assertj.core.api.ThrowableAssert;
 import org.junit.Test;
 import org.mockito.exceptions.verification.SmartNullPointerException;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.invocation.InterceptedInvocation;
 import org.mockito.internal.invocation.SerializableMethod;
 import org.mockito.internal.invocation.mockref.MockStrongReference;
@@ -146,7 +146,7 @@ private static <T> InterceptedInvocation invocationMethodWithArgs(final T obj)
                         GenericFooBar.class.getMethod("methodWithArgs", int.class, Object.class)),
                 new Object[] {1, obj},
                 InterceptedInvocation.NO_OP,
-                new LocationImpl(),
+                LocationFactory.create(),
                 1);
     }
 
@@ -269,7 +269,7 @@ private static <T> InterceptedInvocation invocationMethodWithVarArgs(final T[] o
                                 "methodWithVarArgs", int.class, Object[].class)),
                 new Object[] {1, obj},
                 InterceptedInvocation.NO_OP,
-                new LocationImpl(),
+                LocationFactory.create(),
                 1);
     }
 

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.StateMaster;
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.configuration.ConfigurationAccess;
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.debugging.LocationFactory;
 import org.mockito.internal.invocation.InterceptedInvocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -84,7 +84,7 @@ protected static Invocation invocationOf(Class<?> type, String methodName, Objec
                 new SerializableMethod(type.getMethod(methodName, types)),
                 args,
                 InterceptedInvocation.NO_OP,
-                new LocationImpl(),
+                LocationFactory.create(),
                 1);
     }
 

File: src/main/java/org/mockito/internal/runners/InternalRunner.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * I'm using this surrogate interface to hide internal Runner implementations.
- * Surrogate cannot be used with &#064;RunWith therefore it is less likely clients will use interal runners.
+ * Surrogate cannot be used with &#064;RunWith therefore it is less likely clients will use internal runners.
  */
 public interface InternalRunner extends Filterable {
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java
Patch:
@@ -219,14 +219,14 @@ private Object readResolve() throws ObjectStreamException {
                                         + typeToMock.getCanonicalName()
                                         + "'. The error was :",
                                 "  " + ioe.getMessage(),
-                                "If you are unsure what is the reason of this exception, feel free to contact us on the mailing list."),
+                                "If you are unsure what is the reason of this exception, feel free to open an issue on GitHub."),
                         ioe);
             } catch (ClassNotFoundException cce) {
                 throw new MockitoSerializationIssue(
                         join(
                                 "A class couldn't be found while deserializing a Mockito mock, you should check your classpath. The error was :",
                                 "  " + cce.getMessage(),
-                                "If you are still unsure what is the reason of this exception, feel free to contact us on the mailing list."),
+                                "If you are still unsure what is the reason of this exception, feel free to open an issue on GitHub."),
                         cce);
             }
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMaker.java
Patch:
@@ -434,7 +434,7 @@ private <T> RuntimeException prettifyFailure(
                 join(
                         "Mockito cannot mock this class: " + mockFeatures.getTypeToMock() + ".",
                         "",
-                        "If you're not sure why you're getting this error, please report to the mailing list.",
+                        "If you're not sure why you're getting this error, please open an issue on GitHub.",
                         "",
                         Platform.warnForVM(
                                 "IBM J9 VM",

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -114,8 +114,9 @@ private <T> RuntimeException prettifyFailure(
                 join(
                         "Mockito cannot mock this class: " + mockFeatures.getTypeToMock() + ".",
                         "",
-                        "Mockito can only mock non-private & non-final classes.",
-                        "If you're not sure why you're getting this error, please report to the mailing list.",
+                        "Mockito can only mock non-private & non-final classes, but the root cause of this error might be different.",
+                        "Please check the full stacktrace to understand what the issue is.",
+                        "If you're still not sure why you're getting this error, please open an issue on GitHub.",
                         "",
                         Platform.warnForVM(
                                 "IBM J9 VM",

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -93,7 +93,7 @@ public InternalRunner create(Class<?> klass, Supplier<MockitoTestListener> liste
                             + "MockitoRunner can only be used with JUnit 4.5 or higher.\n"
                             + "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n"
                             + "Bear in mind that you can still enjoy all features of the framework without using runners (they are completely optional).\n"
-                            + "If you get this error despite using JUnit 4.5 or higher then please report this error to the mockito mailing list.\n",
+                            + "If you get this error despite using JUnit 4.5 or higher, then please open an issue on GitHub.\n",
                     t);
         }
     }

File: src/main/java/org/mockito/quality/Strictness.java
Patch:
@@ -65,7 +65,6 @@ public enum Strictness {
      * Ensures clean tests, reduces test code duplication, improves debuggability.
      * Offers best combination of flexibility and productivity.
      * Highly recommended.
-     * Planned as default for Mockito v4.
      * Enable it via our JUnit support ({@link MockitoJUnit}) or {@link MockitoSession}.
      * <p>
      * Adds following behavior:

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java
Patch:
@@ -20,7 +20,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         Object mock = invocation.getMock();
         Class<?> mockType = MockUtil.getMockHandler(mock).getMockSettings().getTypeToMock();
 
-        if (methodReturnType.isAssignableFrom(mockType)) {
+        if (methodReturnType.isAssignableFrom(mockType) && methodReturnType != Object.class) {
             return invocation.getMock();
         }
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java
Patch:
@@ -12,7 +12,6 @@
 import java.lang.reflect.Method;
 
 import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.plugins.MemberAccessor;
 import org.mockito.stubbing.Answer;
@@ -45,7 +44,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
             }
 
             MemberAccessor accessor = Plugins.getMemberAccessor();
-            Object[] rawArguments = ((Invocation) invocation).getRawArguments();
+            Object[] rawArguments = invocation.getRawArguments();
             return accessor.invoke(delegateMethod, delegatedObject, rawArguments);
         } catch (NoSuchMethodException e) {
             throw delegatedMethodDoesNotExistOnDelegate(

File: src/main/java/org/mockito/junit/MockitoJUnitRunner.java
Patch:
@@ -113,7 +113,7 @@ public Silent(Class<?> klass) throws InvocationTargetException {
      * Detects unused stubs and reports them as failures. Default behavior in Mockito 2.x.
      * To improve productivity and quality of tests please consider newer API, the {@link StrictStubs}.
      * <p>
-     * For more information on detecting unusued stubs, see {@link UnnecessaryStubbingException}.
+     * For more information on detecting unused stubs, see {@link UnnecessaryStubbingException}.
      * For more information on stubbing argument mismatch warnings see {@link MockitoHint}.
      *
      * @since 2.1.0

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -247,10 +247,10 @@ public MockSettings lenient() {
 
     @Override
     public MockSettings strictness(Strictness strictness) {
-        this.strictness = strictness;
         if (strictness == null) {
             throw strictnessDoesNotAcceptNullParameter();
         }
+        this.strictness = strictness;
         return this;
     }
 

File: src/main/java/org/mockito/internal/creation/settings/CreationSettings.java
Patch:
@@ -45,7 +45,7 @@ public class CreationSettings<T> implements MockCreationSettings<T>, Serializabl
     private boolean useConstructor;
     private Object outerClassInstance;
     private Object[] constructorArgs;
-    protected Strictness strictness = Strictness.STRICT_STUBS;
+    protected Strictness strictness = null;
 
     public CreationSettings() {}
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -22,7 +22,7 @@
  * the type to mock, extra interfaces, and serialization support.
  *
  * <p>
- * The type to mock has to be not final and not part of the JDK. THe created mock will implement extra interfaces
+ * The type to mock has to be not final and not part of the JDK. The created mock will implement extra interfaces
  * if any. And will implement <code>Serializable</code> if this settings is explicitly set.
  */
 public class SubclassByteBuddyMockMaker implements ClassCreatingMockMaker {

File: src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java
Patch:
@@ -45,6 +45,7 @@ public static Object processAnnotationForMock(
         if (annotation.stubOnly()) {
             mockSettings.stubOnly();
         }
+        mockSettings.strictness(annotation.strictness());
         if (annotation.lenient()) {
             mockSettings.lenient();
         }

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -38,7 +38,7 @@ public class InvocationContainerImpl implements InvocationContainer, Serializabl
 
     public InvocationContainerImpl(MockCreationSettings mockSettings) {
         this.registeredInvocations = createRegisteredInvocations(mockSettings);
-        this.mockStrictness = mockSettings.isLenient() ? Strictness.LENIENT : null;
+        this.mockStrictness = mockSettings.getStrictness();
         this.doAnswerStyleStubbing = new DoAnswerStyleStubbing();
     }
 

File: src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java
Patch:
@@ -31,8 +31,8 @@ public static Strictness determineStrictness(
             return stubbing.getStrictness();
         }
 
-        if (mockSettings.isLenient()) {
-            return Strictness.LENIENT;
+        if (mockSettings.getStrictness() != null) {
+            return mockSettings.getStrictness();
         }
 
         return testLevelStrictness;

File: src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.io.Serializable;
 
+import java.util.Objects;
 import org.mockito.ArgumentMatcher;
 
 public class EqualsWithDelta implements ArgumentMatcher<Number>, Serializable {
@@ -24,7 +25,7 @@ public boolean matches(Number actual) {
             return false;
         }
 
-        if (wanted == actual) {
+        if (Objects.equals(wanted, actual)) {
             return true;
         }
 

File: subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoAnyIncorrectPrimitiveType.java
Patch:
@@ -49,7 +49,7 @@ public class MockitoAnyIncorrectPrimitiveType extends AbstractMockitoAnyForPrimi
   };
 
   private static final Matcher<ExpressionTree> METHOD_MATCHER =
-      staticMethod().onClassAny(CLASS_NAMES).withNameMatching(METHOD_NAME_PATTERN).withParameters();
+      staticMethod().onClassAny(CLASS_NAMES).withNameMatching(METHOD_NAME_PATTERN).withNoParameters();
 
   @Override
   protected Matcher<? super MethodInvocationTree> matcher() {

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2185,7 +2185,7 @@ public static <T> MockedConstruction<T> mockConstructionWithAnswer(
                 context -> {
                     if (context.getCount() == 1 || additionalAnswers.length == 0) {
                         return withSettings().defaultAnswer(defaultAnswer);
-                    } else if (context.getCount() >= additionalAnswers.length) {
+                    } else if (context.getCount() > additionalAnswers.length) {
                         return withSettings()
                                 .defaultAnswer(additionalAnswers[additionalAnswers.length - 1]);
                     } else {

File: src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -115,7 +115,7 @@ public void run() {
                             DescriptiveMessagesWhenVerificationFailsTest.class,
                             DescriptiveMessagesWhenTimesXVerificationFailsTest.class,
                             BasicVerificationInOrderTest.class,
-                            VerificationInOrderMixedWithOrdiraryVerificationTest.class,
+                            VerificationInOrderMixedWithOrdinaryVerificationTest.class,
                             DescriptiveMessagesOnVerificationInOrderErrorsTest.class,
                             InvalidStateDetectionTest.class,
                             ReplacingObjectMethodsTest.class,

File: src/main/java/org/mockito/AdditionalAnswers.java
Patch:
@@ -31,7 +31,7 @@
  *
  * <p>Currently offer answers that can return the parameter of an invocation at a certain position,
  * along with answers that draw on a strongly typed interface to provide a neater way to write custom answers
- * that either return a value or are void (see answer interfaces in {@link org.mockito.stubbing}).
+ * that either return a value or are void (see answer interfaces in org.mockito.stubbing).
  *
  * <p>See factory methods for more information : {@link #returnsFirstArg}, {@link #returnsSecondArg},
  * {@link #returnsLastArg}, {@link #returnsArgAt}, {@link #answer} and {@link #answerVoid}

File: src/main/java/org/mockito/ArgumentCaptor.java
Patch:
@@ -15,7 +15,7 @@
  *
  * <p>
  * Mockito verifies argument values in natural java style: by using an equals() method.
- * This is also the recommended way of matching arguments because it makes tests clean & simple.
+ * This is also the recommended way of matching arguments because it makes tests clean and simple.
  * In some situations though, it is helpful to assert on certain arguments after the actual verification.
  * For example:
  * <pre class="code"><code class="java">

File: src/main/java/org/mockito/ArgumentMatcher.java
Patch:
@@ -80,7 +80,7 @@
  * and use a lambda, e.g.:
  *
  * <pre class="code"><code class="java">
- *   verify(mock).addAll(<b>argThat(list -> list.size() == 2)</b>);
+ *   verify(mock).addAll(<b>argThat(list -&gt; list.size() == 2)</b>);
  * </code></pre>
  *
  * <p>

File: src/main/java/org/mockito/MockitoFramework.java
Patch:
@@ -32,7 +32,7 @@ public interface MockitoFramework {
      * Make sure you remove the listener when the job is complete, see {@link #removeListener(MockitoListener)}.
      * Currently the listeners list is thread local so you need to remove listener from the same thread otherwise
      * remove is ineffectual.
-     * In typical scenarios, it is not a problem, because adding & removing listeners typically happens in the same thread.
+     * In typical scenarios, it is not a problem, because adding and removing listeners typically happens in the same thread.
      * <p>
      * If you are trying to add the listener but a listener of the same type was already added (and not removed)
      * this method will throw {@link RedundantListenerException}.
@@ -58,7 +58,7 @@ public interface MockitoFramework {
      * When you add listener using {@link #addListener(MockitoListener)} make sure to remove it.
      * Currently the listeners list is thread local so you need to remove listener from the same thread otherwise
      * remove is ineffectual.
-     * In typical scenarios, it is not a problem, because adding & removing listeners typically happens in the same thread.
+     * In typical scenarios, it is not a problem, because adding and removing listeners typically happens in the same thread.
      * <p>
      * For usage examples, see Mockito codebase.
      * If you have ideas and feature requests about Mockito listeners API

File: src/main/java/org/mockito/MockitoSession.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockito.exceptions.misusing.UnfinishedMockingSessionException;
 import org.mockito.exceptions.misusing.UnnecessaryStubbingException;
 import org.mockito.junit.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner.StrictStubs;
 import org.mockito.junit.MockitoRule;
 import org.mockito.listeners.MockitoListener;
 import org.mockito.quality.MockitoHint;
@@ -72,7 +73,7 @@
  * There is no need to use {@code MockitoSession} if you already use {@link MockitoJUnitRunner} or {@link MockitoRule}.
  * If you are JUnit user who does not leverage Mockito rule or runner we strongly recommend to do so.
  * Both the runner and the rule support strict stubbing which can really help driving cleaner tests.
- * See {@link MockitoJUnitRunner.StrictStubs} and {@link MockitoRule#strictness(Strictness)}.
+ * See {@link StrictStubs MockitoJUnitRunner.StrictStubs} and {@link MockitoRule#strictness(Strictness)}.
  * If you cannot use Mockito's JUnit support {@code MockitoSession} exactly is for you!
  * You can automatically take advantage of strict stubbing ({@link Strictness}),
  * automatic initialization of annotated mocks ({@link MockitoAnnotations}),

File: src/main/java/org/mockito/exceptions/misusing/PotentialStubbingProblem.java
Patch:
@@ -26,7 +26,7 @@
  * given(mock.getSomething(100)).willReturn(something);
  *
  * //code under test:
- * Something something = mock.getSomething(50); // <-- stubbing argument mismatch
+ * Something something = mock.getSomething(50); // &lt;-- stubbing argument mismatch
  * </code></pre>
  * The stubbing argument mismatch typically indicates:
  * <ol>

File: src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java
Patch:
@@ -30,16 +30,16 @@
  *
  * //test:
  * ...
- * when(translator.translate("one")).thenReturn("jeden"); // <- stubbing realized during code execution
- * when(translator.translate("two")).thenReturn("dwa"); // <- stubbing never realized
+ * when(translator.translate("one")).thenReturn("jeden"); // &lt;- stubbing realized during code execution
+ * when(translator.translate("two")).thenReturn("dwa"); // &lt;- stubbing never realized
  * ...
  * </code>
  * </pre>
  * Notice that one of the stubbed methods were never realized in the code under test, during test execution.
  * The stray stubbing might be an oversight of the developer, the artifact of copy-paste
  * or the effect of not understanding the test/code.
  * Either way, the developer ends up with unnecessary test code.
- * In order to keep the codebase clean & maintainable it is necessary to remove unnecessary code.
+ * In order to keep the codebase clean and maintainable it is necessary to remove unnecessary code.
  * Otherwise tests are harder to read and reason about.
  * <p>
  * Mockito JUnit Runner triggers <code>UnnecessaryStubbingException</code> only when none of the test methods use the stubbings.

File: src/main/java/org/mockito/exceptions/verification/junit/package-info.java
Patch:
@@ -7,6 +7,6 @@
  * JUnit integration to provide better support for JUnit 4 and
  * earlier in IDEs.
  *
- * @see org.mockito.exceptions.verification.opentest4j
+ * See also org.mockito.exceptions.verification.opentest4j
  */
 package org.mockito.exceptions.verification.junit;

File: src/main/java/org/mockito/exceptions/verification/opentest4j/package-info.java
Patch:
@@ -6,7 +6,6 @@
 /**
  * Integration to provide better support for IDEs that support OpenTest4J.
  *
- * @see org.mocktio.exceptions.verification.junit
- * @see org.mocktio.exceptions.verification.junit4
+ * See also org.mockito.exceptions.verification.junit
  */
 package org.mockito.exceptions.verification.opentest4j;

File: src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -31,7 +31,7 @@
  * <p>
  * However, there are rare cases when partial mocks come handy:
  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
- * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
+ * However, I wouldn't use partial mocks for new, test-driven and well-designed code.
  * <p>
  */
 public class CallsRealMethods implements Answer<Object>, ValidableAnswer, Serializable {

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java
Patch:
@@ -51,7 +51,7 @@ static Object returnTypeForMockWithCorrectGenerics(
     /**
      * Try to resolve the result value using {@link ReturnsEmptyValues} and {@link ReturnsMoreEmptyValues}.
      *
-     * This will try to use all parent class (superclass & interfaces) to retrieve the value..
+     * This will try to use all parent class (superclass and interfaces) to retrieve the value..
      *
      * @param type the return type of the method
      * @return a non-null instance if the type has been resolve. Null otherwise.

File: src/main/java/org/mockito/internal/verification/api/VerificationData.java
Patch:
@@ -26,10 +26,10 @@ public interface VerificationData {
      * The target or wanted invocation.
      * Below example illustrates what is the 'target' invocation:
      * <pre class="code"><code class="java">
-     *   mock.foo();   // <- invocation 1
-     *   mock.bar();   // <- invocation 2
+     *   mock.foo();   // &lt;- invocation 1
+     *   mock.bar();   // &lt;- invocation 2
      *
-     *   verify(mock).bar();  // <- target invocation
+     *   verify(mock).bar();  // &lt;- target invocation
      * </code></pre>
      *
      * Target invocation can contain argument matchers therefore the returned type is {@link MatchableInvocation}

File: src/main/java/org/mockito/invocation/MatchableInvocation.java
Patch:
@@ -14,8 +14,8 @@
  * It is used during verification process:
  *
  * <pre class="code"><code class="java">
- *   mock.foo();   // <- invocation
- *   verify(mock).bar();  // <- matchable invocation
+ *   mock.foo();   // &lt;- invocation
+ *   verify(mock).bar();  // &lt;- matchable invocation
  * </code></pre>
  *
  * @since 2.2.12

File: src/main/java/org/mockito/stubbing/OngoingStubbing.java
Patch:
@@ -164,7 +164,7 @@ OngoingStubbing<T> thenThrow(
      * <p>
      * However, there are rare cases when partial mocks come handy:
      * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
-     * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
+     * However, I wouldn't use partial mocks for new, test-driven and well-designed code.
      * <pre class="code"><code class="java">
      *   // someMethod() must be safe (e.g. doesn't throw, doesn't have dependencies to the object state, etc.)
      *   // if it isn't safe then you will have trouble stubbing it using this api. Use Mockito.doCallRealMethod() instead.
@@ -226,7 +226,7 @@ OngoingStubbing<T> thenThrow(
      * <p>
      * It allows to create a stub in one line of code.
      * This can be helpful to keep test code clean.
-     * For example, some boring stub can be created & stubbed at field initialization in a test:
+     * For example, some boring stub can be created and stubbed at field initialization in a test:
      * <pre class="code"><code class="java">
      * public class CarTest {
      *   Car boringStubbedCar = when(mock(Car.class).shiftGear()).thenThrow(EngineNotStarted.class).getMock();

File: src/main/java/org/mockito/stubbing/VoidAnswer4.java
Patch:
@@ -21,7 +21,7 @@
  *         }
  * })).when(mock).someMethod(anyString(), anyInt(), anyString(), anyChar());
  *
- * //Following will raise an exception with the message "ka-boom <3"
+ * //Following will raise an exception with the message "ka-boom &lt;3"
  * mock.someMethod("%s-boom %c%d", 3, "ka", '&lt;');
  * </code></pre>
  *

File: src/main/java/org/mockito/stubbing/VoidAnswer5.java
Patch:
@@ -21,7 +21,7 @@
  *         }
  * })).when(mock).someMethod(anyString(), anyInt(), anyString(), anyChar(), anyString());
  *
- * //Following will raise an exception with the message "ka-boom <3 mockito"
+ * //Following will raise an exception with the message "ka-boom &lt;3 mockito"
  * mock.someMethod("%s-boom %c%d %s", 3, "ka", '&lt;', "mockito");
  * </code></pre>
  *

File: src/main/java/org/mockito/stubbing/VoidAnswer6.java
Patch:
@@ -21,7 +21,7 @@
  *         }
  * })).when(mock).someMethod(anyString(), anyInt(), anyString(), anyChar(), any(), anyString());
  *
- * // The following will raise an exception with the message "ka-boom <3 mockito"
+ * // The following will raise an exception with the message "ka-boom &lt;3 mockito"
  * mock.someMethod("%s-boom %c%d %s", 3, "ka", '&lt;', new Object(), "mockito");
  * </code></pre>
  *

File: src/test/java/org/mockitoutil/JUnitResultAssert.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.runner.notification.Failure;
 
 /**
- * Assertion utility for cleaner & easier to debug tests that inspect on JUnit's Result object
+ * Assertion utility for cleaner and easier to debug tests that inspect on JUnit's Result object
  */
 public class JUnitResultAssert {
     private Result result;

File: src/main/java/org/mockito/internal/MockedStaticImpl.java
Patch:
@@ -47,6 +47,8 @@ public <S> OngoingStubbing<S> when(Verification verification) {
 
         try {
             verification.apply();
+        } catch (MockitoException exception) {
+            throw exception;
         } catch (Throwable ignored) {
         }
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -252,8 +252,8 @@ private <T> void triggerRetransformation(Set<Class<?>> types, boolean flat) {
                 } else {
                     do {
                         if (mocked.add(type)) {
-                            assureInitialization(type);
                             if (!flatMocked.remove(type)) {
+                                assureInitialization(type);
                                 targets.add(type);
                             }
                             addInterfaces(targets, type.getInterfaces());
@@ -356,6 +356,7 @@ private void addInterfaces(Set<Class<?>> types, Class<?>[] interfaces) {
         for (Class<?> type : interfaces) {
             if (mocked.add(type)) {
                 if (!flatMocked.remove(type)) {
+                    assureInitialization(type);
                     types.add(type);
                 }
                 addInterfaces(types, type.getInterfaces());

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -252,8 +252,8 @@ private <T> void triggerRetransformation(Set<Class<?>> types, boolean flat) {
                 } else {
                     do {
                         if (mocked.add(type)) {
-                            assureInitialization(type);
                             if (!flatMocked.remove(type)) {
+                                assureInitialization(type);
                                 targets.add(type);
                             }
                             addInterfaces(targets, type.getInterfaces());
@@ -356,6 +356,7 @@ private void addInterfaces(Set<Class<?>> types, Class<?>[] interfaces) {
         for (Class<?> type : interfaces) {
             if (mocked.add(type)) {
                 if (!flatMocked.remove(type)) {
+                    assureInitialization(type);
                     types.add(type);
                 }
                 addInterfaces(types, type.getInterfaces());

File: src/main/java/org/mockito/internal/configuration/DefaultDoNotMockEnforcer.java
Patch:
@@ -16,7 +16,7 @@ public String checkTypeForDoNotMockViolation(Class<?> type) {
         for (Annotation annotation : type.getAnnotations()) {
             if (annotation.annotationType().getName().endsWith("org.mockito.DoNotMock")) {
                 String exceptionMessage =
-                        type + " is annotated with @org.mockito.DoNoMock and can't be mocked.";
+                        type + " is annotated with @org.mockito.DoNotMock and can't be mocked.";
                 if (DoNotMock.class.equals(annotation.annotationType())) {
                     exceptionMessage += " " + type.getAnnotation(DoNotMock.class).reason();
                 }

File: src/test/java/org/mockito/PrematureGarbageCollectionTest.java
Patch:
@@ -4,8 +4,10 @@
  */
 package org.mockito;
 
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("https://github.com/mockito/mockito/issues/2478")
 public class PrematureGarbageCollectionTest {
 
     @Test

File: subprojects/memory-test/src/test/java/org/mockito/memorytest/ShouldNotStarveMemoryOnLargeStackTraceInvocationsTest.java
Patch:
@@ -10,8 +10,10 @@
 import static org.mockito.Mockito.when;
 
 import org.junit.Assume;
+import org.junit.Ignore;
 import org.junit.Test;
 
+@Ignore("https://github.com/mockito/mockito/issues/2478")
 public class ShouldNotStarveMemoryOnLargeStackTraceInvocationsTest {
 
     private static final int STACK_TRACE_DEPTH = 1000;

File: src/main/java/org/mockito/internal/util/KotlinInlineClassUtil.java
Patch:
@@ -40,7 +40,7 @@ public static boolean isInlineClassWithAssignableUnderlyingType(
             // If we don't make this check, then we would potentially pass a mock of inline type A
             // into a method
             // that accepts inline type B.
-            inlineClass.getDeclaredMethod("box-impl", underlyingType);
+            Object ignored = inlineClass.getDeclaredMethod("box-impl", underlyingType);
             return true;
         } catch (NoSuchMethodException e) {
             return false;

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1627,8 +1627,6 @@ public class Mockito extends ArgumentMatchers {
      * <code>ReturnsSmartNulls</code> first tries to return ordinary values (zeros, empty collections, empty string, etc.)
      * then it tries to return SmartNull. If the return type is final then plain <code>null</code> is returned.
      * <p>
-     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 4.0.0
-     * <p>
      * Example:
      * <pre class="code"><code class="java">
      *   Foo mock = mock(Foo.class, RETURNS_SMART_NULLS);

File: subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java
Patch:
@@ -21,9 +21,9 @@
 import org.junit.jupiter.api.extension.ParameterResolutionException;
 import org.junit.jupiter.api.extension.ParameterResolver;
 import org.mockito.Mock;
-import org.mockito.MockedStatic;
 import org.mockito.Mockito;
 import org.mockito.MockitoSession;
+import org.mockito.ScopedMock;
 import org.mockito.internal.configuration.MockAnnotationProcessor;
 import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockito.internal.session.MockitoSessionLoggerAdapter;
@@ -181,7 +181,7 @@ private Optional<MockitoSettings> retrieveAnnotationFromTestClasses(final Extens
     @Override
     @SuppressWarnings("unchecked")
     public void afterEach(ExtensionContext context) {
-        context.getStore(MOCKITO).remove(MOCKS, Set.class).forEach(mock -> ((MockedStatic<?>) mock).closeOnDemand());
+        context.getStore(MOCKITO).remove(MOCKS, Set.class).forEach(mock -> ((ScopedMock) mock).closeOnDemand());
         context.getStore(MOCKITO).remove(SESSION, MockitoSession.class)
                 .finishMocking(context.getExecutionException().orElse(null));
     }
@@ -200,7 +200,7 @@ public Object resolveParameter(ParameterContext parameterContext, ExtensionConte
             parameter.getType(),
             parameter::getParameterizedType,
             parameter.getName());
-        if (mock instanceof MockedStatic<?>) {
+        if (mock instanceof ScopedMock) {
             context.getStore(MOCKITO).get(MOCKS, Set.class).add(mock);
         }
         return mock;

File: src/main/java/org/mockito/AdditionalMatchers.java
Patch:
@@ -16,11 +16,11 @@
 import org.mockito.internal.matchers.LessThan;
 
 /**
- * See {@link Matchers} for general info about matchers.
+ * See {@link ArgumentMatchers} for general info about matchers.
  * <p>
  * AdditionalMatchers provides rarely used matchers, kept only for somewhat compatibility with EasyMock.
  * Use additional matchers very judiciously because they may impact readability of a test.
- * It is recommended to use matchers from {@link Matchers} and keep stubbing and verification simple.
+ * It is recommended to use matchers from {@link ArgumentMatchers} and keep stubbing and verification simple.
  * <p>
  * Example of using logical and(), not(), or() matchers:
  *

File: src/main/java/org/mockito/ArgumentMatcher.java
Patch:
@@ -44,7 +44,7 @@
  * </ul>
  *
  * <p>
- * Implementations of this interface can be used with {@link Matchers#argThat} method.
+ * Implementations of this interface can be used with {@link ArgumentMatchers#argThat} method.
  * Use <code>toString()</code> method for description of the matcher
  * - it is printed in verification errors.
  *
@@ -84,7 +84,7 @@
  * </code></pre>
  *
  * <p>
- * Read more about other matchers in javadoc for {@link Matchers} class.
+ * Read more about other matchers in javadoc for {@link ArgumentMatchers} class.
  * <h2>2.1.0 migration guide</h2>
  *
  * All existing custom implementations of <code>ArgumentMatcher</code> will no longer compile.

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -102,8 +102,6 @@ public interface MockingDetails {
      * Don't write code that depends on the output of this method.
      * If you need to know about interactions and stubbings, use {@link #getStubbings()} and {@link #getInvocations()}.
      * <p>
-     * This method was moved from the deprecated and semi-hidden type {@link MockitoDebugger}.
-     * <p>
      * This method throws meaningful exception when object wrapped by MockingDetails is not a mock.
      *
      * @since 2.2.6

File: src/main/java/org/mockito/exceptions/verification/TooFewActualInvocations.java
Patch:
@@ -4,10 +4,12 @@
  */
 package org.mockito.exceptions.verification;
 
+import org.mockito.exceptions.base.MockitoAssertionError;
+
 /**
  * @since 2.27.5
  */
-public class TooFewActualInvocations extends TooLittleActualInvocations {
+public class TooFewActualInvocations extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java
Patch:
@@ -31,8 +31,7 @@
  * @see MockitoAnnotations
  */
 @SuppressWarnings("unchecked")
-public class IndependentAnnotationEngine
-        implements AnnotationEngine, org.mockito.configuration.AnnotationEngine {
+public class IndependentAnnotationEngine implements AnnotationEngine {
     private final Map<Class<? extends Annotation>, FieldAnnotationProcessor<?>>
             annotationProcessorMap = new HashMap<>();
 

File: src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -21,8 +21,7 @@
 /**
  * See {@link MockitoAnnotations}
  */
-public class InjectingAnnotationEngine
-        implements AnnotationEngine, org.mockito.configuration.AnnotationEngine {
+public class InjectingAnnotationEngine implements AnnotationEngine {
     private final AnnotationEngine delegate = new IndependentAnnotationEngine();
     private final AnnotationEngine spyAnnotationEngine = new SpyAnnotationEngine();
 

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -46,8 +46,7 @@
  * <p>This engine will fail, if the field is also annotated with incompatible Mockito annotations.
  */
 @SuppressWarnings({"unchecked"})
-public class SpyAnnotationEngine
-        implements AnnotationEngine, org.mockito.configuration.AnnotationEngine {
+public class SpyAnnotationEngine implements AnnotationEngine {
 
     @Override
     public AutoCloseable process(Class<?> context, Object testInstance) {

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -243,11 +243,11 @@ public static MockitoException invalidUseOfMatchers(
                         "",
                         "This exception may occur if matchers are combined with raw values:",
                         "    //incorrect:",
-                        "    someMethod(anyObject(), \"raw String\");",
+                        "    someMethod(any(), \"raw String\");",
                         "When using matchers, all arguments have to be provided by matchers.",
                         "For example:",
                         "    //correct:",
-                        "    someMethod(anyObject(), eq(\"String by matcher\"));",
+                        "    someMethod(any(), eq(\"String by matcher\"));",
                         "",
                         "For more info see javadoc for Matchers class.",
                         ""));
@@ -626,7 +626,7 @@ public static MockitoException misplacedArgumentMatcher(List<LocalizedMatcher> l
                         "You cannot use argument matchers outside of verification or stubbing.",
                         "Examples of correct usage of argument matchers:",
                         "    when(mock.get(anyInt())).thenReturn(null);",
-                        "    doThrow(new RuntimeException()).when(mock).someVoidMethod(anyObject());",
+                        "    doThrow(new RuntimeException()).when(mock).someVoidMethod(any());",
                         "    verify(mock).someMethod(contains(\"foo\"))",
                         "",
                         "This message may appear after an NullPointerException if the last matcher is returning an object ",

File: src/main/java/org/mockito/stubbing/ValidableAnswer.java
Patch:
@@ -39,7 +39,7 @@
  *
  * <pre class="code"><code class="java">
  * when(mock.someMethod(anyString(), anyInt())).then(doSomethingTricky()); // fail at answer execution time
- * when(mock.incompatibleMethod(anyVararg())).then(doSomethingTricky()); // fail at answer execution time
+ * when(mock.incompatibleMethod(any())).then(doSomethingTricky()); // fail at answer execution time
  * </code></pre>
  * </p>
  *
@@ -48,7 +48,7 @@
  * validable at <em>stub time</em> by implementing this contract.
  *
  * <pre class="code"><code class="java">
- * when(mock.incompatibleMethod(anyVararg())).then(doSomethingTricky()); // fail at answer stub time
+ * when(mock.incompatibleMethod(any())).then(doSomethingTricky()); // fail at answer stub time
  *
  * static Answer doSomethingTricky() {
  *     return new TrickyAnswer();

File: src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;
 import org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker;
 import org.mockito.internal.util.ConsoleMockitoLogger;
-import org.mockito.plugins.InstantiatorProvider;
 import org.mockito.plugins.InstantiatorProvider2;
 import org.mockito.plugins.MockMaker;
 import org.mockito.plugins.MockitoLogger;
@@ -23,7 +22,6 @@ public class DefaultMockitoPluginsTest extends TestBase {
     private DefaultMockitoPlugins plugins = new DefaultMockitoPlugins();
 
     @Test
-    @SuppressWarnings("deprecation")
     public void provides_plugins() throws Exception {
         assertEquals(
                 "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker",
@@ -34,7 +32,6 @@ public void provides_plugins() throws Exception {
                 plugins.getDefaultPluginClass(PROXY_ALIAS));
         assertEquals(
                 ByteBuddyMockMaker.class, plugins.getDefaultPlugin(MockMaker.class).getClass());
-        assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider.class));
         assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider2.class));
         assertEquals(
                 ConsoleMockitoLogger.class,

File: src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 
 import java.io.File;

File: src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willThrow;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;

File: src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.junit.Assert.*;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 
 import java.lang.reflect.Field;

File: src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java
Patch:
@@ -136,7 +136,7 @@ public void shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue() throws
                 .doThrow(new IllegalStateException())
                 .doNothing()
                 .when(tool.accessor)
-                .set(any(Field.class), anyObject(), anyObject());
+                .set(any(Field.class), any(), any());
 
         // when
         tool.copyToMock(from, to);

File: src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
Patch:
@@ -73,7 +73,7 @@ public void should_be_created_with_an_argument_resolver() throws Exception {
     public void should_instantiate_type_if_resolver_provide_matching_types() throws Exception {
         Observer observer = mock(Observer.class);
         Map map = mock(Map.class);
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>anyVararg()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
                 .willReturn(new Object[] {observer, map});
 
         new ParameterizedConstructorInstantiator(this, field("withMultipleConstructor"), resolver)
@@ -104,7 +104,7 @@ this, field("withMultipleConstructor"), resolver)
 
     @Test
     public void should_report_failure_if_constructor_throws_exception() throws Exception {
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>anyVararg()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
                 .willReturn(new Object[] {null});
 
         try {
@@ -120,7 +120,7 @@ this, field("withThrowingConstructor"), resolver)
     @Test
     public void should_instantiate_type_with_vararg_constructor() throws Exception {
         Observer[] vararg = new Observer[] {};
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>anyVararg()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
                 .willReturn(new Object[] {"", vararg});
 
         new ParameterizedConstructorInstantiator(this, field("withVarargConstructor"), resolver)

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willAnswer;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verify;
 
 import java.util.Date;

File: src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
Patch:
@@ -300,7 +300,7 @@ public void should_serialize_object_mock() throws Exception {
     @Test
     public void should_serialize_real_partial_mock() throws Exception {
         // given
-        when(anyMock.matches(anyObject())).thenCallRealMethod();
+        when(anyMock.matches(any())).thenCallRealMethod();
 
         // when
         ByteArrayOutputStream serialized = serializeMock(anyMock);

File: src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -312,7 +312,7 @@ public void should_serialize_object_mock() throws Exception {
     public void should_serialize_real_partial_mock() throws Exception {
         // given
         Any mock = mock(Any.class, withSettings().serializable());
-        when(mock.matches(anyObject())).thenCallRealMethod();
+        when(mock.matches(any())).thenCallRealMethod();
 
         // when
         ByteArrayOutputStream serialized = serializeMock(mock);

File: src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
Patch:
@@ -20,7 +20,7 @@ public interface Fun {
     public void shouldAllowPassingNullArgument() {
         // given
         Fun mockFun = mock(Fun.class);
-        when(mockFun.doFun((String) anyObject())).thenReturn("value");
+        when(mockFun.doFun((String) any())).thenReturn("value");
 
         // when
         mockFun.doFun(null);

File: src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockitousage.bugs;
 
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 
 import org.junit.Test;
 import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;
@@ -29,7 +29,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
                             }
                         });
         test.m1();
-        verifyZeroInteractions(test);
+        verifyNoInteractions(test);
     }
 
     @Test(expected = WrongTypeOfReturnValue.class)

File: src/test/java/org/mockitousage/bugs/CompareMatcherTest.java
Patch:
@@ -6,8 +6,8 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalMatchers.leq;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.startsWith;
+import static org.mockito.ArgumentMatchers.argThat;
+import static org.mockito.ArgumentMatchers.startsWith;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.bugs;
 
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java
Patch:
@@ -94,7 +94,7 @@ public void should_not_call_listener_when_mock_is_not_called() {
         doReturn("java").when(mock).giveMeSomeString("coffee");
 
         // then
-        verifyZeroInteractions(listener);
+        verifyNoInteractions(listener);
     }
 
     @Test
@@ -170,7 +170,7 @@ public void should_clear_listeners() {
         mock.doSomething("foo");
 
         // then
-        verifyZeroInteractions(listener, listener2);
+        verifyNoInteractions(listener, listener2);
     }
 
     @Test

File: src/test/java/org/mockitousage/examples/use/ExampleTest.java
Patch:
@@ -89,7 +89,7 @@ public void shouldPersistRecalculatedArticle() {
 
         InOrder inOrder = inOrder(mockDatabase, mockCalculator);
 
-        inOrder.verify(mockCalculator).countNumberOfRelatedArticles((Article) anyObject());
-        inOrder.verify(mockDatabase, atLeastOnce()).save((Article) anyObject());
+        inOrder.verify(mockCalculator).countNumberOfRelatedArticles(any());
+        inOrder.verify(mockDatabase, atLeastOnce()).save(any());
     }
 }

File: src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockitousage.matchers;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.argThat;
+import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.Mockito.verify;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/matchers/CustomMatchersTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/matchers/GenericMatchersTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.matchers;
 
-import static org.mockito.Matchers.anyObject;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import java.util.Date;
@@ -29,7 +29,7 @@ private interface Foo {
     @Test
     public void shouldCompile() {
         when(sorter.convertDate(new Date())).thenReturn("one");
-        when(sorter.convertDate((Date) anyObject())).thenReturn("two");
+        when(sorter.convertDate((Date) any())).thenReturn("two");
 
         // following requires warning suppression but allows setting anyList()
         when(sorter.sort(ArgumentMatchers.<String>anyList())).thenReturn(null);

File: src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.when;
 
@@ -41,8 +41,8 @@ public void should_detect_wrong_number_of_matchers_when_stubbing() {
     @Test
     public void should_detect_stupid_use_of_matchers_when_verifying() {
         mock.oneArg(true);
-        eq("that's the stupid way");
-        eq("of using matchers");
+        Object ignored = eq("that's the stupid way");
+        ignored = eq("of using matchers");
         try {
             Mockito.verify(mock).oneArg(true);
             fail();

File: src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java
Patch:
@@ -4,8 +4,8 @@
  */
 package org.mockitousage.matchers;
 
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.verify;
 
 import org.junit.Ignore;
@@ -31,7 +31,7 @@ public class MatchersMixedWithRawArgumentsTest extends TestBase {
     // float: max-1
 
     // 1. how objenesis deal with primitive arrays (like byte[])?
-    // 2. Analisys of all matchers used by R2 project finished before anyObject() and so far proves
+    // 2. Analisys of all matchers used by R2 project finished before any() and so far proves
     // it's a good idea.
 
     @Ignore("prototyping new feature that allows to avoid eq() matchers when raw args passed")

File: src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.matchers;
 
-import static org.mockito.Matchers.refEq;
+import static org.mockito.ArgumentMatchers.refEq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -39,9 +39,6 @@ public void tryDescriptiveMessagesOnMisuse() {
         //        verifyNoMoreInteractions();
         //        verifyNoMoreInteractions(null);
         //        verifyNoMoreInteractions("");
-        //        verifyZeroInteractions();
-        //        verifyZeroInteractions(null);
-        //        verifyZeroInteractions("");
         //
         //        inOrder();
         //        inOrder(null);

File: src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockitousage.misuse;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyObject;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -46,7 +46,7 @@ public void shouldDetectUnfinishedStubbing() {
 
     @Test
     public void shouldDetectMisplacedArgumentMatcher() {
-        anyObject();
+        Object ignored = any();
         try {
             Mockito.validateMockitoUsage();
             fail();

File: src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.spies;
 
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.spy;
 
 import java.util.Collection;

File: src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -158,7 +158,7 @@ public void shouldMentionFinalAndObjectMethodsWhenVerifying() {
 
     @Test
     public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher() {
-        when(mock.equals(anyObject())).thenReturn(false);
+        when(mock.equals(any())).thenReturn(false);
     }
 
     @Test

File: src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -64,7 +64,7 @@ public void should_stubbing_not_be_treated_as_interaction() {
         when(mock.simpleMethod("one")).thenThrow(new RuntimeException());
         doThrow(new RuntimeException()).when(mock).simpleMethod("two");
 
-        verifyZeroInteractions(mock);
+        verifyNoInteractions(mock);
     }
 
     @Test
@@ -85,7 +85,7 @@ public void unfinished_stubbing_cleans_up_the_state() {
         }
 
         // anything that can cause state validation
-        verifyZeroInteractions(mock);
+        verifyNoInteractions(mock);
     }
 
     @Test

File: src/test/java/org/mockitousage/verification/OnlyVerificationTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.only;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockito/internal/creation/proxy/ProxyMockMakerTest.java
Patch:
@@ -42,10 +42,11 @@ public void should_create_mock_from_interface_with_extra_interface() {
 
     @Test
     public void should_discover_mockable_input() {
-        assertThat(mockMaker.isTypeMockable(Object.class).mockable()).isFalse();
-        assertThat(mockMaker.isTypeMockable(Object.class).nonMockableReason())
+        assertThat(mockMaker.isTypeMockable(Number.class).mockable()).isFalse();
+        assertThat(mockMaker.isTypeMockable(Number.class).nonMockableReason())
                 .isEqualTo("non-interface");
         assertThat(mockMaker.isTypeMockable(SomeInterface.class).mockable()).isTrue();
+        assertThat(mockMaker.isTypeMockable(Object.class).mockable()).isTrue();
     }
 
     @Test

File: src/test/java/org/mockito/internal/creation/proxy/ProxyMockMakerTest.java
Patch:
@@ -55,7 +55,7 @@ public void can_compute_hash_code() throws Throwable {
 
         InvocationHandler handler = Proxy.getInvocationHandler(proxy);
 
-        assertThat(handler.invoke(proxy, Object.class.getMethod("hashCode"), new Object[0]))
+        assertThat(handler.invoke(proxy, Object.class.getMethod("hashCode"), null))
                 .isEqualTo(System.identityHashCode(proxy));
     }
 
@@ -93,8 +93,7 @@ public void can_invoke_toString() throws Throwable {
 
         InvocationHandler handler = Proxy.getInvocationHandler(proxy);
 
-        assertThat(handler.invoke(proxy, Object.class.getMethod("toString"), new Object[0]))
-                .isNull();
+        assertThat(handler.invoke(proxy, Object.class.getMethod("toString"), null)).isNull();
     }
 
     interface SomeInterface {}

File: src/main/java/org/mockito/internal/creation/proxy/ProxyMockMaker.java
Patch:
@@ -107,7 +107,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                     case "equals":
                         return proxy == args[0];
                     case "toString":
-                        return "";
+                        break;
                     default:
                         throw new MockitoException(
                                 join(

File: src/main/java/org/mockito/internal/creation/proxy/ProxyMockMaker.java
Patch:
@@ -107,7 +107,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                     case "equals":
                         return proxy == args[0];
                     case "toString":
-                        return "";
+                        break;
                     default:
                         throw new MockitoException(
                                 join(

File: src/test/java/org/mockito/internal/creation/bytebuddy/TypeCachingMockBytecodeGeneratorTest.java
Patch:
@@ -145,7 +145,7 @@ public void ensure_cache_returns_different_instance_serializableMode() throws Ex
     }
 
     @Test
-    public void ensure_cache_returns_different_instance_defaultAnswer() throws Exception {
+    public void ensure_cache_returns_same_instance_defaultAnswer() throws Exception {
         // given
         ClassLoader classloader_with_life_shorter_than_cache =
                 inMemoryClassLoader()
@@ -174,10 +174,10 @@ public void ensure_cache_returns_different_instance_defaultAnswer() throws Excep
                                     SerializableMode.NONE,
                                     false,
                                     answer));
-            assertThat(classes.add(klass)).isTrue();
+            assertThat(classes.add(klass)).isFalse();
         }
 
-        assertThat(classes).hasSize(answers.length + 1);
+        assertThat(classes).hasSize(1);
     }
 
     @Test

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -344,7 +344,9 @@ private <T> void checkSupportedCombination(
         if (subclassingRequired
                 && !features.mockedType.isArray()
                 && !features.mockedType.isPrimitive()
-                && Modifier.isFinal(features.mockedType.getModifiers())) {
+                && (Modifier.isFinal(features.mockedType.getModifiers())
+                        || TypeSupport.INSTANCE.isSealed(features.mockedType)
+                        || features.interfaces.stream().anyMatch(TypeSupport.INSTANCE::isSealed))) {
             throw new MockitoException(
                     "Unsupported settings with this type '" + features.mockedType.getName() + "'");
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMaker.java
Patch:
@@ -393,7 +393,8 @@ public <T> Class<? extends T> createMockType(MockCreationSettings<T> settings) {
                             settings.getTypeToMock(),
                             settings.getExtraInterfaces(),
                             settings.getSerializableMode(),
-                            settings.isStripAnnotations()));
+                            settings.isStripAnnotations(),
+                            settings.getDefaultAnswer()));
         } catch (Exception bytecodeGenerationFailed) {
             throw prettifyFailure(settings, bytecodeGenerationFailed);
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -79,7 +79,8 @@ public <T> Class<? extends T> createMockType(MockCreationSettings<T> settings) {
                             settings.getTypeToMock(),
                             settings.getExtraInterfaces(),
                             settings.getSerializableMode(),
-                            settings.isStripAnnotations()));
+                            settings.isStripAnnotations(),
+                            settings.getDefaultAnswer()));
         } catch (Exception bytecodeGenerationFailed) {
             throw prettifyFailure(settings, bytecodeGenerationFailed);
         }

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -77,7 +77,7 @@ public String toString() {
 
     @Override
     public boolean matches(Invocation candidate) {
-        return invocation.getMock().equals(candidate.getMock())
+        return invocation.getMock() == candidate.getMock()
                 && hasSameMethod(candidate)
                 && argumentsMatch(candidate);
     }

File: src/test/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java
Patch:
@@ -114,7 +114,7 @@ public void toArray_just_work() throws Exception {
 
     @Test(expected = CloneNotSupportedException.class)
     public void cloneIsNotSupported() throws CloneNotSupportedException {
-        HashCodeAndEqualsSafeSet.of().clone();
+        Object ignored = HashCodeAndEqualsSafeSet.of().clone();
     }
 
     @Test

File: src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
Patch:
@@ -43,6 +43,6 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
                             }
                         });
 
-        test.toString();
+        String ignored = test.toString();
     }
 }

File: src/test/java/org/mockitousage/performance/StubOnlyAvoidMemoryConsumptionTest.java
Patch:
@@ -17,7 +17,7 @@ public void using_stub_only_wont_thrown_an_OutOfMemoryError() {
         when(obj.toString()).thenReturn("asdf");
 
         for (int i = 0; i < 1000000; i++) {
-            obj.toString();
+            String ignored = obj.toString();
         }
     }
 
@@ -28,7 +28,7 @@ public void without_stub_only_mocks_will_store_invocations_leading_to_an_OutOfMe
         when(obj.toString()).thenReturn("asdf");
 
         for (int i = 0; i < 1000000; i++) {
-            obj.toString();
+            String ignored = obj.toString();
         }
     }
 }

File: src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java
Patch:
@@ -119,7 +119,7 @@ public void shouldNotThrowSmartNullPointerOnToString() {
     @Test
     public void shouldNotThrowSmartNullPointerOnObjectMethods() {
         Object smartNull = mock.objectReturningMethod();
-        smartNull.toString();
+        String ignored = smartNull.toString();
     }
 
     @Test

File: src/main/java/org/mockito/MockitoAnnotations.java
Patch:
@@ -103,7 +103,7 @@ public static void initMocks(Object testClass) {
                     join(
                             "Failed to release mocks",
                             "",
-                            "This should not happen unless you are using a third-part mock maker"),
+                            "This should not happen unless you are using a third-party mock maker"),
                     e);
         }
     }

File: src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldStubbingWork() {
 
     @Test
     public void shouldVerificationWorks() {
-        iterable.iterator();
+        MyIterator<String> unused = iterable.iterator();
 
         verify(iterable).iterator();
         verify((Iterable<String>) iterable).iterator();
@@ -70,8 +70,8 @@ public Object invoke(Object proxy, Method method, Object[] args)
                                 handler);
 
         // when
-        iterable.iterator();
-        ((Iterable<String>) iterable).iterator();
+        MyIterator<String> unused = iterable.iterator();
+        Iterator<String> unused2 = ((Iterable<String>) iterable).iterator();
 
         // then
         assertEquals(2, methods.size());

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -40,7 +40,7 @@ public void shouldAnswerWithThenAnswerAlias() throws Exception {
         RecordCall recordCall = new RecordCall();
         Set<?> mockedSet = (Set<?>) when(mock(Set.class).isEmpty()).then(recordCall).getMock();
 
-        mockedSet.isEmpty();
+        boolean unused = mockedSet.isEmpty();
 
         assertTrue(recordCall.isCalled());
     }

File: src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java
Patch:
@@ -31,6 +31,6 @@ public ArgumentsAreDifferent(String message, String wanted, String actual) {
 
     @Override
     public String getMessage() {
-        return removeFirstLine(super.toString());
+        return removeFirstLine(super.getMessage());
     }
 }

File: src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java
Patch:
@@ -31,6 +31,6 @@ public ArgumentsAreDifferent(String message, String wanted, String actual) {
 
     @Override
     public String getMessage() {
-        return removeFirstLine(super.toString());
+        return removeFirstLine(super.getMessage());
     }
 }

File: src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java
Patch:
@@ -46,9 +46,9 @@ public void pure_mockito_should_not_depend_JUnit___ByteBuddy() throws Exception
         // loaded.
         checkDependency(
                 classLoader_without_JUnit,
-                "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker");
+                "org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker");
         pureMockitoAPIClasses.remove(
-                "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker");
+                "org.mockito.internal.creation.bytebuddy.InlineDelegateByteBuddyMockMaker");
 
         for (String pureMockitoAPIClass : pureMockitoAPIClasses) {
             checkDependency(classLoader_without_JUnit, pureMockitoAPIClass);

File: src/main/java/org/mockito/AdditionalAnswers.java
Patch:
@@ -39,7 +39,7 @@
  * @since 1.9.5
  */
 @SuppressWarnings("unchecked")
-public class AdditionalAnswers {
+public final class AdditionalAnswers {
     /**
      * Returns the first parameter of an invocation.
      *
@@ -529,4 +529,6 @@ public static <T, A, B, C, D, E, F> Answer<T> answer(Answer6<T, A, B, C, D, E, F
     public static <A, B, C, D, E, F> Answer<Void> answerVoid(VoidAnswer6<A, B, C, D, E, F> answer) {
         return toAnswer(answer);
     }
+
+    private AdditionalAnswers() {}
 }

File: src/main/java/org/mockito/AdditionalMatchers.java
Patch:
@@ -38,7 +38,7 @@
  * Scroll down to see all methods - full list of matchers.
  */
 @SuppressWarnings("ALL")
-public class AdditionalMatchers {
+public final class AdditionalMatchers {
 
     /**
      * argument greater than or equal the given value.
@@ -1054,4 +1054,6 @@ public static float eq(float value, float delta) {
     private static void reportMatcher(ArgumentMatcher<?> matcher) {
         mockingProgress().getArgumentMatcherStorage().reportMatcher(matcher);
     }
+
+    private AdditionalMatchers() {}
 }

File: src/main/java/org/mockito/Answers.java
Patch:
@@ -94,6 +94,7 @@ public Answer<Object> get() {
         return this;
     }
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return implementation.answer(invocation);
     }

File: src/main/java/org/mockito/MockedStatic.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito;
 
+import static org.mockito.Mockito.times;
+
 import org.mockito.stubbing.OngoingStubbing;
 import org.mockito.verification.VerificationMode;
 
-import static org.mockito.Mockito.*;
-
 /**
  * Represents an active mock of a type's static methods. The mocking only affects the thread
  * on which this static mock was created and it is not safe to use this object from another

File: src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java
Patch:
@@ -17,6 +17,7 @@
  */
 public class DefaultMockitoConfiguration implements IMockitoConfiguration {
 
+    @Override
     public Answer<Object> getDefaultAnswer() {
         return new ReturnsEmptyValues();
     }
@@ -31,13 +32,15 @@ public AnnotationEngine getAnnotationEngine() {
     /* (non-Javadoc)
      * @see org.mockito.configuration.IMockitoConfiguration#cleansStackTrace()
      */
+    @Override
     public boolean cleansStackTrace() {
         return true;
     }
 
     /* (non-Javadoc)
      * @see org.mockito.configuration.IMockitoConfiguration#enableClassCache()
      */
+    @Override
     public boolean enableClassCache() {
         return true;
     }

File: src/main/java/org/mockito/creation/instance/Instantiator.java
Patch:
@@ -17,5 +17,5 @@ public interface Instantiator {
      *
      * @since 2.15.4
      */
-    <T> T newInstance(Class<T> cls) throws InstantiationException;
+    <T> T newInstance(Class<T> cls);
 }

File: src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java
Patch:
@@ -30,7 +30,7 @@ public ArgumentsAreDifferent(String message, String wanted, String actual) {
     }
 
     @Override
-    public String toString() {
+    public String getMessage() {
         return removeFirstLine(super.toString());
     }
 }

File: src/main/java/org/mockito/hamcrest/MockitoHamcrest.java
Patch:
@@ -45,7 +45,7 @@
  *
  * @since 2.1.0
  */
-public class MockitoHamcrest {
+public final class MockitoHamcrest {
 
     /**
      * Allows matching arguments with hamcrest matchers.
@@ -179,4 +179,6 @@ private static <T> void reportMatcher(Matcher<T> matcher) {
                 .getArgumentMatcherStorage()
                 .reportMatcher(new HamcrestArgumentMatcher<T>(matcher));
     }
+
+    private MockitoHamcrest() {}
 }

File: src/main/java/org/mockito/internal/MockedConstructionImpl.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal;
 
+import static org.mockito.internal.util.StringUtil.join;
+
 import java.util.Collections;
 import java.util.List;
 
@@ -13,8 +15,6 @@
 import org.mockito.invocation.Location;
 import org.mockito.plugins.MockMaker;
 
-import static org.mockito.internal.util.StringUtil.*;
-
 public final class MockedConstructionImpl<T> implements MockedConstruction<T> {
 
     private final MockMaker.ConstructionMockControl<T> control;

File: src/main/java/org/mockito/internal/SuppressSignatureCheck.java
Patch:
@@ -4,7 +4,9 @@
  */
 package org.mockito.internal;
 
-import java.lang.annotation.*;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 
 @Retention(RetentionPolicy.CLASS)
 @Documented

File: src/main/java/org/mockito/internal/configuration/CaptorAnnotationProcessor.java
Patch:
@@ -15,6 +15,7 @@
  * Instantiate {@link ArgumentCaptor} a field annotated by &#64;Captor.
  */
 public class CaptorAnnotationProcessor implements FieldAnnotationProcessor<Captor> {
+    @Override
     public Object process(Captor annotation, Field field) {
         Class<?> type = field.getType();
         if (!ArgumentCaptor.class.isAssignableFrom(type)) {

File: src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java
Patch:
@@ -34,8 +34,7 @@
 public class IndependentAnnotationEngine
         implements AnnotationEngine, org.mockito.configuration.AnnotationEngine {
     private final Map<Class<? extends Annotation>, FieldAnnotationProcessor<?>>
-            annotationProcessorMap =
-                    new HashMap<Class<? extends Annotation>, FieldAnnotationProcessor<?>>();
+            annotationProcessorMap = new HashMap<>();
 
     public IndependentAnnotationEngine() {
         registerAnnotationProcessor(Mock.class, new MockAnnotationProcessor());
@@ -52,6 +51,7 @@ private <A extends Annotation> FieldAnnotationProcessor<A> forAnnotation(A annot
                     annotationProcessorMap.get(annotation.annotationType());
         }
         return new FieldAnnotationProcessor<A>() {
+            @Override
             public Object process(A annotation, Field field) {
                 return null;
             }

File: src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -42,6 +42,7 @@ public class InjectingAnnotationEngine
      *
      * @see org.mockito.plugins.AnnotationEngine#process(Class, Object)
      */
+    @Override
     public AutoCloseable process(Class<?> clazz, Object testInstance) {
         List<AutoCloseable> closeables = new ArrayList<>();
         closeables.addAll(processIndependentAnnotations(testInstance.getClass(), testInstance));
@@ -104,7 +105,7 @@ public void injectMocks(Object testClassInstance) {
      */
     private AutoCloseable injectCloseableMocks(final Object testClassInstance) {
         Class<?> clazz = testClassInstance.getClass();
-        Set<Field> mockDependentFields = new HashSet<Field>();
+        Set<Field> mockDependentFields = new HashSet<>();
         Set<Object> mocks = newMockSafeHashSet();
 
         while (clazz != Object.class) {

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -140,7 +140,8 @@ private static Constructor<?> noArgConstructorOf(Class<?> type) {
             throw new MockitoException(
                     "Please ensure that the type '"
                             + type.getSimpleName()
-                            + "' has a no-arg constructor.");
+                            + "' has a no-arg constructor.",
+                    e);
         }
         return constructor;
     }

File: src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java
Patch:
@@ -17,6 +17,7 @@ public abstract class MockInjectionStrategy {
      */
     public static MockInjectionStrategy nop() {
         return new MockInjectionStrategy() {
+            @Override
             protected boolean processInjection(
                     Field field, Object fieldOwner, Set<Object> mockCandidates) {
                 return false;

File: src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -68,12 +68,14 @@ public class PropertyAndSetterInjection extends MockInjectionStrategy {
 
     private final ListUtil.Filter<Field> notFinalOrStatic =
             new ListUtil.Filter<Field>() {
+                @Override
                 public boolean isOut(Field object) {
                     return Modifier.isFinal(object.getModifiers())
                             || Modifier.isStatic(object.getModifiers());
                 }
             };
 
+    @Override
     public boolean processInjection(
             Field injectMocksField, Object injectMocksFieldOwner, Set<Object> mockCandidates) {
         FieldInitializationReport report =

File: src/main/java/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
Patch:
@@ -18,6 +18,7 @@ public NameBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;
     }
 
+    @Override
     public OngoingInjector filterCandidate(
             final Collection<Object> mocks,
             final Field candidateFieldToBeInjected,
@@ -42,7 +43,7 @@ private boolean tooMany(Collection<Object> mocks) {
 
     private List<Object> selectMatchingName(
             Collection<Object> mocks, Field candidateFieldToBeInjected) {
-        List<Object> mockNameMatches = new ArrayList<Object>();
+        List<Object> mockNameMatches = new ArrayList<>();
         for (Object mock : mocks) {
             if (candidateFieldToBeInjected.getName().equals(getMockName(mock).toString())) {
                 mockNameMatches.add(mock);

File: src/main/java/org/mockito/internal/configuration/injection/filter/OngoingInjector.java
Patch:
@@ -25,6 +25,7 @@ public interface OngoingInjector {
      */
     OngoingInjector nop =
             new OngoingInjector() {
+                @Override
                 public Object thenInject() {
                     return null;
                 }

File: src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java
Patch:
@@ -23,6 +23,7 @@
  * </ul>
  */
 public class TerminalMockCandidateFilter implements MockCandidateFilter {
+    @Override
     public OngoingInjector filterCandidate(
             final Collection<Object> mocks,
             final Field candidateFieldToBeInjected,

File: src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
Patch:
@@ -17,12 +17,13 @@ public TypeBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;
     }
 
+    @Override
     public OngoingInjector filterCandidate(
             final Collection<Object> mocks,
             final Field candidateFieldToBeInjected,
             final List<Field> allRemainingCandidateFields,
             final Object injectee) {
-        List<Object> mockTypeMatches = new ArrayList<Object>();
+        List<Object> mockTypeMatches = new ArrayList<>();
         for (Object mock : mocks) {
             if (candidateFieldToBeInjected.getType().isAssignableFrom(mock.getClass())) {
                 mockTypeMatches.add(mock);

File: src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java
Patch:
@@ -46,7 +46,7 @@ public void addTo(Set<Field> mockDependentFields) {
      */
     @SuppressWarnings("unchecked")
     private Set<Field> scan() {
-        Set<Field> mockDependentFields = new HashSet<Field>();
+        Set<Field> mockDependentFields = new HashSet<>();
         Field[] fields = clazz.getDeclaredFields();
         for (Field field : fields) {
             if (null != field.getAnnotation(InjectMocks.class)) {

File: src/main/java/org/mockito/internal/configuration/plugins/DefaultPluginSwitch.java
Patch:
@@ -7,6 +7,7 @@
 import org.mockito.plugins.PluginSwitch;
 
 class DefaultPluginSwitch implements PluginSwitch {
+    @Override
     public boolean isEnabled(String pluginClassName) {
         return true;
     }

File: src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java
Patch:
@@ -58,11 +58,11 @@ <T> T loadPlugin(final Class<T> pluginType) {
      * @return An object of either {@code preferredPluginType} or {@code alternatePluginType}
      */
     @SuppressWarnings("unchecked")
-    <PreferredType, AlternateType> Object loadPlugin(
-            final Class<PreferredType> preferredPluginType,
+    <PreferredT, AlternateType> Object loadPlugin(
+            final Class<PreferredT> preferredPluginType,
             final Class<AlternateType> alternatePluginType) {
         try {
-            PreferredType preferredPlugin = initializer.loadImpl(preferredPluginType);
+            PreferredT preferredPlugin = initializer.loadImpl(preferredPluginType);
             if (preferredPlugin != null) {
                 return preferredPlugin;
             } else if (alternatePluginType != null) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java
Patch:
@@ -57,6 +57,8 @@ public static boolean isConstructorMock(String identifier, Class<?> type) {
         return DISPATCHERS.get(identifier).isConstructorMock(type);
     }
 
+    public abstract boolean isConstructorMock(Class<?> type);
+
     @SuppressWarnings("unused")
     public static Object handleConstruction(
             String identifier,
@@ -85,6 +87,4 @@ public abstract Object handleConstruction(
     public abstract boolean isMockedStatic(Class<?> type);
 
     public abstract boolean isOverridden(Object instance, Method origin);
-
-    public abstract boolean isConstructorMock(Class<?> type);
 }

File: src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java
Patch:
@@ -34,12 +34,13 @@ public ConstructorInstantiator(boolean hasOuterClassInstance, Object... construc
         this.constructorArgs = constructorArgs;
     }
 
+    @Override
     public <T> T newInstance(Class<T> cls) {
         return withParams(cls, constructorArgs);
     }
 
     private <T> T withParams(Class<T> cls, Object... params) {
-        List<Constructor<?>> matchingConstructors = new LinkedList<Constructor<?>>();
+        List<Constructor<?>> matchingConstructors = new LinkedList<>();
         try {
             for (Constructor<?> constructor : cls.getDeclaredConstructors()) {
                 Class<?>[] types = constructor.getParameterTypes();
@@ -54,7 +55,7 @@ private <T> T withParams(Class<T> cls, Object... params) {
         } catch (Exception e) {
             throw paramsException(cls, e);
         }
-        if (matchingConstructors.size() == 0) {
+        if (matchingConstructors.isEmpty()) {
             throw noMatchingConstructor(cls);
         } else {
             throw multipleMatchingConstructors(cls, matchingConstructors);

File: src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java
Patch:
@@ -12,6 +12,7 @@ public class DefaultInstantiatorProvider implements InstantiatorProvider2 {
 
     private static final Instantiator INSTANCE = new ObjenesisInstantiator();
 
+    @Override
     public Instantiator getInstantiator(MockCreationSettings<?> settings) {
         if (settings != null && settings.getConstructorArgs() != null) {
             return new ConstructorInstantiator(

File: src/main/java/org/mockito/internal/creation/instance/InstantiatorProvider2Adapter.java
Patch:
@@ -22,7 +22,7 @@ public InstantiatorProvider2Adapter(InstantiatorProvider2 provider) {
     public Instantiator getInstantiator(final MockCreationSettings<?> settings) {
         return new Instantiator() {
             @Override
-            public <T> T newInstance(Class<T> cls) throws InstantiationException {
+            public <T> T newInstance(Class<T> cls) {
                 try {
                     return provider.getInstantiator(settings).newInstance(cls);
                 } catch (org.mockito.creation.instance.InstantiationException e) {

File: src/main/java/org/mockito/internal/creation/instance/InstantiatorProviderAdapter.java
Patch:
@@ -24,7 +24,7 @@ public InstantiatorProviderAdapter(InstantiatorProvider provider) {
     public Instantiator getInstantiator(final MockCreationSettings<?> settings) {
         return new Instantiator() {
             @Override
-            public <T> T newInstance(Class<T> cls) throws InstantiationException {
+            public <T> T newInstance(Class<T> cls) {
                 try {
                     return provider.getInstantiator(settings).newInstance(cls);
                 } catch (org.mockito.internal.creation.instance.InstantiationException e) {

File: src/main/java/org/mockito/internal/creation/instance/ObjenesisInstantiator.java
Patch:
@@ -17,6 +17,7 @@ class ObjenesisInstantiator implements Instantiator {
     private final ObjenesisStd objenesis =
             new ObjenesisStd(new GlobalConfiguration().enableClassCache());
 
+    @Override
     public <T> T newInstance(Class<T> cls) {
         return objenesis.newInstance(cls);
     }

File: src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java
Patch:
@@ -30,7 +30,7 @@ public String printInvocations(Object mock) {
             if (x == 1) {
                 sb.append("[Mockito] Interactions of: ").append(mock).append("\n");
             }
-            sb.append(" ").append(x++).append(". ").append(i.toString()).append("\n");
+            sb.append(" ").append(x++).append(". ").append(i).append("\n");
             sb.append("  ").append(i.getLocation()).append("\n");
             if (i.stubInfo() != null) {
                 sb.append("   - stubbed ").append(i.stubInfo().stubbedAt()).append("\n");
@@ -41,6 +41,7 @@ public String printInvocations(Object mock) {
                 ListUtil.filter(
                         stubbings,
                         new ListUtil.Filter<Stubbing>() {
+                            @Override
                             public boolean isOut(Stubbing s) {
                                 return s.wasUsed();
                             }

File: src/main/java/org/mockito/internal/debugging/LocationImpl.java
Patch:
@@ -55,7 +55,7 @@ private void computeStackTraceInformation(
             this.stackTraceLine = "-> at <<unknown line>>";
             this.sourceFile = "<unknown source file>";
         } else {
-            this.stackTraceLine = "-> at " + filtered.toString();
+            this.stackTraceLine = "-> at " + filtered;
             this.sourceFile = filtered.getFileName();
         }
     }

File: src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java
Patch:
@@ -31,7 +31,7 @@ public String printInvocations(Object... mocks) {
             out += line(i.toString());
             out += line(" invoked: " + i.getLocation());
             if (i.stubInfo() != null) {
-                out += line(" stubbed: " + i.stubInfo().stubbedAt().toString());
+                out += line(" stubbed: " + i.stubInfo().stubbedAt());
             }
         }
 

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -18,7 +18,7 @@ public class WarningsCollector {
     private final List<Object> createdMocks;
 
     public WarningsCollector() {
-        createdMocks = new LinkedList<Object>();
+        createdMocks = new LinkedList<>();
     }
 
     public String getWarnings() {

File: src/main/java/org/mockito/internal/debugging/WarningsFinder.java
Patch:
@@ -21,9 +21,8 @@ public WarningsFinder(List<Invocation> unusedStubs, List<InvocationMatcher> allI
     }
 
     public void find(FindingsListener findingsListener) {
-        List<Invocation> unusedStubs = new LinkedList<Invocation>(this.baseUnusedStubs);
-        List<InvocationMatcher> allInvocations =
-                new LinkedList<InvocationMatcher>(this.baseAllInvocations);
+        List<Invocation> unusedStubs = new LinkedList<>(this.baseUnusedStubs);
+        List<InvocationMatcher> allInvocations = new LinkedList<>(this.baseAllInvocations);
 
         Iterator<Invocation> unusedIterator = unusedStubs.iterator();
         while (unusedIterator.hasNext()) {

File: src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java
Patch:
@@ -12,6 +12,7 @@
  */
 public class DefaultStackTraceCleanerProvider implements StackTraceCleanerProvider {
 
+    @Override
     public StackTraceCleaner getStackTraceCleaner(StackTraceCleaner defaultCleaner) {
         return defaultCleaner;
     }

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -47,7 +47,7 @@ public class StackTraceFilter implements Serializable {
     public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         // TODO: profile
         // TODO: investigate "keepTop" commit history - no effect!
-        final List<StackTraceElement> filtered = new ArrayList<StackTraceElement>();
+        final List<StackTraceElement> filtered = new ArrayList<>();
         for (StackTraceElement element : target) {
             if (CLEANER.isIn(element)) {
                 filtered.add(element);

File: src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java
Patch:
@@ -18,12 +18,14 @@
 
 public class DefaultMockitoFramework implements MockitoFramework {
 
+    @Override
     public MockitoFramework addListener(MockitoListener listener) {
         Checks.checkNotNull(listener, "listener");
         mockingProgress().addListener(listener);
         return this;
     }
 
+    @Override
     public MockitoFramework removeListener(MockitoListener listener) {
         Checks.checkNotNull(listener, "listener");
         mockingProgress().removeListener(listener);

File: src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java
Patch:
@@ -17,6 +17,7 @@ public HamcrestArgumentMatcher(Matcher<T> matcher) {
         this.matcher = matcher;
     }
 
+    @Override
     public boolean matches(Object argument) {
         return this.matcher.matches(argument);
     }
@@ -25,6 +26,7 @@ public boolean isVarargMatcher() {
         return matcher instanceof VarargMatcher;
     }
 
+    @Override
     public String toString() {
         // TODO SF add unit tests and integ test coverage for toString()
         return StringDescription.toString(matcher);

File: src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -28,6 +28,7 @@ public InvocationNotifierHandler(MockHandler<T> mockHandler, MockCreationSetting
         this.invocationListeners = settings.getInvocationListeners();
     }
 
+    @Override
     public Object handle(Invocation invocation) throws Throwable {
         try {
             Object returnedValue = mockHandler.handle(invocation);
@@ -61,10 +62,12 @@ private void notifyMethodCallException(Invocation invocation, Throwable exceptio
         }
     }
 
+    @Override
     public MockCreationSettings<T> getMockSettings() {
         return mockHandler.getMockSettings();
     }
 
+    @Override
     public InvocationContainer getInvocationContainer() {
         return mockHandler.getInvocationContainer();
     }

File: src/main/java/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -45,6 +45,7 @@ public MockHandlerImpl(MockCreationSettings<T> mockSettings) {
         this.invocationContainer = new InvocationContainerImpl(mockSettings);
     }
 
+    @Override
     public Object handle(Invocation invocation) throws Throwable {
         if (invocationContainer.hasAnswersForStubbing()) {
             // stubbing voids with doThrow() or doAnswer() style
@@ -121,10 +122,12 @@ public Object handle(Invocation invocation) throws Throwable {
         }
     }
 
+    @Override
     public MockCreationSettings<T> getMockSettings() {
         return mockSettings;
     }
 
+    @Override
     public InvocationContainer getInvocationContainer() {
         return invocationContainer;
     }

File: src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java
Patch:
@@ -28,6 +28,7 @@ public Invocation createInvocation(
         return createInvocation(target, settings, method, superMethod, args);
     }
 
+    @Override
     public Invocation createInvocation(
             Object target,
             MockCreationSettings settings,

File: src/main/java/org/mockito/internal/invocation/InvocationComparator.java
Patch:
@@ -12,7 +12,8 @@
  * Compares invocations based on the sequence number
  */
 public class InvocationComparator implements Comparator<Invocation> {
+    @Override
     public int compare(Invocation o1, Invocation o2) {
-        return Integer.valueOf(o1.getSequenceNumber()).compareTo(o2.getSequenceNumber());
+        return Integer.compare(o1.getSequenceNumber(), o2.getSequenceNumber());
     }
 }

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -47,7 +47,7 @@ public InvocationMatcher(Invocation invocation) {
     }
 
     public static List<InvocationMatcher> createFrom(List<Invocation> invocations) {
-        LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>();
+        LinkedList<InvocationMatcher> out = new LinkedList<>();
         for (Invocation i : invocations) {
             out.add(new InvocationMatcher(i));
         }

File: src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java
Patch:
@@ -74,7 +74,9 @@ public static MatcherApplicationStrategy getMatcherApplicationStrategyFor(
      *         </ul>
      */
     public boolean forEachMatcherAndArgument(ArgumentMatcherAction action) {
-        if (matchingType == ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS) return false;
+        if (matchingType == ERROR_UNSUPPORTED_NUMBER_OF_MATCHERS) {
+            return false;
+        }
 
         Object[] arguments = invocation.getArguments();
         for (int i = 0; i < arguments.length; i++) {

File: src/main/java/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -23,7 +23,7 @@ public InvocationMatcher bindMatchers(
         List<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();
         validateMatchers(invocation, lastMatchers);
 
-        List<ArgumentMatcher> matchers = new LinkedList<ArgumentMatcher>();
+        List<ArgumentMatcher> matchers = new LinkedList<>();
         for (LocalizedMatcher m : lastMatchers) {
             matchers.add(m.getMatcher());
         }

File: src/main/java/org/mockito/internal/invocation/StubInfoImpl.java
Patch:
@@ -18,6 +18,7 @@ public StubInfoImpl(DescribedInvocation stubbedAt) {
         this.stubbedAt = stubbedAt;
     }
 
+    @Override
     public Location stubbedAt() {
         return stubbedAt.getLocation();
     }

File: src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java
Patch:
@@ -30,7 +30,9 @@ public boolean apply(ArgumentMatcher matcher, Object argument) {
      * {@link ClassCastException}.
      */
     private static boolean isCompatible(ArgumentMatcher<?> argumentMatcher, Object argument) {
-        if (argument == null) return true;
+        if (argument == null) {
+            return true;
+        }
 
         Class<?> expectedArgumentType = getArgumentType(argumentMatcher);
 

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -20,7 +20,7 @@ public class UnusedStubsFinder {
      * @param mocks full list of mocks
      */
     public List<Invocation> find(List<?> mocks) {
-        List<Invocation> unused = new LinkedList<Invocation>();
+        List<Invocation> unused = new LinkedList<>();
         for (Object mock : mocks) {
             List<Stubbing> fromSingleMock =
                     MockUtil.getInvocationContainer(mock).getStubbingsDescending();

File: src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java
Patch:
@@ -23,6 +23,7 @@ public static List<Invocation> find(List<?> mocks) {
     }
 
     private static class RemoveIgnoredForVerification implements Filter<Invocation> {
+        @Override
         public boolean isOut(Invocation invocation) {
             return invocation.isIgnoredForVerification();
         }

File: src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java
Patch:
@@ -34,6 +34,7 @@ class DefaultStubbingLookupListener implements StubbingLookupListener, Serializa
         this.currentStrictness = strictness;
     }
 
+    @Override
     public void onStubbingLookup(StubbingLookupEvent event) {
         Strictness actualStrictness =
                 determineStrictness(
@@ -64,7 +65,7 @@ public void onStubbingLookup(StubbingLookupEvent event) {
 
     private static List<Invocation> potentialArgMismatches(
             Invocation invocation, Collection<Stubbing> stubbings) {
-        List<Invocation> matchingStubbings = new LinkedList<Invocation>();
+        List<Invocation> matchingStubbings = new LinkedList<>();
         for (Stubbing s : stubbings) {
             if (UnusedStubbingReporting.shouldBeReported(s)
                     && s.getInvocation()

File: src/main/java/org/mockito/internal/junit/JUnitRule.java
Patch:
@@ -27,10 +27,12 @@ public Statement apply(
                 base, target.getClass().getSimpleName() + "." + method.getName(), target);
     }
 
+    @Override
     public MockitoRule silent() {
         return strictness(Strictness.LENIENT);
     }
 
+    @Override
     public MockitoRule strictness(Strictness strictness) {
         sessionStore.setStrictness(strictness);
         return this;

File: src/main/java/org/mockito/internal/junit/JUnitSessionStore.java
Patch:
@@ -25,6 +25,7 @@ class JUnitSessionStore {
 
     Statement createStatement(final Statement base, final String methodName, final Object target) {
         return new Statement() {
+            @Override
             public void evaluate() throws Throwable {
                 AutoCloseable closeable;
                 if (session == null) {

File: src/main/java/org/mockito/internal/junit/JUnitTestRule.java
Patch:
@@ -25,10 +25,12 @@ public Statement apply(Statement base, Description description) {
         return sessionStore.createStatement(base, description.getDisplayName(), this.testInstance);
     }
 
+    @Override
     public MockitoTestRule silent() {
         return strictness(Strictness.LENIENT);
     }
 
+    @Override
     public MockitoTestRule strictness(Strictness strictness) {
         sessionStore.setStrictness(strictness);
         return this;

File: src/main/java/org/mockito/internal/junit/NoOpTestListener.java
Patch:
@@ -8,7 +8,9 @@
 
 public class NoOpTestListener implements MockitoTestListener {
 
+    @Override
     public void testFinished(TestFinishedEvent event) {}
 
+    @Override
     public void onMockCreated(Object mock, MockCreationSettings settings) {}
 }

File: src/main/java/org/mockito/internal/junit/StubbingHint.java
Patch:
@@ -25,7 +25,8 @@ void appendLine(Object... elements) {
         }
     }
 
+    @Override
     public String toString() {
-        return hint.toString() + "\n";
+        return hint + "\n";
     }
 }

File: src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java
Patch:
@@ -21,7 +21,7 @@
  */
 public class UnnecessaryStubbingsReporter implements MockCreationListener {
 
-    private List<Object> mocks = new LinkedList<Object>();
+    private final List<Object> mocks = new LinkedList<Object>();
 
     public void validateUnusedStubs(Class<?> testClass, RunNotifier notifier) {
         Collection<Invocation> unused =

File: src/main/java/org/mockito/internal/junit/UnusedStubbings.java
Patch:
@@ -43,6 +43,7 @@ public int size() {
         return unused.size();
     }
 
+    @Override
     public String toString() {
         return unused.toString();
     }
@@ -52,7 +53,7 @@ void reportUnused() {
             return;
         }
 
-        List<Invocation> invocations = new LinkedList<Invocation>();
+        List<Invocation> invocations = new LinkedList<>();
         for (Stubbing stubbing : unused) {
             invocations.add(stubbing.getInvocation());
         }

File: src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java
Patch:
@@ -35,6 +35,7 @@ public UnusedStubbings getUnusedStubbings(Iterable<Object> mocks) {
                 filter(
                         stubbings,
                         new Filter<Stubbing>() {
+                            @Override
                             public boolean isOut(Stubbing s) {
                                 return !UnusedStubbingReporting.shouldBeReported(s);
                             }
@@ -58,7 +59,7 @@ public Collection<Invocation> getUnusedStubbingsByLocation(Iterable<Object> mock
 
         // 1st pass, collect all the locations of the stubbings that were used
         // note that those are _not_ locations where the stubbings was used
-        Set<String> locationsOfUsedStubbings = new HashSet<String>();
+        Set<String> locationsOfUsedStubbings = new HashSet<>();
         for (Stubbing s : stubbings) {
             if (!UnusedStubbingReporting.shouldBeReported(s)) {
                 String location = s.getInvocation().getLocation().toString();
@@ -71,7 +72,7 @@ public Collection<Invocation> getUnusedStubbingsByLocation(Iterable<Object> mock
         // Also, using map to deduplicate reported unused stubbings
         // if unused stubbing appear in the setup method / constructor we don't want to report it
         // per each test case
-        Map<String, Invocation> out = new LinkedHashMap<String, Invocation>();
+        Map<String, Invocation> out = new LinkedHashMap<>();
         for (Stubbing s : stubbings) {
             String location = s.getInvocation().getLocation().toString();
             if (!locationsOfUsedStubbings.contains(location)) {

File: src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Stubbing;
 
-public class StubbingLookupNotifier {
+public final class StubbingLookupNotifier {
 
     public static void notifyStubbedAnswerLookup(
             Invocation invocation,
@@ -69,4 +69,6 @@ public MockCreationSettings getMockSettings() {
             return mockSettings;
         }
     }
+
+    private StubbingLookupNotifier() {}
 }

File: src/main/java/org/mockito/internal/matchers/Any.java
Patch:
@@ -12,10 +12,12 @@ public class Any implements ArgumentMatcher<Object>, VarargMatcher, Serializable
 
     public static final Any ANY = new Any();
 
+    @Override
     public boolean matches(Object actual) {
         return true;
     }
 
+    @Override
     public String toString() {
         return "<any>";
     }

File: src/main/java/org/mockito/internal/matchers/ArrayEquals.java
Patch:
@@ -13,6 +13,7 @@ public ArrayEquals(Object wanted) {
         super(wanted);
     }
 
+    @Override
     public boolean matches(Object actual) {
         Object wanted = getWanted();
         if (wanted == null || actual == null) {
@@ -39,6 +40,7 @@ public boolean matches(Object actual) {
         return false;
     }
 
+    @Override
     public String toString() {
         if (getWanted() != null && getWanted().getClass().isArray()) {
             return appendArray(createObjectArray(getWanted()));
@@ -51,7 +53,7 @@ private String appendArray(Object[] array) {
         // TODO SF overlap with ValuePrinter
         StringBuilder out = new StringBuilder("[");
         for (int i = 0; i < array.length; i++) {
-            out.append(new Equals(array[i]).toString());
+            out.append(new Equals(array[i]));
             if (i != array.length - 1) {
                 out.append(", ");
             }

File: src/main/java/org/mockito/internal/matchers/Contains.java
Patch:
@@ -16,10 +16,12 @@ public Contains(String substring) {
         this.substring = substring;
     }
 
+    @Override
     public boolean matches(String actual) {
         return actual != null && actual.contains(substring);
     }
 
+    @Override
     public String toString() {
         return "contains(\"" + substring + "\")";
     }

File: src/main/java/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -16,10 +16,12 @@ public EndsWith(String suffix) {
         this.suffix = suffix;
     }
 
+    @Override
     public boolean matches(String actual) {
         return actual != null && actual.endsWith(suffix);
     }
 
+    @Override
     public String toString() {
         return "endsWith(\"" + suffix + "\")";
     }

File: src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -18,6 +18,7 @@ public EqualsWithDelta(Number value, Number delta) {
         this.delta = delta;
     }
 
+    @Override
     public boolean matches(Number actual) {
         if (wanted == null ^ actual == null) {
             return false;
@@ -31,6 +32,7 @@ public boolean matches(Number actual) {
                 && actual.doubleValue() <= wanted.doubleValue() + delta.doubleValue();
     }
 
+    @Override
     public String toString() {
         return "eq(" + wanted + ", " + delta + ")";
     }

File: src/main/java/org/mockito/internal/matchers/Find.java
Patch:
@@ -17,11 +17,13 @@ public Find(String regex) {
         this.regex = regex;
     }
 
+    @Override
     public boolean matches(String actual) {
         return actual != null && Pattern.compile(regex).matcher(actual).find();
     }
 
+    @Override
     public String toString() {
-        return "find(\"" + regex.replaceAll("\\\\", "\\\\\\\\") + "\")";
+        return "find(\"" + regex.replace("\\", "\\\\") + "\")";
     }
 }

File: src/main/java/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -12,7 +12,7 @@
 public class InstanceOf implements ArgumentMatcher<Object>, Serializable {
 
     private final Class<?> clazz;
-    private String description;
+    private final String description;
 
     public InstanceOf(Class<?> clazz) {
         this(clazz, "isA(" + clazz.getCanonicalName() + ")");
@@ -23,12 +23,14 @@ public InstanceOf(Class<?> clazz, String describedAs) {
         this.description = describedAs;
     }
 
+    @Override
     public boolean matches(Object actual) {
         return (actual != null)
                 && (Primitives.isAssignableFromWrapper(actual.getClass(), clazz)
                         || clazz.isAssignableFrom(actual.getClass()));
     }
 
+    @Override
     public String toString() {
         return description;
     }

File: src/main/java/org/mockito/internal/matchers/Matches.java
Patch:
@@ -21,11 +21,13 @@ public Matches(Pattern pattern) {
         this.pattern = pattern;
     }
 
+    @Override
     public boolean matches(Object actual) {
         return (actual instanceof String) && pattern.matcher((String) actual).find();
     }
 
+    @Override
     public String toString() {
-        return "matches(\"" + pattern.pattern().replaceAll("\\\\", "\\\\\\\\") + "\")";
+        return "matches(\"" + pattern.pattern().replace("\\", "\\\\") + "\")";
     }
 }

File: src/main/java/org/mockito/internal/matchers/Not.java
Patch:
@@ -17,10 +17,12 @@ public Not(ArgumentMatcher<?> matcher) {
         this.matcher = matcher;
     }
 
+    @Override
     public boolean matches(Object actual) {
         return !matcher.matches(actual);
     }
 
+    @Override
     public String toString() {
         return "not(" + matcher + ")";
     }

File: src/main/java/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -14,10 +14,12 @@ public class NotNull implements ArgumentMatcher<Object>, Serializable {
 
     private NotNull() {}
 
+    @Override
     public boolean matches(Object actual) {
         return actual != null;
     }
 
+    @Override
     public String toString() {
         return "notNull()";
     }

File: src/main/java/org/mockito/internal/matchers/Null.java
Patch:
@@ -14,10 +14,12 @@ public class Null implements ArgumentMatcher<Object>, Serializable {
 
     private Null() {}
 
+    @Override
     public boolean matches(Object actual) {
         return actual == null;
     }
 
+    @Override
     public String toString() {
         return "isNull()";
     }

File: src/main/java/org/mockito/internal/matchers/Or.java
Patch:
@@ -18,10 +18,12 @@ public Or(ArgumentMatcher<?> m1, ArgumentMatcher<?> m2) {
         this.m2 = m2;
     }
 
+    @Override
     public boolean matches(Object actual) {
         return m1.matches(actual) || m2.matches(actual);
     }
 
+    @Override
     public String toString() {
         return "or(" + m1 + ", " + m2 + ")";
     }

File: src/main/java/org/mockito/internal/matchers/Same.java
Patch:
@@ -17,10 +17,12 @@ public Same(Object wanted) {
         this.wanted = wanted;
     }
 
+    @Override
     public boolean matches(Object actual) {
         return wanted == actual;
     }
 
+    @Override
     public String toString() {
         return "same(" + ValuePrinter.print(wanted) + ")";
     }

File: src/main/java/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -16,10 +16,12 @@ public StartsWith(String prefix) {
         this.prefix = prefix;
     }
 
+    @Override
     public boolean matches(String actual) {
         return actual != null && actual.startsWith(prefix);
     }
 
+    @Override
     public String toString() {
         return "startsWith(\"" + prefix + "\")";
     }

File: src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -18,10 +18,12 @@ public ReflectionEquals(Object wanted, String... excludeFields) {
         this.excludeFields = excludeFields;
     }
 
+    @Override
     public boolean matches(Object actual) {
         return EqualsBuilder.reflectionEquals(wanted, actual, excludeFields);
     }
 
+    @Override
     public String toString() {
         return "refEq(" + wanted + ")";
     }

File: src/main/java/org/mockito/internal/matchers/text/MatchersPrinter.java
Patch:
@@ -27,7 +27,7 @@ public String getArgumentsBlock(List<ArgumentMatcher> matchers, PrintSettings pr
 
     private Iterator<FormattedText> applyPrintSettings(
             List<ArgumentMatcher> matchers, PrintSettings printSettings) {
-        List<FormattedText> out = new LinkedList<FormattedText>();
+        List<FormattedText> out = new LinkedList<>();
         int i = 0;
         for (final ArgumentMatcher matcher : matchers) {
             if (matcher instanceof ContainsExtraTypeInfo && printSettings.extraTypeInfoFor(i)) {

File: src/main/java/org/mockito/internal/progress/SequenceNumber.java
Patch:
@@ -4,11 +4,13 @@
  */
 package org.mockito.internal.progress;
 
-public class SequenceNumber {
+public final class SequenceNumber {
 
     private static int sequenceNumber = 1;
 
     public static synchronized int next() {
         return sequenceNumber++;
     }
+
+    private SequenceNumber() {}
 }

File: src/main/java/org/mockito/internal/reporting/Pluralizer.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.reporting;
 
-public class Pluralizer {
+public final class Pluralizer {
 
     public static String pluralize(int number) {
         return number == 1 ? "1 time" : number + " times";
@@ -17,4 +17,6 @@ public static String were_exactly_x_interactions(int x) {
             return "were exactly " + x + " interactions";
         }
     }
+
+    private Pluralizer() {}
 }

File: src/main/java/org/mockito/internal/reporting/PrintSettings.java
Patch:
@@ -18,7 +18,7 @@ public class PrintSettings {
 
     public static final int MAX_LINE_LENGTH = 45;
     private boolean multiline;
-    private List<Integer> withTypeInfo = new LinkedList<Integer>();
+    private List<Integer> withTypeInfo = new LinkedList<>();
 
     public void setMultiline(boolean multiline) {
         this.multiline = multiline;

File: src/main/java/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -42,7 +42,7 @@ public SmartPrinter(
 
         this.wanted = printSettings.print(wanted);
 
-        List<String> actuals = new ArrayList<String>();
+        List<String> actuals = new ArrayList<>();
         for (Invocation actual : allActualInvocations) {
             actuals.add(printSettings.print(actual));
         }

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -22,9 +22,7 @@
  */
 public class RunnerFactory {
 
-    /**
-     * Creates silent runner implementation
-     */
+    /** Creates silent runner implementation */
     public InternalRunner create(Class<?> klass) throws InvocationTargetException {
         return create(
                 klass,

File: src/main/java/org/mockito/internal/runners/StrictRunner.java
Patch:
@@ -27,6 +27,7 @@ public StrictRunner(InternalRunner runner, Class<?> testClass) {
         this.testClass = testClass;
     }
 
+    @Override
     public void run(RunNotifier notifier) {
         // TODO need to be able to opt in for full stack trace instead of just relying on the stack
         // trace filter
@@ -53,10 +54,12 @@ public void run(RunNotifier notifier) {
         }
     }
 
+    @Override
     public Description getDescription() {
         return runner.getDescription();
     }
 
+    @Override
     public void filter(Filter filter) throws NoTestsRemainException {
         filterRequested = true;
         runner.filter(filter);

File: src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java
Patch:
@@ -19,7 +19,7 @@
 
 public class DefaultMockitoSessionBuilder implements MockitoSessionBuilder {
 
-    private List<Object> testClassInstances = new ArrayList<Object>();
+    private final List<Object> testClassInstances = new ArrayList<Object>();
     private String name;
     private Strictness strictness;
     private MockitoSessionLogger logger;
@@ -69,7 +69,7 @@ public MockitoSession startMocking() {
             effectiveTestClassInstances = emptyList();
             effectiveName = this.name == null ? "<Unnamed Session>" : this.name;
         } else {
-            effectiveTestClassInstances = new ArrayList<Object>(testClassInstances);
+            effectiveTestClassInstances = new ArrayList<>(testClassInstances);
             Object lastTestClassInstance = testClassInstances.get(testClassInstances.size() - 1);
             effectiveName =
                     this.name == null ? lastTestClassInstance.getClass().getName() : this.name;

File: src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java
Patch:
@@ -16,6 +16,7 @@ public class ConsecutiveStubbing<T> extends BaseStubbing<T> {
         this.invocationContainer = invocationContainer;
     }
 
+    @Override
     public OngoingStubbing<T> thenAnswer(Answer<?> answer) {
         invocationContainer.addConsecutiveAnswer(answer);
         return this;

File: src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java
Patch:
@@ -16,7 +16,7 @@
  */
 class DoAnswerStyleStubbing implements Serializable {
 
-    private final List<Answer<?>> answers = new ArrayList<Answer<?>>();
+    private final List<Answer<?>> answers = new ArrayList<>();
     private Strictness stubbingStrictness;
 
     void setAnswers(List<Answer<?>> answers, Strictness stubbingStrictness) {

File: src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * Helps determining the actual strictness given that it can be configured in multiple ways (at mock, at stubbing, in rule)
  */
-public class StrictnessSelector {
+public final class StrictnessSelector {
 
     /**
      * Determines the actual strictness in the following importance order:
@@ -37,4 +37,6 @@ public static Strictness determineStrictness(
 
         return testLevelStrictness;
     }
+
+    private StrictnessSelector() {}
 }

File: src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -20,7 +20,7 @@
 public class StubbedInvocationMatcher extends InvocationMatcher implements Serializable, Stubbing {
 
     private static final long serialVersionUID = 4919105134123672727L;
-    private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();
+    private final Queue<Answer> answers = new ConcurrentLinkedQueue<>();
     private final Strictness strictness;
     private final Object usedAtLock = new Object[0];
     private DescribedInvocation usedAt;
@@ -32,6 +32,7 @@ public StubbedInvocationMatcher(
         this.answers.add(answer);
     }
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         // see ThreadsShareGenerouslyStubbedMockTest
         Answer a;
@@ -51,6 +52,7 @@ public void markStubUsed(DescribedInvocation usedAt) {
         }
     }
 
+    @Override
     public boolean wasUsed() {
         synchronized (usedAtLock) {
             return usedAt != null;

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -31,7 +31,7 @@ public StubberImpl(Strictness strictness) {
         this.strictness = strictness;
     }
 
-    private final List<Answer<?>> answers = new LinkedList<Answer<?>>();
+    private final List<Answer<?>> answers = new LinkedList<>();
 
     @Override
     public <T> T when(T mock) {

File: src/main/java/org/mockito/internal/stubbing/StubbingComparator.java
Patch:
@@ -16,6 +16,7 @@ public class StubbingComparator implements Comparator<Stubbing> {
 
     private final InvocationComparator invocationComparator = new InvocationComparator();
 
+    @Override
     public int compare(Stubbing o1, Stubbing o2) {
         return invocationComparator.compare(o1.getInvocation(), o2.getInvocation());
     }

File: src/main/java/org/mockito/internal/stubbing/answers/AbstractThrowsException.java
Patch:
@@ -19,6 +19,7 @@ public abstract class AbstractThrowsException implements Answer<Object>, Validab
 
     protected abstract Throwable getThrowable();
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Throwable throwable = getThrowable();
         if (throwable == null) {

File: src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java
Patch:
@@ -4,9 +4,9 @@
  */
 package org.mockito.internal.stubbing.answers;
 
-import java.io.Serializable;
-import java.util.concurrent.TimeUnit;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
 
+import java.io.Serializable;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.ValidableAnswer;
@@ -33,7 +33,7 @@ public AnswersWithDelay(final long sleepyTime, final Answer<Object> answer) {
 
     @Override
     public Object answer(final InvocationOnMock invocation) throws Throwable {
-        TimeUnit.MILLISECONDS.sleep(sleepyTime);
+        MILLISECONDS.sleep(sleepyTime);
         return answer.answer(invocation);
     }
 

File: src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -37,6 +37,7 @@
 public class CallsRealMethods implements Answer<Object>, ValidableAnswer, Serializable {
     private static final long serialVersionUID = 9057165148930624087L;
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         if (Modifier.isAbstract(invocation.getMethod().getModifiers())) {
             return RETURNS_DEFAULTS.answer(invocation);

File: src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java
Patch:
@@ -16,6 +16,7 @@
 // TODO this needs documentation and further analysis - what if someone changes the answer?
 // we might think about implementing it straight on MockSettings
 public class ClonesArguments implements Answer<Object> {
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Object[] arguments = invocation.getArguments();
         for (int i = 0; i < arguments.length; i++) {

File: src/main/java/org/mockito/internal/stubbing/answers/Returns.java
Patch:
@@ -22,6 +22,7 @@ public Returns(Object value) {
         this.value = value;
     }
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return value;
     }

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -73,7 +73,9 @@ public void validateFor(InvocationOnMock invocation) {
     }
 
     private int inferWantedArgumentPosition(InvocationOnMock invocation) {
-        if (wantedArgumentPosition == LAST_ARGUMENT) return invocation.getArguments().length - 1;
+        if (wantedArgumentPosition == LAST_ARGUMENT) {
+            return invocation.getArguments().length - 1;
+        }
 
         return wantedArgumentPosition;
     }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java
Patch:
@@ -31,6 +31,7 @@ public ForwardsInvocations(Object delegatedObject) {
         this.delegatedObject = delegatedObject;
     }
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Method mockMethod = invocation.getMethod();
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java
Patch:
@@ -20,6 +20,7 @@ public class GloballyConfiguredAnswer implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = 3585893470101750917L;
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return new GlobalConfiguration().getDefaultAnswer().answer(invocation);
     }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.mock.MockCreationSettings;
 
-class RetrieveGenericsForDefaultAnswers {
+final class RetrieveGenericsForDefaultAnswers {
 
     private static final MockitoCore MOCKITO_CORE = new MockitoCore();
 
@@ -139,4 +139,6 @@ private static Class<?> findTypeFromGenericInArguments(
     interface AnswerCallback {
         Object apply(Class<?> type);
     }
+
+    private RetrieveGenericsForDefaultAnswers() {}
 }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -46,6 +46,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = -7105341425736035847L;
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         GenericMetadataSupport returnTypeGenericMetadata =
                 actualParameterizedType(invocation.getMock())
@@ -192,6 +193,7 @@ private static class DeeplyStubbedAnswer implements Answer<Object>, Serializable
             this.mock = mock;
         }
 
+        @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
             return mock;
         }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -52,6 +52,7 @@ public class ReturnsMoreEmptyValues implements Answer<Object>, Serializable {
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Object ret = delegate.answer(invocation);
         if (ret != null) {

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -73,10 +73,11 @@ private static class ThrowsSmartNullPointer implements Answer {
             this.location = location;
         }
 
+        @Override
         public Object answer(InvocationOnMock currentInvocation) throws Throwable {
             if (isToStringMethod(currentInvocation.getMethod())) {
                 return "SmartNull returned by this unstubbed method call on a mock:\n"
-                        + unstubbedInvocation.toString();
+                        + unstubbedInvocation;
             }
 
             throw smartNullPointerException(unstubbedInvocation.toString(), location);

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java
Patch:
@@ -14,6 +14,7 @@ public class TriesToReturnSelf implements Answer<Object>, Serializable {
 
     private final ReturnsEmptyValues defaultReturn = new ReturnsEmptyValues();
 
+    @Override
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Class<?> methodReturnType = invocation.getMethod().getReturnType();
         Object mock = invocation.getMock();

File: src/main/java/org/mockito/internal/util/ConsoleMockitoLogger.java
Patch:
@@ -8,7 +8,9 @@
 
 public class ConsoleMockitoLogger implements MockitoLogger {
 
-    /* (non-Javadoc)
+    /**
+     * (non-Javadoc)
+     *
      * @see org.mockito.internal.util.Logger#print(java.lang.Object)
      */
     public void log(Object what) {

File: src/main/java/org/mockito/internal/util/MockNameImpl.java
Patch:
@@ -47,6 +47,7 @@ private static String toClassName(Class<?> clazz) {
         return className + ".class";
     }
 
+    @Override
     public boolean isDefault() {
         return defaultName;
     }

File: src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentSet.java
Patch:
@@ -21,11 +21,11 @@ public class WeakConcurrentSet<V> implements Runnable, Iterable<V> {
     public WeakConcurrentSet(Cleaner cleaner) {
         switch (cleaner) {
             case INLINE:
-                target = new WeakConcurrentMap.WithInlinedExpunction<V, Boolean>();
+                target = new WeakConcurrentMap.WithInlinedExpunction<>();
                 break;
             case THREAD:
             case MANUAL:
-                target = new WeakConcurrentMap<V, Boolean>(cleaner == Cleaner.THREAD);
+                target = new WeakConcurrentMap<>(cleaner == Cleaner.THREAD);
                 break;
             default:
                 throw new AssertionError();

File: src/main/java/org/mockito/internal/util/reflection/BeanPropertySetter.java
Patch:
@@ -101,7 +101,7 @@ public boolean set(final Object value) {
     private String setterName(String fieldName) {
         return new StringBuilder(SET_PREFIX)
                 .append(fieldName.substring(0, 1).toUpperCase(Locale.ENGLISH))
-                .append(fieldName.substring(1))
+                .append(fieldName, 1, fieldName.length())
                 .toString();
     }
 

File: src/main/java/org/mockito/internal/verification/AtMost.java
Patch:
@@ -28,6 +28,7 @@ public AtMost(int maxNumberOfInvocations) {
         this.maxNumberOfInvocations = maxNumberOfInvocations;
     }
 
+    @Override
     public void verify(VerificationData data) {
         List<Invocation> invocations = data.getAllInvocations();
         MatchableInvocation wanted = data.getTarget();

File: src/main/java/org/mockito/internal/verification/Description.java
Patch:
@@ -39,8 +39,6 @@ public void verify(VerificationData data) {
         try {
             verification.verify(data);
 
-        } catch (MockitoAssertionError e) {
-            throw new MockitoAssertionError(e, description);
         } catch (AssertionError e) {
             throw new MockitoAssertionError(e, description);
         }

File: src/main/java/org/mockito/internal/verification/InOrderContextImpl.java
Patch:
@@ -12,10 +12,12 @@ public class InOrderContextImpl implements InOrderContext {
 
     final IdentitySet verified = new IdentitySet();
 
+    @Override
     public boolean isVerified(Invocation invocation) {
         return verified.contains(invocation);
     }
 
+    @Override
     public void markVerified(Invocation i) {
         verified.add(i);
     }

File: src/main/java/org/mockito/internal/verification/InOrderWrapper.java
Patch:
@@ -24,6 +24,7 @@ public InOrderWrapper(VerificationInOrderMode mode, InOrderImpl inOrder) {
         this.inOrder = inOrder;
     }
 
+    @Override
     public void verify(VerificationData data) {
         List<Invocation> invocations =
                 VerifiableInvocationsFinder.find(inOrder.getMocksToBeVerifiedInOrder());

File: src/main/java/org/mockito/internal/verification/NoInteractions.java
Patch:
@@ -14,6 +14,7 @@
 
 public class NoInteractions implements VerificationMode {
 
+    @Override
     @SuppressWarnings("unchecked")
     public void verify(VerificationData data) {
         List<Invocation> invocations = data.getAllInvocations();

File: src/main/java/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -19,6 +19,7 @@
 
 public class NoMoreInteractions implements VerificationMode, VerificationInOrderMode {
 
+    @Override
     @SuppressWarnings("unchecked")
     public void verify(VerificationData data) {
         Invocation unverified = findFirstUnverified(data.getAllInvocations());
@@ -27,6 +28,7 @@ public void verify(VerificationData data) {
         }
     }
 
+    @Override
     public void verifyInOrder(VerificationDataInOrder data) {
         List<Invocation> invocations = data.getAllInvocations();
         Invocation unverified = findFirstUnverifiedInOrder(data.getOrderingContext(), invocations);

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -19,6 +19,7 @@
 
 public class Only implements VerificationMode {
 
+    @Override
     @SuppressWarnings("unchecked")
     public void verify(VerificationData data) {
         MatchableInvocation target = data.getTarget();

File: src/main/java/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.mockito.verification.VerificationMode;
 
-public class VerificationModeFactory {
+public final class VerificationModeFactory {
 
     public static VerificationMode atLeastOnce() {
         return atLeast(1);
@@ -54,4 +54,6 @@ public static VerificationMode atMost(int maxNumberOfInvocations) {
     public static VerificationMode description(VerificationMode mode, String description) {
         return new Description(mode, description);
     }
+
+    private VerificationModeFactory() {}
 }

File: src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java
Patch:
@@ -77,6 +77,7 @@ public VerificationOverTimeImpl(
      *
      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout
      */
+    @Override
     public void verify(VerificationData data) {
         AssertionError error = null;
 
@@ -90,8 +91,6 @@ public void verify(VerificationData data) {
                 } else {
                     error = null;
                 }
-            } catch (MockitoAssertionError e) {
-                error = handleVerifyException(e);
             } catch (AssertionError e) {
                 error = handleVerifyException(e);
             }

File: src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java
Patch:
@@ -22,14 +22,17 @@ public VerificationDataInOrderImpl(
         this.wanted = wanted;
     }
 
+    @Override
     public List<Invocation> getAllInvocations() {
         return allInvocations;
     }
 
+    @Override
     public InOrderContext getOrderingContext() {
         return inOrder;
     }
 
+    @Override
     public MatchableInvocation getWanted() {
         return wanted;
     }

File: src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -23,7 +23,7 @@ public static Integer[] getSuspiciouslyNotMatchingArgsIndexes(
             return new Integer[0];
         }
 
-        List<Integer> suspicious = new LinkedList<Integer>();
+        List<Integer> suspicious = new LinkedList<>();
         int i = 0;
         for (ArgumentMatcher m : matchers) {
             if (m instanceof ContainsExtraTypeInfo
@@ -46,6 +46,6 @@ private static boolean safelyMatches(ArgumentMatcher m, Object arg) {
     }
 
     private static boolean toStringEquals(ArgumentMatcher m, Object arg) {
-        return m.toString().equals(arg == null ? "null" : arg.toString());
+        return m.toString().equals(String.valueOf(arg));
     }
 }

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -19,7 +19,7 @@
 import org.mockito.invocation.Location;
 import org.mockito.invocation.MatchableInvocation;
 
-public class AtLeastXNumberOfInvocationsChecker {
+public final class AtLeastXNumberOfInvocationsChecker {
 
     public static void checkAtLeastNumberOfInvocations(
             List<Invocation> invocations, MatchableInvocation wanted, int wantedCount) {
@@ -53,4 +53,6 @@ public static void checkAtLeastNumberOfInvocations(
 
         markVerifiedInOrder(chunk, wanted, orderingContext);
     }
+
+    private AtLeastXNumberOfInvocationsChecker() {}
 }

File: src/main/java/org/mockito/invocation/DescribedInvocation.java
Patch:
@@ -14,6 +14,7 @@ public interface DescribedInvocation {
      *
      * @return the description of this invocation.
      */
+    @Override
     String toString();
 
     /**

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -37,9 +37,8 @@ public interface Invocation extends InvocationOnMock, DescribedInvocation {
      */
     int getSequenceNumber();
 
-    /**
-     * @return the location in code of this invocation.
-     */
+    /** @return the location in code of this invocation. */
+    @Override
     Location getLocation();
 
     /**

File: src/main/java/org/mockito/invocation/Location.java
Patch:
@@ -17,6 +17,7 @@ public interface Location {
      *
      * @return location
      */
+    @Override
     String toString();
 
     /**

File: src/main/java/org/mockito/junit/MockitoJUnit.java
Patch:
@@ -22,7 +22,7 @@
  *
  * @since 1.10.17
  */
-public class MockitoJUnit {
+public final class MockitoJUnit {
 
     /**
      * Creates rule instance that initiates &#064;Mocks
@@ -60,4 +60,6 @@ public static MockitoTestRule testRule(Object testInstance) {
     public static VerificationCollector collector() {
         return new VerificationCollectorImpl();
     }
+
+    private MockitoJUnit() {}
 }

File: src/main/java/org/mockito/junit/MockitoJUnitRunner.java
Patch:
@@ -168,6 +168,7 @@ public Description getDescription() {
         return runner.getDescription();
     }
 
+    @Override
     public void filter(Filter filter) throws NoTestsRemainException {
         // filter is required because without it UnrootedTests show up in Eclipse
         runner.filter(filter);

File: src/main/java/org/mockito/mock/MockName.java
Patch:
@@ -9,9 +9,8 @@
  */
 public interface MockName {
 
-    /**
-     * the name
-     */
+    /** the name */
+    @Override
     String toString();
 
     /**

File: src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java
Patch:
@@ -68,6 +68,7 @@ public Description getDescription() {
         return runner.getDescription();
     }
 
+    @Override
     public void filter(Filter filter) throws NoTestsRemainException {
         // filter is required because without it UnrootedTests show up in Eclipse
         runner.filter(filter);

File: src/main/java/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -59,6 +59,7 @@ public Description getDescription() {
         return super.getDescription();
     }
 
+    @Override
     @Deprecated
     public void filter(Filter filter) throws NoTestsRemainException {
         super.filter(filter);

File: src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java
Patch:
@@ -70,6 +70,7 @@ public Description getDescription() {
         return runner.getDescription();
     }
 
+    @Override
     public void filter(Filter filter) throws NoTestsRemainException {
         // filter is required because without it UnrootedTests show up in Eclipse
         runner.filter(filter);

File: src/main/java/org/mockito/verification/Timeout.java
Patch:
@@ -53,10 +53,12 @@ protected VerificationMode copySelfWithNewVerificationMode(
         return new Timeout(wrappedVerification.copyWithVerificationMode(newVerificationMode));
     }
 
+    @Override
     public VerificationMode atMost(int maxNumberOfInvocations) {
         throw atMostAndNeverShouldNotBeUsedWithTimeout();
     }
 
+    @Override
     public VerificationMode never() {
         throw atMostAndNeverShouldNotBeUsedWithTimeout();
     }

File: src/main/java/org/mockito/ArgumentMatcher.java
Patch:
@@ -61,7 +61,7 @@
  *
  * List mock = mock(List.class);
  *
- * when(mock.addAll(argThat(new ListOfTwoElements))).thenReturn(true);
+ * when(mock.addAll(argThat(new ListOfTwoElements()))).thenReturn(true);
  *
  * mock.addAll(Arrays.asList(&quot;one&quot;, &quot;two&quot;));
  *

File: src/main/java/org/mockito/internal/util/reflection/FieldReader.java
Patch:
@@ -30,7 +30,7 @@ public Object read() {
             return accessor.get(field, target);
         } catch (Exception e) {
             throw new MockitoException(
-                    "Cannot read state from field: " + field + ", on instance: " + target);
+                    "Cannot read state from field: " + field + ", on instance: " + target, e);
         }
     }
 }

File: src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java
Patch:
@@ -40,7 +40,7 @@ public static void checkNumberOfInvocations(
                     new Discrepancy(wantedCount, actualCount), wanted, allLocations);
         }
         if (wantedCount == 0 && actualCount > 0) {
-            throw neverWantedButInvoked(wanted, getAllLocations(actualInvocations));
+            throw neverWantedButInvoked(wanted, actualInvocations);
         }
         if (wantedCount < actualCount) {
             throw tooManyActualInvocations(

File: subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoInternalUsage.java
Patch:
@@ -8,7 +8,6 @@
 
 import com.google.auto.service.AutoService;
 import com.google.errorprone.BugPattern;
-import com.google.errorprone.BugPattern.ProvidesFix;
 import com.google.errorprone.BugPattern.SeverityLevel;
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
@@ -38,8 +37,7 @@
             + " https://www.javadoc.io/doc/org.mockito/mockito-core/. If you believe that there"
             + " is no replacement available in the public API for your use-case, contact the"
             + " Mockito team at https://github.com/mockito/mockito/issues.",
-    severity = SeverityLevel.WARNING,
-    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION)
+    severity = SeverityLevel.WARNING)
 public class MockitoInternalUsage extends BugChecker implements MemberSelectTreeMatcher {
 
   private static final Matcher<Tree> INSIDE_MOCKITO = packageStartsWith("org.mockito");

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -226,7 +226,8 @@ private <T> Collection<Class<? super T>> getAllTypes(Class<T> type) {
     }
 
     private static ElementMatcher<MethodDescription> isGroovyMethod() {
-        return isDeclaredBy(named("groovy.lang.GroovyObjectSupport"));
+        return isDeclaredBy(named("groovy.lang.GroovyObjectSupport"))
+                .or(isAnnotatedWith(named("groovy.transform.Internal")));
     }
 
     private boolean isComingFromJDK(Class<?> type) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -269,9 +269,6 @@ private <T> void triggerRetransformation(Set<Class<?>> types, boolean flat) {
             throw t;
         }
 
-        // The object type does not ever need instrumentation.
-        targets.remove(Object.class);
-
         if (!targets.isEmpty()) {
             try {
                 assureCanReadMockito(targets);

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1573,14 +1573,14 @@
  * In the following example, the <code>Foo</code> type's construction would generate a mock:
  *
  * <pre class="code"><code class="java">
- * assertEquals("foo", Foo.method());
+ * assertEquals("foo", new Foo().method());
  * try (MockedConstruction<Foo> mocked = mockConstruction(Foo.class)) {
  * Foo foo = new Foo();
  * when(foo.method()).thenReturn("bar");
  * assertEquals("bar", foo.method());
  * verify(foo).method();
  * }
- * assertEquals("foo", foo.method());
+ * assertEquals("foo", new Foo().method());
  * </code></pre>
  *
  * Due to the defined scope of the mocked construction, object construction returns to its original behavior once the scope is

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java
Patch:
@@ -193,6 +193,7 @@ public CrossClassLoaderSerializationProxy(Object mockitoMock) throws IOException
          * @return A deserialized instance of the Mockito mock.
          * @throws java.io.ObjectStreamException
          */
+        @SuppressWarnings("BanSerializableRead")
         private Object readResolve() throws ObjectStreamException {
             try {
                 ByteArrayInputStream bis = new ByteArrayInputStream(serializedMock);
@@ -267,6 +268,7 @@ public MockitoMockObjectInputStream(
          * @throws ClassNotFoundException
          */
         @Override
+        @SuppressWarnings("BanSerializableRead")
         protected Class<?> resolveClass(ObjectStreamClass desc)
                 throws IOException, ClassNotFoundException {
             if (notMarkedAsAMockitoMock(readObject())) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -744,7 +744,7 @@ private static void exit(
 
     public static class ForReadObject {
 
-        @SuppressWarnings("unused")
+        @SuppressWarnings({"unused", "BanSerializableRead"})
         public static void doReadObject(
                 @Identifier String identifier,
                 @This MockAccess thiz,

File: subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/AbstractMockitoAnyForPrimitiveType.java
Patch:
@@ -70,7 +70,7 @@ public Description matchMethodInvocation(MethodInvocationTree tree, VisitorState
     }
     if (argumentIndex == -1) {
       throw new IllegalStateException(
-          "Cannot find argument " + tree + " in argument list from " + parentTree);
+          "Cannot find argument " + state.getSourceForNode(tree) + " in argument list from " + state.getSourceForNode(parentTree));
     }
 
     Type parameterType = getParameterType(parentMethod, argumentIndex);

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1582,7 +1582,7 @@
  * </code></pre>
  *
  * Due to the defined scope of the mocked construction, object construction returns to its original behavior once the scope is
- * released. To define mock behavior and to verify static method invocations, use the <code>MockedConstruction</code> that is returned.
+ * released. To define mock behavior and to verify method invocations, use the <code>MockedConstruction</code> that is returned.
  * <p>
  */
 @SuppressWarnings("unchecked")

File: src/main/java/org/mockito/Mock.java
Patch:
@@ -32,7 +32,7 @@
  *       &#064;Mock private ArticleCalculator calculator;
  *       &#064;Mock(name = "database") private ArticleDatabase dbMock;
  *       &#064;Mock(answer = RETURNS_MOCKS) private UserProvider userProvider;
- *       &#064;Mock(extraInterfaces = {Queue.class, Observer.class}) private  articleMonitor;
+ *       &#064;Mock(extraInterfaces = {Queue.class, Observer.class}) private ArticleMonitor articleMonitor;
  *       &#064;Mock(stubOnly = true) private Logger logger;
  *
  *       private ArticleManager manager;

File: src/main/java/org/mockito/Mock.java
Patch:
@@ -32,7 +32,7 @@
  *       &#064;Mock private ArticleCalculator calculator;
  *       &#064;Mock(name = "database") private ArticleDatabase dbMock;
  *       &#064;Mock(answer = RETURNS_MOCKS) private UserProvider userProvider;
- *       &#064;Mock(extraInterfaces = {Queue.class, Observer.class}) private  articleMonitor;
+ *       &#064;Mock(extraInterfaces = {Queue.class, Observer.class}) private ArticleMonitor articleMonitor;
  *       &#064;Mock(stubOnly = true) private Logger logger;
  *
  *       private ArticleManager manager;

File: src/main/java/org/mockito/internal/util/StringUtil.java
Patch:
@@ -60,7 +60,7 @@ public static String join(String start, String linePrefix, Collection<?> lines)
         return out.substring(0, out.length() - 1); // lose last EOL
     }
 
-    public static String decamelizeMatcher(String className) {
+    public static String decamelizeMatcherName(String className) {
         if (className.length() == 0) {
             return "<custom argument matcher>";
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -91,7 +91,8 @@ public InlineBytecodeGenerator(
                 new ByteBuddy()
                         .with(TypeValidation.DISABLED)
                         .with(Implementation.Context.Disabled.Factory.INSTANCE)
-                        .with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE);
+                        .with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE)
+                        .ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()));
         mocked = new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);
         flatMocked = new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);
         String identifier = RandomString.make();

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -91,7 +91,8 @@ public InlineBytecodeGenerator(
                 new ByteBuddy()
                         .with(TypeValidation.DISABLED)
                         .with(Implementation.Context.Disabled.Factory.INSTANCE)
-                        .with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE);
+                        .with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE)
+                        .ignore(isSynthetic().and(not(isConstructor())).or(isDefaultFinalizer()));
         mocked = new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);
         flatMocked = new WeakConcurrentSet<>(WeakConcurrentSet.Cleaner.INLINE);
         String identifier = RandomString.make();

File: src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java
Patch:
@@ -33,7 +33,7 @@ public class SpyOnInjectedFieldsHandler extends MockInjectionStrategy {
     protected boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {
         FieldReader fieldReader = new FieldReader(fieldOwner, field);
 
-        // TODO refoctor : code duplicated in SpyAnnotationEngine
+        // TODO refactor : code duplicated in SpyAnnotationEngine
         if (!fieldReader.isNull() && field.isAnnotationPresent(Spy.class)) {
             try {
                 Object instance = fieldReader.read();

File: src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java
Patch:
@@ -17,8 +17,8 @@ public abstract class MockMethodDispatcher {
             // Do not use Mockito classes in here as this is executed on the boot loader.
             throw new IllegalStateException(
                     MockMethodDispatcher.class.getName()
-                            + " is not loaded by the bootstrap class loader but by "
-                            + classLoader.toString()
+                            + " is not loaded by the bootstrap class loader but by an instance of "
+                            + classLoader.getClass().getName()
                             + ".\n\nThis causes the inline mock maker to not work as expected. "
                             + "Please contact the maintainer of this class loader implementation "
                             + "to assure that this class is never loaded by another class loader. "

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java
Patch:
@@ -259,7 +259,9 @@ public InlineByteBuddyMockMaker() {
         ConstructionCallback onConstruction =
                 (type, object, arguments, parameterTypeNames) -> {
                     if (mockitoConstruction.get()) {
-                        return currentSpied.get();
+                        Object spy = currentSpied.get();
+                        // Avoid that exceptions during spy creation cause class cast exceptions.
+                        return type.isInstance(spy) ? spy : null;
                     } else if (currentConstruction.get() != type) {
                         return null;
                     }

File: src/main/java/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -64,7 +64,7 @@ public IMockitoConfiguration loadConfiguration() {
         }
 
         try {
-            return (IMockitoConfiguration) configClass.newInstance();
+            return (IMockitoConfiguration) configClass.getDeclaredConstructor().newInstance();
         } catch (ClassCastException e) {
             throw new MockitoConfigurationException(
                     "MockitoConfiguration class must implement "

File: src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java
Patch:
@@ -79,7 +79,7 @@ private <T> T create(Class<T> pluginType, String className) {
             // Default implementation. Use our own ClassLoader instead of the context
             // ClassLoader, as the default implementation is assumed to be part of
             // Mockito and may not be available via the context ClassLoader.
-            return pluginType.cast(Class.forName(className).newInstance());
+            return pluginType.cast(Class.forName(className).getDeclaredConstructor().newInstance());
         } catch (Exception e) {
             throw new IllegalStateException(
                     "Internal problem occurred, please report it. "

File: src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java
Patch:
@@ -47,7 +47,7 @@ public <T> T loadImpl(Class<T> service) {
                     classOrAlias = plugins.getDefaultPluginClass(alias);
                 }
                 Class<?> pluginClass = loader.loadClass(classOrAlias);
-                Object plugin = pluginClass.newInstance();
+                Object plugin = pluginClass.getDeclaredConstructor().newInstance();
                 return service.cast(plugin);
             }
             return null;

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -12,7 +12,6 @@
 import java.lang.ref.SoftReference;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Callable;

File: src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java
Patch:
@@ -165,7 +165,7 @@ public void instantiate_fine_when_objenesis_on_the_classpath() throws Exception
                         classpath_with_objenesis);
 
         // when
-        mock_maker_class_loaded_fine_until.newInstance();
+        mock_maker_class_loaded_fine_until.getConstructor().newInstance();
 
         // then everything went fine
     }

File: src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -106,7 +106,7 @@ public void shouldAllowSpyingOnDefaultMethod() throws Exception {
                         .load(iFace.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)
                         .getLoaded();
 
-        Object object = spy(impl.newInstance());
+        Object object = spy(impl.getConstructor().newInstance());
 
         // when
         Assertions.assertThat(impl.getMethod("foo").invoke(object)).isEqualTo((Object) "bar");

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2227,7 +2227,7 @@ public static <T> OngoingStubbing<T> when(T methodCall) {
      * Although it is possible to verify a stubbed invocation, usually <b>it's just redundant</b>.
      * Let's say you've stubbed <code>foo.bar()</code>.
      * If your code cares what <code>foo.bar()</code> returns then something else breaks(often before even <code>verify()</code> gets executed).
-     * If your code doesn't care what <code>get(0)</code> returns then it should not be stubbed.
+     * If your code doesn't care what <code>foo.bar()</code> returns then it should not be stubbed.
      *
      * <p>
      * See examples in javadoc for {@link Mockito} class

File: src/main/java/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -43,6 +43,8 @@ public interface MockingProgress {
 
     void mockingStarted(Object mock, MockCreationSettings settings);
 
+    void mockingStarted(Class<?> mock, MockCreationSettings settings);
+
     void addListener(MockitoListener listener);
 
     void removeListener(MockitoListener listener);

File: src/main/java/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -43,6 +43,8 @@ public interface MockingProgress {
 
     void mockingStarted(Object mock, MockCreationSettings settings);
 
+    void mockingStarted(Class<?> mock, MockCreationSettings settings);
+
     void addListener(MockitoListener listener);
 
     void removeListener(MockitoListener listener);

File: src/main/java/org/mockito/AdditionalAnswers.java
Patch:
@@ -276,7 +276,7 @@ public static <T> Answer<T> returnsArgAt(int position) {
      * This feature suffers from the same drawback as the spy.
      * The mock will call the delegate if you use regular when().then() stubbing style.
      * Since the real implementation is called this might have some side effects.
-     * Therefore you should to use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example:
+     * Therefore you should use the doReturn|Throw|Answer|CallRealMethod stubbing style. Example:
      *
      * <pre class="code"><code class="java">
      *   List listWithDelegate = mock(List.class, AdditionalAnswers.delegatesTo(awesomeList));

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -457,8 +457,8 @@
  *
  *       private ArticleManager manager;
  *
- *       @org.junit.jupiter.api.Test
- *       void testSomethingInJunit5(@Mock ArticleDatabase database) {
+ *       &#064;org.junit.jupiter.api.Test
+ *       void testSomethingInJunit5(&#064;Mock ArticleDatabase database) {
  * </code></pre>
  *
  * <b>Important!</b> This needs to be somewhere in the base class or a test

File: src/main/java/org/mockito/internal/verification/Description.java
Patch:
@@ -41,6 +41,8 @@ public void verify(VerificationData data) {
 
         } catch (MockitoAssertionError e) {
             throw new MockitoAssertionError(e, description);
+        } catch (AssertionError e) {
+            throw new MockitoAssertionError(e, description);
         }
     }
 }

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java
Patch:
@@ -21,7 +21,7 @@ class SubclassInjectionLoader implements SubclassLoader {
             join(
                     "The current JVM does not support any class injection mechanism.",
                     "",
-                    "Currently, Mockito supports injection via neither by method handle lookups or using sun.misc.Unsafe",
+                    "Currently, Mockito supports injection via either by method handle lookups or using sun.misc.Unsafe",
                     "Neither seems to be available on your current JVM.");
 
     private final SubclassLoader loader;

File: src/test/java/org/mockito/internal/matchers/EqualityTest.java
Patch:
@@ -31,6 +31,7 @@ public void shouldKnowIfObjectsAreEqual() throws Exception {
         assertFalse(areEqual(new int[] {1}, new double[] {1.0}));
     }
 
+    @SuppressWarnings("EqualsHashCode")
     private final class BadEquals {
         @Override
         public boolean equals(Object oth) {

File: src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java
Patch:
@@ -24,6 +24,7 @@ public void shouldWork() throws Exception {
         assertFalse(set.contains(new Object()));
     }
 
+    @SuppressWarnings("EqualsHashCode")
     class Fake {
         @Override
         public boolean equals(Object obj) {

File: src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
Patch:
@@ -272,6 +272,7 @@ public void can_extract_interface_type_from_bounds_on_terminal_typeVariable() {
                   ).isEmpty();
     }
 
+    @SuppressWarnings("EqualsHashCode")
     private ParameterizedType parameterizedTypeOf(final Class<?> rawType, final Class<?> ownerType, final Type... actualTypeArguments) {
         return new ParameterizedType() {
             @Override

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -340,6 +340,7 @@ public void should_use_smart_equals_for_primitive_arrays() throws Exception {
         verify(mock).objectArgMethod(new int[]{1, 2});
     }
 
+    @SuppressWarnings("ReturnValueIgnored")
     @Test(expected = ArgumentsAreDifferent.class)
     public void array_equals_should_throw_ArgumentsAreDifferentException_for_non_matching_arguments() {
         List<Object> list = Mockito.mock(List.class);

File: src/main/java/org/mockito/internal/matchers/Matches.java
Patch:
@@ -22,7 +22,7 @@ public Matches(Pattern pattern) {
     }
 
     public boolean matches(Object actual) {
-        return (actual instanceof String) && pattern.matcher((String) actual).matches();
+        return (actual instanceof String) && pattern.matcher((String) actual).find();
     }
 
     public String toString() {

File: src/main/java/org/mockito/ArgumentMatchers.java
Patch:
@@ -121,7 +121,7 @@ public class ArgumentMatchers {
      * <p>
      * See examples in javadoc for {@link ArgumentMatchers} class
      *
-     * This is an alias of: {@link #anyObject()} and {@link #any(java.lang.Class)}
+     * This is an alias of: {@link #anyObject()}
      * </p>
      *
      * <p>
@@ -150,7 +150,7 @@ public static <T> T any() {
      * Matches anything, including <code>null</code>.
      *
      * <p>
-     * This is an alias of: {@link #any()} and {@link #any(java.lang.Class)}.
+     * This is an alias of: {@link #any()}.
      * See examples in javadoc for {@link ArgumentMatchers} class.
      * </p>
      *

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -608,7 +608,7 @@ public void same_matcher_and_nulls() {
     public void nullable_matcher() throws Exception {
         // imagine a Stream.of(...).map(c -> mock.oneArg(c))...
         mock.oneArg((Character) null);
-        mock.oneArg(Character.valueOf('€'));
+        mock.oneArg(Character.valueOf('\u20AC'));
 
         verify(mock, times(2)).oneArg(nullable(Character.class));
     }

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1100,7 +1100,7 @@
  *
  * Mockito introduces serialization across classloader.
  *
- * Like with any other form of serialization, all types in the mock hierarchy have to serializable, inclusing answers.
+ * Like with any other form of serialization, all types in the mock hierarchy have to serializable, including answers.
  * As this serialization mode require considerably more work, this is an opt-in setting.
  *
  * <pre class="code"><code class="java">

File: src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java
Patch:
@@ -33,10 +33,11 @@
  * when(translator.translate("one")).thenReturn("jeden"); // <- stubbing realized during code execution
  * when(translator.translate("two")).thenReturn("dwa"); // <- stubbing never realized
  * ...
+ * </code>
  * </pre>
  * Notice that one of the stubbed methods were never realized in the code under test, during test execution.
  * The stray stubbing might be an oversight of the developer, the artifact of copy-paste
- * or the effect not understanding the test/code.
+ * or the effect of not understanding the test/code.
  * Either way, the developer ends up with unnecessary test code.
  * In order to keep the codebase clean & maintainable it is necessary to remove unnecessary code.
  * Otherwise tests are harder to read and reason about.

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -81,8 +81,7 @@ public interface Invocation extends InvocationOnMock, DescribedInvocation {
     StubInfo stubInfo();
 
     /**
-     * Marks this invocation as stubbed. Passing null resets the invocation state back to not
-     * stubbed.
+     * Marks this invocation as stubbed.
      *
      * @param stubInfo the information about stubbing.
      */

File: src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java
Patch:
@@ -140,7 +140,7 @@ public void doAssert(Throwable t) {
                 assertEquals(filterLineNo("\n" +
                         "Unnecessary stubbings detected.\n" +
                         "Clean & maintainable test code requires zero unnecessary code.\n" +
-                        "There are 2 unnecessary stubbings (click to navigate to relevant line of code):\n" +
+                        "Following stubbings are unnecessary (click to navigate to relevant line of code):\n" +
                         "  1. -> at org.mockitousage.junitrule.StrictJUnitRuleTest.unused_stubs_with_multiple_mocks(StrictJUnitRuleTest.java:0)\n" +
                         "  2. -> at org.mockitousage.junitrule.StrictJUnitRuleTest.unused_stubs_with_multiple_mocks(StrictJUnitRuleTest.java:0)\n" +
                         "Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class."), filterLineNo(t.getMessage()));

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -50,7 +50,7 @@ public void lists_all_unused_stubs_cleanly() {
         assertEquals("\n" +
                         "Unnecessary stubbings detected in test class: HasUnnecessaryStubs\n" +
                         "Clean & maintainable test code requires zero unnecessary code.\n" +
-                        "There are 2 unnecessary stubbings (click to navigate to relevant line of code):\n" +
+                        "Following stubbings are unnecessary (click to navigate to relevant line of code):\n" +
                         "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.",

File: subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoSettings.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.quality.Strictness;
 
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -15,6 +16,7 @@
  * Annotation that can configure Mockito as invoked by the {@link MockitoExtension}.
  */
 @ExtendWith(MockitoExtension.class)
+@Inherited
 @Retention(RUNTIME)
 public @interface MockitoSettings {
 

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -81,7 +81,8 @@ public interface Invocation extends InvocationOnMock, DescribedInvocation {
     StubInfo stubInfo();
 
     /**
-     * Marks this invocation as stubbed.
+     * Marks this invocation as stubbed. Passing null resets the invocation state back to not
+     * stubbed.
      *
      * @param stubInfo the information about stubbing.
      */

File: src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java
Patch:
@@ -140,7 +140,7 @@ public void doAssert(Throwable t) {
                 assertEquals(filterLineNo("\n" +
                         "Unnecessary stubbings detected.\n" +
                         "Clean & maintainable test code requires zero unnecessary code.\n" +
-                        "Following stubbings are unnecessary (click to navigate to relevant line of code):\n" +
+                        "There are 2 unnecessary stubbings (click to navigate to relevant line of code):\n" +
                         "  1. -> at org.mockitousage.junitrule.StrictJUnitRuleTest.unused_stubs_with_multiple_mocks(StrictJUnitRuleTest.java:0)\n" +
                         "  2. -> at org.mockitousage.junitrule.StrictJUnitRuleTest.unused_stubs_with_multiple_mocks(StrictJUnitRuleTest.java:0)\n" +
                         "Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class."), filterLineNo(t.getMessage()));

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -50,7 +50,7 @@ public void lists_all_unused_stubs_cleanly() {
         assertEquals("\n" +
                         "Unnecessary stubbings detected in test class: HasUnnecessaryStubs\n" +
                         "Clean & maintainable test code requires zero unnecessary code.\n" +
-                        "Following stubbings are unnecessary (click to navigate to relevant line of code):\n" +
+                        "There are 2 unnecessary stubbings (click to navigate to relevant line of code):\n" +
                         "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.",

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -81,7 +81,8 @@ public interface Invocation extends InvocationOnMock, DescribedInvocation {
     StubInfo stubInfo();
 
     /**
-     * Marks this invocation as stubbed.
+     * Marks this invocation as stubbed. Passing null resets the invocation state back to not
+     * stubbed.
      *
      * @param stubInfo the information about stubbing.
      */

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -111,7 +111,7 @@ public boolean hasSameMethod(Invocation candidate) {
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 
-        if (m1.getName() != null && m1.getName().equals(m2.getName())) {
+        if (m1.getName() != null && m1.getName().equals(m2.getName()) && m1.getParameterCount() == m2.getParameterCount()) {
             /* Avoid unnecessary cloning */
             Class<?>[] params1 = m1.getParameterTypes();
             Class<?>[] params2 = m2.getParameterTypes();

File: src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java
Patch:
@@ -59,7 +59,7 @@ private static Class<?> getArgumentType(ArgumentMatcher<?> argumentMatcher) {
      * {@link ArgumentMatcher#matches(Object)}
      */
     private static boolean isMatchesMethod(Method method) {
-        if (method.getParameterTypes().length != 1) {
+        if (method.getParameterCount() != 1) {
             return false;
         }
         if (method.isBridge()) {

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -101,10 +101,9 @@ private void validateArgumentTypeCompatibility(Invocation invocation, int argume
     }
 
     private boolean wantedArgIndexIsVarargAndSameTypeAsReturnType(Method method, int argumentPosition) {
-        Class<?>[] parameterTypes = method.getParameterTypes();
         return method.isVarArgs() &&
-              argumentPosition == /* vararg index */ parameterTypes.length - 1 &&
-              method.getReturnType().isAssignableFrom(parameterTypes[argumentPosition]);
+              argumentPosition == /* vararg index */ method.getParameterCount() - 1 &&
+              method.getReturnType().isAssignableFrom(method.getParameterTypes()[argumentPosition]);
     }
 
     private boolean wantedArgumentPositionIsValidForInvocation(InvocationOnMock invocation, int argumentPosition) {

File: src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java
Patch:
@@ -24,7 +24,7 @@ public static boolean isToStringMethod(Method method) {
     public static boolean isCompareToMethod(Method method) {
         return Comparable.class.isAssignableFrom(method.getDeclaringClass())
                 && "compareTo".equals(method.getName())
-                && method.getParameterTypes().length == 1
+                && method.getParameterCount() == 1
                 && method.getParameterTypes()[0] == method.getDeclaringClass();
     }
 }

File: src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java
Patch:
@@ -229,7 +229,7 @@ static class ParameterizedConstructorInstantiator implements ConstructorInstanti
         private final ConstructorArgumentResolver argResolver;
         private final Comparator<Constructor<?>> byParameterNumber = new Comparator<Constructor<?>>() {
             public int compare(Constructor<?> constructorA, Constructor<?> constructorB) {
-                int argLengths = constructorB.getParameterTypes().length - constructorA.getParameterTypes().length;
+                int argLengths = constructorB.getParameterCount() - constructorA.getParameterCount();
                 if (argLengths == 0) {
                     int constructorAMockableParamsSize = countMockableParams(constructorA);
                     int constructorBMockableParamsSize = countMockableParams(constructorB);
@@ -287,7 +287,7 @@ public FieldInitializationReport instantiate() {
         }
 
         private void checkParameterized(Constructor<?> constructor, Field field) {
-            if(constructor.getParameterTypes().length == 0) {
+            if (constructor.getParameterCount() == 0) {
                 throw new MockitoException("the field " + field.getName() + " of type " + field.getType() + " has no parameterized constructor");
             }
         }

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -80,7 +80,7 @@ public StackTraceElement filterFirst(Throwable target, boolean isInline) {
             // The assumption here is that the CLEANER filter will not filter out every single
             // element. However, since we don't want to compute the full length of the stacktrace,
             // we don't know the upper boundary. Therefore, simply increment the counter and go as
-            // far as we have to go, assuming that we get there. If, in the rare occassion, we
+            // far as we have to go, assuming that we get there. If, in the rare occasion, we
             // don't, we fall back to the old slow path.
             while (true) {
                 try {

File: src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -524,7 +524,7 @@ public Class<?> rawType() {
             try {
                 return Class.forName(stringBuilder.append("L").append(rawComponentType.getName()).append(";").toString(), false, rawComponentType.getClassLoader());
             } catch (ClassNotFoundException e) {
-                throw new IllegalStateException("This was not supposed to happend", e);
+                throw new IllegalStateException("This was not supposed to happen.", e);
             }
         }
     }

File: src/main/java/org/mockito/internal/util/reflection/InstanceField.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * Represents an accessible instance field.
  *
- * Contains the instance reference on which the field can be read adn write.
+ * Contains the instance reference on which the field can be read and write.
  */
 public class InstanceField {
     private final Field field;

File: src/test/java/org/mockito/internal/util/StringUtilTest.java
Patch:
@@ -40,7 +40,7 @@ public void joins_two_lines() throws Exception {
     }
 
     @Test
-    public void join_has_preceeding_linebreak() throws Exception {
+    public void join_has_preceding_linebreak() throws Exception {
         assertThat(StringUtil.join("line1")).isEqualTo("\nline1");
     }
 

File: src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -74,7 +74,7 @@ public void should_scream_when_no_matchers_inside_not() {
     }
 
     @Test
-    public void should_scream_when_not_enough_matchers_inside_or_AddtionalMatcher() {
+    public void should_scream_when_not_enough_matchers_inside_or_AdditionalMatcher() {
         try {
             mock.simpleMethod(AdditionalMatchers.or(eq("jkl"), "asd"));
             fail();

File: src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -262,7 +262,7 @@ public void shouldNotAllowSettingNullVarArgsThrowableClasses() throws Exception
     }
 
     @Test
-    public void shouldNotAllowDifferntCheckedException() throws Exception {
+    public void shouldNotAllowDifferentCheckedException() throws Exception {
         IMethods mock = mock(IMethods.class);
 
         exception.expect(MockitoException.class);

File: subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidTempFileLocator.java
Patch:
@@ -71,10 +71,10 @@ private static File[] guessPath(String input) {
             }
             String packageName = potential.substring(start, end);
             File dataDir = new File("/data/data/" + packageName);
-            if (isWriteableDirectory(dataDir)) {
+            if (isWritableDirectory(dataDir)) {
                 File cacheDir = new File(dataDir, "cache");
                 if (fileOrDirExists(cacheDir) || cacheDir.mkdir()) {
-                    if (isWriteableDirectory(cacheDir)) {
+                    if (isWritableDirectory(cacheDir)) {
                         results.add(cacheDir);
                     }
                 }
@@ -99,7 +99,7 @@ private static boolean fileOrDirExists(File file) {
         return file.exists();
     }
 
-    private static boolean isWriteableDirectory(File file) {
+    private static boolean isWritableDirectory(File file) {
         return file.isDirectory() && file.canWrite();
     }
 }

File: src/main/java/org/mockito/InjectMocks.java
Patch:
@@ -39,7 +39,7 @@
  *     then, if there is several property of the same type, by the match of the property name and the mock name.
  *     <p><u>Note 1:</u> If you have properties with the same type (or same erasure), it's better to name all &#064;Mock
  *     annotated fields with the matching properties, otherwise Mockito might get confused and injection won't happen.</p>
- *     <p><u>Note 2:</u> If &#064;InjectMocks instance wasn't initialized before and have a no-arg constructor,
+ *     <p><u>Note 2:</u> If &#064;InjectMocks instance wasn't initialized before and has a no-arg constructor,
  *     then it will be initialized with this constructor.</p></li>
  *
  *     <li><strong>Field injection</strong>; mocks will first be resolved by type (if a single type match

File: src/main/java/org/mockito/InjectMocks.java
Patch:
@@ -39,7 +39,7 @@
  *     then, if there is several property of the same type, by the match of the property name and the mock name.
  *     <p><u>Note 1:</u> If you have properties with the same type (or same erasure), it's better to name all &#064;Mock
  *     annotated fields with the matching properties, otherwise Mockito might get confused and injection won't happen.</p>
- *     <p><u>Note 2:</u> If &#064;InjectMocks instance wasn't initialized before and have a no-arg constructor,
+ *     <p><u>Note 2:</u> If &#064;InjectMocks instance wasn't initialized before and has a no-arg constructor,
  *     then it will be initialized with this constructor.</p></li>
  *
  *     <li><strong>Field injection</strong>; mocks will first be resolved by type (if a single type match

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -863,12 +864,12 @@ public static MockitoException usingConstructorWithFancySerializable(Serializabl
         return new MockitoException("Mocks instantiated with constructor cannot be combined with " + mode + " serialization mode.");
     }
 
-    public static MockitoException cannotCreateTimerWithNegativeDurationTime(long durationMillis) {
+    public static MockitoException cannotCreateTimerWithNegativeDurationTime(Duration duration) {
         return new FriendlyReminderException(join(
                 "",
                 "Don't panic! I'm just a friendly reminder!",
                 "It is impossible for time to go backward, therefore...",
-                "You cannot put negative value of duration: (" + durationMillis + ")",
+                "You cannot put negative value of duration: (" + duration + ")",
                 "as argument of timer methods (after(), timeout())",
                 ""
         ));

File: src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java
Patch:
@@ -35,7 +35,7 @@ private VerificationMode wrapInOrder(VerificationWrapper<?> verificationWrapper,
         if (verificationMode instanceof VerificationOverTimeImpl) {
             final VerificationOverTimeImpl verificationOverTime = (VerificationOverTimeImpl)verificationMode;
             if (verificationOverTime.isReturnOnSuccess()) {
-                return new VerificationOverTimeImpl(verificationOverTime.getPollingPeriodMillis(),
+                return new VerificationOverTimeImpl(verificationOverTime.getPollingPeriod(),
                         verificationOverTime.getTimer().duration(),
                         wrapInOrder(verificationWrapper, verificationOverTime.getDelegate(), inOrder),
                         verificationOverTime.isReturnOnSuccess());

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -243,7 +243,7 @@
  * when(mockedList.get(anyInt())).thenReturn("element");
  *
  * //stubbing using custom matcher (let's say isValid() returns your own matcher implementation):
- * when(mockedList.contains(argThat(isValid()))).thenReturn("element");
+ * when(mockedList.contains(argThat(isValid()))).thenReturn(true);
  *
  * //following prints "element"
  * System.out.println(mockedList.get(999));

File: src/main/java/org/mockito/AdditionalAnswers.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito;
 
+import static org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces.toAnswer;
+
 import java.util.Collection;
 
 import org.mockito.internal.stubbing.answers.AnswersWithDelay;
@@ -24,8 +26,6 @@
 import org.mockito.stubbing.VoidAnswer5;
 import org.mockito.stubbing.VoidAnswer6;
 
-import static org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces.toAnswer;
-
 /**
  * Additional answers provides factory methods for answers.
  *

File: src/main/java/org/mockito/Answers.java
Patch:
@@ -5,11 +5,11 @@
 package org.mockito;
 
 import org.mockito.internal.stubbing.answers.CallsRealMethods;
-import org.mockito.internal.stubbing.defaultanswers.TriesToReturnSelf;
 import org.mockito.internal.stubbing.defaultanswers.GloballyConfiguredAnswer;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNulls;
+import org.mockito.internal.stubbing.defaultanswers.TriesToReturnSelf;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

File: src/main/java/org/mockito/InjectMocks.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito;
 
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 import org.mockito.junit.MockitoJUnitRunner;
 
-import static java.lang.annotation.ElementType.FIELD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
 /**
  * Mark a field on which injection should be performed.
  *

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito;
 
+import java.io.Serializable;
+
 import org.mockito.exceptions.misusing.PotentialStubbingProblem;
 import org.mockito.exceptions.misusing.UnnecessaryStubbingException;
 import org.mockito.invocation.InvocationFactory;
@@ -16,8 +18,6 @@
 import org.mockito.quality.Strictness;
 import org.mockito.stubbing.Answer;
 
-import java.io.Serializable;
-
 /**
  * Allows mock creation with additional mock settings.
  * <p/>

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito;
 
+import java.util.Collection;
+
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.quality.MockitoHint;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.Collection;
-
 /**
  * Provides mocking information.
  * For example, you can identify whether a particular object is either a mock or a spy.

File: src/main/java/org/mockito/Spy.java
Patch:
@@ -6,9 +6,11 @@
 
 import static java.lang.annotation.ElementType.FIELD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
+
 import org.mockito.junit.MockitoJUnitRunner;
 
 /**

File: src/main/java/org/mockito/exceptions/base/MockitoSerializationIssue.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
-
 import java.io.ObjectStreamException;
 
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
+
 /**
  * Raised by mockito to emit an error either due to Mockito, or due to the User.
  *

File: src/main/java/org/mockito/internal/configuration/CaptorAnnotationProcessor.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.configuration;
 
+import java.lang.reflect.Field;
+
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.GenericMaster;
 
-import java.lang.reflect.Field;
-
 /**
  * Instantiate {@link ArgumentCaptor} a field annotated by &#64;Captor.
  */

File: src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.configuration;
 
 import java.io.Serializable;
+
 import org.mockito.configuration.AnnotationEngine;
 import org.mockito.configuration.DefaultMockitoConfiguration;
 import org.mockito.configuration.IMockitoConfiguration;

File: src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -4,16 +4,17 @@
  */
 package org.mockito.internal.configuration;
 
+import static org.mockito.internal.util.collections.Sets.newMockSafeHashSet;
+
 import java.lang.reflect.Field;
 import java.util.HashSet;
 import java.util.Set;
+
 import org.mockito.MockitoAnnotations;
 import org.mockito.internal.configuration.injection.scanner.InjectMocksScanner;
 import org.mockito.internal.configuration.injection.scanner.MockScanner;
 import org.mockito.plugins.AnnotationEngine;
 
-import static org.mockito.internal.util.collections.Sets.newMockSafeHashSet;
-
 /**
  * See {@link MockitoAnnotations}
  */

File: src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.configuration;
 
+import java.lang.reflect.Field;
+
 import org.mockito.Mock;
 import org.mockito.MockSettings;
 import org.mockito.Mockito;
 
-import java.lang.reflect.Field;
-
 /**
  * Instantiates a mock on a field annotated by {@link Mock}
  */

File: src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.configuration.injection.filter;
 
-import org.mockito.internal.util.reflection.BeanPropertySetter;
+import static org.mockito.internal.exceptions.Reporter.cannotInjectDependency;
+import static org.mockito.internal.util.reflection.FieldSetter.setField;
 
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.List;
 
-import static org.mockito.internal.exceptions.Reporter.cannotInjectDependency;
-import static org.mockito.internal.util.reflection.FieldSetter.setField;
+import org.mockito.internal.util.reflection.BeanPropertySetter;
 
 /**
  * This node returns an actual injecter which will be either :

File: src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.internal.configuration.plugins;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import org.mockito.internal.creation.instance.InstantiatorProvider2Adapter;
 import org.mockito.plugins.AnnotationEngine;
 import org.mockito.plugins.InstantiatorProvider;
@@ -14,9 +17,6 @@
 import org.mockito.plugins.PluginSwitch;
 import org.mockito.plugins.StackTraceCleanerProvider;
 
-import java.util.HashMap;
-import java.util.Map;
-
 class DefaultMockitoPlugins implements MockitoPlugins {
 
     private final static Map<String, String> DEFAULT_PLUGINS = new HashMap<String, String>();

File: src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.configuration.plugins;
 
-import org.mockito.internal.util.io.IOUtil;
-
 import java.io.InputStream;
 
+import org.mockito.internal.util.io.IOUtil;
+
 class PluginFileReader {
 
     String readPluginClass(InputStream input) {

File: src/main/java/org/mockito/internal/configuration/plugins/PluginFinder.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.configuration.plugins;
 
+import java.io.InputStream;
+import java.net.URL;
+
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.io.IOUtil;
 import org.mockito.plugins.PluginSwitch;
 
-import java.io.InputStream;
-import java.net.URL;
-
 class PluginFinder {
 
     private final PluginSwitch pluginSwitch;

File: src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.configuration.plugins;
 
-import org.mockito.internal.util.collections.Iterables;
-import org.mockito.plugins.PluginSwitch;
-
 import java.io.IOException;
 import java.net.URL;
 import java.util.Enumeration;
 
+import org.mockito.internal.util.collections.Iterables;
+import org.mockito.plugins.PluginSwitch;
+
 class PluginInitializer {
 
     private final PluginSwitch pluginSwitch;

File: src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.configuration.plugins;
 
-import org.mockito.plugins.PluginSwitch;
-
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 
+import org.mockito.plugins.PluginSwitch;
+
 class PluginLoader {
 
     private final DefaultMockitoPlugins plugins;

File: src/main/java/org/mockito/internal/configuration/plugins/Plugins.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.configuration.plugins;
 
-import org.mockito.plugins.MockitoLogger;
 import org.mockito.plugins.AnnotationEngine;
 import org.mockito.plugins.InstantiatorProvider2;
 import org.mockito.plugins.MockMaker;
+import org.mockito.plugins.MockitoLogger;
 import org.mockito.plugins.MockitoPlugins;
 import org.mockito.plugins.StackTraceCleanerProvider;
 

File: src/main/java/org/mockito/internal/creation/DelegatingMethod.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.creation;
 
-import org.mockito.internal.invocation.MockitoMethod;
-
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 
+import org.mockito.internal.invocation.MockitoMethod;
+
 public class DelegatingMethod implements MockitoMethod {
 
     private final Method method;

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.creation.bytebuddy;
 
-import org.mockito.mock.SerializableMode;
-
 import java.util.Collections;
 import java.util.Set;
 
+import org.mockito.mock.SerializableMode;
+
 class MockFeatures<T> {
 
     final Class<T> mockedType;

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -14,6 +14,7 @@
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.concurrent.Callable;
+
 import net.bytebuddy.asm.Advice;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.description.type.TypeDescription;

File: src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.creation.bytebuddy;
 
-import net.bytebuddy.TypeCache;
-import org.mockito.mock.SerializableMode;
-
 import java.lang.ref.ReferenceQueue;
 import java.util.Set;
 import java.util.concurrent.Callable;
 
+import net.bytebuddy.TypeCache;
+import org.mockito.mock.SerializableMode;
+
 class TypeCachingBytecodeGenerator extends ReferenceQueue<ClassLoader> implements BytecodeGenerator {
 
     private final Object BOOTSTRAP_LOCK = new Object();

File: src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java
Patch:
@@ -4,19 +4,19 @@
  */
 package org.mockito.internal.creation.instance;
 
+import static org.mockito.internal.util.StringUtil.join;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 
-import org.mockito.creation.instance.Instantiator;
 import org.mockito.creation.instance.InstantiationException;
+import org.mockito.creation.instance.Instantiator;
 import org.mockito.internal.util.Primitives;
 import org.mockito.internal.util.reflection.AccessibilityChanger;
 
-import static org.mockito.internal.util.StringUtil.join;
-
 public class ConstructorInstantiator implements Instantiator {
 
     /**

File: src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.debugging;
 
+import java.util.Collection;
+import java.util.LinkedList;
+
 import org.mockito.Mockito;
 import org.mockito.internal.util.collections.ListUtil;
 import org.mockito.invocation.Invocation;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.Collection;
-import java.util.LinkedList;
-
 /**
  * Prints invocations in human-readable, printable way
  */

File: src/main/java/org/mockito/internal/debugging/LocationImpl.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.debugging;
 
 import java.io.Serializable;
+
 import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
 import org.mockito.invocation.Location;
 

File: src/main/java/org/mockito/internal/debugging/LoggingListener.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.debugging;
 
-import org.mockito.internal.invocation.InvocationMatcher;
-import org.mockito.invocation.Invocation;
+import static org.mockito.internal.util.StringUtil.join;
 
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.mockito.internal.util.StringUtil.join;
+import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.invocation.Invocation;
 
 public class LoggingListener implements FindingsListener {
     private final boolean warnAboutUnstubbed;

File: src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.debugging;
 
 import java.io.PrintStream;
+
 import org.mockito.invocation.DescribedInvocation;
 import org.mockito.listeners.InvocationListener;
 import org.mockito.listeners.MethodInvocationReport;

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.debugging;
 
+import java.util.LinkedList;
+import java.util.List;
+
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.UnusedStubsFinder;
 import org.mockito.internal.invocation.finder.AllInvocationsFinder;
 import org.mockito.invocation.Invocation;
 
-import java.util.LinkedList;
-import java.util.List;
-
 @Deprecated
 public class WarningsCollector {
 

File: src/main/java/org/mockito/internal/debugging/WarningsFinder.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.debugging;
 
-import org.mockito.internal.invocation.InvocationMatcher;
-import org.mockito.invocation.Invocation;
-
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.invocation.Invocation;
+
 public class WarningsFinder {
     private final List<Invocation> baseUnusedStubs;
     private final List<InvocationMatcher> baseAllInvocations;

File: src/main/java/org/mockito/internal/debugging/WarningsPrinterImpl.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.debugging;
 
+import java.util.List;
+
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.Invocation;
 
-import java.util.List;
-
 public class WarningsPrinterImpl {
 
     private final boolean warnAboutUnstubbed;

File: src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.exceptions.stacktrace;
 
+import java.io.Serializable;
+
 import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.GlobalConfiguration;
 
-import java.io.Serializable;
-
 public class ConditionalStackTraceFilter implements Serializable {
     private static final long serialVersionUID = -8085849703510292641L;
 

File: src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.framework;
 
+import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
+
 import org.mockito.MockitoFramework;
 import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockito.internal.invocation.DefaultInvocationFactory;
@@ -14,8 +16,6 @@
 import org.mockito.plugins.MockMaker;
 import org.mockito.plugins.MockitoPlugins;
 
-import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
-
 public class DefaultMockitoFramework implements MockitoFramework {
 
     public MockitoFramework addListener(MockitoListener listener) {

File: src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.framework;
 
+import java.util.List;
+
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 import org.mockito.MockitoSession;
@@ -14,8 +16,6 @@
 import org.mockito.plugins.MockitoLogger;
 import org.mockito.quality.Strictness;
 
-import java.util.List;
-
 public class DefaultMockitoSession implements MockitoSession {
 
     private final String name;

File: src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.hamcrest;
 
+import static org.mockito.internal.util.reflection.GenericTypeExtractor.genericTypeOf;
+
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Matcher;
 
-import static org.mockito.internal.util.reflection.GenericTypeExtractor.genericTypeOf;
-
 /**
  * Extracts generic type of matcher
  */

File: src/main/java/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.internal.handler;
 
+import static org.mockito.internal.listeners.StubbingLookupNotifier.notifyStubbedAnswerLookup;
+import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
+
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.MatchersBinder;
@@ -19,9 +22,6 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.verification.VerificationMode;
 
-import static org.mockito.internal.listeners.StubbingLookupNotifier.notifyStubbedAnswerLookup;
-import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
-
 /**
  * Invocation handler set on mock objects.
  *

File: src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.handler;
 
+import static org.mockito.internal.matchers.Equality.areEqual;
+
 import org.mockito.invocation.DescribedInvocation;
 import org.mockito.invocation.Invocation;
 import org.mockito.listeners.MethodInvocationReport;
 
-import static org.mockito.internal.matchers.Equality.areEqual;
-
 /**
  * Report on a method call
  */

File: src/main/java/org/mockito/internal/handler/NullResultGuardian.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.handler;
 
-import org.mockito.invocation.InvocationContainer;
+import static org.mockito.internal.util.Primitives.defaultValue;
+
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.InvocationContainer;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;
 
-import static org.mockito.internal.util.Primitives.defaultValue;
-
 /**
  * Protects the results from delegate MockHandler. Makes sure the results are valid.
  *

File: src/main/java/org/mockito/internal/invocation/InvocationComparator.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.invocation;
 
-import org.mockito.invocation.Invocation;
-
 import java.util.Comparator;
 
+import org.mockito.invocation.Invocation;
+
 /**
  * Compares invocations based on the sequence number
  */

File: src/main/java/org/mockito/internal/invocation/InvocationMarker.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.invocation;
 
+import java.util.List;
+
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MatchableInvocation;
 
-import java.util.List;
-
 public class InvocationMarker {
 
     private InvocationMarker(){}

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
+
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.CapturesArguments;
 import org.mockito.internal.reporting.PrintSettings;

File: src/main/java/org/mockito/internal/invocation/RealMethod.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.invocation;
 
+import java.io.Serializable;
+import java.util.concurrent.Callable;
+
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.invocation.InvocationFactory;
 import org.mockito.invocation.InvocationOnMock;
 
-import java.io.Serializable;
-import java.util.concurrent.Callable;
-
 /**
  * Interface that wraps a 'real' method of the mock object.
  * Needed for test spies or {@link InvocationOnMock#callRealMethod()}.

File: src/main/java/org/mockito/internal/invocation/SerializableMethod.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.invocation;
 
-import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.creation.SuspendMethod;
-
 import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.util.Arrays;
 
+import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.SuspendMethod;
+
 public class SerializableMethod implements Serializable, MockitoMethod {
 
     private static final long serialVersionUID = 6005610965006048445L;

File: src/main/java/org/mockito/internal/invocation/StubInfoImpl.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.invocation;
 
+import java.io.Serializable;
+
 import org.mockito.invocation.DescribedInvocation;
 import org.mockito.invocation.Location;
 import org.mockito.invocation.StubInfo;
 
-import java.io.Serializable;
-
 public class StubInfoImpl implements StubInfo, Serializable {
     private static final long serialVersionUID = 2125827349332068867L;
     private final DescribedInvocation stubbedAt;

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.invocation;
 
+import java.util.LinkedList;
+import java.util.List;
+
 import org.mockito.internal.util.MockUtil;
 import org.mockito.invocation.Invocation;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.LinkedList;
-import java.util.List;
-
 @Deprecated
 public class UnusedStubsFinder {
 

File: src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.invocation.finder;
 
+import java.util.*;
+
 import org.mockito.internal.invocation.InvocationComparator;
-import org.mockito.stubbing.Stubbing;
 import org.mockito.internal.stubbing.StubbingComparator;
 import org.mockito.internal.util.DefaultMockingDetails;
 import org.mockito.invocation.Invocation;
-
-import java.util.*;
+import org.mockito.stubbing.Stubbing;
 
 public class AllInvocationsFinder {
 

File: src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.invocation.finder;
 
+import java.util.List;
+
 import org.mockito.internal.util.collections.ListUtil;
 import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockito.invocation.Invocation;
 
-import java.util.List;
-
 /**
  * Author: Szczepan Faber, created at: 4/3/11
  */

File: src/main/java/org/mockito/internal/junit/JUnitRule.java
Patch:
@@ -10,9 +10,9 @@
 import org.mockito.MockitoAnnotations;
 import org.mockito.MockitoSession;
 import org.mockito.internal.session.MockitoSessionLoggerAdapter;
+import org.mockito.junit.MockitoRule;
 import org.mockito.plugins.MockitoLogger;
 import org.mockito.quality.Strictness;
-import org.mockito.junit.MockitoRule;
 
 /**
  * Internal implementation.

File: src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.junit;
 
-import org.mockito.plugins.MockitoLogger;
-import org.mockito.mock.MockCreationSettings;
-
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.mock.MockCreationSettings;
+import org.mockito.plugins.MockitoLogger;
+
 /**
  * Reports stubbing argument mismatches to the supplied logger
  */

File: src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.junit;
 
-import org.mockito.plugins.MockitoLogger;
-import org.mockito.invocation.Invocation;
-
 import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
 
+import org.mockito.invocation.Invocation;
+import org.mockito.plugins.MockitoLogger;
+
 /**
  * Contains stubbing arg mismatches, knows how to format them
  */

File: src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.junit.util;
 
 import java.lang.reflect.Field;
+
 import org.junit.runner.notification.Failure;
 import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
 

File: src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java
Patch:
@@ -4,16 +4,16 @@
  */
 package org.mockito.internal.listeners;
 
+import java.util.Collection;
+import java.util.List;
+
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.invocation.Invocation;
 import org.mockito.listeners.StubbingLookupEvent;
 import org.mockito.listeners.StubbingLookupListener;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.Collection;
-import java.util.List;
-
 public class StubbingLookupNotifier {
 
     public static void notifyStubbedAnswerLookup(Invocation invocation, Stubbing stubbingFound,

File: src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.internal.listeners;
 
+import java.util.List;
+import java.util.Set;
+
 import org.mockito.MockingDetails;
 import org.mockito.Mockito;
 import org.mockito.internal.exceptions.Reporter;
@@ -12,9 +15,6 @@
 import org.mockito.listeners.VerificationStartedListener;
 import org.mockito.mock.MockCreationSettings;
 
-import java.util.List;
-import java.util.Set;
-
 public class VerificationStartedNotifier {
 
     public static Object notifyVerificationStarted(List<VerificationStartedListener> listeners, MockingDetails originalMockingDetails) {

File: src/main/java/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import static org.mockito.internal.exceptions.Reporter.noArgumentValueWasCaptured;
 
 import java.io.Serializable;
@@ -15,6 +13,8 @@
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
+import org.mockito.ArgumentMatcher;
+
 @SuppressWarnings("unchecked")
 public class CapturingMatcher<T> implements ArgumentMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
 

File: src/main/java/org/mockito/internal/matchers/CompareTo.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 public abstract class CompareTo<T extends Comparable<T>> implements ArgumentMatcher<T>, Serializable {
     private final T wanted;
 

File: src/main/java/org/mockito/internal/matchers/Contains.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 
 public class Contains implements ArgumentMatcher<String>, Serializable {
 

File: src/main/java/org/mockito/internal/matchers/Equals.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
+import java.io.Serializable;
+
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.text.ValuePrinter;
 
-import java.io.Serializable;
-
 public class Equals implements ArgumentMatcher<Object>, ContainsExtraTypeInfo, Serializable {
 
     private final Object wanted;

File: src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 public class EqualsWithDelta implements ArgumentMatcher<Number>, Serializable {
 
     private final Number wanted;

File: src/main/java/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
+import java.io.Serializable;
+
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.util.Primitives;
 
-import java.io.Serializable;
-
 
 public class InstanceOf implements ArgumentMatcher<Object>, Serializable {
 

File: src/main/java/org/mockito/internal/matchers/Matches.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.io.Serializable;
 import java.util.regex.Pattern;
+
 import org.mockito.ArgumentMatcher;
 
 public class Matches implements ArgumentMatcher<Object>, Serializable {

File: src/main/java/org/mockito/internal/matchers/Not.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 @SuppressWarnings({ "unchecked", "serial","rawtypes" })
 public class Not implements ArgumentMatcher<Object>, Serializable {
 

File: src/main/java/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 public class NotNull implements ArgumentMatcher<Object>, Serializable {
 
     public static final NotNull NOT_NULL = new NotNull();

File: src/main/java/org/mockito/internal/matchers/Null.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 public class Null implements ArgumentMatcher<Object>, Serializable {
 
     public static final Null NULL = new Null();

File: src/main/java/org/mockito/internal/matchers/Same.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
+import java.io.Serializable;
+
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.text.ValuePrinter;
 
-import java.io.Serializable;
-
 public class Same implements ArgumentMatcher<Object>, Serializable {
 
     private final Object wanted;

File: src/main/java/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 public class StartsWith implements ArgumentMatcher<String>, Serializable {
 
     private final String prefix;

File: src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.matchers.apachecommons;
 
-import org.mockito.ArgumentMatcher;
-
 import java.io.Serializable;
 
+import org.mockito.ArgumentMatcher;
+
 public class ReflectionEquals implements ArgumentMatcher<Object>, Serializable {
 
     private final Object wanted;

File: src/main/java/org/mockito/internal/matchers/text/MatcherToString.java
Patch:
@@ -8,6 +8,7 @@
 import static org.mockito.internal.util.StringUtil.decamelizeMatcher;
 
 import java.lang.reflect.Method;
+
 import org.mockito.ArgumentMatcher;
 
 /**

File: src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.matchers.text;
 
+import static java.lang.String.valueOf;
+
 import java.lang.reflect.Array;
 import java.util.Iterator;
 import java.util.Map;
 
-import static java.lang.String.valueOf;
-
 /**
  * Prints a Java object value in a way humans can read it neatly.
  * Inspired on hamcrest. Used for printing arguments in verification errors.

File: src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.progress;
 
+import java.util.List;
+
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.LocalizedMatcher;
 
-import java.util.List;
-
 @SuppressWarnings("unchecked")
 public interface ArgumentMatcherStorage {
 

File: src/main/java/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.progress;
 
 import java.util.Set;
+
 import org.mockito.listeners.MockitoListener;
 import org.mockito.listeners.VerificationListener;
 import org.mockito.mock.MockCreationSettings;

File: src/main/java/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -5,13 +5,13 @@
 package org.mockito.internal.reporting;
 
 
-import org.mockito.invocation.Invocation;
-import org.mockito.invocation.MatchableInvocation;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
+
 /**
  * Makes sure both wanted and actual are printed consistently (single line or multiline)
  * <p>

File: src/main/java/org/mockito/internal/runners/util/RunnerProvider.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.runners.util;
 
-import org.mockito.internal.runners.InternalRunner;
-
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
+import org.mockito.internal.runners.InternalRunner;
+
 public class RunnerProvider {
 
     public InternalRunner newInstance(String runnerClassName, Object ... constructorArgs) throws Exception {

File: src/main/java/org/mockito/internal/runners/util/TestMethodsFinder.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.runners.util;
 
-import org.junit.Test;
-
 import java.lang.reflect.Method;
 
+import org.junit.Test;
+
 public class TestMethodsFinder {
 
     private TestMethodsFinder() {}

File: src/main/java/org/mockito/internal/stubbing/BaseStubbing.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.internal.stubbing;
 
+import static org.mockito.internal.exceptions.Reporter.notAnException;
+import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
+
 import org.mockito.creation.instance.Instantiator;
 import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockito.internal.stubbing.answers.CallsRealMethods;
@@ -12,9 +15,6 @@
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.OngoingStubbing;
 
-import static org.mockito.internal.exceptions.Reporter.notAnException;
-import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
-
 public abstract class BaseStubbing<T> implements OngoingStubbing<T> {
 
 

File: src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.stubbing;
 
-import org.mockito.quality.Strictness;
-import org.mockito.stubbing.Answer;
-
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.mockito.quality.Strictness;
+import org.mockito.stubbing.Answer;
+
 /**
  * Holds answers declared using 'doAnswer' stubbing style.
  */

File: src/main/java/org/mockito/internal/stubbing/StubbingComparator.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.stubbing;
 
+import java.util.Comparator;
+
 import org.mockito.internal.invocation.InvocationComparator;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.Comparator;
-
 /**
  * Compares stubbings based on {@link InvocationComparator}
  */

File: src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import java.io.Serializable;
+import java.util.concurrent.TimeUnit;
+
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.ValidableAnswer;
 
-import java.io.Serializable;
-import java.util.concurrent.TimeUnit;
-
 /**
  * Returns as the provided answer would return, after delaying the specified amount.
  *

File: src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java
Patch:
@@ -5,8 +5,9 @@
 package org.mockito.internal.stubbing.answers;
 
 import java.lang.reflect.Array;
-import org.mockito.internal.configuration.plugins.Plugins;
+
 import org.mockito.creation.instance.Instantiator;
+import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;
 import org.mockito.internal.util.reflection.LenientCopyTool;
 import org.mockito.invocation.InvocationOnMock;

File: src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.invocation.InvocationOnMock;
-
 import static org.mockito.internal.exceptions.Reporter.wrongTypeReturnedByDefaultAnswer;
 
+import org.mockito.invocation.InvocationOnMock;
+
 public abstract class DefaultAnswerValidator {
     public static void validateReturnValueFor(InvocationOnMock invocation, Object returnedValue) throws Throwable {
         InvocationInfo invocationInfo = new InvocationInfo(invocation);

File: src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import static org.mockito.internal.exceptions.Reporter.onlyVoidMethodsCanBeSetToDoNothing;
+
 import java.io.Serializable;
 
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.ValidableAnswer;
 
-import static org.mockito.internal.exceptions.Reporter.onlyVoidMethodsCanBeSetToDoNothing;
-
 public class DoesNothing implements Answer<Object>, ValidableAnswer, Serializable {
 
     private static final long serialVersionUID = 4840880517740698416L;

File: src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+
 import org.mockito.internal.invocation.AbstractAwareMethod;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.Primitives;

File: src/main/java/org/mockito/internal/stubbing/answers/Returns.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import static org.mockito.internal.exceptions.Reporter.cannotStubVoidMethodWithAReturnValue;
+import static org.mockito.internal.exceptions.Reporter.wrongTypeOfReturnValue;
+
 import java.io.Serializable;
 
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.ValidableAnswer;
 
-import static org.mockito.internal.exceptions.Reporter.cannotStubVoidMethodWithAReturnValue;
-import static org.mockito.internal.exceptions.Reporter.wrongTypeOfReturnValue;
-
 public class Returns implements Answer<Object>, ValidableAnswer, Serializable {
 
     private static final long serialVersionUID = -6245608253574215396L;

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
+
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.util.Collection;
 import java.util.LinkedList;
+
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java
Patch:
@@ -7,6 +7,7 @@
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.Type;
 import java.lang.reflect.TypeVariable;
+
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.GenericMetadataSupport;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.stubbing.defaultanswers;
 
 import java.io.Serializable;
+
 import org.mockito.Mockito;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.invocation.InvocationOnMock;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Array;
+
 import org.mockito.Mockito;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -8,6 +8,7 @@
 import static org.mockito.internal.util.ObjectMethodsGuru.isToStringMethod;
 
 import java.io.Serializable;
+
 import org.mockito.Mockito;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.invocation.InvocationOnMock;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
+import java.io.Serializable;
+
 import org.mockito.internal.util.MockUtil;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-import java.io.Serializable;
-
 public class TriesToReturnSelf implements Answer<Object>, Serializable{
 
     private final ReturnsEmptyValues defaultReturn = new ReturnsEmptyValues();

File: src/main/java/org/mockito/internal/util/DefaultMockingDetails.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.util;
 
+import java.util.Collection;
+
 import org.mockito.MockingDetails;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.debugging.InvocationsPrinter;
@@ -13,8 +15,6 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.Collection;
-
 /**
  * Class to inspect any object, and identify whether a particular object is either a mock or a spy.  This is
  * a wrapper for {@link org.mockito.internal.util.MockUtil}.

File: src/main/java/org/mockito/internal/util/JavaEightUtil.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.util;
 
-import org.mockito.internal.creation.instance.InstantiationException;
-
 import java.lang.reflect.Method;
 
+import org.mockito.internal.creation.instance.InstantiationException;
+
 /**
  * Helper class to work with features that were introduced in Java versions after 1.5.
  * This class uses reflection in most places to avoid coupling with a newer JDK.

File: src/main/java/org/mockito/internal/util/MockNameImpl.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.util;
 
-import org.mockito.mock.MockName;
-
 import java.io.Serializable;
 
+import org.mockito.mock.MockName;
+
 public class MockNameImpl implements MockName, Serializable {
 
     private static final long serialVersionUID = 8014974700844306925L;

File: src/main/java/org/mockito/internal/util/MockUtil.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.util;
 
+import static org.mockito.internal.handler.MockHandlerFactory.createMockHandler;
+
 import org.mockito.Mockito;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.configuration.plugins.Plugins;
@@ -16,8 +18,6 @@
 import org.mockito.plugins.MockMaker;
 import org.mockito.plugins.MockMaker.TypeMockability;
 
-import static org.mockito.internal.handler.MockHandlerFactory.createMockHandler;
-
 @SuppressWarnings("unchecked")
 public class MockUtil {
 

File: src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.util;
 
 import java.lang.reflect.Method;
+
 import org.mockito.internal.creation.DelegatingMethod;
 import org.mockito.internal.invocation.MockitoMethod;
 

File: src/main/java/org/mockito/internal/util/Platform.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.util;
 
+import static org.mockito.internal.util.StringUtil.join;
+
 import java.util.Locale;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import static org.mockito.internal.util.StringUtil.join;
-
 public abstract class Platform {
 
     private static final Pattern JAVA_8_RELEASE_VERSION_SCHEME = Pattern.compile("1\\.8\\.0_(\\d+)(?:-ea)?(?:-b\\d+)?");

File: src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.util.collections;
 
-import org.mockito.internal.util.Checks;
+import static java.lang.reflect.Array.*;
 
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Set;
 
-import static java.lang.reflect.Array.*;
+import org.mockito.internal.util.Checks;
 
 /**
  * hashCode and equals safe hash based set.

File: src/main/java/org/mockito/internal/util/collections/Sets.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.util.collections;
 
+import static java.util.Arrays.asList;
+
 import java.util.LinkedHashSet;
 import java.util.Set;
 
-import static java.util.Arrays.asList;
-
 public abstract class Sets {
     public static Set<Object> newMockSafeHashSet(Iterable<Object> mocks) {
         return HashCodeAndEqualsSafeSet.of(mocks);

File: src/main/java/org/mockito/internal/util/io/IOUtil.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.util.io;
 
-import org.mockito.exceptions.base.MockitoException;
-
 import java.io.*;
 import java.util.Collection;
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.exceptions.base.MockitoException;
+
 /**
  * IO utils. A bit of reinventing the wheel but we don't want extra dependencies at this stage and we want to be java.
  */

File: src/main/java/org/mockito/internal/util/reflection/FieldReader.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.mockito.exceptions.base.MockitoException;
-
 import java.lang.reflect.Field;
 
+import org.mockito.exceptions.base.MockitoException;
+
 public class FieldReader {
 
     final Object target;

File: src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -5,9 +5,6 @@
 package org.mockito.internal.util.reflection;
 
 
-import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.util.Checks;
-
 import java.lang.reflect.GenericArrayType;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
@@ -26,6 +23,9 @@
 import java.util.Queue;
 import java.util.Set;
 
+import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.util.Checks;
+
 
 /**
  * This class can retrieve generic meta-data that the compiler stores on classes

File: src/main/java/org/mockito/internal/util/reflection/InstanceField.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.mockito.internal.util.Checks;
-
 import static org.mockito.internal.util.reflection.FieldSetter.setField;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 
+import org.mockito.internal.util.Checks;
+
 /**
  * Represents an accessible instance field.
  *

File: src/main/java/org/mockito/internal/verification/AtMost.java
Patch:
@@ -10,10 +10,11 @@
 
 import java.util.Iterator;
 import java.util.List;
+
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.invocation.MatchableInvocation;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationMode;
 
 public class AtMost implements VerificationMode {

File: src/main/java/org/mockito/internal/verification/Calls.java
Patch:
@@ -8,6 +8,7 @@
 import static org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.checkNumberOfInvocationsNonGreedy;
 
 import java.util.List;
+
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;

File: src/main/java/org/mockito/internal/verification/InOrderWrapper.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.verification;
 
+import java.util.List;
+
 import org.mockito.internal.InOrderImpl;
 import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;
 import org.mockito.internal.verification.api.VerificationData;
@@ -12,8 +14,6 @@
 import org.mockito.invocation.Invocation;
 import org.mockito.verification.VerificationMode;
 
-import java.util.List;
-
 public class InOrderWrapper implements VerificationMode {
 
     private final VerificationInOrderMode mode;

File: src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.verification;
 
 import java.util.Set;
+
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.listeners.VerificationListener;
 import org.mockito.verification.VerificationEvent;

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -12,9 +12,9 @@
 
 import java.util.List;
 
-import org.mockito.invocation.MatchableInvocation;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationMode;
 
 public class Only implements VerificationMode {

File: src/main/java/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.invocation.Invocation;
-
 import java.util.List;
 
+import org.mockito.invocation.Invocation;
+
 
 public interface RegisteredInvocations {
 

File: src/main/java/org/mockito/internal/verification/SingleRegisteredInvocation.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.invocation.Invocation;
-
 import java.io.Serializable;
 import java.util.Collections;
 import java.util.List;
 
+import org.mockito.invocation.Invocation;
+
 public class SingleRegisteredInvocation implements RegisteredInvocations, Serializable {
 
     private Invocation invocation;

File: src/main/java/org/mockito/internal/verification/Times.java
Patch:
@@ -8,12 +8,13 @@
 import static org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.checkNumberOfInvocations;
 
 import java.util.List;
+
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.invocation.MatchableInvocation;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationMode;
 
 public class Times implements VerificationInOrderMode, VerificationMode {

File: src/main/java/org/mockito/internal/verification/api/VerificationData.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.verification.api;
 
+import java.util.List;
+
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MatchableInvocation;
 
-import java.util.List;
-
 /**
  * Data needed to perform verification of interactions.
  * This interface is considered public even though it lives in private package.

File: src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.verification.argumentmatching;
 
-import org.mockito.ArgumentMatcher;
-import org.mockito.internal.matchers.ContainsExtraTypeInfo;
-
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.ArgumentMatcher;
+import org.mockito.internal.matchers.ContainsExtraTypeInfo;
+
 @SuppressWarnings("unchecked")
 public class ArgumentMatchingTool {
 

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.invocation;
 
+import java.util.List;
+
 import org.mockito.ArgumentMatcher;
 import org.mockito.NotExtensible;
 
-import java.util.List;
-
 /**
  * A method call on a mock object. Contains all information and state needed for the Mockito framework to operate.
  * This API might be useful for developers who extend Mockito.

File: src/main/java/org/mockito/invocation/InvocationOnMock.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
+
 import org.mockito.NotExtensible;
 
 /**

File: src/main/java/org/mockito/invocation/MatchableInvocation.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.invocation;
 
-import org.mockito.ArgumentMatcher;
-
 import java.util.List;
 
+import org.mockito.ArgumentMatcher;
+
 /**
  * <code>MatchableInvocation</code> wraps {@link Invocation} instance
  * and holds argument matchers associated with that invocation.

File: src/main/java/org/mockito/invocation/MockHandler.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.invocation;
 
+import java.io.Serializable;
+
 import org.mockito.Incubating;
 import org.mockito.MockSettings;
 import org.mockito.mock.MockCreationSettings;
 
-import java.io.Serializable;
-
 /**
  * Mockito handler of an invocation on a mock. This is a core part of the API, the heart of Mockito.
  * See also the {@link org.mockito.plugins.MockMaker}.

File: src/main/java/org/mockito/junit/MockitoJUnitRunner.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.junit;
 
+import java.lang.reflect.InvocationTargetException;
+
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
@@ -21,8 +23,6 @@
 import org.mockito.quality.MockitoHint;
 import org.mockito.quality.Strictness;
 
-import java.lang.reflect.InvocationTargetException;
-
 
 /**
  * Mockito JUnit Runner keeps tests clean and improves debugging experience.

File: src/main/java/org/mockito/junit/MockitoRule.java
Patch:
@@ -10,9 +10,9 @@
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 import org.mockito.MockitoSession;
+import org.mockito.exceptions.misusing.PotentialStubbingProblem;
 import org.mockito.quality.MockitoHint;
 import org.mockito.quality.Strictness;
-import org.mockito.exceptions.misusing.PotentialStubbingProblem;
 
 /**
  * Mockito JUnit Rule helps keeping tests clean.

File: src/main/java/org/mockito/listeners/StubbingLookupEvent.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.listeners;
 
+import java.util.Collection;
+
 import org.mockito.invocation.Invocation;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.Collection;
-
 /**
  * Represent an information about the looked up stubbing
  *

File: src/main/java/org/mockito/mock/MockCreationSettings.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.mock;
 
+import java.util.List;
+import java.util.Set;
+
 import org.mockito.Incubating;
 import org.mockito.MockSettings;
 import org.mockito.NotExtensible;
@@ -13,9 +16,6 @@
 import org.mockito.quality.Strictness;
 import org.mockito.stubbing.Answer;
 
-import java.util.List;
-import java.util.Set;
-
 /**
  * Informs about the mock settings. An immutable view of {@link org.mockito.MockSettings}.
  */

File: src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.runners;
 
+import java.lang.reflect.InvocationTargetException;
+
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
@@ -14,12 +16,10 @@
 import org.junit.runner.notification.RunNotifier;
 import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockito.internal.debugging.WarningsCollector;
-import org.mockito.internal.runners.RunnerFactory;
 import org.mockito.internal.runners.InternalRunner;
+import org.mockito.internal.runners.RunnerFactory;
 import org.mockito.plugins.MockitoLogger;
 
-import java.lang.reflect.InvocationTargetException;
-
 /**
  * @deprecated as of 2.1.0. Use the {@link org.mockito.junit.MockitoJUnitRunner} runner instead
  * which contains support for detecting unused stubs.

File: src/main/java/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.runners;
 
 import java.lang.reflect.InvocationTargetException;
+
 import org.junit.runner.Description;
 import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.NoTestsRemainException;

File: src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.runners;
 
 import java.lang.reflect.InvocationTargetException;
+
 import org.junit.runner.Description;
 import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
@@ -15,8 +16,8 @@
 import org.junit.runner.notification.RunNotifier;
 import org.mockito.internal.debugging.WarningsCollector;
 import org.mockito.internal.junit.util.JUnitFailureHacker;
-import org.mockito.internal.runners.RunnerFactory;
 import org.mockito.internal.runners.InternalRunner;
+import org.mockito.internal.runners.RunnerFactory;
 
 /**
  * @deprecated as of 2.1.0. Use the {@link org.mockito.junit.MockitoJUnitRunner} runner instead

File: src/test/java/org/concurrentmockito/ThreadVerifiesContinuouslyInteractingMockTest.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.concurrentmockito;
 
+import static org.mockito.Mockito.atLeastOnce;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Mockito.atLeastOnce;
-import static org.mockito.Mockito.verify;
-
 //this test exposes the problem most of the time
 public class ThreadVerifiesContinuouslyInteractingMockTest extends TestBase {
 

File: src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.concurrentmockito;
 
+import static org.mockito.Mockito.*;
+
 import org.junit.Test;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Mockito.*;
-
 public class ThreadsShareAMockTest extends TestBase {
 
     private IMethods mock;

File: src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.concurrentmockito;
 
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
 import org.junit.Test;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
 //this test always passes but please keep looking sys err
 //this test should be run 10 times, manually
 public class ThreadsShareGenerouslyStubbedMockTest extends TestBase {

File: src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.concurrentmockito;
 
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.mock;
+
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Mockito.inOrder;
-import static org.mockito.Mockito.mock;
-
 public class VerificationInOrderFromMultipleThreadsTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/ArgumentCaptorTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.validateMockitoUsage;
+
 import org.junit.After;
 import org.junit.Test;
 import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.validateMockitoUsage;
-
 public class ArgumentCaptorTest {
 
 	/**

File: src/test/java/org/mockito/MockitoTest.java
Patch:
@@ -9,6 +9,7 @@
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
 
 import java.util.List;
+
 import org.junit.Test;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.exceptions.misusing.NullInsteadOfMockException;

File: src/test/java/org/mockito/StateMaster.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito;
 
-import org.mockito.listeners.MockitoListener;
-
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
 
+import org.mockito.listeners.MockitoListener;
+
 public class StateMaster {
 
     public void reset() {

File: src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.exceptions.base;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 public class MockitoAssertionErrorTest extends TestBase {
 
     private void throwIt() {

File: src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.exceptions.base;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 public class MockitoExceptionTest extends TestBase {
 
     private void throwIt() {

File: src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.exceptions.base;
 
-import org.junit.Test;
-import org.mockito.internal.configuration.ConfigurationAccess;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.Arrays;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.Test;
+import org.mockito.internal.configuration.ConfigurationAccess;
 
 public class MockitoSerializationIssueTest {
 

File: src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.exceptions.stacktrace;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import org.junit.Test;
 import org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 public class StackTraceCleanerTest {
 
     private DefaultStackTraceCleaner cleaner= new DefaultStackTraceCleaner();

File: src/test/java/org/mockito/internal/configuration/ClassPathLoaderTest.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.configuration;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
 import org.junit.Test;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
-
 public class ClassPathLoaderTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.configuration;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import net.bytebuddy.ByteBuddy;
 import org.assertj.core.api.Assertions;
 import org.junit.After;
@@ -14,8 +16,6 @@
 import org.mockitoutil.ClassLoaders;
 import org.objenesis.Objenesis;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 public class GlobalConfigurationTest {
     @Test
     public void returns_mockito_configuration_annotation_engine_if_non_default() throws Exception {

File: src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.configuration.injection;
 
-import org.junit.Test;
+import static org.junit.Assert.*;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
 import java.util.*;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
 
 public class SimpleArgumentResolverTest {
 

File: src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.internal.configuration.plugins;
 
+import static org.junit.Assert.*;
+import static org.mockito.internal.configuration.plugins.DefaultMockitoPlugins.INLINE_ALIAS;
+
 import org.junit.Test;
 import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;
 import org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker;
@@ -14,9 +17,6 @@
 import org.mockito.plugins.MockitoLogger;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.*;
-import static org.mockito.internal.configuration.plugins.DefaultMockitoPlugins.INLINE_ALIAS;
-
 public class DefaultMockitoPluginsTest extends TestBase {
 
     private DefaultMockitoPlugins plugins = new DefaultMockitoPlugins();

File: src/test/java/org/mockito/internal/creation/InterfaceOverrideTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.creation;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockito.Mockito;
 
-import static org.junit.Assert.assertEquals;
-
 public class InterfaceOverrideTest {
 
     public interface CloneableInterface extends Cloneable {

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.creation.bytebuddy;
 
+import static org.mockito.Mockito.verify;
+
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.handler.MockHandlerImpl;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Mockito.verify;
-
 public class ByteBuddyMockMakerTest extends TestBase {
 
     @InjectMocks

File: src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Patch:
@@ -5,13 +5,12 @@
 package org.mockito.internal.creation.instance;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 public class ConstructorInstantiatorTest extends TestBase {
 
     static class SomeClass {

File: src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java
Patch:
@@ -5,12 +5,12 @@
 package org.mockito.internal.debugging;
 
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class LoggingListenerTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.exceptions.stacktrace;
 
+import static org.mockitoutil.Conditions.onlyThoseClassesInStackTrace;
+
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockito.internal.configuration.ConfigurationAccess;
 import org.mockitoutil.TestBase;
 
-import static org.mockitoutil.Conditions.onlyThoseClassesInStackTrace;
-
 public class ConditionalStackTraceFilterTest extends TestBase {
 
     private ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();

File: src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.exceptions.stacktrace;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockitoutil.Conditions.onlyThoseClasses;
+
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-import static org.mockitoutil.Conditions.onlyThoseClasses;
-
 public class StackTraceFilterTest extends TestBase {
 
     private final StackTraceFilter filter = new StackTraceFilter();

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -5,17 +5,19 @@
 package org.mockito.internal.invocation;
 
 import static java.util.Arrays.asList;
+
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.internal.matchers.Any.ANY;
 
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+
 import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Test;

File: src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java
Patch:
@@ -5,9 +5,10 @@
 package org.mockito.internal.invocation;
 
 import static java.util.Arrays.asList;
+
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.internal.invocation.MatcherApplicationStrategy.getMatcherApplicationStrategyFor;
 import static org.mockito.internal.matchers.Any.ANY;
 

File: src/test/java/org/mockito/internal/invocation/mockref/MockWeakReferenceTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.invocation.mockref;
 
+import static org.junit.Assert.fail;
+
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.fail;
-
 public class MockWeakReferenceTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/junit/StubbingArgMismatchesTest.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.junit;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Test;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.util.SimpleMockitoLogger;
 import org.mockito.invocation.Invocation;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
 public class StubbingArgMismatchesTest extends TestBase {
 
     SimpleMockitoLogger logger = new SimpleMockitoLogger();

File: src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java
Patch:
@@ -4,16 +4,16 @@
  */
 package org.mockito.internal.junit.util;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.assertEquals;
+
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;
 import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-import static org.assertj.core.api.Assertions.assertThat;
-
 public class JUnitFailureHackerTest extends TestBase {
 
     JUnitFailureHacker hacker = new JUnitFailureHacker();

File: src/test/java/org/mockito/internal/matchers/EqualityTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.matchers;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.internal.matchers.Equality.areEqual;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 public class EqualityTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
+import static org.junit.Assert.*;
+
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.*;
-
 
 public class EqualsTest extends TestBase {
 

File: src/test/java/org/mockito/internal/matchers/InstanceOfTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.matchers;
 
-import org.junit.Test;
+import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.Test;
 
 public class InstanceOfTest {
 

File: src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -4,13 +4,14 @@
  */
 package org.mockito.internal.matchers;
 
+import static org.junit.Assert.assertEquals;
+
 import java.util.regex.Pattern;
+
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class MatchersToStringTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/matchers/StringMatchersTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
-import org.junit.Test;
-
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+
 /**
  * Tests for the Matchers that operate over strings
  */

File: src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.matchers.apachecommons;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
+import static org.junit.Assert.*;
 
 import java.math.BigDecimal;
 import java.util.Arrays;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
+import org.mockitoutil.TestBase;
 
 // Class comes from Apache Commons Lang, added some tiny changes
 /**

File: src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.matchers.text;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class MatcherToStringTest extends TestBase {
 
     static class MatcherWithoutDescription implements ArgumentMatcher<Object> {

File: src/test/java/org/mockito/internal/progress/AtLeastTest.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.progress;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 public class AtLeastTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/reporting/PluralizerTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.reporting;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class PluralizerTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.runners.util;
 
+import static org.junit.Assert.assertNotNull;
+
 import org.junit.Test;
 import org.mockito.internal.runners.DefaultInternalRunner;
 import org.mockito.internal.runners.InternalRunner;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertNotNull;
-
 public class RunnerProviderTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.runners.util;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 public class TestMethodsFinderTest extends TestBase {
 
     public static class HasTests {

File: src/test/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidatorTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.fail;
+
 import org.junit.Test;
 import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;
 import org.mockito.internal.invocation.InvocationBuilder;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
-
 public class DefaultAnswerValidatorTest {
 
     @Test

File: src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
@@ -12,9 +15,6 @@
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationOnMock;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
 public class ReturnsArgumentAtTest {
     @Test
     public void should_be_able_to_return_the_first_parameter() throws Throwable {

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class ForwardsInvocationsTest extends TestBase {
 
     interface Foo {

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 public class ReturnsMoreEmptyValuesTest extends TestBase {
 
     private ReturnsMoreEmptyValues rv = new ReturnsMoreEmptyValues();

File: src/test/java/org/mockito/internal/util/MockNameImplTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.util;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class MockNameImplTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/util/PlatformTest.java
Patch:
@@ -4,11 +4,12 @@
  */
 package org.mockito.internal.util;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 import java.util.HashMap;
 import java.util.Map;
-import org.junit.Test;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import org.junit.Test;
 
 // Possible description on a IBM J9 VM (see #801)
 //

File: src/test/java/org/mockito/internal/util/PrimitivesTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.util;
 
-import org.junit.Test;
-
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
+import org.junit.Test;
+
 
 public class PrimitivesTest {
     @Test

File: src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.util;
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.junit.Assert.assertEquals;
-
 public class SimpleMockitoLoggerTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java
Patch:
@@ -4,10 +4,10 @@
  */
 package org.mockito.internal.util.collections;
 
-import org.junit.Test;
-
 import static org.junit.Assert.*;
 
+import org.junit.Test;
+
 
 public class IdentitySetTest {
 

File: src/test/java/org/mockito/internal/util/reflection/AccessibilityChangerTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.junit.Test;
+import static org.mockitoutil.VmArgAssumptions.assumeVmArgPresent;
 
 import java.lang.reflect.Field;
 import java.util.Observable;
 
-import static org.mockitoutil.VmArgAssumptions.assumeVmArgPresent;
+import org.junit.Test;
 
 public class AccessibilityChangerTest {
 

File: src/test/java/org/mockito/internal/util/reflection/BeanPropertySetterTest.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import static org.junit.Assert.*;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.lang.reflect.Field;
 import java.util.UUID;
 
-import static org.junit.Assert.*;
+import org.assertj.core.api.Assertions;
+import org.junit.Test;
 
 
 public class BeanPropertySetterTest {

File: src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 @SuppressWarnings("unused")
 public class FieldReaderTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/reflection/FieldsTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.junit.Test;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.internal.util.reflection.Fields.syntheticField;
 
 import java.lang.reflect.Field;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.internal.util.reflection.Fields.syntheticField;
+import org.junit.Test;
 
 public class FieldsTest {
 

File: src/test/java/org/mockito/internal/util/reflection/GenericArrayReturnTypeTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.junit.Test;
-import org.mockito.Answers;
+import static org.mockito.Mockito.mock;
 
 import java.util.Set;
 
-import static org.mockito.Mockito.mock;
+import org.junit.Test;
+import org.mockito.Answers;
 
 public class GenericArrayReturnTypeTest {
 

File: src/test/java/org/mockito/internal/util/reflection/GenericMasterTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
 import java.util.*;
 
-import static org.junit.Assert.assertEquals;
+import org.junit.Test;
 
 public class GenericMasterTest {
 

File: src/test/java/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.junit.Test;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.internal.util.reflection.SuperTypesLastSorter.sortSuperTypesLast;
 
 import java.lang.reflect.Field;
 import java.util.*;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.internal.util.reflection.SuperTypesLastSorter.sortSuperTypesLast;
+import org.junit.Test;
 
 @SuppressWarnings("unused")
 public class SuperTypesLastSorterTest {

File: src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java
Patch:
@@ -46,7 +46,4 @@ public Object getMock() {
         return mock;
     }
 
-    public VerificationMode description(String description) {
-        return VerificationModeFactory.description(this, description);
-    }
 }

File: src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java
Patch:
@@ -46,7 +46,4 @@ public Object getMock() {
         return mock;
     }
 
-    public VerificationMode description(String description) {
-        return VerificationModeFactory.description(this, description);
-    }
 }

File: src/main/java/org/mockito/AdditionalMatchers.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;

File: src/main/java/org/mockito/InOrder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import org.mockito.verification.VerificationMode;

File: src/main/java/org/mockito/Incubating.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import java.lang.annotation.Documented;

File: src/main/java/org/mockito/MockitoAnnotations.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;

File: src/main/java/org/mockito/exceptions/base/MockitoException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;

File: src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 public class MockitoInitializationException extends RuntimeException {

File: src/main/java/org/mockito/exceptions/base/MockitoSerializationIssue.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;

File: src/main/java/org/mockito/exceptions/misusing/CannotVerifyStubOnlyMock.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/FriendlyReminderException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/MissingMethodInvocationException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/NotAMockException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/NullInsteadOfMockException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/UnfinishedStubbingException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/misusing/UnfinishedVerificationException.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import static org.mockito.internal.util.StringUtil.removeFirstLine;

File: src/main/java/org/mockito/exceptions/verification/MoreThanAllowedActualInvocations.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/exceptions/verification/NeverWantedButInvoked.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/exceptions/verification/NoInteractionsWanted.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/exceptions/verification/TooLittleActualInvocations.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/exceptions/verification/TooManyActualInvocations.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/exceptions/verification/VerificationInOrderFailure.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/exceptions/verification/WantedButNotInvoked.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification;
 
 import static org.mockito.internal.util.StringUtil.removeFirstLine;

File: src/main/java/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification.junit;
 
 import static org.mockito.internal.util.StringUtil.removeFirstLine;

File: src/main/java/org/mockito/exceptions/verification/opentest4j/ArgumentsAreDifferent.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2019 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.verification.opentest4j;
 
 import static org.mockito.internal.util.StringUtil.removeFirstLine;

File: src/main/java/org/mockito/internal/InOrderImpl.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal;
 
 import org.mockito.InOrder;

File: src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import org.mockito.exceptions.base.MockitoException;

File: src/main/java/org/mockito/internal/configuration/injection/MockInjection.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import java.lang.reflect.Field;

File: src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import java.lang.reflect.Field;

File: src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import static org.mockito.internal.exceptions.Reporter.cannotInitializeForInjectMocksAnnotation;

File: src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import org.mockito.Mockito;

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -264,4 +264,3 @@ private static Set<Class<?>> prepareExtraInterfaces(CreationSettings settings) {
     }
 
 }
-

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.creation.bytebuddy;
 
 import org.mockito.Incubating;

File: src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.debugging;
 
 import java.io.PrintStream;

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.exceptions;
 
 import org.mockito.exceptions.base.MockitoAssertionError;

File: src/main/java/org/mockito/internal/exceptions/VerificationAwareInvocation.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.exceptions;
 
 import org.mockito.invocation.DescribedInvocation;

File: src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.exceptions.stacktrace;
 
 import org.mockito.configuration.IMockitoConfiguration;

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.exceptions.stacktrace;
 
 import java.lang.reflect.Method;

File: src/main/java/org/mockito/internal/invocation/AbstractAwareMethod.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 public interface AbstractAwareMethod {

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 import static org.mockito.internal.invocation.MatcherApplicationStrategy.getMatcherApplicationStrategyFor;

File: src/main/java/org/mockito/internal/invocation/InvocationsFinder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 import java.util.LinkedList;

File: src/main/java/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 import org.mockito.internal.util.MockUtil;

File: src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation.finder;
 
 import org.mockito.internal.invocation.InvocationComparator;

File: src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation.finder;
 
 import org.mockito.internal.util.collections.ListUtil;

File: src/main/java/org/mockito/internal/invocation/mockref/MockReference.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation.mockref;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/invocation/mockref/MockStrongReference.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation.mockref;
 
 import java.io.ObjectStreamException;

File: src/main/java/org/mockito/internal/invocation/mockref/MockWeakReference.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation.mockref;
 
 import java.io.ObjectStreamException;

File: src/main/java/org/mockito/internal/matchers/And.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/Any.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/ArrayEquals.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.lang.reflect.Array;

File: src/main/java/org/mockito/internal/matchers/CompareEqual.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/CompareTo.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/Contains.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/Equals.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/Find.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/GreaterOrEqual.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/GreaterThan.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/LessOrEqual.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/LessThan.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/Matches.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/Not.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/Null.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/Or.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/matchers/Same.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java
Patch:
@@ -2,9 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
-//NON-STANDARD LICENCE HEADER HERE - THAT'S OK
-//Class comes from Apache Commons Lang, added some tiny changes
 package org.mockito.internal.matchers.apachecommons;
 
 import java.lang.reflect.AccessibleObject;
@@ -14,6 +11,7 @@
 import java.util.Collections;
 import java.util.List;
 
+// Class comes from Apache Commons Lang, added some tiny changes
 /**
  * <p>Assists in implementing {@link Object#equals(Object)} methods.</p>
  *

File: src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers.apachecommons;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.progress;
 
 import org.mockito.ArgumentMatcher;

File: src/main/java/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.progress;
 
 import java.util.Set;

File: src/main/java/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.progress;
 
 import org.mockito.internal.configuration.GlobalConfiguration;

File: src/main/java/org/mockito/internal/stubbing/BaseStubbing.java
Patch:
@@ -102,5 +102,3 @@ public <M> M getMock() {
         return (M) this.strongMockRef;
     }
 }
-
-

File: src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java
Patch:
@@ -42,5 +42,3 @@ public void setStrictness(Strictness strictness) {
         this.strictness = strictness;
     }
 }
-
-

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -137,5 +137,3 @@ public Stubber doCallRealMethod() {
         return this;
     }
 }
-
-

File: src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java
Patch:
@@ -44,4 +44,3 @@ public void validateFor(final InvocationOnMock invocation) {
         }
     }
 }
-

File: src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.stubbing.answers;
 
 import org.mockito.invocation.InvocationOnMock;

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -150,4 +150,3 @@ private Class<?> inferArgumentType(Invocation invocation, int argumentIndex) {
 
     }
 }
-

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.stubbing.defaultanswers;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/internal/util/Checks.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util;
 
 /**

File: src/main/java/org/mockito/internal/util/DefaultMockingDetails.java
Patch:
@@ -86,4 +86,3 @@ private void assertGoodMock() {
         }
     }
 }
-

File: src/main/java/org/mockito/internal/util/collections/ListUtil.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util.collections;
 
 import java.util.Collection;

File: src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util.reflection;
 
 /**
@@ -55,4 +54,3 @@ public Class<?> fieldClass() {
         return fieldInstance != null ? fieldInstance.getClass() : null;
     }
 }
-

File: src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -692,5 +692,3 @@ public WildcardType wildCard() {
     }
 
 }
-
-

File: src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2015 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util.reflection;
 
 import java.lang.reflect.Field;

File: src/main/java/org/mockito/internal/verification/AtLeast.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import static org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsChecker.checkAtLeastNumberOfInvocations;

File: src/main/java/org/mockito/internal/verification/AtMost.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import static org.mockito.internal.exceptions.Reporter.wantedAtMostX;

File: src/main/java/org/mockito/internal/verification/Calls.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import static org.mockito.internal.verification.checkers.MissingInvocationChecker.checkMissingInvocation;

File: src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import org.mockito.internal.util.collections.ListUtil;

File: src/main/java/org/mockito/internal/verification/NoInteractions.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2017 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import org.mockito.internal.verification.api.VerificationData;

File: src/main/java/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import static org.mockito.internal.exceptions.Reporter.noMoreInteractionsWanted;

File: src/main/java/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/verification/SingleRegisteredInvocation.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/verification/Times.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import static org.mockito.internal.verification.checkers.MissingInvocationChecker.checkMissingInvocation;

File: src/main/java/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import org.mockito.verification.VerificationMode;

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import java.util.List;

File: src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import static org.mockito.internal.exceptions.Reporter.argumentsAreDifferent;

File: src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import java.util.Arrays;

File: src/main/java/org/mockito/invocation/InvocationOnMock.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.invocation;
 
 import java.io.Serializable;

File: src/main/java/org/mockito/mock/MockCreationSettings.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.mock;
 
 import org.mockito.Incubating;

File: src/main/java/org/mockito/plugins/InlineMockMaker.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2019 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.plugins;
 
 import org.mockito.Incubating;

File: src/main/java/org/mockito/stubbing/ValidableAnswer.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.stubbing;
 
 import org.mockito.Incubating;

File: src/main/java/org/mockito/verification/VerificationAfterDelay.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.verification;
 
 import org.mockito.Mockito;

File: src/main/java/org/mockito/verification/VerificationMode.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.verification;
 
 import org.mockito.Mockito;

File: src/main/java/org/mockito/verification/VerificationWithTimeout.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.verification;
 
 import org.mockito.Mockito;

File: src/test/java/org/concurrentmockito/ThreadVerifiesContinuouslyInteractingMockTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.concurrentmockito;
 
 import org.junit.Test;

File: src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.concurrentmockito;
 
 import org.junit.Test;

File: src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.concurrentmockito;
 
 import org.junit.Test;

File: src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.concurrentmockito;
 
 import org.junit.Test;

File: src/test/java/org/mockito/InvocationFactoryTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import org.junit.Test;

File: src/test/java/org/mockito/MockitoTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: src/test/java/org/mockito/StateMaster.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito;
 
 import org.mockito.listeners.MockitoListener;

File: src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import org.junit.Test;

File: src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import org.junit.Test;

File: src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import org.junit.Test;

File: src/test/java/org/mockito/exceptions/base/StackTraceBuilder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import java.util.Arrays;

File: src/test/java/org/mockito/exceptions/base/TraceBuilder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.exceptions.base;
 
 import java.util.Collections;

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal;
 
 import org.junit.Before;

File: src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal;
 
 import org.junit.After;

File: src/test/java/org/mockito/internal/configuration/MockInjectionTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration;
 
 import org.junit.After;

File: src/test/java/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import org.junit.Before;

File: src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.configuration.injection;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/exceptions/ReporterTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.exceptions;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.exceptions.stacktrace;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.handler;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 import org.mockito.Mockito;

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 import static java.util.Arrays.asList;

File: src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.invocation;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockito/internal/invocation/mockref/MockWeakReferenceTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
-import org.mockito.internal.invocation.mockref.MockWeakReference;
 import org.mockitoutil.TestBase;
 
 import static org.junit.Assert.fail;

File: src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.matchers;
 
 import java.util.regex.Pattern;

File: src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java
Patch:
@@ -2,8 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
-//Class comes from Apache Commons Lang, added some tiny changes
 package org.mockito.internal.matchers.apachecommons;
 
 import org.junit.Test;
@@ -14,6 +12,7 @@
 
 import static org.junit.Assert.*;
 
+// Class comes from Apache Commons Lang, added some tiny changes
 /**
  * @author <a href="mailto:sdowney@panix.com">Steve Downey</a>
  * @author <a href="mailto:scolebourne@joda.org">Stephen Colebourne</a>

File: src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.progress;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockito/internal/progress/TimesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.progress;
 
 import org.junit.Rule;

File: src/test/java/org/mockito/internal/progress/VerificationModeBuilder.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.progress;
 
 

File: src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.stubbing;
 
 import org.junit.Before;

File: src/test/java/org/mockito/internal/stubbing/answers/AnswersWithDelayTest.java
Patch:
@@ -43,4 +43,3 @@ public void should_delay() throws Throwable {
         assertThat(timePassed).isCloseTo(sleepyTime, within(15L));
     }
 }
-

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.stubbing.defaultanswers;
 
 import org.junit.Assume;

File: src/test/java/org/mockito/internal/util/ChecksTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2017 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util;
 
 import static org.junit.Assert.assertEquals;

File: src/test/java/org/mockito/internal/util/MockUtilTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockito/internal/util/StringUtilTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/util/collections/ListUtilTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util.collections;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockito/internal/util/reflection/AccessibilityChangerTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util.reflection;
 
 import org.junit.Test;

File: src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.util.reflection;
 
 

File: src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import org.junit.Rule;

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import org.junit.Before;

File: src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import java.util.List;

File: src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockito.internal.verification.checkers;
 
 import java.util.List;

File: src/test/java/org/mockitousage/PlaygroundTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/annotation/AnnotationsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.After;

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.annotation;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import net.bytebuddy.ClassFileVersion;

File: src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import static org.assertj.core.api.Assertions.assertThat;

File: src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.basicapi;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import java.io.OutputStream;

File: src/test/java/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java
Patch:
@@ -115,4 +115,3 @@ interface Service {
     }
 
 }
-

File: src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs.creation;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/injection/ShouldNotTryToInjectInFinalOrStaticFieldsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs.injection;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs.varargs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/varargs/VarargsErrorWhenCallingRealMethodTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs.varargs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.bugs.varargs;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/examples/use/Article.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.examples.use;
 
 public class Article {

File: src/test/java/org/mockitousage/examples/use/ArticleCalculator.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.examples.use;
 
 public interface ArticleCalculator {

File: src/test/java/org/mockitousage/examples/use/ArticleDatabase.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.examples.use;
 
 import java.util.List;

File: src/test/java/org/mockitousage/examples/use/ArticleManager.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.examples.use;
 
 import java.util.List;

File: src/test/java/org/mockitousage/examples/use/ExampleTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.examples.use;
 
 import org.junit.Rule;

File: src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/matchers/CustomMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/matchers/GenericMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.hamcrest.BaseMatcher;

File: src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.junit.Ignore;

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import java.math.BigDecimal;

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.assertj.core.api.ThrowableAssert;

File: src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.matchers;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.misuse;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.misuse;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.misuse;
 
 import org.junit.After;

File: src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.misuse;
 
 import org.junit.After;

File: src/test/java/org/mockitousage/packageprotected/MockingPackageProtectedTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.packageprotected;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.performance;
 
 import org.junit.Ignore;

File: src/test/java/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.puzzlers;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/serialization/ParallelSerializationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.serialization;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.spies;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.spies;
 
 import net.bytebuddy.ByteBuddy;

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.spies;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.junit.After;

File: src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stacktrace;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/strictness/LenientMockAnnotationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/strictness/PotentialStubbingSensitivityTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/strictness/ProductionCode.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.mockitousage.IMethods;

File: src/test/java/org/mockitousage/strictness/StrictnessPerMockTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/strictness/StrictnessPerStubbingTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.ThrowableAssert;

File: src/test/java/org/mockitousage/strictness/StrictnessPerStubbingWithRunnerTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.ThrowableAssert;

File: src/test/java/org/mockitousage/strictness/StrictnessWhenRuleStrictnessIsUpdatedTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.ThrowableAssert;

File: src/test/java/org/mockitousage/strictness/StrictnessWithRulesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.strictness;
 
 import org.assertj.core.api.ThrowableAssert;

File: src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/stubbing/CloningParameterTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/stubbing/ReturningDefaultValuesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.stubbing;
 
 import static org.junit.Assert.assertEquals;

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.assertj.core.api.ThrowableAssert;

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/OnlyVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/VerificationInOrderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/VerificationInOrderWithTimeoutTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Test;

File: src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Before;

File: src/test/java/org/mockitousage/verification/VerificationWithAfterAndCaptorTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.junit.Ignore;

File: src/test/java/org/mockitousage/verification/VerificationWithAfterTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.verification;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitoutil/Conditions.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitoutil;
 
 import org.assertj.core.api.Assertions;

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitoutil;
 
 import org.assertj.core.api.Condition;

File: subprojects/deprecatedPluginsTest/src/test/java/org/mockitousage/plugins/DeprecatedInstantiatorProviderTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.plugins;
 
 import org.junit.Test;

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.plugins.stacktrace;
 
 import org.junit.After;

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitchTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.plugins.switcher;
 
 import org.junit.Test;

File: subprojects/inline/src/test/java/org/mockitoinline/bugs/CyclicMockMethodArgumentMemoryLeakTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2019 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitoinline.bugs;
 
 import org.junit.Test;

File: subprojects/inline/src/test/java/org/mockitoinline/bugs/SelfSpyReferenceMemoryLeakTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2019 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitoinline.bugs;
 
 import org.junit.Test;

File: src/main/java/org/mockito/BDDMockito.java
Patch:
@@ -251,7 +251,7 @@ public interface Then<T> {
         /**
          * @see #verifyZeroInteractions(Object...)
          * @since 2.1.0
-         * @deprecated Since 3.x.x. Please migrate your code to {@link #shouldHaveNoInteractions()}
+         * @deprecated Since 3.0.1. Please migrate your code to {@link #shouldHaveNoInteractions()}
          */
         @Deprecated
         void shouldHaveZeroInteractions();
@@ -264,7 +264,7 @@ public interface Then<T> {
 
         /**
          * @see #verifyNoInteractions(Object...)
-         * @since 3.x.x
+         * @since 3.0.1
          */
         void shouldHaveNoInteractions();
     }
@@ -327,7 +327,7 @@ public void shouldHaveNoMoreInteractions() {
 
         /**
          * @see #verifyNoInteractions(Object...)
-         * @since 3.x.x
+         * @since 3.0.1
          */
         public void shouldHaveNoInteractions() {
             verifyNoInteractions(mock);

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2249,7 +2249,7 @@ public static void verifyNoMoreInteractions(Object... mocks) {
      * This method has the same behavior as {@link #verifyNoMoreInteractions(Object...)}.
      *
      * @param mocks to be verified
-     * @deprecated Since 3.x.x. Please migrate your code to {@link #verifyNoInteractions(Object...)}
+     * @deprecated Since 3.0.1. Please migrate your code to {@link #verifyNoInteractions(Object...)}
      */
     @Deprecated
     public static void verifyZeroInteractions(Object... mocks) {
@@ -2270,7 +2270,7 @@ public static void verifyZeroInteractions(Object... mocks) {
      * See examples in javadoc for {@link Mockito} class
      *
      * @param mocks to be verified
-     * @since 3.x.x
+     * @since 3.0.1
      */
     public static void verifyNoInteractions(Object... mocks) {
         MOCKITO_CORE.verifyNoInteractions(mocks);

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2576,7 +2576,7 @@ public static Stubber doReturn(Object toBeReturned, Object... toBeReturnedNext)
      * <p>
      * <code>InOrder</code> verification is 'greedy', but you will hardly ever notice it.
      * If you want to find out more, read
-     * <a href="https://github.com/mockito/mockito/wiki/Greedy-algorithm-of-verfication-InOrder">this wiki page</a>.
+     * <a href="https://github.com/mockito/mockito/wiki/Greedy-algorithm-of-verification-InOrder">this wiki page</a>.
      * <p>
      * As of Mockito 1.8.4 you can verifyNoMoreInteractions() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
      * <p>

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.stubbing;
 
+import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockito.internal.stubbing.answers.CallsRealMethods;
 import org.mockito.internal.stubbing.answers.Returns;
 import org.mockito.internal.stubbing.answers.ThrowsException;
@@ -15,7 +16,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.mockito.internal.configuration.plugins.Plugins;
 import static org.mockito.internal.exceptions.Reporter.notAMockPassedToWhenMethod;
 import static org.mockito.internal.exceptions.Reporter.notAnException;
 import static org.mockito.internal.exceptions.Reporter.nullPassedToWhenMethod;
@@ -36,10 +36,12 @@ public StubberImpl(Strictness strictness) {
     @Override
     public <T> T when(T mock) {
         if (mock == null) {
+            mockingProgress().reset();
             throw nullPassedToWhenMethod();
         }
 
         if (!isMock(mock)) {
+            mockingProgress().reset();
             throw notAMockPassedToWhenMethod();
         }
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java
Patch:
@@ -135,7 +135,9 @@ public class InlineByteBuddyMockMaker implements ClassCreatingMockMaker, InlineM
                 } finally {
                     outputStream.close();
                 }
-                instrumentation.appendToBootstrapClassLoaderSearch(new JarFile(boot));
+                try (JarFile jarfile = new JarFile(boot)) {
+                    instrumentation.appendToBootstrapClassLoaderSearch(jarfile);
+                }
                 try {
                     Class.forName("org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher", false, null);
                 } catch (ClassNotFoundException cnfe) {

File: src/main/java/org/mockito/quality/Strictness.java
Patch:
@@ -22,7 +22,7 @@
  * <ol>
  *     <li>{@link Strictness#STRICT_STUBS} - ensures clean tests, reduces test code duplication, improves debuggability.
  *       Best combination of flexibility and productivity. Highly recommended.
- *       Planned as default for Mockito v3.
+ *       Planned as default for Mockito v4.
  *       Enable it via {@link MockitoRule}, {@link MockitoJUnitRunner} or {@link MockitoSession}.
  *       See {@link #STRICT_STUBS} for the details.</li>
  *     <li>{@link Strictness#LENIENT} - no added behavior.
@@ -69,7 +69,7 @@ public enum Strictness {
      * Ensures clean tests, reduces test code duplication, improves debuggability.
      * Offers best combination of flexibility and productivity.
      * Highly recommended.
-     * Planned as default for Mockito v3.
+     * Planned as default for Mockito v4.
      * Enable it via our JUnit support ({@link MockitoJUnit}) or {@link MockitoSession}.
      * <p>
      * Adds following behavior:

File: src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java
Patch:
@@ -61,7 +61,7 @@ private static Type findGenericInterface(Class<?> sourceClass, Class<?> targetBa
         for (int i = 0; i < sourceClass.getInterfaces().length; i++) {
             Class<?> inter = sourceClass.getInterfaces()[i];
             if (inter == targetBaseInterface) {
-                return sourceClass.getGenericInterfaces()[0];
+                return sourceClass.getGenericInterfaces()[i];
             } else {
                 Type deeper = findGenericInterface(inter, targetBaseInterface);
                 if (deeper != null) {

File: src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java
Patch:
@@ -38,6 +38,7 @@ interface IDeeper extends Serializable, Iface, Cloneable {}
 
     interface Crazy extends Serializable, IDeeper, Cloneable {}
     class Crazier extends EvenDeeper implements Crazy {}
+    class SecondGeneric implements Serializable, IBase<Integer> {}
 
     @Test public void finds_generic_type() {
         assertEquals(Integer.class, genericTypeOf(IntImpl.class, Base.class, IBase.class));
@@ -64,5 +65,7 @@ class Crazier extends EvenDeeper implements Crazy {}
         assertEquals(Integer.class, genericTypeOf(IDeeper.class, Base.class, IBase.class));
         assertEquals(Integer.class, genericTypeOf(Crazy.class, Base.class, IBase.class));
         assertEquals(Integer.class, genericTypeOf(Crazier.class, Base.class, IBase.class));
+
+        assertEquals(Integer.class, genericTypeOf(SecondGeneric.class, Base.class, IBase.class));
     }
 }

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1500,7 +1500,7 @@
  *
  * <h3 id="44">44. <a class="meaningful_link" href="#mockito_instantiator_provider_deprecation" name="mockito_instantiator_provider_deprecation">
  *       Deprecated <code>org.mockito.plugins.InstantiatorProvider</code> as it was leaking internal API. it was
- *       replaced by <code>org.mockito.plugins.InstantiatorProvider2 (Since 2.15.4)</a></h3>
+ *       replaced by <code>org.mockito.plugins.InstantiatorProvider2 (Since 2.15.4)</code></a></h3>
  *
  * <p>{@link org.mockito.plugins.InstantiatorProvider} returned an internal API. Hence it was deprecated and replaced
  * by {@link org.mockito.plugins.InstantiatorProvider2}. Old {@link org.mockito.plugins.InstantiatorProvider

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java
Patch:
@@ -301,7 +301,7 @@ public String nonMockableReason() {
                 if (EXCLUDES.contains(type)) {
                     return "Cannot mock wrapper types, String.class or Class.class";
                 }
-                return "VM does not not support modification of given type";
+                return "VM does not support modification of given type";
             }
         };
     }

File: src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java
Patch:
@@ -216,7 +216,7 @@ public void should_provide_reason_for_wrapper_class() {
     @Test
     public void should_provide_reason_for_vm_unsupported() {
         MockMaker.TypeMockability mockable = mockMaker.isTypeMockable(int[].class);
-        assertThat(mockable.nonMockableReason()).isEqualTo("VM does not not support modification of given type");
+        assertThat(mockable.nonMockableReason()).isEqualTo("VM does not support modification of given type");
     }
 
     @Test

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1572,7 +1572,7 @@ public class Mockito extends ArgumentMatchers {
      * <code>ReturnsSmartNulls</code> first tries to return ordinary values (zeros, empty collections, empty string, etc.)
      * then it tries to return SmartNull. If the return type is final then plain <code>null</code> is returned.
      * <p>
-     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 3.0.0
+     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 4.0.0
      * <p>
      * Example:
      * <pre class="code"><code class="java">

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -20,7 +20,6 @@
 import net.bytebuddy.implementation.Implementation;
 import net.bytebuddy.jar.asm.ClassVisitor;
 import net.bytebuddy.jar.asm.MethodVisitor;
-import net.bytebuddy.jar.asm.Opcodes;
 import net.bytebuddy.matcher.ElementMatchers;
 import net.bytebuddy.pool.TypePool;
 import net.bytebuddy.utility.OpenedClassReader;
@@ -311,7 +310,7 @@ public MethodVisitor visitMethod(int access, String name, String desc, String si
         private static class MethodParameterStrippingMethodVisitor extends MethodVisitor {
 
             public MethodParameterStrippingMethodVisitor(MethodVisitor mv) {
-                super(Opcodes.ASM5, mv);
+                super(OpenedClassReader.ASM_API, mv);
             }
 
             @Override

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -15,13 +15,13 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.internal.configuration.plugins.Plugins;
 import static org.mockito.internal.exceptions.Reporter.notAMockPassedToWhenMethod;
 import static org.mockito.internal.exceptions.Reporter.notAnException;
 import static org.mockito.internal.exceptions.Reporter.nullPassedToWhenMethod;
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
 import static org.mockito.internal.stubbing.answers.DoesNothing.doesNothing;
 import static org.mockito.internal.util.MockUtil.isMock;
-import static org.objenesis.ObjenesisHelper.newInstance;
 
 public class StubberImpl implements Stubber {
 
@@ -89,7 +89,7 @@ public Stubber doThrow(Class<? extends Throwable> toBeThrown) {
         }
         Throwable e = null;
         try {
-            e = newInstance(toBeThrown);
+            e = Plugins.getInstantiatorProvider().getInstantiator(null).newInstance(toBeThrown);
         } finally {
             if (e == null) {
                 //this means that an exception or error was thrown when trying to create new instance

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2556,7 +2556,7 @@ public static Stubber doReturn(Object toBeReturned, Object... toBeReturnedNext)
      * If you want to find out more, read
      * <a href="https://github.com/mockito/mockito/wiki/Greedy-algorithm-of-verfication-InOrder">this wiki page</a>.
      * <p>
-     * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
+     * As of Mockito 1.8.4 you can verifyNoMoreInteractions() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
      * <p>
      * See examples in javadoc for {@link Mockito} class
      *
@@ -2782,7 +2782,7 @@ public static VerificationMode calls( int wantedNumberOfInvocations ){
      *   verify(mock, only()).someMethod();
      *   //above is a shorthand for following 2 lines of code:
      *   verify(mock).someMethod();
-     *   verifyNoMoreInvocations(mock);
+     *   verifyNoMoreInteractions(mock);
      * </code></pre>
      *
      * <p>

File: src/test/java/org/mockito/internal/exceptions/ReporterTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.Mockito;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.TooLittleActualInvocations;
+import org.mockito.exceptions.verification.TooFewActualInvocations;
 import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.stubbing.answers.Returns;
@@ -24,9 +24,9 @@
 
 public class ReporterTest extends TestBase {
 
-    @Test(expected = TooLittleActualInvocations.class)
+    @Test(expected = TooFewActualInvocations.class)
     public void should_let_passing_null_last_actual_stack_trace() throws Exception {
-        throw Reporter.tooLittleActualInvocations(new org.mockito.internal.reporting.Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);
+        throw Reporter.tooFewActualInvocations(new org.mockito.internal.reporting.Discrepancy(1, 2), new InvocationBuilder().toInvocation(), null);
     }
 
     @Test(expected = MockitoException.class)

File: src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java
Patch:
@@ -61,7 +61,7 @@ public void shouldPassIfChunkMatches() throws Exception {
     }
 
     @Test
-    public void shouldReportTooLittleInvocations() throws Exception {
+    public void shouldReportTooFewInvocations() throws Exception {
         Invocation first = buildSimpleMethod().toInvocation();
         Invocation second = buildSimpleMethod().toInvocation();
 
@@ -89,7 +89,7 @@ public void shouldMarkAsVerifiedInOrder() throws Exception {
     }
 
     @Test
-    public void shouldReportTooLittleActual() throws Exception {
+    public void shouldReportTooFewActual() throws Exception {
         wanted = buildSimpleMethod().toInvocationMatcher();
         invocations = asList(buildSimpleMethod().toInvocation(), buildSimpleMethod().toInvocation());
 

File: src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.exceptions.misusing.UnfinishedStubbingException;
-import org.mockito.exceptions.verification.TooLittleActualInvocations;
+import org.mockito.exceptions.verification.TooFewActualInvocations;
 import org.mockito.junit.MockitoJUnitRunner;
 import org.mockitousage.IMethods;
 import org.mockitoutil.JUnitResultAssert;
@@ -42,7 +42,7 @@ public class SilentRunnerTest extends TestBase {
                 SomeFailingFeature.class
         );
         //then
-        JUnitResultAssert.assertThat(result).fails(1, TooLittleActualInvocations.class);
+        JUnitResultAssert.assertThat(result).fails(1, TooFewActualInvocations.class);
     }
 
     @Test public void failing_test_in_constructor() {

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.Mockito;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.TooLittleActualInvocations;
+import org.mockito.exceptions.verification.TooFewActualInvocations;
 import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockitoutil.TestBase;
 
@@ -141,7 +141,7 @@ public void shouldVerifyNumberOfTimesAndFail() {
         try {
             verify(spy, times(3)).add("one");
             fail();
-        } catch (TooLittleActualInvocations e) {}
+        } catch (TooFewActualInvocations e) {}
     }
 
     @Test

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -79,7 +79,7 @@ public void shouldPointToThirdInteractionBecauseAtLeastOnceUsed() {
     }
 
     @Test
-    public void shouldPointToThirdChunkWhenTooLittleActualInvocations() {
+    public void shouldPointToThirdChunkWhenTooFewActualInvocations() {
         inOrder.verify(mock, times(2)).simpleMethod(anyInt());
         inOrder.verify(mockTwo, times(2)).simpleMethod(anyInt());
         inOrder.verify(mock, atLeastOnce()).simpleMethod(anyInt());

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -111,7 +111,7 @@ public void shouldPointToSecondMethodBecauseOfTooManyActualInvocations() {
     }
 
     @Test
-    public void shouldPointToFourthMethodBecauseOfTooLittleActualInvocations() {
+    public void shouldPointToFourthMethodBecauseOfTooFewActualInvocations() {
         inOrder.verify(mock).simpleMethod(anyInt());
         inOrder.verify(mockTwo).simpleMethod(anyInt());
         inOrder.verify(mock).simpleMethod(anyInt());

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -163,7 +163,7 @@ public void shouldPrintTooManyInvocations() {
     }
 
     @Test
-    public void shouldPrintTooLittleInvocations() {
+    public void shouldPrintTooFewInvocations() {
         two.simpleMethod(2);
 
         inOrder.verify(one, atLeastOnce()).simpleMethod(anyInt());

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.exceptions.verification.TooLittleActualInvocations;
+import org.mockito.exceptions.verification.TooFewActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 import org.mockitoutil.TestBase;
 
@@ -33,7 +33,7 @@ public void shouldVerifyActualNumberOfInvocationsSmallerThanWanted() throws Exce
         try {
             Mockito.verify(mock, times(100)).clear();
             fail();
-        } catch (TooLittleActualInvocations e) {
+        } catch (TooFewActualInvocations e) {
             assertThat(e)
                 .hasMessageContaining("mock.clear();")
                 .hasMessageContaining("Wanted 100 times")

File: src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -28,15 +28,15 @@ public void setup() {
     }
 
     @Test
-    public void shouldDetectTooLittleActualInvocations() throws Exception {
+    public void shouldDetectTooFewActualInvocations() throws Exception {
         mock.clear();
         mock.clear();
 
         verify(mock, times(2)).clear();
         try {
             verify(mock, times(100)).clear();
             fail();
-        } catch (TooLittleActualInvocations e) {
+        } catch (TooFewActualInvocations e) {
             assertThat(e)
                 .hasMessageContaining("Wanted 100 times")
                 .hasMessageContaining("was 2");

File: src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java
Patch:
@@ -138,7 +138,7 @@ public void shouldThrowNoMoreInvocationsForMockTwo() {
     }
 
     @Test
-    public void shouldThrowTooLittleInvocationsForMockTwo() {
+    public void shouldThrowTooFewInvocationsForMockTwo() {
         InOrder inOrder = inOrder(mockTwo);
 
         try {

File: src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.exceptions.verification.TooLittleActualInvocations;
+import org.mockito.exceptions.verification.TooFewActualInvocations;
 import org.mockito.junit.MockitoRule;
 import org.mockitousage.IMethods;
 import org.mockitoutil.Stopwatch;
@@ -116,7 +116,7 @@ public void should_verify_with_times_x_and_fail() {
             public void call() {
                 verify(mock, timeout(100).times(2)).oneArg('c');
             }
-        }).isInstanceOf(TooLittleActualInvocations.class);
+        }).isInstanceOf(TooFewActualInvocations.class);
     }
 
     @Test
@@ -150,7 +150,7 @@ public void should_verify_with_at_least_and_fail() {
             public void call() {
                 verify(mock, timeout(100).atLeast(3)).oneArg('c');
             }
-        }).isInstanceOf(TooLittleActualInvocations.class);
+        }).isInstanceOf(TooFewActualInvocations.class);
     }
 
     @Test

File: src/main/java/org/mockito/ArgumentCaptor.java
Patch:
@@ -40,7 +40,7 @@
  *
  * <p>
  * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).
- * Both techniques can be used for making sure certain arguments where passed to mocks.
+ * Both techniques can be used for making sure certain arguments were passed to mocks.
  * However, ArgumentCaptor may be a better fit if:
  * <ul>
  * <li>custom argument matcher is not likely to be reused</li>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -694,7 +694,7 @@
  * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.
  * <p>
  * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).
- * Both techniques can be used for making sure certain arguments where passed to mocks.
+ * Both techniques can be used for making sure certain arguments were passed to mocks.
  * However, ArgumentCaptor may be a better fit if:
  * <ul>
  * <li>custom argument matcher is not likely to be reused</li>

File: src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java
Patch:
@@ -26,7 +26,7 @@ public boolean isVarargMatcher() {
     }
 
     public String toString() {
-        //TODO SF add unit tests and integ test coverage for describeTo()
+        //TODO SF add unit tests and integ test coverage for toString()
         return StringDescription.toString(matcher);
     }
 }

File: src/test/java/org/concurrentmockito/ThreadVerifiesContinuouslyInteractingMockTest.java
Patch:
@@ -14,7 +14,7 @@
 import static org.mockito.Mockito.verify;
 
 //this test exposes the problem most of the time
-public class ThreadVerifiesContinuoslyInteractingMockTest extends TestBase {
+public class ThreadVerifiesContinuouslyInteractingMockTest extends TestBase {
 
     @Mock private IMethods mock;
 

File: src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java
Patch:
@@ -280,7 +280,7 @@ public void times_never_atLeast_atMost_verificationModes_should_work() {
 
         verify(person.getAddress("the docks").getStreet(), times(3)).getName();
         verify(person.getAddress("the docks").getStreet(Locale.CHINESE), never()).getName();
-        verify(person.getAddress("the docks").getStreet(Locale.ITALIAN), atMost(1)).getName();
+        verify(person.getAddress("the docks").getStreet(Locale.ITALIAN), atMostOnce()).getName();
     }
 
 

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldReportWantedInvocationDiffersFromActual() {
 
         exception.expectMessage("Argument(s) are different! Wanted:");
         exception.expectMessage("mock.intArgumentMethod(2222);");
-        exception.expectMessage("Actual invocation has different arguments:");
+        exception.expectMessage("Actual invocations have different arguments:");
         exception.expectMessage("mock.intArgumentMethod(1111);");
 
         MissingInvocationChecker.checkMissingInvocation(invocations, wanted);
@@ -82,7 +82,7 @@ public void shouldReportUsingInvocationDescription() {
 
         exception.expectMessage("Argument(s) are different! Wanted:");
         exception.expectMessage("mock.intArgumentMethod(MyCoolPrint(2222));");
-        exception.expectMessage("Actual invocation has different arguments:");
+        exception.expectMessage("Actual invocations have different arguments:");
         exception.expectMessage("mock.intArgumentMethod(MyCoolPrint(1111));");
 
         MissingInvocationChecker.checkMissingInvocation(invocations, wanted);
@@ -103,7 +103,7 @@ private InvocationBuilder buildDifferentMethod() {
     static class CustomInvocationBuilder extends InvocationBuilder {
         @Override
         protected Invocation createInvocation(MockReference<Object> mockRef, MockitoMethod mockitoMethod, final Object[] arguments,
-                                              RealMethod realMethod, Location location, int sequenceNumber) {
+            RealMethod realMethod, Location location, int sequenceNumber) {
             return new InterceptedInvocation(mockRef, mockitoMethod, arguments, realMethod, location, sequenceNumber) {
                 @Override
                 public List<ArgumentMatcher> getArgumentsAsMatchers() {

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java
Patch:
@@ -77,7 +77,7 @@ public void shouldReportArgumentsAreDifferent() throws Exception {
 
 		exception.expectMessage("Argument(s) are different! Wanted:");
 		exception.expectMessage("mock.intArgumentMethod(2222);");
-		exception.expectMessage("Actual invocation has different arguments:");
+		exception.expectMessage("Actual invocations have different arguments:");
 		exception.expectMessage("mock.intArgumentMethod(1111);");
 
     	checkMissingInvocation(invocations, wanted, context);

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -97,7 +97,7 @@ public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {
             inOrder.verify(one).simpleMethod(999);
             fail();
         } catch (org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent e) {
-            assertThat(e).hasMessageContaining("has different arguments");
+            assertThat(e).hasMessageContaining("have different arguments");
         }
     }
 

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -82,7 +82,7 @@ public void should_print_actual_and_wanted_in_line() {
 
             String actual =
                     "\n" +
-                    "Actual invocation has different arguments:" +
+                    "Actual invocations have different arguments:" +
                     "\n" +
                     "iMethods.varargs(1, 2);";
 
@@ -116,7 +116,7 @@ public void should_print_actual_and_wanted_in_multiple_lines() {
 
             String actual =
                     "\n" +
-                    "Actual invocation has different arguments:" +
+                    "Actual invocations have different arguments:" +
                     "\n" +
                     "iMethods.varargs(" +
                     "\n" +

File: subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoNotExtensible.java
Patch:
@@ -6,6 +6,7 @@
 
 import static com.google.errorprone.matchers.Description.NO_MATCH;
 
+import com.google.auto.service.AutoService;
 import com.google.errorprone.BugPattern;
 import com.google.errorprone.BugPattern.SeverityLevel;
 import com.google.errorprone.VisitorState;
@@ -16,6 +17,7 @@
 import com.sun.source.tree.ClassTree;
 
 /** Finds subclasses of @NotExtensible interfaces. */
+@AutoService(BugChecker.class)
 @BugPattern(
     name = "MockitoNotExtensible",
     summary = "Some types that are a part of Mockito public API are not intended to be extended.",

File: subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoNotExtensible.java
Patch:
@@ -6,6 +6,7 @@
 
 import static com.google.errorprone.matchers.Description.NO_MATCH;
 
+import com.google.auto.service.AutoService;
 import com.google.errorprone.BugPattern;
 import com.google.errorprone.BugPattern.SeverityLevel;
 import com.google.errorprone.VisitorState;
@@ -16,6 +17,7 @@
 import com.sun.source.tree.ClassTree;
 
 /** Finds subclasses of @NotExtensible interfaces. */
+@AutoService(BugChecker.class)
 @BugPattern(
     name = "MockitoNotExtensible",
     summary = "Some types that are a part of Mockito public API are not intended to be extended.",

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -28,7 +28,7 @@ public Object answer(final InvocationOnMock invocation) throws Throwable {
                 @Override
                 public Object apply(Class<?> type) {
                     if (type == null) {
-                        type = invocation.getMethod().getReturnType();
+                        return null;
                     }
 
                     return Mockito

File: src/test/java/org/mockitousage/bugs/GenericsMockitoAnnotationsTest.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockitousage.bugs;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mock;
 
@@ -22,6 +23,7 @@ public class GenericsMockitoAnnotationsTest {
     @Mock
     private TestCollectionSourceProvider testCollectionSourceProvider;
 
+    @Ignore
     @Test
     public void should_not_throw_class_cast_exception() {
         given(testCollectionSourceProvider.getCollection(new ArrayList<Integer>())).willReturn(new ArrayList<Integer>());

File: src/test/java/org/mockito/internal/runners/DefaultInternalRunnerTest.java
Patch:
@@ -45,10 +45,10 @@ public void does_not_fail_second_test_when_first_test_fail() throws Exception {
             .run(newNotifier(runListener));
 
         verify(runListener, times(1)).testFailure(any(Failure.class));
-        verify(runListener, never()).testFinished(any(Description.class));
-        verify(mockitoTestListener, never()).testFinished(any(TestFinishedEvent.class));
+        verify(runListener, times(1)).testFinished(any(Description.class));
+        verify(mockitoTestListener, only()).testFinished(any(TestFinishedEvent.class));
 
-        reset(runListener);
+        reset(runListener, mockitoTestListener);
 
         new DefaultInternalRunner(SuccessTest.class, supplier)
             .run(newNotifier(runListener));

File: src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java
Patch:
@@ -21,7 +21,7 @@ public ArgumentsAreDifferent(String message) {
      * Three-arg constructor for compatibility with ExceptionFactory's three-arg
      * create method. This implementation simply ignores the second and third
      * arguments.
-     * 
+     *
      * @param message
      * @param wanted ignored
      * @param actual ignored

File: src/test/java/org/mockito/StaticMockingExperimentTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationFactory;
 import org.mockito.invocation.MockHandler;

File: src/test/java/org/mockito/internal/verification/VerificationOverTimeImplTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.rules.ExpectedException;
 import org.mockito.Mock;
 import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockito.verification.VerificationMode;
 
 import static org.hamcrest.CoreMatchers.is;

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.rules.ExpectedException;
 import org.mockito.Mock;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.Invocation;

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.Mock;
 import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.InOrderContextImpl;

File: src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java
Patch:
@@ -33,10 +33,10 @@ public void pure_mockito_should_not_depend_JUnit___ByteBuddy() throws Exception
                         Objenesis.class
                 )
                 .withCodeSourceUrlOf(coverageTool())
-                .without("junit", "org.junit")
+                .without("junit", "org.junit", "org.opentest4j")
                 .build();
 
-        Set<String> pureMockitoAPIClasses = ClassLoaders.in(classLoader_without_JUnit).omit("runners", "junit", "JUnit").listOwnedClasses();
+        Set<String> pureMockitoAPIClasses = ClassLoaders.in(classLoader_without_JUnit).omit("runners", "junit", "JUnit", "opentest4j").listOwnedClasses();
 
         // The later class is required to be initialized before any inline mock maker classes can be loaded.
         checkDependency(classLoader_without_JUnit, "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker");

File: src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitoutil.TestBase;
 
 import java.util.ArrayList;

File: src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitoutil.TestBase;
 
 import static org.mockito.Matchers.refEq;

File: src/test/java/org/mockitousage/matchers/VarargsTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 import org.mockitousage.IMethods;

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -96,7 +96,7 @@ public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {
         try {
             inOrder.verify(one).simpleMethod(999);
             fail();
-        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {
+        } catch (org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent e) {
             assertThat(e).hasMessageContaining("has different arguments");
         }
     }

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.exceptions.verification.NeverWantedButInvoked;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.assertj.core.api.Assertions;
 import org.junit.Test;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.Matchers;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
+import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -44,6 +44,7 @@
  * Firstly, to make it easy to add another mock setting when the demand comes.
  * Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.
  */
+@NotExtensible
 public interface MockSettings extends Serializable {
 
     /**

File: src/main/java/org/mockito/MockitoFramework.java
Patch:
@@ -20,6 +20,7 @@
  * @since 2.1.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoFramework {
 
     /**

File: src/main/java/org/mockito/MockitoSession.java
Patch:
@@ -88,6 +88,7 @@
  * @since 2.7.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoSession {
 
     /**

File: src/main/java/org/mockito/session/MockitoSessionBuilder.java
Patch:
@@ -7,6 +7,7 @@
 import org.mockito.Incubating;
 import org.mockito.MockitoAnnotations;
 import org.mockito.MockitoSession;
+import org.mockito.NotExtensible;
 import org.mockito.exceptions.misusing.UnfinishedMockingSessionException;
 import org.mockito.quality.Strictness;
 
@@ -17,6 +18,7 @@
  * @since 2.7.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoSessionBuilder {
 
     /**

File: src/main/java/org/mockito/session/MockitoSessionLogger.java
Patch:
@@ -6,6 +6,7 @@
 
 import org.mockito.Incubating;
 import org.mockito.MockitoSession;
+import org.mockito.NotExtensible;
 
 /**
  * Logger for {@linkplain org.mockito.quality.MockitoHint hints} emitted when
@@ -17,6 +18,7 @@
  * @since 2.15.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoSessionLogger {
 
     /**

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java
Patch:
@@ -115,11 +115,11 @@ private static Class<?> findTypeFromGenericInArguments(final InvocationOnMock in
             Type argType = parameterTypes[i];
             if (returnType.equals(argType)) {
                 Object argument = invocation.getArgument(i);
-                
+
                 if (argument == null) {
                     return null;
                 }
-                
+
                 return argument.getClass();
             }
             if (argType instanceof GenericArrayType) {

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -44,6 +44,7 @@
  * Firstly, to make it easy to add another mock setting when the demand comes.
  * Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.
  */
+@NotExtensible
 public interface MockSettings extends Serializable {
 
     /**

File: src/main/java/org/mockito/MockitoFramework.java
Patch:
@@ -20,6 +20,7 @@
  * @since 2.1.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoFramework {
 
     /**

File: src/main/java/org/mockito/MockitoSession.java
Patch:
@@ -88,6 +88,7 @@
  * @since 2.7.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoSession {
 
     /**

File: src/main/java/org/mockito/session/MockitoSessionBuilder.java
Patch:
@@ -7,6 +7,7 @@
 import org.mockito.Incubating;
 import org.mockito.MockitoAnnotations;
 import org.mockito.MockitoSession;
+import org.mockito.NotExtensible;
 import org.mockito.exceptions.misusing.UnfinishedMockingSessionException;
 import org.mockito.quality.Strictness;
 
@@ -17,6 +18,7 @@
  * @since 2.7.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoSessionBuilder {
 
     /**

File: src/main/java/org/mockito/session/MockitoSessionLogger.java
Patch:
@@ -6,6 +6,7 @@
 
 import org.mockito.Incubating;
 import org.mockito.MockitoSession;
+import org.mockito.NotExtensible;
 
 /**
  * Logger for {@linkplain org.mockito.quality.MockitoHint hints} emitted when
@@ -17,6 +18,7 @@
  * @since 2.15.0
  */
 @Incubating
+@NotExtensible
 public interface MockitoSessionLogger {
 
     /**

File: src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java
Patch:
@@ -62,8 +62,8 @@ public void should_discard_generics_metadata_when_serialized_then_disabling_deep
             // then revert to the default RETURNS_DEEP_STUBS and the code will raise a ClassCastException
             when(deserialized_deep_stub.iterator().next().get(42)).thenReturn("no");
             fail("Expected an exception to be thrown as deep stubs and serialization does not play well together");
-        } catch (ClassCastException e) {
-            assertThat(e).hasMessageContaining("java.util.List");
+        } catch (NullPointerException e) {
+            assertThat(e).hasMessage(null);
         }
     }
 

File: src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java
Patch:
@@ -75,7 +75,7 @@ private void append(String message) {
         this.numberOfFailures++;
         this.builder.append('\n')
                 .append(this.numberOfFailures).append(". ")
-                .append(message.substring(1, message.length()));
+                .append(message.trim()).append('\n');
     }
 
     private class VerificationWrapper implements VerificationMode {
@@ -89,7 +89,7 @@ private VerificationWrapper(VerificationMode delegate) {
         public void verify(VerificationData data) {
             try {
                 this.delegate.verify(data);
-            } catch (MockitoAssertionError error) {
+            } catch (AssertionError error) {
                 VerificationCollectorImpl.this.append(error.getMessage());
             }
         }

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -684,8 +684,8 @@ public static MockitoException methodDoesNotAcceptParameter(String method, Strin
         return new MockitoException(method + "() does not accept " + parameter + " See the Javadoc.");
     }
 
-    public static MockitoException invocationListenersRequiresAtLeastOneListener() {
-        return new MockitoException("invocationListeners() requires at least one listener");
+    public static MockitoException requiresAtLeastOneListener(String method) {
+        return new MockitoException(method + "() requires at least one listener");
     }
 
     public static MockitoException invocationListenerThrewException(InvocationListener listener, Throwable listenerThrowable) {

File: src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java
Patch:
@@ -5,8 +5,8 @@
 package org.mockito.internal.junit;
 
 import org.mockito.internal.exceptions.Reporter;
-import org.mockito.internal.listeners.StubbingLookupEvent;
-import org.mockito.internal.listeners.StubbingLookupListener;
+import org.mockito.listeners.StubbingLookupEvent;
+import org.mockito.listeners.StubbingLookupListener;
 import org.mockito.internal.stubbing.UnusedStubbingReporting;
 import org.mockito.invocation.Invocation;
 import org.mockito.quality.Strictness;

File: src/main/java/org/mockito/internal/junit/StrictStubsRunnerTestListener.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.junit;
 
-import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.quality.Strictness;
 
@@ -23,7 +22,6 @@ public void onMockCreated(Object mock, MockCreationSettings settings) {
         //It is not ideal that we modify the state of MockCreationSettings object
         //MockCreationSettings is intended to be an immutable view of the creation settings
         //In future, we should start passing MockSettings object to the creation listener
-        //TODO #793 - when completed, we should be able to get rid of the CreationSettings casting below
-        ((CreationSettings) settings).getStubbingLookupListeners().add(stubbingLookupListener);
+        settings.getStubbingLookupListeners().add(stubbingLookupListener);
     }
 }

File: src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java
Patch:
@@ -6,6 +6,8 @@
 
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.invocation.Invocation;
+import org.mockito.listeners.StubbingLookupEvent;
+import org.mockito.listeners.StubbingLookupListener;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Stubbing;
 

File: src/main/java/org/mockito/listeners/StubbingLookupEvent.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.listeners;
+package org.mockito.listeners;
 
 import org.mockito.invocation.Invocation;
 import org.mockito.mock.MockCreationSettings;

File: src/test/java/org/mockito/internal/listeners/StubbingLookupNotifierTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.invocation.Invocation;
+import org.mockito.listeners.StubbingLookupListener;
 import org.mockito.stubbing.Stubbing;
 import org.mockitoutil.TestBase;
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -58,9 +58,9 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         // a mock that would potentially match the return signature, instead return `null`. This
         // is valid per the CheckCast JVM instruction and is better than causing a ClassCastException
         // on runtime.
-        if (rawType.equals(Object.class)) {
-            return null;
-        }
+//        if (rawType.equals(Object.class)) {
+//            return null;
+//        }
 
         return deepStub(invocation, returnTypeGenericMetadata);
     }

File: src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java
Patch:
@@ -45,7 +45,7 @@ public void should_serialize_and_deserialize_parameterized_class_mocked_with_dee
         assertThat(deserialized_deep_stub.iterator().next().add("yes")).isEqualTo(true);
     }
 
-    @Test(expected = ClassCastException.class)
+    @Test(expected = NullPointerException.class)
     public void should_discard_generics_metadata_when_serialized_then_disabling_deep_stubs_with_generics() throws Exception {
         // given
         ListContainer deep_stubbed = mock(ListContainer.class, withSettings().defaultAnswer(RETURNS_DEEP_STUBS).serializable());

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -98,7 +98,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         if (localMock || loader instanceof MultipleParentClassLoader && !isComingFromJDK(features.mockedType)) {
             typeName = features.mockedType.getName();
         } else {
-            typeName = InjectionBase.class.getPackage().getName() + features.mockedType.getSimpleName();
+            typeName = InjectionBase.class.getPackage().getName() + "." + features.mockedType.getSimpleName();
         }
         String name = String.format("%s$%s$%d", typeName, "MockitoMock", Math.abs(random.nextInt()));
 

File: src/test/java/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java
Patch:
@@ -33,7 +33,7 @@ public void check_that_mock_can_be_serialized_in_a_classloader_and_deserialized_
         byte[] bytes = create_mock_and_serialize_it_in_class_loader_A();
 
         Object the_deserialized_mock = read_stream_and_deserialize_it_in_class_loader_B(bytes);
-        assertThat(the_deserialized_mock.getClass().getName()).startsWith("org.mockito.codegenAClassToBeMockedInThisTestOnlyAndInCallablesOnly");
+        assertThat(the_deserialized_mock.getClass().getName()).startsWith("org.mockito.codegen.AClassToBeMockedInThisTestOnlyAndInCallablesOnly");
     }
 
     private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -83,7 +83,7 @@ public static MockitoException unfinishedStubbing(Location location) {
                 "Hints:",
                 " 1. missing thenReturn()",
                 " 2. you are trying to stub a final method, which is not supported",
-                " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
+                " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction is completed",
                 ""
         ));
     }

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -26,6 +26,7 @@
 import net.bytebuddy.utility.OpenedClassReader;
 import net.bytebuddy.utility.RandomString;
 import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher;
 import org.mockito.internal.util.concurrent.WeakConcurrentMap;
 import org.mockito.internal.util.concurrent.WeakConcurrentSet;
 import org.mockito.mock.SerializableMode;
@@ -196,7 +197,7 @@ private void assureCanReadMockito(Set<Class<?>> types) {
         }
         Set<Object> modules = new HashSet<Object>();
         try {
-            Object target = getModule.invoke(Class.forName("org.mockito.internal.creation.bytebuddy.MockMethodDispatcher", false, null));
+            Object target = getModule.invoke(Class.forName("org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher", false, null));
             for (Class<?> type : types) {
                 Object module = getModule.invoke(type);
                 if (!modules.contains(module) && !(Boolean) canRead.invoke(module, target)) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -12,6 +12,7 @@
 import net.bytebuddy.implementation.bind.annotation.This;
 import net.bytebuddy.implementation.bytecode.assign.Assigner;
 import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.bytebuddy.inject.MockMethodDispatcher;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.internal.invocation.RealMethod;
@@ -35,7 +36,7 @@
 
 public class MockMethodAdvice extends MockMethodDispatcher {
 
-    final WeakConcurrentMap<Object, MockMethodInterceptor> interceptors;
+    private final WeakConcurrentMap<Object, MockMethodInterceptor> interceptors;
 
     private final String identifier;
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java
Patch:
@@ -11,7 +11,6 @@
 import net.bytebuddy.implementation.Implementation;
 import net.bytebuddy.implementation.MethodCall;
 import net.bytebuddy.implementation.StubMethod;
-import org.mockito.Mockito;
 import org.mockito.codegen.InjectionBase;
 import org.mockito.exceptions.base.MockitoException;
 
@@ -105,7 +104,7 @@ boolean isExported(Class<?> source, Class<?> target) {
         @Override
         Class<?> injectionBase(ClassLoader classLoader, String typeName) {
             String packageName = typeName.substring(0, typeName.lastIndexOf('.'));
-            if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {
+            if (classLoader == InjectionBase.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {
                 return InjectionBase.class;
             } else {
                 synchronized (this) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -15,7 +15,6 @@
 import net.bytebuddy.implementation.Implementation;
 import net.bytebuddy.implementation.attribute.MethodAttributeAppender;
 import net.bytebuddy.matcher.ElementMatcher;
-import org.mockito.Mockito;
 import org.mockito.codegen.InjectionBase;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.creation.bytebuddy.ByteBuddyCrossClassLoaderSerializationSupport.CrossClassLoaderSerializableMock;
@@ -92,7 +91,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         boolean localMock = classLoader == features.mockedType.getClassLoader()
             && features.serializableMode != SerializableMode.ACROSS_CLASSLOADERS
             && !isComingFromJDK(features.mockedType)
-            && (loader.isDisrespectingOpenness() || handler.isOpened(features.mockedType, Mockito.class));
+            && (loader.isDisrespectingOpenness() || handler.isOpened(features.mockedType, MockAccess.class));
         String typeName;
         if (localMock || loader instanceof MultipleParentClassLoader && !isComingFromJDK(features.mockedType)) {
             typeName = features.mockedType.getName();
@@ -102,7 +101,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         String name = String.format("%s$%s$%d", typeName, "MockitoMock", Math.abs(random.nextInt()));
 
         if (localMock) {
-            handler.adjustModuleGraph(features.mockedType, Mockito.class, false, true);
+            handler.adjustModuleGraph(features.mockedType, MockAccess.class, false, true);
             for (Class<?> iFace : features.interfaces) {
                 handler.adjustModuleGraph(iFace, features.mockedType, true, false);
                 handler.adjustModuleGraph(features.mockedType, iFace, false, true);

File: src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2016 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.creation.bytebuddy;
+package org.mockito.internal.creation.bytebuddy.inject;
 
 import java.lang.reflect.Method;
 import java.util.concurrent.Callable;

File: src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java
Patch:
@@ -297,7 +297,9 @@ private static <T> MockCreationSettings<T> settingsFor(Class<T> type, Class<?>..
 
     @Test
     public void testMockDispatcherIsRelocated() throws Exception {
-        assertThat(InlineByteBuddyMockMaker.class.getClassLoader().getResource("org/mockito/internal/creation/bytebuddy/MockMethodDispatcher.raw")).isNotNull();
+        assertThat(InlineByteBuddyMockMaker.class.getClassLoader()
+            .getResource("org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.raw"))
+            .isNotNull();
     }
 
     private static final class FinalClass {

File: src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java
Patch:
@@ -11,7 +11,6 @@
 import net.bytebuddy.implementation.Implementation;
 import net.bytebuddy.implementation.MethodCall;
 import net.bytebuddy.implementation.StubMethod;
-import org.mockito.Mockito;
 import org.mockito.codegen.InjectionBase;
 import org.mockito.exceptions.base.MockitoException;
 
@@ -105,7 +104,7 @@ boolean isExported(Class<?> source, Class<?> target) {
         @Override
         Class<?> injectionBase(ClassLoader classLoader, String typeName) {
             String packageName = typeName.substring(0, typeName.lastIndexOf('.'));
-            if (classLoader == Mockito.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {
+            if (classLoader == InjectionBase.class.getClassLoader() && InjectionBase.class.getPackage().getName().equals(packageName)) {
                 return InjectionBase.class;
             } else {
                 synchronized (this) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -15,7 +15,6 @@
 import net.bytebuddy.implementation.Implementation;
 import net.bytebuddy.implementation.attribute.MethodAttributeAppender;
 import net.bytebuddy.matcher.ElementMatcher;
-import org.mockito.Mockito;
 import org.mockito.codegen.InjectionBase;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.creation.bytebuddy.ByteBuddyCrossClassLoaderSerializationSupport.CrossClassLoaderSerializableMock;
@@ -92,7 +91,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         boolean localMock = classLoader == features.mockedType.getClassLoader()
             && features.serializableMode != SerializableMode.ACROSS_CLASSLOADERS
             && !isComingFromJDK(features.mockedType)
-            && (loader.isDisrespectingOpenness() || handler.isOpened(features.mockedType, Mockito.class));
+            && (loader.isDisrespectingOpenness() || handler.isOpened(features.mockedType, MockAccess.class));
         String typeName;
         if (localMock || loader instanceof MultipleParentClassLoader && !isComingFromJDK(features.mockedType)) {
             typeName = features.mockedType.getName();
@@ -102,7 +101,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         String name = String.format("%s$%s$%d", typeName, "MockitoMock", Math.abs(random.nextInt()));
 
         if (localMock) {
-            handler.adjustModuleGraph(features.mockedType, Mockito.class, false, true);
+            handler.adjustModuleGraph(features.mockedType, MockAccess.class, false, true);
             for (Class<?> iFace : features.interfaces) {
                 handler.adjustModuleGraph(iFace, features.mockedType, true, false);
                 handler.adjustModuleGraph(features.mockedType, iFace, false, true);

File: src/test/java/org/mockito/internal/runners/DefaultInternalRunnerTest.java
Patch:
@@ -67,7 +67,7 @@ private RunNotifier newNotifier(RunListener listener) {
     public static final class SuccessTest {
 
         @Test
-        public void test() {
+        public void this_test_is_NOT_supposed_to_fail() {
             assertTrue(true);
         }
     }
@@ -78,7 +78,7 @@ public static final class TestFailOnInitialization {
         private System system;
 
         @Test
-        public void test() {
+        public void this_test_is_supposed_to_fail() {
             assertNotNull(system);
         }
     }

File: src/test/java/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java
Patch:
@@ -93,7 +93,6 @@ public void should_scream_when_the_same_interfaces_passed() {
         }
     }
 
-
     @Test
     public void should_mock_class_with_interfaces_of_different_class_loader_AND_different_classpaths() throws ClassNotFoundException {
         // Note : if classes are in the same classpath, SearchingClassLoader can find the class/classes and load them in the first matching classloader

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -286,7 +286,7 @@ public void any_T_matcher() {
         when(mock.oneArg(anyLong())).thenReturn("6");
         when(mock.oneArg(anyShort())).thenReturn("7");
         when(mock.oneArg((String) anyObject())).thenReturn("8");
-        when(mock.oneArg(anyObject())).thenReturn("9");
+        when(mock.oneArg(Mockito.<Object>anyObject())).thenReturn("9");
         when(mock.oneArg(any(RandomAccess.class))).thenReturn("10");
 
         assertEquals("0", mock.oneArg(true));
@@ -594,14 +594,14 @@ public void same_matcher() {
     public void eq_matcher_and_nulls() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(eq(null));
+        verify(mock).simpleMethod(Mockito.<Object>eq(null));
     }
 
     @Test
     public void same_matcher_and_nulls() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(same(null));
+        verify(mock).simpleMethod(Mockito.<Object>same(null));
     }
 
     @Test

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.assertj.core.api.ThrowableAssert;
 import org.junit.Test;
 import org.mockito.Mock;
+import org.mockito.Mockito;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -34,8 +35,8 @@ public void should_help_out_with_unnecessary_casting() {
     public void any_should_be_actual_alias_to_anyObject() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(any());
-        verify(mock).simpleMethod(anyObject());
+        verify(mock).simpleMethod(Mockito.<Object>any());
+        verify(mock).simpleMethod(Mockito.<Object>anyObject());
     }
 
     @Test

File: src/test/java/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.serialization;
 
 import org.junit.Before;
@@ -18,6 +17,7 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AcrossClassLoaderSerializationTest {
 
@@ -33,6 +33,7 @@ public void check_that_mock_can_be_serialized_in_a_classloader_and_deserialized_
         byte[] bytes = create_mock_and_serialize_it_in_class_loader_A();
 
         Object the_deserialized_mock = read_stream_and_deserialize_it_in_class_loader_B(bytes);
+        assertThat(the_deserialized_mock.getClass().getName()).startsWith("org.mockito.codegenAClassToBeMockedInThisTestOnlyAndInCallablesOnly");
     }
 
     private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {

File: src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Random;
 
 import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;
-import static net.bytebuddy.matcher.ElementMatchers.ofSort;
 import static org.mockito.internal.util.StringUtil.join;
 
 abstract class ModuleHandler {
@@ -50,9 +49,7 @@ static ModuleHandler make(ByteBuddy byteBuddy, SubclassLoader loader, Random ran
     private static class ModuleSystemFound extends ModuleHandler {
 
         private final ByteBuddy byteBuddy;
-
         private final SubclassLoader loader;
-
         private final Random random;
 
         private final int injectonBaseSuffix;

File: src/test/java/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java
Patch:
@@ -93,7 +93,6 @@ public void should_scream_when_the_same_interfaces_passed() {
         }
     }
 
-
     @Test
     public void should_mock_class_with_interfaces_of_different_class_loader_AND_different_classpaths() throws ClassNotFoundException {
         // Note : if classes are in the same classpath, SearchingClassLoader can find the class/classes and load them in the first matching classloader

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -286,7 +286,7 @@ public void any_T_matcher() {
         when(mock.oneArg(anyLong())).thenReturn("6");
         when(mock.oneArg(anyShort())).thenReturn("7");
         when(mock.oneArg((String) anyObject())).thenReturn("8");
-        when(mock.oneArg(anyObject())).thenReturn("9");
+        when(mock.oneArg(Mockito.<Object>anyObject())).thenReturn("9");
         when(mock.oneArg(any(RandomAccess.class))).thenReturn("10");
 
         assertEquals("0", mock.oneArg(true));
@@ -594,14 +594,14 @@ public void same_matcher() {
     public void eq_matcher_and_nulls() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(eq(null));
+        verify(mock).simpleMethod(Mockito.<Object>eq(null));
     }
 
     @Test
     public void same_matcher_and_nulls() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(same(null));
+        verify(mock).simpleMethod(Mockito.<Object>same(null));
     }
 
     @Test

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.assertj.core.api.ThrowableAssert;
 import org.junit.Test;
 import org.mockito.Mock;
+import org.mockito.Mockito;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -34,8 +35,8 @@ public void should_help_out_with_unnecessary_casting() {
     public void any_should_be_actual_alias_to_anyObject() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(any());
-        verify(mock).simpleMethod(anyObject());
+        verify(mock).simpleMethod(Mockito.<Object>any());
+        verify(mock).simpleMethod(Mockito.<Object>anyObject());
     }
 
     @Test

File: src/test/java/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java
Patch:
@@ -2,7 +2,6 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-
 package org.mockitousage.serialization;
 
 import org.junit.Before;
@@ -18,6 +17,7 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class AcrossClassLoaderSerializationTest {
 
@@ -33,6 +33,7 @@ public void check_that_mock_can_be_serialized_in_a_classloader_and_deserialized_
         byte[] bytes = create_mock_and_serialize_it_in_class_loader_A();
 
         Object the_deserialized_mock = read_stream_and_deserialize_it_in_class_loader_B(bytes);
+        assertThat(the_deserialized_mock.getClass().getName()).startsWith("org.mockito.codegenAClassToBeMockedInThisTestOnlyAndInCallablesOnly");
     }
 
     private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) throws Exception {

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -208,7 +208,7 @@ private void assureCanReadMockito(Set<Class<?>> types) {
                 }
             }
             for (Object module : modules) {
-                REDEFINE_MODULE.invoke(module, Collections.singleton(target),
+                REDEFINE_MODULE.invoke(instrumentation, module, Collections.singleton(target),
                     Collections.emptyMap(), Collections.emptyMap(), Collections.emptySet(), Collections.emptyMap());
             }
         } catch (Exception e) {

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -142,7 +142,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
         } else {
             loadModuleProble(features.mockedType, Mockito.class, true, !loader.isDisrespectingOpenness(), false);
             for (Class<?> iFace : features.interfaces) {
-                loadModuleProble(iFace, features.mockedType, true, false, false);
+                loadModuleProble(iFace, features.mockedType, false, false, true);
             }
         }
         DynamicType.Builder<T> builder =

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java
Patch:
@@ -11,8 +11,6 @@
  */
 public interface SubclassLoader {
 
-    boolean isUsingLookup();
-
     /**
      * Resolves a class loading strategy.
      *

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java
Patch:
@@ -11,6 +11,8 @@
  */
 public interface SubclassLoader {
 
+    boolean isUsingLookup();
+
     /**
      * Resolves a class loading strategy.
      *

File: src/main/java/org/mockito/internal/junit/ExceptionFactory.java
Patch:
@@ -31,7 +31,7 @@ private static AssertionError createJUnitArgumentsAreDifferent(String message, S
     private static boolean canLoadJunitClass() {
         try {
             JUnitArgsAreDifferent.create("message", "wanted", "actual");
-        } catch (NoClassDefFoundError onlyIfJUnitIsNotAvailable) {
+        } catch (Throwable onlyIfJUnitIsNotAvailable) {
             return false;
         }
         return true;

File: src/main/java/org/mockito/internal/junit/ExceptionFactory.java
Patch:
@@ -33,6 +33,8 @@ private static boolean canLoadJunitClass() {
             JUnitArgsAreDifferent.create("message", "wanted", "actual");
         } catch (NoClassDefFoundError onlyIfJUnitIsNotAvailable) {
             return false;
+        } catch (VerifyError onlyIfJUnitIsIncompatible) {
+            return false;
         }
         return true;
     }

File: src/main/java/org/mockito/ArgumentCaptor.java
Patch:
@@ -49,7 +49,7 @@
  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.
  *
  * <p>
- * This utility class <strong>*don't do any type checks*</strong>, the generic signatures are only there to avoid casting
+ * This utility class <strong>*doesn't do any type checks*</strong>. The generic signatures are only there to avoid casting
  * in your code.
  * <p>
  * There is an <strong>annotation</strong> that you might find useful: &#64;{@link Captor}
@@ -136,7 +136,7 @@ public List<T> getAllValues() {
     /**
      * Build a new <code>ArgumentCaptor</code>.
      * <p>
-     * Note that an <code>ArgumentCaptor</code> <b>*don't do any type checks*</b>, it is only there to avoid casting
+     * Note that an <code>ArgumentCaptor</code> <b>*doesn't do any type checks*</b>. It is only there to avoid casting
      * in your code. This might however change (type checks could be added) in a
      * future major release.
      *

File: src/main/java/org/mockito/internal/creation/settings/CreationSettings.java
Patch:
@@ -57,6 +57,7 @@ public CreationSettings(CreationSettings copy) {
         this.outerClassInstance = copy.getOuterClassInstance();
         this.constructorArgs = copy.getConstructorArgs();
         this.lenient = copy.lenient;
+        this.stripAnnotations = copy.stripAnnotations;
     }
 
     @Override

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -673,7 +673,7 @@ public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
     }
 
     public static MockitoException fieldInitialisationThrewException(Field field, Throwable details) {
-        return new MockitoException(join(
+        return new InjectMocksException(join(
                 "Cannot instantiate @InjectMocks field named '" + field.getName() + "' of type '" + field.getType() + "'.",
                 "You haven't provided the instance at field declaration so I tried to construct the instance.",
                 "However the constructor or the initialization block threw an exception : " + details.getMessage(),

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -673,7 +673,7 @@ public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
     }
 
     public static MockitoException fieldInitialisationThrewException(Field field, Throwable details) {
-        return new MockitoException(join(
+        return new InjectMocksException(join(
                 "Cannot instantiate @InjectMocks field named '" + field.getName() + "' of type '" + field.getType() + "'.",
                 "You haven't provided the instance at field declaration so I tried to construct the instance.",
                 "However the constructor or the initialization block threw an exception : " + details.getMessage(),

File: src/main/java/org/mockito/exceptions/verification/MoreThanAllowedActualInvocations.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Thrown when atMost(x) verification fails. See {@link org.mockito.Mockito#atMost(int)}.
  *
- * @since TODO
+ * @since 2.20.5
  */
 public class MoreThanAllowedActualInvocations extends MockitoAssertionError {
 

File: src/test/java/org/mockitoutil/async/AsyncTesting.java
Patch:
@@ -14,7 +14,7 @@
 public class AsyncTesting {
 
     //Sanity limit of threas. Increase it if justified.
-    private final static int MAX_THREADS = 2;
+    private final static int MAX_THREADS = 3;
 
     private final LinkedList<Exception> problems = new LinkedList<Exception>();
     private final LinkedList<Thread> threads = new LinkedList<Thread>();

File: src/main/java/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -21,6 +21,7 @@
 import org.mockito.stubbing.Stubbing;
 import org.mockito.verification.VerificationMode;
 
+import java.util.Collection;
 import java.util.List;
 
 import static org.mockito.internal.exceptions.Reporter.stubPassedToVerify;
@@ -135,7 +136,7 @@ private void notifyStubbedAnswerLookup(Invocation invocation, Stubbing stubbingF
         //TODO #793 - when completed, we should be able to get rid of the casting below
         List<StubbingLookupListener> listeners = ((CreationSettings) this.mockSettings).getStubbingLookupListeners();
         for (StubbingLookupListener listener : listeners) {
-            List<Stubbing> stubbings = this.invocationContainer.getStubbedInvocations();
+            Collection<Stubbing> stubbings = this.invocationContainer.getStubbingsAscending();
             listener.onStubbingLookup(invocation, stubbingFound, stubbings, this.mockSettings);
         }
     }

File: src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java
Patch:
@@ -31,7 +31,7 @@ class DefaultStubbingLookupListener implements StubbingLookupListener {
         this.currentStrictness = strictness;
     }
 
-    public void onStubbingLookup(Invocation invocation, Stubbing stubbingFound, List<Stubbing> allStubbings, MockCreationSettings mockSettings) {
+    public void onStubbingLookup(Invocation invocation, Stubbing stubbingFound, Collection<Stubbing> allStubbings, MockCreationSettings mockSettings) {
         Strictness actualStrictness = determineStrictness(stubbingFound, mockSettings, currentStrictness);
 
         if (actualStrictness != Strictness.STRICT_STUBS) {

File: src/main/java/org/mockito/internal/listeners/StubbingLookupListener.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Stubbing;
 
-import java.util.List;
+import java.util.Collection;
 
 /**
  * Listens to attempts to look up stubbing answer for given mocks. This class is internal for now.
@@ -37,6 +37,6 @@ public interface StubbingLookupListener {
      * @param allStubbings - all stubbings declared on the mock object that we are invoking.
      * @param mockSettings - settings of the mock object that we are invoking
      */
-    void onStubbingLookup(Invocation invocation, Stubbing stubbingFound, List<Stubbing> allStubbings, MockCreationSettings mockSettings);
+    void onStubbingLookup(Invocation invocation, Stubbing stubbingFound, Collection<Stubbing> allStubbings, MockCreationSettings mockSettings);
 
 }

File: src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java
Patch:
@@ -7,13 +7,14 @@
 import org.mockito.quality.Strictness;
 import org.mockito.stubbing.Answer;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
 /**
  * Holds answers declared using 'doAnswer' stubbing style.
  */
-class DoAnswerStyleStubbing {
+class DoAnswerStyleStubbing implements Serializable {
 
     private final List<Answer<?>> answers = new ArrayList<Answer<?>>();
     private Strictness strictness;
@@ -23,7 +24,7 @@ void setAnswers(List<Answer<?>> answers, Strictness strictness) {
         this.answers.addAll(answers);
     }
 
-    boolean isEmpty() {
+    boolean isSet() {
         return answers.isEmpty();
     }
 

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -102,7 +102,7 @@ public void setAnswersForStubbing(List<Answer<?>> answers, Strictness strictness
     }
 
     public boolean hasAnswersForStubbing() {
-        return !doAnswerStyleStubbing.isEmpty();
+        return !doAnswerStyleStubbing.isSet();
     }
 
     public boolean hasInvocationForPotentialStubbing() {

File: src/main/java/org/mockito/internal/stubbing/DefaultLenientStubber.java
Patch:
@@ -32,7 +32,7 @@ public Stubber doThrow(Class<? extends Throwable> toBeThrown, Class<? extends Th
 
     @Override
     public Stubber doAnswer(Answer answer) {
-        return null;
+        return stubber().doAnswer(answer);
     }
 
     @Override

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -23,6 +23,7 @@
 import net.bytebuddy.jar.asm.Opcodes;
 import net.bytebuddy.matcher.ElementMatchers;
 import net.bytebuddy.pool.TypePool;
+import net.bytebuddy.utility.OpenedClassReader;
 import net.bytebuddy.utility.RandomString;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.concurrent.WeakConcurrentMap;
@@ -247,7 +248,7 @@ private static class ParameterAddingClassVisitor extends ClassVisitor {
             private final TypeDescription typeDescription;
 
             private ParameterAddingClassVisitor(ClassVisitor cv, TypeDescription typeDescription) {
-                super(Opcodes.ASM6, cv);
+                super(OpenedClassReader.ASM_API, cv);
                 this.typeDescription = typeDescription;
             }
 

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1510,8 +1510,8 @@
  *
  * <h3 id="45">45. (**new**) <a class="meaningful_link" href="#junit5_mockito" name="junit5_mockito">New JUnit Jupiter (JUnit5+) extension</a></h3>
  *
- * For integration with JUnit Jupiter (JUnit5+), use the `org.mockito.junit-jupiter` artifact.
- * For more information about the usage of the integration, see the JavaDoc of <code>MockitoExtension</code>.
+ * For integration with JUnit Jupiter (JUnit5+), use the `org.mockito:mockito-junit-jupiter` artifact.
+ * For more information about the usage of the integration, see <a href="http://javadoc.io/page/org.mockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/MockitoExtension.html">the JavaDoc of <code>MockitoExtension</code></a>.
  */
 @SuppressWarnings("unchecked")
 public class Mockito extends ArgumentMatchers {

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -15,6 +15,7 @@
 import net.bytebuddy.description.method.ParameterDescription;
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.dynamic.ClassFileLocator;
+import net.bytebuddy.dynamic.scaffold.MethodGraph;
 import net.bytebuddy.dynamic.scaffold.TypeValidation;
 import net.bytebuddy.implementation.Implementation;
 import net.bytebuddy.jar.asm.ClassVisitor;
@@ -74,7 +75,8 @@ public InlineBytecodeGenerator(Instrumentation instrumentation, WeakConcurrentMa
         this.instrumentation = instrumentation;
         byteBuddy = new ByteBuddy()
                 .with(TypeValidation.DISABLED)
-                .with(Implementation.Context.Disabled.Factory.INSTANCE);
+                .with(Implementation.Context.Disabled.Factory.INSTANCE)
+                .with(MethodGraph.Compiler.ForDeclaredMethods.INSTANCE);
         mocked = new WeakConcurrentSet<Class<?>>(WeakConcurrentSet.Cleaner.INLINE);
         identifier = RandomString.make();
         advice = new MockMethodAdvice(mocks, identifier);

File: subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java
Patch:
@@ -77,8 +77,8 @@ private MockitoExtension(Strictness strictness) {
     }
 
     /**
-     * Callback for post-processing the supplied test instance.
-     * <p>
+     * <p>Callback for post-processing the supplied test instance.
+     *
      * <p><strong>Note</strong>: the {@code ExtensionContext} supplied to a
      * {@code TestInstancePostProcessor} will always return an empty
      * {@link Optional} value from {@link ExtensionContext#getTestInstance()

File: subprojects/deprecatedPluginsTest/src/test/java/org/mockitousage/plugins/DeprecatedInstantiatorProviderTest.java
Patch:
@@ -24,13 +24,15 @@ public void provides_default_instance_for_deprecated_plugin() {
         assertNotNull(plugin);
     }
 
+    @SuppressWarnings("CheckReturnValue")
     @Test
     public void uses_custom_instantiator_provider() {
         MyDeprecatedInstantiatorProvider.invokedFor.remove();
         mock(DeprecatedInstantiatorProviderTest.class);
         assertEquals(MyDeprecatedInstantiatorProvider.invokedFor.get(), asList(DeprecatedInstantiatorProviderTest.class));
     }
 
+    @SuppressWarnings("CheckReturnValue")
     @Test(expected = InstantiationException.class)
     public void exception_while_instantiating() throws Throwable {
         MyDeprecatedInstantiatorProvider.shouldExcept.set(true);

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/instantiator/InstantiatorProviderTest.java
Patch:
@@ -14,6 +14,7 @@
 
 public class InstantiatorProviderTest {
 
+    @SuppressWarnings("CheckReturnValue")
     @Test
     public void uses_custom_instantiator_provider() {
         //given mocking works:

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitchTest.java
Patch:
@@ -18,6 +18,7 @@
 
 public class PluginSwitchTest {
 
+    @SuppressWarnings("CheckReturnValue")
     @Test
     public void plugin_switcher_is_used() {
         mock(List.class);

File: subprojects/inline/src/test/java/org/mockitoinline/FinalClassMockingTest.java
Patch:
@@ -9,6 +9,7 @@
 
 public class FinalClassMockingTest {
 
+    @SuppressWarnings("CheckReturnValue")
     @Test
     public void no_exception_while_mocking_final_class() throws Exception {
         Mockito.mock(FinalClass.class);

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseIncorrectStubbingSyntax.java
Patch:
@@ -24,6 +24,7 @@
 @Test(description = "Always failing, shouldn't be listed in 'mockito-testng.xml'")
 public class FailingOnPurposeBecauseIncorrectStubbingSyntax {
 
+    @SuppressWarnings("CheckReturnValue")
     @Test(expectedExceptions = InvalidUseOfMatchersException.class)
     public void incorrect_stubbing_syntax_in_test() throws Exception {
         mock(PrintStream.class);

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -140,7 +140,7 @@ private static void assertNoIncompatibleAnnotations(Class<? extends Annotation>
         for (Class<? extends Annotation> u : undesiredAnnotations) {
             if (field.isAnnotationPresent(u)) {
                 throw unsupportedCombinationOfAnnotations(annotation.getSimpleName(),
-                                                          annotation.getClass().getSimpleName());
+                                                          u.getSimpleName());
             }
         }
     }

File: src/main/java/org/mockito/internal/util/Primitives.java
Patch:
@@ -44,7 +44,7 @@ public static boolean isPrimitiveOrWrapper(Class<?> type) {
 
     public static boolean isAssignableFromWrapper(Class<?> valueClass, Class<?> referenceType) {
         if(isPrimitiveOrWrapper(valueClass) && isPrimitiveOrWrapper(referenceType)) {
-            return Primitives.primitiveTypeOf(valueClass).isAssignableFrom(referenceType);
+            return Primitives.primitiveTypeOf(valueClass).isAssignableFrom(Primitives.primitiveTypeOf(referenceType));
         }
         return false;
     }

File: src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java
Patch:
@@ -50,6 +50,7 @@ public WeakConcurrentMap(boolean cleanerThread) {
      * @param key The key of the entry.
      * @return The value of the entry or the default value if it did not exist.
      */
+    @SuppressWarnings("CollectionIncompatibleType")
     public V get(K key) {
         if (key == null) throw new NullPointerException();
         V value = target.get(new LatentKey<K>(key));
@@ -69,6 +70,7 @@ public V get(K key) {
      * @param key The key of the entry.
      * @return {@code true} if the key already defines a value.
      */
+    @SuppressWarnings("CollectionIncompatibleType")
     public boolean containsKey(K key) {
         if (key == null) throw new NullPointerException();
         return target.containsKey(new LatentKey<K>(key));
@@ -88,6 +90,7 @@ public V put(K key, V value) {
      * @param key The key of the entry.
      * @return The removed entry or {@code null} if it does not exist.
      */
+    @SuppressWarnings("CollectionIncompatibleType")
     public V remove(K key) {
         if (key == null) throw new NullPointerException();
         return target.remove(new LatentKey<K>(key));

File: src/test/java/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java
Patch:
@@ -63,7 +63,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)
             @SuppressWarnings("unchecked")
             public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {
                 for (Annotation firstParamAnnotation : firstParamAnnotations) {
-                    if (annotationClass.isAssignableFrom(firstParamAnnotation.getClass())) {
+                    if (annotationClass.isAssignableFrom(firstParamAnnotation.annotationType())) {
                         return (T) firstParamAnnotation;
                     }
                 }

File: src/test/java/org/mockito/MockitoTest.java
Patch:
@@ -25,11 +25,13 @@ public void shouldRemoveStubbableFromProgressAfterStubbing() {
         assertThat(mockingProgress().pullOngoingStubbing()).isNull();
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test(expected=NotAMockException.class)
     public void shouldValidateMockWhenVerifying() {
         Mockito.verify("notMock");
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test(expected=NotAMockException.class)
     public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {
         Mockito.verify("notMock", times(19));

File: src/test/java/org/mockito/StaticMockingExperimentTest.java
Patch:
@@ -54,6 +54,7 @@ public Object call() throws Throwable {
         staticMethod = Foo.class.getDeclaredMethod("staticMethod", String.class);
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test
     public void verify_static_method() throws Throwable {
         //register staticMethod call on mock
@@ -81,6 +82,7 @@ public void verify_static_method() throws Throwable {
         handler.handle(differentArg);
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test
     public void verification_failure_static_method() throws Throwable {
         //register staticMethod call on mock
@@ -178,6 +180,7 @@ public void stubbing_new() throws Throwable {
         assertEquals(null, result2);
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test
     public void verifying_new() throws Throwable {
         Constructor<Foo> ctr = Foo.class.getConstructor(String.class);

File: src/test/java/org/mockito/internal/junit/JUnitRuleTest.java
Patch:
@@ -32,12 +32,14 @@ public void rethrows_exception() throws Throwable {
         throw new RuntimeException("foo");
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test
     public void detects_invalid_mockito_usage_on_success() throws Throwable {
         rule.expectFailure(UnfinishedStubbingException.class);
         when(mock.simpleMethod());
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test
     public void does_not_check_invalid_mockito_usage_on_failure() throws Throwable {
         //This intended behavior is questionable

File: src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java
Patch:
@@ -34,6 +34,7 @@ public void shouldShareState() throws Exception {
         assertNotNull(p.pullVerificationMode());
     }
 
+    @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
     @Test
     public void shouldKnowWhenVerificationHasStarted() throws Exception {
         //given

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -74,6 +74,7 @@ public void should_return_non_zero_for_compareTo_method() {
         assertTrue(result != (Object) 0);
     }
 
+    @SuppressWarnings("SelfComparison")
     @Test
     public void should_return_zero_if_mock_is_compared_to_itself() {
         //given

File: src/test/java/org/mockitousage/basicapi/ResetTest.java
Patch:
@@ -95,6 +95,7 @@ public void shouldResetMultipleMocks() {
         verifyNoMoreInteractions(mock, mockTwo);
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldValidateStateWhenResetting() {
         //invalid verify:

File: src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
Patch:
@@ -29,9 +29,10 @@ public void shouldAllowPassingNullArgument() {
         //then
         try {
             verify(mockFun).doFun("hello");
-            fail();
         } catch(AssertionError r) {
             //it's ok, we just want to reproduce the bug
+            return;
         }
+        fail();
     }
 }

File: src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java
Patch:
@@ -157,6 +157,7 @@ public void doAssert(Throwable t) {
         mock2.booleanObjectReturningMethod();
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test public void rule_validates_mockito_usage() throws Throwable {
         //expect
         rule.expectFailure(UnfinishedVerificationException.class);

File: src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java
Patch:
@@ -104,6 +104,8 @@ public static class FailsInConstructor {
     @RunWith(MockitoJUnitRunner.Silent.class)
     public static class UsesFrameworkIncorrectly {
         @Mock List<?> list;
+
+        @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
         @Test public void unfinished_stubbing_test_method() {
             when(list.get(0)); //unfinished stubbing
         }

File: src/test/java/org/mockitousage/junitrunner/StubbingWarningsJUnitRunnerTest.java
Patch:
@@ -119,6 +119,7 @@ public static class MismatchButStubAlreadyUsed {
     @RunWith(TestableJUnitRunner.class)
     public static class InvalidMockitoUsage {
         @Mock IMethods mock;
+        @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
         @Test public void test() throws Exception {
             when(mock.simpleMethod()); // <-- unfinished stubbing
         }

File: src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -61,6 +61,7 @@ public void tryDescriptiveMessagesOnMisuse() {
 //        when(mock.differentMethod()).thenReturn("");
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test(expected=NotAMockException.class)
     public void shouldScreamWhenWholeMethodPassedToVerify() {
         verify(mock.booleanReturningMethod());
@@ -81,6 +82,7 @@ public void shouldScreamWhenInOrderCreatedWithNulls() {
         inOrder(mock, null);
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test(expected=NullInsteadOfMockException.class)
     public void shouldScreamNullPassedToVerify() {
         verify(null);

File: src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
Patch:
@@ -83,6 +83,7 @@ public void should_report_argument_locations_when_argument_matchers_misused() {
     }
 
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {
         assumeTrue("Does not apply for inline mocks", withFinal.getClass() != WithFinal.class);

File: src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
Patch:
@@ -23,6 +23,7 @@ public class ExplicitFrameworkValidationTest extends TestBase {
 
     @Mock IMethods mock;
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldValidateExplicitly() {
         verify(mock);
@@ -32,6 +33,7 @@ public void shouldValidateExplicitly() {
         } catch (UnfinishedVerificationException e) {}
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldDetectUnfinishedStubbing() {
         when(mock.simpleMethod());

File: src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
Patch:
@@ -104,6 +104,7 @@ public void shouldNotMockObjectMethodsOnInterface() throws Exception {
         verifyZeroInteractions(inter);
     }
 
+    @Test
     public void shouldNotMockObjectMethodsOnClass() throws Exception {
         Object clazz = mock(ObjectLikeInterface.class);
 

File: src/test/java/org/mockitousage/session/MockitoSessionTest.java
Patch:
@@ -151,6 +151,7 @@ public static class SessionWithIncorrectMockitoUsage {
             mockito.finishMocking();
         }
 
+        @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
         @Test public void unfinished_stubbing() {
             when(mock.simpleMethod());
         }
@@ -165,6 +166,7 @@ public static class SessionWithTestFailureAndIncorrectMockitoUsage {
             mockito.finishMocking();
         }
 
+        @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
         @Test public void unfinished_stubbing_with_other_failure() {
             when(mock.simpleMethod());
             assertTrue(false);
@@ -214,6 +216,7 @@ public static class SessionWithOverriddenFailure {
             mockito.finishMocking(new RuntimeException("Boo!"));
         }
 
+        @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
         @Test public void invalid_mockito_usage() {
             verify(mock);
         }

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java
Patch:
@@ -44,6 +44,7 @@ public void shouldPointOutMisplacedMatcher() {
         }
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     private void unfinishedStubbingHere() {
         when(mock.simpleMethod());
     }
@@ -73,6 +74,7 @@ public void shouldShowWhereIsUnfinishedVerification() throws Exception {
         }
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     private void unfinishedVerificationHere() {
         verify(mock);
     }

File: src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -32,6 +32,7 @@ public void cleanStackTrace() {
         super.makeStackTracesClean();
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner() {
         //mess up the state:
@@ -137,6 +138,7 @@ public void shouldSayUnstubbedMethodWasInvokedHere() {
         m.simpleMethod();
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldPointOutUnfinishedStubbing() {
         when(mock.simpleMethod());

File: src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java
Patch:
@@ -72,6 +72,7 @@ public void shouldFilterStackTraceOnVerifyZeroInteractions() {
         }
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldFilterStacktraceOnMockitoException() {
         verify(mock);

File: src/test/java/org/mockitousage/stubbing/StubbingWarningsTest.java
Patch:
@@ -96,13 +96,15 @@ public class StubbingWarningsTest {
                 filterLineNo(logger.getLoggedInfo()));
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test(expected = MockitoException.class) public void unfinished_verification_without_throwable() throws Throwable {
         //when
         verify(mock);
 
         mockito.finishMocking();
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test public void unfinished_verification_with_throwable() throws Throwable {
         //when
         verify(mock);

File: src/test/java/org/mockitousage/stubbing/StubbingWithDelegateTest.java
Patch:
@@ -111,15 +111,15 @@ public void instance_of_different_class_can_be_called() {
         List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));
 
         mock.set(1, "1");
-        assertThat(mock.get(1).equals("1"));
+        assertThat(mock.get(1).equals("1")).isTrue();
     }
 
     @Test
     public void method_with_subtype_return_can_be_called() {
         List<String> mock = mock(List.class, delegatesTo(new FakeList<String>()));
 
         List<String> subList = mock.subList(0, 0);
-        assertThat(subList.isEmpty());
+        assertThat(subList.isEmpty()).isTrue();
     }
 
     @Test

File: src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java
Patch:
@@ -107,6 +107,7 @@ public void shouldFailToVerifyNoMoreInteractionsInOrderWithMultipleMocks() throw
         } catch(VerificationInOrderFailure e) {}
     }
 
+    @SuppressWarnings({"MockitoUsage", "CheckReturnValue"})
     @Test
     public void shouldValidateState() throws Exception {
         //when

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -155,7 +155,7 @@ public void shouldPrintTooManyInvocations() {
 
             String expectedCause =
                 "\n" +
-                "But was 2 times. Undesired invocation:" +
+                "But was 2 times:" +
                 "\n" +
                 "-> at";
             assertThat(e).hasMessageContaining(expectedCause);

File: src/main/java/org/mockito/session/MockitoSessionBuilder.java
Patch:
@@ -47,7 +47,7 @@ public interface MockitoSessionBuilder {
      * like {@link org.mockito.Mock}.
      * <p>
      * In most scenarios, you only need to init mocks on a single test class instance.
-     * This method is useful for advanced framework integrations (like JUnit5), when a test uses multiple, e.g. nested, test class instances.
+     * This method is useful for advanced framework integrations (like JUnit Jupiter), when a test uses multiple, e.g. nested, test class instances.
      * <p>
      * This method calls {@link #initMocks(Object)} for each passed test class instance.
      *

File: src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java
Patch:
@@ -36,7 +36,7 @@ public <T> Class<T> mockClass(final MockFeatures<T> params) {
                         public Class<?> call() throws Exception {
                             return bytecodeGenerator.mockClass(params);
                         }
-                    }, classLoader == null ? BOOTSTRAP_LOCK : classLoader);
+                    }, BOOTSTRAP_LOCK);
         } catch (IllegalArgumentException exception) {
             Throwable cause = exception.getCause();
             if (cause instanceof RuntimeException) {

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -83,9 +83,9 @@ public Stubber doThrow(Class<? extends Throwable> toBeThrown) {
         Throwable e;
         try {
             e = newInstance(toBeThrown);
-        } catch (RuntimeException instanciationError) {
+        } catch (RuntimeException instantiationError) {
             mockingProgress().reset();
-            throw instanciationError;
+            throw instantiationError;
         }
         return doThrow(e);
     }

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java
Patch:
@@ -144,14 +144,14 @@ private static class RealMethodCall implements RealMethod {
 
         private final Method origin;
 
-        private final WeakReference<Object> instanceRef;
+        private final MockWeakReference<Object> instanceRef;
 
         private final Object[] arguments;
 
         private RealMethodCall(SelfCallInfo selfCallInfo, Method origin, Object instance, Object[] arguments) {
             this.selfCallInfo = selfCallInfo;
             this.origin = origin;
-            this.instanceRef = new WeakReference<Object>(instance);
+            this.instanceRef = new MockWeakReference<Object>(instance);
             this.arguments = arguments;
         }
 

File: src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java
Patch:
@@ -34,6 +34,7 @@ private Invocation createInvocation(Object target, MockCreationSettings settings
     public static InterceptedInvocation createInvocation(Object mock, Method invokedMethod, Object[] arguments, RealMethod realMethod, MockCreationSettings settings, Location location) {
         return new InterceptedInvocation(
             mock,
+            true,
             createMockitoMethod(invokedMethod, settings),
             arguments,
             realMethod,

File: src/test/java/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -61,6 +61,7 @@ public Invocation toInvocation() {
         }
 
         Invocation i = new InterceptedInvocation(mock,
+            false,
             new SerializableMethod(method),
             args,
             NO_OP,

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -64,7 +64,7 @@ protected static Invocation invocationOf(Class<?> type, String methodName, Objec
         for (int i = 0; i < args.length; i++) {
             types[i] = args[i].getClass();
         }
-        return new InterceptedInvocation(mock(type), new SerializableMethod(type.getMethod(methodName,
+        return new InterceptedInvocation(mock(type), false, new SerializableMethod(type.getMethod(methodName,
                 types)), args, InterceptedInvocation.NO_OP, new LocationImpl(), 1);
     }
 

File: src/test/java/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -6,7 +6,6 @@
 package org.mockito.internal.invocation;
 
 import org.mockito.Mockito;
-import org.mockito.internal.creation.bytebuddy.InterceptedInvocation;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
@@ -17,7 +16,7 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
-import static org.mockito.internal.creation.bytebuddy.InterceptedInvocation.NO_OP;
+import static org.mockito.internal.invocation.InterceptedInvocation.NO_OP;
 
 /**
  * Build an invocation.

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.StateMaster;
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.configuration.ConfigurationAccess;
-import org.mockito.internal.creation.bytebuddy.InterceptedInvocation;
+import org.mockito.internal.invocation.InterceptedInvocation;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;

File: src/test/java/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -6,7 +6,6 @@
 package org.mockito.internal.invocation;
 
 import org.mockito.Mockito;
-import org.mockito.internal.creation.bytebuddy.InterceptedInvocation;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
@@ -17,7 +16,7 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
-import static org.mockito.internal.creation.bytebuddy.InterceptedInvocation.NO_OP;
+import static org.mockito.internal.invocation.InterceptedInvocation.NO_OP;
 
 /**
  * Build an invocation.

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.StateMaster;
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.configuration.ConfigurationAccess;
-import org.mockito.internal.creation.bytebuddy.InterceptedInvocation;
+import org.mockito.internal.invocation.InterceptedInvocation;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.base.MockitoInitializationException;
 import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.internal.creation.instance.Instantiator;
+import org.mockito.creation.instance.Instantiator;
 import org.mockito.internal.util.Platform;
 import org.mockito.internal.util.concurrent.WeakConcurrentMap;
 import org.mockito.invocation.MockHandler;
@@ -189,7 +189,7 @@ public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
                 ((MockAccess) instance).setMockitoInterceptor(mockMethodInterceptor);
             }
             return instance;
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+        } catch (org.mockito.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + type.getSimpleName() + "'", e);
         }
     }

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.internal.creation.instance.Instantiator;
+import org.mockito.creation.instance.Instantiator;
 import org.mockito.internal.util.Platform;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;
@@ -60,7 +60,7 @@ public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
                     "You might experience classloading issues, please ask the mockito mailing-list.",
                     ""
             ), cce);
-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {
+        } catch (org.mockito.creation.instance.InstantiationException e) {
             throw new MockitoException("Unable to create mock instance of type '" + mockedProxyType.getSuperclass().getSimpleName() + "'", e);
         }
     }

File: src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java
Patch:
@@ -10,6 +10,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.creation.instance.Instantiator;
+import org.mockito.creation.instance.InstantiationException;
 import org.mockito.internal.util.Primitives;
 import org.mockito.internal.util.reflection.AccessibilityChanger;
 

File: src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java
Patch:
@@ -4,10 +4,11 @@
  */
 package org.mockito.internal.creation.instance;
 
+import org.mockito.creation.instance.Instantiator;
 import org.mockito.mock.MockCreationSettings;
-import org.mockito.plugins.InstantiatorProvider;
+import org.mockito.plugins.InstantiatorProvider2;
 
-public class DefaultInstantiatorProvider implements InstantiatorProvider {
+public class DefaultInstantiatorProvider implements InstantiatorProvider2 {
 
     private final static Instantiator INSTANCE = new ObjenesisInstantiator();
 

File: src/main/java/org/mockito/internal/creation/instance/ObjenesisInstantiator.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.creation.instance;
 
+import org.mockito.creation.instance.Instantiator;
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.objenesis.ObjenesisStd;
 

File: src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.internal.stubbing.answers;
 
 import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.internal.creation.instance.Instantiator;
+import org.mockito.creation.instance.Instantiator;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;
 import org.mockito.internal.util.reflection.LenientCopyTool;
 import org.mockito.invocation.InvocationOnMock;

File: src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Patch:
@@ -65,7 +65,7 @@ public void creates_instances_with_primitive_arguments() {
         assertEquals(new ConstructorInstantiator(false, 123).newInstance(SomeClass3.class).getClass(), SomeClass3.class);
     }
 
-    @Test(expected = InstantiationException.class)
+    @Test(expected = org.mockito.creation.instance.InstantiationException.class)
     public void fails_when_null_is_passed_for_a_primitive() {
         assertEquals(new ConstructorInstantiator(false, new Object[]{null}).newInstance(SomeClass3.class).getClass(), SomeClass3.class);
     }
@@ -75,7 +75,7 @@ public void explains_when_constructor_cannot_be_found() {
         try {
             new ConstructorInstantiator(false, new Object[0]).newInstance(SomeClass2.class);
             fail();
-        } catch (InstantiationException e) {
+        } catch (org.mockito.creation.instance.InstantiationException e) {
             assertThat(e).hasMessageContaining("Unable to create instance of 'SomeClass2'.\n" +
                     "Please ensure that the target class has a 0-arg constructor.");
         }

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyMockMaker.java
Patch:
@@ -14,7 +14,7 @@ public class MyMockMaker extends SubclassByteBuddyMockMaker {
 
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (explosive.get() != null) {
-            throw new RuntimeException("Ka-boom!");
+            throw new RuntimeException(MyMockMaker.class.getName());
         }
         return super.createMock(settings, handler);
     }

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyMockMaker.java
Patch:
@@ -14,7 +14,7 @@ public class MyMockMaker extends SubclassByteBuddyMockMaker {
 
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         if (explosive.get() != null) {
-            throw new RuntimeException("Ka-boom!");
+            throw new RuntimeException(MyMockMaker.class.getName());
         }
         return super.createMock(settings, handler);
     }

File: src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017 Mockito contributors
+ * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal.junit;
@@ -29,10 +29,9 @@ public void testFinished(TestFinishedEvent event) {
         //TODO make it better, it's easy to forget to clean up mocks and we still create new instance of list that nobody will read, it's also duplicated
         mocks = new LinkedList<Object>();
 
-        String testName = event.getTestClassInstance().getClass().getSimpleName() + "." + event.getTestMethodName();
         if (event.getFailure() != null) {
             //print unused stubbings only when test succeeds to avoid reporting multiple problems and confusing users
-            new ArgMismatchFinder().getStubbingArgMismatches(createdMocks).format(testName, logger);
+            new ArgMismatchFinder().getStubbingArgMismatches(createdMocks).format(event.getTestName(), logger);
         }
     }
 

File: src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2007 Mockito contributors
+ * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal.runners;
@@ -16,6 +16,7 @@
 import org.junit.runners.model.Statement;
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
+import org.mockito.internal.junit.DefaultTestFinishedEvent;
 import org.mockito.internal.junit.MockitoTestListener;
 import org.mockito.internal.util.Supplier;
 

File: src/test/java/org/mockito/StaticMockingExperimentTest.java
Patch:
@@ -10,12 +10,12 @@
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.InvocationFactory;
 import org.mockito.invocation.MockHandler;
 import org.mockitoutil.TestBase;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.util.concurrent.Callable;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -43,9 +43,9 @@ public class StaticMockingExperimentTest extends TestBase {
     Foo mock = Mockito.mock(Foo.class);
     MockHandler handler = Mockito.mockingDetails(mock).getMockHandler();
     Method staticMethod;
-    Callable realMethod = new Callable() {
+    InvocationFactory.RealMethodBehavior realMethod = new InvocationFactory.RealMethodBehavior() {
         @Override
-        public Object call() throws Exception {
+        public Object call() throws Throwable {
             return null;
         }
     };

File: src/test/java/org/mockito/StaticMockingExperimentTest.java
Patch:
@@ -10,12 +10,12 @@
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.InvocationFactory;
 import org.mockito.invocation.MockHandler;
 import org.mockitoutil.TestBase;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.util.concurrent.Callable;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -43,9 +43,9 @@ public class StaticMockingExperimentTest extends TestBase {
     Foo mock = Mockito.mock(Foo.class);
     MockHandler handler = Mockito.mockingDetails(mock).getMockHandler();
     Method staticMethod;
-    Callable realMethod = new Callable() {
+    InvocationFactory.RealMethodBehavior realMethod = new InvocationFactory.RealMethodBehavior() {
         @Override
-        public Object call() throws Exception {
+        public Object call() throws Throwable {
             return null;
         }
     };

File: src/test/java/org/mockito/StaticMockingExperimentTest.java
Patch:
@@ -10,12 +10,12 @@
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.InvocationFactory;
 import org.mockito.invocation.MockHandler;
 import org.mockitoutil.TestBase;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.util.concurrent.Callable;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -43,9 +43,9 @@ public class StaticMockingExperimentTest extends TestBase {
     Foo mock = Mockito.mock(Foo.class);
     MockHandler handler = Mockito.mockingDetails(mock).getMockHandler();
     Method staticMethod;
-    Callable realMethod = new Callable() {
+    InvocationFactory.RealMethodBehavior realMethod = new InvocationFactory.RealMethodBehavior() {
         @Override
-        public Object call() throws Exception {
+        public Object call() throws Throwable {
             return null;
         }
     };

File: src/test/java/org/mockito/StaticMockingExperimentTest.java
Patch:
@@ -10,12 +10,12 @@
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.InvocationFactory;
 import org.mockito.invocation.MockHandler;
 import org.mockitoutil.TestBase;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.util.concurrent.Callable;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -43,9 +43,9 @@ public class StaticMockingExperimentTest extends TestBase {
     Foo mock = Mockito.mock(Foo.class);
     MockHandler handler = Mockito.mockingDetails(mock).getMockHandler();
     Method staticMethod;
-    Callable realMethod = new Callable() {
+    InvocationFactory.RealMethodBehavior realMethod = new InvocationFactory.RealMethodBehavior() {
         @Override
-        public Object call() throws Exception {
+        public Object call() throws Throwable {
             return null;
         }
     };

File: src/main/java/org/mockito/MockitoSession.java
Patch:
@@ -50,6 +50,7 @@
  *            .initMocks(this)
  *            .name("Example")
  *            .strictness(Strictness.STRICT_STUBS)
+ *            .logger(new MyCustomMockitoSessionLogger())
  *            .startMocking();
  *     }
  *

File: src/main/java/org/mockito/MockitoSession.java
Patch:
@@ -48,6 +48,7 @@
  *         //initialize session to start mocking
  *         mockito = Mockito.mockitoSession()
  *            .initMocks(this)
+ *            .name("Example")
  *            .strictness(Strictness.STRICT_STUBS)
  *            .startMocking();
  *     }

File: src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017 Mockito contributors
+ * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal.junit;
@@ -29,10 +29,9 @@ public void testFinished(TestFinishedEvent event) {
         //TODO make it better, it's easy to forget to clean up mocks and we still create new instance of list that nobody will read, it's also duplicated
         mocks = new LinkedList<Object>();
 
-        String testName = event.getTestClassInstance().getClass().getSimpleName() + "." + event.getTestMethodName();
         if (event.getFailure() != null) {
             //print unused stubbings only when test succeeds to avoid reporting multiple problems and confusing users
-            new ArgMismatchFinder().getStubbingArgMismatches(createdMocks).format(testName, logger);
+            new ArgMismatchFinder().getStubbingArgMismatches(createdMocks).format(event.getTestName(), logger);
         }
     }
 

File: src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2007 Mockito contributors
+ * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal.runners;
@@ -16,6 +16,7 @@
 import org.junit.runners.model.Statement;
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
+import org.mockito.internal.junit.DefaultTestFinishedEvent;
 import org.mockito.internal.junit.MockitoTestListener;
 import org.mockito.internal.util.Supplier;
 

File: src/test/java/org/mockitousage/stubbing/StubbingWarningsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017 Mockito contributors
+ * Copyright (c) 2018 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockitousage.stubbing;
@@ -12,6 +12,7 @@
 import org.mockito.quality.Strictness;
 import org.mockitousage.IMethods;
 
+import static java.util.Collections.singletonList;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockitoutil.TestBase.filterLineNo;
@@ -21,7 +22,7 @@ public class StubbingWarningsTest {
     @Mock IMethods mock;
 
     SimpleMockitoLogger logger = new SimpleMockitoLogger();
-    MockitoSession mockito = new DefaultMockitoSession(this, Strictness.WARN, logger);
+    MockitoSession mockito = new DefaultMockitoSession(singletonList((Object) this), Strictness.WARN, logger);
 
     @Test public void few_interactions() throws Throwable {
         //when

File: src/main/java/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -47,8 +47,8 @@ public VerificationMode maybeVerifyLazily(VerificationMode mode) {
         };
     }
 
-    public void reportOngoingStubbing(OngoingStubbing iOngoingStubbing) {
-        this.ongoingStubbing = iOngoingStubbing;
+    public void reportOngoingStubbing(OngoingStubbing ongoingStubbing) {
+        this.ongoingStubbing = ongoingStubbing;
     }
 
     public OngoingStubbing<?> pullOngoingStubbing() {
@@ -129,7 +129,7 @@ public void stubbingCompleted() {
     }
 
     public String toString() {
-        return  "iOngoingStubbing: " + ongoingStubbing +
+        return  "ongoingStubbing: " + ongoingStubbing +
         ", verificationMode: " + verificationMode +
         ", stubbingInProgress: " + stubbingInProgress;
     }

File: src/main/java/org/mockito/quality/Strictness.java
Patch:
@@ -80,7 +80,8 @@ public enum Strictness {
      *      <li>Cleaner, more DRY tests ("Don't Repeat Yourself"):
      *          If you use {@link org.mockito.Mockito#verifyNoMoreInteractions(Object...)}
      *          you no longer need to explicitly verify stubbed invocations.
-     *          They are automatically verified for you.</li>
+     *          They are automatically verified for you. However if you have more invocations,
+     *          the test won't fail since it won't check that there are no more interactions on that stub.</li>
      *  </ul>
      *
      * For more information see {@link Strictness}.

File: src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java
Patch:
@@ -26,7 +26,7 @@ public class WeakConcurrentMap<K, V> extends ReferenceQueue<K> implements Runnab
 
     private static final AtomicLong ID = new AtomicLong();
 
-    final ConcurrentMap<WeakKey<K>, V> target;
+    public final ConcurrentMap<WeakKey<K>, V> target;
 
     private final Thread thread;
 

File: src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java
Patch:
@@ -26,7 +26,7 @@ public class WeakConcurrentMap<K, V> extends ReferenceQueue<K> implements Runnab
 
     private static final AtomicLong ID = new AtomicLong();
 
-    final ConcurrentMap<WeakKey<K>, V> target;
+    public final ConcurrentMap<WeakKey<K>, V> target;
 
     private final Thread thread;
 

File: src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright (c) 2007 Mockito contributors This program is made available under the terms of the MIT License.
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
  */
 
 package org.mockitousage.verification;

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2832,7 +2832,8 @@ public static VerificationMode description(String description) {
     }
 
     /**
-     * @deprecated - please use {@link MockingDetails#printInvocations()}.
+     * @deprecated - please use {@link MockingDetails#printInvocations()} instead.
+     * An instance of {@code MockingDetails} can be retrieved via {@link #mockingDetails(Object)}.
      */
     @Deprecated
     static MockitoDebugger debug() {

File: src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -58,7 +58,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class ThreadsRunAllTestsHalfManualTest extends TestBase {
 

File: src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 public class MockitoAssertionErrorTest extends TestBase {
 

File: src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -8,8 +8,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 public class MockitoExceptionTest extends TestBase {
 

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: src/test/java/org/mockito/internal/InOrderImplTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.mockitoutil.TestBase;
 
 import static java.util.Collections.singletonList;
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 @SuppressWarnings("unchecked")
 public class InOrderImplTest extends TestBase {

File: src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 /**

File: src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java
Patch:
@@ -11,8 +11,8 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 public class PluginFileReaderTest extends TestBase {
 

File: src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Collections;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.when;

File: src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import java.lang.reflect.Method;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class DelegatingMethodTest extends TestBase {
 

File: src/test/java/org/mockito/internal/creation/InterfaceOverrideTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class InterfaceOverrideTest {
 

File: src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class MockSettingsImplTest extends TestBase {

File: src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 public class ConstructorInstantiatorTest extends TestBase {
 

File: src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class LoggingListenerTest extends TestBase {
 

File: src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockitoutil.Conditions.onlyThoseClasses;
 
 public class StackTraceFilterTest extends TestBase {

File: src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.io.Serializable;
 import java.util.HashMap;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.internal.hamcrest.MatcherGenericTypeExtractor.genericTypeOfMatcher;
 
 public class MatcherGenericTypeExtractorTest extends TestBase {

File: src/test/java/org/mockito/internal/handler/MockHandlerFactoryTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.internal.handler.MockHandlerFactory.createMockHandler;
 
 /**

File: src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
Patch:
@@ -25,8 +25,8 @@
 
 import java.util.Arrays;
 
-import static junit.framework.TestCase.assertNull;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doThrow;

File: src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicReference;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 
 public class InvocationMarkerTest extends TestBase {
 

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -6,9 +6,9 @@
 package org.mockito.internal.invocation;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.internal.matchers.Any.ANY;
 

File: src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java
Patch:
@@ -21,9 +21,9 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.assertNull;
-import static junit.framework.TestCase.assertSame;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
 
 
 public class InvocationsFinderTest extends TestBase {

File: src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java
Patch:
@@ -5,8 +5,8 @@
 package org.mockito.internal.invocation;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.internal.invocation.MatcherApplicationStrategy.getMatcherApplicationStrategyFor;
 import static org.mockito.internal.matchers.Any.ANY;

File: src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class JUnitFailureHackerTest extends TestBase {

File: src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import java.math.BigDecimal;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class ComparableMatchersTest extends TestBase {
 

File: src/test/java/org/mockito/internal/matchers/EqualityTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.internal.matchers.Equality.areEqual;
 
 public class EqualityTest extends TestBase {

File: src/test/java/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 
 
 public class EqualsTest extends TestBase {

File: src/test/java/org/mockito/internal/matchers/MatchersPrinterTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @SuppressWarnings("unchecked")
 public class MatchersPrinterTest extends TestBase {

File: src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class MatchersToStringTest extends TestBase {
 

File: src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.math.BigDecimal;
 import java.util.Arrays;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 
 /**
  * @author <a href="mailto:sdowney@panix.com">Steve Downey</a>

File: src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class MatcherToStringTest extends TestBase {
 

File: src/test/java/org/mockito/internal/progress/AtLeastTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 public class AtLeastTest extends TestBase {
 

File: src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.verification.VerificationMode;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 
 public class MockingProgressImplTest extends TestBase {
 

File: src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;

File: src/test/java/org/mockito/internal/reporting/PluralizerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class PluralizerTest extends TestBase {
 

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.internal.runners.InternalRunner;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 
 public class RunnerProviderTest extends TestBase {
 

File: src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class TestMethodsFinderTest extends TestBase {
 

File: src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.mockito.invocation.Invocation;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 public class InvocationContainerImplStubbingTest extends TestBase {
 

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class ForwardsInvocationsTest extends TestBase {
 

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.*;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
 
 public class ReturnsEmptyValuesTest extends TestBase {

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.internal.util.MockUtil;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.junit.Assume.assumeFalse;
 
 public class ReturnsMocksTest extends TestBase {

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class ReturnsMoreEmptyValuesTest extends TestBase {
 

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.mockito.stubbing.Answer;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 public class ReturnsSmartNullsTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/MockNameImplTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class MockNameImplTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/MockUtilTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.withSettings;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import java.util.Date;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class ObjectMethodsGuruTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class SimpleMockitoLoggerTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/StringUtilTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.emptyList;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class StringUtilTest  {

File: src/test/java/org/mockito/internal/util/collections/ListUtilTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 
 public class ListUtilTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 @SuppressWarnings("unused")
 public class FieldReaderTest extends TestBase {

File: src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.internal.util.reflection.GenericTypeExtractor.genericTypeOf;
 
 public class GenericTypeExtractorTest extends TestBase {

File: src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java
Patch:
@@ -10,8 +10,8 @@
 import java.lang.reflect.Field;
 import java.util.LinkedList;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertFalse;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.mockito.invocation.Invocation;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class DefaultRegisteredInvocationsTest extends TestBase {
 

File: src/test/java/org/mockito/internal/verification/DescriptionTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.verify;
 import static org.mockito.MockitoAnnotations.initMocks;

File: src/test/java/org/mockito/internal/verification/NoMoreInteractionsTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockitoutil.TestBase;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.mock;
 
 public class NoMoreInteractionsTest extends TestBase {

File: src/test/java/org/mockito/internal/verification/VerificationDataImplTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 
 public class VerificationDataImplTest extends TestBase {
 

File: src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.assertj.core.api.Assertions.fail;
 import static org.mockito.Mockito.description;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.List;
 
 import static java.util.Collections.singletonList;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @SuppressWarnings({ "unchecked", "serial" })
 public class ArgumentMatchingToolTest extends TestBase {

File: src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.internal.util.ConsoleMockitoLogger;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class ConsoleSpammingMockitoJUnitRunnerTest extends TestBase {
 

File: src/test/java/org/mockito/verification/TimeoutTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class TimeoutTest extends TestBase {

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Date;
 import java.util.GregorianCalendar;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willAnswer;
 import static org.mockito.Matchers.any;

File: src/test/java/org/mockitousage/annotation/AnnotationsTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.verify;
 
 public class AnnotationsTest extends TestBase {

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertSame;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
 import static org.mockito.Mockito.verify;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class CaptorAnnotationTest extends TestBase {

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class CaptorAnnotationUnhappyPathTest extends TestBase {

File: src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.mockito.internal.configuration.IndependentAnnotationEngine;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 
 public class DeprecatedAnnotationEngineApiTest extends TestBase {
 

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 
 @SuppressWarnings({"unchecked", "unused"})
 public class MockInjectionUsingSetterOrPropertyTest extends TestBase {

File: src/test/java/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.internal.util.MockUtil.isMock;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 
 public class WrongSetOfAnnotationsTest extends TestBase {
 

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 import java.util.Observable;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 import static org.mockitoutil.SimpleSerializationUtil.*;
 

File: src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.List;
 import java.util.Observable;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.junit.Assume.assumeFalse;
 import static org.mockito.Mockito.*;
 import static org.mockitoutil.SimpleSerializationUtil.*;

File: src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.io.Serializable;
 
-import static junit.framework.TestCase.assertSame;
+import static org.junit.Assert.assertSame;
 import static org.mockitoutil.SimpleSerializationUtil.serializeAndBack;
 
 @SuppressWarnings("serial")

File: src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.Mockito;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 public class ReplacingObjectMethodsTest extends TestBase {
 

File: src/test/java/org/mockitousage/basicapi/ResetInvocationsTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 public class ResetInvocationsTest extends TestBase {

File: src/test/java/org/mockitousage/basicapi/ResetTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -14,8 +14,8 @@
 
 import java.util.ArrayList;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class UsingVarargsTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class ActualInvocationHasNullArgumentNPEBugTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.io.Serializable;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
@@ -33,7 +33,7 @@ public void shouldAutoboxSafely() {
 
         //then
         verify(fun).doFun(captor.capture());
-        assertEquals(1.0, captor.getValue());
+        assertEquals(Double.valueOf(1.0), captor.getValue());
     }
 
     @Captor ArgumentCaptor<Integer> intCaptor;

File: src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 //see issue 101

File: src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.verify;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.mockito.junit.MockitoJUnitRunner;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertFalse;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 
 // @Ignore("for demo only. this test cannot be enabled as it fails :)")

File: src/test/java/org/mockitousage/bugs/NPEWhenCustomExceptionStackTraceReturnNullTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;
 
 public class NPEWhenCustomExceptionStackTraceReturnNullTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;
 
 public class NPEWhenMockingThrowablesTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 //see issue 184

File: src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.only;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.verify;
 
 //see issue 216

File: src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 //see bug 138

File: src/test/java/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/bugs/varargs/VarargsErrorWhenCallingRealMethodTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 public class VarargsErrorWhenCallingRealMethodTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
Patch:
@@ -9,8 +9,8 @@
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 //see issue 62

File: src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockitoutil.TestBase;
 
 import static java.lang.annotation.ElementType.FIELD;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.verify;
 
 

File: src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Patch:
@@ -11,9 +11,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNull;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.CALLS_REAL_METHODS;
 import static org.mockito.Mockito.mock;

File: src/test/java/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.Set;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.*;
 
 public class BDDMockitoTest extends TestBase {

File: src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 
 @SuppressWarnings("serial")
 public class LocationImplTest extends TestBase {

File: src/test/java/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.*;
 
 //@RunWith(ConsoleSpammingMockitoJUnitRunner.class)

File: src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/matchers/CustomMatchersTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.hamcrest.CoreMatchers.is;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -18,9 +18,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNotSame;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalMatchers.and;
 import static org.mockito.AdditionalMatchers.aryEq;

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -12,8 +12,8 @@
 
 import java.util.*;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: src/test/java/org/mockitousage/matchers/NewMatchersTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class VerificationAndStubbingUsingMatchersTest extends TestBase {

File: src/test/java/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class CleaningUpPotentialStubbingTest extends TestBase {

File: src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.anyBoolean;

File: src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;

File: src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 public class LoadsOfMocksTest extends TestBase {

File: src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.plugins.StackTraceCleanerProvider;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 
 public class MockitoPluginsTest extends TestBase {
 

File: src/test/java/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockitoutil.Conditions.bridgeMethod;

File: src/test/java/org/mockitousage/puzzlers/OverloadingPuzzleTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/session/MockitoSessionTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.JUnitResultAssert;
 
-import static junit.framework.TestCase.assertNotNull;
-import static junit.framework.TestCase.assertNull;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.when;
 

File: src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.*;

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;

File: src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stubbing/CallingRealMethodTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.*;
 
 public class CallingRealMethodTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/CloningParameterTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Mockito.*;
 
 public class CloningParameterTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Locale;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stubbing/ReturningDefaultValuesTest.java
Patch:
@@ -16,8 +16,8 @@
 import java.util.List;
 import java.util.Map;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 @SuppressWarnings("unchecked")
 public class ReturningDefaultValuesTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 public class StubbingConsecutiveAnswersTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.io.IOException;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.lang.reflect.Method;
 import java.util.Set;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 public class StubbingWithCustomAnswerTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/StubbingWithDelegateTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.AdditionalAnswers.delegatesTo;

File: src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java
Patch:
@@ -15,8 +15,8 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;
 
 public class StubbingWithExtraAnswersTest extends TestBase {

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class AtLeastXVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java
Patch:
@@ -15,8 +15,8 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class BasicVerificationInOrderTest extends TestBase {

File: src/test/java/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -15,7 +15,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class BasicVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/CustomVerificationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.verify;
 
 public class CustomVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.util.LinkedList;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.times;
 

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalMatchers.aryEq;
 import static org.mockito.Mockito.*;

File: src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.util.LinkedList;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/verification/OnlyVerificationTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.util.List;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.only;
 import static org.mockito.Mockito.verify;

File: src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Matchers.eq;

File: src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 /**

File: src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class SelectedMocksInOrderVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.mockitoutil.Stopwatch;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
-import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.assertEquals;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.rules.ExpectedException.none;
 import static org.mockito.Mockito.after;

File: src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.*;
+import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 public class VerificationInOrderMixedWithOrdiraryVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/VerificationInOrderTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.assertEquals;
-import static junit.framework.TestCase.assertNotSame;
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.fail;
 import static org.mockito.AdditionalMatchers.*;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.times;

File: src/test/java/org/mockitoutil/SimpleSerializationUtil.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.io.*;
 
-import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.assertNotNull;
 
 public abstract class SimpleSerializationUtil {
 

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-import static junit.framework.TestCase.fail;
+import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.verify;
 

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -203,9 +203,7 @@ public interface MockSettings extends Serializable {
      * Registers a listener for method invocations on this mock. The listener is
      * notified every time a method on this mock is called.
      * <p>
-     * Multiple listeners may be added, but the same object is only added once.
-     * The order, in which the listeners are added, is not guaranteed to be the
-     * order in which the listeners are notified.
+     * Multiple listeners may be added and they will be notified in the order they were supplied.
      *
      * Example:
      * <pre class="code"><code class="java">

File: src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java
Patch:
@@ -39,9 +39,8 @@ public void setMock(Object mock) {
             }
             MockitoMock mockitoMock = MockUtil.getMockitoMock(mock);
             if (!mockitoMock.isMock()) {
-                throw Reporter.methodDoesNotAcceptParameter("VerificationStartedEvent.setMock", "parameter which is not a Mockito mock.");
-                //TODO! use ValuePrinter to print the object that was passed (also add coverage)
-                //if the user passed wrong argument, lets show him what argument was passed to streamline debugging
+                throw Reporter.methodDoesNotAcceptParameter("VerificationStartedEvent.setMock", "parameter which is not a Mockito mock.\n" +
+                    "  Received parameter: " + ValuePrinter.print(mock) + ".\n ");
             }
             MockCreationSettings originalMockSettings = this.originalMock.getHandler().getMockSettings();
             assertCompatibleTypes(mock, originalMockSettings);

File: src/test/java/org/mockito/internal/listeners/VerificationStartedNotifierTest.java
Patch:
@@ -36,7 +36,9 @@ public void decent_exception_when_setting_non_mock() throws Exception {
             fail();
         } catch (Exception e) {
             //then
-            assertEquals("VerificationStartedEvent.setMock() does not accept parameter which is not a Mockito mock. See the Javadoc.", e.getMessage());
+            assertEquals("VerificationStartedEvent.setMock() does not accept parameter which is not a Mockito mock.\n" +
+                "  Received parameter: \"not a mock\".\n" +
+                "  See the Javadoc.", e.getMessage());
         }
     }
 

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -157,11 +157,11 @@ public MockSettings invocationListeners(InvocationListener... listeners) {
 
     private static <T> void addListeners(T[] listeners, List<T> container, String method) {
         if (listeners == null) {
-            throw methodDoesNotAcceptParameter(method, "null vararg array");
+            throw methodDoesNotAcceptParameter(method, "null vararg array.");
         }
         for (T listener : listeners) {
             if (listener == null) {
-                throw methodDoesNotAcceptParameter(method, "null listeners");
+                throw methodDoesNotAcceptParameter(method, "null listeners.");
             }
             container.add(listener);
         }

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -672,7 +672,7 @@ public static MockitoException fieldInitialisationThrewException(Field field, Th
     }
 
     public static MockitoException methodDoesNotAcceptParameter(String method, String parameter) {
-        return new MockitoException(method + "() does not accept " + parameter + ". See the Javadoc.");
+        return new MockitoException(method + "() does not accept " + parameter + " See the Javadoc.");
     }
 
     public static MockitoException invocationListenersRequiresAtLeastOneListener() {

File: src/main/java/org/mockito/internal/util/MockitoMock.java
Patch:
@@ -5,6 +5,8 @@
 /**
  * Represents Mockito mock object, gives access to {@link MockHandler}
  *
+ * TODO! replace with MockingDetails type
+ *
  * TODO SF (perf tweak) in our codebase we call mockMaker.getHandler() multiple times unnecessarily
  * This is not ideal because getHandler() can be expensive (reflective calls inside mock maker)
  * The frequent pattern in the codebase is: 1) isMock(mock) 2) getMockHandler(mock)

File: src/main/java/org/mockito/internal/MockitoCore.java
Patch:
@@ -92,7 +92,7 @@ public <T> T verify(T mock, VerificationMode mode) {
         MockHandler handler = mockitoMock.getHandler();
 
         mock = (T) VerificationStartedNotifier.notifyVerificationStarted(
-            handler.getMockSettings().getVerificationStartedListeners(), mock);
+            handler.getMockSettings().getVerificationStartedListeners(), mockitoMock);
 
         MockingProgress mockingProgress = mockingProgress();
         VerificationMode actualMode = mockingProgress.maybeVerifyLazily(mode);

File: src/main/java/org/mockito/internal/util/MockUtil.java
Patch:
@@ -76,7 +76,7 @@ public static boolean isMock(Object mock) {
     }
 
     public static MockitoMock getMockitoMock(Object mock) {
-        return new MockitoMock(mockMaker.getHandler(mock));
+        return new MockitoMock(mock, mockMaker.getHandler(mock));
     }
 
     public static MockName getMockName(Object mock) {

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -203,9 +203,7 @@ public interface MockSettings extends Serializable {
      * Registers a listener for method invocations on this mock. The listener is
      * notified every time a method on this mock is called.
      * <p>
-     * Multiple listeners may be added, but the same object is only added once.
-     * The order, in which the listeners are added, is not guaranteed to be the
-     * order in which the listeners are notified.
+     * Multiple listeners may be added and they will be notified in the order they were supplied.
      *
      * Example:
      * <pre class="code"><code class="java">

File: src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java
Patch:
@@ -27,7 +27,7 @@ public PluginLoader(PluginSwitch pluginSwitch) {
     }
 
     /**
-     * @Deprecated Let's avoid adding more aliases. It complicates the API.
+     * @deprecated Let's avoid adding more aliases. It complicates the API.
      * Instead of an alias, we can use fully qualified class name of the alternative implementation.
      * <p>
      * Adds an alias for a class name to this plugin loader. Instead of the fully qualified type name,

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -12,8 +12,6 @@
 import org.mockito.stubbing.Answer;
 
 import java.io.Serializable;
-import java.lang.reflect.Method;
-import java.util.concurrent.Callable;
 
 /**
  * Allows mock creation with additional mock settings.

File: src/main/java/org/mockito/MockSettings.java
Patch:
@@ -284,5 +284,6 @@ public interface MockSettings extends Serializable {
      * @return immutable view of mock settings
      * @since 2.10.0
      */
+    @Incubating
     <T> MockCreationSettings<T> build(Class<T> typeToMock);
 }

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -119,5 +119,6 @@ public interface MockingDetails {
      * @return mock handler instance of this mock
      * @since 2.10.0
      */
+    @Incubating
     MockHandler getMockHandler();
 }

File: src/main/java/org/mockito/invocation/InvocationContainer.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.invocation;
 
+import org.mockito.Incubating;
 import org.mockito.NotExtensible;
 
 /**
@@ -14,4 +15,5 @@
  * Use our issue tracker to open a ticket and open a discussion.
  */
 @NotExtensible
+@Incubating
 public interface InvocationContainer {}

File: src/main/java/org/mockito/invocation/InvocationFactory.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockito.invocation;
 
+import org.mockito.Incubating;
 import org.mockito.mock.MockCreationSettings;
 
 import java.lang.reflect.Method;
@@ -15,6 +16,7 @@
  *
  * @since 2.10.0
  */
+@Incubating
 public interface InvocationFactory {
 
     /**
@@ -31,5 +33,6 @@ public interface InvocationFactory {
      * @return invocation instance
      * @since 2.10.0
      */
+    @Incubating
     Invocation createInvocation(Object target, MockCreationSettings settings, Method method, Callable realMethod, Object... args);
 }

File: src/main/java/org/mockito/MockitoFramework.java
Patch:
@@ -74,7 +74,7 @@ public interface MockitoFramework {
      * An example plugin is {@link org.mockito.plugins.MockMaker}.
      * For information why and how to use this method see {@link MockitoPlugins}.
      *
-     * TODO SZ
+     * @since 2.10.0
      */
     MockitoPlugins getPlugins();
 

File: src/main/java/org/mockito/stubbing/Stubbing.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.stubbing;
 
 import org.mockito.MockingDetails;
+import org.mockito.NotExtensible;
 import org.mockito.invocation.Invocation;
 
 /**
@@ -13,6 +14,7 @@
  *
  * @since 2.2.3
  */
+@NotExtensible
 public interface Stubbing extends Answer {
 
     /**

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -11,6 +11,9 @@
  * The javadoc does not have lots of examples or documentation because its audience is different.
  * Vast majority of users don't need to use the Invocation. It's mostly useful for other framework authors
  * that extend Mockito.
+ * <p>
+ * Creating own implementations of this interface is not recommended.
+ * If you are a framework integrator and you need to programatically create instances of invocations see {@link InvocationFactory}.
  *
  * @since 1.9.5
  */

File: src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -4,12 +4,11 @@
  */
 package org.mockito.internal.handler;
 
-import org.mockito.internal.stubbing.InvocationContainer;
+import org.mockito.invocation.InvocationContainer;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MockHandler;
 import org.mockito.listeners.InvocationListener;
 import org.mockito.mock.MockCreationSettings;
-import org.mockito.stubbing.Answer;
 
 import java.util.List;
 

File: src/main/java/org/mockito/internal/handler/NullResultGuardian.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.handler;
 
-import org.mockito.internal.stubbing.InvocationContainer;
+import org.mockito.invocation.InvocationContainer;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -7,7 +7,6 @@
 
 import org.mockito.internal.util.MockUtil;
 import org.mockito.invocation.Invocation;
-import org.mockito.invocation.MockHandler;
 import org.mockito.stubbing.Stubbing;
 
 import java.util.LinkedList;
@@ -24,8 +23,7 @@ public class UnusedStubsFinder {
     public List<Invocation> find(List<?> mocks) {
         List<Invocation> unused = new LinkedList<Invocation>();
         for (Object mock : mocks) {
-            MockHandler<Object> handler = MockUtil.getMockHandler(mock);
-            List<Stubbing> fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();
+            List<Stubbing> fromSingleMock = MockUtil.getInvocationContainer(mock).getStubbedInvocations();
             for(Stubbing s : fromSingleMock) {
                 if (!s.wasUsed()) {
                      unused.add(s.getInvocation());

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -34,7 +34,7 @@ public <T> T when(T mock) {
 			throw notAMockPassedToWhenMethod();
 		}
 
-		MockUtil.getMockHandler(mock).getInvocationContainer().setAnswersForStubbing(answers);
+		MockUtil.getInvocationContainer(mock).setAnswersForStubbing(answers);
         return mock;
     }
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -58,11 +58,10 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
     }
 
     private Object deepStub(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {
-        MockHandler<Object> handler = MockUtil.getMockHandler(invocation.getMock());
-        //TODO below cast is unsafe and it needs to be fixed
-        InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();
+        InvocationContainerImpl container = MockUtil.getInvocationContainer(invocation.getMock());
 
         // matches invocation for verification
+        // TODO why don't we do container.findAnswer here?
         for (Stubbing stubbing : container.getStubbedInvocations()) {
             if (container.getInvocationForStubbing().matches(stubbing.getInvocation())) {
                 return stubbing.answer(invocation);

File: src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.Mockito;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.handler.MockHandlerImpl;
-import org.mockito.internal.stubbing.InvocationContainer;
+import org.mockito.invocation.InvocationContainer;
 import org.mockito.internal.stubbing.answers.CallsRealMethods;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MockHandler;

File: src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
Patch:
@@ -40,7 +40,6 @@ public class MockHandlerImplTest extends TestBase {
     private StubbedInvocationMatcher stubbedInvocationMatcher = mock(StubbedInvocationMatcher.class);
     private Invocation invocation = mock(InvocationImpl.class);
 
-
     @Test
     public void should_remove_verification_mode_even_when_invalid_matchers() throws Throwable {
         // given

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -185,7 +185,7 @@
  * </code></pre>
  *
  * <ul>
- * <li> By default, for all methods that return a value, a mock will return either null, a
+ * <li> By default, for all methods that return a value, a mock will return either null,
  * a primitive/primitive wrapper value, or an empty collection, as appropriate.
  * For example 0 for an int/Integer and false for a boolean/Boolean. </li>
  *

File: src/main/java/org/mockito/AdditionalAnswers.java
Patch:
@@ -325,6 +325,8 @@ public static <T> Answer<T> returnsElementsOf(Collection<?> elements) {
      * @param sleepyTime the delay in milliseconds
      * @param answer interface to the answer which provides the intended return value.
      * @return the answer object to use
+     *
+     * @since 2.8.44
      */
     @Incubating
     public static <T> Answer<T> answersWithDelay(long sleepyTime, Answer<T> answer) {

File: src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java
Patch:
@@ -17,6 +17,7 @@
  * <p>The <code>sleepyTime</code> specifies how long, in milliseconds, to pause before
  * returning the provided <code>answer</code>.</p>
  *
+ * @since 2.8.44
  * @see org.mockito.AdditionalAnswers
  */
 public class AnswersWithDelay implements Answer<Object>, ValidableAnswer, Serializable {
@@ -42,4 +43,5 @@ public void validateFor(final InvocationOnMock invocation) {
             ((ValidableAnswer) answer).validateFor(invocation);
         }
     }
-}
\ No newline at end of file
+}
+

File: src/test/java/org/mockito/internal/stubbing/answers/AnswersWithDelayTest.java
Patch:
@@ -42,4 +42,5 @@ public void should_delay() throws Throwable {
         final long timePassed = after.getTime() - before.getTime();
         assertThat(timePassed).isCloseTo(sleepyTime, within(15L));
     }
-}
\ No newline at end of file
+}
+

File: src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java
Patch:
@@ -13,7 +13,7 @@
  */
 class ArgMismatchFinder {
 
-    StubbingArgMismatches getStubbingArgMismatches(Iterable<Object> mocks) {
+    StubbingArgMismatches getStubbingArgMismatches(Iterable<?> mocks) {
         StubbingArgMismatches mismatches = new StubbingArgMismatches();
         for (Invocation i : AllInvocationsFinder.find(mocks)) {
             if (i.stubInfo() != null) {

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1354,7 +1354,7 @@
  * To quickly find out how "stricter" Mockito can make you more productive and get your tests cleaner, see:
  * <ul>
  *     <li>Strict stubbing with JUnit Rules - {@link MockitoRule#strictness(Strictness)} with {@link Strictness#STRICT_STUBS}</li>
- *     <li>Strict stubbing with JUnit Runner - {@link MockitoJUnitRunner.StrictStubs.class}</li>
+ *     <li>Strict stubbing with JUnit Runner - {@link MockitoJUnitRunner.StrictStubs}</li>
  *     <li>Strict stubbing if you cannot use runner/rule (like TestNG) - {@link MockitoSession}</li>
  *     <li>Unnecessary stubbing detection with {@link MockitoJUnitRunner}</li>
  *     <li>Stubbing argument mismatch warnings, documented in {@link MockitoHint}</li>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -293,7 +293,7 @@
  *
  * //verification using atLeast()/atMost()
  * verify(mockedList, atLeastOnce()).add("three times");
- * verify(mockedList, atLeast(2)).add("five times");
+ * verify(mockedList, atLeast(2)).add("three times");
  * verify(mockedList, atMost(5)).add("three times");
  *
  * </code></pre>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -69,7 +69,7 @@
  *      <a href="#30">30. Spying or mocking abstract classes (Since 1.10.12, further enhanced in 2.7.13 and 2.7.14)</a><br/>
  *      <a href="#31">31. Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3><br/>
  *      <a href="#32">32. Better generic support with deep stubs (Since 1.10.0)</a></h3><br/>
- *      <a href="#32">33. Mockito JUnit rule (Since 1.10.17)</a><br/>
+ *      <a href="#33">33. Mockito JUnit rule (Since 1.10.17)</a><br/>
  *      <a href="#34">34. Switch <em>on</em> or <em>off</em> plugins (Since 1.10.15)</a><br/>
  *      <a href="#35">35. Custom verification failure message (Since 2.1.0)</a><br/>
  *      <a href="#36">36. Java 8 Lambda Matcher Support (Since 2.1.0)</a><br/>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -293,7 +293,7 @@
  *
  * //verification using atLeast()/atMost()
  * verify(mockedList, atLeastOnce()).add("three times");
- * verify(mockedList, atLeast(2)).add("five times");
+ * verify(mockedList, atLeast(2)).add("three times");
  * verify(mockedList, atMost(5)).add("three times");
  *
  * </code></pre>

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java
Patch:
@@ -80,7 +80,7 @@ public InlineBytecodeGenerator(Instrumentation instrumentation, WeakConcurrentMa
         advice = new MockMethodAdvice(mocks, identifier);
         subclassEngine = new TypeCachingBytecodeGenerator(new SubclassBytecodeGenerator(withDefaultConfiguration()
                 .withBinders(of(MockMethodAdvice.Identifier.class, identifier))
-                .to(MockMethodAdvice.ForReadObject.class), isAbstract().or(isNative())), false);
+                .to(MockMethodAdvice.ForReadObject.class), isAbstract().or(isNative()).or(isToString())), false);
         MockMethodDispatcher.set(identifier, advice);
         instrumentation.addTransformer(this, true);
     }

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -448,6 +448,9 @@ public static MockitoException cannotStubVoidMethodWithAReturnValue(String metho
                 "'" + methodName + "' is a *void method* and it *cannot* be stubbed with a *return value*!",
                 "Voids are usually stubbed with Throwables:",
                 "    doThrow(exception).when(mock).someVoidMethod();",
+                "If you need to set the void method to do nothing you can use:",
+                "    doNothing().when(mock).someVoidMethod();",
+                "For more information, check out the javadocs for Mockito.doNothing().",
                 "***",
                 "If you're unsure why you're getting above error read on.",
                 "Due to the nature of the syntax above problem might occur because:",

File: src/test/java/org/mockitousage/IMethods.java
Patch:
@@ -233,4 +233,6 @@ public interface IMethods {
     Integer toIntWrapper(int i);
 
     String forObject(Object object);
+
+    <T> String genericToString(T arg);
 }

File: src/main/java/org/mockito/internal/creation/DelegatingMethod.java
Patch:
@@ -12,10 +12,12 @@
 public class DelegatingMethod implements MockitoMethod {
 
     private final Method method;
+    private final Class<?>[] parameterTypes;
 
     public DelegatingMethod(Method method) {
         assert method != null : "Method cannot be null";
         this.method = method;
+        this.parameterTypes = SuspendMethod.trimSuspendParameterTypes(method.getParameterTypes());
     }
 
     public Class<?>[] getExceptionTypes() {
@@ -31,7 +33,7 @@ public String getName() {
     }
 
     public Class<?>[] getParameterTypes() {
-        return method.getParameterTypes();
+        return parameterTypes;
     }
 
     public Class<?> getReturnType() {

File: src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java
Patch:
@@ -45,7 +45,7 @@ public InterceptedInvocation(Object mock,
                                  int sequenceNumber) {
         this.mock = mock;
         this.mockitoMethod = mockitoMethod;
-        this.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), arguments);
+        this.arguments = ArgumentsProcessor.expandArgs(mockitoMethod, arguments);
         this.rawArguments = arguments;
         this.superMethod = superMethod;
         this.location = location;

File: src/main/java/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -45,7 +45,7 @@ public InvocationImpl(Object mock, MockitoMethod mockitoMethod, Object[] args, i
         this.method = mockitoMethod;
         this.mock = mock;
         this.realMethod = realMethod;
-        this.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), args);
+        this.arguments = ArgumentsProcessor.expandArgs(mockitoMethod, args);
         this.rawArguments = args;
         this.sequenceNumber = sequenceNumber;
         this.location = location;

File: src/main/java/org/mockito/internal/invocation/SerializableMethod.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.invocation;
 
 import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.creation.SuspendMethod;
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
@@ -29,7 +30,7 @@ public SerializableMethod(Method method) {
         this.method = method;
         declaringClass = method.getDeclaringClass();
         methodName = method.getName();
-        parameterTypes = method.getParameterTypes();
+        parameterTypes = SuspendMethod.trimSuspendParameterTypes(method.getParameterTypes());
         returnType = method.getReturnType();
         exceptionTypes = method.getExceptionTypes();
         isVarArgs = method.isVarArgs();

File: src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java
Patch:
@@ -188,7 +188,7 @@ public void should_fail_if_argument_type_of_signature_is_incompatible_with_retur
     private static InvocationOnMock invocationWith(Object... parameters) {
         return new InvocationBuilder().method("varargsReturningString")
                                       .argTypes(Object[].class)
-                                      .args(parameters).toInvocation();
+                                      .args(new Object[] { parameters }).toInvocation(); // one vararg param (sic!)
     }
 
 }

File: src/main/java/org/mockito/ArgumentMatchers.java
Patch:
@@ -915,7 +915,7 @@ public static <T> T eq(T value) {
      * </p>
      *
      * <p>
-     * Works similarly to <code>EqualsBuilder.reflectionEquals(this, other, exlucdeFields)</code> from
+     * Works similarly to <code>EqualsBuilder.reflectionEquals(this, other, excludeFields)</code> from
      * apache commons library.
      * <p>
      * <b>Warning</b> The equality check is shallow!

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1050,7 +1050,7 @@
  * //convenience API, new overloaded spy() method:
  * SomeAbstract spy = spy(SomeAbstract.class);
  *
- * //Mocking abstract methods, spying default methods of an interface (only avilable since 2.7.13)
+ * //Mocking abstract methods, spying default methods of an interface (only available since 2.7.13)
  * Function<Foo, Bar> function = spy(Function.class);
  *
  * //Robust API, via settings builder:

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -646,7 +646,7 @@ public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
         return new FriendlyReminderException(join("",
                                                   "Don't panic! I'm just a friendly reminder!",
                                                   "timeout() should not be used with atMost() or never() because...",
-                                                  "...it does not make much sense - the test would have passed immediately in concurency",
+                                                  "...it does not make much sense - the test would have passed immediately in concurrency",
                                                   "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                   "In future release we will remove timeout(x).atMost(y) from the API.",
                                                   "If you want to find out more please refer to issue 235",

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -16,13 +16,13 @@
  * <p>
  * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}
  * <p>
- * Current version of Mockito mocks by deafult use {@link ReturnsEmptyValues}
+ * Current version of Mockito mocks by default use {@link ReturnsEmptyValues}
  * <ul>
  * <li>
  *  Returns appropriate primitive for primitive-returning methods
  * </li>
  * <li>
- *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)
+ *  Returns consistent values for primitive wrapper classes (e.g. int-returning method returns 0 <b>and</b> Integer-returning method returns 0, too)
  * </li>
  * <li>
  *  Returns empty collection for collection-returning methods (works for most commonly used collection types)

File: src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java
Patch:
@@ -84,7 +84,7 @@ public T fetchFrom(Thread thread) {
 
     /**
      * @param thread The thread for which to set a thread-local value.
-     * @return The value accociated with this thread.
+     * @return The value associated with this thread.
      */
     public T get(Thread thread) {
         return map.get(thread);

File: src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java
Patch:
@@ -29,7 +29,7 @@ public Object fieldInstance() {
     }
 
     /**
-     * Indicate wether the field was created during the process or not.
+     * Indicate whether the field was created during the process or not.
      *
      * @return <code>true</code> if created, <code>false</code> if the field did already hold an instance.
      */
@@ -38,7 +38,7 @@ public boolean fieldWasInitialized() {
     }
 
     /**
-     * Indicate wether the field was created using constructor args.
+     * Indicate whether the field was created using constructor args.
      *
      * @return <code>true</code> if field was created using constructor parameters.
      */

File: src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java
Patch:
@@ -43,7 +43,7 @@ public static Class<?> genericTypeOf(Class<?> rootClass, Class<?> targetBaseClas
                 return extractGeneric(match.getGenericSuperclass());
             }
             //check the interfaces (recursively)
-            Type genericInterface = findGenericInteface(match, targetBaseInterface);
+            Type genericInterface = findGenericInterface(match, targetBaseInterface);
             if (genericInterface != null) {
                 return extractGeneric(genericInterface);
             }
@@ -57,13 +57,13 @@ public static Class<?> genericTypeOf(Class<?> rootClass, Class<?> targetBaseClas
      * Finds generic interface implementation based on the source class and the target interface.
      * Returns null if not found. Recurses the interface hierarchy.
      */
-    private static Type findGenericInteface(Class<?> sourceClass, Class<?> targetBaseInterface) {
+    private static Type findGenericInterface(Class<?> sourceClass, Class<?> targetBaseInterface) {
         for (int i = 0; i < sourceClass.getInterfaces().length; i++) {
             Class<?> inter = sourceClass.getInterfaces()[i];
             if (inter == targetBaseInterface) {
                 return sourceClass.getGenericInterfaces()[0];
             } else {
-                Type deeper = findGenericInteface(inter, targetBaseInterface);
+                Type deeper = findGenericInterface(inter, targetBaseInterface);
                 if (deeper != null) {
                     return deeper;
                 }

File: src/test/java/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java
Patch:
@@ -74,7 +74,7 @@ public void should_print_if_method_has_not_been_stubbed() throws Exception {
     }
 
     @Test
-    public void should_print_stubbed_info_if_availbable() throws Exception {
+    public void should_print_stubbed_info_if_available() throws Exception {
         invocation.markStubbed(new StubInfoImpl(stubbedInvocation));
 
         listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, "whatever"));

File: src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java
Patch:
@@ -109,7 +109,7 @@ abstract class TheAbstract {
 
     private Method iAmNotAbstract() throws NoSuchMethodException {
         abstract class TheNotAbstract {
-            void iAmNotAbstract() {};
+            void iAmNotAbstract() {}
         }
         return TheNotAbstract.class.getDeclaredMethod("iAmNotAbstract");
     }

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java
Patch:
@@ -90,7 +90,7 @@ public static class ToManyAnnotations {
     }
 
     @Test
-    public void shouldScreamWhenMoreThanOneMockitoAnnotaton() {
+    public void shouldScreamWhenMoreThanOneMockitoAnnotation() {
         try {
             MockitoAnnotations.initMocks(new ToManyAnnotations());
             fail();

File: src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java
Patch:
@@ -20,7 +20,7 @@
 public class VerificationCollectorImplTest {
 
     @Test
-    public void should_not_throw_any_exceptions_when_verifications_are_succesful() {
+    public void should_not_throw_any_exceptions_when_verifications_are_successful() {
         VerificationCollector collector = MockitoJUnit.collector().assertLazily();
 
         IMethods methods = mock(IMethods.class);
@@ -58,7 +58,7 @@ public void should_collect_multiple_verification_failures() {
     }
 
     @Test
-    public void should_only_collect_failures_ignore_succesful_verifications() {
+    public void should_only_collect_failures_ignore_successful_verifications() {
         VerificationCollector collector = MockitoJUnit.collector().assertLazily();
 
         IMethods methods = mock(IMethods.class);

File: src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
Patch:
@@ -83,7 +83,7 @@ public void shouldNotAllowMockingFinalClassesIfDisabled() throws Exception {
     }
 
     @Test(expected=MockitoException.class)
-    public void shouldNotAllowMockingPrimitves() throws Exception {
+    public void shouldNotAllowMockingPrimitives() throws Exception {
         mock(Integer.TYPE);
     }
 

File: src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -40,23 +40,23 @@ public void shouldScreamWhenVerifyToString() {
 
     @Test
     public void shouldBeSilentWhenVerifyHashCode() {
-        //because it leads to really wierd behavior sometimes
+        //because it leads to really weird behavior sometimes
         //it's because cglib & my code can occasionelly call those methods
         // and when user has verification started at that time there will be a mess
         verify(mock).hashCode();
     }
 
     @Test
     public void shouldBeSilentWhenVerifyEquals() {
-        //because it leads to really wierd behavior sometimes
+        //because it leads to really weird behavior sometimes
         //it's because cglib & my code can occasionelly call those methods
         // and when user has verification started at that time there will be a mess
         verify(mock).equals(null);
     }
 
     @Test
     public void shouldBeSilentWhenVerifyEqualsInOrder() {
-        //because it leads to really wierd behavior sometimes
+        //because it leads to really weird behavior sometimes
         //it's because cglib & my code can occasionelly call those methods
         // and when user has verification started at that time there will be a mess
         InOrder inOrder = inOrder(mock);

File: src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java
Patch:
@@ -178,7 +178,7 @@ public void should_throw_consecutively_classes_set_by_shorten_then_throw_method(
     }
 
     @Test
-    public void should_mix_consecutive_returns_with_excepions() throws Exception {
+    public void should_mix_consecutive_returns_with_exceptions() throws Exception {
         when(mock.simpleMethod())
                 .thenThrow(new IllegalArgumentException())
                 .thenReturn("one")

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -66,7 +66,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
     }
 
     @Test
-    public void shoudAnswerVoidMethod() throws Exception {
+    public void shouldAnswerVoidMethod() throws Exception {
         RecordCall recordCall = new RecordCall();
 
         doAnswer(recordCall).when(mock).voidMethod();

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -31,7 +31,7 @@ public void shouldVerifyAtLeastXTimes() throws Exception {
     }
 
     @Test
-    public void shouldFailVerifiationAtLeastXTimes() throws Exception {
+    public void shouldFailVerificationAtLeastXTimes() throws Exception {
         mock.add("one");
         verify(mock, atLeast(1)).add(anyString());
 

File: src/test/java/org/mockitousage/verification/DelayedExecution.java
Patch:
@@ -37,7 +37,7 @@ public void close() throws InterruptedException {
         executor.shutdownNow();
 
         if (!executor.awaitTermination(5, SECONDS)) {
-            throw new IllegalStateException("This delayed excution did not terminated after 5 seconds");
+            throw new IllegalStateException("This delayed execution did not terminated after 5 seconds");
         }
     }
 

File: src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java
Patch:
@@ -24,7 +24,7 @@ public class FindingRedundantInvocationsInOrderTest extends TestBase {
     @Mock private IMethods mock2;
 
     @Test
-    public void shouldWorkFineIfNoInvocatins() throws Exception {
+    public void shouldWorkFineIfNoInvocations() throws Exception {
         //when
         InOrder inOrder = inOrder(mock);
 

File: src/main/java/org/mockito/ArgumentMatchers.java
Patch:
@@ -915,7 +915,7 @@ public static <T> T eq(T value) {
      * </p>
      *
      * <p>
-     * Works similarly to <code>EqualsBuilder.reflectionEquals(this, other, exlucdeFields)</code> from
+     * Works similarly to <code>EqualsBuilder.reflectionEquals(this, other, excludeFields)</code> from
      * apache commons library.
      * <p>
      * <b>Warning</b> The equality check is shallow!

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1050,7 +1050,7 @@
  * //convenience API, new overloaded spy() method:
  * SomeAbstract spy = spy(SomeAbstract.class);
  *
- * //Mocking abstract methods, spying default methods of an interface (only avilable since 2.7.13)
+ * //Mocking abstract methods, spying default methods of an interface (only available since 2.7.13)
  * Function<Foo, Bar> function = spy(Function.class);
  *
  * //Robust API, via settings builder:

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -646,7 +646,7 @@ public static MockitoException atMostAndNeverShouldNotBeUsedWithTimeout() {
         return new FriendlyReminderException(join("",
                                                   "Don't panic! I'm just a friendly reminder!",
                                                   "timeout() should not be used with atMost() or never() because...",
-                                                  "...it does not make much sense - the test would have passed immediately in concurency",
+                                                  "...it does not make much sense - the test would have passed immediately in concurrency",
                                                   "We kept this method only to avoid compilation errors when upgrading Mockito.",
                                                   "In future release we will remove timeout(x).atMost(y) from the API.",
                                                   "If you want to find out more please refer to issue 235",

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -16,13 +16,13 @@
  * <p>
  * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}
  * <p>
- * Current version of Mockito mocks by deafult use {@link ReturnsEmptyValues}
+ * Current version of Mockito mocks by default use {@link ReturnsEmptyValues}
  * <ul>
  * <li>
  *  Returns appropriate primitive for primitive-returning methods
  * </li>
  * <li>
- *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)
+ *  Returns consistent values for primitive wrapper classes (e.g. int-returning method returns 0 <b>and</b> Integer-returning method returns 0, too)
  * </li>
  * <li>
  *  Returns empty collection for collection-returning methods (works for most commonly used collection types)

File: src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java
Patch:
@@ -84,7 +84,7 @@ public T fetchFrom(Thread thread) {
 
     /**
      * @param thread The thread for which to set a thread-local value.
-     * @return The value accociated with this thread.
+     * @return The value associated with this thread.
      */
     public T get(Thread thread) {
         return map.get(thread);

File: src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java
Patch:
@@ -29,7 +29,7 @@ public Object fieldInstance() {
     }
 
     /**
-     * Indicate wether the field was created during the process or not.
+     * Indicate whether the field was created during the process or not.
      *
      * @return <code>true</code> if created, <code>false</code> if the field did already hold an instance.
      */
@@ -38,7 +38,7 @@ public boolean fieldWasInitialized() {
     }
 
     /**
-     * Indicate wether the field was created using constructor args.
+     * Indicate whether the field was created using constructor args.
      *
      * @return <code>true</code> if field was created using constructor parameters.
      */

File: src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java
Patch:
@@ -43,7 +43,7 @@ public static Class<?> genericTypeOf(Class<?> rootClass, Class<?> targetBaseClas
                 return extractGeneric(match.getGenericSuperclass());
             }
             //check the interfaces (recursively)
-            Type genericInterface = findGenericInteface(match, targetBaseInterface);
+            Type genericInterface = findGenericInterface(match, targetBaseInterface);
             if (genericInterface != null) {
                 return extractGeneric(genericInterface);
             }
@@ -57,13 +57,13 @@ public static Class<?> genericTypeOf(Class<?> rootClass, Class<?> targetBaseClas
      * Finds generic interface implementation based on the source class and the target interface.
      * Returns null if not found. Recurses the interface hierarchy.
      */
-    private static Type findGenericInteface(Class<?> sourceClass, Class<?> targetBaseInterface) {
+    private static Type findGenericInterface(Class<?> sourceClass, Class<?> targetBaseInterface) {
         for (int i = 0; i < sourceClass.getInterfaces().length; i++) {
             Class<?> inter = sourceClass.getInterfaces()[i];
             if (inter == targetBaseInterface) {
                 return sourceClass.getGenericInterfaces()[0];
             } else {
-                Type deeper = findGenericInteface(inter, targetBaseInterface);
+                Type deeper = findGenericInterface(inter, targetBaseInterface);
                 if (deeper != null) {
                     return deeper;
                 }

File: src/test/java/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java
Patch:
@@ -74,7 +74,7 @@ public void should_print_if_method_has_not_been_stubbed() throws Exception {
     }
 
     @Test
-    public void should_print_stubbed_info_if_availbable() throws Exception {
+    public void should_print_stubbed_info_if_available() throws Exception {
         invocation.markStubbed(new StubInfoImpl(stubbedInvocation));
 
         listener.reportInvocation(new NotifiedMethodInvocationReport(invocation, "whatever"));

File: src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java
Patch:
@@ -109,7 +109,7 @@ abstract class TheAbstract {
 
     private Method iAmNotAbstract() throws NoSuchMethodException {
         abstract class TheNotAbstract {
-            void iAmNotAbstract() {};
+            void iAmNotAbstract() {}
         }
         return TheNotAbstract.class.getDeclaredMethod("iAmNotAbstract");
     }

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java
Patch:
@@ -90,7 +90,7 @@ public static class ToManyAnnotations {
     }
 
     @Test
-    public void shouldScreamWhenMoreThanOneMockitoAnnotaton() {
+    public void shouldScreamWhenMoreThanOneMockitoAnnotation() {
         try {
             MockitoAnnotations.initMocks(new ToManyAnnotations());
             fail();

File: src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java
Patch:
@@ -20,7 +20,7 @@
 public class VerificationCollectorImplTest {
 
     @Test
-    public void should_not_throw_any_exceptions_when_verifications_are_succesful() {
+    public void should_not_throw_any_exceptions_when_verifications_are_successful() {
         VerificationCollector collector = MockitoJUnit.collector().assertLazily();
 
         IMethods methods = mock(IMethods.class);
@@ -58,7 +58,7 @@ public void should_collect_multiple_verification_failures() {
     }
 
     @Test
-    public void should_only_collect_failures_ignore_succesful_verifications() {
+    public void should_only_collect_failures_ignore_successful_verifications() {
         VerificationCollector collector = MockitoJUnit.collector().assertLazily();
 
         IMethods methods = mock(IMethods.class);

File: src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
Patch:
@@ -83,7 +83,7 @@ public void shouldNotAllowMockingFinalClassesIfDisabled() throws Exception {
     }
 
     @Test(expected=MockitoException.class)
-    public void shouldNotAllowMockingPrimitves() throws Exception {
+    public void shouldNotAllowMockingPrimitives() throws Exception {
         mock(Integer.TYPE);
     }
 

File: src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -40,23 +40,23 @@ public void shouldScreamWhenVerifyToString() {
 
     @Test
     public void shouldBeSilentWhenVerifyHashCode() {
-        //because it leads to really wierd behavior sometimes
+        //because it leads to really weird behavior sometimes
         //it's because cglib & my code can occasionelly call those methods
         // and when user has verification started at that time there will be a mess
         verify(mock).hashCode();
     }
 
     @Test
     public void shouldBeSilentWhenVerifyEquals() {
-        //because it leads to really wierd behavior sometimes
+        //because it leads to really weird behavior sometimes
         //it's because cglib & my code can occasionelly call those methods
         // and when user has verification started at that time there will be a mess
         verify(mock).equals(null);
     }
 
     @Test
     public void shouldBeSilentWhenVerifyEqualsInOrder() {
-        //because it leads to really wierd behavior sometimes
+        //because it leads to really weird behavior sometimes
         //it's because cglib & my code can occasionelly call those methods
         // and when user has verification started at that time there will be a mess
         InOrder inOrder = inOrder(mock);

File: src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java
Patch:
@@ -178,7 +178,7 @@ public void should_throw_consecutively_classes_set_by_shorten_then_throw_method(
     }
 
     @Test
-    public void should_mix_consecutive_returns_with_excepions() throws Exception {
+    public void should_mix_consecutive_returns_with_exceptions() throws Exception {
         when(mock.simpleMethod())
                 .thenThrow(new IllegalArgumentException())
                 .thenReturn("one")

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -66,7 +66,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
     }
 
     @Test
-    public void shoudAnswerVoidMethod() throws Exception {
+    public void shouldAnswerVoidMethod() throws Exception {
         RecordCall recordCall = new RecordCall();
 
         doAnswer(recordCall).when(mock).voidMethod();

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -31,7 +31,7 @@ public void shouldVerifyAtLeastXTimes() throws Exception {
     }
 
     @Test
-    public void shouldFailVerifiationAtLeastXTimes() throws Exception {
+    public void shouldFailVerificationAtLeastXTimes() throws Exception {
         mock.add("one");
         verify(mock, atLeast(1)).add(anyString());
 

File: src/test/java/org/mockitousage/verification/DelayedExecution.java
Patch:
@@ -37,7 +37,7 @@ public void close() throws InterruptedException {
         executor.shutdownNow();
 
         if (!executor.awaitTermination(5, SECONDS)) {
-            throw new IllegalStateException("This delayed excution did not terminated after 5 seconds");
+            throw new IllegalStateException("This delayed execution did not terminated after 5 seconds");
         }
     }
 

File: src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java
Patch:
@@ -24,7 +24,7 @@ public class FindingRedundantInvocationsInOrderTest extends TestBase {
     @Mock private IMethods mock2;
 
     @Test
-    public void shouldWorkFineIfNoInvocatins() throws Exception {
+    public void shouldWorkFineIfNoInvocations() throws Exception {
         //when
         InOrder inOrder = inOrder(mock);
 

File: src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java
Patch:
@@ -65,6 +65,6 @@ private static boolean isMatchesMethod(Method method) {
         if (method.isBridge()) {
             return false;
         }
-        return method.getName().equals("matches");
+        return "matches".equals(method.getName());
     }
 }

File: src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java
Patch:
@@ -25,7 +25,7 @@ public class UnnecessaryStubbingsReporter implements MockCreationListener {
 
     public void validateUnusedStubs(Class<?> testClass, RunNotifier notifier) {
         Collection<Invocation> unused = new UnusedStubbingsFinder().getUnusedStubbingsByLocation(mocks);
-        if (unused.size() == 0) {
+        if (unused.isEmpty()) {
             return; //whoa!!! All stubbings were used!
         }
 

File: src/main/java/org/mockito/internal/junit/UnusedStubbings.java
Patch:
@@ -48,7 +48,7 @@ public String toString() {
     }
 
     public void reportUnused() {
-        if (unused.size() > 0) {
+        if (!unused.isEmpty()) {
             List<Invocation> invocations = ListUtil.convert(unused, (ListUtil.Converter) new ListUtil.Converter<Stubbing, Invocation>() {
                 public Invocation convert(Stubbing s) {
                     return s.getInvocation();

File: src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java
Patch:
@@ -17,12 +17,12 @@ public static boolean isToStringMethod(Method method) {
         MockitoMethod m = new DelegatingMethod(method);
         return m.getReturnType() == String.class &&
                m.getParameterTypes().length == 0 &&
-               m.getName().equals("toString");
+               "toString".equals(m.getName());
     }
 
     public static boolean isCompareToMethod(Method method) {
         return Comparable.class.isAssignableFrom(method.getDeclaringClass())
-                && method.getName().equals("compareTo")
+                && "compareTo".equals(method.getName())
                 && method.getParameterTypes().length == 1
                 && method.getParameterTypes()[0] == method.getDeclaringClass();
     }

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -24,11 +24,11 @@ public void verify(VerificationData data) {
         MatchableInvocation target = data.getTarget();
         List<Invocation> invocations = data.getAllInvocations();
         List<Invocation> chunk = findInvocations(invocations,target);
-        if (invocations.size() != 1 && chunk.size() > 0) {
+        if (invocations.size() != 1 && !chunk.isEmpty()) {
             Invocation unverified = findFirstUnverified(invocations);
             throw noMoreInteractionsWanted(unverified, (List) invocations);
         }
-        if (invocations.size() != 1 || chunk.size() == 0) {
+        if (invocations.size() != 1 || chunk.isEmpty()) {
             throw wantedButNotInvoked(target);
         }
         markVerified(chunk.get(0), target);

File: src/test/java/org/mockito/internal/invocation/TypeSafeMatchingTest.java
Patch:
@@ -34,7 +34,7 @@ public class TypeSafeMatchingTest {
     /**
      * Should not throw an {@link NullPointerException}
      *
-     * @see Bug-ID https://github.com/mockito/mockito/issues/457
+     * @see <a href="https://github.com/mockito/mockito/issues/457">Bug 457</a>
      */
     @Test
     public void compareNullArgument() {

File: src/test/java/org/mockitousage/bugs/CompareMatcherTest.java
Patch:
@@ -32,7 +32,7 @@ public class CompareMatcherTest {
     /**
      * Should not throw an {@link NullPointerException}
      *
-     * @see Bug-ID https://github.com/mockito/mockito/issues/457
+     * @see <a href="https://github.com/mockito/mockito/issues/457">Bug 457</a>
      */
     @Test
     public void compareNullArgument() {

File: src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java
Patch:
@@ -109,10 +109,10 @@ public static class UsesFrameworkIncorrectly {
         }
     }
 
-    @RunWith(MockitoJUnitRunner.Silent.class)
     /**
      * The test class itself is passing but it has some unnecessary stubs
      */
+    @RunWith(MockitoJUnitRunner.Silent.class)
     public static class HasUnnecessaryStubs {
         IMethods mock1 = when(mock(IMethods.class).simpleMethod(1)).thenReturn("1").getMock();
         IMethods mock2 = when(mock(IMethods.class).simpleMethod(2)).thenReturn("2").getMock();

File: src/test/java/org/mockitousage/matchers/VarargsTest.java
Patch:
@@ -309,8 +309,6 @@ public void shouldNotCaptureVarArgs_1args2captures() {
      * <li>#565 ArgumentCaptor should be type aware' are fixed this test must
      * succeed
      * </ul>
-     *
-     * @throws Exception
      */
     @Test
     @Ignore("Blocked by github issue: #584 & #565")

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1821,7 +1821,7 @@ public static <T> T spy(T object) {
      * This method, in contrast to the original {@link #spy(Object)}, creates a spy based on class instead of an object.
      * Sometimes it is more convenient to create spy based on the class and avoid providing an instance of a spied object.
      * This is particularly useful for spying on abstract classes because they cannot be instantiated.
-     * See also {@link MockSettings#useConstructor()}.
+     * See also {@link MockSettings#useConstructor(Object...)}.
      * <p>
      * Examples:
      * <pre class="code"><code class="java">

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1821,7 +1821,7 @@ public static <T> T spy(T object) {
      * This method, in contrast to the original {@link #spy(Object)}, creates a spy based on class instead of an object.
      * Sometimes it is more convenient to create spy based on the class and avoid providing an instance of a spied object.
      * This is particularly useful for spying on abstract classes because they cannot be instantiated.
-     * See also {@link MockSettings#useConstructor()}.
+     * See also {@link MockSettings#useConstructor(Object...)}.
      * <p>
      * Examples:
      * <pre class="code"><code class="java">

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1354,7 +1354,7 @@
  * To quickly find out how "stricter" Mockito can make you more productive and get your tests cleaner, see:
  * <ul>
  *     <li>Strict stubbing with JUnit Rules - {@link MockitoRule#strictness(Strictness)} with {@link Strictness#STRICT_STUBS}</li>
- *     <li>Strict stubbing with JUnit Runner - {@link MockitoJUnitRunner.StrictStubs}</li>
+ *     <li>Strict stubbing with JUnit Runner - {@link MockitoJUnitRunner.StrictStubs.class}</li>
  *     <li>Strict stubbing if you cannot use runner/rule (like TestNG) - {@link MockitoSession}</li>
  *     <li>Unnecessary stubbing detection with {@link MockitoJUnitRunner}</li>
  *     <li>Stubbing argument mismatch warnings, documented in {@link MockitoHint}</li>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1319,7 +1319,7 @@
  * To quickly find out how "stricter" Mockito can make you more productive and get your tests cleaner, see:
  * <ul>
  *     <li>Strict stubbing with JUnit Rules - {@link MockitoRule#strictness(Strictness)} with {@link Strictness#STRICT_STUBS}</li>
- *     <li>Strict stubbing with JUnit Runner - {@link MockitoJUnitRunner.StrictStubs}</li>
+ *     <li>Strict stubbing with JUnit Runner - {@link MockitoJUnitRunner.StrictStubs.class}</li>
  *     <li>Strict stubbing if you cannot use runner/rule (like TestNG) - {@link MockitoSession}</li>
  *     <li>Unnecessary stubbing detection with {@link MockitoJUnitRunner}</li>
  *     <li>Stubbing argument mismatch warnings, documented in {@link MockitoHint}</li>

File: src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java
Patch:
@@ -42,14 +42,15 @@ public InterceptedInvocation(Object mock,
                                  MockitoMethod mockitoMethod,
                                  Object[] arguments,
                                  SuperMethod superMethod,
+                                 Location location,
                                  int sequenceNumber) {
         this.mock = mock;
         this.mockitoMethod = mockitoMethod;
         this.arguments = ArgumentsProcessor.expandVarArgs(mockitoMethod.isVarArgs(), arguments);
         this.rawArguments = arguments;
         this.superMethod = superMethod;
+        this.location = location;
         this.sequenceNumber = sequenceNumber;
-        location = new LocationImpl();
     }
 
     @Override

File: src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java
Patch:
@@ -12,8 +12,8 @@ public class DefaultInstantiatorProvider implements InstantiatorProvider {
     private final static Instantiator INSTANCE = new ObjenesisInstantiator();
 
     public Instantiator getInstantiator(MockCreationSettings<?> settings) {
-        if (settings != null && settings.isUsingConstructor()) {
-            return new ConstructorInstantiator(settings.getOuterClassInstance());
+        if (settings != null && settings.getConstructorArgs() != null) {
+            return new ConstructorInstantiator(settings.getOuterClassInstance() != null, settings.getConstructorArgs());
         } else {
             return INSTANCE;
         }

File: src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java
Patch:
@@ -12,8 +12,8 @@ public class DefaultInstantiatorProvider implements InstantiatorProvider {
     private final static Instantiator INSTANCE = new ObjenesisInstantiator();
 
     public Instantiator getInstantiator(MockCreationSettings<?> settings) {
-        if (settings != null && settings.isUsingConstructor()) {
-            return new ConstructorInstantiator(settings.getOuterClassInstance());
+        if (settings != null && settings.getConstructorArgs() != null) {
+            return new ConstructorInstantiator(settings.getOuterClassInstance() != null, settings.getConstructorArgs());
         } else {
             return INSTANCE;
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -71,7 +71,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
                          .implement(new ArrayList<Type>(features.interfaces))
                          .method(matcher)
                            .intercept(to(DispatcherDefaultingToRealMethod.class))
-                           .transform(withModifiers(SynchronizationState.PLAIN, Visibility.PUBLIC))
+                           .transform(withModifiers(SynchronizationState.PLAIN))
                            .attribute(INCLUDING_RECEIVER)
                          .method(isHashCode())
                            .intercept(to(MockMethodInterceptor.ForHashCode.class))

File: src/main/java/org/mockito/internal/util/Platform.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import static org.mockito.internal.util.StringJoiner.join;
+import static org.mockito.internal.util.StringUtil.join;
 
 public abstract class Platform {
 

File: subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.plugins.MockMaker;
 
-import static org.mockito.internal.util.StringJoiner.join;
+import static org.mockito.internal.util.StringUtil.join;
 
 public class AndroidByteBuddyMockMaker implements MockMaker {
 

File: src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java
Patch:
@@ -17,13 +17,13 @@ public class DoesNothing implements Answer<Object>, ValidableAnswer, Serializabl
     private static final long serialVersionUID = 4840880517740698416L;
 
     private static final DoesNothing SINGLETON = new DoesNothing();
-    
+
     private DoesNothing() {}
-    
+
     public static DoesNothing doesNothing(){
         return SINGLETON;
     }
-    
+
     @Override
     public Object answer(InvocationOnMock invocation){
         return null;

File: src/test/java/org/mockitousage/IMethods.java
Patch:
@@ -187,7 +187,7 @@ public interface IMethods {
     String toString(String foo);
 
     void voidMethod();
-    
+
     Void voidReturningMethod();
 
     String forList(List<String> list);

File: src/main/java/org/mockito/junit/MockitoRule.java
Patch:
@@ -53,7 +53,7 @@
  * public class ExampleTest {
  *
  *     //Creating new rule with recommended Strictness setting
- *     &#064;Rule public MockitoRule rule = MockitoJUnit.strictness(Strictness.STRICT_STUBS).rule();
+ *     &#064;Rule public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
  *
  *     &#064;Mock
  *     private List list;

File: src/main/java/org/mockito/junit/MockitoRule.java
Patch:
@@ -53,7 +53,7 @@
  * public class ExampleTest {
  *
  *     //Creating new rule with recommended Strictness setting
- *     &#064;Rule public MockitoRule rule = MockitoJUnit.strictness(Strictness.STRICT_STUBS).rule();
+ *     &#064;Rule public MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
  *
  *     &#064;Mock
  *     private List list;

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -73,7 +73,8 @@ public InternalRunner create(Class<?> klass, Supplier<MockitoTestListener> liste
                     "\n" +
                     "\n" +
                     "No tests found in " + klass.getSimpleName() + "\n" +
-                    "Haven't you forgot @Test annotation?\n"
+                    "Is the method annotated with @Test?\n" +
+                    "Is the method public?\n"
                     , e);
             }
             throw e;

File: src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import static java.util.Arrays.asList;
 import static org.junit.Assert.assertEquals;
+import static org.mockito.internal.stubbing.answers.DoesNothing.doesNothing;
 
 public class UnusedStubbingsTest extends TestBase {
 
@@ -32,8 +33,8 @@ public void no_unused_stubbings() throws Exception {
     public void unused_stubbings() throws Exception {
         //given
         UnusedStubbings stubbings = new UnusedStubbings((List) asList(
-            new StubbedInvocationMatcher(new InvocationBuilder().toInvocationMatcher(), new DoesNothing()),
-            new StubbedInvocationMatcher(new InvocationBuilder().toInvocationMatcher(), new DoesNothing())
+            new StubbedInvocationMatcher(new InvocationBuilder().toInvocationMatcher(), doesNothing()),
+            new StubbedInvocationMatcher(new InvocationBuilder().toInvocationMatcher(), doesNothing())
         ));
 
 

File: src/test/java/org/mockitousage/IMethods.java
Patch:
@@ -187,6 +187,8 @@ public interface IMethods {
     String toString(String foo);
 
     void voidMethod();
+    
+    Void voidReturningMethod();
 
     String forList(List<String> list);
 

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -56,7 +56,7 @@ public void resetState() {
         new StateMaster().reset();
     }
 
-    protected Invocation getLastInvocation() {
+    public static Invocation getLastInvocation() {
         return new MockitoCore().getLastInvocation();
     }
 

File: src/main/java/org/mockito/Answers.java
Patch:
@@ -98,5 +98,5 @@ public Answer<Object> get() {
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return implementation.answer(invocation);
-    } 
-}
\ No newline at end of file
+    }
+}

File: src/main/java/org/mockito/Mock.java
Patch:
@@ -71,6 +71,6 @@
     String name() default "";
 
     Class<?>[] extraInterfaces() default {};
-    
+
     boolean serializable() default false;
 }

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -19,7 +19,7 @@
  * @since 1.9.5
  */
 public interface MockingDetails {
-    
+
     /**
      * Informs if the object is a mock. isMock() for null input returns false.
      * @return true if the object is a mock or a spy (spy is a different kind of mock, but it is still a mock).
@@ -35,7 +35,7 @@ public interface MockingDetails {
      * @since 1.9.5
      */
     boolean isSpy();
-    
+
     /**
      * All method invocations on this mock.
      * Can be empty - it means there were no interactions with the mock.

File: src/main/java/org/mockito/MockitoDebugger.java
Patch:
@@ -15,4 +15,4 @@ public interface MockitoDebugger {
      */
     @Deprecated
     String printInvocations(Object ... mocks);
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java
Patch:
@@ -20,7 +20,7 @@ public class DefaultMockitoConfiguration implements IMockitoConfiguration {
     public Answer<Object> getDefaultAnswer() {
         return new ReturnsEmptyValues();
     }
-    
+
     /* (non-Javadoc)
      * @see org.mockito.IMockitoConfiguration#getAnnotationEngine()
      */
@@ -41,6 +41,6 @@ public boolean cleansStackTrace() {
     public boolean enableClassCache() {
         return true;
     }
-    
-    
+
+
 }

File: src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -30,11 +30,11 @@ public MockitoAssertionError(String message) {
         super(message);
 
         unfilteredStackTrace = getStackTrace();
-        
+
         ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();
         filter.filter(this);
     }
-    
+
     /**
      * Creates a copy of the given assertion error with the custom failure message prepended.
      * @param error The assertion error to copy
@@ -50,4 +50,4 @@ public MockitoAssertionError(MockitoAssertionError error, String message) {
     public StackTraceElement[] getUnfilteredStackTrace() {
         return unfilteredStackTrace;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/base/MockitoException.java
Patch:
@@ -39,7 +39,7 @@ public MockitoException(String message) {
 
     private void filterStackTrace() {
         unfilteredStackTrace = getStackTrace();
-        
+
         ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();
         filter.filter(this);
     }

File: src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java
Patch:
@@ -16,4 +16,4 @@ public MockitoInitializationException(String message) {
     public MockitoInitializationException(String message, Throwable cause) {
         super(message, cause);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/misusing/FriendlyReminderException.java
Patch:
@@ -14,4 +14,4 @@ public class FriendlyReminderException extends MockitoException {
     public FriendlyReminderException(String message) {
         super(message);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java
Patch:
@@ -18,4 +18,4 @@ public InvalidUseOfMatchersException(String message) {
     public InvalidUseOfMatchersException() {
         super("");
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/misusing/MockitoConfigurationException.java
Patch:
@@ -17,4 +17,4 @@ public MockitoConfigurationException(String message) {
     public MockitoConfigurationException(String message, Exception cause) {
         super(message, cause);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/misusing/UnfinishedVerificationException.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.exceptions.base.MockitoException;
 
 public class UnfinishedVerificationException extends MockitoException {
-    
+
     private static final long serialVersionUID = 1L;
 
     public UnfinishedVerificationException(String message) {

File: src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java
Patch:
@@ -16,9 +16,9 @@ public class ArgumentsAreDifferent extends MockitoAssertionError {
     public ArgumentsAreDifferent(String message) {
         super(message);
     }
-    
+
     @Override
     public String toString() {
         return removeFirstLine(super.toString());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/verification/NoInteractionsWanted.java
Patch:
@@ -17,4 +17,4 @@ public class NoInteractionsWanted extends MockitoAssertionError {
     public NoInteractionsWanted(String message) {
         super(message);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/verification/SmartNullPointerException.java
Patch:
@@ -13,4 +13,4 @@ public class SmartNullPointerException extends MockitoException {
     public SmartNullPointerException(String message) {
         super(message);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/exceptions/verification/TooLittleActualInvocations.java
Patch:
@@ -10,7 +10,7 @@
 public class TooLittleActualInvocations extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
-    
+
     public TooLittleActualInvocations(String message) {
         super(message);
     }

File: src/main/java/org/mockito/exceptions/verification/WantedButNotInvoked.java
Patch:
@@ -16,9 +16,9 @@ public class WantedButNotInvoked extends MockitoAssertionError {
     public WantedButNotInvoked(String message) {
         super(message);
     }
-    
+
     @Override
     public String toString() {
         return removeFirstLine(super.toString());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/InOrderImpl.java
Patch:
@@ -26,11 +26,11 @@
  * Allows verifying in order. This class should not be exposed, hence default access.
  */
 public class InOrderImpl implements InOrder, InOrderContext {
-    
+
     private final MockitoCore mockitoCore = new MockitoCore();
     private final List<Object> mocksToBeVerifiedInOrder = new LinkedList<Object>();
     private final InOrderContext inOrderContext = new InOrderContextImpl();
-    
+
     public List<Object> getMocksToBeVerifiedInOrder() {
         return mocksToBeVerifiedInOrder;
     }
@@ -42,7 +42,7 @@ public InOrderImpl(List<? extends Object> mocksToBeVerifiedInOrder) {
     public <T> T verify(T mock) {
         return this.verify(mock, VerificationModeFactory.times(1));
     }
-    
+
     public <T> T verify(T mock, VerificationMode mode) {
         if (!mocksToBeVerifiedInOrder.contains(mock)) {
             throw inOrderRequiresFamiliarMock();

File: src/main/java/org/mockito/internal/InternalMockHandler.java
Patch:
@@ -19,4 +19,4 @@ public interface InternalMockHandler<T> extends MockHandler {
 
     InvocationContainer getInvocationContainer();
 
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/MockitoCore.java
Patch:
@@ -171,7 +171,7 @@ public void validateMockitoUsage() {
 
     /**
      * For testing purposes only. Is not the part of main API.
-     * 
+     *
      * @return last invocation
      */
     public Invocation getLastInvocation() {

File: src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class GlobalConfiguration implements IMockitoConfiguration, Serializable {
     private static final long serialVersionUID = -2860353062105505938L;
-    
+
     private static final ThreadLocal<IMockitoConfiguration> GLOBAL_CONFIGURATION = new ThreadLocal<IMockitoConfiguration>();
 
     //back door for testing
@@ -62,7 +62,7 @@ public org.mockito.plugins.AnnotationEngine tryGetPluginAnnotationEngine() {
     public boolean cleansStackTrace() {
         return GLOBAL_CONFIGURATION.get().cleansStackTrace();
     }
-    
+
     public boolean enableClassCache() {
         return GLOBAL_CONFIGURATION.get().enableClassCache();
     }

File: src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -68,22 +68,22 @@ private void processIndependentAnnotations(final Class<?> clazz, final Object te
      * &#064;InjectMocks for given testClassInstance.
      * <p>
      * See examples in javadoc for {@link MockitoAnnotations} class.
-     * 
+     *
      * @param testClassInstance
      *            Test class, usually <code>this</code>
      */
     public void injectMocks(final Object testClassInstance) {
         Class<?> clazz = testClassInstance.getClass();
         Set<Field> mockDependentFields = new HashSet<Field>();
         Set<Object> mocks = newMockSafeHashSet();
-        
+
         while (clazz != Object.class) {
             new InjectMocksScanner(clazz).addTo(mockDependentFields);
             new MockScanner(testClassInstance, clazz).addPreparedMocks(mocks);
             onInjection(testClassInstance, clazz, mockDependentFields, mocks);
             clazz = clazz.getSuperclass();
         }
-        
+
         new DefaultInjectionEngine().injectMocksOnFields(mockDependentFields, mocks, testClassInstance);
     }
 

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -113,7 +113,7 @@ private static Object spyNewInstance(Object testInstance, Field field)
             return Mockito.mock(type, settings.useConstructor()
                                               .outerInstance(testInstance));
         }
-        
+
         Constructor<?> constructor = noArgConstructorOf(type);
         if (Modifier.isPrivate(constructor.getModifiers())) {
             constructor.setAccessible(true);

File: src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java
Patch:
@@ -67,7 +67,7 @@ private Set<Object> scan() {
     private Object preparedMock(Object instance, Field field) {
         if (isAnnotatedByMockOrSpy(field)) {
             return instance;
-        } 
+        }
         if (isMockOrSpy(instance)) {
             MockUtil.maybeRedefineMockName(instance, field.getName());
             return instance;

File: src/main/java/org/mockito/internal/creation/DelegatingMethod.java
Patch:
@@ -67,4 +67,4 @@ public boolean equals(Object o) {
     public int hashCode() {
         return method.hashCode();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java
Patch:
@@ -46,7 +46,7 @@ private static <T> T invokeConstructor(Constructor<?> constructor, Object... par
         accessibility.enableAccess(constructor);
         return (T) constructor.newInstance(params);
     }
-    
+
     private static <T> InstantiationException paramsException(Class<T> cls, Exception cause) {
         return new InstantiationException(
                 join("Unable to create instance of '" + cls.getSimpleName() + "'.",

File: src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java
Patch:
@@ -18,4 +18,4 @@ public Instantiator getInstantiator(MockCreationSettings<?> settings) {
             return INSTANCE;
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/creation/util/MockitoMethodProxy.java
Patch:
@@ -7,4 +7,4 @@
 //TODO SF Replace with RealMethod and get rid of (possibly).
 public interface MockitoMethodProxy {
     Object invokeSuper(Object target, Object[] arguments);
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/debugging/Localized.java
Patch:
@@ -24,4 +24,4 @@ public T getObject() {
     public Location getLocation() {
         return location;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/debugging/LoggingListener.java
Patch:
@@ -86,4 +86,4 @@ private void addOrderedList(List<String> target, List<String> additions) {
             target.add("[Mockito] " + a);
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java
Patch:
@@ -42,7 +42,7 @@ public String printInvocations(Object ... mocks) {
         out += line("********************************");
         out += line("***       Unused stubs       ***");
         out += line("********************************");
-        
+
         for(Invocation i:invocations) {
             out += line(i.toString());
             out += line(" stubbed: " + i.getLocation());
@@ -58,4 +58,4 @@ private String print(String out) {
         System.out.println(out);
         return out;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -14,7 +14,7 @@
 
 @Deprecated
 public class WarningsCollector {
-   
+
     private final List<Object> createdMocks;
 
     public WarningsCollector() {
@@ -28,4 +28,4 @@ public String getWarnings() {
 
         return new WarningsPrinterImpl(unused, allInvocationMatchers, false).print();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/debugging/WarningsFinder.java
Patch:
@@ -19,7 +19,7 @@ public WarningsFinder(List<Invocation> unusedStubs, List<InvocationMatcher> allI
         this.baseUnusedStubs = unusedStubs;
         this.baseAllInvocations = allInvocations;
     }
-    
+
     public void find(FindingsListener findingsListener) {
         List<Invocation> unusedStubs = new LinkedList<Invocation>(this.baseUnusedStubs);
         List<InvocationMatcher> allInvocations = new LinkedList<InvocationMatcher>(this.baseAllInvocations);

File: src/main/java/org/mockito/internal/debugging/WarningsPrinterImpl.java
Patch:
@@ -28,4 +28,4 @@ public String print() {
         finder.find(listener);
         return listener.getStubbingInfo();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/exceptions/VerificationAwareInvocation.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.invocation.DescribedInvocation;
 
 public interface VerificationAwareInvocation extends DescribedInvocation {
-    
+
     boolean isVerified();
-    
-}
\ No newline at end of file
+
+}

File: src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -12,15 +12,15 @@
 
 public class ConditionalStackTraceFilter implements Serializable {
     private static final long serialVersionUID = -8085849703510292641L;
-    
+
     private final IMockitoConfiguration config = new GlobalConfiguration();
     private final StackTraceFilter filter = new StackTraceFilter();
-    
+
     public void filter(Throwable throwable) {
         if (!config.cleansStackTrace()) {
             return;
         }
         StackTraceElement[] filtered = filter.filter(throwable.getStackTrace(), true);
         throwable.setStackTrace(filtered);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java
Patch:
@@ -15,4 +15,4 @@ public class DefaultStackTraceCleanerProvider implements StackTraceCleanerProvid
     public StackTraceCleaner getStackTraceCleaner(StackTraceCleaner defaultCleaner) {
         return defaultCleaner;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -37,4 +37,4 @@ public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         StackTraceElement[] result = new StackTraceElement[filtered.size()];
         return filtered.toArray(result);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/exceptions/util/ScenarioPrinter.java
Patch:
@@ -17,7 +17,7 @@ public String print(List<VerificationAwareInvocation> invocations) {
         StringBuilder sb = new StringBuilder(
                 "***\n" +
                 "For your reference, here is the list of all invocations ([?] - means unverified).\n");
-        
+
         int counter = 0;
         for (VerificationAwareInvocation i : invocations) {
             sb.append(++counter).append(". ");

File: src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java
Patch:
@@ -24,4 +24,4 @@ public String toString() {
         //TODO SF add unit tests and integ test coverage for describeTo()
         return StringDescription.toString(matcher);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java
Patch:
@@ -22,4 +22,4 @@ public static Class<?> genericTypeOfMatcher(Class<?> matcherClass) {
         //TODO SF check if we can reuse it for Mockito ArgumentMatcher
         return genericTypeOf(matcherClass, BaseMatcher.class, Matcher.class);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -42,7 +42,7 @@ public class MockHandlerImpl<T> implements InternalMockHandler<T> {
 
     public MockHandlerImpl(MockCreationSettings<T> mockSettings) {
         this.mockSettings = mockSettings;
-       
+
         this.matchersBinder = new MatchersBinder();
         this.invocationContainerImpl = new InvocationContainerImpl( mockSettings);
     }

File: src/main/java/org/mockito/internal/invocation/ArgumentMatcherAction.java
Patch:
@@ -13,7 +13,7 @@ public interface ArgumentMatcherAction {
      * if not. In this case no more matchers and arguments will be passed by
      * {@link MatcherApplicationStrategy#forEachMatcherAndArgument(ArgumentMatcherAction)} to this method.
      * .
-     * 
+     *
      * @param matcher
      *            to process the argument, never <code>null</code>
      * @param argument
@@ -25,8 +25,8 @@ public interface ArgumentMatcherAction {
      *         argument should be passed
      *         <li><code>false</code> otherwise
      *         </ul>
-     * 
-     * 
+     *
+     *
      */
     boolean apply(ArgumentMatcher<?> matcher, Object argument);
 }

File: src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java
Patch:
@@ -36,7 +36,7 @@ public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] arg
         System.arraycopy(varArgs, 0, newArgs, nonVarArgsCount, varArgsCount);
         return newArgs;
     }
-    
+
     private static <T> boolean isNullOrEmpty(T[] array) {
         return array == null || array.length == 0;
     }
@@ -52,6 +52,6 @@ public static List<ArgumentMatcher> argumentsToMatchers(Object[] arguments) {
         }
         return matchers;
     }
-    
-    
+
+
 }

File: src/main/java/org/mockito/internal/invocation/InvocationComparator.java
Patch:
@@ -15,4 +15,4 @@ public class InvocationComparator implements Comparator<Invocation> {
     public int compare(Invocation o1, Invocation o2) {
         return Integer.valueOf(o1.getSequenceNumber()).compareTo(o2.getSequenceNumber());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/invocation/InvocationMarker.java
Patch:
@@ -13,7 +13,7 @@
 public class InvocationMarker {
 
     private InvocationMarker(){}
-	
+
     public static void markVerified(List<Invocation> invocations, MatchableInvocation wanted) {
         for (Invocation invocation : invocations) {
             markVerified(invocation, wanted);
@@ -32,4 +32,4 @@ public static void markVerifiedInOrder(List<Invocation> chunk, MatchableInvocati
             context.markVerified(i);
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/invocation/StubInfoImpl.java
Patch:
@@ -21,4 +21,4 @@ public StubInfoImpl(DescribedInvocation stubbedAt) {
     public Location stubbedAt() {
         return stubbedAt.getLocation();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -17,7 +17,7 @@ public class UnusedStubsFinder {
 
     /**
      * Finds all unused stubs for given mocks
-     * 
+     *
      * @param mocks full list of mocks
      */
     public List<Invocation> find(List<?> mocks) {
@@ -33,4 +33,4 @@ public List<Invocation> find(List<?> mocks) {
         }
         return unused;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/invocation/realmethod/CleanTraceRealMethod.java
Patch:
@@ -33,4 +33,4 @@ public Object invoke(Object target, Object[] arguments) throws Throwable {
             throw t;
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/DefaultTestFinishedEvent.java
Patch:
@@ -22,4 +22,4 @@ public Object getTestClassInstance() {
     public String getTestMethodName() {
         return testMethodName;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/JUnitRule.java
Patch:
@@ -77,4 +77,4 @@ public MockitoRule strictness(Strictness strictness) {
         this.listener.setStrictness(strictness);
         return this;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/JUnitTool.java
Patch:
@@ -15,4 +15,4 @@ public static boolean hasJUnit() {
     public static AssertionError createArgumentsAreDifferentException(String message, String wanted, String actual)  {
         return new FriendlyExceptionMaker(detecter).createArgumentsAreDifferentException(message, wanted, actual);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java
Patch:
@@ -36,4 +36,4 @@ public void testFinished(TestFinishedEvent event) {
     public void onMockCreated(Object mock, MockCreationSettings settings) {
         this.mocks.add(mock);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/MockitoTestListener.java
Patch:
@@ -9,4 +9,4 @@
  */
 public interface MockitoTestListener extends MockCreationListener {
     void testFinished(TestFinishedEvent event);
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/StrictStubsRunnerTestListener.java
Patch:
@@ -22,4 +22,4 @@ public void onMockCreated(Object mock, MockCreationSettings settings) {
         //TODO #793 - when completed, we should be able to get rid of the CreationSettings casting below
         ((CreationSettings) settings).getStubbingLookupListeners().add(stubbingLookupListener);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/UniversalTestListener.java
Patch:
@@ -82,4 +82,4 @@ public void setStrictness(Strictness strictness) {
         this.currentStrictness = strictness;
         this.stubbingLookupListener.setCurrentStrictness(strictness);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java
Patch:
@@ -27,7 +27,7 @@ public void appendWarnings(Failure failure, String warnings) {
     }
 
     private boolean isEmpty(String warnings) {
-        return warnings == null || "".equals(warnings); // isEmpty() is in JDK 6+ 
+        return warnings == null || "".equals(warnings); // isEmpty() is in JDK 6+
     }
 
     private static Object getInternalState(Object target, String field) {

File: src/main/java/org/mockito/internal/matchers/And.java
Patch:
@@ -26,4 +26,4 @@ public boolean matches(Object actual) {
     public String toString() {
         return "and("+m1+", "+m2+")";
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/CompareTo.java
Patch:
@@ -21,10 +21,10 @@ public final boolean matches(T actual) {
         if (actual == null) {
             return false;
         }
-        if (!actual.getClass().isInstance(wanted)){ 
+        if (!actual.getClass().isInstance(wanted)){
             return false;
         }
-       
+
         int result = actual.compareTo(wanted);
         return matchResult(result);
     }

File: src/main/java/org/mockito/internal/matchers/ContainsExtraTypeInfo.java
Patch:
@@ -23,4 +23,4 @@ public interface ContainsExtraTypeInfo {
      * If the type matches, there is no point in rendering result from {@link #toStringWithType()}
      */
     boolean typeMatches(Object target);
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -24,4 +24,4 @@ public boolean matches(String actual) {
     public String toString() {
         return "endsWith(\"" + suffix + "\")";
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/Equality.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.lang.reflect.Array;
 
-//stolen from hamcrest because I didn't want to have more dependency than Matcher class 
+//stolen from hamcrest because I didn't want to have more dependency than Matcher class
 public class Equality {
 
     public static boolean areEqual(Object o1, Object o2) {
@@ -40,4 +40,4 @@ static boolean areArrayElementsEqual(Object o1, Object o2) {
     static boolean isArray(Object o) {
         return o.getClass().isArray();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/Equals.java
Patch:
@@ -55,4 +55,4 @@ public String toStringWithType() {
     public boolean typeMatches(Object target) {
         return wanted != null && target != null && target.getClass() == wanted.getClass();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/Find.java
Patch:
@@ -25,4 +25,4 @@ public boolean matches(String actual) {
     public String toString() {
         return "find(\"" + regex.replaceAll("\\\\", "\\\\\\\\") + "\")";
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/GreaterThan.java
Patch:
@@ -21,5 +21,5 @@ protected String getName() {
     @Override
     protected boolean matchResult(int result) {
         return result > 0;
-    }    
+    }
 }

File: src/main/java/org/mockito/internal/matchers/LocalizedMatcher.java
Patch:
@@ -26,4 +26,4 @@ public Location getLocation() {
     public ArgumentMatcher<?> getMatcher() {
         return matcher;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/Not.java
Patch:
@@ -25,4 +25,4 @@ public boolean matches(Object actual) {
     public String toString() {
         return "not(" + matcher + ")";
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/Or.java
Patch:
@@ -26,4 +26,4 @@ public boolean matches(Object actual) {
     public String toString() {
         return "or("+m1+", "+m2+")";
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -26,4 +26,4 @@ public boolean matches(Object actual) {
     public String toString() {
         return "refEq(" + wanted + ")";
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/matchers/text/MatcherToString.java
Patch:
@@ -38,6 +38,6 @@ static String toString(ArgumentMatcher<?> matcher) {
         }
         return decamelizeMatcher(matcher.getClass().getSimpleName());
     }
-    
-   
+
+
 }

File: src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java
Patch:
@@ -14,7 +14,7 @@
  * Inspired on hamcrest. Used for printing arguments in verification errors.
  */
 public class ValuePrinter {
-    
+
     private ValuePrinter(){}
 
     /**

File: src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java
Patch:
@@ -26,4 +26,4 @@ public interface ArgumentMatcherStorage {
 
     void reset();
 
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -26,9 +26,9 @@
 
 @SuppressWarnings("unchecked")
 public class MockingProgressImpl implements MockingProgress {
-    
+
     private final ArgumentMatcherStorage argumentMatcherStorage = new ArgumentMatcherStorageImpl();
-    
+
     private OngoingStubbing<?> ongoingStubbing;
     private Localized<VerificationMode> verificationMode;
     private Location stubbingInProgress = null;
@@ -129,7 +129,7 @@ public void stubbingCompleted() {
     }
 
     public String toString() {
-        return  "iOngoingStubbing: " + ongoingStubbing + 
+        return  "iOngoingStubbing: " + ongoingStubbing +
         ", verificationMode: " + verificationMode +
         ", stubbingInProgress: " + stubbingInProgress;
     }

File: src/main/java/org/mockito/internal/progress/SequenceNumber.java
Patch:
@@ -5,10 +5,10 @@
 package org.mockito.internal.progress;
 
 public class SequenceNumber {
-    
+
     private static int sequenceNumber = 1;
 
     public static synchronized int next() {
         return sequenceNumber++;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java
Patch:
@@ -29,4 +29,4 @@ private ThreadSafeMockingProgress() {
     public final static MockingProgress mockingProgress() {
         return MOCKING_PROGRESS_PROVIDER.get();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/reporting/Discrepancy.java
Patch:
@@ -17,7 +17,7 @@ public Discrepancy(int wantedCount, int actualCount) {
     public int getWantedCount() {
         return wantedCount;
     }
-    
+
     public String getPluralizedWantedCount() {
         return Pluralizer.pluralize(wantedCount);
     }
@@ -29,4 +29,4 @@ public int getActualCount() {
     public String getPluralizedActualCount() {
         return Pluralizer.pluralize(actualCount);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/reporting/PrintSettings.java
Patch:
@@ -62,4 +62,4 @@ public String print(Invocation invocation) {
     public String print(MatchableInvocation invocation) {
         return print(invocation.getMatchers(), invocation.getInvocation());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -23,7 +23,7 @@ public SmartPrinter(MatchableInvocation wanted, Invocation actual, Integer ... i
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
         printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);
-        
+
         this.wanted = printSettings.print(wanted);
         this.actual = printSettings.print(actual);
     }
@@ -35,4 +35,4 @@ public String getWanted() {
     public String getActual() {
         return actual;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java
Patch:
@@ -81,4 +81,4 @@ public Description getDescription() {
     public void filter(Filter filter) throws NoTestsRemainException {
         runner.filter(filter);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/runners/InternalRunner.java
Patch:
@@ -17,5 +17,5 @@ public interface InternalRunner extends Filterable {
     void run(RunNotifier notifier);
 
     Description getDescription();
-    
-}
\ No newline at end of file
+
+}

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -88,4 +88,4 @@ public InternalRunner create(Class<?> klass, Supplier<MockitoTestListener> liste
                     , t);
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/runners/util/RunnerProvider.java
Patch:
@@ -22,13 +22,13 @@ public InternalRunner newInstance(String runnerClassName, Object ... constructor
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
-        
+
         try {
             return (InternalRunner) constructor.newInstance(constructorArgs);
         } catch (InvocationTargetException e) {
             throw e;
         } catch (Exception e) {
-            throw new RuntimeException(e);        
+            throw new RuntimeException(e);
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java
Patch:
@@ -30,4 +30,4 @@ public MockitoSession startMocking() {
         Strictness effectiveStrictness = this.strictness == null ? Strictness.STRICT_STUBS : this.strictness;
         return new DefaultMockitoSession(effectiveTest, effectiveStrictness, new ConsoleMockitoLogger());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/stubbing/BaseStubbing.java
Patch:
@@ -40,13 +40,13 @@ public OngoingStubbing<T> thenThrow(Throwable... throwables) {
         OngoingStubbing<T> stubbing = null;
         for (Throwable t: throwables) {
             if (stubbing == null) {
-                stubbing = thenThrow(t);                    
+                stubbing = thenThrow(t);
             } else {
                 stubbing = stubbing.thenThrow(t);
             }
         }
         return stubbing;
-    }        
+    }
 
     public OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableType) {
         return thenAnswer(new ThrowsExceptionClass(throwableType));
@@ -67,4 +67,4 @@ public OngoingStubbing<T> thenThrow(Class<? extends Throwable> toBeThrown, Class
     public OngoingStubbing<T> thenCallRealMethod() {
         return thenAnswer(new CallsRealMethods());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java
Patch:
@@ -27,4 +27,4 @@ public OngoingStubbing<T> then(Answer<?> answer) {
     public <M> M getMock() {
         return (M) invocationContainerImpl.invokedMock();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -135,7 +135,7 @@ public List<StubbedInvocationMatcher> getStubbedInvocations() {
     public Object invokedMock() {
         return invocationForStubbing.getInvocation().getMock();
     }
-    
+
     public InvocationMatcher getInvocationForStubbing() {
         return invocationForStubbing;
     }

File: src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.List;
 
 public class OngoingStubbingImpl<T> extends BaseStubbing<T> {
-    
+
     private final InvocationContainerImpl invocationContainerImpl;
 
     public OngoingStubbingImpl(InvocationContainerImpl invocationContainerImpl) {

File: src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -51,4 +51,4 @@ public boolean wasUsed() {
     public String toString() {
         return super.toString() + " stubbed with: " + answers;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -27,12 +27,12 @@ public class StubberImpl implements Stubber {
     public <T> T when(T mock) {
         if (mock == null) {
             throw nullPassedToWhenMethod();
-        } 
-        
+        }
+
 		if (!MockUtil.isMock(mock)) {
 			throw notAMockPassedToWhenMethod();
 		}
-        
+
 		MockUtil.getMockHandler(mock).setAnswersForStubbing(answers);
         return mock;
     }

File: src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Functional interfaces to make it easy to implement answers in Java 8
- * 
+ *
  * @since 2.1.0
  */
 public class AnswerFunctionalInterfaces {

File: src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -24,11 +24,11 @@
  * <p>
  * As usual you are going to read <b>the partial mock warning</b>:
  * Object oriented programming is more less tackling complexity by dividing the complexity into separate, specific, SRPy objects.
- * How does partial mock fit into this paradigm? Well, it just doesn't... 
+ * How does partial mock fit into this paradigm? Well, it just doesn't...
  * Partial mock usually means that the complexity has been moved to a different method on the same object.
  * In most cases, this is not the way you want to design your application.
  * <p>
- * However, there are rare cases when partial mocks come handy: 
+ * However, there are rare cases when partial mocks come handy:
  * dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)
  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
  * <p>

File: src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java
Patch:
@@ -25,4 +25,4 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         }
         return new ReturnsEmptyValues().answer(invocation);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java
Patch:
@@ -13,7 +13,7 @@
 import static org.mockito.internal.exceptions.Reporter.onlyVoidMethodsCanBeSetToDoNothing;
 
 public class DoesNothing implements Answer<Object>, ValidableAnswer, Serializable {
-    
+
     private static final long serialVersionUID = 4840880517740698416L;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java
Patch:
@@ -44,7 +44,7 @@ public ReturnsElementsOf(Collection<?> elements) {
     public Object answer(InvocationOnMock invocation) throws Throwable {
         if (elements.size() == 1)
             return elements.get(0);
-        else 
+        else
             return elements.poll();
     }
 }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java
Patch:
@@ -31,10 +31,10 @@ public ForwardsInvocations(Object delegatedObject) {
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Method mockMethod = invocation.getMethod();
-        
+
         try {
             Method delegateMethod = getDelegateMethod(mockMethod);
-            
+
             if (!compatibleReturnTypes(mockMethod.getReturnType(), delegateMethod.getReturnType())) {
                 throw delegatedMethodHasWrongReturnType(mockMethod, delegateMethod, invocation.getMock(), delegatedObject);
             }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java
Patch:
@@ -17,7 +17,7 @@
  * See javadoc for {@link IMockitoConfiguration}
  */
 public class GloballyConfiguredAnswer implements Answer<Object>, Serializable {
-    
+
     private static final long serialVersionUID = 3585893470101750917L;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {

File: src/main/java/org/mockito/internal/util/MockNameImpl.java
Patch:
@@ -9,7 +9,7 @@
 import java.io.Serializable;
 
 public class MockNameImpl implements MockName, Serializable {
-    
+
     private static final long serialVersionUID = 8014974700844306925L;
     private final String mockName;
     private boolean defaultName;
@@ -37,11 +37,11 @@ private static String toInstanceName(Class<?> clazz) {
         //lower case first letter
         return className.substring(0, 1).toLowerCase() + className.substring(1);
     }
-    
+
     public boolean isDefault() {
         return defaultName;
     }
-    
+
     @Override
     public String toString() {
         return mockName;

File: src/main/java/org/mockito/internal/util/MockitoLogger.java
Patch:
@@ -8,4 +8,4 @@ public interface MockitoLogger {
 
     void log(Object what);
 
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/util/Primitives.java
Patch:
@@ -91,4 +91,4 @@ public static <T> T defaultValue(Class<T> primitiveOrWrapperType) {
         PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.put(float.class, 0F);
         PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.put(double.class, 0D);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/util/StringUtil.java
Patch:
@@ -18,7 +18,7 @@ private StringUtil() {}
     public static String removeFirstLine(String text) {
         return text.replaceFirst(".*?\n", "");
     }
-    
+
     /**
      * Joins Strings with line break character. It adds line break in front, too.
      * This makes it something like 'format' no really 'join'.
@@ -38,7 +38,7 @@ public static String join(String start, Iterable<?> lines) {
         int lastBreak = out.lastIndexOf("\n");
         return out.replace(lastBreak, lastBreak+1, "").toString();
     }
-    
+
     public static String decamelizeMatcher(String className) {
         if (className.length() == 0) {
             return "<custom argument matcher>";

File: src/main/java/org/mockito/internal/util/collections/IdentitySet.java
Patch:
@@ -10,7 +10,7 @@
 public class IdentitySet {
 
     private final LinkedList list = new LinkedList();
-    
+
     public boolean contains(Object o) {
         for(Object existing:list) {
             if (existing == o) {
@@ -21,6 +21,6 @@ public boolean contains(Object o) {
     }
 
     public void add(Object o) {
-        list.add(o);        
+        list.add(o);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/util/collections/ListUtil.java
Patch:
@@ -33,7 +33,7 @@ public static <From, To> LinkedList<To> convert(Collection<From> collection, Con
         }
         return converted;
     }
-    
+
     public interface Filter<T> {
         boolean isOut(T object);
     }

File: src/main/java/org/mockito/internal/util/reflection/AccessibilityChanger.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.AccessibleObject;
 
 public class AccessibilityChanger {
-    
+
     private Boolean wasAccessible = null;
 
     /**

File: src/main/java/org/mockito/internal/util/reflection/LenientCopyTool.java
Patch:
@@ -46,4 +46,4 @@ private <T> void copyValues(T from, T mock, Class<?> classFrom) {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java
Patch:
@@ -17,10 +17,10 @@
  * moved after their subclasses.
  */
 public class SuperTypesLastSorter {
-    
+
     private SuperTypesLastSorter() {
     }
-    
+
     /**
      * Return a new collection with the fields sorted first by name,
      * then with any fields moved after their supertypes.

File: src/main/java/org/mockito/internal/verification/AtMost.java
Patch:
@@ -32,7 +32,7 @@ public AtMost(int maxNumberOfInvocations) {
     public void verify(VerificationData data) {
         List<Invocation> invocations = data.getAllInvocations();
         MatchableInvocation wanted = data.getTarget();
-        
+
         List<Invocation> found = findInvocations(invocations, wanted);
         int foundSize = found.size();
         if (foundSize > maxNumberOfInvocations) {

File: src/main/java/org/mockito/internal/verification/Calls.java
Patch:
@@ -40,8 +40,8 @@ public void verifyInOrder(VerificationDataInOrder data) {
 
         checkMissingInvocation(allInvocations, wanted,  data.getOrderingContext());
         checkNumberOfInvocationsNonGreedy(allInvocations, wanted, wantedCount, data.getOrderingContext());
-    }    
-    
+    }
+
     @Override
     public String toString() {
         return "Wanted invocations count (non-greedy): " + wantedCount;
@@ -51,4 +51,4 @@ public String toString() {
     public VerificationMode description(String description) {
         return VerificationModeFactory.description(this, description);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/InOrderContextImpl.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.invocation.Invocation;
 
 public class InOrderContextImpl implements InOrderContext {
-    
+
     final IdentitySet verified = new IdentitySet();
 
     public boolean isVerified(Invocation invocation) {
@@ -19,4 +19,4 @@ public boolean isVerified(Invocation invocation) {
     public void markVerified(Invocation i) {
         verified.add(i);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/InOrderWrapper.java
Patch:
@@ -21,7 +21,7 @@ public class InOrderWrapper implements VerificationMode {
 
     public InOrderWrapper(VerificationInOrderMode mode, InOrderImpl inOrder) {
         this.mode = mode;
-        this.inOrder = inOrder;        
+        this.inOrder = inOrder;
     }
 
     public void verify(VerificationData data) {
@@ -34,4 +34,4 @@ public void verify(VerificationData data) {
     public VerificationMode description(String description) {
         return VerificationModeFactory.description(this, description);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -31,7 +31,7 @@ public void verify(VerificationData data) {
     public void verifyInOrder(VerificationDataInOrder data) {
         List<Invocation> invocations = data.getAllInvocations();
         Invocation unverified = findFirstUnverifiedInOrder(data.getOrderingContext(), invocations);
-        
+
         if (unverified != null) {
             throw noMoreInteractionsWantedInOrder(unverified);
         }

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -25,10 +25,10 @@ public void verify(VerificationData data) {
         MatchableInvocation target = data.getTarget();
         List<Invocation> invocations = data.getAllInvocations();
         List<Invocation> chunk = findInvocations(invocations,target);
-        if (invocations.size() != 1 && chunk.size() > 0) {            
+        if (invocations.size() != 1 && chunk.size() > 0) {
             Invocation unverified = findFirstUnverified(invocations);
             throw noMoreInteractionsWanted(unverified, (List) invocations);
-        } 
+        }
         if (invocations.size() != 1 || chunk.size() == 0) {
             throw wantedButNotInvoked(target);
         }

File: src/main/java/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.verification.VerificationMode;
 
 public class VerificationModeFactory {
-    
+
     public static VerificationMode atLeastOnce() {
         return atLeast(1);
     }
@@ -36,7 +36,7 @@ public static NoMoreInteractions noMoreInteractions() {
     public static VerificationMode atMost(int maxNumberOfInvocations) {
         return new AtMost(maxNumberOfInvocations);
     }
-    
+
     /**
      * Verification mode will prepend the specified failure message if verification fails with the given implementation.
      * @param mode Implementation used for verification
@@ -47,4 +47,4 @@ public static VerificationMode atMost(int maxNumberOfInvocations) {
     public static VerificationMode description(VerificationMode mode, String description) {
         return new Description(mode, description);
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/api/VerificationData.java
Patch:
@@ -48,4 +48,4 @@ public interface VerificationData {
      */
     @Deprecated
     InvocationMatcher getWanted();
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java
Patch:
@@ -19,7 +19,7 @@ public class VerificationDataInOrderImpl implements VerificationDataInOrder {
     public VerificationDataInOrderImpl(InOrderContext inOrder, List<Invocation> allInvocations, MatchableInvocation wanted) {
         this.inOrder = inOrder;
         this.allInvocations = allInvocations;
-        this.wanted = wanted;        
+        this.wanted = wanted;
     }
 
     public List<Invocation> getAllInvocations() {
@@ -33,4 +33,4 @@ public InOrderContext getOrderingContext() {
     public MatchableInvocation getWanted() {
         return wanted;
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/api/VerificationInOrderMode.java
Patch:
@@ -5,6 +5,6 @@
 package org.mockito.internal.verification.api;
 
 public interface VerificationInOrderMode {
-    
-    void verifyInOrder(VerificationDataInOrder data);    
-}
\ No newline at end of file
+
+    void verifyInOrder(VerificationDataInOrder data);
+}

File: src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -21,12 +21,12 @@ public static Integer[] getSuspiciouslyNotMatchingArgsIndexes(List<ArgumentMatch
         if (matchers.size() != arguments.length) {
             return new Integer[0];
         }
-        
+
         List<Integer> suspicious = new LinkedList<Integer>();
         int i = 0;
         for (ArgumentMatcher m : matchers) {
             if (m instanceof ContainsExtraTypeInfo
-                    && !safelyMatches(m, arguments[i]) 
+                    && !safelyMatches(m, arguments[i])
                     && toStringEquals(m, arguments[i])
                     && !((ContainsExtraTypeInfo) m).typeMatches(arguments[i])) {
                 suspicious.add(i);

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java
Patch:
@@ -11,9 +11,9 @@ public class AtLeastDiscrepancy extends Discrepancy {
     public AtLeastDiscrepancy(int wantedCount, int actualCount) {
         super(wantedCount, actualCount);
     }
-    
+
     @Override
     public String getPluralizedWantedCount() {
         return "*at least* " + super.getPluralizedWantedCount();
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -20,10 +20,10 @@
 import static org.mockito.internal.invocation.InvocationsFinder.getLastLocation;
 
 public class AtLeastXNumberOfInvocationsChecker {
-    
+
     public static void checkAtLeastNumberOfInvocations(List<Invocation> invocations, MatchableInvocation wanted, int wantedCount) {
         List<Invocation> actualInvocations = findInvocations(invocations, wanted);
-        
+
         int actualCount = actualInvocations.size();
         if (wantedCount > actualCount) {
             Location lastLocation = getLastLocation(actualInvocations);

File: src/main/java/org/mockito/listeners/InvocationListener.java
Patch:
@@ -8,11 +8,11 @@
 
 /**
  * This listener can be notified of method invocations on a mock.
- * 
+ *
  * For this to happen, it must be registered using {@link MockSettings#invocationListeners(InvocationListener...)}.
  */
 public interface InvocationListener {
-    
+
     /**
      * Called after the invocation of the listener's mock if it returned normally.
      *

File: src/main/java/org/mockito/mock/MockCreationSettings.java
Patch:
@@ -80,4 +80,4 @@ public interface MockCreationSettings<T> {
      */
     @Incubating
     Object getOuterClassInstance();
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/mock/SerializableMode.java
Patch:
@@ -27,4 +27,4 @@ public enum SerializableMode {
      */
     @Incubating
     ACROSS_CLASSLOADERS
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/plugins/InstantiatorProvider.java
Patch:
@@ -53,4 +53,4 @@ public interface InstantiatorProvider {
      * Returns an instantiator, used to create new class instances.
      */
     Instantiator getInstantiator(MockCreationSettings<?> settings);
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/plugins/StackTraceCleanerProvider.java
Patch:
@@ -25,4 +25,4 @@ public interface StackTraceCleanerProvider {
      * @return StackTraceCleaner to use
      */
     StackTraceCleaner getStackTraceCleaner(StackTraceCleaner defaultCleaner);
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -49,7 +49,7 @@ public MockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {
 
     @Deprecated
     @Override
-    public void run(final RunNotifier notifier) {           
+    public void run(final RunNotifier notifier) {
         super.run(notifier);
     }
 

File: src/main/java/org/mockito/verification/After.java
Patch:
@@ -13,9 +13,9 @@
  * <p>
  * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
  * See javadoc for {@link VerificationWithTimeout}
- */  
+ */
 public class After extends VerificationWrapper<VerificationOverTimeImpl> implements VerificationAfterDelay {
-    
+
     /**
      * See the javadoc for {@link VerificationAfterDelay}
      * <p>
@@ -25,7 +25,7 @@ public class After extends VerificationWrapper<VerificationOverTimeImpl> impleme
     public After(long delayMillis, VerificationMode verificationMode) {
         this(10, delayMillis, verificationMode);
     }
-    
+
     After(long pollingPeriod, long delayMillis, VerificationMode verificationMode) {
         this(new VerificationOverTimeImpl(pollingPeriod, delayMillis, verificationMode, false));
     }

File: src/main/java/org/mockito/verification/Timeout.java
Patch:
@@ -18,7 +18,7 @@
  * See javadoc for {@link VerificationWithTimeout}
  */
 public class Timeout extends VerificationWrapper<VerificationOverTimeImpl> implements VerificationWithTimeout {
-    
+
     /**
      * See the javadoc for {@link VerificationWithTimeout}
      * <p>

File: src/test/java/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java
Patch:
@@ -43,11 +43,11 @@ public void run() {
             };
             listeners[i].start();
         }
-        
+
         verify(mock, atLeastOnce()).simpleMethod();
 
         for (Thread listener : listeners) {
             listener.join();
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java
Patch:
@@ -39,4 +39,4 @@ public void run() {
         }
         verify(mock, times(listeners.length)).simpleMethod("foo");
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java
Patch:
@@ -27,15 +27,15 @@ public void shouldAllowVerifyingInThreads() throws Exception {
 
     private void performTest() throws InterruptedException {
         mock = mock(IMethods.class);
-        
+
         when(mock.simpleMethod("foo"))
             .thenReturn("foo")
             .thenReturn("bar")
             .thenReturn("baz")
             .thenReturn("foo")
             .thenReturn("bar")
             .thenReturn("baz");
-        
+
         final Thread[] listeners = new Thread[100];
         for (int i = 0; i < listeners.length; i++) {
             listeners[i] = new Thread() {
@@ -59,4 +59,4 @@ public void run() {
             listener.join();
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/ArgumentCaptorTest.java
Patch:
@@ -22,7 +22,7 @@ public void tearDown() {
 			validateMockitoUsage();
 		} catch (InvalidUseOfMatchersException ignore) {
 		}
-		
+
 	}
 
 	@Test
@@ -33,4 +33,4 @@ public void tell_handy_return_values_to_return_value_for() throws Exception {
 
 	}
 
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/StateMaster.java
Patch:
@@ -26,4 +26,4 @@ public void validate() {
     public void clearMockitoListeners() {
         mockingProgress().clearListeners();
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -16,7 +16,7 @@ public class MockitoAssertionErrorTest extends TestBase {
     private void throwIt() {
         throw new MockitoAssertionError("boom");
     }
-    
+
     @Test
     public void shouldKeepUnfilteredStackTrace() {
         try {
@@ -26,7 +26,7 @@ public void shouldKeepUnfilteredStackTrace() {
             assertEquals("throwIt", e.getUnfilteredStackTrace()[0].getMethodName());
         }
     }
-    
+
     @Test
     public void should_prepend_message_to_original() {
         MockitoAssertionError original = new MockitoAssertionError("original message");

File: src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -16,7 +16,7 @@ public class MockitoExceptionTest extends TestBase {
     private void throwIt() {
         throw new MockitoException("boom");
     }
-    
+
     @Test
     public void shouldKeepUnfilteredStackTrace() {
         try {

File: src/test/java/org/mockito/exceptions/base/StackTraceBuilder.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 
 public class StackTraceBuilder {
-    
+
     private String[] methods;
 
     public StackTraceBuilder methods(String ... methods) {
@@ -19,11 +19,11 @@ public StackTraceBuilder methods(String ... methods) {
 
     public StackTraceElement[] toStackTrace() {
         StackTraceElement[] trace = new StackTraceElement[methods.length];
-        
+
         for (int i = 0; i < methods.length; i++) {
             trace[i] = new StackTraceElement("DummyClass", methods[i], "DummyClass.java", 100);
         }
-        
+
         return trace;
     }
 

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -24,7 +24,7 @@
 import static org.mockito.internal.invocation.finder.AllInvocationsFinder.findStubbings;
 
 public class AllInvocationsFinderTest extends TestBase {
-    
+
     private IMethods mockTwo;
     private IMethods mockOne;
 
@@ -33,7 +33,7 @@ public void setup() {
         mockOne = mock(IMethods.class);
         mockTwo = mock(IMethods.class);
     }
-    
+
     @Test
     public void no_interactions() throws Exception {
         //expect
@@ -91,4 +91,4 @@ public void provides_stubbings_in_order() throws Exception {
     private void assertArgumentEquals(Object argumentValue, Invocation invocation) {
         assertEquals(argumentValue, invocation.getArgument(0));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/configuration/ConfigurationAccess.java
Patch:
@@ -11,4 +11,4 @@ public class ConfigurationAccess {
     public static MockitoConfiguration getConfig() {
         return (MockitoConfiguration) new GlobalConfiguration().getIt();
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java
Patch:
@@ -44,4 +44,4 @@ public void reads_class_name() throws IOException {
         assertEquals("foo.Foo", reader.readPluginClass(impl(" #my class\n  foo.Foo \n #other class ")));
         assertEquals("foo.Foo", reader.readPluginClass(impl("foo.Foo  # cool class")));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java
Patch:
@@ -111,4 +111,4 @@ public class PluginFinderTest extends TestBase {
             e.getCause().getMessage().equals("Boo!");
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java
Patch:
@@ -54,4 +54,4 @@ private interface Something {
 
         Object otherMethod(Object param);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java
Patch:
@@ -126,4 +126,4 @@ public void informs_about_unstubbed() {
                 "[Mockito]\n" +
                 "[Mockito] 1. com.Foo:20", listener.getStubbingInfo());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/debugging/WarningsFinderTest.java
Patch:
@@ -62,4 +62,4 @@ public void shouldPrintStubWasUsedWithDifferentArgs() {
         // then
         verify(listener, only()).foundStubCalledWithDifferentArgs(stub, wrongArg);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java
Patch:
@@ -109,4 +109,4 @@ public void run() {
     }
 
     private static class MyListener implements MockitoListener {}
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java
Patch:
@@ -128,4 +128,4 @@ public void describeMismatch(Object item, Description mismatchDescription) {
         assertEquals(Object.class, genericTypeOfMatcher(NonGenericMatcher.class));
         assertEquals(Object.class, genericTypeOfMatcher(NonGenericMatcherFromInterface.class));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -184,4 +184,4 @@ public void should_create_from_invocations() throws Exception {
         assertEquals(1, out.size());
         assertEquals(i, out.get(0).getInvocation());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/invocation/TypeSafeMatchingTest.java
Patch:
@@ -29,7 +29,7 @@ public class TypeSafeMatchingTest {
 
     /**
      * Should not throw an {@link NullPointerException}
-     * 
+     *
      * @see Bug-ID https://github.com/mockito/mockito/issues/457
      */
     @Test
@@ -122,7 +122,7 @@ public boolean matches(Integer argument) {
     @Test
     public void dontMatchesWithSubTypeExtendingGenericClass() {
         final AtomicBoolean wasCalled = new AtomicBoolean();
-        
+
         abstract class GenericMatcher<T> implements ArgumentMatcher<T> {
         }
         class TestMatcher extends GenericMatcher<Integer> {

File: src/test/java/org/mockito/internal/junit/ArgMismatchFinderTest.java
Patch:
@@ -124,4 +124,4 @@ public void mismatch_reports_only_unstubbed_invocations() throws Exception {
         //then
         assertEquals("{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}", mismatches.toString());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/junit/StubbingArgMismatchesTest.java
Patch:
@@ -63,4 +63,4 @@ public void multiple_matching_invocations_per_stub_plus_some_other_invocation()
             "[MockitoHint] 2. Unused... -> at M.java\n" +
             "[MockitoHint]  ...args ok? -> at N.java\n", logger.getLoggedInfo());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/matchers/EqualityTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.mockito.internal.matchers.Equality.areEqual;
 
 public class EqualityTest extends TestBase {
-    
+
     @Test
     public void shouldKnowIfObjectsAreEqual() throws Exception {
         int[] arr = new int[] {1, 2};

File: src/test/java/org/mockito/internal/matchers/InstanceOfTest.java
Patch:
@@ -61,4 +61,4 @@ public void can_be_vararg_aware() {
         assertThat(new InstanceOf.VarArgAware(Number[].class).matches(new Number[0])).isTrue();
         assertThat(new InstanceOf.VarArgAware(Number[].class).matches(new Object[0])).isFalse();
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/matchers/MatchersPrinterTest.java
Patch:
@@ -62,4 +62,4 @@ public void shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose() {
         //then
         assertEquals("((Long) 1L, notNull());", line);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java
Patch:
@@ -35,4 +35,4 @@ public void better_toString_for_matchers() {
         assertEquals("*my custom description*", MatcherToString.toString(new MatcherWithDescription()));
         assertEquals("*my custom description*", MatcherToString.toString(new MatcherWithInheritedDescription()));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/progress/TimesTest.java
Patch:
@@ -18,10 +18,10 @@ public class TimesTest  {
 
     @Test
     public void shouldNotAllowNegativeNumberOfInvocations() throws Exception {
-       
+
     	exception.expect(MockitoException.class);
     	exception.expectMessage("Negative value is not allowed here");
-        
+
     	VerificationModeFactory.times(-50);
     }
 }

File: src/test/java/org/mockito/internal/progress/VerificationModeBuilder.java
Patch:
@@ -21,4 +21,4 @@ public VerificationModeBuilder times(int times) {
         this.times = times;
         return this;
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -12,7 +12,7 @@
 import static junit.framework.TestCase.assertNotNull;
 
 public class RunnerProviderTest extends TestBase {
-    
+
     @Test
     public void shouldCreateRunnerInstance() throws Throwable {
         //given
@@ -22,4 +22,4 @@ public void shouldCreateRunnerInstance() throws Throwable {
         //then
         assertNotNull(runner);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java
Patch:
@@ -25,4 +25,4 @@ public void shouldKnowWhenClassHasTests() {
         assertTrue(TestMethodsFinder.hasTestMethods(HasTests.class));
         assertFalse(TestMethodsFinder.hasTestMethods(DoesNotHaveTests.class));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/session/DefaultMockitoSessionBuilderTest.java
Patch:
@@ -37,4 +37,4 @@ public void run() {
             }
         }).throwsException(UnfinishedMockingSessionException.class);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java
Patch:
@@ -126,4 +126,4 @@ public void should_validate_throwable() throws Throwable {
 
     @SuppressWarnings("serial")
     class MyException extends RuntimeException {}
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java
Patch:
@@ -29,4 +29,4 @@ public void should_call_method_with_empty_varargs() throws Throwable {
         ForwardsInvocations forwardsInvocations = new ForwardsInvocations(new FooImpl());
         assertEquals(1, forwardsInvocations.answer(invocationOf(Foo.class, "bar", "b", new Object[] {})));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java
Patch:
@@ -60,15 +60,15 @@ interface StringMethods {
         String stringMethod();
         String[] stringArrayMethod();
     }
-    
+
     @Test
     public void should_return_empty_array() throws Throwable {
         String[] ret = (String[]) values.answer(invocationOf(StringMethods.class, "stringArrayMethod"));
-        
+
         assertTrue(ret.getClass().isArray());
         assertTrue(ret.length == 0);
     }
-    
+
     @Test
     public void should_return_empty_string() throws Throwable {
         assertEquals("", values.answer(invocationOf(StringMethods.class, "stringMethod")));

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java
Patch:
@@ -20,9 +20,9 @@ public void shouldReturnEmptyArray() {
         assertTrue(ret.getClass().isArray());
         assertTrue(ret.length == 0);
     }
-    
+
     @Test
     public void shouldReturnEmptyString() {
         assertEquals("", rv.returnValueFor(String.class));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/util/MockNameImplTest.java
Patch:
@@ -39,4 +39,4 @@ public void shouldProvideTheGivenName() throws Exception {
 
     private class SomeClass {}
     private class SomeInterface {}
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java
Patch:
@@ -15,7 +15,7 @@
 
 public class ObjectMethodsGuruTest extends TestBase {
 
-    
+
     private interface HasCompareToButDoesNotImplementComparable {
         int compareTo(HasCompareToButDoesNotImplementComparable other);
     }
@@ -26,7 +26,7 @@ private interface HasCompare extends Comparable<HasCompare> {
         int compareTo(String redHerring);
         int compareTo(HasCompare redHerring);
     }
-    
+
     @Test
     public void shouldKnowToStringMethod() throws Exception {
         assertFalse(ObjectMethodsGuru.isToStringMethod(Object.class.getMethod("equals", Object.class)));

File: src/test/java/org/mockito/internal/util/SimpleMockitoLogger.java
Patch:
@@ -30,4 +30,4 @@ public void assertEmpty() {
             throw new AssertionError("Expected the logger to be empty but it has:\n" + loggedInfo.toString());
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java
Patch:
@@ -20,4 +20,4 @@ public void shouldLog() throws Exception {
         //then
         assertEquals("foo", logger.getLoggedInfo());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/util/collections/ListUtilTest.java
Patch:
@@ -29,7 +29,7 @@ public boolean isOut(String object) {
 
         Assertions.assertThat(filtered).containsSequence("one", "two", "three");
     }
-    
+
     @Test
     public void shouldReturnEmptyIfEmptyListGiven() throws Exception {
         List<Object> list = new LinkedList<Object>();

File: src/test/java/org/mockito/internal/util/io/IOUtilTest.java
Patch:
@@ -30,4 +30,4 @@ public void writes_reads_files() throws Exception {
         IOUtil.writeText("foo\n\nbar", file);
         assertEquals(asList("foo", "", "bar"), IOUtil.readLines(new FileInputStream(file)));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java
Patch:
@@ -189,7 +189,7 @@ static class StaticClassThrowingExceptionDefaultConstructor {
             throw new NullPointerException("business logic failed");
         }
     }
-    
+
     static abstract class AbstractStaticClass {
         public AbstractStaticClass() {}
     }

File: src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom;
 
 public class GenericMetadataSupportTest {
-  
+
     interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
         T self();
     }

File: src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java
Patch:
@@ -61,4 +61,4 @@ class Crazier extends EvenDeeper implements Crazy {}
         assertEquals(Integer.class, genericTypeOf(Crazy.class, Base.class, IBase.class));
         assertEquals(Integer.class, genericTypeOf(Crazier.class, Base.class, IBase.class));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java
Patch:
@@ -34,4 +34,4 @@ public void should_not_return_to_string_method() throws Exception {
         assertTrue(invocations.getAll().contains(simpleMethod));
         assertFalse(invocations.getAll().contains(toString));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/verification/DummyVerificationMode.java
Patch:
@@ -10,7 +10,7 @@
 public class DummyVerificationMode implements VerificationMode {
     public void verify(VerificationData data) {
     }
-    
+
     public VerificationMode description(String description) {
         return new DummyVerificationMode();
     }

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -79,4 +79,4 @@ private InvocationBuilder buildSimpleMethod() {
 	private InvocationBuilder buildDifferentMethod() {
 		return new InvocationBuilder().mock(mock).differentMethod();
 	}
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/junit/TestableJUnitRunner.java
Patch:
@@ -29,4 +29,4 @@ public MockitoTestListener get() {
     public static SimpleMockitoLogger refreshedLogger() {
         return LOGGER.get().clear();
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java
Patch:
@@ -77,4 +77,4 @@ public void filter(Filter filter) throws NoTestsRemainException {
         }
 
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -180,4 +180,4 @@ public int hashCode() {
             return result;
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java
Patch:
@@ -146,4 +146,4 @@ public ArgumentCaptor<IMethods> getCaptor() {
             return mock;
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java
Patch:
@@ -18,15 +18,15 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class CaptorAnnotationUnhappyPathTest extends TestBase {
-    
+
     @Captor List<?> notACaptorField;
 
     @Before
     @Override
     public void init() {
         //we need to get rid of parent implementation this time
     }
-    
+
     @Test
     public void shouldFailIfCaptorHasWrongType() throws Exception {
         try {
@@ -40,4 +40,4 @@ public void shouldFailIfCaptorHasWrongType() throws Exception {
                 .hasMessageContaining("wrong type");
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java
Patch:
@@ -43,4 +43,4 @@ public void shouldSerializationWork() throws Exception {
         //then
         assertSame(foo, foo.bar.foo);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/basicapi/ResetTest.java
Patch:
@@ -116,4 +116,4 @@ public void shouldMaintainPreviousDefaultAnswer() {
         //then
         assertNotNull(mock.iMethodsReturningMethod());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java
Patch:
@@ -30,4 +30,4 @@ public void testCompleteProgress() throws Exception {
         verify(progressMonitor).beginTask(anyString(), anyInt());
         verify(progressMonitor, atLeastOnce()).worked(anyInt());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.mockito.Mockito.*;
 
 public class ActualInvocationHasNullArgumentNPEBugTest extends TestBase {
-    
+
     public interface Fun {
         String doFun(String something);
     }
@@ -34,4 +34,4 @@ public void shouldAllowPassingNullArgument() {
             //it's ok, we just want to reproduce the bug
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java
Patch:
@@ -25,7 +25,7 @@ public void shouldFailBecauseDisallowedMethodWasCalled(){
 
         someMethods.allowedMethod();
         someMethods.disallowedMethod();
-        
+
         verify(someMethods, atLeast(1)).allowedMethod();
         verifyNoMoreInteractions(someMethods);
     }

File: src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java
Patch:
@@ -53,4 +53,4 @@ public void returnFoo4() {
         ReturnsObject mock2 = mock; // Switch to base type to call covariant override
         verify(mock2).callMe(); // Fails: java.lang.AssertionError: expected:<foo> but was:<null>
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/DiamondInheritanceIsConfusingMockitoTest.java
Patch:
@@ -41,4 +41,4 @@ public Sub(String s) {
     public interface iInterface {
         String getFoo();
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/EqualsWithDeltaTest.java
Patch:
@@ -37,4 +37,4 @@ public void testEqualsWithDelta_WhenActualAndExpectedAreTheSameObject() throws E
     public ArgumentMatcher<Number> equalsWithDelta(final Double expected) {
         return new EqualsWithDelta(expected, .000001);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java
Patch:
@@ -68,7 +68,7 @@ public void run() {
     @Test
     //this problem shows at 4 out of 5 executions
     //it is not strictly a bug because Mockito does not support simultanous stubbing (see FAQ)
-    //however I decided to synchronize some calls in order to make the exceptions nicer 
+    //however I decided to synchronize some calls in order to make the exceptions nicer
     public void tryToRevealTheProblem() {
         ToMock toMock = mock(ToMock.class);
         for (int i = 0; i < 100; i++) {
@@ -95,4 +95,4 @@ public void tryToRevealTheProblem() {
             }
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java
Patch:
@@ -23,4 +23,4 @@ public void shouldNotThrowNPE() {
         f.bar(1);
         verify(f).bar(any(Long.class));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java
Patch:
@@ -17,7 +17,7 @@ public class NPEWhenMockingThrowablesTest extends TestBase {
 
     @Mock IMethods mock;
     @Mock DummyException mock2;
-    
+
     class DummyException extends RuntimeException {
         private static final long serialVersionUID = 1L;
     }
@@ -31,4 +31,4 @@ public void shouldNotThrowNPE() {
             fail();
         } catch(DummyException e) {}
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java
Patch:
@@ -70,4 +70,4 @@ public void should_reset_not_remove_default_stubbing() {
         //then
         assertEquals(1, mock.compareTo(new Date()));
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
Patch:
@@ -33,4 +33,4 @@ public void shouldPrintNiceName() {
             Assertions.assertThat(e.getMessage()).contains("veryCoolSpy");
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java
Patch:
@@ -25,4 +25,4 @@ public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKSWithDoApi() {
         IMethods mock = mock(IMethods.class, RETURNS_MOCKS);
         doReturn(null).when(mock).objectReturningMethodNoArgs();
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/bugs/injection/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
Patch:
@@ -16,7 +16,7 @@
 import static org.junit.Assert.assertTrue;
 
 /**
- * Issue 211 : @InjectMocks should carry out their work by the method (and not by field) if available 
+ * Issue 211 : @InjectMocks should carry out their work by the method (and not by field) if available
  */
 @RunWith(MockitoJUnitRunner.class)
 public class InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest {

File: src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
Patch:
@@ -26,7 +26,7 @@ public void shouldVerifyCorrectlyWithAnyVarargs() {
         //when
         table.newRow("qux", "foo", "bar", "baz");
         table.newRow("abc", "def");
-        
+
         //then
         verify(table, times(2)).newRow(anyString(), (String[]) anyVararg());
     }
@@ -46,9 +46,9 @@ public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs() {
         //when
         table.newRow("qux", "foo", "bar", "baz");
         table.newRow("abc", "def");
-        
+
         //then
         verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());
         verify(table).newRow(anyString(), anyString());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java
Patch:
@@ -26,7 +26,7 @@
  * @see MockitoConfiguration#getAnnotationEngine() for the custom smartmock injection engine
  */
 public class CustomizedAnnotationForSmartMockTest extends TestBase {
-    
+
     @SmartMock IMethods smartMock;
 
     @Test

File: src/test/java/org/mockitousage/debugging/InvocationsPrinterTest.java
Patch:
@@ -78,4 +78,4 @@ private void triggerInteraction() {
     private void triggerStubbing() {
         when(mock.simpleMethod("a")).thenReturn("x");
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/debugging/NewMockito.java
Patch:
@@ -10,7 +10,7 @@
 
 //TODO get rid when debug() finally is out
 public class NewMockito extends Mockito {
-    
+
     public static MockitoDebugger debug() {
         return new MockitoDebuggerImpl();
     }

File: src/test/java/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Tests the verbose logging of invocation on mock methods.
- * 
+ *
  * BEWARE: These tests rely on mocking the standard output. While in a
  * single-threaded environment the Before/After-contract ensures, that the
  * original output stream is restored, there is no guarantee for this
@@ -126,10 +126,10 @@ public void shouldPrintRealInvocationOnSpyToStdOut() {
         FooImpl fooSpy = mock(FooImpl.class,
                 withSettings().spiedInstance(new FooImpl()).verboseLogging());
         doCallRealMethod().when(fooSpy).doSomething("Klipsch");
-        
+
         // when
         fooSpy.doSomething("Klipsch");
-        
+
         // then
         Assertions.assertThat(printed())
                 .contains(getClass().getName())

File: src/test/java/org/mockitousage/examples/use/ArticleCalculator.java
Patch:
@@ -10,4 +10,4 @@ public interface ArticleCalculator {
     int countArticlesInPolish(String newspaper);
     int countNumberOfRelatedArticles(Article article);
     int countAllArticles(String ... publications);
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java
Patch:
@@ -37,4 +37,4 @@ public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         //then
         assertEquals("-> at <<unknown line>>", loc);
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/internal/invocation/realmethod/CleanTraceRealMethodTest.java
Patch:
@@ -48,4 +48,4 @@ public Object invoke(Object target, Object[] arguments) throws Throwable {
             Assertions.assertThat(e).has(methodInStackTraceAt(2, "shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows"));
         }
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockitousage/internal/junit/UnusedStubbingsFinderTest.java
Patch:
@@ -124,4 +124,4 @@ public void deduplicates_stubbings_by_location() throws Exception {
         //then
         assertEquals(1, stubbings.size());
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/ArgumentMatchers.java
Patch:
@@ -91,7 +91,7 @@
  * <p>
  * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.
  * Internally, they record a matcher on a stack and return a dummy value (usually null).
- * This implementation is due static type safety imposed by java compiler.
+ * This implementation is due to static type safety imposed by java compiler.
  * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.
  * </p>
  *

File: src/main/java/org/mockito/ArgumentMatchers.java
Patch:
@@ -91,7 +91,7 @@
  * <p>
  * Matcher methods like <code>anyObject()</code>, <code>eq()</code> <b>do not</b> return matchers.
  * Internally, they record a matcher on a stack and return a dummy value (usually null).
- * This implementation is due static type safety imposed by java compiler.
+ * This implementation is due to static type safety imposed by java compiler.
  * The consequence is that you cannot use <code>anyObject()</code>, <code>eq()</code> methods outside of verified/stubbed method.
  * </p>
  *

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1576,7 +1576,7 @@ public class Mockito extends ArgumentMatchers {
      * @return mock object
      */
     public static <T> T mock(Class<T> classToMock) {
-        return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));
+        return mock(classToMock, withSettings());
     }
 
     /**

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1576,7 +1576,7 @@ public class Mockito extends ArgumentMatchers {
      * @return mock object
      */
     public static <T> T mock(Class<T> classToMock) {
-        return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS));
+        return mock(classToMock, withSettings());
     }
 
     /**

File: src/test/java/org/mockitoutil/ClassLoaders.java
Patch:
@@ -150,11 +150,13 @@ Runnable reloadTaskInClassLoader(Runnable task) {
                     Field declaredField = taskClassReloaded.getDeclaredField(field.getName());
                     int modifiers = declaredField.getModifiers();
                     if(Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers)) {
-                        // skip otherwise IllegalAccessException (can be bypassed with Unsafe though)
+                        // Skip static final fields (e.g. jacoco fields)
+                        // otherwise IllegalAccessException (can be bypassed with Unsafe though)
                         // We may also miss coverage data.
                         continue;
                     }
                     if (declaredField.getType() == field.getType()) { // don't copy this
+                        field.setAccessible(true);
                         declaredField.setAccessible(true);
                         declaredField.set(reloaded, field.get(task));
                     }

File: src/test/java/org/mockitoutil/JUnitResultAssert.java
Patch:
@@ -70,7 +70,7 @@ public JUnitResultAssert fails(int expectedFailureCount, String methodName, Clas
     public JUnitResultAssert succeeds(int successCount) {
         int i = result.getRunCount() - result.getFailureCount();
         if (i != successCount) {
-            throw new AssertionError("Expected " + successCount + " passing test methods but there were " + i + " passing methods.");
+            throw new AssertionError("Expected " + successCount + " passes but " + i + "/" + result.getRunCount() + " passed.");
         }
         return this;
     }
@@ -80,7 +80,7 @@ private static String formatFailures(List<Failure> failures) {
             return "<no failures>";
         }
         int count = 1;
-        StringBuilder out = new StringBuilder("Failures:");
+        StringBuilder out = new StringBuilder("Failures:\n");
         for (Failure f : failures) {
             out.append(count++).append(". ").append(f.getTrace());
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java
Patch:
@@ -111,7 +111,6 @@ public class InlineByteBuddyMockMaker implements ClassCreatingMockMaker {
                 JarOutputStream outputStream = new JarOutputStream(new FileOutputStream(boot));
                 try {
                     String source = "org/mockito/internal/creation/bytebuddy/MockMethodDispatcher";
-                    outputStream.putNextEntry(new JarEntry(source + ".class"));
                     InputStream inputStream = InlineByteBuddyMockMaker.class.getClassLoader().getResourceAsStream(source + ".raw");
                     if (inputStream == null) {
                         throw new IllegalStateException(join(
@@ -120,6 +119,7 @@ public class InlineByteBuddyMockMaker implements ClassCreatingMockMaker {
                                 "The class loader responsible for looking up the resource: " + InlineByteBuddyMockMaker.class.getClassLoader()
                         ));
                     }
+                    outputStream.putNextEntry(new JarEntry(source + ".class"));
                     try {
                         int length;
                         byte[] buffer = new byte[1024];

File: src/test/java/org/mockito/internal/junit/JUnitRuleTest.java
Patch:
@@ -44,4 +44,4 @@ public void does_not_check_invalid_mockito_usage_on_failure() throws Throwable {
         Mockito.when(mock.simpleMethod()); // <--- unfinished stubbing
         throw new RuntimeException("foo"); // <--- some failure
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/mockito/internal/runners/InternalRunner.java
Patch:
@@ -14,7 +14,7 @@
  *
  * TODO rename to InternalRunner
  */
-public interface RunnerImpl extends Filterable {
+public interface InternalRunner extends Filterable {
 
     void run(RunNotifier notifier);
 

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -24,7 +24,7 @@ public class RunnerFactory {
     /**
      * Creates silent runner implementation
      */
-    public RunnerImpl create(Class<?> klass) throws InvocationTargetException {
+    public InternalRunner create(Class<?> klass) throws InvocationTargetException {
         return create(klass, new Supplier<MockitoTestListener>() {
             public MockitoTestListener get() {
                 return new NoOpTestListener();
@@ -35,7 +35,7 @@ public MockitoTestListener get() {
     /**
      * Creates strict runner implementation
      */
-    public RunnerImpl createStrict(Class<?> klass) throws InvocationTargetException {
+    public InternalRunner createStrict(Class<?> klass) throws InvocationTargetException {
         return create(klass, new Supplier<MockitoTestListener>() {
             public MockitoTestListener get() {
                 return new MismatchReportingTestListener(new ConsoleMockitoLogger());
@@ -46,7 +46,7 @@ public MockitoTestListener get() {
     /**
      * Creates runner implementation with provided listener supplier
      */
-    public RunnerImpl create(Class<?> klass, Supplier<MockitoTestListener> listenerSupplier) throws InvocationTargetException {
+    public InternalRunner create(Class<?> klass, Supplier<MockitoTestListener> listenerSupplier) throws InvocationTargetException {
         try {
             return new RunnerProvider().newInstance("org.mockito.internal.runners.SilentJUnitRunner", klass, listenerSupplier);
         } catch (InvocationTargetException e) {

File: src/main/java/org/mockito/internal/runners/SilentJUnitRunner.java
Patch:
@@ -19,8 +19,8 @@
 import org.mockito.internal.junit.MockitoTestListener;
 import org.mockito.internal.util.Supplier;
 
-//TODO rename to DefaultInternalRunner and the parent to InternalRunner
-public class SilentJUnitRunner implements RunnerImpl {
+//TODO rename to DefaultInternalRunner and the parent to
+public class SilentJUnitRunner implements InternalRunner {
 
     private final BlockJUnit4ClassRunner runner;
 

File: src/main/java/org/mockito/internal/runners/StrictRunner.java
Patch:
@@ -12,17 +12,17 @@
 import org.mockito.internal.junit.UnnecessaryStubbingsReporter;
 import org.mockito.internal.runners.util.FailureDetector;
 
-public class StrictRunner implements RunnerImpl {
+public class StrictRunner implements InternalRunner {
 
     private final Class<?> testClass;
-    private final RunnerImpl runner;
+    private final InternalRunner runner;
     private boolean filterRequested;
 
     /**
      * @param runner - the runner to wrap around
      * @param testClass - for reporting purposes
      */
-    public StrictRunner(RunnerImpl runner, Class<?> testClass) {
+    public StrictRunner(InternalRunner runner, Class<?> testClass) {
         this.runner = runner;
         this.testClass = testClass;
     }

File: src/main/java/org/mockito/internal/runners/util/RunnerProvider.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.runners.util;
 
-import org.mockito.internal.runners.RunnerImpl;
+import org.mockito.internal.runners.InternalRunner;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
 public class RunnerProvider {
 
-    public RunnerImpl newInstance(String runnerClassName, Object ... constructorArgs) throws Exception {
+    public InternalRunner newInstance(String runnerClassName, Object ... constructorArgs) throws Exception {
         Constructor<?> constructor;
         try {
             Class<?> runnerClass = Class.forName(runnerClassName);
@@ -24,7 +24,7 @@ public RunnerImpl newInstance(String runnerClassName, Object ... constructorArgs
         }
         
         try {
-            return (RunnerImpl) constructor.newInstance(constructorArgs);
+            return (InternalRunner) constructor.newInstance(constructorArgs);
         } catch (InvocationTargetException e) {
             throw e;
         } catch (Exception e) {

File: src/main/java/org/mockito/junit/MockitoJUnitRunner.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 import org.mockito.internal.runners.RunnerFactory;
-import org.mockito.internal.runners.RunnerImpl;
+import org.mockito.internal.runners.InternalRunner;
 import org.mockito.internal.runners.StrictRunner;
 
 
@@ -91,14 +91,14 @@ public Strict(Class<?> klass) throws InvocationTargetException {
         }
     }
 
-    private final RunnerImpl runner;
+    private final InternalRunner runner;
 
     public MockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {
         //by default, StrictRunner is used. We can change that potentially based on feedback from users
         this(new StrictRunner(new RunnerFactory().createStrict(klass), klass));
     }
 
-    MockitoJUnitRunner(RunnerImpl runner) throws InvocationTargetException {
+    MockitoJUnitRunner(InternalRunner runner) throws InvocationTargetException {
         this.runner = runner;
     }
 

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.internal.runners.util;
 
 import org.junit.Test;
-import org.mockito.internal.runners.RunnerImpl;
+import org.mockito.internal.runners.InternalRunner;
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.assertNotNull;
@@ -17,7 +17,7 @@ public void shouldCreateRunnerInstance() throws Throwable {
         //given
         RunnerProvider provider = new RunnerProvider();
         //when
-        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.SilentJUnitRunner", this.getClass(), null);
+        InternalRunner runner = provider.newInstance("org.mockito.internal.runners.SilentJUnitRunner", this.getClass(), null);
         //then
         assertNotNull(runner);
     }

File: src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runners.model.InitializationError;
-import org.mockito.internal.runners.RunnerImpl;
+import org.mockito.internal.runners.InternalRunner;
 import org.mockito.internal.util.ConsoleMockitoLogger;
 import org.mockitoutil.TestBase;
 
@@ -37,7 +37,7 @@ public void setup() throws InitializationError {
     public void shouldDelegateToGetDescription() throws Exception {
         //given
         final Description expectedDescription = Description.createSuiteDescription(this.getClass());
-        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new RunnerImplStub() {
+        runner = new ConsoleSpammingMockitoJUnitRunner(loggerStub, new InternalRunnerStub() {
             public Description getDescription() {
                 return expectedDescription;
             }
@@ -64,7 +64,7 @@ public String getLoggedInfo() {
         }
     }
 
-    static class RunnerImplStub implements RunnerImpl {
+    static class InternalRunnerStub implements InternalRunner {
 
         public Description getDescription() {
             return null;

File: src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -5,6 +5,7 @@
 
 package org.mockito.internal.matchers;
 
+import java.util.regex.Pattern;
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
@@ -113,6 +114,7 @@ public void findToString() {
     @Test
     public void matchesToString() {
         assertEquals("matches(\"\\\\s+\")", new Matches("\\s+").toString());
+        assertEquals("matches(\"\\\\s+\")", new Matches(Pattern.compile("\\s+")).toString());
     }
 
 }

File: src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -5,6 +5,7 @@
 
 package org.mockito.internal.matchers;
 
+import java.util.regex.Pattern;
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
@@ -113,6 +114,7 @@ public void findToString() {
     @Test
     public void matchesToString() {
         assertEquals("matches(\"\\\\s+\")", new Matches("\\s+").toString());
+        assertEquals("matches(\"\\\\s+\")", new Matches(Pattern.compile("\\s+")).toString());
     }
 
 }

File: src/main/java/org/mockito/internal/junit/DefaultTestFinishedEvent.java
Patch:
@@ -1,8 +1,5 @@
 package org.mockito.internal.junit;
 
-/**
- * Created by sfaber on 11/24/16.
- */
 public class DefaultTestFinishedEvent implements TestFinishedEvent {
     private final Object testClassInstance;
     private final String testMethodName;

File: src/main/java/org/mockito/internal/junit/TestFinishedEvent.java
Patch:
@@ -1,8 +1,5 @@
 package org.mockito.internal.junit;
 
-/**
- * Created by sfaber on 11/24/16.
- */
 interface TestFinishedEvent {
 
     Throwable getFailure();

File: src/main/java/org/mockito/internal/junit/StrictStubsTestListener.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.internal.junit;
 
 import org.mockito.internal.exceptions.Reporter;
-import org.mockito.internal.listeners.StubbingLookUpListener;
+import org.mockito.internal.listeners.StubbingLookupListener;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MatchableInvocation;
 import org.mockito.listeners.MockCreationListener;
@@ -33,8 +33,8 @@ public void onMockCreated(Object mock, MockCreationSettings settings) {
         //It is not ideal that we modify the state of MockCreationSettings object
         //MockCreationSettings is intended to be an immutable view of the creation settings
         //In future, we should start passing MockSettings object to the creation listener
-        settings.getStubbingLookUpListeners().add(new StubbingLookUpListener() {
-            public void onStubbingLookUp(Invocation invocation, MatchableInvocation stubbingFound) {
+        settings.getStubbingLookupListeners().add(new StubbingLookupListener() {
+            public void onStubbingLookup(Invocation invocation, MatchableInvocation stubbingFound) {
                 if (stubbingFound == null) {
                     List<Invocation> matchingStubbings = new LinkedList<Invocation>();
                     Collection<Stubbing> stubbings = mockingDetails(invocation.getMock()).getStubbings();

File: src/main/java/org/mockito/internal/listeners/StubbingLookupListener.java
Patch:
@@ -18,14 +18,14 @@
  *  - make the error handling strict
  * so that Mockito provides decent message when listener fails due to poor implementation.
  */
-public interface StubbingLookUpListener {
+public interface StubbingLookupListener {
 
     /**
      * Called by the framework when Mockito looked up an answer for invocation on a mock.
      *
      * @param invocation the invocation on the mock
      * @param stubbingFound - can be null - it indicates that the invocation was not stubbed.
      */
-    void onStubbingLookUp(Invocation invocation, MatchableInvocation stubbingFound);
+    void onStubbingLookup(Invocation invocation, MatchableInvocation stubbingFound);
 
 }

File: src/main/java/org/mockito/mock/MockCreationSettings.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.mockito.Incubating;
 import org.mockito.listeners.InvocationListener;
-import org.mockito.internal.listeners.StubbingLookUpListener;
+import org.mockito.internal.listeners.StubbingLookupListener;
 import org.mockito.stubbing.Answer;
 
 import java.util.List;
@@ -68,7 +68,7 @@ public interface MockCreationSettings<T> {
     /**
      * The stubbing lookup listeners attached to this mock.
      */
-    List<StubbingLookUpListener> getStubbingLookUpListeners();
+    List<StubbingLookupListener> getStubbingLookupListeners();
 
     /**
      * Informs whether the mock instance should be created via constructor

File: src/test/java/org/mockitoutil/SafeJUnitRule.java
Patch:
@@ -26,11 +26,11 @@ public SafeJUnitRule(MethodRule testedRule) {
         this.testedRule = testedRule;
     }
 
-    public Statement apply(final Statement base, FrameworkMethod method, Object target) {
+    public Statement apply(final Statement base, final FrameworkMethod method, final Object target) {
         return new Statement() {
             public void evaluate() throws Throwable {
                 try {
-                    base.evaluate();
+                    testedRule.apply(base, method, target).evaluate();
                 } catch (Throwable throwable) {
                     reportedThrowable = throwable;
                     throwableAssert.doAssert(throwable);

File: src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java
Patch:
@@ -119,7 +119,6 @@ public void evaluate(IMethods mock, IMethods mock2) throws Throwable {
             //then
             fail();
         } catch (MockitoAssertionError e) {
-            e.printStackTrace();
             assertThat(e.getMessage()).startsWith("Argument mismatch");
         }
     }

File: src/main/java/org/mockito/internal/junit/MockitoTestListener.java
Patch:
@@ -1,10 +1,10 @@
 package org.mockito.internal.junit;
 
-import java.util.Collection;
+import org.mockito.listeners.MockCreationListener;
 
-interface MockitoTestListener {
+interface MockitoTestListener extends MockCreationListener {
 
     void beforeTest(Object testClassInstance, String testMethodName);
 
-    void afterTest(Collection<Object> mocks, Throwable problem);
+    void afterTest(Throwable problem);
 }

File: src/main/java/org/mockito/MockitoAnnotations.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito;
 
-import org.mockito.configuration.AnnotationEngine;
+import org.mockito.plugins.AnnotationEngine;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.junit.MockitoJUnitRunner;

File: src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.configuration.AnnotationEngine;
 import org.mockito.configuration.DefaultMockitoConfiguration;
 import org.mockito.internal.configuration.ConfigurationAccess;
-import org.mockito.internal.configuration.DefaultAnnotationEngine;
+import org.mockito.internal.configuration.IndependentAnnotationEngine;
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.*;
@@ -58,7 +58,7 @@ public void shouldInjectMocksIfThereIsNoUserDefinedEngine() throws Exception {
     @Test
     public void shouldRespectUsersEngine() throws Exception {
         //given
-        AnnotationEngine customizedEngine = new DefaultAnnotationEngine() { /**/ };
+        AnnotationEngine customizedEngine = new IndependentAnnotationEngine() { /**/ };
         ConfigurationAccess.getConfig().overrideAnnotationEngine(customizedEngine);
         SimpleTestCase test = new SimpleTestCase();
         

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -179,7 +179,7 @@
  * verify(mockedList).get(anyInt());
  *
  * //<b>argument matchers can also be written as Java 8 Lambdas</b>
- * verify(mockedList).add(someString -> someString.length() > 5);
+ * verify(mockedList).add(argThat(someString -> someString.length() > 5));
  *
  * </code></pre>
  *

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -179,7 +179,7 @@
  * verify(mockedList).get(anyInt());
  *
  * //<b>argument matchers can also be written as Java 8 Lambdas</b>
- * verify(mockedList).add(someString -> someString.length() > 5);
+ * verify(mockedList).add(argThat(someString -> someString.length() > 5));
  *
  * </code></pre>
  *

File: src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runners.model.Statement;
 import org.mockito.exceptions.base.MockitoAssertionError;
 import org.mockito.internal.progress.MockingProgressImpl;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.junit.VerificationCollector;
 import org.mockito.verification.VerificationMode;
 import org.mockito.verification.VerificationStrategy;

File: src/main/java/org/mockito/internal/verification/AtLeast.java
Patch:
@@ -9,7 +9,7 @@
 import static org.mockito.internal.verification.checkers.MissingInvocationChecker.checkMissingInvocation;
 
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.verification.VerificationMode;

File: src/main/java/org/mockito/internal/verification/AtMost.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.MatchableInvocation;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.invocation.Invocation;
 import org.mockito.verification.VerificationMode;
 

File: src/main/java/org/mockito/internal/verification/Calls.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.MatchableInvocation;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/verification/Description.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.internal.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
 /**

File: src/main/java/org/mockito/internal/verification/InOrderWrapper.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.mockito.internal.InOrderImpl;
 import org.mockito.internal.invocation.finder.VerifiableInvocationsFinder;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrderImpl;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
 public class MockAwareVerificationMode implements VerificationMode {

File: src/main/java/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -12,7 +12,7 @@
 
 import java.util.List;
 
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.MatchableInvocation;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.invocation.Invocation;
 import org.mockito.verification.VerificationMode;
 

File: src/main/java/org/mockito/internal/verification/Times.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.MatchableInvocation;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.internal.verification.checkers.NumberOfInvocationsChecker;

File: src/main/java/org/mockito/internal/verification/VerificationDataImpl.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.stubbing.InvocationContainer;
 import org.mockito.invocation.MatchableInvocation;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.invocation.Invocation;
 
 import static org.mockito.internal.exceptions.Reporter.cannotVerifyToString;

File: src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.mockito.exceptions.base.MockitoAssertionError;
 import org.mockito.internal.util.Timer;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
 /**

File: src/main/java/org/mockito/internal/verification/VerificationWrapper.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal.verification;
 
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
 public abstract class VerificationWrapper<WrapperType extends VerificationMode> implements VerificationMode {

File: src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.InOrderImpl;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
 import org.mockito.verification.VerificationMode;
 

File: src/main/java/org/mockito/verification/VerificationMode.java
Patch:
@@ -33,7 +33,7 @@ public interface VerificationMode {
     /**
      * Performs the verification
      */
-    void verify(VerificationData data);
+    void verify(org.mockito.internal.verification.api.VerificationData data);
     
     /**
      * Description will be prepended to the assertion error if verification fails.

File: src/test/java/org/mockito/internal/verification/DescriptionTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
 import static junit.framework.TestCase.assertEquals;

File: src/test/java/org/mockito/internal/verification/DummyVerificationMode.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 
 public class DummyVerificationMode implements VerificationMode {

File: src/test/java/org/mockito/internal/verification/OnlyTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.MatchableInvocation;
-import org.mockito.verification.VerificationData;
+import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.invocation.Invocation;
 
 import java.util.Arrays;

File: src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockito.internal.util.ObjectBox;
 import org.mockito.internal.verification.InOrderContextImpl;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockitoutil.TestBase;
 
 import java.util.Arrays;
@@ -35,7 +36,7 @@ public void shouldCaptureArguments() {
         //given
         Invocation i = new InvocationBuilder().toInvocation();
         final ObjectBox box = new ObjectBox();
-        CapturesArgumentsFromInvocation c = new CapturesArgumentsFromInvocation() {
+        MatchableInvocation c = new InvocationMatcher(i) {
             public void captureArgumentsFrom(Invocation i) {
                 box.put(i);
             }};

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -20,12 +20,13 @@
 import org.mockito.invocation.DescribedInvocation;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
+import org.mockito.invocation.MatchableInvocation;
 
 /**
  * In addition to all content of the invocation, the invocation matcher contains the argument matchers. Invocation matcher is used during verification and stubbing. In those cases, the user can provide argument matchers instead of 'raw' arguments. Raw arguments are converted to 'equals' matchers anyway.
  */
 @SuppressWarnings("serial")
-public class InvocationMatcher implements DescribedInvocation, CapturesArgumentsFromInvocation, Serializable {
+public class InvocationMatcher implements MatchableInvocation, DescribedInvocation, Serializable {
 
     private final Invocation invocation;
     private final List<ArgumentMatcher<?>> matchers;

File: src/main/java/org/mockito/internal/reporting/PrintSettings.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.internal.matchers.text.MatchersPrinter;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 
 import java.util.Arrays;
 import java.util.LinkedList;
@@ -58,7 +59,7 @@ public String print(Invocation invocation) {
         return print(ArgumentsProcessor.argumentsToMatchers(invocation.getArguments()), invocation);
     }
 
-    public String print(InvocationMatcher invocationMatcher) {
+    public String print(MatchableInvocation invocationMatcher) {
         return print(invocationMatcher.getMatchers(), invocationMatcher.getInvocation());
     }
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -7,6 +7,7 @@
 
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 
 /**
  * Makes sure both wanted and actual are printed consistently (single line or multiline)
@@ -18,7 +19,7 @@ public class SmartPrinter {
     private final String wanted;
     private final String actual;
 
-    public SmartPrinter(InvocationMatcher wanted, Invocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {
+    public SmartPrinter(MatchableInvocation wanted, Invocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
         printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);

File: src/main/java/org/mockito/internal/verification/AtMost.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.List;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationData;
 import org.mockito.invocation.Invocation;
 import org.mockito.verification.VerificationMode;
@@ -30,7 +31,7 @@ public AtMost(int maxNumberOfInvocations) {
 
     public void verify(VerificationData data) {
         List<Invocation> invocations = data.getAllInvocations();
-        InvocationMatcher wanted = data.getWanted();
+        MatchableInvocation wanted = data.getWanted();
         
         List<Invocation> found = findInvocations(invocations, wanted);
         int foundSize = found.size();

File: src/main/java/org/mockito/internal/verification/Calls.java
Patch:
@@ -7,6 +7,7 @@
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
@@ -35,7 +36,7 @@ public void verify(VerificationData data) {
 
     public void verifyInOrder(VerificationDataInOrder data) {
         List<Invocation> allInvocations = data.getAllInvocations();
-        InvocationMatcher wanted = data.getWanted();
+        MatchableInvocation wanted = data.getWanted();
 
         checkMissingInvocation(allInvocations, wanted,  data.getOrderingContext());
         check( allInvocations, wanted, wantedCount, data.getOrderingContext());

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.List;
 
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationData;
 import org.mockito.invocation.Invocation;
 import org.mockito.verification.VerificationMode;
@@ -21,7 +22,7 @@ public class Only implements VerificationMode {
 
     @SuppressWarnings("unchecked")
     public void verify(VerificationData data) {
-        InvocationMatcher wantedMatcher = data.getWanted();
+        MatchableInvocation wantedMatcher = data.getWanted();
         List<Invocation> invocations = data.getAllInvocations();
         List<Invocation> chunk = findInvocations(invocations,wantedMatcher);
         if (invocations.size() != 1 && chunk.size() > 0) {            

File: src/main/java/org/mockito/internal/verification/Times.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.List;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.invocation.MatchableInvocation;
 import org.mockito.verification.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
@@ -31,7 +32,7 @@ public Times(int wantedNumberOfInvocations) {
     
     public void verify(VerificationData data) {
         List<Invocation> invocations = data.getAllInvocations();
-        InvocationMatcher wanted = data.getWanted();
+        MatchableInvocation wanted = data.getWanted();
 
         if (wantedCount > 0) {
              checkMissingInvocation(data.getAllInvocations(), data.getWanted());
@@ -42,7 +43,7 @@ public void verify(VerificationData data) {
     
     public void verifyInOrder(VerificationDataInOrder data) {
         List<Invocation> allInvocations = data.getAllInvocations();
-        InvocationMatcher wanted = data.getWanted();
+        MatchableInvocation wanted = data.getWanted();
         
         if (wantedCount > 0) {
             checkMissingInvocation(allInvocations, wanted, data.getOrderingContext());

File: src/main/java/org/mockito/internal/verification/api/VerificationDataInOrder.java
Patch:
@@ -8,12 +8,13 @@
 
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 
 public interface VerificationDataInOrder {
 
     List<Invocation> getAllInvocations();
 
-    InvocationMatcher getWanted();   
+    MatchableInvocation getWanted();
     
     InOrderContext getOrderingContext(); 
     

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -19,10 +19,11 @@
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
+import org.mockito.invocation.MatchableInvocation;
 
 public class AtLeastXNumberOfInvocationsChecker {
     
-    public static void checkAtLeastNumberOfInvocations(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
+    public static void checkAtLeastNumberOfInvocations(List<Invocation> invocations, MatchableInvocation wanted, int wantedCount) {
         List<Invocation> actualInvocations = findInvocations(invocations, wanted);
         
         int actualCount = actualInvocations.size();
@@ -44,7 +45,7 @@ private static void removeAlreadyVerified(List<Invocation> invocations) {
         }
     }
 
-    public static void checkAtLeastNumberOfInvocations(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount,InOrderContext orderingContext) {
+    public static void checkAtLeastNumberOfInvocations(List<Invocation> invocations, MatchableInvocation wanted, int wantedCount,InOrderContext orderingContext) {
         List<Invocation> chunk = findAllMatchingUnverifiedChunks(invocations, wanted, orderingContext);
 
         int actualCount = chunk.size();

File: src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java
Patch:
@@ -19,13 +19,14 @@
 import org.mockito.internal.reporting.SmartPrinter;
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;
+import org.mockito.invocation.MatchableInvocation;
 
 public class MissingInvocationChecker {
 
     private MissingInvocationChecker() {
     }
 
-    public static void checkMissingInvocation(List<Invocation> invocations, InvocationMatcher wanted) {
+    public static void checkMissingInvocation(List<Invocation> invocations, MatchableInvocation wanted) {
         List<Invocation> actualInvocations = findInvocations(invocations, wanted);
 
         if (!actualInvocations.isEmpty()){
@@ -43,7 +44,7 @@ public static void checkMissingInvocation(List<Invocation> invocations, Invocati
         
     }
 
-    public static void checkMissingInvocation(List<Invocation> invocations, InvocationMatcher wanted, InOrderContext context) {
+    public static void checkMissingInvocation(List<Invocation> invocations, MatchableInvocation wanted, InOrderContext context) {
         List<Invocation> chunk = findAllMatchingUnverifiedChunks(invocations, wanted, context);
 
         if (!chunk.isEmpty()) {

File: src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java
Patch:
@@ -16,16 +16,17 @@
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
+import org.mockito.invocation.MatchableInvocation;
 
 public class NonGreedyNumberOfInvocationsInOrderChecker {
 
     private NonGreedyNumberOfInvocationsInOrderChecker() {}
 
-    public static void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
+    public static void check(List<Invocation> invocations, MatchableInvocation wanted, int wantedCount, InOrderContext context) {
         int actualCount = 0;
         Location lastLocation = null;
         while( actualCount < wantedCount ){
-            Invocation next = findFirstMatchingUnverifiedInvocation( invocations, wanted, context );
+            Invocation next = findFirstMatchingUnverifiedInvocation(invocations, wanted, context );
             if( next == null ){
                 throw tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastLocation );
             }

File: src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java
Patch:
@@ -19,10 +19,11 @@
 import org.mockito.internal.reporting.Discrepancy;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
+import org.mockito.invocation.MatchableInvocation;
 
 public class NumberOfInvocationsChecker {
 
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
+    public void check(List<Invocation> invocations, MatchableInvocation wanted, int wantedCount) {
         List<Invocation> actualInvocations = findInvocations(invocations, wanted);
         
         int actualCount = actualInvocations.size();

File: src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java
Patch:
@@ -18,10 +18,11 @@
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.Location;
+import org.mockito.invocation.MatchableInvocation;
 
 public class NumberOfInvocationsInOrderChecker {
   
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
+    public void check(List<Invocation> invocations, MatchableInvocation wanted, int wantedCount, InOrderContext context) {
         List<Invocation> chunk = findMatchingChunk(invocations, wanted, wantedCount, context);
         
         int actualCount = chunk.size();

File: buildSrc/src/main/groovy/org/mockito/release/steps/ConfigurableReleaseStep.java
Patch:
@@ -8,11 +8,14 @@ public interface ConfigurableReleaseStep extends ReleaseStep {
 
   /**
    * Rollback operation is executed if the release process fails in some further step
+   * Rollback is _not_ executed if the operation itself fails, here's is why:
+   * if the operation is git commit and it fails, we should not reset last commit.
    */
   void rollback(Closure closure);
 
   /**
    * Executed if release is successful. Executed if release is failed provided there is no rollback.
    */
   void cleanup(Closure closure);
+
 }

File: buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java
Patch:
@@ -33,8 +33,8 @@ public void perform() {
             try {
                 step.perform();
             } catch (Throwable t) {
-                rollback(attempted); //TODO SF what if rollback fails?
-                throw new RuntimeException("Release failed at step " + attempted.size() + " (" + step.getDescription() + "). Rollback was performed.", t);
+                throw new RuntimeException("Release failed at step " + attempted.size() + " (" + step.getDescription() + "). " +
+                        "Rollback was not performed for the failed operation. Previous successful operations will be rolled back.", t);
             }
         }
         //TODO SF needs tidy up. I should model better the cleanup VS rollback operation

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -96,7 +96,7 @@ private <T> RuntimeException prettifyFailure(MockCreationSettings<T> mockFeature
         throw new MockitoException(join(
                 "Mockito cannot mock this class: " + mockFeatures.getTypeToMock() + ".",
                 "",
-                "Mockito can only non-private & non-final classes.",
+                "Mockito can only mock non-private & non-final classes.",
                 "If you're not sure why you're getting this error, please report to the mailing list.",
                 "",
                 Platform.isJava8BelowUpdate45() ? "Java 8 early builds have bugs that were addressed in Java 1.8.0_45, please update your JDK!\n" : "",

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
+@Deprecated
 public class WarningsCollector {
    
     private final List<Object> createdMocks;

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.util.*;
 
+@Deprecated
 public class UnusedStubsFinder {
 
     /**

File: src/main/java/org/mockito/stubbing/Stubbing.java
Patch:
@@ -7,7 +7,7 @@
  * Stubbing declared on the mock object.
  * See detailed description including sample code and use cases see javadoc for {@link MockingDetails#getStubbings()}.
  *
- * @since 2.2.0
+ * @since 2.2.3
  */
 public interface Stubbing {
 
@@ -21,7 +21,7 @@ public interface Stubbing {
      * <p>
      * To understand how this method is useful, see the description at {@link MockingDetails#getStubbings()}.
      *
-     * @since 2.2.0
+     * @since 2.2.3
      */
     Invocation getInvocation();
 
@@ -37,7 +37,7 @@ public interface Stubbing {
      * <p>
      * To understand how this method is useful, see the description at {@link MockingDetails#getStubbings()}.
      *
-     * @since 2.2.0
+     * @since 2.2.3
      */
     boolean wasUsed();
 }

File: src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java
Patch:
@@ -20,6 +20,7 @@ public class MockitoDebuggerImpl implements MockitoDebugger {
     /**
      * TODO: when MockitoDebugger is deleted, delete this implementation, too
      */
+    @Deprecated
     public String printInvocations(Object ... mocks) {
         String out = "";
         List<Invocation> invocations = AllInvocationsFinder.find(asList(mocks));

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
+@Deprecated
 public class WarningsCollector {
    
     private final List<Object> createdMocks;

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.util.*;
 
+@Deprecated
 public class UnusedStubsFinder {
 
     /**

File: src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java
Patch:
@@ -18,9 +18,7 @@ public class MockitoDebuggerImpl implements MockitoDebugger {
     private final UnusedStubsFinder unusedStubsFinder = new UnusedStubsFinder();
 
     /**
-     * TODO: when MockitoDebugger is deleted, we will:
-     *  - delete UnusedStubsFinder and use MockingDetails.getStubbings() / filter wasUsed() == false
-     *  - stop using AllInvocationsFinder and use public api: MockingDetails.getInvocations()
+     * TODO: when MockitoDebugger is deleted, delete this implementation, too
      */
     public String printInvocations(Object ... mocks) {
         String out = "";

File: src/main/java/org/mockito/internal/util/DefaultMockingDetails.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.MockingDetails;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.InternalMockHandler;
-import org.mockito.internal.debugging.MockitoDebuggerImpl;
+import org.mockito.internal.debugging.InvocationsPrinter;
 import org.mockito.stubbing.Stubbing;
 import org.mockito.internal.stubbing.StubbingComparator;
 import org.mockito.invocation.Invocation;
@@ -62,7 +62,7 @@ public Collection<Stubbing> getStubbings() {
     @Override
     public String printInvocations() {
         assertGoodMock();
-        return new MockitoDebuggerImpl().printInvocations(toInspect);
+        return new InvocationsPrinter().printInvocations(toInspect);
     }
 
     private InternalMockHandler<Object> mockHandler() {

File: src/main/java/org/mockito/internal/util/DefaultMockingDetails.java
Patch:
@@ -7,6 +7,7 @@
 import org.mockito.MockingDetails;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.InternalMockHandler;
+import org.mockito.internal.debugging.MockitoDebuggerImpl;
 import org.mockito.stubbing.Stubbing;
 import org.mockito.internal.stubbing.StubbingComparator;
 import org.mockito.invocation.Invocation;
@@ -60,7 +61,8 @@ public Collection<Stubbing> getStubbings() {
 
     @Override
     public String printInvocations() {
-        return null;
+        assertGoodMock();
+        return new MockitoDebuggerImpl().printInvocations(toInspect);
     }
 
     private InternalMockHandler<Object> mockHandler() {

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -14,6 +14,7 @@
 /**
  * Provides mocking information.
  * For example, you can identify whether a particular object is either a mock or a spy.
+ * For examples and more information please refer to the javadoc of the individual methods on this class.
  *
  * @since 1.9.5
  */
@@ -84,7 +85,7 @@ public interface MockingDetails {
      * <p>
      * This method throws meaningful exception when object wrapped by MockingDetails is not a mock.
      *
-     * @since 2.2.0
+     * @since 2.2.3
      */
     Collection<Stubbing> getStubbings();
 }

File: src/main/java/org/mockito/stubbing/Stubbing.java
Patch:
@@ -7,7 +7,7 @@
  * Stubbing declared on the mock object.
  * See detailed description including sample code and use cases see javadoc for {@link MockingDetails#getStubbings()}.
  *
- * @since 2.2.0
+ * @since 2.2.3
  */
 public interface Stubbing {
 
@@ -21,7 +21,7 @@ public interface Stubbing {
      * <p>
      * To understand how this method is useful, see the description at {@link MockingDetails#getStubbings()}.
      *
-     * @since 2.2.0
+     * @since 2.2.3
      */
     Invocation getInvocation();
 
@@ -37,7 +37,7 @@ public interface Stubbing {
      * <p>
      * To understand how this method is useful, see the description at {@link MockingDetails#getStubbings()}.
      *
-     * @since 2.2.0
+     * @since 2.2.3
      */
     boolean wasUsed();
 }

File: src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.mockito.internal.invocation.finder.AllInvocationsFinder;
 import org.mockito.invocation.Invocation;
-import org.mockito.internal.invocation.Stubbing;
+import org.mockito.stubbing.Stubbing;
 
 /**
  * For given mocks, finds stubbing arg mismatches

File: src/main/java/org/mockito/internal/junit/UnusedStubbings.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.internal.junit;
 
 import org.mockito.internal.util.MockitoLogger;
-import org.mockito.internal.invocation.Stubbing;
+import org.mockito.stubbing.Stubbing;
 
 import java.util.Collection;
 

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.internal.stubbing.StubbedInvocationMatcher;
+import org.mockito.stubbing.Stubbing;
 import org.mockito.invocation.Invocation;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -79,7 +79,7 @@ public void provides_stubbings_in_order() throws Exception {
         when(mockTwo.simpleMethod(300)).thenReturn("300");
 
         //when
-        List<StubbedInvocationMatcher> stubbings = new ArrayList<StubbedInvocationMatcher>(findStubbings(asList(mockOne, mockOne, mockTwo)));
+        List<Stubbing> stubbings = new ArrayList<Stubbing>(findStubbings(asList(mockOne, mockOne, mockTwo)));
 
         //then
         assertEquals(3, stubbings.size());

File: src/main/java/org/mockito/internal/util/DefaultMockingDetails.java
Patch:
@@ -52,7 +52,6 @@ public MockCreationSettings<?> getMockCreationSettings() {
 
     @Override
     public Collection<Stubbing> getStubbings() {
-        //TODO 542 don't do any sorting here, don't wrap the collection (it is more flexible this way at the expense of safety)
         List<? extends Stubbing> stubbings = mockHandler().getInvocationContainer().getStubbedInvocations();
         TreeSet<Stubbing> out = new TreeSet<Stubbing>(new StubbingComparator());
         out.addAll(stubbings);

File: src/test/java/org/mockito/internal/util/DefaultMockingDetailsTest.java
Patch:
@@ -156,7 +156,7 @@ public void mock_with_no_stubbings() {
     }
 
     @Test
-    public void provides_stubbings_of_mock() {
+    public void provides_stubbings_of_mock_in_declaration_order() {
         when(mock.simpleMethod(1)).thenReturn("1");
         when(mock.otherMethod()).thenReturn("2");
 

File: src/main/java/org/mockito/internal/invocation/Stubbing.java
Patch:
@@ -3,7 +3,7 @@
 import org.mockito.invocation.Invocation;
 
 /**
- * TODO 542 also javadoc + invocation exposes too much?
+ * TODO 542 javadoc + move to public package
  */
 public interface Stubbing {
 

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.internal.stubbing.StubbedInvocationMatcher;
+import org.mockito.internal.invocation.Stubbing;
 import org.mockito.invocation.Invocation;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -79,7 +79,7 @@ public void provides_stubbings_in_order() throws Exception {
         when(mockTwo.simpleMethod(300)).thenReturn("300");
 
         //when
-        List<StubbedInvocationMatcher> stubbings = new ArrayList<StubbedInvocationMatcher>(findStubbings(asList(mockOne, mockOne, mockTwo)));
+        List<Stubbing> stubbings = new ArrayList<Stubbing>(findStubbings(asList(mockOne, mockOne, mockTwo)));
 
         //then
         assertEquals(3, stubbings.size());

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java
Patch:
@@ -57,7 +57,7 @@ public <T> Class<? extends T> mockClass(MockFeatures<T> features) {
                          .implement(new ArrayList<Type>(features.interfaces))
                          .method(matcher)
                            .intercept(to(DispatcherDefaultingToRealMethod.class))
-                           .transform(withModifiers(SynchronizationState.PLAIN))
+                           .transform(withModifiers(SynchronizationState.PLAIN, Visibility.PUBLIC))
                            .attribute(INCLUDING_RECEIVER)
                          .method(isHashCode())
                            .intercept(to(MockMethodInterceptor.ForHashCode.class))

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2642,6 +2642,7 @@ public static VerificationMode description(String description) {
     /**
      * This API will move soon to a different place.
      * See <a href="https://github.com/mockito/mockito/issues/577">issue 577</a>.
+     * See also <a href="https://github.com/mockito/mockito/issues/542">issue 542</a>.
      */
     @Deprecated
     static MockitoDebugger debug() {

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2642,6 +2642,7 @@ public static VerificationMode description(String description) {
     /**
      * This API will move soon to a different place.
      * See <a href="https://github.com/mockito/mockito/issues/577">issue 577</a>.
+     * See also <a href="https://github.com/mockito/mockito/issues/542">issue 542</a>.
      */
     @Deprecated
     static MockitoDebugger debug() {

File: src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java
Patch:
@@ -6,6 +6,7 @@
 
 import org.junit.Test;
 import org.mockito.InjectMocks;
+import org.mockito.Mockito;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.FieldInitializer.ConstructorArgumentResolver;
 
@@ -156,7 +157,7 @@ public void should_not_fail_if_inner_class_field_is_instantiated() throws Except
 
     @Test
     public void can_instantiate_class_with_parameterized_constructor() throws Exception {
-        ConstructorArgumentResolver resolver = given(mock(ConstructorArgumentResolver.class).resolveTypeInstances(any(Class[].class)))
+        ConstructorArgumentResolver resolver = given(mock(ConstructorArgumentResolver.class).resolveTypeInstances(any(Class.class)))
                         .willReturn(new Object[]{null}).getMock();
 
         new FieldInitializer(this, field("noDefaultConstructor"), resolver).initialize();

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -186,7 +186,7 @@ public void shouldSayNiceMessageWhenSpyingOnPrivateClass() throws Exception {
             assumeTrue("Using inline mocks, it is possible to spy on private types", spy.getClass() != real.getClass());
             fail();
         } catch (MockitoException e) {
-            assertThat(e).hasMessageContaining("Most likely it is a private class that is not visible by Mockito");
+            assertThat(e).hasMessageContaining("Most likely it is due to mocking a private class that is not visible to Mockito");
         }
     }
 }
\ No newline at end of file

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1240,7 +1240,7 @@
  * This mock maker is <strong>turned off by default</strong> because it is based on completely different mocking mechanism
  * that requires more feedback from the community. It can be activated explicitly by the mockito extension mechanism,
  * just create in the classpath a file <code>/mockito-extensions/org.mockito.plugins.MockMaker</code>
- * containing the value <code>mockito-inline</code>.
+ * containing the value <code>mockmaker-inline</code>.
  *
  * <p>
  * Some noteworthy notes about this mock maker:

File: src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -11,7 +11,7 @@ class PluginRegistry {
             .loadPlugin(PluginSwitch.class, DefaultPluginSwitch.class.getName());
 
     private final MockMaker mockMaker = new PluginLoader(pluginSwitch)
-            .withAlias("mockito-inline", "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker")
+            .withAlias("mockmaker-inline", "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker")
             .loadPlugin(MockMaker.class, "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker");
 
     private final StackTraceCleanerProvider stackTraceCleanerProvider = new PluginLoader(pluginSwitch)

File: src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java
Patch:
@@ -89,12 +89,12 @@ private <T> RuntimeException prettifyFailure(MockCreationSettings<T> mockFeature
         if (Modifier.isPrivate(mockFeatures.getTypeToMock().getModifiers())) {
             throw new MockitoException(join(
                     "Mockito cannot mock this class: " + mockFeatures.getTypeToMock() + ".",
-                    "Most likely it is a private class that is not visible by Mockito",
+                    "Most likely it is due to mocking a private class that is not visible to Mockito",
                     ""
             ), generationFailed);
         }
         throw new MockitoException(join(
-                "Mockito cannot mock this class: " + mockFeatures.getTypeToMock(),
+                "Mockito cannot mock this class: " + mockFeatures.getTypeToMock() + ".",
                 "",
                 "Mockito can only non-private & non-final classes.",
                 "If you're not sure why you're getting this error, please report to the mailing list.",
@@ -157,7 +157,7 @@ private static InternalMockHandler<?> asInternalMockHandler(MockHandler handler)
         if (!(handler instanceof InternalMockHandler)) {
             throw new MockitoException(join(
                     "At the moment you cannot provide own implementations of MockHandler.",
-                    "Please see the javadocs for the MockMaker interface.",
+                    "Please refer to the javadocs for the MockMaker interface.",
                     ""
             ));
         }

File: src/main/java/org/mockito/internal/runners/StrictRunner.java
Patch:
@@ -6,7 +6,7 @@
 import org.junit.runner.notification.RunNotifier;
 import org.mockito.Mockito;
 import org.mockito.internal.junit.UnnecessaryStubbingsReporter;
-import org.mockito.internal.runners.util.FailureDetecter;
+import org.mockito.internal.runners.util.FailureDetector;
 
 public class StrictRunner implements RunnerImpl {
 
@@ -26,7 +26,7 @@ public StrictRunner(RunnerImpl runner, Class<?> testClass) {
     public void run(RunNotifier notifier) {
         //TODO need to be able to opt in for full stack trace instead of just relying on the stack trace filter
         UnnecessaryStubbingsReporter reporter = new UnnecessaryStubbingsReporter();
-        FailureDetecter listener = new FailureDetecter();
+        FailureDetector listener = new FailureDetector();
 
         Mockito.framework().addListener(reporter);
         try {
@@ -37,7 +37,7 @@ public void run(RunNotifier notifier) {
             Mockito.framework().removeListener(reporter);
         }
 
-        if (!filterRequested && listener.isSussessful()) {
+        if (!filterRequested && listener.isSuccessful()) {
             //only report when:
             //1. if all tests from given test have ran (filter requested is false)
             //   Otherwise we would report unnecessary stubs even if the user runs just single test from the class

File: src/main/java/org/mockito/internal/runners/util/FailureDetector.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Implementation of JUnit run listener that knows when any of the tests failed
  */
-public class FailureDetecter extends RunListener {
+public class FailureDetector extends RunListener {
 
     private boolean failed;
 
@@ -20,7 +20,7 @@ public void testFailure(Failure failure) throws Exception {
         failed = true;
     }
 
-    public boolean isSussessful() {
+    public boolean isSuccessful() {
         return !failed;
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -25,14 +25,12 @@ public void should_delegate_call() {
 
         mockMaker.createMockType(creationSettings);
         mockMaker.createMock(creationSettings, handler);
-        mockMaker.getMockedType(this);
         mockMaker.getHandler(this);
         mockMaker.isTypeMockable(Object.class);
         mockMaker.resetMock(this, handler, creationSettings);
 
         verify(delegate).createMockType(creationSettings);
         verify(delegate).createMock(creationSettings, handler);
-        verify(delegate).getMockedType(this);
         verify(delegate).getHandler(this);
         verify(delegate).isTypeMockable(Object.class);
         verify(delegate).resetMock(this, handler, creationSettings);

File: src/main/java/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @param <T> type of mock object to handle
  */
-class MockHandlerImpl<T> implements InternalMockHandler<T> {
+public class MockHandlerImpl<T> implements InternalMockHandler<T> {
 
     private static final long serialVersionUID = -2917871070982574165L;
 

File: src/test/java/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java
Patch:
@@ -12,6 +12,7 @@
 import java.lang.reflect.Method;
 
 import static java.lang.annotation.ElementType.*;
+import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.mock;
 
 public class AnnotationsAreCopiedFromMockedTypeTest {
@@ -21,7 +22,8 @@ public void mock_should_have_annotations_copied_from_mocked_type_at_class_level(
         AnnotationWithDefaultValue onClassDefaultValue = mock(OnClass.class).getClass().getAnnotation(AnnotationWithDefaultValue.class);
         AnnotationWithCustomValue onClassCustomValue = mock(OnClass.class).getClass().getAnnotation(AnnotationWithCustomValue.class);
 
-        Assertions.assertThat(mock(OnClass.class).getClass()).isNotSameAs(OnClass.class);
+        assumeTrue("Annotation copying does not apply for inline mocks", mock(OnClass.class).getClass() != OnClass.class);
+
         Assertions.assertThat(onClassDefaultValue.value()).isEqualTo("yup");
         Assertions.assertThat(onClassCustomValue.value()).isEqualTo("yay");
     }

File: src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
+import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.*;
 
 public class DetectingFinalMethodsTest extends TestBase {
@@ -25,7 +26,7 @@ final int foo() {
 
     @Test
     public void shouldFailWithUnfinishedVerification() {
-        withFinal = mock(WithFinal.class);
+        assumeTrue("Does not apply for inline mocks", withFinal.getClass() != WithFinal.class);
         verify(withFinal).foo();
         try {
             verify(withFinal).foo();
@@ -35,6 +36,7 @@ public void shouldFailWithUnfinishedVerification() {
 
     @Test
     public void shouldFailWithUnfinishedStubbing() {
+        assumeTrue("Does not apply for inline mocks", withFinal.getClass() != WithFinal.class);
         withFinal = mock(WithFinal.class);
         try {
             when(withFinal.foo()).thenReturn(null);

File: src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
Patch:
@@ -16,6 +16,7 @@
 
 import static junit.framework.TestCase.fail;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.*;
 
 public class DetectingMisusedMatchersTest extends TestBase {
@@ -80,6 +81,7 @@ public void should_report_argument_locations_when_argument_matchers_misused() {
     
     @Test
     public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {
+        assumeTrue("Does not apply for inline mocks", withFinal.getClass() != WithFinal.class);
         verify(withFinal).finalMethod(anyObject());
         try {
             verify(withFinal);

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import static junit.framework.TestCase.*;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.*;
 
 public class SpyingOnRealObjectsTest extends TestBase {
@@ -181,7 +182,8 @@ public String print() {
     public void shouldSayNiceMessageWhenSpyingOnPrivateClass() throws Exception {
         List<String> real = Arrays.asList("first", "second");
         try {
-            spy(real);
+            List<String> spy = spy(real);
+            assumeTrue("Using inline mocks, it is possible to spy on private types", spy.getClass() != real.getClass());
             fail();
         } catch (MockitoException e) {
             assertThat(e).hasMessageContaining("Most likely it is a private class that is not visible by Mockito");

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyMockMaker.java
Patch:
@@ -1,10 +1,10 @@
 package org.mockitousage.plugins.switcher;
 
-import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;
+import org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;
 
-public class MyMockMaker extends ByteBuddyMockMaker {
+public class MyMockMaker extends SubclassByteBuddyMockMaker {
 
     static ThreadLocal<Object> explosive = new ThreadLocal<Object>();
 

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -264,7 +264,7 @@
  *   mockedList.clear();
  * </code></pre>
  *
- * Read more about doThrow|doAnswer family of methods in paragraph 12.
+ * Read more about <code>doThrow()</code>|<code>doAnswer()</code> family of methods in <a href="#12">section 12</a>.
  * <p>
  *
  * <h3 id="6">6. <a class="meaningful_link" href="#in_order_verification">Verification in order</a></h3>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -70,7 +70,7 @@
  *      <a href="#37">37. (new) Java 8 Custom Answer Support (Since 2.1.0)</a><br/>
  * </b>
  *
- * <h3 id="0">0. <a class="meaningful_link" href="#verification">Migrating to Mockito 2</a></h3>
+ * <h3 id="0">0. <a class="meaningful_link" href="#mockito2">Migrating to Mockito 2</a></h3>
  *
  * In order to continue improving Mockito and further improve the unit testing experience, we want you to upgrade to 2.1.0!
  * Mockito follows <a href="http://semver.org/">semantic versioning</a>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -73,14 +73,14 @@
  *
  * <h3 id="0">0. <a class="meaningful_link" href="#verification">Migrating to 2.1.0</a></h3>
  *
- * In order to continue improving Mockito and further improve the unit testing experience, we want you to upgrade to 2.0.
+ * In order to continue improving Mockito and further improve the unit testing experience, we want you to upgrade to 2.1.0!
  * Mockito follows <a href="http://semver.org/">semantic versioning</a>
  * and contains breaking changes only on major version upgrades.
  * In the lifecycle of a library, breaking changes are necessary
  * to roll out a set of brand new features that alter the existing behavior or even change the API.
  * We hope that you enjoy Mockito 2.1.0!
  * <p>
- * List of breaking changes:
+ * List of breaking changes: TODO 596
  * <ul>
  *     <li>Mockito is decoupled from Hamcrest and custom matchers API has changed, see {@link ArgumentMatcher}
  *     for rationale and migration guide.</li>
@@ -1233,7 +1233,7 @@ public class Mockito extends ArgumentMatchers {
      * <code>ReturnsSmartNulls</code> first tries to return ordinary return values (see {@link ReturnsMoreEmptyValues})
      * then it tries to return SmartNull. If the return type is final then plain null is returned.
      * <p>
-     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 2.0.
+     * <code>ReturnsSmartNulls</code> will be probably the default return values strategy in Mockito 3.0.0
      * <p>
      * Example:
      * <pre class="code"><code class="java">

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -13,7 +13,7 @@
 import java.lang.reflect.Array;
 
 /**
- * It's likely this implementation will be used by default by every Mockito 2.1.0 mock.
+ * It's likely this implementation will be used by default by every Mockito 3.0.0 mock.
  * <p>
  * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}
  * <p>

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -13,7 +13,7 @@
 import java.lang.reflect.Array;
 
 /**
- * It's likely this implementation will be used by default by every Mockito 2.1.0 mock.
+ * It's likely this implementation will be used by default by every Mockito 3.0.0 mock.
  * <p>
  * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}
  * <p>

File: src/main/java/org/mockito/Answers.java
Patch:
@@ -88,7 +88,7 @@ public enum Answers implements Answer<Object>{
     }
 
     /**
-     * @deprecated as of 2.0.0 Use the enum-constant directly, instead of this getter. This method will be removed in a future release<br>
+     * @deprecated as of 2.1.0 Use the enum-constant directly, instead of this getter. This method will be removed in a future release<br>
      * E.g. instead of <code>Answers.CALLS_REAL_METHODS.get()</code> use <code>Answers.CALLS_REAL_METHODS</code> .
      */
     @Deprecated

File: src/main/java/org/mockito/ArgumentMatcher.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Allows creating customized argument matchers.
- * This API was changed in Mockito 2.0.0 in an effort to decouple Mockito from Hamcrest
+ * This API was changed in Mockito 2.1.0 in an effort to decouple Mockito from Hamcrest
  * and reduce the risk of version incompatibility.
  * Migration guide is included close to the bottom of this javadoc.
  * <p>
@@ -81,7 +81,7 @@
  *
  * <p>
  * Read more about other matchers in javadoc for {@link Matchers} class.
- * <h2>2.0.0 migration guide</h2>
+ * <h2>2.1.0 migration guide</h2>
  *
  * All existing custom implementations of <code>ArgumentMatcher</code> will no longer compile.
  * All locations where hamcrest matchers are passed to <code>argThat()</code> will no longer compile.
@@ -104,7 +104,7 @@
  * you can choose different option in future (and refactor the code)
  *
  * @param <T> type of argument
- * @since 2.0.0
+ * @since 2.1.0
  */
 public interface ArgumentMatcher<T> {
 

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -53,7 +53,7 @@ public interface MockingDetails {
      * If <code>null</code> or non-mock was passed to {@link Mockito#mockingDetails(Object)}
      * then this method will throw with an appropriate exception.
      * After all, non-mock objects do not have any mock creation settings.
-     * @since 2.0.0
+     * @since 2.1.0
      */
     MockCreationSettings<?> getMockCreationSettings();
 }

File: src/main/java/org/mockito/MockitoFramework.java
Patch:
@@ -9,7 +9,7 @@
  * <p>
  * For more info on listeners see {@link #addListener(MockitoListener)}.
  *
- * @since 2.0.0
+ * @since 2.1.0
  */
 @Incubating
 public interface MockitoFramework {

File: src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -27,7 +27,7 @@ public MockitoAssertionError(String message) {
      * Creates a copy of the given assertion error with the custom failure message prepended.
      * @param error The assertion error to copy
      * @param message The custom message to prepend
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public MockitoAssertionError(MockitoAssertionError error, String message) {
         super(message + "\n" + error.getMessage());

File: src/main/java/org/mockito/hamcrest/MockitoHamcrest.java
Patch:
@@ -17,7 +17,7 @@
  * Before implementing or reusing an existing hamcrest matcher please read
  * how to deal with sophisticated argument matching in {@link ArgumentMatcher}.
  * <p/>
- * Mockito 2.0.0 was decoupled from Hamcrest to avoid version incompatibilities
+ * Mockito 2.1.0 was decoupled from Hamcrest to avoid version incompatibilities
  * that have impacted our users in past. Mockito offers a dedicated API to match arguments
  * via {@link ArgumentMatcher}.
  * Hamcrest integration is provided so that users can take advantage of existing Hamcrest matchers.
@@ -39,7 +39,7 @@
  * Hopefully, the javadoc describes the problem and solution well.
  * If you have an idea how to fix the problem, let us know via the mailing list or the issue tracker.
  *
- * @since 2.0.0
+ * @since 2.1.0
  */
 public class MockitoHamcrest {
 
@@ -50,7 +50,7 @@ public class MockitoHamcrest {
      *
      * @param matcher decides whether argument matches
      * @return <code>null</code> or default value for primitive (0, false, etc.)
-     * @since 2.0.0
+     * @since 2.1.0
      */
     @SuppressWarnings("unchecked")
     public static <T> T argThat(Matcher<T> matcher) {

File: src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java
Patch:
@@ -186,7 +186,7 @@ public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTrans
      * @param reflectUpToClass  the superclass to reflect up to (inclusive),
      *  may be <code>null</code>
      * @return <code>true</code> if the two Objects have tested equals.
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class<?> reflectUpToClass) {
         return reflectionEquals(lhs, rhs, testTransients, reflectUpToClass, null);
@@ -216,7 +216,7 @@ public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTrans
      *  may be <code>null</code>
      * @param excludeFields  array of field names to exclude from testing
      * @return <code>true</code> if the two Objects have tested equals.
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class<?> reflectUpToClass,
             String[] excludeFields) {
@@ -312,7 +312,7 @@ private static void reflectionAppend(
      *
      * @param superEquals  the result of calling <code>super.equals()</code>
      * @return EqualsBuilder - used to chain calls.
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public EqualsBuilder appendSuper(boolean superEquals) {
         isEquals &= superEquals;

File: src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * Functional interfaces to make it easy to implement answers in Java 8
  * 
- * @since 2.0.0
+ * @since 2.1.0
  */
 public class AnswerFunctionalInterfaces {
 	/**

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -13,7 +13,7 @@
 import java.lang.reflect.Array;
 
 /**
- * It's likely this implementation will be used by default by every Mockito 2.0.0 mock.
+ * It's likely this implementation will be used by default by every Mockito 2.1.0 mock.
  * <p>
  * Currently <b>used only</b> by {@link Mockito#RETURNS_SMART_NULLS}
  * <p>

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -32,7 +32,7 @@
  * return type is not mockable (e.g. final) then ordinary null is returned.
  * <p>
  * ReturnsSmartNulls will be probably the default return values strategy in
- * Mockito 2.0.0
+ * Mockito 2.1.0
  */
 public class ReturnsSmartNulls implements Answer<Object>, Serializable {
 

File: src/main/java/org/mockito/internal/verification/Description.java
Patch:
@@ -8,7 +8,7 @@
  * Description verification mode wraps an existing verification mode and prepends
  * a custom message to the assertion error if verification fails.
  * @author Geoff.Schoeman
- * @since 2.0.0
+ * @since 2.1.0
  */
 public class Description implements VerificationMode {
 

File: src/main/java/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -42,7 +42,7 @@ public static VerificationMode atMost(int maxNumberOfInvocations) {
      * @param mode Implementation used for verification
      * @param description The custom failure message
      * @return VerificationMode
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public static VerificationMode description(VerificationMode mode, String description) {
         return new Description(mode, description);

File: src/main/java/org/mockito/invocation/InvocationOnMock.java
Patch:
@@ -40,7 +40,7 @@ public interface InvocationOnMock extends Serializable {
      * Returns casted argument at the given index
      * @param index argument index
      * @return casted argument at the given index
-     * @since 2.0.0
+     * @since 2.1.0
      */
     <T> T getArgument(int index);
 

File: src/main/java/org/mockito/junit/MockitoJUnit.java
Patch:
@@ -28,7 +28,7 @@ public static MockitoRule rule() {
      *
      * @see VerificationCollector
      * @return the rule instance
-     * @since 2.0.0
+     * @since 2.1.0
      */
     @Incubating
     public static VerificationCollector collector() {

File: src/main/java/org/mockito/plugins/MockMaker.java
Patch:
@@ -110,15 +110,15 @@ void resetMock(
      *
      * @param type The type inspected for mockability.
      * @return object that carries the information about mockability of given type.
-     * @since 2.0.0
+     * @since 2.1.0
      */
     @Incubating
     TypeMockability isTypeMockable(Class<?> type);
 
     /**
      * Carries the mockability information
      *
-     * @since 2.0.0
+     * @since 2.1.0
      */
     @Incubating
     interface TypeMockability {

File: src/main/java/org/mockito/quality/MockitoHint.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.quality;
 
 /**
- * Starting with 2.0.0 of Mockito stubbing hints / warnings are printed to standard output.
+ * Starting with 2.1.0 of Mockito stubbing hints / warnings are printed to standard output.
  * Hints contain clickable links that take you right to the line of code that contains a possible problem.
  * Those are hints - they not necessarily indicate real problems 100% of the time.
  * This way the developer can:
@@ -60,7 +60,7 @@
  * <p>
  * Feedback very welcome at <a href="https://github.com/mockito/mockito/issues/384">issue 384</a>.
  *
- * @since 2.0.0
+ * @since 2.1.0
  */
 public interface MockitoHint {
 }

File: src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.reflect.InvocationTargetException;
 
 /**
- * @deprecated as of 2.0.0. Use the {@link org.mockito.runners.MockitoJUnitRunner} runner instead
+ * @deprecated as of 2.1.0. Use the {@link org.mockito.runners.MockitoJUnitRunner} runner instead
  * which contains support for detecting unused stubs.
  * <p>
  * If you still prefer using this runner, tell us why (create ticket in our issue tracker).

File: src/main/java/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -24,7 +24,7 @@
  * Compatible with <b>JUnit 4.4 and higher</b>, this runner adds following behavior:
  * <ul>
  *   <li>
- *       (new since Mockito 2.0.0) Detects unused stubs in the test code.
+ *       (new since Mockito 2.1.0) Detects unused stubs in the test code.
  *       See {@link org.mockito.exceptions.misusing.UnnecessaryStubbingException}.
  *       To opt-out from this feature, use {@code}&#064;RunWith(MockitoJUnitRunner.Silent.class){@code}
  *   <li>
@@ -68,7 +68,7 @@ public class MockitoJUnitRunner extends Runner implements Filterable {
      *
      * See also {@link org.mockito.exceptions.misusing.UnnecessaryStubbingException}
      *
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public static class Silent extends MockitoJUnitRunner {
         public Silent(Class<?> klass) throws InvocationTargetException {
@@ -80,7 +80,7 @@ public Silent(Class<?> klass) throws InvocationTargetException {
      * Detects unused stubs and reports them as failures. Default behavior.
      * See {@link org.mockito.exceptions.misusing.UnnecessaryStubbingException}
      *
-     * @since 2.0.0
+     * @since 2.1.0
      */
     public static class Strict extends MockitoJUnitRunner {
         public Strict(Class<?> klass) throws InvocationTargetException {

File: src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java
Patch:
@@ -20,7 +20,7 @@
 import java.lang.reflect.InvocationTargetException;
 
 /**
- * @deprecated as of 2.0.0. Use the {@link org.mockito.runners.MockitoJUnitRunner} runner instead
+ * @deprecated as of 2.1.0. Use the {@link org.mockito.runners.MockitoJUnitRunner} runner instead
  * which contains support for detecting unused stubs.
  * <p>
  * If you still prefer using this runner, tell us why (create ticket in our issue tracker).

File: src/main/java/org/mockito/stubbing/OngoingStubbing.java
Patch:
@@ -109,7 +109,7 @@ public interface OngoingStubbing<T> {
      * @param throwableType to be thrown on method invocation
      *
      * @return iOngoingStubbing object that allows stubbing consecutive calls
-     * @since 2.0.0
+     * @since 2.1.0
      */
     OngoingStubbing<T> thenThrow(Class<? extends Throwable> throwableType);
 
@@ -142,7 +142,7 @@ public interface OngoingStubbing<T> {
      * @param nextToBeThrown next to be thrown on method invocation
      *
      * @return iOngoingStubbing object that allows stubbing consecutive calls
-     * @since 2.0.0
+     * @since 2.1.0
      */
     // Additional method helps users of JDK7+ to hide heap pollution / unchecked generics array creation warnings (on call site)
     @SuppressWarnings ({"unchecked", "varargs"})

File: src/main/java/org/mockito/stubbing/Stubber.java
Patch:
@@ -97,7 +97,7 @@ public interface Stubber {
      * @param toBeThrown exception class to be thrown when the stubbed method is called
      * @return stubber - to select a method for stubbing
      *
-     * @since 2.0.0
+     * @since 2.1.0
      */
     Stubber doThrow(Class<? extends Throwable> toBeThrown);
 
@@ -114,7 +114,7 @@ public interface Stubber {
      * @param nextToBeThrown exception class next to be thrown when the stubbed method is called
      * @return stubber - to select a method for stubbing
      *
-     * @since 2.0.0
+     * @since 2.1.0
      */
     // Additional method helps users of JDK7+ to hide heap pollution / unchecked generics array creation
     @SuppressWarnings ({"unchecked", "varargs"})

File: src/main/java/org/mockito/verification/VerificationMode.java
Patch:
@@ -37,7 +37,7 @@ public interface VerificationMode {
      * Description will be prepended to the assertion error if verification fails.
      * @param description The custom failure message
      * @return VerificationMode
-     * @since 2.0.0
+     * @since 2.1.0
      */
     VerificationMode description(String description);
 }
\ No newline at end of file

File: src/main/java/org/mockito/Answers.java
Patch:
@@ -88,7 +88,7 @@ public enum Answers implements Answer<Object>{
     }
 
     /**
-     * @deprecated as of 2.0. Use the enum-constant directly, instead of this getter. This method will be removed in a future release<br>
+     * @deprecated as of 2.0.0 Use the enum-constant directly, instead of this getter. This method will be removed in a future release<br>
      * E.g. instead of <code>Answers.CALLS_REAL_METHODS.get()</code> use <code>Answers.CALLS_REAL_METHODS</code> .
      */
     @Deprecated

File: src/main/java/org/mockito/stubbing/Answer1.java
Patch:
@@ -1,11 +1,14 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * One parameter function which returns something
  *
  * @param <T> return type
  * @param <A> input parameter 1 type
  */
+@Incubating
 public interface Answer1<T, A> {
     T answer(A a);
 }

File: src/main/java/org/mockito/stubbing/Answer2.java
Patch:
@@ -1,12 +1,15 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Two parameter function which returns something
  *
  * @param <T> return type
  * @param <A> input parameter 1 type
  * @param <B> input parameter 2 type
  */
+@Incubating
 public interface Answer2<T, A, B> {
     T answer(A a, B b);
 }

File: src/main/java/org/mockito/stubbing/Answer3.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Three parameter function which returns something
  *
@@ -8,6 +10,7 @@
  * @param <B> input parameter 2 type
  * @param <C> input parameter 3 type
  */
+@Incubating
 public interface Answer3<T, A, B, C> {
     T answer(A a, B b, C c);
 }

File: src/main/java/org/mockito/stubbing/Answer4.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Three parameter function which returns something
  *
@@ -9,6 +11,7 @@
  * @param <C> input parameter 3 type
  * @param <D> input parameter 4 type
  */
+@Incubating
 public interface Answer4<T, A, B, C, D> {
     T answer(A a, B b, C c, D d);
 }

File: src/main/java/org/mockito/stubbing/Answer5.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Three parameter function which returns something
  *
@@ -10,6 +12,7 @@
  * @param <D> input parameter 4 type
  * @param <E> input parameter 5 type
  */
+@Incubating
 public interface Answer5<T, A, B, C, D, E> {
     T answer(A a, B b, C c, D d, E e);
 }

File: src/main/java/org/mockito/stubbing/VoidAnswer1.java
Patch:
@@ -1,10 +1,13 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * One parameter void function
  *
  * @param <A> input parameter 1 type
  */
+@Incubating
 public interface VoidAnswer1<A> {
     void answer(A a);
 }

File: src/main/java/org/mockito/stubbing/VoidAnswer2.java
Patch:
@@ -1,11 +1,14 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Two parameter void function
  *
  * @param <A> input parameter 1 type
  * @param <B> input parameter 2 type
  */
+@Incubating
 public interface VoidAnswer2<A, B> {
     void answer(A a, B b);
 }

File: src/main/java/org/mockito/stubbing/VoidAnswer3.java
Patch:
@@ -1,12 +1,15 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Two parameter void function
  *
  * @param <A> input parameter 1 type
  * @param <B> input parameter 2 type
  * @param <C> input parameter 3 type
  */
+@Incubating
 public interface VoidAnswer3<A, B, C> {
     void answer(A a, B b, C c);
 }

File: src/main/java/org/mockito/stubbing/VoidAnswer4.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Two parameter void function
  *
@@ -8,6 +10,7 @@
  * @param <C> input parameter 3 type
  * @param <D> input parameter 4 type
  */
+@Incubating
 public interface VoidAnswer4<A, B, C, D> {
     void answer(A a, B b, C c, D d);
 }

File: src/main/java/org/mockito/stubbing/VoidAnswer5.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.stubbing;
 
+import org.mockito.Incubating;
+
 /**
  * Two parameter void function
  *
@@ -9,6 +11,7 @@
  * @param <D> input parameter 4 type
  * @param <E> input parameter 5 type
  */
+@Incubating
 public interface VoidAnswer5<A, B, C, D, E> {
     void answer(A a, B b, C c, D d, E e);
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java
Patch:
@@ -4,10 +4,10 @@
 
 class Improvement {
 
-    private final long id;
+    private final long id; //TODO SF String
     private final String title;
     private final String url;
-    private final Collection<String> labels;
+    final Collection<String> labels;
 
     public Improvement(long id, String title, String url, Collection<String> labels) {
         this.id = id;

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementsProvider.java
Patch:
@@ -2,7 +2,9 @@
 
 import org.mockito.release.notes.vcs.ContributionSet;
 
+import java.util.Map;
+
 public interface ImprovementsProvider {
 
-    ImprovementSet getImprovements(ContributionSet contributions);
+    ImprovementSet getImprovements(ContributionSet contributions, Map<String, String> labels);
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java
Patch:
@@ -4,7 +4,7 @@
 
 class Improvement {
 
-    private final long id;
+    private final long id; //TODO SF String
     private final String title;
     private final String url;
     final Collection<String> labels;

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementsProvider.java
Patch:
@@ -2,7 +2,9 @@
 
 import org.mockito.release.notes.vcs.ContributionSet;
 
+import java.util.Map;
+
 public interface ImprovementsProvider {
 
-    ImprovementSet getImprovements(ContributionSet contributions);
+    ImprovementSet getImprovements(ContributionSet contributions, Map<String, String> labels);
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/DefaultImprovements.java
Patch:
@@ -5,7 +5,7 @@
 
 class DefaultImprovements implements ImprovementSet {
 
-    private final List<Improvement> improvements = new LinkedList<Improvement>();
+    final List<Improvement> improvements = new LinkedList<Improvement>();
 
     public String toText() {
         if (improvements.isEmpty()) {

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java
Patch:
@@ -7,7 +7,7 @@ class Improvement {
     private final long id;
     private final String title;
     private final String url;
-    private final Collection<String> labels;
+    final Collection<String> labels;
 
     public Improvement(long id, String title, String url, Collection<String> labels) {
         this.id = id;

File: src/main/java/org/mockito/internal/junit/UnusedStubbings.java
Patch:
@@ -10,9 +10,9 @@
  */
 public class UnusedStubbings {
 
-    private final Collection<Stubbing> unused;
+    private final Collection<? extends Stubbing> unused;
 
-    UnusedStubbings(Collection<Stubbing> unused) {
+    UnusedStubbings(Collection<? extends Stubbing> unused) {
         this.unused = unused;
     }
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Commit.java
Patch:
@@ -7,12 +7,12 @@ public interface Commit {
     /**
      * Author identifier. For git it would be 'email'
      */
-    String getAuthorId();
+    String getAuthorEmail();
 
     /**
      * Author display name. For git it would be 'author'
      */
-    String getAuthor();
+    String getAuthorName();
 
     /**
      * Commit message

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java
Patch:
@@ -17,11 +17,11 @@ public GitCommit(String email, String author, String message) {
         this.tickets = TicketParser.parseTickets(message);
     }
 
-    public String getAuthorId() {
+    public String getAuthorEmail() {
         return email;
     }
 
-    public String getAuthor() {
+    public String getAuthorName() {
         return author;
     }
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java
Patch:
@@ -32,6 +32,7 @@ public ContributionSet getContributionsBetween(String fromRev, String toRev) {
                 String email = entryParts[0].trim();
                 String author = entryParts[1].trim();
                 String message = entryParts[2].trim();
+                LOG.info("Loaded commit - email: {}, author: {}, message (trimmed): {}", email, author, message.replaceAll("\n.*", ""));
                 contributions.add(new GitCommit(email, author, message));
             }
         }

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Commit.java
Patch:
@@ -7,12 +7,12 @@ public interface Commit {
     /**
      * Author identifier. For git it would be 'email'
      */
-    String getAuthorId();
+    String getAuthorEmail();
 
     /**
      * Author display name. For git it would be 'author'
      */
-    String getAuthor();
+    String getAuthorName();
 
     /**
      * Commit message

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java
Patch:
@@ -17,11 +17,11 @@ public GitCommit(String email, String author, String message) {
         this.tickets = TicketParser.parseTickets(message);
     }
 
-    public String getAuthorId() {
+    public String getAuthorEmail() {
         return email;
     }
 
-    public String getAuthor() {
+    public String getAuthorName() {
         return author;
     }
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java
Patch:
@@ -32,6 +32,7 @@ public ContributionSet getContributionsBetween(String fromRev, String toRev) {
                 String email = entryParts[0].trim();
                 String author = entryParts[1].trim();
                 String message = entryParts[2].trim();
+                LOG.info("Loaded commit - email: {}, author: {}, message (trimmed): {}", email, author, message.replaceAll("\n.*", ""));
                 contributions.add(new GitCommit(email, author, message));
             }
         }

File: src/test/java/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -39,7 +39,7 @@ public void shouldDescribeWithExtraTypeInfo() throws Exception {
     public void shouldDescribeWithExtraTypeInfoOfLong() throws Exception {
         String descStr = new Equals(100L).toStringWithType();
         
-        assertEquals("(Long) 100", descStr);
+        assertEquals("(Long) 100L", descStr);
     }
 
     @Test

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -374,7 +374,7 @@ public void should_print_method_name_and_arguments_of_other_interactions_with_di
             assertThat(e)
                 .hasMessageContaining("iMethods.threeArgumentMethod(12, foo, \"xx\")")
                 .hasMessageContaining("iMethods.arrayMethod([\"a\", \"b\", \"c\"])")
-                .hasMessageContaining("iMethods.forByte(25)");
+                .hasMessageContaining("iMethods.forByte(0x19)");
         }
     }
 

File: src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java
Patch:
@@ -1,7 +1,8 @@
 package org.mockito.exceptions.misusing;
 
 /**
- * Unnecessary stubs are stubbed method calls that were never realized during test execution, example:
+ * Unnecessary stubs are stubbed method calls that were never realized during test execution
+ * (see also {@link org.mockito.quality.MockitoHint}), example:
  * <pre class="code"><code class="java">
  * //code under test:
  * ...

File: src/main/java/org/mockito/internal/junit/UnusedStubbings.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Contains unused stubbings, knows how to format them
  */
-class UnusedStubbings {
+public class UnusedStubbings {
 
     private final Collection<Stubbing> unused;
 
@@ -31,7 +31,7 @@ void format(String testName, MockitoLogger logger) {
         logger.log(hint.toString());
     }
 
-    int size() {
+    public int size() {
         return unused.size();
     }
 

File: src/main/java/org/mockito/internal/runners/StrictRunner.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunNotifier;
 import org.mockito.Mockito;
+import org.mockito.internal.junit.UnnecessaryStubbingsReporter;
 import org.mockito.internal.runners.util.FailureDetecter;
 
 public class StrictRunner implements RunnerImpl {
@@ -27,21 +28,20 @@ public void run(RunNotifier notifier) {
         UnnecessaryStubbingsReporter reporter = new UnnecessaryStubbingsReporter();
         FailureDetecter listener = new FailureDetecter();
 
-        Mockito.framework().setStubbingListener(reporter);
+        Mockito.framework().addListener(reporter);
         try {
             // add listener that detects test failures
             notifier.addListener(listener);
             runner.run(notifier);
         } finally {
-            Mockito.framework().setStubbingListener(null);
+            Mockito.framework().removeListener(reporter);
         }
 
         if (!filterRequested && listener.isSussessful()) {
             //only report when:
             //1. if all tests from given test have ran (filter requested is false)
             //   Otherwise we would report unnecessary stubs even if the user runs just single test from the class
             //2. tests are successful (we don't want to add an extra failure on top of any existing failure, to avoid confusion)
-            //TODO 401 JUnit runner should have a specific message explaining to the user how it works.
             reporter.validateUnusedStubs(testClass, notifier);
         }
     }

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -76,13 +76,11 @@ public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {
         synchronized (stubbed) {
             for (StubbedInvocationMatcher s : stubbed) {
                 if (s.matches(invocation)) {
-                    mockingProgress().getStubbingListener().usedStubbing(s.getInvocation(), invocation);
                     s.markStubUsed(invocation);
                     invocation.markStubbed(new StubInfoImpl(s));
                     return s;
                 }
             }
-            mockingProgress().getStubbingListener().stubbingNotFound(invocation);
         }
 
         return null;

File: src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java
Patch:
@@ -20,9 +20,6 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
-/**
- * Created by sfaber on 4/22/16.
- */
 public class SilentRunnerTest extends TestBase {
 
     JUnitCore runner = new JUnitCore();

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -13,9 +13,6 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
-/**
- * Created by sfaber on 4/22/16.
- */
 public class UnusedStubsExceptionMessageTest extends TestBase {
 
     //Moving the code around this class is tricky and may cause the test to fail

File: src/test/java/org/mockitoutil/TestBaseTest.java
Patch:
@@ -4,9 +4,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-/**
- * Created by sfaber on 7/22/16.
- */
 public class TestBaseTest extends TestBase {
 
     @Test public void filters_line_no_from_stack_trace() {

File: src/main/java/org/mockito/internal/debugging/WarningsFinder.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-@SuppressWarnings("unchecked")
 public class WarningsFinder {
     private final List<Invocation> baseUnusedStubs;
     private final List<InvocationMatcher> baseAllInvocations;
@@ -22,8 +21,8 @@ public WarningsFinder(List<Invocation> unusedStubs, List<InvocationMatcher> allI
     }
     
     public void find(FindingsListener findingsListener) {
-        List<Invocation> unusedStubs = new LinkedList(this.baseUnusedStubs);
-        List<InvocationMatcher> allInvocations = new LinkedList(this.baseAllInvocations);
+        List<Invocation> unusedStubs = new LinkedList<Invocation>(this.baseUnusedStubs);
+        List<InvocationMatcher> allInvocations = new LinkedList<InvocationMatcher>(this.baseAllInvocations);
 
         Iterator<Invocation> unusedIterator = unusedStubs.iterator();
         while(unusedIterator.hasNext()) {

File: src/main/java/org/mockito/internal/matchers/text/MatchersPrinter.java
Patch:
@@ -25,8 +25,8 @@ public String getArgumentsBlock(List<ArgumentMatcher> matchers, PrintSettings pr
         return ValuePrinter.printValues("(\n    ", ",\n    ", "\n);", args);
     }
 
-    private Iterator applyPrintSettings(List<ArgumentMatcher> matchers, PrintSettings printSettings) {
-        List out = new LinkedList();
+    private Iterator<FormattedText> applyPrintSettings(List<ArgumentMatcher> matchers, PrintSettings printSettings) {
+        List<FormattedText> out = new LinkedList<FormattedText>();
         int i = 0;
         for (final ArgumentMatcher matcher : matchers) {
             if (matcher instanceof ContainsExtraTypeInfo && printSettings.extraTypeInfoFor(i)) {

File: src/main/java/org/mockito/internal/util/Checks.java
Patch:
@@ -17,7 +17,7 @@ public static <T> T checkNotNull(T value, String checkedValue) {
         return value;
     }
 
-    public static <T extends Iterable> T checkItemsNotNull(T iterable, String checkedIterable) {
+    public static <T extends Iterable<?>> T checkItemsNotNull(T iterable, String checkedIterable) {
         checkNotNull(iterable, checkedIterable);
         for (Object item : iterable) {
             checkNotNull(item, "item in " + checkedIterable);

File: src/main/java/org/mockito/internal/util/MockNameImpl.java
Patch:
@@ -15,7 +15,7 @@ public class MockNameImpl implements MockName, Serializable {
     private boolean defaultName;
 
     @SuppressWarnings("unchecked")
-    public MockNameImpl(String mockName, Class classToMock) {
+    public MockNameImpl(String mockName, Class<?> classToMock) {
         if (mockName == null) {
             this.mockName = toInstanceName(classToMock);
             this.defaultName = true;

File: src/test/java/org/mockito/internal/invocation/InvocationImplTest.java
Patch:
@@ -56,7 +56,7 @@ public void shouldEqualToNotConsiderSequenceNumber() {
     
     @Test
     public void shouldBeACitizenOfHashes() {
-        Map map = new HashMap();
+        Map<Invocation, String> map = new HashMap<Invocation, String>();
         map.put(invocation, "one");
         assertEquals("one", map.get(invocation));
     }

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Patch:
@@ -71,7 +71,7 @@ public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_
         GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);
 
         Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();
-        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable) mock.typeVarWithTypeParams();
+        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable<?>) mock.typeVarWithTypeParams();
     }
 
     @Test

File: src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java
Patch:
@@ -20,7 +20,7 @@ private interface HasCompareToButDoesNotImplementComparable {
         int compareTo(HasCompareToButDoesNotImplementComparable other);
     }
 
-    private interface HasCompare extends Comparable {
+    private interface HasCompare extends Comparable<HasCompare> {
         int foo(HasCompare other);
         int compareTo(HasCompare other, String redHerring);
         int compareTo(String redHerring);

File: src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -109,8 +109,8 @@ public void shouldNotContainAllInvocationsWhenSingleUnwantedFound() throws Excep
     
     @Test
     public void shouldVerifyOneMockButFailOnOther() throws Exception {
-        List list = mock(List.class);
-        Map map = mock(Map.class);
+        List<String> list = mock(List.class);
+        Map<String, Integer> map = mock(Map.class);
 
         list.add("one");
         list.add("one");

File: src/test/java/org/mockitoutil/ClassLoaders.java
Patch:
@@ -202,7 +202,7 @@ public InMemoryClassLoader(ClassLoader parent, Map<String, byte[]> inMemoryClass
             this.inMemoryClassObjects = inMemoryClassObjects;
         }
 
-        protected Class findClass(String name) throws ClassNotFoundException {
+        protected Class<?> findClass(String name) throws ClassNotFoundException {
             byte[] classDefinition = inMemoryClassObjects.get(name);
             if (classDefinition != null) {
                 return defineClass(name, classDefinition, 0, classDefinition.length);

File: src/test/java/org/mockitoutil/SimplePerRealmReloadingClassLoader.java
Patch:
@@ -14,7 +14,7 @@
  */
 public class SimplePerRealmReloadingClassLoader extends URLClassLoader {
 
-    private final Map<String,Class> classHashMap = new HashMap<String, Class>();
+    private final Map<String,Class<?>> classHashMap = new HashMap<String, Class<?>>();
     private ReloadClassPredicate reloadClassPredicate;
 
     public SimplePerRealmReloadingClassLoader(ReloadClassPredicate reloadClassPredicate) {

File: src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java
Patch:
@@ -27,7 +27,6 @@ public void format(String testName, MockitoLogger logger) {
         }
 
         StubbingHint hint = new StubbingHint(testName);
-        //TODO 544 it would be nice to make the String look good if x goes multiple digits (padding)
         int x = 1;
         for (Map.Entry<Invocation, Set<Invocation>> m : mismatches.entrySet()) {
             hint.appendLine(x++, ". Unused... ", m.getKey().getLocation());

File: src/main/java/org/mockito/internal/junit/UnusedStubbings.java
Patch:
@@ -21,7 +21,6 @@ void format(String testName, MockitoLogger logger) {
             return;
         }
 
-        //TODO 544 it would be nice to make the String look good if x goes multiple digits (padding)
         StubbingHint hint = new StubbingHint(testName);
         int x = 1;
         for (Stubbing candidate : unused) {

File: src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Set;
 
 import static junit.framework.TestCase.*;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class MockSettingsImplTest extends TestBase {
 
@@ -96,7 +97,7 @@ public void shouldAddVerboseLoggingListener() {
         mockSettingsImpl.verboseLogging();
 
         //then
-        assertContainsType(mockSettingsImpl.getInvocationListeners(), VerboseMockInvocationLogger.class);
+        assertThat(mockSettingsImpl.getInvocationListeners()).extracting("class").contains(VerboseMockInvocationLogger.class);
     }
 
     @Test

File: src/main/java/org/mockito/internal/util/Checks.java
Patch:
@@ -12,7 +12,7 @@ public class Checks {
 
     public static <T> T checkNotNull(T value, String checkedValue) {
         if(value == null) {
-            throw new NullPointerException(checkedValue + " should not be null");
+            throw new IllegalArgumentException(checkedValue + " should not be null");
         }
         return value;
     }

File: src/main/java/org/mockito/internal/util/Checks.java
Patch:
@@ -12,7 +12,7 @@ public class Checks {
 
     public static <T> T checkNotNull(T value, String checkedValue) {
         if(value == null) {
-            throw new NullPointerException(checkedValue + " should not be null");
+            throw new IllegalArgumentException(checkedValue + " should not be null");
         }
         return value;
     }

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito;
 
-import org.mockito.internal.DefaultMockitoFramework;
+import org.mockito.internal.framework.DefaultMockitoFramework;
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.debugging.MockitoDebuggerImpl;
@@ -2579,7 +2579,7 @@ public static VerificationMode description(String description) {
     }
 
     /**
-     * Helps debugging failing tests. Experimental - use at your own risk. We're not sure if this method will stay in public api.
+     * TODO 543 move to MockingDetails
      */
     @Deprecated
     static MockitoDebugger debug() {

File: src/main/java/org/mockito/internal/MockitoCore.java
Patch:
@@ -61,7 +61,7 @@ public <T> T mock(Class<T> typeToMock, MockSettings settings) {
         MockSettingsImpl impl = MockSettingsImpl.class.cast(settings);
         MockCreationSettings<T> creationSettings = impl.confirm(typeToMock);
         T mock = createMock(creationSettings);
-        mockingProgress().mockingStarted(mock, typeToMock);
+        mockingProgress().mockingStarted(mock, creationSettings);
         return mock;
     }
 

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -75,7 +75,7 @@ public static MockitoException unfinishedStubbing(Location location) {
                 "    doThrow(exception).when(mock).someVoidMethod();",
                 "Hints:",
                 " 1. missing thenReturn()",
-                " 2. you are trying to stub a final method, you naughty developer!",
+                " 2. you are trying to stub a final method, which is not supported",
                 " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                 ""
         ));
@@ -837,8 +837,8 @@ public static UnnecessaryStubbingException formatUnncessaryStubbingException(Cla
         }
         return new UnnecessaryStubbingException(join(
                 "Unnecessary stubbings detected in test class: " + testClass.getSimpleName(),
-                "To keep the tests clean it is important to remove unnecessary code.",
-                "Following stubbings are declared in test but not realized during test execution:" + stubbings,
+                "Clean & maintainable test code requires zero unnecessary code.",
+                "Following stubbings are unnecessary (click to navigate to relevant line of code):" + stubbings,
                 "Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class."
         ));
     }

File: src/main/java/org/mockito/internal/progress/NoOpStubbingListener.java
Patch:
@@ -12,4 +12,5 @@ class NoOpStubbingListener implements StubbingListener {
 
     public void newStubbing(Invocation stubbing) {}
     public void usedStubbing(Invocation stubbing, Invocation actual) {}
+    public void stubbingNotFound(Invocation actual) {}
 }

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -14,13 +14,13 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Answer;
 
-import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
-
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 
+import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
+
 @SuppressWarnings("unchecked")
 public class InvocationContainerImpl implements InvocationContainer, Serializable {
 
@@ -82,6 +82,7 @@ public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {
                     return s;
                 }
             }
+            mockingProgress().getStubbingListener().stubbingNotFound(invocation);
         }
 
         return null;

File: src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -11,10 +11,11 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.DescribedInvocation;
 import org.mockito.invocation.InvocationOnMock;
+import org.mockito.internal.invocation.Stubbing;
 import org.mockito.stubbing.Answer;
 
 @SuppressWarnings("unchecked")
-public class StubbedInvocationMatcher extends InvocationMatcher implements Answer, Serializable {
+public class StubbedInvocationMatcher extends InvocationMatcher implements Answer, Serializable, Stubbing {
 
     private static final long serialVersionUID = 4919105134123672727L;
     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();

File: src/test/java/org/mockito/MockingDetailsTest.java
Patch:
@@ -45,7 +45,7 @@ public void should_provide_invocations() {
 
     @Test
     public void should_handle_null_input() {
-        //TODO SF, decide how to handle it and ensure the there is a top level integ test for the mockingDetails().getInvocations()
+        //TODO 541, decide how to handle it and ensure the there is a top level integ test for the mockingDetails().getInvocations()
         //assertTrue(new MockitoCore().mockingDetails(null).getInvocations().isEmpty());
     }
 }

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -48,8 +48,8 @@ public void lists_all_unused_stubs_cleanly() {
         Failure failure = result.getFailures().get(0);
         assertEquals("\n" +
                         "Unnecessary stubbings detected in test class: HasUnnecessaryStubs\n" +
-                        "To keep the tests clean it is important to remove unnecessary code.\n" +
-                        "Following stubbings are declared in test but not realized during test execution:\n" +
+                        "Clean & maintainable test code requires zero unnecessary code.\n" +
+                        "Following stubbings are unnecessary (click to navigate to relevant line of code):\n" +
                         "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class.",

File: src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -98,7 +98,7 @@ private FieldInitializationReport initializeInjectMocksField(Field field, Object
                 Throwable realCause = e.getCause().getCause();
                 throw fieldInitialisationThrewException(field, realCause);
             }
-            throw cannotInitializeForInjectMocksAnnotation(field.getName(), e);
+            throw cannotInitializeForInjectMocksAnnotation(field.getName(),e.getMessage());
         }
     }
 

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -6,7 +6,9 @@
 package org.mockitousage.basicapi;
 
 import org.junit.Test;
+import org.mockito.InjectMocks;
 import org.mockito.Mockito;
+import org.mockito.MockitoAnnotations;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.SmartNullPointerException;
 import org.mockito.internal.debugging.LocationImpl;
@@ -16,6 +18,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 
 import static junit.framework.TestCase.*;
 import static org.assertj.core.api.Assertions.assertThat;

File: src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -98,7 +98,7 @@ private FieldInitializationReport initializeInjectMocksField(Field field, Object
                 Throwable realCause = e.getCause().getCause();
                 throw fieldInitialisationThrewException(field, realCause);
             }
-            throw cannotInitializeForInjectMocksAnnotation(field.getName(), e);
+            throw cannotInitializeForInjectMocksAnnotation(field.getName(),e.getMessage());
         }
     }
 

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -6,7 +6,9 @@
 package org.mockitousage.basicapi;
 
 import org.junit.Test;
+import org.mockito.InjectMocks;
 import org.mockito.Mockito;
+import org.mockito.MockitoAnnotations;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.SmartNullPointerException;
 import org.mockito.internal.debugging.LocationImpl;
@@ -16,6 +18,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 
 import static junit.framework.TestCase.*;
 import static org.assertj.core.api.Assertions.assertThat;

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito;
 
-import org.mockito.internal.DefaultMockitoFramework;
+import org.mockito.internal.framework.DefaultMockitoFramework;
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.debugging.MockitoDebuggerImpl;
@@ -2581,7 +2581,7 @@ public static VerificationMode description(String description) {
     }
 
     /**
-     * Helps debugging failing tests. Experimental - use at your own risk. We're not sure if this method will stay in public api.
+     * TODO 543 move to MockingDetails
      */
     @Deprecated
     static MockitoDebugger debug() {

File: src/main/java/org/mockito/internal/MockitoCore.java
Patch:
@@ -61,7 +61,7 @@ public <T> T mock(Class<T> typeToMock, MockSettings settings) {
         MockSettingsImpl impl = MockSettingsImpl.class.cast(settings);
         MockCreationSettings<T> creationSettings = impl.confirm(typeToMock);
         T mock = createMock(creationSettings);
-        mockingProgress().mockingStarted(mock, typeToMock);
+        mockingProgress().mockingStarted(mock, creationSettings);
         return mock;
     }
 

File: src/main/java/org/mockito/internal/exceptions/Reporter.java
Patch:
@@ -75,7 +75,7 @@ public static MockitoException unfinishedStubbing(Location location) {
                 "    doThrow(exception).when(mock).someVoidMethod();",
                 "Hints:",
                 " 1. missing thenReturn()",
-                " 2. you are trying to stub a final method, you naughty developer!",
+                " 2. you are trying to stub a final method, which is not supported",
                 " 3: you are stubbing the behaviour of another mock inside before 'thenReturn' instruction if completed",
                 ""
         ));
@@ -839,8 +839,8 @@ public static UnnecessaryStubbingException formatUnncessaryStubbingException(Cla
         }
         return new UnnecessaryStubbingException(join(
                 "Unnecessary stubbings detected in test class: " + testClass.getSimpleName(),
-                "To keep the tests clean it is important to remove unnecessary code.",
-                "Following stubbings are declared in test but not realized during test execution:" + stubbings,
+                "Clean & maintainable test code requires zero unnecessary code.",
+                "Following stubbings are unnecessary (click to navigate to relevant line of code):" + stubbings,
                 "Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class."
         ));
     }

File: src/main/java/org/mockito/internal/progress/NoOpStubbingListener.java
Patch:
@@ -12,4 +12,5 @@ class NoOpStubbingListener implements StubbingListener {
 
     public void newStubbing(Invocation stubbing) {}
     public void usedStubbing(Invocation stubbing, Invocation actual) {}
+    public void stubbingNotFound(Invocation actual) {}
 }

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -14,13 +14,13 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Answer;
 
-import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
-
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 
+import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
+
 @SuppressWarnings("unchecked")
 public class InvocationContainerImpl implements InvocationContainer, Serializable {
 
@@ -82,6 +82,7 @@ public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {
                     return s;
                 }
             }
+            mockingProgress().getStubbingListener().stubbingNotFound(invocation);
         }
 
         return null;

File: src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -11,10 +11,11 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.DescribedInvocation;
 import org.mockito.invocation.InvocationOnMock;
+import org.mockito.internal.invocation.Stubbing;
 import org.mockito.stubbing.Answer;
 
 @SuppressWarnings("unchecked")
-public class StubbedInvocationMatcher extends InvocationMatcher implements Answer, Serializable {
+public class StubbedInvocationMatcher extends InvocationMatcher implements Answer, Serializable, Stubbing {
 
     private static final long serialVersionUID = 4919105134123672727L;
     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();

File: src/test/java/org/mockito/MockingDetailsTest.java
Patch:
@@ -45,7 +45,7 @@ public void should_provide_invocations() {
 
     @Test
     public void should_handle_null_input() {
-        //TODO SF, decide how to handle it and ensure the there is a top level integ test for the mockingDetails().getInvocations()
+        //TODO 541, decide how to handle it and ensure the there is a top level integ test for the mockingDetails().getInvocations()
         //assertTrue(new MockitoCore().mockingDetails(null).getInvocations().isEmpty());
     }
 }

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -48,8 +48,8 @@ public void lists_all_unused_stubs_cleanly() {
         Failure failure = result.getFailures().get(0);
         assertEquals("\n" +
                         "Unnecessary stubbings detected in test class: HasUnnecessaryStubs\n" +
-                        "To keep the tests clean it is important to remove unnecessary code.\n" +
-                        "Following stubbings are declared in test but not realized during test execution:\n" +
+                        "Clean & maintainable test code requires zero unnecessary code.\n" +
+                        "Following stubbings are unnecessary (click to navigate to relevant line of code):\n" +
                         "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:0)\n" +
                         "Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class.",

File: src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -8,6 +8,7 @@
 import static org.mockito.internal.exceptions.Reporter.cannotInitializeForInjectMocksAnnotation;
 import static org.mockito.internal.exceptions.Reporter.fieldInitialisationThrewException;
 import static org.mockito.internal.util.collections.Sets.newMockSafeHashSet;
+import static org.mockito.internal.util.reflection.SuperTypesLastSorter.sortSuperTypesLast;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
@@ -133,6 +134,6 @@ private List<Field> orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {
         List<Field> declaredFields = Arrays.asList(awaitingInjectionClazz.getDeclaredFields());
         declaredFields = ListUtil.filter(declaredFields, notFinalOrStatic);
 
-        return new SuperTypesLastSorter().sort(declaredFields);
+        return sortSuperTypesLast(declaredFields);
     }
 }

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -2201,8 +2201,8 @@ public static Stubber doReturn(Object toBeReturned, Object... toBeReturnedNext)
      * <p>
      * Also, you can create InOrder object passing only mocks that are relevant for in-order verification.
      * <p>
-     * <code>InOrder</code> verification is 'greedy'. You will hardly every notice it but
-     * if you want to find out more search for 'greedy' on the Mockito
+     * <code>InOrder</code> verification is 'greedy', but you will hardly ever notice it.
+     * If you want to find out more, search for 'greedy' in the Mockito
      * <a href="http://code.google.com/p/mockito/w/list">wiki pages</a>.
      * <p>
      * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}

File: src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -64,7 +64,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
 
     @Test
     public void shouldAllowDelegatingToDefaultMethod() throws Exception {
-        assumeTrue(ClassFileVersion.forCurrentJavaVersion().isAtLeast(ClassFileVersion.JAVA_V8));
+        assumeTrue(ClassFileVersion.forThisVm().isAtLeast(ClassFileVersion.JAVA_V8));
 
         Class<?> type = new ByteBuddy()
                 .makeInterface()
@@ -86,7 +86,7 @@ public void shouldAllowDelegatingToDefaultMethod() throws Exception {
 
     @Test
     public void shouldAllowSpyingOnDefaultMethod() throws Exception {
-        assumeTrue(ClassFileVersion.forCurrentJavaVersion().isAtLeast(ClassFileVersion.JAVA_V8));
+        assumeTrue(ClassFileVersion.forThisVm().isAtLeast(ClassFileVersion.JAVA_V8));
 
         Class<?> iFace = new ByteBuddy()
                 .makeInterface()

File: subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java
Patch:
@@ -15,7 +15,7 @@
 
 public class MockitoBeforeTestNGMethod {
 
-    private final WeakHashMap<Object, Boolean> initializedInstances = new WeakHashMap<>();
+    private final WeakHashMap<Object, Boolean> initializedInstances = new WeakHashMap<Object, Boolean>();
 
     /**
      * Initialize mocks.

File: src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java
Patch:
@@ -16,7 +16,7 @@
 public class VerificationWithDescriptionTest {
     
     @Mock 
-    private List mock;
+    private List<?> mock;
     
     @Before
     public void setUp() {

File: src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java
Patch:
@@ -65,7 +65,7 @@ public void ignores_unused_stubs() {
 
     @RunWith(MockitoJUnitRunner.Silent.class)
     public static class SomeFeature {
-        @Mock List list;
+        @Mock List<String> list;
         @Test public void some_behavior() {
             when(list.get(0)).thenReturn("0");
             assertEquals("0", list.get(0));
@@ -74,7 +74,7 @@ public static class SomeFeature {
 
     @RunWith(MockitoJUnitRunner.Silent.class)
     public static class SomeFailingFeature {
-        @Mock List list;
+        @Mock List<String> list;
         @Test public void some_failing_behavior() {
             list.clear();
             verify(list, times(2)).clear();
@@ -83,7 +83,7 @@ public static class SomeFailingFeature {
 
     @RunWith(MockitoJUnitRunner.Silent.class)
     public static class UsesFrameworkIncorrectly {
-        @Mock List list;
+        @Mock List<?> list;
         @Test public void unfinished_stubbing() {
             when(list.get(0)); //unfinished stubbing
         }

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -178,7 +178,7 @@ public String print() {
     
     @Test
     public void shouldSayNiceMessageWhenSpyingOnPrivateClass() throws Exception {
-        List real = Arrays.asList("first", "second");
+        List<String> real = Arrays.asList("first", "second");
         try {
             spy(real);
             fail();

File: src/test/java/org/mockito/internal/util/collections/ListUtilTest.java
Patch:
@@ -5,6 +5,7 @@
 
 package org.mockito.internal.util.collections;
 
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockitoutil.TestBase;
@@ -14,7 +15,6 @@
 
 import static java.util.Arrays.asList;
 import static junit.framework.TestCase.assertTrue;
-import static org.mockitoutil.ExtraMatchers.hasExactlyInOrder;
 
 public class ListUtilTest extends TestBase {
 
@@ -26,8 +26,8 @@ public boolean isOut(String object) {
                 return object == "x";
             }
         });
-        
-        assertThat(filtered, hasExactlyInOrder("one", "two", "three"));
+
+        Assertions.assertThat(filtered).containsSequence("one", "two", "three");
     }
     
     @Test

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -234,7 +234,7 @@ public void should_print_method_when_matcher_used() throws Exception {
                 "Wanted but not invoked:" +
                 "\n" +
                 "iMethods.twoArgumentMethod(\n" +
-                "    isA(java.lang.Integer),\n" +
+                "    <any integer>,\n" +
                 "    100\n" +
                 ");";
             assertContains(expectedMessage, actualMessage);

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java
Patch:
@@ -26,7 +26,6 @@
 import org.mockito.Incubating;
 import org.mockito.exceptions.base.MockitoSerializationIssue;
 import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.ForWriteReplace;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.mock.MockName;

File: src/main/java/org/mockito/internal/runners/StrictRunner.java
Patch:
@@ -5,9 +5,7 @@
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunNotifier;
 import org.mockito.Mockito;
-import org.mockito.MockitoFramework;
 import org.mockito.internal.runners.util.FailureDetecter;
-import org.mockito.internal.runners.util.FrameworkUsageValidator;
 
 /**
  * Created by sfaber on 7/22/16.

File: src/main/java/org/mockito/internal/runners/util/FailureDetecter.java
Patch:
@@ -6,7 +6,6 @@
 
 import org.junit.runner.notification.Failure;
 import org.junit.runner.notification.RunListener;
-import org.junit.runner.notification.RunNotifier;
 
 /**
  * Implementation of JUnit run listener that knows when any of the tests failed

File: src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
 /**

File: src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java
Patch:
@@ -50,8 +50,8 @@ public void equals_should_return_true_when_equal_to_method() throws Exception {
 
     private interface Something {
 
-        public Object someMethod(Object param);
+        Object someMethod(Object param);
 
-        public Object otherMethod(Object param);
+        Object otherMethod(Object param);
     }
 }
\ No newline at end of file

File: src/test/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java
Patch:
@@ -128,7 +128,7 @@ private static boolean explicitGCEnabled() {
             if (inputArgument.contains("-XX:+DisableExplicitGC")) {
                 return false;
             }
-        };
+        }
         return true;
     }
 

File: src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java
Patch:
@@ -75,7 +75,7 @@ public void describeMismatch(Object item, Description mismatchDescription) {}
         public void describeTo(Description description) {}
     }
 
-    private static interface IMatcher extends Matcher<Integer> {}
+    private interface IMatcher extends Matcher<Integer> {}
 
     //non-generic matcher implementing the interface
     private static class SubclassGenericMatcherFromInterface extends BaseMatcher<Integer> implements Serializable, Cloneable, IMatcher {

File: src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java
Patch:
@@ -125,5 +125,5 @@ public void should_validate_throwable() throws Throwable {
     }
 
     @SuppressWarnings("serial")
-    class MyException extends RuntimeException {};
+    class MyException extends RuntimeException {}
 }
\ No newline at end of file

File: src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java
Patch:
@@ -12,8 +12,6 @@
 
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.assertFalse;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/CompilationWarningsTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-import static org.mockito.BDDMockito.doAnswer;
 import static org.mockito.BDDMockito.*;
 
 

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -134,7 +134,7 @@ private void finalizeResume(ImportLogBean importLogBean) {
     }
 
     private interface ImportLogDao {
-        public boolean anyImportRunningOrRunnedToday(int importType, Date currentDate);
+        boolean anyImportRunningOrRunnedToday(int importType, Date currentDate);
 
         void include(ImportLogBean importLogBean);
 

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Patch:
@@ -41,7 +41,7 @@ public String getSurname() {
     }
 
     public interface PeopleRepository {
-        public void save(Person capture);
+        void save(Person capture);
     }
     
     @Mock PeopleRepository peopleRepository;           

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings("unchecked")
 public class MocksCreationTest extends TestBase {
 
-    private class HasPrivateConstructor {};
+    private class HasPrivateConstructor {}
     
     @Test
     public void shouldCreateMockWhenConstructorIsPrivate() {

File: src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
Patch:
@@ -25,8 +25,6 @@
 import java.util.Observable;
 
 import static junit.framework.TestCase.*;
-import static org.mockito.Matchers.anyObject;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 import static org.mockitoutil.SimpleSerializationUtil.*;
 

File: src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -27,7 +27,6 @@
 
 import static junit.framework.TestCase.*;
 import static org.junit.Assume.assumeFalse;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 import static org.mockitoutil.SimpleSerializationUtil.*;
 

File: src/test/java/org/mockitousage/basicapi/ResetTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.*;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.*;
 
 public class ResetTest extends TestBase {

File: src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -16,7 +16,6 @@
 
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyVararg;
 import static org.mockito.Mockito.*;
 
 public class UsingVarargsTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java
Patch:
@@ -8,8 +8,6 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 //see bug 116

File: src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
 public class ActualInvocationHasNullArgumentNPEBugTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java
Patch:
@@ -79,7 +79,7 @@ public Object call() throws Exception {
     }
     
     public interface ITarget {
-        public String targetMethod(String arg);
+        String targetMethod(String arg);
     }
     
 }

File: src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Patch:
@@ -25,7 +25,7 @@
 public class InheritedGenericsPolimorphicCallTest extends TestBase {
 
     protected interface MyIterable<T> extends Iterable<T> {
-        public MyIterator<T> iterator();
+        MyIterator<T> iterator();
     }
 
     protected interface MyIterator<T> extends Iterator<T> {

File: src/test/java/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java
Patch:
@@ -26,9 +26,9 @@ public class MultithreadedStubbingHalfManualTest {
      * Class with two methods, one of them is repeatedly mocked while another is repeatedly called.
      */
     public interface ToMock {
-        public Integer getValue(Integer param);
+        Integer getValue(Integer param);
 
-        public List<Integer> getValues(Integer param);
+        List<Integer> getValues(Integer param);
     }
 
     /**

File: src/test/java/org/mockitousage/examples/use/ExampleTest.java
Patch:
@@ -15,8 +15,6 @@
 
 import java.util.Arrays;
 
-import static org.mockito.Matchers.anyObject;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 @RunWith(MockitoJUnitRunner.class)

File: src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -17,8 +17,6 @@
 import java.util.List;
 
 import static junit.framework.TestCase.*;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;
 
 public class CapturingArgumentsTest extends TestBase {

File: src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
Patch:
@@ -15,9 +15,6 @@
 import java.util.Observer;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
 public class DetectingMisusedMatchersTest extends TestBase {

File: src/test/java/org/mockitousage/packageprotected/MockingPackageProtectedTest.java
Patch:
@@ -12,9 +12,9 @@
 
 public class MockingPackageProtectedTest extends TestBase {
 
-    static class Foo {};
+    static class Foo {}
     
-    class Bar {};
+    class Bar {}
     
     @Test
     public void shouldMockPackageProtectedClasses() {

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import static junit.framework.TestCase.*;
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
 public class SpyingOnRealObjectsTest extends TestBase {

File: src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java
Patch:
@@ -15,7 +15,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 public class ClickableStackTracesWhenFrameworkMisusedTest extends TestBase {

File: src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
 @Ignore

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.*;
 
 @RunWith(MockitoJUnitRunner.class)

File: src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.*;
 
 //This is required to make sure stack trace is well filtered when runner is ON

File: src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -15,7 +15,6 @@
 
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.*;
 
 public class BasicStubbingTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/CallingRealMethodTest.java
Patch:
@@ -10,7 +10,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.assertEquals;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 public class CallingRealMethodTest extends TestBase {

File: src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java
Patch:
@@ -18,9 +18,6 @@
 
 import static junit.framework.TestCase.*;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;
 
 

File: src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -20,8 +20,6 @@
 import java.io.IOException;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("serial")

File: src/test/java/org/mockitousage/stubbing/StubbingWithAdditionalAnswersTest.java
Patch:
@@ -14,7 +14,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalAnswers.*;
 import static org.mockito.BDDMockito.*;
-import static org.mockito.Matchers.anyVararg;
 
 @RunWith(MockitoJUnitRunner.class)
 public class StubbingWithAdditionalAnswersTest {

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.Set;
 
 import static junit.framework.TestCase.*;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 public class StubbingWithCustomAnswerTest extends TestBase {

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.List;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 public class AtLeastXVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
 public class AtMostXVerificationTest extends TestBase {

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -15,7 +15,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.*;
 
 public class DescriptiveMessagesOnVerificationInOrderErrorsTest extends TestBase {

File: src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -19,9 +19,6 @@
 
 import static junit.framework.TestCase.fail;
 import static org.mockito.AdditionalMatchers.aryEq;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.matches;
 import static org.mockito.Mockito.*;
 
 public class DescriptiveMessagesWhenVerificationFailsTest extends TestBase {

File: src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java
Patch:
@@ -34,7 +34,7 @@ public void shouldAllowToExcludeStubsForVerification() throws Exception {
         verify(mock).objectArgMethod("foo");
 
         //verifyNoMoreInteractions fails:
-        try { verifyNoMoreInteractions(mock); fail(); } catch (NoInteractionsWanted e) {};
+        try { verifyNoMoreInteractions(mock); fail(); } catch (NoInteractionsWanted e) {}
         
         //but it works when stubs are ignored:
         ignoreStubs(mock);

File: src/test/java/org/mockitousage/verification/VerificationInOrderTest.java
Patch:
@@ -14,7 +14,6 @@
 import org.mockitoutil.TestBase;
 
 import static junit.framework.TestCase.fail;
-import static org.mockito.Matchers.anyInt;
 import static org.mockito.Mockito.*;
 
 public class VerificationInOrderTest extends TestBase {

File: src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
Patch:
@@ -14,9 +14,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyObject;
-import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitoutil/JUnitResultAssert.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
-import org.mockito.exceptions.misusing.UnnecessaryStubbingException;
 
 import java.util.List;
 

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -26,7 +26,6 @@
 import java.io.IOException;
 import java.io.PrintStream;
 import java.util.Collection;
-import java.util.regex.Pattern;
 
 import static junit.framework.TestCase.assertFalse;
 import static junit.framework.TestCase.assertTrue;

File: subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.Map;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.testng.Assert.fail;
 
 public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java
Patch:
@@ -65,7 +65,8 @@ public <T> Class<? extends T> generateMockClass(MockFeatures<T> features) {
                               .append(MockAccess.class, DispatcherDefaultingToRealMethod.class)
                               .append(MockMethodInterceptor.class,
                                       MockMethodInterceptor.ForHashCode.class,
-                                      MockMethodInterceptor.ForEquals.class).build(), ClassLoadingStrategy.Default.INJECTION)
+                                      MockMethodInterceptor.ForEquals.class).build(),
+                              ClassLoadingStrategy.Default.INJECTION.with(features.mockedType.getProtectionDomain()))
                       .getLoaded();
     }
 

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -55,7 +55,7 @@ public void shouldReportWantedButNotInvoked() {
 		exception.expect(WantedButNotInvoked.class);
 		exception.expectMessage("Wanted but not invoked:");
 		exception.expectMessage("mock.simpleMethod()");
-		exception.expectMessage("However, there were other interactions with this mock:");
+		exception.expectMessage("However, there was exactly 1 interaction with this mock:");
 		exception.expectMessage("mock.differentMethod();");
 
 		checker.check(invocations, wanted);

File: src/main/java/org/mockito/MockingDetails.java
Patch:
@@ -60,5 +60,5 @@ public interface MockingDetails {
      * @return The extra-interfaces
      * @since 2.0.0
      */
-    Set<Class> getExtraInterfaces();
+    Set<Class<?>> getExtraInterfaces();
 }

File: src/main/java/org/mockito/internal/InternalMockHandler.java
Patch:
@@ -11,10 +11,9 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.stubbing.Answer;
 
-@SuppressWarnings("unchecked")
 public interface InternalMockHandler<T> extends MockHandler {
 
-    MockCreationSettings getMockSettings();
+    MockCreationSettings<T> getMockSettings();
 
     void setAnswersForStubbing(List<Answer<?>> answers);
 

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -90,7 +90,7 @@ public Answer<Object> getDefaultAnswer() {
         return defaultAnswer;
     }
 
-    public MockSettingsImpl stubOnly() {
+    public MockSettingsImpl<T> stubOnly() {
         this.stubOnly = true;
         return this;
     }

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
Patch:
@@ -116,15 +116,15 @@ public String nonMockableReason() {
         };
     }
 
-    private static InternalMockHandler asInternalMockHandler(MockHandler handler) {
+    private static InternalMockHandler<?> asInternalMockHandler(MockHandler handler) {
         if (!(handler instanceof InternalMockHandler)) {
             throw new MockitoException(join(
                     "At the moment you cannot provide own implementations of MockHandler.",
                     "Please see the javadocs for the MockMaker interface.",
                     ""
             ));
         }
-        return (InternalMockHandler) handler;
+        return (InternalMockHandler<?>) handler;
     }
 
 }

File: src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -27,7 +27,7 @@ class InvocationNotifierHandler<T> implements MockHandler, InternalMockHandler<T
     private final List<InvocationListener> invocationListeners;
     private final InternalMockHandler<T> mockHandler;
 
-    public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings<?> settings) {
+    public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings<T> settings) {
         this.mockHandler = mockHandler;
         this.invocationListeners = settings.getInvocationListeners();
     }
@@ -64,7 +64,7 @@ private void notifyMethodCallException(Invocation invocation, Throwable exceptio
         }
     }
 
-    public MockCreationSettings getMockSettings() {
+    public MockCreationSettings<T> getMockSettings() {
         return mockHandler.getMockSettings();
     }
 

File: src/main/java/org/mockito/internal/handler/NullResultGuardian.java
Patch:
@@ -39,7 +39,7 @@ public Object handle(Invocation invocation) throws Throwable {
      }
 
     @Override
-    public MockCreationSettings getMockSettings() {
+    public MockCreationSettings<T> getMockSettings() {
         return delegate.getMockSettings();
     }
 

File: src/main/java/org/mockito/internal/util/DefaultMockingDetails.java
Patch:
@@ -45,8 +45,7 @@ public Class<?> getMockedType() {
     }
 
     @Override
-    @SuppressWarnings("unchecked")
-    public Set<Class> getExtraInterfaces() {
+    public Set<Class<?>> getExtraInterfaces() {
         return delegate.getMockHandler(toInspect).getMockSettings().getExtraInterfaces();
     }
 }

File: src/main/java/org/mockito/mock/MockCreationSettings.java
Patch:
@@ -35,7 +35,7 @@ public interface MockCreationSettings<T> {
     /**
      * the default answer for this mock, see {@link org.mockito.MockSettings#defaultAnswer}.
      */
-    Answer getDefaultAnswer();
+    Answer<?> getDefaultAnswer();
 
     /**
      * the spied instance - needed for spies.

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -130,7 +130,7 @@ private static MockHandler dummyH() {
 
     private static class DummyMockHandler implements InternalMockHandler<Object> {
         public Object handle(Invocation invocation) throws Throwable { return null; }
-        public MockCreationSettings getMockSettings() { return null; }
+        public MockCreationSettings<Object> getMockSettings() { return null; }
         public InvocationContainer getInvocationContainer() { return null; }
         public void setAnswersForStubbing(List<Answer<?>> list) { }
     }

File: src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockito.invocation.Invocation;
 import org.mockito.listeners.InvocationListener;
 import org.mockito.listeners.MethodInvocationReport;
+import org.mockito.mock.MockCreationSettings;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockito.stubbing.Answer;
 
@@ -53,7 +54,7 @@ public class InvocationNotifierHandlerTest {
     public void setUp() throws Exception {
         notifier = new InvocationNotifierHandler<ArrayList<Answer<?>>>(
                 mockHandler,
-                (MockSettingsImpl<?>) new MockSettingsImpl<ArrayList<Answer<?>>>().invocationListeners(customListener, listener1, listener2)
+                (MockCreationSettings<ArrayList<Answer<?>>>) new MockSettingsImpl<ArrayList<Answer<?>>>().invocationListeners(customListener, listener1, listener2)
         );
     }
 

File: src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -55,7 +55,7 @@ public void shouldReportWantedButNotInvoked() {
 		exception.expect(WantedButNotInvoked.class);
 		exception.expectMessage("Wanted but not invoked:");
 		exception.expectMessage("mock.simpleMethod()");
-		exception.expectMessage("However, there were other interactions with this mock:");
+		exception.expectMessage("However, there was exactly 1 interaction with this mock:");
 		exception.expectMessage("mock.differentMethod();");
 
 		checker.check(invocations, wanted);

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -17,7 +17,7 @@ public class RunnerFactory {
 
     public RunnerImpl create(Class<?> klass) throws InvocationTargetException {
         try {
-            return new RunnerProvider().newInstance("org.mockito.internal.runners.InternalJUnitRunner", klass);
+            return new RunnerProvider().newInstance("org.mockito.internal.runners.SilentJUnitRunner", klass);
         } catch (InvocationTargetException e) {
             if (!new TestMethodsFinder().hasTestMethods(klass)) {
                 throw new MockitoException(

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -17,7 +17,7 @@ public void shouldCreateRunnerInstance() throws Throwable {
         //given
         RunnerProvider provider = new RunnerProvider();
         //when
-        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.InternalJUnitRunner", this.getClass());
+        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.SilentJUnitRunner", this.getClass());
         //then
         assertNotNull(runner);
     }

File: src/test/java/org/mockitousage/junitrunner/StrictRunnerTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Created by sfaber on 4/22/16.
  */
-public class StrictJUnitRunnerTest extends TestBase {
+public class StrictRunnerTest extends TestBase {
 
     JUnitCore runner = new JUnitCore();
 

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -50,8 +50,8 @@ public void lists_all_unused_stubs_cleanly() {
                         "Unnecessary stubbings detected in test class: HasUnnecessaryStubs\n" +
                         "To keep the tests clean it is important to remove unnecessary code.\n" +
                         "Following stubbings are declared in test but not realized during test execution:\n" +
-                        "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:27)\n" +
-                        "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:26)\n" +
+                        "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:26)\n" +
+                        "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:27)\n" +
                         "Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class.",
                 failure.getException().getMessage());
     }

File: src/test/java/org/mockitoutil/JUnitResultAssert.java
Patch:
@@ -35,7 +35,7 @@ public void isSuccessful() {
      */
     public void fails(int expectedFailureCount, Class expectedException) {
         if (result.getFailures().size() != expectedFailureCount) {
-            throw new AssertionError("Wrong number of failures, expected: " + expectedFailureCount + ", actual: " + expectedFailureCount + "\n" +
+            throw new AssertionError("Wrong number of failures, expected: " + expectedFailureCount + ", actual: " + result.getFailures().size() + "\n" +
                     formatFailures(result.getFailures()));
         }
         for (Failure f : result.getFailures()) {

File: src/main/java/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -17,7 +17,7 @@ public class RunnerFactory {
 
     public RunnerImpl create(Class<?> klass) throws InvocationTargetException {
         try {
-            return new RunnerProvider().newInstance("org.mockito.internal.runners.InternalJUnitRunner", klass);
+            return new RunnerProvider().newInstance("org.mockito.internal.runners.SilentJUnitRunner", klass);
         } catch (InvocationTargetException e) {
             if (!new TestMethodsFinder().hasTestMethods(klass)) {
                 throw new MockitoException(

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -15,7 +15,7 @@ public void shouldCreateRunnerInstance() throws Throwable {
         //given
         RunnerProvider provider = new RunnerProvider();
         //when
-        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.InternalJUnitRunner", this.getClass());
+        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.SilentJUnitRunner", this.getClass());
         //then
         assertNotNull(runner);
     }

File: src/test/java/org/mockitousage/junitrunner/StrictRunnerTest.java
Patch:
@@ -17,7 +17,7 @@
 /**
  * Created by sfaber on 4/22/16.
  */
-public class StrictJUnitRunnerTest extends TestBase {
+public class StrictRunnerTest extends TestBase {
 
     JUnitCore runner = new JUnitCore();
 

File: src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java
Patch:
@@ -49,8 +49,8 @@ public void lists_all_unused_stubs_cleanly() {
                         "Unnecessary stubbings detected in test class: HasUnnecessaryStubs\n" +
                         "To keep the tests clean it is important to remove unnecessary code.\n" +
                         "Following stubbings are declared in test but not realized during test execution:\n" +
-                        "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:27)\n" +
-                        "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:26)\n" +
+                        "  1. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:26)\n" +
+                        "  2. -> at org.mockitousage.junitrunner.UnusedStubsExceptionMessageTest$HasUnnecessaryStubs.<init>(UnusedStubsExceptionMessageTest.java:27)\n" +
                         "Please remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class.",
                 failure.getException().getMessage());
     }

File: buildSrc/src/main/groovy/org/mockito/release/comparison/PublicationsComparatorTask.java
Patch:
@@ -8,8 +8,8 @@
 
 public class PublicationsComparatorTask extends DefaultTask implements PublicationsComparator {
 
-    private ZipComparator zipComparator = new ZipComparator(new ZipCompare());
-    private PomComparator pomComparator = new PomComparator();
+    private final ZipComparator zipComparator = new ZipComparator(new ZipCompare());
+    private final PomComparator pomComparator = new PomComparator();
     private Boolean publicationsEqual;
 
     public void compareBinaries(Closure<File> left, Closure<File> right) {

File: buildSrc/src/main/groovy/org/mockito/release/comparison/ZipComparator.java
Patch:
@@ -38,7 +38,7 @@ Result compareFiles() {
         };
     }
 
-    static interface Result {
+    interface Result {
         boolean areEqual();
         File getFile1();
         File getFile2();

File: buildSrc/src/main/groovy/org/mockito/release/comparison/ZipCompare.java
Patch:
@@ -6,7 +6,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Enumeration;
-import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import java.util.zip.ZipEntry;

File: buildSrc/src/main/groovy/org/mockito/release/exec/DefaultProcessRunner.java
Patch:
@@ -9,7 +9,7 @@
 
 class DefaultProcessRunner implements ProcessRunner {
 
-    private static Logger LOG = LoggerFactory.getLogger(DefaultProcessRunner.class);
+    private static final Logger LOG = LoggerFactory.getLogger(DefaultProcessRunner.class);
     private final File workDir;
 
     DefaultProcessRunner(File workDir) {

File: buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java
Patch:
@@ -15,7 +15,7 @@
 
 class GitNotesBuilder implements NotesBuilder {
 
-    private static Logger LOG = LoggerFactory.getLogger(GitNotesBuilder.class);
+    private static final Logger LOG = LoggerFactory.getLogger(GitNotesBuilder.class);
 
     private final File workDir;
     private final String authTokenEnvVar;

File: buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockito.release.notes;
 
-import org.gradle.api.Project;
 import org.mockito.release.notes.versions.PreviousVersion;
 import org.mockito.release.notes.versions.Versions;
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java
Patch:
@@ -180,7 +180,7 @@ public static GitHubIssuesBuilder authenticatingWith(String authToken) {
         }
 
         private static class GitHubIssuesBuilder {
-            private String authToken;
+            private final String authToken;
             private String state;
             private String filter;
             private String direction;

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java
Patch:
@@ -1,8 +1,6 @@
 package org.mockito.release.notes.improvements;
 
-import java.net.URL;
 import java.util.Collection;
-import java.util.Set;
 
 class Improvement {
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockito.release.notes.util;
 
 import java.io.*;
+import java.util.Scanner;
 
 /**
  * IO utils. A bit of reinventing the wheel but we don't want extra dependencies at this stage and we want to be java.
@@ -44,8 +45,8 @@ public static void close(Closeable closeable) {
         }
     }
 
-    private static String readNow(InputStream is) throws IOException {
-        java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
+    private static String readNow(InputStream is) {
+        Scanner s = new Scanner(is).useDelimiter("\\A");
         try {
             return s.hasNext() ? s.next() : "";
         } finally {

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java
Patch:
@@ -8,7 +8,7 @@ class GitCommit implements Commit {
     private final String email;
     private final String author;
     private final String message;
-    private Set<String> tickets;
+    private final Set<String> tickets;
 
     public GitCommit(String email, String author, String message) {
         this.email = email;

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java
Patch:
@@ -6,7 +6,7 @@
 
 class GitContributionsProvider implements ContributionsProvider {
 
-    private static Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);
+    private static final Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);
     private final GitLogProvider logProvider;
     private final Predicate<Commit> ignoredCommit;
 

File: buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java
Patch:
@@ -8,7 +8,7 @@
 
 class DefaultReleaseSteps implements ReleaseSteps {
 
-    private List<ReleaseStep> steps = new ArrayList<ReleaseStep>();
+    private final List<ReleaseStep> steps = new ArrayList<ReleaseStep>();
 
     public ConfigurableReleaseStep newStep(String description, Operation operation) {
         DefaultReleaseStep step = new DefaultReleaseStep(description, operation);

File: src/main/java/org/mockito/AdditionalMatchers.java
Patch:
@@ -38,6 +38,7 @@
  * 
  * Scroll down to see all methods - full list of matchers.
  */
+@SuppressWarnings("ALL")
 public class AdditionalMatchers {
     
     private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();

File: src/main/java/org/mockito/configuration/AnnotationEngine.java
Patch:
@@ -6,9 +6,6 @@
 
 import org.mockito.MockitoAnnotations;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-
 /**
  * Configures mock creation logic behind &#064;Mock, &#064;Captor and &#064;Spy annotations
  * <p>

File: src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java
Patch:
@@ -8,9 +8,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.configuration.AnnotationEngine;
-import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.util.reflection.FieldSetter;
 
 import static org.mockito.exceptions.Reporter.moreThanOneAnnotationNotAllowed;
 import static org.mockito.internal.util.reflection.FieldSetter.setField;

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -20,7 +20,6 @@
 import org.mockito.Mockito;
 import org.mockito.Spy;
 import org.mockito.configuration.AnnotationEngine;
-import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
 

File: src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java
Patch:
@@ -16,7 +16,7 @@ public abstract class MockInjectionStrategy {
     /**
      * NOP Strategy that will always try the next strategy.
      */
-    public static final MockInjectionStrategy nop() {
+    public static MockInjectionStrategy nop() {
         return new MockInjectionStrategy() {
             protected boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {
                 return false;

File: src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java
Patch:
@@ -10,7 +10,6 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.FieldReader;
-import org.mockito.internal.util.reflection.FieldSetter;
 
 import java.lang.reflect.Field;
 import java.util.Set;

File: src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.util.reflection.BeanPropertySetter;
 
 /**

File: src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
Patch:
@@ -11,7 +11,7 @@
 
 public class TypeBasedCandidateFilter implements MockCandidateFilter {
 
-    MockCandidateFilter next;
+    private final MockCandidateFilter next;
 
     public TypeBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;

File: src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java
Patch:
@@ -7,8 +7,6 @@
 import org.mockito.Captor;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.unsupportedCombinationOfAnnotations;
 

File: src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java
Patch:
@@ -2,13 +2,11 @@
 
 import org.mockito.internal.util.io.IOUtil;
 
-import java.io.IOException;
 import java.io.InputStream;
-import java.io.Reader;
 
 class PluginFileReader {
 
-    String readPluginClass(InputStream input) throws IOException {
+    String readPluginClass(InputStream input) {
         for(String line: IOUtil.readLines(input)) {
             String stripped = stripCommentAndWhitespace(line);
             if (stripped.length() > 0) {

File: src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -30,7 +30,7 @@ StackTraceCleanerProvider getStackTraceCleanerProvider() {
     /**
      * Returns the implementation of the mock maker available for the current runtime.
      *
-     * <p>Returns {@link org.mockito.internal.creation.cglib.CglibMockMaker} if no
+     * <p>Returns {@link org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker} if no
      * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
      */
     MockMaker getMockMaker() {

File: src/main/java/org/mockito/internal/configuration/plugins/Plugins.java
Patch:
@@ -9,7 +9,7 @@
  */
 public class Plugins {
 
-    private static PluginRegistry registry = new PluginRegistry();
+    private static final PluginRegistry registry = new PluginRegistry();
 
     /**
      * The implementation of the stack trace cleaner

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.creation;
 
 import org.mockito.MockSettings;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.*;
 import org.mockito.internal.creation.settings.CreationSettings;

File: src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java
Patch:
@@ -61,6 +61,7 @@ private CachedBytecodeGenerator mockCachePerClassLoaderOf(ClassLoader classLoade
     private static class CachedBytecodeGenerator {
 
         private ConcurrentHashMap<MockKey, Reference<Class<?>>> generatedClassCache = new ConcurrentHashMap<MockKey, Reference<Class<?>>>();
+
         private final MockBytecodeGenerator generator;
         private final boolean weak;
 

File: src/main/java/org/mockito/internal/creation/util/MockitoMethodProxy.java
Patch:
@@ -6,5 +6,5 @@
 
 //TODO SF Replace with RealMethod and get rid of (possibly).
 public interface MockitoMethodProxy {
-    Object invokeSuper(Object target, Object[] arguments) throws Throwable;
+    Object invokeSuper(Object target, Object[] arguments);
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/debugging/LoggingListener.java
Patch:
@@ -15,9 +15,9 @@
 public class LoggingListener implements FindingsListener {
     private final boolean warnAboutUnstubbed;
 
-    private List<String> argMismatchStubs = new LinkedList<String>();
-    private List<String> unusedStubs = new LinkedList<String>();
-    private List<String> unstubbedCalls = new LinkedList<String>();
+    private final List<String> argMismatchStubs = new LinkedList<String>();
+    private final List<String> unusedStubs = new LinkedList<String>();
+    private final List<String> unstubbedCalls = new LinkedList<String>();
 
     public LoggingListener(boolean warnAboutUnstubbed) {
         this.warnAboutUnstubbed = warnAboutUnstubbed;

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-@SuppressWarnings("unchecked")
 public class WarningsCollector {
    
     private final List<Object> createdMocks;

File: src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.exceptions.Reporter.invocationListenerThrewException;
 
 import java.util.List;
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
 import org.mockito.internal.stubbing.InvocationContainer;

File: src/main/java/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockito.internal.invocation;
 
-import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.exceptions.VerificationAwareInvocation;
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.reporting.PrintSettings;

File: src/main/java/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.List;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.matchers.LocalizedMatcher;
 import org.mockito.internal.progress.ArgumentMatcherStorage;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -17,7 +17,7 @@ public class UnusedStubsFinder {
     /**
      * Finds all unused stubs for given mocks
      * 
-     * @param mocks
+     * @param mocks full list of mocks
      */
     public List<Invocation> find(List<?> mocks) {
         List<Invocation> unused = new LinkedList<Invocation>();

File: src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java
Patch:
@@ -22,8 +22,7 @@ public AssertionError createArgumentsAreDifferentException(String message, Strin
 
         try {
             Class<?> clazz = Class.forName("org.mockito.exceptions.verification.junit.ArgumentsAreDifferent");
-            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);
-            return throwable;
+            return (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);
         } catch (Throwable t) {
 //            throw the default exception in case of problems
             return new ArgumentsAreDifferent(message);

File: src/main/java/org/mockito/internal/junit/JUnitTool.java
Patch:
@@ -6,7 +6,7 @@
 
 public class JUnitTool {
 
-    private static JUnitDetecter detecter = new JUnitDetecter();
+    private static final JUnitDetecter detecter = new JUnitDetecter();
 
     public static boolean hasJUnit() {
         return detecter.hasJUnit();

File: src/main/java/org/mockito/internal/listeners/MockingStartedListener.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.listeners;
 
-import org.mockito.MockSettings;
-
 @SuppressWarnings("unchecked")
 public interface MockingStartedListener extends MockingProgressListener {
     

File: src/main/java/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.noArgumentValueWasCaptured;
 

File: src/main/java/org/mockito/internal/matchers/Equality.java
Patch:
@@ -13,7 +13,7 @@ public static boolean areEqual(Object o1, Object o2) {
         if (o1 == o2 ) {
             return true;
     } else if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
+            return false;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {

File: src/main/java/org/mockito/internal/matchers/VarargCapturingMatcher.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.noArgumentValueWasCaptured;
 

File: src/main/java/org/mockito/internal/matchers/text/FormattedText.java
Patch:
@@ -6,7 +6,7 @@
  */
 class FormattedText {
 
-    private String text;
+    private final String text;
 
     public FormattedText(String text) {
         this.text = text;

File: src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.stubbing;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.invocation.Invocation;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.OngoingStubbing;

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

File: src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java
Patch:
@@ -5,7 +5,6 @@
 
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -33,7 +32,7 @@ private Class<? extends Throwable> checkNonNullThrowable(Class<? extends Throwab
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         //TODO centralize the use of Objenesis. Why do we use ObjenesisHelper?
-        Throwable throwable = (Throwable) ObjenesisHelper.newInstance(throwableClass);
+        Throwable throwable = ObjenesisHelper.newInstance(throwableClass);
         throwable.fillInStackTrace();
         filter.filter(throwable);
         throw throwable;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -110,7 +110,7 @@ private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSuppor
         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
     }
 
-    private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {
+    private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) {
         container.addAnswer(new DeeplyStubbedAnswer(mock), false);
         return mock;
     }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -41,9 +41,9 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = 1998191268711234347L;
 
-    ObjectMethodsGuru methodsGuru = new ObjectMethodsGuru();
+    private final ObjectMethodsGuru methodsGuru = new ObjectMethodsGuru();
 
-    MockUtil mockUtil = new MockUtil();
+    private final MockUtil mockUtil = new MockUtil();
 
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -10,7 +10,6 @@
 import java.lang.reflect.Modifier;
 
 import org.mockito.Mockito;
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.InvocationOnMock;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java
Patch:
@@ -1,8 +1,6 @@
 package org.mockito.internal.stubbing.defaultanswers;
 
-import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.util.MockUtil;
-import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -12,7 +10,7 @@ public class TriesToReturnSelf implements Answer<Object>, Serializable{
 
     private final MockUtil mockUtil = new MockUtil();
 
-    private ReturnsEmptyValues defaultReturn = new ReturnsEmptyValues();
+    private final ReturnsEmptyValues defaultReturn = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Class<?> methodReturnType = invocation.getMethod().getReturnType();

File: src/main/java/org/mockito/internal/util/SimpleMockitoLogger.java
Patch:
@@ -6,7 +6,7 @@
 
 public class SimpleMockitoLogger implements MockitoLogger {
 
-    StringBuilder loggedInfo = new StringBuilder();
+    private final StringBuilder loggedInfo = new StringBuilder();
 
     public void log(Object what) {
         loggedInfo.append(what);

File: src/main/java/org/mockito/internal/util/Timer.java
Patch:
@@ -2,8 +2,6 @@
 
 import static org.mockito.exceptions.Reporter.cannotCreateTimerWithNegativeDurationTime;
 
-import org.mockito.exceptions.Reporter;
-
 public class Timer {
 
     private final long durationMillis;

File: src/main/java/org/mockito/internal/util/collections/IdentitySet.java
Patch:
@@ -9,7 +9,7 @@
 @SuppressWarnings("unchecked")
 public class IdentitySet {
 
-    LinkedList list = new LinkedList();
+    private final LinkedList list = new LinkedList();
     
     public boolean contains(Object o) {
         for(Object existing:list) {

File: src/main/java/org/mockito/internal/util/collections/Sets.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.util.collections;
 
-
-import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.Set;
 

File: src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java
Patch:
@@ -282,7 +282,7 @@ private void checkParameterized(Constructor<?> constructor, Field field) {
         }
 
         private Constructor<?> biggestConstructor(Class<?> clazz) {
-            final List<Constructor<?>> constructors = Arrays.asList(clazz.getDeclaredConstructors());
+            final List<? extends Constructor<?>> constructors = Arrays.asList(clazz.getDeclaredConstructors());
             Collections.sort(constructors, byParameterNumber);
             
             Constructor<?> constructor = constructors.get(0);

File: src/main/java/org/mockito/internal/util/reflection/GenericMaster.java
Patch:
@@ -14,7 +14,7 @@ public class GenericMaster {
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
-     * @param field
+     * @param field the field to inspect
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();

File: src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java
Patch:
@@ -52,7 +52,7 @@ public List<Field> sort(Collection<? extends Field> unsortedFields) {
     }
 
 
-    private static Comparator<Field> compareFieldsByName = new Comparator<Field>() {
+    private static final Comparator<Field> compareFieldsByName = new Comparator<Field>() {
         public int compare(Field o1, Field o2) {
             return o1.getName().compareTo(o2.getName());
         }

File: src/main/java/org/mockito/internal/verification/Description.java
Patch:
@@ -28,7 +28,7 @@ public Description(VerificationMode verification, String description) {
     /**
      * Performs verification using the wrapped verification mode implementation.
      * Prepends the custom failure message if verification fails.
-     * @param data 
+     * @param data the data to be verified
      */
     @Override
     public void verify(VerificationData data) {

File: src/main/java/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -11,6 +11,7 @@
 import static org.mockito.internal.invocation.InvocationsFinder.findFirstUnverifiedInOrder;
 
 import java.util.List;
+
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;

File: src/main/java/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -5,9 +5,6 @@
 
 package org.mockito.internal.verification;
 
-import org.mockito.internal.util.ObjectMethodsGuru;
-import org.mockito.internal.util.collections.ListUtil;
-import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockito.invocation.Invocation;
 
 import java.util.List;

File: src/main/java/org/mockito/internal/verification/VerificationDataImpl.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.stubbing.InvocationContainer;
 import org.mockito.internal.util.ObjectMethodsGuru;

File: src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java
Patch:
@@ -10,6 +10,7 @@
 import static org.mockito.internal.invocation.InvocationsFinder.findPreviousVerifiedInOrder;
 
 import java.util.List;
+
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/plugins/MockMaker.java
Patch:
@@ -121,7 +121,7 @@ void resetMock(
      * @since 2.0
      */
     @Incubating
-    static interface TypeMockability {
+    interface TypeMockability {
         /**
          * informs if type is mockable
          */

File: src/main/java/org/mockito/verification/VerificationWrapperInOrderWrapper.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockito.verification;
 
-import org.mockito.InOrder;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.InOrderImpl;
 import org.mockito.internal.verification.InOrderWrapper;

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -124,7 +124,7 @@ private static <T> MockCreationSettings<T> settingsWithConstructorFor(Class<T> t
         return mockSettings;
     }
 
-    public static MockHandler dummyH() {
+    private static MockHandler dummyH() {
         return new DummyMockHandler();
     }
 

File: subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java
Patch:
@@ -15,7 +15,7 @@
 
 public class MockitoBeforeTestNGMethod {
 
-    private WeakHashMap<Object, Boolean> initializedInstances = new WeakHashMap<Object, Boolean>();
+    private final WeakHashMap<Object, Boolean> initializedInstances = new WeakHashMap<>();
 
     /**
      * Initialize mocks.

File: subprojects/testng/src/main/java/org/mockito/testng/MockitoTestNGListener.java
Patch:
@@ -49,8 +49,8 @@
  */
 public class MockitoTestNGListener implements IInvokedMethodListener {
 
-    private MockitoBeforeTestNGMethod beforeTest = new MockitoBeforeTestNGMethod();
-    private MockitoAfterTestNGMethod afterTest = new MockitoAfterTestNGMethod();
+    private final MockitoBeforeTestNGMethod beforeTest = new MockitoBeforeTestNGMethod();
+    private final MockitoAfterTestNGMethod afterTest = new MockitoAfterTestNGMethod();
 
 
     public void beforeInvocation(IInvokedMethod method, ITestResult testResult) {

File: buildSrc/src/main/groovy/org/mockito/release/comparison/PublicationsComparatorTask.java
Patch:
@@ -8,8 +8,8 @@
 
 public class PublicationsComparatorTask extends DefaultTask implements PublicationsComparator {
 
-    private ZipComparator zipComparator = new ZipComparator(new ZipCompare());
-    private PomComparator pomComparator = new PomComparator();
+    private final ZipComparator zipComparator = new ZipComparator(new ZipCompare());
+    private final PomComparator pomComparator = new PomComparator();
     private Boolean publicationsEqual;
 
     public void compareBinaries(Closure<File> left, Closure<File> right) {

File: buildSrc/src/main/groovy/org/mockito/release/comparison/ZipComparator.java
Patch:
@@ -38,7 +38,7 @@ Result compareFiles() {
         };
     }
 
-    static interface Result {
+    interface Result {
         boolean areEqual();
         File getFile1();
         File getFile2();

File: buildSrc/src/main/groovy/org/mockito/release/comparison/ZipCompare.java
Patch:
@@ -6,7 +6,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Enumeration;
-import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
 import java.util.zip.ZipEntry;

File: buildSrc/src/main/groovy/org/mockito/release/exec/DefaultProcessRunner.java
Patch:
@@ -9,7 +9,7 @@
 
 class DefaultProcessRunner implements ProcessRunner {
 
-    private static Logger LOG = LoggerFactory.getLogger(DefaultProcessRunner.class);
+    private static final Logger LOG = LoggerFactory.getLogger(DefaultProcessRunner.class);
     private final File workDir;
 
     DefaultProcessRunner(File workDir) {

File: buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java
Patch:
@@ -15,7 +15,7 @@
 
 class GitNotesBuilder implements NotesBuilder {
 
-    private static Logger LOG = LoggerFactory.getLogger(GitNotesBuilder.class);
+    private static final Logger LOG = LoggerFactory.getLogger(GitNotesBuilder.class);
 
     private final File workDir;
     private final String authTokenEnvVar;

File: buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockito.release.notes;
 
-import org.gradle.api.Project;
 import org.mockito.release.notes.versions.PreviousVersion;
 import org.mockito.release.notes.versions.Versions;
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java
Patch:
@@ -180,7 +180,7 @@ public static GitHubIssuesBuilder authenticatingWith(String authToken) {
         }
 
         private static class GitHubIssuesBuilder {
-            private String authToken;
+            private final String authToken;
             private String state;
             private String filter;
             private String direction;

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java
Patch:
@@ -1,8 +1,6 @@
 package org.mockito.release.notes.improvements;
 
-import java.net.URL;
 import java.util.Collection;
-import java.util.Set;
 
 class Improvement {
 

File: buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockito.release.notes.util;
 
 import java.io.*;
+import java.util.Scanner;
 
 /**
  * IO utils. A bit of reinventing the wheel but we don't want extra dependencies at this stage and we want to be java.
@@ -44,8 +45,8 @@ public static void close(Closeable closeable) {
         }
     }
 
-    private static String readNow(InputStream is) throws IOException {
-        java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
+    private static String readNow(InputStream is) {
+        Scanner s = new Scanner(is).useDelimiter("\\A");
         try {
             return s.hasNext() ? s.next() : "";
         } finally {

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java
Patch:
@@ -8,7 +8,7 @@ class GitCommit implements Commit {
     private final String email;
     private final String author;
     private final String message;
-    private Set<String> tickets;
+    private final Set<String> tickets;
 
     public GitCommit(String email, String author, String message) {
         this.email = email;

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java
Patch:
@@ -6,7 +6,7 @@
 
 class GitContributionsProvider implements ContributionsProvider {
 
-    private static Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);
+    private static final Logger LOG = LoggerFactory.getLogger(GitContributionsProvider.class);
     private final GitLogProvider logProvider;
     private final Predicate<Commit> ignoredCommit;
 

File: buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java
Patch:
@@ -8,7 +8,7 @@
 
 class DefaultReleaseSteps implements ReleaseSteps {
 
-    private List<ReleaseStep> steps = new ArrayList<ReleaseStep>();
+    private final List<ReleaseStep> steps = new ArrayList<ReleaseStep>();
 
     public ConfigurableReleaseStep newStep(String description, Operation operation) {
         DefaultReleaseStep step = new DefaultReleaseStep(description, operation);

File: src/main/java/org/mockito/AdditionalMatchers.java
Patch:
@@ -38,6 +38,7 @@
  * 
  * Scroll down to see all methods - full list of matchers.
  */
+@SuppressWarnings("ALL")
 public class AdditionalMatchers {
     
     private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();

File: src/main/java/org/mockito/configuration/AnnotationEngine.java
Patch:
@@ -6,9 +6,6 @@
 
 import org.mockito.MockitoAnnotations;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Field;
-
 /**
  * Configures mock creation logic behind &#064;Mock, &#064;Captor and &#064;Spy annotations
  * <p>

File: src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java
Patch:
@@ -8,9 +8,7 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.configuration.AnnotationEngine;
-import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.util.reflection.FieldSetter;
 
 import static org.mockito.exceptions.Reporter.moreThanOneAnnotationNotAllowed;
 import static org.mockito.internal.util.reflection.FieldSetter.setField;

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -20,7 +20,6 @@
 import org.mockito.Mockito;
 import org.mockito.Spy;
 import org.mockito.configuration.AnnotationEngine;
-import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
 

File: src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java
Patch:
@@ -16,7 +16,7 @@ public abstract class MockInjectionStrategy {
     /**
      * NOP Strategy that will always try the next strategy.
      */
-    public static final MockInjectionStrategy nop() {
+    public static MockInjectionStrategy nop() {
         return new MockInjectionStrategy() {
             protected boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {
                 return false;

File: src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java
Patch:
@@ -10,7 +10,6 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.FieldReader;
-import org.mockito.internal.util.reflection.FieldSetter;
 
 import java.lang.reflect.Field;
 import java.util.Set;

File: src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.Collection;
 import java.util.List;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.util.reflection.BeanPropertySetter;
 
 /**

File: src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
Patch:
@@ -11,7 +11,7 @@
 
 public class TypeBasedCandidateFilter implements MockCandidateFilter {
 
-    MockCandidateFilter next;
+    private final MockCandidateFilter next;
 
     public TypeBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;

File: src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java
Patch:
@@ -7,8 +7,6 @@
 import org.mockito.Captor;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.unsupportedCombinationOfAnnotations;
 

File: src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java
Patch:
@@ -2,13 +2,11 @@
 
 import org.mockito.internal.util.io.IOUtil;
 
-import java.io.IOException;
 import java.io.InputStream;
-import java.io.Reader;
 
 class PluginFileReader {
 
-    String readPluginClass(InputStream input) throws IOException {
+    String readPluginClass(InputStream input) {
         for(String line: IOUtil.readLines(input)) {
             String stripped = stripCommentAndWhitespace(line);
             if (stripped.length() > 0) {

File: src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -30,7 +30,7 @@ StackTraceCleanerProvider getStackTraceCleanerProvider() {
     /**
      * Returns the implementation of the mock maker available for the current runtime.
      *
-     * <p>Returns {@link org.mockito.internal.creation.cglib.CglibMockMaker} if no
+     * <p>Returns {@link org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker} if no
      * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
      */
     MockMaker getMockMaker() {

File: src/main/java/org/mockito/internal/configuration/plugins/Plugins.java
Patch:
@@ -9,7 +9,7 @@
  */
 public class Plugins {
 
-    private static PluginRegistry registry = new PluginRegistry();
+    private static final PluginRegistry registry = new PluginRegistry();
 
     /**
      * The implementation of the stack trace cleaner

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.creation;
 
 import org.mockito.MockSettings;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.*;
 import org.mockito.internal.creation.settings.CreationSettings;

File: src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java
Patch:
@@ -61,6 +61,7 @@ private CachedBytecodeGenerator mockCachePerClassLoaderOf(ClassLoader classLoade
     private static class CachedBytecodeGenerator {
 
         private ConcurrentHashMap<MockKey, Reference<Class<?>>> generatedClassCache = new ConcurrentHashMap<MockKey, Reference<Class<?>>>();
+
         private final MockBytecodeGenerator generator;
         private final boolean weak;
 

File: src/main/java/org/mockito/internal/creation/util/MockitoMethodProxy.java
Patch:
@@ -6,5 +6,5 @@
 
 //TODO SF Replace with RealMethod and get rid of (possibly).
 public interface MockitoMethodProxy {
-    Object invokeSuper(Object target, Object[] arguments) throws Throwable;
+    Object invokeSuper(Object target, Object[] arguments);
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/debugging/LoggingListener.java
Patch:
@@ -15,9 +15,9 @@
 public class LoggingListener implements FindingsListener {
     private final boolean warnAboutUnstubbed;
 
-    private List<String> argMismatchStubs = new LinkedList<String>();
-    private List<String> unusedStubs = new LinkedList<String>();
-    private List<String> unstubbedCalls = new LinkedList<String>();
+    private final List<String> argMismatchStubs = new LinkedList<String>();
+    private final List<String> unusedStubs = new LinkedList<String>();
+    private final List<String> unstubbedCalls = new LinkedList<String>();
 
     public LoggingListener(boolean warnAboutUnstubbed) {
         this.warnAboutUnstubbed = warnAboutUnstubbed;

File: src/main/java/org/mockito/internal/debugging/WarningsCollector.java
Patch:
@@ -15,7 +15,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-@SuppressWarnings("unchecked")
 public class WarningsCollector {
    
     private final List<Object> createdMocks;

File: src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.exceptions.Reporter.invocationListenerThrewException;
 
 import java.util.List;
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
 import org.mockito.internal.stubbing.InvocationContainer;

File: src/main/java/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockito.internal.invocation;
 
-import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.exceptions.VerificationAwareInvocation;
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.reporting.PrintSettings;

File: src/main/java/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -13,7 +13,6 @@
 import java.util.List;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.matchers.LocalizedMatcher;
 import org.mockito.internal.progress.ArgumentMatcherStorage;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -17,7 +17,7 @@ public class UnusedStubsFinder {
     /**
      * Finds all unused stubs for given mocks
      * 
-     * @param mocks
+     * @param mocks full list of mocks
      */
     public List<Invocation> find(List<?> mocks) {
         List<Invocation> unused = new LinkedList<Invocation>();

File: src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java
Patch:
@@ -22,8 +22,7 @@ public AssertionError createArgumentsAreDifferentException(String message, Strin
 
         try {
             Class<?> clazz = Class.forName("org.mockito.exceptions.verification.junit.ArgumentsAreDifferent");
-            AssertionError throwable = (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);
-            return throwable;
+            return (AssertionError) clazz.getConstructors()[0].newInstance(message, wanted, actual);
         } catch (Throwable t) {
 //            throw the default exception in case of problems
             return new ArgumentsAreDifferent(message);

File: src/main/java/org/mockito/internal/junit/JUnitTool.java
Patch:
@@ -6,7 +6,7 @@
 
 public class JUnitTool {
 
-    private static JUnitDetecter detecter = new JUnitDetecter();
+    private static final JUnitDetecter detecter = new JUnitDetecter();
 
     public static boolean hasJUnit() {
         return detecter.hasJUnit();

File: src/main/java/org/mockito/internal/listeners/MockingStartedListener.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.listeners;
 
-import org.mockito.MockSettings;
-
 @SuppressWarnings("unchecked")
 public interface MockingStartedListener extends MockingProgressListener {
     

File: src/main/java/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.noArgumentValueWasCaptured;
 

File: src/main/java/org/mockito/internal/matchers/Equality.java
Patch:
@@ -13,7 +13,7 @@ public static boolean areEqual(Object o1, Object o2) {
         if (o1 == o2 ) {
             return true;
     } else if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
+            return false;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);
         } else {

File: src/main/java/org/mockito/internal/matchers/VarargCapturingMatcher.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockito.internal.matchers;
 
 import org.mockito.ArgumentMatcher;
-import org.mockito.exceptions.Reporter;
 
 import static org.mockito.exceptions.Reporter.noArgumentValueWasCaptured;
 

File: src/main/java/org/mockito/internal/matchers/text/FormattedText.java
Patch:
@@ -6,7 +6,7 @@
  */
 class FormattedText {
 
-    private String text;
+    private final String text;
 
     public FormattedText(String text) {
         this.text = text;

File: src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.stubbing;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.invocation.Invocation;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.OngoingStubbing;

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

File: src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java
Patch:
@@ -5,7 +5,6 @@
 
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -33,7 +32,7 @@ private Class<? extends Throwable> checkNonNullThrowable(Class<? extends Throwab
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         //TODO centralize the use of Objenesis. Why do we use ObjenesisHelper?
-        Throwable throwable = (Throwable) ObjenesisHelper.newInstance(throwableClass);
+        Throwable throwable = ObjenesisHelper.newInstance(throwableClass);
         throwable.fillInStackTrace();
         filter.filter(throwable);
         throw throwable;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -110,7 +110,7 @@ private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSuppor
         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);
     }
 
-    private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) throws Throwable {
+    private Object recordDeepStubAnswer(final Object mock, InvocationContainerImpl container) {
         container.addAnswer(new DeeplyStubbedAnswer(mock), false);
         return mock;
     }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -41,9 +41,9 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = 1998191268711234347L;
 
-    ObjectMethodsGuru methodsGuru = new ObjectMethodsGuru();
+    private final ObjectMethodsGuru methodsGuru = new ObjectMethodsGuru();
 
-    MockUtil mockUtil = new MockUtil();
+    private final MockUtil mockUtil = new MockUtil();
 
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -10,7 +10,6 @@
 import java.lang.reflect.Modifier;
 
 import org.mockito.Mockito;
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.InvocationOnMock;

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java
Patch:
@@ -1,8 +1,6 @@
 package org.mockito.internal.stubbing.defaultanswers;
 
-import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.util.MockUtil;
-import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -12,7 +10,7 @@ public class TriesToReturnSelf implements Answer<Object>, Serializable{
 
     private final MockUtil mockUtil = new MockUtil();
 
-    private ReturnsEmptyValues defaultReturn = new ReturnsEmptyValues();
+    private final ReturnsEmptyValues defaultReturn = new ReturnsEmptyValues();
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Class<?> methodReturnType = invocation.getMethod().getReturnType();

File: src/main/java/org/mockito/internal/util/SimpleMockitoLogger.java
Patch:
@@ -6,7 +6,7 @@
 
 public class SimpleMockitoLogger implements MockitoLogger {
 
-    StringBuilder loggedInfo = new StringBuilder();
+    private final StringBuilder loggedInfo = new StringBuilder();
 
     public void log(Object what) {
         loggedInfo.append(what);

File: src/main/java/org/mockito/internal/util/Timer.java
Patch:
@@ -2,8 +2,6 @@
 
 import static org.mockito.exceptions.Reporter.cannotCreateTimerWithNegativeDurationTime;
 
-import org.mockito.exceptions.Reporter;
-
 public class Timer {
 
     private final long durationMillis;

File: src/main/java/org/mockito/internal/util/collections/IdentitySet.java
Patch:
@@ -9,7 +9,7 @@
 @SuppressWarnings("unchecked")
 public class IdentitySet {
 
-    LinkedList list = new LinkedList();
+    private final LinkedList list = new LinkedList();
     
     public boolean contains(Object o) {
         for(Object existing:list) {

File: src/main/java/org/mockito/internal/util/collections/Sets.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.util.collections;
 
-
-import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.Set;
 

File: src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java
Patch:
@@ -282,7 +282,7 @@ private void checkParameterized(Constructor<?> constructor, Field field) {
         }
 
         private Constructor<?> biggestConstructor(Class<?> clazz) {
-            final List<Constructor<?>> constructors = Arrays.asList(clazz.getDeclaredConstructors());
+            final List<? extends Constructor<?>> constructors = Arrays.asList(clazz.getDeclaredConstructors());
             Collections.sort(constructors, byParameterNumber);
             
             Constructor<?> constructor = constructors.get(0);

File: src/main/java/org/mockito/internal/util/reflection/GenericMaster.java
Patch:
@@ -14,7 +14,7 @@ public class GenericMaster {
     /**
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
-     * @param field
+     * @param field the field to inspect
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();

File: src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java
Patch:
@@ -52,7 +52,7 @@ public List<Field> sort(Collection<? extends Field> unsortedFields) {
     }
 
 
-    private static Comparator<Field> compareFieldsByName = new Comparator<Field>() {
+    private static final Comparator<Field> compareFieldsByName = new Comparator<Field>() {
         public int compare(Field o1, Field o2) {
             return o1.getName().compareTo(o2.getName());
         }

File: src/main/java/org/mockito/internal/verification/Description.java
Patch:
@@ -28,7 +28,7 @@ public Description(VerificationMode verification, String description) {
     /**
      * Performs verification using the wrapped verification mode implementation.
      * Prepends the custom failure message if verification fails.
-     * @param data 
+     * @param data the data to be verified
      */
     @Override
     public void verify(VerificationData data) {

File: src/main/java/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -11,6 +11,7 @@
 import static org.mockito.internal.invocation.InvocationsFinder.findFirstUnverifiedInOrder;
 
 import java.util.List;
+
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
 import org.mockito.internal.verification.api.VerificationInOrderMode;

File: src/main/java/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -5,9 +5,6 @@
 
 package org.mockito.internal.verification;
 
-import org.mockito.internal.util.ObjectMethodsGuru;
-import org.mockito.internal.util.collections.ListUtil;
-import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockito.invocation.Invocation;
 
 import java.util.List;

File: src/main/java/org/mockito/internal/verification/VerificationDataImpl.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.exceptions.Reporter;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.stubbing.InvocationContainer;
 import org.mockito.internal.util.ObjectMethodsGuru;

File: src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java
Patch:
@@ -10,6 +10,7 @@
 import static org.mockito.internal.invocation.InvocationsFinder.findPreviousVerifiedInOrder;
 
 import java.util.List;
+
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;

File: src/main/java/org/mockito/plugins/MockMaker.java
Patch:
@@ -121,7 +121,7 @@ void resetMock(
      * @since 2.0
      */
     @Incubating
-    static interface TypeMockability {
+    interface TypeMockability {
         /**
          * informs if type is mockable
          */

File: src/main/java/org/mockito/verification/VerificationWrapperInOrderWrapper.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockito.verification;
 
-import org.mockito.InOrder;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.InOrderImpl;
 import org.mockito.internal.verification.InOrderWrapper;

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -124,7 +124,7 @@ private static <T> MockCreationSettings<T> settingsWithConstructorFor(Class<T> t
         return mockSettings;
     }
 
-    public static MockHandler dummyH() {
+    private static MockHandler dummyH() {
         return new DummyMockHandler();
     }
 

File: subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java
Patch:
@@ -15,7 +15,7 @@
 
 public class MockitoBeforeTestNGMethod {
 
-    private WeakHashMap<Object, Boolean> initializedInstances = new WeakHashMap<Object, Boolean>();
+    private final WeakHashMap<Object, Boolean> initializedInstances = new WeakHashMap<>();
 
     /**
      * Initialize mocks.

File: subprojects/testng/src/main/java/org/mockito/testng/MockitoTestNGListener.java
Patch:
@@ -49,8 +49,8 @@
  */
 public class MockitoTestNGListener implements IInvokedMethodListener {
 
-    private MockitoBeforeTestNGMethod beforeTest = new MockitoBeforeTestNGMethod();
-    private MockitoAfterTestNGMethod afterTest = new MockitoAfterTestNGMethod();
+    private final MockitoBeforeTestNGMethod beforeTest = new MockitoBeforeTestNGMethod();
+    private final MockitoAfterTestNGMethod afterTest = new MockitoAfterTestNGMethod();
 
 
     public void beforeInvocation(IInvokedMethod method, ITestResult testResult) {

File: src/main/java/org/mockito/internal/matchers/CompareEqual.java
Patch:
@@ -9,7 +9,7 @@
 
 public class CompareEqual<T extends Comparable<T>> extends CompareTo<T> implements Serializable {
 
-    public CompareEqual(Comparable<T> value) {
+    public CompareEqual(T value) {
         super(value);
     }
 

File: src/main/java/org/mockito/internal/matchers/GreaterOrEqual.java
Patch:
@@ -9,7 +9,7 @@
 
 public class GreaterOrEqual<T extends Comparable<T>> extends CompareTo<T> implements Serializable {
 
-    public GreaterOrEqual(Comparable<T> value) {
+    public GreaterOrEqual(T value) {
         super(value);
     }
 

File: src/main/java/org/mockito/internal/matchers/GreaterThan.java
Patch:
@@ -9,7 +9,7 @@
 
 public class GreaterThan<T extends Comparable<T>> extends CompareTo<T> implements Serializable {
 
-    public GreaterThan(Comparable<T> value) {
+    public GreaterThan(T value) {
         super(value);
     }
 

File: src/main/java/org/mockito/internal/matchers/LessOrEqual.java
Patch:
@@ -9,7 +9,7 @@
 
 public class LessOrEqual<T extends Comparable<T>> extends CompareTo<T> implements Serializable {
 
-    public LessOrEqual(Comparable<T> value) {
+    public LessOrEqual(T value) {
         super(value);
     }
 

File: src/main/java/org/mockito/internal/matchers/LessThan.java
Patch:
@@ -9,7 +9,7 @@
 
 public class LessThan<T extends Comparable<T>> extends CompareTo<T> implements Serializable {
 
-    public LessThan(Comparable<T> value) {
+    public LessThan(T value) {
         super(value);
     }
 

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1047,7 +1047,7 @@
  *
  * <h3 id="33">33. <a class="meaningful_link" href="#mockito_junit_rule">(new) Mockito JUnit rule (Since 1.10.17)</a></h3>
  *
- * Mockito now offers a JUnit rule. Until now in JUnit there was two ways to initialize fields annotated by Mockito annotations
+ * Mockito now offers a JUnit rule. Until now in JUnit there were two ways to initialize fields annotated by Mockito annotations
  * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.
  *
  * <ul>

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -95,7 +95,6 @@ public boolean hasSimilarMethod(Invocation candidate) {
     }
 
     public boolean hasSameMethod(Invocation candidate) {
-        // TODO: Resolve candidate parameter types for bridge methods.
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
 

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1047,7 +1047,7 @@
  *
  * <h3 id="33">33. <a class="meaningful_link" href="#mockito_junit_rule">(new) Mockito JUnit rule (Since 1.10.17)</a></h3>
  *
- * Mockito now offers a JUnit rule. Until now in JUnit there was two wasy to initialize fields annotated by Mockito annotations
+ * Mockito now offers a JUnit rule. Until now in JUnit there was two ways to initialize fields annotated by Mockito annotations
  * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.
  *
  * <ul>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1047,7 +1047,7 @@
  *
  * <h3 id="33">33. <a class="meaningful_link" href="#mockito_junit_rule">(new) Mockito JUnit rule (Since 1.10.17)</a></h3>
  *
- * Mockito now offers a JUnit rule. Until now in JUnit there was two wasy to initialize fields annotated by Mockito annotations
+ * Mockito now offers a JUnit rule. Until now in JUnit there was two ways to initialize fields annotated by Mockito annotations
  * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.
  *
  * <ul>

File: src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java
Patch:
@@ -5,6 +5,8 @@
 
 /**
  * Functional interfaces to make it easy to implement answers in Java 8
+ * 
+ * @since 2.0.0
  */
 public class AnswerFunctionalInterfaces {
 	/**

File: src/main/java/org/mockito/invocation/InvocationOnMock.java
Patch:
@@ -40,6 +40,7 @@ public interface InvocationOnMock extends Serializable {
      * Returns casted argument at the given index
      * @param index argument index
      * @return casted argument at the given index
+     * @since 2.0.0
      */
     <T> T getArgument(int index);
 

File: src/test/java/org/mockito/internal/configuration/MockInjectionTest.java
Patch:
@@ -99,6 +99,6 @@ public AnObjectWithConstructor(Set<String> strings) {
     }
 
     public static class AnObjectWithoutConstructor {
-        private Set theSet;
+        private Set<?> theSet;
     }
 }

File: src/test/java/org/mockito/internal/util/reflection/GenericMasterTest.java
Patch:
@@ -23,12 +23,13 @@ public class GenericMasterTest {
     List<Set<String>> nested;
     List<Set<Collection<String>>> multiNested;
 
-    public interface ListSet extends List<Set> {}
+    public interface ListSet extends List<Set<?>> {}
     public interface MapNumberString extends Map<Number, String> {}
     public class HashMapNumberString<K extends Number> extends HashMap<K, String> {}
 
     public List<Number> numberList() { return null; }
     public Comparable<Number> numberComparable() { return null; }
+    @SuppressWarnings("rawtypes")
     public List rawList() { return null; }
     public List<? extends Type> typeList() { return null; }
 

File: src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
Patch:
@@ -33,7 +33,7 @@
 @RunWith(MockitoJUnitRunner.class)
 public class ParameterizedConstructorInstantiatorTest {
 
-    private Set whateverForNow;
+    private Set<?> whateverForNow;
     private OneConstructor withOneConstructor;
     private MultipleConstructor withMultipleConstructor;
     private NoArgConstructor withNoArgConstructor;
@@ -82,7 +82,7 @@ public void should_instantiate_type_if_resolver_provide_matching_types() throws
     @Test
     public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type() throws Exception {
         Observer observer = mock(Observer.class);
-        Set wrongArg = mock(Set.class);
+        Set<?> wrongArg = mock(Set.class);
         given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, wrongArg });
 
         try {

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.verify;
 
-@SuppressWarnings("unchecked")
 public class PlaygroundWithDemoOfUnclonedParametersProblemTest extends TestBase {
 
     ImportManager importManager;
@@ -73,8 +72,8 @@ public void shouldAlterFinalLog() {
         verify(importLogDao).alter(any(ImportLogBean.class));
     }
 
-    private Answer byCheckingLogEquals(final ImportLogBean status) {
-        return new Answer() {
+    private Answer<Object> byCheckingLogEquals(final ImportLogBean status) {
+        return new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 ImportLogBean bean =  invocation.getArgument(0);
                 assertEquals(status, bean);

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java
Patch:
@@ -75,6 +75,7 @@ public void shouldUseAnnotatedCaptor() {
         assertEquals("Williams", captor.getValue().getSurname());
     }
         
+    @SuppressWarnings("rawtypes")
     @Captor ArgumentCaptor genericLessCaptor;
     
     @Test

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static junit.framework.TestCase.*;
 
-@SuppressWarnings("unchecked")
 public class CaptorAnnotationTest extends TestBase {
 
     @Retention(RetentionPolicy.RUNTIME)
@@ -32,14 +31,15 @@ public class CaptorAnnotationTest extends TestBase {
     @Captor
     ArgumentCaptor<List<List<String>>> genericsCaptor;
 
+    @SuppressWarnings("rawtypes")
     @Captor
     ArgumentCaptor nonGenericCaptorIsAllowed;
 
     @Mock
     MockInterface mockInterface;
 
     @NotAMock
-    Set notAMock;
+    Set<?> notAMock;
 
     public interface MockInterface {
         void testMe(String simple, List<List<String>> genericList);
@@ -71,7 +71,7 @@ public void testNormalUsage() {
 
     public static class WrongType {
         @Captor
-        List wrongType;
+        List<?> wrongType;
     }
 
     @Test

File: src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java
Patch:
@@ -16,10 +16,9 @@
 
 import static junit.framework.TestCase.fail;
 
-@SuppressWarnings("unchecked")
 public class CaptorAnnotationUnhappyPathTest extends TestBase {
     
-    @Captor List notACaptorField;
+    @Captor List<?> notACaptorField;
 
     @Before
     @Override

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
Patch:
@@ -103,7 +103,7 @@ public static class junit_test_with_3_tests_methods {
         @Test public void test_3() { }
 
         private static class some_class_with_parametered_constructor {
-            public some_class_with_parametered_constructor(List collaborator) {
+            public some_class_with_parametered_constructor(List<?> collaborator) {
                 constructor_instantiation++;
             }
         }

File: src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -140,7 +140,7 @@ public void should_allow_construction_of_captor_for_parameterized_type_in_a_conv
     @Test
     public void should_allow_construction_of_captor_for_a_more_specific_type()  {
         //the test passes if this expression compiles
-        ArgumentCaptor<List> argument = ArgumentCaptor.forClass(ArrayList.class);
+        ArgumentCaptor<List<?>> argument = ArgumentCaptor.forClass(ArrayList.class);
         assertNotNull(argument);
     }
     

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -326,7 +326,7 @@ public void shouldUseSmartEqualsForPrimitiveArrays() throws Exception {
     
     @Test(expected=ArgumentsAreDifferent.class)
     public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments() {        
-        List list = Mockito.mock(List.class);
+        List<Object> list = Mockito.mock(List.class);
         
         list.add("test"); // testing fix for issue 20
         list.contains(new Object[] {"1"});

File: src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java
Patch:
@@ -18,7 +18,7 @@ public class SimpleArgumentResolverTest {
     @Test
     public void should_return_object_matching_given_types() throws Exception {
         ConstructorInjection.SimpleArgumentResolver resolver =
-                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashSet(), new ByteArrayOutputStream(), new HashMap()));
+                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashSet<Long>(), new ByteArrayOutputStream(), new HashMap<String, String>()));
 
         Object[] resolvedInstance = resolver.resolveTypeInstances(Set.class, Map.class, OutputStream.class);
 
@@ -31,7 +31,7 @@ public void should_return_object_matching_given_types() throws Exception {
     @Test
     public void should_return_null_when_match_is_not_possible_on_given_types() throws Exception {
         ConstructorInjection.SimpleArgumentResolver resolver =
-                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashSet(), new ByteArrayOutputStream()));
+                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashSet<Float>(), new ByteArrayOutputStream()));
 
         Object[] resolvedInstance = resolver.resolveTypeInstances(Set.class, Map.class, OutputStream.class);
 
@@ -44,7 +44,7 @@ public void should_return_null_when_match_is_not_possible_on_given_types() throw
     @Test
     public void should_return_null_when_types_are_primitives() throws Exception {
         ConstructorInjection.SimpleArgumentResolver resolver =
-                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashMap(), new TreeSet()));
+                new ConstructorInjection.SimpleArgumentResolver(newSetOf(new HashMap<Integer, String>(), new TreeSet<Integer>()));
 
         Object[] resolvedInstance = resolver.resolveTypeInstances(Set.class, Map.class, Boolean.class);
 

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
Patch:
@@ -95,7 +95,7 @@ public void should_report_failure_only_when_object_initialization_throws_excepti
     public static class junit_test_with_3_tests_methods {
         private static int constructor_instantiation = 0;
 
-        @Mock List some_collaborator;
+        @Mock List<?> some_collaborator;
         @InjectMocks some_class_with_parametered_constructor should_be_initialized_3_times;
 
         @Test public void test_1() { }
@@ -110,14 +110,14 @@ public some_class_with_parametered_constructor(List collaborator) {
     }
 
     private static class FailingConstructor {
-        FailingConstructor(Set set) {
+        FailingConstructor(Set<?> set) {
             throw new IllegalStateException("always fail");
         }
     }
 
     @Ignore("don't run this code in the test runner")
     private static class ATest {
-        @Mock Set set;
+        @Mock Set<?> set;
         @InjectMocks FailingConstructor failingConstructor;
     }
 

File: src/test/java/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -227,11 +227,10 @@ public void should_stub_by_delegating_to_real_method_using_typical_stubbing_synt
     }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void should_all_stubbed_mock_reference_access() throws Exception {
-        Set expectedMock = mock(Set.class);
+        Set<?> expectedMock = mock(Set.class);
 
-        Set returnedMock = given(expectedMock.isEmpty()).willReturn(false).getMock();
+        Set<?> returnedMock = given(expectedMock.isEmpty()).willReturn(false).getMock();
 
         Assertions.assertThat(returnedMock).isEqualTo(expectedMock);
     }

File: src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
Patch:
@@ -16,7 +16,7 @@ public interface TestMock {
 
     @Test(expected = NoInteractionsWanted.class)
     public void should_not_throw_ClassCastException_when_mock_verification_fails() {
-        TestMock test = mock(TestMock.class, new Answer() {
+        TestMock test = mock(TestMock.class, new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return false;
             }
@@ -27,7 +27,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
 
     @Test(expected = WrongTypeOfReturnValue.class)
     public void should_report_bogus_default_answer() throws Exception {
-        TestMock test = mock(TestMock.class, new Answer() {
+        TestMock test = mock(TestMock.class, new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return false;
             }

File: src/test/java/org/mockitousage/bugs/MultipleInOrdersTest.java
Patch:
@@ -18,7 +18,7 @@ public class MultipleInOrdersTest {
     
     @Test
     public void inOrderTest(){
-        List list= mock(List.class);
+        List<String> list= mock(List.class);
         
         list.add("a");
         list.add("x");

File: src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -18,10 +18,9 @@
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;
 
-@SuppressWarnings("unchecked")
 public class RestrictedObjectMethodsTest extends TestBase {
 
-    @Mock List mock;
+    @Mock List<?> mock;
 
     @After
     public void after() {

File: src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java
Patch:
@@ -16,13 +16,12 @@
 import static junit.framework.TestCase.assertEquals;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class LoadsOfMocksTest extends TestBase {
 
     @Ignore("Use it for performance checks")
     @Test
     public void testSomething() {
-        List mocks = new LinkedList();
+        List<IMethods> mocks = new LinkedList<IMethods>();
         for (int i = 0; i < 50000; i++) {
             System.out.println("Mock no: " + i);
             IMethods mock = mock(IMethods.class);

File: src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -22,7 +22,7 @@ public class SpyingOnInterfacesTest extends TestBase {
 
     @Test
     public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {
-        List list = mock(List.class);
+        List<?> list = mock(List.class);
         try {
             //when
             when(list.get(0)).thenCallRealMethod();
@@ -34,9 +34,9 @@ public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {
     @Test
     public void shouldFailInRuntimeWhenCallingRealMethodOnInterface() throws Exception {
         //given
-        List list = mock(List.class);
+        List<Object> list = mock(List.class);
         when(list.get(0)).thenAnswer(
-            new Answer() {
+            new Answer<Object>() {
                 public Object answer(InvocationOnMock invocation) throws Throwable {
                     return invocation.callRealMethod();
                 }

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -22,11 +22,10 @@
 import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class SpyingOnRealObjectsTest extends TestBase {
 
-    List list = new LinkedList();
-    List spy = Mockito.spy(list);
+    List<String> list = new LinkedList<String>();
+    List<String> spy = Mockito.spy(list);
     
     @Test
     public void shouldVerify() {

File: src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java
Patch:
@@ -13,19 +13,18 @@
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.spy;
 
-@SuppressWarnings("unchecked")
 public class StubbingSpiesDoesNotYieldNPETest extends TestBase {
     
     class Foo {
         public int len(String text) {
             return text.length();
         }
         
-        public int size(Map map) {
+        public int size(Map<?, ?> map) {
             return map.size();
         }
         
-        public int size(Collection collection) {
+        public int size(Collection<?> collection) {
             return collection.size();
         }
     }

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -18,7 +18,6 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings({"unchecked"})
 public class StubbingWithCustomAnswerTest extends TestBase {
     @Mock
     private IMethods mock;
@@ -115,7 +114,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
         assertEquals("assertions passed", mock.simpleMethod("test"));
     }
 
-    private static class RecordCall implements Answer {
+    private static class RecordCall implements Answer<Object> {
         private boolean called = false;
 
         public boolean isCalled() {

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -16,10 +16,9 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class AtLeastXVerificationTest extends TestBase {
 
-    @Mock private List mock;
+    @Mock private List<String> mock;
 
     @Test
     public void shouldVerifyAtLeastXTimes() throws Exception {

File: src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java
Patch:
@@ -20,10 +20,9 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class AtMostXVerificationTest extends TestBase {
 
-    @Mock private List mock;
+    @Mock private List<String> mock;
     
     @Test
     public void shouldVerifyAtMostXTimes() throws Exception {

File: src/test/java/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -18,11 +18,10 @@
 import static junit.framework.TestCase.fail;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class BasicVerificationTest extends TestBase {
 
-    @Mock private List mock;
-    @Mock private List mockTwo;
+    @Mock private List<String> mock;
+    @Mock private List<String> mockTwo;
     
     @Test
     public void shouldVerify() throws Exception {

File: src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -19,7 +19,7 @@
 @SuppressWarnings("unchecked")
 public class ExactNumberOfTimesVerificationTest extends TestBase {
 
-    private LinkedList mock;
+    private LinkedList<String> mock;
 
     @Before
     public void setup() {

File: src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
Patch:
@@ -16,7 +16,7 @@ public interface TestMock {
 
     @Test(expected = NoInteractionsWanted.class)
     public void should_not_throw_ClassCastException_when_mock_verification_fails() {
-        TestMock test = mock(TestMock.class, new Answer() {
+        TestMock test = mock(TestMock.class, new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return false;
             }
@@ -27,7 +27,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
 
     @Test(expected = WrongTypeOfReturnValue.class)
     public void should_report_bogus_default_answer() throws Exception {
-        TestMock test = mock(TestMock.class, new Answer() {
+        TestMock test = mock(TestMock.class, new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
                 return false;
             }

File: src/test/java/org/mockitousage/bugs/MultipleInOrdersTest.java
Patch:
@@ -18,7 +18,7 @@ public class MultipleInOrdersTest {
     
     @Test
     public void inOrderTest(){
-        List list= mock(List.class);
+        List<String> list= mock(List.class);
         
         list.add("a");
         list.add("x");

File: src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -18,10 +18,9 @@
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;
 
-@SuppressWarnings("unchecked")
 public class RestrictedObjectMethodsTest extends TestBase {
 
-    @Mock List mock;
+    @Mock List<?> mock;
 
     @After
     public void after() {

File: src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java
Patch:
@@ -16,13 +16,12 @@
 import static junit.framework.TestCase.assertEquals;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class LoadsOfMocksTest extends TestBase {
 
     @Ignore("Use it for performance checks")
     @Test
     public void testSomething() {
-        List mocks = new LinkedList();
+        List<IMethods> mocks = new LinkedList<IMethods>();
         for (int i = 0; i < 50000; i++) {
             System.out.println("Mock no: " + i);
             IMethods mock = mock(IMethods.class);

File: src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -22,7 +22,7 @@ public class SpyingOnInterfacesTest extends TestBase {
 
     @Test
     public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {
-        List list = mock(List.class);
+        List<?> list = mock(List.class);
         try {
             //when
             when(list.get(0)).thenCallRealMethod();
@@ -34,9 +34,9 @@ public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {
     @Test
     public void shouldFailInRuntimeWhenCallingRealMethodOnInterface() throws Exception {
         //given
-        List list = mock(List.class);
+        List<Object> list = mock(List.class);
         when(list.get(0)).thenAnswer(
-            new Answer() {
+            new Answer<Object>() {
                 public Object answer(InvocationOnMock invocation) throws Throwable {
                     return invocation.callRealMethod();
                 }

File: src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -22,11 +22,10 @@
 import static org.mockito.Matchers.anyObject;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class SpyingOnRealObjectsTest extends TestBase {
 
-    List list = new LinkedList();
-    List spy = Mockito.spy(list);
+    List<String> list = new LinkedList<String>();
+    List<String> spy = Mockito.spy(list);
     
     @Test
     public void shouldVerify() {

File: src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java
Patch:
@@ -13,19 +13,18 @@
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.spy;
 
-@SuppressWarnings("unchecked")
 public class StubbingSpiesDoesNotYieldNPETest extends TestBase {
     
     class Foo {
         public int len(String text) {
             return text.length();
         }
         
-        public int size(Map map) {
+        public int size(Map<?, ?> map) {
             return map.size();
         }
         
-        public int size(Collection collection) {
+        public int size(Collection<?> collection) {
             return collection.size();
         }
     }

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -18,7 +18,6 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings({"unchecked"})
 public class StubbingWithCustomAnswerTest extends TestBase {
     @Mock
     private IMethods mock;
@@ -115,7 +114,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
         assertEquals("assertions passed", mock.simpleMethod("test"));
     }
 
-    private static class RecordCall implements Answer {
+    private static class RecordCall implements Answer<Object> {
         private boolean called = false;
 
         public boolean isCalled() {

File: src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -16,10 +16,9 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class AtLeastXVerificationTest extends TestBase {
 
-    @Mock private List mock;
+    @Mock private List<String> mock;
 
     @Test
     public void shouldVerifyAtLeastXTimes() throws Exception {

File: src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java
Patch:
@@ -20,10 +20,9 @@
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class AtMostXVerificationTest extends TestBase {
 
-    @Mock private List mock;
+    @Mock private List<String> mock;
     
     @Test
     public void shouldVerifyAtMostXTimes() throws Exception {

File: src/test/java/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -18,11 +18,10 @@
 import static junit.framework.TestCase.fail;
 import static org.mockito.Mockito.*;
 
-@SuppressWarnings("unchecked")
 public class BasicVerificationTest extends TestBase {
 
-    @Mock private List mock;
-    @Mock private List mockTwo;
+    @Mock private List<String> mock;
+    @Mock private List<String> mockTwo;
     
     @Test
     public void shouldVerify() throws Exception {

File: src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -19,7 +19,7 @@
 @SuppressWarnings("unchecked")
 public class ExactNumberOfTimesVerificationTest extends TestBase {
 
-    private LinkedList mock;
+    private LinkedList<String> mock;
 
     @Before
     public void setup() {

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -30,7 +30,7 @@ public class ByteBuddyMockMakerTest {
     public void should_create_mock_from_interface() throws Exception {
         SomeInterface proxy = mockMaker.createMock(settingsFor(SomeInterface.class), dummyH());
 
-        Class superClass = proxy.getClass().getSuperclass();
+        Class<?> superClass = proxy.getClass().getSuperclass();
         assertThat(superClass).isEqualTo(Object.class);
     }
 
@@ -39,7 +39,7 @@ public void should_create_mock_from_interface() throws Exception {
     public void should_create_mock_from_class() throws Exception {
         ClassWithoutConstructor proxy = mockMaker.createMock(settingsFor(ClassWithoutConstructor.class), dummyH());
 
-        Class superClass = proxy.getClass().getSuperclass();
+        Class<?> superClass = proxy.getClass().getSuperclass();
         assertThat(superClass).isEqualTo(ClassWithoutConstructor.class);
     }
 
@@ -141,7 +141,7 @@ public void instantiate_fine_when_objenesis_on_the_classpath() throws Exception
         // then everything went fine
     }
 
-    private static <T> MockCreationSettings<T> settingsFor(Class<T> type, Class... extraInterfaces) {
+    private static <T> MockCreationSettings<T> settingsFor(Class<T> type, Class<?>... extraInterfaces) {
         MockSettingsImpl<T> mockSettings = new MockSettingsImpl<T>();
         mockSettings.setTypeToMock(type);
         if(extraInterfaces.length > 0) mockSettings.extraInterfaces(extraInterfaces);

File: src/test/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java
Patch:
@@ -57,7 +57,7 @@ public void validate_simple_code_idea_where_weakhashmap_with_classloader_as_key_
                 .withClassDefinition("foo.Bar", makeMarkerInterface("foo.Bar"))
                 .build();
 
-        cache.put(short_lived_classloader, new HoldingAReference(new WeakReference<Class>(short_lived_classloader.loadClass("foo.Bar"))));
+        cache.put(short_lived_classloader, new HoldingAReference(new WeakReference<Class<?>>(short_lived_classloader.loadClass("foo.Bar"))));
 
         assertThat(cache).hasSize(1);
 
@@ -72,9 +72,9 @@ public void validate_simple_code_idea_where_weakhashmap_with_classloader_as_key_
     }
 
     static class HoldingAReference {
-        final WeakReference<Class> a;
+        final WeakReference<Class<?>> a;
 
-        HoldingAReference(WeakReference<Class> a) {
+        HoldingAReference(WeakReference<Class<?>> a) {
             this.a = a;
         }
     }

File: src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java
Patch:
@@ -39,6 +39,7 @@ public void describeTo(Description description) {}
     }
 
     //non-generic
+    @SuppressWarnings("rawtypes")
     private static class NonGenericMatcher extends BaseMatcher {
         public boolean matches(Object o) {
             return true;
@@ -65,6 +66,7 @@ public void describeTo(Description description) {}
     }
 
     //non-generic matcher implementing the interface
+    @SuppressWarnings("rawtypes")
     private static class NonGenericMatcherFromInterface extends BaseMatcher {
         public boolean matches(Object o) {
             return true;

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -43,7 +43,7 @@ public void should_be_a_citizen_of_hashes() throws Exception {
         Invocation invocation = new InvocationBuilder().toInvocation();
         Invocation invocationTwo = new InvocationBuilder().args("blah").toInvocation();
 
-        Map map = new HashMap();
+        Map<InvocationMatcher, String> map = new HashMap<InvocationMatcher, String>();
         map.put(new InvocationMatcher(invocation), "one");
         map.put(new InvocationMatcher(invocationTwo), "two");
 

File: src/test/java/org/mockito/internal/matchers/VarargCapturingMatcherTest.java
Patch:
@@ -52,7 +52,7 @@ public void can_capture_primitive_varargs() throws Exception {
     @Test
     public void should_scream_when_nothing_yet_captured() throws Exception {
         //given
-        VarargCapturingMatcher m = new VarargCapturingMatcher<Object>();
+        VarargCapturingMatcher<Object> m = new VarargCapturingMatcher<Object>();
 
         try {
             //when

File: src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings({"unchecked", "unused"})
 public class SpyAnnotationTest extends TestBase {
 
-    @Spy final List spiedList = new ArrayList();
+    @Spy final List<String> spiedList = new ArrayList<String>();
 
     @Spy NestedClassWithNoArgConstructor staticTypeWithNoArgConstructor;
 

File: src/test/java/org/mockitousage/basicapi/MockAccessTest.java
Patch:
@@ -17,16 +17,16 @@ public class MockAccessTest {
 
     @Test
     public void shouldAllowStubbedMockReferenceAccess() throws Exception {
-        Set expectedMock = mock(Set.class);
+        Set<?> expectedMock = mock(Set.class);
 
-        Set returnedMock = when(expectedMock.isEmpty()).thenReturn(false).getMock();
+        Set<?> returnedMock = when(expectedMock.isEmpty()).thenReturn(false).getMock();
 
         assertEquals(expectedMock, returnedMock);
     }
 
     @Test
     public void stubbedMockShouldWorkAsUsual() throws Exception {
-        Set returnedMock = when(mock(Set.class).isEmpty()).thenReturn(false, true).getMock();
+        Set<?> returnedMock = when(mock(Set.class).isEmpty()).thenReturn(false, true).getMock();
 
         assertEquals(false, returnedMock.isEmpty());
         assertEquals(true, returnedMock.isEmpty());

File: src/test/java/org/mockitousage/serialization/ParallelSerializationTest.java
Patch:
@@ -30,7 +30,7 @@ public void single_mock_being_serialized_in_different_classloaders_by_multiple_t
 
         // when
         for (int i = 0; i <= iterations; i++) {
-            List<Future> futures = new ArrayList<Future>(threadingFactor);
+            List<Future<?>> futures = new ArrayList<Future<?>>(threadingFactor);
             final CyclicBarrier barrier_that_will_wait_until_threads_are_ready = new CyclicBarrier(threadingFactor);
 
             // prepare all threads by submitting a callable
@@ -58,7 +58,7 @@ public Object call() throws Exception {
             }
 
             // ensure we are getting the futures
-            for (Future future : futures) {
+            for (Future<?> future : futures) {
                 future.get();
             }
         }

File: src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -30,7 +30,7 @@ public class ByteBuddyMockMakerTest {
     public void should_create_mock_from_interface() throws Exception {
         SomeInterface proxy = mockMaker.createMock(settingsFor(SomeInterface.class), dummyH());
 
-        Class superClass = proxy.getClass().getSuperclass();
+        Class<?> superClass = proxy.getClass().getSuperclass();
         assertThat(superClass).isEqualTo(Object.class);
     }
 
@@ -39,7 +39,7 @@ public void should_create_mock_from_interface() throws Exception {
     public void should_create_mock_from_class() throws Exception {
         ClassWithoutConstructor proxy = mockMaker.createMock(settingsFor(ClassWithoutConstructor.class), dummyH());
 
-        Class superClass = proxy.getClass().getSuperclass();
+        Class<?> superClass = proxy.getClass().getSuperclass();
         assertThat(superClass).isEqualTo(ClassWithoutConstructor.class);
     }
 
@@ -141,7 +141,7 @@ public void instantiate_fine_when_objenesis_on_the_classpath() throws Exception
         // then everything went fine
     }
 
-    private static <T> MockCreationSettings<T> settingsFor(Class<T> type, Class... extraInterfaces) {
+    private static <T> MockCreationSettings<T> settingsFor(Class<T> type, Class<?>... extraInterfaces) {
         MockSettingsImpl<T> mockSettings = new MockSettingsImpl<T>();
         mockSettings.setTypeToMock(type);
         if(extraInterfaces.length > 0) mockSettings.extraInterfaces(extraInterfaces);

File: src/test/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java
Patch:
@@ -57,7 +57,7 @@ public void validate_simple_code_idea_where_weakhashmap_with_classloader_as_key_
                 .withClassDefinition("foo.Bar", makeMarkerInterface("foo.Bar"))
                 .build();
 
-        cache.put(short_lived_classloader, new HoldingAReference(new WeakReference<Class>(short_lived_classloader.loadClass("foo.Bar"))));
+        cache.put(short_lived_classloader, new HoldingAReference(new WeakReference<Class<?>>(short_lived_classloader.loadClass("foo.Bar"))));
 
         assertThat(cache).hasSize(1);
 
@@ -72,9 +72,9 @@ public void validate_simple_code_idea_where_weakhashmap_with_classloader_as_key_
     }
 
     static class HoldingAReference {
-        final WeakReference<Class> a;
+        final WeakReference<Class<?>> a;
 
-        HoldingAReference(WeakReference<Class> a) {
+        HoldingAReference(WeakReference<Class<?>> a) {
             this.a = a;
         }
     }

File: src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java
Patch:
@@ -39,6 +39,7 @@ public void describeTo(Description description) {}
     }
 
     //non-generic
+    @SuppressWarnings("rawtypes")
     private static class NonGenericMatcher extends BaseMatcher {
         public boolean matches(Object o) {
             return true;
@@ -65,6 +66,7 @@ public void describeTo(Description description) {}
     }
 
     //non-generic matcher implementing the interface
+    @SuppressWarnings("rawtypes")
     private static class NonGenericMatcherFromInterface extends BaseMatcher {
         public boolean matches(Object o) {
             return true;

File: src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -43,7 +43,7 @@ public void should_be_a_citizen_of_hashes() throws Exception {
         Invocation invocation = new InvocationBuilder().toInvocation();
         Invocation invocationTwo = new InvocationBuilder().args("blah").toInvocation();
 
-        Map map = new HashMap();
+        Map<InvocationMatcher, String> map = new HashMap<InvocationMatcher, String>();
         map.put(new InvocationMatcher(invocation), "one");
         map.put(new InvocationMatcher(invocationTwo), "two");
 

File: src/test/java/org/mockito/internal/matchers/VarargCapturingMatcherTest.java
Patch:
@@ -52,7 +52,7 @@ public void can_capture_primitive_varargs() throws Exception {
     @Test
     public void should_scream_when_nothing_yet_captured() throws Exception {
         //given
-        VarargCapturingMatcher m = new VarargCapturingMatcher<Object>();
+        VarargCapturingMatcher<Object> m = new VarargCapturingMatcher<Object>();
 
         try {
             //when

File: src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings({"unchecked", "unused"})
 public class SpyAnnotationTest extends TestBase {
 
-    @Spy final List spiedList = new ArrayList();
+    @Spy final List<String> spiedList = new ArrayList<String>();
 
     @Spy NestedClassWithNoArgConstructor staticTypeWithNoArgConstructor;
 

File: src/test/java/org/mockitousage/basicapi/MockAccessTest.java
Patch:
@@ -17,16 +17,16 @@ public class MockAccessTest {
 
     @Test
     public void shouldAllowStubbedMockReferenceAccess() throws Exception {
-        Set expectedMock = mock(Set.class);
+        Set<?> expectedMock = mock(Set.class);
 
-        Set returnedMock = when(expectedMock.isEmpty()).thenReturn(false).getMock();
+        Set<?> returnedMock = when(expectedMock.isEmpty()).thenReturn(false).getMock();
 
         assertEquals(expectedMock, returnedMock);
     }
 
     @Test
     public void stubbedMockShouldWorkAsUsual() throws Exception {
-        Set returnedMock = when(mock(Set.class).isEmpty()).thenReturn(false, true).getMock();
+        Set<?> returnedMock = when(mock(Set.class).isEmpty()).thenReturn(false, true).getMock();
 
         assertEquals(false, returnedMock.isEmpty());
         assertEquals(true, returnedMock.isEmpty());

File: src/test/java/org/mockitousage/serialization/ParallelSerializationTest.java
Patch:
@@ -30,7 +30,7 @@ public void single_mock_being_serialized_in_different_classloaders_by_multiple_t
 
         // when
         for (int i = 0; i <= iterations; i++) {
-            List<Future> futures = new ArrayList<Future>(threadingFactor);
+            List<Future<?>> futures = new ArrayList<Future<?>>(threadingFactor);
             final CyclicBarrier barrier_that_will_wait_until_threads_are_ready = new CyclicBarrier(threadingFactor);
 
             // prepare all threads by submitting a callable
@@ -58,7 +58,7 @@ public Object call() throws Exception {
             }
 
             // ensure we are getting the futures
-            for (Future future : futures) {
+            for (Future<?> future : futures) {
                 future.get();
             }
         }

File: src/test/java/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
Patch:
@@ -106,7 +106,7 @@ public void should_fail_when_calling_real_method_on_interface() throws Throwable
     @Test
     public void should_be_OK_when_calling_real_method_on_concrete_class() throws Throwable {
         //given
-        ArrayList mock = mock(ArrayList.class);
+        ArrayList<?> mock = mock(ArrayList.class);
         mock.clear();
         Invocation invocationOnClass = new MockitoCore().getLastInvocation();
         //when

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -87,7 +87,7 @@ public void supports_primitive_matchers_from_core_library() {
         verify(mock).oneArg(floatThat(is(6.0F)));
     }
 
-    @SuppressWarnings("raw")
+    @SuppressWarnings("rawtypes")
     private class NonGenericMatcher extends BaseMatcher {
         public boolean matches(Object o) {
             return true;

File: src/test/java/org/mockitoutil/ExtraMatchers.java
Patch:
@@ -77,9 +77,9 @@ public static <T> Assertor<Object> hasBridgeMethod(final String methodName) {
         return new Assertor<Object>() {
 
             public void assertValue(Object o) {
-                Class clazz = null;
+                Class<?> clazz = null;
                 if (o instanceof Class) {
-                    clazz = (Class) o;
+                    clazz = (Class<?>) o;
                 } else {
                     clazz = o.getClass();
                 }
@@ -137,7 +137,7 @@ public static org.hamcrest.Matcher<Object> clazz(Class<?> type) {
         return CoreMatchers.instanceOf(type);
     }
 
-    public static Assertor hasMethodsInStackTrace(final String ... methods) {
+    public static Assertor<Throwable> hasMethodsInStackTrace(final String ... methods) {
         return new Assertor<Throwable>() {
             public void assertValue(Throwable value) {
                 StackTraceElement[] trace = value.getStackTrace();

File: src/test/java/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
Patch:
@@ -106,7 +106,7 @@ public void should_fail_when_calling_real_method_on_interface() throws Throwable
     @Test
     public void should_be_OK_when_calling_real_method_on_concrete_class() throws Throwable {
         //given
-        ArrayList mock = mock(ArrayList.class);
+        ArrayList<?> mock = mock(ArrayList.class);
         mock.clear();
         Invocation invocationOnClass = new MockitoCore().getLastInvocation();
         //when

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -87,7 +87,7 @@ public void supports_primitive_matchers_from_core_library() {
         verify(mock).oneArg(floatThat(is(6.0F)));
     }
 
-    @SuppressWarnings("raw")
+    @SuppressWarnings("rawtypes")
     private class NonGenericMatcher extends BaseMatcher {
         public boolean matches(Object o) {
             return true;

File: src/test/java/org/mockitoutil/ExtraMatchers.java
Patch:
@@ -77,9 +77,9 @@ public static <T> Assertor<Object> hasBridgeMethod(final String methodName) {
         return new Assertor<Object>() {
 
             public void assertValue(Object o) {
-                Class clazz = null;
+                Class<?> clazz = null;
                 if (o instanceof Class) {
-                    clazz = (Class) o;
+                    clazz = (Class<?>) o;
                 } else {
                     clazz = o.getClass();
                 }
@@ -137,7 +137,7 @@ public static org.hamcrest.Matcher<Object> clazz(Class<?> type) {
         return CoreMatchers.instanceOf(type);
     }
 
-    public static Assertor hasMethodsInStackTrace(final String ... methods) {
+    public static Assertor<Throwable> hasMethodsInStackTrace(final String ... methods) {
         return new Assertor<Throwable>() {
             public void assertValue(Throwable value) {
                 StackTraceElement[] trace = value.getStackTrace();

File: src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java
Patch:
@@ -19,9 +19,9 @@
 
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
+
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
@@ -148,7 +148,6 @@ public void canIgnoreInvocationsWithJunit() {
         verify(mock, timeout(50)).oneArg('2');
     }
 
-    @Ignore("Timeout is not implemented to work with in InOrder")
     @Test
     public void shouldAllowTimeoutVerificationInOrder() throws Exception {
         callAsyncWithDelay(mock, '1', 30, MILLISECONDS);

File: src/main/java/org/mockito/exceptions/Reporter.java
Patch:
@@ -132,7 +132,7 @@ public static MockitoException unfinishedVerificationException(Location location
         return exception;
     }
 
-    public static MockitoException notAMockPassedToVerify(Class type) {
+    public static MockitoException notAMockPassedToVerify(Class<?> type) {
         return new NotAMockException(join(
                 "Argument passed to verify() is of type " + type.getSimpleName() + " and is not a mock!",
                 "Make sure you place the parenthesis correctly!",
@@ -698,7 +698,7 @@ private static String exceptionCauseMessageIfAvailable(Exception details) {
         return details.getCause().getMessage();
     }
 
-    public static MockitoException mockedTypeIsInconsistentWithDelegatedInstanceType(Class mockedType, Object delegatedInstance) {
+    public static MockitoException mockedTypeIsInconsistentWithDelegatedInstanceType(Class<?> mockedType, Object delegatedInstance) {
         return new MockitoException(join(
                 "Mocked type must be the same as the type of your delegated instance.",
                 "Mocked type must be: " + delegatedInstance.getClass().getSimpleName() + ", but is: " + mockedType.getSimpleName(),
@@ -780,7 +780,7 @@ public static MockitoException defaultAnswerDoesNotAcceptNullParameter() {
         return new MockitoException("defaultAnswer() does not accept null parameter");
     }
 
-    public static MockitoException serializableWontWorkForObjectsThatDontImplementSerializable(Class classToMock) {
+    public static MockitoException serializableWontWorkForObjectsThatDontImplementSerializable(Class<?> classToMock) {
         return new MockitoException(join(
                 "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
                 "do not implement Serializable AND do not have a no-arg constructor.",

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -121,8 +121,8 @@ private static Object newSpyInstance(Object testInstance, Field field)
     }
 
     //TODO duplicated elsewhere
-    void assertNoIncompatibleAnnotations(Class annotation, Field field, Class... undesiredAnnotations) {
-        for (Class u : undesiredAnnotations) {
+    private void assertNoIncompatibleAnnotations(Class<? extends Annotation> annotation, Field field, Class<? extends Annotation>... undesiredAnnotations) {
+        for (Class<? extends Annotation> u : undesiredAnnotations) {
             if (field.isAnnotationPresent(u)) {
                 throw unsupportedCombinationOfAnnotations(annotation.getSimpleName(), annotation.getClass().getSimpleName());
             }

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
Patch:
@@ -71,7 +71,7 @@ private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> setting
         return typeToMock.cast(mock);
     }
 
-    private static String describeClass(Class type) {
+    private static String describeClass(Class<?> type) {
         return type == null ? "null" : "'" + type.getCanonicalName() + "', loaded by classloader : '" + type.getClassLoader() + "'";
     }
 

File: src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java
Patch:
@@ -102,7 +102,7 @@ private static class MockKey<T> {
 
             private MockKey(Class<T> mockedType, Set<Class<?>> interfaces) {
                 this.mockedType = mockedType.getName();
-                for (Class anInterface : interfaces) {
+                for (Class<?> anInterface : interfaces) {
                     types.add(anInterface.getName());
                 }
                 types.add(this.mockedType);

File: src/main/java/org/mockito/internal/util/MockCreationValidator.java
Patch:
@@ -32,7 +32,7 @@ public void validateExtraInterfaces(Class<?> classToMock, Collection<Class<?>> e
             return;
         }
 
-        for (Class i : extraInterfaces) {
+        for (Class<?> i : extraInterfaces) {
             if (classToMock == i) {
                 throw extraInterfacesCannotContainMockedType(classToMock);
             }

File: src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java
Patch:
@@ -62,7 +62,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
             
         iterable = (MyIterable) Proxy.newProxyInstance(
                 this.getClass().getClassLoader(),
-                new Class[] { MyIterable.class },
+                new Class<?>[] { MyIterable.class },
                 handler);
 
         //when

File: src/test/java/org/mockitousage/junitrunner/MockitoJUnitRunnerTest.java
Patch:
@@ -34,7 +34,7 @@ public class MockitoJUnitRunnerTest {
     @Ignore
     @Test public void fails_when_stubs_were_not_used() {
         JUnitCore runner = new JUnitCore();
-        Class[] tests = {StubbingInConstructorUnused.class,
+        Class<?>[] tests = {StubbingInConstructorUnused.class,
                 StubbingInBeforeUnused.class,
                 StubbingInTestUnused.class};
 

File: src/test/java/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java
Patch:
@@ -39,7 +39,7 @@ private Object read_stream_and_deserialize_it_in_class_loader_B(byte[] bytes) th
         return new SimplePerRealmReloadingClassLoader(this.getClass().getClassLoader(), isolating_test_classes())
                 .doInRealm(
                         "org.mockitousage.serialization.AcrossClassLoaderSerializationTest$ReadStreamAndDeserializeIt",
-                        new Class[]{ byte[].class },
+                        new Class<?>[]{ byte[].class },
                         new Object[]{ bytes }
                 );
     }

File: src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -190,7 +190,7 @@ public void shouldScreamWhenExtraInterfacesEmpty() {
     
     @Test
     public void shouldScreamWhenExtraInterfacesIsANullArray() {
-        mock(IMethods.class, withSettings().extraInterfaces((Class[]) null));
+        mock(IMethods.class, withSettings().extraInterfaces((Class<?>[]) null));
     }
 
     @Test

File: src/test/java/org/mockitoutil/SimplePerRealmReloadingClassLoader.java
Patch:
@@ -95,7 +95,7 @@ public Object doInRealm(String callableCalledInClassLoaderRealm) throws Exceptio
     }
 
 
-    public Object doInRealm(String callableCalledInClassLoaderRealm, Class[] argTypes, Object[] args) throws Exception {
+    public Object doInRealm(String callableCalledInClassLoaderRealm, Class<?>[] argTypes, Object[] args) throws Exception {
         ClassLoader current = Thread.currentThread().getContextClassLoader();
         try {
             Thread.currentThread().setContextClassLoader(this);

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -143,7 +143,7 @@ public static void assertNotContains(String sub, String string) {
     }
     
     protected static Invocation invocationOf(Class<?> type, String methodName, Object ... args) throws NoSuchMethodException {
-        Class[] types = new Class[args.length];
+        Class<?>[] types = new Class<?>[args.length];
         for (int i = 0; i < args.length; i++) {
             types[i] = args[i].getClass();
         }
@@ -153,7 +153,7 @@ protected static Invocation invocationOf(Class<?> type, String methodName, Objec
 
     protected static Invocation invocationOf(Class<?> type, String methodName, RealMethod realMethod) throws NoSuchMethodException {
         return new InvocationImpl(new Object(), new SerializableMethod(type.getMethod(methodName,
-                new Class[0])), new Object[0], 1, realMethod, new LocationImpl());
+                new Class<?>[0])), new Object[0], 1, realMethod, new LocationImpl());
     }
 
     protected static Invocation invocationAt(String location) {

File: src/main/java/org/mockito/ArgumentMatcher.java
Patch:
@@ -133,5 +133,5 @@ public interface ArgumentMatcher<T> {
      *            the argument
      * @return true if this matcher accepts the given argument.
      */
-    public boolean matches(T argument);
+    boolean matches(T argument);
 }

File: src/main/java/org/mockito/exceptions/Reporter.java
Patch:
@@ -754,7 +754,7 @@ private static StringBuilder possibleArgumentTypesOf(InvocationOnMock invocation
         return stringBuilder;
     }
 
-    public static MockitoException wrongTypeOfArgumentToReturn(InvocationOnMock invocation, String expectedType, Class actualType, int argumentIndex) {
+    public static MockitoException wrongTypeOfArgumentToReturn(InvocationOnMock invocation, String expectedType, Class<?> actualType, int argumentIndex) {
         return new WrongTypeOfReturnValue(join(
                 "The argument of type '" + actualType.getSimpleName() + "' cannot be returned because the following ",
                 "method should return the type '" + expectedType + "'",

File: src/main/java/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -54,10 +54,10 @@ public class ClassPathLoader {
      */
     @SuppressWarnings({"unchecked"})
     public IMockitoConfiguration loadConfiguration() {
-        //Trying to get config from classpath
-        Class configClass;
+        // Trying to get config from classpath
+        Class<?> configClass;
         try {
-            configClass = (Class) Class.forName(MOCKITO_CONFIGURATION_CLASS_NAME);
+            configClass = Class.forName(MOCKITO_CONFIGURATION_CLASS_NAME);
         } catch (ClassNotFoundException e) {
             //that's ok, it means there is no global config, using default one.
             return null;

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java
Patch:
@@ -250,7 +250,7 @@ public static class MockitoMockObjectInputStream extends ObjectInputStream {
         private final Class<?> typeToMock;
         private final Set<Class<?>> extraInterfaces;
 
-        public MockitoMockObjectInputStream(InputStream in, Class typeToMock, Set<Class<?>> extraInterfaces) throws IOException {
+        public MockitoMockObjectInputStream(InputStream in, Class<?> typeToMock, Set<Class<?>> extraInterfaces) throws IOException {
             super(in);
             this.typeToMock = typeToMock;
             this.extraInterfaces = extraInterfaces;

File: src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java
Patch:
@@ -70,7 +70,7 @@ public Object[] getRawArguments() {
     }
 
     @Override
-    public Class getRawReturnType() {
+    public Class<?> getRawReturnType() {
         return mockitoMethod.getReturnType();
     }
 

File: src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java
Patch:
@@ -14,7 +14,7 @@ public class MatcherGenericTypeExtractor {
      * Gets the generic type of given matcher. For example,
      * for matcher class that extends BaseMatcher[Integer] this method returns Integer
      */
-    public static Class genericTypeOfMatcher(Class matcherClass) {
+    public static Class<?> genericTypeOfMatcher(Class<?> matcherClass) {
         //TODO SF check if we can reuse it for Mockito ArgumentMatcher
         return genericTypeOf(matcherClass, BaseMatcher.class, Matcher.class);
     }

File: src/main/java/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -69,8 +69,6 @@ public <T> T getArgument(int index) {
         return (T)arguments[index];
     }
 
-
-
     public boolean isVerified() {
         return verified || isIgnoredForVerification;
     }

File: src/main/java/org/mockito/internal/matchers/text/MatcherToString.java
Patch:
@@ -21,9 +21,9 @@ class MatcherToString {
      * @param matcher
      * @return
      */
-    static String toString(ArgumentMatcher matcher) {
+    static String toString(ArgumentMatcher<?> matcher) {
         ObjectMethodsGuru guru = new ObjectMethodsGuru();
-        Class cls = matcher.getClass();
+        Class<?> cls = matcher.getClass();
         while(cls != Object.class) {
             Method[] methods = cls.getDeclaredMethods();
             for (Method m : methods) {

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -95,7 +95,7 @@ private boolean argumentPositionInRange(InvocationOnMock invocation) {
         return true;
     }
 
-    public Class returnedTypeOnSignature(InvocationOnMock invocation) {
+    public Class<?> returnedTypeOnSignature(InvocationOnMock invocation) {
         int actualArgumentPosition = actualArgumentPosition(invocation);
 
         if(!invocation.getMethod().isVarArgs()) {

File: src/main/java/org/mockito/internal/util/StringJoiner.java
Patch:
@@ -20,13 +20,13 @@ public class StringJoiner {
      */
     @SuppressWarnings("unchecked")
     public static String join(Object ... linesToBreak) {
-        return join("\n", (Iterable<String>) (Object) asList(linesToBreak));
+        return join("\n", asList(linesToBreak));
     }
 
     /**
      * Joins Strings with EOL character
      */
-    public static String join(String start, Iterable<String> lines) {
+    public static String join(String start, Iterable<?> lines) {
         StringBuilder out = new StringBuilder(start);
         for (Object line : lines) {
             out.append(line.toString()).append("\n");

File: src/main/java/org/mockito/invocation/Invocation.java
Patch:
@@ -47,7 +47,7 @@ public interface Invocation extends InvocationOnMock, DescribedInvocation {
      *
      * @return unprocessed arguments, exactly as provided to this invocation.
      */
-    Class getRawReturnType();
+    Class<?> getRawReturnType();
 
     /**
      * Marks this invocation as verified so that it will not cause verification error at

File: src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
Patch:
@@ -221,7 +221,7 @@ public void detect(IMethods mock) {
         }
     }
     
-    private void detectsAndCleansUp(DetectsInvalidState detector, Class expected) {
+    private void detectsAndCleansUp(DetectsInvalidState detector, Class<?> expected) {
         try {
             detector.detect(mock);
             fail("Should throw an exception");

File: src/main/java/org/mockito/internal/MockitoCore.java
Patch:
@@ -68,7 +68,8 @@ public <T> T mock(Class<T> typeToMock, MockSettings settings) {
 
     public <T> OngoingStubbing<T> when(T methodCall) {
         mockingProgress.stubbingStarted();
-        OngoingStubbing<T> stubbing = mockingProgress.pullOngoingStubbing();
+        @SuppressWarnings("unchecked")
+        OngoingStubbing<T> stubbing = (OngoingStubbing<T>) mockingProgress.pullOngoingStubbing();
         if (stubbing == null) {
             mockingProgress.reset();
             throw missingMethodInvocation();

File: src/main/java/org/mockito/internal/listeners/CollectCreatedMocks.java
Patch:
@@ -9,13 +9,13 @@
 @SuppressWarnings("unchecked")
 public class CollectCreatedMocks implements MockingStartedListener {
     
-    private final List toBeFilled;
+    private final List<Object> toBeFilled;
 
-    public CollectCreatedMocks(List toBeFilled) {
+    public CollectCreatedMocks(List<Object> toBeFilled) {
         this.toBeFilled = toBeFilled;
     }
 
-    public void mockingStarted(Object mock, Class classToMock) {
+    public void mockingStarted(Object mock, Class<?> classToMock) {
         toBeFilled.add(mock);
     }
 }

File: src/main/java/org/mockito/internal/listeners/MockingStartedListener.java
Patch:
@@ -9,5 +9,5 @@
 @SuppressWarnings("unchecked")
 public interface MockingStartedListener extends MockingProgressListener {
     
-    void mockingStarted(Object mock, Class classToMock);
+    void mockingStarted(Object mock, Class<?> classToMock);
 }

File: src/main/java/org/mockito/internal/matchers/LocalizedMatcher.java
Patch:
@@ -11,10 +11,10 @@
 @SuppressWarnings("unchecked")
 public class LocalizedMatcher {
 
-    private final ArgumentMatcher matcher;
+    private final ArgumentMatcher<?> matcher;
     private final Location location;
 
-    public LocalizedMatcher(ArgumentMatcher matcher) {
+    public LocalizedMatcher(ArgumentMatcher<?> matcher) {
         this.matcher = matcher;
         this.location = new LocationImpl();
     }
@@ -23,7 +23,7 @@ public Location getLocation() {
         return location;
     }
 
-    public ArgumentMatcher getMatcher() {
+    public ArgumentMatcher<?> getMatcher() {
         return matcher;
     }
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java
Patch:
@@ -12,7 +12,7 @@
 @SuppressWarnings("unchecked")
 public interface ArgumentMatcherStorage {
 
-    void reportMatcher(ArgumentMatcher matcher);
+    void reportMatcher(ArgumentMatcher<?> matcher);
 
     List<LocalizedMatcher> pullLocalizedMatchers();
 

File: src/main/java/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -13,9 +13,9 @@
 
 public interface MockingProgress {
     
-    void reportOngoingStubbing(OngoingStubbing ongoingStubbing);
+    void reportOngoingStubbing(OngoingStubbing<?> ongoingStubbing);
 
-    OngoingStubbing pullOngoingStubbing();
+    OngoingStubbing<?> pullOngoingStubbing();
 
     void verificationStarted(VerificationMode verificationMode);
 
@@ -37,7 +37,7 @@ public interface MockingProgress {
 
     ArgumentMatcherStorage getArgumentMatcherStorage();
     
-    void mockingStarted(Object mock, Class classToMock);
+    void mockingStarted(Object mock, Class<?> classToMock);
 
     void setListener(MockingProgressListener listener);
 

File: src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java
Patch:
@@ -26,11 +26,11 @@ static MockingProgress threadSafely() {
         return mockingProgress.get();
     }
     
-    public void reportOngoingStubbing(OngoingStubbing iOngoingStubbing) {
+    public void reportOngoingStubbing(OngoingStubbing<?> iOngoingStubbing) {
         threadSafely().reportOngoingStubbing(iOngoingStubbing);
     }
 
-    public OngoingStubbing pullOngoingStubbing() {
+    public OngoingStubbing<?> pullOngoingStubbing() {
         return threadSafely().pullOngoingStubbing();
     }
     
@@ -70,7 +70,7 @@ public ArgumentMatcherStorage getArgumentMatcherStorage() {
         return threadSafely().getArgumentMatcherStorage();
     }
     
-    public void mockingStarted(Object mock, Class classToMock) {
+    public void mockingStarted(Object mock, Class<?> classToMock) {
         threadSafely().mockingStarted(mock, classToMock);
     }
 

File: src/test/java/org/mockito/internal/invocation/InvocationImplTest.java
Patch:
@@ -158,7 +158,7 @@ public void shouldReturnCastedArgumentAt(){
             argTypes(int.class, int.class).args(1, argument).toInvocation();
 
         //when
-        int secondArgument = invocationOnInterface.getArgument(1);
+        int secondArgument = (Integer) invocationOnInterface.getArgument(1);
 
         //then
         assertTrue(secondArgument == argument);

File: src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Observable;
 
 import static junit.framework.TestCase.*;
+import static org.junit.Assume.assumeFalse;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 import static org.mockitoutil.SimpleSerializationUtil.*;
@@ -385,6 +386,8 @@ public void private_constructor_currently_not_supported_at_the_moment_at_deseria
 
     @Test
     public void BUG_ISSUE_399_try_some_mocks_with_current_answers() throws Exception {
+        assumeFalse(System.getProperty("java.version").startsWith("1.6")); // Bug in last public HotSpot 1.6
+
         IMethods iMethods = mock(IMethods.class, withSettings().serializable().defaultAnswer(RETURNS_DEEP_STUBS));
 
         when(iMethods.iMethodsReturningMethod().linkedListReturningMethod().contains(anyString())).thenReturn(false);

File: src/main/java/org/mockito/internal/handler/MockHandlerFactory.java
Patch:
@@ -7,8 +7,6 @@
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.mock.MockCreationSettings;
 
-import static javafx.scene.input.KeyCode.T;
-
 /**
  * by Szczepan Faber, created at: 5/21/12
  */

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java
Patch:
@@ -150,6 +150,7 @@ private List<JSONObject> parseJsonFrom(URLConnection urlConnection) throws IOExc
 
             String content = IOUtil.readFully(response);
             LOG.info("GitHub API responded successfully.");
+            @SuppressWarnings("unchecked")
             List<JSONObject> issues = (List<JSONObject>) JSONValue.parse(content);
             LOG.info("GitHub API returned {} issues.", issues.size());
             return issues;

File: src/main/java/org/mockito/hamcrest/MockitoHamcrest.java
Patch:
@@ -55,6 +55,7 @@ public class MockitoHamcrest {
      * @return <code>null</code> or default value for primitive (0, false, etc.)
      * @since 2.0
      */
+    @SuppressWarnings("unchecked")
     public static <T> T argThat(Matcher<T> matcher) {
         reportMatcher(matcher);
         return  (T) defaultValue(genericTypeOfMatcher(matcher.getClass()));
@@ -173,6 +174,6 @@ public static double doubleThat(Matcher<Double> matcher) {
     }
 
     private static <T> void reportMatcher(Matcher<T> matcher) {
-        MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(new HamcrestArgumentMatcher(matcher));
+        MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(new HamcrestArgumentMatcher<T>(matcher));
     }
 }

File: src/main/java/org/mockito/internal/InOrderImpl.java
Patch:
@@ -35,7 +35,7 @@ public List<Object> getMocksToBeVerifiedInOrder() {
         return mocksToBeVerifiedInOrder;
     }
 
-    public InOrderImpl(List<Object> mocksToBeVerifiedInOrder) {
+    public InOrderImpl(List<? extends Object> mocksToBeVerifiedInOrder) {
         this.mocksToBeVerifiedInOrder.addAll(mocksToBeVerifiedInOrder);
     }
 

File: src/main/java/org/mockito/internal/InternalMockHandler.java
Patch:
@@ -16,7 +16,7 @@ public interface InternalMockHandler<T> extends MockHandler {
 
     MockCreationSettings getMockSettings();
 
-    void setAnswersForStubbing(List<Answer> answers);
+    void setAnswersForStubbing(List<Answer<?>> answers);
 
     InvocationContainer getInvocationContainer();
 

File: src/main/java/org/mockito/internal/configuration/CaptorAnnotationProcessor.java
Patch:
@@ -22,7 +22,7 @@ public Object process(Captor annotation, Field field) {
                + field.getName() + "' has wrong type\n"
                + "For info how to use @Captor annotations see examples in javadoc for MockitoAnnotations class.");
         }
-        Class cls = new GenericMaster().getGenericType(field);
+        Class<?> cls = new GenericMaster().getGenericType(field);
         return ArgumentCaptor.forClass(cls);
     }
 }

File: src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java
Patch:
@@ -167,7 +167,7 @@ public static class CrossClassLoaderSerializationProxy implements Serializable {
 
         private static final long serialVersionUID = -7600267929109286514L;
         private final byte[] serializedMock;
-        private final Class typeToMock;
+        private final Class<?> typeToMock;
         private final Set<Class<?>> extraInterfaces;
 
         /**
@@ -188,7 +188,7 @@ public CrossClassLoaderSerializationProxy(Object mockitoMock) throws IOException
             objectOutputStream.close();
             out.close();
 
-            MockCreationSettings mockSettings = new MockUtil().getMockSettings(mockitoMock);
+            MockCreationSettings<?> mockSettings = new MockUtil().getMockSettings(mockitoMock);
             this.serializedMock = out.toByteArray();
             this.typeToMock = mockSettings.getTypeToMock();
             this.extraInterfaces = mockSettings.getExtraInterfaces();
@@ -247,7 +247,7 @@ private Object readResolve() throws ObjectStreamException {
      * </p>
      */
     public static class MockitoMockObjectInputStream extends ObjectInputStream {
-        private final Class typeToMock;
+        private final Class<?> typeToMock;
         private final Set<Class<?>> extraInterfaces;
 
         public MockitoMockObjectInputStream(InputStream in, Class typeToMock, Set<Class<?>> extraInterfaces) throws IOException {

File: src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java
Patch:
@@ -19,16 +19,17 @@ class CachingMockBytecodeGenerator {
 
     private final MockBytecodeGenerator mockBytecodeGenerator = new MockBytecodeGenerator();
 
+    @SuppressWarnings("unchecked")
     public <T> Class<T> get(MockFeatures<T> params) {
         // TODO improves locking behavior with ReentrantReadWriteLock ?
         avoidingClassLeakCacheLock.lock();
         try {
 
-            Class generatedMockClass = mockCachePerClassLoaderOf(params.mockedType).getOrGenerateMockClass(
+            Class<?> generatedMockClass = mockCachePerClassLoaderOf(params.mockedType).getOrGenerateMockClass(
                     params
             );
 
-            return generatedMockClass;
+            return (Class<T>) generatedMockClass;
         } finally {
           avoidingClassLeakCacheLock.unlock();
         }

File: src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java
Patch:
@@ -115,8 +115,9 @@ public Object[] getArguments() {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <T> T getArgument(int index) {
-        return (T)arguments[index];
+        return (T) arguments[index];
     }
 
     @Override

File: src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -28,7 +28,7 @@ class InvocationNotifierHandler<T> implements MockHandler, InternalMockHandler<T
     private final List<InvocationListener> invocationListeners;
     private final InternalMockHandler<T> mockHandler;
 
-    public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {
+    public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings<?> settings) {
         this.mockHandler = mockHandler;
         this.invocationListeners = settings.getInvocationListeners();
     }
@@ -69,7 +69,7 @@ public MockCreationSettings getMockSettings() {
         return mockHandler.getMockSettings();
     }
 
-    public void setAnswersForStubbing(List<Answer> answers) {
+    public void setAnswersForStubbing(List<Answer<?>> answers) {
         mockHandler.setAnswersForStubbing(answers);
     }
 

File: src/main/java/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -113,7 +113,7 @@ public MockCreationSettings getMockSettings() {
     }
 
     @SuppressWarnings("unchecked")
-    public void setAnswersForStubbing(List<Answer> answers) {
+    public void setAnswersForStubbing(List<Answer<?>> answers) {
         invocationContainerImpl.setAnswersForStubbing(answers);
     }
 

File: src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java
Patch:
@@ -22,7 +22,8 @@ public OngoingStubbing<T> thenAnswer(Answer<?> answer) {
     public OngoingStubbing<T> then(Answer<?> answer) {
         return thenAnswer(answer);
     }
-    
+
+    @SuppressWarnings("unchecked")
     public <M> M getMock() {
         return (M) invocationContainerImpl.invokedMock();
     }

File: src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -26,7 +26,7 @@ public class InvocationContainerImpl implements InvocationContainer, Serializabl
     private static final long serialVersionUID = -5334301962749537177L;
     private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();
     private final MockingProgress mockingProgress;
-    private final List<Answer> answersForStubbing = new ArrayList<Answer>();
+    private final List<Answer<?>> answersForStubbing = new ArrayList<Answer<?>>();
     private final RegisteredInvocations registeredInvocations;
 
     private InvocationMatcher invocationForStubbing;
@@ -91,7 +91,7 @@ public void addAnswerForVoidMethod(Answer answer) {
         answersForStubbing.add(answer);
     }
 
-    public void setAnswersForStubbing(List<Answer> answers) {
+    public void setAnswersForStubbing(List<Answer<?>> answers) {
         answersForStubbing.addAll(answers);
     }
 

File: src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java
Patch:
@@ -39,6 +39,7 @@ public List<Invocation> getRegisteredInvocations() {
         return invocationContainerImpl.getInvocations();
     }
 
+    @SuppressWarnings("unchecked")
     public <M> M getMock() {
         return (M) invocationContainerImpl.invokedMock();
     }

File: src/main/java/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -22,7 +22,7 @@
 @SuppressWarnings("unchecked")
 public class StubberImpl implements Stubber {
 
-    final List<Answer> answers = new LinkedList<Answer>();
+    private final List<Answer<?>> answers = new LinkedList<Answer<?>>();
 
     public <T> T when(T mock) {
         MockUtil mockUtil = new MockUtil();

File: src/main/java/org/mockito/internal/stubbing/answers/MethodInfo.java
Patch:
@@ -34,7 +34,7 @@ public boolean isValidException(Throwable throwable) {
         return false;
     }
 
-    public boolean isValidReturnType(Class clazz) {
+    public boolean isValidReturnType(Class<?> clazz) {
         if (method.getReturnType().isPrimitive() || clazz.isPrimitive()) {
             return Primitives.primitiveTypeOf(clazz) == Primitives.primitiveTypeOf(method.getReturnType());
         } else {

File: src/main/java/org/mockito/internal/util/StringJoiner.java
Patch:
@@ -17,10 +17,10 @@ public class StringJoiner {
     /**
      * Joins Strings with line break character. It adds line break in front, too.
      * This makes it something like 'format' no really 'join'.
-     * TODO Rename to 'format', remove the confusing start String.
      */
+    @SuppressWarnings("unchecked")
     public static String join(Object ... linesToBreak) {
-        return join("\n", (Iterable) asList(linesToBreak));
+        return join("\n", (Iterable<String>) (Object) asList(linesToBreak));
     }
 
     /**

File: src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java
Patch:
@@ -95,6 +95,7 @@ public Object[] toArray() {
         return unwrapTo(new Object[size()]);
     }
 
+    @SuppressWarnings("unchecked")
     private <T> T[] unwrapTo(T[] array) {
         Iterator<Object> iterator = iterator();
         for (int i = 0, objectsLength = array.length; i < objectsLength; i++) {
@@ -105,10 +106,9 @@ private <T> T[] unwrapTo(T[] array) {
         return array;
     }
 
-
+    @SuppressWarnings("unchecked")
     public <T> T[] toArray(T[] typedArray) {
-        T[] array = typedArray.length >= size() ? typedArray :
-                (T[]) newInstance(typedArray.getClass().getComponentType(), size());
+        T[] array = typedArray.length >= size() ? typedArray : (T[]) newInstance(typedArray.getClass().getComponentType(), size());
         return unwrapTo(array);
     }
 

File: src/test/java/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java
Patch:
@@ -5,13 +5,14 @@
 
 package org.concurrentmockito;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.Mockito.atLeastOnce;
+import static org.mockito.Mockito.verify;
+
 //this test exposes the problem most of the time
 public class ThreadVerifiesContinuoslyInteractingMockTest extends TestBase {
 

File: src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.concurrentmockito;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.Mockito.*;
+
 public class ThreadsShareAMockTest extends TestBase {
 
     private IMethods mock;

File: src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java
Patch:
@@ -5,12 +5,13 @@
 
 package org.concurrentmockito;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
 //this test always passes but please keep looking sys err
 //this test should be run 10 times, manually
 public class ThreadsShareGenerouslyStubbedMockTest extends TestBase {

File: src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java
Patch:
@@ -4,12 +4,14 @@
  */
 
 package org.concurrentmockito;
-import static org.mockito.Mockito.*;
 
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.Mockito.inOrder;
+import static org.mockito.Mockito.mock;
+
 public class VerificationInOrderFromMultipleThreadsTest extends TestBase {
     
     @Test

File: src/test/java/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockito;
 
 import org.assertj.core.api.Assertions;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.lang.annotation.Annotation;

File: src/test/java/org/mockito/ArgumentCaptorTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.validateMockitoUsage;
-
 import org.junit.After;
 import org.junit.Test;
 import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.validateMockitoUsage;
+
 public class ArgumentCaptorTest {
 
 	/**

File: src/test/java/org/mockito/MockingDetailsTest.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import static junit.framework.TestCase.*;
 import static org.mockito.Mockito.mock;
 
 public class MockingDetailsTest extends TestBase {
@@ -20,7 +21,8 @@ public void should_provide_invocations() {
             add("remove");
             add("clear");
         }};
-        
+
+        @SuppressWarnings("unchecked")
         List<String> mockedList = (List<String>) mock(List.class);
         
         mockedList.add("one");

File: src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -8,6 +8,9 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
+
 public class MockitoAssertionErrorTest extends TestBase {
 
     private void throwIt() {

File: src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -8,6 +8,9 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
+
 public class MockitoExceptionTest extends TestBase {
 
     private void throwIt() {

File: src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java
Patch:
@@ -5,7 +5,6 @@
 
 package org.mockito.exceptions.base;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.internal.configuration.ConfigurationAccess;
 

File: src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.mockito.exceptions.stacktrace;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 public class StackTraceCleanerTest {
 
 	private DefaultStackTraceCleaner cleaner;

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
+import static junit.framework.TestCase.assertEquals;
 import static org.mockito.Mockito.mock;
 
 public class AllInvocationsFinderTest extends TestBase {

File: src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java
Patch:
@@ -11,9 +11,7 @@
 import java.io.OutputStream;
 import java.util.*;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 public class SimpleArgumentResolverTest {
 

File: src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java
Patch:
@@ -6,6 +6,9 @@
 
 import java.lang.reflect.Method;
 
+import static junit.framework.TestCase.assertFalse;
+import static junit.framework.TestCase.assertTrue;
+
 public class DelegatingMethodTest extends TestBase {
 
     private Method someMethod, otherMethod;

File: src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java
Patch:
@@ -9,6 +9,8 @@
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class LoggingListenerTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
 import static org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses;
 
 public class StackTraceFilterTest extends TestBase {

File: src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
Patch:
@@ -17,7 +17,6 @@
 import org.mockito.listeners.MethodInvocationReport;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockito.stubbing.Answer;
-import org.mockitousage.IMethods;
 
 import java.text.ParseException;
 import java.util.ArrayList;

File: src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
Patch:
@@ -26,6 +26,8 @@
 
 import java.util.Arrays;
 
+import static junit.framework.TestCase.assertNull;
+import static junit.framework.TestCase.fail;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doThrow;

File: src/test/java/org/mockito/internal/invocation/InvocationImplTest.java
Patch:
@@ -20,6 +20,8 @@
 import java.util.List;
 import java.util.Map;
 
+import static junit.framework.TestCase.*;
+
 @SuppressWarnings({"unchecked"})
 public class InvocationImplTest extends TestBase {
 

File: src/test/java/org/mockito/internal/matchers/CapturingMatcherTest.java
Patch:
@@ -9,6 +9,9 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
+
 @SuppressWarnings("unchecked")
 public class CapturingMatcherTest extends TestBase {
 

File: src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java
Patch:
@@ -10,6 +10,9 @@
 
 import java.math.BigDecimal;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.assertTrue;
+
 public class ComparableMatchersTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -8,6 +8,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.*;
+
 
 public class EqualsTest extends TestBase {
 

File: src/test/java/org/mockito/internal/matchers/StringMatchersTest.java
Patch:
@@ -1,9 +1,10 @@
 package org.mockito.internal.matchers;
 
-import static org.junit.Assert.*;
-
 import org.junit.Test;
 
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 /**
  * Tests for the Matchers that operate over strings
  */

File: src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java
Patch:
@@ -4,6 +4,8 @@
 import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class MatcherToStringTest extends TestBase {
 
     static class MatcherWithoutDescription implements ArgumentMatcher<Object> {

File: src/test/java/org/mockito/internal/progress/AtLeastTest.java
Patch:
@@ -9,6 +9,9 @@
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
+
 public class AtLeastTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -8,16 +8,15 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.listeners.MockingStartedListener;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.verification.VerificationMode;
 import org.mockitoutil.TestBase;
 
 import java.util.List;
 
+import static junit.framework.TestCase.*;
 import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.notNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockito/internal/progress/PrimitivesTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.progress;
 
+import org.junit.Test;
+import org.mockito.internal.util.Primitives;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-import org.junit.Test;
-import org.mockito.internal.util.Primitives;
-
 
 public class PrimitivesTest {
 

File: src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.util.List;
 
+import static junit.framework.TestCase.assertNotNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 

File: src/test/java/org/mockito/internal/reporting/PluralizerTest.java
Patch:
@@ -7,6 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class PluralizerTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -8,6 +8,8 @@
 import org.mockito.internal.runners.RunnerImpl;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertNotNull;
+
 
 public class RunnerProviderTest extends TestBase {
     

File: src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java
Patch:
@@ -7,6 +7,9 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertFalse;
+import static junit.framework.TestCase.assertTrue;
+
 public class TestMethodsFinderTest extends TestBase {
 
     public static class HasTests {

File: src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java
Patch:
@@ -18,6 +18,9 @@
 import org.mockito.invocation.Invocation;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
+
 public class InvocationContainerImplStubbingTest extends TestBase {
 
     private InvocationContainerImpl invocationContainerImpl;

File: src/test/java/org/mockito/internal/stubbing/answers/MethodInfoTest.java
Patch:
@@ -10,7 +10,8 @@
 
 import java.nio.charset.CharacterCodingException;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 /**
  * by Szczepan Faber, created at: 3/31/12

File: src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java
Patch:
@@ -4,12 +4,13 @@
  */
 package org.mockito.internal.stubbing.answers;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
 import org.junit.Test;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.invocation.InvocationOnMock;
 
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
 public class ReturnsArgumentAtTest {
     @Test
     public void should_be_able_to_return_the_first_parameter() throws Throwable {

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java
Patch:
@@ -3,6 +3,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class ForwardsInvocationsTest extends TestBase {
 
     interface Foo {

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.util.*;
 
+import static junit.framework.TestCase.*;
 import static org.mockito.Mockito.mock;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java
Patch:
@@ -8,6 +8,8 @@
 import org.mockito.internal.util.MockUtil;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.*;
+
 public class ReturnsMocksTest extends TestBase {
     private ReturnsMocks values = new ReturnsMocks();
 

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java
Patch:
@@ -7,6 +7,9 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.assertTrue;
+
 public class ReturnsMoreEmptyValuesTest extends TestBase {
 
     private ReturnsMoreEmptyValues rv = new ReturnsMoreEmptyValues();

File: src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
Patch:
@@ -9,6 +9,9 @@
 import org.mockito.stubbing.Answer;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
+
 public class ReturnsSmartNullsTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/util/DecamelizerTest.java
Patch:
@@ -5,11 +5,12 @@
 
 package org.mockito.internal.util;
 
-import static org.mockito.internal.util.Decamelizer.*;
-
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static org.mockito.internal.util.Decamelizer.decamelizeMatcher;
+
 public class DecamelizerTest extends TestBase {
     
     @Test

File: src/test/java/org/mockito/internal/util/MockCreationValidatorTest.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.Observer;
 
 import static java.util.Arrays.asList;
 import static org.assertj.core.api.Assertions.assertThat;

File: src/test/java/org/mockito/internal/util/MockNameImplTest.java
Patch:
@@ -7,6 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class MockNameImplTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/util/MockUtilTest.java
Patch:
@@ -15,6 +15,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static junit.framework.TestCase.*;
 import static org.mockito.Mockito.withSettings;
 
 @SuppressWarnings("unchecked")
@@ -54,7 +55,7 @@ public void should_validate_mock() {
     public void should_validate_spy() {
         assertFalse(mockUtil.isSpy("i mock a mock"));
         assertFalse(mockUtil.isSpy(Mockito.mock(List.class)));
-        assertFalse(mockUtil.isSpy((Class) null));
+        assertFalse(mockUtil.isSpy(null));
 
         assertTrue(mockUtil.isSpy(Mockito.spy(new ArrayList())));
         assertTrue(mockUtil.isSpy(Mockito.spy(ArrayList.class)));

File: src/test/java/org/mockito/internal/util/PrimitivesTest.java
Patch:
@@ -4,13 +4,12 @@
  */
 package org.mockito.internal.util;
 
+import org.junit.Test;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 
-import org.junit.Test;
-import org.mockito.internal.util.Primitives;
-
 
 public class PrimitivesTest {
 

File: src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java
Patch:
@@ -7,6 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class SimpleMockitoLoggerTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java
Patch:
@@ -6,9 +6,7 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 
 public class IdentitySetTest {

File: src/test/java/org/mockito/internal/util/collections/ListUtilTest.java
Patch:
@@ -13,6 +13,7 @@
 import java.util.List;
 
 import static java.util.Arrays.asList;
+import static junit.framework.TestCase.assertTrue;
 import static org.mockitoutil.ExtraMatchers.hasExactlyInOrder;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockito/internal/util/junit/JUnitFailureHackerTest.java
Patch:
@@ -11,6 +11,8 @@
 import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class JUnitFailureHackerTest extends TestBase {
     
     JUnitFailureHacker hacker = new JUnitFailureHacker();
@@ -73,6 +75,6 @@ public void shouldPrintTheWarningSoICanSeeIt() throws Exception {
         hacker.appendWarnings(failure, "unused stubbing blah");
         
         //then
-        System.out.println(failure.getException());        
+        System.out.println(failure.getException());
     }
 }

File: src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java
Patch:
@@ -7,6 +7,9 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertFalse;
+import static junit.framework.TestCase.assertTrue;
+
 @SuppressWarnings("unused")
 public class FieldReaderTest extends TestBase {
 

File: src/test/java/org/mockito/internal/util/reflection/GenericArrayReturnTypeTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.junit.Test;
 import org.mockito.Answers;
-import org.mockito.Mockito;
 
 import java.util.Set;
 

File: src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.List;
 import java.util.Map;
 
+import static junit.framework.TestCase.assertEquals;
 import static org.mockito.internal.util.reflection.GenericTypeExtractor.genericTypeOf;
 
 public class GenericTypeExtractorTest extends TestBase {

File: src/test/java/org/mockito/internal/util/reflection/WhiteboxTest.java
Patch:
@@ -7,6 +7,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 public class WhiteboxTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/verification/NoMoreInteractionsTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.mockitoutil.TestBase;
 
 import static java.util.Arrays.asList;
+import static junit.framework.TestCase.*;
 import static org.mockito.Mockito.mock;
 
 public class NoMoreInteractionsTest extends TestBase {

File: src/test/java/org/mockito/internal/verification/VerificationDataImplTest.java
Patch:
@@ -10,6 +10,8 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+
 public class VerificationDataImplTest extends TestBase {
 
     @Test

File: src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java
Patch:
@@ -12,6 +12,8 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static junit.framework.TestCase.assertEquals;
+
 @SuppressWarnings({"unchecked","serial"})
 public class ArgumentMatchingToolTest extends TestBase {
 
@@ -45,7 +47,7 @@ public void shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch() {
     public void shouldFindSuspiciousMatchers() {
         //given
         Equals matcherInt20 = new Equals(20);
-        Long longPretendingAnInt = new Long(20);
+        Long longPretendingAnInt = 20L;
         
         //when
         List<ArgumentMatcher> matchers = (List) Arrays.asList(new Equals(10), matcherInt20);

File: src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.verification.checkers;
 
-import static java.util.Arrays.asList;
-import static org.assertj.core.api.Assertions.assertThat;
-
 import org.junit.Test;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.invocation.Invocation;
 
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+
 public class AtLeastXNumberOfInvocationsCheckerTest   {
 
     @Test

File: src/test/java/org/mockito/internal/verification/checkers/InvocationsFinderStub.java
Patch:
@@ -5,14 +5,14 @@
 
 package org.mockito.internal.verification.checkers;
 
-import java.util.LinkedList;
-import java.util.List;
-
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockito.invocation.Invocation;
 
+import java.util.LinkedList;
+import java.util.List;
+
 class InvocationsFinderStub extends InvocationsFinder {
     
     Invocation similarToReturn;

File: src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java
Patch:
@@ -1,10 +1,8 @@
 package org.mockitointegration;
 
 import net.bytebuddy.ByteBuddy;
-import net.bytebuddy.jar.asm.ClassVisitor;
 import org.hamcrest.Matcher;
 import org.junit.Assume;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.internal.configuration.plugins.Plugins;
@@ -43,7 +41,8 @@ private void checkDependency(ClassLoader classLoader_without_JUnit, String pureM
         try {
             Class.forName(pureMockitoAPIClass, true, classLoader_without_JUnit);
         } catch (Throwable e) {
-            throw new AssertionError(String.format("'%s' has some dependency to JUnit", pureMockitoAPIClass), e);
+            e.printStackTrace();
+            throw new AssertionError(String.format("'%s' has some dependency to JUnit", pureMockitoAPIClass));
         }
     }
 }

File: src/test/java/org/mockitousage/PlaygroundTest.java
Patch:
@@ -5,9 +5,6 @@
 
 package org.mockitousage;
 
-import static org.mockito.Mockito.*;
-
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;

File: src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -16,6 +16,8 @@
 import org.mockito.internal.configuration.DefaultAnnotationEngine;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.*;
+
 public class DeprecatedAnnotationEngineApiTest extends TestBase {
 
     @After

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockitousage.annotation;
 
-import static org.assertj.core.api.Assertions.*;
-
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;
@@ -15,6 +13,8 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockitousage.examples.use.ArticleCalculator;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 @RunWith(MockitoJUnitRunner.class)
 public class MockInjectionUsingConstructorIssue421Test {
 

File: src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import static junit.framework.TestCase.*;
+
 @SuppressWarnings({"unchecked", "unused"})
 public class MockInjectionUsingSetterOrPropertyTest extends TestBase {
 

File: src/test/java/org/mockitousage/annotation/SpyInjectionTest.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockitousage.annotation;
 
-import java.util.LinkedList;
-import java.util.List;
-
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Spy;
 import org.mockitoutil.TestBase;
 
+import java.util.LinkedList;
+import java.util.List;
+
 @SuppressWarnings("unchecked")
 public class SpyInjectionTest extends TestBase {
 

File: src/test/java/org/mockitousage/basicapi/MockingDetailsTest.java
Patch:
@@ -10,6 +10,8 @@
 import org.mockito.Spy;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertFalse;
+import static junit.framework.TestCase.assertTrue;
 import static org.mockito.Mockito.*;
 
 public class MockingDetailsTest extends TestBase {

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.hamcrest.CoreMatchers.is;
+import static junit.framework.TestCase.*;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.io.Serializable;
 
+import static junit.framework.TestCase.assertSame;
 import static org.mockitoutil.SimpleSerializationUtil.serializeAndBack;
 
 @SuppressWarnings("serial")

File: src/test/java/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java
Patch:
@@ -5,13 +5,13 @@
 
 package org.mockitousage.bugs;
 
+import org.junit.Test;
+import org.mockitoutil.TestBase;
+
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-import org.junit.Test;
-import org.mockitoutil.TestBase;
-
 //see bug 116
 public class AIOOBExceptionWithAtLeastTest extends TestBase {
 

File: src/test/java/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java
Patch:
@@ -6,6 +6,7 @@
 
 import org.junit.Test;
 import org.mockitoutil.TestBase;
+
 import static org.mockito.Mockito.*;
 
 // see issue 112

File: src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java
Patch:
@@ -12,7 +12,9 @@
 
 import java.io.Serializable;
 
-import static org.mockito.Mockito.*;
+import static junit.framework.TestCase.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
 
 //see issue 101
 public class BridgeMethodsHitAgainTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java
Patch:
@@ -20,6 +20,8 @@ public class IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest {
 
     @Test
     public void second_stubbing_throws_IndexOutOfBoundsException() throws Exception {
+
+        @SuppressWarnings("unchecked")
         Map<String, String> map = mock(Map.class);
 
         OngoingStubbing<String> mapOngoingStubbing = when(map.get(anyString()));

File: src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java
Patch:
@@ -16,6 +16,9 @@
 import java.io.OutputStream;
 import java.io.PrintStream;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.assertFalse;
+
 
 // @Ignore("for demo only. this test cannot be enabled as it fails :)")
 public class MockitoRunnerBreaksWhenNoTestMethodsTest extends TestBase {

File: src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java
Patch:
@@ -5,13 +5,14 @@
 
 package org.mockitousage.bugs;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.when;
+
 public class NPEWhenMockingThrowablesTest extends TestBase {
 
     @Mock IMethods mock;

File: src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java
Patch:
@@ -6,14 +6,13 @@
 package org.mockitousage.bugs;
 
 import org.junit.Test;
-import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
 import java.util.Date;
-import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
 
+import static junit.framework.TestCase.assertEquals;
 import static org.mockito.Mockito.*;
 
 //see issue 184

File: src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
Patch:
@@ -13,12 +13,13 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import static junit.framework.TestCase.fail;
 import static org.mockito.Mockito.verify;
 
 //see issue 216
 public class SpyShouldHaveNiceNameTest extends TestBase {
 
-    @Spy List veryCoolSpy = new LinkedList();
+    @Spy List<Integer> veryCoolSpy = new LinkedList<Integer>();
 
     @Test
     public void shouldPrintNiceName() {

File: src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
Patch:
@@ -5,14 +5,15 @@
 
 package org.mockitousage.bugs;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.verification.NeverWantedButInvoked;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.*;
+
 //see bug 138
 public class VerifyingWithAnExtraCallToADifferentMockTest extends TestBase {
    

File: src/test/java/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenericNestedAsRawTypeTest.java
Patch:
@@ -2,9 +2,7 @@
 
 import org.junit.Test;
 
-import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.*;
 
 public class DeepStubFailingWhenGenericNestedAsRawTypeTest {
 

File: src/test/java/org/mockitousage/bugs/injection/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java
Patch:
@@ -12,9 +12,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertSame;
+import static org.junit.Assert.*;
 
 @RunWith(MockitoJUnitRunner.class)
 public class InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest {

File: src/test/java/org/mockitousage/bugs/varargs/VarargsErrorWhenCallingRealMethodTest.java
Patch:
@@ -8,9 +8,8 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
+import static junit.framework.TestCase.assertEquals;
+import static org.mockito.Mockito.*;
 
 public class VarargsErrorWhenCallingRealMethodTest extends TestBase {
 

File: src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java
Patch:
@@ -4,12 +4,13 @@
  */
 package org.mockitousage.configuration;
 
-import static org.mockito.Mockito.verify;
-
 import org.junit.Test;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static org.mockito.Mockito.verify;
+
 
 public class CustomizedAnnotationForSmartMockTest extends TestBase {
     

File: src/test/java/org/mockitousage/configuration/SmartMock.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockitousage.configuration;
 
-import static java.lang.annotation.ElementType.*;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import static java.lang.annotation.ElementType.FIELD;
+
 @Target( { FIELD })
 @Retention(RetentionPolicy.RUNTIME)
 public @interface SmartMock {}
\ No newline at end of file

File: src/test/java/org/mockitousage/debugging/PrintingInvocationsDetectsUnusedStubTest.java
Patch:
@@ -4,12 +4,12 @@
  */
 package org.mockitousage.debugging;
 
-import static org.mockito.BDDMockito.*;
-
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.BDDMockito.given;
+
 public class PrintingInvocationsDetectsUnusedStubTest extends TestBase {
 
     @Mock Foo mock;

File: src/test/java/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java
Patch:
@@ -4,13 +4,14 @@
  */
 package org.mockitousage.debugging;
 
-import static org.mockito.BDDMockito.*;
-
 import org.junit.After;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.BDDMockito.given;
+import static org.mockito.BDDMockito.verify;
+
 public class PrintingInvocationsWhenEverythingOkTest extends TestBase {
 
     @Mock Foo mock;

File: src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java
Patch:
@@ -9,6 +9,8 @@
 import org.mockito.internal.exceptions.stacktrace.StackTraceFilter;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+
 @SuppressWarnings("serial")
 public class LocationImplTest extends TestBase {
 

File: src/test/java/org/mockitousage/junitrule/InvalidTargetMockitoJUnitRuleTest.java
Patch:
@@ -1,14 +1,14 @@
 package org.mockitousage.junitrule;
 
-import static org.junit.Assert.assertNotNull;
-
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 
+import static org.junit.Assert.assertNotNull;
+
 public class InvalidTargetMockitoJUnitRuleTest {
 
     @Rule

File: src/test/java/org/mockitousage/junitrule/RuleTestWithFactoryMethodTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.junit.Rule;
 import org.junit.Test;
-import org.junit.rules.MethodRule;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;

File: src/test/java/org/mockitousage/junitrule/RuleTestWithParameterConstructorTest.java
Patch:
@@ -1,15 +1,15 @@
 package org.mockitousage.junitrule;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 import org.junit.Rule;
 import org.junit.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnit;
 import org.mockito.junit.MockitoRule;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
 public class RuleTestWithParameterConstructorTest {
 
 	 @Rule

File: src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java
Patch:
@@ -16,6 +16,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.assertTrue;
 import static org.mockito.Mockito.*;
 
 //@RunWith(ConsoleSpammingMockitoJUnitRunner.class)
@@ -64,7 +66,7 @@ public void _test() {
     }    
     
     public void cleanStackTraces() {
-        super.makeStackTracesClean();
+        makeStackTracesClean();
     }
     
     @Test

File: src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -16,6 +16,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static junit.framework.TestCase.*;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;
@@ -131,6 +132,7 @@ public void should_allow_assertions_on_captured_null() {
     @Test
     public void should_allow_construction_of_captor_for_parameterized_type_in_a_convenient_way()  {
         //the test passes if this expression compiles
+        @SuppressWarnings("unchecked")
         ArgumentCaptor<List<Person>> argument = ArgumentCaptor.forClass(List.class);
         assertNotNull(argument);
     }

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.*;
 import static org.hamcrest.CoreMatchers.is;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -86,6 +87,7 @@ public void supports_primitive_matchers_from_core_library() {
         verify(mock).oneArg(floatThat(is(6.0F)));
     }
 
+    @SuppressWarnings("raw")
     private class NonGenericMatcher extends BaseMatcher {
         public boolean matches(Object o) {
             return true;
@@ -99,6 +101,7 @@ public void supports_non_generic_matchers() {
         assertEquals(5, mock.intArgumentReturningInt(10));
     }
 
+    @SuppressWarnings("unchecked")
     private int nonGenericMatcher() {
         argThat(new NonGenericMatcher());
         return 0;

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -12,6 +12,7 @@
 
 import java.util.*;
 
+import static junit.framework.TestCase.assertEquals;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -31,7 +32,7 @@ public void shouldHelpOutWithUnnecessaryCasting() {
     public void shouldAnyBeActualAliasToAnyObject() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod((Object) anyObject());
+        verify(mock).simpleMethod(anyObject());
         verify(mock).simpleMethod(any(Object.class));
     }
 

File: src/test/java/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java
Patch:
@@ -4,15 +4,16 @@
  */
 package org.mockitousage.misuse;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mock;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.*;
+
 public class CleaningUpPotentialStubbingTest extends TestBase {
 
     @Mock private IMethods mock;

File: src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockitousage.misuse;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.base.MockitoException;
@@ -15,6 +13,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.Mockito.*;
+
 public class DescriptiveMessagesOnMisuseTest extends TestBase {
     
     @Mock private IMethods mock;

File: src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
 import static org.mockito.Mockito.*;
 
 public class DetectingFinalMethodsTest extends TestBase {

File: src/test/java/org/mockitousage/misuse/SpyStubbingMisuseTest.java
Patch:
@@ -7,8 +7,8 @@
 import org.junit.Test;
 import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;
 
-import static org.junit.Assert.fail;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 public class SpyStubbingMisuseTest {

File: src/test/java/org/mockitousage/packageprotected/MockingPackageProtectedTest.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockitousage.packageprotected;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
+import static org.mockito.Mockito.mock;
+
 public class MockingPackageProtectedTest extends TestBase {
 
     static class Foo {};

File: src/test/java/org/mockitousage/performance/StubOnlyAvoidMemoryConsumptionTest.java
Patch:
@@ -3,9 +3,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static org.mockito.Mockito.withSettings;
+import static org.mockito.Mockito.*;
 
 public class StubOnlyAvoidMemoryConsumptionTest {
 

File: src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -13,6 +13,8 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.assertEquals;
+import static junit.framework.TestCase.fail;
 import static org.mockito.Matchers.isA;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 
+import static junit.framework.TestCase.fail;
 import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.*;

File: src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockitousage.verification;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -18,6 +16,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.*;
+
 public class BasicVerificationInOrderTest extends TestBase {
 
     private IMethods mockOne;

File: src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java
Patch:
@@ -5,14 +5,15 @@
 
 package org.mockitousage.verification;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.verify;
+
 public class OrdinaryVerificationPrintsAllInteractionsTest extends TestBase {
 
     @Mock private IMethods mock;

File: src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockitousage.verification;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -17,6 +15,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.*;
+
 /**
  * ignored since 'relaxed' in order verification is not implemented (too complex to bother, maybe later).
  */

File: src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockitousage.verification;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -15,6 +13,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
+import static org.mockito.Mockito.*;
+
 public class SelectedMocksInOrderVerificationTest extends TestBase {
     
     private IMethods mockOne;

File: src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
 import static org.mockito.Mockito.*;
 
 @SuppressWarnings("unchecked")

File: src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -5,8 +5,6 @@
 
 package org.mockitousage.verification;
 
-import static org.mockito.Mockito.*;
-
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
@@ -16,6 +14,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.*;
+import static org.mockito.Mockito.*;
+
 public class VerificationInOrderMixedWithOrdiraryVerificationTest extends TestBase {
     
     private IMethods mockOne;

File: src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import static junit.framework.TestCase.assertTrue;
+import static junit.framework.TestCase.fail;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -5,7 +5,6 @@
 
 package org.mockitoutil;
 
-import junit.framework.Assert;
 import org.hamcrest.Matcher;
 import org.junit.After;
 import org.junit.Before;
@@ -27,14 +26,16 @@
 import java.io.PrintStream;
 import java.util.Collection;
 
+import static junit.framework.TestCase.assertFalse;
+import static junit.framework.TestCase.assertTrue;
 import static org.mockito.Mockito.mock;
 
 /**
  * the easiest way to make sure that tests clean up invalid state is to require
  * valid state for all tests.
  */
 @SuppressWarnings("unchecked")
-public class TestBase extends Assert {
+public class TestBase {
 
     @After
     public void cleanUpConfigInAnyCase() {

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+import static junit.framework.TestCase.fail;
 import static org.mockito.Mockito.verify;
 
 public class PluginStackTraceFilteringTest extends TestBase {

File: subprojects/testng/src/test/java/org/mockitousage/testng/AnnotatedFieldsShouldBeInitializedByMockitoTestNGListenerTest.java
Patch:
@@ -17,10 +17,10 @@
 @Listeners(MockitoTestNGListener.class)
 public class AnnotatedFieldsShouldBeInitializedByMockitoTestNGListenerTest {
 
-    @Mock List list;
-    @Spy HashMap map;
+    @Mock List<?> list;
+    @Spy HashMap<?, ?> map;
     @InjectMocks SomeType someType;
-    @Captor ArgumentCaptor<List> captor;
+    @Captor ArgumentCaptor<List<?>> captor;
 
     @Test
     public void ensure_annotated_fields_are_instantiated() throws Exception {

File: subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java
Patch:
@@ -10,9 +10,10 @@
 
 public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {
 
-    @Mock Map childMockField;
+    @Mock Map<?, ?> childMockField;
 
     @Test
+    @SuppressWarnings("unchecked")
     public void verify_mocks_are_initialized() throws Exception {
         assertThat(childMockField).isNotNull();
         assertThat(parentMockField).isNotNull();

File: subprojects/testng/src/test/java/org/mockitousage/testng/SomeType.java
Patch:
@@ -4,6 +4,6 @@
 import java.util.Map;
 
 public class SomeType {
-    List list;
-    Map map;
+    List<?> list;
+    Map<?, ?> map;
 }

File: subprojects/testng/src/test/java/org/mockitousage/testng/TestWithoutListenerShouldNotInitializeAnnotatedFieldsTest.java
Patch:
@@ -14,10 +14,10 @@
 
 public class TestWithoutListenerShouldNotInitializeAnnotatedFieldsTest {
 
-    @Mock List list;
-    @Spy Map map;
+    @Mock List<?> list;
+    @Spy Map<?, ?> map;
     @InjectMocks SomeType someType;
-    @Captor ArgumentCaptor<List> captor;
+    @Captor ArgumentCaptor<List<?>> captor;
 
     @Test
     public void test_not_annotated_by_MockitoTestNGListener_should_not_touch_annotated_fields() throws Exception {

File: src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockitointegration;
 
 import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.jar.asm.ClassVisitor;
 import org.hamcrest.Matcher;
 import org.junit.Assume;
 import org.junit.Ignore;
@@ -17,7 +18,6 @@
 public class NoJUnitDependenciesTest {
 
     @Test
-    @Ignore("Strange dependency to ASM that cannot be resolved")
     public void pure_mockito_should_not_depend_JUnit___ByteBuddy() throws Exception {
         Assume.assumeTrue("ByteBuddyMockMaker".equals(Plugins.getMockMaker().getClass().getSimpleName()));
 

File: src/main/java/org/mockito/Mock.java
Patch:
@@ -9,6 +9,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.PARAMETER;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -58,7 +59,7 @@
  * @see MockitoAnnotations#initMocks(Object)
  * @see org.mockito.runners.MockitoJUnitRunner
  */
-@Target(FIELD)
+@Target({FIELD, PARAMETER})
 @Retention(RUNTIME)
 @Documented
 public @interface Mock {

File: src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java
Patch:
@@ -3,6 +3,7 @@
 import net.bytebuddy.ByteBuddy;
 import org.hamcrest.Matcher;
 import org.junit.Assume;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.internal.configuration.plugins.Plugins;
@@ -16,6 +17,7 @@
 public class NoJUnitDependenciesTest {
 
     @Test
+    @Ignore("Strange dependency to ASM that cannot be resolved")
     public void pure_mockito_should_not_depend_JUnit___ByteBuddy() throws Exception {
         Assume.assumeTrue("ByteBuddyMockMaker".equals(Plugins.getMockMaker().getClass().getSimpleName()));
 

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1150,7 +1150,8 @@
  * In particular, this approach will make it easier to test functions which use callbacks.
  *
  * The functions answer and answerVoid can be found in {@link AdditionalAnswers} to create the answer object
- * using the interfaces in {@link AnswerFunctionalInterfaces} support is provided for functions with up to 5 parameters
+ * using the interfaces in {@link org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces} support is provided
+ * for functions with up to 5 parameters
  *
  * <p>
  * Examples:

File: src/main/java/org/mockito/exceptions/stacktrace/StackTraceCleaner.java
Patch:
@@ -17,10 +17,10 @@
 public interface StackTraceCleaner {
 
     /**
-     * Decides if element is excluded.
+     * Decides if element is included.
      *
      * @param candidate element of the actual stack trace
      * @return whether the element should be excluded from cleaned stack trace.
      */
-    boolean isOut(StackTraceElement candidate);
+    boolean isIn(StackTraceElement candidate);
 }

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -30,7 +30,7 @@ public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         //TODO: investigate "keepTop" commit history - no effect!
         final List<StackTraceElement> filtered = new ArrayList<StackTraceElement>();
         for (StackTraceElement element : target) {
-            if (!CLEANER.isOut(element)) {
+            if (CLEANER.isIn(element)) {
                 filtered.add(element);
             }
         }

File: src/main/java/org/mockito/internal/matchers/Contains.java
Patch:
@@ -18,8 +18,8 @@ public Contains(String substring) {
         this.substring = substring;
     }
 
-    public boolean matches(Object actual) {
-        return actual != null && ((String) actual).contains(substring);
+    public boolean matches(String actual) {
+        return actual != null && actual.contains(substring);
     }
 
     public String toString() {

File: src/main/java/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -17,8 +17,8 @@ public EndsWith(String suffix) {
         this.suffix = suffix;
     }
 
-    public boolean matches(Object actual) {
-        return actual != null && ((String) actual).endsWith(suffix);
+    public boolean matches(String actual) {
+        return actual != null && actual.endsWith(suffix);
     }
 
     public String toString() {

File: src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -19,8 +19,7 @@ public EqualsWithDelta(Number value, Number delta) {
         this.delta = delta;
     }
 
-    public boolean matches(Object object) {
-        Number actual = (Number) object;
+    public boolean matches(Number actual) {
         if (wanted == null ^ actual == null) {
             return false;
         }

File: src/main/java/org/mockito/internal/matchers/Find.java
Patch:
@@ -18,8 +18,8 @@ public Find(String regex) {
         this.regex = regex;
     }
 
-    public boolean matches(Object actual) {
-        return actual != null && Pattern.compile(regex).matcher((String) actual).find();
+    public boolean matches(String actual) {
+        return actual != null && Pattern.compile(regex).matcher(actual).find();
     }
 
     public String toString() {

File: src/main/java/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -17,8 +17,8 @@ public StartsWith(String prefix) {
         this.prefix = prefix;
     }
 
-    public boolean matches(Object actual) {
-        return actual != null && ((String) actual).startsWith(prefix);
+    public boolean matches(String actual) {
+        return actual != null && actual.startsWith(prefix);
     }
 
     public String toString() {

File: src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java
Patch:
@@ -33,11 +33,11 @@ public void testName() throws Exception {
 	}
 
 	private void assertAccepted(String className) {
-		assertThat(cleaner.isOut(type(className))).describedAs("Must be accepted %s", className).isFalse();
+		assertThat(cleaner.isIn(type(className))).describedAs("Must be accepted %s", className).isTrue();
 	}
 
 	private void assertRejected(String className) {
-		assertThat(cleaner.isOut(type(className))).describedAs("Must be rejected %s", className).isTrue();
+		assertThat(cleaner.isIn(type(className))).describedAs("Must be rejected %s", className).isFalse();
 	}
 
 	private StackTraceElement type(String className) {

File: src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -32,7 +32,7 @@ public void shouldNotThrowCCE() {
 
     private ArgumentMatcher<String> isStringWithTextFoo() {
         return new ArgumentMatcher<String>() {
-            public boolean matches(Object argument) {
+            public boolean matches(String argument) {
                 // casting that should not be thrown:
                 String str = (String) argument;
                 return str.equals("foo");

File: src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -107,7 +107,7 @@ private int nonGenericMatcher() {
     @Test
     public void coexists_with_mockito_matcher() {
         when(mock.simpleMethod(Mockito.argThat(new ArgumentMatcher<String>() {
-            public boolean matches(Object argument) {
+            public boolean matches(String argument) {
                 return true;
             }
         }))).thenReturn("x");

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/MyStackTraceCleanerProvider.java
Patch:
@@ -13,11 +13,11 @@ public class MyStackTraceCleanerProvider implements StackTraceCleanerProvider {
     public StackTraceCleaner getStackTraceCleaner(final StackTraceCleaner defaultCleaner) {
         return new StackTraceCleaner() {
 			@Override
-			public boolean isOut(StackTraceElement candidate) {
+			public boolean isIn(StackTraceElement candidate) {
 				if (ENABLED && candidate.getMethodName().contains("excludeMe")) {
-                    return true;
+                    return false;
                 }
-                return defaultCleaner.isOut(candidate);
+                return defaultCleaner.isIn(candidate);
 			}
         };
     }

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/MyStackTraceCleanerProvider.java
Patch:
@@ -15,7 +15,7 @@ public StackTraceCleaner getStackTraceCleaner(final StackTraceCleaner defaultCle
 			@Override
 			public boolean isOut(StackTraceElement candidate) {
 				if (ENABLED && candidate.getMethodName().contains("excludeMe")) {
-                    return false;
+                    return true;
                 }
                 return defaultCleaner.isOut(candidate);
 			}

File: src/main/java/org/mockito/Mock.java
Patch:
@@ -9,6 +9,7 @@
 import java.lang.annotation.Target;
 
 import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.PARAMETER;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
@@ -58,7 +59,7 @@
  * @see MockitoAnnotations#initMocks(Object)
  * @see org.mockito.runners.MockitoJUnitRunner
  */
-@Target(FIELD)
+@Target({FIELD, PARAMETER})
 @Retention(RUNTIME)
 @Documented
 public @interface Mock {

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java
Patch:
@@ -63,7 +63,6 @@ public <T> Class<? extends T> generateMockClass(MockFeatures<T> features) {
                               .append(features.interfaces)
                               .append(MultipleParentClassLoader.class.getClassLoader())
                               .append(Thread.currentThread().getContextClassLoader())
-                              .filter(isBootstrapClassLoader())
                               .build(), ClassLoadingStrategy.Default.INJECTION)
                       .getLoaded();
     }

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -70,7 +70,7 @@ public Object answer(InvocationOnMock invocation) {
 
     Object returnValueFor(Class<?> type) {
         if (Primitives.isPrimitiveOrWrapper(type)) {
-            return Primitives.defaultValueForPrimitiveOrWrapper(type);
+            return Primitives.defaultValue(type);
             //new instances are used instead of Collections.emptyList(), etc.
             //to avoid UnsupportedOperationException if code under test modifies returned collection
         } else if (type == Iterable.class) {

File: src/main/java/org/mockito/internal/util/Primitives.java
Patch:
@@ -49,7 +49,7 @@ public static boolean isPrimitiveOrWrapper(Class<?> type) {
      * @return The boxed default values as defined in Java Language Specification,
      *         <code>null</code> if the type is neither a primitive nor a wrapper
      */
-    public static <T> T defaultValueForPrimitiveOrWrapper(Class<T> primitiveOrWrapperType) {
+    public static <T> T defaultValue(Class<T> primitiveOrWrapperType) {
         return (T) PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES.get(primitiveOrWrapperType);
     }
 

File: src/main/java/org/mockito/internal/verification/Only.java
Patch:
@@ -6,10 +6,10 @@
 
 import static org.mockito.exceptions.Reporter.noMoreInteractionsWanted;
 import static org.mockito.exceptions.Reporter.wantedButNotInvoked;
+import static org.mockito.internal.invocation.InvocationMarker.markVerified;
 
 import java.util.List;
 
-import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.VerificationData;
@@ -19,7 +19,6 @@
 public class Only implements VerificationMode {
 
     private final InvocationsFinder finder = new InvocationsFinder();
-    private final InvocationMarker marker = new InvocationMarker();
 
     @SuppressWarnings("unchecked")
     public void verify(VerificationData data) {
@@ -33,7 +32,7 @@ public void verify(VerificationData data) {
         if (invocations.size() != 1 || chunk.size() == 0) {
             throw wantedButNotInvoked(wantedMatcher);
         }
-        marker.markVerified(chunk.get(0), wantedMatcher);
+        markVerified(chunk.get(0), wantedMatcher);
     }
 
     public VerificationMode description(String description) {

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -6,10 +6,10 @@
 package org.mockito.internal.verification.checkers;
 
 import static org.mockito.exceptions.Reporter.tooLittleActualInvocations;
+import static org.mockito.internal.invocation.InvocationMarker.markVerified;
 
 import java.util.List;
 
-import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.invocation.Invocation;
@@ -18,7 +18,6 @@
 public class AtLeastXNumberOfInvocationsChecker {
     
     InvocationsFinder finder = new InvocationsFinder();
-    InvocationMarker invocationMarker = new InvocationMarker();
 
     public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);
@@ -29,6 +28,6 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
             throw tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        
         }
         
-        invocationMarker.markVerified(actualInvocations, wanted);
+        markVerified(actualInvocations, wanted);
     }
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java
Patch:
@@ -6,10 +6,10 @@
 package org.mockito.internal.verification.checkers;
 
 import static org.mockito.exceptions.Reporter.tooLittleActualInvocationsInOrder;
+import static org.mockito.internal.invocation.InvocationMarker.markVerifiedInOrder;
 
 import java.util.List;
 
-import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.InOrderContext;
@@ -19,7 +19,6 @@
 public class AtLeastXNumberOfInvocationsInOrderChecker {
     
     private final InvocationsFinder finder = new InvocationsFinder();
-    private final InvocationMarker invocationMarker = new InvocationMarker();
     private final InOrderContext orderingContext;
     
     public AtLeastXNumberOfInvocationsInOrderChecker(InOrderContext orderingContext) {
@@ -36,6 +35,6 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
             throw tooLittleActualInvocationsInOrder(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);
         }
         
-        invocationMarker.markVerifiedInOrder(chunk, wanted, orderingContext);
+        markVerifiedInOrder(chunk, wanted, orderingContext);
     }
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -105,6 +105,8 @@ Object returnValueFor(Class<?> type) {
             return new LinkedHashMap<Object, Object>();
         } else if ("java.util.Optional".equals(type.getName())) {
             return JavaEightUtil.emptyOptional();
+        } else if ("java.util.stream.Stream".equals(type.getName())) {
+            return JavaEightUtil.emptyStream();
         }
 
         //Let's not care about the rest of collections.

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -105,6 +105,8 @@ Object returnValueFor(Class<?> type) {
             return new LinkedHashMap<Object, Object>();
         } else if ("java.util.Optional".equals(type.getName())) {
             return JavaEightUtil.emptyOptional();
+        } else if ("java.util.stream.Stream".equals(type.getName())) {
+            return JavaEightUtil.emptyStream();
         }
 
         //Let's not care about the rest of collections.

File: src/main/java/org/mockito/exceptions/Reporter.java
Patch:
@@ -400,9 +400,9 @@ private static String createTooLittleInvocationsMessage(org.mockito.internal.rep
 
         String message = join(
                 wanted.toString(),
-                "Wanted " + discrepancy.getPluralizedWantedCount() + ":",
+                "Wanted " + discrepancy.getPluralizedWantedCount() + (discrepancy.getWantedCount() == 0 ? "." : ":"),
                 new LocationImpl(),
-                "But was " + discrepancy.getPluralizedActualCount() + ":",
+                "But was " + discrepancy.getPluralizedActualCount() + (discrepancy.getActualCount() == 0 ? "." : ":"),
                 ending
         );
         return message;

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -27,9 +27,10 @@ public class StackTraceFilter implements Serializable {
      */
     public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         //TODO: profile
+        //TODO: investigate "keepTop" commit history - no effect!
         final List<StackTraceElement> filtered = new ArrayList<StackTraceElement>();
         for (StackTraceElement element : target) {
-            if (CLEANER.isOut(element)) {
+            if (!CLEANER.isOut(element)) {
                 filtered.add(element);
             }
         }

File: src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java
Patch:
@@ -16,7 +16,6 @@
 public class MockitoSerializationIssueTest {
 
     @Test
-    @Ignore("This test fails cause the DefaultStackTraceCleaner ")
     public void should_filter_out_test_class_from_stacktrace_when_clean_flag_is_true() {
         // given
         ConfigurationAccess.getConfig().overrideCleansStackTrace(true);

File: src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java
Patch:
@@ -33,11 +33,11 @@ public void testName() throws Exception {
 	}
 
 	private void assertAccepted(String className) {
-		assertThat(cleaner.isOut(type(className))).describedAs("Must be accepted %s", className).isTrue();
+		assertThat(cleaner.isOut(type(className))).describedAs("Must be accepted %s", className).isFalse();
 	}
 
 	private void assertRejected(String className) {
-		assertThat(cleaner.isOut(type(className))).describedAs("Must be rejected %s", className).isFalse();
+		assertThat(cleaner.isOut(type(className))).describedAs("Must be rejected %s", className).isTrue();
 	}
 
 	private StackTraceElement type(String className) {

File: src/main/java/org/mockito/exceptions/stacktrace/StackTraceCleaner.java
Patch:
@@ -22,5 +22,5 @@ public interface StackTraceCleaner {
      * @param candidate element of the actual stack trace
      * @return whether the element should be excluded from cleaned stack trace.
      */
-    boolean apply(StackTraceElement candidate);
+    boolean isOut(StackTraceElement candidate);
 }

File: src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java
Patch:
@@ -9,7 +9,7 @@ public class DefaultStackTraceCleaner implements StackTraceCleaner {
     
 
 	@Override
-	public boolean apply(StackTraceElement candidate) {
+	public boolean isOut(StackTraceElement candidate) {
 		String className = candidate.getClassName();
 		
 		if (isFromMockitoRunner(className))

File: src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -29,7 +29,7 @@ public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         //TODO: profile
         final List<StackTraceElement> filtered = new ArrayList<StackTraceElement>();
         for (StackTraceElement element : target) {
-            if (CLEANER.apply(element)) {
+            if (CLEANER.isOut(element)) {
                 filtered.add(element);
             }
         }

File: src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner;
@@ -34,11 +33,11 @@ public void testName() throws Exception {
 	}
 
 	private void assertAccepted(String className) {
-		assertThat(cleaner.apply(type(className))).describedAs("Must be accepted %s", className).isTrue();
+		assertThat(cleaner.isOut(type(className))).describedAs("Must be accepted %s", className).isTrue();
 	}
 
 	private void assertRejected(String className) {
-		assertThat(cleaner.apply(type(className))).describedAs("Must be rejected %s", className).isFalse();
+		assertThat(cleaner.isOut(type(className))).describedAs("Must be rejected %s", className).isFalse();
 	}
 
 	private StackTraceElement type(String className) {

File: src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java
Patch:
@@ -136,11 +136,11 @@ public void shouldReportNeverWantedButInvoked() throws Exception {
 
 	@Test
 	public void shouldMarkInvocationsAsVerified() throws Exception {
-		Invocation invocation = new InvocationBuilder().toInvocation();
+		Invocation invocation = buildSimpleMethod().toInvocation();
 		assertThat(invocation.isVerified()).isFalse();
 
 		invocations = asList(invocation);
-		wanted = new InvocationBuilder().toInvocationMatcher();
+		wanted = buildSimpleMethod().toInvocationMatcher();
 		
 		checker.check(invocations, wanted, 1);
 

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/MyStackTraceCleanerProvider.java
Patch:
@@ -13,11 +13,11 @@ public class MyStackTraceCleanerProvider implements StackTraceCleanerProvider {
     public StackTraceCleaner getStackTraceCleaner(final StackTraceCleaner defaultCleaner) {
         return new StackTraceCleaner() {
 			@Override
-			public boolean apply(StackTraceElement candidate) {
+			public boolean isOut(StackTraceElement candidate) {
 				if (ENABLED && candidate.getMethodName().contains("excludeMe")) {
                     return false;
                 }
-                return defaultCleaner.apply(candidate);
+                return defaultCleaner.isOut(candidate);
 			}
         };
     }

File: src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java
Patch:
@@ -31,14 +31,12 @@ public class DefaultAnnotationEngine implements AnnotationEngine {
 
     public DefaultAnnotationEngine() {
         registerAnnotationProcessor(Mock.class, new MockAnnotationProcessor());
-        registerAnnotationProcessor(MockitoAnnotations.Mock.class, new MockitoAnnotationsMockAnnotationProcessor());
         registerAnnotationProcessor(Captor.class, new CaptorAnnotationProcessor());
     }
 
     /* (non-Javadoc)
     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)
     */
-    @SuppressWarnings("deprecation")
     public Object createMockFor(Annotation annotation, Field field) {
         return forAnnotation(annotation).process(annotation, field);
     }

File: src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -43,12 +43,11 @@ public Object createMockFor(Annotation annotation, Field field) {
         return null;
     }
 
-    @SuppressWarnings("deprecation") // for MockitoAnnotations.Mock
     public void process(Class<?> context, Object testInstance) {
         Field[] fields = context.getDeclaredFields();
         for (Field field : fields) {
             if (field.isAnnotationPresent(Spy.class) && !field.isAnnotationPresent(InjectMocks.class)) {
-                assertNoIncompatibleAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
+                assertNoIncompatibleAnnotations(Spy.class, field, Mock.class, Captor.class);
                 field.setAccessible(true);
                 Object instance;
                 try {

File: src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java
Patch:
@@ -50,7 +50,7 @@ private Set<Field> scan() {
         Field[] fields = clazz.getDeclaredFields();
         for (Field field : fields) {
             if (null != field.getAnnotation(InjectMocks.class)) {
-                assertNoAnnotations(field, Mock.class, MockitoAnnotations.Mock.class, Captor.class);
+                assertNoAnnotations(field, Mock.class, Captor.class);
                 mockDependentFields.add(field);
             }
         }

File: src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java
Patch:
@@ -7,6 +7,7 @@
 
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.invocation.Invocation;
+import org.mockito.stubbing.OngoingStubbing;
 import org.mockito.verification.VerificationMode;
 
 import java.io.Serializable;
@@ -24,11 +25,11 @@ static MockingProgress threadSafely() {
         return mockingProgress.get();
     }
     
-    public void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing) {
+    public void reportOngoingStubbing(OngoingStubbing iOngoingStubbing) {
         threadSafely().reportOngoingStubbing(iOngoingStubbing);
     }
 
-    public IOngoingStubbing pullOngoingStubbing() {
+    public OngoingStubbing pullOngoingStubbing() {
         return threadSafely().pullOngoingStubbing();
     }
     

File: src/main/java/org/mockito/stubbing/OngoingStubbing.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.stubbing;
 
 import org.mockito.Mockito;
-import org.mockito.internal.progress.IOngoingStubbing;
 
 /**
  * Simply put: "<b>When</b> the x method is called <b>then</b> return y". E.g:
@@ -32,7 +31,7 @@
  *
  * See examples in javadoc for {@link Mockito#when}
  */
-public interface OngoingStubbing<T> extends IOngoingStubbing {
+public interface OngoingStubbing<T> {
 
     /**
      * Sets a return value to be returned when the method is called. E.g:

File: src/test/java/org/mockitousage/annotation/AnnotationsTest.java
Patch:
@@ -34,8 +34,7 @@ public class AnnotationsTest extends TestBase {
         
     @NotAMock Set notAMock;
 
-    @SuppressWarnings("deprecation")
-    @MockitoAnnotations.Mock List listTwo;
+    @Mock List listTwo;
 
     @Before
     public void setup() {

File: src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -29,14 +29,13 @@ private interface IVarArgs {
     
     @Mock IVarArgs mock;
 
-    @SuppressWarnings("deprecation")
     @Test
     public void shouldStubStringVarargs() {
         when(mock.withStringVarargsReturningString(1)).thenReturn("1");
         when(mock.withStringVarargsReturningString(2, "1", "2", "3")).thenReturn("2");
         
         RuntimeException expected = new RuntimeException();
-        stubVoid(mock).toThrow(expected).on().withStringVarargs(3, "1", "2", "3", "4");
+        doThrow(expected).when(mock).withStringVarargs(3, "1", "2", "3", "4");
 
         assertEquals("1", mock.withStringVarargsReturningString(1));
         assertEquals(null, mock.withStringVarargsReturningString(2));

File: src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -47,10 +47,9 @@ public void shouldStubUsingMatchers() {
         } catch (RuntimeException e) {}
     }
     
-    @SuppressWarnings("deprecation")
     @Test
     public void shouldVerifyUsingMatchers() {
-        stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);
+        doThrow(new RuntimeException()).when(one).oneArg(true);
         when(three.varargsObject(5, "first arg", "second arg")).thenReturn("stubbed");
 
         try {

File: src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldWorkAsStandardMockito() throws Exception {
         assertEquals(3, mock.objectReturningMethodNoArgs());
         assertEquals(3, mock.objectReturningMethodNoArgs());
     }
-    
+
     @Test
     public void shouldReturnNullIfNecessary() throws Exception {
         //when

File: src/test/java/org/mockitoutil/ExtraMatchers.java
Patch:
@@ -134,7 +134,7 @@ public void assertValue(Collection value) {
     }
     
     public static org.hamcrest.Matcher<java.lang.Object> clazz(java.lang.Class<?> type) {
-        return CoreMatchers.isA((Class) type);
+        return CoreMatchers.is((Class) type);
     }
 
     public static Assertor hasMethodsInStackTrace(final String ... methods) {

File: src/main/java/org/mockito/InOrder.java
Patch:
@@ -17,7 +17,7 @@
  * inOrder.verify(secondMock).add("was called second");
  * </code></pre>
  * 
- * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
+ * As of Mockito 1.8.4 you can verifyNoMoreInteractions() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
  * <p>
  * 
  * See examples in javadoc for {@link Mockito} class

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -885,7 +885,7 @@
  * verify(mockTwo).bar();
  *
  * //ignores all stubbed methods:
- * verifyNoMoreInvocations(ignoreStubs(mock, mockTwo));
+ * verifyNoMoreInteractions(ignoreStubs(mock, mockTwo));
  *
  * //creates InOrder that will ignore stubbed
  * InOrder inOrder = inOrder(ignoreStubs(mock, mockTwo));

File: src/main/java/org/mockito/verification/VerificationWithTimeout.java
Patch:
@@ -108,7 +108,7 @@ public interface VerificationWithTimeout extends VerificationMode {
      *   verify(mock, only()).someMethod();
      *   //above is a shorthand for following 2 lines of code:
      *   verify(mock).someMethod();
-     *   verifyNoMoreInvocations(mock);
+     *   verifyNoMoreInteractions(mock);
      * </code></pre>
      * 
      * <p>

File: src/main/java/org/mockito/InOrder.java
Patch:
@@ -17,7 +17,7 @@
  * inOrder.verify(secondMock).add("was called second");
  * </code></pre>
  * 
- * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
+ * As of Mockito 1.8.4 you can verifyNoMoreInteractions() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
  * <p>
  * 
  * See examples in javadoc for {@link Mockito} class

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -885,7 +885,7 @@
  * verify(mockTwo).bar();
  *
  * //ignores all stubbed methods:
- * verifyNoMoreInvocations(ignoreStubs(mock, mockTwo));
+ * verifyNoMoreInteractions(ignoreStubs(mock, mockTwo));
  *
  * //creates InOrder that will ignore stubbed
  * InOrder inOrder = inOrder(ignoreStubs(mock, mockTwo));

File: src/main/java/org/mockito/verification/VerificationWithTimeout.java
Patch:
@@ -108,7 +108,7 @@ public interface VerificationWithTimeout extends VerificationMode {
      *   verify(mock, only()).someMethod();
      *   //above is a shorthand for following 2 lines of code:
      *   verify(mock).someMethod();
-     *   verifyNoMoreInvocations(mock);
+     *   verifyNoMoreInteractions(mock);
      * </code></pre>
      * 
      * <p>

File: src/test/java/org/mockitoutil/JUnitResultAssert.java
Patch:
@@ -35,7 +35,7 @@ public void isSuccessful() {
      */
     public void fails(int expectedFailureCount, Class expectedException) {
         if (result.getFailures().size() != expectedFailureCount) {
-            throw new AssertionError("Wrong number of failures, expected: " + expectedFailureCount + ", actual: " + expectedFailureCount + "\n" +
+            throw new AssertionError("Wrong number of failures, expected: " + expectedFailureCount + ", actual: " + result.getFailures().size() + "\n" +
                     formatFailures(result.getFailures()));
         }
         for (Failure f : result.getFailures()) {

File: src/test/java/org/mockitousage/basicapi/MocksCreationTest.java
Patch:
@@ -62,7 +62,7 @@ public void shouldCombineMockNameAndExtraInterfaces() {
         //then
         assertContains("great mockie", name);
         //and
-        assertThat(mock, is(List.class));
+        assertTrue(mock instanceof List);
     }
     
     @Test

File: src/test/java/org/mockitoutil/ExtraMatchers.java
Patch:
@@ -134,7 +134,7 @@ public void assertValue(Collection value) {
     }
     
     public static org.hamcrest.Matcher<java.lang.Object> clazz(java.lang.Class<?> type) {
-        return CoreMatchers.is(type);
+        return CoreMatchers.isA((Class) type);
     }
 
     public static Assertor hasMethodsInStackTrace(final String ... methods) {

File: src/test/java/org/mockitoutil/TestBase.java
Patch:
@@ -69,9 +69,9 @@ protected Invocation getLastInvocation() {
     protected static <T> void assertThat(T o, Assertor<T> a) {
         a.assertValue(o);
     }
-    
-    protected static <T> void assertThat(T actual, Matcher<T> m) {
-        org.junit.Assert.assertThat(actual, m);
+
+    protected static <T> void assertThat(T actual, Matcher<? super T> matcher) {
+        org.junit.Assert.assertThat(actual, matcher);
     }
     
     protected static <T> void assertThat(String message, T actual, Matcher<T> m) {

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -128,7 +128,7 @@ private void captureRegularArguments(Invocation invocation) {
         for (int position = 0; position < regularArgumentsSize(invocation); position++) {
             ArgumentMatcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                ((CapturesArguments) m).captureFrom(invocation.getArgument(position));
             }
         }
     }

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -39,7 +39,7 @@ public ReturnsArgumentAt(int wantedArgumentPosition) {
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         validateIndexWithinInvocationRange(invocation);
-        return invocation.getArguments()[actualArgumentPosition(invocation)];
+        return invocation.getArgument(actualArgumentPosition(invocation));
     }
 
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -72,7 +72,7 @@ public Object answer(InvocationOnMock invocation) {
             //see issue 184.
             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
-            return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;
+            return invocation.getMock() == invocation.getArgument(0) ? 0 : 1;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -54,6 +54,6 @@ public void shouldNotCountDuplicatedInteractions() throws Exception {
     }
 
     private void assertArgumentEquals(Object argumentValue, Invocation invocation) {
-        assertEquals(argumentValue, invocation.getArguments()[0]);
+        assertEquals(argumentValue, invocation.getArgument(0));
     }
 }
\ No newline at end of file

File: src/test/java/org/mockito/internal/invocation/InvocationImplTest.java
Patch:
@@ -156,7 +156,7 @@ public void shouldReturnCastedArgumentAt(){
             argTypes(int.class, int.class).args(1, argument).toInvocation();
 
         //when
-        int secondArgument = invocationOnInterface.getArgumentAt(1, int.class);
+        int secondArgument = invocationOnInterface.getArgument(1);
 
         //then
         assertTrue(secondArgument == argument);

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -75,7 +75,7 @@ public void shouldAlterFinalLog() {
     private Answer byCheckingLogEquals(final ImportLogBean status) {
         return new Answer() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
-                ImportLogBean bean = (ImportLogBean) invocation.getArguments()[0];
+                ImportLogBean bean =  invocation.getArgument(0);
                 assertEquals(status, bean);
                 return null;
             }

File: src/test/java/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -68,7 +68,7 @@ public void should_stub_with_throwable_classes() throws Exception {
     public void should_stub_with_answer() throws Exception {
         given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                return (String) invocation.getArguments()[0];
+                return  invocation.getArgument(0);
             }});
 
         Assertions.assertThat(mock.simpleMethod("foo")).isEqualTo("foo");
@@ -78,7 +78,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
     public void should_stub_with_will_answer_alias() throws Exception {
         given(mock.simpleMethod(anyString())).will(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                return (String) invocation.getArguments()[0];
+                return  invocation.getArgument(0);
             }
         });
 
@@ -184,7 +184,7 @@ public void should_stub_using_do_return_style() throws Exception {
     public void should_stub_using_do_answer_style() throws Exception {
         willAnswer(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                return (String) invocation.getArguments()[0];
+                return  invocation.getArgument(0);
             }
         })
                 .given(mock).simpleMethod(anyString());

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -28,7 +28,7 @@ public class StubbingWithCustomAnswerTest extends TestBase {
     public void shouldAnswer() throws Exception {
         when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                String arg = (String) invocation.getArguments()[0];
+                String arg =  invocation.getArgument(0);
 
                 return invocation.getMethod().getName() + "-" + arg;
             }

File: src/test/java/org/mockito/internal/junit/JUnitRuleTest.java
Patch:
@@ -58,6 +58,7 @@ public void evaluate() throws Throwable {
             fail();
         } catch (AssertionError e) {
             assertEquals("x", e.getMessage());
+            System.out.println(logger.getLoggedInfo()); //for debugging
             assertTrue(logger.getLoggedInfo().contains("declareUnusedStub"));
         }
     }

File: src/main/java/org/mockito/internal/debugging/LoggingListener.java
Patch:
@@ -50,9 +50,9 @@ public String getStubbingInfo() {
 
         List<String> lines = new LinkedList<String>();
         lines.add("[Mockito] Additional stubbing information (see javadoc for StubbingInfo class):");
-        lines.add("[Mockito]");
 
         if (!argMismatchStubs.isEmpty()) {
+            lines.add("[Mockito]");
             lines.add("[Mockito] Unused stubbing due to argument mismatch (is stubbing correct in the test?):");
             lines.add("[Mockito]");
             for (String info : argMismatchStubs) {
@@ -61,6 +61,7 @@ public String getStubbingInfo() {
         }
 
         if (!unusedStubs.isEmpty()) {
+            lines.add("[Mockito]");
             lines.add("[Mockito] Unused stubbing (perhaps can be removed from the test?):");
             lines.add("[Mockito]");
             for (String info : unusedStubs) {
@@ -69,6 +70,7 @@ public String getStubbingInfo() {
         }
 
         if (!unstubbedCalls.isEmpty()) {
+            lines.add("[Mockito]");
             lines.add("[Mockito] Unstubbed method calls (perhaps missing stubbing in the test?):");
             lines.add("[Mockito]");
             for (String info : unstubbedCalls) {

File: src/test/java/org/mockito/internal/junit/JUnitRuleTest.java
Patch:
@@ -58,7 +58,7 @@ public void evaluate() throws Throwable {
             fail();
         } catch (AssertionError e) {
             assertEquals("x", e.getMessage());
-            assertTrue(logger.getLoggedInfo().startsWith("This stubbing was never used"));
+            assertTrue(logger.getLoggedInfo().contains("This stubbing was never used"));
         }
     }
 

File: src/main/java/org/mockito/junit/MockitoRule.java
Patch:
@@ -13,7 +13,9 @@
  *      so that explicit usage of {@link org.mockito.MockitoAnnotations#initMocks(Object)} is not necessary.
  *      Mocks are initialized before each test method.
  *   <li>
- *      validates framework usage after each test method. See javadoc for {@link org.mockito.Mockito#validateMockitoUsage()}.
+ *      Validates framework usage after each test method. See javadoc for {@link org.mockito.Mockito#validateMockitoUsage()}.
+ *   <li>
+ *      Since 2.*, on test failure, stubbing warnings are printed to System output. They might be useful for debugging.
  * </ul>
  * Example use:
  * <pre class="code"><code class="java">

File: src/main/java/org/mockito/Spy.java
Patch:
@@ -34,7 +34,7 @@
  *
  * <pre class="code"><code class="java">
  * Foo spyOnFoo = Mockito.spy(new Foo("argument"));
- * Bar spyOnFoo = Mockito.spy(new Bar());
+ * Bar spyOnBar = Mockito.spy(new Bar());
  * </code></pre>
  *
  * <p>

File: src/main/java/org/mockito/internal/util/reflection/Whitebox.java
Patch:
@@ -40,7 +40,7 @@ private static Field getFieldFromHierarchy(Class<?> clazz, String field) {
             throw new RuntimeException(
                     "You want me to get this field: '" + field +
                     "' on this class: '" + clazz.getSimpleName() + 
-                    "' but this field is not declared withing hierarchy of this class!");
+                    "' but this field is not declared within the hierarchy of this class!");
         }
         return f;
     }

File: src/main/java/org/mockito/Spy.java
Patch:
@@ -34,7 +34,7 @@
  *
  * <pre class="code"><code class="java">
  * Foo spyOnFoo = Mockito.spy(new Foo("argument"));
- * Bar spyOnFoo = Mockito.spy(new Bar());
+ * Bar spyOnBar = Mockito.spy(new Bar());
  * </code></pre>
  *
  * <p>

File: src/main/java/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -122,7 +122,7 @@ private void captureRegularArguments(Invocation invocation) {
         for (int position = 0; position < regularArgumentsSize(invocation); position++) {
             ArgumentMatcher m = matchers.get(position);
             if (m instanceof CapturesArguments) {
-                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+                ((CapturesArguments) m).captureFrom(invocation.getArgument(position));
             }
         }
     }

File: src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java
Patch:
@@ -39,7 +39,7 @@ public ReturnsArgumentAt(int wantedArgumentPosition) {
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         validateIndexWithinInvocationRange(invocation);
-        return invocation.getArguments()[actualArgumentPosition(invocation)];
+        return invocation.getArgument(actualArgumentPosition(invocation));
     }
 
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -72,7 +72,7 @@ public Object answer(InvocationOnMock invocation) {
             //see issue 184.
             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
-            return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;
+            return invocation.getMock() == invocation.getArgument(0) ? 0 : 1;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();

File: src/test/java/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -54,6 +54,6 @@ public void shouldNotCountDuplicatedInteractions() throws Exception {
     }
 
     private void assertArgumentEquals(Object argumentValue, Invocation invocation) {
-        assertEquals(argumentValue, invocation.getArguments()[0]);
+        assertEquals(argumentValue, invocation.getArgument(0));
     }
 }
\ No newline at end of file

File: src/test/java/org/mockito/internal/invocation/InvocationImplTest.java
Patch:
@@ -156,7 +156,7 @@ public void shouldReturnCastedArgumentAt(){
             argTypes(int.class, int.class).args(1, argument).toInvocation();
 
         //when
-        int secondArgument = invocationOnInterface.getArgumentAt(1, int.class);
+        int secondArgument = invocationOnInterface.getArgument(1);
 
         //then
         assertTrue(secondArgument == argument);

File: src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -75,7 +75,7 @@ public void shouldAlterFinalLog() {
     private Answer byCheckingLogEquals(final ImportLogBean status) {
         return new Answer() {
             public Object answer(InvocationOnMock invocation) throws Throwable {
-                ImportLogBean bean = (ImportLogBean) invocation.getArguments()[0];
+                ImportLogBean bean =  invocation.getArgument(0);
                 assertEquals(status, bean);
                 return null;
             }

File: src/test/java/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -68,7 +68,7 @@ public void should_stub_with_throwable_classes() throws Exception {
     public void should_stub_with_answer() throws Exception {
         given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                return (String) invocation.getArguments()[0];
+                return  invocation.getArgument(0);
             }});
 
         Assertions.assertThat(mock.simpleMethod("foo")).isEqualTo("foo");
@@ -78,7 +78,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
     public void should_stub_with_will_answer_alias() throws Exception {
         given(mock.simpleMethod(anyString())).will(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                return (String) invocation.getArguments()[0];
+                return  invocation.getArgument(0);
             }
         });
 
@@ -184,7 +184,7 @@ public void should_stub_using_do_return_style() throws Exception {
     public void should_stub_using_do_answer_style() throws Exception {
         willAnswer(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                return (String) invocation.getArguments()[0];
+                return  invocation.getArgument(0);
             }
         })
                 .given(mock).simpleMethod(anyString());

File: src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -28,7 +28,7 @@ public class StubbingWithCustomAnswerTest extends TestBase {
     public void shouldAnswer() throws Exception {
         when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {
             public String answer(InvocationOnMock invocation) throws Throwable {
-                String arg = (String) invocation.getArguments()[0];
+                String arg =  invocation.getArgument(0);
 
                 return invocation.getMethod().getName() + "-" + arg;
             }

File: src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java
Patch:
@@ -12,6 +12,8 @@ public boolean isOut(StackTraceElement e) {
         boolean fromOrgMockito = e.getClassName().startsWith("org.mockito.");
         boolean isRunner = e.getClassName().startsWith("org.mockito.runners.");
         boolean isInternalRunner = e.getClassName().startsWith("org.mockito.internal.runners.");
-        return (fromMockObject || fromByteBuddyMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;
+        boolean isJUnitRule = e.getClassName().startsWith("org.mockito.internal.junit.JUnitRule");
+        return (fromMockObject || fromByteBuddyMockObject || fromOrgMockito)
+                && !isRunner && !isInternalRunner && !isJUnitRule;
     }
 }

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java
Patch:
@@ -44,7 +44,7 @@ public <T> Class<? extends T> generateMockClass(MockFeatures<T> features) {
                          .method(any())
                            .intercept(MethodDelegation.to(DispatcherDefaultingToRealMethod.class))
                            .transform(MethodTransformer.Simple.withModifiers(SynchronizationState.PLAIN))
-                           .attribute(MethodAttributeAppender.ForInstrumentedMethod.INSTANCE)
+                           .attribute(MethodAttributeAppender.ForInstrumentedMethod.INCLUDING_RECEIVER)
                          .serialVersionUid(42L)
                          .defineField("mockitoInterceptor", MockMethodInterceptor.class, PRIVATE)
                          .implement(MockAccess.class)

File: src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java
Patch:
@@ -7,6 +7,7 @@
 import net.bytebuddy.dynamic.MethodTransformer;
 import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
 import net.bytebuddy.dynamic.loading.MultipleParentClassLoader;
+import net.bytebuddy.dynamic.scaffold.TypeValidation;
 import net.bytebuddy.implementation.FieldAccessor;
 import net.bytebuddy.implementation.MethodDelegation;
 import net.bytebuddy.implementation.attribute.MethodAttributeAppender;
@@ -29,7 +30,7 @@ class MockBytecodeGenerator {
     private final Random random;
 
     public MockBytecodeGenerator() {
-        byteBuddy = new ByteBuddy();
+        byteBuddy = new ByteBuddy().with(TypeValidation.DISABLED);
         random = new Random();
     }
 

File: src/main/java/org/mockito/Matchers.java
Patch:
@@ -667,11 +667,11 @@ public static String startsWith(String prefix) {
      * Please read the documentation for {@link ArgumentMatcher} to learn about approaches and see the examples.
      * <p>
      * <b>NullPointerException</b> auto-unboxing caveat.
-     * In rare cases when the parameter is a primitive then you <b>*must*</b> use relevant intThat(), floatThat(), etc. method.
+     * In rare cases when matching primitive parameter types you <b>*must*</b> use relevant intThat(), floatThat(), etc. method.
      * This way you will avoid <code>NullPointerException</code> during auto-unboxing.
-     * Due to how java works we don't really have a clean way of detecting this scenario and protecting the user from the pitfall.
+     * Due to how java works we don't really have a clean way of detecting this scenario and protecting the user from this problem.
      * Hopefully, the javadoc describes the problem and solution well.
-     * If you have an idea how to fix the caveat, let us know via the mailing list or issue tracker.
+     * If you have an idea how to fix the problem, let us know via the mailing list or the issue tracker.
      * <p>
      * See examples in javadoc for {@link ArgumentMatcher} class
      * 

File: src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java
Patch:
@@ -15,6 +15,7 @@ public class MatcherGenericTypeExtractor {
      * for matcher class that extends BaseMatcher[Integer] this method returns Integer
      */
     public static Class genericTypeOfMatcher(Class matcherClass) {
+        //TODO SF check if we can reuse it for Mockito ArgumentMatcher
         return genericTypeOf(matcherClass, BaseMatcher.class, Matcher.class);
     }
 }
\ No newline at end of file

File: buildSrc/src/main/groovy/org/mockito/release/exec/ProcessRunner.java
Patch:
@@ -1,15 +1,15 @@
-package org.mockito.release.exec
+package org.mockito.release.exec;
 
 /**
  * Provides ways to execute external processes
  */
-interface ProcessRunner {
+public interface ProcessRunner {
 
     /**
      * Executes given command line and returns the output.
      *
      * @param commandLine to execute
      * @return combined error and standard output.
      */
-    fun run(vararg commandLine: String): String
+    String run(String ... commandLine);
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java
Patch:
@@ -32,7 +32,7 @@ class GitNotesBuilder implements NotesBuilder {
     public String buildNotes(String version, String fromRevision, String toRevision) {
         LOG.info("Getting release notes between {} and {}", fromRevision, toRevision);
 
-        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.INSTANCE.getProcessRunner(workDir));
+        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.getProcessRunner(workDir));
         ContributionSet contributions = contributionsProvider.getContributionsBetween(fromRevision, toRevision);
 
         ImprovementsProvider improvementsProvider = Improvements.getGitHubProvider(authTokenEnvVar);

File: buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java
Patch:
@@ -32,7 +32,7 @@ class GitNotesBuilder implements NotesBuilder {
     public String buildNotes(String version, String fromRevision, String toRevision) {
         LOG.info("Getting release notes between {} and {}", fromRevision, toRevision);
 
-        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.getProcessRunner(workDir));
+        ContributionsProvider contributionsProvider = Vcs.getGitProvider(Exec.INSTANCE.getProcessRunner(workDir));
         ContributionSet contributions = contributionsProvider.getContributionsBetween(fromRevision, toRevision);
 
         ImprovementsProvider improvementsProvider = Improvements.getGitHubProvider(authTokenEnvVar);

File: buildSrc/src/main/groovy/org/mockito/release/comparison/PublicationsComparatorTask.java
Patch:
@@ -9,15 +9,15 @@
 public class PublicationsComparatorTask extends DefaultTask implements PublicationsComparator {
 
     private ZipComparator zipComparator = new ZipComparator(new ZipCompare());
-    private PomComparator pomComparator = new PomComparator();
+    private PomComparator pomComparator;
     private Boolean publicationsEqual;
 
     public void compareBinaries(Closure<File> left, Closure<File> right) {
         zipComparator.setPair(left, right);
     }
 
     public void comparePoms(Closure<String> left, Closure<String> right) {
-        pomComparator.setPair(left, right);
+        pomComparator = new PomComparator(left, right);
     }
 
     public boolean isPublicationsEqual() {

File: src/main/java/org/mockito/Answers.java
Patch:
@@ -73,7 +73,7 @@ public enum Answers implements Answer<Object>{
 
     private final Answer<Object> implementation;
 
-    private Answers(Answer<Object> implementation) {
+    Answers(Answer<Object> implementation) {
         this.implementation = implementation;
     }
 

File: src/main/java/org/mockito/internal/handler/MockHandlerFactory.java
Patch:
@@ -15,8 +15,7 @@ public class MockHandlerFactory {
     public InternalMockHandler create(MockCreationSettings settings) {
         InternalMockHandler handler = new MockHandlerImpl(settings);
         InternalMockHandler nullResultGuardian = new NullResultGuardian(handler);
-        InternalMockHandler notifier = new InvocationNotifierHandler(nullResultGuardian, settings);
 
-        return notifier;
+        return new InvocationNotifierHandler(nullResultGuardian, settings);
     }
 }

File: src/test/java/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java
Patch:
@@ -44,9 +44,9 @@ public void run() {
         }
         
         verify(mock, atLeastOnce()).simpleMethod();
-        
-        for (int i = 0; i < listeners.length; i++) {
-            listeners[i].join();
+
+        for (Thread listener : listeners) {
+            listener.join();
         }
     }
 }
\ No newline at end of file

File: src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -170,7 +170,7 @@ public static boolean runInMultipleThreads(int numberOfThreads) throws Exception
         boolean failed = false;
         for (AllTestsRunner t : threads) {
             t.join();
-            failed = failed ? true : t.isFailed();
+            failed |= t.isFailed();
         }
 
         return failed;

File: src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java
Patch:
@@ -34,8 +34,8 @@ public void run() {
             };
             listeners[i].start();
         }
-        for (int i = 0; i < listeners.length; i++) {
-            listeners[i].join();
+        for (Thread listener : listeners) {
+            listener.join();
         }
         verify(mock, times(listeners.length)).simpleMethod("foo");
     }

File: src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java
Patch:
@@ -54,8 +54,8 @@ public void run() {
             };
             listeners[i].start();
         }
-        for (int i = 0; i < listeners.length; i++) {
-            listeners[i].join();
+        for (Thread listener : listeners) {
+            listener.join();
         }
     }
 }
\ No newline at end of file

File: src/test/java/org/concurrentmockito/ThreadsStubSharedMockTest.java
Patch:
@@ -36,7 +36,7 @@ public void run() {
                         .thenReturn(getId() + "")
                         .thenReturn("foo")
                         .thenReturn("bar");
-                        
+
                     stubVoid(mock)
                         .toThrow(new RuntimeException(getId() + ""))
                         .toReturn()
@@ -46,8 +46,8 @@ public void run() {
             };
             listeners[i].start();
         }
-        for (int i = 0; i < listeners.length; i++) {
-            listeners[i].join();
+        for (Thread listener : listeners) {
+            listener.join();
         }
     }
 }
\ No newline at end of file

File: src/main/java/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -171,7 +171,6 @@ private static <T> CreationSettings<T> validatedSettings(Class<T> typeToMock, Cr
         //TODO SF - add this validation and also add missing coverage
 //        validator.validateDelegatedInstance(classToMock, settings.getDelegatedInstance());
 
-        validator.validateSerializable(typeToMock, source.isSerializable());
         validator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());
 
         //TODO SF - I don't think we really need CreationSettings type

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java
Patch:
@@ -9,9 +9,6 @@
 import java.lang.reflect.Method;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.stubbing.answers.MethodInfo;
-import org.mockito.internal.util.Primitives;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

File: src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java
Patch:
@@ -9,9 +9,6 @@
 import java.lang.reflect.Method;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.stubbing.answers.MethodInfo;
-import org.mockito.internal.util.Primitives;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 

File: src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Patch:
@@ -25,14 +25,14 @@ public void setUp() {
 
     @Test
     public void shouldAcceptNullsInAnyMatcher() {
-        when(mock.oneArg(any())).thenReturn("matched");
+        when(mock.oneArg((Object) any())).thenReturn("matched");
 
         assertEquals(null, mock.forObject(null));
     }
 
     @Test
     public void shouldAcceptNullsInAnyObjectMatcher() {
-        when(mock.oneArg(anyObject())).thenReturn("matched");
+        when(mock.oneArg((Object) anyObject())).thenReturn("matched");
 
         assertEquals(null, mock.forObject(null));
     }

File: src/test/java/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -253,7 +253,7 @@ public void anyXMatcher() {
         when(mock.oneArg(anyLong())).thenReturn("6");
         when(mock.oneArg(anyShort())).thenReturn("7");
         when(mock.oneArg((String) anyObject())).thenReturn("8");
-        when(mock.oneArg(anyObject())).thenReturn("9");
+        when(mock.oneArg((Object) anyObject())).thenReturn("9");
         
         assertEquals("0", mock.oneArg(true));
         assertEquals("0", mock.oneArg(false));
@@ -534,6 +534,6 @@ public void eqMatcherAndNulls() {
     public void sameMatcherAndNulls() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(same(null));
+        verify(mock).simpleMethod((Object) same(null));
     }
 }
\ No newline at end of file

File: src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -31,7 +31,7 @@ public void shouldHelpOutWithUnnecessaryCasting() {
     public void shouldAnyBeActualAliasToAnyObject() {
         mock.simpleMethod((Object) null);
 
-        verify(mock).simpleMethod(anyObject());
+        verify(mock).simpleMethod((Object) anyObject());
         verify(mock).simpleMethod(any(Object.class));
     }
 

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -61,8 +61,8 @@
  *      <a href="#28">28. <code>MockMaker</code> API (Since 1.9.5)</a><br/>
  *      <a href="#29">29. (new) BDD style verification (Since 1.10.0)</a><br/>
  *      <a href="#30">30. (new) Spying or mocking abstract classes (Since 1.10.12)</a><br/>
- *      <a href="#31">31. (new) Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3>
- *      <a href="#32">32. (new) Better generic support with deep stubs (Since 1.10.0)</a></h3>
+ *      <a href="#31">31. (new) Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3><br/>
+ *      <a href="#32">32. (new) Better generic support with deep stubs (Since 1.10.0)</a></h3><br/>
  *      <a href="#32">33. (new) Mockito JUnit rule (Since 1.10.17)</a><br/>
  *      <a href="#34">34. (new) Switch <em>on</em> or <em>off</em> plugins (Since 1.10.15)</a><br/>
  *      <a href="#35">35. (new) Custom verification failure message (Since 2.0.0)</a><br/>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -61,8 +61,8 @@
  *      <a href="#28">28. <code>MockMaker</code> API (Since 1.9.5)</a><br/>
  *      <a href="#29">29. (new) BDD style verification (Since 1.10.0)</a><br/>
  *      <a href="#30">30. (new) Spying or mocking abstract classes (Since 1.10.12)</a><br/>
- *      <a href="#31">31. (new) Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3>
- *      <a href="#32">32. (new) Better generic support with deep stubs (Since 1.10.0)</a></h3>
+ *      <a href="#31">31. (new) Mockito mocks can be <em>serialized</em> / <em>deserialized</em> across classloaders (Since 1.10.0)</a></h3><br/>
+ *      <a href="#32">32. (new) Better generic support with deep stubs (Since 1.10.0)</a></h3><br/>
  *      <a href="#32">33. (new) Mockito JUnit rule (Since 1.10.17)</a><br/>
  *      <a href="#34">34. (new) Switch <em>on</em> or <em>off</em> plugins (Since 1.10.15)</a><br/>
  *      <a href="#35">35. (new) Custom verification failure message (Since 2.0.0)</a><br/>

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1051,7 +1051,7 @@
  * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.
  *
  * <ul>
- *     <li>Annotating the JUnit test class with a <code>&#064;{@link org.junit.runner.RunWith}(&#064;{@link MockitoJUnitRunner}.class)</code></li>
+ *     <li>Annotating the JUnit test class with a <code>&#064;{@link org.junit.runner.RunWith}({@link MockitoJUnitRunner}.class)</code></li>
  *     <li>Invoking <code>{@link MockitoAnnotations#initMocks(Object)}</code> in the <code>&#064;{@link org.junit.Before}</code> method</li>
  * </ul>
  *

File: src/main/java/org/mockito/Mockito.java
Patch:
@@ -1051,7 +1051,7 @@
  * such as <code>&#064;{@link Mock}</code>, <code>&#064;{@link Spy}</code>, <code>&#064;{@link InjectMocks}</code>, etc.
  *
  * <ul>
- *     <li>Annotating the JUnit test class with a <code>&#064;{@link org.junit.runner.RunWith}(&#064;{@link MockitoJUnitRunner}.class)</code></li>
+ *     <li>Annotating the JUnit test class with a <code>&#064;{@link org.junit.runner.RunWith}({@link MockitoJUnitRunner}.class)</code></li>
  *     <li>Invoking <code>{@link MockitoAnnotations#initMocks(Object)}</code> in the <code>&#064;{@link org.junit.Before}</code> method</li>
  * </ul>
  *

File: subprojects/testng/src/test/java/org/mockitousage/testng/AnnotatedFieldsShouldBeInitializedByMockitoTestNGListenerTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.HashMap;
 import java.util.List;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @Listeners(MockitoTestNGListener.class)
 public class AnnotatedFieldsShouldBeInitializedByMockitoTestNGListenerTest {

File: subprojects/testng/src/test/java/org/mockitousage/testng/CaptorAnnotatedFieldShouldBeClearedTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.util.List;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 

File: subprojects/testng/src/test/java/org/mockitousage/testng/ConfigurationMethodTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.io.IOException;
 import java.util.Map;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
 @Listeners(MockitoTestNGListener.class)

File: subprojects/testng/src/test/java/org/mockitousage/testng/DontResetMocksIfNoListenerTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.IOException;
 import java.util.Map;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 
 public class DontResetMocksIfNoListenerTest {

File: subprojects/testng/src/test/java/org/mockitousage/testng/EnsureMocksAreInitializedBeforeBeforeClassMethodTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.util.Observer;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @Listeners(MockitoTestNGListener.class)
 public class EnsureMocksAreInitializedBeforeBeforeClassMethodTest {

File: subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import java.util.Map;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.testng.Assert.fail;
 
 public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {

File: subprojects/testng/src/test/java/org/mockitousage/testng/MockFieldsShouldBeResetBetweenTestMethodsTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.List;
 import java.util.Observable;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.never;

File: subprojects/testng/src/test/java/org/mockitousage/testng/TestWithoutListenerShouldNotInitializeAnnotatedFieldsTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class TestWithoutListenerShouldNotInitializeAnnotatedFieldsTest {
 

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/TestNGShouldFailWhenMockitoListenerFailsTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.Test;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.testng.Assert.assertTrue;
 
 @Test(

File: test/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Ignore;
 import org.junit.Test;
 

File: test/org/mockito/internal/configuration/MockInjectionTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Observer;
 import java.util.Set;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 @SuppressWarnings("unchecked")

File: test/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.creation;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.base.MockitoException;

File: test/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.List;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockitoutil.ClassLoaders.coverageTool;
 

File: test/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal.creation.bytebuddy;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.internal.creation.bytebuddy.MockFeatures.withMockFeatures;
 import static org.mockitoutil.ClassLoaders.inMemoryClassLoader;

File: test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class VerboseMockInvocationLoggerTest {
 

File: test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.text.ParseException;
 import java.util.ArrayList;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willThrow;

File: test/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.internal.invocation;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;

File: test/org/mockito/internal/matchers/CapturingMatcherTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.matchers;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockitoutil.TestBase;

File: test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.mockito.exceptions.base.MockitoException;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
 public class VarargCapturingMatcherTest {

File: test/org/mockito/internal/progress/HandyReturnValuesTest.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 

File: test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.nio.charset.CharacterCodingException;
 import java.util.ArrayList;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 

File: test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.stubbing.answers;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import org.junit.Test;
 import org.mockito.internal.invocation.InvocationBuilder;

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
 import static org.mockito.Mockito.mock;
 

File: test/org/mockito/internal/util/MockCreationValidatorTest.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Observer;
 
 import static java.util.Arrays.asList;
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
 @SuppressWarnings("unchecked")

File: test/org/mockito/internal/util/MockUtilTest.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.internal.util;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.exceptions.base.MockitoException;

File: test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.List;
 import java.util.Observer;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 
 public class HashCodeAndEqualsSafeSetTest {

File: test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.util.junit;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;

File: test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 
 import java.io.File;

File: test/org/mockito/internal/util/reflection/FieldsTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.lang.reflect.Field;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.internal.util.reflection.Fields.syntheticField;
 
 public class FieldsTest {

File: test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Observer;
 import java.util.Set;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;

File: test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.lang.reflect.Field;
 import java.util.*;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 @SuppressWarnings("unused")
 public class SuperTypesLastSorterTest {

File: test/org/mockito/internal/verification/NoMoreInteractionsTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.verification;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerificationInOrderFailure;

File: test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockitousage.annotation;
 
-import static org.fest.assertions.Assertions.*;
+import static org.assertj.core.api.Assertions.*;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;

File: test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.annotation;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InjectMocks;

File: test/org/mockitousage/annotation/SpyAnnotationTest.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;

File: test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockitousage.annotation;
 
 import java.util.List;
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;

File: test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java
Patch:
@@ -5,8 +5,8 @@
 
 package org.mockitousage.basicapi;
 
-import static org.fest.assertions.Assertions.assertThat;
-import static org.fest.assertions.Fail.fail;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.withSettings;
 import static org.mockitoutil.ClassLoaders.inMemoryClassLoader;

File: test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Observable;
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mock;

File: test/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Observable;
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mockito;

File: test/org/mockitousage/bugs/EqualsWithDeltaTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.EqualsWithDelta;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 
 public class EqualsWithDeltaTest {
 

File: test/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.util.Map;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;

File: test/org/mockitousage/bugs/ParentClassNotPublicTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.bugs;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Assume;
 import org.junit.Before;
 import org.junit.Test;

File: test/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockitousage.bugs;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.Spy;
 import org.mockitoutil.TestBase;

File: test/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockitousage.bugs.creation;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.Spy;

File: test/org/mockitousage/bugs/deepstubs/DeepStubsWronglyReportsSerializationProblemsTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.junit.Test;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
 import static org.mockito.Mockito.mock;
 

File: test/org/mockitousage/bugs/injection/Issue353InjectionMightNotHappenInCertainConfigurationTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertSame;
 
 @RunWith(MockitoJUnitRunner.class)

File: test/org/mockitousage/debugging/InvocationListenerCallbackTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.listeners.InvocationListener;
 import org.mockito.listeners.MethodInvocationReport;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willReturn;

File: test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.mockito.Mockito.withSettings;
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: test/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockitousage.matchers;
 
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.mockito.exceptions.base.MockitoException;

File: test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockitousage.IMethods;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.when;

File: test/org/mockitousage/misuse/SpyStubbingMisuseTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;
 
 import static org.junit.Assert.fail;
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.*;
 
 public class SpyStubbingMisuseTest {

File: test/org/mockitousage/serialization/DeepStubsSerializableTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockitousage.serialization;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;

File: test/org/mockitousage/stubbing/DeepStubbingTest.java
Patch:
@@ -22,7 +22,7 @@
 import java.net.Socket;
 import java.util.Locale;
 import javax.net.SocketFactory;
-import org.fest.assertions.Assertions;
+import org.assertj.core.api.Assertions;
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.exceptions.verification.TooManyActualInvocations;

File: test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockitousage.IMethods;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalAnswers.returnsArgAt;
 import static org.mockito.AdditionalAnswers.returnsFirstArg;
 import static org.mockito.AdditionalAnswers.returnsLastArg;

File: test/org/mockitousage/stubbing/StubbingWithDelegateTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.stubbing;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.AdditionalAnswers.delegatesTo;
 import static org.mockito.Mockito.doReturn;

File: test/org/mockitoutil/ClassLoadersTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 
-import static org.fest.assertions.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockitoutil.ClassLoaders.currentClassLoader;
 import static org.mockitoutil.ClassLoaders.excludingClassLoader;

File: src/org/mockito/plugins/MockMaker.java
Patch:
@@ -110,12 +110,15 @@ void resetMock(
      *
      * @param type The type inspected for mockability.
      * @return object that carries the information about mockability of given type.
+     * @since 2.0
      */
     @Incubating
     TypeMockability isTypeMockable(Class<?> type);
 
     /**
      * Carries the mockability information
+     *
+     * @since 2.0
      */
     @Incubating
     static interface TypeMockability {

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -2,7 +2,8 @@
 
 /**
  * Allows creating customized argument matchers.
- * This API was changed in Mockito 2.*
+ * This API was changed in Mockito 2.* in an effort to decouple Mockito from Hamcrest
+ * and reduce the risk of version incompatibility.
  * <p>
  * For non-trivial method arguments used in stubbing or verification, you have following options
  * (in no particular order):
@@ -28,7 +29,7 @@
  *     This option is useful if custom matcher is needed for stubbing and can be reused a lot
  *     </ul>
  *     <ul>use an instance of hamcrest matcher and pass it to
- *     TODO
+ *     {@link org.mockito.hamcrest.MockitoHamcrest#argThat(org.hamcrest.Matcher)}
  *     Useful if you already have a hamcrest matcher. Reuse and win!
  *     </ul>
  * </li>

File: src/org/mockito/AdditionalMatchers.java
Patch:
@@ -986,7 +986,7 @@ public static float eq(float value, float delta) {
         return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();
     }
     
-    private static HandyReturnValues reportMatcher(MockitoMatcher<?> matcher) {
+    private static HandyReturnValues reportMatcher(ArgumentMatcher<?> matcher) {
         return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher);
     }
 }
\ No newline at end of file

File: src/org/mockito/ArgumentCaptor.java
Patch:
@@ -38,14 +38,14 @@
  * Also it may reduce defect localization because if stubbed method was not called then no argument is captured.
  *
  * <p>
- * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link MockitoMatcher} class).
+ * In a way ArgumentCaptor is related to custom argument matchers (see javadoc for {@link ArgumentMatcher} class).
  * Both techniques can be used for making sure certain arguments where passed to mocks. 
  * However, ArgumentCaptor may be a better fit if:
  * <ul>  
  * <li>custom argument matcher is not likely to be reused</li>
  * <li>you just need it to assert on argument values to complete verification</li>
  * </ul>
- * Custom argument matchers via {@link MockitoMatcher} are usually better for stubbing.
+ * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.
  *
  * <p>
  * This utility class <strong>*don't do any type checks*</strong>, the generic signatures are only there to avoid casting
@@ -92,7 +92,7 @@ private ArgumentCaptor(Class<? extends T> clazz) {
     /**
      * Use it to capture the argument. This method <b>must be used inside of verification</b>.
      * <p>
-     * Internally, this method registers a special implementation of an {@link MockitoMatcher}.
+     * Internally, this method registers a special implementation of an {@link ArgumentMatcher}.
      * This argument matcher stores the argument value so that you can use it later to perform assertions.  
      * <p>
      * See examples in javadoc for {@link ArgumentCaptor} class.

File: src/org/mockito/hamcrest/MockitoHamcrest.java
Patch:
@@ -31,6 +31,7 @@ public static <T> T argThat(Matcher<T> matcher) {
     }
 
     /*
+    TODO SF not implemented yet
     private static Class grabClass(Matcher matcher) {
         if (matcher.getClass().getGenericSuperclass() instanceof ParameterizedType) {
             Type[] genericTypes = ((ParameterizedType) matcher.getClass().getGenericSuperclass()).getActualTypeArguments();

File: src/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java
Patch:
@@ -2,12 +2,12 @@
 
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 /**
  * Created by sfaber on 6/22/15.
  */
-public class HamcrestArgumentMatcher<T> implements MockitoMatcher<T> {
+public class HamcrestArgumentMatcher<T> implements ArgumentMatcher<T> {
 
     private final Matcher matcher;
 

File: src/org/mockito/internal/invocation/ArgumentsComparator.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.invocation;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.VarargMatcher;
 import org.mockito.invocation.Invocation;
 
@@ -38,14 +38,14 @@ private boolean varArgsMatch(InvocationMatcher invocationMatcher, Invocation act
 
         //we must use raw arguments, not arguments...
         Object[] rawArgs = actual.getRawArguments();
-        List<MockitoMatcher> matchers = invocationMatcher.getMatchers();
+        List<ArgumentMatcher> matchers = invocationMatcher.getMatchers();
 
         if (rawArgs.length != matchers.size()) {
             return false;
         }
 
         for (int i = 0; i < rawArgs.length; i++) {
-            MockitoMatcher m = matchers.get(i);
+            ArgumentMatcher m = matchers.get(i);
             //it's a vararg because it's the last array in the arg list
             if (rawArgs[i] != null && rawArgs[i].getClass().isArray() && i == rawArgs.length-1) {
                 //this is very important to only allow VarargMatchers here. If you're not sure why remove it and run all tests.

File: src/org/mockito/internal/invocation/ArgumentsProcessor.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.invocation;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.ArrayEquals;
 import org.mockito.internal.matchers.Equals;
 import org.mockito.internal.util.collections.ArrayUtils;
@@ -38,8 +38,8 @@ public static Object[] expandVarArgs(final boolean isVarArgs, final Object[] arg
         return newArgs;
     }
 
-    public static List<MockitoMatcher> argumentsToMatchers(Object[] arguments) {
-        List<MockitoMatcher> matchers = new ArrayList<MockitoMatcher>(arguments.length);
+    public static List<ArgumentMatcher> argumentsToMatchers(Object[] arguments) {
+        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>(arguments.length);
         for (Object arg : arguments) {
             if (arg != null && arg.getClass().isArray()) {
                 matchers.add(new ArrayEquals(arg));

File: src/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -5,11 +5,10 @@
 
 package org.mockito.internal.invocation;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.matchers.LocalizedMatcher;
 import org.mockito.internal.progress.ArgumentMatcherStorage;
-import org.mockito.internal.util.collections.ListUtil;
 import org.mockito.invocation.Invocation;
 
 import java.io.Serializable;
@@ -23,7 +22,7 @@ public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStor
         List<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();
         validateMatchers(invocation, lastMatchers);
 
-        List<MockitoMatcher> matchers = new LinkedList<MockitoMatcher>();
+        List<ArgumentMatcher> matchers = new LinkedList<ArgumentMatcher>();
         for (LocalizedMatcher m : lastMatchers) {
             matchers.add(m.getMatcher());
         }

File: src/org/mockito/internal/matchers/Any.java
Patch:
@@ -7,10 +7,10 @@
 
 import java.io.Serializable;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 @SuppressWarnings("unchecked")
-public class Any implements MockitoMatcher, Serializable {
+public class Any implements ArgumentMatcher, Serializable {
 
     public static final Any ANY = new Any();
 

File: src/org/mockito/internal/matchers/AnyVararg.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
 @SuppressWarnings("unchecked")
-public class AnyVararg implements MockitoMatcher, VarargMatcher, Serializable {
+public class AnyVararg implements ArgumentMatcher, VarargMatcher, Serializable {
 
-    public static final MockitoMatcher ANY_VARARG = new AnyVararg();
+    public static final ArgumentMatcher ANY_VARARG = new AnyVararg();
 
     public boolean matches(Object arg) {
         return true;

File: src/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.exceptions.Reporter;
 
 import java.io.Serializable;
 import java.util.LinkedList;
 import java.util.List;
 
 @SuppressWarnings("unchecked")
-public class CapturingMatcher<T> implements MockitoMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
+public class CapturingMatcher<T> implements ArgumentMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
     
     private final LinkedList<Object> arguments = new LinkedList<Object>();
 

File: src/org/mockito/internal/matchers/CompareTo.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
 
-public abstract class CompareTo<T extends Comparable<T>> implements MockitoMatcher<T>, Serializable {
+public abstract class CompareTo<T extends Comparable<T>> implements ArgumentMatcher<T>, Serializable {
     private final Comparable<T> wanted;
 
     public CompareTo(Comparable<T> value) {

File: src/org/mockito/internal/matchers/Contains.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
 
-public class Contains implements MockitoMatcher<String>, Serializable {
+public class Contains implements ArgumentMatcher<String>, Serializable {
 
     private final String substring;
 

File: src/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -7,9 +7,9 @@
 
 import java.io.Serializable;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
-public class EndsWith implements MockitoMatcher<String>, Serializable {
+public class EndsWith implements ArgumentMatcher<String>, Serializable {
 
     private final String suffix;
 

File: src/org/mockito/internal/matchers/Equals.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.text.ValuePrinter;
 
 import java.io.Serializable;
 
-public class Equals implements MockitoMatcher<Object>, ContainsExtraTypeInfo, Serializable {
+public class Equals implements ArgumentMatcher<Object>, ContainsExtraTypeInfo, Serializable {
 
     private final Object wanted;
 

File: src/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
-public class EqualsWithDelta implements MockitoMatcher<Number>, Serializable {
+public class EqualsWithDelta implements ArgumentMatcher<Number>, Serializable {
 
     private final Number wanted;
     private final Number delta;

File: src/org/mockito/internal/matchers/Find.java
Patch:
@@ -8,9 +8,9 @@
 import java.io.Serializable;
 import java.util.regex.Pattern;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
-public class Find implements MockitoMatcher<String>, Serializable {
+public class Find implements ArgumentMatcher<String>, Serializable {
 
     private final String regex;
 

File: src/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
 
-public class InstanceOf implements MockitoMatcher<Object>, Serializable {
+public class InstanceOf implements ArgumentMatcher<Object>, Serializable {
 
     private final Class<?> clazz;
 

File: src/org/mockito/internal/matchers/Matches.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
-public class Matches implements MockitoMatcher<Object>, Serializable {
+public class Matches implements ArgumentMatcher<Object>, Serializable {
 
     private final String regex;
 

File: src/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
-public class NotNull implements MockitoMatcher<Object>, Serializable {
+public class NotNull implements ArgumentMatcher<Object>, Serializable {
 
     public static final NotNull NOT_NULL = new NotNull();
 

File: src/org/mockito/internal/matchers/Null.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
-public class Null implements MockitoMatcher<Object>, Serializable {
+public class Null implements ArgumentMatcher<Object>, Serializable {
 
     public static final Null NULL = new Null();
 

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.text.ValuePrinter;
 
 import java.io.Serializable;
 
-public class Same implements MockitoMatcher<Object>, Serializable {
+public class Same implements ArgumentMatcher<Object>, Serializable {
 
     private final Object wanted;
 

File: src/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
-public class StartsWith implements MockitoMatcher<String>, Serializable {
+public class StartsWith implements ArgumentMatcher<String>, Serializable {
 
     private final String prefix;
 

File: src/org/mockito/internal/matchers/VarargCapturingMatcher.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal.matchers;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.exceptions.Reporter;
 
 import java.io.Serializable;
@@ -11,7 +11,7 @@
 import java.util.List;
 
 @SuppressWarnings("unchecked")
-public class VarargCapturingMatcher<T> implements MockitoMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
+public class VarargCapturingMatcher<T> implements ArgumentMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
 
     private final LinkedList<List<T>> arguments = new LinkedList<List<T>>();
 

File: src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -5,11 +5,11 @@
 
 package org.mockito.internal.matchers.apachecommons;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 
 import java.io.Serializable;
 
-public class ReflectionEquals implements MockitoMatcher<Object>, Serializable {
+public class ReflectionEquals implements ArgumentMatcher<Object>, Serializable {
 
     private final Object wanted;
     private final String[] excludeFields;

File: src/org/mockito/internal/matchers/text/MatcherToString.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal.matchers.text;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.util.Decamelizer;
 import org.mockito.internal.util.ObjectMethodsGuru;
 
@@ -21,7 +21,7 @@ class MatcherToString {
      * @param matcher
      * @return
      */
-    static String toString(MockitoMatcher matcher) {
+    static String toString(ArgumentMatcher matcher) {
         ObjectMethodsGuru guru = new ObjectMethodsGuru();
         Class cls = matcher.getClass();
         while(cls != Object.class) {

File: src/org/mockito/internal/progress/ArgumentMatcherStorage.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockito.internal.progress;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.matchers.LocalizedMatcher;
 
 import java.util.List;
 
 @SuppressWarnings("unchecked")
 public interface ArgumentMatcherStorage {
 
-    HandyReturnValues reportMatcher(MockitoMatcher matcher);
+    HandyReturnValues reportMatcher(ArgumentMatcher matcher);
 
     List<LocalizedMatcher> pullLocalizedMatchers();
 

File: src/org/mockito/internal/reporting/PrintSettings.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.reporting;
 
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockito.internal.invocation.ArgumentsProcessor;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.matchers.text.MatchersPrinter;
@@ -43,7 +43,7 @@ public void setMatchersToBeDescribedWithExtraTypeInfo(Integer[] indexesOfMatcher
         this.withTypeInfo = Arrays.asList(indexesOfMatchers);
     }
 
-    public String print(List<MockitoMatcher> matchers, Invocation invocation) {
+    public String print(List<ArgumentMatcher> matchers, Invocation invocation) {
         MatchersPrinter matchersPrinter = new MatchersPrinter();
         String qualifiedName = new MockUtil().getMockName(invocation.getMock()) + "." + invocation.getMethod().getName();
         String invocationString = qualifiedName + matchersPrinter.getArgumentsLine(matchers, this);

File: test/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 
 import org.junit.Test;
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")
@@ -75,7 +75,7 @@ public String toString() {
 
     @Test
     public void orToString() {
-        List<MockitoMatcher> matchers = new ArrayList<MockitoMatcher>();
+        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>();
         matchers.add(new Equals(1));
         matchers.add(new Equals(2));
         assertEquals("or(1, 2)", new Or(matchers).toString());
@@ -88,7 +88,7 @@ public void notToString() {
 
     @Test
     public void andToString() {
-        List<MockitoMatcher> matchers = new ArrayList<MockitoMatcher>();
+        List<ArgumentMatcher> matchers = new ArrayList<ArgumentMatcher>();
         matchers.add(new Equals(1));
         matchers.add(new Equals(2));
         assertEquals("and(1, 2)", new And(matchers).toString());

File: test/org/mockito/internal/matchers/text/MatcherToStringTest.java
Patch:
@@ -1,18 +1,18 @@
 package org.mockito.internal.matchers.text;
 
 import org.junit.Test;
-import org.mockito.MockitoMatcher;
+import org.mockito.ArgumentMatcher;
 import org.mockitoutil.TestBase;
 
 public class MatcherToStringTest extends TestBase {
 
-    static class MatcherWithoutDescription implements MockitoMatcher<Object> {
+    static class MatcherWithoutDescription implements ArgumentMatcher<Object> {
         public boolean matches(Object argument) {
             return false;
         }
     }
 
-    static class MatcherWithDescription implements MockitoMatcher<Object> {
+    static class MatcherWithDescription implements ArgumentMatcher<Object> {
         public boolean matches(Object argument) {
             return false;
         }

File: test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -10,7 +10,6 @@
 import org.junit.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
-import org.mockito.MockitoMatcher;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -31,8 +30,8 @@ public void shouldNotThrowCCE() {
         } catch (ArgumentsAreDifferent e) {}
     }
 
-    private MockitoMatcher<String> isStringWithTextFoo() {
-        return new MockitoMatcher<String>() {
+    private ArgumentMatcher<String> isStringWithTextFoo() {
+        return new ArgumentMatcher<String>() {
             public boolean matches(Object argument) {
                 // casting that should not be thrown:
                 String str = (String) argument;

File: test/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -59,7 +59,7 @@ public void shouldVerifyUsingHamcrestMatcher() {
         }
     }
 
-    @Test
+    //@Test TODO SF not implemented yet
     public void shouldMatchPrimitives() {
         when(mock.intArgumentReturningInt(argThat(new PrimitiveMatcher()))).thenReturn(5);
         assertEquals(5, mock.intArgumentReturningInt(10));

File: src/org/mockito/MockitoMatcher.java
Patch:
@@ -76,6 +76,8 @@ public interface MockitoMatcher<T> {
      * The argument is not using generic type in order to force explicit casting in the implementation.
      * This way it is easier to debug when incompatible arguments are passed to the matchers.
      * You have to trust us on this one.
+     * <p>
+     * See the example in the top level javadoc for {@link MockitoMatcher}
      *
      * @param argument
      *            the argument

File: src/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java
Patch:
@@ -21,8 +21,6 @@ public boolean matches(Object argument) {
 
     public String toString() {
         //TODO SF add unit tests and integ test coverage for describeTo()
-        StringDescription s = new StringDescription();
-        this.matcher.describeTo(s);
-        return s.toString();
+        return StringDescription.toString(matcher);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java
Patch:
@@ -72,10 +72,9 @@ private void assertStateFor(String additionalMatcherName, int subMatchersCount)
     }
 
     private List<MockitoMatcher> popLastArgumentMatchers(int count) {
-        List<MockitoMatcher> result = new LinkedList<MockitoMatcher>();
-        result.addAll(matcherStack.subList(matcherStack.size() - count, matcherStack.size()));
+        LinkedList<MockitoMatcher> result = new LinkedList<MockitoMatcher>();
         for (int i = 0; i < count; i++) {
-            matcherStack.pop();
+            result.addFirst(matcherStack.pop().getMatcher());
         }
         return result;
     }

File: test/org/mockito/internal/invocation/ArgumentsComparatorTest.java
Patch:
@@ -203,7 +203,7 @@ public void shouldMatchAnyVarargEvenIfMatcherIsDecorated() {
         //given
         mock.varargs("1", "2");
         Invocation invocation = getLastInvocation();
-        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));
+        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, asList(AnyVararg.ANY_VARARG));
 
         //when
         boolean match = comparator.argumentsMatch(invocationMatcher, invocation);

File: test/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.mockitoutil.TestBase;
 
 import java.lang.reflect.Method;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -146,7 +147,7 @@ public void should_capture_varargs_as_vararg() throws Exception {
         mock.mixedVarargs(1, "a", "b");
         Invocation invocation = getLastInvocation();
         CapturingMatcher m = new CapturingMatcher();
-        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1), new LocalizedMatcher(m)));
+        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, Arrays.<MockitoMatcher>asList(new Equals(1), m));
 
         //when
         invocationMatcher.captureArgumentsFrom(invocation);
@@ -162,7 +163,7 @@ public void should_capture_arguments_when_args_count_does_NOT_match() throws Exc
         Invocation invocation = getLastInvocation();
 
         //when
-        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));
+        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, asList(AnyVararg.ANY_VARARG));
 
         //then
         invocationMatcher.captureArgumentsFrom(invocation);

File: src/org/mockito/internal/matchers/text/MatchersPrinter.java
Patch:
@@ -34,7 +34,7 @@ private Iterator applyPrintSettings(List<MockitoMatcher> matchers, PrintSettings
             if (matcher instanceof ContainsExtraTypeInfo && printSettings.extraTypeInfoFor(i)) {
                 out.add(new FormattedText(((ContainsExtraTypeInfo) matcher).toStringWithType()));
             } else {
-                out.add(new FormattedText(matcher.toString()));
+                out.add(new FormattedText(MatcherToString.toString(matcher)));
             }
             i++;
         }

File: src/org/mockito/internal/util/Decamelizer.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+//TODO SF move to matchers.text
 public class Decamelizer {
 
 private static final Pattern CAPS = Pattern.compile("([A-Z\\d][^A-Z\\d]*)");

File: src/org/mockito/internal/util/ObjectMethodsGuru.java
Patch:
@@ -12,8 +12,6 @@
 
 public class ObjectMethodsGuru implements Serializable {
 
-    private static final long serialVersionUID = -1286718569065470494L;
-
     public boolean isToString(Method method) {
         return isToString(new DelegatingMethod(method));
     }

File: src/org/mockito/AdditionalMatchers.java
Patch:
@@ -430,7 +430,7 @@ public static <T extends Comparable<T>> T cmpEq(Comparable<T> value) {
      * @return <code>null</code>.
      */
     public static String find(String regex) {
-        return reportMatcher(new Find(regex)).<String>returnNull();
+        return reportMatcher(new Find(regex)).returnNull();
     }
 
     /**

File: src/org/mockito/Matchers.java
Patch:
@@ -61,7 +61,7 @@
  * Example:
  * 
  * <pre class="code"><code class="java">
- *   class ListOfTwoElements extends MockitoMatcher&lt;List&gt; {
+ *   class ListOfTwoElements implements MockitoMatcher&lt;List&gt; {
  *      public boolean matches(Object list) {
  *          return ((List) list).size() == 2;
  *      }

File: src/org/mockito/internal/matchers/And.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 
 @SuppressWarnings("unchecked")
-public class And extends MockitoMatcher implements Serializable {
+public class And implements MockitoMatcher, Serializable {
 
     private final List<MockitoMatcher> matchers;
 
@@ -29,11 +29,11 @@ public boolean matches(Object actual) {
         return true;
     }
 
-    public String describe() {
+    public String toString() {
         StringBuilder out = new StringBuilder();
         out.append("and(");
         for (Iterator<MockitoMatcher> it = matchers.iterator(); it.hasNext();) {
-            out.append(it.next().describe());
+            out.append(it.next().toString());
             if (it.hasNext()) {
                 out.append(", ");
             }

File: src/org/mockito/internal/matchers/Any.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.MockitoMatcher;
 
 @SuppressWarnings("unchecked")
-public class Any extends MockitoMatcher implements Serializable {
+public class Any implements MockitoMatcher, Serializable {
 
     public static final Any ANY = new Any();
 
@@ -21,7 +21,7 @@ public boolean matches(Object actual) {
         return true;
     }
 
-    public String describe() {
+    public String toString() {
         return "<any>";
     }
 }

File: src/org/mockito/internal/matchers/AnyVararg.java
Patch:
@@ -9,15 +9,15 @@
 import java.io.Serializable;
 
 @SuppressWarnings("unchecked")
-public class AnyVararg extends MockitoMatcher implements VarargMatcher, Serializable {
+public class AnyVararg implements MockitoMatcher, VarargMatcher, Serializable {
 
     public static final MockitoMatcher ANY_VARARG = new AnyVararg();
 
     public boolean matches(Object arg) {
         return true;
     }
 
-    public String describe() {
+    public String toString() {
         return "<any>";
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -12,15 +12,15 @@
 import java.util.List;
 
 @SuppressWarnings("unchecked")
-public class CapturingMatcher<T> extends MockitoMatcher<T> implements CapturesArguments, VarargMatcher, Serializable {
+public class CapturingMatcher<T> implements MockitoMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
     
     private final LinkedList<Object> arguments = new LinkedList<Object>();
 
     public boolean matches(Object argument) {
         return true;
     }    
 
-    public String describe() {
+    public String toString() {
         return "<Capturing argument>";
     }
 

File: src/org/mockito/internal/matchers/Contains.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.Serializable;
 
 
-public class Contains extends MockitoMatcher<String> implements Serializable {
+public class Contains implements MockitoMatcher<String>, Serializable {
 
     private final String substring;
 
@@ -22,7 +22,7 @@ public boolean matches(Object actual) {
         return actual != null && ((String) actual).contains(substring);
     }
 
-    public String describe() {
+    public String toString() {
         return "contains(\"" + substring + "\")";
     }
 }

File: src/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.mockito.MockitoMatcher;
 
-public class EndsWith extends MockitoMatcher<String> implements Serializable {
+public class EndsWith implements MockitoMatcher<String>, Serializable {
 
     private final String suffix;
 
@@ -21,7 +21,7 @@ public boolean matches(Object actual) {
         return actual != null && ((String) actual).endsWith(suffix);
     }
 
-    public String describe() {
+    public String toString() {
         return "endsWith(\"" + suffix + "\")";
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.Serializable;
 
-public class EqualsWithDelta extends MockitoMatcher<Number> implements Serializable {
+public class EqualsWithDelta implements MockitoMatcher<Number>, Serializable {
 
     private final Number wanted;
     private final Number delta;
@@ -34,7 +34,7 @@ public boolean matches(Object object) {
                         + delta.doubleValue();
     }
 
-    public String describe() {
+    public String toString() {
         return "eq(" + wanted + ", " + delta + ")";
     }
 }

File: src/org/mockito/internal/matchers/Find.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.mockito.MockitoMatcher;
 
-public class Find extends MockitoMatcher<String> implements Serializable {
+public class Find implements MockitoMatcher<String>, Serializable {
 
     private final String regex;
 
@@ -22,7 +22,7 @@ public boolean matches(Object actual) {
         return actual != null && Pattern.compile(regex).matcher((String) actual).find();
     }
 
-    public String describe() {
+    public String toString() {
         return "find(\"" + regex.replaceAll("\\\\", "\\\\\\\\") + "\")";
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.Serializable;
 
 
-public class InstanceOf extends MockitoMatcher<Object> implements Serializable {
+public class InstanceOf implements MockitoMatcher<Object>, Serializable {
 
     private final Class<?> clazz;
 
@@ -22,7 +22,7 @@ public boolean matches(Object actual) {
         return (actual != null) && clazz.isAssignableFrom(actual.getClass());
     }
 
-    public String describe() {
+    public String toString() {
         return "isA(" + clazz.getName() + ")";
     }
 }

File: src/org/mockito/internal/matchers/Matches.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.Serializable;
 
-public class Matches extends MockitoMatcher<Object> implements Serializable {
+public class Matches implements MockitoMatcher<Object>, Serializable {
 
     private final String regex;
 
@@ -21,7 +21,7 @@ public boolean matches(Object actual) {
         return (actual instanceof String) && ((String) actual).matches(regex);
     }
 
-    public String describe() {
+    public String toString() {
         return "matches(\"" + regex.replaceAll("\\\\", "\\\\\\\\") + "\")";
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/matchers/Not.java
Patch:
@@ -10,7 +10,7 @@
 import java.io.Serializable;
 
 @SuppressWarnings("unchecked")
-public class Not extends MockitoMatcher implements Serializable {
+public class Not implements MockitoMatcher, Serializable {
 
     private final MockitoMatcher first;
 
@@ -22,7 +22,7 @@ public boolean matches(Object actual) {
         return !first.matches(actual);
     }
 
-    public String describe() {
-        return "not(" + first.describe() + ")";
+    public String toString() {
+        return "not(" + first.toString() + ")";
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.Serializable;
 
-public class NotNull extends MockitoMatcher<Object> implements Serializable {
+public class NotNull implements MockitoMatcher<Object>, Serializable {
 
     public static final NotNull NOT_NULL = new NotNull();
 
@@ -20,7 +20,7 @@ public boolean matches(Object actual) {
         return actual != null;
     }
 
-    public String describe() {
+    public String toString() {
         return "notNull()";
     }
 }

File: src/org/mockito/internal/matchers/Null.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.Serializable;
 
-public class Null extends MockitoMatcher<Object> implements Serializable {
+public class Null implements MockitoMatcher<Object>, Serializable {
 
     public static final Null NULL = new Null();
 
@@ -20,7 +20,7 @@ public boolean matches(Object actual) {
         return actual == null;
     }
 
-    public String describe() {
+    public String toString() {
         return "isNull()";
     }
 }

File: src/org/mockito/internal/matchers/Or.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 
 @SuppressWarnings("unchecked")
-public class Or extends MockitoMatcher implements Serializable {
+public class Or implements MockitoMatcher, Serializable {
 
     private final List<MockitoMatcher> matchers;
 
@@ -29,11 +29,11 @@ public boolean matches(Object actual) {
         return false;
     }
 
-    public String describe() {
+    public String toString() {
         //TODO SF here and in other places we should reuse ValuePrinter
         StringBuilder sb = new StringBuilder("or(");
         for (Iterator<MockitoMatcher> it = matchers.iterator(); it.hasNext();) {
-            sb.append(it.next().describe());
+            sb.append(it.next().toString());
             if (it.hasNext()) {
                 sb.append(", ");
             }

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.io.Serializable;
 
-public class Same extends MockitoMatcher<Object> implements Serializable {
+public class Same implements MockitoMatcher<Object>, Serializable {
 
     private final Object wanted;
 
@@ -22,8 +22,7 @@ public boolean matches(Object actual) {
         return wanted == actual;
     }
 
-    public String describe() {
-        //TODO SF we should consider passing some kind of Formatter to the describe() method
+    public String toString() {
         return "same(" + new ValuePrinter().appendValue(wanted).toString() + ")";
     }
 }

File: src/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.Serializable;
 
-public class StartsWith extends MockitoMatcher<String> implements Serializable {
+public class StartsWith implements MockitoMatcher<String>, Serializable {
 
     private final String prefix;
 
@@ -21,7 +21,7 @@ public boolean matches(Object actual) {
         return actual != null && ((String) actual).startsWith(prefix);
     }
 
-    public String describe() {
+    public String toString() {
         return "startsWith(\"" + prefix + "\")";
     }
 }

File: src/org/mockito/internal/matchers/VarargCapturingMatcher.java
Patch:
@@ -11,15 +11,15 @@
 import java.util.List;
 
 @SuppressWarnings("unchecked")
-public class VarargCapturingMatcher<T> extends MockitoMatcher<T> implements CapturesArguments, VarargMatcher, Serializable {
+public class VarargCapturingMatcher<T> implements MockitoMatcher<T>, CapturesArguments, VarargMatcher, Serializable {
 
     private final LinkedList<List<T>> arguments = new LinkedList<List<T>>();
 
     public boolean matches(Object argument) {
         return true;
     }
 
-    public String describe() {
+    public String toString() {
         return "<Capturing variable argument>";
     }
 

File: src/org/mockito/internal/matchers/VarargMatcher.java
Patch:
@@ -7,8 +7,8 @@
 import java.io.Serializable;
 
 /**
- * Informs Mockito that the matcher is intended to capture varargs.
- * TODO SF remove this class from public API
+ * Internal interface that informs Mockito that the matcher is intended to capture varargs.
+ * This information is needed when mockito collects the arguments.
  */
 public interface VarargMatcher extends Serializable {
 }

File: src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -9,7 +9,7 @@
 
 import java.io.Serializable;
 
-public class ReflectionEquals extends MockitoMatcher<Object> implements Serializable {
+public class ReflectionEquals implements MockitoMatcher<Object>, Serializable {
 
     private final Object wanted;
     private final String[] excludeFields;
@@ -23,7 +23,7 @@ public boolean matches(Object actual) {
         return EqualsBuilder.reflectionEquals(wanted, actual, excludeFields);
     }
 
-    public String describe() {
+    public String toString() {
         return "refEq(" + wanted + ")";
     }
 }
\ No newline at end of file

File: test/org/mockito/internal/matchers/ComparableMatchersTest.java
Patch:
@@ -48,6 +48,6 @@ private void test(CompareTo<String> compareTo, boolean lower, boolean higher,
         assertEquals(equals, compareTo.matches("b"));
         assertEquals(higher, compareTo.matches("c"));
 
-        assertEquals(name + "(b)", compareTo.describe());
+        assertEquals(name + "(b)", compareTo.toString());
     }
 }

File: test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java
Patch:
@@ -60,7 +60,7 @@ public void shouldFindSuspiciousMatchers() {
     public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {
         //given
         Equals matcherWithBadDescription = new Equals(20) {
-            public String describe() {
+            public String toString() {
                 return "10";
             }
         };

File: test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -33,7 +33,6 @@ public void shouldNotThrowCCE() {
 
     private MockitoMatcher<String> isStringWithTextFoo() {
         return new MockitoMatcher<String>() {
-            @Override
             public boolean matches(Object argument) {
                 // casting that should not be thrown:
                 String str = (String) argument;

File: mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java
Patch:
@@ -27,7 +27,7 @@ class MockBytecodeGenerator {
     private final Random random;
 
     public MockBytecodeGenerator() {
-        byteBuddy = new ByteBuddy(ClassFileVersion.JAVA_V5)
+        byteBuddy = new ByteBuddy()
                 .withDefaultMethodAttributeAppender(MethodAttributeAppender.ForInstrumentedMethod.INSTANCE)
                 .withAttribute(TypeAttributeAppender.ForSuperType.INSTANCE);
         random = new Random();

File: src/org/mockito/internal/util/reflection/FieldInitializer.java
Patch:
@@ -228,7 +228,7 @@ public int compare(Constructor<?> constructorA, Constructor<?> constructorB) {
             private int countMockableParams(Constructor<?> constructor) {
                 int constructorMockableParamsSize = 0;
                 for (Class<?> aClass : constructor.getParameterTypes()) {
-                    if(mockUtil.isTypeMockable(aClass)){
+                    if(mockUtil.typeMockabilityOf(aClass).mockable()){
                         constructorMockableParamsSize++;
                     }
                 }

File: test/org/mockitoutil/ClassLoaders.java
Patch:
@@ -32,8 +32,8 @@ public static InMemoryClassLoaderBuilder inMemoryClassLoader() {
         return new InMemoryClassLoaderBuilder();
     }
 
-    public static ReachableClassesFinder in(ClassLoader classLoader_without_jUnit) {
-        return new ReachableClassesFinder(classLoader_without_jUnit);
+    public static ReachableClassesFinder in(ClassLoader classLoader) {
+        return new ReachableClassesFinder(classLoader);
     }
 
     public static ClassLoader jdkClassLoader() {

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -15,13 +15,14 @@
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.mock.MockName;
 import org.mockito.plugins.MockMaker;
+import org.mockito.plugins.MockMaker.TypeMockability;
 
 @SuppressWarnings("unchecked")
 public class MockUtil {
 
     private static final MockMaker mockMaker = Plugins.getMockMaker();
 
-    public boolean isTypeMockable(Class<?> type) {
+    public TypeMockability typeMockabilityOf(Class<?> type) {
       return mockMaker.isTypeMockable(type);
     }
 

File: src/org/mockito/internal/util/reflection/FieldInitializer.java
Patch:
@@ -228,7 +228,7 @@ public int compare(Constructor<?> constructorA, Constructor<?> constructorB) {
             private int countMockableParams(Constructor<?> constructor) {
                 int constructorMockableParamsSize = 0;
                 for (Class<?> aClass : constructor.getParameterTypes()) {
-                    if(mockUtil.isTypeMockable(aClass)){
+                    if(mockUtil.typeMockabilityOf(aClass).mockable()){
                         constructorMockableParamsSize++;
                     }
                 }

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyMockMaker.java
Patch:
@@ -24,7 +24,7 @@ public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings
     }
 
     @Override
-    public boolean isTypeMockable(Class<?> type) {
+    public TypeMockability isTypeMockable(Class<?> type) {
         return super.isTypeMockable(type);
     }
 }

File: test/org/mockitoutil/ClassLoaders.java
Patch:
@@ -32,8 +32,8 @@ public static InMemoryClassLoaderBuilder inMemoryClassLoader() {
         return new InMemoryClassLoaderBuilder();
     }
 
-    public static ReachableClassesFinder in(ClassLoader classLoader_without_jUnit) {
-        return new ReachableClassesFinder(classLoader_without_jUnit);
+    public static ReachableClassesFinder in(ClassLoader classLoader) {
+        return new ReachableClassesFinder(classLoader);
     }
 
     public static ClassLoader jdkClassLoader() {

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -16,15 +16,13 @@
 import org.mockito.mock.MockName;
 import org.mockito.plugins.MockMaker;
 
-import java.lang.reflect.Modifier;
-
 @SuppressWarnings("unchecked")
 public class MockUtil {
 
     private static final MockMaker mockMaker = Plugins.getMockMaker();
 
     public boolean isTypeMockable(Class<?> type) {
-      return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());
+      return mockMaker.isTypeMockable(type);
     }
 
     public <T> T createMock(MockCreationSettings<T> settings) {

File: test/org/mockito/internal/matchers/MatchersPrinterTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldDescribeStringMatcher() {
         //when
         String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), new Equals("x")), PrintSettings.verboseMatchers(1));
         //then
-        assertEquals("(1, \"(String) x\");", line); //TODO SF this is awkward, it should be: (String) "x"
+        assertEquals("(1, (String) \"x\");", line);
     }
 
     @Test

File: test/org/mockitoutil/TestBase.java
Patch:
@@ -20,6 +20,7 @@
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.matchers.MatchersPrinter;
 import org.mockito.internal.util.MockUtil;
+import org.mockito.internal.util.text.HamcrestPrinter;
 import org.mockito.invocation.Invocation;
 
 import java.io.ByteArrayOutputStream;
@@ -156,7 +157,7 @@ protected static Invocation invocationOf(Class<?> type, String methodName, RealM
     }
 
     protected static String describe(SelfDescribing m) {
-        return new MatchersPrinter().print(m);
+        return HamcrestPrinter.print(m);
     }
 
     protected boolean isMock(Object o) {

File: test/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.creation;
 
 import org.fest.assertions.Assertions;
 import org.junit.Test;
@@ -27,4 +27,4 @@ public void shouldAllowInlineMockCreation() {
         when(list.get(0)).thenReturn(mock(Set.class));
         assertTrue(list.get(0) instanceof Set);
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/bugs/deepstubs/DeepStubsWronglyReportsSerializationProblemsTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.deepstubs;
 
 import org.junit.Test;
 

File: test/org/mockitousage/bugs/injection/ChildWithSameParentFieldInjectionTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.injection;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -51,4 +51,4 @@ public static class SomeService {
         public void doSomething() {
         }
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/bugs/injection/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.injection;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;

File: test/org/mockitousage/bugs/injection/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.injection;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -69,4 +69,4 @@ class WithNullObjectField{
         Bean injectMePlease;
         Object keepMeNull = null;
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/bugs/injection/Issue353InjectionMightNotHappenInCertainConfigurationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.injection;
 
 
 import org.junit.Test;
@@ -32,4 +32,4 @@ public static class FooService {
         Map<String, String> stringString_that_matches_field = new HashMap<String, String>();
     }
 
-}
\ No newline at end of file
+}

File: test/org/mockitousage/bugs/injection/ParentTestMockInjectionTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.bugs;
+package org.mockitousage.bugs.injection;
 
 import org.junit.Before;
 import org.junit.Ignore;

File: mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java
Patch:
@@ -121,7 +121,7 @@ public interface MockAccess {
         void setMockitoInterceptor(MockMethodInterceptor mockMethodInterceptor);
     }
 
-    public static class InterceptionDispatcher {
+    public static class DispatcherDefaultingToRealMethod {
         public interface FieldGetter<T> {
             T getValue();
         }
@@ -138,7 +138,7 @@ public static Object interceptSuperCallable(@This Object mock,
                                                     @SuperCall(serializableProxy = true) Callable<?> superCall) throws Throwable {
             MockMethodInterceptor interceptor = fieldGetter.getValue();
             if (interceptor == null) {
-                return null;
+                return superCall.call();
             }
             return interceptor.doIntercept(
                     mock,

File: src/org/mockito/Captor.java
Patch:
@@ -22,7 +22,7 @@
  *
  *    &#64;Test public void shouldDoSomethingUseful() {
  *       //...
- *       verify(mock.doStuff(captor.capture()));
+ *       verify(mock).doStuff(captor.capture());
  *       assertEquals("foo", captor.getValue());
  *    }
  * }

File: src/org/mockito/Captor.java
Patch:
@@ -22,7 +22,7 @@
  *
  *    &#64;Test public void shouldDoSomethingUseful() {
  *       //...
- *       verify(mock.doStuff(captor.capture()));
+ *       verify(mock).doStuff(captor.capture());
  *       assertEquals("foo", captor.getValue());
  *    }
  * }

File: test/org/mockitoutil/ClassLoaders.java
Patch:
@@ -358,7 +358,8 @@ private boolean excludes(String qualifiedName, Set<String> packageFilters) {
         }
 
         private String classNameFor(File root, File file) {
-            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.');
+            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).
+                    replace(File.separatorChar, '.');
             return temp.subSequence(0, temp.indexOf(".class")).toString();
         }
 

File: test/org/mockitoutil/ClassLoaders.java
Patch:
@@ -358,7 +358,8 @@ private boolean excludes(String qualifiedName, Set<String> packageFilters) {
         }
 
         private String classNameFor(File root, File file) {
-            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).replace('/', '.');
+            String temp = file.getAbsolutePath().substring(root.getAbsolutePath().length() + 1).
+                    replace(File.separatorChar, '.');
             return temp.subSequence(0, temp.indexOf(".class")).toString();
         }
 

File: test/org/mockito/internal/util/DefaultMockingDetailsTest.java
Patch:
@@ -53,8 +53,8 @@ public void should_report_when_not_a_mockito_mock_on_getMockedType() throws Exce
 
     @Test
     public void should_get_extra_interfaces() throws Exception {
-        mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));
-        assertEquals(setOf(Observer.class, List.class), mockingDetails(bar).getExtraInterfaces());
+        Bar loup = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));
+        assertEquals(setOf(Observer.class, List.class), mockingDetails(loup).getExtraInterfaces());
     }
 
     @Test(expected = NotAMockException.class)

File: src/org/mockito/internal/invocation/CapturesArgumentsFromInvocation.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.mockito.invocation.Invocation;
 
-public interface CapturesArgumensFromInvocation {
+public interface CapturesArgumentsFromInvocation {
     
     void captureArgumentsFrom(Invocation i);
     

File: test/org/mockito/internal/invocation/InvocationMarkerTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldCaptureArguments() {
         InvocationMarker marker = new InvocationMarker();
         Invocation i = new InvocationBuilder().toInvocation();
         final ObjectBox box = new ObjectBox();
-        CapturesArgumensFromInvocation c = new CapturesArgumensFromInvocation() {
+        CapturesArgumentsFromInvocation c = new CapturesArgumentsFromInvocation() {
             public void captureArgumentsFrom(Invocation i) {
                 box.put(i);
             }};

File: test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java
Patch:
@@ -28,6 +28,6 @@ public void shouldMarkActualInvocationsAsVerified() {
         c.check(asList(invocation, invocationTwo), new InvocationMatcher(invocation), 1);
 
         //then
-        Mockito.verify(c.invocationMarker).markVerified(eq(asList(invocation)), any(CapturesArgumensFromInvocation.class));
+        Mockito.verify(c.invocationMarker).markVerified(eq(asList(invocation)), any(CapturesArgumentsFromInvocation.class));
     }
 }

File: src/org/mockito/internal/invocation/CapturesArgumentsFromInvocation.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.mockito.invocation.Invocation;
 
-public interface CapturesArgumensFromInvocation {
+public interface CapturesArgumentsFromInvocation {
     
     void captureArgumentsFrom(Invocation i);
     

File: test/org/mockito/internal/invocation/InvocationMarkerTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldCaptureArguments() {
         InvocationMarker marker = new InvocationMarker();
         Invocation i = new InvocationBuilder().toInvocation();
         final ObjectBox box = new ObjectBox();
-        CapturesArgumensFromInvocation c = new CapturesArgumensFromInvocation() {
+        CapturesArgumentsFromInvocation c = new CapturesArgumentsFromInvocation() {
             public void captureArgumentsFrom(Invocation i) {
                 box.put(i);
             }};

File: test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java
Patch:
@@ -28,6 +28,6 @@ public void shouldMarkActualInvocationsAsVerified() {
         c.check(asList(invocation, invocationTwo), new InvocationMatcher(invocation), 1);
 
         //then
-        Mockito.verify(c.invocationMarker).markVerified(eq(asList(invocation)), any(CapturesArgumensFromInvocation.class));
+        Mockito.verify(c.invocationMarker).markVerified(eq(asList(invocation)), any(CapturesArgumentsFromInvocation.class));
     }
 }

File: src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -111,7 +111,7 @@ private boolean injectMockCandidates(Class<?> awaitingInjectionClazz, Set<Object
     private boolean injectMockCandidatesOnFields(Set<Object> mocks, Object instance, boolean injectionOccurred, List<Field> orderedInstanceFields) {
         for (Iterator<Field> it = orderedInstanceFields.iterator(); it.hasNext(); ) {
             Field field = it.next();
-            Object injected = mockCandidateFilter.filterCandidate(mocks, field, instance).thenInject();
+            Object injected = mockCandidateFilter.filterCandidate(mocks, field, orderedInstanceFields, instance).thenInject();
             if (injected != null) {
                 injectionOccurred |= true;
                 mocks.remove(injected);

File: src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
Patch:
@@ -10,6 +10,7 @@
 
 import java.lang.reflect.Field;
 import java.util.Collection;
+import java.util.List;
 
 /**
  * This node returns an actual injecter which will be either :
@@ -20,7 +21,7 @@
  * </ul>
  */
 public class FinalMockCandidateFilter implements MockCandidateFilter {
-    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) {
+    public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, List<Field> fields, final Object fieldInstance) {
         if(mocks.size() == 1) {
             final Object matchingMock = mocks.iterator().next();
 

File: src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
Patch:
@@ -6,13 +6,14 @@
 
 import java.lang.reflect.Field;
 import java.util.Collection;
+import java.util.List;
 
 public interface MockCandidateFilter {
 
     OngoingInjecter filterCandidate(
             Collection<Object> mocks,
             Field fieldToBeInjected,
-            Object fieldInstance
+            List<Field> fields, Object instance
     );
 
 }

File: src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
Patch:
@@ -17,14 +17,14 @@ public TypeBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;
     }
 
-    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
+    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, List<Field> fields, Object fieldInstance) {
         List<Object> mockTypeMatches = new ArrayList<Object>();
         for (Object mock : mocks) {
             if (field.getType().isAssignableFrom(mock.getClass())) {
                 mockTypeMatches.add(mock);
             }
         }
 
-        return next.filterCandidate(mockTypeMatches, field, fieldInstance);
+        return next.filterCandidate(mockTypeMatches, field, fields, fieldInstance);
     }
 }

File: mockmaker/cglib/test/java/org/mockito/cglibintegration/DeserializeMockFromFile.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockitousage.serialization;
+package org.mockito.cglibintegration;
 
 import org.mockito.Mockito;
 
@@ -57,6 +57,6 @@ private static Object deSerializeObject(String filename) {
         }
         return returnObject;
     }
-   
+
 }
 

File: src/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -79,4 +79,4 @@ public IMockitoConfiguration loadConfiguration() {
             throw new MockitoConfigurationException("Unable to instantiate " + MOCKITO_CONFIGURATION_CLASS_NAME +" class. Does it have a safe, no-arg constructor?", e);
         }
     }
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/configuration/plugins/PluginRegistry.java
Patch:
@@ -10,7 +10,7 @@ class PluginRegistry {
             = new PluginLoader(new DefaultPluginSwitch()).loadPlugin(PluginSwitch.class, DefaultPluginSwitch.class.getName());
 
     private final MockMaker mockMaker
-            = new PluginLoader(pluginSwitch).loadPlugin(MockMaker.class, "org.mockito.internal.creation.cglib.CglibMockMaker");
+            = new PluginLoader(pluginSwitch).loadPlugin(MockMaker.class, "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker");
 
     private final StackTraceCleanerProvider stackTraceCleanerProvider
             = new PluginLoader(pluginSwitch).loadPlugin(StackTraceCleanerProvider.class, "org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider");

File: src/org/mockito/internal/configuration/plugins/Plugins.java
Patch:
@@ -20,7 +20,7 @@ public static StackTraceCleanerProvider getStackTraceCleanerProvider() {
     /**
      * Returns the implementation of the mock maker available for the current runtime.
      *
-     * <p>Returns {@link org.mockito.internal.creation.cglib.CglibMockMaker} if no
+     * <p>Returns default mock maker if no
      * {@link org.mockito.plugins.MockMaker} extension exists or is visible in the current classpath.</p>
      */
     public static MockMaker getMockMaker() {

File: src/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java
Patch:
@@ -8,9 +8,10 @@
 public class DefaultStackTraceCleaner implements StackTraceCleaner {
     public boolean isOut(StackTraceElement e) {
         boolean fromMockObject = e.getClassName().contains("$$EnhancerByMockitoWithCGLIB$$");
+        boolean fromByteBuddyMockObject = e.getClassName().contains("$MockitoMock$");
         boolean fromOrgMockito = e.getClassName().startsWith("org.mockito.");
         boolean isRunner = e.getClassName().startsWith("org.mockito.runners.");
         boolean isInternalRunner = e.getClassName().startsWith("org.mockito.internal.runners.");
-        return (fromMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;
+        return (fromMockObject || fromByteBuddyMockObject || fromOrgMockito) && !isRunner && !isInternalRunner;
     }
 }

File: subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/MyMockMaker.java
Patch:
@@ -1,10 +1,10 @@
 package org.mockitousage.plugins.switcher;
 
-import org.mockito.internal.creation.cglib.CglibMockMaker;
+import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;
 
-public class MyMockMaker extends CglibMockMaker {
+public class MyMockMaker extends ByteBuddyMockMaker {
 
     static ThreadLocal<Object> explosive = new ThreadLocal<Object>();
 

File: test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java
Patch:
@@ -31,7 +31,7 @@ private static URL[] getPossibleClassPathsUrls() {
         return new URL[]{
                 obtainClassPath(),
                 obtainClassPath("org.mockito.Mockito"),
-                obtainClassPath("org.mockito.cglib.proxy.Enhancer")
+                obtainClassPath("net.bytebuddy.ByteBuddy")
         };
     }
 

File: mockmaker/bytebuddy/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java
Patch:
@@ -12,7 +12,7 @@
 public class ByteBuddyMockMakerTest {
 
     @Test
-    @Ignore("missing objenesis report removed")
+    @Ignore("missing objenesis reporting removed")
     public void report_issue_when_trying_to_load_objenesis() throws Exception {
         // given
         ClassLoader classpath_without_objenesis = ClassLoaders.excludingClassLoader()
@@ -42,15 +42,15 @@ public void report_issue_when_trying_to_load_objenesis() throws Exception {
     @Test
     public void instantiate_fine_when_objenesis_on_the_classpath() throws Exception {
         // given
-        ClassLoader classpath_without_objenesis = ClassLoaders.excludingClassLoader()
+        ClassLoader classpath_with_objenesis = ClassLoaders.excludingClassLoader()
                 .withCodeSourceUrlOf(Mockito.class, ByteBuddy.class, ObjenesisStd.class)
                 .build();
         boolean initialize_class = true;
 
         Class<?> mock_maker_class_loaded_fine_until = Class.forName(
                 "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker",
                 initialize_class,
-                classpath_without_objenesis
+                classpath_with_objenesis
         );
 
         // when

File: src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
Patch:
@@ -111,7 +111,7 @@ public int hashCode() {
     public ByteBuddyMockMaker() {
         silentConstructor = makeSilentConstructor();
         byteBuddy = new ByteBuddy(ClassFileVersion.JAVA_V6)
-                .withIgnoredMethods(isBridge())
+//                .withIgnoredMethods(isBridge())
                 .withDefaultMethodAttributeAppender(MethodAttributeAppender.ForInstrumentedMethod.INSTANCE)
                 .withAttribute(TypeAttributeAppender.ForSuperType.INSTANCE);
         random = new Random();

File: test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java
Patch:
@@ -101,7 +101,7 @@ public Object call() throws Exception {
     private static SimplePerRealmReloadingClassLoader.ReloadClassPredicate reloadMockito() {
         return new SimplePerRealmReloadingClassLoader.ReloadClassPredicate() {
             public boolean acceptReloadOf(String qualifiedName) {
-                return (!qualifiedName.contains("org.mockito.cglib") && qualifiedName.contains("org.mockito"));
+                return (!qualifiedName.contains("net.bytebuddy") && qualifiedName.contains("org.mockito"));
             }
         };
     }

File: test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java
Patch:
@@ -31,7 +31,7 @@ private static URL[] getPossibleClassPathsUrls() {
         return new URL[]{
                 obtainClassPath(),
                 obtainClassPath("org.mockito.Mockito"),
-                obtainClassPath("org.mockito.cglib.proxy.Enhancer")
+                obtainClassPath("net.bytebuddy.ByteBuddy")
         };
     }
 

File: src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java
Patch:
@@ -157,7 +157,7 @@ private <T> Class<? extends T> makeMock(Class<T> mockType,
         if (acrossClassLoaderSerialization) {
             builder = builder.defineMethod("writeReplace", Object.class, Collections.<Class<?>>emptyList(), MemberVisibility.PRIVATE)
                     .throwing(ObjectStreamException.class)
-                    .intercept(MethodDelegation.to(MethodDelegation.to(MethodInterceptor.ForWriteReplace.class)));
+                    .intercept(MethodDelegation.to(MethodInterceptor.ForWriteReplace.class));
         }
         Class<?>[] allMockedTypes = new Class<?>[interfaces.size() + 1];
         allMockedTypes[0] = mockType;
@@ -172,7 +172,7 @@ private <T> Class<? extends T> makeMock(Class<T> mockType,
 
     private String nameFor(Class<?> type) {
         String typeName = type.getName();
-        if (typeName.startsWith("java.") || type.getPackage().isSealed()) {
+        if (typeName.startsWith("java.") || (type.getPackage() != null && type.getPackage().isSealed())) {
             typeName = "codegen." + typeName;
         }
         return String.format("%s$%s$%d", typeName, "MockitoMock", Math.abs(random.nextInt()));

File: src/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java
Patch:
@@ -10,12 +10,13 @@
 import org.mockito.invocation.Location;
 import org.mockito.invocation.StubInfo;
 
+import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.concurrent.Callable;
 
 public class InterceptedInvocation implements Invocation, VerificationAwareInvocation {
 
-    public static interface SuperMethod {
+    public static interface SuperMethod extends Serializable {
 
         static enum IsIllegal implements SuperMethod {
 

File: src/org/mockito/internal/creation/bytebuddy/MethodInterceptor.java
Patch:
@@ -34,7 +34,7 @@ public MethodInterceptor(InternalMockHandler handler,
     public Object interceptSuperCallable(@This Object mock,
                                          @Origin Method method,
                                          @AllArguments Object[] arguments,
-                                         @SuperCall Callable<?> superCall) throws Throwable {
+                                         @SuperCall(serializableProxy = true) Callable<?> superCall) throws Throwable {
         return doIntercept(mock, method, arguments, new InterceptedInvocation.SuperMethod.FromCallable(superCall));
     }
 
@@ -43,7 +43,7 @@ public Object interceptSuperCallable(@This Object mock,
     public Object interceptDefaultCallable(@This Object mock,
                                            @Origin Method method,
                                            @AllArguments Object[] arguments,
-                                           @DefaultCall Callable<?> superCall) throws Throwable {
+                                           @DefaultCall(serializableProxy = true) Callable<?> superCall) throws Throwable {
         return doIntercept(mock, method, arguments, new InterceptedInvocation.SuperMethod.FromCallable(superCall));
     }
 

File: src/org/mockito/internal/verification/VerificationOverTimeImpl.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockito.internal.util.Timer;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
@@ -89,7 +88,7 @@ public void verify(VerificationData data) {
             } catch (MockitoAssertionError e) {
                 error = handleVerifyException(e);
             }
-            catch (ArgumentsAreDifferent e) {
+            catch (AssertionError e) {
                 error = handleVerifyException(e);
             }
         }

File: src/org/mockito/internal/verification/VerificationOverTimeImpl.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockito.internal.util.Timer;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
@@ -89,7 +88,7 @@ public void verify(VerificationData data) {
             } catch (MockitoAssertionError e) {
                 error = handleVerifyException(e);
             }
-            catch (ArgumentsAreDifferent e) {
+            catch (AssertionError e) {
                 error = handleVerifyException(e);
             }
         }

File: buildSrc/src/main/groovy/org/mockito/release/version/Version.java
Patch:
@@ -10,7 +10,7 @@ public class Version {
     /**
      * Provides instance of version file
      */
-    VersionFile versionFile(File versionFile) {
+    public static VersionFile versionFile(File versionFile) {
         return new DefaultVersionFile(versionFile);
     }
 }

File: buildSrc/src/main/groovy/org/mockito/release/version/VersionBumper.java
Patch:
@@ -5,6 +5,9 @@
 
 class VersionBumper {
 
+    /**
+     * Increments 'patch' element of the version of provided version, e.g. 1.0.0 -> 1.0.1
+     */
     String incrementVersion(String version) {
         Pattern pattern = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)(-(\\w+)){0,1}");
         Matcher matcher = pattern.matcher(version);

File: src/org/mockito/internal/matchers/Any.java
Patch:
@@ -14,7 +14,7 @@
 public class Any extends ArgumentMatcher implements Serializable {
 
     private static final long serialVersionUID = -4062420125651019029L;
-    public static final Any ANY = new Any();    
+    public static final Any ANY = new Any();
     
     private Any() {}
     

File: test/org/mockitousage/IMethods.java
Patch:
@@ -219,4 +219,6 @@ public interface IMethods {
     int toIntPrimitive(Integer i);
 
     Integer toIntWrapper(int i);
+
+    String forObject(Object object);
 }
\ No newline at end of file

File: test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldAnyXMatchersAcceptNull() {
     }
     
     @Test
-    public void shouldAnyPrimiteWraperMatchersAcceptNull() {
+    public void shouldAcceptNullsInAllPrimitiveWrapperAnyMatchers() {
         when(mock.forInteger(anyInt())).thenReturn("0");
         when(mock.forCharacter(anyChar())).thenReturn("1");
         when(mock.forShort(anyShort())).thenReturn("2");

File: src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -84,8 +84,8 @@ protected void registerTypeVariablesOn(Type classType) {
     }
 
     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
-        for (TypeVariable typeVariable : typeParameters) {
-            registerTypeVariableIfNotPresent(typeVariable);
+        for (TypeVariable type : typeParameters) {
+            registerTypeVariableIfNotPresent(type);
         }
     }
 
@@ -376,6 +376,7 @@ private void readTypeVariables() {
             for (Type type : typeVariable.getBounds()) {
                 registerTypeVariablesOn(type);
             }
+            registerTypeParametersOn(new TypeVariable[] { typeVariable });
             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
         }
 

File: test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
Patch:
@@ -7,6 +7,7 @@
 import static org.fest.assertions.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom;
+
 import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -17,9 +18,9 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import org.junit.Test;
 
-@SuppressWarnings("unused")
 public class GenericMetadataSupportTest {
   
     interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
@@ -62,7 +63,6 @@ public void can_get_raw_type_from_Class() throws Exception {
         assertThat(inferFrom(StringList.class).rawType()).isEqualTo(StringList.class);
     }
 
-
     @Test
     public void can_get_raw_type_from_ParameterizedType() throws Exception {
         assertThat(inferFrom(ListOfAnyNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);

File: src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -84,8 +84,8 @@ protected void registerTypeVariablesOn(Type classType) {
     }
 
     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
-        for (TypeVariable typeVariable : typeParameters) {
-            registerTypeVariableIfNotPresent(typeVariable);
+        for (TypeVariable type : typeParameters) {
+            registerTypeVariableIfNotPresent(type);
         }
     }
 
@@ -376,6 +376,7 @@ private void readTypeVariables() {
             for (Type type : typeVariable.getBounds()) {
                 registerTypeVariablesOn(type);
             }
+            registerTypeParametersOn(new TypeVariable[] { typeVariable });
             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
         }
 

File: test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java
Patch:
@@ -7,6 +7,7 @@
 import static org.fest.assertions.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom;
+
 import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
@@ -17,9 +18,9 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import org.junit.Test;
 
-@SuppressWarnings("unused")
 public class GenericMetadataSupportTest {
   
     interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
@@ -62,7 +63,6 @@ public void can_get_raw_type_from_Class() throws Exception {
         assertThat(inferFrom(StringList.class).rawType()).isEqualTo(StringList.class);
     }
 
-
     @Test
     public void can_get_raw_type_from_ParameterizedType() throws Exception {
         assertThat(inferFrom(ListOfAnyNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);

File: src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -84,8 +84,8 @@ protected void registerTypeVariablesOn(Type classType) {
     }
 
     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
-        for (TypeVariable typeVariable : typeParameters) {
-            registerTypeVariableIfNotPresent(typeVariable);
+        for (TypeVariable type : typeParameters) {
+            registerTypeVariableIfNotPresent(type);
         }
     }
 
@@ -376,6 +376,7 @@ private void readTypeVariables() {
             for (Type type : typeVariable.getBounds()) {
                 registerTypeVariablesOn(type);
             }
+            registerTypeParametersOn(new TypeVariable[] { typeVariable });
             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
         }
 

File: src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -76,7 +76,7 @@ protected void registerTypeVariablesOn(Type classType) {
 
             if (actualTypeArgument instanceof WildcardType) {
                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));
-            } else {
+            } else if (typeParameter != actualTypeArgument) {
                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);
             }
             // logger.log("For '" + parameterizedType + "' found type variable : { '" + typeParameter + "(" + System.identityHashCode(typeParameter) + ")" + "' : '" + actualTypeArgument + "(" + System.identityHashCode(typeParameter) + ")" + "' }");

File: src/org/mockito/junit/MockitoJUnitRule.java
Patch:
@@ -13,6 +13,7 @@
  * @see MockitoJUnit
  * @since 1.10.6
  */
+@Deprecated
 public class MockitoJUnitRule implements MethodRule, MockitoRule {
     //MethodRule is undeprecated in latest JUnit
     private final JUnitRule jUnitRule;

File: src/org/mockito/MockingDetails.java
Patch:
@@ -14,7 +14,6 @@
  *
  * @since 1.9.5
  */
-@Incubating
 public interface MockingDetails {
     
     /**

File: src/org/mockito/Mockito.java
Patch:
@@ -1196,7 +1196,6 @@ public static <T> T mock(Class<T> classToMock, String name) {
      * @return A {@link org.mockito.MockingDetails} instance.
      * @since 1.9.5
      */
-    @Incubating
     public static MockingDetails mockingDetails(Object toInspect) {
         return MOCKITO_CORE.mockingDetails(toInspect);
     }

File: src/org/mockito/exceptions/stacktrace/StackTraceCleaner.java
Patch:
@@ -1,7 +1,5 @@
 package org.mockito.exceptions.stacktrace;
 
-import org.mockito.Incubating;
-
 /**
  * Decides if particular StackTraceElement is excluded from the human-readable stack trace output.
  * Mockito stack trace filtering mechanism uses this information.
@@ -16,7 +14,6 @@
  * See the default implementation: {@link org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner}.
  *
  */
-@Incubating
 public interface StackTraceCleaner {
 
     /**

File: src/org/mockito/internal/util/reflection/Fields.java
Patch:
@@ -4,10 +4,9 @@
  */
 package org.mockito.internal.util.reflection;
 
-import org.mockito.Incubating;
 import org.mockito.internal.util.Checks;
-import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockito.internal.util.collections.ListUtil;
+import org.mockito.internal.util.collections.ListUtil.Filter;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
@@ -19,7 +18,6 @@
  *
  * Code is very new and might need rework.
  */
-@Incubating
 public abstract class Fields {
 
     /**

File: src/org/mockito/invocation/DescribedInvocation.java
Patch:
@@ -5,12 +5,10 @@
 package org.mockito.invocation;
 
 import org.mockito.exceptions.PrintableInvocation;
-import org.mockito.Incubating;
 
 /**
  * Provides information about the invocation, specifically a human readable description and the location.
  */
-@Incubating
 public interface DescribedInvocation extends PrintableInvocation {
 
     /**

File: src/org/mockito/invocation/Invocation.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.invocation;
 
-import org.mockito.Incubating;
-
 /**
  * A method call on a mock object. Contains all information and state needed for the Mockito framework to operate.
  * This API might be useful for developers who extend Mockito.
@@ -16,7 +14,6 @@
  *
  * @since 1.9.5
  */
-@Incubating
 public interface Invocation extends InvocationOnMock, DescribedInvocation {
 
     /**

File: src/org/mockito/invocation/Location.java
Patch:
@@ -4,12 +4,9 @@
  */
 package org.mockito.invocation;
 
-import org.mockito.Incubating;
-
 /**
  * Describes the location of something in the source code.
  */
-@Incubating
 public interface Location {
 
     /**

File: src/org/mockito/invocation/StubInfo.java
Patch:
@@ -4,12 +4,9 @@
  */
 package org.mockito.invocation;
 
-import org.mockito.Incubating;
-
 /**
  * The information about stubbing, for example the location of stubbing.
  */
-@Incubating
 public interface StubInfo {
 
     /**

File: src/org/mockito/mock/MockCreationSettings.java
Patch:
@@ -15,7 +15,6 @@
 /**
  * Informs about the mock settings. An immutable view of {@link org.mockito.MockSettings}.
  */
-@Incubating
 public interface MockCreationSettings<T> {
 
     /**

File: src/org/mockito/plugins/MockMaker.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.plugins;
 
-import org.mockito.Incubating;
 import org.mockito.invocation.MockHandler;
 import org.mockito.mock.MockCreationSettings;
 
@@ -35,7 +34,6 @@
  * @see org.mockito.invocation.MockHandler
  * @since 1.9.5
  */
-@Incubating
 public interface MockMaker {
 
     /**

File: src/org/mockito/plugins/StackTraceCleanerProvider.java
Patch:
@@ -1,6 +1,5 @@
 package org.mockito.plugins;
 
-import org.mockito.Incubating;
 import org.mockito.exceptions.stacktrace.StackTraceCleaner;
 
 /**
@@ -13,7 +12,6 @@
  * <p>
  * See the default implementation: {@link org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider}
  */
-@Incubating
 public interface StackTraceCleanerProvider {
 
     /**

File: buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java
Patch:
@@ -33,7 +33,7 @@ public void perform() {
 
     private static void rollback(List<ReleaseStep> attempted) {
         System.out.println("Release failed. Rolling back " + attempted.size() + " release steps.");
-        LinkedList<ReleaseStep> targets = new LinkedList<ReleaseStep>();
+        LinkedList<ReleaseStep> targets = new LinkedList<ReleaseStep>(attempted);
         while(!targets.isEmpty()) {
             ReleaseStep s = targets.removeLast();
             Operation r = s.getRollback();

File: test/org/mockito/internal/configuration/ClassPathLoaderTest.java
Patch:
@@ -4,11 +4,12 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.mockitousage.IMethods;
+import org.mockitoutil.TestBase;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
-public class ClassPathLoaderTest {
+public class ClassPathLoaderTest extends TestBase {
 
     @Test
     public void shouldReadConfigurationClassFromClassPath() {

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -66,7 +66,9 @@ public boolean isMock(Object mock) {
     }
 
     public boolean isSpy(Object mock) {
-        return isMockitoMock(mock) && getMockSettings(mock).getSpiedInstance() != null;
+        return isMockitoMock(mock) &&
+        		(getMockSettings(mock).getSpiedInstance() != null
+        		    || getMockSettings(mock).isUsingConstructor());
     }
 
     private <T> boolean isMockitoMock(T mock) {

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseIncorrectAnnotationUsage.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockitousage.testng.failuretests;
 
+import org.mockito.Mock;
 import org.mockito.Spy;
 import org.mockito.testng.MockitoTestNGListener;
 import org.testng.annotations.Listeners;
@@ -15,6 +16,6 @@
 @Listeners(MockitoTestNGListener.class)
 @Test(description = "Always failing, shouldn't be listed in 'mockito-testng.xml'")
 public class FailingOnPurposeBecauseIncorrectAnnotationUsage {
-    @Spy Map spy_cant_initialize_interface_fields;
+    @Mock @Spy Map cant_mock_and_spy_at_the_same_time;
     @Test public void dummy_test_method() throws Exception { }
 }

File: test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
Patch:
@@ -131,7 +131,8 @@ public void should_delegate_all_MockHandlerInterface_to_the_parameterized_MockHa
         verify(mockHandler).setAnswersForStubbing(anyList());
     }
 
-    private static class CustomListener implements InvocationListener {
+    private static class CustomListener implements InvocationListener {
+    	CustomListener() {}
         public void reportInvocation(MethodInvocationReport methodInvocationReport) {
             // nop
         }

File: test/org/mockitousage/basicapi/MockingDetailsTest.java
Patch:
@@ -16,7 +16,8 @@
 
 public class MockingDetailsTest {
     
-    private static class TestClass{
+    private static class TestClass{
+    	TestClass() {}
     }
 
     @Mock

File: src/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -36,7 +36,7 @@ public class CallsRealMethods implements Answer<Object>, Serializable {
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
     	if (Modifier.isAbstract(invocation.getMethod().getModifiers())) {
-    		return Answers.CALLS_REAL_METHODS.get().answer(invocation);
+    		return Answers.RETURNS_DEFAULTS.get().answer(invocation);
     	}
         return invocation.callRealMethod();
     }

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java
Patch:
@@ -6,12 +6,12 @@
 
 class Improvement {
 
-    private final int id;
+    private final long id;
     private final String title;
     private final String url;
     private final Collection<String> labels;
 
-    public Improvement(int id, String title, String url, Collection<String> labels) {
+    public Improvement(long id, String title, String url, Collection<String> labels) {
         this.id = id;
         this.title = title;
         this.url = url;

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java
Patch:
@@ -8,7 +8,7 @@ class DefaultContributionSet implements ContributionSet {
     private final Map<String, Contribution> contributions = new HashMap<String, Contribution>();
     private final Collection<Commit> commits = new LinkedList<Commit>();
     private final Predicate<Commit> ignoreCommit;
-    private final Collection<String> tickets = new LinkedList<String>();
+    private final Set<String> tickets = new LinkedHashSet<String>();
 
     public DefaultContributionSet(Predicate<Commit> ignoredCommit) {
         this.ignoreCommit = ignoredCommit;

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubImprovementsProvider.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.*;
 import java.util.regex.Pattern;
 
-class GitHubImprovementsProvider implements ImprovementSetProvider {
+class GitHubImprovementsProvider implements ImprovementsProvider {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(GitHubImprovementsProvider.class);
     private final GitHubAuthToken authToken;

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvements.java
Patch:
@@ -10,7 +10,7 @@ public class Improvements {
      *
      * @param authTokenEnvVarName name of the env var that holds the token
      */
-    public static ImprovementSetProvider getGitHubProvider(final String authTokenEnvVarName) {
+    public static ImprovementsProvider getGitHubProvider(final String authTokenEnvVarName) {
         return new GitHubImprovementsProvider(new GitHubAuthToken(authTokenEnvVarName));
     }
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/improvements/ImprovementsProvider.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.mockito.release.notes.vcs.ContributionSet;
 
-public interface ImprovementSetProvider {
+public interface ImprovementsProvider {
 
     ImprovementSet getImprovements(ContributionSet contributions);
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/ContributionSet.java
Patch:
@@ -1,11 +1,13 @@
 package org.mockito.release.notes.vcs;
 
+import org.mockito.release.notes.util.HumanReadable;
+
 import java.util.Collection;
 
 /**
  * A set of contributions
  */
-public interface ContributionSet {
+public interface ContributionSet extends HumanReadable {
 
     /**
      * all commits in given contribution set, spanning all authors

File: buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Vcs.java
Patch:
@@ -10,7 +10,7 @@ public class Vcs {
     /**
      * Provides means to get contributions.
      */
-    public static ContributionsProvider getContributionsProvider(ProcessRunner runner) {
+    public static ContributionsProvider getGitProvider(ProcessRunner runner) {
         return new GitContributionsProvider(new GitLogProvider(runner), new IgnoreCiSkip());
     }
 }

File: buildSrc/src/main/groovy/org/mockito/release/notes/ReleaseNotesBuilder.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.release.notes;
 
+import org.mockito.release.notes.vcs.ContributionSet;
+
 import java.io.File;
 
 public interface ReleaseNotesBuilder {

File: src/org/mockito/Mockito.java
Patch:
@@ -1398,7 +1398,9 @@ public static <T> T spy(T object) {
      * @param classToSpy the class to spy
      * @param <T> type of the spy
      * @return a spy of the provided class
+     * @since 1.10.12
      */
+    @Incubating
     public static <T> T spy(Class<T> classToSpy) {
         return MOCKITO_CORE.mock(classToSpy, withSettings()
                 .useConstructor()

File: test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Patch:
@@ -7,6 +7,7 @@ public class ConstructorInstantiatorTest extends TestBase {
 
     static class SomeClass {}
     class SomeInnerClass {}
+    class ChildOfThis extends ConstructorInstantiatorTest {}
     static class SomeClass2 {
         SomeClass2(String x) {}
     }
@@ -17,6 +18,7 @@ static class SomeClass2 {
 
     @Test public void creates_instances_of_inner_classes() {
         assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
+        assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
     }
 
     @Test public void explains_when_constructor_cannot_be_found() {

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -172,7 +172,9 @@ private static <T> CreationSettings<T> validatedSettings(Class<T> typeToMock, Cr
 //        validator.validateDelegatedInstance(classToMock, settings.getDelegatedInstance());
 
         validator.validateSerializable(typeToMock, source.isSerializable());
+        validator.validateConstructorUse(source.isUsingConstructor(), source.getSerializableMode());
 
+        //TODO SF - I don't think we really need CreationSettings type
         CreationSettings<T> settings = new CreationSettings<T>(source);
         settings.setMockName(new MockNameImpl(source.getName(), typeToMock));
         settings.setTypeToMock(typeToMock);

File: test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
Patch:
@@ -24,7 +24,8 @@ static class SomeClass2 {
             new ConstructorInstantiator(null).newInstance(SomeClass2.class);
             fail();
         } catch (InstantationException e) {
-            assertEquals("Please ensure it has parameter-less constructor.", e.getMessage());
+            assertEquals("Unable to create mock instance of 'SomeClass2'.\n" +
+                    "Please ensure it has parameter-less constructor.", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -22,11 +22,13 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.invocation.Location;
 import org.mockito.listeners.InvocationListener;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
+
 import static org.mockito.internal.reporting.Pluralizer.pluralize;
 import static org.mockito.internal.util.StringJoiner.join;
 

File: src/org/mockito/internal/creation/instance/Instantiator.java
Patch:
@@ -8,5 +8,6 @@ public interface Instantiator {
     /**
      * Creates instance of given class
      */
-    <T> T newInstance(Class<T> cls);
+    <T> T newInstance(Class<T> cls) throws InstantationException;
+
 }

File: test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.withSettings;
 
-public class CreatingMocksWithConstructor extends TestBase {
+public class CreatingMocksWithConstructorTest extends TestBase {
 
     static abstract class AbstractMessage {
         private final String message;

File: src/org/mockito/internal/creation/instance/InstantiatorProvider.java
Patch:
@@ -8,7 +8,7 @@ public class InstantiatorProvider {
 
     public Instantiator getInstantiator(MockCreationSettings settings) {
         if (settings.isUsingConstructor()) {
-            return new ConstructorInstantiator();
+            return new ConstructorInstantiator(settings.getOuterClassInstance());
         } else {
             return INSTANCE;
         }

File: test/org/mockito/internal/creation/cglib/ClassImposterizerTest.java
Patch:
@@ -70,7 +70,7 @@ public void shouldUseAnicilliaryTypes() {
 
     @Test
     public void shouldCreateClassByConstructor() {
-        imposterizer = new ClassImposterizer(new ConstructorInstantiator());
+        imposterizer = new ClassImposterizer(new ConstructorInstantiator(null));
         OtherClass mock = imposterizer.imposterise(new MethodInterceptorStub(), OtherClass.class);
         assertNotNull(mock);
     }

File: src/org/mockito/internal/creation/cglib/AcrossJVMSerializationFeature.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockito.Incubating;
 import org.mockito.exceptions.base.MockitoSerializationIssue;
 import org.mockito.internal.creation.instance.InstantiatorProvider;
+import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.reflection.FieldSetter;
 import org.mockito.mock.MockCreationSettings;
@@ -303,8 +304,8 @@ protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, Clas
             // ClassImposterizer.INSTANCE.canImposterise(typeToMock);
 
             // create the Mockito mock class before it can even be deserialized
-            //TODO SF unify creation of imposterizer, constructor code duplicated
-            ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator());
+            //TODO SF unify creation of imposterizer, constructor code duplicated, pulling in CreationSettings internal class
+            ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator(new CreationSettings()));
             imposterizer.setConstructorsAccessible(typeToMock, true);
             Class<?> proxyClass = imposterizer.createProxyClass(
                     typeToMock,

File: src/org/mockito/internal/creation/cglib/CglibMockMaker.java
Patch:
@@ -21,7 +21,7 @@ public final class CglibMockMaker implements MockMaker {
     public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {
         InternalMockHandler mockitoHandler = cast(handler);
         new AcrossJVMSerializationFeature().enableSerializationAcrossJVM(settings);
-        return new ClassImposterizer(new InstantiatorProvider().getInstantiator()).imposterise(
+        return new ClassImposterizer(new InstantiatorProvider().getInstantiator(settings)).imposterise(
                 new MethodInterceptorFilter(mockitoHandler, settings), settings.getTypeToMock(), settings.getExtraInterfaces());
     }
 

File: test/org/mockito/internal/creation/cglib/ClassImposterizerTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.creation.instance.ConstructorInstantiator;
 import org.mockito.internal.creation.instance.InstantiatorProvider;
+import org.mockito.internal.creation.settings.CreationSettings;
 import org.mockitoutil.TestBase;
 
 import java.lang.reflect.Method;
@@ -20,7 +21,7 @@
 @SuppressWarnings("unchecked")
 public class ClassImposterizerTest extends TestBase {
 
-    ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator());
+    ClassImposterizer imposterizer = new ClassImposterizer(new InstantiatorProvider().getInstantiator(new CreationSettings()));
 
     @Test
     public void shouldCreateMockFromInterface() throws Exception {

File: buildSrc/src/main/groovy/org/mockito/release/comparison/ZipComparator.java
Patch:
@@ -12,7 +12,7 @@ class ZipComparator {
     private Closure<File> file2;
 
     ZipComparator setPair(Closure<File> file1, Closure<File> file2) {
-        notNull(file1, "source jar file to compare", file2, "source jar file to compare");
+        notNull(file1, "zip/jar file to compare", file2, "zip/jar file to compare");
         this.file1 = file1;
         this.file2 = file2;
         return this;
@@ -21,7 +21,7 @@ ZipComparator setPair(Closure<File> file1, Closure<File> file2) {
     Result compareFiles() {
         final File file1 = this.file1.call();
         final File file2 = this.file2.call();
-        notNull(file1, "source jar file to compare", file2, "source jar file to compare");
+        notNull(file1, "zip/jar file to compare", file2, "zip/jar file to compare");
 
         FileHasher hasher = new FileHasher();
         final byte[] hash1 = hasher.hash(file1);

File: src/org/mockito/internal/creation/cglib/SerializableNoOp.java
Patch:
@@ -14,7 +14,7 @@
  */
 class SerializableNoOp implements NoOp, Serializable {
 
-  private static final long serialVersionUID = 7434976328690189159L;
-  public static final Callback SERIALIZABLE_INSTANCE = new SerializableNoOp();
+    private static final long serialVersionUID = 7434976328690189159L;
+    public static final Callback SERIALIZABLE_INSTANCE = new SerializableNoOp();
 
-}
+}
\ No newline at end of file

File: src/org/mockito/internal/creation/cglib/AcrossJVMSerializationFeature.java
Patch:
@@ -263,9 +263,9 @@ private Object readResolve() throws ObjectStreamException {
      * </p>
      *
      * <p>
-     *     When this marker is found, {@link ClassImposterizer} methods are being used to create the mock class.
+     *     When this marker is found, {@link org.mockito.internal.creation.cglib.ClassImposterizer} methods are being used to create the mock class.
      *     <em>Note that behind the <code>ClassImposterizer</code> there is CGLIB and the
-     *     {@link SearchingClassLoader} that will look if this enhanced class has
+     *     {@link org.mockito.internal.creation.util.SearchingClassLoader} that will look if this enhanced class has
      *     already been created in an accessible classloader ; so basically this code trusts the ClassImposterizer
      *     code.</em>
      * </p>

File: src/org/mockito/internal/creation/cglib/ClassImposterizer.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.cglib.proxy.*;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.creation.instance.Instantiator;
+import org.mockito.internal.creation.util.SearchingClassLoader;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;

File: src/org/mockito/internal/creation/cglib/DelegatingMockitoMethodProxy.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.creation.cglib;
 
 import org.mockito.cglib.proxy.MethodProxy;
+import org.mockito.internal.creation.util.MockitoMethodProxy;
 
 class DelegatingMockitoMethodProxy implements MockitoMethodProxy {
 

File: src/org/mockito/internal/creation/cglib/MethodInterceptorFilter.java
Patch:
@@ -9,10 +9,11 @@
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.creation.DelegatingMethod;
+import org.mockito.internal.creation.util.MockitoMethodProxy;
 import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.MockitoMethod;
 import org.mockito.internal.invocation.SerializableMethod;
-import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;
+import org.mockito.internal.invocation.realmethod.CleanTraceRealMethod;
 import org.mockito.internal.progress.SequenceNumber;
 import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.Invocation;
@@ -53,7 +54,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
         
         MockitoMethod mockitoMethod = createMockitoMethod(method);
         
-        FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);
+        CleanTraceRealMethod realMethod = new CleanTraceRealMethod(mockitoMethodProxy);
         Invocation invocation = new InvocationImpl(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);
         return handler.handle(invocation);
     }

File: src/org/mockito/internal/creation/cglib/SerializableMockitoMethodProxy.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.creation.cglib;
 
 import org.mockito.cglib.proxy.MethodProxy;
+import org.mockito.internal.creation.util.MockitoMethodProxy;
 import org.mockito.internal.util.reflection.Whitebox;
 
 import java.io.Serializable;

File: src/org/mockito/internal/creation/util/MockitoMethodProxy.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.creation.cglib;
+package org.mockito.internal.creation.util;
 
 //TODO SF Replace with RealMethod and get rid of (possibly).
 public interface MockitoMethodProxy {

File: src/org/mockito/internal/creation/util/SearchingClassLoader.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.creation.cglib;
+package org.mockito.internal.creation.util;
 
 import static java.lang.Thread.*;
 
@@ -12,7 +12,7 @@
 /**
  * Inspired on jMock (thanks jMock guys!!!)
  */
-class SearchingClassLoader extends ClassLoader {
+public class SearchingClassLoader extends ClassLoader {
     private final ClassLoader nextToSearch;
     
     public SearchingClassLoader(ClassLoader parent, ClassLoader nextToSearch) {

File: test/org/mockito/internal/creation/cglib/MethodInterceptorFilterTest.java
Patch:
@@ -4,13 +4,13 @@
  */
 package org.mockito.internal.creation.cglib;
 
-import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.creation.DelegatingMethod;
 import org.mockito.internal.creation.MockSettingsImpl;
+import org.mockito.internal.creation.util.MockitoMethodProxy;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.MockitoMethod;

File: src/org/mockito/internal/creation/cglib/MockitoMethodProxy.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.creation.cglib;
 
+//TODO SF Replace with RealMethod and get rid of (possibly).
 public interface MockitoMethodProxy {
     Object invokeSuper(Object target, Object[] arguments) throws Throwable;
 }
\ No newline at end of file

File: src/org/mockito/MockSettings.java
Patch:
@@ -176,7 +176,7 @@ public interface MockSettings extends Serializable {
      *
      * @param mode serialization mode
      * @return settings instance so that you can fluently specify other settings
-     * @since 1.9.8
+     * @since 1.10.0
      */
     MockSettings serializable(SerializableMode mode);
 

File: src/org/mockito/Mockito.java
Patch:
@@ -59,7 +59,7 @@
  *      <a href="#26">26. Mocking details (Since 1.9.5)</a><br/>
  *      <a href="#27">27. Delegate calls to real instance (Since 1.9.5)</a><br/>
  *      <a href="#28">28. <code>MockMaker</code> API (Since 1.9.5)</a><br/>
- *      <a href="#29">29. BDD style verification (Since 1.9.8)</a><br/>
+ *      <a href="#29">29. (new) BDD style verification (Since 1.10.0)</a><br/>
  * </b>
  *
  * <p>
@@ -935,7 +935,7 @@
  *
  *
  *
- * <h3 id="29">29. <a class="meaningful_link" href="#BDD_behavior_verification">BDD style verification</a> (Since 1.9.8)</h3>
+ * <h3 id="29">29. <a class="meaningful_link" href="#BDD_behavior_verification">(new) BDD style verification</a> (Since 1.10.0)</h3>
  *
  * Enables Behavior Driven Development (BDD) style verification by starting verification with the BDD <b>then</b> keyword.
  *

File: test/org/mockito/junit/MockitoJUnitRuleTest.java
Patch:
@@ -32,7 +32,7 @@ public void testThrowExceptionWhenNullTarget() throws Exception {
             new MockitoJUnitRule(null);
             fail();
         } catch (NullPointerException e) {
-            assertEquals("valid message", "Rule target should not be null", e.getMessage());
+            assertEquals("valid message", "Mockito JUnit rule target should not be null", e.getMessage());
         }
     }
 

File: src/org/mockito/junit/MockitoJUnitRule.java
Patch:
@@ -9,6 +9,7 @@
 
 /**
  * The MockitoJUnitRule Rule can be used instead of {@link org.mockito.runners.MockitoJUnitRunner}.
+ * Requires JUnit 4.9 (at least).
  *
  * This rule adds following behavior:
  * <ul>

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -448,7 +448,7 @@ public void cannotMockFinalClass(Class<?> clazz) {
     }
 
     public void cannotStubVoidMethodWithAReturnValue(String methodName) {
-        throw new MockitoException(join(
+        throw new CannotStubVoidMethodWithReturnValue(join(
                 "'" + methodName + "' is a *void method* and it *cannot* be stubbed with a *return value*!",
                 "Voids are usually stubbed with Throwables:",
                 "    doThrow(exception).when(mock).someVoidMethod();",

File: test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.fest.assertions.Assertions;
 import org.junit.Ignore;
 import org.junit.Test;
-import org.mockito.exceptions.base.MockitoException;
+import org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue;
 import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
@@ -59,7 +59,7 @@ public void hints_that_parent_not_public_during_stubbing_start() throws Exceptio
             //Mockito thinks that we're stubbing void 'clear' method here and reports that boolean value cannot stub void method
             when(clazzMock.isValid()).thenReturn(true);
             fail();
-        } catch (MockitoException e) {   //TODO SF custom exception
+        } catch (CannotStubVoidMethodWithReturnValue e) {
             Assertions.assertThat(e.getMessage())
                     .contains(MockitoLimitations.NON_PUBLIC_PARENT);
         }

File: test/org/mockito/StateMaster.java
Patch:
@@ -13,6 +13,7 @@ public class StateMaster {
 
     public void reset() {
         mockingProgress.reset();
+        mockingProgress.resetOngoingStubbing();
     }
     
     public void validate() {

File: src/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -61,8 +61,7 @@ public Method getMethod() {
     public Object[] getArguments() {
         return arguments;
     }
-    
-    @Override
+
     public <T> T getArgumentAt(int index, Class<T> clazz) {
         return (T) arguments[index];
     }

File: src/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -61,8 +61,7 @@ public Method getMethod() {
     public Object[] getArguments() {
         return arguments;
     }
-    
-    @Override
+
     public <T> T getArgumentAt(int index, Class<T> clazz) {
         return (T) arguments[index];
     }

File: test/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -102,10 +102,11 @@ public void shouldAddVerboseLoggingListenerOnlyOnce() {
     	//then
     	Assertions.assertThat(mockSettingsImpl.getInvocationListeners()).hasSize(1);
     }
-    
+
+    @SuppressWarnings("all")
     @Test(expected=MockitoException.class)
     public void shouldNotAllowNullListener() {
-    	mockSettingsImpl.invocationListeners(null);
+    	mockSettingsImpl.invocationListeners((InvocationListener[])null);
     }
 
     @Test

File: test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -94,6 +94,6 @@ public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions() {
     @SuppressWarnings("all")
     @Test(expected=MockitoException.class)
     public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions() {
-        verifyNoMoreInteractions(null);
+        verifyNoMoreInteractions((Object[])null);
     }
 }
\ No newline at end of file

File: test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldReturnConsecutiveValues() throws Exception {
     @SuppressWarnings("all")
     @Test
     public void shouldReturnConsecutiveValuesForTwoNulls() throws Exception {
-        when(mock.simpleMethod()).thenReturn(null, null);
+        when(mock.simpleMethod()).thenReturn(null, (String[])null);
         
         assertNull(mock.simpleMethod());        
         assertNull(mock.simpleMethod());        

File: test/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -266,6 +266,6 @@ public void shouldFailOnVerifyZeroInteractions() {
     @SuppressWarnings("all")
     @Test(expected = MockitoException.class)
     public void shouldScreamWhenNullPassed() {
-        inOrder(null);
+        inOrder((Object[])null);
     }
 }
\ No newline at end of file

File: test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -127,6 +127,6 @@ public void shouldVerifyOneMockButFailOnOther() throws Exception {
     @SuppressWarnings("all")
     @Test(expected=MockitoException.class)
     public void verifyNoMoreInteractionsShouldScreamWhenNullPassed() throws Exception {
-        verifyNoMoreInteractions(null);
+        verifyNoMoreInteractions((Object[])null);
     }
 }
\ No newline at end of file

File: src/org/mockito/AdditionalAnswers.java
Patch:
@@ -99,7 +99,8 @@ public static <T> Answer<T> returnsLastArg() {
      * doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>
      *
      * @param <T> Return type of the invocation.
-     * @return Answer that will return the second argument of the invocation.
+     * @param position index of the argument from the list of arguments.
+     * @return Answer that will return the argument from the given position in the argument's list
      *
      * @since 1.9.5
      */

File: src/org/mockito/AdditionalAnswers.java
Patch:
@@ -99,7 +99,8 @@ public static <T> Answer<T> returnsLastArg() {
      * doAnswer(returnsArgAt(3)).when(person).remember(dream1, dream2, dream3, dream4)</code></pre>
      *
      * @param <T> Return type of the invocation.
-     * @return Answer that will return the second argument of the invocation.
+     * @param position index of the argument from the list of arguments.
+     * @return Answer that will return the argument from the given position in the argument's list
      *
      * @since 1.9.5
      */

File: src/org/mockito/Mockito.java
Patch:
@@ -2091,7 +2091,7 @@ public static VerificationMode only() {
      * 
      * @return verification mode
      */
-    public static VerificationWithTimeout timeout(int millis) {
+    public static VerificationWithTimeout timeout(long millis) {
         return new Timeout(millis, VerificationModeFactory.times(1));
     }
     

File: src/org/mockito/verification/After.java
Patch:
@@ -16,11 +16,11 @@ public class After extends VerificationWrapper<VerificationOverTimeImpl> impleme
      * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
      * See javadoc for {@link VerificationWithTimeout}
      */
-    public After(int delayMillis, VerificationMode verificationMode) {
+    public After(long delayMillis, VerificationMode verificationMode) {
         this(10, delayMillis, verificationMode);
     }
     
-    public After(int pollingPeriod, int delayMillis, VerificationMode verificationMode) {
+    public After(long pollingPeriod, long delayMillis, VerificationMode verificationMode) {
         super(new VerificationOverTimeImpl(pollingPeriod, delayMillis, verificationMode, false));
     }
     

File: src/org/mockito/verification/Timeout.java
Patch:
@@ -20,14 +20,14 @@ public class Timeout extends VerificationWrapper<VerificationOverTimeImpl> imple
      * Typically, you won't use this class explicitly. Instead use timeout() method on Mockito class.
      * See javadoc for {@link VerificationWithTimeout}
      */
-    public Timeout(int millis, VerificationMode delegate) {
+    public Timeout(long millis, VerificationMode delegate) {
         this(10, millis, delegate);
     }
 
     /**
      * See the javadoc for {@link VerificationWithTimeout}
      */
-    Timeout(int pollingPeriodMillis, int millis, VerificationMode delegate) {
+    Timeout(long pollingPeriodMillis, long millis, VerificationMode delegate) {
         super(new VerificationOverTimeImpl(pollingPeriodMillis, millis, delegate, true));
     }
     

File: test/org/mockito/verification/TimeoutTest.java
Patch:
@@ -81,7 +81,7 @@ public void should_create_correctly_configured_timeout() {
         assertTimeoutCorrectlyConfigured(t.only(), Timeout.class, 50, 25, Only.class);
     }
     
-    private void assertTimeoutCorrectlyConfigured(VerificationMode t, Class<?> expectedType, int expectedTimeout, int expectedPollingPeriod, Class<?> expectedDelegateType) {
+    private void assertTimeoutCorrectlyConfigured(VerificationMode t, Class<?> expectedType, long expectedTimeout, long expectedPollingPeriod, Class<?> expectedDelegateType) {
         assertEquals(expectedType, t.getClass());
         assertEquals(expectedTimeout, ((Timeout) t).wrappedVerification.getDuration());
         assertEquals(expectedPollingPeriod, ((Timeout) t).wrappedVerification.getPollingPeriod());

File: src/org/mockito/Matchers.java
Patch:
@@ -104,7 +104,7 @@
 @SuppressWarnings("unchecked")
 public class Matchers {
     
-    private static MockingProgress mockingProgress = new ThreadSafeMockingProgress();
+    private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();
 
     /**
      * Any <code>boolean</code>, <code>Boolean</code> or <code>null</code>.
@@ -875,6 +875,6 @@ public static double doubleThat(Matcher<Double> matcher) {
     }
 
     private static HandyReturnValues reportMatcher(Matcher<?> matcher) {
-        return mockingProgress.getArgumentMatcherStorage().reportMatcher(matcher);
+        return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher);
     }
 }

File: src/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -12,7 +12,7 @@
 public class MockitoAssertionError extends AssertionError {
 
     private static final long serialVersionUID = 1L;
-    private StackTraceElement[] unfilteredStackTrace;
+    private final StackTraceElement[] unfilteredStackTrace;
 
     public MockitoAssertionError(String message) {
         super(message);

File: src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java
Patch:
@@ -14,7 +14,7 @@ public class ArgumentsAreDifferent extends ComparisonFailure {
     
     private static final long serialVersionUID = 1L;
     private final String message;
-    private StackTraceElement[] unfilteredStackTrace;
+    private final StackTraceElement[] unfilteredStackTrace;
 
     public ArgumentsAreDifferent(String message, String wanted, String actual) {
         super(message, wanted, actual);

File: src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -59,9 +59,9 @@
 public class PropertyAndSetterInjection extends MockInjectionStrategy {
 
     private final MockCandidateFilter mockCandidateFilter = new TypeBasedCandidateFilter(new NameBasedCandidateFilter(new FinalMockCandidateFilter()));
-    private Comparator<Field> superTypesLast = new FieldTypeAndNameComparator();
+    private final Comparator<Field> superTypesLast = new FieldTypeAndNameComparator();
 
-    private ListUtil.Filter<Field> notFinalOrStatic = new ListUtil.Filter<Field>() {
+    private final ListUtil.Filter<Field> notFinalOrStatic = new ListUtil.Filter<Field>() {
         public boolean isOut(Field object) {
             return Modifier.isFinal(object.getModifiers()) || Modifier.isStatic(object.getModifiers());
         }

File: src/org/mockito/internal/configuration/injection/scanner/MockScanner.java
Patch:
@@ -19,7 +19,7 @@
  * Scan mocks, and prepare them if needed.
  */
 public class MockScanner {
-    private MockUtil mockUtil = new MockUtil();
+    private final MockUtil mockUtil = new MockUtil();
     private final Object instance;
     private final Class<?> clazz;
 

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -32,9 +32,9 @@ public class MethodInterceptorFilter implements MethodInterceptor, Serializable
     private static final long serialVersionUID = 6182795666612683784L;
     private final InternalMockHandler handler;
     CGLIBHacker cglibHacker = new CGLIBHacker();
-    ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();
+    final ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();
     private final MockCreationSettings mockSettings;
-    private AcrossJVMSerializationFeature acrossJVMSerializationFeature = new AcrossJVMSerializationFeature();
+    private final AcrossJVMSerializationFeature acrossJVMSerializationFeature = new AcrossJVMSerializationFeature();
 
     public MethodInterceptorFilter(InternalMockHandler handler, MockCreationSettings mockSettings) {
         this.handler = handler;

File: src/org/mockito/internal/creation/jmock/ClassImposterizer.java
Patch:
@@ -33,7 +33,7 @@ private ClassImposterizer() {}
     //TODO: in order to provide decent exception message when objenesis is not found,
     //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing
     //TODO: for the same reason catch and give better feedback when hamcrest core is not found.
-    private ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());
+    private final ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());
     
     private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {
         @Override

File: src/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -11,10 +11,10 @@
 import java.io.Serializable;
 
 public class ConditionalStackTraceFilter implements Serializable {
-    static final long serialVersionUID = -8085849703510292641L;
+    private static final long serialVersionUID = -8085849703510292641L;
     
-    private IMockitoConfiguration config = new GlobalConfiguration();
-    private StackTraceFilter filter = new StackTraceFilter();
+    private final IMockitoConfiguration config = new GlobalConfiguration();
+    private final StackTraceFilter filter = new StackTraceFilter();
     
     public void filter(Throwable throwable) {
         if (!config.cleansStackTrace()) {

File: src/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java
Patch:
@@ -18,7 +18,7 @@ public class StackTraceFilter implements Serializable {
 
     static final long serialVersionUID = -5499819791513105700L;
 
-    private static StackTraceCleaner cleaner =
+    private static final StackTraceCleaner CLEANER =
             ClassPathLoader.getStackTraceCleanerProvider().getStackTraceCleaner(new DefaultStackTraceCleaner());
     
     /**
@@ -33,7 +33,7 @@ public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {
         int lastBad = -1;
         int firstBad = -1;
         for (int i = 0; i < unfilteredStackTrace.size(); i++) {
-            if (!cleaner.isOut(unfilteredStackTrace.get(i))) {
+            if (!CLEANER.isOut(unfilteredStackTrace.get(i))) {
                 continue;
             }
             lastBad = i;

File: src/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -16,7 +16,7 @@
 public class CapturingMatcher<T> extends ArgumentMatcher<T> implements CapturesArguments, VarargMatcher, Serializable {
     
     private static final long serialVersionUID = 4274067078639307295L;
-    private LinkedList<Object> arguments = new LinkedList<Object>();
+    private final LinkedList<Object> arguments = new LinkedList<Object>();
 
     /* (non-Javadoc)
      * @see org.mockito.ArgumentMatcher#matches(java.lang.Object)

File: src/org/mockito/internal/matchers/VarargCapturingMatcher.java
Patch:
@@ -15,7 +15,7 @@
 @SuppressWarnings("unchecked")
 public class VarargCapturingMatcher<T> extends ArgumentMatcher<T> implements CapturesArguments, VarargMatcher, Serializable {
     private static final long serialVersionUID = 4057053345838026645L;
-    private LinkedList<List<T>> arguments = new LinkedList<List<T>>();
+    private final LinkedList<List<T>> arguments = new LinkedList<List<T>>();
 
     public boolean matches(Object argument) {
         return true;

File: src/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java
Patch:
@@ -23,7 +23,7 @@ public class ArgumentMatcherStorageImpl implements ArgumentMatcherStorage {
 
     public static final int TWO_SUB_MATCHERS = 2;
     public static final int ONE_SUB_MATCHER = 1;
-    private Stack<LocalizedMatcher> matcherStack = new Stack<LocalizedMatcher>();
+    private final Stack<LocalizedMatcher> matcherStack = new Stack<LocalizedMatcher>();
     
     /* (non-Javadoc)
      * @see org.mockito.internal.progress.ArgumentMatcherStorage#reportMatcher(org.hamcrest.Matcher)

File: src/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -5,7 +5,6 @@
 
 package org.mockito.internal.progress;
 
-import org.mockito.MockSettings;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.internal.debugging.Localized;
@@ -111,7 +110,7 @@ public ArgumentMatcherStorage getArgumentMatcherStorage() {
     }
 
     public void mockingStarted(Object mock, Class classToMock) {
-        if (listener != null && listener instanceof MockingStartedListener) {
+        if (listener instanceof MockingStartedListener) {
             ((MockingStartedListener) listener).mockingStarted(mock, classToMock);
         }
         validateMostStuff();

File: src/org/mockito/internal/stubbing/answers/AnswersValidator.java
Patch:
@@ -10,7 +10,7 @@
 
 public class AnswersValidator {
 
-    private Reporter reporter = new Reporter();
+    private final Reporter reporter = new Reporter();
     
     public void validate(Answer<?> answer, Invocation invocation) {
         MethodInfo methodInfo = new MethodInfo(invocation);

File: src/org/mockito/internal/stubbing/answers/MethodInfo.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class MethodInfo implements AbstractAwareMethod {
 
-    private Method method;
+    private final Method method;
 
     public MethodInfo(Invocation theInvocation) {
         this.method = theInvocation.getMethod();
@@ -66,7 +66,6 @@ public boolean isDeclaredOnInterface() {
         return method.getDeclaringClass().isInterface();
     }
 
-    @Override
     public boolean isAbstract() {
         return (method.getModifiers() & Modifier.ABSTRACT) != 0;
     }

File: src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java
Patch:
@@ -14,7 +14,7 @@
 
 public class ThrowsExceptionClass implements Answer<Object>, Serializable {
 
-    private Class<? extends Throwable> throwableClass;
+    private final Class<? extends Throwable> throwableClass;
     private final ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();
 
     public ThrowsExceptionClass(Class<? extends Throwable> throwableClass) {

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -131,12 +131,11 @@ private Object writeReplace() throws IOException {
 
     private static class DeeplyStubbedAnswer implements Answer<Object>, Serializable {
         @SuppressWarnings("serial") // serialization will fail with a nice message if mock not serializable
-        private Object mock;
+        private final Object mock;
 
         DeeplyStubbedAnswer(Object mock) {
             this.mock = mock;
         }
-        @Override
         public Object answer(InvocationOnMock invocation) throws Throwable {
             return mock;
         }

File: src/org/mockito/internal/util/collections/HashCodeAndEqualsMockWrapper.java
Patch:
@@ -26,7 +26,7 @@
  */
 public class HashCodeAndEqualsMockWrapper {
 
-    private Object mockInstance;
+    private final Object mockInstance;
 
     public HashCodeAndEqualsMockWrapper(Object mockInstance) {
         this.mockInstance = mockInstance;

File: src/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java
Patch:
@@ -31,11 +31,11 @@
  */
 public class HashCodeAndEqualsSafeSet implements Set<Object> {
 
-    private HashSet<HashCodeAndEqualsMockWrapper> backingHashSet = new HashSet<HashCodeAndEqualsMockWrapper>();
+    private final HashSet<HashCodeAndEqualsMockWrapper> backingHashSet = new HashSet<HashCodeAndEqualsMockWrapper>();
 
     public Iterator<Object> iterator() {
         return new Iterator<Object>() {
-            private Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();
+            private final Iterator<HashCodeAndEqualsMockWrapper> iterator = backingHashSet.iterator();
 
             public boolean hasNext() {
                 return iterator.hasNext();

File: src/org/mockito/internal/util/reflection/FieldInitializationReport.java
Patch:
@@ -9,9 +9,9 @@
  * Report on field initialization
  */
 public class FieldInitializationReport {
-    private Object fieldInstance;
-    private boolean wasInitialized;
-    private boolean wasInitializedUsingConstructorArgs;
+    private final Object fieldInstance;
+    private final boolean wasInitialized;
+    private final boolean wasInitializedUsingConstructorArgs;
 
     public FieldInitializationReport(Object fieldInstance, boolean wasInitialized, boolean wasInitializedUsingConstructorArgs) {
         this.fieldInstance = fieldInstance;

File: src/org/mockito/internal/util/reflection/GenericMaster.java
Patch:
@@ -18,7 +18,7 @@ public class GenericMaster {
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
+        if (generic instanceof ParameterizedType) {
             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
             if (actual instanceof Class) {
                 return (Class) actual;

File: src/org/mockito/invocation/InvocationOnMock.java
Patch:
@@ -42,7 +42,7 @@ public interface InvocationOnMock extends Serializable {
     * @param clazz argument type
     * @return casted argument on position
     */
-    <T extends Object> T getArgumentAt(int index, Class<T> clazz);
+    <T> T getArgumentAt(int index, Class<T> clazz);
 
 
     /**

File: test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class StackTraceFilterTest extends TestBase {
     
-    private StackTraceFilter filter = new StackTraceFilter();
+    private final StackTraceFilter filter = new StackTraceFilter();
     
     @Test
     public void shouldFilterOutCglibGarbage() {

File: src/org/mockito/internal/matchers/Equality.java
Patch:
@@ -10,7 +10,9 @@
 public class Equality {
 
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
+        if (o1 == o2 ) {
+            return true;
+	} else if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);

File: src/org/mockito/internal/matchers/Equality.java
Patch:
@@ -10,7 +10,9 @@
 public class Equality {
 
     public static boolean areEqual(Object o1, Object o2) {
-        if (o1 == null || o2 == null) {
+        if (o1 == o2 ) {
+            return true;
+	} else if (o1 == null || o2 == null) {
             return o1 == null && o2 == null;
         } else if (isArray(o1)) {
             return isArray(o2) && areArraysEqual(o1, o2);

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.util;
 
+import java.lang.reflect.Modifier;
+
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.InternalMockHandler;
 import org.mockito.internal.configuration.ClassPathLoader;
@@ -15,8 +17,6 @@
 import org.mockito.mock.MockName;
 import org.mockito.plugins.MockMaker;
 
-import java.lang.reflect.Modifier;
-
 @SuppressWarnings("unchecked")
 public class MockUtil {
 

File: src/org/mockito/internal/util/reflection/GenericMetadataSupport.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.Checks;
 
+import java.io.Serializable;
 import java.lang.reflect.*;
 import java.util.*;
 
@@ -55,7 +56,7 @@
  * @see org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs
  */
 @Incubating
-public abstract class GenericMetadataSupport {
+public abstract class GenericMetadataSupport implements Serializable {
 
     // public static MockitoLogger logger = new ConsoleMockitoLogger();
 
@@ -550,7 +551,7 @@ public TypeVariable typeVariable() {
      *
      * @see <a href="http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>
      */
-    public static class WildCardBoundedType implements BoundedType {
+    public static class WildCardBoundedType implements BoundedType, Serializable {
         private WildcardType wildcard;
 
 

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.util;
 
-import java.io.Serializable;
 import java.lang.reflect.Modifier;
 
 import org.mockito.exceptions.misusing.NotAMockException;
@@ -19,7 +18,7 @@
 import org.mockito.plugins.MockMaker;
 
 @SuppressWarnings("unchecked")
-public class MockUtil implements Serializable {
+public class MockUtil {
 
     private static final MockMaker mockMaker = ClassPathLoader.getMockMaker();
 

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -44,7 +44,7 @@
  *  Returns description of mock for toString() method
  * </li>
  * <li>
- *  Returns non-zero for Comparable#compareTo(T other) method (see issue 184)
+ *  Returns zero if references are equals otherwise non-zero for Comparable#compareTo(T other) method (see issue 184)
  * </li>
  * <li>
  *  Returns null for everything else
@@ -71,9 +71,9 @@ public Object answer(InvocationOnMock invocation) {
             }
         } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {
             //see issue 184.
-            //mocks by default should not return 0 for compareTo because they are not the same. Hence we return 1 (anything but 0 is good).
+            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).
             //Only for compareTo() method by the Comparable interface
-            return 1;
+            return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;
         }
         
         Class<?> returnType = invocation.getMethod().getReturnType();

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -143,6 +143,7 @@ public void nullPassedToVerify() {
                 "    verify(mock).someMethod();",
                 "    verify(mock, times(10)).someMethod();",
                 "    verify(mock, atLeastOnce()).someMethod();",
+                "    not: verify(mock.someMethod());",
                 "Also, if you use @Mock annotation don't miss initMocks()"
         ));
     }

File: src/org/mockito/internal/creation/jmock/ClassImposterizer.java
Patch:
@@ -93,11 +93,12 @@ protected void filterConstructors(Class sc, List constructors) {
                 // Don't filter
             }
         };
-        enhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));
+        Class<?>[] allMockedTypes = prepend(mockedType, interfaces);
+		enhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));
         enhancer.setUseFactory(true);
         if (mockedType.isInterface()) {
             enhancer.setSuperclass(Object.class);
-            enhancer.setInterfaces(prepend(mockedType, interfaces));
+            enhancer.setInterfaces(allMockedTypes);
         } else {
             enhancer.setSuperclass(mockedType);
             enhancer.setInterfaces(interfaces);

File: test/org/mockito/verification/TimeoutTest.java
Patch:
@@ -59,7 +59,7 @@ public void should_pass_even_if_first_verification_fails() {
 
     @Test
     public void should_try_to_verify_correct_number_of_times() {
-        Timeout t = new Timeout(1, 4, mode);
+        Timeout t = new Timeout(10, 50, mode);
         
         doThrow(error).when(mode).verify(data);
         

File: src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java
Patch:
@@ -394,7 +394,7 @@ protected void annotateClass(Class<?> cl) throws IOException {
          * @return The marker if this is a Mockito proxy class, otherwise returns a void marker.
          */
         private String mockitoProxyClassMarker(Class<?> cl) {
-            if (mockUtil.isMock(cl)) {
+            if (AcrossJVMMockitoMockSerializable.class.isAssignableFrom(cl)) {
                 return MOCKITO_PROXY_MARKER;
             } else {
                 return NOTHING;
@@ -411,7 +411,7 @@ private String mockitoProxyClassMarker(Class<?> cl) {
      *
      * @see #enableSerializationAcrossJVM(org.mockito.mock.MockCreationSettings)
      */
-    public interface AcrossJVMMockitoMockSerializable {
+    public static interface AcrossJVMMockitoMockSerializable {
         public Object writeReplace() throws java.io.ObjectStreamException;
     }
 }

File: test/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -396,6 +396,7 @@ public void private_constructor_currently_not_supported_at_the_moment_at_deseria
         try {
             // when
             SimpleSerializationUtil.serializeAndBack(mockWithPrivateConstructor);
+            fail("should have thrown an ObjectStreamException or a subclass of it");
         } catch (ObjectStreamException e) {
             // then
             Assertions.assertThat(e.toString()).contains("no valid constructor");

File: test/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -398,7 +398,7 @@ public void private_constructor_currently_not_supported_at_the_moment_at_deseria
             SimpleSerializationUtil.serializeAndBack(mockWithPrivateConstructor);
         } catch (ObjectStreamException e) {
             // then
-            Assertions.assertThat(e.getMessage()).contains("no valid constructor");
+            Assertions.assertThat(e.toString()).contains("no valid constructor");
         }
     }
 

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -755,7 +755,7 @@ public void defaultAnswerDoesNotAcceptNullParameter() {
     public void serializableWontWorkForObjectsThatDontImplementSerializable(Class classToMock) {
         throw new MockitoException(join(
                 "You are using the setting 'withSettings().serializable()' however the type you are trying to mock '" + classToMock.getSimpleName() + "'",
-                " do not implement Serializable.",
+                "do not implement Serializable AND do not have a no-arg constructor.",
                 "This combination is requested, otherwise you will get an 'java.io.InvalidClassException' when the mock will be serialized",
                 "",
                 "Also note that as requested by the Java serialization specification, the whole hierarchy need to implements Serializable,",

File: src/org/mockito/internal/util/reflection/Fields.java
Patch:
@@ -23,7 +23,7 @@
 public abstract class Fields {
 
     /**
-     * Instance fields declared in thes class and superclasses of the given instance.
+     * Instance fields declared in the class and superclasses of the given instance.
      *
      * @param instance Instance from which declared fields will be retrieved.
      * @return InstanceFields of this object instance.
@@ -37,7 +37,7 @@ public static InstanceFields allDeclaredFieldsOf(Object instance) {
     }
 
     /**
-     * Instance fields declared in the of the given instance.
+     * Instance fields declared in the class of the given instance.
      *
      * @param instance Instance from which declared fields will be retrieved.
      * @return InstanceFields of this object instance.

File: src/org/mockito/AdditionalAnswers.java
Patch:
@@ -180,7 +180,7 @@ public static <T> Answer<T> delegatesTo(Object delegate) {
      *   when(mock.foo()).thenReturn(1, 2, 3);
      *
      *   //is equivalent to:
-     *   when(mock.foo()).thenReturn(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
+     *   when(mock.foo()).thenAnswer(new ReturnsElementsOf(Arrays.asList(1, 2, 3)));
      * </code></pre>
      *
      * @param elements The collection of elements to return.

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.mockito.internal.progress.MockingProgressImplTest;
 import org.mockito.internal.progress.TimesTest;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;
+import org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest;
 import org.mockito.internal.util.MockUtilTest;
 import org.mockito.internal.util.collections.ListUtilTest;
 import org.mockito.internal.verification.DefaultRegisteredInvocationsTest;
@@ -118,7 +119,8 @@ public void run() {
                     ExampleTest.class,
                     PointingStackTraceToActualInvocationTest.class,
                     VerificationInOrderFromMultipleThreadsTest.class,
-                    ResetTest.class
+                    ResetTest.class,
+                    ReturnsGenericDeepStubsTest.class
                 );
                 
                 if (!result.wasSuccessful()) {

File: subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java
Patch:
@@ -16,6 +16,5 @@ public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {
     public void verify_mocks_are_initialized() throws Exception {
         assertThat(childMockField).isNotNull();
         assertThat(parentMockField).isNotNull();
-      fail();
     }
 }

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseIncorrectAnnotationUsage.java
Patch:
@@ -14,7 +14,7 @@
  */
 @Listeners(MockitoTestNGListener.class)
 @Test(description = "Always failing, shouldn't be listed in 'mockito-testng.xml'")
-public class FailingBecauseIncorrectAnnotationUsage {
+public class FailingOnPurposeBecauseIncorrectAnnotationUsage {
     @Spy Map spy_cant_initialize_interface_fields;
     @Test public void dummy_test_method() throws Exception { }
 }

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseIncorrectStubbingSyntax.java
Patch:
@@ -18,7 +18,7 @@
  */
 @Listeners(MockitoTestNGListener.class)
 @Test(description = "Always failing, shouldn't be listed in 'mockito-testng.xml'")
-public class FailingBecauseIncorrectStubbingSyntax {
+public class FailingOnPurposeBecauseIncorrectStubbingSyntax {
 
     @Test(expectedExceptions = InvalidUseOfMatchersException.class)
     public void incorrect_stubbing_syntax_in_test() throws Exception {

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseWrongStubbingSyntaxInConfigurationMethod.java
Patch:
@@ -17,7 +17,7 @@
  */
 @Listeners(MockitoTestNGListener.class)
 @Test(description = "Always failing, shouldn't be listed in 'mockito-testng.xml'")
-public class FailingBecauseWrongStubbingSyntaxInConfigurationMethod {
+public class FailingOnPurposeBecauseWrongStubbingSyntaxInConfigurationMethod {
 
     @Mock List list;
 

File: subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/TestNGShouldFailWhenMockitoListenerFailsTest.java
Patch:
@@ -19,7 +19,7 @@ public class TestNGShouldFailWhenMockitoListenerFailsTest {
     private final FailureRecordingListener failureRecorder = new FailureRecordingListener();
 
     public void report_failure_on_incorrect_annotation_usage() throws Throwable {
-        TestNG testNG = new_TestNG_with_failure_recorder_for(FailingBecauseIncorrectAnnotationUsage.class);
+        TestNG testNG = new_TestNG_with_failure_recorder_for(FailingOnPurposeBecauseIncorrectAnnotationUsage.class);
 
         testNG.run();
 
@@ -29,7 +29,7 @@ public void report_failure_on_incorrect_annotation_usage() throws Throwable {
 
     @Test
     public void report_failure_on_incorrect_stubbing_syntax_with_matchers_in_test_methods() throws Exception {
-        TestNG testNG = new_TestNG_with_failure_recorder_for(FailingBecauseIncorrectStubbingSyntax.class);
+        TestNG testNG = new_TestNG_with_failure_recorder_for(FailingOnPurposeBecauseIncorrectStubbingSyntax.class);
 
         testNG.run();
 
@@ -40,7 +40,7 @@ public void report_failure_on_incorrect_stubbing_syntax_with_matchers_in_test_me
 
     @Test
     public void report_failure_on_incorrect_stubbing_syntax_with_matchers_in_configuration_methods() throws Exception {
-        TestNG testNG = new_TestNG_with_failure_recorder_for(FailingBecauseWrongStubbingSyntaxInConfigurationMethod.class);
+        TestNG testNG = new_TestNG_with_failure_recorder_for(FailingOnPurposeBecauseWrongStubbingSyntaxInConfigurationMethod.class);
 
         testNG.run();
 

File: subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Map;
 
 import static org.fest.assertions.Assertions.assertThat;
+import static org.testng.Assert.fail;
 
 public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {
 
@@ -15,5 +16,6 @@ public class InitializeChildTestWhenParentHasListenerTest extends ParentTest {
     public void verify_mocks_are_initialized() throws Exception {
         assertThat(childMockField).isNotNull();
         assertThat(parentMockField).isNotNull();
+      fail();
     }
 }

File: src/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 
 
 

File: src/org/mockito/exceptions/base/MockitoException.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 
 
 public class MockitoException extends RuntimeException {

File: src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java
Patch:
@@ -6,8 +6,7 @@
 package org.mockito.exceptions.verification.junit;
 
 import junit.framework.ComparisonFailure;
-
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.internal.util.RemoveFirstLine;
 
 

File: src/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.exceptions.base;
+package org.mockito.internal.exceptions.stacktrace;
 
 import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.GlobalConfiguration;

File: src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.objenesis.ObjenesisHelper;

File: src/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -18,7 +18,7 @@ public static VerificationMode atLeast(int minNumberOfInvocations) {
     }
 
     public static VerificationMode only() {
-        return new Only();
+        return new Only(); //TODO make exception message nicer
     }
 
     public static Times times(int wantedNumberOfInvocations) {

File: test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -3,14 +3,14 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.exceptions.base;
-
-import static org.mockitoutil.ExtraMatchers.*;
+package org.mockito.internal.exceptions.stacktrace;
 
 import org.junit.Test;
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockitoutil.TestBase;
 
+import static org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses;
+
 public class StackTraceFilterTest extends TestBase {
     
     private StackTraceFilter filter = new StackTraceFilter();

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.internal.stubbing.defaultanswers;
 
-import java.util.*;
-
 import org.junit.Test;
 import org.mockito.invocation.Invocation;
 import org.mockitoutil.TestBase;
 
+import java.util.*;
+
 import static org.mockito.Mockito.mock;
 
 @SuppressWarnings("unchecked")

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java
Patch:
@@ -21,7 +21,6 @@ final class Baz {
     }
 
     @Test
-    //TODO split into separate
     public void should_return_mock_value_for_interface() throws Exception {
         Object interfaceMock = values.returnValueFor(FooInterface.class);
         assertTrue(new MockUtil().isMock(interfaceMock));

File: test/org/mockitousage/bugs/Issue353InjectionMightNotHappenInCertainConfigurationTest.java
Patch:
@@ -7,11 +7,12 @@
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import static org.fest.assertions.Assertions.assertThat;
 import static org.junit.Assert.assertSame;
 
-import java.util.*;
-
 @RunWith(MockitoJUnitRunner.class)
 public class Issue353InjectionMightNotHappenInCertainConfigurationTest {
     @Mock Map<String, String> stringString_that_matches_field;

File: src/org/mockito/internal/verification/DefaultRegisteredInvocations.java
Patch:
@@ -15,8 +15,7 @@
 import java.util.List;
 
 
-//TODO rename to DefaultRegisteredInvocations
-public class RegisteredInvocationsAll implements RegisteredInvocations, Serializable {
+public class DefaultRegisteredInvocations implements RegisteredInvocations, Serializable {
 
     private static final long serialVersionUID = -2674402327380736290L;
     private final LinkedList<Invocation> invocations = new LinkedList<Invocation>();

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;
 import org.mockito.internal.util.MockUtilTest;
 import org.mockito.internal.util.collections.ListUtilTest;
-import org.mockito.internal.verification.RegisteredInvocationsAllTest;
+import org.mockito.internal.verification.DefaultRegisteredInvocationsTest;
 import org.mockito.internal.verification.checkers.MissingInvocationCheckerTest;
 import org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest;
 import org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest;
@@ -71,7 +71,7 @@ public void run() {
                     AllInvocationsFinderTest.class,
                     ReturnsEmptyValuesTest.class,
                     NumberOfInvocationsCheckerTest.class,
-                    RegisteredInvocationsAllTest.class,
+                    DefaultRegisteredInvocationsTest.class,
                     MissingInvocationCheckerTest.class,
                     NumberOfInvocationsInOrderCheckerTest.class,
                     MissingInvocationInOrderCheckerTest.class,

File: test/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java
Patch:
@@ -11,13 +11,13 @@
 import org.mockito.invocation.Invocation;
 import org.mockitoutil.TestBase;
 
-public class RegisteredInvocationsAllTest extends TestBase {
+public class DefaultRegisteredInvocationsTest extends TestBase {
     
-    private RegisteredInvocationsAll invocations;
+    private DefaultRegisteredInvocations invocations;
     
     @Before
     public void setup() {
-        invocations = new RegisteredInvocationsAll();
+        invocations = new DefaultRegisteredInvocations();
     }
     
     @Test

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -84,7 +84,7 @@ public boolean isSerializable() {
         return serializable;
     }
 
-    public MockSettings stubOnly() {
+    public MockSettingsImpl stubOnly() {
         this.stubOnly = true;
         return this;
     }

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -71,8 +71,8 @@ public abstract class ArgumentMatcher<T> extends BaseMatcher<T> {
      */
     public abstract boolean matches(Object argument);
 
-    /* 
-     * By default this method decamlizes matchers name to promote meaningful names for matchers.
+    /**
+     * By default this method decamelizes matchers name to promote meaningful names for matchers.
      * <p>
      * For example <b>StringWithStrongLanguage</b> matcher will generate 'String with strong language' description in case of failure.
      * <p>

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.internal.util.MockCreationValidator;
 import org.mockito.internal.util.MockNameImpl;
 import org.mockito.internal.util.MockitoSpy;
-import org.mockito.internal.util.reflection.MockitoGenericMetadata;
+import org.mockito.internal.util.reflection.GenericMetadataSupport;
 import org.mockito.listeners.InvocationListener;
 import org.mockito.mock.MockCreationSettings;
 import org.mockito.mock.MockName;
@@ -159,7 +159,7 @@ private static Set<Class> prepareExtraInterfaces(CreationSettings settings) {
         return interfaces;
     }
 
-    public MockSettings parameterizedInfo(MockitoGenericMetadata mockitoGenericMetadata) {
+    public MockSettings parameterizedInfo(GenericMetadataSupport mockitoGenericMetadata) {
         this.mockitoGenericMetadata = mockitoGenericMetadata;
         return this;
     }

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -72,6 +72,9 @@ public MockSettings spiedInstance(Object spiedInstance) {
 
     public MockSettings defaultAnswer(Answer defaultAnswer) {
         this.defaultAnswer = defaultAnswer;
+        if (defaultAnswer == null) {
+            new Reporter().defaultAnswerDoesNotAcceptNullParameter();
+        }
         return this;
     }
 

File: src/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 
 
 

File: src/org/mockito/exceptions/base/MockitoException.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 
 
 public class MockitoException extends RuntimeException {

File: src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java
Patch:
@@ -6,8 +6,7 @@
 package org.mockito.exceptions.verification.junit;
 
 import junit.framework.ComparisonFailure;
-
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.internal.util.RemoveFirstLine;
 
 

File: src/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.exceptions.base;
+package org.mockito.internal.exceptions.stacktrace;
 
 import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.GlobalConfiguration;

File: src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.objenesis.ObjenesisHelper;

File: test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -3,14 +3,14 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.exceptions.base;
-
-import static org.mockitoutil.ExtraMatchers.*;
+package org.mockito.internal.exceptions.stacktrace;
 
 import org.junit.Test;
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockitoutil.TestBase;
 
+import static org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses;
+
 public class StackTraceFilterTest extends TestBase {
     
     private StackTraceFilter filter = new StackTraceFilter();

File: src/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 
 
 

File: src/org/mockito/exceptions/base/MockitoException.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.exceptions.base;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 
 
 public class MockitoException extends RuntimeException {

File: src/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java
Patch:
@@ -6,8 +6,7 @@
 package org.mockito.exceptions.verification.junit;
 
 import junit.framework.ComparisonFailure;
-
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.internal.util.RemoveFirstLine;
 
 

File: src/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.exceptions.base;
+package org.mockito.internal.exceptions.stacktrace;
 
 import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.GlobalConfiguration;

File: src/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java
Patch:
@@ -5,7 +5,7 @@
 
 package org.mockito.internal.stubbing.answers;
 
-import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
+import org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.objenesis.ObjenesisHelper;

File: test/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java
Patch:
@@ -3,14 +3,14 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.exceptions.base;
-
-import static org.mockitoutil.ExtraMatchers.*;
+package org.mockito.internal.exceptions.stacktrace;
 
 import org.junit.Test;
 import org.mockito.exceptions.base.TraceBuilder;
 import org.mockitoutil.TestBase;
 
+import static org.mockitoutil.ExtraMatchers.hasOnlyThoseClasses;
+
 public class StackTraceFilterTest extends TestBase {
     
     private StackTraceFilter filter = new StackTraceFilter();

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -156,7 +156,7 @@ private static Set<Class> prepareExtraInterfaces(CreationSettings settings) {
         return interfaces;
     }
 
-    public MockSettings withParameterizedInfo(MockitoGenericMetadata mockitoGenericMetadata) {
+    public MockSettings parameterizedInfo(MockitoGenericMetadata mockitoGenericMetadata) {
         this.mockitoGenericMetadata = mockitoGenericMetadata;
         return this;
     }

File: src/org/mockito/plugins/MockMaker.java
Patch:
@@ -43,7 +43,7 @@ public interface MockMaker {
      * <ul>
      *     <li>Create a proxy object that implements {@code settings.typeToMock} and potentially also {@code settings.extraInterfaces}.</li>
      *     <li>You may use the information from {@code settings} to create/configure your proxy object.</li>
-     *     <li>Your proxy object should carry the {@code hander} with it. For example, if you generate byte code
+     *     <li>Your proxy object should carry the {@code handler} with it. For example, if you generate byte code
      *     to create the proxy you could generate an extra field to keep the {@code handler} with the generated object.
      *     Your implementation of {@code MockMaker} is required to provide this instance of {@code handler} when
      *     {@link #getHandler(Object)} is called.

File: src/org/mockito/internal/handler/InvocationNotifierHandler.java
Patch:
@@ -23,12 +23,12 @@
  *
  * Also imposterize MockHandlerImpl, delegate all call of InternalMockHandler to the real mockHandler
  */
-public class InvocationNotifierHandler<T> implements MockHandler, InternalMockHandler<T> {
+class InvocationNotifierHandler<T> implements MockHandler, InternalMockHandler<T> {
 
     private List<InvocationListener> invocationListeners;
-    private MockHandlerImpl<T> mockHandler;
+    private InternalMockHandler<T> mockHandler;
 
-    public InvocationNotifierHandler(MockHandlerImpl<T> mockHandler, MockCreationSettings settings) {
+    public InvocationNotifierHandler(InternalMockHandler<T> mockHandler, MockCreationSettings settings) {
         this.mockHandler = mockHandler;
         this.invocationListeners = settings.getInvocationListeners();
     }

File: src/org/mockito/internal/handler/MockHandlerImpl.java
Patch:
@@ -26,7 +26,7 @@
  * @param <T>
  *            type of mock object to handle
  */
-public class MockHandlerImpl<T> implements InternalMockHandler<T> {
+class MockHandlerImpl<T> implements InternalMockHandler<T> {
 
     private static final long serialVersionUID = -2917871070982574165L;
 
@@ -90,7 +90,7 @@ public Object handle(Invocation invocation) throws Throwable {
             stubbedInvocation.captureArgumentsFrom(invocation);
             return stubbedInvocation.answer(invocation);
         } else {
-            Object ret = mockSettings.getDefaultAnswer().answer(invocation);
+             Object ret = mockSettings.getDefaultAnswer().answer(invocation);
 
             // redo setting invocation for potential stubbing in case of partial
             // mocks / spies.

File: src/org/mockito/internal/creation/CglibMockMaker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Mockito contributors
+ * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal.creation;

File: src/org/mockito/plugins/MockMaker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012 Mockito contributors
+ * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.plugins;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -64,7 +64,7 @@ public Object answer(InvocationOnMock invocation) {
         if (methodsGuru.isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = new MockUtil().getMockName(mock);
-            if (name.isSurrogate()) {
+            if (name.isDefault()) {
                 return "Mock for " + ClassNameFinder.classNameForMock(mock) + ", hashCode: " + mock.hashCode();
             } else {
                 return name.toString();

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -106,7 +106,7 @@ public MockName getMockName(Object mock) {
     }
 
     public void maybeRedefineMockName(Object mock, String newName) {
-        if (getMockName(mock).isSurrogate()) {
+        if (getMockName(mock).isDefault()) {
             getMockHandler(mock).getMockSettings().redefineMockName(newName);
         }
     }

File: test/org/mockito/internal/util/MockUtilTest.java
Patch:
@@ -91,15 +91,15 @@ public void shouldValidateSpy() {
     }
 
     @Test
-    public void should_redefine_MockName_if_surrogate() {
+    public void should_redefine_MockName_if_default() {
         List mock = Mockito.mock(List.class);
         mockUtil.maybeRedefineMockName(mock, "newName");
 
         Assertions.assertThat(mockUtil.getMockName(mock).toString()).isEqualTo("newName");
     }
 
     @Test
-    public void should_not_redefine_MockName_if_surrogate() {
+    public void should_not_redefine_MockName_if_default() {
         List mock = Mockito.mock(List.class, "original");
         mockUtil.maybeRedefineMockName(mock, "newName");
 

File: src/org/mockito/MockSettings.java
Patch:
@@ -249,5 +249,5 @@ public interface MockSettings extends Serializable, MockSettingsInfo {
      *
      * @since 1.9.5
      */
-    MockSettings forwardTo(Object delegate) ;
+    MockSettings forwardTo(Object delegate);
 }

File: src/org/mockito/internal/InvocationNotifierHandler.java
Patch:
@@ -5,12 +5,12 @@
 package org.mockito.internal;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
 import org.mockito.internal.stubbing.InvocationContainer;
 import org.mockito.invocation.Invocation;
 import org.mockito.listeners.InvocationListener;
 import org.mockito.invocation.MockitoInvocationHandler;
+import org.mockito.mock.MockSettingsInfo;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;
 
@@ -27,7 +27,7 @@ public class InvocationNotifierHandler<T> implements MockitoInvocationHandler, M
     private List<InvocationListener> invocationListeners;
     private MockHandler<T> mockHandler;
 
-    public InvocationNotifierHandler(MockHandler<T> mockHandler, MockSettingsImpl settings) {
+    public InvocationNotifierHandler(MockHandler<T> mockHandler, MockSettingsInfo settings) {
         this.mockHandler = mockHandler;
         this.invocationListeners = settings.getInvocationListeners();
     }
@@ -64,7 +64,7 @@ private void notifyMethodCallException(Invocation invocation, Throwable exceptio
         }
 	}
 
-    public MockSettingsImpl getMockSettings() {
+    public MockSettingsInfo getMockSettings() {
         return mockHandler.getMockSettings();
     }
 

File: src/org/mockito/internal/MockHandlerInterface.java
Patch:
@@ -7,17 +7,17 @@
 import java.util.List;
 
 import org.mockito.Incubating;
-import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.stubbing.InvocationContainer;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MockitoInvocationHandler;
+import org.mockito.mock.MockSettingsInfo;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;
 
 @SuppressWarnings("unchecked")
 public interface MockHandlerInterface<T> extends MockitoInvocationHandler {
 
-    MockSettingsImpl getMockSettings();
+    MockSettingsInfo getMockSettings();
 
     VoidMethodStubbable<T> voidMethodStubbable(T mock);
     

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -38,7 +38,7 @@ public class MockitoCore {
     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();
     
     public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
-        T mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);
+        T mock = mockUtil.createMock(classToMock, mockSettings);
         mockingProgress.mockingStarted(mock, classToMock, mockSettings);
         return mock;
     }

File: src/org/mockito/internal/configuration/injection/scanner/MockScanner.java
Patch:
@@ -66,7 +66,7 @@ private Object preparedMock(Object instance, Field field) {
         if (isAnnotatedByMockOrSpy(field)) {
             return instance;
         } else if (isMockOrSpy(instance)) {
-            mockUtil.redefineMockNameIfSurrogate(instance, field.getName());
+            mockUtil.maybeRedefineMockName(instance, field.getName());
             return instance;
         }
         return null;

File: src/org/mockito/internal/creation/CglibMockMaker.java
Patch:
@@ -13,12 +13,14 @@
 import org.mockito.internal.creation.jmock.ClassImposterizer;
 import org.mockito.mock.MockSettingsInfo;
 
+import java.util.Set;
+
 /**
  * A MockMaker that uses cglib to generate mocks on a JVM.
  */
 public final class CglibMockMaker implements MockMaker {
 
-    public <T> T createMock(Class<T> typeToMock, Class<?>[] extraInterfaces,
+    public <T> T createMock(Class<T> typeToMock, Set<Class> extraInterfaces,
             MockitoInvocationHandler handler, MockSettingsInfo settings) {
         MockHandlerInterface mockitoHandler = cast(handler);
         return ClassImposterizer.INSTANCE.imposterise(

File: src/org/mockito/internal/util/MockCreationValidator.java
Patch:
@@ -8,6 +8,8 @@
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.creation.jmock.ClassImposterizer;
 
+import java.util.Collection;
+
 @SuppressWarnings("unchecked")
 public class MockCreationValidator {
 
@@ -21,7 +23,7 @@ public void validateType(Class classToMock) {
         }
     }
 
-    public void validateExtraInterfaces(Class classToMock, Class ... extraInterfaces) {
+    public void validateExtraInterfaces(Class classToMock, Collection<Class> extraInterfaces) {
         if (extraInterfaces == null) {
             return;
         }

File: test/org/mockito/internal/MockHandlerTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwab
 		// given
 		Invocation invocation = new InvocationBuilder().toInvocation();
 		@SuppressWarnings("rawtypes")
-		MockHandler<?> handler = new MockHandler();
+		MockHandler<?> handler = new MockHandler(new MockSettingsImpl());
 		handler.mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());
 		handler.matchersBinder = new MatchersBinder() {
 			public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {

File: test/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -53,8 +53,9 @@ public void shouldAllowMultipleInterfaces() {
         mockSettingsImpl.extraInterfaces(List.class, Set.class);
         
         //then
-        assertEquals(List.class, mockSettingsImpl.getExtraInterfaces()[0]);
-        assertEquals(Set.class, mockSettingsImpl.getExtraInterfaces()[1]);
+        assertEquals(2, mockSettingsImpl.getExtraInterfaces().size());
+        assertTrue(mockSettingsImpl.getExtraInterfaces().contains(List.class));
+        assertTrue(mockSettingsImpl.getExtraInterfaces().contains(Set.class));
     }
 
     @Test

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -68,8 +68,7 @@ private Class<?>[] prepareAncillaryTypes(MockSettingsImpl settings) {
     }
 
     public <T> void resetMock(T mock) {
-        InvocationNotifierHandler oldHandler
-                = (InvocationNotifierHandler) mockMaker.getHandler(mock);
+        InvocationNotifierHandler oldHandler = (InvocationNotifierHandler) getMockHandler(mock);
         MockSettingsImpl settings = oldHandler.getMockSettings();
         InvocationNotifierHandler<T> newHandler = new InvocationNotifierHandler<T>(
                 new MockHandler<T>(settings), settings);

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -26,7 +26,7 @@
  * @param <T>
  *            type of mock object to handle
  */
-public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> {
+public class MockHandler<T> implements MockHandlerInterface<T> {
 
     private static final long serialVersionUID = -2917871070982574165L;
 

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -10,6 +10,7 @@
 
 import org.mockito.cglib.proxy.MethodInterceptor;
 import org.mockito.cglib.proxy.MethodProxy;
+import org.mockito.internal.MockHandlerInterface;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.internal.creation.cglib.CGLIBHacker;
@@ -22,12 +23,12 @@
 public class MethodInterceptorFilter implements MethodInterceptor, Serializable {
 
     private static final long serialVersionUID = 6182795666612683784L;
-    private final MockitoInvocationHandler handler;
+    private final MockHandlerInterface handler;
     CGLIBHacker cglibHacker = new CGLIBHacker();
     ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();
     private final MockSettingsInfo mockSettings;
 
-    public MethodInterceptorFilter(MockitoInvocationHandler handler, MockSettingsInfo mockSettings) {
+    public MethodInterceptorFilter(MockHandlerInterface handler, MockSettingsInfo mockSettings) {
         this.handler = handler;
         this.mockSettings = mockSettings;
     }

File: test/org/mockito/internal/creation/MethodInterceptorFilterTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodProxy;
+import org.mockito.internal.MockHandlerInterface;
 import org.mockito.internal.invocation.InvocationImpl;
-import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.internal.creation.cglib.CGLIBHacker;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.MockitoMethod;
@@ -27,7 +27,7 @@
 
 public class MethodInterceptorFilterTest extends TestBase {
 
-    MockitoInvocationHandler handler = Mockito.mock(MockitoInvocationHandler.class);
+    MockHandlerInterface handler = Mockito.mock(MockHandlerInterface.class);
     MethodInterceptorFilter filter = new MethodInterceptorFilter(handler, (MockSettingsImpl) withSettings());
 
     @Before

File: src/org/mockito/internal/configuration/CaptorAnnotationProcessor.java
Patch:
@@ -8,7 +8,7 @@
 import java.lang.reflect.Field;
 
 /**
- * Instantiate {@link ‡ArgumentCaptor} a field annotated by &#64;Captor.
+ * Instantiate {@link ArgumentCaptor} a field annotated by &#64;Captor.
  */
 public class CaptorAnnotationProcessor implements FieldAnnotationProcessor<Captor> {
     public Object process(Captor annotation, Field field) {

File: src/org/mockito/internal/configuration/MockitoAnnotationsMockAnnotationProcessor.java
Patch:
@@ -1,18 +1,17 @@
 package org.mockito.internal.configuration;
 
 import org.mockito.Mockito;
-import org.mockito.MockitoAnnotations;
 import org.mockito.MockitoAnnotations.Mock;
 
 import java.lang.reflect.Field;
 
 /**
- * Instantiates a mock on a field annotated by {@link MockitoAnnotations.Mock}
+ * Instantiates a mock on a field annotated by {@link Mock}
  */
 @SuppressWarnings("deprecation")
 public class MockitoAnnotationsMockAnnotationProcessor implements FieldAnnotationProcessor<Mock> {
 
-    public Object process(MockitoAnnotations.Mock annotation, Field field) {
+    public Object process(Mock annotation, Field field) {
         return Mockito.mock(field.getType(), field.getName());
     }
 }

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.mockito.internal.InvalidStateDetectionTest;
 import org.mockito.internal.MockHandlerTest;
 import org.mockito.internal.creation.jmock.ClassImposterizerTest;
+import org.mockito.internal.invocation.InvocationImplTest;
 import org.mockito.internal.invocation.InvocationMatcherTest;
-import org.mockito.internal.invocation.InvocationTest;
 import org.mockito.internal.invocation.InvocationsFinderTest;
 import org.mockito.internal.matchers.ComparableMatchersTest;
 import org.mockito.internal.matchers.EqualsTest;
@@ -90,7 +90,7 @@ public void run() {
                     ClassImposterizerTest.class,
                     InvocationMatcherTest.class,
                     InvocationsFinderTest.class,
-                    InvocationTest.class,
+                    InvocationImplTest.class,
                     MockitoTest.class,
                     MockUtilTest.class,
                     ReporterTest.class,

File: test/org/mockitousage/internal/debugging/LocationImplTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("serial")
-public class LocationTest extends TestBase {
+public class LocationImplTest extends TestBase {
 
     @Test
     public void shouldLocationNotContainGetStackTraceMethod() {

File: src/org/mockito/Mockito.java
Patch:
@@ -785,7 +785,8 @@
  *     MockingDetails.of( someObject ).isMock();
  *     MockingDetails.of( someObject ).isSpy();
  * </code></pre>
- * Both the <code>isMock()</code> and <code>isSpy()</code> methods return <code>boolean</code>.
+ * Both the <code>isMock()</code> and <code>isSpy()</code> methods return <code>boolean</code>.  As a spy
+ * is considered a special kind of mock, <code>isMock()</code> returns true if the object is a spy.
  */
 @SuppressWarnings("unchecked")
 public class Mockito extends Matchers {

File: src/org/mockito/MockSettings.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito;
 
 import org.mockito.listeners.InvocationListener;
-import org.mockito.plugins.MockSettingsInfo;
+import org.mockito.mock.MockSettingsInfo;
 import org.mockito.stubbing.Answer;
 
 import java.io.Serializable;

File: src/org/mockito/internal/InvocationNotifierHandler.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.internal.stubbing.InvocationContainer;
 import org.mockito.invocation.Invocation;
 import org.mockito.listeners.InvocationListener;
-import org.mockito.plugins.MockitoInvocationHandler;
+import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;
 

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.internal.verification.MockAwareVerificationMode;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.invocation.Invocation;
-import org.mockito.plugins.MockitoInvocationHandler;
+import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;
 import org.mockito.verification.VerificationMode;

File: src/org/mockito/internal/creation/CglibMockMaker.java
Patch:
@@ -7,9 +7,9 @@
 import org.mockito.cglib.proxy.Callback;
 import org.mockito.cglib.proxy.Factory;
 import org.mockito.plugins.MockMaker;
-import org.mockito.plugins.MockitoInvocationHandler;
+import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.internal.creation.jmock.ClassImposterizer;
-import org.mockito.plugins.MockSettingsInfo;
+import org.mockito.mock.MockSettingsInfo;
 
 /**
  * A MockMaker that uses cglib to generate mocks on a JVM.

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -11,13 +11,13 @@
 import org.mockito.cglib.proxy.MethodInterceptor;
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.invocation.Invocation;
-import org.mockito.plugins.MockitoInvocationHandler;
+import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.internal.creation.cglib.CGLIBHacker;
 import org.mockito.internal.invocation.*;
 import org.mockito.internal.invocation.realmethod.FilteredCGLIBProxyRealMethod;
 import org.mockito.internal.progress.SequenceNumber;
 import org.mockito.internal.util.ObjectMethodsGuru;
-import org.mockito.plugins.MockSettingsInfo;
+import org.mockito.mock.MockSettingsInfo;
 
 public class MethodInterceptorFilter implements MethodInterceptor, Serializable {
 

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -22,7 +22,7 @@ public class MockSettingsImpl implements MockSettings {
     private Class<?>[] extraInterfaces;
     private String name;
     private Object spiedInstance;
-    private Object delegatedInstance ;
+    private Object delegatedInstance;
     private Answer<Object> defaultAnswer;
     private MockName mockName;
     private boolean serializable;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.InvocationOnMock;
-import org.mockito.plugins.MockitoInvocationHandler;
+import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.stubbing.Answer;
 
 /**

File: src/org/mockito/mock/MockSettingsInfo.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.plugins;
+package org.mockito.mock;
 
 import org.mockito.internal.Incubating;
 

File: test/org/mockito/internal/creation/MethodInterceptorFilterTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.invocation.InvocationImpl;
-import org.mockito.plugins.MockitoInvocationHandler;
+import org.mockito.invocation.MockitoInvocationHandler;
 import org.mockito.internal.creation.cglib.CGLIBHacker;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.MockitoMethod;

File: src/org/mockito/invocation/DescribedInvocation.java
Patch:
@@ -1,9 +1,11 @@
 package org.mockito.invocation;
 
+import org.mockito.exceptions.PrintableInvocation;
+
 /**
  * by Szczepan Faber, created at: 4/1/12
  */
-public interface DescribedInvocation {
+public interface DescribedInvocation extends PrintableInvocation {
 
     String toString();
 

File: src/org/mockito/listeners/MethodInvocationReport.java
Patch:
@@ -24,7 +24,7 @@ public interface MethodInvocationReport {
      *
      * @return Information on the method call, never {@code null}
      */
-    PrintableInvocation getInvocation();
+    DescribedInvocation getInvocation();
 
     /**
      * @return The resulting value of the method invocation, may be <code>null</code>

File: src/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -11,8 +11,8 @@
 import org.mockito.internal.exceptions.VerificationAwareInvocation;
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.reporting.PrintSettings;
+import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationOnMock;
-import org.mockito.invocation.PublicInvocation;
 import org.mockito.invocation.StubInfo;
 
 import java.lang.reflect.Method;
@@ -27,7 +27,7 @@
  * Contains stack trace of invocation
  */
 @SuppressWarnings("unchecked")
-public class InvocationImpl implements PublicInvocation, PrintableInvocation, InvocationOnMock, VerificationAwareInvocation {
+public class InvocationImpl implements Invocation, PrintableInvocation, InvocationOnMock, VerificationAwareInvocation {
 
     private static final long serialVersionUID = 8240069639250980199L;
     private final int sequenceNumber;

File: src/org/mockito/internal/stubbing/answers/AnswersValidator.java
Patch:
@@ -5,14 +5,14 @@
 package org.mockito.internal.stubbing.answers;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.invocation.PublicInvocation;
+import org.mockito.invocation.Invocation;
 import org.mockito.stubbing.Answer;
 
 public class AnswersValidator {
 
     private Reporter reporter = new Reporter();
     
-    public void validate(Answer<?> answer, PublicInvocation theInvocation) {
+    public void validate(Answer<?> answer, Invocation theInvocation) {
         MethodInfo invocation = new MethodInfo(theInvocation);
         if (answer instanceof ThrowsException) {
             validateException((ThrowsException) answer, invocation);

File: src/org/mockito/internal/stubbing/answers/MethodInfo.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.internal.stubbing.answers;
 
 import org.mockito.internal.util.Primitives;
-import org.mockito.invocation.PublicInvocation;
+import org.mockito.invocation.Invocation;
 
 import java.lang.reflect.Method;
 
@@ -12,7 +12,7 @@ public class MethodInfo {
 
     private Method method;
 
-    public MethodInfo(PublicInvocation theInvocation) {
+    public MethodInfo(Invocation theInvocation) {
         this.method = theInvocation.getMethod();
     }
 

File: src/org/mockito/invocation/Invocation.java
Patch:
@@ -1,11 +1,9 @@
 package org.mockito.invocation;
 
-import org.mockito.internal.invocation.StubInfoImpl;
-
 /**
  * by Szczepan Faber, created at: 3/31/12
  */
-public interface PublicInvocation extends InvocationOnMock {
+public interface Invocation extends InvocationOnMock {
 
     boolean isVerified();
 

File: src/org/mockito/exceptions/PrintableInvocation.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.exceptions;
 
-import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.invocation.Location;
 
 public interface PrintableInvocation {
     
     String toString();
     
-    LocationImpl getLocation();
+    Location getLocation();
     
 }
\ No newline at end of file

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -27,7 +27,7 @@
 import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.exceptions.VerificationAwareInvocation;
 import org.mockito.internal.exceptions.util.ScenarioPrinter;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.matchers.LocalizedMatcher;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.StringJoiner;
@@ -414,7 +414,7 @@ public void tooLittleActualInvocationsInOrder(Discrepancy discrepancy, Printable
                 ));
     }
 
-    public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwareInvocation> invocations) {
+    public void noMoreInteractionsWanted(InvocationImpl undesired, List<VerificationAwareInvocation> invocations) {
         ScenarioPrinter scenarioPrinter = new ScenarioPrinter();
         String scenario = scenarioPrinter.print(invocations);
 
@@ -427,7 +427,7 @@ public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwar
         ));
     }
 
-    public void noMoreInteractionsWantedInOrder(Invocation undesired) {
+    public void noMoreInteractionsWantedInOrder(InvocationImpl undesired) {
         throw new VerificationInOrderFailure(join(
                 "No interactions wanted here:",
                 new LocationImpl(),

File: src/org/mockito/internal/InOrderImpl.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.InOrder;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.verification.InOrderContextImpl;
 import org.mockito.internal.verification.InOrderWrapper;
 import org.mockito.internal.verification.VerificationModeFactory;
@@ -50,11 +50,11 @@ public <T> T verify(T mock, VerificationMode mode) {
         return mockitoCore.verify(mock, new InOrderWrapper((VerificationInOrderMode) mode, this));
     }
 
-    public boolean isVerified(Invocation i) {
+    public boolean isVerified(InvocationImpl i) {
         return inOrderContext.isVerified(i);
     }
 
-    public void markVerified(Invocation i) {        
+    public void markVerified(InvocationImpl i) {
         inOrderContext.markVerified(i);
     }
 

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.internal;
 
 import org.mockito.internal.creation.MockSettingsImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.MatchersBinder;
 import org.mockito.internal.progress.MockingProgress;
@@ -52,7 +52,7 @@ public MockHandler(MockHandlerInterface<T> oldMockHandler) {
         this(oldMockHandler.getMockSettings());
     }
 
-    public Object handle(Invocation invocation) throws Throwable {
+    public Object handle(InvocationImpl invocation) throws Throwable {
 		if (invocationContainerImpl.hasAnswersForStubbing()) {
             // stubbing voids with stubVoid() or doAnswer() style
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -45,7 +45,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
         MockitoMethod mockitoMethod = createMockitoMethod(method);
         
         FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(mockitoMethodProxy);
-        Invocation invocation = new Invocation(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);
+        InvocationImpl invocation = new InvocationImpl(proxy, mockitoMethod, args, SequenceNumber.next(), realMethod);
         return handler.handle(invocation);
     }
    

File: src/org/mockito/internal/invocation/InvocationImpl.java
Patch:
@@ -27,7 +27,7 @@
  * Contains stack trace of invocation
  */
 @SuppressWarnings("unchecked")
-public class Invocation implements PublicInvocation, PrintableInvocation, InvocationOnMock, VerificationAwareInvocation {
+public class InvocationImpl implements PublicInvocation, PrintableInvocation, InvocationOnMock, VerificationAwareInvocation {
 
     private static final long serialVersionUID = 8240069639250980199L;
     private final int sequenceNumber;
@@ -43,7 +43,7 @@ public class Invocation implements PublicInvocation, PrintableInvocation, Invoca
     final RealMethod realMethod;
     private StubInfo stubInfo;
 
-    public Invocation(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {
+    public InvocationImpl(Object mock, MockitoMethod mockitoMethod, Object[] args, int sequenceNumber, RealMethod realMethod) {
         this.method = mockitoMethod;
         this.mock = mock;
         this.realMethod = realMethod;
@@ -78,7 +78,7 @@ public boolean equals(Object o) {
             return false;
         }
 
-        Invocation other = (Invocation) o;
+        InvocationImpl other = (InvocationImpl) o;
 
         return this.mock.equals(other.mock) && this.method.equals(other.method) && this.equalArguments(other.arguments);
     }

File: src/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -18,15 +18,15 @@ public class MatchersBinder implements Serializable {
 
     private static final long serialVersionUID = -311433939339443463L;
 
-    public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, Invocation invocation) {
+    public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStorage, InvocationImpl invocation) {
         List<LocalizedMatcher> lastMatchers = argumentMatcherStorage.pullLocalizedMatchers();
         validateMatchers(invocation, lastMatchers);
 
         InvocationMatcher invocationWithMatchers = new InvocationMatcher(invocation, (List<Matcher>)(List) lastMatchers);
         return invocationWithMatchers;
     }
 
-    private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {
+    private void validateMatchers(InvocationImpl invocation, List<LocalizedMatcher> lastMatchers) {
         if (!lastMatchers.isEmpty()) {
             int recordedMatchersSize = lastMatchers.size();
             int expectedMatchersSize = invocation.getArguments().length;

File: src/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -18,8 +18,8 @@ public class UnusedStubsFinder {
      * 
      * @param mocks
      */
-    public List<Invocation> find(List<?> mocks) {
-        List<Invocation> unused = new LinkedList<Invocation>();
+    public List<InvocationImpl> find(List<?> mocks) {
+        List<InvocationImpl> unused = new LinkedList<InvocationImpl>();
         for (Object mock : mocks) {
             MockHandlerInterface<Object> handler = new MockUtil().getMockHandler(mock);
             List<StubbedInvocationMatcher> fromSingleMock = handler.getInvocationContainer().getStubbedInvocations();

File: src/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -6,7 +6,7 @@
 package org.mockito.internal.progress;
 
 import org.mockito.MockSettings;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.verification.VerificationMode;
 
@@ -23,7 +23,7 @@ public interface MockingProgress {
 
     void stubbingStarted();
 
-    void stubbingCompleted(Invocation invocation);
+    void stubbingCompleted(InvocationImpl invocation);
     
     void validateState();
 

File: src/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.internal.debugging.Localized;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.internal.listeners.MockingStartedListener;
 import org.mockito.verification.VerificationMode;
@@ -89,7 +89,7 @@ private void validateMostStuff() {
         getArgumentMatcherStorage().validateState();
     }
 
-    public void stubbingCompleted(Invocation invocation) {
+    public void stubbingCompleted(InvocationImpl invocation) {
         stubbingInProgress = null;
     }
     

File: src/org/mockito/internal/progress/ThreadSafeMockingProgress.java
Patch:
@@ -8,7 +8,7 @@
 import java.io.Serializable;
 
 import org.mockito.MockSettings;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.verification.VerificationMode;
 
@@ -49,7 +49,7 @@ public void validateState() {
         threadSafely().validateState();
     }
 
-    public void stubbingCompleted(Invocation invocation) {
+    public void stubbingCompleted(InvocationImpl invocation) {
         threadSafely().stubbingCompleted(invocation);
     }
     

File: src/org/mockito/internal/reporting/PrintSettings.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.hamcrest.Matcher;
 import org.mockito.internal.invocation.ArgumentsProcessor;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.matchers.MatchersPrinter;
 import org.mockito.internal.util.MockUtil;
@@ -43,7 +43,7 @@ public void setMatchersToBeDescribedWithExtraTypeInfo(Integer[] indexesOfMatcher
         this.withTypeInfo = Arrays.asList(indexesOfMatchers);
     }
 
-    public String print(List<Matcher> matchers, Invocation invocation) {
+    public String print(List<Matcher> matchers, InvocationImpl invocation) {
         MatchersPrinter matchersPrinter = new MatchersPrinter();
         String qualifiedName = new MockUtil().getMockName(invocation.getMock()) + "." + invocation.getMethod().getName();
         String invocationString = qualifiedName + matchersPrinter.getArgumentsLine(matchers, this);
@@ -54,7 +54,7 @@ public String print(List<Matcher> matchers, Invocation invocation) {
         }
     }
 
-    public String print(Invocation invocation) {
+    public String print(InvocationImpl invocation) {
         return print(ArgumentsProcessor.argumentsToMatchers(invocation.getArguments()), invocation);
     }
 

File: src/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.internal.reporting;
 
 
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 
 /**
@@ -18,7 +18,7 @@ public class SmartPrinter {
     private final String wanted;
     private final String actual;
 
-    public SmartPrinter(InvocationMatcher wanted, Invocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {
+    public SmartPrinter(InvocationMatcher wanted, InvocationImpl actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
         printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.TreeSet;
 
 import org.mockito.internal.creation.ClassNameFinder;
-import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.util.MockName;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.ObjectMethodsGuru;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -10,10 +10,10 @@
 import org.mockito.Mockito;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.plugins.MockMaker;
 import org.mockito.internal.configuration.ClassPathLoader;
 import org.mockito.internal.creation.MockSettingsImpl;
-import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.plugins.MockitoInvocationHandler;
@@ -50,7 +50,7 @@ private ThrowingInterceptor(InvocationOnMock invocation) {
             this.invocation = invocation;
         }
 
-        public Object handle(Invocation nullDereference) throws Throwable {
+        public Object handle(InvocationImpl nullDereference) throws Throwable {
             if (new ObjectMethodsGuru().isToString(nullDereference.getMethod())) {
                 return "SmartNull returned by this unstubbed method call on a mock:\n" +
                         invocation.toString();

File: src/org/mockito/internal/verification/AtLeast.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
@@ -41,7 +41,7 @@ public void verify(VerificationData data) {
     }
     
     public void verifyInOrder(VerificationDataInOrder data) {
-        List<Invocation> allInvocations = data.getAllInvocations();
+        List<InvocationImpl> allInvocations = data.getAllInvocations();
         InvocationMatcher wanted = data.getWanted();
         
         MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();

File: src/org/mockito/internal/verification/AtMost.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
@@ -29,11 +29,11 @@ public AtMost(int maxNumberOfInvocations) {
     }
 
     public void verify(VerificationData data) {
-        List<Invocation> invocations = data.getAllInvocations();
+        List<InvocationImpl> invocations = data.getAllInvocations();
         InvocationMatcher wanted = data.getWanted();
         
         InvocationsFinder finder = new InvocationsFinder();
-        List<Invocation> found = finder.findInvocations(invocations, wanted);
+        List<InvocationImpl> found = finder.findInvocations(invocations, wanted);
         int foundSize = found.size();
         if (foundSize > maxNumberOfInvocations) {
             new Reporter().wantedAtMostX(maxNumberOfInvocations, foundSize);

File: src/org/mockito/internal/verification/Calls.java
Patch:
@@ -6,7 +6,7 @@
 package org.mockito.internal.verification;
 
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
@@ -32,7 +32,7 @@ public void verify(VerificationData data) {
     }
 
     public void verifyInOrder(VerificationDataInOrder data) {
-        List<Invocation> allInvocations = data.getAllInvocations();
+        List<InvocationImpl> allInvocations = data.getAllInvocations();
         InvocationMatcher wanted = data.getWanted();
         
         MissingInvocationInOrderChecker missingInvocation = new MissingInvocationInOrderChecker();

File: src/org/mockito/internal/verification/InOrderContextImpl.java
Patch:
@@ -4,19 +4,19 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.util.collections.IdentitySet;
 import org.mockito.internal.verification.api.InOrderContext;
 
 public class InOrderContextImpl implements InOrderContext {
     
     final IdentitySet verified = new IdentitySet();
 
-    public boolean isVerified(Invocation invocation) {
+    public boolean isVerified(InvocationImpl invocation) {
         return verified.contains(invocation);
     }
 
-    public void markVerified(Invocation i) {
+    public void markVerified(InvocationImpl i) {
         verified.add(i);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/Times.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationDataInOrder;
@@ -40,7 +40,7 @@ public void verify(VerificationData data) {
     }
     
     public void verifyInOrder(VerificationDataInOrder data) {
-        List<Invocation> allInvocations = data.getAllInvocations();
+        List<InvocationImpl> allInvocations = data.getAllInvocations();
         InvocationMatcher wanted = data.getWanted();
         
         if (wantedCount > 0) {

File: src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
@@ -20,8 +20,8 @@ public class AtLeastXNumberOfInvocationsChecker {
     InvocationsFinder finder = new InvocationsFinder();
     InvocationMarker invocationMarker = new InvocationMarker();
 
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
-        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);
+    public void check(List<InvocationImpl> invocations, InvocationMatcher wanted, int wantedCount) {
+        List<InvocationImpl> actualInvocations = finder.findInvocations(invocations, wanted);
         
         int actualCount = actualInvocations.size();
         if (wantedCount > actualCount) {

File: src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
@@ -26,8 +26,8 @@ public AtLeastXNumberOfInvocationsInOrderChecker(InOrderContext orderingContext)
         this.orderingContext = orderingContext;
     }
 
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
-        List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted, orderingContext);
+    public void check(List<InvocationImpl> invocations, InvocationMatcher wanted, int wantedCount) {
+        List<InvocationImpl> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted, orderingContext);
         
         int actualCount = chunk.size();
         

File: src/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.exceptions.Discrepancy;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
@@ -32,11 +32,11 @@ public NonGreedyNumberOfInvocationsInOrderChecker() {
         this.marker = marker;
     }
     
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
+    public void check(List<InvocationImpl> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
         int actualCount = 0;
         LocationImpl lastLocation = null;
         while( actualCount < wantedCount ){
-            Invocation next = finder.findFirstMatchingUnverifiedInvocation( invocations, wanted, context );
+            InvocationImpl next = finder.findFirstMatchingUnverifiedInvocation( invocations, wanted, context );
             if( next == null ){
                 reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastLocation );
             }

File: src/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.exceptions.Discrepancy;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
@@ -30,8 +30,8 @@ public NumberOfInvocationsChecker() {
         this.finder = finder;
     }
     
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
-        List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);
+    public void check(List<InvocationImpl> invocations, InvocationMatcher wanted, int wantedCount) {
+        List<InvocationImpl> actualInvocations = finder.findInvocations(invocations, wanted);
         
         int actualCount = actualInvocations.size();
         if (wantedCount > actualCount) {

File: src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.exceptions.Discrepancy;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
@@ -31,8 +31,8 @@ public NumberOfInvocationsInOrderChecker() {
         this.reporter = reporter;
     }
     
-    public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
-        List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);
+    public void check(List<InvocationImpl> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
+        List<InvocationImpl> chunk = finder.findMatchingChunk(invocations, wanted, wantedCount, context);
         
         int actualCount = chunk.size();
         

File: src/org/mockito/plugins/MockitoInvocationHandler.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.plugins;
 
 import org.mockito.internal.Incubating;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 
 import java.io.Serializable;
 
@@ -28,6 +28,6 @@ public interface MockitoInvocationHandler extends Serializable {
      * @throws Throwable Throwable
      */
     @Incubating
-    Object handle(Invocation invocation) throws Throwable;
+    Object handle(InvocationImpl invocation) throws Throwable;
 
 }

File: test/org/mockito/internal/creation/MethodInterceptorFilterTest.java
Patch:
@@ -16,9 +16,9 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.cglib.proxy.MethodProxy;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.plugins.MockitoInvocationHandler;
 import org.mockito.internal.creation.cglib.CGLIBHacker;
-import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.MockitoMethod;
 import org.mockito.internal.invocation.SerializableMethod;
@@ -47,7 +47,7 @@ public void shouldProvideOwnImplementationOfHashCode() throws Throwable {
 
         //then
         assertTrue((Integer) ret != 0);
-        Mockito.verify(handler, never()).handle(any(Invocation.class));
+        Mockito.verify(handler, never()).handle(any(InvocationImpl.class));
     }
 
     @Test
@@ -58,7 +58,7 @@ public void shouldProvideOwnImplementationOfEquals() throws Throwable {
 
         //then
         assertTrue((Boolean) ret);
-        Mockito.verify(handler, never()).handle(any(Invocation.class));
+        Mockito.verify(handler, never()).handle(any(InvocationImpl.class));
     }
     
     //TODO: move to separate factory

File: test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.exceptions.PrintableInvocation;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.StubInfoImpl;
 import org.mockito.internal.listeners.NotifiedMethodInvocationReport;
@@ -23,7 +23,7 @@ public class VerboseMockInvocationLoggerTest {
     private VerboseMockInvocationLogger listener;
 
     private ByteArrayOutputStream output;
-    private Invocation invocation = new InvocationBuilder().toInvocation();
+    private InvocationImpl invocation = new InvocationBuilder().toInvocation();
     private PrintableInvocation stubbedInvocation = new InvocationBuilder().toInvocation();
 
     @Before

File: test/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -32,7 +32,7 @@ public class InvocationBuilder {
      *
      * @return invocation
      */
-    public Invocation toInvocation() {
+    public InvocationImpl toInvocation() {
         if (method == null) {
             List<Class> argTypes = new LinkedList<Class>();
             for (Object arg : args) {
@@ -50,7 +50,7 @@ public Invocation toInvocation() {
             }
         }
         
-        Invocation i = new Invocation(mock, new SerializableMethod(method), args, sequenceNumber, null);
+        InvocationImpl i = new InvocationImpl(mock, new SerializableMethod(method), args, sequenceNumber, null);
         if (verified) {
             i.markVerified();
         }

File: test/org/mockito/internal/stubbing/MockitoStubberTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.MockingProgress;
@@ -21,7 +21,7 @@ public class MockitoStubberTest extends TestBase{
 
     private InvocationContainerImpl invocationContainerImpl;
     private MockingProgress state;
-    private Invocation simpleMethod;
+    private InvocationImpl simpleMethod;
 
     @Before
     public void setup() {
@@ -56,7 +56,7 @@ public void shouldGetResultsForMethods() throws Throwable {
         invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));
         invocationContainerImpl.addAnswer(new Returns("simpleMethod"));
         
-        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();
+        InvocationImpl differentMethod = new InvocationBuilder().differentMethod().toInvocation();
         invocationContainerImpl.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));
         invocationContainerImpl.addAnswer(new ThrowsException(new MyException()));
         

File: test/org/mockito/internal/stubbing/answers/MethodInfoTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.internal.stubbing.answers;
 
 import org.junit.Test;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 
 import java.nio.charset.CharacterCodingException;
@@ -16,7 +16,7 @@ public class MethodInfoTest {
     @Test
     public void shouldKnowValidThrowables() throws Exception {
         //when
-        Invocation invocation = new InvocationBuilder().method("canThrowException").toInvocation();
+        InvocationImpl invocation = new InvocationBuilder().method("canThrowException").toInvocation();
         MethodInfo info = new MethodInfo(invocation);
 
         //then

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.*;
 
 import org.junit.Test;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockitoutil.TestBase;
 
 import static org.mockito.Mockito.mock;
@@ -55,7 +55,7 @@ public class ReturnsEmptyValuesTest extends TestBase {
         //given
         Date d = mock(Date.class);
         d.compareTo(new Date());
-        Invocation compareTo = this.getLastInvocation();
+        InvocationImpl compareTo = this.getLastInvocation();
 
         //when
         Object result = values.answer(compareTo);

File: test/org/mockito/internal/verification/RegisteredInvocationsTest.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockitoutil.TestBase;
 
@@ -22,8 +22,8 @@ public void setup() {
     
     @Test
     public void shouldNotReturnToStringMethod() throws Exception {
-        Invocation toString = new InvocationBuilder().method("toString").toInvocation();
-        Invocation simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();
+        InvocationImpl toString = new InvocationBuilder().method("toString").toInvocation();
+        InvocationImpl simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();
         
         invocations.add(toString);
         invocations.add(simpleMethod);

File: test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.exceptions.PrintableInvocation;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.Invocation;
+import org.mockito.internal.invocation.InvocationImpl;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockitoutil.TestBase;
@@ -27,7 +27,7 @@ public class MissingInvocationCheckerTest extends TestBase {
     private ReporterStub reporterStub;
     
     private InvocationMatcher wanted;
-    private List<Invocation> invocations;
+    private List<InvocationImpl> invocations;
 
     @Before
     public void setup() {
@@ -77,7 +77,7 @@ public void shouldReportWantedButNotInvoked() {
     @Test
     public void shouldReportWantedInvocationDiffersFromActual() {
         assertTrue(finderStub.actualToReturn.isEmpty());
-        Invocation actualInvocation = new InvocationBuilder().toInvocation();
+        InvocationImpl actualInvocation = new InvocationBuilder().toInvocation();
         finderStub.similarToReturn = actualInvocation;
         
         checker.check(invocations, wanted);

File: src/org/mockito/internal/debugging/LocationImpl.java
Patch:
@@ -7,8 +7,9 @@
 import java.io.Serializable;
 
 import org.mockito.internal.exceptions.base.StackTraceFilter;
+import org.mockito.invocation.Location;
 
-public class LocationImpl implements Serializable {
+public class LocationImpl implements Location, Serializable {
 
     private static final long serialVersionUID = -9054861157390980624L;
     private final Throwable stackTraceHolder;

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockito.internal.reporting.PrintSettings;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.invocation.PublicInvocation;
+import org.mockito.invocation.StubInfo;
 
 import java.lang.reflect.Method;
 import java.util.Arrays;

File: src/org/mockito/invocation/PublicInvocation.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockito.invocation;
 
-import org.mockito.internal.debugging.LocationImpl;
-import org.mockito.internal.invocation.StubInfo;
+import org.mockito.internal.invocation.StubInfoImpl;
 
 /**
  * by Szczepan Faber, created at: 3/31/12
@@ -12,7 +11,7 @@ public interface PublicInvocation extends InvocationOnMock {
 
     int getSequenceNumber();
 
-    LocationImpl getLocation();
+    Location getLocation();
 
     Object[] getRawArguments();
 

File: src/org/mockito/exceptions/PrintableInvocation.java
Patch:
@@ -5,12 +5,12 @@
 
 package org.mockito.exceptions;
 
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 
 public interface PrintableInvocation {
     
     String toString();
     
-    Location getLocation();
+    LocationImpl getLocation();
     
 }
\ No newline at end of file

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.hamcrest.Matcher;
 import org.mockito.exceptions.PrintableInvocation;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.matchers.CapturesArguments;
 import org.mockito.internal.reporting.PrintSettings;
 
@@ -110,7 +110,7 @@ public boolean hasSameMethod(Invocation candidate) {
         return false;
     }
     
-    public Location getLocation() {
+    public LocationImpl getLocation() {
         return invocation.getLocation();
     }
 

File: src/org/mockito/internal/invocation/InvocationsFinder.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.util.collections.ListUtil;
 import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockito.internal.verification.api.InOrderContext;
@@ -102,7 +102,7 @@ Invocation findFirstUnverified(List<Invocation> invocations, Object mock) {
         return null;
     }
 
-    public Location getLastLocation(List<Invocation> invocations) {
+    public LocationImpl getLastLocation(List<Invocation> invocations) {
         if (invocations.isEmpty()) {
             return null;
         } else {

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -9,10 +9,10 @@
 
 import org.mockito.Mockito;
 import org.mockito.exceptions.Reporter;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.plugins.MockMaker;
 import org.mockito.internal.configuration.ClassPathLoader;
 import org.mockito.internal.creation.MockSettingsImpl;
-import org.mockito.internal.debugging.Location;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.invocation.InvocationOnMock;
@@ -44,7 +44,7 @@ public class ReturnsSmartNulls implements Answer<Object>, Serializable {
 
     private final class ThrowingInterceptor implements MockitoInvocationHandler {
         private final InvocationOnMock invocation;
-        private final Location location = new Location();
+        private final LocationImpl location = new LocationImpl();
 
         private ThrowingInterceptor(InvocationOnMock invocation) {
             this.invocation = invocation;

File: src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationMarker;
@@ -25,7 +25,7 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
         
         int actualCount = actualInvocations.size();
         if (wantedCount > actualCount) {
-            Location lastLocation = finder.getLastLocation(actualInvocations);
+            LocationImpl lastLocation = finder.getLastLocation(actualInvocations);
             reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        
         }
         

File: src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -32,7 +32,7 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
         int actualCount = chunk.size();
         
         if (wantedCount > actualCount) {
-            Location lastLocation = finder.getLastLocation(chunk);
+            LocationImpl lastLocation = finder.getLastLocation(chunk);
             reporter.tooLittleActualInvocationsInOrder(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);
         }
         

File: src/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java
Patch:
@@ -7,7 +7,7 @@
 
 import org.mockito.exceptions.Discrepancy;
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -34,7 +34,7 @@ public NonGreedyNumberOfInvocationsInOrderChecker() {
     
     public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
         int actualCount = 0;
-        Location lastLocation = null;
+        LocationImpl lastLocation = null;
         while( actualCount < wantedCount ){
             Invocation next = finder.findFirstMatchingUnverifiedInvocation( invocations, wanted, context );
             if( next == null ){

File: src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.mockito.exceptions.Discrepancy;
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -37,10 +37,10 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
         int actualCount = chunk.size();
         
         if (wantedCount > actualCount) {
-            Location lastInvocation = finder.getLastLocation(chunk);
+            LocationImpl lastInvocation = finder.getLastLocation(chunk);
             reporter.tooLittleActualInvocationsInOrder(new Discrepancy(wantedCount, actualCount), wanted, lastInvocation);
         } else if (wantedCount < actualCount) {
-            Location firstUndesired = chunk.get(wantedCount).getLocation();
+            LocationImpl firstUndesired = chunk.get(wantedCount).getLocation();
             reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);
         }
         

File: src/org/mockito/invocation/PublicInvocation.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.invocation;
 
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.StubInfo;
 
 /**
@@ -12,7 +12,7 @@ public interface PublicInvocation extends InvocationOnMock {
 
     int getSequenceNumber();
 
-    Location getLocation();
+    LocationImpl getLocation();
 
     Object[] getRawArguments();
 

File: test/org/mockito/internal/invocation/InvocationsFinderTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.verification.InOrderContextImpl;
 import org.mockito.internal.verification.api.InOrderContext;
 import org.mockitousage.IMethods;
@@ -125,7 +125,7 @@ public void shouldFindInvocationWithTheSameMethod() throws Exception {
     
     @Test
     public void shouldGetLastStackTrace() throws Exception {
-        Location last = finder.getLastLocation(invocations);
+        LocationImpl last = finder.getLastLocation(invocations);
         assertSame(differentMethodInvocation.getLocation(), last);
         
         assertNull(finder.getLastLocation(Collections.<Invocation>emptyList()));

File: test/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Test;
 import org.mockito.exceptions.PrintableInvocation;
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -91,14 +91,14 @@ public void shouldReportWantedInvocationDiffersFromActual() {
     class ReporterStub extends Reporter {
         private Object wanted;
         private String actual;
-        private Location actualLocation;
+        private LocationImpl actualLocation;
         
         @Override
         public void wantedButNotInvoked(PrintableInvocation wanted, List<? extends PrintableInvocation> invocations) {
             this.wanted = wanted;
         }
         
-        @Override public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {
+        @Override public void argumentsAreDifferent(String wanted, String actual, LocationImpl actualLocation) {
                     this.wanted = wanted;
                     this.actual = actual;
                     this.actualLocation = actualLocation;

File: test/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Test;
 import org.mockito.exceptions.PrintableInvocation;
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.Location;
+import org.mockito.internal.debugging.LocationImpl;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -85,7 +85,7 @@ class ReporterStub extends Reporter {
         private PrintableInvocation previous;
         private String wantedString;
         private String actual;
-        private Location actualLocation;
+        private LocationImpl actualLocation;
         
         @Override public void wantedButNotInvokedInOrder(PrintableInvocation wanted, PrintableInvocation previous) {
             this.wanted = wanted;
@@ -96,7 +96,7 @@ class ReporterStub extends Reporter {
             this.wanted = wanted;
         }
 
-        @Override public void argumentsAreDifferent(String wanted, String actual, Location actualLocation) {
+        @Override public void argumentsAreDifferent(String wanted, String actual, LocationImpl actualLocation) {
             this.wantedString = wanted;
             this.actual = actual;
             this.actualLocation = actualLocation;

File: src/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -29,7 +29,7 @@ public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStor
     private void validateMatchers(Invocation invocation, List<LocalizedMatcher> lastMatchers) {
         if (!lastMatchers.isEmpty()) {
             int recordedMatchersSize = lastMatchers.size();
-            int expectedMatchersSize = invocation.getArgumentsCount();
+            int expectedMatchersSize = invocation.getArguments().length;
             if (expectedMatchersSize != recordedMatchersSize) {
                 new Reporter().invalidUseOfMatchers(expectedMatchersSize, lastMatchers);
             }

File: src/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -143,7 +143,7 @@ static <T> List<T> loadImplementations(Class<T> service) {
         return result;
     }
 
-    private static List<String> readerToLines(Reader reader) throws IOException {
+    static List<String> readerToLines(Reader reader) throws IOException {
         List<String> result = new ArrayList<String>();
         BufferedReader lineReader = new BufferedReader(reader);
         String line;
@@ -153,7 +153,7 @@ private static List<String> readerToLines(Reader reader) throws IOException {
         return result;
     }
 
-    private static String stripCommentAndWhitespace(String line) {
+    static String stripCommentAndWhitespace(String line) {
         int hash = line.indexOf('#');
         if (hash != -1) {
             line = line.substring(0, hash);

File: src/org/mockito/internal/util/reflection/Fields.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.mockito.internal.Incubating;
 import org.mockito.internal.util.Checks;
-import org.mockito.internal.util.ListUtil;
-import org.mockito.internal.util.ListUtil.Filter;
+import org.mockito.internal.util.collections.ListUtil.Filter;
+import org.mockito.internal.util.collections.ListUtil;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;

File: subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.List;
 import java.util.WeakHashMap;
 
-import static org.mockito.internal.util.reflection.Fields.notAnnotatedBy;
+import static org.mockito.internal.util.reflection.Fields.annotatedBy;
 
 public class MockitoBeforeTestNGMethod {
 
@@ -44,7 +44,7 @@ private void initMocks(ITestResult testResult) {
     }
 
     private void initializeCaptors(Object instance) {
-        List<InstanceField> instanceFields = Fields.allFieldsInHierarchy(instance).filter(notAnnotatedBy(Captor.class)).instanceFields();
+        List<InstanceField> instanceFields = Fields.allDeclaredFieldsOf(instance).filter(annotatedBy(Captor.class)).instanceFields();
         for (InstanceField instanceField : instanceFields) {
             new CaptorAnnotationProcessor().process(instanceField.annotation(Captor.class), instanceField.jdkField());
         }

File: src/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.configuration;
 
 import org.mockito.configuration.IMockitoConfiguration;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.MockitoConfigurationException;
 import org.mockito.internal.creation.CglibMockMaker;
 import org.mockito.plugins.MockMaker;
@@ -19,7 +20,6 @@
 import java.util.Collections;
 import java.util.Enumeration;
 import java.util.List;
-import java.util.ServiceConfigurationError;
 
 public class ClassPathLoader {
     private static final MockMaker mockMaker = findPlatformMockMaker();
@@ -81,7 +81,7 @@ static <T> List<T> loadImplementations(Class<T> service) {
         try {
             resources = loader.getResources("mockito-extensions/" + service.getName());
         } catch (IOException e) {
-            throw new ServiceConfigurationError("Failed to load " + service, e);
+            throw new MockitoException("Failed to load " + service, e);
         }
 
         List<T> result = new ArrayList<T>();
@@ -96,7 +96,7 @@ static <T> List<T> loadImplementations(Class<T> service) {
                     }
                 }
             } catch (Exception e) {
-                throw new ServiceConfigurationError(
+                throw new MockitoException(
                         "Failed to load " + service + " using " + resource, e);
             } finally {
                 closeQuietly(in);

File: src/org/mockito/internal/util/reflection/Fields.java
Patch:
@@ -65,7 +65,6 @@ public InstanceFields(Object instance, List<InstanceField> instanceFields) {
             this.instanceFields = instanceFields;
         }
 
-        // TODO get Filter out of ListFilter
         public InstanceFields filter(Filter<InstanceField> withFilter) {
             return new InstanceFields(instance, ListUtil.filter(instanceFields, withFilter));
         }

File: src/org/mockito/MockSettings.java
Patch:
@@ -205,7 +205,7 @@ public interface MockSettings extends Serializable, MockSettingsInfo {
      * <ul>
      *     <li>Final classes but with an interface</li>
      *     <li>Already custom proxied object</li>
-     *     <li>Special objects with a finalize method, that should be executed 2 times</li>
+     *     <li>Special objects with a finalize method, i.e. to avoid executing it 2 times</li>
      *     <li>...</li>
      * </ul>
      * Sets the real implementation to be called when the method is called on a mock object.

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.MockSettings;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.VerboseMockInvocationLogger;
-import org.mockito.internal.stubbing.defaultanswers.ReturnsDelegate;
+import org.mockito.internal.stubbing.defaultanswers.ForwardsInvocations;
 import org.mockito.internal.util.MockName;
 import org.mockito.listeners.InvocationListener;
 import org.mockito.stubbing.Answer;
@@ -139,7 +139,7 @@ public void redefineMockName(String newName) {
 
 	public MockSettings forwardTo(Object delegatedInstance) {
 		this.delegatedInstance = delegatedInstance ;
-		return defaultAnswer(new ReturnsDelegate(this.delegatedInstance)) ;
+		return defaultAnswer(new ForwardsInvocations(this.delegatedInstance)) ;
 	}
 }
 

File: subprojects/testng/src/test/java/org/mockitousage/testng/EnsureMocksAreInitializedBeforeBeforeClassMethodTest.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockitousage.testng;
 
-import org.junit.BeforeClass;
 import org.mockito.Mock;
 import org.mockito.testng.MockitoTestNGListener;
+import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Listeners;
 import org.testng.annotations.Test;
 

File: subprojects/testng/src/main/java/DummyTestNgListener.java
Patch:
@@ -1,3 +0,0 @@
-public class DummyTestNgListener {
-
-}
\ No newline at end of file

File: subprojects/testng/src/test/java/DummyTestNgListenerTest.java
Patch:
@@ -1,3 +0,0 @@
-public class DummyTestNgListenerTest {
-
-}
\ No newline at end of file

File: src/org/mockito/internal/Incubating.java
Patch:
@@ -9,7 +9,7 @@
 import java.lang.annotation.RetentionPolicy;
 
 /**
- * Indicates the type or method is work in progress and might change.
+ * Indicates the type or method is <strong>work in progress</strong> and might change.
  */
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Incubating {

File: src/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -14,6 +14,8 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import static org.mockito.internal.util.collections.Sets.newMockSafeHashSet;
+
 /**
  * See {@link MockitoAnnotations}
  */
@@ -87,7 +89,7 @@ private void processIndependentAnnotations(final Class<?> clazz, final Object te
     public void injectMocks(final Object testClassInstance) {
         Class<?> clazz = testClassInstance.getClass();
         Set<Field> mockDependentFields = new HashSet<Field>();
-        Set<Object> mocks = new HashSet<Object>();
+        Set<Object> mocks = newMockSafeHashSet();
         
         while (clazz != Object.class) {
             new InjectMocksScanner(clazz).addTo(mockDependentFields);

File: src/org/mockito/internal/configuration/injection/MockInjection.java
Patch:
@@ -12,6 +12,7 @@
 
 import static org.mockito.internal.util.Checks.checkItemsNotNull;
 import static org.mockito.internal.util.Checks.checkNotNull;
+import static org.mockito.internal.util.collections.Sets.newMockSafeHashSet;
 
 /**
  * Internal injection configuration utility.
@@ -52,7 +53,7 @@ public static OngoingMockInjection onFields(Set<Field> fields, Object ofInstance
      */
     public static class OngoingMockInjection {
         private Set<Field> fields = new HashSet<Field>();
-        private Set<Object> mocks = new HashSet<Object>();
+        private Set<Object> mocks = newMockSafeHashSet();
         private Object fieldOwner;
         private MockInjectionStrategy injectionStrategies = MockInjectionStrategy.nop();
         private MockInjectionStrategy postInjectionStrategies = MockInjectionStrategy.nop();

File: src/org/mockito/internal/configuration/injection/scanner/MockScanner.java
Patch:
@@ -7,9 +7,10 @@
 import org.mockito.internal.util.reflection.FieldReader;
 
 import java.lang.reflect.Field;
-import java.util.HashSet;
 import java.util.Set;
 
+import static org.mockito.internal.util.collections.Sets.newMockSafeHashSet;
+
 /**
  * Scan mocks, and prepare them if needed.
  */
@@ -48,7 +49,7 @@ public void addPreparedMocks(Set<Object> mocks) {
      * @return A prepared set of mock
      */
     private Set<Object> scan() {
-        Set<Object> mocks = new HashSet<Object>();
+        Set<Object> mocks = newMockSafeHashSet();
         for (Field field : clazz.getDeclaredFields()) {
             // mock or spies only
             FieldReader fieldReader = new FieldReader(instance, field);

File: src/org/mockito/internal/invocation/InvocationsFinder.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.List;
 
 import org.mockito.internal.debugging.Location;
-import org.mockito.internal.util.ListUtil;
-import org.mockito.internal.util.ListUtil.Filter;
+import org.mockito.internal.util.collections.ListUtil;
+import org.mockito.internal.util.collections.ListUtil.Filter;
 import org.mockito.internal.verification.api.InOrderContext;
 
 public class InvocationsFinder {

File: src/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java
Patch:
@@ -6,7 +6,7 @@
 package org.mockito.internal.invocation.finder;
 
 import org.mockito.internal.invocation.Invocation;
-import org.mockito.internal.util.ListUtil;
+import org.mockito.internal.util.collections.ListUtil;
 
 import java.util.List;
 

File: src/org/mockito/internal/util/collections/ListUtil.java
Patch:
@@ -3,7 +3,7 @@
  * This program is made available under the terms of the MIT License.
  */
 
-package org.mockito.internal.util;
+package org.mockito.internal.util.collections;
 
 import java.util.Collection;
 import java.util.LinkedList;

File: src/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -6,8 +6,8 @@
 package org.mockito.internal.verification;
 
 import org.mockito.internal.invocation.Invocation;
-import org.mockito.internal.util.ListUtil;
-import org.mockito.internal.util.ListUtil.Filter;
+import org.mockito.internal.util.collections.ListUtil;
+import org.mockito.internal.util.collections.ListUtil.Filter;
 
 import java.io.Serializable;
 import java.util.Collections;

File: src/org/mockito/Mockito.java
Patch:
@@ -1103,7 +1103,8 @@ public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
      * <h4>Important gotcha on spying real objects!</h4>
      * <ol>
      * <li>Sometimes it's impossible or impractical to use {@link Mockito#when(Object)} for stubbing spies.
-     * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code> family of methods for stubbing. Example:
+     * Therefore when using spies please consider <code>doReturn</code>|<code>Answer</code>|<code>Throw()</code>|<code>CallRealMethod</code>
+     * family of methods for stubbing. Example:
      *
      * <pre class="code"><code class="java">
      *   List list = new LinkedList();

File: src/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -10,6 +10,7 @@
 
 import org.hamcrest.Matcher;
 import org.mockito.exceptions.Reporter;
+import org.mockito.internal.matchers.LocalizedMatcher;
 import org.mockito.internal.progress.ArgumentMatcherStorage;
 
 @SuppressWarnings("unchecked")
@@ -25,12 +26,12 @@ public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStor
         return invocationWithMatchers;
     }
 
-    private void validateMatchers(Invocation invocation, List<Matcher> matchers) {
+    private void validateMatchers(Invocation invocation, List<? extends Matcher> matchers) {
         if (!matchers.isEmpty()) {
             int recordedMatchersSize = matchers.size();
             int expectedMatchersSize = invocation.getArgumentsCount();
             if (expectedMatchersSize != recordedMatchersSize) {
-                new Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);
+                new Reporter().invalidUseOfMatchers(expectedMatchersSize, (List<LocalizedMatcher>)matchers);
             }
         }
     }

File: src/org/mockito/internal/Incubating.java
Patch:
@@ -9,7 +9,7 @@
 import java.lang.annotation.RetentionPolicy;
 
 /**
- * Indicates the type or method is work in progress and might chagnge.
+ * Indicates the type or method is work in progress and might change.
  */
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Incubating {

File: src/org/mockito/Mockito.java
Patch:
@@ -1824,7 +1824,7 @@ public static VerificationMode atMost(int maxNumberOfInvocations) {
     /**
      * Allows non-greedy verification in order.  For example
      * <pre class="code"><code class="java">
-     *   inOrder.verify( mock, timesNow( 2 )).someMethod( "some arg" );
+     *   inOrder.verify( mock, calls( 2 )).someMethod( "some arg" );
      * </code></pre>
      * <ul>
      * <li>will not fail if the method is called 3 times, unlike times( 2 )</li>
@@ -1834,8 +1834,8 @@ public static VerificationMode atMost(int maxNumberOfInvocations) {
      * @param wantedNumberOfInvocations number of invocations to verify
      * @return  verification mode
      */
-    public static VerificationMode timesNow( int wantedNumberOfInvocations ){
-        return VerificationModeFactory.timesNow( wantedNumberOfInvocations );
+    public static VerificationMode calls( int wantedNumberOfInvocations ){
+        return VerificationModeFactory.calls( wantedNumberOfInvocations );
     }
     
     /**

File: src/org/mockito/internal/verification/Calls.java
Patch:
@@ -16,19 +16,19 @@
 
 import java.util.List;
 
-public class TimesNow implements VerificationMode, VerificationInOrderMode {
+public class Calls implements VerificationMode, VerificationInOrderMode {
 
     final int wantedCount;
 
-    public TimesNow( int wantedNumberOfInvocations ) {
+    public Calls(int wantedNumberOfInvocations) {
         if( wantedNumberOfInvocations <= 0 ) {
             throw new MockitoException( "Negative and zero values are not allowed here" );
         }
         this.wantedCount = wantedNumberOfInvocations;
     }
 
     public void verify(VerificationData data) {
-        throw new MockitoException( "timesNow is only intended to work with InOrder" );
+        throw new MockitoException( "calls is only intended to work with InOrder" );
     }
 
     public void verifyInOrder(VerificationDataInOrder data) {

File: src/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -25,8 +25,8 @@ public static Times times(int wantedNumberOfInvocations) {
         return new Times(wantedNumberOfInvocations);
     }
 
-    public static TimesNow timesNow( int wantedNumberOfInvocations ) {
-        return new TimesNow( wantedNumberOfInvocations );
+    public static Calls calls(int wantedNumberOfInvocations) {
+        return new Calls( wantedNumberOfInvocations );
     }
 
     public static NoMoreInteractions noMoreInteractions() {

File: src/org/mockito/Mockito.java
Patch:
@@ -1713,7 +1713,7 @@ public static InOrder inOrder(Object... mocks) {
      *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));
      *
      *  //Remember that ignoreStubs() <b>*changes*</b> the input mocks and returns them for convenience.
-     * <pre class="code"><code class="java">
+     * </code></pre>
      * Ignoring stubs can be used with <b>verification in order</b>:
      * <pre class="code"><code class="java">
      *  List list = mock(List.class);

File: src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -72,7 +72,7 @@ public boolean isOut(Field object) {
 
 
     public boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {
-        Set<Object> mocksToBeInjected = new HashSet<Object>(mockCandidates);
+        // Set<Object> mocksToBeInjected = new HashSet<Object>(mockCandidates);
         FieldInitializationReport report = null;
         try {
             report = new FieldInitializer(fieldOwner, field).initialize();
@@ -90,7 +90,7 @@ public boolean processInjection(Field field, Object fieldOwner, Set<Object> mock
         Class<?> fieldClass = report.fieldClass();
         Object fieldInstanceNeedingInjection = report.fieldInstance();
         while (fieldClass != Object.class) {
-            injectionOccurred |= injectMockCandidate(fieldClass, mocksToBeInjected, fieldInstanceNeedingInjection);
+            injectionOccurred |= injectMockCandidate(fieldClass, new HashSet<Object>(mockCandidates), fieldInstanceNeedingInjection);
             fieldClass = fieldClass.getSuperclass();
         }
         return injectionOccurred;

File: test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java
Patch:
@@ -48,7 +48,7 @@ public void should_match_be_consistent_regardless_of_order() {
     }
 
     @Test
-    public void should_not_inject_the_object() {
+    public void should_inject_the_mock_only_once_and_in_the_correct_type() {
         assertNull(withNullObjectField.keepMeNull);
         assertSame(mockedBean, withNullObjectField.injectMePlease);
     }

File: src/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -90,7 +90,7 @@ public void injectMocks(final Object testClassInstance) {
         Set<Object> mocks = new HashSet<Object>();
         
         while (clazz != Object.class) {
-            new InjectMocksScanner(testClassInstance, clazz).addTo(mockDependentFields);
+            new InjectMocksScanner(clazz).addTo(mockDependentFields);
             new MockScanner(testClassInstance, clazz).addPreparedMocks(mocks);
             clazz = clazz.getSuperclass();
         }

File: src/org/mockito/Mockito.java
Patch:
@@ -1665,7 +1665,7 @@ public static InOrder inOrder(Object... mocks) {
      *  verifyNoMoreInteractions(ignoreStubs(mock1, mock2));
      *
      *  //Remember that ignoreStubs() <b>*changes*</b> the input mocks and returns them for convenience.
-     * <pre class="code"><code class="java">
+     * </code></pre>
      * Ignoring stubs can be used with <b>verification in order</b>:
      * <pre class="code"><code class="java">
      *  List list = mock(List.class);

File: src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java
Patch:
@@ -72,7 +72,7 @@ public boolean isOut(Field object) {
 
 
     public boolean processInjection(Field field, Object fieldOwner, Set<Object> mockCandidates) {
-        Set<Object> mocksToBeInjected = new HashSet<Object>(mockCandidates);
+        // Set<Object> mocksToBeInjected = new HashSet<Object>(mockCandidates);
         FieldInitializationReport report = null;
         try {
             report = new FieldInitializer(fieldOwner, field).initialize();
@@ -90,7 +90,7 @@ public boolean processInjection(Field field, Object fieldOwner, Set<Object> mock
         Class<?> fieldClass = report.fieldClass();
         Object fieldInstanceNeedingInjection = report.fieldInstance();
         while (fieldClass != Object.class) {
-            injectionOccurred |= injectMockCandidate(fieldClass, mocksToBeInjected, fieldInstanceNeedingInjection);
+            injectionOccurred |= injectMockCandidate(fieldClass, new HashSet<Object>(mockCandidates), fieldInstanceNeedingInjection);
             fieldClass = fieldClass.getSuperclass();
         }
         return injectionOccurred;

File: test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java
Patch:
@@ -49,7 +49,7 @@ public void should_match_be_consistent_regardless_of_order() {
     }
 
     @Test
-    public void should_not_inject_the_object() {
+    public void should_inject_the_mock_only_once_and_in_the_correct_type() {
         assertNull(withNullObjectField.keepMeNull);
         assertSame(mockedBean, withNullObjectField.injectMePlease);
     }

File: src/org/mockito/internal/creation/jmock/ClassImposterizer.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockito.cglib.core.*;
 import org.mockito.cglib.proxy.*;
 import org.mockito.exceptions.base.MockitoException;
+import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.internal.creation.cglib.MockitoNamingPolicy;
 import org.objenesis.ObjenesisStd;
 
@@ -26,7 +27,7 @@ private ClassImposterizer() {}
     //TODO: after 1.8, in order to provide decent exception message when objenesis is not found,
     //have a constructor in this class that tries to instantiate ObjenesisStd and if it fails then show decent exception that dependency is missing
     //TODO: after 1.8, for the same reason catch and give better feedback when hamcrest core is not found.
-    private ObjenesisStd objenesis = new ObjenesisStd();
+    private ObjenesisStd objenesis = new ObjenesisStd(new GlobalConfiguration().enableClassCache());
     
     private static final NamingPolicy NAMING_POLICY_THAT_ALLOWS_IMPOSTERISATION_OF_CLASSES_IN_SIGNED_PACKAGES = new MockitoNamingPolicy() {
         @Override

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -91,6 +91,8 @@ public void missingMethodInvocation() {
                 "1. you stub either of: final/private/equals()/hashCode() methods.",
                 "   Those methods *cannot* be stubbed/verified.",
                 "2. inside when() you don't call method on mock but on some other object.",
+                "3. the parent of the mocked class is not public.",
+                "   It is a limitation of the mock engine.",
                 ""
         ));
     }

File: src/org/mockito/Mockito.java
Patch:
@@ -714,7 +714,7 @@
  * &#064;InjectMocks LocalPub;
  * </pre>
  *
- * <h3 id="24">24. (**New**) One-liner stubs (Since 1.9)
+ * <h3 id="24">24. (**New**) One-liner stubs (Since 1.9)</h3>
  * <p>
  * Mockito will now allow you to create mocks when stubbing.
  * Basically, it allows to create a stub in one line of code.
@@ -727,7 +727,7 @@
  *   &#064;Test public void should... {}
  * </pre>
  *
- * <h3 id="25">25. Verification ignoring stubs (Since 1.9)
+ * <h3 id="25">25. Verification ignoring stubs (Since 1.9)</h3>
  * <p>
  * Mockito will now allow to ignore stubbing for the sake of verification.
  * Sometimes useful when coupled with verifyNoMoreInteractions() or verification inOrder().

File: src/org/mockito/Mockito.java
Patch:
@@ -642,8 +642,8 @@
  * which accepts MockSettings. No worries, you will hardly ever use it.
  * 
  * <pre>
- * List<Object> list = new ArrayList<Object>();
- * List<Object> spy = mock(ArrayList.class, withSettings()
+ * List@lt;Object&gt; list = new ArrayList&lt;Object&gt;();
+ * List&lt;Object&gt; spy = mock(ArrayList.class, withSettings()
  *                 .spiedInstance(list)
  *                 .defaultAnswer(CALLS_REAL_METHODS)
  *                 .serializable());

File: src/org/mockito/InjectMocks.java
Patch:
@@ -73,7 +73,8 @@
  * <u>Mockito cannot instantiate inner classes, local classes, abstract classes and of course interfaces.</u>
  *
  * <p>The same stands for setters or fields, they can be declared with private
- * visibility, Mockito will see them through reflection.</p>
+ * visibility, Mockito will see them through reflection.
+ * However fields that are static or final will be ignored.</p>
  *
  * <p>So on the field that needs injection, for example constructor injection will happen here :</p>
  * <pre>

File: src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal.configuration.injection.filter;
 
-import org.mockito.exceptions.base.MockitoException;
+import org.mockito.exceptions.Reporter;
 import org.mockito.internal.util.reflection.BeanPropertySetter;
 import org.mockito.internal.util.reflection.FieldSetter;
 
@@ -26,8 +26,8 @@ public Object thenInject() {
                         if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {
                             new FieldSetter(fieldInstance, field).set(matchingMock);
                         }
-                    } catch (Exception e) {
-                        throw new MockitoException("Problems injecting dependency in " + field.getName(), e);
+                    } catch (RuntimeException e) {
+                        new Reporter().cannotInjectDependency(field, matchingMock, e);
                     }
                     return matchingMock;
                 }

File: src/org/mockito/internal/util/reflection/BeanPropertySetter.java
Patch:
@@ -65,11 +65,11 @@ && propertyTypeMatchFieldType(propertyDescriptor)) {
                 }
             }
         } catch (InvocationTargetException e) {
-            throw new RuntimeException("Problems setting value:[" + value + "] on object: [" + target + "] the setter of property [" + field.getName() + "] threw an exception", e.getTargetException());
+            throw new RuntimeException("Setter '" + writeMethod + "' of '" + target + "' with value '" + value + "' threw exception : '" + e.getTargetException() + "'", e);
         } catch (IllegalAccessException e) {
-            throw new RuntimeException("Problems setting value:[" + value + "] on object: [" + target + "] the setter of property [" + field.getName() + "] is not accessible", e);
+            throw new RuntimeException("Access not authorized on field '" + field + "' of object '" + target + "' with value: '" + value + "'", e);
         } catch (IntrospectionException e) {
-            throw new RuntimeException("Problems setting value: [" + value + "] on object: [" + target + "] for property : [" + field.getName() + "], cannot introspect " + target.getClass(), e);
+            throw new RuntimeException("Something went wrong when trying to infer by introspection the setter of property '" + field.getName() + "' on type '" + target.getClass() + "'" + target.getClass(), e);
         } finally {
             if(writeMethod != null) {
                 changer.safelyDisableAccess(writeMethod);

File: src/org/mockito/internal/util/ConsoleMockitoLogger.java
Patch:
@@ -10,6 +10,6 @@ public class ConsoleMockitoLogger implements MockitoLogger {
      * @see org.mockito.internal.util.Logger#print(java.lang.Object)
      */
     public void log(Object what) {
-        System.out.print(what.toString());
+        System.out.print(what);
     }
-}
\ No newline at end of file
+}

File: src/org/mockito/MockSettings.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito;
 
-import org.mockito.invocation.InvocationListener;
+import org.mockito.listeners.InvocationListener;
 import org.mockito.stubbing.Answer;
 
 import java.io.Serializable;

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.VerboseMockInvocationLogger;
 import org.mockito.internal.util.MockName;
-import org.mockito.invocation.InvocationListener;
+import org.mockito.listeners.InvocationListener;
 import org.mockito.stubbing.Answer;
 
 import java.util.ArrayList;

File: src/org/mockito/internal/util/ConsoleMockitoLogger.java
Patch:
@@ -10,6 +10,6 @@ public class ConsoleMockitoLogger implements MockitoLogger {
      * @see org.mockito.internal.util.Logger#print(java.lang.Object)
      */
     public void log(Object what) {
-        System.out.print(what.toString());
+        System.out.print(what);
     }
-}
\ No newline at end of file
+}

File: test/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.Mock;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.debugging.VerboseMockInvocationLogger;
-import org.mockito.invocation.InvocationListener;
+import org.mockito.listeners.InvocationListener;
 import org.mockitoutil.TestBase;
 
 import java.util.LinkedList;

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.mockito.MockSettings;
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.debugging.LogInvocationsToStdOutListener;
+import org.mockito.internal.debugging.VerboseMockInvocationLogger;
 import org.mockito.internal.util.MockName;
 import org.mockito.invocation.InvocationListener;
 import org.mockito.stubbing.Answer;
@@ -87,8 +87,8 @@ public void initiateMockName(Class classToMock) {
     }
 
 	public MockSettings verboseLogging() {
-        if (!invocationListenersContainsType(LogInvocationsToStdOutListener.class)) {
-            invocationListeners(new LogInvocationsToStdOutListener());
+        if (!invocationListenersContainsType(VerboseMockInvocationLogger.class)) {
+            invocationListeners(new VerboseMockInvocationLogger());
         }
         return this;
 	}

File: test/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.debugging.LogInvocationsToStdOutListener;
+import org.mockito.internal.debugging.VerboseMockInvocationLogger;
 import org.mockito.invocation.InvocationListener;
 import org.mockitoutil.TestBase;
 
@@ -93,7 +93,7 @@ public void shouldAddVerboseLoggingListener() {
         mockSettingsImpl.verboseLogging();
 
         //then
-        assertContainsType(mockSettingsImpl.getInvocationListeners(), LogInvocationsToStdOutListener.class);
+        assertContainsType(mockSettingsImpl.getInvocationListeners(), VerboseMockInvocationLogger.class);
     }
 
     @Test

File: src/org/mockito/invocation/InvocationListener.java
Patch:
@@ -17,7 +17,7 @@ public interface InvocationListener {
 	/**
 	 * Called when a method on the listener's mock was invoked and returned normally.
 	 * 
-	 * Exceptions during this callback are treated as fatal errors. 
+	 * Exceptions during this invocationListeners are treated as fatal errors.
 	 * 
 	 * @param invocation information on the happening method call, never {@code null}
 	 * @param returnValue whatever it was that the method returned, may be {@code null}
@@ -35,7 +35,7 @@ public interface InvocationListener {
 	 * Note that the exception is not necessarily caused by stubbing the method with it, but may also
 	 * be the result of incorrect usage of the mockito API or even a bug inside mockito.
 	 * 
-	 * Exceptions during this callback are treated as fatal errors. 
+	 * Exceptions during this invocationListeners are treated as fatal errors.
 	 * 
 	 * @param invocation information on the happening method call, never {@code null}
 	 * @param exception the exception that was thrown

File: test/org/mockito/exceptions/ReporterTest.java
Patch:
@@ -19,6 +19,6 @@ public void shouldLetPassingNullLastActualStackTrace() throws Exception {
     
     @Test(expected=MockitoException.class)
     public void shouldThrowCorrectExceptionForNullInvocationListener() throws Exception {
-    	new Reporter().nullInvocationListenerAdded();
+    	new Reporter().invocationListenerDoesNotAcceptNullParameters();
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
Patch:
@@ -72,6 +72,7 @@ class ATest {
 
         try {
             MockitoAnnotations.initMocks(new ATest());
+            fail();
         } catch (MockitoException e) {
             Assertions.assertThat(e.getMessage()).contains("failingConstructor").contains("constructor").contains("threw an exception");
             Assertions.assertThat(e.getCause()).isInstanceOf(IllegalStateException.class);

File: src/org/mockito/Mockito.java
Patch:
@@ -693,12 +693,12 @@
  *
  * <h3 id="23">23. (**New**) Automatic instantiation of &#064;Spy, &#064;InjectMocks fields (Since 1.9)</h3>
  * <p>
- * Mockito will now try to instantiate &#064;{@link Spy} and &#064;{@link InjectMocks} fields if you haven't provided instance at declaration
- * *and* if the type has a zero-arg argument (even private).
+ * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields
+ * using constructor injection, setter injection, or field injection.
  * <p>
  * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)} or {@link MockitoJUnitRunner}.
  * <p>
- * Read more about available {@link MockitoAnnotations}
+ * Read more about available tricks {@link InjectMocks}
  * <pre>
  * //instead:
  * &#064;Spy BeerDrinker drinker = new BeerDrinker();

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -93,7 +93,7 @@ public static void initMocks(Object testClass) {
         AnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();
         Class<?> clazz = testClass.getClass();
 
-        //below can be removed later, when we get rid of deprecated stuff
+        //below can be removed later, when we get read rid of deprecated stuff
         if (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {
             //this means user has his own annotation engine and we have to respect that.
             //we will do annotation processing the old way so that we are backwards compatible

File: src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.BeanPropertySetter;

File: src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import java.lang.reflect.Field;
 import java.util.Collection;
@@ -11,4 +11,4 @@ OngoingInjecter filterCandidate(
             Object fieldInstance
     );
 
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import org.mockito.internal.util.MockUtil;
 
@@ -27,4 +27,4 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob
         }
         return next.filterCandidate(mocks, field, fieldInstance);
     }
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/configuration/injection/filter/OngoingInjecter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 /**
  * Allow the ongoing injection of a mock candidate.

File: src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -23,4 +23,4 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob
 
         return next.filterCandidate(mockTypeMatches, field, fieldInstance);
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -66,4 +66,4 @@ public void shouldRespectUsersEngine() throws Exception {
         assertNotNull(test.mock);
         assertNull(test.tested.dependency);
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/bugs/ParentTestMockInjectionTest.java
Patch:
@@ -28,7 +28,7 @@ public static abstract class BaseTest {
         @Mock protected DaoA daoFromParent;
     }
 
-    @Ignore("JUnit : don't this test!")
+    @Ignore("JUnit test under test : don't test this!")
     public static class ImplicitTest extends BaseTest {
         @InjectMocks private TestedSystem sut = new TestedSystem();
 

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -93,7 +93,7 @@ public static void initMocks(Object testClass) {
         AnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();
         Class<?> clazz = testClass.getClass();
 
-        //below can be removed later, when we get rid of deprecated stuff
+        //below can be removed later, when we get read rid of deprecated stuff
         if (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {
             //this means user has his own annotation engine and we have to respect that.
             //we will do annotation processing the old way so that we are backwards compatible

File: test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
Patch:
@@ -56,7 +56,6 @@ public void constructor_is_called_for_each_test() throws Exception {
     }
 
     @Test
-    @Ignore("Works must be done on the spy annotation engine and the injection engine")
     public void objects_created_with_constructor_initialization_can_be_spied() throws Exception {
         assertFalse(mockUtil.isMock(articleManager));
         assertTrue(mockUtil.isMock(spiedArticleManager));

File: src/org/mockito/Mockito.java
Patch:
@@ -693,12 +693,12 @@
  *
  * <h3 id="23">23. (**New**) Automatic instantiation of &#064;Spy, &#064;InjectMocks fields (Since 1.9)</h3>
  * <p>
- * Mockito will now try to instantiate &#064;{@link Spy} and &#064;{@link InjectMocks} fields if you haven't provided instance at declaration
- * *and* if the type has a zero-arg argument (even private).
+ * Mockito will now try to instantiate &#064;{@link Spy} and will instantiate &#064;{@link InjectMocks} fields
+ * using constructor injection, setter injection, or field injection.
  * <p>
  * To take advantage of this feature you need to use {@link MockitoAnnotations#initMocks(Object)} or {@link MockitoJUnitRunner}.
  * <p>
- * Read more about available {@link MockitoAnnotations}
+ * Read more about available tricks {@link InjectMocks}
  * <pre>
  * //instead:
  * &#064;Spy BeerDrinker drinker = new BeerDrinker();

File: src/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.MockUtil;
+import org.mockito.internal.util.reflection.FieldInitializationReport;
 import org.mockito.internal.util.reflection.FieldInitializer;
 
 import java.lang.annotation.Annotation;
@@ -31,7 +32,8 @@ public void process(Class<?> context, Object testInstance) {
                 assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
                 Object instance = null;
                 try {
-                    instance = new FieldInitializer(testInstance, field).initialize();
+                    FieldInitializationReport report = new FieldInitializer(testInstance, field).initialize();
+                    instance = report.fieldInstance();
                 } catch (MockitoException e) {
                     new Reporter().cannotInitializeForSpyAnnotation(field.getName(), e);
                 }

File: src/org/mockito/internal/configuration/injection/MockInjection.java
Patch:
@@ -42,6 +42,9 @@ public static OngoingMockInjection onFields(Set<Field> fields, Object ofInstance
         return new OngoingMockInjection(fields, ofInstance);
     }
 
+    /**
+     * Ongoing configuration of the mock injector.
+     */
     public static class OngoingMockInjection {
         private Set<Field> fields = new HashSet<Field>();
         private Set<Object> mocks = new HashSet<Object>();

File: test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
Patch:
@@ -84,7 +84,7 @@ public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type()
             new ParameterizedConstructorInstantiator(this, field("withMultipleConstructor"), resolver).instantiate();
             fail();
         } catch (MockitoException e) {
-            assertThat(e.getMessage()).contains("resolver").contains("incorrect types");
+            assertThat(e.getMessage()).contains("argResolver").contains("incorrect types");
         }
     }
 

File: test/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -66,4 +66,4 @@ public void shouldRespectUsersEngine() throws Exception {
         assertNotNull(test.mock);
         assertNull(test.tested.dependency);
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.TreeSet;
 
 @SuppressWarnings({"unchecked", "unused"})
-public class MockInjectionTest extends TestBase {
+public class MockInjectionUsingSetterOrPropertyTest extends TestBase {
 
 	private SuperUnderTesting superUnderTestWithoutInjection = new SuperUnderTesting();
 	@InjectMocks private SuperUnderTesting superUnderTest = new SuperUnderTesting();

File: src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.util.reflection.BeanPropertySetter;

File: src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import java.lang.reflect.Field;
 import java.util.Collection;
@@ -11,4 +11,4 @@ OngoingInjecter filterCandidate(
             Object fieldInstance
     );
 
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import org.mockito.internal.util.MockUtil;
 
@@ -27,4 +27,4 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob
         }
         return next.filterCandidate(mocks, field, fieldInstance);
     }
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/configuration/injection/filter/OngoingInjecter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 /**
  * Allow the ongoing injection of a mock candidate.

File: src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.configuration.injection;
+package org.mockito.internal.configuration.injection.filter;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -23,4 +23,4 @@ public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Ob
 
         return next.filterCandidate(mockTypeMatches, field, fieldInstance);
     }
-}
\ No newline at end of file
+}

File: test/org/mockitousage/bugs/ParentTestMockInjectionTest.java
Patch:
@@ -28,7 +28,7 @@ public static abstract class BaseTest {
         @Mock protected DaoA daoFromParent;
     }
 
-    @Ignore("JUnit : don't this test!")
+    @Ignore("JUnit test under test : don't test this!")
     public static class ImplicitTest extends BaseTest {
         @InjectMocks private TestedSystem sut = new TestedSystem();
 

File: test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java
Patch:
@@ -195,13 +195,12 @@ static class ThirdPartyException extends RuntimeException {
 	static class FooImpl implements Foo {
 
 		public String giveMeSomeString(String param) {
-			// TODO Auto-generated method stub
+			// nothing to do
 			return null;
 		}
 
 		public void doSomething(String param) {
-			// TODO Auto-generated method stub
-
+			// nothing to do
 		}
 
 	}

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockito.internal.exceptions.VerificationAwareInvocation;
 import org.mockito.internal.exceptions.util.ScenarioPrinter;
 import org.mockito.internal.invocation.Invocation;
+import org.mockito.invocation.InvocationListener;
 
 import java.lang.reflect.Field;
 import java.util.List;

File: cglib-and-asm/src/org/mockito/cglib/proxy/CallbackHelper.java
Patch:
@@ -78,7 +78,7 @@ public Class[] getCallbackTypes()
         }
     }
 
-    public int accept(Method method)
+    public int accept(Method method, List<Method> allMethods)
     {
         return ((Integer)methodMap.get(method)).intValue();
     }

File: cglib-and-asm/src/org/mockito/cglib/proxy/Proxy.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
-import java.lang.reflect.Member;
+import java.util.List;
 
 import org.mockito.cglib.core.CodeGenerationException;
 
@@ -40,7 +40,7 @@ public class Proxy implements Serializable {
     protected InvocationHandler h;
 
     private static final CallbackFilter BAD_OBJECT_METHOD_FILTER = new CallbackFilter() {
-        public int accept(Method method) {
+        public int accept(Method method, List<Method> allMethods) {
             if (method.getDeclaringClass().getName().equals("java.lang.Object")) {
                 String name = method.getName();
                 if (!(name.equals("hashCode") ||

File: test/org/mockitousage/bugs/CovariantOverrideTest.java
Patch:
@@ -41,8 +41,7 @@ public void returnFoo3() {
         when(mock.callMe()).thenReturn("foo");
         assertEquals("foo", mock.callMe()); // Passes
     }
-    
-    @Ignore //we don't know how to implement it - covariant override
+
     @Test 
     public void returnFoo4() {
         ReturnsString mock = mock(ReturnsString.class);

File: src/org/mockito/Mockito.java
Patch:
@@ -1358,7 +1358,7 @@ public static Stubber doThrow(Throwable toBeThrown) {
     }
 
     /**
-     * Use doThrow() when you want to stub the void method with an exception class.
+     * Use doThrow() when you want to stub the void method to throw exception of specified class.
      * <p>
      * A new exception instance will be created for each method invocation.
      * <p>

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -79,7 +79,8 @@ public void missingMethodInvocation() {
                 "Also, this error might show up because:",
                 "1. you stub either of: final/private/equals()/hashCode() methods.",
                 "   Those methods *cannot* be stubbed/verified.",
-                "2. inside when() you don't call method on mock but on some other object."
+                "2. inside when() you don't call method on mock but on some other object.",
+                ""
         ));
     }
 

File: test/org/mockito/verification/TimeoutTest.java
Patch:
@@ -82,7 +82,6 @@ public void shouldCreateCorrectType() {
         assertCorrectMode(t.times(5), Timeout.class, 50, 25, Times.class);
         assertCorrectMode(t.never(), Timeout.class, 50, 25, Times.class);
         assertCorrectMode(t.only(), Timeout.class, 50, 25, Only.class);
-        assertCorrectMode(t.atMost(10), Timeout.class, 50, 25, AtMost.class);
     }
     
     private void assertCorrectMode(VerificationMode t, Class expectedType, int expectedTimeout, int expectedTreshold, Class expectedDelegateType) {

File: src/org/mockito/internal/configuration/injection/OngoingInjecter.java
Patch:
@@ -12,8 +12,8 @@ public interface OngoingInjecter {
      * Please check the actual implementation.
      * </p>
      *
-     * @return <code>true</code> if injected, <code>false</code> otherwise.
+     * @return the mock that was injected, <code>null</code> otherwise.
      */
-    boolean thenInject();
+    Object thenInject();
 
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -26,7 +26,7 @@ public boolean matches(Object actual) {
     public void describeTo(Description description) {
         description.appendText("same(");
         appendQuoting(description);
-        description.appendText(wanted == null ? "null" : wanted.toString());
+        description.appendText("" + wanted);
         appendQuoting(description);
         description.appendText(")");
     }

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -26,7 +26,7 @@ public boolean matches(Object actual) {
     public void describeTo(Description description) {
         description.appendText("same(");
         appendQuoting(description);
-        description.appendText(wanted == null ? "null" : wanted.toString());
+        description.appendText("" + wanted);
         appendQuoting(description);
         description.appendText(")");
     }

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
-import java.io.Serializable;
-
 import org.hamcrest.Description;
 import org.mockito.ArgumentMatcher;
 
+import java.io.Serializable;
+
 
 public class Same extends ArgumentMatcher<Object> implements Serializable {
 
@@ -26,7 +26,7 @@ public boolean matches(Object actual) {
     public void describeTo(Description description) {
         description.appendText("same(");
         appendQuoting(description);
-        description.appendText(wanted.toString());
+        description.appendText(wanted == null ? "null" : wanted.toString());
         appendQuoting(description);
         description.appendText(")");
     }

File: src/org/mockito/internal/configuration/SpyAnnotationEngine.java
Patch:
@@ -24,14 +24,14 @@ public Object createMockFor(Annotation annotation, Field field) {
     }
     
     @SuppressWarnings("deprecation")
-    public void process(Class<?> context, Object testClass) {
+    public void process(Class<?> context, Object testInstance) {
         Field[] fields = context.getDeclaredFields();
         for (Field field : fields) {
             if (field.isAnnotationPresent(Spy.class)) {
                 assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
                 Object instance = null;
                 try {
-                    instance = new FieldInitializer(testClass, field).initialize();
+                    instance = new FieldInitializer(testInstance, field).initialize();
                 } catch (MockitoException e) {
                     new Reporter().cannotInitializeForSpyAnnotation(field.getName(), e);
                 }
@@ -41,7 +41,7 @@ public void process(Class<?> context, Object testClass) {
                         Mockito.reset(instance);
                     } else {
                         field.setAccessible(true);
-                        field.set(testClass, Mockito.mock(instance.getClass(), withSettings()
+                        field.set(testInstance, Mockito.mock(instance.getClass(), withSettings()
                                 .spiedInstance(instance)
                                 .defaultAnswer(Mockito.CALLS_REAL_METHODS)
                                 .name(field.getName())));

File: test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java
Patch:
@@ -44,7 +44,7 @@ public void shouldAllowStubbingAndVerifyingCompareTo() {
 
         //then
         assertEquals(10, mock.compareTo(new Date()));
-        verify(mock, atLeastOnce()).compareTo(new Date());
+        verify(mock, atLeastOnce()).compareTo(any(Date.class));
     }
 
     @Test

File: src/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -30,7 +30,7 @@ public IMockitoConfiguration loadConfiguration() {
                     "MockitoConfiguration class must implement org.mockito.configuration.IMockitoConfiguration interface.", e);
         } catch (Exception e) {
             throw new MockitoConfigurationException("\n" +
-                    "Unable to instantianate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?", e);
+                    "Unable to instantiate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?", e);
         }
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -53,7 +53,7 @@ public Object intercept(Object obj, Method method, Object[] args, MethodProxy pr
                 return "SmartNull returned by unstubbed " + formatMethodCall()  + " method on mock";
             }
 
-            new Reporter().smartNullPointerException(location);
+            new Reporter().smartNullPointerException(obj, location);
             return null;
         }
 

File: src/org/mockito/internal/configuration/DefaultInjectionEngine.java
Patch:
@@ -21,7 +21,7 @@
  * See {@link org.mockito.MockitoAnnotations}
  */
 public class DefaultInjectionEngine {
-	
+
     private final MockCandidateFilter mockCandidateFilter = new TypeBasedCandidateFilter(new NameBasedCandidateFilter(new FinalMockCandidateFilter()));
 
     // for each tested
@@ -30,7 +30,7 @@ public class DefaultInjectionEngine {
     //   - if more than *one* find mock candidate on name
     //   - if one mock candidate then set mock
     //   - else don't fail, user will then provide dependencies
-	public void injectMocksOnFields(Set<Field> testClassFields, Set<Object> mocks, Object testClass) {
+    public void injectMocksOnFields(Set<Field> testClassFields, Set<Object> mocks, Object testClass) {
         for (Field field : testClassFields) {
             Object fieldInstance = null;
             try {
@@ -54,4 +54,4 @@ private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mo
         }
     }
 
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/configuration/injection/MockCandidateFilter.java
Patch:
@@ -5,7 +5,7 @@
 
 public interface MockCandidateFilter {
 
-    Injecter filterCandidate(
+    OngoingInjecter filterCandidate(
             Collection<Object> mocks,
             Field fieldToBeInjected,
             Object fieldInstance

File: src/org/mockito/internal/configuration/injection/NameBasedCandidateFilter.java
Patch:
@@ -15,7 +15,7 @@ public NameBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;
     }
 
-    public Injecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
+    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
         List<Object> mockNameMatches = new ArrayList<Object>();
         if(mocks.size() > 1) {
             for (Object mock : mocks) {

File: src/org/mockito/internal/configuration/injection/TypeBasedCandidateFilter.java
Patch:
@@ -13,7 +13,7 @@ public TypeBasedCandidateFilter(MockCandidateFilter next) {
         this.next = next;
     }
 
-    public Injecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
+    public OngoingInjecter filterCandidate(Collection<Object> mocks, Field field, Object fieldInstance) {
         List<Object> mockTypeMatches = new ArrayList<Object>();
         for (Object mock : mocks) {
             if (field.getType().isAssignableFrom(mock.getClass())) {

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -45,6 +45,9 @@
  *  Returns description of mock for toString() method
  * </li>
  * <li>
+ *  Returns non-zero for Comparable#compareTo(T other) method (see issue 184)
+ * </li>
+ * <li>
  *  Returns null for everything else
  * </li>
  * </ul>

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -37,6 +37,9 @@
  *  Returns description of mock for toString() method
  * </li>
  * <li>
+ *  Returns non-zero for Comparable#compareTo(T other) method (see issue 184)
+ * </li>
+ * <li>
  *  Returns null for everything else
  * </li>
  * </ul>

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -24,6 +24,7 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.util.MockName;
 import org.mockito.internal.util.MockUtil;
+import org.mockito.internal.util.ObjectMethodsGuru;
 import org.mockito.internal.util.Primitives;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
@@ -56,7 +57,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
-        if (Invocation.isToString(invocation)) {
+        if (new ObjectMethodsGuru().isToString(invocation.getMethod())) {
             Object mock = invocation.getMock();
             MockName name = new MockUtil().getMockName(mock);
             if (name.isSurrogate()) {

File: src/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -35,7 +35,7 @@ public List<Invocation> getAll() {
 
     private static class RemoveToString implements Filter<Invocation> {
         public boolean isOut(Invocation invocation) {
-            return Invocation.isToString(invocation);
+            return invocation.isToString();
         }
     }
 }
\ No newline at end of file

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -71,8 +71,7 @@ public void unfinishedStubbing(Location location) {
                 "    doThrow(exception).when(mock).someVoidMethod();",
                 "Hints:",
                 " 1. missing thenReturn()",
-                " 2. although stubbed methods may return mocks, you cannot inline mock creation (mock()) call inside a thenReturn method (see issue 53)",
-                " 3. you are trying to stub a final method, you naughty developer!",
+                " 2. you are trying to stub a final method, you naughty developer!",
                 ""
         ));
     }

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -70,7 +70,7 @@ public <T> T verify(T mock, VerificationMode mode) {
         if (mock == null) {
             reporter.nullPassedToVerify();
         } else if (!mockUtil.isMock(mock)) {
-            reporter.notAMockPassedToVerify();
+            reporter.notAMockPassedToVerify(mock.getClass());
         }
         mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));
         return mock;

File: src/org/mockito/Matchers.java
Patch:
@@ -617,6 +617,9 @@ public static String startsWith(String prefix) {
     /**
      * Allows creating custom argument matchers.
      * <p>
+     * In rare cases when the parameter is a primitive then you *must* use relevant intThat(), floatThat(), etc. method.
+     * This way you will avoid NullPointerException during autounboxing  
+     * <p>
      * See examples in javadoc for {@link ArgumentMatcher} class
      * 
      * @param matcher decides whether argument matches

File: test/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import static org.mockito.Mockito.*;
 
+//see issue 221
 public class NPEOnAnyClassMatcherAutounboxTest extends TestBase {
 
     interface Foo {
@@ -18,6 +19,7 @@ interface Foo {
     @Test
     public void shouldNotThrowNPE() {
         Foo f = mock(Foo.class);
+        f.bar(1);
         verify(f).bar(any(Long.class));
     }
 }
\ No newline at end of file

File: src/org/mockito/Matchers.java
Patch:
@@ -241,7 +241,7 @@ public static <T> T anyVararg() {
      * @return <code>null</code>.
      */
     public static <T> T any(Class<T> clazz) {
-        return (T) anyObject();
+        return (T) reportMatcher(Any.ANY).returnFor(clazz);
     }
     
     /**

File: src/org/mockito/runners/MockitoJUnit44Runner.java
Patch:
@@ -31,7 +31,7 @@
  * <p>
  * Example:
  * <pre>
- * &#064;RunWith(MockitoJUnit44Runner.class)
+ * &#064;RunWith(MockitoJUnitRunner.class)
  * public class ExampleTest {
  * 
  *     &#064;Mock

File: src/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -36,7 +36,7 @@
  * <p>
  * Read more about &#064;Mock annotation in javadoc for {@link MockitoAnnotations}
  * <pre>
- * <b>&#064;RunWith(MockitoJUnit44Runner.class)</b>
+ * <b>&#064;RunWith(MockitoJUnitRunner.class)</b>
  * public class ExampleTest {
  * 
  *     &#064;Mock

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -447,7 +447,7 @@ public void noArgumentValueWasCaptured() {
                 "Be aware that it is recommended to use capture() only with verify()",
                 "",
                 "Examples of correct argument capturing:",
-                "    Argument<Person> argument = new Argument<Person>();",
+                "    ArgumentCaptor<Person> argument = ArgumentCaptor.forClass(Person.class);",
                 "    verify(mock).doSomething(argument.capture());",
                 "    assertEquals(\"John\", argument.getValue().getName());",
                 ""

File: src/org/mockito/internal/verification/Only.java
Patch:
@@ -25,13 +25,12 @@ public void verify(VerificationData data) {
 		InvocationMatcher wantedMatcher = data.getWanted();
 		List<Invocation> invocations = data.getAllInvocations();
 		List<Invocation> chunk = finder.findInvocations(invocations,wantedMatcher);
-		if (invocations.size() != 1 && chunk.size() > 0) {
-			marker.markVerified(chunk.get(0), wantedMatcher);
+		if (invocations.size() != 1 && chunk.size() > 0) {			
 			Invocation unverified = finder.findFirstUnverified(invocations);
 			reporter.noMoreInteractionsWanted(unverified, (List) invocations);
 		} else if (invocations.size() != 1 || chunk.size() == 0) {
 			reporter.wantedButNotInvoked(wantedMatcher);
 		}
+		marker.markVerified(chunk.get(0), wantedMatcher);
 	}
-
 }

File: src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -27,9 +27,11 @@ public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
         //see ThreadsShareGenerouslyStubbedMockTest
+        Answer a;
         synchronized(answers) {
-            return answers.size() == 1 ? answers.peek().answer(invocation) : answers.poll().answer(invocation);
+            a = answers.size() == 1 ? answers.peek() : answers.poll();
         }
+        return a.answer(invocation);
     }
 
     public void addAnswer(Answer answer) {

File: src/org/mockito/configuration/AnnotationEngine.java
Patch:
@@ -17,15 +17,14 @@
 public interface AnnotationEngine {
 
     /**
-     * @Deprecated
+     * @deprecated
      * Please use AnnotationProcessor 'execute' method instead that is more robust
      * <p>
      * Creates mock, ArgumentCaptor or wraps field instance in spy object.
      * Only if of correct annotation type.
      *
      * @param annotation
      * @param field
-     * @return
      */
     @Deprecated
     Object createMockFor(Annotation annotation, Field field);

File: src/org/mockito/internal/invocation/InvocationsFinder.java
Patch:
@@ -37,7 +37,6 @@ public List<Invocation> findAllMatchingUnverifiedChunks(List<Invocation> invocat
      * 
      * if wanted is 1 and mode is times(x), where x != 2 then returns
      * 1,1,1
-     * @param data 
      */
     public List<Invocation> findMatchingChunk(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount, InOrderContext context) {
         List<Invocation> unverified = removeVerifiedInOrder(invocations, context);
@@ -161,7 +160,6 @@ public boolean isOut(Invocation invocation) {
      * 
      * @param context
      * @param orderedInvocations
-     * @return
      */
     public Invocation findFirstUnverifiedInOrder(InOrderContext context, List<Invocation> orderedInvocations) {        
         Invocation candidate = null;

File: src/org/mockito/internal/invocation/UnusedStubsFinder.java
Patch:
@@ -16,7 +16,6 @@ public class UnusedStubsFinder {
      * Finds all unused stubs for given mocks
      * 
      * @param mocks
-     * @return
      */
     public List<Invocation> find(List<?> mocks) {
         List<Invocation> unused = new LinkedList<Invocation>();

File: src/org/mockito/internal/stubbing/defaultanswers/Answers.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
+import org.mockito.Mockito;
 import org.mockito.internal.stubbing.answers.CallsRealMethods;
 import org.mockito.stubbing.Answer;
 
@@ -14,7 +15,7 @@
  * <p>
  * <b>WARNING</b> Those answers no longer are used by the framework!!! Please use {@link org.mockito.Answers}
  * <p>
- * See {@link Mock} for more information.
+ * See {@link Mockito} for more information.
  */
 @Deprecated
 public enum Answers {

File: src/org/mockito/internal/util/RemoveFirstLine.java
Patch:
@@ -7,8 +7,8 @@
 public class RemoveFirstLine {
 
     /**
-     * @param string to have the first line removed
-     * @return
+     * @param text to have the first line removed
+     * @return less first line
      */
     public String of(String text) {
         return text.replaceFirst(".*?\n", "");

File: src/org/mockito/internal/util/reflection/GenericMaster.java
Patch:
@@ -15,7 +15,6 @@ public class GenericMaster {
      * Finds the generic type (parametrized type) of the field. If the field is not generic it returns Object.class. 
      * 
      * @param field
-     * @return
      */
     public Class getGenericType(Field field) {        
         Type generic = field.getGenericType();

File: src/org/mockito/verification/VerificationWithTimeout.java
Patch:
@@ -37,7 +37,7 @@ public interface VerificationWithTimeout extends VerificationMode {
     public VerificationMode times(int wantedNumberOfInvocations);
     
     /**
-     * Alias to times(0), see {@link times(int)}
+     * Alias to times(0), see {@link #times(int)}
      * <p>
      * Verifies that interaction did not happen within given timeout. E.g:
      * <pre>
@@ -46,7 +46,7 @@ public interface VerificationWithTimeout extends VerificationMode {
      * 
      * <p>
      * If you want to verify there were NO interactions with the mock 
-     * check out {@link verifyNoMoreInteractions(Object...)}
+     * check out {@link Mockito#verifyNoMoreInteractions(Object...)}
      * <p>
      * See examples in javadoc for {@link Mockito} class
      * 

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -355,8 +355,6 @@ public void noMoreInteractionsWanted(Invocation undesired, List<VerificationAwar
                 new Location(),
                 "But found this interaction:",
                 undesired.getLocation(),
-                "***",
-                "For your reference, here is the list of all invocations ([?] - means unverified).",
                 scenario,
                 ""
         ));

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockito.exceptions.PrintableInvocation;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.debugging.Location;
+import org.mockito.internal.exceptions.VerificationAwareInvocation;
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockito.internal.matchers.ArrayEquals;
 import org.mockito.internal.matchers.Equals;
@@ -33,7 +34,7 @@
  * Contains stack trace of invocation
  */
 @SuppressWarnings("unchecked")
-public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation {
+public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation, VerificationAwareInvocation {
 
     private static final long serialVersionUID = 8240069639250980199L;
     private static final int MAX_LINE_LENGTH = 45;

File: src/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -16,11 +16,11 @@
 
 public class NoMoreInteractions implements VerificationMode, VerificationInOrderMode {
 
+    @SuppressWarnings("unchecked")
     public void verify(VerificationData data) {
-        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());
-        
+        Invocation unverified = new InvocationsFinder().findFirstUnverified(data.getAllInvocations());                       
         if (unverified != null) {
-            new Reporter().noMoreInteractionsWanted(unverified);
+            new Reporter().noMoreInteractionsWanted(unverified, (List) data.getAllInvocations());
         }
     }
 

File: src/org/mockito/internal/verification/Only.java
Patch:
@@ -20,14 +20,15 @@ public class Only implements VerificationMode {
 	private final InvocationMarker marker = new InvocationMarker();
 	private final Reporter reporter = new Reporter();
 
-	public void verify(VerificationData data) {
+	@SuppressWarnings("unchecked")
+    public void verify(VerificationData data) {
 		InvocationMatcher wantedMatcher = data.getWanted();
 		List<Invocation> invocations = data.getAllInvocations();
 		List<Invocation> chunk = finder.findInvocations(invocations,wantedMatcher);
 		if (invocations.size() != 1 && chunk.size() > 0) {
 			marker.markVerified(chunk.get(0), wantedMatcher);
 			Invocation unverified = finder.findFirstUnverified(invocations);
-			reporter.noMoreInteractionsWanted(unverified);
+			reporter.noMoreInteractionsWanted(unverified, (List) invocations);
 		} else if (invocations.size() != 1 || chunk.size() == 0) {
 			reporter.wantedButNotInvoked(wantedMatcher);
 		}

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -101,14 +101,15 @@ static void scan(Object testClass, Class<?> clazz) {
         AnnotationEngine annotationEngine = new GlobalConfiguration().getAnnotationEngine();
         Field[] fields = clazz.getDeclaredFields();
         for (Field field : fields) {
+            //below can be removed later, when we get rid of deprecated stuff
             if (annotationEngine.getClass() != new DefaultMockitoConfiguration().getAnnotationEngine().getClass()) {
                 //this means user has his own annotation engine and we have to respect that.
                 //we will do annotation processing the old way so that we are backwards compatible
                 processAnnotationDeprecatedWay(annotationEngine, testClass, field);                
             } 
-            //act 'the new' way
-            annotationEngine.process(clazz, testClass);
         }
+        //act 'the new' way
+        annotationEngine.process(clazz, testClass);
     }
 
     @SuppressWarnings("deprecation")

File: test/org/mockito/verification/TimeoutTest.java
Patch:
@@ -63,6 +63,7 @@ public void shouldTryToVerifyCorrectNumberOfTimes() {
         
         try {
             t.verify(data);
+            fail();
         } catch (MockitoAssertionError e) {};
         
         verify(mode, times(5)).verify(data);

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -74,6 +74,7 @@ public Object handle(Invocation invocation) throws Throwable {
         if (verificationMode != null) {
             //We need to check if verification was started on the correct mock 
             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)
+            //TODO: can I avoid this cast here?
             if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                
                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            
                 verificationMode.verify(data);

File: src/org/mockito/internal/verification/VerificationWithTimeoutImpl.java
Patch:
@@ -1,7 +1,6 @@
 package org.mockito.internal.verification;
 
 import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.verification.VerificationMode;
 

File: src/org/mockito/Captor.java
Patch:
@@ -16,7 +16,7 @@
  *
  *    &#64;Before
  *    public void init(){
- *       MockitoAnnotations.init(this);
+ *       MockitoAnnotations.initMocks(this);
  *    }
  *
  *    &#64;Test public void shouldDoSomethingUseful() {

File: src/org/mockito/Spy.java
Patch:
@@ -17,7 +17,7 @@
  *    &#64;Spy Foo spyOnFoo = new Foo();
  *    &#64;Before
  *    public void init(){
- *       MockitoAnnotations.init(this);
+ *       MockitoAnnotations.initMocks(this);
  *    }
  *    ...
  * }
@@ -29,7 +29,7 @@
  * Foo spyOnFoo = Mockito.spy(new Foo());
  * </pre>
  * 
- * <b>Warning</b> if you call <code>MockitoAnnotations.init(this)</code> in a
+ * <b>Warning</b> if you call <code>MockitoAnnotations.initMocks(this)</code> in a
  * super class <b>constructor</b> then this will not work. It is because fields
  * in subclass are only instantiated after super class constructor has returned.
  * It's better to use &#64;Before.

File: test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -146,7 +146,7 @@ public void shouldPointOutUnfinishedStubbing() {
 
     @Test
     public void shouldMentionFinalAndObjectMethodsWhenMissingMockCall() {
-        when(mock.equals(null)).thenReturn(false);
+        when("".equals(null)).thenReturn(false);
     }
     
     @Test

File: src/org/mockito/verification/VerificationWithTimeout.java
Patch:
@@ -4,6 +4,7 @@
 import org.mockito.internal.verification.VerificationWithTimeoutImpl;
 import org.mockito.internal.verification.api.VerificationData;
 
+//TODO: must be called Timeout
 public class VerificationWithTimeout implements Timeout {
 
     VerificationWithTimeoutImpl impl;

File: src/org/mockito/internal/exceptions/base/StackTraceFilter.java
Patch:
@@ -4,12 +4,14 @@
  */
 package org.mockito.internal.exceptions.base;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.LinkedList;
 import java.util.List;
 
-public class StackTraceFilter {
+public class StackTraceFilter implements Serializable {
+    static final long serialVersionUID = -5499819791513105700L;
     
     public boolean isBad(StackTraceElement e) {
         boolean fromMockObject = e.getClassName().contains("$$EnhancerByMockitoWithCGLIB$$");

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -20,6 +20,7 @@
 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.util.MockUtil;
+import org.mockito.internal.verification.MockAwareVerificationMode;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.internal.verification.api.InOrderContext;
@@ -70,7 +71,7 @@ public <T> T verify(T mock, VerificationMode mode) {
         } else if (!mockUtil.isMock(mock)) {
             reporter.notAMockPassedToVerify();
         }
-        mockingProgress.verificationStarted(mode);
+        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));
         return mock;
     }
     

File: src/org/mockito/internal/stubbing/answers/AnswersValidator.java
Patch:
@@ -44,7 +44,7 @@ private void validateDoNothing(DoesNothing answer, Invocation invocation) {
 
     private void validateReturnValue(Returns answer, Invocation invocation) {
         if (invocation.isVoid()) {
-            reporter.cannotStubVoidMethodWithAReturnValue();
+            reporter.cannotStubVoidMethodWithAReturnValue(invocation.getMethod().getName());
         }
         
         if (answer.returnsNull() && invocation.returnsPrimitive()) {

File: test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -85,7 +85,8 @@ public void shouldScreamWhenReturnSetForVoid() throws Exception {
             doReturn("foo").when(mock).voidMethod();
             fail();
         } catch (MockitoException e) {
-            assertContains("Cannot stub a void method with a return value", e.getMessage());
+            assertContains("void method", e.getMessage());
+            assertContains("cannot", e.getMessage());
         }
     }
     

File: src/org/mockito/Answers.java
Patch:
@@ -20,6 +20,7 @@
  * <pre>
  *   &#064;Mock(answer = RETURNS_DEEP_STUBS) UserProvider userProvider;
  * </pre>
+ * <b>This is not the full list</b> of Answers available in Mockito. Some interesting answers can be found in org.mockito.stubbing.answers package.
  */
 public enum Answers {
 

File: src/org/mockito/Mock.java
Patch:
@@ -5,14 +5,12 @@
 package org.mockito;
 
 import static java.lang.annotation.ElementType.*;
-import static org.mockito.internal.stubbing.defaultanswers.Answers.*;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.mockito.internal.stubbing.defaultanswers.Answers;
 import org.mockito.runners.MockitoJUnitRunner;
 
 /**
@@ -56,7 +54,7 @@
 @Documented
 public @interface Mock {
 
-    Answers answer() default RETURNS_DEFAULTS;
+    Answers answer() default Answers.RETURNS_DEFAULTS;
 
     String name() default "";
 

File: src/org/mockito/InOrder.java
Patch:
@@ -16,6 +16,9 @@
  * inOrder.verify(secondMock).add("was called second");
  * </pre>
  * 
+ * As of Mockito 1.8.4 you can verifyNoMoreInvocations() in order-sensitive way. Read more: {@link InOrder#verifyNoMoreInteractions()}
+ * <p>
+ * 
  * See examples in javadoc for {@link Mockito} class
  */
 public interface InOrder {

File: src/org/mockito/internal/InOrderImpl.java
Patch:
@@ -61,6 +61,6 @@ public void markVerified(Invocation i) {
 
     @Override
     public void verifyNoMoreInteractions() {
-                
+        mockitoCore.verifyNoMoreInteractionsInOrder(mocksToBeVerifiedInOrder, this);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/MockHandlerInterface.java
Patch:
@@ -16,8 +16,6 @@ public interface MockHandlerInterface<T> {
 
     MockSettingsImpl getMockSettings();
 
-    void verifyNoMoreInteractions();
-
     VoidMethodStubbable<T> voidMethodStubbable(T mock);
     
     void setAnswersForStubbing(List<Answer> answers);

File: src/org/mockito/internal/verification/api/VerificationInOrderMode.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockito.internal.verification.api;
 
 public interface VerificationInOrderMode {
-
-    void verifyInOrder(VerificationData data);
     
+    void verifyInOrder(VerificationDataInOrder data);    
 }
\ No newline at end of file

File: test/org/mockitousage/stubbing/ReturningMockValuesTest.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.Test;
 import org.mockitoutil.TestBase;
 
-//FIXME add test to demonstrate usage
+//TODO add test to demonstrate usage
 public class ReturningMockValuesTest extends TestBase {
 
     @Test

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java
Patch:
@@ -21,7 +21,7 @@ final class Baz {
     }
 
     @Test
-    // FIXME split into separate
+    //TODO split into separate
     public void shouldReturnMockValueForInterface() throws Exception {
         Object interfaceMock = values.returnValueFor(FooInterface.class);
         assertTrue(new MockUtil().isMock(interfaceMock));

File: test/org/mockito/MockitoTest.java
Patch:
@@ -21,7 +21,7 @@ public class MockitoTest extends TestBase {
     public void shouldRemoveStubbableFromProgressAfterStubbing() {
         List mock = Mockito.mock(List.class);
         Mockito.when(mock.add("test")).thenReturn(true);
-        //FIXME Consider to move to separate test
+        //TODO Consider to move to separate test
         assertNull(new ThreadSafeMockingProgress().pullOngoingStubbing());
     }
     

File: src/org/mockito/Mockito.java
Patch:
@@ -705,8 +705,8 @@ public class Mockito extends Matchers {
      * </pre>
      * 
      * <strong>Verification API does not support 'chaining'</strong> so deep stub doesn't change how you do verification.
-     *
-     * <strong>WARNING</strong><p>
+     * <p>
+     * <strong>WARNING: </strong>
      * This feature should rarely be required for regular clean code! Leave it for legacy code.
      * Mocking a mock to return a mock, to return a mock, (...), to return something meaningful
      * hints at violation of Law of Demeter or mocking a value object (a well known anti-pattern).

File: src/org/mockito/ArgumentCaptor.java
Patch:
@@ -36,6 +36,8 @@
  * </ul>
  * Custom argument matchers via {@link ArgumentMatcher} are usually better for stubbing.
  * <p>
+ * There is an <b>annotation</b> that you might find useful: &#64;{@link Captor}
+ * <p>
  * See the full documentation on Mockito in javadoc for {@link Mockito} class.    
  */
 public class ArgumentCaptor<T> {

File: src/org/mockito/Captor.java
Patch:
@@ -22,6 +22,8 @@
  *    ...
  * }
  * </pre>
+ * <p>
+ * One of the advantages of using &#64;Captor annotation is that you can avoid warnings related capturing complex generic types.
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)

File: src/org/mockito/Matchers.java
Patch:
@@ -489,6 +489,8 @@ public static <T> T eq(T value) {
      * Works similarly to EqualsBuilder.reflectionEquals(this, other, exlucdeFields) from
      * apache commons library.
      * <p>
+     * <b>Warning</b> The equality check is shallow!
+     * <p>
      * See examples in javadoc for {@link Matchers} class
      * 
      * @param value

File: src/org/mockito/InjectMock.java
Patch:
@@ -50,6 +50,4 @@
 @Documented
 @Target( { FIELD })
 @Retention(RetentionPolicy.RUNTIME)
-public @interface InjectMock {
-    //TODO should also inject spies
-}
+public @interface InjectMock {}

File: src/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -11,9 +11,9 @@
 
 import org.mockito.Captor;
 import org.mockito.InjectMock;
+import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.mockito.Spy;
-import org.mockito.MockitoAnnotations.Mock;
 import org.mockito.configuration.AnnotationEngine;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.MockitoException;
@@ -45,7 +45,7 @@ public void process(Class<?> context, Object testClass) {
         Field[] fields = context.getDeclaredFields();
         for (Field field : fields) {
             if (field.isAnnotationPresent(InjectMock.class)) {
-//                assertNoAnnotations(field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
+                assertNoAnnotations(field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
                 injectMocks(testClass);
             }
         }

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -44,7 +44,6 @@ public IOngoingStubbing stub() {
         return stubbing;
     }
 
-    @Deprecated
     public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {
         mockingProgress.stubbingStarted();
         return (DeprecatedOngoingStubbing) stub();

File: src/org/mockito/internal/configuration/DefaultAnnotationEngine.java
Patch:
@@ -23,12 +23,12 @@
  * <p/>
  * See {@link MockitoAnnotations}
  */
+@SuppressWarnings("deprecation")
 public class DefaultAnnotationEngine implements AnnotationEngine {
 
     /* (non-Javadoc)
     * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)
     */
-    @SuppressWarnings("deprecation")
     public Object createMockFor(Annotation annotation, Field field) {
         if (annotation instanceof Mock) {
             return processAnnotationOn((Mock) annotation, field);
@@ -58,7 +58,7 @@ private Object processAnnotationOn(Mock annotation, Field field) {
         mockSettings.defaultAnswer(annotation.answer().get());
         return Mockito.mock(field.getType(), mockSettings);
     }
-
+    
     private Object processAnnotationOn(org.mockito.MockitoAnnotations.Mock annotation, Field field) {
         return Mockito.mock(field.getType(), field.getName());
     }

File: src/org/mockito/internal/configuration/InjectingAnnotationEngine.java
Patch:
@@ -87,7 +87,6 @@ private static Set<Field> scanForInjection(Object testClass, Class<?> clazz) {
         Field[] fields = clazz.getDeclaredFields();
         for (Field field : fields) {
             if (null != field.getAnnotation(InjectMock.class)) {
-                InjectMock injectMockAnnotation = (InjectMock) field.getAnnotation(InjectMock.class);
                 testedFields.add(field);
             }
         }

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.internal.util.MockName;
 import org.mockito.stubbing.Answer;
 
+@SuppressWarnings("unchecked")
 public class MockSettingsImpl implements MockSettings {
 
     private static final long serialVersionUID = 4475297236197939568L;
@@ -62,7 +63,6 @@ public MockSettings spiedInstance(Object spiedInstance) {
         return this;
     }
 
-    @SuppressWarnings("unchecked")
     public MockSettings defaultAnswer(Answer defaultAnswer) {
         this.defaultAnswer = defaultAnswer;
         return this;
@@ -75,7 +75,7 @@ public Answer<Object> getDefaultAnswer() {
     public boolean isSerializable() {
         return serializable;
     }
-
+    
     public void initiateMockName(Class classToMock) {
         mockName = new MockName(name, classToMock);
     }

File: src/org/mockito/internal/debugging/WarningsFinder.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
+@SuppressWarnings("unchecked")
 public class WarningsFinder {
     private final List<Invocation> baseUnusedStubs;
     private final List<InvocationMatcher> baseAllInvocations;
@@ -15,7 +16,7 @@ public WarningsFinder(List<Invocation> unusedStubs, List<InvocationMatcher> allI
         this.baseUnusedStubs = unusedStubs;
         this.baseAllInvocations = allInvocations;
     }
-
+    
     public void find(FindingsListener findingsListener) {
         List<Invocation> unusedStubs = new LinkedList(this.baseUnusedStubs);
         List<InvocationMatcher> allInvocations = new LinkedList(this.baseAllInvocations);

File: src/org/mockito/internal/exceptions/ExceptionIncludingMockitoWarnings.java
Patch:
@@ -1,6 +1,8 @@
 package org.mockito.internal.exceptions;
 
 public class ExceptionIncludingMockitoWarnings extends RuntimeException {
+    private static final long serialVersionUID = -5925150219446765679L;
+
     public ExceptionIncludingMockitoWarnings(String message, Throwable throwable) {
         super(message, throwable);
     }

File: src/org/mockito/internal/listeners/CollectCreatedMocks.java
Patch:
@@ -4,7 +4,9 @@
 
 import java.util.List;
 
+@SuppressWarnings("unchecked")
 public class CollectCreatedMocks implements MockingStartedListener {
+    
     private List toBeFilled;
 
     public CollectCreatedMocks(List toBeFilled) {

File: src/org/mockito/internal/listeners/MockingStartedListener.java
Patch:
@@ -2,6 +2,8 @@
 
 import org.mockito.MockSettings;
 
+@SuppressWarnings("unchecked")
 public interface MockingStartedListener extends MockingProgressListener {
+    
     void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings);
 }

File: src/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -9,6 +9,7 @@
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.verification.VerificationMode;
 
+@SuppressWarnings("unchecked")
 public interface MockingProgress {
     
     void reportOngoingStubbing(IOngoingStubbing iOngoingStubbing);
@@ -34,7 +35,7 @@ public interface MockingProgress {
     void resetOngoingStubbing();
 
     ArgumentMatcherStorage getArgumentMatcherStorage();
-
+    
     void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings);
 
     void setListener(MockingProgressListener listener);

File: src/org/mockito/internal/progress/ThreadSafeMockingProgress.java
Patch:
@@ -11,6 +11,7 @@
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.verification.VerificationMode;
 
+@SuppressWarnings("unchecked")
 public class ThreadSafeMockingProgress implements MockingProgress, Serializable {
     
     private static final long serialVersionUID = 6839454041642082618L;
@@ -66,7 +67,7 @@ public void resetOngoingStubbing() {
     public ArgumentMatcherStorage getArgumentMatcherStorage() {
         return threadSafely().getArgumentMatcherStorage();
     }
-
+    
     public void mockingStarted(Object mock, Class classToMock, MockSettings mockSettings) {
         threadSafely().mockingStarted(mock, classToMock, mockSettings);
     }

File: src/org/mockito/internal/runners/JUnit44RunnerImpl.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.runner.Description;
-import org.junit.runner.Runner;
 import org.junit.runner.manipulation.Filter;
 import org.junit.runner.manipulation.NoTestsRemainException;
 import org.junit.runner.notification.RunNotifier;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -27,7 +27,6 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         return returnValueFor(invocation.getMethod().getReturnType());
     }
 
-    @SuppressWarnings("unchecked")
     Object returnValueFor(Class<?> clazz) {
         if (!ClassImposterizer.INSTANCE.canImposterise(clazz)) {
             return null;

File: src/org/mockito/internal/util/ArrayUtils.java
Patch:
@@ -1,5 +1,6 @@
 package org.mockito.internal.util;
 
+@SuppressWarnings("unchecked")
 public class ArrayUtils {
     public Class<?>[] concat(Class<?>[] interfaces, Class<?> clazz) {
         int length = interfaces.length;

File: test/org/mockito/internal/debugging/WarningsPrinterImplTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.debugging;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
 import org.junit.Test;

File: test/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java
Patch:
@@ -13,13 +13,10 @@
 import org.junit.runners.model.InitializationError;
 import org.mockito.internal.runners.RunnerImpl;
 import org.mockito.internal.util.ConsoleMockitoLogger;
-import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
 public class ConsoleSpammingMockitoJUnitRunnerTest extends TestBase {
     
-    private IMethods mock;
-
     private ConsoleSpammingMockitoJUnitRunner runner;
     private MockitoLoggerStub loggerStub;
     private RunNotifier notifier;

File: test/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.mockito.stubbing.Answer;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("unchecked")
 public class PlaygroundWithDemoOfUnclonedParametersProblemTest extends TestBase {
 
     ImportManager importManager;

File: test/org/mockitousage/basicapi/AnnotationsTest.java
Patch:
@@ -16,7 +16,6 @@
 import org.junit.Test;
 import org.mockito.*;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.internal.stubbing.defaultanswers.Answers;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: test/org/mockitousage/basicapi/MockInjectionTest.java
Patch:
@@ -10,16 +10,16 @@
 
 import java.util.*;
 
+@SuppressWarnings("unchecked")
 public class MockInjectionTest extends TestBase {
 
 	private SuperUnderTesting superUnderTestWithoutInjection = new SuperUnderTesting();
 	@InjectMock private SuperUnderTesting superUnderTest = new SuperUnderTesting();
 	@InjectMock private BaseUnderTesting baseUnderTest = new BaseUnderTesting();
 	@InjectMock private SubUnderTesting subUnderTest = new SubUnderTesting();
 	@InjectMock private OtherBaseUnderTesting otherBaseUnderTest = new OtherBaseUnderTesting();
-	@Mock private Map map;
-	@Mock private List list;
-	@Mock private Set set;
+	@Mock private Map map;	
+    @Mock private List list;
 	@Mock private Set histogram1;
 	@Mock private Set histogram2;
 	@Spy private TreeSet searchTree = new TreeSet();

File: test/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("serial")
+@SuppressWarnings({"unchecked", "serial"})
 public class MocksSerializationTest extends TestBase implements Serializable {
 
     private static final long serialVersionUID = 6160482220413048624L;
@@ -236,7 +236,6 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         }
     }
   
-    @SuppressWarnings("unchecked")
     @Test
     public void shouldSerializeWithRealObjectSpy() throws Exception {
         // given

File: test/org/mockitousage/basicapi/UsingVarargsTest.java
Patch:
@@ -4,18 +4,16 @@
  */
 package org.mockitousage.basicapi;
 
+import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
 import java.util.ArrayList;
 
-import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
-import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
 public class UsingVarargsTest extends TestBase {

File: test/org/mockitoutil/TestBase.java
Patch:
@@ -24,6 +24,7 @@
  * the easiest way to make sure that tests clean up invalid state is to require
  * valid state for all tests.
  */
+@SuppressWarnings("unchecked")
 public class TestBase extends Assert {
 
     @After
@@ -125,7 +126,7 @@ public static void assertNotContains(String sub, String string) {
                 "\n"
                 , string.contains(sub));
     }
-
+    
     protected static Invocation invocationOf(Class<?> type, String methodName, Object ... args) throws NoSuchMethodException {
         Class[] types = new Class[args.length];
         for (int i = 0; i < args.length; i++) {
@@ -144,7 +145,6 @@ protected static String describe(SelfDescribing m) {
         return StringDescription.toString(m);
     }
 
-    @SuppressWarnings("unchecked")
     //TODO use widely
     protected <T> T serializeAndBack(T obj) throws Exception {
         ByteArrayOutputStream os = this.serializeMock(obj);

File: test/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
+import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
@@ -148,7 +149,7 @@ public void shouldFailOnLastMethodBecauseOneInvocationWantedAgain() {
     
     /* ------------- */
     
-    @Test(expected=WantedButNotInvoked.class)
+    @Test(expected=ArgumentsAreDifferent.class)
     public void shouldFailOnFirstMethodBecauseDifferentArgsWanted() {
         inOrder.verify(mockOne).simpleMethod(100);
     }

File: test/org/mockitousage/basicapi/DeprecatedAnnotationEngineApiTest.java
Patch:
@@ -22,7 +22,7 @@ public void goBackToDefaultConfiguration() {
         ConfigurationAccess.getConfig().overrideAnnotationEngine(null);
     }
     
-    class SimpleTest {
+    class SimpleTestCase {
         @InjectMock Tested tested = new Tested();
         @Mock Dependency mock;
     }
@@ -41,7 +41,7 @@ public void shouldInjectMocksIfThereIsNoUserDefinedEngine() throws Exception {
         //given
         AnnotationEngine defaultEngine = new DefaultMockitoConfiguration().getAnnotationEngine();
         ConfigurationAccess.getConfig().overrideAnnotationEngine(defaultEngine);
-        SimpleTest test = new SimpleTest();
+        SimpleTestCase test = new SimpleTestCase();
         
         //when
         MockitoAnnotations.initMocks(test);
@@ -57,7 +57,7 @@ public void shouldRespectUsersEngine() throws Exception {
         //given
         AnnotationEngine customizedEngine = new DefaultAnnotationEngine() { /**/ };
         ConfigurationAccess.getConfig().overrideAnnotationEngine(customizedEngine);
-        SimpleTest test = new SimpleTest();
+        SimpleTestCase test = new SimpleTestCase();
         
         //when
         MockitoAnnotations.initMocks(test);

File: src/org/mockito/configuration/DefaultMockitoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.configuration;
 
 import org.mockito.ReturnValues;
-import org.mockito.internal.configuration.DefaultAnnotationEngine;
+import org.mockito.internal.configuration.InjectingAnnotationEngine;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;
 import org.mockito.stubbing.Answer;
 
@@ -36,7 +36,7 @@ public Answer<Object> getDefaultAnswer() {
      * @see org.mockito.IMockitoConfiguration#getAnnotationEngine()
      */
     public AnnotationEngine getAnnotationEngine() {
-        return new DefaultAnnotationEngine();
+        return new InjectingAnnotationEngine();
     }
 
     /* (non-Javadoc)

File: src/org/mockito/internal/MockHandlerInterface.java
Patch:
@@ -7,14 +7,15 @@
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;
 
+@SuppressWarnings("unchecked")
 public interface MockHandlerInterface<T> {
 
     MockSettingsImpl getMockSettings();
 
     void verifyNoMoreInteractions();
 
     VoidMethodStubbable<T> voidMethodStubbable(T mock);
-
+    
     void setAnswersForStubbing(List<Answer> answers);
 
     InvocationContainer getInvocationContainer();

File: src/org/mockito/internal/util/junit/JUnitFailureHacker.java
Patch:
@@ -22,6 +22,6 @@ public void appendWarnings(Failure failure, String warnings) {
     }
 
     private boolean isEmpty(String warnings) {
-        return warnings == null || warnings.isEmpty(); 
+        return warnings == null || "".equals(warnings); // isEmpty() is in JDK 6+ 
     }   
 }
\ No newline at end of file

File: src/org/mockito/Mock.java
Patch:
@@ -6,6 +6,7 @@
 
 import static java.lang.annotation.ElementType.*;
 
+import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
@@ -50,5 +51,6 @@
  */
 @Target( { FIELD })
 @Retention(RetentionPolicy.RUNTIME)
+@Documented
 public @interface Mock {}
 

File: src/org/mockito/InOrder.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito;
 
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 /**
  * Allows verification in order. E.g:

File: src/org/mockito/Mockito.java
Patch:
@@ -10,9 +10,9 @@
 import org.mockito.internal.stubbing.answers.*;
 import org.mockito.internal.stubbing.defaultanswers.*;
 import org.mockito.internal.verification.VerificationModeFactory;
-import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.mockito.stubbing.*;
+import org.mockito.verification.VerificationMode;
 
 /**
  * <p align="left"><img src="logo.jpg"/></p>

File: src/org/mockito/internal/InOrderImpl.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.internal.verification.InOrderWrapper;
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 /**
  * Allows verifying in order. This class should not be exposed, hence default access.

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -13,9 +13,9 @@
 import org.mockito.internal.stubbing.*;
 import org.mockito.internal.verification.VerificationDataImpl;
 import org.mockito.internal.verification.VerificationModeFactory;
-import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.stubbing.Answer;
 import org.mockito.stubbing.VoidMethodStubbable;
+import org.mockito.verification.VerificationMode;
 
 import java.util.List;
 

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -16,8 +16,8 @@
 import org.mockito.internal.stubbing.OngoingStubbingImpl;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.util.MockUtil;
-import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.stubbing.*;
+import org.mockito.verification.VerificationMode;
 
 import java.util.Arrays;
 import java.util.List;

File: src/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.MockSettings;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.listeners.MockingProgressListener;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public interface MockingProgress {
     

File: src/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.listeners.MockingProgressListener;
 import org.mockito.internal.listeners.MockingStartedListener;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 @SuppressWarnings("unchecked")
 public class MockingProgressImpl implements MockingProgress {

File: src/org/mockito/internal/progress/ThreadSafeMockingProgress.java
Patch:
@@ -9,7 +9,7 @@
 import org.mockito.MockSettings;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.listeners.MockingProgressListener;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class ThreadSafeMockingProgress implements MockingProgress, Serializable {
     

File: src/org/mockito/internal/verification/AtLeast.java
Patch:
@@ -11,11 +11,11 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
-import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsChecker;
 import org.mockito.internal.verification.checkers.AtLeastXNumberOfInvocationsInOrderChecker;
 import org.mockito.internal.verification.checkers.MissingInvocationChecker;
 import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;
+import org.mockito.verification.VerificationMode;
 
 public class AtLeast implements VerificationInOrderMode, VerificationMode {
     

File: src/org/mockito/internal/verification/AtMost.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.VerificationData;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class AtMost implements VerificationMode {
 

File: src/org/mockito/internal/verification/InOrderWrapper.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class InOrderWrapper implements VerificationMode {
 

File: src/org/mockito/internal/verification/NoMoreInteractions.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.VerificationData;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class NoMoreInteractions implements VerificationMode {
 

File: src/org/mockito/internal/verification/Only.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.VerificationData;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class Only implements VerificationMode {
 

File: src/org/mockito/internal/verification/Times.java
Patch:
@@ -11,11 +11,11 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationInOrderMode;
-import org.mockito.internal.verification.api.VerificationMode;
 import org.mockito.internal.verification.checkers.MissingInvocationChecker;
 import org.mockito.internal.verification.checkers.MissingInvocationInOrderChecker;
 import org.mockito.internal.verification.checkers.NumberOfInvocationsChecker;
 import org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderChecker;
+import org.mockito.verification.VerificationMode;
 
 public class Times implements VerificationInOrderMode, VerificationMode {
     

File: src/org/mockito/internal/verification/VerificationModeFactory.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.verification;
 
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class VerificationModeFactory {
     

File: src/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsFinder;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class MissingInvocationInOrderChecker {
     

File: src/org/mockito/runners/VerboseMockitoJUnitRunner.java
Patch:
@@ -15,11 +15,9 @@
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
 import org.mockito.internal.debugging.WarningsCollector;
-import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
 import org.mockito.internal.runners.RunnerFactory;
 import org.mockito.internal.runners.RunnerImpl;
 import org.mockito.internal.util.junit.JUnitFailureHacker;
-import org.mockito.internal.util.reflection.Whitebox;
 
 /**
  * Experimental implementation that suppose to improve tdd/testing experience. 

File: src/org/mockito/verification/VerificationMode.java
Patch:
@@ -2,9 +2,10 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.verification.api;
+package org.mockito.verification;
 
 import org.mockito.Mockito;
+import org.mockito.internal.verification.api.VerificationData;
 
 /**
  * Allows verifying that certain behavior happened at least once / exact number

File: test/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.listeners.MockingStartedListener;
 import org.mockito.internal.verification.VerificationModeFactory;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 import org.mockitoutil.TestBase;
 
 import java.util.List;

File: test/org/mockito/internal/verification/DummyVerificationMode.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.internal.verification;
 
 import org.mockito.internal.verification.api.VerificationData;
-import org.mockito.internal.verification.api.VerificationMode;
+import org.mockito.verification.VerificationMode;
 
 public class DummyVerificationMode implements VerificationMode {
     public void verify(VerificationData data) {

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -15,6 +15,7 @@
 import java.io.Serializable;
 
 public class ReturnsDeepStubs implements Answer<Object>, Serializable {
+    
     private static final long serialVersionUID = -6926328908792880098L;
     
     private Answer<Object> delegate = new ReturnsEmptyValues();

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java
Patch:
@@ -14,7 +14,7 @@
 
 import java.io.Serializable;
 
-public class ReturnsDeepMocks implements Answer<Object>, Serializable {
+public class ReturnsDeepStubs implements Answer<Object>, Serializable {
     private static final long serialVersionUID = -6926328908792880098L;
     
     private Answer<Object> delegate = new ReturnsEmptyValues();

File: test/org/mockito/internal/debugging/WarningsPrinterImplTest.java
Patch:
@@ -23,6 +23,8 @@ public class WarningsPrinterImplTest extends TestBase {
     private IMethods mock;
     private MockitoLoggerStub logger = new MockitoLoggerStub();
 
+    //TODO those tests should only deal with mocks
+
     @Test
     public void shouldPrintUnusedStub() {
         // given

File: test/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java
Patch:
@@ -18,7 +18,7 @@
 
 //@RunWith(ConsoleSpammingMockitoJUnitRunner.class)
 @RunWith(VerboseMockitoJUnitRunner.class)
-//@Ignore
+@Ignore
 public class ModellingVerboseMockitoTest extends TestBase {
     
     @Mock private IMethods mock;

File: src/org/mockito/internal/util/MockitoLoggerImpl.java
Patch:
@@ -10,6 +10,6 @@ public class MockitoLoggerImpl implements MockitoLogger {
      * @see org.mockito.internal.util.Logger#print(java.lang.Object)
      */
     public void log(Object what) {
-        System.out.println(what.toString());
+        System.out.print(what.toString());
     }
 }

File: src/org/mockito/internal/util/reflection/LenientCopyTool.java
Patch:
@@ -21,9 +21,6 @@ public <T> void copyToRealObject(T from, T to) {
     }
 
     private <T> void copy(T from, T to, Class fromClazz, Class toClass) {
-        assert toClass == fromClazz 
-            : "Classes must have the same type: class of the object from: " + fromClazz + ", mock super class: " + toClass;
-
         while (fromClazz != Object.class) {
             copyValues(from, to, fromClazz);
             fromClazz = fromClazz.getSuperclass();

File: test/org/mockito/internal/debugging/WarningsPrinterImplTest.java
Patch:
@@ -62,7 +62,7 @@ public void shouldPrintStubWasUsedWithDifferentArgs() {
         p.print(logger);
 
         // then
-        assertContains("different arguments", logger.getLoggedInfo());
+        assertContains("different arg", logger.getLoggedInfo());
     }
 
     @Test

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -30,8 +30,9 @@ public class MockitoCore {
     private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();
     
     public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
-        mockingProgress.validateState();
-        return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);
+        T mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings);
+        mockingProgress.mockingStarted(mock, classToMock, mockSettings);
+        return mock;
     }
     
     public IOngoingStubbing stub() {

File: src/org/mockito/runners/VerboseMockitoJUnitRunner.java
Patch:
@@ -49,6 +49,7 @@ public VerboseMockitoJUnitRunner(Class<?> klass) throws InvocationTargetExceptio
     @Override
     public void run(RunNotifier notifier) {
         MockingProgress progress = new ThreadSafeMockingProgress();
+        //TODO this class should work like ConsoleSpammingRunner and we should kill off debuggingInfo
         DebuggingInfo debuggingInfo = progress.getDebuggingInfo();
         
         beforeRun(notifier, debuggingInfo);

File: src/org/mockito/internal/runners/JUnit45AndHigherRunnerImpl.java
Patch:
@@ -41,10 +41,7 @@ public Description getDescription() {
         return runner.getDescription();
     }
 
-	@Override
 	public void filter(Filter filter) throws NoTestsRemainException {
 		runner.filter(filter);
 	}
-
-	
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/VerificationDataImpl.java
Patch:
@@ -39,8 +39,5 @@ void assertWantedIsVerifiable() {
         if (o.isToString(wanted.getMethod())) {
             new Reporter().cannotVerifyToString();
         }
-        if (o.isEqualsMethod(wanted.getMethod())) {
-            new Reporter().cannotVerifyEqualsOrHashCode();
-        }
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepMocks.java
Patch:
@@ -13,7 +13,7 @@
 
 import java.io.Serializable;
 
-public class ReturnsDeepStubs implements Answer<Object>, Serializable {
+public class ReturnsDeepMocks implements Answer<Object>, Serializable {
     private static final long serialVersionUID = -6926328908792880098L;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {

File: test/org/mockitousage/PlaygroundTest.java
Patch:
@@ -32,9 +32,9 @@ public void withLong(long y) {
     @Test
     public void should() throws Exception {
         Boo boo = mock(Boo.class);
-        boo.withLong(100);
-        
-        verify(boo).withLong(new Long(100));
+
+        boo.toString();
+        verify(boo).toString();
     }
 
     Foo mock;

File: src/org/mockito/internal/stubbing/InvocationContainerImpl.java
Patch:
@@ -50,7 +50,7 @@ public void addConsecutiveAnswer(Answer answer) {
         addAnswer(answer, true);
     }
 
-    private void addAnswer(Answer answer, boolean isConsecutive) {
+    public void addAnswer(Answer answer, boolean isConsecutive) {
         Invocation invocation = invocationForStubbing.getInvocation();
         mockingProgress.stubbingCompleted(invocation);
         AnswersValidator answersValidator = new AnswersValidator();
@@ -112,4 +112,4 @@ public List<Invocation> getInvocations() {
     public List<StubbedInvocationMatcher> getStubbedInvocations() {
         return stubbed;
     }
-}
\ No newline at end of file
+}

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -103,7 +103,7 @@ public String toString(PrintSettings printSettings) {
     public void captureArgumentsFrom(Invocation i) {
         int k = 0;
         for (Matcher m : matchers) {
-            if (m instanceof CapturesArguments) {
+            if (m instanceof CapturesArguments && i.getArguments().length > k) {
                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);
             }
             k++;

File: test/org/mockitousage/IMethods.java
Patch:
@@ -164,9 +164,9 @@ public interface IMethods {
 
     Object varargsObject(int i, Object... object);
     
-    void varargs(Object ... object);
+    int varargs(Object ... object);
     
-    void varargs(String ... string);
+    int varargs(String ... string);
 
     void mixedVarargs(Object i, String ... string);
 

File: test/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -496,9 +496,9 @@ public void deltaMatcherPrintsItself() {
     
     @Test
     public void sameMatcher() {
-        Object one = "1243";
-        Object two = "1243";
-        Object three = "1243";
+        Object one = new String("1243");
+        Object two = new String("1243");
+        Object three = new String("1243");
 
         assertNotSame(one, two);
         assertEquals(one, two);

File: src/org/mockito/Matchers.java
Patch:
@@ -476,8 +476,8 @@ public static short eq(short value) {
      * @return <code>null</code>.
      */
     public static <T> T eq(T value) {
-        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());
-    }  
+        return (T) reportMatcher(new Equals(value)).<T>returnFor(value);
+    }
 
     /**
      * Object argument that is reflection-equal to the given value with support for excluding
@@ -513,7 +513,7 @@ public static <T> T refEq(T value, String... excludeFields) {
      * @return <code>null</code>.
      */
     public static <T> T same(T value) {
-        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());
+        return (T) reportMatcher(new Same(value)).<T>returnFor(value);
     }
 
     /**

File: src/org/mockito/Mockito.java
Patch:
@@ -824,7 +824,7 @@ public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {
      * @return mock object
      */
     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
-        return MOCKITO_CORE.mock(classToMock, mockSettings, true);
+        return MOCKITO_CORE.mock(classToMock, mockSettings);
     }
     
     /**
@@ -896,7 +896,7 @@ public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
     public static <T> T spy(T object) {
         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()
                 .spiedInstance(object)
-                .defaultAnswer(CALLS_REAL_METHODS), true); 
+                .defaultAnswer(CALLS_REAL_METHODS));
     }
 
     /**

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -33,6 +33,6 @@ Object returnValueFor(Class<?> clazz) {
             return null;
         }
         
-        return mockitoCore.mock(clazz, new MockSettingsImpl().defaultAnswer(this), false);
+        return mockitoCore.mock(clazz, new MockSettingsImpl().defaultAnswer(this));
     }
 }
\ No newline at end of file

File: test/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -64,6 +64,7 @@ public void shouldStubbingNotBeTreatedAsInteraction() {
     
     @Test
     public void unfinishedStubbingCleansUpTheState() {
+        reset(mock);
         try {
             when("").thenReturn("");
             fail(); 

File: src/org/mockito/Mockito.java
Patch:
@@ -824,7 +824,7 @@ public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) {
      * @return mock object
      */
     public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
-        return MOCKITO_CORE.mock(classToMock, mockSettings);
+        return MOCKITO_CORE.mock(classToMock, mockSettings, true);
     }
     
     /**
@@ -896,7 +896,7 @@ public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
     public static <T> T spy(T object) {
         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()
                 .spiedInstance(object)
-                .defaultAnswer(CALLS_REAL_METHODS)); 
+                .defaultAnswer(CALLS_REAL_METHODS), true); 
     }
 
     /**

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -33,6 +33,6 @@ Object returnValueFor(Class<?> clazz) {
             return null;
         }
         
-        return mockitoCore.mock((Class) clazz, new MockSettingsImpl().defaultAnswer(this));
+        return mockitoCore.mock(clazz, new MockSettingsImpl().defaultAnswer(this), false);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.stubbing;
 
+import java.io.Serializable;
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
@@ -13,7 +14,7 @@
 import org.mockito.stubbing.Answer;
 
 @SuppressWarnings("unchecked")
-public class StubbedInvocationMatcher extends InvocationMatcher implements Answer {
+public class StubbedInvocationMatcher extends InvocationMatcher implements Answer, Serializable {
 
     private static final long serialVersionUID = 4919105134123672727L;
     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();

File: src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java
Patch:
@@ -4,13 +4,15 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import java.io.Serializable;
+
 import org.mockito.ReturnValues;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
 //It's ok to suppress deprecation because this class goes away as soon as ReturnValues disappears in future release
 @SuppressWarnings("deprecation")
-public class AnswerReturnValuesAdapter implements Answer<Object> {
+public class AnswerReturnValuesAdapter implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = 1418158596876713469L;
     private final ReturnValues returnValues;

File: src/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import java.io.Serializable;
+
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
@@ -27,7 +29,7 @@
  * However, I wouldn't use partial mocks for new, test-driven & well-designed code.
  * <p>
  */
-public class CallsRealMethods implements Answer<Object> {
+public class CallsRealMethods implements Answer<Object>, Serializable {
     private static final long serialVersionUID = 9057165148930624087L;
 
     public Object answer(InvocationOnMock invocation) throws Throwable {

File: src/org/mockito/internal/stubbing/answers/DoesNothing.java
Patch:
@@ -4,10 +4,12 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import java.io.Serializable;
+
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-public class DoesNothing implements Answer<Object> {
+public class DoesNothing implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = 4840880517740698416L;
 

File: src/org/mockito/internal/stubbing/answers/Returns.java
Patch:
@@ -4,10 +4,12 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import java.io.Serializable;
+
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-public class Returns implements Answer<Object> {
+public class Returns implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = -6245608253574215396L;
     private final Object value;

File: src/org/mockito/internal/stubbing/answers/ThrowsException.java
Patch:
@@ -4,12 +4,14 @@
  */
 package org.mockito.internal.stubbing.answers;
 
+import java.io.Serializable;
+
 import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-public class ThrowsException implements Answer<Object> {
+public class ThrowsException implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = 1128820328555183980L;
     private final Throwable throwable;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
@@ -47,7 +48,7 @@
  * </li>
  * </ul>
  */
-public class ReturnsEmptyValues implements Answer<Object> {
+public class ReturnsEmptyValues implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = 1998191268711234347L;
 

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -4,13 +4,15 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
+import java.io.Serializable;
+
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.creation.MockSettingsImpl;
 import org.mockito.internal.creation.jmock.ClassImposterizer;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-public class ReturnsMocks implements Answer<Object> {
+public class ReturnsMocks implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = -6755257986994634579L;
     private MockitoCore mockitoCore = new MockitoCore();

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.stubbing.defaultanswers;
 
+import java.io.Serializable;
 import java.lang.reflect.Array;
 
 import org.mockito.Mockito;
@@ -40,7 +41,7 @@
  * </li>
  * </ul>
  */
-public class ReturnsMoreEmptyValues implements Answer<Object> {
+public class ReturnsMoreEmptyValues implements Answer<Object>, Serializable {
     
     private static final long serialVersionUID = -2816745041482698471L;
     private Answer<Object> delegate = new ReturnsEmptyValues();

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -14,6 +14,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
+import java.io.Serializable;
 import java.lang.reflect.Method;
 
 /**
@@ -34,7 +35,7 @@
  * ReturnsSmartNulls will be probably the default return values strategy in
  * Mockito 2.0
  */
-public class ReturnsSmartNulls implements Answer<Object> {
+public class ReturnsSmartNulls implements Answer<Object>, Serializable {
 
     private static final long serialVersionUID = 7618312406617949441L;
 

File: src/org/mockito/stubbing/Answer.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.stubbing;
 
-import java.io.Serializable;
-
 import org.mockito.invocation.InvocationOnMock;
 
 /**
@@ -29,7 +27,7 @@
  * 
  * @param <T> the type to return.
  */
-public interface Answer<T> extends Serializable {
+public interface Answer<T> {
     /**
      * @param invocation the invocation on the mock.
      *

File: test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("serial")
 public class ReadingConfigurationFromClasspathTest extends TestBase {
     
     @Test

File: test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java
Patch:
@@ -14,7 +14,6 @@
 import org.mockito.stubbing.Answer;
 import org.mockitousage.IMethods;
 
-@SuppressWarnings("serial")
 public class MethodProxyBuilder {
 
     public MockitoMethodProxy build() {

File: test/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -13,7 +13,6 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("serial")
 public class BDDMockitoTest extends TestBase {
     
     @Mock IMethods mock;

File: test/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.stubbing.Answer;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings({"unchecked", "serial"})
+@SuppressWarnings({"unchecked"})
 public class SpyingOnInterfacesTest extends TestBase {
 
     @Test

File: test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings({"unchecked", "deprecation", "serial"})
+@SuppressWarnings({"unchecked", "deprecation"})
 public class StubbingWithCustomAnswerTest extends TestBase {
     @Mock
     private IMethods mock;

File: src/org/mockito/MockitoDebugger.java
Patch:
@@ -1,5 +1,5 @@
 package org.mockito;
 
 public interface MockitoDebugger {
-    void printInvocations(Object ... mocks);
+    String printInvocations(Object ... mocks);
 }

File: test/org/mockitousage/debugging/DebuggingTestCasesTest.java
Patch:
@@ -5,11 +5,12 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockitousage.IMethods;
+import org.mockitoutil.TestBase;
 
 import static org.mockito.BDDMockito.*;
 
 @Ignore
-public class DebuggingTestCasesTest {
+public class DebuggingTestCasesTest extends TestBase {
 
     IMethods mock = mock(IMethods.class);
     IMethods mockTwo = mock(IMethods.class);

File: src/org/mockito/internal/stubbing/MockitoStubber.java
Patch:
@@ -11,13 +11,12 @@
 
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.StubInfo;
 import org.mockito.internal.progress.MockingProgress;
 import org.mockito.internal.stubbing.answers.AnswersValidator;
 import org.mockito.internal.verification.RegisteredInvocations;
 import org.mockito.stubbing.Answer;
 
-import javax.management.openmbean.CompositeData;
-
 @SuppressWarnings("unchecked")
 public class MockitoStubber implements Serializable {
 
@@ -71,6 +70,8 @@ Object answerTo(Invocation invocation) throws Throwable {
     public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {
         for (StubbedInvocationMatcher s : stubbed) {
             if (s.matches(invocation)) {
+                invocation.markStubbed(new StubInfo(s.getInvocation()));
+                s.markStubUsed(invocation);
                 return s;
             }
         }

File: src/org/mockito/internal/stubbing/OngoingStubbingImpl.java
Patch:
@@ -21,13 +21,11 @@ public OngoingStubbingImpl(MockitoStubber mockitoStubber) {
     }
 
     public OngoingStubbing<T> thenAnswer(Answer<?> answer) {
-        mockitoStubber.getRegisteredInvocations().removeLast();
         mockitoStubber.addAnswer(answer);
         return new ConsecutiveStubbing<T>(mockitoStubber);
     }
 
     public DeprecatedOngoingStubbing<T> toAnswer(Answer<?> answer) {
-        mockitoStubber.getRegisteredInvocations().removeLast();
         mockitoStubber.addAnswer(answer);
         return new ConsecutiveStubbing<T>(mockitoStubber);
     }

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -76,7 +76,7 @@ public Object handle(Invocation invocation) throws Throwable {
         }
         
         mockitoStubber.setInvocationForPotentialStubbing(invocationMatcher);
-        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber, mockitoStubber.getRegisteredInvocations());
+        OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(mockitoStubber);
         mockingProgress.reportOngoingStubbing(ongoingStubbing);
 
         StubbedInvocationMatcher stubbedInvocation = mockitoStubber.findAnswerFor(invocation);

File: src/org/mockito/internal/MockitoCore.java
Patch:
@@ -133,7 +133,7 @@ public void validateMockitoUsage() {
      */
     public Invocation getLastInvocation() {
         OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing());
-        List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations().getAll();
+        List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations();
         return allInvocations.get(allInvocations.size()-1);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -15,7 +15,7 @@
 public class ArgumentMatchingTool {
 
     /**
-     * Suspiciously not matching arguments are those that don't much, the toString() representation is the same but types are different.
+     * Suspiciously not matching arguments are those that don't match, the toString() representation is the same but types are different.
      */
     public Integer[] getSuspiciouslyNotMatchingArgsIndexes(List<Matcher> matchers, Object[] arguments) {
         if (matchers.size() != arguments.length) {

File: src/org/mockito/Matchers.java
Patch:
@@ -359,7 +359,7 @@ public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {
      * @return <code>null</code>.
      */
     public static <T> T isA(Class<T> clazz) {
-        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();
+        return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);
     }
 
     /**
@@ -476,7 +476,7 @@ public static short eq(short value) {
      * @return <code>null</code>.
      */
     public static <T> T eq(T value) {
-        return reportMatcher(new Equals(value)).<T>returnNull();
+        return (T) reportMatcher(new Equals(value)).<T>returnFor((Class) value.getClass());
     }  
 
     /**
@@ -513,7 +513,7 @@ public static <T> T refEq(T value, String... excludeFields) {
      * @return <code>null</code>.
      */
     public static <T> T same(T value) {
-        return reportMatcher(new Same(value)).<T>returnNull();
+        return (T) reportMatcher(new Same(value)).<T>returnFor((Class) value.getClass());
     }
 
     /**

File: src/org/mockito/internal/progress/HandyReturnValues.java
Patch:
@@ -40,7 +40,7 @@ public <T> T returnFor(Class<T> clazz) {
         if (isPrimitiveWrapper(clazz)) {
             return primitiveWrapperOf(clazz);
         } 
-        return primitiveValueFor(clazz);
+        return primitiveValueOrNullFor(clazz);
     }
 
     public Map returnMap() {

File: src/org/mockito/internal/util/Primitives.java
Patch:
@@ -22,7 +22,7 @@ public static <T> Class<T> primitiveTypeOf(Class<T> clazz) {
         return (Class<T>) primitiveTypes.get(clazz);
     }
     
-    public static <T> T primitiveValueFor(Class<T> primitiveType) {
+    public static <T> T primitiveValueOrNullFor(Class<T> primitiveType) {
         return (T) primitiveValues.get(primitiveType);
     }
     

File: src/org/mockito/runners/MockitoJUnit44Runner.java
Patch:
@@ -8,6 +8,8 @@
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 
+import java.lang.reflect.InvocationTargetException;
+
 /**
  * <b>Deprecated: Simply use {@link MockitoJUnitRunner}</b>
  * <p>
@@ -47,7 +49,7 @@
 @Deprecated
 public class MockitoJUnit44Runner extends MockitoJUnitRunner {
 
-    public MockitoJUnit44Runner(Class<?> klass) {
+    public MockitoJUnit44Runner(Class<?> klass) throws InvocationTargetException {
         super(klass);
     }
 }
\ No newline at end of file

File: src/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -13,6 +13,8 @@
 import org.mockito.internal.runners.RunnerFactory;
 import org.mockito.internal.runners.RunnerImpl;
 
+import java.lang.reflect.InvocationTargetException;
+
 
 /**
  * Compatible with <b>JUnit 4.4</b> and higher, this runner adds following behavior:
@@ -48,7 +50,7 @@ public class MockitoJUnitRunner extends Runner {
 
     private final RunnerImpl runner;
 
-    public MockitoJUnitRunner(Class<?> klass) {
+    public MockitoJUnitRunner(Class<?> klass) throws InvocationTargetException {
         runner = new RunnerFactory().create(klass);
     }
 

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -5,6 +5,7 @@
 package org.mockito.internal.invocation;
 
 import java.io.Serializable;
+import java.lang.reflect.Method;
 import java.util.Collections;
 import java.util.List;
 
@@ -35,7 +36,7 @@ public InvocationMatcher(Invocation invocation) {
         this(invocation, Collections.<Matcher>emptyList());
     }
 
-    public SerializableMethod getMethod() {
+    public Method getMethod() {
         return invocation.getMethod();
     }
     

File: src/org/mockito/internal/stubbing/answers/AnswersValidator.java
Patch:
@@ -31,7 +31,7 @@ public void validate(Answer<?> answer, Invocation invocation) {
     }
 
     private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {
-        if (invocation.getMethod().isDeclaredOnInterface()) {
+        if (invocation.isDeclaredOnInterface()) {
             reporter.cannotCallRealMethodOnInterface();
         }
     }

File: test/org/mockitousage/spies/SpyingOnInterfacesTest.java
Patch:
@@ -8,7 +8,6 @@
 
 import java.util.List;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.invocation.InvocationOnMock;
@@ -29,9 +28,8 @@ public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {
         } catch (MockitoException e) {}
     }
     
-    @Ignore("not yet implemented")
     @Test
-    public void shouldFailFastWhenCallingRealMethodOnInterface2() throws Exception {
+    public void shouldFailInRuntimeWhenCallingRealMethodOnInterface() throws Exception {
         //given
         List list = mock(List.class);
         when(list.get(0)).thenAnswer(

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -475,9 +475,9 @@ public void mockedTypeIsInconsistentWithSpiedInstanceType(Class<?> mockedType, O
 
     public void cannotCallRealMethodOnInterface() {
         throw new MockitoException(join(
-                "Cannot call real methond on java interface. Interface does not have any implementation!",
+                "Cannot call real method on java interface. Interface does not have any implementation!",
                 "Calling real methods is only possible when mocking concrete classes.",
-                "  //correct:",
+                "  //correct example:",
                 "  when(mockOfConcreteClass.doStuff()).thenCallRealMethod();"
         ));
     }

File: src/org/mockito/internal/invocation/MockitoMethod.java
Patch:
@@ -12,4 +12,6 @@ public interface MockitoMethod {
 
   boolean isVarArgs();
 
+  Class<?> getDeclaringClass();
+
 }

File: src/org/mockito/internal/stubbing/BaseStubbing.java
Patch:
@@ -45,7 +45,6 @@ public OngoingStubbing<T> thenThrow(Throwable... throwables) {
         return stubbing;
     }        
 
-    //TODO: after 1.8 fail when someone tries to do it with a mock of an Interface
     public OngoingStubbing<T> thenCallRealMethod() {
         return thenAnswer(new CallsRealMethods());
     }

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -34,6 +34,7 @@ public MockUtil() {
     public <T> T createMock(Class<T> classToMock, MockingProgress progress, MockSettingsImpl settings) {
         creationValidator.validateType(classToMock);
         creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());
+        creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());
         
         MockName mockName = new MockName(settings.getMockName(), classToMock);
         MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);

File: test/org/mockito/internal/MockHandlerTest.java
Patch:
@@ -14,10 +14,9 @@
 import org.mockito.internal.verification.VerificationModeFactory;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class MockHandlerTest extends TestBase {
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {
         //given

File: test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java
Patch:
@@ -12,9 +12,9 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("serial")
 public class ReadingConfigurationFromClasspathTest extends TestBase {
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldReadConfigurationClassFromClassPath() {
         ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {

File: test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java
Patch:
@@ -13,9 +13,9 @@
 import org.mockito.stubbing.Answer;
 import org.mockitousage.IMethods;
 
+@SuppressWarnings("serial")
 public class MethodProxyBuilder {
 
-    @SuppressWarnings("serial")
     public MethodProxy build() {
         IMethods mock = mock(IMethods.class);
         when(mock.objectReturningMethodNoArgs()).thenAnswer(new Answer<Object>() {

File: test/org/mockito/internal/invocation/InvocationMarkerTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.internal.util.ObjectBox;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("serial")
 public class InvocationMarkerTest extends TestBase {
 
     @Test
@@ -27,7 +28,6 @@ public void shouldMarkInvocationAsVerified() {
         assertTrue(i.isVerified());
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldCaptureArguments() {
         //given

File: test/org/mockito/internal/invocation/InvocationTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class InvocationTest extends TestBase {
 
     private Invocation invocation;
@@ -153,7 +153,6 @@ public String bark() {
         }
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldBeAbleToCallRealMethod() throws Throwable {
         //when

File: test/org/mockito/internal/stubbing/MockitoStubberTest.java
Patch:
@@ -96,5 +96,6 @@ public void shouldValidateThrowable() throws Throwable {
         } catch (MockitoException e) {}
     }
     
-    @SuppressWarnings("serial") class MyException extends RuntimeException {};
+    @SuppressWarnings("serial") 
+    class MyException extends RuntimeException {};
 }
\ No newline at end of file

File: test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.internal.matchers.Equals;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked","serial"})
 public class ArgumentMatchingToolTest extends TestBase {
 
     private ArgumentMatchingTool tool = new ArgumentMatchingTool();
@@ -58,7 +58,6 @@ public void shouldFindSuspiciousMatchers() {
         assertEquals(new Integer(1), suspicious[0]);
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {
         //given

File: test/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("serial")
 public class BDDMockitoTest extends TestBase {
     
     @Mock IMethods mock;
@@ -35,7 +36,6 @@ public void shouldStubWithThrowable() throws Exception {
         } catch(RuntimeException e) {}
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldStubWithAnswer() throws Exception {
         given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {
@@ -87,7 +87,6 @@ public void shouldStubUsingDoReturnStyle() throws Exception {
         assertEquals("foo", mock.simpleMethod("bar"));
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldStubUsingDoAnswerStyle() throws Exception {
         willAnswer(new Answer<String>() {

File: test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.mockito.internal.invocation.realmethod.RealMethod;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("serial")
 public class FilteredCGLIBProxyRealMethodTest extends TestBase {
 
     @Before
@@ -25,7 +26,6 @@ public String throwSomething() {
         }
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {
         //given

File: test/org/mockitousage/matchers/AssertingMatchersTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.mockitoutil.TestBase;
 
 @Ignore("that's just prototyping")
+@SuppressWarnings("serial")
 public class AssertingMatchersTest extends TestBase {
     
     private IMethods mock;
@@ -45,7 +46,6 @@ public String getHeadline() {
         }
     }
     
-    @SuppressWarnings("serial")
     @Test
     public void shouldUseCustomCharMatcher1() {
         mock.simpleMethod(new Article(12, "Fabulous article"));

File: test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("serial")
 public class CustomMatcherDoesYieldCCETest extends TestBase {
 
     @Mock private IMethods mock;
@@ -29,7 +30,6 @@ public void shouldNotThrowCCE() {
         } catch (ArgumentsAreDifferent e) {}
     }
 
-    @SuppressWarnings("serial")
     private ArgumentMatcher<String> isStringWithTextFoo() {
         return new ArgumentMatcher<String>() {
             @Override

File: src/org/mockito/MockSettings.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito;
 
+import java.io.Serializable;
+
 import org.mockito.stubbing.Answer;
 
 /**
@@ -31,7 +33,7 @@
  * Firstly, to make it easy to add another mock setting when the demand comes.
  * Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods.
  */
-public interface MockSettings {
+public interface MockSettings extends Serializable {
     
     /**
      * Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.

File: src/org/mockito/internal/IMockHandler.java
Patch:
@@ -1,8 +1,10 @@
 package org.mockito.internal;
 
+import java.io.Serializable;
+
 import org.mockito.internal.invocation.Invocation;
 
-public interface IMockHandler {
+public interface IMockHandler extends Serializable {
 
     Object handle(Invocation invocation) throws Throwable;
 }

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -4,13 +4,11 @@
  */
 package org.mockito.internal.creation;
 
-import java.io.Serializable;
-
 import org.mockito.MockSettings;
 import org.mockito.exceptions.Reporter;
 import org.mockito.stubbing.Answer;
 
-public class MockSettingsImpl implements MockSettings, Serializable {
+public class MockSettingsImpl implements MockSettings {
 
     private static final long serialVersionUID = 4475297236197939568L;
     private Class<?>[] extraInterfaces;

File: src/org/mockito/internal/invocation/CapturesArgumensFromInvocation.java
Patch:
@@ -4,7 +4,9 @@
  */
 package org.mockito.internal.invocation;
 
-public interface CapturesArgumensFromInvocation {
+import java.io.Serializable;
+
+public interface CapturesArgumensFromInvocation extends Serializable {
     
     void captureArgumentsFrom(Invocation i);
     

File: src/org/mockito/internal/invocation/realmethod/CGLIBProxyRealMethod.java
Patch:
@@ -4,13 +4,11 @@
  */
 package org.mockito.internal.invocation.realmethod;
 
-import java.io.Serializable;
-
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.creation.MockitoMethodProxy;
 
 
-public class CGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy, Serializable {
+public class CGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy {
 
     private static final long serialVersionUID = -4596470901191501582L;
     private final MockitoMethodProxy methodProxy;

File: src/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethod.java
Patch:
@@ -5,13 +5,11 @@
  */
 package org.mockito.internal.invocation.realmethod;
 
-import java.io.Serializable;
-
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.creation.MockitoMethodProxy;
 import org.mockito.internal.exceptions.base.ConditionalStackTraceFilter;
 
-public class FilteredCGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy, Serializable {
+public class FilteredCGLIBProxyRealMethod implements RealMethod, HasCGLIBMethodProxy {
 
     private static final long serialVersionUID = 3596550785818938496L;
     private final RealMethod realMethod;

File: src/org/mockito/internal/invocation/realmethod/HasCGLIBMethodProxy.java
Patch:
@@ -4,9 +4,11 @@
  */
 package org.mockito.internal.invocation.realmethod;
 
+import java.io.Serializable;
+
 import org.mockito.cglib.proxy.MethodProxy;
 
-public interface HasCGLIBMethodProxy {
+public interface HasCGLIBMethodProxy extends Serializable {
 
     MethodProxy getMethodProxy();
 }

File: src/org/mockito/internal/invocation/realmethod/RealMethod.java
Patch:
@@ -4,7 +4,9 @@
  */
 package org.mockito.internal.invocation.realmethod;
 
-public interface RealMethod {
+import java.io.Serializable;
+
+public interface RealMethod extends Serializable {
 
     Object invoke(Object target, Object[] arguments) throws Throwable;
 

File: src/org/mockito/internal/matchers/CapturesArguments.java
Patch:
@@ -4,7 +4,9 @@
  */
 package org.mockito.internal.matchers;
 
-public interface CapturesArguments {
+import java.io.Serializable;
+
+public interface CapturesArguments extends Serializable {
 
     void captureFrom(Object argument);
 

File: src/org/mockito/internal/matchers/ContainsExtraTypeInformation.java
Patch:
@@ -4,9 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
+import java.io.Serializable;
+
 import org.hamcrest.SelfDescribing;
 
-public interface ContainsExtraTypeInformation {
+public interface ContainsExtraTypeInformation extends Serializable {
     SelfDescribing withExtraTypeInfo();
 
     boolean typeMatches(Object object);

File: src/org/mockito/internal/matchers/Equals.java
Patch:
@@ -4,13 +4,11 @@
  */
 package org.mockito.internal.matchers;
 
-import java.io.Serializable;
-
 import org.hamcrest.Description;
 import org.hamcrest.SelfDescribing;
 import org.mockito.ArgumentMatcher;
 
-public class Equals extends ArgumentMatcher<Object> implements ContainsExtraTypeInformation, Serializable {
+public class Equals extends ArgumentMatcher<Object> implements ContainsExtraTypeInformation {
 
     private static final long serialVersionUID = -3395637450058086891L;
     private final Object wanted;

File: src/org/mockito/internal/matchers/MatcherDecorator.java
Patch:
@@ -1,7 +1,9 @@
 package org.mockito.internal.matchers;
 
+import java.io.Serializable;
+
 import org.hamcrest.Matcher;
 
-public interface MatcherDecorator {
+public interface MatcherDecorator extends Serializable {
     Matcher getActualMatcher();
 }

File: src/org/mockito/internal/matchers/VarargMatcher.java
Patch:
@@ -1,4 +1,6 @@
 package org.mockito.internal.matchers;
 
-public interface VarargMatcher {
+import java.io.Serializable;
+
+public interface VarargMatcher extends Serializable {
 }

File: src/org/mockito/invocation/InvocationOnMock.java
Patch:
@@ -4,14 +4,15 @@
  */
 package org.mockito.invocation;
 
+import java.io.Serializable;
 import java.lang.reflect.Method;
 
 /**
  * An invocation on a mock
  * <p>
  * A placeholder for mock, the method that was called and the arguments that were passed.
  */
-public interface InvocationOnMock {
+public interface InvocationOnMock extends Serializable {
 
     /**
      * returns the mock object 

File: test/org/mockito/internal/MockHandlerTest.java
Patch:
@@ -17,6 +17,7 @@
 @SuppressWarnings("unchecked")
 public class MockHandlerTest extends TestBase {
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {
         //given

File: test/org/mockito/internal/configuration/ReadingConfigurationFromClasspathTest.java
Patch:
@@ -14,6 +14,7 @@
 
 public class ReadingConfigurationFromClasspathTest extends TestBase {
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldReadConfigurationClassFromClassPath() {
         ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {

File: test/org/mockito/internal/creation/cglib/MethodProxyBuilder.java
Patch:
@@ -15,6 +15,7 @@
 
 public class MethodProxyBuilder {
 
+    @SuppressWarnings("serial")
     public MethodProxy build() {
         IMethods mock = mock(IMethods.class);
         when(mock.objectReturningMethodNoArgs()).thenAnswer(new Answer<Object>() {

File: test/org/mockito/internal/invocation/InvocationMarkerTest.java
Patch:
@@ -27,6 +27,7 @@ public void shouldMarkInvocationAsVerified() {
         assertTrue(i.isVerified());
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldCaptureArguments() {
         //given

File: test/org/mockito/internal/invocation/InvocationTest.java
Patch:
@@ -153,6 +153,7 @@ public String bark() {
         }
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldBeAbleToCallRealMethod() throws Throwable {
         //when

File: test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java
Patch:
@@ -58,6 +58,7 @@ public void shouldFindSuspiciousMatchers() {
         assertEquals(new Integer(1), suspicious[0]);
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame() {
         //given

File: test/org/mockitousage/basicapi/MocksSerializationTest.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.basicapi;
 
-import static org.junit.Assert.*;
+import static org.mockito.Matchers.anyObject;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 

File: test/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockitousage.bugs;
 
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.*;
 
-import org.junit.Ignore;
 import org.junit.Test;
-import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
 //see bug 116

File: test/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -35,6 +35,7 @@ public void shouldStubWithThrowable() throws Exception {
         } catch(RuntimeException e) {}
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldStubWithAnswer() throws Exception {
         given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>() {
@@ -86,6 +87,7 @@ public void shouldStubUsingDoReturnStyle() throws Exception {
         assertEquals("foo", mock.simpleMethod("bar"));
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldStubUsingDoAnswerStyle() throws Exception {
         willAnswer(new Answer<String>() {

File: test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java
Patch:
@@ -25,6 +25,7 @@ public String throwSomething() {
         }
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows() throws Throwable {
         //given

File: test/org/mockitousage/matchers/AssertingMatchersTest.java
Patch:
@@ -45,6 +45,7 @@ public String getHeadline() {
         }
     }
     
+    @SuppressWarnings("serial")
     @Test
     public void shouldUseCustomCharMatcher1() {
         mock.simpleMethod(new Article(12, "Fabulous article"));

File: test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -29,6 +29,7 @@ public void shouldNotThrowCCE() {
         } catch (ArgumentsAreDifferent e) {}
     }
 
+    @SuppressWarnings("serial")
     private ArgumentMatcher<String> isStringWithTextFoo() {
         return new ArgumentMatcher<String>() {
             @Override

File: test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -19,6 +19,7 @@ public class StubbingWithCustomAnswerTest extends TestBase {
     @Mock
     private IMethods mock;
 
+    @SuppressWarnings("serial")
     @Test
     public void shouldAnswer() throws Exception {
         when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>() {
@@ -32,6 +33,7 @@ public String answer(InvocationOnMock invocation) throws Throwable {
         assertEquals("simpleMethod-test", mock.simpleMethod("test"));
     }
 
+    @SuppressWarnings("serial")
     @Test
     public void shouldAnswerConsecutively() throws Exception {
         when(mock.simpleMethod())
@@ -88,6 +90,7 @@ public void shouldAnswerVoidMethodConsecutively() throws Exception {
 
     }
 
+    @SuppressWarnings("serial")
     private static class RecordCall implements Answer {
         private boolean called = false;
 

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -16,9 +16,9 @@
 import java.io.Serializable;
 import java.lang.reflect.Method;
 
-@SuppressWarnings("unchecked")
 public class MethodInterceptorFilter implements MethodInterceptor, Serializable {
 
+    private static final long serialVersionUID = 6182795666612683784L;
     private final IMockHandler mockHandler;
     CGLIBHacker cglibHacker = new CGLIBHacker();
     ObjectMethodsGuru objectMethodsGuru = new ObjectMethodsGuru();
@@ -37,7 +37,8 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
 
         cglibHacker.setMockitoNamingPolicy(methodProxy);
         
-        Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), new FilteredCGLIBProxyRealMethod(methodProxy));
+        FilteredCGLIBProxyRealMethod realMethod = new FilteredCGLIBProxyRealMethod(new MockitoMethodProxy(methodProxy));
+        Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next(), realMethod);
         return mockHandler.handle(invocation);
     }
     

File: src/org/mockito/internal/creation/cglib/CGLIBHacker.java
Patch:
@@ -11,6 +11,8 @@
 
 public class CGLIBHacker implements Serializable {
 
+    private static final long serialVersionUID = -4389233991416356668L;
+
     public void setMockitoNamingPolicy(MethodProxy methodProxy) {
         try {
             Field createInfoField = reflectOnCreateInfo(methodProxy);

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.invocation;
 
+import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.util.Collections;
 import java.util.List;
@@ -16,8 +17,9 @@
 import org.mockito.internal.reporting.PrintingFriendlyInvocation;
 
 @SuppressWarnings("unchecked")
-public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInvocation, CapturesArgumensFromInvocation {
+public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInvocation, CapturesArgumensFromInvocation, Serializable {
 
+    private static final long serialVersionUID = -3047126096857467610L;
     private final Invocation invocation;
     private final List<Matcher> matchers;
 

File: src/org/mockito/internal/matchers/And.java
Patch:
@@ -14,6 +14,7 @@
 @SuppressWarnings("unchecked")
 public class And extends ArgumentMatcher {
 
+    private static final long serialVersionUID = -4624719625691177501L;
     private final List<Matcher> matchers;
 
     public And(List<Matcher> matchers) {

File: src/org/mockito/internal/matchers/Any.java
Patch:
@@ -10,6 +10,7 @@
 @SuppressWarnings("unchecked")
 public class Any extends ArgumentMatcher {
 
+    private static final long serialVersionUID = -4062420125651019029L;
     public static final Any ANY = new Any();    
     
     private Any() {}

File: src/org/mockito/internal/matchers/AnyVararg.java
Patch:
@@ -6,6 +6,7 @@
 @SuppressWarnings("unchecked")
 public class AnyVararg extends ArgumentMatcher implements VarargMatcher {
 
+    private static final long serialVersionUID = 1700721373094731555L;
     public static final Matcher ANY_VARARG = new AnyVararg();
 
     public boolean matches(Object arg) {

File: src/org/mockito/internal/matchers/ArrayEquals.java
Patch:
@@ -11,6 +11,8 @@
 
 public class ArrayEquals extends Equals {
 
+    private static final long serialVersionUID = -7167812844261087583L;
+
     public ArrayEquals(Object wanted) {
         super(wanted);
     }

File: src/org/mockito/internal/matchers/CapturingMatcher.java
Patch:
@@ -14,6 +14,7 @@
 @SuppressWarnings("unchecked")
 public class CapturingMatcher<T> extends ArgumentMatcher<T> implements CapturesArguments {
     
+    private static final long serialVersionUID = 4274067078639307295L;
     private LinkedList<Object> arguments = new LinkedList<Object>();
 
     /* (non-Javadoc)

File: src/org/mockito/internal/matchers/CompareEqual.java
Patch:
@@ -6,6 +6,8 @@
 
 public class CompareEqual<T extends Comparable<T>> extends CompareTo<T> {
 
+    private static final long serialVersionUID = 2998586260452920429L;
+
     public CompareEqual(Comparable<T> value) {
         super(value);
     }

File: src/org/mockito/internal/matchers/CompareTo.java
Patch:
@@ -9,6 +9,7 @@
 
 
 public abstract class CompareTo<T extends Comparable<T>> extends ArgumentMatcher<T> {
+    private static final long serialVersionUID = 1857450785375711120L;
     private final Comparable<T> wanted;
 
     public CompareTo(Comparable<T> value) {

File: src/org/mockito/internal/matchers/Contains.java
Patch:
@@ -10,6 +10,7 @@
 
 public class Contains extends ArgumentMatcher<String> {
 
+    private static final long serialVersionUID = -1909837398271763801L;
     private final String substring;
 
     public Contains(String substring) {

File: src/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -10,6 +10,7 @@
 
 public class EndsWith extends ArgumentMatcher<String> {
 
+    private static final long serialVersionUID = 8556443228350129421L;
     private final String suffix;
 
     public EndsWith(String suffix) {

File: src/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -9,6 +9,8 @@
 
 
 public class EqualsWithDelta extends ArgumentMatcher<Number>{
+    private static final long serialVersionUID = 5066980489920383664L;
+
     private final Number wanted;
 
     private final Number delta;

File: src/org/mockito/internal/matchers/Find.java
Patch:
@@ -11,6 +11,7 @@
 
 public class Find extends ArgumentMatcher<String> {
 
+    private static final long serialVersionUID = 8895781429480404872L;
     private final String regex;
 
     public Find(String regex) {

File: src/org/mockito/internal/matchers/GreaterOrEqual.java
Patch:
@@ -6,6 +6,8 @@
 
 public class GreaterOrEqual<T extends Comparable<T>> extends CompareTo<T> {
 
+    private static final long serialVersionUID = 87695769061286092L;
+
     public GreaterOrEqual(Comparable<T> value) {
         super(value);
     }

File: src/org/mockito/internal/matchers/GreaterThan.java
Patch:
@@ -6,6 +6,8 @@
 
 public class GreaterThan<T extends Comparable<T>> extends CompareTo<T> {
 
+    private static final long serialVersionUID = 7446529803235604408L;
+
     public GreaterThan(Comparable<T> value) {
         super(value);
     }

File: src/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -10,6 +10,7 @@
 
 public class InstanceOf extends ArgumentMatcher<Object> {
 
+    private static final long serialVersionUID = 517358915876138366L;
     private final Class<?> clazz;
 
     public InstanceOf(Class<?> clazz) {

File: src/org/mockito/internal/matchers/LessOrEqual.java
Patch:
@@ -6,6 +6,8 @@
 
 public class LessOrEqual<T extends Comparable<T>> extends CompareTo<T> {
 
+    private static final long serialVersionUID = -6648773374429103565L;
+
     public LessOrEqual(Comparable<T> value) {
         super(value);
     }

File: src/org/mockito/internal/matchers/LessThan.java
Patch:
@@ -6,6 +6,8 @@
 
 public class LessThan<T extends Comparable<T>> extends CompareTo<T> {
 
+    private static final long serialVersionUID = -133860804462310942L;
+
     public LessThan(Comparable<T> value) {
         super(value);
     }

File: src/org/mockito/internal/matchers/Matches.java
Patch:
@@ -10,6 +10,7 @@
 
 public class Matches extends ArgumentMatcher<Object> {
 
+    private static final long serialVersionUID = 8787704593379472029L;
     private final String regex;
 
     public Matches(String regex) {

File: src/org/mockito/internal/matchers/Not.java
Patch:
@@ -11,6 +11,7 @@
 @SuppressWarnings("unchecked")
 public class Not extends ArgumentMatcher {
 
+    private static final long serialVersionUID = 4627373642333593264L;
     private final Matcher first;
 
     public Not(Matcher first) {

File: src/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -10,6 +10,7 @@
 
 public class NotNull extends ArgumentMatcher<Object> {
 
+    private static final long serialVersionUID = 7278261081285153228L;
     public static final NotNull NOT_NULL = new NotNull();
     
     private NotNull() {

File: src/org/mockito/internal/matchers/Null.java
Patch:
@@ -10,6 +10,7 @@
 
 public class Null extends ArgumentMatcher<Object> {
 
+    private static final long serialVersionUID = 2823082637424390314L;
     public static final Null NULL = new Null();
 
     private Null() {

File: src/org/mockito/internal/matchers/Or.java
Patch:
@@ -14,6 +14,7 @@
 @SuppressWarnings("unchecked")
 public class Or extends ArgumentMatcher {
 
+    private static final long serialVersionUID = 5888739035212283087L;
     private final List<Matcher> matchers;
 
     public Or(List<Matcher> matchers) {

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -10,6 +10,7 @@
 
 public class Same extends ArgumentMatcher<Object> {
 
+    private static final long serialVersionUID = -1226959355938572597L;
     private final Object wanted;
 
     public Same(Object wanted) {

File: src/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -10,6 +10,7 @@
 
 public class StartsWith extends ArgumentMatcher<String> {
 
+    private static final long serialVersionUID = -5978092285707998431L;
     private final String prefix;
 
     public StartsWith(String prefix) {

File: src/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java
Patch:
@@ -8,6 +8,7 @@
 import org.mockito.ArgumentMatcher;
 
 public class ReflectionEquals extends ArgumentMatcher<Object> {
+    private static final long serialVersionUID = 2022780425116330014L;
     private final Object wanted;
     private final String[] excludeFields;
 

File: src/org/mockito/internal/stubbing/MockitoStubber.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.stubbing;
 
+import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -15,8 +16,9 @@
 import org.mockito.stubbing.Answer;
 
 @SuppressWarnings("unchecked")
-public class MockitoStubber {
+public class MockitoStubber implements Serializable {
 
+    private static final long serialVersionUID = -5334301962749537176L;
     private final LinkedList<StubbedInvocationMatcher> stubbed = new LinkedList<StubbedInvocationMatcher>();
     private final MockingProgress mockingProgress;
     private final List<Answer> answersForStubbing = new ArrayList<Answer>();

File: src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -14,6 +14,7 @@
 @SuppressWarnings("unchecked")
 public class StubbedInvocationMatcher extends InvocationMatcher implements Answer {
 
+    private static final long serialVersionUID = 4919105134123672727L;
     private final Queue<Answer> answers = new ConcurrentLinkedQueue<Answer>();
 
     public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {

File: src/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java
Patch:
@@ -12,6 +12,7 @@
 @SuppressWarnings("deprecation")
 public class AnswerReturnValuesAdapter implements Answer<Object> {
 
+    private static final long serialVersionUID = 1418158596876713469L;
     private final ReturnValues returnValues;
 
     public AnswerReturnValuesAdapter(ReturnValues returnValues) {

File: src/org/mockito/internal/stubbing/answers/CallsRealMethods.java
Patch:
@@ -28,6 +28,8 @@
  * <p>
  */
 public class CallsRealMethods implements Answer<Object> {
+    private static final long serialVersionUID = 9057165148930624087L;
+
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return invocation.callRealMethod();
     }

File: src/org/mockito/internal/stubbing/answers/DoesNothing.java
Patch:
@@ -9,6 +9,8 @@
 
 public class DoesNothing implements Answer<Object> {
     
+    private static final long serialVersionUID = 4840880517740698416L;
+
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return null;
     }

File: src/org/mockito/internal/stubbing/answers/Returns.java
Patch:
@@ -9,6 +9,7 @@
 
 public class Returns implements Answer<Object> {
 
+    private static final long serialVersionUID = -6245608253574215396L;
     private final Object value;
 
     public Returns(Object value) {

File: src/org/mockito/internal/stubbing/answers/ThrowsException.java
Patch:
@@ -11,6 +11,7 @@
 
 public class ThrowsException implements Answer<Object> {
 
+    private static final long serialVersionUID = 1128820328555183980L;
     private final Throwable throwable;
     private final ConditionalStackTraceFilter filter = new ConditionalStackTraceFilter();
 

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -49,6 +49,8 @@
  */
 public class ReturnsEmptyValues implements Answer<Object> {
     
+    private static final long serialVersionUID = 1998191268711234347L;
+
     /* (non-Javadoc)
      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -12,6 +12,7 @@
 
 public class ReturnsMocks implements Answer<Object> {
     
+    private static final long serialVersionUID = -6755257986994634579L;
     private MockitoCore mockitoCore = new MockitoCore();
     private Answer<Object> delegate = new ReturnsMoreEmptyValues();
     

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -42,6 +42,7 @@
  */
 public class ReturnsMoreEmptyValues implements Answer<Object> {
     
+    private static final long serialVersionUID = -2816745041482698471L;
     private Answer<Object> delegate = new ReturnsEmptyValues();
     
     /* (non-Javadoc)

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -36,6 +36,8 @@
  */
 public class ReturnsSmartNulls implements Answer<Object> {
 
+    private static final long serialVersionUID = 7618312406617949441L;
+
     private final class ThrowingInterceptor implements MethodInterceptor {
         private final InvocationOnMock invocation;
         private final Location location = new Location();

File: src/org/mockito/internal/util/ObjectMethodsGuru.java
Patch:
@@ -5,6 +5,8 @@
 
 public class ObjectMethodsGuru implements Serializable {
 
+    private static final long serialVersionUID = -1286718569065470494L;
+
     public boolean isToString(Method method) {
         return method.getReturnType() == String.class && method.getParameterTypes().length == 0
                 && method.getName().equals("toString");

File: src/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.verification;
 
+import java.io.Serializable;
 import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
@@ -13,8 +14,9 @@
 import org.mockito.internal.util.ListUtil.Filter;
 
 
-public class RegisteredInvocations {
+public class RegisteredInvocations implements Serializable {
 
+    private static final long serialVersionUID = -2674402327380736290L;
     private final List<Invocation> invocations = Collections.synchronizedList(new LinkedList<Invocation>());
     
     public void add(Invocation invocation) {

File: src/org/mockito/stubbing/Answer.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.stubbing;
 
+import java.io.Serializable;
+
 import org.mockito.invocation.InvocationOnMock;
 
 /**
@@ -27,7 +29,7 @@
  * 
  * @param <T> the type to return.
  */
-public interface Answer<T> {
+public interface Answer<T> extends Serializable {
     /**
      * @param invocation the invocation on the mock.
      *

File: test/org/mockitousage/IMethods.java
Patch:
@@ -168,6 +168,8 @@ public interface IMethods {
     
     void varargs(String ... string);
 
+    void mixedVarargs(Object i, String ... string);
+
     List<String> listReturningMethod(Object ... objects);
     
     LinkedList<String> linkedListReturningMethod();

File: test/org/mockitousage/MethodsImpl.java
Patch:
@@ -310,6 +310,9 @@ public void varargs(String... string) {
       
     }
 
+    public void mixedVarargs(Object i, String... string) {
+    }
+
     public List<String> listReturningMethod(Object... objects) {
         return null;
     }

File: test/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -34,7 +34,7 @@ public void shouldFailVerifiationAtLeastXTimes() throws Exception {
         verify(mock, atLeast(1)).add(anyString());
 
         try {
-            verify(mock, atLeast(1)).add(anyString());
+            verify(mock, atLeast(2)).add(anyString());
             fail();
         } catch (MockitoAssertionError e) {}
     }

File: src/org/mockito/internal/verification/AtLeast.java
Patch:
@@ -22,8 +22,8 @@ public class AtLeast implements VerificationInOrderMode, VerificationMode {
     final int wantedCount;
     
     public AtLeast(int wantedNumberOfInvocations) {
-        if (wantedNumberOfInvocations <= 0) {
-            throw new MockitoException("Negative value or zero are not allowed here");
+        if (wantedNumberOfInvocations < 0) {
+            throw new MockitoException("Negative value is not allowed here");
         }
         this.wantedCount = wantedNumberOfInvocations;
     }

File: test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java
Patch:
@@ -5,12 +5,13 @@
 import org.mockito.Mockito;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Matchers.any;
+import org.mockitoutil.TestBase;
 
 import java.util.List;
 import java.util.LinkedList;
 import static java.util.Arrays.asList;
 
-public class AtLeastXNumberOfInvocationsCheckerTest {
+public class AtLeastXNumberOfInvocationsCheckerTest extends TestBase {
 
     @Test
     public void shouldMarkActualInvocationsAsVerified() {

File: src/org/mockito/Mockito.java
Patch:
@@ -480,7 +480,7 @@
  * In some situations though, it is helpful to assert on certain arguments after the actual verification.
  * For example:
  * <pre>
- *   ArgumentCaptor&lt;Person&gt; argument = new ArgumentCaptor&lt;Person&gt;();
+ *   ArgumentCaptor&lt;Person&gt; argument = ArgumentCaptor.forClass(Person.class);
  *   verify(mock).doSomething(argument.capture());
  *   assertEquals("John", argument.getValue().getName());
  * </pre>

File: test/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
Patch:
@@ -162,7 +162,7 @@ public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher() {
     
     @Test
     public void shouldShowExampleOfCorrectArgumentCapturing() {
-        ArgumentCaptor<String> argument = new ArgumentCaptor<String>();
+        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);
         argument.capture();
         argument.getValue();
     }

File: test/org/mockito/internal/progress/HandyReturnValuesTest.java
Patch:
@@ -1,11 +1,10 @@
 package org.mockito.internal.progress;
 
-import static org.junit.Assert.*;
-
 import org.junit.Test;
+import org.mockitoutil.TestBase;
 
 
-public class HandyReturnValuesTest {
+public class HandyReturnValuesTest extends TestBase {
 
     private HandyReturnValues h = new HandyReturnValues();
 

File: src/org/mockito/ArgumentCaptor.java
Patch:
@@ -40,6 +40,8 @@
  */
 public class ArgumentCaptor<T> {
     
+    HandyReturnValues handyReturnValues = new HandyReturnValues();
+
     private final CapturingMatcher<T> capturingMatcher = new CapturingMatcher<T>();
     private final Class<T> clazz;
 
@@ -79,7 +81,7 @@ public ArgumentCaptor() {
      */
     public T capture() {
         Mockito.argThat(capturingMatcher);
-        return new HandyReturnValues().returnFor(clazz);
+        return handyReturnValues.returnFor(clazz);
     }
 
     /**

File: test/org/mockitoutil/TestBase.java
Patch:
@@ -28,11 +28,11 @@ public class TestBase extends Assert {
     public void cleanUpConfigInAnyCase() {
         ConfigurationAccess.getConfig().overrideCleansStackTrace(false);
         ConfigurationAccess.getConfig().overrideDefaultAnswer(null);
+        new StateMaster().validate();
     }
 
     @Before
     public void init() {
-        new StateMaster().validate();
         MockitoAnnotations.initMocks(this);
     }
     

File: src/org/mockito/internal/util/Primitives.java
Patch:
@@ -7,14 +7,15 @@
 import java.util.HashMap;
 import java.util.Map;
 
+@SuppressWarnings("unchecked")
 public class Primitives {
     
     public static boolean isPrimitiveWrapper(Class<?> type) {
         return wrapperReturnValues.containsKey(type);
     }
     
-    public static Object primitiveWrapperOf(Class<?> type) {
-        return wrapperReturnValues.get(type);
+    public static <T> T primitiveWrapperOf(Class<T> type) {
+        return (T) wrapperReturnValues.get(type);
     }
     
     public static Class<?> primitiveTypeOf(Class<?> clazz) {

File: test/org/mockitousage/matchers/CapturingArgumentsTest.java
Patch:
@@ -174,13 +174,11 @@ public void shouldCaptureWhenFullArgListMatches() throws Exception {
         assertEquals("foo", captor.getValue());
     }
     
-    //TODO: not yet implemented
-    @Ignore
     @Test
     public void shouldCaptureInt() {
         //given
         IMethods mock = mock(IMethods.class);
-        ArgumentCaptor<Integer> argument = new ArgumentCaptor<Integer>();
+        ArgumentCaptor<Integer> argument = ArgumentCaptor.forClass(Integer.class);
 
         //when
         mock.intArgumentMethod(10);

File: src/org/mockito/internal/stubbing/MockitoStubber.java
Patch:
@@ -56,7 +56,7 @@ Object answerTo(Invocation invocation) throws Throwable {
         return findAnswerFor(invocation).answer(invocation);
     }
 
-    public Answer<?> findAnswerFor(Invocation invocation) {
+    public StubbedInvocationMatcher findAnswerFor(Invocation invocation) {
         for (StubbedInvocationMatcher s : stubbed) {
             if (s.matches(invocation)) {
                 return s;

File: src/org/mockito/internal/verification/AtMost.java
Patch:
@@ -10,13 +10,15 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.verification.api.VerificationData;
 import org.mockito.internal.verification.api.VerificationMode;
 
 public class AtMost implements VerificationMode {
 
     private final int maxNumberOfInvocations;
+    private final InvocationMarker invocationMarker = new InvocationMarker();
 
     public AtMost(int maxNumberOfInvocations) {
         if (maxNumberOfInvocations < 0) {
@@ -36,8 +38,6 @@ public void verify(VerificationData data) {
             new Reporter().wantedAtMostX(maxNumberOfInvocations, foundSize);
         }
         
-        for (Invocation i : found) {
-            i.markVerified();
-        }
+        invocationMarker.markVerified(found, wanted);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java
Patch:
@@ -10,12 +10,14 @@
 import org.mockito.internal.debugging.Location;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
 
 public class AtLeastXNumberOfInvocationsChecker {
     
     private final Reporter reporter = new Reporter();
     private final InvocationsFinder finder = new InvocationsFinder();
+    private final InvocationMarker invocationMarker = new InvocationMarker();
 
     public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
         List<Invocation> actualInvocations = finder.findInvocations(invocations, wanted);
@@ -26,8 +28,6 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
             reporter.tooLittleActualInvocations(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);        
         }
         
-        for (Invocation i : actualInvocations) {
-            i.markVerified();
-        }
+        invocationMarker.markVerified(invocations, wanted);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java
Patch:
@@ -10,12 +10,14 @@
 import org.mockito.internal.debugging.Location;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
 
 public class AtLeastXNumberOfInvocationsInOrderChecker {
     
     private final Reporter reporter = new Reporter();
     private final InvocationsFinder finder = new InvocationsFinder();
+    private final InvocationMarker invocationMarker = new InvocationMarker();
     
     public void check(List<Invocation> invocations, InvocationMatcher wanted, int wantedCount) {
         List<Invocation> chunk = finder.findAllMatchingUnverifiedChunks(invocations, wanted);
@@ -27,8 +29,6 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
             reporter.tooLittleActualInvocationsInOrder(new AtLeastDiscrepancy(wantedCount, actualCount), wanted, lastLocation);
         }
         
-        for (Invocation i : chunk) {
-            i.markVerifiedInOrder();
-        }
+        invocationMarker.markVerifiedInOrder(chunk, wanted);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java
Patch:
@@ -11,12 +11,14 @@
 import org.mockito.internal.debugging.Location;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationMarker;
 import org.mockito.internal.invocation.InvocationsFinder;
 
 public class NumberOfInvocationsInOrderChecker {
     
     private final Reporter reporter;
     private final InvocationsFinder finder;
+    private final InvocationMarker invocationMarker = new InvocationMarker();
     
     public NumberOfInvocationsInOrderChecker() {
         this(new InvocationsFinder(), new Reporter());
@@ -40,8 +42,6 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted, int wa
             reporter.tooManyActualInvocationsInOrder(wantedCount, actualCount, wanted, firstUndesired);
         }
         
-        for (Invocation i : chunk) {
-            i.markVerifiedInOrder();
-        }
+        invocationMarker.markVerifiedInOrder(chunk, wanted);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/configuration/GlobalConfiguration.java
Patch:
@@ -30,7 +30,6 @@ public GlobalConfiguration() {
         }
     }
     
-    @SuppressWarnings("deprecation")
     private IMockitoConfiguration createConfig() {
         IMockitoConfiguration defaultConfiguration = new DefaultMockitoConfiguration();
         IMockitoConfiguration config = new ClassPathLoader().loadConfiguration();

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -10,7 +10,6 @@
 import org.mockito.cglib.proxy.MethodProxy;
 import org.mockito.internal.creation.cglib.CGLIBHacker;
 
-@SuppressWarnings("unchecked")
 public class MethodInterceptorFilter<T extends MethodInterceptor> implements MethodInterceptor {
     
     private final Method equalsMethod;

File: src/org/mockito/internal/reporting/PrintSettings.java
Patch:
@@ -8,7 +8,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-@SuppressWarnings("unchecked")
 public class PrintSettings {
 
     private boolean multiline;

File: src/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -10,7 +10,6 @@
  * <p>
  * Makes arguments printed with types if necessary
  */
-@SuppressWarnings("unchecked")
 public class SmartPrinter {
 
     private final String wanted;

File: src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java
Patch:
@@ -13,7 +13,6 @@
 import org.mockito.internal.reporting.SmartPrinter;
 import org.mockito.internal.verification.argumentmatching.ArgumentMatchingTool;
 
-@SuppressWarnings("unchecked")
 public class MissingInvocationChecker {
     
     private final Reporter reporter;

File: src/org/mockito/runners/MockitoJUnit44Runner.java
Patch:
@@ -44,7 +44,6 @@
  * 
  * </pre>
  */
-@SuppressWarnings("deprecation")
 @Deprecated
 public class MockitoJUnit44Runner extends MockitoJUnitRunner {
 

File: test/org/mockito/internal/creation/MockSettingsImplTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
 public class MockSettingsImplTest extends TestBase {
 
     private MockSettingsImpl mockSettingsImpl = new MockSettingsImpl();

File: test/org/mockito/internal/util/reflection/LenientCopyToolTest.java
Patch:
@@ -11,8 +11,6 @@
 import java.util.LinkedList;
 
 import org.junit.Test;
-import org.mockito.internal.util.reflection.FieldCopier;
-import org.mockito.internal.util.reflection.LenientCopyTool;
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")

File: test/org/mockito/internal/verification/SmartPrinterTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
 public class SmartPrinterTest extends TestBase {
 
     private PrintingFriendlyInvocation multi;

File: test/org/mockitousage/customization/BDDMockitoTest.java
Patch:
@@ -104,7 +104,6 @@ public String bark() {
     }
 
     @Test
-    @SuppressWarnings("unchecked")
     public void shouldStubByDelegatingToRealMethod() throws Exception {
         //given
         Dog dog = mock(Dog.class);
@@ -115,7 +114,6 @@ public void shouldStubByDelegatingToRealMethod() throws Exception {
     }
     
     @Test
-    @SuppressWarnings("unchecked")
     public void shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax() throws Exception {
         //given
         Dog dog = mock(Dog.class);

File: test/org/mockitousage/matchers/ArgumentMatchingWithFancyAssertionsTest.java
Patch:
@@ -12,7 +12,6 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
 public class ArgumentMatchingWithFancyAssertionsTest extends TestBase {
 
     class Person {

File: test/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
Patch:
@@ -13,7 +13,6 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
 public class CustomMatcherDoesYieldCCETest extends TestBase {
 
     @Mock private IMethods mock;

File: src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -45,6 +45,6 @@ private boolean safelyMatches(Matcher m, Object arg) {
     }
 
     private boolean toStringEquals(Matcher m, Object arg) {
-        return StringDescription.toString(m).equals(arg.toString());
+        return StringDescription.toString(m).equals(arg == null? "null" : arg.toString());
     }
 }

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -43,7 +43,7 @@ public class Invocation implements PrintableInvocation, InvocationOnMock, Printi
     private boolean verified;
     private boolean verifiedInOrder;
     private Object[] rawArguments;
-    private final RealMethod realMethod;
+    final RealMethod realMethod;
 
     public Invocation(Object mock, Method method, Object[] args, int sequenceNumber, RealMethod realMethod) {
         this.mock = mock;

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -52,7 +52,7 @@ public String toString() {
     public boolean matches(Invocation actual) {
         return invocation.getMock().equals(actual.getMock())
                 && hasSameMethod(actual)
-                && (argumentsMatch(actual.getArguments()) || argumentsMatch(actual.getRawArguments()));
+                && (argumentsMatch(actual.getArguments()));
     }
 
     private boolean argumentsMatch(Object[] actualArgs) {

File: test/org/mockitousage/internal/debugging/LocationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.debugging;
+package org.mockitousage.internal.debugging;
 
 import org.junit.Test;
 import org.mockito.internal.debugging.Location;

File: test/org/mockitousage/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.invocation.realmethod;
+package org.mockitousage.internal.invocation.realmethod;
 
 import static org.mockitoutil.ExtraMatchers.*;
 

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -20,7 +20,9 @@
 import org.mockito.internal.invocation.InvocationMatcherTest;
 import org.mockito.internal.invocation.InvocationTest;
 import org.mockito.internal.invocation.InvocationsFinderTest;
+import org.mockito.internal.matchers.ComparableMatchersTest;
 import org.mockito.internal.matchers.EqualsTest;
+import org.mockito.internal.matchers.MatchersToStringTest;
 import org.mockito.internal.progress.MockingProgressImplTest;
 import org.mockito.internal.progress.TimesTest;
 import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;
@@ -35,11 +37,9 @@
 import org.mockitousage.basicapi.ResetTest;
 import org.mockitousage.basicapi.UsingVarargsTest;
 import org.mockitousage.examples.use.ExampleTest;
-import org.mockitousage.matchers.ComparableMatchersTest;
 import org.mockitousage.matchers.CustomMatchersTest;
 import org.mockitousage.matchers.InvalidUseOfMatchersTest;
 import org.mockitousage.matchers.MatchersTest;
-import org.mockitousage.matchers.MatchersToStringTest;
 import org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest;
 import org.mockitousage.misuse.InvalidStateDetectionTest;
 import org.mockitousage.misuse.InvalidUsageTest;

File: test/org/mockito/internal/debugging/LocationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.internal.debugging;
+package org.mockito.internal.debugging;
 
 import org.junit.Test;
 import org.mockito.internal.debugging.Location;

File: test/org/mockito/internal/invocation/realmethod/FilteredCGLIBProxyRealMethodTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.internal.invocation.realmethod;
+package org.mockito.internal.invocation.realmethod;
 
 import static org.mockitoutil.ExtraMatchers.*;
 

File: test/org/mockito/internal/matchers/MatchersToStringTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.matchers;
+package org.mockito.internal.matchers;
 
 import java.util.ArrayList;
 import java.util.List;

File: test/org/mockito/internal/runners/CollectingDebugDataTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage.warnings;
+package org.mockito.internal.runners;
 
 import static org.mockito.Mockito.*;
 

File: test/org/mockitousage/misuse/DetectingFinalMethodsTest.java
Patch:
@@ -9,7 +9,6 @@
 import org.mockito.Mock;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
-import org.mockito.internal.util.MockUtil;
 import org.mockitoutil.TestBase;
 
 public class DetectingFinalMethodsTest extends TestBase {
@@ -35,7 +34,6 @@ public void shouldFailWithUnfinishedVerification() {
     @Test
     public void shouldFailWithUnfinishedStubbing() {
         withFinal = mock(WithFinal.class);
-        new MockUtil().getMockHandler(withFinal);
         try {
             when(withFinal.foo()).thenReturn(null);
             fail();

File: src/org/mockito/internal/matchers/ContainsExtraTypeInformation.java
Patch:
@@ -2,8 +2,8 @@
 
 import org.hamcrest.SelfDescribing;
 
-public interface CanDescribeVerbosely {
-    SelfDescribing getSelfDescribingVerbosely();
+public interface ContainsExtraTypeInformation {
+    SelfDescribing withExtraTypeInfo();
 
     boolean typeMatches(Object object);
 }
\ No newline at end of file

File: src/org/mockito/internal/matchers/Equals.java
Patch:
@@ -8,7 +8,7 @@
 import org.hamcrest.SelfDescribing;
 import org.mockito.ArgumentMatcher;
 
-public class Equals extends ArgumentMatcher<Object> implements CanDescribeVerbosely {
+public class Equals extends ArgumentMatcher<Object> implements ContainsExtraTypeInformation {
 
     private final Object wanted;
 
@@ -66,7 +66,7 @@ public int hashCode() {
         throw new UnsupportedOperationException("hashCode() is not supported");
     }
 
-    public SelfDescribing getSelfDescribingVerbosely() {
+    public SelfDescribing withExtraTypeInfo() {
         return new SelfDescribing() {
             public void describeTo(Description description) {
                 description.appendText(describe("("+ wanted.getClass().getSimpleName() +") " + wanted));

File: src/org/mockito/internal/matchers/MatchersPrinter.java
Patch:
@@ -28,8 +28,8 @@ private List<SelfDescribing> applyPrintSettings(List<Matcher> matchers, PrintSet
         List<SelfDescribing> withPrintSettings = new LinkedList<SelfDescribing>();
         int i = 0;
         for (final Matcher matcher : matchers) {
-            if (matcher instanceof CanDescribeVerbosely && printSettings.printsVerbosely(i)) {
-                withPrintSettings.add(((CanDescribeVerbosely) matcher).getSelfDescribingVerbosely());
+            if (matcher instanceof ContainsExtraTypeInformation && printSettings.extraTypeInfoFor(i)) {
+                withPrintSettings.add(((ContainsExtraTypeInformation) matcher).withExtraTypeInfo());
             } else {
                 withPrintSettings.add(matcher);
             }

File: src/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -16,10 +16,10 @@ public class SmartPrinter {
     private final String wanted;
     private final String actual;
 
-    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... toBePrintedVerbosely) {
+    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... indexesOfMatchersToBeDescribedWithExtraTypeInfo) {
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
-        printSettings.setMatchersToBePrintedVerbosely(toBePrintedVerbosely);
+        printSettings.setMatchersToBeDescribedWithExtraTypeInfo(indexesOfMatchersToBeDescribedWithExtraTypeInfo);
         
         this.wanted = wanted.toString(printSettings);
         this.actual = actual.toString(printSettings);

File: src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java
Patch:
@@ -5,7 +5,7 @@
 
 import org.hamcrest.Matcher;
 import org.hamcrest.StringDescription;
-import org.mockito.internal.matchers.CanDescribeVerbosely;
+import org.mockito.internal.matchers.ContainsExtraTypeInformation;
 
 @SuppressWarnings("unchecked")
 public class ArgumentMatchingTool {
@@ -25,10 +25,10 @@ public Integer[] getSuspiciouslyNotMatchingArgsIndexes(List<Matcher> matchers, O
         List<Integer> suspicious = new LinkedList<Integer>();
         int i = 0;
         for (Matcher m : matchers) {
-            if (m instanceof CanDescribeVerbosely 
+            if (m instanceof ContainsExtraTypeInformation 
                     && !safelyMatches(m, arguments[i]) 
                     && toStringEquals(m, arguments[i])
-                    && !((CanDescribeVerbosely) m).typeMatches(arguments[i])) {
+                    && !((ContainsExtraTypeInformation) m).typeMatches(arguments[i])) {
                 suspicious.add(i);
             }
             i++;

File: src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java
Patch:
@@ -35,8 +35,8 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted) {
             Invocation similar = finder.findSimilarInvocation(invocations, wanted);
             if (similar != null) {
                 ArgumentMatchingTool argumentMatchingTool = new ArgumentMatchingTool();
-                Integer[] toBePrintedVerbosely = argumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(), similar.getArguments());
-                SmartPrinter smartPrinter = new SmartPrinter(wanted, similar, toBePrintedVerbosely);
+                Integer[] indexesOfSuspiciousArgs = argumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(), similar.getArguments());
+                SmartPrinter smartPrinter = new SmartPrinter(wanted, similar, indexesOfSuspiciousArgs);
                 reporter.argumentsAreDifferent(smartPrinter.getWanted(), smartPrinter.getActual(), similar.getLocation());
             } else {
                 reporter.wantedButNotInvoked(wanted, invocations);

File: test/org/mockito/internal/matchers/MatchersPrinterTest.java
Patch:
@@ -25,7 +25,7 @@ public void shouldGetArgumentsBlock() {
     }
 
     @Test
-    public void shouldPrintVerboselyOnlyMarkedMatchers() {
+    public void shouldDescribeTypeInfoOnlyMarkedMatchers() {
         //when
         String line = printer.getArgumentsLine((List) Arrays.asList(new Equals(1L), new Equals(2)), PrintSettings.verboseMatchers(1));
         //then

File: src/org/mockito/internal/matchers/CanDescribeVerbosely.java
Patch:
@@ -4,4 +4,6 @@
 
 public interface CanDescribeVerbosely {
     SelfDescribing getSelfDescribingVerbosely();
+
+    boolean typeMatches(Object object);
 }
\ No newline at end of file

File: test/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
@@ -112,7 +111,6 @@ public String toString() {
         }
     }
     
-    @Ignore
     @Test
     public void shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult() throws Exception {
         //given

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.internal.matchers.Equals;
 import org.mockito.internal.matchers.MatchersPrinter;
 import org.mockito.internal.reporting.PrintSettings;
-import org.mockito.internal.reporting.PrintingFriendlyInocation;
+import org.mockito.internal.reporting.PrintingFriendlyInvocation;
 import org.mockito.internal.util.MockUtil;
 import org.mockito.internal.util.Primitives;
 import org.mockito.invocation.InvocationOnMock;
@@ -31,7 +31,7 @@
  * Contains stack trace of invocation
  */
 @SuppressWarnings("unchecked")
-public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInocation {
+public class Invocation implements PrintableInvocation, InvocationOnMock, PrintingFriendlyInvocation {
 
     private static final int MAX_LINE_LENGTH = 45;
     private final int sequenceNumber;

File: src/org/mockito/internal/reporting/PrintingFriendlyInvocation.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.reporting;
 
-public interface PrintingFriendlyInocation {
+public interface PrintingFriendlyInvocation {
 
     String toString(PrintSettings printSettings);
 

File: src/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -16,7 +16,7 @@ public class SmartPrinter {
     private final String wanted;
     private final String actual;
 
-    public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual, Integer ... toBePrintedVerbosely) {
+    public SmartPrinter(PrintingFriendlyInvocation wanted, PrintingFriendlyInvocation actual, Integer ... toBePrintedVerbosely) {
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
         printSettings.setMatchersToBePrintedVerbosely(toBePrintedVerbosely);

File: test/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.Mock;
 import org.mockito.internal.matchers.Equals;
 import org.mockito.internal.matchers.NotNull;
-import org.mockito.internal.reporting.PrintingFriendlyInocation;
+import org.mockito.internal.reporting.PrintingFriendlyInvocation;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
@@ -51,8 +51,8 @@ public void shouldBeACitizenOfHashes() throws Exception {
     
     @Test
     public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {
-        PrintingFriendlyInocation withOneArg = new InvocationMatcher(new InvocationBuilder().args("test").toInvocation());
-        PrintingFriendlyInocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args("test", 100).toInvocation());
+        PrintingFriendlyInvocation withOneArg = new InvocationMatcher(new InvocationBuilder().args("test").toInvocation());
+        PrintingFriendlyInvocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args("test", 100).toInvocation());
 
         assertFalse(withOneArg.equals(null));
         assertFalse(withOneArg.equals(withTwoArgs));

File: test/org/mockito/internal/verification/SmartPrinterTest.java
Patch:
@@ -7,16 +7,16 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.internal.reporting.PrintingFriendlyInocation;
+import org.mockito.internal.reporting.PrintingFriendlyInvocation;
 import org.mockito.internal.reporting.SmartPrinter;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")
 public class SmartPrinterTest extends TestBase {
 
-    private PrintingFriendlyInocation multi;
-    private PrintingFriendlyInocation shortie;
+    private PrintingFriendlyInvocation multi;
+    private PrintingFriendlyInvocation shortie;
     @Mock private IMethods mock;
 
     @Before

File: src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java
Patch:
@@ -6,7 +6,6 @@
 
 import java.util.List;
 
-import org.hamcrest.Matcher;
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;

File: test/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.mockito.internal.verification.argumentmatching;
 
-import static org.junit.Assert.*;
-
 import java.util.Arrays;
 import java.util.List;
 

File: src/org/mockito/internal/matchers/MatchersPrinter.java
Patch:
@@ -26,12 +26,14 @@ public String getArgumentsBlock(List<Matcher> matchers, PrintSettings printSetti
 
     private List<SelfDescribing> applyPrintSettings(List<Matcher> matchers, PrintSettings printSettings) {
         List<SelfDescribing> withPrintSettings = new LinkedList<SelfDescribing>();
+        int i = 0;
         for (final Matcher matcher : matchers) {
-            if (matcher instanceof CanPrintArgumentVerbosely && printSettings.printsVerbosely(matcher)) {
+            if (matcher instanceof CanPrintArgumentVerbosely && printSettings.printsVerbosely(i)) {
                 withPrintSettings.add(((CanPrintArgumentVerbosely) matcher).getVerboseSelfDescribing());
             } else {
                 withPrintSettings.add(matcher);
             }
+            i++;
         }
         return withPrintSettings;
     }

File: src/org/mockito/internal/reporting/SmartPrinter.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.reporting;
 
-import org.hamcrest.Matcher;
 
 /**
  * Makes sure both wanted and actual are printed consistently (single line or multiline)
@@ -17,7 +16,7 @@ public class SmartPrinter {
     private final String wanted;
     private final String actual;
 
-    public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual, Matcher ... toBePrintedVerbosely) {
+    public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual, Integer ... toBePrintedVerbosely) {
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
         printSettings.setMatchersToBePrintedVerbosely(toBePrintedVerbosely);

File: src/org/mockito/internal/verification/checkers/MissingInvocationChecker.java
Patch:
@@ -36,7 +36,7 @@ public void check(List<Invocation> invocations, InvocationMatcher wanted) {
             Invocation similar = finder.findSimilarInvocation(invocations, wanted);
             if (similar != null) {
                 ArgumentMatchingTool argumentMatchingTool = new ArgumentMatchingTool();
-                Matcher[] toBePrintedVerbosely = argumentMatchingTool.getSuspiciouslyNotMatchingArgs(wanted.getMatchers(), similar.getArguments());
+                Integer[] toBePrintedVerbosely = argumentMatchingTool.getSuspiciouslyNotMatchingArgsIndexes(wanted.getMatchers(), similar.getArguments());
                 SmartPrinter smartPrinter = new SmartPrinter(wanted, similar, toBePrintedVerbosely);
                 reporter.argumentsAreDifferent(smartPrinter.getWanted(), smartPrinter.getActual(), similar.getLocation());
             } else {

File: test/org/mockito/internal/verification/SmartPrinterTest.java
Patch:
@@ -7,12 +7,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.reporting.PrintingFriendlyInocation;
 import org.mockito.internal.reporting.SmartPrinter;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("unchecked")
 public class SmartPrinterTest extends TestBase {
 
     private PrintingFriendlyInocation multi;

File: src/org/mockito/internal/verification/SmartPrinter.java
Patch:
@@ -20,7 +20,6 @@ public class SmartPrinter {
     public SmartPrinter(PrintingFriendlyInocation wanted, PrintingFriendlyInocation actual) {
         PrintSettings printSettings = new PrintSettings();
         printSettings.setMultiline(wanted.toString().contains("\n") || actual.toString().contains("\n"));
-        printSettings.setVerboseArguments(wanted.toString().equals(actual.toString()));
         
         this.wanted = wanted.toString(printSettings);
         this.actual = actual.toString(printSettings);

File: test/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -12,7 +12,6 @@
 
 public class EqualsTest extends TestBase {
     
-    @Test
     public void shouldBeEqual() {
         assertEquals(new Equals(null), new Equals(null));
         assertEquals(new Equals(new Integer(2)), new Equals(new Integer(2)));

File: test/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -50,8 +50,8 @@ public void shouldBeACitizenOfHashes() throws Exception {
     
     @Test
     public void shouldNotEqualIfNumberOfArgumentsDiffer() throws Exception {
-        CanPrintInMultilines withOneArg = new InvocationMatcher(new InvocationBuilder().args("test").toInvocation());
-        CanPrintInMultilines withTwoArgs = new InvocationMatcher(new InvocationBuilder().args("test", 100).toInvocation());
+        PrintingFriendlyInocation withOneArg = new InvocationMatcher(new InvocationBuilder().args("test").toInvocation());
+        PrintingFriendlyInocation withTwoArgs = new InvocationMatcher(new InvocationBuilder().args("test", 100).toInvocation());
 
         assertFalse(withOneArg.equals(null));
         assertFalse(withOneArg.equals(withTwoArgs));

File: test/org/mockitousage/IMethods.java
Patch:
@@ -199,4 +199,6 @@ public interface IMethods {
     Object collectionArgMethod(Collection<String> collection);
 
     Object setArgMethod(Set<String> set);
+
+    void longArg(long longArg);
 }
\ No newline at end of file

File: src/org/mockito/Mockito.java
Patch:
@@ -771,7 +771,7 @@ public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) {
     public static <T> T spy(T object) {
         return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings()
                 .spiedInstance(object)
-                .defaultAnswer(RETURNS_DEFAULTS));
+                .defaultAnswer(CALLS_REAL_METHODS));
     }
 
     /**

File: src/org/mockito/ReturnValues.java
Patch:
@@ -11,9 +11,10 @@
  * @deprecated
  * <b>Just use {@link Answer} interface</b>
  * <p>
- * The reason why it is deprecated is that ReturnValues is being replaced by Answer
+ * Why it is deprecated? ReturnValues is being replaced by Answer
  * for better consistency & interoperability of the framework. 
  * Answer interface has been in Mockito for a while and it's the same as ReturnValues.
+ * There's no point in mainting exactly the same interfaces.
  * <p>
  * Configures return values for an unstubbed invocation
  * <p>

File: src/org/mockito/configuration/DefaultMockitoConfiguration.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.mockito.ReturnValues;
 import org.mockito.internal.configuration.DefaultAnnotationEngine;
-import org.mockito.internal.returnvalues.ReturnsEmptyValues;
+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;
 import org.mockito.stubbing.Answer;
 
 /**

File: src/org/mockito/configuration/IMockitoConfiguration.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito.configuration;
 
 import org.mockito.ReturnValues;
-import org.mockito.internal.returnvalues.ReturnsEmptyValues;
+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;
 import org.mockito.stubbing.Answer;
 
 /**

File: src/org/mockito/internal/creation/MockSettingsImpl.java
Patch:
@@ -53,6 +53,7 @@ public boolean isSpy() {
         return spiedInstance != null;
     }
 
+    @SuppressWarnings("unchecked")
     public MockSettings defaultAnswer(Answer defaultAnswer) {
         this.defaultAnswer = defaultAnswer;
         return this;

File: src/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.GlobalConfiguration;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -50,7 +50,7 @@
 public class ReturnsEmptyValues implements Answer<Object> {
     
     /* (non-Javadoc)
-     * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)
+     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) {
         if (Invocation.isToString(invocation)) {

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import org.mockito.internal.MockitoCore;
 import org.mockito.internal.creation.MockSettingsImpl;

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import java.lang.reflect.Array;
 
@@ -45,7 +45,7 @@ public class ReturnsMoreEmptyValues implements Answer<Object> {
     private Answer<Object> delegate = new ReturnsEmptyValues();
     
     /* (non-Javadoc)
-     * @see org.mockito.configuration.ReturnValues#valueFor(org.mockito.invocation.InvocationOnMock)
+     * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)
      */
     public Object answer(InvocationOnMock invocation) throws Throwable {
         Object ret = delegate.answer(invocation);

File: src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import java.lang.reflect.Method;
 
@@ -23,7 +23,7 @@
  * This implementation can be helpful when working with legacy code. Unstubbed
  * methods often return null. If your code uses the object returned by an
  * unstubbed call you get a NullPointerException. This implementation of
- * ReturnValues makes unstubbed methods return SmartNulls instead of nulls.
+ * Answer returns SmartNulls instead of nulls.
  * SmartNull gives nicer exception message than NPE because it points out the
  * line where unstubbed method was called. You just click on the stack trace.
  * <p>

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.mockito.internal.matchers.EqualsTest;
 import org.mockito.internal.progress.MockingProgressImplTest;
 import org.mockito.internal.progress.TimesTest;
-import org.mockito.internal.returnvalues.ReturnsEmptyValuesTest;
+import org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest;
 import org.mockito.internal.util.ListUtilTest;
 import org.mockito.internal.util.MockUtilTest;
 import org.mockito.internal.verification.RegisteredInvocationsTest;

File: test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
Patch:
@@ -43,7 +43,7 @@ public void shouldPassRuntimeExceptions() throws Throwable {
     }
     
     @Test(expected = MockitoException.class)
-    public void shouldFailWhenReturnValueSetForVoidMethod() throws Throwable {
+    public void shouldFailWhenReturnValueIsSetForVoidMethod() throws Throwable {
         validator.validate(new Returns("one"), new InvocationBuilder().method("voidMethod").toInvocation());
     }
     

File: test/org/mockito/internal/stubbing/defaultanswers/HasPrimitiveMethods.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 interface HasPrimitiveMethods {
     boolean booleanMethod();

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: test/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.returnvalues;
+package org.mockito.internal.stubbing.defaultanswers;
 
 import org.junit.Test;
 import org.mockitoutil.TestBase;

File: test/org/mockitousage/basicapi/ResetTest.java
Patch:
@@ -92,7 +92,7 @@ public void shouldValidateStateWhenResetting() {
     }
     
     @Test
-    public void shouldMaintainPreviousReturnValuesStrategy() {
+    public void shouldMaintainPreviousDefaultAnswer() {
         //given
         mock = mock(IMethods.class, RETURNS_MOCKS);
         //when

File: test/org/mockitousage/configuration/MockitoConfigurationTest.java
Patch:
@@ -17,7 +17,7 @@ public class MockitoConfigurationTest extends TestBase {
     
     @Test
     public void shouldReadConfigurationClassFromClassPath() {
-        ConfigurationAccess.getConfig().overrideReturnValues(new Answer<Object>() {
+        ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>() {
             public Object answer(InvocationOnMock invocation) {
                 return "foo";
             }});

File: test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("deprecation")
-public class StubbingConsecutiveReturnValuesTest extends TestBase {
+public class StubbingConsecutiveAnswersTest extends TestBase {
 
     @Mock private IMethods mock;
    

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -118,7 +118,7 @@ public void shouldNotAllowSettingNullThrowable() throws Exception {
     }    
     
     @Test
-    public void shouldMixThrowablesAndReturnValuesOnDifferentMocks() throws Exception {
+    public void shouldMixThrowablesAndReturnsOnDifferentMocks() throws Exception {
         when(mock.add("ExceptionOne")).thenThrow(new ExceptionOne());
         when(mock.getLast()).thenReturn("last");
         stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();

File: test/org/mockitoutil/TestBase.java
Patch:
@@ -22,7 +22,7 @@ public class TestBase extends Assert {
     @After
     public void cleanUpConfigInAnyCase() {
         ConfigurationAccess.getConfig().overrideCleansStackTrace(false);
-        ConfigurationAccess.getConfig().overrideReturnValues(null);
+        ConfigurationAccess.getConfig().overrideDefaultAnswer(null);
     }
 
     @Before

File: src/org/mockito/ReturnValues.java
Patch:
@@ -20,4 +20,4 @@ public interface ReturnValues {
      * @return the return value
      */
     Object valueFor(InvocationOnMock invocation) throws Throwable;
-}
+}
\ No newline at end of file

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -38,12 +38,12 @@ public <T> T createMock(Class<T> classToMock, MockingProgress progress, MockSett
         MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);
         Class<?>[] interfaces = settings.getExtraInterfaces();
         Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
-        Object optionalInstance = settings.getSpiedInstance();
+        Object spiedInstance = settings.getSpiedInstance();
         
         T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);
         
-        if (optionalInstance != null) {
-            new LenientCopyTool().copyToMock(optionalInstance, mock);
+        if (spiedInstance != null) {
+            new LenientCopyTool().copyToMock(spiedInstance, mock);
         }
         
         return mock;

File: test/org/mockitousage/PlaygroundTest.java
Patch:
@@ -52,7 +52,6 @@ public void partialMockInAction() {
 //
 //        spy = spy(Foo.class, "some arg", 1);
 //        
-//            .
 //            .withName("foo")
 //            .withDefaultBehavior(RETURNS_SMART_NULLS)
 //            .withInterfaces(Bar.class);

File: src/org/mockito/internal/creation/jmock/ClassImposterizer.java
Patch:
@@ -97,9 +97,6 @@ protected void filterConstructors(Class sc, List constructors) {
         }
         
         try {
-            //TODO this can throw IllegalStateException if interfaces is a bad parameter
-            //1. validate it and throw early
-            //2. catch and rethrow as MockitoException
             return enhancer.createClass(); 
         } catch (CodeGenerationException e) {
             if (Modifier.isPrivate(mockedType.getModifiers())) {

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -36,11 +36,11 @@ public <T> T createMock(Class<T> classToMock, MockingProgress progress, MockSett
         MockName mockName = new MockName(settings.getMockName(), classToMock);
         MockHandler<T> mockHandler = new MockHandler<T>(mockName, progress, new MatchersBinder(), settings);
         MethodInterceptorFilter<MockHandler<T>> filter = new MethodInterceptorFilter<MockHandler<T>>(classToMock, mockHandler);
-        Class<?>[] ancillaryTypes = settings.getExtraInterfaces();
-        Class<?>[] interfaces = ancillaryTypes == null ? new Class<?>[0] : ancillaryTypes;
+        Class<?>[] interfaces = settings.getExtraInterfaces();
+        Class<?>[] ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;
         Object optionalInstance = settings.getSpiedInstance();
         
-        T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, interfaces);
+        T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);
         
         if (optionalInstance != null) {
             new LenientCopyTool().copyToMock(optionalInstance, mock);

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -382,10 +382,10 @@ public void onlyVoidMethodsCanBeSetToDoNothing() {
              ));
     }
 
-    public void wrongTypeOfReturnValue(String expectedType, String actualType, String method) {
+    public void wrongTypeOfReturnValue(String expectedType, String actualType, String methodName) {
         throw new WrongTypeOfReturnValue(join(
-                actualType + " cannot be returned by " + method,
-                method + " should return " + expectedType
+                actualType + " cannot be returned by " + methodName + "()",
+                methodName + "() should return " + expectedType
                 ));
     }
 

File: test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -199,9 +199,9 @@ public void shouldDetectInvalidReturnType() throws Exception {
             doReturn("foo").when(mock).booleanObjectReturningMethod();
             fail();
         } catch (Exception e) {
-            assertContains("String cannot be returned by booleanObjectReturningMethod" +
+            assertContains("String cannot be returned by booleanObjectReturningMethod()" +
                     "\n" +
-                    "booleanObjectReturningMethod should return Boolean",
+                    "booleanObjectReturningMethod() should return Boolean",
                     e.getMessage());
         }
     }

File: test/org/mockitousage/spies/SpyingOnRealObjectsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockitousage;
+package org.mockitousage.spies;
 
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;

File: src/org/mockito/internal/runners/RunnerFactory.java
Patch:
@@ -24,6 +24,7 @@ public RunnerImpl create(Class<?> klass) {
             }
         } catch (Throwable t) {
             throw new MockitoException(
+                    "\n" +
                     "\n" +
                     "MockitoRunner can only be used with JUnit 4.4 or higher.\n" +
                     "You can upgrade your JUnit version or write your own Runner (please consider contributing your runner to the Mockito community).\n" +

File: src/org/mockito/runners/MockitoJUnit44Runner.java
Patch:
@@ -8,7 +8,6 @@
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 
-
 /**
  * <b>Deprecated: Simply use {@link MockitoJUnitRunner}</b>
  * <p>

File: test/org/mockito/internal/runners/util/RunnerProviderTest.java
Patch:
@@ -21,7 +21,7 @@ public void shouldCreateRunnerInstance() throws Throwable {
         //given
         RunnerProvider provider = new RunnerProvider();
         //when
-        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.JUnit45AndUpRunnerImpl", this.getClass());
+        RunnerImpl runner = provider.newInstance("org.mockito.internal.runners.JUnit45AndHigherRunnerImpl", this.getClass());
         //then
         assertNotNull(runner);
     }

File: src/org/mockito/Mock.java
Patch:
@@ -10,7 +10,6 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-import org.mockito.runners.MockitoJUnit44Runner;
 import org.mockito.runners.MockitoJUnitRunner;
 
 /**
@@ -47,7 +46,7 @@
  * <p>
  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
- * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}
+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnitRunner}
  */
 @Target( { FIELD })
 @Retention(RetentionPolicy.RUNTIME)

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -15,7 +15,6 @@
 import org.mockito.configuration.AnnotationEngine;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.configuration.GlobalConfiguration;
-import org.mockito.runners.MockitoJUnit44Runner;
 import org.mockito.runners.MockitoJUnitRunner;
 
 /**
@@ -52,7 +51,7 @@
  * <p>
  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
- * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}
+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runner: {@link MockitoJUnitRunner}
  */
 public class MockitoAnnotations {
 

File: src/org/mockito/internal/runners/util/FrameworkUsageValidator.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package org.mockito.internal.runners;
+package org.mockito.internal.runners.util;
 
 import org.junit.runner.Description;
 import org.junit.runner.notification.Failure;

File: test/org/mockito/runners/RunnersValidateFrameworkUsageTest.java
Patch:
@@ -9,10 +9,10 @@
 import org.junit.runner.Runner;
 import org.junit.runner.notification.RunListener;
 import org.junit.runner.notification.RunNotifier;
-import org.mockito.internal.runners.FrameworkUsageValidator;
+import org.mockito.internal.runners.util.FrameworkUsageValidator;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked", "deprecation"})
 public class RunnersValidateFrameworkUsageTest extends TestBase {
     
     private Runner runner;

File: test/org/mockitousage/ThreadReuseTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockito.Mock;
 import org.mockitoutil.TestBase;
 
-@RunWith(org.mockito.runners.MockitoJUnit44Runner.class)
+@RunWith(org.mockito.runners.MockitoJUnitRunner.class)
 @SuppressWarnings("unchecked")
 @Ignore("this issue is a little bit unclear to me. Let's wait until we have some more data")
 public class ThreadReuseTest extends TestBase {

File: test/org/mockitousage/examples/use/ExampleTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnit44Runner;
+import org.mockito.runners.MockitoJUnitRunner;
 import org.mockitoutil.TestBase;
 
-@RunWith(MockitoJUnit44Runner.class)
+@RunWith(MockitoJUnitRunner.class)
 public class ExampleTest extends TestBase {
     
     @Mock private ArticleCalculator mockCalculator;

File: test/org/mockitousage/junitrunner/JUnit44RunnerTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.mockitoutil.TestBase;
 
 @RunWith(MockitoJUnit44Runner.class)
-@SuppressWarnings("unchecked")
-public class JUnit4RunnerTest extends TestBase {
+@SuppressWarnings({"unchecked", "deprecation"})
+public class JUnit44RunnerTest extends TestBase {
     
     @Mock private List list;
     

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.mockitoutil.TestBase;
 
 //This is required to make sure stack trace is well filtered when runner is ON
+@SuppressWarnings("deprecation")
 @RunWith(MockitoJUnit44Runner.class)
 public class PointingStackTraceToActualInvocationTest extends TestBase {
     

File: test/org/mockitousage/matchers/ArgumentCaptorTest.java
Patch:
@@ -108,7 +108,7 @@ public void shouldSaySomethingSmartWhenMisused() {
             argument.value();
             fail();
         } catch (MockitoException e) {
-            assertContains("Argument value has not yet been captured", e.getMessage());
+            assertContains("Argument value not yet captured", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: src/org/mockito/Mockito.java
Patch:
@@ -510,8 +510,8 @@ public class Mockito extends Matchers {
     public static final ReturnValues RETURNS_MOCKS = new MockReturnValues();
 
     /**
-     * TODO THIS INTERFACE MIGHT CHANGE IN 1.8
-     * TODO mention partial mocks warning
+     * TODO: THIS INTERFACE MIGHT CHANGE IN 1.8
+     * TODO: mention partial mocks warning
      * 
      * Optional ReturnValues to be used with {@link Mockito#mock(Class, ReturnValues)}
      * <p>
@@ -945,7 +945,7 @@ public static Stubber doThrow(Throwable toBeThrown) {
     /**
      * Use doCallRealMethod() when you want to call the real implementation of a method.
      * <p>
-     * TODO mention partial mocks warning
+     * TODO: mention partial mocks warning
      * <p>
      * Example:
      * <pre>

File: src/org/mockito/internal/progress/NewOngoingStubbing.java
Patch:
@@ -88,7 +88,7 @@ public interface NewOngoingStubbing<T> {
     NewOngoingStubbing<T> thenThrow(Throwable... throwables);
 
     /**
-     * TODO partial mocks warning
+     * TODO: partial mocks warning
      * Sets the real implementation to be called when the method is called on a mock object.  E.g.:
      * <pre>
      * when(mock.someMethod()).thenCallRealMethod();

File: test/org/mockito/MockitoTest.java
Patch:
@@ -55,5 +55,5 @@ public void shouldValidateMockWhenCreatingInOrderObject() {
         Mockito.inOrder("notMock");
     }
     
-    //TODO after 1.7 stack filter does not work very well when it comes to threads?
+    //TODO: after 1.7 stack filter does not work very well when it comes to threads?
 }
\ No newline at end of file

File: test/org/mockito/internal/debugging/WarningsPrinterTest.java
Patch:
@@ -85,6 +85,6 @@ public void shouldNotPrintRedundantInformation() {
         assertNotContains("was not stubbed", logger.getLoggedInfo());
     }
 
-    // TODO after 1.7 consider writing a warning when someone tries to mock a
+    // TODO: after 1.7 consider writing a warning when someone tries to mock a
     // class that has any final methods
 }
\ No newline at end of file

File: test/org/mockito/internal/returnvalues/HasPrimitiveMethods.java
Patch:
@@ -1,5 +1,6 @@
-/**
- * 
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal.returnvalues;
 

File: test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java
Patch:
@@ -49,7 +49,7 @@ public void shouldReturnAnObjectThatAllowsObjectMethods() throws Throwable {
         
         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, "get"));
         
-        //TODO after 1.7 add functionality of printing params
+        //TODO: after 1.7 add functionality of printing params
         assertEquals("SmartNull returned by unstubbed get() method on mock", smartNull + "");
     }
 }

File: test/org/mockito/runners/VerboseMockitoJUnitRunnerTest.java
Patch:
@@ -33,7 +33,7 @@ public void setup() throws InitializationError {
         runner = new VerboseMockitoJUnitRunner(this.getClass(), loggerStub);
     }
     
-    //TODO after 1.7 refactor it to override-and-subclass
+    //TODO: after 1.7 refactor it to override-and-subclass
     @Test(expected=RunWasCalled.class)
     public void shouldRunTests() throws Exception {
         runner.run(notifier, new JunitTestBody() {

File: test/org/mockitousage/matchers/ArgumentCaptorTest.java
Patch:
@@ -26,8 +26,8 @@ public boolean matches(Object argument) {
         }
 
         public T getValue() {
-            //TODO after 1.7 nice instanceof check here?
-            //TODO capture according to what one guy wrote to the mailing list?
+            //TODO: after 1.7 nice instanceof check here?
+            //TODO: capture according to what one guy wrote to the mailing list?
             return (T) argument;
         }
     }
@@ -66,7 +66,7 @@ private Object capture(Capture<Person> capturedArgument) {
 
     @Mock IMethods mock;
 
-    //TODO after 1.7 decide on getting capture matcher into Mockito
+    //TODO: after 1.7 decide on getting capture matcher into Mockito
     @Test
     public void shouldUseArgumentCaptorInEasyMockStyle() {
         Foo foo = new Foo(mock);

File: test/org/mockitousage/matchers/MoreMatchersTest.java
Patch:
@@ -33,7 +33,7 @@ public void shouldAnyBeActualAliasToAnyObject() {
     
     @Test
     public void shouldHelpOutWithUnnecessaryCastingOfCollections() {
-//        TODO implement after 1.7
+//        TODO: implement after 1.7
 //        when(mock.listArgMethod(anyListOf(String.class))).thenReturn("list");
 //        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn("collection");
 //        

File: test/org/mockitousage/misuse/RestrictedObjectMethodsTest.java
Patch:
@@ -38,7 +38,7 @@ public void shouldNotAllowStubbingRestrictedMethods() {
     @Ignore
     @Test
     public void shouldNotAllowVerifyingRestrictedMethods() {
-        //TODO after 1.7 exception message should mention those methods are not verifiable
+        //TODO: after 1.7 exception message should mention those methods are not verifiable
         verify(mock).toString();
         verify(mock).hashCode();
         verify(mock).equals(null);

File: test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -92,7 +92,7 @@ public void shouldPrintVerificationInOrderErrorAndShowWantedOnly() {
     } 
     
     @Ignore("i don't know how to implement it nicely... yet :)")
-    //TODO related to enhancement 27
+    //TODO: related to enhancement 27
     @Test
     public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {
         try {

File: test/org/mockitousage/verification/VerificationWithTimeoutTest.java
Patch:
@@ -19,7 +19,7 @@ public class VerificationWithTimeoutTest extends TestBase {
     public void shouldVerify() throws Exception {
         mock.clear();
         
-        //TODO after 1.8 implement timeout
+        //TODO: after 1.8 implement timeout
         //verify(mock, atLeastOnce().timeout(100)).clear();
     }
 }
\ No newline at end of file

File: src/org/mockito/Matchers.java
Patch:
@@ -206,7 +206,7 @@ public static <T> T anyObject() {
      * @return <code>null</code>.
      */
     public static <T> T any(Class<T> clazz) {
-        return anyObject();
+        return (T) anyObject();
     }
 
     /**

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -79,7 +79,7 @@ public void missingMethodInvocation() {
                 "For example:",
                 "    when(mock.getArticles()).thenReturn(articles);",
                 "",
-                "Also, this error might show up because you verify final method, equals() or hashcode() method.",
+                "Also, this error might show up because you verify final method, equals() or hashCode() method.",
                 "Those methods *cannot* be stubbed/verified.",
                 ""
         ));
@@ -93,7 +93,7 @@ public void unfinishedVerificationException(Location location) {
                 "Example of correct verification:",
                 "    verify(mock).doSomething()",
                 "",
-                "Also, this error might show up because you stub a final method, equals() or hashcode() method.",
+                "Also, this error might show up because you stub a final method, equals() or hashCode() method.",
                 "Those methods *cannot* be stubbed/verified.",
                 ""
         ));
@@ -405,7 +405,7 @@ public void misplacedArgumentMatcher(Location location) {
                 "    verify(mock).someMethod(contains(\"foo\"))",
                 "",
                 "Also, this error might show up because you use argument matchers with methods that cannot be mocked.",
-                "Following methods *cannot* be stubbed/verified: final methods, equals() and hashcode().",                
+                "Following methods *cannot* be stubbed/verified: final methods, equals() and hashCode().",                
                 ""
                 ));
     }

File: src/org/mockito/Matchers.java
Patch:
@@ -206,7 +206,7 @@ public static <T> T anyObject() {
      * @return <code>null</code>.
      */
     public static <T> T any(Class<T> clazz) {
-        return isA(clazz);
+        return anyObject();
     }
 
     /**

File: src/org/mockito/internal/debugging/Location.java
Patch:
@@ -8,6 +8,7 @@ public class Location  {
 
     public Location() {
         StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
+        //TODO location should have always clean stack traces
         StackTraceFilter filter = new StackTraceFilter();
         this.firstTraceElement = filter.filterStackTrace(stackTrace)[0];
     }

File: src/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -24,7 +24,7 @@ public InvocationMatcher bindMatchers(ArgumentMatcherStorage argumentMatcherStor
     private void validateMatchers(Invocation invocation, List<Matcher> matchers) {
         if (matchers != null) {
             int recordedMatchersSize = matchers.size();
-            int expectedMatchersSize = invocation.getArguments().length;
+            int expectedMatchersSize = invocation.getArgumentsCount();
             if (expectedMatchersSize != recordedMatchersSize) {
                 new Reporter().invalidUseOfMatchers(expectedMatchersSize, recordedMatchersSize);
             }

File: src/org/mockito/exceptions/base/StackTraceFilter.java
Patch:
@@ -16,6 +16,7 @@ public boolean isLastStackElementToRemove(StackTraceElement e) {
         return fromMockObject || fromOrgMockito && !isRunner;
     }
 
+    //TODO remove hasStackTrace strings
     public void filterStackTrace(Throwable hasStackTrace) {
         StackTraceElement[] filtered = filterStackTrace(hasStackTrace.getStackTrace());
         hasStackTrace.setStackTrace(filtered);

File: src/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -75,7 +75,7 @@ public void validateState() {
         
         if (stubbingInProgress) {
             stubbingInProgress = false;
-            reporter.unfinishedStubbing(debuggingInfo.getLastInvocationLocation());
+            reporter.unfinishedStubbing();
         }
       
         getArgumentMatcherStorage().validateState();

File: src/org/mockito/internal/stubbing/MockitoStubber.java
Patch:
@@ -11,7 +11,6 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.MockingProgress;
-import org.mockito.internal.progress.OngoingStubbing;
 import org.mockito.stubbing.Answer;
 
 @SuppressWarnings("unchecked")
@@ -27,8 +26,7 @@ public MockitoStubber(MockingProgress mockingProgress) {
         this.mockingProgress = mockingProgress;
     }
 
-    public void setInvocationForPotentialStubbing(InvocationMatcher invocation, OngoingStubbing ongoingStubbing) {
-        mockingProgress.reportOngoingStubbing(ongoingStubbing);
+    public void setInvocationForPotentialStubbing(InvocationMatcher invocation) {
         this.invocationForStubbing = invocation;
     }
 

File: test/org/mockito/internal/stubbing/MockitoStubberTest.java
Patch:
@@ -25,7 +25,7 @@ public void setup() {
         state = new MockingProgressImpl();
         
         mockitoStubber = new MockitoStubber(state);
-        mockitoStubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher(), null);
+        mockitoStubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());
         
         simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();
     }
@@ -50,11 +50,11 @@ public void shouldFinishStubbingOnAddingReturnValue() throws Exception {
     
     @Test
     public void shouldGetResultsForMethods() throws Throwable {
-        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod), null);
+        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));
         mockitoStubber.addAnswer(new Returns("simpleMethod"));
         
         Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();
-        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod), null);
+        mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));
         mockitoStubber.addAnswer(new ThrowsException(new MyException()));
         
         assertEquals("simpleMethod", mockitoStubber.answerTo(simpleMethod));

File: test/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java
Patch:
@@ -8,6 +8,7 @@
 import static org.mockito.Mockito.*;
 
 import org.junit.After;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.StateMaster;
@@ -45,6 +46,8 @@ private void unfinishedStubbingHere() {
         when(mock.simpleMethod());
     }
     
+    //TODO
+    @Ignore
     @Test
     public void shouldPointOutUnfinishedStubbing() {
         unfinishedStubbingHere();

File: test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.verification.VerifcationInOrderFailure;
+import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -57,7 +57,7 @@ public void shouldReportTooLittleInvocations() throws Exception {
         try {
             checker.check(invocations, wanted, 4);
             fail();
-        } catch (VerifcationInOrderFailure e) {
+        } catch (VerificationInOrderFailure e) {
             assertThat(e, messageContains("Wanted 4 times"));
             assertThat(e, messageContains("But was 2 times"));
         }
@@ -72,7 +72,7 @@ public void shouldReportTooManyInvocations() throws Exception {
         try {
             checker.check(invocations, wanted, 1);
             fail();
-        } catch (VerifcationInOrderFailure e) {
+        } catch (VerificationInOrderFailure e) {
             assertThat(e, messageContains("Wanted 1 time"));
             assertThat(e, messageContains("But was 2 times"));
         }

File: test/org/mockitousage/SpyingOnRealObjectsTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
-import org.mockito.exceptions.verification.VerifcationInOrderFailure;
+import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")
@@ -114,7 +114,7 @@ public void shouldVerifyInOrderAndFail() {
         try {
             inOrder.verify(spy).add("one");
             fail();
-        } catch (VerifcationInOrderFailure f) {}
+        } catch (VerificationInOrderFailure f) {}
     }
     
     @Test

File: test/org/mockitousage/stacktrace/StackTraceFilteringTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.StateMaster;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.VerifcationInOrderFailure;
+import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -88,7 +88,7 @@ public void shouldFilterStacktraceWhenVerifyingInOrder() {
         try {
             inOrder.verify(mock).oneArg(true);
             fail();
-        } catch (VerifcationInOrderFailure e) {
+        } catch (VerificationInOrderFailure e) {
             assertThat(e, hasFirstMethodInStackTrace("shouldFilterStacktraceWhenVerifyingInOrder"));
         }
     }

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.exceptions.verification.NeverWantedButInvoked;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
-import org.mockito.exceptions.verification.VerifcationInOrderFailure;
+import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitoutil.TestBase;
 
@@ -123,6 +123,6 @@ public void shouldAllowVerifyingInteractionNeverHappenedInOrder() throws Excepti
         try {
             inOrder.verify(mock, never()).add("two");
             fail();
-        } catch (VerifcationInOrderFailure e) {}
+        } catch (VerificationInOrderFailure e) {}
     }
 }
\ No newline at end of file

File: test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.InOrder;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.VerifcationInOrderFailure;
+import org.mockito.exceptions.verification.VerificationInOrderFailure;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
@@ -115,7 +115,7 @@ public void shouldFailOnLastInvocationTooEarly() {
         try {
             inOrder.verify(mockOne, atLeastOnce()).simpleMethod(1);
             fail();
-        } catch (VerifcationInOrderFailure e) {}
+        } catch (VerificationInOrderFailure e) {}
     }
     
     @Test(expected=MockitoException.class)

File: test/org/mockitousage/stubbing/SmartNullsStubbingTest.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockitousage.stubbing;
 
 import static org.mockito.Mockito.*;
-import static org.mockitoutil.ExtraMatchers.*;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -36,7 +35,7 @@ public void shouldSmartNPEPointToUnstubbedCall() throws Exception {
             methods.simpleMethod();
             fail();
         } catch (SmartNullPointerException e) {
-            assertThat(e.getCause(),  hasMethodInStackTraceAt(0, "unstubbedMethodInvokedHere"));
+            assertContains("unstubbedMethodInvokedHere(", e.getMessage());
         }
     }
 

File: src/org/mockito/exceptions/verification/NoInteractionsWanted.java
Patch:
@@ -13,7 +13,7 @@ public class NoInteractionsWanted extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public NoInteractionsWanted(String message, Throwable cause) {
-        super(message, cause);
+    public NoInteractionsWanted(String message) {
+        super(message);
     }
 }
\ No newline at end of file

File: src/org/mockito/exceptions/verification/NeverWantedButInvoked.java
Patch:
@@ -10,7 +10,7 @@ public class NeverWantedButInvoked extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public NeverWantedButInvoked(String message, Throwable cause) {
-        super(message, cause);
+    public NeverWantedButInvoked(String message) {
+        super(message);
     }
 }

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -5,7 +5,6 @@
 package org.mockitousage.stacktrace;
 
 import static org.mockito.Mockito.*;
-import static org.mockitoutil.ExtraMatchers.*;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -53,7 +52,7 @@ public void shouldPointToTooManyInvocationsChunkOnError() {
             verify(mock, times(0)).simpleMethod(1);
             fail();
         } catch (NeverWantedButInvoked e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("first"));
+            assertContains("first(", e.getMessage());
         }
     }   
 }
\ No newline at end of file

File: test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -293,8 +293,8 @@ public void shouldSayNeverWantedButInvoked() throws Exception {
             verify(mock, never()).simpleMethod(1);
             fail();
         } catch (NeverWantedButInvoked e) {
-            assertThat(e, messageContains("Never wanted but invoked!"));
-            assertThat(e, causeMessageContains("Undesired invocation"));
+            assertThat(e, messageContains("Never wanted here:"));
+            assertThat(e, messageContains("But invoked here:"));
         }
     }
     

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -75,7 +75,7 @@ public void shouldDetectActuallyCalledOnce() throws Exception {
             verify(mock, times(0)).clear();
             fail();
         } catch (NeverWantedButInvoked e) {
-            assertThat(e, messageContains("Never wanted but invoked!"));
+            assertThat(e, messageContains("Never wanted here"));
         }
     }
 

File: test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java
Patch:
@@ -73,7 +73,8 @@ public void shouldReportTooManyInvocations() throws Exception {
             checker.check(invocations, wanted, 1);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e, messageContains("Wanted 1 time but was 2"));
+            assertThat(e, messageContains("Wanted 1 time"));
+            assertThat(e, messageContains("But was 2 times"));
         }
     }
     

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
-import static org.mockitoutil.ExtraMatchers.*;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -101,7 +100,7 @@ public void shouldPointToFourthChunkBecauseTooManyActualInvocations() {
             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("fourthChunk"));
+            assertContains("fourthChunk(", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
-import static org.mockitoutil.ExtraMatchers.*;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -95,7 +94,7 @@ public void shouldPointToFirstMethodBecauseOfTooManyActualInvocations() {
             inOrder.verify(mock, times(0)).simpleMethod(anyInt());
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("first"));
+            assertContains("first(", e.getMessage());
         }
     }    
     
@@ -107,7 +106,7 @@ public void shouldPointToSecondMethodBecauseOfTooManyActualInvocations() {
             inOrder.verify(mockTwo, times(0)).simpleMethod(anyInt());
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("second"));
+            assertContains("second(", e.getMessage());
         }
     }
     

File: test/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java
Patch:
@@ -58,7 +58,8 @@ public void shouldReportTooLittleInvocations() throws Exception {
             checker.check(invocations, wanted, 4);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e, messageContains("Wanted 4 times but was 2"));
+            assertThat(e, messageContains("Wanted 4 times"));
+            assertThat(e, messageContains("But was 2 times"));
         }
     }
     

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -121,7 +121,7 @@ public void shouldPointToFourthMethodBecauseOfTooLittleActualInvocations() {
             inOrder.verify(mockTwo, times(3)).simpleMethod(anyInt());
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("fourth"));
+            assertContains("fourth(", e.getMessage());
         }
     }
 }
\ No newline at end of file

File: test/org/mockitoutil/ExtraMatchers.java
Patch:
@@ -17,6 +17,7 @@
 @SuppressWarnings("unchecked")
 public class ExtraMatchers {
 
+    //TODO remove
     public static <T> Assertor<Throwable> hasFirstMethodInStackTrace(final String method) {
         return hasMethodInStackTraceAt(0, method);
     }

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -63,7 +63,7 @@ public void shouldPointStackTraceToPreviousInvocation() {
             inOrder.verify(mock).simpleMethod(999);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("secondChunk"));
+            assertContains("secondChunk(", e.getMessage());
         }
     }
     
@@ -75,7 +75,7 @@ public void shouldPointToThirdInteractionBecauseAtLeastOnceUsed() {
             inOrder.verify(mockTwo).simpleMethod(999);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("thirdChunk"));
+            assertContains("thirdChunk(", e.getMessage());
         }
     }
     
@@ -89,7 +89,7 @@ public void shouldPointToThirdChunkWhenTooLittleActualInvocations() {
             inOrder.verify(mockTwo, times(3)).simpleMethod(999);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("thirdChunk"));
+            assertContains("thirdChunk(", e.getMessage());
         }
     }
     

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -60,7 +60,7 @@ public void shouldPointStackTraceToPreviousVerified() {
             inOrder.verify(mock).simpleMethod(999);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("fourth"));
+            assertContains("fourth(", e.getMessage());
         }
     }
     
@@ -72,7 +72,7 @@ public void shouldPointToThirdMethod() {
             inOrder.verify(mockTwo).simpleMethod(999);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("third"));
+            assertContains("third(", e.getMessage());
         }
     }
     
@@ -85,7 +85,7 @@ public void shouldPointToSecondMethod() {
             inOrder.verify(mockTwo, times(3)).simpleMethod(999);
             fail();
         } catch (VerifcationInOrderFailure e) {
-            assertThat(e.getCause(), hasFirstMethodInStackTrace("second"));
+            assertContains("second(", e.getMessage());
         }
     }
     

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -5,10 +5,13 @@
 package org.mockito;
 
 import org.hamcrest.BaseMatcher;
+
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.mockito.internal.util.Decamelizer;
 
+//TODO misplaced argument matcher when calling final method is weird and confusing
+
 /**
  * Allows creating customized argument matchers. 
  * <p>

File: src/org/mockito/internal/debugging/Location.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.mockito.exceptions.base.StackTraceFilter;
 
-public class Location {
+public class Location  {
 
     private final StackTraceElement firstTraceElement;
 
@@ -17,6 +17,7 @@ public String toString() {
         return this.firstTraceElement.toString();
     }
 
+    //TODO this needs to refactored - I don't want to talk to StackTraceElements any more
     public StackTraceElement[] getStackTrace() {
         return new StackTraceElement[] {firstTraceElement};
     }

File: test/org/mockitousage/spies/StubbingSpiesTest.java
Patch:
@@ -39,5 +39,6 @@ public void shouldNotThrowNPE() throws Exception {
         spy.size(anyMap());
         spy.size(anyList());
         spy.size(anyCollection());
+        spy.size(anySet());
     }
 }
\ No newline at end of file

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -52,7 +52,7 @@
 import org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkTest;
 import org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest;
 import org.mockitousage.stacktrace.StackTraceFilteringTest;
-import org.mockitousage.stacktrace.StackTrackeChangingTest;
+import org.mockitousage.stacktrace.ClickableStackTracesTest;
 import org.mockitousage.stubbing.BasicStubbingTest;
 import org.mockitousage.stubbing.ReturningDefaultValuesTest;
 import org.mockitousage.stubbing.StubbingWithThrowablesTest;
@@ -135,7 +135,7 @@ public void run() {
                     DescriptiveMessagesOnVerificationInOrderErrorsTest.class,
                     InvalidStateDetectionTest.class,
                     ReplacingObjectMethodsTest.class,
-                    StackTrackeChangingTest.class,
+                    ClickableStackTracesTest.class,
                     ExampleTest.class,
                     PointingStackTraceToActualInvocationTest.class,
                     PointingStackTraceToActualInvocationChunkTest.class,

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -38,7 +38,8 @@ public void shouldDetectTooLittleActualInvocations() throws Exception {
             verify(mock, times(100)).clear();
             fail();
         } catch (TooLittleActualInvocations e) {
-            assertThat(e, messageContains("Wanted 100 times but was 2"));
+            assertThat(e, messageContains("Wanted 100 times"));
+            assertThat(e, messageContains("was 2"));
         }
     }
 

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -63,8 +63,8 @@ public void cannotStubWithNullThrowable() {
     
     public void unfinishedStubbing() {
         throw new UnfinishedStubbingException(join(
-                "Unifinished stubbing detected!",
-                "E.g. toReturn() may be missing.",
+                "Unfinished stubbing detected!",
+                "E.g. thenReturn() may be missing.",
                 "Examples of correct stubbing:",
                 "    when(mock.isOk()).thenReturn(true);",
                 "    when(mock.isOk()).thenThrow(exception);",

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -84,8 +84,8 @@ public void missingMethodInvocation() {
 
     public void unfinishedVerificationException(Location location) {
         UnfinishedVerificationException exception = new UnfinishedVerificationException(join(
-                "Missing method call for verify(mock) method",
-                " -> Located at " + location,
+                "Method call not specified for verify(mock):",
+                "-> Located at " + location,
                 "",
                 "Example of correct verification:",
                 "    verify(mock).doSomething()",

File: test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java
Patch:
@@ -59,6 +59,6 @@ public void shouldReturnAnObjectThatAllowsObjectMethods() throws Exception {
         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, "get"));
         
         //TODO after 1.7 add functionality of printing params
-        assertEquals("SmartNull returned by get() method on mock", smartNull + "");
+        assertEquals("SmartNull returned by unstubbed get() method on mock", smartNull + "");
     }
 }
\ No newline at end of file

File: src/org/mockito/runners/MockitoJUnit44Runner.java
Patch:
@@ -10,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 /**
- * <b>JUnit 4.0-4.4</b> runner initializes mocks annotated with {@link Mock},
+ * <b>JUnit 4.4</b> runner initializes mocks annotated with {@link Mock},
  * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. 
  * Mocks are initialized before each test method. 
  * <p>

File: test/org/mockito/internal/returnvalues/SmartNullReturnValuesTest.java
Patch:
@@ -57,9 +57,11 @@ public void shouldReturnAnObjectThatAllowsObjectMethods() throws Exception {
         ReturnValues returnValues = new SmartNullReturnValues();
         
         Foo smartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, "get"));
+        Foo otherSmartNull = (Foo) returnValues.valueFor(invocationOf(Foo.class, "get"));
         
         //TODO after 1.7 add functionality of printing params
         assertEquals("SmartNull returned by get() method on mock", smartNull + "");
-//        assertEquals(false, smartNull.equals(null));
+        assertEquals(false, smartNull.equals(null));
+        assertTrue(otherSmartNull.hashCode() != smartNull.hashCode());
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/creation/MethodInterceptorFilter.java
Patch:
@@ -27,7 +27,8 @@ public MethodInterceptorFilter(Class toMock, T delegate) {
             equalsMethod = toMock.getMethod("equals", new Class[] { Object.class });
             hashCodeMethod = toMock.getMethod("hashCode", (Class[]) null);
         } catch (NoSuchMethodException e) {
-            throw new RuntimeException("An Object method could not be found!");
+            throw new RuntimeException("\nSomething went really wrong. Object method could not be found!" +
+                "\n please report it to the mocking mailing list at http://mockito.org");
         }
         this.delegate = delegate;
     }

File: test/org/mockito/MockitoTest.java
Patch:
@@ -54,7 +54,6 @@ public void shouldValidateMockWhenCreatingInOrderObject() {
         Mockito.inOrder("notMock");
     }
     
-    //TODO after 1.7 add initMocks that allows to send own annotation/own implementation of creation logic
     //TODO after 1.7 stack trace remover does not work very well when it comes to threads
     //TODO after 1.7 print warning when trying to mock a final class
 }

File: src/org/mockito/Mockito.java
Patch:
@@ -6,6 +6,7 @@
 
 import java.util.Arrays;
 
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.MockHandler;

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -12,6 +12,7 @@
 import java.lang.annotation.Target;
 import java.lang.reflect.Field;
 
+import org.mockito.configuration.AnnotationEngine;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.runners.MockitoJUnit44Runner;

File: src/org/mockito/ReturnValues.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito;
 
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.invocation.InvocationOnMock;
 
 /**

File: src/org/mockito/configuration/AnnotationEngine.java
Patch:
@@ -1,8 +1,10 @@
-package org.mockito;
+package org.mockito.configuration;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 
+import org.mockito.MockitoAnnotations;
+
 /**
  * Configures mock creation logic behind &#064;Mock annotations
  * <p>

File: src/org/mockito/configuration/DefaultMockitoConfiguration.java
Patch:
@@ -1,5 +1,6 @@
-package org.mockito;
+package org.mockito.configuration;
 
+import org.mockito.ReturnValues;
 import org.mockito.internal.configuration.DefaultAnnotationEngine;
 import org.mockito.internal.returnvalues.EmptyReturnValues;
 

File: src/org/mockito/configuration/experimental/ConfigurationSupport.java
Patch:
@@ -6,10 +6,10 @@
 
 import java.lang.reflect.Modifier;
 
-import org.mockito.DefaultMockitoConfiguration;
-import org.mockito.IMockitoConfiguration;
 import org.mockito.Mockito;
 import org.mockito.ReturnValues;
+import org.mockito.configuration.DefaultMockitoConfiguration;
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.Configuration;
 import org.mockito.internal.configuration.MockitoConfiguration;
 import org.mockito.internal.returnvalues.EmptyReturnValues;

File: src/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal.configuration;
 
-import org.mockito.IMockitoConfiguration;
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.exceptions.misusing.MockitoConfigurationException;
 
 public class ClassPathLoader {
@@ -13,7 +13,7 @@ public IMockitoConfiguration loadConfiguration() {
         //Trying to get config from classpath
         Class configClass = null;
         try {
-            configClass = (Class) Class.forName("org.mockito.MockitoConfiguration");
+            configClass = (Class) Class.forName("org.mockito.configuration.MockitoConfiguration");
         } catch (ClassNotFoundException e) {
             //that's ok, it means there is no global config, using default one. 
             return null;
@@ -26,7 +26,7 @@ public IMockitoConfiguration loadConfiguration() {
                     "MockitoConfiguration class must implement org.mockito.configuration.IMockitoConfiguration interface.", e);
         } catch (Exception e) {
             throw new MockitoConfigurationException("\n" +
-                    "Unable to instantianate org.mockito.MockitoConfiguration class. Does it have a safe, no-arg constructor?", e);
+                    "Unable to instantianate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?", e);
         }
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/configuration/Configuration.java
Patch:
@@ -4,9 +4,9 @@
  */
 package org.mockito.internal.configuration;
 
-import org.mockito.DefaultMockitoConfiguration;
-import org.mockito.IMockitoConfiguration;
 import org.mockito.ReturnValues;
+import org.mockito.configuration.DefaultMockitoConfiguration;
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.exceptions.base.MockitoException;
 
 /**

File: src/org/mockito/internal/configuration/DefaultAnnotationEngine.java
Patch:
@@ -3,10 +3,10 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 
-import org.mockito.AnnotationEngine;
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
+import org.mockito.configuration.AnnotationEngine;
 
 /**
  * Initializes fields annotated with &#064;Mock

File: src/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -58,7 +58,7 @@ public void stubbingStarted() {
 
     public void validateState() {
         //State is cool when GlobalConfiguration is already loaded
-        //this cannot really be tested functionally because I cannot dynamically mess up org.mockito.MockitoConfiguration class 
+        //this cannot really be tested functionally because I cannot dynamically mess up org.mockito.configuration.MockitoConfiguration class 
         GlobalConfiguration.validate();
         
         if (verificationMode != null) {

File: src/org/mockito/internal/returnvalues/GloballyConfiguredReturnValues.java
Patch:
@@ -3,8 +3,8 @@
  */
 package org.mockito.internal.returnvalues;
 
-import org.mockito.IMockitoConfiguration;
 import org.mockito.ReturnValues;
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.internal.configuration.GlobalConfiguration;
 import org.mockito.invocation.InvocationOnMock;
 

File: src/org/mockito/internal/returnvalues/SmartNullReturnValues.java
Patch:
@@ -5,9 +5,9 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.mockito.IMockitoConfiguration;
 import org.mockito.Mockito;
 import org.mockito.ReturnValues;
+import org.mockito.configuration.IMockitoConfiguration;
 import org.mockito.exceptions.cause.BecauseThisMethodWasNotStubbed;
 import org.mockito.exceptions.verification.SmartNullPointerException;
 import org.mockito.internal.creation.jmock.ClassImposterizer;

File: test/org/junit/mockito/experimental/VerboseMockitoJUnitRunnerTest.java
Patch:
@@ -1,14 +1,14 @@
-package org.mockito.internal.experimental;
+package org.junit.mockito.experimental;
 
 import static org.mockito.Mockito.*;
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.mockito.experimental.VerboseMockitoJUnitRunner.JunitTestBody;
 import org.junit.runner.notification.RunNotifier;
 import org.junit.runners.model.InitializationError;
 import org.mockito.Mock;
 import org.mockito.internal.debugging.DebuggingInfo;
-import org.mockito.internal.experimental.VerboseMockitoJUnitRunner.JunitTestBody;
 import org.mockito.internal.progress.ThreadSafeMockingProgress;
 import org.mockito.internal.util.MockitoLoggerImpl;
 import org.mockitousage.IMethods;

File: test/org/mockito/configuration/MockitoConfiguration.java
Patch:
@@ -1,8 +1,10 @@
-package org.mockito;
+package org.mockito.configuration;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 
+import org.mockito.Mockito;
+import org.mockito.ReturnValues;
 import org.mockito.internal.configuration.Configuration;
 import org.mockito.internal.configuration.DefaultAnnotationEngine;
 import org.mockitousage.configuration.SmartMock;

File: test/org/mockitousage/configuration/MockitoConfigurationTest.java
Patch:
@@ -4,8 +4,8 @@
 
 import org.junit.After;
 import org.junit.Test;
-import org.mockito.MockitoConfiguration;
 import org.mockito.ReturnValues;
+import org.mockito.configuration.MockitoConfiguration;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -10,11 +10,11 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.mockito.experimental.VerboseMockitoJUnitRunner;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
-import org.mockito.internal.experimental.VerboseMockitoJUnitRunner;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java
Patch:
@@ -9,11 +9,11 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.mockito.experimental.VerboseMockitoJUnitRunner;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
-import org.mockito.internal.experimental.VerboseMockitoJUnitRunner;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 

File: src/org/mockito/internal/configuration/ClassPathLoader.java
Patch:
@@ -6,8 +6,7 @@
 public class ClassPathLoader {
     
     /**
-     * @param defaultConfiguration - to be used if no config found on classpath
-     * @return
+     * @return configuration loaded from classpath or null
      */
     @SuppressWarnings({"unchecked"})
     public IMockitoConfiguration loadConfiguration() {

File: src/org/mockito/internal/configuration/GlobalConfiguration.java
Patch:
@@ -5,6 +5,9 @@
 import org.mockito.IMockitoConfiguration;
 import org.mockito.ReturnValues;
 
+/**
+ * Thread-safe wrapper on user-defined org.mockito.MockitoConfiguration implementation
+ */
 public class GlobalConfiguration implements IMockitoConfiguration {
     
     private static ThreadLocal<IMockitoConfiguration> globalConfiguration = new ThreadLocal<IMockitoConfiguration>();

File: src/org/mockito/internal/configuration/MockitoConfiguration.java
Patch:
@@ -32,7 +32,7 @@ public interface MockitoConfiguration {
     void setReturnValues(ReturnValues returnValues);
 
     /**
-     * Resets {@link ReturnValues} implementation to the default one: {@link MockitoProperties#DEFAULT_RETURN_VALUES}
+     * Resets {@link ReturnValues} implementation to the default one
      */
     void resetReturnValues();
 }
\ No newline at end of file

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.mockito.ExperimentalMockitoJUnitRunner;
+import org.junit.mockito.VerboseMockitoJUnitRunner;
 import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
@@ -19,7 +19,7 @@
 import org.mockitoutil.TestBase;
 
 //This is required to make sure stack trace is well filtered when runner is ON
-@RunWith(ExperimentalMockitoJUnitRunner.class)
+@RunWith(VerboseMockitoJUnitRunner.class)
 public class PointingStackTraceToActualInvocationChunkInOrderTest extends TestBase {
     
     private IMethods mock;

File: test/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.junit.mockito.ExperimentalMockitoJUnitRunner;
+import org.junit.mockito.VerboseMockitoJUnitRunner;
 import org.junit.runner.RunWith;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
@@ -18,7 +18,7 @@
 import org.mockitoutil.TestBase;
 
 //This is required to make sure stack trace is well filtered when runner is ON
-@RunWith(ExperimentalMockitoJUnitRunner.class)
+@RunWith(VerboseMockitoJUnitRunner.class)
 public class PointingStackTraceToActualInvocationChunkTest extends TestBase {
     
     private IMethods mock;

File: src/org/mockito/AnnotationEngine.java
Patch:
@@ -3,12 +3,12 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 
-import org.mockito.internal.configuration.DefaultAnntotationEngine;
+import org.mockito.internal.configuration.DefaultAnnotationEngine;
 
 /**
  * Configures mock creation logic behind &#064;Mock annotations
  * <p>
- * See how it is implemented in {@link DefaultAnntotationEngine} and {@link MockitoAnnotations#initMocks(Object)}
+ * See how it is implemented in {@link DefaultAnnotationEngine} and {@link MockitoAnnotations#initMocks(Object)}
  */
 public interface AnnotationEngine {
 

File: src/org/mockito/DefaultMockitoConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito;
 
-import org.mockito.internal.configuration.DefaultAnntotationEngine;
+import org.mockito.internal.configuration.DefaultAnnotationEngine;
 import org.mockito.internal.returnvalues.EmptyReturnValues;
 
 /**
@@ -23,6 +23,6 @@ public ReturnValues getReturnValues() {
      * @see org.mockito.IMockitoConfiguration#getAnnotationEngine()
      */
     public AnnotationEngine getAnnotationEngine() {
-        return new DefaultAnntotationEngine();
+        return new DefaultAnnotationEngine();
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/configuration/DefaultAnnotationEngine.java
Patch:
@@ -7,7 +7,7 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 
-public class DefaultAnntotationEngine implements AnnotationEngine {
+public class DefaultAnnotationEngine implements AnnotationEngine {
     
     /* (non-Javadoc)
      * @see org.mockito.AnnotationEngine#createMockFor(java.lang.annotation.Annotation, java.lang.reflect.Field)

File: src/org/mockito/internal/returnvalues/MoreEmptyReturnValues.java
Patch:
@@ -55,9 +55,7 @@ public Object valueFor(InvocationOnMock invocation) {
     Object returnValueFor(Class<?> type) {
         if (type == String.class) {
             return "";
-        } else if (type == Object.class) {
-            return new Object();
-        } else if (type.isArray()) {
+        }  else if (type.isArray()) {
             Class<?> componenetType = type.getComponentType();
             return Array.newInstance(componenetType, 0);
         }

File: src/org/mockito/internal/returnvalues/SmartNullReturnValues.java
Patch:
@@ -24,7 +24,7 @@
  * SmartNull gives nicer exception message than NPE because it points out the line where unstubbed method was called. You just click on the stack trace.
  * <p>
  * SmartNullReturnValues first tries to return ordinary return values (see {@link MoreEmptyReturnValues})
- * then it tries to return SmartNull. If the return type is final then plain null is returned.
+ * then it tries to return SmartNull. If the return type is not mockable (e.g. final) then ordinary null is returned.
  * <p>
  * If you would like to apply this return values strategy globally have a look at {@link IMockitoConfiguration} class
  * <p>

File: src/org/mockito/internal/configuration/GlobalConfiguration.java
Patch:
@@ -32,7 +32,6 @@ private static IMockitoConfiguration readFromClasspath() {
 
     public static IMockitoConfiguration getConfig() {
         if (!initialized) {
-            //TODO check email of mockito group
             throw new IllegalStateException("Something went wrong. GlobalConfiguration should be initialised by now.\n" +
                 "Please report issue at http://mockito.org or write an email to mockito@googlegroups.com");
         }

File: src/org/mockito/internal/debugging/WarningsPrinter.java
Patch:
@@ -21,8 +21,9 @@ public WarningsPrinter(List<Invocation> unusedStubs, List<InvocationMatcher> uns
     }
 
     public void print(MockitoLogger logger) {
-        //TODO it should be visible that this method changes the state
+        //TODO refactor, it should be visible that this method changes the state
         warnAboutStubsUsedWithDifferentArgs(logger);
+        
         warnAboutUnusedStubs(logger);
         warnAboutUnstubbedInvocations(logger);
     }

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -145,7 +145,7 @@ protected String toString(List<Matcher> matchers, boolean forceMultiline) {
         String method = qualifiedMethodName();
         String invocation = method + getArgumentsLine(matchers);
         //TODO make sure you don't break line when no args are given!
-        if (forceMultiline || invocation.length() > MAX_LINE_LENGTH) {
+        if (forceMultiline || (!matchers.isEmpty() && invocation.length() > MAX_LINE_LENGTH)) {
             return method + getArgumentsBlock(matchers);
         } else {
             return invocation;

File: src/org/mockito/configuration/IMockitoConfiguration.java
Patch:
@@ -1,10 +1,9 @@
 package org.mockito.configuration;
 
-//TODO should be abstract class, DefaultMockitoConfiguration
 //TODO javadocs
 //TODO test
 public interface IMockitoConfiguration {
 
     ReturnValues getReturnValues();
 
-}
+}
\ No newline at end of file

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -21,6 +21,7 @@
 import org.mockito.internal.stubbing.DoesNothing;
 import org.mockito.internal.stubbing.MockitoStubber;
 import org.mockito.internal.stubbing.Returns;
+import org.mockito.internal.stubbing.StubbedInvocationMatcher;
 import org.mockito.internal.stubbing.ThrowsException;
 import org.mockito.internal.stubbing.VoidMethodStubbable;
 import org.mockito.internal.util.MockUtil;
@@ -86,8 +87,9 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
             //it is a return-value interaction but not stubbed. This *might* be a problem
             mockingProgress.getDebuggingInfo().addPotentiallyUnstubbed(invocationMatcher);
         }
-            
+        
         if (answer != null) {
+            mockingProgress.getDebuggingInfo().reportUsedStub(invocationMatcher);
             return answer.answer(invocation);
         } else if (MockUtil.isMock(instance)) {
             return returnValues.valueFor(invocation);

File: src/org/mockito/internal/stubbing/MockitoStubber.java
Patch:
@@ -55,7 +55,7 @@ Object answerTo(Invocation invocation) throws Throwable {
         return findAnswerFor(invocation).answer(invocation);
     }
 
-    public Answer findAnswerFor(Invocation invocation) {
+    public Answer<?> findAnswerFor(Invocation invocation) {
         for (StubbedInvocationMatcher s : stubbed) {
             if (s.matches(invocation)) {
                 return s;

File: src/org/mockito/internal/stubbing/StubbedInvocationMatcher.java
Patch:
@@ -22,6 +22,7 @@ public StubbedInvocationMatcher(InvocationMatcher invocation, Answer answer) {
     }
 
     public Object answer(InvocationOnMock invocation) throws Throwable {
+        //TODO is synchronized here necessary?
         synchronized(answers) {
             return answers.size() == 1 ? answers.peek().answer(invocation) : answers.poll().answer(invocation);
         }

File: src/org/mockito/internal/progress/MockingProgressImpl.java
Patch:
@@ -4,9 +4,6 @@
  */
 package org.mockito.internal.progress;
 
-import java.util.LinkedList;
-import java.util.List;
-
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.verification.api.VerificationMode;

File: src/org/mockito/exceptions/verification/SmartNullPointerException.java
Patch:
@@ -13,4 +13,4 @@ public SmartNullPointerException(String message, Throwable t) {
     public SmartNullPointerException(String message) {
         super(message);
     }
-}
+}
\ No newline at end of file

File: src/org/mockito/exceptions/base/StackTraceFilter.java
Patch:
@@ -14,7 +14,8 @@ public boolean isLastStackElementToRemove(StackTraceElement e) {
         boolean fromMockObject = e.getClassName().contains("$$EnhancerByMockitoWithCGLIB$$");
         boolean fromOrgMockito = e.getClassName().startsWith("org.mockito.");
         //boolean isRunner = e.getClassName().startsWith("org.mockito.runners.");
-        return fromMockObject || fromOrgMockito;//) && !isRunner;
+        //) && !isRunner;
+        return fromMockObject || fromOrgMockito;
     }
 
     public void filterStackTrace(HasStackTrace hasStackTrace) {

File: src/org/mockito/internal/debugging/DebuggingInfo.java
Patch:
@@ -8,10 +8,10 @@
 public class DebuggingInfo {
 
     private final List<Invocation> unusedStubs = new LinkedList<Invocation>();
-    private final String test;
+    private final String testName;
 
-    public DebuggingInfo(String test) {
-        this.test = test;
+    public DebuggingInfo(String testName) {
+        this.testName = testName;
     }
 
     public void addUnusedStub(Invocation invocation) {

File: src/org/mockito/runners/ExperimentalMockitoJUnitRunner.java
Patch:
@@ -72,7 +72,6 @@ public MockitoListener(MockingProgress progress) {
         @Override
         public void testFailure(Failure failure) throws Exception {
             DebuggingInfo debuggingInfo = new DebuggingInfo(failure.getTestHeader());
-            Throwable e = failure.getException();
             List<Invocation> stubbedInvocations = progress.pullStubbedInvocations();
             for (Invocation invocation : stubbedInvocations) {
                 if (!invocation.isVerified()) {

File: test/org/mockitousage/PlaygroundTest.java
Patch:
@@ -6,6 +6,7 @@
 
 import static org.mockito.Mockito.*;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
@@ -42,6 +43,7 @@ public interface ReadFromSomeFileSystem {
     public void testSomething() {
     }
 
+    @Ignore
     @Test
     public void shouldFailButOnlyWhenIAssertReturnValueAndIWantToKnowWhy() throws Throwable {
         ReadFromSomeFileSystem reader = mock(ReadFromSomeFileSystem.class);
@@ -55,7 +57,7 @@ public void shouldFailButOnlyWhenIAssertReturnValueAndIWantToKnowWhy() throws Th
         byte[] bytes = controller.naughtyMethodUnderTestWhichDoesNotFailBecauseItReturnsAValue(filename);
 
 //        try {
-//        assertNotNull("Should have returned some bytes, i am HUNGRY!", bytes);
+        assertNotNull("Should have returned some bytes, i am HUNGRY!", bytes);
 //        } catch (Error ex) {
 //            verify(reader).readFromFile(filename);
 //            // i want to replace this bit with something like "verifyAllTheThingsIStubbed(mock)"

File: src/org/mockito/internal/progress/LastArguments.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.hamcrest.Matcher;
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.internal.matchers.And;
 import org.mockito.internal.matchers.Not;

File: src/org/mockito/internal/util/MockUtil.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.util;
 
-import java.lang.reflect.Method;
-
 import net.sf.cglib.proxy.Callback;
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.Factory;
@@ -22,7 +20,6 @@
 public class MockUtil {
     
     public static <T> T createMock(Class<T> classToMock, MockingProgress progress, String mockName, T optionalInstance, ReturnValues returnValues) {
-        Method[] methods = classToMock.getMethods();
         validateType(classToMock);
         if (mockName == null) {
             mockName = toInstanceName(classToMock);

File: test/org/mockitousage/PlaygroundTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.Mockito.*;
 
 import org.junit.Test;
-import org.mockito.Mockito;
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")

File: test/org/mockitousage/misuse/DetectingFinalMethodsTest.java
Patch:
@@ -1,13 +1,11 @@
 package org.mockitousage.misuse;
 import static org.mockito.Mockito.*;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
 import org.mockito.internal.util.MockUtil;
-import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
 public class DetectingFinalMethodsTest extends TestBase {
@@ -19,7 +17,6 @@ final int foo() {
     }
     
     @Mock private WithFinal withFinal;
-    @Mock private IMethods mock;
 
     @Test
     public void shouldFailWithUnfinishedVerification() {

File: src/org/mockito/Mockito.java
Patch:
@@ -489,6 +489,7 @@ public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) {
     }
     
     private static <T> T mock(Class<T> classToMock, String name, T optionalInstance, ReturnValues returnValues) {
+        MOCKING_PROGRESS.validateState();
         return MockUtil.createMock(classToMock, MOCKING_PROGRESS, name, optionalInstance, returnValues);
     }    
 
@@ -549,7 +550,7 @@ private static <T> T mock(Class<T> classToMock, String name, T optionalInstance,
      * @return a spy of the real object
      */
     public static <T> T spy(T object) {
-        return MockUtil.createMock((Class<T>) object.getClass(), MOCKING_PROGRESS, null, object, USING_GLOBAL_CONFIG);
+        return mock((Class<T>) object.getClass(), null, object, USING_GLOBAL_CONFIG);
     }
 
     /**

File: src/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -26,7 +26,7 @@ public void removeLast() {
     }
 
     public List<Invocation> getAll() {
-        return ListUtil.filter(invocations, new RemoveToString());
+        return ListUtil.filter(new LinkedList<Invocation>(invocations), new RemoveToString());
     }
     
     private static class RemoveToString implements Filter<Invocation> {

File: test/org/mockitousage/stubbing/GloballyConfiguredReturnValuesTest.java
Patch:
@@ -20,7 +20,6 @@ public HardCodedReturnValues(String returnValue) {
             this.returnValue = returnValue;
         }
 
-        @Override
         public Object valueFor(InvocationOnMock invocation) {
             return returnValue;
         }

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -17,6 +17,7 @@
 import org.mockito.internal.progress.DeprecatedOngoingStubbing;
 import org.mockito.internal.progress.MockingProgress;
 import org.mockito.internal.progress.NewOngoingStubbing;
+import org.mockito.internal.progress.SequenceNumber;
 import org.mockito.internal.stubbing.DoesNothing;
 import org.mockito.internal.stubbing.MockitoStubber;
 import org.mockito.internal.stubbing.Returns;
@@ -57,7 +58,7 @@ public MockHandler(String mockName, MockingProgress mockingProgress, MatchersBin
     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
         if (mockitoStubber.hasAnswersForStubbing()) {
             //stubbing voids with stubVoid() or doAnswer() style
-            Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());
+            Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);
             mockitoStubber.setMethodForStubbing(invocationMatcher);
             return null;
@@ -66,7 +67,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
         VerificationMode verificationMode = mockingProgress.pullVerificationMode();
         mockingProgress.validateState();
 
-        Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());
+        Invocation invocation = new Invocation(proxy, method, args, SequenceNumber.next());
         InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);
 
         if (verificationMode != null) {

File: src/org/mockito/internal/progress/MockingProgress.java
Patch:
@@ -21,8 +21,6 @@ public interface MockingProgress {
 
     void stubbingCompleted();
     
-    int nextSequenceNumber();
-
     void validateState();
 
     void reset();

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -139,7 +139,8 @@ public void run() {
                     StackTrackeChangingTest.class,
                     ExampleTest.class,
                     PointingStackTraceToActualInvocationTest.class,
-                    PointingStackTraceToActualInvocationChunkTest.class
+                    PointingStackTraceToActualInvocationChunkTest.class,
+                    VerificationInOrderFromMultipleThreadsTest.class
                 );
                 
                 if (!result.wasSuccessful()) {

File: src/org/mockito/internal/progress/NewOngoingStubbing.java
Patch:
@@ -42,7 +42,7 @@ public interface NewOngoingStubbing<T> {
      *
      * @return ongoingStubbing object that allows stubbing consecutive calls
      */
-    NewOngoingStubbing<T> thenReturn(Object value);
+    NewOngoingStubbing<T> thenReturn(T value);
 
     /**
      * Sets consecutive return values to be returned when the method is called. E.g:
@@ -57,7 +57,7 @@ public interface NewOngoingStubbing<T> {
      *
      * @return ongoingStubbing object that allows stubbing consecutive calls
      */
-    NewOngoingStubbing<T> thenReturn(Object value, Object... values);
+    NewOngoingStubbing<T> thenReturn(T value, T... values);
 
     /**
      * Sets Throwable objects to be thrown when the method is called. E.g:

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -17,7 +17,6 @@
 import org.mockito.internal.progress.DeprecatedOngoingStubbing;
 import org.mockito.internal.progress.MockingProgress;
 import org.mockito.internal.progress.NewOngoingStubbing;
-import org.mockito.internal.progress.NullObject;
 import org.mockito.internal.stubbing.DoesNothing;
 import org.mockito.internal.stubbing.MockitoStubber;
 import org.mockito.internal.stubbing.Returns;

File: src/org/mockito/internal/creation/jmock/ClassImposterizer.java
Patch:
@@ -43,7 +43,7 @@ public int accept(Method method) {
     };
     
     public boolean canImposterise(Class<?> type) {
-        return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers());
+        return !type.isPrimitive() && !Modifier.isFinal(type.getModifiers()) && !type.isAnonymousClass();
     }
     
     public <T> T imposterise(final MethodInterceptor interceptor, Class<T> mockedType, Class<?>... ancilliaryTypes) {

File: src/org/mockito/Mockito.java
Patch:
@@ -176,9 +176,10 @@
  * //verification using never(). never() is an alias to times(0)
  * verify(mockedList, never()).add("never happened");
  * 
- * //verification using atLeast()
+ * //verification using atLeast()/atMost()
  * verify(mockedList, atLeastOnce()).add("three times");
  * verify(mockedList, atLeast(2)).add("five times");
+ * verify(mockedList, atMost(5)).add("three times");
  * 
  * </pre>
  * 

File: src/org/mockito/internal/verification/VerificationDataImpl.java
Patch:
@@ -16,13 +16,11 @@ public VerificationDataImpl(List<Invocation> allInvocations, InvocationMatcher w
         this.wanted = wanted;
     }
 
-    @Override
     public List<Invocation> getAllInvocations() {
         return allInvocations;
     }
 
-    @Override
     public InvocationMatcher getWanted() {
         return wanted;
     }
-}
+}
\ No newline at end of file

File: src/org/mockito/internal/verification/AtMostXVerificationMode.java
Patch:
@@ -25,7 +25,6 @@ public AtMostXVerificationMode(int maxNumberOfInvocations) {
         this.maxNumberOfInvocations = maxNumberOfInvocations;
     }
 
-    @Override
     public void verify(VerificationData data) {
         List<Invocation> invocations = data.getAllInvocations();
         InvocationMatcher wanted = data.getWanted();

File: src/org/mockito/internal/verification/InOrderVerificationModeWrapper.java
Patch:
@@ -18,7 +18,6 @@ public InOrderVerificationModeWrapper(VerificationInOrderMode mode, List<Object>
         this.mocksToBeVerifiedInOrder = mocksToBeVerifiedInOrder;
     }
 
-    @Override
     public void verify(VerificationData data) {
         List<Invocation> allInvocations = new AllInvocationsFinder().getAllInvocations(mocksToBeVerifiedInOrder);
         mode.verifyInOrder(new VerificationDataImpl(allInvocations, data.getWanted()));

File: src/org/mockito/internal/verification/NoMoreInteractionsMode.java
Patch:
@@ -21,7 +21,6 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted) {
         }
     }
 
-    @Override
     public void setMocksToBeVerifiedInOrder(List<Object> mocks) {
         //do nothing
     }

File: src/org/mockito/internal/verification/NoMoreInteractionsMode.java
Patch:
@@ -9,16 +9,13 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 
-/**
- */
 public class NoMoreInteractionsMode extends VerificationModeImpl implements VerificationMode {
 
     protected NoMoreInteractionsMode(int wantedNumberOfInvocations, List<? extends Object> mocksToBeVerifiedInOrder,
             Verification verification) {
         super(wantedNumberOfInvocations, mocksToBeVerifiedInOrder, verification);
     }
     
-    @Override
     public void verify(List<Invocation> invocations, InvocationMatcher wanted) {
         new NoMoreInvocationsVerifier().verify(invocations, wanted, null);
     }

File: src/org/mockito/internal/verification/VerificationModeImpl.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.internal.verification;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -82,7 +81,6 @@ public String toString() {
         return "Wanted invocations count: " + wantedInvocationCount + ", Mocks to verify in order: " + mocksToBeVerifiedInOrder;
     }
 
-    @Override
     public void verify(List<Invocation> invocations, InvocationMatcher wanted) {
         if (new VerificationModeDecoder(this).inOrderMode()) {
             invocations = new AllInvocationsFinder().getAllInvocations(this.getMocksToBeVerifiedInOrder());

File: test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java
Patch:
@@ -63,7 +63,6 @@ public ClassWithDodgyConstructor() {
     
     private final class MethodInterceptorStub implements MethodInterceptor {
 
-        @Override
         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
             return null;
         }

File: test/org/mockito/internal/verification/VerifyingRecorderTest.java
Patch:
@@ -81,7 +81,6 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
             this.wanted = wanted;
             this.mode = mode;
         }
-        @Override
         public boolean appliesTo(VerificationModeImpl mode) {
             return true;
         }

File: src/org/mockito/internal/creation/jmock/SearchingClassLoader.java
Patch:
@@ -43,7 +43,8 @@ private static ClassLoader combineLoadersOf(Class<?> first, Class<?>... others)
         // Note: I've been unable to reproduce the error in jMock's test suite.
         addIfNewElement(loaders, currentThread().getContextClassLoader());
 
-        addIfNewElement(loaders, ClassLoader.getSystemClassLoader());
+        //Had to comment that out because it didn't work with in-container Spring tests
+        //addIfNewElement(loaders, ClassLoader.getSystemClassLoader());
         
         return combine(loaders);
     }

File: test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java
Patch:
@@ -1,17 +1,16 @@
 package org.mockito.internal.creation.jmock;
 
-import static org.junit.Assert.*;
-
 import java.lang.reflect.Method;
 
 import net.sf.cglib.proxy.Factory;
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
 
 import org.junit.Test;
+import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")
-public class ClassImposterizerTest {
+public class ClassImposterizerTest extends TestBase {
 
     @Test
     public void shouldCreateMockFromInterface() throws Exception {

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -61,7 +61,7 @@ public MockHandler(String mockName, MockingProgress mockingProgress, MatchersBin
     
     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
         if (mockitoStubber.hasAnswersForStubbing()) {
-            //stubbing voids in the old-school way: stubVoid()
+            //stubbing voids with stubVoid() or doAnswer() style
             Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);
             mockitoStubber.setMethodForStubbing(invocationMatcher);

File: test/org/mockitousage/IMethods.java
Patch:
@@ -47,6 +47,8 @@ public interface IMethods {
     Double doubleObjectReturningMethod();
 
     Object objectReturningMethod(Object ... objects);
+    
+    Object objectReturningMethodNoArgs();
 
     String oneArg(boolean value);
     

File: src/org/mockito/Mockito.java
Patch:
@@ -519,7 +519,7 @@ public static <T> T spy(T object) {
      *   when(mock.count()).thenReturn(10);
      * </pre> 
      * 
-     * Many unexperienced users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} 
+     * Many users found stub() confusing therefore stub() has been deprecated in favor of {@link Mockito#when(Object)} 
      * <p>
      * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:
      * <pre>

File: test/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -284,7 +284,7 @@ public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingAr
         list.add("test"); // testing fix for issue 20
         list.contains(new Object[] {"1"});
         
-        Mockito.verify(list).contains(new Object[] {"1","2", "3"});        
+        Mockito.verify(list).contains(new Object[] {"1", "2", "3"});    
     }
 
     @Test

File: src/org/mockito/Matchers.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.
  * <p>
- * {@link Mockito} extends Matchers so to get access to matchers just import Mockito class statically.
+ * {@link Mockito} extends Matchers so to get access to all matchers just import Mockito class statically.
  * <pre>
  *  //stubbing using anyInt() argument matcher
  *  when(mockedList.get(anyInt())).thenReturn("element");
@@ -493,7 +493,7 @@ public static String startsWith(String prefix) {
     /**
      * Allows creating custom argument matchers.
      * <p>
-     * See examples in javadoc for {@link Matchers} class
+     * See examples in javadoc for {@link ArgumentMatcher} class
      * 
      * @param matcher decides whether argument matches
      * @return <code>null</code>.

File: src/org/mockito/Mock.java
Patch:
@@ -11,13 +11,14 @@
 import java.lang.annotation.Target;
 
 import org.mockito.runners.MockitoJUnit44Runner;
+import org.mockito.runners.MockitoJUnitRunner;
 
 /**
  * <ul>
  * <li>Allows shorthand mock creation.</li> 
  * <li>Minimizes repetitive mock creation code.</li> 
  * <li>Makes the test class more readable.</li>
- * <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>
+ * <li>Makes the verification error easier to read because the <b>field name</b> is used to identify the mock.</li>
  * </ul>
  * 
  * <pre>
@@ -46,7 +47,7 @@
  * <p>
  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
- * You can also put it in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}
+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}
  */
 @Target( { FIELD })
 @Retention(RetentionPolicy.RUNTIME)

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -13,6 +13,7 @@
 
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.runners.MockitoJUnit44Runner;
+import org.mockito.runners.MockitoJUnitRunner;
 
 /**
  * <ul>
@@ -48,12 +49,11 @@
  * <p>
  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
- * You can also put it in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}
+ * You can also put initMocks() in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit44Runner}, {@link MockitoJUnitRunner}
  */
 public class MockitoAnnotations {
 
     /**
-     * <b>Deprecated</b> 
      * Use top-level {@link org.mockito.Mock} annotation instead
      * <p>
      * When &#064;Mock annotation was implemented as an inner class then users experienced problems with autocomplete features in IDEs. 
@@ -72,6 +72,7 @@ public class MockitoAnnotations {
     
     /**
      * Initializes objects annotated with &#064;Mock for given testClass.
+     * <p>
      * See examples in javadoc for {@link MockitoAnnotations} class.
      */
     public static void initMocks(Object testClass) {

File: src/org/mockito/internal/progress/NewOngoingStubbing.java
Patch:
@@ -11,7 +11,7 @@
  * Simply put: "<b>When</b> the x method is called <b>then</b> return y". E.g:
  *
  * <pre>
- * when(mock.someMethod()).thenReturn(10);
+ * <b>when</b>(mock.someMethod()).<b>thenReturn</b>(10);
  *
  * //you can use flexible argument matchers, e.g:
  * when(mock.someMethod(<b>anyString()</b>)).thenReturn(10);

File: src/org/mockito/runners/MockitoJUnit44Runner.java
Patch:
@@ -10,13 +10,13 @@
 import org.mockito.MockitoAnnotations;
 
 /**
- * JUnit 4.0-4.4 runner initializes mocks annotated with {@link Mock},
+ * <b>JUnit 4.0-4.4</b> runner initializes mocks annotated with {@link Mock},
  * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. 
  * Mocks are initialized before each test method. 
  * <p>
  * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.
  * <p>
- * Read more in javadoc for {@link MockitoAnnotations#initMocks(Object)}
+ * Read more in javadoc for {@link MockitoAnnotations}
  * <p>
  * Example:
  * <pre>

File: src/org/mockito/runners/MockitoJUnitRunner.java
Patch:
@@ -12,19 +12,19 @@
 import org.mockito.MockitoAnnotations;
 
 /**
- * Uses new default JUnit's runner {@link BlockJUnit4ClassRunner}.
+ * Uses <b>JUnit 4.5</b> runner {@link BlockJUnit4ClassRunner}.
  * <p>
  * JUnit 4.5 runner initializes mocks annotated with {@link Mock},
  * so that explicit usage of {@link MockitoAnnotations#initMocks(Object)} is not necessary. 
  * Mocks are initialized before each test method. 
  * <p>
  * Runner is completely optional - there are other ways you can get &#064;Mock working, for example by writing a base class.
  * <p>
- * Read more in javadoc for {@link MockitoAnnotations#initMocks(Object)}
+ * Read more in javadoc for {@link MockitoAnnotations}
  * <p>
  * Example:
  * <pre>
- * &#064;RunWith(MockitoJUnit44Runner.class)
+ * <b>&#064;RunWith(MockitoJUnit44Runner.class)</b>
  * public class ExampleTest {
  * 
  *     &#064;Mock

File: src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java
Patch:
@@ -27,7 +27,7 @@ public NoMoreInvocationsVerifier(InvocationsFinder finder, Reporter reporter) {
     }
 
     public void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {
-        if (mode.explicitMode()) {
+        if (mode.explicitMode() || mode.atLeastMode()) {
             return;
         }
 

File: src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java
Patch:
@@ -40,7 +40,7 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
             reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);
         } else if (mode.tooLittleActualInvocationsInAtLeastMode(actualCount)) {
             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);
-            reporter.tooLittleActualInvocationsInAtLeastMode(mode.minimumCount(), actualCount, wanted, lastInvocation);        
+            reporter.tooLittleActualInvocationsInAtLeastMode(mode.wantedCount(), actualCount, wanted, lastInvocation);        
         } else if (mode.neverWantedButInvoked(actualCount)) {
             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();
             reporter.neverWantedButInvoked(wanted, firstUndesired); 

File: test/org/mockito/internal/progress/VerificationModeBuilder.java
Patch:
@@ -8,7 +8,7 @@
 
 public class VerificationModeBuilder {
 
-    private Integer times;
+    private Integer times = 1;
 
     public VerificationModeImpl inOrder() {
         return VerificationModeImpl.inOrder(times, Arrays.asList(new Object()));

File: test/org/mockitousage/verification/AtLeastXVerificationTest.java
Patch:
@@ -10,11 +10,11 @@
 import java.util.List;
 
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
+import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitoutil.TestBase;
 
@@ -82,7 +82,6 @@ public void shouldVerifyInOrder() throws Exception {
         verifyNoMoreInteractions(mock);
     }
     
-    @Ignore
     @Test
     public void shouldFailVerificationInOrder() throws Exception {
         mock.clear();
@@ -98,6 +97,6 @@ public void shouldFailVerificationInOrder() throws Exception {
         try {
             inOrder.verify(mock, atLeast(4)).add(anyString());
             fail();
-        } catch (TooLittleActualInvocations e) {}
+        } catch (VerifcationInOrderFailure e) {}
     }
 }
\ No newline at end of file

File: src/org/mockito/Mockito.java
Patch:
@@ -524,7 +524,8 @@ public static <T> T spy(T object) {
      *   .toThrow( -> .thenThrow(
      *   .toAnswer( -> .thenAnswer(
      * </pre>
-     * Sorry for making your code littered with deprecation warnings but this change was required to make Mockito better. Hope you still love your little spying framework...
+     * If you're an existing user then sorry for making your code littered with deprecation warnings. 
+     * This change was required to make Mockito better.
      * 
      * @param methodCall
      *            method call

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -62,7 +62,8 @@ public class MockitoAnnotations {
      * How to fix deprecation warnings? 
      * Typically, you can just <b>search:</b> import org.mockito.MockitoAnnotations.Mock; <b>and replace with:</b> import org.mockito.Mock;
      * <p>
-     * Sorry for making your code littered with deprecation warnings but this change was required to make Mockito better. Hope you still love your little spying framework...
+     * If you're an existing user then sorry for making your code littered with deprecation warnings. 
+     * This change was required to make Mockito better.
      */
     @Target( { FIELD })
     @Retention(RetentionPolicy.RUNTIME)

File: src/org/mockito/Mockito.java
Patch:
@@ -520,9 +520,9 @@ public static <T> T spy(T object) {
      * How to fix deprecation warnings? Typically it's just few minutes of search & replace job:
      * <pre>
      *   stub( -> when(
-     *   toReturn( -> thenReturn(
-     *   toThrow( -> thenThrow(
-     *   toAnswer( -> thenAnswer(
+     *   .toReturn( -> .thenReturn(
+     *   .toThrow( -> .thenThrow(
+     *   .toAnswer( -> .thenAnswer(
      * </pre>
      * Sorry for making your code littered with deprecation warnings but this change was required to make Mockito better. Hope you still love your little spying framework...
      * 

File: src/org/mockito/Mockito.java
Patch:
@@ -625,9 +625,7 @@ public static <T> T verify(T mock) {
      * <pre>
      *   verify(mock, times(5)).someMethod("was called five times");
      *   
-     *   verify(mock, atLeastOnce()).someMethod("was called at least once");
-     *   
-     *   verify(mock, atLeast(5)).someMethod("was called at least five times");
+     *   verify(mock, atLeast(2)).someMethod("was called at least two times");
      *   
      *   //you can use flexible argument matchers, e.g:
      *   verify(mock, atLeastOnce()).someMethod(<b>anyString()</b>);

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -48,7 +48,7 @@
  * <p>
  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
- * You can also use put it in your JUnit4 runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit4Runner}, {@link MockitoJUnit45Runner}
+ * You can also put it in your JUnit runner (&#064;RunWith) or use built-in runners: {@link MockitoJUnit4Runner}, {@link MockitoJUnit45Runner}
  */
 public class MockitoAnnotations {
 

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -28,7 +28,7 @@
  * 
  * List mock = mock(List.class);
  * 
- * stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);
+ * when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);
  * 
  * mock.addAll(Arrays.asList(&quot;one&quot;, &quot;two&quot;));
  * 

File: src/org/mockito/Matchers.java
Patch:
@@ -29,7 +29,7 @@
  * {@link Mockito} extends Matchers so to get access to matchers just import Mockito class statically.
  * <pre>
  *  //stubbing using anyInt() argument matcher
- *  stub(mockedList.get(anyInt())).toReturn("element");
+ *  when(mockedList.get(anyInt())).thenReturn("element");
  *  
  *  //following prints "element"
  *  System.out.println(mockedList.get(999));
@@ -70,7 +70,7 @@
  *   
  *   List mock = mock(List.class);
  *   
- *   stub(mock.addAll(argThat(new IsListOfTwoElements()))).toReturn(true);
+ *   when(mock.addAll(argThat(new IsListOfTwoElements()))).thenReturn(true);
  *   
  *   mock.addAll(Arrays.asList("one", "two"));
  *   

File: src/org/mockito/internal/progress/NewOngoingStubbing.java
Patch:
@@ -65,7 +65,7 @@ public interface NewOngoingStubbing<T> {
     /**
      * Sets a generic Answer for the method. E.g:
      * <pre>
-     * when(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {
+     * when(mock.someMethod(10)).thenAnswer(new Answer&lt;Integer&gt;() {
      *     public Integer answer(InvocationOnMock invocation) throws Throwable {
      *         return (Integer) invocation.getArguments()[0];
      *     }

File: src/org/mockito/internal/stubbing/VoidMethodStubbable.java
Patch:
@@ -15,7 +15,7 @@
  *
  * //you can stub with different behavior for consecutive method calls.
  * //Last stubbing (e.g: toReturn()) determines the behavior for further consecutive calls.
- * stub(mock)
+ * stubVoid(mock)
  *  .toThrow(new RuntimeException())
  *  .toReturn()
  *  .on().someMethod();

File: src/org/mockito/stubbing/Answer.java
Patch:
@@ -12,7 +12,7 @@
  * Example:
  * 
  * <pre>
- * stub(mock.someMethod(anyString())).toAnswer(new Answer() {
+ * when(mock.someMethod(anyString())).thenAnswer(new Answer() {
  *     Object answer(InvocationOnMock invocation) {
  *         Object[] args = invocation.getArguments();
  *         Object mock = invocation.getMock();

File: test/org/mockito/MockitoTest.java
Patch:
@@ -18,7 +18,7 @@ public class MockitoTest extends TestBase {
     @Test
     public void shouldRemoveStubbableFromProgressAfterStubbing() {
         List mock = Mockito.mock(List.class);
-        Mockito.stub(mock.add("test")).toReturn(true);
+        Mockito.when(mock.add("test")).thenReturn(true);
         
         assertNull(Mockito.MOCKING_PROGRESS.pullOngoingStubbing());
     }

File: test/org/mockitousage/matchers/GenericMatchersTest.java
Patch:
@@ -26,10 +26,10 @@ private interface Foo {
     @SuppressWarnings("unchecked")
     @Test
     public void shouldCompile() {
-        stub(sorter.convertDate(new Date())).toReturn("one");
-        stub(sorter.convertDate((Date) anyObject())).toReturn("two");
+        when(sorter.convertDate(new Date())).thenReturn("one");
+        when(sorter.convertDate((Date) anyObject())).thenReturn("two");
 
         //following requires warning suppression but allows setting anyList()
-        stub(sorter.sort(anyList())).toReturn(null);
+        when(sorter.sort(anyList())).thenReturn(null);
     }
 }
\ No newline at end of file

File: test/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -32,7 +32,7 @@ public void describeTo(Description d) {
 
     @Test
     public void shouldAcceptHamcrestMatcher() {
-        stub(mock.simpleMethod(argThat(new ContainsX()))).toReturn("X");
+        when(mock.simpleMethod(argThat(new ContainsX()))).thenReturn("X");
         assertNull(mock.simpleMethod("blah"));
         assertEquals("X", mock.simpleMethod("blah X blah"));
     }

File: test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -34,9 +34,9 @@ public void resetState() {
 
     @Test
     public void shouldDetectWrongNumberOfMatchersWhenStubbing() {
-        Mockito.stub(mock.threeArgumentMethod(1, "2", "3")).toReturn(null);
+        Mockito.when(mock.threeArgumentMethod(1, "2", "3")).thenReturn(null);
         try {
-            Mockito.stub(mock.threeArgumentMethod(1, eq("2"), "3")).toReturn(null);
+            Mockito.when(mock.threeArgumentMethod(1, eq("2"), "3")).thenReturn(null);
             fail();
         } catch (InvalidUseOfMatchersException e) {}
     }

File: test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -44,10 +44,10 @@ public void tryDescriptiveMessagesOnMisuse() {
 
 //        verify(mock).varargs("test", anyString());
 
-//        stub("x").toReturn("x");
+//        when("x").thenReturn("x");
 
-//        stub(mock.simpleMethod());
-//        stub(mock.differentMethod()).toReturn("");
+//        when(mock.simpleMethod());
+//        when(mock.differentMethod()).thenReturn("");
     } 
     
     @Test(expected=NotAMockException.class)

File: test/org/mockitousage/stacktrace/StackTraceFilteringTest.java
Patch:
@@ -117,7 +117,7 @@ public void shouldFilterStacktraceWhenInOrderVerifies() {
     @Test
     public void shouldFilterStackTraceWhenThrowingExceptionFromMockHandler() {
         try {
-            stub(mock.oneArg(true)).toThrow(new Exception());
+            when(mock.oneArg(true)).thenThrow(new Exception());
             fail();
         } catch (MockitoException expected) {
             assertThat(expected, hasFirstMethodInStackTrace("shouldFilterStackTraceWhenThrowingExceptionFromMockHandler"));
@@ -126,7 +126,7 @@ public void shouldFilterStackTraceWhenThrowingExceptionFromMockHandler() {
     
     @Test
     public void shouldShowProperExceptionStackTrace() throws Exception {
-        stub(mock.simpleMethod()).toThrow(new RuntimeException());
+        when(mock.simpleMethod()).thenThrow(new RuntimeException());
 
         try {
             mock.simpleMethod();

File: test/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -97,7 +97,7 @@ public void shouldDetectWhenInvokedMoreThanOnce() throws Exception {
 
     @Test
     public void shouldVerifyStubbedMethods() throws Exception {
-        stub(mock.add("test")).toReturn(Boolean.FALSE);
+        when(mock.add("test")).thenReturn(Boolean.FALSE);
         
         mock.add("test");
         

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -85,8 +85,8 @@ public void shouldPassWhenMethodsActuallyNotCalled() throws Exception {
 
     @Test
     public void shouldNotCountInStubbedInvocations() throws Exception {
-        stub(mock.add("test")).toReturn(false);
-        stub(mock.add("test")).toReturn(true);
+        when(mock.add("test")).thenReturn(false);
+        when(mock.add("test")).thenReturn(true);
 
         mock.add("test");
         mock.add("test");

File: test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -28,8 +28,8 @@ public void setup() {
 
     @Test
     public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {
-        stub(mock.add("one")).toReturn(true);
-        stub(mock.add("two")).toReturn(true);
+        when(mock.add("one")).thenReturn(true);
+        when(mock.add("two")).thenReturn(true);
 
         mock.add("one");
         

File: test/org/mockitousage/examples/junitrunner/ExampleTestCase.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.Mock;
 
 @SuppressWarnings("unchecked")
-public abstract class ExampleTest {
+public abstract class ExampleTestCase {
     
     @Mock private List list;
     @Mock private Map map;

File: test/org/mockitousage/examples/junitrunner/JUnit45ExampleTest.java
Patch:
@@ -4,5 +4,5 @@
 import org.mockito.runners.MockitoJUnit45Runner;
 
 @RunWith(MockitoJUnit45Runner.class)
-public class JUnit45ExampleTest extends ExampleTest {
+public class JUnit45ExampleTest extends ExampleTestCase {
 }

File: test/org/mockitousage/examples/junitrunner/JUnit4ExampleTest.java
Patch:
@@ -4,5 +4,5 @@
 import org.mockito.runners.MockitoJUnit4Runner;
 
 @RunWith(MockitoJUnit4Runner.class)
-public class JUnit4ExampleTest extends ExampleTest {
+public class JUnit4ExampleTest extends ExampleTestCase {
 }

File: src/org/mockito/internal/stubbing/MockitoStubber.java
Patch:
@@ -50,7 +50,7 @@ private void addAnswer(Answer answer, boolean isConsecutive) {
         }
     } 
     
-    public Object getResultFor(Invocation invocation) throws Throwable {
+    Object getResultFor(Invocation invocation) throws Throwable {
         return findMatchFor(invocation).answer(invocation);
     }
 

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -20,7 +20,7 @@
  * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}, e.g:
  * 
  * <pre>
- * class IsListOfTwoElements extends ArgumentMatcher<List> {
+ * class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {
  *     public boolean matches(Object list) {
  *         return ((List) list).size() == 2;
  *     }

File: src/org/mockito/Matchers.java
Patch:
@@ -62,7 +62,7 @@
  * Example:
  * 
  * <pre>
- *   class IsListOfTwoElements extends ArgumentMatcher<List> {
+ *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {
  *      public boolean matches(Object list) {
  *          return ((List) list).size() == 2;
  *      }

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -65,7 +65,7 @@ public interface OngoingStubbing<T> {
     /**
      * Set a generic Answer for the stubbed method. E.g:
      * <pre>
-     * stub(mock.someMethod(10)).toAnswer(new Answer<Integer>() {
+     * stub(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {
      *     public Integer answer(InvocationOnMock invocation) throws Throwable {
      *         return (Integer) invocation.getArguments()[0];
      *     }

File: src/org/mockito/Mockito.java
Patch:
@@ -315,7 +315,7 @@
  * System.out.println(mock.someMethod("some arg"));
  * </pre>
  * 
- * <h3> 11. (**New**) Stubbing with callbacks</h3>
+ * <h3> 11. (**Totally New**) Stubbing with callbacks</h3>
  * 
  * Allows stubbing with generic {@link Answer} interface.
 *  <p>

File: src/org/mockito/Mockito.java
Patch:
@@ -39,7 +39,7 @@
  *      8. Finding redundant invocations <br/> 
  *      9. Shorthand for mocks creation - &#064;Mock annotation <br/> 
  *      10. (**New**) Stubbing consecutive calls (iterator-style stubbing) <br/> 
- *      11. (**New**) Stubbing with callbacks <br/>
+ *      11. (**Totally New**) Stubbing with callbacks <br/>
  *      12. (**Totally New**) doThrow()|doAnswer()|doNothing()|doReturn() family of methods mostly for stubbing voids <br/>
  *      13. (**Totally New**) Spying on real objects <br/>
  * </b>

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -64,7 +64,7 @@ public void unfinishedStubbing() {
                 "Examples of correct stubbing:",
                 "    stub(mock.isOk()).toReturn(true);",
                 "    stub(mock.isOk()).toThrow(exception);",
-                "    stubVoid(mock).toThrow(exception).on().someMethod();"
+                "    doThrow(exception).when(mock).someVoidMethod();"
         ));
     }
 
@@ -319,7 +319,7 @@ public void cannotStubVoidMethodWithAReturnValue() {
         throw new MockitoException(join(
                 "Cannot stub a void method with a return value!",
                 "Voids are usually stubbed with Throwables:",
-                "    doThrow(new RuntimeException()).when(mock).someVoidMethod();"
+                "    doThrow(exception).when(mock).someVoidMethod();"
              ));
     }
 

File: test/org/concurrentmockito/ThreadsStubSharedMockTest.java
Patch:
@@ -28,6 +28,7 @@ private void performTest() throws InterruptedException {
         final Thread[] listeners = new Thread[3];
         for (int i = 0; i < listeners.length; i++) {
             listeners[i] = new Thread() {
+                @SuppressWarnings("deprecation")
                 @Override
                 public void run() {
                     stub(mock.simpleMethod(getId()))

File: test/org/mockito/MockitoTest.java
Patch:
@@ -43,6 +43,7 @@ public void shouldValidateMockWhenVerifyingZeroInteractions() {
         Mockito.verifyZeroInteractions("notMock");
     }
     
+    @SuppressWarnings("deprecation")
     @Test(expected=NotAMockException.class)
     public void shouldValidateMockWhenStubbingVoid() {
         Mockito.stubVoid("notMock");

File: test/org/mockitousage/MockingRealObjectsTest.java
Patch:
@@ -45,6 +45,7 @@ public void shouldStub() {
         assertEquals(1, spy.size());
     }
     
+    @SuppressWarnings("deprecation")
     @Test
     public void shouldStubVoid() {
         stubVoid(spy)

File: test/org/mockitousage/UsingVarargsTest.java
Patch:
@@ -31,6 +31,7 @@ public void setup() {
         mock = Mockito.mock(IVarArgs.class);
     }
     
+    @SuppressWarnings("deprecation")
     @Test
     public void shouldStubStringVarargs() {
         stub(mock.withStringVarargsReturningString(1)).toReturn("1");

File: test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -47,6 +47,7 @@ public void shouldStubUsingMatchers() {
         } catch (RuntimeException e) {}
     }
     
+    @SuppressWarnings("deprecation")
     @Test
     public void shouldVerifyUsingMatchers() {
         stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);

File: test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -23,6 +23,9 @@ public class DescriptiveMessagesOnMisuseTest extends TestBase {
     @Ignore("just for tuning up the error messages")
     @Test
     public void tryDescriptiveMessagesOnMisuse() {
+        doReturn("foo");
+        doReturn("bar");
+        
 //        verifyNoMoreInteractions();
 //        verifyNoMoreInteractions(null);
 //        verifyNoMoreInteractions("");

File: test/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -73,6 +73,7 @@ public void shouldAllowStubbingToString() throws Exception {
         assertEquals("test", mockTwo.toString());
     }
     
+    @SuppressWarnings("deprecation")
     @Test
     public void shouldStubbingWithThrowableFailVerification() {
         stub(mock.simpleMethod("one")).toThrow(new RuntimeException());

File: test/org/mockitousage/stubbing/StubbingConsecutiveReturnValuesTest.java
Patch:
@@ -12,6 +12,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
+@SuppressWarnings("deprecation")
 public class StubbingConsecutiveReturnValuesTest extends TestBase {
 
     @Mock private IMethods mock;

File: test/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java
Patch:
@@ -8,7 +8,7 @@
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings("unchecked")
+@SuppressWarnings({"unchecked", "deprecation"})
 public class StubbingWithCustomAnswerTest extends TestBase {
     @Mock
     private IMethods mock;

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitoutil.TestBase;
 
-@SuppressWarnings({"serial", "unchecked"})
+@SuppressWarnings({"serial", "unchecked", "all"})
 public class StubbingWithThrowablesTest extends TestBase {
 
     private LinkedList mock;

File: src/org/mockito/internal/stubbing/AnswersValidator.java
Patch:
@@ -18,13 +18,13 @@ public void validate(Answer<?> answer, Invocation invocation) {
         }
         
         if (answer instanceof DoesNothing) {
-            validateVoidReturn((DoesNothing) answer, invocation);
+            validateDoNothing((DoesNothing) answer, invocation);
         }
     }
 
-    private void validateVoidReturn(DoesNothing answer, Invocation invocation) {
+    private void validateDoNothing(DoesNothing answer, Invocation invocation) {
         if (!invocation.isVoid()) {
-            reporter.cannotStubNonVoidMethodWithAVoidReturn();
+            reporter.onlyVoidMethodsCanBeSetToDoNothing();
         }
     }
 

File: src/org/mockito/internal/stubbing/VoidMethodStubbable.java
Patch:
@@ -68,7 +68,7 @@ public interface VoidMethodStubbable<T> {
     VoidMethodStubbable<T> toReturn();
 
     /**
-     * Stubs void method to execute a custom answer.
+     * Stubs a void method with generic {@link Answer}
      * <p>
      * For Example:
      * <pre>

File: test/org/mockito/internal/stubbing/AnswersValidatorTest.java
Patch:
@@ -53,12 +53,12 @@ public void shouldFailWhenReturnValueSetForVoidMethod() throws Throwable {
     }
     
     @Test(expected = MockitoException.class)
-    public void shouldFailWhenVoidReturnSetOnNonVoidMethod() throws Throwable {
+    public void shouldFailWhenNonVoidMethodDoesNothing() throws Throwable {
         validator.validate(new DoesNothing(), new InvocationBuilder().simpleMethod().toInvocation());
     }
     
     @Test
     public void shouldAllowVoidReturnForVoidMethod() throws Throwable {
         validator.validate(new DoesNothing(), new InvocationBuilder().method("voidMethod").toInvocation());
     }
-}
+}
\ No newline at end of file

File: test/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java
Patch:
@@ -165,7 +165,7 @@ public void shouldNotAllowDoNothingOnNonVoids() {
             doNothing().when(mock).simpleMethod();
             fail();
         } catch (MockitoException e) {
-            assertThat(e.getMessage(), contains("Cannot stub a non-void method"));
+            assertThat(e.getMessage(), contains("Only void methods can doNothing()"));
         }
     }
     

File: src/org/mockito/Mockito.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.internal.progress.VerificationMode;
 import org.mockito.internal.progress.VerificationModeImpl;
 import org.mockito.internal.stubbing.Returns;
-import org.mockito.internal.stubbing.ReturnsVoid;
+import org.mockito.internal.stubbing.DoesNothing;
 import org.mockito.internal.stubbing.Stubber;
 import org.mockito.internal.stubbing.StubberImpl;
 import org.mockito.internal.stubbing.ThrowsException;
@@ -724,8 +724,8 @@ public static Stubber doReturn(Object toBeReturned) {
         return doAnswer(new Returns(toBeReturned));
     }
     
-    public static Stubber doReturn() {
-        return doAnswer(new ReturnsVoid());
+    public static Stubber doNothing() {
+        return doAnswer(new DoesNothing());
     }
     
     public static Stubber doThrow(Throwable toBeThrown) {

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -328,7 +328,7 @@ public void cannotStubNonVoidMethodWithAVoidReturn() {
                 "Cannot stub a non-void method with a void return!",
                 "Void return is only used for stubbing consecutive calls on void methods.",
                 "Example:",
-                "    doReturn().",
+                "    doNothing().",
                 "    doThrow(new RuntimeException()).",
                 "    when(mock).someVoidMethod();",
                 "Above means:",

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -21,7 +21,7 @@
 import org.mockito.internal.progress.VerificationModeImpl;
 import org.mockito.internal.stubbing.MockitoStubber;
 import org.mockito.internal.stubbing.Returns;
-import org.mockito.internal.stubbing.ReturnsVoid;
+import org.mockito.internal.stubbing.DoesNothing;
 import org.mockito.internal.stubbing.ThrowsException;
 import org.mockito.internal.stubbing.VoidMethodStubbable;
 import org.mockito.internal.util.MockUtil;
@@ -136,7 +136,7 @@ public VoidMethodStubbable<T> toThrow(Throwable throwable) {
         }
 
         public VoidMethodStubbable<T> toReturn() {
-            mockitoStubber.addAnswerForVoidMethod(new ReturnsVoid());
+            mockitoStubber.addAnswerForVoidMethod(new DoesNothing());
             return this;
         }
 

File: src/org/mockito/internal/stubbing/AnswersValidator.java
Patch:
@@ -17,12 +17,12 @@ public void validate(Answer<?> answer, Invocation invocation) {
             validateReturnValue((Returns) answer, invocation);
         }
         
-        if (answer instanceof ReturnsVoid) {
-            validateVoidReturn((ReturnsVoid) answer, invocation);
+        if (answer instanceof DoesNothing) {
+            validateVoidReturn((DoesNothing) answer, invocation);
         }
     }
 
-    private void validateVoidReturn(ReturnsVoid answer, Invocation invocation) {
+    private void validateVoidReturn(DoesNothing answer, Invocation invocation) {
         if (!invocation.isVoid()) {
             reporter.cannotStubNonVoidMethodWithAVoidReturn();
         }

File: src/org/mockito/internal/stubbing/DoesNothing.java
Patch:
@@ -3,7 +3,7 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 
-public class ReturnsVoid implements Answer<Object> {
+public class DoesNothing implements Answer<Object> {
     
     public Object answer(InvocationOnMock invocation) throws Throwable {
         return null;

File: src/org/mockito/internal/stubbing/Stubber.java
Patch:
@@ -10,7 +10,7 @@
 public interface Stubber extends StubbedMethodSelector {
 
     Stubber doReturn(Object toBeReturned);
-    Stubber doReturn();
+    Stubber doNothing();
     Stubber doThrow(Throwable toBeThrown);
     Stubber doAnswer(Answer answer);
 }
\ No newline at end of file

File: src/org/mockito/internal/stubbing/StubberImpl.java
Patch:
@@ -34,8 +34,8 @@ public Stubber doThrow(Throwable toBeThrown) {
         return this;
     }
 
-    public Stubber doReturn() {
-        answers.add(new ReturnsVoid());
+    public Stubber doNothing() {
+        answers.add(new DoesNothing());
         return this;
     }
 

File: test/org/mockito/internal/stubbing/AnswersValidatorTest.java
Patch:
@@ -54,11 +54,11 @@ public void shouldFailWhenReturnValueSetForVoidMethod() throws Throwable {
     
     @Test(expected = MockitoException.class)
     public void shouldFailWhenVoidReturnSetOnNonVoidMethod() throws Throwable {
-        validator.validate(new ReturnsVoid(), new InvocationBuilder().simpleMethod().toInvocation());
+        validator.validate(new DoesNothing(), new InvocationBuilder().simpleMethod().toInvocation());
     }
     
     @Test
     public void shouldAllowVoidReturnForVoidMethod() throws Throwable {
-        validator.validate(new ReturnsVoid(), new InvocationBuilder().method("voidMethod").toInvocation());
+        validator.validate(new DoesNothing(), new InvocationBuilder().method("voidMethod").toInvocation());
     }
 }

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -20,7 +20,7 @@
  * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}, e.g:
  * 
  * <pre>
- * class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {
+ * class IsListOfTwoElements extends ArgumentMatcher<List> {
  *     public boolean matches(Object list) {
  *         return ((List) list).size() == 2;
  *     }

File: src/org/mockito/Matchers.java
Patch:
@@ -62,7 +62,7 @@
  * Example:
  * 
  * <pre>
- *   class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {
+ *   class IsListOfTwoElements extends ArgumentMatcher<List> {
  *      public boolean matches(Object list) {
  *          return ((List) list).size() == 2;
  *      }

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -65,7 +65,7 @@ public interface OngoingStubbing<T> {
     /**
      * Stub mock object with a custom answer. E.g:
      * <pre>
-     * stub(mock.someMethod(10)).toAnswer(new Answer&lt;Integer&gt;() {
+     * stub(mock.someMethod(10)).toAnswer(new Answer<Integer>() {
      *     public Integer answer(InvocationOnMock invocation) throws Throwable {
      *         return (Integer) invocation.getArguments()[0];
      *     }

File: test/org/mockito/internal/stubbing/MockitoStubberTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldGetResultsForMethods() throws Throwable {
     @Test
     public void shouldAddThrowableForVoidMethod() throws Throwable {
         mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new MyException()));
-        mockitoStubber.addVoidMethodForStubbing(new InvocationMatcher(simpleMethod));
+        mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));
         
         try {
             mockitoStubber.getResultFor(simpleMethod);
@@ -80,7 +80,7 @@ public void shouldValidateThrowableForVoidMethod() throws Throwable {
         mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new Exception()));
         
         try {
-            mockitoStubber.addVoidMethodForStubbing(new InvocationMatcher(simpleMethod));
+            mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));
             fail();
         } catch (MockitoException e) {}
     }

File: src/org/mockito/Mockito.java
Patch:
@@ -654,7 +654,7 @@ private static void assertMocksNotEmpty(Object[] mocks) {
     public static <T> VoidMethodStubbable<T> stubVoid(T mock) {
         MockHandler<T> handler = MockUtil.getMockHandler(mock);
         MOCKING_PROGRESS.stubbingStarted();
-        return handler.voidMethodStubbable();
+        return handler.voidMethodStubbable(mock);
     }
     
     public static Stubber doReturn(Object toBeReturned) {

File: test/org/mockitousage/MockingRealObjectsTest.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockitoutil.TestBase;
@@ -46,10 +45,8 @@ public void shouldStub() {
         assertEquals(1, spy.size());
     }
     
-    @Ignore("needs fixing - the real clear() method is called :)")
     @Test
     public void shouldStubVoid() {
-        spy.add("one");
         stubVoid(spy)
             .toReturn()
             .toThrow(new RuntimeException())

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -76,5 +76,5 @@ public interface OngoingStubbing<T> {
      *
      * @return ongoingStubbing object that allows stubbing consecutive calls
      */
-    OngoingStubbing<T> toAnswer(Answer<T> answer);
+    OngoingStubbing<T> toAnswer(Answer<?> answer);
 }
\ No newline at end of file

File: src/org/mockito/internal/stubbing/Answer.java
Patch:
@@ -12,6 +12,7 @@
  * @param <T> the type to return.
  */
 public interface Answer<T> {
+//TODO move to org.mockito.stubbing    
 
     /**
      * @param invocation the invocation on the mock.
@@ -21,4 +22,4 @@ public interface Answer<T> {
      * @throws Throwable the throwable to be thrown
      */
     T answer(InvocationOnMock invocation) throws Throwable;
-}
+}
\ No newline at end of file

File: src/org/mockito/internal/stubbing/VoidMethodStubbable.java
Patch:
@@ -87,7 +87,7 @@ public interface VoidMethodStubbable<T> {
      *
      * @return VoidMethodStubbable - typically to choose void method and finish stubbing
      */
-    VoidMethodStubbable<T> toAnswer(Answer<T> answer);
+    VoidMethodStubbable<T> toAnswer(Answer<?> answer);
 
     /**
      * Choose void method for stubbing. E.g:

File: test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.mockito.internal.matchers.EqualsTest;
 import org.mockito.internal.progress.MockingProgressImplTest;
 import org.mockito.internal.progress.VerificationModeImplTest;
-import org.mockito.internal.stubbing.AnswerFactoryTest;
 import org.mockito.internal.stubbing.StubberTest;
 import org.mockito.internal.util.ListUtilTest;
 import org.mockito.internal.util.MockUtilTest;
@@ -75,7 +74,7 @@
 import org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest;
 import org.mockitousage.verification.VerificationUsingMatchersTest;
 
-public class MultiThreadedTest extends TestBase {
+public class ThreadsRunAllTestsHalfManualTest extends TestBase {
     
     private static class AllTestsRunner extends Thread {
         
@@ -94,7 +93,6 @@ public void run() {
                     AllInvocationsFinderTest.class,
                     DefaultReturnValuesTest.class,
                     StubberTest.class,
-                    AnswerFactoryTest.class,
                     NumberOfInvocationsVerifierTest.class,
                     VerifyingRecorderTest.class,
                     MissingInvocationVerifierTest.class,

File: test/org/concurrentmockito/ThreadsShareAMockTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.mockito.TestBase;
 import org.mockitousage.IMethods;
 
+//this test exposes the problem at least once in 10 runs
 public class ThreadsShareAMockTest extends TestBase {
 
     private IMethods mock;

File: test/org/mockito/internal/creation/MockFactoryTest.java
Patch:
@@ -11,7 +11,7 @@
 
 @SuppressWarnings("unchecked")
 public class MockFactoryTest extends TestBase {
-
+    
     @Test
     public void shouldCreateMockFromInterface() throws Exception {
         MockFactory<SomeInterface> factory = new MockFactory<SomeInterface>();

File: src/org/mockito/internal/util/ListUtil.java
Patch:
@@ -4,14 +4,14 @@
  */
 package org.mockito.internal.util;
 
+import java.util.Collection;
 import java.util.LinkedList;
-import java.util.List;
 
 public class ListUtil {
 
-    public static <T> LinkedList<T> filter(List<T> list, Filter<T> filter) {
+    public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {
         LinkedList<T> filtered = new LinkedList<T>();
-        for (T t : list) {
+        for (T t : collection) {
             if (!filter.isOut(t)) {
                 filtered.add(t);
             }

File: src/org/mockito/internal/verification/RegisteredInvocations.java
Patch:
@@ -4,6 +4,7 @@
  */
 package org.mockito.internal.verification;
 
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -14,14 +15,14 @@
 
 public class RegisteredInvocations {
 
-    private final LinkedList<Invocation> invocations = new LinkedList<Invocation>();
+    private final List<Invocation> invocations = Collections.synchronizedList(new LinkedList<Invocation>());
     
     public void add(Invocation invocation) {
         invocations.add(invocation);
     }
 
     public void removeLast() {
-        invocations.removeLast();
+        invocations.remove(invocations.size()-1);
     }
 
     public List<Invocation> getVerifiableInvocations() {

File: test/org/mockito/internal/verification/SyncingPrinterTest.java
Patch:
@@ -1,12 +1,11 @@
 package org.mockito.internal.verification;
 
-import static org.junit.Assert.*;
-
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.TestBase;
 import org.mockito.internal.invocation.CanPrintInMultilines;
 
-public class SyncingPrinterTest {
+public class SyncingPrinterTest extends TestBase {
 
     private CanPrintInMultilines multi;
     private CanPrintInMultilines normal;

File: test/org/mockitousage/matchers/CustomMatchersTest.java
Patch:
@@ -148,7 +148,7 @@ public void shouldAnonymousCustomMatcherPrintDefaultDescription() {
         mock.simpleMethod("foo");
 
         try {
-            verify(mock).simpleMethod(argThat(new ArgumentMatcher<Object>() {
+            verify(mock).simpleMethod((String) argThat(new ArgumentMatcher<Object>() {
                 @Override public boolean matches(Object argument) {
                     return false;
                 }}));

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -58,6 +58,8 @@ public MockHandler(String mockName, MockingProgress mockingProgress, MatchersBin
     public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
         if (stubber.hasThrowableForVoidMethod()) {
             Invocation invocation = new Invocation(proxy, method, args, mockingProgress.nextSequenceNumber());
+            //TODO ideally we should get matchers first so that invocation doesn't have to expand varargs
+            //matchersBinder then would become argumentsBinder
             InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(invocation);
             stubber.addVoidMethodForThrowable(invocationMatcher);
             return null;

File: src/org/mockito/internal/stubbing/AnswerFactory.java
Patch:
@@ -10,7 +10,7 @@
 @SuppressWarnings("unchecked")
 public class AnswerFactory {
 
-    public static Answer createThrowResult(final Throwable throwable, final StackTraceFilter filter) {
+    public static Answer createThrowingAnswer(final Throwable throwable, final StackTraceFilter filter) {
         return new Answer<Object>() {
             public Object answer() throws Throwable {
                 Throwable filtered = throwable.fillInStackTrace();
@@ -20,7 +20,7 @@ public Object answer() throws Throwable {
         };
     }
     
-    public static Answer createReturnResult(final Object value) {
+    public static Answer createReturningAnswer(final Object value) {
         return new Answer<Object>() {
             public Object answer() throws Throwable {
                 return value;

File: test/org/mockito/internal/stubbing/AnswerFactoryTest.java
Patch:
@@ -18,19 +18,19 @@ public class AnswerFactoryTest extends TestBase {
 
     @Test
     public void shouldCreateReturnResult() throws Throwable {
-        Answer result = AnswerFactory.createReturnResult("lol");
+        Answer result = AnswerFactory.createReturningAnswer("lol");
         assertEquals("lol", result.answer());
     }
     
     @Test(expected=RuntimeException.class)
     public void shouldCreateThrowResult() throws Throwable {
-        AnswerFactory.createThrowResult(new RuntimeException(), new StackTraceFilter()).answer();
+        AnswerFactory.createThrowingAnswer(new RuntimeException(), new StackTraceFilter()).answer();
     }
     
     @Test
     public void shouldFilterStackTraceWhenCreatingThrowResult() throws Throwable {
         StackTraceFilterStub filterStub = new StackTraceFilterStub();
-        Answer result = AnswerFactory.createThrowResult(new RuntimeException(), filterStub);
+        Answer result = AnswerFactory.createThrowingAnswer(new RuntimeException(), filterStub);
         try {
             result.answer(); 
             fail();

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -10,7 +10,7 @@
 
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.mockito.configuration.MockitoConfiguration;
+import org.mockito.internal.configuration.Configuration;
 import org.mockito.internal.creation.ClassNameFinder;
 import org.mockito.internal.creation.MockAwareInterceptor;
 import org.mockito.internal.invocation.AllInvocationsFinder;
@@ -71,7 +71,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
         
         if (verificationMode != null) {
             verifyingRecorder.verify(invocationMatcher, verificationMode);
-            return MockitoConfiguration.instance().getReturnValues().valueFor(invocationMatcher.getInvocation());
+            return Configuration.instance().getReturnValues().valueFor(invocationMatcher.getInvocation());
         }
         
         stubber.setInvocationForPotentialStubbing(invocationMatcher);

File: src/org/mockito/internal/configuration/DefaultReturnValues.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.configuration;
+package org.mockito.internal.configuration;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -19,6 +19,7 @@
 import java.util.TreeMap;
 import java.util.TreeSet;
 
+import org.mockito.configuration.ReturnValues;
 import org.mockito.internal.creation.ClassNameFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.invocation.InvocationOnMock;

File: src/org/mockito/internal/configuration/MockitoProperties.java
Patch:
@@ -2,7 +2,9 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.configuration;
+package org.mockito.internal.configuration;
+
+import org.mockito.configuration.ReturnValues;
 
 /**
  * Configuration properties 

File: src/org/mockito/internal/stubbing/Stubber.java
Patch:
@@ -6,9 +6,9 @@
 
 import java.util.LinkedList;
 
-import org.mockito.configuration.MockitoConfiguration;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.StackTraceFilter;
+import org.mockito.internal.configuration.Configuration;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.MockingProgress;
@@ -52,7 +52,7 @@ public Object resultFor(Invocation invocation) throws Throwable {
                 return s.answer();
             }
         }
-        return MockitoConfiguration.instance().getReturnValues().valueFor(invocation);
+        return Configuration.instance().getReturnValues().valueFor(invocation);
     }
 
     public void addThrowableForVoidMethod(Throwable throwable) {

File: test/org/mockito/configuration/experimental/ConfigurationTest.java
Patch:
@@ -2,18 +2,18 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.configuration;
+package org.mockito.configuration.experimental;
 
 import org.junit.Test;
 import org.mockito.TestBase;
 import org.mockito.exceptions.base.MockitoException;
 
-public class MockitoConfigurationTest extends TestBase {
+public class ConfigurationTest extends TestBase {
     
     @Test
     public void shouldNotAllowConfiguringWithNullReturnValues() {
         try {
-            MockitoConfiguration.instance().setReturnValues(null);
+            ConfigurationSupport.getConfiguration().setReturnValues(null);
             fail();
         } catch (MockitoException e) {
             assertThat(e, messageContains("Cannot set null ReturnValues!"));

File: test/org/mockito/internal/configuration/DefaultReturnValuesTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.configuration;
+package org.mockito.internal.configuration;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -12,13 +12,13 @@
 import org.junit.runner.notification.Failure;
 import org.mockito.MockitoTest;
 import org.mockito.TestBase;
-import org.mockito.configuration.DefaultReturnValuesTest;
 import org.mockito.exceptions.ReporterTest;
 import org.mockito.exceptions.base.MockitoAssertionErrorTest;
 import org.mockito.exceptions.base.MockitoExceptionTest;
 import org.mockito.exceptions.base.StackTraceRemoverTest;
 import org.mockito.internal.AllInvocationsFinderTest;
 import org.mockito.internal.MockHandlerTest;
+import org.mockito.internal.configuration.DefaultReturnValuesTest;
 import org.mockito.internal.creation.CglibTest;
 import org.mockito.internal.creation.MockFactoryTest;
 import org.mockito.internal.invocation.InvocationMatcherTest;

File: test/org/mockitousage/examples/configure/FriendlyReturnValues.java
Patch:
@@ -5,8 +5,8 @@
 package org.mockitousage.examples.configure;
 
 import org.mockito.Mockito;
-import org.mockito.configuration.ConfigurationSupport;
 import org.mockito.configuration.ReturnValues;
+import org.mockito.configuration.experimental.ConfigurationSupport;
 import org.mockito.invocation.InvocationOnMock;
 
 /**

File: test/org/mockitousage/examples/configure/withbaseclass/MakesMocksNotToReturnNulls.java
Patch:
@@ -6,20 +6,20 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.mockito.configuration.MockitoConfiguration;
+import org.mockito.configuration.experimental.ConfigurationSupport;
 import org.mockitousage.examples.configure.FriendlyReturnValues;
 
 public class MakesMocksNotToReturnNulls {
     
     @Before
     public void configureMockito() {
         //setting custom return values
-        MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());
+        ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());
     }
     
     @After
     public void resetReturnValuesToDefaults() {
         //I don't want mocks from other tests to be reconfigured
-        MockitoConfiguration.instance().resetReturnValues();
+        ConfigurationSupport.getConfiguration().resetReturnValues();
     }
 }
\ No newline at end of file

File: test/org/mockitousage/examples/configure/withrunner/MakesMocksNotToReturnNulls.java
Patch:
@@ -7,7 +7,7 @@
 import org.junit.internal.runners.InitializationError;
 import org.junit.internal.runners.JUnit4ClassRunner;
 import org.junit.runner.notification.RunNotifier;
-import org.mockito.configuration.MockitoConfiguration;
+import org.mockito.configuration.experimental.ConfigurationSupport;
 import org.mockitousage.examples.configure.FriendlyReturnValues;
 
 public class MakesMocksNotToReturnNulls extends JUnit4ClassRunner {
@@ -20,14 +20,14 @@ public MakesMocksNotToReturnNulls(Class<?> clazz) throws InitializationError {
     protected Object createTest() throws Exception {
         Object test = super.createTest();
         //setting up custom return values
-        MockitoConfiguration.instance().setReturnValues(new FriendlyReturnValues());
+        ConfigurationSupport.getConfiguration().setReturnValues(new FriendlyReturnValues());
         return test;
     }
 
     @Override
     public void run(RunNotifier notifier) {
         super.run(notifier);
         //I don't want mocks from other tests to be reconfigured
-        MockitoConfiguration.instance().resetReturnValues();
+        ConfigurationSupport.getConfiguration().resetReturnValues();
     }
 }
\ No newline at end of file

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -18,6 +18,7 @@
  * <li>Allows shorthand mock creation.</li> 
  * <li>Minimizes repetitive mock creation code.</li> 
  * <li>Makes the test class more readable.</li>
+ * <li>Makes the verification error easier to read because <b>field name</b> is used to identify the mock.</li>
  * </ul>
  * 
  * <pre>

File: src/org/mockito/configuration/DefaultReturnValues.java
Patch:
@@ -30,6 +30,9 @@
  *  Returns appropriate primitive for primitive-returning methods
  * </li>
  * <li>
+ *  Returns consistent values for primitive wrapper classes (e.g. int-returning method retuns 0 <b>and</b> Integer-returning method returns 0, too)
+ * </li>
+ * <li>
  *  Returns empty collection for collection-returning methods (works for most commonly used collection types)
  * </li>
  * <li>

File: src/org/mockito/Mockito.java
Patch:
@@ -252,7 +252,6 @@
  * 
  * Read more here: {@link MockitoAnnotations}
  */
-//TODO add javadoc how to do junit runner here and in mockito annotations
 public class Mockito extends Matchers {
 
     private static final Reporter REPORTER = new Reporter();

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -47,6 +47,9 @@
  * In above example, <code>initMocks()</code> is called in &#064;Before (JUnit4) method of test's base class. 
  * You can also put it in your JUnit4 runner (&#064;RunWith).
  * For JUnit3 <code>initMocks()</code> can go to <code>setup()</code> method of a base class.
+ * <p>
+ * How to implement mockito junit runner? See examples from mockito/test/org/mockitousage/examples/junitrunner subpackage. 
+ * You may want to check out the project from svn repository to easily browse Mockito's test code.
  */
 public class MockitoAnnotations {
 

File: src/org/mockito/MockitoAnnotations.java
Patch:
@@ -80,7 +80,7 @@ private static void scan(Object testClass, Class<?> clazz) {
                 boolean wasAccessible = f.isAccessible();
                 f.setAccessible(true);
                 try {
-                    f.set(testClass, Mockito.mock(f.getType()));
+                    f.set(testClass, Mockito.mock(f.getType(), f.getName()));
                 } catch (IllegalAccessException e) {
                     throw new MockitoException("Problems initiating mocks annotated with @Mock", e);
                 } finally {

File: src/org/mockito/configuration/MockitoProperties.java
Patch:
@@ -4,6 +4,9 @@
  */
 package org.mockito.configuration;
 
+/**
+ * Configuration properties 
+ */
 public class MockitoProperties {
 
     public static final ReturnValues DEFAULT_RETURN_VALUES =  new DefaultReturnValues();

File: src/org/mockito/internal/creation/ClassNameFinder.java
Patch:
@@ -4,9 +4,9 @@
  */
 package org.mockito.internal.creation;
 
-public class MockNamer {
+public class ClassNameFinder {
 
-    public static String nameForMock(Object mock) {
+    public static String classNameForMock(Object mock) {
         if (mock.getClass().getInterfaces().length == 2) {
             return mock.getClass().getInterfaces()[0].getSimpleName();
         } else {

File: test/org/mockito/configuration/DefaultReturnValuesTest.java
Patch:
@@ -54,6 +54,7 @@ public class DefaultReturnValuesTest extends TestBase {
         
         assertEquals(false, values.returnValueFor(Boolean.TYPE));
         assertEquals((char) 0, values.returnValueFor(Character.TYPE));
+        assertEquals(0, values.returnValueFor(Byte.TYPE));
         assertEquals(0, values.returnValueFor(Short.TYPE));
         assertEquals(0, values.returnValueFor(Integer.TYPE));
         assertEquals(0, values.returnValueFor(Long.TYPE));

File: test/org/mockito/configuration/MockitoConfigurationTest.java
Patch:
@@ -16,7 +16,7 @@ public void shouldNotAllowConfiguringWithNullReturnValues() {
             MockitoConfiguration.instance().setReturnValues(null);
             fail();
         } catch (MockitoException e) {
-            assertContains("Cannot set null ReturnValues!", e.getMessage());
+            assertThat(e, messageContains("Cannot set null ReturnValues!"));
         }
     }
 }

File: test/org/mockito/internal/MockHandlerTest.java
Patch:
@@ -20,7 +20,7 @@ public class MockHandlerTest extends TestBase {
     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {
         MockingProgressImpl state = new MockingProgressImpl();
         state.verificationStarted(VerificationModeImpl.atLeastOnce());
-        MockHandler handler = new MockHandler(state, new ExceptionThrowingBinder());
+        MockHandler handler = new MockHandler(null, state, new ExceptionThrowingBinder());
         
         try {
             handler.intercept(null, String.class.getDeclaredMethod("toString"), new Object[]{}, null);

File: test/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.Mockito;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
@@ -16,7 +17,7 @@ public class InvocationBuilder {
     private String methodName = "simpleMethod";
     private int sequenceNumber = 0;
     private Object[] args = new Object[] {};
-    private Object mock = "mock";
+    private Object mock = Mockito.mock(IMethods.class);
     private Method method;
     private boolean verified;
 

File: test/org/mockito/internal/stubbing/ResultTest.java
Patch:
@@ -35,7 +35,7 @@ public void shouldFilterStackTraceWhenCreatingThrowResult() throws Throwable {
             fail();
         } catch (RuntimeException e) {
             assertTrue(Arrays.equals(filterStub.hasStackTrace.getStackTrace(), e.getStackTrace()));
-            assertThat("should fill in stack trace", e, hasFirstMethodInStackTrace("answer"));
+            assertThat(e, hasFirstMethodInStackTrace("answer"));
         }
     }
     

File: test/org/mockito/internal/util/ListUtilTest.java
Patch:
@@ -26,7 +26,7 @@ public boolean isOut(Object object) {
             }
         });
         
-        assertThat(filtered, collectionHasExactlyInOrder("one", "two", "three"));
+        assertThat(filtered, hasExactlyInOrder("one", "two", "three"));
     }
     
     @Test

File: test/org/mockito/internal/verification/VerifyingRecorderTest.java
Patch:
@@ -48,15 +48,15 @@ public void shouldVerify() {
         
         assertSame(verifierStub.mode, mode);
         assertSame(verifierStub.wanted, differentMethod);
-        assertThat(verifierStub.invocations, collectionHasExactlyInOrder(simpleMethod));
+        assertThat(verifierStub.invocations, hasExactlyInOrder(simpleMethod));
     }
     
     @Test
     public void shouldVerifyInOrder() {
         VerificationModeImpl inOrderMode = new VerificationModeBuilder().inOrder();
         recorder.verify(differentMethod, inOrderMode);
         
-        assertThat(verifierStub.invocations, collectionHasExactlyInOrder(simpleMethod, differentMethod.getInvocation()));
+        assertThat(verifierStub.invocations, hasExactlyInOrder(simpleMethod, differentMethod.getInvocation()));
     }
     
     @Test

File: test/org/mockitousage/AnnotationsTest.java
Patch:
@@ -24,6 +24,8 @@ public class AnnotationsTest extends TestBase {
     @Mock final Map map = new HashMap();
     //TODO add initMocks that allows to send own annotation/own implementation of creation logic
     
+    //TODO shall I bother deprecating @MockitoAnnotations.Mock and refactor annotation to own file?
+    
     @Before
     public void setup() {
         MockitoAnnotations.initMocks(this);

File: test/org/mockitousage/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -51,12 +51,12 @@ public void tryDescriptiveMessagesOnMisuse() {
     
     @Test(expected=NotAMockException.class)
     public void shouldScreamWhenWholeMethodPassedToVerify() {
-        verify(mock.booleanReturningMethod(2));
+        verify(mock.booleanReturningMethod());
     }   
     
     @Test(expected=NotAMockException.class)
     public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions() {
-        verifyNoMoreInteractions(mock.byteReturningMethod(1));
+        verifyNoMoreInteractions(mock.byteReturningMethod());
     }  
     
     @Test(expected=MockitoException.class)

File: test/org/mockitousage/MatchersMixedWithRawArgumentsTest.java
Patch:
@@ -31,7 +31,7 @@ public class MatchersMixedWithRawArgumentsTest extends TestBase {
     //1. how objenesis deal with primitive arrays (like byte[])?
     //2. Analisys of all matchers used by R2 project finished before anyObject() and so far proves it's a good idea.
 
-    @Ignore("prototyping")
+    @Ignore("prototyping new feature that allows to avoid eq() matchers when raw args passed")
     @Test
     public void shouldAllowMixingRawArgumentsWithMatchers() {
         mock.varargs("1", "2", "3");

File: test/org/mockitousage/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -15,7 +15,6 @@
 import org.mockito.TestBase;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 
-//TODO pmd rule so that all that starts with should have @Test annotation (or all XTest have some annotations on public methods)
 public class PointingStackTraceToActualInvocationChunkInOrderTest extends TestBase {
     
     private IMethods mock;

File: test/org/mockitousage/ReplacingObjectMethodsTest.java
Patch:
@@ -33,7 +33,7 @@ public void testShouldReplaceObjectMethods() {
         
         assertThat(mock.hashCode(), not(equalTo(otherMock.hashCode())));
         
-        assertContains("Mock for ObjectMethodsOverridden", mock.toString());
+        assertThat(mock.toString(), contains("Mock for ObjectMethodsOverridden"));
     }
     
     @Test 
@@ -46,7 +46,7 @@ public void testShouldReplaceObjectMethodsWhenOverridden() {
         
         assertThat(mock.hashCode(), not(equalTo(otherMock.hashCode())));
         
-        assertContains("Mock for ObjectMethodsOverriddenSubclass", mock.toString());
+        assertThat(mock.toString(), contains("Mock for ObjectMethodsOverriddenSubclass"));
     }
     
     public static class ObjectMethodsOverridden {

File: test/org/mockitousage/examples/configure/withbaseclass/ConfiguringDefaultReturnValuesUsingBaseClassTest.java
Patch:
@@ -14,6 +14,7 @@ public class ConfiguringDefaultReturnValuesUsingBaseClassTest extends MakesMocks
     public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {
         MyObject m = mock(MyObject.class);
         //mocks don't return nulls any more...
+        //the configuration code is hidden in the base class
         MyObject returned = m.foo();
         assertNotNull(returned);
         assertNotNull(returned.foo());

File: test/org/mockitousage/examples/configure/withbaseclass/ConfiguringDefaultReturnValuesUsingBaseClassTest.java
Patch:
@@ -17,9 +17,12 @@ public void shouldReturnMocksByDefaultInsteadOfNulls() throws Exception {
         MyObject returned = m.foo();
         assertNotNull(returned);
         assertNotNull(returned.foo());
+        
+        assertEquals(0, returned.bar());
     }
 
     interface MyObject {
         MyObject foo();
+        int bar();
     }
 }
\ No newline at end of file

File: test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java
Patch:
@@ -29,7 +29,7 @@ public void shouldReturnAllKindsOfPrimitives() throws Exception {
         assertEquals(0L, mock.intReturningMethod(12));
         assertEquals(0.0F, mock.floatReturningMethod(12), 0.0F);
         assertEquals(0.0D, mock.doubleReturningMethod(12), 0.0D);
-        assertEquals('\u0000', mock.charReturningMethod(12));
+        assertEquals((char) 0, mock.charReturningMethod(12));
         assertEquals(false, mock.booleanReturningMethod(12));
         assertEquals(null, mock.objectReturningMethod(12));
     }

File: test/org/mockitousage/AnnotationsTest.java
Patch:
@@ -22,6 +22,7 @@ public class AnnotationsTest extends TestBase {
 
     @Mock List list;
     @Mock final Map map = new HashMap();
+    //TODO add initMocks that allows to send own annotation/own implementation of creation logic
     
     @Before
     public void setup() {

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -40,6 +40,7 @@
 import org.mockitousage.binding.BridgeMethodPuzzleTest;
 import org.mockitousage.binding.OverloadingPuzzleTest;
 import org.mockitousage.examples.configure.ConfiguringDefaultReturnValuesForSelectedMocksTest;
+import org.mockitousage.examples.configure.ConfiguringMocksToReturnFakesTest;
 import org.mockitousage.examples.configure.ConfiguringDefaultReturnValuesTest;
 import org.mockitousage.examples.use.ExampleTest;
 import org.mockitousage.matchers.ComparableMatchersTest;
@@ -76,6 +77,7 @@ public void run() {
             Result result = JUnitCore.runClasses(
                     ConfiguringDefaultReturnValuesForSelectedMocksTest.class,
                     ConfiguringDefaultReturnValuesTest.class,
+                    ConfiguringMocksToReturnFakesTest.class,
                     EqualsTest.class,
                     ListUtilTest.class,
                     MockingProgressImplTest.class,
@@ -180,7 +182,7 @@ public static boolean runInMultipleThreads(int numberOfThreads) throws Exception
     }
     
     public static void main(String[] args) throws Exception {
-        int numberOfThreads = 100; 
+        int numberOfThreads = 10; 
         long before = System.currentTimeMillis();
         runInMultipleThreads(numberOfThreads);
         long after = System.currentTimeMillis();

File: test/org/mockitousage/examples/use/ArticleManager.java
Patch:
@@ -15,7 +15,7 @@ public ArticleManager(ArticleCalculator calculator, ArticleDatabase database) {
         this.calculator = calculator;
         this.database = database;
     }
-    
+   
     public void updateArticleCounters(String newspaper) {
         int articles = calculator.countArticles(newspaper);
         int polishArticles = calculator.countArticlesInPolish(newspaper);

File: test/org/mockitousage/examples/use/ExampleTest.java
Patch:
@@ -10,10 +10,13 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.mockito.InOrder;
 import org.mockito.TestBase;
 import org.mockito.MockitoAnnotations.Mock;
+import org.mockitousage.examples.junitrunner.MockitoRunner;
 
+@RunWith(MockitoRunner.class)
 public class ExampleTest extends TestBase {
     
     @Mock private ArticleCalculator mockCalculator;

File: src/org/mockito/configuration/DefaultReturnValues.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.internal.stubbing;
+package org.mockito.configuration;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -15,7 +15,6 @@
 import java.util.TreeMap;
 import java.util.TreeSet;
 
-import org.mockito.ReturnValues;
 import org.mockito.internal.creation.MockNamer;
 import org.mockito.internal.invocation.Invocation;
 

File: src/org/mockito/configuration/MockitoConfiguration.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito;
+package org.mockito.configuration;
 
-import org.mockito.internal.stubbing.DefaultReturnValues;
 
 public class MockitoConfiguration {
     

File: src/org/mockito/configuration/ReturnValues.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito;
+package org.mockito.configuration;
 
 import org.mockito.internal.invocation.Invocation;
 

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -10,7 +10,7 @@
 
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.mockito.MockitoConfiguration;
+import org.mockito.configuration.MockitoConfiguration;
 import org.mockito.internal.creation.MockAwareInterceptor;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;

File: src/org/mockito/internal/stubbing/Stubber.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.LinkedList;
 
-import org.mockito.MockitoConfiguration;
+import org.mockito.configuration.MockitoConfiguration;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.StackTraceFilter;
 import org.mockito.internal.invocation.Invocation;

File: test/org/mockito/configuration/DefaultReturnValuesTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.internal.stubbing;
+package org.mockito.configuration;
 
 import static org.junit.Assert.*;
 
@@ -23,6 +23,7 @@
 
 import org.junit.Test;
 import org.mockito.TestBase;
+import org.mockito.configuration.DefaultReturnValues;
 
 public class DefaultReturnValuesTest extends TestBase {
     

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockito.MockUtilTest;
 import org.mockito.MockitoTest;
 import org.mockito.TestBase;
+import org.mockito.configuration.DefaultReturnValuesTest;
 import org.mockito.exceptions.ReporterTest;
 import org.mockito.exceptions.base.MockitoAssertionErrorTest;
 import org.mockito.exceptions.base.MockitoExceptionTest;
@@ -27,7 +28,6 @@
 import org.mockito.internal.matchers.EqualsTest;
 import org.mockito.internal.progress.MockingProgressImplTest;
 import org.mockito.internal.progress.VerificationModeImplTest;
-import org.mockito.internal.stubbing.DefaultReturnValuesTest;
 import org.mockito.internal.stubbing.ResultTest;
 import org.mockito.internal.stubbing.StubberTest;
 import org.mockito.internal.util.ListUtilTest;

File: test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java
Patch:
@@ -11,11 +11,11 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.MockitoConfiguration;
-import org.mockito.ReturnValues;
 import org.mockito.TestBase;
+import org.mockito.configuration.DefaultReturnValues;
+import org.mockito.configuration.MockitoConfiguration;
+import org.mockito.configuration.ReturnValues;
 import org.mockito.internal.invocation.Invocation;
-import org.mockito.internal.stubbing.DefaultReturnValues;
 
 public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {
     

File: test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesTest.java
Patch:
@@ -9,11 +9,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.MockitoConfiguration;
-import org.mockito.ReturnValues;
 import org.mockito.TestBase;
+import org.mockito.configuration.DefaultReturnValues;
+import org.mockito.configuration.MockitoConfiguration;
+import org.mockito.configuration.ReturnValues;
 import org.mockito.internal.invocation.Invocation;
-import org.mockito.internal.stubbing.DefaultReturnValues;
 
 public class ConfiguringDefaultReturnValuesTest extends TestBase {
     

File: test/org/mockitousage/examples/configure/ConfiguringDefaultReturnValuesForSelectedMocksTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.stubbing.DefaultReturnValues;
 
-public class MoreConfiguringDefaultReturnValuesTest extends TestBase {
+public class ConfiguringDefaultReturnValuesForSelectedMocksTest extends TestBase {
     
     private MyDefaultReturnValues myDefaultReturnValues;
 

File: src/org/mockito/AdditionalMatchers.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.internal.matchers.LessOrEqual;
 import org.mockito.internal.matchers.LessThan;
 import org.mockito.internal.progress.LastArguments;
-import org.mockito.internal.progress.ReturnValues;
+import org.mockito.internal.progress.EmptyReturnValues;
 
 /**
  * See {@link Matchers} for general info about matchers.
@@ -982,7 +982,7 @@ public static float eq(float value, float delta) {
         return reportMatcher(new EqualsWithDelta(value, delta)).returnZero();
     }
     
-    private static ReturnValues reportMatcher(ArgumentMatcher<?> matcher) {
+    private static EmptyReturnValues reportMatcher(ArgumentMatcher<?> matcher) {
         return LastArguments.instance().reportMatcher(matcher);
     }
 }
\ No newline at end of file

File: src/org/mockito/Matchers.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.internal.matchers.StartsWith;
 import org.mockito.internal.matchers.apachecommons.ReflectionEquals;
 import org.mockito.internal.progress.LastArguments;
-import org.mockito.internal.progress.ReturnValues;
+import org.mockito.internal.progress.EmptyReturnValues;
 
 /**
  * Allow flexible verification or stubbing. See also {@link AdditionalMatchers}.
@@ -545,7 +545,7 @@ public static double doubleThat(Matcher<Double> matcher) {
         return reportMatcher(matcher).returnZero();
     }
 
-    private static ReturnValues reportMatcher(Matcher<?> matcher) {
+    private static EmptyReturnValues reportMatcher(Matcher<?> matcher) {
         return LastArguments.instance().reportMatcher(matcher);
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/progress/EmptyReturnValues.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal.progress;
 
-public class ReturnValues {
+public class EmptyReturnValues {
 
     public byte returnZero() {
         return 0;

File: test/org/mockito/TestBase.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito;
 
-import static org.junit.Assert.*;
+import junit.framework.Assert;
 
 import org.hamcrest.Matcher;
 import org.junit.Before;
@@ -14,7 +14,7 @@
  * the easiest way to make sure that tests clean up invalid state is to require
  * valid state for all tests.
  */
-public class TestBase {
+public class TestBase extends Assert {
 
     @Before
     public void init() {

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.mockito.internal.verification.VerifyingRecorderTest;
 import org.mockitousage.binding.BridgeMethodPuzzleTest;
 import org.mockitousage.binding.OverloadingPuzzleTest;
-import org.mockitousage.examples.use.MockitoSampleTest;
+import org.mockitousage.examples.use.ExampleTest;
 import org.mockitousage.matchers.ComparableMatchersTest;
 import org.mockitousage.matchers.CustomMatchersTest;
 import org.mockitousage.matchers.InvalidUseOfMatchersTest;
@@ -131,7 +131,7 @@ public void run() {
                     InvalidStateDetectionTest.class,
                     ReplacingObjectMethodsTest.class,
                     StackTrackeChangingTest.class,
-                    MockitoSampleTest.class,
+                    ExampleTest.class,
                     PointingStackTraceToActualInvocationTest.class,
                     PointingStackTraceToActualInvocationChunkTest.class
                 );

File: test/org/mockitousage/examples/use/ExampleTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.TestBase;
 import org.mockito.MockitoAnnotations.Mock;
 
-public class MockitoSampleTest extends TestBase {
+public class ExampleTest extends TestBase {
     
     @Mock private ArticleCalculator mockCalculator;
     @Mock private ArticleDatabase mockDatabase;

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -67,7 +67,7 @@ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy
         
         if (verificationMode != null) {
             verifyingRecorder.verify(invocationMatcher, verificationMode);
-            return MockitoConfiguration.emptyValues().valueFor(invocationMatcher.getInvocation());
+            return MockitoConfiguration.defaultReturnValues().valueFor(invocationMatcher.getInvocation());
         }
         
         stubber.setInvocationForPotentialStubbing(invocationMatcher);

File: src/org/mockito/internal/stubbing/Stubber.java
Patch:
@@ -52,7 +52,7 @@ public Object resultFor(Invocation invocation) throws Throwable {
                 return s.answer();
             }
         }
-        return MockitoConfiguration.emptyValues().valueFor(invocation);
+        return MockitoConfiguration.defaultReturnValues().valueFor(invocation);
     }
 
     public void addThrowableForVoidMethod(Throwable throwable) {

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.mockito.internal.matchers.EqualsTest;
 import org.mockito.internal.progress.MockingProgressImplTest;
 import org.mockito.internal.progress.VerificationModeImplTest;
-import org.mockito.internal.stubbing.EmptyReturnValuesTest;
+import org.mockito.internal.stubbing.DefaultReturnValuesTest;
 import org.mockito.internal.stubbing.ResultTest;
 import org.mockito.internal.stubbing.StubberTest;
 import org.mockito.internal.util.ListUtilTest;
@@ -80,7 +80,7 @@ public void run() {
                     VerificationModeImplTest.class,
                     MockHandlerTest.class,
                     AllInvocationsFinderTest.class,
-                    EmptyReturnValuesTest.class,
+                    DefaultReturnValuesTest.class,
                     StubberTest.class,
                     ResultTest.class,
                     NumberOfInvocationsVerifierTest.class,

File: test/org/mockitousage/InvalidStateDetectionTest.java
Patch:
@@ -180,7 +180,7 @@ public void detect(IMethods mock) {
     
     private static class OnStub implements DetectsInvalidState {
         public void detect(IMethods mock) {
-            stub(mock.toString());
+            stub(mock);
         }
     }
     

File: test/org/mockitousage/matchers/CustomMatchersTest.java
Patch:
@@ -129,7 +129,7 @@ public void shouldCustomMatcherPrintDescriptionBasedOnName() {
             verify(mock).simpleMethod(containsTest());
             fail();
         } catch (ArgumentsAreDifferent e) {
-            assertThat(e, messageContains("simpleMethod(<String that contains xxx>);"));
+            assertThat(e, messageContains("simpleMethod(\n    <String that contains xxx>\n);"));
         }
     }
 
@@ -155,7 +155,7 @@ public void shouldAnonymousCustomMatcherPrintDefaultDescription() {
                 }}));
             fail();
         } catch (ArgumentsAreDifferent e) {
-            assertThat(e, messageContains("simpleMethod(<custom argument matcher>);"));
+            assertThat(e, messageContains("simpleMethod(\n    <custom argument matcher>\n);"));
             assertThat(e, causeMessageContains("foo"));
         }
     }

File: src/org/mockito/Decamelizer.java
Patch:
@@ -19,10 +19,10 @@ public static String decamelizeMatcher(String className) {
         String decamelized = decamelizeClassName(className);
         
         if (decamelized.length() == 0) {
-            return className;
+            return "<" + className + ">";
         }
         
-        return decamelized.toString();
+        return "<" + decamelized + ">";
     }
 
     private static String decamelizeClassName(String className) {

File: test/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -63,8 +63,8 @@ public void shouldToStringWithMatchers() throws Exception {
         Matcher mTwo = new Equals('x');
         InvocationMatcher equals = new InvocationMatcher(new InvocationBuilder().toInvocation(), asList(mTwo));
 
-        assertEquals("Object.simpleMethod(notNull())", notNull.toString());
-        assertEquals("Object.simpleMethod('x')", equals.toString());
+        assertContains("Object.simpleMethod(notNull())", notNull.toString());
+        assertContains("Object.simpleMethod('x')", equals.toString());
     }
     
     @Test

File: test/org/mockitousage/matchers/HamcrestMatchersTest.java
Patch:
@@ -5,9 +5,9 @@
 package org.mockitousage.matchers;
 
 import static org.junit.Assert.*;
-import static org.mockito.util.ExtraMatchers.*;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
+import static org.mockito.util.ExtraMatchers.*;
 
 import java.util.Arrays;
 

File: test/org/mockitousage/sample/MockitoSampleTest.java
Patch:
@@ -19,7 +19,6 @@ public class MockitoSampleTest extends TestBase {
     @Mock private ArticleCalculator mockCalculator;
     @Mock private ArticleDatabase mockDatabase;
     
-    
     private ArticleManager articleManager;
     
     @Before

File: test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldVerifyActualNumberOfInvocationsSmallerThanWanted() throws Exce
         } catch (TooLittleActualInvocations e) {
             String expected =
                 "\n" +
-                "LinkedList.clear()" +
+                "LinkedList.clear();" +
                 "\n" +
                 "Wanted 100 times but was 3";
             assertEquals(expected, e.getMessage());
@@ -69,7 +69,7 @@ public void shouldVerifyActualNumberOfInvocationsLargerThanWanted() throws Excep
         } catch (TooManyActualInvocations e) {
             String expected =
                 "\n" +
-                "LinkedList.clear()" +
+                "LinkedList.clear();" +
                 "\n" +
                 "Wanted 1 time but was 4";
             assertEquals(expected, e.getMessage());

File: src/org/mockito/Matchers.java
Patch:
@@ -182,8 +182,9 @@ public static short anyShort() {
      * 
      * @return <code>null</code>.
      */
-    public static <T> T anyObject() {
-        return reportMatcher(Any.ANY).returnNull();
+    @SuppressWarnings("unchecked")
+	public static <T> T anyObject() {
+        return (T) reportMatcher(Any.ANY).returnNull();
     }
 
     /**

File: test/org/mockito/TestBase.java
Patch:
@@ -50,7 +50,7 @@ public static <T> Assertor<Throwable> causeMessageContains(final String text) {
         	public void assertValue(Throwable value) {
         		Throwable cause = ((Throwable) value).getCause();
         		assertNotNull("Exception cause should not be null", cause);
-        		assertTrue("\nException message >>>" + value.getMessage() + "\n>>> should contain: " + text,
+        		assertTrue("\nException message >>>" + cause.getMessage() + "\n>>> should contain: " + text,
         				cause.getMessage().contains(text));
         	}
         };

File: test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -284,7 +284,6 @@ public void shouldSayNeverWantedButInvoked() throws Exception {
         }
     }
     
-    @Ignore
     @Test
     public void shouldShowRightActualMethod() throws Exception {
         mock.simpleMethod(9191);

File: test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.mockito.exceptions.cause.TooLittleInvocations;
 import org.mockito.exceptions.cause.UndesiredInvocation;
 import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
@@ -98,10 +99,10 @@ public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {
         try {
             inOrder.verify(one).simpleMethod(999);
             fail();
-        } catch (WantedButNotInvoked e) {
+        } catch (ArgumentsAreDifferentException e) {
             String expected = 
                     "\n" +
-                    "Invocation differs from actual:" +
+                    "Arguments are different!" +
                     "\n" +
                     "IMethods.simpleMethod(999)"; 
             

File: test/org/mockitousage/StackTrackeChangingTest.java
Patch:
@@ -34,6 +34,7 @@ public void shouldShowActualInvocationAsExceptionCause() {
             verifySimpleMethodOnAMock();
             fail();
         } catch (ArgumentsAreDifferentException e) {
+            //TODO hasOnlyThoseMethods stuff
             assertThat(e, hasMethodInStackTraceAt(0, "verifySimpleMethodOnAMock"));
             assertThat(e, hasMethodInStackTraceAt(1, "shouldShowActualInvocationAsExceptionCause"));
             assertThat(e.getCause(), hasMethodInStackTraceAt(0, "simpleMethodOnAMock"));

File: test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -259,7 +259,7 @@ public void shouldPrintMethodWhenMissingInvocationWithMatcher() {
 
     @Test
     public void shouldPrintNullArguments() throws Exception {
-        mock.simpleMethod(null, null);
+        mock.simpleMethod(null, (Integer) null);
         try {
             verify(mock).simpleMethod("test");
             fail();

File: src/org/mockito/internal/invocation/InvocationsFinder.java
Patch:
@@ -48,14 +48,16 @@ private List<Invocation> getFirstMatchingChunk(InvocationMatcher wanted, List<In
     
     public Invocation findSimilarInvocation(List<Invocation> invocations, InvocationMatcher wanted, VerificationModeImpl mode) {
         for (Invocation invocation : invocations) {
+            //TODO shit code - refactor to InvocationMatcher wanted.isSimilar(invocation) and add test for overloading check, make it also efficient
             String wantedMethodName = wanted.getMethod().getName();
             String currentMethodName = invocation.getMethod().getName();
             
             boolean methodNameEquals = wantedMethodName.equals(currentMethodName);
             boolean isUnverified = !invocation.isVerified();
             boolean mockIsTheSame = wanted.getInvocation().getMock() == invocation.getMock();
+            boolean isOverloaded = wanted.isOverloadedVersionOf(invocation);
             
-            if (methodNameEquals && isUnverified && mockIsTheSame ) {
+            if (methodNameEquals && isUnverified && mockIsTheSame && !isOverloaded) {
                 return invocation;
             }
         }

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.mockito.internal.verification.NumberOfInvocationsVerifierTest;
 import org.mockito.internal.verification.VerifyingRecorderTest;
 import org.mockitousage.binding.BridgeMethodPuzzleTest;
-import org.mockitousage.binding.IncorectBindingPuzzleFixedTest;
+import org.mockitousage.binding.OverloadingPuzzleTest;
 import org.mockitousage.matchers.ComparableMatchersTest;
 import org.mockitousage.matchers.CustomMatchersTest;
 import org.mockitousage.matchers.InvalidUseOfMatchersTest;
@@ -104,7 +104,7 @@ public void run() {
                     MockitoExceptionTest.class,
                     StackTraceFilteringTest.class,
                     BridgeMethodPuzzleTest.class,
-                    IncorectBindingPuzzleFixedTest.class,
+                    OverloadingPuzzleTest.class,
                     InvalidUsageTest.class,
                     UsingVarargsTest.class,
                     CustomMatchersTest.class,

File: src/org/mockito/exceptions/verification/ArgumentsAreDifferentException.java
Patch:
@@ -6,11 +6,11 @@
 
 import org.mockito.exceptions.base.MockitoAssertionError;
 
-public class InvocationDiffersFromActual extends MockitoAssertionError {
+public class ArgumentsAreDifferentException extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public InvocationDiffersFromActual(String message, Throwable cause) {
+    public ArgumentsAreDifferentException(String message, Throwable cause) {
         super(message, cause);
     }
 }

File: src/org/mockito/internal/verification/MissingInvocationVerifier.java
Patch:
@@ -43,7 +43,8 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
     private void reportMissingInvocationError(InvocationMatcher wanted, Invocation similar) {
         if (similar != null) {
             InvocationsPrinter printer = new InvocationsPrinter(wanted, similar);
-            reporter.wantedDiffersFromActual(printer.getWanted(), printer.getActual(), similar.getStackTrace());
+            //TODO smelly
+            reporter.argumentsAreDifferent(printer.getWanted(), printer.getWantedArgs(), printer.getActualArgs(), similar.getStackTrace());
         } else {
             reporter.wantedButNotInvoked(wanted);
         }

File: test/org/mockito/util/ExtraMatchers.java
Patch:
@@ -89,6 +89,7 @@ public void describeTo(Description desc) {
         };
     }
     
+    //TODO can't you use matchers from hamcrest?
     public static <T> Matcher<Collection> collectionHas(final T ... elements) {
         return new BaseMatcher<Collection>() {
 

File: test/org/mockitousage/IMethods.java
Patch:
@@ -61,6 +61,8 @@ public interface IMethods {
     
     String differentMethod();
     
+    String differentMethod(String argument);
+    
     String otherMethod();
 
     String simpleMethod(String argument);

File: test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.TestBase;
-import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 
@@ -54,7 +54,7 @@ public void shouldPointToActualInvocationOnVerificationError() {
         try {
             verify(mock).simpleMethod(999);
             fail();
-        } catch (InvocationDiffersFromActual e) {
+        } catch (ArgumentsAreDifferentException e) {
             assertThat(e.getCause(), hasFirstMethodInStackTrace("firstChunk"));
         }
     }
@@ -65,7 +65,7 @@ public void shouldPointToUnverifiedActualInvocationOnVerificationError() {
         try {
             verify(mock, atLeastOnce()).simpleMethod(999);
             fail();
-        } catch (InvocationDiffersFromActual e) {
+        } catch (ArgumentsAreDifferentException e) {
             assertThat(e.getCause(), hasFirstMethodInStackTrace("thirdChunk"));
         }
     }   

File: test/org/mockitousage/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.TestBase;
-import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 import org.mockito.exceptions.verification.NeverWantedButInvoked;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 
@@ -50,7 +50,7 @@ public void shouldPointToActualInvocationOnVerificationError() {
         try {
             verify(mock).simpleMethod(999);
             fail();
-        } catch (InvocationDiffersFromActual e) {
+        } catch (ArgumentsAreDifferentException e) {
             assertThat(e.getCause(), hasFirstMethodInStackTrace("first"));
         }
     }
@@ -61,7 +61,7 @@ public void shouldPointToUnverifiedActualInvocationOnVerificationError() {
         try {
             verify(mock, atLeastOnce()).simpleMethod(999);
             fail();
-        } catch (InvocationDiffersFromActual e) {
+        } catch (ArgumentsAreDifferentException e) {
             assertThat(e.getCause(), hasFirstMethodInStackTrace("third"));
         }
     }   

File: test/org/mockitousage/StackTrackeChangingTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.TestBase;
-import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 
 public class StackTrackeChangingTest extends TestBase {
     
@@ -33,7 +33,7 @@ public void shouldShowActualInvocationAsExceptionCause() {
         try {
             verifySimpleMethodOnAMock();
             fail();
-        } catch (InvocationDiffersFromActual e) {
+        } catch (ArgumentsAreDifferentException e) {
             assertThat(e, hasMethodInStackTraceAt(0, "verifySimpleMethodOnAMock"));
             assertThat(e, hasMethodInStackTraceAt(1, "shouldShowActualInvocationAsExceptionCause"));
             assertThat(e.getCause(), hasMethodInStackTraceAt(0, "simpleMethodOnAMock"));

File: test/org/mockitousage/UsingVarargsTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockito.Mockito;
 import org.mockito.TestBase;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 
 public class UsingVarargsTest extends TestBase {
 
@@ -89,7 +89,7 @@ public void shouldVerifyStringVarargs() {
         try {
             verify(mock).withStringVarargs(2, "1", "2", "79", "4");
             fail();
-        } catch (InvocationDiffersFromActual e) {}
+        } catch (ArgumentsAreDifferentException e) {}
     }
 
     @Test
@@ -117,6 +117,6 @@ public void shouldVerifyBooleanVarargs() {
         try {
             verify(mock).withBooleanVarargs(3, true, true, true, true);
             fail();
-        } catch (InvocationDiffersFromActual e) {}
+        } catch (ArgumentsAreDifferentException e) {}
     }
 }
\ No newline at end of file

File: test/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.TestBase;
-import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockitousage.IMethods;
 
@@ -77,12 +77,12 @@ public void shouldStubbingWithThrowableFailVerification() {
         try {
             verify(mock).simpleMethod("one");
             fail();
-        } catch (InvocationDiffersFromActual e) {}
+        } catch (ArgumentsAreDifferentException e) {}
         
         try {
             verify(mock).simpleMethod("two");
             fail();
-        } catch (InvocationDiffersFromActual e) {}
+        } catch (ArgumentsAreDifferentException e) {}
         
         try {
             verifyNoMoreInteractions(mock);

File: test/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -15,7 +15,7 @@
 import org.mockito.TestBase;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
-import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 
 @SuppressWarnings("unchecked")
@@ -55,7 +55,7 @@ public void shouldFailVerificationOnMethodArgument() throws Exception {
         try {
             verify(mock).add("bar");
             fail();
-        } catch (InvocationDiffersFromActual expected) {}
+        } catch (ArgumentsAreDifferentException expected) {}
     }
 
     @Test

File: src/org/mockito/exceptions/base/StackTraceFilter.java
Patch:
@@ -7,7 +7,6 @@
 import java.util.Arrays;
 import java.util.List;
 
-
 public class StackTraceFilter {
     
     public boolean isLastStackElementToRemove(StackTraceElement e) {
@@ -28,7 +27,7 @@ public void filterStackTrace(HasStackTrace hasStackTrace) {
             i++;
         }
         
-        List<StackTraceElement> filtered = unfilteredStackTrace.subList(lastToRemove+1, unfilteredStackTrace.size() - 1);
+        List<StackTraceElement> filtered = unfilteredStackTrace.subList(lastToRemove + 1, unfilteredStackTrace.size());
         hasStackTrace.setStackTrace(filtered.toArray(new StackTraceElement[]{}));
     }
 }
\ No newline at end of file

File: test/org/mockitousage/DescriptiveMessagesOnMisuseTest.java
Patch:
@@ -22,7 +22,7 @@ public class DescriptiveMessagesOnMisuseTest extends TestBase {
     @Mock private IMethods mock;
 
     @SuppressWarnings("all")
-    @Ignore
+    @Ignore("just for tuning up the error messages")
     @Test
     public void tryDescriptiveMessagesOnMisuse() {
         verifyNoMoreInteractions();

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -14,7 +14,7 @@
  * ArgumentMatcher is an hamcrest {@link Matcher} with predefined describeTo() method for convenience.
  * <p>
  * See {@link Matchers}
- * 
+ * <p>
  * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}, e.g:
  * 
  * <pre>

File: src/org/mockito/Matchers.java
Patch:
@@ -46,7 +46,7 @@
  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.
  * </pre>
  * 
- * <h2>Custom Matchers</h2>
+ * <h1>Custom Matchers</h1>
  * 
  * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.
  * <p>

File: src/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifier.java
Patch:
@@ -35,7 +35,7 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
         List<Invocation> chunk = finder.findMatchingChunk(invocations, wanted, mode);
         
         boolean noMatchFound = chunk.size() == 0;
-        if (mode.wantedCountIsZero() && noMatchFound) {
+        if (mode.neverWanted() && noMatchFound) {
             return;
         }
         

File: src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java
Patch:
@@ -38,6 +38,9 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
         if (mode.tooLittleActualInvocations(actualCount)) {
             HasStackTrace lastInvocation = finder.getLastStackTrace(actualInvocations);
             reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted, lastInvocation);
+        } else if (mode.neverWantedButInvoked(actualCount)) {
+            HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();
+            reporter.neverWantedButInvoked(wanted, firstUndesired); 
         } else if (mode.tooManyActualInvocations(actualCount)) {
             HasStackTrace firstUndesired = actualInvocations.get(mode.wantedCount()).getStackTrace();
             reporter.tooManyActualInvocations(mode.wantedCount(), actualCount, wanted, firstUndesired);

File: test/org/mockitousage/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -13,8 +13,8 @@
 import org.mockito.Mockito;
 import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
+import org.mockito.exceptions.verification.NeverWantedButInvoked;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
-import org.mockito.exceptions.verification.TooManyActualInvocations;
 
 public class PointingStackTraceToActualInvocationTest extends TestBase {
     
@@ -82,7 +82,7 @@ public void shouldPointToTooManyInvocationsChunkOnError() {
         try {
             verify(mock, times(0)).simpleMethod(1);
             fail();
-        } catch (TooManyActualInvocations e) {
+        } catch (NeverWantedButInvoked e) {
             assertThat(e.getCause(), hasFirstMethodInStackTrace("first"));
         }
     }   

File: test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java
Patch:
@@ -11,8 +11,8 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.TestBase;
+import org.mockito.exceptions.verification.NeverWantedButInvoked;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
-import org.mockito.exceptions.verification.TooManyActualInvocations;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
@@ -195,7 +195,7 @@ public void shouldAllowTimesZeroButOnlyInOrder() {
         try {
             verify(mockOne, times(0)).simpleMethod(1);
             fail();
-        } catch (TooManyActualInvocations e) {}
+        } catch (NeverWantedButInvoked e) {}
     }
     
     @Test

File: src/org/mockito/ArgumentMatcher.java
Patch:
@@ -15,8 +15,7 @@
  * <p>
  * See {@link Matchers}
  * 
- * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods 
- * and pass an instance of hamcrest {@link Matcher}, e.g:
+ * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}, e.g:
  * 
  * <pre>
  * class IsListOfTwoElements extends ArgumentMatcher&lt;List&gt; {

File: src/org/mockito/Matchers.java
Patch:
@@ -46,10 +46,9 @@
  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.
  * </pre>
  * 
- * <h3>Custom Matchers</h3>
+ * <h2>Custom Matchers</h2>
  * 
- * Use one of the {@link Matchers#argThat}, {@link Matchers#intThat}, etc. methods 
- * and pass an instance of hamcrest {@link Matcher}.
+ * Use {@link Matchers#argThat} method and pass an instance of hamcrest {@link Matcher}.
  * <p>
  * You can use {@link ArgumentMatcher} (it's a hamcrest matcher with predefined describeTo() method for convenience)  
  * for creating your own matchers, e.g:

File: src/org/mockito/Mockito.java
Patch:
@@ -103,7 +103,7 @@
  * 
  * <p>
  * Argument matchers allow flexible verification or stubbing. 
- * See all {@link Matchers} including examples of custom matchers. 
+ * See all {@link Matchers} including examples of <b>custom matchers / hamcrest matchers</b>. 
  * <p>
  * <b>Warning:</b>
  * <p>

File: src/org/mockito/internal/progress/VerificationMode.java
Patch:
@@ -14,6 +14,8 @@
  *   verify(mock, atLeastOnce()).someMethod("should be called at least once");
  * </pre>
  * 
+ * <b>times(1) is the default</b> and can be omitted
+ * <p>
  * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}
  */
 public interface VerificationMode {}
\ No newline at end of file

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -144,9 +144,11 @@ public void invalidUseOfMatchers(int expectedMatchersCount, int recordedMatchers
                 "Invalid use of matchers! - see javadoc for Matchers class.",
                 expectedMatchersCount + " matchers expected, " + recordedMatchersCount + " recorded.",
                 "Typically this exception occurs when matchers are combined with raw values:",        
+                "    //incorrect:",
                 "    verify(mock).someMethod(anyObject(), \"raw String\");",
                 "When using matchers, all arguments have to be provided by matchers.",
                 "For example:",
+                "    //correct:",
                 "    verify(mock).someMethod(anyObject(), eq(\"String by matcher\"));"
         ));
     }    

File: test/org/mockito/internal/stubbing/EmptyReturnValuesTest.java
Patch:
@@ -4,8 +4,7 @@
  */
 package org.mockito.internal.stubbing;
 
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: src/org/mockito/internal/invocation/GlobalInvocationsFinder.java
Patch:
@@ -12,7 +12,7 @@ public interface GlobalInvocationsFinder {
      * gets all invocations from mocks. Invocations are ordered earlier first. 
      * 
      * @param mocks
-     * @return
+     * @return invocations
      */
     List<Invocation> getAllInvocations(List<? extends Object> mocks);
 }
\ No newline at end of file

File: src/org/mockito/Mockito.java
Patch:
@@ -98,7 +98,7 @@
  * </pre>
  * 
  * <p>
- * Argument matchers allow less constrained verification or stubbing. 
+ * Argument matchers allow flexible verification or stubbing. 
  * See all {@link Matchers} including examples of custom matchers. 
  * <p>
  * <b>Warning:</b>

File: test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -92,7 +92,7 @@ public void shouldPrintVerificationInOrderErrorAndShowWantedOnly() {
         }
     } 
     
-    @Ignore("TODO")
+    @Ignore("i don't know how to implement it nicely... yet :)")
     @Test
     public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual() {
         try {

File: src/org/mockito/exceptions/misusing/NotAMockException.java
Patch:
@@ -10,7 +10,7 @@ public class NotAMockException extends MockitoException {
 
     private static final long serialVersionUID = 1L;
 
-    public NotAMockException(Object object) {
-        super("Not a mock: " + object.getClass().getName());
+    public NotAMockException(String message) {
+        super(message);
     }
 }

File: test/org/mockito/MockUtilTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.NotAMockException;
 
-public class MockUtilTest extends RequiresValidState {
+public class MockUtilTest extends TestBase {
 
     @SuppressWarnings("unchecked")
     @Test 

File: test/org/mockito/MockitoTest.java
Patch:
@@ -13,7 +13,7 @@
 import org.mockito.exceptions.misusing.NotAMockException;
 
 @SuppressWarnings("unchecked")
-public class MockitoTest extends RequiresValidState {
+public class MockitoTest extends TestBase {
 
     //TODO I want to have ruby script that will collect all java code from examples in javadoc/documentation
     // and create a test case that I can manually fix and run and make sure examples are valid.

File: test/org/mockito/TestBase.java
Patch:
@@ -10,10 +10,11 @@
  * the easiest way to make sure that tests clean up invalid state is to require
  * valid state for all tests.
  */
-public class RequiresValidState {
+public class TestBase {
 
     @Before
-    public void requiresValidState() {
+    public void init() {
         Mockito.MOCKING_PROGRESS.validateState();
+        MockitoAnnotations.initMocks(this);
     }
 }
\ No newline at end of file

File: test/org/mockito/exceptions/ReporterTest.java
Patch:
@@ -5,11 +5,11 @@
 package org.mockito.exceptions;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.internal.invocation.InvocationBuilder;
 
-public class ReporterTest extends RequiresValidState {
+public class ReporterTest extends TestBase {
 
     @Test(expected=TooLittleActualInvocations.class)
     public void shouldLetPassingNullLastActualStackTrace() throws Exception {

File: test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -8,9 +8,9 @@
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
-public class MockitoAssertionErrorTest extends RequiresValidState {
+public class MockitoAssertionErrorTest extends TestBase {
 
     private void throwIt() {
         throw new MockitoAssertionError("boom");

File: test/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -8,9 +8,9 @@
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
-public class MockitoExceptionTest extends RequiresValidState {
+public class MockitoExceptionTest extends TestBase {
 
     private void throwIt() {
         throw new MockitoException("boom");

File: test/org/mockito/exceptions/base/StackTraceRemoverTest.java
Patch:
@@ -11,9 +11,9 @@
 import java.util.List;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
-public class StackTraceRemoverTest extends RequiresValidState {
+public class StackTraceRemoverTest extends TestBase {
 
     private StackTraceElement[] stackTrace;
     private List<StackTraceElement> causeStackTrace;

File: test/org/mockito/internal/AllInvocationsFinderTest.java
Patch:
@@ -12,11 +12,11 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.internal.invocation.Invocation;
 import org.mockitousage.IMethods;
 
-public class AllInvocationsFinderTest extends RequiresValidState {
+public class AllInvocationsFinderTest extends TestBase {
     
     private AllInvocationsFinder finder;
     private IMethods mockTwo;

File: test/org/mockito/internal/MockHandlerTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -17,7 +17,7 @@
 import org.mockito.internal.progress.VerificationModeImpl;
 
 @SuppressWarnings("unchecked")
-public class MockHandlerTest extends RequiresValidState {
+public class MockHandlerTest extends TestBase {
     
     @Test
     public void shouldRemoveVerificationModeEvenWhenInvalidMatchers() throws Throwable {

File: test/org/mockito/internal/creation/CglibTest.java
Patch:
@@ -16,12 +16,12 @@
 import net.sf.cglib.proxy.MethodProxy;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
 /**
  * This test case is used to make sure that the way cglib is used is providing the expected behavior.
  */
-public class CglibTest extends RequiresValidState {
+public class CglibTest extends TestBase {
 
     /**
      * Check that an interceptor is used by only one instance of a class

File: test/org/mockito/internal/creation/MockFactoryTest.java
Patch:
@@ -11,10 +11,10 @@
 import net.sf.cglib.proxy.Factory;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
 @SuppressWarnings("unchecked")
-public class MockFactoryTest extends RequiresValidState {
+public class MockFactoryTest extends TestBase {
 
     @Test
     public void shouldCreateMockFromInterface() throws Exception {

File: test/org/mockito/internal/invocation/InvocationMatcherTest.java
Patch:
@@ -12,13 +12,13 @@
 import java.util.Map;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.internal.matchers.Equals;
 import org.mockito.internal.matchers.ArgumentMatcher;
 import org.mockito.internal.matchers.NotNull;
 
 @SuppressWarnings("unchecked")
-public class InvocationMatcherTest extends RequiresValidState {
+public class InvocationMatcherTest extends TestBase {
 
     @Test(expected=IllegalArgumentException.class)
     public void shouldScreamWhenMatchersNull() throws Exception {

File: test/org/mockito/internal/invocation/InvocationTest.java
Patch:
@@ -15,11 +15,11 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
-public class InvocationTest extends RequiresValidState {
+public class InvocationTest extends TestBase {
 
     private Invocation invocation;
 

File: test/org/mockito/internal/invocation/InvocationsFinderTest.java
Patch:
@@ -15,13 +15,13 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.progress.VerificationModeBuilder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
 
-public class InvocationsFinderTest extends RequiresValidState {
+public class InvocationsFinderTest extends TestBase {
     
     private LinkedList<Invocation> invocations = new LinkedList<Invocation>();
     private Invocation simpleMethodInvocation;

File: test/org/mockito/internal/invocation/InvocationsPrinterTest.java
Patch:
@@ -9,9 +9,9 @@
 import java.lang.reflect.Method;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
-public class InvocationsPrinterTest extends RequiresValidState{
+public class InvocationsPrinterTest extends TestBase{
 
     @Test
     public void shouldPrintWantedAndActualInvocation() throws Exception {

File: test/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -9,10 +9,10 @@
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
 
-public class EqualsTest extends RequiresValidState {
+public class EqualsTest extends TestBase {
     
     @Test
     public void shouldBeEqual() {

File: test/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Arrays;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
 /**
  * @author <a href="mailto:sdowney@panix.com">Steve Downey</a>
@@ -38,7 +38,7 @@
  * @author Maarten Coene
  * @version $Id: EqualsBuilderTest.java 611543 2008-01-13 07:00:22Z bayard $
  */
-public class EqualsBuilderTest extends RequiresValidState {
+public class EqualsBuilderTest extends TestBase {
     
     @Test
     public void testname() throws Exception {

File: test/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -10,10 +10,10 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.base.MockitoException;
 
-public class MockingProgressImplTest extends RequiresValidState {
+public class MockingProgressImplTest extends TestBase {
 
     private MockingProgress mockingProgress;
 

File: test/org/mockito/internal/progress/VerificationModeImplTest.java
Patch:
@@ -15,10 +15,10 @@
 import static org.mockito.internal.progress.VerificationModeImpl.times;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.base.MockitoException;
 
-public class VerificationModeImplTest extends RequiresValidState {
+public class VerificationModeImplTest extends TestBase {
 
     @Test
     public void shouldKnowIfNumberOfInvocationsMatters() throws Exception {

File: test/org/mockito/internal/stubbing/EmptyReturnValuesTest.java
Patch:
@@ -23,9 +23,9 @@
 import java.util.TreeSet;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
-public class EmptyReturnValuesTest extends RequiresValidState {
+public class EmptyReturnValuesTest extends TestBase {
     
     @SuppressWarnings("unchecked")
     @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {

File: test/org/mockito/internal/stubbing/ResultTest.java
Patch:
@@ -13,11 +13,11 @@
 import java.util.Arrays;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.exceptions.base.StackTraceFilter;
 
-public class ResultTest extends RequiresValidState {
+public class ResultTest extends TestBase {
 
     @Test
     public void shouldCreateReturnResult() throws Throwable {

File: test/org/mockito/internal/stubbing/StubberTest.java
Patch:
@@ -11,14 +11,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.MockingProgressImpl;
 
-public class StubberTest extends RequiresValidState{
+public class StubberTest extends TestBase{
 
     private Stubber stubber;
     private MockingProgressImpl state;

File: test/org/mockito/internal/util/ListUtilTest.java
Patch:
@@ -12,11 +12,11 @@
 import static org.junit.Assert.*;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.internal.util.ListUtil.Filter;
 
 @SuppressWarnings("unchecked")
-public class ListUtilTest extends RequiresValidState {
+public class ListUtilTest extends TestBase {
 
     @Test
     public void shouldFilterList() throws Exception {

File: test/org/mockito/internal/verification/MissingInvocationInOrderVerifierTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.Printable;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.HasStackTrace;
@@ -21,7 +21,7 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.VerificationModeBuilder;
 
-public class MissingInvocationInOrderVerifierTest extends RequiresValidState {
+public class MissingInvocationInOrderVerifierTest extends TestBase {
 
     private MissingInvocationInOrderVerifier verifier;
     private ReporterStub reporterStub;

File: test/org/mockito/internal/verification/MissingInvocationVerifierTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.Printable;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.HasStackTrace;
@@ -21,7 +21,7 @@
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.VerificationModeImpl;
 
-public class MissingInvocationVerifierTest extends RequiresValidState {
+public class MissingInvocationVerifierTest extends TestBase {
 
     private MissingInvocationVerifier verifier;
     

File: test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java
Patch:
@@ -11,15 +11,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.Printable;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
-public class NoMoreInvocationsVerifierTest extends RequiresValidState {
+public class NoMoreInvocationsVerifierTest extends TestBase {
 
     private NoMoreInvocationsVerifier verifier;
     private InvocationsFinderStub finder;

File: test/org/mockito/internal/verification/NumberOfInvocationsInOrderVerifierTest.java
Patch:
@@ -13,15 +13,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.VerificationModeBuilder;
 
-public class NumberOfInvocationsInOrderVerifierTest extends RequiresValidState {
+public class NumberOfInvocationsInOrderVerifierTest extends TestBase {
 
     private NumberOfInvocationsInOrderVerifier verifier;
     private Reporter reporter;

File: test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.Printable;
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.HasStackTrace;
@@ -22,7 +22,7 @@
 import org.mockito.internal.progress.VerificationModeBuilder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
-public class NumberOfInvocationsVerifierTest extends RequiresValidState {
+public class NumberOfInvocationsVerifierTest extends TestBase {
 
     private NumberOfInvocationsVerifier verifier;
     private ReporterStub reporterStub;

File: test/org/mockito/internal/verification/VerifyingRecorderTest.java
Patch:
@@ -12,15 +12,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.GlobalInvocationsFinder;
 import org.mockito.internal.progress.VerificationModeBuilder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
-public class VerifyingRecorderTest extends RequiresValidState {
+public class VerifyingRecorderTest extends TestBase {
     
     private VerifyingRecorder recorder;
     private VerifierStub verifierStub;

File: test/org/mockitousage/AnnotationsTest.java
Patch:
@@ -14,12 +14,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.MockitoAnnotations;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.MockitoAnnotations.Mock;
 import org.mockito.exceptions.base.MockitoException;
 
 @SuppressWarnings("unchecked")
-public class AnnotationsTest extends RequiresValidState {
+public class AnnotationsTest extends TestBase {
 
     @Mock List list;
     @Mock final Map map = new HashMap();

File: test/org/mockitousage/InvalidStateDetectionTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.StateResetter;
 import org.mockito.exceptions.misusing.UnfinishedStubbingException;
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
@@ -41,7 +41,7 @@
  *    -on stubVoid
  */
 @SuppressWarnings("unchecked")
-public class InvalidStateDetectionTest extends RequiresValidState {
+public class InvalidStateDetectionTest extends TestBase {
 
     private IMethods mock;
 

File: test/org/mockitousage/InvalidUsageTest.java
Patch:
@@ -9,14 +9,14 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.StateResetter;
 import org.mockito.InOrder;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 
 @SuppressWarnings("unchecked")
-public class InvalidUsageTest extends RequiresValidState {
+public class InvalidUsageTest extends TestBase {
 
     private IMethods mock;
     private IMethods mockTwo;

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.runner.notification.Failure;
 import org.mockito.MockUtilTest;
 import org.mockito.MockitoTest;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.ReporterTest;
 import org.mockito.exceptions.base.MockitoAssertionErrorTest;
 import org.mockito.exceptions.base.MockitoExceptionTest;
@@ -67,7 +67,7 @@
 import org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest;
 import org.mockitousage.verification.VerificationUsingMatchersTest;
 
-public class MultiThreadedTest extends RequiresValidState {
+public class MultiThreadedTest extends TestBase {
     
     private static class AllTestsRunner extends Thread {
         

File: test/org/mockitousage/PointingStackTraceToActualInvocationChunkInOrderTest.java
Patch:
@@ -13,11 +13,11 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 
 //TODO pmd rule so that all that starts with should have @Test annotation (or all XTest have some annotations on public methods)
-public class PointingStackTraceToActualInvocationChunkInOrderTest extends RequiresValidState {
+public class PointingStackTraceToActualInvocationChunkInOrderTest extends TestBase {
     
     private IMethods mock;
     private IMethods mockTwo;

File: test/org/mockitousage/PointingStackTraceToActualInvocationChunkTest.java
Patch:
@@ -11,12 +11,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 
-public class PointingStackTraceToActualInvocationChunkTest extends RequiresValidState {
+public class PointingStackTraceToActualInvocationChunkTest extends TestBase {
     
     private IMethods mock;
     private IMethods mockTwo;

File: test/org/mockitousage/PointingStackTraceToActualInvocationInOrderTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 
-public class PointingStackTraceToActualInvocationInOrderTest extends RequiresValidState {
+public class PointingStackTraceToActualInvocationInOrderTest extends TestBase {
     
     private IMethods mock;
     private IMethods mockTwo;

File: test/org/mockitousage/PointingStackTraceToActualInvocationTest.java
Patch:
@@ -11,12 +11,12 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 
-public class PointingStackTraceToActualInvocationTest extends RequiresValidState {
+public class PointingStackTraceToActualInvocationTest extends TestBase {
     
     private IMethods mock;
     private IMethods mockTwo;

File: test/org/mockitousage/ReflectionMatchersTest.java
Patch:
@@ -8,11 +8,11 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 
 @SuppressWarnings("all")
-public class ReflectionMatchersTest extends RequiresValidState {
+public class ReflectionMatchersTest extends TestBase {
 
     class Parent {
         private int parentField;

File: test/org/mockitousage/ReplacingObjectMethodsTest.java
Patch:
@@ -11,9 +11,9 @@
 
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
-public class ReplacingObjectMethodsTest extends RequiresValidState {
+public class ReplacingObjectMethodsTest extends TestBase {
 
     private interface DummyInterface {}
     private class DummyClass {}

File: test/org/mockitousage/StackTraceFilteringTest.java
Patch:
@@ -12,15 +12,15 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.StateResetter;
 import org.mockito.InOrder;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 
-public class StackTraceFilteringTest extends RequiresValidState {
+public class StackTraceFilteringTest extends TestBase {
     
     private IMethods mock;
 

File: test/org/mockitousage/StackTrackeChangingTest.java
Patch:
@@ -11,10 +11,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 
-public class StackTrackeChangingTest extends RequiresValidState {
+public class StackTrackeChangingTest extends TestBase {
     
     private IMethods mock;
 

File: test/org/mockitousage/UsingVarargsTest.java
Patch:
@@ -16,11 +16,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 
-public class UsingVarargsTest extends RequiresValidState {
+public class UsingVarargsTest extends TestBase {
 
     private interface IVarArgs {
         void withStringVarargs(int value, String... s);

File: test/org/mockitousage/binding/BridgeMethodPuzzleTest.java
Patch:
@@ -11,7 +11,7 @@
 import static org.mockito.util.ExtraMatchers.hasBridgeMethod;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
 /**
  * Bridge method is generated by compiler when erasure in parent class is
@@ -21,7 +21,7 @@
  * and overridding is ON.
  */
 @SuppressWarnings("unchecked")
-public class BridgeMethodPuzzleTest extends RequiresValidState {
+public class BridgeMethodPuzzleTest extends TestBase {
     
     private class Super<T> {
         public String say(T t) {

File: test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java
Patch:
@@ -12,12 +12,12 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockitousage.IMethods;
 
-public class IncorectBindingPuzzleFixedTest extends RequiresValidState {
+public class IncorectBindingPuzzleFixedTest extends TestBase {
 
     private Super mock;
 

File: test/org/mockitousage/matchers/ComparableMatchersTest.java
Patch:
@@ -9,15 +9,15 @@
 import java.math.BigDecimal;
 
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.internal.matchers.CompareEqual;
 import org.mockito.internal.matchers.CompareTo;
 import org.mockito.internal.matchers.GreaterOrEqual;
 import org.mockito.internal.matchers.GreaterThan;
 import org.mockito.internal.matchers.LessOrEqual;
 import org.mockito.internal.matchers.LessThan;
 
-public class ComparableMatchersTest extends RequiresValidState {
+public class ComparableMatchersTest extends TestBase {
 
     @Test
     public void testLessThan() {

File: test/org/mockitousage/matchers/CustomMatchersTest.java
Patch:
@@ -12,10 +12,10 @@
 import org.junit.Test;
 import org.mockito.CustomMatcher;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockitousage.IMethods;
 
-public class CustomMatchersTest extends RequiresValidState {
+public class CustomMatchersTest extends TestBase {
     
     private final class ContainsFoo extends CustomMatcher<String> {
         public boolean matches(String arg) {

File: test/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -16,13 +16,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
 
 @SuppressWarnings("unchecked")
-public class MatchersTest extends RequiresValidState {
+public class MatchersTest extends TestBase {
     private IMethods mock;
 
     @Before

File: test/org/mockitousage/matchers/MatchersToStringTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.internal.matchers.And;
 import org.mockito.internal.matchers.Any;
 import org.mockito.internal.matchers.Contains;
@@ -28,7 +28,7 @@
 import org.mockito.internal.matchers.StartsWith;
 
 @SuppressWarnings("unchecked")
-public class MatchersToStringTest extends RequiresValidState {
+public class MatchersToStringTest extends TestBase {
     private StringBuilder buffer;
 
     @Before

File: test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -10,12 +10,12 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
-public class VerificationAndStubbingUsingMatchersTest extends RequiresValidState {
+public class VerificationAndStubbingUsingMatchersTest extends TestBase {
     private IMethods one;
     private IMethods two;
     private IMethods three;

File: test/org/mockitousage/sample/ArticleCalculator.java
Patch:
@@ -8,4 +8,5 @@ public interface ArticleCalculator {
     int countArticles(String newspaper);
     int countArticlesInPolish(String newspaper);
     int countNumberOfRelatedArticles(Article article);
+    int countAllArticles(String ... publications);
 }
\ No newline at end of file

File: test/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -16,13 +16,13 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
-public class BasicStubbingTest extends RequiresValidState {
+public class BasicStubbingTest extends TestBase {
 
     private IMethods mock;
 

File: test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java
Patch:
@@ -13,11 +13,11 @@
 
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
-public class ReturningDefaultValuesTest extends RequiresValidState {
+public class ReturningDefaultValuesTest extends TestBase {
 
     @Test
     public void shouldReturnAllKindsOfPrimitives() throws Exception {

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -23,13 +23,13 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 
 @SuppressWarnings({"serial", "unchecked"})
-public class StubbingWithThrowablesTest extends RequiresValidState {
+public class StubbingWithThrowablesTest extends TestBase {
 
     private LinkedList mock;
     private Map mockTwo;

File: test/org/mockitousage/verification/AtLeastOnceVerificationTest.java
Patch:
@@ -12,11 +12,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 
 @SuppressWarnings("unchecked")
-public class AtLeastOnceVerificationTest extends RequiresValidState {
+public class AtLeastOnceVerificationTest extends TestBase {
 
     private List mock;
     private List mockTwo;

File: test/org/mockitousage/verification/BasicVerificationInOrderTest.java
Patch:
@@ -9,15 +9,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.InOrder;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
-public class BasicVerificationInOrderTest extends RequiresValidState {
+public class BasicVerificationInOrderTest extends TestBase {
     
     private IMethods mockOne;
     private IMethods mockTwo;

File: test/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -12,14 +12,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 
 @SuppressWarnings("unchecked")
-public class BasicVerificationTest extends RequiresValidState {
+public class BasicVerificationTest extends TestBase {
 
     private List mock;
     private List mockTwo;

File: test/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java
Patch:
@@ -13,15 +13,15 @@
 import org.junit.Test;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.cause.TooLittleInvocations;
 import org.mockito.exceptions.cause.UndesiredInvocation;
 import org.mockito.exceptions.cause.WantedAnywhereAfterFollowingInteraction;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
-public class DescriptiveMessagesOnVerificationInOrderErrorsTest extends RequiresValidState {
+public class DescriptiveMessagesOnVerificationInOrderErrorsTest extends TestBase {
     
     private IMethods one;
     private IMethods two;

File: test/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java
Patch:
@@ -12,14 +12,14 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.cause.TooLittleInvocations;
 import org.mockito.exceptions.cause.UndesiredInvocation;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 
 @SuppressWarnings("unchecked")
-public class DescriptiveMessagesWhenTimesXVerificationFailsTest extends RequiresValidState {
+public class DescriptiveMessagesWhenTimesXVerificationFailsTest extends TestBase {
 
     private LinkedList mock;
 

File: test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -13,15 +13,15 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.cause.UndesiredInvocation;
 import org.mockito.exceptions.cause.WantedDiffersFromActual;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
-public class DescriptiveMessagesWhenVerificationFailsTest extends RequiresValidState {
+public class DescriptiveMessagesWhenVerificationFailsTest extends TestBase {
 
     private IMethods mock;
 

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -12,13 +12,13 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.TooLittleActualInvocations;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 
 @SuppressWarnings("unchecked")
-public class ExactNumberOfTimesVerificationTest extends RequiresValidState {
+public class ExactNumberOfTimesVerificationTest extends TestBase {
 
     private LinkedList mock;
 

File: test/org/mockitousage/verification/RelaxedVerificationInOrderTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.TooManyActualInvocations;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
@@ -21,7 +21,7 @@
  * ignored since 'relaxed' in order verification is not implemented (too complex to bother, maybe later).
  */
 @SuppressWarnings("unchecked")  
-public class RelaxedVerificationInOrderTest extends RequiresValidState {
+public class RelaxedVerificationInOrderTest extends TestBase {
     
     private IMethods mockOne;
     private IMethods mockTwo;

File: test/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java
Patch:
@@ -9,14 +9,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.InOrder;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
-public class SelectedMocksInOrderVerificationTest extends RequiresValidState {
+public class SelectedMocksInOrderVerificationTest extends TestBase {
     
     private IMethods mockOne;
     private IMethods mockTwo;

File: test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -9,15 +9,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.InOrder;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
-public class VerificationInOrderMixedWithOrdiraryVerificationTest extends RequiresValidState {
+public class VerificationInOrderMixedWithOrdiraryVerificationTest extends TestBase {
     
     private IMethods mockOne;
     private IMethods mockTwo;

File: test/org/mockitousage/verification/VerificationInOrderTest.java
Patch:
@@ -12,13 +12,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.InOrder;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.VerifcationInOrderFailure;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
-public class VerificationInOrderTest extends RequiresValidState {
+public class VerificationInOrderTest extends TestBase {
     
     private IMethods mockOne;
     private IMethods mockTwo;

File: test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
Patch:
@@ -20,10 +20,10 @@
 
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 
 @SuppressWarnings("unchecked")
-public class VerificationOnMultipleMocksUsingMatchersTest extends RequiresValidState {
+public class VerificationOnMultipleMocksUsingMatchersTest extends TestBase {
 
     @Test
     public void shouldVerifyUsingMatchers() throws Exception {

File: test/org/mockitousage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -12,13 +12,13 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.RequiresValidState;
+import org.mockito.TestBase;
 import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
-public class VerificationUsingMatchersTest extends RequiresValidState {
+public class VerificationUsingMatchersTest extends TestBase {
     private IMethods mock;
 
     @Before

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -27,7 +27,7 @@ public interface OngoingStubbing<T> {
      * 
      * See examples in javadoc for {@link Mockito#stub}
      * 
-     * @param stubbed return value
+     * @param value return value
      */
     void toReturn(T value);
 

File: test/org/mockito/MockitoTest.java
Patch:
@@ -16,7 +16,8 @@
 public class MockitoTest extends RequiresValidState {
 
     //TODO I want to have ruby script that will collect all java code from examples in javadoc/documentation
-    // and create a test case that I can manually fix and run and make sure examples are valid
+    // and create a test case that I can manually fix and run and make sure examples are valid.
+    // Or better. Write examples as unit tests, annotate them in the way so that javadoc can be generated out of it.
     
     //TODO check if performace can be tweaked (e.g: LL -> AL)
     

File: src/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java
Patch:
@@ -90,7 +90,7 @@
  * @version $Id: EqualsBuilder.java 611543 2008-01-13 07:00:22Z bayard $
  */
 @SuppressWarnings("unchecked")
-public class EqualsBuilder {
+class EqualsBuilder {
     
     /**
      * If the fields tested are equals.

File: src/org/mockito/exceptions/verification/VerifcationInOrderFailed.java
Patch:
@@ -6,15 +6,15 @@
 
 import org.mockito.exceptions.base.MockitoAssertionError;
 
-public class StrictVerificationFailure extends MockitoAssertionError {
+public class VerifcationInOrderFailed extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public StrictVerificationFailure(String message, Throwable cause) {
+    public VerifcationInOrderFailed(String message, Throwable cause) {
         super(message, cause);
     }
 
-    public StrictVerificationFailure(String message) {
+    public VerifcationInOrderFailed(String message) {
         super(message);
     }
 }

File: src/org/mockito/internal/invocation/InvocationsFinder.java
Patch:
@@ -19,7 +19,7 @@ public List<Invocation> findInvocations(List<Invocation> invocations, Invocation
     }
 
     public List<Invocation> findFirstUnverifiedChunk(List<Invocation> invocations, InvocationMatcher wanted) {
-        List<Invocation> unverified = ListUtil.filter(invocations, new RemoveVerifiedStrictly());
+        List<Invocation> unverified = ListUtil.filter(invocations, new RemoveVerifiedInOrder());
         List<Invocation> firstChunk = new LinkedList<Invocation>();
         for (Invocation invocation : unverified) {
             if (wanted.matches(invocation)) {
@@ -86,9 +86,9 @@ public boolean isOut(Invocation invocation) {
         }
     }
 
-    private final class RemoveVerifiedStrictly implements Filter<Invocation> {
+    private final class RemoveVerifiedInOrder implements Filter<Invocation> {
         public boolean isOut(Invocation invocation) {
-            return invocation.isVerifiedStrictly();
+            return invocation.isVerifiedInOrder();
         }
     }
 }
\ No newline at end of file

File: src/org/mockito/internal/verification/VerifyingRecorder.java
Patch:
@@ -42,8 +42,8 @@ public void verify(VerificationModeImpl mode) {
 
     public void verify(InvocationMatcher wanted, VerificationModeImpl mode) {
         List<Invocation> invocations;
-        if (mode.strictMode()) {
-            invocations = globalInvocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedStrictly());
+        if (mode.inOrderMode()) {
+            invocations = globalInvocationsFinder.getAllInvocations(mode.getMocksToBeVerifiedInOrder());
         } else {
             invocations = registeredInvocations;
         }

File: test/org/mockito/MockitoTest.java
Patch:
@@ -49,7 +49,7 @@ public void shouldValidateMockWhenStubbingVoid() {
     }
     
     @Test(expected=NotAMockException.class)
-    public void shouldValidateMockWhenGettingStrictVerifier() {
-        Mockito.strictly("notMock");
+    public void shouldValidateMockWhenCreatingInOrderObject() {
+        Mockito.inOrder("notMock");
     }
 }

File: test/org/mockito/internal/progress/VerificationModeBuilder.java
Patch:
@@ -10,8 +10,8 @@ public class VerificationModeBuilder {
 
     private Integer times;
 
-    public VerificationModeImpl strict() {
-        return VerificationModeImpl.strict(times, Arrays.asList(new Object()));
+    public VerificationModeImpl inOrder() {
+        return VerificationModeImpl.inOrder(times, Arrays.asList(new Object()));
     }
 
     public VerificationModeBuilder times(int times) {

File: test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java
Patch:
@@ -40,8 +40,8 @@ public void setup() {
     }
 
     @Test
-    public void shouldNeverVerifyWhenNotModeIsStrict() throws Exception {
-        verifier.verify(null, null, new VerificationModeBuilder().strict());
+    public void shouldNeverVerifyWhenNotModeIsInOrder() throws Exception {
+        verifier.verify(null, null, new VerificationModeBuilder().inOrder());
     }
     
     @Test

File: test/org/mockito/internal/verification/VerifyingRecorderTest.java
Patch:
@@ -53,9 +53,9 @@ public void shouldVerify() {
     }
     
     @Test
-    public void shouldVerifyStrictly() {
-        VerificationModeImpl strictMode = new VerificationModeBuilder().strict();
-        recorder.verify(differentMethod, strictMode);
+    public void shouldVerifyInOrder() {
+        VerificationModeImpl inOrderMode = new VerificationModeBuilder().inOrder();
+        recorder.verify(differentMethod, inOrderMode);
         
         assertThat(verifierStub.invocations, collectionHasExactlyInOrder(simpleMethod, differentMethod.getInvocation()));
     }

File: src/org/mockito/Matchers.java
Patch:
@@ -167,7 +167,7 @@ public static String anyString() {
      * @return <code>null</code>.
      */
     public static <T> T isA(Class<T> clazz) {
-        return reportMatcher(new InstanceOf(clazz)).returnNull();
+        return reportMatcher(new InstanceOf(clazz)).<T>returnNull();
     }
 
     /**
@@ -284,7 +284,7 @@ public static short eq(short value) {
      * @return <code>null</code>.
      */
     public static <T> T eq(T value) {
-        return reportMatcher(new Equals(value)).returnNull();
+        return reportMatcher(new Equals(value)).<T>returnNull();
     }
 
     /**
@@ -299,7 +299,7 @@ public static <T> T eq(T value) {
      * @return <code>null</code>.
      */
     public static <T> T same(T value) {
-        return reportMatcher(new Same(value)).returnNull();
+        return reportMatcher(new Same(value)).<T>returnNull();
     }
 
     /**

File: src/org/mockito/Matchers.java
Patch:
@@ -47,6 +47,7 @@ public class Matchers {
      * @return <code>false</code>.
      */
     public static boolean anyBoolean() {
+        //TODO every matcher should have a link to documentation about matchers
         LastArguments.instance().reportMatcher(Any.ANY);
         return false;
     }

File: src/org/mockito/internal/stubbing/StubbedMethodSelector.java
Patch:
@@ -10,7 +10,7 @@
  * Chooses void method for stubbing with throwable. E.g:
  * 
  * <pre>
- * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
+ * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod("some arg");
  * </pre>
  * 
  * See examples in javadoc for {@link Mockito#stubVoid}
@@ -21,7 +21,7 @@ public interface StubbedMethodSelector<T> {
      * Choose void method for stubbing with throwable. E.g:
      * 
      * <pre>
-     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
+     * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod("some arg");
      * </pre>
      * 
      * If throwable is a checked exception then it has to match one of the

File: src/org/mockito/Matchers.java
Patch:
@@ -30,10 +30,10 @@
  * </pre>
  * <b>Warning:</b>
  * <p>
- * When multiple arguments used, all arguments have to be provided by matchers, e.g:
+ * When multiple arguments are combined with matchers, all arguments have to be provided by matchers, e.g:
  * <pre>
  *   verify(mock).someMethod(anyInt(), anyString(), <b>eq("third argument")</b>);
- *   //above is correct - eq() is also an argument matcher (see {@link Matchers#eq(Object)})
+ *   //above is correct - eq() is also an argument matcher
  *   
  *   verify(mock).someMethod(anyInt(), anyString(), <b>"third argument"</b>);
  *   //above is incorrect - exception will be thrown because third argument is given without argument matcher.

File: src/org/mockito/internal/AllInvocationsFinder.java
Patch:
@@ -10,8 +10,8 @@
 import java.util.Set;
 import java.util.TreeSet;
 
-import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.GlobalInvocationsFinder;
+import org.mockito.internal.invocation.Invocation;
 
 public class AllInvocationsFinder implements GlobalInvocationsFinder {
     

File: src/org/mockito/internal/MockHandler.java
Patch:
@@ -21,10 +21,10 @@
 import org.mockito.internal.stubbing.StubbedMethodSelector;
 import org.mockito.internal.stubbing.Stubber;
 import org.mockito.internal.stubbing.VoidMethodStubbable;
-import org.mockito.internal.verification.StrictlyMissingInvocationVerifier;
 import org.mockito.internal.verification.MissingInvocationVerifier;
 import org.mockito.internal.verification.NoMoreInvocationsVerifier;
 import org.mockito.internal.verification.NumberOfInvocationsVerifier;
+import org.mockito.internal.verification.StrictlyMissingInvocationVerifier;
 import org.mockito.internal.verification.StrictlyNumberOfInvocationsVerifier;
 import org.mockito.internal.verification.Verifier;
 import org.mockito.internal.verification.VerifyingRecorder;

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -12,9 +12,9 @@
 import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.creation.MockNamer;
+import org.mockito.internal.matchers.ArgumentMatcher;
 import org.mockito.internal.matchers.ArrayEquals;
 import org.mockito.internal.matchers.Equals;
-import org.mockito.internal.matchers.ArgumentMatcher;
 
 /**
  * Method call on a mock object. 

File: src/org/mockito/internal/invocation/MatchersBinder.java
Patch:
@@ -8,8 +8,8 @@
 import java.util.List;
 
 import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
-import org.mockito.internal.matchers.Equals;
 import org.mockito.internal.matchers.ArgumentMatcher;
+import org.mockito.internal.matchers.Equals;
 import org.mockito.internal.progress.LastArguments;
 
 @SuppressWarnings("unchecked")

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.progress;
 
+import org.mockito.Mockito;
+
 /**
  * Stubs with return value or exception. E.g:
  * 

File: src/org/mockito/internal/progress/VerificationMode.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.progress;
 
+import org.mockito.Mockito;
+
 /**
  * Allows verifying that certain behavior happened at least once or exact number of times. E.g:
  * <pre>

File: src/org/mockito/internal/stubbing/StubbedMethodSelector.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.stubbing;
 
+import org.mockito.Mockito;
+
 /**
  * Chooses void method for stubbing with throwable. E.g:
  * 

File: src/org/mockito/internal/stubbing/VoidMethodStubbable.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.internal.stubbing;
 
+import org.mockito.Mockito;
+
 /**
  * Stubs void method with exception. E.g:
  * 

File: src/org/mockito/internal/verification/MissingInvocationVerifier.java
Patch:
@@ -7,9 +7,9 @@
 import java.util.List;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.InvocationsPrinter;
 import org.mockito.internal.progress.VerificationModeImpl;
 

File: src/org/mockito/internal/verification/NoMoreInvocationsVerifier.java
Patch:
@@ -7,9 +7,9 @@
 import java.util.List;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
 public class NoMoreInvocationsVerifier implements Verifier {

File: src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java
Patch:
@@ -8,9 +8,9 @@
 
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.HasStackTrace;
-import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
 public class NumberOfInvocationsVerifier implements Verifier {

File: src/org/mockito/internal/verification/StrictlyMissingInvocationVerifier.java
Patch:
@@ -7,9 +7,9 @@
 import java.util.List;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.InvocationsPrinter;
 import org.mockito.internal.progress.VerificationModeImpl;
 

File: src/org/mockito/internal/verification/StrictlyNumberOfInvocationsVerifier.java
Patch:
@@ -8,9 +8,9 @@
 
 import org.mockito.exceptions.Reporter;
 import org.mockito.exceptions.base.HasStackTrace;
-import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
+import org.mockito.internal.invocation.InvocationsFinder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
 public class StrictlyNumberOfInvocationsVerifier implements Verifier {

File: src/org/mockito/internal/verification/VerifyingRecorder.java
Patch:
@@ -7,9 +7,9 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.internal.invocation.GlobalInvocationsFinder;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
-import org.mockito.internal.invocation.GlobalInvocationsFinder;
 import org.mockito.internal.progress.VerificationModeImpl;
 
 public class VerifyingRecorder {

File: src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java
Patch:
@@ -14,6 +14,6 @@ public InvalidUseOfMatchersException(String message) {
         super(  "\n" +
                 message +
                 "\n" +
-                "Read more: http://code.google.com/p/mockito/matchers");
+                "See javadoc for Matchers class");
     }
 }

File: test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -65,7 +65,7 @@ public void shouldScreamWhenMatchersAreInvalid() {
                     "\n" +
                     "No matchers found for Not(?)." +
                     "\n" +
-                    "Read more: http://code.google.com/p/mockito/matchers"
+                    "See javadoc for Matchers class"
                     , e.getMessage());
         }
 
@@ -77,7 +77,7 @@ public void shouldScreamWhenMatchersAreInvalid() {
                     "\n" +
                     "2 matchers expected, 1 recorded." +
                     "\n" +
-                    "Read more: http://code.google.com/p/mockito/matchers"
+                    "See javadoc for Matchers class"
                     , e.getMessage());
         }
 
@@ -89,7 +89,7 @@ public void shouldScreamWhenMatchersAreInvalid() {
                     "\n" +
                     "3 matchers expected, 1 recorded." +
                     "\n" +
-                    "Read more: http://code.google.com/p/mockito/matchers"
+                    "See javadoc for Matchers class"
                     , e.getMessage());
         }
     }

File: src/org/mockito/exceptions/verification/InvocationDiffersFromActual.java
Patch:
@@ -6,11 +6,11 @@
 
 import org.mockito.exceptions.base.MockitoAssertionError;
 
-public class TooManyActualInvocationsError extends MockitoAssertionError {
+public class InvocationDiffersFromActual extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public TooManyActualInvocationsError(String message, Throwable cause) {
+    public InvocationDiffersFromActual(String message, Throwable cause) {
         super(message, cause);
     }
 }

File: src/org/mockito/exceptions/verification/NoInteractionsWanted.java
Patch:
@@ -9,11 +9,11 @@
 /**
  * No interactions wanted. See exception's cause for location of undesired invocation.
  */
-public class NoInteractionsWantedError extends MockitoAssertionError {
+public class NoInteractionsWanted extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public NoInteractionsWantedError(String message, Throwable cause) {
+    public NoInteractionsWanted(String message, Throwable cause) {
         super(message, cause);
     }
 }
\ No newline at end of file

File: src/org/mockito/exceptions/verification/TooLittleActualInvocations.java
Patch:
@@ -6,11 +6,11 @@
 
 import org.mockito.exceptions.base.MockitoAssertionError;
 
-public class TooLittleActualInvocationsError extends MockitoAssertionError {
+public class TooLittleActualInvocations extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
     
-    public TooLittleActualInvocationsError(String message, Throwable cause) {
+    public TooLittleActualInvocations(String message, Throwable cause) {
         super(message, cause);
     }
 }

File: src/org/mockito/internal/invocation/InvocationsPrinter.java
Patch:
@@ -9,9 +9,8 @@ public class InvocationsPrinter {
     private final String wanted;
     private final String actual;
 
-    //TODO use it in other situations also!
     public InvocationsPrinter(InvocationMatcher wantedInvocation, Invocation actualInvocation) {
-        if (wantedInvocation.matchesMockArgsAndMethodNameButMethodNotEqual(actualInvocation)) {
+        if (wantedInvocation.differsWithArgumentTypes(actualInvocation)) {
             wanted = wantedInvocation.toStringWithArgumentTypes();
             actual = actualInvocation.toStringWithArgumentTypes();
         } else {

File: src/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -23,7 +23,6 @@ public boolean matches(Object actual) {
                         + delta.doubleValue();
     }
 
-    //TODO not tested
     public void appendTo(StringBuilder buffer) {
         buffer.append("eq(" + wanted + ", " + delta + ")");
     }

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.progress;
 
-import org.mockito.Mockito;
-
 /**
  * Stubs with return value or exception. E.g:
  * 

File: src/org/mockito/internal/progress/VerificationMode.java
Patch:
@@ -1,7 +1,5 @@
 package org.mockito.internal.progress;
 
-import org.mockito.Mockito;
-
 /**
  * Allows verifying that certain behavior happened at least once or exact number of times. E.g:
  * <pre>

File: src/org/mockito/internal/stubbing/StubbedMethodSelector.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.stubbing;
 
-import org.mockito.Mockito;
-
 /**
  * Chooses void method for stubbing with throwable. E.g:
  * 

File: src/org/mockito/internal/stubbing/VoidMethodStubbable.java
Patch:
@@ -4,8 +4,6 @@
  */
 package org.mockito.internal.stubbing;
 
-import org.mockito.Mockito;
-
 /**
  * Stubs void method with exception. E.g:
  * 

File: src/org/mockito/internal/verification/MissingInvocationVerifier.java
Patch:
@@ -45,11 +45,10 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
 
     private void reportMissingInvocationError(InvocationMatcher wanted, Invocation similar) {
         if (similar != null) {
-            //TODO I want a functional test that proves that correct stack trace is provided for cause for both strictly and ordinary verification
             InvocationsPrinter printer = new InvocationsPrinter(wanted, similar);
             reporter.wantedInvocationDiffersFromActual(printer.printWanted(), printer.printActual(), similar.getStackTrace());
         } else {
-            //TODO I really want a cause here, something like: "wanted after..."
+            //TODO For strictly, I really want a cause here, something like: "wanted after..." for strictly... :D
             reporter.wantedButNotInvoked(wanted.toString());
         }
     }

File: src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java
Patch:
@@ -39,11 +39,9 @@ public void verify(List<Invocation> invocations, InvocationMatcher wanted, Verif
         
         int actualCount = actualInvocations.size();
         if (mode.tooLittleActualInvocations(actualCount)) {
-            //TODO I want a functional test that proves that correct stack trace is provided for cause for both strictly and ordinary verification
             HasStackTrace lastInvocation = analyzer.findLastMatchingInvocationTrace(actualInvocations, wanted);
             reporter.tooLittleActualInvocations(mode.wantedCount(), actualCount, wanted.toString(), lastInvocation);
         } else if (mode.tooManyActualInvocations(actualCount)) {
-            //TODO I want a functional test that proves that correct stack trace is provided for cause for both strictly and ordinary verification
             HasStackTrace firstUndesired = analyzer.findFirstUndesiredInvocationTrace(actualInvocations, wanted, mode);
             reporter.tooManyActualInvocations(mode.wantedCount(), actualCount, wanted.toString(), firstUndesired);
         }

File: test/org/mockito/exceptions/ReporterTest.java
Patch:
@@ -6,11 +6,11 @@
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.verification.TooLittleActualInvocationsError;
+import org.mockito.exceptions.verification.TooLittleActualInvocations;
 
 public class ReporterTest extends RequiresValidState {
 
-    @Test(expected=TooLittleActualInvocationsError.class)
+    @Test(expected=TooLittleActualInvocations.class)
     public void shouldLetPassingNullLastActualStackTrace() throws Exception {
         new Reporter().tooLittleActualInvocations(1, 2, "wanted", null);
     }

File: test/org/mockitousage/StackTrackeChangingTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Test;
 import org.mockito.Mockito;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.verification.VerificationError;
+import org.mockito.exceptions.verification.InvocationDiffersFromActual;
 
 public class StackTrackeChangingTest extends RequiresValidState {
     
@@ -33,7 +33,7 @@ public void shouldShowActualInvocationAsExceptionCause() {
         try {
             verifySimpleMethodOnAMock();
             fail();
-        } catch (VerificationError e) {
+        } catch (InvocationDiffersFromActual e) {
             assertThat(e, hasMethodInStackTraceAt(0, "verifySimpleMethodOnAMock"));
             assertThat(e, hasMethodInStackTraceAt(1, "shouldShowActualInvocationAsExceptionCause"));
             assertThat(e.getCause(), hasMethodInStackTraceAt(0, "simpleMethodOnAMock"));

File: test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.verification.VerificationError;
+import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
@@ -75,6 +75,6 @@ public void shouldVerifyUsingMatchers() {
         try {
             verify(three).varargsObject(eq(10), eq("first arg"), startsWith("third"));
             fail();
-        } catch (VerificationError e) {}
+        } catch (WantedButNotInvoked e) {}
     }
 }
\ No newline at end of file

File: test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.mockito.RequiresValidState;
 import org.mockito.Strictly;
 import org.mockito.exceptions.base.MockitoException;
-import org.mockito.exceptions.verification.NoInteractionsWantedError;
+import org.mockito.exceptions.verification.NoInteractionsWanted;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
@@ -82,7 +82,7 @@ public void shouldFailOnNoMoreInteractions() {
         try {
             verifyNoMoreInteractions(mockOne, mockTwo, mockThree);
             fail();
-        } catch (NoInteractionsWantedError e) {}
+        } catch (NoInteractionsWanted e) {}
     }
     
     @Test
@@ -94,7 +94,7 @@ public void shouldFailOnNoMoreInteractionsOnStrictlyControlledMock() {
         try {
             verifyNoMoreInteractions(mockOne, mockTwo, mockThree);
             fail();
-        } catch (NoInteractionsWantedError e) {}
+        } catch (NoInteractionsWanted e) {}
     }
     
     @Test

File: src/org/mockito/internal/progress/OngoingStubbing.java
Patch:
@@ -15,7 +15,7 @@
  * stub(mock.countElements()).andThrow(new RuntimeException());
  * </pre>
  * 
- * See examples {@link Mockito#stub}
+ * See examples in javadoc for {@link Mockito#stub}
  */
 public interface OngoingStubbing<T> {
 
@@ -25,7 +25,7 @@ public interface OngoingStubbing<T> {
      * stub(mock.countElements()).andReturn(10);
      * </pre>
      * 
-     * See examples {@link Mockito#stub}
+     * See examples in javadoc for {@link Mockito#stub}
      * 
      * @param stubbed return value
      */
@@ -40,7 +40,7 @@ public interface OngoingStubbing<T> {
      * If throwable is a checked exception then it has to 
      * match one of the checked exceptions of method signature.
      * 
-     * See examples {@link Mockito#stub}
+     * See examples in javadoc for {@link Mockito#stub}
      * 
      * @param throwable to be thrown on method invocation
      */

File: src/org/mockito/internal/progress/VerificationMode.java
Patch:
@@ -10,6 +10,6 @@
  *   verify(mock, atLeastOnce()).someMethod("should be called at least once");
  * </pre>
  * 
- * See examples {@link Mockito#verify(Object, VerificationMode)}
+ * See examples in javadoc for {@link Mockito#verify(Object, VerificationMode)}
  */
 public interface VerificationMode {}
\ No newline at end of file

File: src/org/mockito/internal/stubbing/StubbedMethodSelector.java
Patch:
@@ -13,7 +13,7 @@
  * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
  * </pre>
  * 
- * See examples {@link Mockito#stubVoid}
+ * See examples in javadoc for {@link Mockito#stubVoid}
  */
 public interface StubbedMethodSelector<T> {
 
@@ -27,7 +27,7 @@ public interface StubbedMethodSelector<T> {
      * If throwable is a checked exception then it has to match one of the
      * checked exceptions of method signature.
      * <p>
-     * See examples {@link Mockito#stubVoid}
+     * See examples in javadoc for {@link Mockito#stubVoid}
      * 
      * @return mock object itself
      */

File: src/org/mockito/internal/stubbing/VoidMethodStubbable.java
Patch:
@@ -13,7 +13,7 @@
  * stubVoid(mock).toThrow(new RuntimeException()).on().someMethod();
  * </pre>
  * 
- * See examples {@link Mockito#stubVoid}
+ * See examples in javadoc for {@link Mockito#stubVoid}
  */
 public interface VoidMethodStubbable<T> {
 
@@ -27,7 +27,7 @@ public interface VoidMethodStubbable<T> {
      * If throwable is a checked exception then it has to 
      * match one of the checked exceptions of method signature.
      * 
-     * See examples {@link Mockito#stubVoid}
+     * See examples in javadoc for {@link Mockito#stubVoid}
      * 
      * @param throwable
      *            to be thrown on method invocation

File: src/org/mockito/exceptions/Reporter.java
Patch:
@@ -6,15 +6,15 @@
 
 import static org.mockito.exceptions.StringJoiner.join;
 
+import org.mockito.exceptions.base.HasStackTrace;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.cause.FirstUndesiredInvocation;
 import org.mockito.exceptions.cause.TooLittleInvocations;
 import org.mockito.exceptions.cause.UndesiredInvocation;
 import org.mockito.exceptions.cause.WantedDiffersFromActual;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 import org.mockito.exceptions.misusing.UnfinishedStubbingException;
 import org.mockito.exceptions.misusing.UnfinishedVerificationException;
-import org.mockito.exceptions.parents.HasStackTrace;
-import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.exceptions.verification.TooLittleActualInvocationsError;
 import org.mockito.exceptions.verification.TooManyActualInvocationsError;
 import org.mockito.exceptions.verification.VerificationError;

File: src/org/mockito/exceptions/base/CommonStackTraceRemover.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import java.util.Arrays;
 import java.util.Collections;

File: src/org/mockito/exceptions/base/HasStackTrace.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 public interface HasStackTrace {
     

File: src/org/mockito/exceptions/base/HasStackTraceThrowableWrapper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 public class HasStackTraceThrowableWrapper implements HasStackTrace {
 

File: src/org/mockito/exceptions/base/MockitoAssertionError.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import java.util.Arrays;
 

File: src/org/mockito/exceptions/base/MockitoException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 
 public class MockitoException extends RuntimeException implements HasStackTrace {

File: src/org/mockito/exceptions/base/StackTraceFilter.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import java.util.Arrays;
 import java.util.List;

File: src/org/mockito/exceptions/cause/FirstUndesiredInvocation.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class FirstUndesiredInvocation extends MockitoException {
 

File: src/org/mockito/exceptions/cause/TooLittleInvocations.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class TooLittleInvocations extends MockitoException {
 

File: src/org/mockito/exceptions/cause/UndesiredInvocation.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class UndesiredInvocation extends MockitoException {
 

File: src/org/mockito/exceptions/cause/WantedDiffersFromActual.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class WantedDiffersFromActual extends MockitoException {
 

File: src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.misusing;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class InvalidUseOfMatchersException extends MockitoException {
 

File: src/org/mockito/exceptions/misusing/MissingMethodInvocationException.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.misusing;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class MissingMethodInvocationException extends MockitoException {
 

File: src/org/mockito/exceptions/misusing/NotAMockException.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.misusing;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class NotAMockException extends MockitoException {
 

File: src/org/mockito/exceptions/misusing/UnfinishedStubbingException.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.misusing;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class UnfinishedStubbingException extends MockitoException {
 

File: src/org/mockito/exceptions/misusing/UnfinishedVerificationException.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.misusing;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class UnfinishedVerificationException extends MockitoException {
     

File: src/org/mockito/exceptions/verification/TooLittleActualInvocationsError.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.verification;
 
-import org.mockito.exceptions.parents.MockitoAssertionError;
+import org.mockito.exceptions.base.MockitoAssertionError;
 
 public class TooLittleActualInvocationsError extends MockitoAssertionError {
 

File: src/org/mockito/exceptions/verification/TooManyActualInvocationsError.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.verification;
 
-import org.mockito.exceptions.parents.MockitoAssertionError;
+import org.mockito.exceptions.base.MockitoAssertionError;
 
 public class TooManyActualInvocationsError extends MockitoAssertionError {
 

File: src/org/mockito/exceptions/verification/VerificationError.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.exceptions.verification;
 
-import org.mockito.exceptions.parents.MockitoAssertionError;
+import org.mockito.exceptions.base.MockitoAssertionError;
 
 
 public class VerificationError extends MockitoAssertionError {

File: src/org/mockito/internal/MockUtil.java
Patch:
@@ -7,8 +7,8 @@
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.Factory;
 
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.NotAMockException;
-import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.internal.creation.ObjectMethodsFilter;
 import org.mockito.internal.creation.MockFactory.MockMethodInterceptor;
 

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -9,8 +9,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import org.mockito.exceptions.parents.HasStackTrace;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.HasStackTrace;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.creation.MockNamer;
 import org.mockito.internal.matchers.ArrayEquals;
 import org.mockito.internal.matchers.Equals;

File: src/org/mockito/internal/invocation/InvocationsCalculator.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.List;
 
-import org.mockito.exceptions.parents.HasStackTrace;
+import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.progress.VerificationMode;
 
 //TODO refactor to an object that holds Invocations and exposes some calculations

File: src/org/mockito/internal/progress/VerificationMode.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class VerificationMode {
     

File: src/org/mockito/internal/stubbing/Result.java
Patch:
@@ -4,8 +4,8 @@
  */
 package org.mockito.internal.stubbing;
 
-import org.mockito.exceptions.parents.HasStackTraceThrowableWrapper;
-import org.mockito.exceptions.parents.StackTraceFilter;
+import org.mockito.exceptions.base.HasStackTraceThrowableWrapper;
+import org.mockito.exceptions.base.StackTraceFilter;
 
 @SuppressWarnings("unchecked")
 public class Result implements IAnswer {

File: src/org/mockito/internal/stubbing/Stubber.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.LinkedList;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.parents.StackTraceFilter;
+import org.mockito.exceptions.base.StackTraceFilter;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.progress.MockingProgress;

File: src/org/mockito/internal/verification/NumberOfInvocationsVerifier.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.List;
 
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.parents.HasStackTrace;
+import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsCalculator;

File: test/org/mockito/MockUtilTest.java
Patch:
@@ -16,8 +16,8 @@
 import net.sf.cglib.proxy.NoOp;
 
 import org.junit.Test;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.NotAMockException;
-import org.mockito.exceptions.parents.MockitoException;
 
 public class MockUtilTest extends RequiresValidState {
 

File: test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java
Patch:
@@ -2,13 +2,14 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;
+import org.mockito.exceptions.base.MockitoAssertionError;
 
 public class MockitoAssertionErrorTest extends RequiresValidState {
 

File: test/org/mockito/exceptions/base/MockitoExceptionTest.java
Patch:
@@ -2,13 +2,14 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;
+import org.mockito.exceptions.base.MockitoException;
 
 public class MockitoExceptionTest extends RequiresValidState {
 

File: test/org/mockito/exceptions/base/StackTraceBuilder.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import java.util.Arrays;
 import java.util.List;

File: test/org/mockito/exceptions/base/StackTraceRemoverTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions.parents;
+package org.mockito.exceptions.base;
 
 import static org.junit.Assert.assertThat;
 import static org.mockito.util.ExtraMatchers.collectionHasExactlyInOrder;
@@ -12,6 +12,8 @@
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;
+import org.mockito.exceptions.base.CommonStackTraceRemover;
+import org.mockito.exceptions.base.HasStackTrace;
 
 public class StackTraceRemoverTest extends RequiresValidState {
 

File: test/org/mockito/internal/invocation/InvocationsCalculatorTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.HasStackTrace;
+import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.progress.VerificationMode;
 
 

File: test/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class MockingProgressImplTest extends RequiresValidState {
 

File: test/org/mockito/internal/progress/VerificationModeTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 
 public class VerificationModeTest extends RequiresValidState {
 

File: test/org/mockito/internal/stubbing/ResultTest.java
Patch:
@@ -14,8 +14,8 @@
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.HasStackTrace;
-import org.mockito.exceptions.parents.StackTraceFilter;
+import org.mockito.exceptions.base.HasStackTrace;
+import org.mockito.exceptions.base.StackTraceFilter;
 
 public class ResultTest extends RequiresValidState {
 

File: test/org/mockito/internal/stubbing/StubberTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;

File: test/org/mockito/internal/verification/MissingInvocationVerifierTest.java
Patch:
@@ -16,7 +16,7 @@
 import org.junit.Test;
 import org.mockito.RequiresValidState;
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.parents.HasStackTrace;
+import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;

File: test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.junit.Test;
 import org.mockito.RequiresValidState;
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.parents.HasStackTrace;
+import org.mockito.exceptions.base.HasStackTrace;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationsCalculator;

File: test/org/mockito/internal/verification/NumberOfInvocationsVerifierTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.junit.Test;
 import org.mockito.RequiresValidState;
 import org.mockito.exceptions.Reporter;
-import org.mockito.exceptions.parents.HasStackTrace;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.HasStackTrace;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;

File: test/org/mockitousage/InvalidUsageTest.java
Patch:
@@ -16,8 +16,8 @@
 import org.mockito.RequiresValidState;
 import org.mockito.StateResetter;
 import org.mockito.Strictly;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.misusing.MissingMethodInvocationException;
-import org.mockito.exceptions.parents.MockitoException;
 
 @SuppressWarnings("unchecked")
 public class InvalidUsageTest extends RequiresValidState {

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.mockito.MockUtilTest;
 import org.mockito.MockitoTest;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.MockitoAssertionErrorTest;
-import org.mockito.exceptions.parents.MockitoExceptionTest;
+import org.mockito.exceptions.base.MockitoAssertionErrorTest;
+import org.mockito.exceptions.base.MockitoExceptionTest;
 import org.mockito.internal.MockControlTest;
 import org.mockito.internal.creation.CglibTest;
 import org.mockito.internal.creation.MockFactoryTest;

File: test/org/mockitousage/StackTrackeFilteringTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.mockito.RequiresValidState;
 import org.mockito.StateResetter;
 import org.mockito.Strictly;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.VerificationError;
 
 public class StackTrackeFilteringTest extends RequiresValidState {

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.RequiresValidState;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.VerificationError;
 
 @SuppressWarnings({"serial", "unchecked"})

File: test/org/mockitousage/verification/StrictVerificationMixedWithOrdiraryVerificationTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.junit.Test;
 import org.mockito.RequiresValidState;
 import org.mockito.Strictly;
-import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.base.MockitoException;
 import org.mockito.exceptions.verification.VerificationError;
 import org.mockitousage.IMethods;
 

File: src/org/mockito/StrictOrderVerifier.java
Patch:
@@ -4,7 +4,8 @@
  */
 package org.mockito;
 
-import java.util.*;
+import java.util.LinkedList;
+import java.util.List;
 
 import org.mockito.exceptions.Reporter;
 import org.mockito.internal.progress.VerificationMode;

File: src/org/mockito/exceptions/parents/MockitoAssertionError.java
Patch:
@@ -10,7 +10,7 @@
 public class MockitoAssertionError extends AssertionError implements HasStackTrace {
 
     private static final long serialVersionUID = 1L;
-    protected StackTraceElement[] unfilteredStackTrace;
+    private StackTraceElement[] unfilteredStackTrace;
 
     public MockitoAssertionError(String message) {
         super(message);

File: src/org/mockito/exceptions/parents/MockitoException.java
Patch:
@@ -9,7 +9,7 @@ public class MockitoException extends RuntimeException implements HasStackTrace
 
     private static final long serialVersionUID = 1L;
 
-    protected StackTraceElement[] unfilteredStackTrace;
+    private StackTraceElement[] unfilteredStackTrace;
 
     public MockitoException(String message) {
         super(message);

File: src/org/mockito/exceptions/parents/StackTraceFilter.java
Patch:
@@ -4,7 +4,8 @@
  */
 package org.mockito.exceptions.parents;
 
-import java.util.*;
+import java.util.Arrays;
+import java.util.List;
 
 
 public class StackTraceFilter {

File: src/org/mockito/internal/creation/ObjenesisClassInstantiator.java
Patch:
@@ -8,7 +8,8 @@
 
 public class ObjenesisClassInstantiator {
 
-    public static Object newInstance(Class<?> clazz) throws InstantiationException {
+    @SuppressWarnings("unchecked")
+    public static Object newInstance(Class clazz) throws InstantiationException {
         return ObjenesisHelper.newInstance(clazz);
     }
 }

File: src/org/mockito/internal/invocation/Invocation.java
Patch:
@@ -88,8 +88,9 @@ public HasStackTrace getStackTrace() {
     }
 
     public boolean equals(Object o) {
-        if (o == null || !o.getClass().equals(this.getClass()))
+        if (o == null || !o.getClass().equals(this.getClass())) {
             return false;
+        }
 
         Invocation other = (Invocation) o;
 

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -12,8 +12,8 @@
 
 public class InvocationMatcher {
 
-    protected final Invocation invocation;
-    protected final List<IArgumentMatcher> matchers;
+    private final Invocation invocation;
+    private final List<IArgumentMatcher> matchers;
 
     public InvocationMatcher(Invocation invocation, List<IArgumentMatcher> matchers) {
         if (matchers == null) {

File: src/org/mockito/internal/invocation/InvocationsCalculator.java
Patch:
@@ -12,8 +12,6 @@
 //TODO refactor to an object that holds Invocations and exposes some calculations
 public class InvocationsCalculator {
 
-    public InvocationsCalculator() {}
-    
     public int countActual(List<Invocation> invocations, InvocationMatcher wanted) {
         int actual = 0;
         for (Invocation registeredInvocation : invocations) {

File: src/org/mockito/internal/invocation/InvocationsChunker.java
Patch:
@@ -20,7 +20,7 @@ public InvocationsChunker(InvocationsFinder invocationsFinder) {
 
     /**
      * chunk maybe empty, may have single invocation (usal case), or have
-     * multiple the same invocations
+     * multiple the same invocations.
      * 
      * @param mocks
      * @return

File: src/org/mockito/internal/matchers/Any.java
Patch:
@@ -9,9 +9,7 @@ public class Any implements IArgumentMatcher {
 
     public static final Any ANY = new Any();    
     
-    private Any() {
-        
-    }
+    private Any() {}
     
     public boolean matches(Object actual) {
         return true;

File: src/org/mockito/internal/matchers/Equals.java
Patch:
@@ -40,8 +40,9 @@ protected final Object getWanted() {
 
     @Override
     public boolean equals(Object o) {
-        if (o == null || !this.getClass().equals(o.getClass()))
+        if (o == null || !this.getClass().equals(o.getClass())) {
             return false;
+        }
         Equals other = (Equals) o;
         return this.wanted == null && other.wanted == null
                 || this.wanted != null

File: src/org/mockito/internal/progress/LastArguments.java
Patch:
@@ -17,7 +17,7 @@
 
 public class LastArguments {
     
-    private static ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();
+    private static final ThreadLocal<LastArguments> INSTANCE = new ThreadLocal<LastArguments>();
     
     private Stack<IArgumentMatcher> matcherStack = new Stack<IArgumentMatcher>();
 

File: src/org/mockito/internal/stubbing/EmptyReturnValues.java
Patch:
@@ -26,7 +26,7 @@ public static Object emptyValueFor(Class<?> type) {
     }
     
     @SuppressWarnings("unchecked")
-    protected static Map<Class, Object> emptyReturnValueToType = new HashMap<Class, Object>();
+    private static Map<Class, Object> emptyReturnValueToType = new HashMap<Class, Object>();
     
     static {
         emptyReturnValueToType.put(Collection.class, new LinkedList<Object>());

File: src/org/mockito/internal/verification/Verifier.java
Patch:
@@ -11,7 +11,5 @@
 import org.mockito.internal.progress.VerificationMode;
 
 public interface Verifier {
-
-    abstract void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode);
-    
+    void verify(List<Invocation> invocations, InvocationMatcher wanted, VerificationMode mode);
 }

File: test/org/mockito/MockitoTest.java
Patch:
@@ -20,7 +20,7 @@ public void shouldRemoveStubbedControlFromStateWhenStubbing() {
         List mock = Mockito.mock(List.class);
         Mockito.stub(mock.add("test")).andReturn(true);
         
-        assertNull(Mockito.mockingProgress.pullStubable());
+        assertNull(Mockito.MOCKING_PROGRESS.pullStubable());
     }
     
     @Test(expected=NotAMockException.class)

File: test/org/mockito/RequiresValidState.java
Patch:
@@ -8,12 +8,12 @@
 
 /**
  * the easiest way to make sure that tests clean up invalid state is to require
- * valid state for all tests
+ * valid state for all tests.
  */
 public class RequiresValidState {
 
     @Before
     public void requiresValidState() {
-        Mockito.mockingProgress.validateState();
+        Mockito.MOCKING_PROGRESS.validateState();
     }
 }
\ No newline at end of file

File: test/org/mockito/StateResetter.java
Patch:
@@ -7,6 +7,6 @@
 public class StateResetter {
     
     public static void reset() {
-        Mockito.mockingProgress.reset();
+        Mockito.MOCKING_PROGRESS.reset();
     }
 }

File: test/org/mockito/exceptions/parents/MockitoAssertionErrorTest.java
Patch:
@@ -4,7 +4,8 @@
  */
 package org.mockito.exceptions.parents;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;

File: test/org/mockito/exceptions/parents/MockitoExceptionTest.java
Patch:
@@ -4,7 +4,8 @@
  */
 package org.mockito.exceptions.parents;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;

File: test/org/mockito/exceptions/parents/StackTraceBuilder.java
Patch:
@@ -4,7 +4,8 @@
  */
 package org.mockito.exceptions.parents;
 
-import java.util.*;
+import java.util.Arrays;
+import java.util.List;
 
 public class StackTraceBuilder {
     
@@ -18,7 +19,7 @@ public StackTraceBuilder methods(String ... methods) {
     public StackTraceElement[] toStackTrace() {
         StackTraceElement[] trace = new StackTraceElement[methods.length];
         
-        for (int i = 0 ; i < methods.length ; i++) {
+        for (int i = 0; i < methods.length; i++) {
             trace[i] = new StackTraceElement("DummyClass", methods[i], "DummyClass.java", 100);
         }
         

File: test/org/mockito/exceptions/parents/StackTraceRemoverTest.java
Patch:
@@ -7,7 +7,8 @@
 import static org.junit.Assert.assertThat;
 import static org.mockito.util.ExtraMatchers.collectionHasExactlyInOrder;
 
-import java.util.*;
+import java.util.LinkedList;
+import java.util.List;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;

File: test/org/mockito/internal/invocation/InvocationBuilder.java
Patch:
@@ -5,10 +5,9 @@
 package org.mockito.internal.invocation;
 
 import java.lang.reflect.Method;
-import java.util.*;
+import java.util.LinkedList;
+import java.util.List;
 
-import org.mockito.internal.invocation.Invocation;
-import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")

File: test/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -4,7 +4,9 @@
  */
 package org.mockito.internal.matchers;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.fail;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;

File: test/org/mockito/internal/progress/MockingProgressImplTest.java
Patch:
@@ -12,9 +12,6 @@
 import org.junit.Test;
 import org.mockito.RequiresValidState;
 import org.mockito.exceptions.parents.MockitoException;
-import org.mockito.internal.progress.MockingProgress;
-import org.mockito.internal.progress.MockingProgressImpl;
-import org.mockito.internal.progress.VerificationMode;
 
 public class MockingProgressImplTest extends RequiresValidState {
 

File: test/org/mockito/internal/progress/VerificationModeTest.java
Patch:
@@ -4,14 +4,15 @@
  */
 package org.mockito.internal.progress;
 
+import static java.util.Arrays.asList;
 import static org.junit.Assert.assertEquals;
-import static java.util.Arrays.*;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.internal.progress.VerificationMode.atLeastOnce;
 import static org.mockito.internal.progress.VerificationMode.noMoreInteractions;
-import static org.mockito.internal.progress.VerificationMode.*;
+import static org.mockito.internal.progress.VerificationMode.strict;
+import static org.mockito.internal.progress.VerificationMode.times;
 
 import org.junit.Test;
 import org.mockito.RequiresValidState;

File: test/org/mockito/internal/verification/NoMoreInvocationsVerifierTest.java
Patch:
@@ -1,6 +1,8 @@
 package org.mockito.internal.verification;
 
 import static java.util.Arrays.asList;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertSame;
 
 import java.util.List;
 
@@ -13,7 +15,6 @@
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationsCalculator;
 import org.mockito.internal.progress.VerificationMode;
-import static org.junit.Assert.*;
 
 public class NoMoreInvocationsVerifierTest extends RequiresValidState {
 

File: test/org/mockitousage/IMethods.java
Patch:
@@ -50,11 +50,11 @@ public interface IMethods {
 
     String oneArg(String value);
 
-    public String throwsNothing(boolean value);
+    String throwsNothing(boolean value);
 
-    public String throwsIOException(int count) throws IOException;
+    String throwsIOException(int count) throws IOException;
 
-    public String throwsError(int count) throws Error;
+    String throwsError(int count);
 
     String simpleMethod();
     

File: test/org/mockito/internal/invocation/InvocationsPrinterTest.java
Patch:
@@ -5,8 +5,9 @@
 import java.lang.reflect.Method;
 
 import org.junit.Test;
+import org.mockito.RequiresValidState;
 
-public class InvocationsPrinterTest {
+public class InvocationsPrinterTest extends RequiresValidState{
 
     @Test
     public void shouldPrintWantedAndActualInvocation() throws Exception {

File: src/org/mockito/internal/invocation/InvocationMatcher.java
Patch:
@@ -51,11 +51,11 @@ public boolean matchesButMocksAreDifferent(Invocation actual) {
             && argumentsMatch(actual.getArguments());
     }
     
-    public boolean matchesButNotMethodDeclaredClass(Invocation actual) {
+    public boolean matchesMockArgsAndMethodNameButMethodNotEqual(Invocation actual) {
         return invocation.getMock().equals(actual.getMock())
             && argumentsMatch(actual.getArguments())
             && invocation.getMethod().getName().equals(actual.getMethod().getName())
-            && invocation.getMethod().getDeclaringClass() != actual.getMethod().getDeclaringClass();
+            && !invocation.getMethod().equals(actual.getMethod());
     }
 
     private boolean argumentsMatch(Object[] arguments) {

File: test/org/mockito/internal/invocation/InvocationsCalculatorTest.java
Patch:
@@ -24,9 +24,9 @@ public class InvocationsCalculatorTest extends RequiresValidState {
 
     @Before
     public void setup() throws Exception {
-        simpleMethodInvocation = new InvocationBuilder().method("simpleMethod").seq(1).toInvocation();
-        simpleMethodInvocationTwo = new InvocationBuilder().method("simpleMethod").seq(2).toInvocation();
-        differentMethodInvocation = new InvocationBuilder().method("differentMethod").seq(3).toInvocation();
+        simpleMethodInvocation = new InvocationBuilder().simpleMethod().seq(1).toInvocation();
+        simpleMethodInvocationTwo = new InvocationBuilder().simpleMethod().seq(2).toInvocation();
+        differentMethodInvocation = new InvocationBuilder().differentMethod().seq(3).toInvocation();
         calculator = new InvocationsCalculator(Arrays.asList(simpleMethodInvocation, simpleMethodInvocationTwo, differentMethodInvocation));
     }
     

File: test/org/mockito/internal/stubbing/StubberTest.java
Patch:
@@ -26,7 +26,7 @@ public void setup() {
         stubber = new Stubber(state);
         stubber.setInvocationForPotentialStubbing(new InvocationBuilder().toInvocationMatcher());
         
-        simpleMethod = new InvocationBuilder().method("simpleMethod").toInvocation();
+        simpleMethod = new InvocationBuilder().simpleMethod().toInvocation();
     }
 
     @Test
@@ -52,7 +52,7 @@ public void shouldGetResultsForMethods() throws Throwable {
         stubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));
         stubber.addReturnValue("simpleMethod");
         
-        Invocation differentMethod = new InvocationBuilder().method("differentMethod").toInvocation();
+        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();
         stubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));
         stubber.addThrowable(new MyException());
         
@@ -69,7 +69,7 @@ public void shouldGetEmptyResultIfMethodsDontMatch() throws Throwable {
         stubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));
         stubber.addReturnValue("simpleMethod");
         
-        Invocation differentMethod = new InvocationBuilder().method("differentMethod").toInvocation();
+        Invocation differentMethod = new InvocationBuilder().differentMethod().toInvocation();
         
         assertEquals(null, stubber.resultFor(differentMethod));
     }

File: test/org/mockitousage/binding/BridgeMethodPuzzleTest.java
Patch:
@@ -30,7 +30,7 @@ public String say(T t) {
     private class Sub extends Super<String> {
         @Override
         public String say(String t)  {
-            return "Sub says: " + t;
+            return "Dummy says: " + t;
         }
     }
 
@@ -48,15 +48,15 @@ private void say(String string) {
     public void shouldHaveBridgeMethod() throws Exception {
         Super s = new Sub();
         
-        assertEquals("Sub says: Hello", s.say("Hello"));
+        assertEquals("Dummy says: Hello", s.say("Hello"));
         
         assertThat(Sub.class, hasBridgeMethod("say"));
         assertThat(s, hasBridgeMethod("say"));
     }
     
     @Test
     public void shouldVerifyCorrectlyWhenBridgeMethodCalled() throws Exception {
-        //Super has following erasure: say(Object) which differs from Sub.say(String)
+        //Super has following erasure: say(Object) which differs from Dummy.say(String)
         //mock has to detect it and do the super.say()
         //see MockFactory.java
         Sub s = mock(Sub.class);

File: test/org/mockito/internal/invocation/InvocationsCalculatorTest.java
Patch:
@@ -7,14 +7,15 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.RequiresValidState;
 import org.mockito.exceptions.parents.HasStackTrace;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationMatcher;
 import org.mockito.internal.invocation.InvocationsCalculator;
 import org.mockito.internal.progress.OngoingVerifyingMode;
 
 
-public class InvocationsCalculatorTest {
+public class InvocationsCalculatorTest extends RequiresValidState {
     
     private InvocationsCalculator calculator;
     private Invocation simpleMethodInvocation;

File: test/org/mockito/internal/invocation/InvocationsChunkerTest.java
Patch:
@@ -9,8 +9,9 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.RequiresValidState;
 
-public class InvocationsChunkerTest {
+public class InvocationsChunkerTest extends RequiresValidState {
 
     private InvocationsChunker chunker;
     private Invocation simpleMethodInvocation;

File: test/org/mockito/internal/invocation/InvocationsMarkerTest.java
Patch:
@@ -10,9 +10,10 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.RequiresValidState;
 import org.mockito.internal.progress.OngoingVerifyingMode;
 
-public class InvocationsMarkerTest {
+public class InvocationsMarkerTest extends RequiresValidState {
 
     private InvocationsMarker marker;
     private Invocation simpleMethodInvocation;

File: test/org/mockito/internal/verification/VerifyingRecorderTest.java
Patch:
@@ -15,6 +15,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.RequiresValidState;
 import org.mockito.internal.invocation.Invocation;
 import org.mockito.internal.invocation.InvocationBuilder;
 import org.mockito.internal.invocation.InvocationMatcher;
@@ -23,7 +24,7 @@
 import org.mockito.internal.invocation.InvocationsMarker;
 import org.mockito.internal.progress.OngoingVerifyingMode;
 
-public class VerifyingRecorderTest {
+public class VerifyingRecorderTest extends RequiresValidState {
     
     private VerifyingRecorder recorder;
     private VerifierStub verifier;

File: src/org/mockito/internal/MockControl.java
Patch:
@@ -27,7 +27,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         
         if (verifyingMode != null) {
             behavior.verify(invocationWithMatchers, verifyingMode);
-            return ToTypeMappings.emptyReturnValueFor(method.getReturnType());
+            return EmptyReturnValues.emptyValueFor(method.getReturnType());
         } 
         
         stubber.setInvocationForPotentialStubbing(invocationWithMatchers);

File: src/org/mockito/internal/StubbedInvocationMatcher.java
Patch:
@@ -4,12 +4,11 @@
  */
 package org.mockito.internal;
 
-
-public class StubbedInvocation extends InvocationMatcher {
+public class StubbedInvocationMatcher extends InvocationMatcher {
 
     private final Result result;
 
-    public StubbedInvocation(InvocationMatcher invocation, Result result) {
+    public StubbedInvocationMatcher(InvocationMatcher invocation, Result result) {
         super(invocation.invocation, invocation.matchers);
         this.result = result;
     }

File: test/org/mockito/internal/InvocationBuilder.java
Patch:
@@ -66,7 +66,7 @@ public InvocationBuilder method(Method method) {
         return this;
     }
 
-    public InvocationMatcher toMatchingInvocation() {
+    public InvocationMatcher toInvocationMatcher() {
         return new InvocationMatcher(toInvocation());
     }
 }

File: test/org/mockitousage/IMethods.java
Patch:
@@ -53,9 +53,9 @@ public interface IMethods {
 
     public String throwsError(int count) throws Error;
 
-    boolean simpleMethod();
+    String simpleMethod();
     
-    void differentMethod();
+    String differentMethod();
 
     String simpleMethod(String argument);
     

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -35,7 +35,7 @@ public void run() {
                     MockitoBehaviorTest.class, 
                     MockitoStateTest.class, 
                     RegisteredInvocationsTest.class, 
-                    ToTypeMappingsTest.class, 
+                    EmptyReturnValuesTest.class, 
                     VerifyingModeTest.class, 
                     InvocationTest.class, 
                     MockUtilTest.class, 

File: src/org/mockito/exceptions/Exceptions.java
Patch:
@@ -4,10 +4,12 @@
  */
 package org.mockito.exceptions;
 
-import static org.mockito.exceptions.Strings.join;
+import static org.mockito.exceptions.StringJoiner.join;
 
 import org.mockito.exceptions.cause.*;
+import org.mockito.exceptions.misusing.*;
 import org.mockito.exceptions.parents.*;
+import org.mockito.exceptions.verification.*;
 
 /**
  * All messages in one place makes it easier to tune and amend the text. 

File: src/org/mockito/exceptions/StringJoiner.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.exceptions;
 
-class Strings {
+class StringJoiner {
 
     static String join(String ... linesToBreak) {
         StringBuilder out = new StringBuilder("\n");

File: src/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.parents.MockitoException;
 

File: src/org/mockito/exceptions/misusing/MissingMethodInvocationException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.parents.MockitoException;
 

File: src/org/mockito/exceptions/misusing/NotAMockException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.parents.MockitoException;
 

File: src/org/mockito/exceptions/misusing/UnfinishedStubbingException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.parents.MockitoException;
 

File: src/org/mockito/exceptions/misusing/UnfinishedVerificationException.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.misusing;
 
 import org.mockito.exceptions.parents.MockitoException;
 

File: src/org/mockito/exceptions/verification/NumberOfInvocationsError.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.parents.MockitoAssertionError;
 

File: src/org/mockito/exceptions/verification/StrictVerificationError.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.parents.MockitoAssertionError;
 

File: src/org/mockito/exceptions/verification/TooLittleActualInvocationsError.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.parents.MockitoAssertionError;
 

File: src/org/mockito/exceptions/verification/TooManyActualInvocationsError.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.parents.MockitoAssertionError;
 

File: src/org/mockito/exceptions/verification/VerificationError.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.verification;
 
 import org.mockito.exceptions.parents.MockitoAssertionError;
 

File: src/org/mockito/internal/LastArguments.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.*;
 
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.internal.matchers.*;
 
 public class LastArguments {

File: src/org/mockito/internal/MockControl.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.*;
 
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.internal.matchers.*;
 
 public class MockControl<T> implements MockAwareInvocationHandler<T>, MockitoExpectation<T>, VoidMethodExpectation<T>, MethodSelector<T> {

File: src/org/mockito/internal/MockUtil.java
Patch:
@@ -6,7 +6,7 @@
 
 import net.sf.cglib.proxy.*;
 
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.internal.MockFactory.MockMethodInterceptor;
 

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -99,6 +99,7 @@ private void reportStrictOrderDiscrepancy(ExpectedInvocation wantedInvocation, I
         Exceptions.strictlyWantedInvocationDiffersFromActual(wanted, actual);
     }
 
+    //TODO Cyclomatic Complexity = 10 :|
     private void checkOrderOfInvocations(ExpectedInvocation wanted, VerifyingMode mode) {
         if (!mode.orderOfInvocationsMatters()) {
             return;

File: test/org/mockito/MockUtilTest.java
Patch:
@@ -12,7 +12,7 @@
 import net.sf.cglib.proxy.*;
 
 import org.junit.Test;
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockito/MockitoTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.List;
 
 import org.junit.*;
-import org.mockito.exceptions.NotAMockException;
+import org.mockito.exceptions.misusing.NotAMockException;
 import org.mockito.internal.*;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockito/exceptions/ExceptionsTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockito.exceptions;
 
 import org.junit.Test;
+import org.mockito.exceptions.verification.TooLittleActualInvocationsError;
 import org.mockito.util.RequiresValidState;
 
 

File: test/org/mockito/exceptions/parents/MockitoAssertionErrorTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.Assert.*;
 
 import org.junit.Test;
-import org.mockito.exceptions.parents.MockitoAssertionError;
 import org.mockito.util.RequiresValidState;
 
 public class MockitoAssertionErrorTest extends RequiresValidState {

File: test/org/mockito/exceptions/parents/MockitoExceptionTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.junit.Assert.*;
 
 import org.junit.Test;
-import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 
 public class MockitoExceptionTest extends RequiresValidState {

File: test/org/mockito/exceptions/parents/StackTraceRemoverTest.java
Patch:
@@ -6,7 +6,6 @@
 import java.util.*;
 
 import org.junit.Test;
-import org.mockito.exceptions.parents.CommonStackTraceRemover;
 import org.mockito.util.RequiresValidState;
 
 public class StackTraceRemoverTest extends RequiresValidState {

File: test/org/mockito/internal/MockControlTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.mockito.exceptions.InvalidUseOfMatchersException;
+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.internal.matchers.Equals;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockito/util/RequiresValidState.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito.util;
 
 import org.junit.Before;
-import org.mockito.internal.*;
+import org.mockito.internal.MockitoState;
 
 /**
  * the easiest way to make sure that tests clean up invalid state is to require

File: test/org/mockitousage/InvalidStateDetectionTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.mockito.Mockito.*;
 
 import org.junit.*;
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.misusing.*;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockitousage/InvalidUsageTest.java
Patch:
@@ -8,7 +8,7 @@
 
 import org.junit.*;
 import org.mockito.Strictly;
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.misusing.MissingMethodInvocationException;
 import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;
 import org.mockito.*;
-import org.mockito.exceptions.*;
 import org.mockito.exceptions.parents.*;
 import org.mockito.internal.*;
 import org.mockito.internal.matchers.EqualsTest;

File: test/org/mockitousage/StackTrackeChangingTest.java
Patch:
@@ -10,7 +10,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 
 public class StackTrackeChangingTest extends RequiresValidState {

File: test/org/mockitousage/StackTrackeFilteringTest.java
Patch:
@@ -10,8 +10,8 @@
 
 import org.junit.*;
 import org.mockito.*;
-import org.mockito.exceptions.*;
 import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockitousage/UsingVarargsTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 
 public class UsingVarargsTest extends RequiresValidState {

File: test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.Test;
 import org.mockito.Strictly;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 
 public class IncorectBindingPuzzleFixedTest extends RequiresValidState {

File: test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.*;
 import org.mockito.*;
-import org.mockito.exceptions.InvalidUseOfMatchersException;
+import org.mockito.exceptions.misusing.InvalidUseOfMatchersException;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;

File: test/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -14,7 +14,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java
Patch:
@@ -10,7 +10,7 @@
 import static org.mockito.Mockito.*;
 
 import org.junit.*;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -9,7 +9,7 @@
 import static org.mockito.Mockito.*;
 
 import org.junit.*;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -11,8 +11,8 @@
 import java.util.*;
 
 import org.junit.*;
-import org.mockito.exceptions.*;
 import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings({"serial", "unchecked"})

File: test/org/mockitousage/verification/AtLeastOnceVerificationTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings("unchecked")

File: test/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.verification.*;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings("unchecked")

File: test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.*;
 import org.mockito.*;
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.verification.*;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;

File: test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
Patch:
@@ -5,15 +5,15 @@
 package org.mockitousage.verification;
 
 import static org.junit.Assert.*;
-import static org.mockito.util.ExtraMatchers.*;
-import static org.mockito.CrazyMatchers.*;
+import static org.mockito.CrazyMatchers.aryEq;
 import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.*;
+import static org.mockito.util.ExtraMatchers.*;
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.*;
 import org.mockito.exceptions.cause.*;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -4,15 +4,15 @@
  */
 package org.mockitousage.verification;
 
-import static org.mockito.util.ExtraMatchers.*;
 import static org.junit.Assert.*;
+import static org.mockito.util.ExtraMatchers.messageContains;
 
 import java.util.LinkedList;
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.*;
 import org.mockito.exceptions.cause.*;
+import org.mockito.exceptions.verification.*;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings("unchecked")

File: test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -10,7 +10,7 @@
 import java.util.*;
 
 import org.junit.*;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings("unchecked")

File: test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -9,8 +9,8 @@
 
 import org.junit.*;
 import org.mockito.Strictly;
-import org.mockito.exceptions.*;
 import org.mockito.exceptions.parents.MockitoException;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/verification/VerificationInOrderTest.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.junit.*;
 import org.mockito.Strictly;
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.verification.*;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.junit.*;
 import org.mockito.*;
-import org.mockito.exceptions.VerificationError;
+import org.mockito.exceptions.verification.VerificationError;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: src/org/mockito/exceptions/Exceptions.java
Patch:
@@ -7,6 +7,7 @@
 import static org.mockito.exceptions.Strings.join;
 
 import org.mockito.exceptions.cause.*;
+import org.mockito.exceptions.parents.*;
 
 /**
  * All messages in one place makes it easier to tune and amend the text. 

File: src/org/mockito/exceptions/InvalidUseOfMatchersException.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoException;
+
 public class InvalidUseOfMatchersException extends MockitoException {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/MissingMethodInvocationException.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoException;
+
 public class MissingMethodInvocationException extends MockitoException {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/NotAMockException.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoException;
+
 public class NotAMockException extends MockitoException {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/NumberOfInvocationsError.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoAssertionError;
+
 public class NumberOfInvocationsError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/StrictVerificationError.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoAssertionError;
+
 public class StrictVerificationError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/TooLittleActualInvocationsError.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoAssertionError;
+
 public class TooLittleActualInvocationsError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/TooManyActualInvocationsError.java
Patch:
@@ -1,5 +1,7 @@
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoAssertionError;
+
 public class TooManyActualInvocationsError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/UnfinishedStubbingException.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoException;
+
 public class UnfinishedStubbingException extends MockitoException {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/UnfinishedVerificationException.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoException;
+
 public class UnfinishedVerificationException extends MockitoException {
     
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/VerificationError.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.mockito.exceptions;
 
+import org.mockito.exceptions.parents.MockitoAssertionError;
+
 
 public class VerificationError extends MockitoAssertionError {
 

File: src/org/mockito/exceptions/cause/FirstUndesiredInvocation.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 
 public class FirstUndesiredInvocation extends MockitoException {
 

File: src/org/mockito/exceptions/cause/TooLittleInvocations.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 
 public class TooLittleInvocations extends MockitoException {
 

File: src/org/mockito/exceptions/cause/UndesiredInvocation.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 
 public class UndesiredInvocation extends MockitoException {
 

File: src/org/mockito/exceptions/cause/WantedDiffersFromActual.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.exceptions.cause;
 
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 
 public class WantedDiffersFromActual extends MockitoException {
 

File: src/org/mockito/exceptions/parents/CommonStackTraceRemover.java
Patch:
@@ -1,7 +1,8 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 import java.util.*;
 
+
 public class CommonStackTraceRemover {
 
     public void remove(HasStackTrace hasStackTrace, List<StackTraceElement> causeStackTrace) {

File: src/org/mockito/exceptions/parents/HasStackTrace.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 public interface HasStackTrace {
     

File: src/org/mockito/exceptions/parents/MockitoAssertionError.java
Patch:
@@ -2,10 +2,11 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 import java.util.Arrays;
 
+
 public class MockitoAssertionError extends AssertionError implements HasStackTrace {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/exceptions/parents/MockitoException.java
Patch:
@@ -2,7 +2,8 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
+
 
 public class MockitoException extends RuntimeException implements HasStackTrace {
 

File: src/org/mockito/exceptions/parents/StackTraceFilter.java
Patch:
@@ -2,10 +2,11 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 import java.util.*;
 
+
 public class StackTraceFilter {
     
     public boolean isLastStackElementToRemove(StackTraceElement e) {

File: src/org/mockito/internal/Invocation.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.Method;
 import java.util.*;
 
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.*;
 import org.mockito.internal.matchers.*;
 
 public class Invocation {

File: src/org/mockito/internal/MockUtil.java
Patch:
@@ -7,6 +7,7 @@
 import net.sf.cglib.proxy.*;
 
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.internal.MockFactory.MockMethodInterceptor;
 
 public class MockUtil {

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.*;
 
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.HasStackTrace;
 
 public class MockitoBehavior<T> {
 

File: src/org/mockito/internal/RegisteredInvocations.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.*;
 
-import org.mockito.exceptions.HasStackTrace;
+import org.mockito.exceptions.parents.HasStackTrace;
 
 public class RegisteredInvocations {
     

File: src/org/mockito/internal/Result.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.mockito.internal;
 
-import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.*;
 
 @SuppressWarnings("unchecked")
 public class Result implements IAnswer {

File: src/org/mockito/internal/VerifyingMode.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.*;
 
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 
 public class VerifyingMode {
 

File: test/org/mockito/MockUtilTest.java
Patch:
@@ -13,6 +13,7 @@
 
 import org.junit.Test;
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 
 public class MockUtilTest extends RequiresValidState {

File: test/org/mockito/exceptions/ExceptionsTest.java
Patch:
@@ -1,9 +1,10 @@
 package org.mockito.exceptions;
 
 import org.junit.Test;
+import org.mockito.util.RequiresValidState;
 
 
-public class ExceptionsTest {
+public class ExceptionsTest extends RequiresValidState {
 
     @Test(expected=TooLittleActualInvocationsError.class)
     public void shouldLetPassingNullLastActualStackTrace() throws Exception {

File: test/org/mockito/exceptions/MockitoExceptionTest.java
Patch:
@@ -7,9 +7,10 @@
 import static org.junit.Assert.*;
 
 import org.junit.Test;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 
-public class MockitoErrorTest extends RequiresValidState {
+public class MockitoExceptionTest extends RequiresValidState {
 
     private void throwIt() {
         throw new MockitoException("boom");

File: test/org/mockito/exceptions/parents/MockitoAssertionErrorTest.java
Patch:
@@ -2,11 +2,12 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 import static org.junit.Assert.*;
 
 import org.junit.Test;
+import org.mockito.exceptions.parents.MockitoAssertionError;
 import org.mockito.util.RequiresValidState;
 
 public class MockitoAssertionErrorTest extends RequiresValidState {

File: test/org/mockito/exceptions/parents/StackTraceBuilder.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 import java.util.*;
 

File: test/org/mockito/exceptions/parents/StackTraceRemoverTest.java
Patch:
@@ -1,11 +1,12 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.parents;
 
 import static org.junit.Assert.assertThat;
 import static org.mockito.util.ExtraMatchers.collectionIsExactlyInOrder;
 
 import java.util.*;
 
 import org.junit.Test;
+import org.mockito.exceptions.parents.CommonStackTraceRemover;
 import org.mockito.util.RequiresValidState;
 
 public class StackTraceRemoverTest extends RequiresValidState {

File: test/org/mockito/internal/MockitoStateTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 
 public class MockitoStateTest extends RequiresValidState {

File: test/org/mockito/internal/RegisteredInvocationsTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.*;
 
 import org.junit.*;
-import org.mockito.exceptions.HasStackTrace;
+import org.mockito.exceptions.parents.HasStackTrace;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings("unchecked")

File: test/org/mockito/internal/VerifyingModeTest.java
Patch:
@@ -7,7 +7,7 @@
 import static org.junit.Assert.*;
 
 import org.junit.Test;
-import org.mockito.exceptions.MockitoException;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 
 public class VerifyingModeTest extends RequiresValidState {

File: test/org/mockitousage/InvalidUsageTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.*;
 import org.mockito.Strictly;
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.runner.notification.Failure;
 import org.mockito.*;
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoAssertionErrorTest;
 import org.mockito.internal.*;
 import org.mockito.internal.matchers.EqualsTest;
 import org.mockito.util.RequiresValidState;
@@ -40,7 +41,7 @@ public void run() {
                     InvocationTest.class, 
                     MockUtilTest.class, 
                     MockitoAssertionErrorTest.class, 
-                    MockitoErrorTest.class, 
+                    MockitoExceptionTest.class, 
                     BridgeMethodPuzzleTest.class, 
                     IncorectBindingPuzzleFixedTest.class, 
                     UsingVarargsTest.class, 

File: test/org/mockitousage/StackTrackeFilteringTest.java
Patch:
@@ -11,6 +11,7 @@
 import org.junit.*;
 import org.mockito.*;
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.internal.StateResetter;
 import org.mockito.util.RequiresValidState;
 

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -12,6 +12,7 @@
 
 import org.junit.*;
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 
 @SuppressWarnings({"serial", "unchecked"})

File: test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.junit.*;
 import org.mockito.Strictly;
 import org.mockito.exceptions.*;
+import org.mockito.exceptions.parents.MockitoException;
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 

File: test/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -95,7 +95,7 @@ public void shouldDetectWhenInvokedMoreThanOnce() throws Exception {
         try {
             verify(mock).clear();
             fail();
-        } catch (NumberOfInvocationsError e) {};
+        } catch (TooManyActualInvocationsError e) {};
     }
 
     @Test

File: src/org/mockito/exceptions/cause/UndesiredInvocation.java
Patch:
@@ -1,4 +1,6 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.cause;
+
+import org.mockito.exceptions.MockitoException;
 
 public class UndesiredInvocation extends MockitoException {
 

File: src/org/mockito/exceptions/cause/WantedDiffersFromActual.java
Patch:
@@ -1,4 +1,6 @@
-package org.mockito.exceptions;
+package org.mockito.exceptions.cause;
+
+import org.mockito.exceptions.MockitoException;
 
 public class WantedDiffersFromActual extends MockitoException {
 

File: test/org/mockitousage/MultiThreadedTest.java
Patch:
@@ -53,7 +53,7 @@ public void run() {
                     AtLeastOnceVerificationTest.class, 
                     BasicVerificationTest.class, 
                     ExactNumberOfTimesVerificationTest.class, 
-                    NiceMessagesWhenVerificationFailsTest.class, 
+                    DescriptiveMessagesWhenVerificationFailsTest.class, 
                     NoMoreInteractionsVerificationTest.class, 
                     VerificationInOrderMixedWithOrdiraryVerificationTest.class, 
                     VerificationInOrderTest.class, 
@@ -66,7 +66,7 @@ public void run() {
                     MockitoTest.class,
                     InvalidUsageTest.class,
                     InvalidUseOfMatchersTest.class,
-                    NiceMessagesOnStrictOrderErrorsTest.class,
+                    DescriptiveMessagesOnStrictOrderErrorsTest.class,
                     InvalidStateDetectionTest.class,
                     StackTrackeFilteringTest.class
                 );

File: test/org/mockitousage/verification/DescriptiveMessagesOnStrictOrderErrorsTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.util.RequiresValidState;
 import org.mockitousage.IMethods;
 
-public class NiceMessagesOnStrictOrderErrorsTest extends RequiresValidState {
+public class DescriptiveMessagesOnStrictOrderErrorsTest extends RequiresValidState {
     
     private IMethods one;
     private IMethods two;

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -126,13 +126,14 @@ public void verifyNoMoreInteractions() {
     }
     
     public void verifyZeroInteractions() {
+        //TODO move message to exceptions
         verifyNoMoreInteractions("Zero interactions wanted");
     }
     
     private void verifyNoMoreInteractions(String message) {
         Invocation unverified = registeredInvocations.getFirstUnverified();
         if (unverified != null) {
-            Exceptions.noMoreInteractionsWanted(unverified.toString(), message);
+            Exceptions.noMoreInteractionsWanted(unverified.toString(), message, unverified.toString(), unverified.getStackTrace());
         }
     }
 

File: src/org/mockito/exceptions/MockitoException.java
Patch:
@@ -15,7 +15,7 @@ public MockitoException(String message) {
 
         unfilteredStackTrace = getStackTrace();
         
-        MockitoStackTraceFilter filter = new MockitoStackTraceFilter();
+        StackTraceFilter filter = new StackTraceFilter();
         filter.filterStackTrace(this);
     }
     

File: src/org/mockito/exceptions/StackTraceFilter.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.*;
 
-public class MockitoStackTraceFilter {
+public class StackTraceFilter {
     
     public boolean isLastStackElementToRemove(StackTraceElement e) {
         boolean fromMockObject = e.getClassName().contains("$$EnhancerByCGLIB$$");

File: src/org/mockito/exceptions/VerificationError.java
Patch:
@@ -4,7 +4,6 @@
  */
 package org.mockito.exceptions;
 
-import java.util.*;
 
 public class VerificationError extends MockitoAssertionError {
 
@@ -14,7 +13,7 @@ public VerificationError(String message) {
         super(message);
     }
 
-    public VerificationError(String message, List<StackTraceElement> invocationStackTrace) {
-        super(message, invocationStackTrace);
+    public VerificationError(String message, Throwable cause) {
+        super(message, cause);
     }
 }

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -76,9 +76,7 @@ private void reportDiscrepancy(ExpectedInvocation wantedInvocation, Invocation a
             actual = actualInvocation.toStringWithArgumentTypes();
         }
         
-        List<StackTraceElement> elements = new LinkedList<StackTraceElement>(Arrays.asList(actualInvocation.getStackTrace()));
-        
-        throw Exceptions.wantedInvocationDiffersFromActual(wanted, actual, elements);
+        Exceptions.wantedInvocationDiffersFromActual(wanted, actual, actualInvocation.getStackTrace());
     }
     
     private void reportStrictOrderDiscrepancy(ExpectedInvocation wantedInvocation, Invocation actualInvocation) {

File: src/org/mockito/internal/RegisteredInvocations.java
Patch:
@@ -6,8 +6,6 @@
 
 import java.util.*;
 
-import org.mockito.exceptions.MockitoException;
-
 public class RegisteredInvocations {
     
     private List<Invocation> registeredInvocations = new LinkedList<Invocation>();

File: src/org/mockito/internal/Result.java
Patch:
@@ -18,9 +18,10 @@ private Result(IAnswer value) {
     public static Result createThrowResult(final Throwable throwable) {
         return new Result(new IAnswer<Object>() {
             public Object answer() throws Throwable {
-                MockitoStackTraceFilter filter = new MockitoStackTraceFilter();
+                StackTraceFilter filter = new StackTraceFilter();
                 final Throwable filtered = throwable.fillInStackTrace();
                 
+                //TODO unit test?
                 filter.filterStackTrace(new HasStackTrace() {
                     public StackTraceElement[] getStackTrace() {
                         return filtered.getStackTrace();

File: test/org/mockito/InvocationTest.java
Patch:
@@ -17,15 +17,15 @@ public class InvocationTest {
     private Invocation call;
     private Invocation equalCall;
     private Invocation nonEqualCall;
-    private Invocation newStringObjectShouldNotBeEqual;
+    private Invocation callWithNewStringInstance;
 
     @Before
     public void setup() throws SecurityException, NoSuchMethodException {
         call            = new InvocationBuilder().args(" ").mock("mock").seq(1).toInvocation();
         equalCall       = new InvocationBuilder().args(" ").mock("mock").seq(2).toInvocation();
         nonEqualCall    = new InvocationBuilder().args("X").mock("mock").seq(3).toInvocation();
         
-        newStringObjectShouldNotBeEqual    = new InvocationBuilder().args(new String(" ")).mock("mock").seq(4).toInvocation();
+        callWithNewStringInstance    = new InvocationBuilder().args(new String(" ")).mock("mock").seq(4).toInvocation();
     }
 
     @Test
@@ -34,7 +34,7 @@ public void shouldKnowIfIsEqualTo() {
         assertFalse(call.equals(""));
         assertTrue(call.equals(equalCall));
         assertFalse(call.equals(nonEqualCall));
-        assertFalse(call.equals(newStringObjectShouldNotBeEqual));
+        assertTrue(call.equals(callWithNewStringInstance));
     }
     
     @Test

File: test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java
Patch:
@@ -220,6 +220,4 @@ public void shouldPrintMethodNicelyWhenMatcherUsed() throws Exception {
             assertEquals(expectedMessage, actualMessage);         
         }
     }
-    
-    //TODO do we need nice message when wanted number of invocations = 0?
 }

File: src/org/mockito/exceptions/HasFilterableStackTrace.java
Patch:
@@ -9,7 +9,5 @@ public interface HasFilterableStackTrace {
     void setStackTrace(StackTraceElement[] stackTrace);
     
     StackTraceElement[] getStackTrace();
-    
-    StackTraceElement[] getUnfilteredStackTrace();
 
-}
+}
\ No newline at end of file

File: test/org/mockito/internal/InvocationBuilder.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.reflect.Method;
 import java.util.*;
 
-import org.mockito.usage.*;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
 public class InvocationBuilder {

File: test/org/mockitousage/IMethods.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import java.io.IOException;
 import java.util.List;

File: test/org/mockitousage/InvalidStateDetectionTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/InvalidUsageTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import static org.mockito.Mockito.*;
 

File: test/org/mockitousage/MockitoSyntaxExperiments.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import java.util.List;
 import static org.mockito.MockitoExperimental.*;

File: test/org/mockitousage/ReplacingObjectMethodsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.*;

File: test/org/mockitousage/StackTrackeFilteringTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/UsingVarargsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockitousage;
 
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;

File: test/org/mockitousage/binding/BridgeMethodPuzzleTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.binding;
+package org.mockitousage.binding;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.binding;
+package org.mockitousage.binding;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/matchers/BasicStubbingTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.matchers;
+package org.mockitousage.matchers;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
@@ -13,7 +13,7 @@
 import org.junit.*;
 import org.mockito.Mockito;
 import org.mockito.exceptions.VerificationError;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
 public class BasicStubbingTest {

File: test/org/mockitousage/matchers/ComparableMatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.matchers;
+package org.mockitousage.matchers;
 
 import static org.junit.Assert.*;
 

File: test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.matchers;
+package org.mockitousage.matchers;
 
 import static org.junit.Assert.*;
 import static org.mockito.Matchers.eq;
@@ -11,7 +11,7 @@
 import org.mockito.*;
 import org.mockito.exceptions.InvalidUseOfMatchersException;
 import org.mockito.internal.*;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
 public class InvalidUseOfMatchersTest {

File: test/org/mockitousage/matchers/MatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.matchers;
+package org.mockitousage.matchers;
 
 import static org.junit.Assert.*;
 import static org.mockito.CrazyMatchers.*;
@@ -14,7 +14,7 @@
 
 import org.junit.*;
 import org.mockito.*;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
 public class MatchersTest {

File: test/org/mockitousage/matchers/MatchersToStringTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.matchers;
+package org.mockitousage.matchers;
 
 import static org.junit.Assert.*;
 

File: test/org/mockitousage/stubbing/BasicStubbingTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.stubbing;
+package org.mockitousage.stubbing;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.*;

File: test/org/mockitousage/stubbing/ReturningDefaultValuesTest.java
Patch:
@@ -2,15 +2,15 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.stubbing;
+package org.mockitousage.stubbing;
 
 import static org.junit.Assert.*;
 
 import java.util.*;
 
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")
 public class ReturningDefaultValuesTest {

File: test/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.stubbing;
+package org.mockitousage.stubbing;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/verification/AtLeastOnceVerificationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;

File: test/org/mockitousage/verification/BasicVerificationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.junit.Assert.*;
 

File: test/org/mockitousage/verification/NiceMessagesOnStrictOrderErrorsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
@@ -11,7 +11,7 @@
 import org.mockito.*;
 import org.mockito.exceptions.*;
 import org.mockito.internal.StateResetter;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 public class NiceMessagesOnStrictOrderErrorsTest {
     

File: test/org/mockitousage/verification/NiceMessagesWhenVerificationFailsTest.java
Patch:
@@ -2,15 +2,15 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;
 
 import org.junit.*;
 import org.mockito.Mockito;
 import org.mockito.exceptions.VerificationError;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 public class NiceMessagesWhenVerificationFailsTest {
     

File: test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;

File: test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -2,15 +2,15 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.mockito.Mockito.*;
 
 import static org.junit.Assert.*;
 import org.junit.*;
 import org.mockito.Strictly;
 import org.mockito.exceptions.*;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
 public class VerificationInOrderMixedWithOrdiraryVerificationTest {

File: test/org/mockitousage/verification/VerificationInOrderTest.java
Patch:
@@ -2,15 +2,15 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;
 
 import org.junit.*;
 import org.mockito.Strictly;
 import org.mockito.exceptions.*;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
 public class VerificationInOrderTest {

File: test/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.mockito.Mockito.*;
 

File: test/org/mockitousage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage.verification;
+package org.mockitousage.verification;
 
 import static org.mockito.CrazyMatchers.*;
 import static org.junit.Assert.*;
@@ -11,7 +11,7 @@
 import org.junit.*;
 import org.mockito.*;
 import org.mockito.exceptions.VerificationError;
-import org.mockito.usage.IMethods;
+import org.mockitousage.IMethods;
 
 @SuppressWarnings("unchecked")  
 public class VerificationUsingMatchersTest {

File: src/org/mockito/internal/MockFactory.java
Patch:
@@ -29,7 +29,6 @@ public T createMock(Class<T> toMock, final MockAwareInvocationHandler handler) {
 
             public Object intercept(Object obj, Method method, Object[] args,
                     MethodProxy proxy) throws Throwable {
-                System.err.println(method + " " + method.isBridge());
                 if (method.isBridge()) {
                     //TODO still... why is this needed?
                     return proxy.invokeSuper(obj, args);

File: test/org/mockito/util/ExtraMatchers.java
Patch:
@@ -73,7 +73,6 @@ public boolean matches(Object o) {
                 for (Method m : clazz.getMethods()) {
                     if (m.isBridge()) {
                         if (m.getName().equals(methodName)) {
-                            System.out.println(m);
                             return true;
                         }
                     }

File: test/org/mockito/usage/verification/BasicVerificationTest.java
Patch:
@@ -94,7 +94,7 @@ public void shouldDetectWhenInvokedMoreThanOnce() throws Exception {
         try {
             verify(mock).clear();
             fail();
-        } catch (NumberOfInvocationsAssertionError e) {};
+        } catch (NumberOfInvocationsError e) {};
     }
 
     @Test

File: test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java
Patch:
@@ -163,7 +163,7 @@ public void shouldPrintFirstUnexpectedInvocation() {
             String actualMessage = expected.getMessage();
             String expectedMessage = 
                     "\n" +
-            		"No more interactions expected on IMethods" +
+            		"No more interactions expected" +
             		"\n" +
             		"Unexpected: IMethods.oneArg(false)";
             assertEquals(expectedMessage, actualMessage);         
@@ -182,7 +182,7 @@ public void shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions()
             String actualMessage = expected.getMessage();
             String expectedMessage = 
                     "\n" +
-                    "Zero interactions expected on IMethods" +
+                    "Zero interactions expected" +
                     "\n" +
                     "Unexpected: IMethods.twoArgumentMethod(1, 2)";
             assertEquals(expectedMessage, actualMessage);         

File: src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java
Patch:
@@ -4,15 +4,14 @@
  */
 package org.mockito.exceptions;
 
-import org.mockito.internal.ExpectedInvocation;
 
 public class NumberOfInvocationsAssertionError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public NumberOfInvocationsAssertionError(int expectedCount, int actualCount, ExpectedInvocation expected) {
+    public NumberOfInvocationsAssertionError(int expectedCount, int actualCount, String wanted) {
         super(  "\n" +
-                expected.toString() +
+                wanted +
         		"\n" +
         		"Expected " + pluralize(expectedCount) + " but was " + actualCount);
     }

File: src/org/mockito/exceptions/VerificationError.java
Patch:
@@ -4,11 +4,11 @@
  */
 package org.mockito.exceptions;
 
-public class VerificationAssertionError extends MockitoAssertionError {
+public class VerificationError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;
 
-    public VerificationAssertionError(String message) {
+    public VerificationError(String message) {
         super(message);
     }
 }

File: test/org/mockito/usage/InvalidUsageTest.java
Patch:
@@ -105,7 +105,7 @@ public void unfinishedStubbingDetectedWhenAnotherStubbingIsStarted() {
 
     @Ignore
     @Test
-    public void unfinishedStubbingDetectedMockCalled() {
+    public void unfinishedStubbingDetectedWhenMockCalled() {
         stub(mock.add("test"));
 
         try {

File: test/org/mockito/usage/matchers/BasicStubbingTest.java
Patch:
@@ -13,7 +13,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.VerificationAssertionError;
+import org.mockito.exceptions.VerificationError;
 
 @SuppressWarnings("unchecked")
 public class BasicStubbingTest {
@@ -70,6 +70,6 @@ public void shouldStubbingBeTreatedAsInteraction() throws Exception {
         try {
             verifyNoMoreInteractions(mock);
             fail();
-        } catch (VerificationAssertionError e) {}
+        } catch (VerificationError e) {}
     }
 }

File: test/org/mockito/usage/verification/AtLeastOnceVerificationTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.junit.*;
 import org.mockito.Mockito;
-import org.mockito.exceptions.VerificationAssertionError;
+import org.mockito.exceptions.VerificationError;
 
 @SuppressWarnings("unchecked")
 public class AtLeastOnceVerificationTest {
@@ -36,10 +36,10 @@ public void shouldVerifyAtLeastOnce() throws Exception {
         try {
             verify(mockTwo, atLeastOnce()).add("foo");
             fail();
-        } catch (VerificationAssertionError e) {}
+        } catch (VerificationError e) {}
     }
     
-    @Test(expected=VerificationAssertionError.class)
+    @Test(expected=VerificationError.class)
     public void shouldFailIfMethodWasNotCalledAtAll() throws Exception {
         verify(mock, atLeastOnce()).add("foo");
     }

File: src/org/mockito/Mockito.java
Patch:
@@ -40,12 +40,10 @@ public static <T> T verify(T mock) {
         return verify(mock, 1);
     }
     
-    //TODO make the interface consistent, it should be times(4) rather than int
     public static <T> T verify(T mock, int expectedNumberOfInvocations) {
         return verify(mock, VerifyingMode.times(expectedNumberOfInvocations));
     }
     
-    //TODO should not be public
     public static <T> T verify(T mock, VerifyingMode mode) {
         MockUtil.validateMock(mock);
         MockitoState.instance().verifyingStarted(mode);

File: src/org/mockito/internal/MockControl.java
Patch:
@@ -61,7 +61,6 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
         ExpectedInvocation expectedInvocation = new ExpectedInvocation(invocation, processedMatchers);
         
         if (verifyingMode != null) {
-            //TODO shouldn't verify take only invocationWithMatchers.getInvocation(); ?
             behavior.verify(expectedInvocation, verifyingMode);
             return ToTypeMappings.emptyReturnValueFor(method.getReturnType());
         }

File: test/org/mockito/internal/InvocationBuilder.java
Patch:
@@ -13,7 +13,6 @@ public class InvocationBuilder {
     private Object[] args = new Object[] {};
     private Object mock = "mock";
 
-    //TODO replace occurences of raw creation with builder
     public Invocation toInvocation() {
         Method method;
         List<Class> argTypes = new LinkedList<Class>();

File: test/org/mockito/usage/verification/VerificationInOrderTest.java
Patch:
@@ -73,6 +73,7 @@ public void shouldFailWhenFirstMockCalledTwice() {
         strictly.verify(mockOne).simpleMethod(1);
         try {
             strictly.verify(mockOne).simpleMethod(1);
+            fail();
         } catch (StrictVerificationError e) {}
     }
     
@@ -85,6 +86,7 @@ public void shouldFailWhenLastMockCalledTwice() {
         strictly.verify(mockOne).simpleMethod(4);
         try {
             strictly.verify(mockOne).simpleMethod(4);
+            fail();
         } catch (StrictVerificationError e) {}
     }
     

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -39,7 +39,8 @@ void markInvocationsAsVerified(ExpectedInvocation expected, VerifyingMode verify
         int verifiedSoFar = 0;        
         for (Invocation invocation : registeredInvocations) {
             boolean shouldMarkAsVerified = 
-                verifyingMode.atLeastOnceMode() || verifyingMode.getExpectedNumberOfInvocations() >= verifiedSoFar;
+                verifyingMode.atLeastOnceMode() || 
+                verifyingMode.getExpectedNumberOfInvocations() > verifiedSoFar;
             if (expected.matches(invocation) && shouldMarkAsVerified) {
                 invocation.markVerified();
                 verifiedSoFar++;

File: src/org/mockito/internal/VerifyingMode.java
Patch:
@@ -30,11 +30,9 @@ public static VerifyingMode times(int expectedNumberOfInvocations) {
     }
     
     /**
-     * <pre>
      * Don't use VerifyingMode class directly. 
-     * 
+     * <p>
      * Use Mockito.atLeastOnce() and Mockito.times()
-     * </pre>
      */
     public static void dont_use_this_class_directly_instead_use_static_methods_on_Mockito() {}
     

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -30,7 +30,7 @@ public void verify(InvocationWithMatchers expected, VerifyingMode verifyingMode)
         markInvocationsAsVerified(expected, verifyingMode);
     }
     
-    private void markInvocationsAsVerified(InvocationWithMatchers expected, VerifyingMode verifyingMode) {
+    void markInvocationsAsVerified(InvocationWithMatchers expected, VerifyingMode verifyingMode) {
         int verifiedSoFar = 0;        
         for (InvocationWithMatchers registeredInvocation : registeredInvocations) {
             Invocation invocation = registeredInvocation.getInvocation();

File: src/org/mockito/Strictly.java
Patch:
@@ -10,7 +10,5 @@ public interface Strictly {
 
     //TODO get rid of interface with int
     <T> T verify(T mock, int expectedNumberOfInvocations);
-
-    void verifyNoMoreInteractions();
-
+    
 }
\ No newline at end of file

File: src/org/mockito/internal/StrictOrderVerifier.java
Patch:
@@ -22,8 +22,7 @@ public <T> T verify(T mock, int expectedNumberOfInvocations) {
     }
 
     public void verifyNoMoreInteractions() {
-    //MockitoState.instance().checkForUnfinishedVerification();
-    //TODO not implemented yet
+        Mockito.verifyNoMoreInteractions(mocksToBeVerifiedInOrder.toArray());
     }
 
     public void addMockToBeVerifiedInOrder(Object mock) {

File: src/org/mockito/internal/MockFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2003-2006 OFFIS, Henri Tremblay. 
+ * Copyright (c) 2007 Mockito contributors 
  * This program is made available under the terms of the MIT License.
  */
 package org.mockito.internal;

File: test/org/mockito/usage/StackTrackeFilteringTest.java
Patch:
@@ -22,6 +22,7 @@ public void setup() {
     public void shouldFilterStackTraceOnVerify() {
         try {
             verify(mock).simpleMethod();
+            fail();
         } catch (VerificationAssertionError expected) {
             assertThat(expected, firstMethodOnStackEqualsTo("shouldFilterStackTraceOnVerify"));
             
@@ -35,6 +36,7 @@ public void shouldFilterStackTraceOnVerifyNoMoreInteractions() {
         mock.oneArg(true);
         try {
             verifyNoMoreInteractions(mock);
+            fail();
         } catch (VerificationAssertionError expected) {
             assertThat(expected, firstMethodOnStackEqualsTo("shouldFilterStackTraceOnVerifyNoMoreInteractions"));
             
@@ -48,6 +50,7 @@ public void shouldFilterStackTraceOnVerifyZeroInteractions() {
         mock.oneArg(true);
         try {
             verifyZeroInteractions(mock);
+            fail();
         } catch (VerificationAssertionError expected) {
             assertThat(expected, firstMethodOnStackEqualsTo("shouldFilterStackTraceOnVerifyZeroInteractions"));
             

File: test/org/mockito/usage/verification/AtLeastOnceVerificationTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockito.usage.verification;
 
 import static org.mockito.Mockito.*;
+import static org.junit.Assert.*;
 
 import java.util.List;
 
@@ -30,6 +31,7 @@ public void shouldVerifyAtLeastOnce() throws Exception {
         verify(mockTwo, atLeastOnce()).add("add");
         try {
             verify(mockTwo, atLeastOnce()).add("foo");
+            fail();
         } catch (VerificationAssertionError e) {}
     }
     

File: src/org/mockito/exceptions/NumberOfInvocationsAssertionError.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.mockito.internal.InvocationWithMatchers;
 
-
 public class NumberOfInvocationsAssertionError extends MockitoAssertionError {
 
     private static final long serialVersionUID = 1L;

File: src/org/mockito/internal/StrictOrderVerifier.java
Patch:
@@ -9,11 +9,11 @@ public class StrictOrderVerifier {
     List<Object> mocks = new LinkedList<Object>();
     
     public <T> T verify(T mock) {
-        return Mockito.verify(mock);
+        return Mockito.verify(mock, VerifyingMode.inSequence(null, mocks));
     }
     
-    public <T> T verify(T mock, int exactNumberOfInvocations) {
-        return Mockito.verify(mock, VerifyingMode.inSequence(exactNumberOfInvocations, mocks));
+    public <T> T verify(T mock, int expectedNumberOfInvocations) {
+        return Mockito.verify(mock, VerifyingMode.inSequence(expectedNumberOfInvocations, mocks));
     }
 
     public void verifyNoMoreInteractions() {

File: test/org/mockito/MockitoTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldValidateMockWhenVerifying() {
     }
     
     @Test(expected=NotAMockException.class)
-    public void shouldValidateMockWhenVerifyingWithExactNumberOfInvocations() {
+    public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations() {
         Mockito.verify(notMock, 19);
     }
     

File: test/org/mockito/sample/ArticleCalculator.java
Patch:
@@ -3,4 +3,5 @@
 public interface ArticleCalculator {
     int countArticles(String newspaper);
     int countArticlesInPolish(String newspaper);
+    int countNumberOfRelatedArticles(Article article);
 }
\ No newline at end of file

File: test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java
Patch:
@@ -184,4 +184,7 @@ public void shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions()
             assertEquals(expectedMessage, actualMessage);         
         }
     }
+    
+    //TODO do we need nice message when expected number of invocations = 0?
+    
 }

File: test/org/mockito/usage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -24,7 +24,7 @@ public void shouldStubbingNotRegisterRedundantInteractions() throws Exception {
     }
     
     @Test
-    public void shouldVerifyWhenExactNumberOfInvocationsUsed() throws Exception {
+    public void shouldVerifyWhenExpectedNumberOfInvocationsUsed() throws Exception {
         List mock = mock(List.class);
 
         mock.add("one");

File: test/org/mockito/usage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() {
     public void shouldVerifyInOrder() {
         strictly.verify(list).add("one");
         strictly.verify(map).put("two", "two");
-        strictly.verify(list).add("three and four");
+        strictly.verify(list, 2).add("three and four");
         strictly.verify(map).put("five", "five");
         strictly.verify(set).add("six");
     } 

File: test/org/mockito/usage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
Patch:
@@ -24,7 +24,7 @@ public void shouldVerifyUsingMatchers() throws Exception {
         verify(list).add(anyObject());
         verify(list).add(anyInt(), eq("test two"));
         
-        verify(map).put(anyObject(), anyObject());
+        verify(map, 2).put(anyObject(), anyObject());
         verify(map).put(eq("test two"), eq(200));
         
         verifyNoMoreInteractions(list, map);

File: test/org/mockito/usage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -36,7 +36,7 @@ public void shouldVerifyUsingSameMatcher() {
         mock.oneArg(two);
         
         verify(mock).oneArg(CrazyMatchers.same(one));
-        verify(mock).oneArg(two);
+        verify(mock, 2).oneArg(two);
         
         try {
             verify(mock).oneArg(CrazyMatchers.same(three));

File: src/org/mockito/exceptions/InvalidUseOfMatchersException.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.exceptions;
 
-public class InvalidUseOfMatchersException extends IllegalStateException {
+public class InvalidUseOfMatchersException extends MockitoException {
 
     private static final long serialVersionUID = 1L;
 

File: src/org/mockito/exceptions/MissingMethodInvocationException.java
Patch:
@@ -1,6 +1,8 @@
 package org.mockito.exceptions;
 
-public class MissingMethodInvocationException extends RuntimeException {
+public class MissingMethodInvocationException extends MockitoException {
+
+    private static final long serialVersionUID = 1L;
 
     public MissingMethodInvocationException() {
         super("stub() requires an argument which has to be a proper method call on a mock object");

File: src/org/mockito/exceptions/NotAMockException.java
Patch:
@@ -1,6 +1,8 @@
 package org.mockito.exceptions;
 
-public class NotAMockException extends RuntimeException {
+public class NotAMockException extends MockitoException {
+
+    private static final long serialVersionUID = 1L;
 
     public NotAMockException(Object object) {
         super("Not a mock: " + object.getClass().getName());

File: src/org/mockito/exceptions/UnfinishedVerificationException.java
Patch:
@@ -1,7 +1,9 @@
 package org.mockito.exceptions;
 
-public class UnfinishedVerificationException extends RuntimeException {
+public class UnfinishedVerificationException extends MockitoException {
     
+    private static final long serialVersionUID = 1L;
+
     public UnfinishedVerificationException() {
         super(  "\n" +
         		"Previous verify(mock) doesn't have a method call." +

File: src/org/mockito/internal/MockUtil.java
Patch:
@@ -6,7 +6,7 @@
 
 import net.sf.cglib.proxy.*;
 
-import org.mockito.exceptions.NotAMockException;
+import org.mockito.exceptions.*;
 import org.mockito.internal.MockFactory.MockMethodInterceptor;
 
 public class MockUtil {
@@ -19,7 +19,7 @@ private static MockMethodInterceptor getInterceptor(Object mock) {
     @SuppressWarnings("unchecked")
     public static <T> MockControl<T> getControl(T mock) {
         if (mock == null) {
-            throw new IllegalArgumentException("Mock cannot be null");
+            throw new MockitoException("Mock cannot be null");
         }
         
         ObjectMethodsFilter<MockControl<T>> handler;

File: src/org/mockito/internal/VerifyingMode.java
Patch:
@@ -1,6 +1,6 @@
 package org.mockito.internal;
 
-import org.mockito.exceptions.MockVerificationAssertionError;
+import org.mockito.exceptions.MockitoException;
 
 public class VerifyingMode {
 
@@ -17,7 +17,7 @@ public static VerifyingMode anyTimes() {
 
     public static VerifyingMode times(int exactNumberOfInvocations) {
         if (exactNumberOfInvocations < 0) {
-            throw new IllegalArgumentException("Negative value is not allowed here");
+            throw new MockitoException("Negative value is not allowed here");
         }
         return new VerifyingMode(exactNumberOfInvocations);
     }

File: test/org/mockito/MockUtilTest.java
Patch:
@@ -12,7 +12,7 @@
 import net.sf.cglib.proxy.*;
 
 import org.junit.Test;
-import org.mockito.exceptions.NotAMockException;
+import org.mockito.exceptions.*;
 
 public class MockUtilTest {
 
@@ -37,7 +37,7 @@ public void shouldScreamWhenNotAMockPassed() {
         getControl("");
     }
     
-    @Test (expected=IllegalArgumentException.class)
+    @Test (expected=MockitoException.class)
     public void shouldScreamWhenNullPassed() {
         getControl(null);
     }
@@ -47,7 +47,7 @@ public void shouldValidateMock() {
         validateMock("");
     }
     
-    @Test (expected=IllegalArgumentException.class)
+    @Test (expected=MockitoException.class)
     public void shouldScreamWhenNullPassedToValidation() {
         validateMock(null);
     }

File: test/org/mockito/VerifyingModeTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.mockito;
 
 import org.junit.Test;
+import org.mockito.exceptions.MockitoException;
 import org.mockito.internal.VerifyingMode;
 
 import static org.junit.Assert.*;
@@ -22,7 +23,7 @@ public void shouldNotAllowCreatingModeWithNegativeNumberOfInvocations() throws E
         try {
             VerifyingMode.times(-50);
             fail();
-        } catch (IllegalArgumentException e) {
+        } catch (MockitoException e) {
             assertEquals("Negative value is not allowed here", e.getMessage());
         }
     }

File: test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -67,7 +67,7 @@ public void shouldScreamWhenMatchersAreInvalid() {
         try {
             mock.simpleMethodWithArgument(CrazyMatchers.or(eq("jkl"), "asd"));
             fail();
-        } catch (IllegalStateException e) {
+        } catch (InvalidUseOfMatchersException e) {
             assertEquals(
                     "\n" +
             		"2 matchers expected, 1 recorded." +
@@ -79,7 +79,7 @@ public void shouldScreamWhenMatchersAreInvalid() {
         try {
             mock.threeArgumentMethod(1, "asd", eq("asd"));
             fail();
-        } catch (IllegalStateException e) {
+        } catch (InvalidUseOfMatchersException e) {
             assertEquals(
                     "\n" +
                     "3 matchers expected, 1 recorded." +

File: src/org/easymock/IExpectationSetters.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.easymock;
 
-import org.mockito.MockitoExpectation;
+import org.mockito.internal.*;
 
 /**
  * Allows setting expectations for an associated expected invocation.

File: src/org/easymock/internal/ArrayMatcher.java
Patch:
@@ -5,7 +5,7 @@
 package org.easymock.internal;
 
 import org.easymock.AbstractMatcher;
-import org.easymock.internal.matchers.ArrayEquals;
+import org.mockito.internal.matchers.ArrayEquals;
 
 public class ArrayMatcher extends AbstractMatcher {
     public String argumentToString(Object argument) {

File: src/org/easymock/internal/ClassExtensionHelper.java
Patch:
@@ -9,7 +9,8 @@
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.Factory;
 
-import org.easymock.internal.ClassProxyFactory.MockMethodInterceptor;
+import org.mockito.internal.*;
+import org.mockito.internal.ClassProxyFactory.MockMethodInterceptor;
 
 public final class ClassExtensionHelper {
 

File: src/org/easymock/internal/ExpectedInvocationAndResult.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.easymock.internal;
 
+import org.mockito.internal.*;
+
 public class ExpectedInvocationAndResult {
     ExpectedInvocation expectedInvocation;
 

File: src/org/easymock/internal/ExpectedInvocationAndResults.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.easymock.internal;
 
+import org.mockito.internal.ExpectedInvocation;
+
 public class ExpectedInvocationAndResults {
     ExpectedInvocation expectedInvocation;
 

File: src/org/easymock/internal/IMocksBehavior.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.easymock.internal;
 
+import org.mockito.internal.*;
+
 public interface IMocksBehavior extends ILegacyMatcherMethods {
 
     // record

File: src/org/easymock/internal/IMocksControlState.java
Patch:
@@ -4,7 +4,7 @@
  */
 package org.easymock.internal;
 
-import org.easymock.IAnswer;
+import org.mockito.internal.*;
 
 public interface IMocksControlState extends ILegacyMethods {
 

File: src/org/easymock/internal/LegacyMatcherProvider.java
Patch:
@@ -10,6 +10,7 @@
 
 import org.easymock.ArgumentsMatcher;
 import org.easymock.MockControl;
+import org.mockito.internal.RuntimeExceptionWrapper;
 
 public class LegacyMatcherProvider {
 

File: src/org/easymock/internal/MockInvocationHandler.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 
-import org.mockito.MockAwareInvocationHandler;
+import org.mockito.internal.*;
 
 public class MockInvocationHandler implements InvocationHandler, MockAwareInvocationHandler {
 

File: src/org/easymock/internal/Range.java
Patch:
@@ -4,6 +4,8 @@
  */
 package org.easymock.internal;
 
+import org.mockito.internal.RuntimeExceptionWrapper;
+
 public class Range {
     private int minimum;
 

File: src/org/easymock/internal/ReplayState.java
Patch:
@@ -7,7 +7,7 @@
 import java.lang.reflect.Method;
 
 import org.easymock.ArgumentsMatcher;
-import org.easymock.IAnswer;
+import org.mockito.internal.*;
 
 public class ReplayState implements IMocksControlState {
 

File: src/org/easymock/internal/Results.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.mockito.internal.*;
+
 public class Results {
 
     private int callCount;

File: src/org/easymock/internal/UnorderedBehavior.java
Patch:
@@ -7,6 +7,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.mockito.internal.*;
+
 public class UnorderedBehavior {
 
     private final List<ExpectedInvocationAndResults> results = new ArrayList<ExpectedInvocationAndResults>();

File: src/org/mockito/Mockito.java
Patch:
@@ -1,8 +1,8 @@
 package org.mockito;
 
-import org.easymock.internal.*;
 import org.mockito.exceptions.NotAMockMethodException;
-import org.mockito.matchers.*;
+import org.mockito.hamcrest.*;
+import org.mockito.internal.*;
 
 public class Mockito {
 

File: src/org/mockito/hamcrest/HasNoIvocationsMatcher.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package org.mockito.matchers;
+package org.mockito.hamcrest;
 
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;

File: src/org/mockito/hamcrest/HasNoMoreIvocationsMatcher.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package org.mockito.matchers;
+package org.mockito.hamcrest;
 
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;

File: src/org/mockito/hamcrest/MockitoMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.matchers;
+package org.mockito.hamcrest;
 
 import org.hamcrest.Matcher;
 

File: src/org/mockito/hamcrest/WasInvokedMatcher.java
Patch:
@@ -1,7 +1,7 @@
 /**
  * 
  */
-package org.mockito.matchers;
+package org.mockito.hamcrest;
 
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;

File: src/org/mockito/internal/ClassProxyFactory.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2003-2006 OFFIS, Henri Tremblay. 
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal;
+package org.mockito.internal;
 
 import java.lang.reflect.*;
 import java.lang.reflect.InvocationHandler;
@@ -11,8 +11,8 @@
 import net.sf.cglib.core.*;
 import net.sf.cglib.proxy.*;
 
-import org.easymock.ObjenesisClassInstantiator;
-import org.mockito.MockAwareInvocationHandler;
+import org.mockito.*;
+import org.mockito.internal.*;
 
 /**
  * Factory generating a mock for a class.

File: src/org/mockito/internal/MethodSelector.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito;
+package org.mockito.internal;
 
 public interface MethodSelector<T> {
     

File: src/org/mockito/internal/MockAwareInvocationHandler.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito;
+package org.mockito.internal;
 
 import java.lang.reflect.InvocationHandler;
 

File: src/org/mockito/internal/MockUtil.java
Patch:
@@ -2,13 +2,12 @@
  * Copyright (c) 2007 Szczepan Faber 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito;
+package org.mockito.internal;
 
 import net.sf.cglib.proxy.*;
 
-import org.easymock.internal.MockitoObjectMethodsFilter;
-import org.easymock.internal.ClassProxyFactory.MockMethodInterceptor;
 import org.mockito.exceptions.NotAMockException;
+import org.mockito.internal.ClassProxyFactory.MockMethodInterceptor;
 
 public class MockUtil {
     

File: src/org/mockito/internal/MockitoBehavior.java
Patch:
@@ -1,8 +1,7 @@
-package org.mockito;
+package org.mockito.internal;
 
 import java.util.*;
 
-import org.easymock.internal.*;
 import org.mockito.exceptions.*;
 
 public class MockitoBehavior {

File: src/org/mockito/internal/MockitoExpectation.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito;
+package org.mockito.internal;
 
 
 public interface MockitoExpectation<T> {

File: src/org/mockito/internal/MockitoObjectMethodsFilter.java
Patch:
@@ -2,11 +2,11 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal;
+package org.mockito.internal;
 
 import java.lang.reflect.Method;
 
-import org.mockito.MockAwareInvocationHandler;
+import org.mockito.internal.*;
 
 //TODO rename
 public class MockitoObjectMethodsFilter<T extends MockAwareInvocationHandler> implements MockAwareInvocationHandler {

File: src/org/mockito/internal/MockitoOperations.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito;
+package org.mockito.internal;
 
 /**
  * static state. therefore dangerous and may have nasty bugs.

File: src/org/mockito/internal/ObjenesisClassInstantiator.java
Patch:
@@ -1,4 +1,4 @@
-package org.easymock;
+package org.mockito.internal;
 
 import org.objenesis.ObjenesisHelper;
 

File: src/org/mockito/internal/Result.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal;
+package org.mockito.internal;
 
-import org.easymock.IAnswer;
 
 public class Result implements IAnswer {
 

File: src/org/mockito/internal/RuntimeExceptionWrapper.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal;
+package org.mockito.internal;
 
 public class RuntimeExceptionWrapper extends RuntimeException {
     private final RuntimeException runtimeException;

File: src/org/mockito/internal/ToTypeMappings.java
Patch:
@@ -1,4 +1,4 @@
-package org.easymock.internal;
+package org.mockito.internal;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: src/org/mockito/internal/VerifyingMode.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito;
+package org.mockito.internal;
 
 import org.mockito.exceptions.MockVerificationAssertionError;
 

File: src/org/mockito/internal/VoidMethodExpectation.java
Patch:
@@ -1,4 +1,5 @@
-package org.mockito;
+package org.mockito.internal;
+
 
 public interface VoidMethodExpectation<T> {
 

File: src/org/mockito/internal/matchers/And.java
Patch:
@@ -2,12 +2,11 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 import java.util.Iterator;
 import java.util.List;
 
-import org.easymock.IArgumentMatcher;
 
 public class And implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/Any.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Any implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/ArrayEquals.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 import java.lang.reflect.Array;
 import java.util.Arrays;

File: src/org/mockito/internal/matchers/Compare.java
Patch:
@@ -2,12 +2,10 @@
  * Copyright (c) 2001-2007 OFFIS, Henri Tremblay.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 import java.util.Comparator;
 
-import org.easymock.IArgumentMatcher;
-import org.easymock.LogicalOperator;
 
 public class Compare<T> implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/CompareEqual.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 public class CompareEqual<T extends Comparable<T>> extends CompareTo<T> {
 

File: src/org/mockito/internal/matchers/CompareTo.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public abstract class CompareTo<T extends Comparable<T>> implements IArgumentMatcher {
     private final Comparable<T> expected;

File: src/org/mockito/internal/matchers/Contains.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Contains implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/EndsWith.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class EndsWith implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/Equals.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Equals implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/EqualsWithDelta.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class EqualsWithDelta implements IArgumentMatcher {
     private final Number expected;

File: src/org/mockito/internal/matchers/Find.java
Patch:
@@ -2,11 +2,10 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 import java.util.regex.Pattern;
 
-import org.easymock.IArgumentMatcher;
 
 public class Find implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/GreaterOrEqual.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 public class GreaterOrEqual<T extends Comparable<T>> extends CompareTo<T> {
 

File: src/org/mockito/internal/matchers/GreaterThan.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 public class GreaterThan<T extends Comparable<T>> extends CompareTo<T> {
 

File: src/org/mockito/internal/matchers/IArgumentMatcher.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2006 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.internal.matchers;
 
 /**
  * Decides whether an actual argument is accepted.
@@ -17,8 +17,7 @@ public interface IArgumentMatcher {
      * instanceof and/or null check.
      * <p>
      * The method should <b>never</b> assert if the argument doesn't match. It
-     * should only return false. EasyMock will take care of asserting if the
-     * call is really unexpected.
+     * should only return false.
      * 
      * @param argument the argument
      * @return whether this matcher accepts the given argument.

File: src/org/mockito/internal/matchers/InstanceOf.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class InstanceOf implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/LessOrEqual.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 public class LessOrEqual<T extends Comparable<T>> extends CompareTo<T> {
 

File: src/org/mockito/internal/matchers/LessThan.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 public class LessThan<T extends Comparable<T>> extends CompareTo<T> {
 

File: src/org/mockito/internal/matchers/Matches.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Matches implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/Not.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Not implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/NotNull.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class NotNull implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/Null.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Null implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/Or.java
Patch:
@@ -2,12 +2,11 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 import java.util.Iterator;
 import java.util.List;
 
-import org.easymock.IArgumentMatcher;
 
 public class Or implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/Same.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class Same implements IArgumentMatcher {
 

File: src/org/mockito/internal/matchers/StartsWith.java
Patch:
@@ -2,9 +2,8 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
-import org.easymock.IArgumentMatcher;
 
 public class StartsWith implements IArgumentMatcher {
 

File: test/org/mockito/MockUtilTest.java
Patch:
@@ -5,7 +5,7 @@
 package org.mockito;
 
 import static org.junit.Assert.*;
-import static org.mockito.MockUtil.*;
+import static org.mockito.internal.MockUtil.*;
 
 import java.util.*;
 

File: test/org/mockito/MockitoOperationsTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.junit.Test;
 import org.mockito.*;
+import org.mockito.internal.*;
 
 import static org.junit.Assert.*;
 

File: test/org/mockito/VerifyingModeTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.mockito;
 
 import org.junit.Test;
-import org.mockito.VerifyingMode;
+import org.mockito.internal.VerifyingMode;
 
 import static org.junit.Assert.*;
 

File: test/org/mockito/internal/CglibTest.java
Patch:
@@ -14,7 +14,6 @@
 import net.sf.cglib.proxy.MethodInterceptor;
 import net.sf.cglib.proxy.MethodProxy;
 
-import org.easymock.ObjenesisClassInstantiator;
 import org.junit.Test;
 
 /**

File: test/org/mockito/internal/ClassProxyFactoryTest.java
Patch:
@@ -5,9 +5,7 @@
 
 import java.lang.reflect.Method;
 
-import org.easymock.internal.ClassProxyFactory;
 import org.junit.*;
-import org.mockito.MockAwareInvocationHandler;
 
 public class ClassProxyFactoryTest {
 

File: test/org/mockito/internal/ToTypeMappingsTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import java.util.*;
 
-import org.easymock.internal.ToTypeMappings;
 import org.junit.Test;
 
 public class ToTypeMappingsTest {

File: test/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.junit.Assert.*;
 
-import org.easymock.internal.matchers.Equals;
 import org.junit.Test;
 
 

File: test/org/mockito/usage/MockitoExploitsTest.java
Patch:
@@ -9,6 +9,7 @@
 import org.junit.*;
 import org.mockito.*;
 import org.mockito.exceptions.*;
+import org.mockito.internal.MockitoOperations;
 
 /**
  * TODO find out what is important to protect ourselves and what's just too defensive 

File: test/org/mockito/usage/matchers/ComparableMatchersTest.java
Patch:
@@ -10,6 +10,8 @@
 
 import org.easymock.internal.matchers.*;
 import org.junit.Test;
+import org.mockito.internal.matchers.*;
+import org.mockito.matchers.*;
 
 //TODO do we need matchers like GreaterThan - does it make any sense?
 public class ComparableMatchersTest {

File: test/org/mockito/usage/matchers/MatchersToStringTest.java
Patch:
@@ -9,10 +9,11 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.easymock.IArgumentMatcher;
 import org.easymock.internal.matchers.*;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.internal.matchers.*;
+import org.mockito.matchers.*;
 
 public class MatchersToStringTest {
     private StringBuffer buffer;

File: test/org/mockito/internal/CglibTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2003-2006 OFFIS, Henri Tremblay. 
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock.classextension;
+package org.mockito.internal;
 
 import java.lang.reflect.Method;
 import java.util.ArrayList;

File: test/org/mockito/internal/ClassProxyFactoryTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.easymock.classextension.internal;
+package org.mockito.internal;
 
 import static org.junit.Assert.*;
 import static org.hamcrest.CoreMatchers.*;

File: test/org/mockito/internal/ExpectedInvocationTest.java
Patch:
@@ -1,10 +1,11 @@
-package org.easymock.internal;
+package org.mockito.internal;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.*;
 
 import java.lang.reflect.Method;
 
+import org.easymock.internal.*;
 import org.junit.Test;
 
 public class ExpectedInvocationTest {

File: test/org/mockito/internal/ToTypeMappingsTest.java
Patch:
@@ -1,9 +1,10 @@
-package org.easymock.internal;
+package org.mockito.internal;
 
 import static org.junit.Assert.*;
 
 import java.util.*;
 
+import org.easymock.internal.ToTypeMappings;
 import org.junit.Test;
 
 public class ToTypeMappingsTest {

File: test/org/mockito/internal/matchers/EqualsTest.java
Patch:
@@ -1,7 +1,8 @@
-package org.easymock.internal.matchers;
+package org.mockito.internal.matchers;
 
 import static org.junit.Assert.*;
 
+import org.easymock.internal.matchers.Equals;
 import org.junit.Test;
 
 

File: test/org/mockito/InvocationTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito;
 
 import static org.junit.Assert.*;
 

File: test/org/mockito/sample/ArticleCalculator.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.vs.easymock;
+package org.mockito.sample;
 
 public interface ArticleCalculator {
     int countArticles(String newspaper);

File: test/org/mockito/sample/ArticleDatabase.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.vs.easymock;
+package org.mockito.sample;
 
 public class ArticleDatabase {
 

File: test/org/mockito/sample/ArticleManager.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.vs.easymock;
+package org.mockito.sample;
 
 public class ArticleManager {
     

File: test/org/mockito/sample/MockitoSampleTest.java
Patch:
@@ -1,9 +1,9 @@
-package org.mockito.vs.easymock;
+package org.mockito.sample;
 import org.easymock.EasyMock;
 import org.junit.Test;
 import org.mockito.Mockito;
 
-public class MockitoVsEasyMockTest {
+public class MockitoSampleTest {
     
     @Test
     public void managerCountsArticlesAndSavesThemInTheDatabase() {

File: test/org/mockito/usage/IMethods.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.usage;
 
 import java.io.IOException;
 

File: test/org/mockito/usage/ReplacingObjectMethodsTest.java
Patch:
@@ -2,12 +2,13 @@
  * Copyright (c) 2007 Szczepan Faber 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito;
+package org.mockito.usage;
 
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.*;
 
 import org.junit.Test;
+import org.mockito.Mockito;
 
 public class ReplacingObjectMethodsTest {
 

File: test/org/mockito/usage/UsingVarargsTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2007 Szczepan Faber 
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.usage;
 
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;
@@ -13,6 +13,7 @@
 import org.mockito.Mockito;
 import org.mockito.exceptions.MockVerificationAssertionError;
 
+//TODO add stubbing with varargs
 public class UsingVarargsTest {
 
     private interface IVarArgs {

File: test/org/mockito/usage/matchers/ComparableMatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.usage.matchers;
 
 import static org.junit.Assert.*;
 

File: test/org/mockito/usage/matchers/InvalidUseOfMatchersTest.java
Patch:
@@ -2,15 +2,15 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockito.usage.matchers;
 
 import static org.easymock.EasyMock.*;
 import static org.junit.Assert.*;
 
-import org.easymock.IMethods;
 import org.junit.*;
 import org.mockito.*;
 import org.mockito.exceptions.InvalidUseOfMatchersException;
+import org.mockito.usage.IMethods;
 
 @SuppressWarnings("unchecked")
 public class InvalidUseOfMatchersTest {

File: test/org/mockito/usage/matchers/MatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.usage.matchers;
 
 import static org.easymock.EasyMock.*;
 import static org.junit.Assert.*;
@@ -13,6 +13,8 @@
 
 import org.junit.*;
 import org.mockito.*;
+import org.mockito.usage.IMethods;
+
 import static org.mockito.Matchers.*;
 
 @SuppressWarnings("unchecked")  

File: test/org/mockito/usage/matchers/MatchersToStringTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.usage.matchers;
 
 import static org.junit.Assert.*;
 

File: test/org/mockito/usage/stubbing/BasicStubbingTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.usage;
+package org.mockito.usage.stubbing;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.*;

File: test/org/mockito/usage/stubbing/ReturningDefaultValuesTest.java
Patch:
@@ -2,16 +2,16 @@
  * Copyright (c) 2007 Szczepan Faber 
  * This program is made available under the terms of the MIT License.
  */
-package org.mockito.usage;
+package org.mockito.usage.stubbing;
 
 import static org.junit.Assert.*;
 
 import java.lang.reflect.*;
 import java.util.*;
 
-import org.easymock.IMethods;
 import org.junit.Test;
 import org.mockito.Mockito;
+import org.mockito.usage.IMethods;
 
 @SuppressWarnings("unchecked")
 public class ReturningDefaultValuesTest {

File: test/org/mockito/usage/stubbing/StubbingWithThrowablesTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.usage;
+package org.mockito.usage.stubbing;
 
 import static org.junit.Assert.*;
 import static org.mockito.Mockito.*;

File: test/org/mockito/usage/verification/BasicVerificationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.usage;
+package org.mockito.usage.verification;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.*;

File: test/org/mockito/usage/verification/ExactNumberOfTimesVerificationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.usage;
+package org.mockito.usage.verification;
 
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.*;

File: test/org/mockito/usage/verification/NiceMessagesWhenVerificationFailsTest.java
Patch:
@@ -1,8 +1,9 @@
-package org.easymock;
+package org.mockito.usage.verification;
 
 import org.junit.*;
 import org.mockito.Mockito;
 import org.mockito.exceptions.MockVerificationAssertionError;
+import org.mockito.usage.IMethods;
 
 import static org.mockito.Mockito.*;
 import static org.junit.Assert.*;

File: test/org/mockito/usage/verification/NoMoreInteractionsVerificationTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.usage;
+package org.mockito.usage.verification;
 
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.*;

File: test/org/mockito/usage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
Patch:
@@ -1,4 +1,4 @@
-package org.mockito.usage;
+package org.mockito.usage.verification;
 
 import static org.mockito.Mockito.*;
 

File: test/org/mockito/usage/verification/VerificationUsingMatchersTest.java
Patch:
@@ -2,7 +2,7 @@
  * Copyright (c) 2001-2007 OFFIS, Tammo Freese.
  * This program is made available under the terms of the MIT License.
  */
-package org.easymock;
+package org.mockito.usage.verification;
 
 import static org.easymock.EasyMock.*;
 import static org.mockito.Matchers.*;
@@ -12,6 +12,7 @@
 import org.junit.*;
 import org.mockito.*;
 import org.mockito.exceptions.MockVerificationAssertionError;
+import org.mockito.usage.IMethods;
 
 @SuppressWarnings("unchecked")  
 public class VerificationUsingMatchersTest {

File: test/org/easymock/tests/IMethods.java
Patch:
@@ -8,6 +8,7 @@
 
 public interface IMethods {
 
+    //TODO kill the index
     boolean booleanReturningMethod(int index);
 
     byte byteReturningMethod(int index);

File: src/org/easymock/internal/ExpectedInvocation.java
Patch:
@@ -67,7 +67,7 @@ public boolean equals(Object o) {
     }
 
     public int hashCode() {
-        return 1; //invocation.hashCode();
+        return 1;
     }
 
     public boolean matches(Invocation actual) {

File: src/org/easymock/internal/Invocation.java
Patch:
@@ -62,9 +62,9 @@ public boolean equals(Object o) {
                 && this.equalArguments(other.arguments);
     }
 
-//    public int hashCode() {
-//        throw new UnsupportedOperationException("hashCode() is not implemented");
-//    }
+    public int hashCode() {
+        throw new UnsupportedOperationException("hashCode() is not implemented");
+    }
 
     private boolean equalArguments(Object[] arguments) {
         if (this.arguments.length != arguments.length) {

