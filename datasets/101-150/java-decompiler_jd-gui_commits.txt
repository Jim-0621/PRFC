File: app/src/main/java/org/jd/gui/view/SearchInConstantPoolsView.java
Patch:
@@ -250,7 +250,6 @@ public SearchInConstantPoolsView(
                     if (selectedTreeNode != null) {
                         selectedTypeCallback.accept(selectedTreeNode.getUri(), searchInConstantPoolsEnterTextField.getText(), getFlags());
                     }
-                    searchInConstantPoolsDialog.setVisible(false);
                 }
             };
             searchInConstantPoolsOpenButton.addActionListener(searchInConstantPoolsOpenActionListener);

File: services/src/main/java/org/jd/gui/service/indexer/JavaModuleFileIndexerProvider.java
Patch:
@@ -32,6 +32,7 @@ public void index(API api, Container.Entry entry, Indexes indexes) {
         }
     }
 
+    @SuppressWarnings("unchecked")
     protected static void index(API api, Container.Entry entry, Indexes indexes, Map<String, Collection> packageDeclarationIndex) {
         for (Container.Entry e : entry.getChildren()) {
             if (e.isDirectory()) {

File: services/src/main/java/org/jd/gui/view/component/AbstractTextPage.java
Patch:
@@ -102,9 +102,9 @@ public void mouseClicked(MouseEvent e) {
 
                 // Update font size
                 if (e.getWheelRotation() > 0) {
-                    INCREASE_FONT_SIZE_ACTION.actionPerformedImpl(null, textArea);
-                } else {
                     DECREASE_FONT_SIZE_ACTION.actionPerformedImpl(null, textArea);
+                } else {
+                    INCREASE_FONT_SIZE_ACTION.actionPerformedImpl(null, textArea);
                 }
 
                 // Save preferences

File: services/src/main/java/org/jd/gui/util/decompiler/StringBuilderPrinter.java
Patch:
@@ -33,7 +33,7 @@ public class StringBuilderPrinter implements Printer {
 	public void append(String s) { stringBuffer.append(s); }
 
 	protected void printEscape(String s) {
-		if (unicodeEscape) {
+		if (unicodeEscape && (s != null)) {
 			int length = s.length();
 
 			for (int i=0; i<length; i++) {

File: services/src/main/java/org/jd/gui/service/preferencespanel/ClassFileViewerPreferencesProvider.java
Patch:
@@ -42,8 +42,8 @@ public ClassFileViewerPreferencesProvider() {
 
     @Override
     public void loadPreferences(Map<String, String> preferences) {
-        escapeUnicodeCharactersCheckBox.setSelected(!"false".equals(preferences.get(ESCAPE_UNICODE_CHARACTERS)));
-        realignLineNumbersCheckBox.setSelected("true".equals(preferences.get(REALIGN_LINE_NUMBERS)));
+        escapeUnicodeCharactersCheckBox.setSelected("true".equals(preferences.get(ESCAPE_UNICODE_CHARACTERS)));
+        realignLineNumbersCheckBox.setSelected(!"false".equals(preferences.get(REALIGN_LINE_NUMBERS)));
     }
 
     @Override

File: app/src/main/java/org/jd/gui/view/component/panel/TreeTabbedPanel.java
Patch:
@@ -260,10 +260,10 @@ protected DefaultMutableTreeNode searchTreeNode(URI uri, DefaultMutableTreeNode
 
         String u = uri.toString();
         T child = null;
-        Enumeration<T> enumeration = node.children();
+        Enumeration enumeration = node.children();
 
         while (enumeration.hasMoreElements()) {
-            T element = enumeration.nextElement();
+            T element = (T)enumeration.nextElement();
             String childU = element.getUri().toString();
 
             if (u.length() > childU.length()) {

File: app/src/main/java/org/jd/gui/service/extension/ExtensionService.java
Patch:
@@ -37,13 +37,13 @@ protected ExtensionService() {
                 searchJarAndMetaInf(urls, extDirectory);
 
                 if (!urls.isEmpty()) {
-                    URL[] array = (URL[])urls.toArray();
+                    URL[] array = urls.toArray(new URL[urls.size()]);
                     Arrays.sort(array, URL_COMPARATOR);
                     extensionClassLoader = new URLClassLoader(array, ExtensionService.class.getClassLoader());
                 }
             }
         } catch (Exception e) {
-            ExceptionUtil.printStackTrace(e);
+            assert ExceptionUtil.printStackTrace(e);
         }
 
         extensionClassLoader = ExtensionService.class.getClassLoader();

File: app/src/main/java/org/jd/gui/util/net/UriUtil.java
Patch:
@@ -37,7 +37,7 @@ public static URI createURI(API api, Collection<Indexes> collectionOfIndexes, Co
                 try {
                     return new URI(uri.getScheme(), uri.getHost(), path, query, fragment);
                 } catch (URISyntaxException e) {
-                    ExceptionUtil.printStackTrace(e);
+                    assert ExceptionUtil.printStackTrace(e);
                 }
             }
         }

File: app/src/main/java/org/jd/gui/controller/MainController.java
Patch:
@@ -64,11 +64,8 @@ public class MainController implements API {
     protected ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
     protected ArrayList<IndexesChangeListener> containerChangeListeners = new ArrayList<>();
 
-    long debug;
-
     @SuppressWarnings("unchecked")
     public MainController(Configuration configuration) {
-        debug = System.currentTimeMillis();
         this.configuration = configuration;
 
         SwingUtil.invokeLater(() -> {

File: services/src/main/java/org/jd/gui/service/sourcesaver/AbstractSourceSaverProvider.java
Patch:
@@ -24,7 +24,7 @@ public abstract class AbstractSourceSaverProvider implements SourceSaver {
     /**
      * Initialize "selectors" and "pathPattern" with optional external properties file
      */
-    AbstractSourceSaverProvider() {
+    public AbstractSourceSaverProvider() {
         Properties properties = new Properties();
         Class clazz = this.getClass();
 

File: services/src/main/java/org/jd/gui/service/sourcesaver/FileSourceSaverProvider.java
Patch:
@@ -20,7 +20,7 @@
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
 
-class FileSourceSaverProvider extends AbstractSourceSaverProvider {
+public class FileSourceSaverProvider extends AbstractSourceSaverProvider {
 
     @Override public String[] getSelectors() { return appendSelectors("*:file:*"); }
 

File: services/src/main/java/org/jd/gui/service/sourcesaver/ZipFileSourceSaverProvider.java
Patch:
@@ -17,7 +17,7 @@
 import java.nio.file.*;
 import java.util.HashMap;
 
-class ZipFileSourceSaverProvider extends DirectorySourceSaverProvider {
+public class ZipFileSourceSaverProvider extends DirectorySourceSaverProvider {
 
     @Override public String[] getSelectors() { return appendSelectors("*:file:*.zip", "*:file:*.jar", "*:file:*.war", "*:file:*.ear"); }
 

File: app/src/main/java/org/jd/gui/view/SearchInConstantPoolsView.java
Patch:
@@ -103,7 +103,7 @@ public SearchInConstantPoolsView(
                     }
                 }
                 @Override public void keyPressed(KeyEvent e) {
-                    if (e.getKeyChar() == KeyEvent.VK_DOWN) {
+                    if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                         DefaultMutableTreeNode root = (DefaultMutableTreeNode)searchInConstantPoolsTree.getModel().getRoot();
                         if (root.getChildCount() > 0) {
                             searchInConstantPoolsTree.requestFocus();
@@ -194,7 +194,7 @@ public SearchInConstantPoolsView(
             searchInConstantPoolsTree.setCellRenderer(new TreeNodeRenderer());
             searchInConstantPoolsTree.addKeyListener(new KeyAdapter() {
                 @Override public void keyPressed(KeyEvent e) {
-                    if (e.getKeyChar() == KeyEvent.VK_UP) {
+                    if (e.getKeyCode() == KeyEvent.VK_UP) {
                         if (searchInConstantPoolsTree.getLeadSelectionRow() == 0) {
                             searchInConstantPoolsEnterTextField.requestFocus();
                             e.consume();

File: app/src/main/java/org/jd/gui/App.java
Patch:
@@ -59,8 +59,7 @@ public static void main(String[] args) {
 
             // Create main controller and show main frame
             controller = new MainController(configuration);
-            controller.show();
-            controller.openFiles(newList(args));
+            controller.show(newList(args));
 		}
 	}
 

File: services/src/main/java/org/jd/gui/service/type/ClassFileTypeFactoryProvider.java
Patch:
@@ -29,7 +29,7 @@ public class ClassFileTypeFactoryProvider extends AbstractTypeFactoryProvider {
     }
 
     // Create cache
-    protected Cache<URI, JavaType> cache = new Cache();
+    protected Cache<URI, JavaType> cache = new Cache<>();
 
     /**
      * @return local + optional external selectors

File: services/src/main/java/org/jd/gui/service/type/JavaFileTypeFactoryProvider.java
Patch:
@@ -28,7 +28,7 @@ public class JavaFileTypeFactoryProvider extends AbstractTypeFactoryProvider {
     }
 
     // Create cache
-    protected Cache<URI, Listener> cache = new Cache();
+    protected Cache<URI, Listener> cache = new Cache<>();
 
     /**
      * @return local + optional external selectors

File: services/src/main/java/jd/gui/util/parser/antlr/ANTLRParser.java
Patch:
@@ -17,11 +17,9 @@ public static void parse(CharStream input, JavaListener listener) {
             JavaLexer lexer = new JavaLexer(input);
             CommonTokenStream tokens = new CommonTokenStream(lexer);
             JavaParser parser = new JavaParser(tokens);
-
             ParseTree tree = parser.compilationUnit();
-            ParseTreeWalker walker = new ParseTreeWalker();
 
-            walker.walk(listener, tree);
+            ParseTreeWalker.DEFAULT.walk(listener, tree);
         } catch (StackOverflowError ignore) {
             // Too complex source file, probably not written by a human.
             // This error may happen on Java file generated by ANTLR for example.

File: services/src/main/java/jd/gui/service/sourcesaver/ClassFileSourceSaverProvider.java
Patch:
@@ -15,6 +15,7 @@
 import jd.gui.util.decompiler.GuiPreferences;
 import jd.gui.spi.SourceSaver;
 import jd.gui.util.decompiler.PlainTextPrinter;
+import jd.gui.util.io.NewlineOutputStream;
 
 import java.io.*;
 import java.nio.charset.Charset;
@@ -111,7 +112,7 @@ public void save(API api, Controller controller, Listener listener, Path path, C
                 ps.print("\n */");
             }
 
-            try (OutputStream os = Files.newOutputStream(path)) {
+            try (OutputStream os = new NewlineOutputStream(Files.newOutputStream(path))) {
                 baos.writeTo(os);
             } catch (IOException ignore) {
             }

