File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
Patch:
@@ -153,7 +153,7 @@ public REQUEST getLowResImageRequest() {
    * <p>For performance reasons, the array is not deep-copied, but only stored by reference. Please
    * don't modify once submitted.
    */
-  public BUILDER setFirstAvailableImageRequests(REQUEST[] firstAvailableImageRequests) {
+  public BUILDER setFirstAvailableImageRequests(@Nullable REQUEST[] firstAvailableImageRequests) {
     return setFirstAvailableImageRequests(firstAvailableImageRequests, true);
   }
 
@@ -167,7 +167,7 @@ public BUILDER setFirstAvailableImageRequests(REQUEST[] firstAvailableImageReque
    *     supplied requests.
    */
   public BUILDER setFirstAvailableImageRequests(
-      REQUEST[] firstAvailableImageRequests, boolean tryCacheOnlyFirst) {
+      @Nullable REQUEST[] firstAvailableImageRequests, boolean tryCacheOnlyFirst) {
     Preconditions.checkArgument(
         firstAvailableImageRequests == null || firstAvailableImageRequests.length > 0,
         "No requests specified!");

File: drawee/src/main/java/com/facebook/drawee/debug/DebugControllerOverlayDrawable.java
Patch:
@@ -20,12 +20,14 @@
 import androidx.annotation.VisibleForTesting;
 import com.facebook.drawee.debug.listener.ImageLoadingTimeListener;
 import com.facebook.drawee.drawable.ScalingUtils.ScaleType;
+import com.facebook.infer.annotation.Nullsafe;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import javax.annotation.Nullable;
 
 /** Drawee Controller overlay that displays debug information. */
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public class DebugControllerOverlayDrawable extends Drawable implements ImageLoadingTimeListener {
 
   private static final String NO_CONTROLLER_ID = "none";
@@ -57,6 +59,7 @@ public class DebugControllerOverlayDrawable extends Drawable implements ImageLoa
   private static final int MAX_LINE_WIDTH_EM = 8;
 
   // General information
+  // NULLSAFE_FIXME[Field Not Initialized]
   private String mControllerId;
   @Nullable private String mImageId;
   private int mWidthPx;

File: drawee/src/main/java/com/facebook/drawee/debug/DebugControllerOverlayDrawable.java
Patch:
@@ -164,7 +164,7 @@ public void setImageFormat(@Nullable String imageFormat) {
     mImageFormat = imageFormat;
   }
 
-  public void setScaleType(ScaleType scaleType) {
+  public void setScaleType(@Nullable ScaleType scaleType) {
     mScaleType = scaleType;
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java
Patch:
@@ -76,6 +76,8 @@ public class DefaultImageDecoder implements ImageDecoder {
             return decodeGif(encodedImage, length, qualityInfo, options);
           } else if (imageFormat == DefaultImageFormats.WEBP_ANIMATED) {
             return decodeAnimatedWebp(encodedImage, length, qualityInfo, options);
+          } else if (imageFormat == DefaultImageFormats.BINARY_XML) {
+            throw new DecodeException("unsupported image format", encodedImage);
           } else if (imageFormat == ImageFormat.UNKNOWN) {
             throw new DecodeException("unknown image format", encodedImage);
           }

File: fbcore/src/main/java/com/facebook/common/memory/MemoryTrimType.java
Patch:
@@ -31,6 +31,9 @@ public enum MemoryTrimType {
   /** The system as a whole is running out of memory, and this application is in the background. */
   OnSystemLowMemoryWhileAppInBackgroundLowSeverity(1),
 
+  /** The system as a whole is running out of memory, and this application is in the background. */
+  OnSystemModerateMemory(0.5),
+
   /** This app is moving into the background, usually because the user navigated to another app. */
   OnAppBackgrounded(1),
 

File: samples/zoomable/src/main/java/com/facebook/samples/zoomable/DefaultZoomableController.java
Patch:
@@ -15,11 +15,13 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import com.facebook.common.logging.FLog;
+import com.facebook.infer.annotation.Nullsafe;
 import com.facebook.samples.gestures.TransformGestureDetector;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 
 /** Zoomable controller that calculates transformation based on touch events. */
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public class DefaultZoomableController
     implements ZoomableController, TransformGestureDetector.Listener {
 
@@ -650,6 +652,7 @@ public int computeVerticalScrollExtent() {
   }
 
   public Listener getListener() {
+    // NULLSAFE_FIXME[Return Not Nullable]
     return mListener;
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
Patch:
@@ -107,7 +107,8 @@ public static ImageRequestBuilder fromRequest(ImageRequest imageRequest) {
         .setShouldDecodePrefetches(imageRequest.shouldDecodePrefetches())
         .setDelayMs(imageRequest.getDelayMs())
         .setDiskCacheId(imageRequest.getDiskCacheId())
-        .setDownsampleOverride(imageRequest.getDownsampleOverride());
+        .setDownsampleOverride(imageRequest.getDownsampleOverride())
+        .setResizingAllowedOverride(imageRequest.getResizingAllowedOverride());
   }
 
   public static void addCustomUriNetworkScheme(String scheme) {

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/DefaultCloseableImage.java
Patch:
@@ -8,7 +8,9 @@
 package com.facebook.imagepipeline.image;
 
 import com.facebook.common.logging.FLog;
+import com.facebook.infer.annotation.Nullsafe;
 
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public abstract class DefaultCloseableImage extends BaseCloseableImage {
   private static final String TAG = "CloseableImage";
 

File: drawee/src/main/java/com/facebook/drawee/controller/ControllerListener.java
Patch:
@@ -46,7 +46,6 @@ public interface ControllerListener<INFO> {
    *
    * @param id controller id
    * @param imageInfo image info
-   * @param imageInfo image info
    */
   void onIntermediateImageSet(String id, @Nullable INFO imageInfo);
 

File: memory-types/ashmem/src/test/java/com/facebook/imagepipeline/testing/FakeAshmemMemoryChunk.java
Patch:
@@ -9,14 +9,15 @@
 
 import com.facebook.imagepipeline.memory.AshmemMemoryChunk;
 import com.facebook.imagepipeline.memory.MemoryChunk;
+import javax.annotation.Nullable;
 
 /**
  * A fake implementation of {@link com.facebook.memory.ashmem.AshmemMemoryChunk} to allow us to test
  * out pools and other functionality. This uses byte arrays instead of actual ashmem memory, but
  * supports the same public interface
  */
 public class FakeAshmemMemoryChunk extends AshmemMemoryChunk {
-  private byte[] mBuf;
+  @Nullable private byte[] mBuf;
 
   public FakeAshmemMemoryChunk(int bufSize) {
     super();

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunk.java
Patch:
@@ -9,14 +9,15 @@
 
 import com.facebook.imagepipeline.memory.MemoryChunk;
 import com.facebook.imagepipeline.memory.NativeMemoryChunk;
+import javax.annotation.Nullable;
 
 /**
  * A fake implementation of {@link com.facebook.imagepipeline.memory.NativeMemoryChunk} to allow us
  * to test out pools and other functionality. This uses byte arrays instead of actual native memory,
  * but supports the same public interface
  */
 public class FakeNativeMemoryChunk extends NativeMemoryChunk {
-  private byte[] mBuf;
+  @Nullable private byte[] mBuf;
 
   public FakeNativeMemoryChunk(int bufSize) {
     super();

File: drawee/src/test/java/com/facebook/drawee/drawable/ScaleTypeDrawableTest.java
Patch:
@@ -19,6 +19,7 @@
 import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
+import javax.annotation.Nullable;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -283,7 +284,7 @@ private void testConfigureBounds(
       int underlyingWidth,
       int underlyingHeight,
       ScaleType scaleType,
-      PointF focusPoint,
+      @Nullable PointF focusPoint,
       Matrix expectedMatrix) {
     mScaleTypeDrawable.setScaleType(scaleType);
     if (focusPoint != null) {

File: drawee/src/main/java/com/facebook/drawee/drawable/ScaleTypeDrawable.java
Patch:
@@ -219,6 +219,7 @@ void configureBounds() {
 
     // We need to do the scaling ourselves, so have the underlying drawable use its preferred size.
     underlyingDrawable.setBounds(0, 0, underlyingWidth, underlyingHeight);
+    mTempMatrix.reset();
     mScaleType.getTransform(
         mTempMatrix,
         bounds,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java
Patch:
@@ -464,6 +464,9 @@ public void onFailure(final ForwardingConsumer consumer, final Throwable t) {
           pair.second
               .getProducerListener()
               .onProducerFinishWithFailure(pair.second, mProducerName, t, null);
+          if (mMultiplexProducerContext != null) {
+            pair.second.putExtras(mMultiplexProducerContext.getExtras());
+          }
           pair.first.onFailure(t);
         }
       }

File: fbcore/src/test/java/com/facebook/common/media/MediaUtilsTest.java
Patch:
@@ -58,7 +58,7 @@ public void testExtractMimeNoFileExtension() {
   @Test
   public void testExtractMimeNativelySupportedFileExtension() {
     ShadowMimeTypeMap mimeTypeMap = Shadows.shadowOf(MimeTypeMap.getSingleton());
-    mimeTypeMap.addExtensionMimeTypMapping("jpg", "image/jpg");
+    mimeTypeMap.addExtensionMimeTypeMapping("jpg", "image/jpg");
 
     String path = "file/with/natively/supported/extension.jpg";
     assertThat(MediaUtils.extractMime(path)).isEqualTo("image/jpg");

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -346,7 +346,7 @@ private ProducerFactory getProducerFactory() {
                   mConfig.getPoolFactory().getSmallByteArrayPool(),
                   getImageDecoder(),
                   mConfig.getProgressiveJpegConfig(),
-                  mConfig.isDownsampleEnabled(),
+                  mConfig.getDownsampleMode(),
                   mConfig.isResizeAndRotateEnabledForNetwork(),
                   mConfig.getExperiments().isDecodeCancellationEnabled(),
                   mConfig.getExecutorSupplier(),
@@ -384,7 +384,7 @@ private ProducerSequenceFactory getProducerSequenceFactory() {
               mConfig.isResizeAndRotateEnabledForNetwork(),
               mConfig.getExperiments().isWebpSupportEnabled(),
               mThreadHandoffProducerQueue,
-              mConfig.isDownsampleEnabled(),
+              mConfig.getDownsampleMode(),
               useBitmapPrepareToDraw,
               mConfig.getExperiments().isPartialImageCachingEnabled(),
               mConfig.isDiskCacheEnabled(),

File: imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
Patch:
@@ -92,7 +92,7 @@ public void setUp() {
             true,
             false,
             mThreadHandoffProducerQueue,
-            false,
+            DownsampleMode.AUTO,
             false,
             false,
             true,
@@ -371,7 +371,7 @@ private void internalUseSequenceFactoryWithBitmapPrepare() {
             true,
             false,
             mThreadHandoffProducerQueue,
-            false,
+            DownsampleMode.AUTO,
             /* useBitmapPrepareToDraw */ true,
             false,
             true,
@@ -395,7 +395,7 @@ private void internalUseSequenceFactoryWithCustomSequence(
             true,
             false,
             mThreadHandoffProducerQueue,
-            false,
+            DownsampleMode.AUTO,
             false,
             false,
             true,

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/DecodeProducerTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.facebook.imagepipeline.common.Priority;
 import com.facebook.imagepipeline.common.ResizeOptions;
 import com.facebook.imagepipeline.core.CloseableReferenceFactory;
+import com.facebook.imagepipeline.core.DownsampleMode;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.core.ImagePipelineExperiments;
 import com.facebook.imagepipeline.debug.NoOpCloseableReferenceLeakTracker;
@@ -119,7 +120,7 @@ public int getGoodEnoughScanNumber() {
             mExecutor,
             mImageDecoder,
             mProgressiveJpegConfig,
-            false, /* Set downsampleEnabled to false */
+            DownsampleMode.AUTO, /* Set downsampleMode to AUTO */
             false, /* Set resizeAndRotateForNetwork to false */
             false, /* We don't cancel when the request is cancelled */
             mInputProducer,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
Patch:
@@ -48,12 +48,12 @@ consumer, listener, producerContext, getProducerName()) {
             EncodedImage encodedImage = LocalFetchProducer.this.getEncodedImage(imageRequest);
             if (encodedImage == null) {
               listener.onUltimateProducerReached(producerContext, getProducerName(), false);
-              producerContext.putOriginExtra("local");
+              producerContext.putOriginExtra("local", "fetch");
               return null;
             }
             encodedImage.parseMetaData();
             listener.onUltimateProducerReached(producerContext, getProducerName(), true);
-            producerContext.putOriginExtra("local");
+            producerContext.putOriginExtra("local", "fetch");
             producerContext.putExtra(HasExtraData.KEY_COLOR_SPACE, encodedImage.getColorSpace());
             return encodedImage;
           }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalThumbnailBitmapProducer.java
Patch:
@@ -58,14 +58,14 @@ public void produceResults(
           protected void onSuccess(@Nullable CloseableReference<CloseableImage> result) {
             super.onSuccess(result);
             listener.onUltimateProducerReached(context, PRODUCER_NAME, result != null);
-            context.putOriginExtra("local");
+            context.putOriginExtra("local", "thumbnail_bitmap");
           }
 
           @Override
           protected void onFailure(Exception e) {
             super.onFailure(e);
             listener.onUltimateProducerReached(context, PRODUCER_NAME, false);
-            context.putOriginExtra("local");
+            context.putOriginExtra("local", "thumbnail_bitmap");
           }
 
           @Override

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
Patch:
@@ -69,14 +69,14 @@ public void produceResults(
           protected void onSuccess(@Nullable CloseableReference<CloseableImage> result) {
             super.onSuccess(result);
             listener.onUltimateProducerReached(producerContext, PRODUCER_NAME, result != null);
-            producerContext.putOriginExtra("local");
+            producerContext.putOriginExtra("local", "video");
           }
 
           @Override
           protected void onFailure(Exception e) {
             super.onFailure(e);
             listener.onUltimateProducerReached(producerContext, PRODUCER_NAME, false);
-            producerContext.putOriginExtra("local");
+            producerContext.putOriginExtra("local", "video");
           }
 
           @Override

File: vito/core-java-impl/src/main/java/com/facebook/fresco/vito/core/impl/debug/BaseDebugOverlayFactory2.java
Patch:
@@ -35,6 +35,7 @@ public void update(FrescoDrawable2 drawable, @Nullable ControllerListener2.Extra
     DebugOverlayDrawable overlay = extractOrCreate(drawable);
     overlay.reset();
     setData(overlay, drawable, extras);
+    overlay.invalidateSelf();
   }
 
   protected abstract void setData(

File: static-webp/src/androidTest/java/com/facebook/webpsupport/WebpBitmapFactoryTest.java
Patch:
@@ -37,9 +37,8 @@ public void setUp() {
     mInstrumentation = InstrumentationRegistry.getInstrumentation();
     mWebpBitmapFactory = new WebpBitmapFactoryImpl();
     ImagePipelineConfig.Builder configBuilder =
-        ImagePipelineConfig.newBuilder(mInstrumentation.getContext())
-            .experiment()
-            .setWebpBitmapFactory(mWebpBitmapFactory);
+        ImagePipelineConfig.newBuilder(mInstrumentation.getContext());
+    configBuilder.experiment().setWebpBitmapFactory(mWebpBitmapFactory);
     ImagePipelineFactory.initialize(configBuilder.build());
   }
 

File: static-webp/src/androidTest/java/com/facebook/webpsupport/WebpDecodingTest.java
Patch:
@@ -38,9 +38,8 @@ public void setUp() {
     mInstrumentation = InstrumentationRegistry.getInstrumentation();
     mWebpBitmapFactory = new WebpBitmapFactoryImpl();
     ImagePipelineConfig.Builder configBuilder =
-        ImagePipelineConfig.newBuilder(mInstrumentation.getContext())
-            .experiment()
-            .setWebpBitmapFactory(mWebpBitmapFactory);
+        ImagePipelineConfig.newBuilder(mInstrumentation.getContext());
+    configBuilder.experiment().setWebpBitmapFactory(mWebpBitmapFactory);
     ImagePipelineFactory.initialize(configBuilder.build());
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BaseConsumer.java
Patch:
@@ -7,6 +7,7 @@
 
 package com.facebook.imagepipeline.producers;
 
+import android.annotation.SuppressLint;
 import com.facebook.common.logging.FLog;
 import com.facebook.infer.annotation.Nullsafe;
 import javax.annotation.Nullable;
@@ -75,6 +76,7 @@ public static boolean statusHasAnyFlag(@Status int status, @Status int flag) {
   }
 
   /** Creates a simple status value which only identifies whether this is the last result. */
+  @SuppressLint("WrongConstant")
   public static @Status int simpleStatusForIsLast(boolean isLast) {
     return isLast ? IS_LAST : NO_FLAGS;
   }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
Patch:
@@ -7,6 +7,7 @@
 
 package com.facebook.imagepipeline.producers;
 
+import android.annotation.SuppressLint;
 import android.graphics.Bitmap;
 import androidx.annotation.VisibleForTesting;
 import com.facebook.common.internal.ImmutableMap;
@@ -386,6 +387,7 @@ public synchronized void update() {
       updateInternal();
     }
 
+    @SuppressLint("WrongConstant")
     private void updateInternal() {
       CloseableReference<CloseableImage> sourceImageRef;
       synchronized (RepeatedPostprocessorConsumer.this) {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/platform/DefaultDecoder.java
Patch:
@@ -240,7 +240,8 @@ public DefaultDecoder(BitmapPool bitmapPool, Pools.Pool<ByteBuffer> decodeBuffer
       options.inTempStorage = byteBuffer.array();
       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT
           && regionToDecode != null
-          && bitmapToReuse != null) {
+          && bitmapToReuse != null
+          && options.inPreferredConfig != null) {
         BitmapRegionDecoder bitmapRegionDecoder = null;
         try {
           bitmapToReuse.reconfigure(targetWidth, targetHeight, options.inPreferredConfig);

File: vito/core-java-impl/src/main/java/com/facebook/fresco/vito/core/impl/HierarcherImpl.java
Patch:
@@ -125,6 +125,8 @@ public Drawable buildErrorDrawable(Resources resources, ImageOptions imageOption
       Drawable drawable = imageOptions.getErrorDrawable();
       if (drawable == null && imageOptions.getErrorRes() != 0) {
         drawable = resources.getDrawable(imageOptions.getErrorRes());
+      } else if (drawable == null && imageOptions.getErrorColor() != null) {
+        drawable = new ColorDrawable(imageOptions.getErrorColor());
       }
       if (drawable == null) {
         return null;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalThumbnailBitmapProducer.java
Patch:
@@ -104,8 +104,7 @@ protected Map<String, String> getExtraMapOnSuccess(
           }
 
           @Override
-          // NULLSAFE_FIXME[Inconsistent Subclass Parameter Annotation]
-          protected void disposeResult(CloseableReference<CloseableImage> result) {
+          protected void disposeResult(@Nullable CloseableReference<CloseableImage> result) {
             CloseableReference.closeSafely(result);
           }
         };

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
Patch:
@@ -121,8 +121,7 @@ protected Map<String, String> getExtraMapOnSuccess(
           }
 
           @Override
-          // NULLSAFE_FIXME[Inconsistent Subclass Parameter Annotation]
-          protected void disposeResult(CloseableReference<CloseableImage> result) {
+          protected void disposeResult(@Nullable CloseableReference<CloseableImage> result) {
             CloseableReference.closeSafely(result);
           }
         };

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
Patch:
@@ -307,9 +307,8 @@ private SingleUsePostprocessorConsumer(PostprocessorConsumer postprocessorConsum
     }
 
     @Override
-    // NULLSAFE_FIXME[Inconsistent Subclass Parameter Annotation]
     protected void onNewResultImpl(
-        final CloseableReference<CloseableImage> newResult, @Status int status) {
+        final @Nullable CloseableReference<CloseableImage> newResult, @Status int status) {
       // ignore intermediate results
       if (isNotLast(status)) {
         return;

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
Patch:
@@ -851,6 +851,7 @@ private Extras obtainExtras(
         COMPONENT_EXTRAS,
         SHORTCUT_EXTRAS,
         datasourceExtras,
+        null,
         getDimensions(),
         scaleType,
         focusPoint,

File: ui-common/src/main/java/com/facebook/fresco/ui/common/ControllerListener2.java
Patch:
@@ -22,6 +22,7 @@ class Extras {
     public @Nullable Map<String, Object> shortcutExtras;
     public @Nullable Map<String, Object> datasourceExtras;
     public @Nullable Map<String, Object> imageExtras;
+    public @Nullable Map<String, Object> imageSourceExtras;
 
     public @Nullable Object callerContext;
     public @Nullable Uri mainUri;

File: fbcore/src/main/java/com/facebook/common/references/DefaultCloseableReference.java
Patch:
@@ -34,7 +34,7 @@ private DefaultCloseableReference(
   public CloseableReference<T> clone() {
     Preconditions.checkState(isValid());
     return new DefaultCloseableReference<T>(
-        mSharedReference, mLeakHandler, mStacktrace != null ? new Throwable(mStacktrace) : null);
+        mSharedReference, mLeakHandler, mStacktrace != null ? new Throwable() : null);
   }
 
   @Override

File: ui-common/src/main/java/com/facebook/fresco/ui/common/ControllerListener2.java
Patch:
@@ -29,8 +29,8 @@ class Extras {
     public int viewportWidth = -1;
     public int viewportHeight = -1;
     public @Nullable Object scaleType;
-    public float focusX = -1;
-    public float focusY = -1;
+    public @Nullable Float focusX;
+    public @Nullable Float focusY;
 
     public static Extras of(@Nullable Map<String, Object> componentExtras) {
       Extras extras = new Extras();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BranchOnSeparateImagesProducer.java
Patch:
@@ -58,7 +58,7 @@ protected void onNewResultImpl(@Nullable EncodedImage newResult, @Status int sta
           getConsumer().onNewResult(newResult, alteredStatus);
         }
       }
-      if (isLast && !isGoodEnough && !request.getLoadThumbnailOnly()) {
+      if (isLast && !isGoodEnough && !request.getLoadThumbnailOnlyForAndroidSdkAboveQ()) {
         EncodedImage.closeSafely(newResult);
 
         mInputProducer2.produceResults(getConsumer(), mProducerContext);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
Patch:
@@ -18,6 +18,7 @@
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_UNKNOWN;
 
 import android.net.Uri;
+import android.os.Build;
 import androidx.annotation.IntDef;
 import com.facebook.cache.common.CacheKey;
 import com.facebook.common.internal.Fn;
@@ -224,8 +225,8 @@ public boolean getLocalThumbnailPreviewsEnabled() {
     return mLocalThumbnailPreviewsEnabled;
   }
 
-  public boolean getLoadThumbnailOnly() {
-    return mLoadThumbnailOnly;
+  public boolean getLoadThumbnailOnlyForAndroidSdkAboveQ() {
+    return Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q && mLoadThumbnailOnly;
   }
 
   public Priority getPriority() {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
Patch:
@@ -92,7 +92,7 @@ public static ImageRequestBuilder fromRequest(ImageRequest imageRequest) {
         .setBytesRange(imageRequest.getBytesRange())
         .setCacheChoice(imageRequest.getCacheChoice())
         .setLocalThumbnailPreviewsEnabled(imageRequest.getLocalThumbnailPreviewsEnabled())
-        .setLoadThumbnailOnly(imageRequest.getLoadThumbnailOnly())
+        .setLoadThumbnailOnly(imageRequest.getLoadThumbnailOnlyForAndroidSdkAboveQ())
         .setLowestPermittedRequestLevel(imageRequest.getLowestPermittedRequestLevel())
         .setCachesDisabled(imageRequest.getCachesDisabled())
         .setPostprocessor(imageRequest.getPostprocessor())

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/pjpeg/ImageFormatProgressiveJpegFragment.java
Patch:
@@ -22,7 +22,6 @@
 import androidx.annotation.Nullable;
 import androidx.appcompat.widget.SwitchCompat;
 import com.facebook.drawee.backends.pipeline.Fresco;
-import com.facebook.drawee.backends.pipeline.info.ImagePerfDataListener;
 import com.facebook.drawee.controller.BaseControllerListener;
 import com.facebook.drawee.drawable.ProgressBarDrawable;
 import com.facebook.drawee.interfaces.DraweeController;
@@ -31,6 +30,7 @@
 import com.facebook.fresco.samples.showcase.R;
 import com.facebook.fresco.samples.showcase.misc.ImageUriProvider;
 import com.facebook.fresco.samples.showcase.misc.LogcatImagePerfDataListener;
+import com.facebook.fresco.ui.common.ImagePerfDataListener;
 import com.facebook.imagepipeline.image.ImageInfo;
 import com.facebook.imagepipeline.image.QualityInfo;
 import com.facebook.imagepipeline.request.ImageRequest;

File: animated-base/src/main/java/com/facebook/fresco/animation/factory/AnimatedFactoryV2Impl.java
Patch:
@@ -52,7 +52,7 @@ public class AnimatedFactoryV2Impl implements AnimatedFactory {
   private final ExecutorSupplier mExecutorSupplier;
   private final CountingMemoryCache<CacheKey, CloseableImage> mBackingCache;
   private final boolean mDownscaleFrameToDrawableDimensions;
-  private final Supplier<Boolean> useNewBitmapRender = Suppliers.BOOLEAN_TRUE;
+  private final Supplier<Boolean> useNewBitmapRender = Suppliers.BOOLEAN_FALSE;
 
   private @Nullable AnimatedImageFactory mAnimatedImageFactory;
   private @Nullable AnimatedDrawableBackendProvider mAnimatedDrawableBackendProvider;

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoController2Impl.java
Patch:
@@ -280,7 +280,7 @@ private void setActualImage(
   public void onNewResult(
       FrescoDrawable2Impl drawable,
       VitoImageRequest imageRequest,
-      DataSource<CloseableReference<CloseableImage>> dataSource) {
+      @Nullable DataSource<CloseableReference<CloseableImage>> dataSource) {
     if (dataSource == null || !dataSource.hasResult()) {
       return;
     }

File: animated-base/src/test/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImplTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
@@ -54,7 +55,8 @@ public void setUp() throws Exception {
     when(mImage.getFrame(anyInt())).thenReturn(mFrame);
 
     PowerMockito.mockStatic(Bitmap.class);
-    when(Bitmap.createBitmap(anyInt(), anyInt(), isA(Bitmap.Config.class))).thenReturn(mBitmap);
+    when(Bitmap.createBitmap(anyInt(), anyInt(), isA(Bitmap.Config.class)))
+        .thenAnswer((Answer<Bitmap>) invocation -> mBitmap);
   }
 
   private void testBasic(

File: fbcore/src/test/java/com/facebook/datasource/DataSourcesTest.java
Patch:
@@ -48,7 +48,9 @@ public void setUp() throws Exception {
 
     PowerMockito.mockStatic(CountDownLatch.class);
     mCountDownLatch = mock(CountDownLatch.class);
-    PowerMockito.whenNew(CountDownLatch.class).withAnyArguments().thenReturn(mCountDownLatch);
+    PowerMockito.whenNew(CountDownLatch.class)
+        .withAnyArguments()
+        .thenAnswer((Answer<CountDownLatch>) invocation -> mCountDownLatch);
   }
 
   @Test

File: imagepipeline-base/src/test/java/com/facebook/cache/disk/ScoreBasedEvictionComparatorSupplierTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.stubbing.Answer;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
@@ -36,7 +37,7 @@ public void setUp() {
     Random random = new Random(RANDOM_SEED);
 
     PowerMockito.mockStatic(System.class);
-    when(System.currentTimeMillis()).thenReturn(0l);
+    when(System.currentTimeMillis()).thenAnswer((Answer<Long>) invocation -> 0L);
 
     entries = new ArrayList<>();
     for (int i = 0; i < 100; i++) {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/platform/ArtDecoder.java
Patch:
@@ -7,6 +7,7 @@
 
 package com.facebook.imagepipeline.platform;
 
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
@@ -31,6 +32,7 @@ public ArtDecoder(BitmapPool bitmapPool, Pools.Pool<ByteBuffer> decodeBuffers) {
 
   @Override
   public int getBitmapSize(final int width, final int height, final BitmapFactory.Options options) {
+    @SuppressLint("RestrictedApi")
     Bitmap.Config c = Preconditions.checkNotNull(options.inPreferredConfig);
     return BitmapUtil.getSizeInByteForBitmap(width, height, c);
   }

File: imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() throws Exception {
         .thenReturn(mPooledByteBuffer);
 
     mockStatic(StagingArea.class);
-    when(StagingArea.getInstance()).thenReturn(mStagingArea);
+    when(StagingArea.getInstance()).thenAnswer((Answer<StagingArea>) invocation -> mStagingArea);
 
     mBufferedDiskCache =
         new BufferedDiskCache(

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/JobSchedulerTest.java
Patch:
@@ -118,7 +118,9 @@ public Long answer(InvocationOnMock invocation) throws Throwable {
     mTestExecutorService = new TestExecutorService(mFakeClockForWorker);
     mTestScheduledExecutorService = new TestScheduledExecutorService(mFakeClockForScheduled);
     PowerMockito.mockStatic(JobScheduler.JobStartExecutorSupplier.class);
-    when(JobScheduler.JobStartExecutorSupplier.get()).thenReturn(mTestScheduledExecutorService);
+    when(JobScheduler.JobStartExecutorSupplier.get())
+        .thenAnswer(
+            (Answer<TestScheduledExecutorService>) invocation -> mTestScheduledExecutorService);
 
     mTestJobRunnable = new TestJobRunnable();
     mJobScheduler = new JobScheduler(mTestExecutorService, mTestJobRunnable, INTERVAL);

File: fbcore/src/main/java/com/facebook/common/references/CloseableReference.java
Patch:
@@ -179,7 +179,7 @@ public static <T> CloseableReference<T> of(
    * <p>Returns null if the parameter is null.
    */
   public static <T extends Closeable> CloseableReference<T> of(
-      @PropagatesNullable T t, LeakHandler leakHandler) {
+      @PropagatesNullable @Nullable T t, LeakHandler leakHandler) {
     if (t == null) {
       return null;
     } else {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/CloseableReferenceFactory.java
Patch:
@@ -13,6 +13,7 @@
 import com.facebook.common.references.SharedReference;
 import com.facebook.imagepipeline.debug.CloseableReferenceLeakTracker;
 import com.facebook.infer.annotation.Nullsafe;
+import com.facebook.infer.annotation.PropagatesNullable;
 import java.io.Closeable;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -49,7 +50,7 @@ public boolean requiresStacktrace() {
         };
   }
 
-  public <U extends Closeable> CloseableReference<U> create(U u) {
+  public <U extends Closeable> CloseableReference<U> create(@PropagatesNullable @Nullable U u) {
     return CloseableReference.of(u, mLeakHandler);
   }
 

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/CloseableImage.java
Patch:
@@ -33,7 +33,8 @@ public abstract class CloseableImage implements Closeable, ImageInfo {
               "uri_source",
               "image_format",
               "bitmap_config",
-              "is_rounded"));
+              "is_rounded",
+              "non_fatal_decode_error"));
 
   /** @return size in bytes of the bitmap(s) */
   public abstract int getSizeInBytes();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ProducerConstants.java
Patch:
@@ -30,4 +30,5 @@ class ProducerConstants {
   static final String ENCODED_IMAGE_SIZE = "encodedImageSize";
   static final String REQUESTED_IMAGE_SIZE = "requestedImageSize";
   static final String SAMPLE_SIZE = "sampleSize";
+  static final String NON_FATAL_DECODE_ERROR = "non_fatal_decode_error";
 }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/HierarcherImpl.java
Patch:
@@ -128,6 +128,9 @@ public Drawable buildErrorDrawable(Resources resources, ImageOptions imageOption
       if (drawable == null) {
         return null;
       }
+      if (imageOptions.getErrorApplyRoundingOptions()) {
+        drawable = applyRoundingOptions(resources, drawable, imageOptions);
+      }
       if (drawable != null && imageOptions.getErrorScaleType() != null) {
         return new ScaleTypeDrawable(
             drawable, imageOptions.getErrorScaleType(), imageOptions.getErrorFocusPoint());

File: drawee/src/main/java/com/facebook/drawee/drawable/Rounded.java
Patch:
@@ -37,4 +37,6 @@ public interface Rounded {
   void setPaintFilterBitmap(boolean paintFilterBitmap);
 
   boolean getPaintFilterBitmap();
+
+  void setRepeatEdgePixels(boolean repeatEdgePixels);
 }

File: drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
Patch:
@@ -322,6 +322,7 @@ static void applyRoundingParams(Rounded rounded, RoundingParams roundingParams)
     rounded.setPadding(roundingParams.getPadding());
     rounded.setScaleDownInsideBorders(roundingParams.getScaleDownInsideBorders());
     rounded.setPaintFilterBitmap(roundingParams.getPaintFilterBitmap());
+    rounded.setRepeatEdgePixels(roundingParams.getRepeatEdgePixels());
   }
 
   /** Resets the rounding params on the specified rounded drawable, so that no rounding occurs. */
@@ -332,6 +333,7 @@ static void resetRoundingParams(Rounded rounded) {
     rounded.setPadding(0);
     rounded.setScaleDownInsideBorders(false);
     rounded.setPaintFilterBitmap(false);
+    rounded.setRepeatEdgePixels(RoundedBitmapDrawable.getDefaultRepeatEdgePixels());
   }
 
   /** Finds the immediate parent of a leaf drawable. */

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -17,7 +17,6 @@
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.logging.FLog;
 import com.facebook.common.memory.PooledByteBuffer;
-import com.facebook.common.references.CloseableReference;
 import com.facebook.imageformat.ImageFormatChecker;
 import com.facebook.imagepipeline.animated.factory.AnimatedFactory;
 import com.facebook.imagepipeline.animated.factory.AnimatedFactoryProvider;
@@ -161,8 +160,6 @@ public ImagePipelineFactory(ImagePipelineConfigInterface config) {
                 config.getExecutorSupplier().forLightweightBackgroundTasks())
             : new ThreadHandoffProducerQueueImpl(
                 config.getExecutorSupplier().forLightweightBackgroundTasks());
-    CloseableReference.setDisableCloseableReferencesForBitmaps(
-        config.getExperiments().getBitmapCloseableRefType());
     mCloseableReferenceFactory =
         new CloseableReferenceFactory(config.getCloseableReferenceLeakTracker());
     if (FrescoSystrace.isTracing()) {

File: vito/litho/src/main/java/com/facebook/fresco/vito/litho/FrescoVitoImage2Spec.java
Patch:
@@ -98,7 +98,8 @@ static FrescoDrawableInterface onCreateMountContent(Context c) {
   static void onCreateInitialState(
       ComponentContext context,
       StateValue<AtomicReference<DataSource<Void>>> workingRangePrefetchData) {
-    if (FrescoVitoProvider.getConfig().getPrefetchConfig().prefetchWithWorkingRange()) {
+    if (FrescoVitoProvider.hasBeenInitialized()
+        && FrescoVitoProvider.getConfig().getPrefetchConfig().prefetchWithWorkingRange()) {
       workingRangePrefetchData.set(new AtomicReference<DataSource<Void>>());
     }
   }

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
Patch:
@@ -421,6 +421,7 @@ protected Supplier<DataSource<IMAGE>> getDataSourceSupplierForRequest(
       @Override
       public DataSource<IMAGE> get() {
         return getDataSourceForRequest(
+            // NULLSAFE_FIXME[Parameter Not Nullable]
             controller, controllerId, imageRequest, callerContext, cacheLevel);
       }
 

File: fbcore/src/main/java/com/facebook/datasource/BaseBooleanSubscriber.java
Patch:
@@ -32,6 +32,7 @@ public abstract class BaseBooleanSubscriber implements DataSubscriber<Boolean> {
   @Override
   public void onNewResult(DataSource<Boolean> dataSource) {
     try {
+      // NULLSAFE_FIXME[Parameter Not Nullable]
       onNewResultImpl(dataSource.getResult());
     } finally {
       dataSource.close();

File: imagepipeline-base/src/main/java/com/facebook/cache/common/CacheKey.java
Patch:
@@ -22,6 +22,7 @@ public interface CacheKey {
   String toString();
 
   /** This method must be implemented, otherwise the cache keys will be be compared by reference. */
+  // NULLSAFE_FIXME[Inconsistent Subclass Parameter Annotation]
   boolean equals(Object o);
 
   /** This method must be implemented with accordance to the {@link #equals} method. */

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/DiskStorageCache.java
Patch:
@@ -302,6 +302,7 @@ public boolean probe(final CacheKey key) {
       }
     } catch (IOException e) {
       SettableCacheEvent cacheEvent =
+          // NULLSAFE_FIXME[Parameter Not Nullable]
           SettableCacheEvent.obtain().setCacheKey(key).setResourceId(resourceId).setException(e);
       mCacheEventListener.onReadException(cacheEvent);
       cacheEvent.recycle();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
Patch:
@@ -305,11 +305,13 @@ public void put(final CacheKey key, EncodedImage encodedImage) {
               public void run() {
                 final Object currentToken = FrescoInstrumenter.onBeginWork(token, null);
                 try {
+                  // NULLSAFE_FIXME[Parameter Not Nullable]
                   writeToDiskCache(key, finalEncodedImage);
                 } catch (Throwable th) {
                   FrescoInstrumenter.markFailure(token, th);
                   throw th;
                 } finally {
+                  // NULLSAFE_FIXME[Parameter Not Nullable]
                   mStagingArea.remove(key, finalEncodedImage);
                   EncodedImage.closeSafely(finalEncodedImage);
                   FrescoInstrumenter.onEndWork(currentToken);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BasePool.java
Patch:
@@ -287,6 +287,7 @@ public V get(int size) {
       }
     }
 
+    // NULLSAFE_FIXME[Return Not Nullable]
     return value;
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
Patch:
@@ -389,6 +389,7 @@ private CloseableImage internalDecode(
           throw e;
         }
 
+        // NULLSAFE_FIXME[Nullable Dereference]
         mReclaimMemoryRunnable.run();
         System.gc();
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
Patch:
@@ -104,11 +104,13 @@ private void transcodeLastResult(
           protected EncodedImage getResult() throws Exception {
             PooledByteBufferOutputStream outputStream = mPooledByteBufferFactory.newOutputStream();
             try {
+              // NULLSAFE_FIXME[Parameter Not Nullable]
               doTranscode(encodedImageCopy, outputStream);
               CloseableReference<PooledByteBuffer> ref =
                   CloseableReference.of(outputStream.toByteBuffer());
               try {
                 EncodedImage encodedImage = new EncodedImage(ref);
+                // NULLSAFE_FIXME[Parameter Not Nullable]
                 encodedImage.copyMetaDataFrom(encodedImageCopy);
                 return encodedImage;
               } finally {

File: animated-base/src/test/java/com/facebook/imagepipeline/animated/impl/AnimatedFrameCacheTest.java
Patch:
@@ -66,6 +66,8 @@ public void setUp() {
                 mMemoryCacheParamsSupplier,
                 mMemoryTrimmableRegistry,
                 new BitmapMemoryCacheTrimStrategy(),
+                false,
+                false,
                 null);
     mCacheKey = new SimpleCacheKey("key");
     mAnimatedFrameCache = new AnimatedFrameCache(mCacheKey, countingMemoryCache);

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/BitmapMemoryCacheFactory.java
Patch:
@@ -19,5 +19,7 @@ CountingMemoryCache<CacheKey, CloseableImage> create(
       Supplier<MemoryCacheParams> bitmapMemoryCacheParamsSupplier,
       MemoryTrimmableRegistry memoryTrimmableRegistry,
       MemoryCache.CacheTrimStrategy trimStrategy,
+      boolean storeEntrySize,
+      boolean ignoreSizeMismatch,
       @Nullable CountingMemoryCache.EntryStateObserver<CacheKey> observer);
 }

File: imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/LruCountingMemoryCacheTest.java
Patch:
@@ -103,7 +103,8 @@ public int getSizeInBytes(Integer value) {
     when(mParamsSupplier.get()).thenReturn(mParams);
     mBitmapReference = CloseableReference.of(mBitmap, FAKE_BITMAP_RESOURCE_RELEASER);
     mCache =
-        new LruCountingMemoryCache<>(mValueDescriptor, mCacheTrimStrategy, mParamsSupplier, null);
+        new LruCountingMemoryCache<>(
+            mValueDescriptor, mCacheTrimStrategy, mParamsSupplier, null, false, false);
   }
 
   @Test

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/EncodedCountingMemoryCacheFactory.java
Patch:
@@ -32,7 +32,7 @@ public int getSizeInBytes(PooledByteBuffer value) {
 
     CountingMemoryCache<CacheKey, PooledByteBuffer> countingCache =
         new LruCountingMemoryCache<>(
-            valueDescriptor, trimStrategy, encodedMemoryCacheParamsSupplier, null);
+            valueDescriptor, trimStrategy, encodedMemoryCacheParamsSupplier, null, false, false);
 
     memoryTrimmableRegistry.registerMemoryTrimmable(countingCache);
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -199,6 +199,8 @@ public CountingMemoryCache<CacheKey, CloseableImage> getBitmapCountingMemoryCach
                   mConfig.getBitmapMemoryCacheParamsSupplier(),
                   mConfig.getMemoryTrimmableRegistry(),
                   mConfig.getBitmapMemoryCacheTrimStrategy(),
+                  mConfig.getExperiments().shouldStoreCacheEntrySize(),
+                  mConfig.getExperiments().shouldIgnoreCacheSizeMismatch(),
                   mConfig.getBitmapMemoryCacheEntryStateObserver());
     }
     return mBitmapCountingMemoryCache;

File: drawee/src/main/java/com/facebook/drawee/drawable/ForwardingDrawable.java
Patch:
@@ -16,6 +16,7 @@
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import com.facebook.infer.annotation.Nullsafe;
 import javax.annotation.Nullable;
 
 /**
@@ -27,6 +28,7 @@
  * DrawableContainer, LevelListDrawable etc. DrawableContainer is not directly subclassable, and the
  * others don't allow changing the member drawables.
  */
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public class ForwardingDrawable extends Drawable
     implements Drawable.Callback, TransformCallback, TransformAwareDrawable, DrawableParent {
 
@@ -230,6 +232,7 @@ public Drawable mutate() {
   // DrawableParent methods
 
   @Override
+  @Nullable
   public Drawable setDrawable(@Nullable Drawable newDrawable) {
     return setCurrent(newDrawable);
   }

File: vito/provider/src/main/java/com/facebook/fresco/vito/provider/FrescoVitoProvider.java
Patch:
@@ -45,7 +45,7 @@ public static synchronized FrescoVitoConfig getConfig() {
     return getImplementation().getConfig();
   }
 
-  public static synchronized void setImplementation(Implementation implementation) {
+  public static synchronized void setImplementation(@Nullable Implementation implementation) {
     sImplementation = implementation;
   }
 

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/vito/FrescoVitoRegionDecoder.java
Patch:
@@ -12,6 +12,7 @@
 import android.graphics.Rect;
 import android.graphics.RectF;
 import com.facebook.common.references.CloseableReference;
+import com.facebook.fresco.vito.core.FrescoVitoImageDecodeOptions;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.decoder.ImageDecoder;
 import com.facebook.imagepipeline.image.CloseableImage;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingMemoryCache.java
Patch:
@@ -75,13 +75,15 @@ class Entry<K, V> {
     // closed too.
     public boolean isOrphan;
     @Nullable public final EntryStateObserver<K> observer;
+    public int accessCount;
 
     private Entry(K key, CloseableReference<V> valueRef, @Nullable EntryStateObserver<K> observer) {
       this.key = Preconditions.checkNotNull(key);
       this.valueRef = Preconditions.checkNotNull(CloseableReference.cloneOrNull(valueRef));
       this.clientCount = 0;
       this.isOrphan = false;
       this.observer = observer;
+      this.accessCount = 0;
     }
 
     /** Creates a new entry with the usage count of 0. */

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/AbstractAdaptiveCountingMemoryCache.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractAdaptiveCountingMemoryCache<K, V>
     implements CountingMemoryCache<K, V> {
   private static final String TAG = "AbstractArcCountingMemoryCache";
 
-  // Contains the least frequently used items out of all the iterms in the cache that are not being
+  // Contains the least frequently used items out of all the items in the cache that are not being
   // used by any client and are hence viable for eviction.
   @GuardedBy("this")
   @VisibleForTesting
@@ -79,7 +79,7 @@ public abstract class AbstractAdaptiveCountingMemoryCache<K, V>
   static final int DEFAULT_LFU_FRACTION_PROMIL = 500;
 
   // These constants are used to define the smallest LFU/MFU fraction sizes.
-  // considering the cache is partioned [Cache] = [..LFU..|..MFU..]: LFU between 0 and N, MFU
+  // considering the cache is partitioned [Cache] = [..LFU..|..MFU..]: LFU between 0 and N, MFU
   // between N and 1000.
   static final int TOTAL_PROMIL = 1000;
   @VisibleForTesting static final int MIN_FRACTION_PROMIL = 100;

File: animated-webp/src/main/java/com/facebook/animated/webpdrawable/WebpAnimationBackend.java
Patch:
@@ -44,7 +44,7 @@ public static WebpAnimationBackend create(String filePath) throws IOException {
       byte[] targetArray = new byte[is.available()];
       is.read(targetArray);
 
-      WebPImage webPImage = WebPImage.createFromByteArray(targetArray);
+      WebPImage webPImage = WebPImage.createFromByteArray(targetArray, null);
       is.reset();
 
       return new WebpAnimationBackend(webPImage);

File: vito/core/src/test/java/com/facebook/fresco/vito/core/BaseFrescoDrawableTest.java
Patch:
@@ -22,17 +22,17 @@
 import org.robolectric.RobolectricTestRunner;
 
 @RunWith(RobolectricTestRunner.class)
-public class FrescoDrawableTest {
+public class BaseFrescoDrawableTest {
 
-  private FrescoDrawable mFrescoDrawable;
+  private BaseFrescoDrawable mFrescoDrawable;
 
   private CountDownLatch mLatch;
   private CloseableImage mCloseableImage;
   private CloseableReference<CloseableImage> mCloseableReference;
 
   @Before
   public void setup() {
-    mFrescoDrawable = new FrescoDrawable();
+    mFrescoDrawable = new BaseFrescoDrawable();
     mLatch = new CountDownLatch(1);
     mCloseableImage = new DummyCloseableImage();
     mCloseableReference =

File: vito/core/src/main/java/com/facebook/fresco/vito/core/DefaultFrescoVitoConfig.java
Patch:
@@ -10,8 +10,10 @@
 import com.facebook.common.internal.Supplier;
 import com.facebook.common.internal.Suppliers;
 import com.facebook.infer.annotation.Nullsafe;
+import com.facebook.infer.annotation.OkToExtend;
 
 @Nullsafe(Nullsafe.Mode.STRICT)
+@OkToExtend
 public class DefaultFrescoVitoConfig implements FrescoVitoConfig {
 
   private final PrefetchConfig mPrefetchConfig = new DefaultPrefetchConfig();

File: vito/view/src/main/java/com/facebook/fresco/vito/view/impl/VitoViewImpl2.java
Patch:
@@ -72,7 +72,7 @@ public void show(
     // The Drawable might be re-purposed before being cleaned up, so we release if necessary.
     VitoImageRequest oldImageRequest = frescoDrawable.getImageRequest();
     if (oldImageRequest != null && !oldImageRequest.equals(imageRequest)) {
-      mController.release(frescoDrawable);
+      mController.releaseImmediately(frescoDrawable);
     }
     // We always set fields required to fetch the image.
     frescoDrawable.setImageRequest(imageRequest);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -178,7 +178,8 @@ private AnimatedFactory getAnimatedFactory() {
               getPlatformBitmapFactory(),
               mConfig.getExecutorSupplier(),
               getBitmapCountingMemoryCache(),
-              mConfig.getExperiments().shouldDownscaleFrameToDrawableDimensions());
+              mConfig.getExperiments().shouldDownscaleFrameToDrawableDimensions(),
+              mConfig.getExecutorServiceForAnimatedImages());
     }
     return mAnimatedFactory;
   }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/VitoImagePipeline.java
Patch:
@@ -27,7 +27,7 @@ VitoImageRequest createImageRequest(
   CloseableReference<CloseableImage> getCachedImage(VitoImageRequest imageRequest);
 
   DataSource<CloseableReference<CloseableImage>> fetchDecodedImage(
-      VitoImageRequest imageSource,
+      VitoImageRequest imageRequest,
       @Nullable Object callerContext,
       @Nullable RequestListener requestListener,
       long uiComponentId);

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/DebugOverlayDrawable.java
Patch:
@@ -17,7 +17,7 @@
 import android.util.Pair;
 import android.view.Gravity;
 import androidx.annotation.ColorInt;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class DebugOverlayDrawable extends Drawable {
@@ -38,7 +38,7 @@ public class DebugOverlayDrawable extends Drawable {
   private int mTextGravity = Gravity.BOTTOM;
 
   // Internal helpers
-  private final HashMap<String, Pair<String, Integer>> mDebugData = new HashMap<>();
+  private final LinkedHashMap<String, Pair<String, Integer>> mDebugData = new LinkedHashMap<>();
   private final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   private final String mIdentifier;
   private int mMaxLineLength = INITIAL_MAX_LINE_LENGTH;

File: drawee/src/test/java/com/facebook/drawee/components/DeferredReleaserStressTest.java
Patch:
@@ -17,9 +17,11 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
+@LooperMode(LooperMode.Mode.LEGACY) // Required for pausing and unpausing looper
 public class DeferredReleaserStressTest {
   private static final int K = 1000;
 

File: drawee/src/test/java/com/facebook/drawee/drawable/FadeDrawableOnFadeListenerTest.java
Patch:
@@ -17,14 +17,14 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.SystemClock;
-import com.facebook.testing.robolectric.v4.WithTestDefaultsRunner;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.robolectric.RobolectricTestRunner;
 
 /** Tests {@link FadeDrawable.OnFadeListener} */
-@RunWith(WithTestDefaultsRunner.class)
+@RunWith(RobolectricTestRunner.class)
 @PrepareForTest({
   //  SystemClock.class,
   Rect.class,

File: fbcore/src/test/java/com/facebook/common/executors/HandlerExecutorServiceImplTest.java
Patch:
@@ -18,10 +18,12 @@
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
+import org.robolectric.annotation.LooperMode;
 import org.robolectric.shadows.ShadowLooper;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest = Config.NONE)
+@LooperMode(LooperMode.Mode.LEGACY) // Required for pausing and unpausing the looper
 public class HandlerExecutorServiceImplTest {
 
   private AtomicInteger mCounter = new AtomicInteger();

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/PriorityNetworkFetcherTest.java
Patch:
@@ -594,15 +594,15 @@ public void delegateFetchStateIsRecreatedOnRequeue() {
 
     assertThat(recordingNetworkFetcher.createdFetchStates).hasSize(1);
     assertThat(fetchState.delegatedState)
-        .isSameAs(recordingNetworkFetcher.createdFetchStates.get(0));
+        .isSameInstanceAs(recordingNetworkFetcher.createdFetchStates.get(0));
 
     // Simulate a failure in fetchState, triggering a requeue.
     getOnlyElement(recordingNetworkFetcher.callbacks.get(fetchState.delegatedState))
         .onFailure(new Exception());
 
     assertThat(recordingNetworkFetcher.createdFetchStates).hasSize(2);
     assertThat(fetchState.delegatedState)
-        .isSameAs(recordingNetworkFetcher.createdFetchStates.get(1));
+        .isSameInstanceAs(recordingNetworkFetcher.createdFetchStates.get(1));
 
     Map<String, String> extrasMap = fetcher.getExtraMap(fetchState, 123);
     assertThat(extrasMap).containsEntry("requeueCount", "1");

File: drawee/src/main/java/com/facebook/drawee/drawable/FadeDrawable.java
Patch:
@@ -378,6 +378,9 @@ private void onFadeStarted() {
       return;
     }
 
+    if (mActualImageLayer < 0 || mActualImageLayer >= mIsLayerOn.length) {
+      return;
+    }
     if (!mIsLayerOn[mActualImageLayer]) {
       return;
     }

File: imagepipeline-base/src/test/java/com/facebook/cache/disk/DiskStorageCacheTest.java
Patch:
@@ -660,6 +660,7 @@ public void testSizeEvictionClearsIndex() throws Exception {
   public void testTimeEvictionClearsIndex() throws Exception {
     when(mClock.now()).thenReturn(5l);
     CacheKey key = putOneThingInCache();
+    when(mClock.now()).thenReturn(10l);
     mCache.clearOldEntries(4);
     assertFalse(mCache.hasKeySync(key));
     assertFalse(mCache.hasKey(key));

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingLruBitmapMemoryCacheFactory.java
Patch:
@@ -1,5 +1,3 @@
-// (c) Facebook, Inc. and its affiliates. Confidential and proprietary.
-
 /*
  * Copyright (c) Facebook, Inc. and its affiliates.
  *

File: viewport/src/main/java/com/facebook/fresco/viewport/HasTransform.java
Patch:
@@ -1,5 +1,3 @@
-// (c) Facebook, Inc. and its affiliates. Confidential and proprietary.
-
 /*
  * Copyright (c) Facebook, Inc. and its affiliates.
  *

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoVitoImageDecodeOptions.java
Patch:
@@ -12,8 +12,10 @@
 import com.facebook.common.internal.Objects;
 import com.facebook.drawee.drawable.ScalingUtils;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
+import com.facebook.infer.annotation.Nullsafe;
 import javax.annotation.Nullable;
 
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public class FrescoVitoImageDecodeOptions extends ImageDecodeOptions {
 
   private static final FrescoVitoImageDecodeOptions DEFAULTS =
@@ -47,7 +49,7 @@ public static FrescoVitoImageDecodeOptionsBuilder newBuilder() {
   }
 
   @Override
-  public boolean equals(Object obj) {
+  public boolean equals(@Nullable Object obj) {
     if (this == obj) {
       return false;
     }

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
Patch:
@@ -120,7 +120,7 @@ public Object getCallerContext() {
   }
 
   /** Sets the image request. */
-  public BUILDER setImageRequest(REQUEST imageRequest) {
+  public BUILDER setImageRequest(@Nullable REQUEST imageRequest) {
     mImageRequest = imageRequest;
     return getThis();
   }

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/LruCountingMemoryCache.java
Patch:
@@ -526,9 +526,9 @@ public synchronized int getEvictionQueueSizeInBytes() {
   }
 
   @Override
-  public @Nullable String getDebugData() {
+  public synchronized @Nullable String getDebugData() {
     return Objects.toStringHelper("CountingMemoryCache")
-        .add("cached_entries_count:", mCachedEntries.getCount())
+        .add("cached_entries_count", mCachedEntries.getCount())
         .add("cached_entries_size_bytes", mCachedEntries.getSizeInBytes())
         .add("exclusive_entries_count", mExclusiveEntries.getCount())
         .add("exclusive_entries_size_bytes", mExclusiveEntries.getSizeInBytes())

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/BaseDebugOverlayFactory2.java
Patch:
@@ -41,7 +41,7 @@ protected abstract void setData(
       FrescoDrawable2 drawable,
       @Nullable ControllerListener2.Extras extras);
 
-  private DebugOverlayDrawable extractOrCreate(FrescoDrawable2 drawable) {
+  private static DebugOverlayDrawable extractOrCreate(FrescoDrawable2 drawable) {
     Drawable existingOverlay = drawable.getOverlayDrawable();
     if (existingOverlay instanceof DebugOverlayDrawable) {
       return (DebugOverlayDrawable) existingOverlay;
@@ -60,7 +60,7 @@ private DebugOverlayDrawable extractOrCreate(FrescoDrawable2 drawable) {
     return debugOverlay;
   }
 
-  private class DebugOverlayDrawableWrapper extends LayerDrawable {
+  private static class DebugOverlayDrawableWrapper extends LayerDrawable {
     private DebugOverlayDrawable mDebugOverlayDrawable;
 
     public DebugOverlayDrawableWrapper(

File: vito/core/src/main/java/com/facebook/fresco/vito/core/Hierarcher.java
Patch:
@@ -35,8 +35,9 @@ public interface Hierarcher {
    *
    * @param resources resources to be used to load the drawable
    * @param imageOptions image options to be used to create the progressbar drawable
-   * @return the progressbar drawable or NopDrawable.INSTANCE if unset.
+   * @return the progressbar drawable or null if unset.
    */
+  @Nullable
   Drawable buildProgressDrawable(Resources resources, ImageOptions imageOptions);
 
   /**

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener2.java
Patch:
@@ -136,13 +136,13 @@ public void onRelease(String id, Extras extras) {
     final long now = mClock.now();
 
     mImagePerfState.setExtraData(extras);
+    mImagePerfState.setControllerId(id);
 
     int lastImageLoadStatus = mImagePerfState.getImageLoadStatus();
     if (lastImageLoadStatus != ImageLoadStatus.SUCCESS
         && lastImageLoadStatus != ImageLoadStatus.ERROR
         && lastImageLoadStatus != ImageLoadStatus.DRAW) {
       mImagePerfState.setControllerCancelTimeMs(now);
-      mImagePerfState.setControllerId(id);
       // The image request was canceled
       updateStatus(ImageLoadStatus.CANCELED);
     }
@@ -152,6 +152,7 @@ public void onRelease(String id, Extras extras) {
 
   @Override
   public void onImageDrawn(String id, ImageInfo info, DimensionsInfo dimensionsInfo) {
+    mImagePerfState.setControllerId(id);
     mImagePerfState.setImageDrawTimeMs(mClock.now());
     mImagePerfState.setDimensionsInfo(dimensionsInfo);
     updateStatus(ImageLoadStatus.DRAW);

File: vito/core/src/main/java/com/facebook/fresco/vito/core/DrawableDataSubscriber.java
Patch:
@@ -26,4 +26,6 @@ void onProgressUpdate(
       FrescoDrawable2 drawable,
       VitoImageRequest imageRequest,
       DataSource<CloseableReference<CloseableImage>> dataSource);
+
+  void onRelease(FrescoDrawable2 drawable);
 }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoDrawable2Impl.java
Patch:
@@ -227,6 +227,9 @@ public void cancelReleaseDelayed() {
   public void scheduleReleaseNextFrame() {
     cancelReleaseDelayed();
     sDeferredReleaser.scheduleDeferredRelease(this);
+    if (mDrawableDataSubscriber != null) {
+      mDrawableDataSubscriber.onRelease(this);
+    }
   }
 
   @Override

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/DebugOverlayFactory2.java
Patch:
@@ -7,7 +7,9 @@
 
 package com.facebook.fresco.vito.core.impl.debug;
 
+import com.facebook.fresco.ui.common.ControllerListener2;
 import com.facebook.fresco.vito.core.FrescoDrawable2;
+import javax.annotation.Nullable;
 
 public interface DebugOverlayFactory2 {
 
@@ -17,5 +19,5 @@ public interface DebugOverlayFactory2 {
    *
    * @param drawable the drawable to update the overlay for
    */
-  void update(FrescoDrawable2 drawable);
+  void update(FrescoDrawable2 drawable, @Nullable ControllerListener2.Extras extras);
 }

File: vito/options/src/main/java/com/facebook/fresco/vito/options/EncodedImageOptions.java
Patch:
@@ -13,7 +13,7 @@
 import com.facebook.infer.annotation.Nullsafe;
 import javax.annotation.Nullable;
 
-@Nullsafe(Nullsafe.Mode.STRICT)
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public class EncodedImageOptions {
 
   public static Builder create() {

File: vito/options/src/main/java/com/facebook/fresco/vito/options/ImageOptions.java
Patch:
@@ -17,12 +17,11 @@
 import com.facebook.infer.annotation.Nullsafe;
 import javax.annotation.Nullable;
 
-@Nullsafe(Nullsafe.Mode.STRICT)
+@Nullsafe(Nullsafe.Mode.LOCAL)
 public class ImageOptions extends DecodedImageOptions {
 
   private static ImageOptions sDefaultImageOptions =
       new Builder()
-          .scale(ScalingUtils.ScaleType.CENTER_CROP)
           .placeholderScaleType(ScalingUtils.ScaleType.CENTER_INSIDE)
           .progressScaleType(ScalingUtils.ScaleType.CENTER_INSIDE)
           .errorScaleType(ScalingUtils.ScaleType.CENTER_INSIDE)

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/DefaultDiskStorage.java
Patch:
@@ -103,11 +103,14 @@ public DefaultDiskStorage(File rootDirectory, int version, CacheErrorLogger cach
     mClock = SystemClock.get();
   }
 
+  @SuppressWarnings("ExternalStorageUse")
   private static boolean isExternal(File directory, CacheErrorLogger cacheErrorLogger) {
     boolean state = false;
     String appCacheDirPath = null;
 
     try {
+      // Whitelisted use of external storage Android changes in Target SDK 29 and above as it
+      // only used for getting the canonical path
       File extStoragePath = Environment.getExternalStorageDirectory();
       if (extStoragePath != null) {
         String cacheDirPath = extStoragePath.toString();

File: drawee/src/main/java/com/facebook/drawee/drawable/FadeDrawable.java
Patch:
@@ -316,7 +316,7 @@ public void draw(Canvas canvas) {
     }
 
     for (int i = 0; i < mLayers.length; i++) {
-      drawDrawableWithAlpha(canvas, mLayers[i], mAlphas[i] * mAlpha / 255);
+      drawDrawableWithAlpha(canvas, mLayers[i], (int) Math.ceil(mAlphas[i] * mAlpha / 255.0));
     }
 
     if (!done) {

File: drawee/src/test/java/com/facebook/drawee/drawable/FadeDrawableTest.java
Patch:
@@ -330,7 +330,7 @@ public void testSetAlpha() {
     inOrder.verify(mLayers[0]).setAlpha(128);
     inOrder.verify(mLayers[0]).draw(mCanvas);
     inOrder.verify(mLayers[1]).mutate();
-    inOrder.verify(mLayers[1]).setAlpha(25);
+    inOrder.verify(mLayers[1]).setAlpha(26);
     inOrder.verify(mLayers[1]).draw(mCanvas);
     inOrder.verify(mCallback, atLeastOnce()).invalidateDrawable(mFadeDrawable);
     inOrder.verifyNoMoreInteractions();

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoControllerImpl.java
Patch:
@@ -791,6 +791,8 @@ private static Extras obtainExtras(
         SHORTCUT_EXTRAS,
         dataSource == null ? null : dataSource.getExtras(),
         frescoDrawable == null ? null : frescoDrawable.getViewportDimensions(),
+        String.valueOf(frescoDrawable == null ? null : frescoDrawable.getActualImageScaleType()),
+        frescoDrawable == null ? null : frescoDrawable.getActualImageFocusPoint(),
         closeableImage == null ? null : closeableImage.getExtras(),
         callerContext,
         mainUri);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BaseProducerContext.java
Patch:
@@ -350,7 +350,6 @@ public void putOriginExtra(@Nullable String origin, @Nullable String subcategory
 
   @Override
   public void putOriginExtra(@Nullable String origin) {
-    mExtras.put(ExtraKeys.ORIGIN, origin);
-    mExtras.put(ExtraKeys.ORIGIN_SUBCATEGORY, ORIGIN_SUBCATEGORY_DEFAULT);
+    putOriginExtra(origin, ORIGIN_SUBCATEGORY_DEFAULT);
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
Patch:
@@ -85,9 +85,10 @@ public void produceResults(
     final ProducerListener2 listener = producerContext.getProducerListener();
     final ImageRequest imageRequest = producerContext.getImageRequest();
 
+    producerContext.putOriginExtra("local", "exif");
     final StatefulProducerRunnable cancellableProducerRunnable =
         new StatefulProducerRunnable<EncodedImage>(
-            consumer, listener, producerContext, PRODUCER_NAME, "local", "exif") {
+            consumer, listener, producerContext, PRODUCER_NAME) {
           @Override
           protected @Nullable EncodedImage getResult() throws Exception {
             final Uri sourceUri = imageRequest.getSourceUri();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
Patch:
@@ -35,9 +35,10 @@ public void produceResults(
 
     final ProducerListener2 listener = producerContext.getProducerListener();
     final ImageRequest imageRequest = producerContext.getImageRequest();
+    producerContext.putOriginExtra("local", "fetch");
     final StatefulProducerRunnable cancellableProducerRunnable =
         new StatefulProducerRunnable<EncodedImage>(
-            consumer, listener, producerContext, getProducerName(), "local", "fetch") {
+            consumer, listener, producerContext, getProducerName()) {
 
           @Override
           protected @Nullable EncodedImage getResult() throws Exception {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
Patch:
@@ -58,9 +58,10 @@ public void produceResults(
 
     final ProducerListener2 listener = producerContext.getProducerListener();
     final ImageRequest imageRequest = producerContext.getImageRequest();
+    producerContext.putOriginExtra("local", "video");
     final StatefulProducerRunnable cancellableProducerRunnable =
         new StatefulProducerRunnable<CloseableReference<CloseableImage>>(
-            consumer, listener, producerContext, PRODUCER_NAME, "local", "video") {
+            consumer, listener, producerContext, PRODUCER_NAME) {
           @Override
           protected void onSuccess(CloseableReference<CloseableImage> result) {
             super.onSuccess(result);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducer.java
Patch:
@@ -36,7 +36,7 @@ public void produceResults(final Consumer<T> consumer, final ProducerContext con
       final ProducerListener2 producerListener = context.getProducerListener();
       final StatefulProducerRunnable<T> statefulRunnable =
           new StatefulProducerRunnable<T>(
-              consumer, producerListener, context, PRODUCER_NAME, null, null) {
+              consumer, producerListener, context, PRODUCER_NAME) {
             @Override
             protected void onSuccess(T ignored) {
               producerListener.onProducerFinishWithSuccess(context, PRODUCER_NAME, null);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
Patch:
@@ -100,9 +100,7 @@ private void transcodeLastResult(
             consumer,
             producerContext.getProducerListener(),
             producerContext,
-            PRODUCER_NAME,
-            null,
-            null) {
+            PRODUCER_NAME) {
           @Override
           protected EncodedImage getResult() throws Exception {
             PooledByteBufferOutputStream outputStream = mPooledByteBufferFactory.newOutputStream();

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/StatefulProducerRunnableTest.java
Patch:
@@ -53,7 +53,7 @@ public void setUp() {
 
     mStatefulProducerRunnable =
         new StatefulProducerRunnable<Closeable>(
-            mConsumer, mProducerListener, mProducerContext, PRODUCER_NAME, null, null) {
+            mConsumer, mProducerListener, mProducerContext, PRODUCER_NAME) {
           @Override
           protected void disposeResult(Closeable result) {
             try {

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/BaseDebugOverlayFactory2.java
Patch:
@@ -43,7 +43,7 @@ private DebugOverlayDrawable extractOrCreate(FrescoDrawable2 drawable) {
       return wrapper.getDebugOverlayDrawable();
     }
 
-    DebugOverlayDrawable debugOverlay = new DebugOverlayDrawable("V2");
+    DebugOverlayDrawable debugOverlay = new DebugOverlayDrawable("v2");
     if (existingOverlay != null) {
       drawable.setOverlayDrawable(new DebugOverlayDrawableWrapper(existingOverlay, debugOverlay));
     } else {

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/DebugOverlayDrawable.java
Patch:
@@ -95,7 +95,7 @@ public void draw(Canvas canvas) {
     mCurrentTextXPx = mStartTextXPx;
     mCurrentTextYPx = mStartTextYPx;
 
-    addDebugText(canvas, "Vito", "v2", IDENTIFIER_COLOR);
+    addDebugText(canvas, "Vito", mIdentifier, IDENTIFIER_COLOR);
     for (Map.Entry<String, Pair<String, Integer>> entry : mDebugData.entrySet()) {
       addDebugText(canvas, entry.getKey(), entry.getValue().first, entry.getValue().second);
     }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/DefaultDebugOverlayFactory.java
Patch:
@@ -29,7 +29,7 @@ public Drawable create(FrescoState frescoState) {
     if (!mDebugOverlayEnabled.get()) {
       return null;
     }
-    DebugOverlayDrawable drawable = new DebugOverlayDrawable("Vito");
+    DebugOverlayDrawable drawable = new DebugOverlayDrawable("v1");
     drawable.addDebugData("ID", "" + frescoState.getStringId());
     final int origin = frescoState.getImageOrigin();
     drawable.addDebugData(

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/BaseDebugOverlayFactory2.java
Patch:
@@ -48,7 +48,7 @@ private DebugOverlayDrawable extractOrCreate(FrescoDrawable2 drawable) {
       }
     }
     if (overlay == null) {
-      overlay = new DebugOverlayDrawable("Vito 2");
+      overlay = new DebugOverlayDrawable("V2");
       drawable.setOverlayDrawable(new LayerDrawable(new Drawable[] {existingOverlay, overlay}));
       drawable.showOverlayImmediately();
     }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/Hierarcher.java
Patch:
@@ -116,7 +116,7 @@ void setupOverlayDrawable(
    * @param debugOverlayDrawable a debug overlay drawable if enabled
    */
   void setupDebugOverlayDrawable(
-      FrescoDrawable frescoDrawable,
+      BaseFrescoDrawable frescoDrawable,
       @Nullable Drawable overlayDrawable,
       @Nullable Drawable debugOverlayDrawable);
 }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/HierarcherImpl.java
Patch:
@@ -17,7 +17,6 @@
 import com.facebook.drawee.drawable.InstrumentedDrawable;
 import com.facebook.drawee.drawable.ScaleTypeDrawable;
 import com.facebook.fresco.vito.core.BaseFrescoDrawable;
-import com.facebook.fresco.vito.core.FrescoDrawable;
 import com.facebook.fresco.vito.core.Hierarcher;
 import com.facebook.fresco.vito.core.NopDrawable;
 import com.facebook.fresco.vito.drawable.RoundingUtils;
@@ -211,7 +210,7 @@ public void setupOverlayDrawable(
 
   @Override
   public void setupDebugOverlayDrawable(
-      FrescoDrawable frescoDrawable,
+      BaseFrescoDrawable frescoDrawable,
       @Nullable Drawable overlayDrawable,
       @Nullable Drawable debugOverlayDrawable) {
     if (debugOverlayDrawable == null) {

File: vito/core/src/main/java/com/facebook/fresco/vito/core/Hierarcher.java
Patch:
@@ -116,7 +116,7 @@ void setupOverlayDrawable(
    * @param debugOverlayDrawable a debug overlay drawable if enabled
    */
   void setupDebugOverlayDrawable(
-      BaseFrescoDrawable frescoDrawable,
+      FrescoDrawable frescoDrawable,
       @Nullable Drawable overlayDrawable,
       @Nullable Drawable debugOverlayDrawable);
 }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/HierarcherImpl.java
Patch:
@@ -211,7 +211,7 @@ public void setupOverlayDrawable(
 
   @Override
   public void setupDebugOverlayDrawable(
-      BaseFrescoDrawable frescoDrawable,
+      FrescoDrawable frescoDrawable,
       @Nullable Drawable overlayDrawable,
       @Nullable Drawable debugOverlayDrawable) {
     if (debugOverlayDrawable == null) {

File: vito/core/src/main/java/com/facebook/fresco/vito/core/Hierarcher.java
Patch:
@@ -116,7 +116,7 @@ void setupOverlayDrawable(
    * @param debugOverlayDrawable a debug overlay drawable if enabled
    */
   void setupDebugOverlayDrawable(
-      FrescoDrawable frescoDrawable,
+      BaseFrescoDrawable frescoDrawable,
       @Nullable Drawable overlayDrawable,
       @Nullable Drawable debugOverlayDrawable);
 }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/HierarcherImpl.java
Patch:
@@ -211,7 +211,7 @@ public void setupOverlayDrawable(
 
   @Override
   public void setupDebugOverlayDrawable(
-      FrescoDrawable frescoDrawable,
+      BaseFrescoDrawable frescoDrawable,
       @Nullable Drawable overlayDrawable,
       @Nullable Drawable debugOverlayDrawable) {
     if (debugOverlayDrawable == null) {

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoController2Impl.java
Patch:
@@ -82,8 +82,8 @@ public boolean fetch(
     frescoDrawable.setVitoImageRequestListener(mGlobalImageListener);
 
     // Set layers that are always visible
-    frescoDrawable.setOverlayDrawable(
-        mHierarcher.buildOverlayDrawable(imageRequest.resources, imageRequest.imageOptions));
+    mHierarcher.setupOverlayDrawable(
+        frescoDrawable, imageRequest.resources, imageRequest.imageOptions, null);
 
     // We're fetching a new image, so we're updating the ID
     final long imageId = VitoUtils.generateIdentifier();

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoControllerImpl.java
Patch:
@@ -308,7 +308,6 @@ public void onAttach(final FrescoState frescoState, @Nullable ImageListener imag
       mFrescoContext
           .getHierarcher()
           .setupOverlayDrawable(
-              mFrescoContext,
               frescoState.getFrescoDrawable(),
               frescoState.getResources(),
               frescoState.getImageOptions(),

File: vito/litho/src/main/java/com/facebook/fresco/vito/litho/FrescoVitoImageSpec.java
Patch:
@@ -68,7 +68,7 @@ public class FrescoVitoImageSpec {
 
   @OnCreateMountContent(mountingType = MountingType.DRAWABLE)
   static FrescoDrawable onCreateMountContent(Context c) {
-    return new FrescoDrawable(true);
+    return new FrescoDrawable(false);
   }
 
   @OnCreateInitialState

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoContextImpl.java
Patch:
@@ -15,7 +15,7 @@
 import com.facebook.fresco.vito.core.Hierarcher;
 import com.facebook.fresco.vito.core.ImagePipelineUtils;
 import com.facebook.fresco.vito.core.ImageStateListener;
-import com.facebook.fresco.vito.core.debug.DebugOverlayFactory;
+import com.facebook.fresco.vito.core.impl.debug.DebugOverlayFactory;
 import com.facebook.fresco.vito.listener.ImageListener;
 import com.facebook.imagepipeline.core.ImagePipeline;
 import com.facebook.imagepipeline.core.ImagePipelineFactory;

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/FrescoControllerImpl.java
Patch:
@@ -28,7 +28,7 @@
 import com.facebook.fresco.vito.core.FrescoState;
 import com.facebook.fresco.vito.core.Hierarcher;
 import com.facebook.fresco.vito.core.VitoUtils;
-import com.facebook.fresco.vito.core.debug.DebugOverlayFactory;
+import com.facebook.fresco.vito.core.impl.debug.DebugOverlayFactory;
 import com.facebook.fresco.vito.listener.ImageListener;
 import com.facebook.fresco.vito.listener.impl.AutoPlayImageListener;
 import com.facebook.fresco.vito.listener.impl.ForwardingImageListener;

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/DebugOverlayFactory.java
Patch:
@@ -5,7 +5,7 @@
  * LICENSE file in the root directory of this source tree.
  */
 
-package com.facebook.fresco.vito.core.debug;
+package com.facebook.fresco.vito.core.impl.debug;
 
 import android.graphics.drawable.Drawable;
 import com.facebook.fresco.vito.core.FrescoState;

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/DefaultDebugOverlayFactory.java
Patch:
@@ -12,7 +12,6 @@
 import com.facebook.drawee.backends.pipeline.debug.DebugOverlayImageOriginColor;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginUtils;
 import com.facebook.fresco.vito.core.FrescoState;
-import com.facebook.fresco.vito.core.debug.DebugOverlayFactory;
 import java.util.Locale;
 import javax.annotation.Nullable;
 

File: vito/core/src/main/java/com/facebook/fresco/vito/core/impl/debug/NoOpDebugOverlayFactory.java
Patch:
@@ -5,7 +5,7 @@
  * LICENSE file in the root directory of this source tree.
  */
 
-package com.facebook.fresco.vito.core.debug;
+package com.facebook.fresco.vito.core.impl.debug;
 
 import android.graphics.drawable.Drawable;
 import com.facebook.fresco.vito.core.FrescoState;

File: vito/core/src/test/java/com/facebook/fresco/vito/core/impl/FrescoControllerImplTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.facebook.fresco.vito.core.FrescoExperiments;
 import com.facebook.fresco.vito.core.FrescoState;
 import com.facebook.fresco.vito.core.Hierarcher;
-import com.facebook.fresco.vito.core.debug.NoOpDebugOverlayFactory;
+import com.facebook.fresco.vito.core.impl.debug.NoOpDebugOverlayFactory;
 import com.facebook.fresco.vito.options.ImageOptions;
 import com.facebook.imagepipeline.core.ImagePipeline;
 import com.facebook.imagepipeline.core.ProducerSequenceFactory;

File: vito/provider/src/main/java/com/facebook/fresco/vito/provider/impl/DefaultFrescoContext.java
Patch:
@@ -14,10 +14,10 @@
 import com.facebook.drawee.backends.pipeline.Fresco;
 import com.facebook.fresco.vito.core.FrescoContext;
 import com.facebook.fresco.vito.core.FrescoExperiments;
-import com.facebook.fresco.vito.core.debug.NoOpDebugOverlayFactory;
 import com.facebook.fresco.vito.core.impl.FrescoContextImpl;
 import com.facebook.fresco.vito.core.impl.HierarcherImpl;
 import com.facebook.fresco.vito.core.impl.debug.DefaultDebugOverlayFactory;
+import com.facebook.fresco.vito.core.impl.debug.NoOpDebugOverlayFactory;
 import com.facebook.fresco.vito.drawable.ArrayVitoDrawableFactory;
 import com.facebook.fresco.vito.drawable.BitmapDrawableFactory;
 import com.facebook.fresco.vito.drawable.VitoDrawableFactory;

File: imagepipeline-base/src/main/java/com/facebook/imageutils/TiffUtil.java
Patch:
@@ -169,7 +169,6 @@ private static int getOrientationFromTiffEntry(InputStream is, int length, boole
       return 0;
     }
     int value = StreamProcessor.readPackedInt(is, 2, isLittleEndian);
-    int padding = StreamProcessor.readPackedInt(is, 2, isLittleEndian);
     return value;
   }
 }

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener2.java
Patch:
@@ -100,7 +100,7 @@ public void onIntermediateImageSet(String id, @Nullable ImageInfo imageInfo) {
   }
 
   @Override
-  public void onFinalImageSet(String id, ImageInfo imageInfo, Object extraData) {
+  public void onFinalImageSet(String id, ImageInfo imageInfo, Extras extraData) {
     final long now = mClock.now();
 
     mImagePerfState.setExtraData(extraData);

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
Patch:
@@ -30,6 +30,7 @@
 import com.facebook.drawee.interfaces.SettableDraweeHierarchy;
 import com.facebook.fresco.ui.common.BaseControllerListener2;
 import com.facebook.fresco.ui.common.ControllerListener2;
+import com.facebook.fresco.ui.common.ControllerListener2.Extras;
 import com.facebook.fresco.ui.common.LoggingListener;
 import com.facebook.imagepipeline.systrace.FrescoSystrace;
 import com.facebook.infer.annotation.ReturnsOwnership;
@@ -807,7 +808,7 @@ private void reportRelease() {
     getControllerListener2().onRelease(mId);
   }
 
-  private Object obtainExtras(DataSource<T> dataSource) {
-    return dataSource == null ? SHORCUT_EXTRADATA : dataSource.getExtras();
+  private Extras obtainExtras(DataSource<T> dataSource) {
+    return new Extras();
   }
 }

File: fbcore/src/main/java/com/facebook/datasource/DataSource.java
Patch:
@@ -7,6 +7,7 @@
 
 package com.facebook.datasource;
 
+import java.util.Map;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 
@@ -52,7 +53,7 @@ public interface DataSource<T> {
 
   /** @return an object with extra data for this datasource */
   @Nullable
-  Object getExtras();
+  Map<String, Object> getExtras();
 
   /**
    * @return true if the data source has multiple results (e.g. multiple images). This can be used

File: fbcore/src/main/java/com/facebook/datasource/SimpleDataSource.java
Patch:
@@ -8,6 +8,7 @@
 package com.facebook.datasource;
 
 import com.facebook.common.internal.Preconditions;
+import java.util.Map;
 
 /** Settable {@link DataSource}. */
 public class SimpleDataSource<T> extends AbstractDataSource<T> {
@@ -35,7 +36,7 @@ public static <T> SimpleDataSource<T> create() {
    * @return true if the value was successfully set.
    */
   @Override
-  public boolean setResult(T value, boolean isLast, Object extras) {
+  public boolean setResult(T value, boolean isLast, Map<String, Object> extras) {
     return super.setResult(Preconditions.checkNotNull(value), isLast, extras);
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
Patch:
@@ -18,6 +18,7 @@
 import com.facebook.imagepipeline.request.HasImageRequest;
 import com.facebook.imagepipeline.request.ImageRequest;
 import com.facebook.imagepipeline.systrace.FrescoSystrace;
+import java.util.Map;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.ThreadSafe;
 
@@ -95,7 +96,7 @@ protected void onNewResultImpl(@Nullable T result, int status, ProducerContext p
     }
   }
 
-  protected Object getExtras(ProducerContext producerContext) {
+  protected Map<String, Object> getExtras(ProducerContext producerContext) {
     return producerContext.getExtras();
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ProducerContext.java
Patch:
@@ -84,7 +84,7 @@ public interface ProducerContext {
 
   void setEncodedImageOrigin(EncodedImageOrigin encodedImageOrigin);
 
-  <E> void setExtra(String key, @Nullable E value);
+  <E> void setExtra(@ExtraKeys String key, @Nullable E value);
 
   void putExtras(@NonNull Map<String, ?> extras);
 
@@ -94,5 +94,5 @@ public interface ProducerContext {
   @Nullable
   <E> E getExtra(String key, @Nullable E valueIfNotFound);
 
-  Map<String, ?> getExtras();
+  Map<String, Object> getExtras();
 }

File: ui-common/src/main/java/com/facebook/fresco/ui/common/BaseControllerListener2.java
Patch:
@@ -18,7 +18,7 @@ public static ControllerListener2 getNoOpListener() {
   public void onSubmit(String id, Object callerContext) {}
 
   @Override
-  public void onFinalImageSet(String id, @Nullable INFO imageInfo, Object extraData) {}
+  public void onFinalImageSet(String id, @Nullable INFO imageInfo, Extras extraData) {}
 
   @Override
   public void onIntermediateImageSet(String id, @Nullable INFO imageInfo) {}

File: vito/litho/src/main/java/com/facebook/fresco/vito/litho/FrescoVitoImage2Spec.java
Patch:
@@ -29,6 +29,7 @@
 import com.facebook.litho.annotations.CachedValue;
 import com.facebook.litho.annotations.FromPrepare;
 import com.facebook.litho.annotations.MountSpec;
+import com.facebook.litho.annotations.MountingType;
 import com.facebook.litho.annotations.OnBind;
 import com.facebook.litho.annotations.OnCalculateCachedValue;
 import com.facebook.litho.annotations.OnCreateMountContent;
@@ -51,7 +52,7 @@ public class FrescoVitoImage2Spec {
 
   @PropDefault protected static final float imageAspectRatio = 1f;
 
-  @OnCreateMountContent
+  @OnCreateMountContent(mountingType = MountingType.DRAWABLE)
   static FrescoDrawable2 onCreateMountContent(Context c) {
     return FrescoVitoProvider.getController().createDrawable();
   }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheReadProducer.java
Patch:
@@ -105,6 +105,7 @@ public Void then(Task<EncodedImage> task) throws Exception {
             consumer.onNewResult(cachedReference, Consumer.IS_LAST);
             cachedReference.close();
           } else {
+            producerContext.setExtra(ProducerContext.ExtraKeys.ORIGIN, "disk_none");
             listener.onProducerFinishWithSuccess(
                 producerContext, PRODUCER_NAME, getExtraMap(listener, producerContext, false, 0));
             mInputProducer.produceResults(consumer, producerContext);
@@ -124,6 +125,7 @@ private void maybeStartInputProducer(
       Consumer<EncodedImage> consumer, ProducerContext producerContext) {
     if (producerContext.getLowestPermittedRequestLevel().getValue()
         >= ImageRequest.RequestLevel.DISK_CACHE.getValue()) {
+      producerContext.setExtra(ProducerContext.ExtraKeys.ORIGIN, "disk_null");
       consumer.onNewResult(null, Consumer.IS_LAST);
       return;
     }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PartialDiskCacheProducer.java
Patch:
@@ -125,6 +125,7 @@ public Void then(Task<EncodedImage> task) throws Exception {
             final ImageRequest originalRequest = producerContext.getImageRequest();
 
             if (cachedRange.contains(originalRequest.getBytesRange())) {
+              producerContext.setExtra(ProducerContext.ExtraKeys.ORIGIN, "disk_partial");
               listener.onUltimateProducerReached(producerContext, PRODUCER_NAME, true);
               consumer.onNewResult(cachedReference, Consumer.IS_LAST | Consumer.IS_PARTIAL_RESULT);
             } else {

File: native-imagetranscoder/src/main/java/com/facebook/imagepipeline/nativecode/NativeJpegTranscoderSoLoader.java
Patch:
@@ -7,6 +7,8 @@
 
 package com.facebook.imagepipeline.nativecode;
 
+import static com.facebook.soloader.nativeloader.NativeLoaderDelegate.SKIP_MERGED_JNI_ONLOAD;
+
 import android.os.Build;
 import com.facebook.soloader.nativeloader.NativeLoader;
 
@@ -21,7 +23,7 @@ public static synchronized void ensure() {
       // library
       if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
         try {
-          NativeLoader.loadLibrary("fb_jpegturbo");
+          NativeLoader.loadLibrary("fb_jpegturbo", SKIP_MERGED_JNI_ONLOAD);
         } catch (UnsatisfiedLinkError error) {
           // Head in the sand
         }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
Patch:
@@ -276,7 +276,7 @@ public LocalVideoThumbnailProducer newLocalVideoThumbnailProducer() {
         mExecutorSupplier.forLocalStorageRead(), mContentResolver);
   }
 
-  public NetworkFetchProducer newNetworkFetchProducer(NetworkFetcher networkFetcher) {
+  public Producer<EncodedImage> newNetworkFetchProducer(NetworkFetcher networkFetcher) {
     return new NetworkFetchProducer(mPooledByteBufferFactory, mByteArrayPool, networkFetcher);
   }
 

File: vito/view/src/main/java/com/facebook/fresco/vito/view/LazyVitoViewImpl.java
Patch:
@@ -9,11 +9,11 @@
 
 import android.net.Uri;
 import android.view.View;
+import androidx.annotation.Nullable;
 import com.facebook.fresco.vito.listener.ImageListener;
 import com.facebook.fresco.vito.options.ImageOptions;
 import com.facebook.fresco.vito.provider.FrescoContextProvider;
 import com.facebook.imagepipeline.multiuri.MultiUri;
-import javax.annotation.Nullable;
 
 public abstract class LazyVitoViewImpl implements VitoView.Implementation {
 

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoController2Impl.java
Patch:
@@ -99,6 +99,9 @@ public boolean fetch(
         new Runnable() {
           @Override
           public void run() {
+            if (imageId != frescoDrawable.getImageId()) {
+              return; // We're trying to load a different image -> ignore
+            }
             DataSource<CloseableReference<CloseableImage>> dataSource =
                 mImagePipeline.fetchDecodedImage(
                     imageRequest, callerContext, frescoDrawable.getImageOriginListener(), imageId);

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoDrawable2.java
Patch:
@@ -182,6 +182,7 @@ public void close() {
     mFetchSubmitted = false;
     mActualImageWrapper.setCurrent(NopDrawable.INSTANCE);
     mImageOrigin = ImageOrigin.UNKNOWN;
+    mImageId = 0;
   }
 
   public void scheduleReleaseDelayed() {

File: vito/core/src/main/java/com/facebook/fresco/vito/core/BaseFrescoDrawable.java
Patch:
@@ -14,8 +14,10 @@
 import com.facebook.drawee.drawable.FadeDrawable;
 import com.facebook.drawee.drawable.VisibilityCallback;
 import com.facebook.imagepipeline.image.CloseableImage;
+import com.facebook.infer.annotation.OkToExtend;
 import java.io.Closeable;
 
+@OkToExtend
 public class BaseFrescoDrawable extends FadeDrawable implements Closeable {
 
   @VisibleForTesting @Nullable CloseableReference<CloseableImage> mImageReference;

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoControllerImpl.java
Patch:
@@ -608,7 +608,6 @@ void displayResultOrError(
           mFrescoContext
               .getHierarcher()
               .setupActualImageDrawable(
-                  mFrescoContext,
                   frescoState.getFrescoDrawable(),
                   frescoState.getResources(),
                   frescoState.getImageOptions(),

File: animated-base/src/test/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCacheTest.java
Patch:
@@ -22,10 +22,10 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.modules.junit4.PowerMockRunner;
+import org.robolectric.RobolectricTestRunner;
 
 /** Tests {@link FrescoFrameCache}. */
-@RunWith(PowerMockRunner.class)
+@RunWith(RobolectricTestRunner.class)
 @PrepareForTest(CloseableReference.class)
 public class FrescoFrameCacheTest {
 

File: fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
Patch:
@@ -167,7 +167,7 @@ private void notifyDataSubscribers() {
     }
   }
 
-  private void notifyDataSubscriber(
+  protected void notifyDataSubscriber(
       final DataSubscriber<T> dataSubscriber,
       final Executor executor,
       final boolean isFailure,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
Patch:
@@ -63,7 +63,7 @@
 
 public class ProducerFactory {
 
-  private static final int MAX_SIMULTANEOUS_REQUESTS = 900;
+  private static final int MAX_SIMULTANEOUS_REQUESTS = 5;
 
   // Local dependencies
   private ContentResolver mContentResolver;

File: animated-gif-lite/src/main/java/com/facebook/animated/giflite/drawable/GifAnimationBackend.java
Patch:
@@ -36,7 +36,7 @@ public static GifAnimationBackend create(String filePath) throws IOException {
       is = new BufferedInputStream(new FileInputStream(filePath));
       is.mark(Integer.MAX_VALUE);
 
-      GifMetadataDecoder decoder = GifMetadataDecoder.create(is);
+      GifMetadataDecoder decoder = GifMetadataDecoder.create(is, null);
       is.reset();
 
       Movie movie = Movie.decodeStream(is);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java
Patch:
@@ -210,7 +210,7 @@ public static class Builder {
     public long mMemoryType = 0;
     private boolean mKeepCancelledFetchAsLowPriority;
     public boolean mDownsampleIfLargeBitmap;
-    public boolean mEncodedCacheEnabled;
+    public boolean mEncodedCacheEnabled = true;
 
     public Builder(ImagePipelineConfig.Builder configBuilder) {
       mConfigBuilder = configBuilder;

File: drawee/src/main/java/com/facebook/drawee/drawable/InstrumentedDrawable.java
Patch:
@@ -45,7 +45,9 @@ public void draw(Canvas canvas) {
       int scaledHeight = (int) bounds.height();
       int imageWidth = getIntrinsicWidth();
       int imageHeight = getIntrinsicHeight();
-      mListener.track(viewWidth, viewHeight, imageWidth, imageHeight, scaledWidth, scaledHeight);
+      if (mListener != null) {
+        mListener.track(viewWidth, viewHeight, imageWidth, imageHeight, scaledWidth, scaledHeight);
+      }
     }
     super.draw(canvas);
   }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/HierarcherImpl.java
Patch:
@@ -163,7 +163,7 @@ public Drawable setupActualImageDrawable(
       actualImageWrapperDrawable.setCurrent(actualDrawable != null ? actualDrawable : NOP_DRAWABLE);
 
       if (instrumentedListener != null) {
-        actualImageWrapperDrawable = new InstrumentedDrawable(actualDrawable, instrumentedListener);
+        actualImageWrapperDrawable = new InstrumentedDrawable(actualImageWrapperDrawable, instrumentedListener);
       }
 
       frescoDrawable.setImage(actualImageWrapperDrawable, closeableImage);

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/debug/DebugOverlayImageOriginListener.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.facebook.drawee.backends.pipeline.info.ImageOrigin;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
-import com.facebook.drawee.backends.pipeline.info.ImageOriginUtils;
 
 public class DebugOverlayImageOriginListener implements ImageOriginListener {
 
@@ -21,7 +20,7 @@ public void onImageLoaded(
     mImageOrigin = imageOrigin;
   }
 
-  public String getImageOrigin() {
-    return ImageOriginUtils.toString(mImageOrigin);
+  public int getImageOrigin() {
+    return mImageOrigin;
   }
 }

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
Patch:
@@ -94,9 +94,10 @@ public static <INFO> InternalForwardingListener<INFO> createInternal(
   private @Nullable String mContentDescription;
   private @Nullable DataSource<T> mDataSource;
   private @Nullable T mFetchedImage;
-  private @Nullable Drawable mDrawable;
   private boolean mJustConstructed = true;
 
+  protected @Nullable Drawable mDrawable;
+
   public AbstractDraweeController(
       DeferredReleaser deferredReleaser,
       Executor uiThreadImmediateExecutor,

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
Patch:
@@ -21,7 +21,6 @@
 import com.facebook.drawee.components.DeferredReleaser;
 import com.facebook.drawee.components.DraweeEventTracker;
 import com.facebook.drawee.components.RetryManager;
-import com.facebook.drawee.drawable.DrawableUtils;
 import com.facebook.drawee.gestures.GestureDetector;
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.interfaces.DraweeHierarchy;
@@ -682,7 +681,7 @@ private void logMessageAndFailure(String messageAndMethod, Throwable throwable)
 
   @Override
   public @Nullable Animatable getAnimatable() {
-    return DrawableUtils.getAnimatableOrNull(mDrawable);
+    return (mDrawable instanceof Animatable) ? (Animatable) mDrawable : null;
   }
 
   protected abstract DataSource<T> getDataSource();

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
Patch:
@@ -21,6 +21,7 @@
 import com.facebook.drawee.components.DeferredReleaser;
 import com.facebook.drawee.components.DraweeEventTracker;
 import com.facebook.drawee.components.RetryManager;
+import com.facebook.drawee.drawable.DrawableUtils;
 import com.facebook.drawee.gestures.GestureDetector;
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.interfaces.DraweeHierarchy;
@@ -681,7 +682,7 @@ private void logMessageAndFailure(String messageAndMethod, Throwable throwable)
 
   @Override
   public @Nullable Animatable getAnimatable() {
-    return (mDrawable instanceof Animatable) ? (Animatable) mDrawable : null;
+    return DrawableUtils.getAnimatableOrNull(mDrawable);
   }
 
   protected abstract DataSource<T> getDataSource();

File: vito/core/src/main/java/com/facebook/fresco/vito/core/debug/DebugOverlayDrawable.java
Patch:
@@ -25,7 +25,7 @@ public class DebugOverlayDrawable extends Drawable {
   private static final int TEXT_COLOR = 0xFFFFFFFF;
   private static final int OUTLINE_STROKE_WIDTH_PX = 2;
   private static final int MAX_TEXT_SIZE_PX = 72;
-  private static final int MIN_TEXT_SIZE_PX = 12;
+  private static final int MIN_TEXT_SIZE_PX = 16;
   private static final int TEXT_LINE_SPACING_PX = 8;
   private static final int TEXT_PADDING_PX = 10;
   private static final int INITIAL_MAX_LINE_LENGTH = 4;

File: vito/core/src/main/java/com/facebook/fresco/vito/core/debug/DefaultDebugOverlayFactory.java
Patch:
@@ -9,6 +9,7 @@
 
 import android.graphics.drawable.Drawable;
 import com.facebook.common.internal.Supplier;
+import com.facebook.drawee.backends.pipeline.info.ImageOriginUtils;
 import com.facebook.fresco.vito.core.FrescoState;
 import javax.annotation.Nullable;
 
@@ -27,6 +28,8 @@ public Drawable create(FrescoState frescoState) {
       return null;
     }
     DebugOverlayDrawable drawable = new DebugOverlayDrawable();
+    drawable.addDebugData("ID", "" + frescoState.getStringId());
+    drawable.addDebugData("origin", ImageOriginUtils.toString(frescoState.getImageOrigin()));
     drawable.addDebugData("URI", "" + frescoState.getUri());
     return drawable;
   }

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoContext.java
Patch:
@@ -158,6 +158,9 @@ protected ImageRequestBuilder createDecodedImageRequestBuilder(
     }
     final ImageRequestBuilder imageRequestBuilder =
         createEncodedImageRequestBuilder(uri, imageOptions);
+    if (imageRequestBuilder == null) {
+      return null;
+    }
 
     if (mExperiments.useNativeRounding() && NativeCodeSetup.getUseNativeCode()) {
       setupNativeRounding(imageRequestBuilder, imageOptions.getRoundingOptions());

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
Patch:
@@ -131,7 +131,7 @@ protected PipelineDraweeController obtainController() {
           getCallerContext(),
           mCustomDrawableFactories,
           mImageOriginListener);
-      controller.initializePerformanceMonitoring(mImagePerfDataListener);
+      controller.initializePerformanceMonitoring(mImagePerfDataListener, this);
       return controller;
     } finally {
       if (FrescoSystrace.isTracing()) {

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/MainActivity.java
Patch:
@@ -257,6 +257,7 @@ private void handleNavigationItemClick(int itemId) {
         break;
       case R.id.nav_vito_litho_gallery:
         fragment = new FrescoVitoLithoGalleryFragment();
+        break;
       case R.id.nav_vito_view_simple:
         fragment = new VitoViewSimpleFragment();
         break;

File: imagepipeline-base-test/src/main/java/com/facebook/imagepipeline/testing/TestNativeLoader.java
Patch:
@@ -19,7 +19,9 @@ public class TestNativeLoader {
    * setInTestMode for SoLoader
    */
   public static void init() {
-    NativeLoader.init(new NativeLoaderToSoLoaderDelegate());
+    if (!NativeLoader.isInitialized()) {
+      NativeLoader.init(new NativeLoaderToSoLoaderDelegate());
+    }
     SoLoader.setInTestMode();
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounterProvider.java
Patch:
@@ -10,8 +10,7 @@
 import com.facebook.infer.annotation.ThreadSafe;
 
 public class BitmapCounterProvider {
-  private static final Class<?> TAG = BitmapCounterProvider.class;
-
+  
   private static final long KB = 1024;
   private static final long MB = 1024 * KB;
 

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeHierarchyFragment.java
Patch:
@@ -16,6 +16,7 @@
 import android.view.ViewGroup;
 import android.widget.CompoundButton;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatDelegate;
 import androidx.appcompat.widget.SwitchCompat;
 import androidx.core.graphics.drawable.DrawableCompat;
 import androidx.fragment.app.Fragment;
@@ -38,6 +39,7 @@ public DraweeHierarchyFragment() {
   @Override
   public View onCreateView(
       LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+      AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
     return inflater.inflate(R.layout.fragment_drawee_hierarchy, container, false);
   }
 

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener.java
Patch:
@@ -75,6 +75,7 @@ public void onFailure(String id, Throwable throwable) {
 
     mImagePerfState.setControllerFailureTimeMs(now);
     mImagePerfState.setControllerId(id);
+    mImagePerfState.setErrorThrowable(throwable);
 
     mImagePerfMonitor.notifyStatusUpdated(mImagePerfState, ImageLoadStatus.ERROR);
 

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoControllerImpl.java
Patch:
@@ -312,7 +312,7 @@ public void onAttach(FrescoState frescoState, @Nullable ImageListener imageListe
                 .buildPlaceholderDrawable(
                     frescoState.getResources(), frescoState.getImageOptions());
       }
-      frescoState.getFrescoDrawable().setImageDrawable(placeholderDrawable);
+      frescoState.getFrescoDrawable().setPlaceholderDrawable(placeholderDrawable);
 
       final Drawable progressDrawable =
           mFrescoContext

File: animated-base/src/main/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.cache;
 
 import android.graphics.Bitmap;

File: animated-base/src/main/java/com/facebook/fresco/animation/bitmap/wrapper/AnimatedDrawableBackendAnimationInformation.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.wrapper;
 
 import com.facebook.fresco.animation.backend.AnimationInformation;

File: animated-base/src/main/java/com/facebook/fresco/animation/bitmap/wrapper/AnimatedDrawableBackendFrameRenderer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.wrapper;
 
 import android.graphics.Bitmap;

File: animated-base/src/main/java/com/facebook/fresco/animation/drawable/animator/AnimatedDrawableValueAnimatorHelper.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.drawable.animator;
 
 import android.animation.ValueAnimator;

File: animated-base/src/main/java/com/facebook/fresco/animation/factory/AnimatedFactoryV2Impl.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.factory;
 
 import android.content.Context;

File: animated-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedImageDecoder.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.animated.factory;
 
 import com.facebook.imagepipeline.animated.base.AnimatedImage;

File: animated-base/src/test/java/android/net/http/AndroidHttpClient.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package android.net.http;
 
 public class AndroidHttpClient {}

File: animated-base/src/test/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCacheTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.cache;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-base/src/test/java/com/facebook/fresco/animation/bitmap/wrapper/AnimatedDrawableBackendAnimationInformationTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.wrapper;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-base/src/test/java/com/facebook/fresco/animation/bitmap/wrapper/AnimatedDrawableBackendFrameRendererTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.wrapper;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/backend/AnimationBackend.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.backend;
 
 import android.graphics.Canvas;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/backend/AnimationBackendDelegate.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.backend;
 
 import android.annotation.SuppressLint;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/backend/AnimationBackendDelegateWithInactivityCheck.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.backend;
 
 import android.graphics.Canvas;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/backend/AnimationInformation.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.backend;
 
 /** Basic animation metadata: Frame and loop count & duration */

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap;
 
 import static java.lang.annotation.RetentionPolicy.SOURCE;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapFrameCache.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap;
 
 import android.graphics.Bitmap;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapFrameRenderer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap;
 
 import android.graphics.Bitmap;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/cache/KeepLastFrameCache.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.cache;
 
 import android.graphics.Bitmap;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/cache/NoOpCache.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.cache;
 
 import android.graphics.Bitmap;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/preparation/BitmapFramePreparationStrategy.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.preparation;
 
 import com.facebook.fresco.animation.backend.AnimationBackend;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/preparation/BitmapFramePreparer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.preparation;
 
 import com.facebook.common.references.CloseableReference;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.preparation;
 
 import android.graphics.Bitmap;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/preparation/FixedNumberBitmapFramePreparationStrategy.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.preparation;
 
 import com.facebook.common.logging.FLog;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/AnimatedDrawable2.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.drawable;
 
 import android.graphics.Canvas;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/AnimatedDrawable2DebugDrawListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.drawable;
 
 import com.facebook.common.logging.FLog;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/AnimationListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.drawable;
 
 /**

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/BaseAnimationListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.drawable;
 
 /**

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/animator/AnimatedDrawable2ValueAnimatorHelper.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.drawable.animator;
 
 import android.animation.ValueAnimator;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/frame/DropFramesFrameScheduler.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.frame;
 
 import com.facebook.common.internal.VisibleForTesting;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/frame/FrameScheduler.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.frame;
 
 /** Frame scheduler used to calculate which frame to display for given animation times. */

File: animated-drawable/src/test/java/com/facebook/fresco/animation/backend/AnimationBackendDelegateTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.backend;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-drawable/src/test/java/com/facebook/fresco/animation/backend/AnimationBackendDelegateWithInactivityCheckTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.backend;
 
 import static com.facebook.fresco.animation.backend.AnimationBackendDelegateWithInactivityCheck.INACTIVITY_THRESHOLD_MS;

File: animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackendTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparerTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.preparation;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/preparation/FixedNumberBitmapFramePreparationStrategyTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.bitmap.preparation;
 
 import static org.mockito.Matchers.anyInt;

File: animated-drawable/src/test/java/com/facebook/fresco/animation/frame/DropFramesFrameSchedulerTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.fresco.animation.frame;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: animated-gif-lite/src/main/java/com/facebook/animated/giflite/decoder/GifMetadataDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: animated-gif-lite/src/main/java/com/facebook/animated/giflite/draw/MovieDrawer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.animated.giflite.draw;
 
 import android.graphics.Bitmap;

File: animated-gif/src/test/java/com/facebook/imagepipeline/animated/factory/AnimatedImageFactoryGifImplTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.animated.factory;
 
 import static org.junit.Assert.assertFalse;

File: animated-webp/src/test/java/com/facebook/imagepipeline/animated/factory/AnimatedImageFactoryWebPImplTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.animated.factory;
 
 import static org.junit.Assert.assertFalse;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/DraweeConfig.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline;
 
 import com.facebook.common.internal.ImmutableList;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ForwardingImageOriginListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import com.facebook.common.logging.FLog;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ForwardingImagePerfDataListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import java.util.Collection;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageLoadStatus.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.CANCELED;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOrigin.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import static com.facebook.drawee.backends.pipeline.info.ImageOrigin.DISK;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import javax.annotation.Nullable;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginRequestListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import com.facebook.imagepipeline.listener.BaseRequestListener;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginUtils.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import com.facebook.imagepipeline.producers.BitmapMemoryCacheGetProducer;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfData.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import com.facebook.common.internal.Objects;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfDataListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 public interface ImagePerfDataListener {

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import android.graphics.Rect;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import static com.facebook.drawee.backends.pipeline.info.ImagePerfData.UNSET;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfUtils.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 public class ImagePerfUtils {

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/VisibilityState.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info;
 
 import static com.facebook.drawee.backends.pipeline.info.VisibilityState.INVISIBLE;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info.internal;
 
 import android.graphics.drawable.Animatable;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfImageOriginListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info.internal;
 
 import com.facebook.drawee.backends.pipeline.info.ImageLoadStatus;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfRequestListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.backends.pipeline.info.internal;
 
 import com.facebook.common.time.MonotonicClock;

File: drawee/src/main/java/com/facebook/drawee/debug/DebugControllerOverlayDrawable.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.debug;
 
 import android.graphics.Canvas;

File: drawee/src/main/java/com/facebook/drawee/debug/listener/ImageLoadingTimeControllerListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.debug.listener;
 
 import android.graphics.drawable.Animatable;

File: drawee/src/main/java/com/facebook/drawee/debug/listener/ImageLoadingTimeListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.debug.listener;
 
 /** Implement this interface to notify UI that the final Image has been set. */

File: drawee/src/main/java/com/facebook/drawee/drawable/OrientedDrawable.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.drawable;
 
 import android.graphics.Canvas;

File: drawee/src/main/java/com/facebook/drawee/drawable/Rounded.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.drawable;
 
 /** Interface for Drawables that round corners or form a circle. */

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.drawable;
 
 import android.content.res.Resources;

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedDrawable.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.drawable;
 
 import android.graphics.Canvas;

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedNinePatchDrawable.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.drawable;
 
 import android.graphics.Canvas;

File: drawee/src/main/java/com/facebook/drawee/generic/RootDrawable.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.generic;
 
 import android.annotation.SuppressLint;

File: drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.generic;
 
 import android.content.res.Resources;

File: drawee/src/main/java/com/facebook/drawee/view/DraweeHolder.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.view;
 
 import static com.facebook.drawee.components.DraweeEventTracker.Event;

File: drawee/src/main/java/com/facebook/drawee/view/DraweeTransition.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.view;
 
 import android.animation.Animator;

File: drawee/src/test/java/com/facebook/drawee/debug/DebugControllerOverlayDrawableTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.debug;
 
 import org.junit.Before;

File: drawee/src/test/java/com/facebook/drawee/drawable/OrientedDrawableTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.drawable;
 
 import static org.junit.Assert.assertFalse;

File: drawee/src/test/java/com/facebook/drawee/gestures/GestureDetectorTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.drawee.gestures;
 
 import static android.view.MotionEvent.*;

File: fbcore/src/main/java/com/facebook/common/activitylistener/ActivityListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/activitylistener/ActivityListenerManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/activitylistener/BaseActivityListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/activitylistener/ListenableActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/disk/DiskTrimmable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/disk/DiskTrimmableRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/disk/NoOpDiskTrimmableRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/disk/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/CallerThreadExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/ConstrainedExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/DefaultSerialExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/HandlerExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/HandlerExecutorServiceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/ScheduledFutureImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/SerialExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/StatefulRunnable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/executors/UiThreadImmediateExecutorService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/file/FileTree.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/file/FileTreeVisitor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/file/FileUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/lifecycle/AttachDetachListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/logging/FLog.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/logging/FLogDefaultLoggingDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/logging/LoggingDelegate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/logging/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/media/MediaUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/ByteArrayPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/MemoryTrimType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/MemoryTrimmable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/MemoryTrimmableRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/NoOpMemoryTrimmableRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/Pool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteArrayBufferedInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteBuffer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferOutputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteStreams.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/memory/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/references/CloseableReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/references/DefaultCloseableReference.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.references;
 
 import com.facebook.common.internal.Preconditions;

File: fbcore/src/main/java/com/facebook/common/references/FinalizerCloseableReference.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.references;
 
 import com.facebook.common.logging.FLog;

File: fbcore/src/main/java/com/facebook/common/references/HasBitmap.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.references;
 
 /** Marker interface for closeable references containing a bitmap */

File: fbcore/src/main/java/com/facebook/common/references/NoOpCloseableReference.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.references;
 
 import javax.annotation.Nullable;

File: fbcore/src/main/java/com/facebook/common/references/OOMSoftReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/references/RefCountCloseableReference.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.references;
 
 import com.facebook.common.internal.Preconditions;

File: fbcore/src/main/java/com/facebook/common/references/ResourceReleaser.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.references;
 
 /**

File: fbcore/src/main/java/com/facebook/common/references/SharedReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/references/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/statfs/StatFsHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/streams/LimitedInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/streams/TailAppendingInputStream.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/time/Clock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/time/CurrentThreadTimeClock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/time/MonotonicClock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/time/RealtimeSinceBootClock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/time/SystemClock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/ByteConstants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/ExceptionWithNoStacktrace.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.util;
 
 /**

File: fbcore/src/main/java/com/facebook/common/util/HashCodeUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/Hex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/SecureHashUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/StreamUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/TriState.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/util/UriUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/webp/BitmapCreator.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.common.webp;
 
 import android.graphics.Bitmap;

File: fbcore/src/main/java/com/facebook/common/webp/WebpBitmapFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/common/webp/WebpSupportStatus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/BaseBooleanSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/BaseDataSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/DataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/DataSources.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/DataSubscriber.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/FirstAvailableDataSourceSupplier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/IncreasingQualityDataSourceSupplier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/RetainingDataSourceSupplier.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2017-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.datasource;
 
 import com.facebook.common.executors.CallerThreadExecutor;

File: fbcore/src/main/java/com/facebook/datasource/SimpleDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/datasource/package-info.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/main/java/com/facebook/widget/text/span/BetterImageSpan.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/executors/HandlerExecutorServiceImplTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/executors/StatefulRunnableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/file/FileUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/media/MediaUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/references/CloseableReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/references/SharedReferenceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/statfs/StatFsHelperTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/streams/LimitedInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/streams/TailAppendingInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/util/HashCodeUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/util/StreamUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/util/TriStateTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/common/util/UriUtilTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/datasource/AbstractDataSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/datasource/DataSourceTestUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/datasource/DataSourcesTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/datasource/FirstAvailableDataSourceSupplierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/datasource/IncreasingQualityDataSourceSupplierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/com/facebook/widget/text/span/BetterImageSpanTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: fbcore/src/test/java/org/mockito/configuration/MockitoConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.

File: imagepipeline-backends/imagepipeline-volley/src/main/java/com/facebook/imagepipeline/backends/volley/RawRequest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.backends.volley;
 
 import com.android.volley.NetworkResponse;

File: imagepipeline-base-test/src/main/java/com/facebook/imagepipeline/testing/TrivialBufferPooledByteBuffer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.testing;
 
 import com.facebook.common.memory.PooledByteBuffer;

File: imagepipeline-base/src/main/java/com/facebook/cache/common/BaseCacheEventListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.common;
 
 /**

File: imagepipeline-base/src/main/java/com/facebook/cache/common/CacheKeyUtil.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.common;
 
 import com.facebook.common.util.SecureHashUtil;

File: imagepipeline-base/src/main/java/com/facebook/cache/common/MultiCacheKey.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.common;
 
 import android.net.Uri;

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/DefaultEntryEvictionComparatorSupplier.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.disk;
 
 /** Sorts entries by date of the last access, evicting old ones first */

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/EntryEvictionComparator.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.disk;
 
 import java.util.Comparator;

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/EntryEvictionComparatorSupplier.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.disk;
 
 /** Provides an instance of eviction comparator */

File: imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imageformat;
 
 import com.facebook.common.internal.Ints;

File: imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormats.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imageformat;
 
 import com.facebook.common.internal.ImmutableList;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedFactoryProvider.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.animated.factory;
 
 import com.facebook.cache.common.CacheKey;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingLruMap.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.cache;
 
 import com.facebook.common.internal.Predicate;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/ValueDescriptor.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.cache;
 
 /** Interface used to get the information about the values. */

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/SourceUriType.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.common;
 
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_DATA;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/core/PriorityThreadFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import android.os.Process;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/drawable/DrawableFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.drawable;
 
 import android.graphics.drawable.Drawable;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/CloseableBitmap.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.image;
 
 import android.graphics.Bitmap;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/nativecode/NativeImageTranscoderFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.nativecode;
 
 import com.facebook.imagepipeline.transcoder.ImageTranscoderFactory;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/transcoder/DownsampleUtil.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import com.facebook.common.internal.Preconditions;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/transcoder/ImageTranscodeResult.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import java.util.Locale;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/transcoder/ImageTranscoder.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import com.facebook.imageformat.ImageFormat;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/transcoder/ImageTranscoderFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import com.facebook.imageformat.ImageFormat;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/transcoder/TranscodeStatus.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import static com.facebook.imagepipeline.transcoder.TranscodeStatus.TRANSCODING_ERROR;

File: imagepipeline-base/src/main/java/com/facebook/imageutils/HeifExifUtil.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imageutils;
 
 import android.media.ExifInterface;

File: imagepipeline-base/src/main/java/com/facebook/imageutils/WebpUtil.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imageutils;
 
 import android.util.Pair;

File: imagepipeline-base/src/test/java/com/facebook/cache/disk/DefaultEntryEvictionComparatorSupplierTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.cache.disk;
 
 import static org.junit.Assert.assertTrue;

File: imagepipeline-base/src/test/java/com/facebook/imagepipeline/common/ImageDecodeOptionsTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.common;
 
 import static org.fest.assertions.api.Assertions.assertThat;

File: imagepipeline-base/src/test/java/com/facebook/imageutils/BitmapUtilTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imageutils;
 
 import static org.junit.Assert.*;

File: imagepipeline-base/src/test/java/com/facebook/imageutils/WebPUtilTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imageutils;
 
 import static junit.framework.Assert.assertEquals;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/bitmaps/HoneycombBitmapCreator.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.bitmaps;
 
 import android.annotation.TargetApi;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/CloseableReferenceFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import com.facebook.common.logging.FLog;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/DiskStorageFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import com.facebook.cache.disk.DiskCacheConfig;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/DynamicDefaultDiskStorageFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import com.facebook.cache.disk.DiskCacheConfig;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import android.content.Context;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImageTranscoderType.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import static com.facebook.imagepipeline.core.ImageTranscoderType.JAVA_TRANSCODER;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/MemoryChunkType.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import static com.facebook.imagepipeline.core.MemoryChunkType.ASHMEM_MEMORY;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/debug/CloseableReferenceLeakTracker.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.debug;
 
 import com.facebook.common.references.SharedReference;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/debug/NoOpCloseableReferenceLeakTracker.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.debug;
 
 import com.facebook.common.references.SharedReference;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/ImageDecoderConfig.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.decoder;
 
 import com.facebook.imageformat.ImageFormat;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/filter/InPlaceRoundFilter.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/filter/IterativeBoxBlurFilter.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/filter/RenderScriptBlurFilter.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import android.content.Context;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/filter/XferRoundFilter.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/listener/BaseRequestListener.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.listener;
 
 import com.facebook.imagepipeline.request.ImageRequest;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounterConfig.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 public class BitmapCounterConfig {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BucketMap.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.util.SparseArray;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/DummyBitmapPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/DummyTrackingInUseBitmapPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/LruBitmapPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/MemoryChunk.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import java.nio.ByteBuffer;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/MemoryChunkPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.util.SparseIntArray;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/MemoryChunkUtil.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.common.internal.Preconditions;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolBackend.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import javax.annotation.Nullable;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/platform/PlatformDecoder.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.platform;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/platform/PreverificationHelper.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.platform;
 
 import android.annotation.TargetApi;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/postprocessors/BlurPostProcessor.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.postprocessors;
 
 import android.content.Context;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/postprocessors/RoundPostprocessor.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.postprocessors;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BaseProducerContext.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.producers;
 
 import com.facebook.imagepipeline.common.Priority;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DelegatingConsumer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.producers;
 
 /** Delegating consumer. */

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ExperimentalThreadHandoffProducerQueueImpl.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.producers;
 
 import com.facebook.common.internal.Preconditions;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/JobScheduler.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.producers;
 
 import android.os.SystemClock;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.producers;
 
 import static com.facebook.imageformat.DefaultImageFormats.HEIF;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/HasImageRequest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.request;
 
 import javax.annotation.Nullable;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/package-info.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 /**
  * This package contains abstractions and related implementations about the ImageRequest and related
  * attributes.

File: imagepipeline/src/main/java/com/facebook/imagepipeline/transcoder/MultiImageTranscoderFactory.java
Patch:
@@ -1,8 +1,10 @@
-/* Copyright (c) Facebook, Inc. and its affiliates.
+/*
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import com.facebook.imageformat.ImageFormat;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/transcoder/SimpleImageTranscoder.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2018-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import android.graphics.Bitmap;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/transcoder/SimpleImageTranscoderFactory.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2018-present, Facebook, Inc.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.transcoder;
 
 import com.facebook.imageformat.ImageFormat;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/cache/StagingAreaTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.cache;
 
 import static org.junit.Assert.*;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/core/ImagePipelineConfigTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.core;
 
 import static org.junit.Assert.assertFalse;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/filter/InPlaceRoundFilterTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import static org.junit.Assert.assertNotNull;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/filter/IterativeBoxBlurFilterTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import static org.junit.Assert.assertEquals;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/filter/XferRoundFilterTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.filter;
 
 import static org.junit.Assert.assertEquals;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/memory/LruBitmapPoolTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static junit.framework.Assert.assertEquals;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/request/ImageRequestBuilderCacheEnabledTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.request;
 
 import static org.junit.Assert.assertEquals;

File: memory-types/ashmem/src/main/java/com/facebook/imagepipeline/memory/AshmemMemoryChunkPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.annotation.TargetApi;

File: memory-types/ashmem/src/test/java/com/facebook/imagepipeline/memory/AshmemMemoryChunkPoolTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.util.SparseIntArray;

File: memory-types/ashmem/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferFactoryTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static org.mockito.Mockito.mock;

File: memory-types/ashmem/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferOutputStreamTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.common.internal.ImmutableMap;

File: memory-types/ashmem/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static org.junit.Assert.assertEquals;

File: memory-types/nativememory/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunkPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.common.internal.DoNotStrip;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferFactoryTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static org.mockito.Mockito.mock;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferOutputStreamTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.common.internal.ImmutableMap;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static org.junit.Assert.assertEquals;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/memory/NativeMemoryChunkPoolTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.util.SparseIntArray;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/memory/TestUsingNativeMemoryChunk.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.imagepipeline.testing.TestNativeLoader;

File: memory-types/simple/src/main/java/com/facebook/imagepipeline/memory/BufferMemoryChunk.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.util.Log;

File: memory-types/simple/src/main/java/com/facebook/imagepipeline/memory/BufferMemoryChunkPool.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.common.internal.DoNotStrip;

File: memory-types/simple/src/test/java/com/facebook/imagepipeline/memory/BufferMemoryChunkPoolTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import android.util.SparseIntArray;

File: memory-types/simple/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferFactoryTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static org.mockito.Mockito.mock;

File: memory-types/simple/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferOutputStreamTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import com.facebook.common.internal.ImmutableMap;

File: memory-types/simple/src/test/java/com/facebook/imagepipeline/memory/MemoryPooledByteBufferTest.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.memory;
 
 import static org.junit.Assert.assertEquals;

File: native-filters/src/main/java/com/facebook/imagepipeline/postprocessors/RoundAsCirclePostprocessor.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.postprocessors;
 
 import android.graphics.Bitmap;

File: native-filters/src/main/java/com/facebook/imagepipeline/postprocessors/RoundedCornersPostprocessor.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.postprocessors;
 
 import android.graphics.Bitmap;

File: native-imagetranscoder/src/main/java/com/facebook/imagepipeline/nativecode/NativeJpegTranscoder.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.nativecode;
 
 import static com.facebook.imagepipeline.transcoder.JpegTranscoderUtils.DEFAULT_JPEG_QUALITY;

File: native-imagetranscoder/src/main/java/com/facebook/imagepipeline/nativecode/NativeJpegTranscoderFactory.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.nativecode;
 
 import com.facebook.common.internal.DoNotStrip;

File: native-imagetranscoder/src/main/java/com/facebook/imagepipeline/nativecode/NativeJpegTranscoderSoLoader.java
Patch:
@@ -4,6 +4,7 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
+
 package com.facebook.imagepipeline.nativecode;
 
 import android.os.Build;

File: samples/animation2/src/main/java/com/facebook/samples/animation2/AnimationApplication.java
Patch:
@@ -9,6 +9,7 @@
  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
+
 package com.facebook.samples.animation2;
 
 import android.app.Application;

File: memory-types/ashmem/src/main/java/com/facebook/imagepipeline/memory/AshmemMemoryChunkPool.java
Patch:
@@ -16,6 +16,8 @@
 @DoNotStrip
 @TargetApi(27)
 public class AshmemMemoryChunkPool extends MemoryChunkPool {
+
+  @DoNotStrip
   public AshmemMemoryChunkPool(
       MemoryTrimmableRegistry memoryTrimmableRegistry,
       PoolParams poolParams,

File: memory-types/simple/src/main/java/com/facebook/imagepipeline/memory/BufferMemoryChunkPool.java
Patch:
@@ -15,6 +15,7 @@
 @DoNotStrip
 public class BufferMemoryChunkPool extends MemoryChunkPool {
 
+  @DoNotStrip
   public BufferMemoryChunkPool(
       MemoryTrimmableRegistry memoryTrimmableRegistry,
       PoolParams poolParams,

File: memory-types/simple/src/main/java/com/facebook/imagepipeline/memory/BufferMemoryChunkPool.java
Patch:
@@ -6,11 +6,13 @@
  */
 package com.facebook.imagepipeline.memory;
 
+import com.facebook.common.internal.DoNotStrip;
 import com.facebook.common.memory.MemoryTrimmableRegistry;
 import javax.annotation.concurrent.ThreadSafe;
 
 /** Manages a pool of buffer memory chunks ({@link BufferMemoryChunk}) */
 @ThreadSafe
+@DoNotStrip
 public class BufferMemoryChunkPool extends MemoryChunkPool {
 
   public BufferMemoryChunkPool(

File: memory-types/nativememory/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunk.java
Patch:
@@ -11,7 +11,7 @@
 import com.facebook.common.internal.DoNotStrip;
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.VisibleForTesting;
-import com.facebook.imagepipeline.nativecode.ImagePipelineNativeLoader;
+import com.facebook.soloader.SoLoader;
 import java.io.Closeable;
 import java.nio.ByteBuffer;
 import javax.annotation.Nullable;
@@ -28,7 +28,7 @@ public class NativeMemoryChunk implements MemoryChunk, Closeable {
   private static final String TAG = "NativeMemoryChunk";
 
   static {
-    ImagePipelineNativeLoader.load();
+    SoLoader.loadLibrary("imagepipeline");
   }
 
   /** Address of memory chunk wrapped by this NativeMemoryChunk */

File: memory-types/nativememory/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunkPool.java
Patch:
@@ -6,13 +6,16 @@
  */
 package com.facebook.imagepipeline.memory;
 
+import com.facebook.common.internal.DoNotStrip;
 import com.facebook.common.memory.MemoryTrimmableRegistry;
 import javax.annotation.concurrent.ThreadSafe;
 
 /** Manages a pool of native memory chunks ({@link NativeMemoryChunk}) */
 @ThreadSafe
+@DoNotStrip
 public class NativeMemoryChunkPool extends MemoryChunkPool {
 
+  @DoNotStrip
   public NativeMemoryChunkPool(
       MemoryTrimmableRegistry memoryTrimmableRegistry,
       PoolParams poolParams,

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunk.java
Patch:
@@ -11,9 +11,9 @@
 import com.facebook.imagepipeline.memory.NativeMemoryChunk;
 
 /**
- * A fake implementation of {@link NativeMemoryChunk} to allow us to test out pools and other
- * functionality. This uses byte arrays instead of actual native memory, but supports the same
- * public interface
+ * A fake implementation of {@link com.facebook.imagepipeline.memory.NativeMemoryChunk} to allow us
+ * to test out pools and other functionality. This uses byte arrays instead of actual native memory,
+ * but supports the same public interface
  */
 public class FakeNativeMemoryChunk extends NativeMemoryChunk {
   private byte[] mBuf;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunkPool.java
Patch:
@@ -7,7 +7,7 @@
 
 package com.facebook.imagepipeline.testing;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
 
 import android.util.SparseIntArray;
 import com.facebook.common.memory.MemoryTrimmableRegistry;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunk.java
Patch:
@@ -11,7 +11,7 @@
 import com.facebook.common.internal.DoNotStrip;
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.VisibleForTesting;
-import com.facebook.soloader.SoLoader;
+import com.facebook.imagepipeline.nativecode.ImagePipelineNativeLoader;
 import java.io.Closeable;
 import java.nio.ByteBuffer;
 import javax.annotation.Nullable;
@@ -28,7 +28,7 @@ public class NativeMemoryChunk implements MemoryChunk, Closeable {
   private static final String TAG = "NativeMemoryChunk";
 
   static {
-    SoLoader.loadLibrary("imagepipeline");
+    ImagePipelineNativeLoader.load();
   }
 
   /** Address of memory chunk wrapped by this NativeMemoryChunk */

File: imagepipeline/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunk.java
Patch:
@@ -11,9 +11,9 @@
 import com.facebook.imagepipeline.memory.NativeMemoryChunk;
 
 /**
- * A fake implementation of {@link com.facebook.imagepipeline.memory.NativeMemoryChunk} to allow us
- * to test out pools and other functionality. This uses byte arrays instead of actual native memory,
- * but supports the same public interface
+ * A fake implementation of {@link NativeMemoryChunk} to allow us to test out pools and other
+ * functionality. This uses byte arrays instead of actual native memory, but supports the same
+ * public interface
  */
 public class FakeNativeMemoryChunk extends NativeMemoryChunk {
   private byte[] mBuf;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunkPool.java
Patch:
@@ -7,14 +7,14 @@
 
 package com.facebook.imagepipeline.testing;
 
-import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.*;
 
 import android.util.SparseIntArray;
 import com.facebook.common.memory.MemoryTrimmableRegistry;
-import com.facebook.imagepipeline.memory.PoolParams;
-import com.facebook.imagepipeline.memory.PoolStatsTracker;
 import com.facebook.imagepipeline.memory.NativeMemoryChunk;
 import com.facebook.imagepipeline.memory.NativeMemoryChunkPool;
+import com.facebook.imagepipeline.memory.PoolParams;
+import com.facebook.imagepipeline.memory.PoolStatsTracker;
 
 /** A 'fake' {@link NativeMemoryChunkPool} instance as a test helper */
 public class FakeNativeMemoryChunkPool extends NativeMemoryChunkPool {

File: memory-types/nativememory/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunk.java
Patch:
@@ -11,7 +11,7 @@
 import com.facebook.common.internal.DoNotStrip;
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.VisibleForTesting;
-import com.facebook.imagepipeline.nativecode.ImagePipelineNativeLoader;
+import com.facebook.soloader.SoLoader;
 import java.io.Closeable;
 import java.nio.ByteBuffer;
 import javax.annotation.Nullable;
@@ -28,7 +28,7 @@ public class NativeMemoryChunk implements MemoryChunk, Closeable {
   private static final String TAG = "NativeMemoryChunk";
 
   static {
-    ImagePipelineNativeLoader.load();
+    SoLoader.loadLibrary("imagepipeline");
   }
 
   /** Address of memory chunk wrapped by this NativeMemoryChunk */

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunk.java
Patch:
@@ -11,9 +11,9 @@
 import com.facebook.imagepipeline.memory.NativeMemoryChunk;
 
 /**
- * A fake implementation of {@link NativeMemoryChunk} to allow us to test out pools and other
- * functionality. This uses byte arrays instead of actual native memory, but supports the same
- * public interface
+ * A fake implementation of {@link com.facebook.imagepipeline.memory.NativeMemoryChunk} to allow us
+ * to test out pools and other functionality. This uses byte arrays instead of actual native memory,
+ * but supports the same public interface
  */
 public class FakeNativeMemoryChunk extends NativeMemoryChunk {
   private byte[] mBuf;

File: memory-types/nativememory/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunkPool.java
Patch:
@@ -7,14 +7,14 @@
 
 package com.facebook.imagepipeline.testing;
 
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
 
 import android.util.SparseIntArray;
 import com.facebook.common.memory.MemoryTrimmableRegistry;
-import com.facebook.imagepipeline.memory.NativeMemoryChunk;
-import com.facebook.imagepipeline.memory.NativeMemoryChunkPool;
 import com.facebook.imagepipeline.memory.PoolParams;
 import com.facebook.imagepipeline.memory.PoolStatsTracker;
+import com.facebook.imagepipeline.memory.NativeMemoryChunk;
+import com.facebook.imagepipeline.memory.NativeMemoryChunkPool;
 
 /** A 'fake' {@link NativeMemoryChunkPool} instance as a test helper */
 public class FakeNativeMemoryChunkPool extends NativeMemoryChunkPool {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BufferMemoryChunkPool.java
Patch:
@@ -21,7 +21,7 @@ public BufferMemoryChunkPool(
   }
 
   @Override
-  public BufferMemoryChunk alloc(int bucketedSize) {
+  protected BufferMemoryChunk alloc(int bucketedSize) {
     return new BufferMemoryChunk(bucketedSize);
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/MemoryChunkUtil.java
Patch:
@@ -14,13 +14,13 @@ public class MemoryChunkUtil {
    * Computes number of bytes that can be safely read/written starting at given offset, but no more
    * than count.
    */
-  public static int adjustByteCount(final int offset, final int count, final int memorySize) {
+  static int adjustByteCount(final int offset, final int count, final int memorySize) {
     final int available = Math.max(0, memorySize - offset);
     return Math.min(available, count);
   }
 
   /** Check that copy/read/write operation won't access memory it should not */
-  public static void checkBounds(
+  static void checkBounds(
       final int offset,
       final int otherLength,
       final int otherOffset,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunkPool.java
Patch:
@@ -21,7 +21,7 @@ public NativeMemoryChunkPool(
   }
 
   @Override
-  public NativeMemoryChunk alloc(int bucketedSize) {
+  protected NativeMemoryChunk alloc(int bucketedSize) {
     return new NativeMemoryChunk(bucketedSize);
   }
 }

File: imagepipeline/src/test/java/com/facebook/imagepipeline/testing/FakeBufferMemoryChunkPool.java
Patch:
@@ -30,7 +30,7 @@ public FakeBufferMemoryChunkPool(PoolParams poolParams) {
   }
 
   @Override
-  public BufferMemoryChunk alloc(int bucketedSize) {
+  protected BufferMemoryChunk alloc(int bucketedSize) {
     return new BufferMemoryChunk(bucketedSize);
   }
 

File: imagepipeline/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunkPool.java
Patch:
@@ -27,7 +27,7 @@ public FakeNativeMemoryChunkPool(PoolParams poolParams) {
   }
 
   @Override
-  public NativeMemoryChunk alloc(int bucketedSize) {
+  protected NativeMemoryChunk alloc(int bucketedSize) {
     return new FakeNativeMemoryChunk(bucketedSize);
   }
 

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoExperiments.java
Patch:
@@ -105,6 +105,6 @@ public boolean closeDatasourceOnNewResult() {
   }
 
   public boolean useNativeRounding() {
-    return false;
+    return true;
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BufferMemoryChunkPool.java
Patch:
@@ -21,7 +21,7 @@ public BufferMemoryChunkPool(
   }
 
   @Override
-  protected BufferMemoryChunk alloc(int bucketedSize) {
+  public BufferMemoryChunk alloc(int bucketedSize) {
     return new BufferMemoryChunk(bucketedSize);
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/MemoryChunkUtil.java
Patch:
@@ -14,13 +14,13 @@ public class MemoryChunkUtil {
    * Computes number of bytes that can be safely read/written starting at given offset, but no more
    * than count.
    */
-  static int adjustByteCount(final int offset, final int count, final int memorySize) {
+  public static int adjustByteCount(final int offset, final int count, final int memorySize) {
     final int available = Math.max(0, memorySize - offset);
     return Math.min(available, count);
   }
 
   /** Check that copy/read/write operation won't access memory it should not */
-  static void checkBounds(
+  public static void checkBounds(
       final int offset,
       final int otherLength,
       final int otherOffset,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/NativeMemoryChunkPool.java
Patch:
@@ -21,7 +21,7 @@ public NativeMemoryChunkPool(
   }
 
   @Override
-  protected NativeMemoryChunk alloc(int bucketedSize) {
+  public NativeMemoryChunk alloc(int bucketedSize) {
     return new NativeMemoryChunk(bucketedSize);
   }
 }

File: imagepipeline/src/test/java/com/facebook/imagepipeline/testing/FakeBufferMemoryChunkPool.java
Patch:
@@ -30,7 +30,7 @@ public FakeBufferMemoryChunkPool(PoolParams poolParams) {
   }
 
   @Override
-  protected BufferMemoryChunk alloc(int bucketedSize) {
+  public BufferMemoryChunk alloc(int bucketedSize) {
     return new BufferMemoryChunk(bucketedSize);
   }
 

File: imagepipeline/src/test/java/com/facebook/imagepipeline/testing/FakeNativeMemoryChunkPool.java
Patch:
@@ -27,7 +27,7 @@ public FakeNativeMemoryChunkPool(PoolParams poolParams) {
   }
 
   @Override
-  protected NativeMemoryChunk alloc(int bucketedSize) {
+  public NativeMemoryChunk alloc(int bucketedSize) {
     return new FakeNativeMemoryChunk(bucketedSize);
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
Patch:
@@ -861,7 +861,8 @@ private DataSource<Void> submitPrefetchRequest(
       Object callerContext,
       Priority priority) {
     final RequestListener2 requestListener =
-        new InternalRequestListener(getRequestListenerForRequest(imageRequest, null), null);
+        new InternalRequestListener(
+            getRequestListenerForRequest(imageRequest, null), mRequestListener2);
 
     if (mCallerContextVerifier != null) {
       mCallerContextVerifier.verifyCallerContext(callerContext, true);

File: animated-gif-lite/src/main/java/com/facebook/animated/giflite/drawable/GifAnimationBackend.java
Patch:
@@ -115,7 +115,7 @@ public int getLoopCount() {
   }
 
   private int getFrameStartTime(int frameNumber) {
-    if (frameNumber == 0) {
+    if (frameNumber == 0 || frameNumber >= mFrameStartTimes.length) {
       return 0;
     }
     if (mFrameStartTimes[frameNumber] != 0) {

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
Patch:
@@ -33,7 +33,7 @@ public class ImagePerfState {
   private long mImageRequestEndTimeMs = UNSET;
 
   // Image pipeline information
-  private @ImageOrigin int mImageOrigin = UNSET;
+  private @ImageOrigin int mImageOrigin = ImageOrigin.UNKNOWN;
   private @Nullable String mUltimateProducerName;
   private boolean mIsPrefetch;
 

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/VisibilityState.java
Patch:
@@ -7,6 +7,7 @@
 package com.facebook.drawee.backends.pipeline.info;
 
 import static com.facebook.drawee.backends.pipeline.info.VisibilityState.INVISIBLE;
+import static com.facebook.drawee.backends.pipeline.info.VisibilityState.UNKNOWN;
 import static com.facebook.drawee.backends.pipeline.info.VisibilityState.VISIBLE;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
@@ -15,7 +16,7 @@
 
 @Retention(SOURCE)
 @IntDef({
-  VISIBLE, INVISIBLE,
+  UNKNOWN, VISIBLE, INVISIBLE,
 })
 public @interface VisibilityState {
 

File: drawee/src/main/java/com/facebook/drawee/components/DeferredReleaserLegacyImpl.java
Patch:
@@ -88,6 +88,6 @@ public void cancelDeferredRelease(Releasable releasable) {
   }
 
   private static void ensureOnUiThread() {
-    Preconditions.checkState(Looper.getMainLooper().getThread() == Thread.currentThread());
+    Preconditions.checkState(isOnUiThread());
   }
 }

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/EncodedImage.java
Patch:
@@ -365,7 +365,7 @@ public void parseMetaData() {
         && mRotationAngle == UNKNOWN_ROTATION_ANGLE) {
       mExifOrientation = HeifExifUtil.getOrientation(getInputStream());
       mRotationAngle = JfifUtil.getAutoRotateAngleFromOrientation(mExifOrientation);
-    } else {
+    } else if (mRotationAngle == UNKNOWN_ROTATION_ANGLE) {
       mRotationAngle = 0;
     }
   }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
Patch:
@@ -207,7 +207,6 @@ private void forwardNewResult(
     private @Nullable EncodedImage getCloneWithRotationApplied(
         EncodedImage encodedImage, int angle) {
       EncodedImage newResult = EncodedImage.cloneOrNull(encodedImage); // for thread-safety sake
-      encodedImage.close();
       if (newResult != null) {
         newResult.setRotationAngle(angle);
       }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java
Patch:
@@ -10,6 +10,7 @@
 import android.graphics.Bitmap;
 import com.facebook.cache.common.CacheKey;
 import com.facebook.common.internal.Supplier;
+import com.facebook.common.internal.Suppliers;
 import com.facebook.common.memory.ByteArrayPool;
 import com.facebook.common.memory.PooledByteBuffer;
 import com.facebook.common.memory.PooledByteBufferFactory;
@@ -173,7 +174,7 @@ public static class Builder {
     public boolean mGingerbreadDecoderEnabled;
     public boolean mDownscaleFrameToDrawableDimensions;
     public int mBitmapCloseableRefType;
-    public Supplier<Boolean> mSuppressBitmapPrefetchingSupplier;
+    public Supplier<Boolean> mSuppressBitmapPrefetchingSupplier = Suppliers.of(false);
 
     public Builder(ImagePipelineConfig.Builder configBuilder) {
       mConfigBuilder = configBuilder;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/AnimatedDrawable2.java
Patch:
@@ -227,6 +227,9 @@ public void draw(Canvas canvas) {
         scheduledRenderTimeForNextFrameMs =
             targetRenderTimeForNextFrameMs + mFrameSchedulingDelayMs;
         scheduleNextFrame(scheduledRenderTimeForNextFrameMs);
+      } else {
+        mAnimationListener.onAnimationStop(this);
+        mIsRunning = false;
       }
     }
 

File: vito/core/src/main/java/com/facebook/fresco/vito/core/FrescoState.java
Patch:
@@ -45,7 +45,7 @@ public class FrescoState
   private final @Nullable CacheKey mCacheKey;
 
   // ImageListener passed as @Prop to Litho component
-  private ImageListener mImageListener;
+  private @Nullable ImageListener mImageListener;
   // Other global and ad-hoc ImageListener(s)
   private final @Nullable ImageListener mOtherListeners;
   private @Nullable ImageRequest mImageRequest;
@@ -367,7 +367,7 @@ public void setTargetHeightPx(@Px int targetHeightPx) {
     mTargetHeightPx = targetHeightPx;
   }
 
-  public ImageListener getImageListener() {
+  public @Nullable ImageListener getImageListener() {
     return mImageListener;
   }
 

File: fbcore/src/main/java/com/facebook/common/references/CloseableReference.java
Patch:
@@ -84,10 +84,10 @@ public void release(Closeable value) {
         }
       };
 
-  private static final LeakHandler<Closeable> DEFAULT_LEAK_HANDLER =
-      new LeakHandler<Closeable>() {
+  private static final LeakHandler<Object> DEFAULT_LEAK_HANDLER =
+      new LeakHandler<Object>() {
         @Override
-        public void reportLeak(SharedReference<Closeable> reference) {
+        public void reportLeak(SharedReference<Object> reference) {
           FLog.w(
               TAG,
               "Finalized without closing: %x %x (type = %s)",

File: vito/core/src/main/java/com/facebook/fresco/vito/core/Hierarcher.java
Patch:
@@ -92,11 +92,13 @@ Drawable setupActualImageDrawable(
    * @param resources resources to be used to load drawables
    * @param imageOptions image options to be used to create the overlay
    * @param overlayDrawable a cached overlay drawable to be used instead of creating a new one
+   * @param debugOverlayDrawable a debug overlay drawable if enabled
    */
   void setupOverlayDrawable(
       FrescoContext frescoContext,
       FrescoDrawable frescoDrawable,
       Resources resources,
       ImageOptions imageOptions,
-      @Nullable Drawable overlayDrawable);
+      @Nullable Drawable overlayDrawable,
+      @Nullable Drawable debugOverlayDrawable);
 }

File: vito/core/src/test/java/com/facebook/fresco/vito/core/FrescoContextTest.java
Patch:
@@ -12,6 +12,7 @@
 
 import android.net.Uri;
 import com.facebook.callercontext.CallerContextVerifier;
+import com.facebook.fresco.vito.core.debug.NoOpDebugOverlayFactory;
 import com.facebook.fresco.vito.listener.ImageListener;
 import com.facebook.fresco.vito.options.ImageOptions;
 import com.facebook.fresco.vito.options.RoundingOptions;
@@ -52,7 +53,8 @@ public void setup() {
             mCallerContextVerifier,
             mFrescoExperiments,
             mUiThreadExecutor,
-            mImageListener);
+            mImageListener,
+            new NoOpDebugOverlayFactory());
   }
 
   @Test

File: vito/provider/src/main/java/com/facebook/fresco/vito/provider/DefaultFrescoContext.java
Patch:
@@ -14,6 +14,7 @@
 import com.facebook.fresco.vito.core.FrescoContext;
 import com.facebook.fresco.vito.core.FrescoExperiments;
 import com.facebook.fresco.vito.core.HierarcherImpl;
+import com.facebook.fresco.vito.core.debug.NoOpDebugOverlayFactory;
 import com.facebook.fresco.vito.drawable.ArrayVitoDrawableFactory;
 import com.facebook.fresco.vito.drawable.BitmapDrawableFactory;
 import com.facebook.fresco.vito.drawable.VitoDrawableFactory;
@@ -48,7 +49,8 @@ private static synchronized FrescoContext createDefaultContext(Resources resourc
         new NoOpCallerContextVerifier(),
         new FrescoExperiments(),
         UiThreadImmediateExecutorService.getInstance(),
-        null);
+        null,
+        new NoOpDebugOverlayFactory());
   }
 
   private static VitoDrawableFactory createDefaultDrawableFactory(Resources resources) {

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRotationFragment.java
Patch:
@@ -80,7 +80,7 @@ private void setRotationOptions(RotationOptions rotationOptions) {
     ImageRequest imageRequest =
         ImageRequestBuilder.newBuilderWithSource(mUri)
             .setRotationOptions(rotationOptions)
-            .setImageDecodeOptions(new ImageDecodeOptionsBuilder().setTransformToSRGB(true).build())
+            .setImageDecodeOptions(new ImageDecodeOptionsBuilder().build())
             .build();
     mSimpleDraweeView.setImageRequest(imageRequest);
   }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelineResizingFragment.java
Patch:
@@ -181,7 +181,7 @@ private void reloadImage(Uri imageUri, @Nullable ResizeOptions resizeOptions) {
     final ImageRequest imageRequest =
         ImageRequestBuilder.newBuilderWithSource(imageUri)
             .setResizeOptions(resizeOptions)
-            .setImageDecodeOptions(new ImageDecodeOptionsBuilder().setTransformToSRGB(true).build())
+            .setImageDecodeOptions(new ImageDecodeOptionsBuilder().build())
             .build();
 
     final DraweeController draweeController = Fresco.newDraweeControllerBuilder()

File: imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java
Patch:
@@ -147,7 +147,7 @@ public CloseableStaticBitmap decodeStaticImage(
       ImageDecodeOptions options) {
     CloseableReference<Bitmap> bitmapReference =
         mPlatformDecoder.decodeFromEncodedImageWithColorSpace(
-            encodedImage, options.bitmapConfig, null, options.transformToSRGB);
+            encodedImage, options.bitmapConfig, null, options.colorSpace);
     try {
       maybeApplyTransformation(options.bitmapTransformation, bitmapReference);
       return new CloseableStaticBitmap(
@@ -175,7 +175,7 @@ public CloseableStaticBitmap decodeJpeg(
       ImageDecodeOptions options) {
     CloseableReference<Bitmap> bitmapReference =
         mPlatformDecoder.decodeJPEGFromEncodedImageWithColorSpace(
-            encodedImage, options.bitmapConfig, null, length, options.transformToSRGB);
+            encodedImage, options.bitmapConfig, null, length, options.colorSpace);
     try {
       maybeApplyTransformation(options.bitmapTransformation, bitmapReference);
       return new CloseableStaticBitmap(

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelineRegionDecodingFragment.java
Patch:
@@ -164,7 +164,7 @@ public CloseableImage decode(
         ImageDecodeOptions options) {
       CloseableReference<Bitmap> decodedBitmapReference =
           mPlatformDecoder.decodeJPEGFromEncodedImageWithColorSpace(
-              encodedImage, options.bitmapConfig, mRegion, length, options.transformToSRGB);
+              encodedImage, options.bitmapConfig, mRegion, length, options.colorSpace);
       try {
         return new CloseableStaticBitmap(decodedBitmapReference, qualityInfo, 0);
       } finally {

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelinePrefetchFragment.java
Patch:
@@ -56,7 +56,8 @@ public class ImagePipelinePrefetchFragment extends BaseShowcaseFragment {
         public void onImageLoaded(
             final String controllerId,
             final @ImageOrigin int imageOrigin,
-            final boolean successful) {
+            final boolean successful,
+            final @Nullable String ultimateProducerName) {
           mHandler.post(
               new Runnable() {
                 @Override

File: fbcore/src/test/java/com/facebook/datasource/DataSourcesTest.java
Patch:
@@ -27,9 +27,9 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config(manifest= Config.NONE)
+@Config(manifest = Config.NONE)
 @PrepareOnlyThisForTest({DataSources.class})
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 public class DataSourcesTest {
 
   @Rule

File: imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/CountingMemoryCacheTest.java
Patch:
@@ -44,8 +44,8 @@
 
 @RunWith(RobolectricTestRunner.class)
 @PrepareForTest({SystemClock.class})
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
-@Config(manifest=Config.NONE)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
+@Config(manifest = Config.NONE)
 public class CountingMemoryCacheTest {
 
   private static final int CACHE_MAX_SIZE = 1200;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java
Patch:
@@ -55,9 +55,9 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 @PrepareOnlyThisForTest(StagingArea.class)
-@Config(manifest=Config.NONE)
+@Config(manifest = Config.NONE)
 public class BufferedDiskCacheTest {
   @Mock public FileCache mFileCache;
   @Mock public PooledByteBufferFactory mByteBufferFactory;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/memory/BitmapPoolTest.java
Patch:
@@ -31,10 +31,9 @@
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.robolectric.RobolectricTestRunner;
 
-/**
- Basic tests for BitmapPool */
+/** Basic tests for BitmapPool */
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 @org.robolectric.annotation.Config(manifest = org.robolectric.annotation.Config.NONE)
 public class BitmapPoolTest {
 

File: imagepipeline/src/test/java/com/facebook/imagepipeline/platform/ArtDecoderTest.java
Patch:
@@ -68,7 +68,7 @@
 @RunWith(RobolectricTestRunner.class)
 @PrepareOnlyThisForTest({BitmapFactory.class, BitmapRegionDecoder.class})
 @Config(sdk = Build.VERSION_CODES.LOLLIPOP)
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 public class ArtDecoderTest {
 
   private static final Bitmap.Config DEFAULT_BITMAP_CONFIG = Bitmap.Config.ARGB_8888;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/platform/GingerbreadPurgeableDecoderTest.java
Patch:
@@ -50,7 +50,7 @@
   DalvikPurgeableDecoder.class,
   Bitmaps.class
 })
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 public class GingerbreadPurgeableDecoderTest {
 
   protected static final Bitmap.Config DEFAULT_BITMAP_CONFIG = Bitmap.Config.ARGB_8888;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java
Patch:
@@ -59,7 +59,7 @@
   Bitmaps.class
 })
 @Config(sdk = Build.VERSION_CODES.KITKAT)
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 public class KitKatPurgeableDecoderTest {
 
   protected static final Bitmap.Config DEFAULT_BITMAP_CONFIG = Bitmap.Config.ARGB_8888;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/AddImageTransformMetaDataProducerTest.java
Patch:
@@ -34,9 +34,9 @@
 import org.robolectric.annotation.*;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 @PrepareForTest({ImageFormatChecker.class, JfifUtil.class, BitmapUtil.class})
-@Config(manifest= Config.NONE)
+@Config(manifest = Config.NONE)
 public class AddImageTransformMetaDataProducerTest {
   @Mock public Producer<EncodedImage> mInputProducer;
   @Mock public Consumer<EncodedImage> mConsumer;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/DecodeProducerTest.java
Patch:
@@ -43,7 +43,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 @Config(manifest = Config.NONE)
 @PrepareForTest({JobScheduler.class, ProgressiveJpegParser.class, DecodeProducer.class})
 public class DecodeProducerTest {

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/JobSchedulerTest.java
Patch:
@@ -42,8 +42,8 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
-@Config(manifest= Config.NONE)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
+@Config(manifest = Config.NONE)
 @PrepareForTest({SystemClock.class, JobScheduler.JobStartExecutorSupplier.class})
 public class JobSchedulerTest {
 

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducerTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.robolectric.annotation.*;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 @Config(manifest = Config.NONE)
 @PrepareForTest({JfifUtil.class, BitmapUtil.class})
 public class LocalExifThumbnailProducerTest {

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/NetworkFetchProducerTest.java
Patch:
@@ -39,8 +39,8 @@
 import org.robolectric.annotation.*;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*" })
-@Config(manifest= Config.NONE)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
+@Config(manifest = Config.NONE)
 @PrepareForTest({SystemClock.class})
 public class NetworkFetchProducerTest {
 

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java
Patch:
@@ -66,7 +66,7 @@
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*"})
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "androidx.*", "android.*"})
 @Config(manifest = Config.NONE)
 @PrepareOnlyThisForTest({
   NativeJpegTranscoder.class,

File: drawee/src/main/java/com/facebook/drawee/drawable/Rounded.java
Patch:
@@ -27,4 +27,7 @@ public interface Rounded {
 
   void setScaleDownInsideBorders(boolean scaleDownInsideBorders);
   boolean getScaleDownInsideBorders();
+
+  void setPaintFilterBitmap(boolean paintFilterBitmap);
+  boolean getPaintFilterBitmap();
 }

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -80,6 +80,7 @@ private void updatePaint() {
       mPaint.getShader().setLocalMatrix(mTransform);
       mIsShaderTransformDirty = false;
     }
+    mPaint.setFilterBitmap(getPaintFilterBitmap());
   }
 
   /**

File: drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
Patch:
@@ -332,6 +332,7 @@ static void applyRoundingParams(Rounded rounded, RoundingParams roundingParams)
     rounded.setBorder(roundingParams.getBorderColor(), roundingParams.getBorderWidth());
     rounded.setPadding(roundingParams.getPadding());
     rounded.setScaleDownInsideBorders(roundingParams.getScaleDownInsideBorders());
+    rounded.setPaintFilterBitmap(roundingParams.getPaintFilterBitmap());
   }
 
   /**
@@ -343,6 +344,7 @@ static void resetRoundingParams(Rounded rounded) {
     rounded.setBorder(Color.TRANSPARENT, 0);
     rounded.setPadding(0);
     rounded.setScaleDownInsideBorders(false);
+    rounded.setPaintFilterBitmap(false);
   }
 
   /**

File: fbcore/src/main/java/com/facebook/common/activitylistener/ActivityListenerManager.java
Patch:
@@ -99,7 +99,7 @@ public void onPause(Activity activity) {
       }
     }
 
-    private ActivityListener getListenerOrCleanUp(Activity activity) {
+    private @Nullable ActivityListener getListenerOrCleanUp(Activity activity) {
       ActivityListener activityVisibilityListener = mActivityListenerRef.get();
       if (activityVisibilityListener == null) {
         Preconditions.checkArgument(activity instanceof ListenableActivity);

File: animated-base/src/test/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImplTest.java
Patch:
@@ -38,6 +38,7 @@ public class AnimatedDrawableBackendImplTest {
   @Mock public AnimatedImage mImage;
   @Mock public AnimatedImageFrame mFrame;
   @Mock public Bitmap mBitmap;
+  @Mock public Rect mRect;
 
   @Before
   public void setUp() throws Exception {
@@ -66,7 +67,7 @@ private void testBasic(
 
     final AnimatedDrawableBackendImpl animatedDrawableBackendImpl =
         new AnimatedDrawableBackendImpl(
-            mAnimatedDrawableUtil, mAnimatedImageResult, new Rect(), true);
+            mAnimatedDrawableUtil, mAnimatedImageResult, mRect, true);
 
     animatedDrawableBackendImpl.renderFrame(0, mCanvas);
 

File: drawee/src/main/java/com/facebook/drawee/drawable/ScalingUtils.java
Patch:
@@ -110,7 +110,7 @@ Matrix getTransform(
   }
 
   @Nullable
-  public static ScaleTypeDrawable getActiveScaleTypeDrawable(Drawable drawable) {
+  public static ScaleTypeDrawable getActiveScaleTypeDrawable(@Nullable Drawable drawable) {
     if (drawable == null) {
       return null;
     } else if (drawable instanceof ScaleTypeDrawable) {

File: imagepipeline-base/src/main/java/com/facebook/cache/common/DebuggingCacheKey.java
Patch:
@@ -16,7 +16,7 @@
  */
 public class DebuggingCacheKey extends SimpleCacheKey {
 
-  private final Object mCallerContext;
+  private final @Nullable Object mCallerContext;
   private final Uri mSourceUri;
 
   public DebuggingCacheKey(String key, @Nullable Object callerContext, Uri sourceUri) {

File: imagepipeline-base/src/main/java/com/facebook/cache/common/NoOpCacheErrorLogger.java
Patch:
@@ -13,7 +13,7 @@
  * An implementation of {@link CacheErrorLogger} that doesn't do anything.
  */
 public class NoOpCacheErrorLogger implements CacheErrorLogger {
-  private static NoOpCacheErrorLogger sInstance = null;
+  private static @Nullable NoOpCacheErrorLogger sInstance = null;
 
   private NoOpCacheErrorLogger() {
   }

File: imagepipeline-base/src/main/java/com/facebook/cache/common/NoOpCacheEventListener.java
Patch:
@@ -7,11 +7,13 @@
 
 package com.facebook.cache.common;
 
+import javax.annotation.Nullable;
+
 /**
  * Implementation of {@link CacheEventListener} that doesn't do anything.
  */
 public class NoOpCacheEventListener implements CacheEventListener {
-  private static NoOpCacheEventListener sInstance = null;
+  private static @Nullable NoOpCacheEventListener sInstance = null;
 
   private NoOpCacheEventListener() {
   }

File: imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormat.java
Patch:
@@ -36,7 +36,7 @@ public interface FormatChecker {
   // Unknown image format
   public static final ImageFormat UNKNOWN = new ImageFormat("UNKNOWN", null);
 
-  private final String mFileExtension;
+  private final @Nullable String mFileExtension;
   private final String mName;
 
   public ImageFormat(String name, @Nullable String fileExtension) {

File: fbcore/src/main/java/com/facebook/common/executors/HandlerExecutorServiceImpl.java
Patch:
@@ -58,7 +58,7 @@ public void execute(Runnable command) {
   }
 
   @Override
-  protected <T> ScheduledFutureImpl<T> newTaskFor(Runnable runnable, T value) {
+  protected <T> ScheduledFutureImpl<T> newTaskFor(Runnable runnable, @Nullable T value) {
     return new ScheduledFutureImpl<T>(mHandler, runnable, value);
   }
 

File: fbcore/src/main/java/com/facebook/common/file/FileUtils.java
Patch:
@@ -11,6 +11,7 @@
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
+import javax.annotation.Nullable;
 
 /**
  * Static operations on {@link File}s
@@ -115,7 +116,7 @@ public RenameException(String message) {
       super(message);
     }
 
-    public RenameException(String message, Throwable innerException) {
+    public RenameException(String message, @Nullable Throwable innerException) {
       super(message);
       initCause(innerException);
 

File: fbcore/src/main/java/com/facebook/common/statfs/StatFsHelper.java
Patch:
@@ -50,10 +50,10 @@ public enum StorageType {
   // Time interval for updating disk information
   private static final long RESTAT_INTERVAL_MS = TimeUnit.MINUTES.toMillis(2);
 
-  private volatile StatFs mInternalStatFs = null;
+  private volatile @Nullable StatFs mInternalStatFs = null;
   private volatile File mInternalPath;
 
-  private volatile StatFs mExternalStatFs = null;
+  private volatile @Nullable StatFs mExternalStatFs = null;
   private volatile File mExternalPath;
 
   @GuardedBy("lock")

File: drawee/src/main/java/com/facebook/drawee/gestures/GestureDetector.java
Patch:
@@ -11,6 +11,7 @@
 import android.view.MotionEvent;
 import android.view.ViewConfiguration;
 import com.facebook.common.internal.VisibleForTesting;
+import javax.annotation.Nullable;
 
 /**
  * Gesture detector based on touch events.
@@ -30,7 +31,7 @@ public interface ClickListener {
     public boolean onClick();
   }
 
-  @VisibleForTesting ClickListener mClickListener;
+  @VisibleForTesting @Nullable ClickListener mClickListener;
 
   @VisibleForTesting final float mSingleTapSlopPx;
   @VisibleForTesting boolean mIsCapturingGesture;

File: drawee/src/main/java/com/facebook/drawee/components/DeferredReleaser.java
Patch:
@@ -12,6 +12,7 @@
 import com.facebook.common.internal.Preconditions;
 import java.util.HashSet;
 import java.util.Set;
+import javax.annotation.Nullable;
 
 /**
  * Component that defers {@code release} until after the main Looper has completed its current
@@ -30,7 +31,7 @@
  */
 public class DeferredReleaser {
 
-  private static DeferredReleaser sInstance = null;
+  private static @Nullable DeferredReleaser sInstance = null;
 
   public static synchronized DeferredReleaser getInstance() {
     if (sInstance == null) {

File: fbcore/src/main/java/com/facebook/common/executors/UiThreadImmediateExecutorService.java
Patch:
@@ -10,6 +10,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import java.util.concurrent.ExecutorService;
+import javax.annotation.Nullable;
 
 /**
  * An {@link ExecutorService} that is backed by the application's main looper.
@@ -18,7 +19,7 @@
  * it will be executed synchronously.
  */
 public class UiThreadImmediateExecutorService extends HandlerExecutorServiceImpl {
-  private static UiThreadImmediateExecutorService sInstance = null;
+  private static @Nullable UiThreadImmediateExecutorService sInstance = null;
 
   private UiThreadImmediateExecutorService() {
     super(new Handler(Looper.getMainLooper()));

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/systrace/FrescoSystrace.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.facebook.imagepipeline.systrace;
 
+import javax.annotation.Nullable;
+
 /**
  * This is intended as a hook into {@code android.os.Trace}, but allows you to provide your own
  * functionality. Use it as
@@ -29,7 +31,7 @@ public class FrescoSystrace {
   /** Convenience implementation of ArgsBuilder to use when we aren't tracing. */
   public static final ArgsBuilder NO_OP_ARGS_BUILDER = new NoOpArgsBuilder();
 
-  private static volatile Systrace sInstance = null;
+  private static volatile @Nullable Systrace sInstance = null;
 
   public interface Systrace {
     void beginSection(String name);

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeSimpleFragment.java
Patch:
@@ -41,8 +41,6 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
 
     SimpleDraweeView simpleDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view);
     simpleDraweeView.setImageURI(uri);
-
-    simpleDraweeView.getHierarchy().setImage();
   }
 
   @Override

File: drawee/src/main/java/com/facebook/drawee/view/SimpleDraweeView.java
Patch:
@@ -81,9 +81,6 @@ private void init(Context context, @Nullable AttributeSet attrs) {
         FrescoSystrace.beginSection("SimpleDraweeView#init");
       }
       if (isInEditMode()) {
-        // Disable roundingParams due to a bug in Android Studio
-        // https://issuetracker.google.com/issues/113560562
-        getHierarchy().setRoundingParams(null);
         getTopLevelDrawable().setVisible(true, false);
         getTopLevelDrawable().invalidateSelf();
       } else {

File: animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedFrameCache.java
Patch:
@@ -69,7 +69,7 @@ public boolean containsUri(Uri uri) {
     }
 
     @Override
-    public String getUriString() {
+    public @Nullable String getUriString() {
       return null;
     }
   }

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/animator/AnimatedDrawable2ValueAnimatorHelper.java
Patch:
@@ -11,16 +11,16 @@
 import android.os.Build;
 import com.facebook.fresco.animation.backend.AnimationInformation;
 import com.facebook.fresco.animation.drawable.AnimatedDrawable2;
+import javax.annotation.Nullable;
 
 /**
  * Helper class to create {@link ValueAnimator}s for {@link AnimatedDrawable2}.
  */
 @TargetApi(Build.VERSION_CODES.HONEYCOMB)
 public class AnimatedDrawable2ValueAnimatorHelper {
 
-  public static ValueAnimator createValueAnimator(
-      AnimatedDrawable2 animatedDrawable,
-      int maxDurationMs) {
+  public static @Nullable ValueAnimator createValueAnimator(
+      AnimatedDrawable2 animatedDrawable, int maxDurationMs) {
     ValueAnimator animator = createValueAnimator(animatedDrawable);
     if (animator == null) {
       return null;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
Patch:
@@ -138,7 +138,7 @@ protected PipelineDraweeController obtainController() {
     }
   }
 
-  private CacheKey getCacheKey() {
+  private @Nullable CacheKey getCacheKey() {
     final ImageRequest imageRequest = getImageRequest();
     final CacheKeyFactory cacheKeyFactory = mImagePipeline.getCacheKeyFactory();
     CacheKey cacheKey = null;

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
Patch:
@@ -721,7 +721,7 @@ public String toString() {
         .toString();
   }
 
-  protected T getCachedImage() {
+  protected @Nullable T getCachedImage() {
     return null;
   }
 

File: fbcore/src/main/java/com/facebook/common/statfs/StatFsHelper.java
Patch:
@@ -256,7 +256,7 @@ private void updateStats() {
    * directory does not exist or the StatFs restat() or constructor fails (throws), a null StatFs
    * object is returned.
    */
-  private StatFs updateStatsHelper(@Nullable StatFs statfs, @Nullable File dir) {
+  private @Nullable StatFs updateStatsHelper(@Nullable StatFs statfs, @Nullable File dir) {
     if(dir == null || !dir.exists()) {
       // The path does not exist, do not track stats for it.
       return null;

File: fbcore/src/main/java/com/facebook/common/util/UriUtil.java
Patch:
@@ -191,7 +191,7 @@ public static String getSchemeOrNull(@Nullable Uri uri) {
    * @param uriAsString the uri as a string
    * @return the parsed Uri or null if the input was null
    */
-  public static Uri parseUriOrNull(@Nullable String uriAsString) {
+  public static @Nullable Uri parseUriOrNull(@Nullable String uriAsString) {
     return uriAsString != null ? Uri.parse(uriAsString) : null;
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/StagingArea.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 
 /**
@@ -130,7 +131,7 @@ public synchronized boolean remove(final CacheKey key, final EncodedImage encode
    * @param key
    * @return value associated with given key or null if no value is associated
    */
-  public synchronized EncodedImage get(final CacheKey key) {
+  public synchronized @Nullable EncodedImage get(final CacheKey key) {
     Preconditions.checkNotNull(key);
     EncodedImage storedEncodedImage = mMap.get(key);
     if (storedEncodedImage != null) {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
Patch:
@@ -321,7 +321,7 @@ private void doDecode(EncodedImage encodedImage, @Status int status) {
       }
     }
 
-    private Map<String, String> getExtraMap(
+    private @Nullable Map<String, String> getExtraMap(
         @Nullable CloseableImage image,
         long queueTime,
         QualityInfo quality,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheReadProducer.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Map;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.atomic.AtomicBoolean;
+import javax.annotation.Nullable;
 
 /**
  * Disk cache read producer.
@@ -136,7 +137,7 @@ private void maybeStartInputProducer(
   }
 
   @VisibleForTesting
-  static Map<String, String> getExtraMap(
+  static @Nullable Map<String, String> getExtraMap(
       final ProducerListener listener,
       final String requestId,
       final boolean valueFound,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriThumbnailFetchProducer.java
Patch:
@@ -68,7 +68,7 @@ public boolean canProvideImageForSize(ResizeOptions resizeOptions) {
   }
 
   @Override
-  protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOException {
+  protected @Nullable EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOException {
     Uri uri = imageRequest.getSourceUri();
 
     if (UriUtil.isLocalCameraUri(uri)) {
@@ -112,7 +112,8 @@ protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOExcep
   // Gets the smallest possible thumbnail that is bigger than the requested size in the resize
   // options or null if either the thumbnails are smaller than the requested size or there are no
   // stored thumbnails.
-  private EncodedImage getThumbnail(ResizeOptions resizeOptions, int imageId) throws IOException {
+  private @Nullable EncodedImage getThumbnail(ResizeOptions resizeOptions, int imageId)
+      throws IOException {
     int thumbnailKind = getThumbnailKind(resizeOptions);
     if (thumbnailKind == NO_THUMBNAIL) {
       return null;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
Patch:
@@ -242,7 +242,7 @@ private void doTransform(
       }
     }
 
-    private Map<String, String> getExtraMap(
+    private @Nullable Map<String, String> getExtraMap(
         EncodedImage encodedImage,
         @Nullable ResizeOptions resizeOptions,
         @Nullable ImageTranscodeResult transcodeResult,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
Patch:
@@ -86,15 +86,15 @@ public class ImageRequest {
   /** Request listener to use for this image request */
   private final @Nullable RequestListener mRequestListener;
 
-  public static ImageRequest fromFile(@Nullable File file) {
+  public static @Nullable ImageRequest fromFile(@Nullable File file) {
     return (file == null) ? null : ImageRequest.fromUri(UriUtil.getUriForFile(file));
   }
 
-  public static ImageRequest fromUri(@Nullable Uri uri) {
+  public static @Nullable ImageRequest fromUri(@Nullable Uri uri) {
     return (uri == null) ? null : ImageRequestBuilder.newBuilderWithSource(uri).build();
   }
 
-  public static ImageRequest fromUri(@Nullable String uriString) {
+  public static @Nullable ImageRequest fromUri(@Nullable String uriString) {
     return (uriString == null || uriString.length() == 0) ? null : fromUri(Uri.parse(uriString));
   }
 

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/BitmapMemoryCacheTrimStrategy.java
Patch:
@@ -34,6 +34,7 @@ public double getTrimRatio(MemoryTrimType trimType) {
           return 0;
         }
       case OnAppBackgrounded:
+      case OnSystemMemoryCriticallyLowWhileAppInForeground:
       case OnSystemLowMemoryWhileAppInForeground:
       case OnSystemLowMemoryWhileAppInBackground:
         return 1;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/NativeMemoryCacheTrimStrategy.java
Patch:
@@ -29,6 +29,7 @@ public double getTrimRatio(MemoryTrimType trimType) {
         // Resources cached on native heap do not consume Dalvik heap, so no trimming here.
         return 0;
       case OnAppBackgrounded:
+      case OnSystemMemoryCriticallyLowWhileAppInForeground:
       case OnSystemLowMemoryWhileAppInForeground:
       case OnSystemLowMemoryWhileAppInBackground:
         return 1;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -446,6 +446,7 @@ private BufferedDiskCache getSmallImageBufferedDiskCache() {
   private ImageTranscoderFactory getImageTranscoderFactory() {
     if (mImageTranscoderFactory == null) {
       if (mConfig.getImageTranscoderFactory() == null
+          && mConfig.getImageTranscoderType() == null
           && mConfig.getExperiments().isNativeCodeDisabled()) {
         mImageTranscoderFactory =
             new SimpleImageTranscoderFactory(mConfig.getExperiments().getMaxBitmapSize());
@@ -454,7 +455,8 @@ private ImageTranscoderFactory getImageTranscoderFactory() {
             new MultiImageTranscoderFactory(
                 mConfig.getExperiments().getMaxBitmapSize(),
                 mConfig.getExperiments().getUseDownsamplingRatioForResizing(),
-                mConfig.getImageTranscoderFactory());
+                mConfig.getImageTranscoderFactory(),
+                mConfig.getImageTranscoderType());
       }
     }
     return mImageTranscoderFactory;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/transcoder/ImageTranscoderFactory.java
Patch:
@@ -16,6 +16,9 @@ public interface ImageTranscoderFactory {
    * isResizingEnabled}. It can return null if the {@link ImageFormat} is not supported by this
    * {@link ImageTranscoder}.
    *
+   * <p>Note that if JPEG images are not supported, we will fallback to our native {@link
+   * ImageTranscoder} implementation.
+   *
    * @param imageFormat the {@link ImageFormat} of the input images.
    * @param isResizingEnabled true if resizing is allowed.
    * @return The {@link ImageTranscoder} or null if the image format is not supported.

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapPoolType.java
Patch:
@@ -10,6 +10,7 @@
 
 public @interface BitmapPoolType {
   String LEGACY = "legacy";
+  String LEGACY_DEFAULT_PARAMS = "legacy_default_params";
   String DUMMY = "dummy";
   String EXPERIMENTAL = "experimental";
 

File: samples/showcase/src/androidTest/java/com/facebook/fresco/samples/showcase/ShowcaseRunTest.java
Patch:
@@ -32,6 +32,7 @@
 import android.view.View;
 import android.widget.TextView;
 import org.hamcrest.Matcher;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -53,6 +54,7 @@ public void testRunTheShowcaseApp() {
   }
 
   @Test
+  @Ignore /* TODO T34443404, Circle CI instrumentation test fails due to network issue */
   public void testShowImage() {
     openScreenFromMenu(R.string.drawee_simple_title);
     onView(withId(R.id.drawee_view)).perform(waitFor(5000));

File: imagepipeline/src/main/java/com/facebook/imagepipeline/platform/DefaultDecoder.java
Patch:
@@ -183,8 +183,8 @@ private CloseableReference<Bitmap> decodeFromStream(
     int targetWidth = options.outWidth;
     int targetHeight = options.outHeight;
     if (regionToDecode != null) {
-      targetWidth = regionToDecode.width();
-      targetHeight = regionToDecode.height();
+      targetWidth = regionToDecode.width() / options.inSampleSize;
+      targetHeight = regionToDecode.height() / options.inSampleSize;
     }
     int sizeInBytes = getBitmapSize(targetWidth, targetHeight, options);
     final Bitmap bitmapToReuse = mBitmapPool.get(sizeInBytes);

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
Patch:
@@ -33,7 +33,7 @@ public class ImagePerfState {
   private long mImageRequestEndTimeMs = UNSET;
 
   // Image pipeline information
-  private @ImageOrigin int mImageOrigin = ImageOrigin.UNKNOWN;
+  private @ImageOrigin int mImageOrigin = UNSET;
   private boolean mIsPrefetch;
 
   // On screen information

File: animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedImage.java
Patch:
@@ -9,6 +9,7 @@
 
 import com.facebook.imagepipeline.animated.base.AnimatedImage;
 import com.facebook.imagepipeline.animated.base.AnimatedImageResult;
+import javax.annotation.Nullable;
 
 /**
  * Encapsulates the data needed in order for {@code AnimatedDrawable} to render a
@@ -64,7 +65,7 @@ public synchronized AnimatedImageResult getImageResult() {
     return mImageResult;
   }
 
-  public synchronized AnimatedImage getImage() {
+  public synchronized @Nullable AnimatedImage getImage() {
     return isClosed() ? null : mImageResult.getImage();
   }
 }

File: imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java
Patch:
@@ -245,7 +245,9 @@ private static boolean isIcoHeader(final byte[] imageHeaderBytes, final int head
    */
   private static final String HEIF_HEADER_PREFIX = "ftyp";
 
-  private static final String[] HEIF_HEADER_SUFFIXES = {"heic", "heix", "hevc", "hevx"};
+  private static final String[] HEIF_HEADER_SUFFIXES = {
+    "heic", "heix", "hevc", "hevx", "mif1", "msf1"
+  };
   private static final int HEIF_HEADER_LENGTH =
       ImageFormatCheckerUtils.asciiBytes(HEIF_HEADER_PREFIX + HEIF_HEADER_SUFFIXES[0]).length;
 

File: fbcore/src/main/java/com/facebook/common/util/TriState.java
Patch:
@@ -8,6 +8,7 @@
 package com.facebook.common.util;
 
 import com.facebook.infer.annotation.Functional;
+import javax.annotation.Nullable;
 
 /**
  * Generic tri-state enum for boolean values that can also be unset.
@@ -97,7 +98,7 @@ public boolean asBoolean(boolean defaultValue) {
    *     {@code this} is {@link TriState#UNSET}.
    */
   @Functional
-  public Boolean asBooleanObject() {
+  public @Nullable Boolean asBooleanObject() {
     switch (this) {
       case YES:
         return Boolean.TRUE;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -385,9 +385,11 @@ private ProducerSequenceFactory getProducerSequenceFactory() {
               mConfig.isResizeAndRotateEnabledForNetwork(),
               mConfig.getExperiments().isWebpSupportEnabled(),
               mThreadHandoffProducerQueue,
+              mConfig.getExperiments().getUseDownsamplingRatioForResizing(),
               useBitmapPrepareToDraw,
               mConfig.getExperiments().isPartialImageCachingEnabled(),
               mConfig.isDiskCacheEnabled(),
+              mConfig.getExperiments().getMaxBitmapSize(),
               mConfig.getImageTranscoderFactory());
     }
     return mProducerSequenceFactory;

File: imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormats.java
Patch:
@@ -19,6 +19,7 @@ public final class DefaultImageFormats {
   public static final ImageFormat PNG = new ImageFormat("PNG", "png");
   public static final ImageFormat GIF = new ImageFormat("GIF", "gif");
   public static final ImageFormat BMP = new ImageFormat("BMP", "bmp");
+  public static final ImageFormat ICO = new ImageFormat("ICO", "ico");
   public static final ImageFormat WEBP_SIMPLE = new ImageFormat("WEBP_SIMPLE", "webp");
   public static final ImageFormat WEBP_LOSSLESS = new ImageFormat("WEBP_LOSSLESS", "webp");
   public static final ImageFormat WEBP_EXTENDED = new ImageFormat("WEBP_EXTENDED", "webp");
@@ -66,6 +67,7 @@ public static List<ImageFormat> getDefaultFormats() {
       mDefaultFormats.add(PNG);
       mDefaultFormats.add(GIF);
       mDefaultFormats.add(BMP);
+      mDefaultFormats.add(ICO);
       mDefaultFormats.add(WEBP_SIMPLE);
       mDefaultFormats.add(WEBP_LOSSLESS);
       mDefaultFormats.add(WEBP_EXTENDED);

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/ShowcaseApplication.java
Patch:
@@ -13,13 +13,13 @@
 
 import android.app.Application;
 import android.content.Context;
-import com.facebook.common.internal.Suppliers;
 import com.facebook.common.logging.FLog;
 import com.facebook.drawee.backends.pipeline.DraweeConfig;
 import com.facebook.drawee.backends.pipeline.Fresco;
 import com.facebook.fresco.samples.showcase.misc.DebugOverlaySupplierSingleton;
 import com.facebook.imagepipeline.backends.okhttp3.OkHttpImagePipelineConfigFactory;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
+import com.facebook.imagepipeline.core.MemoryChunkType;
 import com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig;
 import com.facebook.imagepipeline.listener.RequestListener;
 import com.facebook.imagepipeline.listener.RequestLoggingListener;
@@ -52,6 +52,7 @@ public void onCreate() {
 
     ImagePipelineConfig imagePipelineConfig =
         OkHttpImagePipelineConfigFactory.newBuilder(this, okHttpClient)
+            .setMemoryChunkType(MemoryChunkType.BUFFER_MEMORY)
             .setRequestListeners(listeners)
             .setProgressiveJpegConfig(new SimpleProgressiveJpegConfig())
             .setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this))

File: fbcore/src/main/java/com/facebook/common/media/MediaUtils.java
Patch:
@@ -7,7 +7,6 @@
 
 package com.facebook.common.media;
 
-import android.webkit.MimeTypeMap;
 import com.facebook.common.internal.ImmutableMap;
 import java.util.Locale;
 import java.util.Map;
@@ -39,8 +38,9 @@ public static boolean isThreeD(@Nullable String mimeType) {
     if (extension == null) {
       return null;
     }
+
     extension = extension.toLowerCase(Locale.US);
-    String mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
+    String mimeType = MimeTypeMapWrapper.getMimeTypeFromExtension(extension);
 
     // If we did not find a mime type for the extension specified, check our additional
     // extension/mime-type mappings.

File: samples/contrib/com/facebook/drawee/drawable/CircleProgressBarDrawable.java
Patch:
@@ -39,4 +39,4 @@ private void drawBar(Canvas canvas, int level, int color) {
         if (level != 0)
             canvas.drawArc(rectF, 0, (float) (level * 360 / maxLevel), false, mPaint);
     }
-}
\ No newline at end of file
+}

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/systrace/DefaultFrescoSystrace.java
Patch:
@@ -70,7 +70,9 @@ public void flush() {
       if (mStringBuilder.length() > 127) {
         mStringBuilder.setLength(127);
       }
-      Trace.beginSection(mStringBuilder.toString());
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        Trace.beginSection(mStringBuilder.toString());
+      }
     }
 
     @Override

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/ShowcaseApplication.java
Patch:
@@ -57,8 +57,6 @@ public void onCreate() {
             .setImageDecoderConfig(CustomImageFormatConfigurator.createImageDecoderConfig(this))
             .experiment()
             .setBitmapPrepareToDraw(true, 0, Integer.MAX_VALUE, true)
-            .experiment()
-            .setSmartResizingEnabled(Suppliers.BOOLEAN_TRUE)
             .build();
 
     ImagePipelineConfig.getDefaultImageRequestConfig().setProgressiveRenderingEnabled(true);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -356,7 +356,6 @@ private ProducerFactory getProducerFactory() {
                   mConfig.isDownsampleEnabled(),
                   mConfig.isResizeAndRotateEnabledForNetwork(),
                   mConfig.getExperiments().isDecodeCancellationEnabled(),
-                  mConfig.getExperiments().isSmartResizingEnabled(),
                   mConfig.getExecutorSupplier(),
                   mConfig.getPoolFactory().getPooledByteBufferFactory(),
                   getBitmapMemoryCache(),

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/BitmapMemoryCacheGetProducer.java
Patch:
@@ -30,7 +30,8 @@ public BitmapMemoryCacheGetProducer(
   @Override
   protected Consumer<CloseableReference<CloseableImage>> wrapConsumer(
       final Consumer<CloseableReference<CloseableImage>> consumer,
-      final CacheKey cacheKey) {
+      final CacheKey cacheKey,
+      boolean isMemoryCacheEnabled) {
     // since this cache is read-only, we can pass our consumer directly to the next producer
     return consumer;
   }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/OOMSoftReferenceBucket.java
Patch:
@@ -20,7 +20,7 @@ class OOMSoftReferenceBucket<V> extends Bucket<V> {
   private LinkedList<OOMSoftReference<V>> mSpareReferences;
 
   public OOMSoftReferenceBucket(int itemSize, int maxLength, int inUseLength) {
-    super(itemSize, maxLength, inUseLength);
+    super(itemSize, maxLength, inUseLength, false);
     mSpareReferences = new LinkedList<>();
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolParams.java
Patch:
@@ -53,6 +53,8 @@ public class PoolParams {
   public final int minBucketSize;
   public final int maxBucketSize;
 
+  public boolean fixBucketsReinitialization;
+
   /** The maximum number of threads that may be accessing this pool.
    *
    * <p>Pool implementations may or may not need this to be set.

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BitmapMemoryCacheFactory.java
Patch:
@@ -12,9 +12,9 @@
 
 public class BitmapMemoryCacheFactory {
 
-  public static MemoryCache<CacheKey, CloseableImage> get(
-    final CountingMemoryCache<CacheKey, CloseableImage> bitmapCountingMemoryCache,
-    final ImageCacheStatsTracker imageCacheStatsTracker) {
+  public static InstrumentedMemoryCache<CacheKey, CloseableImage> get(
+      final CountingMemoryCache<CacheKey, CloseableImage> bitmapCountingMemoryCache,
+      final ImageCacheStatsTracker imageCacheStatsTracker) {
 
     imageCacheStatsTracker.registerBitmapMemoryCache(bitmapCountingMemoryCache);
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/EncodedMemoryCacheFactory.java
Patch:
@@ -12,7 +12,7 @@
 
 public class EncodedMemoryCacheFactory {
 
-  public static MemoryCache<CacheKey, PooledByteBuffer> get(
+  public static InstrumentedMemoryCache<CacheKey, PooledByteBuffer> get(
       final CountingMemoryCache<CacheKey, PooledByteBuffer> encodedCountingMemoryCache,
       final ImageCacheStatsTracker imageCacheStatsTracker) {
 

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedCornersDrawable.java
Patch:
@@ -214,6 +214,7 @@ private void updatePath() {
     mTempRectangle.set(getBounds());
 
     mTempRectangle.inset(mPadding, mPadding);
+    mPath.addRect(mTempRectangle, Path.Direction.CW);
     if (mIsCircle) {
       mPath.addCircle(
               mTempRectangle.centerX(),
@@ -275,7 +276,7 @@ public void draw(Canvas canvas) {
         mPaint.setStyle(Paint.Style.FILL);
         mPaint.setColor(mOverlayColor);
         mPaint.setStrokeWidth(0f);
-        mPath.setFillType(Path.FillType.INVERSE_EVEN_ODD);
+        mPath.setFillType(Path.FillType.EVEN_ODD);
         canvas.drawPath(mPath, mPaint);
 
         if (mIsCircle) {

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageLoadStatus.java
Patch:
@@ -12,13 +12,15 @@
 import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.ORIGIN_AVAILABLE;
 import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.REQUESTED;
 import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.SUCCESS;
+import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.UNKNOWN;
 import static java.lang.annotation.RetentionPolicy.SOURCE;
 
 import android.support.annotation.IntDef;
 import java.lang.annotation.Retention;
 
 @Retention(SOURCE)
 @IntDef({
+  UNKNOWN,
   REQUESTED,
   ORIGIN_AVAILABLE,
   INTERMEDIATE_AVAILABLE,
@@ -28,6 +30,7 @@
 })
 public @interface ImageLoadStatus {
 
+  int UNKNOWN = -1;
   int REQUESTED = 0;
   int ORIGIN_AVAILABLE = 1;
   int INTERMEDIATE_AVAILABLE = 2;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
Patch:
@@ -90,6 +90,7 @@ public void clearImagePerfDataListeners() {
   }
 
   public void notifyListeners(ImagePerfState state, @ImageLoadStatus int imageLoadStatus) {
+    mImagePerfState.setImageLoadStatus(imageLoadStatus);
     if (!mEnabled || mImagePerfDataListeners == null || mImagePerfDataListeners.isEmpty()) {
       return;
     }

File: imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormats.java
Patch:
@@ -25,6 +25,7 @@ public final class DefaultImageFormats {
   public static final ImageFormat WEBP_EXTENDED_WITH_ALPHA =
       new ImageFormat("WEBP_EXTENDED_WITH_ALPHA", "webp");
   public static final ImageFormat WEBP_ANIMATED = new ImageFormat("WEBP_ANIMATED", "webp");
+  public static final ImageFormat HEIF = new ImageFormat("HEIF", "heif");
 
   private static ImmutableList<ImageFormat> sAllDefaultFormats;
 
@@ -70,6 +71,7 @@ public static List<ImageFormat> getDefaultFormats() {
       mDefaultFormats.add(WEBP_EXTENDED);
       mDefaultFormats.add(WEBP_EXTENDED_WITH_ALPHA);
       mDefaultFormats.add(WEBP_ANIMATED);
+      mDefaultFormats.add(HEIF);
       sAllDefaultFormats = ImmutableList.copyOf(mDefaultFormats);
     }
     return sAllDefaultFormats;

File: fbcore/src/main/java/com/facebook/common/memory/PooledByteBuffer.java
Patch:
@@ -37,7 +37,7 @@ public interface PooledByteBuffer extends Closeable {
    * @param length number of bytes to copy
    * @return number of bytes copied
    */
-  void read(int offset, byte[] buffer, int bufferOffset, int length);
+  int read(int offset, byte[] buffer, int bufferOffset, int length);
 
   /**
    * @return pointer to native memory backing this buffer

File: imagepipeline-base-test/src/main/java/com/facebook/imagepipeline/testing/TrivialPooledByteBuffer.java
Patch:
@@ -36,8 +36,9 @@ public byte read(int offset) {
   }
 
   @Override
-  public void read(int offset, byte[] buffer, int bufferOffset, int length) {
+  public int read(int offset, byte[] buffer, int bufferOffset, int length) {
     System.arraycopy(mBuf, offset, buffer, bufferOffset, length);
+    return length;
   }
 
   @Override

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/NativePooledByteBuffer.java
Patch:
@@ -54,12 +54,12 @@ public synchronized byte read(int offset) {
   }
 
   @Override
-  public synchronized void read(int offset, byte[] buffer, int bufferOffset, int length) {
+  public synchronized int read(int offset, byte[] buffer, int bufferOffset, int length) {
     ensureValid();
     // We need to make sure that PooledByteBuffer's length is preserved.
     // Al the other bounds checks will be performed by NativeMemoryChunk.read method.
     Preconditions.checkArgument(offset + length <= mSize);
-    mBufRef.get().read(offset, buffer, bufferOffset, length);
+    return mBufRef.get().read(offset, buffer, bufferOffset, length);
   }
 
   @Override

File: animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
Patch:
@@ -233,10 +233,7 @@ private void renderImageDoesNotSupportScaling(Canvas canvas, AnimatedImageFrame
       mRenderSrcRect.set(0, 0, frameWidth, frameHeight);
       mRenderDstRect.set(0, 0, frameWidth, frameHeight);
 
-      float xScale = (float) mRenderedBounds.width() / (float) mAnimatedImage.getWidth();
-      float yScale = (float) mRenderedBounds.height() / (float) mAnimatedImage.getHeight();
       canvas.save();
-      canvas.scale(xScale, yScale);
       canvas.translate(xOffset, yOffset);
       canvas.drawBitmap(mTempBitmap, mRenderSrcRect, mRenderDstRect, null);
       canvas.restore();

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
Patch:
@@ -278,7 +278,7 @@ public void setHierarchy(@Nullable DraweeHierarchy hierarchy) {
 
   @Override
   public boolean isSameImageRequest(@Nullable DraweeController other) {
-    if (other instanceof PipelineDraweeController) {
+    if (mCacheKey != null && other instanceof PipelineDraweeController) {
       return Objects.equal(mCacheKey, ((PipelineDraweeController) other).getCacheKey());
     }
     return false;

File: drawee/src/main/java/com/facebook/drawee/debug/DebugControllerOverlayDrawable.java
Patch:
@@ -304,7 +304,7 @@ int determineOverlayColor(
     return OVERLAY_COLOR_IMAGE_NOT_OK;
   }
 
-  public void setFinalImageTimeMs(int finalImageTimeMs) {
+  public void setFinalImageTimeMs(long finalImageTimeMs) {
     mFinalImageTimeMs = finalImageTimeMs;
   }
 

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
Patch:
@@ -159,6 +159,9 @@ public BUILDER setFirstAvailableImageRequests(REQUEST[] firstAvailableImageReque
   public BUILDER setFirstAvailableImageRequests(
       REQUEST[] firstAvailableImageRequests,
       boolean tryCacheOnlyFirst) {
+    Preconditions.checkArgument(
+        firstAvailableImageRequests == null || firstAvailableImageRequests.length > 0,
+        "No requests specified!");
     mMultiImageRequests = firstAvailableImageRequests;
     mTryCacheOnlyFirst = tryCacheOnlyFirst;
     return getThis();

File: animated-gif/src/main/java/com/facebook/animated/gif/GifImage.java
Patch:
@@ -11,11 +11,11 @@
 
 import com.facebook.common.internal.DoNotStrip;
 import com.facebook.common.internal.Preconditions;
-import com.facebook.common.soloader.SoLoaderShim;
 import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo;
 import com.facebook.imagepipeline.animated.base.AnimatedDrawableFrameInfo.BlendOperation;
 import com.facebook.imagepipeline.animated.base.AnimatedImage;
 import com.facebook.imagepipeline.animated.factory.AnimatedImageDecoder;
+import com.facebook.soloader.SoLoader;
 import java.nio.ByteBuffer;
 import javax.annotation.concurrent.ThreadSafe;
 
@@ -41,7 +41,7 @@ public class GifImage implements AnimatedImage, AnimatedImageDecoder {
   private static synchronized void ensure() {
     if (!sInitialized) {
       sInitialized = true;
-      SoLoaderShim.loadLibrary("gifimage");
+      SoLoader.loadLibrary("gifimage");
     }
   }
 

File: imagepipeline-base/src/test/java/com/facebook/imageformat/ImageFormatCheckerTest.java
Patch:
@@ -12,7 +12,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 
-import com.facebook.common.soloader.SoLoaderShim;
+import com.facebook.soloader.SoLoader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -29,7 +29,7 @@
 public class ImageFormatCheckerTest {
 
   static {
-    SoLoaderShim.setInTestMode();
+    SoLoader.setInTestMode();
   }
 
   @Test

File: imagepipeline/src/main/java/com/facebook/imagepipeline/nativecode/ImagePipelineNativeLoader.java
Patch:
@@ -9,7 +9,7 @@
 
 package com.facebook.imagepipeline.nativecode;
 
-import com.facebook.common.soloader.SoLoaderShim;
+import com.facebook.soloader.SoLoader;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -39,6 +39,6 @@ public class ImagePipelineNativeLoader {
   }
 
   public static void load() {
-    SoLoaderShim.loadLibrary("imagepipeline");
+    SoLoader.loadLibrary("imagepipeline");
   }
 }

File: imagepipeline/src/test/java/com/facebook/imagepipeline/platform/GingerbreadPurgeableDecoderTest.java
Patch:
@@ -21,13 +21,13 @@
 import com.facebook.common.memory.PooledByteBuffer;
 import com.facebook.common.references.CloseableReference;
 import com.facebook.common.references.ResourceReleaser;
-import com.facebook.common.soloader.SoLoaderShim;
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.memory.BitmapCounter;
 import com.facebook.imagepipeline.memory.BitmapCounterProvider;
 import com.facebook.imagepipeline.nativecode.Bitmaps;
 import com.facebook.imagepipeline.testing.MockBitmapFactory;
 import com.facebook.imagepipeline.testing.TrivialPooledByteBuffer;
+import com.facebook.soloader.SoLoader;
 import java.io.FileDescriptor;
 import org.junit.Before;
 import org.junit.Rule;
@@ -56,7 +56,7 @@ public class GingerbreadPurgeableDecoderTest {
   public PowerMockRule rule = new PowerMockRule();
 
   static {
-    SoLoaderShim.setInTestMode();
+    SoLoader.setInTestMode();
   }
 
   protected static final int IMAGE_SIZE = 5;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java
Patch:
@@ -29,7 +29,6 @@
 import com.facebook.common.memory.PooledByteBuffer;
 import com.facebook.common.references.CloseableReference;
 import com.facebook.common.references.ResourceReleaser;
-import com.facebook.common.soloader.SoLoaderShim;
 import com.facebook.imagepipeline.common.TooManyBitmapsException;
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.memory.BitmapCounter;
@@ -38,6 +37,7 @@
 import com.facebook.imagepipeline.nativecode.Bitmaps;
 import com.facebook.imagepipeline.testing.MockBitmapFactory;
 import com.facebook.imagepipeline.testing.TrivialPooledByteBuffer;
+import com.facebook.soloader.SoLoader;
 import java.util.ConcurrentModificationException;
 import org.junit.Before;
 import org.junit.Rule;
@@ -70,7 +70,7 @@ public class KitKatPurgeableDecoderTest {
   public PowerMockRule rule = new PowerMockRule();
 
   static {
-    SoLoaderShim.setInTestMode();
+    SoLoader.setInTestMode();
   }
 
   protected static final int IMAGE_SIZE = 5;

File: static-webp/src/main/java/com/facebook/imagepipeline/nativecode/StaticWebpNativeLoader.java
Patch:
@@ -10,7 +10,7 @@
 package com.facebook.imagepipeline.nativecode;
 
 import android.os.Build;
-import com.facebook.common.soloader.SoLoaderShim;
+import com.facebook.soloader.SoLoader;
 
 /**
  * Single place responsible for ensuring that `static-webp.so` is loaded
@@ -26,12 +26,12 @@ public static synchronized void ensure() {
       // library
       if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.JELLY_BEAN) {
         try {
-          SoLoaderShim.loadLibrary("fb_jpegturbo");
+          SoLoader.loadLibrary("fb_jpegturbo");
         } catch (UnsatisfiedLinkError error) {
           // Head in the sand
         }
       }
-      SoLoaderShim.loadLibrary("static-webp");
+      SoLoader.loadLibrary("static-webp");
       sInitialized = true;
     }
   }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/postprocessor/BenchmarkPostprocessorForManualBitmapHandling.java
Patch:
@@ -38,7 +38,7 @@ public BenchmarkPostprocessorForManualBitmapHandling(
   public CloseableReference<Bitmap> process(
       Bitmap sourceBitmap, PlatformBitmapFactory bitmapFactory) {
     long startTime = System.nanoTime();
-    CloseableReference<Bitmap> result = super.process(sourceBitmap, bitmapFactory);
+    CloseableReference<Bitmap> result = mPostprocessor.process(sourceBitmap, bitmapFactory);
     showDuration(System.nanoTime() - startTime);
     return result;
   }

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/EncodedImage.java
Patch:
@@ -402,7 +402,6 @@ public void copyMetaDataFrom(EncodedImage encodedImage) {
    */
   public static boolean isMetaDataAvailable(EncodedImage encodedImage) {
     return encodedImage.mRotationAngle >= 0
-        && encodedImage.mExifOrientation > 0
         && encodedImage.mWidth >= 0
         && encodedImage.mHeight >= 0;
   }

File: samples/comparison/src/main/java/com/facebook/samples/comparison/MainActivity.java
Patch:
@@ -27,7 +27,7 @@
 import android.provider.MediaStore;
 import android.support.v4.app.ActivityCompat;
 import android.support.v4.content.ContextCompat;
-import android.support.v7.app.ActionBarActivity;
+import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.GridLayoutManager;
 import android.support.v7.widget.RecyclerView;
 import android.view.Display;
@@ -58,7 +58,7 @@
 import java.util.List;
 import java.util.Locale;
 
-public class MainActivity extends ActionBarActivity {
+public class MainActivity extends AppCompatActivity {
 
   private static final String TAG = "FrescoSample";
 

File: samples/zoomable/src/main/java/com/facebook/samples/zoomable/ZoomableDraweeView.java
Patch:
@@ -358,8 +358,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
   private void onFinalImageSet() {
     FLog.v(getLogTag(), "onFinalImageSet: view %x", this.hashCode());
     if (!mZoomableController.isEnabled()) {
-      updateZoomableControllerBounds();
       mZoomableController.setEnabled(true);
+      updateZoomableControllerBounds();
     }
   }
 

File: animated-base/src/main/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache.java
Patch:
@@ -148,7 +148,7 @@ public synchronized void onFramePrepared(
   }
 
   @Override
-  public void setFrameCacheListener(FrameCacheListener frameCacheListener) {
+  public void setFrameCacheListener(BitmapFrameCache.FrameCacheListener frameCacheListener) {
     // TODO (t15557326) Not supported for now
   }
 

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
Patch:
@@ -137,7 +137,7 @@ private CacheKey getCacheKey() {
   protected DataSource<CloseableReference<CloseableImage>> getDataSourceForRequest(
       ImageRequest imageRequest,
       Object callerContext,
-      CacheLevel cacheLevel) {
+      AbstractDraweeControllerBuilder.CacheLevel cacheLevel) {
     return mImagePipeline.fetchDecodedImage(
         imageRequest,
         callerContext,

File: drawee/src/main/java/com/facebook/drawee/drawable/ForwardingDrawable.java
Patch:
@@ -123,7 +123,7 @@ protected void onBoundsChange(Rect bounds) {
   }
 
   @Override
-  public ConstantState getConstantState() {
+  public Drawable.ConstantState getConstantState() {
     return mCurrentDelegate.getConstantState();
   }
 

File: static-webp/src/main/java/com/facebook/webpsupport/WebpBitmapFactoryImpl.java
Patch:
@@ -98,7 +98,7 @@ private static void setDensityFromOptions(Bitmap outputBitmap, BitmapFactory.Opt
   }
 
   @Override
-  public void setWebpErrorLogger(WebpErrorLogger webpErrorLogger) {
+  public void setWebpErrorLogger(WebpBitmapFactory.WebpErrorLogger webpErrorLogger) {
     this.mWebpErrorLogger = webpErrorLogger;
   }
 

File: fbcore/src/main/java/com/facebook/widget/text/span/BetterImageSpan.java
Patch:
@@ -108,7 +108,7 @@ public int getSize(
     }
 
     if (offsetBelow > fontMetrics.bottom) {
-      fontMetrics.descent = offsetBelow;
+      fontMetrics.bottom = offsetBelow;
     }
 
     return mWidth;

File: fbcore/src/main/java/com/facebook/common/internal/ImmutableSet.java
Patch:
@@ -29,7 +29,7 @@ public static <E> ImmutableSet<E> copyOf(Set<E> set) {
   }
 
   public static <E> ImmutableSet<E> of(E... elements) {
-    HashSet<E> set = new HashSet<>();
+    HashSet<E> set = new HashSet<>(elements.length);
     Collections.addAll(set, elements);
     return new ImmutableSet<>(set);
   }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/ShowcaseApplication.java
Patch:
@@ -63,7 +63,7 @@ public Boolean get() {
                   }
                 })
             .experiment()
-            .setBitmapPrepareToDraw(true, 0, Integer.MAX_VALUE)
+            .setBitmapPrepareToDraw(true, 0, Integer.MAX_VALUE, true)
             .experiment()
             .setSmartResizingEnabled(Suppliers.BOOLEAN_TRUE)
             .build();

File: samples/zoomableapp/src/main/java/com/facebook/samples/zoomableapp/MyPagerAdapter.java
Patch:
@@ -64,6 +64,7 @@ public Object instantiateItem(ViewGroup container, int position) {
     zoomableDraweeView.setTapListener(new DoubleTapGestureListener(zoomableDraweeView));
     DraweeController controller = Fresco.newDraweeControllerBuilder()
       .setUri(SAMPLE_URIS[position % SAMPLE_URIS.length])
+      .setCallerContext("ZoomableApp-MyPagerAdapter")
       .build();
     zoomableDraweeView.setController(controller);
     page.requestLayout();

File: drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
Patch:
@@ -447,8 +447,9 @@ protected abstract DataSource<IMAGE> getDataSourceForRequest(
       final Object callerContext,
       final CacheLevel cacheLevel);
 
-  /** Concrete builder classes should override this method to return {#code this}. */
-  @ReturnsOwnership protected abstract BUILDER getThis();
+  protected final BUILDER getThis() {
+    return (BUILDER) this;
+  }
 
   public enum CacheLevel {
     /* Fetch (from the network or local storage) */

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/ShowcaseApplication.java
Patch:
@@ -14,6 +14,7 @@
 import android.app.Application;
 import android.content.Context;
 import com.facebook.common.internal.Supplier;
+import com.facebook.common.internal.Suppliers;
 import com.facebook.common.logging.FLog;
 import com.facebook.drawee.backends.pipeline.DraweeConfig;
 import com.facebook.drawee.backends.pipeline.Fresco;
@@ -64,7 +65,7 @@ public Boolean get() {
             .experiment()
             .setBitmapPrepareToDraw(true, 0, Integer.MAX_VALUE)
             .experiment()
-            .setSmartResizingEnabled(true)
+            .setSmartResizingEnabled(Suppliers.BOOLEAN_TRUE)
             .build();
 
     ImagePipelineConfig.getDefaultImageRequestConfig().setProgressiveRenderingEnabled(true);

File: drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java
Patch:
@@ -255,6 +255,8 @@ private static ScaleType getScaleTypeFromXml(
         return ScaleType.CENTER_CROP;
       case 7: // focusCrop
         return ScaleType.FOCUS_CROP;
+      case 8: // fitBottomStart
+        return ScaleType.FIT_BOTTOM_START;
       default:
         // this method is supposed to be called only when XML attribute is specified.
         throw new RuntimeException("XML attribute not specified!");

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -245,11 +245,11 @@ public void draw(Canvas canvas) {
   }
 
   /**
-   * If both the radii and border width are zero, there is nothing to round.
+   * If both the radii and border width are zero or bitmap is null, there is nothing to round.
    */
   @VisibleForTesting
   boolean shouldRound() {
-    return mIsCircle || mRadiiNonZero || mBorderWidth > 0;
+    return (mIsCircle || mRadiiNonZero || mBorderWidth > 0) && getBitmap() != null;
   }
 
   private void updateTransform() {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolParams.java
Patch:
@@ -40,7 +40,7 @@
  * <p>
  * {@link #minBucketSize}
  * This represents the minimum size of the buckets in the pool. This assures that all buckets can
- * hold any element smaller or equal to this size.
+ * hold any element larger or equal to this size.
  * <p>
  * {@link #maxBucketSize}
  * This represents the maximum size of the buckets in the pool. This restricts all buckets to only

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/DefaultDiskStorage.java
Patch:
@@ -576,7 +576,7 @@ private FileInfo getShardFileInfo(File file) {
       FileType.CONTENT,
       FileType.TEMP,
   })
-  private @interface FileType {
+  public @interface FileType {
     String CONTENT = CONTENT_FILE_EXTENSION;
     String TEMP = TEMP_FILE_EXTENSION;
   }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/transition/DraweeTransitionFragment.java
Patch:
@@ -44,6 +44,8 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
 
     final SimpleDraweeView simpleDraweeView =
         (SimpleDraweeView) view.findViewById(R.id.drawee_view);
+    // You have to enable legacy visibility handling for the start view in order for this to work
+    simpleDraweeView.setLegacyVisibilityHandlingEnabled(true);
     simpleDraweeView.setImageURI(imageUri);
     simpleDraweeView.setOnClickListener(new View.OnClickListener() {
       @Override

File: animated-drawable/src/main/java/com/facebook/fresco/animation/backend/AnimationBackend.java
Patch:
@@ -45,7 +45,7 @@ public interface AnimationBackend extends AnimationInformation {
    *
    * @param alpha the alpha value between 0 and 255
    */
-  void setAlpha(@IntRange(from=0,to=255) int alpha);
+  void setAlpha(@IntRange(from = 0, to = 255) int alpha);
 
   /**
    * The color filter to be used for drawing frames in {@link #drawFrame(Drawable, Canvas, int)}
@@ -91,8 +91,8 @@ public interface AnimationBackend extends AnimationInformation {
 
   /**
    * Get the size of the animation backend.
-   * @return the size in bytes
    *
+   * @return the size in bytes
    */
   int getSizeInBytes();
 

File: animated-drawable/src/main/java/com/facebook/fresco/animation/backend/AnimationBackendDelegate.java
Patch:
@@ -31,7 +31,7 @@ public class AnimationBackendDelegate<T extends AnimationBackend> implements Ani
   private T mAnimationBackend;
 
   // Animation backend parameters
-  @IntRange(from=-1,to=255)
+  @IntRange(from = -1, to = 255)
   private int mAlpha = ALPHA_UNSET;
   @Nullable
   private ColorFilter mColorFilter;
@@ -63,7 +63,7 @@ public boolean drawFrame(Drawable parent, Canvas canvas, int frameNumber) {
   }
 
   @Override
-  public void setAlpha(@IntRange(from=0,to=255) int alpha) {
+  public void setAlpha(@IntRange(from = 0, to = 255) int alpha) {
     if (mAnimationBackend != null) {
       mAnimationBackend.setAlpha(alpha);
     }

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
Patch:
@@ -233,7 +233,6 @@ private boolean drawFrameOrFallback(Canvas canvas, int frameNumber, @FrameType i
     }
   }
 
-
   @Override
   public void setAlpha(@IntRange(from = 0, to = 255) int alpha) {
     mPaint.setAlpha(alpha);

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapFrameCache.java
Patch:
@@ -23,6 +23,7 @@ interface FrameCacheListener {
 
     /**
      * Called when the frame for the given frame number has been put in the frame cache.
+     *
      * @param bitmapFrameCache the frame cache that holds the frame
      * @param frameNumber the cached frame number
      */

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/animator/AnimatedDrawable2ValueAnimatorHelper.java
Patch:
@@ -60,5 +60,6 @@ public void onAnimationUpdate(ValueAnimator animation) {
     };
   }
 
-  private AnimatedDrawable2ValueAnimatorHelper() {}
+  private AnimatedDrawable2ValueAnimatorHelper() {
+  }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -126,6 +126,7 @@ public ImagePipelineFactory(ImagePipelineConfig config) {
         config.getExecutorSupplier().forLightweightBackgroundTasks());
   }
 
+  @Nullable
   private AnimatedFactory getAnimatedFactory() {
     if (mAnimatedFactory == null) {
       mAnimatedFactory = AnimatedFactoryProvider.getAnimatedFactory(
@@ -137,7 +138,8 @@ private AnimatedFactory getAnimatedFactory() {
 
   @Nullable
   public DrawableFactory getAnimatedDrawableFactory(Context context) {
-    return getAnimatedFactory().getAnimatedDrawableFactory(context);
+    AnimatedFactory animatedFactory = getAnimatedFactory();
+    return animatedFactory == null ? null : animatedFactory.getAnimatedDrawableFactory(context);
   }
 
   public CountingMemoryCache<CacheKey, CloseableImage>

File: animated-drawable/src/main/java/com/facebook/fresco/animation/factory/ExperimentalAnimationFactory.java
Patch:
@@ -15,7 +15,7 @@
 import android.graphics.Rect;
 
 import com.facebook.common.time.MonotonicClock;
-import com.facebook.drawee.backends.pipeline.DrawableFactory;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.fresco.animation.backend.AnimationBackend;
 import com.facebook.fresco.animation.backend.AnimationBackendDelegateWithInactivityCheck;
 import com.facebook.fresco.animation.drawable.AnimatedDrawable2;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/factory/ExperimentalBitmapAnimationDrawableFactory.java
Patch:
@@ -19,7 +19,7 @@
 import com.facebook.cache.common.CacheKey;
 import com.facebook.common.internal.Supplier;
 import com.facebook.common.time.MonotonicClock;
-import com.facebook.drawee.backends.pipeline.DrawableFactory;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.fresco.animation.backend.AnimationBackend;
 import com.facebook.fresco.animation.backend.AnimationBackendDelegateWithInactivityCheck;
 import com.facebook.fresco.animation.bitmap.BitmapAnimationBackend;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/DraweeConfig.java
Patch:
@@ -14,6 +14,7 @@
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.Supplier;
 import com.facebook.common.internal.Suppliers;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 
 import java.util.ArrayList;
 import java.util.List;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
Patch:
@@ -32,6 +32,7 @@
 import com.facebook.drawee.interfaces.DraweeHierarchy;
 import com.facebook.drawee.interfaces.SettableDraweeHierarchy;
 import com.facebook.imagepipeline.cache.MemoryCache;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.CloseableStaticBitmap;
 import com.facebook.imagepipeline.image.EncodedImage;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
Patch:
@@ -27,6 +27,7 @@
 import com.facebook.imagepipeline.cache.CacheKeyFactory;
 import com.facebook.imagepipeline.common.RotationOptions;
 import com.facebook.imagepipeline.core.ImagePipeline;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.ImageInfo;
 import com.facebook.imagepipeline.request.ImageRequest;

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilderSupplier.java
Patch:
@@ -19,6 +19,7 @@
 import com.facebook.imagepipeline.core.ImagePipelineFactory;
 import com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory;
 import com.facebook.imagepipeline.animated.factory.AnimatedFactory;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 
 import java.util.Set;
 

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerFactory.java
Patch:
@@ -23,6 +23,7 @@
 import com.facebook.drawee.components.DeferredReleaser;
 import com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory;
 import com.facebook.imagepipeline.cache.MemoryCache;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imagepipeline.image.CloseableImage;
 
 import javax.annotation.Nullable;

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/drawable/DrawableFactory.java
Patch:
@@ -6,7 +6,7 @@
  * LICENSE file in the root directory of this source tree. An additional grant
  * of patent rights can be found in the PATENTS file in the same directory.
  */
-package com.facebook.drawee.backends.pipeline;
+package com.facebook.imagepipeline.drawable;
 
 import javax.annotation.Nullable;
 

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/color/ColorImageExample.java
Patch:
@@ -21,7 +21,7 @@
 import android.support.v4.graphics.ColorUtils;
 
 import com.facebook.common.internal.ByteStreams;
-import com.facebook.drawee.backends.pipeline.DrawableFactory;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imageformat.ImageFormatCheckerUtils;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/keyframes/KeyframesDecoderExample.java
Patch:
@@ -15,7 +15,7 @@
 import android.support.annotation.Nullable;
 
 import com.facebook.common.internal.Closeables;
-import com.facebook.drawee.backends.pipeline.DrawableFactory;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imageformat.ImageFormatCheckerUtils;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/override/ImageFormatOverrideExample.java
Patch:
@@ -29,12 +29,13 @@
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.common.ImageDecodeOptionsBuilder;
 import com.facebook.imagepipeline.decoder.ImageDecoder;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imagepipeline.request.ImageRequestBuilder;
 
 /**
  * Example that overrides the decoder for a given image request.
  *
- * If your decoder needs a custom {@link com.facebook.drawee.backends.pipeline.DrawableFactory}
+ * If your decoder needs a custom {@link DrawableFactory}
  * to render the image, don't forget to add it when you initialize Fresco.
  * For this color example, we add this factory in
  * {@link CustomImageFormatConfigurator#addCustomDrawableFactories(Context, DraweeConfig.Builder)}.

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
Patch:
@@ -17,7 +17,7 @@
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.PictureDrawable;
 
-import com.facebook.drawee.backends.pipeline.DrawableFactory;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imageformat.ImageFormatCheckerUtils;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java
Patch:
@@ -188,7 +188,7 @@ public void testDoesNotTransformIfMetadataAngleAndRequestedRotationHaveOppositeV
     whenRequestSpecificRotation(RotationOptions.ROTATE_270);
 
     provideFinalResult(DefaultImageFormats.JPEG, 400, 200, 90);
-    verifyFinalResultPassedThroughUnchanged();
+    verifyAFinalResultPassedThrough();
     verifyZeroJpegTranscoderInteractions();
   }
 

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/ShowcaseApplication.java
Patch:
@@ -59,6 +59,7 @@ public Boolean get() {
           }
         })
         .experiment().setMediaIdExtractor(new ShowcaseMediaIdExtractor())
+        .experiment().setBitmapPrepareToDraw(true)
         .build();
 
     DraweeConfig.Builder draweeConfigBuilder = DraweeConfig.newBuilder();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapPool.java
Patch:
@@ -45,7 +45,7 @@ public BitmapPool(
   }
 
   /**
-   * Allocate a bitmap that has a backing memory allocacation of 'size' bytes.
+   * Allocate a bitmap that has a backing memory allocation of 'size' bytes.
    * This is configuration agnostic so the size is the actual size in bytes of the bitmap.
    * @param size the 'size' in bytes of the bitmap
    * @return a new bitmap with the specified size in memory

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducerTest.java
Patch:
@@ -148,7 +148,7 @@ private TestLocalExifThumbnailProducer(
     }
 
     @Override
-    ExifInterface getExifInterface(Uri uri) throws IOException {
+    ExifInterface getExifInterface(Uri uri) {
       if (uri.equals(mUri)) {
         return mExifInterface;
       }

File: animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCacheTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -30,6 +31,7 @@
  * Tests {@link FrescoFrameCache}.
  */
 @RunWith(PowerMockRunner.class)
+@PrepareForTest(CloseableReference.class)
 public class FrescoFrameCacheTest {
 
   @Mock public CloseableReference<CloseableImage> mImageReference;

File: animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/preparation/DefaultBitmapFramePreparerTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -37,6 +38,7 @@
  * Tests {@link DefaultBitmapFramePreparer}.
  */
 @RunWith(PowerMockRunner.class)
+@PrepareForTest(CloseableReference.class)
 public class DefaultBitmapFramePreparerTest {
 
   private static final int FRAME_COUNT = 10;

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCache.java
Patch:
@@ -192,7 +192,7 @@ static CloseableReference<Bitmap> convertToBitmapReferenceAndClose(
           closeableImage.get() instanceof CloseableStaticBitmap) {
 
         CloseableStaticBitmap closeableStaticBitmap = (CloseableStaticBitmap) closeableImage.get();
-        if (closeableStaticBitmap != null && !closeableStaticBitmap.isClosed()) {
+        if (closeableStaticBitmap != null) {
           // We return a clone of the underlying bitmap reference that has to be manually closed
           // and then close the passed CloseableStaticBitmap in order to preserve correct
           // cache size calculations.

File: animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/cache/FrescoFrameCacheTest.java
Patch:
@@ -106,6 +106,7 @@ public void testExtractAndClose_whenBitmapReferenceInvalid_thenReturnReference()
   public void testExtractAndClose_whenCloseableStaticBitmapClosed_thenReturnNull()
       throws Exception {
     when(mCloseableStaticBitmap.isClosed()).thenReturn(true);
+    when(mCloseableStaticBitmap.cloneUnderlyingBitmapReference()).thenReturn(null);
 
     CloseableReference<Bitmap> extractedReference =
         FrescoFrameCache.convertToBitmapReferenceAndClose(mImageReference);

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/BitmapAnimationDebugFragment.java
Patch:
@@ -255,6 +255,7 @@ public void setFrameType(boolean active, @BitmapAnimationBackend.FrameType int f
           frameColor = mFrameFallbackColor;
           text = "fallback frame";
           break;
+        case BitmapAnimationBackend.FRAME_TYPE_UNKNOWN:
         default:
           text = "unknown";
           frameColor = mFrameUnknownColor;

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/DebugBitmapAnimationFrameListener.java
Patch:
@@ -90,6 +90,7 @@ private void increaseFrameTypeCount(@BitmapAnimationBackend.FrameType int frameT
       case BitmapAnimationBackend.FRAME_TYPE_FALLBACK:
         mFallbackCount++;
         break;
+      case BitmapAnimationBackend.FRAME_TYPE_UNKNOWN:
       default:
         mUnknownCount++;
         break;
@@ -106,6 +107,7 @@ private static String getFrameTypeName(@BitmapAnimationBackend.FrameType int fra
         return "created";
       case BitmapAnimationBackend.FRAME_TYPE_FALLBACK:
         return "fallback";
+      case BitmapAnimationBackend.FRAME_TYPE_UNKNOWN:
       default:
         return "unknown";
     }

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapFrameCache.java
Patch:
@@ -94,7 +94,7 @@ interface FrameCacheListener {
   void onFrameRendered(
       int frameNumber,
       CloseableReference<Bitmap> bitmapReference,
-      int frameType);
+      @BitmapAnimationBackend.FrameType int frameType);
 
   /**
    * Callback when a bitmap reference for a given frame has been prepared for future rendering.

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/NaiveCacheAllFramesCachingBackend.java
Patch:
@@ -80,7 +80,7 @@ public synchronized void clear() {
   public synchronized void onFrameRendered(
       int frameNumber,
       CloseableReference<Bitmap> bitmapReference,
-      int frameType) {
+      @BitmapAnimationBackend.FrameType int frameType) {
       mBitmapSparseArray.put(frameNumber, CloseableReference.cloneOrNull(bitmapReference));
     if (mFrameCacheListener != null) {
       mFrameCacheListener.onFrameCached(this, frameNumber);

File: imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptionsBuilder.java
Patch:
@@ -190,8 +190,9 @@ public Bitmap.Config getBitmapConfig() {
    * Sets which config static image will be decode with;
    * @param bitmapConfig which config static image will be decode with;
    */
-  public void setBitmapConfig(Bitmap.Config bitmapConfig) {
+  public ImageDecodeOptionsBuilder setBitmapConfig(Bitmap.Config bitmapConfig) {
     mBitmapConfig = bitmapConfig;
+    return this;
   }
 
   /**

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/ExampleBitmapAnimationFactory.java
Patch:
@@ -26,6 +26,7 @@
 import com.facebook.fresco.animation.bitmap.BitmapAnimationBackend;
 import com.facebook.fresco.animation.bitmap.BitmapFrameCache;
 import com.facebook.fresco.animation.bitmap.BitmapFrameRenderer;
+import com.facebook.fresco.animation.bitmap.preparation.FixedNumberBitmapFramePreparationStrategy;
 import com.facebook.imagepipeline.cache.CountingMemoryCache;
 import com.facebook.imagepipeline.image.CloseableImage;
 
@@ -43,7 +44,7 @@ public static BitmapAnimationBackend createColorBitmapAnimationBackend(
         bitmapFrameCache,
         new ColorListAnimationInformation(colors, animationDurationMs),
         new ColorAndFrameNumberRenderer(colors),
-        null,
+        new FixedNumberBitmapFramePreparationStrategy(3),
         null);
     bitmapAnimationBackend.setFrameListener(new DebugBitmapAnimationFrameListener());
     return bitmapAnimationBackend;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/DiskStorageCacheFactory.java
Patch:
@@ -21,6 +21,7 @@
  * Factory for the default implementation of the FileCache.
  */
 public class DiskStorageCacheFactory implements FileCacheFactory {
+
   private DiskStorageFactory mDiskStorageFactory;
 
   public DiskStorageCacheFactory(DiskStorageFactory diskStorageFactory) {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/DiskStorageFactory.java
Patch:
@@ -16,5 +16,6 @@
  * Used by ImagePipelineConfig/Factory
  */
 public interface DiskStorageFactory {
+
   DiskStorage get(DiskCacheConfig diskCacheConfig);
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/FileCacheFactory.java
Patch:
@@ -17,5 +17,6 @@
  * Used by ImagePipelineConfig/Factory
  */
 public interface FileCacheFactory {
+
   FileCache get(DiskCacheConfig diskCacheConfig);
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
Patch:
@@ -16,10 +16,8 @@
 
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.VisibleForTesting;
-import com.facebook.common.media.MediaUtils;
 import com.facebook.common.memory.PooledByteBuffer;
 import com.facebook.common.references.CloseableReference;
-import com.facebook.common.util.UriUtil;
 import com.facebook.common.webp.WebpSupportStatus;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.EncodedImage;

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/BitmapAnimationDebugFragment.java
Patch:
@@ -30,6 +30,7 @@
 import com.facebook.fresco.animation.bitmap.BitmapAnimationBackend;
 import com.facebook.fresco.animation.bitmap.BitmapFrameCache;
 import com.facebook.fresco.animation.drawable.AnimatedDrawable2;
+import com.facebook.fresco.animation.drawable.AnimatedDrawable2DebugDrawListener;
 import com.facebook.samples.animation2.R;
 import com.facebook.samples.animation2.SampleData;
 import com.facebook.samples.animation2.utils.AnimationBackendUtils;
@@ -134,6 +135,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     mFrameInformationContainer = (LinearLayout) view.findViewById(R.id.frame_information);
 
     mAnimatedDrawable = new AnimatedDrawable2();
+    mAnimatedDrawable.setDrawListener(new AnimatedDrawable2DebugDrawListener());
 
     mAnimationControlsManager = new AnimationControlsManager(
         mAnimatedDrawable,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
Patch:
@@ -24,6 +24,7 @@
 import com.facebook.common.references.CloseableReference;
 import com.facebook.common.util.ExceptionWithNoStacktrace;
 import com.facebook.common.util.UriUtil;
+import com.facebook.imageformat.DefaultImageFormats;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.common.ResizeOptions;
@@ -417,7 +418,8 @@ public NetworkImagesProgressiveDecoder(
     @Override
     protected synchronized boolean updateDecodeJob(EncodedImage encodedImage, boolean isLast) {
       boolean ret = super.updateDecodeJob(encodedImage, isLast);
-      if (!isLast && EncodedImage.isValid(encodedImage)) {
+      if (!isLast && EncodedImage.isValid(encodedImage) &&
+          encodedImage.getImageFormat() == DefaultImageFormats.JPEG) {
         if (!mProgressiveJpegParser.parseMoreData(encodedImage)) {
           return false;
         }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MediaVariationsIndex.java
Patch:
@@ -9,8 +9,6 @@
 
 package com.facebook.imagepipeline.producers;
 
-import java.util.List;
-
 import com.facebook.cache.common.CacheKey;
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.request.ImageRequest;
@@ -20,7 +18,9 @@
 
 public interface MediaVariationsIndex {
 
-  Task<List<MediaVariations.Variant>> getCachedVariants(String mediaId);
+  Task<MediaVariations> getCachedVariants(
+      String mediaId,
+      MediaVariations.Builder mediaVariationsBuilder);
 
   void saveCachedVariant(
       String mediaId,

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
Patch:
@@ -83,7 +83,7 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     initColors();
 
     final Spinner scaleType = (Spinner) view.findViewById(R.id.scaleType);
-    final SimpleScaleTypeAdapter scaleTypeAdapter = new SimpleScaleTypeAdapter();
+    final SimpleScaleTypeAdapter scaleTypeAdapter = SimpleScaleTypeAdapter.createForAllScaleTypes();
     scaleType.setAdapter(scaleTypeAdapter);
     scaleType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
       @Override

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeScaleTypeFragment.java
Patch:
@@ -15,7 +15,6 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -75,7 +74,7 @@ public void onClick(View v) {
 
     changeMainDraweeUri(URI_1);
 
-    final SimpleScaleTypeAdapter adapter = new SimpleScaleTypeAdapter();
+    final SimpleScaleTypeAdapter adapter = SimpleScaleTypeAdapter.createForAllScaleTypes();
     mSpinner.setAdapter(adapter);
     mSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
       @Override

File: imagepipeline/src/main/java/com/facebook/imagepipeline/nativecode/ImagePipelineNativeLoader.java
Patch:
@@ -40,6 +40,7 @@ public class ImagePipelineNativeLoader {
   }
 
   public static void load() {
+    SoLoaderShim.loadLibrary("fb_jpegturbo");
     SoLoaderShim.loadLibrary("imagepipeline");
   }
 }

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/DiskStorageCache.java
Patch:
@@ -72,7 +72,6 @@ public class DiskStorageCache implements FileCache, DiskTrimmable {
   // All resourceId stored on disk (if any).
   @VisibleForTesting final Set<String> mResourceIndex;
 
-  @GuardedBy("mLock")
   private long mCacheSizeLastUpdateTime;
 
   private final long mCacheSizeLimitMinimum;
@@ -199,6 +198,7 @@ public void run() {
           synchronized (mLock) {
             maybeUpdateFileCacheSize();
           }
+          mIndexReady = true;
           mCountDownLatch.countDown();
         }
       });
@@ -748,8 +748,6 @@ private boolean maybeUpdateFileCacheSizeAndIndex() {
       }
       if (mCacheStats.getCount() != count || mCacheStats.getSize() != size) {
         if (mIndexPopulateAtStartupEnabled && mResourceIndex != tempResourceIndex) {
-          mIndexReady = true;
-        } else if (mIndexPopulateAtStartupEnabled) {
           mResourceIndex.clear();
           mResourceIndex.addAll(tempResourceIndex);
         }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRecyclerViewFragment.java
Patch:
@@ -102,7 +102,7 @@ public SimpleAdapter(List<Uri> uris) {
     @Override
     public SimpleViewHolder onCreateViewHolder(
         ViewGroup parent,
-        int viewType) {`
+        int viewType) {
       View itemView = LayoutInflater.from(
           parent.getContext()).inflate(R.layout.drawee_recycler_item, parent, false);
       return new SimpleViewHolder(itemView);

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/MainActivity.java
Patch:
@@ -186,7 +186,8 @@ private void handleNavigationItemClick(int itemId) {
         fragment = new SettingsFragment();
         break;
       default:
-        throw new IllegalArgumentException("No example with this id!");
+        // Default to the welcome fragment
+        fragment = new WelcomeFragment();
     }
     showFragment(fragment);
 

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/NaiveCacheAllFramesCachingBackend.java
Patch:
@@ -72,6 +72,7 @@ public synchronized void clear() {
         mFrameCacheListener.onFrameEvicted(this, mBitmapSparseArray.keyAt(i));
       }
     }
+    mBitmapSparseArray.clear();
   }
 
   @Override

File: drawee/src/main/java/com/facebook/drawee/view/DraweeHolder.java
Patch:
@@ -318,6 +318,6 @@ public String toString() {
   }
 
   private boolean isControllerValid() {
-    return mController != null && mController.getHierarchy() == getHierarchy();
+    return mController != null && mController.getHierarchy() == mHierarchy;
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
Patch:
@@ -187,11 +187,13 @@ private static void doTranscode(
             imageInputStream,
             outputStream,
             DEFAULT_JPEG_QUALITY);
+      encodedImage.setImageFormat(DefaultImageFormats.JPEG);
     } else if (imageFormat == DefaultImageFormats.WEBP_LOSSLESS ||
         imageFormat == DefaultImageFormats.WEBP_EXTENDED_WITH_ALPHA) {
       // In this case we always transcode to PNG
       WebpTranscoderFactory.getWebpTranscoder()
           .transcodeWebpToPng(imageInputStream, outputStream);
+      encodedImage.setImageFormat(DefaultImageFormats.PNG);
     } else {
       throw new IllegalArgumentException("Wrong image format");
     }

File: drawee-span/src/main/java/com/facebook/drawee/span/SimpleDraweeSpanTextView.java
Patch:
@@ -88,7 +88,7 @@ public void onStartTemporaryDetach() {
   public void setDraweeSpanStringBuilder(DraweeSpanStringBuilder draweeSpanStringBuilder) {
     // setText will trigger onTextChanged, which will clean up the old draweeSpanStringBuilder
     // if necessary
-    setText(draweeSpanStringBuilder);
+    setText(draweeSpanStringBuilder, BufferType.SPANNABLE);
     mDraweeStringBuilder = draweeSpanStringBuilder;
     if (mDraweeStringBuilder != null && mIsAttached) {
       mDraweeStringBuilder.onAttachToView(this);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
Patch:
@@ -300,7 +300,7 @@ private synchronized Producer<Void> getLocalFileFetchToEncodedMemoryPrefetchSequ
     if (mLocalFileFetchToEncodedMemoryPrefetchSequence == null) {
       mLocalFileFetchToEncodedMemoryPrefetchSequence =
           ProducerFactory.newSwallowResultProducer(
-              getBackgroundNetworkFetchToEncodedMemorySequence());
+              getBackgroundLocalFileFetchToEncodeMemorySequence());
     }
     return mLocalFileFetchToEncodedMemoryPrefetchSequence;
   }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
Patch:
@@ -147,6 +147,7 @@ private void findDrawees(View view) {
     mDraweeFancy = (SimpleDraweeView) view.findViewById(R.id.drawee_fancy);
   }
 
+  @SuppressWarnings("ResourceType")
   private void initColors() {
     final TypedArray attrs =
         getActivity().getTheme().obtainStyledAttributes(R.style.AppTheme, new int[]{

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
Patch:
@@ -346,6 +346,6 @@ private static boolean shouldRotate(RotationOptions rotationOptions, EncodedImag
    * @return The ratio to use for software resize using the downsampling limitation
    */
   @VisibleForTesting static int calculateDownsampleNumerator(int downsampleRatio) {
-    return 8 / downsampleRatio;
+    return Math.max(1, JpegTranscoder.SCALE_DENOMINATOR / downsampleRatio);
   }
 }

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java
Patch:
@@ -460,6 +460,8 @@ public void testDownsamplingRatioUsage() {
     assertEquals(4, calculateDownsampleNumerator(2));
     assertEquals(2, calculateDownsampleNumerator(4));
     assertEquals(1, calculateDownsampleNumerator(8));
+    assertEquals(1, calculateDownsampleNumerator(16));
+    assertEquals(1, calculateDownsampleNumerator(32));
   }
 
   @Test

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
Patch:
@@ -164,9 +164,7 @@ public boolean isDiskCacheEnabled() {
 
   public synchronized File getSourceFile() {
     if (mSourceFile == null) {
-      String filepath = mSourceUri.toString();
-      filepath = filepath.substring("file://".length());
-      mSourceFile = new File(filepath);
+      mSourceFile = new File(mSourceUri.getPath());
     }
     return mSourceFile;
   }

File: samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/MainActivity.java
Patch:
@@ -166,7 +166,7 @@ private void handleNavigationItemClick(int itemId) {
   }
 
   /**
-   * Utility method to display a specific Fragent. If the tag is not null we add a backstack
+   * Utility method to display a specific Fragment. If the tag is not null we add a backstack
    *
    * @param fragment The Fragment to add
    */
@@ -178,5 +178,7 @@ private void showFragment(ShowcaseFragment fragment) {
       fragmentTransaction.addToBackStack(fragment.getBackstackTag());
     }
     fragmentTransaction.commit();
+
+    setTitle(fragment.getTitleId());
   }
 }

File: samples/animation2/src/main/java/com/facebook/samples/animation2/bitmap/ExampleBitmapAnimationFactory.java
Patch:
@@ -43,6 +43,7 @@ public static BitmapAnimationBackend createColorBitmapAnimationBackend(
         bitmapFrameCache,
         new ColorListAnimationInformation(colors, animationDurationMs),
         new ColorAndFrameNumberRenderer(colors));
+    bitmapAnimationBackend.setFrameListener(new DebugBitmapAnimationFrameListener());
     return bitmapAnimationBackend;
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
Patch:
@@ -164,7 +164,9 @@ public boolean isDiskCacheEnabled() {
 
   public synchronized File getSourceFile() {
     if (mSourceFile == null) {
-      mSourceFile = new File(mSourceUri.getPath());
+      String filepath = mSourceUri.toString();
+      filepath = filepath.substring("file://".length());
+      mSourceFile = new File(filepath);
     }
     return mSourceFile;
   }

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
Patch:
@@ -232,12 +232,12 @@ private void updateBitmapDimensions() {
     // Calculate the correct bitmap dimensions
     mBitmapWidth = mBitmapFrameRenderer.getIntrinsicWidth();
     if (mBitmapWidth == INTRINSIC_DIMENSION_UNSET) {
-      mBitmapWidth = mBounds == null ? 0 : mBounds.width();
+      mBitmapWidth = mBounds == null ? INTRINSIC_DIMENSION_UNSET : mBounds.width();
     }
 
     mBitmapHeight = mBitmapFrameRenderer.getIntrinsicHeight();
     if (mBitmapHeight == INTRINSIC_DIMENSION_UNSET) {
-      mBitmapHeight = mBounds == null ? 0 : mBounds.height();
+      mBitmapHeight = mBounds == null ? INTRINSIC_DIMENSION_UNSET : mBounds.height();
     }
   }
 

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
Patch:
@@ -235,7 +235,7 @@ private void updateBitmapDimensions() {
       mBitmapWidth = mBounds == null ? 0 : mBounds.width();
     }
 
-    mBitmapHeight = mBitmapFrameRenderer.getIntrinsicWidth();
+    mBitmapHeight = mBitmapFrameRenderer.getIntrinsicHeight();
     if (mBitmapHeight == INTRINSIC_DIMENSION_UNSET) {
       mBitmapHeight = mBounds == null ? 0 : mBounds.height();
     }

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilderSupplier.java
Patch:
@@ -62,7 +62,6 @@ public PipelineDraweeControllerBuilderSupplier(
     if (animatedFactory != null) {
       animatedDrawableFactory = animatedFactory.getAnimatedDrawableFactory(context);
     }
-    final boolean drawDebugOverlay = draweeConfig != null && draweeConfig.shouldDrawDebugOverlay();
     mPipelineDraweeControllerFactory = new PipelineDraweeControllerFactory(
         context.getResources(),
         DeferredReleaser.getInstance(),
@@ -72,7 +71,9 @@ public PipelineDraweeControllerBuilderSupplier(
         draweeConfig != null
                 ? draweeConfig.getCustomDrawableFactories()
                 : null,
-        drawDebugOverlay);
+        draweeConfig != null
+            ? draweeConfig.getDebugOverlayEnabledSupplier()
+            : null);
     mBoundControllerListeners = boundControllerListeners;
   }
 

File: imagepipeline-base/src/main/java/com/facebook/imageutils/BitmapUtil.java
Patch:
@@ -67,8 +67,8 @@ public static int getSizeInBytes(@Nullable Bitmap bitmap) {
       return bitmap.getByteCount();
     }
 
-    // Estimate for earlier platforms.
-    return bitmap.getWidth() * bitmap.getRowBytes();
+    // Estimate for earlier platforms. Same code as getByteCount() for Honeycomb.
+    return bitmap.getRowBytes() * bitmap.getHeight();
   }
 
   /**

File: animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/wrapper/AnimatedDrawableBackendAnimationInformation.java
Patch:
@@ -31,7 +31,7 @@ public int getFrameCount() {
 
   @Override
   public int getFrameDurationMs(int frameNumber) {
-    return mAnimatedDrawableBackend.getDurationMs();
+    return mAnimatedDrawableBackend.getDurationMsForFrame(frameNumber);
   }
 
   @Override

File: samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Const.java
Patch:
@@ -61,4 +61,6 @@ public final class Const {
   public static final String WEBP_SUPPORT_KEY = "webp_support_key";
 
   public static final String DECODE_CANCELLATION_KEY= "decode_cancellation_key";
+
+  public static final String DRAWEE_OVERLAY_KEY= "drawee_overlay_key";
 }

File: animated-drawable/src/main/java/com/facebook/fresco/animation/drawable/AnimatedDrawable2.java
Patch:
@@ -154,6 +154,7 @@ public void draw(Canvas canvas) {
     if (frameNumberToDraw == FrameScheduler.FRAME_NUMBER_DONE) {
       frameNumberToDraw = mAnimationBackend.getFrameCount() - 1;
       mAnimationListener.onAnimationStop(this);
+      mIsRunning = false;
     } else if (frameNumberToDraw == 0) {
       mAnimationListener.onAnimationRepeat(this);
     }

File: animated-drawable/src/main/java/com/facebook/fresco/animation/frame/DropFramesFrameScheduler.java
Patch:
@@ -30,7 +30,7 @@ public DropFramesFrameScheduler(AnimationBackend animationBackend) {
   public int getFrameNumberToRender(long animationTimeMs, long lastFrameTimeMs) {
     if (!isInfiniteAnimation()) {
       long loopCount = animationTimeMs / getLoopDurationMs();
-      if (loopCount > mAnimationBackend.getLoopCount()) {
+      if (loopCount >= mAnimationBackend.getLoopCount()) {
         return FRAME_NUMBER_DONE;
       }
     }

File: samples/animation2/src/main/java/com/facebook/samples/animation2/StandaloneActivity.java
Patch:
@@ -153,7 +153,7 @@ public int getFrameDurationMs(int frameNumber) {
 
     @Override
     public int getLoopCount() {
-      return LOOP_COUNT_INFINITE;
+      return 3;
     }
 
     @Override

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
Patch:
@@ -204,6 +204,7 @@ public String toString() {
         .add("priority", mRequestPriority)
         .add("resizeOptions", mResizeOptions)
         .add("rotationOptions", mRotationOptions)
+        .add("mediaVariations", mMediaVariations)
         .toString();
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/bitmaps/HoneycombBitmapCreator.java
Patch:
@@ -8,6 +8,7 @@
  */
 package com.facebook.imagepipeline.bitmaps;
 
+import android.annotation.TargetApi;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Color;
@@ -38,6 +39,7 @@ public HoneycombBitmapCreator(PoolFactory poolFactory) {
     mJpegGenerator = new EmptyJpegGenerator(poolFactory.getPooledByteBufferFactory());
   }
 
+  @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR1)
   @Override
   public Bitmap createNakedBitmap(
       int width, int height, Bitmap.Config bitmapConfig) {
@@ -68,6 +70,7 @@ public Bitmap createNakedBitmap(
           0,
           length,
           options);
+      bitmap.setHasAlpha(true);
       bitmap.eraseColor(Color.TRANSPARENT);
       return bitmap;
     } finally {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -341,7 +341,6 @@ private ProducerFactory getProducerFactory() {
               getImageDecoder(),
               mConfig.getProgressiveJpegConfig(),
               mConfig.isDownsampleEnabled(),
-              mConfig.getExperiments().getEnhancedWebpTranscodingType(),
               mConfig.isResizeAndRotateEnabledForNetwork(),
               mConfig.getExperiments().isDecodeCancellationEnabled(),
               mConfig.getExecutorSupplier(),

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MediaVariationsIndexDatabase.java
Patch:
@@ -31,7 +31,7 @@
 
 import bolts.Task;
 
-public class MediaVariationsIndexDatabase {
+public class MediaVariationsIndexDatabase implements MediaVariationsIndex {
   private static final String TAG = MediaVariationsIndexDatabase.class.getSimpleName();
 
   private static final String[] PROJECTION = {
@@ -56,6 +56,7 @@ public MediaVariationsIndexDatabase(
     mWriteExecutor = writeExecutor;
   }
 
+  @Override
   public Task<List<MediaVariations.Variant>> getCachedVariants(final String mediaId) {
     try {
       return Task.call(
@@ -119,6 +120,7 @@ private synchronized List<MediaVariations.Variant> getCachedVariantsSync(String
     }
   }
 
+  @Override
   public void saveCachedVariant(
       final String mediaId,
       final CacheKey cacheKey,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/MediaVariations.java
Patch:
@@ -30,8 +30,9 @@
  * <p> Even without explicitly including the variants, by using the same media ID across multiple
  * image requests, the pipeline may build up a knowledge of these and fulfil requests accordingly.
  *
- * <p> This will be ignored unless {@link com.facebook.imagepipeline.core.ImagePipelineExperiments#getMediaVariationsIndexEnabled()} is true in the image
- * pipeline config.
+ * <p> This extra functionality is currently only enabled if
+ * {@link com.facebook.imagepipeline.core.ImagePipelineExperiments#getMediaVariationsIndexEnabled()}
+ * is true in the image pipeline config.
  */
 @Immutable
 public final class MediaVariations {

File: drawee/src/main/java/com/facebook/drawee/drawable/ProgressBarDrawable.java
Patch:
@@ -171,7 +171,7 @@ private void drawHorizontalBar(Canvas canvas, int level, int color) {
 
   private void drawVerticalBar(Canvas canvas, int level, int color) {
     Rect bounds = getBounds();
-    int length = (bounds.width() - 2 * mPadding) * level / 10000;
+    int length = (bounds.height() - 2 * mPadding) * level / 10000;
     int xpos = bounds.left + mPadding;
     int ypos = bounds.top + mPadding;
     mRect.set(xpos, ypos, xpos + mBarWidth, ypos + length);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
Patch:
@@ -157,7 +157,7 @@ public ImageRequestBuilder setAutoRotateEnabled(boolean enabled) {
     if (enabled) {
       return setRotationOptions(RotationOptions.autoRotate());
     } else {
-      return setRotationOptions(RotationOptions.forceRotation(RotationOptions.NO_ROTATION));
+      return setRotationOptions(RotationOptions.disableRotation());
     }
   }
 

File: drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilderSupplier.java
Patch:
@@ -62,7 +62,7 @@ public PipelineDraweeControllerBuilderSupplier(
     if (animatedFactory != null) {
       animatedDrawableFactory = animatedFactory.getAnimatedDrawableFactory(context);
     }
-
+    final boolean drawDebugOverlay = draweeConfig != null && draweeConfig.shouldDrawDebugOverlay();
     mPipelineDraweeControllerFactory = new PipelineDraweeControllerFactory(
         context.getResources(),
         DeferredReleaser.getInstance(),
@@ -71,7 +71,8 @@ public PipelineDraweeControllerBuilderSupplier(
         mImagePipeline.getBitmapMemoryCache(),
         draweeConfig != null
                 ? draweeConfig.getCustomDrawableFactories()
-                : null);
+                : null,
+        drawDebugOverlay);
     mBoundControllerListeners = boundControllerListeners;
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -38,6 +38,7 @@
 import com.facebook.imagepipeline.cache.EncodedCountingMemoryCacheFactory;
 import com.facebook.imagepipeline.cache.EncodedMemoryCacheFactory;
 import com.facebook.imagepipeline.cache.MemoryCache;
+import com.facebook.imagepipeline.decoder.DefaultImageDecoder;
 import com.facebook.imagepipeline.decoder.ImageDecoder;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.memory.PoolFactory;
@@ -190,7 +191,7 @@ private ImageDecoder getImageDecoder() {
         } else {
           animatedImageFactory = null;
         }
-        mImageDecoder = new ImageDecoder(
+        mImageDecoder = new DefaultImageDecoder(
             animatedImageFactory,
             getPlatformDecoder(),
             mConfig.getBitmapConfig());

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
Patch:
@@ -191,7 +191,7 @@ private void doDecode(EncodedImage encodedImage, boolean isLast) {
         mProducerListener.onProducerStart(mProducerContext.getId(), PRODUCER_NAME);
         CloseableImage image = null;
         try {
-          image = mImageDecoder.decodeImage(encodedImage, length, quality, mImageDecodeOptions);
+          image = mImageDecoder.decode(encodedImage, length, quality, mImageDecodeOptions);
         } catch (Exception e) {
           Map<String, String> extraMap = getExtraMap(image, queueTime, quality, isLast);
           mProducerListener.

File: imagepipeline-base/src/test/java/com/facebook/imagepipeline/image/EncodedImageTest.java
Patch:
@@ -157,6 +157,7 @@ public void testParseMetaData_JPEG() throws IOException {
     assertSame(DefaultImageFormats.JPEG, encodedImage.getImageFormat());
     assertEquals(550, encodedImage.getWidth());
     assertEquals(468, encodedImage.getHeight());
+    assertEquals(0, encodedImage.getRotationAngle());
   }
 
   @Test
@@ -168,6 +169,7 @@ public void testParseMetaData_PNG() throws IOException {
     assertSame(DefaultImageFormats.PNG, encodedImage.getImageFormat());
     assertEquals(800, encodedImage.getWidth());
     assertEquals(600, encodedImage.getHeight());
+    assertEquals(0, encodedImage.getRotationAngle());
   }
 
   @Test

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/AddImageTransformMetaDataProducerTest.java
Patch:
@@ -94,7 +94,7 @@ public void testOnNewResultLastNotJpeg() {
     EncodedImage encodedImage = argumentCaptor.getValue();
     assertTrue(EncodedImage.isValid(encodedImage));
     assertEquals(DefaultImageFormats.WEBP_SIMPLE, encodedImage.getImageFormat());
-    assertEquals(-1, encodedImage.getRotationAngle());
+    assertEquals(0, encodedImage.getRotationAngle());
     assertEquals(-1, encodedImage.getWidth());
     assertEquals(-1, encodedImage.getHeight());
   }
@@ -110,7 +110,7 @@ public void testOnNewResultNotLastNotJpeg() {
     EncodedImage encodedImage = argumentCaptor.getValue();
     assertTrue(EncodedImage.isValid(encodedImage));
     assertEquals(DefaultImageFormats.WEBP_SIMPLE, encodedImage.getImageFormat());
-    assertEquals(-1, encodedImage.getRotationAngle());
+    assertEquals(0, encodedImage.getRotationAngle());
     assertEquals(-1, encodedImage.getWidth());
     assertEquals(-1, encodedImage.getHeight());
   }

File: samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/data/SimpleAdapter.java
Patch:
@@ -41,7 +41,7 @@ public static <E> SimpleAdapter<E> makeItInfinite(final SimpleAdapter<E> srcAdap
       return new SimpleAdapter<E>() {
         @Override
         public int getSize() {
-          return Integer.MAX_VALUE;
+          return (srcAdapter.getSize() == 0) ? 0 :Integer.MAX_VALUE;
         }
 
         @Override

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DefaultCacheKeyFactory.java
Patch:
@@ -40,7 +40,7 @@ public CacheKey getBitmapCacheKey(ImageRequest request, Object callerContext) {
     return new BitmapMemoryCacheKey(
         getCacheKeySourceUri(request.getSourceUri()).toString(),
         request.getResizeOptions(),
-        request.getAutoRotateEnabled(),
+        request.getRotationOptions(),
         request.getImageDecodeOptions(),
         null,
         null,
@@ -62,7 +62,7 @@ public CacheKey getPostprocessedBitmapCacheKey(ImageRequest request, Object call
     return new BitmapMemoryCacheKey(
         getCacheKeySourceUri(request.getSourceUri()).toString(),
         request.getResizeOptions(),
-        request.getAutoRotateEnabled(),
+        request.getRotationOptions(),
         request.getImageDecodeOptions(),
         postprocessorCacheKey,
         postprocessorName,

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
Patch:
@@ -127,7 +127,7 @@ static int ratioToSampleSizeJPEG(float ratio) {
   }
 
   private static int getRotationAngle(ImageRequest imageRequest, EncodedImage encodedImage) {
-    if (!imageRequest.getAutoRotateEnabled()) {
+    if (!imageRequest.getRotationOptions().useImageMetadata()) {
       return 0;
     }
     int rotationAngle = encodedImage.getRotationAngle();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
Patch:
@@ -18,6 +18,7 @@
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.common.Priority;
 import com.facebook.imagepipeline.common.ResizeOptions;
+import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.listener.RequestListener;
 
 import static com.facebook.imagepipeline.request.ImageRequest.CacheChoice;
@@ -34,7 +35,8 @@ public class ImageRequestBuilder {
   private @Nullable ResizeOptions mResizeOptions = null;
   private ImageDecodeOptions mImageDecodeOptions = ImageDecodeOptions.defaults();
   private CacheChoice mCacheChoice = CacheChoice.DEFAULT;
-  private boolean mProgressiveRenderingEnabled = false;
+  private boolean mProgressiveRenderingEnabled =
+      ImagePipelineConfig.getDefaultImageRequestConfig().isProgressiveRenderingEnabled();
   private boolean mLocalThumbnailPreviewsEnabled = false;
   private Priority mRequestPriority = Priority.HIGH;
   private @Nullable Postprocessor mPostprocessor = null;

File: fbcore/src/main/java/com/facebook/common/webp/WebpSupportStatus.java
Patch:
@@ -116,7 +116,7 @@ private static boolean isExtendedWebpSupported() {
     return true;
   }
 
-  public static boolean isWebpPlatformSupported(
+  public static boolean isWebpSupportedByPlatform(
       final byte[] imageHeaderBytes,
       final int offset,
       final int headerSize) {

File: imagepipeline/src/test/java/com/facebook/imagepipeline/platform/GingerbreadPurgeableDecoderTest.java
Patch:
@@ -106,7 +106,7 @@ public void setUp() {
     mDecodeBufRef = CloseableReference.of(mDecodeBuf, mock(ResourceReleaser.class));
 
     mockStatic(Bitmaps.class);
-    mGingerbreadPurgeableDecoder = new GingerbreadPurgeableDecoder(false);
+    mGingerbreadPurgeableDecoder = new GingerbreadPurgeableDecoder(false, null);
   }
 
   @Test

File: static-webp/src/androidTest/java/com/facebook/webpsupport/WebpDecodingTest.java
Patch:
@@ -76,7 +76,6 @@ private FileDescriptor getMemoryFileDescriptor(MemoryFile memoryFile) {
     }
   }
 
-
   private InputStream getTestImageInputStream(String path) {
     try {
       return mInstrumentation.getContext().getResources().getAssets().open(path);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java
Patch:
@@ -439,10 +439,9 @@ public void onNextResult(
       while (iterator.hasNext()) {
         Pair<Consumer<T>, ProducerContext> pair = iterator.next();
         synchronized (pair) {
-          pair.first.onNewResult(cloneOrNull(closeableObject), isFinal);
+          pair.first.onNewResult(closeableObject, isFinal);
         }
       }
-      closeSafely(closeableObject);
     }
 
     public void onCancelled(final ForwardingConsumer forwardingConsumer) {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java
Patch:
@@ -439,9 +439,10 @@ public void onNextResult(
       while (iterator.hasNext()) {
         Pair<Consumer<T>, ProducerContext> pair = iterator.next();
         synchronized (pair) {
-          pair.first.onNewResult(closeableObject, isFinal);
+          pair.first.onNewResult(cloneOrNull(closeableObject), isFinal);
         }
       }
+      closeSafely(closeableObject);
     }
 
     public void onCancelled(final ForwardingConsumer forwardingConsumer) {

File: imagepipeline-base/src/test/java/com/facebook/imagepipeline/cache/CountingMemoryCacheTest.java
Patch:
@@ -17,7 +17,6 @@
 import com.facebook.common.references.CloseableReference;
 import com.facebook.common.references.ResourceReleaser;
 import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
-import com.facebook.imagepipeline.testing.MockBitmapFactory;
 
 import com.android.internal.util.Predicate;
 import org.junit.Before;
@@ -114,7 +113,6 @@ public int getSizeInBytes(Integer value) {
         CACHE_ENTRY_MAX_SIZE);
     when(mParamsSupplier.get()).thenReturn(mParams);
     mPlatformBitmapFactory = Mockito.mock(PlatformBitmapFactory.class);
-    mBitmap = MockBitmapFactory.create(50, 50, Bitmap.Config.ARGB_8888);
     mBitmapReference = CloseableReference.of(mBitmap, FAKE_BITMAP_RESOURCE_RELEASER);
     mCache = new CountingMemoryCache<>(
         mValueDescriptor,

File: imagepipeline-base/src/test/java/com/facebook/cache/disk/DiskStorageCacheTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.concurrent.CyclicBarrier;
-import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
 
 import android.content.Context;
@@ -148,7 +148,7 @@ private DiskStorageCache createDiskCache(
         mock(CacheErrorLogger.class),
         mDiskTrimmableRegistry,
         context,
-        mock(Executor.class),
+        Executors.newSingleThreadExecutor(),
         indexPopulateAtStartupEnabled);
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/ImageDecoder.java
Patch:
@@ -75,6 +75,7 @@ public CloseableImage decodeImage(
     if (imageFormat == null || imageFormat == ImageFormat.UNKNOWN) {
       imageFormat = ImageFormatChecker.getImageFormat_WrapIOException(
           encodedImage.getInputStream());
+      encodedImage.setImageFormat(imageFormat);
     }
 
     switch (imageFormat) {

File: samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Const.java
Patch:
@@ -35,4 +35,5 @@ public final class Const {
   public static final String ROUNDED_AS_CIRCLE_KEY= "rounded_as_circle";
   public static final String USE_POSTPROCESSOR_KEY= "use_postprocessor";
   public static final String POSTPROCESSOR_TYPE_KEY= "postprocessor_type";
+  public static final String SCALE_TYPE_KEY= "scale_type";
 }

File: samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/TimeWaster.java
Patch:
@@ -23,7 +23,7 @@ public final class TimeWaster {
    */
   public static long Fib(int n) {
     if (n < 2) {
-      return 1;
+      return n;
     } else {
       return Fib(n - 1) + Fib(n - 2);
     }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
Patch:
@@ -219,7 +219,7 @@ private Map<String, String> getExtraMap(
       String queueStr = String.valueOf(queueTime);
       String qualityStr = String.valueOf(quality.isOfGoodEnoughQuality());
       String finalStr = String.valueOf(isFinal);
-      String imageTypeStr = String.valueOf(mProducerContext.getImageRequest().getImageType());
+      String cacheChoiceStr = String.valueOf(mProducerContext.getImageRequest().getCacheChoice());
       if (image instanceof CloseableStaticBitmap) {
         Bitmap bitmap = ((CloseableStaticBitmap) image).getUnderlyingBitmap();
         String sizeStr = bitmap.getWidth() + "x" + bitmap.getHeight();
@@ -233,7 +233,7 @@ private Map<String, String> getExtraMap(
             IS_FINAL_KEY,
             finalStr,
             IMAGE_TYPE_KEY,
-            imageTypeStr);
+            cacheChoiceStr);
       } else {
         return ImmutableMap.of(
             JobScheduler.QUEUE_TIME_KEY,
@@ -243,7 +243,7 @@ private Map<String, String> getExtraMap(
             IS_FINAL_KEY,
             finalStr,
             IMAGE_TYPE_KEY,
-            imageTypeStr);
+            cacheChoiceStr);
       }
     }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
Patch:
@@ -72,7 +72,7 @@ public void produceResults(
 
     final CacheKey cacheKey =
         mCacheKeyFactory.getEncodedCacheKey(imageRequest, producerContext.getCallerContext());
-    boolean isSmallRequest = (imageRequest.getImageType() == ImageRequest.ImageType.SMALL);
+    boolean isSmallRequest = (imageRequest.getCacheChoice() == ImageRequest.CacheChoice.SMALL);
     final BufferedDiskCache preferredCache = isSmallRequest ?
         mSmallImageBufferedDiskCache : mDefaultBufferedDiskCache;
     final AtomicBoolean isCancelled = new AtomicBoolean(false);

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
Patch:
@@ -93,7 +93,7 @@ protected EncodedImage getByteBufferBackedEncodedImage(
       int length) throws IOException {
     CloseableReference<PooledByteBuffer> ref = null;
     try {
-      if (length < 0) {
+      if (length <= 0) {
         ref = CloseableReference.of(mPooledByteBufferFactory.newByteBuffer(inputStream));
       } else {
         ref = CloseableReference.of(mPooledByteBufferFactory.newByteBuffer(inputStream, length));

File: samples/comparison/src/main/java/com/facebook/samples/comparison/configs/picasso/SamplePicassoFactory.java
Patch:
@@ -15,7 +15,7 @@
 import android.content.Context;
 
 import com.squareup.picasso.LruCache;
-import com.squareup.picasso.OkHttpDownloader;
+import com.jakewharton.picasso.OkHttp3Downloader;
 import com.squareup.picasso.Picasso;
 
 import com.facebook.samples.comparison.configs.ConfigConstants;
@@ -30,7 +30,7 @@ public class SamplePicassoFactory {
   public static Picasso getPicasso(Context context) {
     if (sPicasso == null) {
         sPicasso = new Picasso.Builder(context)
-            .downloader(new OkHttpDownloader(context, ConfigConstants.MAX_DISK_CACHE_SIZE))
+            .downloader(new OkHttp3Downloader(context, ConfigConstants.MAX_DISK_CACHE_SIZE))
             .memoryCache(new LruCache(ConfigConstants.MAX_MEMORY_CACHE_SIZE))
             .build();
     }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DefaultCacheKeyFactory.java
Patch:
@@ -9,6 +9,8 @@
 
 package com.facebook.imagepipeline.cache;
 
+import javax.annotation.Nullable;
+
 import android.net.Uri;
 
 import com.facebook.cache.common.CacheKey;
@@ -68,7 +70,7 @@ public CacheKey getPostprocessedBitmapCacheKey(ImageRequest request, Object call
   }
 
   @Override
-  public CacheKey getEncodedCacheKey(ImageRequest request) {
+  public CacheKey getEncodedCacheKey(ImageRequest request, @Nullable Object callerContext) {
     return new SimpleCacheKey(getCacheKeySourceUri(request.getSourceUri()).toString());
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
Patch:
@@ -326,7 +326,7 @@ public void evictFromDiskCache(final Uri uri) {
    * @param imageRequest The imageRequest for the image to evict from disk cache
    */
   public void evictFromDiskCache(final ImageRequest imageRequest) {
-    CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest);
+    CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest, null);
     mMainBufferedDiskCache.remove(cacheKey);
     mSmallImageBufferedDiskCache.remove(cacheKey);
   }
@@ -427,7 +427,7 @@ public boolean isInDiskCacheSync(final Uri uri) {
    * @return true if the image was found in the disk cache, false otherwise.
    */
   public boolean isInDiskCacheSync(final ImageRequest imageRequest) {
-    final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest);
+    final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest, null);
     return mMainBufferedDiskCache.diskCheckSync(cacheKey);
   }
 
@@ -452,7 +452,7 @@ public DataSource<Boolean> isInDiskCache(final Uri uri) {
    * @return true if the image was found in the disk cache, false otherwise.
    */
   public DataSource<Boolean> isInDiskCache(final ImageRequest imageRequest) {
-    final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest);
+    final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest, null);
     final SimpleDataSource<Boolean> dataSource = SimpleDataSource.create();
     mMainBufferedDiskCache.contains(cacheKey)
         .continueWithTask(

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
Patch:
@@ -70,7 +70,8 @@ public void produceResults(
 
     producerContext.getListener().onProducerStart(producerContext.getId(), PRODUCER_NAME);
 
-    final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest);
+    final CacheKey cacheKey =
+        mCacheKeyFactory.getEncodedCacheKey(imageRequest, producerContext.getCallerContext());
     boolean isSmallRequest = (imageRequest.getImageType() == ImageRequest.ImageType.SMALL);
     final BufferedDiskCache preferredCache = isSmallRequest ?
         mSmallImageBufferedDiskCache : mDefaultBufferedDiskCache;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedCacheKeyMultiplexProducer.java
Patch:
@@ -33,7 +33,9 @@ public EncodedCacheKeyMultiplexProducer(
 
   protected Pair<CacheKey, ImageRequest.RequestLevel> getKey(ProducerContext producerContext) {
     return Pair.create(
-        mCacheKeyFactory.getEncodedCacheKey(producerContext.getImageRequest()),
+        mCacheKeyFactory.getEncodedCacheKey(
+            producerContext.getImageRequest(),
+            producerContext.getCallerContext()),
         producerContext.getLowestPermittedRequestLevel());
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
Patch:
@@ -49,7 +49,8 @@ public void produceResults(
     final ProducerListener listener = producerContext.getListener();
     listener.onProducerStart(requestId, PRODUCER_NAME);
     final ImageRequest imageRequest = producerContext.getImageRequest();
-    final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest);
+    final CacheKey cacheKey =
+        mCacheKeyFactory.getEncodedCacheKey(imageRequest, producerContext.getCallerContext());
 
     CloseableReference<PooledByteBuffer> cachedReference = mMemoryCache.get(cacheKey);
     try {

File: imagepipeline/src/test/java/com/facebook/imagepipeline/core/ImagePipelineTest.java
Patch:
@@ -346,7 +346,8 @@ public void testEvictFromDiskCache() {
     List<CacheKey> list = new ArrayList<>();
     list.add(dummyCacheKey);
     MultiCacheKey multiKey = new MultiCacheKey(list);
-    when(mCacheKeyFactory.getEncodedCacheKey(any(ImageRequest.class))).thenReturn(multiKey);
+    when(mCacheKeyFactory.getEncodedCacheKey(any(ImageRequest.class), anyObject()))
+        .thenReturn(multiKey);
     mImagePipeline.evictFromDiskCache(uri);
     verify(mMainDiskStorageCache).remove(multiKey);
     verify(mSmallImageDiskStorageCache).remove(multiKey);

File: imagepipeline/src/test/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducerTest.java
Patch:
@@ -56,6 +56,7 @@ public class EncodedMemoryCacheProducerTest {
   @Mock public Consumer mConsumer;
   @Mock public ProducerContext mProducerContext;
   @Mock public ImageRequest mImageRequest;
+  @Mock public Object mCallerContext;
   @Mock public ProducerListener mProducerListener;
   @Mock public Exception mException;
   private MultiCacheKey mCacheKey;
@@ -86,10 +87,11 @@ public void setUp() {
     List<CacheKey> list = new ArrayList<>();
     list.add(new SimpleCacheKey("http://dummy.uri"));
     mCacheKey = new MultiCacheKey(list);
-    when(mCacheKeyFactory.getEncodedCacheKey(mImageRequest)).thenReturn(mCacheKey);
+    when(mCacheKeyFactory.getEncodedCacheKey(mImageRequest, mCallerContext)).thenReturn(mCacheKey);
 
     when(mMemoryCache.cache(mCacheKey, mFinalImageReference)).thenReturn(mFinalImageReferenceClone);
     when(mProducerContext.getImageRequest()).thenReturn(mImageRequest);
+    when(mProducerContext.getCallerContext()).thenReturn(mCallerContext);
     when(mProducerContext.getListener()).thenReturn(mProducerListener);
     when(mProducerListener.requiresExtraMap(mRequestId)).thenReturn(true);
     when(mProducerContext.getId()).thenReturn(mRequestId);

File: samples/zoomable/src/main/java/com/facebook/samples/zoomable/ZoomableDraweeView.java
Patch:
@@ -260,7 +260,7 @@ public boolean onTouchEvent(MotionEvent event) {
       return true;
     }
     if (mZoomableController.onTouchEvent(event)) {
-      if (!mZoomableController.isIdentity()) {
+      if (!mZoomableController.wasTransformCorrected()) {
         getParent().requestDisallowInterceptTouchEvent(true);
       }
       FLog.v(

File: samples/transition/src/main/java/com/facebook/samples/transitions/SourceActivity.java
Patch:
@@ -42,6 +42,7 @@ protected void onCreate(Bundle savedInstanceState) {
     Fresco.initialize(this, config);
     setContentView(R.layout.drawee_source);
     mSimpleDraweeView = (SimpleDraweeView) findViewById(R.id.image);
+    mSimpleDraweeView.setImageURI("res:/" + R.drawable.test_image);
   }
 
   public void startTransition(View view) {

File: static-webp/src/androidTest/java/com/facebook/webpsupport/WebpBitmapFactoryTest.java
Patch:
@@ -29,7 +29,6 @@
 
 import com.facebook.common.internal.ByteStreams;
 import com.facebook.common.internal.Throwables;
-import com.facebook.webpsupport.WebpBitmapFactoryImpl;
 
 import org.junit.After;
 import org.junit.Before;

File: samples/comparison/src/main/java/com/facebook/samples/comparison/configs/imagepipeline/ImagePipelineConfigFactory.java
Patch:
@@ -16,20 +16,20 @@
 import android.content.Context;
 
 import com.facebook.cache.disk.DiskCacheConfig;
-import com.facebook.common.internal.Sets;
 import com.facebook.common.internal.Supplier;
-import com.facebook.imagepipeline.backends.okhttp.OkHttpImagePipelineConfigFactory;
+import com.facebook.imagepipeline.backends.okhttp3.OkHttpImagePipelineConfigFactory;
 import com.facebook.imagepipeline.cache.MemoryCacheParams;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.listener.RequestListener;
 import com.facebook.imagepipeline.listener.RequestLoggingListener;
 import com.facebook.samples.comparison.configs.ConfigConstants;
 import com.facebook.stetho.okhttp.StethoInterceptor;
-import com.squareup.okhttp.OkHttpClient;
 
 import java.util.HashSet;
 import java.util.Set;
 
+import okhttp3.OkHttpClient;
+
 /**
  * Creates ImagePipeline configuration for the sample app
  */

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedLightBitmapDrawable.java
Patch:
@@ -209,9 +209,9 @@ public void draw(Canvas canvas) {
       canvas.drawBitmap(bitmap, null, bounds, paint);
       return;
     }
-
-    updatePaint(bitmap);
+    // IMPORTANT: Don't change the invocation order of the following methods
     updateTransform(bitmap, bounds);
+    updatePaint(bitmap);
     updatePath();
 
     int saveCount = canvas.save();

File: samples/demo/src/main/java/com/facebook/samples/demo/MainActivity.java
Patch:
@@ -76,7 +76,7 @@ protected void onCreate(Bundle savedInstanceState) {
         .build();
     mProgressiveJpegView.setController(controller);
 
-    mStaticWebpView.setImageURI("https://www.gstatic.com/webp/gallery/2.sm.webp");
+    mStaticWebpView.setImageURI(Uri.parse("https://www.gstatic.com/webp/gallery/2.sm.webp"));
 
     mAlphaWebpView.setImageURI(Uri.parse("http://frescolib.org/static/translucent.webp"));
 

File: animated-base/src/test/java/com/facebook/imagepipeline/producers/AnimatedRepeatedPostprocessorProducerTest.java
Patch:
@@ -46,7 +46,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest= Config.NONE)
-public class RepeatedPostprocessorProducerTest {
+public class AnimatedRepeatedPostprocessorProducerTest {
 
   private static final String POSTPROCESSOR_NAME = "postprocessor_name";
   private static final Map<String, String> mExtraMap =

File: animated-base/src/test/java/com/facebook/imagepipeline/producers/AnimatedSingleUsePostprocessorProducerTest.java
Patch:
@@ -41,7 +41,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 @Config(manifest= Config.NONE)
-public class SingleUsePostprocessorProducerTest {
+public class AnimatedSingleUsePostprocessorProducerTest {
 
   private static final String POSTPROCESSOR_NAME = "postprocessor_name";
   private static final Map<String, String> mExtraMap =

File: samples/zoomable/src/main/java/com/facebook/samples/zoomable/ZoomableDraweeView.java
Patch:
@@ -280,7 +280,7 @@ public boolean onTouchEvent(MotionEvent event) {
       FLog.v(TAG, "onTouchEvent: view %x, handled by the super", this.hashCode());
       return true;
     }
-    return true;
+    return false;
   }
 
   @Override

File: animated-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedFactoryImpl.java
Patch:
@@ -54,7 +54,7 @@ public AnimatedFactoryImpl(
       PlatformBitmapFactory platformBitmapFactory,
       ExecutorSupplier executorSupplier) {
     this.mContext = context;
-    this.mPlatformBitmapFactory = mPlatformBitmapFactory;
+    this.mPlatformBitmapFactory = platformBitmapFactory;
     this.mExecutorSupplier = executorSupplier;
   }
 

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -212,6 +212,7 @@ public void setTransformCallback(@Nullable TransformCallback transformCallback)
   public void setAlpha(int alpha) {
     if (alpha != mPaint.getAlpha()) {
       mPaint.setAlpha(alpha);
+      super.setAlpha(alpha);
       invalidateSelf();
     }
   }

File: drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java
Patch:
@@ -276,7 +276,8 @@ private static Drawable getDrawable(
       Context context,
       TypedArray gdhAttrs,
       int attrId) {
-    return context.getResources().getDrawable(gdhAttrs.getResourceId(attrId, 0));
+    int resourceId = gdhAttrs.getResourceId(attrId, 0);
+    return (resourceId == 0) ? null : context.getResources().getDrawable(resourceId);
   }
 
   /**

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BasePool.java
Patch:
@@ -725,7 +725,7 @@ public synchronized Map<String, Integer> getStats() {
   @NotThreadSafe
   @VisibleForTesting
   static class Counter {
-    private static final String TAG = "com.facebook.imagepipeline.common.BasePool.Counter";
+    private static final String TAG = "com.facebook.imagepipeline.memory.BasePool.Counter";
 
     int mCount;
     int mNumBytes;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/Bucket.java
Patch:
@@ -43,8 +43,6 @@
 @NotThreadSafe
 @VisibleForTesting
 class Bucket<V> {
-  private static final String TAG = "com.facebook.imagepipeline.common.Bucket";
-
   public final int mItemSize; // size in bytes of items in this bucket
   public final int mMaxLength; // 'max' length for this bucket
   final Queue mFreeList; // the free list for this bucket, subclasses can vary type

File: drawee/src/main/java/com/facebook/drawee/drawable/ScaleTypeDrawable.java
Patch:
@@ -157,14 +157,13 @@ private void configureBoundsIfUnderlyingChanged() {
 
     // We need to do the scaling ourselves, so have the underlying drawable use its preferred size.
     underlyingDrawable.setBounds(0, 0, underlyingWidth, underlyingHeight);
-    ScalingUtils.getTransform(
+    mScaleType.getTransform(
         mTempMatrix,
         bounds,
         underlyingWidth,
         underlyingHeight,
         (mFocusPoint != null) ? mFocusPoint.x : 0.5f,
-        (mFocusPoint != null) ? mFocusPoint.y : 0.5f,
-        mScaleType);
+        (mFocusPoint != null) ? mFocusPoint.y : 0.5f);
     mDrawMatrix = mTempMatrix;
   }
 

File: drawee/src/test/java/com/facebook/drawee/drawable/ScalingUtilsTest.java
Patch:
@@ -218,14 +218,13 @@ private void test(
     }
 
     mActualMatrix.reset();
-    ScalingUtils.getTransform(
+    scaleType.getTransform(
         mActualMatrix,
         mParentBounds,
         childWidth,
         childHeight,
         focusX,
-        focusY,
-        scaleType);
+        focusY);
 
     AndroidGraphicsTestUtils.assertEquals(mExpectedMatrix, mActualMatrix);
   }

File: drawee/src/main/java/com/facebook/drawee/drawable/ScaleTypeDrawable.java
Patch:
@@ -157,14 +157,13 @@ private void configureBoundsIfUnderlyingChanged() {
 
     // We need to do the scaling ourselves, so have the underlying drawable use its preferred size.
     underlyingDrawable.setBounds(0, 0, underlyingWidth, underlyingHeight);
-    ScalingUtils.getTransform(
+    mScaleType.getTransform(
         mTempMatrix,
         bounds,
         underlyingWidth,
         underlyingHeight,
         (mFocusPoint != null) ? mFocusPoint.x : 0.5f,
-        (mFocusPoint != null) ? mFocusPoint.y : 0.5f,
-        mScaleType);
+        (mFocusPoint != null) ? mFocusPoint.y : 0.5f);
     mDrawMatrix = mTempMatrix;
   }
 

File: drawee/src/test/java/com/facebook/drawee/drawable/ScalingUtilsTest.java
Patch:
@@ -218,14 +218,13 @@ private void test(
     }
 
     mActualMatrix.reset();
-    ScalingUtils.getTransform(
+    scaleType.getTransform(
         mActualMatrix,
         mParentBounds,
         childWidth,
         childHeight,
         focusX,
-        focusY,
-        scaleType);
+        focusY);
 
     AndroidGraphicsTestUtils.assertEquals(mExpectedMatrix, mActualMatrix);
   }

File: samples/comparison/src/main/java/com/facebook/samples/comparison/configs/imagepipeline/ImagePipelineConfigFactory.java
Patch:
@@ -89,7 +89,7 @@ public MemoryCacheParams get() {
               }
             })
         .setMainDiskCacheConfig(
-            DiskCacheConfig.newBuilder()
+            DiskCacheConfig.newBuilder(context)
                 .setBaseDirectoryPath(context.getApplicationContext().getCacheDir())
                 .setBaseDirectoryName(IMAGE_PIPELINE_CACHE_DIR)
                 .setMaxCacheSize(ConfigConstants.MAX_DISK_CACHE_SIZE)

File: fbcore/src/main/java/com/facebook/common/internal/ImmutableList.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * A dummy representation of an immutable set. This can be used temporarily as a type until we have
- * an actual non-gauva implementation.
+ * an actual non-guava implementation.
  */
 public class ImmutableList<E> extends ArrayList<E> {
 

File: imagepipeline-base/src/main/java/com/facebook/imageutils/StreamProcessor.java
Patch:
@@ -23,7 +23,7 @@ class StreamProcessor {
    *  @param is the input stream to read bytes from
    *  @param numBytes the number of bytes to read
    *  @param isLittleEndian whether the bytes should be interpreted in little or big endian format
-   *  @return packed int read from input stream and constructed according to endianess
+   *  @return packed int read from input stream and constructed according to endianness
    */
   public static int readPackedInt(InputStream is, int numBytes, boolean isLittleEndian)
       throws IOException {

File: drawee/src/main/java/com/facebook/drawee/drawable/ArrayDrawable.java
Patch:
@@ -94,7 +94,7 @@ public Drawable setDrawable(int index, @Nullable Drawable drawable) {
     final Drawable oldDrawable = mLayers[index];
     if (drawable != oldDrawable) {
       if (drawable != null && mIsMutated) {
-        drawable = drawable.mutate();
+        drawable.mutate();
       }
 
       DrawableUtils.setCallbacks(mLayers[index], null, null);

File: drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java
Patch:
@@ -195,14 +195,14 @@ public void draw(Canvas canvas) {
     Drawable actualImageBranch;
     mActualImageSettableDrawable = new ForwardingDrawable(mEmptyActualImageDrawable);
     actualImageBranch = mActualImageSettableDrawable;
+    actualImageBranch.setColorFilter(builder.getActualImageColorFilter());
     actualImageBranch = maybeWrapWithScaleType(
         actualImageBranch,
         builder.getActualImageScaleType(),
         builder.getActualImageFocusPoint());
     actualImageBranch = maybeWrapWithMatrix(
         actualImageBranch,
         builder.getActualImageMatrix());
-    actualImageBranch.setColorFilter(builder.getActualImageColorFilter());
     mActualImageIndex = numLayers++;
 
     // progressBar image branch

File: fbcore/src/main/java/com/facebook/common/logging/FLog.java
Patch:
@@ -443,13 +443,13 @@ public static void e(Class <?> cls, String msg, Throwable tr) {
 
   public static void wtf(String tag, String msg) {
     if (sHandler.isLoggable(ERROR)) {
-      sHandler.e(tag, msg);
+      sHandler.wtf(tag, msg);
     }
   }
 
   public static void wtf(Class <?> cls, String msg) {
     if (sHandler.isLoggable(ERROR)) {
-      sHandler.e(getTag(cls), msg);
+      sHandler.wtf(getTag(cls), msg);
     }
   }
 

File: imagepipeline-base/src/main/java/com/facebook/cache/disk/DiskStorageCache.java
Patch:
@@ -294,7 +294,7 @@ public BinaryResource insert(CacheKey key, WriterCallback callback) throws IOExc
       }
     } catch (IOException ioe) {
       mCacheEventListener.onWriteException();
-      FLog.d(TAG, "Failed inserting a file into the cache", ioe);
+      FLog.e(TAG, "Failed inserting a file into the cache", ioe);
       throw ioe;
     }
   }

File: fbcore/src/main/java/com/facebook/common/webp/WebpSupportStatus.java
Patch:
@@ -192,6 +192,9 @@ private static boolean matchBytePattern(
       final byte[] byteArray,
       final int offset,
       final byte[] pattern) {
+    if (pattern == null || byteArray == null) {
+      return false;
+    }
     if (pattern.length + offset > byteArray.length) {
       return false;
     }

File: webpsupport/src/main/java/com/facebook/webpsupport/WebpBitmapFactory.java
Patch:
@@ -24,7 +24,7 @@
 import android.util.DisplayMetrics;
 
 import com.facebook.common.soloader.SoLoaderShim;
-import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.common.internal.DoNotStrip;
 
 import static com.facebook.imagepipeline.webp.WebpSupportStatus.isWebpPlatformSupported;
 import static com.facebook.imagepipeline.webp.WebpSupportStatus.isWebpHeader;

File: webpsupport/src/main/java/com/facebook/webpsupport/WebpBitmapFactoryHack.java
Patch:
@@ -15,7 +15,7 @@
 import android.graphics.BitmapFactory;
 import android.graphics.Rect;
 import com.facebook.dalvikdistract.DalvikDistract;
-import com.facebook.proguard.annotations.DoNotStrip;
+import com.facebook.common.internal.DoNotStrip;
 
 import static com.facebook.imagepipeline.webp.WebpSupportStatus.sIsWebpSupportRequired;
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
Patch:
@@ -19,6 +19,7 @@
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.common.Priority;
 import com.facebook.imagepipeline.common.ResizeOptions;
+import com.facebook.imageutils.BitmapUtil;
 
 /**
  * Immutable object encapsulating everything pipeline has to know about requested image to proceed.
@@ -98,11 +99,11 @@ public Uri getSourceUri() {
   }
 
   public int getPreferredWidth() {
-    return (mResizeOptions != null) ? mResizeOptions.width : -1;
+    return (mResizeOptions != null) ? mResizeOptions.width : (int) BitmapUtil.MAX_BITMAP_SIZE;
   }
 
   public int getPreferredHeight() {
-    return (mResizeOptions != null) ? mResizeOptions.height : -1;
+    return (mResizeOptions != null) ? mResizeOptions.height : (int) BitmapUtil.MAX_BITMAP_SIZE;
   }
 
   public @Nullable ResizeOptions getResizeOptions() {

File: imagepipeline/src/main/java/com/facebook/imageutils/BitmapUtil.java
Patch:
@@ -41,6 +41,8 @@ public final class BitmapUtil {
   public static final int ARGB_8888_BYTES_PER_PIXEL = 4;
   public static final int RGB_565_BYTES_PER_PIXEL = 2;
 
+  public static final float MAX_BITMAP_SIZE = 2048f;
+
   /**
    * @return size in bytes of the underlying bitmap
    */

File: imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BasePool.java
Patch:
@@ -656,19 +656,19 @@ synchronized boolean canAllocate(int sizeInBytes) {
 
     // even with our best effort we cannot ensure hard cap limit.
     // Return immediately - no point in trimming any space
-    if ((mUsed.mNumBytes + sizeInBytes) > hardCap) {
+    if (sizeInBytes > hardCap - mUsed.mNumBytes) {
       mPoolStatsTracker.onHardCapReached();
       return false;
     }
 
     // trim if we need to
     int softCap = mPoolParams.maxSizeSoftCap;
-    if ((mUsed.mNumBytes + mFree.mNumBytes + sizeInBytes) > softCap) {
+    if (sizeInBytes > softCap - (mUsed.mNumBytes + mFree.mNumBytes)) {
       trimToSize(softCap - sizeInBytes);
     }
 
     // check again to see if we're below the hard cap
-    if (mUsed.mNumBytes + mFree.mNumBytes + sizeInBytes > hardCap) {
+    if (sizeInBytes > hardCap - (mUsed.mNumBytes + mFree.mNumBytes)) {
       mPoolStatsTracker.onHardCapReached();
       return false;
     }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalAssetFetchProducer.java
Patch:
@@ -40,7 +40,7 @@ public LocalAssetFetchProducer(
   @Override
   protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOException {
     return getEncodedImage(
-        mAssetManager.open(getAssetName(imageRequest), AssetManager.ACCESS_STREAMING).toString(),
+        mAssetManager.open(getAssetName(imageRequest), AssetManager.ACCESS_STREAMING),
         getLength(imageRequest));
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFileFetchProducer.java
Patch:
@@ -9,6 +9,7 @@
 
 package com.facebook.imagepipeline.producers;
 
+import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.concurrent.Executor;
 
@@ -33,7 +34,7 @@ public LocalFileFetchProducer(
   @Override
   protected EncodedImage getEncodedImage(final ImageRequest imageRequest) throws IOException {
     return getEncodedImage(
-        imageRequest.getSourceFile().toString(),
+        new FileInputStream(imageRequest.getSourceFile().toString()),
         (int) imageRequest.getSourceFile().length());
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalResourceFetchProducer.java
Patch:
@@ -40,7 +40,7 @@ public LocalResourceFetchProducer(
   @Override
   protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOException {
     return getEncodedImage(
-        mResources.openRawResource(getResourceId(imageRequest)).toString(),
+        mResources.openRawResource(getResourceId(imageRequest)),
         getLength(imageRequest));
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
Patch:
@@ -362,10 +362,9 @@ public static PlatformDecoder buildPlatformDecoder(PoolFactory poolFactory) {
       return new ArtDecoder(
           poolFactory.getBitmapPool(),
           poolFactory.getFlexByteArrayPoolMaxNumThreads());
-    } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
-      return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());
     } else {
-      return new GingerbreadPurgeableDecoder();
+      // Fix for purgeable failure in GingerbreadPurgeableDecoder
+      return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());
     }
   }
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
Patch:
@@ -202,7 +202,8 @@ public LocalContentUriFetchProducer newContentUriFetchProducer() {
   public LocalExifThumbnailProducer newLocalExifThumbnailProducer() {
     return new LocalExifThumbnailProducer(
         mExecutorSupplier.forLocalStorageRead(),
-        mPooledByteBufferFactory);
+        mPooledByteBufferFactory,
+        mContentResolver);
   }
 
   public LocalFileFetchProducer newLocalFileFetchProducer() {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/CountingMemoryCache.java
Patch:
@@ -202,8 +202,8 @@ public CloseableReference<V> cache(
   private synchronized boolean canCacheNewValue(V value) {
     int newValueSize = mValueDescriptor.getSizeInBytes(value);
     return (newValueSize <= mMemoryCacheParams.maxCacheEntrySize) &&
-        (getInUseCount() + 1 <= mMemoryCacheParams.maxCacheEntries) &&
-        (getInUseSizeInBytes() + newValueSize <= mMemoryCacheParams.maxCacheSize);
+        (getInUseCount() <= mMemoryCacheParams.maxCacheEntries - 1) &&
+        (getInUseSizeInBytes() <= mMemoryCacheParams.maxCacheSize - newValueSize);
   }
 
   /**

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -150,7 +150,7 @@ public void setAlpha(int alpha) {
   @Override
   public void setColorFilter(ColorFilter colorFilter) {
     mPaint.setColorFilter(colorFilter);
-    invalidateSelf();
+    super.setColorFilter(colorFilter);
   }
 
   @Override

File: fbcore/src/main/java/com/facebook/common/memory/NoOpMemoryTrimmableRegistry.java
Patch:
@@ -15,7 +15,7 @@
 public class NoOpMemoryTrimmableRegistry implements MemoryTrimmableRegistry {
   private static NoOpMemoryTrimmableRegistry sInstance = null;
 
-  private NoOpMemoryTrimmableRegistry() {
+  public NoOpMemoryTrimmableRegistry() {
   }
 
   public static synchronized NoOpMemoryTrimmableRegistry getInstance() {

File: drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
Patch:
@@ -291,8 +291,8 @@ private static ScalingUtils.ScaleType getScaleTypeFromXml(
       TypedArray attrs,
       int attrId,
       ScalingUtils.ScaleType defaultScaleType) {
-    String xmlType = attrs.getString(attrId);
-    return (xmlType != null) ? ScalingUtils.ScaleType.fromString(xmlType) : defaultScaleType;
+    int index = attrs.getInt(attrId, -1);
+    return index < 0 ? defaultScaleType : ScalingUtils.ScaleType.values()[index];
   }
 
  /**

File: samples/comparison/src/main/java/com/facebook/samples/comparison/MainActivity.java
Patch:
@@ -65,7 +65,7 @@ public class MainActivity extends ActionBarActivity {
   public static final int NETWORK_INDEX = 1;
   public static final int LOCAL_INDEX = 2;
 
-  private static final int COLS_NUMBER = 2;
+  private static final int COLS_NUMBER = 3;
 
   private static final long STATS_CLOCK_INTERVAL_MS = 1000;
   private static final int DEFAULT_MESSAGE_SIZE = 1024;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java
Patch:
@@ -148,10 +148,10 @@ public Boolean get() {
 
     // Below this comment can't be built in alphabetical order, because of dependencies
 
-    int decodeThreads = mPoolFactory.getFlexByteArrayPoolMaxNumThreads();
+    int numCpuBoundThreads = mPoolFactory.getFlexByteArrayPoolMaxNumThreads();
     mExecutorSupplier =
         builder.mExecutorSupplier == null ?
-            new DefaultExecutorSupplier() : builder.mExecutorSupplier;
+            new DefaultExecutorSupplier(numCpuBoundThreads) : builder.mExecutorSupplier;
   }
 
   private static DiskCacheConfig getDefaultMainDiskCacheConfig(final Context context) {

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -155,12 +155,12 @@ public void setColorFilter(ColorFilter colorFilter) {
 
   @Override
   public void draw(Canvas canvas) {
+    updateTransform();
     updateNonzero();
     if (!mIsNonzero) {
       super.draw(canvas);
       return;
     }
-    updateTransform();
     updatePath();
     updatePaint();
     int saveCount = canvas.save();

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DefaultBitmapMemoryCacheParamsSupplier.java
Patch:
@@ -50,7 +50,7 @@ private int getMaxCacheSize() {
     } else {
       // We don't want to use more ashmem on Gingerbread for now, since it doesn't respond well to
       // native memory pressure (doesn't throw exceptions, crashes app, crashes phone)
-      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD) {
+      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
         return 8 * ByteConstants.MB;
       } else {
         return maxMemory / 4;

File: imagepipeline/src/main/java/com/facebook/imagepipeline/request/RepeatedPostprocessor.java
Patch:
@@ -12,8 +12,6 @@
 /**
  * Use an instance of this interface to perform post-process operations that must be performed
  * more than once.
- *
- * <p>Postprocessors are not supported on Gingerbread and below.
  */
 public interface RepeatedPostprocessor extends Postprocessor {
 

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java
Patch:
@@ -151,7 +151,7 @@ public Boolean get() {
     int decodeThreads = mPoolFactory.getFlexByteArrayPoolMaxNumThreads();
     mExecutorSupplier =
         builder.mExecutorSupplier == null ?
-            new DefaultExecutorSupplier(decodeThreads) : builder.mExecutorSupplier;
+            new DefaultExecutorSupplier() : builder.mExecutorSupplier;
   }
 
   private static DiskCacheConfig getDefaultMainDiskCacheConfig(final Context context) {

File: samples/comparison/src/main/java/com/facebook/samples/comparison/adapters/PicassoAdapter.java
Patch:
@@ -42,6 +42,7 @@ protected InstrumentedImageView createView() {
 
   @Override
   protected void bind(InstrumentedImageView view, String uri) {
+    mPicasso.cancelRequest(view);
     mPicasso
         .load(uri)
         .placeholder(Drawables.sPlaceholderDrawable)

File: imagepipeline/src/main/java/com/facebook/imagepipeline/image/EncodedImage.java
Patch:
@@ -72,7 +72,7 @@ public EncodedImage(Supplier<InputStream> inputStreamSupplier) {
     this.mInputStreamSupplier = inputStreamSupplier;
   }
 
-  public EncodedImage(Supplier<InputStream> inputStreamSupplier, int  streamSize) {
+  public EncodedImage(Supplier<InputStream> inputStreamSupplier, int streamSize) {
     Preconditions.checkNotNull(inputStreamSupplier);
     this.mPooledByteBufferRef = null;
     this.mInputStreamSupplier = inputStreamSupplier;
@@ -91,7 +91,7 @@ public static EncodedImage cloneOrNull(EncodedImage encodedImage) {
   public EncodedImage cloneOrNull() {
     EncodedImage encodedImage;
     if (mInputStreamSupplier != null) {
-       encodedImage = new EncodedImage(mInputStreamSupplier);
+       encodedImage = new EncodedImage(mInputStreamSupplier, mStreamSize);
     } else {
       CloseableReference<PooledByteBuffer> pooledByteBufferRef = mPooledByteBufferRef.cloneOrNull();
       try {
@@ -106,6 +106,7 @@ public EncodedImage cloneOrNull() {
       encodedImage.setRotationAngle(mRotationAngle);
       encodedImage.setWidth(mWidth);
       encodedImage.setHeight(mHeight);
+      encodedImage.setSampleSize(mSampleSize);
     }
     return encodedImage;
   }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java
Patch:
@@ -331,8 +331,9 @@ public Builder setExecutorSupplier(ExecutorSupplier executorSupplier) {
       return this;
     }
 
-    public void setDownsampleEnabled(boolean downsampleEnabled) {
+    public Builder setDownsampleEnabled(boolean downsampleEnabled) {
       this.mDownsampleEnabled = downsampleEnabled;
+      return this;
     }
 
     public Builder setImageCacheStatsTracker(ImageCacheStatsTracker imageCacheStatsTracker) {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/core/DefaultExecutorSupplier.java
Patch:
@@ -60,12 +60,12 @@ public Executor forDecode() {
   }
 
   @Override
-  public Executor forTransform() {
+  public Executor forBackgroundTasks() {
     return mCpuBoundExecutor;
   }
 
   @Override
-  public Executor forBackground() {
+  public Executor forLightweightBackgroundTasks() {
     return mCpuBoundExecutor;
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DataFetchProducer.java
Patch:
@@ -17,6 +17,7 @@
 import android.net.Uri;
 import android.util.Base64;
 
+import com.facebook.common.executors.CallerThreadExecutor;
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.VisibleForTesting;
 import com.facebook.imagepipeline.memory.PooledByteBufferFactory;
@@ -39,9 +40,8 @@ public class DataFetchProducer extends LocalFetchProducer {
   private static final String PRODUCER_NAME = "DataFetchProducer";
 
   public DataFetchProducer(
-      Executor executor,
       PooledByteBufferFactory pooledByteBufferFactory) {
-    super(executor, pooledByteBufferFactory);
+    super(CallerThreadExecutor.getInstance(), pooledByteBufferFactory);
   }
 
   @Override

File: drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
Patch:
@@ -44,11 +44,11 @@ public class RoundedBitmapDrawable extends BitmapDrawable
   @VisibleForTesting final Matrix mLastTransform = new Matrix();
   @VisibleForTesting float mBorderWidth = 0;
   @VisibleForTesting int mBorderColor = Color.TRANSPARENT;
+  @VisibleForTesting boolean mIsNonzero = true;
 
   private final Path mPath = new Path();
   private boolean mIsPathDirty = true;
   /** True if this rounded bitmap drawable will actually do anything. */
-  private boolean mIsNonzero = true;
   private final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   private final Paint mBorderPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   private boolean mIsShaderTransformDirty = true;
@@ -181,7 +181,7 @@ public void draw(Canvas canvas) {
   private void updateNonzero() {
     if (mIsPathDirty) {
       mIsNonzero = false;
-      if (mBorderWidth > 0) {
+      if (mIsCircle || mBorderWidth > 0) {
         mIsNonzero = true;
       }
       for (int i = 0; i < mCornerRadii.length; i++) {

File: sample/src/main/java/com/facebook/fresco/sample/urlsfetcher/ImageUrlsFetcher.java
Patch:
@@ -71,6 +71,7 @@ protected void onPostExecute(List<String> result) {
 
   private static List<String> getImageUrls(ImageUrlsRequest request) {
     List<String> urls = new ArrayList<String>();
+    urls.add("http://pooyak.com/p/progjpeg/jpegload.cgi?o=3");
     try {
       String rawJson = downloadContentAsString(request.getEndpointUrl());
       if (rawJson == null) {

File: drawee/src/main/java/com/facebook/drawee/controller/ForwardingControllerListener.java
Patch:
@@ -23,7 +23,8 @@
  */
 @ThreadSafe
 public class ForwardingControllerListener<INFO> implements ControllerListener<INFO> {
-  private static final String TAG = "ForwardingControllerListener";
+  // lint only allows 23 characters in a tag
+  private static final String TAG = "FdingControllerListener";
 
   private final List<ControllerListener<? super INFO>> mListeners = new ArrayList<>(2);
 

File: imagepipeline/src/test/java/com/facebook/imagepipeline/memory/PoolStats.java
Patch:
@@ -55,7 +55,7 @@ public void refreshBucketStats() {
     for (int i = 0; i < mPool.mBuckets.size(); ++i) {
       final int bucketedSize = mPool.mBuckets.keyAt(i);
       final Bucket<V> bucket = mPool.mBuckets.valueAt(i);
-      mBucketStats.put(bucketedSize, new IntPair(bucket.mInUseLength, bucket.mFreeList.size()));
+      mBucketStats.put(bucketedSize, new IntPair(bucket.getInUseCount(), bucket.mFreeList.size()));
     }
   }
 }

File: imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BitmapMemoryCacheKey.java
Patch:
@@ -75,7 +75,7 @@ public String getSourceUriString() {
   public String toString() {
     return String.format(
         (Locale) null,
-        "%s_%s_%s_%d_%d",
+        "%s_%s_%s_%s_%d",
         mSourceString,
         mResizeOptions,
         Boolean.toString(mAutoRotated),

File: imagepipeline-backends/imagepipeline-okhttp/src/main/java/com/facebook/imagepipeline/backends/okhttp/OkHttpNetworkFetchProducer.java
Patch:
@@ -98,7 +98,7 @@ public void onResponse(Response response) {
               if (contentLength < 0) {
                 contentLength = 0;
               }
-              processResult(requestState, body.byteStream(), (int) contentLength, false);
+              processResult(requestState, body.byteStream(), (int) contentLength);
             } catch (IOException ioe) {
               handleException(call, requestState, ioe);
             } finally {

File: imagepipeline/src/main/java/com/facebook/imagepipeline/producers/HttpURLConnectionNetworkFetchProducer.java
Patch:
@@ -59,7 +59,7 @@ public void run() {
               URL url = new URL(uri.toString());
               connection = (HttpURLConnection) url.openConnection();
               InputStream is = connection.getInputStream();
-              processResult(requestState, is, 0, false);
+              processResult(requestState, is, -1);
             } catch (Exception e) {
               onFailure(requestState, e, null);
             } finally {

File: drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java
Patch:
@@ -219,10 +219,11 @@ public void draw(Canvas canvas) {
     }
 
     // overlays
-    int numOverlays = (builder.getOverlays() != null) ? builder.getOverlays().size() : 0;
     int overlaysIndex = numLayers;
+    int numOverlays =
+        ((builder.getOverlays() != null) ? builder.getOverlays().size() : 0) +
+            ((builder.getPressedStateOverlay() != null) ? 1 : 0);
     numLayers += numOverlays;
-    numLayers += (builder.getPressedStateOverlay() != null) ? 1 : 0;
 
     // controller overlay
     mControllerOverlayIndex = numLayers++;

File: drawee/src/main/java/com/facebook/drawee/view/SimpleDraweeView.java
Patch:
@@ -65,6 +65,9 @@ public SimpleDraweeView(Context context, AttributeSet attrs, int defStyle) {
   }
 
   private void init() {
+    if (isInEditMode()) {
+      return;
+    }
     Preconditions.checkNotNull(
         sDraweeControllerBuilderSupplier,
         "SimpleDraweeView was not initialized!");

File: drawee/src/test/java/com/facebook/drawee/view/DraweeHolderTest.java
Patch:
@@ -166,8 +166,8 @@ public void testVisibilityStateTransitions() {
     verifyControllerLifecycleCalls(0, 1);
   }
 
-  private void verifyControllerLifecycleCalls(int numOnAttach, int numOnDetatch) {
+  private void verifyControllerLifecycleCalls(int numOnAttach, int numOnDetach) {
     mInOrderVerifier.verify(mController, times(numOnAttach)).onAttach();
-    mInOrderVerifier.verify(mController, times(numOnDetatch)).onDetach();
+    mInOrderVerifier.verify(mController, times(numOnDetach)).onDetach();
   }
 }

