File: library/src/main/java/top/zibin/luban/InputStreamProvider.java
Patch:
@@ -12,5 +12,7 @@ public interface InputStreamProvider {
 
   InputStream open() throws IOException;
 
+  void close();
+
   String getPath();
 }

File: library/src/main/java/top/zibin/luban/InputStreamProvider.java
Patch:
@@ -12,5 +12,7 @@ public interface InputStreamProvider {
 
   InputStream open() throws IOException;
 
+  void close();
+
   String getPath();
 }

File: example/src/main/java/top/zibin/luban/example/MainActivity.java
Patch:
@@ -37,6 +37,7 @@
 
 public class MainActivity extends AppCompatActivity {
   private static final String TAG = "Luban";
+  private static final int range = 3;
 
   private List<ImageBean> mImageList = new ArrayList<>();
   private ImageAdapter mAdapter = new ImageAdapter(mImageList);
@@ -93,7 +94,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
   private List<File> assetsToFiles() {
     final List<File> files = new ArrayList<>();
 
-    for (int i = 0; i < 3; i++) {
+    for (int i = 0; i < range; i++) {
       try {
         InputStream is = getResources().getAssets().open("img_" + i);
         File file = new File(getExternalFilesDir(null), "test_" + i);
@@ -122,7 +123,7 @@ private List<Uri> assetsToUri() {
     final List<Uri> uris = new ArrayList<>();
     final List<File> files = assetsToFiles();
 
-    for (int i = 0; i < 2; i++) {
+    for (int i = 0; i < range; i++) {
       Uri uri = Uri.fromFile(files.get(i));
       uris.add(uri);
     }

File: library/src/main/java/top/zibin/luban/Checker.java
Patch:
@@ -51,7 +51,7 @@ String extSuffix(String path) {
     return path.substring(path.lastIndexOf("."), path.length());
   }
 
-  boolean isNeedCompress(int leastCompressSize, String path) {
+  boolean needCompress(int leastCompressSize, String path) {
     if (leastCompressSize > 0) {
       File source = new File(path);
       return source.exists() && source.length() > (leastCompressSize << 10);

File: library/src/main/java/top/zibin/luban/InputStreamProvider.java
Patch:
@@ -5,10 +5,11 @@
 
 /**
  * 通过此接口获取输入流，以兼容文件、FileProvider方式获取到的图片
+ * <p>
  * Get the input stream through this interface, and obtain the picture using compatible files and FileProvider
- * Created by MrFeng on 2018/4/23.
  */
 public interface InputStreamProvider {
+
   InputStream open() throws IOException;
 
   String getPath();

File: library/src/main/java/top/zibin/luban/Luban.java
Patch:
@@ -227,7 +227,7 @@ private File thirdCompress(@NonNull File file) {
             int multiple = height / 1280 == 0 ? 1 : height / 1280;
             thumbW = width / multiple;
             thumbH = height / multiple;
-            size = (thumbW * thumbH) / (1440.0 * 2560.0) * 200;
+            size = (thumbW * thumbH) / (1440.0 * 2560.0) * 400;
             size = size < 100 ? 100 : size;
         } else {
             int multiple = (int) Math.ceil(height / (1280.0 / scale));
@@ -425,7 +425,7 @@ private File saveImage(String filePath, Bitmap bitmap, long size) {
         int options = 100;
         bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);
 
-        while (stream.toByteArray().length / 1024 > size) {
+        while (stream.toByteArray().length / 1024 > size && options > 6) {
             stream.reset();
             options -= 6;
             bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);

File: library/src/main/java/top/zibin/luban/Luban.java
Patch:
@@ -425,7 +425,7 @@ private File saveImage(String filePath, Bitmap bitmap, long size) {
         int options = 100;
         bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);
 
-        while (stream.toByteArray().length / 1024 > size) {
+        while (stream.toByteArray().length / 1024 > size && options > 6) {
             stream.reset();
             options -= 6;
             bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);

File: library/src/main/java/top/zibin/luban/Luban.java
Patch:
@@ -398,6 +398,8 @@ private File saveImage(String filePath, Bitmap bitmap, long size) {
         int options = 100;
         bitmap.compress(Bitmap.CompressFormat.JPEG, options, stream);
 
+        int i = (int) (size / stream.toByteArray().length / 1024.0 * 100);
+
         while (stream.toByteArray().length / 1024 > size) {
             stream.reset();
             options -= 6;

File: library/src/main/java/top/zibin/luban/Luban.java
Patch:
@@ -132,14 +132,14 @@ private void thirdCompress(@NonNull String filePath) {
                 scale = (thumbW * thumbH) / Math.pow(2560, 2) * 300;
                 scale = scale < 100 ? 100 : scale;
             } else {
-                int multiple = height / 1280;
+                int multiple = height / 1280 == 0 ? 1 : height / 1280;
                 thumbW = width / multiple;
                 thumbH = height / multiple;
                 scale = (thumbW * thumbH) / Math.pow(2560, 2) * 300;
                 scale = scale < 100 ? 100 : scale;
             }
         } else if (c <= 0.5625 && c > 0.5) {
-            int multiple = height / 1280;
+            int multiple = height / 1280 == 0 ? 1 : height / 1280;
             thumbW = width / multiple;
             thumbH = height / multiple;
             scale = (thumbW * thumbH) / (1440.0 * 2560.0) * 200;

File: library/src/main/java/top/zibin/luban/OnCompressListener.java
Patch:
@@ -4,4 +4,6 @@
 
 public interface OnCompressListener {
     void onSuccess(File file);
+
+    void onError(Exception e);
 }

