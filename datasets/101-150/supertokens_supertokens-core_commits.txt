File: src/main/java/io/supertokens/inmemorydb/queries/GeneralQueries.java
Patch:
@@ -258,6 +258,7 @@ public static void createTablesIfNotExists(Start start, Main main) throws SQLExc
 
             // index
             update(start, getQueryToCreateSessionExpiryIndex(start), NO_OP_SETTER);
+            update(start, getQueryToCreateSessionAppIdUserIdIndex(start), NO_OP_SETTER);
         }
 
         if (!doesTableExists(start, Config.getConfig(start).getTenantConfigsTable())) {

File: src/test/java/io/supertokens/test/accountlinking/TestGetUserSpeed.java
Patch:
@@ -26,7 +26,6 @@
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
 import io.supertokens.thirdparty.ThirdParty;
-import io.supertokens.version.Version;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -168,7 +167,7 @@ public void testUserCreationLinkingAndGetByIdSpeedsCommon(TestingProcessManager.
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
     }
 
-    @Test
+    //@Test
     public void testUserCreationLinkingAndGetByIdSpeedsWithoutMinIdle() throws Exception {
         String[] args = {"../"};
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false);

File: src/test/java/io/supertokens/test/multitenant/api/TestMultitenancyAPIHelper.java
Patch:
@@ -149,7 +149,7 @@ public static JsonObject createApp(Main main, TenantIdentifier sourceTenant, Str
 
         JsonObject response = HttpRequestForTesting.sendJsonPUTRequest(main, "",
                 HttpRequestForTesting.getMultitenantUrl(sourceTenant, "/recipe/multitenancy/app"),
-                requestBody, 1000, 2500, null,
+                requestBody, 10000, 25000, null,
                 version.get(), "multitenancy");
 
         assertEquals("OK", response.getAsJsonPrimitive("status").getAsString());

File: src/test/java/io/supertokens/test/emailpassword/PasswordHashingTest.java
Patch:
@@ -676,7 +676,7 @@ public void differentPasswordHashGeneratedBcrypt() throws Exception {
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
     }
 
-    @Test
+    //@Test
     public void parallelImportUserSignInFirebaseScrypt() throws Exception {
         String[] args = {"../"};
 
@@ -757,7 +757,7 @@ public void parallelImportUserSignInFirebaseScrypt() throws Exception {
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
     }
 
-    @Test
+    //@Test
     public void parallelImportUserSignInFirebaseScryptWithPoolSize4() throws Exception {
         String[] args = {"../"};
 
@@ -839,7 +839,7 @@ public void parallelImportUserSignInFirebaseScryptWithPoolSize4() throws Excepti
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
     }
 
-    @Test
+    //@Test
     public void parallelSignUpSignIn() throws Exception {
         String[] args = {"../"};
 

File: src/main/java/io/supertokens/bulkimport/BulkImport.java
Patch:
@@ -115,8 +115,9 @@ public static void addUsers(AppIdentifier appIdentifier, Storage storage, List<B
                     for (BulkImportUser user : users) {
                         user.id = Utils.getUUID();
                     }
+                } else {
+                    throw sqe;
                 }
-                throw sqe;
             }
         }
     }

File: src/main/java/io/supertokens/bulkimport/BulkImport.java
Patch:
@@ -116,6 +116,7 @@ public static void addUsers(AppIdentifier appIdentifier, Storage storage, List<B
                         user.id = Utils.getUUID();
                     }
                 }
+                throw sqe;
             }
         }
     }

File: src/main/java/io/supertokens/cronjobs/bulkimport/ProcessBulkUsersImportWorker.java
Patch:
@@ -186,7 +186,7 @@ private void handleProcessUserExceptions(AppIdentifier appIdentifier, List<BulkI
         } else if (e instanceof InvalidConfigException) {
             errorMessage[0] = e.getMessage();
         } else if (e instanceof BulkImportBatchInsertException) {
-            handleBulkImportException(usersBatch, (BulkImportBatchInsertException)e, bulkImportUserIdToErrorMessage);
+            handleBulkImportException(usersBatch, (BulkImportBatchInsertException) e, bulkImportUserIdToErrorMessage);
         }
 
         try {

File: src/main/java/io/supertokens/webserver/api/oauth/CreateUpdateOrGetOAuthClientAPI.java
Patch:
@@ -130,7 +130,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             AppIdentifier appIdentifier = getAppIdentifier(req);
             Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
-            input.addProperty("owner", appIdentifier.getAppId());
+            input.addProperty("owner", appIdentifier.getConnectionUriDomain() + "_" + appIdentifier.getAppId());
 
             HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyJsonPOST(
                 main, req, resp, 

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthClientListAPI.java
Patch:
@@ -51,7 +51,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             AppIdentifier appIdentifier = getAppIdentifier(req);
             Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
             Map<String, String> queryParams = OAuthProxyHelper.defaultGetQueryParamsFromRequest(req);
-            queryParams.put("owner", appIdentifier.getAppId());
+            queryParams.put("owner", appIdentifier.getConnectionUriDomain() + "_" + appIdentifier.getAppId());
 
             HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyGET(
                 main, req, resp,

File: src/test/java/io/supertokens/test/multitenant/TestAppData.java
Patch:
@@ -179,7 +179,9 @@ null, null, new JsonObject()
         UserIdMapping.createUserIdMapping(process.getProcess(), app.toAppIdentifier(), appStorage,
                 plUser.user.getSupertokensUserId(), "externalid", null, false);
 
-        BulkImport.addUsers(app.toAppIdentifier(), appStorage, BulkImportTestUtils.generateBulkImportUser(1));
+        if(!StorageLayer.isInMemDb(process.getProcess())) {
+            BulkImport.addUsers(app.toAppIdentifier(), appStorage, BulkImportTestUtils.generateBulkImportUser(1));
+        }
 
         OAuth.addOrUpdateClient(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "secret123", false, false);
         OAuth.createLogoutRequestAndReturnRedirectUri(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "http://localhost", "sessionHandle", "state");

File: src/test/java/io/supertokens/test/bulkimport/BulkImportFlowTest.java
Patch:
@@ -87,8 +87,8 @@ public void testWithALotOfUsers() throws Exception {
 
         // upload a bunch of users through the API
         {
-            for (int i = 0; i < (NUMBER_OF_USERS_TO_UPLOAD / 10000); i++) {
-                JsonObject request = generateUsersJson(10000, i * 10000); // API allows 10k users upload at once
+            for (int i = 0; i < (NUMBER_OF_USERS_TO_UPLOAD / 1000); i++) {
+                JsonObject request = generateUsersJson(1000, i * 1000); // API allows 10k users upload at once
                 JsonObject response = uploadBulkImportUsersJson(main, request);
                 assertEquals("OK", response.get("status").getAsString());
             }

File: src/test/java/io/supertokens/test/bulkimport/BulkImportFlowTest.java
Patch:
@@ -73,7 +73,7 @@ public void beforeEach() {
     public void testWithALotOfUsers() throws Exception {
         Main main = startCronProcess("14");
 
-        int NUMBER_OF_USERS_TO_UPLOAD = 100000;
+        int NUMBER_OF_USERS_TO_UPLOAD = 10000;
 
         if (StorageLayer.getBaseStorage(main).getType() != STORAGE_TYPE.SQL || StorageLayer.isInMemDb(main)) {
             return;
@@ -115,6 +115,7 @@ public void testWithALotOfUsers() throws Exception {
                     int failedUsersNumber = loadBulkImportUsersCountWithStatus(main,
                             BulkImportStorage.BULK_IMPORT_USER_STATUS.FAILED).get("count").getAsInt();
                     count = newUsersNumber + processingUsersNumber;
+                    System.out.println("Remaining users: " + count);
 
                     if (count == 0) {
                         break;

File: src/test/java/io/supertokens/test/Utils.java
Patch:
@@ -83,6 +83,7 @@ public static String getCdiVersionStringLatestForTests() {
 
     public static void reset() {
         Main.isTesting = true;
+        Main.isTesting_skipBulkImportUserValidationInCronJob = false;
         PluginInterfaceTesting.isTesting = true;
         Main.makeConsolePrintSilent = true;
         String installDir = "../";

File: src/test/java/io/supertokens/test/multitenant/api/TestTenantUserAssociation.java
Patch:
@@ -31,6 +31,7 @@
 import io.supertokens.pluginInterface.STORAGE_TYPE;
 import io.supertokens.pluginInterface.Storage;
 import io.supertokens.pluginInterface.authRecipe.AuthRecipeUserInfo;
+import io.supertokens.pluginInterface.bulkimport.BulkImportStorage;
 import io.supertokens.pluginInterface.exceptions.InvalidConfigException;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.jwt.JWTRecipeStorage;
@@ -200,11 +201,13 @@ public void testUserDisassociationForNotAuthRecipes() throws Exception {
             if (name.equals(UserMetadataStorage.class.getName())
                     || name.equals(JWTRecipeStorage.class.getName())
                     || name.equals(ActiveUsersStorage.class.getName())
+                    || name.equals(BulkImportStorage.class.getName())
                     || name.equals(OAuthStorage.class.getName())
             ) {
                 // user metadata is app specific and does not have any tenant specific data
                 // JWT storage does not have any user specific data
                 // Active users storage does not have tenant specific data
+                // BulkImportStorage
                 continue;
             }
 

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -532,10 +532,10 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
                 } else if (rootCause instanceof BadPermissionException) {
                     sendTextResponse(403, rootCause.getMessage(), resp);
                 } else {
-                    sendTextResponse(500, rootCause.getMessage(), resp);
+                    sendTextResponse(500, rootCause.toString(), resp);
                 }
             } else {
-                sendTextResponse(500, e.getMessage(), resp);
+                sendTextResponse(500, e.toString(), resp);
             }
         }
         Logging.info(main, tenantIdentifier, "API ended: " + req.getRequestURI() + ". Method: " + req.getMethod(),

File: src/test/java/io/supertokens/test/PathRouterTest.java
Patch:
@@ -125,7 +125,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 fail();
             } catch (HttpResponseException e) {
                 assertEquals(500, e.statusCode);
-                assertEquals("Http error. Status Code: 500. Message: Test Exception", e.getMessage());
+                assertEquals("Http error. Status Code: 500. Message: java.lang.RuntimeException: Test Exception", e.getMessage());
             }
         }
 
@@ -137,7 +137,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
                 fail();
             } catch (HttpResponseException e) {
                 assertEquals(500, e.statusCode);
-                assertEquals("Http error. Status Code: 500. Message: Runtime Exception", e.getMessage());
+                assertEquals("Http error. Status Code: 500. Message: java.lang.RuntimeException: Runtime Exception", e.getMessage());
             }
         }
     }

File: src/test/java/io/supertokens/test/emailpassword/api/ImportUserWithPasswordHashAPITest.java
Patch:
@@ -297,7 +297,7 @@ public void testImportingAUsesrFromFirebaseWithoutSettingTheSignerKey() throws E
             throw new Exception("Should not come here");
         } catch (io.supertokens.test.httpRequest.HttpResponseException e) {
             assertTrue(e.statusCode == 500
-                    && e.getMessage().equals("Http error. Status Code: 500. Message: 'firebase_password_hashing_signer_key' cannot be null"));
+                    && e.getMessage().equals("Http error. Status Code: 500. Message: java.lang.IllegalStateException: 'firebase_password_hashing_signer_key' cannot be null"));
         }
 
         process.kill();
@@ -388,7 +388,7 @@ public void testSigningInAUserWithFirebasePasswordHashWithoutSettingTheSignerKey
             throw new Exception("Should not come here");
         } catch (io.supertokens.test.httpRequest.HttpResponseException e) {
             assertTrue(e.statusCode == 500
-                    && e.getMessage().equals("Http error. Status Code: 500. Message: 'firebase_password_hashing_signer_key' cannot be null"));
+                    && e.getMessage().equals("Http error. Status Code: 500. Message: java.lang.IllegalStateException: 'firebase_password_hashing_signer_key' cannot be null"));
         }
 
         process.kill();

File: src/main/java/io/supertokens/inmemorydb/Start.java
Patch:
@@ -3195,11 +3195,11 @@ public void deleteOAuthLogoutChallengesBefore(long time) throws StorageQueryExce
     @Override
     public void createOrUpdateOAuthSession(AppIdentifier appIdentifier, String gid, String clientId,
                                            String externalRefreshToken, String internalRefreshToken,
-                                           String sessionHandle, List<String> jtis, long exp)
+                                           String sessionHandle, String jti, long exp)
             throws StorageQueryException, OAuthClientNotFoundException {
         try {
             OAuthQueries.createOrUpdateOAuthSession(this, appIdentifier, gid, clientId, externalRefreshToken,
-                    internalRefreshToken, sessionHandle, jtis, exp);
+                    internalRefreshToken, sessionHandle, jti, exp);
         } catch (SQLException e) {
             if (e instanceof SQLiteException) {
                 String errorMessage = e.getMessage();

File: src/main/java/io/supertokens/oauth/OAuth.java
Patch:
@@ -659,10 +659,10 @@ public static String getInternalRefreshToken(Main main, AppIdentifier appIdentif
 
     public static void createOrUpdateOauthSession(Main main, AppIdentifier appIdentifier, Storage storage,
                                                   String clientId, String gid, String externalRefreshToken, String internalRefreshToken,
-                                                  String sessionHandle, List<String> jtis, long exp)
+                                                  String sessionHandle, String jti, long exp)
             throws StorageQueryException, OAuthClientNotFoundException {
         OAuthStorage oauthStorage = StorageUtils.getOAuthStorage(storage);
         oauthStorage.createOrUpdateOAuthSession(appIdentifier, gid, clientId, externalRefreshToken, internalRefreshToken,
-                sessionHandle, jtis, exp);
+                sessionHandle, jti, exp);
     }
 }

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAuthAPI.java
Patch:
@@ -135,7 +135,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                                 updateLastActive(appIdentifier, sessionHandle);
                             }
 
-                            OAuth.createOrUpdateOauthSession(main, appIdentifier, storage, clientId, gid, null, null, sessionHandle, List.of(jti), exp);
+                            OAuth.createOrUpdateOauthSession(main, appIdentifier, storage, clientId, gid, null, null, sessionHandle, jti, exp);
                         }
                     }
                 }

File: src/test/java/io/supertokens/test/multitenant/TestAppData.java
Patch:
@@ -28,7 +28,6 @@
 import io.supertokens.featureflag.FeatureFlagTestContent;
 import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.oauth.OAuth;
-import io.supertokens.oauth.OAuthToken;
 import io.supertokens.passwordless.Passwordless;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
 import io.supertokens.pluginInterface.Storage;
@@ -59,7 +58,6 @@
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
-import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -183,7 +181,7 @@ null, null, new JsonObject()
         OAuth.createLogoutRequestAndReturnRedirectUri(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "http://localhost", "sessionHandle", "state");
         ((OAuthStorage) appStorage).addOAuthM2MTokenForStats(app.toAppIdentifier(), "test", 1000, 2000);
         OAuth.revokeSessionHandle(process.getProcess(), app.toAppIdentifier(), appStorage, "sessionHandle");
-        OAuth.createOrUpdateOauthSession(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "test-gid", null, null, "sessionHandle", List.of("jti"), 0);
+        OAuth.createOrUpdateOauthSession(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "test-gid", null, null, "sessionHandle", "jti", 0);
 
         String[] tablesThatHaveData = appStorage
                 .getAllTablesInTheDatabaseThatHasDataForAppId(app.getAppId());

File: src/main/java/io/supertokens/inmemorydb/Start.java
Patch:
@@ -3195,11 +3195,11 @@ public void deleteOAuthLogoutChallengesBefore(long time) throws StorageQueryExce
     @Override
     public void createOrUpdateOAuthSession(AppIdentifier appIdentifier, String gid, String clientId,
                                            String externalRefreshToken, String internalRefreshToken,
-                                           String sessionHandle, List<String> jtis, long exp)
+                                           String sessionHandle, String jti, long exp)
             throws StorageQueryException, OAuthClientNotFoundException {
         try {
             OAuthQueries.createOrUpdateOAuthSession(this, appIdentifier, gid, clientId, externalRefreshToken,
-                    internalRefreshToken, sessionHandle, jtis, exp);
+                    internalRefreshToken, sessionHandle, jti, exp);
         } catch (SQLException e) {
             if (e instanceof SQLiteException) {
                 String errorMessage = e.getMessage();

File: src/main/java/io/supertokens/oauth/OAuth.java
Patch:
@@ -659,10 +659,10 @@ public static String getInternalRefreshToken(Main main, AppIdentifier appIdentif
 
     public static void createOrUpdateOauthSession(Main main, AppIdentifier appIdentifier, Storage storage,
                                                   String clientId, String gid, String externalRefreshToken, String internalRefreshToken,
-                                                  String sessionHandle, List<String> jtis, long exp)
+                                                  String sessionHandle, String jti, long exp)
             throws StorageQueryException, OAuthClientNotFoundException {
         OAuthStorage oauthStorage = StorageUtils.getOAuthStorage(storage);
         oauthStorage.createOrUpdateOAuthSession(appIdentifier, gid, clientId, externalRefreshToken, internalRefreshToken,
-                sessionHandle, jtis, exp);
+                sessionHandle, jti, exp);
     }
 }

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAuthAPI.java
Patch:
@@ -135,7 +135,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                                 updateLastActive(appIdentifier, sessionHandle);
                             }
 
-                            OAuth.createOrUpdateOauthSession(main, appIdentifier, storage, clientId, gid, null, null, sessionHandle, List.of(jti), exp);
+                            OAuth.createOrUpdateOauthSession(main, appIdentifier, storage, clientId, gid, null, null, sessionHandle, jti, exp);
                         }
                     }
                 }

File: src/test/java/io/supertokens/test/multitenant/TestAppData.java
Patch:
@@ -28,7 +28,6 @@
 import io.supertokens.featureflag.FeatureFlagTestContent;
 import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.oauth.OAuth;
-import io.supertokens.oauth.OAuthToken;
 import io.supertokens.passwordless.Passwordless;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
 import io.supertokens.pluginInterface.Storage;
@@ -59,7 +58,6 @@
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
-import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -183,7 +181,7 @@ null, null, new JsonObject()
         OAuth.createLogoutRequestAndReturnRedirectUri(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "http://localhost", "sessionHandle", "state");
         ((OAuthStorage) appStorage).addOAuthM2MTokenForStats(app.toAppIdentifier(), "test", 1000, 2000);
         OAuth.revokeSessionHandle(process.getProcess(), app.toAppIdentifier(), appStorage, "sessionHandle");
-        OAuth.createOrUpdateOauthSession(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "test-gid", null, null, "sessionHandle", List.of("jti"), 0);
+        OAuth.createOrUpdateOauthSession(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "test-gid", null, null, "sessionHandle", "jti", 0);
 
         String[] tablesThatHaveData = appStorage
                 .getAllTablesInTheDatabaseThatHasDataForAppId(app.getAppId());

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -20,7 +20,7 @@
 import io.supertokens.config.Config;
 import io.supertokens.config.CoreConfig;
 import io.supertokens.cronjobs.Cronjobs;
-import io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthSessionsAndChallenges;
+import io.supertokens.cronjobs.cleanupOAuthSessionsAndChallenges.CleanupOAuthSessionsAndChallenges;
 import io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys;
 import io.supertokens.cronjobs.deleteExpiredDashboardSessions.DeleteExpiredDashboardSessions;
 import io.supertokens.cronjobs.deleteExpiredEmailVerificationTokens.DeleteExpiredEmailVerificationTokens;

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -1049,7 +1049,7 @@ public void testThatThereAreTasksOfAllCronTaskClassesAndHaveCorrectIntervals() t
         intervals.put("io.supertokens.cronjobs.telemetry.Telemetry", 86400);
         intervals.put("io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys",
                 86400);
-        intervals.put("io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthRevokeListAndChallenges",
+        intervals.put("io.supertokens.cronjobs.cleanupOAuthSessionsAndChallenges.CleanupOAuthSessionsAndChallenges",
                 86400);
 
         Map<String, Integer> delays = new HashMap<>();
@@ -1065,7 +1065,7 @@ public void testThatThereAreTasksOfAllCronTaskClassesAndHaveCorrectIntervals() t
         delays.put("io.supertokens.cronjobs.telemetry.Telemetry", 0);
         delays.put("io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys",
                 0);
-        delays.put("io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthRevokeListAndChallenges",
+        delays.put("io.supertokens.cronjobs.cleanupOAuthSessionsAndChallenges.CleanupOAuthSessionsAndChallenges",
                 0);
 
         List<CronTask> allTasks = Cronjobs.getInstance(process.getProcess()).getTasks();

File: src/test/java/io/supertokens/test/multitenant/TestAppData.java
Patch:
@@ -59,6 +59,7 @@
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
+import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -100,6 +101,7 @@ public void testThatDeletingAppDeleteDataFromAllTables() throws Exception {
         FeatureFlagTestContent.getInstance(process.getProcess())
                 .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES,
                         new EE_FEATURES[]{EE_FEATURES.MULTI_TENANCY, EE_FEATURES.MFA});
+        Utils.setValueInConfig("oauth_client_secret_encryption_key", "secret");
         process.startProcess();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
@@ -181,6 +183,7 @@ null, null, new JsonObject()
         OAuth.createLogoutRequestAndReturnRedirectUri(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "http://localhost", "sessionHandle", "state");
         ((OAuthStorage) appStorage).addOAuthM2MTokenForStats(app.toAppIdentifier(), "test", 1000, 2000);
         OAuth.revokeSessionHandle(process.getProcess(), app.toAppIdentifier(), appStorage, "sessionHandle");
+        OAuth.createOrUpdateOauthSession(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "test-gid", null, null, "sessionHandle", List.of("jti"), 0);
 
         String[] tablesThatHaveData = appStorage
                 .getAllTablesInTheDatabaseThatHasDataForAppId(app.getAppId());

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -20,7 +20,7 @@
 import io.supertokens.config.Config;
 import io.supertokens.config.CoreConfig;
 import io.supertokens.cronjobs.Cronjobs;
-import io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthSessionsAndChallenges;
+import io.supertokens.cronjobs.cleanupOAuthSessionsAndChallenges.CleanupOAuthSessionsAndChallenges;
 import io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys;
 import io.supertokens.cronjobs.deleteExpiredDashboardSessions.DeleteExpiredDashboardSessions;
 import io.supertokens.cronjobs.deleteExpiredEmailVerificationTokens.DeleteExpiredEmailVerificationTokens;

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -1049,7 +1049,7 @@ public void testThatThereAreTasksOfAllCronTaskClassesAndHaveCorrectIntervals() t
         intervals.put("io.supertokens.cronjobs.telemetry.Telemetry", 86400);
         intervals.put("io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys",
                 86400);
-        intervals.put("io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthRevokeListAndChallenges",
+        intervals.put("io.supertokens.cronjobs.cleanupOAuthSessionsAndChallenges.CleanupOAuthSessionsAndChallenges",
                 86400);
 
         Map<String, Integer> delays = new HashMap<>();
@@ -1065,7 +1065,7 @@ public void testThatThereAreTasksOfAllCronTaskClassesAndHaveCorrectIntervals() t
         delays.put("io.supertokens.cronjobs.telemetry.Telemetry", 0);
         delays.put("io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys",
                 0);
-        delays.put("io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthRevokeListAndChallenges",
+        delays.put("io.supertokens.cronjobs.cleanupOAuthSessionsAndChallenges.CleanupOAuthSessionsAndChallenges",
                 0);
 
         List<CronTask> allTasks = Cronjobs.getInstance(process.getProcess()).getTasks();

File: src/test/java/io/supertokens/test/multitenant/TestAppData.java
Patch:
@@ -59,6 +59,7 @@
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
+import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -100,6 +101,7 @@ public void testThatDeletingAppDeleteDataFromAllTables() throws Exception {
         FeatureFlagTestContent.getInstance(process.getProcess())
                 .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES,
                         new EE_FEATURES[]{EE_FEATURES.MULTI_TENANCY, EE_FEATURES.MFA});
+        Utils.setValueInConfig("oauth_client_secret_encryption_key", "secret");
         process.startProcess();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
@@ -181,6 +183,7 @@ null, null, new JsonObject()
         OAuth.createLogoutRequestAndReturnRedirectUri(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "http://localhost", "sessionHandle", "state");
         ((OAuthStorage) appStorage).addOAuthM2MTokenForStats(app.toAppIdentifier(), "test", 1000, 2000);
         OAuth.revokeSessionHandle(process.getProcess(), app.toAppIdentifier(), appStorage, "sessionHandle");
+        OAuth.createOrUpdateOauthSession(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "test-gid", null, null, "sessionHandle", List.of("jti"), 0);
 
         String[] tablesThatHaveData = appStorage
                 .getAllTablesInTheDatabaseThatHasDataForAppId(app.getAppId());

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAcceptAuthConsentRequestAPI.java
Patch:
@@ -47,6 +47,9 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         accessToken.add("initialPayload", initialAccessTokenPayload);
 
         JsonObject idToken = new JsonObject();
+        JsonObject idTokenExt = new JsonObject();
+        idTokenExt.addProperty("sessionHandle", sessionHandle);
+        idToken.add("ext", idTokenExt);
         idToken.add("initialPayload", initialIdTokenPayload);
 
         // remove the above from input

File: src/main/java/io/supertokens/oauth/OAuth.java
Patch:
@@ -660,7 +660,7 @@ public static String getInternalRefreshToken(Main main, AppIdentifier appIdentif
     public static void createOrUpdateOauthSession(Main main, AppIdentifier appIdentifier, Storage storage,
                                                   String clientId, String gid, String externalRefreshToken, String internalRefreshToken,
                                                   String sessionHandle, List<String> jtis, long exp)
-            throws StorageQueryException, TenantOrAppNotFoundException {
+            throws StorageQueryException, OAuthClientNotFoundException {
         OAuthStorage oauthStorage = StorageUtils.getOAuthStorage(storage);
         oauthStorage.createOrUpdateOAuthSession(appIdentifier, gid, clientId, externalRefreshToken, internalRefreshToken,
                 sessionHandle, jtis, exp);

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAuthAPI.java
Patch:
@@ -30,6 +30,7 @@
 import io.supertokens.pluginInterface.multitenancy.AppIdentifier;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
+import io.supertokens.pluginInterface.oauth.exception.OAuthClientNotFoundException;
 import io.supertokens.pluginInterface.session.SessionInfo;
 import io.supertokens.pluginInterface.useridmapping.UserIdMapping;
 import io.supertokens.session.Session;
@@ -157,7 +158,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 super.sendJsonResponse(200, finalResponse, resp);
             }
 
-        } catch (IOException | TenantOrAppNotFoundException | BadPermissionException | StorageQueryException e) {
+        } catch (IOException | TenantOrAppNotFoundException | BadPermissionException | StorageQueryException | OAuthClientNotFoundException e) {
             throw new ServletException(e);
         }
     }

File: src/main/java/io/supertokens/inmemorydb/PreparedStatementValueSetter.java
Patch:
@@ -16,8 +16,6 @@
 
 package io.supertokens.inmemorydb;
 
-import io.supertokens.pluginInterface.exceptions.StorageQueryException;
-
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
@@ -26,5 +24,5 @@ public interface PreparedStatementValueSetter {
     PreparedStatementValueSetter NO_OP_SETTER = pst -> {
     };
 
-    void setValues(PreparedStatement pst) throws SQLException, StorageQueryException;
+    void setValues(PreparedStatement pst) throws SQLException;
 }

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAuthAPI.java
Patch:
@@ -134,7 +134,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                                 updateLastActive(appIdentifier, sessionHandle);
                             }
 
-                            OAuth.createOrUpdateRefreshTokenMapping(main, appIdentifier, storage, clientId, gid, null, null, sessionHandle, List.of(jti), exp);
+                            OAuth.createOrUpdateOauthSession(main, appIdentifier, storage, clientId, gid, null, null, sessionHandle, List.of(jti), exp);
                         }
                     }
                 }

File: src/main/java/io/supertokens/webserver/api/oauth/RevokeOAuthTokenAPI.java
Patch:
@@ -131,7 +131,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     // Success response would mean that the clientId/secret has been validated
                     if (gid != null) {
                         try {
-                            OAuth.revokeRefreshToken(main, appIdentifier, storage, gid, exp);
+                            OAuth.revokeRefreshToken(main, appIdentifier, storage, gid);
                         } catch (StorageQueryException | NoSuchAlgorithmException e) {
                             throw new ServletException(e);
                         }

File: src/test/java/io/supertokens/test/oauth/api/TestRevoke5_2.java
Patch:
@@ -179,7 +179,7 @@ public void testRevokeClientId() throws Exception {
 
         Thread.sleep(1000);
 
-        // test introspect refresh token (allowed)
+        // test introspect refresh token (should be revoked also - not allowed)
         JsonObject introspectResponse = introspectToken(process.getProcess(),
                 tokenResponse.get("refresh_token").getAsString());
         assertEquals("OK", introspectResponse.get("status").getAsString());
@@ -190,7 +190,7 @@ public void testRevokeClientId() throws Exception {
         assertEquals("OK", introspectResponse.get("status").getAsString());
         assertFalse(introspectResponse.get("active").getAsBoolean());
 
-        // test refresh token (allowed)
+        // test refresh token (not allowed)
         JsonObject refreshResponse = refreshToken(process.getProcess(), client,
                 tokenResponse.get("refresh_token").getAsString());
         assertEquals("OAUTH_ERROR", refreshResponse.get("status").getAsString());

File: src/main/java/io/supertokens/inmemorydb/queries/GeneralQueries.java
Patch:
@@ -438,6 +438,7 @@ public static void createTablesIfNotExists(Start start, Main main) throws SQLExc
 
             // index
             update(start, OAuthQueries.getQueryToCreateOAuthSessionsExpIndex(start), NO_OP_SETTER);
+            update(start, OAuthQueries.getQueryToCreateOAuthSessionsExternalRefreshTokenIndex(start), NO_OP_SETTER);
         }
 
         if (!doesTableExists(start, Config.getConfig(start).getOAuthM2MTokensTable())) {

File: src/main/java/io/supertokens/inmemorydb/queries/GeneralQueries.java
Patch:
@@ -437,7 +437,7 @@ public static void createTablesIfNotExists(Start start, Main main) throws SQLExc
             update(start, OAuthQueries.getQueryToCreateOAuthSessionsTable(start), NO_OP_SETTER);
 
             // index
-            update(start, OAuthQueries.getQueryToCreateOAuthSessionsTable(start), NO_OP_SETTER);
+            update(start, OAuthQueries.getQueryToCreateOAuthSessionsExpIndex(start), NO_OP_SETTER);
         }
 
         if (!doesTableExists(start, Config.getConfig(start).getOAuthM2MTokensTable())) {

File: src/main/java/io/supertokens/inmemorydb/queries/OAuthQueries.java
Patch:
@@ -65,9 +65,9 @@ public static String getQueryToCreateOAuthSessionsTable(Start start) {
         // @formatter:on
     }
 
-    public static String getQueryToCreateOAuthRefreshTokenMappingExpIndex(Start start) {
+    public static String getQueryToCreateOAuthSessionsExpIndex(Start start) {
         String oAuth2SessionTable = Config.getConfig(start).getOAuthSessionsTable();
-        return "CREATE INDEX IF NOT EXISTS oauth_refresh_token_mapping_exp_index ON "
+        return "CREATE INDEX IF NOT EXISTS oauth_session_exp_index ON "
                 + oAuth2SessionTable + "(exp DESC);";
     }
 

File: src/main/java/io/supertokens/inmemorydb/PreparedStatementValueSetter.java
Patch:
@@ -16,6 +16,8 @@
 
 package io.supertokens.inmemorydb;
 
+import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
@@ -24,5 +26,5 @@ public interface PreparedStatementValueSetter {
     PreparedStatementValueSetter NO_OP_SETTER = pst -> {
     };
 
-    void setValues(PreparedStatement pst) throws SQLException;
+    void setValues(PreparedStatement pst) throws SQLException, StorageQueryException;
 }

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAuthAPI.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
-
 import io.supertokens.ActiveUsers;
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
@@ -107,7 +106,6 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
                 redirectTo = OAuth.transformTokensInAuthRedirect(main, appIdentifier, storage, redirectTo, iss, accessTokenUpdate, idTokenUpdate, useDynamicKey);
 
-
                 if (redirectTo.contains("#")) {
                     String tokensPart = redirectTo.substring(redirectTo.indexOf("#") + 1);
                     String[] parts = tokensPart.split("&");

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenAPI.java
Patch:
@@ -121,7 +121,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 String refreshToken = InputParser.parseStringOrThrowError(bodyFromSDK, "refresh_token", false);
                 inputRefreshToken = refreshToken;
 
-                String internalRefreshToken = OAuth.getOAuthProviderRefreshToken(main, appIdentifier, storage, refreshToken);
+                String internalRefreshToken = OAuth.getInternalRefreshToken(main, appIdentifier, storage, refreshToken);
 
                 Map<String, String> formFieldsForTokenIntrospect = new HashMap<>();
                 formFieldsForTokenIntrospect.put("token", internalRefreshToken);

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenIntrospectAPI.java
Patch:
@@ -67,7 +67,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 AppIdentifier appIdentifier = getAppIdentifier(req);
                 Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
-                token = OAuth.getOAuthProviderRefreshToken(main, appIdentifier, storage, token);
+                token = OAuth.getInternalRefreshToken(main, appIdentifier, storage, token);
                 formFields.put("token", token);
 
                 HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyFormPOST(

File: src/main/java/io/supertokens/webserver/api/oauth/RevokeOAuthTokenAPI.java
Patch:
@@ -46,7 +46,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
             if (token.startsWith("st_rt_")) {
-                token = OAuth.getOAuthProviderRefreshToken(main, appIdentifier, storage, token);
+                token = OAuth.getInternalRefreshToken(main, appIdentifier, storage, token);
 
                 String gid = null;
                 long exp = -1;

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenAPI.java
Patch:
@@ -106,7 +106,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             String[] parsedHeader = Utils.convertFromBase64(authorizationHeader.replaceFirst("^Basic ", "").trim()).split(":");
             clientId = parsedHeader[0];
         } else {
-            clientId = InputParser.parseStringOrThrowError(input, formFields.get("client_id"), false);
+            clientId = formFields.get("client_id");
         }
 
         try {

File: src/main/java/io/supertokens/oauth/OAuth.java
Patch:
@@ -255,7 +255,7 @@ public static HttpRequestForOAuthProvider.Response doOAuthProxyJsonDELETE(Main m
         }
         String fullUrl = baseURL + path;
 
-        HttpRequestForOAuthProvider.Response response = HttpRequestForOAuthProvider.doJsonDelete(fullUrl, queryParams, headers, jsonInput);
+        HttpRequestForOAuthProvider.Response response = HttpRequestForOAuthProvider.doJsonDelete(fullUrl, headers, queryParams, jsonInput);
 
         // Response transformations
         response.jsonResponse = Transformations.transformJsonResponseFromHydra(main, appIdentifier, response.jsonResponse);

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenIntrospectAPI.java
Patch:
@@ -102,6 +102,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 AppIdentifier appIdentifier = getAppIdentifier(req);
                 Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
                 JsonObject response = OAuth.introspectAccessToken(main, appIdentifier, storage, token);
+                response.addProperty("status", "OK");
                 super.sendJsonResponse(200, response, resp);
 
             } catch (IOException | TenantOrAppNotFoundException | BadPermissionException | StorageQueryException | StorageTransactionLogicException | UnsupportedJWTSigningAlgorithmException e) {

File: src/test/java/io/supertokens/test/oauth/api/TestLoginRequest5_2.java
Patch:
@@ -3,10 +3,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 
-import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
@@ -33,7 +31,6 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.utils.SemVer;
-import io.supertokens.webserver.WebserverAPI;
 
 public class TestLoginRequest5_2 {
     @Rule

File: src/test/java/io/supertokens/test/oauth/api/TestRefreshTokenFlowWithTokenRotationOptions.java
Patch:
@@ -403,7 +403,6 @@ public void testRefreshTokenWithRotationIsDisabledAfter() throws Exception {
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
     }
 
-    // Helper method to split query parameters
     private static Map<String, String> splitQuery(URL url) throws UnsupportedEncodingException {
         Map<String, String> queryPairs = new LinkedHashMap<>();
         String query = url.getQuery();

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenIntrospectAPI.java
Patch:
@@ -66,7 +66,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 AppIdentifier appIdentifier = getAppIdentifier(req);
                 Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
-                token = OAuth.getOAuthProviderRefreshToken(main, null, null, token);
+                token = OAuth.getOAuthProviderRefreshToken(main, appIdentifier, storage, token);
                 formFields.put("token", token);
 
                 HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyFormPOST(

File: src/test/java/io/supertokens/test/Utils.java
Patch:
@@ -25,7 +25,6 @@
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
-import io.supertokens.test.oauth.api.Map;
 import io.supertokens.useridmapping.UserIdType;
 import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.WebserverAPI;

File: src/main/java/io/supertokens/oauth/OAuth.java
Patch:
@@ -271,9 +271,6 @@ public static HttpRequestForOAuthProvider.Response doOAuthProxyJsonDELETE(Main m
     }
 
     private static void checkNonSuccessResponse(HttpRequestForOAuthProvider.Response response) throws OAuthAPIException, OAuthClientNotFoundException {
-        if (response.statusCode == 404) {
-            throw new OAuthClientNotFoundException();
-        }
         if (response.statusCode >= 400) {
             String error = response.jsonResponse.getAsJsonObject().get("error").getAsString();
             String errorDescription = null;

File: src/test/java/io/supertokens/test/oauth/api/TestClientList5_2.java
Patch:
@@ -25,7 +25,6 @@
 import org.junit.Test;
 import org.junit.rules.TestRule;
 
-import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
@@ -78,8 +77,6 @@ public void testClientList() throws Exception {
             return;
         }
 
-        FeatureFlag.getInstance(process.main)
-                .setLicenseKeyAndSyncFeatures(TotpLicenseTest.OPAQUE_KEY_WITH_MFA_FEATURE);
         FeatureFlagTestContent.getInstance(process.main)
                 .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.OAUTH});
 

File: src/main/java/io/supertokens/oauth/HttpRequestForOAuthProvider.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
-public class HttpRequestForOry {
+public class HttpRequestForOAuthProvider {
     // This is a helper class to make HTTP requests to the hydra server specifically.
     // Although this is similar to HttpRequest, this is slightly modified to be able to work with
     // form data, headers in request and responses, query params in non-get requests, reading responses in

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAcceptAuthConsentRequestAPI.java
Patch:
@@ -8,7 +8,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.InputParser;
@@ -63,7 +63,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         input.add("session", session);
 
         try {
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyJsonPUT(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyJsonPUT(
                 main, req, resp,
                 getAppIdentifier(req),
                 enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAcceptAuthLoginRequestAPI.java
Patch:
@@ -6,10 +6,10 @@
 import com.google.gson.JsonObject;
 
 import io.supertokens.Main;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.webserver.WebserverAPI;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.InputParser;
 import jakarta.servlet.ServletException;
@@ -32,7 +32,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
 
         try {
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyJsonPUT(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyJsonPUT(
                 main, req, resp,
                 getAppIdentifier(req),
                 enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAcceptAuthLogoutRequestAPI.java
Patch:
@@ -1,13 +1,11 @@
 package io.supertokens.webserver.api.oauth;
 
 import java.io.IOException;
-import java.util.HashMap;
 
 import com.google.gson.JsonObject;
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.oauth.exceptions.OAuthAPIException;
 import io.supertokens.pluginInterface.RECIPE_ID;

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthAuthAPI.java
Patch:
@@ -23,7 +23,7 @@
 import io.supertokens.ActiveUsers;
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.oauth.OAuthToken;
 import io.supertokens.pluginInterface.RECIPE_ID;
@@ -86,7 +86,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             AppIdentifier appIdentifier = getAppIdentifier(req);
             Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyGET(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyGET(
                 main, req, resp,
                 appIdentifier,
                 storage,

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthClientListAPI.java
Patch:
@@ -16,7 +16,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.Storage;
@@ -53,7 +53,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             Map<String, String> queryParams = OAuthProxyHelper.defaultGetQueryParamsFromRequest(req);
             queryParams.put("owner", appIdentifier.getAppId());
 
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyGET(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyGET(
                 main, req, resp,
                 appIdentifier,
                 storage,

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthGetAuthConsentRequestAPI.java
Patch:
@@ -5,7 +5,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.Transformations;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
@@ -28,7 +28,7 @@ public String getPath() {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyGET(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyGET(
                 main, req, resp,
                 getAppIdentifier(req),
                 enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthGetAuthLoginRequestAPI.java
Patch:
@@ -5,7 +5,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.Transformations;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
@@ -28,7 +28,7 @@ public String getPath() {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyGET(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyGET(
                 main, req, resp,
                 getAppIdentifier(req),
                 enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthLogoutAPI.java
Patch:
@@ -9,7 +9,7 @@
 import io.supertokens.Main;
 import io.supertokens.jwt.exceptions.UnsupportedJWTSigningAlgorithmException;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.oauth.exceptions.OAuthAPIException;
 import io.supertokens.pluginInterface.RECIPE_ID;
@@ -77,7 +77,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
 
             // Check if the post logout redirection URI is valid for the clientId
             if (postLogoutRedirectionUri != null) {
-                HttpRequestForOry.Response response = OAuthProxyHelper.proxyGET(
+                HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyGET(
                     main, req, resp, 
                     appIdentifier, storage,
                     clientId, // clientIdToCheck

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthRejectAuthConsentRequestAPI.java
Patch:
@@ -7,7 +7,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.InputParser;
@@ -32,7 +32,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
 
         try {
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyJsonPUT(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyJsonPUT(
                 main, req, resp,
                 getAppIdentifier(req),
                 enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthRejectAuthLoginRequestAPI.java
Patch:
@@ -8,7 +8,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.InputParser;
@@ -33,7 +33,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
 
         try {
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyJsonPUT(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyJsonPUT(
                 main, req, resp,
                 getAppIdentifier(req),
                 enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthRejectAuthLogoutRequestAPI.java
Patch:
@@ -1,13 +1,11 @@
 package io.supertokens.webserver.api.oauth;
 
 import java.io.IOException;
-import java.util.HashMap;
 
 import com.google.gson.JsonObject;
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenIntrospectAPI.java
Patch:
@@ -21,7 +21,7 @@
 import io.supertokens.featureflag.exceptions.FeatureNotEnabledException;
 import io.supertokens.jwt.exceptions.UnsupportedJWTSigningAlgorithmException;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.Storage;
@@ -69,7 +69,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 token = OAuth.getOAuthProviderRefreshToken(main, null, null, token);
                 formFields.put("token", token);
 
-                HttpRequestForOry.Response response = OAuthProxyHelper.proxyFormPOST(
+                HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyFormPOST(
                     main, req, resp,
                     appIdentifier,
                     storage,

File: src/main/java/io/supertokens/webserver/api/oauth/RevokeOAuthTokenAPI.java
Patch:
@@ -11,7 +11,7 @@
 import io.supertokens.featureflag.exceptions.FeatureNotEnabledException;
 import io.supertokens.jwt.exceptions.UnsupportedJWTSigningAlgorithmException;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.Storage;
@@ -55,7 +55,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     Map<String, String> formFields = new HashMap<>();
                     formFields.put("token", token);
 
-                    HttpRequestForOry.Response response = OAuthProxyHelper.proxyFormPOST(
+                    HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyFormPOST(
                         main, req, resp,
                         appIdentifier,
                         storage,
@@ -101,7 +101,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     formFields.put("client_secret", clientSecret);
                 }
 
-                HttpRequestForOry.Response response = OAuthProxyHelper.proxyFormPOST(
+                HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyFormPOST(
                     main, req, resp,
                     getAppIdentifier(req),
                     enforcePublicTenantAndGetPublicTenantStorage(req),

File: src/main/java/io/supertokens/webserver/api/oauth/RevokeOAuthTokensAPI.java
Patch:
@@ -8,7 +8,7 @@
 
 import io.supertokens.Main;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.oauth.HttpRequestForOry;
+import io.supertokens.oauth.HttpRequestForOAuthProvider;
 import io.supertokens.oauth.OAuth;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.Storage;
@@ -46,7 +46,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             Map<String, String> queryParams = new HashMap<>();
             queryParams.put("client_id", clientId);
 
-            HttpRequestForOry.Response response = OAuthProxyHelper.proxyJsonDELETE(
+            HttpRequestForOAuthProvider.Response response = OAuthProxyHelper.proxyJsonDELETE(
                 main, req, resp,
                 appIdentifier,
                 storage,

File: src/test/java/io/supertokens/test/oauth/api/TestAuthCodeFlow.java
Patch:
@@ -56,6 +56,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        OAuthAPIHelper.resetOAuthProvider();
     }
 
     @Test

File: src/test/java/io/supertokens/test/oauth/api/TestImplicitFlow.java
Patch:
@@ -56,6 +56,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        OAuthAPIHelper.resetOAuthProvider();
     }
 
     @Test

File: src/test/java/io/supertokens/test/oauth/api/TestRefreshTokenFlowWithTokenRotationOptions.java
Patch:
@@ -57,6 +57,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        OAuthAPIHelper.resetOAuthProvider();
     }
 
     private static JsonObject createClient(Main main, boolean enableRefreshTokenRotation) throws Exception {

File: src/test/java/io/supertokens/test/oauth/OAuthStorageTest.java
Patch:
@@ -187,7 +187,7 @@ public void testRevoke() throws Exception {
 
         // test cleanup
         Thread.sleep(3000);
-        storage.cleanUpExpiredAndRevokedOAuthTokensList();
+        storage.deleteExpiredRevokedOAuthTokens(0); // TODO fixme
 
         assertFalse(storage.isOAuthTokenRevokedBasedOnTargetFields(
                 appIdentifier,

File: src/test/java/io/supertokens/test/oauth/api/TestImplicitFlow.java
Patch:
@@ -62,7 +62,6 @@ public void beforeEach() {
     public void testImplicitGrantFlow() throws Exception {
         String[] args = {"../"};
 
-        // TODO WIP
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false);
         Utils.setValueInConfig("oauth_provider_public_service_url", "http://localhost:4444");
         Utils.setValueInConfig("oauth_provider_admin_service_url", "http://localhost:4445");

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenAPI.java
Patch:
@@ -174,12 +174,12 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                         if (inputRefreshToken == null) {
                             // Issuing a new refresh token
                             if (!oauthClient.enableRefreshTokenRotation) {
-                                OAuth.createOrUpdateRefreshTokenMapping(main, appIdentifier, storage, newRefreshToken, newRefreshToken);
+                                OAuth.createOrUpdateRefreshTokenMapping(main, appIdentifier, storage, newRefreshToken, newRefreshToken, 0); // TODO: add exp
                             } // else we don't need a mapping
                         } else {
                             // Refreshing a token
                             if (!oauthClient.enableRefreshTokenRotation) {
-                                OAuth.createOrUpdateRefreshTokenMapping(main, appIdentifier, storage, inputRefreshToken, newRefreshToken);
+                                OAuth.createOrUpdateRefreshTokenMapping(main, appIdentifier, storage, inputRefreshToken, newRefreshToken, 0); // TODO: add exp
                                 response.jsonResponse.getAsJsonObject().remove("refresh_token");
                             } else {
                                 OAuth.deleteRefreshTokenMappingIfExists(main, appIdentifier, storage, inputRefreshToken);

File: src/main/java/io/supertokens/webserver/api/oauth/OAuthTokenIntrospectAPI.java
Patch:
@@ -66,7 +66,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 AppIdentifier appIdentifier = getAppIdentifier(req);
                 Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
-                token = OAuth.getOAuthProviderRefreshToken(main, null, null, token)
+                token = OAuth.getOAuthProviderRefreshToken(main, null, null, token);
                 formFields.put("token", token);
 
                 HttpRequestForOry.Response response = OAuthProxyHelper.proxyFormPOST(
@@ -94,7 +94,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     finalResponse.addProperty("status", "OK");
                     super.sendJsonResponse(200, finalResponse, resp);
                 }
-            } catch (IOException | TenantOrAppNotFoundException | BadPermissionException e) {
+            } catch (IOException | StorageQueryException | TenantOrAppNotFoundException | BadPermissionException e) {
                 throw new ServletException(e);
             }
         } else {

File: src/main/java/io/supertokens/webserver/api/oauth/RevokeOAuthTokenAPI.java
Patch:
@@ -46,13 +46,15 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             Storage storage = enforcePublicTenantAndGetPublicTenantStorage(req);
 
             if (token.startsWith("st_rt_")) {
+                token = OAuth.getOAuthProviderRefreshToken(main, appIdentifier, storage, token);
+
                 String gid = null;
                 long exp = -1;
                 {
                     // introspect token to get gid
                     Map<String, String> formFields = new HashMap<>();
                     formFields.put("token", token);
-    
+
                     HttpRequestForOry.Response response = OAuthProxyHelper.proxyFormPOST(
                         main, req, resp,
                         appIdentifier,

File: src/main/java/io/supertokens/webserver/api/oauth/RemoveOAuthClientAPI.java
Patch:
@@ -67,7 +67,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
             if (response != null) {
                 try {
-                    OAuth.removeClientId(main, getAppIdentifier(req), enforcePublicTenantAndGetPublicTenantStorage(req), clientId);
+                    OAuth.removeClient(main, getAppIdentifier(req), enforcePublicTenantAndGetPublicTenantStorage(req), clientId);
                 } catch (StorageQueryException | TenantOrAppNotFoundException | BadPermissionException e) {
                     throw new ServletException(e);
                 }

File: src/test/java/io/supertokens/test/multitenant/TestAppData.java
Patch:
@@ -177,7 +177,7 @@ null, null, new JsonObject()
         UserIdMapping.createUserIdMapping(process.getProcess(), app.toAppIdentifier(), appStorage,
                 plUser.user.getSupertokensUserId(), "externalid", null, false);
 
-        OAuth.addOrUpdateClientId(process.getProcess(), app.toAppIdentifier(), appStorage, "test", false);
+        OAuth.addOrUpdateClient(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "secret123", false, false);
         OAuth.createLogoutRequestAndReturnRedirectUri(process.getProcess(), app.toAppIdentifier(), appStorage, "test", "http://localhost", "sessionHandle", "state");
         ((OAuthStorage) appStorage).addOAuthM2MTokenForStats(app.toAppIdentifier(), "test", 1000, 2000);
         OAuth.revokeSessionHandle(process.getProcess(), app.toAppIdentifier(), appStorage, "sessionHandle");

File: src/test/java/io/supertokens/test/DotStartedFileTest.java
Patch:
@@ -188,7 +188,7 @@ public void processFailToStartDotStartedFileTest() throws Exception {
 
     @Test
     public void dotStartedFileAtTempDirLocation() throws Exception {
-        String tempDirLocation = new File("../temp/").getAbsolutePath();
+        String tempDirLocation = new File("../tempDir/").getAbsolutePath();
         String[] args = {"../", "tempDirLocation=" + tempDirLocation};
 
         String host = "localhost";

File: src/test/java/io/supertokens/test/WebserverTest.java
Patch:
@@ -967,7 +967,7 @@ public void validBasePath() throws InterruptedException, IOException, HttpRespon
 
     @Test
     public void tempDirLocationWebserverStarts() throws InterruptedException, HttpResponseException, IOException {
-        String tempDirLocation = new File("../temp/").getCanonicalPath();
+        String tempDirLocation = new File("../tempDir/").getCanonicalPath();
         String[] args = {"../", "tempDirLocation=" + tempDirLocation};
         TestingProcess process = TestingProcessManager.start(args);
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STARTED));

File: src/test/java/io/supertokens/test/CLIOptionsTest.java
Patch:
@@ -302,7 +302,7 @@ public void cli2TempLocationTest() throws Exception {
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
 
         //process starts with tempDirLocation param too.
-        args = new String[]{"../", "tempDirLocation=" + new File("../temp/").getAbsolutePath()};
+        args = new String[]{"../", "tempDirLocation=" + new File("../tempDir/").getAbsolutePath()};
 
         process = TestingProcessManager.start(args);
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STARTED));

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -20,6 +20,7 @@
 import io.supertokens.config.Config;
 import io.supertokens.config.CoreConfig;
 import io.supertokens.cronjobs.Cronjobs;
+import io.supertokens.cronjobs.cleanupOAuthRevokeListAndChallenges.CleanupOAuthRevokeListAndChallenges;
 import io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys;
 import io.supertokens.cronjobs.deleteExpiredDashboardSessions.DeleteExpiredDashboardSessions;
 import io.supertokens.cronjobs.deleteExpiredEmailVerificationTokens.DeleteExpiredEmailVerificationTokens;
@@ -256,6 +257,8 @@ private void init() throws IOException, StorageQueryException {
         // starts DeleteExpiredAccessTokenSigningKeys cronjob if the access token signing keys can change
         Cronjobs.addCronjob(this, DeleteExpiredAccessTokenSigningKeys.init(this, uniqueUserPoolIdsTenants));
 
+        Cronjobs.addCronjob(this, CleanupOAuthRevokeListAndChallenges.init(this, uniqueUserPoolIdsTenants));
+
         // this is to ensure tenantInfos are in sync for the new cron job as well
         MultitenancyHelper.getInstance(this).refreshCronjobs();
 

File: src/main/java/io/supertokens/config/Config.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
-import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonObject;
 import io.supertokens.Main;

File: src/main/java/io/supertokens/featureflag/EE_FEATURES.java
Patch:
@@ -18,7 +18,7 @@
 
 public enum EE_FEATURES {
     ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"),
-    DASHBOARD_LOGIN("dashboard_login"), MFA("mfa"), SECURITY("security");
+    DASHBOARD_LOGIN("dashboard_login"), MFA("mfa"), SECURITY("security"), OAUTH("oauth");
 
     private final String name;
 

File: src/main/java/io/supertokens/utils/SemVer.java
Patch:
@@ -37,6 +37,7 @@ public class SemVer implements Comparable<SemVer> {
     public static final SemVer v4_0 = new SemVer("4.0");
     public static final SemVer v5_0 = new SemVer("5.0");
     public static final SemVer v5_1 = new SemVer("5.1");
+    public static final SemVer v5_2 = new SemVer("5.2");
 
     final private String version;
 

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -76,10 +76,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add(SemVer.v4_0);
         supportedVersions.add(SemVer.v5_0);
         supportedVersions.add(SemVer.v5_1);
+        supportedVersions.add(SemVer.v5_2);
     }
 
     public static SemVer getLatestCDIVersion() {
-        return SemVer.v5_1;
+        return SemVer.v5_2;
     }
 
     public SemVer getLatestCDIVersionForRequest(HttpServletRequest req)

File: src/test/java/io/supertokens/test/Utils.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
+import io.supertokens.config.CoreConfig;
 import io.supertokens.pluginInterface.PluginInterfaceTesting;
 import io.supertokens.pluginInterface.useridmapping.UserIdMapping;
 import io.supertokens.storageLayer.StorageLayer;
@@ -83,6 +84,7 @@ public static void reset() {
         PluginInterfaceTesting.isTesting = true;
         Main.makeConsolePrintSilent = true;
         String installDir = "../";
+        CoreConfig.setDisableOAuthValidationForTest(false);
         try {
 
             // if the default config is not the same as the current config, we must reset the storage layer

File: src/test/java/io/supertokens/test/multitenant/api/TestTenantUserAssociation.java
Patch:
@@ -37,6 +37,7 @@
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.pluginInterface.nonAuthRecipe.NonAuthRecipeStorage;
+import io.supertokens.pluginInterface.oauth.OAuthStorage;
 import io.supertokens.pluginInterface.usermetadata.UserMetadataStorage;
 import io.supertokens.session.Session;
 import io.supertokens.session.info.SessionInformationHolder;
@@ -199,6 +200,7 @@ public void testUserDisassociationForNotAuthRecipes() throws Exception {
             if (name.equals(UserMetadataStorage.class.getName())
                     || name.equals(JWTRecipeStorage.class.getName())
                     || name.equals(ActiveUsersStorage.class.getName())
+                    || name.equals(OAuthStorage.class.getName())
             ) {
                 // user metadata is app specific and does not have any tenant specific data
                 // JWT storage does not have any user specific data

File: src/test/java/io/supertokens/test/StorageTest.java
Patch:
@@ -740,7 +740,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
             fail();
         } catch (HttpResponseException ex) {
             assertEquals(ex.statusCode, 500);
-            assertEquals(ex.getMessage(), "Http error. Status Code: 500. Message: java.sql.SQLException: Storage layer disabled");
+            assertTrue(ex.getMessage().contains("Storage layer disabled"));
         }
 
         storage.setStorageLayerEnabled(true);
@@ -765,7 +765,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
             fail();
         } catch (HttpResponseException ex) {
             assertEquals(ex.statusCode, 500);
-            assertEquals(ex.getMessage(), "Http error. Status Code: 500. Message: java.sql.SQLException: Storage layer disabled");
+            assertTrue(ex.getMessage().contains("Storage layer disabled"));
         }
 
         storage.setStorageLayerEnabled(true);

File: src/test/java/io/supertokens/test/StorageTest.java
Patch:
@@ -740,7 +740,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
             fail();
         } catch (HttpResponseException ex) {
             assertEquals(ex.statusCode, 500);
-            assertEquals(ex.getMessage(), "Http error. Status Code: 500. Message: Internal Error");
+            assertEquals(ex.getMessage(), "Http error. Status Code: 500. Message: java.sql.SQLException: Storage layer disabled");
         }
 
         storage.setStorageLayerEnabled(true);
@@ -765,7 +765,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
             fail();
         } catch (HttpResponseException ex) {
             assertEquals(ex.statusCode, 500);
-            assertEquals(ex.getMessage(), "Http error. Status Code: 500. Message: Internal Error");
+            assertEquals(ex.getMessage(), "Http error. Status Code: 500. Message: java.sql.SQLException: Storage layer disabled");
         }
 
         storage.setStorageLayerEnabled(true);

File: src/test/java/io/supertokens/test/emailpassword/api/ImportUserWithPasswordHashAPITest.java
Patch:
@@ -297,7 +297,7 @@ public void testImportingAUsesrFromFirebaseWithoutSettingTheSignerKey() throws E
             throw new Exception("Should not come here");
         } catch (io.supertokens.test.httpRequest.HttpResponseException e) {
             assertTrue(e.statusCode == 500
-                    && e.getMessage().equals("Http error. Status Code: 500. Message: Internal Error"));
+                    && e.getMessage().equals("Http error. Status Code: 500. Message: 'firebase_password_hashing_signer_key' cannot be null"));
         }
 
         process.kill();
@@ -388,7 +388,7 @@ public void testSigningInAUserWithFirebasePasswordHashWithoutSettingTheSignerKey
             throw new Exception("Should not come here");
         } catch (io.supertokens.test.httpRequest.HttpResponseException e) {
             assertTrue(e.statusCode == 500
-                    && e.getMessage().equals("Http error. Status Code: 500. Message: Internal Error"));
+                    && e.getMessage().equals("Http error. Status Code: 500. Message: 'firebase_password_hashing_signer_key' cannot be null"));
         }
 
         process.kill();

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -531,10 +531,10 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
                 } else if (rootCause instanceof BadPermissionException) {
                     sendTextResponse(403, rootCause.getMessage(), resp);
                 } else {
-                    sendTextResponse(500, "Internal Error", resp);
+                    sendTextResponse(500, rootCause.getMessage(), resp);
                 }
             } else {
-                sendTextResponse(500, "Internal Error", resp);
+                sendTextResponse(500, e.getMessage(), resp);
             }
         }
         Logging.info(main, tenantIdentifier, "API ended: " + req.getRequestURI() + ". Method: " + req.getMethod(),

File: src/main/java/io/supertokens/inmemorydb/queries/MultitenancyQueries.java
Patch:
@@ -48,7 +48,6 @@ static String getQueryToCreateTenantConfigsTable(Start start) {
                 + "passwordless_enabled BOOLEAN,"
                 + "third_party_enabled BOOLEAN,"
                 + "is_first_factors_null BOOLEAN,"
-                + "is_third_party_providers_null BOOLEAN,"
                 + "PRIMARY KEY (connection_uri_domain, app_id, tenant_id)"
                 + ");";
         // @formatter:on

File: src/main/java/io/supertokens/session/accessToken/AccessToken.java
Patch:
@@ -236,7 +236,7 @@ public static TokenInfo createNewAccessToken(TenantIdentifier tenantIdentifier,
         if (expiryTime != null) {
             expires = expiryTime;
         } else {
-            expires = now + Config.getConfig(tenantIdentifier, main).getAccessTokenValidity();
+            expires = now + Config.getConfig(tenantIdentifier, main).getAccessTokenValidityInMillis();
         }
         AccessTokenInfo accessToken = new AccessTokenInfo(sessionHandle, recipeUserId, primaryUserId, refreshTokenHash1,
                 expires,
@@ -297,7 +297,7 @@ public static TokenInfo createNewAccessTokenV1(TenantIdentifier tenantIdentifier
         long now = System.currentTimeMillis();
         AccessTokenInfo accessToken;
 
-        long expiryTime = now + Config.getConfig(tenantIdentifier, main).getAccessTokenValidity();
+        long expiryTime = now + Config.getConfig(tenantIdentifier, main).getAccessTokenValidityInMillis();
         accessToken = new AccessTokenInfo(sessionHandle, userId, userId, refreshTokenHash1, expiryTime,
                 parentRefreshTokenHash1,
                 userData, antiCsrfToken, now, VERSION.V1, tenantIdentifier);

File: src/main/java/io/supertokens/session/refreshToken/RefreshToken.java
Patch:
@@ -116,7 +116,7 @@ public static TokenInfo createNewRefreshToken(TenantIdentifier tenantIdentifier,
         String token = encryptedPayload + "." + nonce + "." + TYPE.FREE_OPTIMISED.toString();
         long now = System.currentTimeMillis();
         return new TokenInfo(token,
-                now + Config.getConfig(tenantIdentifier, main).getRefreshTokenValidity(),
+                now + Config.getConfig(tenantIdentifier, main).getRefreshTokenValidityInMillis(),
                 now);
     }
 

File: src/main/java/io/supertokens/utils/SemVer.java
Patch:
@@ -33,6 +33,7 @@ public class SemVer implements Comparable<SemVer> {
     public static final SemVer v2_20 = new SemVer("2.20");
     public static final SemVer v2_21 = new SemVer("2.21");
     public static final SemVer v3_0 = new SemVer("3.0");
+    public static final SemVer v3_1 = new SemVer("3.1");
     public static final SemVer v4_0 = new SemVer("4.0");
     public static final SemVer v5_0 = new SemVer("5.0");
     public static final SemVer v5_1 = new SemVer("5.1");

File: src/main/java/io/supertokens/webserver/api/core/JWKSPublicAPI.java
Patch:
@@ -61,10 +61,12 @@ public String getPath() {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
-            List<JsonObject> jwks = SigningKeys.getInstance(this.getAppIdentifier(req), main).getJWKS();
+            SigningKeys signingKeys = SigningKeys.getInstance(this.getAppIdentifier(req), main);
+            List<JsonObject> jwks = signingKeys.getJWKS();
             JsonObject reply = new JsonObject();
             JsonArray jwksJsonArray = new JsonParser().parse(new Gson().toJson(jwks)).getAsJsonArray();
             reply.add("keys", jwksJsonArray);
+            resp.setHeader("Cache-Control", "max-age=" + signingKeys.getCacheDurationInSeconds() + ", must-revalidate");
             super.sendJsonResponse(200, reply, resp);
         } catch (StorageQueryException | StorageTransactionLogicException | NoSuchAlgorithmException
                  | InvalidKeySpecException | TenantOrAppNotFoundException | UnsupportedJWTSigningAlgorithmException e) {

File: src/main/java/io/supertokens/webserver/api/emailpassword/GeneratePasswordResetTokenAPI.java
Patch:
@@ -23,7 +23,6 @@
 import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
-import io.supertokens.pluginInterface.Storage;
 import io.supertokens.pluginInterface.emailpassword.exceptions.UnknownUserIdException;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
@@ -69,6 +68,9 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
 
         try {
+            io.supertokens.webserver.api.emailpassword.Utils.assertIfEmailPasswordIsEnabledForTenant(main,
+                    tenantIdentifier, getVersionFromRequest(req));
+
             StorageAndUserIdMapping storageAndUserIdMapping =
                     getStorageAndUserIdMappingForTenantSpecificApi(req, userId, UserIdType.ANY);
             // if a userIdMapping exists, pass the superTokensUserId to the generatePasswordResetToken

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignInAPI.java
Patch:
@@ -21,7 +21,6 @@
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.emailpassword.exceptions.WrongCredentialsException;
-import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
@@ -77,6 +76,9 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
 
         try {
+            io.supertokens.webserver.api.emailpassword.Utils.assertIfEmailPasswordIsEnabledForTenant(main,
+                    tenantIdentifier, getVersionFromRequest(req));
+
             AuthRecipeUserInfo user = EmailPassword.signIn(tenantIdentifier, storage, super.main, normalisedEmail,
                     password);
             io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignUpAPI.java
Patch:
@@ -20,7 +20,6 @@
 import io.supertokens.ActiveUsers;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
-import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
@@ -80,6 +79,9 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
 
         try {
+            io.supertokens.webserver.api.emailpassword.Utils.assertIfEmailPasswordIsEnabledForTenant(main,
+                    tenantIdentifier, getVersionFromRequest(req));
+
             AuthRecipeUserInfo user = EmailPassword.signUp(tenantIdentifier, storage, super.main, normalisedEmail,
                     password);
 

File: src/main/java/io/supertokens/webserver/api/emailverification/UnverifyEmailAPI.java
Patch:
@@ -21,12 +21,12 @@
 import io.supertokens.StorageAndUserIdMapping;
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.multitenancy.exception.BadPermissionException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.Storage;
 import io.supertokens.pluginInterface.emailpassword.exceptions.UnknownUserIdException;
+import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.multitenancy.AppIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
-import io.supertokens.pluginInterface.RECIPE_ID;
-import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.useridmapping.UserIdType;
 import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateAppAPI.java
Patch:
@@ -64,9 +64,9 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         }
 
         super.handle(
-                req, sourceTenantIdentifier,
+                req, resp, sourceTenantIdentifier,
                 new TenantIdentifier(sourceTenantIdentifier.getConnectionUriDomain(), appId, null),
-                input, resp);
+                input, false);
 
     }
 }

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateAppV2API.java
Patch:
@@ -58,10 +58,10 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
             throw new ServletException(e);
         }
 
-        super.handle_v2(
-                req, sourceTenantIdentifier,
+        super.handle(
+                req, resp, sourceTenantIdentifier,
                 new TenantIdentifier(sourceTenantIdentifier.getConnectionUriDomain(), appId, null),
-                input, resp);
+                input, true);
 
     }
 }

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateConnectionUriDomainAPI.java
Patch:
@@ -63,8 +63,8 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         }
 
         super.handle(
-                req, sourceTenantIdentifier,
-                new TenantIdentifier(connectionUriDomain, null, null), input, resp);
+                req, resp, sourceTenantIdentifier,
+                new TenantIdentifier(connectionUriDomain, null, null), input, false);
 
     }
 }

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListAppsAPI.java
Patch:
@@ -86,7 +86,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                     JsonObject tenantConfigJson;
 
                     if (getVersionFromRequest(req).lesserThan(SemVer.v5_0)) {
-                        tenantConfigJson = tenantConfig.toJson3_0(shouldProtect, storage, CoreConfig.PROTECTED_CONFIGS);
+                        tenantConfigJson = tenantConfig.toJsonLesserThanOrEqualTo4_0(shouldProtect, storage,
+                                CoreConfig.PROTECTED_CONFIGS);
                     } else {
                         tenantConfigJson = tenantConfig.toJson5_0(shouldProtect, storage, CoreConfig.PROTECTED_CONFIGS);
                     }

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListAppsV2API.java
Patch:
@@ -27,7 +27,6 @@
 import io.supertokens.pluginInterface.multitenancy.TenantConfig;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
-import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.WebserverAPI;
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
@@ -82,7 +81,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 appObject.addProperty("appId", appId);
                 JsonArray tenantsArray = new JsonArray();
                 for (TenantConfig tenantConfig : entry.getValue()) {
-                    JsonObject tenantConfigJson = tenantConfig.toJson_v2(shouldProtect, storage,
+                    JsonObject tenantConfigJson = tenantConfig.toJson_v2_5_1(shouldProtect, storage,
                             CoreConfig.PROTECTED_CONFIGS);
 
                     tenantsArray.add(tenantConfigJson);

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListConnectionUriDomainsAPI.java
Patch:
@@ -100,7 +100,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                         JsonObject tenantConfigJson;
 
                         if (getVersionFromRequest(req).lesserThan(SemVer.v5_0)) {
-                            tenantConfigJson = tenantConfig.toJson3_0(shouldProtect, storage,
+                            tenantConfigJson = tenantConfig.toJsonLesserThanOrEqualTo4_0(shouldProtect, storage,
                                     CoreConfig.PROTECTED_CONFIGS);
                         } else {
                             tenantConfigJson = tenantConfig.toJson5_0(shouldProtect, storage,

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListConnectionUriDomainsV2API.java
Patch:
@@ -27,7 +27,6 @@
 import io.supertokens.pluginInterface.multitenancy.TenantConfig;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
-import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.WebserverAPI;
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
@@ -96,7 +95,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                     appObject.addProperty("appId", appId);
                     JsonArray tenantsArray = new JsonArray();
                     for (TenantConfig tenantConfig : entry2.getValue()) {
-                        JsonObject tenantConfigJson = tenantConfig.toJson_v2(shouldProtect, storage,
+                        JsonObject tenantConfigJson = tenantConfig.toJson_v2_5_1(shouldProtect, storage,
                                 CoreConfig.PROTECTED_CONFIGS);
 
                         tenantsArray.add(tenantConfigJson);

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListTenantsAPI.java
Patch:
@@ -68,7 +68,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 JsonObject tenantConfigJson;
 
                 if (getVersionFromRequest(req).lesserThan(SemVer.v5_0)) {
-                    tenantConfigJson = tenantConfig.toJson3_0(shouldProtect, storage, CoreConfig.PROTECTED_CONFIGS);
+                    tenantConfigJson = tenantConfig.toJsonLesserThanOrEqualTo4_0(shouldProtect, storage,
+                            CoreConfig.PROTECTED_CONFIGS);
                 } else {
                     tenantConfigJson = tenantConfig.toJson5_0(shouldProtect, storage, CoreConfig.PROTECTED_CONFIGS);
                 }

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListTenantsV2API.java
Patch:
@@ -27,7 +27,6 @@
 import io.supertokens.pluginInterface.multitenancy.TenantConfig;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
-import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.WebserverAPI;
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
@@ -64,7 +63,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             boolean shouldProtect = shouldProtectProtectedConfig(req);
             for (TenantConfig tenantConfig : tenantConfigs) {
 
-                JsonObject tenantConfigJson = tenantConfig.toJson_v2(shouldProtect, storage,
+                JsonObject tenantConfigJson = tenantConfig.toJson_v2_5_1(shouldProtect, storage,
                         CoreConfig.PROTECTED_CONFIGS);
 
                 tenantsArray.add(tenantConfigJson);

File: src/main/java/io/supertokens/webserver/api/passwordless/CheckCodeAPI.java
Patch:
@@ -28,7 +28,6 @@
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.pluginInterface.passwordless.PasswordlessDevice;
-import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 import jakarta.servlet.ServletException;
@@ -80,6 +79,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
+            io.supertokens.webserver.api.passwordless.Utils.assertIfPasswordlessIsEnabledForTenant(main,
+                    tenantIdentifier, getVersionFromRequest(req));
             Storage storage = this.getTenantStorage(req);
             PasswordlessDevice consumedDevice = Passwordless.checkCodeAndReturnDevice(
                     tenantIdentifier,

File: src/main/java/io/supertokens/webserver/api/passwordless/ConsumeCodeAPI.java
Patch:
@@ -84,6 +84,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
+            io.supertokens.webserver.api.passwordless.Utils.assertIfPasswordlessIsEnabledForTenant(main,
+                    tenantIdentifier, getVersionFromRequest(req));
             Storage storage = this.getTenantStorage(req);
             ConsumeCodeResponse consumeCodeResponse = Passwordless.consumeCode(
                     tenantIdentifier,

File: src/main/java/io/supertokens/webserver/api/passwordless/CreateCodeAPI.java
Patch:
@@ -80,6 +80,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
+            io.supertokens.webserver.api.passwordless.Utils.assertIfPasswordlessIsEnabledForTenant(main,
+                    tenantIdentifier, getVersionFromRequest(req));
             CreateCodeResponse createCodeResponse = Passwordless.createCode(
                     tenantIdentifier,
                     this.getTenantStorage(req), main, email,

File: src/main/java/io/supertokens/webserver/api/session/HandshakeAPI.java
Patch:
@@ -67,10 +67,10 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                             .getAccessTokenBlacklisting());
             result.addProperty("accessTokenValidity",
                     Config.getConfig(tenantIdentifier, main)
-                            .getAccessTokenValidity());
+                            .getAccessTokenValidityInMillis());
             result.addProperty("refreshTokenValidity",
                     Config.getConfig(tenantIdentifier, main)
-                            .getRefreshTokenValidity());
+                            .getRefreshTokenValidityInMillis());
             super.sendJsonResponse(200, result, resp);
         } catch (StorageQueryException | StorageTransactionLogicException | TenantOrAppNotFoundException |
                  UnsupportedJWTSigningAlgorithmException e) {

File: src/main/java/io/supertokens/webserver/api/thirdparty/SignInUpAPI.java
Patch:
@@ -20,7 +20,6 @@
 import io.supertokens.ActiveUsers;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.exceptions.EmailChangeNotAllowedException;
-import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.Storage;
@@ -78,6 +77,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
             try {
                 TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
+
                 Storage storage = getTenantStorage(req);
                 ThirdParty.SignInUpResponse response = ThirdParty.signInUp2_7(
                         tenantIdentifier, storage,
@@ -141,6 +141,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
             try {
                 TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
+                io.supertokens.webserver.api.thirdparty.Utils.assertIfThirdPartyIsEnabledForTenant(main,
+                        tenantIdentifier, getVersionFromRequest(req));
                 Storage storage = getTenantStorage(req);
                 ThirdParty.SignInUpResponse response = ThirdParty.signInUp(
                         tenantIdentifier, storage, super.main, thirdPartyId, thirdPartyUserId,

File: src/main/java/io/supertokens/webserver/api/usermetadata/UserMetadataAPI.java
Patch:
@@ -20,12 +20,12 @@
 import io.supertokens.Main;
 import io.supertokens.StorageAndUserIdMapping;
 import io.supertokens.multitenancy.exception.BadPermissionException;
-import io.supertokens.pluginInterface.emailpassword.exceptions.UnknownUserIdException;
-import io.supertokens.pluginInterface.multitenancy.AppIdentifier;
-import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.pluginInterface.RECIPE_ID;
+import io.supertokens.pluginInterface.emailpassword.exceptions.UnknownUserIdException;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
+import io.supertokens.pluginInterface.multitenancy.AppIdentifier;
+import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.useridmapping.UserIdType;
 import io.supertokens.usermetadata.UserMetadata;
 import io.supertokens.webserver.InputParser;

File: src/test/java/io/supertokens/test/ConfigTest2_21.java
Patch:
@@ -55,7 +55,7 @@ public void testThatDeprecatedConfigStillWorks() throws Exception {
 
         CoreConfig config = Config.getConfig(process.getProcess());
 
-        long refreshValidity = config.getAccessTokenDynamicSigningKeyUpdateInterval();
+        long refreshValidity = config.getAccessTokenDynamicSigningKeyUpdateIntervalInMillis();
 
         Assert.assertEquals(refreshValidity, 2 * 60 * 60 * 1000);
 
@@ -77,7 +77,7 @@ public void testThatNewConfigWorks() throws Exception {
 
         CoreConfig config = Config.getConfig(process.getProcess());
 
-        long refreshValidity = config.getAccessTokenDynamicSigningKeyUpdateInterval();
+        long refreshValidity = config.getAccessTokenDynamicSigningKeyUpdateIntervalInMillis();
 
         Assert.assertEquals(refreshValidity, 2 * 60 * 60 * 1000);
 

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -32,6 +32,7 @@
 import io.supertokens.pluginInterface.Storage;
 import io.supertokens.pluginInterface.multitenancy.*;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
+import io.supertokens.pluginInterface.multitenancy.TenantConfig;
 import io.supertokens.storageLayer.StorageLayer;
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/test/java/io/supertokens/test/accountlinking/LinkAccountsTest.java
Patch:
@@ -477,7 +477,7 @@ public void linkAccountFailureCauseAccountInfoAssociatedWithAPrimaryUserEvenIfIn
 
         Multitenancy.addNewOrUpdateAppOrTenant(process.main, new TenantIdentifier(null, null, null),
                 new TenantConfig(new TenantIdentifier(null, null, "t1"), new EmailPasswordConfig(true),
-                        new ThirdPartyConfig(true, new ThirdPartyConfig.Provider[0]), new PasswordlessConfig(true),
+                        new ThirdPartyConfig(true, null), new PasswordlessConfig(true),
                         null, null, new JsonObject()));
 
         Storage storage = (StorageLayer.getStorage(process.main));

File: src/test/java/io/supertokens/test/httpRequest/HttpRequestForTesting.java
Patch:
@@ -151,7 +151,7 @@ public static <T> T sendJsonRequest(Main main, String requestID, String url, Jso
                 con.setRequestProperty("cdi-version", cdiVersion);
             }
             if (apiKey != null) {
-                con.setRequestProperty("api-key", apiKey);
+                con.setRequestProperty("Authorization", "Bearer " + apiKey);
             }
             if (rid != null) {
                 con.setRequestProperty("rId", rid);

File: src/test/java/io/supertokens/test/httpRequest/HttpResponseException.java
Patch:
@@ -21,7 +21,7 @@ public class HttpResponseException extends Exception {
     private static final long serialVersionUID = 1L;
     public final int statusCode;
 
-    HttpResponseException(int statusCode, String message) {
+    public HttpResponseException(int statusCode, String message) {
         super("Http error. Status Code: " + statusCode + ". Message: " + message);
         this.statusCode = statusCode;
     }

File: src/test/java/io/supertokens/test/multitenant/ConfigTest.java
Patch:
@@ -89,7 +89,7 @@ public void normalConfigContinuesToWork() throws InterruptedException, IOExcepti
 
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.LOADING_ALL_TENANT_CONFIG));
 
-        Assert.assertEquals(Config.getConfig(process.getProcess()).getRefreshTokenValidity(),
+        Assert.assertEquals(Config.getConfig(process.getProcess()).getRefreshTokenValidityInMillis(),
                 (long) 144001 * 60 * 1000);
         Assert.assertEquals(Config.getConfig(process.getProcess()).getAccessTokenSigningKeyDynamic(),
                 false);
@@ -159,7 +159,7 @@ public void mergingTenantWithBaseConfigWorks()
                         new PasswordlessConfig(false),
                         null, null, tenantConfig)}, new ArrayList<>());
 
-        Assert.assertEquals(Config.getConfig(process.getProcess()).getRefreshTokenValidity(),
+        Assert.assertEquals(Config.getConfig(process.getProcess()).getRefreshTokenValidityInMillis(),
                 (long) 144001 * 60 * 1000);
         Assert.assertEquals(Config.getConfig(process.getProcess()).getPasswordResetTokenLifetime(),
                 3600000);
@@ -169,7 +169,7 @@ public void mergingTenantWithBaseConfigWorks()
                 false);
 
         Assert.assertEquals(Config.getConfig(new TenantIdentifier("abc", null, null), process.getProcess())
-                        .getRefreshTokenValidity(),
+                        .getRefreshTokenValidityInMillis(),
                 (long) 144002 * 60 * 1000);
         Assert.assertEquals(Config.getConfig(new TenantIdentifier("abc", null, null), process.getProcess())
                         .getPasswordResetTokenLifetime(),

File: src/test/java/io/supertokens/test/multitenant/StorageLayerTest.java
Patch:
@@ -111,7 +111,7 @@ public void testDefaultTenant() throws InterruptedException, StorageQueryExcepti
         assertTrue(baseTenantConfig.emailPasswordConfig.enabled);
         assertTrue(baseTenantConfig.passwordlessConfig.enabled);
         assertTrue(baseTenantConfig.thirdPartyConfig.enabled);
-        assertNull(baseTenantConfig.thirdPartyConfig.providers);
+        assertEquals(0, baseTenantConfig.thirdPartyConfig.providers.length);
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
@@ -563,7 +563,7 @@ null, null, new JsonObject()
         assertTrue(baseTenantConfig.emailPasswordConfig.enabled);
         assertTrue(baseTenantConfig.passwordlessConfig.enabled);
         assertTrue(baseTenantConfig.thirdPartyConfig.enabled);
-        assertNull(baseTenantConfig.thirdPartyConfig.providers);
+        assertEquals(0, baseTenantConfig.thirdPartyConfig.providers.length);
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));

File: src/test/java/io/supertokens/test/multitenant/api/TestApp5_1.java
Patch:
@@ -116,7 +116,7 @@ public void testCreateAppWorks() throws Exception {
                     JsonObject tenantObj = tenant.getAsJsonObject();
                     assertEquals(4, tenantObj.entrySet().size());
                     assertEquals("public", tenantObj.get("tenantId").getAsString());
-                    assertEquals(0, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
+                    assertEquals(1, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
                     assertEquals(3, tenantObj.get("firstFactors").getAsJsonArray().size());
                     assertEquals(coreConfig, tenantObj.get("coreConfig").getAsJsonObject());
                 }
@@ -170,7 +170,7 @@ public void testUpdateAppWorks() throws Exception {
                     JsonObject tenantObj = tenant.getAsJsonObject();
                     assertEquals(4, tenantObj.entrySet().size());
                     assertEquals("public", tenantObj.get("tenantId").getAsString());
-                    assertEquals(0, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
+                    assertEquals(1, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
                     assertEquals(3, tenantObj.get("firstFactors").getAsJsonArray().size());
                     assertEquals(coreConfig, tenantObj.get("coreConfig").getAsJsonObject());
                 }

File: src/test/java/io/supertokens/test/multitenant/api/TestConnectionUriDomain5_1.java
Patch:
@@ -119,7 +119,7 @@ public void testCreateConnectionUriDomainWorks() throws Exception {
                         JsonObject tenantObj = tenant.getAsJsonObject();
                         assertEquals(4, tenantObj.entrySet().size());
                         assertEquals("public", tenantObj.get("tenantId").getAsString());
-                        assertEquals(0, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
+                        assertEquals(1, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
                         assertEquals(3, tenantObj.get("firstFactors").getAsJsonArray().size());
                         assertEquals(coreConfig, tenantObj.get("coreConfig").getAsJsonObject());
                     }
@@ -178,7 +178,7 @@ public void testUpdateConnectionUriDomainWorks() throws Exception {
                         JsonObject tenantObj = tenant.getAsJsonObject();
                         assertEquals(4, tenantObj.entrySet().size());
                         assertEquals("public", tenantObj.get("tenantId").getAsString());
-                        assertEquals(0, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
+                        assertEquals(1, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
                         assertEquals(3, tenantObj.get("firstFactors").getAsJsonArray().size());
                         assertEquals(coreConfig, tenantObj.get("coreConfig").getAsJsonObject());
                     }
@@ -237,7 +237,7 @@ public void testUpdateConnectionUriDomainFromSameConnectionUriDomainWorks() thro
                         JsonObject tenantObj = tenant.getAsJsonObject();
                         assertEquals(4, tenantObj.entrySet().size());
                         assertEquals("public", tenantObj.get("tenantId").getAsString());
-                        assertEquals(0, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
+                        assertEquals(1, tenantObj.get("thirdParty").getAsJsonObject().entrySet().size());
                         assertEquals(3, tenantObj.get("firstFactors").getAsJsonArray().size());
                         assertEquals(coreConfig, tenantObj.get("coreConfig").getAsJsonObject());
                     }

File: src/test/java/io/supertokens/test/multitenant/api/TestTenant5_0.java
Patch:
@@ -480,7 +480,7 @@ public void testRequiredSecondaryFactorsArray() throws Exception {
         JsonObject response = createTenant(
                 process.getProcess(),
                 new TenantIdentifier(null, null, null),
-                "t1", null, null, null,
+                "t1", true, true, true,
                 config);
 
         assertTrue(response.get("createdNew").getAsBoolean());
@@ -495,7 +495,7 @@ public void testRequiredSecondaryFactorsArray() throws Exception {
         response = createTenant(
                 process.getProcess(),
                 new TenantIdentifier(null, null, null),
-                "t1", null, null, true,
+                "t1", null, null, null,
                 false, null, true, new String[]{"otp-phone"},
                 config);
         assertFalse(response.get("createdNew").getAsBoolean());

File: src/test/java/io/supertokens/test/session/DeleteExpiredAccessTokenSigningKeysTest.java
Patch:
@@ -81,9 +81,9 @@ public void jobCleansOldKeysTest() throws Exception {
         if (sessionStorage.getType() != STORAGE_TYPE.SQL) {
             return;
         }
-        long accessTokenValidity = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long accessTokenValidity = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
         long signingKeyUpdateInterval = Config.getConfig(process.getProcess())
-                .getAccessTokenDynamicSigningKeyUpdateInterval();
+                .getAccessTokenDynamicSigningKeyUpdateIntervalInMillis();
 
         SessionSQLStorage sqlStorage = (SessionSQLStorage) sessionStorage;
         sqlStorage.startTransaction(con -> {

File: src/test/java/io/supertokens/test/session/RefreshTokenTest.java
Patch:
@@ -133,7 +133,7 @@ public void createRefreshTokenAndLoadAfterProcessRestart()
         assertSame(infoFromToken.type, TYPE.FREE_OPTIMISED);
         // -5000 for some grace period for creation and checking above
         assertTrue(tokenInfo.expiry > System.currentTimeMillis()
-                + Config.getConfig(process.getProcess()).getRefreshTokenValidity() - 5000);
+                + Config.getConfig(process.getProcess()).getRefreshTokenValidityInMillis() - 5000);
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));

File: src/test/java/io/supertokens/test/session/SessionTest5.java
Patch:
@@ -185,7 +185,7 @@ public void checkCreateV3TokenEncoding() throws Exception {
         assert issued.isBefore(Instant.now().plusMillis(1500));
 
         Instant expires = decodedJWT.getExpiresAtAsInstant();
-        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
         assert expires.isAfter(Instant.now().plusMillis(validityInMS).minusMillis(1500));
         assert expires.isBefore(Instant.now().plusMillis(validityInMS).plusMillis(1500));
 
@@ -244,7 +244,7 @@ public void checkCreateStaticV3TokenEncoding() throws Exception {
         assert issued.isBefore(Instant.now().plusMillis(1500));
 
         Instant expires = decodedJWT.getExpiresAtAsInstant();
-        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
 
         assert expires.isAfter(Instant.now().plusMillis(validityInMS).minusMillis(1500));
         assert expires.isBefore(Instant.now().plusMillis(validityInMS).plusMillis(1500));

File: src/test/java/io/supertokens/test/session/api/HandshakeAPITest2_7.java
Patch:
@@ -25,7 +25,6 @@
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
-import io.supertokens.signingkeys.AccessTokenSigningKey;
 import io.supertokens.signingkeys.SigningKeys;
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
@@ -201,10 +200,10 @@ private static void checkHandshakeAPIResponse(JsonObject response, TestingProces
                 Config.getConfig(process.getProcess()).getAccessTokenBlacklisting());
 
         assertEquals(response.get("accessTokenValidity").getAsLong(),
-                Config.getConfig(process.getProcess()).getAccessTokenValidity());
+                Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis());
 
         assertEquals(response.get("refreshTokenValidity").getAsLong(),
-                Config.getConfig(process.getProcess()).getRefreshTokenValidity());
+                Config.getConfig(process.getProcess()).getRefreshTokenValidityInMillis());
     }
 
 }

File: src/test/java/io/supertokens/test/session/api/HandshakeAPITest2_9.java
Patch:
@@ -25,7 +25,6 @@
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
-import io.supertokens.signingkeys.AccessTokenSigningKey;
 import io.supertokens.signingkeys.SigningKeys;
 import io.supertokens.signingkeys.SigningKeys.KeyInfo;
 import io.supertokens.test.TestingProcessManager;
@@ -243,10 +242,10 @@ private static void checkHandshakeAPIResponse(JsonObject response, TestingProces
                 Config.getConfig(process.getProcess()).getAccessTokenBlacklisting());
 
         assertEquals(response.get("accessTokenValidity").getAsLong(),
-                Config.getConfig(process.getProcess()).getAccessTokenValidity());
+                Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis());
 
         assertEquals(response.get("refreshTokenValidity").getAsLong(),
-                Config.getConfig(process.getProcess()).getRefreshTokenValidity());
+                Config.getConfig(process.getProcess()).getRefreshTokenValidityInMillis());
     }
 
 }

File: src/test/java/io/supertokens/test/session/api/MultitenantAPITest.java
Patch:
@@ -29,6 +29,7 @@
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.multitenancy.*;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
+import io.supertokens.pluginInterface.multitenancy.TenantConfig;
 import io.supertokens.session.jwt.JWT;
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;

File: src/test/java/io/supertokens/test/session/api/VerifySessionAPITest3_0.java
Patch:
@@ -150,7 +150,7 @@ public void checkThattIdIsNotPresentInV3() throws Exception {
         assert issued.isBefore(Instant.now().plusMillis(1500));
 
         Instant expires = decodedJWT.getExpiresAtAsInstant();
-        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
 
         assert expires.isAfter(Instant.now().plusMillis(validityInMS).minusMillis(1500));
         assert expires.isBefore(Instant.now().plusMillis(validityInMS).plusMillis(1500));
@@ -240,7 +240,7 @@ public void successOutputCheckNewAccessTokenUpgradeToV4() throws Exception {
         assert issued.isBefore(Instant.now().plusMillis(1500));
 
         Instant expires = decodedJWT.getExpiresAtAsInstant();
-        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
 
         assert expires.isAfter(Instant.now().plusMillis(validityInMS).minusMillis(1500));
         assert expires.isBefore(Instant.now().plusMillis(validityInMS).plusMillis(1500));

File: src/test/java/io/supertokens/test/session/api/VerifySessionAPITest4_0.java
Patch:
@@ -153,7 +153,7 @@ public void checkThatrecipeUserIdIsNotPresentInV4() throws Exception {
         assert issued.isBefore(Instant.now().plusMillis(1500));
 
         Instant expires = decodedJWT.getExpiresAtAsInstant();
-        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
 
         assert expires.isAfter(Instant.now().plusMillis(validityInMS).minusMillis(1500));
         assert expires.isBefore(Instant.now().plusMillis(validityInMS).plusMillis(1500));
@@ -243,7 +243,7 @@ public void successOutputCheckNewAccessTokenUpgradeToV5() throws Exception {
         assert issued.isBefore(Instant.now().plusMillis(1500));
 
         Instant expires = decodedJWT.getExpiresAtAsInstant();
-        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidity();
+        long validityInMS = Config.getConfig(process.getProcess()).getAccessTokenValidityInMillis();
 
         assert expires.isAfter(Instant.now().plusMillis(validityInMS).minusMillis(1500));
         assert expires.isBefore(Instant.now().plusMillis(validityInMS).plusMillis(1500));

File: src/test/java/io/supertokens/test/totp/api/MultitenantAPITest.java
Patch:
@@ -31,6 +31,7 @@
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.multitenancy.*;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
+import io.supertokens.pluginInterface.multitenancy.TenantConfig;
 import io.supertokens.pluginInterface.totp.TOTPDevice;
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;

File: src/main/java/io/supertokens/multitenancy/MultitenancyHelper.java
Patch:
@@ -85,7 +85,8 @@ public static void init(Main main) throws StorageQueryException, IOException {
                 Multitenancy.addNewOrUpdateAppOrTenant(main,
                         new TenantConfig(
                                 new TenantIdentifier(null, null, null),
-                                new EmailPasswordConfig(true), new ThirdPartyConfig(true, null),
+                                new EmailPasswordConfig(true),
+                                new ThirdPartyConfig(true, null),
                                 new PasswordlessConfig(true),
                                 null, null, new JsonObject()), false, false, false);
                 // Not force reloading all resources here (the last boolean in the function above)

File: src/main/java/io/supertokens/passwordless/Passwordless.java
Patch:
@@ -92,7 +92,7 @@ public static CreateCodeResponse createCode(TenantIdentifier tenantIdentifier, S
         if (config == null) {
             throw new TenantOrAppNotFoundException(tenantIdentifier);
         }
-        if (!config.passwordlessConfig.enabled) {
+        if (!config.isPasswordlessEnabled()) {
             throw new BadPermissionException("Passwordless login not enabled for tenant");
         }
 
@@ -299,7 +299,7 @@ public static PasswordlessDevice checkCodeAndReturnDevice(TenantIdentifier tenan
         if (config == null) {
             throw new TenantOrAppNotFoundException(tenantIdentifier);
         }
-        if (!config.passwordlessConfig.enabled) {
+        if (!config.isPasswordlessEnabled()) {
             throw new BadPermissionException("Passwordless login not enabled for tenant");
         }
 

File: src/main/java/io/supertokens/utils/SemVer.java
Patch:
@@ -35,6 +35,7 @@ public class SemVer implements Comparable<SemVer> {
     public static final SemVer v3_0 = new SemVer("3.0");
     public static final SemVer v4_0 = new SemVer("4.0");
     public static final SemVer v5_0 = new SemVer("5.0");
+    public static final SemVer v5_1 = new SemVer("5.1");
 
     final private String version;
 

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -74,10 +74,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add(SemVer.v3_0);
         supportedVersions.add(SemVer.v4_0);
         supportedVersions.add(SemVer.v5_0);
+        supportedVersions.add(SemVer.v5_1);
     }
 
     public static SemVer getLatestCDIVersion() {
-        return SemVer.v5_0;
+        return SemVer.v5_1;
     }
 
     public SemVer getLatestCDIVersionForRequest(HttpServletRequest req)

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.junit.Test;
 import org.junit.rules.TestRule;
 import org.reflections.Reflections;
-import org.w3c.dom.css.Counter;
 
 import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;

File: src/test/java/io/supertokens/test/FeatureFlagTest.java
Patch:
@@ -29,7 +29,6 @@
 import io.supertokens.featureflag.exceptions.FeatureNotEnabledException;
 import io.supertokens.featureflag.exceptions.NoLicenseKeyFoundException;
 import io.supertokens.multitenancy.Multitenancy;
-import io.supertokens.passwordless.Passwordless;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
 import io.supertokens.pluginInterface.Storage;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;

File: src/test/java/io/supertokens/test/IpAllowDenyRegexTest.java
Patch:
@@ -20,7 +20,6 @@
 import io.supertokens.ProcessState;
 import io.supertokens.ProcessState.PROCESS_STATE;
 import io.supertokens.config.Config;
-import io.supertokens.exceptions.QuitProgramException;
 import io.supertokens.featureflag.EE_FEATURES;
 import io.supertokens.featureflag.FeatureFlagTestContent;
 import io.supertokens.httpRequest.HttpRequest;

File: src/test/java/io/supertokens/test/accountlinking/SessionTests.java
Patch:
@@ -36,7 +36,6 @@
 import io.supertokens.pluginInterface.multitenancy.*;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.session.Session;
-import io.supertokens.session.info.SessionInfo;
 import io.supertokens.session.info.SessionInformationHolder;
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;

File: src/test/java/io/supertokens/test/emailpassword/api/MultitenantAPITest.java
Patch:
@@ -37,7 +37,6 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
-import io.supertokens.test.multitenant.api.TestMultitenancyAPIHelper;
 import io.supertokens.thirdparty.InvalidProviderConfigException;
 import io.supertokens.utils.SemVer;
 import org.junit.After;

File: src/test/java/io/supertokens/test/multitenant/RandomConfigTest.java
Patch:
@@ -72,7 +72,7 @@ public void randomlyTestLoadConfig()
         FeatureFlagTestContent.getInstance(process.getProcess())
                 .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.MULTI_TENANCY});
         process.startProcess();
-        assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED, 1000000));
+        assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
         if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
             return;

File: src/test/java/io/supertokens/test/multitenant/api/TestSkipValidationInCreateThirdParty.java
Patch:
@@ -72,10 +72,12 @@ null, null, new JsonObject()
         ), false);
 
         try {
+            JsonObject additionalConfig = new JsonObject();
+            additionalConfig.addProperty("boxyURL", "");
             TestMultitenancyAPIHelper.addOrUpdateThirdPartyProviderConfig(new TenantIdentifier(null, "a1", null),
                     new ThirdPartyConfig.Provider(
                             "boxy-saml", "Boxy SAML", new ThirdPartyConfig.ProviderClient[]{
-                            new ThirdPartyConfig.ProviderClient("web", "clientid", "clientsecret", null, null, null)
+                            new ThirdPartyConfig.ProviderClient("web", "clientid", "clientsecret", null, null, additionalConfig)
                     }, null, null, null,
                             null, null, null, null, null, null, null,
                             null

File: src/test/java/io/supertokens/test/multitenant/generator/ConfigGenerator.java
Patch:
@@ -153,7 +153,8 @@ public static GeneratedValueAndExpectation generate(Class<?> type, Object[] gene
             // generate_<fieldName> should be defined in the GenerateXYZ class, so that it returns
             // GeneratedValueAndExpectation as result.
             Method generatorMethod = generatorClass.getMethod("generate_" + field.getName(), paramTypes);
-            GeneratedValueAndExpectation generated = (GeneratedValueAndExpectation) generatorMethod.invoke(null, generateParams);
+            GeneratedValueAndExpectation generated = (GeneratedValueAndExpectation) generatorMethod.invoke(null,
+                    generateParams);
             constructorParamValues[i] = generated.value;
             expectations.put(field.getName(), generated.expectation);
         }

File: src/test/java/io/supertokens/test/thirdparty/api/EmailVerificationTest.java
Patch:
@@ -256,7 +256,7 @@ public void testWithAccountLinking() throws Exception {
             signUpRequestBody.add("email", emailObject);
 
             JsonObject response = HttpRequestForTesting.sendJsonPOSTRequest(process.getProcess(), "",
-                    "http://localhost:3567/recipe/signinup", signUpRequestBody, 1000000, 1000000, null,
+                    "http://localhost:3567/recipe/signinup", signUpRequestBody, 1000, 1000, null,
                     SemVer.v4_0.get(), "thirdparty");
 
             assertTrue(EmailVerification.isEmailVerified(process.getProcess(), user2.getSupertokensUserId(), "test@example.com"));

File: src/test/java/io/supertokens/test/totp/api/MultitenantAPITest.java
Patch:
@@ -202,8 +202,8 @@ private void createDeviceAlreadyExists(TenantIdentifier tenantIdentifier, String
                 "",
                 HttpRequestForTesting.getMultitenantUrl(tenantIdentifier, "/recipe/totp/device"),
                 body,
-                1000000,
-                1000000,
+                1000,
+                1000,
                 null,
                 SemVer.v3_0.get(),
                 "totp");

File: src/test/java/io/supertokens/test/multitenant/LogTest.java
Patch:
@@ -146,7 +146,7 @@ public void testLogThatEachLineIsUniqueOnStartup() throws Exception {
             uniqueLines.add(line);
         }
 
-        assertEquals(uniqueLines.size(), lines.length);
+        assertEquals(uniqueLines.size(), lines.length - 1); // we have 1 repeating line which initialises connection pool
 
         assertEquals(7, Multitenancy.getAllTenants(process.getProcess()).length);
 

File: src/main/java/io/supertokens/inmemorydb/Start.java
Patch:
@@ -175,7 +175,7 @@ public void stopLogging() {
     }
 
     @Override
-    public void initStorage(boolean shouldWait) throws DbInitException {
+    public void initStorage(boolean shouldWait, List<TenantIdentifier> tenantIdentifiers) throws DbInitException {
         if (ConnectionPool.isAlreadyInitialised(this)) {
             return;
         }

File: src/main/java/io/supertokens/webserver/api/totp/VerifyTotpAPI.java
Patch:
@@ -46,9 +46,6 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         if (userId.isEmpty()) {
             throw new ServletException(new BadRequestException("userId cannot be empty"));
         }
-        if (totp.length() != 6) {
-            throw new ServletException(new BadRequestException("totp must be 6 characters long"));
-        }
 
         JsonObject result = new JsonObject();
 

File: src/main/java/io/supertokens/webserver/api/totp/VerifyTotpDeviceAPI.java
Patch:
@@ -50,9 +50,6 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         if (deviceName.isEmpty()) {
             throw new ServletException(new BadRequestException("deviceName cannot be empty"));
         }
-        if (totp.length() != 6) {
-            throw new ServletException(new BadRequestException("totp must be 6 characters long"));
-        }
 
         JsonObject result = new JsonObject();
 

File: src/test/java/io/supertokens/test/accountlinking/api/ActiveUserTest.java
Patch:
@@ -156,9 +156,9 @@ public void testActiveUserIsRemovedAfterLinkingAccounts() throws Exception {
                     WebserverAPI.getLatestCDIVersion().get(), "");
         }
 
-        // we don't remove the active user for the recipe user, so it should still be 2
+        // we remove the active user for the recipe user, so it should be 1
         userCount = ActiveUsers.countUsersActiveSince(process.getProcess(), System.currentTimeMillis() - 10000);
-        assertEquals(2, userCount);
+        assertEquals(1, userCount);
 
         // Sign in to the accounts once again
         {
@@ -188,7 +188,7 @@ public void testActiveUserIsRemovedAfterLinkingAccounts() throws Exception {
 
         // there should still be only one active user
         userCount = ActiveUsers.countUsersActiveSince(process.getProcess(), System.currentTimeMillis() - 10000);
-        assertEquals(2, userCount);
+        assertEquals(1, userCount);
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));

File: ee/src/test/java/io/supertokens/ee/test/TestMultitenancyStats.java
Patch:
@@ -78,6 +78,7 @@ public void testPaidStatsIsSentForAllAppsInMultitenancy() throws Exception {
                     new EmailPasswordConfig(true),
                     new ThirdPartyConfig(true, null),
                     new PasswordlessConfig(true),
+                    null, null,
                     config
             ), false);
 
@@ -86,6 +87,7 @@ public void testPaidStatsIsSentForAllAppsInMultitenancy() throws Exception {
                     new EmailPasswordConfig(true),
                     new ThirdPartyConfig(true, null),
                     new PasswordlessConfig(true),
+                    null, null,
                     config
             ), false);
 
@@ -94,6 +96,7 @@ public void testPaidStatsIsSentForAllAppsInMultitenancy() throws Exception {
                     new EmailPasswordConfig(true),
                     new ThirdPartyConfig(true, null),
                     new PasswordlessConfig(true),
+                    null, null,
                     config
             ), false);
         }

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -157,6 +157,9 @@ private void init() throws IOException, StorageQueryException {
             throw new QuitProgramException(e);
         }
 
+        // loading version file
+        Version.loadVersion(this, CLIOptions.get(this).getInstallationPath() + "version.yaml");
+
         Logging.info(this, TenantIdentifier.BASE_TENANT, "Completed config.yaml loading.", true);
 
         // loading storage layer
@@ -167,9 +170,6 @@ private void init() throws IOException, StorageQueryException {
             throw new QuitProgramException(e);
         }
 
-        // loading version file
-        Version.loadVersion(this, CLIOptions.get(this).getInstallationPath() + "version.yaml");
-
         // init file logging
         Logging.initFileLogging(this);
 

File: src/main/java/io/supertokens/featureflag/EE_FEATURES.java
Patch:
@@ -18,8 +18,7 @@
 
 public enum EE_FEATURES {
     ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"),
-    DASHBOARD_LOGIN("dashboard_login"),
-    TOTP("totp");
+    DASHBOARD_LOGIN("dashboard_login"), MFA("mfa");
 
     private final String name;
 

File: src/main/java/io/supertokens/inmemorydb/queries/EmailVerificationQueries.java
Patch:
@@ -289,7 +289,7 @@ public static List<String> isEmailVerified_transaction(Start start, Connection s
         // calculating the verified emails
 
         HashMap<String, String> supertokensUserIdToExternalUserIdMap = UserIdMappingQueries.getUserIdMappingWithUserIds_Transaction(start,
-                sqlCon, supertokensUserIds);
+                sqlCon, appIdentifier, supertokensUserIds);
         HashMap<String, String> externalUserIdToSupertokensUserIdMap = new HashMap<>();
 
         List<String> supertokensOrExternalUserIdsToQuery = new ArrayList<>();
@@ -357,7 +357,7 @@ public static List<String> isEmailVerified(Start start, AppIdentifier appIdentif
         // We have external user id stored in the email verification table, so we need to fetch the mapped userids for
         // calculating the verified emails
         HashMap<String, String> supertokensUserIdToExternalUserIdMap = UserIdMappingQueries.getUserIdMappingWithUserIds(start,
-                supertokensUserIds);
+                appIdentifier, supertokensUserIds);
         HashMap<String, String> externalUserIdToSupertokensUserIdMap = new HashMap<>();
         List<String> supertokensOrExternalUserIdsToQuery = new ArrayList<>();
         for (String userId : supertokensUserIds) {

File: src/main/java/io/supertokens/multitenancy/MultitenancyHelper.java
Patch:
@@ -86,7 +86,8 @@ public static void init(Main main) throws StorageQueryException, IOException {
                         new TenantConfig(
                                 new TenantIdentifier(null, null, null),
                                 new EmailPasswordConfig(true), new ThirdPartyConfig(true, null),
-                                new PasswordlessConfig(true), new JsonObject()), false, false, false);
+                                new PasswordlessConfig(true),
+                                null, null, new JsonObject()), false, false, false);
                 // Not force reloading all resources here (the last boolean in the function above)
                 // because the ucl for the FeatureFlag is not yet loaded and results in an empty
                 // instance of eeFeatureFlag. This is applicable only when the core is starting on
@@ -106,7 +107,7 @@ private TenantConfig[] getAllTenantsFromDb() throws StorageQueryException {
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
-                            new JsonObject()
+                            null, null, new JsonObject()
                     )
             };
         }

File: src/main/java/io/supertokens/output/LayoutWrappingEncoder.java
Patch:
@@ -27,8 +27,8 @@ class LayoutWrappingEncoder extends EncoderBase<ILoggingEvent> {
 
     private Layout<ILoggingEvent> layout;
 
-    LayoutWrappingEncoder(String processID) {
-        layout = new CustomLayout(processID);
+    LayoutWrappingEncoder(String processID, String coreVersion) {
+        layout = new CustomLayout(processID, coreVersion);
     }
 
     @Override

File: src/main/java/io/supertokens/output/Logging.java
Patch:
@@ -30,6 +30,7 @@
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.utils.Utils;
+import io.supertokens.version.Version;
 import io.supertokens.webserver.Webserver;
 import org.slf4j.LoggerFactory;
 
@@ -234,7 +235,7 @@ public static void stopLogging(Main main) {
 
     private Logger createLoggerForFile(Main main, String file, String name) {
         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
-        LayoutWrappingEncoder ple = new LayoutWrappingEncoder(main.getProcessId());
+        LayoutWrappingEncoder ple = new LayoutWrappingEncoder(main.getProcessId(), Version.getVersion(main).getCoreVersion());
         ple.setContext(lc);
         ple.start();
         FileAppender<ILoggingEvent> fileAppender = new FileAppender<>();
@@ -252,7 +253,7 @@ private Logger createLoggerForFile(Main main, String file, String name) {
 
     private Logger createLoggerForConsole(Main main, String name, LOG_LEVEL logLevel) {
         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();
-        LayoutWrappingEncoder ple = new LayoutWrappingEncoder(main.getProcessId());
+        LayoutWrappingEncoder ple = new LayoutWrappingEncoder(main.getProcessId(), Version.getVersion(main).getCoreVersion());
         ple.setContext(lc);
         ple.start();
         ConsoleAppender<ILoggingEvent> logConsoleAppender = new ConsoleAppender<>();

File: src/main/java/io/supertokens/utils/SemVer.java
Patch:
@@ -34,6 +34,7 @@ public class SemVer implements Comparable<SemVer> {
     public static final SemVer v2_21 = new SemVer("2.21");
     public static final SemVer v3_0 = new SemVer("3.0");
     public static final SemVer v4_0 = new SemVer("4.0");
+    public static final SemVer v5_0 = new SemVer("5.0");
 
     final private String version;
 

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -187,6 +187,7 @@ private void setupRoutes() {
         addAPI(new DeleteCodesAPI(main));
         addAPI(new DeleteCodeAPI(main));
         addAPI(new CreateCodeAPI(main));
+        addAPI(new CheckCodeAPI(main));
         addAPI(new ConsumeCodeAPI(main));
         addAPI(new TelemetryAPI(main));
         addAPI(new UsersCountAPI(main));
@@ -216,6 +217,7 @@ private void setupRoutes() {
         addAPI(new VerifyTotpAPI(main));
         addAPI(new RemoveTotpDeviceAPI(main));
         addAPI(new GetTotpDevicesAPI(main));
+        addAPI(new ImportTotpDeviceAPI(main));
         addAPI(new UpdateExternalUserIdInfoAPI(main));
         addAPI(new ImportUserWithPasswordHashAPI(main));
         addAPI(new LicenseKeyAPI(main));

File: src/main/java/io/supertokens/webserver/api/accountlinking/CanLinkAccountsAPI.java
Patch:
@@ -130,7 +130,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             try {
                 JsonObject response = new JsonObject();
                 response.addProperty("status", "RECIPE_USER_ID_ALREADY_LINKED_WITH_ANOTHER_PRIMARY_USER_ID_ERROR");
-                UserIdMapping.populateExternalUserIdForUsers(recipeUserIdStorage,
+                UserIdMapping.populateExternalUserIdForUsers(appIdentifier, recipeUserIdStorage,
                         new AuthRecipeUserInfo[]{e.recipeUser});
                 response.addProperty("primaryUserId", e.recipeUser.getSupertokensOrExternalUserId());
                 response.addProperty("description", e.getMessage());

File: src/main/java/io/supertokens/webserver/api/core/GetUserByIdAPI.java
Patch:
@@ -71,7 +71,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 // if a userIdMapping exists, set the userId in the response to the externalUserId
                 if (user != null) {
                     UserIdMapping.populateExternalUserIdForUsers(
-                            storageAndUserIdMapping.storage, new AuthRecipeUserInfo[]{user});
+                            appIdentifier, storageAndUserIdMapping.storage, new AuthRecipeUserInfo[]{user});
                 }
 
             } catch (UnknownUserIdException e) {

File: src/main/java/io/supertokens/webserver/api/core/ListUsersByAccountInfoAPI.java
Patch:
@@ -78,7 +78,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             AuthRecipeUserInfo[] users = AuthRecipe.getUsersByAccountInfo(
                     tenantIdentifier, storage, doUnionOfAccountInfo, email, phoneNumber, thirdPartyId,
                     thirdPartyUserId);
-            UserIdMapping.populateExternalUserIdForUsers(storage, users);
+            UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(), storage, users);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/core/UsersAPI.java
Patch:
@@ -170,7 +170,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                     limit, timeJoinedOrder, paginationToken,
                     recipeIdsEnumBuilder.build().toArray(RECIPE_ID[]::new), searchTags);
 
-            UserIdMapping.populateExternalUserIdForUsers(storage, users.users);
+            UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(), storage, users.users);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/emailpassword/ImportUserWithPasswordHashAPI.java
Patch:
@@ -100,7 +100,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             EmailPassword.ImportUserResponse importUserResponse = EmailPassword.importUserWithPasswordHash(
                     tenantIdentifier, storage, main, email,
                     passwordHash, passwordHashingAlgorithm);
-            UserIdMapping.populateExternalUserIdForUsers(storage, new AuthRecipeUserInfo[]{importUserResponse.user});
+            UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(), storage,
+                    new AuthRecipeUserInfo[]{importUserResponse.user});
             JsonObject response = new JsonObject();
             response.addProperty("status", "OK");
             JsonObject userJson =

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignInAPI.java
Patch:
@@ -21,6 +21,7 @@
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.emailpassword.exceptions.WrongCredentialsException;
+import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
@@ -78,8 +79,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         try {
             AuthRecipeUserInfo user = EmailPassword.signIn(tenantIdentifier, storage, super.main, normalisedEmail,
                     password);
-            io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(storage,
-                    new AuthRecipeUserInfo[]{user});
+            io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(
+                    tenantIdentifier.toAppIdentifier(), storage, new AuthRecipeUserInfo[]{user});
 
             ActiveUsers.updateLastActive(tenantIdentifier.toAppIdentifier(), main,
                     user.getSupertokensUserId()); // use the internal user id

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignUpAPI.java
Patch:
@@ -20,6 +20,7 @@
 import io.supertokens.ActiveUsers;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
+import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
@@ -100,6 +101,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             if (getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0)) {
                 result.addProperty("recipeUserId", user.getSupertokensOrExternalUserId());
             }
+
             super.sendJsonResponse(200, result, resp);
         } catch (DuplicateEmailException e) {
             Logging.debug(main, tenantIdentifier, Utils.exceptionStacktraceToString(e));

File: src/main/java/io/supertokens/webserver/api/multitenancy/ListTenantsAPI.java
Patch:
@@ -52,7 +52,6 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
             Storage storage = getTenantStorage(req);
 
-            enforcePublicTenantAndGetPublicTenantStorage(req); // enforce that this API is called using public tenant
             if (!tenantIdentifier.getTenantId().equals(TenantIdentifier.DEFAULT_TENANT_ID)) {
                 throw new BadPermissionException("Only the public tenantId is allowed to list all tenants " +
                         "associated with this app");

File: src/main/java/io/supertokens/webserver/api/multitenancy/RemoveTenantAPI.java
Patch:
@@ -53,16 +53,13 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         String tenantId = InputParser.parseStringOrThrowError(input, "tenantId", false);
         tenantId = Utils.normalizeAndValidateTenantId(tenantId);
 
-
-
         if (tenantId.equals(TenantIdentifier.DEFAULT_TENANT_ID)) {
             throw new ServletException(new BadPermissionException("Cannot delete public tenant, use remove app API instead"));
         }
 
         try {
             TenantIdentifier sourceTenantIdentifier = this.getTenantIdentifier(req);
 
-            enforcePublicTenantAndGetPublicTenantStorage(req); // Enforce public tenant
             if (!sourceTenantIdentifier.getTenantId().equals(TenantIdentifier.DEFAULT_TENANT_ID)) {
                 throw new BadPermissionException("Only the public tenantId is allowed to delete a tenant");
             }

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/CreateOrUpdateThirdPartyConfigAPI.java
Patch:
@@ -114,7 +114,8 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
                             tenantConfig.thirdPartyConfig.enabled,
                             newProviders.toArray(new ThirdPartyConfig.Provider[0])),
                     tenantConfig.passwordlessConfig,
-                    tenantConfig.coreConfig);
+                    tenantConfig.firstFactors, tenantConfig.requiredSecondaryFactors, tenantConfig.coreConfig
+            );
 
             Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req),
                     skipValidation, true);

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/RemoveThirdPartyConfigAPI.java
Patch:
@@ -83,7 +83,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     new ThirdPartyConfig(
                             config.thirdPartyConfig.enabled, newProviders.toArray(new ThirdPartyConfig.Provider[0])),
                     config.passwordlessConfig,
-                    config.coreConfig);
+                    config.firstFactors, config.requiredSecondaryFactors, config.coreConfig
+            );
 
             Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req), false, true);
 

File: src/main/java/io/supertokens/webserver/api/thirdparty/GetUsersByEmailAPI.java
Patch:
@@ -61,7 +61,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             String email = InputParser.getQueryParamOrThrowError(req, "email", false);
             email = Utils.normaliseEmail(email);
             AuthRecipeUserInfo[] users = ThirdParty.getUsersByEmail(tenantIdentifier, storage, email);
-            UserIdMapping.populateExternalUserIdForUsers(storage, users);
+            UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(), storage, users);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/thirdparty/UserAPI.java
Patch:
@@ -91,7 +91,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                     user = ThirdParty.getUser(appIdentifier, storageAndUserIdMapping.storage,
                             userId);
                     if (user != null) {
-                        UserIdMapping.populateExternalUserIdForUsers(storageAndUserIdMapping.storage,
+                        UserIdMapping.populateExternalUserIdForUsers(appIdentifier, storageAndUserIdMapping.storage,
                                 new AuthRecipeUserInfo[]{user});
                     }
                 } catch (UnknownUserIdException e) {
@@ -103,7 +103,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 user = ThirdParty.getUser(tenantIdentifier, storage, thirdPartyId,
                         thirdPartyUserId);
                 if (user != null) {
-                    UserIdMapping.populateExternalUserIdForUsers(storage, new AuthRecipeUserInfo[]{user});
+                    UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(), storage,
+                            new AuthRecipeUserInfo[]{user});
                 }
             }
 

File: src/test/java/io/supertokens/test/RequestStatsTest.java
Patch:
@@ -146,6 +146,7 @@ public void testLastMinuteStatsPerApp() throws Exception {
                 new EmailPasswordConfig(true),
                 new ThirdPartyConfig(true, null),
                 new PasswordlessConfig(true),
+                null, null,
                 new JsonObject()
         ), false);
 

File: src/test/java/io/supertokens/test/StorageTest.java
Patch:
@@ -751,6 +751,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
         jsonBody.addProperty("refreshToken",
                 sessionCreated.get("refreshToken").getAsJsonObject().get("token").getAsString());
         jsonBody.addProperty("enableAntiCsrf", false);
+        jsonBody.addProperty("useDynamicSigningKey", true);
 
         storage.setStorageLayerEnabled(false);
 

File: src/test/java/io/supertokens/test/TestHelloAPIRateLimiting.java
Patch:
@@ -78,6 +78,7 @@ private void createApps(TestingProcessManager.TestingProcess process)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -98,6 +99,7 @@ private void createApps(TestingProcessManager.TestingProcess process)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -118,6 +120,7 @@ private void createApps(TestingProcessManager.TestingProcess process)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/accountlinking/CreatePrimaryUserTest.java
Patch:
@@ -423,7 +423,7 @@ public void makePrimaryUserFailsCauseAnotherAccountWithSameEmailAlreadyAPrimaryU
         Multitenancy.addNewOrUpdateAppOrTenant(process.main, new TenantIdentifier(null, null, null),
                 new TenantConfig(new TenantIdentifier(null, null, "t1"), new EmailPasswordConfig(true),
                         new ThirdPartyConfig(true, new ThirdPartyConfig.Provider[0]), new PasswordlessConfig(true),
-                        new JsonObject()));
+                        null, null, new JsonObject()));
 
         Storage storage = (StorageLayer.getStorage(process.main));
         AuthRecipeUserInfo emailPasswordUser = EmailPassword.signUp(new TenantIdentifier(null, null, "t1"),
@@ -471,7 +471,7 @@ public void makePrimarySucceedsEvenIfAnotherAccountWithSameEmailButInADifferentT
         Multitenancy.addNewOrUpdateAppOrTenant(process.main, new TenantIdentifier(null, null, null),
                 new TenantConfig(new TenantIdentifier(null, null, "t1"), new EmailPasswordConfig(true),
                         new ThirdPartyConfig(true, new ThirdPartyConfig.Provider[0]), new PasswordlessConfig(true),
-                        new JsonObject()));
+                        null, null, new JsonObject()));
 
         Storage storage = (StorageLayer.getStorage(process.main));
         AuthRecipeUserInfo emailPasswordUser = EmailPassword.signUp(new TenantIdentifier(null, null, "t1"),

File: src/test/java/io/supertokens/test/accountlinking/api/CreatePrimaryUserAPITest.java
Patch:
@@ -452,7 +452,7 @@ public void createPrimaryUserInTenantWithAnotherStorage() throws Exception {
                         new EmailPasswordConfig(true),
                         new ThirdPartyConfig(true, null),
                         new PasswordlessConfig(true),
-                        coreConfig
+                        null, null, coreConfig
                 )
         );
 

File: src/test/java/io/supertokens/test/authRecipe/MultitenantAPITest.java
Patch:
@@ -123,6 +123,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -143,6 +144,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -163,6 +165,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/authRecipe/UserPaginationTest.java
Patch:
@@ -121,6 +121,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -141,6 +142,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -161,6 +163,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/dashboard/apis/MultitenantAPITest.java
Patch:
@@ -110,6 +110,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -130,6 +131,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -150,6 +152,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/emailpassword/EmailPasswordTest.java
Patch:
@@ -936,6 +936,7 @@ public void updateEmailSucceedsIfEmailUsedByOtherPrimaryUserInDifferentTenantWhi
         Multitenancy.addNewOrUpdateAppOrTenant(process.main, new TenantIdentifier(null, null, null),
                 new TenantConfig(new TenantIdentifier(null, null, "t1"), new EmailPasswordConfig(true),
                         new ThirdPartyConfig(true, new ThirdPartyConfig.Provider[0]), new PasswordlessConfig(true),
+                        null, null,
                         new JsonObject()));
 
         Storage storage = (StorageLayer.getStorage(process.main));
@@ -973,6 +974,7 @@ public void updateEmailFailsIfEmailUsedByOtherPrimaryUserInDifferentTenant()
         Multitenancy.addNewOrUpdateAppOrTenant(process.main, new TenantIdentifier(null, null, null),
                 new TenantConfig(new TenantIdentifier(null, null, "t1"), new EmailPasswordConfig(true),
                         new ThirdPartyConfig(true, new ThirdPartyConfig.Provider[0]), new PasswordlessConfig(true),
+                        null, null,
                         new JsonObject()));
 
         Storage storage = (StorageLayer.getStorage(process.main));

File: src/test/java/io/supertokens/test/emailpassword/MultitenantEmailPasswordTest.java
Patch:
@@ -84,6 +84,7 @@ private void createTenants(TestingProcessManager.TestingProcess process)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -104,6 +105,7 @@ private void createTenants(TestingProcessManager.TestingProcess process)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -124,6 +126,7 @@ private void createTenants(TestingProcessManager.TestingProcess process)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/emailpassword/api/MultitenantAPITest.java
Patch:
@@ -117,6 +117,7 @@ private void createTenants(Boolean includeHashingKey)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -141,6 +142,7 @@ private void createTenants(Boolean includeHashingKey)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -165,6 +167,7 @@ private void createTenants(Boolean includeHashingKey)
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/emailverification/api/MultitenantAPITest.java
Patch:
@@ -105,6 +105,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -125,6 +126,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -145,6 +147,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/multitenant/LoadTest.java
Patch:
@@ -75,7 +75,7 @@ public void testCreating100TenantsAndCheckOnlyOneInstanceOfStorageLayerIsCreated
                     new EmailPasswordConfig(false),
                     new ThirdPartyConfig(false, new ThirdPartyConfig.Provider[0]),
                     new PasswordlessConfig(false),
-                    config);
+                    null, null, config);
             try {
                 Multitenancy.addNewOrUpdateAppOrTenant(process.getProcess(), new TenantIdentifier(null, null, null),
                         tenants[insideLoop]);

File: src/test/java/io/supertokens/test/multitenant/RandomConfigTest.java
Patch:
@@ -72,7 +72,7 @@ public void randomlyTestLoadConfig()
         FeatureFlagTestContent.getInstance(process.getProcess())
                 .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.MULTI_TENANCY});
         process.startProcess();
-        assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
+        assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED, 1000000));
 
         if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
             return;

File: src/test/java/io/supertokens/test/multitenant/SigningKeysTest.java
Patch:
@@ -118,7 +118,7 @@ public void keysAreGeneratedForAllUserPoolIds()
                 new TenantConfig(new TenantIdentifier("c1", null, null), new EmailPasswordConfig(false),
                         new ThirdPartyConfig(false, new ThirdPartyConfig.Provider[0]),
                         new PasswordlessConfig(false),
-                        tenantConfig)};
+                        null, null, tenantConfig)};
 
         for (TenantConfig config : tenants) {
             Multitenancy.addNewOrUpdateAppOrTenant(process.getProcess(), new TenantIdentifier(null, null, null),
@@ -189,11 +189,11 @@ public void signingKeyClassesAreThereForAllTenants()
                 new TenantConfig(new TenantIdentifier("c1", null, null), new EmailPasswordConfig(false),
                         new ThirdPartyConfig(false, new ThirdPartyConfig.Provider[0]),
                         new PasswordlessConfig(false),
-                        tenantConfig),
+                        null, null, tenantConfig),
                 new TenantConfig(new TenantIdentifier("c2", null, null), new EmailPasswordConfig(false),
                         new ThirdPartyConfig(false, new ThirdPartyConfig.Provider[0]),
                         new PasswordlessConfig(false),
-                        tenantConfig2)};
+                        null, null, tenantConfig2)};
 
         for (TenantConfig config : tenants) {
             Multitenancy.addNewOrUpdateAppOrTenant(process.getProcess(), new TenantIdentifier(null, null, null),

File: src/test/java/io/supertokens/test/multitenant/api/TestPermissionChecks.java
Patch:
@@ -218,15 +218,15 @@ public void testPermissionsForListTenants() throws Exception {
         TestCase[] testCases = new TestCase[]{
                 new TestCase(
                         new TenantIdentifier("127.0.0.1", "a1", "t1"), null,
-                        "Only the public tenantId is allowed to list all tenants"
+                        "Only the public tenantId is allowed to list all tenants associated with this app"
                 ),
                 new TestCase(
                         new TenantIdentifier("127.0.0.1", null, "t1"), null,
-                        "Only the public tenantId is allowed to list all tenants"
+                        "Only the public tenantId is allowed to list all tenants associated with this app"
                 ),
                 new TestCase(
                         new TenantIdentifier(null, null, "t1"), null,
-                        "Only the public tenantId is allowed to list all tenants"
+                        "Only the public tenantId is allowed to list all tenants associated with this app"
                 ),
                 new TestCase(
                         new TenantIdentifier(null, null, null), null, null

File: src/test/java/io/supertokens/test/multitenant/api/TestSkipValidationInCreateThirdParty.java
Patch:
@@ -68,7 +68,7 @@ public void testSkipValidation() throws Exception {
                 new EmailPasswordConfig(true),
                 new ThirdPartyConfig(true, null),
                 new PasswordlessConfig(true),
-                new JsonObject()
+                null, null, new JsonObject()
         ), false);
 
         try {

File: src/test/java/io/supertokens/test/multitenant/api/TestTenantIdIsNotPresentForOlderCDI.java
Patch:
@@ -122,7 +122,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
-                            config
+                            null, null, config
                     )
             );
         }
@@ -142,7 +142,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
-                            config
+                            null, null, config
                     )
             );
         }
@@ -162,7 +162,7 @@ private void createTenants()
                             new EmailPasswordConfig(true),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(true),
-                            config
+                            null, null, config
                     )
             );
         }

File: src/test/java/io/supertokens/test/multitenant/api/TestTenantUserAssociation.java
Patch:
@@ -197,8 +197,9 @@ public void testUserDisassociationForNotAuthRecipes() throws Exception {
             }
 
             if (name.equals(UserMetadataStorage.class.getName())
-                    || name.equals(JWTRecipeStorage.class.getName()) ||
-                    name.equals(ActiveUsersStorage.class.getName())) {
+                    || name.equals(JWTRecipeStorage.class.getName())
+                    || name.equals(ActiveUsersStorage.class.getName())
+            ) {
                 // user metadata is app specific and does not have any tenant specific data
                 // JWT storage does not have any user specific data
                 // Active users storage does not have tenant specific data

File: src/test/java/io/supertokens/test/passwordless/api/MultitenantAPITest.java
Patch:
@@ -108,6 +108,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -128,6 +129,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -148,6 +150,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/session/api/MultitenantAPITest.java
Patch:
@@ -109,6 +109,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -129,6 +130,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );
@@ -149,6 +151,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(false, null),
                             new PasswordlessConfig(true),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/session/api/RefreshSessionAPITest2_21.java
Patch:
@@ -76,7 +76,7 @@ public void checkRefreshWithProtectedFieldInPayload() throws Exception {
 
         JsonObject response = HttpRequestForTesting.sendJsonPOSTRequest(process.getProcess(), "",
                     "http://localhost:3567/recipe/session/refresh", sessionRefreshBody, 1000, 1000, null,
-                    Utils.getCdiVersionStringLatestForTests(), "session");
+                    SemVer.v2_21.get(), "session");
 
         assertEquals(response.entrySet().size(), 2);
         assertEquals(response.get("status").getAsString(), "UNAUTHORISED");

File: src/test/java/io/supertokens/test/session/api/SessionRegenerateAPITest2_21.java
Patch:
@@ -107,6 +107,7 @@ public void testCallRegenerateAPIWithProtectedFieldInJWTV3Token() throws Excepti
         sessionRefreshBody.addProperty("refreshToken",
                 sessionInfo.get("refreshToken").getAsJsonObject().get("token").getAsString());
         sessionRefreshBody.addProperty("enableAntiCsrf", false);
+        sessionRefreshBody.addProperty("useDynamicSigningKey", true);
 
         JsonObject sessionRefreshResponse = HttpRequestForTesting.sendJsonPOSTRequest(process.getProcess(), "",
                 "http://localhost:3567/recipe/session/refresh", sessionRefreshBody, 1000, 1000, null,

File: src/test/java/io/supertokens/test/thirdparty/api/MultitenantAPITest.java
Patch:
@@ -108,6 +108,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -128,6 +129,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );
@@ -148,6 +150,7 @@ private void createTenants()
                             new EmailPasswordConfig(false),
                             new ThirdPartyConfig(true, null),
                             new PasswordlessConfig(false),
+                            null, null,
                             config
                     )
             );

File: src/test/java/io/supertokens/test/totp/api/GetTotpDevicesAPITest.java
Patch:
@@ -77,7 +77,7 @@ public void testApi() throws Exception {
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
-        FeatureFlagTestContent.getInstance(process.main).setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[] { EE_FEATURES.TOTP });
+        FeatureFlagTestContent.getInstance(process.main).setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[] { EE_FEATURES.MFA });
 
         if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
             return;
@@ -153,7 +153,8 @@ public void testApi() throws Exception {
                     null,
                     Utils.getCdiVersionStringLatestForTests(),
                     "totp");
-            assert res2.get("status").getAsString().equals("TOTP_NOT_ENABLED_ERROR");
+            assert res2.get("status").getAsString().equals("OK");
+            assert res2.get("devices").getAsJsonArray().size() == 0;
         }
 
         process.kill();

File: src/test/java/io/supertokens/test/totp/api/RemoveTotpDeviceAPITest.java
Patch:
@@ -78,7 +78,7 @@ public void testApi() throws Exception {
         }
 
         FeatureFlagTestContent.getInstance(process.main)
-                .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.TOTP});
+                .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.MFA});
 
         // Setup user and devices:
         JsonObject createDeviceReq = new JsonObject();
@@ -180,7 +180,8 @@ public void testApi() throws Exception {
                     null,
                     Utils.getCdiVersionStringLatestForTests(),
                     "totp");
-            assert res3.get("status").getAsString().equals("TOTP_NOT_ENABLED_ERROR");
+            assert res3.get("status").getAsString().equals("OK");
+            assert res3.get("didDeviceExist").getAsBoolean() == false;
         }
 
         process.kill();

File: src/test/java/io/supertokens/test/totp/api/UpdateTotpDeviceAPITest.java
Patch:
@@ -76,7 +76,7 @@ public void testApi() throws Exception {
             return;
         }
 
-        FeatureFlagTestContent.getInstance(process.main).setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[] { EE_FEATURES.TOTP });
+        FeatureFlagTestContent.getInstance(process.main).setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[] { EE_FEATURES.MFA });
 
         // Setup user and devices:
         JsonObject createDeviceReq = new JsonObject();
@@ -199,7 +199,7 @@ public void testApi() throws Exception {
                     null,
                     Utils.getCdiVersionStringLatestForTests(),
                     "totp");
-            assert res4.get("status").getAsString().equals("TOTP_NOT_ENABLED_ERROR");
+            assert res4.get("status").getAsString().equals("UNKNOWN_DEVICE_ERROR");
         }
 
         process.kill();

File: src/test/java/io/supertokens/test/userIdMapping/UserIdMappingTest.java
Patch:
@@ -791,7 +791,7 @@ public void checkThatCreateUserIdMappingHasAllNonAuthRecipeChecks() throws Excep
             return;
         }
 
-        FeatureFlagTestContent.getInstance(process.main).setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[] { EE_FEATURES.TOTP });
+        FeatureFlagTestContent.getInstance(process.main).setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[] { EE_FEATURES.MFA });
 
         // this list contains the package names for recipes which dont use UserIdMapping
         ArrayList<String> nonAuthRecipesWhichDontNeedUserIdMapping = new ArrayList<>(

File: ee/src/main/java/io/supertokens/ee/EEFeatureFlag.java
Patch:
@@ -271,7 +271,7 @@ private JsonObject getMultiTenancyStats()
         return stats;
     }
 
-    private JsonObject getAccountLinkingStats() throws StorageQueryException {
+    private JsonObject getAccountLinkingStats() throws StorageQueryException, TenantOrAppNotFoundException {
         JsonObject result = new JsonObject();
         Storage[] storages = StorageLayer.getStoragesForApp(main, this.appIdentifier);
         boolean usesAccountLinking = false;

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -24,7 +24,6 @@
 import io.supertokens.exceptions.QuitProgramException;
 import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
-import io.supertokens.pluginInterface.multitenancy.TenantIdentifierWithStorage;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.api.accountlinking.*;
 import io.supertokens.webserver.api.core.*;
@@ -144,7 +143,7 @@ public void start() {
             tomcat.start();
         } catch (LifecycleException e) {
             // reusing same port OR not right permissions given.
-            Logging.error(main, TenantIdentifierWithStorage.BASE_TENANT, null, false, e);
+            Logging.error(main, TenantIdentifier.BASE_TENANT, null, false, e);
             throw new QuitProgramException(
                     "Error while starting webserver. Possible reasons:\n- Another instance of SuperTokens is already "
                             + "running on the same port. If you want to run another instance, please pass a new config "

File: src/main/java/io/supertokens/webserver/api/core/ActiveUsersCountAPI.java
Patch:
@@ -52,8 +52,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
         }
 
         try {
-            int count = ActiveUsers.countUsersActiveSince(
-                    this.getAppIdentifierWithStorageFromRequestAndEnforcePublicTenant(req), main, sinceTimestamp);
+            enforcePublicTenantAndGetPublicTenantStorage(req); // to enforce this API is called from public tenant
+            int count = ActiveUsers.countUsersActiveSince(main, this.getAppIdentifier(req), sinceTimestamp);
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");
             result.addProperty("count", count);

File: src/main/java/io/supertokens/webserver/api/core/JWKSPublicAPI.java
Patch:
@@ -61,7 +61,7 @@ public String getPath() {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
-            List<JsonObject> jwks = SigningKeys.getInstance(this.getAppIdentifierWithStorage(req), main).getJWKS();
+            List<JsonObject> jwks = SigningKeys.getInstance(this.getAppIdentifier(req), main).getJWKS();
             JsonObject reply = new JsonObject();
             JsonArray jwksJsonArray = new JsonParser().parse(new Gson().toJson(jwks)).getAsJsonArray();
             reply.add("keys", jwksJsonArray);

File: src/main/java/io/supertokens/webserver/api/core/TelemetryAPI.java
Patch:
@@ -46,8 +46,8 @@ public String getPath() {
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         // API is app specific
         try {
-            KeyValueInfo telemetryId = Telemetry.getTelemetryId(main,
-                    this.getAppIdentifierWithStorageFromRequestAndEnforcePublicTenant(req));
+            this.enforcePublicTenantAndGetPublicTenantStorage(req); // enforce public tenant
+            KeyValueInfo telemetryId = Telemetry.getTelemetryId(main, getAppIdentifier(req));
 
             JsonObject result = new JsonObject();
             if (telemetryId == null) {

File: src/main/java/io/supertokens/webserver/api/dashboard/DashboardSignInAPI.java
Patch:
@@ -61,7 +61,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             String sessionId = Dashboard.signInDashboardUser(
-                    super.getAppIdentifierWithStorageFromRequestAndEnforcePublicTenant(req), main, email, password);
+                    getAppIdentifier(req),
+                    enforcePublicTenantAndGetPublicTenantStorage(req), main, email, password);
             if (sessionId == null) {
                 JsonObject response = new JsonObject();
                 response.addProperty("status", "INVALID_CREDENTIALS_ERROR");

File: src/main/java/io/supertokens/webserver/api/dashboard/GetDashboardSessionsForUserAPI.java
Patch:
@@ -56,7 +56,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
 
             JsonArray arr = new com.google.gson.JsonParser().parse(new Gson().toJson(
                     Dashboard.getAllDashboardSessionsForUser(
-                            super.getAppIdentifierWithStorageFromRequestAndEnforcePublicTenant(req),
+                            getAppIdentifier(req),
+                            enforcePublicTenantAndGetPublicTenantStorage(req),
                             userId))).getAsJsonArray();
             JsonObject response = new JsonObject();
             response.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/dashboard/GetDashboardUsersAPI.java
Patch:
@@ -51,7 +51,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
 
             JsonArray arr = new com.google.gson.JsonParser().parse(new Gson().toJson(
                             Dashboard.getAllDashboardUsers(
-                                    super.getAppIdentifierWithStorageFromRequestAndEnforcePublicTenant(req), main)))
+                                    getAppIdentifier(req),
+                                    enforcePublicTenantAndGetPublicTenantStorage(req), main)))
                     .getAsJsonArray();
             JsonObject response = new JsonObject();
             response.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/dashboard/RevokeSessionAPI.java
Patch:
@@ -53,7 +53,8 @@ protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws
 
         try {
             Dashboard.revokeSessionWithSessionId(
-                    super.getAppIdentifierWithStorageFromRequestAndEnforcePublicTenant(req), sessionId);
+                    getAppIdentifier(req),
+                    enforcePublicTenantAndGetPublicTenantStorage(req), sessionId);
             JsonObject response = new JsonObject();
             response.addProperty("status", "OK");
             super.sendJsonResponse(200, response, resp);

File: src/main/java/io/supertokens/webserver/api/emailverification/RevokeAllTokensForUserAPI.java
Patch:
@@ -52,7 +52,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         email = Utils.normaliseEmail(email);
 
         try {
-            EmailVerification.revokeAllTokens(this.getTenantIdentifierWithStorageFromRequest(req), userId, email);
+            EmailVerification.revokeAllTokens(getTenantIdentifier(req), getTenantStorage(req), userId, email);
 
             JsonObject response = new JsonObject();
             response.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateAppAPI.java
Patch:
@@ -18,12 +18,10 @@
 
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
-import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.Utils;
-import io.supertokens.webserver.api.multitenancy.BaseCreateOrUpdate;
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
@@ -57,8 +55,9 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         JsonObject coreConfig = InputParser.parseJsonObjectOrThrowError(input, "coreConfig", true);
 
         TenantIdentifier sourceTenantIdentifier;
+
         try {
-            sourceTenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            sourceTenantIdentifier = getTenantIdentifier(req);
         } catch (TenantOrAppNotFoundException e) {
             throw new ServletException(e);
         }

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateConnectionUriDomainAPI.java
Patch:
@@ -56,7 +56,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
 
         TenantIdentifier sourceTenantIdentifier;
         try {
-            sourceTenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            sourceTenantIdentifier = getTenantIdentifier(req);
         } catch (TenantOrAppNotFoundException e) {
             throw new ServletException(e);
         }

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateTenantOrGetTenantAPI.java
Patch:
@@ -59,7 +59,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
 
         TenantIdentifier sourceTenantIdentifier;
         try {
-            sourceTenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            sourceTenantIdentifier = getTenantIdentifier(req);
         } catch (TenantOrAppNotFoundException e) {
             throw new ServletException(e);
         }
@@ -74,13 +74,13 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
-            TenantIdentifierWithStorage tenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
             TenantConfig config = Multitenancy.getTenantInfo(main, tenantIdentifier);
             if (config == null) {
                 throw new TenantOrAppNotFoundException(tenantIdentifier);
             }
             boolean shouldProtect = shouldProtectProtectedConfig(req);
-            JsonObject result = config.toJson(shouldProtect, tenantIdentifier.getStorage(), CoreConfig.PROTECTED_CONFIGS);
+            JsonObject result = config.toJson(shouldProtect, getTenantStorage(req), CoreConfig.PROTECTED_CONFIGS);
             result.addProperty("status", "OK");
 
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/multitenancy/RemoveAppAPI.java
Patch:
@@ -59,7 +59,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
 
         try {
-            TenantIdentifier sourceTenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            TenantIdentifier sourceTenantIdentifier = this.getTenantIdentifier(req);
             if (!sourceTenantIdentifier.getTenantId().equals(TenantIdentifier.DEFAULT_TENANT_ID)
                     || !sourceTenantIdentifier.getAppId().equals(TenantIdentifier.DEFAULT_APP_ID)) {
                 throw new BadPermissionException("Only the public tenantId and public appId is allowed to delete an app");

File: src/main/java/io/supertokens/webserver/api/multitenancy/RemoveConnectionUriDomainAPI.java
Patch:
@@ -58,7 +58,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
 
         try {
-            TenantIdentifier sourceTenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            TenantIdentifier sourceTenantIdentifier = this.getTenantIdentifier(req);
             if (!sourceTenantIdentifier.equals(new TenantIdentifier(null, null, null))) {
                 throw new BadPermissionException(
                         "Only the public tenantId, public appId and default connectionUriDomain is allowed to delete a connectionUriDomain");

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/CreateOrUpdateThirdPartyConfigAPI.java
Patch:
@@ -70,7 +70,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         }
 
         try {
-            TenantIdentifierWithStorage tenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            TenantIdentifier tenantIdentifier = getTenantIdentifier(req);
 
             if (!tenantIdentifier.equals(TenantIdentifier.BASE_TENANT)) {
                 if (Arrays.stream(FeatureFlag.getInstance(main, new AppIdentifier(null, null)).getEnabledFeatures())

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/RemoveThirdPartyConfigAPI.java
Patch:
@@ -26,7 +26,7 @@
 import io.supertokens.pluginInterface.exceptions.InvalidConfigException;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.multitenancy.TenantConfig;
-import io.supertokens.pluginInterface.multitenancy.TenantIdentifierWithStorage;
+import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.ThirdPartyConfig;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.thirdparty.InvalidProviderConfigException;
@@ -59,7 +59,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         thirdPartyId = thirdPartyId.trim();
 
         try {
-            TenantIdentifierWithStorage tenantIdentifier = this.getTenantIdentifierWithStorageFromRequest(req);
+            TenantIdentifier tenantIdentifier = this.getTenantIdentifier(req);
+
             TenantConfig config = Multitenancy.getTenantInfo(main, tenantIdentifier);
             if (config == null) {
                 throw new TenantOrAppNotFoundException(tenantIdentifier);

File: src/main/java/io/supertokens/webserver/api/passwordless/DeleteCodeAPI.java
Patch:
@@ -53,7 +53,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         String codeId = InputParser.parseStringOrThrowError(input, "codeId", false);
 
         try {
-            Passwordless.removeCode(this.getTenantIdentifierWithStorageFromRequest(req), codeId);
+            Passwordless.removeCode(getTenantIdentifier(req), getTenantStorage(req), codeId);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/test/java/io/supertokens/test/accountlinking/api/CreatePrimaryUserAPITest.java
Patch:
@@ -457,7 +457,7 @@ public void createPrimaryUserInTenantWithAnotherStorage() throws Exception {
         );
 
         AuthRecipeUserInfo user = EmailPassword.signUp(
-                tenantIdentifier.withStorage(StorageLayer.getStorage(tenantIdentifier, process.main)),
+                tenantIdentifier, StorageLayer.getStorage(tenantIdentifier, process.main),
                 process.getProcess(), "test@example.com", "abcd1234");
 
         JsonObject userObj;
@@ -497,7 +497,8 @@ public void createPrimaryUserInTenantWithAnotherStorage() throws Exception {
         }
 
         AuthRecipe.createPrimaryUser(process.main,
-                tenantIdentifier.toAppIdentifier().withStorage(StorageLayer.getStorage(tenantIdentifier, process.main)),
+                tenantIdentifier.toAppIdentifier(), (StorageLayer.getStorage(tenantIdentifier,
+                process.main)),
                 user.getSupertokensUserId());
 
         {

File: src/test/java/io/supertokens/test/multitenant/api/TestApp.java
Patch:
@@ -322,7 +322,8 @@ public String getPath() {
             protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException,
                     ServletException {
                 try {
-                    super.sendTextResponse(200, this.getAppIdentifierWithStorage(req).getAppId(), resp);
+                    getTenantStorage(req);
+                    super.sendTextResponse(200, this.getTenantIdentifier(req).getAppId(), resp);
                 } catch (TenantOrAppNotFoundException e) {
                     throw new ServletException(e);
                 }

File: src/test/java/io/supertokens/test/multitenant/api/TestConnectionUriDomain.java
Patch:
@@ -382,7 +382,8 @@ public String getPath() {
                 protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException,
                         ServletException {
                     try {
-                        super.sendTextResponse(200, this.getAppIdentifierWithStorage(req).getConnectionUriDomain(), resp);
+                        getTenantStorage(req);
+                        super.sendTextResponse(200, this.getTenantIdentifier(req).getConnectionUriDomain(), resp);
                     } catch (TenantOrAppNotFoundException e) {
                         throw new ServletException(e);
                     }

File: src/test/java/io/supertokens/test/multitenant/api/TestLicenseBehaviour.java
Patch:
@@ -99,7 +99,7 @@ public void testAllowLicenseRemovalForCoreWithMultitenancy() throws Exception {
         // Sign up and get user info
         JsonObject userInfo = TestMultitenancyAPIHelper.epSignUp(new TenantIdentifier(null, "a1", "t1"),
                 "user@example.com", "password", process.getProcess());
-        JsonObject userInfo2 = TestMultitenancyAPIHelper.getEpUserById(new TenantIdentifier(null, "a1", "t1"),
+        JsonObject userInfo2 = TestMultitenancyAPIHelper.getEpUserById(new TenantIdentifier(null, "a1", null),
                 userInfo.get("id").getAsString(), process.getProcess());
         assertEquals(userInfo, userInfo2);
     }

File: src/test/java/io/supertokens/test/multitenant/api/TestTenant.java
Patch:
@@ -272,7 +272,8 @@ public String getPath() {
             protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException,
                     ServletException {
                 try {
-                    super.sendTextResponse(200, this.getTenantIdentifierWithStorageFromRequest(req).getTenantId(), resp);
+                    getTenantStorage(req);
+                    super.sendTextResponse(200, this.getTenantIdentifier(req).getTenantId(), resp);
                 } catch (TenantOrAppNotFoundException e) {
                     throw new ServletException(e);
                 }

File: src/test/java/io/supertokens/test/thirdparty/api/MultitenantAPITest.java
Patch:
@@ -249,7 +249,7 @@ public void testGetUserUsingIdReturnsUserFromTheRightTenantWhileQueryingFromAnyT
         JsonObject user2 = signInUp(t2, "google", "google-user-id", "user@gmail.com");
         JsonObject user3 = signInUp(t3, "google", "google-user-id", "user@gmail.com");
 
-        for (TenantIdentifier tenant : new TenantIdentifier[]{t1, t2, t3}) {
+        for (TenantIdentifier tenant : new TenantIdentifier[]{t1}) { // Only public tenant can get user by id
             assertEquals(user1, getUserUsingId(tenant, user1.get("id").getAsString()));
             assertEquals(user2, getUserUsingId(tenant, user2.get("id").getAsString()));
             assertEquals(user3, getUserUsingId(tenant, user3.get("id").getAsString()));

File: src/test/java/io/supertokens/test/totp/api/TotpUserIdMappingTest.java
Patch:
@@ -77,7 +77,7 @@ public void testExternalUserIdTranslation() throws Exception {
                 "totp");
         assert res1.get("status").getAsString().equals("OK");
         String d1Secret = res1.get("secret").getAsString();
-        TOTPDevice device1 = new TOTPDevice(externalUserId, "deviceName", d1Secret, 30, 0, false);
+        TOTPDevice device1 = new TOTPDevice(externalUserId, "d1", d1Secret, 30, 0, false);
 
         body.addProperty("deviceName", "d2");
 
@@ -93,7 +93,7 @@ public void testExternalUserIdTranslation() throws Exception {
                 "totp");
         assert res2.get("status").getAsString().equals("OK");
         String d2Secret = res2.get("secret").getAsString();
-        TOTPDevice device2 = new TOTPDevice(externalUserId, "deviceName", d2Secret, 30, 0, false);
+        TOTPDevice device2 = new TOTPDevice(externalUserId, "d2", d2Secret, 30, 0, false);
 
         // Verify d1 but not d2:
         JsonObject verifyD1Input = new JsonObject();

File: ee/src/test/java/io/supertokens/ee/test/EETest.java
Patch:
@@ -1326,7 +1326,7 @@ protected URLConnection openConnection(URL u) {
             JsonObject paidFeatureUsageStats = j.getAsJsonObject("paidFeatureUsageStats");
             JsonArray mauArr = paidFeatureUsageStats.get("maus").getAsJsonArray();
             assertEquals(paidFeatureUsageStats.entrySet().size(), 1);
-            assertEquals(mauArr.size(), 30);
+            assertEquals(mauArr.size(), 31);
             assertEquals(mauArr.get(0).getAsInt(), 0);
             assertEquals(mauArr.get(29).getAsInt(), 0);
         }

File: src/test/java/io/supertokens/test/FeatureFlagTest.java
Patch:
@@ -97,7 +97,7 @@ public void noLicenseKeyShouldHaveEmptyFeatureFlag()
 
         JsonObject stats = FeatureFlag.getInstance(process.getProcess()).getPaidFeatureStats();
         Assert.assertEquals(stats.entrySet().size(), 1);
-        Assert.assertEquals(stats.get("maus").getAsJsonArray().size(), 30);
+        Assert.assertEquals(stats.get("maus").getAsJsonArray().size(), 31);
         Assert.assertEquals(stats.get("maus").getAsJsonArray().get(0).getAsInt(), 0);
         Assert.assertEquals(stats.get("maus").getAsJsonArray().get(29).getAsInt(), 0);
 
@@ -251,7 +251,7 @@ public void testThatCallingGetFeatureFlagAPIReturnsTotpStats() throws Exception
             }
 
             assert features.contains(new JsonPrimitive("totp"));
-            assert maus.size() == 30;
+            assert maus.size() == 31;
             assert maus.get(0).getAsInt() == 2; // 2 users have signed up
             assert maus.get(29).getAsInt() == 2;
 

File: ee/src/test/java/io/supertokens/ee/test/api/GetFeatureFlagAPITest.java
Patch:
@@ -54,7 +54,7 @@ public void testRetrievingFeatureFlagInfoWhenNoLicenseKeyIsSet() throws Exceptio
         if (StorageLayer.getStorage(process.getProcess()).getType() == STORAGE_TYPE.SQL) {
             JsonArray mauArr = usageStats.get("maus").getAsJsonArray();
             assertEquals(1, usageStats.entrySet().size());
-            assertEquals(30, mauArr.size());
+            assertEquals(31, mauArr.size());
             assertEquals(0, mauArr.get(0).getAsInt());
             assertEquals(0, mauArr.get(29).getAsInt());
         } else {
@@ -92,7 +92,7 @@ public void testRetrievingFeatureFlagInfoWhenLicenseKeyIsSet() throws Exception
         if (StorageLayer.getStorage(process.getProcess()).getType() == STORAGE_TYPE.SQL) {
             JsonArray mauArr = usageStats.get("maus").getAsJsonArray();
             assertEquals(1, usageStats.entrySet().size());
-            assertEquals(30, mauArr.size());
+            assertEquals(31, mauArr.size());
             assertEquals(0, mauArr.get(0).getAsInt());
             assertEquals(0, mauArr.get(29).getAsInt());
         } else {

File: src/main/java/io/supertokens/cronjobs/telemetry/Telemetry.java
Patch:
@@ -130,7 +130,7 @@ protected void doTaskPerApp(AppIdentifier app) throws Exception {
 
                 JsonArray mauArr = new JsonArray();
 
-                for (int i = 0; i < 30; i++) {
+                for (int i = 0; i < 31; i++) {
                     long now = System.currentTimeMillis();
                     long today = now - (now % (24 * 60 * 60 * 1000L));
                     long timestamp = today - (i * 24 * 60 * 60 * 1000L);

File: src/test/java/io/supertokens/test/FeatureFlagTest.java
Patch:
@@ -192,15 +192,15 @@ public void testThatCallingGetFeatureFlagAPIReturnsTotpStats() throws Exception
                 assert features.size() == 1;
             }
             assert features.contains(new JsonPrimitive("totp"));
-            assert maus.size() == 30;
+            assert maus.size() == 31;
             assert maus.get(0).getAsInt() == 0;
             assert maus.get(29).getAsInt() == 0;
 
             JsonObject totpStats = usageStats.get("totp").getAsJsonObject();
             JsonArray totpMaus = totpStats.get("maus").getAsJsonArray();
             int totalTotpUsers = totpStats.get("total_users").getAsInt();
 
-            assert totpMaus.size() == 30;
+            assert totpMaus.size() == 31;
             assert totpMaus.get(0).getAsInt() == 0;
             assert totpMaus.get(29).getAsInt() == 0;
 
@@ -259,7 +259,7 @@ public void testThatCallingGetFeatureFlagAPIReturnsTotpStats() throws Exception
             JsonArray totpMaus = totpStats.get("maus").getAsJsonArray();
             int totalTotpUsers = totpStats.get("total_users").getAsInt();
 
-            assert totpMaus.size() == 30;
+            assert totpMaus.size() == 31;
             assert totpMaus.get(0).getAsInt() == 1; // only 1 user has TOTP enabled
             assert totpMaus.get(29).getAsInt() == 1;
 

File: src/test/java/io/supertokens/test/TelemetryTest.java
Patch:
@@ -175,7 +175,7 @@ protected URLConnection openConnection(URL u) {
         if (StorageLayer.getBaseStorage(process.getProcess()).getType() == STORAGE_TYPE.SQL) {
             assertEquals(1, telemetryData.get("dashboardUserEmails").getAsJsonArray().size());
             assertEquals("test@example.com", telemetryData.get("dashboardUserEmails").getAsJsonArray().get(0).getAsString());
-            assertEquals(30, telemetryData.get("maus").getAsJsonArray().size());
+            assertEquals(31, telemetryData.get("maus").getAsJsonArray().size());
             assertEquals(0, telemetryData.get("usersCount").getAsInt());
         } else {
             assertEquals(0, telemetryData.get("dashboardUserEmails").getAsJsonArray().size());

File: src/test/java/io/supertokens/test/StorageLayerTest.java
Patch:
@@ -94,7 +94,7 @@ public void totpCodeLengthTest() throws Exception {
             // This error will be different in Postgres and MySQL
             // We added (CHECK (LENGTH(code) <= 8)) to the table definition in SQLite
             String totpUsedCodeTable = Config.getConfig(start).getTotpUsedCodesTable();
-            assert e.getMessage().contains("CHECK constraint failed: " + totpUsedCodeTable);
+            assert e.getMessage().contains("CHECK constraint failed: ");
         }
 
         // Try code with length < 8

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignInAPI.java
Patch:
@@ -79,7 +79,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     password);
             io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(tenantIdentifierWithStorage, new AuthRecipeUserInfo[]{user});
 
-            ActiveUsers.updateLastActive(tenantIdentifierWithStorage.toAppIdentifierWithStorage(), main,
+            ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main,
                     user.getSupertokensUserId()); // use the internal user id
 
             JsonObject result = new JsonObject();

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignUpAPI.java
Patch:
@@ -80,7 +80,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             TenantIdentifierWithStorage tenant = this.getTenantIdentifierWithStorageFromRequest(req);
             AuthRecipeUserInfo user = EmailPassword.signUp(tenant, super.main, normalisedEmail, password);
 
-            ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main, user.getSupertokensUserId());
+            ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main, user.getSupertokensUserId());
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/passwordless/ConsumeCodeAPI.java
Patch:
@@ -91,7 +91,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0));
             io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(this.getTenantIdentifierWithStorageFromRequest(req), new AuthRecipeUserInfo[]{consumeCodeResponse.user});
 
-            ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main, consumeCodeResponse.user.getSupertokensUserId());
+            ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main, consumeCodeResponse.user.getSupertokensUserId());
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/session/RefreshSessionAPI.java
Patch:
@@ -90,10 +90,10 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                             this.getAppIdentifierWithStorage(req),
                             sessionInfo.session.userId, UserIdType.ANY);
                     if (userIdMapping != null) {
-                        ActiveUsers.updateLastActive(appIdentifierWithStorage, main,
+                        ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main,
                                 userIdMapping.superTokensUserId);
                     } else {
-                        ActiveUsers.updateLastActive(appIdentifierWithStorage, main,
+                        ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main,
                                 sessionInfo.session.userId);
                     }
                 } catch (StorageQueryException ignored) {

File: src/main/java/io/supertokens/webserver/api/session/SessionAPI.java
Patch:
@@ -110,10 +110,10 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                                     this.getAppIdentifierWithStorage(req),
                                     sessionInfo.session.userId, UserIdType.ANY);
                     if (userIdMapping != null) {
-                        ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main,
+                        ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main,
                                 userIdMapping.superTokensUserId);
                     } else {
-                        ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main,
+                        ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main,
                                 sessionInfo.session.userId);
                     }
                 } catch (StorageQueryException ignored) {

File: src/main/java/io/supertokens/webserver/api/session/SessionRemoveAPI.java
Patch:
@@ -116,10 +116,10 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                                 this.getAppIdentifierWithStorage(req),
                                 userId, UserIdType.ANY);
                         if (userIdMapping != null) {
-                            ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main,
+                            ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main,
                                     userIdMapping.superTokensUserId);
                         } else {
-                            ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main, userId);
+                            ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main, userId);
                         }
                     } catch (StorageQueryException ignored) {
                     }

File: src/main/java/io/supertokens/webserver/api/thirdparty/SignInUpAPI.java
Patch:
@@ -81,7 +81,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                         thirdPartyUserId, email, isEmailVerified);
                 UserIdMapping.populateExternalUserIdForUsers(this.getTenantIdentifierWithStorageFromRequest(req), new AuthRecipeUserInfo[]{response.user});
 
-                ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main, response.user.getSupertokensUserId());
+                ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main, response.user.getSupertokensUserId());
 
                 JsonObject result = new JsonObject();
                 result.addProperty("status", "OK");
@@ -139,7 +139,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                         email, isEmailVerified);
                 UserIdMapping.populateExternalUserIdForUsers(this.getTenantIdentifierWithStorageFromRequest(req), new AuthRecipeUserInfo[]{response.user});
 
-                ActiveUsers.updateLastActive(this.getAppIdentifierWithStorage(req), main, response.user.getSupertokensUserId());
+                ActiveUsers.updateLastActive(this.getPublicTenantStorage(req), main, response.user.getSupertokensUserId());
 
                 JsonObject result = new JsonObject();
                 result.addProperty("status", "OK");

File: src/test/java/io/supertokens/test/multitenant/ConfigTest.java
Patch:
@@ -1914,6 +1914,7 @@ public void testAllConflictingConfigs() throws Exception {
                 "argon2_memory_kb",
                 "argon2_parallelism",
                 "bcrypt_log_rounds",
+                "supertokens_saas_load_only_cud"
         };
         Object[] disallowedValues = new Object[]{
                 3567, // port
@@ -1930,6 +1931,7 @@ public void testAllConflictingConfigs() throws Exception {
                 87795, // argon2_memory_kb
                 2, // argon2_parallelism
                 11, // bcrypt_log_rounds
+                "mydomain.com", // supertokens_saas_load_only_cud
         };
 
         process.kill();
@@ -1995,7 +1997,7 @@ public void testAllConflictingConfigs() throws Exception {
                 new Object[]{true, false}, // disable_telemetry
                 new Object[]{"BCRYPT", "ARGON2"}, // password_hashing_alg
                 new Object[]{"abcd1234abcd1234abcd1234abcd1234", "qwer1234qwer1234qwer1234qwer1234"}, // firebase_password_hashing_signer_key
-                new Object[]{"2.21", "3.0"} // supertokens_max_cdi_version
+                new Object[]{"2.21", "3.0"}, // supertokens_max_cdi_version
         };
 
         for (int i=0; i<conflictingInSameUserPool.length; i++) {

File: src/main/java/io/supertokens/config/Config.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
 import io.supertokens.ProcessState;
@@ -51,7 +52,7 @@ private Config(Main main, String configFilePath) throws InvalidConfigException,
         this.main = main;
         final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
         Object configObj = mapper.readValue(new File(configFilePath), Object.class);
-        JsonObject jsonConfig = new Gson().toJsonTree(configObj).getAsJsonObject();
+        JsonObject jsonConfig = new GsonBuilder().serializeNulls().create().toJsonTree(configObj).getAsJsonObject();
         CoreConfig config = ConfigMapper.mapConfig(jsonConfig, CoreConfig.class);
         config.normalizeAndValidate(main, true);
         this.core = config;
@@ -91,7 +92,7 @@ public static JsonObject getBaseConfigAsJsonObject(Main main) throws IOException
         // omit them from the output json.
         ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());
         Object obj = yamlReader.readValue(new File(getConfigFilePath(main)), Object.class);
-        return new Gson().toJsonTree(obj).getAsJsonObject();
+        return new GsonBuilder().serializeNulls().create().toJsonTree(obj).getAsJsonObject();
     }
 
     private static String getConfigFilePath(Main main) {

File: src/test/java/io/supertokens/test/passwordless/api/MultitenantAPITest.java
Patch:
@@ -571,7 +571,8 @@ public void testUpdateNumber() throws Exception {
                 String newPhoneNumber = generateRandomNumber(8);
                 updatePhoneNumber(tenant, user.getAsJsonPrimitive("id").getAsString(), newPhoneNumber);
                 user.remove("phoneNumber");
-                user.addProperty("phoneNumber", newPhoneNumber);
+                // We need to normalize the phone number before adding it to the user object, as the update API performs normalization.
+                user.addProperty("phoneNumber", io.supertokens.utils.Utils.normalizeIfPhoneNumber(newPhoneNumber));
 
                 assertEquals(user, signInUpNumberUsingUserInputCode(userTenant, newPhoneNumber));
             }

File: src/main/java/io/supertokens/webserver/api/useridmapping/UserIdMappingAPI.java
Patch:
@@ -27,6 +27,7 @@
 import io.supertokens.AppIdentifierWithStorageAndUserIdMapping;
 import io.supertokens.useridmapping.UserIdMapping;
 import io.supertokens.useridmapping.UserIdType;
+import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 import jakarta.servlet.ServletException;
@@ -97,7 +98,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     this.getAppIdentifierWithStorageAndUserIdMappingFromRequest(req, superTokensUserId, UserIdType.SUPERTOKENS);
 
             UserIdMapping.createUserIdMapping(main, appIdentifierWithStorageAndUserIdMapping.appIdentifierWithStorage,
-                    superTokensUserId, externalUserId, externalUserIdInfo, force);
+                    superTokensUserId, externalUserId, externalUserIdInfo, force, getVersionFromRequest(req).greaterThanOrEqualTo(
+                            SemVer.v4_0));
 
             JsonObject response = new JsonObject();
             response.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -257,6 +257,8 @@ private void setupRoutes() {
         addAPI(new UnlinkAccountAPI(main));
         addAPI(new ConsumeResetPasswordAPI(main));
 
+        addAPI(new RequestStatsAPI(main));
+
         StandardContext context = tomcatReference.getContext();
         Tomcat tomcat = tomcatReference.getTomcat();
 

File: src/test/java/io/supertokens/test/multitenant/RandomConfigTest.java
Patch:
@@ -101,7 +101,7 @@ public void randomlyTestLoadConfig()
 
                 TenantConfig persistedTenantConfig = Multitenancy.getTenantInfo(process.getProcess(),
                         tenantConfig.tenantIdentifier);
-                assertEquals(tenantConfig, persistedTenantConfig);
+                assertTrue(tenantConfig.deepEquals(persistedTenantConfig));
 
             } catch (InvalidProviderConfigException | InvalidConfigException e) {
                 assertFalse(isOk);

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -254,6 +254,9 @@ private void init() throws IOException, StorageQueryException {
         // starts DeleteExpiredAccessTokenSigningKeys cronjob if the access token signing keys can change
         Cronjobs.addCronjob(this, DeleteExpiredAccessTokenSigningKeys.init(this, uniqueUserPoolIdsTenants));
 
+        // this is to ensure tenantInfos are in sync for the new cron job as well
+        MultitenancyHelper.getInstance(this).refreshCronjobs();
+
         // creates password hashing pool
         PasswordHashing.init(this);
 

File: src/main/java/io/supertokens/multitenancy/MultitenancyHelper.java
Patch:
@@ -217,7 +217,7 @@ public void loadSigningKeys(List<TenantIdentifier> tenantsThatChanged)
         SigningKeys.loadForAllTenants(main, apps, tenantsThatChanged);
     }
 
-    private void refreshCronjobs() {
+    public void refreshCronjobs() {
         List<List<TenantIdentifier>> list = StorageLayer.getTenantsWithUniqueUserPoolId(main);
         Cronjobs.getInstance(main).setTenantsInfo(list);
     }

File: src/main/java/io/supertokens/inmemorydb/queries/GeneralQueries.java
Patch:
@@ -1181,7 +1181,7 @@ private static List<AuthRecipeUserInfo> getPrimaryUserInfoForUserIds(Start start
                 " WHERE au.primary_or_recipe_user_id IN (SELECT primary_or_recipe_user_id FROM " +
                 getConfig(start).getAppIdToUserIdTable() + " WHERE (user_id IN ("
                 + Utils.generateCommaSeperatedQuestionMarks(userIds.size()) +
-                ") OR au.primary_or_recipe_user_id IN (" +
+                ") OR primary_or_recipe_user_id IN (" +
                 Utils.generateCommaSeperatedQuestionMarks(userIds.size()) +
                 ")) AND app_id = ?) AND au.app_id = ?";
 
@@ -1273,7 +1273,7 @@ private static List<AuthRecipeUserInfo> getPrimaryUserInfoForUserIds_Transaction
                 " WHERE au.primary_or_recipe_user_id IN (SELECT primary_or_recipe_user_id FROM " +
                 getConfig(start).getAppIdToUserIdTable() + " WHERE (user_id IN ("
                 + Utils.generateCommaSeperatedQuestionMarks(userIds.size()) +
-                ") OR au.primary_or_recipe_user_id IN (" +
+                ") OR primary_or_recipe_user_id IN (" +
                 Utils.generateCommaSeperatedQuestionMarks(userIds.size()) +
                 ")) AND app_id = ?) AND au.app_id = ?";
 

File: src/main/java/io/supertokens/inmemorydb/queries/PasswordlessQueries.java
Patch:
@@ -1093,7 +1093,7 @@ private static PasswordlessDeviceRowMapper getInstance() {
 
         @Override
         public PasswordlessDevice map(ResultSet result) throws Exception {
-            return new PasswordlessDevice(result.getString("device_id_hash"), result.getString("email"),
+            return new PasswordlessDevice(result.getString("device_id_hash").trim(), result.getString("email"),
                     result.getString("phone_number"), result.getString("link_code_salt"),
                     result.getInt("failed_attempts"));
         }
@@ -1111,7 +1111,7 @@ private static PasswordlessCodeRowMapper getInstance() {
 
         @Override
         public PasswordlessCode map(ResultSet result) throws Exception {
-            return new PasswordlessCode(result.getString("code_id"), result.getString("device_id_hash"),
+            return new PasswordlessCode(result.getString("code_id"), result.getString("device_id_hash").trim(),
                     result.getString("link_code_hash"), result.getLong("created_at"));
         }
     }

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -830,7 +830,6 @@ public void testThatReAddingSameCronTaskDoesNotScheduleMoreExecutors() throws Ex
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
-        assertEquals(normalCronjobCounter, 0);
         for (int i=0; i<10; i++) {
             Cronjobs.addCronjob(process.getProcess(), CounterCronJob.getInstance(process.getProcess()));
             Thread.sleep(50);

File: src/main/java/io/supertokens/cronjobs/Cronjobs.java
Patch:
@@ -91,9 +91,9 @@ public static void addCronjob(Main main, CronTask task) {
         }
         Cronjobs instance = getInstance(main);
         synchronized (instance.lock) {
-            instance.executor.scheduleWithFixedDelay(task, task.getInitialWaitTimeSeconds(),
-                    task.getIntervalTimeSeconds(), TimeUnit.SECONDS);
             if (!instance.tasks.contains(task)) {
+                instance.executor.scheduleWithFixedDelay(task, task.getInitialWaitTimeSeconds(),
+                        task.getIntervalTimeSeconds(), TimeUnit.SECONDS);
                 instance.tasks.add(task);
             }
         }

File: src/main/java/io/supertokens/passwordless/Passwordless.java
Patch:
@@ -399,7 +399,7 @@ public static ConsumeCodeResponse consumeCode(TenantIdentifierWithStorage tenant
                     consumedDevice.email);
             for (AuthRecipeUserInfo currUser : users) {
                 for (LoginMethod currLM : currUser.loginMethods) {
-                    if (currLM.recipeId == RECIPE_ID.PASSWORDLESS && currLM.email.equals(consumedDevice.email) && currLM.tenantIds.contains(tenantIdentifierWithStorage.getTenantId())) {
+                    if (currLM.recipeId == RECIPE_ID.PASSWORDLESS && currLM.email != null && currLM.email.equals(consumedDevice.email) && currLM.tenantIds.contains(tenantIdentifierWithStorage.getTenantId())) {
                         user = currUser;
                         loginMethod = currLM;
                         break;
@@ -412,7 +412,7 @@ public static ConsumeCodeResponse consumeCode(TenantIdentifierWithStorage tenant
             for (AuthRecipeUserInfo currUser : users) {
                 for (LoginMethod currLM : currUser.loginMethods) {
                     if (currLM.recipeId == RECIPE_ID.PASSWORDLESS &&
-                            currLM.phoneNumber.equals(consumedDevice.phoneNumber) && currLM.tenantIds.contains(tenantIdentifierWithStorage.getTenantId())) {
+                            currLM.phoneNumber != null && currLM.phoneNumber.equals(consumedDevice.phoneNumber) && currLM.tenantIds.contains(tenantIdentifierWithStorage.getTenantId())) {
                         user = currUser;
                         loginMethod = currLM;
                         break;

File: src/main/java/io/supertokens/ProcessState.java
Patch:
@@ -113,6 +113,7 @@ public EventAndException(PROCESS_STATE state, Exception e) {
 
         public EventAndException(PROCESS_STATE state, Exception e, JsonObject data) {
             this.state = state;
+            this.exception = e;
             this.data = data;
         }
     }

File: ee/src/main/java/io/supertokens/ee/EEFeatureFlag.java
Patch:
@@ -452,7 +452,7 @@ private EE_FEATURES[] doServerCall(String licenseKey)
             if (Main.isTesting) {
                 licenseCheckRequests.add(json);
             }
-            ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.LICENSE_KEY_CHECK_NETWORK_CALL, null);
+            ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.LICENSE_KEY_CHECK_NETWORK_CALL, null, json);
             JsonObject licenseCheckResponse = HttpRequest.sendJsonPOSTRequest(this.main, REQUEST_ID,
                     "https://api.supertokens.io/0/st/license/check",
                     json, 10000, 10000, 0);

File: src/main/java/io/supertokens/inmemorydb/queries/EmailPasswordQueries.java
Patch:
@@ -523,6 +523,8 @@ public static boolean addUserIdToTenant_Transaction(Start start, Connection sqlC
                 pst.setLong(7, userInfo.timeJoined);
                 pst.setLong(8, userInfo.timeJoined);
             });
+
+            GeneralQueries.updateTimeJoinedForPrimaryUser_Transaction(start, sqlCon, tenantIdentifier.toAppIdentifier(), finalAccountLinkingInfo.primaryUserId);
         }
 
         { // emailpassword_user_to_tenant

File: src/main/java/io/supertokens/inmemorydb/queries/PasswordlessQueries.java
Patch:
@@ -921,6 +921,8 @@ public static boolean addUserIdToTenant_Transaction(Start start, Connection sqlC
                 pst.setLong(7, userInfo.timeJoined);
                 pst.setLong(8, userInfo.timeJoined);
             });
+
+            GeneralQueries.updateTimeJoinedForPrimaryUser_Transaction(start, sqlCon, tenantIdentifier.toAppIdentifier(), accountLinkingInfo.primaryUserId);
         }
 
         { // passwordless_user_to_tenant

File: src/main/java/io/supertokens/inmemorydb/queries/ThirdPartyQueries.java
Patch:
@@ -476,6 +476,8 @@ public static boolean addUserIdToTenant_Transaction(Start start, Connection sqlC
                 pst.setLong(7, userInfo.timeJoined);
                 pst.setLong(8, userInfo.timeJoined);
             });
+
+            GeneralQueries.updateTimeJoinedForPrimaryUser_Transaction(start, sqlCon, tenantIdentifier.toAppIdentifier(), accountLinkingInfo.primaryUserId);
         }
 
         { // thirdparty_user_to_tenant

File: src/main/java/io/supertokens/session/Session.java
Patch:
@@ -138,7 +138,7 @@ public static SessionInformationHolder createNewSession(TenantIdentifierWithStor
 
         String primaryUserId = recipeUserId;
         if (tenantIdentifierWithStorage.getStorage().getType().equals(STORAGE_TYPE.SQL)) {
-            tenantIdentifierWithStorage.getAuthRecipeStorage()
+            primaryUserId = tenantIdentifierWithStorage.getAuthRecipeStorage()
                     .getPrimaryUserIdStrForUserId(tenantIdentifierWithStorage.toAppIdentifier(), recipeUserId);
             if (primaryUserId == null) {
                 primaryUserId = recipeUserId;

File: src/main/java/io/supertokens/inmemorydb/queries/MultitenancyQueries.java
Patch:
@@ -216,7 +216,7 @@ public static void addTenantIdInTargetStorage(Start start, TenantIdentifier tena
 
                     {
                         String QUERY = "INSERT INTO " + Config.getConfig(start).getTenantsTable()
-                                + "(app_id, tenant_id, created_at_time)" + " VALUES(?, ?, ?) ON CONFLICT DO NOTHING";
+                                + "(app_id, tenant_id, created_at_time)" + " VALUES(?, ?, ?)";
 
                         update(sqlCon, QUERY, pst -> {
                             pst.setString(1, tenantIdentifier.getAppId());

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -75,10 +75,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add(SemVer.v2_20);
         supportedVersions.add(SemVer.v2_21);
         supportedVersions.add(SemVer.v3_0);
+        supportedVersions.add(SemVer.v4_0);
     }
 
     public static SemVer getLatestCDIVersion() {
-        return SemVer.v3_0;
+        return SemVer.v4_0;
     }
 
     public SemVer getLatestCDIVersionForRequest(HttpServletRequest req)

File: src/main/java/io/supertokens/webserver/api/session/SessionRegenerateAPI.java
Patch:
@@ -86,6 +86,9 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
                 result.get("session").getAsJsonObject().remove("tenantId");
             }
+            if (getVersionFromRequest(req).lesserThan(SemVer.v4_0)) {
+                result.get("session").getAsJsonObject().remove("recipeUserId");
+            }
 
             result.addProperty("status", "OK");
             super.sendJsonResponse(200, result, resp);

File: src/test/java/io/supertokens/test/FeatureFlagTest.java
Patch:
@@ -32,7 +32,9 @@
 import io.supertokens.featureflag.exceptions.FeatureNotEnabledException;
 import io.supertokens.featureflag.exceptions.NoLicenseKeyFoundException;
 import io.supertokens.multitenancy.Multitenancy;
+import io.supertokens.multitenancy.MultitenancyHelper;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
+import io.supertokens.pluginInterface.authRecipe.AuthRecipeUserInfo;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.multitenancy.*;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
@@ -509,6 +511,7 @@ public void testThatMultitenantStatsAreAccurateForAnApp() throws Exception {
                 null, 1000, 1000, null, WebserverAPI.getLatestCDIVersion().get(), "");
         Assert.assertEquals("OK", response.get("status").getAsString());
 
+        assertFalse(response.get("usageStats").getAsJsonObject().has("account_linking"));
         JsonArray multitenancyStats = response.get("usageStats").getAsJsonObject().get("multi_tenancy")
                 .getAsJsonObject().get("tenants").getAsJsonArray();
         assertEquals(6, multitenancyStats.size());

File: ee/src/test/java/io/supertokens/ee/test/Utils.java
Patch:
@@ -1,6 +1,7 @@
 package io.supertokens.ee.test;
 
 import io.supertokens.Main;
+import io.supertokens.ee.EEFeatureFlag;
 import io.supertokens.pluginInterface.PluginInterfaceTesting;
 import io.supertokens.storageLayer.StorageLayer;
 import org.apache.tomcat.util.http.fileupload.FileUtils;
@@ -51,6 +52,7 @@ public static void reset() {
         Main.isTesting = true;
         PluginInterfaceTesting.isTesting = true;
         Main.makeConsolePrintSilent = true;
+        EEFeatureFlag.resetLisenseCheckRequests();
         String installDir = "../../";
         try {
 

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/RemoveThirdPartyConfigAPI.java
Patch:
@@ -68,7 +68,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             // Create a new list of providers skipping the thirdPartyId provided in the input
             List<ThirdPartyConfig.Provider> newProviders = new ArrayList<>();
             boolean found = false;
-            for (ThirdPartyConfig.Provider provider: config.thirdPartyConfig.providers) {
+            for (ThirdPartyConfig.Provider provider : config.thirdPartyConfig.providers) {
                 if (!provider.thirdPartyId.equals(thirdPartyId)) {
                     newProviders.add(provider);
                 } else {
@@ -84,7 +84,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     config.passwordlessConfig,
                     config.coreConfig);
 
-            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req), true);
+            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req), false, true);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: ee/src/test/java/io/supertokens/ee/test/CronjobTest.java
Patch:
@@ -29,6 +29,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        FeatureFlag.clearURLClassLoader();
     }
 
 

File: ee/src/test/java/io/supertokens/ee/test/EETest.java
Patch:
@@ -81,6 +81,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        FeatureFlag.clearURLClassLoader();
     }
 
     @Rule

File: ee/src/test/java/io/supertokens/ee/test/api/DeleteLicenseKeyAPITest.java
Patch:
@@ -33,6 +33,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        FeatureFlag.clearURLClassLoader();
     }
 
     @Test

File: ee/src/test/java/io/supertokens/ee/test/api/GetFeatureFlagAPITest.java
Patch:
@@ -28,6 +28,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        FeatureFlag.clearURLClassLoader();
     }
 
     @Test

File: ee/src/test/java/io/supertokens/ee/test/api/GetLicenseKeyAPITest.java
Patch:
@@ -28,6 +28,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        FeatureFlag.clearURLClassLoader();
     }
 
     @Test

File: ee/src/test/java/io/supertokens/ee/test/api/SetLicenseKeyAPITest.java
Patch:
@@ -31,6 +31,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        FeatureFlag.clearURLClassLoader();
     }
 
     @Test

File: src/main/java/io/supertokens/webserver/api/multitenancy/BaseCreateOrUpdate.java
Patch:
@@ -119,7 +119,7 @@ protected void handle(HttpServletRequest req, TenantIdentifier sourceTenantIdent
             Multitenancy.checkPermissionsForCreateOrUpdate(
                     main, sourceTenantIdentifier, tenantConfig.tenantIdentifier);
 
-            Multitenancy.addNewOrUpdateAppOrTenant(main, tenantConfig, shouldProtectProtectedConfig(req));
+            Multitenancy.addNewOrUpdateAppOrTenant(main, tenantConfig, shouldProtectProtectedConfig(req), true);
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");
             result.addProperty("createdNew", createdNew);

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/RemoveThirdPartyConfigAPI.java
Patch:
@@ -84,7 +84,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     config.passwordlessConfig,
                     config.coreConfig);
 
-            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req));
+            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req), true);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/session/Session.java
Patch:
@@ -35,6 +35,7 @@
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.pluginInterface.session.noSqlStorage.SessionNoSQLStorage_1;
 import io.supertokens.pluginInterface.session.sqlStorage.SessionSQLStorage;
+import io.supertokens.pluginInterface.sqlStorage.SQLStorage;
 import io.supertokens.session.accessToken.AccessToken;
 import io.supertokens.session.accessToken.AccessToken.AccessTokenInfo;
 import io.supertokens.session.info.SessionInfo;
@@ -388,7 +389,7 @@ public static SessionInformationHolder getSession(AppIdentifier appIdentifier, M
                             UnsupportedJWTSigningAlgorithmException | AccessTokenPayloadError | TenantOrAppNotFoundException e) {
                         throw new StorageTransactionLogicException(e);
                     }
-                });
+                }, SQLStorage.TransactionIsolationLevel.REPEATABLE_READ);
             } catch (StorageTransactionLogicException e) {
                 if (e.actualException instanceof UnauthorisedException) {
                     throw (UnauthorisedException) e.actualException;

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -826,7 +826,7 @@ public void testThatThereAreTasksOfAllCronTaskClassesAndHaveCorrectIntervals() t
 
         // Note that the time is in seconds
         Map<String, Integer> intervals = new HashMap<>();
-        intervals.put("io.supertokens.ee.cronjobs.EELicenseCheck", 10);
+        intervals.put("io.supertokens.ee.cronjobs.EELicenseCheck", 86400);
         intervals.put("io.supertokens.cronjobs.syncCoreConfigWithDb.SyncCoreConfigWithDb", 60);
         intervals.put("io.supertokens.cronjobs.deleteExpiredSessions.DeleteExpiredSessions", 43200);
         intervals.put("io.supertokens.cronjobs.deleteExpiredPasswordResetTokens.DeleteExpiredPasswordResetTokens", 3600);
@@ -838,7 +838,7 @@ public void testThatThereAreTasksOfAllCronTaskClassesAndHaveCorrectIntervals() t
         intervals.put("io.supertokens.cronjobs.deleteExpiredAccessTokenSigningKeys.DeleteExpiredAccessTokenSigningKeys", 86400);
 
         Map<String, Integer> delays = new HashMap<>();
-        delays.put("io.supertokens.ee.cronjobs.EELicenseCheck", 10);
+        delays.put("io.supertokens.ee.cronjobs.EELicenseCheck", 86400);
         delays.put("io.supertokens.cronjobs.syncCoreConfigWithDb.SyncCoreConfigWithDb", 0);
         delays.put("io.supertokens.cronjobs.deleteExpiredSessions.DeleteExpiredSessions", 0);
         delays.put("io.supertokens.cronjobs.deleteExpiredPasswordResetTokens.DeleteExpiredPasswordResetTokens", 0);

File: ee/src/main/java/io/supertokens/ee/EEFeatureFlag.java
Patch:
@@ -52,8 +52,8 @@
 import java.util.List;
 
 public class EEFeatureFlag implements io.supertokens.featureflag.EEFeatureFlagInterface {
-    public static final int INTERVAL_BETWEEN_SERVER_SYNC = 1000 * 3600 * 24; // 1 day.
-    private static final long INTERVAL_BETWEEN_DB_READS = (long) 1000 * 3600 * 4; // 4 hour.
+    public static final int INTERVAL_BETWEEN_SERVER_SYNC = 3600 * 24; // 1 day (in seconds).
+    private static final long INTERVAL_BETWEEN_DB_READS = (long) 1000 * 3600 * 4; // 4 hour (in millis).
     public static final String REQUEST_ID = "licensecheck";
 
     public static final String FEATURE_FLAG_KEY_IN_DB = "FEATURE_FLAG";

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -201,9 +201,8 @@ private void init() throws IOException, StorageQueryException {
                 }
             }
         }
-        FeatureFlag.initForBaseTenant(this, CLIOptions.get(this).getInstallationPath() + "ee/");
-
         MultitenancyHelper.init(this);
+        FeatureFlag.initForBaseTenant(this, CLIOptions.get(this).getInstallationPath() + "ee/");
 
         try {
             // load all configs for each of the tenants.

File: src/main/java/io/supertokens/utils/Utils.java
Patch:
@@ -77,8 +77,9 @@ public static String convertToBase64(String str) {
         return new String(Base64.getEncoder().encode(stringToBytes(str)), StandardCharsets.UTF_8);
     }
 
+    // This function deserializes both B64 and B64URL encodings
     public static String convertFromBase64(String str) {
-        return new String(Base64.getDecoder().decode(stringToBytes(str)), StandardCharsets.UTF_8);
+        return new String(Base64.getDecoder().decode(stringToBytes(str.replace("-", "+").replace("_", "/"))), StandardCharsets.UTF_8);
     }
 
     public static String throwableStacktraceToString(Throwable e) {

File: src/test/java/io/supertokens/test/multitenant/api/TestConnectionUriDomain.java
Patch:
@@ -442,7 +442,7 @@ public void testDifferentValuesForCUDThatShouldNotWork() throws Exception {
             return;
         }
 
-        String[] valueForCreate = new String[]{"http://localhost_com", "localhost:", "abc.example.1com", "domain.com:abcd"};
+        String[] valueForCreate = new String[]{"http://localhost_com", "localhost:", "domain.com:abcd"};
         for (int i = 0; i < valueForCreate.length; i++) {
             try {
                 JsonObject config = new JsonObject();

File: src/main/java/io/supertokens/webserver/Utils.java
Patch:
@@ -47,7 +47,7 @@ public static String normalizeAndValidateConnectionUriDomain(String connectionUr
             throw new ServletException(new WebserverAPI.BadRequestException("connectionUriDomain should not be an empty String"));
         }
 
-        String hostnameRegex = "^[a-z][a-z0-9-]+(\\.[a-z][a-z0-9-]+)*(:[0-9]+)?$";
+        String hostnameRegex = "^[a-z0-9-]+(\\.[a-z0-9-]+)*(:[0-9]+)?$";
         String ipRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(:[0-9]+)?$";
 
         if (!connectionUriDomain.matches(hostnameRegex) && !connectionUriDomain.matches(ipRegex)) {

File: src/test/java/io/supertokens/test/multitenant/api/TestPermissionChecks.java
Patch:
@@ -487,6 +487,7 @@ public void testConnectionUriDomainValidationUtil() throws Exception {
                 "sub-domain.example.com",
                 "sub-domain.example.com:3567",
                 "hello.co.uk",
+                "58hello.abc.com"
         };
         String[] invalidDomains = new String[]{
                 "http://localhost",

File: src/main/java/io/supertokens/webserver/api/multitenancy/DisassociateUserFromTenant.java
Patch:
@@ -59,14 +59,16 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
 
         try {
+            String externalUserId = null;
             AppIdentifierWithStorageAndUserIdMapping mappingAndStorage =
                     getAppIdentifierWithStorageAndUserIdMappingFromRequest(req, userId, UserIdType.ANY);
             if (mappingAndStorage.userIdMapping != null) {
                 userId = mappingAndStorage.userIdMapping.superTokensUserId;
+                externalUserId = mappingAndStorage.userIdMapping.externalUserId;
             }
 
             boolean wasAssociated = Multitenancy.removeUserIdFromTenant(main,
-                    getTenantIdentifierWithStorageFromRequest(req), userId);
+                    getTenantIdentifierWithStorageFromRequest(req), userId, externalUserId);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/test/java/io/supertokens/test/totp/TotpLicenseTest.java
Patch:
@@ -88,6 +88,9 @@ public void testTotpWithoutLicense() throws Exception {
         if (result == null) {
             return;
         }
+        if (StorageLayer.isInMemDb(result.process.getProcess())) {
+            return;
+        }
         Main main = result.process.getProcess();
 
         // Create device

File: src/main/java/io/supertokens/featureflag/EE_FEATURES.java
Patch:
@@ -17,7 +17,8 @@
 package io.supertokens.featureflag;
 
 public enum EE_FEATURES {
-    ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"), DASHBOARD_LOGIN("dashboard_login"),
+    ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"),
+    DASHBOARD_LOGIN("dashboard_login"),
     TOTP("totp");
 
     private final String name;

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateConnectionUriDomainAPI.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
-import io.supertokens.multitenancy.exception.BadPermissionException;
 import io.supertokens.pluginInterface.multitenancy.TenantIdentifier;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
 import io.supertokens.webserver.InputParser;
@@ -46,7 +45,7 @@ public String getPath() {
     protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
 
-        String connectionUriDomain =  InputParser.parseStringOrThrowError(input, "connectionUriDomain", true);
+        String connectionUriDomain = InputParser.parseStringOrThrowError(input, "connectionUriDomain", true);
         if (connectionUriDomain != null) {
             connectionUriDomain = Utils.normalizeAndValidateConnectionUriDomain(connectionUriDomain);
         }

File: src/test/java/io/supertokens/test/multitenant/api/TestMultitenancyAPIHelper.java
Patch:
@@ -321,7 +321,7 @@ public static void addLicense(String licenseKey, Main main) throws HttpResponseE
 
         JsonObject response = HttpRequestForTesting.sendJsonPUTRequest(main, "",
                 "http://localhost:3567/ee/license", licenseKeyRequest,
-                2000, 2000, null,
+                2000, 5000, null,
                 SemVer.v3_0.get(), null);
         assertEquals("OK", response.get("status").getAsString());
     }

File: src/test/java/io/supertokens/test/CDIVersionTest.java
Patch:
@@ -427,7 +427,7 @@ public void testThatGreatedThanMaxCDIVersionIsNotAllowed() throws Exception {
                     "jwt");
             fail();
         } catch (HttpResponseException e) {
-            assert(e.getMessage().contains("Unsupported CDI version"));
+            assert(e.getMessage().contains("cdi-version 2.21 not supported"));
         }
 
         try {
@@ -436,7 +436,7 @@ public void testThatGreatedThanMaxCDIVersionIsNotAllowed() throws Exception {
                     "jwt");
             fail();
         } catch (HttpResponseException e) {
-            assert(e.getMessage().contains("Unsupported CDI version"));
+            assert(e.getMessage().contains("cdi-version 3.0 not supported"));
         }
 
         process.kill();

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -39,7 +39,7 @@
 import io.supertokens.webserver.api.multitenancy.*;
 import io.supertokens.webserver.api.multitenancy.CreateOrUpdateAppAPI;
 import io.supertokens.webserver.api.multitenancy.CreateOrUpdateConnectionUriDomainAPI;
-import io.supertokens.webserver.api.multitenancy.CreateOrUpdateTenantAPI;
+import io.supertokens.webserver.api.multitenancy.CreateOrUpdateTenantOrGetTenantAPI;
 import io.supertokens.webserver.api.multitenancy.RemoveTenantAPI;
 import io.supertokens.webserver.api.multitenancy.thirdparty.CreateOrUpdateThirdPartyConfigAPI;
 import io.supertokens.webserver.api.multitenancy.thirdparty.RemoveThirdPartyConfigAPI;
@@ -240,7 +240,7 @@ private void setupRoutes() {
         addAPI(new RemoveAppAPI(main));
         addAPI(new ListAppsAPI(main));
 
-        addAPI(new CreateOrUpdateTenantAPI(main));
+        addAPI(new CreateOrUpdateTenantOrGetTenantAPI(main));
         addAPI(new RemoveTenantAPI(main));
         addAPI(new ListTenantsAPI(main));
 

File: src/test/java/io/supertokens/test/multitenant/ConfigTest.java
Patch:
@@ -1856,7 +1856,7 @@ public void testCoreSpecificConfigIsNotAllowedForNewTenants() throws Exception {
                 "log_level",
                 "firebase_password_hashing_pool_size",
                 "supertokens_saas_secret",
-                "supertokens_default_cdi_version"
+                "supertokens_max_cdi_version"
         };
 
         for (String disallowedConfig : disallowedConfigs) {
@@ -1983,7 +1983,7 @@ public void testAllConflictingConfigs() throws Exception {
                 "disable_telemetry",
                 "password_hashing_alg",
                 "firebase_password_hashing_signer_key",
-                "supertokens_default_cdi_version",
+                "supertokens_max_cdi_version",
         };
         Object[][] conflictingValues = new Object[][]{
                 new Object[]{3600, 3601}, // access_token_validity
@@ -1995,7 +1995,7 @@ public void testAllConflictingConfigs() throws Exception {
                 new Object[]{true, false}, // disable_telemetry
                 new Object[]{"BCRYPT", "ARGON2"}, // password_hashing_alg
                 new Object[]{"abcd1234abcd1234abcd1234abcd1234", "qwer1234qwer1234qwer1234qwer1234"}, // firebase_password_hashing_signer_key
-                new Object[]{"2.21", "3.0"} // supertokens_default_cdi_version
+                new Object[]{"2.21", "3.0"} // supertokens_max_cdi_version
         };
 
         for (int i=0; i<conflictingInSameUserPool.length; i++) {

File: src/main/java/io/supertokens/output/Logging.java
Patch:
@@ -189,6 +189,7 @@ public static void error(Main main, TenantIdentifier tenantIdentifier, String me
         try {
             String err = Utils.throwableStacktraceToString(e).trim();
             if (getInstance(main) != null) {
+                err = prependTenantIdentifierToMessage(tenantIdentifier, err);
                 getInstance(main).errorLogger.error(err);
             } else if (Main.isTesting) {
                 systemErr(err);

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -390,6 +390,8 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
 
         TenantIdentifier tenantIdentifier = null;
         try {
+            tenantIdentifier = getTenantIdentifierWithStorageFromRequest(req);
+
             if (!this.checkIPAccess(req, resp)) {
                 // IP access denied and the filter has already sent the response
                 return;
@@ -399,7 +401,6 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
                 assertThatAPIKeyCheckPasses(req);
             }
 
-            tenantIdentifier = getTenantIdentifierWithStorageFromRequest(req);
             SemVer version = getVersionFromRequest(req);
 
             // Check for CDI version for multitenancy
@@ -497,5 +498,4 @@ public APIKeyUnauthorisedException() {
             super();
         }
     }
-
 }

File: src/test/java/io/supertokens/test/SuperTokensSaaSSecretTest.java
Patch:
@@ -485,7 +485,7 @@ public void testThatTenantCannotSetProtectedConfigIfSuperTokensSaaSSecretIsSet()
         }
 
         JsonObject coreConfig = new JsonObject();
-        coreConfig.addProperty("postgresql_database_name", "st1");
+        StorageLayer.getBaseStorage(process.getProcess()).modifyConfigToAddANewUserPoolForTesting(coreConfig, 1);
 
         JsonObject requestBody = new JsonObject();
         requestBody.addProperty("appId", "a1");

File: src/test/java/io/supertokens/test/session/api/MultitenantAPITest.java
Patch:
@@ -369,9 +369,6 @@ public void testVerifySessionWorksFromAnyTenantInTheApp() throws Exception {
 
                 JsonObject sessionResponse = verifySession(tenant2,
                         session.get("accessToken").getAsJsonObject().get("token").getAsString());
-                if (sessionResponse.get("session").getAsJsonObject().has("tenantId")) {
-                    sessionResponse.get("session").getAsJsonObject().remove("tenantId");
-                }
                 assertEquals(session.get("session"), sessionResponse.get("session"));
             }
         }

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -446,7 +446,7 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
                             "AppId or tenantId not found => " + ((TenantOrAppNotFoundException) rootCause).getMessage(),
                             resp);
                 } else if (rootCause instanceof BadPermissionException) {
-                    sendTextResponse(403, e.getMessage(), resp);
+                    sendTextResponse(403, rootCause.getMessage(), resp);
                 } else {
                     sendTextResponse(500, "Internal Error", resp);
                 }

File: src/main/java/io/supertokens/webserver/PathRouter.java
Patch:
@@ -81,7 +81,9 @@ private WebserverAPI getAPIThatMatchesPath(HttpServletRequest req) {
             if (!apiPath.startsWith("/")) {
                 apiPath = "/" + apiPath;
             }
-            if (requestPath.matches("^(/appid-[a-z0-9-]*)?(/[a-z0-9-]+)?" + apiPath + "/?$")) {
+
+            String tenantIdStopWords = String.join("|", Utils.INVALID_WORDS_FOR_TENANTID);
+            if (requestPath.matches("^(/appid-[a-z0-9-]*)?(/(?!" + tenantIdStopWords + ")[a-z0-9-]+)?" + apiPath + "/?$")) {
                 return api;
             }
         }

File: src/main/java/io/supertokens/webserver/Utils.java
Patch:
@@ -24,7 +24,7 @@
 
 public class Utils {
 
-    private static final List<String> INVALID_WORDS_FOR_TENANTID = List.of("recipe", "config", "users");
+    public static final List<String> INVALID_WORDS_FOR_TENANTID = List.of("recipe", "config", "users", "hello");
 
     public static String normalizeAndValidateStringParam(String param, String paramName) throws ServletException {
         param = param.trim();

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -194,7 +194,7 @@ private void assertThatAPIKeyCheckPasses(HttpServletRequest req) throws ServletE
         }
     }
 
-    protected boolean shouldProtectDbConfig(HttpServletRequest req) throws TenantOrAppNotFoundException {
+    protected boolean shouldProtectProtectedConfig(HttpServletRequest req) throws TenantOrAppNotFoundException {
         String apiKey = req.getHeader("api-key");
         String superTokensSaaSSecret = Config.getConfig(
                 new TenantIdentifier(null, null, null), this.main)

File: src/main/java/io/supertokens/webserver/api/multitenancy/CreateOrUpdateTenantAPI.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
+import io.supertokens.config.CoreConfig;
 import io.supertokens.multitenancy.Multitenancy;
 import io.supertokens.pluginInterface.multitenancy.*;
 import io.supertokens.pluginInterface.multitenancy.exceptions.TenantOrAppNotFoundException;
@@ -77,7 +78,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             if (config == null) {
                 throw new TenantOrAppNotFoundException(tenantIdentifier);
             }
-            JsonObject result = config.toJson(shouldProtectDbConfig(req), tenantIdentifier.getStorage());
+            boolean shouldProtect = shouldProtectProtectedConfig(req);
+            JsonObject result = config.toJson(shouldProtect, tenantIdentifier.getStorage(), CoreConfig.PROTECTED_CONFIGS);
             result.addProperty("status", "OK");
 
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/CreateOrUpdateThirdPartyConfigAPI.java
Patch:
@@ -114,7 +114,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
                     tenantConfig.passwordlessConfig,
                     tenantConfig.coreConfig);
 
-            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectDbConfig(req), skipValidation);
+            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req), skipValidation);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/multitenancy/thirdparty/RemoveThirdPartyConfigAPI.java
Patch:
@@ -84,7 +84,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                     config.passwordlessConfig,
                     config.coreConfig);
 
-            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectDbConfig(req));
+            Multitenancy.addNewOrUpdateAppOrTenant(main, updatedConfig, shouldProtectProtectedConfig(req));
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/test/java/io/supertokens/test/httpRequest/HttpRequestForTesting.java
Patch:
@@ -129,7 +129,7 @@ public static <T> T sendGETRequest(Main main, String requestID, String url, Map<
     }
 
     @SuppressWarnings("unchecked")
-    private static <T> T sendJsonRequest(Main main, String requestID, String url, JsonElement requestBody,
+    public static <T> T sendJsonRequest(Main main, String requestID, String url, JsonElement requestBody,
             int connectionTimeoutMS, int readTimeoutMS, Integer version, String cdiVersion, String method,
             String apiKey, String rid) throws IOException, io.supertokens.test.httpRequest.HttpResponseException {
         URL obj = getURL(main, requestID, url);

File: src/test/java/io/supertokens/test/session/api/MultitenantAPITest.java
Patch:
@@ -369,6 +369,9 @@ public void testVerifySessionWorksFromAnyTenantInTheApp() throws Exception {
 
                 JsonObject sessionResponse = verifySession(tenant2,
                         session.get("accessToken").getAsJsonObject().get("token").getAsString());
+                if (sessionResponse.get("session").getAsJsonObject().has("tenantId")) {
+                    sessionResponse.get("session").getAsJsonObject().remove("tenantId");
+                }
                 assertEquals(session.get("session"), sessionResponse.get("session"));
             }
         }

File: src/test/java/io/supertokens/test/session/api/RefreshSessionAPITest2_21.java
Patch:
@@ -116,7 +116,7 @@ public void successOutputWithValidRefreshTokenTest() throws Exception {
 
         JsonObject sessionRefreshResponse = HttpRequestForTesting.sendJsonPOSTRequest(process.getProcess(), "",
                 "http://localhost:3567/recipe/session/refresh", sessionRefreshBody, 1000, 1000, null,
-                Utils.getCdiVersionStringLatestForTests(), "session");
+                SemVer.v2_21.get(), "session");
 
         checkRefreshSessionResponse(sessionRefreshResponse, process, userId, userDataInJWT, false);
         process.kill();

File: ee/src/main/java/io/supertokens/ee/EEFeatureFlag.java
Patch:
@@ -288,7 +288,7 @@ public JsonObject getPaidFeatureStats() throws StorageQueryException, TenantOrAp
 
         EE_FEATURES[] features = getEnabledEEFeaturesFromDbOrCache();
 
-        if (!Arrays.asList(features).contains(EE_FEATURES.MULTI_TENANCY)) { // Check for multitenancy on the base app
+        if (!this.appIdentifier.equals(new AppIdentifier(null, null)) && !Arrays.asList(features).contains(EE_FEATURES.MULTI_TENANCY)) { // Check for multitenancy on the base app
             EE_FEATURES[] baseFeatures = FeatureFlag.getInstance(main, new AppIdentifier(null, null))
                     .getEnabledFeatures();
             for (EE_FEATURES feature: baseFeatures) {

File: src/main/java/io/supertokens/cronjobs/telemetry/Telemetry.java
Patch:
@@ -94,7 +94,7 @@ protected void doTaskPerApp(AppIdentifier app) throws Exception {
             ActiveUsersStorage activeUsersStorage = (ActiveUsersStorage) StorageLayer.getStorage(app.getAsPublicTenantIdentifier(), main);
             json.addProperty("mau", activeUsersStorage.countUsersActiveSince(app, System.currentTimeMillis() - 30 * 24 * 3600 * 1000L));
         } else {
-            json.addProperty("mau", 0);
+            json.addProperty("mau", -1);
         }
         json.addProperty("appId", app.getAppId());
         json.addProperty("connectionUriDomain", app.getConnectionUriDomain());

File: src/test/java/io/supertokens/test/TelemetryTest.java
Patch:
@@ -153,6 +153,9 @@ protected URLConnection openConnection(URL u) {
         assertTrue(telemetryData.has("telemetryId"));
         assertEquals(telemetryData.get("superTokensVersion").getAsString(),
                 Version.getVersion(process.getProcess()).getCoreVersion());
+        assertEquals(telemetryData.get("appId").getAsString(), "public");
+        assertEquals(telemetryData.get("connectionUriDomain").getAsString(), "");
+        assertTrue(telemetryData.has("mau"));
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));

File: src/main/java/io/supertokens/webserver/InputParser.java
Patch:
@@ -196,7 +196,6 @@ public static Long parseLongOrThrowError(JsonObject element, String fieldName, b
         try {
             if (nullable && element.get(fieldName) == null) {
                 return null;
-
             }
             String stringified = element.toString();
             if (!stringified.contains("\"")) {

File: src/main/java/io/supertokens/webserver/api/session/SessionRegenerateAPI.java
Patch:
@@ -44,7 +44,6 @@
 import java.security.NoSuchAlgorithmException;
 import java.security.SignatureException;
 import java.security.spec.InvalidKeySpecException;
-import java.util.Arrays;
 
 public class SessionRegenerateAPI extends WebserverAPI {
 

File: src/test/java/io/supertokens/test/multitenant/api/TestMultitenancyAPIHelper.java
Patch:
@@ -213,7 +213,9 @@ public static JsonObject addOrUpdateThirdPartyProviderConfig(TenantIdentifier te
     public static JsonObject addOrUpdateThirdPartyProviderConfig(TenantIdentifier tenantIdentifier, ThirdPartyConfig.Provider provider, boolean skipValidation, Main main)
             throws HttpResponseException, IOException {
         Gson gson = new Gson();
-        JsonObject requestBody = gson.toJsonTree(provider).getAsJsonObject();
+        JsonObject requestBody = new JsonObject();
+        JsonObject tpConfig = gson.toJsonTree(provider).getAsJsonObject();
+        requestBody.add("config", tpConfig);
         requestBody.addProperty("skipValidation", skipValidation);
 
         JsonObject response = HttpRequestForTesting.sendJsonPUTRequest(main, "",

File: src/test/java/io/supertokens/test/session/api/SessionRemoveAPITest2_7.java
Patch:
@@ -244,7 +244,7 @@ public void testRemovingMultipleSessionsGivesCorrectOutput() throws Exception {
 
         // check that response should only contain s1 and s3 session handles
         assertTrue(revokedSessions.contains(s1Info.get("session").getAsJsonObject().get("handle")));
-        assertTrue(revokedSessions.contains(s2Info.get("session").getAsJsonObject().get("handle")));
+        assertTrue(revokedSessions.contains(s3Info.get("session").getAsJsonObject().get("handle")));
 
         assertEquals(revokedSessions.size(), 2);
 

File: src/test/java/io/supertokens/test/multitenant/LoadTest.java
Patch:
@@ -56,7 +56,7 @@ public void beforeEach() {
     }
 
     @Test
-    public void testCreating100StorageLayersUsage()
+    public void testCreating100TenantsAndCheckOnlyOneInstanceOfStorageLayerIsCreated()
             throws InterruptedException {
         String[] args = {"../"};
 

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -273,7 +273,7 @@ private String getAppId(HttpServletRequest req) {
 
     private String getConnectionUriDomain(HttpServletRequest req) throws ServletException {
         String connectionUriDomain = req.getServerName();
-        connectionUriDomain = Utils.normalizeAndValidateConnectionUriDomain(connectionUriDomain);
+        connectionUriDomain = Utils.normalizeAndValidateConnectionUriDomain(connectionUriDomain, false);
 
         try {
             if (Config.getConfig(new TenantIdentifier(connectionUriDomain, null, null), main) ==

File: src/test/java/io/supertokens/test/multitenant/api/TestPermissionChecks.java
Patch:
@@ -515,6 +515,9 @@ public void testConnectionUriDomainValidationUtil() throws Exception {
             } catch (Exception ignored) {
             }
         }
+
+        assertEquals("abccom", io.supertokens.webserver.Utils.normalizeAndValidateConnectionUriDomain("abccom", false));
+        assertEquals("local_host", io.supertokens.webserver.Utils.normalizeAndValidateConnectionUriDomain("local_host", false));
     }
 
     @Test

File: src/test/java/io/supertokens/test/CDIVersionTest.java
Patch:
@@ -236,12 +236,12 @@ public void testCDIVersionWorksPerApp() throws Exception {
                 .setKeyValue(FeatureFlagTestContent.ENABLED_FEATURES, new EE_FEATURES[]{EE_FEATURES.MULTI_TENANCY});
         process.startProcess();
 
+        assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
+
         if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
             return;
         }
 
-        assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
-
         Webserver.getInstance(process.getProcess()).addAPI(new WebserverAPI(process.getProcess(), "") {
 
             private static final long serialVersionUID = 1L;

File: src/main/java/io/supertokens/config/CoreConfig.java
Patch:
@@ -187,7 +187,7 @@ public class CoreConfig {
     @JsonProperty
     private String supertokens_saas_secret = null;
 
-    @ConfigYamlOnly
+    @NotConflictingInApp
     @JsonProperty
     private String supertokens_default_cdi_version = null;
 

File: src/test/java/io/supertokens/test/CronjobTest.java
Patch:
@@ -332,7 +332,6 @@ public void testThatCronjobThrowsQuitProgramExceptionAndQuits() throws Exception
         Cronjobs.addCronjob(process.getProcess(), QuitProgramExceptionCronjob.getInstance(process.getProcess()));
 
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
-
         process.kill();
     }
 

File: src/test/java/io/supertokens/test/TelemetryTest.java
Patch:
@@ -206,7 +206,7 @@ protected URLConnection openConnection(URL u) {
 
             telemetryId = telemetryData.get("telemetryId").getAsString();
 
-            process.kill();
+            process.kill(false);
             assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
         }
 

File: src/test/java/io/supertokens/test/session/RefreshTokenTest.java
Patch:
@@ -111,7 +111,7 @@ public void createRefreshTokenAndLoadAfterProcessRestart()
         TokenInfo tokenInfo = RefreshToken.createNewRefreshToken(process.getProcess(), "sessionHandle", "userId",
                 "parentRefreshTokenHash1", "antiCsrfToken");
 
-        process.kill();
+        process.kill(false);
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
 
         if (Version.getVersion(process.getProcess()).getPluginName().equals("sqlite")) {

File: src/test/java/io/supertokens/test/session/api/RefreshSessionAPITest2_7.java
Patch:
@@ -78,7 +78,7 @@ public void refreshWithAntiCsrfOffOn() throws Exception {
                 "session");
         assertEquals(sessionInfo.get("status").getAsString(), "OK");
 
-        process.kill();
+        process.kill(false);
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
 
         if (Version.getVersion(process.getProcess()).getPluginName().equals("sqlite")) {
@@ -133,7 +133,7 @@ public void refreshWithAntiCsrfOnOffOn() throws Exception {
                 "session");
         assertEquals(sessionInfo.get("status").getAsString(), "OK");
 
-        process.kill();
+        process.kill(false);
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
 
         if (Version.getVersion(process.getProcess()).getPluginName().equals("sqlite")) {
@@ -158,7 +158,7 @@ public void refreshWithAntiCsrfOnOffOn() throws Exception {
             checkRefreshSessionResponse(response, process, userId, userDataInJWT, false);
         }
 
-        process.kill();
+        process.kill(false);
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
 
         process = TestingProcessManager.start(args);

File: src/test/java/io/supertokens/test/httpRequest/HttpRequestForTesting.java
Patch:
@@ -300,6 +300,7 @@ public static String getMultitenantUrl(TenantIdentifier tenantIdentifier, String
         } else {
             sb.append("http://");
             sb.append(tenantIdentifier.getConnectionUriDomain());
+            sb.append(":3567");
         }
 
         if (!tenantIdentifier.getAppId().equals(TenantIdentifier.DEFAULT_APP_ID)) {

File: src/test/java/io/supertokens/test/multitenant/api/TestApp.java
Patch:
@@ -270,13 +270,13 @@ public void testAddingWithDifferentConnectionURIAddsToNullConnectionURI() throws
 
         TestMultitenancyAPIHelper.createApp(
                 process.getProcess(),
-                new TenantIdentifier("localhost:3567", null, null),
+                new TenantIdentifier("localhost", null, null),
                 "a1", true, true, true,
                 new JsonObject());
 
         TestMultitenancyAPIHelper.createApp(
                 process.getProcess(),
-                new TenantIdentifier("127.0.0.1:3567", null, null),
+                new TenantIdentifier("127.0.0.1", null, null),
                 "a2", true, true, true,
                 new JsonObject());
 

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -27,6 +27,7 @@
 import io.supertokens.cronjobs.deleteExpiredPasswordlessDevices.DeleteExpiredPasswordlessDevices;
 import io.supertokens.cronjobs.deleteExpiredSessions.DeleteExpiredSessions;
 import io.supertokens.cronjobs.deleteExpiredTotpTokens.DeleteExpiredTotpTokens;
+import io.supertokens.cronjobs.syncCoreConfigWithDb.SyncCoreConfigWithDb;
 import io.supertokens.cronjobs.telemetry.Telemetry;
 import io.supertokens.emailpassword.PasswordHashing;
 import io.supertokens.exceptions.QuitProgramException;
@@ -227,6 +228,8 @@ private void init() throws IOException, StorageQueryException {
         // starts removing old session cronjob
         List<List<TenantIdentifier>> uniqueUserPoolIdsTenants = StorageLayer.getTenantsWithUniqueUserPoolId(this);
 
+        Cronjobs.addCronjob(this, SyncCoreConfigWithDb.init(this));
+
         Cronjobs.addCronjob(this, DeleteExpiredSessions.init(this, uniqueUserPoolIdsTenants));
 
         // starts removing old password reset tokens

File: src/main/java/io/supertokens/config/Config.java
Patch:
@@ -50,15 +50,15 @@ private Config(Main main, String configFilePath) throws InvalidConfigException,
         this.main = main;
         final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
         CoreConfig config = mapper.readValue(new File(configFilePath), CoreConfig.class);
-        config.validate(main);
+        config.normalizeAndValidate(main);
         this.core = config;
     }
 
     private Config(Main main, JsonObject jsonConfig) throws IOException, InvalidConfigException {
         this.main = main;
         final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
         CoreConfig config = mapper.readValue(jsonConfig.toString(), CoreConfig.class);
-        config.validate(main);
+        config.normalizeAndValidate(main);
         this.core = config;
     }
 

File: src/main/java/io/supertokens/inmemorydb/queries/SessionQueries.java
Patch:
@@ -58,7 +58,7 @@ static String getQueryToCreateSessionInfoTable(Start start) {
                 + "use_static_key BOOLEAN NOT NULL,"
                 + "PRIMARY KEY (app_id, tenant_id, session_handle),"
                 + "FOREIGN KEY (app_id, tenant_id) REFERENCES " + Config.getConfig(start).getTenantsTable()
-                + " (app_id, tenant_id)"
+                + " (app_id, tenant_id) ON DELETE CASCADE"
                 + " );";
     }
 

File: src/main/java/io/supertokens/storageLayer/StorageLayer.java
Patch:
@@ -79,7 +79,7 @@ public static Storage getNewStorageInstance(Main main, JsonObject config, Tenant
                 result = new Start(main);
             }
         }
-        result.constructor(main.getProcessId(), Main.makeConsolePrintSilent);
+        result.constructor(main.getProcessId(), Main.makeConsolePrintSilent, Main.isTesting);
 
         Set<LOG_LEVEL> logLevels = null;
         if (doNotLog) {

File: src/test/java/io/supertokens/test/httpRequest/HttpRequestForTesting.java
Patch:
@@ -84,7 +84,7 @@ public static <T> T sendGETRequest(Main main, String requestID, String url, Map<
         try {
             con = (HttpURLConnection) obj.openConnection();
             con.setConnectTimeout(connectionTimeoutMS);
-            con.setReadTimeout(readTimeoutMS);
+            con.setReadTimeout(readTimeoutMS + 1000);
             if (version != null) {
                 con.setRequestProperty("api-version", version + "");
             }
@@ -139,7 +139,7 @@ private static <T> T sendJsonRequest(Main main, String requestID, String url, Js
             con = (HttpURLConnection) obj.openConnection();
             con.setRequestMethod(method);
             con.setConnectTimeout(connectionTimeoutMS);
-            con.setReadTimeout(readTimeoutMS);
+            con.setReadTimeout(readTimeoutMS + 1000);
             con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
             if (version != null) {
                 con.setRequestProperty("api-version", version + "");
@@ -249,7 +249,7 @@ public static <T> T sendJsonDELETERequestWithQueryParams(Main main, String reque
                     con = (HttpURLConnection) obj.openConnection();
                     con.setRequestMethod("DELETE");
                     con.setConnectTimeout(connectionTimeoutMS);
-                    con.setReadTimeout(readTimeoutMS);
+                    con.setReadTimeout(readTimeoutMS + 1000);
                     if (version != null) {
                         con.setRequestProperty("api-version", version + "");
                     }

File: src/test/java/io/supertokens/test/multitenant/StorageLayerTest.java
Patch:
@@ -1689,7 +1689,7 @@ public void testOverwriteTenantForRaceConditions()
                         ));
                         break;
                     } catch (Exception e) {
-                        if (e.getMessage().toLowerCase().contains("request timed out") || e.getMessage().contains("concurrent delete")) {
+                        if (e.getMessage().toLowerCase().contains("request timed out") || e.getMessage().contains("concurrent delete") || e.getMessage().contains("concurrent update")) {
                             // retry, because connection was timed out, or
                             // in case of postgres, number of retries may not be enough, we retry here anyway
                             continue;

File: src/test/java/io/supertokens/test/multitenant/api/TestTenantIdIsNotPresentForOlderCDI.java
Patch:
@@ -341,7 +341,7 @@ public static JsonObject listUsers(TenantIdentifier sourceTenant, String paginat
         }
         JsonObject response = HttpRequestForTesting.sendGETRequest(main, "",
                 HttpRequestForTesting.getMultitenantUrl(sourceTenant, "/users"),
-                params, 1000000, 1000000, null,
+                params, 1000, 1000, null,
                 SemVer.v2_21.get(), null);
 
         assertEquals("OK", response.getAsJsonPrimitive("status").getAsString());

File: src/main/java/io/supertokens/webserver/api/core/UsersAPI.java
Patch:
@@ -187,7 +187,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
 
             if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
                 for (JsonElement user : usersJson) {
-                    user.getAsJsonObject().remove("tenantIds");
+                    user.getAsJsonObject().get("user").getAsJsonObject().remove("tenantIds");
                 }
             }
 

File: src/test/java/io/supertokens/test/emailpassword/api/EmailPasswordGetUserAPITest2_7.java
Patch:
@@ -124,7 +124,7 @@ public void testGoodInput() throws Exception {
             assertEquals(signUpUser.get("email").getAsString(), userInfo.get("email").getAsString());
             assertEquals(signUpUser.get("id").getAsString(), userInfo.get("id").getAsString());
             signUpUser.get("timeJoined").getAsLong();
-            assertEquals(signUpUser.entrySet().size(), 4);
+            assertEquals(signUpUser.entrySet().size(), 3);
         }
 
         {
@@ -149,7 +149,7 @@ public void testGoodInput() throws Exception {
             assertEquals(signUpUser.get("email").getAsString(), userInfo.get("email").getAsString());
             assertEquals(signUpUser.get("id").getAsString(), userInfo.get("id").getAsString());
             signUpUser.get("timeJoined").getAsLong();
-            assertEquals(signUpUser.entrySet().size(), 4);
+            assertEquals(signUpUser.entrySet().size(), 3);
         }
 
         process.kill();

File: src/test/java/io/supertokens/test/emailpassword/api/SignInAPITest2_7.java
Patch:
@@ -156,7 +156,7 @@ public void testGoodInput() throws Exception {
         assertEquals(signInResponse.get("user").getAsJsonObject().get("email").getAsString(),
                 userInfo.get("email").getAsString());
         signInResponse.get("user").getAsJsonObject().get("timeJoined").getAsLong();
-        assertEquals(signInResponse.get("user").getAsJsonObject().entrySet().size(), 4);
+        assertEquals(signInResponse.get("user").getAsJsonObject().entrySet().size(), 3);
 
         int activeUsers = ActiveUsers.countUsersActiveSince(process.getProcess(), beforeSignIn);
         assert (activeUsers == 1);
@@ -199,7 +199,7 @@ public void testThatUnnormalisedEmailShouldAlsoWork() throws Exception {
         assertEquals(signInResponse.get("user").getAsJsonObject().get("email").getAsString(),
                 userInfo.get("email").getAsString());
         signInResponse.get("user").getAsJsonObject().get("timeJoined").getAsLong();
-        assertEquals(signInResponse.get("user").getAsJsonObject().entrySet().size(), 4);
+        assertEquals(signInResponse.get("user").getAsJsonObject().entrySet().size(), 3);
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));

File: src/test/java/io/supertokens/test/emailpassword/api/SignUpAPITest2_7.java
Patch:
@@ -168,7 +168,7 @@ public void testGoodInput() throws Exception {
         assertEquals(signInResponse.get("user").getAsJsonObject().get("email").getAsString(),
                 signUpUser.get("email").getAsString());
         signInResponse.get("user").getAsJsonObject().get("timeJoined").getAsLong();
-        assertEquals(signInResponse.get("user").getAsJsonObject().entrySet().size(), 4);
+        assertEquals(signInResponse.get("user").getAsJsonObject().entrySet().size(), 3);
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));

File: src/test/java/io/supertokens/test/passwordless/api/PasswordlessConsumeCodeAPITest2_11.java
Patch:
@@ -484,6 +484,6 @@ private void checkResponse(JsonObject response, Boolean isNewUser, String email,
         } else if (phoneNumber != null) {
             assertEquals(phoneNumber, userJson.get("phoneNumber").getAsString());
         }
-        assertEquals(4, userJson.entrySet().size());
+        assertEquals(3, userJson.entrySet().size());
     }
 }

File: src/test/java/io/supertokens/test/passwordless/api/PasswordlessUserGetAPITest2_11.java
Patch:
@@ -231,6 +231,6 @@ private static void checkUser(JsonObject resp, String userId, String email, Stri
 
         assert (user.has("timeJoined"));
         assert (System.currentTimeMillis() - 10000 < user.get("timeJoined").getAsLong());
-        assertEquals(4, user.entrySet().size());
+        assertEquals(3, user.entrySet().size());
     }
 }

File: src/main/java/io/supertokens/dashboard/Dashboard.java
Patch:
@@ -44,7 +44,7 @@
 import jakarta.annotation.Nullable;
 
 public class Dashboard {
-    public static final int MAX_NUMBER_OF_FREE_DASHBOARD_USERS = 1;
+    public static final int MAX_NUMBER_OF_FREE_DASHBOARD_USERS = 3;
     public static final long DASHBOARD_SESSION_DURATION = 2592000000L; // 30 days in milliseconds
 
     public static DashboardUser signUpDashboardUser(Main main, String email, String password)

File: src/test/java/io/supertokens/test/dashboard/apis/CreateDashboardUserAPITests.java
Patch:
@@ -375,7 +375,7 @@ public void testCreatingAUserAfterCrossingTheFreeUserThreshold() throws Exceptio
             }
         }
 
-        // try creating another user when max number of free users is set to 1
+        // try creating another user when max number of free users is reached 
         {
             String email = "newUser@example.com";
             String password = "testPass123";

File: src/main/java/io/supertokens/session/accessToken/AccessToken.java
Patch:
@@ -223,7 +223,7 @@ public static VERSION getAccessTokenVersion(AccessTokenInfo accessToken) {
     }
 
     public static class AccessTokenInfo {
-        static String[] protectedPropNames = {
+        public static String[] protectedPropNames = {
                 "sub",
                 "exp",
                 "iat",

File: src/test/java/io/supertokens/test/session/SessionGetSessionDataTest.java
Patch:
@@ -92,8 +92,7 @@ public void updateSessionInfo() throws Exception {
     // * Try getting and updating session information for a non-existent session handle -> Verify that both throw
     // * UnauthorisedException for session not existing
     @Test
-    public void gettingAndUpdatingSessionDataForNonExistentSession()
-            throws InterruptedException, StorageQueryException {
+    public void gettingAndUpdatingSessionDataForNonExistentSession() throws Exception {
 
         String[] args = { "../" };
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);

File: src/test/java/io/supertokens/test/session/SessionTest4.java
Patch:
@@ -120,8 +120,7 @@ public void checkForNumberOfDeletedSessions() throws Exception {
     }
 
     @Test
-    public void gettingAndUpdatingSessionDataForNonExistantSession()
-            throws InterruptedException, StorageQueryException {
+    public void gettingAndUpdatingSessionDataForNonExistantSession() throws Exception {
 
         String[] args = { "../" };
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);

File: src/test/java/io/supertokens/test/session/api/HandshakeAPITest2_21.java
Patch:
@@ -28,7 +28,7 @@
 
 import static org.junit.Assert.*;
 
-public class HandshakeAPITest2_19 {
+public class HandshakeAPITest2_21 {
     @Rule
     public TestRule watchman = Utils.getOnFailure();
 

File: src/test/java/io/supertokens/test/session/api/RefreshSessionAPITest2_21.java
Patch:
@@ -22,7 +22,6 @@
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
-import io.supertokens.test.httpRequest.HttpResponseException;
 import io.supertokens.utils.SemVer;
 import org.junit.*;
 import org.junit.rules.TestRule;
@@ -32,7 +31,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.fail;
 
-public class RefreshSessionAPITest2_19 {
+public class RefreshSessionAPITest2_21 {
     @Rule
     public TestRule watchman = Utils.getOnFailure();
 

File: ee/src/test/java/io/supertokens/ee/test/api/DeleteLicenseKeyAPITest.java
Patch:
@@ -51,7 +51,7 @@ public void testDeletingLicenseKeyWhenItIsNotSet() throws Exception {
 
         JsonObject response = HttpRequestForTesting.sendJsonDELETERequest(process.getProcess(), "",
                 "http://localhost:3567/ee/license",
-                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion().get(), "");
         assertEquals(1, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
 
@@ -83,7 +83,7 @@ public void testDeletingLicenseKey() throws Exception {
 
         JsonObject response = HttpRequestForTesting.sendJsonDELETERequest(process.getProcess(), "",
                 "http://localhost:3567/ee/license",
-                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion().get(), "");
         assertEquals(1, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
 

File: ee/src/test/java/io/supertokens/ee/test/api/GetFeatureFlagAPITest.java
Patch:
@@ -45,7 +45,7 @@ public void testRetrievingFeatureFlagInfoWhenNoLicenseKeyIsSet() throws Exceptio
 
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/ee/featureflag",
-                null, 1000, 1000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 1000, 1000, null, WebserverAPI.getLatestCDIVersion().get(), "");
         assertEquals(3, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
         assertEquals(0, response.get("features").getAsJsonArray().size());
@@ -77,7 +77,7 @@ public void testRetrievingFeatureFlagInfoWhenLicenseKeyIsSet() throws Exception
 
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/ee/featureflag",
-                null, 1000, 1000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 1000, 1000, null, WebserverAPI.getLatestCDIVersion().get(), "");
         assertEquals(3, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
         assertEquals(1, response.get("features").getAsJsonArray().size());

File: ee/src/test/java/io/supertokens/ee/test/api/GetLicenseKeyAPITest.java
Patch:
@@ -42,7 +42,7 @@ public void testRetrievingLicenseKeyWhenItIsNotSet() throws Exception {
 
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/ee/license",
-                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion().get(), "");
         Assert.assertEquals(1, response.entrySet().size());
         Assert.assertEquals("NO_LICENSE_KEY_FOUND_ERROR", response.get("status").getAsString());
 
@@ -64,7 +64,7 @@ public void testRetrievingLicenseKeyWhenItIsSet() throws Exception {
         // retrieve license key
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/ee/license",
-                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion().get(), "");
 
         assertEquals(2, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
@@ -93,7 +93,7 @@ public void testRetrievingLicenseKeyWhenEEFolderDoesNotExist() throws Exception
         // retrieve license key
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/ee/license",
-                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion(), "");
+                null, 10000, 10000, null, WebserverAPI.getLatestCDIVersion().get(), "");
 
         Assert.assertEquals(1, response.entrySet().size());
         Assert.assertEquals("NO_LICENSE_KEY_FOUND_ERROR", response.get("status").getAsString());

File: src/main/java/io/supertokens/ProcessState.java
Patch:
@@ -60,8 +60,7 @@ public synchronized void clear() {
     /**
      * INIT: Initialization started INIT_FAILURE: Initialization failed
      * STARTED: Initialized successfully SHUTTING_DOWN: Shut down signal received STOPPED
-     * RETRYING_ACCESS_TOKEN_JWT_VERIFICATION: When access
-     * token verification fails due to change in signing key, so we retry it
+     * RETRYING_ACCESS_TOKEN_JWT_VERIFICATION: When access token verification fails due to change in signing key, so we retry it
      * CRON_TASK_ERROR_LOGGING: When an exception is thrown from a Cronjob
      * DEVICE_DRIVER_INFO_LOGGED:When program is saving deviceDriverInfo into ping
      * SERVER_PING: When program is pinging the server with information
@@ -81,7 +80,7 @@ public synchronized void clear() {
     public enum PROCESS_STATE {
         INIT, INIT_FAILURE, STARTED, SHUTTING_DOWN, STOPPED, RETRYING_ACCESS_TOKEN_JWT_VERIFICATION,
         CRON_TASK_ERROR_LOGGING, WAITING_TO_INIT_STORAGE_MODULE, GET_SESSION_NEW_TOKENS, DEADLOCK_FOUND,
-        CREATING_NEW_TABLE, SENDING_TELEMETRY, SENT_TELEMETRY, SETTING_ACCESS_TOKEN_SIGNING_KEY_TO_NULL,
+        CREATING_NEW_TABLE, SENDING_TELEMETRY, SENT_TELEMETRY, UPDATING_ACCESS_TOKEN_SIGNING_KEYS,
         PASSWORD_HASH_BCRYPT, PASSWORD_HASH_ARGON, PASSWORD_VERIFY_BCRYPT, PASSWORD_VERIFY_ARGON,
         PASSWORD_VERIFY_FIREBASE_SCRYPT, ADDING_REMOTE_ADDRESS_FILTER, LICENSE_KEY_CHECK_NETWORK_CALL,
         INVALID_LICENSE_KEY, SERVER_ERROR_DURING_LICENSE_KEY_CHECK_FAIL

File: src/main/java/io/supertokens/cronjobs/deleteExpiredAccessTokenSigningKeys/DeleteExpiredAccessTokenSigningKeys.java
Patch:
@@ -22,7 +22,7 @@
 import io.supertokens.config.CoreConfig;
 import io.supertokens.cronjobs.CronTask;
 import io.supertokens.cronjobs.CronTaskTest;
-import io.supertokens.session.accessToken.AccessTokenSigningKey;
+import io.supertokens.signingkeys.AccessTokenSigningKey;
 
 public class DeleteExpiredAccessTokenSigningKeys extends CronTask {
 
@@ -58,7 +58,7 @@ public int getIntervalTimeSeconds() {
 
         // This can get out of sync with the keys expiring, but this shouldn't be an issue. We never use the expired
         // keys anyway.
-        return Math.max((int) (config.getAccessTokenSigningKeyUpdateInterval() / 1000), 1);
+        return Math.max((int) (config.getAccessTokenDynamicSigningKeyUpdateInterval() / 1000), 1);
     }
 
     @Override

File: src/main/java/io/supertokens/inmemorydb/queries/GeneralQueries.java
Patch:
@@ -330,8 +330,8 @@ public static long getUsersCount(Start start, RECIPE_ID[] includeRecipeIds)
     }
 
     public static AuthRecipeUserInfo[] getUsers(Start start, @NotNull Integer limit, @NotNull String timeJoinedOrder,
-            @Nullable RECIPE_ID[] includeRecipeIds, @Nullable String userId,
-            @Nullable Long timeJoined,
+                                                @Nullable RECIPE_ID[] includeRecipeIds, @Nullable String userId,
+                                                @Nullable Long timeJoined,
             @Nullable DashboardSearchTags dashboardSearchTags)
             throws SQLException, StorageQueryException {
 
@@ -596,7 +596,7 @@ public static boolean doesUserIdExist(Start start, String userId) throws SQLExce
     }
 
     private static List<? extends AuthRecipeUserInfo> getUserInfoForRecipeIdFromUserIds(Start start, RECIPE_ID recipeId,
-            List<String> userIds)
+                                                                                        List<String> userIds)
             throws StorageQueryException, SQLException {
         if (recipeId == RECIPE_ID.EMAIL_PASSWORD) {
             return EmailPasswordQueries.getUsersInfoUsingIdList(start, userIds);

File: src/main/java/io/supertokens/inmemorydb/queries/JWTSigningQueries.java
Patch:
@@ -86,7 +86,7 @@ public JWTSigningKeyInfo map(ResultSet result) throws Exception {
             long createdAt = result.getLong("created_at");
             String algorithm = result.getString("algorithm");
 
-            if (keyString.contains("|")) {
+            if (keyString.contains("|") || keyString.contains(";")) {
                 return new JWTAsymmetricSigningKeyInfo(keyId, createdAt, algorithm, keyString);
             } else {
                 return new JWTSymmetricSigningKeyInfo(keyId, createdAt, algorithm, keyString);

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -210,6 +210,7 @@ private void addRemoteAddressFilter(StandardContext context, Main main) {
     private void setupRoutes() throws Exception {
         addAPI(new NotFoundOrHelloAPI(main));
         addAPI(new HelloAPI(main));
+        addAPI(new JWKSPublicAPI(main));
         addAPI(new SessionAPI(main));
         addAPI(new VerifySessionAPI(main));
         addAPI(new RefreshSessionAPI(main));

File: src/main/java/io/supertokens/webserver/api/core/ApiVersionAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import io.supertokens.Main;
+import io.supertokens.utils.SemVer;
 import io.supertokens.webserver.WebserverAPI;
 
 import jakarta.servlet.http.HttpServletRequest;
@@ -47,8 +48,8 @@ protected boolean versionNeeded(HttpServletRequest req) {
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
         JsonObject result = new JsonObject();
         JsonArray versions = new JsonArray();
-        for (String s : WebserverAPI.supportedVersions) {
-            versions.add(new JsonPrimitive(s));
+        for (SemVer s : WebserverAPI.supportedVersions) {
+            versions.add(new JsonPrimitive(s.get()));
         }
         result.add("versions", versions);
         super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignUpAPI.java
Patch:
@@ -74,9 +74,6 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");
             JsonObject userJson = new JsonParser().parse(new Gson().toJson(user)).getAsJsonObject();
-            if (super.getVersionFromRequest(req).equals("2.4")) {
-                userJson.remove("timeJoined");
-            }
             result.add("user", userJson);
             super.sendJsonResponse(200, result, resp);
 

File: src/main/java/io/supertokens/webserver/api/emailpassword/UserAPI.java
Patch:
@@ -103,9 +103,6 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 JsonObject result = new JsonObject();
                 result.addProperty("status", "OK");
                 JsonObject userJson = new JsonParser().parse(new Gson().toJson(user)).getAsJsonObject();
-                if (super.getVersionFromRequest(req).equals("2.4")) {
-                    userJson.remove("timeJoined");
-                }
                 result.add("user", userJson);
                 super.sendJsonResponse(200, result, resp);
             }

File: src/main/java/io/supertokens/webserver/api/jwt/JWKSAPI.java
Patch:
@@ -25,6 +25,7 @@
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
+import io.supertokens.signingkeys.SigningKeys;
 import io.supertokens.webserver.WebserverAPI;
 
 import jakarta.servlet.ServletException;
@@ -35,6 +36,7 @@
 import java.security.spec.InvalidKeySpecException;
 import java.util.List;
 
+@Deprecated
 public class JWKSAPI extends WebserverAPI {
     private static final long serialVersionUID = -3475605151671191143L;
 
@@ -50,7 +52,7 @@ public String getPath() {
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
-            List<JsonObject> jwks = JWTSigningFunctions.getJWKS(main);
+            List<JsonObject> jwks = SigningKeys.getInstance(main).getJWKS();
             JsonObject reply = new JsonObject();
             JsonArray jwksJsonArray = new JsonParser().parse(new Gson().toJson(jwks)).getAsJsonArray();
             reply.add("keys", jwksJsonArray);

File: src/main/java/io/supertokens/webserver/api/session/JWTDataAPI.java
Patch:
@@ -56,7 +56,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         assert userDataInJWT != null;
 
         try {
-            Session.updateSession(main, sessionHandle, null, userDataInJWT, null);
+            Session.updateSession(main, sessionHandle, null, userDataInJWT);
 
             JsonObject result = new JsonObject();
 

File: src/main/java/io/supertokens/webserver/api/session/SessionDataAPI.java
Patch:
@@ -78,7 +78,7 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         assert userDataInDatabase != null;
 
         try {
-            Session.updateSession(main, sessionHandle, userDataInDatabase, null, null);
+            Session.updateSession(main, sessionHandle, userDataInDatabase, null);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/webserver/api/thirdparty/SignInUpAPI.java
Patch:
@@ -27,6 +27,7 @@
 import io.supertokens.thirdparty.ThirdParty;
 import io.supertokens.useridmapping.UserIdMapping;
 import io.supertokens.useridmapping.UserIdType;
+import io.supertokens.utils.SemVer;
 import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
@@ -51,7 +52,7 @@ public String getPath() {
 
     @Override
     protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
-        if (super.getVersionFromRequest(req).equals("2.7")) {
+        if (super.getVersionFromRequest(req).equals(SemVer.v2_7)) {
             JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
             String thirdPartyId = InputParser.parseStringOrThrowError(input, "thirdPartyId", false);
             String thirdPartyUserId = InputParser.parseStringOrThrowError(input, "thirdPartyUserId", false);

File: src/test/java/io/supertokens/test/ConfigTest2_6.java
Patch:
@@ -257,9 +257,8 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process,
                 CLIOptions.get(process.getProcess()).getInstallationPath() + "logs/info.log");
         assertEquals("Config error log path did not match default", config.getErrorLogPath(process.getProcess()),
                 CLIOptions.get(process.getProcess()).getInstallationPath() + "logs/error.log");
-        assertTrue("Config access signing key dynamic did not match default", config.getAccessTokenSigningKeyDynamic());
         assertEquals("Config access signing key interval did not match default",
-                config.getAccessTokenSigningKeyUpdateInterval(), 7 * 24 * 60 * 60 * 1000);
+                config.getAccessTokenDynamicSigningKeyUpdateInterval(), 7 * 24 * 60 * 60 * 1000);
 
         assertEquals(config.getHost(process.getProcess()), "localhost");
         assertEquals(config.getPort(process.getProcess()), 3567);

File: src/test/java/io/supertokens/test/InMemoryDBStorageTest.java
Patch:
@@ -275,7 +275,7 @@ public void transactionThrowRunTimeErrorAndExpectRollbackTest()
     @Test
     public void multipleParallelTransactionTest() throws InterruptedException, IOException {
         String[] args = { "../" };
-        Utils.setValueInConfig("access_token_signing_key_update_interval", "0.00005");
+        Utils.setValueInConfig("access_token_dynamic_signing_key_update_interval", "0.00005");
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false);
         process.getProcess().setForceInMemoryDB();
         process.startProcess();

File: src/test/java/io/supertokens/test/dashboard/apis/GetDashboardUsersAPITests.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -86,7 +87,7 @@ public void testRetrievingDashboardUsers() throws Exception {
 
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/recipe/dashboard/users", new HashMap<>(), 1000, 1000, null,
-                Utils.getCdiVersion2_18ForTests(), "dashboard");
+                SemVer.v2_18.get(), "dashboard");
         assertEquals(2, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
 
@@ -136,7 +137,7 @@ public void testRetrievingDashboardUsersOnlyReturnsUnsuspendedUsers() throws Exc
 
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                 "http://localhost:3567/recipe/dashboard/users", new HashMap<>(), 1000, 1000, null,
-                Utils.getCdiVersion2_18ForTests(), "dashboard");
+                SemVer.v2_18.get(), "dashboard");
         assertEquals(2, response.entrySet().size());
         assertEquals("OK", response.get("status").getAsString());
 

File: src/test/java/io/supertokens/test/dashboard/apis/VerifySessionAPITest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -74,15 +75,15 @@ public void testSessionBehavior() throws Exception {
         requestBody.addProperty("sessionId", sessionId);
         JsonObject verifyResponse1 = HttpRequestForTesting.sendJsonPOSTRequest(process.getProcess(), "",
                 "http://localhost:3567/recipe/dashboard/session/verify", requestBody, 1000, 1000, null,
-                Utils.getCdiVersion2_18ForTests(), "dashboard");
+                SemVer.v2_18.get(), "dashboard");
         assertEquals(1, verifyResponse1.entrySet().size());
         assertEquals("OK", verifyResponse1.get("status").getAsString());
 
         Dashboard.revokeSessionWithSessionId(process.getProcess(), sessionId);
 
         JsonObject verifyResponse2 = HttpRequestForTesting.sendJsonPOSTRequest(process.getProcess(), "",
                 "http://localhost:3567/recipe/dashboard/session/verify", requestBody, 1000, 1000, null,
-                Utils.getCdiVersion2_18ForTests(), "dashboard");
+                SemVer.v2_18.get(), "dashboard");
 
         assertEquals(1, verifyResponse2.entrySet().size());
         assertEquals("INVALID_SESSION_ERROR", verifyResponse2.get("status").getAsString());

File: src/test/java/io/supertokens/test/emailpassword/api/EmailPasswordUsersCountAPITest2_7.java
Patch:
@@ -23,6 +23,7 @@
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -60,7 +61,7 @@ public void testAPI() throws Exception {
         {
             JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                     "http://localhost:3567/recipe/users/count", null, 1000, 1000, null,
-                    Utils.getCdiVersion2_7ForTests(), "emailpassword");
+                    SemVer.v2_7.get(), "emailpassword");
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 0);
         }

File: src/test/java/io/supertokens/test/emailverification/api/RevokeTokenAPITest2_8.java
Patch:
@@ -27,6 +27,7 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -105,6 +106,6 @@ public void testRevokeTokenForValidParameters() throws Exception {
     private JsonObject makeRequest(Main main, JsonObject body) throws IOException, HttpResponseException {
         return HttpRequestForTesting.sendJsonPOSTRequest(main, "",
                 "http://localhost:3567/recipe/user/email/verify/token/remove", body, 1000, 1000, null,
-                Utils.getCdiVersion2_8ForTests(), RECIPE_ID.EMAIL_VERIFICATION.toString());
+                SemVer.v2_8.get(), RECIPE_ID.EMAIL_VERIFICATION.toString());
     }
 }

File: src/test/java/io/supertokens/test/emailverification/api/UnverifyEmailAPITest2_8.java
Patch:
@@ -26,6 +26,7 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
+import io.supertokens.utils.SemVer;
 import org.junit.*;
 import org.junit.rules.TestRule;
 
@@ -103,6 +104,6 @@ public void testSucceedUnverifyEmail() throws Exception {
     private JsonObject unverifyEmail(Main main, JsonObject body) throws IOException, HttpResponseException {
         return HttpRequestForTesting.sendJsonPOSTRequest(main, "",
                 "http://localhost:3567/recipe/user/email/verify/remove", body, 1000, 1000, null,
-                Utils.getCdiVersion2_8ForTests(), RECIPE_ID.EMAIL_VERIFICATION.toString());
+                SemVer.v2_8.get(), RECIPE_ID.EMAIL_VERIFICATION.toString());
     }
 }

File: src/test/java/io/supertokens/test/session/SessionGetSessionDataTest.java
Patch:
@@ -66,7 +66,7 @@ public void updateSessionInfo() throws Exception {
         userDataInDatabase.addProperty("key", "value");
 
         SessionInformationHolder sessionInfo = Session.createNewSession(process.getProcess(), userId, userDataInJWT,
-                userDataInDatabase, false);
+                userDataInDatabase);
 
         JsonObject sessionDataBeforeUpdate = Session.getSession(process.getProcess(),
                 sessionInfo.session.handle).userDataInDatabase;
@@ -78,7 +78,7 @@ public void updateSessionInfo() throws Exception {
         JsonArray arr = new JsonArray();
         userDataInDatabase2.add("key3", arr);
 
-        Session.updateSession(process.getProcess(), sessionInfo.session.handle, userDataInDatabase2, null, null);
+        Session.updateSession(process.getProcess(), sessionInfo.session.handle, userDataInDatabase2, null);
 
         JsonObject sessionDataAfterUpdate = Session.getSession(process.getProcess(),
                 sessionInfo.session.handle).userDataInDatabase;
@@ -107,7 +107,7 @@ public void gettingAndUpdatingSessionDataForNonExistentSession()
         }
 
         try {
-            Session.updateSession(process.getProcess(), "random", new JsonObject(), null, null);
+            Session.updateSession(process.getProcess(), "random", new JsonObject(), null);
             fail();
         } catch (UnauthorisedException e) {
             assertEquals(e.getMessage(), "Session does not exist.");

File: src/test/java/io/supertokens/test/session/SessionGetUserIDTest.java
Patch:
@@ -74,7 +74,7 @@ public void testUserIdReturnedFromGetSessionIsCorrect() throws Exception {
         userDataInDatabase.addProperty("key", "value");
 
         SessionInformationHolder sessionInfo = Session.createNewSession(process.getProcess(), userId, userDataInJWT,
-                userDataInDatabase, false);
+                userDataInDatabase);
 
         // verify to see payload is proper
         assertEquals(sessionInfo.session.userDataInJWT, userDataInJWT);

File: src/test/java/io/supertokens/test/thirdparty/api/ThirdPartyGetUsersByEmailAPITest2_7.java
Patch:
@@ -24,6 +24,7 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.thirdparty.ThirdParty;
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -65,7 +66,7 @@ public void testBadInput() throws Exception {
             try {
                 HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                         "http://localhost:3567/recipe/users/by-email",
-                        QueryParams, 1000, 1000, null, Utils.getCdiVersion2_7ForTests(), "thirdparty");
+                        QueryParams, 1000, 1000, null, SemVer.v2_7.get(), "thirdparty");
                 throw new Exception("Should not come here");
             } catch (io.supertokens.test.httpRequest.HttpResponseException e) {
                 assertTrue(e.statusCode == 400
@@ -111,7 +112,7 @@ public void testGoodInput() throws Exception {
             queryParams.put("email", "test@examplE.com");
             JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                     "http://localhost:3567/recipe/users/by-email", queryParams, 1000, 1000, null,
-                    Utils.getCdiVersion2_7ForTests(), "thirdparty");
+                    SemVer.v2_7.get(), "thirdparty");
 
             assertEquals("OK", response.get("status").getAsString());
             assertEquals(5, response.getAsJsonArray("users").size());

File: src/test/java/io/supertokens/test/thirdparty/api/ThirdPartyUsersCountAPITest2_7.java
Patch:
@@ -24,6 +24,7 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.thirdparty.ThirdParty;
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -69,7 +70,7 @@ public void testAPI() throws Exception {
         {
             JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                     "http://localhost:3567/recipe/users/count", null, 1000, 1000, null,
-                    Utils.getCdiVersion2_7ForTests(), "thirdparty");
+                    SemVer.v2_7.get(), "thirdparty");
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 0);
         }
@@ -83,7 +84,7 @@ public void testAPI() throws Exception {
         {
             JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
                     "http://localhost:3567/recipe/users/count", null, 1000, 1000, null,
-                    Utils.getCdiVersion2_7ForTests(), "thirdparty");
+                    SemVer.v2_7.get(), "thirdparty");
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 5);
         }

File: src/test/java/io/supertokens/test/totp/TotpLicenseTest.java
Patch:
@@ -118,7 +118,7 @@ public void testTotpWithoutLicense() throws Exception {
                             1000,
                             1000,
                             null,
-                            Utils.getCdiVersionLatestForTests(),
+                            Utils.getCdiVersionStringLatestForTests(),
                             "totp");
                 }
         );
@@ -144,7 +144,7 @@ public void testTotpWithoutLicense() throws Exception {
                             1000,
                             1000,
                             null,
-                            Utils.getCdiVersionLatestForTests(),
+                            Utils.getCdiVersionStringLatestForTests(),
                             "totp");
                 }
         );

File: src/test/java/io/supertokens/test/totp/api/CreateTotpDeviceAPITest.java
Patch:
@@ -46,7 +46,7 @@ private Exception createDeviceRequest(TestingProcessManager.TestingProcess proce
                         1000,
                         1000,
                         null,
-                        Utils.getCdiVersionLatestForTests(),
+                        Utils.getCdiVersionStringLatestForTests(),
                         "totp"));
     }
 
@@ -133,7 +133,7 @@ public void testApi() throws Exception {
                     1000,
                     1000,
                     null,
-                    Utils.getCdiVersionLatestForTests(),
+                    Utils.getCdiVersionStringLatestForTests(),
                     "totp");
             assert res.get("status").getAsString().equals("OK");
 
@@ -146,7 +146,7 @@ public void testApi() throws Exception {
                     1000,
                     1000,
                     null,
-                    Utils.getCdiVersionLatestForTests(),
+                    Utils.getCdiVersionStringLatestForTests(),
                     "totp");
             assert res2.get("status").getAsString().equals("DEVICE_ALREADY_EXISTS_ERROR");
         }

File: src/test/java/io/supertokens/test/userRoles/api/GetRolesAPITest.java
Patch:
@@ -24,6 +24,7 @@
 import io.supertokens.test.Utils;
 import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.userroles.UserRoles;
+import io.supertokens.utils.SemVer;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -67,7 +68,7 @@ public void testGettingRoles() throws Exception {
         // retrieve all created roles
 
         JsonObject response = HttpRequestForTesting.sendGETRequest(process.getProcess(), "",
-                "http://localhost:3567/recipe/roles", null, 1000, 1000, null, Utils.getCdiVersion2_14ForTests(),
+                "http://localhost:3567/recipe/roles", null, 1000, 1000, null, SemVer.v2_14.get(),
                 "userroles");
 
         assertEquals(2, response.entrySet().size());

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -56,7 +56,7 @@ public abstract class WebserverAPI extends HttpServlet {
     }
 
     public static String getLatestCDIVersion() {
-        return "2.19";
+        return "2.20";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -274,6 +274,7 @@ private void setupRoutes() throws Exception {
         addAPI(new RevokeSessionAPI(main));
         addAPI(new GetDashboardUsersAPI(main));
         addAPI(new GetDashboardSessionsForUserAPI(main));
+        addAPI(new SearchTagsAPI(main));
         // deprecated APIs:
         addAPI(new RecipeRouter(main, new io.supertokens.webserver.api.emailpassword.UsersAPI(main),
                 new io.supertokens.webserver.api.thirdparty.UsersAPI(main)));

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -52,6 +52,7 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.17");
         supportedVersions.add("2.18");
         supportedVersions.add("2.19");
+        supportedVersions.add("2.20");
     }
 
     public static String getLatestCDIVersion() {

File: src/test/java/io/supertokens/test/ActiveUsersTest.java
Patch:
@@ -55,6 +55,8 @@ public void updateAndCountUserLastActiveTest() throws Exception {
 
         assert ActiveUsers.countUsersActiveSince(main, now) == 2;
 
+        Thread.sleep(100);
+
         long now2 = System.currentTimeMillis();
 
         ActiveUsers.updateLastActive(main, "user1");

File: src/test/java/io/supertokens/test/StorageLayerTest.java
Patch:
@@ -62,8 +62,9 @@ public static void insertUsedCodeUtil(TOTPSQLStorage storage, TOTPUsedCode usedC
     public void totpCodeLengthTest() throws Exception {
         String[] args = {"../"};
 
-        TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);
-        process.getProcess().setForceInMemoryDB(); // this test is only for SQLite
+        TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false);
+        process.getProcess().setForceInMemoryDB(); // this test is for SQLite. We have different versions for PSQL and MySQL
+        process.startProcess();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
         if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {

File: src/main/java/io/supertokens/featureflag/EE_FEATURES.java
Patch:
@@ -17,7 +17,8 @@
 package io.supertokens.featureflag;
 
 public enum EE_FEATURES {
-    ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"), DASHBOARD_LOGIN("dashboard_login");
+    ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"), DASHBOARD_LOGIN("dashboard_login"),
+    TOTP("totp");
 
     private final String name;
 

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -51,10 +51,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.16");
         supportedVersions.add("2.17");
         supportedVersions.add("2.18");
+        supportedVersions.add("2.19");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.18";
+        return "2.19";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/webserver/api/core/DeleteUserAPI.java
Patch:
@@ -28,6 +28,7 @@
 import io.supertokens.authRecipe.AuthRecipe;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -53,7 +54,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");
             super.sendJsonResponse(200, result, resp);
-        } catch (StorageQueryException e) {
+        } catch (StorageQueryException | StorageTransactionLogicException e) {
             throw new ServletException(e);
         }
     }

File: src/main/java/io/supertokens/webserver/api/emailpassword/UserAPI.java
Patch:
@@ -33,10 +33,10 @@
 import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 
 public class UserAPI extends WebserverAPI {
@@ -129,6 +129,8 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
             throw new ServletException(new BadRequestException("You have to provide either email or password."));
         }
 
+        email = Utils.normaliseEmail(email);
+
         try {
             // if a userIdMapping exists, pass the superTokensUserId to the updateUsersEmailOrPassword
             io.supertokens.pluginInterface.useridmapping.UserIdMapping userIdMapping = UserIdMapping

File: src/main/java/io/supertokens/webserver/api/emailverification/GenerateEmailVerificationTokenAPI.java
Patch:
@@ -26,10 +26,10 @@
 import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 import java.security.NoSuchAlgorithmException;
 import java.security.spec.InvalidKeySpecException;
@@ -54,6 +54,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         String email = InputParser.parseStringOrThrowError(input, "email", false);
         assert userId != null;
         assert email != null;
+        email = Utils.normaliseEmail(email);
 
         // used to be according to logic according to https://github.com/supertokens/supertokens-core/issues/139
         // but then changed slightly when extracting this into its own recipe

File: src/main/java/io/supertokens/webserver/api/emailverification/RevokeAllTokensForUserAPI.java
Patch:
@@ -21,12 +21,13 @@
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 
 public class RevokeAllTokensForUserAPI extends WebserverAPI {
@@ -46,6 +47,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
         String userId = InputParser.parseStringOrThrowError(input, "userId", false);
         String email = InputParser.parseStringOrThrowError(input, "email", false);
+        email = Utils.normaliseEmail(email);
 
         try {
             EmailVerification.revokeAllTokens(main, userId, email);

File: src/main/java/io/supertokens/webserver/api/emailverification/UnverifyEmailAPI.java
Patch:
@@ -21,12 +21,13 @@
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 
 public class UnverifyEmailAPI extends WebserverAPI {
@@ -46,6 +47,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
         String userId = InputParser.parseStringOrThrowError(input, "userId", false);
         String email = InputParser.parseStringOrThrowError(input, "email", false);
+        email = Utils.normaliseEmail(email);
 
         try {
             EmailVerification.unverifyEmail(main, userId, email);

File: src/main/java/io/supertokens/webserver/api/passwordless/DeleteCodesAPI.java
Patch:
@@ -22,9 +22,9 @@
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
@@ -61,6 +61,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         }
         try {
             if (email != null) {
+                email = Utils.normaliseEmail(email);
                 Passwordless.removeCodesByEmail(main, email);
             } else {
                 Passwordless.removeCodesByPhoneNumber(main, phoneNumber);

File: src/main/java/io/supertokens/webserver/api/passwordless/GetCodesAPI.java
Patch:
@@ -30,7 +30,6 @@
 import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
@@ -82,7 +81,8 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 devicesInfos = deviceWithCodes == null ? Collections.emptyList()
                         : Collections.singletonList(deviceWithCodes);
             } else if (email != null) {
-                devicesInfos = Passwordless.getDevicesWithCodesByEmail(main, Utils.normaliseEmail(email));
+                email = Utils.normaliseEmail(email);
+                devicesInfos = Passwordless.getDevicesWithCodesByEmail(main, email);
             } else {
                 devicesInfos = Passwordless.getDevicesWithCodesByPhoneNumber(main, phoneNumber);
             }

File: src/main/java/io/supertokens/webserver/api/thirdparty/GetUsersByEmailAPI.java
Patch:
@@ -27,12 +27,13 @@
 import io.supertokens.thirdparty.ThirdParty;
 import io.supertokens.useridmapping.UserIdMapping;
 import io.supertokens.useridmapping.UserIdType;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
+
 import java.io.IOException;
 
 public class GetUsersByEmailAPI extends WebserverAPI {
@@ -51,6 +52,7 @@ public String getPath() {
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
         try {
             String email = InputParser.getQueryParamOrThrowError(req, "email", false);
+            email = Utils.normaliseEmail(email);
 
             UserInfo[] users = ThirdParty.getUsersByEmail(super.main, email);
 

File: src/main/java/io/supertokens/featureflag/EE_FEATURES.java
Patch:
@@ -17,7 +17,7 @@
 package io.supertokens.featureflag;
 
 public enum EE_FEATURES {
-    ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test");
+    ACCOUNT_LINKING("account_linking"), MULTI_TENANCY("multi_tenancy"), TEST("test"), DASHBOARD_LOGIN("dashboard_login");
 
     private final String name;
 

File: cli/src/main/java/io/supertokens/cli/commandHandler/help/HelpHandler.java
Patch:
@@ -43,7 +43,7 @@ public void doCommand(String installationDir, boolean viaInstaller, String[] arg
             if (command != null) {
                 String commandName = command.getCommandName();
                 if (commandName == null) {
-                    continue;   // this is an options for main supertokens command
+                    continue; // this is an options for main supertokens command
                 }
                 Logging.info(Utils.formatWithFixedSpaces("->  " + commandName, command.getShortDescription(), 40, 80));
             }
@@ -61,8 +61,7 @@ public void doCommand(String installationDir, boolean viaInstaller, String[] arg
     }
 
     private void printFileInfo(String key, String value) {
-        Logging.info(
-                Utils.formatWithFixedSpaces("    " + key, value, 40, 80));
+        Logging.info(Utils.formatWithFixedSpaces("    " + key, value, 40, 80));
     }
 
     @Override

File: cli/src/main/java/io/supertokens/cli/commandHandler/list/ListHandler.java
Patch:
@@ -33,8 +33,8 @@ public void doCommand(String installationDir, boolean viaInstaller, String[] arg
             }
             for (Processes.RunningProcess p : processes) {
                 p.fetchConfigFilePath();
-                Logging.info("-> Instance PID: " + p.pid + ", address: " + p.hostName + ":" + p.port +
-                        ", config file loaded: " + p.configFilePath);
+                Logging.info("-> Instance PID: " + p.pid + ", address: " + p.hostName + ":" + p.port
+                        + ", config file loaded: " + p.configFilePath);
             }
         } catch (Exception e) {
             throw new QuitProgramException("Could not execute list command.", e);

File: cli/src/main/java/io/supertokens/cli/httpRequest/HTTPRequest.java
Patch:
@@ -56,9 +56,8 @@ public static <T> T sendGETRequest(String url, Map<String, String> params, Integ
 
         if (params != null) {
             for (Map.Entry<String, String> entry : params.entrySet()) {
-                paramBuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(),
-                        StandardCharsets.UTF_8))
-                        .append("&");
+                paramBuilder.append(entry.getKey()).append("=")
+                        .append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8)).append("&");
             }
         }
         String paramsStr = paramBuilder.toString();

File: cli/src/main/java/io/supertokens/cli/processes/Processes.java
Patch:
@@ -34,7 +34,7 @@ public static class RunningProcess {
         public final String port;
         public final String pid;
         public final String basePath;
-        public String configFilePath;  // set via an API call
+        public String configFilePath; // set via an API call
 
         RunningProcess(String hostName, String port, String pid, String basePath) {
             this.hostName = hostName;
@@ -46,8 +46,8 @@ public static class RunningProcess {
         public void fetchConfigFilePath() throws IOException, HTTPResponseException {
             Map<String, String> params = new HashMap<>();
             params.put("pid", this.pid);
-            JsonObject result = HTTPRequest
-                    .sendGETRequest("http://" + this.hostName + ":" + this.port + this.basePath + "/config", params, null);
+            JsonObject result = HTTPRequest.sendGETRequest(
+                    "http://" + this.hostName + ":" + this.port + this.basePath + "/config", params, null);
             this.configFilePath = result.get("path").getAsString();
         }
     }

File: downloader/src/main/java/io/supertokens/downloader/Main.java
Patch:
@@ -109,6 +109,9 @@ private static void start(String[] args) throws IOException, HTTPResponseExcepti
             current++;
             downloadFile(link, "cli", current, total);
         }
+
+        // we don't have any ee only dependencies which are not also dependencies
+        // of the core. So we don't do anything explicitly here.
     }
 
     private static void downloadFile(String urlStr, String parentDir, int currentCount, int total) throws IOException {

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -249,6 +249,8 @@ private void setupRoutes() throws Exception {
         addAPI(new RemoveUserIdMappingAPI(main));
         addAPI(new UpdateExternalUserIdInfoAPI(main));
         addAPI(new ImportUserWithPasswordHashAPI(main));
+        addAPI(new LicenseKeyAPI(main));
+        addAPI(new EEFeatureFlagAPI(main));
         // deprecated APIs:
         addAPI(new RecipeRouter(main, new io.supertokens.webserver.api.emailpassword.UsersAPI(main),
                 new io.supertokens.webserver.api.thirdparty.UsersAPI(main)));

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -21,7 +21,6 @@
 import io.supertokens.config.Config;
 import io.supertokens.exceptions.QuitProgramException;
 import io.supertokens.output.Logging;
-
 import jakarta.servlet.ServletException;
 import jakarta.servlet.http.HttpServlet;
 import jakarta.servlet.http.HttpServletRequest;
@@ -49,10 +48,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.14");
         supportedVersions.add("2.15");
         supportedVersions.add("2.16");
+        supportedVersions.add("2.17");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.16";
+        return "2.17";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/config/CoreConfig.java
Patch:
@@ -36,7 +36,7 @@ public class CoreConfig {
     private int core_config_version = -1;
 
     @JsonProperty
-    private int access_token_validity = 3600; // in seconds
+    private long access_token_validity = 3600; // in seconds
 
     @JsonProperty
     private boolean access_token_blacklisting = false;

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -262,6 +262,8 @@ public void addAPI(WebserverAPI api) {
 
         tomcat.addServlet(CONTEXT_PATH, api.getPath(), api);
         context.addServletMappingDecoded(api.getPath(), api.getPath());
+        // add an additional mapping for the same api so that trailing slashes also work
+        context.addServletMappingDecoded(api.getPath() + "/", api.getPath());
     }
 
     public void stop() {

File: src/main/java/io/supertokens/ProcessState.java
Patch:
@@ -72,13 +72,14 @@ public synchronized void clear() {
      * SENDING_TELEMETRY, SENT_TELEMETRY: For Telemetry
      * PASSWORD_HASH_BCRYPT, PASSWORD_HASH_ARGON, PASSWORD_VERIFY_BCRYPT, PASSWORD_VERIFY_ARGON: For testing password
      * hashing
+     * ADDING_REMOTE_ADDRESS_FILTER: If IP allow / deny regex has been passed, we add a filter to the tomcat server
      */
     public enum PROCESS_STATE {
         INIT, INIT_FAILURE, STARTED, SHUTTING_DOWN, STOPPED, RETRYING_ACCESS_TOKEN_JWT_VERIFICATION,
         CRON_TASK_ERROR_LOGGING, WAITING_TO_INIT_STORAGE_MODULE, GET_SESSION_NEW_TOKENS, DEADLOCK_FOUND,
         CREATING_NEW_TABLE, SENDING_TELEMETRY, SENT_TELEMETRY, SETTING_ACCESS_TOKEN_SIGNING_KEY_TO_NULL,
         PASSWORD_HASH_BCRYPT, PASSWORD_HASH_ARGON, PASSWORD_VERIFY_BCRYPT, PASSWORD_VERIFY_ARGON,
-        PASSWORD_VERIFY_FIREBASE_SCRYPT
+        PASSWORD_VERIFY_FIREBASE_SCRYPT, ADDING_REMOTE_ADDRESS_FILTER
     }
 
     public static class EventAndException {

File: src/main/java/io/supertokens/ProcessState.java
Patch:
@@ -77,7 +77,8 @@ public enum PROCESS_STATE {
         INIT, INIT_FAILURE, STARTED, SHUTTING_DOWN, STOPPED, RETRYING_ACCESS_TOKEN_JWT_VERIFICATION,
         CRON_TASK_ERROR_LOGGING, WAITING_TO_INIT_STORAGE_MODULE, GET_SESSION_NEW_TOKENS, DEADLOCK_FOUND,
         CREATING_NEW_TABLE, SENDING_TELEMETRY, SENT_TELEMETRY, SETTING_ACCESS_TOKEN_SIGNING_KEY_TO_NULL,
-        PASSWORD_HASH_BCRYPT, PASSWORD_HASH_ARGON, PASSWORD_VERIFY_BCRYPT, PASSWORD_VERIFY_ARGON
+        PASSWORD_HASH_BCRYPT, PASSWORD_HASH_ARGON, PASSWORD_VERIFY_BCRYPT, PASSWORD_VERIFY_ARGON,
+        PASSWORD_VERIFY_FIREBASE_SCRYPT
     }
 
     public static class EventAndException {

File: src/main/java/io/supertokens/inmemorydb/queries/EmailPasswordQueries.java
Patch:
@@ -48,7 +48,7 @@ public class EmailPasswordQueries {
     static String getQueryToCreateUsersTable(Start start) {
         return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getEmailPasswordUsersTable() + " ("
                 + "user_id CHAR(36) NOT NULL," + "email VARCHAR(256) NOT NULL UNIQUE,"
-                + "password_hash VARCHAR(128) NOT NULL," + "time_joined BIGINT UNSIGNED NOT NULL,"
+                + "password_hash VARCHAR(256) NOT NULL," + "time_joined BIGINT UNSIGNED NOT NULL,"
                 + "PRIMARY KEY (user_id));";
     }
 

File: src/main/java/io/supertokens/inmemorydb/queries/ThirdPartyQueries.java
Patch:
@@ -44,7 +44,7 @@ public class ThirdPartyQueries {
 
     static String getQueryToCreateUsersTable(Start start) {
         return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getThirdPartyUsersTable() + " ("
-                + "third_party_id VARCHAR(28) NOT NULL," + "third_party_user_id VARCHAR(128) NOT NULL,"
+                + "third_party_id VARCHAR(28) NOT NULL," + "third_party_user_id VARCHAR(256) NOT NULL,"
                 + "user_id CHAR(36) NOT NULL UNIQUE," + "email VARCHAR(256) NOT NULL,"
                 + "time_joined BIGINT UNSIGNED NOT NULL," + "PRIMARY KEY (third_party_id, third_party_user_id));";
     }

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -205,6 +205,7 @@ private void setupRoutes() throws Exception {
         addAPI(new UserIdMappingAPI(main));
         addAPI(new RemoveUserIdMappingAPI(main));
         addAPI(new UpdateExternalUserIdInfoAPI(main));
+        addAPI(new ImportUserWithPasswordHashAPI(main));
         // deprecated APIs:
         addAPI(new RecipeRouter(main, new io.supertokens.webserver.api.emailpassword.UsersAPI(main),
                 new io.supertokens.webserver.api.thirdparty.UsersAPI(main)));

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -47,10 +47,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.13");
         supportedVersions.add("2.14");
         supportedVersions.add("2.15");
+        supportedVersions.add("2.16");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.15";
+        return "2.16";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/session/accessToken/AccessToken.java
Patch:
@@ -146,7 +146,8 @@ public static TokenInfo createNewAccessToken(@Nonnull Main main, @Nonnull String
         }
         AccessTokenInfo accessToken = new AccessTokenInfo(sessionHandle, userId, refreshTokenHash1, expiryTime,
                 parentRefreshTokenHash1, userData, antiCsrfToken, now, lmrt);
-        String token = JWT.createJWT(new Gson().toJsonTree(accessToken), signingKey.privateKey, VERSION.V2);
+
+        String token = JWT.createJWT(Utils.toJsonTreeWithNulls(accessToken), signingKey.privateKey, VERSION.V2);
         return new TokenInfo(token, expiryTime, now);
 
     }
@@ -166,7 +167,7 @@ public static TokenInfo createNewAccessTokenV1(@Nonnull Main main, @Nonnull Stri
         accessToken = new AccessTokenInfo(sessionHandle, userId, refreshTokenHash1, expiryTime, parentRefreshTokenHash1,
                 userData, antiCsrfToken, now, null);
 
-        String token = JWT.createJWT(new Gson().toJsonTree(accessToken), signingKey.privateKey, VERSION.V1);
+        String token = JWT.createJWT(Utils.toJsonTreeWithNulls(accessToken), signingKey.privateKey, VERSION.V1);
         return new TokenInfo(token, expiryTime, now);
 
     }

File: src/main/java/io/supertokens/webserver/api/session/RefreshSessionAPI.java
Patch:
@@ -61,7 +61,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         try {
             SessionInformationHolder sessionInfo = Session.refreshSession(main, refreshToken, antiCsrfToken,
                     enableAntiCsrf);
-            JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
+            JsonObject result = sessionInfo.toJsonObject();
             result.addProperty("status", "OK");
             super.sendJsonResponse(200, result, resp);
         } catch (StorageQueryException | StorageTransactionLogicException e) {

File: src/main/java/io/supertokens/webserver/api/session/SessionRegenerateAPI.java
Patch:
@@ -65,7 +65,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         try {
             SessionInformationHolder sessionInfo = Session.regenerateToken(main, accessToken, userDataInJWT);
 
-            JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
+            JsonObject result = sessionInfo.toJsonObject();
 
             result.addProperty("status", "OK");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/session/VerifySessionAPI.java
Patch:
@@ -69,7 +69,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             SessionInformationHolder sessionInfo = Session.getSession(main, accessToken, antiCsrfToken, enableAntiCsrf,
                     doAntiCsrfCheck);
 
-            JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
+            JsonObject result = sessionInfo.toJsonObject();
             result.addProperty("status", "OK");
 
             result.addProperty("jwtSigningPublicKey",

File: src/test/java/io/supertokens/test/session/api/RefreshSessionAPITest2_7.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.supertokens.test.session.api;
 
+import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
 import io.supertokens.ProcessState;
 import io.supertokens.test.TestingProcessManager;
@@ -363,6 +364,7 @@ public void successOutputWithValidRefreshTokenTest() throws Exception {
 
         String userId = "userId";
         JsonObject userDataInJWT = new JsonObject();
+        userDataInJWT.add("nullProp", JsonNull.INSTANCE);
         userDataInJWT.addProperty("key", "value");
         JsonObject userDataInDatabase = new JsonObject();
         userDataInDatabase.addProperty("key", "value");

File: src/test/java/io/supertokens/test/session/api/SessionRegenerateAPITest2_7.java
Patch:
@@ -16,6 +16,7 @@
 
 package io.supertokens.test.session.api;
 
+import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
 import io.supertokens.ProcessState;
 import io.supertokens.session.accessToken.AccessToken;
@@ -75,6 +76,7 @@ public void testCallRegenerateAPIWithNewJwtPayloadAndCheckResponses() throws Exc
 
         JsonObject newUserDataInJWT = new JsonObject();
         newUserDataInJWT.addProperty("key2", "value2");
+        newUserDataInJWT.add("nullProp", JsonNull.INSTANCE);
 
         JsonObject sessionRegenerateRequest = new JsonObject();
         sessionRegenerateRequest.addProperty("accessToken", accessToken);

File: src/test/java/io/supertokens/test/session/api/VerifySessionAPITest2_9.java
Patch:
@@ -17,6 +17,7 @@
 package io.supertokens.test.session.api;
 
 import com.google.gson.JsonArray;
+import com.google.gson.JsonNull;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import io.supertokens.ProcessState;
@@ -55,6 +56,7 @@ public void successOutputCheckNoNewAccessToken() throws Exception {
         String userId = "userId";
         JsonObject userDataInJWT = new JsonObject();
         userDataInJWT.addProperty("key", "value");
+        userDataInJWT.add("nullProp", JsonNull.INSTANCE);
         JsonObject userDataInDatabase = new JsonObject();
         userDataInDatabase.addProperty("key", "value");
 
@@ -109,6 +111,7 @@ public void successOutputCheckNewAccessToken() throws Exception {
         String userId = "userId";
         JsonObject userDataInJWT = new JsonObject();
         userDataInJWT.addProperty("key", "value");
+        userDataInJWT.add("nullProp", JsonNull.INSTANCE);
         JsonObject userDataInDatabase = new JsonObject();
         userDataInDatabase.addProperty("key", "value");
 

File: src/main/java/io/supertokens/config/Config.java
Patch:
@@ -50,6 +50,7 @@ public static void loadConfig(Main main, String configFilePath) {
             return;
         }
         main.getResourceDistributor().setResource(RESOURCE_KEY, new Config(main, configFilePath));
+        Logging.info(main, "Loading supertokens config.", true);
     }
 
     public static CoreConfig getConfig(Main main) {
@@ -60,7 +61,6 @@ public static CoreConfig getConfig(Main main) {
     }
 
     private CoreConfig loadCoreConfig(String configFilePath) throws IOException {
-        Logging.info(main, "Loading supertokens config.");
         final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
         CoreConfig config = mapper.readValue(new File(configFilePath), CoreConfig.class);
         config.validateAndInitialise(main);

File: src/main/java/io/supertokens/version/Version.java
Patch:
@@ -60,7 +60,7 @@ public static VersionFile getVersion(Main main) {
     }
 
     private VersionFile loadVersionFile(String versionFilePath) throws IOException {
-        Logging.info(main, "Loading supertokens version.yaml file.");
+        Logging.info(main, "Loading supertokens version.yaml file.", true);
         final ObjectMapper mapper = new ObjectMapper(new YAMLFactory());
         VersionFile version = mapper.readValue(new File(versionFilePath), VersionFile.class);
         version.validate();

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -195,7 +195,7 @@ protected String getVersionFromRequest(HttpServletRequest req) {
         return version;
     }
 
-    protected static class BadRequestException extends Exception {
+    public static class BadRequestException extends Exception {
         private static final long serialVersionUID = -5014892660208978125L;
 
         public BadRequestException(String msg) {

File: src/test/java/io/supertokens/test/Utils.java
Patch:
@@ -280,7 +280,7 @@ public static String[] parseJsonArrayToStringArray(JsonArray arr) {
     public static void createUserIdMappingAndCheckThatItExists(Main main, UserIdMapping userIdMapping)
             throws Exception {
         io.supertokens.useridmapping.UserIdMapping.createUserIdMapping(main, userIdMapping.superTokensUserId,
-                userIdMapping.externalUserId, userIdMapping.externalUserIdInfo);
+                userIdMapping.externalUserId, userIdMapping.externalUserIdInfo, false);
         // retrieve mapping and validate
         UserIdMapping retrievedMapping = io.supertokens.useridmapping.UserIdMapping.getUserIdMapping(main,
                 userIdMapping.superTokensUserId, UserIdType.SUPERTOKENS);

File: src/test/java/io/supertokens/test/userIdMapping/api/GetUserIdMappingAPITest.java
Patch:
@@ -200,7 +200,7 @@ public void testRetrieveUserIdMapping() throws Exception {
         String externalUserId = "externalUserId";
         String externalUserIdInfo = "externalUserIdInfo";
 
-        UserIdMapping.createUserIdMapping(process.main, superTokensUserId, externalUserId, externalUserIdInfo);
+        UserIdMapping.createUserIdMapping(process.main, superTokensUserId, externalUserId, externalUserIdInfo, false);
 
         // retrieve the userId mapping using the superTokensUserId with SUPERTOKENS as the userIdType
         {
@@ -294,7 +294,7 @@ public void testRetrievingUserIdMappingWithoutSendingUserIdType() throws Excepti
         String externalUserId = "externalUserId";
         String externalUserIdInfo = "externalUserIdInfo";
 
-        UserIdMapping.createUserIdMapping(process.main, superTokensUserId, externalUserId, externalUserIdInfo);
+        UserIdMapping.createUserIdMapping(process.main, superTokensUserId, externalUserId, externalUserIdInfo, false);
 
         {
             // retrieving with superTokensUserId
@@ -348,7 +348,7 @@ public void testRetrieveUserIdMappingWithExternalUserIdInfoAsNull() throws Excep
         String superTokensUserId = user.id;
         String externalUserId = "externalUserId";
 
-        UserIdMapping.createUserIdMapping(process.main, superTokensUserId, externalUserId, null);
+        UserIdMapping.createUserIdMapping(process.main, superTokensUserId, externalUserId, null, false);
 
         HashMap<String, String> QUERY_PARAM = new HashMap<>();
         QUERY_PARAM.put("userId", superTokensUserId);

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -46,10 +46,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.12");
         supportedVersions.add("2.13");
         supportedVersions.add("2.14");
+        supportedVersions.add("2.15");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.14";
+        return "2.15";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/inmemorydb/Start.java
Patch:
@@ -52,7 +52,6 @@
 import io.supertokens.pluginInterface.thirdparty.exception.DuplicateThirdPartyUserException;
 import io.supertokens.pluginInterface.thirdparty.sqlStorage.ThirdPartySQLStorage;
 import io.supertokens.pluginInterface.usermetadata.sqlStorage.UserMetadataSQLStorage;
-
 import io.supertokens.pluginInterface.userroles.exception.DuplicateUserRoleMappingException;
 import io.supertokens.pluginInterface.userroles.exception.UnknownRoleException;
 import io.supertokens.pluginInterface.userroles.sqlStorage.UserRolesSQLStorage;
@@ -313,9 +312,9 @@ public int deleteSession(String[] sessionHandles) throws StorageQueryException {
     }
 
     @Override
-    public String[] getAllSessionHandlesForUser(String userId) throws StorageQueryException {
+    public String[] getAllNonExpiredSessionHandlesForUser(String userId) throws StorageQueryException {
         try {
-            return SessionQueries.getAllSessionHandlesForUser(this, userId);
+            return SessionQueries.getAllNonExpiredSessionHandlesForUser(this, userId);
         } catch (SQLException e) {
             throw new StorageQueryException(e);
         }

File: src/main/java/io/supertokens/webserver/api/session/SessionUserAPI.java
Patch:
@@ -50,7 +50,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
         assert userId != null;
 
         try {
-            String[] sessionHandles = Session.getAllSessionHandlesForUser(main, userId);
+            String[] sessionHandles = Session.getAllNonExpiredSessionHandlesForUser(main, userId);
 
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");

File: src/main/java/io/supertokens/authRecipe/AuthRecipe.java
Patch:
@@ -69,6 +69,7 @@ public static void deleteUser(Main main, String userId) throws StorageQueryExcep
         StorageLayer.getUserMetadataStorage(main).deleteUserMetadata(userId);
         StorageLayer.getSessionStorage(main).deleteSessionsOfUser(userId);
         StorageLayer.getEmailVerificationStorage(main).deleteEmailVerificationUserInfo(userId);
+        StorageLayer.getUserRolesStorage(main).deleteAllRolesForUser(userId);
 
         // auth recipe deletions here only
         StorageLayer.getEmailPasswordStorage(main).deleteEmailPasswordUser(userId);

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -45,10 +45,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.11");
         supportedVersions.add("2.12");
         supportedVersions.add("2.13");
+        supportedVersions.add("2.14");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.13";
+        return "2.14";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -278,7 +278,7 @@ private void createDotStartedFileForThisProcess() throws IOException {
         boolean ignored = dotStarted.setWritable(true, false);
         this.startedFileName = fileName;
         try (BufferedWriter writer = new BufferedWriter(new FileWriter(dotStarted))) { // overwrite mode
-            writer.write(ProcessHandle.current().pid() + "");
+            writer.write(ProcessHandle.current().pid() + "\n" + Config.getConfig(this).getBasePath());
         }
     }
 

File: cli/src/main/java/io/supertokens/cli/commandHandler/hashingCalibrate/HashingCalibrateHandler.java
Patch:
@@ -49,7 +49,7 @@ protected void doCommand(String installationDir, boolean viaInstaller, String[]
             }
 
             String hashingPoolSizeStr = CLIOptionsParser.parseOption("--with_argon2_hashing_pool_size", args);
-            int hashingPoolSize = 10;
+            int hashingPoolSize = 1;
             if (hashingPoolSizeStr != null) {
                 hashingPoolSize = Integer.parseInt(hashingPoolSizeStr);
             }
@@ -90,7 +90,7 @@ protected List<Option> getOptionsAndDescription() {
                         " 300 MS."));
         options.add(new Option("--with_argon2_hashing_pool_size",
                 "If calibrating argon2 hashing, this value will affect how many maximum hashes can be computed " +
-                        "concurrently. The default value is 10"));
+                        "concurrently. The default value is 1"));
         options.add(new Option("--with_argon2_max_memory_mb",
                 "If calibrating argon2, this value determines how much maximum memory (RAM), in MB, to use for " +
                         "password " +
@@ -109,7 +109,7 @@ public String getShortDescription() {
 
     @Override
     public String getUsage() {
-        return "supertokens hashingCalibrate --with_alg=<argon2 | bcrypt> [--with_argon2_hashing_pool_size=10] " +
+        return "supertokens hashingCalibrate --with_alg=<argon2 | bcrypt> [--with_argon2_hashing_pool_size=1] " +
                 "[--with_argon2_max_memory_mb=1024] [--with_argon2_parallelism=<value>] [--with_time_per_hash_ms=300]";
     }
 

File: cli/src/main/java/io/supertokens/cli/commandHandler/install/InstallHandler.java
Patch:
@@ -63,9 +63,6 @@ public void doCommand(String ignored, boolean viaInstaller, String[] args) {
                 createSupertokensScript(installationDir, exeLoc);
                 Logging.info("Successfully installed SuperTokens! You can now delete this directory safely");
                 Logging.info("Run \"supertokens --help\" to see list of available commands");
-                Logging.info(
-                        "Please fill in the compulsory fields in the config file located here: " + installationDir +
-                                "config.yaml");
             }
         } catch (Exception e) {
             if (e.getMessage().toLowerCase().contains("permission denied") && !(e instanceof QuitProgramException)) {

File: src/test/java/io/supertokens/test/InMemoryDBStorageTest.java
Patch:
@@ -56,6 +56,9 @@ public void beforeEach() {
         Utils.reset();
     }
 
+    @Rule
+    public Retry retry = new Retry(3);
+
     @Test
     public void transactionIsolationTesting()
             throws InterruptedException, StorageQueryException, StorageTransactionLogicException {

File: src/test/java/io/supertokens/test/InMemoryDBTest.java
Patch:
@@ -31,7 +31,6 @@
 import io.supertokens.session.info.SessionInformationHolder;
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.usermetadata.UserMetadata;
-
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -121,13 +120,14 @@ public void testCodeCreationRapidly() throws Exception {
     public void testConcurrentMetadataUpdates() throws Exception {
         String[] args = { "../" };
 
-        TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);
+        TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false);
         process.getProcess().setForceInMemoryDB();
+        process.startProcess();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
         String userId = "userId";
 
-        ExecutorService es = Executors.newCachedThreadPool();
+        ExecutorService es = Executors.newFixedThreadPool(1000);
 
         for (int i = 0; i < 3000; i++) {
             final int ind = i;

File: src/main/java/io/supertokens/authRecipe/AuthRecipe.java
Patch:
@@ -70,5 +70,6 @@ public static void deleteUser(Main main, String userId) throws StorageQueryExcep
         StorageLayer.getEmailPasswordStorage(main).deleteEmailPasswordUser(userId);
         StorageLayer.getThirdPartyStorage(main).deleteThirdPartyUser(userId);
         StorageLayer.getPasswordlessStorage(main).deletePasswordlessUser(userId);
+        StorageLayer.getUserMetadataStorage(main).deleteUserMetadata(userId);
     }
 }

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -44,10 +44,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.10");
         supportedVersions.add("2.11");
         supportedVersions.add("2.12");
+        supportedVersions.add("2.13");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.12";
+        return "2.13";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/test/java/io/supertokens/test/PluginTest.java
Patch:
@@ -19,6 +19,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import io.supertokens.ProcessState;
+import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.version.VersionFile;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -56,6 +57,7 @@ public static void afterTesting() {
     @Before
     public void beforeEach() {
         Utils.reset();
+        StorageLayer.closeWithClearingURLClassLoader();
     }
 
     @Test

File: src/main/java/io/supertokens/output/LayoutWrappingEncoder.java
Patch:
@@ -27,8 +27,8 @@ class LayoutWrappingEncoder extends EncoderBase<ILoggingEvent> {
 
     private Layout<ILoggingEvent> layout;
 
-    LayoutWrappingEncoder(Main main) {
-        layout = new CustomLayout(main);
+    LayoutWrappingEncoder(String processID) {
+        layout = new CustomLayout(processID);
     }
 
     @Override

File: src/test/java/io/supertokens/test/APIKeysTest.java
Patch:
@@ -68,7 +68,6 @@ public void testGetApiKeysDoesNotReturnNullWhenAPIKeyIsSet() throws Exception {
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
-
     }
 
     // * - don't set API key and check that config.getAPIKeys() returns null

File: src/test/java/io/supertokens/test/AuthRecipeTest.java
Patch:
@@ -456,7 +456,7 @@ public void randomPaginationTest() throws Exception {
         // we create multiple users in parallel...
         List<AuthRecipeUserInfo> usersCreated = new ArrayList<>();
 
-        ExecutorService es = Executors.newCachedThreadPool();
+        ExecutorService es = Executors.newFixedThreadPool(500);
         for (int i = 0; i < numberOfUsers; i++) {
             if (Math.random() > 0.5) {
                 while (true) {

File: src/test/java/io/supertokens/test/InMemoryDBTest.java
Patch:
@@ -81,7 +81,7 @@ public void testCodeCreationRapidly() throws Exception {
         process.startProcess();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
 
-        ExecutorService es = Executors.newCachedThreadPool();
+        ExecutorService es = Executors.newFixedThreadPool(500);
 
         AtomicBoolean pass = new AtomicBoolean(true);
 

File: src/test/java/io/supertokens/test/StorageTest.java
Patch:
@@ -250,7 +250,8 @@ public void transactionIsolationWithAnInitialRowTesting()
                 t2.join();
 
                 assertEquals(endValueOfCon1.get(), endValueOfCon2.get());
-                if (Version.getVersion(process.getProcess()).getPluginName().equals("postgresql")) {
+                if (Version.getVersion(process.getProcess()).getPluginName().equals("postgresql")
+                        || Version.getVersion(process.getProcess()).getPluginName().equals("sql")) {
                     // Becasue FOR UPDATE does not wait in Postgresql. Instead if throws an error.
                     assert (numberOfIterations.get() == 1 || numberOfIterations.get() == 0);
                 } else {

File: src/test/java/io/supertokens/test/session/AccessTokenTest.java
Patch:
@@ -337,7 +337,7 @@ public void keyChangeThreadSafetyTest()
 
         Thread.sleep(3500);
 
-        ExecutorService es = Executors.newCachedThreadPool();
+        ExecutorService es = Executors.newFixedThreadPool(1000);
 
         AtomicBoolean hasNullPointerException = new AtomicBoolean(false);
 

File: src/main/java/io/supertokens/authRecipe/AuthRecipe.java
Patch:
@@ -69,5 +69,6 @@ public static void deleteUser(Main main, String userId) throws StorageQueryExcep
         StorageLayer.getEmailVerificationStorage(main).deleteEmailVerificationUserInfo(userId);
         StorageLayer.getEmailPasswordStorage(main).deleteEmailPasswordUser(userId);
         StorageLayer.getThirdPartyStorage(main).deleteThirdPartyUser(userId);
+        StorageLayer.getPasswordlessStorage(main).deletePasswordlessUser(userId);
     }
 }

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -42,10 +42,11 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("2.8");
         supportedVersions.add("2.9");
         supportedVersions.add("2.10");
+        supportedVersions.add("2.11");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.10";
+        return "2.11";
     }
 
     public WebserverAPI(Main main, String rid) {
@@ -157,7 +158,7 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
             }
             super.service(req, resp);
         } catch (Exception e) {
-            Logging.error(main, "API threw an exception: " + this.getPath(), Main.isTesting, e);
+            Logging.error(main, "API threw an exception: " + req.getMethod() + " " + this.getPath(), Main.isTesting, e);
 
             if (e instanceof QuitProgramException) {
                 main.wakeUpMainThreadToShutdown();

File: src/main/java/io/supertokens/jwt/JWTSigningFunctions.java
Patch:
@@ -84,7 +84,8 @@ public static String createJWTToken(Main main, String algorithm, JsonObject payl
         headerClaims.put("kid", keyToUse.keyId);
 
         long currentTimeInMillis = System.currentTimeMillis();
-        long jwtExpiry = (currentTimeInMillis / 1000) + (jwtValidity); // JWT Expiry is seconds from epoch not millis
+        // JWT Expiry is seconds from epoch not millis
+        long jwtExpiry = Double.valueOf(Math.ceil((currentTimeInMillis / 1000.0))).longValue() + (jwtValidity);
 
         // Add relevant claims to the payload, note we only add/override ones that we absolutely need to.
         Map<String, Object> jwtPayload = new Gson().fromJson(payload, HashMap.class);

File: src/test/java/io/supertokens/test/UtilsTest.java
Patch:
@@ -37,7 +37,7 @@ public void beforeEach() {
     }
 
     @Test
-    public void encodeDecodeBase63WithUTF() {
+    public void encodeDecodeBase64WithUTF() {
         assert (io.supertokens.utils.Utils.convertFromBase64(io.supertokens.utils.Utils.convertToBase64("łukasz 馬 / 马"))
                 .equals("łukasz 馬 / 马"));
     }

File: src/test/java/io/supertokens/test/httpRequest/HttpRequestForTesting.java
Patch:
@@ -69,7 +69,7 @@ public static <T> T sendGETRequest(Main main, String requestID, String url, Map<
         if (params != null) {
             for (Map.Entry<String, String> entry : params.entrySet()) {
                 paramBuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(),
-                        StandardCharsets.UTF_8))
+                                StandardCharsets.UTF_8))
                         .append("&");
             }
         }
@@ -105,7 +105,7 @@ public static <T> T sendGETRequest(Main main, String requestID, String url, Map<
             }
 
             StringBuilder response = new StringBuilder();
-            try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream))) {
+            try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
                 String inputLine;
                 while ((inputLine = in.readLine()) != null) {
                     response.append(inputLine);

File: src/main/java/io/supertokens/config/CoreConfig.java
Patch:
@@ -57,7 +57,7 @@ public class CoreConfig {
     private boolean access_token_signing_key_dynamic = true;
 
     @JsonProperty
-    private double access_token_signing_key_update_interval = 24; // in hours
+    private double access_token_signing_key_update_interval = 168; // in hours
 
     @JsonProperty
     private int port = 3567;
@@ -137,7 +137,8 @@ public boolean getAccessTokenSigningKeyDynamic() {
     }
 
     public long getAccessTokenSigningKeyUpdateInterval() {
-        return (long) (access_token_signing_key_update_interval * 3600 * 1000);
+        return access_token_signing_key_dynamic ?
+            (long) (access_token_signing_key_update_interval * 3600 * 1000) : (10L * 365 * 24 * 3600 * 1000);
     }
 
     public String[] getAPIKeys() {

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -44,7 +44,7 @@ public abstract class WebserverAPI extends HttpServlet {
     }
 
     public static String getLatestCDIVersion() {
-        return "2.8";
+        return "2.9";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/test/java/io/supertokens/test/ConfigTest2_6.java
Patch:
@@ -231,7 +231,7 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process,
         assertTrue("Config access signing key dynamic did not match default", config.getAccessTokenSigningKeyDynamic());
         assertEquals("Config access signing key interval did not match default",
                 config.getAccessTokenSigningKeyUpdateInterval(),
-                24 * 60 * 60 * 1000);
+                7 * 24 * 60 * 60 * 1000);
 
         assertEquals(config.getHost(process.getProcess()), "localhost");
         assertEquals(config.getPort(process.getProcess()), 3567);

File: src/test/java/io/supertokens/test/InMemoryDBTest.java
Patch:
@@ -375,6 +375,7 @@ public void createAndGetSessionWithSigningKeyChange()
             TokenTheftDetectedException, SignatureException {
 
         Utils.setValueInConfig("access_token_signing_key_update_interval", "0.00027");  // 1 second
+        Utils.setValueInConfig("access_token_validity", "1");  // 1 second
 
         String[] args = {"../"};
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args, false);

File: src/test/java/io/supertokens/test/session/SessionTest1.java
Patch:
@@ -316,6 +316,7 @@ public void createAndGetSessionWithSigningKeyChange()
             TokenTheftDetectedException, SignatureException {
 
         Utils.setValueInConfig("access_token_signing_key_update_interval", "0.00027");  // 1 second
+        Utils.setValueInConfig("access_token_validity", "1"); // 1 second
 
         String[] args = {"../"};
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);

File: src/test/java/io/supertokens/test/session/api/HandshakeAPITest2_7.java
Patch:
@@ -176,7 +176,7 @@ public void changingSigningKeyHandshakeAPITest() throws Exception {
 
         assertEquals(response.get("jwtSigningPublicKey").getAsString(),
                 new io.supertokens.utils.Utils.PubPriKey(
-                        AccessTokenSigningKey.getInstance(process.main).getKey().value).publicKey);
+                        AccessTokenSigningKey.getInstance(process.main).getLatestIssuedKey().value).publicKey);
 
         Thread.sleep(4000);
 
@@ -191,7 +191,7 @@ public void changingSigningKeyHandshakeAPITest() throws Exception {
         // the previous signing key
         assertTrue(changedResponse.get("jwtSigningPublicKey").getAsString()
                 .equals(new io.supertokens.utils.Utils.PubPriKey(
-                        AccessTokenSigningKey.getInstance(process.main).getKey().value).publicKey) &&
+                        AccessTokenSigningKey.getInstance(process.main).getLatestIssuedKey().value).publicKey) &&
                 !(changedResponse.get("jwtSigningPublicKey").getAsString()
                         .equals(response.get("jwtSigningPublicKey").getAsString())));
 
@@ -209,7 +209,7 @@ private static void checkHandshakeAPIResponse(JsonObject response, TestingProces
         //check jwtSigningPublicKey
         assertEquals(response.get("jwtSigningPublicKey").getAsString(),
                 new io.supertokens.utils.Utils.PubPriKey(
-                        AccessTokenSigningKey.getInstance(process.main).getKey().value).publicKey);
+                        AccessTokenSigningKey.getInstance(process.main).getLatestIssuedKey().value).publicKey);
 
         //check jwtSigningPublicKeyExpiryTime
         assertEquals(response.get("jwtSigningPublicKeyExpiryTime").getAsLong(),

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -40,6 +40,7 @@ public abstract class WebserverAPI extends HttpServlet {
     static {
         supportedVersions.add("2.7");
         supportedVersions.add("2.8");
+        supportedVersions.add("2.9");
     }
 
     public static String getLatestCDIVersion() {

File: src/test/java/io/supertokens/test/emailpassword/api/EmailPasswordUsersCountAPITest2_7.java
Patch:
@@ -22,6 +22,7 @@
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
+import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Rule;
@@ -58,7 +59,7 @@ public void testAPI() throws Exception {
             return;
         }
         {
-            JsonObject response = io.supertokens.test.httpRequest.HttpRequest
+            JsonObject response = HttpRequestForTesting
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,

File: src/test/java/io/supertokens/test/emailverification/api/RevokeTokenAPITest2_8.java
Patch:
@@ -23,6 +23,7 @@
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
+import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -89,7 +90,7 @@ public void testRevokeTokenForValidParameters() throws Exception {
     }
 
     private JsonObject makeRequest(Main main, JsonObject body) throws IOException, HttpResponseException {
-        return io.supertokens.test.httpRequest.HttpRequest.sendJsonPOSTRequest(main, "",
+        return HttpRequestForTesting.sendJsonPOSTRequest(main, "",
                 "http://localhost:3567/recipe/user/email/verify/token/remove", body, 1000, 1000, null,
                 Utils.getCdiVersion2_8ForTests(), RECIPE_ID.EMAIL_VERIFICATION.toString());
     }

File: src/test/java/io/supertokens/test/emailverification/api/UnverifyEmailAPITest2_8.java
Patch:
@@ -24,7 +24,7 @@
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
-import io.supertokens.test.httpRequest.HttpRequest;
+import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
 import org.junit.*;
 import org.junit.rules.TestRule;
@@ -95,7 +95,8 @@ public void testSucceedUnverifyEmail() throws Exception {
     }
 
     private JsonObject unverifyEmail(Main main, JsonObject body) throws IOException, HttpResponseException {
-        return HttpRequest.sendJsonPOSTRequest(main, "", "http://localhost:3567/recipe/user/email/verify/remove", body,
+        return HttpRequestForTesting
+                .sendJsonPOSTRequest(main, "", "http://localhost:3567/recipe/user/email/verify/remove", body,
                 1000,
                 1000, null, Utils.getCdiVersion2_8ForTests(), RECIPE_ID.EMAIL_VERIFICATION.toString());
     }

File: src/test/java/io/supertokens/test/httpRequest/HttpRequestForTesting.java
Patch:
@@ -28,7 +28,7 @@
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
-public class HttpRequest {
+public class HttpRequestForTesting {
     private static final int STATUS_CODE_ERROR_THRESHOLD = 400;
 
     private static URL getURL(Main main, String requestID, String url) throws MalformedURLException {

File: src/test/java/io/supertokens/test/thirdparty/api/ThirdPartyUsersCountAPITest2_7.java
Patch:
@@ -22,6 +22,7 @@
 import io.supertokens.storageLayer.StorageLayer;
 import io.supertokens.test.TestingProcessManager;
 import io.supertokens.test.Utils;
+import io.supertokens.test.httpRequest.HttpRequestForTesting;
 import io.supertokens.thirdparty.ThirdParty;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -66,7 +67,7 @@ public void testAPI() throws Exception {
         }
 
         {
-            JsonObject response = io.supertokens.test.httpRequest.HttpRequest
+            JsonObject response = HttpRequestForTesting
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,
@@ -87,7 +88,7 @@ public void testAPI() throws Exception {
                 "thirdPartyUserId4", "test4@example.com");
 
         {
-            JsonObject response = io.supertokens.test.httpRequest.HttpRequest
+            JsonObject response = HttpRequestForTesting
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,

File: src/main/java/io/supertokens/session/refreshToken/RefreshToken.java
Patch:
@@ -40,11 +40,11 @@ public class RefreshToken {
 
     public static RefreshTokenInfo getInfoFromRefreshToken(@Nonnull Main main, @Nonnull String token)
             throws UnauthorisedException, StorageQueryException, StorageTransactionLogicException {
+        String key = RefreshTokenKey.getInstance(main).getKey();
         try {
             TYPE tokenType = getTypeFromToken(token);
 
             // format of token is <encrypted part>.<nonce>.V1
-            String key = RefreshTokenKey.getInstance(main).getKey();
             String[] splittedToken = token.split("\\.");
             if (splittedToken.length != 3) {
                 throw new InvalidRefreshTokenFormatException(

File: src/main/java/io/supertokens/webserver/api/core/UsersAPI.java
Patch:
@@ -24,8 +24,10 @@
 import io.supertokens.authRecipe.AuthRecipe;
 import io.supertokens.authRecipe.UserPaginationContainer;
 import io.supertokens.authRecipe.UserPaginationToken;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -119,6 +121,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             }
             super.sendJsonResponse(200, result, resp);
         } catch (UserPaginationToken.InvalidTokenException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             throw new ServletException(
                     new BadRequestException("invalid pagination token"));
         } catch (StorageQueryException e) {

File: src/main/java/io/supertokens/webserver/api/emailpassword/GeneratePasswordResetTokenAPI.java
Patch:
@@ -19,9 +19,11 @@
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.emailpassword.exceptions.UnknownUserIdException;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -61,6 +63,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             result.addProperty("token", token);
             super.sendJsonResponse(200, result, resp);
         } catch (UnknownUserIdException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "UNKNOWN_USER_ID_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailpassword/ResetPasswordAPI.java
Patch:
@@ -20,9 +20,11 @@
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.emailpassword.exceptions.ResetPasswordInvalidTokenException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -74,6 +76,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             super.sendJsonResponse(200, result, resp);
 
         } catch (ResetPasswordInvalidTokenException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "RESET_PASSWORD_INVALID_TOKEN_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignInAPI.java
Patch:
@@ -22,6 +22,7 @@
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.emailpassword.exceptions.WrongCredentialsException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.emailpassword.UserInfo;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
@@ -69,6 +70,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             super.sendJsonResponse(200, result, resp);
 
         } catch (WrongCredentialsException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "WRONG_CREDENTIALS_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignUpAPI.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.emailpassword.UserInfo;
 import io.supertokens.pluginInterface.emailpassword.exceptions.DuplicateEmailException;
@@ -77,6 +78,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             super.sendJsonResponse(200, result, resp);
 
         } catch (DuplicateEmailException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "EMAIL_ALREADY_EXISTS_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailpassword/UserAPI.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.emailpassword.UserInfo;
 import io.supertokens.pluginInterface.emailpassword.exceptions.DuplicateEmailException;
@@ -117,10 +118,12 @@ protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws IO
         } catch (StorageQueryException | StorageTransactionLogicException e) {
             throw new ServletException(e);
         } catch (UnknownUserIdException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "UNKNOWN_USER_ID_ERROR");
             super.sendJsonResponse(200, result, resp);
         } catch (DuplicateEmailException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "EMAIL_ALREADY_EXISTS_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailverification/GenerateEmailVerificationTokenAPI.java
Patch:
@@ -20,8 +20,10 @@
 import io.supertokens.Main;
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.emailverification.exception.EmailAlreadyVerifiedException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -64,6 +66,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             result.addProperty("token", token);
             super.sendJsonResponse(200, result, resp);
         } catch (EmailAlreadyVerifiedException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "EMAIL_ALREADY_VERIFIED_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/emailverification/VerifyEmailAPI.java
Patch:
@@ -21,9 +21,11 @@
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.emailverification.User;
 import io.supertokens.emailverification.exception.EmailVerificationInvalidTokenException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -71,6 +73,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             super.sendJsonResponse(200, result, resp);
 
         } catch (EmailVerificationInvalidTokenException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject result = new JsonObject();
             result.addProperty("status", "EMAIL_VERIFICATION_INVALID_TOKEN_ERROR");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/session/SessionAPI.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
@@ -104,6 +105,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
         } catch (StorageQueryException e) {
             throw new ServletException(e);
         } catch (UnauthorisedException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject reply = new JsonObject();
             reply.addProperty("status", "UNAUTHORISED");
             reply.addProperty("message", e.getMessage());

File: src/main/java/io/supertokens/webserver/api/session/SessionRegenerateAPI.java
Patch:
@@ -21,11 +21,13 @@
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.session.Session;
 import io.supertokens.session.info.SessionInformationHolder;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -72,6 +74,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
                 NoSuchAlgorithmException | InvalidKeyException | SignatureException | InvalidKeySpecException e) {
             throw new ServletException(e);
         } catch (UnauthorisedException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject reply = new JsonObject();
             reply.addProperty("status", "UNAUTHORISED");
             reply.addProperty("message", e.getMessage());

File: src/main/java/io/supertokens/webserver/api/session/VerifySessionAPI.java
Patch:
@@ -22,6 +22,7 @@
 import io.supertokens.Main;
 import io.supertokens.exceptions.TryRefreshTokenException;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.output.Logging;
 import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
@@ -76,11 +77,13 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         } catch (StorageQueryException | StorageTransactionLogicException e) {
             throw new ServletException(e);
         } catch (UnauthorisedException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             JsonObject reply = new JsonObject();
             reply.addProperty("status", "UNAUTHORISED");
             reply.addProperty("message", e.getMessage());
             super.sendJsonResponse(200, reply, resp);
         } catch (TryRefreshTokenException e) {
+            Logging.debug(main, Utils.exceptionStacktraceToString(e));
             try {
                 JsonObject reply = new JsonObject();
                 reply.addProperty("status", "TRY_REFRESH_TOKEN");

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -30,8 +30,8 @@
 import io.supertokens.webserver.api.emailverification.GenerateEmailVerificationTokenAPI;
 import io.supertokens.webserver.api.emailverification.VerifyEmailAPI;
 import io.supertokens.webserver.api.session.*;
-import io.supertokens.webserver.api.thirdparty.SignInUpAPI;
 import io.supertokens.webserver.api.thirdparty.GetUsersByEmailAPI;
+import io.supertokens.webserver.api.thirdparty.SignInUpAPI;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Connector;

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -31,6 +31,7 @@
 import io.supertokens.webserver.api.emailverification.VerifyEmailAPI;
 import io.supertokens.webserver.api.session.*;
 import io.supertokens.webserver.api.thirdparty.SignInUpAPI;
+import io.supertokens.webserver.api.thirdparty.GetUsersByEmailAPI;
 import org.apache.catalina.LifecycleException;
 import org.apache.catalina.LifecycleState;
 import org.apache.catalina.connector.Connector;
@@ -161,6 +162,7 @@ private void setupRoutes() throws Exception {
                 new io.supertokens.webserver.api.thirdparty.UserAPI(main)));
         addAPI(new GenerateEmailVerificationTokenAPI(main));
         addAPI(new VerifyEmailAPI(main));
+        addAPI(new GetUsersByEmailAPI(main));
         addAPI(new SignInUpAPI(main));
         addAPI(new TelemetryAPI(main));
         addAPI(new UsersCountAPI(main));

File: src/main/java/io/supertokens/webserver/api/session/HandshakeAPI.java
Patch:
@@ -23,6 +23,7 @@
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.session.Session;
 import io.supertokens.session.accessToken.AccessTokenSigningKey;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -49,7 +50,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         try {
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");
-            result.addProperty("jwtSigningPublicKey", AccessTokenSigningKey.getInstance(main).getKey().publicKey);
+            result.addProperty("jwtSigningPublicKey",
+                    new Utils.PubPriKey(AccessTokenSigningKey.getInstance(main).getKey().value).publicKey);
             result.addProperty("jwtSigningPublicKeyExpiryTime",
                     AccessTokenSigningKey.getInstance(main).getKeyExpiryTime());
             result.addProperty("accessTokenBlacklistingEnabled", Config.getConfig(main).getAccessTokenBlacklisting());

File: src/main/java/io/supertokens/webserver/api/session/SessionAPI.java
Patch:
@@ -25,6 +25,7 @@
 import io.supertokens.session.Session;
 import io.supertokens.session.accessToken.AccessTokenSigningKey;
 import io.supertokens.session.info.SessionInformationHolder;
+import io.supertokens.utils.Utils;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
 
@@ -72,7 +73,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
 
             result.addProperty("status", "OK");
-            result.addProperty("jwtSigningPublicKey", AccessTokenSigningKey.getInstance(main).getKey().publicKey);
+            result.addProperty("jwtSigningPublicKey",
+                    new Utils.PubPriKey(AccessTokenSigningKey.getInstance(main).getKey().value).publicKey);
             result.addProperty("jwtSigningPublicKeyExpiryTime",
                     AccessTokenSigningKey.getInstance(main).getKeyExpiryTime());
             super.sendJsonResponse(200, result, resp);

File: src/test/java/io/supertokens/test/EmailPasswordTest.java
Patch:
@@ -373,8 +373,6 @@ public void clashingPassowordResetToken() throws Exception {
         // we add a user first.
         User user = EmailPassword.signUp(process.getProcess(), "test1@example.com", "password");
 
-        System.out.println(user.id);
-
         StorageLayer.getEmailPasswordStorage(process.getProcess())
                 .addPasswordResetToken(new PasswordResetTokenInfo(
                         user.id, "token",

File: src/main/java/io/supertokens/authRecipe/UserPaginationToken.java
Patch:
@@ -14,7 +14,7 @@
  *    under the License.
  */
 
-package io.supertokens;
+package io.supertokens.authRecipe;
 
 import java.util.Base64;
 

File: src/main/java/io/supertokens/emailverification/EmailVerification.java
Patch:
@@ -33,8 +33,6 @@
 
 public class EmailVerification {
 
-    public static final String RECIPE_ID = "emailverification";
-
     public static final long EMAIL_VERIFICATION_TOKEN_LIFETIME_MS =
             24 * 3600 * 1000; // this is related to the interval for the cronjob: DeleteExpiredEmailVerificationTokens
 

File: src/main/java/io/supertokens/session/Session.java
Patch:
@@ -53,8 +53,6 @@
 
 public class Session {
 
-    public static final String RECIPE_ID = "session";
-
     @TestOnly
     public static SessionInformationHolder createNewSession(Main main, @Nonnull String userId,
                                                             @Nonnull JsonObject userDataInJWT,

File: src/main/java/io/supertokens/thirdparty/ThirdParty.java
Patch:
@@ -17,7 +17,7 @@
 package io.supertokens.thirdparty;
 
 import io.supertokens.Main;
-import io.supertokens.UserPaginationToken;
+import io.supertokens.authRecipe.UserPaginationToken;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.pluginInterface.thirdparty.UserInfo;
@@ -31,8 +31,6 @@
 
 public class ThirdParty {
 
-    public static final String RECIPE_ID = "thirdparty";
-
     public static class SignInUpResponse {
         public boolean createdNewUser;
         public UserInfo user;
@@ -135,6 +133,7 @@ public static UserInfo getUser(Main main, String thirdPartyId, String thirdParty
         return StorageLayer.getThirdPartyStorage(main).getThirdPartyUserInfoUsingId(thirdPartyId, thirdPartyUserId);
     }
 
+    @Deprecated
     public static UserPaginationContainer getUsers(Main main,
                                                    @Nullable String paginationToken,
                                                    Integer limit,
@@ -159,6 +158,7 @@ public static UserPaginationContainer getUsers(Main main,
         return new UserPaginationContainer(resultUsers, nextPaginationToken);
     }
 
+    @Deprecated
     public static long getUsersCount(Main main) throws StorageQueryException {
         return StorageLayer.getThirdPartyStorage(main).getThirdPartyUsersCount();
     }

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -39,10 +39,11 @@ public abstract class WebserverAPI extends HttpServlet {
 
     static {
         supportedVersions.add("2.7");
+        supportedVersions.add("2.8");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.7";
+        return "2.8";
     }
 
     public WebserverAPI(Main main, String rid) {

File: src/main/java/io/supertokens/webserver/api/emailpassword/GeneratePasswordResetTokenAPI.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.emailpassword.exceptions.UnknownUserIdException;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.webserver.InputParser;
@@ -36,7 +37,7 @@ public class GeneratePasswordResetTokenAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public GeneratePasswordResetTokenAPI(Main main) {
-        super(main, EmailPassword.RECIPE_ID);
+        super(main, RECIPE_ID.EMAIL_PASSWORD.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/ResetPasswordAPI.java
Patch:
@@ -20,6 +20,7 @@
 import io.supertokens.Main;
 import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.emailpassword.exceptions.ResetPasswordInvalidTokenException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.webserver.InputParser;
@@ -35,7 +36,7 @@ public class ResetPasswordAPI extends WebserverAPI {
     private static final long serialVersionUID = -7529428297450682549L;
 
     public ResetPasswordAPI(Main main) {
-        super(main, EmailPassword.RECIPE_ID);
+        super(main, RECIPE_ID.EMAIL_PASSWORD.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailverification/GenerateEmailVerificationTokenAPI.java
Patch:
@@ -20,6 +20,7 @@
 import io.supertokens.Main;
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.emailverification.exception.EmailAlreadyVerifiedException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
@@ -36,7 +37,7 @@ public class GenerateEmailVerificationTokenAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public GenerateEmailVerificationTokenAPI(Main main) {
-        super(main, EmailVerification.RECIPE_ID);
+        super(main, RECIPE_ID.EMAIL_VERIFICATION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailverification/VerifyEmailAPI.java
Patch:
@@ -21,6 +21,7 @@
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.emailverification.User;
 import io.supertokens.emailverification.exception.EmailVerificationInvalidTokenException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.webserver.InputParser;
@@ -36,7 +37,7 @@ public class VerifyEmailAPI extends WebserverAPI {
     private static final long serialVersionUID = -7529428297450682549L;
 
     public VerifyEmailAPI(Main main) {
-        super(main, EmailVerification.RECIPE_ID);
+        super(main, RECIPE_ID.EMAIL_VERIFICATION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/JWTDataAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.session.Session;
 import io.supertokens.webserver.InputParser;
@@ -34,7 +35,7 @@ public class JWTDataAPI extends WebserverAPI {
     private static final long serialVersionUID = -4989144736402314280L;
 
     public JWTDataAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/RefreshSessionAPI.java
Patch:
@@ -22,6 +22,7 @@
 import io.supertokens.Main;
 import io.supertokens.exceptions.TokenTheftDetectedException;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.session.Session;
@@ -38,7 +39,7 @@ public class RefreshSessionAPI extends WebserverAPI {
     private static final long serialVersionUID = 7142317017402226537L;
 
     public RefreshSessionAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.session.Session;
@@ -45,7 +46,7 @@ public class SessionAPI extends WebserverAPI {
     private static final long serialVersionUID = 7142317017402226537L;
 
     public SessionAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionDataAPI.java
Patch:
@@ -19,6 +19,7 @@
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.session.Session;
 import io.supertokens.webserver.InputParser;
@@ -33,7 +34,7 @@ public class SessionDataAPI extends WebserverAPI {
     private static final long serialVersionUID = -6901312482713647177L;
 
     public SessionDataAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionRegenerateAPI.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.session.Session;
@@ -42,7 +43,7 @@ public class SessionRegenerateAPI extends WebserverAPI {
     private static final long serialVersionUID = -6614427303762598143L;
 
     public SessionRegenerateAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionRemoveAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import io.supertokens.Main;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.session.Session;
 import io.supertokens.webserver.InputParser;
@@ -34,7 +35,7 @@ public class SessionRemoveAPI extends WebserverAPI {
     private static final long serialVersionUID = -2082970815993229316L;
 
     public SessionRemoveAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionUserAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import io.supertokens.Main;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.session.Session;
 import io.supertokens.webserver.InputParser;
@@ -35,7 +36,7 @@ public class SessionUserAPI extends WebserverAPI {
     private static final long serialVersionUID = 3488492313129193443L;
 
     public SessionUserAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/VerifySessionAPI.java
Patch:
@@ -22,6 +22,7 @@
 import io.supertokens.Main;
 import io.supertokens.exceptions.TryRefreshTokenException;
 import io.supertokens.exceptions.UnauthorisedException;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
 import io.supertokens.session.Session;
@@ -40,7 +41,7 @@ public class VerifySessionAPI extends WebserverAPI {
     private static final long serialVersionUID = -9169174805902835488L;
 
     public VerifySessionAPI(Main main) {
-        super(main, Session.RECIPE_ID);
+        super(main, RECIPE_ID.SESSION.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/thirdparty/SignInUpAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.thirdparty.ThirdParty;
 import io.supertokens.utils.Utils;
@@ -36,7 +37,7 @@ public class SignInUpAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public SignInUpAPI(Main main) {
-        super(main, ThirdParty.RECIPE_ID);
+        super(main, RECIPE_ID.THIRD_PARTY.toString());
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/thirdparty/UserAPI.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
+import io.supertokens.pluginInterface.RECIPE_ID;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.thirdparty.UserInfo;
 import io.supertokens.thirdparty.ThirdParty;
@@ -36,7 +37,7 @@ public class UserAPI extends WebserverAPI {
     private static final long serialVersionUID = -2225750492558064634L;
 
     public UserAPI(Main main) {
-        super(main, ThirdParty.RECIPE_ID);
+        super(main, RECIPE_ID.THIRD_PARTY.toString());
     }
 
     @Override

File: src/test/java/io/supertokens/test/DeleteExpiredEmailVerificationTokensCronjobTest.java
Patch:
@@ -20,9 +20,9 @@
 import io.supertokens.cronjobs.CronTaskTest;
 import io.supertokens.cronjobs.deleteExpiredEmailVerificationTokens.DeleteExpiredEmailVerificationTokens;
 import io.supertokens.emailpassword.EmailPassword;
-import io.supertokens.emailpassword.User;
 import io.supertokens.emailverification.EmailVerification;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
+import io.supertokens.pluginInterface.emailpassword.UserInfo;
 import io.supertokens.pluginInterface.emailverification.EmailVerificationTokenInfo;
 import io.supertokens.storageLayer.StorageLayer;
 import org.junit.AfterClass;
@@ -62,7 +62,7 @@ public void checkingCronJob() throws Exception {
             return;
         }
 
-        User user = EmailPassword.signUp(process.getProcess(), "test1@example.com", "password");
+        UserInfo user = EmailPassword.signUp(process.getProcess(), "test1@example.com", "password");
 
         String tok = EmailVerification.generateEmailVerificationToken(process.getProcess(), user.id, user.email);
         String tok2 = EmailVerification.generateEmailVerificationToken(process.getProcess(), user.id, user.email);

File: src/test/java/io/supertokens/test/DeleteExpiredPasswordResetTokensCronjobTest.java
Patch:
@@ -20,9 +20,9 @@
 import io.supertokens.cronjobs.CronTaskTest;
 import io.supertokens.cronjobs.deleteExpiredPasswordResetTokens.DeleteExpiredPasswordResetTokens;
 import io.supertokens.emailpassword.EmailPassword;
-import io.supertokens.emailpassword.User;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
 import io.supertokens.pluginInterface.emailpassword.PasswordResetTokenInfo;
+import io.supertokens.pluginInterface.emailpassword.UserInfo;
 import io.supertokens.storageLayer.StorageLayer;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -61,7 +61,7 @@ public void checkingCronJob() throws Exception {
             return;
         }
 
-        User user = EmailPassword.signUp(process.getProcess(), "test1@example.com", "password");
+        UserInfo user = EmailPassword.signUp(process.getProcess(), "test1@example.com", "password");
 
         String tok = EmailPassword.generatePasswordResetToken(process.getProcess(), user.id);
         String tok2 = EmailPassword.generatePasswordResetToken(process.getProcess(), user.id);

File: src/test/java/io/supertokens/test/EmailPasswordUsersCountAPITest2_7.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.gson.JsonObject;
 import io.supertokens.ProcessState;
-import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.pluginInterface.STORAGE_TYPE;
 import io.supertokens.storageLayer.StorageLayer;
 import org.junit.AfterClass;
@@ -61,7 +60,7 @@ public void testAPI() throws Exception {
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,
-                            null, Utils.getCdiVersion2_7ForTests(), EmailPassword.RECIPE_ID);
+                            null, Utils.getCdiVersion2_7ForTests(), "emailpassword");
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 0);
         }

File: src/test/java/io/supertokens/test/ThirdPartyUsersCountAPITest2_7.java
Patch:
@@ -68,7 +68,7 @@ public void testAPI() throws Exception {
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,
-                            null, Utils.getCdiVersion2_7ForTests(), ThirdParty.RECIPE_ID);
+                            null, Utils.getCdiVersion2_7ForTests(), "thirdparty");
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 0);
         }
@@ -89,7 +89,7 @@ public void testAPI() throws Exception {
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,
-                            null, Utils.getCdiVersion2_7ForTests(), ThirdParty.RECIPE_ID);
+                            null, Utils.getCdiVersion2_7ForTests(), "thirdparty");
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 5);
         }

File: src/main/java/io/supertokens/inmemorydb/queries/EmailVerificationQueries.java
Patch:
@@ -35,13 +35,13 @@ public class EmailVerificationQueries {
 
     static String getQueryToCreateEmailVerificationTable(Start start) {
         return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getEmailVerificationTable() + " ("
-                + "user_id CHAR(36) NOT NULL," + "email VARCHAR(256) NOT NULL,"
+                + "user_id VARCHAR(128) NOT NULL," + "email VARCHAR(256) NOT NULL,"
                 + "PRIMARY KEY (user_id, email));";
     }
 
     static String getQueryToCreateEmailVerificationTokensTable(Start start) {
         return "CREATE TABLE IF NOT EXISTS " + Config.getConfig(start).getEmailVerificationTokensTable() + " ("
-                + "user_id CHAR(36) NOT NULL," + "email VARCHAR(256) NOT NULL,"
+                + "user_id VARCHAR(128) NOT NULL," + "email VARCHAR(256) NOT NULL,"
                 + "token VARCHAR(128) NOT NULL UNIQUE,"
                 + "token_expiry BIGINT UNSIGNED NOT NULL," +
                 "PRIMARY KEY (user_id, email, token))";
@@ -200,7 +200,7 @@ public static boolean isEmailVerified(Start start, String userId,
             pst.setString(1, userId);
             pst.setString(2, email);
             ResultSet result = pst.executeQuery();
-            
+
             return result.next();
         }
     }

File: src/main/java/io/supertokens/session/Session.java
Patch:
@@ -93,15 +93,15 @@ public static SessionInformationHolder createNewSession(Main main, @Nonnull Stri
     }
 
     /*
-     * Quesiton: If the incoming access token is expired, do we throw try refresh token error and not update the db?
+     * Question: If the incoming access token is expired, do we throw try refresh token error and not update the db?
      * We should update in database, in SDK session object and not throw an error, nor set any cookie. This is
      * because, the user has already verified the session for this API. If it has expired, the refresh API will be
      * called, and the new JWT info will be set in the token then.
      *
-     * Quesiton: If the incoming session has been revoked, do we throw an unauthorised error?
+     * Question: If the incoming session has been revoked, do we throw an unauthorised error?
      * Yes. It's important that the user knows that this has happened.
      *
-     * Quesiton: If this regenerates session tokens, while another API revokes it, then how will that work?
+     * Question: If this regenerates session tokens, while another API revokes it, then how will that work?
      * This is OK since the other API will cause a clearing of idRefreshToken and this will not set that. This means
      * that next API call, only the access token will go and that will not pass. In fact, it will be removed.
      *

File: src/main/java/io/supertokens/inmemorydb/Start.java
Patch:
@@ -400,7 +400,7 @@ public void addPasswordResetToken(PasswordResetTokenInfo passwordResetTokenInfo)
             throws StorageQueryException, UnknownUserIdException, DuplicatePasswordResetTokenException {
         try {
             // SQLite is not compiled with foreign key constraint and so we must check for the userId manually
-            if (this.getThirdPartyUserInfoUsingId(passwordResetTokenInfo.userId) == null) {
+            if (this.getUserInfoUsingId(passwordResetTokenInfo.userId) == null) {
                 throw new UnknownUserIdException();
             }
 

File: src/test/java/io/supertokens/test/EmailPasswordTest.java
Patch:
@@ -373,6 +373,8 @@ public void clashingPassowordResetToken() throws Exception {
         // we add a user first.
         User user = EmailPassword.signUp(process.getProcess(), "test1@example.com", "password");
 
+        System.out.println(user.id);
+
         StorageLayer.getEmailPasswordStorage(process.getProcess())
                 .addPasswordResetToken(new PasswordResetTokenInfo(
                         user.id, "token",

File: src/test/java/io/supertokens/test/SignInUpAPITest2_7.java
Patch:
@@ -256,11 +256,11 @@ public static void checkSignInUpResponse(JsonObject response, String thirdPartyI
         JsonObject user = response.getAsJsonObject("user");
         assertNotNull(user.get("id"));
         assertNotNull(user.get("timeJoined"));
+        assertEquals(email, user.get("email").getAsString());
 
         JsonObject userThirdParty = user.getAsJsonObject("thirdParty");
-        assertEquals(3, userThirdParty.entrySet().size());
+        assertEquals(2, userThirdParty.entrySet().size());
         assertEquals(thirdPartyId, userThirdParty.get("id").getAsString());
         assertEquals(thirdPartyUserId, userThirdParty.get("userId").getAsString());
-        assertEquals(email, userThirdParty.get("email").getAsString());
     }
 }

File: src/test/java/io/supertokens/test/ThirdPartyGetUserAPITest2_7.java
Patch:
@@ -224,8 +224,8 @@ public void testAllTypesOfOutput() throws Exception {
     public static void checkUser(JsonObject user, String thirdPartyId, String thirdPartyUserId, String email) {
         assertNotNull(user.get("id"));
         assertNotNull(user.get("timeJoined"));
+        assertEquals(user.get("email").getAsString(), email);
         assertEquals(user.getAsJsonObject("thirdParty").get("userId").getAsString(), thirdPartyUserId);
         assertEquals(user.getAsJsonObject("thirdParty").get("id").getAsString(), thirdPartyId);
-        assertEquals(user.getAsJsonObject("thirdParty").get("email").getAsString(), email);
     }
 }

File: src/main/java/io/supertokens/webserver/api/thirdparty/SignInUpAPI.java
Patch:
@@ -50,7 +50,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         String thirdPartyId = InputParser.parseStringOrThrowError(input, "thirdPartyId", false);
         String thirdPartyUserId = InputParser.parseStringOrThrowError(input, "thirdPartyUserId", false);
         JsonObject emailObject = InputParser.parseJsonObjectOrThrowError(input, "email", false);
-        String email = InputParser.parseStringOrThrowError(emailObject, "email", false);
+        String email = InputParser.parseStringOrThrowError(emailObject, "id", false);
         Boolean isEmailVerified = InputParser.parseBooleanOrThrowError(emailObject, "isVerified", false);
 
         assert thirdPartyId != null;

File: src/main/java/io/supertokens/cronjobs/telemetry/Telemetry.java
Patch:
@@ -33,7 +33,7 @@
 
 public class Telemetry extends CronTask {
 
-    private static final String TELEMETRY_ID_DB_KEY = "TELEMETRY_ID";
+    public static final String TELEMETRY_ID_DB_KEY = "TELEMETRY_ID";
 
     public static final String REQUEST_ID = "telemetry";
 

File: src/main/java/io/supertokens/emailverification/EmailVerification.java
Patch:
@@ -33,6 +33,8 @@
 
 public class EmailVerification {
 
+    public static final String RECIPE_ID = "emailverification";
+
     public static final long EMAIL_VERIFICATION_TOKEN_LIFETIME_MS =
             24 * 3600 * 1000; // this is related to the interval for the cronjob: DeleteExpiredEmailVerificationTokens
 

File: src/main/java/io/supertokens/webserver/api/core/ConfigAPI.java
Patch:
@@ -32,7 +32,7 @@ public class ConfigAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public ConfigAPI(Main main) {
-        super(main);
+        super(main, "");
     }
 
     @Override
@@ -41,7 +41,7 @@ public String getPath() {
     }
 
     @Override
-    protected boolean checkAPIKey() {
+    protected boolean checkAPIKey(HttpServletRequest req) {
         return false;
     }
 

File: src/main/java/io/supertokens/webserver/api/core/HelloAPI.java
Patch:
@@ -34,11 +34,11 @@ public class HelloAPI extends WebserverAPI {
     private static final long serialVersionUID = 1L;
 
     public HelloAPI(Main main) {
-        super(main);
+        super(main, "");
     }
 
     @Override
-    protected boolean versionNeeded() {
+    protected boolean versionNeeded(HttpServletRequest req) {
         return false;
     }
 
@@ -48,7 +48,7 @@ public String getPath() {
     }
 
     @Override
-    protected boolean checkAPIKey() {
+    protected boolean checkAPIKey(HttpServletRequest req) {
         return false;
     }
 

File: src/main/java/io/supertokens/webserver/api/core/NotFoundAPI.java
Patch:
@@ -29,7 +29,7 @@ public class NotFoundAPI extends WebserverAPI {
     private static final long serialVersionUID = 1L;
 
     public NotFoundAPI(Main main) {
-        super(main);
+        super(main, "");
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/GeneratePasswordResetTokenAPI.java
Patch:
@@ -36,7 +36,7 @@ public class GeneratePasswordResetTokenAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public GeneratePasswordResetTokenAPI(Main main) {
-        super(main);
+        super(main, EmailPassword.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/ResetPasswordAPI.java
Patch:
@@ -35,7 +35,7 @@ public class ResetPasswordAPI extends WebserverAPI {
     private static final long serialVersionUID = -7529428297450682549L;
 
     public ResetPasswordAPI(Main main) {
-        super(main);
+        super(main, EmailPassword.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignInAPI.java
Patch:
@@ -38,7 +38,7 @@ public class SignInAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public SignInAPI(Main main) {
-        super(main);
+        super(main, EmailPassword.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/SignUpAPI.java
Patch:
@@ -38,7 +38,7 @@ public class SignUpAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public SignUpAPI(Main main) {
-        super(main);
+        super(main, EmailPassword.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/UserAPI.java
Patch:
@@ -37,7 +37,7 @@ public class UserAPI extends WebserverAPI {
     private static final long serialVersionUID = -2225750492558064634L;
 
     public UserAPI(Main main) {
-        super(main);
+        super(main, EmailPassword.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailpassword/UsersAPI.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
+import io.supertokens.UserPaginationToken;
 import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.emailpassword.UserPaginationContainer;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
@@ -31,14 +32,13 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.util.Base64;
 
 public class UsersAPI extends WebserverAPI {
 
     private static final long serialVersionUID = -2225750492558064634L;
 
     public UsersAPI(Main main) {
-        super(main);
+        super(main, EmailPassword.RECIPE_ID);
     }
 
     @Override
@@ -97,7 +97,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
                 result.addProperty("nextPaginationToken", users.nextPaginationToken);
             }
             super.sendJsonResponse(200, result, resp);
-        } catch (IllegalArgumentException | IllegalStateException e) {
+        } catch (UserPaginationToken.InvalidTokenException e) {
             throw new ServletException(
                     new WebserverAPI.BadRequestException("invalid pagination token"));
         } catch (StorageQueryException e) {

File: src/main/java/io/supertokens/webserver/api/emailverification/GenerateEmailVerificationTokenAPI.java
Patch:
@@ -36,7 +36,7 @@ public class GenerateEmailVerificationTokenAPI extends WebserverAPI {
     private static final long serialVersionUID = -4641988458637882374L;
 
     public GenerateEmailVerificationTokenAPI(Main main) {
-        super(main);
+        super(main, EmailVerification.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/emailverification/VerifyEmailAPI.java
Patch:
@@ -36,7 +36,7 @@ public class VerifyEmailAPI extends WebserverAPI {
     private static final long serialVersionUID = -7529428297450682549L;
 
     public VerifyEmailAPI(Main main) {
-        super(main);
+        super(main, EmailVerification.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/HandshakeAPI.java
Patch:
@@ -21,6 +21,7 @@
 import io.supertokens.config.Config;
 import io.supertokens.pluginInterface.exceptions.StorageQueryException;
 import io.supertokens.pluginInterface.exceptions.StorageTransactionLogicException;
+import io.supertokens.session.Session;
 import io.supertokens.session.accessToken.AccessTokenSigningKey;
 import io.supertokens.webserver.InputParser;
 import io.supertokens.webserver.WebserverAPI;
@@ -34,7 +35,7 @@ public class HandshakeAPI extends WebserverAPI {
     private static final long serialVersionUID = -3647598432179106404L;
 
     public HandshakeAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/JWTDataAPI.java
Patch:
@@ -34,7 +34,7 @@ public class JWTDataAPI extends WebserverAPI {
     private static final long serialVersionUID = -4989144736402314280L;
 
     public JWTDataAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/RefreshSessionAPI.java
Patch:
@@ -38,7 +38,7 @@ public class RefreshSessionAPI extends WebserverAPI {
     private static final long serialVersionUID = 7142317017402226537L;
 
     public RefreshSessionAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionAPI.java
Patch:
@@ -45,7 +45,7 @@ public class SessionAPI extends WebserverAPI {
     private static final long serialVersionUID = 7142317017402226537L;
 
     public SessionAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionDataAPI.java
Patch:
@@ -33,7 +33,7 @@ public class SessionDataAPI extends WebserverAPI {
     private static final long serialVersionUID = -6901312482713647177L;
 
     public SessionDataAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionRegenerateAPI.java
Patch:
@@ -42,7 +42,7 @@ public class SessionRegenerateAPI extends WebserverAPI {
     private static final long serialVersionUID = -6614427303762598143L;
 
     public SessionRegenerateAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionRemoveAPI.java
Patch:
@@ -34,7 +34,7 @@ public class SessionRemoveAPI extends WebserverAPI {
     private static final long serialVersionUID = -2082970815993229316L;
 
     public SessionRemoveAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/SessionUserAPI.java
Patch:
@@ -35,7 +35,7 @@ public class SessionUserAPI extends WebserverAPI {
     private static final long serialVersionUID = 3488492313129193443L;
 
     public SessionUserAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/session/VerifySessionAPI.java
Patch:
@@ -40,7 +40,7 @@ public class VerifySessionAPI extends WebserverAPI {
     private static final long serialVersionUID = -9169174805902835488L;
 
     public VerifySessionAPI(Main main) {
-        super(main);
+        super(main, Session.RECIPE_ID);
     }
 
     @Override

File: src/test/java/io/supertokens/test/Utils.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.google.gson.JsonObject;
 import io.supertokens.Main;
+import io.supertokens.emailpassword.EmailPassword;
 import io.supertokens.pluginInterface.PluginInterfaceTesting;
 import io.supertokens.test.httpRequest.HttpResponseException;
 import io.supertokens.webserver.WebserverAPI;
@@ -157,7 +158,7 @@ public static JsonObject signUpRequest_2_4(TestingProcessManager.TestingProcess
                 .sendJsonPOSTRequest(process.getProcess(), "",
                         "http://localhost:3567/recipe/signup", signUpRequestBody, 1000,
                         1000,
-                        null, getCdiVersion2_7ForTests());
+                        null, getCdiVersion2_7ForTests(), EmailPassword.RECIPE_ID);
     }
 
     public static JsonObject signUpRequest_2_5(TestingProcessManager.TestingProcess process, String email,
@@ -172,7 +173,7 @@ public static JsonObject signUpRequest_2_5(TestingProcessManager.TestingProcess
                 .sendJsonPOSTRequest(process.getProcess(), "",
                         "http://localhost:3567/recipe/signup", signUpRequestBody, 1000,
                         1000,
-                        null, getCdiVersion2_7ForTests());
+                        null, getCdiVersion2_7ForTests(), EmailPassword.RECIPE_ID);
     }
 
 }

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -37,12 +37,11 @@ public abstract class WebserverAPI extends HttpServlet {
     public static final Set<String> supportedVersions = new HashSet<>();
 
     static {
-        supportedVersions.add("2.4");
-        supportedVersions.add("2.5");
+        supportedVersions.add("2.6");
     }
 
     public static String getLatestCDIVersion() {
-        return "2.5";
+        return "2.6";
     }
 
     public WebserverAPI(Main main) {

File: src/main/java/io/supertokens/webserver/api/session/HandshakeAPI.java
Patch:
@@ -51,7 +51,6 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
             result.addProperty("jwtSigningPublicKey", AccessTokenSigningKey.getInstance(main).getKey().publicKey);
             result.addProperty("jwtSigningPublicKeyExpiryTime",
                     AccessTokenSigningKey.getInstance(main).getKeyExpiryTime());
-            result.addProperty("enableAntiCsrf", Config.getConfig(main).getEnableAntiCSRF());
             result.addProperty("accessTokenBlacklistingEnabled", Config.getConfig(main).getAccessTokenBlacklisting());
             result.addProperty("accessTokenValidity", Config.getConfig(main).getAccessTokenValidity());
             result.addProperty("refreshTokenValidity", Config.getConfig(main).getRefreshTokenValidity());

File: src/main/java/io/supertokens/webserver/api/session/RefreshSessionAPI.java
Patch:
@@ -51,11 +51,13 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
         String refreshToken = InputParser.parseStringOrThrowError(input, "refreshToken", false);
         String antiCsrfToken = InputParser.parseStringOrThrowError(input, "antiCsrfToken", true);
+        Boolean enableAntiCsrf = InputParser.parseBooleanOrThrowError(input, "enableAntiCsrf", false);
+        assert enableAntiCsrf != null;
         assert refreshToken != null;
 
         try {
             SessionInformationHolder sessionInfo = Session
-                    .refreshSession(main, refreshToken, antiCsrfToken);
+                    .refreshSession(main, refreshToken, antiCsrfToken, enableAntiCsrf);
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
             result.addProperty("status", "OK");
             super.sendJsonResponse(200, result, resp);

File: src/main/java/io/supertokens/webserver/api/session/SessionAPI.java
Patch:
@@ -58,14 +58,16 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         JsonObject input = InputParser.parseJsonObjectOrThrowError(req);
         String userId = InputParser.parseStringOrThrowError(input, "userId", false);
         assert userId != null;
+        Boolean enableAntiCsrf = InputParser.parseBooleanOrThrowError(input, "enableAntiCsrf", false);
+        assert enableAntiCsrf != null;
         JsonObject userDataInJWT = InputParser.parseJsonObjectOrThrowError(input, "userDataInJWT", false);
         assert userDataInJWT != null;
         JsonObject userDataInDatabase = InputParser.parseJsonObjectOrThrowError(input, "userDataInDatabase", false);
         assert userDataInDatabase != null;
 
         try {
             SessionInformationHolder sessionInfo = Session
-                    .createNewSession(main, userId, userDataInJWT, userDataInDatabase);
+                    .createNewSession(main, userId, userDataInJWT, userDataInDatabase, enableAntiCsrf);
 
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
 

File: src/main/java/io/supertokens/webserver/api/session/VerifySessionAPI.java
Patch:
@@ -56,10 +56,12 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         String antiCsrfToken = InputParser.parseStringOrThrowError(input, "antiCsrfToken", true);
         Boolean doAntiCsrfCheck = InputParser.parseBooleanOrThrowError(input, "doAntiCsrfCheck", false);
         assert doAntiCsrfCheck != null;
+        Boolean enableAntiCsrf = InputParser.parseBooleanOrThrowError(input, "enableAntiCsrf", false);
+        assert enableAntiCsrf != null;
 
         try {
             SessionInformationHolder sessionInfo = Session
-                    .getSession(main, accessToken, antiCsrfToken, doAntiCsrfCheck);
+                    .getSession(main, accessToken, antiCsrfToken, enableAntiCsrf, doAntiCsrfCheck);
 
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
             result.addProperty("status", "OK");

File: src/test/java/io/supertokens/test/APIKeysTest.java
Patch:
@@ -160,6 +160,7 @@ public void testCreatingSessionWithAndWithoutAPIKey() throws Exception {
         request.addProperty("userId", userId);
         request.add("userDataInJWT", userDataInJWT);
         request.add("userDataInDatabase", userDataInDatabase);
+        request.addProperty("enableAntiCsrf", false);
 
         try {
             HttpRequest
@@ -255,6 +256,7 @@ public void testSettingMultipleAPIKeys() throws Exception {
         request.addProperty("userId", userId);
         request.add("userDataInJWT", userDataInJWT);
         request.add("userDataInDatabase", userDataInDatabase);
+        request.addProperty("enableAntiCsrf", false);
 
         // check that any one of the keys can be used
         JsonObject sessionInfo = HttpRequest
@@ -337,6 +339,7 @@ public void testSettingMultipleAPIKeysWithSpacing() throws Exception {
         request.addProperty("userId", userId);
         request.add("userDataInJWT", userDataInJWT);
         request.add("userDataInDatabase", userDataInDatabase);
+        request.addProperty("enableAntiCsrf", false);
 
         // check that any one of the keys can be used
         JsonObject sessionInfo = HttpRequest

File: src/test/java/io/supertokens/test/ConfigTest2_6.java
Patch:
@@ -34,7 +34,7 @@
 import static junit.framework.TestCase.assertFalse;
 import static org.junit.Assert.*;
 
-public class ConfigTest {
+public class ConfigTest2_6 {
 
     @Rule
     public TestRule watchman = Utils.getOnFailure();
@@ -222,7 +222,6 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process,
         assertEquals("Config access token validity did not match default", config.getAccessTokenValidity(),
                 3600 * 1000);
         assertFalse("Config access token blacklisting did not match default", config.getAccessTokenBlacklisting());
-        assertFalse("Config enable anti CSRF did not match default", config.getEnableAntiCSRF());
         assertEquals("Config refresh token validity did not match default", config.getRefreshTokenValidity(),
                 60 * 2400 * 60 * (long) 1000);
         assertEquals("Config info log path did not match default", config.getInfoLogPath(process.getProcess()),

File: src/test/java/io/supertokens/test/StorageTest.java
Patch:
@@ -654,6 +654,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
         request.addProperty("userId", userId);
         request.add("userDataInJWT", userDataInJWT);
         request.add("userDataInDatabase", userDataInDatabase);
+        request.addProperty("enableAntiCsrf", false);
 
 
         TestingProcessManager.TestingProcess process = TestingProcessManager.start(args);
@@ -684,6 +685,7 @@ public void storageDeadAndAlive() throws InterruptedException, IOException, Http
         JsonObject jsonBody = new JsonObject();
         jsonBody.addProperty("refreshToken",
                 sessionCreated.get("refreshToken").getAsJsonObject().get("token").getAsString());
+        jsonBody.addProperty("enableAntiCsrf", false);
 
         storage.setStorageLayerEnabled(false);
 

File: src/test/java/io/supertokens/test/UsersCountAPITest2_6.java
Patch:
@@ -37,7 +37,7 @@
  *  - add users and check if the number of users returned by the API is correct
  * */
 
-public class UsersCountAPITest2_5 {
+public class UsersCountAPITest2_6 {
 
     @Rule
     public TestRule watchman = Utils.getOnFailure();
@@ -67,7 +67,7 @@ public void testAPI() throws Exception {
                     .sendGETRequest(process.getProcess(), "",
                             "http://localhost:3567/recipe/users/count", null, 1000,
                             1000,
-                            null, Utils.getCdiVersion2_4ForTests());
+                            null, Utils.getCdiVersion2_6ForTests());
             assertEquals(response.get("status").getAsString(), "OK");
             assertEquals(response.get("count").getAsLong(), 0);
         }

File: src/test/java/io/supertokens/test/EmailPasswordTest.java
Patch:
@@ -115,7 +115,7 @@ public void testTheNormaliseEmailFunction() throws Exception {
 
 
         normaliseEmail = io.supertokens.utils.Utils.normaliseEmail("RaNdOm@random.com");
-        assertEquals(normaliseEmail, "RaNdOm@random.com");
+        assertEquals(normaliseEmail, "random@random.com");
 
         process.kill();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));

File: src/main/java/io/supertokens/webserver/api/emailpassword/UsersAPI.java
Patch:
@@ -17,6 +17,7 @@
 package io.supertokens.webserver.api.emailpassword;
 
 import com.google.gson.Gson;
+import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import io.supertokens.Main;
@@ -90,7 +91,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             UserPaginationContainer users = EmailPassword.getUsers(super.main, paginationToken, limit, timeJoinedOrder);
             JsonObject result = new JsonObject();
             result.addProperty("status", "OK");
-            JsonObject usersJson = new JsonParser().parse(new Gson().toJson(users.users)).getAsJsonObject();
+            JsonArray usersJson = new JsonParser().parse(new Gson().toJson(users.users)).getAsJsonArray();
             result.add("users", usersJson);
             if (users.nextPaginationToken != null) {
                 result.addProperty("nextPaginationToken", users.nextPaginationToken);

File: src/test/java/io/supertokens/test/IsEmailVerifiedAPITest2_5.java
Patch:
@@ -148,7 +148,7 @@ public void testGoodInput() throws Exception {
         assertEquals(response2.entrySet().size(), 2);
         assertEquals(response2.get("status").getAsString(), "OK");
 
-        assertEquals(response2.get("user").getAsJsonObject().entrySet().size(), 2);
+        assertEquals(response2.get("user").getAsJsonObject().entrySet().size(), 3);
         assertEquals(response2.get("user").getAsJsonObject().get("id").getAsString(), userId);
         assertEquals(response2.get("user").getAsJsonObject().get("email").getAsString(), "random@gmail.com");
 

File: src/test/java/io/supertokens/test/VerifyEmailAPITest2_5.java
Patch:
@@ -152,7 +152,7 @@ public void testGoodInput() throws Exception {
         assertEquals(response2.entrySet().size(), 2);
         assertEquals(response2.get("status").getAsString(), "OK");
 
-        assertEquals(response2.get("user").getAsJsonObject().entrySet().size(), 2);
+        assertEquals(response2.get("user").getAsJsonObject().entrySet().size(), 3);
         assertEquals(response2.get("user").getAsJsonObject().get("id").getAsString(), userId);
         assertEquals(response2.get("user").getAsJsonObject().get("email").getAsString(), "random@gmail.com");
 

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -151,6 +151,8 @@ private void setupRoutes() {
         addAPI(new UserAPI(main));
         addAPI(new GenerateEmailVerificationTokenAPI(main));
         addAPI(new VerifyEmailAPI(main));
+        addAPI(new UsersAPI(main));
+        addAPI(new UsersCountAPI(main));
     }
 
     public void addAPI(WebserverAPI api) {

File: src/test/java/io/supertokens/test/GeneratePasswordResetTokenAPITest2_4.java
Patch:
@@ -121,7 +121,7 @@ public void testGoodInput() throws Exception {
             return;
         }
 
-        JsonObject signUpResponse = Utils.signUpRequest(process, "random@gmail.com", "validPass123");
+        JsonObject signUpResponse = Utils.signUpRequest_2_4(process, "random@gmail.com", "validPass123");
         assertEquals(signUpResponse.get("status").getAsString(), "OK");
         assertEquals(signUpResponse.entrySet().size(), 2);
         String userId = signUpResponse.getAsJsonObject("user").get("id").getAsString();

File: src/test/java/io/supertokens/test/ResetPasswordAPITest2_4.java
Patch:
@@ -171,7 +171,7 @@ public void testGoodInput() throws Exception {
             return;
         }
 
-        JsonObject signUpResponse = Utils.signUpRequest(process, "random@gmail.com", "validPass123");
+        JsonObject signUpResponse = Utils.signUpRequest_2_4(process, "random@gmail.com", "validPass123");
         assertEquals(signUpResponse.get("status").getAsString(), "OK");
         assertEquals(signUpResponse.entrySet().size(), 2);
 

File: src/main/java/io/supertokens/emailpassword/EmailPassword.java
Patch:
@@ -182,15 +182,15 @@ public static void resetPassword(Main main, String token, String password)
         }
     }
 
-    public static User getUserUsingUsingId(Main main, String userId) throws StorageQueryException {
+    public static User getUserUsingId(Main main, String userId) throws StorageQueryException {
         UserInfo info = StorageLayer.getEmailPasswordStorage(main).getUserInfoUsingId(userId);
         if (info == null) {
             return null;
         }
         return new User(info.id, info.email);
     }
 
-    public static User getUserUsingUsingEmail(Main main, String email) throws StorageQueryException {
+    public static User getUserUsingEmail(Main main, String email) throws StorageQueryException {
         UserInfo info = StorageLayer.getEmailPasswordStorage(main).getUserInfoUsingEmail(email);
         if (info == null) {
             return null;

File: src/main/java/io/supertokens/webserver/api/emailpassword/UserAPI.java
Patch:
@@ -63,10 +63,10 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
         try {
             User user = null;
             if (userId != null) {
-                user = EmailPassword.getUserUsingUsingId(main, userId);
+                user = EmailPassword.getUserUsingId(main, userId);
             } else {
                 String normalisedEmail = Utils.normaliseEmail(email);
-                user = EmailPassword.getUserUsingUsingEmail(main, normalisedEmail);
+                user = EmailPassword.getUserUsingEmail(main, normalisedEmail);
             }
 
             if (user == null) {

File: src/main/java/io/supertokens/Main.java
Patch:
@@ -169,7 +169,7 @@ private void init() throws IOException {
                 }
             }
         }
-        StorageLayer.getStorageLayer(this).initStorage();
+        StorageLayer.getStorage(this).initStorage();
 
         // init signing keys
         AccessTokenSigningKey.init(this);
@@ -272,7 +272,7 @@ public ResourceDistributor getResourceDistributor() {
     public void deleteAllInformationForTesting() throws Exception {
         assertIsTesting();
         try {
-            StorageLayer.getStorageLayer(this).deleteAllInformation();
+            StorageLayer.getStorage(this).deleteAllInformation();
         } catch (StorageQueryException e) {
             throw new Exception(e);
         }
@@ -291,7 +291,7 @@ private void stopApp() {
         try {
             Webserver.getInstance(this).stop();
             Cronjobs.shutdownAndAwaitTermination(this);
-            StorageLayer.getStorageLayer(this).close();
+            StorageLayer.getStorage(this).close();
             if (this.shutdownHook != null) {
                 try {
                     Runtime.getRuntime().removeShutdownHook(this.shutdownHook);

File: src/main/java/io/supertokens/cronjobs/deleteExpiredPasswordResetTokens/DeleteExpiredPasswordResetTokens.java
Patch:
@@ -43,10 +43,10 @@ public static DeleteExpiredPasswordResetTokens getInstance(Main main) {
 
     @Override
     protected void doTask() throws Exception {
-        if (StorageLayer.getStorageLayer(this.main).getType() != STORAGE_TYPE.SQL) {
+        if (StorageLayer.getStorage(this.main).getType() != STORAGE_TYPE.SQL) {
             return;
         }
-        StorageLayer.getEmailPasswordStorageLayer(this.main)
+        StorageLayer.getEmailPasswordStorage(this.main)
                 .deleteExpiredPasswordResetTokens();
     }
 

File: src/main/java/io/supertokens/cronjobs/deleteExpiredSessions/DeleteExpiredSessions.java
Patch:
@@ -40,7 +40,7 @@ public static DeleteExpiredSessions getInstance(Main main) {
 
     @Override
     protected void doTask() throws Exception {
-        StorageLayer.getSessionStorageLayer(this.main).deleteAllExpiredSessions();
+        StorageLayer.getSessionStorage(this.main).deleteAllExpiredSessions();
     }
 
     @Override

File: src/main/java/io/supertokens/cronjobs/telemetry/Telemetry.java
Patch:
@@ -55,15 +55,15 @@ public static Telemetry getInstance(Main main) {
     protected void doTask() throws Exception {
         String plugin = Version.getVersion(main).getPluginName();
 
-        if (plugin.equals("sqlite") || Config.getConfig(main).isTelemetryDisabled()) {
+        if (StorageLayer.getInstance(main).isInMemDb() || Config.getConfig(main).isTelemetryDisabled()) {
             // we do not send any info in this case since it's not under development / production env or the user has
             // disabled Telemetry
             return;
         }
 
         ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.SENDING_TELEMETRY, null);
 
-        Storage storage = StorageLayer.getStorageLayer(main);
+        Storage storage = StorageLayer.getStorage(main);
 
         KeyValueInfo telemetryId = storage.getKeyValue(TELEMETRY_ID_DB_KEY);
 

File: src/main/java/io/supertokens/output/Logging.java
Patch:
@@ -45,7 +45,7 @@ private Logging(Main main) {
                 createLoggerForConsole(main, "io.supertokens.Error." + main.getProcessId()) :
                 createLoggerForFile(main, Config.getConfig(main).getErrorLogPath(main),
                         "io.supertokens.Error." + main.getProcessId());
-        Storage storage = StorageLayer.getStorageLayer(main);
+        Storage storage = StorageLayer.getStorage(main);
         if (storage != null) {
             storage.initFileLogging(Config.getConfig(main).getInfoLogPath(main),
                     Config.getConfig(main).getErrorLogPath(main));
@@ -66,7 +66,7 @@ private static Logging getInstance(Main main) {
     public static void initFileLogging(Main main) {
         if (getInstance(main) == null) {
             main.getResourceDistributor().setResource(RESOURCE_ID, new Logging(main));
-            StorageLayer.getStorageLayer(main).initFileLogging(Config.getConfig(main).getInfoLogPath(main),
+            StorageLayer.getStorage(main).initFileLogging(Config.getConfig(main).getInfoLogPath(main),
                     Config.getConfig(main).getErrorLogPath(main));
         }
     }
@@ -154,7 +154,7 @@ public static void stopLogging(Main main) {
         getInstance(main).infoLogger.detachAndStopAllAppenders();
         getInstance(main).errorLogger.detachAndStopAllAppenders();
         Webserver.getInstance(main).closeLogger();
-        Storage storage = StorageLayer.getStorageLayer(main);
+        Storage storage = StorageLayer.getStorage(main);
         if (storage != null) {
             storage.stopLogging();
         }

File: src/main/java/io/supertokens/session/accessToken/AccessTokenSigningKey.java
Patch:
@@ -93,7 +93,7 @@ public long getKeyExpiryTime() throws StorageQueryException, StorageTransactionL
     }
 
     private KeyInfo maybeGenerateNewKeyAndUpdateInDb() throws StorageQueryException, StorageTransactionLogicException {
-        Storage storage = StorageLayer.getSessionStorageLayer(main);
+        Storage storage = StorageLayer.getSessionStorage(main);
         CoreConfig config = Config.getConfig(main);
 
         if (storage.getType() == STORAGE_TYPE.SQL) {

File: src/main/java/io/supertokens/session/refreshToken/RefreshTokenKey.java
Patch:
@@ -74,7 +74,7 @@ public String getKey() throws StorageQueryException, StorageTransactionLogicExce
     }
 
     private String maybeGenerateNewKeyAndUpdateInDb() throws StorageQueryException, StorageTransactionLogicException {
-        SessionStorage storage = StorageLayer.getSessionStorageLayer(main);
+        SessionStorage storage = StorageLayer.getSessionStorage(main);
 
         if (storage.getType() == STORAGE_TYPE.SQL) {
 

File: src/test/java/io/supertokens/test/DeleteExpiredPasswordResetTokensCronjobTest.java
Patch:
@@ -57,7 +57,7 @@ public void checkingCronJob() throws Exception {
         );
         process.startProcess();
         assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
-        if (StorageLayer.getStorageLayer(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
+        if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
             return;
         }
 
@@ -72,13 +72,13 @@ public void checkingCronJob() throws Exception {
         EmailPassword.generatePasswordResetToken(process.getProcess(), user.id);
         EmailPassword.generatePasswordResetToken(process.getProcess(), user.id);
 
-        assert (StorageLayer.getEmailPasswordStorageLayer(process.getProcess())
+        assert (StorageLayer.getEmailPasswordStorage(process.getProcess())
                 .getAllPasswordResetTokenInfoForUser(user.id).length == 4);
 
 
         Thread.sleep(3000);
 
-        PasswordResetTokenInfo[] tokens = StorageLayer.getEmailPasswordStorageLayer(process.getProcess())
+        PasswordResetTokenInfo[] tokens = StorageLayer.getEmailPasswordStorage(process.getProcess())
                 .getAllPasswordResetTokenInfoForUser(user.id);
 
         assert (tokens.length == 2);

File: src/test/java/io/supertokens/test/SessionTest2.java
Patch:
@@ -222,10 +222,10 @@ public void revokeSessionWithoutBlacklisting()
         Session.createNewSession(process.getProcess(), userId, userDataInJWT,
                 userDataInDatabase);
 
-        assertEquals(StorageLayer.getSessionStorageLayer(process.getProcess()).getNumberOfSessions(), 2);
+        assertEquals(StorageLayer.getSessionStorage(process.getProcess()).getNumberOfSessions(), 2);
 
         Session.revokeSessionUsingSessionHandles(process.getProcess(), new String[]{sessionInfo.session.handle});
-        assertEquals(StorageLayer.getSessionStorageLayer(process.getProcess()).getNumberOfSessions(), 1);
+        assertEquals(StorageLayer.getSessionStorage(process.getProcess()).getNumberOfSessions(), 1);
 
         try {
             Session.refreshSession(process.getProcess(), sessionInfo.refreshToken.token, sessionInfo.antiCsrfToken);

File: src/main/java/io/supertokens/ProcessState.java
Patch:
@@ -69,12 +69,13 @@ public synchronized void clear() {
      * GET_SESSION_NEW_TOKENS: When new tokens are being issued in get session
      * DEADLOCK_FOUND: For SQLite transactions
      * CREATING_NEW_TABLE: For SQLite
+     * SENDING_TELEMETRY, SENT_TELEMETRY: For Telemetry
      */
     public enum PROCESS_STATE {
         INIT, INIT_FAILURE, STARTED, SHUTTING_DOWN, STOPPED,
         RETRYING_ACCESS_TOKEN_JWT_VERIFICATION, CRON_TASK_ERROR_LOGGING,
         WAITING_TO_INIT_STORAGE_MODULE, GET_SESSION_NEW_TOKENS, DEADLOCK_FOUND,
-        CREATING_NEW_TABLE
+        CREATING_NEW_TABLE, SENDING_TELEMETRY, SENT_TELEMETRY
     }
 
     public static class EventAndException {

File: src/main/java/io/supertokens/httpRequest/HttpRequestMocking.java
Patch:
@@ -46,7 +46,7 @@ public void setMockURL(String key, URLGetter urlGetter) {
         urlMap.put(key, urlGetter);
     }
 
-    URL getMockURL(String key, String url) throws MalformedURLException {
+    public URL getMockURL(String key, String url) throws MalformedURLException {
         URLGetter urlGetter = urlMap.get(key);
         if (urlGetter != null) {
             return urlGetter.getUrl(url);

File: src/test/java/io/supertokens/test/ConfigTest.java
Patch:
@@ -235,6 +235,7 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process)
         assertNull(config.getAPIKeys());
         assertEquals(10, config.getMaxThreadPoolSize());
         assertFalse(config.getHttpsEnabled());
+        assertFalse(config.isTelemetryDisabled());
 
     }
 

File: src/main/java/io/supertokens/webserver/api/emailpassword/UserAPI.java
Patch:
@@ -47,7 +47,7 @@ public String getPath() {
 
     @Override
     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
-        String userId = InputParser.getQueryParamOrThrowError(req, "sessionHandle", true);
+        String userId = InputParser.getQueryParamOrThrowError(req, "userId", true);
         String email = InputParser.getQueryParamOrThrowError(req, "email", true);
 
         // logic according to https://github.com/supertokens/supertokens-core/issues/111

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -142,6 +142,8 @@ private void setupRoutes() {
         addAPI(new JWTDataAPI(main));
         addAPI(new SignUpAPI(main));
         addAPI(new SignInAPI(main));
+        addAPI(new GeneratePasswordResetTokenAPI(main));
+        addAPI(new ResetPasswordAPI(main));
     }
 
     public void addAPI(WebserverAPI api) {

File: src/main/java/io/supertokens/webserver/api/SignInAPI.java
Patch:
@@ -68,7 +68,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         } catch (WrongCredentialsException e) {
             JsonObject result = new JsonObject();
-            result.addProperty("status", "WRONG_CREDENTIAL_ERROR");
+            result.addProperty("status", "WRONG_CREDENTIALS_ERROR");
             super.sendJsonResponse(200, result, resp);
         } catch (StorageQueryException e) {
             throw new ServletException(e);

File: src/main/java/io/supertokens/inmemorydb/ConnectionPool.java
Patch:
@@ -40,6 +40,9 @@ static void initPool(Start start) throws SQLException {
     }
 
     public static Connection getConnection(Start start) throws SQLException {
+        if (!start.enabled) {
+            throw new SQLException("Storage layer disabled");
+        }
         return new ConnectionWithLocks(DriverManager.getConnection(URL), ConnectionPool.getInstance(start));
     }
 

File: src/main/java/io/supertokens/inmemorydb/Start.java
Patch:
@@ -52,7 +52,7 @@ public class Start implements SessionSQLStorage, EmailPasswordSQLStorage {
     private static final String ACCESS_TOKEN_SIGNING_KEY_NAME = "access_token_signing_key";
     private static final String REFRESH_TOKEN_KEY_NAME = "refresh_token_key";
     public static boolean isTesting = false;
-    private boolean enabled = true;
+    boolean enabled = true;
     private Main main;
 
     public Start(Main main) {

File: src/main/java/io/supertokens/webserver/Webserver.java
Patch:
@@ -140,6 +140,7 @@ private void setupRoutes() {
         addAPI(new ApiVersionAPI(main));
         addAPI(new SessionRegenerateAPI(main));
         addAPI(new JWTDataAPI(main));
+        addAPI(new SignUpAPI(main));
     }
 
     public void addAPI(WebserverAPI api) {

File: src/main/java/io/supertokens/storageLayer/StorageLayer.java
Patch:
@@ -76,7 +76,7 @@ private StorageLayer(Main main, String pluginFolderPath, String configFilePath)
             this.storageLayer = storageLayerTemp;
         } else {
             Logging.info(main, "Using in memory storage.");
-            this.storageLayer = new Start();
+            this.storageLayer = new Start(main);
         }
         this.storageLayer.constructor(main.getProcessId(), Main.makeConsolePrintSilent);
         this.storageLayer.loadConfig(configFilePath);

File: src/main/java/io/supertokens/session/accessToken/AccessTokenSigningKey.java
Patch:
@@ -88,7 +88,8 @@ public Utils.PubPriKey getKey() throws StorageQueryException, StorageTransaction
 
     public long getKeyExpiryTime() throws StorageQueryException, StorageTransactionLogicException {
         this.getKey();
-        return Long.MAX_VALUE;  // since keys never expire in free version
+        long createdAtTime = this.keyInfo.createdAtTime;
+        return createdAtTime + Config.getConfig(main).getAccessTokenSigningKeyUpdateInterval();
     }
 
     private KeyInfo maybeGenerateNewKeyAndUpdateInDb() throws StorageQueryException, StorageTransactionLogicException {
@@ -141,7 +142,6 @@ private KeyInfo maybeGenerateNewKeyAndUpdateInDb() throws StorageQueryException,
                 KeyInfo key = null;
                 KeyValueInfoWithLastUpdated keyFromStorage = noSQLStorage.getAccessTokenSigningKey_Transaction();
                 if (keyFromStorage != null) {
-                    System.out.println(keyFromStorage.lastUpdatedSign);
                     key = new KeyInfo(keyFromStorage.value, keyFromStorage.createdAtTime);
                 }
 

File: src/test/java/io/supertokens/test/AccessTokenTest.java
Patch:
@@ -264,6 +264,7 @@ public void signingKeyShortInterval() throws InterruptedException,
         Thread.sleep(1500);
         String keyAfter = AccessTokenSigningKey.getInstance(process.getProcess()).getKey().toString();
         assertNotEquals(keyBefore, keyAfter);
+        assertTrue(AccessTokenSigningKey.getInstance(process.getProcess()).getKeyExpiryTime() != Long.MAX_VALUE);
         process.kill();
     }
 

File: src/main/java/io/supertokens/session/accessToken/AccessTokenSigningKey.java
Patch:
@@ -88,7 +88,8 @@ public Utils.PubPriKey getKey() throws StorageQueryException, StorageTransaction
 
     public long getKeyExpiryTime() throws StorageQueryException, StorageTransactionLogicException {
         this.getKey();
-        return Long.MAX_VALUE;  // since keys never expire in free version
+        long createdAtTime = this.keyInfo.createdAtTime;
+        return createdAtTime + Config.getConfig(main).getAccessTokenSigningKeyUpdateInterval();
     }
 
     private KeyInfo maybeGenerateNewKeyAndUpdateInDb() throws StorageQueryException, StorageTransactionLogicException {
@@ -141,7 +142,6 @@ private KeyInfo maybeGenerateNewKeyAndUpdateInDb() throws StorageQueryException,
                 KeyInfo key = null;
                 KeyValueInfoWithLastUpdated keyFromStorage = noSQLStorage.getAccessTokenSigningKey_Transaction();
                 if (keyFromStorage != null) {
-                    System.out.println(keyFromStorage.lastUpdatedSign);
                     key = new KeyInfo(keyFromStorage.value, keyFromStorage.createdAtTime);
                 }
 

File: src/main/java/io/supertokens/webserver/api/ConfigAPI.java
Patch:
@@ -61,7 +61,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IO
             super.sendJsonResponse(200, result, resp);
         } else {
             JsonObject result = new JsonObject();
-            result.addProperty("status", "NOT ALLOWED");
+            result.addProperty("status", "NOT_ALLOWED");
             super.sendJsonResponse(200, result, resp);
         }
     }

File: src/main/java/io/supertokens/webserver/api/HandshakeAPI.java
Patch:
@@ -39,7 +39,7 @@ public HandshakeAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/handshake";
+        return "/recipe/handshake";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/JWTDataAPI.java
Patch:
@@ -39,7 +39,7 @@ public JWTDataAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/jwt/data";
+        return "/recipe/jwt/data";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/RefreshSessionAPI.java
Patch:
@@ -43,7 +43,7 @@ public RefreshSessionAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session/refresh";
+        return "/recipe/session/refresh";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/SessionAPI.java
Patch:
@@ -50,7 +50,7 @@ public SessionAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session";
+        return "/recipe/session";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/SessionDataAPI.java
Patch:
@@ -38,7 +38,7 @@ public SessionDataAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session/data";
+        return "/recipe/session/data";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/SessionRegenerateAPI.java
Patch:
@@ -47,7 +47,7 @@ public SessionRegenerateAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session/regenerate";
+        return "/recipe/session/regenerate";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/SessionRemoveAPI.java
Patch:
@@ -39,7 +39,7 @@ public SessionRemoveAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session/remove";
+        return "/recipe/session/remove";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/SessionUserAPI.java
Patch:
@@ -40,7 +40,7 @@ public SessionUserAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session/user";
+        return "/recipe/session/user";
     }
 
     @Override

File: src/main/java/io/supertokens/webserver/api/VerifySessionAPI.java
Patch:
@@ -45,7 +45,7 @@ public VerifySessionAPI(Main main) {
 
     @Override
     public String getPath() {
-        return "/session/verify";
+        return "/recipe/session/verify";
     }
 
     @Override

File: src/test/java/io/supertokens/test/AccessTokenTest.java
Patch:
@@ -236,6 +236,7 @@ public void signingKeyShortInterval() throws InterruptedException,
         Thread.sleep(1500);
         String keyAfter = AccessTokenSigningKey.getInstance(process.getProcess()).getKey().toString();
         assertNotEquals(keyBefore, keyAfter);
+        assertTrue(AccessTokenSigningKey.getInstance(process.getProcess()).getKeyExpiryTime() != Long.MAX_VALUE);
         process.kill();
     }
 

File: src/test/java/io/supertokens/test/ConfigAPITest2_4.java
Patch:
@@ -211,7 +211,7 @@ public void outputPossibilitiesConfigAPITest() throws Exception {
         response = HttpRequest
                 .sendGETRequest(process.getProcess(), "", "http://localhost:3567/config", map, 1000, 1000, null);
 
-        assertEquals(response.get("status").getAsString(), "NOT ALLOWED");
+        assertEquals(response.get("status").getAsString(), "NOT_ALLOWED");
         assertEquals(response.entrySet().size(), 1);
 
         process.kill();
@@ -255,7 +255,7 @@ public void testVersion2OutputPossibilitiesConfigAPITest() throws Exception {
                 .sendGETRequest(process.getProcess(), "", "http://localhost:3567/config", map, 1000, 1000, null,
                         Utils.getCdiVersion2_4ForTests());
 
-        assertEquals(response.get("status").getAsString(), "NOT ALLOWED");
+        assertEquals(response.get("status").getAsString(), "NOT_ALLOWED");
         assertEquals(response.entrySet().size(), 1);
 
         process.kill();

File: src/test/java/io/supertokens/test/ConfigTest.java
Patch:
@@ -365,6 +365,7 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process)
         assertEquals(config.getHost(process.getProcess()), "localhost");
         assertEquals(config.getPort(process.getProcess()), 3567);
         assertEquals(config.getSessionExpiredStatusCode(), 401);
+        assertNull(config.getAPIKeys());
         assertEquals(10, config.getMaxThreadPoolSize());
         assertFalse(config.getHttpsEnabled());
 

File: src/main/java/io/supertokens/session/Session.java
Patch:
@@ -166,7 +166,7 @@ public static SessionInformationHolder regenerateToken(Main main, @Nonnull Strin
 
         TokenInfo newAccessToken = AccessToken.createNewAccessToken(main,
                 accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,
-                null, newJWTUserPayload, accessToken.antiCsrfToken, lmrt,
+                accessToken.parentRefreshTokenHash1, newJWTUserPayload, accessToken.antiCsrfToken, lmrt,
                 accessToken.expiryTime, currCDIVersion);
 
         return new SessionInformationHolder(

File: src/main/java/io/supertokens/session/Session.java
Patch:
@@ -166,7 +166,7 @@ public static SessionInformationHolder regenerateToken(Main main, @Nonnull Strin
 
         TokenInfo newAccessToken = AccessToken.createNewAccessToken(main,
                 accessToken.sessionHandle, accessToken.userId, accessToken.refreshTokenHash1,
-                null, newJWTUserPayload, accessToken.antiCsrfToken, lmrt,
+                accessToken.parentRefreshTokenHash1, newJWTUserPayload, accessToken.antiCsrfToken, lmrt,
                 accessToken.expiryTime, currCDIVersion);
 
         return new SessionInformationHolder(

File: src/main/java/io/supertokens/config/CoreConfig.java
Patch:
@@ -64,7 +64,7 @@ public class CoreConfig {
     private Boolean cookie_secure = false;
 
     @JsonProperty
-    private String cookie_same_site = "none";
+    private String cookie_same_site = "lax";
 
     @JsonProperty
     private int port = 3567;

File: src/test/java/io/supertokens/test/ConfigTest.java
Patch:
@@ -329,7 +329,7 @@ public void testCustomLocationForConfigLoadsCorrectly() throws Exception {
     private static void checkConfigValues(CoreConfig config, TestingProcess process) {
 
         assertEquals("Config version did not match default", config.getConfigVersion(), 0);
-        assertEquals("SameSite does not match the default", config.getCookieSameSite(), "none");
+        assertEquals("SameSite does not match the default", config.getCookieSameSite(), "lax");
         assertEquals("Config access token validity did not match default", config.getAccessTokenValidity(),
                 3600 * 1000);
         assertFalse("Config access token blacklisting did not match default", config.getAccessTokenBlacklisting());

File: src/main/java/io/supertokens/session/info/TokenInfo.java
Patch:
@@ -30,12 +30,13 @@ public class TokenInfo {
     @Nullable
     public final Boolean cookieSecure;
 
+    @Nullable
     public final String domain;
 
     public final String sameSite;
 
     public TokenInfo(String token, long expiry, long createdTime, String cookiePath, @Nullable
-            Boolean cookieSecure, String domain, String sameSite) {
+            Boolean cookieSecure, @Nullable String domain, String sameSite) {
         this.token = token;
         this.expiry = expiry;
         this.createdTime = createdTime;

File: src/main/java/io/supertokens/webserver/WebserverAPI.java
Patch:
@@ -44,6 +44,7 @@ public abstract class WebserverAPI extends HttpServlet {
         supportedVersions.add("1.0");
         supportedVersions.add("2.0");
         supportedVersions.add("2.1");
+        supportedVersions.add("2.2");
     }
 
     public WebserverAPI(Main main) {

File: src/main/java/io/supertokens/webserver/api/RefreshSessionAPI.java
Patch:
@@ -59,7 +59,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             SessionInformationHolder sessionInfo = Session
-                    .refreshSession(main, refreshToken);
+                    .refreshSession(main, refreshToken, super.getVersionFromRequest(req));
 
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
 

File: src/main/java/io/supertokens/webserver/api/SessionAPI.java
Patch:
@@ -62,7 +62,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             SessionInformationHolder sessionInfo = Session
-                    .createNewSession(main, userId, userDataInJWT, userDataInDatabase);
+                    .createNewSession(main, userId, userDataInJWT, userDataInDatabase,
+                            super.getVersionFromRequest(req));
 
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
 

File: src/main/java/io/supertokens/webserver/api/SessionRegenerateAPI.java
Patch:
@@ -64,7 +64,8 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
         JsonObject userDataInJWT = InputParser.parseJsonObjectOrThrowError(input, "userDataInJWT", true);
 
         try {
-            SessionInformationHolder sessionInfo = Session.regenerateToken(main, accessToken, userDataInJWT);
+            SessionInformationHolder sessionInfo = Session.regenerateToken(main, accessToken, userDataInJWT,
+                    super.getVersionFromRequest(req));
 
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
 

File: src/main/java/io/supertokens/webserver/api/VerifySessionAPI.java
Patch:
@@ -64,7 +64,7 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws I
 
         try {
             SessionInformationHolder sessionInfo = Session
-                    .getSession(main, accessToken, antiCsrfToken, doAntiCsrfCheck);
+                    .getSession(main, accessToken, antiCsrfToken, doAntiCsrfCheck, super.getVersionFromRequest(req));
 
             JsonObject result = new JsonParser().parse(new Gson().toJson(sessionInfo)).getAsJsonObject();
 

File: src/test/java/io/supertokens/test/ConfigTest.java
Patch:
@@ -36,8 +36,7 @@
 
 import static junit.framework.TestCase.assertEquals;
 import static junit.framework.TestCase.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 
 public class ConfigTest {
 
@@ -343,7 +342,7 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process)
                 CLIOptions.get(process.getProcess()).getInstallationPath() + "logs/info.log");
         assertEquals("Config error log path did not match default", config.getErrorLogPath(process.getProcess()),
                 CLIOptions.get(process.getProcess()).getInstallationPath() + "logs/error.log");
-        assertEquals("Config cookie domain did not match default", config.getCookieDomain(), "localhost");
+        assertNull("Config cookie domain did not match default", config.getCookieDomain(null));
         assertFalse("Config cookie secure did not match default", config.getCookieSecure(process.getProcess()));
 
         assertEquals(config.getHost(process.getProcess()), "localhost");

File: src/test/java/io/supertokens/test/HandshakeAPITest.java
Patch:
@@ -106,7 +106,7 @@ public void signingKeyHandshakeAPITest() throws Exception {
 
         //check cookieDomain
         assertEquals(response.get("cookieDomain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion1ForTests()));
 
         //check cookieSecure
         assertEquals(response.get("cookieSecure").getAsBoolean(),

File: src/test/java/io/supertokens/test/HandshakeAPITest2.java
Patch:
@@ -118,7 +118,7 @@ private static void checkHandshakeAPIResponse(JsonObject response, TestingProces
 
         //check cookieDomain
         assertEquals(response.get("cookieDomain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
 
         //check cookieSecure
         assertEquals(response.get("cookieSecure").getAsBoolean(),

File: src/test/java/io/supertokens/test/InMemoryDBTest.java
Patch:
@@ -138,7 +138,7 @@ public void createAndGetSession() throws InterruptedException, StorageQueryExcep
         assert sessionInfo.idRefreshToken != null;
         assert sessionInfo.idRefreshToken.cookieSecure != null;
         assert sessionInfo.idRefreshToken.cookiePath != null;
-        assert sessionInfo.idRefreshToken.domain != null;
+        assert sessionInfo.idRefreshToken.domain == null;
 
         SessionInformationHolder verifiedSession = Session.getSession(process.getProcess(),
                 sessionInfo.accessToken.token, sessionInfo.antiCsrfToken, true);

File: src/test/java/io/supertokens/test/RefreshSessionAPITest.java
Patch:
@@ -167,7 +167,7 @@ public void successOutputWithValidRefreshTokenTest() throws Exception {
         assertEquals(response.get("accessToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion1ForTests()));
         assertEquals(response.get("accessToken").getAsJsonObject().entrySet().size(), 6);
 
         assertTrue(response.get("refreshToken").getAsJsonObject().has("token"));
@@ -180,7 +180,7 @@ public void successOutputWithValidRefreshTokenTest() throws Exception {
         assertEquals(response.get("refreshToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("refreshToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion1ForTests()));
         assertEquals(response.get("refreshToken").getAsJsonObject().entrySet().size(), 6);
 
         assertTrue(response.get("idRefreshToken").getAsJsonObject().has("token"));

File: src/test/java/io/supertokens/test/RefreshSessionAPITest2.java
Patch:
@@ -226,7 +226,7 @@ private static void checkVersion2RefreshSessionResponse(JsonObject response,
         assertEquals(response.get("accessToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
         assertEquals(response.get("accessToken").getAsJsonObject().entrySet().size(), 7);
@@ -239,7 +239,7 @@ private static void checkVersion2RefreshSessionResponse(JsonObject response,
         assertEquals(response.get("refreshToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("refreshToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("refreshToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
         assertEquals(response.get("refreshToken").getAsJsonObject().entrySet().size(), 7);
@@ -252,7 +252,7 @@ private static void checkVersion2RefreshSessionResponse(JsonObject response,
         assertEquals(response.get("idRefreshToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("idRefreshToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("idRefreshToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
 

File: src/test/java/io/supertokens/test/ServerPingTest.java
Patch:
@@ -44,6 +44,7 @@
 import java.io.OutputStream;
 import java.net.*;
 import java.nio.charset.StandardCharsets;
+import java.util.Objects;
 
 import static org.junit.Assert.*;
 
@@ -183,8 +184,9 @@ protected URLConnection openConnection(URL u) {
 
         assertEquals("Server ping instanceID does not match process instanceID",
                 pingData.get("instanceId").getAsString(), process.getProcess().getProcessId());
+        String configCookieDomain = Config.getConfig(process.getProcess()).getCookieDomain(null);
         assertEquals("Server ping cookieDomain does not match process cookieDomain",
-                pingData.get("cookieDomain").getAsString(), Config.getConfig(process.getProcess()).getCookieDomain());
+                pingData.get("cookieDomain").getAsString(), Objects.requireNonNullElse(configCookieDomain, "not set"));
         assertEquals("Server ping instanceStartTime does not match process instanceStartTime",
                 pingData.get("instanceStartTime").getAsLong(), process.getProcess().getProcessStartTime());
         assertEquals("Server ping licenseKeyId does not match process licenseKeyId",

File: src/test/java/io/supertokens/test/SessionAPITest2.java
Patch:
@@ -282,7 +282,7 @@ public static void checkVersion2SessionResponse(JsonObject response, TestingProc
         assertEquals(response.get("accessToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
         assertEquals(response.get("accessToken").getAsJsonObject().entrySet().size(), 7);
@@ -297,7 +297,7 @@ public static void checkVersion2SessionResponse(JsonObject response, TestingProc
         assertEquals(response.get("refreshToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("refreshToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("refreshToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
         assertEquals(response.get("refreshToken").getAsJsonObject().entrySet().size(), 7);
@@ -310,7 +310,7 @@ public static void checkVersion2SessionResponse(JsonObject response, TestingProc
         assertEquals(response.get("idRefreshToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("idRefreshToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("idRefreshToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
         assertEquals(response.get("idRefreshToken").getAsJsonObject().entrySet().size(), 7);

File: src/test/java/io/supertokens/test/SessionRegenerateAPITest.java
Patch:
@@ -104,7 +104,7 @@ public void testCallRegenerateAPIWithNewJwtPayloadAndCheckResponses() throws Exc
         assertEquals(sessionRegenerateResponse.get("accessToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(sessionRegenerateResponse.get("accessToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(sessionRegenerateResponse.get("accessToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
 

File: src/test/java/io/supertokens/test/SessionTest1.java
Patch:
@@ -92,7 +92,7 @@ public void createAndGetSession() throws InterruptedException, StorageQueryExcep
         assert sessionInfo.idRefreshToken != null;
         assert sessionInfo.idRefreshToken.cookieSecure != null;
         assert sessionInfo.idRefreshToken.cookiePath != null;
-        assert sessionInfo.idRefreshToken.domain != null;
+        assert sessionInfo.idRefreshToken.domain == null;
 
         SessionInformationHolder verifiedSession = Session.getSession(process.getProcess(),
                 sessionInfo.accessToken.token, sessionInfo.antiCsrfToken, true);

File: src/test/java/io/supertokens/test/SessionTest4.java
Patch:
@@ -345,7 +345,7 @@ public void checkingWithCookieSecureFalse()
         assertNotEquals(newSession.accessToken.createdTime, refreshedSession.accessToken.createdTime);
         assertEquals(newSession.session.userDataInJWT.toString(), refreshedSession.session.userDataInJWT.toString());
         assert newSession.accessToken.cookieSecure != null;
-        assert newSession.accessToken.domain != null;
+        assert newSession.accessToken.domain == null;
         assertFalse(newSession.accessToken.cookieSecure);
 
         process.kill();

File: src/test/java/io/supertokens/test/VerifySessionAPITest.java
Patch:
@@ -144,7 +144,7 @@ public void successOutputCheckNewAccessToken() throws InterruptedException, IOEx
         assertEquals(response.get("accessToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion1ForTests()));
         assertEquals(response.get("accessToken").getAsJsonObject().entrySet().size(), 6);
 
         assertNotNull(response.get("jwtSigningPublicKey").getAsString());

File: src/test/java/io/supertokens/test/VerifySessionAPITest2.java
Patch:
@@ -147,7 +147,7 @@ public void successOutputCheckNewAccessToken() throws Exception {
         assertEquals(response.get("accessToken").getAsJsonObject().get("cookieSecure").getAsBoolean(),
                 Config.getConfig(process.getProcess()).getCookieSecure(process.getProcess()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("domain").getAsString(),
-                Config.getConfig(process.getProcess()).getCookieDomain());
+                Config.getConfig(process.getProcess()).getCookieDomain(Utils.getCdiVersion2ForTests()));
         assertEquals(response.get("accessToken").getAsJsonObject().get("sameSite").getAsString(),
                 Config.getConfig(process.getProcess()).getCookieSameSite());
 

File: src/main/java/io/supertokens/config/CoreConfig.java
Patch:
@@ -46,7 +46,7 @@ public class CoreConfig {
     private double refresh_token_validity = 60 * 2400; // in mins
 
     @JsonProperty
-    private String refresh_api_path = "/refresh";
+    private String refresh_api_path = "/session/refresh";
 
     private final String logDefault = "asdkfahbdfk3kjHS";
     @JsonProperty

File: src/test/java/io/supertokens/test/ConfigTest.java
Patch:
@@ -338,7 +338,7 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process)
         assertTrue("Config enable anti CSRF did not match default", config.getEnableAntiCSRF());
         assertEquals("Config refresh token validity did not match default", config.getRefreshTokenValidity(),
                 60 * 2400 * 60 * (long) 1000);
-        assertEquals("Config refresh API path did not match default", config.getRefreshAPIPath(), "/refresh");
+        assertEquals("Config refresh API path did not match default", config.getRefreshAPIPath(), "/session/refresh");
         assertEquals("Config info log path did not match default", config.getInfoLogPath(process.getProcess()),
                 CLIOptions.get(process.getProcess()).getInstallationPath() + "logs/info.log");
         assertEquals("Config error log path did not match default", config.getErrorLogPath(process.getProcess()),

File: src/main/java/io/supertokens/config/CoreConfig.java
Patch:
@@ -74,7 +74,7 @@ public class CoreConfig {
     private int max_server_pool_size = 10;
 
     @JsonProperty
-    private int session_expired_status_code = 440;
+    private int session_expired_status_code = 401;
 
     //	TODO: add https in later version
 //	# (OPTIONAL) boolean value (true or false). Set to true if you want to enable https requests to SuperTokens.

File: src/test/java/io/supertokens/test/ConfigTest.java
Patch:
@@ -69,7 +69,7 @@ public void testIfSessionExpiredStatusCodeWithDifferentValidValueIsBeingSet() th
         assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
     }
 
-    //- test for session_expired_status_code config -> default is 440; range is >= 400, < 600;
+    //- test for session_expired_status_code config -> default is 401; range is >= 400, < 600;
     @Test
     public void testSessionExpiredStatusCodeRangeInConfig() throws Exception {
         String[] args = {"../"};
@@ -348,7 +348,7 @@ private static void checkConfigValues(CoreConfig config, TestingProcess process)
 
         assertEquals(config.getHost(process.getProcess()), "localhost");
         assertEquals(config.getPort(process.getProcess()), 3567);
-        assertEquals(config.getSessionExpiredStatusCode(), 440);
+        assertEquals(config.getSessionExpiredStatusCode(), 401);
         assertEquals(10, config.getMaxThreadPoolSize());
         assertFalse(config.getHttpsEnabled());
 

File: cli/src/main/java/io/supertokens/cli/commandHandler/start/StartHandler.java
Patch:
@@ -104,6 +104,9 @@ public void doCommand(String installationDir, boolean viaInstaller, String[] arg
             if (port != null) {
                 commands.add("port=" + port);
             }
+            if (forceNoInMemDB) {
+                commands.add("forceNoInMemDB=true");
+            }
         }
         if (!foreground) {
             try {

File: cli/src/main/java/io/supertokens/cli/licenseKey/LicenseKey.java
Patch:
@@ -101,7 +101,7 @@ public enum MODE {
     }
 
     public enum PLAN_TYPE {
-        FREE("FREE"), COMMERCIAL_TRIAL("COMMERCIAL_TRIAL"), COMMERCIAL("COMMERCIAL");
+        FREE("FREE");
 
         private String playType;
 

File: downloader/src/main/java/io/supertokens/downloader/Main.java
Patch:
@@ -81,7 +81,7 @@ private static void start(String[] args) throws IOException, HTTPResponseExcepti
 
         // ------------
         String mode = licenseKeyParser.getMode();
-        String planType = "COMMERCIAL";
+        String planType = "FREE";
         Boolean withSource = installOptionsParser.installWithSource();
 
         String coreDependencyJarsGetURL = HTTPRequest

